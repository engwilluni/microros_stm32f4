
exemplo_microros_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000182bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b2c  08018450  08018450  00028450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019f7c  08019f7c  000301a4  2**0
                  CONTENTS
  4 .ARM          00000008  08019f7c  08019f7c  00029f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019f84  08019f84  000301a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019f84  08019f84  00029f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019f88  08019f88  00029f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08019f8c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301a4  2**0
                  CONTENTS
 10 .bss          00015a40  200001a8  200001a8  000301a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20015be8  20015be8  000301a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c3ea  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000518b  00000000  00000000  0005c5be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fc0  00000000  00000000  00061750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e00  00000000  00000000  00063710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000285be  00000000  00000000  00065510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026cab  00000000  00000000  0008dace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7c6f  00000000  00000000  000b4779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000ac  00000000  00000000  0019c3e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009610  00000000  00000000  0019c494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a8 	.word	0x200001a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018434 	.word	0x08018434

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ac 	.word	0x200001ac
 80001cc:	08018434 	.word	0x08018434

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002be:	f000 b9b9 	b.w	8000634 <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000350:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000354:	f000 b96e 	b.w	8000634 <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	4604      	mov	r4, r0
 8000378:	468c      	mov	ip, r1
 800037a:	2b00      	cmp	r3, #0
 800037c:	f040 8083 	bne.w	8000486 <__udivmoddi4+0x116>
 8000380:	428a      	cmp	r2, r1
 8000382:	4617      	mov	r7, r2
 8000384:	d947      	bls.n	8000416 <__udivmoddi4+0xa6>
 8000386:	fab2 f282 	clz	r2, r2
 800038a:	b142      	cbz	r2, 800039e <__udivmoddi4+0x2e>
 800038c:	f1c2 0020 	rsb	r0, r2, #32
 8000390:	fa24 f000 	lsr.w	r0, r4, r0
 8000394:	4091      	lsls	r1, r2
 8000396:	4097      	lsls	r7, r2
 8000398:	ea40 0c01 	orr.w	ip, r0, r1
 800039c:	4094      	lsls	r4, r2
 800039e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fbbc f6f8 	udiv	r6, ip, r8
 80003a8:	fa1f fe87 	uxth.w	lr, r7
 80003ac:	fb08 c116 	mls	r1, r8, r6, ip
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f10e 	mul.w	r1, r6, lr
 80003b8:	4299      	cmp	r1, r3
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x60>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003c2:	f080 8119 	bcs.w	80005f8 <__udivmoddi4+0x288>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 8116 	bls.w	80005f8 <__udivmoddi4+0x288>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x8c>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ee:	f080 8105 	bcs.w	80005fc <__udivmoddi4+0x28c>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f240 8102 	bls.w	80005fc <__udivmoddi4+0x28c>
 80003f8:	3802      	subs	r0, #2
 80003fa:	443c      	add	r4, r7
 80003fc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000400:	eba4 040e 	sub.w	r4, r4, lr
 8000404:	2600      	movs	r6, #0
 8000406:	b11d      	cbz	r5, 8000410 <__udivmoddi4+0xa0>
 8000408:	40d4      	lsrs	r4, r2
 800040a:	2300      	movs	r3, #0
 800040c:	e9c5 4300 	strd	r4, r3, [r5]
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	b902      	cbnz	r2, 800041a <__udivmoddi4+0xaa>
 8000418:	deff      	udf	#255	; 0xff
 800041a:	fab2 f282 	clz	r2, r2
 800041e:	2a00      	cmp	r2, #0
 8000420:	d150      	bne.n	80004c4 <__udivmoddi4+0x154>
 8000422:	1bcb      	subs	r3, r1, r7
 8000424:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000428:	fa1f f887 	uxth.w	r8, r7
 800042c:	2601      	movs	r6, #1
 800042e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000432:	0c21      	lsrs	r1, r4, #16
 8000434:	fb0e 331c 	mls	r3, lr, ip, r3
 8000438:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043c:	fb08 f30c 	mul.w	r3, r8, ip
 8000440:	428b      	cmp	r3, r1
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0xe4>
 8000444:	1879      	adds	r1, r7, r1
 8000446:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0xe2>
 800044c:	428b      	cmp	r3, r1
 800044e:	f200 80e9 	bhi.w	8000624 <__udivmoddi4+0x2b4>
 8000452:	4684      	mov	ip, r0
 8000454:	1ac9      	subs	r1, r1, r3
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb1 f0fe 	udiv	r0, r1, lr
 800045c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000460:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000464:	fb08 f800 	mul.w	r8, r8, r0
 8000468:	45a0      	cmp	r8, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x10c>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x10a>
 8000474:	45a0      	cmp	r8, r4
 8000476:	f200 80d9 	bhi.w	800062c <__udivmoddi4+0x2bc>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 0408 	sub.w	r4, r4, r8
 8000480:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000484:	e7bf      	b.n	8000406 <__udivmoddi4+0x96>
 8000486:	428b      	cmp	r3, r1
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0x12e>
 800048a:	2d00      	cmp	r5, #0
 800048c:	f000 80b1 	beq.w	80005f2 <__udivmoddi4+0x282>
 8000490:	2600      	movs	r6, #0
 8000492:	e9c5 0100 	strd	r0, r1, [r5]
 8000496:	4630      	mov	r0, r6
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	fab3 f683 	clz	r6, r3
 80004a2:	2e00      	cmp	r6, #0
 80004a4:	d14a      	bne.n	800053c <__udivmoddi4+0x1cc>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d302      	bcc.n	80004b0 <__udivmoddi4+0x140>
 80004aa:	4282      	cmp	r2, r0
 80004ac:	f200 80b8 	bhi.w	8000620 <__udivmoddi4+0x2b0>
 80004b0:	1a84      	subs	r4, r0, r2
 80004b2:	eb61 0103 	sbc.w	r1, r1, r3
 80004b6:	2001      	movs	r0, #1
 80004b8:	468c      	mov	ip, r1
 80004ba:	2d00      	cmp	r5, #0
 80004bc:	d0a8      	beq.n	8000410 <__udivmoddi4+0xa0>
 80004be:	e9c5 4c00 	strd	r4, ip, [r5]
 80004c2:	e7a5      	b.n	8000410 <__udivmoddi4+0xa0>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f603 	lsr.w	r6, r0, r3
 80004cc:	4097      	lsls	r7, r2
 80004ce:	fa01 f002 	lsl.w	r0, r1, r2
 80004d2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d6:	40d9      	lsrs	r1, r3
 80004d8:	4330      	orrs	r0, r6
 80004da:	0c03      	lsrs	r3, r0, #16
 80004dc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004e0:	fa1f f887 	uxth.w	r8, r7
 80004e4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ec:	fb06 f108 	mul.w	r1, r6, r8
 80004f0:	4299      	cmp	r1, r3
 80004f2:	fa04 f402 	lsl.w	r4, r4, r2
 80004f6:	d909      	bls.n	800050c <__udivmoddi4+0x19c>
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004fe:	f080 808d 	bcs.w	800061c <__udivmoddi4+0x2ac>
 8000502:	4299      	cmp	r1, r3
 8000504:	f240 808a 	bls.w	800061c <__udivmoddi4+0x2ac>
 8000508:	3e02      	subs	r6, #2
 800050a:	443b      	add	r3, r7
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b281      	uxth	r1, r0
 8000510:	fbb3 f0fe 	udiv	r0, r3, lr
 8000514:	fb0e 3310 	mls	r3, lr, r0, r3
 8000518:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051c:	fb00 f308 	mul.w	r3, r0, r8
 8000520:	428b      	cmp	r3, r1
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x1c4>
 8000524:	1879      	adds	r1, r7, r1
 8000526:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800052a:	d273      	bcs.n	8000614 <__udivmoddi4+0x2a4>
 800052c:	428b      	cmp	r3, r1
 800052e:	d971      	bls.n	8000614 <__udivmoddi4+0x2a4>
 8000530:	3802      	subs	r0, #2
 8000532:	4439      	add	r1, r7
 8000534:	1acb      	subs	r3, r1, r3
 8000536:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800053a:	e778      	b.n	800042e <__udivmoddi4+0xbe>
 800053c:	f1c6 0c20 	rsb	ip, r6, #32
 8000540:	fa03 f406 	lsl.w	r4, r3, r6
 8000544:	fa22 f30c 	lsr.w	r3, r2, ip
 8000548:	431c      	orrs	r4, r3
 800054a:	fa20 f70c 	lsr.w	r7, r0, ip
 800054e:	fa01 f306 	lsl.w	r3, r1, r6
 8000552:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000556:	fa21 f10c 	lsr.w	r1, r1, ip
 800055a:	431f      	orrs	r7, r3
 800055c:	0c3b      	lsrs	r3, r7, #16
 800055e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000562:	fa1f f884 	uxth.w	r8, r4
 8000566:	fb0e 1119 	mls	r1, lr, r9, r1
 800056a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800056e:	fb09 fa08 	mul.w	sl, r9, r8
 8000572:	458a      	cmp	sl, r1
 8000574:	fa02 f206 	lsl.w	r2, r2, r6
 8000578:	fa00 f306 	lsl.w	r3, r0, r6
 800057c:	d908      	bls.n	8000590 <__udivmoddi4+0x220>
 800057e:	1861      	adds	r1, r4, r1
 8000580:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000584:	d248      	bcs.n	8000618 <__udivmoddi4+0x2a8>
 8000586:	458a      	cmp	sl, r1
 8000588:	d946      	bls.n	8000618 <__udivmoddi4+0x2a8>
 800058a:	f1a9 0902 	sub.w	r9, r9, #2
 800058e:	4421      	add	r1, r4
 8000590:	eba1 010a 	sub.w	r1, r1, sl
 8000594:	b2bf      	uxth	r7, r7
 8000596:	fbb1 f0fe 	udiv	r0, r1, lr
 800059a:	fb0e 1110 	mls	r1, lr, r0, r1
 800059e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005a2:	fb00 f808 	mul.w	r8, r0, r8
 80005a6:	45b8      	cmp	r8, r7
 80005a8:	d907      	bls.n	80005ba <__udivmoddi4+0x24a>
 80005aa:	19e7      	adds	r7, r4, r7
 80005ac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80005b0:	d22e      	bcs.n	8000610 <__udivmoddi4+0x2a0>
 80005b2:	45b8      	cmp	r8, r7
 80005b4:	d92c      	bls.n	8000610 <__udivmoddi4+0x2a0>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4427      	add	r7, r4
 80005ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005be:	eba7 0708 	sub.w	r7, r7, r8
 80005c2:	fba0 8902 	umull	r8, r9, r0, r2
 80005c6:	454f      	cmp	r7, r9
 80005c8:	46c6      	mov	lr, r8
 80005ca:	4649      	mov	r1, r9
 80005cc:	d31a      	bcc.n	8000604 <__udivmoddi4+0x294>
 80005ce:	d017      	beq.n	8000600 <__udivmoddi4+0x290>
 80005d0:	b15d      	cbz	r5, 80005ea <__udivmoddi4+0x27a>
 80005d2:	ebb3 020e 	subs.w	r2, r3, lr
 80005d6:	eb67 0701 	sbc.w	r7, r7, r1
 80005da:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005de:	40f2      	lsrs	r2, r6
 80005e0:	ea4c 0202 	orr.w	r2, ip, r2
 80005e4:	40f7      	lsrs	r7, r6
 80005e6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ea:	2600      	movs	r6, #0
 80005ec:	4631      	mov	r1, r6
 80005ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f2:	462e      	mov	r6, r5
 80005f4:	4628      	mov	r0, r5
 80005f6:	e70b      	b.n	8000410 <__udivmoddi4+0xa0>
 80005f8:	4606      	mov	r6, r0
 80005fa:	e6e9      	b.n	80003d0 <__udivmoddi4+0x60>
 80005fc:	4618      	mov	r0, r3
 80005fe:	e6fd      	b.n	80003fc <__udivmoddi4+0x8c>
 8000600:	4543      	cmp	r3, r8
 8000602:	d2e5      	bcs.n	80005d0 <__udivmoddi4+0x260>
 8000604:	ebb8 0e02 	subs.w	lr, r8, r2
 8000608:	eb69 0104 	sbc.w	r1, r9, r4
 800060c:	3801      	subs	r0, #1
 800060e:	e7df      	b.n	80005d0 <__udivmoddi4+0x260>
 8000610:	4608      	mov	r0, r1
 8000612:	e7d2      	b.n	80005ba <__udivmoddi4+0x24a>
 8000614:	4660      	mov	r0, ip
 8000616:	e78d      	b.n	8000534 <__udivmoddi4+0x1c4>
 8000618:	4681      	mov	r9, r0
 800061a:	e7b9      	b.n	8000590 <__udivmoddi4+0x220>
 800061c:	4666      	mov	r6, ip
 800061e:	e775      	b.n	800050c <__udivmoddi4+0x19c>
 8000620:	4630      	mov	r0, r6
 8000622:	e74a      	b.n	80004ba <__udivmoddi4+0x14a>
 8000624:	f1ac 0c02 	sub.w	ip, ip, #2
 8000628:	4439      	add	r1, r7
 800062a:	e713      	b.n	8000454 <__udivmoddi4+0xe4>
 800062c:	3802      	subs	r0, #2
 800062e:	443c      	add	r4, r7
 8000630:	e724      	b.n	800047c <__udivmoddi4+0x10c>
 8000632:	bf00      	nop

08000634 <__aeabi_idiv0>:
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000644:	f009 fd0e 	bl	800a064 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000648:	4b58      	ldr	r3, [pc, #352]	; (80007ac <pvPortMallocMicroROS+0x174>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d101      	bne.n	8000654 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000650:	f000 f98c 	bl	800096c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000654:	4b56      	ldr	r3, [pc, #344]	; (80007b0 <pvPortMallocMicroROS+0x178>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4013      	ands	r3, r2
 800065c:	2b00      	cmp	r3, #0
 800065e:	f040 808e 	bne.w	800077e <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d01d      	beq.n	80006a4 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000668:	2208      	movs	r2, #8
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	2b00      	cmp	r3, #0
 8000678:	d014      	beq.n	80006a4 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f023 0307 	bic.w	r3, r3, #7
 8000680:	3308      	adds	r3, #8
 8000682:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	2b00      	cmp	r3, #0
 800068c:	d00a      	beq.n	80006a4 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800068e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000692:	f383 8811 	msr	BASEPRI, r3
 8000696:	f3bf 8f6f 	isb	sy
 800069a:	f3bf 8f4f 	dsb	sy
 800069e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006a0:	bf00      	nop
 80006a2:	e7fe      	b.n	80006a2 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d069      	beq.n	800077e <pvPortMallocMicroROS+0x146>
 80006aa:	4b42      	ldr	r3, [pc, #264]	; (80007b4 <pvPortMallocMicroROS+0x17c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d864      	bhi.n	800077e <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006b4:	4b40      	ldr	r3, [pc, #256]	; (80007b8 <pvPortMallocMicroROS+0x180>)
 80006b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006b8:	4b3f      	ldr	r3, [pc, #252]	; (80007b8 <pvPortMallocMicroROS+0x180>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006be:	e004      	b.n	80006ca <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80006c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d903      	bls.n	80006dc <pvPortMallocMicroROS+0xa4>
 80006d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1f1      	bne.n	80006c0 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006dc:	4b33      	ldr	r3, [pc, #204]	; (80007ac <pvPortMallocMicroROS+0x174>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d04b      	beq.n	800077e <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006e6:	6a3b      	ldr	r3, [r7, #32]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2208      	movs	r2, #8
 80006ec:	4413      	add	r3, r2
 80006ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80006f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	6a3b      	ldr	r3, [r7, #32]
 80006f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80006f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fa:	685a      	ldr	r2, [r3, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	1ad2      	subs	r2, r2, r3
 8000700:	2308      	movs	r3, #8
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	429a      	cmp	r2, r3
 8000706:	d91f      	bls.n	8000748 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	f003 0307 	and.w	r3, r3, #7
 8000716:	2b00      	cmp	r3, #0
 8000718:	d00a      	beq.n	8000730 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800071a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800071e:	f383 8811 	msr	BASEPRI, r3
 8000722:	f3bf 8f6f 	isb	sy
 8000726:	f3bf 8f4f 	dsb	sy
 800072a:	613b      	str	r3, [r7, #16]
}
 800072c:	bf00      	nop
 800072e:	e7fe      	b.n	800072e <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000732:	685a      	ldr	r2, [r3, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	1ad2      	subs	r2, r2, r3
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000742:	69b8      	ldr	r0, [r7, #24]
 8000744:	f000 f974 	bl	8000a30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <pvPortMallocMicroROS+0x17c>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <pvPortMallocMicroROS+0x17c>)
 8000754:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <pvPortMallocMicroROS+0x17c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <pvPortMallocMicroROS+0x184>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	429a      	cmp	r2, r3
 8000760:	d203      	bcs.n	800076a <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <pvPortMallocMicroROS+0x17c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a15      	ldr	r2, [pc, #84]	; (80007bc <pvPortMallocMicroROS+0x184>)
 8000768:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800076a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076c:	685a      	ldr	r2, [r3, #4]
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <pvPortMallocMicroROS+0x178>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	431a      	orrs	r2, r3
 8000774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000776:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800077e:	f009 fc7f 	bl	800a080 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	f003 0307 	and.w	r3, r3, #7
 8000788:	2b00      	cmp	r3, #0
 800078a:	d00a      	beq.n	80007a2 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 800078c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000790:	f383 8811 	msr	BASEPRI, r3
 8000794:	f3bf 8f6f 	isb	sy
 8000798:	f3bf 8f4f 	dsb	sy
 800079c:	60fb      	str	r3, [r7, #12]
}
 800079e:	bf00      	nop
 80007a0:	e7fe      	b.n	80007a0 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80007a2:	69fb      	ldr	r3, [r7, #28]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3728      	adds	r7, #40	; 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200076fc 	.word	0x200076fc
 80007b0:	20007708 	.word	0x20007708
 80007b4:	20007700 	.word	0x20007700
 80007b8:	200076f4 	.word	0x200076f4
 80007bc:	20007704 	.word	0x20007704

080007c0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d048      	beq.n	8000864 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007d2:	2308      	movs	r3, #8
 80007d4:	425b      	negs	r3, r3
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	4413      	add	r3, r2
 80007da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	685a      	ldr	r2, [r3, #4]
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <vPortFreeMicroROS+0xac>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4013      	ands	r3, r2
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d10a      	bne.n	8000804 <vPortFreeMicroROS+0x44>
	__asm volatile
 80007ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007f2:	f383 8811 	msr	BASEPRI, r3
 80007f6:	f3bf 8f6f 	isb	sy
 80007fa:	f3bf 8f4f 	dsb	sy
 80007fe:	60fb      	str	r3, [r7, #12]
}
 8000800:	bf00      	nop
 8000802:	e7fe      	b.n	8000802 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00a      	beq.n	8000822 <vPortFreeMicroROS+0x62>
	__asm volatile
 800080c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000810:	f383 8811 	msr	BASEPRI, r3
 8000814:	f3bf 8f6f 	isb	sy
 8000818:	f3bf 8f4f 	dsb	sy
 800081c:	60bb      	str	r3, [r7, #8]
}
 800081e:	bf00      	nop
 8000820:	e7fe      	b.n	8000820 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	685a      	ldr	r2, [r3, #4]
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <vPortFreeMicroROS+0xac>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4013      	ands	r3, r2
 800082c:	2b00      	cmp	r3, #0
 800082e:	d019      	beq.n	8000864 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d115      	bne.n	8000864 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	685a      	ldr	r2, [r3, #4]
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <vPortFreeMicroROS+0xac>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	43db      	mvns	r3, r3
 8000842:	401a      	ands	r2, r3
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000848:	f009 fc0c 	bl	800a064 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <vPortFreeMicroROS+0xb0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4413      	add	r3, r2
 8000856:	4a06      	ldr	r2, [pc, #24]	; (8000870 <vPortFreeMicroROS+0xb0>)
 8000858:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800085a:	6938      	ldr	r0, [r7, #16]
 800085c:	f000 f8e8 	bl	8000a30 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000860:	f009 fc0e 	bl	800a080 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000864:	bf00      	nop
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20007708 	.word	0x20007708
 8000870:	20007700 	.word	0x20007700

08000874 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000874:	b480      	push	{r7}
 8000876:	b087      	sub	sp, #28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000880:	2308      	movs	r3, #8
 8000882:	425b      	negs	r3, r3
 8000884:	697a      	ldr	r2, [r7, #20]
 8000886:	4413      	add	r3, r2
 8000888:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <getBlockSize+0x38>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	43db      	mvns	r3, r3
 8000898:	4013      	ands	r3, r2
 800089a:	60fb      	str	r3, [r7, #12]

	return count;
 800089c:	68fb      	ldr	r3, [r7, #12]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	371c      	adds	r7, #28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20007708 	.word	0x20007708

080008b0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008ba:	f009 fbd3 	bl	800a064 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008be:	6838      	ldr	r0, [r7, #0]
 80008c0:	f7ff feba 	bl	8000638 <pvPortMallocMicroROS>
 80008c4:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80008ca:	2308      	movs	r3, #8
 80008cc:	425b      	negs	r3, r3
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	685a      	ldr	r2, [r3, #4]
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <pvPortReallocMicroROS+0x70>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	43db      	mvns	r3, r3
 80008ea:	4013      	ands	r3, r2
 80008ec:	617b      	str	r3, [r7, #20]

  	while(count--)
 80008ee:	e007      	b.n	8000900 <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 80008f0:	69fa      	ldr	r2, [r7, #28]
 80008f2:	1c53      	adds	r3, r2, #1
 80008f4:	61fb      	str	r3, [r7, #28]
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	1c59      	adds	r1, r3, #1
 80008fa:	61b9      	str	r1, [r7, #24]
 80008fc:	7812      	ldrb	r2, [r2, #0]
 80008fe:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	1e5a      	subs	r2, r3, #1
 8000904:	617a      	str	r2, [r7, #20]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1f2      	bne.n	80008f0 <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ff58 	bl	80007c0 <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 8000910:	f009 fbb6 	bl	800a080 <xTaskResumeAll>

	return newmem;
 8000914:	693b      	ldr	r3, [r7, #16]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3720      	adds	r7, #32
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20007708 	.word	0x20007708

08000924 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800092e:	f009 fb99 	bl	800a064 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	fb02 f303 	mul.w	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800093c:	6978      	ldr	r0, [r7, #20]
 800093e:	f7ff fe7b 	bl	8000638 <pvPortMallocMicroROS>
 8000942:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000948:	e004      	b.n	8000954 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	1c5a      	adds	r2, r3, #1
 800094e:	613a      	str	r2, [r7, #16]
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	1e5a      	subs	r2, r3, #1
 8000958:	617a      	str	r2, [r7, #20]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1f5      	bne.n	800094a <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 800095e:	f009 fb8f 	bl	800a080 <xTaskResumeAll>
  	return mem;
 8000962:	68fb      	ldr	r3, [r7, #12]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000972:	f247 5330 	movw	r3, #30000	; 0x7530
 8000976:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000978:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <prvHeapInit+0xac>)
 800097a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	2b00      	cmp	r3, #0
 8000984:	d00c      	beq.n	80009a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	3307      	adds	r3, #7
 800098a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f023 0307 	bic.w	r3, r3, #7
 8000992:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000994:	68ba      	ldr	r2, [r7, #8]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	4a1f      	ldr	r2, [pc, #124]	; (8000a18 <prvHeapInit+0xac>)
 800099c:	4413      	add	r3, r2
 800099e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009a4:	4a1d      	ldr	r2, [pc, #116]	; (8000a1c <prvHeapInit+0xb0>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <prvHeapInit+0xb0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	4413      	add	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009b8:	2208      	movs	r2, #8
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	1a9b      	subs	r3, r3, r2
 80009be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f023 0307 	bic.w	r3, r3, #7
 80009c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <prvHeapInit+0xb4>)
 80009cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <prvHeapInit+0xb4>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2200      	movs	r2, #0
 80009d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <prvHeapInit+0xb4>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	1ad2      	subs	r2, r2, r3
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <prvHeapInit+0xb4>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <prvHeapInit+0xb8>)
 80009fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	4a09      	ldr	r2, [pc, #36]	; (8000a28 <prvHeapInit+0xbc>)
 8000a02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <prvHeapInit+0xc0>)
 8000a06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a0a:	601a      	str	r2, [r3, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	200001c4 	.word	0x200001c4
 8000a1c:	200076f4 	.word	0x200076f4
 8000a20:	200076fc 	.word	0x200076fc
 8000a24:	20007704 	.word	0x20007704
 8000a28:	20007700 	.word	0x20007700
 8000a2c:	20007708 	.word	0x20007708

08000a30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a38:	4b28      	ldr	r3, [pc, #160]	; (8000adc <prvInsertBlockIntoFreeList+0xac>)
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	e002      	b.n	8000a44 <prvInsertBlockIntoFreeList+0x14>
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d8f7      	bhi.n	8000a3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	4413      	add	r3, r2
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d108      	bne.n	8000a72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	685a      	ldr	r2, [r3, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	441a      	add	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	441a      	add	r2, r3
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d118      	bne.n	8000ab8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <prvInsertBlockIntoFreeList+0xb0>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d00d      	beq.n	8000aae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	685a      	ldr	r2, [r3, #4]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	441a      	add	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	e008      	b.n	8000ac0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <prvInsertBlockIntoFreeList+0xb0>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	e003      	b.n	8000ac0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d002      	beq.n	8000ace <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 8000ace:	bf00      	nop
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	200076f4 	.word	0x200076f4
 8000ae0:	200076fc 	.word	0x200076fc

08000ae4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000af2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af8:	4904      	ldr	r1, [pc, #16]	; (8000b0c <cubemx_transport_open+0x28>)
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f006 fca8 	bl	8007450 <HAL_UART_Receive_DMA>
    return true;
 8000b00:	2301      	movs	r3, #1
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	2000770c 	.word	0x2000770c

08000b10 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b1e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000b20:	68f8      	ldr	r0, [r7, #12]
 8000b22:	f006 fcc5 	bl	80074b0 <HAL_UART_DMAStop>
    return true;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
 8000b3c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b44:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b20      	cmp	r3, #32
 8000b50:	d11c      	bne.n	8000b8c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f006 fbfa 	bl	8007354 <HAL_UART_Transmit_DMA>
 8000b60:	4603      	mov	r3, r0
 8000b62:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000b64:	e002      	b.n	8000b6c <cubemx_transport_write+0x3c>
            osDelay(1);
 8000b66:	2001      	movs	r0, #1
 8000b68:	f008 fa50 	bl	800900c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000b6c:	7cfb      	ldrb	r3, [r7, #19]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d105      	bne.n	8000b7e <cubemx_transport_write+0x4e>
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b20      	cmp	r3, #32
 8000b7c:	d1f3      	bne.n	8000b66 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8000b7e:	7cfb      	ldrb	r3, [r7, #19]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d101      	bne.n	8000b88 <cubemx_transport_write+0x58>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	e002      	b.n	8000b8e <cubemx_transport_write+0x5e>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e000      	b.n	8000b8e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8000b8c:	2300      	movs	r3, #0
    }
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000bac:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb2:	b672      	cpsid	i
}
 8000bb4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000bc2:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <cubemx_transport_read+0x9c>)
 8000bc4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000bc6:	b662      	cpsie	i
}
 8000bc8:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f008 fa1b 	bl	800900c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <cubemx_transport_read+0xa0>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <cubemx_transport_read+0x9c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d103      	bne.n	8000bea <cubemx_transport_read+0x52>
 8000be2:	69fa      	ldr	r2, [r7, #28]
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	dbe3      	blt.n	8000bb2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000bee:	e011      	b.n	8000c14 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <cubemx_transport_read+0xa0>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	440b      	add	r3, r1
 8000bfa:	4910      	ldr	r1, [pc, #64]	; (8000c3c <cubemx_transport_read+0xa4>)
 8000bfc:	5c8a      	ldrb	r2, [r1, r2]
 8000bfe:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000c00:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <cubemx_transport_read+0xa0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	3301      	adds	r3, #1
 8000c06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <cubemx_transport_read+0xa0>)
 8000c0c:	6013      	str	r3, [r2, #0]
        wrote++;
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	3301      	adds	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <cubemx_transport_read+0xa0>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <cubemx_transport_read+0x9c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d003      	beq.n	8000c28 <cubemx_transport_read+0x90>
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d3e3      	bcc.n	8000bf0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000c28:	69bb      	ldr	r3, [r7, #24]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3720      	adds	r7, #32
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20007f10 	.word	0x20007f10
 8000c38:	20007f0c 	.word	0x20007f0c
 8000c3c:	2000770c 	.word	0x2000770c

08000c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c44:	f001 fcf4 	bl	8002630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c48:	f000 f888 	bl	8000d5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4c:	f000 fac2 	bl	80011d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c50:	f000 f8ee 	bl	8000e30 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000c54:	f000 f91a 	bl	8000e8c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000c58:	f000 f948 	bl	8000eec <MX_SPI1_Init>
  MX_DMA_Init();
 8000c5c:	f000 fa92 	bl	8001184 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c60:	f000 fa1a 	bl	8001098 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 8000c64:	f000 fa6c 	bl	8001140 <MX_USB_OTG_FS_HCD_Init>
  MX_TIM1_Init();
 8000c68:	f000 f976 	bl	8000f58 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000c6c:	f000 fa3e 	bl	80010ec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c70:	f008 f8f0 	bl	8008e54 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_ros2 */
  task_ros2Handle = osThreadNew(task_ros2_function, NULL, &task_ros2_attributes);
 8000c74:	4a21      	ldr	r2, [pc, #132]	; (8000cfc <main+0xbc>)
 8000c76:	2100      	movs	r1, #0
 8000c78:	4821      	ldr	r0, [pc, #132]	; (8000d00 <main+0xc0>)
 8000c7a:	f008 f935 	bl	8008ee8 <osThreadNew>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4a20      	ldr	r2, [pc, #128]	; (8000d04 <main+0xc4>)
 8000c82:	6013      	str	r3, [r2, #0]

  /* creation of task_gps */
  task_gpsHandle = osThreadNew(task_gps_function, NULL, &task_gps_attributes);
 8000c84:	4a20      	ldr	r2, [pc, #128]	; (8000d08 <main+0xc8>)
 8000c86:	2100      	movs	r1, #0
 8000c88:	4820      	ldr	r0, [pc, #128]	; (8000d0c <main+0xcc>)
 8000c8a:	f008 f92d 	bl	8008ee8 <osThreadNew>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a1f      	ldr	r2, [pc, #124]	; (8000d10 <main+0xd0>)
 8000c92:	6013      	str	r3, [r2, #0]

  /* creation of task_stepper */
  task_stepperHandle = osThreadNew(task_stepper_function, NULL, &task_stepper_attributes);
 8000c94:	4a1f      	ldr	r2, [pc, #124]	; (8000d14 <main+0xd4>)
 8000c96:	2100      	movs	r1, #0
 8000c98:	481f      	ldr	r0, [pc, #124]	; (8000d18 <main+0xd8>)
 8000c9a:	f008 f925 	bl	8008ee8 <osThreadNew>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <main+0xdc>)
 8000ca2:	6013      	str	r3, [r2, #0]

  /* creation of task_angle_sens */
  task_angle_sensHandle = osThreadNew(task_angle_sensor_function, NULL, &task_angle_sens_attributes);
 8000ca4:	4a1e      	ldr	r2, [pc, #120]	; (8000d20 <main+0xe0>)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	481e      	ldr	r0, [pc, #120]	; (8000d24 <main+0xe4>)
 8000caa:	f008 f91d 	bl	8008ee8 <osThreadNew>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a1d      	ldr	r2, [pc, #116]	; (8000d28 <main+0xe8>)
 8000cb2:	6013      	str	r3, [r2, #0]

  /* creation of task_analog_inp */
  task_analog_inpHandle = osThreadNew(task_analog_input_function, NULL, &task_analog_inp_attributes);
 8000cb4:	4a1d      	ldr	r2, [pc, #116]	; (8000d2c <main+0xec>)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	481d      	ldr	r0, [pc, #116]	; (8000d30 <main+0xf0>)
 8000cba:	f008 f915 	bl	8008ee8 <osThreadNew>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <main+0xf4>)
 8000cc2:	6013      	str	r3, [r2, #0]

  /* creation of task_dac */
  task_dacHandle = osThreadNew(task_dac_function, NULL, &task_dac_attributes);
 8000cc4:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <main+0xf8>)
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	481c      	ldr	r0, [pc, #112]	; (8000d3c <main+0xfc>)
 8000cca:	f008 f90d 	bl	8008ee8 <osThreadNew>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <main+0x100>)
 8000cd2:	6013      	str	r3, [r2, #0]

  /* creation of task_digital_io */
  task_digital_ioHandle = osThreadNew(task_digital_io_function, NULL, &task_digital_io_attributes);
 8000cd4:	4a1b      	ldr	r2, [pc, #108]	; (8000d44 <main+0x104>)
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	481b      	ldr	r0, [pc, #108]	; (8000d48 <main+0x108>)
 8000cda:	f008 f905 	bl	8008ee8 <osThreadNew>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	4a1a      	ldr	r2, [pc, #104]	; (8000d4c <main+0x10c>)
 8000ce2:	6013      	str	r3, [r2, #0]

  /* creation of task_main */
  task_mainHandle = osThreadNew(task_main_function, NULL, &task_main_attributes);
 8000ce4:	4a1a      	ldr	r2, [pc, #104]	; (8000d50 <main+0x110>)
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	481a      	ldr	r0, [pc, #104]	; (8000d54 <main+0x114>)
 8000cea:	f008 f8fd 	bl	8008ee8 <osThreadNew>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	4a19      	ldr	r2, [pc, #100]	; (8000d58 <main+0x118>)
 8000cf2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cf4:	f008 f8d2 	bl	8008e9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <main+0xb8>
 8000cfa:	bf00      	nop
 8000cfc:	080191ec 	.word	0x080191ec
 8000d00:	08001571 	.word	0x08001571
 8000d04:	200103d8 	.word	0x200103d8
 8000d08:	08019210 	.word	0x08019210
 8000d0c:	0800197d 	.word	0x0800197d
 8000d10:	20010370 	.word	0x20010370
 8000d14:	08019234 	.word	0x08019234
 8000d18:	0800198d 	.word	0x0800198d
 8000d1c:	2001047c 	.word	0x2001047c
 8000d20:	08019258 	.word	0x08019258
 8000d24:	0800199d 	.word	0x0800199d
 8000d28:	20010538 	.word	0x20010538
 8000d2c:	0801927c 	.word	0x0801927c
 8000d30:	080019ad 	.word	0x080019ad
 8000d34:	200109a4 	.word	0x200109a4
 8000d38:	080192a0 	.word	0x080192a0
 8000d3c:	080019bd 	.word	0x080019bd
 8000d40:	200104e8 	.word	0x200104e8
 8000d44:	080192c4 	.word	0x080192c4
 8000d48:	080019cd 	.word	0x080019cd
 8000d4c:	200104ec 	.word	0x200104ec
 8000d50:	080192e8 	.word	0x080192e8
 8000d54:	080019dd 	.word	0x080019dd
 8000d58:	20010484 	.word	0x20010484

08000d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b094      	sub	sp, #80	; 0x50
 8000d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d62:	f107 0320 	add.w	r3, r7, #32
 8000d66:	2230      	movs	r2, #48	; 0x30
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f016 f82e 	bl	8016dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	4b28      	ldr	r3, [pc, #160]	; (8000e28 <SystemClock_Config+0xcc>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	4a27      	ldr	r2, [pc, #156]	; (8000e28 <SystemClock_Config+0xcc>)
 8000d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d90:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <SystemClock_Config+0xcc>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <SystemClock_Config+0xd0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <SystemClock_Config+0xd0>)
 8000da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <SystemClock_Config+0xd0>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000db8:	2301      	movs	r3, #1
 8000dba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dd0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	4618      	mov	r0, r3
 8000de4:	f004 fc5a 	bl	800569c <HAL_RCC_OscConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dee:	f000 fe0f 	bl	8001a10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df2:	230f      	movs	r3, #15
 8000df4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df6:	2302      	movs	r3, #2
 8000df8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	2105      	movs	r1, #5
 8000e10:	4618      	mov	r0, r3
 8000e12:	f004 febb 	bl	8005b8c <HAL_RCC_ClockConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e1c:	f000 fdf8 	bl	8001a10 <Error_Handler>
  }
}
 8000e20:	bf00      	nop
 8000e22:	3750      	adds	r7, #80	; 0x50
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40007000 	.word	0x40007000

08000e30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e36:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <MX_I2C1_Init+0x54>)
 8000e38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e3c:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <MX_I2C1_Init+0x58>)
 8000e3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e6e:	f003 fe31 	bl	8004ad4 <HAL_I2C_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e78:	f000 fdca 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20010428 	.word	0x20010428
 8000e84:	40005400 	.word	0x40005400
 8000e88:	000186a0 	.word	0x000186a0

08000e8c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000e92:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <MX_I2S3_Init+0x58>)
 8000e94:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <MX_I2S3_Init+0x5c>)
 8000eb6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000ecc:	f003 ff46 	bl	8004d5c <HAL_I2S_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000ed6:	f000 fd9b 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20010958 	.word	0x20010958
 8000ee4:	40003c00 	.word	0x40003c00
 8000ee8:	00017700 	.word	0x00017700

08000eec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000ef2:	4a18      	ldr	r2, [pc, #96]	; (8000f54 <MX_SPI1_Init+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000ef8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000efc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f38:	220a      	movs	r2, #10
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f3e:	f005 f993 	bl	8006268 <HAL_SPI_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f48:	f000 fd62 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20010584 	.word	0x20010584
 8000f54:	40013000 	.word	0x40013000

08000f58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b096      	sub	sp, #88	; 0x58
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]
 8000f86:	615a      	str	r2, [r3, #20]
 8000f88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f015 ff1b 	bl	8016dcc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f96:	4b3e      	ldr	r3, [pc, #248]	; (8001090 <MX_TIM1_Init+0x138>)
 8000f98:	4a3e      	ldr	r2, [pc, #248]	; (8001094 <MX_TIM1_Init+0x13c>)
 8000f9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f9c:	4b3c      	ldr	r3, [pc, #240]	; (8001090 <MX_TIM1_Init+0x138>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b3b      	ldr	r3, [pc, #236]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fa8:	4b39      	ldr	r3, [pc, #228]	; (8001090 <MX_TIM1_Init+0x138>)
 8000faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb0:	4b37      	ldr	r3, [pc, #220]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fb6:	4b36      	ldr	r3, [pc, #216]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbc:	4b34      	ldr	r3, [pc, #208]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fc2:	4833      	ldr	r0, [pc, #204]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fc4:	f005 f9d9 	bl	800637a <HAL_TIM_Base_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fce:	f000 fd1f 	bl	8001a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fdc:	4619      	mov	r1, r3
 8000fde:	482c      	ldr	r0, [pc, #176]	; (8001090 <MX_TIM1_Init+0x138>)
 8000fe0:	f005 fcae 	bl	8006940 <HAL_TIM_ConfigClockSource>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000fea:	f000 fd11 	bl	8001a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fee:	4828      	ldr	r0, [pc, #160]	; (8001090 <MX_TIM1_Init+0x138>)
 8000ff0:	f005 fa82 	bl	80064f8 <HAL_TIM_PWM_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ffa:	f000 fd09 	bl	8001a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001006:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800100a:	4619      	mov	r1, r3
 800100c:	4820      	ldr	r0, [pc, #128]	; (8001090 <MX_TIM1_Init+0x138>)
 800100e:	f006 f871 	bl	80070f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001018:	f000 fcfa 	bl	8001a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800101c:	2360      	movs	r3, #96	; 0x60
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001028:	2300      	movs	r3, #0
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	4813      	ldr	r0, [pc, #76]	; (8001090 <MX_TIM1_Init+0x138>)
 8001042:	f005 fbbb 	bl	80067bc <HAL_TIM_PWM_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800104c:	f000 fce0 	bl	8001a10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001068:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4619      	mov	r1, r3
 8001072:	4807      	ldr	r0, [pc, #28]	; (8001090 <MX_TIM1_Init+0x138>)
 8001074:	f006 f8ba 	bl	80071ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800107e:	f000 fcc7 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001082:	4803      	ldr	r0, [pc, #12]	; (8001090 <MX_TIM1_Init+0x138>)
 8001084:	f000 ff7c 	bl	8001f80 <HAL_TIM_MspPostInit>

}
 8001088:	bf00      	nop
 800108a:	3758      	adds	r7, #88	; 0x58
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200104f0 	.word	0x200104f0
 8001094:	40010000 	.word	0x40010000

08001098 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <MX_USART2_UART_Init+0x50>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010d0:	f006 f8f2 	bl	80072b8 <HAL_UART_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010da:	f000 fc99 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20010914 	.word	0x20010914
 80010e8:	40004400 	.word	0x40004400

080010ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_USART3_UART_Init+0x4c>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <MX_USART3_UART_Init+0x50>)
 80010f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <MX_USART3_UART_Init+0x4c>)
 80010f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_USART3_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_USART3_UART_Init+0x4c>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_USART3_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_USART3_UART_Init+0x4c>)
 8001112:	220c      	movs	r2, #12
 8001114:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_USART3_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_USART3_UART_Init+0x4c>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_USART3_UART_Init+0x4c>)
 8001124:	f006 f8c8 	bl	80072b8 <HAL_UART_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800112e:	f000 fc6f 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200103e0 	.word	0x200103e0
 800113c:	40004800 	.word	0x40004800

08001140 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001146:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800114a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800114e:	2208      	movs	r2, #8
 8001150:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001154:	2201      	movs	r2, #1
 8001156:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001160:	2202      	movs	r2, #2
 8001162:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800116c:	f002 f99d 	bl	80034aa <HAL_HCD_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8001176:	f000 fc4b 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20010610 	.word	0x20010610

08001184 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_DMA_Init+0x4c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <MX_DMA_Init+0x4c>)
 8001194:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <MX_DMA_Init+0x4c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2105      	movs	r1, #5
 80011aa:	2010      	movs	r0, #16
 80011ac:	f001 fb5e 	bl	800286c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80011b0:	2010      	movs	r0, #16
 80011b2:	f001 fb77 	bl	80028a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2105      	movs	r1, #5
 80011ba:	2011      	movs	r0, #17
 80011bc:	f001 fb56 	bl	800286c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80011c0:	2011      	movs	r0, #17
 80011c2:	f001 fb6f 	bl	80028a4 <HAL_NVIC_EnableIRQ>

}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800

080011d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08c      	sub	sp, #48	; 0x30
 80011d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	4b77      	ldr	r3, [pc, #476]	; (80013cc <MX_GPIO_Init+0x1f8>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a76      	ldr	r2, [pc, #472]	; (80013cc <MX_GPIO_Init+0x1f8>)
 80011f4:	f043 0310 	orr.w	r3, r3, #16
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b74      	ldr	r3, [pc, #464]	; (80013cc <MX_GPIO_Init+0x1f8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0310 	and.w	r3, r3, #16
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	4b70      	ldr	r3, [pc, #448]	; (80013cc <MX_GPIO_Init+0x1f8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a6f      	ldr	r2, [pc, #444]	; (80013cc <MX_GPIO_Init+0x1f8>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b6d      	ldr	r3, [pc, #436]	; (80013cc <MX_GPIO_Init+0x1f8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b69      	ldr	r3, [pc, #420]	; (80013cc <MX_GPIO_Init+0x1f8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a68      	ldr	r2, [pc, #416]	; (80013cc <MX_GPIO_Init+0x1f8>)
 800122c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b66      	ldr	r3, [pc, #408]	; (80013cc <MX_GPIO_Init+0x1f8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b62      	ldr	r3, [pc, #392]	; (80013cc <MX_GPIO_Init+0x1f8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a61      	ldr	r2, [pc, #388]	; (80013cc <MX_GPIO_Init+0x1f8>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b5f      	ldr	r3, [pc, #380]	; (80013cc <MX_GPIO_Init+0x1f8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	4b5b      	ldr	r3, [pc, #364]	; (80013cc <MX_GPIO_Init+0x1f8>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a5a      	ldr	r2, [pc, #360]	; (80013cc <MX_GPIO_Init+0x1f8>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b58      	ldr	r3, [pc, #352]	; (80013cc <MX_GPIO_Init+0x1f8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b54      	ldr	r3, [pc, #336]	; (80013cc <MX_GPIO_Init+0x1f8>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a53      	ldr	r2, [pc, #332]	; (80013cc <MX_GPIO_Init+0x1f8>)
 8001280:	f043 0308 	orr.w	r3, r3, #8
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b51      	ldr	r3, [pc, #324]	; (80013cc <MX_GPIO_Init+0x1f8>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|STEPPER_EN_Pin|STEPPER_DIR_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001298:	484d      	ldr	r0, [pc, #308]	; (80013d0 <MX_GPIO_Init+0x1fc>)
 800129a:	f002 f8af 	bl	80033fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	2101      	movs	r1, #1
 80012a2:	484c      	ldr	r0, [pc, #304]	; (80013d4 <MX_GPIO_Init+0x200>)
 80012a4:	f002 f8aa 	bl	80033fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012a8:	2200      	movs	r2, #0
 80012aa:	f24f 0110 	movw	r1, #61456	; 0xf010
 80012ae:	484a      	ldr	r0, [pc, #296]	; (80013d8 <MX_GPIO_Init+0x204>)
 80012b0:	f002 f8a4 	bl	80033fc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin STEPPER_EN_Pin STEPPER_DIR_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|STEPPER_EN_Pin|STEPPER_DIR_Pin;
 80012b4:	f44f 73c4 	mov.w	r3, #392	; 0x188
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	4619      	mov	r1, r3
 80012cc:	4840      	ldr	r0, [pc, #256]	; (80013d0 <MX_GPIO_Init+0x1fc>)
 80012ce:	f001 fef9 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012d2:	2301      	movs	r3, #1
 80012d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	483a      	ldr	r0, [pc, #232]	; (80013d4 <MX_GPIO_Init+0x200>)
 80012ea:	f001 feeb 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80012ee:	2308      	movs	r3, #8
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012fe:	2305      	movs	r3, #5
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4832      	ldr	r0, [pc, #200]	; (80013d4 <MX_GPIO_Init+0x200>)
 800130a:	f001 fedb 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0_Pin */
  GPIO_InitStruct.Pin = PB0_Pin;
 800130e:	2301      	movs	r3, #1
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001312:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PB0_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	482e      	ldr	r0, [pc, #184]	; (80013dc <MX_GPIO_Init+0x208>)
 8001324:	f001 fece 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001328:	2304      	movs	r3, #4
 800132a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	4829      	ldr	r0, [pc, #164]	; (80013e0 <MX_GPIO_Init+0x20c>)
 800133c:	f001 fec2 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001352:	2305      	movs	r3, #5
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	4820      	ldr	r0, [pc, #128]	; (80013e0 <MX_GPIO_Init+0x20c>)
 800135e:	f001 feb1 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001362:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001366:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	4817      	ldr	r0, [pc, #92]	; (80013d8 <MX_GPIO_Init+0x204>)
 800137c:	f001 fea2 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001380:	2320      	movs	r3, #32
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4811      	ldr	r0, [pc, #68]	; (80013d8 <MX_GPIO_Init+0x204>)
 8001394:	f001 fe96 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001398:	2302      	movs	r3, #2
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800139c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	4808      	ldr	r0, [pc, #32]	; (80013d0 <MX_GPIO_Init+0x1fc>)
 80013ae:	f001 fe89 	bl	80030c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2105      	movs	r1, #5
 80013b6:	2006      	movs	r0, #6
 80013b8:	f001 fa58 	bl	800286c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013bc:	2006      	movs	r0, #6
 80013be:	f001 fa71 	bl	80028a4 <HAL_NVIC_EnableIRQ>

}
 80013c2:	bf00      	nop
 80013c4:	3730      	adds	r7, #48	; 0x30
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40020800 	.word	0x40020800
 80013d8:	40020c00 	.word	0x40020c00
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40020400 	.word	0x40020400

080013e4 <timer_callback>:

/* USER CODE BEGIN 4 */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	; 0x30
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d051      	beq.n	800149a <timer_callback+0xb6>
		//HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);

		// Fill the message timestamp
		struct timespec ts;
		int64_t time_ns;
		time_ns = rmw_uros_epoch_nanos();
 80013f6:	f00d fb61 	bl	800eabc <rmw_uros_epoch_nanos>
 80013fa:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		UTILS_NanosecondsToTimespec(time_ns, &ts);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	461a      	mov	r2, r3
 8001404:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001408:	f000 fba6 	bl	8001b58 <UTILS_NanosecondsToTimespec>
		//clock_gettime(CLOCK_REALTIME, &ts);

		// Create the Header
		joint_state_msg.header.stamp.sec = ts.tv_sec;
 800140c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <timer_callback+0xc0>)
 8001412:	601a      	str	r2, [r3, #0]
		joint_state_msg.header.stamp.nanosec = ts.tv_nsec;
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	461a      	mov	r2, r3
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <timer_callback+0xc0>)
 800141a:	605a      	str	r2, [r3, #4]

		//sprintf(joint_state_msg.header.frame_id.data, "%ld", seq_no);
		//joint_state_msg.header.frame_id.size = strlen(joint_state_msg.header.frame_id.data);

		joint_state_msg.position.data[0] = 1;
 800141c:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <timer_callback+0xc0>)
 800141e:	6a19      	ldr	r1, [r3, #32]
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <timer_callback+0xc4>)
 8001426:	e9c1 2300 	strd	r2, r3, [r1]
		joint_state_msg.position.data[1] = 2;
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <timer_callback+0xc0>)
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	f103 0108 	add.w	r1, r3, #8
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800143a:	e9c1 2300 	strd	r2, r3, [r1]
		joint_state_msg.velocity.data[0] = 3;
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <timer_callback+0xc0>)
 8001440:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <timer_callback+0xc8>)
 8001448:	e9c1 2300 	strd	r2, r3, [r1]
		joint_state_msg.velocity.data[1] = 4;
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <timer_callback+0xc0>)
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	f103 0108 	add.w	r1, r3, #8
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <timer_callback+0xcc>)
 800145a:	e9c1 2300 	strd	r2, r3, [r1]
		joint_state_msg.effort.data[0] = 5;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <timer_callback+0xc0>)
 8001460:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <timer_callback+0xd0>)
 8001468:	e9c1 2300 	strd	r2, r3, [r1]
		joint_state_msg.effort.data[1] = 6;
 800146c:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <timer_callback+0xc0>)
 800146e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001470:	f103 0108 	add.w	r1, r3, #8
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <timer_callback+0xd4>)
 800147a:	e9c1 2300 	strd	r2, r3, [r1]

		// Publish the message
		rcl_ret_t ret = rcl_publish(&joint_state_pub, &joint_state_msg, NULL);
 800147e:	2200      	movs	r2, #0
 8001480:	4908      	ldr	r1, [pc, #32]	; (80014a4 <timer_callback+0xc0>)
 8001482:	480e      	ldr	r0, [pc, #56]	; (80014bc <timer_callback+0xd8>)
 8001484:	f00b faa4 	bl	800c9d0 <rcl_publish>
 8001488:	6278      	str	r0, [r7, #36]	; 0x24
		if (ret != RCL_RET_OK)
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	2b00      	cmp	r3, #0
 800148e:	d004      	beq.n	800149a <timer_callback+0xb6>
		{
		  printf("Error publishing joint_state (line %d)\n", __LINE__);
 8001490:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8001494:	480a      	ldr	r0, [pc, #40]	; (80014c0 <timer_callback+0xdc>)
 8001496:	f015 fd5b 	bl	8016f50 <iprintf>
		}
	}
}
 800149a:	bf00      	nop
 800149c:	3730      	adds	r7, #48	; 0x30
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2001053c 	.word	0x2001053c
 80014a8:	3ff00000 	.word	0x3ff00000
 80014ac:	40080000 	.word	0x40080000
 80014b0:	40100000 	.word	0x40100000
 80014b4:	40140000 	.word	0x40140000
 80014b8:	40180000 	.word	0x40180000
 80014bc:	20010580 	.word	0x20010580
 80014c0:	080184c0 	.word	0x080184c0

080014c4 <timer2_callback>:

void timer2_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	e9c7 2300 	strd	r2, r3, [r7]


		//sprintf(joint_state_msg.header.frame_id.data, "%ld", seq_no);
		//joint_state_msg.header.frame_id.size = strlen(joint_state_msg.header.frame_id.data);

		int32_msg.data++;
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <timer2_callback+0x3c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	3301      	adds	r3, #1
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <timer2_callback+0x3c>)
 80014d8:	6013      	str	r3, [r2, #0]

		// Publish the message
		rcl_ret_t ret = rcl_publish(&int32_pub, &int32_msg, NULL);
 80014da:	2200      	movs	r2, #0
 80014dc:	4908      	ldr	r1, [pc, #32]	; (8001500 <timer2_callback+0x3c>)
 80014de:	4809      	ldr	r0, [pc, #36]	; (8001504 <timer2_callback+0x40>)
 80014e0:	f00b fa76 	bl	800c9d0 <rcl_publish>
 80014e4:	6178      	str	r0, [r7, #20]
		if (ret != RCL_RET_OK)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d004      	beq.n	80014f6 <timer2_callback+0x32>
		{
		  printf("Error publishing joint_state (line %d)\n", __LINE__);
 80014ec:	f44f 7146 	mov.w	r1, #792	; 0x318
 80014f0:	4805      	ldr	r0, [pc, #20]	; (8001508 <timer2_callback+0x44>)
 80014f2:	f015 fd2d 	bl	8016f50 <iprintf>
		}

}
 80014f6:	bf00      	nop
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200109a0 	.word	0x200109a0
 8001504:	20010480 	.word	0x20010480
 8001508:	080184c0 	.word	0x080184c0

0800150c <cmd_vel_callback>:

void cmd_vel_callback(const void * msgin)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b090      	sub	sp, #64	; 0x40
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	double leftWheelVelocity, rightWheelVelocity;
	double linearX, linearY, linearZ, angularX, angularY, angularZ;
	const geometry_msgs__msg__Twist * cmd_vel_msg;

	if (msgin != NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d024      	beq.n	8001564 <cmd_vel_callback+0x58>
	{

		// Blink the LED2 (orange) for debugging
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800151a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800151e:	4813      	ldr	r0, [pc, #76]	; (800156c <cmd_vel_callback+0x60>)
 8001520:	f001 ff85 	bl	800342e <HAL_GPIO_TogglePin>

		cmd_vel_msg = (const geometry_msgs__msg__Twist *)msgin;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	63fb      	str	r3, [r7, #60]	; 0x3c

		linearX = cmd_vel_msg->linear.x;
 8001528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		linearY = cmd_vel_msg->linear.y;
 8001532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001534:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001538:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		linearZ = cmd_vel_msg->linear.z;
 800153c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800153e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001542:	e9c7 2308 	strd	r2, r3, [r7, #32]
		angularX = cmd_vel_msg->angular.x;
 8001546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001548:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800154c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		angularY = cmd_vel_msg->angular.y;
 8001550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001552:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001556:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angularZ = cmd_vel_msg->angular.z;
 800155a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001560:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}
}
 8001564:	bf00      	nop
 8001566:	3740      	adds	r7, #64	; 0x40
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40020c00 	.word	0x40020c00

08001570 <task_ros2_function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_ros2_function */
void task_ros2_function(void *argument)
{
 8001570:	b5b0      	push	{r4, r5, r7, lr}
 8001572:	b0d2      	sub	sp, #328	; 0x148
 8001574:	af02      	add	r7, sp, #8
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	// micro-ROS configuration
	  rmw_uros_set_custom_transport(
 800157c:	4bb6      	ldr	r3, [pc, #728]	; (8001858 <task_ros2_function+0x2e8>)
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	4bb6      	ldr	r3, [pc, #728]	; (800185c <task_ros2_function+0x2ec>)
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	4bb6      	ldr	r3, [pc, #728]	; (8001860 <task_ros2_function+0x2f0>)
 8001586:	4ab7      	ldr	r2, [pc, #732]	; (8001864 <task_ros2_function+0x2f4>)
 8001588:	49b7      	ldr	r1, [pc, #732]	; (8001868 <task_ros2_function+0x2f8>)
 800158a:	2001      	movs	r0, #1
 800158c:	f00c fbee 	bl	800dd6c <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001590:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001594:	4618      	mov	r0, r3
 8001596:	f00c f86b 	bl	800d670 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 800159a:	4bb4      	ldr	r3, [pc, #720]	; (800186c <task_ros2_function+0x2fc>)
 800159c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  freeRTOS_allocator.deallocate = microros_deallocate;
 80015a0:	4bb3      	ldr	r3, [pc, #716]	; (8001870 <task_ros2_function+0x300>)
 80015a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	  freeRTOS_allocator.reallocate = microros_reallocate;
 80015a6:	4bb3      	ldr	r3, [pc, #716]	; (8001874 <task_ros2_function+0x304>)
 80015a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80015ac:	4bb2      	ldr	r3, [pc, #712]	; (8001878 <task_ros2_function+0x308>)
 80015ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80015b2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80015b6:	4618      	mov	r0, r3
 80015b8:	f00c f868 	bl	800d68c <rcutils_set_default_allocator>
 80015bc:	4603      	mov	r3, r0
 80015be:	f083 0301 	eor.w	r3, r3, #1
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <task_ros2_function+0x62>
		  printf("Error on default allocators (line %d)\n", __LINE__);
 80015c8:	f240 314f 	movw	r1, #847	; 0x34f
 80015cc:	48ab      	ldr	r0, [pc, #684]	; (800187c <task_ros2_function+0x30c>)
 80015ce:	f015 fcbf 	bl	8016f50 <iprintf>
	  rcl_allocator_t allocator;
	  rcl_node_t node;
	  rclc_executor_t executor;
	  rcl_init_options_t init_options;

	  allocator = rcl_get_default_allocator();
 80015d2:	463b      	mov	r3, r7
 80015d4:	4618      	mov	r0, r3
 80015d6:	f00c f879 	bl	800d6cc <rcutils_get_default_allocator>
 80015da:	463b      	mov	r3, r7
 80015dc:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 80015e0:	461d      	mov	r5, r3
 80015e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e6:	682b      	ldr	r3, [r5, #0]
 80015e8:	6023      	str	r3, [r4, #0]
	  init_options = rcl_get_zero_initialized_init_options();
 80015ea:	f00a ff71 	bl	800c4d0 <rcl_get_zero_initialized_init_options>
 80015ee:	4602      	mov	r2, r0
 80015f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015f4:	601a      	str	r2, [r3, #0]
	  rcl_init_options_init(&init_options, allocator);
 80015f6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80015fa:	466a      	mov	r2, sp
 80015fc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001600:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001604:	e882 0003 	stmia.w	r2, {r0, r1}
 8001608:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800160c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800160e:	4620      	mov	r0, r4
 8001610:	f00a ff60 	bl	800c4d4 <rcl_init_options_init>

	  // create init_options
	  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001614:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001618:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 800161c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	4613      	mov	r3, r2
 8001624:	2200      	movs	r2, #0
 8001626:	2100      	movs	r1, #0
 8001628:	f00b ff18 	bl	800d45c <rclc_support_init_with_options>

	  // create node
	  rcl_node_options_t node_ops = rcl_node_get_default_options();
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	4618      	mov	r0, r3
 8001632:	f00b f875 	bl	800c720 <rcl_node_get_default_options>
	  node_ops.domain_id = 25;
 8001636:	f107 0320 	add.w	r3, r7, #32
 800163a:	2219      	movs	r2, #25
 800163c:	601a      	str	r2, [r3, #0]
	  rclc_node_init_with_options(&node, "acquisition_system", "", &support, &node_ops);
 800163e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001642:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8001646:	f107 0320 	add.w	r3, r7, #32
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	4613      	mov	r3, r2
 800164e:	4a8c      	ldr	r2, [pc, #560]	; (8001880 <task_ros2_function+0x310>)
 8001650:	498c      	ldr	r1, [pc, #560]	; (8001884 <task_ros2_function+0x314>)
 8001652:	f00b ff41 	bl	800d4d8 <rclc_node_init_with_options>


	  //time sync
	  if( rmw_uros_sync_session(1000) != RMW_RET_OK)
 8001656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800165a:	f00d fa3d 	bl	800ead8 <rmw_uros_sync_session>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d004      	beq.n	800166e <task_ros2_function+0xfe>
		  printf("Error on time sync (line %d)\n", __LINE__);
 8001664:	f240 3193 	movw	r1, #915	; 0x393
 8001668:	4887      	ldr	r0, [pc, #540]	; (8001888 <task_ros2_function+0x318>)
 800166a:	f015 fc71 	bl	8016f50 <iprintf>
	  //int64_t time_ns;
	  //time_ns = rmw_uros_epoch_nanos();


	  // create cmd_vel_sub
	  cmd_vel_sub = rcl_get_zero_initialized_subscription();
 800166e:	f00b f9d3 	bl	800ca18 <rcl_get_zero_initialized_subscription>
 8001672:	4603      	mov	r3, r0
 8001674:	4a85      	ldr	r2, [pc, #532]	; (800188c <task_ros2_function+0x31c>)
 8001676:	6013      	str	r3, [r2, #0]
	  rclc_subscription_init_best_effort(
 8001678:	f00a f960 	bl	800b93c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800167c:	4602      	mov	r2, r0
 800167e:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8001682:	4b83      	ldr	r3, [pc, #524]	; (8001890 <task_ros2_function+0x320>)
 8001684:	4881      	ldr	r0, [pc, #516]	; (800188c <task_ros2_function+0x31c>)
 8001686:	f00b ff89 	bl	800d59c <rclc_subscription_init_best_effort>
			  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
			  "/cmd_vel");


	  // create joint_state_pub
	  rclc_publisher_init_default(
 800168a:	f00d fd49 	bl	800f120 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>
 800168e:	4602      	mov	r2, r0
 8001690:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8001694:	4b7f      	ldr	r3, [pc, #508]	; (8001894 <task_ros2_function+0x324>)
 8001696:	4880      	ldr	r0, [pc, #512]	; (8001898 <task_ros2_function+0x328>)
 8001698:	f00b ff4c 	bl	800d534 <rclc_publisher_init_default>
		ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, JointState),
		"/joint_state");


	  // int32 pub
	  rclc_publisher_init_default(
 800169c:	f00d febe 	bl	800f41c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80016a6:	4b7d      	ldr	r3, [pc, #500]	; (800189c <task_ros2_function+0x32c>)
 80016a8:	487d      	ldr	r0, [pc, #500]	; (80018a0 <task_ros2_function+0x330>)
 80016aa:	f00b ff43 	bl	800d534 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			  "/std_msgs_msg_Int32");

	  // joint_state message allocation. Described in https://micro.ros.org/docs/tutorials/advanced/handling_type_memory/
	  joint_state_msg.header.frame_id.capacity = 20;
 80016ae:	4b7d      	ldr	r3, [pc, #500]	; (80018a4 <task_ros2_function+0x334>)
 80016b0:	2214      	movs	r2, #20
 80016b2:	611a      	str	r2, [r3, #16]
	  joint_state_msg.header.frame_id.data = (char*) pvPortMalloc(joint_state_msg.header.frame_id.capacity  * sizeof(char));
 80016b4:	4b7b      	ldr	r3, [pc, #492]	; (80018a4 <task_ros2_function+0x334>)
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f009 ff55 	bl	800b568 <pvPortMalloc>
 80016be:	4603      	mov	r3, r0
 80016c0:	4a78      	ldr	r2, [pc, #480]	; (80018a4 <task_ros2_function+0x334>)
 80016c2:	6093      	str	r3, [r2, #8]
	  joint_state_msg.header.frame_id.size = strlen(joint_state_msg.header.frame_id.data);
 80016c4:	4b77      	ldr	r3, [pc, #476]	; (80018a4 <task_ros2_function+0x334>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe fd8b 	bl	80001e4 <strlen>
 80016ce:	4603      	mov	r3, r0
 80016d0:	4a74      	ldr	r2, [pc, #464]	; (80018a4 <task_ros2_function+0x334>)
 80016d2:	60d3      	str	r3, [r2, #12]

	  joint_state_msg.name.capacity = 2;
 80016d4:	4b73      	ldr	r3, [pc, #460]	; (80018a4 <task_ros2_function+0x334>)
 80016d6:	2202      	movs	r2, #2
 80016d8:	61da      	str	r2, [r3, #28]
	  joint_state_msg.name.data = (rosidl_runtime_c__String*) pvPortMalloc(joint_state_msg.name.capacity * sizeof(rosidl_runtime_c__String));
 80016da:	4b72      	ldr	r3, [pc, #456]	; (80018a4 <task_ros2_function+0x334>)
 80016dc:	69da      	ldr	r2, [r3, #28]
 80016de:	4613      	mov	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f009 ff3e 	bl	800b568 <pvPortMalloc>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4a6d      	ldr	r2, [pc, #436]	; (80018a4 <task_ros2_function+0x334>)
 80016f0:	6153      	str	r3, [r2, #20]
	  joint_state_msg.name.size = 2;
 80016f2:	4b6c      	ldr	r3, [pc, #432]	; (80018a4 <task_ros2_function+0x334>)
 80016f4:	2202      	movs	r2, #2
 80016f6:	619a      	str	r2, [r3, #24]

		joint_state_msg.name.data[0].capacity = 20;
 80016f8:	4b6a      	ldr	r3, [pc, #424]	; (80018a4 <task_ros2_function+0x334>)
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	2214      	movs	r2, #20
 80016fe:	609a      	str	r2, [r3, #8]
		joint_state_msg.name.data[0].data = (char*) pvPortMalloc(joint_state_msg.name.data[0].capacity * sizeof(char));
 8001700:	4b68      	ldr	r3, [pc, #416]	; (80018a4 <task_ros2_function+0x334>)
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	4a67      	ldr	r2, [pc, #412]	; (80018a4 <task_ros2_function+0x334>)
 8001708:	6954      	ldr	r4, [r2, #20]
 800170a:	4618      	mov	r0, r3
 800170c:	f009 ff2c 	bl	800b568 <pvPortMalloc>
 8001710:	4603      	mov	r3, r0
 8001712:	6023      	str	r3, [r4, #0]
		strcpy(joint_state_msg.name.data[0].data, "Roda_L_Joint");
 8001714:	4b63      	ldr	r3, [pc, #396]	; (80018a4 <task_ros2_function+0x334>)
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a63      	ldr	r2, [pc, #396]	; (80018a8 <task_ros2_function+0x338>)
 800171c:	461c      	mov	r4, r3
 800171e:	4613      	mov	r3, r2
 8001720:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001722:	6020      	str	r0, [r4, #0]
 8001724:	6061      	str	r1, [r4, #4]
 8001726:	60a2      	str	r2, [r4, #8]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	7323      	strb	r3, [r4, #12]
		joint_state_msg.name.data[0].size = strlen(joint_state_msg.name.data[0].data);
 800172c:	4b5d      	ldr	r3, [pc, #372]	; (80018a4 <task_ros2_function+0x334>)
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a5c      	ldr	r2, [pc, #368]	; (80018a4 <task_ros2_function+0x334>)
 8001734:	6954      	ldr	r4, [r2, #20]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fd54 	bl	80001e4 <strlen>
 800173c:	4603      	mov	r3, r0
 800173e:	6063      	str	r3, [r4, #4]
		joint_state_msg.name.data[1].capacity = 20;
 8001740:	4b58      	ldr	r3, [pc, #352]	; (80018a4 <task_ros2_function+0x334>)
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	330c      	adds	r3, #12
 8001746:	2214      	movs	r2, #20
 8001748:	609a      	str	r2, [r3, #8]
		joint_state_msg.name.data[1].data = (char*) pvPortMalloc(joint_state_msg.name.data[1].capacity* sizeof(char));
 800174a:	4b56      	ldr	r3, [pc, #344]	; (80018a4 <task_ros2_function+0x334>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	330c      	adds	r3, #12
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	4b54      	ldr	r3, [pc, #336]	; (80018a4 <task_ros2_function+0x334>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f103 040c 	add.w	r4, r3, #12
 800175a:	4610      	mov	r0, r2
 800175c:	f009 ff04 	bl	800b568 <pvPortMalloc>
 8001760:	4603      	mov	r3, r0
 8001762:	6023      	str	r3, [r4, #0]
		strcpy(joint_state_msg.name.data[1].data, "Roda_R_Joint");
 8001764:	4b4f      	ldr	r3, [pc, #316]	; (80018a4 <task_ros2_function+0x334>)
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	330c      	adds	r3, #12
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a4f      	ldr	r2, [pc, #316]	; (80018ac <task_ros2_function+0x33c>)
 800176e:	461c      	mov	r4, r3
 8001770:	4613      	mov	r3, r2
 8001772:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001774:	6020      	str	r0, [r4, #0]
 8001776:	6061      	str	r1, [r4, #4]
 8001778:	60a2      	str	r2, [r4, #8]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	7323      	strb	r3, [r4, #12]
		joint_state_msg.name.data[1].size = strlen(joint_state_msg.name.data[1].data);
 800177e:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <task_ros2_function+0x334>)
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	330c      	adds	r3, #12
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <task_ros2_function+0x334>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	f103 040c 	add.w	r4, r3, #12
 800178e:	4610      	mov	r0, r2
 8001790:	f7fe fd28 	bl	80001e4 <strlen>
 8001794:	4603      	mov	r3, r0
 8001796:	6063      	str	r3, [r4, #4]
		joint_state_msg.name.size=2;
 8001798:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <task_ros2_function+0x334>)
 800179a:	2202      	movs	r2, #2
 800179c:	619a      	str	r2, [r3, #24]

		joint_state_msg.position.capacity = 2;
 800179e:	4b41      	ldr	r3, [pc, #260]	; (80018a4 <task_ros2_function+0x334>)
 80017a0:	2202      	movs	r2, #2
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28
		joint_state_msg.position.data = (double*) pvPortMalloc(joint_state_msg.position.capacity * sizeof(double));
 80017a4:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <task_ros2_function+0x334>)
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f009 fedc 	bl	800b568 <pvPortMalloc>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4a3c      	ldr	r2, [pc, #240]	; (80018a4 <task_ros2_function+0x334>)
 80017b4:	6213      	str	r3, [r2, #32]
		joint_state_msg.position.data[0] = 0;
 80017b6:	4b3b      	ldr	r3, [pc, #236]	; (80018a4 <task_ros2_function+0x334>)
 80017b8:	6a19      	ldr	r1, [r3, #32]
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	e9c1 2300 	strd	r2, r3, [r1]
		joint_state_msg.position.data[1] = 0;
 80017c6:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <task_ros2_function+0x334>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	f103 0108 	add.w	r1, r3, #8
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9c1 2300 	strd	r2, r3, [r1]
		joint_state_msg.position.size = 2;
 80017da:	4b32      	ldr	r3, [pc, #200]	; (80018a4 <task_ros2_function+0x334>)
 80017dc:	2202      	movs	r2, #2
 80017de:	625a      	str	r2, [r3, #36]	; 0x24

	  joint_state_msg.velocity.capacity = 2;
 80017e0:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <task_ros2_function+0x334>)
 80017e2:	2202      	movs	r2, #2
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
	  joint_state_msg.velocity.data = (double*) pvPortMalloc(joint_state_msg.velocity.capacity * sizeof(double));
 80017e6:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <task_ros2_function+0x334>)
 80017e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f009 febb 	bl	800b568 <pvPortMalloc>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a2b      	ldr	r2, [pc, #172]	; (80018a4 <task_ros2_function+0x334>)
 80017f6:	62d3      	str	r3, [r2, #44]	; 0x2c
	  joint_state_msg.velocity.data[0] = 0;
 80017f8:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <task_ros2_function+0x334>)
 80017fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	e9c1 2300 	strd	r2, r3, [r1]
	  joint_state_msg.velocity.data[1] = 0;
 8001808:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <task_ros2_function+0x334>)
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	f103 0108 	add.w	r1, r3, #8
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	e9c1 2300 	strd	r2, r3, [r1]
	  joint_state_msg.velocity.size = 2;
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <task_ros2_function+0x334>)
 800181e:	2202      	movs	r2, #2
 8001820:	631a      	str	r2, [r3, #48]	; 0x30

	  joint_state_msg.effort.capacity = 2;
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <task_ros2_function+0x334>)
 8001824:	2202      	movs	r2, #2
 8001826:	641a      	str	r2, [r3, #64]	; 0x40
	  joint_state_msg.effort.data = (double*) pvPortMalloc(joint_state_msg.effort.capacity * sizeof(double));
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <task_ros2_function+0x334>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4618      	mov	r0, r3
 8001830:	f009 fe9a 	bl	800b568 <pvPortMalloc>
 8001834:	4603      	mov	r3, r0
 8001836:	4a1b      	ldr	r2, [pc, #108]	; (80018a4 <task_ros2_function+0x334>)
 8001838:	6393      	str	r3, [r2, #56]	; 0x38
	  joint_state_msg.effort.data[0]=-1;
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <task_ros2_function+0x334>)
 800183c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <task_ros2_function+0x340>)
 8001844:	e9c1 2300 	strd	r2, r3, [r1]
	  joint_state_msg.effort.data[1]=-1;
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <task_ros2_function+0x334>)
 800184a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184c:	f103 0108 	add.w	r1, r3, #8
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	e02e      	b.n	80018b4 <task_ros2_function+0x344>
 8001856:	bf00      	nop
 8001858:	08000b99 	.word	0x08000b99
 800185c:	08000b31 	.word	0x08000b31
 8001860:	08000b11 	.word	0x08000b11
 8001864:	08000ae5 	.word	0x08000ae5
 8001868:	20010914 	.word	0x20010914
 800186c:	08001a1d 	.word	0x08001a1d
 8001870:	08001a61 	.word	0x08001a61
 8001874:	08001a99 	.word	0x08001a99
 8001878:	08001b05 	.word	0x08001b05
 800187c:	080184e8 	.word	0x080184e8
 8001880:	08018510 	.word	0x08018510
 8001884:	08018514 	.word	0x08018514
 8001888:	08018528 	.word	0x08018528
 800188c:	20010374 	.word	0x20010374
 8001890:	08018548 	.word	0x08018548
 8001894:	08018554 	.word	0x08018554
 8001898:	20010580 	.word	0x20010580
 800189c:	08018564 	.word	0x08018564
 80018a0:	20010480 	.word	0x20010480
 80018a4:	2001053c 	.word	0x2001053c
 80018a8:	08018578 	.word	0x08018578
 80018ac:	08018588 	.word	0x08018588
 80018b0:	bff00000 	.word	0xbff00000
 80018b4:	4b26      	ldr	r3, [pc, #152]	; (8001950 <task_ros2_function+0x3e0>)
 80018b6:	e9c1 2300 	strd	r2, r3, [r1]
	  joint_state_msg.effort.size = 2;
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <task_ros2_function+0x3e4>)
 80018bc:	2202      	movs	r2, #2
 80018be:	63da      	str	r2, [r3, #60]	; 0x3c




	  // Create a timer
	  rclc_timer_init_default(&timer, &support, RCL_MS_TO_NS(10), timer_callback);
 80018c0:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80018c4:	4b24      	ldr	r3, [pc, #144]	; (8001958 <task_ros2_function+0x3e8>)
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	4a24      	ldr	r2, [pc, #144]	; (800195c <task_ros2_function+0x3ec>)
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	4824      	ldr	r0, [pc, #144]	; (8001960 <task_ros2_function+0x3f0>)
 80018d0:	f00b fe98 	bl	800d604 <rclc_timer_init_default>
	  rclc_timer_init_default(&timer2, &support, RCL_MS_TO_NS(1000), timer2_callback);
 80018d4:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80018d8:	4b22      	ldr	r3, [pc, #136]	; (8001964 <task_ros2_function+0x3f4>)
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	a31a      	add	r3, pc, #104	; (adr r3, 8001948 <task_ros2_function+0x3d8>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	4821      	ldr	r0, [pc, #132]	; (8001968 <task_ros2_function+0x3f8>)
 80018e4:	f00b fe8e 	bl	800d604 <rclc_timer_init_default>

	  // Create executor
	  rclc_executor_init(&executor, &support.context, 3, &allocator);
 80018e8:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80018ec:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80018f0:	f103 0108 	add.w	r1, r3, #8
 80018f4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80018f8:	4613      	mov	r3, r2
 80018fa:	2203      	movs	r2, #3
 80018fc:	f00b fb3c 	bl	800cf78 <rclc_executor_init>
	  rclc_executor_add_subscription(&executor, &cmd_vel_sub, &cmd_vel_msg,
 8001900:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001904:	2300      	movs	r3, #0
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <task_ros2_function+0x3fc>)
 800190a:	4a19      	ldr	r2, [pc, #100]	; (8001970 <task_ros2_function+0x400>)
 800190c:	4919      	ldr	r1, [pc, #100]	; (8001974 <task_ros2_function+0x404>)
 800190e:	f00b fba7 	bl	800d060 <rclc_executor_add_subscription>
			  &cmd_vel_callback, ON_NEW_DATA); // ON_NEW_DATA does not work properly
	  rclc_executor_add_timer(&executor, &timer);
 8001912:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001916:	4912      	ldr	r1, [pc, #72]	; (8001960 <task_ros2_function+0x3f0>)
 8001918:	4618      	mov	r0, r3
 800191a:	f00b fbdb 	bl	800d0d4 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &timer2);
 800191e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001922:	4911      	ldr	r1, [pc, #68]	; (8001968 <task_ros2_function+0x3f8>)
 8001924:	4618      	mov	r0, r3
 8001926:	f00b fbd5 	bl	800d0d4 <rclc_executor_add_timer>
	  int32_msg.data = 0;
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <task_ros2_function+0x408>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]

	  // Run executor
	  rclc_executor_spin(&executor);
 8001930:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001934:	4618      	mov	r0, r3
 8001936:	f00b fd57 	bl	800d3e8 <rclc_executor_spin>

	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 800193a:	2001      	movs	r0, #1
 800193c:	f007 fb66 	bl	800900c <osDelay>
 8001940:	e7fb      	b.n	800193a <task_ros2_function+0x3ca>
 8001942:	bf00      	nop
 8001944:	f3af 8000 	nop.w
 8001948:	3b9aca00 	.word	0x3b9aca00
 800194c:	00000000 	.word	0x00000000
 8001950:	bff00000 	.word	0xbff00000
 8001954:	2001053c 	.word	0x2001053c
 8001958:	080013e5 	.word	0x080013e5
 800195c:	00989680 	.word	0x00989680
 8001960:	200103dc 	.word	0x200103dc
 8001964:	080014c5 	.word	0x080014c5
 8001968:	20010424 	.word	0x20010424
 800196c:	0800150d 	.word	0x0800150d
 8001970:	200105e0 	.word	0x200105e0
 8001974:	20010374 	.word	0x20010374
 8001978:	200109a0 	.word	0x200109a0

0800197c <task_gps_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_gps_function */
void task_gps_function(void *argument)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_gps_function */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001984:	2001      	movs	r0, #1
 8001986:	f007 fb41 	bl	800900c <osDelay>
 800198a:	e7fb      	b.n	8001984 <task_gps_function+0x8>

0800198c <task_stepper_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_stepper_function */
void task_stepper_function(void *argument)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_stepper_function */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001994:	2001      	movs	r0, #1
 8001996:	f007 fb39 	bl	800900c <osDelay>
 800199a:	e7fb      	b.n	8001994 <task_stepper_function+0x8>

0800199c <task_angle_sensor_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_angle_sensor_function */
void task_angle_sensor_function(void *argument)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_angle_sensor_function */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019a4:	2001      	movs	r0, #1
 80019a6:	f007 fb31 	bl	800900c <osDelay>
 80019aa:	e7fb      	b.n	80019a4 <task_angle_sensor_function+0x8>

080019ac <task_analog_input_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_analog_input_function */
void task_analog_input_function(void *argument)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_analog_input_function */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019b4:	2001      	movs	r0, #1
 80019b6:	f007 fb29 	bl	800900c <osDelay>
 80019ba:	e7fb      	b.n	80019b4 <task_analog_input_function+0x8>

080019bc <task_dac_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_dac_function */
void task_dac_function(void *argument)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_dac_function */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019c4:	2001      	movs	r0, #1
 80019c6:	f007 fb21 	bl	800900c <osDelay>
 80019ca:	e7fb      	b.n	80019c4 <task_dac_function+0x8>

080019cc <task_digital_io_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_digital_io_function */
void task_digital_io_function(void *argument)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_digital_io_function */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019d4:	2001      	movs	r0, #1
 80019d6:	f007 fb19 	bl	800900c <osDelay>
 80019da:	e7fb      	b.n	80019d4 <task_digital_io_function+0x8>

080019dc <task_main_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_main_function */
void task_main_function(void *argument)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_main_function */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f007 fb11 	bl	800900c <osDelay>
 80019ea:	e7fb      	b.n	80019e4 <task_main_function+0x8>

080019ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d101      	bne.n	8001a02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019fe:	f000 fe39 	bl	8002674 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40001400 	.word	0x40001400

08001a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a14:	b672      	cpsid	i
}
 8001a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <Error_Handler+0x8>
	...

08001a1c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <microros_allocate+0x3c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <microros_allocate+0x3c>)
 8001a34:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <microros_allocate+0x40>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <microros_allocate+0x40>)
 8001a44:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7fe fdf6 	bl	8000638 <pvPortMallocMicroROS>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20007f14 	.word	0x20007f14
 8001a5c:	20007f18 	.word	0x20007f18

08001a60 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00c      	beq.n	8001a8a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7fe feff 	bl	8000874 <getBlockSize>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <microros_deallocate+0x34>)
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <microros_deallocate+0x34>)
 8001a82:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7fe fe9b 	bl	80007c0 <vPortFreeMicroROS>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20007f18 	.word	0x20007f18

08001a98 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001aa4:	4b15      	ldr	r3, [pc, #84]	; (8001afc <microros_reallocate+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	4413      	add	r3, r2
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <microros_reallocate+0x64>)
 8001ab2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <microros_reallocate+0x68>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	4413      	add	r3, r2
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <microros_reallocate+0x68>)
 8001ac2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d104      	bne.n	8001ad4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001aca:	68b8      	ldr	r0, [r7, #8]
 8001acc:	f7fe fdb4 	bl	8000638 <pvPortMallocMicroROS>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	e00e      	b.n	8001af2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f7fe fecd 	bl	8000874 <getBlockSize>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <microros_reallocate+0x68>)
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <microros_reallocate+0x68>)
 8001ae6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7fe fee0 	bl	80008b0 <pvPortReallocMicroROS>
 8001af0:	4603      	mov	r3, r0
  }
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20007f14 	.word	0x20007f14
 8001b00:	20007f18 	.word	0x20007f18

08001b04 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	fb02 f303 	mul.w	r3, r2, r3
 8001b18:	4a0c      	ldr	r2, [pc, #48]	; (8001b4c <microros_zero_allocate+0x48>)
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <microros_zero_allocate+0x48>)
 8001b22:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	fb02 f303 	mul.w	r3, r2, r3
 8001b2c:	4a08      	ldr	r2, [pc, #32]	; (8001b50 <microros_zero_allocate+0x4c>)
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	4413      	add	r3, r2
 8001b32:	461a      	mov	r2, r3
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <microros_zero_allocate+0x4c>)
 8001b36:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f7fe fef2 	bl	8000924 <pvPortCallocMicroROS>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20007f14 	.word	0x20007f14
 8001b50:	20007f18 	.word	0x20007f18
 8001b54:	00000000 	.word	0x00000000

08001b58 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001b58:	b5b0      	push	{r4, r5, r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001b68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b6c:	a320      	add	r3, pc, #128	; (adr r3, 8001bf0 <UTILS_NanosecondsToTimespec+0x98>)
 8001b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b72:	f7fe fb95 	bl	80002a0 <__aeabi_ldivmod>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001b80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b84:	a31a      	add	r3, pc, #104	; (adr r3, 8001bf0 <UTILS_NanosecondsToTimespec+0x98>)
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	f7fe fb89 	bl	80002a0 <__aeabi_ldivmod>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	da1f      	bge.n	8001bda <UTILS_NanosecondsToTimespec+0x82>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <UTILS_NanosecondsToTimespec+0x90>)
 8001ba0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ba4:	1712      	asrs	r2, r2, #28
 8001ba6:	17db      	asrs	r3, r3, #31
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001bbc:	1a84      	subs	r4, r0, r2
 8001bbe:	eb61 0503 	sbc.w	r5, r1, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	e9c3 4500 	strd	r4, r5, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	4907      	ldr	r1, [pc, #28]	; (8001bec <UTILS_NanosecondsToTimespec+0x94>)
 8001bd0:	fb01 f303 	mul.w	r3, r1, r3
 8001bd4:	441a      	add	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
    }
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bdb0      	pop	{r4, r5, r7, pc}
 8001be2:	bf00      	nop
 8001be4:	f3af 8000 	nop.w
 8001be8:	44b82fa1 	.word	0x44b82fa1
 8001bec:	3b9aca00 	.word	0x3b9aca00
 8001bf0:	3b9aca00 	.word	0x3b9aca00
 8001bf4:	00000000 	.word	0x00000000

08001bf8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001bf8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
    TimeOut_t xCurrentTime = { 0 };
 8001c04:	f107 0308 	add.w	r3, r7, #8
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9c7 2304 	strd	r2, r3, [r7, #16]
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001c1a:	f107 0308 	add.w	r3, r7, #8
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f008 fca8 	bl	800a574 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4618      	mov	r0, r3
 8001c28:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	0003      	movs	r3, r0
 8001c36:	2200      	movs	r2, #0
 8001c38:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	f04f 0300 	mov.w	r3, #0
 8001c44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c48:	1884      	adds	r4, r0, r2
 8001c4a:	eb41 0503 	adc.w	r5, r1, r3
 8001c4e:	e9c7 4504 	strd	r4, r5, [r7, #16]

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001c52:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001c56:	4622      	mov	r2, r4
 8001c58:	462b      	mov	r3, r5
 8001c5a:	f04f 0000 	mov.w	r0, #0
 8001c5e:	f04f 0100 	mov.w	r1, #0
 8001c62:	0159      	lsls	r1, r3, #5
 8001c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c68:	0150      	lsls	r0, r2, #5
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	1b12      	subs	r2, r2, r4
 8001c70:	eb63 0305 	sbc.w	r3, r3, r5
 8001c74:	f04f 0000 	mov.w	r0, #0
 8001c78:	f04f 0100 	mov.w	r1, #0
 8001c7c:	0259      	lsls	r1, r3, #9
 8001c7e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c82:	0250      	lsls	r0, r2, #9
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	1912      	adds	r2, r2, r4
 8001c8a:	eb45 0303 	adc.w	r3, r5, r3
 8001c8e:	f04f 0000 	mov.w	r0, #0
 8001c92:	f04f 0100 	mov.w	r1, #0
 8001c96:	0199      	lsls	r1, r3, #6
 8001c98:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001c9c:	0190      	lsls	r0, r2, #6
 8001c9e:	1a80      	subs	r0, r0, r2
 8001ca0:	eb61 0103 	sbc.w	r1, r1, r3
 8001ca4:	eb10 0804 	adds.w	r8, r0, r4
 8001ca8:	eb41 0905 	adc.w	r9, r1, r5
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	4640      	mov	r0, r8
 8001cb0:	4649      	mov	r1, r9
 8001cb2:	f7ff ff51 	bl	8001b58 <UTILS_NanosecondsToTimespec>

    return 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001cc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_MspInit+0x54>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <HAL_MspInit+0x54>)
 8001cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cda:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <HAL_MspInit+0x54>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_MspInit+0x54>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <HAL_MspInit+0x54>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_MspInit+0x54>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	210f      	movs	r1, #15
 8001d06:	f06f 0001 	mvn.w	r0, #1
 8001d0a:	f000 fdaf 	bl	800286c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800

08001d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a19      	ldr	r2, [pc, #100]	; (8001da0 <HAL_I2C_MspInit+0x84>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d12c      	bne.n	8001d98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <HAL_I2C_MspInit+0x88>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <HAL_I2C_MspInit+0x88>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <HAL_I2C_MspInit+0x88>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001d5a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d60:	2312      	movs	r3, #18
 8001d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d64:	2301      	movs	r3, #1
 8001d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	4619      	mov	r1, r3
 8001d76:	480c      	ldr	r0, [pc, #48]	; (8001da8 <HAL_I2C_MspInit+0x8c>)
 8001d78:	f001 f9a4 	bl	80030c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <HAL_I2C_MspInit+0x88>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <HAL_I2C_MspInit+0x88>)
 8001d86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_I2C_MspInit+0x88>)
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d98:	bf00      	nop
 8001d9a:	3728      	adds	r7, #40	; 0x28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40005400 	.word	0x40005400
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020400 	.word	0x40020400

08001dac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08e      	sub	sp, #56	; 0x38
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a31      	ldr	r2, [pc, #196]	; (8001e9c <HAL_I2S_MspInit+0xf0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d15a      	bne.n	8001e92 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001de0:	23c0      	movs	r3, #192	; 0xc0
 8001de2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001de4:	2302      	movs	r3, #2
 8001de6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	4618      	mov	r0, r3
 8001dee:	f004 f8fb 	bl	8005fe8 <HAL_RCCEx_PeriphCLKConfig>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001df8:	f7ff fe0a 	bl	8001a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <HAL_I2S_MspInit+0xf4>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	4a26      	ldr	r2, [pc, #152]	; (8001ea0 <HAL_I2S_MspInit+0xf4>)
 8001e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0c:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <HAL_I2S_MspInit+0xf4>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_I2S_MspInit+0xf4>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	4a1f      	ldr	r2, [pc, #124]	; (8001ea0 <HAL_I2S_MspInit+0xf4>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6313      	str	r3, [r2, #48]	; 0x30
 8001e28:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_I2S_MspInit+0xf4>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <HAL_I2S_MspInit+0xf4>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	4a18      	ldr	r2, [pc, #96]	; (8001ea0 <HAL_I2S_MspInit+0xf4>)
 8001e3e:	f043 0304 	orr.w	r3, r3, #4
 8001e42:	6313      	str	r3, [r2, #48]	; 0x30
 8001e44:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <HAL_I2S_MspInit+0xf4>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001e50:	2310      	movs	r3, #16
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e60:	2306      	movs	r3, #6
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480e      	ldr	r0, [pc, #56]	; (8001ea4 <HAL_I2S_MspInit+0xf8>)
 8001e6c:	f001 f92a 	bl	80030c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001e70:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e82:	2306      	movs	r3, #6
 8001e84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4806      	ldr	r0, [pc, #24]	; (8001ea8 <HAL_I2S_MspInit+0xfc>)
 8001e8e:	f001 f919 	bl	80030c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e92:	bf00      	nop
 8001e94:	3738      	adds	r7, #56	; 0x38
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40003c00 	.word	0x40003c00
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020000 	.word	0x40020000
 8001ea8:	40020800 	.word	0x40020800

08001eac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	; 0x28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <HAL_SPI_MspInit+0x84>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d12b      	bne.n	8001f26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <HAL_SPI_MspInit+0x88>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	4a17      	ldr	r2, [pc, #92]	; (8001f34 <HAL_SPI_MspInit+0x88>)
 8001ed8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HAL_SPI_MspInit+0x88>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <HAL_SPI_MspInit+0x88>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a10      	ldr	r2, [pc, #64]	; (8001f34 <HAL_SPI_MspInit+0x88>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_SPI_MspInit+0x88>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001f06:	23e0      	movs	r3, #224	; 0xe0
 8001f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f16:	2305      	movs	r3, #5
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4805      	ldr	r0, [pc, #20]	; (8001f38 <HAL_SPI_MspInit+0x8c>)
 8001f22:	f001 f8cf 	bl	80030c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f26:	bf00      	nop
 8001f28:	3728      	adds	r7, #40	; 0x28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40013000 	.word	0x40013000
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40020000 	.word	0x40020000

08001f3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <HAL_TIM_Base_MspInit+0x3c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d10d      	bne.n	8001f6a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <HAL_TIM_Base_MspInit+0x40>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <HAL_TIM_Base_MspInit+0x40>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <HAL_TIM_Base_MspInit+0x40>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40010000 	.word	0x40010000
 8001f7c:	40023800 	.word	0x40023800

08001f80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 030c 	add.w	r3, r7, #12
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <HAL_TIM_MspPostInit+0x68>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d11e      	bne.n	8001fe0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_TIM_MspPostInit+0x6c>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a10      	ldr	r2, [pc, #64]	; (8001fec <HAL_TIM_MspPostInit+0x6c>)
 8001fac:	f043 0310 	orr.w	r3, r3, #16
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <HAL_TIM_MspPostInit+0x6c>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = STEPPER_PUL_Pin;
 8001fbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEPPER_PUL_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <HAL_TIM_MspPostInit+0x70>)
 8001fdc:	f001 f872 	bl	80030c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fe0:	bf00      	nop
 8001fe2:	3720      	adds	r7, #32
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08c      	sub	sp, #48	; 0x30
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 031c 	add.w	r3, r7, #28
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a76      	ldr	r2, [pc, #472]	; (80021ec <HAL_UART_MspInit+0x1f8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	f040 8094 	bne.w	8002140 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	4b74      	ldr	r3, [pc, #464]	; (80021f0 <HAL_UART_MspInit+0x1fc>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	4a73      	ldr	r2, [pc, #460]	; (80021f0 <HAL_UART_MspInit+0x1fc>)
 8002022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002026:	6413      	str	r3, [r2, #64]	; 0x40
 8002028:	4b71      	ldr	r3, [pc, #452]	; (80021f0 <HAL_UART_MspInit+0x1fc>)
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	61bb      	str	r3, [r7, #24]
 8002032:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	4b6d      	ldr	r3, [pc, #436]	; (80021f0 <HAL_UART_MspInit+0x1fc>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	4a6c      	ldr	r2, [pc, #432]	; (80021f0 <HAL_UART_MspInit+0x1fc>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6313      	str	r3, [r2, #48]	; 0x30
 8002044:	4b6a      	ldr	r3, [pc, #424]	; (80021f0 <HAL_UART_MspInit+0x1fc>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = ROS_USART_TX_Pin|ROS_USART_RX_Pin;
 8002050:	230c      	movs	r3, #12
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002060:	2307      	movs	r3, #7
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	4862      	ldr	r0, [pc, #392]	; (80021f4 <HAL_UART_MspInit+0x200>)
 800206c:	f001 f82a 	bl	80030c4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002070:	4b61      	ldr	r3, [pc, #388]	; (80021f8 <HAL_UART_MspInit+0x204>)
 8002072:	4a62      	ldr	r2, [pc, #392]	; (80021fc <HAL_UART_MspInit+0x208>)
 8002074:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002076:	4b60      	ldr	r3, [pc, #384]	; (80021f8 <HAL_UART_MspInit+0x204>)
 8002078:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800207c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800207e:	4b5e      	ldr	r3, [pc, #376]	; (80021f8 <HAL_UART_MspInit+0x204>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002084:	4b5c      	ldr	r3, [pc, #368]	; (80021f8 <HAL_UART_MspInit+0x204>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800208a:	4b5b      	ldr	r3, [pc, #364]	; (80021f8 <HAL_UART_MspInit+0x204>)
 800208c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002090:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002092:	4b59      	ldr	r3, [pc, #356]	; (80021f8 <HAL_UART_MspInit+0x204>)
 8002094:	2200      	movs	r2, #0
 8002096:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002098:	4b57      	ldr	r3, [pc, #348]	; (80021f8 <HAL_UART_MspInit+0x204>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800209e:	4b56      	ldr	r3, [pc, #344]	; (80021f8 <HAL_UART_MspInit+0x204>)
 80020a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80020a6:	4b54      	ldr	r3, [pc, #336]	; (80021f8 <HAL_UART_MspInit+0x204>)
 80020a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80020ac:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ae:	4b52      	ldr	r3, [pc, #328]	; (80021f8 <HAL_UART_MspInit+0x204>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020b4:	4850      	ldr	r0, [pc, #320]	; (80021f8 <HAL_UART_MspInit+0x204>)
 80020b6:	f000 fc03 	bl	80028c0 <HAL_DMA_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80020c0:	f7ff fca6 	bl	8001a10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a4c      	ldr	r2, [pc, #304]	; (80021f8 <HAL_UART_MspInit+0x204>)
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38
 80020ca:	4a4b      	ldr	r2, [pc, #300]	; (80021f8 <HAL_UART_MspInit+0x204>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80020d0:	4b4b      	ldr	r3, [pc, #300]	; (8002200 <HAL_UART_MspInit+0x20c>)
 80020d2:	4a4c      	ldr	r2, [pc, #304]	; (8002204 <HAL_UART_MspInit+0x210>)
 80020d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80020d6:	4b4a      	ldr	r3, [pc, #296]	; (8002200 <HAL_UART_MspInit+0x20c>)
 80020d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020dc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020de:	4b48      	ldr	r3, [pc, #288]	; (8002200 <HAL_UART_MspInit+0x20c>)
 80020e0:	2240      	movs	r2, #64	; 0x40
 80020e2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e4:	4b46      	ldr	r3, [pc, #280]	; (8002200 <HAL_UART_MspInit+0x20c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020ea:	4b45      	ldr	r3, [pc, #276]	; (8002200 <HAL_UART_MspInit+0x20c>)
 80020ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020f2:	4b43      	ldr	r3, [pc, #268]	; (8002200 <HAL_UART_MspInit+0x20c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020f8:	4b41      	ldr	r3, [pc, #260]	; (8002200 <HAL_UART_MspInit+0x20c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80020fe:	4b40      	ldr	r3, [pc, #256]	; (8002200 <HAL_UART_MspInit+0x20c>)
 8002100:	2200      	movs	r2, #0
 8002102:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002104:	4b3e      	ldr	r3, [pc, #248]	; (8002200 <HAL_UART_MspInit+0x20c>)
 8002106:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800210a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800210c:	4b3c      	ldr	r3, [pc, #240]	; (8002200 <HAL_UART_MspInit+0x20c>)
 800210e:	2200      	movs	r2, #0
 8002110:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002112:	483b      	ldr	r0, [pc, #236]	; (8002200 <HAL_UART_MspInit+0x20c>)
 8002114:	f000 fbd4 	bl	80028c0 <HAL_DMA_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800211e:	f7ff fc77 	bl	8001a10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a36      	ldr	r2, [pc, #216]	; (8002200 <HAL_UART_MspInit+0x20c>)
 8002126:	635a      	str	r2, [r3, #52]	; 0x34
 8002128:	4a35      	ldr	r2, [pc, #212]	; (8002200 <HAL_UART_MspInit+0x20c>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	2105      	movs	r1, #5
 8002132:	2026      	movs	r0, #38	; 0x26
 8002134:	f000 fb9a 	bl	800286c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002138:	2026      	movs	r0, #38	; 0x26
 800213a:	f000 fbb3 	bl	80028a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800213e:	e050      	b.n	80021e2 <HAL_UART_MspInit+0x1ee>
  else if(huart->Instance==USART3)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a30      	ldr	r2, [pc, #192]	; (8002208 <HAL_UART_MspInit+0x214>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d14b      	bne.n	80021e2 <HAL_UART_MspInit+0x1ee>
    __HAL_RCC_USART3_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <HAL_UART_MspInit+0x1fc>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a27      	ldr	r2, [pc, #156]	; (80021f0 <HAL_UART_MspInit+0x1fc>)
 8002154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <HAL_UART_MspInit+0x1fc>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <HAL_UART_MspInit+0x1fc>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a20      	ldr	r2, [pc, #128]	; (80021f0 <HAL_UART_MspInit+0x1fc>)
 8002170:	f043 0302 	orr.w	r3, r3, #2
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b1e      	ldr	r3, [pc, #120]	; (80021f0 <HAL_UART_MspInit+0x1fc>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <HAL_UART_MspInit+0x1fc>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a19      	ldr	r2, [pc, #100]	; (80021f0 <HAL_UART_MspInit+0x1fc>)
 800218c:	f043 0308 	orr.w	r3, r3, #8
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <HAL_UART_MspInit+0x1fc>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_USART_RX_Pin;
 800219e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ac:	2303      	movs	r3, #3
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021b0:	2307      	movs	r3, #7
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPS_USART_RX_GPIO_Port, &GPIO_InitStruct);
 80021b4:	f107 031c 	add.w	r3, r7, #28
 80021b8:	4619      	mov	r1, r3
 80021ba:	4814      	ldr	r0, [pc, #80]	; (800220c <HAL_UART_MspInit+0x218>)
 80021bc:	f000 ff82 	bl	80030c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPS_USART_TX_Pin;
 80021c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021d2:	2307      	movs	r3, #7
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPS_USART_TX_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 031c 	add.w	r3, r7, #28
 80021da:	4619      	mov	r1, r3
 80021dc:	480c      	ldr	r0, [pc, #48]	; (8002210 <HAL_UART_MspInit+0x21c>)
 80021de:	f000 ff71 	bl	80030c4 <HAL_GPIO_Init>
}
 80021e2:	bf00      	nop
 80021e4:	3730      	adds	r7, #48	; 0x30
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40004400 	.word	0x40004400
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020000 	.word	0x40020000
 80021f8:	20010378 	.word	0x20010378
 80021fc:	40026088 	.word	0x40026088
 8002200:	20010488 	.word	0x20010488
 8002204:	400260a0 	.word	0x400260a0
 8002208:	40004800 	.word	0x40004800
 800220c:	40020400 	.word	0x40020400
 8002210:	40020c00 	.word	0x40020c00

08002214 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08a      	sub	sp, #40	; 0x28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002234:	d147      	bne.n	80022c6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_HCD_MspInit+0xbc>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a24      	ldr	r2, [pc, #144]	; (80022d0 <HAL_HCD_MspInit+0xbc>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <HAL_HCD_MspInit+0xbc>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002252:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	481b      	ldr	r0, [pc, #108]	; (80022d4 <HAL_HCD_MspInit+0xc0>)
 8002268:	f000 ff2c 	bl	80030c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800226c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800227e:	230a      	movs	r3, #10
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	4812      	ldr	r0, [pc, #72]	; (80022d4 <HAL_HCD_MspInit+0xc0>)
 800228a:	f000 ff1b 	bl	80030c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_HCD_MspInit+0xbc>)
 8002290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002292:	4a0f      	ldr	r2, [pc, #60]	; (80022d0 <HAL_HCD_MspInit+0xbc>)
 8002294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002298:	6353      	str	r3, [r2, #52]	; 0x34
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <HAL_HCD_MspInit+0xbc>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <HAL_HCD_MspInit+0xbc>)
 80022a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a8:	6453      	str	r3, [r2, #68]	; 0x44
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <HAL_HCD_MspInit+0xbc>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2105      	movs	r1, #5
 80022ba:	2043      	movs	r0, #67	; 0x43
 80022bc:	f000 fad6 	bl	800286c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80022c0:	2043      	movs	r0, #67	; 0x43
 80022c2:	f000 faef 	bl	80028a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80022c6:	bf00      	nop
 80022c8:	3728      	adds	r7, #40	; 0x28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40020000 	.word	0x40020000

080022d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08c      	sub	sp, #48	; 0x30
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80022e8:	2200      	movs	r2, #0
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	2037      	movs	r0, #55	; 0x37
 80022ee:	f000 fabd 	bl	800286c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022f2:	2037      	movs	r0, #55	; 0x37
 80022f4:	f000 fad6 	bl	80028a4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	4b1f      	ldr	r3, [pc, #124]	; (800237c <HAL_InitTick+0xa4>)
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	4a1e      	ldr	r2, [pc, #120]	; (800237c <HAL_InitTick+0xa4>)
 8002302:	f043 0320 	orr.w	r3, r3, #32
 8002306:	6413      	str	r3, [r2, #64]	; 0x40
 8002308:	4b1c      	ldr	r3, [pc, #112]	; (800237c <HAL_InitTick+0xa4>)
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002314:	f107 0210 	add.w	r2, r7, #16
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4611      	mov	r1, r2
 800231e:	4618      	mov	r0, r3
 8002320:	f003 fe30 	bl	8005f84 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002324:	f003 fe06 	bl	8005f34 <HAL_RCC_GetPCLK1Freq>
 8002328:	4603      	mov	r3, r0
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	4a13      	ldr	r2, [pc, #76]	; (8002380 <HAL_InitTick+0xa8>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	0c9b      	lsrs	r3, r3, #18
 8002338:	3b01      	subs	r3, #1
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_InitTick+0xac>)
 800233e:	4a12      	ldr	r2, [pc, #72]	; (8002388 <HAL_InitTick+0xb0>)
 8002340:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_InitTick+0xac>)
 8002344:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002348:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800234a:	4a0e      	ldr	r2, [pc, #56]	; (8002384 <HAL_InitTick+0xac>)
 800234c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_InitTick+0xac>)
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_InitTick+0xac>)
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800235c:	4809      	ldr	r0, [pc, #36]	; (8002384 <HAL_InitTick+0xac>)
 800235e:	f004 f80c 	bl	800637a <HAL_TIM_Base_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d104      	bne.n	8002372 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002368:	4806      	ldr	r0, [pc, #24]	; (8002384 <HAL_InitTick+0xac>)
 800236a:	f004 f855 	bl	8006418 <HAL_TIM_Base_Start_IT>
 800236e:	4603      	mov	r3, r0
 8002370:	e000      	b.n	8002374 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
}
 8002374:	4618      	mov	r0, r3
 8002376:	3730      	adds	r7, #48	; 0x30
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40023800 	.word	0x40023800
 8002380:	431bde83 	.word	0x431bde83
 8002384:	200109a8 	.word	0x200109a8
 8002388:	40001400 	.word	0x40001400

0800238c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <NMI_Handler+0x4>

08002392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <HardFault_Handler+0x4>

08002398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <MemManage_Handler+0x4>

0800239e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <BusFault_Handler+0x4>

080023a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <UsageFault_Handler+0x4>

080023aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80023bc:	2001      	movs	r0, #1
 80023be:	f001 f851 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <DMA1_Stream5_IRQHandler+0x10>)
 80023ce:	f000 fc0f 	bl	8002bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20010378 	.word	0x20010378

080023dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <DMA1_Stream6_IRQHandler+0x10>)
 80023e2:	f000 fc05 	bl	8002bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20010488 	.word	0x20010488

080023f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <USART2_IRQHandler+0x10>)
 80023f6:	f005 f8db 	bl	80075b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20010914 	.word	0x20010914

08002404 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <TIM7_IRQHandler+0x10>)
 800240a:	f004 f8ce 	bl	80065aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200109a8 	.word	0x200109a8

08002418 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <OTG_FS_IRQHandler+0x10>)
 800241e:	f001 f8a6 	bl	800356e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20010610 	.word	0x20010610

0800242c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
	return 1;
 8002430:	2301      	movs	r3, #1
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_kill>:

int _kill(int pid, int sig)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002446:	f014 fba7 	bl	8016b98 <__errno>
 800244a:	4603      	mov	r3, r0
 800244c:	2216      	movs	r2, #22
 800244e:	601a      	str	r2, [r3, #0]
	return -1;
 8002450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <_exit>:

void _exit (int status)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002464:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ffe7 	bl	800243c <_kill>
	while (1) {}		/* Make sure we hang here */
 800246e:	e7fe      	b.n	800246e <_exit+0x12>

08002470 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	e00a      	b.n	8002498 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002482:	f3af 8000 	nop.w
 8002486:	4601      	mov	r1, r0
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	60ba      	str	r2, [r7, #8]
 800248e:	b2ca      	uxtb	r2, r1
 8002490:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	3301      	adds	r3, #1
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	dbf0      	blt.n	8002482 <_read+0x12>
	}

return len;
 80024a0:	687b      	ldr	r3, [r7, #4]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	e009      	b.n	80024d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	60ba      	str	r2, [r7, #8]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	3301      	adds	r3, #1
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	dbf1      	blt.n	80024bc <_write+0x12>
	}
	return len;
 80024d8:	687b      	ldr	r3, [r7, #4]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <_close>:

int _close(int file)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
	return -1;
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800250a:	605a      	str	r2, [r3, #4]
	return 0;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <_isatty>:

int _isatty(int file)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
	return 1;
 8002522:	2301      	movs	r3, #1
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
	return 0;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002554:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <_sbrk+0x5c>)
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <_sbrk+0x60>)
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <_sbrk+0x64>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d102      	bne.n	800256e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <_sbrk+0x64>)
 800256a:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <_sbrk+0x68>)
 800256c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <_sbrk+0x64>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4413      	add	r3, r2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	429a      	cmp	r2, r3
 800257a:	d207      	bcs.n	800258c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800257c:	f014 fb0c 	bl	8016b98 <__errno>
 8002580:	4603      	mov	r3, r0
 8002582:	220c      	movs	r2, #12
 8002584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800258a:	e009      	b.n	80025a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <_sbrk+0x64>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002592:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <_sbrk+0x64>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	4a05      	ldr	r2, [pc, #20]	; (80025b0 <_sbrk+0x64>)
 800259c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800259e:	68fb      	ldr	r3, [r7, #12]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20020000 	.word	0x20020000
 80025ac:	00000400 	.word	0x00000400
 80025b0:	20007f20 	.word	0x20007f20
 80025b4:	20015be8 	.word	0x20015be8

080025b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <SystemInit+0x20>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c2:	4a05      	ldr	r2, [pc, #20]	; (80025d8 <SystemInit+0x20>)
 80025c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002614 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025e0:	480d      	ldr	r0, [pc, #52]	; (8002618 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025e2:	490e      	ldr	r1, [pc, #56]	; (800261c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025e4:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e8:	e002      	b.n	80025f0 <LoopCopyDataInit>

080025ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ee:	3304      	adds	r3, #4

080025f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f4:	d3f9      	bcc.n	80025ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025f6:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025f8:	4c0b      	ldr	r4, [pc, #44]	; (8002628 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025fc:	e001      	b.n	8002602 <LoopFillZerobss>

080025fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002600:	3204      	adds	r2, #4

08002602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002604:	d3fb      	bcc.n	80025fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002606:	f7ff ffd7 	bl	80025b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800260a:	f014 fb7f 	bl	8016d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800260e:	f7fe fb17 	bl	8000c40 <main>
  bx  lr    
 8002612:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800261c:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8002620:	08019f8c 	.word	0x08019f8c
  ldr r2, =_sbss
 8002624:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8002628:	20015be8 	.word	0x20015be8

0800262c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800262c:	e7fe      	b.n	800262c <ADC_IRQHandler>
	...

08002630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002634:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <HAL_Init+0x40>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <HAL_Init+0x40>)
 800263a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800263e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_Init+0x40>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <HAL_Init+0x40>)
 8002646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800264a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800264c:	4b08      	ldr	r3, [pc, #32]	; (8002670 <HAL_Init+0x40>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a07      	ldr	r2, [pc, #28]	; (8002670 <HAL_Init+0x40>)
 8002652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002658:	2003      	movs	r0, #3
 800265a:	f000 f8fc 	bl	8002856 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800265e:	200f      	movs	r0, #15
 8002660:	f7ff fe3a 	bl	80022d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002664:	f7ff fb2e 	bl	8001cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023c00 	.word	0x40023c00

08002674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_IncTick+0x20>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_IncTick+0x24>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4413      	add	r3, r2
 8002684:	4a04      	ldr	r2, [pc, #16]	; (8002698 <HAL_IncTick+0x24>)
 8002686:	6013      	str	r3, [r2, #0]
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	2000000c 	.word	0x2000000c
 8002698:	200109f0 	.word	0x200109f0

0800269c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return uwTick;
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <HAL_GetTick+0x14>)
 80026a2:	681b      	ldr	r3, [r3, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	200109f0 	.word	0x200109f0

080026b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026bc:	f7ff ffee 	bl	800269c <HAL_GetTick>
 80026c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026cc:	d005      	beq.n	80026da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <HAL_Delay+0x44>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4413      	add	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026da:	bf00      	nop
 80026dc:	f7ff ffde 	bl	800269c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d8f7      	bhi.n	80026dc <HAL_Delay+0x28>
  {
  }
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	2000000c 	.word	0x2000000c

080026fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002718:	4013      	ands	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272e:	4a04      	ldr	r2, [pc, #16]	; (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	60d3      	str	r3, [r2, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <__NVIC_GetPriorityGrouping+0x18>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	f003 0307 	and.w	r3, r3, #7
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	2b00      	cmp	r3, #0
 8002770:	db0b      	blt.n	800278a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	4907      	ldr	r1, [pc, #28]	; (8002798 <__NVIC_EnableIRQ+0x38>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2001      	movs	r0, #1
 8002782:	fa00 f202 	lsl.w	r2, r0, r2
 8002786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000e100 	.word	0xe000e100

0800279c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db0a      	blt.n	80027c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	490c      	ldr	r1, [pc, #48]	; (80027e8 <__NVIC_SetPriority+0x4c>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	0112      	lsls	r2, r2, #4
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	440b      	add	r3, r1
 80027c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c4:	e00a      	b.n	80027dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4908      	ldr	r1, [pc, #32]	; (80027ec <__NVIC_SetPriority+0x50>)
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	3b04      	subs	r3, #4
 80027d4:	0112      	lsls	r2, r2, #4
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	440b      	add	r3, r1
 80027da:	761a      	strb	r2, [r3, #24]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000e100 	.word	0xe000e100
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f1c3 0307 	rsb	r3, r3, #7
 800280a:	2b04      	cmp	r3, #4
 800280c:	bf28      	it	cs
 800280e:	2304      	movcs	r3, #4
 8002810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3304      	adds	r3, #4
 8002816:	2b06      	cmp	r3, #6
 8002818:	d902      	bls.n	8002820 <NVIC_EncodePriority+0x30>
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3b03      	subs	r3, #3
 800281e:	e000      	b.n	8002822 <NVIC_EncodePriority+0x32>
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43da      	mvns	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	401a      	ands	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002838:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa01 f303 	lsl.w	r3, r1, r3
 8002842:	43d9      	mvns	r1, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	4313      	orrs	r3, r2
         );
}
 800284a:	4618      	mov	r0, r3
 800284c:	3724      	adds	r7, #36	; 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ff4c 	bl	80026fc <__NVIC_SetPriorityGrouping>
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800287e:	f7ff ff61 	bl	8002744 <__NVIC_GetPriorityGrouping>
 8002882:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	68b9      	ldr	r1, [r7, #8]
 8002888:	6978      	ldr	r0, [r7, #20]
 800288a:	f7ff ffb1 	bl	80027f0 <NVIC_EncodePriority>
 800288e:	4602      	mov	r2, r0
 8002890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ff80 	bl	800279c <__NVIC_SetPriority>
}
 800289c:	bf00      	nop
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ff54 	bl	8002760 <__NVIC_EnableIRQ>
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028cc:	f7ff fee6 	bl	800269c <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e099      	b.n	8002a10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0201 	bic.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028fc:	e00f      	b.n	800291e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028fe:	f7ff fecd 	bl	800269c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b05      	cmp	r3, #5
 800290a:	d908      	bls.n	800291e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2203      	movs	r2, #3
 8002916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e078      	b.n	8002a10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1e8      	bne.n	80028fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	4b38      	ldr	r3, [pc, #224]	; (8002a18 <HAL_DMA_Init+0x158>)
 8002938:	4013      	ands	r3, r2
 800293a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800294a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002956:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002962:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4313      	orrs	r3, r2
 800296e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	2b04      	cmp	r3, #4
 8002976:	d107      	bne.n	8002988 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	4313      	orrs	r3, r2
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f023 0307 	bic.w	r3, r3, #7
 800299e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d117      	bne.n	80029e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00e      	beq.n	80029e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fb01 	bl	8002fcc <DMA_CheckFifoParam>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029de:	2301      	movs	r3, #1
 80029e0:	e016      	b.n	8002a10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fab8 	bl	8002f60 <DMA_CalcBaseAndBitshift>
 80029f0:	4603      	mov	r3, r0
 80029f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f8:	223f      	movs	r2, #63	; 0x3f
 80029fa:	409a      	lsls	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	f010803f 	.word	0xf010803f

08002a1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_DMA_Start_IT+0x26>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e040      	b.n	8002ac4 <HAL_DMA_Start_IT+0xa8>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d12f      	bne.n	8002ab6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2202      	movs	r2, #2
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 fa4a 	bl	8002f04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a74:	223f      	movs	r2, #63	; 0x3f
 8002a76:	409a      	lsls	r2, r3
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0216 	orr.w	r2, r2, #22
 8002a8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0208 	orr.w	r2, r2, #8
 8002aa2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	e005      	b.n	8002ac2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ada:	f7ff fddf 	bl	800269c <HAL_GetTick>
 8002ade:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d008      	beq.n	8002afe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2280      	movs	r2, #128	; 0x80
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e052      	b.n	8002ba4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0216 	bic.w	r2, r2, #22
 8002b0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695a      	ldr	r2, [r3, #20]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d103      	bne.n	8002b2e <HAL_DMA_Abort+0x62>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0208 	bic.w	r2, r2, #8
 8002b3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b4e:	e013      	b.n	8002b78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b50:	f7ff fda4 	bl	800269c <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b05      	cmp	r3, #5
 8002b5c:	d90c      	bls.n	8002b78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2220      	movs	r2, #32
 8002b62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2203      	movs	r2, #3
 8002b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e015      	b.n	8002ba4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1e4      	bne.n	8002b50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8a:	223f      	movs	r2, #63	; 0x3f
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d004      	beq.n	8002bca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2280      	movs	r2, #128	; 0x80
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e00c      	b.n	8002be4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2205      	movs	r2, #5
 8002bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0201 	bic.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bfc:	4b92      	ldr	r3, [pc, #584]	; (8002e48 <HAL_DMA_IRQHandler+0x258>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a92      	ldr	r2, [pc, #584]	; (8002e4c <HAL_DMA_IRQHandler+0x25c>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	0a9b      	lsrs	r3, r3, #10
 8002c08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d01a      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d013      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0204 	bic.w	r2, r2, #4
 8002c42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c48:	2208      	movs	r2, #8
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c54:	f043 0201 	orr.w	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	2201      	movs	r2, #1
 8002c62:	409a      	lsls	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d012      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7e:	2201      	movs	r2, #1
 8002c80:	409a      	lsls	r2, r3
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	f043 0202 	orr.w	r2, r3, #2
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c96:	2204      	movs	r2, #4
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d012      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00b      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc0:	f043 0204 	orr.w	r2, r3, #4
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ccc:	2210      	movs	r2, #16
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d043      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d03c      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	2210      	movs	r2, #16
 8002cec:	409a      	lsls	r2, r3
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d018      	beq.n	8002d32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d108      	bne.n	8002d20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d024      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	4798      	blx	r3
 8002d1e:	e01f      	b.n	8002d60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01b      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	4798      	blx	r3
 8002d30:	e016      	b.n	8002d60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d107      	bne.n	8002d50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0208 	bic.w	r2, r2, #8
 8002d4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d64:	2220      	movs	r2, #32
 8002d66:	409a      	lsls	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 808e 	beq.w	8002e8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8086 	beq.w	8002e8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d86:	2220      	movs	r2, #32
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b05      	cmp	r3, #5
 8002d98:	d136      	bne.n	8002e08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0216 	bic.w	r2, r2, #22
 8002da8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695a      	ldr	r2, [r3, #20]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002db8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d103      	bne.n	8002dca <HAL_DMA_IRQHandler+0x1da>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d007      	beq.n	8002dda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0208 	bic.w	r2, r2, #8
 8002dd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dde:	223f      	movs	r2, #63	; 0x3f
 8002de0:	409a      	lsls	r2, r3
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d07d      	beq.n	8002efa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	4798      	blx	r3
        }
        return;
 8002e06:	e078      	b.n	8002efa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01c      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d108      	bne.n	8002e36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d030      	beq.n	8002e8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	4798      	blx	r3
 8002e34:	e02b      	b.n	8002e8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d027      	beq.n	8002e8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	4798      	blx	r3
 8002e46:	e022      	b.n	8002e8e <HAL_DMA_IRQHandler+0x29e>
 8002e48:	20000004 	.word	0x20000004
 8002e4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10f      	bne.n	8002e7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0210 	bic.w	r2, r2, #16
 8002e6c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d032      	beq.n	8002efc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d022      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2205      	movs	r2, #5
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0201 	bic.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d307      	bcc.n	8002ed6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f2      	bne.n	8002eba <HAL_DMA_IRQHandler+0x2ca>
 8002ed4:	e000      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002ed6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	4798      	blx	r3
 8002ef8:	e000      	b.n	8002efc <HAL_DMA_IRQHandler+0x30c>
        return;
 8002efa:	bf00      	nop
    }
  }
}
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop

08002f04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b40      	cmp	r3, #64	; 0x40
 8002f30:	d108      	bne.n	8002f44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f42:	e007      	b.n	8002f54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	60da      	str	r2, [r3, #12]
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	3b10      	subs	r3, #16
 8002f70:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <DMA_CalcBaseAndBitshift+0x64>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f7a:	4a13      	ldr	r2, [pc, #76]	; (8002fc8 <DMA_CalcBaseAndBitshift+0x68>)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d909      	bls.n	8002fa2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f96:	f023 0303 	bic.w	r3, r3, #3
 8002f9a:	1d1a      	adds	r2, r3, #4
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	659a      	str	r2, [r3, #88]	; 0x58
 8002fa0:	e007      	b.n	8002fb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002faa:	f023 0303 	bic.w	r3, r3, #3
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	aaaaaaab 	.word	0xaaaaaaab
 8002fc8:	08019324 	.word	0x08019324

08002fcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d11f      	bne.n	8003026 <DMA_CheckFifoParam+0x5a>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d856      	bhi.n	800309a <DMA_CheckFifoParam+0xce>
 8002fec:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <DMA_CheckFifoParam+0x28>)
 8002fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff2:	bf00      	nop
 8002ff4:	08003005 	.word	0x08003005
 8002ff8:	08003017 	.word	0x08003017
 8002ffc:	08003005 	.word	0x08003005
 8003000:	0800309b 	.word	0x0800309b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d046      	beq.n	800309e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003014:	e043      	b.n	800309e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800301e:	d140      	bne.n	80030a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003024:	e03d      	b.n	80030a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302e:	d121      	bne.n	8003074 <DMA_CheckFifoParam+0xa8>
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b03      	cmp	r3, #3
 8003034:	d837      	bhi.n	80030a6 <DMA_CheckFifoParam+0xda>
 8003036:	a201      	add	r2, pc, #4	; (adr r2, 800303c <DMA_CheckFifoParam+0x70>)
 8003038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303c:	0800304d 	.word	0x0800304d
 8003040:	08003053 	.word	0x08003053
 8003044:	0800304d 	.word	0x0800304d
 8003048:	08003065 	.word	0x08003065
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
      break;
 8003050:	e030      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d025      	beq.n	80030aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003062:	e022      	b.n	80030aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800306c:	d11f      	bne.n	80030ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003072:	e01c      	b.n	80030ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d903      	bls.n	8003082 <DMA_CheckFifoParam+0xb6>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d003      	beq.n	8003088 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003080:	e018      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
      break;
 8003086:	e015      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00e      	beq.n	80030b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      break;
 8003098:	e00b      	b.n	80030b2 <DMA_CheckFifoParam+0xe6>
      break;
 800309a:	bf00      	nop
 800309c:	e00a      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      break;
 800309e:	bf00      	nop
 80030a0:	e008      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      break;
 80030a2:	bf00      	nop
 80030a4:	e006      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      break;
 80030a6:	bf00      	nop
 80030a8:	e004      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      break;
 80030aa:	bf00      	nop
 80030ac:	e002      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80030ae:	bf00      	nop
 80030b0:	e000      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      break;
 80030b2:	bf00      	nop
    }
  } 
  
  return status; 
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop

080030c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b089      	sub	sp, #36	; 0x24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	e16b      	b.n	80033b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030e0:	2201      	movs	r2, #1
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	f040 815a 	bne.w	80033b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d005      	beq.n	8003116 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003112:	2b02      	cmp	r3, #2
 8003114:	d130      	bne.n	8003178 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	2203      	movs	r2, #3
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4313      	orrs	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800314c:	2201      	movs	r2, #1
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f003 0201 	and.w	r2, r3, #1
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	2b03      	cmp	r3, #3
 8003182:	d017      	beq.n	80031b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	2203      	movs	r2, #3
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 0303 	and.w	r3, r3, #3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d123      	bne.n	8003208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	08da      	lsrs	r2, r3, #3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3208      	adds	r2, #8
 80031c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	220f      	movs	r2, #15
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	08da      	lsrs	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3208      	adds	r2, #8
 8003202:	69b9      	ldr	r1, [r7, #24]
 8003204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	2203      	movs	r2, #3
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0203 	and.w	r2, r3, #3
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80b4 	beq.w	80033b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	4b60      	ldr	r3, [pc, #384]	; (80033d0 <HAL_GPIO_Init+0x30c>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	4a5f      	ldr	r2, [pc, #380]	; (80033d0 <HAL_GPIO_Init+0x30c>)
 8003254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003258:	6453      	str	r3, [r2, #68]	; 0x44
 800325a:	4b5d      	ldr	r3, [pc, #372]	; (80033d0 <HAL_GPIO_Init+0x30c>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003266:	4a5b      	ldr	r2, [pc, #364]	; (80033d4 <HAL_GPIO_Init+0x310>)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	089b      	lsrs	r3, r3, #2
 800326c:	3302      	adds	r3, #2
 800326e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	220f      	movs	r2, #15
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4013      	ands	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a52      	ldr	r2, [pc, #328]	; (80033d8 <HAL_GPIO_Init+0x314>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d02b      	beq.n	80032ea <HAL_GPIO_Init+0x226>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a51      	ldr	r2, [pc, #324]	; (80033dc <HAL_GPIO_Init+0x318>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d025      	beq.n	80032e6 <HAL_GPIO_Init+0x222>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a50      	ldr	r2, [pc, #320]	; (80033e0 <HAL_GPIO_Init+0x31c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01f      	beq.n	80032e2 <HAL_GPIO_Init+0x21e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a4f      	ldr	r2, [pc, #316]	; (80033e4 <HAL_GPIO_Init+0x320>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d019      	beq.n	80032de <HAL_GPIO_Init+0x21a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a4e      	ldr	r2, [pc, #312]	; (80033e8 <HAL_GPIO_Init+0x324>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_GPIO_Init+0x216>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a4d      	ldr	r2, [pc, #308]	; (80033ec <HAL_GPIO_Init+0x328>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00d      	beq.n	80032d6 <HAL_GPIO_Init+0x212>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a4c      	ldr	r2, [pc, #304]	; (80033f0 <HAL_GPIO_Init+0x32c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <HAL_GPIO_Init+0x20e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a4b      	ldr	r2, [pc, #300]	; (80033f4 <HAL_GPIO_Init+0x330>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <HAL_GPIO_Init+0x20a>
 80032ca:	2307      	movs	r3, #7
 80032cc:	e00e      	b.n	80032ec <HAL_GPIO_Init+0x228>
 80032ce:	2308      	movs	r3, #8
 80032d0:	e00c      	b.n	80032ec <HAL_GPIO_Init+0x228>
 80032d2:	2306      	movs	r3, #6
 80032d4:	e00a      	b.n	80032ec <HAL_GPIO_Init+0x228>
 80032d6:	2305      	movs	r3, #5
 80032d8:	e008      	b.n	80032ec <HAL_GPIO_Init+0x228>
 80032da:	2304      	movs	r3, #4
 80032dc:	e006      	b.n	80032ec <HAL_GPIO_Init+0x228>
 80032de:	2303      	movs	r3, #3
 80032e0:	e004      	b.n	80032ec <HAL_GPIO_Init+0x228>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e002      	b.n	80032ec <HAL_GPIO_Init+0x228>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <HAL_GPIO_Init+0x228>
 80032ea:	2300      	movs	r3, #0
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	f002 0203 	and.w	r2, r2, #3
 80032f2:	0092      	lsls	r2, r2, #2
 80032f4:	4093      	lsls	r3, r2
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032fc:	4935      	ldr	r1, [pc, #212]	; (80033d4 <HAL_GPIO_Init+0x310>)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	089b      	lsrs	r3, r3, #2
 8003302:	3302      	adds	r3, #2
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800330a:	4b3b      	ldr	r3, [pc, #236]	; (80033f8 <HAL_GPIO_Init+0x334>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800332e:	4a32      	ldr	r2, [pc, #200]	; (80033f8 <HAL_GPIO_Init+0x334>)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003334:	4b30      	ldr	r3, [pc, #192]	; (80033f8 <HAL_GPIO_Init+0x334>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003358:	4a27      	ldr	r2, [pc, #156]	; (80033f8 <HAL_GPIO_Init+0x334>)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800335e:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <HAL_GPIO_Init+0x334>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003382:	4a1d      	ldr	r2, [pc, #116]	; (80033f8 <HAL_GPIO_Init+0x334>)
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003388:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <HAL_GPIO_Init+0x334>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033ac:	4a12      	ldr	r2, [pc, #72]	; (80033f8 <HAL_GPIO_Init+0x334>)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3301      	adds	r3, #1
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	2b0f      	cmp	r3, #15
 80033bc:	f67f ae90 	bls.w	80030e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop
 80033c4:	3724      	adds	r7, #36	; 0x24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40013800 	.word	0x40013800
 80033d8:	40020000 	.word	0x40020000
 80033dc:	40020400 	.word	0x40020400
 80033e0:	40020800 	.word	0x40020800
 80033e4:	40020c00 	.word	0x40020c00
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40021400 	.word	0x40021400
 80033f0:	40021800 	.word	0x40021800
 80033f4:	40021c00 	.word	0x40021c00
 80033f8:	40013c00 	.word	0x40013c00

080033fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	807b      	strh	r3, [r7, #2]
 8003408:	4613      	mov	r3, r2
 800340a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800340c:	787b      	ldrb	r3, [r7, #1]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003412:	887a      	ldrh	r2, [r7, #2]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003418:	e003      	b.n	8003422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800341a:	887b      	ldrh	r3, [r7, #2]
 800341c:	041a      	lsls	r2, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	619a      	str	r2, [r3, #24]
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800342e:	b480      	push	{r7}
 8003430:	b085      	sub	sp, #20
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	460b      	mov	r3, r1
 8003438:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003440:	887a      	ldrh	r2, [r7, #2]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4013      	ands	r3, r2
 8003446:	041a      	lsls	r2, r3, #16
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	43d9      	mvns	r1, r3
 800344c:	887b      	ldrh	r3, [r7, #2]
 800344e:	400b      	ands	r3, r1
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	619a      	str	r2, [r3, #24]
}
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800346e:	4b08      	ldr	r3, [pc, #32]	; (8003490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	4013      	ands	r3, r2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d006      	beq.n	8003488 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800347a:	4a05      	ldr	r2, [pc, #20]	; (8003490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	4618      	mov	r0, r3
 8003484:	f000 f806 	bl	8003494 <HAL_GPIO_EXTI_Callback>
  }
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40013c00 	.word	0x40013c00

08003494 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80034aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ac:	b08f      	sub	sp, #60	; 0x3c
 80034ae:	af0a      	add	r7, sp, #40	; 0x28
 80034b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e054      	b.n	8003566 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fe fe9c 	bl	8002214 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2203      	movs	r2, #3
 80034e0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d102      	bne.n	80034f6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f005 f8fd 	bl	80086fa <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	603b      	str	r3, [r7, #0]
 8003506:	687e      	ldr	r6, [r7, #4]
 8003508:	466d      	mov	r5, sp
 800350a:	f106 0410 	add.w	r4, r6, #16
 800350e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003516:	e894 0003 	ldmia.w	r4, {r0, r1}
 800351a:	e885 0003 	stmia.w	r5, {r0, r1}
 800351e:	1d33      	adds	r3, r6, #4
 8003520:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003522:	6838      	ldr	r0, [r7, #0]
 8003524:	f005 f888 	bl	8008638 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2101      	movs	r1, #1
 800352e:	4618      	mov	r0, r3
 8003530:	f005 f8f4 	bl	800871c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	687e      	ldr	r6, [r7, #4]
 800353c:	466d      	mov	r5, sp
 800353e:	f106 0410 	add.w	r4, r6, #16
 8003542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800354a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800354e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003552:	1d33      	adds	r3, r6, #4
 8003554:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003556:	6838      	ldr	r0, [r7, #0]
 8003558:	f005 fa1c 	bl	8008994 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800356e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b086      	sub	sp, #24
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f005 f9c4 	bl	8008912 <USB_GetMode>
 800358a:	4603      	mov	r3, r0
 800358c:	2b01      	cmp	r3, #1
 800358e:	f040 80f6 	bne.w	800377e <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f005 f9a8 	bl	80088ec <USB_ReadInterrupts>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 80ec 	beq.w	800377c <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f005 f99f 	bl	80088ec <USB_ReadInterrupts>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035b8:	d104      	bne.n	80035c4 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80035c2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f005 f98f 	bl	80088ec <USB_ReadInterrupts>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035d8:	d104      	bne.n	80035e4 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035e2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f005 f97f 	bl	80088ec <USB_ReadInterrupts>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035f8:	d104      	bne.n	8003604 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003602:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f005 f96f 	bl	80088ec <USB_ReadInterrupts>
 800360e:	4603      	mov	r3, r0
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b02      	cmp	r3, #2
 8003616:	d103      	bne.n	8003620 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2202      	movs	r2, #2
 800361e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f005 f961 	bl	80088ec <USB_ReadInterrupts>
 800362a:	4603      	mov	r3, r0
 800362c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003634:	d11c      	bne.n	8003670 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800363e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10f      	bne.n	8003670 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003650:	2110      	movs	r1, #16
 8003652:	6938      	ldr	r0, [r7, #16]
 8003654:	f005 f8ae 	bl	80087b4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003658:	6938      	ldr	r0, [r7, #16]
 800365a:	f005 f8cf 	bl	80087fc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2101      	movs	r1, #1
 8003664:	4618      	mov	r0, r3
 8003666:	f005 fa49 	bl	8008afc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f89e 	bl	80037ac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f005 f939 	bl	80088ec <USB_ReadInterrupts>
 800367a:	4603      	mov	r3, r0
 800367c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003684:	d102      	bne.n	800368c <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f001 f9b1 	bl	80049ee <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f005 f92b 	bl	80088ec <USB_ReadInterrupts>
 8003696:	4603      	mov	r3, r0
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b08      	cmp	r3, #8
 800369e:	d106      	bne.n	80036ae <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f86f 	bl	8003784 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2208      	movs	r2, #8
 80036ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f005 f91a 	bl	80088ec <USB_ReadInterrupts>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	2b10      	cmp	r3, #16
 80036c0:	d101      	bne.n	80036c6 <HAL_HCD_IRQHandler+0x158>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <HAL_HCD_IRQHandler+0x15a>
 80036c6:	2300      	movs	r3, #0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d012      	beq.n	80036f2 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0210 	bic.w	r2, r2, #16
 80036da:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f001 f8b4 	bl	800484a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699a      	ldr	r2, [r3, #24]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0210 	orr.w	r2, r2, #16
 80036f0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f005 f8f8 	bl	80088ec <USB_ReadInterrupts>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003706:	d13a      	bne.n	800377e <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f005 fa2f 	bl	8008b70 <USB_HC_ReadInterrupt>
 8003712:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	e025      	b.n	8003766 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	fa22 f303 	lsr.w	r3, r2, r3
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d018      	beq.n	8003760 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4413      	add	r3, r2
 8003736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003744:	d106      	bne.n	8003754 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	4619      	mov	r1, r3
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f859 	bl	8003804 <HCD_HC_IN_IRQHandler>
 8003752:	e005      	b.n	8003760 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	4619      	mov	r1, r3
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fc74 	bl	8004048 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	3301      	adds	r3, #1
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	429a      	cmp	r2, r3
 800376e:	d3d4      	bcc.n	800371a <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003778:	615a      	str	r2, [r3, #20]
 800377a:	e000      	b.n	800377e <HAL_HCD_IRQHandler+0x210>
      return;
 800377c:	bf00      	nop
    }
  }
}
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	70fb      	strb	r3, [r7, #3]
 80037f4:	4613      	mov	r3, r2
 80037f6:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b04      	cmp	r3, #4
 8003832:	d119      	bne.n	8003868 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4413      	add	r3, r2
 800383c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003840:	461a      	mov	r2, r3
 8003842:	2304      	movs	r3, #4
 8003844:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4413      	add	r3, r2
 800384e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	0151      	lsls	r1, r2, #5
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	440a      	add	r2, r1
 800385c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003860:	f043 0302 	orr.w	r3, r3, #2
 8003864:	60d3      	str	r3, [r2, #12]
 8003866:	e101      	b.n	8003a6c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4413      	add	r3, r2
 8003870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800387e:	d12b      	bne.n	80038d8 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4413      	add	r3, r2
 8003888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388c:	461a      	mov	r2, r3
 800388e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003892:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	212c      	movs	r1, #44	; 0x2c
 800389a:	fb01 f303 	mul.w	r3, r1, r3
 800389e:	4413      	add	r3, r2
 80038a0:	3361      	adds	r3, #97	; 0x61
 80038a2:	2207      	movs	r2, #7
 80038a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	0151      	lsls	r1, r2, #5
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	440a      	add	r2, r1
 80038bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038c0:	f043 0302 	orr.w	r3, r3, #2
 80038c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f005 f95e 	bl	8008b92 <USB_HC_Halt>
 80038d6:	e0c9      	b.n	8003a6c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d109      	bne.n	8003902 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fa:	461a      	mov	r2, r3
 80038fc:	2320      	movs	r3, #32
 80038fe:	6093      	str	r3, [r2, #8]
 8003900:	e0b4      	b.n	8003a6c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4413      	add	r3, r2
 800390a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b08      	cmp	r3, #8
 8003916:	d133      	bne.n	8003980 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4413      	add	r3, r2
 8003920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	0151      	lsls	r1, r2, #5
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	440a      	add	r2, r1
 800392e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003932:	f043 0302 	orr.w	r3, r3, #2
 8003936:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	212c      	movs	r1, #44	; 0x2c
 800393e:	fb01 f303 	mul.w	r3, r1, r3
 8003942:	4413      	add	r3, r2
 8003944:	3361      	adds	r3, #97	; 0x61
 8003946:	2205      	movs	r2, #5
 8003948:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4413      	add	r3, r2
 8003952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003956:	461a      	mov	r2, r3
 8003958:	2310      	movs	r3, #16
 800395a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4413      	add	r3, r2
 8003964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003968:	461a      	mov	r2, r3
 800396a:	2308      	movs	r3, #8
 800396c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	4611      	mov	r1, r2
 8003978:	4618      	mov	r0, r3
 800397a:	f005 f90a 	bl	8008b92 <USB_HC_Halt>
 800397e:	e075      	b.n	8003a6c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4413      	add	r3, r2
 8003988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003996:	d134      	bne.n	8003a02 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	0151      	lsls	r1, r2, #5
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	440a      	add	r2, r1
 80039ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039b2:	f043 0302 	orr.w	r3, r3, #2
 80039b6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	212c      	movs	r1, #44	; 0x2c
 80039be:	fb01 f303 	mul.w	r3, r1, r3
 80039c2:	4413      	add	r3, r2
 80039c4:	3361      	adds	r3, #97	; 0x61
 80039c6:	2208      	movs	r2, #8
 80039c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d6:	461a      	mov	r2, r3
 80039d8:	2310      	movs	r3, #16
 80039da:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e8:	461a      	mov	r2, r3
 80039ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039ee:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f005 f8c9 	bl	8008b92 <USB_HC_Halt>
 8003a00:	e034      	b.n	8003a6c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a14:	2b80      	cmp	r3, #128	; 0x80
 8003a16:	d129      	bne.n	8003a6c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	0151      	lsls	r1, r2, #5
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	440a      	add	r2, r1
 8003a2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a32:	f043 0302 	orr.w	r3, r3, #2
 8003a36:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	212c      	movs	r1, #44	; 0x2c
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	4413      	add	r3, r2
 8003a44:	3361      	adds	r3, #97	; 0x61
 8003a46:	2206      	movs	r2, #6
 8003a48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	4611      	mov	r1, r2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f005 f89c 	bl	8008b92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a66:	461a      	mov	r2, r3
 8003a68:	2380      	movs	r3, #128	; 0x80
 8003a6a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a82:	d122      	bne.n	8003aca <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	0151      	lsls	r1, r2, #5
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	440a      	add	r2, r1
 8003a9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a9e:	f043 0302 	orr.w	r3, r3, #2
 8003aa2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	4611      	mov	r1, r2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f005 f86f 	bl	8008b92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ac6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003ac8:	e2ba      	b.n	8004040 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	f040 811b 	bne.w	8003d18 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d019      	beq.n	8003b1e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	212c      	movs	r1, #44	; 0x2c
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	4413      	add	r3, r2
 8003af6:	3348      	adds	r3, #72	; 0x48
 8003af8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	0159      	lsls	r1, r3, #5
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	440b      	add	r3, r1
 8003b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003b0c:	1ad2      	subs	r2, r2, r3
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	202c      	movs	r0, #44	; 0x2c
 8003b14:	fb00 f303 	mul.w	r3, r0, r3
 8003b18:	440b      	add	r3, r1
 8003b1a:	3350      	adds	r3, #80	; 0x50
 8003b1c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	212c      	movs	r1, #44	; 0x2c
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	4413      	add	r3, r2
 8003b2a:	3361      	adds	r3, #97	; 0x61
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	212c      	movs	r1, #44	; 0x2c
 8003b36:	fb01 f303 	mul.w	r3, r1, r3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	335c      	adds	r3, #92	; 0x5c
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4e:	461a      	mov	r2, r3
 8003b50:	2301      	movs	r3, #1
 8003b52:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	212c      	movs	r1, #44	; 0x2c
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	333f      	adds	r3, #63	; 0x3f
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d009      	beq.n	8003b7c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	212c      	movs	r1, #44	; 0x2c
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	333f      	adds	r3, #63	; 0x3f
 8003b76:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d121      	bne.n	8003bc0 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	0151      	lsls	r1, r2, #5
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	440a      	add	r2, r1
 8003b92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b96:	f043 0302 	orr.w	r3, r3, #2
 8003b9a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f004 fff3 	bl	8008b92 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2310      	movs	r3, #16
 8003bbc:	6093      	str	r3, [r2, #8]
 8003bbe:	e066      	b.n	8003c8e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	212c      	movs	r1, #44	; 0x2c
 8003bc6:	fb01 f303 	mul.w	r3, r1, r3
 8003bca:	4413      	add	r3, r2
 8003bcc:	333f      	adds	r3, #63	; 0x3f
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d127      	bne.n	8003c24 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	0151      	lsls	r1, r2, #5
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	440a      	add	r2, r1
 8003bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003bf2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	212c      	movs	r1, #44	; 0x2c
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	3360      	adds	r3, #96	; 0x60
 8003c02:	2201      	movs	r2, #1
 8003c04:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	b2d9      	uxtb	r1, r3
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	202c      	movs	r0, #44	; 0x2c
 8003c10:	fb00 f303 	mul.w	r3, r0, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	3360      	adds	r3, #96	; 0x60
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff fde3 	bl	80037e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c22:	e034      	b.n	8003c8e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	212c      	movs	r1, #44	; 0x2c
 8003c2a:	fb01 f303 	mul.w	r3, r1, r3
 8003c2e:	4413      	add	r3, r2
 8003c30:	333f      	adds	r3, #63	; 0x3f
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d12a      	bne.n	8003c8e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	212c      	movs	r1, #44	; 0x2c
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	3360      	adds	r3, #96	; 0x60
 8003c46:	2201      	movs	r2, #1
 8003c48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	212c      	movs	r1, #44	; 0x2c
 8003c50:	fb01 f303 	mul.w	r3, r1, r3
 8003c54:	4413      	add	r3, r2
 8003c56:	3354      	adds	r3, #84	; 0x54
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	f083 0301 	eor.w	r3, r3, #1
 8003c5e:	b2d8      	uxtb	r0, r3
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	212c      	movs	r1, #44	; 0x2c
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3354      	adds	r3, #84	; 0x54
 8003c6e:	4602      	mov	r2, r0
 8003c70:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	b2d9      	uxtb	r1, r3
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	202c      	movs	r0, #44	; 0x2c
 8003c7c:	fb00 f303 	mul.w	r3, r0, r3
 8003c80:	4413      	add	r3, r2
 8003c82:	3360      	adds	r3, #96	; 0x60
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff fdad 	bl	80037e8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d12b      	bne.n	8003cee <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	212c      	movs	r1, #44	; 0x2c
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3348      	adds	r3, #72	; 0x48
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	202c      	movs	r0, #44	; 0x2c
 8003cac:	fb00 f202 	mul.w	r2, r0, r2
 8003cb0:	440a      	add	r2, r1
 8003cb2:	3240      	adds	r2, #64	; 0x40
 8003cb4:	8812      	ldrh	r2, [r2, #0]
 8003cb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 81be 	beq.w	8004040 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	212c      	movs	r1, #44	; 0x2c
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	4413      	add	r3, r2
 8003cd0:	3354      	adds	r3, #84	; 0x54
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	f083 0301 	eor.w	r3, r3, #1
 8003cd8:	b2d8      	uxtb	r0, r3
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	212c      	movs	r1, #44	; 0x2c
 8003ce0:	fb01 f303 	mul.w	r3, r1, r3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3354      	adds	r3, #84	; 0x54
 8003ce8:	4602      	mov	r2, r0
 8003cea:	701a      	strb	r2, [r3, #0]
}
 8003cec:	e1a8      	b.n	8004040 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	212c      	movs	r1, #44	; 0x2c
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3354      	adds	r3, #84	; 0x54
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	f083 0301 	eor.w	r3, r3, #1
 8003d02:	b2d8      	uxtb	r0, r3
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	212c      	movs	r1, #44	; 0x2c
 8003d0a:	fb01 f303 	mul.w	r3, r1, r3
 8003d0e:	4413      	add	r3, r2
 8003d10:	3354      	adds	r3, #84	; 0x54
 8003d12:	4602      	mov	r2, r0
 8003d14:	701a      	strb	r2, [r3, #0]
}
 8003d16:	e193      	b.n	8004040 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	f040 8106 	bne.w	8003f3c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	0151      	lsls	r1, r2, #5
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	440a      	add	r2, r1
 8003d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d4a:	f023 0302 	bic.w	r3, r3, #2
 8003d4e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	212c      	movs	r1, #44	; 0x2c
 8003d56:	fb01 f303 	mul.w	r3, r1, r3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3361      	adds	r3, #97	; 0x61
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d109      	bne.n	8003d78 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	212c      	movs	r1, #44	; 0x2c
 8003d6a:	fb01 f303 	mul.w	r3, r1, r3
 8003d6e:	4413      	add	r3, r2
 8003d70:	3360      	adds	r3, #96	; 0x60
 8003d72:	2201      	movs	r2, #1
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	e0c9      	b.n	8003f0c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	212c      	movs	r1, #44	; 0x2c
 8003d7e:	fb01 f303 	mul.w	r3, r1, r3
 8003d82:	4413      	add	r3, r2
 8003d84:	3361      	adds	r3, #97	; 0x61
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b05      	cmp	r3, #5
 8003d8a:	d109      	bne.n	8003da0 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	212c      	movs	r1, #44	; 0x2c
 8003d92:	fb01 f303 	mul.w	r3, r1, r3
 8003d96:	4413      	add	r3, r2
 8003d98:	3360      	adds	r3, #96	; 0x60
 8003d9a:	2205      	movs	r2, #5
 8003d9c:	701a      	strb	r2, [r3, #0]
 8003d9e:	e0b5      	b.n	8003f0c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	212c      	movs	r1, #44	; 0x2c
 8003da6:	fb01 f303 	mul.w	r3, r1, r3
 8003daa:	4413      	add	r3, r2
 8003dac:	3361      	adds	r3, #97	; 0x61
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b06      	cmp	r3, #6
 8003db2:	d009      	beq.n	8003dc8 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	212c      	movs	r1, #44	; 0x2c
 8003dba:	fb01 f303 	mul.w	r3, r1, r3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3361      	adds	r3, #97	; 0x61
 8003dc2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d150      	bne.n	8003e6a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	212c      	movs	r1, #44	; 0x2c
 8003dce:	fb01 f303 	mul.w	r3, r1, r3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	335c      	adds	r3, #92	; 0x5c
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	202c      	movs	r0, #44	; 0x2c
 8003de0:	fb00 f303 	mul.w	r3, r0, r3
 8003de4:	440b      	add	r3, r1
 8003de6:	335c      	adds	r3, #92	; 0x5c
 8003de8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	212c      	movs	r1, #44	; 0x2c
 8003df0:	fb01 f303 	mul.w	r3, r1, r3
 8003df4:	4413      	add	r3, r2
 8003df6:	335c      	adds	r3, #92	; 0x5c
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d912      	bls.n	8003e24 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	212c      	movs	r1, #44	; 0x2c
 8003e04:	fb01 f303 	mul.w	r3, r1, r3
 8003e08:	4413      	add	r3, r2
 8003e0a:	335c      	adds	r3, #92	; 0x5c
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	212c      	movs	r1, #44	; 0x2c
 8003e16:	fb01 f303 	mul.w	r3, r1, r3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3360      	adds	r3, #96	; 0x60
 8003e1e:	2204      	movs	r2, #4
 8003e20:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e22:	e073      	b.n	8003f0c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	212c      	movs	r1, #44	; 0x2c
 8003e2a:	fb01 f303 	mul.w	r3, r1, r3
 8003e2e:	4413      	add	r3, r2
 8003e30:	3360      	adds	r3, #96	; 0x60
 8003e32:	2202      	movs	r2, #2
 8003e34:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e4c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e54:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e62:	461a      	mov	r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e68:	e050      	b.n	8003f0c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	212c      	movs	r1, #44	; 0x2c
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	3361      	adds	r3, #97	; 0x61
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d122      	bne.n	8003ec4 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	212c      	movs	r1, #44	; 0x2c
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	4413      	add	r3, r2
 8003e8a:	3360      	adds	r3, #96	; 0x60
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ea6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003eae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e023      	b.n	8003f0c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	212c      	movs	r1, #44	; 0x2c
 8003eca:	fb01 f303 	mul.w	r3, r1, r3
 8003ece:	4413      	add	r3, r2
 8003ed0:	3361      	adds	r3, #97	; 0x61
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b07      	cmp	r3, #7
 8003ed6:	d119      	bne.n	8003f0c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	212c      	movs	r1, #44	; 0x2c
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	335c      	adds	r3, #92	; 0x5c
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	202c      	movs	r0, #44	; 0x2c
 8003ef0:	fb00 f303 	mul.w	r3, r0, r3
 8003ef4:	440b      	add	r3, r1
 8003ef6:	335c      	adds	r3, #92	; 0x5c
 8003ef8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	212c      	movs	r1, #44	; 0x2c
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	4413      	add	r3, r2
 8003f06:	3360      	adds	r3, #96	; 0x60
 8003f08:	2204      	movs	r2, #4
 8003f0a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	b2d9      	uxtb	r1, r3
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	202c      	movs	r0, #44	; 0x2c
 8003f28:	fb00 f303 	mul.w	r3, r0, r3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	3360      	adds	r3, #96	; 0x60
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff fc57 	bl	80037e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003f3a:	e081      	b.n	8004040 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b10      	cmp	r3, #16
 8003f50:	d176      	bne.n	8004040 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	212c      	movs	r1, #44	; 0x2c
 8003f58:	fb01 f303 	mul.w	r3, r1, r3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	333f      	adds	r3, #63	; 0x3f
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d121      	bne.n	8003faa <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	212c      	movs	r1, #44	; 0x2c
 8003f6c:	fb01 f303 	mul.w	r3, r1, r3
 8003f70:	4413      	add	r3, r2
 8003f72:	335c      	adds	r3, #92	; 0x5c
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	0151      	lsls	r1, r2, #5
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	440a      	add	r2, r1
 8003f8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f92:	f043 0302 	orr.w	r3, r3, #2
 8003f96:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f004 fdf5 	bl	8008b92 <USB_HC_Halt>
 8003fa8:	e041      	b.n	800402e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	212c      	movs	r1, #44	; 0x2c
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	333f      	adds	r3, #63	; 0x3f
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	212c      	movs	r1, #44	; 0x2c
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	4413      	add	r3, r2
 8003fca:	333f      	adds	r3, #63	; 0x3f
 8003fcc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d12d      	bne.n	800402e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	212c      	movs	r1, #44	; 0x2c
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	335c      	adds	r3, #92	; 0x5c
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d120      	bne.n	800402e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	212c      	movs	r1, #44	; 0x2c
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3361      	adds	r3, #97	; 0x61
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4413      	add	r3, r2
 8004006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	0151      	lsls	r1, r2, #5
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	440a      	add	r2, r1
 8004014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004018:	f043 0302 	orr.w	r3, r3, #2
 800401c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	4611      	mov	r1, r2
 8004028:	4618      	mov	r0, r3
 800402a:	f004 fdb2 	bl	8008b92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	4413      	add	r3, r2
 8004036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403a:	461a      	mov	r2, r3
 800403c:	2310      	movs	r3, #16
 800403e:	6093      	str	r3, [r2, #8]
}
 8004040:	bf00      	nop
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	4413      	add	r3, r2
 800406a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b04      	cmp	r3, #4
 8004076:	d119      	bne.n	80040ac <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	4413      	add	r3, r2
 8004080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004084:	461a      	mov	r2, r3
 8004086:	2304      	movs	r3, #4
 8004088:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	4413      	add	r3, r2
 8004092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	0151      	lsls	r1, r2, #5
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	440a      	add	r2, r1
 80040a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040a4:	f043 0302 	orr.w	r3, r3, #2
 80040a8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80040aa:	e3ca      	b.n	8004842 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d13e      	bne.n	8004140 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ce:	461a      	mov	r2, r3
 80040d0:	2320      	movs	r3, #32
 80040d2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	212c      	movs	r1, #44	; 0x2c
 80040da:	fb01 f303 	mul.w	r3, r1, r3
 80040de:	4413      	add	r3, r2
 80040e0:	333d      	adds	r3, #61	; 0x3d
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	f040 83ac 	bne.w	8004842 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	212c      	movs	r1, #44	; 0x2c
 80040f0:	fb01 f303 	mul.w	r3, r1, r3
 80040f4:	4413      	add	r3, r2
 80040f6:	333d      	adds	r3, #61	; 0x3d
 80040f8:	2200      	movs	r2, #0
 80040fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	212c      	movs	r1, #44	; 0x2c
 8004102:	fb01 f303 	mul.w	r3, r1, r3
 8004106:	4413      	add	r3, r2
 8004108:	3360      	adds	r3, #96	; 0x60
 800410a:	2202      	movs	r2, #2
 800410c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	4413      	add	r3, r2
 8004116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	0151      	lsls	r1, r2, #5
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	440a      	add	r2, r1
 8004124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004128:	f043 0302 	orr.w	r3, r3, #2
 800412c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	4611      	mov	r1, r2
 8004138:	4618      	mov	r0, r3
 800413a:	f004 fd2a 	bl	8008b92 <USB_HC_Halt>
}
 800413e:	e380      	b.n	8004842 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	4413      	add	r3, r2
 8004148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004156:	d122      	bne.n	800419e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	4413      	add	r3, r2
 8004160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	0151      	lsls	r1, r2, #5
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	440a      	add	r2, r1
 800416e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004172:	f043 0302 	orr.w	r3, r3, #2
 8004176:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	4611      	mov	r1, r2
 8004182:	4618      	mov	r0, r3
 8004184:	f004 fd05 	bl	8008b92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	4413      	add	r3, r2
 8004190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004194:	461a      	mov	r2, r3
 8004196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800419a:	6093      	str	r3, [r2, #8]
}
 800419c:	e351      	b.n	8004842 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d150      	bne.n	8004256 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	212c      	movs	r1, #44	; 0x2c
 80041ba:	fb01 f303 	mul.w	r3, r1, r3
 80041be:	4413      	add	r3, r2
 80041c0:	335c      	adds	r3, #92	; 0x5c
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	d111      	bne.n	8004200 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	212c      	movs	r1, #44	; 0x2c
 80041e2:	fb01 f303 	mul.w	r3, r1, r3
 80041e6:	4413      	add	r3, r2
 80041e8:	333d      	adds	r3, #61	; 0x3d
 80041ea:	2201      	movs	r2, #1
 80041ec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fa:	461a      	mov	r2, r3
 80041fc:	2340      	movs	r3, #64	; 0x40
 80041fe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	4413      	add	r3, r2
 8004208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	0151      	lsls	r1, r2, #5
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	440a      	add	r2, r1
 8004216:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800421a:	f043 0302 	orr.w	r3, r3, #2
 800421e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	4611      	mov	r1, r2
 800422a:	4618      	mov	r0, r3
 800422c:	f004 fcb1 	bl	8008b92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	4413      	add	r3, r2
 8004238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423c:	461a      	mov	r2, r3
 800423e:	2301      	movs	r3, #1
 8004240:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	212c      	movs	r1, #44	; 0x2c
 8004248:	fb01 f303 	mul.w	r3, r1, r3
 800424c:	4413      	add	r3, r2
 800424e:	3361      	adds	r3, #97	; 0x61
 8004250:	2201      	movs	r2, #1
 8004252:	701a      	strb	r2, [r3, #0]
}
 8004254:	e2f5      	b.n	8004842 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	4413      	add	r3, r2
 800425e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d13c      	bne.n	80042e6 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	212c      	movs	r1, #44	; 0x2c
 8004272:	fb01 f303 	mul.w	r3, r1, r3
 8004276:	4413      	add	r3, r2
 8004278:	3361      	adds	r3, #97	; 0x61
 800427a:	2204      	movs	r2, #4
 800427c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	212c      	movs	r1, #44	; 0x2c
 8004284:	fb01 f303 	mul.w	r3, r1, r3
 8004288:	4413      	add	r3, r2
 800428a:	333d      	adds	r3, #61	; 0x3d
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	212c      	movs	r1, #44	; 0x2c
 8004296:	fb01 f303 	mul.w	r3, r1, r3
 800429a:	4413      	add	r3, r2
 800429c:	335c      	adds	r3, #92	; 0x5c
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	0151      	lsls	r1, r2, #5
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	440a      	add	r2, r1
 80042b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042bc:	f043 0302 	orr.w	r3, r3, #2
 80042c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	4611      	mov	r1, r2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f004 fc60 	bl	8008b92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042de:	461a      	mov	r2, r3
 80042e0:	2340      	movs	r3, #64	; 0x40
 80042e2:	6093      	str	r3, [r2, #8]
}
 80042e4:	e2ad      	b.n	8004842 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d12a      	bne.n	8004352 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	4413      	add	r3, r2
 8004304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004308:	461a      	mov	r2, r3
 800430a:	2308      	movs	r3, #8
 800430c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	4413      	add	r3, r2
 8004316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	0151      	lsls	r1, r2, #5
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	440a      	add	r2, r1
 8004324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004328:	f043 0302 	orr.w	r3, r3, #2
 800432c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	4611      	mov	r1, r2
 8004338:	4618      	mov	r0, r3
 800433a:	f004 fc2a 	bl	8008b92 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	212c      	movs	r1, #44	; 0x2c
 8004344:	fb01 f303 	mul.w	r3, r1, r3
 8004348:	4413      	add	r3, r2
 800434a:	3361      	adds	r3, #97	; 0x61
 800434c:	2205      	movs	r2, #5
 800434e:	701a      	strb	r2, [r3, #0]
}
 8004350:	e277      	b.n	8004842 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	4413      	add	r3, r2
 800435a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b10      	cmp	r3, #16
 8004366:	d150      	bne.n	800440a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	212c      	movs	r1, #44	; 0x2c
 800436e:	fb01 f303 	mul.w	r3, r1, r3
 8004372:	4413      	add	r3, r2
 8004374:	335c      	adds	r3, #92	; 0x5c
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	212c      	movs	r1, #44	; 0x2c
 8004380:	fb01 f303 	mul.w	r3, r1, r3
 8004384:	4413      	add	r3, r2
 8004386:	3361      	adds	r3, #97	; 0x61
 8004388:	2203      	movs	r2, #3
 800438a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	212c      	movs	r1, #44	; 0x2c
 8004392:	fb01 f303 	mul.w	r3, r1, r3
 8004396:	4413      	add	r3, r2
 8004398:	333d      	adds	r3, #61	; 0x3d
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d112      	bne.n	80043c6 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	212c      	movs	r1, #44	; 0x2c
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	4413      	add	r3, r2
 80043ac:	333c      	adds	r3, #60	; 0x3c
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d108      	bne.n	80043c6 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	212c      	movs	r1, #44	; 0x2c
 80043ba:	fb01 f303 	mul.w	r3, r1, r3
 80043be:	4413      	add	r3, r2
 80043c0:	333d      	adds	r3, #61	; 0x3d
 80043c2:	2201      	movs	r2, #1
 80043c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	0151      	lsls	r1, r2, #5
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	440a      	add	r2, r1
 80043dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043e0:	f043 0302 	orr.w	r3, r3, #2
 80043e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	4611      	mov	r1, r2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f004 fbce 	bl	8008b92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004402:	461a      	mov	r2, r3
 8004404:	2310      	movs	r3, #16
 8004406:	6093      	str	r3, [r2, #8]
}
 8004408:	e21b      	b.n	8004842 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	4413      	add	r3, r2
 8004412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441c:	2b80      	cmp	r3, #128	; 0x80
 800441e:	d174      	bne.n	800450a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d121      	bne.n	800446c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	212c      	movs	r1, #44	; 0x2c
 800442e:	fb01 f303 	mul.w	r3, r1, r3
 8004432:	4413      	add	r3, r2
 8004434:	3361      	adds	r3, #97	; 0x61
 8004436:	2206      	movs	r2, #6
 8004438:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	4413      	add	r3, r2
 8004442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	0151      	lsls	r1, r2, #5
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	440a      	add	r2, r1
 8004450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004454:	f043 0302 	orr.w	r3, r3, #2
 8004458:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	4611      	mov	r1, r2
 8004464:	4618      	mov	r0, r3
 8004466:	f004 fb94 	bl	8008b92 <USB_HC_Halt>
 800446a:	e044      	b.n	80044f6 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	212c      	movs	r1, #44	; 0x2c
 8004472:	fb01 f303 	mul.w	r3, r1, r3
 8004476:	4413      	add	r3, r2
 8004478:	335c      	adds	r3, #92	; 0x5c
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	202c      	movs	r0, #44	; 0x2c
 8004484:	fb00 f303 	mul.w	r3, r0, r3
 8004488:	440b      	add	r3, r1
 800448a:	335c      	adds	r3, #92	; 0x5c
 800448c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	212c      	movs	r1, #44	; 0x2c
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	4413      	add	r3, r2
 800449a:	335c      	adds	r3, #92	; 0x5c
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d920      	bls.n	80044e4 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	212c      	movs	r1, #44	; 0x2c
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	335c      	adds	r3, #92	; 0x5c
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	212c      	movs	r1, #44	; 0x2c
 80044ba:	fb01 f303 	mul.w	r3, r1, r3
 80044be:	4413      	add	r3, r2
 80044c0:	3360      	adds	r3, #96	; 0x60
 80044c2:	2204      	movs	r2, #4
 80044c4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	b2d9      	uxtb	r1, r3
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	202c      	movs	r0, #44	; 0x2c
 80044d0:	fb00 f303 	mul.w	r3, r0, r3
 80044d4:	4413      	add	r3, r2
 80044d6:	3360      	adds	r3, #96	; 0x60
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff f983 	bl	80037e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80044e2:	e008      	b.n	80044f6 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	212c      	movs	r1, #44	; 0x2c
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	4413      	add	r3, r2
 80044f0:	3360      	adds	r3, #96	; 0x60
 80044f2:	2202      	movs	r2, #2
 80044f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004502:	461a      	mov	r2, r3
 8004504:	2380      	movs	r3, #128	; 0x80
 8004506:	6093      	str	r3, [r2, #8]
}
 8004508:	e19b      	b.n	8004842 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	4413      	add	r3, r2
 8004512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004520:	d134      	bne.n	800458c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	4413      	add	r3, r2
 800452a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	0151      	lsls	r1, r2, #5
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	440a      	add	r2, r1
 8004538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800453c:	f043 0302 	orr.w	r3, r3, #2
 8004540:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	4611      	mov	r1, r2
 800454c:	4618      	mov	r0, r3
 800454e:	f004 fb20 	bl	8008b92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	4413      	add	r3, r2
 800455a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455e:	461a      	mov	r2, r3
 8004560:	2310      	movs	r3, #16
 8004562:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	4413      	add	r3, r2
 800456c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004570:	461a      	mov	r2, r3
 8004572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004576:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	212c      	movs	r1, #44	; 0x2c
 800457e:	fb01 f303 	mul.w	r3, r1, r3
 8004582:	4413      	add	r3, r2
 8004584:	3361      	adds	r3, #97	; 0x61
 8004586:	2208      	movs	r2, #8
 8004588:	701a      	strb	r2, [r3, #0]
}
 800458a:	e15a      	b.n	8004842 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	4413      	add	r3, r2
 8004594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b02      	cmp	r3, #2
 80045a0:	f040 814f 	bne.w	8004842 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	0151      	lsls	r1, r2, #5
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	440a      	add	r2, r1
 80045ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045be:	f023 0302 	bic.w	r3, r3, #2
 80045c2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	212c      	movs	r1, #44	; 0x2c
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	3361      	adds	r3, #97	; 0x61
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d17d      	bne.n	80046d4 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	212c      	movs	r1, #44	; 0x2c
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	4413      	add	r3, r2
 80045e4:	3360      	adds	r3, #96	; 0x60
 80045e6:	2201      	movs	r2, #1
 80045e8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	212c      	movs	r1, #44	; 0x2c
 80045f0:	fb01 f303 	mul.w	r3, r1, r3
 80045f4:	4413      	add	r3, r2
 80045f6:	333f      	adds	r3, #63	; 0x3f
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d00a      	beq.n	8004614 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	212c      	movs	r1, #44	; 0x2c
 8004604:	fb01 f303 	mul.w	r3, r1, r3
 8004608:	4413      	add	r3, r2
 800460a:	333f      	adds	r3, #63	; 0x3f
 800460c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800460e:	2b03      	cmp	r3, #3
 8004610:	f040 8100 	bne.w	8004814 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d113      	bne.n	8004644 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	212c      	movs	r1, #44	; 0x2c
 8004622:	fb01 f303 	mul.w	r3, r1, r3
 8004626:	4413      	add	r3, r2
 8004628:	3355      	adds	r3, #85	; 0x55
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	f083 0301 	eor.w	r3, r3, #1
 8004630:	b2d8      	uxtb	r0, r3
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	212c      	movs	r1, #44	; 0x2c
 8004638:	fb01 f303 	mul.w	r3, r1, r3
 800463c:	4413      	add	r3, r2
 800463e:	3355      	adds	r3, #85	; 0x55
 8004640:	4602      	mov	r2, r0
 8004642:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	2b01      	cmp	r3, #1
 800464a:	f040 80e3 	bne.w	8004814 <HCD_HC_OUT_IRQHandler+0x7cc>
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	212c      	movs	r1, #44	; 0x2c
 8004654:	fb01 f303 	mul.w	r3, r1, r3
 8004658:	4413      	add	r3, r2
 800465a:	334c      	adds	r3, #76	; 0x4c
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80d8 	beq.w	8004814 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	212c      	movs	r1, #44	; 0x2c
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	4413      	add	r3, r2
 8004670:	334c      	adds	r3, #76	; 0x4c
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	202c      	movs	r0, #44	; 0x2c
 800467a:	fb00 f202 	mul.w	r2, r0, r2
 800467e:	440a      	add	r2, r1
 8004680:	3240      	adds	r2, #64	; 0x40
 8004682:	8812      	ldrh	r2, [r2, #0]
 8004684:	4413      	add	r3, r2
 8004686:	3b01      	subs	r3, #1
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	202c      	movs	r0, #44	; 0x2c
 800468e:	fb00 f202 	mul.w	r2, r0, r2
 8004692:	440a      	add	r2, r1
 8004694:	3240      	adds	r2, #64	; 0x40
 8004696:	8812      	ldrh	r2, [r2, #0]
 8004698:	fbb3 f3f2 	udiv	r3, r3, r2
 800469c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 80b5 	beq.w	8004814 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	212c      	movs	r1, #44	; 0x2c
 80046b0:	fb01 f303 	mul.w	r3, r1, r3
 80046b4:	4413      	add	r3, r2
 80046b6:	3355      	adds	r3, #85	; 0x55
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	f083 0301 	eor.w	r3, r3, #1
 80046be:	b2d8      	uxtb	r0, r3
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	212c      	movs	r1, #44	; 0x2c
 80046c6:	fb01 f303 	mul.w	r3, r1, r3
 80046ca:	4413      	add	r3, r2
 80046cc:	3355      	adds	r3, #85	; 0x55
 80046ce:	4602      	mov	r2, r0
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	e09f      	b.n	8004814 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	212c      	movs	r1, #44	; 0x2c
 80046da:	fb01 f303 	mul.w	r3, r1, r3
 80046de:	4413      	add	r3, r2
 80046e0:	3361      	adds	r3, #97	; 0x61
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d109      	bne.n	80046fc <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	212c      	movs	r1, #44	; 0x2c
 80046ee:	fb01 f303 	mul.w	r3, r1, r3
 80046f2:	4413      	add	r3, r2
 80046f4:	3360      	adds	r3, #96	; 0x60
 80046f6:	2202      	movs	r2, #2
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	e08b      	b.n	8004814 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	212c      	movs	r1, #44	; 0x2c
 8004702:	fb01 f303 	mul.w	r3, r1, r3
 8004706:	4413      	add	r3, r2
 8004708:	3361      	adds	r3, #97	; 0x61
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b04      	cmp	r3, #4
 800470e:	d109      	bne.n	8004724 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	212c      	movs	r1, #44	; 0x2c
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	4413      	add	r3, r2
 800471c:	3360      	adds	r3, #96	; 0x60
 800471e:	2202      	movs	r2, #2
 8004720:	701a      	strb	r2, [r3, #0]
 8004722:	e077      	b.n	8004814 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	212c      	movs	r1, #44	; 0x2c
 800472a:	fb01 f303 	mul.w	r3, r1, r3
 800472e:	4413      	add	r3, r2
 8004730:	3361      	adds	r3, #97	; 0x61
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b05      	cmp	r3, #5
 8004736:	d109      	bne.n	800474c <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	212c      	movs	r1, #44	; 0x2c
 800473e:	fb01 f303 	mul.w	r3, r1, r3
 8004742:	4413      	add	r3, r2
 8004744:	3360      	adds	r3, #96	; 0x60
 8004746:	2205      	movs	r2, #5
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	e063      	b.n	8004814 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	212c      	movs	r1, #44	; 0x2c
 8004752:	fb01 f303 	mul.w	r3, r1, r3
 8004756:	4413      	add	r3, r2
 8004758:	3361      	adds	r3, #97	; 0x61
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b06      	cmp	r3, #6
 800475e:	d009      	beq.n	8004774 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	212c      	movs	r1, #44	; 0x2c
 8004766:	fb01 f303 	mul.w	r3, r1, r3
 800476a:	4413      	add	r3, r2
 800476c:	3361      	adds	r3, #97	; 0x61
 800476e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004770:	2b08      	cmp	r3, #8
 8004772:	d14f      	bne.n	8004814 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	212c      	movs	r1, #44	; 0x2c
 800477a:	fb01 f303 	mul.w	r3, r1, r3
 800477e:	4413      	add	r3, r2
 8004780:	335c      	adds	r3, #92	; 0x5c
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	202c      	movs	r0, #44	; 0x2c
 800478c:	fb00 f303 	mul.w	r3, r0, r3
 8004790:	440b      	add	r3, r1
 8004792:	335c      	adds	r3, #92	; 0x5c
 8004794:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	212c      	movs	r1, #44	; 0x2c
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	4413      	add	r3, r2
 80047a2:	335c      	adds	r3, #92	; 0x5c
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d912      	bls.n	80047d0 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	212c      	movs	r1, #44	; 0x2c
 80047b0:	fb01 f303 	mul.w	r3, r1, r3
 80047b4:	4413      	add	r3, r2
 80047b6:	335c      	adds	r3, #92	; 0x5c
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	212c      	movs	r1, #44	; 0x2c
 80047c2:	fb01 f303 	mul.w	r3, r1, r3
 80047c6:	4413      	add	r3, r2
 80047c8:	3360      	adds	r3, #96	; 0x60
 80047ca:	2204      	movs	r2, #4
 80047cc:	701a      	strb	r2, [r3, #0]
 80047ce:	e021      	b.n	8004814 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	212c      	movs	r1, #44	; 0x2c
 80047d6:	fb01 f303 	mul.w	r3, r1, r3
 80047da:	4413      	add	r3, r2
 80047dc:	3360      	adds	r3, #96	; 0x60
 80047de:	2202      	movs	r2, #2
 80047e0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047f8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004800:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	4413      	add	r3, r2
 800480a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800480e:	461a      	mov	r2, r3
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	4413      	add	r3, r2
 800481c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004820:	461a      	mov	r2, r3
 8004822:	2302      	movs	r3, #2
 8004824:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	b2d9      	uxtb	r1, r3
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	202c      	movs	r0, #44	; 0x2c
 8004830:	fb00 f303 	mul.w	r3, r0, r3
 8004834:	4413      	add	r3, r2
 8004836:	3360      	adds	r3, #96	; 0x60
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7fe ffd3 	bl	80037e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004842:	bf00      	nop
 8004844:	3720      	adds	r7, #32
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b08a      	sub	sp, #40	; 0x28
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	0c5b      	lsrs	r3, r3, #17
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	091b      	lsrs	r3, r3, #4
 800487a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800487e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d004      	beq.n	8004890 <HCD_RXQLVL_IRQHandler+0x46>
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b05      	cmp	r3, #5
 800488a:	f000 80a9 	beq.w	80049e0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800488e:	e0aa      	b.n	80049e6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 80a6 	beq.w	80049e4 <HCD_RXQLVL_IRQHandler+0x19a>
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	212c      	movs	r1, #44	; 0x2c
 800489e:	fb01 f303 	mul.w	r3, r1, r3
 80048a2:	4413      	add	r3, r2
 80048a4:	3344      	adds	r3, #68	; 0x44
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 809b 	beq.w	80049e4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	212c      	movs	r1, #44	; 0x2c
 80048b4:	fb01 f303 	mul.w	r3, r1, r3
 80048b8:	4413      	add	r3, r2
 80048ba:	3350      	adds	r3, #80	; 0x50
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	441a      	add	r2, r3
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	202c      	movs	r0, #44	; 0x2c
 80048c8:	fb00 f303 	mul.w	r3, r0, r3
 80048cc:	440b      	add	r3, r1
 80048ce:	334c      	adds	r3, #76	; 0x4c
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d87a      	bhi.n	80049cc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6818      	ldr	r0, [r3, #0]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	212c      	movs	r1, #44	; 0x2c
 80048e0:	fb01 f303 	mul.w	r3, r1, r3
 80048e4:	4413      	add	r3, r2
 80048e6:	3344      	adds	r3, #68	; 0x44
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	b292      	uxth	r2, r2
 80048ee:	4619      	mov	r1, r3
 80048f0:	f003 ffa4 	bl	800883c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	212c      	movs	r1, #44	; 0x2c
 80048fa:	fb01 f303 	mul.w	r3, r1, r3
 80048fe:	4413      	add	r3, r2
 8004900:	3344      	adds	r3, #68	; 0x44
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	441a      	add	r2, r3
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	202c      	movs	r0, #44	; 0x2c
 800490e:	fb00 f303 	mul.w	r3, r0, r3
 8004912:	440b      	add	r3, r1
 8004914:	3344      	adds	r3, #68	; 0x44
 8004916:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	212c      	movs	r1, #44	; 0x2c
 800491e:	fb01 f303 	mul.w	r3, r1, r3
 8004922:	4413      	add	r3, r2
 8004924:	3350      	adds	r3, #80	; 0x50
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	441a      	add	r2, r3
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	202c      	movs	r0, #44	; 0x2c
 8004932:	fb00 f303 	mul.w	r3, r0, r3
 8004936:	440b      	add	r3, r1
 8004938:	3350      	adds	r3, #80	; 0x50
 800493a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	4413      	add	r3, r2
 8004944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	0cdb      	lsrs	r3, r3, #19
 800494c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004950:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	212c      	movs	r1, #44	; 0x2c
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	4413      	add	r3, r2
 800495e:	3340      	adds	r3, #64	; 0x40
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4293      	cmp	r3, r2
 8004968:	d13c      	bne.n	80049e4 <HCD_RXQLVL_IRQHandler+0x19a>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d039      	beq.n	80049e4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	4413      	add	r3, r2
 8004978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004986:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800498e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	4413      	add	r3, r2
 8004998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499c:	461a      	mov	r2, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	212c      	movs	r1, #44	; 0x2c
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	4413      	add	r3, r2
 80049ae:	3354      	adds	r3, #84	; 0x54
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	f083 0301 	eor.w	r3, r3, #1
 80049b6:	b2d8      	uxtb	r0, r3
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	212c      	movs	r1, #44	; 0x2c
 80049be:	fb01 f303 	mul.w	r3, r1, r3
 80049c2:	4413      	add	r3, r2
 80049c4:	3354      	adds	r3, #84	; 0x54
 80049c6:	4602      	mov	r2, r0
 80049c8:	701a      	strb	r2, [r3, #0]
      break;
 80049ca:	e00b      	b.n	80049e4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	212c      	movs	r1, #44	; 0x2c
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	4413      	add	r3, r2
 80049d8:	3360      	adds	r3, #96	; 0x60
 80049da:	2204      	movs	r2, #4
 80049dc:	701a      	strb	r2, [r3, #0]
      break;
 80049de:	e001      	b.n	80049e4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80049e0:	bf00      	nop
 80049e2:	e000      	b.n	80049e6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80049e4:	bf00      	nop
  }
}
 80049e6:	bf00      	nop
 80049e8:	3728      	adds	r7, #40	; 0x28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b086      	sub	sp, #24
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a1a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d10b      	bne.n	8004a3e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d102      	bne.n	8004a36 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7fe feb1 	bl	8003798 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f043 0302 	orr.w	r3, r3, #2
 8004a3c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d132      	bne.n	8004aae <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f043 0308 	orr.w	r3, r3, #8
 8004a4e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d126      	bne.n	8004aa8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d113      	bne.n	8004a8a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004a68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a6c:	d106      	bne.n	8004a7c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2102      	movs	r1, #2
 8004a74:	4618      	mov	r0, r3
 8004a76:	f004 f841 	bl	8008afc <USB_InitFSLSPClkSel>
 8004a7a:	e011      	b.n	8004aa0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2101      	movs	r1, #1
 8004a82:	4618      	mov	r0, r3
 8004a84:	f004 f83a 	bl	8008afc <USB_InitFSLSPClkSel>
 8004a88:	e00a      	b.n	8004aa0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d106      	bne.n	8004aa0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a98:	461a      	mov	r2, r3
 8004a9a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004a9e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7fe fe8d 	bl	80037c0 <HAL_HCD_PortEnabled_Callback>
 8004aa6:	e002      	b.n	8004aae <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7fe fe93 	bl	80037d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	d103      	bne.n	8004ac0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f043 0320 	orr.w	r3, r3, #32
 8004abe:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	6013      	str	r3, [r2, #0]
}
 8004acc:	bf00      	nop
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e12b      	b.n	8004d3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fd f90e 	bl	8001d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2224      	movs	r2, #36	; 0x24
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0201 	bic.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b38:	f001 f9fc 	bl	8005f34 <HAL_RCC_GetPCLK1Freq>
 8004b3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	4a81      	ldr	r2, [pc, #516]	; (8004d48 <HAL_I2C_Init+0x274>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d807      	bhi.n	8004b58 <HAL_I2C_Init+0x84>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4a80      	ldr	r2, [pc, #512]	; (8004d4c <HAL_I2C_Init+0x278>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	bf94      	ite	ls
 8004b50:	2301      	movls	r3, #1
 8004b52:	2300      	movhi	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	e006      	b.n	8004b66 <HAL_I2C_Init+0x92>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4a7d      	ldr	r2, [pc, #500]	; (8004d50 <HAL_I2C_Init+0x27c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	bf94      	ite	ls
 8004b60:	2301      	movls	r3, #1
 8004b62:	2300      	movhi	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e0e7      	b.n	8004d3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4a78      	ldr	r2, [pc, #480]	; (8004d54 <HAL_I2C_Init+0x280>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	0c9b      	lsrs	r3, r3, #18
 8004b78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	4a6a      	ldr	r2, [pc, #424]	; (8004d48 <HAL_I2C_Init+0x274>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d802      	bhi.n	8004ba8 <HAL_I2C_Init+0xd4>
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	e009      	b.n	8004bbc <HAL_I2C_Init+0xe8>
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004bae:	fb02 f303 	mul.w	r3, r2, r3
 8004bb2:	4a69      	ldr	r2, [pc, #420]	; (8004d58 <HAL_I2C_Init+0x284>)
 8004bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb8:	099b      	lsrs	r3, r3, #6
 8004bba:	3301      	adds	r3, #1
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6812      	ldr	r2, [r2, #0]
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	495c      	ldr	r1, [pc, #368]	; (8004d48 <HAL_I2C_Init+0x274>)
 8004bd8:	428b      	cmp	r3, r1
 8004bda:	d819      	bhi.n	8004c10 <HAL_I2C_Init+0x13c>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	1e59      	subs	r1, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bea:	1c59      	adds	r1, r3, #1
 8004bec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bf0:	400b      	ands	r3, r1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_I2C_Init+0x138>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1e59      	subs	r1, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c04:	3301      	adds	r3, #1
 8004c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c0a:	e051      	b.n	8004cb0 <HAL_I2C_Init+0x1dc>
 8004c0c:	2304      	movs	r3, #4
 8004c0e:	e04f      	b.n	8004cb0 <HAL_I2C_Init+0x1dc>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d111      	bne.n	8004c3c <HAL_I2C_Init+0x168>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1e58      	subs	r0, r3, #1
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6859      	ldr	r1, [r3, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	440b      	add	r3, r1
 8004c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e012      	b.n	8004c62 <HAL_I2C_Init+0x18e>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	1e58      	subs	r0, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6859      	ldr	r1, [r3, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	0099      	lsls	r1, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c52:	3301      	adds	r3, #1
 8004c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <HAL_I2C_Init+0x196>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e022      	b.n	8004cb0 <HAL_I2C_Init+0x1dc>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10e      	bne.n	8004c90 <HAL_I2C_Init+0x1bc>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1e58      	subs	r0, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6859      	ldr	r1, [r3, #4]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	440b      	add	r3, r1
 8004c80:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c84:	3301      	adds	r3, #1
 8004c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8e:	e00f      	b.n	8004cb0 <HAL_I2C_Init+0x1dc>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1e58      	subs	r0, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6859      	ldr	r1, [r3, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	0099      	lsls	r1, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	6809      	ldr	r1, [r1, #0]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69da      	ldr	r2, [r3, #28]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004cde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6911      	ldr	r1, [r2, #16]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	68d2      	ldr	r2, [r2, #12]
 8004cea:	4311      	orrs	r1, r2
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695a      	ldr	r2, [r3, #20]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0201 	orr.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	000186a0 	.word	0x000186a0
 8004d4c:	001e847f 	.word	0x001e847f
 8004d50:	003d08ff 	.word	0x003d08ff
 8004d54:	431bde83 	.word	0x431bde83
 8004d58:	10624dd3 	.word	0x10624dd3

08004d5c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e128      	b.n	8004fc0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a90      	ldr	r2, [pc, #576]	; (8004fc8 <HAL_I2S_Init+0x26c>)
 8004d86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7fd f80f 	bl	8001dac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2202      	movs	r2, #2
 8004d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6812      	ldr	r2, [r2, #0]
 8004da0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004da4:	f023 030f 	bic.w	r3, r3, #15
 8004da8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2202      	movs	r2, #2
 8004db0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d060      	beq.n	8004e7c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d102      	bne.n	8004dc8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004dc2:	2310      	movs	r3, #16
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	e001      	b.n	8004dcc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004dc8:	2320      	movs	r3, #32
 8004dca:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d802      	bhi.n	8004dda <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004dda:	2001      	movs	r0, #1
 8004ddc:	f001 f9e6 	bl	80061ac <HAL_RCCEx_GetPeriphCLKFreq>
 8004de0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dea:	d125      	bne.n	8004e38 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d010      	beq.n	8004e16 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dfe:	4613      	mov	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	461a      	mov	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e10:	3305      	adds	r3, #5
 8004e12:	613b      	str	r3, [r7, #16]
 8004e14:	e01f      	b.n	8004e56 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	461a      	mov	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e32:	3305      	adds	r3, #5
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	e00e      	b.n	8004e56 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	461a      	mov	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e52:	3305      	adds	r3, #5
 8004e54:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	4a5c      	ldr	r2, [pc, #368]	; (8004fcc <HAL_I2S_Init+0x270>)
 8004e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5e:	08db      	lsrs	r3, r3, #3
 8004e60:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	085b      	lsrs	r3, r3, #1
 8004e72:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	021b      	lsls	r3, r3, #8
 8004e78:	61bb      	str	r3, [r7, #24]
 8004e7a:	e003      	b.n	8004e84 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d902      	bls.n	8004e90 <HAL_I2S_Init+0x134>
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	2bff      	cmp	r3, #255	; 0xff
 8004e8e:	d907      	bls.n	8004ea0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e94:	f043 0210 	orr.w	r2, r3, #16
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e08f      	b.n	8004fc0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	ea42 0103 	orr.w	r1, r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004ebe:	f023 030f 	bic.w	r3, r3, #15
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6851      	ldr	r1, [r2, #4]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6892      	ldr	r2, [r2, #8]
 8004eca:	4311      	orrs	r1, r2
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	68d2      	ldr	r2, [r2, #12]
 8004ed0:	4311      	orrs	r1, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6992      	ldr	r2, [r2, #24]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ee2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d161      	bne.n	8004fb0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a38      	ldr	r2, [pc, #224]	; (8004fd0 <HAL_I2S_Init+0x274>)
 8004ef0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a37      	ldr	r2, [pc, #220]	; (8004fd4 <HAL_I2S_Init+0x278>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d101      	bne.n	8004f00 <HAL_I2S_Init+0x1a4>
 8004efc:	4b36      	ldr	r3, [pc, #216]	; (8004fd8 <HAL_I2S_Init+0x27c>)
 8004efe:	e001      	b.n	8004f04 <HAL_I2S_Init+0x1a8>
 8004f00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6812      	ldr	r2, [r2, #0]
 8004f0a:	4932      	ldr	r1, [pc, #200]	; (8004fd4 <HAL_I2S_Init+0x278>)
 8004f0c:	428a      	cmp	r2, r1
 8004f0e:	d101      	bne.n	8004f14 <HAL_I2S_Init+0x1b8>
 8004f10:	4a31      	ldr	r2, [pc, #196]	; (8004fd8 <HAL_I2S_Init+0x27c>)
 8004f12:	e001      	b.n	8004f18 <HAL_I2S_Init+0x1bc>
 8004f14:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004f18:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004f1c:	f023 030f 	bic.w	r3, r3, #15
 8004f20:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a2b      	ldr	r2, [pc, #172]	; (8004fd4 <HAL_I2S_Init+0x278>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d101      	bne.n	8004f30 <HAL_I2S_Init+0x1d4>
 8004f2c:	4b2a      	ldr	r3, [pc, #168]	; (8004fd8 <HAL_I2S_Init+0x27c>)
 8004f2e:	e001      	b.n	8004f34 <HAL_I2S_Init+0x1d8>
 8004f30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f34:	2202      	movs	r2, #2
 8004f36:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a25      	ldr	r2, [pc, #148]	; (8004fd4 <HAL_I2S_Init+0x278>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d101      	bne.n	8004f46 <HAL_I2S_Init+0x1ea>
 8004f42:	4b25      	ldr	r3, [pc, #148]	; (8004fd8 <HAL_I2S_Init+0x27c>)
 8004f44:	e001      	b.n	8004f4a <HAL_I2S_Init+0x1ee>
 8004f46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f56:	d003      	beq.n	8004f60 <HAL_I2S_Init+0x204>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d103      	bne.n	8004f68 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	e001      	b.n	8004f6c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004f76:	4313      	orrs	r3, r2
 8004f78:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004f80:	4313      	orrs	r3, r2
 8004f82:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	897b      	ldrh	r3, [r7, #10]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f98:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a0d      	ldr	r2, [pc, #52]	; (8004fd4 <HAL_I2S_Init+0x278>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d101      	bne.n	8004fa8 <HAL_I2S_Init+0x24c>
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <HAL_I2S_Init+0x27c>)
 8004fa6:	e001      	b.n	8004fac <HAL_I2S_Init+0x250>
 8004fa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fac:	897a      	ldrh	r2, [r7, #10]
 8004fae:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3720      	adds	r7, #32
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	080050d3 	.word	0x080050d3
 8004fcc:	cccccccd 	.word	0xcccccccd
 8004fd0:	080051e9 	.word	0x080051e9
 8004fd4:	40003800 	.word	0x40003800
 8004fd8:	40003400 	.word	0x40003400

08004fdc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	881a      	ldrh	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	1c9a      	adds	r2, r3, #2
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10e      	bne.n	800506c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800505c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff ffb8 	bl	8004fdc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800506c:	bf00      	nop
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	b292      	uxth	r2, r2
 8005088:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508e:	1c9a      	adds	r2, r3, #2
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10e      	bne.n	80050ca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050ba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7ff ff93 	bl	8004ff0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b086      	sub	sp, #24
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d13a      	bne.n	8005164 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d109      	bne.n	800510c <I2S_IRQHandler+0x3a>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005102:	2b40      	cmp	r3, #64	; 0x40
 8005104:	d102      	bne.n	800510c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff ffb4 	bl	8005074 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b40      	cmp	r3, #64	; 0x40
 8005114:	d126      	bne.n	8005164 <I2S_IRQHandler+0x92>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	2b20      	cmp	r3, #32
 8005122:	d11f      	bne.n	8005164 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005132:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005134:	2300      	movs	r3, #0
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	f043 0202 	orr.w	r2, r3, #2
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7ff ff50 	bl	8005004 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b03      	cmp	r3, #3
 800516e:	d136      	bne.n	80051de <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b02      	cmp	r3, #2
 8005178:	d109      	bne.n	800518e <I2S_IRQHandler+0xbc>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005184:	2b80      	cmp	r3, #128	; 0x80
 8005186:	d102      	bne.n	800518e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff ff45 	bl	8005018 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b08      	cmp	r3, #8
 8005196:	d122      	bne.n	80051de <I2S_IRQHandler+0x10c>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d11b      	bne.n	80051de <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051b4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80051b6:	2300      	movs	r3, #0
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d0:	f043 0204 	orr.w	r2, r3, #4
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff ff13 	bl	8005004 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051de:	bf00      	nop
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4aa2      	ldr	r2, [pc, #648]	; (8005488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d101      	bne.n	8005206 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005202:	4ba2      	ldr	r3, [pc, #648]	; (800548c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005204:	e001      	b.n	800520a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005206:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a9b      	ldr	r2, [pc, #620]	; (8005488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d101      	bne.n	8005224 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005220:	4b9a      	ldr	r3, [pc, #616]	; (800548c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005222:	e001      	b.n	8005228 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005224:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005234:	d004      	beq.n	8005240 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	f040 8099 	bne.w	8005372 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b02      	cmp	r3, #2
 8005248:	d107      	bne.n	800525a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f925 	bl	80054a4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b01      	cmp	r3, #1
 8005262:	d107      	bne.n	8005274 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f9c8 	bl	8005604 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527a:	2b40      	cmp	r3, #64	; 0x40
 800527c:	d13a      	bne.n	80052f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b00      	cmp	r3, #0
 8005286:	d035      	beq.n	80052f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a7e      	ldr	r2, [pc, #504]	; (8005488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d101      	bne.n	8005296 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005292:	4b7e      	ldr	r3, [pc, #504]	; (800548c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005294:	e001      	b.n	800529a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005296:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4979      	ldr	r1, [pc, #484]	; (8005488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80052a2:	428b      	cmp	r3, r1
 80052a4:	d101      	bne.n	80052aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80052a6:	4b79      	ldr	r3, [pc, #484]	; (800548c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80052a8:	e001      	b.n	80052ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80052aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052b2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e6:	f043 0202 	orr.w	r2, r3, #2
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7ff fe88 	bl	8005004 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	f040 80be 	bne.w	800547c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 80b8 	beq.w	800547c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800531a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a59      	ldr	r2, [pc, #356]	; (8005488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d101      	bne.n	800532a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005326:	4b59      	ldr	r3, [pc, #356]	; (800548c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005328:	e001      	b.n	800532e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800532a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4954      	ldr	r1, [pc, #336]	; (8005488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005336:	428b      	cmp	r3, r1
 8005338:	d101      	bne.n	800533e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800533a:	4b54      	ldr	r3, [pc, #336]	; (800548c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800533c:	e001      	b.n	8005342 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800533e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005342:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005346:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005348:	2300      	movs	r3, #0
 800534a:	60bb      	str	r3, [r7, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	60bb      	str	r3, [r7, #8]
 8005354:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005362:	f043 0204 	orr.w	r2, r3, #4
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7ff fe4a 	bl	8005004 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005370:	e084      	b.n	800547c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b02      	cmp	r3, #2
 800537a:	d107      	bne.n	800538c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f8be 	bl	8005508 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b01      	cmp	r3, #1
 8005394:	d107      	bne.n	80053a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f8fd 	bl	80055a0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ac:	2b40      	cmp	r3, #64	; 0x40
 80053ae:	d12f      	bne.n	8005410 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d02a      	beq.n	8005410 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80053c8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a2e      	ldr	r2, [pc, #184]	; (8005488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d101      	bne.n	80053d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80053d4:	4b2d      	ldr	r3, [pc, #180]	; (800548c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80053d6:	e001      	b.n	80053dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80053d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4929      	ldr	r1, [pc, #164]	; (8005488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80053e4:	428b      	cmp	r3, r1
 80053e6:	d101      	bne.n	80053ec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80053e8:	4b28      	ldr	r3, [pc, #160]	; (800548c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80053ea:	e001      	b.n	80053f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80053ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005402:	f043 0202 	orr.w	r2, r3, #2
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff fdfa 	bl	8005004 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b08      	cmp	r3, #8
 8005418:	d131      	bne.n	800547e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b00      	cmp	r3, #0
 8005422:	d02c      	beq.n	800547e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a17      	ldr	r2, [pc, #92]	; (8005488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d101      	bne.n	8005432 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800542e:	4b17      	ldr	r3, [pc, #92]	; (800548c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005430:	e001      	b.n	8005436 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005432:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4912      	ldr	r1, [pc, #72]	; (8005488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800543e:	428b      	cmp	r3, r1
 8005440:	d101      	bne.n	8005446 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005442:	4b12      	ldr	r3, [pc, #72]	; (800548c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005444:	e001      	b.n	800544a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005446:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800544a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800544e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800545e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546c:	f043 0204 	orr.w	r2, r3, #4
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff fdc5 	bl	8005004 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800547a:	e000      	b.n	800547e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800547c:	bf00      	nop
}
 800547e:	bf00      	nop
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40003800 	.word	0x40003800
 800548c:	40003400 	.word	0x40003400

08005490 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	1c99      	adds	r1, r3, #2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6251      	str	r1, [r2, #36]	; 0x24
 80054b6:	881a      	ldrh	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d113      	bne.n	80054fe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80054e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d106      	bne.n	80054fe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff ffc9 	bl	8005490 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80054fe:	bf00      	nop
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	1c99      	adds	r1, r3, #2
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6251      	str	r1, [r2, #36]	; 0x24
 800551a:	8819      	ldrh	r1, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a1d      	ldr	r2, [pc, #116]	; (8005598 <I2SEx_TxISR_I2SExt+0x90>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d101      	bne.n	800552a <I2SEx_TxISR_I2SExt+0x22>
 8005526:	4b1d      	ldr	r3, [pc, #116]	; (800559c <I2SEx_TxISR_I2SExt+0x94>)
 8005528:	e001      	b.n	800552e <I2SEx_TxISR_I2SExt+0x26>
 800552a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800552e:	460a      	mov	r2, r1
 8005530:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005536:	b29b      	uxth	r3, r3
 8005538:	3b01      	subs	r3, #1
 800553a:	b29a      	uxth	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d121      	bne.n	800558e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a12      	ldr	r2, [pc, #72]	; (8005598 <I2SEx_TxISR_I2SExt+0x90>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d101      	bne.n	8005558 <I2SEx_TxISR_I2SExt+0x50>
 8005554:	4b11      	ldr	r3, [pc, #68]	; (800559c <I2SEx_TxISR_I2SExt+0x94>)
 8005556:	e001      	b.n	800555c <I2SEx_TxISR_I2SExt+0x54>
 8005558:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	490d      	ldr	r1, [pc, #52]	; (8005598 <I2SEx_TxISR_I2SExt+0x90>)
 8005564:	428b      	cmp	r3, r1
 8005566:	d101      	bne.n	800556c <I2SEx_TxISR_I2SExt+0x64>
 8005568:	4b0c      	ldr	r3, [pc, #48]	; (800559c <I2SEx_TxISR_I2SExt+0x94>)
 800556a:	e001      	b.n	8005570 <I2SEx_TxISR_I2SExt+0x68>
 800556c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005570:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005574:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800557a:	b29b      	uxth	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d106      	bne.n	800558e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff ff81 	bl	8005490 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	40003800 	.word	0x40003800
 800559c:	40003400 	.word	0x40003400

080055a0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68d8      	ldr	r0, [r3, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	1c99      	adds	r1, r3, #2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80055b8:	b282      	uxth	r2, r0
 80055ba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d113      	bne.n	80055fc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055e2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff ff4a 	bl	8005490 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80055fc:	bf00      	nop
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a20      	ldr	r2, [pc, #128]	; (8005694 <I2SEx_RxISR_I2SExt+0x90>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d101      	bne.n	800561a <I2SEx_RxISR_I2SExt+0x16>
 8005616:	4b20      	ldr	r3, [pc, #128]	; (8005698 <I2SEx_RxISR_I2SExt+0x94>)
 8005618:	e001      	b.n	800561e <I2SEx_RxISR_I2SExt+0x1a>
 800561a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800561e:	68d8      	ldr	r0, [r3, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	1c99      	adds	r1, r3, #2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	62d1      	str	r1, [r2, #44]	; 0x2c
 800562a:	b282      	uxth	r2, r0
 800562c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005640:	b29b      	uxth	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d121      	bne.n	800568a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a12      	ldr	r2, [pc, #72]	; (8005694 <I2SEx_RxISR_I2SExt+0x90>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d101      	bne.n	8005654 <I2SEx_RxISR_I2SExt+0x50>
 8005650:	4b11      	ldr	r3, [pc, #68]	; (8005698 <I2SEx_RxISR_I2SExt+0x94>)
 8005652:	e001      	b.n	8005658 <I2SEx_RxISR_I2SExt+0x54>
 8005654:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	490d      	ldr	r1, [pc, #52]	; (8005694 <I2SEx_RxISR_I2SExt+0x90>)
 8005660:	428b      	cmp	r3, r1
 8005662:	d101      	bne.n	8005668 <I2SEx_RxISR_I2SExt+0x64>
 8005664:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <I2SEx_RxISR_I2SExt+0x94>)
 8005666:	e001      	b.n	800566c <I2SEx_RxISR_I2SExt+0x68>
 8005668:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800566c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005670:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005676:	b29b      	uxth	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d106      	bne.n	800568a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7ff ff03 	bl	8005490 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800568a:	bf00      	nop
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	40003800 	.word	0x40003800
 8005698:	40003400 	.word	0x40003400

0800569c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e264      	b.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d075      	beq.n	80057a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056ba:	4ba3      	ldr	r3, [pc, #652]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 030c 	and.w	r3, r3, #12
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d00c      	beq.n	80056e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056c6:	4ba0      	ldr	r3, [pc, #640]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056ce:	2b08      	cmp	r3, #8
 80056d0:	d112      	bne.n	80056f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056d2:	4b9d      	ldr	r3, [pc, #628]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056de:	d10b      	bne.n	80056f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e0:	4b99      	ldr	r3, [pc, #612]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d05b      	beq.n	80057a4 <HAL_RCC_OscConfig+0x108>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d157      	bne.n	80057a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e23f      	b.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005700:	d106      	bne.n	8005710 <HAL_RCC_OscConfig+0x74>
 8005702:	4b91      	ldr	r3, [pc, #580]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a90      	ldr	r2, [pc, #576]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	e01d      	b.n	800574c <HAL_RCC_OscConfig+0xb0>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005718:	d10c      	bne.n	8005734 <HAL_RCC_OscConfig+0x98>
 800571a:	4b8b      	ldr	r3, [pc, #556]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a8a      	ldr	r2, [pc, #552]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	4b88      	ldr	r3, [pc, #544]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a87      	ldr	r2, [pc, #540]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 800572c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	e00b      	b.n	800574c <HAL_RCC_OscConfig+0xb0>
 8005734:	4b84      	ldr	r3, [pc, #528]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a83      	ldr	r2, [pc, #524]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 800573a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	4b81      	ldr	r3, [pc, #516]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a80      	ldr	r2, [pc, #512]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800574a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d013      	beq.n	800577c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005754:	f7fc ffa2 	bl	800269c <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800575c:	f7fc ff9e 	bl	800269c <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b64      	cmp	r3, #100	; 0x64
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e204      	b.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800576e:	4b76      	ldr	r3, [pc, #472]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0f0      	beq.n	800575c <HAL_RCC_OscConfig+0xc0>
 800577a:	e014      	b.n	80057a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577c:	f7fc ff8e 	bl	800269c <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005784:	f7fc ff8a 	bl	800269c <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b64      	cmp	r3, #100	; 0x64
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e1f0      	b.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005796:	4b6c      	ldr	r3, [pc, #432]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCC_OscConfig+0xe8>
 80057a2:	e000      	b.n	80057a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d063      	beq.n	800587a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057b2:	4b65      	ldr	r3, [pc, #404]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 030c 	and.w	r3, r3, #12
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00b      	beq.n	80057d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057be:	4b62      	ldr	r3, [pc, #392]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d11c      	bne.n	8005804 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057ca:	4b5f      	ldr	r3, [pc, #380]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d116      	bne.n	8005804 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057d6:	4b5c      	ldr	r3, [pc, #368]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d005      	beq.n	80057ee <HAL_RCC_OscConfig+0x152>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d001      	beq.n	80057ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e1c4      	b.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ee:	4b56      	ldr	r3, [pc, #344]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	4952      	ldr	r1, [pc, #328]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005802:	e03a      	b.n	800587a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d020      	beq.n	800584e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800580c:	4b4f      	ldr	r3, [pc, #316]	; (800594c <HAL_RCC_OscConfig+0x2b0>)
 800580e:	2201      	movs	r2, #1
 8005810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005812:	f7fc ff43 	bl	800269c <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800581a:	f7fc ff3f 	bl	800269c <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e1a5      	b.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582c:	4b46      	ldr	r3, [pc, #280]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0f0      	beq.n	800581a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005838:	4b43      	ldr	r3, [pc, #268]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	4940      	ldr	r1, [pc, #256]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005848:	4313      	orrs	r3, r2
 800584a:	600b      	str	r3, [r1, #0]
 800584c:	e015      	b.n	800587a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800584e:	4b3f      	ldr	r3, [pc, #252]	; (800594c <HAL_RCC_OscConfig+0x2b0>)
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005854:	f7fc ff22 	bl	800269c <HAL_GetTick>
 8005858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800585c:	f7fc ff1e 	bl	800269c <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e184      	b.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800586e:	4b36      	ldr	r3, [pc, #216]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f0      	bne.n	800585c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0308 	and.w	r3, r3, #8
 8005882:	2b00      	cmp	r3, #0
 8005884:	d030      	beq.n	80058e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d016      	beq.n	80058bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800588e:	4b30      	ldr	r3, [pc, #192]	; (8005950 <HAL_RCC_OscConfig+0x2b4>)
 8005890:	2201      	movs	r2, #1
 8005892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005894:	f7fc ff02 	bl	800269c <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800589c:	f7fc fefe 	bl	800269c <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e164      	b.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ae:	4b26      	ldr	r3, [pc, #152]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80058b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0f0      	beq.n	800589c <HAL_RCC_OscConfig+0x200>
 80058ba:	e015      	b.n	80058e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058bc:	4b24      	ldr	r3, [pc, #144]	; (8005950 <HAL_RCC_OscConfig+0x2b4>)
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058c2:	f7fc feeb 	bl	800269c <HAL_GetTick>
 80058c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058c8:	e008      	b.n	80058dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058ca:	f7fc fee7 	bl	800269c <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e14d      	b.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058dc:	4b1a      	ldr	r3, [pc, #104]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80058de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1f0      	bne.n	80058ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 80a0 	beq.w	8005a36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058f6:	2300      	movs	r3, #0
 80058f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058fa:	4b13      	ldr	r3, [pc, #76]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10f      	bne.n	8005926 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005906:	2300      	movs	r3, #0
 8005908:	60bb      	str	r3, [r7, #8]
 800590a:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	4a0e      	ldr	r2, [pc, #56]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005914:	6413      	str	r3, [r2, #64]	; 0x40
 8005916:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591e:	60bb      	str	r3, [r7, #8]
 8005920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005922:	2301      	movs	r3, #1
 8005924:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005926:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <HAL_RCC_OscConfig+0x2b8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592e:	2b00      	cmp	r3, #0
 8005930:	d121      	bne.n	8005976 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005932:	4b08      	ldr	r3, [pc, #32]	; (8005954 <HAL_RCC_OscConfig+0x2b8>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a07      	ldr	r2, [pc, #28]	; (8005954 <HAL_RCC_OscConfig+0x2b8>)
 8005938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800593c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800593e:	f7fc fead 	bl	800269c <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005944:	e011      	b.n	800596a <HAL_RCC_OscConfig+0x2ce>
 8005946:	bf00      	nop
 8005948:	40023800 	.word	0x40023800
 800594c:	42470000 	.word	0x42470000
 8005950:	42470e80 	.word	0x42470e80
 8005954:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005958:	f7fc fea0 	bl	800269c <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e106      	b.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800596a:	4b85      	ldr	r3, [pc, #532]	; (8005b80 <HAL_RCC_OscConfig+0x4e4>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f0      	beq.n	8005958 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d106      	bne.n	800598c <HAL_RCC_OscConfig+0x2f0>
 800597e:	4b81      	ldr	r3, [pc, #516]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 8005980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005982:	4a80      	ldr	r2, [pc, #512]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	6713      	str	r3, [r2, #112]	; 0x70
 800598a:	e01c      	b.n	80059c6 <HAL_RCC_OscConfig+0x32a>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2b05      	cmp	r3, #5
 8005992:	d10c      	bne.n	80059ae <HAL_RCC_OscConfig+0x312>
 8005994:	4b7b      	ldr	r3, [pc, #492]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 8005996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005998:	4a7a      	ldr	r2, [pc, #488]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 800599a:	f043 0304 	orr.w	r3, r3, #4
 800599e:	6713      	str	r3, [r2, #112]	; 0x70
 80059a0:	4b78      	ldr	r3, [pc, #480]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 80059a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a4:	4a77      	ldr	r2, [pc, #476]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 80059a6:	f043 0301 	orr.w	r3, r3, #1
 80059aa:	6713      	str	r3, [r2, #112]	; 0x70
 80059ac:	e00b      	b.n	80059c6 <HAL_RCC_OscConfig+0x32a>
 80059ae:	4b75      	ldr	r3, [pc, #468]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 80059b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b2:	4a74      	ldr	r2, [pc, #464]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 80059b4:	f023 0301 	bic.w	r3, r3, #1
 80059b8:	6713      	str	r3, [r2, #112]	; 0x70
 80059ba:	4b72      	ldr	r3, [pc, #456]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 80059bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059be:	4a71      	ldr	r2, [pc, #452]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 80059c0:	f023 0304 	bic.w	r3, r3, #4
 80059c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d015      	beq.n	80059fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ce:	f7fc fe65 	bl	800269c <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d4:	e00a      	b.n	80059ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059d6:	f7fc fe61 	bl	800269c <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e0c5      	b.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ec:	4b65      	ldr	r3, [pc, #404]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 80059ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0ee      	beq.n	80059d6 <HAL_RCC_OscConfig+0x33a>
 80059f8:	e014      	b.n	8005a24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059fa:	f7fc fe4f 	bl	800269c <HAL_GetTick>
 80059fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a00:	e00a      	b.n	8005a18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a02:	f7fc fe4b 	bl	800269c <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e0af      	b.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a18:	4b5a      	ldr	r3, [pc, #360]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 8005a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1ee      	bne.n	8005a02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d105      	bne.n	8005a36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a2a:	4b56      	ldr	r3, [pc, #344]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	4a55      	ldr	r2, [pc, #340]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 8005a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 809b 	beq.w	8005b76 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a40:	4b50      	ldr	r3, [pc, #320]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 030c 	and.w	r3, r3, #12
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d05c      	beq.n	8005b06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d141      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a54:	4b4c      	ldr	r3, [pc, #304]	; (8005b88 <HAL_RCC_OscConfig+0x4ec>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a5a:	f7fc fe1f 	bl	800269c <HAL_GetTick>
 8005a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a60:	e008      	b.n	8005a74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a62:	f7fc fe1b 	bl	800269c <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d901      	bls.n	8005a74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e081      	b.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a74:	4b43      	ldr	r3, [pc, #268]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1f0      	bne.n	8005a62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69da      	ldr	r2, [r3, #28]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	019b      	lsls	r3, r3, #6
 8005a90:	431a      	orrs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a96:	085b      	lsrs	r3, r3, #1
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	041b      	lsls	r3, r3, #16
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	061b      	lsls	r3, r3, #24
 8005aa4:	4937      	ldr	r1, [pc, #220]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005aaa:	4b37      	ldr	r3, [pc, #220]	; (8005b88 <HAL_RCC_OscConfig+0x4ec>)
 8005aac:	2201      	movs	r2, #1
 8005aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab0:	f7fc fdf4 	bl	800269c <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ab8:	f7fc fdf0 	bl	800269c <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e056      	b.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aca:	4b2e      	ldr	r3, [pc, #184]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0f0      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x41c>
 8005ad6:	e04e      	b.n	8005b76 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ad8:	4b2b      	ldr	r3, [pc, #172]	; (8005b88 <HAL_RCC_OscConfig+0x4ec>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ade:	f7fc fddd 	bl	800269c <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ae6:	f7fc fdd9 	bl	800269c <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e03f      	b.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af8:	4b22      	ldr	r3, [pc, #136]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1f0      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x44a>
 8005b04:	e037      	b.n	8005b76 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e032      	b.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b12:	4b1c      	ldr	r3, [pc, #112]	; (8005b84 <HAL_RCC_OscConfig+0x4e8>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d028      	beq.n	8005b72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d121      	bne.n	8005b72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d11a      	bne.n	8005b72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b42:	4013      	ands	r3, r2
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b48:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d111      	bne.n	8005b72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b58:	085b      	lsrs	r3, r3, #1
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d107      	bne.n	8005b72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d001      	beq.n	8005b76 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40007000 	.word	0x40007000
 8005b84:	40023800 	.word	0x40023800
 8005b88:	42470060 	.word	0x42470060

08005b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0cc      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ba0:	4b68      	ldr	r3, [pc, #416]	; (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d90c      	bls.n	8005bc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bae:	4b65      	ldr	r3, [pc, #404]	; (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb6:	4b63      	ldr	r3, [pc, #396]	; (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d001      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e0b8      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d020      	beq.n	8005c16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005be0:	4b59      	ldr	r3, [pc, #356]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	4a58      	ldr	r2, [pc, #352]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005be6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bf8:	4b53      	ldr	r3, [pc, #332]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	4a52      	ldr	r2, [pc, #328]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c04:	4b50      	ldr	r3, [pc, #320]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	494d      	ldr	r1, [pc, #308]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d044      	beq.n	8005cac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d107      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c2a:	4b47      	ldr	r3, [pc, #284]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d119      	bne.n	8005c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e07f      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d003      	beq.n	8005c4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d107      	bne.n	8005c5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c4a:	4b3f      	ldr	r3, [pc, #252]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d109      	bne.n	8005c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e06f      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c5a:	4b3b      	ldr	r3, [pc, #236]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e067      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c6a:	4b37      	ldr	r3, [pc, #220]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f023 0203 	bic.w	r2, r3, #3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	4934      	ldr	r1, [pc, #208]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c7c:	f7fc fd0e 	bl	800269c <HAL_GetTick>
 8005c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c82:	e00a      	b.n	8005c9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c84:	f7fc fd0a 	bl	800269c <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e04f      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c9a:	4b2b      	ldr	r3, [pc, #172]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 020c 	and.w	r2, r3, #12
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d1eb      	bne.n	8005c84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cac:	4b25      	ldr	r3, [pc, #148]	; (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d20c      	bcs.n	8005cd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cba:	4b22      	ldr	r3, [pc, #136]	; (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	b2d2      	uxtb	r2, r2
 8005cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc2:	4b20      	ldr	r3, [pc, #128]	; (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d001      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e032      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ce0:	4b19      	ldr	r3, [pc, #100]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	4916      	ldr	r1, [pc, #88]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d009      	beq.n	8005d12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cfe:	4b12      	ldr	r3, [pc, #72]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	490e      	ldr	r1, [pc, #56]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d12:	f000 f821 	bl	8005d58 <HAL_RCC_GetSysClockFreq>
 8005d16:	4602      	mov	r2, r0
 8005d18:	4b0b      	ldr	r3, [pc, #44]	; (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	091b      	lsrs	r3, r3, #4
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	490a      	ldr	r1, [pc, #40]	; (8005d4c <HAL_RCC_ClockConfig+0x1c0>)
 8005d24:	5ccb      	ldrb	r3, [r1, r3]
 8005d26:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2a:	4a09      	ldr	r2, [pc, #36]	; (8005d50 <HAL_RCC_ClockConfig+0x1c4>)
 8005d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d2e:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <HAL_RCC_ClockConfig+0x1c8>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fc fad0 	bl	80022d8 <HAL_InitTick>

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	40023c00 	.word	0x40023c00
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	0801930c 	.word	0x0801930c
 8005d50:	20000004 	.word	0x20000004
 8005d54:	20000008 	.word	0x20000008

08005d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	607b      	str	r3, [r7, #4]
 8005d64:	2300      	movs	r3, #0
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	2300      	movs	r3, #0
 8005d6a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d70:	4b67      	ldr	r3, [pc, #412]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f003 030c 	and.w	r3, r3, #12
 8005d78:	2b08      	cmp	r3, #8
 8005d7a:	d00d      	beq.n	8005d98 <HAL_RCC_GetSysClockFreq+0x40>
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	f200 80bd 	bhi.w	8005efc <HAL_RCC_GetSysClockFreq+0x1a4>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <HAL_RCC_GetSysClockFreq+0x34>
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d003      	beq.n	8005d92 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d8a:	e0b7      	b.n	8005efc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d8c:	4b61      	ldr	r3, [pc, #388]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005d8e:	60bb      	str	r3, [r7, #8]
       break;
 8005d90:	e0b7      	b.n	8005f02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d92:	4b61      	ldr	r3, [pc, #388]	; (8005f18 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005d94:	60bb      	str	r3, [r7, #8]
      break;
 8005d96:	e0b4      	b.n	8005f02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d98:	4b5d      	ldr	r3, [pc, #372]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005da0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005da2:	4b5b      	ldr	r3, [pc, #364]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d04d      	beq.n	8005e4a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dae:	4b58      	ldr	r3, [pc, #352]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	099b      	lsrs	r3, r3, #6
 8005db4:	461a      	mov	r2, r3
 8005db6:	f04f 0300 	mov.w	r3, #0
 8005dba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005dbe:	f04f 0100 	mov.w	r1, #0
 8005dc2:	ea02 0800 	and.w	r8, r2, r0
 8005dc6:	ea03 0901 	and.w	r9, r3, r1
 8005dca:	4640      	mov	r0, r8
 8005dcc:	4649      	mov	r1, r9
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	014b      	lsls	r3, r1, #5
 8005dd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ddc:	0142      	lsls	r2, r0, #5
 8005dde:	4610      	mov	r0, r2
 8005de0:	4619      	mov	r1, r3
 8005de2:	ebb0 0008 	subs.w	r0, r0, r8
 8005de6:	eb61 0109 	sbc.w	r1, r1, r9
 8005dea:	f04f 0200 	mov.w	r2, #0
 8005dee:	f04f 0300 	mov.w	r3, #0
 8005df2:	018b      	lsls	r3, r1, #6
 8005df4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005df8:	0182      	lsls	r2, r0, #6
 8005dfa:	1a12      	subs	r2, r2, r0
 8005dfc:	eb63 0301 	sbc.w	r3, r3, r1
 8005e00:	f04f 0000 	mov.w	r0, #0
 8005e04:	f04f 0100 	mov.w	r1, #0
 8005e08:	00d9      	lsls	r1, r3, #3
 8005e0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e0e:	00d0      	lsls	r0, r2, #3
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	eb12 0208 	adds.w	r2, r2, r8
 8005e18:	eb43 0309 	adc.w	r3, r3, r9
 8005e1c:	f04f 0000 	mov.w	r0, #0
 8005e20:	f04f 0100 	mov.w	r1, #0
 8005e24:	0259      	lsls	r1, r3, #9
 8005e26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005e2a:	0250      	lsls	r0, r2, #9
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4610      	mov	r0, r2
 8005e32:	4619      	mov	r1, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	461a      	mov	r2, r3
 8005e38:	f04f 0300 	mov.w	r3, #0
 8005e3c:	f7fa fa80 	bl	8000340 <__aeabi_uldivmod>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4613      	mov	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	e04a      	b.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e4a:	4b31      	ldr	r3, [pc, #196]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	099b      	lsrs	r3, r3, #6
 8005e50:	461a      	mov	r2, r3
 8005e52:	f04f 0300 	mov.w	r3, #0
 8005e56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005e5a:	f04f 0100 	mov.w	r1, #0
 8005e5e:	ea02 0400 	and.w	r4, r2, r0
 8005e62:	ea03 0501 	and.w	r5, r3, r1
 8005e66:	4620      	mov	r0, r4
 8005e68:	4629      	mov	r1, r5
 8005e6a:	f04f 0200 	mov.w	r2, #0
 8005e6e:	f04f 0300 	mov.w	r3, #0
 8005e72:	014b      	lsls	r3, r1, #5
 8005e74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e78:	0142      	lsls	r2, r0, #5
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	1b00      	subs	r0, r0, r4
 8005e80:	eb61 0105 	sbc.w	r1, r1, r5
 8005e84:	f04f 0200 	mov.w	r2, #0
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	018b      	lsls	r3, r1, #6
 8005e8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005e92:	0182      	lsls	r2, r0, #6
 8005e94:	1a12      	subs	r2, r2, r0
 8005e96:	eb63 0301 	sbc.w	r3, r3, r1
 8005e9a:	f04f 0000 	mov.w	r0, #0
 8005e9e:	f04f 0100 	mov.w	r1, #0
 8005ea2:	00d9      	lsls	r1, r3, #3
 8005ea4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ea8:	00d0      	lsls	r0, r2, #3
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	1912      	adds	r2, r2, r4
 8005eb0:	eb45 0303 	adc.w	r3, r5, r3
 8005eb4:	f04f 0000 	mov.w	r0, #0
 8005eb8:	f04f 0100 	mov.w	r1, #0
 8005ebc:	0299      	lsls	r1, r3, #10
 8005ebe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005ec2:	0290      	lsls	r0, r2, #10
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4619      	mov	r1, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	f7fa fa34 	bl	8000340 <__aeabi_uldivmod>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4613      	mov	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	0c1b      	lsrs	r3, r3, #16
 8005ee6:	f003 0303 	and.w	r3, r3, #3
 8005eea:	3301      	adds	r3, #1
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef8:	60bb      	str	r3, [r7, #8]
      break;
 8005efa:	e002      	b.n	8005f02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005efc:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005efe:	60bb      	str	r3, [r7, #8]
      break;
 8005f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f02:	68bb      	ldr	r3, [r7, #8]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005f0e:	bf00      	nop
 8005f10:	40023800 	.word	0x40023800
 8005f14:	00f42400 	.word	0x00f42400
 8005f18:	007a1200 	.word	0x007a1200

08005f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f20:	4b03      	ldr	r3, [pc, #12]	; (8005f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f22:	681b      	ldr	r3, [r3, #0]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	20000004 	.word	0x20000004

08005f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f38:	f7ff fff0 	bl	8005f1c <HAL_RCC_GetHCLKFreq>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	0a9b      	lsrs	r3, r3, #10
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	4903      	ldr	r1, [pc, #12]	; (8005f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f4a:	5ccb      	ldrb	r3, [r1, r3]
 8005f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40023800 	.word	0x40023800
 8005f58:	0801931c 	.word	0x0801931c

08005f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f60:	f7ff ffdc 	bl	8005f1c <HAL_RCC_GetHCLKFreq>
 8005f64:	4602      	mov	r2, r0
 8005f66:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	0b5b      	lsrs	r3, r3, #13
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	4903      	ldr	r1, [pc, #12]	; (8005f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f72:	5ccb      	ldrb	r3, [r1, r3]
 8005f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	40023800 	.word	0x40023800
 8005f80:	0801931c 	.word	0x0801931c

08005f84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	220f      	movs	r2, #15
 8005f92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f94:	4b12      	ldr	r3, [pc, #72]	; (8005fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f003 0203 	and.w	r2, r3, #3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005fa0:	4b0f      	ldr	r3, [pc, #60]	; (8005fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005fac:	4b0c      	ldr	r3, [pc, #48]	; (8005fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005fb8:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	08db      	lsrs	r3, r3, #3
 8005fbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005fc6:	4b07      	ldr	r3, [pc, #28]	; (8005fe4 <HAL_RCC_GetClockConfig+0x60>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0207 	and.w	r2, r3, #7
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	601a      	str	r2, [r3, #0]
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40023800 	.word	0x40023800
 8005fe4:	40023c00 	.word	0x40023c00

08005fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d105      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800600c:	2b00      	cmp	r3, #0
 800600e:	d035      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006010:	4b62      	ldr	r3, [pc, #392]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006016:	f7fc fb41 	bl	800269c <HAL_GetTick>
 800601a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800601c:	e008      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800601e:	f7fc fb3d 	bl	800269c <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b02      	cmp	r3, #2
 800602a:	d901      	bls.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e0b0      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006030:	4b5b      	ldr	r3, [pc, #364]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1f0      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	019a      	lsls	r2, r3, #6
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	071b      	lsls	r3, r3, #28
 8006048:	4955      	ldr	r1, [pc, #340]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800604a:	4313      	orrs	r3, r2
 800604c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006050:	4b52      	ldr	r3, [pc, #328]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006052:	2201      	movs	r2, #1
 8006054:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006056:	f7fc fb21 	bl	800269c <HAL_GetTick>
 800605a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800605c:	e008      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800605e:	f7fc fb1d 	bl	800269c <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e090      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006070:	4b4b      	ldr	r3, [pc, #300]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d0f0      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 8083 	beq.w	8006190 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	4b44      	ldr	r3, [pc, #272]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006092:	4a43      	ldr	r2, [pc, #268]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006098:	6413      	str	r3, [r2, #64]	; 0x40
 800609a:	4b41      	ldr	r3, [pc, #260]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80060a6:	4b3f      	ldr	r3, [pc, #252]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a3e      	ldr	r2, [pc, #248]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060b2:	f7fc faf3 	bl	800269c <HAL_GetTick>
 80060b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060b8:	e008      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80060ba:	f7fc faef 	bl	800269c <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d901      	bls.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e062      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060cc:	4b35      	ldr	r3, [pc, #212]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d0f0      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060d8:	4b31      	ldr	r3, [pc, #196]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d02f      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d028      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060f6:	4b2a      	ldr	r3, [pc, #168]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006100:	4b29      	ldr	r3, [pc, #164]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006102:	2201      	movs	r2, #1
 8006104:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006106:	4b28      	ldr	r3, [pc, #160]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800610c:	4a24      	ldr	r2, [pc, #144]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006112:	4b23      	ldr	r3, [pc, #140]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b01      	cmp	r3, #1
 800611c:	d114      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800611e:	f7fc fabd 	bl	800269c <HAL_GetTick>
 8006122:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006124:	e00a      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006126:	f7fc fab9 	bl	800269c <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	f241 3288 	movw	r2, #5000	; 0x1388
 8006134:	4293      	cmp	r3, r2
 8006136:	d901      	bls.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e02a      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800613c:	4b18      	ldr	r3, [pc, #96]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800613e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d0ee      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006150:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006154:	d10d      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006156:	4b12      	ldr	r3, [pc, #72]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800616a:	490d      	ldr	r1, [pc, #52]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800616c:	4313      	orrs	r3, r2
 800616e:	608b      	str	r3, [r1, #8]
 8006170:	e005      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006172:	4b0b      	ldr	r3, [pc, #44]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	4a0a      	ldr	r2, [pc, #40]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006178:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800617c:	6093      	str	r3, [r2, #8]
 800617e:	4b08      	ldr	r3, [pc, #32]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006180:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800618a:	4905      	ldr	r1, [pc, #20]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800618c:	4313      	orrs	r3, r2
 800618e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	42470068 	.word	0x42470068
 80061a0:	40023800 	.word	0x40023800
 80061a4:	40007000 	.word	0x40007000
 80061a8:	42470e40 	.word	0x42470e40

080061ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d13e      	bne.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80061ca:	4b23      	ldr	r3, [pc, #140]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d005      	beq.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d12f      	bne.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80061e0:	4b1e      	ldr	r3, [pc, #120]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061e2:	617b      	str	r3, [r7, #20]
          break;
 80061e4:	e02f      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80061e6:	4b1c      	ldr	r3, [pc, #112]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061f2:	d108      	bne.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80061f4:	4b18      	ldr	r3, [pc, #96]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061fc:	4a18      	ldr	r2, [pc, #96]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80061fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006202:	613b      	str	r3, [r7, #16]
 8006204:	e007      	b.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006206:	4b14      	ldr	r3, [pc, #80]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800620e:	4a15      	ldr	r2, [pc, #84]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006210:	fbb2 f3f3 	udiv	r3, r2, r3
 8006214:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006216:	4b10      	ldr	r3, [pc, #64]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800621c:	099b      	lsrs	r3, r3, #6
 800621e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	fb02 f303 	mul.w	r3, r2, r3
 8006228:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800622a:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800622c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006230:	0f1b      	lsrs	r3, r3, #28
 8006232:	f003 0307 	and.w	r3, r3, #7
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	fbb2 f3f3 	udiv	r3, r2, r3
 800623c:	617b      	str	r3, [r7, #20]
          break;
 800623e:	e002      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	617b      	str	r3, [r7, #20]
          break;
 8006244:	bf00      	nop
        }
      }
      break;
 8006246:	bf00      	nop
    }
  }
  return frequency;
 8006248:	697b      	ldr	r3, [r7, #20]
}
 800624a:	4618      	mov	r0, r3
 800624c:	371c      	adds	r7, #28
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	40023800 	.word	0x40023800
 800625c:	00bb8000 	.word	0x00bb8000
 8006260:	007a1200 	.word	0x007a1200
 8006264:	00f42400 	.word	0x00f42400

08006268 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e07b      	b.n	8006372 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	2b00      	cmp	r3, #0
 8006280:	d108      	bne.n	8006294 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800628a:	d009      	beq.n	80062a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	61da      	str	r2, [r3, #28]
 8006292:	e005      	b.n	80062a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d106      	bne.n	80062c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7fb fdf6 	bl	8001eac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062e8:	431a      	orrs	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006324:	ea42 0103 	orr.w	r1, r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	0c1b      	lsrs	r3, r3, #16
 800633e:	f003 0104 	and.w	r1, r3, #4
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006346:	f003 0210 	and.w	r2, r3, #16
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69da      	ldr	r2, [r3, #28]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006360:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b082      	sub	sp, #8
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e041      	b.n	8006410 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d106      	bne.n	80063a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7fb fdcb 	bl	8001f3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2202      	movs	r2, #2
 80063aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	3304      	adds	r3, #4
 80063b6:	4619      	mov	r1, r3
 80063b8:	4610      	mov	r0, r2
 80063ba:	f000 fbb1 	bl	8006b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b01      	cmp	r3, #1
 800642a:	d001      	beq.n	8006430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e04e      	b.n	80064ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0201 	orr.w	r2, r2, #1
 8006446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a23      	ldr	r2, [pc, #140]	; (80064dc <HAL_TIM_Base_Start_IT+0xc4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d022      	beq.n	8006498 <HAL_TIM_Base_Start_IT+0x80>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645a:	d01d      	beq.n	8006498 <HAL_TIM_Base_Start_IT+0x80>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a1f      	ldr	r2, [pc, #124]	; (80064e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d018      	beq.n	8006498 <HAL_TIM_Base_Start_IT+0x80>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a1e      	ldr	r2, [pc, #120]	; (80064e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d013      	beq.n	8006498 <HAL_TIM_Base_Start_IT+0x80>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a1c      	ldr	r2, [pc, #112]	; (80064e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d00e      	beq.n	8006498 <HAL_TIM_Base_Start_IT+0x80>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1b      	ldr	r2, [pc, #108]	; (80064ec <HAL_TIM_Base_Start_IT+0xd4>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d009      	beq.n	8006498 <HAL_TIM_Base_Start_IT+0x80>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a19      	ldr	r2, [pc, #100]	; (80064f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d004      	beq.n	8006498 <HAL_TIM_Base_Start_IT+0x80>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a18      	ldr	r2, [pc, #96]	; (80064f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d111      	bne.n	80064bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 0307 	and.w	r3, r3, #7
 80064a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b06      	cmp	r3, #6
 80064a8:	d010      	beq.n	80064cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f042 0201 	orr.w	r2, r2, #1
 80064b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ba:	e007      	b.n	80064cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0201 	orr.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	40010000 	.word	0x40010000
 80064e0:	40000400 	.word	0x40000400
 80064e4:	40000800 	.word	0x40000800
 80064e8:	40000c00 	.word	0x40000c00
 80064ec:	40010400 	.word	0x40010400
 80064f0:	40014000 	.word	0x40014000
 80064f4:	40001800 	.word	0x40001800

080064f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e041      	b.n	800658e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d106      	bne.n	8006524 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f839 	bl	8006596 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3304      	adds	r3, #4
 8006534:	4619      	mov	r1, r3
 8006536:	4610      	mov	r0, r2
 8006538:	f000 faf2 	bl	8006b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006596:	b480      	push	{r7}
 8006598:	b083      	sub	sp, #12
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b082      	sub	sp, #8
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d122      	bne.n	8006606 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d11b      	bne.n	8006606 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f06f 0202 	mvn.w	r2, #2
 80065d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	f003 0303 	and.w	r3, r3, #3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fa78 	bl	8006ae2 <HAL_TIM_IC_CaptureCallback>
 80065f2:	e005      	b.n	8006600 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fa6a 	bl	8006ace <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fa7b 	bl	8006af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b04      	cmp	r3, #4
 8006612:	d122      	bne.n	800665a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f003 0304 	and.w	r3, r3, #4
 800661e:	2b04      	cmp	r3, #4
 8006620:	d11b      	bne.n	800665a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f06f 0204 	mvn.w	r2, #4
 800662a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2202      	movs	r2, #2
 8006630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fa4e 	bl	8006ae2 <HAL_TIM_IC_CaptureCallback>
 8006646:	e005      	b.n	8006654 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fa40 	bl	8006ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fa51 	bl	8006af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	f003 0308 	and.w	r3, r3, #8
 8006664:	2b08      	cmp	r3, #8
 8006666:	d122      	bne.n	80066ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f003 0308 	and.w	r3, r3, #8
 8006672:	2b08      	cmp	r3, #8
 8006674:	d11b      	bne.n	80066ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f06f 0208 	mvn.w	r2, #8
 800667e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2204      	movs	r2, #4
 8006684:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	f003 0303 	and.w	r3, r3, #3
 8006690:	2b00      	cmp	r3, #0
 8006692:	d003      	beq.n	800669c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fa24 	bl	8006ae2 <HAL_TIM_IC_CaptureCallback>
 800669a:	e005      	b.n	80066a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fa16 	bl	8006ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fa27 	bl	8006af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	f003 0310 	and.w	r3, r3, #16
 80066b8:	2b10      	cmp	r3, #16
 80066ba:	d122      	bne.n	8006702 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f003 0310 	and.w	r3, r3, #16
 80066c6:	2b10      	cmp	r3, #16
 80066c8:	d11b      	bne.n	8006702 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f06f 0210 	mvn.w	r2, #16
 80066d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2208      	movs	r2, #8
 80066d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f9fa 	bl	8006ae2 <HAL_TIM_IC_CaptureCallback>
 80066ee:	e005      	b.n	80066fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f9ec 	bl	8006ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f9fd 	bl	8006af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b01      	cmp	r3, #1
 800670e:	d10e      	bne.n	800672e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b01      	cmp	r3, #1
 800671c:	d107      	bne.n	800672e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f06f 0201 	mvn.w	r2, #1
 8006726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7fb f95f 	bl	80019ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006738:	2b80      	cmp	r3, #128	; 0x80
 800673a:	d10e      	bne.n	800675a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006746:	2b80      	cmp	r3, #128	; 0x80
 8006748:	d107      	bne.n	800675a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fda5 	bl	80072a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006764:	2b40      	cmp	r3, #64	; 0x40
 8006766:	d10e      	bne.n	8006786 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006772:	2b40      	cmp	r3, #64	; 0x40
 8006774:	d107      	bne.n	8006786 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800677e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f9c2 	bl	8006b0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	f003 0320 	and.w	r3, r3, #32
 8006790:	2b20      	cmp	r3, #32
 8006792:	d10e      	bne.n	80067b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b20      	cmp	r3, #32
 80067a0:	d107      	bne.n	80067b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f06f 0220 	mvn.w	r2, #32
 80067aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fd6f 	bl	8007290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067b2:	bf00      	nop
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
	...

080067bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067c8:	2300      	movs	r3, #0
 80067ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d101      	bne.n	80067da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067d6:	2302      	movs	r3, #2
 80067d8:	e0ae      	b.n	8006938 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b0c      	cmp	r3, #12
 80067e6:	f200 809f 	bhi.w	8006928 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80067ea:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f0:	08006825 	.word	0x08006825
 80067f4:	08006929 	.word	0x08006929
 80067f8:	08006929 	.word	0x08006929
 80067fc:	08006929 	.word	0x08006929
 8006800:	08006865 	.word	0x08006865
 8006804:	08006929 	.word	0x08006929
 8006808:	08006929 	.word	0x08006929
 800680c:	08006929 	.word	0x08006929
 8006810:	080068a7 	.word	0x080068a7
 8006814:	08006929 	.word	0x08006929
 8006818:	08006929 	.word	0x08006929
 800681c:	08006929 	.word	0x08006929
 8006820:	080068e7 	.word	0x080068e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	4618      	mov	r0, r3
 800682c:	f000 fa18 	bl	8006c60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699a      	ldr	r2, [r3, #24]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f042 0208 	orr.w	r2, r2, #8
 800683e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699a      	ldr	r2, [r3, #24]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0204 	bic.w	r2, r2, #4
 800684e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6999      	ldr	r1, [r3, #24]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	691a      	ldr	r2, [r3, #16]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	619a      	str	r2, [r3, #24]
      break;
 8006862:	e064      	b.n	800692e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fa68 	bl	8006d40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800687e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699a      	ldr	r2, [r3, #24]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800688e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6999      	ldr	r1, [r3, #24]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	021a      	lsls	r2, r3, #8
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	619a      	str	r2, [r3, #24]
      break;
 80068a4:	e043      	b.n	800692e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68b9      	ldr	r1, [r7, #8]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 fabd 	bl	8006e2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69da      	ldr	r2, [r3, #28]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f042 0208 	orr.w	r2, r2, #8
 80068c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0204 	bic.w	r2, r2, #4
 80068d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69d9      	ldr	r1, [r3, #28]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	61da      	str	r2, [r3, #28]
      break;
 80068e4:	e023      	b.n	800692e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68b9      	ldr	r1, [r7, #8]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fb11 	bl	8006f14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69da      	ldr	r2, [r3, #28]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69da      	ldr	r2, [r3, #28]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69d9      	ldr	r1, [r3, #28]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	021a      	lsls	r2, r3, #8
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	61da      	str	r2, [r3, #28]
      break;
 8006926:	e002      	b.n	800692e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	75fb      	strb	r3, [r7, #23]
      break;
 800692c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006936:	7dfb      	ldrb	r3, [r7, #23]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3718      	adds	r7, #24
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006954:	2b01      	cmp	r3, #1
 8006956:	d101      	bne.n	800695c <HAL_TIM_ConfigClockSource+0x1c>
 8006958:	2302      	movs	r3, #2
 800695a:	e0b4      	b.n	8006ac6 <HAL_TIM_ConfigClockSource+0x186>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800697a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006982:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006994:	d03e      	beq.n	8006a14 <HAL_TIM_ConfigClockSource+0xd4>
 8006996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800699a:	f200 8087 	bhi.w	8006aac <HAL_TIM_ConfigClockSource+0x16c>
 800699e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a2:	f000 8086 	beq.w	8006ab2 <HAL_TIM_ConfigClockSource+0x172>
 80069a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069aa:	d87f      	bhi.n	8006aac <HAL_TIM_ConfigClockSource+0x16c>
 80069ac:	2b70      	cmp	r3, #112	; 0x70
 80069ae:	d01a      	beq.n	80069e6 <HAL_TIM_ConfigClockSource+0xa6>
 80069b0:	2b70      	cmp	r3, #112	; 0x70
 80069b2:	d87b      	bhi.n	8006aac <HAL_TIM_ConfigClockSource+0x16c>
 80069b4:	2b60      	cmp	r3, #96	; 0x60
 80069b6:	d050      	beq.n	8006a5a <HAL_TIM_ConfigClockSource+0x11a>
 80069b8:	2b60      	cmp	r3, #96	; 0x60
 80069ba:	d877      	bhi.n	8006aac <HAL_TIM_ConfigClockSource+0x16c>
 80069bc:	2b50      	cmp	r3, #80	; 0x50
 80069be:	d03c      	beq.n	8006a3a <HAL_TIM_ConfigClockSource+0xfa>
 80069c0:	2b50      	cmp	r3, #80	; 0x50
 80069c2:	d873      	bhi.n	8006aac <HAL_TIM_ConfigClockSource+0x16c>
 80069c4:	2b40      	cmp	r3, #64	; 0x40
 80069c6:	d058      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x13a>
 80069c8:	2b40      	cmp	r3, #64	; 0x40
 80069ca:	d86f      	bhi.n	8006aac <HAL_TIM_ConfigClockSource+0x16c>
 80069cc:	2b30      	cmp	r3, #48	; 0x30
 80069ce:	d064      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0x15a>
 80069d0:	2b30      	cmp	r3, #48	; 0x30
 80069d2:	d86b      	bhi.n	8006aac <HAL_TIM_ConfigClockSource+0x16c>
 80069d4:	2b20      	cmp	r3, #32
 80069d6:	d060      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0x15a>
 80069d8:	2b20      	cmp	r3, #32
 80069da:	d867      	bhi.n	8006aac <HAL_TIM_ConfigClockSource+0x16c>
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d05c      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0x15a>
 80069e0:	2b10      	cmp	r3, #16
 80069e2:	d05a      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0x15a>
 80069e4:	e062      	b.n	8006aac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	6899      	ldr	r1, [r3, #8]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f000 fb5d 	bl	80070b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	609a      	str	r2, [r3, #8]
      break;
 8006a12:	e04f      	b.n	8006ab4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6818      	ldr	r0, [r3, #0]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	6899      	ldr	r1, [r3, #8]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f000 fb46 	bl	80070b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a36:	609a      	str	r2, [r3, #8]
      break;
 8006a38:	e03c      	b.n	8006ab4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6818      	ldr	r0, [r3, #0]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	6859      	ldr	r1, [r3, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	461a      	mov	r2, r3
 8006a48:	f000 faba 	bl	8006fc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2150      	movs	r1, #80	; 0x50
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fb13 	bl	800707e <TIM_ITRx_SetConfig>
      break;
 8006a58:	e02c      	b.n	8006ab4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	6859      	ldr	r1, [r3, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	461a      	mov	r2, r3
 8006a68:	f000 fad9 	bl	800701e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2160      	movs	r1, #96	; 0x60
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fb03 	bl	800707e <TIM_ITRx_SetConfig>
      break;
 8006a78:	e01c      	b.n	8006ab4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6818      	ldr	r0, [r3, #0]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	6859      	ldr	r1, [r3, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	461a      	mov	r2, r3
 8006a88:	f000 fa9a 	bl	8006fc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2140      	movs	r1, #64	; 0x40
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 faf3 	bl	800707e <TIM_ITRx_SetConfig>
      break;
 8006a98:	e00c      	b.n	8006ab4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	f000 faea 	bl	800707e <TIM_ITRx_SetConfig>
      break;
 8006aaa:	e003      	b.n	8006ab4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab0:	e000      	b.n	8006ab4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ab2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b083      	sub	sp, #12
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b083      	sub	sp, #12
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b12:	bf00      	nop
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
	...

08006b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a40      	ldr	r2, [pc, #256]	; (8006c34 <TIM_Base_SetConfig+0x114>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d013      	beq.n	8006b60 <TIM_Base_SetConfig+0x40>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b3e:	d00f      	beq.n	8006b60 <TIM_Base_SetConfig+0x40>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a3d      	ldr	r2, [pc, #244]	; (8006c38 <TIM_Base_SetConfig+0x118>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d00b      	beq.n	8006b60 <TIM_Base_SetConfig+0x40>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a3c      	ldr	r2, [pc, #240]	; (8006c3c <TIM_Base_SetConfig+0x11c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d007      	beq.n	8006b60 <TIM_Base_SetConfig+0x40>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a3b      	ldr	r2, [pc, #236]	; (8006c40 <TIM_Base_SetConfig+0x120>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d003      	beq.n	8006b60 <TIM_Base_SetConfig+0x40>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a3a      	ldr	r2, [pc, #232]	; (8006c44 <TIM_Base_SetConfig+0x124>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d108      	bne.n	8006b72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a2f      	ldr	r2, [pc, #188]	; (8006c34 <TIM_Base_SetConfig+0x114>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d02b      	beq.n	8006bd2 <TIM_Base_SetConfig+0xb2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b80:	d027      	beq.n	8006bd2 <TIM_Base_SetConfig+0xb2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a2c      	ldr	r2, [pc, #176]	; (8006c38 <TIM_Base_SetConfig+0x118>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d023      	beq.n	8006bd2 <TIM_Base_SetConfig+0xb2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a2b      	ldr	r2, [pc, #172]	; (8006c3c <TIM_Base_SetConfig+0x11c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d01f      	beq.n	8006bd2 <TIM_Base_SetConfig+0xb2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a2a      	ldr	r2, [pc, #168]	; (8006c40 <TIM_Base_SetConfig+0x120>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d01b      	beq.n	8006bd2 <TIM_Base_SetConfig+0xb2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a29      	ldr	r2, [pc, #164]	; (8006c44 <TIM_Base_SetConfig+0x124>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d017      	beq.n	8006bd2 <TIM_Base_SetConfig+0xb2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a28      	ldr	r2, [pc, #160]	; (8006c48 <TIM_Base_SetConfig+0x128>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d013      	beq.n	8006bd2 <TIM_Base_SetConfig+0xb2>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a27      	ldr	r2, [pc, #156]	; (8006c4c <TIM_Base_SetConfig+0x12c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00f      	beq.n	8006bd2 <TIM_Base_SetConfig+0xb2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a26      	ldr	r2, [pc, #152]	; (8006c50 <TIM_Base_SetConfig+0x130>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00b      	beq.n	8006bd2 <TIM_Base_SetConfig+0xb2>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a25      	ldr	r2, [pc, #148]	; (8006c54 <TIM_Base_SetConfig+0x134>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d007      	beq.n	8006bd2 <TIM_Base_SetConfig+0xb2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a24      	ldr	r2, [pc, #144]	; (8006c58 <TIM_Base_SetConfig+0x138>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d003      	beq.n	8006bd2 <TIM_Base_SetConfig+0xb2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a23      	ldr	r2, [pc, #140]	; (8006c5c <TIM_Base_SetConfig+0x13c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d108      	bne.n	8006be4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a0a      	ldr	r2, [pc, #40]	; (8006c34 <TIM_Base_SetConfig+0x114>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d003      	beq.n	8006c18 <TIM_Base_SetConfig+0xf8>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a0c      	ldr	r2, [pc, #48]	; (8006c44 <TIM_Base_SetConfig+0x124>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d103      	bne.n	8006c20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	691a      	ldr	r2, [r3, #16]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	615a      	str	r2, [r3, #20]
}
 8006c26:	bf00      	nop
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	40010000 	.word	0x40010000
 8006c38:	40000400 	.word	0x40000400
 8006c3c:	40000800 	.word	0x40000800
 8006c40:	40000c00 	.word	0x40000c00
 8006c44:	40010400 	.word	0x40010400
 8006c48:	40014000 	.word	0x40014000
 8006c4c:	40014400 	.word	0x40014400
 8006c50:	40014800 	.word	0x40014800
 8006c54:	40001800 	.word	0x40001800
 8006c58:	40001c00 	.word	0x40001c00
 8006c5c:	40002000 	.word	0x40002000

08006c60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	f023 0201 	bic.w	r2, r3, #1
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f023 0303 	bic.w	r3, r3, #3
 8006c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f023 0302 	bic.w	r3, r3, #2
 8006ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a20      	ldr	r2, [pc, #128]	; (8006d38 <TIM_OC1_SetConfig+0xd8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d003      	beq.n	8006cc4 <TIM_OC1_SetConfig+0x64>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a1f      	ldr	r2, [pc, #124]	; (8006d3c <TIM_OC1_SetConfig+0xdc>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d10c      	bne.n	8006cde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f023 0308 	bic.w	r3, r3, #8
 8006cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f023 0304 	bic.w	r3, r3, #4
 8006cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a15      	ldr	r2, [pc, #84]	; (8006d38 <TIM_OC1_SetConfig+0xd8>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d003      	beq.n	8006cee <TIM_OC1_SetConfig+0x8e>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a14      	ldr	r2, [pc, #80]	; (8006d3c <TIM_OC1_SetConfig+0xdc>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d111      	bne.n	8006d12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	621a      	str	r2, [r3, #32]
}
 8006d2c:	bf00      	nop
 8006d2e:	371c      	adds	r7, #28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	40010000 	.word	0x40010000
 8006d3c:	40010400 	.word	0x40010400

08006d40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	f023 0210 	bic.w	r2, r3, #16
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	021b      	lsls	r3, r3, #8
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f023 0320 	bic.w	r3, r3, #32
 8006d8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	011b      	lsls	r3, r3, #4
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a22      	ldr	r2, [pc, #136]	; (8006e24 <TIM_OC2_SetConfig+0xe4>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d003      	beq.n	8006da8 <TIM_OC2_SetConfig+0x68>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a21      	ldr	r2, [pc, #132]	; (8006e28 <TIM_OC2_SetConfig+0xe8>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d10d      	bne.n	8006dc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	011b      	lsls	r3, r3, #4
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a17      	ldr	r2, [pc, #92]	; (8006e24 <TIM_OC2_SetConfig+0xe4>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d003      	beq.n	8006dd4 <TIM_OC2_SetConfig+0x94>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a16      	ldr	r2, [pc, #88]	; (8006e28 <TIM_OC2_SetConfig+0xe8>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d113      	bne.n	8006dfc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006de2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	621a      	str	r2, [r3, #32]
}
 8006e16:	bf00      	nop
 8006e18:	371c      	adds	r7, #28
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	40010000 	.word	0x40010000
 8006e28:	40010400 	.word	0x40010400

08006e2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f023 0303 	bic.w	r3, r3, #3
 8006e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	021b      	lsls	r3, r3, #8
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a21      	ldr	r2, [pc, #132]	; (8006f0c <TIM_OC3_SetConfig+0xe0>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d003      	beq.n	8006e92 <TIM_OC3_SetConfig+0x66>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a20      	ldr	r2, [pc, #128]	; (8006f10 <TIM_OC3_SetConfig+0xe4>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d10d      	bne.n	8006eae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	021b      	lsls	r3, r3, #8
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a16      	ldr	r2, [pc, #88]	; (8006f0c <TIM_OC3_SetConfig+0xe0>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d003      	beq.n	8006ebe <TIM_OC3_SetConfig+0x92>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a15      	ldr	r2, [pc, #84]	; (8006f10 <TIM_OC3_SetConfig+0xe4>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d113      	bne.n	8006ee6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	011b      	lsls	r3, r3, #4
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	621a      	str	r2, [r3, #32]
}
 8006f00:	bf00      	nop
 8006f02:	371c      	adds	r7, #28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	40010000 	.word	0x40010000
 8006f10:	40010400 	.word	0x40010400

08006f14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	021b      	lsls	r3, r3, #8
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	031b      	lsls	r3, r3, #12
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a12      	ldr	r2, [pc, #72]	; (8006fb8 <TIM_OC4_SetConfig+0xa4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d003      	beq.n	8006f7c <TIM_OC4_SetConfig+0x68>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a11      	ldr	r2, [pc, #68]	; (8006fbc <TIM_OC4_SetConfig+0xa8>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d109      	bne.n	8006f90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	019b      	lsls	r3, r3, #6
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	621a      	str	r2, [r3, #32]
}
 8006faa:	bf00      	nop
 8006fac:	371c      	adds	r7, #28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	40010000 	.word	0x40010000
 8006fbc:	40010400 	.word	0x40010400

08006fc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a1b      	ldr	r3, [r3, #32]
 8006fd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	f023 0201 	bic.w	r2, r3, #1
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	011b      	lsls	r3, r3, #4
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f023 030a 	bic.w	r3, r3, #10
 8006ffc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	4313      	orrs	r3, r2
 8007004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	621a      	str	r2, [r3, #32]
}
 8007012:	bf00      	nop
 8007014:	371c      	adds	r7, #28
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800701e:	b480      	push	{r7}
 8007020:	b087      	sub	sp, #28
 8007022:	af00      	add	r7, sp, #0
 8007024:	60f8      	str	r0, [r7, #12]
 8007026:	60b9      	str	r1, [r7, #8]
 8007028:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	f023 0210 	bic.w	r2, r3, #16
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007048:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	031b      	lsls	r3, r3, #12
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	4313      	orrs	r3, r2
 8007052:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800705a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	011b      	lsls	r3, r3, #4
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	4313      	orrs	r3, r2
 8007064:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	621a      	str	r2, [r3, #32]
}
 8007072:	bf00      	nop
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800707e:	b480      	push	{r7}
 8007080:	b085      	sub	sp, #20
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007094:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4313      	orrs	r3, r2
 800709c:	f043 0307 	orr.w	r3, r3, #7
 80070a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	609a      	str	r2, [r3, #8]
}
 80070a8:	bf00      	nop
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
 80070c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	021a      	lsls	r2, r3, #8
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	431a      	orrs	r2, r3
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	4313      	orrs	r3, r2
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	4313      	orrs	r3, r2
 80070e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	609a      	str	r2, [r3, #8]
}
 80070e8:	bf00      	nop
 80070ea:	371c      	adds	r7, #28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007104:	2b01      	cmp	r3, #1
 8007106:	d101      	bne.n	800710c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007108:	2302      	movs	r3, #2
 800710a:	e05a      	b.n	80071c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a21      	ldr	r2, [pc, #132]	; (80071d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d022      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007158:	d01d      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a1d      	ldr	r2, [pc, #116]	; (80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d018      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a1b      	ldr	r2, [pc, #108]	; (80071d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d013      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a1a      	ldr	r2, [pc, #104]	; (80071dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d00e      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a18      	ldr	r2, [pc, #96]	; (80071e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d009      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a17      	ldr	r2, [pc, #92]	; (80071e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d004      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a15      	ldr	r2, [pc, #84]	; (80071e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d10c      	bne.n	80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800719c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	40010000 	.word	0x40010000
 80071d4:	40000400 	.word	0x40000400
 80071d8:	40000800 	.word	0x40000800
 80071dc:	40000c00 	.word	0x40000c00
 80071e0:	40010400 	.word	0x40010400
 80071e4:	40014000 	.word	0x40014000
 80071e8:	40001800 	.word	0x40001800

080071ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007200:	2b01      	cmp	r3, #1
 8007202:	d101      	bne.n	8007208 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007204:	2302      	movs	r3, #2
 8007206:	e03d      	b.n	8007284 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	4313      	orrs	r3, r2
 800721c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	4313      	orrs	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4313      	orrs	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	4313      	orrs	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	4313      	orrs	r3, r2
 8007262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e03f      	b.n	800734a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d106      	bne.n	80072e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fa fe88 	bl	8001ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2224      	movs	r2, #36	; 0x24
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 ffd3 	bl	80082a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	691a      	ldr	r2, [r3, #16]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	695a      	ldr	r2, [r3, #20]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007320:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68da      	ldr	r2, [r3, #12]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007330:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2220      	movs	r2, #32
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2220      	movs	r2, #32
 8007344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08c      	sub	sp, #48	; 0x30
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	4613      	mov	r3, r2
 8007360:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b20      	cmp	r3, #32
 800736c:	d165      	bne.n	800743a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d002      	beq.n	800737a <HAL_UART_Transmit_DMA+0x26>
 8007374:	88fb      	ldrh	r3, [r7, #6]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e05e      	b.n	800743c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007384:	2b01      	cmp	r3, #1
 8007386:	d101      	bne.n	800738c <HAL_UART_Transmit_DMA+0x38>
 8007388:	2302      	movs	r3, #2
 800738a:	e057      	b.n	800743c <HAL_UART_Transmit_DMA+0xe8>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	88fa      	ldrh	r2, [r7, #6]
 800739e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	88fa      	ldrh	r2, [r7, #6]
 80073a4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2221      	movs	r2, #33	; 0x21
 80073b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b8:	4a22      	ldr	r2, [pc, #136]	; (8007444 <HAL_UART_Transmit_DMA+0xf0>)
 80073ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c0:	4a21      	ldr	r2, [pc, #132]	; (8007448 <HAL_UART_Transmit_DMA+0xf4>)
 80073c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c8:	4a20      	ldr	r2, [pc, #128]	; (800744c <HAL_UART_Transmit_DMA+0xf8>)
 80073ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d0:	2200      	movs	r2, #0
 80073d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80073d4:	f107 0308 	add.w	r3, r7, #8
 80073d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80073de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e0:	6819      	ldr	r1, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3304      	adds	r3, #4
 80073e8:	461a      	mov	r2, r3
 80073ea:	88fb      	ldrh	r3, [r7, #6]
 80073ec:	f7fb fb16 	bl	8002a1c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073f8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3314      	adds	r3, #20
 8007408:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	e853 3f00 	ldrex	r3, [r3]
 8007410:	617b      	str	r3, [r7, #20]
   return(result);
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007418:	62bb      	str	r3, [r7, #40]	; 0x28
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3314      	adds	r3, #20
 8007420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007422:	627a      	str	r2, [r7, #36]	; 0x24
 8007424:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	6a39      	ldr	r1, [r7, #32]
 8007428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742a:	e841 2300 	strex	r3, r2, [r1]
 800742e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1e5      	bne.n	8007402 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	e000      	b.n	800743c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800743a:	2302      	movs	r3, #2
  }
}
 800743c:	4618      	mov	r0, r3
 800743e:	3730      	adds	r7, #48	; 0x30
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	08007b49 	.word	0x08007b49
 8007448:	08007be3 	.word	0x08007be3
 800744c:	08007d5b 	.word	0x08007d5b

08007450 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	4613      	mov	r3, r2
 800745c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b20      	cmp	r3, #32
 8007468:	d11d      	bne.n	80074a6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <HAL_UART_Receive_DMA+0x26>
 8007470:	88fb      	ldrh	r3, [r7, #6]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e016      	b.n	80074a8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <HAL_UART_Receive_DMA+0x38>
 8007484:	2302      	movs	r3, #2
 8007486:	e00f      	b.n	80074a8 <HAL_UART_Receive_DMA+0x58>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007496:	88fb      	ldrh	r3, [r7, #6]
 8007498:	461a      	mov	r2, r3
 800749a:	68b9      	ldr	r1, [r7, #8]
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 fca7 	bl	8007df0 <UART_Start_Receive_DMA>
 80074a2:	4603      	mov	r3, r0
 80074a4:	e000      	b.n	80074a8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80074a6:	2302      	movs	r3, #2
  }
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b090      	sub	sp, #64	; 0x40
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c6:	2b80      	cmp	r3, #128	; 0x80
 80074c8:	bf0c      	ite	eq
 80074ca:	2301      	moveq	r3, #1
 80074cc:	2300      	movne	r3, #0
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b21      	cmp	r3, #33	; 0x21
 80074dc:	d128      	bne.n	8007530 <HAL_UART_DMAStop+0x80>
 80074de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d025      	beq.n	8007530 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	3314      	adds	r3, #20
 80074ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	623b      	str	r3, [r7, #32]
   return(result);
 80074f4:	6a3b      	ldr	r3, [r7, #32]
 80074f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3314      	adds	r3, #20
 8007502:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007504:	633a      	str	r2, [r7, #48]	; 0x30
 8007506:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800750a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e5      	bne.n	80074e4 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751c:	2b00      	cmp	r3, #0
 800751e:	d004      	beq.n	800752a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007524:	4618      	mov	r0, r3
 8007526:	f7fb fad1 	bl	8002acc <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fcfa 	bl	8007f24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753a:	2b40      	cmp	r3, #64	; 0x40
 800753c:	bf0c      	ite	eq
 800753e:	2301      	moveq	r3, #1
 8007540:	2300      	movne	r3, #0
 8007542:	b2db      	uxtb	r3, r3
 8007544:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b22      	cmp	r3, #34	; 0x22
 8007550:	d128      	bne.n	80075a4 <HAL_UART_DMAStop+0xf4>
 8007552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007554:	2b00      	cmp	r3, #0
 8007556:	d025      	beq.n	80075a4 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3314      	adds	r3, #20
 800755e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	60fb      	str	r3, [r7, #12]
   return(result);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800756e:	637b      	str	r3, [r7, #52]	; 0x34
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3314      	adds	r3, #20
 8007576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007578:	61fa      	str	r2, [r7, #28]
 800757a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	69b9      	ldr	r1, [r7, #24]
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	617b      	str	r3, [r7, #20]
   return(result);
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e5      	bne.n	8007558 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007590:	2b00      	cmp	r3, #0
 8007592:	d004      	beq.n	800759e <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	4618      	mov	r0, r3
 800759a:	f7fb fa97 	bl	8002acc <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fce8 	bl	8007f74 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3740      	adds	r7, #64	; 0x40
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
	...

080075b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b0ba      	sub	sp, #232	; 0xe8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80075dc:	2300      	movs	r3, #0
 80075de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80075e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e6:	f003 030f 	and.w	r3, r3, #15
 80075ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80075ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10f      	bne.n	8007616 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075fa:	f003 0320 	and.w	r3, r3, #32
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d009      	beq.n	8007616 <HAL_UART_IRQHandler+0x66>
 8007602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007606:	f003 0320 	and.w	r3, r3, #32
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fd8f 	bl	8008132 <UART_Receive_IT>
      return;
 8007614:	e256      	b.n	8007ac4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 80de 	beq.w	80077dc <HAL_UART_IRQHandler+0x22c>
 8007620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b00      	cmp	r3, #0
 800762a:	d106      	bne.n	800763a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800762c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007630:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 80d1 	beq.w	80077dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800763a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00b      	beq.n	800765e <HAL_UART_IRQHandler+0xae>
 8007646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800764a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800764e:	2b00      	cmp	r3, #0
 8007650:	d005      	beq.n	800765e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	f043 0201 	orr.w	r2, r3, #1
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800765e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007662:	f003 0304 	and.w	r3, r3, #4
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00b      	beq.n	8007682 <HAL_UART_IRQHandler+0xd2>
 800766a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	2b00      	cmp	r3, #0
 8007674:	d005      	beq.n	8007682 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767a:	f043 0202 	orr.w	r2, r3, #2
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00b      	beq.n	80076a6 <HAL_UART_IRQHandler+0xf6>
 800768e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d005      	beq.n	80076a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769e:	f043 0204 	orr.w	r2, r3, #4
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80076a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076aa:	f003 0308 	and.w	r3, r3, #8
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d011      	beq.n	80076d6 <HAL_UART_IRQHandler+0x126>
 80076b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b6:	f003 0320 	and.w	r3, r3, #32
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d105      	bne.n	80076ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80076be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d005      	beq.n	80076d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ce:	f043 0208 	orr.w	r2, r3, #8
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 81ed 	beq.w	8007aba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076e4:	f003 0320 	and.w	r3, r3, #32
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d008      	beq.n	80076fe <HAL_UART_IRQHandler+0x14e>
 80076ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076f0:	f003 0320 	and.w	r3, r3, #32
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fd1a 	bl	8008132 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007708:	2b40      	cmp	r3, #64	; 0x40
 800770a:	bf0c      	ite	eq
 800770c:	2301      	moveq	r3, #1
 800770e:	2300      	movne	r3, #0
 8007710:	b2db      	uxtb	r3, r3
 8007712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	f003 0308 	and.w	r3, r3, #8
 800771e:	2b00      	cmp	r3, #0
 8007720:	d103      	bne.n	800772a <HAL_UART_IRQHandler+0x17a>
 8007722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007726:	2b00      	cmp	r3, #0
 8007728:	d04f      	beq.n	80077ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fc22 	bl	8007f74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773a:	2b40      	cmp	r3, #64	; 0x40
 800773c:	d141      	bne.n	80077c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3314      	adds	r3, #20
 8007744:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007748:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007754:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800775c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3314      	adds	r3, #20
 8007766:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800776a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800776e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007772:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007776:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800777a:	e841 2300 	strex	r3, r2, [r1]
 800777e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1d9      	bne.n	800773e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778e:	2b00      	cmp	r3, #0
 8007790:	d013      	beq.n	80077ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007796:	4a7d      	ldr	r2, [pc, #500]	; (800798c <HAL_UART_IRQHandler+0x3dc>)
 8007798:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fb fa04 	bl	8002bac <HAL_DMA_Abort_IT>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d016      	beq.n	80077d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077b4:	4610      	mov	r0, r2
 80077b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b8:	e00e      	b.n	80077d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f9ae 	bl	8007b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c0:	e00a      	b.n	80077d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f9aa 	bl	8007b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c8:	e006      	b.n	80077d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f9a6 	bl	8007b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80077d6:	e170      	b.n	8007aba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d8:	bf00      	nop
    return;
 80077da:	e16e      	b.n	8007aba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	f040 814a 	bne.w	8007a7a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80077e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ea:	f003 0310 	and.w	r3, r3, #16
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f000 8143 	beq.w	8007a7a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80077f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f8:	f003 0310 	and.w	r3, r3, #16
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 813c 	beq.w	8007a7a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007802:	2300      	movs	r3, #0
 8007804:	60bb      	str	r3, [r7, #8]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	60bb      	str	r3, [r7, #8]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	60bb      	str	r3, [r7, #8]
 8007816:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007822:	2b40      	cmp	r3, #64	; 0x40
 8007824:	f040 80b4 	bne.w	8007990 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007834:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 8140 	beq.w	8007abe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007846:	429a      	cmp	r2, r3
 8007848:	f080 8139 	bcs.w	8007abe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007852:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800785e:	f000 8088 	beq.w	8007972 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	330c      	adds	r3, #12
 8007868:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007878:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800787c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007880:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	330c      	adds	r3, #12
 800788a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800788e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007896:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800789a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1d9      	bne.n	8007862 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3314      	adds	r3, #20
 80078b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078c0:	f023 0301 	bic.w	r3, r3, #1
 80078c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3314      	adds	r3, #20
 80078ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80078da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078de:	e841 2300 	strex	r3, r2, [r1]
 80078e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1e1      	bne.n	80078ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3314      	adds	r3, #20
 80078f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078f4:	e853 3f00 	ldrex	r3, [r3]
 80078f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007900:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3314      	adds	r3, #20
 800790a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800790e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007910:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007912:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007914:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007916:	e841 2300 	strex	r3, r2, [r1]
 800791a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800791c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1e3      	bne.n	80078ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2220      	movs	r2, #32
 8007926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	330c      	adds	r3, #12
 8007936:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007942:	f023 0310 	bic.w	r3, r3, #16
 8007946:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	330c      	adds	r3, #12
 8007950:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007954:	65ba      	str	r2, [r7, #88]	; 0x58
 8007956:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007958:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800795a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800795c:	e841 2300 	strex	r3, r2, [r1]
 8007960:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1e3      	bne.n	8007930 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	4618      	mov	r0, r3
 800796e:	f7fb f8ad 	bl	8002acc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800797a:	b29b      	uxth	r3, r3
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	b29b      	uxth	r3, r3
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f8d4 	bl	8007b30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007988:	e099      	b.n	8007abe <HAL_UART_IRQHandler+0x50e>
 800798a:	bf00      	nop
 800798c:	0800803b 	.word	0x0800803b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007998:	b29b      	uxth	r3, r3
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 808b 	beq.w	8007ac2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80079ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 8086 	beq.w	8007ac2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	330c      	adds	r3, #12
 80079bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	330c      	adds	r3, #12
 80079d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80079da:	647a      	str	r2, [r7, #68]	; 0x44
 80079dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079e2:	e841 2300 	strex	r3, r2, [r1]
 80079e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1e3      	bne.n	80079b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3314      	adds	r3, #20
 80079f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	e853 3f00 	ldrex	r3, [r3]
 80079fc:	623b      	str	r3, [r7, #32]
   return(result);
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	f023 0301 	bic.w	r3, r3, #1
 8007a04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3314      	adds	r3, #20
 8007a0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a12:	633a      	str	r2, [r7, #48]	; 0x30
 8007a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e3      	bne.n	80079ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	330c      	adds	r3, #12
 8007a3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	e853 3f00 	ldrex	r3, [r3]
 8007a42:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 0310 	bic.w	r3, r3, #16
 8007a4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	330c      	adds	r3, #12
 8007a54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a58:	61fa      	str	r2, [r7, #28]
 8007a5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	69b9      	ldr	r1, [r7, #24]
 8007a5e:	69fa      	ldr	r2, [r7, #28]
 8007a60:	e841 2300 	strex	r3, r2, [r1]
 8007a64:	617b      	str	r3, [r7, #20]
   return(result);
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1e3      	bne.n	8007a34 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f85c 	bl	8007b30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a78:	e023      	b.n	8007ac2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d009      	beq.n	8007a9a <HAL_UART_IRQHandler+0x4ea>
 8007a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fae5 	bl	8008062 <UART_Transmit_IT>
    return;
 8007a98:	e014      	b.n	8007ac4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00e      	beq.n	8007ac4 <HAL_UART_IRQHandler+0x514>
 8007aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d008      	beq.n	8007ac4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fb25 	bl	8008102 <UART_EndTransmit_IT>
    return;
 8007ab8:	e004      	b.n	8007ac4 <HAL_UART_IRQHandler+0x514>
    return;
 8007aba:	bf00      	nop
 8007abc:	e002      	b.n	8007ac4 <HAL_UART_IRQHandler+0x514>
      return;
 8007abe:	bf00      	nop
 8007ac0:	e000      	b.n	8007ac4 <HAL_UART_IRQHandler+0x514>
      return;
 8007ac2:	bf00      	nop
  }
}
 8007ac4:	37e8      	adds	r7, #232	; 0xe8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop

08007acc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b090      	sub	sp, #64	; 0x40
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b54:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d137      	bne.n	8007bd4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b66:	2200      	movs	r2, #0
 8007b68:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3314      	adds	r3, #20
 8007b70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	e853 3f00 	ldrex	r3, [r3]
 8007b78:	623b      	str	r3, [r7, #32]
   return(result);
 8007b7a:	6a3b      	ldr	r3, [r7, #32]
 8007b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b80:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	3314      	adds	r3, #20
 8007b88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b8a:	633a      	str	r2, [r7, #48]	; 0x30
 8007b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b92:	e841 2300 	strex	r3, r2, [r1]
 8007b96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1e5      	bne.n	8007b6a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	330c      	adds	r3, #12
 8007ba4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	e853 3f00 	ldrex	r3, [r3]
 8007bac:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8007bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	330c      	adds	r3, #12
 8007bbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bbe:	61fa      	str	r2, [r7, #28]
 8007bc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	69b9      	ldr	r1, [r7, #24]
 8007bc4:	69fa      	ldr	r2, [r7, #28]
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	617b      	str	r3, [r7, #20]
   return(result);
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e5      	bne.n	8007b9e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bd2:	e002      	b.n	8007bda <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007bd4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007bd6:	f7ff ff79 	bl	8007acc <HAL_UART_TxCpltCallback>
}
 8007bda:	bf00      	nop
 8007bdc:	3740      	adds	r7, #64	; 0x40
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f7ff ff75 	bl	8007ae0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bf6:	bf00      	nop
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b09c      	sub	sp, #112	; 0x70
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d172      	bne.n	8007d00 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	330c      	adds	r3, #12
 8007c26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c2a:	e853 3f00 	ldrex	r3, [r3]
 8007c2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c36:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	330c      	adds	r3, #12
 8007c3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c40:	65ba      	str	r2, [r7, #88]	; 0x58
 8007c42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c48:	e841 2300 	strex	r3, r2, [r1]
 8007c4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e5      	bne.n	8007c20 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3314      	adds	r3, #20
 8007c5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5e:	e853 3f00 	ldrex	r3, [r3]
 8007c62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c66:	f023 0301 	bic.w	r3, r3, #1
 8007c6a:	667b      	str	r3, [r7, #100]	; 0x64
 8007c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3314      	adds	r3, #20
 8007c72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c74:	647a      	str	r2, [r7, #68]	; 0x44
 8007c76:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e5      	bne.n	8007c54 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3314      	adds	r3, #20
 8007c8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	623b      	str	r3, [r7, #32]
   return(result);
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c9e:	663b      	str	r3, [r7, #96]	; 0x60
 8007ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3314      	adds	r3, #20
 8007ca6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ca8:	633a      	str	r2, [r7, #48]	; 0x30
 8007caa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e5      	bne.n	8007c88 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d119      	bne.n	8007d00 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	330c      	adds	r3, #12
 8007cd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	e853 3f00 	ldrex	r3, [r3]
 8007cda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f023 0310 	bic.w	r3, r3, #16
 8007ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	330c      	adds	r3, #12
 8007cea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007cec:	61fa      	str	r2, [r7, #28]
 8007cee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	69b9      	ldr	r1, [r7, #24]
 8007cf2:	69fa      	ldr	r2, [r7, #28]
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e5      	bne.n	8007ccc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d106      	bne.n	8007d16 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d10:	f7ff ff0e 	bl	8007b30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d14:	e002      	b.n	8007d1c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007d16:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d18:	f7ff feec 	bl	8007af4 <HAL_UART_RxCpltCallback>
}
 8007d1c:	bf00      	nop
 8007d1e:	3770      	adds	r7, #112	; 0x70
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d30:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d108      	bne.n	8007d4c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d3e:	085b      	lsrs	r3, r3, #1
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	4619      	mov	r1, r3
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f7ff fef3 	bl	8007b30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d4a:	e002      	b.n	8007d52 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f7ff fedb 	bl	8007b08 <HAL_UART_RxHalfCpltCallback>
}
 8007d52:	bf00      	nop
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b084      	sub	sp, #16
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d76:	2b80      	cmp	r3, #128	; 0x80
 8007d78:	bf0c      	ite	eq
 8007d7a:	2301      	moveq	r3, #1
 8007d7c:	2300      	movne	r3, #0
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b21      	cmp	r3, #33	; 0x21
 8007d8c:	d108      	bne.n	8007da0 <UART_DMAError+0x46>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d005      	beq.n	8007da0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2200      	movs	r2, #0
 8007d98:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007d9a:	68b8      	ldr	r0, [r7, #8]
 8007d9c:	f000 f8c2 	bl	8007f24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007daa:	2b40      	cmp	r3, #64	; 0x40
 8007dac:	bf0c      	ite	eq
 8007dae:	2301      	moveq	r3, #1
 8007db0:	2300      	movne	r3, #0
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b22      	cmp	r3, #34	; 0x22
 8007dc0:	d108      	bne.n	8007dd4 <UART_DMAError+0x7a>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d005      	beq.n	8007dd4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007dce:	68b8      	ldr	r0, [r7, #8]
 8007dd0:	f000 f8d0 	bl	8007f74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd8:	f043 0210 	orr.w	r2, r3, #16
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007de0:	68b8      	ldr	r0, [r7, #8]
 8007de2:	f7ff fe9b 	bl	8007b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007de6:	bf00      	nop
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
	...

08007df0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b098      	sub	sp, #96	; 0x60
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	88fa      	ldrh	r2, [r7, #6]
 8007e08:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2222      	movs	r2, #34	; 0x22
 8007e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1c:	4a3e      	ldr	r2, [pc, #248]	; (8007f18 <UART_Start_Receive_DMA+0x128>)
 8007e1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e24:	4a3d      	ldr	r2, [pc, #244]	; (8007f1c <UART_Start_Receive_DMA+0x12c>)
 8007e26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2c:	4a3c      	ldr	r2, [pc, #240]	; (8007f20 <UART_Start_Receive_DMA+0x130>)
 8007e2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e34:	2200      	movs	r2, #0
 8007e36:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007e38:	f107 0308 	add.w	r3, r7, #8
 8007e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	3304      	adds	r3, #4
 8007e48:	4619      	mov	r1, r3
 8007e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	88fb      	ldrh	r3, [r7, #6]
 8007e50:	f7fa fde4 	bl	8002a1c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007e54:	2300      	movs	r3, #0
 8007e56:	613b      	str	r3, [r7, #16]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	613b      	str	r3, [r7, #16]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	613b      	str	r3, [r7, #16]
 8007e68:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	330c      	adds	r3, #12
 8007e78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e7c:	e853 3f00 	ldrex	r3, [r3]
 8007e80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e88:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	330c      	adds	r3, #12
 8007e90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e92:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007e94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e96:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007e98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e9a:	e841 2300 	strex	r3, r2, [r1]
 8007e9e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1e5      	bne.n	8007e72 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3314      	adds	r3, #20
 8007eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb0:	e853 3f00 	ldrex	r3, [r3]
 8007eb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	f043 0301 	orr.w	r3, r3, #1
 8007ebc:	657b      	str	r3, [r7, #84]	; 0x54
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3314      	adds	r3, #20
 8007ec4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ec6:	63ba      	str	r2, [r7, #56]	; 0x38
 8007ec8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ecc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ece:	e841 2300 	strex	r3, r2, [r1]
 8007ed2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1e5      	bne.n	8007ea6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3314      	adds	r3, #20
 8007ee0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	e853 3f00 	ldrex	r3, [r3]
 8007ee8:	617b      	str	r3, [r7, #20]
   return(result);
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ef0:	653b      	str	r3, [r7, #80]	; 0x50
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3314      	adds	r3, #20
 8007ef8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007efa:	627a      	str	r2, [r7, #36]	; 0x24
 8007efc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efe:	6a39      	ldr	r1, [r7, #32]
 8007f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f02:	e841 2300 	strex	r3, r2, [r1]
 8007f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1e5      	bne.n	8007eda <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3760      	adds	r7, #96	; 0x60
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	08007bff 	.word	0x08007bff
 8007f1c:	08007d25 	.word	0x08007d25
 8007f20:	08007d5b 	.word	0x08007d5b

08007f24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b089      	sub	sp, #36	; 0x24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	330c      	adds	r3, #12
 8007f32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	e853 3f00 	ldrex	r3, [r3]
 8007f3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f42:	61fb      	str	r3, [r7, #28]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	330c      	adds	r3, #12
 8007f4a:	69fa      	ldr	r2, [r7, #28]
 8007f4c:	61ba      	str	r2, [r7, #24]
 8007f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f50:	6979      	ldr	r1, [r7, #20]
 8007f52:	69ba      	ldr	r2, [r7, #24]
 8007f54:	e841 2300 	strex	r3, r2, [r1]
 8007f58:	613b      	str	r3, [r7, #16]
   return(result);
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e5      	bne.n	8007f2c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2220      	movs	r2, #32
 8007f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007f68:	bf00      	nop
 8007f6a:	3724      	adds	r7, #36	; 0x24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b095      	sub	sp, #84	; 0x54
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	330c      	adds	r3, #12
 8007f82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f86:	e853 3f00 	ldrex	r3, [r3]
 8007f8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	330c      	adds	r3, #12
 8007f9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f9c:	643a      	str	r2, [r7, #64]	; 0x40
 8007f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fa4:	e841 2300 	strex	r3, r2, [r1]
 8007fa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1e5      	bne.n	8007f7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3314      	adds	r3, #20
 8007fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	e853 3f00 	ldrex	r3, [r3]
 8007fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	f023 0301 	bic.w	r3, r3, #1
 8007fc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3314      	adds	r3, #20
 8007fce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e5      	bne.n	8007fb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d119      	bne.n	8008020 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	330c      	adds	r3, #12
 8007ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	e853 3f00 	ldrex	r3, [r3]
 8007ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f023 0310 	bic.w	r3, r3, #16
 8008002:	647b      	str	r3, [r7, #68]	; 0x44
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	330c      	adds	r3, #12
 800800a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800800c:	61ba      	str	r2, [r7, #24]
 800800e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008010:	6979      	ldr	r1, [r7, #20]
 8008012:	69ba      	ldr	r2, [r7, #24]
 8008014:	e841 2300 	strex	r3, r2, [r1]
 8008018:	613b      	str	r3, [r7, #16]
   return(result);
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1e5      	bne.n	8007fec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2220      	movs	r2, #32
 8008024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800802e:	bf00      	nop
 8008030:	3754      	adds	r7, #84	; 0x54
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008046:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f7ff fd61 	bl	8007b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800805a:	bf00      	nop
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008062:	b480      	push	{r7}
 8008064:	b085      	sub	sp, #20
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b21      	cmp	r3, #33	; 0x21
 8008074:	d13e      	bne.n	80080f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800807e:	d114      	bne.n	80080aa <UART_Transmit_IT+0x48>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d110      	bne.n	80080aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a1b      	ldr	r3, [r3, #32]
 800808c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	461a      	mov	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800809c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	1c9a      	adds	r2, r3, #2
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	621a      	str	r2, [r3, #32]
 80080a8:	e008      	b.n	80080bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	1c59      	adds	r1, r3, #1
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	6211      	str	r1, [r2, #32]
 80080b4:	781a      	ldrb	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	3b01      	subs	r3, #1
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	4619      	mov	r1, r3
 80080ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10f      	bne.n	80080f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68da      	ldr	r2, [r3, #12]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	e000      	b.n	80080f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80080f4:	2302      	movs	r3, #2
  }
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b082      	sub	sp, #8
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68da      	ldr	r2, [r3, #12]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008118:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2220      	movs	r2, #32
 800811e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7ff fcd2 	bl	8007acc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b08c      	sub	sp, #48	; 0x30
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b22      	cmp	r3, #34	; 0x22
 8008144:	f040 80ab 	bne.w	800829e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008150:	d117      	bne.n	8008182 <UART_Receive_IT+0x50>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d113      	bne.n	8008182 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800815a:	2300      	movs	r3, #0
 800815c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008162:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	b29b      	uxth	r3, r3
 800816c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008170:	b29a      	uxth	r2, r3
 8008172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008174:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817a:	1c9a      	adds	r2, r3, #2
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	629a      	str	r2, [r3, #40]	; 0x28
 8008180:	e026      	b.n	80081d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008186:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008188:	2300      	movs	r3, #0
 800818a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008194:	d007      	beq.n	80081a6 <UART_Receive_IT+0x74>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10a      	bne.n	80081b4 <UART_Receive_IT+0x82>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d106      	bne.n	80081b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b0:	701a      	strb	r2, [r3, #0]
 80081b2:	e008      	b.n	80081c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ca:	1c5a      	adds	r2, r3, #1
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	3b01      	subs	r3, #1
 80081d8:	b29b      	uxth	r3, r3
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	4619      	mov	r1, r3
 80081de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d15a      	bne.n	800829a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68da      	ldr	r2, [r3, #12]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f022 0220 	bic.w	r2, r2, #32
 80081f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68da      	ldr	r2, [r3, #12]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008202:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	695a      	ldr	r2, [r3, #20]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 0201 	bic.w	r2, r2, #1
 8008212:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2220      	movs	r2, #32
 8008218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008220:	2b01      	cmp	r3, #1
 8008222:	d135      	bne.n	8008290 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	330c      	adds	r3, #12
 8008230:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	e853 3f00 	ldrex	r3, [r3]
 8008238:	613b      	str	r3, [r7, #16]
   return(result);
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	f023 0310 	bic.w	r3, r3, #16
 8008240:	627b      	str	r3, [r7, #36]	; 0x24
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	330c      	adds	r3, #12
 8008248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800824a:	623a      	str	r2, [r7, #32]
 800824c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824e:	69f9      	ldr	r1, [r7, #28]
 8008250:	6a3a      	ldr	r2, [r7, #32]
 8008252:	e841 2300 	strex	r3, r2, [r1]
 8008256:	61bb      	str	r3, [r7, #24]
   return(result);
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1e5      	bne.n	800822a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0310 	and.w	r3, r3, #16
 8008268:	2b10      	cmp	r3, #16
 800826a:	d10a      	bne.n	8008282 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800826c:	2300      	movs	r3, #0
 800826e:	60fb      	str	r3, [r7, #12]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008286:	4619      	mov	r1, r3
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7ff fc51 	bl	8007b30 <HAL_UARTEx_RxEventCallback>
 800828e:	e002      	b.n	8008296 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7ff fc2f 	bl	8007af4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	e002      	b.n	80082a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	e000      	b.n	80082a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800829e:	2302      	movs	r3, #2
  }
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3730      	adds	r7, #48	; 0x30
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ac:	b09f      	sub	sp, #124	; 0x7c
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082be:	68d9      	ldr	r1, [r3, #12]
 80082c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	ea40 0301 	orr.w	r3, r0, r1
 80082c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082cc:	689a      	ldr	r2, [r3, #8]
 80082ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	431a      	orrs	r2, r3
 80082d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082d6:	695b      	ldr	r3, [r3, #20]
 80082d8:	431a      	orrs	r2, r3
 80082da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	4313      	orrs	r3, r2
 80082e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80082e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80082ec:	f021 010c 	bic.w	r1, r1, #12
 80082f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082f6:	430b      	orrs	r3, r1
 80082f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008306:	6999      	ldr	r1, [r3, #24]
 8008308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	ea40 0301 	orr.w	r3, r0, r1
 8008310:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	4bc5      	ldr	r3, [pc, #788]	; (800862c <UART_SetConfig+0x384>)
 8008318:	429a      	cmp	r2, r3
 800831a:	d004      	beq.n	8008326 <UART_SetConfig+0x7e>
 800831c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	4bc3      	ldr	r3, [pc, #780]	; (8008630 <UART_SetConfig+0x388>)
 8008322:	429a      	cmp	r2, r3
 8008324:	d103      	bne.n	800832e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008326:	f7fd fe19 	bl	8005f5c <HAL_RCC_GetPCLK2Freq>
 800832a:	6778      	str	r0, [r7, #116]	; 0x74
 800832c:	e002      	b.n	8008334 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800832e:	f7fd fe01 	bl	8005f34 <HAL_RCC_GetPCLK1Freq>
 8008332:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008336:	69db      	ldr	r3, [r3, #28]
 8008338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800833c:	f040 80b6 	bne.w	80084ac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008342:	461c      	mov	r4, r3
 8008344:	f04f 0500 	mov.w	r5, #0
 8008348:	4622      	mov	r2, r4
 800834a:	462b      	mov	r3, r5
 800834c:	1891      	adds	r1, r2, r2
 800834e:	6439      	str	r1, [r7, #64]	; 0x40
 8008350:	415b      	adcs	r3, r3
 8008352:	647b      	str	r3, [r7, #68]	; 0x44
 8008354:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008358:	1912      	adds	r2, r2, r4
 800835a:	eb45 0303 	adc.w	r3, r5, r3
 800835e:	f04f 0000 	mov.w	r0, #0
 8008362:	f04f 0100 	mov.w	r1, #0
 8008366:	00d9      	lsls	r1, r3, #3
 8008368:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800836c:	00d0      	lsls	r0, r2, #3
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	1911      	adds	r1, r2, r4
 8008374:	6639      	str	r1, [r7, #96]	; 0x60
 8008376:	416b      	adcs	r3, r5
 8008378:	667b      	str	r3, [r7, #100]	; 0x64
 800837a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	461a      	mov	r2, r3
 8008380:	f04f 0300 	mov.w	r3, #0
 8008384:	1891      	adds	r1, r2, r2
 8008386:	63b9      	str	r1, [r7, #56]	; 0x38
 8008388:	415b      	adcs	r3, r3
 800838a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800838c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008390:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008394:	f7f7 ffd4 	bl	8000340 <__aeabi_uldivmod>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	4ba5      	ldr	r3, [pc, #660]	; (8008634 <UART_SetConfig+0x38c>)
 800839e:	fba3 2302 	umull	r2, r3, r3, r2
 80083a2:	095b      	lsrs	r3, r3, #5
 80083a4:	011e      	lsls	r6, r3, #4
 80083a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083a8:	461c      	mov	r4, r3
 80083aa:	f04f 0500 	mov.w	r5, #0
 80083ae:	4622      	mov	r2, r4
 80083b0:	462b      	mov	r3, r5
 80083b2:	1891      	adds	r1, r2, r2
 80083b4:	6339      	str	r1, [r7, #48]	; 0x30
 80083b6:	415b      	adcs	r3, r3
 80083b8:	637b      	str	r3, [r7, #52]	; 0x34
 80083ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80083be:	1912      	adds	r2, r2, r4
 80083c0:	eb45 0303 	adc.w	r3, r5, r3
 80083c4:	f04f 0000 	mov.w	r0, #0
 80083c8:	f04f 0100 	mov.w	r1, #0
 80083cc:	00d9      	lsls	r1, r3, #3
 80083ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80083d2:	00d0      	lsls	r0, r2, #3
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	1911      	adds	r1, r2, r4
 80083da:	65b9      	str	r1, [r7, #88]	; 0x58
 80083dc:	416b      	adcs	r3, r5
 80083de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	461a      	mov	r2, r3
 80083e6:	f04f 0300 	mov.w	r3, #0
 80083ea:	1891      	adds	r1, r2, r2
 80083ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80083ee:	415b      	adcs	r3, r3
 80083f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80083fa:	f7f7 ffa1 	bl	8000340 <__aeabi_uldivmod>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	4b8c      	ldr	r3, [pc, #560]	; (8008634 <UART_SetConfig+0x38c>)
 8008404:	fba3 1302 	umull	r1, r3, r3, r2
 8008408:	095b      	lsrs	r3, r3, #5
 800840a:	2164      	movs	r1, #100	; 0x64
 800840c:	fb01 f303 	mul.w	r3, r1, r3
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	00db      	lsls	r3, r3, #3
 8008414:	3332      	adds	r3, #50	; 0x32
 8008416:	4a87      	ldr	r2, [pc, #540]	; (8008634 <UART_SetConfig+0x38c>)
 8008418:	fba2 2303 	umull	r2, r3, r2, r3
 800841c:	095b      	lsrs	r3, r3, #5
 800841e:	005b      	lsls	r3, r3, #1
 8008420:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008424:	441e      	add	r6, r3
 8008426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008428:	4618      	mov	r0, r3
 800842a:	f04f 0100 	mov.w	r1, #0
 800842e:	4602      	mov	r2, r0
 8008430:	460b      	mov	r3, r1
 8008432:	1894      	adds	r4, r2, r2
 8008434:	623c      	str	r4, [r7, #32]
 8008436:	415b      	adcs	r3, r3
 8008438:	627b      	str	r3, [r7, #36]	; 0x24
 800843a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800843e:	1812      	adds	r2, r2, r0
 8008440:	eb41 0303 	adc.w	r3, r1, r3
 8008444:	f04f 0400 	mov.w	r4, #0
 8008448:	f04f 0500 	mov.w	r5, #0
 800844c:	00dd      	lsls	r5, r3, #3
 800844e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008452:	00d4      	lsls	r4, r2, #3
 8008454:	4622      	mov	r2, r4
 8008456:	462b      	mov	r3, r5
 8008458:	1814      	adds	r4, r2, r0
 800845a:	653c      	str	r4, [r7, #80]	; 0x50
 800845c:	414b      	adcs	r3, r1
 800845e:	657b      	str	r3, [r7, #84]	; 0x54
 8008460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	461a      	mov	r2, r3
 8008466:	f04f 0300 	mov.w	r3, #0
 800846a:	1891      	adds	r1, r2, r2
 800846c:	61b9      	str	r1, [r7, #24]
 800846e:	415b      	adcs	r3, r3
 8008470:	61fb      	str	r3, [r7, #28]
 8008472:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008476:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800847a:	f7f7 ff61 	bl	8000340 <__aeabi_uldivmod>
 800847e:	4602      	mov	r2, r0
 8008480:	460b      	mov	r3, r1
 8008482:	4b6c      	ldr	r3, [pc, #432]	; (8008634 <UART_SetConfig+0x38c>)
 8008484:	fba3 1302 	umull	r1, r3, r3, r2
 8008488:	095b      	lsrs	r3, r3, #5
 800848a:	2164      	movs	r1, #100	; 0x64
 800848c:	fb01 f303 	mul.w	r3, r1, r3
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	00db      	lsls	r3, r3, #3
 8008494:	3332      	adds	r3, #50	; 0x32
 8008496:	4a67      	ldr	r2, [pc, #412]	; (8008634 <UART_SetConfig+0x38c>)
 8008498:	fba2 2303 	umull	r2, r3, r2, r3
 800849c:	095b      	lsrs	r3, r3, #5
 800849e:	f003 0207 	and.w	r2, r3, #7
 80084a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4432      	add	r2, r6
 80084a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084aa:	e0b9      	b.n	8008620 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084ae:	461c      	mov	r4, r3
 80084b0:	f04f 0500 	mov.w	r5, #0
 80084b4:	4622      	mov	r2, r4
 80084b6:	462b      	mov	r3, r5
 80084b8:	1891      	adds	r1, r2, r2
 80084ba:	6139      	str	r1, [r7, #16]
 80084bc:	415b      	adcs	r3, r3
 80084be:	617b      	str	r3, [r7, #20]
 80084c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80084c4:	1912      	adds	r2, r2, r4
 80084c6:	eb45 0303 	adc.w	r3, r5, r3
 80084ca:	f04f 0000 	mov.w	r0, #0
 80084ce:	f04f 0100 	mov.w	r1, #0
 80084d2:	00d9      	lsls	r1, r3, #3
 80084d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80084d8:	00d0      	lsls	r0, r2, #3
 80084da:	4602      	mov	r2, r0
 80084dc:	460b      	mov	r3, r1
 80084de:	eb12 0804 	adds.w	r8, r2, r4
 80084e2:	eb43 0905 	adc.w	r9, r3, r5
 80084e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f04f 0100 	mov.w	r1, #0
 80084f0:	f04f 0200 	mov.w	r2, #0
 80084f4:	f04f 0300 	mov.w	r3, #0
 80084f8:	008b      	lsls	r3, r1, #2
 80084fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80084fe:	0082      	lsls	r2, r0, #2
 8008500:	4640      	mov	r0, r8
 8008502:	4649      	mov	r1, r9
 8008504:	f7f7 ff1c 	bl	8000340 <__aeabi_uldivmod>
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	4b49      	ldr	r3, [pc, #292]	; (8008634 <UART_SetConfig+0x38c>)
 800850e:	fba3 2302 	umull	r2, r3, r3, r2
 8008512:	095b      	lsrs	r3, r3, #5
 8008514:	011e      	lsls	r6, r3, #4
 8008516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008518:	4618      	mov	r0, r3
 800851a:	f04f 0100 	mov.w	r1, #0
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	1894      	adds	r4, r2, r2
 8008524:	60bc      	str	r4, [r7, #8]
 8008526:	415b      	adcs	r3, r3
 8008528:	60fb      	str	r3, [r7, #12]
 800852a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800852e:	1812      	adds	r2, r2, r0
 8008530:	eb41 0303 	adc.w	r3, r1, r3
 8008534:	f04f 0400 	mov.w	r4, #0
 8008538:	f04f 0500 	mov.w	r5, #0
 800853c:	00dd      	lsls	r5, r3, #3
 800853e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008542:	00d4      	lsls	r4, r2, #3
 8008544:	4622      	mov	r2, r4
 8008546:	462b      	mov	r3, r5
 8008548:	1814      	adds	r4, r2, r0
 800854a:	64bc      	str	r4, [r7, #72]	; 0x48
 800854c:	414b      	adcs	r3, r1
 800854e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	4618      	mov	r0, r3
 8008556:	f04f 0100 	mov.w	r1, #0
 800855a:	f04f 0200 	mov.w	r2, #0
 800855e:	f04f 0300 	mov.w	r3, #0
 8008562:	008b      	lsls	r3, r1, #2
 8008564:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008568:	0082      	lsls	r2, r0, #2
 800856a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800856e:	f7f7 fee7 	bl	8000340 <__aeabi_uldivmod>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4b2f      	ldr	r3, [pc, #188]	; (8008634 <UART_SetConfig+0x38c>)
 8008578:	fba3 1302 	umull	r1, r3, r3, r2
 800857c:	095b      	lsrs	r3, r3, #5
 800857e:	2164      	movs	r1, #100	; 0x64
 8008580:	fb01 f303 	mul.w	r3, r1, r3
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	011b      	lsls	r3, r3, #4
 8008588:	3332      	adds	r3, #50	; 0x32
 800858a:	4a2a      	ldr	r2, [pc, #168]	; (8008634 <UART_SetConfig+0x38c>)
 800858c:	fba2 2303 	umull	r2, r3, r2, r3
 8008590:	095b      	lsrs	r3, r3, #5
 8008592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008596:	441e      	add	r6, r3
 8008598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800859a:	4618      	mov	r0, r3
 800859c:	f04f 0100 	mov.w	r1, #0
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	1894      	adds	r4, r2, r2
 80085a6:	603c      	str	r4, [r7, #0]
 80085a8:	415b      	adcs	r3, r3
 80085aa:	607b      	str	r3, [r7, #4]
 80085ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085b0:	1812      	adds	r2, r2, r0
 80085b2:	eb41 0303 	adc.w	r3, r1, r3
 80085b6:	f04f 0400 	mov.w	r4, #0
 80085ba:	f04f 0500 	mov.w	r5, #0
 80085be:	00dd      	lsls	r5, r3, #3
 80085c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80085c4:	00d4      	lsls	r4, r2, #3
 80085c6:	4622      	mov	r2, r4
 80085c8:	462b      	mov	r3, r5
 80085ca:	eb12 0a00 	adds.w	sl, r2, r0
 80085ce:	eb43 0b01 	adc.w	fp, r3, r1
 80085d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f04f 0100 	mov.w	r1, #0
 80085dc:	f04f 0200 	mov.w	r2, #0
 80085e0:	f04f 0300 	mov.w	r3, #0
 80085e4:	008b      	lsls	r3, r1, #2
 80085e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80085ea:	0082      	lsls	r2, r0, #2
 80085ec:	4650      	mov	r0, sl
 80085ee:	4659      	mov	r1, fp
 80085f0:	f7f7 fea6 	bl	8000340 <__aeabi_uldivmod>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	4b0e      	ldr	r3, [pc, #56]	; (8008634 <UART_SetConfig+0x38c>)
 80085fa:	fba3 1302 	umull	r1, r3, r3, r2
 80085fe:	095b      	lsrs	r3, r3, #5
 8008600:	2164      	movs	r1, #100	; 0x64
 8008602:	fb01 f303 	mul.w	r3, r1, r3
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	011b      	lsls	r3, r3, #4
 800860a:	3332      	adds	r3, #50	; 0x32
 800860c:	4a09      	ldr	r2, [pc, #36]	; (8008634 <UART_SetConfig+0x38c>)
 800860e:	fba2 2303 	umull	r2, r3, r2, r3
 8008612:	095b      	lsrs	r3, r3, #5
 8008614:	f003 020f 	and.w	r2, r3, #15
 8008618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4432      	add	r2, r6
 800861e:	609a      	str	r2, [r3, #8]
}
 8008620:	bf00      	nop
 8008622:	377c      	adds	r7, #124	; 0x7c
 8008624:	46bd      	mov	sp, r7
 8008626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862a:	bf00      	nop
 800862c:	40011000 	.word	0x40011000
 8008630:	40011400 	.word	0x40011400
 8008634:	51eb851f 	.word	0x51eb851f

08008638 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008638:	b084      	sub	sp, #16
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	f107 001c 	add.w	r0, r7, #28
 8008646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	2b01      	cmp	r3, #1
 800864e:	d122      	bne.n	8008696 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008654:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800867a:	2b01      	cmp	r3, #1
 800867c:	d105      	bne.n	800868a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f950 	bl	8008930 <USB_CoreReset>
 8008690:	4603      	mov	r3, r0
 8008692:	73fb      	strb	r3, [r7, #15]
 8008694:	e01a      	b.n	80086cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f944 	bl	8008930 <USB_CoreReset>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80086ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d106      	bne.n	80086c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	639a      	str	r2, [r3, #56]	; 0x38
 80086be:	e005      	b.n	80086cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80086cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d10b      	bne.n	80086ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	f043 0206 	orr.w	r2, r3, #6
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	f043 0220 	orr.w	r2, r3, #32
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086f6:	b004      	add	sp, #16
 80086f8:	4770      	bx	lr

080086fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f023 0201 	bic.w	r2, r3, #1
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	460b      	mov	r3, r1
 8008726:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008728:	2300      	movs	r3, #0
 800872a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008738:	78fb      	ldrb	r3, [r7, #3]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d115      	bne.n	800876a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800874a:	2001      	movs	r0, #1
 800874c:	f7f9 ffb2 	bl	80026b4 <HAL_Delay>
      ms++;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	3301      	adds	r3, #1
 8008754:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f8db 	bl	8008912 <USB_GetMode>
 800875c:	4603      	mov	r3, r0
 800875e:	2b01      	cmp	r3, #1
 8008760:	d01e      	beq.n	80087a0 <USB_SetCurrentMode+0x84>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2b31      	cmp	r3, #49	; 0x31
 8008766:	d9f0      	bls.n	800874a <USB_SetCurrentMode+0x2e>
 8008768:	e01a      	b.n	80087a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800876a:	78fb      	ldrb	r3, [r7, #3]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d115      	bne.n	800879c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800877c:	2001      	movs	r0, #1
 800877e:	f7f9 ff99 	bl	80026b4 <HAL_Delay>
      ms++;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	3301      	adds	r3, #1
 8008786:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f8c2 	bl	8008912 <USB_GetMode>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d005      	beq.n	80087a0 <USB_SetCurrentMode+0x84>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2b31      	cmp	r3, #49	; 0x31
 8008798:	d9f0      	bls.n	800877c <USB_SetCurrentMode+0x60>
 800879a:	e001      	b.n	80087a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e005      	b.n	80087ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2b32      	cmp	r3, #50	; 0x32
 80087a4:	d101      	bne.n	80087aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e000      	b.n	80087ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80087be:	2300      	movs	r3, #0
 80087c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	019b      	lsls	r3, r3, #6
 80087c6:	f043 0220 	orr.w	r2, r3, #32
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3301      	adds	r3, #1
 80087d2:	60fb      	str	r3, [r7, #12]
 80087d4:	4a08      	ldr	r2, [pc, #32]	; (80087f8 <USB_FlushTxFifo+0x44>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d901      	bls.n	80087de <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e006      	b.n	80087ec <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	f003 0320 	and.w	r3, r3, #32
 80087e6:	2b20      	cmp	r3, #32
 80087e8:	d0f1      	beq.n	80087ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	00030d40 	.word	0x00030d40

080087fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2210      	movs	r2, #16
 800880c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3301      	adds	r3, #1
 8008812:	60fb      	str	r3, [r7, #12]
 8008814:	4a08      	ldr	r2, [pc, #32]	; (8008838 <USB_FlushRxFifo+0x3c>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d901      	bls.n	800881e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	e006      	b.n	800882c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	f003 0310 	and.w	r3, r3, #16
 8008826:	2b10      	cmp	r3, #16
 8008828:	d0f1      	beq.n	800880e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	00030d40 	.word	0x00030d40

0800883c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800883c:	b480      	push	{r7}
 800883e:	b08b      	sub	sp, #44	; 0x2c
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	4613      	mov	r3, r2
 8008848:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008852:	88fb      	ldrh	r3, [r7, #6]
 8008854:	089b      	lsrs	r3, r3, #2
 8008856:	b29b      	uxth	r3, r3
 8008858:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800885a:	88fb      	ldrh	r3, [r7, #6]
 800885c:	f003 0303 	and.w	r3, r3, #3
 8008860:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008862:	2300      	movs	r3, #0
 8008864:	623b      	str	r3, [r7, #32]
 8008866:	e014      	b.n	8008892 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	601a      	str	r2, [r3, #0]
    pDest++;
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	3301      	adds	r3, #1
 8008878:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887c:	3301      	adds	r3, #1
 800887e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	3301      	adds	r3, #1
 8008884:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008888:	3301      	adds	r3, #1
 800888a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	3301      	adds	r3, #1
 8008890:	623b      	str	r3, [r7, #32]
 8008892:	6a3a      	ldr	r2, [r7, #32]
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	429a      	cmp	r2, r3
 8008898:	d3e6      	bcc.n	8008868 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800889a:	8bfb      	ldrh	r3, [r7, #30]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d01e      	beq.n	80088de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088aa:	461a      	mov	r2, r3
 80088ac:	f107 0310 	add.w	r3, r7, #16
 80088b0:	6812      	ldr	r2, [r2, #0]
 80088b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	fa22 f303 	lsr.w	r3, r2, r3
 80088c0:	b2da      	uxtb	r2, r3
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	701a      	strb	r2, [r3, #0]
      i++;
 80088c6:	6a3b      	ldr	r3, [r7, #32]
 80088c8:	3301      	adds	r3, #1
 80088ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	3301      	adds	r3, #1
 80088d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80088d2:	8bfb      	ldrh	r3, [r7, #30]
 80088d4:	3b01      	subs	r3, #1
 80088d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80088d8:	8bfb      	ldrh	r3, [r7, #30]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1ea      	bne.n	80088b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80088de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	372c      	adds	r7, #44	; 0x2c
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	4013      	ands	r3, r2
 8008902:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008904:	68fb      	ldr	r3, [r7, #12]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008912:	b480      	push	{r7}
 8008914:	b083      	sub	sp, #12
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	f003 0301 	and.w	r3, r3, #1
}
 8008922:	4618      	mov	r0, r3
 8008924:	370c      	adds	r7, #12
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
	...

08008930 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008938:	2300      	movs	r3, #0
 800893a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	3301      	adds	r3, #1
 8008940:	60fb      	str	r3, [r7, #12]
 8008942:	4a13      	ldr	r2, [pc, #76]	; (8008990 <USB_CoreReset+0x60>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d901      	bls.n	800894c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008948:	2303      	movs	r3, #3
 800894a:	e01a      	b.n	8008982 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	691b      	ldr	r3, [r3, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	daf3      	bge.n	800893c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008954:	2300      	movs	r3, #0
 8008956:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	f043 0201 	orr.w	r2, r3, #1
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	3301      	adds	r3, #1
 8008968:	60fb      	str	r3, [r7, #12]
 800896a:	4a09      	ldr	r2, [pc, #36]	; (8008990 <USB_CoreReset+0x60>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d901      	bls.n	8008974 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e006      	b.n	8008982 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	2b01      	cmp	r3, #1
 800897e:	d0f1      	beq.n	8008964 <USB_CoreReset+0x34>

  return HAL_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3714      	adds	r7, #20
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	00030d40 	.word	0x00030d40

08008994 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008994:	b084      	sub	sp, #16
 8008996:	b580      	push	{r7, lr}
 8008998:	b084      	sub	sp, #16
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	f107 001c 	add.w	r0, r7, #28
 80089a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089b0:	461a      	mov	r2, r3
 80089b2:	2300      	movs	r3, #0
 80089b4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d018      	beq.n	8008a18 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d10a      	bne.n	8008a02 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089fa:	f043 0304 	orr.w	r3, r3, #4
 80089fe:	6013      	str	r3, [r2, #0]
 8008a00:	e014      	b.n	8008a2c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a10:	f023 0304 	bic.w	r3, r3, #4
 8008a14:	6013      	str	r3, [r2, #0]
 8008a16:	e009      	b.n	8008a2c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a26:	f023 0304 	bic.w	r3, r3, #4
 8008a2a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008a2c:	2110      	movs	r1, #16
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7ff fec0 	bl	80087b4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f7ff fee1 	bl	80087fc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	60fb      	str	r3, [r7, #12]
 8008a3e:	e015      	b.n	8008a6c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a52:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	015a      	lsls	r2, r3, #5
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a60:	461a      	mov	r2, r3
 8008a62:	2300      	movs	r3, #0
 8008a64:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	60fb      	str	r3, [r7, #12]
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d3e5      	bcc.n	8008a40 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a80:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00b      	beq.n	8008aa6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a94:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a13      	ldr	r2, [pc, #76]	; (8008ae8 <USB_HostInit+0x154>)
 8008a9a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a13      	ldr	r2, [pc, #76]	; (8008aec <USB_HostInit+0x158>)
 8008aa0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008aa4:	e009      	b.n	8008aba <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2280      	movs	r2, #128	; 0x80
 8008aaa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a10      	ldr	r2, [pc, #64]	; (8008af0 <USB_HostInit+0x15c>)
 8008ab0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a0f      	ldr	r2, [pc, #60]	; (8008af4 <USB_HostInit+0x160>)
 8008ab6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d105      	bne.n	8008acc <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	f043 0210 	orr.w	r2, r3, #16
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	699a      	ldr	r2, [r3, #24]
 8008ad0:	4b09      	ldr	r3, [pc, #36]	; (8008af8 <USB_HostInit+0x164>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr
 8008ae8:	01000200 	.word	0x01000200
 8008aec:	00e00300 	.word	0x00e00300
 8008af0:	00600080 	.word	0x00600080
 8008af4:	004000e0 	.word	0x004000e0
 8008af8:	a3200008 	.word	0xa3200008

08008afc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b1a:	f023 0303 	bic.w	r3, r3, #3
 8008b1e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	78fb      	ldrb	r3, [r7, #3]
 8008b2a:	f003 0303 	and.w	r3, r3, #3
 8008b2e:	68f9      	ldr	r1, [r7, #12]
 8008b30:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008b34:	4313      	orrs	r3, r2
 8008b36:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008b38:	78fb      	ldrb	r3, [r7, #3]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d107      	bne.n	8008b4e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b44:	461a      	mov	r2, r3
 8008b46:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008b4a:	6053      	str	r3, [r2, #4]
 8008b4c:	e009      	b.n	8008b62 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008b4e:	78fb      	ldrb	r3, [r7, #3]
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d106      	bne.n	8008b62 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f241 7370 	movw	r3, #6000	; 0x1770
 8008b60:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3714      	adds	r7, #20
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b82:	695b      	ldr	r3, [r3, #20]
 8008b84:	b29b      	uxth	r3, r3
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3714      	adds	r7, #20
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b089      	sub	sp, #36	; 0x24
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008ba2:	78fb      	ldrb	r3, [r7, #3]
 8008ba4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	015a      	lsls	r2, r3, #5
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	0c9b      	lsrs	r3, r3, #18
 8008bba:	f003 0303 	and.w	r3, r3, #3
 8008bbe:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	015a      	lsls	r2, r3, #5
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	0fdb      	lsrs	r3, r3, #31
 8008bd0:	f003 0301 	and.w	r3, r3, #1
 8008bd4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f003 0320 	and.w	r3, r3, #32
 8008bde:	2b20      	cmp	r3, #32
 8008be0:	d104      	bne.n	8008bec <USB_HC_Halt+0x5a>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d101      	bne.n	8008bec <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	e0e8      	b.n	8008dbe <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d002      	beq.n	8008bf8 <USB_HC_Halt+0x66>
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d173      	bne.n	8008ce0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	0151      	lsls	r1, r2, #5
 8008c0a:	69ba      	ldr	r2, [r7, #24]
 8008c0c:	440a      	add	r2, r1
 8008c0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c16:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	f003 0320 	and.w	r3, r3, #32
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f040 80cb 	bne.w	8008dbc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d143      	bne.n	8008cba <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	015a      	lsls	r2, r3, #5
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	4413      	add	r3, r2
 8008c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	0151      	lsls	r1, r2, #5
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	440a      	add	r2, r1
 8008c48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c50:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	015a      	lsls	r2, r3, #5
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	4413      	add	r3, r2
 8008c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	0151      	lsls	r1, r2, #5
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	440a      	add	r2, r1
 8008c68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c70:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	015a      	lsls	r2, r3, #5
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	4413      	add	r3, r2
 8008c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	0151      	lsls	r1, r2, #5
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	440a      	add	r2, r1
 8008c88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c90:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	3301      	adds	r3, #1
 8008c96:	61fb      	str	r3, [r7, #28]
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c9e:	d81d      	bhi.n	8008cdc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	015a      	lsls	r2, r3, #5
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cb6:	d0ec      	beq.n	8008c92 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008cb8:	e080      	b.n	8008dbc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	0151      	lsls	r1, r2, #5
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	440a      	add	r2, r1
 8008cd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008cd8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008cda:	e06f      	b.n	8008dbc <USB_HC_Halt+0x22a>
            break;
 8008cdc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008cde:	e06d      	b.n	8008dbc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	0151      	lsls	r1, r2, #5
 8008cf2:	69ba      	ldr	r2, [r7, #24]
 8008cf4:	440a      	add	r2, r1
 8008cf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cfe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d143      	bne.n	8008d98 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	697a      	ldr	r2, [r7, #20]
 8008d20:	0151      	lsls	r1, r2, #5
 8008d22:	69ba      	ldr	r2, [r7, #24]
 8008d24:	440a      	add	r2, r1
 8008d26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d2e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	0151      	lsls	r1, r2, #5
 8008d42:	69ba      	ldr	r2, [r7, #24]
 8008d44:	440a      	add	r2, r1
 8008d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d4e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	015a      	lsls	r2, r3, #5
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	0151      	lsls	r1, r2, #5
 8008d62:	69ba      	ldr	r2, [r7, #24]
 8008d64:	440a      	add	r2, r1
 8008d66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d6e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	3301      	adds	r3, #1
 8008d74:	61fb      	str	r3, [r7, #28]
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d7c:	d81d      	bhi.n	8008dba <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d94:	d0ec      	beq.n	8008d70 <USB_HC_Halt+0x1de>
 8008d96:	e011      	b.n	8008dbc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	015a      	lsls	r2, r3, #5
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	4413      	add	r3, r2
 8008da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	0151      	lsls	r1, r2, #5
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	440a      	add	r2, r1
 8008dae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	e000      	b.n	8008dbc <USB_HC_Halt+0x22a>
          break;
 8008dba:	bf00      	nop
    }
  }

  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3724      	adds	r7, #36	; 0x24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
	...

08008dcc <__NVIC_SetPriority>:
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	6039      	str	r1, [r7, #0]
 8008dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	db0a      	blt.n	8008df6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	b2da      	uxtb	r2, r3
 8008de4:	490c      	ldr	r1, [pc, #48]	; (8008e18 <__NVIC_SetPriority+0x4c>)
 8008de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dea:	0112      	lsls	r2, r2, #4
 8008dec:	b2d2      	uxtb	r2, r2
 8008dee:	440b      	add	r3, r1
 8008df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008df4:	e00a      	b.n	8008e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	4908      	ldr	r1, [pc, #32]	; (8008e1c <__NVIC_SetPriority+0x50>)
 8008dfc:	79fb      	ldrb	r3, [r7, #7]
 8008dfe:	f003 030f 	and.w	r3, r3, #15
 8008e02:	3b04      	subs	r3, #4
 8008e04:	0112      	lsls	r2, r2, #4
 8008e06:	b2d2      	uxtb	r2, r2
 8008e08:	440b      	add	r3, r1
 8008e0a:	761a      	strb	r2, [r3, #24]
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr
 8008e18:	e000e100 	.word	0xe000e100
 8008e1c:	e000ed00 	.word	0xe000ed00

08008e20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008e20:	b580      	push	{r7, lr}
 8008e22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008e24:	4b05      	ldr	r3, [pc, #20]	; (8008e3c <SysTick_Handler+0x1c>)
 8008e26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008e28:	f001 fd24 	bl	800a874 <xTaskGetSchedulerState>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d001      	beq.n	8008e36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008e32:	f002 fb09 	bl	800b448 <xPortSysTickHandler>
  }
}
 8008e36:	bf00      	nop
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	e000e010 	.word	0xe000e010

08008e40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008e40:	b580      	push	{r7, lr}
 8008e42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008e44:	2100      	movs	r1, #0
 8008e46:	f06f 0004 	mvn.w	r0, #4
 8008e4a:	f7ff ffbf 	bl	8008dcc <__NVIC_SetPriority>
#endif
}
 8008e4e:	bf00      	nop
 8008e50:	bd80      	pop	{r7, pc}
	...

08008e54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e5a:	f3ef 8305 	mrs	r3, IPSR
 8008e5e:	603b      	str	r3, [r7, #0]
  return(result);
 8008e60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008e66:	f06f 0305 	mvn.w	r3, #5
 8008e6a:	607b      	str	r3, [r7, #4]
 8008e6c:	e00c      	b.n	8008e88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008e6e:	4b0a      	ldr	r3, [pc, #40]	; (8008e98 <osKernelInitialize+0x44>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d105      	bne.n	8008e82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008e76:	4b08      	ldr	r3, [pc, #32]	; (8008e98 <osKernelInitialize+0x44>)
 8008e78:	2201      	movs	r2, #1
 8008e7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	607b      	str	r3, [r7, #4]
 8008e80:	e002      	b.n	8008e88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008e88:	687b      	ldr	r3, [r7, #4]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	20007f24 	.word	0x20007f24

08008e9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ea2:	f3ef 8305 	mrs	r3, IPSR
 8008ea6:	603b      	str	r3, [r7, #0]
  return(result);
 8008ea8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008eae:	f06f 0305 	mvn.w	r3, #5
 8008eb2:	607b      	str	r3, [r7, #4]
 8008eb4:	e010      	b.n	8008ed8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008eb6:	4b0b      	ldr	r3, [pc, #44]	; (8008ee4 <osKernelStart+0x48>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d109      	bne.n	8008ed2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008ebe:	f7ff ffbf 	bl	8008e40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008ec2:	4b08      	ldr	r3, [pc, #32]	; (8008ee4 <osKernelStart+0x48>)
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008ec8:	f001 f866 	bl	8009f98 <vTaskStartScheduler>
      stat = osOK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	607b      	str	r3, [r7, #4]
 8008ed0:	e002      	b.n	8008ed8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ed6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ed8:	687b      	ldr	r3, [r7, #4]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20007f24 	.word	0x20007f24

08008ee8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b08e      	sub	sp, #56	; 0x38
 8008eec:	af04      	add	r7, sp, #16
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ef8:	f3ef 8305 	mrs	r3, IPSR
 8008efc:	617b      	str	r3, [r7, #20]
  return(result);
 8008efe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d17e      	bne.n	8009002 <osThreadNew+0x11a>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d07b      	beq.n	8009002 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008f0a:	2380      	movs	r3, #128	; 0x80
 8008f0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008f0e:	2318      	movs	r3, #24
 8008f10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008f12:	2300      	movs	r3, #0
 8008f14:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d045      	beq.n	8008fae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d002      	beq.n	8008f30 <osThreadNew+0x48>
        name = attr->name;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d008      	beq.n	8008f56 <osThreadNew+0x6e>
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	2b38      	cmp	r3, #56	; 0x38
 8008f48:	d805      	bhi.n	8008f56 <osThreadNew+0x6e>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <osThreadNew+0x72>
        return (NULL);
 8008f56:	2300      	movs	r3, #0
 8008f58:	e054      	b.n	8009004 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d003      	beq.n	8008f6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	089b      	lsrs	r3, r3, #2
 8008f68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00e      	beq.n	8008f90 <osThreadNew+0xa8>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	2b5b      	cmp	r3, #91	; 0x5b
 8008f78:	d90a      	bls.n	8008f90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d006      	beq.n	8008f90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d002      	beq.n	8008f90 <osThreadNew+0xa8>
        mem = 1;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	61bb      	str	r3, [r7, #24]
 8008f8e:	e010      	b.n	8008fb2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10c      	bne.n	8008fb2 <osThreadNew+0xca>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d108      	bne.n	8008fb2 <osThreadNew+0xca>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d104      	bne.n	8008fb2 <osThreadNew+0xca>
          mem = 0;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	61bb      	str	r3, [r7, #24]
 8008fac:	e001      	b.n	8008fb2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d110      	bne.n	8008fda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008fc0:	9202      	str	r2, [sp, #8]
 8008fc2:	9301      	str	r3, [sp, #4]
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	6a3a      	ldr	r2, [r7, #32]
 8008fcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 fe0c 	bl	8009bec <xTaskCreateStatic>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	613b      	str	r3, [r7, #16]
 8008fd8:	e013      	b.n	8009002 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d110      	bne.n	8009002 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008fe0:	6a3b      	ldr	r3, [r7, #32]
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	f107 0310 	add.w	r3, r7, #16
 8008fe8:	9301      	str	r3, [sp, #4]
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f000 fe57 	bl	8009ca6 <xTaskCreate>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d001      	beq.n	8009002 <osThreadNew+0x11a>
            hTask = NULL;
 8008ffe:	2300      	movs	r3, #0
 8009000:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009002:	693b      	ldr	r3, [r7, #16]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3728      	adds	r7, #40	; 0x28
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009014:	f3ef 8305 	mrs	r3, IPSR
 8009018:	60bb      	str	r3, [r7, #8]
  return(result);
 800901a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800901c:	2b00      	cmp	r3, #0
 800901e:	d003      	beq.n	8009028 <osDelay+0x1c>
    stat = osErrorISR;
 8009020:	f06f 0305 	mvn.w	r3, #5
 8009024:	60fb      	str	r3, [r7, #12]
 8009026:	e007      	b.n	8009038 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009028:	2300      	movs	r3, #0
 800902a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d002      	beq.n	8009038 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 ff7c 	bl	8009f30 <vTaskDelay>
    }
  }

  return (stat);
 8009038:	68fb      	ldr	r3, [r7, #12]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
	...

08009044 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	4a07      	ldr	r2, [pc, #28]	; (8009070 <vApplicationGetIdleTaskMemory+0x2c>)
 8009054:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	4a06      	ldr	r2, [pc, #24]	; (8009074 <vApplicationGetIdleTaskMemory+0x30>)
 800905a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2280      	movs	r2, #128	; 0x80
 8009060:	601a      	str	r2, [r3, #0]
}
 8009062:	bf00      	nop
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	20007f28 	.word	0x20007f28
 8009074:	20007f84 	.word	0x20007f84

08009078 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	4a07      	ldr	r2, [pc, #28]	; (80090a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009088:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	4a06      	ldr	r2, [pc, #24]	; (80090a8 <vApplicationGetTimerTaskMemory+0x30>)
 800908e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009096:	601a      	str	r2, [r3, #0]
}
 8009098:	bf00      	nop
 800909a:	3714      	adds	r7, #20
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr
 80090a4:	20008184 	.word	0x20008184
 80090a8:	200081e0 	.word	0x200081e0

080090ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f103 0208 	add.w	r2, r3, #8
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f103 0208 	add.w	r2, r3, #8
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f103 0208 	add.w	r2, r3, #8
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090fa:	bf00      	nop
 80090fc:	370c      	adds	r7, #12
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009106:	b480      	push	{r7}
 8009108:	b085      	sub	sp, #20
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	689a      	ldr	r2, [r3, #8]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	683a      	ldr	r2, [r7, #0]
 800912a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	683a      	ldr	r2, [r7, #0]
 8009130:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	1c5a      	adds	r2, r3, #1
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	601a      	str	r2, [r3, #0]
}
 8009142:	bf00      	nop
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr

0800914e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800914e:	b480      	push	{r7}
 8009150:	b085      	sub	sp, #20
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009164:	d103      	bne.n	800916e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	60fb      	str	r3, [r7, #12]
 800916c:	e00c      	b.n	8009188 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	3308      	adds	r3, #8
 8009172:	60fb      	str	r3, [r7, #12]
 8009174:	e002      	b.n	800917c <vListInsert+0x2e>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	60fb      	str	r3, [r7, #12]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68ba      	ldr	r2, [r7, #8]
 8009184:	429a      	cmp	r2, r3
 8009186:	d2f6      	bcs.n	8009176 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	685a      	ldr	r2, [r3, #4]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	683a      	ldr	r2, [r7, #0]
 8009196:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	1c5a      	adds	r2, r3, #1
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	601a      	str	r2, [r3, #0]
}
 80091b4:	bf00      	nop
 80091b6:	3714      	adds	r7, #20
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	6892      	ldr	r2, [r2, #8]
 80091d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	6852      	ldr	r2, [r2, #4]
 80091e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d103      	bne.n	80091f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	689a      	ldr	r2, [r3, #8]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	1e5a      	subs	r2, r3, #1
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3714      	adds	r7, #20
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10a      	bne.n	800923e <xQueueGenericReset+0x2a>
	__asm volatile
 8009228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922c:	f383 8811 	msr	BASEPRI, r3
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	60bb      	str	r3, [r7, #8]
}
 800923a:	bf00      	nop
 800923c:	e7fe      	b.n	800923c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800923e:	f002 f871 	bl	800b324 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800924a:	68f9      	ldr	r1, [r7, #12]
 800924c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800924e:	fb01 f303 	mul.w	r3, r1, r3
 8009252:	441a      	add	r2, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800926e:	3b01      	subs	r3, #1
 8009270:	68f9      	ldr	r1, [r7, #12]
 8009272:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009274:	fb01 f303 	mul.w	r3, r1, r3
 8009278:	441a      	add	r2, r3
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	22ff      	movs	r2, #255	; 0xff
 8009282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	22ff      	movs	r2, #255	; 0xff
 800928a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d114      	bne.n	80092be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d01a      	beq.n	80092d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	3310      	adds	r3, #16
 80092a0:	4618      	mov	r0, r3
 80092a2:	f001 f903 	bl	800a4ac <xTaskRemoveFromEventList>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d012      	beq.n	80092d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80092ac:	4b0c      	ldr	r3, [pc, #48]	; (80092e0 <xQueueGenericReset+0xcc>)
 80092ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092b2:	601a      	str	r2, [r3, #0]
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	e009      	b.n	80092d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	3310      	adds	r3, #16
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7ff fef2 	bl	80090ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	3324      	adds	r3, #36	; 0x24
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7ff feed 	bl	80090ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80092d2:	f002 f857 	bl	800b384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80092d6:	2301      	movs	r3, #1
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	e000ed04 	.word	0xe000ed04

080092e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b08e      	sub	sp, #56	; 0x38
 80092e8:	af02      	add	r7, sp, #8
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]
 80092f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10a      	bne.n	800930e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80092f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fc:	f383 8811 	msr	BASEPRI, r3
 8009300:	f3bf 8f6f 	isb	sy
 8009304:	f3bf 8f4f 	dsb	sy
 8009308:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800930a:	bf00      	nop
 800930c:	e7fe      	b.n	800930c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10a      	bne.n	800932a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009326:	bf00      	nop
 8009328:	e7fe      	b.n	8009328 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <xQueueGenericCreateStatic+0x52>
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d001      	beq.n	800933a <xQueueGenericCreateStatic+0x56>
 8009336:	2301      	movs	r3, #1
 8009338:	e000      	b.n	800933c <xQueueGenericCreateStatic+0x58>
 800933a:	2300      	movs	r3, #0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10a      	bne.n	8009356 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	623b      	str	r3, [r7, #32]
}
 8009352:	bf00      	nop
 8009354:	e7fe      	b.n	8009354 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d102      	bne.n	8009362 <xQueueGenericCreateStatic+0x7e>
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d101      	bne.n	8009366 <xQueueGenericCreateStatic+0x82>
 8009362:	2301      	movs	r3, #1
 8009364:	e000      	b.n	8009368 <xQueueGenericCreateStatic+0x84>
 8009366:	2300      	movs	r3, #0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10a      	bne.n	8009382 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	61fb      	str	r3, [r7, #28]
}
 800937e:	bf00      	nop
 8009380:	e7fe      	b.n	8009380 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009382:	2350      	movs	r3, #80	; 0x50
 8009384:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	2b50      	cmp	r3, #80	; 0x50
 800938a:	d00a      	beq.n	80093a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800938c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009390:	f383 8811 	msr	BASEPRI, r3
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	61bb      	str	r3, [r7, #24]
}
 800939e:	bf00      	nop
 80093a0:	e7fe      	b.n	80093a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80093a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80093a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00d      	beq.n	80093ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80093ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b0:	2201      	movs	r2, #1
 80093b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80093ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	4613      	mov	r3, r2
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	68b9      	ldr	r1, [r7, #8]
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f000 f805 	bl	80093d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80093ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3730      	adds	r7, #48	; 0x30
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	607a      	str	r2, [r7, #4]
 80093e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d103      	bne.n	80093f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	69ba      	ldr	r2, [r7, #24]
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	e002      	b.n	80093f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009402:	2101      	movs	r1, #1
 8009404:	69b8      	ldr	r0, [r7, #24]
 8009406:	f7ff ff05 	bl	8009214 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	78fa      	ldrb	r2, [r7, #3]
 800940e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009412:	bf00      	nop
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
	...

0800941c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b08e      	sub	sp, #56	; 0x38
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
 8009428:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800942a:	2300      	movs	r3, #0
 800942c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009434:	2b00      	cmp	r3, #0
 8009436:	d10a      	bne.n	800944e <xQueueGenericSend+0x32>
	__asm volatile
 8009438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943c:	f383 8811 	msr	BASEPRI, r3
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800944a:	bf00      	nop
 800944c:	e7fe      	b.n	800944c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d103      	bne.n	800945c <xQueueGenericSend+0x40>
 8009454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009458:	2b00      	cmp	r3, #0
 800945a:	d101      	bne.n	8009460 <xQueueGenericSend+0x44>
 800945c:	2301      	movs	r3, #1
 800945e:	e000      	b.n	8009462 <xQueueGenericSend+0x46>
 8009460:	2300      	movs	r3, #0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10a      	bne.n	800947c <xQueueGenericSend+0x60>
	__asm volatile
 8009466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009478:	bf00      	nop
 800947a:	e7fe      	b.n	800947a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	2b02      	cmp	r3, #2
 8009480:	d103      	bne.n	800948a <xQueueGenericSend+0x6e>
 8009482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009486:	2b01      	cmp	r3, #1
 8009488:	d101      	bne.n	800948e <xQueueGenericSend+0x72>
 800948a:	2301      	movs	r3, #1
 800948c:	e000      	b.n	8009490 <xQueueGenericSend+0x74>
 800948e:	2300      	movs	r3, #0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d10a      	bne.n	80094aa <xQueueGenericSend+0x8e>
	__asm volatile
 8009494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009498:	f383 8811 	msr	BASEPRI, r3
 800949c:	f3bf 8f6f 	isb	sy
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	623b      	str	r3, [r7, #32]
}
 80094a6:	bf00      	nop
 80094a8:	e7fe      	b.n	80094a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094aa:	f001 f9e3 	bl	800a874 <xTaskGetSchedulerState>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d102      	bne.n	80094ba <xQueueGenericSend+0x9e>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d101      	bne.n	80094be <xQueueGenericSend+0xa2>
 80094ba:	2301      	movs	r3, #1
 80094bc:	e000      	b.n	80094c0 <xQueueGenericSend+0xa4>
 80094be:	2300      	movs	r3, #0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10a      	bne.n	80094da <xQueueGenericSend+0xbe>
	__asm volatile
 80094c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	61fb      	str	r3, [r7, #28]
}
 80094d6:	bf00      	nop
 80094d8:	e7fe      	b.n	80094d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094da:	f001 ff23 	bl	800b324 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d302      	bcc.n	80094f0 <xQueueGenericSend+0xd4>
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d129      	bne.n	8009544 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094f0:	683a      	ldr	r2, [r7, #0]
 80094f2:	68b9      	ldr	r1, [r7, #8]
 80094f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094f6:	f000 fa0b 	bl	8009910 <prvCopyDataToQueue>
 80094fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	2b00      	cmp	r3, #0
 8009502:	d010      	beq.n	8009526 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009506:	3324      	adds	r3, #36	; 0x24
 8009508:	4618      	mov	r0, r3
 800950a:	f000 ffcf 	bl	800a4ac <xTaskRemoveFromEventList>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d013      	beq.n	800953c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009514:	4b3f      	ldr	r3, [pc, #252]	; (8009614 <xQueueGenericSend+0x1f8>)
 8009516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800951a:	601a      	str	r2, [r3, #0]
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	f3bf 8f6f 	isb	sy
 8009524:	e00a      	b.n	800953c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009528:	2b00      	cmp	r3, #0
 800952a:	d007      	beq.n	800953c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800952c:	4b39      	ldr	r3, [pc, #228]	; (8009614 <xQueueGenericSend+0x1f8>)
 800952e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800953c:	f001 ff22 	bl	800b384 <vPortExitCritical>
				return pdPASS;
 8009540:	2301      	movs	r3, #1
 8009542:	e063      	b.n	800960c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d103      	bne.n	8009552 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800954a:	f001 ff1b 	bl	800b384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800954e:	2300      	movs	r3, #0
 8009550:	e05c      	b.n	800960c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009554:	2b00      	cmp	r3, #0
 8009556:	d106      	bne.n	8009566 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009558:	f107 0314 	add.w	r3, r7, #20
 800955c:	4618      	mov	r0, r3
 800955e:	f001 f82f 	bl	800a5c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009562:	2301      	movs	r3, #1
 8009564:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009566:	f001 ff0d 	bl	800b384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800956a:	f000 fd7b 	bl	800a064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800956e:	f001 fed9 	bl	800b324 <vPortEnterCritical>
 8009572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009578:	b25b      	sxtb	r3, r3
 800957a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800957e:	d103      	bne.n	8009588 <xQueueGenericSend+0x16c>
 8009580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009582:	2200      	movs	r2, #0
 8009584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800958e:	b25b      	sxtb	r3, r3
 8009590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009594:	d103      	bne.n	800959e <xQueueGenericSend+0x182>
 8009596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009598:	2200      	movs	r2, #0
 800959a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800959e:	f001 fef1 	bl	800b384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095a2:	1d3a      	adds	r2, r7, #4
 80095a4:	f107 0314 	add.w	r3, r7, #20
 80095a8:	4611      	mov	r1, r2
 80095aa:	4618      	mov	r0, r3
 80095ac:	f001 f81e 	bl	800a5ec <xTaskCheckForTimeOut>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d124      	bne.n	8009600 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80095b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095b8:	f000 faa2 	bl	8009b00 <prvIsQueueFull>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d018      	beq.n	80095f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80095c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c4:	3310      	adds	r3, #16
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	4611      	mov	r1, r2
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 ff1e 	bl	800a40c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80095d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095d2:	f000 fa2d 	bl	8009a30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80095d6:	f000 fd53 	bl	800a080 <xTaskResumeAll>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f47f af7c 	bne.w	80094da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80095e2:	4b0c      	ldr	r3, [pc, #48]	; (8009614 <xQueueGenericSend+0x1f8>)
 80095e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095e8:	601a      	str	r2, [r3, #0]
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	e772      	b.n	80094da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80095f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095f6:	f000 fa1b 	bl	8009a30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095fa:	f000 fd41 	bl	800a080 <xTaskResumeAll>
 80095fe:	e76c      	b.n	80094da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009602:	f000 fa15 	bl	8009a30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009606:	f000 fd3b 	bl	800a080 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800960a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800960c:	4618      	mov	r0, r3
 800960e:	3738      	adds	r7, #56	; 0x38
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	e000ed04 	.word	0xe000ed04

08009618 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b090      	sub	sp, #64	; 0x40
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800962a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10a      	bne.n	8009646 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009642:	bf00      	nop
 8009644:	e7fe      	b.n	8009644 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d103      	bne.n	8009654 <xQueueGenericSendFromISR+0x3c>
 800964c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009650:	2b00      	cmp	r3, #0
 8009652:	d101      	bne.n	8009658 <xQueueGenericSendFromISR+0x40>
 8009654:	2301      	movs	r3, #1
 8009656:	e000      	b.n	800965a <xQueueGenericSendFromISR+0x42>
 8009658:	2300      	movs	r3, #0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10a      	bne.n	8009674 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009670:	bf00      	nop
 8009672:	e7fe      	b.n	8009672 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	2b02      	cmp	r3, #2
 8009678:	d103      	bne.n	8009682 <xQueueGenericSendFromISR+0x6a>
 800967a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800967e:	2b01      	cmp	r3, #1
 8009680:	d101      	bne.n	8009686 <xQueueGenericSendFromISR+0x6e>
 8009682:	2301      	movs	r3, #1
 8009684:	e000      	b.n	8009688 <xQueueGenericSendFromISR+0x70>
 8009686:	2300      	movs	r3, #0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10a      	bne.n	80096a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800968c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	623b      	str	r3, [r7, #32]
}
 800969e:	bf00      	nop
 80096a0:	e7fe      	b.n	80096a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096a2:	f001 ff21 	bl	800b4e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80096a6:	f3ef 8211 	mrs	r2, BASEPRI
 80096aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	61fa      	str	r2, [r7, #28]
 80096bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80096be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d302      	bcc.n	80096d4 <xQueueGenericSendFromISR+0xbc>
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d12f      	bne.n	8009734 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80096d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096e4:	683a      	ldr	r2, [r7, #0]
 80096e6:	68b9      	ldr	r1, [r7, #8]
 80096e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096ea:	f000 f911 	bl	8009910 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80096ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80096f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096f6:	d112      	bne.n	800971e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d016      	beq.n	800972e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009702:	3324      	adds	r3, #36	; 0x24
 8009704:	4618      	mov	r0, r3
 8009706:	f000 fed1 	bl	800a4ac <xTaskRemoveFromEventList>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00e      	beq.n	800972e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00b      	beq.n	800972e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2201      	movs	r2, #1
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	e007      	b.n	800972e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800971e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009722:	3301      	adds	r3, #1
 8009724:	b2db      	uxtb	r3, r3
 8009726:	b25a      	sxtb	r2, r3
 8009728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800972e:	2301      	movs	r3, #1
 8009730:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009732:	e001      	b.n	8009738 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009734:	2300      	movs	r3, #0
 8009736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800973a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009742:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009746:	4618      	mov	r0, r3
 8009748:	3740      	adds	r7, #64	; 0x40
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
	...

08009750 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b08c      	sub	sp, #48	; 0x30
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800975c:	2300      	movs	r3, #0
 800975e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10a      	bne.n	8009780 <xQueueReceive+0x30>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	623b      	str	r3, [r7, #32]
}
 800977c:	bf00      	nop
 800977e:	e7fe      	b.n	800977e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d103      	bne.n	800978e <xQueueReceive+0x3e>
 8009786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978a:	2b00      	cmp	r3, #0
 800978c:	d101      	bne.n	8009792 <xQueueReceive+0x42>
 800978e:	2301      	movs	r3, #1
 8009790:	e000      	b.n	8009794 <xQueueReceive+0x44>
 8009792:	2300      	movs	r3, #0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10a      	bne.n	80097ae <xQueueReceive+0x5e>
	__asm volatile
 8009798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979c:	f383 8811 	msr	BASEPRI, r3
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	61fb      	str	r3, [r7, #28]
}
 80097aa:	bf00      	nop
 80097ac:	e7fe      	b.n	80097ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097ae:	f001 f861 	bl	800a874 <xTaskGetSchedulerState>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d102      	bne.n	80097be <xQueueReceive+0x6e>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d101      	bne.n	80097c2 <xQueueReceive+0x72>
 80097be:	2301      	movs	r3, #1
 80097c0:	e000      	b.n	80097c4 <xQueueReceive+0x74>
 80097c2:	2300      	movs	r3, #0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10a      	bne.n	80097de <xQueueReceive+0x8e>
	__asm volatile
 80097c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	61bb      	str	r3, [r7, #24]
}
 80097da:	bf00      	nop
 80097dc:	e7fe      	b.n	80097dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097de:	f001 fda1 	bl	800b324 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d01f      	beq.n	800982e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80097ee:	68b9      	ldr	r1, [r7, #8]
 80097f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097f2:	f000 f8f7 	bl	80099e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80097f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f8:	1e5a      	subs	r2, r3, #1
 80097fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00f      	beq.n	8009826 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009808:	3310      	adds	r3, #16
 800980a:	4618      	mov	r0, r3
 800980c:	f000 fe4e 	bl	800a4ac <xTaskRemoveFromEventList>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d007      	beq.n	8009826 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009816:	4b3d      	ldr	r3, [pc, #244]	; (800990c <xQueueReceive+0x1bc>)
 8009818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800981c:	601a      	str	r2, [r3, #0]
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009826:	f001 fdad 	bl	800b384 <vPortExitCritical>
				return pdPASS;
 800982a:	2301      	movs	r3, #1
 800982c:	e069      	b.n	8009902 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d103      	bne.n	800983c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009834:	f001 fda6 	bl	800b384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009838:	2300      	movs	r3, #0
 800983a:	e062      	b.n	8009902 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800983c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983e:	2b00      	cmp	r3, #0
 8009840:	d106      	bne.n	8009850 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009842:	f107 0310 	add.w	r3, r7, #16
 8009846:	4618      	mov	r0, r3
 8009848:	f000 feba 	bl	800a5c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800984c:	2301      	movs	r3, #1
 800984e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009850:	f001 fd98 	bl	800b384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009854:	f000 fc06 	bl	800a064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009858:	f001 fd64 	bl	800b324 <vPortEnterCritical>
 800985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009862:	b25b      	sxtb	r3, r3
 8009864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009868:	d103      	bne.n	8009872 <xQueueReceive+0x122>
 800986a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986c:	2200      	movs	r2, #0
 800986e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009878:	b25b      	sxtb	r3, r3
 800987a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800987e:	d103      	bne.n	8009888 <xQueueReceive+0x138>
 8009880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009882:	2200      	movs	r2, #0
 8009884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009888:	f001 fd7c 	bl	800b384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800988c:	1d3a      	adds	r2, r7, #4
 800988e:	f107 0310 	add.w	r3, r7, #16
 8009892:	4611      	mov	r1, r2
 8009894:	4618      	mov	r0, r3
 8009896:	f000 fea9 	bl	800a5ec <xTaskCheckForTimeOut>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d123      	bne.n	80098e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098a2:	f000 f917 	bl	8009ad4 <prvIsQueueEmpty>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d017      	beq.n	80098dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80098ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ae:	3324      	adds	r3, #36	; 0x24
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	4611      	mov	r1, r2
 80098b4:	4618      	mov	r0, r3
 80098b6:	f000 fda9 	bl	800a40c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80098ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098bc:	f000 f8b8 	bl	8009a30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80098c0:	f000 fbde 	bl	800a080 <xTaskResumeAll>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d189      	bne.n	80097de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80098ca:	4b10      	ldr	r3, [pc, #64]	; (800990c <xQueueReceive+0x1bc>)
 80098cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098d0:	601a      	str	r2, [r3, #0]
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	e780      	b.n	80097de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80098dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098de:	f000 f8a7 	bl	8009a30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098e2:	f000 fbcd 	bl	800a080 <xTaskResumeAll>
 80098e6:	e77a      	b.n	80097de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80098e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098ea:	f000 f8a1 	bl	8009a30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098ee:	f000 fbc7 	bl	800a080 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098f4:	f000 f8ee 	bl	8009ad4 <prvIsQueueEmpty>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f43f af6f 	beq.w	80097de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009900:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009902:	4618      	mov	r0, r3
 8009904:	3730      	adds	r7, #48	; 0x30
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	e000ed04 	.word	0xe000ed04

08009910 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b086      	sub	sp, #24
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800991c:	2300      	movs	r3, #0
 800991e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009924:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10d      	bne.n	800994a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d14d      	bne.n	80099d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	4618      	mov	r0, r3
 800993c:	f000 ffb8 	bl	800a8b0 <xTaskPriorityDisinherit>
 8009940:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2200      	movs	r2, #0
 8009946:	609a      	str	r2, [r3, #8]
 8009948:	e043      	b.n	80099d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d119      	bne.n	8009984 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6858      	ldr	r0, [r3, #4]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009958:	461a      	mov	r2, r3
 800995a:	68b9      	ldr	r1, [r7, #8]
 800995c:	f00d fa0e 	bl	8016d7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009968:	441a      	add	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	685a      	ldr	r2, [r3, #4]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	429a      	cmp	r2, r3
 8009978:	d32b      	bcc.n	80099d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	605a      	str	r2, [r3, #4]
 8009982:	e026      	b.n	80099d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	68d8      	ldr	r0, [r3, #12]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998c:	461a      	mov	r2, r3
 800998e:	68b9      	ldr	r1, [r7, #8]
 8009990:	f00d f9f4 	bl	8016d7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	68da      	ldr	r2, [r3, #12]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999c:	425b      	negs	r3, r3
 800999e:	441a      	add	r2, r3
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	68da      	ldr	r2, [r3, #12]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d207      	bcs.n	80099c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	689a      	ldr	r2, [r3, #8]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b8:	425b      	negs	r3, r3
 80099ba:	441a      	add	r2, r3
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d105      	bne.n	80099d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	3b01      	subs	r3, #1
 80099d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	1c5a      	adds	r2, r3, #1
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80099da:	697b      	ldr	r3, [r7, #20]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3718      	adds	r7, #24
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d018      	beq.n	8009a28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68da      	ldr	r2, [r3, #12]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fe:	441a      	add	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	68da      	ldr	r2, [r3, #12]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d303      	bcc.n	8009a18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	68d9      	ldr	r1, [r3, #12]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a20:	461a      	mov	r2, r3
 8009a22:	6838      	ldr	r0, [r7, #0]
 8009a24:	f00d f9aa 	bl	8016d7c <memcpy>
	}
}
 8009a28:	bf00      	nop
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a38:	f001 fc74 	bl	800b324 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a44:	e011      	b.n	8009a6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d012      	beq.n	8009a74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	3324      	adds	r3, #36	; 0x24
 8009a52:	4618      	mov	r0, r3
 8009a54:	f000 fd2a 	bl	800a4ac <xTaskRemoveFromEventList>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d001      	beq.n	8009a62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a5e:	f000 fe27 	bl	800a6b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	dce9      	bgt.n	8009a46 <prvUnlockQueue+0x16>
 8009a72:	e000      	b.n	8009a76 <prvUnlockQueue+0x46>
					break;
 8009a74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	22ff      	movs	r2, #255	; 0xff
 8009a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009a7e:	f001 fc81 	bl	800b384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009a82:	f001 fc4f 	bl	800b324 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a8e:	e011      	b.n	8009ab4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d012      	beq.n	8009abe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	3310      	adds	r3, #16
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f000 fd05 	bl	800a4ac <xTaskRemoveFromEventList>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d001      	beq.n	8009aac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009aa8:	f000 fe02 	bl	800a6b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009aac:	7bbb      	ldrb	r3, [r7, #14]
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	dce9      	bgt.n	8009a90 <prvUnlockQueue+0x60>
 8009abc:	e000      	b.n	8009ac0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009abe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	22ff      	movs	r2, #255	; 0xff
 8009ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009ac8:	f001 fc5c 	bl	800b384 <vPortExitCritical>
}
 8009acc:	bf00      	nop
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009adc:	f001 fc22 	bl	800b324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d102      	bne.n	8009aee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	60fb      	str	r3, [r7, #12]
 8009aec:	e001      	b.n	8009af2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009aee:	2300      	movs	r3, #0
 8009af0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009af2:	f001 fc47 	bl	800b384 <vPortExitCritical>

	return xReturn;
 8009af6:	68fb      	ldr	r3, [r7, #12]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b08:	f001 fc0c 	bl	800b324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d102      	bne.n	8009b1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	60fb      	str	r3, [r7, #12]
 8009b1c:	e001      	b.n	8009b22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b22:	f001 fc2f 	bl	800b384 <vPortExitCritical>

	return xReturn;
 8009b26:	68fb      	ldr	r3, [r7, #12]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	60fb      	str	r3, [r7, #12]
 8009b3e:	e014      	b.n	8009b6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009b40:	4a0f      	ldr	r2, [pc, #60]	; (8009b80 <vQueueAddToRegistry+0x50>)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10b      	bne.n	8009b64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009b4c:	490c      	ldr	r1, [pc, #48]	; (8009b80 <vQueueAddToRegistry+0x50>)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	683a      	ldr	r2, [r7, #0]
 8009b52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009b56:	4a0a      	ldr	r2, [pc, #40]	; (8009b80 <vQueueAddToRegistry+0x50>)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	00db      	lsls	r3, r3, #3
 8009b5c:	4413      	add	r3, r2
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009b62:	e006      	b.n	8009b72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	3301      	adds	r3, #1
 8009b68:	60fb      	str	r3, [r7, #12]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b07      	cmp	r3, #7
 8009b6e:	d9e7      	bls.n	8009b40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009b70:	bf00      	nop
 8009b72:	bf00      	nop
 8009b74:	3714      	adds	r7, #20
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	200109f4 	.word	0x200109f4

08009b84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009b94:	f001 fbc6 	bl	800b324 <vPortEnterCritical>
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b9e:	b25b      	sxtb	r3, r3
 8009ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ba4:	d103      	bne.n	8009bae <vQueueWaitForMessageRestricted+0x2a>
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bb4:	b25b      	sxtb	r3, r3
 8009bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bba:	d103      	bne.n	8009bc4 <vQueueWaitForMessageRestricted+0x40>
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bc4:	f001 fbde 	bl	800b384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d106      	bne.n	8009bde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	3324      	adds	r3, #36	; 0x24
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	68b9      	ldr	r1, [r7, #8]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f000 fc3b 	bl	800a454 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009bde:	6978      	ldr	r0, [r7, #20]
 8009be0:	f7ff ff26 	bl	8009a30 <prvUnlockQueue>
	}
 8009be4:	bf00      	nop
 8009be6:	3718      	adds	r7, #24
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b08e      	sub	sp, #56	; 0x38
 8009bf0:	af04      	add	r7, sp, #16
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	607a      	str	r2, [r7, #4]
 8009bf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d10a      	bne.n	8009c16 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	623b      	str	r3, [r7, #32]
}
 8009c12:	bf00      	nop
 8009c14:	e7fe      	b.n	8009c14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10a      	bne.n	8009c32 <xTaskCreateStatic+0x46>
	__asm volatile
 8009c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	61fb      	str	r3, [r7, #28]
}
 8009c2e:	bf00      	nop
 8009c30:	e7fe      	b.n	8009c30 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009c32:	235c      	movs	r3, #92	; 0x5c
 8009c34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	2b5c      	cmp	r3, #92	; 0x5c
 8009c3a:	d00a      	beq.n	8009c52 <xTaskCreateStatic+0x66>
	__asm volatile
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	61bb      	str	r3, [r7, #24]
}
 8009c4e:	bf00      	nop
 8009c50:	e7fe      	b.n	8009c50 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009c52:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d01e      	beq.n	8009c98 <xTaskCreateStatic+0xac>
 8009c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d01b      	beq.n	8009c98 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c62:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c68:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c72:	2300      	movs	r3, #0
 8009c74:	9303      	str	r3, [sp, #12]
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	9302      	str	r3, [sp, #8]
 8009c7a:	f107 0314 	add.w	r3, r7, #20
 8009c7e:	9301      	str	r3, [sp, #4]
 8009c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	68b9      	ldr	r1, [r7, #8]
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f000 f850 	bl	8009d30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c92:	f000 f8dd 	bl	8009e50 <prvAddNewTaskToReadyList>
 8009c96:	e001      	b.n	8009c9c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009c9c:	697b      	ldr	r3, [r7, #20]
	}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3728      	adds	r7, #40	; 0x28
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b08c      	sub	sp, #48	; 0x30
 8009caa:	af04      	add	r7, sp, #16
 8009cac:	60f8      	str	r0, [r7, #12]
 8009cae:	60b9      	str	r1, [r7, #8]
 8009cb0:	603b      	str	r3, [r7, #0]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009cb6:	88fb      	ldrh	r3, [r7, #6]
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f001 fc54 	bl	800b568 <pvPortMalloc>
 8009cc0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00e      	beq.n	8009ce6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009cc8:	205c      	movs	r0, #92	; 0x5c
 8009cca:	f001 fc4d 	bl	800b568 <pvPortMalloc>
 8009cce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d003      	beq.n	8009cde <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	697a      	ldr	r2, [r7, #20]
 8009cda:	631a      	str	r2, [r3, #48]	; 0x30
 8009cdc:	e005      	b.n	8009cea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009cde:	6978      	ldr	r0, [r7, #20]
 8009ce0:	f001 fd0e 	bl	800b700 <vPortFree>
 8009ce4:	e001      	b.n	8009cea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d017      	beq.n	8009d20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009cf8:	88fa      	ldrh	r2, [r7, #6]
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	9303      	str	r3, [sp, #12]
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	9302      	str	r3, [sp, #8]
 8009d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d04:	9301      	str	r3, [sp, #4]
 8009d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	68b9      	ldr	r1, [r7, #8]
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f000 f80e 	bl	8009d30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d14:	69f8      	ldr	r0, [r7, #28]
 8009d16:	f000 f89b 	bl	8009e50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	61bb      	str	r3, [r7, #24]
 8009d1e:	e002      	b.n	8009d26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009d26:	69bb      	ldr	r3, [r7, #24]
	}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3720      	adds	r7, #32
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b088      	sub	sp, #32
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
 8009d3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	461a      	mov	r2, r3
 8009d48:	21a5      	movs	r1, #165	; 0xa5
 8009d4a:	f00d f83f 	bl	8016dcc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	4413      	add	r3, r2
 8009d5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	f023 0307 	bic.w	r3, r3, #7
 8009d66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	f003 0307 	and.w	r3, r3, #7
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00a      	beq.n	8009d88 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d76:	f383 8811 	msr	BASEPRI, r3
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	617b      	str	r3, [r7, #20]
}
 8009d84:	bf00      	nop
 8009d86:	e7fe      	b.n	8009d86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d01f      	beq.n	8009dce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d8e:	2300      	movs	r3, #0
 8009d90:	61fb      	str	r3, [r7, #28]
 8009d92:	e012      	b.n	8009dba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	4413      	add	r3, r2
 8009d9a:	7819      	ldrb	r1, [r3, #0]
 8009d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d9e:	69fb      	ldr	r3, [r7, #28]
 8009da0:	4413      	add	r3, r2
 8009da2:	3334      	adds	r3, #52	; 0x34
 8009da4:	460a      	mov	r2, r1
 8009da6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	4413      	add	r3, r2
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d006      	beq.n	8009dc2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	3301      	adds	r3, #1
 8009db8:	61fb      	str	r3, [r7, #28]
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	2b0f      	cmp	r3, #15
 8009dbe:	d9e9      	bls.n	8009d94 <prvInitialiseNewTask+0x64>
 8009dc0:	e000      	b.n	8009dc4 <prvInitialiseNewTask+0x94>
			{
				break;
 8009dc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009dcc:	e003      	b.n	8009dd6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd8:	2b37      	cmp	r3, #55	; 0x37
 8009dda:	d901      	bls.n	8009de0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ddc:	2337      	movs	r3, #55	; 0x37
 8009dde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009de4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dee:	2200      	movs	r2, #0
 8009df0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df4:	3304      	adds	r3, #4
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7ff f978 	bl	80090ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfe:	3318      	adds	r3, #24
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7ff f973 	bl	80090ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1e:	2200      	movs	r2, #0
 8009e20:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	68f9      	ldr	r1, [r7, #12]
 8009e2e:	69b8      	ldr	r0, [r7, #24]
 8009e30:	f001 f94e 	bl	800b0d0 <pxPortInitialiseStack>
 8009e34:	4602      	mov	r2, r0
 8009e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d002      	beq.n	8009e46 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e46:	bf00      	nop
 8009e48:	3720      	adds	r7, #32
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
	...

08009e50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e58:	f001 fa64 	bl	800b324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e5c:	4b2d      	ldr	r3, [pc, #180]	; (8009f14 <prvAddNewTaskToReadyList+0xc4>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	3301      	adds	r3, #1
 8009e62:	4a2c      	ldr	r2, [pc, #176]	; (8009f14 <prvAddNewTaskToReadyList+0xc4>)
 8009e64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e66:	4b2c      	ldr	r3, [pc, #176]	; (8009f18 <prvAddNewTaskToReadyList+0xc8>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d109      	bne.n	8009e82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009e6e:	4a2a      	ldr	r2, [pc, #168]	; (8009f18 <prvAddNewTaskToReadyList+0xc8>)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e74:	4b27      	ldr	r3, [pc, #156]	; (8009f14 <prvAddNewTaskToReadyList+0xc4>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d110      	bne.n	8009e9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e7c:	f000 fc3c 	bl	800a6f8 <prvInitialiseTaskLists>
 8009e80:	e00d      	b.n	8009e9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e82:	4b26      	ldr	r3, [pc, #152]	; (8009f1c <prvAddNewTaskToReadyList+0xcc>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d109      	bne.n	8009e9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e8a:	4b23      	ldr	r3, [pc, #140]	; (8009f18 <prvAddNewTaskToReadyList+0xc8>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d802      	bhi.n	8009e9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009e98:	4a1f      	ldr	r2, [pc, #124]	; (8009f18 <prvAddNewTaskToReadyList+0xc8>)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009e9e:	4b20      	ldr	r3, [pc, #128]	; (8009f20 <prvAddNewTaskToReadyList+0xd0>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	4a1e      	ldr	r2, [pc, #120]	; (8009f20 <prvAddNewTaskToReadyList+0xd0>)
 8009ea6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ea8:	4b1d      	ldr	r3, [pc, #116]	; (8009f20 <prvAddNewTaskToReadyList+0xd0>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb4:	4b1b      	ldr	r3, [pc, #108]	; (8009f24 <prvAddNewTaskToReadyList+0xd4>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d903      	bls.n	8009ec4 <prvAddNewTaskToReadyList+0x74>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec0:	4a18      	ldr	r2, [pc, #96]	; (8009f24 <prvAddNewTaskToReadyList+0xd4>)
 8009ec2:	6013      	str	r3, [r2, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec8:	4613      	mov	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	4413      	add	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4a15      	ldr	r2, [pc, #84]	; (8009f28 <prvAddNewTaskToReadyList+0xd8>)
 8009ed2:	441a      	add	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	4619      	mov	r1, r3
 8009eda:	4610      	mov	r0, r2
 8009edc:	f7ff f913 	bl	8009106 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ee0:	f001 fa50 	bl	800b384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ee4:	4b0d      	ldr	r3, [pc, #52]	; (8009f1c <prvAddNewTaskToReadyList+0xcc>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00e      	beq.n	8009f0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009eec:	4b0a      	ldr	r3, [pc, #40]	; (8009f18 <prvAddNewTaskToReadyList+0xc8>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d207      	bcs.n	8009f0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009efa:	4b0c      	ldr	r3, [pc, #48]	; (8009f2c <prvAddNewTaskToReadyList+0xdc>)
 8009efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f00:	601a      	str	r2, [r3, #0]
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f0a:	bf00      	nop
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	20008ab4 	.word	0x20008ab4
 8009f18:	200085e0 	.word	0x200085e0
 8009f1c:	20008ac0 	.word	0x20008ac0
 8009f20:	20008ad0 	.word	0x20008ad0
 8009f24:	20008abc 	.word	0x20008abc
 8009f28:	200085e4 	.word	0x200085e4
 8009f2c:	e000ed04 	.word	0xe000ed04

08009f30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d017      	beq.n	8009f72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f42:	4b13      	ldr	r3, [pc, #76]	; (8009f90 <vTaskDelay+0x60>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00a      	beq.n	8009f60 <vTaskDelay+0x30>
	__asm volatile
 8009f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4e:	f383 8811 	msr	BASEPRI, r3
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	60bb      	str	r3, [r7, #8]
}
 8009f5c:	bf00      	nop
 8009f5e:	e7fe      	b.n	8009f5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009f60:	f000 f880 	bl	800a064 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f64:	2100      	movs	r1, #0
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fd10 	bl	800a98c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009f6c:	f000 f888 	bl	800a080 <xTaskResumeAll>
 8009f70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d107      	bne.n	8009f88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009f78:	4b06      	ldr	r3, [pc, #24]	; (8009f94 <vTaskDelay+0x64>)
 8009f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f7e:	601a      	str	r2, [r3, #0]
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f88:	bf00      	nop
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	20008adc 	.word	0x20008adc
 8009f94:	e000ed04 	.word	0xe000ed04

08009f98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b08a      	sub	sp, #40	; 0x28
 8009f9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009fa6:	463a      	mov	r2, r7
 8009fa8:	1d39      	adds	r1, r7, #4
 8009faa:	f107 0308 	add.w	r3, r7, #8
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7ff f848 	bl	8009044 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009fb4:	6839      	ldr	r1, [r7, #0]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	9202      	str	r2, [sp, #8]
 8009fbc:	9301      	str	r3, [sp, #4]
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	9300      	str	r3, [sp, #0]
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	460a      	mov	r2, r1
 8009fc6:	4921      	ldr	r1, [pc, #132]	; (800a04c <vTaskStartScheduler+0xb4>)
 8009fc8:	4821      	ldr	r0, [pc, #132]	; (800a050 <vTaskStartScheduler+0xb8>)
 8009fca:	f7ff fe0f 	bl	8009bec <xTaskCreateStatic>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	4a20      	ldr	r2, [pc, #128]	; (800a054 <vTaskStartScheduler+0xbc>)
 8009fd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009fd4:	4b1f      	ldr	r3, [pc, #124]	; (800a054 <vTaskStartScheduler+0xbc>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	617b      	str	r3, [r7, #20]
 8009fe0:	e001      	b.n	8009fe6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d102      	bne.n	8009ff2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009fec:	f000 fd22 	bl	800aa34 <xTimerCreateTimerTask>
 8009ff0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d116      	bne.n	800a026 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	613b      	str	r3, [r7, #16]
}
 800a00a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a00c:	4b12      	ldr	r3, [pc, #72]	; (800a058 <vTaskStartScheduler+0xc0>)
 800a00e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a012:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a014:	4b11      	ldr	r3, [pc, #68]	; (800a05c <vTaskStartScheduler+0xc4>)
 800a016:	2201      	movs	r2, #1
 800a018:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a01a:	4b11      	ldr	r3, [pc, #68]	; (800a060 <vTaskStartScheduler+0xc8>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a020:	f001 f8de 	bl	800b1e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a024:	e00e      	b.n	800a044 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a02c:	d10a      	bne.n	800a044 <vTaskStartScheduler+0xac>
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	60fb      	str	r3, [r7, #12]
}
 800a040:	bf00      	nop
 800a042:	e7fe      	b.n	800a042 <vTaskStartScheduler+0xaa>
}
 800a044:	bf00      	nop
 800a046:	3718      	adds	r7, #24
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	08018598 	.word	0x08018598
 800a050:	0800a6c9 	.word	0x0800a6c9
 800a054:	20008ad8 	.word	0x20008ad8
 800a058:	20008ad4 	.word	0x20008ad4
 800a05c:	20008ac0 	.word	0x20008ac0
 800a060:	20008ab8 	.word	0x20008ab8

0800a064 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a064:	b480      	push	{r7}
 800a066:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a068:	4b04      	ldr	r3, [pc, #16]	; (800a07c <vTaskSuspendAll+0x18>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	3301      	adds	r3, #1
 800a06e:	4a03      	ldr	r2, [pc, #12]	; (800a07c <vTaskSuspendAll+0x18>)
 800a070:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a072:	bf00      	nop
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	20008adc 	.word	0x20008adc

0800a080 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a086:	2300      	movs	r3, #0
 800a088:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a08a:	2300      	movs	r3, #0
 800a08c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a08e:	4b42      	ldr	r3, [pc, #264]	; (800a198 <xTaskResumeAll+0x118>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d10a      	bne.n	800a0ac <xTaskResumeAll+0x2c>
	__asm volatile
 800a096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09a:	f383 8811 	msr	BASEPRI, r3
 800a09e:	f3bf 8f6f 	isb	sy
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	603b      	str	r3, [r7, #0]
}
 800a0a8:	bf00      	nop
 800a0aa:	e7fe      	b.n	800a0aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a0ac:	f001 f93a 	bl	800b324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a0b0:	4b39      	ldr	r3, [pc, #228]	; (800a198 <xTaskResumeAll+0x118>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	4a38      	ldr	r2, [pc, #224]	; (800a198 <xTaskResumeAll+0x118>)
 800a0b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0ba:	4b37      	ldr	r3, [pc, #220]	; (800a198 <xTaskResumeAll+0x118>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d162      	bne.n	800a188 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a0c2:	4b36      	ldr	r3, [pc, #216]	; (800a19c <xTaskResumeAll+0x11c>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d05e      	beq.n	800a188 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0ca:	e02f      	b.n	800a12c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0cc:	4b34      	ldr	r3, [pc, #208]	; (800a1a0 <xTaskResumeAll+0x120>)
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	3318      	adds	r3, #24
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7ff f871 	bl	80091c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	3304      	adds	r3, #4
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7ff f86c 	bl	80091c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ec:	4b2d      	ldr	r3, [pc, #180]	; (800a1a4 <xTaskResumeAll+0x124>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d903      	bls.n	800a0fc <xTaskResumeAll+0x7c>
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f8:	4a2a      	ldr	r2, [pc, #168]	; (800a1a4 <xTaskResumeAll+0x124>)
 800a0fa:	6013      	str	r3, [r2, #0]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a100:	4613      	mov	r3, r2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4413      	add	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4a27      	ldr	r2, [pc, #156]	; (800a1a8 <xTaskResumeAll+0x128>)
 800a10a:	441a      	add	r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	3304      	adds	r3, #4
 800a110:	4619      	mov	r1, r3
 800a112:	4610      	mov	r0, r2
 800a114:	f7fe fff7 	bl	8009106 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a11c:	4b23      	ldr	r3, [pc, #140]	; (800a1ac <xTaskResumeAll+0x12c>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a122:	429a      	cmp	r2, r3
 800a124:	d302      	bcc.n	800a12c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a126:	4b22      	ldr	r3, [pc, #136]	; (800a1b0 <xTaskResumeAll+0x130>)
 800a128:	2201      	movs	r2, #1
 800a12a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a12c:	4b1c      	ldr	r3, [pc, #112]	; (800a1a0 <xTaskResumeAll+0x120>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d1cb      	bne.n	800a0cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a13a:	f000 fb7b 	bl	800a834 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a13e:	4b1d      	ldr	r3, [pc, #116]	; (800a1b4 <xTaskResumeAll+0x134>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d010      	beq.n	800a16c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a14a:	f000 f847 	bl	800a1dc <xTaskIncrementTick>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d002      	beq.n	800a15a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a154:	4b16      	ldr	r3, [pc, #88]	; (800a1b0 <xTaskResumeAll+0x130>)
 800a156:	2201      	movs	r2, #1
 800a158:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	3b01      	subs	r3, #1
 800a15e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1f1      	bne.n	800a14a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a166:	4b13      	ldr	r3, [pc, #76]	; (800a1b4 <xTaskResumeAll+0x134>)
 800a168:	2200      	movs	r2, #0
 800a16a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a16c:	4b10      	ldr	r3, [pc, #64]	; (800a1b0 <xTaskResumeAll+0x130>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d009      	beq.n	800a188 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a174:	2301      	movs	r3, #1
 800a176:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a178:	4b0f      	ldr	r3, [pc, #60]	; (800a1b8 <xTaskResumeAll+0x138>)
 800a17a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a17e:	601a      	str	r2, [r3, #0]
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a188:	f001 f8fc 	bl	800b384 <vPortExitCritical>

	return xAlreadyYielded;
 800a18c:	68bb      	ldr	r3, [r7, #8]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	20008adc 	.word	0x20008adc
 800a19c:	20008ab4 	.word	0x20008ab4
 800a1a0:	20008a74 	.word	0x20008a74
 800a1a4:	20008abc 	.word	0x20008abc
 800a1a8:	200085e4 	.word	0x200085e4
 800a1ac:	200085e0 	.word	0x200085e0
 800a1b0:	20008ac8 	.word	0x20008ac8
 800a1b4:	20008ac4 	.word	0x20008ac4
 800a1b8:	e000ed04 	.word	0xe000ed04

0800a1bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a1c2:	4b05      	ldr	r3, [pc, #20]	; (800a1d8 <xTaskGetTickCount+0x1c>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a1c8:	687b      	ldr	r3, [r7, #4]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	370c      	adds	r7, #12
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	20008ab8 	.word	0x20008ab8

0800a1dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1e6:	4b4f      	ldr	r3, [pc, #316]	; (800a324 <xTaskIncrementTick+0x148>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f040 808f 	bne.w	800a30e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a1f0:	4b4d      	ldr	r3, [pc, #308]	; (800a328 <xTaskIncrementTick+0x14c>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a1f8:	4a4b      	ldr	r2, [pc, #300]	; (800a328 <xTaskIncrementTick+0x14c>)
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d120      	bne.n	800a246 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a204:	4b49      	ldr	r3, [pc, #292]	; (800a32c <xTaskIncrementTick+0x150>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00a      	beq.n	800a224 <xTaskIncrementTick+0x48>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	603b      	str	r3, [r7, #0]
}
 800a220:	bf00      	nop
 800a222:	e7fe      	b.n	800a222 <xTaskIncrementTick+0x46>
 800a224:	4b41      	ldr	r3, [pc, #260]	; (800a32c <xTaskIncrementTick+0x150>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	60fb      	str	r3, [r7, #12]
 800a22a:	4b41      	ldr	r3, [pc, #260]	; (800a330 <xTaskIncrementTick+0x154>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a3f      	ldr	r2, [pc, #252]	; (800a32c <xTaskIncrementTick+0x150>)
 800a230:	6013      	str	r3, [r2, #0]
 800a232:	4a3f      	ldr	r2, [pc, #252]	; (800a330 <xTaskIncrementTick+0x154>)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6013      	str	r3, [r2, #0]
 800a238:	4b3e      	ldr	r3, [pc, #248]	; (800a334 <xTaskIncrementTick+0x158>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	3301      	adds	r3, #1
 800a23e:	4a3d      	ldr	r2, [pc, #244]	; (800a334 <xTaskIncrementTick+0x158>)
 800a240:	6013      	str	r3, [r2, #0]
 800a242:	f000 faf7 	bl	800a834 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a246:	4b3c      	ldr	r3, [pc, #240]	; (800a338 <xTaskIncrementTick+0x15c>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	693a      	ldr	r2, [r7, #16]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d349      	bcc.n	800a2e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a250:	4b36      	ldr	r3, [pc, #216]	; (800a32c <xTaskIncrementTick+0x150>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d104      	bne.n	800a264 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a25a:	4b37      	ldr	r3, [pc, #220]	; (800a338 <xTaskIncrementTick+0x15c>)
 800a25c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a260:	601a      	str	r2, [r3, #0]
					break;
 800a262:	e03f      	b.n	800a2e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a264:	4b31      	ldr	r3, [pc, #196]	; (800a32c <xTaskIncrementTick+0x150>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d203      	bcs.n	800a284 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a27c:	4a2e      	ldr	r2, [pc, #184]	; (800a338 <xTaskIncrementTick+0x15c>)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a282:	e02f      	b.n	800a2e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	3304      	adds	r3, #4
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fe ff99 	bl	80091c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a292:	2b00      	cmp	r3, #0
 800a294:	d004      	beq.n	800a2a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	3318      	adds	r3, #24
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7fe ff90 	bl	80091c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a4:	4b25      	ldr	r3, [pc, #148]	; (800a33c <xTaskIncrementTick+0x160>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d903      	bls.n	800a2b4 <xTaskIncrementTick+0xd8>
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b0:	4a22      	ldr	r2, [pc, #136]	; (800a33c <xTaskIncrementTick+0x160>)
 800a2b2:	6013      	str	r3, [r2, #0]
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4413      	add	r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4a1f      	ldr	r2, [pc, #124]	; (800a340 <xTaskIncrementTick+0x164>)
 800a2c2:	441a      	add	r2, r3
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	3304      	adds	r3, #4
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	4610      	mov	r0, r2
 800a2cc:	f7fe ff1b 	bl	8009106 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d4:	4b1b      	ldr	r3, [pc, #108]	; (800a344 <xTaskIncrementTick+0x168>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d3b8      	bcc.n	800a250 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2e2:	e7b5      	b.n	800a250 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a2e4:	4b17      	ldr	r3, [pc, #92]	; (800a344 <xTaskIncrementTick+0x168>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ea:	4915      	ldr	r1, [pc, #84]	; (800a340 <xTaskIncrementTick+0x164>)
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4413      	add	r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	440b      	add	r3, r1
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d901      	bls.n	800a300 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a300:	4b11      	ldr	r3, [pc, #68]	; (800a348 <xTaskIncrementTick+0x16c>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d007      	beq.n	800a318 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a308:	2301      	movs	r3, #1
 800a30a:	617b      	str	r3, [r7, #20]
 800a30c:	e004      	b.n	800a318 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a30e:	4b0f      	ldr	r3, [pc, #60]	; (800a34c <xTaskIncrementTick+0x170>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3301      	adds	r3, #1
 800a314:	4a0d      	ldr	r2, [pc, #52]	; (800a34c <xTaskIncrementTick+0x170>)
 800a316:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a318:	697b      	ldr	r3, [r7, #20]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3718      	adds	r7, #24
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	20008adc 	.word	0x20008adc
 800a328:	20008ab8 	.word	0x20008ab8
 800a32c:	20008a6c 	.word	0x20008a6c
 800a330:	20008a70 	.word	0x20008a70
 800a334:	20008acc 	.word	0x20008acc
 800a338:	20008ad4 	.word	0x20008ad4
 800a33c:	20008abc 	.word	0x20008abc
 800a340:	200085e4 	.word	0x200085e4
 800a344:	200085e0 	.word	0x200085e0
 800a348:	20008ac8 	.word	0x20008ac8
 800a34c:	20008ac4 	.word	0x20008ac4

0800a350 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a350:	b480      	push	{r7}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a356:	4b28      	ldr	r3, [pc, #160]	; (800a3f8 <vTaskSwitchContext+0xa8>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d003      	beq.n	800a366 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a35e:	4b27      	ldr	r3, [pc, #156]	; (800a3fc <vTaskSwitchContext+0xac>)
 800a360:	2201      	movs	r2, #1
 800a362:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a364:	e041      	b.n	800a3ea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a366:	4b25      	ldr	r3, [pc, #148]	; (800a3fc <vTaskSwitchContext+0xac>)
 800a368:	2200      	movs	r2, #0
 800a36a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a36c:	4b24      	ldr	r3, [pc, #144]	; (800a400 <vTaskSwitchContext+0xb0>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	60fb      	str	r3, [r7, #12]
 800a372:	e010      	b.n	800a396 <vTaskSwitchContext+0x46>
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10a      	bne.n	800a390 <vTaskSwitchContext+0x40>
	__asm volatile
 800a37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37e:	f383 8811 	msr	BASEPRI, r3
 800a382:	f3bf 8f6f 	isb	sy
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	607b      	str	r3, [r7, #4]
}
 800a38c:	bf00      	nop
 800a38e:	e7fe      	b.n	800a38e <vTaskSwitchContext+0x3e>
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3b01      	subs	r3, #1
 800a394:	60fb      	str	r3, [r7, #12]
 800a396:	491b      	ldr	r1, [pc, #108]	; (800a404 <vTaskSwitchContext+0xb4>)
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	4613      	mov	r3, r2
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4413      	add	r3, r2
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	440b      	add	r3, r1
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d0e4      	beq.n	800a374 <vTaskSwitchContext+0x24>
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4a13      	ldr	r2, [pc, #76]	; (800a404 <vTaskSwitchContext+0xb4>)
 800a3b6:	4413      	add	r3, r2
 800a3b8:	60bb      	str	r3, [r7, #8]
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	685a      	ldr	r2, [r3, #4]
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	605a      	str	r2, [r3, #4]
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	685a      	ldr	r2, [r3, #4]
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	3308      	adds	r3, #8
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d104      	bne.n	800a3da <vTaskSwitchContext+0x8a>
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	605a      	str	r2, [r3, #4]
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	4a09      	ldr	r2, [pc, #36]	; (800a408 <vTaskSwitchContext+0xb8>)
 800a3e2:	6013      	str	r3, [r2, #0]
 800a3e4:	4a06      	ldr	r2, [pc, #24]	; (800a400 <vTaskSwitchContext+0xb0>)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6013      	str	r3, [r2, #0]
}
 800a3ea:	bf00      	nop
 800a3ec:	3714      	adds	r7, #20
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	20008adc 	.word	0x20008adc
 800a3fc:	20008ac8 	.word	0x20008ac8
 800a400:	20008abc 	.word	0x20008abc
 800a404:	200085e4 	.word	0x200085e4
 800a408:	200085e0 	.word	0x200085e0

0800a40c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10a      	bne.n	800a432 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a420:	f383 8811 	msr	BASEPRI, r3
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	60fb      	str	r3, [r7, #12]
}
 800a42e:	bf00      	nop
 800a430:	e7fe      	b.n	800a430 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a432:	4b07      	ldr	r3, [pc, #28]	; (800a450 <vTaskPlaceOnEventList+0x44>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3318      	adds	r3, #24
 800a438:	4619      	mov	r1, r3
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f7fe fe87 	bl	800914e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a440:	2101      	movs	r1, #1
 800a442:	6838      	ldr	r0, [r7, #0]
 800a444:	f000 faa2 	bl	800a98c <prvAddCurrentTaskToDelayedList>
}
 800a448:	bf00      	nop
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	200085e0 	.word	0x200085e0

0800a454 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a454:	b580      	push	{r7, lr}
 800a456:	b086      	sub	sp, #24
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10a      	bne.n	800a47c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	617b      	str	r3, [r7, #20]
}
 800a478:	bf00      	nop
 800a47a:	e7fe      	b.n	800a47a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a47c:	4b0a      	ldr	r3, [pc, #40]	; (800a4a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	3318      	adds	r3, #24
 800a482:	4619      	mov	r1, r3
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f7fe fe3e 	bl	8009106 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d002      	beq.n	800a496 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a494:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a496:	6879      	ldr	r1, [r7, #4]
 800a498:	68b8      	ldr	r0, [r7, #8]
 800a49a:	f000 fa77 	bl	800a98c <prvAddCurrentTaskToDelayedList>
	}
 800a49e:	bf00      	nop
 800a4a0:	3718      	adds	r7, #24
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	200085e0 	.word	0x200085e0

0800a4ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10a      	bne.n	800a4d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	60fb      	str	r3, [r7, #12]
}
 800a4d4:	bf00      	nop
 800a4d6:	e7fe      	b.n	800a4d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	3318      	adds	r3, #24
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fe fe6f 	bl	80091c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4e2:	4b1e      	ldr	r3, [pc, #120]	; (800a55c <xTaskRemoveFromEventList+0xb0>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d11d      	bne.n	800a526 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7fe fe66 	bl	80091c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f8:	4b19      	ldr	r3, [pc, #100]	; (800a560 <xTaskRemoveFromEventList+0xb4>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d903      	bls.n	800a508 <xTaskRemoveFromEventList+0x5c>
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a504:	4a16      	ldr	r2, [pc, #88]	; (800a560 <xTaskRemoveFromEventList+0xb4>)
 800a506:	6013      	str	r3, [r2, #0]
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a50c:	4613      	mov	r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	4413      	add	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4a13      	ldr	r2, [pc, #76]	; (800a564 <xTaskRemoveFromEventList+0xb8>)
 800a516:	441a      	add	r2, r3
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	3304      	adds	r3, #4
 800a51c:	4619      	mov	r1, r3
 800a51e:	4610      	mov	r0, r2
 800a520:	f7fe fdf1 	bl	8009106 <vListInsertEnd>
 800a524:	e005      	b.n	800a532 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	3318      	adds	r3, #24
 800a52a:	4619      	mov	r1, r3
 800a52c:	480e      	ldr	r0, [pc, #56]	; (800a568 <xTaskRemoveFromEventList+0xbc>)
 800a52e:	f7fe fdea 	bl	8009106 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a536:	4b0d      	ldr	r3, [pc, #52]	; (800a56c <xTaskRemoveFromEventList+0xc0>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d905      	bls.n	800a54c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a540:	2301      	movs	r3, #1
 800a542:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a544:	4b0a      	ldr	r3, [pc, #40]	; (800a570 <xTaskRemoveFromEventList+0xc4>)
 800a546:	2201      	movs	r2, #1
 800a548:	601a      	str	r2, [r3, #0]
 800a54a:	e001      	b.n	800a550 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a54c:	2300      	movs	r3, #0
 800a54e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a550:	697b      	ldr	r3, [r7, #20]
}
 800a552:	4618      	mov	r0, r3
 800a554:	3718      	adds	r7, #24
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	20008adc 	.word	0x20008adc
 800a560:	20008abc 	.word	0x20008abc
 800a564:	200085e4 	.word	0x200085e4
 800a568:	20008a74 	.word	0x20008a74
 800a56c:	200085e0 	.word	0x200085e0
 800a570:	20008ac8 	.word	0x20008ac8

0800a574 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10a      	bne.n	800a598 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800a582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	60fb      	str	r3, [r7, #12]
}
 800a594:	bf00      	nop
 800a596:	e7fe      	b.n	800a596 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800a598:	f000 fec4 	bl	800b324 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a59c:	4b06      	ldr	r3, [pc, #24]	; (800a5b8 <vTaskSetTimeOutState+0x44>)
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800a5a4:	4b05      	ldr	r3, [pc, #20]	; (800a5bc <vTaskSetTimeOutState+0x48>)
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800a5ac:	f000 feea 	bl	800b384 <vPortExitCritical>
}
 800a5b0:	bf00      	nop
 800a5b2:	3710      	adds	r7, #16
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	20008acc 	.word	0x20008acc
 800a5bc:	20008ab8 	.word	0x20008ab8

0800a5c0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a5c8:	4b06      	ldr	r3, [pc, #24]	; (800a5e4 <vTaskInternalSetTimeOutState+0x24>)
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a5d0:	4b05      	ldr	r3, [pc, #20]	; (800a5e8 <vTaskInternalSetTimeOutState+0x28>)
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	605a      	str	r2, [r3, #4]
}
 800a5d8:	bf00      	nop
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr
 800a5e4:	20008acc 	.word	0x20008acc
 800a5e8:	20008ab8 	.word	0x20008ab8

0800a5ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b088      	sub	sp, #32
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d10a      	bne.n	800a612 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	613b      	str	r3, [r7, #16]
}
 800a60e:	bf00      	nop
 800a610:	e7fe      	b.n	800a610 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d10a      	bne.n	800a62e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	60fb      	str	r3, [r7, #12]
}
 800a62a:	bf00      	nop
 800a62c:	e7fe      	b.n	800a62c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a62e:	f000 fe79 	bl	800b324 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a632:	4b1d      	ldr	r3, [pc, #116]	; (800a6a8 <xTaskCheckForTimeOut+0xbc>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	69ba      	ldr	r2, [r7, #24]
 800a63e:	1ad3      	subs	r3, r2, r3
 800a640:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a64a:	d102      	bne.n	800a652 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a64c:	2300      	movs	r3, #0
 800a64e:	61fb      	str	r3, [r7, #28]
 800a650:	e023      	b.n	800a69a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	4b15      	ldr	r3, [pc, #84]	; (800a6ac <xTaskCheckForTimeOut+0xc0>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d007      	beq.n	800a66e <xTaskCheckForTimeOut+0x82>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	69ba      	ldr	r2, [r7, #24]
 800a664:	429a      	cmp	r2, r3
 800a666:	d302      	bcc.n	800a66e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a668:	2301      	movs	r3, #1
 800a66a:	61fb      	str	r3, [r7, #28]
 800a66c:	e015      	b.n	800a69a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	697a      	ldr	r2, [r7, #20]
 800a674:	429a      	cmp	r2, r3
 800a676:	d20b      	bcs.n	800a690 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	1ad2      	subs	r2, r2, r3
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f7ff ff9b 	bl	800a5c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a68a:	2300      	movs	r3, #0
 800a68c:	61fb      	str	r3, [r7, #28]
 800a68e:	e004      	b.n	800a69a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	2200      	movs	r2, #0
 800a694:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a696:	2301      	movs	r3, #1
 800a698:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a69a:	f000 fe73 	bl	800b384 <vPortExitCritical>

	return xReturn;
 800a69e:	69fb      	ldr	r3, [r7, #28]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3720      	adds	r7, #32
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	20008ab8 	.word	0x20008ab8
 800a6ac:	20008acc 	.word	0x20008acc

0800a6b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a6b4:	4b03      	ldr	r3, [pc, #12]	; (800a6c4 <vTaskMissedYield+0x14>)
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	601a      	str	r2, [r3, #0]
}
 800a6ba:	bf00      	nop
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr
 800a6c4:	20008ac8 	.word	0x20008ac8

0800a6c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a6d0:	f000 f852 	bl	800a778 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a6d4:	4b06      	ldr	r3, [pc, #24]	; (800a6f0 <prvIdleTask+0x28>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d9f9      	bls.n	800a6d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a6dc:	4b05      	ldr	r3, [pc, #20]	; (800a6f4 <prvIdleTask+0x2c>)
 800a6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6e2:	601a      	str	r2, [r3, #0]
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a6ec:	e7f0      	b.n	800a6d0 <prvIdleTask+0x8>
 800a6ee:	bf00      	nop
 800a6f0:	200085e4 	.word	0x200085e4
 800a6f4:	e000ed04 	.word	0xe000ed04

0800a6f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6fe:	2300      	movs	r3, #0
 800a700:	607b      	str	r3, [r7, #4]
 800a702:	e00c      	b.n	800a71e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	4613      	mov	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	4a12      	ldr	r2, [pc, #72]	; (800a758 <prvInitialiseTaskLists+0x60>)
 800a710:	4413      	add	r3, r2
 800a712:	4618      	mov	r0, r3
 800a714:	f7fe fcca 	bl	80090ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	3301      	adds	r3, #1
 800a71c:	607b      	str	r3, [r7, #4]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2b37      	cmp	r3, #55	; 0x37
 800a722:	d9ef      	bls.n	800a704 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a724:	480d      	ldr	r0, [pc, #52]	; (800a75c <prvInitialiseTaskLists+0x64>)
 800a726:	f7fe fcc1 	bl	80090ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a72a:	480d      	ldr	r0, [pc, #52]	; (800a760 <prvInitialiseTaskLists+0x68>)
 800a72c:	f7fe fcbe 	bl	80090ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a730:	480c      	ldr	r0, [pc, #48]	; (800a764 <prvInitialiseTaskLists+0x6c>)
 800a732:	f7fe fcbb 	bl	80090ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a736:	480c      	ldr	r0, [pc, #48]	; (800a768 <prvInitialiseTaskLists+0x70>)
 800a738:	f7fe fcb8 	bl	80090ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a73c:	480b      	ldr	r0, [pc, #44]	; (800a76c <prvInitialiseTaskLists+0x74>)
 800a73e:	f7fe fcb5 	bl	80090ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a742:	4b0b      	ldr	r3, [pc, #44]	; (800a770 <prvInitialiseTaskLists+0x78>)
 800a744:	4a05      	ldr	r2, [pc, #20]	; (800a75c <prvInitialiseTaskLists+0x64>)
 800a746:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a748:	4b0a      	ldr	r3, [pc, #40]	; (800a774 <prvInitialiseTaskLists+0x7c>)
 800a74a:	4a05      	ldr	r2, [pc, #20]	; (800a760 <prvInitialiseTaskLists+0x68>)
 800a74c:	601a      	str	r2, [r3, #0]
}
 800a74e:	bf00      	nop
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	200085e4 	.word	0x200085e4
 800a75c:	20008a44 	.word	0x20008a44
 800a760:	20008a58 	.word	0x20008a58
 800a764:	20008a74 	.word	0x20008a74
 800a768:	20008a88 	.word	0x20008a88
 800a76c:	20008aa0 	.word	0x20008aa0
 800a770:	20008a6c 	.word	0x20008a6c
 800a774:	20008a70 	.word	0x20008a70

0800a778 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a77e:	e019      	b.n	800a7b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a780:	f000 fdd0 	bl	800b324 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a784:	4b10      	ldr	r3, [pc, #64]	; (800a7c8 <prvCheckTasksWaitingTermination+0x50>)
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	3304      	adds	r3, #4
 800a790:	4618      	mov	r0, r3
 800a792:	f7fe fd15 	bl	80091c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a796:	4b0d      	ldr	r3, [pc, #52]	; (800a7cc <prvCheckTasksWaitingTermination+0x54>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	3b01      	subs	r3, #1
 800a79c:	4a0b      	ldr	r2, [pc, #44]	; (800a7cc <prvCheckTasksWaitingTermination+0x54>)
 800a79e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a7a0:	4b0b      	ldr	r3, [pc, #44]	; (800a7d0 <prvCheckTasksWaitingTermination+0x58>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	4a0a      	ldr	r2, [pc, #40]	; (800a7d0 <prvCheckTasksWaitingTermination+0x58>)
 800a7a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a7aa:	f000 fdeb 	bl	800b384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f810 	bl	800a7d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7b4:	4b06      	ldr	r3, [pc, #24]	; (800a7d0 <prvCheckTasksWaitingTermination+0x58>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1e1      	bne.n	800a780 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a7bc:	bf00      	nop
 800a7be:	bf00      	nop
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	20008a88 	.word	0x20008a88
 800a7cc:	20008ab4 	.word	0x20008ab4
 800a7d0:	20008a9c 	.word	0x20008a9c

0800a7d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d108      	bne.n	800a7f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 ff88 	bl	800b700 <vPortFree>
				vPortFree( pxTCB );
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 ff85 	bl	800b700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a7f6:	e018      	b.n	800a82a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d103      	bne.n	800a80a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 ff7c 	bl	800b700 <vPortFree>
	}
 800a808:	e00f      	b.n	800a82a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a810:	2b02      	cmp	r3, #2
 800a812:	d00a      	beq.n	800a82a <prvDeleteTCB+0x56>
	__asm volatile
 800a814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a818:	f383 8811 	msr	BASEPRI, r3
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	60fb      	str	r3, [r7, #12]
}
 800a826:	bf00      	nop
 800a828:	e7fe      	b.n	800a828 <prvDeleteTCB+0x54>
	}
 800a82a:	bf00      	nop
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
	...

0800a834 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a83a:	4b0c      	ldr	r3, [pc, #48]	; (800a86c <prvResetNextTaskUnblockTime+0x38>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d104      	bne.n	800a84e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a844:	4b0a      	ldr	r3, [pc, #40]	; (800a870 <prvResetNextTaskUnblockTime+0x3c>)
 800a846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a84a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a84c:	e008      	b.n	800a860 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a84e:	4b07      	ldr	r3, [pc, #28]	; (800a86c <prvResetNextTaskUnblockTime+0x38>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	4a04      	ldr	r2, [pc, #16]	; (800a870 <prvResetNextTaskUnblockTime+0x3c>)
 800a85e:	6013      	str	r3, [r2, #0]
}
 800a860:	bf00      	nop
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr
 800a86c:	20008a6c 	.word	0x20008a6c
 800a870:	20008ad4 	.word	0x20008ad4

0800a874 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a87a:	4b0b      	ldr	r3, [pc, #44]	; (800a8a8 <xTaskGetSchedulerState+0x34>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d102      	bne.n	800a888 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a882:	2301      	movs	r3, #1
 800a884:	607b      	str	r3, [r7, #4]
 800a886:	e008      	b.n	800a89a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a888:	4b08      	ldr	r3, [pc, #32]	; (800a8ac <xTaskGetSchedulerState+0x38>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d102      	bne.n	800a896 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a890:	2302      	movs	r3, #2
 800a892:	607b      	str	r3, [r7, #4]
 800a894:	e001      	b.n	800a89a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a896:	2300      	movs	r3, #0
 800a898:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a89a:	687b      	ldr	r3, [r7, #4]
	}
 800a89c:	4618      	mov	r0, r3
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr
 800a8a8:	20008ac0 	.word	0x20008ac0
 800a8ac:	20008adc 	.word	0x20008adc

0800a8b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b086      	sub	sp, #24
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d056      	beq.n	800a974 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a8c6:	4b2e      	ldr	r3, [pc, #184]	; (800a980 <xTaskPriorityDisinherit+0xd0>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	693a      	ldr	r2, [r7, #16]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d00a      	beq.n	800a8e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	60fb      	str	r3, [r7, #12]
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10a      	bne.n	800a904 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	60bb      	str	r3, [r7, #8]
}
 800a900:	bf00      	nop
 800a902:	e7fe      	b.n	800a902 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a908:	1e5a      	subs	r2, r3, #1
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a916:	429a      	cmp	r2, r3
 800a918:	d02c      	beq.n	800a974 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d128      	bne.n	800a974 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	3304      	adds	r3, #4
 800a926:	4618      	mov	r0, r3
 800a928:	f7fe fc4a 	bl	80091c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a938:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a944:	4b0f      	ldr	r3, [pc, #60]	; (800a984 <xTaskPriorityDisinherit+0xd4>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d903      	bls.n	800a954 <xTaskPriorityDisinherit+0xa4>
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a950:	4a0c      	ldr	r2, [pc, #48]	; (800a984 <xTaskPriorityDisinherit+0xd4>)
 800a952:	6013      	str	r3, [r2, #0]
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a958:	4613      	mov	r3, r2
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	4413      	add	r3, r2
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	4a09      	ldr	r2, [pc, #36]	; (800a988 <xTaskPriorityDisinherit+0xd8>)
 800a962:	441a      	add	r2, r3
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	3304      	adds	r3, #4
 800a968:	4619      	mov	r1, r3
 800a96a:	4610      	mov	r0, r2
 800a96c:	f7fe fbcb 	bl	8009106 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a970:	2301      	movs	r3, #1
 800a972:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a974:	697b      	ldr	r3, [r7, #20]
	}
 800a976:	4618      	mov	r0, r3
 800a978:	3718      	adds	r7, #24
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	200085e0 	.word	0x200085e0
 800a984:	20008abc 	.word	0x20008abc
 800a988:	200085e4 	.word	0x200085e4

0800a98c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a996:	4b21      	ldr	r3, [pc, #132]	; (800aa1c <prvAddCurrentTaskToDelayedList+0x90>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a99c:	4b20      	ldr	r3, [pc, #128]	; (800aa20 <prvAddCurrentTaskToDelayedList+0x94>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	3304      	adds	r3, #4
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7fe fc0c 	bl	80091c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9ae:	d10a      	bne.n	800a9c6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d007      	beq.n	800a9c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9b6:	4b1a      	ldr	r3, [pc, #104]	; (800aa20 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	3304      	adds	r3, #4
 800a9bc:	4619      	mov	r1, r3
 800a9be:	4819      	ldr	r0, [pc, #100]	; (800aa24 <prvAddCurrentTaskToDelayedList+0x98>)
 800a9c0:	f7fe fba1 	bl	8009106 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a9c4:	e026      	b.n	800aa14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a9c6:	68fa      	ldr	r2, [r7, #12]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a9ce:	4b14      	ldr	r3, [pc, #80]	; (800aa20 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	68ba      	ldr	r2, [r7, #8]
 800a9d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d209      	bcs.n	800a9f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9de:	4b12      	ldr	r3, [pc, #72]	; (800aa28 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	4b0f      	ldr	r3, [pc, #60]	; (800aa20 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	3304      	adds	r3, #4
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	f7fe fbaf 	bl	800914e <vListInsert>
}
 800a9f0:	e010      	b.n	800aa14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9f2:	4b0e      	ldr	r3, [pc, #56]	; (800aa2c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	4b0a      	ldr	r3, [pc, #40]	; (800aa20 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	3304      	adds	r3, #4
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	4610      	mov	r0, r2
 800aa00:	f7fe fba5 	bl	800914e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa04:	4b0a      	ldr	r3, [pc, #40]	; (800aa30 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68ba      	ldr	r2, [r7, #8]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d202      	bcs.n	800aa14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aa0e:	4a08      	ldr	r2, [pc, #32]	; (800aa30 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	6013      	str	r3, [r2, #0]
}
 800aa14:	bf00      	nop
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	20008ab8 	.word	0x20008ab8
 800aa20:	200085e0 	.word	0x200085e0
 800aa24:	20008aa0 	.word	0x20008aa0
 800aa28:	20008a70 	.word	0x20008a70
 800aa2c:	20008a6c 	.word	0x20008a6c
 800aa30:	20008ad4 	.word	0x20008ad4

0800aa34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08a      	sub	sp, #40	; 0x28
 800aa38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aa3e:	f000 fb07 	bl	800b050 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aa42:	4b1c      	ldr	r3, [pc, #112]	; (800aab4 <xTimerCreateTimerTask+0x80>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d021      	beq.n	800aa8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aa52:	1d3a      	adds	r2, r7, #4
 800aa54:	f107 0108 	add.w	r1, r7, #8
 800aa58:	f107 030c 	add.w	r3, r7, #12
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7fe fb0b 	bl	8009078 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aa62:	6879      	ldr	r1, [r7, #4]
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	68fa      	ldr	r2, [r7, #12]
 800aa68:	9202      	str	r2, [sp, #8]
 800aa6a:	9301      	str	r3, [sp, #4]
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	9300      	str	r3, [sp, #0]
 800aa70:	2300      	movs	r3, #0
 800aa72:	460a      	mov	r2, r1
 800aa74:	4910      	ldr	r1, [pc, #64]	; (800aab8 <xTimerCreateTimerTask+0x84>)
 800aa76:	4811      	ldr	r0, [pc, #68]	; (800aabc <xTimerCreateTimerTask+0x88>)
 800aa78:	f7ff f8b8 	bl	8009bec <xTaskCreateStatic>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	4a10      	ldr	r2, [pc, #64]	; (800aac0 <xTimerCreateTimerTask+0x8c>)
 800aa80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aa82:	4b0f      	ldr	r3, [pc, #60]	; (800aac0 <xTimerCreateTimerTask+0x8c>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d001      	beq.n	800aa8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10a      	bne.n	800aaaa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aa94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa98:	f383 8811 	msr	BASEPRI, r3
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f3bf 8f4f 	dsb	sy
 800aaa4:	613b      	str	r3, [r7, #16]
}
 800aaa6:	bf00      	nop
 800aaa8:	e7fe      	b.n	800aaa8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aaaa:	697b      	ldr	r3, [r7, #20]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3718      	adds	r7, #24
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	20008b10 	.word	0x20008b10
 800aab8:	080185a0 	.word	0x080185a0
 800aabc:	0800abf9 	.word	0x0800abf9
 800aac0:	20008b14 	.word	0x20008b14

0800aac4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b08a      	sub	sp, #40	; 0x28
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
 800aad0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aad2:	2300      	movs	r3, #0
 800aad4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10a      	bne.n	800aaf2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800aadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae0:	f383 8811 	msr	BASEPRI, r3
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	623b      	str	r3, [r7, #32]
}
 800aaee:	bf00      	nop
 800aaf0:	e7fe      	b.n	800aaf0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aaf2:	4b1a      	ldr	r3, [pc, #104]	; (800ab5c <xTimerGenericCommand+0x98>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d02a      	beq.n	800ab50 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	2b05      	cmp	r3, #5
 800ab0a:	dc18      	bgt.n	800ab3e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ab0c:	f7ff feb2 	bl	800a874 <xTaskGetSchedulerState>
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	d109      	bne.n	800ab2a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab16:	4b11      	ldr	r3, [pc, #68]	; (800ab5c <xTimerGenericCommand+0x98>)
 800ab18:	6818      	ldr	r0, [r3, #0]
 800ab1a:	f107 0110 	add.w	r1, r7, #16
 800ab1e:	2300      	movs	r3, #0
 800ab20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab22:	f7fe fc7b 	bl	800941c <xQueueGenericSend>
 800ab26:	6278      	str	r0, [r7, #36]	; 0x24
 800ab28:	e012      	b.n	800ab50 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ab2a:	4b0c      	ldr	r3, [pc, #48]	; (800ab5c <xTimerGenericCommand+0x98>)
 800ab2c:	6818      	ldr	r0, [r3, #0]
 800ab2e:	f107 0110 	add.w	r1, r7, #16
 800ab32:	2300      	movs	r3, #0
 800ab34:	2200      	movs	r2, #0
 800ab36:	f7fe fc71 	bl	800941c <xQueueGenericSend>
 800ab3a:	6278      	str	r0, [r7, #36]	; 0x24
 800ab3c:	e008      	b.n	800ab50 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ab3e:	4b07      	ldr	r3, [pc, #28]	; (800ab5c <xTimerGenericCommand+0x98>)
 800ab40:	6818      	ldr	r0, [r3, #0]
 800ab42:	f107 0110 	add.w	r1, r7, #16
 800ab46:	2300      	movs	r3, #0
 800ab48:	683a      	ldr	r2, [r7, #0]
 800ab4a:	f7fe fd65 	bl	8009618 <xQueueGenericSendFromISR>
 800ab4e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3728      	adds	r7, #40	; 0x28
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	20008b10 	.word	0x20008b10

0800ab60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b088      	sub	sp, #32
 800ab64:	af02      	add	r7, sp, #8
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab6a:	4b22      	ldr	r3, [pc, #136]	; (800abf4 <prvProcessExpiredTimer+0x94>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	3304      	adds	r3, #4
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7fe fb21 	bl	80091c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab84:	f003 0304 	and.w	r3, r3, #4
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d022      	beq.n	800abd2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	699a      	ldr	r2, [r3, #24]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	18d1      	adds	r1, r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	683a      	ldr	r2, [r7, #0]
 800ab98:	6978      	ldr	r0, [r7, #20]
 800ab9a:	f000 f8d1 	bl	800ad40 <prvInsertTimerInActiveList>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d01f      	beq.n	800abe4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aba4:	2300      	movs	r3, #0
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	2300      	movs	r3, #0
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	2100      	movs	r1, #0
 800abae:	6978      	ldr	r0, [r7, #20]
 800abb0:	f7ff ff88 	bl	800aac4 <xTimerGenericCommand>
 800abb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d113      	bne.n	800abe4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800abbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc0:	f383 8811 	msr	BASEPRI, r3
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	60fb      	str	r3, [r7, #12]
}
 800abce:	bf00      	nop
 800abd0:	e7fe      	b.n	800abd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abd8:	f023 0301 	bic.w	r3, r3, #1
 800abdc:	b2da      	uxtb	r2, r3
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	6a1b      	ldr	r3, [r3, #32]
 800abe8:	6978      	ldr	r0, [r7, #20]
 800abea:	4798      	blx	r3
}
 800abec:	bf00      	nop
 800abee:	3718      	adds	r7, #24
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}
 800abf4:	20008b08 	.word	0x20008b08

0800abf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac00:	f107 0308 	add.w	r3, r7, #8
 800ac04:	4618      	mov	r0, r3
 800ac06:	f000 f857 	bl	800acb8 <prvGetNextExpireTime>
 800ac0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	4619      	mov	r1, r3
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f000 f803 	bl	800ac1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ac16:	f000 f8d5 	bl	800adc4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac1a:	e7f1      	b.n	800ac00 <prvTimerTask+0x8>

0800ac1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac26:	f7ff fa1d 	bl	800a064 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac2a:	f107 0308 	add.w	r3, r7, #8
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f000 f866 	bl	800ad00 <prvSampleTimeNow>
 800ac34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d130      	bne.n	800ac9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d10a      	bne.n	800ac58 <prvProcessTimerOrBlockTask+0x3c>
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d806      	bhi.n	800ac58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ac4a:	f7ff fa19 	bl	800a080 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ac4e:	68f9      	ldr	r1, [r7, #12]
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7ff ff85 	bl	800ab60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ac56:	e024      	b.n	800aca2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d008      	beq.n	800ac70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ac5e:	4b13      	ldr	r3, [pc, #76]	; (800acac <prvProcessTimerOrBlockTask+0x90>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d101      	bne.n	800ac6c <prvProcessTimerOrBlockTask+0x50>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e000      	b.n	800ac6e <prvProcessTimerOrBlockTask+0x52>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ac70:	4b0f      	ldr	r3, [pc, #60]	; (800acb0 <prvProcessTimerOrBlockTask+0x94>)
 800ac72:	6818      	ldr	r0, [r3, #0]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	1ad3      	subs	r3, r2, r3
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	f7fe ff81 	bl	8009b84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ac82:	f7ff f9fd 	bl	800a080 <xTaskResumeAll>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10a      	bne.n	800aca2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ac8c:	4b09      	ldr	r3, [pc, #36]	; (800acb4 <prvProcessTimerOrBlockTask+0x98>)
 800ac8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac92:	601a      	str	r2, [r3, #0]
 800ac94:	f3bf 8f4f 	dsb	sy
 800ac98:	f3bf 8f6f 	isb	sy
}
 800ac9c:	e001      	b.n	800aca2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ac9e:	f7ff f9ef 	bl	800a080 <xTaskResumeAll>
}
 800aca2:	bf00      	nop
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	20008b0c 	.word	0x20008b0c
 800acb0:	20008b10 	.word	0x20008b10
 800acb4:	e000ed04 	.word	0xe000ed04

0800acb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800acc0:	4b0e      	ldr	r3, [pc, #56]	; (800acfc <prvGetNextExpireTime+0x44>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d101      	bne.n	800acce <prvGetNextExpireTime+0x16>
 800acca:	2201      	movs	r2, #1
 800accc:	e000      	b.n	800acd0 <prvGetNextExpireTime+0x18>
 800acce:	2200      	movs	r2, #0
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d105      	bne.n	800ace8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800acdc:	4b07      	ldr	r3, [pc, #28]	; (800acfc <prvGetNextExpireTime+0x44>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	60fb      	str	r3, [r7, #12]
 800ace6:	e001      	b.n	800acec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ace8:	2300      	movs	r3, #0
 800acea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800acec:	68fb      	ldr	r3, [r7, #12]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	20008b08 	.word	0x20008b08

0800ad00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ad08:	f7ff fa58 	bl	800a1bc <xTaskGetTickCount>
 800ad0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ad0e:	4b0b      	ldr	r3, [pc, #44]	; (800ad3c <prvSampleTimeNow+0x3c>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d205      	bcs.n	800ad24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad18:	f000 f936 	bl	800af88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	601a      	str	r2, [r3, #0]
 800ad22:	e002      	b.n	800ad2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad2a:	4a04      	ldr	r2, [pc, #16]	; (800ad3c <prvSampleTimeNow+0x3c>)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ad30:	68fb      	ldr	r3, [r7, #12]
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	20008b18 	.word	0x20008b18

0800ad40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	607a      	str	r2, [r7, #4]
 800ad4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	68ba      	ldr	r2, [r7, #8]
 800ad56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ad5e:	68ba      	ldr	r2, [r7, #8]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d812      	bhi.n	800ad8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	1ad2      	subs	r2, r2, r3
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	699b      	ldr	r3, [r3, #24]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d302      	bcc.n	800ad7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ad74:	2301      	movs	r3, #1
 800ad76:	617b      	str	r3, [r7, #20]
 800ad78:	e01b      	b.n	800adb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ad7a:	4b10      	ldr	r3, [pc, #64]	; (800adbc <prvInsertTimerInActiveList+0x7c>)
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	3304      	adds	r3, #4
 800ad82:	4619      	mov	r1, r3
 800ad84:	4610      	mov	r0, r2
 800ad86:	f7fe f9e2 	bl	800914e <vListInsert>
 800ad8a:	e012      	b.n	800adb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d206      	bcs.n	800ada2 <prvInsertTimerInActiveList+0x62>
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d302      	bcc.n	800ada2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	617b      	str	r3, [r7, #20]
 800ada0:	e007      	b.n	800adb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ada2:	4b07      	ldr	r3, [pc, #28]	; (800adc0 <prvInsertTimerInActiveList+0x80>)
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	3304      	adds	r3, #4
 800adaa:	4619      	mov	r1, r3
 800adac:	4610      	mov	r0, r2
 800adae:	f7fe f9ce 	bl	800914e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800adb2:	697b      	ldr	r3, [r7, #20]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3718      	adds	r7, #24
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	20008b0c 	.word	0x20008b0c
 800adc0:	20008b08 	.word	0x20008b08

0800adc4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b08e      	sub	sp, #56	; 0x38
 800adc8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800adca:	e0ca      	b.n	800af62 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	da18      	bge.n	800ae04 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800add2:	1d3b      	adds	r3, r7, #4
 800add4:	3304      	adds	r3, #4
 800add6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800add8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adda:	2b00      	cmp	r3, #0
 800addc:	d10a      	bne.n	800adf4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800adde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade2:	f383 8811 	msr	BASEPRI, r3
 800ade6:	f3bf 8f6f 	isb	sy
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	61fb      	str	r3, [r7, #28]
}
 800adf0:	bf00      	nop
 800adf2:	e7fe      	b.n	800adf2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800adf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adfa:	6850      	ldr	r0, [r2, #4]
 800adfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adfe:	6892      	ldr	r2, [r2, #8]
 800ae00:	4611      	mov	r1, r2
 800ae02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f2c0 80aa 	blt.w	800af60 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ae10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae12:	695b      	ldr	r3, [r3, #20]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d004      	beq.n	800ae22 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7fe f9cf 	bl	80091c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae22:	463b      	mov	r3, r7
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7ff ff6b 	bl	800ad00 <prvSampleTimeNow>
 800ae2a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b09      	cmp	r3, #9
 800ae30:	f200 8097 	bhi.w	800af62 <prvProcessReceivedCommands+0x19e>
 800ae34:	a201      	add	r2, pc, #4	; (adr r2, 800ae3c <prvProcessReceivedCommands+0x78>)
 800ae36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae3a:	bf00      	nop
 800ae3c:	0800ae65 	.word	0x0800ae65
 800ae40:	0800ae65 	.word	0x0800ae65
 800ae44:	0800ae65 	.word	0x0800ae65
 800ae48:	0800aed9 	.word	0x0800aed9
 800ae4c:	0800aeed 	.word	0x0800aeed
 800ae50:	0800af37 	.word	0x0800af37
 800ae54:	0800ae65 	.word	0x0800ae65
 800ae58:	0800ae65 	.word	0x0800ae65
 800ae5c:	0800aed9 	.word	0x0800aed9
 800ae60:	0800aeed 	.word	0x0800aeed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae6a:	f043 0301 	orr.w	r3, r3, #1
 800ae6e:	b2da      	uxtb	r2, r3
 800ae70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ae76:	68ba      	ldr	r2, [r7, #8]
 800ae78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7a:	699b      	ldr	r3, [r3, #24]
 800ae7c:	18d1      	adds	r1, r2, r3
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae84:	f7ff ff5c 	bl	800ad40 <prvInsertTimerInActiveList>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d069      	beq.n	800af62 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae90:	6a1b      	ldr	r3, [r3, #32]
 800ae92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae9c:	f003 0304 	and.w	r3, r3, #4
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d05e      	beq.n	800af62 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea8:	699b      	ldr	r3, [r3, #24]
 800aeaa:	441a      	add	r2, r3
 800aeac:	2300      	movs	r3, #0
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeb6:	f7ff fe05 	bl	800aac4 <xTimerGenericCommand>
 800aeba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aebc:	6a3b      	ldr	r3, [r7, #32]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d14f      	bne.n	800af62 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec6:	f383 8811 	msr	BASEPRI, r3
 800aeca:	f3bf 8f6f 	isb	sy
 800aece:	f3bf 8f4f 	dsb	sy
 800aed2:	61bb      	str	r3, [r7, #24]
}
 800aed4:	bf00      	nop
 800aed6:	e7fe      	b.n	800aed6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aede:	f023 0301 	bic.w	r3, r3, #1
 800aee2:	b2da      	uxtb	r2, r3
 800aee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aeea:	e03a      	b.n	800af62 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aef2:	f043 0301 	orr.w	r3, r3, #1
 800aef6:	b2da      	uxtb	r2, r3
 800aef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800af04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af06:	699b      	ldr	r3, [r3, #24]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d10a      	bne.n	800af22 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800af0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af10:	f383 8811 	msr	BASEPRI, r3
 800af14:	f3bf 8f6f 	isb	sy
 800af18:	f3bf 8f4f 	dsb	sy
 800af1c:	617b      	str	r3, [r7, #20]
}
 800af1e:	bf00      	nop
 800af20:	e7fe      	b.n	800af20 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af24:	699a      	ldr	r2, [r3, #24]
 800af26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af28:	18d1      	adds	r1, r2, r3
 800af2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af30:	f7ff ff06 	bl	800ad40 <prvInsertTimerInActiveList>
					break;
 800af34:	e015      	b.n	800af62 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800af36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af3c:	f003 0302 	and.w	r3, r3, #2
 800af40:	2b00      	cmp	r3, #0
 800af42:	d103      	bne.n	800af4c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800af44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af46:	f000 fbdb 	bl	800b700 <vPortFree>
 800af4a:	e00a      	b.n	800af62 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af52:	f023 0301 	bic.w	r3, r3, #1
 800af56:	b2da      	uxtb	r2, r3
 800af58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800af5e:	e000      	b.n	800af62 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800af60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af62:	4b08      	ldr	r3, [pc, #32]	; (800af84 <prvProcessReceivedCommands+0x1c0>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	1d39      	adds	r1, r7, #4
 800af68:	2200      	movs	r2, #0
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7fe fbf0 	bl	8009750 <xQueueReceive>
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	f47f af2a 	bne.w	800adcc <prvProcessReceivedCommands+0x8>
	}
}
 800af78:	bf00      	nop
 800af7a:	bf00      	nop
 800af7c:	3730      	adds	r7, #48	; 0x30
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	20008b10 	.word	0x20008b10

0800af88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b088      	sub	sp, #32
 800af8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af8e:	e048      	b.n	800b022 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af90:	4b2d      	ldr	r3, [pc, #180]	; (800b048 <prvSwitchTimerLists+0xc0>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af9a:	4b2b      	ldr	r3, [pc, #172]	; (800b048 <prvSwitchTimerLists+0xc0>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3304      	adds	r3, #4
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7fe f909 	bl	80091c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6a1b      	ldr	r3, [r3, #32]
 800afb2:	68f8      	ldr	r0, [r7, #12]
 800afb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afbc:	f003 0304 	and.w	r3, r3, #4
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d02e      	beq.n	800b022 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	693a      	ldr	r2, [r7, #16]
 800afca:	4413      	add	r3, r2
 800afcc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800afce:	68ba      	ldr	r2, [r7, #8]
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d90e      	bls.n	800aff4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	68ba      	ldr	r2, [r7, #8]
 800afda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afe2:	4b19      	ldr	r3, [pc, #100]	; (800b048 <prvSwitchTimerLists+0xc0>)
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	3304      	adds	r3, #4
 800afea:	4619      	mov	r1, r3
 800afec:	4610      	mov	r0, r2
 800afee:	f7fe f8ae 	bl	800914e <vListInsert>
 800aff2:	e016      	b.n	800b022 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aff4:	2300      	movs	r3, #0
 800aff6:	9300      	str	r3, [sp, #0]
 800aff8:	2300      	movs	r3, #0
 800affa:	693a      	ldr	r2, [r7, #16]
 800affc:	2100      	movs	r1, #0
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f7ff fd60 	bl	800aac4 <xTimerGenericCommand>
 800b004:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d10a      	bne.n	800b022 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b010:	f383 8811 	msr	BASEPRI, r3
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	603b      	str	r3, [r7, #0]
}
 800b01e:	bf00      	nop
 800b020:	e7fe      	b.n	800b020 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b022:	4b09      	ldr	r3, [pc, #36]	; (800b048 <prvSwitchTimerLists+0xc0>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d1b1      	bne.n	800af90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b02c:	4b06      	ldr	r3, [pc, #24]	; (800b048 <prvSwitchTimerLists+0xc0>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b032:	4b06      	ldr	r3, [pc, #24]	; (800b04c <prvSwitchTimerLists+0xc4>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a04      	ldr	r2, [pc, #16]	; (800b048 <prvSwitchTimerLists+0xc0>)
 800b038:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b03a:	4a04      	ldr	r2, [pc, #16]	; (800b04c <prvSwitchTimerLists+0xc4>)
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	6013      	str	r3, [r2, #0]
}
 800b040:	bf00      	nop
 800b042:	3718      	adds	r7, #24
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	20008b08 	.word	0x20008b08
 800b04c:	20008b0c 	.word	0x20008b0c

0800b050 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b056:	f000 f965 	bl	800b324 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b05a:	4b15      	ldr	r3, [pc, #84]	; (800b0b0 <prvCheckForValidListAndQueue+0x60>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d120      	bne.n	800b0a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b062:	4814      	ldr	r0, [pc, #80]	; (800b0b4 <prvCheckForValidListAndQueue+0x64>)
 800b064:	f7fe f822 	bl	80090ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b068:	4813      	ldr	r0, [pc, #76]	; (800b0b8 <prvCheckForValidListAndQueue+0x68>)
 800b06a:	f7fe f81f 	bl	80090ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b06e:	4b13      	ldr	r3, [pc, #76]	; (800b0bc <prvCheckForValidListAndQueue+0x6c>)
 800b070:	4a10      	ldr	r2, [pc, #64]	; (800b0b4 <prvCheckForValidListAndQueue+0x64>)
 800b072:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b074:	4b12      	ldr	r3, [pc, #72]	; (800b0c0 <prvCheckForValidListAndQueue+0x70>)
 800b076:	4a10      	ldr	r2, [pc, #64]	; (800b0b8 <prvCheckForValidListAndQueue+0x68>)
 800b078:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b07a:	2300      	movs	r3, #0
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	4b11      	ldr	r3, [pc, #68]	; (800b0c4 <prvCheckForValidListAndQueue+0x74>)
 800b080:	4a11      	ldr	r2, [pc, #68]	; (800b0c8 <prvCheckForValidListAndQueue+0x78>)
 800b082:	2110      	movs	r1, #16
 800b084:	200a      	movs	r0, #10
 800b086:	f7fe f92d 	bl	80092e4 <xQueueGenericCreateStatic>
 800b08a:	4603      	mov	r3, r0
 800b08c:	4a08      	ldr	r2, [pc, #32]	; (800b0b0 <prvCheckForValidListAndQueue+0x60>)
 800b08e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b090:	4b07      	ldr	r3, [pc, #28]	; (800b0b0 <prvCheckForValidListAndQueue+0x60>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d005      	beq.n	800b0a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b098:	4b05      	ldr	r3, [pc, #20]	; (800b0b0 <prvCheckForValidListAndQueue+0x60>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	490b      	ldr	r1, [pc, #44]	; (800b0cc <prvCheckForValidListAndQueue+0x7c>)
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7fe fd46 	bl	8009b30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0a4:	f000 f96e 	bl	800b384 <vPortExitCritical>
}
 800b0a8:	bf00      	nop
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	20008b10 	.word	0x20008b10
 800b0b4:	20008ae0 	.word	0x20008ae0
 800b0b8:	20008af4 	.word	0x20008af4
 800b0bc:	20008b08 	.word	0x20008b08
 800b0c0:	20008b0c 	.word	0x20008b0c
 800b0c4:	20008bbc 	.word	0x20008bbc
 800b0c8:	20008b1c 	.word	0x20008b1c
 800b0cc:	080185a8 	.word	0x080185a8

0800b0d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b085      	sub	sp, #20
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	3b04      	subs	r3, #4
 800b0e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b0e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	3b04      	subs	r3, #4
 800b0ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	f023 0201 	bic.w	r2, r3, #1
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	3b04      	subs	r3, #4
 800b0fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b100:	4a0c      	ldr	r2, [pc, #48]	; (800b134 <pxPortInitialiseStack+0x64>)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	3b14      	subs	r3, #20
 800b10a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	3b04      	subs	r3, #4
 800b116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f06f 0202 	mvn.w	r2, #2
 800b11e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	3b20      	subs	r3, #32
 800b124:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b126:	68fb      	ldr	r3, [r7, #12]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3714      	adds	r7, #20
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr
 800b134:	0800b139 	.word	0x0800b139

0800b138 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b13e:	2300      	movs	r3, #0
 800b140:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b142:	4b12      	ldr	r3, [pc, #72]	; (800b18c <prvTaskExitError+0x54>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b14a:	d00a      	beq.n	800b162 <prvTaskExitError+0x2a>
	__asm volatile
 800b14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b150:	f383 8811 	msr	BASEPRI, r3
 800b154:	f3bf 8f6f 	isb	sy
 800b158:	f3bf 8f4f 	dsb	sy
 800b15c:	60fb      	str	r3, [r7, #12]
}
 800b15e:	bf00      	nop
 800b160:	e7fe      	b.n	800b160 <prvTaskExitError+0x28>
	__asm volatile
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	60bb      	str	r3, [r7, #8]
}
 800b174:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b176:	bf00      	nop
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d0fc      	beq.n	800b178 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b17e:	bf00      	nop
 800b180:	bf00      	nop
 800b182:	3714      	adds	r7, #20
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	20000010 	.word	0x20000010

0800b190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b190:	4b07      	ldr	r3, [pc, #28]	; (800b1b0 <pxCurrentTCBConst2>)
 800b192:	6819      	ldr	r1, [r3, #0]
 800b194:	6808      	ldr	r0, [r1, #0]
 800b196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19a:	f380 8809 	msr	PSP, r0
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	f04f 0000 	mov.w	r0, #0
 800b1a6:	f380 8811 	msr	BASEPRI, r0
 800b1aa:	4770      	bx	lr
 800b1ac:	f3af 8000 	nop.w

0800b1b0 <pxCurrentTCBConst2>:
 800b1b0:	200085e0 	.word	0x200085e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b1b4:	bf00      	nop
 800b1b6:	bf00      	nop

0800b1b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b1b8:	4808      	ldr	r0, [pc, #32]	; (800b1dc <prvPortStartFirstTask+0x24>)
 800b1ba:	6800      	ldr	r0, [r0, #0]
 800b1bc:	6800      	ldr	r0, [r0, #0]
 800b1be:	f380 8808 	msr	MSP, r0
 800b1c2:	f04f 0000 	mov.w	r0, #0
 800b1c6:	f380 8814 	msr	CONTROL, r0
 800b1ca:	b662      	cpsie	i
 800b1cc:	b661      	cpsie	f
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	df00      	svc	0
 800b1d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b1da:	bf00      	nop
 800b1dc:	e000ed08 	.word	0xe000ed08

0800b1e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b1e6:	4b46      	ldr	r3, [pc, #280]	; (800b300 <xPortStartScheduler+0x120>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a46      	ldr	r2, [pc, #280]	; (800b304 <xPortStartScheduler+0x124>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d10a      	bne.n	800b206 <xPortStartScheduler+0x26>
	__asm volatile
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	613b      	str	r3, [r7, #16]
}
 800b202:	bf00      	nop
 800b204:	e7fe      	b.n	800b204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b206:	4b3e      	ldr	r3, [pc, #248]	; (800b300 <xPortStartScheduler+0x120>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a3f      	ldr	r2, [pc, #252]	; (800b308 <xPortStartScheduler+0x128>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d10a      	bne.n	800b226 <xPortStartScheduler+0x46>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	60fb      	str	r3, [r7, #12]
}
 800b222:	bf00      	nop
 800b224:	e7fe      	b.n	800b224 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b226:	4b39      	ldr	r3, [pc, #228]	; (800b30c <xPortStartScheduler+0x12c>)
 800b228:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	22ff      	movs	r2, #255	; 0xff
 800b236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b240:	78fb      	ldrb	r3, [r7, #3]
 800b242:	b2db      	uxtb	r3, r3
 800b244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b248:	b2da      	uxtb	r2, r3
 800b24a:	4b31      	ldr	r3, [pc, #196]	; (800b310 <xPortStartScheduler+0x130>)
 800b24c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b24e:	4b31      	ldr	r3, [pc, #196]	; (800b314 <xPortStartScheduler+0x134>)
 800b250:	2207      	movs	r2, #7
 800b252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b254:	e009      	b.n	800b26a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b256:	4b2f      	ldr	r3, [pc, #188]	; (800b314 <xPortStartScheduler+0x134>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	3b01      	subs	r3, #1
 800b25c:	4a2d      	ldr	r2, [pc, #180]	; (800b314 <xPortStartScheduler+0x134>)
 800b25e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b260:	78fb      	ldrb	r3, [r7, #3]
 800b262:	b2db      	uxtb	r3, r3
 800b264:	005b      	lsls	r3, r3, #1
 800b266:	b2db      	uxtb	r3, r3
 800b268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b26a:	78fb      	ldrb	r3, [r7, #3]
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b272:	2b80      	cmp	r3, #128	; 0x80
 800b274:	d0ef      	beq.n	800b256 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b276:	4b27      	ldr	r3, [pc, #156]	; (800b314 <xPortStartScheduler+0x134>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f1c3 0307 	rsb	r3, r3, #7
 800b27e:	2b04      	cmp	r3, #4
 800b280:	d00a      	beq.n	800b298 <xPortStartScheduler+0xb8>
	__asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	60bb      	str	r3, [r7, #8]
}
 800b294:	bf00      	nop
 800b296:	e7fe      	b.n	800b296 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b298:	4b1e      	ldr	r3, [pc, #120]	; (800b314 <xPortStartScheduler+0x134>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	021b      	lsls	r3, r3, #8
 800b29e:	4a1d      	ldr	r2, [pc, #116]	; (800b314 <xPortStartScheduler+0x134>)
 800b2a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b2a2:	4b1c      	ldr	r3, [pc, #112]	; (800b314 <xPortStartScheduler+0x134>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2aa:	4a1a      	ldr	r2, [pc, #104]	; (800b314 <xPortStartScheduler+0x134>)
 800b2ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	b2da      	uxtb	r2, r3
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b2b6:	4b18      	ldr	r3, [pc, #96]	; (800b318 <xPortStartScheduler+0x138>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a17      	ldr	r2, [pc, #92]	; (800b318 <xPortStartScheduler+0x138>)
 800b2bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b2c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b2c2:	4b15      	ldr	r3, [pc, #84]	; (800b318 <xPortStartScheduler+0x138>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a14      	ldr	r2, [pc, #80]	; (800b318 <xPortStartScheduler+0x138>)
 800b2c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b2cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b2ce:	f000 f8dd 	bl	800b48c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b2d2:	4b12      	ldr	r3, [pc, #72]	; (800b31c <xPortStartScheduler+0x13c>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b2d8:	f000 f8fc 	bl	800b4d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b2dc:	4b10      	ldr	r3, [pc, #64]	; (800b320 <xPortStartScheduler+0x140>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a0f      	ldr	r2, [pc, #60]	; (800b320 <xPortStartScheduler+0x140>)
 800b2e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b2e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b2e8:	f7ff ff66 	bl	800b1b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b2ec:	f7ff f830 	bl	800a350 <vTaskSwitchContext>
	prvTaskExitError();
 800b2f0:	f7ff ff22 	bl	800b138 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	e000ed00 	.word	0xe000ed00
 800b304:	410fc271 	.word	0x410fc271
 800b308:	410fc270 	.word	0x410fc270
 800b30c:	e000e400 	.word	0xe000e400
 800b310:	20008c0c 	.word	0x20008c0c
 800b314:	20008c10 	.word	0x20008c10
 800b318:	e000ed20 	.word	0xe000ed20
 800b31c:	20000010 	.word	0x20000010
 800b320:	e000ef34 	.word	0xe000ef34

0800b324 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
	__asm volatile
 800b32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32e:	f383 8811 	msr	BASEPRI, r3
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	f3bf 8f4f 	dsb	sy
 800b33a:	607b      	str	r3, [r7, #4]
}
 800b33c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b33e:	4b0f      	ldr	r3, [pc, #60]	; (800b37c <vPortEnterCritical+0x58>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3301      	adds	r3, #1
 800b344:	4a0d      	ldr	r2, [pc, #52]	; (800b37c <vPortEnterCritical+0x58>)
 800b346:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b348:	4b0c      	ldr	r3, [pc, #48]	; (800b37c <vPortEnterCritical+0x58>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d10f      	bne.n	800b370 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b350:	4b0b      	ldr	r3, [pc, #44]	; (800b380 <vPortEnterCritical+0x5c>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00a      	beq.n	800b370 <vPortEnterCritical+0x4c>
	__asm volatile
 800b35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35e:	f383 8811 	msr	BASEPRI, r3
 800b362:	f3bf 8f6f 	isb	sy
 800b366:	f3bf 8f4f 	dsb	sy
 800b36a:	603b      	str	r3, [r7, #0]
}
 800b36c:	bf00      	nop
 800b36e:	e7fe      	b.n	800b36e <vPortEnterCritical+0x4a>
	}
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr
 800b37c:	20000010 	.word	0x20000010
 800b380:	e000ed04 	.word	0xe000ed04

0800b384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b38a:	4b12      	ldr	r3, [pc, #72]	; (800b3d4 <vPortExitCritical+0x50>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10a      	bne.n	800b3a8 <vPortExitCritical+0x24>
	__asm volatile
 800b392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b396:	f383 8811 	msr	BASEPRI, r3
 800b39a:	f3bf 8f6f 	isb	sy
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	607b      	str	r3, [r7, #4]
}
 800b3a4:	bf00      	nop
 800b3a6:	e7fe      	b.n	800b3a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b3a8:	4b0a      	ldr	r3, [pc, #40]	; (800b3d4 <vPortExitCritical+0x50>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	4a09      	ldr	r2, [pc, #36]	; (800b3d4 <vPortExitCritical+0x50>)
 800b3b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b3b2:	4b08      	ldr	r3, [pc, #32]	; (800b3d4 <vPortExitCritical+0x50>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d105      	bne.n	800b3c6 <vPortExitCritical+0x42>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	f383 8811 	msr	BASEPRI, r3
}
 800b3c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b3c6:	bf00      	nop
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	20000010 	.word	0x20000010
	...

0800b3e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b3e0:	f3ef 8009 	mrs	r0, PSP
 800b3e4:	f3bf 8f6f 	isb	sy
 800b3e8:	4b15      	ldr	r3, [pc, #84]	; (800b440 <pxCurrentTCBConst>)
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	f01e 0f10 	tst.w	lr, #16
 800b3f0:	bf08      	it	eq
 800b3f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b3f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fa:	6010      	str	r0, [r2, #0]
 800b3fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b400:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b404:	f380 8811 	msr	BASEPRI, r0
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f7fe ff9e 	bl	800a350 <vTaskSwitchContext>
 800b414:	f04f 0000 	mov.w	r0, #0
 800b418:	f380 8811 	msr	BASEPRI, r0
 800b41c:	bc09      	pop	{r0, r3}
 800b41e:	6819      	ldr	r1, [r3, #0]
 800b420:	6808      	ldr	r0, [r1, #0]
 800b422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b426:	f01e 0f10 	tst.w	lr, #16
 800b42a:	bf08      	it	eq
 800b42c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b430:	f380 8809 	msr	PSP, r0
 800b434:	f3bf 8f6f 	isb	sy
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	f3af 8000 	nop.w

0800b440 <pxCurrentTCBConst>:
 800b440:	200085e0 	.word	0x200085e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b444:	bf00      	nop
 800b446:	bf00      	nop

0800b448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	607b      	str	r3, [r7, #4]
}
 800b460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b462:	f7fe febb 	bl	800a1dc <xTaskIncrementTick>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d003      	beq.n	800b474 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b46c:	4b06      	ldr	r3, [pc, #24]	; (800b488 <xPortSysTickHandler+0x40>)
 800b46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	2300      	movs	r3, #0
 800b476:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	f383 8811 	msr	BASEPRI, r3
}
 800b47e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b480:	bf00      	nop
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	e000ed04 	.word	0xe000ed04

0800b48c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b48c:	b480      	push	{r7}
 800b48e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b490:	4b0b      	ldr	r3, [pc, #44]	; (800b4c0 <vPortSetupTimerInterrupt+0x34>)
 800b492:	2200      	movs	r2, #0
 800b494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b496:	4b0b      	ldr	r3, [pc, #44]	; (800b4c4 <vPortSetupTimerInterrupt+0x38>)
 800b498:	2200      	movs	r2, #0
 800b49a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b49c:	4b0a      	ldr	r3, [pc, #40]	; (800b4c8 <vPortSetupTimerInterrupt+0x3c>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a0a      	ldr	r2, [pc, #40]	; (800b4cc <vPortSetupTimerInterrupt+0x40>)
 800b4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4a6:	099b      	lsrs	r3, r3, #6
 800b4a8:	4a09      	ldr	r2, [pc, #36]	; (800b4d0 <vPortSetupTimerInterrupt+0x44>)
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b4ae:	4b04      	ldr	r3, [pc, #16]	; (800b4c0 <vPortSetupTimerInterrupt+0x34>)
 800b4b0:	2207      	movs	r2, #7
 800b4b2:	601a      	str	r2, [r3, #0]
}
 800b4b4:	bf00      	nop
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	e000e010 	.word	0xe000e010
 800b4c4:	e000e018 	.word	0xe000e018
 800b4c8:	20000004 	.word	0x20000004
 800b4cc:	10624dd3 	.word	0x10624dd3
 800b4d0:	e000e014 	.word	0xe000e014

0800b4d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b4d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b4e4 <vPortEnableVFP+0x10>
 800b4d8:	6801      	ldr	r1, [r0, #0]
 800b4da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b4de:	6001      	str	r1, [r0, #0]
 800b4e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b4e2:	bf00      	nop
 800b4e4:	e000ed88 	.word	0xe000ed88

0800b4e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b4ee:	f3ef 8305 	mrs	r3, IPSR
 800b4f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2b0f      	cmp	r3, #15
 800b4f8:	d914      	bls.n	800b524 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b4fa:	4a17      	ldr	r2, [pc, #92]	; (800b558 <vPortValidateInterruptPriority+0x70>)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	4413      	add	r3, r2
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b504:	4b15      	ldr	r3, [pc, #84]	; (800b55c <vPortValidateInterruptPriority+0x74>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	7afa      	ldrb	r2, [r7, #11]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d20a      	bcs.n	800b524 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	607b      	str	r3, [r7, #4]
}
 800b520:	bf00      	nop
 800b522:	e7fe      	b.n	800b522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b524:	4b0e      	ldr	r3, [pc, #56]	; (800b560 <vPortValidateInterruptPriority+0x78>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b52c:	4b0d      	ldr	r3, [pc, #52]	; (800b564 <vPortValidateInterruptPriority+0x7c>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	429a      	cmp	r2, r3
 800b532:	d90a      	bls.n	800b54a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b538:	f383 8811 	msr	BASEPRI, r3
 800b53c:	f3bf 8f6f 	isb	sy
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	603b      	str	r3, [r7, #0]
}
 800b546:	bf00      	nop
 800b548:	e7fe      	b.n	800b548 <vPortValidateInterruptPriority+0x60>
	}
 800b54a:	bf00      	nop
 800b54c:	3714      	adds	r7, #20
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	e000e3f0 	.word	0xe000e3f0
 800b55c:	20008c0c 	.word	0x20008c0c
 800b560:	e000ed0c 	.word	0xe000ed0c
 800b564:	20008c10 	.word	0x20008c10

0800b568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b08a      	sub	sp, #40	; 0x28
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b570:	2300      	movs	r3, #0
 800b572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b574:	f7fe fd76 	bl	800a064 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b578:	4b5b      	ldr	r3, [pc, #364]	; (800b6e8 <pvPortMalloc+0x180>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d101      	bne.n	800b584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b580:	f000 f920 	bl	800b7c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b584:	4b59      	ldr	r3, [pc, #356]	; (800b6ec <pvPortMalloc+0x184>)
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4013      	ands	r3, r2
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f040 8093 	bne.w	800b6b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d01d      	beq.n	800b5d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b598:	2208      	movs	r2, #8
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4413      	add	r3, r2
 800b59e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f003 0307 	and.w	r3, r3, #7
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d014      	beq.n	800b5d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f023 0307 	bic.w	r3, r3, #7
 800b5b0:	3308      	adds	r3, #8
 800b5b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f003 0307 	and.w	r3, r3, #7
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00a      	beq.n	800b5d4 <pvPortMalloc+0x6c>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	617b      	str	r3, [r7, #20]
}
 800b5d0:	bf00      	nop
 800b5d2:	e7fe      	b.n	800b5d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d06e      	beq.n	800b6b8 <pvPortMalloc+0x150>
 800b5da:	4b45      	ldr	r3, [pc, #276]	; (800b6f0 <pvPortMalloc+0x188>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d869      	bhi.n	800b6b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b5e4:	4b43      	ldr	r3, [pc, #268]	; (800b6f4 <pvPortMalloc+0x18c>)
 800b5e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b5e8:	4b42      	ldr	r3, [pc, #264]	; (800b6f4 <pvPortMalloc+0x18c>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5ee:	e004      	b.n	800b5fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	429a      	cmp	r2, r3
 800b602:	d903      	bls.n	800b60c <pvPortMalloc+0xa4>
 800b604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1f1      	bne.n	800b5f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b60c:	4b36      	ldr	r3, [pc, #216]	; (800b6e8 <pvPortMalloc+0x180>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b612:	429a      	cmp	r2, r3
 800b614:	d050      	beq.n	800b6b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b616:	6a3b      	ldr	r3, [r7, #32]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2208      	movs	r2, #8
 800b61c:	4413      	add	r3, r2
 800b61e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	6a3b      	ldr	r3, [r7, #32]
 800b626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62a:	685a      	ldr	r2, [r3, #4]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	1ad2      	subs	r2, r2, r3
 800b630:	2308      	movs	r3, #8
 800b632:	005b      	lsls	r3, r3, #1
 800b634:	429a      	cmp	r2, r3
 800b636:	d91f      	bls.n	800b678 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4413      	add	r3, r2
 800b63e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	f003 0307 	and.w	r3, r3, #7
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00a      	beq.n	800b660 <pvPortMalloc+0xf8>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	613b      	str	r3, [r7, #16]
}
 800b65c:	bf00      	nop
 800b65e:	e7fe      	b.n	800b65e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b662:	685a      	ldr	r2, [r3, #4]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	1ad2      	subs	r2, r2, r3
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b672:	69b8      	ldr	r0, [r7, #24]
 800b674:	f000 f908 	bl	800b888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b678:	4b1d      	ldr	r3, [pc, #116]	; (800b6f0 <pvPortMalloc+0x188>)
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	4a1b      	ldr	r2, [pc, #108]	; (800b6f0 <pvPortMalloc+0x188>)
 800b684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b686:	4b1a      	ldr	r3, [pc, #104]	; (800b6f0 <pvPortMalloc+0x188>)
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	4b1b      	ldr	r3, [pc, #108]	; (800b6f8 <pvPortMalloc+0x190>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d203      	bcs.n	800b69a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b692:	4b17      	ldr	r3, [pc, #92]	; (800b6f0 <pvPortMalloc+0x188>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a18      	ldr	r2, [pc, #96]	; (800b6f8 <pvPortMalloc+0x190>)
 800b698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69c:	685a      	ldr	r2, [r3, #4]
 800b69e:	4b13      	ldr	r3, [pc, #76]	; (800b6ec <pvPortMalloc+0x184>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	431a      	orrs	r2, r3
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b6ae:	4b13      	ldr	r3, [pc, #76]	; (800b6fc <pvPortMalloc+0x194>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	4a11      	ldr	r2, [pc, #68]	; (800b6fc <pvPortMalloc+0x194>)
 800b6b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b6b8:	f7fe fce2 	bl	800a080 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	f003 0307 	and.w	r3, r3, #7
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d00a      	beq.n	800b6dc <pvPortMalloc+0x174>
	__asm volatile
 800b6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ca:	f383 8811 	msr	BASEPRI, r3
 800b6ce:	f3bf 8f6f 	isb	sy
 800b6d2:	f3bf 8f4f 	dsb	sy
 800b6d6:	60fb      	str	r3, [r7, #12]
}
 800b6d8:	bf00      	nop
 800b6da:	e7fe      	b.n	800b6da <pvPortMalloc+0x172>
	return pvReturn;
 800b6dc:	69fb      	ldr	r3, [r7, #28]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3728      	adds	r7, #40	; 0x28
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	2001014c 	.word	0x2001014c
 800b6ec:	20010160 	.word	0x20010160
 800b6f0:	20010150 	.word	0x20010150
 800b6f4:	20010144 	.word	0x20010144
 800b6f8:	20010154 	.word	0x20010154
 800b6fc:	20010158 	.word	0x20010158

0800b700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b086      	sub	sp, #24
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d04d      	beq.n	800b7ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b712:	2308      	movs	r3, #8
 800b714:	425b      	negs	r3, r3
 800b716:	697a      	ldr	r2, [r7, #20]
 800b718:	4413      	add	r3, r2
 800b71a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	685a      	ldr	r2, [r3, #4]
 800b724:	4b24      	ldr	r3, [pc, #144]	; (800b7b8 <vPortFree+0xb8>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4013      	ands	r3, r2
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d10a      	bne.n	800b744 <vPortFree+0x44>
	__asm volatile
 800b72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b732:	f383 8811 	msr	BASEPRI, r3
 800b736:	f3bf 8f6f 	isb	sy
 800b73a:	f3bf 8f4f 	dsb	sy
 800b73e:	60fb      	str	r3, [r7, #12]
}
 800b740:	bf00      	nop
 800b742:	e7fe      	b.n	800b742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00a      	beq.n	800b762 <vPortFree+0x62>
	__asm volatile
 800b74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b750:	f383 8811 	msr	BASEPRI, r3
 800b754:	f3bf 8f6f 	isb	sy
 800b758:	f3bf 8f4f 	dsb	sy
 800b75c:	60bb      	str	r3, [r7, #8]
}
 800b75e:	bf00      	nop
 800b760:	e7fe      	b.n	800b760 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	685a      	ldr	r2, [r3, #4]
 800b766:	4b14      	ldr	r3, [pc, #80]	; (800b7b8 <vPortFree+0xb8>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4013      	ands	r3, r2
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d01e      	beq.n	800b7ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d11a      	bne.n	800b7ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	685a      	ldr	r2, [r3, #4]
 800b77c:	4b0e      	ldr	r3, [pc, #56]	; (800b7b8 <vPortFree+0xb8>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	43db      	mvns	r3, r3
 800b782:	401a      	ands	r2, r3
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b788:	f7fe fc6c 	bl	800a064 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	685a      	ldr	r2, [r3, #4]
 800b790:	4b0a      	ldr	r3, [pc, #40]	; (800b7bc <vPortFree+0xbc>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4413      	add	r3, r2
 800b796:	4a09      	ldr	r2, [pc, #36]	; (800b7bc <vPortFree+0xbc>)
 800b798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b79a:	6938      	ldr	r0, [r7, #16]
 800b79c:	f000 f874 	bl	800b888 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b7a0:	4b07      	ldr	r3, [pc, #28]	; (800b7c0 <vPortFree+0xc0>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	4a06      	ldr	r2, [pc, #24]	; (800b7c0 <vPortFree+0xc0>)
 800b7a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b7aa:	f7fe fc69 	bl	800a080 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b7ae:	bf00      	nop
 800b7b0:	3718      	adds	r7, #24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	20010160 	.word	0x20010160
 800b7bc:	20010150 	.word	0x20010150
 800b7c0:	2001015c 	.word	0x2001015c

0800b7c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b7ca:	f247 5330 	movw	r3, #30000	; 0x7530
 800b7ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b7d0:	4b27      	ldr	r3, [pc, #156]	; (800b870 <prvHeapInit+0xac>)
 800b7d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f003 0307 	and.w	r3, r3, #7
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00c      	beq.n	800b7f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	3307      	adds	r3, #7
 800b7e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f023 0307 	bic.w	r3, r3, #7
 800b7ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b7ec:	68ba      	ldr	r2, [r7, #8]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	1ad3      	subs	r3, r2, r3
 800b7f2:	4a1f      	ldr	r2, [pc, #124]	; (800b870 <prvHeapInit+0xac>)
 800b7f4:	4413      	add	r3, r2
 800b7f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b7fc:	4a1d      	ldr	r2, [pc, #116]	; (800b874 <prvHeapInit+0xb0>)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b802:	4b1c      	ldr	r3, [pc, #112]	; (800b874 <prvHeapInit+0xb0>)
 800b804:	2200      	movs	r2, #0
 800b806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	68ba      	ldr	r2, [r7, #8]
 800b80c:	4413      	add	r3, r2
 800b80e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b810:	2208      	movs	r2, #8
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	1a9b      	subs	r3, r3, r2
 800b816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f023 0307 	bic.w	r3, r3, #7
 800b81e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	4a15      	ldr	r2, [pc, #84]	; (800b878 <prvHeapInit+0xb4>)
 800b824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b826:	4b14      	ldr	r3, [pc, #80]	; (800b878 <prvHeapInit+0xb4>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2200      	movs	r2, #0
 800b82c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b82e:	4b12      	ldr	r3, [pc, #72]	; (800b878 <prvHeapInit+0xb4>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2200      	movs	r2, #0
 800b834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	68fa      	ldr	r2, [r7, #12]
 800b83e:	1ad2      	subs	r2, r2, r3
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b844:	4b0c      	ldr	r3, [pc, #48]	; (800b878 <prvHeapInit+0xb4>)
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	4a0a      	ldr	r2, [pc, #40]	; (800b87c <prvHeapInit+0xb8>)
 800b852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	4a09      	ldr	r2, [pc, #36]	; (800b880 <prvHeapInit+0xbc>)
 800b85a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b85c:	4b09      	ldr	r3, [pc, #36]	; (800b884 <prvHeapInit+0xc0>)
 800b85e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b862:	601a      	str	r2, [r3, #0]
}
 800b864:	bf00      	nop
 800b866:	3714      	adds	r7, #20
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr
 800b870:	20008c14 	.word	0x20008c14
 800b874:	20010144 	.word	0x20010144
 800b878:	2001014c 	.word	0x2001014c
 800b87c:	20010154 	.word	0x20010154
 800b880:	20010150 	.word	0x20010150
 800b884:	20010160 	.word	0x20010160

0800b888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b888:	b480      	push	{r7}
 800b88a:	b085      	sub	sp, #20
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b890:	4b28      	ldr	r3, [pc, #160]	; (800b934 <prvInsertBlockIntoFreeList+0xac>)
 800b892:	60fb      	str	r3, [r7, #12]
 800b894:	e002      	b.n	800b89c <prvInsertBlockIntoFreeList+0x14>
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	60fb      	str	r3, [r7, #12]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d8f7      	bhi.n	800b896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	4413      	add	r3, r2
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d108      	bne.n	800b8ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	685a      	ldr	r2, [r3, #4]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	441a      	add	r2, r3
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	68ba      	ldr	r2, [r7, #8]
 800b8d4:	441a      	add	r2, r3
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d118      	bne.n	800b910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	4b15      	ldr	r3, [pc, #84]	; (800b938 <prvInsertBlockIntoFreeList+0xb0>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d00d      	beq.n	800b906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	685a      	ldr	r2, [r3, #4]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	441a      	add	r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	601a      	str	r2, [r3, #0]
 800b904:	e008      	b.n	800b918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b906:	4b0c      	ldr	r3, [pc, #48]	; (800b938 <prvInsertBlockIntoFreeList+0xb0>)
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	601a      	str	r2, [r3, #0]
 800b90e:	e003      	b.n	800b918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d002      	beq.n	800b926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b926:	bf00      	nop
 800b928:	3714      	adds	r7, #20
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	20010144 	.word	0x20010144
 800b938:	2001014c 	.word	0x2001014c

0800b93c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800b93c:	f000 b896 	b.w	800ba6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>

0800b940 <get_serialized_size_geometry_msgs__msg__Twist>:
 800b940:	b570      	push	{r4, r5, r6, lr}
 800b942:	4604      	mov	r4, r0
 800b944:	b150      	cbz	r0, 800b95c <get_serialized_size_geometry_msgs__msg__Twist+0x1c>
 800b946:	460e      	mov	r6, r1
 800b948:	f000 f894 	bl	800ba74 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b94c:	4605      	mov	r5, r0
 800b94e:	1831      	adds	r1, r6, r0
 800b950:	f104 0018 	add.w	r0, r4, #24
 800b954:	f000 f88e 	bl	800ba74 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b958:	4428      	add	r0, r5
 800b95a:	bd70      	pop	{r4, r5, r6, pc}
 800b95c:	4b04      	ldr	r3, [pc, #16]	; (800b970 <get_serialized_size_geometry_msgs__msg__Twist+0x30>)
 800b95e:	4805      	ldr	r0, [pc, #20]	; (800b974 <get_serialized_size_geometry_msgs__msg__Twist+0x34>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	221b      	movs	r2, #27
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	2101      	movs	r1, #1
 800b968:	f00b f97c 	bl	8016c64 <fwrite>
 800b96c:	4620      	mov	r0, r4
 800b96e:	bd70      	pop	{r4, r5, r6, pc}
 800b970:	20000140 	.word	0x20000140
 800b974:	0801932c 	.word	0x0801932c

0800b978 <_Twist__cdr_deserialize>:
 800b978:	b570      	push	{r4, r5, r6, lr}
 800b97a:	460c      	mov	r4, r1
 800b97c:	b189      	cbz	r1, 800b9a2 <_Twist__cdr_deserialize+0x2a>
 800b97e:	4605      	mov	r5, r0
 800b980:	f000 f93a 	bl	800bbf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b984:	6843      	ldr	r3, [r0, #4]
 800b986:	4621      	mov	r1, r4
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	4628      	mov	r0, r5
 800b98c:	4798      	blx	r3
 800b98e:	f000 f933 	bl	800bbf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b992:	6843      	ldr	r3, [r0, #4]
 800b994:	f104 0118 	add.w	r1, r4, #24
 800b998:	4628      	mov	r0, r5
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b9a0:	4718      	bx	r3
 800b9a2:	4b05      	ldr	r3, [pc, #20]	; (800b9b8 <_Twist__cdr_deserialize+0x40>)
 800b9a4:	4805      	ldr	r0, [pc, #20]	; (800b9bc <_Twist__cdr_deserialize+0x44>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	221b      	movs	r2, #27
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	f00b f959 	bl	8016c64 <fwrite>
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	bd70      	pop	{r4, r5, r6, pc}
 800b9b6:	bf00      	nop
 800b9b8:	20000140 	.word	0x20000140
 800b9bc:	0801932c 	.word	0x0801932c

0800b9c0 <_Twist__cdr_serialize>:
 800b9c0:	b510      	push	{r4, lr}
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	b082      	sub	sp, #8
 800b9c6:	b190      	cbz	r0, 800b9ee <_Twist__cdr_serialize+0x2e>
 800b9c8:	9101      	str	r1, [sp, #4]
 800b9ca:	f000 f915 	bl	800bbf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b9ce:	6843      	ldr	r3, [r0, #4]
 800b9d0:	9901      	ldr	r1, [sp, #4]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	4798      	blx	r3
 800b9d8:	f000 f90e 	bl	800bbf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800b9dc:	6843      	ldr	r3, [r0, #4]
 800b9de:	9901      	ldr	r1, [sp, #4]
 800b9e0:	689b      	ldr	r3, [r3, #8]
 800b9e2:	f104 0018 	add.w	r0, r4, #24
 800b9e6:	b002      	add	sp, #8
 800b9e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9ec:	4718      	bx	r3
 800b9ee:	4b05      	ldr	r3, [pc, #20]	; (800ba04 <_Twist__cdr_serialize+0x44>)
 800b9f0:	4805      	ldr	r0, [pc, #20]	; (800ba08 <_Twist__cdr_serialize+0x48>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	221b      	movs	r2, #27
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	2101      	movs	r1, #1
 800b9fa:	f00b f933 	bl	8016c64 <fwrite>
 800b9fe:	4620      	mov	r0, r4
 800ba00:	b002      	add	sp, #8
 800ba02:	bd10      	pop	{r4, pc}
 800ba04:	20000140 	.word	0x20000140
 800ba08:	0801932c 	.word	0x0801932c

0800ba0c <_Twist__max_serialized_size>:
 800ba0c:	b510      	push	{r4, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	2301      	movs	r3, #1
 800ba12:	f10d 0007 	add.w	r0, sp, #7
 800ba16:	2100      	movs	r1, #0
 800ba18:	f88d 3007 	strb.w	r3, [sp, #7]
 800ba1c:	f000 f8d0 	bl	800bbc0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ba20:	4604      	mov	r4, r0
 800ba22:	4621      	mov	r1, r4
 800ba24:	f10d 0007 	add.w	r0, sp, #7
 800ba28:	f000 f8ca 	bl	800bbc0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ba2c:	4420      	add	r0, r4
 800ba2e:	b002      	add	sp, #8
 800ba30:	bd10      	pop	{r4, pc}
 800ba32:	bf00      	nop

0800ba34 <_Twist__get_serialized_size>:
 800ba34:	b538      	push	{r3, r4, r5, lr}
 800ba36:	4604      	mov	r4, r0
 800ba38:	b150      	cbz	r0, 800ba50 <_Twist__get_serialized_size+0x1c>
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	f000 f81a 	bl	800ba74 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ba40:	4605      	mov	r5, r0
 800ba42:	4629      	mov	r1, r5
 800ba44:	f104 0018 	add.w	r0, r4, #24
 800ba48:	f000 f814 	bl	800ba74 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ba4c:	4428      	add	r0, r5
 800ba4e:	bd38      	pop	{r3, r4, r5, pc}
 800ba50:	4b04      	ldr	r3, [pc, #16]	; (800ba64 <_Twist__get_serialized_size+0x30>)
 800ba52:	4805      	ldr	r0, [pc, #20]	; (800ba68 <_Twist__get_serialized_size+0x34>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	221b      	movs	r2, #27
 800ba58:	68db      	ldr	r3, [r3, #12]
 800ba5a:	2101      	movs	r1, #1
 800ba5c:	f00b f902 	bl	8016c64 <fwrite>
 800ba60:	4620      	mov	r0, r4
 800ba62:	bd38      	pop	{r3, r4, r5, pc}
 800ba64:	20000140 	.word	0x20000140
 800ba68:	0801932c 	.word	0x0801932c

0800ba6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ba6c:	4800      	ldr	r0, [pc, #0]	; (800ba70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800ba6e:	4770      	bx	lr
 800ba70:	20000014 	.word	0x20000014

0800ba74 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800ba74:	b538      	push	{r3, r4, r5, lr}
 800ba76:	b1b0      	cbz	r0, 800baa6 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800ba78:	460d      	mov	r5, r1
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	2108      	movs	r1, #8
 800ba7e:	f000 fcb7 	bl	800c3f0 <ucdr_alignment>
 800ba82:	f105 0408 	add.w	r4, r5, #8
 800ba86:	4404      	add	r4, r0
 800ba88:	4620      	mov	r0, r4
 800ba8a:	2108      	movs	r1, #8
 800ba8c:	f000 fcb0 	bl	800c3f0 <ucdr_alignment>
 800ba90:	3008      	adds	r0, #8
 800ba92:	4404      	add	r4, r0
 800ba94:	4620      	mov	r0, r4
 800ba96:	2108      	movs	r1, #8
 800ba98:	f000 fcaa 	bl	800c3f0 <ucdr_alignment>
 800ba9c:	f1c5 0508 	rsb	r5, r5, #8
 800baa0:	4428      	add	r0, r5
 800baa2:	4420      	add	r0, r4
 800baa4:	bd38      	pop	{r3, r4, r5, pc}
 800baa6:	4b05      	ldr	r3, [pc, #20]	; (800babc <get_serialized_size_geometry_msgs__msg__Vector3+0x48>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4604      	mov	r4, r0
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	4804      	ldr	r0, [pc, #16]	; (800bac0 <get_serialized_size_geometry_msgs__msg__Vector3+0x4c>)
 800bab0:	221b      	movs	r2, #27
 800bab2:	2101      	movs	r1, #1
 800bab4:	f00b f8d6 	bl	8016c64 <fwrite>
 800bab8:	4620      	mov	r0, r4
 800baba:	bd38      	pop	{r3, r4, r5, pc}
 800babc:	20000140 	.word	0x20000140
 800bac0:	0801932c 	.word	0x0801932c

0800bac4 <_Vector3__cdr_serialize>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	4604      	mov	r4, r0
 800bac8:	b188      	cbz	r0, 800baee <_Vector3__cdr_serialize+0x2a>
 800baca:	460d      	mov	r5, r1
 800bacc:	ed90 0b00 	vldr	d0, [r0]
 800bad0:	4608      	mov	r0, r1
 800bad2:	f000 fb27 	bl	800c124 <ucdr_serialize_double>
 800bad6:	ed94 0b02 	vldr	d0, [r4, #8]
 800bada:	4628      	mov	r0, r5
 800badc:	f000 fb22 	bl	800c124 <ucdr_serialize_double>
 800bae0:	ed94 0b04 	vldr	d0, [r4, #16]
 800bae4:	4628      	mov	r0, r5
 800bae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baea:	f000 bb1b 	b.w	800c124 <ucdr_serialize_double>
 800baee:	4b05      	ldr	r3, [pc, #20]	; (800bb04 <_Vector3__cdr_serialize+0x40>)
 800baf0:	4805      	ldr	r0, [pc, #20]	; (800bb08 <_Vector3__cdr_serialize+0x44>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	221b      	movs	r2, #27
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	2101      	movs	r1, #1
 800bafa:	f00b f8b3 	bl	8016c64 <fwrite>
 800bafe:	4620      	mov	r0, r4
 800bb00:	bd38      	pop	{r3, r4, r5, pc}
 800bb02:	bf00      	nop
 800bb04:	20000140 	.word	0x20000140
 800bb08:	0801932c 	.word	0x0801932c

0800bb0c <_Vector3__cdr_deserialize>:
 800bb0c:	b538      	push	{r3, r4, r5, lr}
 800bb0e:	460c      	mov	r4, r1
 800bb10:	b171      	cbz	r1, 800bb30 <_Vector3__cdr_deserialize+0x24>
 800bb12:	4605      	mov	r5, r0
 800bb14:	f000 fb9a 	bl	800c24c <ucdr_deserialize_double>
 800bb18:	f104 0108 	add.w	r1, r4, #8
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	f000 fb95 	bl	800c24c <ucdr_deserialize_double>
 800bb22:	f104 0110 	add.w	r1, r4, #16
 800bb26:	4628      	mov	r0, r5
 800bb28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb2c:	f000 bb8e 	b.w	800c24c <ucdr_deserialize_double>
 800bb30:	4b04      	ldr	r3, [pc, #16]	; (800bb44 <_Vector3__cdr_deserialize+0x38>)
 800bb32:	4805      	ldr	r0, [pc, #20]	; (800bb48 <_Vector3__cdr_deserialize+0x3c>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	221b      	movs	r2, #27
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	2101      	movs	r1, #1
 800bb3c:	f00b f892 	bl	8016c64 <fwrite>
 800bb40:	4620      	mov	r0, r4
 800bb42:	bd38      	pop	{r3, r4, r5, pc}
 800bb44:	20000140 	.word	0x20000140
 800bb48:	0801932c 	.word	0x0801932c

0800bb4c <_Vector3__max_serialized_size>:
 800bb4c:	b538      	push	{r3, r4, r5, lr}
 800bb4e:	2108      	movs	r1, #8
 800bb50:	2000      	movs	r0, #0
 800bb52:	f000 fc4d 	bl	800c3f0 <ucdr_alignment>
 800bb56:	f100 0508 	add.w	r5, r0, #8
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	2108      	movs	r1, #8
 800bb5e:	f000 fc47 	bl	800c3f0 <ucdr_alignment>
 800bb62:	f100 0408 	add.w	r4, r0, #8
 800bb66:	442c      	add	r4, r5
 800bb68:	4620      	mov	r0, r4
 800bb6a:	2108      	movs	r1, #8
 800bb6c:	f000 fc40 	bl	800c3f0 <ucdr_alignment>
 800bb70:	3008      	adds	r0, #8
 800bb72:	4420      	add	r0, r4
 800bb74:	bd38      	pop	{r3, r4, r5, pc}
 800bb76:	bf00      	nop

0800bb78 <_Vector3__get_serialized_size>:
 800bb78:	b510      	push	{r4, lr}
 800bb7a:	b190      	cbz	r0, 800bba2 <_Vector3__get_serialized_size+0x2a>
 800bb7c:	2108      	movs	r1, #8
 800bb7e:	2000      	movs	r0, #0
 800bb80:	f000 fc36 	bl	800c3f0 <ucdr_alignment>
 800bb84:	f100 0408 	add.w	r4, r0, #8
 800bb88:	4620      	mov	r0, r4
 800bb8a:	2108      	movs	r1, #8
 800bb8c:	f000 fc30 	bl	800c3f0 <ucdr_alignment>
 800bb90:	3008      	adds	r0, #8
 800bb92:	4404      	add	r4, r0
 800bb94:	4620      	mov	r0, r4
 800bb96:	2108      	movs	r1, #8
 800bb98:	f000 fc2a 	bl	800c3f0 <ucdr_alignment>
 800bb9c:	3008      	adds	r0, #8
 800bb9e:	4420      	add	r0, r4
 800bba0:	bd10      	pop	{r4, pc}
 800bba2:	4b05      	ldr	r3, [pc, #20]	; (800bbb8 <_Vector3__get_serialized_size+0x40>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4604      	mov	r4, r0
 800bba8:	68db      	ldr	r3, [r3, #12]
 800bbaa:	4804      	ldr	r0, [pc, #16]	; (800bbbc <_Vector3__get_serialized_size+0x44>)
 800bbac:	221b      	movs	r2, #27
 800bbae:	2101      	movs	r1, #1
 800bbb0:	f00b f858 	bl	8016c64 <fwrite>
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	bd10      	pop	{r4, pc}
 800bbb8:	20000140 	.word	0x20000140
 800bbbc:	0801932c 	.word	0x0801932c

0800bbc0 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	b570      	push	{r4, r5, r6, lr}
 800bbc4:	7003      	strb	r3, [r0, #0]
 800bbc6:	460c      	mov	r4, r1
 800bbc8:	4608      	mov	r0, r1
 800bbca:	2108      	movs	r1, #8
 800bbcc:	f000 fc10 	bl	800c3f0 <ucdr_alignment>
 800bbd0:	f104 0508 	add.w	r5, r4, #8
 800bbd4:	1946      	adds	r6, r0, r5
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	2108      	movs	r1, #8
 800bbda:	f000 fc09 	bl	800c3f0 <ucdr_alignment>
 800bbde:	f100 0508 	add.w	r5, r0, #8
 800bbe2:	4435      	add	r5, r6
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	2108      	movs	r1, #8
 800bbe8:	f000 fc02 	bl	800c3f0 <ucdr_alignment>
 800bbec:	f1c4 0408 	rsb	r4, r4, #8
 800bbf0:	4420      	add	r0, r4
 800bbf2:	4428      	add	r0, r5
 800bbf4:	bd70      	pop	{r4, r5, r6, pc}
 800bbf6:	bf00      	nop

0800bbf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800bbf8:	4800      	ldr	r0, [pc, #0]	; (800bbfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800bbfa:	4770      	bx	lr
 800bbfc:	2000003c 	.word	0x2000003c

0800bc00 <ucdr_serialize_bool>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	460d      	mov	r5, r1
 800bc04:	2101      	movs	r1, #1
 800bc06:	4604      	mov	r4, r0
 800bc08:	f000 fba8 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800bc0c:	b148      	cbz	r0, 800bc22 <ucdr_serialize_bool+0x22>
 800bc0e:	68a3      	ldr	r3, [r4, #8]
 800bc10:	701d      	strb	r5, [r3, #0]
 800bc12:	68a2      	ldr	r2, [r4, #8]
 800bc14:	6923      	ldr	r3, [r4, #16]
 800bc16:	3201      	adds	r2, #1
 800bc18:	3301      	adds	r3, #1
 800bc1a:	2101      	movs	r1, #1
 800bc1c:	60a2      	str	r2, [r4, #8]
 800bc1e:	6123      	str	r3, [r4, #16]
 800bc20:	7561      	strb	r1, [r4, #21]
 800bc22:	7da0      	ldrb	r0, [r4, #22]
 800bc24:	f080 0001 	eor.w	r0, r0, #1
 800bc28:	bd38      	pop	{r3, r4, r5, pc}
 800bc2a:	bf00      	nop

0800bc2c <ucdr_deserialize_bool>:
 800bc2c:	b538      	push	{r3, r4, r5, lr}
 800bc2e:	460d      	mov	r5, r1
 800bc30:	2101      	movs	r1, #1
 800bc32:	4604      	mov	r4, r0
 800bc34:	f000 fb92 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800bc38:	b168      	cbz	r0, 800bc56 <ucdr_deserialize_bool+0x2a>
 800bc3a:	68a2      	ldr	r2, [r4, #8]
 800bc3c:	6923      	ldr	r3, [r4, #16]
 800bc3e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800bc42:	3900      	subs	r1, #0
 800bc44:	f103 0301 	add.w	r3, r3, #1
 800bc48:	bf18      	it	ne
 800bc4a:	2101      	movne	r1, #1
 800bc4c:	2001      	movs	r0, #1
 800bc4e:	7029      	strb	r1, [r5, #0]
 800bc50:	60a2      	str	r2, [r4, #8]
 800bc52:	6123      	str	r3, [r4, #16]
 800bc54:	7560      	strb	r0, [r4, #21]
 800bc56:	7da0      	ldrb	r0, [r4, #22]
 800bc58:	f080 0001 	eor.w	r0, r0, #1
 800bc5c:	bd38      	pop	{r3, r4, r5, pc}
 800bc5e:	bf00      	nop

0800bc60 <ucdr_serialize_uint8_t>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	460d      	mov	r5, r1
 800bc64:	2101      	movs	r1, #1
 800bc66:	4604      	mov	r4, r0
 800bc68:	f000 fb78 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800bc6c:	b148      	cbz	r0, 800bc82 <ucdr_serialize_uint8_t+0x22>
 800bc6e:	68a3      	ldr	r3, [r4, #8]
 800bc70:	701d      	strb	r5, [r3, #0]
 800bc72:	68a2      	ldr	r2, [r4, #8]
 800bc74:	6923      	ldr	r3, [r4, #16]
 800bc76:	3201      	adds	r2, #1
 800bc78:	3301      	adds	r3, #1
 800bc7a:	2101      	movs	r1, #1
 800bc7c:	60a2      	str	r2, [r4, #8]
 800bc7e:	6123      	str	r3, [r4, #16]
 800bc80:	7561      	strb	r1, [r4, #21]
 800bc82:	7da0      	ldrb	r0, [r4, #22]
 800bc84:	f080 0001 	eor.w	r0, r0, #1
 800bc88:	bd38      	pop	{r3, r4, r5, pc}
 800bc8a:	bf00      	nop

0800bc8c <ucdr_deserialize_uint8_t>:
 800bc8c:	b538      	push	{r3, r4, r5, lr}
 800bc8e:	460d      	mov	r5, r1
 800bc90:	2101      	movs	r1, #1
 800bc92:	4604      	mov	r4, r0
 800bc94:	f000 fb62 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800bc98:	b150      	cbz	r0, 800bcb0 <ucdr_deserialize_uint8_t+0x24>
 800bc9a:	68a3      	ldr	r3, [r4, #8]
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	702b      	strb	r3, [r5, #0]
 800bca0:	68a2      	ldr	r2, [r4, #8]
 800bca2:	6923      	ldr	r3, [r4, #16]
 800bca4:	3201      	adds	r2, #1
 800bca6:	3301      	adds	r3, #1
 800bca8:	2101      	movs	r1, #1
 800bcaa:	60a2      	str	r2, [r4, #8]
 800bcac:	6123      	str	r3, [r4, #16]
 800bcae:	7561      	strb	r1, [r4, #21]
 800bcb0:	7da0      	ldrb	r0, [r4, #22]
 800bcb2:	f080 0001 	eor.w	r0, r0, #1
 800bcb6:	bd38      	pop	{r3, r4, r5, pc}

0800bcb8 <ucdr_serialize_uint16_t>:
 800bcb8:	b538      	push	{r3, r4, r5, lr}
 800bcba:	4604      	mov	r4, r0
 800bcbc:	460d      	mov	r5, r1
 800bcbe:	2102      	movs	r1, #2
 800bcc0:	f000 fb9e 	bl	800c400 <ucdr_buffer_alignment>
 800bcc4:	68a2      	ldr	r2, [r4, #8]
 800bcc6:	6923      	ldr	r3, [r4, #16]
 800bcc8:	4402      	add	r2, r0
 800bcca:	4418      	add	r0, r3
 800bccc:	6120      	str	r0, [r4, #16]
 800bcce:	60a2      	str	r2, [r4, #8]
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	2102      	movs	r1, #2
 800bcd4:	f000 fb42 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800bcd8:	b180      	cbz	r0, 800bcfc <ucdr_serialize_uint16_t+0x44>
 800bcda:	7d23      	ldrb	r3, [r4, #20]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	68a3      	ldr	r3, [r4, #8]
 800bce0:	d010      	beq.n	800bd04 <ucdr_serialize_uint16_t+0x4c>
 800bce2:	f3c5 2207 	ubfx	r2, r5, #8, #8
 800bce6:	701a      	strb	r2, [r3, #0]
 800bce8:	68a3      	ldr	r3, [r4, #8]
 800bcea:	705d      	strb	r5, [r3, #1]
 800bcec:	68a2      	ldr	r2, [r4, #8]
 800bcee:	6923      	ldr	r3, [r4, #16]
 800bcf0:	3202      	adds	r2, #2
 800bcf2:	3302      	adds	r3, #2
 800bcf4:	2102      	movs	r1, #2
 800bcf6:	60a2      	str	r2, [r4, #8]
 800bcf8:	6123      	str	r3, [r4, #16]
 800bcfa:	7561      	strb	r1, [r4, #21]
 800bcfc:	7da0      	ldrb	r0, [r4, #22]
 800bcfe:	f080 0001 	eor.w	r0, r0, #1
 800bd02:	bd38      	pop	{r3, r4, r5, pc}
 800bd04:	801d      	strh	r5, [r3, #0]
 800bd06:	e7f1      	b.n	800bcec <ucdr_serialize_uint16_t+0x34>

0800bd08 <ucdr_serialize_endian_uint16_t>:
 800bd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0a:	4604      	mov	r4, r0
 800bd0c:	460f      	mov	r7, r1
 800bd0e:	2102      	movs	r1, #2
 800bd10:	4616      	mov	r6, r2
 800bd12:	f000 fb75 	bl	800c400 <ucdr_buffer_alignment>
 800bd16:	68a5      	ldr	r5, [r4, #8]
 800bd18:	6923      	ldr	r3, [r4, #16]
 800bd1a:	4405      	add	r5, r0
 800bd1c:	4418      	add	r0, r3
 800bd1e:	6120      	str	r0, [r4, #16]
 800bd20:	60a5      	str	r5, [r4, #8]
 800bd22:	4620      	mov	r0, r4
 800bd24:	2102      	movs	r1, #2
 800bd26:	f000 fb19 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800bd2a:	b178      	cbz	r0, 800bd4c <ucdr_serialize_endian_uint16_t+0x44>
 800bd2c:	2f01      	cmp	r7, #1
 800bd2e:	68a3      	ldr	r3, [r4, #8]
 800bd30:	d010      	beq.n	800bd54 <ucdr_serialize_endian_uint16_t+0x4c>
 800bd32:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800bd36:	701a      	strb	r2, [r3, #0]
 800bd38:	68a3      	ldr	r3, [r4, #8]
 800bd3a:	705e      	strb	r6, [r3, #1]
 800bd3c:	68a2      	ldr	r2, [r4, #8]
 800bd3e:	6923      	ldr	r3, [r4, #16]
 800bd40:	3202      	adds	r2, #2
 800bd42:	3302      	adds	r3, #2
 800bd44:	2102      	movs	r1, #2
 800bd46:	60a2      	str	r2, [r4, #8]
 800bd48:	6123      	str	r3, [r4, #16]
 800bd4a:	7561      	strb	r1, [r4, #21]
 800bd4c:	7da0      	ldrb	r0, [r4, #22]
 800bd4e:	f080 0001 	eor.w	r0, r0, #1
 800bd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd54:	801e      	strh	r6, [r3, #0]
 800bd56:	e7f1      	b.n	800bd3c <ucdr_serialize_endian_uint16_t+0x34>

0800bd58 <ucdr_deserialize_uint16_t>:
 800bd58:	b538      	push	{r3, r4, r5, lr}
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	460d      	mov	r5, r1
 800bd5e:	2102      	movs	r1, #2
 800bd60:	f000 fb4e 	bl	800c400 <ucdr_buffer_alignment>
 800bd64:	68a2      	ldr	r2, [r4, #8]
 800bd66:	6923      	ldr	r3, [r4, #16]
 800bd68:	4402      	add	r2, r0
 800bd6a:	4418      	add	r0, r3
 800bd6c:	6120      	str	r0, [r4, #16]
 800bd6e:	60a2      	str	r2, [r4, #8]
 800bd70:	4620      	mov	r0, r4
 800bd72:	2102      	movs	r1, #2
 800bd74:	f000 faf2 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800bd78:	b180      	cbz	r0, 800bd9c <ucdr_deserialize_uint16_t+0x44>
 800bd7a:	7d23      	ldrb	r3, [r4, #20]
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	68a3      	ldr	r3, [r4, #8]
 800bd80:	d010      	beq.n	800bda4 <ucdr_deserialize_uint16_t+0x4c>
 800bd82:	785b      	ldrb	r3, [r3, #1]
 800bd84:	702b      	strb	r3, [r5, #0]
 800bd86:	68a3      	ldr	r3, [r4, #8]
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	706b      	strb	r3, [r5, #1]
 800bd8c:	68a2      	ldr	r2, [r4, #8]
 800bd8e:	6923      	ldr	r3, [r4, #16]
 800bd90:	3202      	adds	r2, #2
 800bd92:	3302      	adds	r3, #2
 800bd94:	2102      	movs	r1, #2
 800bd96:	60a2      	str	r2, [r4, #8]
 800bd98:	6123      	str	r3, [r4, #16]
 800bd9a:	7561      	strb	r1, [r4, #21]
 800bd9c:	7da0      	ldrb	r0, [r4, #22]
 800bd9e:	f080 0001 	eor.w	r0, r0, #1
 800bda2:	bd38      	pop	{r3, r4, r5, pc}
 800bda4:	881b      	ldrh	r3, [r3, #0]
 800bda6:	802b      	strh	r3, [r5, #0]
 800bda8:	e7f0      	b.n	800bd8c <ucdr_deserialize_uint16_t+0x34>
 800bdaa:	bf00      	nop

0800bdac <ucdr_deserialize_endian_uint16_t>:
 800bdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdae:	4604      	mov	r4, r0
 800bdb0:	460f      	mov	r7, r1
 800bdb2:	2102      	movs	r1, #2
 800bdb4:	4616      	mov	r6, r2
 800bdb6:	f000 fb23 	bl	800c400 <ucdr_buffer_alignment>
 800bdba:	68a5      	ldr	r5, [r4, #8]
 800bdbc:	6923      	ldr	r3, [r4, #16]
 800bdbe:	4405      	add	r5, r0
 800bdc0:	4418      	add	r0, r3
 800bdc2:	6120      	str	r0, [r4, #16]
 800bdc4:	60a5      	str	r5, [r4, #8]
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	2102      	movs	r1, #2
 800bdca:	f000 fac7 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800bdce:	b178      	cbz	r0, 800bdf0 <ucdr_deserialize_endian_uint16_t+0x44>
 800bdd0:	2f01      	cmp	r7, #1
 800bdd2:	68a3      	ldr	r3, [r4, #8]
 800bdd4:	d010      	beq.n	800bdf8 <ucdr_deserialize_endian_uint16_t+0x4c>
 800bdd6:	785b      	ldrb	r3, [r3, #1]
 800bdd8:	7033      	strb	r3, [r6, #0]
 800bdda:	68a3      	ldr	r3, [r4, #8]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	7073      	strb	r3, [r6, #1]
 800bde0:	68a2      	ldr	r2, [r4, #8]
 800bde2:	6923      	ldr	r3, [r4, #16]
 800bde4:	3202      	adds	r2, #2
 800bde6:	3302      	adds	r3, #2
 800bde8:	2102      	movs	r1, #2
 800bdea:	60a2      	str	r2, [r4, #8]
 800bdec:	6123      	str	r3, [r4, #16]
 800bdee:	7561      	strb	r1, [r4, #21]
 800bdf0:	7da0      	ldrb	r0, [r4, #22]
 800bdf2:	f080 0001 	eor.w	r0, r0, #1
 800bdf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	8033      	strh	r3, [r6, #0]
 800bdfc:	e7f0      	b.n	800bde0 <ucdr_deserialize_endian_uint16_t+0x34>
 800bdfe:	bf00      	nop

0800be00 <ucdr_serialize_uint32_t>:
 800be00:	b538      	push	{r3, r4, r5, lr}
 800be02:	4604      	mov	r4, r0
 800be04:	460d      	mov	r5, r1
 800be06:	2104      	movs	r1, #4
 800be08:	f000 fafa 	bl	800c400 <ucdr_buffer_alignment>
 800be0c:	68a2      	ldr	r2, [r4, #8]
 800be0e:	6923      	ldr	r3, [r4, #16]
 800be10:	4402      	add	r2, r0
 800be12:	4418      	add	r0, r3
 800be14:	6120      	str	r0, [r4, #16]
 800be16:	60a2      	str	r2, [r4, #8]
 800be18:	4620      	mov	r0, r4
 800be1a:	2104      	movs	r1, #4
 800be1c:	f000 fa9e 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800be20:	b1c0      	cbz	r0, 800be54 <ucdr_serialize_uint32_t+0x54>
 800be22:	7d23      	ldrb	r3, [r4, #20]
 800be24:	2b01      	cmp	r3, #1
 800be26:	68a3      	ldr	r3, [r4, #8]
 800be28:	d018      	beq.n	800be5c <ucdr_serialize_uint32_t+0x5c>
 800be2a:	f3c5 6207 	ubfx	r2, r5, #24, #8
 800be2e:	701a      	strb	r2, [r3, #0]
 800be30:	68a3      	ldr	r3, [r4, #8]
 800be32:	f3c5 4207 	ubfx	r2, r5, #16, #8
 800be36:	705a      	strb	r2, [r3, #1]
 800be38:	68a3      	ldr	r3, [r4, #8]
 800be3a:	f3c5 2207 	ubfx	r2, r5, #8, #8
 800be3e:	709a      	strb	r2, [r3, #2]
 800be40:	68a3      	ldr	r3, [r4, #8]
 800be42:	70dd      	strb	r5, [r3, #3]
 800be44:	68a2      	ldr	r2, [r4, #8]
 800be46:	6923      	ldr	r3, [r4, #16]
 800be48:	3204      	adds	r2, #4
 800be4a:	3304      	adds	r3, #4
 800be4c:	2104      	movs	r1, #4
 800be4e:	60a2      	str	r2, [r4, #8]
 800be50:	6123      	str	r3, [r4, #16]
 800be52:	7561      	strb	r1, [r4, #21]
 800be54:	7da0      	ldrb	r0, [r4, #22]
 800be56:	f080 0001 	eor.w	r0, r0, #1
 800be5a:	bd38      	pop	{r3, r4, r5, pc}
 800be5c:	601d      	str	r5, [r3, #0]
 800be5e:	e7f1      	b.n	800be44 <ucdr_serialize_uint32_t+0x44>

0800be60 <ucdr_serialize_endian_uint32_t>:
 800be60:	b570      	push	{r4, r5, r6, lr}
 800be62:	4604      	mov	r4, r0
 800be64:	460e      	mov	r6, r1
 800be66:	2104      	movs	r1, #4
 800be68:	4615      	mov	r5, r2
 800be6a:	f000 fac9 	bl	800c400 <ucdr_buffer_alignment>
 800be6e:	68a2      	ldr	r2, [r4, #8]
 800be70:	6923      	ldr	r3, [r4, #16]
 800be72:	4402      	add	r2, r0
 800be74:	4418      	add	r0, r3
 800be76:	6120      	str	r0, [r4, #16]
 800be78:	60a2      	str	r2, [r4, #8]
 800be7a:	4620      	mov	r0, r4
 800be7c:	2104      	movs	r1, #4
 800be7e:	f000 fa6d 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800be82:	b1b8      	cbz	r0, 800beb4 <ucdr_serialize_endian_uint32_t+0x54>
 800be84:	2e01      	cmp	r6, #1
 800be86:	68a3      	ldr	r3, [r4, #8]
 800be88:	d018      	beq.n	800bebc <ucdr_serialize_endian_uint32_t+0x5c>
 800be8a:	f3c5 6207 	ubfx	r2, r5, #24, #8
 800be8e:	701a      	strb	r2, [r3, #0]
 800be90:	68a3      	ldr	r3, [r4, #8]
 800be92:	f3c5 4207 	ubfx	r2, r5, #16, #8
 800be96:	705a      	strb	r2, [r3, #1]
 800be98:	68a3      	ldr	r3, [r4, #8]
 800be9a:	f3c5 2207 	ubfx	r2, r5, #8, #8
 800be9e:	709a      	strb	r2, [r3, #2]
 800bea0:	68a3      	ldr	r3, [r4, #8]
 800bea2:	70dd      	strb	r5, [r3, #3]
 800bea4:	68a2      	ldr	r2, [r4, #8]
 800bea6:	6923      	ldr	r3, [r4, #16]
 800bea8:	3204      	adds	r2, #4
 800beaa:	3304      	adds	r3, #4
 800beac:	2104      	movs	r1, #4
 800beae:	60a2      	str	r2, [r4, #8]
 800beb0:	6123      	str	r3, [r4, #16]
 800beb2:	7561      	strb	r1, [r4, #21]
 800beb4:	7da0      	ldrb	r0, [r4, #22]
 800beb6:	f080 0001 	eor.w	r0, r0, #1
 800beba:	bd70      	pop	{r4, r5, r6, pc}
 800bebc:	601d      	str	r5, [r3, #0]
 800bebe:	e7f1      	b.n	800bea4 <ucdr_serialize_endian_uint32_t+0x44>

0800bec0 <ucdr_deserialize_uint32_t>:
 800bec0:	b538      	push	{r3, r4, r5, lr}
 800bec2:	4604      	mov	r4, r0
 800bec4:	460d      	mov	r5, r1
 800bec6:	2104      	movs	r1, #4
 800bec8:	f000 fa9a 	bl	800c400 <ucdr_buffer_alignment>
 800becc:	68a2      	ldr	r2, [r4, #8]
 800bece:	6923      	ldr	r3, [r4, #16]
 800bed0:	4402      	add	r2, r0
 800bed2:	4418      	add	r0, r3
 800bed4:	6120      	str	r0, [r4, #16]
 800bed6:	60a2      	str	r2, [r4, #8]
 800bed8:	4620      	mov	r0, r4
 800beda:	2104      	movs	r1, #4
 800bedc:	f000 fa3e 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800bee0:	b1b0      	cbz	r0, 800bf10 <ucdr_deserialize_uint32_t+0x50>
 800bee2:	7d23      	ldrb	r3, [r4, #20]
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	68a3      	ldr	r3, [r4, #8]
 800bee8:	d016      	beq.n	800bf18 <ucdr_deserialize_uint32_t+0x58>
 800beea:	78db      	ldrb	r3, [r3, #3]
 800beec:	702b      	strb	r3, [r5, #0]
 800beee:	68a3      	ldr	r3, [r4, #8]
 800bef0:	789b      	ldrb	r3, [r3, #2]
 800bef2:	706b      	strb	r3, [r5, #1]
 800bef4:	68a3      	ldr	r3, [r4, #8]
 800bef6:	785b      	ldrb	r3, [r3, #1]
 800bef8:	70ab      	strb	r3, [r5, #2]
 800befa:	68a3      	ldr	r3, [r4, #8]
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	70eb      	strb	r3, [r5, #3]
 800bf00:	68a2      	ldr	r2, [r4, #8]
 800bf02:	6923      	ldr	r3, [r4, #16]
 800bf04:	3204      	adds	r2, #4
 800bf06:	3304      	adds	r3, #4
 800bf08:	2104      	movs	r1, #4
 800bf0a:	60a2      	str	r2, [r4, #8]
 800bf0c:	6123      	str	r3, [r4, #16]
 800bf0e:	7561      	strb	r1, [r4, #21]
 800bf10:	7da0      	ldrb	r0, [r4, #22]
 800bf12:	f080 0001 	eor.w	r0, r0, #1
 800bf16:	bd38      	pop	{r3, r4, r5, pc}
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	602b      	str	r3, [r5, #0]
 800bf1c:	e7f0      	b.n	800bf00 <ucdr_deserialize_uint32_t+0x40>
 800bf1e:	bf00      	nop

0800bf20 <ucdr_deserialize_endian_uint32_t>:
 800bf20:	b570      	push	{r4, r5, r6, lr}
 800bf22:	4604      	mov	r4, r0
 800bf24:	460e      	mov	r6, r1
 800bf26:	2104      	movs	r1, #4
 800bf28:	4615      	mov	r5, r2
 800bf2a:	f000 fa69 	bl	800c400 <ucdr_buffer_alignment>
 800bf2e:	68a2      	ldr	r2, [r4, #8]
 800bf30:	6923      	ldr	r3, [r4, #16]
 800bf32:	4402      	add	r2, r0
 800bf34:	4418      	add	r0, r3
 800bf36:	6120      	str	r0, [r4, #16]
 800bf38:	60a2      	str	r2, [r4, #8]
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	2104      	movs	r1, #4
 800bf3e:	f000 fa0d 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800bf42:	b1a8      	cbz	r0, 800bf70 <ucdr_deserialize_endian_uint32_t+0x50>
 800bf44:	2e01      	cmp	r6, #1
 800bf46:	68a3      	ldr	r3, [r4, #8]
 800bf48:	d016      	beq.n	800bf78 <ucdr_deserialize_endian_uint32_t+0x58>
 800bf4a:	78db      	ldrb	r3, [r3, #3]
 800bf4c:	702b      	strb	r3, [r5, #0]
 800bf4e:	68a3      	ldr	r3, [r4, #8]
 800bf50:	789b      	ldrb	r3, [r3, #2]
 800bf52:	706b      	strb	r3, [r5, #1]
 800bf54:	68a3      	ldr	r3, [r4, #8]
 800bf56:	785b      	ldrb	r3, [r3, #1]
 800bf58:	70ab      	strb	r3, [r5, #2]
 800bf5a:	68a3      	ldr	r3, [r4, #8]
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	70eb      	strb	r3, [r5, #3]
 800bf60:	68a2      	ldr	r2, [r4, #8]
 800bf62:	6923      	ldr	r3, [r4, #16]
 800bf64:	3204      	adds	r2, #4
 800bf66:	3304      	adds	r3, #4
 800bf68:	2104      	movs	r1, #4
 800bf6a:	60a2      	str	r2, [r4, #8]
 800bf6c:	6123      	str	r3, [r4, #16]
 800bf6e:	7561      	strb	r1, [r4, #21]
 800bf70:	7da0      	ldrb	r0, [r4, #22]
 800bf72:	f080 0001 	eor.w	r0, r0, #1
 800bf76:	bd70      	pop	{r4, r5, r6, pc}
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	602b      	str	r3, [r5, #0]
 800bf7c:	e7f0      	b.n	800bf60 <ucdr_deserialize_endian_uint32_t+0x40>
 800bf7e:	bf00      	nop

0800bf80 <ucdr_serialize_uint64_t>:
 800bf80:	b510      	push	{r4, lr}
 800bf82:	2108      	movs	r1, #8
 800bf84:	4604      	mov	r4, r0
 800bf86:	b082      	sub	sp, #8
 800bf88:	e9cd 2300 	strd	r2, r3, [sp]
 800bf8c:	f000 fa38 	bl	800c400 <ucdr_buffer_alignment>
 800bf90:	68a2      	ldr	r2, [r4, #8]
 800bf92:	6923      	ldr	r3, [r4, #16]
 800bf94:	4402      	add	r2, r0
 800bf96:	4418      	add	r0, r3
 800bf98:	6120      	str	r0, [r4, #16]
 800bf9a:	60a2      	str	r2, [r4, #8]
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	2108      	movs	r1, #8
 800bfa0:	f000 f9dc 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800bfa4:	b350      	cbz	r0, 800bffc <ucdr_serialize_uint64_t+0x7c>
 800bfa6:	7d23      	ldrb	r3, [r4, #20]
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d02c      	beq.n	800c006 <ucdr_serialize_uint64_t+0x86>
 800bfac:	68a3      	ldr	r3, [r4, #8]
 800bfae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bfb2:	701a      	strb	r2, [r3, #0]
 800bfb4:	68a3      	ldr	r3, [r4, #8]
 800bfb6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bfba:	705a      	strb	r2, [r3, #1]
 800bfbc:	68a3      	ldr	r3, [r4, #8]
 800bfbe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bfc2:	709a      	strb	r2, [r3, #2]
 800bfc4:	68a3      	ldr	r3, [r4, #8]
 800bfc6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bfca:	70da      	strb	r2, [r3, #3]
 800bfcc:	68a3      	ldr	r3, [r4, #8]
 800bfce:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bfd2:	711a      	strb	r2, [r3, #4]
 800bfd4:	68a3      	ldr	r3, [r4, #8]
 800bfd6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bfda:	715a      	strb	r2, [r3, #5]
 800bfdc:	68a3      	ldr	r3, [r4, #8]
 800bfde:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bfe2:	719a      	strb	r2, [r3, #6]
 800bfe4:	68a3      	ldr	r3, [r4, #8]
 800bfe6:	f89d 2000 	ldrb.w	r2, [sp]
 800bfea:	71da      	strb	r2, [r3, #7]
 800bfec:	68a2      	ldr	r2, [r4, #8]
 800bfee:	6923      	ldr	r3, [r4, #16]
 800bff0:	3208      	adds	r2, #8
 800bff2:	3308      	adds	r3, #8
 800bff4:	2108      	movs	r1, #8
 800bff6:	60a2      	str	r2, [r4, #8]
 800bff8:	6123      	str	r3, [r4, #16]
 800bffa:	7561      	strb	r1, [r4, #21]
 800bffc:	7da0      	ldrb	r0, [r4, #22]
 800bffe:	f080 0001 	eor.w	r0, r0, #1
 800c002:	b002      	add	sp, #8
 800c004:	bd10      	pop	{r4, pc}
 800c006:	466b      	mov	r3, sp
 800c008:	cb03      	ldmia	r3!, {r0, r1}
 800c00a:	68a3      	ldr	r3, [r4, #8]
 800c00c:	6018      	str	r0, [r3, #0]
 800c00e:	6059      	str	r1, [r3, #4]
 800c010:	e7ec      	b.n	800bfec <ucdr_serialize_uint64_t+0x6c>
 800c012:	bf00      	nop

0800c014 <ucdr_serialize_int16_t>:
 800c014:	b538      	push	{r3, r4, r5, lr}
 800c016:	4604      	mov	r4, r0
 800c018:	460d      	mov	r5, r1
 800c01a:	2102      	movs	r1, #2
 800c01c:	f000 f9f0 	bl	800c400 <ucdr_buffer_alignment>
 800c020:	68a2      	ldr	r2, [r4, #8]
 800c022:	6923      	ldr	r3, [r4, #16]
 800c024:	4402      	add	r2, r0
 800c026:	4418      	add	r0, r3
 800c028:	6120      	str	r0, [r4, #16]
 800c02a:	60a2      	str	r2, [r4, #8]
 800c02c:	4620      	mov	r0, r4
 800c02e:	2102      	movs	r1, #2
 800c030:	f000 f994 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800c034:	b180      	cbz	r0, 800c058 <ucdr_serialize_int16_t+0x44>
 800c036:	7d23      	ldrb	r3, [r4, #20]
 800c038:	2b01      	cmp	r3, #1
 800c03a:	68a3      	ldr	r3, [r4, #8]
 800c03c:	d010      	beq.n	800c060 <ucdr_serialize_int16_t+0x4c>
 800c03e:	f3c5 2207 	ubfx	r2, r5, #8, #8
 800c042:	701a      	strb	r2, [r3, #0]
 800c044:	68a3      	ldr	r3, [r4, #8]
 800c046:	705d      	strb	r5, [r3, #1]
 800c048:	68a2      	ldr	r2, [r4, #8]
 800c04a:	6923      	ldr	r3, [r4, #16]
 800c04c:	3202      	adds	r2, #2
 800c04e:	3302      	adds	r3, #2
 800c050:	2102      	movs	r1, #2
 800c052:	60a2      	str	r2, [r4, #8]
 800c054:	6123      	str	r3, [r4, #16]
 800c056:	7561      	strb	r1, [r4, #21]
 800c058:	7da0      	ldrb	r0, [r4, #22]
 800c05a:	f080 0001 	eor.w	r0, r0, #1
 800c05e:	bd38      	pop	{r3, r4, r5, pc}
 800c060:	801d      	strh	r5, [r3, #0]
 800c062:	e7f1      	b.n	800c048 <ucdr_serialize_int16_t+0x34>

0800c064 <ucdr_serialize_int32_t>:
 800c064:	b538      	push	{r3, r4, r5, lr}
 800c066:	4604      	mov	r4, r0
 800c068:	460d      	mov	r5, r1
 800c06a:	2104      	movs	r1, #4
 800c06c:	f000 f9c8 	bl	800c400 <ucdr_buffer_alignment>
 800c070:	68a2      	ldr	r2, [r4, #8]
 800c072:	6923      	ldr	r3, [r4, #16]
 800c074:	4402      	add	r2, r0
 800c076:	4418      	add	r0, r3
 800c078:	6120      	str	r0, [r4, #16]
 800c07a:	60a2      	str	r2, [r4, #8]
 800c07c:	4620      	mov	r0, r4
 800c07e:	2104      	movs	r1, #4
 800c080:	f000 f96c 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800c084:	b1c0      	cbz	r0, 800c0b8 <ucdr_serialize_int32_t+0x54>
 800c086:	7d23      	ldrb	r3, [r4, #20]
 800c088:	2b01      	cmp	r3, #1
 800c08a:	68a3      	ldr	r3, [r4, #8]
 800c08c:	d018      	beq.n	800c0c0 <ucdr_serialize_int32_t+0x5c>
 800c08e:	f3c5 6207 	ubfx	r2, r5, #24, #8
 800c092:	701a      	strb	r2, [r3, #0]
 800c094:	68a3      	ldr	r3, [r4, #8]
 800c096:	f3c5 4207 	ubfx	r2, r5, #16, #8
 800c09a:	705a      	strb	r2, [r3, #1]
 800c09c:	68a3      	ldr	r3, [r4, #8]
 800c09e:	f3c5 2207 	ubfx	r2, r5, #8, #8
 800c0a2:	709a      	strb	r2, [r3, #2]
 800c0a4:	68a3      	ldr	r3, [r4, #8]
 800c0a6:	70dd      	strb	r5, [r3, #3]
 800c0a8:	68a2      	ldr	r2, [r4, #8]
 800c0aa:	6923      	ldr	r3, [r4, #16]
 800c0ac:	3204      	adds	r2, #4
 800c0ae:	3304      	adds	r3, #4
 800c0b0:	2104      	movs	r1, #4
 800c0b2:	60a2      	str	r2, [r4, #8]
 800c0b4:	6123      	str	r3, [r4, #16]
 800c0b6:	7561      	strb	r1, [r4, #21]
 800c0b8:	7da0      	ldrb	r0, [r4, #22]
 800c0ba:	f080 0001 	eor.w	r0, r0, #1
 800c0be:	bd38      	pop	{r3, r4, r5, pc}
 800c0c0:	601d      	str	r5, [r3, #0]
 800c0c2:	e7f1      	b.n	800c0a8 <ucdr_serialize_int32_t+0x44>

0800c0c4 <ucdr_deserialize_int32_t>:
 800c0c4:	b538      	push	{r3, r4, r5, lr}
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	460d      	mov	r5, r1
 800c0ca:	2104      	movs	r1, #4
 800c0cc:	f000 f998 	bl	800c400 <ucdr_buffer_alignment>
 800c0d0:	68a2      	ldr	r2, [r4, #8]
 800c0d2:	6923      	ldr	r3, [r4, #16]
 800c0d4:	4402      	add	r2, r0
 800c0d6:	4418      	add	r0, r3
 800c0d8:	6120      	str	r0, [r4, #16]
 800c0da:	60a2      	str	r2, [r4, #8]
 800c0dc:	4620      	mov	r0, r4
 800c0de:	2104      	movs	r1, #4
 800c0e0:	f000 f93c 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800c0e4:	b1b0      	cbz	r0, 800c114 <ucdr_deserialize_int32_t+0x50>
 800c0e6:	7d23      	ldrb	r3, [r4, #20]
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	68a3      	ldr	r3, [r4, #8]
 800c0ec:	d016      	beq.n	800c11c <ucdr_deserialize_int32_t+0x58>
 800c0ee:	78db      	ldrb	r3, [r3, #3]
 800c0f0:	702b      	strb	r3, [r5, #0]
 800c0f2:	68a3      	ldr	r3, [r4, #8]
 800c0f4:	789b      	ldrb	r3, [r3, #2]
 800c0f6:	706b      	strb	r3, [r5, #1]
 800c0f8:	68a3      	ldr	r3, [r4, #8]
 800c0fa:	785b      	ldrb	r3, [r3, #1]
 800c0fc:	70ab      	strb	r3, [r5, #2]
 800c0fe:	68a3      	ldr	r3, [r4, #8]
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	70eb      	strb	r3, [r5, #3]
 800c104:	68a2      	ldr	r2, [r4, #8]
 800c106:	6923      	ldr	r3, [r4, #16]
 800c108:	3204      	adds	r2, #4
 800c10a:	3304      	adds	r3, #4
 800c10c:	2104      	movs	r1, #4
 800c10e:	60a2      	str	r2, [r4, #8]
 800c110:	6123      	str	r3, [r4, #16]
 800c112:	7561      	strb	r1, [r4, #21]
 800c114:	7da0      	ldrb	r0, [r4, #22]
 800c116:	f080 0001 	eor.w	r0, r0, #1
 800c11a:	bd38      	pop	{r3, r4, r5, pc}
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	602b      	str	r3, [r5, #0]
 800c120:	e7f0      	b.n	800c104 <ucdr_deserialize_int32_t+0x40>
 800c122:	bf00      	nop

0800c124 <ucdr_serialize_double>:
 800c124:	b510      	push	{r4, lr}
 800c126:	2108      	movs	r1, #8
 800c128:	4604      	mov	r4, r0
 800c12a:	b082      	sub	sp, #8
 800c12c:	ed8d 0b00 	vstr	d0, [sp]
 800c130:	f000 f966 	bl	800c400 <ucdr_buffer_alignment>
 800c134:	68a2      	ldr	r2, [r4, #8]
 800c136:	6923      	ldr	r3, [r4, #16]
 800c138:	4402      	add	r2, r0
 800c13a:	4418      	add	r0, r3
 800c13c:	6120      	str	r0, [r4, #16]
 800c13e:	60a2      	str	r2, [r4, #8]
 800c140:	4620      	mov	r0, r4
 800c142:	2108      	movs	r1, #8
 800c144:	f000 f90a 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800c148:	b350      	cbz	r0, 800c1a0 <ucdr_serialize_double+0x7c>
 800c14a:	7d23      	ldrb	r3, [r4, #20]
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d02c      	beq.n	800c1aa <ucdr_serialize_double+0x86>
 800c150:	68a3      	ldr	r3, [r4, #8]
 800c152:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c156:	701a      	strb	r2, [r3, #0]
 800c158:	68a3      	ldr	r3, [r4, #8]
 800c15a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c15e:	705a      	strb	r2, [r3, #1]
 800c160:	68a3      	ldr	r3, [r4, #8]
 800c162:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c166:	709a      	strb	r2, [r3, #2]
 800c168:	68a3      	ldr	r3, [r4, #8]
 800c16a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c16e:	70da      	strb	r2, [r3, #3]
 800c170:	68a3      	ldr	r3, [r4, #8]
 800c172:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c176:	711a      	strb	r2, [r3, #4]
 800c178:	68a3      	ldr	r3, [r4, #8]
 800c17a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c17e:	715a      	strb	r2, [r3, #5]
 800c180:	68a3      	ldr	r3, [r4, #8]
 800c182:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c186:	719a      	strb	r2, [r3, #6]
 800c188:	68a3      	ldr	r3, [r4, #8]
 800c18a:	f89d 2000 	ldrb.w	r2, [sp]
 800c18e:	71da      	strb	r2, [r3, #7]
 800c190:	68a2      	ldr	r2, [r4, #8]
 800c192:	6923      	ldr	r3, [r4, #16]
 800c194:	3208      	adds	r2, #8
 800c196:	3308      	adds	r3, #8
 800c198:	2108      	movs	r1, #8
 800c19a:	60a2      	str	r2, [r4, #8]
 800c19c:	6123      	str	r3, [r4, #16]
 800c19e:	7561      	strb	r1, [r4, #21]
 800c1a0:	7da0      	ldrb	r0, [r4, #22]
 800c1a2:	f080 0001 	eor.w	r0, r0, #1
 800c1a6:	b002      	add	sp, #8
 800c1a8:	bd10      	pop	{r4, pc}
 800c1aa:	466b      	mov	r3, sp
 800c1ac:	cb03      	ldmia	r3!, {r0, r1}
 800c1ae:	68a3      	ldr	r3, [r4, #8]
 800c1b0:	6018      	str	r0, [r3, #0]
 800c1b2:	6059      	str	r1, [r3, #4]
 800c1b4:	e7ec      	b.n	800c190 <ucdr_serialize_double+0x6c>
 800c1b6:	bf00      	nop

0800c1b8 <ucdr_serialize_endian_double>:
 800c1b8:	b530      	push	{r4, r5, lr}
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	b083      	sub	sp, #12
 800c1be:	460d      	mov	r5, r1
 800c1c0:	2108      	movs	r1, #8
 800c1c2:	ed8d 0b00 	vstr	d0, [sp]
 800c1c6:	f000 f91b 	bl	800c400 <ucdr_buffer_alignment>
 800c1ca:	68a2      	ldr	r2, [r4, #8]
 800c1cc:	6923      	ldr	r3, [r4, #16]
 800c1ce:	4402      	add	r2, r0
 800c1d0:	4418      	add	r0, r3
 800c1d2:	6120      	str	r0, [r4, #16]
 800c1d4:	60a2      	str	r2, [r4, #8]
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	2108      	movs	r1, #8
 800c1da:	f000 f8bf 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800c1de:	b348      	cbz	r0, 800c234 <ucdr_serialize_endian_double+0x7c>
 800c1e0:	2d01      	cmp	r5, #1
 800c1e2:	d02c      	beq.n	800c23e <ucdr_serialize_endian_double+0x86>
 800c1e4:	68a3      	ldr	r3, [r4, #8]
 800c1e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c1ea:	701a      	strb	r2, [r3, #0]
 800c1ec:	68a3      	ldr	r3, [r4, #8]
 800c1ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c1f2:	705a      	strb	r2, [r3, #1]
 800c1f4:	68a3      	ldr	r3, [r4, #8]
 800c1f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c1fa:	709a      	strb	r2, [r3, #2]
 800c1fc:	68a3      	ldr	r3, [r4, #8]
 800c1fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c202:	70da      	strb	r2, [r3, #3]
 800c204:	68a3      	ldr	r3, [r4, #8]
 800c206:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c20a:	711a      	strb	r2, [r3, #4]
 800c20c:	68a3      	ldr	r3, [r4, #8]
 800c20e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c212:	715a      	strb	r2, [r3, #5]
 800c214:	68a3      	ldr	r3, [r4, #8]
 800c216:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c21a:	719a      	strb	r2, [r3, #6]
 800c21c:	68a3      	ldr	r3, [r4, #8]
 800c21e:	f89d 2000 	ldrb.w	r2, [sp]
 800c222:	71da      	strb	r2, [r3, #7]
 800c224:	68a2      	ldr	r2, [r4, #8]
 800c226:	6923      	ldr	r3, [r4, #16]
 800c228:	3208      	adds	r2, #8
 800c22a:	3308      	adds	r3, #8
 800c22c:	2108      	movs	r1, #8
 800c22e:	60a2      	str	r2, [r4, #8]
 800c230:	6123      	str	r3, [r4, #16]
 800c232:	7561      	strb	r1, [r4, #21]
 800c234:	7da0      	ldrb	r0, [r4, #22]
 800c236:	f080 0001 	eor.w	r0, r0, #1
 800c23a:	b003      	add	sp, #12
 800c23c:	bd30      	pop	{r4, r5, pc}
 800c23e:	466b      	mov	r3, sp
 800c240:	cb03      	ldmia	r3!, {r0, r1}
 800c242:	68a3      	ldr	r3, [r4, #8]
 800c244:	6018      	str	r0, [r3, #0]
 800c246:	6059      	str	r1, [r3, #4]
 800c248:	e7ec      	b.n	800c224 <ucdr_serialize_endian_double+0x6c>
 800c24a:	bf00      	nop

0800c24c <ucdr_deserialize_double>:
 800c24c:	b538      	push	{r3, r4, r5, lr}
 800c24e:	4604      	mov	r4, r0
 800c250:	460d      	mov	r5, r1
 800c252:	2108      	movs	r1, #8
 800c254:	f000 f8d4 	bl	800c400 <ucdr_buffer_alignment>
 800c258:	68a2      	ldr	r2, [r4, #8]
 800c25a:	6923      	ldr	r3, [r4, #16]
 800c25c:	4402      	add	r2, r0
 800c25e:	4418      	add	r0, r3
 800c260:	6120      	str	r0, [r4, #16]
 800c262:	60a2      	str	r2, [r4, #8]
 800c264:	4620      	mov	r0, r4
 800c266:	2108      	movs	r1, #8
 800c268:	f000 f878 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800c26c:	b310      	cbz	r0, 800c2b4 <ucdr_deserialize_double+0x68>
 800c26e:	7d23      	ldrb	r3, [r4, #20]
 800c270:	2b01      	cmp	r3, #1
 800c272:	68a3      	ldr	r3, [r4, #8]
 800c274:	d022      	beq.n	800c2bc <ucdr_deserialize_double+0x70>
 800c276:	79db      	ldrb	r3, [r3, #7]
 800c278:	702b      	strb	r3, [r5, #0]
 800c27a:	68a3      	ldr	r3, [r4, #8]
 800c27c:	799b      	ldrb	r3, [r3, #6]
 800c27e:	706b      	strb	r3, [r5, #1]
 800c280:	68a3      	ldr	r3, [r4, #8]
 800c282:	795b      	ldrb	r3, [r3, #5]
 800c284:	70ab      	strb	r3, [r5, #2]
 800c286:	68a3      	ldr	r3, [r4, #8]
 800c288:	791b      	ldrb	r3, [r3, #4]
 800c28a:	70eb      	strb	r3, [r5, #3]
 800c28c:	68a3      	ldr	r3, [r4, #8]
 800c28e:	78db      	ldrb	r3, [r3, #3]
 800c290:	712b      	strb	r3, [r5, #4]
 800c292:	68a3      	ldr	r3, [r4, #8]
 800c294:	789b      	ldrb	r3, [r3, #2]
 800c296:	716b      	strb	r3, [r5, #5]
 800c298:	68a3      	ldr	r3, [r4, #8]
 800c29a:	785b      	ldrb	r3, [r3, #1]
 800c29c:	71ab      	strb	r3, [r5, #6]
 800c29e:	68a3      	ldr	r3, [r4, #8]
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	71eb      	strb	r3, [r5, #7]
 800c2a4:	68a2      	ldr	r2, [r4, #8]
 800c2a6:	6923      	ldr	r3, [r4, #16]
 800c2a8:	3208      	adds	r2, #8
 800c2aa:	3308      	adds	r3, #8
 800c2ac:	2108      	movs	r1, #8
 800c2ae:	60a2      	str	r2, [r4, #8]
 800c2b0:	6123      	str	r3, [r4, #16]
 800c2b2:	7561      	strb	r1, [r4, #21]
 800c2b4:	7da0      	ldrb	r0, [r4, #22]
 800c2b6:	f080 0001 	eor.w	r0, r0, #1
 800c2ba:	bd38      	pop	{r3, r4, r5, pc}
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	606b      	str	r3, [r5, #4]
 800c2c2:	602a      	str	r2, [r5, #0]
 800c2c4:	e7ee      	b.n	800c2a4 <ucdr_deserialize_double+0x58>
 800c2c6:	bf00      	nop

0800c2c8 <ucdr_deserialize_endian_double>:
 800c2c8:	b570      	push	{r4, r5, r6, lr}
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	460e      	mov	r6, r1
 800c2ce:	2108      	movs	r1, #8
 800c2d0:	4615      	mov	r5, r2
 800c2d2:	f000 f895 	bl	800c400 <ucdr_buffer_alignment>
 800c2d6:	68a2      	ldr	r2, [r4, #8]
 800c2d8:	6923      	ldr	r3, [r4, #16]
 800c2da:	4402      	add	r2, r0
 800c2dc:	4418      	add	r0, r3
 800c2de:	6120      	str	r0, [r4, #16]
 800c2e0:	60a2      	str	r2, [r4, #8]
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	2108      	movs	r1, #8
 800c2e6:	f000 f839 	bl	800c35c <ucdr_check_final_buffer_behavior>
 800c2ea:	b308      	cbz	r0, 800c330 <ucdr_deserialize_endian_double+0x68>
 800c2ec:	2e01      	cmp	r6, #1
 800c2ee:	68a3      	ldr	r3, [r4, #8]
 800c2f0:	d022      	beq.n	800c338 <ucdr_deserialize_endian_double+0x70>
 800c2f2:	79db      	ldrb	r3, [r3, #7]
 800c2f4:	702b      	strb	r3, [r5, #0]
 800c2f6:	68a3      	ldr	r3, [r4, #8]
 800c2f8:	799b      	ldrb	r3, [r3, #6]
 800c2fa:	706b      	strb	r3, [r5, #1]
 800c2fc:	68a3      	ldr	r3, [r4, #8]
 800c2fe:	795b      	ldrb	r3, [r3, #5]
 800c300:	70ab      	strb	r3, [r5, #2]
 800c302:	68a3      	ldr	r3, [r4, #8]
 800c304:	791b      	ldrb	r3, [r3, #4]
 800c306:	70eb      	strb	r3, [r5, #3]
 800c308:	68a3      	ldr	r3, [r4, #8]
 800c30a:	78db      	ldrb	r3, [r3, #3]
 800c30c:	712b      	strb	r3, [r5, #4]
 800c30e:	68a3      	ldr	r3, [r4, #8]
 800c310:	789b      	ldrb	r3, [r3, #2]
 800c312:	716b      	strb	r3, [r5, #5]
 800c314:	68a3      	ldr	r3, [r4, #8]
 800c316:	785b      	ldrb	r3, [r3, #1]
 800c318:	71ab      	strb	r3, [r5, #6]
 800c31a:	68a3      	ldr	r3, [r4, #8]
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	71eb      	strb	r3, [r5, #7]
 800c320:	68a2      	ldr	r2, [r4, #8]
 800c322:	6923      	ldr	r3, [r4, #16]
 800c324:	3208      	adds	r2, #8
 800c326:	3308      	adds	r3, #8
 800c328:	2108      	movs	r1, #8
 800c32a:	60a2      	str	r2, [r4, #8]
 800c32c:	6123      	str	r3, [r4, #16]
 800c32e:	7561      	strb	r1, [r4, #21]
 800c330:	7da0      	ldrb	r0, [r4, #22]
 800c332:	f080 0001 	eor.w	r0, r0, #1
 800c336:	bd70      	pop	{r4, r5, r6, pc}
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	606b      	str	r3, [r5, #4]
 800c33e:	602a      	str	r2, [r5, #0]
 800c340:	e7ee      	b.n	800c320 <ucdr_deserialize_endian_double+0x58>
 800c342:	bf00      	nop

0800c344 <ucdr_check_buffer_available_for>:
 800c344:	7d83      	ldrb	r3, [r0, #22]
 800c346:	b93b      	cbnz	r3, 800c358 <ucdr_check_buffer_available_for+0x14>
 800c348:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c34c:	4419      	add	r1, r3
 800c34e:	4288      	cmp	r0, r1
 800c350:	bf34      	ite	cc
 800c352:	2000      	movcc	r0, #0
 800c354:	2001      	movcs	r0, #1
 800c356:	4770      	bx	lr
 800c358:	2000      	movs	r0, #0
 800c35a:	4770      	bx	lr

0800c35c <ucdr_check_final_buffer_behavior>:
 800c35c:	b538      	push	{r3, r4, r5, lr}
 800c35e:	7d83      	ldrb	r3, [r0, #22]
 800c360:	b97b      	cbnz	r3, 800c382 <ucdr_check_final_buffer_behavior+0x26>
 800c362:	e9d0 5201 	ldrd	r5, r2, [r0, #4]
 800c366:	4411      	add	r1, r2
 800c368:	428d      	cmp	r5, r1
 800c36a:	4604      	mov	r4, r0
 800c36c:	d20c      	bcs.n	800c388 <ucdr_check_final_buffer_behavior+0x2c>
 800c36e:	6982      	ldr	r2, [r0, #24]
 800c370:	b16a      	cbz	r2, 800c38e <ucdr_check_final_buffer_behavior+0x32>
 800c372:	69c1      	ldr	r1, [r0, #28]
 800c374:	4790      	blx	r2
 800c376:	f080 0301 	eor.w	r3, r0, #1
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	75a0      	strb	r0, [r4, #22]
 800c37e:	4618      	mov	r0, r3
 800c380:	bd38      	pop	{r3, r4, r5, pc}
 800c382:	2300      	movs	r3, #0
 800c384:	4618      	mov	r0, r3
 800c386:	bd38      	pop	{r3, r4, r5, pc}
 800c388:	2301      	movs	r3, #1
 800c38a:	4618      	mov	r0, r3
 800c38c:	bd38      	pop	{r3, r4, r5, pc}
 800c38e:	2001      	movs	r0, #1
 800c390:	75a0      	strb	r0, [r4, #22]
 800c392:	e7f4      	b.n	800c37e <ucdr_check_final_buffer_behavior+0x22>

0800c394 <ucdr_set_on_full_buffer_callback>:
 800c394:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop

0800c39c <ucdr_init_buffer_origin_offset_endian>:
 800c39c:	b430      	push	{r4, r5}
 800c39e:	9c02      	ldr	r4, [sp, #8]
 800c3a0:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800c3a4:	6001      	str	r1, [r0, #0]
 800c3a6:	440a      	add	r2, r1
 800c3a8:	60c3      	str	r3, [r0, #12]
 800c3aa:	4421      	add	r1, r4
 800c3ac:	441c      	add	r4, r3
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	6104      	str	r4, [r0, #16]
 800c3b2:	7505      	strb	r5, [r0, #20]
 800c3b4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c3b8:	bc30      	pop	{r4, r5}
 800c3ba:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800c3be:	7543      	strb	r3, [r0, #21]
 800c3c0:	7583      	strb	r3, [r0, #22]
 800c3c2:	4770      	bx	lr

0800c3c4 <ucdr_init_buffer_origin_offset>:
 800c3c4:	b510      	push	{r4, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	9c04      	ldr	r4, [sp, #16]
 800c3ca:	9400      	str	r4, [sp, #0]
 800c3cc:	2401      	movs	r4, #1
 800c3ce:	9401      	str	r4, [sp, #4]
 800c3d0:	f7ff ffe4 	bl	800c39c <ucdr_init_buffer_origin_offset_endian>
 800c3d4:	b002      	add	sp, #8
 800c3d6:	bd10      	pop	{r4, pc}

0800c3d8 <ucdr_init_buffer_origin>:
 800c3d8:	b510      	push	{r4, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	2400      	movs	r4, #0
 800c3de:	9400      	str	r4, [sp, #0]
 800c3e0:	f7ff fff0 	bl	800c3c4 <ucdr_init_buffer_origin_offset>
 800c3e4:	b002      	add	sp, #8
 800c3e6:	bd10      	pop	{r4, pc}

0800c3e8 <ucdr_init_buffer>:
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	f7ff bff5 	b.w	800c3d8 <ucdr_init_buffer_origin>
 800c3ee:	bf00      	nop

0800c3f0 <ucdr_alignment>:
 800c3f0:	fbb0 f3f1 	udiv	r3, r0, r1
 800c3f4:	fb03 0011 	mls	r0, r3, r1, r0
 800c3f8:	1a08      	subs	r0, r1, r0
 800c3fa:	3901      	subs	r1, #1
 800c3fc:	4008      	ands	r0, r1
 800c3fe:	4770      	bx	lr

0800c400 <ucdr_buffer_alignment>:
 800c400:	7d43      	ldrb	r3, [r0, #21]
 800c402:	428b      	cmp	r3, r1
 800c404:	d20a      	bcs.n	800c41c <ucdr_buffer_alignment+0x1c>
 800c406:	e9d0 0303 	ldrd	r0, r3, [r0, #12]
 800c40a:	1a1b      	subs	r3, r3, r0
 800c40c:	fbb3 f0f1 	udiv	r0, r3, r1
 800c410:	fb01 3010 	mls	r0, r1, r0, r3
 800c414:	1a08      	subs	r0, r1, r0
 800c416:	3901      	subs	r1, #1
 800c418:	4008      	ands	r0, r1
 800c41a:	4770      	bx	lr
 800c41c:	2000      	movs	r0, #0
 800c41e:	4770      	bx	lr

0800c420 <ucdr_align_to>:
 800c420:	b570      	push	{r4, r5, r6, lr}
 800c422:	4604      	mov	r4, r0
 800c424:	460e      	mov	r6, r1
 800c426:	f7ff ffeb 	bl	800c400 <ucdr_buffer_alignment>
 800c42a:	68a5      	ldr	r5, [r4, #8]
 800c42c:	6863      	ldr	r3, [r4, #4]
 800c42e:	6922      	ldr	r2, [r4, #16]
 800c430:	7566      	strb	r6, [r4, #21]
 800c432:	4405      	add	r5, r0
 800c434:	42ab      	cmp	r3, r5
 800c436:	4410      	add	r0, r2
 800c438:	bf28      	it	cs
 800c43a:	462b      	movcs	r3, r5
 800c43c:	6120      	str	r0, [r4, #16]
 800c43e:	60a3      	str	r3, [r4, #8]
 800c440:	bd70      	pop	{r4, r5, r6, pc}
 800c442:	bf00      	nop

0800c444 <ucdr_buffer_length>:
 800c444:	6882      	ldr	r2, [r0, #8]
 800c446:	6800      	ldr	r0, [r0, #0]
 800c448:	1a10      	subs	r0, r2, r0
 800c44a:	4770      	bx	lr

0800c44c <ucdr_buffer_remaining>:
 800c44c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c450:	1a10      	subs	r0, r2, r0
 800c452:	4770      	bx	lr

0800c454 <ucdr_check_final_buffer_behavior_array>:
 800c454:	b538      	push	{r3, r4, r5, lr}
 800c456:	7d83      	ldrb	r3, [r0, #22]
 800c458:	b96b      	cbnz	r3, 800c476 <ucdr_check_final_buffer_behavior_array+0x22>
 800c45a:	460d      	mov	r5, r1
 800c45c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 800c460:	441a      	add	r2, r3
 800c462:	4291      	cmp	r1, r2
 800c464:	4604      	mov	r4, r0
 800c466:	d208      	bcs.n	800c47a <ucdr_check_final_buffer_behavior_array+0x26>
 800c468:	b13d      	cbz	r5, 800c47a <ucdr_check_final_buffer_behavior_array+0x26>
 800c46a:	6983      	ldr	r3, [r0, #24]
 800c46c:	b163      	cbz	r3, 800c488 <ucdr_check_final_buffer_behavior_array+0x34>
 800c46e:	69c1      	ldr	r1, [r0, #28]
 800c470:	4798      	blx	r3
 800c472:	75a0      	strb	r0, [r4, #22]
 800c474:	b108      	cbz	r0, 800c47a <ucdr_check_final_buffer_behavior_array+0x26>
 800c476:	2000      	movs	r0, #0
 800c478:	bd38      	pop	{r3, r4, r5, pc}
 800c47a:	4620      	mov	r0, r4
 800c47c:	f7ff ffe6 	bl	800c44c <ucdr_buffer_remaining>
 800c480:	42a8      	cmp	r0, r5
 800c482:	bf28      	it	cs
 800c484:	4628      	movcs	r0, r5
 800c486:	bd38      	pop	{r3, r4, r5, pc}
 800c488:	2301      	movs	r3, #1
 800c48a:	7583      	strb	r3, [r0, #22]
 800c48c:	e7f3      	b.n	800c476 <ucdr_check_final_buffer_behavior_array+0x22>
 800c48e:	bf00      	nop

0800c490 <ucdr_advance_buffer>:
 800c490:	b538      	push	{r3, r4, r5, lr}
 800c492:	4604      	mov	r4, r0
 800c494:	460d      	mov	r5, r1
 800c496:	f7ff ff55 	bl	800c344 <ucdr_check_buffer_available_for>
 800c49a:	b178      	cbz	r0, 800c4bc <ucdr_advance_buffer+0x2c>
 800c49c:	68a3      	ldr	r3, [r4, #8]
 800c49e:	6921      	ldr	r1, [r4, #16]
 800c4a0:	442b      	add	r3, r5
 800c4a2:	60a3      	str	r3, [r4, #8]
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	4429      	add	r1, r5
 800c4a8:	7563      	strb	r3, [r4, #21]
 800c4aa:	6121      	str	r1, [r4, #16]
 800c4ac:	bd38      	pop	{r3, r4, r5, pc}
 800c4ae:	68a2      	ldr	r2, [r4, #8]
 800c4b0:	6923      	ldr	r3, [r4, #16]
 800c4b2:	4402      	add	r2, r0
 800c4b4:	4403      	add	r3, r0
 800c4b6:	1a2d      	subs	r5, r5, r0
 800c4b8:	60a2      	str	r2, [r4, #8]
 800c4ba:	6123      	str	r3, [r4, #16]
 800c4bc:	2201      	movs	r2, #1
 800c4be:	4629      	mov	r1, r5
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f7ff ffc7 	bl	800c454 <ucdr_check_final_buffer_behavior_array>
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	d1f1      	bne.n	800c4ae <ucdr_advance_buffer+0x1e>
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	7563      	strb	r3, [r4, #21]
 800c4ce:	bd38      	pop	{r3, r4, r5, pc}

0800c4d0 <rcl_get_zero_initialized_init_options>:
 800c4d0:	2000      	movs	r0, #0
 800c4d2:	4770      	bx	lr

0800c4d4 <rcl_init_options_init>:
 800c4d4:	b084      	sub	sp, #16
 800c4d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4d8:	b091      	sub	sp, #68	; 0x44
 800c4da:	af17      	add	r7, sp, #92	; 0x5c
 800c4dc:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	d044      	beq.n	800c56e <rcl_init_options_init+0x9a>
 800c4e4:	6803      	ldr	r3, [r0, #0]
 800c4e6:	4606      	mov	r6, r0
 800c4e8:	b133      	cbz	r3, 800c4f8 <rcl_init_options_init+0x24>
 800c4ea:	2464      	movs	r4, #100	; 0x64
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	b011      	add	sp, #68	; 0x44
 800c4f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c4f4:	b004      	add	sp, #16
 800c4f6:	4770      	bx	lr
 800c4f8:	4638      	mov	r0, r7
 800c4fa:	f001 f8f5 	bl	800d6e8 <rcutils_allocator_is_valid>
 800c4fe:	2800      	cmp	r0, #0
 800c500:	d035      	beq.n	800c56e <rcl_init_options_init+0x9a>
 800c502:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c504:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800c506:	2050      	movs	r0, #80	; 0x50
 800c508:	4798      	blx	r3
 800c50a:	4604      	mov	r4, r0
 800c50c:	6030      	str	r0, [r6, #0]
 800c50e:	2800      	cmp	r0, #0
 800c510:	d02f      	beq.n	800c572 <rcl_init_options_init+0x9e>
 800c512:	46bc      	mov	ip, r7
 800c514:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c518:	4625      	mov	r5, r4
 800c51a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c51c:	f8dc 3000 	ldr.w	r3, [ip]
 800c520:	602b      	str	r3, [r5, #0]
 800c522:	a802      	add	r0, sp, #8
 800c524:	ad02      	add	r5, sp, #8
 800c526:	f001 fb6f 	bl	800dc08 <rmw_get_zero_initialized_init_options>
 800c52a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c52c:	3418      	adds	r4, #24
 800c52e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c538:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c53c:	6833      	ldr	r3, [r6, #0]
 800c53e:	e884 0003 	stmia.w	r4, {r0, r1}
 800c542:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800c546:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c54a:	f103 0018 	add.w	r0, r3, #24
 800c54e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800c552:	f001 fc21 	bl	800dd98 <rmw_init_options_init>
 800c556:	4604      	mov	r4, r0
 800c558:	2800      	cmp	r0, #0
 800c55a:	d0c7      	beq.n	800c4ec <rcl_init_options_init+0x18>
 800c55c:	6830      	ldr	r0, [r6, #0]
 800c55e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c560:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800c562:	4798      	blx	r3
 800c564:	4620      	mov	r0, r4
 800c566:	f006 fa07 	bl	8012978 <rcl_convert_rmw_ret_to_rcl_ret>
 800c56a:	4604      	mov	r4, r0
 800c56c:	e7be      	b.n	800c4ec <rcl_init_options_init+0x18>
 800c56e:	240b      	movs	r4, #11
 800c570:	e7bc      	b.n	800c4ec <rcl_init_options_init+0x18>
 800c572:	240a      	movs	r4, #10
 800c574:	e7ba      	b.n	800c4ec <rcl_init_options_init+0x18>
 800c576:	bf00      	nop

0800c578 <rcl_init_options_fini>:
 800c578:	b570      	push	{r4, r5, r6, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	b1c0      	cbz	r0, 800c5b0 <rcl_init_options_fini+0x38>
 800c57e:	6804      	ldr	r4, [r0, #0]
 800c580:	4606      	mov	r6, r0
 800c582:	b1ac      	cbz	r4, 800c5b0 <rcl_init_options_fini+0x38>
 800c584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c586:	ad01      	add	r5, sp, #4
 800c588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c58a:	6823      	ldr	r3, [r4, #0]
 800c58c:	602b      	str	r3, [r5, #0]
 800c58e:	a801      	add	r0, sp, #4
 800c590:	f001 f8aa 	bl	800d6e8 <rcutils_allocator_is_valid>
 800c594:	b160      	cbz	r0, 800c5b0 <rcl_init_options_fini+0x38>
 800c596:	6830      	ldr	r0, [r6, #0]
 800c598:	3018      	adds	r0, #24
 800c59a:	f001 fc99 	bl	800ded0 <rmw_init_options_fini>
 800c59e:	4604      	mov	r4, r0
 800c5a0:	b950      	cbnz	r0, 800c5b8 <rcl_init_options_fini+0x40>
 800c5a2:	6830      	ldr	r0, [r6, #0]
 800c5a4:	9b02      	ldr	r3, [sp, #8]
 800c5a6:	9905      	ldr	r1, [sp, #20]
 800c5a8:	4798      	blx	r3
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	b006      	add	sp, #24
 800c5ae:	bd70      	pop	{r4, r5, r6, pc}
 800c5b0:	240b      	movs	r4, #11
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	b006      	add	sp, #24
 800c5b6:	bd70      	pop	{r4, r5, r6, pc}
 800c5b8:	f006 f9de 	bl	8012978 <rcl_convert_rmw_ret_to_rcl_ret>
 800c5bc:	4604      	mov	r4, r0
 800c5be:	e7f8      	b.n	800c5b2 <rcl_init_options_fini+0x3a>

0800c5c0 <rcl_init_options_copy>:
 800c5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c4:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	d067      	beq.n	800c69c <rcl_init_options_copy+0xdc>
 800c5cc:	6806      	ldr	r6, [r0, #0]
 800c5ce:	4605      	mov	r5, r0
 800c5d0:	2e00      	cmp	r6, #0
 800c5d2:	d063      	beq.n	800c69c <rcl_init_options_copy+0xdc>
 800c5d4:	460c      	mov	r4, r1
 800c5d6:	2900      	cmp	r1, #0
 800c5d8:	d060      	beq.n	800c69c <rcl_init_options_copy+0xdc>
 800c5da:	680b      	ldr	r3, [r1, #0]
 800c5dc:	b12b      	cbz	r3, 800c5ea <rcl_init_options_copy+0x2a>
 800c5de:	2664      	movs	r6, #100	; 0x64
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 800c5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c5ec:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800c5f0:	4647      	mov	r7, r8
 800c5f2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c5f4:	4640      	mov	r0, r8
 800c5f6:	6833      	ldr	r3, [r6, #0]
 800c5f8:	603b      	str	r3, [r7, #0]
 800c5fa:	f001 f875 	bl	800d6e8 <rcutils_allocator_is_valid>
 800c5fe:	2800      	cmp	r0, #0
 800c600:	d04c      	beq.n	800c69c <rcl_init_options_copy+0xdc>
 800c602:	f8d8 3000 	ldr.w	r3, [r8]
 800c606:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c60a:	2050      	movs	r0, #80	; 0x50
 800c60c:	4798      	blx	r3
 800c60e:	4606      	mov	r6, r0
 800c610:	6020      	str	r0, [r4, #0]
 800c612:	2800      	cmp	r0, #0
 800c614:	d07c      	beq.n	800c710 <rcl_init_options_copy+0x150>
 800c616:	46c4      	mov	ip, r8
 800c618:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c61c:	4637      	mov	r7, r6
 800c61e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c620:	f8dc 3000 	ldr.w	r3, [ip]
 800c624:	603b      	str	r3, [r7, #0]
 800c626:	a802      	add	r0, sp, #8
 800c628:	af02      	add	r7, sp, #8
 800c62a:	f001 faed 	bl	800dc08 <rmw_get_zero_initialized_init_options>
 800c62e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c630:	3618      	adds	r6, #24
 800c632:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c634:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c636:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c638:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c63a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c63c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c640:	e886 0003 	stmia.w	r6, {r0, r1}
 800c644:	ab13      	add	r3, sp, #76	; 0x4c
 800c646:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c64a:	6823      	ldr	r3, [r4, #0]
 800c64c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c650:	f103 0018 	add.w	r0, r3, #24
 800c654:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800c658:	f001 fb9e 	bl	800dd98 <rmw_init_options_init>
 800c65c:	4606      	mov	r6, r0
 800c65e:	bb18      	cbnz	r0, 800c6a8 <rcl_init_options_copy+0xe8>
 800c660:	682f      	ldr	r7, [r5, #0]
 800c662:	f8d4 c000 	ldr.w	ip, [r4]
 800c666:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c668:	4666      	mov	r6, ip
 800c66a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	6033      	str	r3, [r6, #0]
 800c670:	f10c 0018 	add.w	r0, ip, #24
 800c674:	f001 fc2c 	bl	800ded0 <rmw_init_options_fini>
 800c678:	4607      	mov	r7, r0
 800c67a:	b310      	cbz	r0, 800c6c2 <rcl_init_options_copy+0x102>
 800c67c:	4640      	mov	r0, r8
 800c67e:	f001 f8fd 	bl	800d87c <rcutils_get_error_string>
 800c682:	f001 f923 	bl	800d8cc <rcutils_reset_error>
 800c686:	4620      	mov	r0, r4
 800c688:	f7ff ff76 	bl	800c578 <rcl_init_options_fini>
 800c68c:	4606      	mov	r6, r0
 800c68e:	2800      	cmp	r0, #0
 800c690:	d1a6      	bne.n	800c5e0 <rcl_init_options_copy+0x20>
 800c692:	4638      	mov	r0, r7
 800c694:	f006 f970 	bl	8012978 <rcl_convert_rmw_ret_to_rcl_ret>
 800c698:	4606      	mov	r6, r0
 800c69a:	e7a1      	b.n	800c5e0 <rcl_init_options_copy+0x20>
 800c69c:	260b      	movs	r6, #11
 800c69e:	4630      	mov	r0, r6
 800c6a0:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 800c6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c6ac:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c6b0:	6820      	ldr	r0, [r4, #0]
 800c6b2:	4798      	blx	r3
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	f006 f95f 	bl	8012978 <rcl_convert_rmw_ret_to_rcl_ret>
 800c6ba:	4606      	mov	r6, r0
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	d0cf      	beq.n	800c660 <rcl_init_options_copy+0xa0>
 800c6c0:	e78e      	b.n	800c5e0 <rcl_init_options_copy+0x20>
 800c6c2:	a802      	add	r0, sp, #8
 800c6c4:	ae02      	add	r6, sp, #8
 800c6c6:	6827      	ldr	r7, [r4, #0]
 800c6c8:	f001 fa9e 	bl	800dc08 <rmw_get_zero_initialized_init_options>
 800c6cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c6ce:	3718      	adds	r7, #24
 800c6d0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c6d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c6d4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c6d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c6d8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c6da:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c6de:	682a      	ldr	r2, [r5, #0]
 800c6e0:	6823      	ldr	r3, [r4, #0]
 800c6e2:	e887 0003 	stmia.w	r7, {r0, r1}
 800c6e6:	f102 0018 	add.w	r0, r2, #24
 800c6ea:	f103 0118 	add.w	r1, r3, #24
 800c6ee:	f001 fbab 	bl	800de48 <rmw_init_options_copy>
 800c6f2:	4606      	mov	r6, r0
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	f43f af73 	beq.w	800c5e0 <rcl_init_options_copy+0x20>
 800c6fa:	4640      	mov	r0, r8
 800c6fc:	f001 f8be 	bl	800d87c <rcutils_get_error_string>
 800c700:	f001 f8e4 	bl	800d8cc <rcutils_reset_error>
 800c704:	4620      	mov	r0, r4
 800c706:	f7ff ff37 	bl	800c578 <rcl_init_options_fini>
 800c70a:	b118      	cbz	r0, 800c714 <rcl_init_options_copy+0x154>
 800c70c:	4606      	mov	r6, r0
 800c70e:	e767      	b.n	800c5e0 <rcl_init_options_copy+0x20>
 800c710:	260a      	movs	r6, #10
 800c712:	e765      	b.n	800c5e0 <rcl_init_options_copy+0x20>
 800c714:	4630      	mov	r0, r6
 800c716:	f006 f92f 	bl	8012978 <rcl_convert_rmw_ret_to_rcl_ret>
 800c71a:	4606      	mov	r6, r0
 800c71c:	e760      	b.n	800c5e0 <rcl_init_options_copy+0x20>
 800c71e:	bf00      	nop

0800c720 <rcl_node_get_default_options>:
 800c720:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c722:	b087      	sub	sp, #28
 800c724:	4607      	mov	r7, r0
 800c726:	466d      	mov	r5, sp
 800c728:	4668      	mov	r0, sp
 800c72a:	f000 ffcf 	bl	800d6cc <rcutils_get_default_allocator>
 800c72e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c730:	4c08      	ldr	r4, [pc, #32]	; (800c754 <rcl_node_get_default_options+0x34>)
 800c732:	f8d5 c000 	ldr.w	ip, [r5]
 800c736:	1d26      	adds	r6, r4, #4
 800c738:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c73a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c73c:	463d      	mov	r5, r7
 800c73e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c740:	f8c6 c000 	str.w	ip, [r6]
 800c744:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c748:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c74c:	4638      	mov	r0, r7
 800c74e:	b007      	add	sp, #28
 800c750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c752:	bf00      	nop
 800c754:	20000064 	.word	0x20000064

0800c758 <rcl_node_options_copy>:
 800c758:	b1c8      	cbz	r0, 800c78e <rcl_node_options_copy+0x36>
 800c75a:	b4f0      	push	{r4, r5, r6, r7}
 800c75c:	460f      	mov	r7, r1
 800c75e:	b199      	cbz	r1, 800c788 <rcl_node_options_copy+0x30>
 800c760:	4288      	cmp	r0, r1
 800c762:	4606      	mov	r6, r0
 800c764:	d010      	beq.n	800c788 <rcl_node_options_copy+0x30>
 800c766:	4605      	mov	r5, r0
 800c768:	460c      	mov	r4, r1
 800c76a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c76e:	f844 3b04 	str.w	r3, [r4], #4
 800c772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c776:	7e32      	ldrb	r2, [r6, #24]
 800c778:	6829      	ldr	r1, [r5, #0]
 800c77a:	7e73      	ldrb	r3, [r6, #25]
 800c77c:	6021      	str	r1, [r4, #0]
 800c77e:	2000      	movs	r0, #0
 800c780:	763a      	strb	r2, [r7, #24]
 800c782:	767b      	strb	r3, [r7, #25]
 800c784:	bcf0      	pop	{r4, r5, r6, r7}
 800c786:	4770      	bx	lr
 800c788:	200b      	movs	r0, #11
 800c78a:	bcf0      	pop	{r4, r5, r6, r7}
 800c78c:	4770      	bx	lr
 800c78e:	200b      	movs	r0, #11
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop

0800c794 <rcl_get_zero_initialized_publisher>:
 800c794:	4b01      	ldr	r3, [pc, #4]	; (800c79c <rcl_get_zero_initialized_publisher+0x8>)
 800c796:	6818      	ldr	r0, [r3, #0]
 800c798:	4770      	bx	lr
 800c79a:	bf00      	nop
 800c79c:	08019390 	.word	0x08019390

0800c7a0 <rcl_publisher_init>:
 800c7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a4:	b091      	sub	sp, #68	; 0x44
 800c7a6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c7a8:	b3d7      	cbz	r7, 800c820 <rcl_publisher_init+0x80>
 800c7aa:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	4648      	mov	r0, r9
 800c7b2:	4688      	mov	r8, r1
 800c7b4:	4616      	mov	r6, r2
 800c7b6:	461d      	mov	r5, r3
 800c7b8:	f000 ff96 	bl	800d6e8 <rcutils_allocator_is_valid>
 800c7bc:	b380      	cbz	r0, 800c820 <rcl_publisher_init+0x80>
 800c7be:	b37c      	cbz	r4, 800c820 <rcl_publisher_init+0x80>
 800c7c0:	f8d4 a000 	ldr.w	sl, [r4]
 800c7c4:	f1ba 0f00 	cmp.w	sl, #0
 800c7c8:	d004      	beq.n	800c7d4 <rcl_publisher_init+0x34>
 800c7ca:	2564      	movs	r5, #100	; 0x64
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	b011      	add	sp, #68	; 0x44
 800c7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d4:	4640      	mov	r0, r8
 800c7d6:	f006 fd8f 	bl	80132f8 <rcl_node_is_valid>
 800c7da:	b330      	cbz	r0, 800c82a <rcl_publisher_init+0x8a>
 800c7dc:	b306      	cbz	r6, 800c820 <rcl_publisher_init+0x80>
 800c7de:	b1fd      	cbz	r5, 800c820 <rcl_publisher_init+0x80>
 800c7e0:	46ce      	mov	lr, r9
 800c7e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c7e6:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800c7ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c7ee:	f8de 3000 	ldr.w	r3, [lr]
 800c7f2:	f8cc 3000 	str.w	r3, [ip]
 800c7f6:	f001 f887 	bl	800d908 <rcutils_get_zero_initialized_string_map>
 800c7fa:	ab10      	add	r3, sp, #64	; 0x40
 800c7fc:	4684      	mov	ip, r0
 800c7fe:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800c802:	f8cd c020 	str.w	ip, [sp, #32]
 800c806:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c80a:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800c80e:	4651      	mov	r1, sl
 800c810:	a808      	add	r0, sp, #32
 800c812:	f001 f8f3 	bl	800d9fc <rcutils_string_map_init>
 800c816:	b150      	cbz	r0, 800c82e <rcl_publisher_init+0x8e>
 800c818:	280a      	cmp	r0, #10
 800c81a:	d013      	beq.n	800c844 <rcl_publisher_init+0xa4>
 800c81c:	2501      	movs	r5, #1
 800c81e:	e7d5      	b.n	800c7cc <rcl_publisher_init+0x2c>
 800c820:	250b      	movs	r5, #11
 800c822:	4628      	mov	r0, r5
 800c824:	b011      	add	sp, #68	; 0x44
 800c826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c82a:	25c8      	movs	r5, #200	; 0xc8
 800c82c:	e7ce      	b.n	800c7cc <rcl_publisher_init+0x2c>
 800c82e:	a808      	add	r0, sp, #32
 800c830:	f006 faaa 	bl	8012d88 <rcl_get_default_topic_name_substitutions>
 800c834:	4682      	mov	sl, r0
 800c836:	b138      	cbz	r0, 800c848 <rcl_publisher_init+0xa8>
 800c838:	a808      	add	r0, sp, #32
 800c83a:	f001 f91f 	bl	800da7c <rcutils_string_map_fini>
 800c83e:	f1ba 0f0a 	cmp.w	sl, #10
 800c842:	d1eb      	bne.n	800c81c <rcl_publisher_init+0x7c>
 800c844:	250a      	movs	r5, #10
 800c846:	e7c1      	b.n	800c7cc <rcl_publisher_init+0x2c>
 800c848:	4640      	mov	r0, r8
 800c84a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c84e:	f006 fd5d 	bl	801330c <rcl_node_get_name>
 800c852:	4682      	mov	sl, r0
 800c854:	4640      	mov	r0, r8
 800c856:	f006 fd61 	bl	801331c <rcl_node_get_namespace>
 800c85a:	4686      	mov	lr, r0
 800c85c:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800c860:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800c864:	46ec      	mov	ip, sp
 800c866:	f8cd b014 	str.w	fp, [sp, #20]
 800c86a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c86e:	f8d9 3000 	ldr.w	r3, [r9]
 800c872:	f8cc 3000 	str.w	r3, [ip]
 800c876:	4628      	mov	r0, r5
 800c878:	4651      	mov	r1, sl
 800c87a:	4672      	mov	r2, lr
 800c87c:	ab08      	add	r3, sp, #32
 800c87e:	f006 f91d 	bl	8012abc <rcl_expand_topic_name>
 800c882:	4605      	mov	r5, r0
 800c884:	a808      	add	r0, sp, #32
 800c886:	f001 f8f9 	bl	800da7c <rcutils_string_map_fini>
 800c88a:	b920      	cbnz	r0, 800c896 <rcl_publisher_init+0xf6>
 800c88c:	b15d      	cbz	r5, 800c8a6 <rcl_publisher_init+0x106>
 800c88e:	2d67      	cmp	r5, #103	; 0x67
 800c890:	d002      	beq.n	800c898 <rcl_publisher_init+0xf8>
 800c892:	2d69      	cmp	r5, #105	; 0x69
 800c894:	d05f      	beq.n	800c956 <rcl_publisher_init+0x1b6>
 800c896:	2501      	movs	r5, #1
 800c898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c89a:	2800      	cmp	r0, #0
 800c89c:	d096      	beq.n	800c7cc <rcl_publisher_init+0x2c>
 800c89e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8a0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c8a2:	4798      	blx	r3
 800c8a4:	e792      	b.n	800c7cc <rcl_publisher_init+0x2c>
 800c8a6:	4640      	mov	r0, r8
 800c8a8:	f006 fd40 	bl	801332c <rcl_node_get_options>
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	d0f2      	beq.n	800c896 <rcl_publisher_init+0xf6>
 800c8b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8b2:	f7f3 fc97 	bl	80001e4 <strlen>
 800c8b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8b8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c8ba:	3001      	adds	r0, #1
 800c8bc:	4798      	blx	r3
 800c8be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8c0:	9107      	str	r1, [sp, #28]
 800c8c2:	4681      	mov	r9, r0
 800c8c4:	4608      	mov	r0, r1
 800c8c6:	f7f3 fc8d 	bl	80001e4 <strlen>
 800c8ca:	9907      	ldr	r1, [sp, #28]
 800c8cc:	1c42      	adds	r2, r0, #1
 800c8ce:	4648      	mov	r0, r9
 800c8d0:	f00a fa54 	bl	8016d7c <memcpy>
 800c8d4:	462a      	mov	r2, r5
 800c8d6:	4648      	mov	r0, r9
 800c8d8:	a90a      	add	r1, sp, #40	; 0x28
 800c8da:	f001 f9c1 	bl	800dc60 <rmw_validate_full_topic_name>
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	d137      	bne.n	800c952 <rcl_publisher_init+0x1b2>
 800c8e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d138      	bne.n	800c95a <rcl_publisher_init+0x1ba>
 800c8e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8ea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c8ec:	20c0      	movs	r0, #192	; 0xc0
 800c8ee:	4798      	blx	r3
 800c8f0:	6020      	str	r0, [r4, #0]
 800c8f2:	b3a0      	cbz	r0, 800c95e <rcl_publisher_init+0x1be>
 800c8f4:	4640      	mov	r0, r8
 800c8f6:	f006 fd21 	bl	801333c <rcl_node_get_rmw_handle>
 800c8fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c8fe:	9300      	str	r3, [sp, #0]
 800c900:	4631      	mov	r1, r6
 800c902:	463b      	mov	r3, r7
 800c904:	464a      	mov	r2, r9
 800c906:	6825      	ldr	r5, [r4, #0]
 800c908:	f001 fde8 	bl	800e4dc <rmw_create_publisher>
 800c90c:	6821      	ldr	r1, [r4, #0]
 800c90e:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800c912:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800c916:	b388      	cbz	r0, 800c97c <rcl_publisher_init+0x1dc>
 800c918:	3168      	adds	r1, #104	; 0x68
 800c91a:	f001 fec5 	bl	800e6a8 <rmw_publisher_get_actual_qos>
 800c91e:	6823      	ldr	r3, [r4, #0]
 800c920:	4605      	mov	r5, r0
 800c922:	b9f0      	cbnz	r0, 800c962 <rcl_publisher_init+0x1c2>
 800c924:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800c928:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800c92c:	4618      	mov	r0, r3
 800c92e:	2268      	movs	r2, #104	; 0x68
 800c930:	4639      	mov	r1, r7
 800c932:	f00a fa23 	bl	8016d7c <memcpy>
 800c936:	f8d8 2000 	ldr.w	r2, [r8]
 800c93a:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800c93e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c940:	b110      	cbz	r0, 800c948 <rcl_publisher_init+0x1a8>
 800c942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c944:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c946:	4798      	blx	r3
 800c948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c94a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c94c:	4648      	mov	r0, r9
 800c94e:	4798      	blx	r3
 800c950:	e73c      	b.n	800c7cc <rcl_publisher_init+0x2c>
 800c952:	2501      	movs	r5, #1
 800c954:	e7f3      	b.n	800c93e <rcl_publisher_init+0x19e>
 800c956:	2567      	movs	r5, #103	; 0x67
 800c958:	e79e      	b.n	800c898 <rcl_publisher_init+0xf8>
 800c95a:	2567      	movs	r5, #103	; 0x67
 800c95c:	e7ef      	b.n	800c93e <rcl_publisher_init+0x19e>
 800c95e:	250a      	movs	r5, #10
 800c960:	e7ed      	b.n	800c93e <rcl_publisher_init+0x19e>
 800c962:	2b00      	cmp	r3, #0
 800c964:	d0f5      	beq.n	800c952 <rcl_publisher_init+0x1b2>
 800c966:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c96a:	b13b      	cbz	r3, 800c97c <rcl_publisher_init+0x1dc>
 800c96c:	4640      	mov	r0, r8
 800c96e:	f006 fce5 	bl	801333c <rcl_node_get_rmw_handle>
 800c972:	6823      	ldr	r3, [r4, #0]
 800c974:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800c978:	f001 fe98 	bl	800e6ac <rmw_destroy_publisher>
 800c97c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c97e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c980:	6820      	ldr	r0, [r4, #0]
 800c982:	4798      	blx	r3
 800c984:	2300      	movs	r3, #0
 800c986:	6023      	str	r3, [r4, #0]
 800c988:	2501      	movs	r5, #1
 800c98a:	e7d8      	b.n	800c93e <rcl_publisher_init+0x19e>

0800c98c <rcl_publisher_get_default_options>:
 800c98c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c98e:	4f0e      	ldr	r7, [pc, #56]	; (800c9c8 <rcl_publisher_get_default_options+0x3c>)
 800c990:	490e      	ldr	r1, [pc, #56]	; (800c9cc <rcl_publisher_get_default_options+0x40>)
 800c992:	b087      	sub	sp, #28
 800c994:	4606      	mov	r6, r0
 800c996:	2250      	movs	r2, #80	; 0x50
 800c998:	4638      	mov	r0, r7
 800c99a:	f00a f9ef 	bl	8016d7c <memcpy>
 800c99e:	466c      	mov	r4, sp
 800c9a0:	4668      	mov	r0, sp
 800c9a2:	f000 fe93 	bl	800d6cc <rcutils_get_default_allocator>
 800c9a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9a8:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800c9ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c9ae:	6823      	ldr	r3, [r4, #0]
 800c9b0:	602b      	str	r3, [r5, #0]
 800c9b2:	f001 f939 	bl	800dc28 <rmw_get_default_publisher_options>
 800c9b6:	4639      	mov	r1, r7
 800c9b8:	6678      	str	r0, [r7, #100]	; 0x64
 800c9ba:	2268      	movs	r2, #104	; 0x68
 800c9bc:	4630      	mov	r0, r6
 800c9be:	f00a f9dd 	bl	8016d7c <memcpy>
 800c9c2:	4630      	mov	r0, r6
 800c9c4:	b007      	add	sp, #28
 800c9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9c8:	20010168 	.word	0x20010168
 800c9cc:	08019398 	.word	0x08019398

0800c9d0 <rcl_publish>:
 800c9d0:	b1f8      	cbz	r0, 800ca12 <rcl_publish+0x42>
 800c9d2:	6803      	ldr	r3, [r0, #0]
 800c9d4:	b570      	push	{r4, r5, r6, lr}
 800c9d6:	4604      	mov	r4, r0
 800c9d8:	b1b3      	cbz	r3, 800ca08 <rcl_publish+0x38>
 800c9da:	4616      	mov	r6, r2
 800c9dc:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800c9e0:	b192      	cbz	r2, 800ca08 <rcl_publish+0x38>
 800c9e2:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800c9e6:	460d      	mov	r5, r1
 800c9e8:	f005 ffea 	bl	80129c0 <rcl_context_is_valid>
 800c9ec:	b160      	cbz	r0, 800ca08 <rcl_publish+0x38>
 800c9ee:	6823      	ldr	r3, [r4, #0]
 800c9f0:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800c9f4:	b140      	cbz	r0, 800ca08 <rcl_publish+0x38>
 800c9f6:	b155      	cbz	r5, 800ca0e <rcl_publish+0x3e>
 800c9f8:	4632      	mov	r2, r6
 800c9fa:	4629      	mov	r1, r5
 800c9fc:	f001 fd0e 	bl	800e41c <rmw_publish>
 800ca00:	3800      	subs	r0, #0
 800ca02:	bf18      	it	ne
 800ca04:	2001      	movne	r0, #1
 800ca06:	bd70      	pop	{r4, r5, r6, pc}
 800ca08:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ca0c:	bd70      	pop	{r4, r5, r6, pc}
 800ca0e:	200b      	movs	r0, #11
 800ca10:	bd70      	pop	{r4, r5, r6, pc}
 800ca12:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ca16:	4770      	bx	lr

0800ca18 <rcl_get_zero_initialized_subscription>:
 800ca18:	4b01      	ldr	r3, [pc, #4]	; (800ca20 <rcl_get_zero_initialized_subscription+0x8>)
 800ca1a:	6818      	ldr	r0, [r3, #0]
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop
 800ca20:	080193e8 	.word	0x080193e8

0800ca24 <rcl_subscription_init>:
 800ca24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca28:	b091      	sub	sp, #68	; 0x44
 800ca2a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ca2c:	b1d7      	cbz	r7, 800ca64 <rcl_subscription_init+0x40>
 800ca2e:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800ca32:	4604      	mov	r4, r0
 800ca34:	4648      	mov	r0, r9
 800ca36:	4688      	mov	r8, r1
 800ca38:	4616      	mov	r6, r2
 800ca3a:	461d      	mov	r5, r3
 800ca3c:	f000 fe54 	bl	800d6e8 <rcutils_allocator_is_valid>
 800ca40:	b180      	cbz	r0, 800ca64 <rcl_subscription_init+0x40>
 800ca42:	b17c      	cbz	r4, 800ca64 <rcl_subscription_init+0x40>
 800ca44:	4640      	mov	r0, r8
 800ca46:	f006 fc57 	bl	80132f8 <rcl_node_is_valid>
 800ca4a:	b380      	cbz	r0, 800caae <rcl_subscription_init+0x8a>
 800ca4c:	b156      	cbz	r6, 800ca64 <rcl_subscription_init+0x40>
 800ca4e:	b14d      	cbz	r5, 800ca64 <rcl_subscription_init+0x40>
 800ca50:	f8d4 a000 	ldr.w	sl, [r4]
 800ca54:	f1ba 0f00 	cmp.w	sl, #0
 800ca58:	d009      	beq.n	800ca6e <rcl_subscription_init+0x4a>
 800ca5a:	2564      	movs	r5, #100	; 0x64
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	b011      	add	sp, #68	; 0x44
 800ca60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca64:	250b      	movs	r5, #11
 800ca66:	4628      	mov	r0, r5
 800ca68:	b011      	add	sp, #68	; 0x44
 800ca6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca6e:	46ce      	mov	lr, r9
 800ca70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ca74:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800ca78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ca7c:	f8de 3000 	ldr.w	r3, [lr]
 800ca80:	f8cc 3000 	str.w	r3, [ip]
 800ca84:	f000 ff40 	bl	800d908 <rcutils_get_zero_initialized_string_map>
 800ca88:	ab10      	add	r3, sp, #64	; 0x40
 800ca8a:	4684      	mov	ip, r0
 800ca8c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800ca90:	f8cd c020 	str.w	ip, [sp, #32]
 800ca94:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ca98:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800ca9c:	4651      	mov	r1, sl
 800ca9e:	a808      	add	r0, sp, #32
 800caa0:	f000 ffac 	bl	800d9fc <rcutils_string_map_init>
 800caa4:	b140      	cbz	r0, 800cab8 <rcl_subscription_init+0x94>
 800caa6:	280a      	cmp	r0, #10
 800caa8:	d011      	beq.n	800cace <rcl_subscription_init+0xaa>
 800caaa:	2501      	movs	r5, #1
 800caac:	e7db      	b.n	800ca66 <rcl_subscription_init+0x42>
 800caae:	25c8      	movs	r5, #200	; 0xc8
 800cab0:	4628      	mov	r0, r5
 800cab2:	b011      	add	sp, #68	; 0x44
 800cab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab8:	a808      	add	r0, sp, #32
 800caba:	f006 f965 	bl	8012d88 <rcl_get_default_topic_name_substitutions>
 800cabe:	4682      	mov	sl, r0
 800cac0:	b138      	cbz	r0, 800cad2 <rcl_subscription_init+0xae>
 800cac2:	a808      	add	r0, sp, #32
 800cac4:	f000 ffda 	bl	800da7c <rcutils_string_map_fini>
 800cac8:	f1ba 0f0a 	cmp.w	sl, #10
 800cacc:	d1ed      	bne.n	800caaa <rcl_subscription_init+0x86>
 800cace:	250a      	movs	r5, #10
 800cad0:	e7c9      	b.n	800ca66 <rcl_subscription_init+0x42>
 800cad2:	4640      	mov	r0, r8
 800cad4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cad8:	f006 fc18 	bl	801330c <rcl_node_get_name>
 800cadc:	4682      	mov	sl, r0
 800cade:	4640      	mov	r0, r8
 800cae0:	f006 fc1c 	bl	801331c <rcl_node_get_namespace>
 800cae4:	4686      	mov	lr, r0
 800cae6:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800caea:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800caee:	46ec      	mov	ip, sp
 800caf0:	f8cd b014 	str.w	fp, [sp, #20]
 800caf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800caf8:	f8d9 3000 	ldr.w	r3, [r9]
 800cafc:	f8cc 3000 	str.w	r3, [ip]
 800cb00:	4628      	mov	r0, r5
 800cb02:	4651      	mov	r1, sl
 800cb04:	4672      	mov	r2, lr
 800cb06:	ab08      	add	r3, sp, #32
 800cb08:	f005 ffd8 	bl	8012abc <rcl_expand_topic_name>
 800cb0c:	4605      	mov	r5, r0
 800cb0e:	a808      	add	r0, sp, #32
 800cb10:	f000 ffb4 	bl	800da7c <rcutils_string_map_fini>
 800cb14:	b920      	cbnz	r0, 800cb20 <rcl_subscription_init+0xfc>
 800cb16:	b15d      	cbz	r5, 800cb30 <rcl_subscription_init+0x10c>
 800cb18:	2d67      	cmp	r5, #103	; 0x67
 800cb1a:	d002      	beq.n	800cb22 <rcl_subscription_init+0xfe>
 800cb1c:	2d69      	cmp	r5, #105	; 0x69
 800cb1e:	d05a      	beq.n	800cbd6 <rcl_subscription_init+0x1b2>
 800cb20:	2501      	movs	r5, #1
 800cb22:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb24:	2800      	cmp	r0, #0
 800cb26:	d09e      	beq.n	800ca66 <rcl_subscription_init+0x42>
 800cb28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb2a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cb2c:	4798      	blx	r3
 800cb2e:	e79a      	b.n	800ca66 <rcl_subscription_init+0x42>
 800cb30:	4640      	mov	r0, r8
 800cb32:	f006 fbfb 	bl	801332c <rcl_node_get_options>
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d0f2      	beq.n	800cb20 <rcl_subscription_init+0xfc>
 800cb3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb3c:	f7f3 fb52 	bl	80001e4 <strlen>
 800cb40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb42:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cb44:	3001      	adds	r0, #1
 800cb46:	4798      	blx	r3
 800cb48:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb4a:	9107      	str	r1, [sp, #28]
 800cb4c:	4681      	mov	r9, r0
 800cb4e:	4608      	mov	r0, r1
 800cb50:	f7f3 fb48 	bl	80001e4 <strlen>
 800cb54:	9907      	ldr	r1, [sp, #28]
 800cb56:	1c42      	adds	r2, r0, #1
 800cb58:	4648      	mov	r0, r9
 800cb5a:	f00a f90f 	bl	8016d7c <memcpy>
 800cb5e:	462a      	mov	r2, r5
 800cb60:	4648      	mov	r0, r9
 800cb62:	a90a      	add	r1, sp, #40	; 0x28
 800cb64:	f001 f87c 	bl	800dc60 <rmw_validate_full_topic_name>
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	d132      	bne.n	800cbd2 <rcl_subscription_init+0x1ae>
 800cb6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d133      	bne.n	800cbda <rcl_subscription_init+0x1b6>
 800cb72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb74:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cb76:	20c8      	movs	r0, #200	; 0xc8
 800cb78:	4798      	blx	r3
 800cb7a:	6020      	str	r0, [r4, #0]
 800cb7c:	b378      	cbz	r0, 800cbde <rcl_subscription_init+0x1ba>
 800cb7e:	4640      	mov	r0, r8
 800cb80:	f006 fbdc 	bl	801333c <rcl_node_get_rmw_handle>
 800cb84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	4631      	mov	r1, r6
 800cb8c:	463b      	mov	r3, r7
 800cb8e:	464a      	mov	r2, r9
 800cb90:	6825      	ldr	r5, [r4, #0]
 800cb92:	f001 fe0d 	bl	800e7b0 <rmw_create_subscription>
 800cb96:	6821      	ldr	r1, [r4, #0]
 800cb98:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800cb9c:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800cba0:	b368      	cbz	r0, 800cbfe <rcl_subscription_init+0x1da>
 800cba2:	3170      	adds	r1, #112	; 0x70
 800cba4:	f001 fef0 	bl	800e988 <rmw_subscription_get_actual_qos>
 800cba8:	4605      	mov	r5, r0
 800cbaa:	b9d0      	cbnz	r0, 800cbe2 <rcl_subscription_init+0x1be>
 800cbac:	6820      	ldr	r0, [r4, #0]
 800cbae:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800cbb2:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800cbb6:	2270      	movs	r2, #112	; 0x70
 800cbb8:	4639      	mov	r1, r7
 800cbba:	f00a f8df 	bl	8016d7c <memcpy>
 800cbbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbc0:	b110      	cbz	r0, 800cbc8 <rcl_subscription_init+0x1a4>
 800cbc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbc4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cbc6:	4798      	blx	r3
 800cbc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cbcc:	4648      	mov	r0, r9
 800cbce:	4798      	blx	r3
 800cbd0:	e749      	b.n	800ca66 <rcl_subscription_init+0x42>
 800cbd2:	2501      	movs	r5, #1
 800cbd4:	e7f3      	b.n	800cbbe <rcl_subscription_init+0x19a>
 800cbd6:	2567      	movs	r5, #103	; 0x67
 800cbd8:	e7a3      	b.n	800cb22 <rcl_subscription_init+0xfe>
 800cbda:	2567      	movs	r5, #103	; 0x67
 800cbdc:	e7ef      	b.n	800cbbe <rcl_subscription_init+0x19a>
 800cbde:	250a      	movs	r5, #10
 800cbe0:	e7ed      	b.n	800cbbe <rcl_subscription_init+0x19a>
 800cbe2:	6823      	ldr	r3, [r4, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d0f4      	beq.n	800cbd2 <rcl_subscription_init+0x1ae>
 800cbe8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800cbec:	b13b      	cbz	r3, 800cbfe <rcl_subscription_init+0x1da>
 800cbee:	4640      	mov	r0, r8
 800cbf0:	f006 fba4 	bl	801333c <rcl_node_get_rmw_handle>
 800cbf4:	6823      	ldr	r3, [r4, #0]
 800cbf6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800cbfa:	f001 fec7 	bl	800e98c <rmw_destroy_subscription>
 800cbfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc00:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cc02:	6820      	ldr	r0, [r4, #0]
 800cc04:	4798      	blx	r3
 800cc06:	2300      	movs	r3, #0
 800cc08:	6023      	str	r3, [r4, #0]
 800cc0a:	2501      	movs	r5, #1
 800cc0c:	e7d7      	b.n	800cbbe <rcl_subscription_init+0x19a>
 800cc0e:	bf00      	nop

0800cc10 <rcl_subscription_get_default_options>:
 800cc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc14:	4f12      	ldr	r7, [pc, #72]	; (800cc60 <rcl_subscription_get_default_options+0x50>)
 800cc16:	4913      	ldr	r1, [pc, #76]	; (800cc64 <rcl_subscription_get_default_options+0x54>)
 800cc18:	b088      	sub	sp, #32
 800cc1a:	4606      	mov	r6, r0
 800cc1c:	2250      	movs	r2, #80	; 0x50
 800cc1e:	4638      	mov	r0, r7
 800cc20:	f00a f8ac 	bl	8016d7c <memcpy>
 800cc24:	ac02      	add	r4, sp, #8
 800cc26:	a802      	add	r0, sp, #8
 800cc28:	f000 fd50 	bl	800d6cc <rcutils_get_default_allocator>
 800cc2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc2e:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800cc32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc34:	46e8      	mov	r8, sp
 800cc36:	6823      	ldr	r3, [r4, #0]
 800cc38:	602b      	str	r3, [r5, #0]
 800cc3a:	4640      	mov	r0, r8
 800cc3c:	f000 fffa 	bl	800dc34 <rmw_get_default_subscription_options>
 800cc40:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cc44:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cc48:	e883 0003 	stmia.w	r3, {r0, r1}
 800cc4c:	2270      	movs	r2, #112	; 0x70
 800cc4e:	4639      	mov	r1, r7
 800cc50:	4630      	mov	r0, r6
 800cc52:	f00a f893 	bl	8016d7c <memcpy>
 800cc56:	4630      	mov	r0, r6
 800cc58:	b008      	add	sp, #32
 800cc5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc5e:	bf00      	nop
 800cc60:	200101d0 	.word	0x200101d0
 800cc64:	080193f0 	.word	0x080193f0

0800cc68 <rcl_take>:
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d03f      	beq.n	800ccec <rcl_take+0x84>
 800cc6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc70:	4617      	mov	r7, r2
 800cc72:	6802      	ldr	r2, [r0, #0]
 800cc74:	b09d      	sub	sp, #116	; 0x74
 800cc76:	4606      	mov	r6, r0
 800cc78:	b382      	cbz	r2, 800ccdc <rcl_take+0x74>
 800cc7a:	4699      	mov	r9, r3
 800cc7c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800cc80:	b363      	cbz	r3, 800ccdc <rcl_take+0x74>
 800cc82:	4688      	mov	r8, r1
 800cc84:	b381      	cbz	r1, 800cce8 <rcl_take+0x80>
 800cc86:	2f00      	cmp	r7, #0
 800cc88:	d034      	beq.n	800ccf4 <rcl_take+0x8c>
 800cc8a:	a802      	add	r0, sp, #8
 800cc8c:	ac02      	add	r4, sp, #8
 800cc8e:	f000 ffd5 	bl	800dc3c <rmw_get_zero_initialized_message_info>
 800cc92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc94:	463d      	mov	r5, r7
 800cc96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc9c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cca0:	6834      	ldr	r4, [r6, #0]
 800cca2:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 800cca6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800ccaa:	2400      	movs	r4, #0
 800ccac:	463b      	mov	r3, r7
 800ccae:	4630      	mov	r0, r6
 800ccb0:	f8cd 9000 	str.w	r9, [sp]
 800ccb4:	4641      	mov	r1, r8
 800ccb6:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800ccba:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 800ccbe:	f001 feb3 	bl	800ea28 <rmw_take_with_info>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	b9c0      	cbnz	r0, 800ccf8 <rcl_take+0x90>
 800ccc6:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800ccca:	f240 1291 	movw	r2, #401	; 0x191
 800ccce:	2900      	cmp	r1, #0
 800ccd0:	bf08      	it	eq
 800ccd2:	4613      	moveq	r3, r2
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	b01d      	add	sp, #116	; 0x74
 800ccd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccdc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800cce0:	4618      	mov	r0, r3
 800cce2:	b01d      	add	sp, #116	; 0x74
 800cce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cce8:	230b      	movs	r3, #11
 800ccea:	e7f3      	b.n	800ccd4 <rcl_take+0x6c>
 800ccec:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	4770      	bx	lr
 800ccf4:	af10      	add	r7, sp, #64	; 0x40
 800ccf6:	e7c8      	b.n	800cc8a <rcl_take+0x22>
 800ccf8:	f005 fe3e 	bl	8012978 <rcl_convert_rmw_ret_to_rcl_ret>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	e7e9      	b.n	800ccd4 <rcl_take+0x6c>

0800cd00 <rcl_subscription_get_rmw_handle>:
 800cd00:	b118      	cbz	r0, 800cd0a <rcl_subscription_get_rmw_handle+0xa>
 800cd02:	6800      	ldr	r0, [r0, #0]
 800cd04:	b108      	cbz	r0, 800cd0a <rcl_subscription_get_rmw_handle+0xa>
 800cd06:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800cd0a:	4770      	bx	lr

0800cd0c <_rclc_check_for_new_data>:
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d042      	beq.n	800cd96 <_rclc_check_for_new_data+0x8a>
 800cd10:	b510      	push	{r4, lr}
 800cd12:	7803      	ldrb	r3, [r0, #0]
 800cd14:	b084      	sub	sp, #16
 800cd16:	4604      	mov	r4, r0
 800cd18:	2b08      	cmp	r3, #8
 800cd1a:	d847      	bhi.n	800cdac <_rclc_check_for_new_data+0xa0>
 800cd1c:	e8df f003 	tbb	[pc, r3]
 800cd20:	17251010 	.word	0x17251010
 800cd24:	05050517 	.word	0x05050517
 800cd28:	1e          	.byte	0x1e
 800cd29:	00          	.byte	0x00
 800cd2a:	6a0b      	ldr	r3, [r1, #32]
 800cd2c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cd2e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cd32:	b118      	cbz	r0, 800cd3c <_rclc_check_for_new_data+0x30>
 800cd34:	2301      	movs	r3, #1
 800cd36:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800cd3a:	2000      	movs	r0, #0
 800cd3c:	b004      	add	sp, #16
 800cd3e:	bd10      	pop	{r4, pc}
 800cd40:	680b      	ldr	r3, [r1, #0]
 800cd42:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cd44:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	d1f3      	bne.n	800cd34 <_rclc_check_for_new_data+0x28>
 800cd4c:	e7f6      	b.n	800cd3c <_rclc_check_for_new_data+0x30>
 800cd4e:	698b      	ldr	r3, [r1, #24]
 800cd50:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cd52:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cd56:	2800      	cmp	r0, #0
 800cd58:	d1ec      	bne.n	800cd34 <_rclc_check_for_new_data+0x28>
 800cd5a:	e7ef      	b.n	800cd3c <_rclc_check_for_new_data+0x30>
 800cd5c:	688b      	ldr	r3, [r1, #8]
 800cd5e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cd60:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cd64:	2800      	cmp	r0, #0
 800cd66:	d1e5      	bne.n	800cd34 <_rclc_check_for_new_data+0x28>
 800cd68:	e7e8      	b.n	800cd3c <_rclc_check_for_new_data+0x30>
 800cd6a:	690b      	ldr	r3, [r1, #16]
 800cd6c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cd6e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cd72:	2800      	cmp	r0, #0
 800cd74:	d0e2      	beq.n	800cd3c <_rclc_check_for_new_data+0x30>
 800cd76:	2300      	movs	r3, #0
 800cd78:	6860      	ldr	r0, [r4, #4]
 800cd7a:	f88d 300f 	strb.w	r3, [sp, #15]
 800cd7e:	f10d 010f 	add.w	r1, sp, #15
 800cd82:	f006 ff7b 	bl	8013c7c <rcl_timer_is_ready>
 800cd86:	b960      	cbnz	r0, 800cda2 <_rclc_check_for_new_data+0x96>
 800cd88:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800cd8c:	b12b      	cbz	r3, 800cd9a <_rclc_check_for_new_data+0x8e>
 800cd8e:	2301      	movs	r3, #1
 800cd90:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800cd94:	e7d2      	b.n	800cd3c <_rclc_check_for_new_data+0x30>
 800cd96:	200b      	movs	r0, #11
 800cd98:	4770      	bx	lr
 800cd9a:	f000 fd97 	bl	800d8cc <rcutils_reset_error>
 800cd9e:	2001      	movs	r0, #1
 800cda0:	e7cc      	b.n	800cd3c <_rclc_check_for_new_data+0x30>
 800cda2:	9001      	str	r0, [sp, #4]
 800cda4:	f000 fd92 	bl	800d8cc <rcutils_reset_error>
 800cda8:	9801      	ldr	r0, [sp, #4]
 800cdaa:	e7c7      	b.n	800cd3c <_rclc_check_for_new_data+0x30>
 800cdac:	2001      	movs	r0, #1
 800cdae:	e7c5      	b.n	800cd3c <_rclc_check_for_new_data+0x30>

0800cdb0 <_rclc_take_new_data>:
 800cdb0:	2800      	cmp	r0, #0
 800cdb2:	d049      	beq.n	800ce48 <_rclc_take_new_data+0x98>
 800cdb4:	b510      	push	{r4, lr}
 800cdb6:	7803      	ldrb	r3, [r0, #0]
 800cdb8:	b08e      	sub	sp, #56	; 0x38
 800cdba:	4604      	mov	r4, r0
 800cdbc:	2b08      	cmp	r3, #8
 800cdbe:	d84a      	bhi.n	800ce56 <_rclc_take_new_data+0xa6>
 800cdc0:	e8df f003 	tbb	[pc, r3]
 800cdc4:	2b121515 	.word	0x2b121515
 800cdc8:	0505052b 	.word	0x0505052b
 800cdcc:	12          	.byte	0x12
 800cdcd:	00          	.byte	0x00
 800cdce:	6a0b      	ldr	r3, [r1, #32]
 800cdd0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cdd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdd6:	b13b      	cbz	r3, 800cde8 <_rclc_take_new_data+0x38>
 800cdd8:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800cddc:	f104 0110 	add.w	r1, r4, #16
 800cde0:	f006 fbac 	bl	801353c <rcl_take_request>
 800cde4:	2800      	cmp	r0, #0
 800cde6:	d131      	bne.n	800ce4c <_rclc_take_new_data+0x9c>
 800cde8:	2000      	movs	r0, #0
 800cdea:	b00e      	add	sp, #56	; 0x38
 800cdec:	bd10      	pop	{r4, pc}
 800cdee:	680b      	ldr	r3, [r1, #0]
 800cdf0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cdf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d0f6      	beq.n	800cde8 <_rclc_take_new_data+0x38>
 800cdfa:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800cdfe:	2300      	movs	r3, #0
 800ce00:	aa02      	add	r2, sp, #8
 800ce02:	f7ff ff31 	bl	800cc68 <rcl_take>
 800ce06:	2800      	cmp	r0, #0
 800ce08:	d0ef      	beq.n	800cdea <_rclc_take_new_data+0x3a>
 800ce0a:	f240 1391 	movw	r3, #401	; 0x191
 800ce0e:	4298      	cmp	r0, r3
 800ce10:	d115      	bne.n	800ce3e <_rclc_take_new_data+0x8e>
 800ce12:	2300      	movs	r3, #0
 800ce14:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800ce18:	e7e7      	b.n	800cdea <_rclc_take_new_data+0x3a>
 800ce1a:	698b      	ldr	r3, [r1, #24]
 800ce1c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ce1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d0e0      	beq.n	800cde8 <_rclc_take_new_data+0x38>
 800ce26:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800ce2a:	f104 0110 	add.w	r1, r4, #16
 800ce2e:	f005 fd67 	bl	8012900 <rcl_take_response>
 800ce32:	2800      	cmp	r0, #0
 800ce34:	d0d8      	beq.n	800cde8 <_rclc_take_new_data+0x38>
 800ce36:	f240 13f5 	movw	r3, #501	; 0x1f5
 800ce3a:	4298      	cmp	r0, r3
 800ce3c:	d0d5      	beq.n	800cdea <_rclc_take_new_data+0x3a>
 800ce3e:	9001      	str	r0, [sp, #4]
 800ce40:	f000 fd44 	bl	800d8cc <rcutils_reset_error>
 800ce44:	9801      	ldr	r0, [sp, #4]
 800ce46:	e7d0      	b.n	800cdea <_rclc_take_new_data+0x3a>
 800ce48:	200b      	movs	r0, #11
 800ce4a:	4770      	bx	lr
 800ce4c:	f240 2359 	movw	r3, #601	; 0x259
 800ce50:	4298      	cmp	r0, r3
 800ce52:	d0de      	beq.n	800ce12 <_rclc_take_new_data+0x62>
 800ce54:	e7f3      	b.n	800ce3e <_rclc_take_new_data+0x8e>
 800ce56:	2001      	movs	r0, #1
 800ce58:	e7c7      	b.n	800cdea <_rclc_take_new_data+0x3a>
 800ce5a:	bf00      	nop

0800ce5c <_rclc_execute>:
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	d058      	beq.n	800cf12 <_rclc_execute+0xb6>
 800ce60:	b510      	push	{r4, lr}
 800ce62:	7843      	ldrb	r3, [r0, #1]
 800ce64:	b082      	sub	sp, #8
 800ce66:	4604      	mov	r4, r0
 800ce68:	b14b      	cbz	r3, 800ce7e <_rclc_execute+0x22>
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d017      	beq.n	800ce9e <_rclc_execute+0x42>
 800ce6e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800ce72:	b18b      	cbz	r3, 800ce98 <_rclc_execute+0x3c>
 800ce74:	2000      	movs	r0, #0
 800ce76:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 800ce7a:	b002      	add	sp, #8
 800ce7c:	bd10      	pop	{r4, pc}
 800ce7e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800ce82:	b14b      	cbz	r3, 800ce98 <_rclc_execute+0x3c>
 800ce84:	7803      	ldrb	r3, [r0, #0]
 800ce86:	2b08      	cmp	r3, #8
 800ce88:	d860      	bhi.n	800cf4c <_rclc_execute+0xf0>
 800ce8a:	e8df f003 	tbb	[pc, r3]
 800ce8e:	5128      	.short	0x5128
 800ce90:	122c2832 	.word	0x122c2832
 800ce94:	1212      	.short	0x1212
 800ce96:	38          	.byte	0x38
 800ce97:	00          	.byte	0x00
 800ce98:	2000      	movs	r0, #0
 800ce9a:	b002      	add	sp, #8
 800ce9c:	bd10      	pop	{r4, pc}
 800ce9e:	7803      	ldrb	r3, [r0, #0]
 800cea0:	2b08      	cmp	r3, #8
 800cea2:	d853      	bhi.n	800cf4c <_rclc_execute+0xf0>
 800cea4:	e8df f003 	tbb	[pc, r3]
 800cea8:	1b252e37 	.word	0x1b252e37
 800ceac:	0505051f 	.word	0x0505051f
 800ceb0:	2b          	.byte	0x2b
 800ceb1:	00          	.byte	0x00
 800ceb2:	2b06      	cmp	r3, #6
 800ceb4:	d041      	beq.n	800cf3a <_rclc_execute+0xde>
 800ceb6:	2b07      	cmp	r3, #7
 800ceb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ceba:	d133      	bne.n	800cf24 <_rclc_execute+0xc8>
 800cebc:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 800cec0:	68a0      	ldr	r0, [r4, #8]
 800cec2:	4798      	blx	r3
 800cec4:	f104 0110 	add.w	r1, r4, #16
 800cec8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ceca:	6860      	ldr	r0, [r4, #4]
 800cecc:	f006 fb6e 	bl	80135ac <rcl_send_response>
 800ced0:	2800      	cmp	r0, #0
 800ced2:	d0cc      	beq.n	800ce6e <_rclc_execute+0x12>
 800ced4:	9001      	str	r0, [sp, #4]
 800ced6:	f000 fcf9 	bl	800d8cc <rcutils_reset_error>
 800ceda:	9801      	ldr	r0, [sp, #4]
 800cedc:	e7cd      	b.n	800ce7a <_rclc_execute+0x1e>
 800cede:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cee0:	68a0      	ldr	r0, [r4, #8]
 800cee2:	4798      	blx	r3
 800cee4:	e7c3      	b.n	800ce6e <_rclc_execute+0x12>
 800cee6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cee8:	68a0      	ldr	r0, [r4, #8]
 800ceea:	f104 0110 	add.w	r1, r4, #16
 800ceee:	4798      	blx	r3
 800cef0:	e7bd      	b.n	800ce6e <_rclc_execute+0x12>
 800cef2:	6860      	ldr	r0, [r4, #4]
 800cef4:	f006 fe2e 	bl	8013b54 <rcl_timer_call>
 800cef8:	2800      	cmp	r0, #0
 800cefa:	d0b8      	beq.n	800ce6e <_rclc_execute+0x12>
 800cefc:	e7ea      	b.n	800ced4 <_rclc_execute+0x78>
 800cefe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cf00:	4798      	blx	r3
 800cf02:	e7b4      	b.n	800ce6e <_rclc_execute+0x12>
 800cf04:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800cf08:	b990      	cbnz	r0, 800cf30 <_rclc_execute+0xd4>
 800cf0a:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800cf0e:	4798      	blx	r3
 800cf10:	e7ad      	b.n	800ce6e <_rclc_execute+0x12>
 800cf12:	200b      	movs	r0, #11
 800cf14:	4770      	bx	lr
 800cf16:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	d1df      	bne.n	800cede <_rclc_execute+0x82>
 800cf1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cf20:	4798      	blx	r3
 800cf22:	e7a4      	b.n	800ce6e <_rclc_execute+0x12>
 800cf24:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800cf26:	68a0      	ldr	r0, [r4, #8]
 800cf28:	4798      	blx	r3
 800cf2a:	f104 0110 	add.w	r1, r4, #16
 800cf2e:	e7cb      	b.n	800cec8 <_rclc_execute+0x6c>
 800cf30:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800cf34:	68a0      	ldr	r0, [r4, #8]
 800cf36:	4798      	blx	r3
 800cf38:	e799      	b.n	800ce6e <_rclc_execute+0x12>
 800cf3a:	f104 0110 	add.w	r1, r4, #16
 800cf3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cf40:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800cf42:	68a0      	ldr	r0, [r4, #8]
 800cf44:	9101      	str	r1, [sp, #4]
 800cf46:	4798      	blx	r3
 800cf48:	9901      	ldr	r1, [sp, #4]
 800cf4a:	e7bd      	b.n	800cec8 <_rclc_execute+0x6c>
 800cf4c:	2001      	movs	r0, #1
 800cf4e:	e794      	b.n	800ce7a <_rclc_execute+0x1e>

0800cf50 <rclc_executor_trigger_any>:
 800cf50:	b170      	cbz	r0, 800cf70 <rclc_executor_trigger_any+0x20>
 800cf52:	b179      	cbz	r1, 800cf74 <rclc_executor_trigger_any+0x24>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2200      	movs	r2, #0
 800cf58:	e005      	b.n	800cf66 <rclc_executor_trigger_any+0x16>
 800cf5a:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800cf5e:	3340      	adds	r3, #64	; 0x40
 800cf60:	b930      	cbnz	r0, 800cf70 <rclc_executor_trigger_any+0x20>
 800cf62:	4291      	cmp	r1, r2
 800cf64:	d005      	beq.n	800cf72 <rclc_executor_trigger_any+0x22>
 800cf66:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800cf6a:	3201      	adds	r2, #1
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	d1f4      	bne.n	800cf5a <rclc_executor_trigger_any+0xa>
 800cf70:	4770      	bx	lr
 800cf72:	4770      	bx	lr
 800cf74:	4608      	mov	r0, r1
 800cf76:	e7fb      	b.n	800cf70 <rclc_executor_trigger_any+0x20>

0800cf78 <rclc_executor_init>:
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	d063      	beq.n	800d044 <rclc_executor_init+0xcc>
 800cf7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf80:	460f      	mov	r7, r1
 800cf82:	b0ae      	sub	sp, #184	; 0xb8
 800cf84:	2900      	cmp	r1, #0
 800cf86:	d055      	beq.n	800d034 <rclc_executor_init+0xbc>
 800cf88:	4605      	mov	r5, r0
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	4616      	mov	r6, r2
 800cf8e:	4698      	mov	r8, r3
 800cf90:	f000 fbaa 	bl	800d6e8 <rcutils_allocator_is_valid>
 800cf94:	2800      	cmp	r0, #0
 800cf96:	d04d      	beq.n	800d034 <rclc_executor_init+0xbc>
 800cf98:	2e00      	cmp	r6, #0
 800cf9a:	d04b      	beq.n	800d034 <rclc_executor_init+0xbc>
 800cf9c:	492e      	ldr	r1, [pc, #184]	; (800d058 <rclc_executor_init+0xe0>)
 800cf9e:	2280      	movs	r2, #128	; 0x80
 800cfa0:	a80e      	add	r0, sp, #56	; 0x38
 800cfa2:	f009 feeb 	bl	8016d7c <memcpy>
 800cfa6:	2400      	movs	r4, #0
 800cfa8:	a90e      	add	r1, sp, #56	; 0x38
 800cfaa:	2280      	movs	r2, #128	; 0x80
 800cfac:	4628      	mov	r0, r5
 800cfae:	f009 fee5 	bl	8016d7c <memcpy>
 800cfb2:	602f      	str	r7, [r5, #0]
 800cfb4:	4668      	mov	r0, sp
 800cfb6:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800cfba:	466f      	mov	r7, sp
 800cfbc:	f007 f824 	bl	8014008 <rcl_get_zero_initialized_wait_set>
 800cfc0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cfc2:	f105 0c14 	add.w	ip, r5, #20
 800cfc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cfca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cfcc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cfd0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cfd2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cfd6:	a31e      	add	r3, pc, #120	; (adr r3, 800d050 <rclc_executor_init+0xd8>)
 800cfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfdc:	6839      	ldr	r1, [r7, #0]
 800cfde:	f8cc 1000 	str.w	r1, [ip]
 800cfe2:	f8d8 7000 	ldr.w	r7, [r8]
 800cfe6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cfea:	f8c5 8010 	str.w	r8, [r5, #16]
 800cfee:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800cff2:	01b0      	lsls	r0, r6, #6
 800cff4:	47b8      	blx	r7
 800cff6:	6068      	str	r0, [r5, #4]
 800cff8:	b908      	cbnz	r0, 800cffe <rclc_executor_init+0x86>
 800cffa:	e025      	b.n	800d048 <rclc_executor_init+0xd0>
 800cffc:	6868      	ldr	r0, [r5, #4]
 800cffe:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d002:	4631      	mov	r1, r6
 800d004:	3401      	adds	r4, #1
 800d006:	f000 fa15 	bl	800d434 <rclc_executor_handle_init>
 800d00a:	42a6      	cmp	r6, r4
 800d00c:	d1f6      	bne.n	800cffc <rclc_executor_init+0x84>
 800d00e:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800d012:	f000 fa03 	bl	800d41c <rclc_executor_handle_counters_zero_init>
 800d016:	686b      	ldr	r3, [r5, #4]
 800d018:	4a10      	ldr	r2, [pc, #64]	; (800d05c <rclc_executor_init+0xe4>)
 800d01a:	672a      	str	r2, [r5, #112]	; 0x70
 800d01c:	2000      	movs	r0, #0
 800d01e:	6768      	str	r0, [r5, #116]	; 0x74
 800d020:	b163      	cbz	r3, 800d03c <rclc_executor_init+0xc4>
 800d022:	692b      	ldr	r3, [r5, #16]
 800d024:	b153      	cbz	r3, 800d03c <rclc_executor_init+0xc4>
 800d026:	68ab      	ldr	r3, [r5, #8]
 800d028:	b143      	cbz	r3, 800d03c <rclc_executor_init+0xc4>
 800d02a:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800d02e:	b02e      	add	sp, #184	; 0xb8
 800d030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d034:	200b      	movs	r0, #11
 800d036:	b02e      	add	sp, #184	; 0xb8
 800d038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d03c:	4618      	mov	r0, r3
 800d03e:	b02e      	add	sp, #184	; 0xb8
 800d040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d044:	200b      	movs	r0, #11
 800d046:	4770      	bx	lr
 800d048:	200a      	movs	r0, #10
 800d04a:	e7f4      	b.n	800d036 <rclc_executor_init+0xbe>
 800d04c:	f3af 8000 	nop.w
 800d050:	3b9aca00 	.word	0x3b9aca00
 800d054:	00000000 	.word	0x00000000
 800d058:	08019440 	.word	0x08019440
 800d05c:	0800cf51 	.word	0x0800cf51

0800d060 <rclc_executor_add_subscription>:
 800d060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d064:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800d068:	b358      	cbz	r0, 800d0c2 <rclc_executor_add_subscription+0x62>
 800d06a:	b351      	cbz	r1, 800d0c2 <rclc_executor_add_subscription+0x62>
 800d06c:	b34a      	cbz	r2, 800d0c2 <rclc_executor_add_subscription+0x62>
 800d06e:	b343      	cbz	r3, 800d0c2 <rclc_executor_add_subscription+0x62>
 800d070:	4604      	mov	r4, r0
 800d072:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800d076:	4285      	cmp	r5, r0
 800d078:	d302      	bcc.n	800d080 <rclc_executor_add_subscription+0x20>
 800d07a:	2001      	movs	r0, #1
 800d07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d080:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800d084:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800d088:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800d08c:	f04f 0c00 	mov.w	ip, #0
 800d090:	f80e c008 	strb.w	ip, [lr, r8]
 800d094:	2001      	movs	r0, #1
 800d096:	3501      	adds	r5, #1
 800d098:	f104 0814 	add.w	r8, r4, #20
 800d09c:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
 800d0a0:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800d0a4:	6333      	str	r3, [r6, #48]	; 0x30
 800d0a6:	7077      	strb	r7, [r6, #1]
 800d0a8:	f8c6 c02c 	str.w	ip, [r6, #44]	; 0x2c
 800d0ac:	4640      	mov	r0, r8
 800d0ae:	60e5      	str	r5, [r4, #12]
 800d0b0:	f006 ffbc 	bl	801402c <rcl_wait_set_is_valid>
 800d0b4:	b940      	cbnz	r0, 800d0c8 <rclc_executor_add_subscription+0x68>
 800d0b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	64a3      	str	r3, [r4, #72]	; 0x48
 800d0bc:	2000      	movs	r0, #0
 800d0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c2:	200b      	movs	r0, #11
 800d0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c8:	4640      	mov	r0, r8
 800d0ca:	f006 ffb5 	bl	8014038 <rcl_wait_set_fini>
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	d0f1      	beq.n	800d0b6 <rclc_executor_add_subscription+0x56>
 800d0d2:	e7d3      	b.n	800d07c <rclc_executor_add_subscription+0x1c>

0800d0d4 <rclc_executor_add_timer>:
 800d0d4:	b308      	cbz	r0, 800d11a <rclc_executor_add_timer+0x46>
 800d0d6:	b301      	cbz	r1, 800d11a <rclc_executor_add_timer+0x46>
 800d0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0da:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	4604      	mov	r4, r0
 800d0e2:	d301      	bcc.n	800d0e8 <rclc_executor_add_timer+0x14>
 800d0e4:	2001      	movs	r0, #1
 800d0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0e8:	6840      	ldr	r0, [r0, #4]
 800d0ea:	019d      	lsls	r5, r3, #6
 800d0ec:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800d0f0:	2702      	movs	r7, #2
 800d0f2:	6051      	str	r1, [r2, #4]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	5347      	strh	r7, [r0, r5]
 800d0f8:	2601      	movs	r6, #1
 800d0fa:	2100      	movs	r1, #0
 800d0fc:	f104 0514 	add.w	r5, r4, #20
 800d100:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
 800d104:	62d1      	str	r1, [r2, #44]	; 0x2c
 800d106:	4628      	mov	r0, r5
 800d108:	60e3      	str	r3, [r4, #12]
 800d10a:	f006 ff8f 	bl	801402c <rcl_wait_set_is_valid>
 800d10e:	b930      	cbnz	r0, 800d11e <rclc_executor_add_timer+0x4a>
 800d110:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d112:	3301      	adds	r3, #1
 800d114:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d116:	2000      	movs	r0, #0
 800d118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d11a:	200b      	movs	r0, #11
 800d11c:	4770      	bx	lr
 800d11e:	4628      	mov	r0, r5
 800d120:	f006 ff8a 	bl	8014038 <rcl_wait_set_fini>
 800d124:	2800      	cmp	r0, #0
 800d126:	d0f3      	beq.n	800d110 <rclc_executor_add_timer+0x3c>
 800d128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d12a:	bf00      	nop

0800d12c <rclc_executor_prepare>:
 800d12c:	2800      	cmp	r0, #0
 800d12e:	d03d      	beq.n	800d1ac <rclc_executor_prepare+0x80>
 800d130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d134:	f100 0814 	add.w	r8, r0, #20
 800d138:	b09a      	sub	sp, #104	; 0x68
 800d13a:	4604      	mov	r4, r0
 800d13c:	4640      	mov	r0, r8
 800d13e:	f006 ff75 	bl	801402c <rcl_wait_set_is_valid>
 800d142:	b118      	cbz	r0, 800d14c <rclc_executor_prepare+0x20>
 800d144:	2000      	movs	r0, #0
 800d146:	b01a      	add	sp, #104	; 0x68
 800d148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d14c:	4640      	mov	r0, r8
 800d14e:	f006 ff73 	bl	8014038 <rcl_wait_set_fini>
 800d152:	2800      	cmp	r0, #0
 800d154:	d127      	bne.n	800d1a6 <rclc_executor_prepare+0x7a>
 800d156:	a80c      	add	r0, sp, #48	; 0x30
 800d158:	ad0c      	add	r5, sp, #48	; 0x30
 800d15a:	f006 ff55 	bl	8014008 <rcl_get_zero_initialized_wait_set>
 800d15e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d160:	4646      	mov	r6, r8
 800d162:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d166:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d16a:	6927      	ldr	r7, [r4, #16]
 800d16c:	682d      	ldr	r5, [r5, #0]
 800d16e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d170:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d172:	6035      	str	r5, [r6, #0]
 800d174:	ad04      	add	r5, sp, #16
 800d176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d178:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800d17c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d17e:	6826      	ldr	r6, [r4, #0]
 800d180:	6838      	ldr	r0, [r7, #0]
 800d182:	6028      	str	r0, [r5, #0]
 800d184:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800d188:	e9cd 3200 	strd	r3, r2, [sp]
 800d18c:	4640      	mov	r0, r8
 800d18e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d190:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800d192:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d194:	f007 fa6e 	bl	8014674 <rcl_wait_set_init>
 800d198:	2800      	cmp	r0, #0
 800d19a:	d0d4      	beq.n	800d146 <rclc_executor_prepare+0x1a>
 800d19c:	900b      	str	r0, [sp, #44]	; 0x2c
 800d19e:	f000 fb95 	bl	800d8cc <rcutils_reset_error>
 800d1a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d1a4:	e7cf      	b.n	800d146 <rclc_executor_prepare+0x1a>
 800d1a6:	f000 fb91 	bl	800d8cc <rcutils_reset_error>
 800d1aa:	e7d4      	b.n	800d156 <rclc_executor_prepare+0x2a>
 800d1ac:	200b      	movs	r0, #11
 800d1ae:	4770      	bx	lr

0800d1b0 <rclc_executor_spin_some.part.0>:
 800d1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b4:	f100 0814 	add.w	r8, r0, #20
 800d1b8:	b083      	sub	sp, #12
 800d1ba:	4692      	mov	sl, r2
 800d1bc:	4699      	mov	r9, r3
 800d1be:	4605      	mov	r5, r0
 800d1c0:	f7ff ffb4 	bl	800d12c <rclc_executor_prepare>
 800d1c4:	4640      	mov	r0, r8
 800d1c6:	f007 f803 	bl	80141d0 <rcl_wait_set_clear>
 800d1ca:	4607      	mov	r7, r0
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	f040 80ad 	bne.w	800d32c <rclc_executor_spin_some.part.0+0x17c>
 800d1d2:	68ab      	ldr	r3, [r5, #8]
 800d1d4:	4604      	mov	r4, r0
 800d1d6:	b1eb      	cbz	r3, 800d214 <rclc_executor_spin_some.part.0+0x64>
 800d1d8:	686e      	ldr	r6, [r5, #4]
 800d1da:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800d1de:	01a2      	lsls	r2, r4, #6
 800d1e0:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800d1e4:	b1b3      	cbz	r3, 800d214 <rclc_executor_spin_some.part.0+0x64>
 800d1e6:	5cb3      	ldrb	r3, [r6, r2]
 800d1e8:	2b08      	cmp	r3, #8
 800d1ea:	f200 8098 	bhi.w	800d31e <rclc_executor_spin_some.part.0+0x16e>
 800d1ee:	e8df f003 	tbb	[pc, r3]
 800d1f2:	7a7a      	.short	0x7a7a
 800d1f4:	056c6c83 	.word	0x056c6c83
 800d1f8:	0505      	.short	0x0505
 800d1fa:	8c          	.byte	0x8c
 800d1fb:	00          	.byte	0x00
 800d1fc:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d200:	4640      	mov	r0, r8
 800d202:	6849      	ldr	r1, [r1, #4]
 800d204:	f007 fb4c 	bl	80148a0 <rcl_wait_set_add_service>
 800d208:	2800      	cmp	r0, #0
 800d20a:	d166      	bne.n	800d2da <rclc_executor_spin_some.part.0+0x12a>
 800d20c:	68ab      	ldr	r3, [r5, #8]
 800d20e:	3401      	adds	r4, #1
 800d210:	429c      	cmp	r4, r3
 800d212:	d3e1      	bcc.n	800d1d8 <rclc_executor_spin_some.part.0+0x28>
 800d214:	464b      	mov	r3, r9
 800d216:	4652      	mov	r2, sl
 800d218:	4640      	mov	r0, r8
 800d21a:	f007 fb6d 	bl	80148f8 <rcl_wait>
 800d21e:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800d222:	2b00      	cmp	r3, #0
 800d224:	f000 8088 	beq.w	800d338 <rclc_executor_spin_some.part.0+0x188>
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d178      	bne.n	800d31e <rclc_executor_spin_some.part.0+0x16e>
 800d22c:	68ab      	ldr	r3, [r5, #8]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	f000 80cd 	beq.w	800d3ce <rclc_executor_spin_some.part.0+0x21e>
 800d234:	2400      	movs	r4, #0
 800d236:	4626      	mov	r6, r4
 800d238:	f240 1991 	movw	r9, #401	; 0x191
 800d23c:	e009      	b.n	800d252 <rclc_executor_spin_some.part.0+0xa2>
 800d23e:	f7ff fd65 	bl	800cd0c <_rclc_check_for_new_data>
 800d242:	4604      	mov	r4, r0
 800d244:	b108      	cbz	r0, 800d24a <rclc_executor_spin_some.part.0+0x9a>
 800d246:	4548      	cmp	r0, r9
 800d248:	d13d      	bne.n	800d2c6 <rclc_executor_spin_some.part.0+0x116>
 800d24a:	68ab      	ldr	r3, [r5, #8]
 800d24c:	429e      	cmp	r6, r3
 800d24e:	f080 80c3 	bcs.w	800d3d8 <rclc_executor_spin_some.part.0+0x228>
 800d252:	686a      	ldr	r2, [r5, #4]
 800d254:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d258:	4641      	mov	r1, r8
 800d25a:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800d25e:	3601      	adds	r6, #1
 800d260:	f1bc 0f00 	cmp.w	ip, #0
 800d264:	d1eb      	bne.n	800d23e <rclc_executor_spin_some.part.0+0x8e>
 800d266:	4619      	mov	r1, r3
 800d268:	4610      	mov	r0, r2
 800d26a:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800d26e:	4798      	blx	r3
 800d270:	b348      	cbz	r0, 800d2c6 <rclc_executor_spin_some.part.0+0x116>
 800d272:	68ab      	ldr	r3, [r5, #8]
 800d274:	b33b      	cbz	r3, 800d2c6 <rclc_executor_spin_some.part.0+0x116>
 800d276:	2600      	movs	r6, #0
 800d278:	f240 1991 	movw	r9, #401	; 0x191
 800d27c:	e008      	b.n	800d290 <rclc_executor_spin_some.part.0+0xe0>
 800d27e:	f7ff fd97 	bl	800cdb0 <_rclc_take_new_data>
 800d282:	4604      	mov	r4, r0
 800d284:	b108      	cbz	r0, 800d28a <rclc_executor_spin_some.part.0+0xda>
 800d286:	4548      	cmp	r0, r9
 800d288:	d11d      	bne.n	800d2c6 <rclc_executor_spin_some.part.0+0x116>
 800d28a:	68ab      	ldr	r3, [r5, #8]
 800d28c:	429e      	cmp	r6, r3
 800d28e:	d208      	bcs.n	800d2a2 <rclc_executor_spin_some.part.0+0xf2>
 800d290:	6868      	ldr	r0, [r5, #4]
 800d292:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800d296:	4641      	mov	r1, r8
 800d298:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800d29c:	3601      	adds	r6, #1
 800d29e:	2a00      	cmp	r2, #0
 800d2a0:	d1ed      	bne.n	800d27e <rclc_executor_spin_some.part.0+0xce>
 800d2a2:	2600      	movs	r6, #0
 800d2a4:	b93b      	cbnz	r3, 800d2b6 <rclc_executor_spin_some.part.0+0x106>
 800d2a6:	e00e      	b.n	800d2c6 <rclc_executor_spin_some.part.0+0x116>
 800d2a8:	f7ff fdd8 	bl	800ce5c <_rclc_execute>
 800d2ac:	4604      	mov	r4, r0
 800d2ae:	b950      	cbnz	r0, 800d2c6 <rclc_executor_spin_some.part.0+0x116>
 800d2b0:	68ab      	ldr	r3, [r5, #8]
 800d2b2:	429e      	cmp	r6, r3
 800d2b4:	d236      	bcs.n	800d324 <rclc_executor_spin_some.part.0+0x174>
 800d2b6:	6868      	ldr	r0, [r5, #4]
 800d2b8:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800d2bc:	3601      	adds	r6, #1
 800d2be:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1f0      	bne.n	800d2a8 <rclc_executor_spin_some.part.0+0xf8>
 800d2c6:	4627      	mov	r7, r4
 800d2c8:	e02c      	b.n	800d324 <rclc_executor_spin_some.part.0+0x174>
 800d2ca:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d2ce:	4640      	mov	r0, r8
 800d2d0:	6849      	ldr	r1, [r1, #4]
 800d2d2:	f007 fab9 	bl	8014848 <rcl_wait_set_add_client>
 800d2d6:	2800      	cmp	r0, #0
 800d2d8:	d098      	beq.n	800d20c <rclc_executor_spin_some.part.0+0x5c>
 800d2da:	9001      	str	r0, [sp, #4]
 800d2dc:	f000 faf6 	bl	800d8cc <rcutils_reset_error>
 800d2e0:	9801      	ldr	r0, [sp, #4]
 800d2e2:	4607      	mov	r7, r0
 800d2e4:	e01e      	b.n	800d324 <rclc_executor_spin_some.part.0+0x174>
 800d2e6:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d2ea:	4640      	mov	r0, r8
 800d2ec:	6849      	ldr	r1, [r1, #4]
 800d2ee:	f006 ff43 	bl	8014178 <rcl_wait_set_add_subscription>
 800d2f2:	2800      	cmp	r0, #0
 800d2f4:	d08a      	beq.n	800d20c <rclc_executor_spin_some.part.0+0x5c>
 800d2f6:	e7f0      	b.n	800d2da <rclc_executor_spin_some.part.0+0x12a>
 800d2f8:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d2fc:	4640      	mov	r0, r8
 800d2fe:	6849      	ldr	r1, [r1, #4]
 800d300:	f007 fa72 	bl	80147e8 <rcl_wait_set_add_timer>
 800d304:	2800      	cmp	r0, #0
 800d306:	d081      	beq.n	800d20c <rclc_executor_spin_some.part.0+0x5c>
 800d308:	e7e7      	b.n	800d2da <rclc_executor_spin_some.part.0+0x12a>
 800d30a:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d30e:	4640      	mov	r0, r8
 800d310:	6849      	ldr	r1, [r1, #4]
 800d312:	f007 fa3d 	bl	8014790 <rcl_wait_set_add_guard_condition>
 800d316:	2800      	cmp	r0, #0
 800d318:	f43f af78 	beq.w	800d20c <rclc_executor_spin_some.part.0+0x5c>
 800d31c:	e7dd      	b.n	800d2da <rclc_executor_spin_some.part.0+0x12a>
 800d31e:	f000 fad5 	bl	800d8cc <rcutils_reset_error>
 800d322:	2701      	movs	r7, #1
 800d324:	4638      	mov	r0, r7
 800d326:	b003      	add	sp, #12
 800d328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d32c:	f000 face 	bl	800d8cc <rcutils_reset_error>
 800d330:	4638      	mov	r0, r7
 800d332:	b003      	add	sp, #12
 800d334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d338:	68ab      	ldr	r3, [r5, #8]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d04e      	beq.n	800d3dc <rclc_executor_spin_some.part.0+0x22c>
 800d33e:	2400      	movs	r4, #0
 800d340:	4626      	mov	r6, r4
 800d342:	f240 1991 	movw	r9, #401	; 0x191
 800d346:	e008      	b.n	800d35a <rclc_executor_spin_some.part.0+0x1aa>
 800d348:	f7ff fce0 	bl	800cd0c <_rclc_check_for_new_data>
 800d34c:	4604      	mov	r4, r0
 800d34e:	b108      	cbz	r0, 800d354 <rclc_executor_spin_some.part.0+0x1a4>
 800d350:	4548      	cmp	r0, r9
 800d352:	d1b8      	bne.n	800d2c6 <rclc_executor_spin_some.part.0+0x116>
 800d354:	68ab      	ldr	r3, [r5, #8]
 800d356:	429e      	cmp	r6, r3
 800d358:	d23c      	bcs.n	800d3d4 <rclc_executor_spin_some.part.0+0x224>
 800d35a:	686a      	ldr	r2, [r5, #4]
 800d35c:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d360:	4641      	mov	r1, r8
 800d362:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800d366:	3601      	adds	r6, #1
 800d368:	f1bc 0f00 	cmp.w	ip, #0
 800d36c:	d1ec      	bne.n	800d348 <rclc_executor_spin_some.part.0+0x198>
 800d36e:	4619      	mov	r1, r3
 800d370:	4610      	mov	r0, r2
 800d372:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800d376:	4798      	blx	r3
 800d378:	2800      	cmp	r0, #0
 800d37a:	d0a4      	beq.n	800d2c6 <rclc_executor_spin_some.part.0+0x116>
 800d37c:	68ab      	ldr	r3, [r5, #8]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d0a1      	beq.n	800d2c6 <rclc_executor_spin_some.part.0+0x116>
 800d382:	f04f 0a00 	mov.w	sl, #0
 800d386:	f240 1691 	movw	r6, #401	; 0x191
 800d38a:	f240 2959 	movw	r9, #601	; 0x259
 800d38e:	e010      	b.n	800d3b2 <rclc_executor_spin_some.part.0+0x202>
 800d390:	f7ff fd0e 	bl	800cdb0 <_rclc_take_new_data>
 800d394:	b118      	cbz	r0, 800d39e <rclc_executor_spin_some.part.0+0x1ee>
 800d396:	42b0      	cmp	r0, r6
 800d398:	d001      	beq.n	800d39e <rclc_executor_spin_some.part.0+0x1ee>
 800d39a:	4548      	cmp	r0, r9
 800d39c:	d121      	bne.n	800d3e2 <rclc_executor_spin_some.part.0+0x232>
 800d39e:	6868      	ldr	r0, [r5, #4]
 800d3a0:	4458      	add	r0, fp
 800d3a2:	f7ff fd5b 	bl	800ce5c <_rclc_execute>
 800d3a6:	4604      	mov	r4, r0
 800d3a8:	2800      	cmp	r0, #0
 800d3aa:	d18c      	bne.n	800d2c6 <rclc_executor_spin_some.part.0+0x116>
 800d3ac:	68ab      	ldr	r3, [r5, #8]
 800d3ae:	459a      	cmp	sl, r3
 800d3b0:	d2b8      	bcs.n	800d324 <rclc_executor_spin_some.part.0+0x174>
 800d3b2:	6868      	ldr	r0, [r5, #4]
 800d3b4:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800d3b8:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800d3bc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800d3c0:	4641      	mov	r1, r8
 800d3c2:	f10a 0a01 	add.w	sl, sl, #1
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d1e2      	bne.n	800d390 <rclc_executor_spin_some.part.0+0x1e0>
 800d3ca:	4627      	mov	r7, r4
 800d3cc:	e7aa      	b.n	800d324 <rclc_executor_spin_some.part.0+0x174>
 800d3ce:	686a      	ldr	r2, [r5, #4]
 800d3d0:	461c      	mov	r4, r3
 800d3d2:	e748      	b.n	800d266 <rclc_executor_spin_some.part.0+0xb6>
 800d3d4:	686a      	ldr	r2, [r5, #4]
 800d3d6:	e7ca      	b.n	800d36e <rclc_executor_spin_some.part.0+0x1be>
 800d3d8:	686a      	ldr	r2, [r5, #4]
 800d3da:	e744      	b.n	800d266 <rclc_executor_spin_some.part.0+0xb6>
 800d3dc:	686a      	ldr	r2, [r5, #4]
 800d3de:	461c      	mov	r4, r3
 800d3e0:	e7c5      	b.n	800d36e <rclc_executor_spin_some.part.0+0x1be>
 800d3e2:	4607      	mov	r7, r0
 800d3e4:	e79e      	b.n	800d324 <rclc_executor_spin_some.part.0+0x174>
 800d3e6:	bf00      	nop

0800d3e8 <rclc_executor_spin>:
 800d3e8:	b1a8      	cbz	r0, 800d416 <rclc_executor_spin+0x2e>
 800d3ea:	b5d0      	push	{r4, r6, r7, lr}
 800d3ec:	4604      	mov	r4, r0
 800d3ee:	6820      	ldr	r0, [r4, #0]
 800d3f0:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 800d3f4:	f005 fae4 	bl	80129c0 <rcl_context_is_valid>
 800d3f8:	4601      	mov	r1, r0
 800d3fa:	4632      	mov	r2, r6
 800d3fc:	463b      	mov	r3, r7
 800d3fe:	4620      	mov	r0, r4
 800d400:	b129      	cbz	r1, 800d40e <rclc_executor_spin+0x26>
 800d402:	f7ff fed5 	bl	800d1b0 <rclc_executor_spin_some.part.0>
 800d406:	f030 0302 	bics.w	r3, r0, #2
 800d40a:	d0f0      	beq.n	800d3ee <rclc_executor_spin+0x6>
 800d40c:	bdd0      	pop	{r4, r6, r7, pc}
 800d40e:	f000 fa5d 	bl	800d8cc <rcutils_reset_error>
 800d412:	2001      	movs	r0, #1
 800d414:	bdd0      	pop	{r4, r6, r7, pc}
 800d416:	200b      	movs	r0, #11
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop

0800d41c <rclc_executor_handle_counters_zero_init>:
 800d41c:	b140      	cbz	r0, 800d430 <rclc_executor_handle_counters_zero_init+0x14>
 800d41e:	2300      	movs	r3, #0
 800d420:	6003      	str	r3, [r0, #0]
 800d422:	6043      	str	r3, [r0, #4]
 800d424:	6083      	str	r3, [r0, #8]
 800d426:	60c3      	str	r3, [r0, #12]
 800d428:	6103      	str	r3, [r0, #16]
 800d42a:	6143      	str	r3, [r0, #20]
 800d42c:	4618      	mov	r0, r3
 800d42e:	4770      	bx	lr
 800d430:	200b      	movs	r0, #11
 800d432:	4770      	bx	lr

0800d434 <rclc_executor_handle_init>:
 800d434:	b178      	cbz	r0, 800d456 <rclc_executor_handle_init+0x22>
 800d436:	b430      	push	{r4, r5}
 800d438:	4603      	mov	r3, r0
 800d43a:	2209      	movs	r2, #9
 800d43c:	2000      	movs	r0, #0
 800d43e:	2400      	movs	r4, #0
 800d440:	2500      	movs	r5, #0
 800d442:	801a      	strh	r2, [r3, #0]
 800d444:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800d448:	bc30      	pop	{r4, r5}
 800d44a:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800d44e:	6359      	str	r1, [r3, #52]	; 0x34
 800d450:	6318      	str	r0, [r3, #48]	; 0x30
 800d452:	8718      	strh	r0, [r3, #56]	; 0x38
 800d454:	4770      	bx	lr
 800d456:	200b      	movs	r0, #11
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop

0800d45c <rclc_support_init_with_options>:
 800d45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d460:	b084      	sub	sp, #16
 800d462:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800d466:	b390      	cbz	r0, 800d4ce <rclc_support_init_with_options+0x72>
 800d468:	461c      	mov	r4, r3
 800d46a:	b383      	cbz	r3, 800d4ce <rclc_support_init_with_options+0x72>
 800d46c:	f1b8 0f00 	cmp.w	r8, #0
 800d470:	d02d      	beq.n	800d4ce <rclc_support_init_with_options+0x72>
 800d472:	4605      	mov	r5, r0
 800d474:	460e      	mov	r6, r1
 800d476:	4617      	mov	r7, r2
 800d478:	f7ff f82a 	bl	800c4d0 <rcl_get_zero_initialized_init_options>
 800d47c:	4629      	mov	r1, r5
 800d47e:	6028      	str	r0, [r5, #0]
 800d480:	4620      	mov	r0, r4
 800d482:	f7ff f89d 	bl	800c5c0 <rcl_init_options_copy>
 800d486:	4604      	mov	r4, r0
 800d488:	b9d8      	cbnz	r0, 800d4c2 <rclc_support_init_with_options+0x66>
 800d48a:	466c      	mov	r4, sp
 800d48c:	4620      	mov	r0, r4
 800d48e:	f005 fa87 	bl	80129a0 <rcl_get_zero_initialized_context>
 800d492:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d496:	f105 0408 	add.w	r4, r5, #8
 800d49a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d49e:	4623      	mov	r3, r4
 800d4a0:	4639      	mov	r1, r7
 800d4a2:	4630      	mov	r0, r6
 800d4a4:	462a      	mov	r2, r5
 800d4a6:	f005 fc75 	bl	8012d94 <rcl_init>
 800d4aa:	4604      	mov	r4, r0
 800d4ac:	b948      	cbnz	r0, 800d4c2 <rclc_support_init_with_options+0x66>
 800d4ae:	f8c5 8018 	str.w	r8, [r5, #24]
 800d4b2:	4642      	mov	r2, r8
 800d4b4:	f105 011c 	add.w	r1, r5, #28
 800d4b8:	2003      	movs	r0, #3
 800d4ba:	f006 f8a5 	bl	8013608 <rcl_clock_init>
 800d4be:	4604      	mov	r4, r0
 800d4c0:	b108      	cbz	r0, 800d4c6 <rclc_support_init_with_options+0x6a>
 800d4c2:	f000 fa03 	bl	800d8cc <rcutils_reset_error>
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	b004      	add	sp, #16
 800d4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ce:	240b      	movs	r4, #11
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	b004      	add	sp, #16
 800d4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d4d8 <rclc_node_init_with_options>:
 800d4d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4dc:	b087      	sub	sp, #28
 800d4de:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800d4e0:	b1e0      	cbz	r0, 800d51c <rclc_node_init_with_options+0x44>
 800d4e2:	460d      	mov	r5, r1
 800d4e4:	b1d1      	cbz	r1, 800d51c <rclc_node_init_with_options+0x44>
 800d4e6:	4616      	mov	r6, r2
 800d4e8:	b1c2      	cbz	r2, 800d51c <rclc_node_init_with_options+0x44>
 800d4ea:	4698      	mov	r8, r3
 800d4ec:	b1b3      	cbz	r3, 800d51c <rclc_node_init_with_options+0x44>
 800d4ee:	b1af      	cbz	r7, 800d51c <rclc_node_init_with_options+0x44>
 800d4f0:	f10d 0910 	add.w	r9, sp, #16
 800d4f4:	4604      	mov	r4, r0
 800d4f6:	4648      	mov	r0, r9
 800d4f8:	f005 fd84 	bl	8013004 <rcl_get_zero_initialized_node>
 800d4fc:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d500:	f108 0308 	add.w	r3, r8, #8
 800d504:	9700      	str	r7, [sp, #0]
 800d506:	4632      	mov	r2, r6
 800d508:	e884 0003 	stmia.w	r4, {r0, r1}
 800d50c:	4629      	mov	r1, r5
 800d50e:	4620      	mov	r0, r4
 800d510:	f005 fd82 	bl	8013018 <rcl_node_init>
 800d514:	b930      	cbnz	r0, 800d524 <rclc_node_init_with_options+0x4c>
 800d516:	b007      	add	sp, #28
 800d518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d51c:	200b      	movs	r0, #11
 800d51e:	b007      	add	sp, #28
 800d520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d524:	9003      	str	r0, [sp, #12]
 800d526:	f000 f9d1 	bl	800d8cc <rcutils_reset_error>
 800d52a:	9803      	ldr	r0, [sp, #12]
 800d52c:	b007      	add	sp, #28
 800d52e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d532:	bf00      	nop

0800d534 <rclc_publisher_init_default>:
 800d534:	b368      	cbz	r0, 800d592 <rclc_publisher_init_default+0x5e>
 800d536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d53a:	460d      	mov	r5, r1
 800d53c:	b09e      	sub	sp, #120	; 0x78
 800d53e:	b321      	cbz	r1, 800d58a <rclc_publisher_init_default+0x56>
 800d540:	4616      	mov	r6, r2
 800d542:	b312      	cbz	r2, 800d58a <rclc_publisher_init_default+0x56>
 800d544:	461f      	mov	r7, r3
 800d546:	b303      	cbz	r3, 800d58a <rclc_publisher_init_default+0x56>
 800d548:	4604      	mov	r4, r0
 800d54a:	f7ff f923 	bl	800c794 <rcl_get_zero_initialized_publisher>
 800d54e:	f10d 0810 	add.w	r8, sp, #16
 800d552:	6020      	str	r0, [r4, #0]
 800d554:	4640      	mov	r0, r8
 800d556:	f7ff fa19 	bl	800c98c <rcl_publisher_get_default_options>
 800d55a:	490f      	ldr	r1, [pc, #60]	; (800d598 <rclc_publisher_init_default+0x64>)
 800d55c:	2250      	movs	r2, #80	; 0x50
 800d55e:	4640      	mov	r0, r8
 800d560:	f009 fc0c 	bl	8016d7c <memcpy>
 800d564:	f8cd 8000 	str.w	r8, [sp]
 800d568:	463b      	mov	r3, r7
 800d56a:	4632      	mov	r2, r6
 800d56c:	4629      	mov	r1, r5
 800d56e:	4620      	mov	r0, r4
 800d570:	f7ff f916 	bl	800c7a0 <rcl_publisher_init>
 800d574:	b910      	cbnz	r0, 800d57c <rclc_publisher_init_default+0x48>
 800d576:	b01e      	add	sp, #120	; 0x78
 800d578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d57c:	9003      	str	r0, [sp, #12]
 800d57e:	f000 f9a5 	bl	800d8cc <rcutils_reset_error>
 800d582:	9803      	ldr	r0, [sp, #12]
 800d584:	b01e      	add	sp, #120	; 0x78
 800d586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d58a:	200b      	movs	r0, #11
 800d58c:	b01e      	add	sp, #120	; 0x78
 800d58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d592:	200b      	movs	r0, #11
 800d594:	4770      	bx	lr
 800d596:	bf00      	nop
 800d598:	080194c0 	.word	0x080194c0

0800d59c <rclc_subscription_init_best_effort>:
 800d59c:	b368      	cbz	r0, 800d5fa <rclc_subscription_init_best_effort+0x5e>
 800d59e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a2:	460d      	mov	r5, r1
 800d5a4:	b0a0      	sub	sp, #128	; 0x80
 800d5a6:	b321      	cbz	r1, 800d5f2 <rclc_subscription_init_best_effort+0x56>
 800d5a8:	4616      	mov	r6, r2
 800d5aa:	b312      	cbz	r2, 800d5f2 <rclc_subscription_init_best_effort+0x56>
 800d5ac:	461f      	mov	r7, r3
 800d5ae:	b303      	cbz	r3, 800d5f2 <rclc_subscription_init_best_effort+0x56>
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	f7ff fa31 	bl	800ca18 <rcl_get_zero_initialized_subscription>
 800d5b6:	f10d 0810 	add.w	r8, sp, #16
 800d5ba:	6020      	str	r0, [r4, #0]
 800d5bc:	4640      	mov	r0, r8
 800d5be:	f7ff fb27 	bl	800cc10 <rcl_subscription_get_default_options>
 800d5c2:	490f      	ldr	r1, [pc, #60]	; (800d600 <rclc_subscription_init_best_effort+0x64>)
 800d5c4:	2250      	movs	r2, #80	; 0x50
 800d5c6:	4640      	mov	r0, r8
 800d5c8:	f009 fbd8 	bl	8016d7c <memcpy>
 800d5cc:	f8cd 8000 	str.w	r8, [sp]
 800d5d0:	463b      	mov	r3, r7
 800d5d2:	4632      	mov	r2, r6
 800d5d4:	4629      	mov	r1, r5
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	f7ff fa24 	bl	800ca24 <rcl_subscription_init>
 800d5dc:	b910      	cbnz	r0, 800d5e4 <rclc_subscription_init_best_effort+0x48>
 800d5de:	b020      	add	sp, #128	; 0x80
 800d5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5e4:	9003      	str	r0, [sp, #12]
 800d5e6:	f000 f971 	bl	800d8cc <rcutils_reset_error>
 800d5ea:	9803      	ldr	r0, [sp, #12]
 800d5ec:	b020      	add	sp, #128	; 0x80
 800d5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5f2:	200b      	movs	r0, #11
 800d5f4:	b020      	add	sp, #128	; 0x80
 800d5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5fa:	200b      	movs	r0, #11
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	08019510 	.word	0x08019510

0800d604 <rclc_timer_init_default>:
 800d604:	b350      	cbz	r0, 800d65c <rclc_timer_init_default+0x58>
 800d606:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d60a:	460c      	mov	r4, r1
 800d60c:	b08b      	sub	sp, #44	; 0x2c
 800d60e:	b309      	cbz	r1, 800d654 <rclc_timer_init_default+0x50>
 800d610:	4691      	mov	r9, r2
 800d612:	4698      	mov	r8, r3
 800d614:	4607      	mov	r7, r0
 800d616:	f006 f9e3 	bl	80139e0 <rcl_get_zero_initialized_timer>
 800d61a:	69a6      	ldr	r6, [r4, #24]
 800d61c:	6038      	str	r0, [r7, #0]
 800d61e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d620:	ad03      	add	r5, sp, #12
 800d622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d624:	6833      	ldr	r3, [r6, #0]
 800d626:	602b      	str	r3, [r5, #0]
 800d628:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d62a:	9302      	str	r3, [sp, #8]
 800d62c:	e9cd 9800 	strd	r9, r8, [sp]
 800d630:	4638      	mov	r0, r7
 800d632:	f104 0208 	add.w	r2, r4, #8
 800d636:	f104 011c 	add.w	r1, r4, #28
 800d63a:	f006 f9d7 	bl	80139ec <rcl_timer_init>
 800d63e:	b910      	cbnz	r0, 800d646 <rclc_timer_init_default+0x42>
 800d640:	b00b      	add	sp, #44	; 0x2c
 800d642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d646:	9009      	str	r0, [sp, #36]	; 0x24
 800d648:	f000 f940 	bl	800d8cc <rcutils_reset_error>
 800d64c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d64e:	b00b      	add	sp, #44	; 0x2c
 800d650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d654:	200b      	movs	r0, #11
 800d656:	b00b      	add	sp, #44	; 0x2c
 800d658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d65c:	200b      	movs	r0, #11
 800d65e:	4770      	bx	lr

0800d660 <__default_zero_allocate>:
 800d660:	f009 ba92 	b.w	8016b88 <calloc>

0800d664 <__default_reallocate>:
 800d664:	f009 bcfa 	b.w	801705c <realloc>

0800d668 <__default_deallocate>:
 800d668:	f009 bb80 	b.w	8016d6c <free>

0800d66c <__default_allocate>:
 800d66c:	f009 bb76 	b.w	8016d5c <malloc>

0800d670 <rcutils_get_zero_initialized_allocator>:
 800d670:	b470      	push	{r4, r5, r6}
 800d672:	4d05      	ldr	r5, [pc, #20]	; (800d688 <rcutils_get_zero_initialized_allocator+0x18>)
 800d674:	4606      	mov	r6, r0
 800d676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d678:	4634      	mov	r4, r6
 800d67a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d67c:	682b      	ldr	r3, [r5, #0]
 800d67e:	6023      	str	r3, [r4, #0]
 800d680:	4630      	mov	r0, r6
 800d682:	bc70      	pop	{r4, r5, r6}
 800d684:	4770      	bx	lr
 800d686:	bf00      	nop
 800d688:	08019560 	.word	0x08019560

0800d68c <rcutils_set_default_allocator>:
 800d68c:	b1a0      	cbz	r0, 800d6b8 <rcutils_set_default_allocator+0x2c>
 800d68e:	6801      	ldr	r1, [r0, #0]
 800d690:	b199      	cbz	r1, 800d6ba <rcutils_set_default_allocator+0x2e>
 800d692:	b430      	push	{r4, r5}
 800d694:	6844      	ldr	r4, [r0, #4]
 800d696:	b194      	cbz	r4, 800d6be <rcutils_set_default_allocator+0x32>
 800d698:	68c5      	ldr	r5, [r0, #12]
 800d69a:	b15d      	cbz	r5, 800d6b4 <rcutils_set_default_allocator+0x28>
 800d69c:	6883      	ldr	r3, [r0, #8]
 800d69e:	b18b      	cbz	r3, 800d6c4 <rcutils_set_default_allocator+0x38>
 800d6a0:	4a09      	ldr	r2, [pc, #36]	; (800d6c8 <rcutils_set_default_allocator+0x3c>)
 800d6a2:	e9c2 1400 	strd	r1, r4, [r2]
 800d6a6:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	6110      	str	r0, [r2, #16]
 800d6ae:	2001      	movs	r0, #1
 800d6b0:	bc30      	pop	{r4, r5}
 800d6b2:	4770      	bx	lr
 800d6b4:	4628      	mov	r0, r5
 800d6b6:	e7fb      	b.n	800d6b0 <rcutils_set_default_allocator+0x24>
 800d6b8:	4770      	bx	lr
 800d6ba:	4608      	mov	r0, r1
 800d6bc:	4770      	bx	lr
 800d6be:	4620      	mov	r0, r4
 800d6c0:	bc30      	pop	{r4, r5}
 800d6c2:	4770      	bx	lr
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	e7f3      	b.n	800d6b0 <rcutils_set_default_allocator+0x24>
 800d6c8:	20000080 	.word	0x20000080

0800d6cc <rcutils_get_default_allocator>:
 800d6cc:	b470      	push	{r4, r5, r6}
 800d6ce:	4d05      	ldr	r5, [pc, #20]	; (800d6e4 <rcutils_get_default_allocator+0x18>)
 800d6d0:	4606      	mov	r6, r0
 800d6d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d6d4:	4634      	mov	r4, r6
 800d6d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d6d8:	682b      	ldr	r3, [r5, #0]
 800d6da:	6023      	str	r3, [r4, #0]
 800d6dc:	4630      	mov	r0, r6
 800d6de:	bc70      	pop	{r4, r5, r6}
 800d6e0:	4770      	bx	lr
 800d6e2:	bf00      	nop
 800d6e4:	20000080 	.word	0x20000080

0800d6e8 <rcutils_allocator_is_valid>:
 800d6e8:	b158      	cbz	r0, 800d702 <rcutils_allocator_is_valid+0x1a>
 800d6ea:	6803      	ldr	r3, [r0, #0]
 800d6ec:	b143      	cbz	r3, 800d700 <rcutils_allocator_is_valid+0x18>
 800d6ee:	6843      	ldr	r3, [r0, #4]
 800d6f0:	b133      	cbz	r3, 800d700 <rcutils_allocator_is_valid+0x18>
 800d6f2:	68c3      	ldr	r3, [r0, #12]
 800d6f4:	b123      	cbz	r3, 800d700 <rcutils_allocator_is_valid+0x18>
 800d6f6:	6880      	ldr	r0, [r0, #8]
 800d6f8:	3800      	subs	r0, #0
 800d6fa:	bf18      	it	ne
 800d6fc:	2001      	movne	r0, #1
 800d6fe:	4770      	bx	lr
 800d700:	4618      	mov	r0, r3
 800d702:	4770      	bx	lr

0800d704 <__rcutils_format_error_string>:
 800d704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d708:	460e      	mov	r6, r1
 800d70a:	b086      	sub	sp, #24
 800d70c:	4607      	mov	r7, r0
 800d70e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d712:	4630      	mov	r0, r6
 800d714:	f009 fd15 	bl	8017142 <strnlen>
 800d718:	f240 38ff 	movw	r8, #1023	; 0x3ff
 800d71c:	4540      	cmp	r0, r8
 800d71e:	bf28      	it	cs
 800d720:	4640      	movcs	r0, r8
 800d722:	4605      	mov	r5, r0
 800d724:	f5c5 6480 	rsb	r4, r5, #1024	; 0x400
 800d728:	462a      	mov	r2, r5
 800d72a:	4631      	mov	r1, r6
 800d72c:	4638      	mov	r0, r7
 800d72e:	f009 fb33 	bl	8016d98 <memmove>
 800d732:	2c05      	cmp	r4, #5
 800d734:	46a1      	mov	r9, r4
 800d736:	bf28      	it	cs
 800d738:	f04f 0905 	movcs.w	r9, #5
 800d73c:	454c      	cmp	r4, r9
 800d73e:	f04f 0300 	mov.w	r3, #0
 800d742:	bf98      	it	ls
 800d744:	eba8 0905 	subls.w	r9, r8, r5
 800d748:	557b      	strb	r3, [r7, r5]
 800d74a:	442f      	add	r7, r5
 800d74c:	4949      	ldr	r1, [pc, #292]	; (800d874 <__rcutils_format_error_string+0x170>)
 800d74e:	eba4 0409 	sub.w	r4, r4, r9
 800d752:	464a      	mov	r2, r9
 800d754:	4638      	mov	r0, r7
 800d756:	f04f 0800 	mov.w	r8, #0
 800d75a:	f506 7540 	add.w	r5, r6, #768	; 0x300
 800d75e:	f009 fb0d 	bl	8016d7c <memcpy>
 800d762:	f807 8009 	strb.w	r8, [r7, r9]
 800d766:	4621      	mov	r1, r4
 800d768:	4628      	mov	r0, r5
 800d76a:	f009 fcea 	bl	8017142 <strnlen>
 800d76e:	4284      	cmp	r4, r0
 800d770:	4682      	mov	sl, r0
 800d772:	444f      	add	r7, r9
 800d774:	d96b      	bls.n	800d84e <__rcutils_format_error_string+0x14a>
 800d776:	1a24      	subs	r4, r4, r0
 800d778:	2c01      	cmp	r4, #1
 800d77a:	4629      	mov	r1, r5
 800d77c:	4602      	mov	r2, r0
 800d77e:	4625      	mov	r5, r4
 800d780:	4638      	mov	r0, r7
 800d782:	bf28      	it	cs
 800d784:	2501      	movcs	r5, #1
 800d786:	f009 fb07 	bl	8016d98 <memmove>
 800d78a:	42ac      	cmp	r4, r5
 800d78c:	f807 800a 	strb.w	r8, [r7, sl]
 800d790:	eb07 030a 	add.w	r3, r7, sl
 800d794:	bf88      	it	hi
 800d796:	1b64      	subhi	r4, r4, r5
 800d798:	d963      	bls.n	800d862 <__rcutils_format_error_string+0x15e>
 800d79a:	4618      	mov	r0, r3
 800d79c:	4936      	ldr	r1, [pc, #216]	; (800d878 <__rcutils_format_error_string+0x174>)
 800d79e:	462a      	mov	r2, r5
 800d7a0:	f009 faec 	bl	8016d7c <memcpy>
 800d7a4:	f04f 0800 	mov.w	r8, #0
 800d7a8:	f800 8005 	strb.w	r8, [r0, r5]
 800d7ac:	e9d6 67fa 	ldrd	r6, r7, [r6, #1000]	; 0x3e8
 800d7b0:	ea56 0307 	orrs.w	r3, r6, r7
 800d7b4:	eb00 0a05 	add.w	sl, r0, r5
 800d7b8:	d056      	beq.n	800d868 <__rcutils_format_error_string+0x164>
 800d7ba:	46e9      	mov	r9, sp
 800d7bc:	464d      	mov	r5, r9
 800d7be:	4630      	mov	r0, r6
 800d7c0:	4639      	mov	r1, r7
 800d7c2:	220a      	movs	r2, #10
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	f7f2 fdbb 	bl	8000340 <__aeabi_uldivmod>
 800d7ca:	3230      	adds	r2, #48	; 0x30
 800d7cc:	f805 2b01 	strb.w	r2, [r5], #1
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	220a      	movs	r2, #10
 800d7d4:	4630      	mov	r0, r6
 800d7d6:	4639      	mov	r1, r7
 800d7d8:	f7f2 fdb2 	bl	8000340 <__aeabi_uldivmod>
 800d7dc:	463b      	mov	r3, r7
 800d7de:	4632      	mov	r2, r6
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	bf08      	it	eq
 800d7e4:	2a0a      	cmpeq	r2, #10
 800d7e6:	f108 0801 	add.w	r8, r8, #1
 800d7ea:	4606      	mov	r6, r0
 800d7ec:	460f      	mov	r7, r1
 800d7ee:	d2e6      	bcs.n	800d7be <__rcutils_format_error_string+0xba>
 800d7f0:	ab06      	add	r3, sp, #24
 800d7f2:	4498      	add	r8, r3
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	2115      	movs	r1, #21
 800d7f8:	f808 3c18 	strb.w	r3, [r8, #-24]
 800d7fc:	4648      	mov	r0, r9
 800d7fe:	f009 fca0 	bl	8017142 <strnlen>
 800d802:	2801      	cmp	r0, #1
 800d804:	d90f      	bls.n	800d826 <__rcutils_format_error_string+0x122>
 800d806:	1e43      	subs	r3, r0, #1
 800d808:	f10d 32ff 	add.w	r2, sp, #4294967295	; 0xffffffff
 800d80c:	4410      	add	r0, r2
 800d80e:	444b      	add	r3, r9
 800d810:	464a      	mov	r2, r9
 800d812:	7811      	ldrb	r1, [r2, #0]
 800d814:	781d      	ldrb	r5, [r3, #0]
 800d816:	f802 5b01 	strb.w	r5, [r2], #1
 800d81a:	f803 1901 	strb.w	r1, [r3], #-1
 800d81e:	1a81      	subs	r1, r0, r2
 800d820:	1ac5      	subs	r5, r0, r3
 800d822:	428d      	cmp	r5, r1
 800d824:	d3f5      	bcc.n	800d812 <__rcutils_format_error_string+0x10e>
 800d826:	4621      	mov	r1, r4
 800d828:	4648      	mov	r0, r9
 800d82a:	f009 fc8a 	bl	8017142 <strnlen>
 800d82e:	42a0      	cmp	r0, r4
 800d830:	4605      	mov	r5, r0
 800d832:	bf28      	it	cs
 800d834:	f104 35ff 	addcs.w	r5, r4, #4294967295	; 0xffffffff
 800d838:	4649      	mov	r1, r9
 800d83a:	462a      	mov	r2, r5
 800d83c:	4650      	mov	r0, sl
 800d83e:	f009 fa9d 	bl	8016d7c <memcpy>
 800d842:	2300      	movs	r3, #0
 800d844:	f80a 3005 	strb.w	r3, [sl, r5]
 800d848:	b006      	add	sp, #24
 800d84a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d84e:	3c01      	subs	r4, #1
 800d850:	4622      	mov	r2, r4
 800d852:	4629      	mov	r1, r5
 800d854:	4638      	mov	r0, r7
 800d856:	f009 fa9f 	bl	8016d98 <memmove>
 800d85a:	f807 8004 	strb.w	r8, [r7, r4]
 800d85e:	193b      	adds	r3, r7, r4
 800d860:	2401      	movs	r4, #1
 800d862:	1e65      	subs	r5, r4, #1
 800d864:	2401      	movs	r4, #1
 800d866:	e798      	b.n	800d79a <__rcutils_format_error_string+0x96>
 800d868:	2330      	movs	r3, #48	; 0x30
 800d86a:	f8ad 3000 	strh.w	r3, [sp]
 800d86e:	46e9      	mov	r9, sp
 800d870:	e7d9      	b.n	800d826 <__rcutils_format_error_string+0x122>
 800d872:	bf00      	nop
 800d874:	08019574 	.word	0x08019574
 800d878:	0801957c 	.word	0x0801957c

0800d87c <rcutils_get_error_string>:
 800d87c:	b538      	push	{r3, r4, r5, lr}
 800d87e:	4b0e      	ldr	r3, [pc, #56]	; (800d8b8 <rcutils_get_error_string+0x3c>)
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	4604      	mov	r4, r0
 800d884:	b18b      	cbz	r3, 800d8aa <rcutils_get_error_string+0x2e>
 800d886:	4d0d      	ldr	r5, [pc, #52]	; (800d8bc <rcutils_get_error_string+0x40>)
 800d888:	782b      	ldrb	r3, [r5, #0]
 800d88a:	b13b      	cbz	r3, 800d89c <rcutils_get_error_string+0x20>
 800d88c:	490c      	ldr	r1, [pc, #48]	; (800d8c0 <rcutils_get_error_string+0x44>)
 800d88e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d892:	4620      	mov	r0, r4
 800d894:	f009 fa72 	bl	8016d7c <memcpy>
 800d898:	4620      	mov	r0, r4
 800d89a:	bd38      	pop	{r3, r4, r5, pc}
 800d89c:	4909      	ldr	r1, [pc, #36]	; (800d8c4 <rcutils_get_error_string+0x48>)
 800d89e:	4808      	ldr	r0, [pc, #32]	; (800d8c0 <rcutils_get_error_string+0x44>)
 800d8a0:	f7ff ff30 	bl	800d704 <__rcutils_format_error_string>
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	702b      	strb	r3, [r5, #0]
 800d8a8:	e7f0      	b.n	800d88c <rcutils_get_error_string+0x10>
 800d8aa:	4907      	ldr	r1, [pc, #28]	; (800d8c8 <rcutils_get_error_string+0x4c>)
 800d8ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d8b0:	f009 fa64 	bl	8016d7c <memcpy>
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	bd38      	pop	{r3, r4, r5, pc}
 800d8b8:	20010240 	.word	0x20010240
 800d8bc:	20010241 	.word	0x20010241
 800d8c0:	20010a38 	.word	0x20010a38
 800d8c4:	20010e38 	.word	0x20010e38
 800d8c8:	08018db0 	.word	0x08018db0

0800d8cc <rcutils_reset_error>:
 800d8cc:	b510      	push	{r4, lr}
 800d8ce:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800d8d2:	2100      	movs	r1, #0
 800d8d4:	4807      	ldr	r0, [pc, #28]	; (800d8f4 <rcutils_reset_error+0x28>)
 800d8d6:	f009 fa79 	bl	8016dcc <memset>
 800d8da:	4b07      	ldr	r3, [pc, #28]	; (800d8f8 <rcutils_reset_error+0x2c>)
 800d8dc:	4907      	ldr	r1, [pc, #28]	; (800d8fc <rcutils_reset_error+0x30>)
 800d8de:	4808      	ldr	r0, [pc, #32]	; (800d900 <rcutils_reset_error+0x34>)
 800d8e0:	2400      	movs	r4, #0
 800d8e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d8e6:	701c      	strb	r4, [r3, #0]
 800d8e8:	f009 fa48 	bl	8016d7c <memcpy>
 800d8ec:	4b05      	ldr	r3, [pc, #20]	; (800d904 <rcutils_reset_error+0x38>)
 800d8ee:	701c      	strb	r4, [r3, #0]
 800d8f0:	bd10      	pop	{r4, pc}
 800d8f2:	bf00      	nop
 800d8f4:	20010e38 	.word	0x20010e38
 800d8f8:	20010241 	.word	0x20010241
 800d8fc:	080185b0 	.word	0x080185b0
 800d900:	20010a38 	.word	0x20010a38
 800d904:	20010240 	.word	0x20010240

0800d908 <rcutils_get_zero_initialized_string_map>:
 800d908:	4b01      	ldr	r3, [pc, #4]	; (800d910 <rcutils_get_zero_initialized_string_map+0x8>)
 800d90a:	2000      	movs	r0, #0
 800d90c:	6018      	str	r0, [r3, #0]
 800d90e:	4770      	bx	lr
 800d910:	20010244 	.word	0x20010244

0800d914 <rcutils_string_map_reserve>:
 800d914:	2800      	cmp	r0, #0
 800d916:	d061      	beq.n	800d9dc <rcutils_string_map_reserve+0xc8>
 800d918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d91c:	6805      	ldr	r5, [r0, #0]
 800d91e:	b083      	sub	sp, #12
 800d920:	460c      	mov	r4, r1
 800d922:	4606      	mov	r6, r0
 800d924:	b12d      	cbz	r5, 800d932 <rcutils_string_map_reserve+0x1e>
 800d926:	68eb      	ldr	r3, [r5, #12]
 800d928:	42a3      	cmp	r3, r4
 800d92a:	d906      	bls.n	800d93a <rcutils_string_map_reserve+0x26>
 800d92c:	461c      	mov	r4, r3
 800d92e:	2d00      	cmp	r5, #0
 800d930:	d1f9      	bne.n	800d926 <rcutils_string_map_reserve+0x12>
 800d932:	201f      	movs	r0, #31
 800d934:	b003      	add	sp, #12
 800d936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d93a:	68ab      	ldr	r3, [r5, #8]
 800d93c:	42a3      	cmp	r3, r4
 800d93e:	d049      	beq.n	800d9d4 <rcutils_string_map_reserve+0xc0>
 800d940:	6a2f      	ldr	r7, [r5, #32]
 800d942:	2c00      	cmp	r4, #0
 800d944:	d035      	beq.n	800d9b2 <rcutils_string_map_reserve+0x9e>
 800d946:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800d94a:	d245      	bcs.n	800d9d8 <rcutils_string_map_reserve+0xc4>
 800d94c:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800d950:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800d954:	6828      	ldr	r0, [r5, #0]
 800d956:	4641      	mov	r1, r8
 800d958:	463a      	mov	r2, r7
 800d95a:	47c8      	blx	r9
 800d95c:	2800      	cmp	r0, #0
 800d95e:	d03b      	beq.n	800d9d8 <rcutils_string_map_reserve+0xc4>
 800d960:	6833      	ldr	r3, [r6, #0]
 800d962:	463a      	mov	r2, r7
 800d964:	6018      	str	r0, [r3, #0]
 800d966:	4641      	mov	r1, r8
 800d968:	6858      	ldr	r0, [r3, #4]
 800d96a:	47c8      	blx	r9
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d033      	beq.n	800d9d8 <rcutils_string_map_reserve+0xc4>
 800d970:	6835      	ldr	r5, [r6, #0]
 800d972:	68ab      	ldr	r3, [r5, #8]
 800d974:	6068      	str	r0, [r5, #4]
 800d976:	42a3      	cmp	r3, r4
 800d978:	d227      	bcs.n	800d9ca <rcutils_string_map_reserve+0xb6>
 800d97a:	682a      	ldr	r2, [r5, #0]
 800d97c:	eb00 0108 	add.w	r1, r0, r8
 800d980:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800d984:	428f      	cmp	r7, r1
 800d986:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800d98a:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800d98e:	d203      	bcs.n	800d998 <rcutils_string_map_reserve+0x84>
 800d990:	eb02 0108 	add.w	r1, r2, r8
 800d994:	428e      	cmp	r6, r1
 800d996:	d323      	bcc.n	800d9e0 <rcutils_string_map_reserve+0xcc>
 800d998:	1ae3      	subs	r3, r4, r3
 800d99a:	009a      	lsls	r2, r3, #2
 800d99c:	4638      	mov	r0, r7
 800d99e:	2100      	movs	r1, #0
 800d9a0:	9201      	str	r2, [sp, #4]
 800d9a2:	f009 fa13 	bl	8016dcc <memset>
 800d9a6:	9a01      	ldr	r2, [sp, #4]
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	2100      	movs	r1, #0
 800d9ac:	f009 fa0e 	bl	8016dcc <memset>
 800d9b0:	e00b      	b.n	800d9ca <rcutils_string_map_reserve+0xb6>
 800d9b2:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800d9b6:	6828      	ldr	r0, [r5, #0]
 800d9b8:	4639      	mov	r1, r7
 800d9ba:	47c0      	blx	r8
 800d9bc:	6833      	ldr	r3, [r6, #0]
 800d9be:	4639      	mov	r1, r7
 800d9c0:	6858      	ldr	r0, [r3, #4]
 800d9c2:	601c      	str	r4, [r3, #0]
 800d9c4:	47c0      	blx	r8
 800d9c6:	6835      	ldr	r5, [r6, #0]
 800d9c8:	606c      	str	r4, [r5, #4]
 800d9ca:	2000      	movs	r0, #0
 800d9cc:	60ac      	str	r4, [r5, #8]
 800d9ce:	b003      	add	sp, #12
 800d9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9d4:	2000      	movs	r0, #0
 800d9d6:	e7ad      	b.n	800d934 <rcutils_string_map_reserve+0x20>
 800d9d8:	200a      	movs	r0, #10
 800d9da:	e7ab      	b.n	800d934 <rcutils_string_map_reserve+0x20>
 800d9dc:	200b      	movs	r0, #11
 800d9de:	4770      	bx	lr
 800d9e0:	1f13      	subs	r3, r2, #4
 800d9e2:	f1ac 0c04 	sub.w	ip, ip, #4
 800d9e6:	4498      	add	r8, r3
 800d9e8:	4460      	add	r0, ip
 800d9ea:	4462      	add	r2, ip
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	f842 3f04 	str.w	r3, [r2, #4]!
 800d9f2:	4542      	cmp	r2, r8
 800d9f4:	f840 3f04 	str.w	r3, [r0, #4]!
 800d9f8:	d1f9      	bne.n	800d9ee <rcutils_string_map_reserve+0xda>
 800d9fa:	e7e6      	b.n	800d9ca <rcutils_string_map_reserve+0xb6>

0800d9fc <rcutils_string_map_init>:
 800d9fc:	b082      	sub	sp, #8
 800d9fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da00:	460e      	mov	r6, r1
 800da02:	a906      	add	r1, sp, #24
 800da04:	e881 000c 	stmia.w	r1, {r2, r3}
 800da08:	b380      	cbz	r0, 800da6c <rcutils_string_map_init+0x70>
 800da0a:	6807      	ldr	r7, [r0, #0]
 800da0c:	4604      	mov	r4, r0
 800da0e:	b12f      	cbz	r7, 800da1c <rcutils_string_map_init+0x20>
 800da10:	251e      	movs	r5, #30
 800da12:	4628      	mov	r0, r5
 800da14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800da18:	b002      	add	sp, #8
 800da1a:	4770      	bx	lr
 800da1c:	a806      	add	r0, sp, #24
 800da1e:	f7ff fe63 	bl	800d6e8 <rcutils_allocator_is_valid>
 800da22:	b318      	cbz	r0, 800da6c <rcutils_string_map_init+0x70>
 800da24:	9b06      	ldr	r3, [sp, #24]
 800da26:	990a      	ldr	r1, [sp, #40]	; 0x28
 800da28:	2024      	movs	r0, #36	; 0x24
 800da2a:	4798      	blx	r3
 800da2c:	4605      	mov	r5, r0
 800da2e:	6020      	str	r0, [r4, #0]
 800da30:	b310      	cbz	r0, 800da78 <rcutils_string_map_init+0x7c>
 800da32:	f10d 0e18 	add.w	lr, sp, #24
 800da36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800da3a:	f105 0c10 	add.w	ip, r5, #16
 800da3e:	e9c5 7700 	strd	r7, r7, [r5]
 800da42:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800da46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800da4a:	f8de 3000 	ldr.w	r3, [lr]
 800da4e:	f8cc 3000 	str.w	r3, [ip]
 800da52:	4631      	mov	r1, r6
 800da54:	4620      	mov	r0, r4
 800da56:	f7ff ff5d 	bl	800d914 <rcutils_string_map_reserve>
 800da5a:	4605      	mov	r5, r0
 800da5c:	2800      	cmp	r0, #0
 800da5e:	d0d8      	beq.n	800da12 <rcutils_string_map_init+0x16>
 800da60:	9b07      	ldr	r3, [sp, #28]
 800da62:	990a      	ldr	r1, [sp, #40]	; 0x28
 800da64:	6820      	ldr	r0, [r4, #0]
 800da66:	4798      	blx	r3
 800da68:	6027      	str	r7, [r4, #0]
 800da6a:	e7d2      	b.n	800da12 <rcutils_string_map_init+0x16>
 800da6c:	250b      	movs	r5, #11
 800da6e:	4628      	mov	r0, r5
 800da70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800da74:	b002      	add	sp, #8
 800da76:	4770      	bx	lr
 800da78:	250a      	movs	r5, #10
 800da7a:	e7ca      	b.n	800da12 <rcutils_string_map_init+0x16>

0800da7c <rcutils_string_map_fini>:
 800da7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da80:	b082      	sub	sp, #8
 800da82:	2800      	cmp	r0, #0
 800da84:	d039      	beq.n	800dafa <rcutils_string_map_fini+0x7e>
 800da86:	6804      	ldr	r4, [r0, #0]
 800da88:	4606      	mov	r6, r0
 800da8a:	2c00      	cmp	r4, #0
 800da8c:	d031      	beq.n	800daf2 <rcutils_string_map_fini+0x76>
 800da8e:	68a3      	ldr	r3, [r4, #8]
 800da90:	b323      	cbz	r3, 800dadc <rcutils_string_map_fini+0x60>
 800da92:	2500      	movs	r5, #0
 800da94:	6822      	ldr	r2, [r4, #0]
 800da96:	46a8      	mov	r8, r5
 800da98:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800da9c:	b1d8      	cbz	r0, 800dad6 <rcutils_string_map_fini+0x5a>
 800da9e:	6a21      	ldr	r1, [r4, #32]
 800daa0:	6967      	ldr	r7, [r4, #20]
 800daa2:	9101      	str	r1, [sp, #4]
 800daa4:	47b8      	blx	r7
 800daa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800daaa:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800daae:	9901      	ldr	r1, [sp, #4]
 800dab0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dab4:	47b8      	blx	r7
 800dab6:	68e3      	ldr	r3, [r4, #12]
 800dab8:	6862      	ldr	r2, [r4, #4]
 800daba:	3b01      	subs	r3, #1
 800dabc:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800dac0:	60e3      	str	r3, [r4, #12]
 800dac2:	6834      	ldr	r4, [r6, #0]
 800dac4:	68a3      	ldr	r3, [r4, #8]
 800dac6:	3501      	adds	r5, #1
 800dac8:	429d      	cmp	r5, r3
 800daca:	d207      	bcs.n	800dadc <rcutils_string_map_fini+0x60>
 800dacc:	6822      	ldr	r2, [r4, #0]
 800dace:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800dad2:	2800      	cmp	r0, #0
 800dad4:	d1e3      	bne.n	800da9e <rcutils_string_map_fini+0x22>
 800dad6:	3501      	adds	r5, #1
 800dad8:	429d      	cmp	r5, r3
 800dada:	d3dd      	bcc.n	800da98 <rcutils_string_map_fini+0x1c>
 800dadc:	2100      	movs	r1, #0
 800dade:	4630      	mov	r0, r6
 800dae0:	f7ff ff18 	bl	800d914 <rcutils_string_map_reserve>
 800dae4:	4604      	mov	r4, r0
 800dae6:	b920      	cbnz	r0, 800daf2 <rcutils_string_map_fini+0x76>
 800dae8:	6830      	ldr	r0, [r6, #0]
 800daea:	6943      	ldr	r3, [r0, #20]
 800daec:	6a01      	ldr	r1, [r0, #32]
 800daee:	4798      	blx	r3
 800daf0:	6034      	str	r4, [r6, #0]
 800daf2:	4620      	mov	r0, r4
 800daf4:	b002      	add	sp, #8
 800daf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dafa:	240b      	movs	r4, #11
 800dafc:	4620      	mov	r0, r4
 800dafe:	b002      	add	sp, #8
 800db00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800db04 <rcutils_string_map_getn>:
 800db04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db08:	b082      	sub	sp, #8
 800db0a:	b308      	cbz	r0, 800db50 <rcutils_string_map_getn+0x4c>
 800db0c:	6804      	ldr	r4, [r0, #0]
 800db0e:	b304      	cbz	r4, 800db52 <rcutils_string_map_getn+0x4e>
 800db10:	460d      	mov	r5, r1
 800db12:	b1e9      	cbz	r1, 800db50 <rcutils_string_map_getn+0x4c>
 800db14:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800db18:	6827      	ldr	r7, [r4, #0]
 800db1a:	f1b9 0f00 	cmp.w	r9, #0
 800db1e:	d017      	beq.n	800db50 <rcutils_string_map_getn+0x4c>
 800db20:	4690      	mov	r8, r2
 800db22:	3f04      	subs	r7, #4
 800db24:	2600      	movs	r6, #0
 800db26:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800db2a:	9101      	str	r1, [sp, #4]
 800db2c:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800db30:	4608      	mov	r0, r1
 800db32:	3601      	adds	r6, #1
 800db34:	b151      	cbz	r1, 800db4c <rcutils_string_map_getn+0x48>
 800db36:	f7f2 fb55 	bl	80001e4 <strlen>
 800db3a:	4540      	cmp	r0, r8
 800db3c:	4602      	mov	r2, r0
 800db3e:	9901      	ldr	r1, [sp, #4]
 800db40:	bf38      	it	cc
 800db42:	4642      	movcc	r2, r8
 800db44:	4628      	mov	r0, r5
 800db46:	f009 faea 	bl	801711e <strncmp>
 800db4a:	b130      	cbz	r0, 800db5a <rcutils_string_map_getn+0x56>
 800db4c:	45b1      	cmp	r9, r6
 800db4e:	d1ea      	bne.n	800db26 <rcutils_string_map_getn+0x22>
 800db50:	2400      	movs	r4, #0
 800db52:	4620      	mov	r0, r4
 800db54:	b002      	add	sp, #8
 800db56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db5a:	6863      	ldr	r3, [r4, #4]
 800db5c:	f853 400a 	ldr.w	r4, [r3, sl]
 800db60:	4620      	mov	r0, r4
 800db62:	b002      	add	sp, #8
 800db64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800db68 <rcutils_system_time_now>:
 800db68:	b310      	cbz	r0, 800dbb0 <rcutils_system_time_now+0x48>
 800db6a:	b570      	push	{r4, r5, r6, lr}
 800db6c:	b084      	sub	sp, #16
 800db6e:	4669      	mov	r1, sp
 800db70:	4604      	mov	r4, r0
 800db72:	2001      	movs	r0, #1
 800db74:	f7f4 f840 	bl	8001bf8 <clock_gettime>
 800db78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db7c:	2800      	cmp	r0, #0
 800db7e:	f171 0300 	sbcs.w	r3, r1, #0
 800db82:	db12      	blt.n	800dbaa <rcutils_system_time_now+0x42>
 800db84:	9d02      	ldr	r5, [sp, #8]
 800db86:	2d00      	cmp	r5, #0
 800db88:	db0c      	blt.n	800dba4 <rcutils_system_time_now+0x3c>
 800db8a:	4e0a      	ldr	r6, [pc, #40]	; (800dbb4 <rcutils_system_time_now+0x4c>)
 800db8c:	fba0 2306 	umull	r2, r3, r0, r6
 800db90:	1952      	adds	r2, r2, r5
 800db92:	fb06 3301 	mla	r3, r6, r1, r3
 800db96:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800db9a:	2000      	movs	r0, #0
 800db9c:	e9c4 2300 	strd	r2, r3, [r4]
 800dba0:	b004      	add	sp, #16
 800dba2:	bd70      	pop	{r4, r5, r6, pc}
 800dba4:	ea50 0301 	orrs.w	r3, r0, r1
 800dba8:	d1ef      	bne.n	800db8a <rcutils_system_time_now+0x22>
 800dbaa:	2002      	movs	r0, #2
 800dbac:	b004      	add	sp, #16
 800dbae:	bd70      	pop	{r4, r5, r6, pc}
 800dbb0:	200b      	movs	r0, #11
 800dbb2:	4770      	bx	lr
 800dbb4:	3b9aca00 	.word	0x3b9aca00

0800dbb8 <rcutils_steady_time_now>:
 800dbb8:	b310      	cbz	r0, 800dc00 <rcutils_steady_time_now+0x48>
 800dbba:	b570      	push	{r4, r5, r6, lr}
 800dbbc:	b084      	sub	sp, #16
 800dbbe:	4669      	mov	r1, sp
 800dbc0:	4604      	mov	r4, r0
 800dbc2:	2000      	movs	r0, #0
 800dbc4:	f7f4 f818 	bl	8001bf8 <clock_gettime>
 800dbc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	f171 0300 	sbcs.w	r3, r1, #0
 800dbd2:	db12      	blt.n	800dbfa <rcutils_steady_time_now+0x42>
 800dbd4:	9d02      	ldr	r5, [sp, #8]
 800dbd6:	2d00      	cmp	r5, #0
 800dbd8:	db0c      	blt.n	800dbf4 <rcutils_steady_time_now+0x3c>
 800dbda:	4e0a      	ldr	r6, [pc, #40]	; (800dc04 <rcutils_steady_time_now+0x4c>)
 800dbdc:	fba0 2306 	umull	r2, r3, r0, r6
 800dbe0:	1952      	adds	r2, r2, r5
 800dbe2:	fb06 3301 	mla	r3, r6, r1, r3
 800dbe6:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800dbea:	2000      	movs	r0, #0
 800dbec:	e9c4 2300 	strd	r2, r3, [r4]
 800dbf0:	b004      	add	sp, #16
 800dbf2:	bd70      	pop	{r4, r5, r6, pc}
 800dbf4:	ea50 0301 	orrs.w	r3, r0, r1
 800dbf8:	d1ef      	bne.n	800dbda <rcutils_steady_time_now+0x22>
 800dbfa:	2002      	movs	r0, #2
 800dbfc:	b004      	add	sp, #16
 800dbfe:	bd70      	pop	{r4, r5, r6, pc}
 800dc00:	200b      	movs	r0, #11
 800dc02:	4770      	bx	lr
 800dc04:	3b9aca00 	.word	0x3b9aca00

0800dc08 <rmw_get_zero_initialized_init_options>:
 800dc08:	b510      	push	{r4, lr}
 800dc0a:	2238      	movs	r2, #56	; 0x38
 800dc0c:	4604      	mov	r4, r0
 800dc0e:	2100      	movs	r1, #0
 800dc10:	f009 f8dc 	bl	8016dcc <memset>
 800dc14:	f104 0010 	add.w	r0, r4, #16
 800dc18:	f000 f808 	bl	800dc2c <rmw_get_default_security_options>
 800dc1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc20:	60e3      	str	r3, [r4, #12]
 800dc22:	4620      	mov	r0, r4
 800dc24:	bd10      	pop	{r4, pc}
 800dc26:	bf00      	nop

0800dc28 <rmw_get_default_publisher_options>:
 800dc28:	2000      	movs	r0, #0
 800dc2a:	4770      	bx	lr

0800dc2c <rmw_get_default_security_options>:
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	7002      	strb	r2, [r0, #0]
 800dc30:	6042      	str	r2, [r0, #4]
 800dc32:	4770      	bx	lr

0800dc34 <rmw_get_default_subscription_options>:
 800dc34:	2200      	movs	r2, #0
 800dc36:	6002      	str	r2, [r0, #0]
 800dc38:	7102      	strb	r2, [r0, #4]
 800dc3a:	4770      	bx	lr

0800dc3c <rmw_get_zero_initialized_message_info>:
 800dc3c:	b470      	push	{r4, r5, r6}
 800dc3e:	4d07      	ldr	r5, [pc, #28]	; (800dc5c <rmw_get_zero_initialized_message_info+0x20>)
 800dc40:	4606      	mov	r6, r0
 800dc42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc44:	4634      	mov	r4, r6
 800dc46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800dc50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dc54:	4630      	mov	r0, r6
 800dc56:	bc70      	pop	{r4, r5, r6}
 800dc58:	4770      	bx	lr
 800dc5a:	bf00      	nop
 800dc5c:	080191b0 	.word	0x080191b0

0800dc60 <rmw_validate_full_topic_name>:
 800dc60:	2800      	cmp	r0, #0
 800dc62:	d062      	beq.n	800dd2a <rmw_validate_full_topic_name+0xca>
 800dc64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc68:	460d      	mov	r5, r1
 800dc6a:	2900      	cmp	r1, #0
 800dc6c:	d05f      	beq.n	800dd2e <rmw_validate_full_topic_name+0xce>
 800dc6e:	4616      	mov	r6, r2
 800dc70:	4604      	mov	r4, r0
 800dc72:	f7f2 fab7 	bl	80001e4 <strlen>
 800dc76:	b148      	cbz	r0, 800dc8c <rmw_validate_full_topic_name+0x2c>
 800dc78:	7823      	ldrb	r3, [r4, #0]
 800dc7a:	2b2f      	cmp	r3, #47	; 0x2f
 800dc7c:	d00d      	beq.n	800dc9a <rmw_validate_full_topic_name+0x3a>
 800dc7e:	2302      	movs	r3, #2
 800dc80:	602b      	str	r3, [r5, #0]
 800dc82:	b13e      	cbz	r6, 800dc94 <rmw_validate_full_topic_name+0x34>
 800dc84:	2000      	movs	r0, #0
 800dc86:	6030      	str	r0, [r6, #0]
 800dc88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	602b      	str	r3, [r5, #0]
 800dc90:	2e00      	cmp	r6, #0
 800dc92:	d1f7      	bne.n	800dc84 <rmw_validate_full_topic_name+0x24>
 800dc94:	2000      	movs	r0, #0
 800dc96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc9a:	1e47      	subs	r7, r0, #1
 800dc9c:	5de3      	ldrb	r3, [r4, r7]
 800dc9e:	2b2f      	cmp	r3, #47	; 0x2f
 800dca0:	d047      	beq.n	800dd32 <rmw_validate_full_topic_name+0xd2>
 800dca2:	1e63      	subs	r3, r4, #1
 800dca4:	eb03 0900 	add.w	r9, r3, r0
 800dca8:	f1c4 0e01 	rsb	lr, r4, #1
 800dcac:	eb0e 0803 	add.w	r8, lr, r3
 800dcb0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800dcb4:	f021 0220 	bic.w	r2, r1, #32
 800dcb8:	3a41      	subs	r2, #65	; 0x41
 800dcba:	2a19      	cmp	r2, #25
 800dcbc:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800dcc0:	d90c      	bls.n	800dcdc <rmw_validate_full_topic_name+0x7c>
 800dcc2:	295f      	cmp	r1, #95	; 0x5f
 800dcc4:	d00a      	beq.n	800dcdc <rmw_validate_full_topic_name+0x7c>
 800dcc6:	f1bc 0f0a 	cmp.w	ip, #10
 800dcca:	d907      	bls.n	800dcdc <rmw_validate_full_topic_name+0x7c>
 800dccc:	2304      	movs	r3, #4
 800dcce:	602b      	str	r3, [r5, #0]
 800dcd0:	2e00      	cmp	r6, #0
 800dcd2:	d0df      	beq.n	800dc94 <rmw_validate_full_topic_name+0x34>
 800dcd4:	f8c6 8000 	str.w	r8, [r6]
 800dcd8:	2000      	movs	r0, #0
 800dcda:	e7d5      	b.n	800dc88 <rmw_validate_full_topic_name+0x28>
 800dcdc:	454b      	cmp	r3, r9
 800dcde:	d1e5      	bne.n	800dcac <rmw_validate_full_topic_name+0x4c>
 800dce0:	f8df e084 	ldr.w	lr, [pc, #132]	; 800dd68 <rmw_validate_full_topic_name+0x108>
 800dce4:	2300      	movs	r3, #0
 800dce6:	f107 0801 	add.w	r8, r7, #1
 800dcea:	e005      	b.n	800dcf8 <rmw_validate_full_topic_name+0x98>
 800dcec:	4611      	mov	r1, r2
 800dcee:	4288      	cmp	r0, r1
 800dcf0:	4613      	mov	r3, r2
 800dcf2:	f104 0401 	add.w	r4, r4, #1
 800dcf6:	d925      	bls.n	800dd44 <rmw_validate_full_topic_name+0xe4>
 800dcf8:	429f      	cmp	r7, r3
 800dcfa:	f103 0201 	add.w	r2, r3, #1
 800dcfe:	d01e      	beq.n	800dd3e <rmw_validate_full_topic_name+0xde>
 800dd00:	7821      	ldrb	r1, [r4, #0]
 800dd02:	292f      	cmp	r1, #47	; 0x2f
 800dd04:	d1f2      	bne.n	800dcec <rmw_validate_full_topic_name+0x8c>
 800dd06:	f894 c001 	ldrb.w	ip, [r4, #1]
 800dd0a:	1c5a      	adds	r2, r3, #1
 800dd0c:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800dd10:	4611      	mov	r1, r2
 800dd12:	d024      	beq.n	800dd5e <rmw_validate_full_topic_name+0xfe>
 800dd14:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800dd18:	075b      	lsls	r3, r3, #29
 800dd1a:	d5e8      	bpl.n	800dcee <rmw_validate_full_topic_name+0x8e>
 800dd1c:	2306      	movs	r3, #6
 800dd1e:	602b      	str	r3, [r5, #0]
 800dd20:	2e00      	cmp	r6, #0
 800dd22:	d0b7      	beq.n	800dc94 <rmw_validate_full_topic_name+0x34>
 800dd24:	6032      	str	r2, [r6, #0]
 800dd26:	2000      	movs	r0, #0
 800dd28:	e7ae      	b.n	800dc88 <rmw_validate_full_topic_name+0x28>
 800dd2a:	200b      	movs	r0, #11
 800dd2c:	4770      	bx	lr
 800dd2e:	200b      	movs	r0, #11
 800dd30:	e7aa      	b.n	800dc88 <rmw_validate_full_topic_name+0x28>
 800dd32:	2303      	movs	r3, #3
 800dd34:	602b      	str	r3, [r5, #0]
 800dd36:	2e00      	cmp	r6, #0
 800dd38:	d0ac      	beq.n	800dc94 <rmw_validate_full_topic_name+0x34>
 800dd3a:	6037      	str	r7, [r6, #0]
 800dd3c:	e7aa      	b.n	800dc94 <rmw_validate_full_topic_name+0x34>
 800dd3e:	4641      	mov	r1, r8
 800dd40:	1c7a      	adds	r2, r7, #1
 800dd42:	e7d4      	b.n	800dcee <rmw_validate_full_topic_name+0x8e>
 800dd44:	28f7      	cmp	r0, #247	; 0xf7
 800dd46:	d802      	bhi.n	800dd4e <rmw_validate_full_topic_name+0xee>
 800dd48:	2000      	movs	r0, #0
 800dd4a:	6028      	str	r0, [r5, #0]
 800dd4c:	e79c      	b.n	800dc88 <rmw_validate_full_topic_name+0x28>
 800dd4e:	2307      	movs	r3, #7
 800dd50:	602b      	str	r3, [r5, #0]
 800dd52:	2e00      	cmp	r6, #0
 800dd54:	d09e      	beq.n	800dc94 <rmw_validate_full_topic_name+0x34>
 800dd56:	23f6      	movs	r3, #246	; 0xf6
 800dd58:	6033      	str	r3, [r6, #0]
 800dd5a:	2000      	movs	r0, #0
 800dd5c:	e794      	b.n	800dc88 <rmw_validate_full_topic_name+0x28>
 800dd5e:	2305      	movs	r3, #5
 800dd60:	602b      	str	r3, [r5, #0]
 800dd62:	2e00      	cmp	r6, #0
 800dd64:	d1de      	bne.n	800dd24 <rmw_validate_full_topic_name+0xc4>
 800dd66:	e795      	b.n	800dc94 <rmw_validate_full_topic_name+0x34>
 800dd68:	08019d2d 	.word	0x08019d2d

0800dd6c <rmw_uros_set_custom_transport>:
 800dd6c:	b470      	push	{r4, r5, r6}
 800dd6e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800dd72:	b162      	cbz	r2, 800dd8e <rmw_uros_set_custom_transport+0x22>
 800dd74:	b15b      	cbz	r3, 800dd8e <rmw_uros_set_custom_transport+0x22>
 800dd76:	b155      	cbz	r5, 800dd8e <rmw_uros_set_custom_transport+0x22>
 800dd78:	b14e      	cbz	r6, 800dd8e <rmw_uros_set_custom_transport+0x22>
 800dd7a:	4c06      	ldr	r4, [pc, #24]	; (800dd94 <rmw_uros_set_custom_transport+0x28>)
 800dd7c:	7020      	strb	r0, [r4, #0]
 800dd7e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800dd82:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dd86:	6166      	str	r6, [r4, #20]
 800dd88:	2000      	movs	r0, #0
 800dd8a:	bc70      	pop	{r4, r5, r6}
 800dd8c:	4770      	bx	lr
 800dd8e:	200b      	movs	r0, #11
 800dd90:	bc70      	pop	{r4, r5, r6}
 800dd92:	4770      	bx	lr
 800dd94:	20011228 	.word	0x20011228

0800dd98 <rmw_init_options_init>:
 800dd98:	b084      	sub	sp, #16
 800dd9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd9e:	ad09      	add	r5, sp, #36	; 0x24
 800dda0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800dda4:	b130      	cbz	r0, 800ddb4 <rmw_init_options_init+0x1c>
 800dda6:	4604      	mov	r4, r0
 800dda8:	4628      	mov	r0, r5
 800ddaa:	f7ff fc9d 	bl	800d6e8 <rcutils_allocator_is_valid>
 800ddae:	b108      	cbz	r0, 800ddb4 <rmw_init_options_init+0x1c>
 800ddb0:	68a3      	ldr	r3, [r4, #8]
 800ddb2:	b123      	cbz	r3, 800ddbe <rmw_init_options_init+0x26>
 800ddb4:	200b      	movs	r0, #11
 800ddb6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddba:	b004      	add	sp, #16
 800ddbc:	4770      	bx	lr
 800ddbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ddc0:	4f1c      	ldr	r7, [pc, #112]	; (800de34 <rmw_init_options_init+0x9c>)
 800ddc2:	682e      	ldr	r6, [r5, #0]
 800ddc4:	683d      	ldr	r5, [r7, #0]
 800ddc6:	60a5      	str	r5, [r4, #8]
 800ddc8:	f04f 0800 	mov.w	r8, #0
 800ddcc:	f04f 0900 	mov.w	r9, #0
 800ddd0:	f104 0520 	add.w	r5, r4, #32
 800ddd4:	e9c4 8900 	strd	r8, r9, [r4]
 800ddd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ddda:	4b17      	ldr	r3, [pc, #92]	; (800de38 <rmw_init_options_init+0xa0>)
 800dddc:	4817      	ldr	r0, [pc, #92]	; (800de3c <rmw_init_options_init+0xa4>)
 800ddde:	602e      	str	r6, [r5, #0]
 800dde0:	4917      	ldr	r1, [pc, #92]	; (800de40 <rmw_init_options_init+0xa8>)
 800dde2:	61e3      	str	r3, [r4, #28]
 800dde4:	2203      	movs	r2, #3
 800dde6:	f000 ff63 	bl	800ecb0 <rmw_uxrce_init_init_options_impl_memory>
 800ddea:	4814      	ldr	r0, [pc, #80]	; (800de3c <rmw_init_options_init+0xa4>)
 800ddec:	f007 fb0a 	bl	8015404 <get_memory>
 800ddf0:	b1e8      	cbz	r0, 800de2e <rmw_init_options_init+0x96>
 800ddf2:	4a14      	ldr	r2, [pc, #80]	; (800de44 <rmw_init_options_init+0xac>)
 800ddf4:	68c3      	ldr	r3, [r0, #12]
 800ddf6:	6851      	ldr	r1, [r2, #4]
 800ddf8:	7810      	ldrb	r0, [r2, #0]
 800ddfa:	6363      	str	r3, [r4, #52]	; 0x34
 800ddfc:	7418      	strb	r0, [r3, #16]
 800ddfe:	6159      	str	r1, [r3, #20]
 800de00:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800de04:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800de08:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800de0c:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800de10:	f003 fe24 	bl	8011a5c <uxr_nanos>
 800de14:	f009 f8b4 	bl	8016f80 <srand>
 800de18:	f009 f8e0 	bl	8016fdc <rand>
 800de1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de1e:	6298      	str	r0, [r3, #40]	; 0x28
 800de20:	2800      	cmp	r0, #0
 800de22:	d0f9      	beq.n	800de18 <rmw_init_options_init+0x80>
 800de24:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de28:	2000      	movs	r0, #0
 800de2a:	b004      	add	sp, #16
 800de2c:	4770      	bx	lr
 800de2e:	2001      	movs	r0, #1
 800de30:	e7c1      	b.n	800ddb6 <rmw_init_options_init+0x1e>
 800de32:	bf00      	nop
 800de34:	08019d10 	.word	0x08019d10
 800de38:	08019580 	.word	0x08019580
 800de3c:	20014544 	.word	0x20014544
 800de40:	20014198 	.word	0x20014198
 800de44:	20011228 	.word	0x20011228

0800de48 <rmw_init_options_copy>:
 800de48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de4a:	b158      	cbz	r0, 800de64 <rmw_init_options_copy+0x1c>
 800de4c:	460e      	mov	r6, r1
 800de4e:	b149      	cbz	r1, 800de64 <rmw_init_options_copy+0x1c>
 800de50:	4b1d      	ldr	r3, [pc, #116]	; (800dec8 <rmw_init_options_copy+0x80>)
 800de52:	4604      	mov	r4, r0
 800de54:	6819      	ldr	r1, [r3, #0]
 800de56:	6880      	ldr	r0, [r0, #8]
 800de58:	f7f2 f9ba 	bl	80001d0 <strcmp>
 800de5c:	4607      	mov	r7, r0
 800de5e:	bb68      	cbnz	r0, 800debc <rmw_init_options_copy+0x74>
 800de60:	68b3      	ldr	r3, [r6, #8]
 800de62:	b113      	cbz	r3, 800de6a <rmw_init_options_copy+0x22>
 800de64:	270b      	movs	r7, #11
 800de66:	4638      	mov	r0, r7
 800de68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de6a:	4623      	mov	r3, r4
 800de6c:	4632      	mov	r2, r6
 800de6e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800de72:	681d      	ldr	r5, [r3, #0]
 800de74:	6858      	ldr	r0, [r3, #4]
 800de76:	6899      	ldr	r1, [r3, #8]
 800de78:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800de7c:	f8c2 c00c 	str.w	ip, [r2, #12]
 800de80:	3310      	adds	r3, #16
 800de82:	4573      	cmp	r3, lr
 800de84:	6015      	str	r5, [r2, #0]
 800de86:	6050      	str	r0, [r2, #4]
 800de88:	6091      	str	r1, [r2, #8]
 800de8a:	f102 0210 	add.w	r2, r2, #16
 800de8e:	d1f0      	bne.n	800de72 <rmw_init_options_copy+0x2a>
 800de90:	6819      	ldr	r1, [r3, #0]
 800de92:	685b      	ldr	r3, [r3, #4]
 800de94:	480d      	ldr	r0, [pc, #52]	; (800decc <rmw_init_options_copy+0x84>)
 800de96:	6053      	str	r3, [r2, #4]
 800de98:	6011      	str	r1, [r2, #0]
 800de9a:	f007 fab3 	bl	8015404 <get_memory>
 800de9e:	b180      	cbz	r0, 800dec2 <rmw_init_options_copy+0x7a>
 800dea0:	68c5      	ldr	r5, [r0, #12]
 800dea2:	6375      	str	r5, [r6, #52]	; 0x34
 800dea4:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800dea6:	3610      	adds	r6, #16
 800dea8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800deaa:	f105 0410 	add.w	r4, r5, #16
 800deae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800deb0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800deb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800deb8:	4638      	mov	r0, r7
 800deba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800debc:	270c      	movs	r7, #12
 800debe:	4638      	mov	r0, r7
 800dec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dec2:	2701      	movs	r7, #1
 800dec4:	e7cf      	b.n	800de66 <rmw_init_options_copy+0x1e>
 800dec6:	bf00      	nop
 800dec8:	08019d10 	.word	0x08019d10
 800decc:	20014544 	.word	0x20014544

0800ded0 <rmw_init_options_fini>:
 800ded0:	b570      	push	{r4, r5, r6, lr}
 800ded2:	b08e      	sub	sp, #56	; 0x38
 800ded4:	b348      	cbz	r0, 800df2a <rmw_init_options_fini+0x5a>
 800ded6:	4604      	mov	r4, r0
 800ded8:	3020      	adds	r0, #32
 800deda:	f7ff fc05 	bl	800d6e8 <rcutils_allocator_is_valid>
 800dede:	b320      	cbz	r0, 800df2a <rmw_init_options_fini+0x5a>
 800dee0:	4b18      	ldr	r3, [pc, #96]	; (800df44 <rmw_init_options_fini+0x74>)
 800dee2:	68a0      	ldr	r0, [r4, #8]
 800dee4:	6819      	ldr	r1, [r3, #0]
 800dee6:	f7f2 f973 	bl	80001d0 <strcmp>
 800deea:	4606      	mov	r6, r0
 800deec:	bb28      	cbnz	r0, 800df3a <rmw_init_options_fini+0x6a>
 800deee:	4b16      	ldr	r3, [pc, #88]	; (800df48 <rmw_init_options_fini+0x78>)
 800def0:	6819      	ldr	r1, [r3, #0]
 800def2:	b1f1      	cbz	r1, 800df32 <rmw_init_options_fini+0x62>
 800def4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800def6:	e001      	b.n	800defc <rmw_init_options_fini+0x2c>
 800def8:	6889      	ldr	r1, [r1, #8]
 800defa:	b1d1      	cbz	r1, 800df32 <rmw_init_options_fini+0x62>
 800defc:	68cb      	ldr	r3, [r1, #12]
 800defe:	429a      	cmp	r2, r3
 800df00:	d1fa      	bne.n	800def8 <rmw_init_options_fini+0x28>
 800df02:	4811      	ldr	r0, [pc, #68]	; (800df48 <rmw_init_options_fini+0x78>)
 800df04:	f007 fa8e 	bl	8015424 <put_memory>
 800df08:	466d      	mov	r5, sp
 800df0a:	4668      	mov	r0, sp
 800df0c:	f7ff fe7c 	bl	800dc08 <rmw_get_zero_initialized_init_options>
 800df10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800df20:	e884 0003 	stmia.w	r4, {r0, r1}
 800df24:	4630      	mov	r0, r6
 800df26:	b00e      	add	sp, #56	; 0x38
 800df28:	bd70      	pop	{r4, r5, r6, pc}
 800df2a:	260b      	movs	r6, #11
 800df2c:	4630      	mov	r0, r6
 800df2e:	b00e      	add	sp, #56	; 0x38
 800df30:	bd70      	pop	{r4, r5, r6, pc}
 800df32:	2601      	movs	r6, #1
 800df34:	4630      	mov	r0, r6
 800df36:	b00e      	add	sp, #56	; 0x38
 800df38:	bd70      	pop	{r4, r5, r6, pc}
 800df3a:	260c      	movs	r6, #12
 800df3c:	4630      	mov	r0, r6
 800df3e:	b00e      	add	sp, #56	; 0x38
 800df40:	bd70      	pop	{r4, r5, r6, pc}
 800df42:	bf00      	nop
 800df44:	08019d10 	.word	0x08019d10
 800df48:	20014544 	.word	0x20014544

0800df4c <rmw_init>:
 800df4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df50:	b083      	sub	sp, #12
 800df52:	2800      	cmp	r0, #0
 800df54:	f000 80e0 	beq.w	800e118 <rmw_init+0x1cc>
 800df58:	460e      	mov	r6, r1
 800df5a:	2900      	cmp	r1, #0
 800df5c:	f000 80dc 	beq.w	800e118 <rmw_init+0x1cc>
 800df60:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800df62:	4604      	mov	r4, r0
 800df64:	2b00      	cmp	r3, #0
 800df66:	f000 80d7 	beq.w	800e118 <rmw_init+0x1cc>
 800df6a:	4b70      	ldr	r3, [pc, #448]	; (800e12c <rmw_init+0x1e0>)
 800df6c:	6880      	ldr	r0, [r0, #8]
 800df6e:	f8d3 8000 	ldr.w	r8, [r3]
 800df72:	4641      	mov	r1, r8
 800df74:	f7f2 f92c 	bl	80001d0 <strcmp>
 800df78:	4607      	mov	r7, r0
 800df7a:	2800      	cmp	r0, #0
 800df7c:	f040 80c7 	bne.w	800e10e <rmw_init+0x1c2>
 800df80:	e9d4 0100 	ldrd	r0, r1, [r4]
 800df84:	68e3      	ldr	r3, [r4, #12]
 800df86:	61f3      	str	r3, [r6, #28]
 800df88:	e9c6 0100 	strd	r0, r1, [r6]
 800df8c:	2201      	movs	r2, #1
 800df8e:	4968      	ldr	r1, [pc, #416]	; (800e130 <rmw_init+0x1e4>)
 800df90:	4868      	ldr	r0, [pc, #416]	; (800e134 <rmw_init+0x1e8>)
 800df92:	f8c6 8008 	str.w	r8, [r6, #8]
 800df96:	f000 fe33 	bl	800ec00 <rmw_uxrce_init_session_memory>
 800df9a:	4867      	ldr	r0, [pc, #412]	; (800e138 <rmw_init+0x1ec>)
 800df9c:	4967      	ldr	r1, [pc, #412]	; (800e13c <rmw_init+0x1f0>)
 800df9e:	2204      	movs	r2, #4
 800dfa0:	f000 fe68 	bl	800ec74 <rmw_uxrce_init_static_input_buffer_memory>
 800dfa4:	4863      	ldr	r0, [pc, #396]	; (800e134 <rmw_init+0x1e8>)
 800dfa6:	f007 fa2d 	bl	8015404 <get_memory>
 800dfaa:	2800      	cmp	r0, #0
 800dfac:	f000 80b9 	beq.w	800e122 <rmw_init+0x1d6>
 800dfb0:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
 800dfb4:	68c5      	ldr	r5, [r0, #12]
 800dfb6:	f8dc 0024 	ldr.w	r0, [ip, #36]	; 0x24
 800dfba:	f89c 1010 	ldrb.w	r1, [ip, #16]
 800dfbe:	e9dc 2306 	ldrd	r2, r3, [ip, #24]
 800dfc2:	9001      	str	r0, [sp, #4]
 800dfc4:	f8dc 0020 	ldr.w	r0, [ip, #32]
 800dfc8:	9000      	str	r0, [sp, #0]
 800dfca:	f105 0910 	add.w	r9, r5, #16
 800dfce:	4648      	mov	r0, r9
 800dfd0:	f001 fee2 	bl	800fd98 <uxr_set_custom_transport_callbacks>
 800dfd4:	f241 5394 	movw	r3, #5524	; 0x1594
 800dfd8:	f241 5c98 	movw	ip, #5528	; 0x1598
 800dfdc:	f241 509c 	movw	r0, #5532	; 0x159c
 800dfe0:	f505 51ad 	add.w	r1, r5, #5536	; 0x15a0
 800dfe4:	50ef      	str	r7, [r5, r3]
 800dfe6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dfea:	f505 735e 	add.w	r3, r5, #888	; 0x378
 800dfee:	f845 700c 	str.w	r7, [r5, ip]
 800dff2:	502f      	str	r7, [r5, r0]
 800dff4:	e9c5 33e1 	strd	r3, r3, [r5, #900]	; 0x384
 800dff8:	e9c5 22e3 	strd	r2, r2, [r5, #908]	; 0x38c
 800dffc:	4850      	ldr	r0, [pc, #320]	; (800e140 <rmw_init+0x1f4>)
 800dffe:	600f      	str	r7, [r1, #0]
 800e000:	2201      	movs	r2, #1
 800e002:	e9c5 87da 	strd	r8, r7, [r5, #872]	; 0x368
 800e006:	494f      	ldr	r1, [pc, #316]	; (800e144 <rmw_init+0x1f8>)
 800e008:	64b5      	str	r5, [r6, #72]	; 0x48
 800e00a:	f000 fddf 	bl	800ebcc <rmw_uxrce_init_node_memory>
 800e00e:	494e      	ldr	r1, [pc, #312]	; (800e148 <rmw_init+0x1fc>)
 800e010:	484e      	ldr	r0, [pc, #312]	; (800e14c <rmw_init+0x200>)
 800e012:	2205      	movs	r2, #5
 800e014:	f000 fdc0 	bl	800eb98 <rmw_uxrce_init_subscription_memory>
 800e018:	494d      	ldr	r1, [pc, #308]	; (800e150 <rmw_init+0x204>)
 800e01a:	484e      	ldr	r0, [pc, #312]	; (800e154 <rmw_init+0x208>)
 800e01c:	220a      	movs	r2, #10
 800e01e:	f000 fda1 	bl	800eb64 <rmw_uxrce_init_publisher_memory>
 800e022:	494d      	ldr	r1, [pc, #308]	; (800e158 <rmw_init+0x20c>)
 800e024:	484d      	ldr	r0, [pc, #308]	; (800e15c <rmw_init+0x210>)
 800e026:	2201      	movs	r2, #1
 800e028:	f000 fd68 	bl	800eafc <rmw_uxrce_init_service_memory>
 800e02c:	494c      	ldr	r1, [pc, #304]	; (800e160 <rmw_init+0x214>)
 800e02e:	484d      	ldr	r0, [pc, #308]	; (800e164 <rmw_init+0x218>)
 800e030:	2201      	movs	r2, #1
 800e032:	f000 fd7d 	bl	800eb30 <rmw_uxrce_init_client_memory>
 800e036:	494c      	ldr	r1, [pc, #304]	; (800e168 <rmw_init+0x21c>)
 800e038:	484c      	ldr	r0, [pc, #304]	; (800e16c <rmw_init+0x220>)
 800e03a:	220f      	movs	r2, #15
 800e03c:	f000 fdfe 	bl	800ec3c <rmw_uxrce_init_topic_memory>
 800e040:	494b      	ldr	r1, [pc, #300]	; (800e170 <rmw_init+0x224>)
 800e042:	484c      	ldr	r0, [pc, #304]	; (800e174 <rmw_init+0x228>)
 800e044:	2203      	movs	r2, #3
 800e046:	f000 fe33 	bl	800ecb0 <rmw_uxrce_init_init_options_impl_memory>
 800e04a:	494b      	ldr	r1, [pc, #300]	; (800e178 <rmw_init+0x22c>)
 800e04c:	484b      	ldr	r0, [pc, #300]	; (800e17c <rmw_init+0x230>)
 800e04e:	2204      	movs	r2, #4
 800e050:	f000 fe48 	bl	800ece4 <rmw_uxrce_init_wait_set_memory>
 800e054:	494a      	ldr	r1, [pc, #296]	; (800e180 <rmw_init+0x234>)
 800e056:	484b      	ldr	r0, [pc, #300]	; (800e184 <rmw_init+0x238>)
 800e058:	2204      	movs	r2, #4
 800e05a:	f000 fe5f 	bl	800ed1c <rmw_uxrce_init_guard_condition_memory>
 800e05e:	463a      	mov	r2, r7
 800e060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e062:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 800e064:	f000 fd12 	bl	800ea8c <rmw_uxrce_transport_init>
 800e068:	4607      	mov	r7, r0
 800e06a:	2800      	cmp	r0, #0
 800e06c:	d150      	bne.n	800e110 <rmw_init+0x1c4>
 800e06e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e070:	f505 7428 	add.w	r4, r5, #672	; 0x2a0
 800e074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e076:	4620      	mov	r0, r4
 800e078:	f505 7122 	add.w	r1, r5, #648	; 0x288
 800e07c:	f002 fb06 	bl	801068c <uxr_init_session>
 800e080:	4941      	ldr	r1, [pc, #260]	; (800e188 <rmw_init+0x23c>)
 800e082:	462a      	mov	r2, r5
 800e084:	4620      	mov	r0, r4
 800e086:	f002 fb23 	bl	80106d0 <uxr_set_topic_callback>
 800e08a:	4940      	ldr	r1, [pc, #256]	; (800e18c <rmw_init+0x240>)
 800e08c:	463a      	mov	r2, r7
 800e08e:	4620      	mov	r0, r4
 800e090:	f002 fb1a 	bl	80106c8 <uxr_set_status_callback>
 800e094:	493e      	ldr	r1, [pc, #248]	; (800e190 <rmw_init+0x244>)
 800e096:	463a      	mov	r2, r7
 800e098:	4620      	mov	r0, r4
 800e09a:	f002 fb1d 	bl	80106d8 <uxr_set_request_callback>
 800e09e:	493d      	ldr	r1, [pc, #244]	; (800e194 <rmw_init+0x248>)
 800e0a0:	463a      	mov	r2, r7
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f002 fb1c 	bl	80106e0 <uxr_set_reply_callback>
 800e0a8:	f8b5 2298 	ldrh.w	r2, [r5, #664]	; 0x298
 800e0ac:	2304      	movs	r3, #4
 800e0ae:	0092      	lsls	r2, r2, #2
 800e0b0:	f505 7165 	add.w	r1, r5, #916	; 0x394
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f002 fbd3 	bl	8010860 <uxr_create_input_reliable_stream>
 800e0ba:	f8b5 2298 	ldrh.w	r2, [r5, #664]	; 0x298
 800e0be:	f8c5 0374 	str.w	r0, [r5, #884]	; 0x374
 800e0c2:	0092      	lsls	r2, r2, #2
 800e0c4:	2304      	movs	r3, #4
 800e0c6:	f605 3194 	addw	r1, r5, #2964	; 0xb94
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	f002 fb9e 	bl	801080c <uxr_create_output_reliable_stream>
 800e0d0:	f8c5 0378 	str.w	r0, [r5, #888]	; 0x378
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	f002 fbbd 	bl	8010854 <uxr_create_input_best_effort_stream>
 800e0da:	f505 519c 	add.w	r1, r5, #4992	; 0x1380
 800e0de:	f8c5 0380 	str.w	r0, [r5, #896]	; 0x380
 800e0e2:	f8b5 2298 	ldrh.w	r2, [r5, #664]	; 0x298
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	3114      	adds	r1, #20
 800e0ea:	f002 fb7d 	bl	80107e8 <uxr_create_output_best_effort_stream>
 800e0ee:	f8c5 037c 	str.w	r0, [r5, #892]	; 0x37c
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	f002 faf8 	bl	80106e8 <uxr_create_session>
 800e0f8:	b950      	cbnz	r0, 800e110 <rmw_init+0x1c4>
 800e0fa:	4648      	mov	r0, r9
 800e0fc:	f001 fe8c 	bl	800fe18 <uxr_close_custom_transport>
 800e100:	480c      	ldr	r0, [pc, #48]	; (800e134 <rmw_init+0x1e8>)
 800e102:	4629      	mov	r1, r5
 800e104:	f007 f98e 	bl	8015424 <put_memory>
 800e108:	64b7      	str	r7, [r6, #72]	; 0x48
 800e10a:	2701      	movs	r7, #1
 800e10c:	e000      	b.n	800e110 <rmw_init+0x1c4>
 800e10e:	270c      	movs	r7, #12
 800e110:	4638      	mov	r0, r7
 800e112:	b003      	add	sp, #12
 800e114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e118:	270b      	movs	r7, #11
 800e11a:	4638      	mov	r0, r7
 800e11c:	b003      	add	sp, #12
 800e11e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e122:	2701      	movs	r7, #1
 800e124:	4638      	mov	r0, r7
 800e126:	b003      	add	sp, #12
 800e128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e12c:	08019d10 	.word	0x08019d10
 800e130:	20014620 	.word	0x20014620
 800e134:	200143f0 	.word	0x200143f0
 800e138:	20011248 	.word	0x20011248
 800e13c:	20012028 	.word	0x20012028
 800e140:	2001421c 	.word	0x2001421c
 800e144:	20014400 	.word	0x20014400
 800e148:	20011b50 	.word	0x20011b50
 800e14c:	200144b4 	.word	0x200144b4
 800e150:	20011268 	.word	0x20011268
 800e154:	20011258 	.word	0x20011258
 800e158:	20014558 	.word	0x20014558
 800e15c:	200144a4 	.word	0x200144a4
 800e160:	20011f60 	.word	0x20011f60
 800e164:	20011ad8 	.word	0x20011ad8
 800e168:	2001422c 	.word	0x2001422c
 800e16c:	200143e0 	.word	0x200143e0
 800e170:	20014198 	.word	0x20014198
 800e174:	20014544 	.word	0x20014544
 800e178:	20014128 	.word	0x20014128
 800e17c:	20015bc8 	.word	0x20015bc8
 800e180:	200144c4 	.word	0x200144c4
 800e184:	200143d0 	.word	0x200143d0
 800e188:	08015245 	.word	0x08015245
 800e18c:	0801523d 	.word	0x0801523d
 800e190:	080152d9 	.word	0x080152d9
 800e194:	08015371 	.word	0x08015371

0800e198 <rmw_context_fini>:
 800e198:	4b17      	ldr	r3, [pc, #92]	; (800e1f8 <rmw_context_fini+0x60>)
 800e19a:	b570      	push	{r4, r5, r6, lr}
 800e19c:	681c      	ldr	r4, [r3, #0]
 800e19e:	4605      	mov	r5, r0
 800e1a0:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800e1a2:	b33c      	cbz	r4, 800e1f4 <rmw_context_fini+0x5c>
 800e1a4:	2600      	movs	r6, #0
 800e1a6:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 800e1aa:	691a      	ldr	r2, [r3, #16]
 800e1ac:	4282      	cmp	r2, r0
 800e1ae:	d018      	beq.n	800e1e2 <rmw_context_fini+0x4a>
 800e1b0:	2c00      	cmp	r4, #0
 800e1b2:	d1f8      	bne.n	800e1a6 <rmw_context_fini+0xe>
 800e1b4:	b188      	cbz	r0, 800e1da <rmw_context_fini+0x42>
 800e1b6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e1ba:	789b      	ldrb	r3, [r3, #2]
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	bf14      	ite	ne
 800e1c0:	210a      	movne	r1, #10
 800e1c2:	2100      	moveq	r1, #0
 800e1c4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e1c8:	f002 fac8 	bl	801075c <uxr_delete_session_retries>
 800e1cc:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800e1ce:	f000 fdbf 	bl	800ed50 <rmw_uxrce_fini_session_memory>
 800e1d2:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800e1d4:	3010      	adds	r0, #16
 800e1d6:	f001 fe1f 	bl	800fe18 <uxr_close_custom_transport>
 800e1da:	2300      	movs	r3, #0
 800e1dc:	4630      	mov	r0, r6
 800e1de:	64ab      	str	r3, [r5, #72]	; 0x48
 800e1e0:	bd70      	pop	{r4, r5, r6, pc}
 800e1e2:	f103 0018 	add.w	r0, r3, #24
 800e1e6:	f000 f89b 	bl	800e320 <rmw_destroy_node>
 800e1ea:	4606      	mov	r6, r0
 800e1ec:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800e1ee:	2c00      	cmp	r4, #0
 800e1f0:	d1d9      	bne.n	800e1a6 <rmw_context_fini+0xe>
 800e1f2:	e7df      	b.n	800e1b4 <rmw_context_fini+0x1c>
 800e1f4:	4626      	mov	r6, r4
 800e1f6:	e7dd      	b.n	800e1b4 <rmw_context_fini+0x1c>
 800e1f8:	2001421c 	.word	0x2001421c

0800e1fc <create_node>:
 800e1fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e200:	b083      	sub	sp, #12
 800e202:	2b00      	cmp	r3, #0
 800e204:	d05f      	beq.n	800e2c6 <create_node+0xca>
 800e206:	4606      	mov	r6, r0
 800e208:	4835      	ldr	r0, [pc, #212]	; (800e2e0 <create_node+0xe4>)
 800e20a:	460f      	mov	r7, r1
 800e20c:	4690      	mov	r8, r2
 800e20e:	461d      	mov	r5, r3
 800e210:	f007 f8f8 	bl	8015404 <get_memory>
 800e214:	2800      	cmp	r0, #0
 800e216:	d056      	beq.n	800e2c6 <create_node+0xca>
 800e218:	68c4      	ldr	r4, [r0, #12]
 800e21a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800e21c:	6123      	str	r3, [r4, #16]
 800e21e:	f007 f947 	bl	80154b0 <rmw_get_implementation_identifier>
 800e222:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800e226:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800e22a:	f8c4 9020 	str.w	r9, [r4, #32]
 800e22e:	4630      	mov	r0, r6
 800e230:	f7f1 ffd8 	bl	80001e4 <strlen>
 800e234:	1c42      	adds	r2, r0, #1
 800e236:	2a3c      	cmp	r2, #60	; 0x3c
 800e238:	f104 0518 	add.w	r5, r4, #24
 800e23c:	d840      	bhi.n	800e2c0 <create_node+0xc4>
 800e23e:	4648      	mov	r0, r9
 800e240:	4631      	mov	r1, r6
 800e242:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800e246:	f008 fd99 	bl	8016d7c <memcpy>
 800e24a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800e24e:	4638      	mov	r0, r7
 800e250:	f7f1 ffc8 	bl	80001e4 <strlen>
 800e254:	1c42      	adds	r2, r0, #1
 800e256:	2a3c      	cmp	r2, #60	; 0x3c
 800e258:	d832      	bhi.n	800e2c0 <create_node+0xc4>
 800e25a:	4639      	mov	r1, r7
 800e25c:	4648      	mov	r0, r9
 800e25e:	f008 fd8d 	bl	8016d7c <memcpy>
 800e262:	f241 5394 	movw	r3, #5524	; 0x1594
 800e266:	6922      	ldr	r2, [r4, #16]
 800e268:	5ad0      	ldrh	r0, [r2, r3]
 800e26a:	2101      	movs	r1, #1
 800e26c:	eb00 0c01 	add.w	ip, r0, r1
 800e270:	f822 c003 	strh.w	ip, [r2, r3]
 800e274:	f001 fdd4 	bl	800fe20 <uxr_object_id>
 800e278:	6160      	str	r0, [r4, #20]
 800e27a:	783b      	ldrb	r3, [r7, #0]
 800e27c:	2b2f      	cmp	r3, #47	; 0x2f
 800e27e:	d127      	bne.n	800e2d0 <create_node+0xd4>
 800e280:	787b      	ldrb	r3, [r7, #1]
 800e282:	bb2b      	cbnz	r3, 800e2d0 <create_node+0xd4>
 800e284:	4a17      	ldr	r2, [pc, #92]	; (800e2e4 <create_node+0xe8>)
 800e286:	4818      	ldr	r0, [pc, #96]	; (800e2e8 <create_node+0xec>)
 800e288:	4633      	mov	r3, r6
 800e28a:	213c      	movs	r1, #60	; 0x3c
 800e28c:	f008 fefe 	bl	801708c <sniprintf>
 800e290:	6920      	ldr	r0, [r4, #16]
 800e292:	4b15      	ldr	r3, [pc, #84]	; (800e2e8 <create_node+0xec>)
 800e294:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800e298:	9300      	str	r3, [sp, #0]
 800e29a:	2306      	movs	r3, #6
 800e29c:	9301      	str	r3, [sp, #4]
 800e29e:	6811      	ldr	r1, [r2, #0]
 800e2a0:	6962      	ldr	r2, [r4, #20]
 800e2a2:	fa1f f388 	uxth.w	r3, r8
 800e2a6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e2aa:	f001 fb37 	bl	800f91c <uxr_buffer_create_participant_bin>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	6920      	ldr	r0, [r4, #16]
 800e2b2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e2b6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e2ba:	f000 fead 	bl	800f018 <run_xrce_session>
 800e2be:	b918      	cbnz	r0, 800e2c8 <create_node+0xcc>
 800e2c0:	4628      	mov	r0, r5
 800e2c2:	f000 fd4b 	bl	800ed5c <rmw_uxrce_fini_node_memory>
 800e2c6:	2500      	movs	r5, #0
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	b003      	add	sp, #12
 800e2cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2d0:	4a06      	ldr	r2, [pc, #24]	; (800e2ec <create_node+0xf0>)
 800e2d2:	9600      	str	r6, [sp, #0]
 800e2d4:	463b      	mov	r3, r7
 800e2d6:	213c      	movs	r1, #60	; 0x3c
 800e2d8:	4803      	ldr	r0, [pc, #12]	; (800e2e8 <create_node+0xec>)
 800e2da:	f008 fed7 	bl	801708c <sniprintf>
 800e2de:	e7d7      	b.n	800e290 <create_node+0x94>
 800e2e0:	2001421c 	.word	0x2001421c
 800e2e4:	0801959c 	.word	0x0801959c
 800e2e8:	20010248 	.word	0x20010248
 800e2ec:	08019584 	.word	0x08019584

0800e2f0 <rmw_create_node>:
 800e2f0:	b199      	cbz	r1, 800e31a <rmw_create_node+0x2a>
 800e2f2:	b430      	push	{r4, r5}
 800e2f4:	4615      	mov	r5, r2
 800e2f6:	461a      	mov	r2, r3
 800e2f8:	780b      	ldrb	r3, [r1, #0]
 800e2fa:	460c      	mov	r4, r1
 800e2fc:	b153      	cbz	r3, 800e314 <rmw_create_node+0x24>
 800e2fe:	b14d      	cbz	r5, 800e314 <rmw_create_node+0x24>
 800e300:	782b      	ldrb	r3, [r5, #0]
 800e302:	b13b      	cbz	r3, 800e314 <rmw_create_node+0x24>
 800e304:	b902      	cbnz	r2, 800e308 <rmw_create_node+0x18>
 800e306:	69c2      	ldr	r2, [r0, #28]
 800e308:	4603      	mov	r3, r0
 800e30a:	4629      	mov	r1, r5
 800e30c:	4620      	mov	r0, r4
 800e30e:	bc30      	pop	{r4, r5}
 800e310:	f7ff bf74 	b.w	800e1fc <create_node>
 800e314:	2000      	movs	r0, #0
 800e316:	bc30      	pop	{r4, r5}
 800e318:	4770      	bx	lr
 800e31a:	2000      	movs	r0, #0
 800e31c:	4770      	bx	lr
 800e31e:	bf00      	nop

0800e320 <rmw_destroy_node>:
 800e320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e322:	2800      	cmp	r0, #0
 800e324:	d05b      	beq.n	800e3de <rmw_destroy_node+0xbe>
 800e326:	4607      	mov	r7, r0
 800e328:	6800      	ldr	r0, [r0, #0]
 800e32a:	f000 fedf 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 800e32e:	2800      	cmp	r0, #0
 800e330:	d055      	beq.n	800e3de <rmw_destroy_node+0xbe>
 800e332:	687c      	ldr	r4, [r7, #4]
 800e334:	2c00      	cmp	r4, #0
 800e336:	d052      	beq.n	800e3de <rmw_destroy_node+0xbe>
 800e338:	4b2f      	ldr	r3, [pc, #188]	; (800e3f8 <rmw_destroy_node+0xd8>)
 800e33a:	681d      	ldr	r5, [r3, #0]
 800e33c:	2d00      	cmp	r5, #0
 800e33e:	d059      	beq.n	800e3f4 <rmw_destroy_node+0xd4>
 800e340:	2600      	movs	r6, #0
 800e342:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800e346:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800e34a:	429c      	cmp	r4, r3
 800e34c:	d04a      	beq.n	800e3e4 <rmw_destroy_node+0xc4>
 800e34e:	2d00      	cmp	r5, #0
 800e350:	d1f7      	bne.n	800e342 <rmw_destroy_node+0x22>
 800e352:	4b2a      	ldr	r3, [pc, #168]	; (800e3fc <rmw_destroy_node+0xdc>)
 800e354:	681d      	ldr	r5, [r3, #0]
 800e356:	b15d      	cbz	r5, 800e370 <rmw_destroy_node+0x50>
 800e358:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800e35c:	6a0b      	ldr	r3, [r1, #32]
 800e35e:	429c      	cmp	r4, r3
 800e360:	d1f9      	bne.n	800e356 <rmw_destroy_node+0x36>
 800e362:	317c      	adds	r1, #124	; 0x7c
 800e364:	4638      	mov	r0, r7
 800e366:	f000 fb11 	bl	800e98c <rmw_destroy_subscription>
 800e36a:	4606      	mov	r6, r0
 800e36c:	2d00      	cmp	r5, #0
 800e36e:	d1f3      	bne.n	800e358 <rmw_destroy_node+0x38>
 800e370:	4b23      	ldr	r3, [pc, #140]	; (800e400 <rmw_destroy_node+0xe0>)
 800e372:	681d      	ldr	r5, [r3, #0]
 800e374:	b15d      	cbz	r5, 800e38e <rmw_destroy_node+0x6e>
 800e376:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800e37a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800e37c:	429c      	cmp	r4, r3
 800e37e:	d1f9      	bne.n	800e374 <rmw_destroy_node+0x54>
 800e380:	317c      	adds	r1, #124	; 0x7c
 800e382:	4638      	mov	r0, r7
 800e384:	f000 f9e2 	bl	800e74c <rmw_destroy_service>
 800e388:	4606      	mov	r6, r0
 800e38a:	2d00      	cmp	r5, #0
 800e38c:	d1f3      	bne.n	800e376 <rmw_destroy_node+0x56>
 800e38e:	4b1d      	ldr	r3, [pc, #116]	; (800e404 <rmw_destroy_node+0xe4>)
 800e390:	681d      	ldr	r5, [r3, #0]
 800e392:	b15d      	cbz	r5, 800e3ac <rmw_destroy_node+0x8c>
 800e394:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800e398:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800e39a:	429c      	cmp	r4, r3
 800e39c:	d1f9      	bne.n	800e392 <rmw_destroy_node+0x72>
 800e39e:	317c      	adds	r1, #124	; 0x7c
 800e3a0:	4638      	mov	r0, r7
 800e3a2:	f007 f853 	bl	801544c <rmw_destroy_client>
 800e3a6:	4606      	mov	r6, r0
 800e3a8:	2d00      	cmp	r5, #0
 800e3aa:	d1f3      	bne.n	800e394 <rmw_destroy_node+0x74>
 800e3ac:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800e3b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e3b4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e3b8:	6819      	ldr	r1, [r3, #0]
 800e3ba:	f001 fa63 	bl	800f884 <uxr_buffer_delete_entity>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	6920      	ldr	r0, [r4, #16]
 800e3c2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e3c6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e3ca:	f000 fe25 	bl	800f018 <run_xrce_session>
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	bf08      	it	eq
 800e3d2:	2602      	moveq	r6, #2
 800e3d4:	4638      	mov	r0, r7
 800e3d6:	f000 fcc1 	bl	800ed5c <rmw_uxrce_fini_node_memory>
 800e3da:	4630      	mov	r0, r6
 800e3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3de:	2601      	movs	r6, #1
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3e4:	3184      	adds	r1, #132	; 0x84
 800e3e6:	4638      	mov	r0, r7
 800e3e8:	f000 f960 	bl	800e6ac <rmw_destroy_publisher>
 800e3ec:	4606      	mov	r6, r0
 800e3ee:	2d00      	cmp	r5, #0
 800e3f0:	d1a7      	bne.n	800e342 <rmw_destroy_node+0x22>
 800e3f2:	e7ae      	b.n	800e352 <rmw_destroy_node+0x32>
 800e3f4:	462e      	mov	r6, r5
 800e3f6:	e7ac      	b.n	800e352 <rmw_destroy_node+0x32>
 800e3f8:	20011258 	.word	0x20011258
 800e3fc:	200144b4 	.word	0x200144b4
 800e400:	200144a4 	.word	0x200144a4
 800e404:	20011ad8 	.word	0x20011ad8

0800e408 <rmw_node_get_graph_guard_condition>:
 800e408:	6843      	ldr	r3, [r0, #4]
 800e40a:	6918      	ldr	r0, [r3, #16]
 800e40c:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800e410:	4770      	bx	lr
 800e412:	bf00      	nop

0800e414 <flush_session>:
 800e414:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800e416:	f002 bb2d 	b.w	8010a74 <uxr_run_session_until_confirm_delivery>
 800e41a:	bf00      	nop

0800e41c <rmw_publish>:
 800e41c:	2800      	cmp	r0, #0
 800e41e:	d053      	beq.n	800e4c8 <rmw_publish+0xac>
 800e420:	b570      	push	{r4, r5, r6, lr}
 800e422:	460d      	mov	r5, r1
 800e424:	b08e      	sub	sp, #56	; 0x38
 800e426:	2900      	cmp	r1, #0
 800e428:	d04b      	beq.n	800e4c2 <rmw_publish+0xa6>
 800e42a:	4604      	mov	r4, r0
 800e42c:	6800      	ldr	r0, [r0, #0]
 800e42e:	f000 fe5d 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 800e432:	2800      	cmp	r0, #0
 800e434:	d045      	beq.n	800e4c2 <rmw_publish+0xa6>
 800e436:	6866      	ldr	r6, [r4, #4]
 800e438:	2e00      	cmp	r6, #0
 800e43a:	d042      	beq.n	800e4c2 <rmw_publish+0xa6>
 800e43c:	69b4      	ldr	r4, [r6, #24]
 800e43e:	4628      	mov	r0, r5
 800e440:	6923      	ldr	r3, [r4, #16]
 800e442:	4798      	blx	r3
 800e444:	69f3      	ldr	r3, [r6, #28]
 800e446:	9005      	str	r0, [sp, #20]
 800e448:	b113      	cbz	r3, 800e450 <rmw_publish+0x34>
 800e44a:	a805      	add	r0, sp, #20
 800e44c:	4798      	blx	r3
 800e44e:	9805      	ldr	r0, [sp, #20]
 800e450:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e454:	691b      	ldr	r3, [r3, #16]
 800e456:	9000      	str	r0, [sp, #0]
 800e458:	6972      	ldr	r2, [r6, #20]
 800e45a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800e45c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800e460:	ab06      	add	r3, sp, #24
 800e462:	f003 fb99 	bl	8011b98 <uxr_prepare_output_stream>
 800e466:	b1d8      	cbz	r0, 800e4a0 <rmw_publish+0x84>
 800e468:	68a3      	ldr	r3, [r4, #8]
 800e46a:	4628      	mov	r0, r5
 800e46c:	a906      	add	r1, sp, #24
 800e46e:	4798      	blx	r3
 800e470:	6a33      	ldr	r3, [r6, #32]
 800e472:	4604      	mov	r4, r0
 800e474:	b10b      	cbz	r3, 800e47a <rmw_publish+0x5e>
 800e476:	a806      	add	r0, sp, #24
 800e478:	4798      	blx	r3
 800e47a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800e47e:	2b01      	cmp	r3, #1
 800e480:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e484:	d022      	beq.n	800e4cc <rmw_publish+0xb0>
 800e486:	6918      	ldr	r0, [r3, #16]
 800e488:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800e48a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e48e:	f002 faf1 	bl	8010a74 <uxr_run_session_until_confirm_delivery>
 800e492:	4020      	ands	r0, r4
 800e494:	b2c4      	uxtb	r4, r0
 800e496:	f084 0001 	eor.w	r0, r4, #1
 800e49a:	b2c0      	uxtb	r0, r0
 800e49c:	b00e      	add	sp, #56	; 0x38
 800e49e:	bd70      	pop	{r4, r5, r6, pc}
 800e4a0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e4a4:	4a0c      	ldr	r2, [pc, #48]	; (800e4d8 <rmw_publish+0xbc>)
 800e4a6:	6918      	ldr	r0, [r3, #16]
 800e4a8:	9b05      	ldr	r3, [sp, #20]
 800e4aa:	9300      	str	r3, [sp, #0]
 800e4ac:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800e4b0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e4b4:	6972      	ldr	r2, [r6, #20]
 800e4b6:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800e4b8:	ab06      	add	r3, sp, #24
 800e4ba:	f003 fb9d 	bl	8011bf8 <uxr_prepare_output_stream_fragmented>
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	d1d2      	bne.n	800e468 <rmw_publish+0x4c>
 800e4c2:	2001      	movs	r0, #1
 800e4c4:	b00e      	add	sp, #56	; 0x38
 800e4c6:	bd70      	pop	{r4, r5, r6, pc}
 800e4c8:	2001      	movs	r0, #1
 800e4ca:	4770      	bx	lr
 800e4cc:	6918      	ldr	r0, [r3, #16]
 800e4ce:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e4d2:	f002 fa3b 	bl	801094c <uxr_flash_output_streams>
 800e4d6:	e7de      	b.n	800e496 <rmw_publish+0x7a>
 800e4d8:	0800e415 	.word	0x0800e415

0800e4dc <rmw_create_publisher>:
 800e4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4e0:	b086      	sub	sp, #24
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	f000 80d5 	beq.w	800e692 <rmw_create_publisher+0x1b6>
 800e4e8:	460e      	mov	r6, r1
 800e4ea:	2900      	cmp	r1, #0
 800e4ec:	f000 80d1 	beq.w	800e692 <rmw_create_publisher+0x1b6>
 800e4f0:	4604      	mov	r4, r0
 800e4f2:	6800      	ldr	r0, [r0, #0]
 800e4f4:	4615      	mov	r5, r2
 800e4f6:	4698      	mov	r8, r3
 800e4f8:	f000 fdf8 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	f000 80c8 	beq.w	800e692 <rmw_create_publisher+0x1b6>
 800e502:	2d00      	cmp	r5, #0
 800e504:	f000 80c5 	beq.w	800e692 <rmw_create_publisher+0x1b6>
 800e508:	782b      	ldrb	r3, [r5, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	f000 80c1 	beq.w	800e692 <rmw_create_publisher+0x1b6>
 800e510:	f1b8 0f00 	cmp.w	r8, #0
 800e514:	f000 80bd 	beq.w	800e692 <rmw_create_publisher+0x1b6>
 800e518:	4860      	ldr	r0, [pc, #384]	; (800e69c <rmw_create_publisher+0x1c0>)
 800e51a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e51e:	f006 ff71 	bl	8015404 <get_memory>
 800e522:	2800      	cmp	r0, #0
 800e524:	f000 80b5 	beq.w	800e692 <rmw_create_publisher+0x1b6>
 800e528:	68c4      	ldr	r4, [r0, #12]
 800e52a:	2300      	movs	r3, #0
 800e52c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800e530:	f006 ffbe 	bl	80154b0 <rmw_get_implementation_identifier>
 800e534:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800e538:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800e53c:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800e540:	4628      	mov	r0, r5
 800e542:	f7f1 fe4f 	bl	80001e4 <strlen>
 800e546:	3001      	adds	r0, #1
 800e548:	283c      	cmp	r0, #60	; 0x3c
 800e54a:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800e54e:	f200 809d 	bhi.w	800e68c <rmw_create_publisher+0x1b0>
 800e552:	4a53      	ldr	r2, [pc, #332]	; (800e6a0 <rmw_create_publisher+0x1c4>)
 800e554:	462b      	mov	r3, r5
 800e556:	213c      	movs	r1, #60	; 0x3c
 800e558:	4650      	mov	r0, sl
 800e55a:	f008 fd97 	bl	801708c <sniprintf>
 800e55e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e562:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800e566:	4641      	mov	r1, r8
 800e568:	2250      	movs	r2, #80	; 0x50
 800e56a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800e56e:	f008 fc05 	bl	8016d7c <memcpy>
 800e572:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e576:	494b      	ldr	r1, [pc, #300]	; (800e6a4 <rmw_create_publisher+0x1c8>)
 800e578:	2b02      	cmp	r3, #2
 800e57a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e57e:	bf0c      	ite	eq
 800e580:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800e584:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800e588:	67a3      	str	r3, [r4, #120]	; 0x78
 800e58a:	2300      	movs	r3, #0
 800e58c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e590:	4630      	mov	r0, r6
 800e592:	f000 fdb9 	bl	800f108 <get_message_typesupport_handle>
 800e596:	2800      	cmp	r0, #0
 800e598:	d078      	beq.n	800e68c <rmw_create_publisher+0x1b0>
 800e59a:	6842      	ldr	r2, [r0, #4]
 800e59c:	61a2      	str	r2, [r4, #24]
 800e59e:	2a00      	cmp	r2, #0
 800e5a0:	d074      	beq.n	800e68c <rmw_create_publisher+0x1b0>
 800e5a2:	4629      	mov	r1, r5
 800e5a4:	4643      	mov	r3, r8
 800e5a6:	4648      	mov	r0, r9
 800e5a8:	f006 ff88 	bl	80154bc <create_topic>
 800e5ac:	6260      	str	r0, [r4, #36]	; 0x24
 800e5ae:	2800      	cmp	r0, #0
 800e5b0:	d06c      	beq.n	800e68c <rmw_create_publisher+0x1b0>
 800e5b2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e5b6:	f241 5398 	movw	r3, #5528	; 0x1598
 800e5ba:	2103      	movs	r1, #3
 800e5bc:	5ad0      	ldrh	r0, [r2, r3]
 800e5be:	1c45      	adds	r5, r0, #1
 800e5c0:	52d5      	strh	r5, [r2, r3]
 800e5c2:	f001 fc2d 	bl	800fe20 <uxr_object_id>
 800e5c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e5ca:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800e5ce:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800e5d2:	6912      	ldr	r2, [r2, #16]
 800e5d4:	6120      	str	r0, [r4, #16]
 800e5d6:	2606      	movs	r6, #6
 800e5d8:	9600      	str	r6, [sp, #0]
 800e5da:	6819      	ldr	r1, [r3, #0]
 800e5dc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e5e0:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800e5e4:	6922      	ldr	r2, [r4, #16]
 800e5e6:	f001 f9ff 	bl	800f9e8 <uxr_buffer_create_publisher_bin>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e5f0:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e5f4:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e5f8:	f000 fd0e 	bl	800f018 <run_xrce_session>
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	d041      	beq.n	800e684 <rmw_create_publisher+0x1a8>
 800e600:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e604:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800e608:	f241 539a 	movw	r3, #5530	; 0x159a
 800e60c:	2105      	movs	r1, #5
 800e60e:	5ad0      	ldrh	r0, [r2, r3]
 800e610:	1c45      	adds	r5, r0, #1
 800e612:	52d5      	strh	r5, [r2, r3]
 800e614:	f001 fc04 	bl	800fe20 <uxr_object_id>
 800e618:	6160      	str	r0, [r4, #20]
 800e61a:	f898 1009 	ldrb.w	r1, [r8, #9]
 800e61e:	f898 2000 	ldrb.w	r2, [r8]
 800e622:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e626:	f8d9 5010 	ldr.w	r5, [r9, #16]
 800e62a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800e62e:	f8d5 5384 	ldr.w	r5, [r5, #900]	; 0x384
 800e632:	6900      	ldr	r0, [r0, #16]
 800e634:	f8b8 c004 	ldrh.w	ip, [r8, #4]
 800e638:	f8cd c00c 	str.w	ip, [sp, #12]
 800e63c:	3902      	subs	r1, #2
 800e63e:	f1a2 0201 	sub.w	r2, r2, #1
 800e642:	bf18      	it	ne
 800e644:	2101      	movne	r1, #1
 800e646:	fab2 f282 	clz	r2, r2
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	bf8c      	ite	hi
 800e64e:	2300      	movhi	r3, #0
 800e650:	2301      	movls	r3, #1
 800e652:	0952      	lsrs	r2, r2, #5
 800e654:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e658:	9605      	str	r6, [sp, #20]
 800e65a:	9104      	str	r1, [sp, #16]
 800e65c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e65e:	691b      	ldr	r3, [r3, #16]
 800e660:	9300      	str	r3, [sp, #0]
 800e662:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e666:	6829      	ldr	r1, [r5, #0]
 800e668:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e66c:	f001 fa1a 	bl	800faa4 <uxr_buffer_create_datawriter_bin>
 800e670:	4602      	mov	r2, r0
 800e672:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e676:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e67a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e67e:	f000 fccb 	bl	800f018 <run_xrce_session>
 800e682:	b938      	cbnz	r0, 800e694 <rmw_create_publisher+0x1b8>
 800e684:	4805      	ldr	r0, [pc, #20]	; (800e69c <rmw_create_publisher+0x1c0>)
 800e686:	4621      	mov	r1, r4
 800e688:	f006 fecc 	bl	8015424 <put_memory>
 800e68c:	4638      	mov	r0, r7
 800e68e:	f000 fb7b 	bl	800ed88 <rmw_uxrce_fini_publisher_memory>
 800e692:	2700      	movs	r7, #0
 800e694:	4638      	mov	r0, r7
 800e696:	b006      	add	sp, #24
 800e698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e69c:	20011258 	.word	0x20011258
 800e6a0:	0801959c 	.word	0x0801959c
 800e6a4:	08019348 	.word	0x08019348

0800e6a8 <rmw_publisher_get_actual_qos>:
 800e6a8:	2000      	movs	r0, #0
 800e6aa:	4770      	bx	lr

0800e6ac <rmw_destroy_publisher>:
 800e6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ae:	b128      	cbz	r0, 800e6bc <rmw_destroy_publisher+0x10>
 800e6b0:	4604      	mov	r4, r0
 800e6b2:	6800      	ldr	r0, [r0, #0]
 800e6b4:	460d      	mov	r5, r1
 800e6b6:	f000 fd19 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 800e6ba:	b910      	cbnz	r0, 800e6c2 <rmw_destroy_publisher+0x16>
 800e6bc:	2401      	movs	r4, #1
 800e6be:	4620      	mov	r0, r4
 800e6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6c2:	6863      	ldr	r3, [r4, #4]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d0f9      	beq.n	800e6bc <rmw_destroy_publisher+0x10>
 800e6c8:	2d00      	cmp	r5, #0
 800e6ca:	d0f7      	beq.n	800e6bc <rmw_destroy_publisher+0x10>
 800e6cc:	6828      	ldr	r0, [r5, #0]
 800e6ce:	f000 fd0d 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 800e6d2:	2800      	cmp	r0, #0
 800e6d4:	d0f2      	beq.n	800e6bc <rmw_destroy_publisher+0x10>
 800e6d6:	686c      	ldr	r4, [r5, #4]
 800e6d8:	2c00      	cmp	r4, #0
 800e6da:	d0ef      	beq.n	800e6bc <rmw_destroy_publisher+0x10>
 800e6dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e6de:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800e6e2:	f006 ff3b 	bl	801555c <destroy_topic>
 800e6e6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e6ea:	6962      	ldr	r2, [r4, #20]
 800e6ec:	6918      	ldr	r0, [r3, #16]
 800e6ee:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e6f2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e6f6:	6819      	ldr	r1, [r3, #0]
 800e6f8:	f001 f8c4 	bl	800f884 <uxr_buffer_delete_entity>
 800e6fc:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800e700:	6922      	ldr	r2, [r4, #16]
 800e702:	4603      	mov	r3, r0
 800e704:	6908      	ldr	r0, [r1, #16]
 800e706:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e70a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e70e:	6809      	ldr	r1, [r1, #0]
 800e710:	461c      	mov	r4, r3
 800e712:	f001 f8b7 	bl	800f884 <uxr_buffer_delete_entity>
 800e716:	4606      	mov	r6, r0
 800e718:	6938      	ldr	r0, [r7, #16]
 800e71a:	4622      	mov	r2, r4
 800e71c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e720:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e724:	f000 fc78 	bl	800f018 <run_xrce_session>
 800e728:	4604      	mov	r4, r0
 800e72a:	6938      	ldr	r0, [r7, #16]
 800e72c:	4632      	mov	r2, r6
 800e72e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e732:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e736:	f000 fc6f 	bl	800f018 <run_xrce_session>
 800e73a:	b12c      	cbz	r4, 800e748 <rmw_destroy_publisher+0x9c>
 800e73c:	b120      	cbz	r0, 800e748 <rmw_destroy_publisher+0x9c>
 800e73e:	2400      	movs	r4, #0
 800e740:	4628      	mov	r0, r5
 800e742:	f000 fb21 	bl	800ed88 <rmw_uxrce_fini_publisher_memory>
 800e746:	e7ba      	b.n	800e6be <rmw_destroy_publisher+0x12>
 800e748:	2402      	movs	r4, #2
 800e74a:	e7f9      	b.n	800e740 <rmw_destroy_publisher+0x94>

0800e74c <rmw_destroy_service>:
 800e74c:	b538      	push	{r3, r4, r5, lr}
 800e74e:	b128      	cbz	r0, 800e75c <rmw_destroy_service+0x10>
 800e750:	4604      	mov	r4, r0
 800e752:	6800      	ldr	r0, [r0, #0]
 800e754:	460d      	mov	r5, r1
 800e756:	f000 fcc9 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 800e75a:	b910      	cbnz	r0, 800e762 <rmw_destroy_service+0x16>
 800e75c:	2401      	movs	r4, #1
 800e75e:	4620      	mov	r0, r4
 800e760:	bd38      	pop	{r3, r4, r5, pc}
 800e762:	6863      	ldr	r3, [r4, #4]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d0f9      	beq.n	800e75c <rmw_destroy_service+0x10>
 800e768:	2d00      	cmp	r5, #0
 800e76a:	d0f7      	beq.n	800e75c <rmw_destroy_service+0x10>
 800e76c:	6828      	ldr	r0, [r5, #0]
 800e76e:	f000 fcbd 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 800e772:	2800      	cmp	r0, #0
 800e774:	d0f2      	beq.n	800e75c <rmw_destroy_service+0x10>
 800e776:	686b      	ldr	r3, [r5, #4]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d0ef      	beq.n	800e75c <rmw_destroy_service+0x10>
 800e77c:	6864      	ldr	r4, [r4, #4]
 800e77e:	691a      	ldr	r2, [r3, #16]
 800e780:	6920      	ldr	r0, [r4, #16]
 800e782:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e786:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e78a:	6819      	ldr	r1, [r3, #0]
 800e78c:	f001 f87a 	bl	800f884 <uxr_buffer_delete_entity>
 800e790:	4602      	mov	r2, r0
 800e792:	6920      	ldr	r0, [r4, #16]
 800e794:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e798:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e79c:	f000 fc3c 	bl	800f018 <run_xrce_session>
 800e7a0:	2800      	cmp	r0, #0
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	bf14      	ite	ne
 800e7a6:	2400      	movne	r4, #0
 800e7a8:	2402      	moveq	r4, #2
 800e7aa:	f000 fb15 	bl	800edd8 <rmw_uxrce_fini_service_memory>
 800e7ae:	e7d6      	b.n	800e75e <rmw_destroy_service+0x12>

0800e7b0 <rmw_create_subscription>:
 800e7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7b4:	b08a      	sub	sp, #40	; 0x28
 800e7b6:	2800      	cmp	r0, #0
 800e7b8:	f000 80db 	beq.w	800e972 <rmw_create_subscription+0x1c2>
 800e7bc:	4688      	mov	r8, r1
 800e7be:	2900      	cmp	r1, #0
 800e7c0:	f000 80d7 	beq.w	800e972 <rmw_create_subscription+0x1c2>
 800e7c4:	4604      	mov	r4, r0
 800e7c6:	6800      	ldr	r0, [r0, #0]
 800e7c8:	4615      	mov	r5, r2
 800e7ca:	461e      	mov	r6, r3
 800e7cc:	f000 fc8e 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	f000 80ce 	beq.w	800e972 <rmw_create_subscription+0x1c2>
 800e7d6:	2d00      	cmp	r5, #0
 800e7d8:	f000 80cb 	beq.w	800e972 <rmw_create_subscription+0x1c2>
 800e7dc:	782b      	ldrb	r3, [r5, #0]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	f000 80c7 	beq.w	800e972 <rmw_create_subscription+0x1c2>
 800e7e4:	2e00      	cmp	r6, #0
 800e7e6:	f000 80c4 	beq.w	800e972 <rmw_create_subscription+0x1c2>
 800e7ea:	4864      	ldr	r0, [pc, #400]	; (800e97c <rmw_create_subscription+0x1cc>)
 800e7ec:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e7f0:	f006 fe08 	bl	8015404 <get_memory>
 800e7f4:	4604      	mov	r4, r0
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	f000 80bc 	beq.w	800e974 <rmw_create_subscription+0x1c4>
 800e7fc:	68c7      	ldr	r7, [r0, #12]
 800e7fe:	2300      	movs	r3, #0
 800e800:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e804:	f006 fe54 	bl	80154b0 <rmw_get_implementation_identifier>
 800e808:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 800e80c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800e80e:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800e812:	4628      	mov	r0, r5
 800e814:	f7f1 fce6 	bl	80001e4 <strlen>
 800e818:	3001      	adds	r0, #1
 800e81a:	283c      	cmp	r0, #60	; 0x3c
 800e81c:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800e820:	f200 80a4 	bhi.w	800e96c <rmw_create_subscription+0x1bc>
 800e824:	4a56      	ldr	r2, [pc, #344]	; (800e980 <rmw_create_subscription+0x1d0>)
 800e826:	462b      	mov	r3, r5
 800e828:	213c      	movs	r1, #60	; 0x3c
 800e82a:	4650      	mov	r0, sl
 800e82c:	f008 fc2e 	bl	801708c <sniprintf>
 800e830:	4631      	mov	r1, r6
 800e832:	f8c7 9020 	str.w	r9, [r7, #32]
 800e836:	2250      	movs	r2, #80	; 0x50
 800e838:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e83c:	f008 fa9e 	bl	8016d7c <memcpy>
 800e840:	4950      	ldr	r1, [pc, #320]	; (800e984 <rmw_create_subscription+0x1d4>)
 800e842:	4640      	mov	r0, r8
 800e844:	f000 fc60 	bl	800f108 <get_message_typesupport_handle>
 800e848:	2800      	cmp	r0, #0
 800e84a:	f000 808f 	beq.w	800e96c <rmw_create_subscription+0x1bc>
 800e84e:	6842      	ldr	r2, [r0, #4]
 800e850:	61ba      	str	r2, [r7, #24]
 800e852:	2a00      	cmp	r2, #0
 800e854:	f000 808a 	beq.w	800e96c <rmw_create_subscription+0x1bc>
 800e858:	4629      	mov	r1, r5
 800e85a:	4633      	mov	r3, r6
 800e85c:	4648      	mov	r0, r9
 800e85e:	f006 fe2d 	bl	80154bc <create_topic>
 800e862:	61f8      	str	r0, [r7, #28]
 800e864:	2800      	cmp	r0, #0
 800e866:	f000 8081 	beq.w	800e96c <rmw_create_subscription+0x1bc>
 800e86a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e86e:	f241 539c 	movw	r3, #5532	; 0x159c
 800e872:	2104      	movs	r1, #4
 800e874:	5ad0      	ldrh	r0, [r2, r3]
 800e876:	1c45      	adds	r5, r0, #1
 800e878:	52d5      	strh	r5, [r2, r3]
 800e87a:	f001 fad1 	bl	800fe20 <uxr_object_id>
 800e87e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e882:	6138      	str	r0, [r7, #16]
 800e884:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800e888:	f04f 0806 	mov.w	r8, #6
 800e88c:	f8cd 8000 	str.w	r8, [sp]
 800e890:	6811      	ldr	r1, [r2, #0]
 800e892:	693a      	ldr	r2, [r7, #16]
 800e894:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800e898:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e89c:	f001 f8d2 	bl	800fa44 <uxr_buffer_create_subscriber_bin>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e8a6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e8aa:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e8ae:	f000 fbb3 	bl	800f018 <run_xrce_session>
 800e8b2:	2800      	cmp	r0, #0
 800e8b4:	d056      	beq.n	800e964 <rmw_create_subscription+0x1b4>
 800e8b6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e8ba:	f241 539e 	movw	r3, #5534	; 0x159e
 800e8be:	4641      	mov	r1, r8
 800e8c0:	5ad0      	ldrh	r0, [r2, r3]
 800e8c2:	1c45      	adds	r5, r0, #1
 800e8c4:	52d5      	strh	r5, [r2, r3]
 800e8c6:	f001 faab 	bl	800fe20 <uxr_object_id>
 800e8ca:	6178      	str	r0, [r7, #20]
 800e8cc:	7a71      	ldrb	r1, [r6, #9]
 800e8ce:	7832      	ldrb	r2, [r6, #0]
 800e8d0:	7a33      	ldrb	r3, [r6, #8]
 800e8d2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e8d6:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 800e8da:	f8d0 5384 	ldr.w	r5, [r0, #900]	; 0x384
 800e8de:	f8cd 8014 	str.w	r8, [sp, #20]
 800e8e2:	3902      	subs	r1, #2
 800e8e4:	f1a2 0201 	sub.w	r2, r2, #1
 800e8e8:	bf18      	it	ne
 800e8ea:	2101      	movne	r1, #1
 800e8ec:	fab2 f282 	clz	r2, r2
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	bf8c      	ite	hi
 800e8f4:	2300      	movhi	r3, #0
 800e8f6:	2301      	movls	r3, #1
 800e8f8:	0952      	lsrs	r2, r2, #5
 800e8fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e8fe:	9104      	str	r1, [sp, #16]
 800e900:	f8cd c00c 	str.w	ip, [sp, #12]
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	691b      	ldr	r3, [r3, #16]
 800e908:	9300      	str	r3, [sp, #0]
 800e90a:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800e90e:	6829      	ldr	r1, [r5, #0]
 800e910:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e914:	f001 f944 	bl	800fba0 <uxr_buffer_create_datareader_bin>
 800e918:	4602      	mov	r2, r0
 800e91a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e91e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e922:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e926:	f000 fb77 	bl	800f018 <run_xrce_session>
 800e92a:	b1d8      	cbz	r0, 800e964 <rmw_create_subscription+0x1b4>
 800e92c:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800e930:	7a33      	ldrb	r3, [r6, #8]
 800e932:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e936:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e93a:	2200      	movs	r2, #0
 800e93c:	e9cd 1208 	strd	r1, r2, [sp, #32]
 800e940:	2b02      	cmp	r3, #2
 800e942:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e946:	bf0c      	ite	eq
 800e948:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800e94c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800e950:	9307      	str	r3, [sp, #28]
 800e952:	aa08      	add	r2, sp, #32
 800e954:	9200      	str	r2, [sp, #0]
 800e956:	697a      	ldr	r2, [r7, #20]
 800e958:	6809      	ldr	r1, [r1, #0]
 800e95a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e95e:	f001 fa8d 	bl	800fe7c <uxr_buffer_request_data>
 800e962:	e007      	b.n	800e974 <rmw_create_subscription+0x1c4>
 800e964:	4805      	ldr	r0, [pc, #20]	; (800e97c <rmw_create_subscription+0x1cc>)
 800e966:	4639      	mov	r1, r7
 800e968:	f006 fd5c 	bl	8015424 <put_memory>
 800e96c:	4620      	mov	r0, r4
 800e96e:	f000 fa1f 	bl	800edb0 <rmw_uxrce_fini_subscription_memory>
 800e972:	2400      	movs	r4, #0
 800e974:	4620      	mov	r0, r4
 800e976:	b00a      	add	sp, #40	; 0x28
 800e978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e97c:	200144b4 	.word	0x200144b4
 800e980:	0801959c 	.word	0x0801959c
 800e984:	08019348 	.word	0x08019348

0800e988 <rmw_subscription_get_actual_qos>:
 800e988:	2000      	movs	r0, #0
 800e98a:	4770      	bx	lr

0800e98c <rmw_destroy_subscription>:
 800e98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e98e:	b128      	cbz	r0, 800e99c <rmw_destroy_subscription+0x10>
 800e990:	4604      	mov	r4, r0
 800e992:	6800      	ldr	r0, [r0, #0]
 800e994:	460d      	mov	r5, r1
 800e996:	f000 fba9 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 800e99a:	b910      	cbnz	r0, 800e9a2 <rmw_destroy_subscription+0x16>
 800e99c:	2401      	movs	r4, #1
 800e99e:	4620      	mov	r0, r4
 800e9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9a2:	6863      	ldr	r3, [r4, #4]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d0f9      	beq.n	800e99c <rmw_destroy_subscription+0x10>
 800e9a8:	2d00      	cmp	r5, #0
 800e9aa:	d0f7      	beq.n	800e99c <rmw_destroy_subscription+0x10>
 800e9ac:	6828      	ldr	r0, [r5, #0]
 800e9ae:	f000 fb9d 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	d0f2      	beq.n	800e99c <rmw_destroy_subscription+0x10>
 800e9b6:	686c      	ldr	r4, [r5, #4]
 800e9b8:	2c00      	cmp	r4, #0
 800e9ba:	d0ef      	beq.n	800e99c <rmw_destroy_subscription+0x10>
 800e9bc:	e9d4 0707 	ldrd	r0, r7, [r4, #28]
 800e9c0:	f006 fdcc 	bl	801555c <destroy_topic>
 800e9c4:	6a23      	ldr	r3, [r4, #32]
 800e9c6:	6962      	ldr	r2, [r4, #20]
 800e9c8:	6918      	ldr	r0, [r3, #16]
 800e9ca:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e9ce:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e9d2:	6819      	ldr	r1, [r3, #0]
 800e9d4:	f000 ff56 	bl	800f884 <uxr_buffer_delete_entity>
 800e9d8:	6a21      	ldr	r1, [r4, #32]
 800e9da:	6922      	ldr	r2, [r4, #16]
 800e9dc:	4603      	mov	r3, r0
 800e9de:	6908      	ldr	r0, [r1, #16]
 800e9e0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e9e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e9e8:	6809      	ldr	r1, [r1, #0]
 800e9ea:	461c      	mov	r4, r3
 800e9ec:	f000 ff4a 	bl	800f884 <uxr_buffer_delete_entity>
 800e9f0:	4606      	mov	r6, r0
 800e9f2:	6938      	ldr	r0, [r7, #16]
 800e9f4:	4622      	mov	r2, r4
 800e9f6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e9fa:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e9fe:	f000 fb0b 	bl	800f018 <run_xrce_session>
 800ea02:	4604      	mov	r4, r0
 800ea04:	6938      	ldr	r0, [r7, #16]
 800ea06:	4632      	mov	r2, r6
 800ea08:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800ea0c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ea10:	f000 fb02 	bl	800f018 <run_xrce_session>
 800ea14:	b12c      	cbz	r4, 800ea22 <rmw_destroy_subscription+0x96>
 800ea16:	b120      	cbz	r0, 800ea22 <rmw_destroy_subscription+0x96>
 800ea18:	2400      	movs	r4, #0
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	f000 f9c8 	bl	800edb0 <rmw_uxrce_fini_subscription_memory>
 800ea20:	e7bd      	b.n	800e99e <rmw_destroy_subscription+0x12>
 800ea22:	2402      	movs	r4, #2
 800ea24:	e7f9      	b.n	800ea1a <rmw_destroy_subscription+0x8e>
 800ea26:	bf00      	nop

0800ea28 <rmw_take_with_info>:
 800ea28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea2a:	4605      	mov	r5, r0
 800ea2c:	b089      	sub	sp, #36	; 0x24
 800ea2e:	460f      	mov	r7, r1
 800ea30:	4614      	mov	r4, r2
 800ea32:	b10a      	cbz	r2, 800ea38 <rmw_take_with_info+0x10>
 800ea34:	2300      	movs	r3, #0
 800ea36:	7013      	strb	r3, [r2, #0]
 800ea38:	6828      	ldr	r0, [r5, #0]
 800ea3a:	f000 fb57 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 800ea3e:	b910      	cbnz	r0, 800ea46 <rmw_take_with_info+0x1e>
 800ea40:	2001      	movs	r0, #1
 800ea42:	b009      	add	sp, #36	; 0x24
 800ea44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea46:	686d      	ldr	r5, [r5, #4]
 800ea48:	f000 fa6e 	bl	800ef28 <rmw_uxrce_clean_expired_static_input_buffer>
 800ea4c:	4628      	mov	r0, r5
 800ea4e:	f000 fa43 	bl	800eed8 <rmw_uxrce_find_static_input_buffer_by_owner>
 800ea52:	4606      	mov	r6, r0
 800ea54:	2800      	cmp	r0, #0
 800ea56:	d0f3      	beq.n	800ea40 <rmw_take_with_info+0x18>
 800ea58:	68c1      	ldr	r1, [r0, #12]
 800ea5a:	4668      	mov	r0, sp
 800ea5c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800ea60:	3110      	adds	r1, #16
 800ea62:	f7fd fcc1 	bl	800c3e8 <ucdr_init_buffer>
 800ea66:	69ab      	ldr	r3, [r5, #24]
 800ea68:	4639      	mov	r1, r7
 800ea6a:	68db      	ldr	r3, [r3, #12]
 800ea6c:	4668      	mov	r0, sp
 800ea6e:	4798      	blx	r3
 800ea70:	4631      	mov	r1, r6
 800ea72:	4605      	mov	r5, r0
 800ea74:	4804      	ldr	r0, [pc, #16]	; (800ea88 <rmw_take_with_info+0x60>)
 800ea76:	f006 fcd5 	bl	8015424 <put_memory>
 800ea7a:	b104      	cbz	r4, 800ea7e <rmw_take_with_info+0x56>
 800ea7c:	7025      	strb	r5, [r4, #0]
 800ea7e:	f085 0001 	eor.w	r0, r5, #1
 800ea82:	b2c0      	uxtb	r0, r0
 800ea84:	b009      	add	sp, #36	; 0x24
 800ea86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea88:	20011248 	.word	0x20011248

0800ea8c <rmw_uxrce_transport_init>:
 800ea8c:	b508      	push	{r3, lr}
 800ea8e:	b108      	cbz	r0, 800ea94 <rmw_uxrce_transport_init+0x8>
 800ea90:	f100 0210 	add.w	r2, r0, #16
 800ea94:	b139      	cbz	r1, 800eaa6 <rmw_uxrce_transport_init+0x1a>
 800ea96:	6949      	ldr	r1, [r1, #20]
 800ea98:	4610      	mov	r0, r2
 800ea9a:	f001 f989 	bl	800fdb0 <uxr_init_custom_transport>
 800ea9e:	f080 0001 	eor.w	r0, r0, #1
 800eaa2:	b2c0      	uxtb	r0, r0
 800eaa4:	bd08      	pop	{r3, pc}
 800eaa6:	4b04      	ldr	r3, [pc, #16]	; (800eab8 <rmw_uxrce_transport_init+0x2c>)
 800eaa8:	4610      	mov	r0, r2
 800eaaa:	6859      	ldr	r1, [r3, #4]
 800eaac:	f001 f980 	bl	800fdb0 <uxr_init_custom_transport>
 800eab0:	f080 0001 	eor.w	r0, r0, #1
 800eab4:	b2c0      	uxtb	r0, r0
 800eab6:	bd08      	pop	{r3, pc}
 800eab8:	20011228 	.word	0x20011228

0800eabc <rmw_uros_epoch_nanos>:
 800eabc:	4b05      	ldr	r3, [pc, #20]	; (800ead4 <rmw_uros_epoch_nanos+0x18>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	b123      	cbz	r3, 800eacc <rmw_uros_epoch_nanos+0x10>
 800eac2:	68d8      	ldr	r0, [r3, #12]
 800eac4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800eac8:	f001 bf36 	b.w	8010938 <uxr_epoch_nanos>
 800eacc:	2000      	movs	r0, #0
 800eace:	2100      	movs	r1, #0
 800ead0:	4770      	bx	lr
 800ead2:	bf00      	nop
 800ead4:	200143f0 	.word	0x200143f0

0800ead8 <rmw_uros_sync_session>:
 800ead8:	b508      	push	{r3, lr}
 800eada:	4b07      	ldr	r3, [pc, #28]	; (800eaf8 <rmw_uros_sync_session+0x20>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	b14b      	cbz	r3, 800eaf4 <rmw_uros_sync_session+0x1c>
 800eae0:	4601      	mov	r1, r0
 800eae2:	68d8      	ldr	r0, [r3, #12]
 800eae4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800eae8:	f001 fed6 	bl	8010898 <uxr_sync_session>
 800eaec:	f080 0001 	eor.w	r0, r0, #1
 800eaf0:	b2c0      	uxtb	r0, r0
 800eaf2:	bd08      	pop	{r3, pc}
 800eaf4:	2001      	movs	r0, #1
 800eaf6:	bd08      	pop	{r3, pc}
 800eaf8:	200143f0 	.word	0x200143f0

0800eafc <rmw_uxrce_init_service_memory>:
 800eafc:	b1b2      	cbz	r2, 800eb2c <rmw_uxrce_init_service_memory+0x30>
 800eafe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb00:	7a07      	ldrb	r7, [r0, #8]
 800eb02:	4605      	mov	r5, r0
 800eb04:	b98f      	cbnz	r7, 800eb2a <rmw_uxrce_init_service_memory+0x2e>
 800eb06:	e9c0 7700 	strd	r7, r7, [r0]
 800eb0a:	460c      	mov	r4, r1
 800eb0c:	23c8      	movs	r3, #200	; 0xc8
 800eb0e:	2101      	movs	r1, #1
 800eb10:	fb03 4602 	mla	r6, r3, r2, r4
 800eb14:	60c3      	str	r3, [r0, #12]
 800eb16:	7201      	strb	r1, [r0, #8]
 800eb18:	4621      	mov	r1, r4
 800eb1a:	4628      	mov	r0, r5
 800eb1c:	f006 fc82 	bl	8015424 <put_memory>
 800eb20:	60e4      	str	r4, [r4, #12]
 800eb22:	f804 7bc8 	strb.w	r7, [r4], #200
 800eb26:	42a6      	cmp	r6, r4
 800eb28:	d1f6      	bne.n	800eb18 <rmw_uxrce_init_service_memory+0x1c>
 800eb2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb2c:	4770      	bx	lr
 800eb2e:	bf00      	nop

0800eb30 <rmw_uxrce_init_client_memory>:
 800eb30:	b1b2      	cbz	r2, 800eb60 <rmw_uxrce_init_client_memory+0x30>
 800eb32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb34:	7a07      	ldrb	r7, [r0, #8]
 800eb36:	4605      	mov	r5, r0
 800eb38:	b98f      	cbnz	r7, 800eb5e <rmw_uxrce_init_client_memory+0x2e>
 800eb3a:	e9c0 7700 	strd	r7, r7, [r0]
 800eb3e:	460c      	mov	r4, r1
 800eb40:	23c8      	movs	r3, #200	; 0xc8
 800eb42:	2101      	movs	r1, #1
 800eb44:	fb03 4602 	mla	r6, r3, r2, r4
 800eb48:	60c3      	str	r3, [r0, #12]
 800eb4a:	7201      	strb	r1, [r0, #8]
 800eb4c:	4621      	mov	r1, r4
 800eb4e:	4628      	mov	r0, r5
 800eb50:	f006 fc68 	bl	8015424 <put_memory>
 800eb54:	60e4      	str	r4, [r4, #12]
 800eb56:	f804 7bc8 	strb.w	r7, [r4], #200
 800eb5a:	42a6      	cmp	r6, r4
 800eb5c:	d1f6      	bne.n	800eb4c <rmw_uxrce_init_client_memory+0x1c>
 800eb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb60:	4770      	bx	lr
 800eb62:	bf00      	nop

0800eb64 <rmw_uxrce_init_publisher_memory>:
 800eb64:	b1b2      	cbz	r2, 800eb94 <rmw_uxrce_init_publisher_memory+0x30>
 800eb66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb68:	7a07      	ldrb	r7, [r0, #8]
 800eb6a:	4605      	mov	r5, r0
 800eb6c:	b98f      	cbnz	r7, 800eb92 <rmw_uxrce_init_publisher_memory+0x2e>
 800eb6e:	e9c0 7700 	strd	r7, r7, [r0]
 800eb72:	460c      	mov	r4, r1
 800eb74:	23d8      	movs	r3, #216	; 0xd8
 800eb76:	2101      	movs	r1, #1
 800eb78:	fb03 4602 	mla	r6, r3, r2, r4
 800eb7c:	60c3      	str	r3, [r0, #12]
 800eb7e:	7201      	strb	r1, [r0, #8]
 800eb80:	4621      	mov	r1, r4
 800eb82:	4628      	mov	r0, r5
 800eb84:	f006 fc4e 	bl	8015424 <put_memory>
 800eb88:	60e4      	str	r4, [r4, #12]
 800eb8a:	f804 7bd8 	strb.w	r7, [r4], #216
 800eb8e:	42a6      	cmp	r6, r4
 800eb90:	d1f6      	bne.n	800eb80 <rmw_uxrce_init_publisher_memory+0x1c>
 800eb92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop

0800eb98 <rmw_uxrce_init_subscription_memory>:
 800eb98:	b1b2      	cbz	r2, 800ebc8 <rmw_uxrce_init_subscription_memory+0x30>
 800eb9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb9c:	7a07      	ldrb	r7, [r0, #8]
 800eb9e:	4605      	mov	r5, r0
 800eba0:	b98f      	cbnz	r7, 800ebc6 <rmw_uxrce_init_subscription_memory+0x2e>
 800eba2:	e9c0 7700 	strd	r7, r7, [r0]
 800eba6:	460c      	mov	r4, r1
 800eba8:	23d0      	movs	r3, #208	; 0xd0
 800ebaa:	2101      	movs	r1, #1
 800ebac:	fb03 4602 	mla	r6, r3, r2, r4
 800ebb0:	60c3      	str	r3, [r0, #12]
 800ebb2:	7201      	strb	r1, [r0, #8]
 800ebb4:	4621      	mov	r1, r4
 800ebb6:	4628      	mov	r0, r5
 800ebb8:	f006 fc34 	bl	8015424 <put_memory>
 800ebbc:	60e4      	str	r4, [r4, #12]
 800ebbe:	f804 7bd0 	strb.w	r7, [r4], #208
 800ebc2:	42a6      	cmp	r6, r4
 800ebc4:	d1f6      	bne.n	800ebb4 <rmw_uxrce_init_subscription_memory+0x1c>
 800ebc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebc8:	4770      	bx	lr
 800ebca:	bf00      	nop

0800ebcc <rmw_uxrce_init_node_memory>:
 800ebcc:	b1b2      	cbz	r2, 800ebfc <rmw_uxrce_init_node_memory+0x30>
 800ebce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebd0:	7a07      	ldrb	r7, [r0, #8]
 800ebd2:	4605      	mov	r5, r0
 800ebd4:	b98f      	cbnz	r7, 800ebfa <rmw_uxrce_init_node_memory+0x2e>
 800ebd6:	e9c0 7700 	strd	r7, r7, [r0]
 800ebda:	460c      	mov	r4, r1
 800ebdc:	23a4      	movs	r3, #164	; 0xa4
 800ebde:	2101      	movs	r1, #1
 800ebe0:	fb03 4602 	mla	r6, r3, r2, r4
 800ebe4:	60c3      	str	r3, [r0, #12]
 800ebe6:	7201      	strb	r1, [r0, #8]
 800ebe8:	4621      	mov	r1, r4
 800ebea:	4628      	mov	r0, r5
 800ebec:	f006 fc1a 	bl	8015424 <put_memory>
 800ebf0:	60e4      	str	r4, [r4, #12]
 800ebf2:	f804 7ba4 	strb.w	r7, [r4], #164
 800ebf6:	42a6      	cmp	r6, r4
 800ebf8:	d1f6      	bne.n	800ebe8 <rmw_uxrce_init_node_memory+0x1c>
 800ebfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebfc:	4770      	bx	lr
 800ebfe:	bf00      	nop

0800ec00 <rmw_uxrce_init_session_memory>:
 800ec00:	b1d2      	cbz	r2, 800ec38 <rmw_uxrce_init_session_memory+0x38>
 800ec02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec06:	7a07      	ldrb	r7, [r0, #8]
 800ec08:	4605      	mov	r5, r0
 800ec0a:	b99f      	cbnz	r7, 800ec34 <rmw_uxrce_init_session_memory+0x34>
 800ec0c:	e9c0 7700 	strd	r7, r7, [r0]
 800ec10:	f241 53a8 	movw	r3, #5544	; 0x15a8
 800ec14:	460c      	mov	r4, r1
 800ec16:	2101      	movs	r1, #1
 800ec18:	fb03 4602 	mla	r6, r3, r2, r4
 800ec1c:	60c3      	str	r3, [r0, #12]
 800ec1e:	4698      	mov	r8, r3
 800ec20:	7201      	strb	r1, [r0, #8]
 800ec22:	4621      	mov	r1, r4
 800ec24:	4628      	mov	r0, r5
 800ec26:	f006 fbfd 	bl	8015424 <put_memory>
 800ec2a:	60e4      	str	r4, [r4, #12]
 800ec2c:	7027      	strb	r7, [r4, #0]
 800ec2e:	4444      	add	r4, r8
 800ec30:	42a6      	cmp	r6, r4
 800ec32:	d1f6      	bne.n	800ec22 <rmw_uxrce_init_session_memory+0x22>
 800ec34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop

0800ec3c <rmw_uxrce_init_topic_memory>:
 800ec3c:	b1c2      	cbz	r2, 800ec70 <rmw_uxrce_init_topic_memory+0x34>
 800ec3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec40:	7a07      	ldrb	r7, [r0, #8]
 800ec42:	4606      	mov	r6, r0
 800ec44:	b99f      	cbnz	r7, 800ec6e <rmw_uxrce_init_topic_memory+0x32>
 800ec46:	e9c0 7700 	strd	r7, r7, [r0]
 800ec4a:	460c      	mov	r4, r1
 800ec4c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800ec50:	2101      	movs	r1, #1
 800ec52:	231c      	movs	r3, #28
 800ec54:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ec58:	7201      	strb	r1, [r0, #8]
 800ec5a:	60c3      	str	r3, [r0, #12]
 800ec5c:	4621      	mov	r1, r4
 800ec5e:	4630      	mov	r0, r6
 800ec60:	f006 fbe0 	bl	8015424 <put_memory>
 800ec64:	60e4      	str	r4, [r4, #12]
 800ec66:	f804 7b1c 	strb.w	r7, [r4], #28
 800ec6a:	42a5      	cmp	r5, r4
 800ec6c:	d1f6      	bne.n	800ec5c <rmw_uxrce_init_topic_memory+0x20>
 800ec6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec70:	4770      	bx	lr
 800ec72:	bf00      	nop

0800ec74 <rmw_uxrce_init_static_input_buffer_memory>:
 800ec74:	b1d2      	cbz	r2, 800ecac <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800ec76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec78:	7a07      	ldrb	r7, [r0, #8]
 800ec7a:	4606      	mov	r6, r0
 800ec7c:	b9af      	cbnz	r7, 800ecaa <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800ec7e:	e9c0 7700 	strd	r7, r7, [r0]
 800ec82:	460c      	mov	r4, r1
 800ec84:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800ec88:	2101      	movs	r1, #1
 800ec8a:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800ec8e:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800ec92:	7201      	strb	r1, [r0, #8]
 800ec94:	60c3      	str	r3, [r0, #12]
 800ec96:	4621      	mov	r1, r4
 800ec98:	4630      	mov	r0, r6
 800ec9a:	f006 fbc3 	bl	8015424 <put_memory>
 800ec9e:	60e4      	str	r4, [r4, #12]
 800eca0:	7027      	strb	r7, [r4, #0]
 800eca2:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800eca6:	42a5      	cmp	r5, r4
 800eca8:	d1f5      	bne.n	800ec96 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ecaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecac:	4770      	bx	lr
 800ecae:	bf00      	nop

0800ecb0 <rmw_uxrce_init_init_options_impl_memory>:
 800ecb0:	b1b2      	cbz	r2, 800ece0 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800ecb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecb4:	7a07      	ldrb	r7, [r0, #8]
 800ecb6:	4605      	mov	r5, r0
 800ecb8:	b98f      	cbnz	r7, 800ecde <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800ecba:	e9c0 7700 	strd	r7, r7, [r0]
 800ecbe:	460c      	mov	r4, r1
 800ecc0:	232c      	movs	r3, #44	; 0x2c
 800ecc2:	2101      	movs	r1, #1
 800ecc4:	fb03 4602 	mla	r6, r3, r2, r4
 800ecc8:	60c3      	str	r3, [r0, #12]
 800ecca:	7201      	strb	r1, [r0, #8]
 800eccc:	4621      	mov	r1, r4
 800ecce:	4628      	mov	r0, r5
 800ecd0:	f006 fba8 	bl	8015424 <put_memory>
 800ecd4:	60e4      	str	r4, [r4, #12]
 800ecd6:	f804 7b2c 	strb.w	r7, [r4], #44
 800ecda:	42a6      	cmp	r6, r4
 800ecdc:	d1f6      	bne.n	800eccc <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800ecde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ece0:	4770      	bx	lr
 800ece2:	bf00      	nop

0800ece4 <rmw_uxrce_init_wait_set_memory>:
 800ece4:	b1c2      	cbz	r2, 800ed18 <rmw_uxrce_init_wait_set_memory+0x34>
 800ece6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ece8:	7a07      	ldrb	r7, [r0, #8]
 800ecea:	4606      	mov	r6, r0
 800ecec:	b99f      	cbnz	r7, 800ed16 <rmw_uxrce_init_wait_set_memory+0x32>
 800ecee:	e9c0 7700 	strd	r7, r7, [r0]
 800ecf2:	460c      	mov	r4, r1
 800ecf4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800ecf8:	2101      	movs	r1, #1
 800ecfa:	231c      	movs	r3, #28
 800ecfc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ed00:	7201      	strb	r1, [r0, #8]
 800ed02:	60c3      	str	r3, [r0, #12]
 800ed04:	4621      	mov	r1, r4
 800ed06:	4630      	mov	r0, r6
 800ed08:	f006 fb8c 	bl	8015424 <put_memory>
 800ed0c:	60e4      	str	r4, [r4, #12]
 800ed0e:	f804 7b1c 	strb.w	r7, [r4], #28
 800ed12:	42a5      	cmp	r5, r4
 800ed14:	d1f6      	bne.n	800ed04 <rmw_uxrce_init_wait_set_memory+0x20>
 800ed16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed18:	4770      	bx	lr
 800ed1a:	bf00      	nop

0800ed1c <rmw_uxrce_init_guard_condition_memory>:
 800ed1c:	b1b2      	cbz	r2, 800ed4c <rmw_uxrce_init_guard_condition_memory+0x30>
 800ed1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed20:	7a07      	ldrb	r7, [r0, #8]
 800ed22:	4605      	mov	r5, r0
 800ed24:	b98f      	cbnz	r7, 800ed4a <rmw_uxrce_init_guard_condition_memory+0x2e>
 800ed26:	e9c0 7700 	strd	r7, r7, [r0]
 800ed2a:	460c      	mov	r4, r1
 800ed2c:	2320      	movs	r3, #32
 800ed2e:	2101      	movs	r1, #1
 800ed30:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800ed34:	7201      	strb	r1, [r0, #8]
 800ed36:	60c3      	str	r3, [r0, #12]
 800ed38:	4621      	mov	r1, r4
 800ed3a:	4628      	mov	r0, r5
 800ed3c:	f006 fb72 	bl	8015424 <put_memory>
 800ed40:	60e4      	str	r4, [r4, #12]
 800ed42:	f804 7b20 	strb.w	r7, [r4], #32
 800ed46:	42a6      	cmp	r6, r4
 800ed48:	d1f6      	bne.n	800ed38 <rmw_uxrce_init_guard_condition_memory+0x1c>
 800ed4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed4c:	4770      	bx	lr
 800ed4e:	bf00      	nop

0800ed50 <rmw_uxrce_fini_session_memory>:
 800ed50:	4601      	mov	r1, r0
 800ed52:	4801      	ldr	r0, [pc, #4]	; (800ed58 <rmw_uxrce_fini_session_memory+0x8>)
 800ed54:	f006 bb66 	b.w	8015424 <put_memory>
 800ed58:	200143f0 	.word	0x200143f0

0800ed5c <rmw_uxrce_fini_node_memory>:
 800ed5c:	b538      	push	{r3, r4, r5, lr}
 800ed5e:	4604      	mov	r4, r0
 800ed60:	6800      	ldr	r0, [r0, #0]
 800ed62:	f000 f9c3 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 800ed66:	b158      	cbz	r0, 800ed80 <rmw_uxrce_fini_node_memory+0x24>
 800ed68:	6823      	ldr	r3, [r4, #0]
 800ed6a:	b10b      	cbz	r3, 800ed70 <rmw_uxrce_fini_node_memory+0x14>
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	6023      	str	r3, [r4, #0]
 800ed70:	6861      	ldr	r1, [r4, #4]
 800ed72:	b129      	cbz	r1, 800ed80 <rmw_uxrce_fini_node_memory+0x24>
 800ed74:	2500      	movs	r5, #0
 800ed76:	4803      	ldr	r0, [pc, #12]	; (800ed84 <rmw_uxrce_fini_node_memory+0x28>)
 800ed78:	610d      	str	r5, [r1, #16]
 800ed7a:	f006 fb53 	bl	8015424 <put_memory>
 800ed7e:	6065      	str	r5, [r4, #4]
 800ed80:	bd38      	pop	{r3, r4, r5, pc}
 800ed82:	bf00      	nop
 800ed84:	2001421c 	.word	0x2001421c

0800ed88 <rmw_uxrce_fini_publisher_memory>:
 800ed88:	b510      	push	{r4, lr}
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	6800      	ldr	r0, [r0, #0]
 800ed8e:	f000 f9ad 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 800ed92:	b150      	cbz	r0, 800edaa <rmw_uxrce_fini_publisher_memory+0x22>
 800ed94:	6823      	ldr	r3, [r4, #0]
 800ed96:	b10b      	cbz	r3, 800ed9c <rmw_uxrce_fini_publisher_memory+0x14>
 800ed98:	2300      	movs	r3, #0
 800ed9a:	6023      	str	r3, [r4, #0]
 800ed9c:	6861      	ldr	r1, [r4, #4]
 800ed9e:	b121      	cbz	r1, 800edaa <rmw_uxrce_fini_publisher_memory+0x22>
 800eda0:	4802      	ldr	r0, [pc, #8]	; (800edac <rmw_uxrce_fini_publisher_memory+0x24>)
 800eda2:	f006 fb3f 	bl	8015424 <put_memory>
 800eda6:	2300      	movs	r3, #0
 800eda8:	6063      	str	r3, [r4, #4]
 800edaa:	bd10      	pop	{r4, pc}
 800edac:	20011258 	.word	0x20011258

0800edb0 <rmw_uxrce_fini_subscription_memory>:
 800edb0:	b510      	push	{r4, lr}
 800edb2:	4604      	mov	r4, r0
 800edb4:	6800      	ldr	r0, [r0, #0]
 800edb6:	f000 f999 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 800edba:	b150      	cbz	r0, 800edd2 <rmw_uxrce_fini_subscription_memory+0x22>
 800edbc:	6823      	ldr	r3, [r4, #0]
 800edbe:	b10b      	cbz	r3, 800edc4 <rmw_uxrce_fini_subscription_memory+0x14>
 800edc0:	2300      	movs	r3, #0
 800edc2:	6023      	str	r3, [r4, #0]
 800edc4:	6861      	ldr	r1, [r4, #4]
 800edc6:	b121      	cbz	r1, 800edd2 <rmw_uxrce_fini_subscription_memory+0x22>
 800edc8:	4802      	ldr	r0, [pc, #8]	; (800edd4 <rmw_uxrce_fini_subscription_memory+0x24>)
 800edca:	f006 fb2b 	bl	8015424 <put_memory>
 800edce:	2300      	movs	r3, #0
 800edd0:	6063      	str	r3, [r4, #4]
 800edd2:	bd10      	pop	{r4, pc}
 800edd4:	200144b4 	.word	0x200144b4

0800edd8 <rmw_uxrce_fini_service_memory>:
 800edd8:	b510      	push	{r4, lr}
 800edda:	4604      	mov	r4, r0
 800eddc:	6800      	ldr	r0, [r0, #0]
 800edde:	f000 f985 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 800ede2:	b150      	cbz	r0, 800edfa <rmw_uxrce_fini_service_memory+0x22>
 800ede4:	6823      	ldr	r3, [r4, #0]
 800ede6:	b10b      	cbz	r3, 800edec <rmw_uxrce_fini_service_memory+0x14>
 800ede8:	2300      	movs	r3, #0
 800edea:	6023      	str	r3, [r4, #0]
 800edec:	6861      	ldr	r1, [r4, #4]
 800edee:	b121      	cbz	r1, 800edfa <rmw_uxrce_fini_service_memory+0x22>
 800edf0:	4802      	ldr	r0, [pc, #8]	; (800edfc <rmw_uxrce_fini_service_memory+0x24>)
 800edf2:	f006 fb17 	bl	8015424 <put_memory>
 800edf6:	2300      	movs	r3, #0
 800edf8:	6063      	str	r3, [r4, #4]
 800edfa:	bd10      	pop	{r4, pc}
 800edfc:	200144a4 	.word	0x200144a4

0800ee00 <rmw_uxrce_fini_client_memory>:
 800ee00:	b510      	push	{r4, lr}
 800ee02:	4604      	mov	r4, r0
 800ee04:	6800      	ldr	r0, [r0, #0]
 800ee06:	f000 f971 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 800ee0a:	b150      	cbz	r0, 800ee22 <rmw_uxrce_fini_client_memory+0x22>
 800ee0c:	6823      	ldr	r3, [r4, #0]
 800ee0e:	b10b      	cbz	r3, 800ee14 <rmw_uxrce_fini_client_memory+0x14>
 800ee10:	2300      	movs	r3, #0
 800ee12:	6023      	str	r3, [r4, #0]
 800ee14:	6861      	ldr	r1, [r4, #4]
 800ee16:	b121      	cbz	r1, 800ee22 <rmw_uxrce_fini_client_memory+0x22>
 800ee18:	4802      	ldr	r0, [pc, #8]	; (800ee24 <rmw_uxrce_fini_client_memory+0x24>)
 800ee1a:	f006 fb03 	bl	8015424 <put_memory>
 800ee1e:	2300      	movs	r3, #0
 800ee20:	6063      	str	r3, [r4, #4]
 800ee22:	bd10      	pop	{r4, pc}
 800ee24:	20011ad8 	.word	0x20011ad8

0800ee28 <rmw_uxrce_fini_topic_memory>:
 800ee28:	b510      	push	{r4, lr}
 800ee2a:	4601      	mov	r1, r0
 800ee2c:	4604      	mov	r4, r0
 800ee2e:	4803      	ldr	r0, [pc, #12]	; (800ee3c <rmw_uxrce_fini_topic_memory+0x14>)
 800ee30:	f006 faf8 	bl	8015424 <put_memory>
 800ee34:	2300      	movs	r3, #0
 800ee36:	61a3      	str	r3, [r4, #24]
 800ee38:	bd10      	pop	{r4, pc}
 800ee3a:	bf00      	nop
 800ee3c:	200143e0 	.word	0x200143e0

0800ee40 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ee40:	b082      	sub	sp, #8
 800ee42:	b4f0      	push	{r4, r5, r6, r7}
 800ee44:	4923      	ldr	r1, [pc, #140]	; (800eed4 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800ee46:	ac04      	add	r4, sp, #16
 800ee48:	e884 000c 	stmia.w	r4, {r2, r3}
 800ee4c:	680d      	ldr	r5, [r1, #0]
 800ee4e:	9c05      	ldr	r4, [sp, #20]
 800ee50:	2d00      	cmp	r5, #0
 800ee52:	d03d      	beq.n	800eed0 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800ee54:	462b      	mov	r3, r5
 800ee56:	2100      	movs	r1, #0
 800ee58:	68da      	ldr	r2, [r3, #12]
 800ee5a:	689b      	ldr	r3, [r3, #8]
 800ee5c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800ee60:	4290      	cmp	r0, r2
 800ee62:	bf08      	it	eq
 800ee64:	3101      	addeq	r1, #1
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d1f6      	bne.n	800ee58 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800ee6a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ee6e:	2b02      	cmp	r3, #2
 800ee70:	d026      	beq.n	800eec0 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800ee72:	d906      	bls.n	800ee82 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800ee74:	2b03      	cmp	r3, #3
 800ee76:	d004      	beq.n	800ee82 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800ee78:	2100      	movs	r1, #0
 800ee7a:	bcf0      	pop	{r4, r5, r6, r7}
 800ee7c:	4608      	mov	r0, r1
 800ee7e:	b002      	add	sp, #8
 800ee80:	4770      	bx	lr
 800ee82:	b304      	cbz	r4, 800eec6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ee84:	428c      	cmp	r4, r1
 800ee86:	d81e      	bhi.n	800eec6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ee88:	2d00      	cmp	r5, #0
 800ee8a:	d0f5      	beq.n	800ee78 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ee8c:	2100      	movs	r1, #0
 800ee8e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800ee92:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800ee96:	e002      	b.n	800ee9e <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800ee98:	68ad      	ldr	r5, [r5, #8]
 800ee9a:	2d00      	cmp	r5, #0
 800ee9c:	d0ed      	beq.n	800ee7a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ee9e:	68eb      	ldr	r3, [r5, #12]
 800eea0:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800eea4:	4290      	cmp	r0, r2
 800eea6:	d1f7      	bne.n	800ee98 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800eea8:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800eeac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb0:	42b2      	cmp	r2, r6
 800eeb2:	eb73 0407 	sbcs.w	r4, r3, r7
 800eeb6:	daef      	bge.n	800ee98 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800eeb8:	4616      	mov	r6, r2
 800eeba:	461f      	mov	r7, r3
 800eebc:	4629      	mov	r1, r5
 800eebe:	e7eb      	b.n	800ee98 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800eec0:	b10c      	cbz	r4, 800eec6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800eec2:	428c      	cmp	r4, r1
 800eec4:	d9d8      	bls.n	800ee78 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800eec6:	bcf0      	pop	{r4, r5, r6, r7}
 800eec8:	4802      	ldr	r0, [pc, #8]	; (800eed4 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800eeca:	b002      	add	sp, #8
 800eecc:	f006 ba9a 	b.w	8015404 <get_memory>
 800eed0:	4629      	mov	r1, r5
 800eed2:	e7ca      	b.n	800ee6a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800eed4:	20011248 	.word	0x20011248

0800eed8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800eed8:	4b12      	ldr	r3, [pc, #72]	; (800ef24 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	b1fb      	cbz	r3, 800ef1e <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800eede:	b4f0      	push	{r4, r5, r6, r7}
 800eee0:	f04f 0c00 	mov.w	ip, #0
 800eee4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800eee8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800eeec:	e001      	b.n	800eef2 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800eeee:	689b      	ldr	r3, [r3, #8]
 800eef0:	b193      	cbz	r3, 800ef18 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800eef2:	68da      	ldr	r2, [r3, #12]
 800eef4:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800eef8:	4288      	cmp	r0, r1
 800eefa:	d1f8      	bne.n	800eeee <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800eefc:	f602 0218 	addw	r2, r2, #2072	; 0x818
 800ef00:	e9d2 6700 	ldrd	r6, r7, [r2]
 800ef04:	42a6      	cmp	r6, r4
 800ef06:	eb77 0205 	sbcs.w	r2, r7, r5
 800ef0a:	daf0      	bge.n	800eeee <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800ef0c:	469c      	mov	ip, r3
 800ef0e:	689b      	ldr	r3, [r3, #8]
 800ef10:	4634      	mov	r4, r6
 800ef12:	463d      	mov	r5, r7
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d1ec      	bne.n	800eef2 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800ef18:	4660      	mov	r0, ip
 800ef1a:	bcf0      	pop	{r4, r5, r6, r7}
 800ef1c:	4770      	bx	lr
 800ef1e:	4618      	mov	r0, r3
 800ef20:	4770      	bx	lr
 800ef22:	bf00      	nop
 800ef24:	20011248 	.word	0x20011248

0800ef28 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ef28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef2c:	4e38      	ldr	r6, [pc, #224]	; (800f010 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800ef2e:	f8d6 8000 	ldr.w	r8, [r6]
 800ef32:	b083      	sub	sp, #12
 800ef34:	f7ff fdc2 	bl	800eabc <rmw_uros_epoch_nanos>
 800ef38:	f1b8 0f00 	cmp.w	r8, #0
 800ef3c:	d05f      	beq.n	800effe <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800ef3e:	46b1      	mov	r9, r6
 800ef40:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800ef44:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800ef48:	2b04      	cmp	r3, #4
 800ef4a:	4682      	mov	sl, r0
 800ef4c:	468b      	mov	fp, r1
 800ef4e:	d02d      	beq.n	800efac <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800ef50:	2b05      	cmp	r3, #5
 800ef52:	d041      	beq.n	800efd8 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800ef54:	2b03      	cmp	r3, #3
 800ef56:	d029      	beq.n	800efac <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800ef58:	2200      	movs	r2, #0
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	e9cd 2300 	strd	r2, r3, [sp]
 800ef60:	2001      	movs	r0, #1
 800ef62:	2100      	movs	r1, #0
 800ef64:	9b00      	ldr	r3, [sp, #0]
 800ef66:	f606 0618 	addw	r6, r6, #2072	; 0x818
 800ef6a:	e9d6 6700 	ldrd	r6, r7, [r6]
 800ef6e:	18c2      	adds	r2, r0, r3
 800ef70:	9b01      	ldr	r3, [sp, #4]
 800ef72:	eb41 0303 	adc.w	r3, r1, r3
 800ef76:	1994      	adds	r4, r2, r6
 800ef78:	eb43 0507 	adc.w	r5, r3, r7
 800ef7c:	4554      	cmp	r4, sl
 800ef7e:	eb75 020b 	sbcs.w	r2, r5, fp
 800ef82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ef86:	db03      	blt.n	800ef90 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800ef88:	45b2      	cmp	sl, r6
 800ef8a:	eb7b 0207 	sbcs.w	r2, fp, r7
 800ef8e:	da05      	bge.n	800ef9c <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 800ef90:	4641      	mov	r1, r8
 800ef92:	4648      	mov	r0, r9
 800ef94:	9300      	str	r3, [sp, #0]
 800ef96:	f006 fa45 	bl	8015424 <put_memory>
 800ef9a:	9b00      	ldr	r3, [sp, #0]
 800ef9c:	b37b      	cbz	r3, 800effe <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800ef9e:	4698      	mov	r8, r3
 800efa0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800efa4:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800efa8:	2b04      	cmp	r3, #4
 800efaa:	d1d1      	bne.n	800ef50 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800efac:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800efb0:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 800efb4:	e9cd 2300 	strd	r2, r3, [sp]
 800efb8:	4313      	orrs	r3, r2
 800efba:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 800efbe:	d015      	beq.n	800efec <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800efc0:	9a01      	ldr	r2, [sp, #4]
 800efc2:	4b14      	ldr	r3, [pc, #80]	; (800f014 <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800efc4:	fb03 f702 	mul.w	r7, r3, r2
 800efc8:	9a00      	ldr	r2, [sp, #0]
 800efca:	fba2 2303 	umull	r2, r3, r2, r3
 800efce:	e9cd 2300 	strd	r2, r3, [sp]
 800efd2:	443b      	add	r3, r7
 800efd4:	9301      	str	r3, [sp, #4]
 800efd6:	e7c5      	b.n	800ef64 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800efd8:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800efdc:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 800efe0:	e9cd 2300 	strd	r2, r3, [sp]
 800efe4:	4313      	orrs	r3, r2
 800efe6:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 800efea:	d1e9      	bne.n	800efc0 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 800efec:	ea50 0301 	orrs.w	r3, r0, r1
 800eff0:	bf02      	ittt	eq
 800eff2:	a305      	addeq	r3, pc, #20	; (adr r3, 800f008 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 800eff4:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 800eff8:	e9cd 2300 	strdeq	r2, r3, [sp]
 800effc:	e7b2      	b.n	800ef64 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800effe:	b003      	add	sp, #12
 800f000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f004:	f3af 8000 	nop.w
 800f008:	fc23ac00 	.word	0xfc23ac00
 800f00c:	00000006 	.word	0x00000006
 800f010:	20011248 	.word	0x20011248
 800f014:	3b9aca00 	.word	0x3b9aca00

0800f018 <run_xrce_session>:
 800f018:	b510      	push	{r4, lr}
 800f01a:	788c      	ldrb	r4, [r1, #2]
 800f01c:	b086      	sub	sp, #24
 800f01e:	2c01      	cmp	r4, #1
 800f020:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f024:	d00c      	beq.n	800f040 <run_xrce_session+0x28>
 800f026:	4619      	mov	r1, r3
 800f028:	2301      	movs	r3, #1
 800f02a:	9300      	str	r3, [sp, #0]
 800f02c:	f10d 020e 	add.w	r2, sp, #14
 800f030:	f10d 0317 	add.w	r3, sp, #23
 800f034:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f038:	f001 fd38 	bl	8010aac <uxr_run_session_until_all_status>
 800f03c:	b006      	add	sp, #24
 800f03e:	bd10      	pop	{r4, pc}
 800f040:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f044:	f001 fc82 	bl	801094c <uxr_flash_output_streams>
 800f048:	4620      	mov	r0, r4
 800f04a:	b006      	add	sp, #24
 800f04c:	bd10      	pop	{r4, pc}
 800f04e:	bf00      	nop

0800f050 <generate_type_name>:
 800f050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f054:	4606      	mov	r6, r0
 800f056:	b086      	sub	sp, #24
 800f058:	6840      	ldr	r0, [r0, #4]
 800f05a:	460f      	mov	r7, r1
 800f05c:	4690      	mov	r8, r2
 800f05e:	f7f1 f8c1 	bl	80001e4 <strlen>
 800f062:	6834      	ldr	r4, [r6, #0]
 800f064:	4605      	mov	r5, r0
 800f066:	b11c      	cbz	r4, 800f070 <generate_type_name+0x20>
 800f068:	4620      	mov	r0, r4
 800f06a:	f7f1 f8bb 	bl	80001e4 <strlen>
 800f06e:	4604      	mov	r4, r0
 800f070:	2300      	movs	r3, #0
 800f072:	703b      	strb	r3, [r7, #0]
 800f074:	6833      	ldr	r3, [r6, #0]
 800f076:	3508      	adds	r5, #8
 800f078:	442c      	add	r4, r5
 800f07a:	b19b      	cbz	r3, 800f0a4 <generate_type_name+0x54>
 800f07c:	490b      	ldr	r1, [pc, #44]	; (800f0ac <generate_type_name+0x5c>)
 800f07e:	4608      	mov	r0, r1
 800f080:	6875      	ldr	r5, [r6, #4]
 800f082:	4a0b      	ldr	r2, [pc, #44]	; (800f0b0 <generate_type_name+0x60>)
 800f084:	9504      	str	r5, [sp, #16]
 800f086:	4d0b      	ldr	r5, [pc, #44]	; (800f0b4 <generate_type_name+0x64>)
 800f088:	9103      	str	r1, [sp, #12]
 800f08a:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800f08e:	9000      	str	r0, [sp, #0]
 800f090:	9205      	str	r2, [sp, #20]
 800f092:	4641      	mov	r1, r8
 800f094:	4a08      	ldr	r2, [pc, #32]	; (800f0b8 <generate_type_name+0x68>)
 800f096:	4638      	mov	r0, r7
 800f098:	f007 fff8 	bl	801708c <sniprintf>
 800f09c:	4620      	mov	r0, r4
 800f09e:	b006      	add	sp, #24
 800f0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a4:	4b05      	ldr	r3, [pc, #20]	; (800f0bc <generate_type_name+0x6c>)
 800f0a6:	4901      	ldr	r1, [pc, #4]	; (800f0ac <generate_type_name+0x5c>)
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	e7e9      	b.n	800f080 <generate_type_name+0x30>
 800f0ac:	0801958c 	.word	0x0801958c
 800f0b0:	080195a0 	.word	0x080195a0
 800f0b4:	080195a4 	.word	0x080195a4
 800f0b8:	08019590 	.word	0x08019590
 800f0bc:	08019ae8 	.word	0x08019ae8

0800f0c0 <generate_topic_name>:
 800f0c0:	b510      	push	{r4, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	4b07      	ldr	r3, [pc, #28]	; (800f0e4 <generate_topic_name+0x24>)
 800f0c6:	9000      	str	r0, [sp, #0]
 800f0c8:	4614      	mov	r4, r2
 800f0ca:	4608      	mov	r0, r1
 800f0cc:	4611      	mov	r1, r2
 800f0ce:	4a06      	ldr	r2, [pc, #24]	; (800f0e8 <generate_topic_name+0x28>)
 800f0d0:	f007 ffdc 	bl	801708c <sniprintf>
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	da02      	bge.n	800f0de <generate_topic_name+0x1e>
 800f0d8:	4284      	cmp	r4, r0
 800f0da:	bfd8      	it	le
 800f0dc:	2000      	movle	r0, #0
 800f0de:	b002      	add	sp, #8
 800f0e0:	bd10      	pop	{r4, pc}
 800f0e2:	bf00      	nop
 800f0e4:	080195b0 	.word	0x080195b0
 800f0e8:	080195a8 	.word	0x080195a8

0800f0ec <is_uxrce_rmw_identifier_valid>:
 800f0ec:	b510      	push	{r4, lr}
 800f0ee:	4604      	mov	r4, r0
 800f0f0:	b140      	cbz	r0, 800f104 <is_uxrce_rmw_identifier_valid+0x18>
 800f0f2:	f006 f9dd 	bl	80154b0 <rmw_get_implementation_identifier>
 800f0f6:	4601      	mov	r1, r0
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f7f1 f869 	bl	80001d0 <strcmp>
 800f0fe:	fab0 f080 	clz	r0, r0
 800f102:	0940      	lsrs	r0, r0, #5
 800f104:	bd10      	pop	{r4, pc}
 800f106:	bf00      	nop

0800f108 <get_message_typesupport_handle>:
 800f108:	6883      	ldr	r3, [r0, #8]
 800f10a:	4718      	bx	r3

0800f10c <get_message_typesupport_handle_function>:
 800f10c:	b510      	push	{r4, lr}
 800f10e:	4604      	mov	r4, r0
 800f110:	6800      	ldr	r0, [r0, #0]
 800f112:	f7f1 f85d 	bl	80001d0 <strcmp>
 800f116:	2800      	cmp	r0, #0
 800f118:	bf0c      	ite	eq
 800f11a:	4620      	moveq	r0, r4
 800f11c:	2000      	movne	r0, #0
 800f11e:	bd10      	pop	{r4, pc}

0800f120 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 800f120:	f000 b978 	b.w	800f414 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState>

0800f124 <get_serialized_size_sensor_msgs__msg__JointState>:
 800f124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f128:	4606      	mov	r6, r0
 800f12a:	2800      	cmp	r0, #0
 800f12c:	d04a      	beq.n	800f1c4 <get_serialized_size_sensor_msgs__msg__JointState+0xa0>
 800f12e:	4688      	mov	r8, r1
 800f130:	f000 f984 	bl	800f43c <get_serialized_size_std_msgs__msg__Header>
 800f134:	eb08 0400 	add.w	r4, r8, r0
 800f138:	4620      	mov	r0, r4
 800f13a:	2104      	movs	r1, #4
 800f13c:	69b7      	ldr	r7, [r6, #24]
 800f13e:	f7fd f957 	bl	800c3f0 <ucdr_alignment>
 800f142:	1d03      	adds	r3, r0, #4
 800f144:	441c      	add	r4, r3
 800f146:	b187      	cbz	r7, 800f16a <get_serialized_size_sensor_msgs__msg__JointState+0x46>
 800f148:	2500      	movs	r5, #0
 800f14a:	4620      	mov	r0, r4
 800f14c:	2104      	movs	r1, #4
 800f14e:	f7fd f94f 	bl	800c3f0 <ucdr_alignment>
 800f152:	6973      	ldr	r3, [r6, #20]
 800f154:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800f158:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f15c:	3501      	adds	r5, #1
 800f15e:	1903      	adds	r3, r0, r4
 800f160:	6854      	ldr	r4, [r2, #4]
 800f162:	3305      	adds	r3, #5
 800f164:	42af      	cmp	r7, r5
 800f166:	441c      	add	r4, r3
 800f168:	d1ef      	bne.n	800f14a <get_serialized_size_sensor_msgs__msg__JointState+0x26>
 800f16a:	2104      	movs	r1, #4
 800f16c:	4620      	mov	r0, r4
 800f16e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800f170:	f7fd f93e 	bl	800c3f0 <ucdr_alignment>
 800f174:	4404      	add	r4, r0
 800f176:	3404      	adds	r4, #4
 800f178:	4620      	mov	r0, r4
 800f17a:	2108      	movs	r1, #8
 800f17c:	f7fd f938 	bl	800c3f0 <ucdr_alignment>
 800f180:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 800f184:	4404      	add	r4, r0
 800f186:	4620      	mov	r0, r4
 800f188:	2104      	movs	r1, #4
 800f18a:	6b35      	ldr	r5, [r6, #48]	; 0x30
 800f18c:	f7fd f930 	bl	800c3f0 <ucdr_alignment>
 800f190:	3004      	adds	r0, #4
 800f192:	4404      	add	r4, r0
 800f194:	4620      	mov	r0, r4
 800f196:	2108      	movs	r1, #8
 800f198:	f7fd f92a 	bl	800c3f0 <ucdr_alignment>
 800f19c:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 800f1a0:	4404      	add	r4, r0
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	2104      	movs	r1, #4
 800f1a6:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
 800f1a8:	f7fd f922 	bl	800c3f0 <ucdr_alignment>
 800f1ac:	3004      	adds	r0, #4
 800f1ae:	4404      	add	r4, r0
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	2108      	movs	r1, #8
 800f1b4:	f7fd f91c 	bl	800c3f0 <ucdr_alignment>
 800f1b8:	ebc8 08c5 	rsb	r8, r8, r5, lsl #3
 800f1bc:	4440      	add	r0, r8
 800f1be:	4420      	add	r0, r4
 800f1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1c4:	4b05      	ldr	r3, [pc, #20]	; (800f1dc <get_serialized_size_sensor_msgs__msg__JointState+0xb8>)
 800f1c6:	4806      	ldr	r0, [pc, #24]	; (800f1e0 <get_serialized_size_sensor_msgs__msg__JointState+0xbc>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	221b      	movs	r2, #27
 800f1cc:	68db      	ldr	r3, [r3, #12]
 800f1ce:	2101      	movs	r1, #1
 800f1d0:	f007 fd48 	bl	8016c64 <fwrite>
 800f1d4:	4630      	mov	r0, r6
 800f1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1da:	bf00      	nop
 800f1dc:	20000140 	.word	0x20000140
 800f1e0:	0801932c 	.word	0x0801932c

0800f1e4 <_JointState__get_serialized_size>:
 800f1e4:	2100      	movs	r1, #0
 800f1e6:	f7ff bf9d 	b.w	800f124 <get_serialized_size_sensor_msgs__msg__JointState>
 800f1ea:	bf00      	nop

0800f1ec <_JointState__max_serialized_size>:
 800f1ec:	b500      	push	{lr}
 800f1ee:	b083      	sub	sp, #12
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	2100      	movs	r1, #0
 800f1f4:	f10d 0007 	add.w	r0, sp, #7
 800f1f8:	f88d 3007 	strb.w	r3, [sp, #7]
 800f1fc:	f000 f9c6 	bl	800f58c <max_serialized_size_std_msgs__msg__Header>
 800f200:	b003      	add	sp, #12
 800f202:	f85d fb04 	ldr.w	pc, [sp], #4
 800f206:	bf00      	nop

0800f208 <_JointState__cdr_deserialize>:
 800f208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f20c:	460d      	mov	r5, r1
 800f20e:	b083      	sub	sp, #12
 800f210:	2900      	cmp	r1, #0
 800f212:	f000 8085 	beq.w	800f320 <_JointState__cdr_deserialize+0x118>
 800f216:	4606      	mov	r6, r0
 800f218:	f000 f9c2 	bl	800f5a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f21c:	6843      	ldr	r3, [r0, #4]
 800f21e:	4629      	mov	r1, r5
 800f220:	68db      	ldr	r3, [r3, #12]
 800f222:	4630      	mov	r0, r6
 800f224:	4798      	blx	r3
 800f226:	4669      	mov	r1, sp
 800f228:	4630      	mov	r0, r6
 800f22a:	f7fc fe49 	bl	800bec0 <ucdr_deserialize_uint32_t>
 800f22e:	9900      	ldr	r1, [sp, #0]
 800f230:	69eb      	ldr	r3, [r5, #28]
 800f232:	428b      	cmp	r3, r1
 800f234:	f0c0 8081 	bcc.w	800f33a <_JointState__cdr_deserialize+0x132>
 800f238:	61a9      	str	r1, [r5, #24]
 800f23a:	f10d 0804 	add.w	r8, sp, #4
 800f23e:	b330      	cbz	r0, 800f28e <_JointState__cdr_deserialize+0x86>
 800f240:	2400      	movs	r4, #0
 800f242:	f10d 0804 	add.w	r8, sp, #4
 800f246:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800f24a:	428c      	cmp	r4, r1
 800f24c:	4643      	mov	r3, r8
 800f24e:	4630      	mov	r0, r6
 800f250:	ea4f 0782 	mov.w	r7, r2, lsl #2
 800f254:	d21b      	bcs.n	800f28e <_JointState__cdr_deserialize+0x86>
 800f256:	6969      	ldr	r1, [r5, #20]
 800f258:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800f25c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f260:	f8dc 9008 	ldr.w	r9, [ip, #8]
 800f264:	464a      	mov	r2, r9
 800f266:	f000 fab5 	bl	800f7d4 <ucdr_deserialize_sequence_char>
 800f26a:	2800      	cmp	r0, #0
 800f26c:	d033      	beq.n	800f2d6 <_JointState__cdr_deserialize+0xce>
 800f26e:	9a01      	ldr	r2, [sp, #4]
 800f270:	b102      	cbz	r2, 800f274 <_JointState__cdr_deserialize+0x6c>
 800f272:	3a01      	subs	r2, #1
 800f274:	696b      	ldr	r3, [r5, #20]
 800f276:	9900      	ldr	r1, [sp, #0]
 800f278:	441f      	add	r7, r3
 800f27a:	3401      	adds	r4, #1
 800f27c:	607a      	str	r2, [r7, #4]
 800f27e:	428c      	cmp	r4, r1
 800f280:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800f284:	4643      	mov	r3, r8
 800f286:	4630      	mov	r0, r6
 800f288:	ea4f 0782 	mov.w	r7, r2, lsl #2
 800f28c:	d3e3      	bcc.n	800f256 <_JointState__cdr_deserialize+0x4e>
 800f28e:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800f290:	6a29      	ldr	r1, [r5, #32]
 800f292:	4622      	mov	r2, r4
 800f294:	4643      	mov	r3, r8
 800f296:	4630      	mov	r0, r6
 800f298:	f000 fada 	bl	800f850 <ucdr_deserialize_sequence_double>
 800f29c:	bb30      	cbnz	r0, 800f2ec <_JointState__cdr_deserialize+0xe4>
 800f29e:	9901      	ldr	r1, [sp, #4]
 800f2a0:	42a1      	cmp	r1, r4
 800f2a2:	d857      	bhi.n	800f354 <_JointState__cdr_deserialize+0x14c>
 800f2a4:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800f2a6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800f2a8:	4622      	mov	r2, r4
 800f2aa:	4643      	mov	r3, r8
 800f2ac:	4630      	mov	r0, r6
 800f2ae:	f000 facf 	bl	800f850 <ucdr_deserialize_sequence_double>
 800f2b2:	b358      	cbz	r0, 800f30c <_JointState__cdr_deserialize+0x104>
 800f2b4:	9b01      	ldr	r3, [sp, #4]
 800f2b6:	632b      	str	r3, [r5, #48]	; 0x30
 800f2b8:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 800f2ba:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800f2bc:	4643      	mov	r3, r8
 800f2be:	463a      	mov	r2, r7
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	f000 fac5 	bl	800f850 <ucdr_deserialize_sequence_double>
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	b198      	cbz	r0, 800f2f2 <_JointState__cdr_deserialize+0xea>
 800f2ca:	9b01      	ldr	r3, [sp, #4]
 800f2cc:	63eb      	str	r3, [r5, #60]	; 0x3c
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	b003      	add	sp, #12
 800f2d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2d6:	9901      	ldr	r1, [sp, #4]
 800f2d8:	4549      	cmp	r1, r9
 800f2da:	d9d8      	bls.n	800f28e <_JointState__cdr_deserialize+0x86>
 800f2dc:	696b      	ldr	r3, [r5, #20]
 800f2de:	75b0      	strb	r0, [r6, #22]
 800f2e0:	441f      	add	r7, r3
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	4630      	mov	r0, r6
 800f2e6:	f7fd f8d3 	bl	800c490 <ucdr_advance_buffer>
 800f2ea:	e7d0      	b.n	800f28e <_JointState__cdr_deserialize+0x86>
 800f2ec:	9b01      	ldr	r3, [sp, #4]
 800f2ee:	626b      	str	r3, [r5, #36]	; 0x24
 800f2f0:	e7d8      	b.n	800f2a4 <_JointState__cdr_deserialize+0x9c>
 800f2f2:	9901      	ldr	r1, [sp, #4]
 800f2f4:	42b9      	cmp	r1, r7
 800f2f6:	d9ea      	bls.n	800f2ce <_JointState__cdr_deserialize+0xc6>
 800f2f8:	75b0      	strb	r0, [r6, #22]
 800f2fa:	00c9      	lsls	r1, r1, #3
 800f2fc:	63e8      	str	r0, [r5, #60]	; 0x3c
 800f2fe:	4630      	mov	r0, r6
 800f300:	f7fd f8c6 	bl	800c490 <ucdr_advance_buffer>
 800f304:	4620      	mov	r0, r4
 800f306:	b003      	add	sp, #12
 800f308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f30c:	9901      	ldr	r1, [sp, #4]
 800f30e:	42a1      	cmp	r1, r4
 800f310:	d9d2      	bls.n	800f2b8 <_JointState__cdr_deserialize+0xb0>
 800f312:	75b0      	strb	r0, [r6, #22]
 800f314:	00c9      	lsls	r1, r1, #3
 800f316:	6328      	str	r0, [r5, #48]	; 0x30
 800f318:	4630      	mov	r0, r6
 800f31a:	f7fd f8b9 	bl	800c490 <ucdr_advance_buffer>
 800f31e:	e7cb      	b.n	800f2b8 <_JointState__cdr_deserialize+0xb0>
 800f320:	4b10      	ldr	r3, [pc, #64]	; (800f364 <_JointState__cdr_deserialize+0x15c>)
 800f322:	4811      	ldr	r0, [pc, #68]	; (800f368 <_JointState__cdr_deserialize+0x160>)
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	221b      	movs	r2, #27
 800f328:	68db      	ldr	r3, [r3, #12]
 800f32a:	2101      	movs	r1, #1
 800f32c:	f007 fc9a 	bl	8016c64 <fwrite>
 800f330:	462c      	mov	r4, r5
 800f332:	4620      	mov	r0, r4
 800f334:	b003      	add	sp, #12
 800f336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f33a:	4b0a      	ldr	r3, [pc, #40]	; (800f364 <_JointState__cdr_deserialize+0x15c>)
 800f33c:	480b      	ldr	r0, [pc, #44]	; (800f36c <_JointState__cdr_deserialize+0x164>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	2231      	movs	r2, #49	; 0x31
 800f342:	68db      	ldr	r3, [r3, #12]
 800f344:	2101      	movs	r1, #1
 800f346:	f007 fc8d 	bl	8016c64 <fwrite>
 800f34a:	2400      	movs	r4, #0
 800f34c:	4620      	mov	r0, r4
 800f34e:	b003      	add	sp, #12
 800f350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f354:	75b0      	strb	r0, [r6, #22]
 800f356:	00c9      	lsls	r1, r1, #3
 800f358:	6268      	str	r0, [r5, #36]	; 0x24
 800f35a:	4630      	mov	r0, r6
 800f35c:	f7fd f898 	bl	800c490 <ucdr_advance_buffer>
 800f360:	e7a0      	b.n	800f2a4 <_JointState__cdr_deserialize+0x9c>
 800f362:	bf00      	nop
 800f364:	20000140 	.word	0x20000140
 800f368:	0801932c 	.word	0x0801932c
 800f36c:	080195b4 	.word	0x080195b4

0800f370 <_JointState__cdr_serialize>:
 800f370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f374:	4606      	mov	r6, r0
 800f376:	2800      	cmp	r0, #0
 800f378:	d03d      	beq.n	800f3f6 <_JointState__cdr_serialize+0x86>
 800f37a:	460f      	mov	r7, r1
 800f37c:	f000 f910 	bl	800f5a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f380:	6843      	ldr	r3, [r0, #4]
 800f382:	4639      	mov	r1, r7
 800f384:	689b      	ldr	r3, [r3, #8]
 800f386:	4630      	mov	r0, r6
 800f388:	4798      	blx	r3
 800f38a:	f8d6 8018 	ldr.w	r8, [r6, #24]
 800f38e:	4638      	mov	r0, r7
 800f390:	4641      	mov	r1, r8
 800f392:	f7fc fd35 	bl	800be00 <ucdr_serialize_uint32_t>
 800f396:	b1e8      	cbz	r0, 800f3d4 <_JointState__cdr_serialize+0x64>
 800f398:	f1b8 0f00 	cmp.w	r8, #0
 800f39c:	d01a      	beq.n	800f3d4 <_JointState__cdr_serialize+0x64>
 800f39e:	2400      	movs	r4, #0
 800f3a0:	e00b      	b.n	800f3ba <_JointState__cdr_serialize+0x4a>
 800f3a2:	f7f0 ff1f 	bl	80001e4 <strlen>
 800f3a6:	1c42      	adds	r2, r0, #1
 800f3a8:	6068      	str	r0, [r5, #4]
 800f3aa:	4649      	mov	r1, r9
 800f3ac:	4638      	mov	r0, r7
 800f3ae:	f000 f9ff 	bl	800f7b0 <ucdr_serialize_sequence_char>
 800f3b2:	3401      	adds	r4, #1
 800f3b4:	b170      	cbz	r0, 800f3d4 <_JointState__cdr_serialize+0x64>
 800f3b6:	45a0      	cmp	r8, r4
 800f3b8:	d00c      	beq.n	800f3d4 <_JointState__cdr_serialize+0x64>
 800f3ba:	6973      	ldr	r3, [r6, #20]
 800f3bc:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800f3c0:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
 800f3c4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800f3c8:	4648      	mov	r0, r9
 800f3ca:	f1b9 0f00 	cmp.w	r9, #0
 800f3ce:	d1e8      	bne.n	800f3a2 <_JointState__cdr_serialize+0x32>
 800f3d0:	464a      	mov	r2, r9
 800f3d2:	e7e9      	b.n	800f3a8 <_JointState__cdr_serialize+0x38>
 800f3d4:	e9d6 1208 	ldrd	r1, r2, [r6, #32]
 800f3d8:	4638      	mov	r0, r7
 800f3da:	f000 fa27 	bl	800f82c <ucdr_serialize_sequence_double>
 800f3de:	e9d6 120b 	ldrd	r1, r2, [r6, #44]	; 0x2c
 800f3e2:	4638      	mov	r0, r7
 800f3e4:	f000 fa22 	bl	800f82c <ucdr_serialize_sequence_double>
 800f3e8:	e9d6 120e 	ldrd	r1, r2, [r6, #56]	; 0x38
 800f3ec:	4638      	mov	r0, r7
 800f3ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3f2:	f000 ba1b 	b.w	800f82c <ucdr_serialize_sequence_double>
 800f3f6:	4b05      	ldr	r3, [pc, #20]	; (800f40c <_JointState__cdr_serialize+0x9c>)
 800f3f8:	4805      	ldr	r0, [pc, #20]	; (800f410 <_JointState__cdr_serialize+0xa0>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	221b      	movs	r2, #27
 800f3fe:	68db      	ldr	r3, [r3, #12]
 800f400:	2101      	movs	r1, #1
 800f402:	f007 fc2f 	bl	8016c64 <fwrite>
 800f406:	4630      	mov	r0, r6
 800f408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f40c:	20000140 	.word	0x20000140
 800f410:	0801932c 	.word	0x0801932c

0800f414 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 800f414:	4800      	ldr	r0, [pc, #0]	; (800f418 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x4>)
 800f416:	4770      	bx	lr
 800f418:	20000094 	.word	0x20000094

0800f41c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f41c:	f000 b928 	b.w	800f670 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>

0800f420 <_Header__max_serialized_size>:
 800f420:	b500      	push	{lr}
 800f422:	b083      	sub	sp, #12
 800f424:	2301      	movs	r3, #1
 800f426:	2100      	movs	r1, #0
 800f428:	f10d 0007 	add.w	r0, sp, #7
 800f42c:	f88d 3007 	strb.w	r3, [sp, #7]
 800f430:	f000 f9a6 	bl	800f780 <max_serialized_size_builtin_interfaces__msg__Time>
 800f434:	b003      	add	sp, #12
 800f436:	f85d fb04 	ldr.w	pc, [sp], #4
 800f43a:	bf00      	nop

0800f43c <get_serialized_size_std_msgs__msg__Header>:
 800f43c:	b570      	push	{r4, r5, r6, lr}
 800f43e:	4605      	mov	r5, r0
 800f440:	b170      	cbz	r0, 800f460 <get_serialized_size_std_msgs__msg__Header+0x24>
 800f442:	460c      	mov	r4, r1
 800f444:	f000 f918 	bl	800f678 <get_serialized_size_builtin_interfaces__msg__Time>
 800f448:	1826      	adds	r6, r4, r0
 800f44a:	4630      	mov	r0, r6
 800f44c:	2104      	movs	r1, #4
 800f44e:	f7fc ffcf 	bl	800c3f0 <ucdr_alignment>
 800f452:	68e9      	ldr	r1, [r5, #12]
 800f454:	f1c4 0405 	rsb	r4, r4, #5
 800f458:	440c      	add	r4, r1
 800f45a:	4404      	add	r4, r0
 800f45c:	19a0      	adds	r0, r4, r6
 800f45e:	bd70      	pop	{r4, r5, r6, pc}
 800f460:	4b04      	ldr	r3, [pc, #16]	; (800f474 <get_serialized_size_std_msgs__msg__Header+0x38>)
 800f462:	4805      	ldr	r0, [pc, #20]	; (800f478 <get_serialized_size_std_msgs__msg__Header+0x3c>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	221b      	movs	r2, #27
 800f468:	68db      	ldr	r3, [r3, #12]
 800f46a:	2101      	movs	r1, #1
 800f46c:	f007 fbfa 	bl	8016c64 <fwrite>
 800f470:	4628      	mov	r0, r5
 800f472:	bd70      	pop	{r4, r5, r6, pc}
 800f474:	20000140 	.word	0x20000140
 800f478:	0801932c 	.word	0x0801932c

0800f47c <_Header__cdr_deserialize>:
 800f47c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f47e:	460c      	mov	r4, r1
 800f480:	b083      	sub	sp, #12
 800f482:	b1e9      	cbz	r1, 800f4c0 <_Header__cdr_deserialize+0x44>
 800f484:	4607      	mov	r7, r0
 800f486:	f000 f98f 	bl	800f7a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f48a:	6843      	ldr	r3, [r0, #4]
 800f48c:	4621      	mov	r1, r4
 800f48e:	68db      	ldr	r3, [r3, #12]
 800f490:	4638      	mov	r0, r7
 800f492:	4798      	blx	r3
 800f494:	6926      	ldr	r6, [r4, #16]
 800f496:	68a1      	ldr	r1, [r4, #8]
 800f498:	4632      	mov	r2, r6
 800f49a:	ab01      	add	r3, sp, #4
 800f49c:	4638      	mov	r0, r7
 800f49e:	f000 f999 	bl	800f7d4 <ucdr_deserialize_sequence_char>
 800f4a2:	4605      	mov	r5, r0
 800f4a4:	b130      	cbz	r0, 800f4b4 <_Header__cdr_deserialize+0x38>
 800f4a6:	9b01      	ldr	r3, [sp, #4]
 800f4a8:	b103      	cbz	r3, 800f4ac <_Header__cdr_deserialize+0x30>
 800f4aa:	3b01      	subs	r3, #1
 800f4ac:	4628      	mov	r0, r5
 800f4ae:	60e3      	str	r3, [r4, #12]
 800f4b0:	b003      	add	sp, #12
 800f4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4b4:	9901      	ldr	r1, [sp, #4]
 800f4b6:	42b1      	cmp	r1, r6
 800f4b8:	d80e      	bhi.n	800f4d8 <_Header__cdr_deserialize+0x5c>
 800f4ba:	4628      	mov	r0, r5
 800f4bc:	b003      	add	sp, #12
 800f4be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4c0:	4b09      	ldr	r3, [pc, #36]	; (800f4e8 <_Header__cdr_deserialize+0x6c>)
 800f4c2:	480a      	ldr	r0, [pc, #40]	; (800f4ec <_Header__cdr_deserialize+0x70>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	221b      	movs	r2, #27
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	2101      	movs	r1, #1
 800f4cc:	f007 fbca 	bl	8016c64 <fwrite>
 800f4d0:	4625      	mov	r5, r4
 800f4d2:	4628      	mov	r0, r5
 800f4d4:	b003      	add	sp, #12
 800f4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4d8:	75b8      	strb	r0, [r7, #22]
 800f4da:	60e0      	str	r0, [r4, #12]
 800f4dc:	4638      	mov	r0, r7
 800f4de:	f7fc ffd7 	bl	800c490 <ucdr_advance_buffer>
 800f4e2:	4628      	mov	r0, r5
 800f4e4:	b003      	add	sp, #12
 800f4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4e8:	20000140 	.word	0x20000140
 800f4ec:	0801932c 	.word	0x0801932c

0800f4f0 <_Header__cdr_serialize>:
 800f4f0:	b570      	push	{r4, r5, r6, lr}
 800f4f2:	4604      	mov	r4, r0
 800f4f4:	b1e8      	cbz	r0, 800f532 <_Header__cdr_serialize+0x42>
 800f4f6:	460e      	mov	r6, r1
 800f4f8:	f000 f956 	bl	800f7a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f4fc:	6843      	ldr	r3, [r0, #4]
 800f4fe:	4631      	mov	r1, r6
 800f500:	689b      	ldr	r3, [r3, #8]
 800f502:	4620      	mov	r0, r4
 800f504:	4798      	blx	r3
 800f506:	68a5      	ldr	r5, [r4, #8]
 800f508:	b155      	cbz	r5, 800f520 <_Header__cdr_serialize+0x30>
 800f50a:	4628      	mov	r0, r5
 800f50c:	f7f0 fe6a 	bl	80001e4 <strlen>
 800f510:	4629      	mov	r1, r5
 800f512:	60e0      	str	r0, [r4, #12]
 800f514:	1c42      	adds	r2, r0, #1
 800f516:	4630      	mov	r0, r6
 800f518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f51c:	f000 b948 	b.w	800f7b0 <ucdr_serialize_sequence_char>
 800f520:	4628      	mov	r0, r5
 800f522:	60e0      	str	r0, [r4, #12]
 800f524:	462a      	mov	r2, r5
 800f526:	4629      	mov	r1, r5
 800f528:	4630      	mov	r0, r6
 800f52a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f52e:	f000 b93f 	b.w	800f7b0 <ucdr_serialize_sequence_char>
 800f532:	4b05      	ldr	r3, [pc, #20]	; (800f548 <_Header__cdr_serialize+0x58>)
 800f534:	4805      	ldr	r0, [pc, #20]	; (800f54c <_Header__cdr_serialize+0x5c>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	221b      	movs	r2, #27
 800f53a:	68db      	ldr	r3, [r3, #12]
 800f53c:	2101      	movs	r1, #1
 800f53e:	f007 fb91 	bl	8016c64 <fwrite>
 800f542:	4620      	mov	r0, r4
 800f544:	bd70      	pop	{r4, r5, r6, pc}
 800f546:	bf00      	nop
 800f548:	20000140 	.word	0x20000140
 800f54c:	0801932c 	.word	0x0801932c

0800f550 <_Header__get_serialized_size>:
 800f550:	b538      	push	{r3, r4, r5, lr}
 800f552:	4604      	mov	r4, r0
 800f554:	b158      	cbz	r0, 800f56e <_Header__get_serialized_size+0x1e>
 800f556:	2100      	movs	r1, #0
 800f558:	f000 f88e 	bl	800f678 <get_serialized_size_builtin_interfaces__msg__Time>
 800f55c:	2104      	movs	r1, #4
 800f55e:	4605      	mov	r5, r0
 800f560:	f7fc ff46 	bl	800c3f0 <ucdr_alignment>
 800f564:	68e2      	ldr	r2, [r4, #12]
 800f566:	3205      	adds	r2, #5
 800f568:	1953      	adds	r3, r2, r5
 800f56a:	4418      	add	r0, r3
 800f56c:	bd38      	pop	{r3, r4, r5, pc}
 800f56e:	4b05      	ldr	r3, [pc, #20]	; (800f584 <_Header__get_serialized_size+0x34>)
 800f570:	4805      	ldr	r0, [pc, #20]	; (800f588 <_Header__get_serialized_size+0x38>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	221b      	movs	r2, #27
 800f576:	68db      	ldr	r3, [r3, #12]
 800f578:	2101      	movs	r1, #1
 800f57a:	f007 fb73 	bl	8016c64 <fwrite>
 800f57e:	4620      	mov	r0, r4
 800f580:	bd38      	pop	{r3, r4, r5, pc}
 800f582:	bf00      	nop
 800f584:	20000140 	.word	0x20000140
 800f588:	0801932c 	.word	0x0801932c

0800f58c <max_serialized_size_std_msgs__msg__Header>:
 800f58c:	b510      	push	{r4, lr}
 800f58e:	2301      	movs	r3, #1
 800f590:	4604      	mov	r4, r0
 800f592:	7003      	strb	r3, [r0, #0]
 800f594:	f000 f8f4 	bl	800f780 <max_serialized_size_builtin_interfaces__msg__Time>
 800f598:	2300      	movs	r3, #0
 800f59a:	7023      	strb	r3, [r4, #0]
 800f59c:	bd10      	pop	{r4, pc}
 800f59e:	bf00      	nop

0800f5a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800f5a0:	4800      	ldr	r0, [pc, #0]	; (800f5a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800f5a2:	4770      	bx	lr
 800f5a4:	200000bc 	.word	0x200000bc

0800f5a8 <_Int32__max_serialized_size>:
 800f5a8:	b508      	push	{r3, lr}
 800f5aa:	2104      	movs	r1, #4
 800f5ac:	2000      	movs	r0, #0
 800f5ae:	f7fc ff1f 	bl	800c3f0 <ucdr_alignment>
 800f5b2:	3004      	adds	r0, #4
 800f5b4:	bd08      	pop	{r3, pc}
 800f5b6:	bf00      	nop

0800f5b8 <get_serialized_size_std_msgs__msg__Int32>:
 800f5b8:	b510      	push	{r4, lr}
 800f5ba:	b128      	cbz	r0, 800f5c8 <get_serialized_size_std_msgs__msg__Int32+0x10>
 800f5bc:	4608      	mov	r0, r1
 800f5be:	2104      	movs	r1, #4
 800f5c0:	f7fc ff16 	bl	800c3f0 <ucdr_alignment>
 800f5c4:	3004      	adds	r0, #4
 800f5c6:	bd10      	pop	{r4, pc}
 800f5c8:	4b05      	ldr	r3, [pc, #20]	; (800f5e0 <get_serialized_size_std_msgs__msg__Int32+0x28>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4604      	mov	r4, r0
 800f5ce:	68db      	ldr	r3, [r3, #12]
 800f5d0:	4804      	ldr	r0, [pc, #16]	; (800f5e4 <get_serialized_size_std_msgs__msg__Int32+0x2c>)
 800f5d2:	221b      	movs	r2, #27
 800f5d4:	2101      	movs	r1, #1
 800f5d6:	f007 fb45 	bl	8016c64 <fwrite>
 800f5da:	4620      	mov	r0, r4
 800f5dc:	bd10      	pop	{r4, pc}
 800f5de:	bf00      	nop
 800f5e0:	20000140 	.word	0x20000140
 800f5e4:	0801932c 	.word	0x0801932c

0800f5e8 <_Int32__cdr_serialize>:
 800f5e8:	b510      	push	{r4, lr}
 800f5ea:	4604      	mov	r4, r0
 800f5ec:	b130      	cbz	r0, 800f5fc <_Int32__cdr_serialize+0x14>
 800f5ee:	460b      	mov	r3, r1
 800f5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5f4:	6801      	ldr	r1, [r0, #0]
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7fc bd34 	b.w	800c064 <ucdr_serialize_int32_t>
 800f5fc:	4b04      	ldr	r3, [pc, #16]	; (800f610 <_Int32__cdr_serialize+0x28>)
 800f5fe:	4805      	ldr	r0, [pc, #20]	; (800f614 <_Int32__cdr_serialize+0x2c>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	221b      	movs	r2, #27
 800f604:	68db      	ldr	r3, [r3, #12]
 800f606:	2101      	movs	r1, #1
 800f608:	f007 fb2c 	bl	8016c64 <fwrite>
 800f60c:	4620      	mov	r0, r4
 800f60e:	bd10      	pop	{r4, pc}
 800f610:	20000140 	.word	0x20000140
 800f614:	0801932c 	.word	0x0801932c

0800f618 <_Int32__cdr_deserialize>:
 800f618:	b109      	cbz	r1, 800f61e <_Int32__cdr_deserialize+0x6>
 800f61a:	f7fc bd53 	b.w	800c0c4 <ucdr_deserialize_int32_t>
 800f61e:	b510      	push	{r4, lr}
 800f620:	4b05      	ldr	r3, [pc, #20]	; (800f638 <_Int32__cdr_deserialize+0x20>)
 800f622:	4806      	ldr	r0, [pc, #24]	; (800f63c <_Int32__cdr_deserialize+0x24>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	460c      	mov	r4, r1
 800f628:	68db      	ldr	r3, [r3, #12]
 800f62a:	221b      	movs	r2, #27
 800f62c:	2101      	movs	r1, #1
 800f62e:	f007 fb19 	bl	8016c64 <fwrite>
 800f632:	4620      	mov	r0, r4
 800f634:	bd10      	pop	{r4, pc}
 800f636:	bf00      	nop
 800f638:	20000140 	.word	0x20000140
 800f63c:	0801932c 	.word	0x0801932c

0800f640 <_Int32__get_serialized_size>:
 800f640:	b510      	push	{r4, lr}
 800f642:	b128      	cbz	r0, 800f650 <_Int32__get_serialized_size+0x10>
 800f644:	2104      	movs	r1, #4
 800f646:	2000      	movs	r0, #0
 800f648:	f7fc fed2 	bl	800c3f0 <ucdr_alignment>
 800f64c:	3004      	adds	r0, #4
 800f64e:	bd10      	pop	{r4, pc}
 800f650:	4b05      	ldr	r3, [pc, #20]	; (800f668 <_Int32__get_serialized_size+0x28>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	4604      	mov	r4, r0
 800f656:	68db      	ldr	r3, [r3, #12]
 800f658:	4804      	ldr	r0, [pc, #16]	; (800f66c <_Int32__get_serialized_size+0x2c>)
 800f65a:	221b      	movs	r2, #27
 800f65c:	2101      	movs	r1, #1
 800f65e:	f007 fb01 	bl	8016c64 <fwrite>
 800f662:	4620      	mov	r0, r4
 800f664:	bd10      	pop	{r4, pc}
 800f666:	bf00      	nop
 800f668:	20000140 	.word	0x20000140
 800f66c:	0801932c 	.word	0x0801932c

0800f670 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f670:	4800      	ldr	r0, [pc, #0]	; (800f674 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800f672:	4770      	bx	lr
 800f674:	200000e4 	.word	0x200000e4

0800f678 <get_serialized_size_builtin_interfaces__msg__Time>:
 800f678:	b538      	push	{r3, r4, r5, lr}
 800f67a:	b178      	cbz	r0, 800f69c <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800f67c:	460d      	mov	r5, r1
 800f67e:	4628      	mov	r0, r5
 800f680:	2104      	movs	r1, #4
 800f682:	f7fc feb5 	bl	800c3f0 <ucdr_alignment>
 800f686:	1d2c      	adds	r4, r5, #4
 800f688:	4404      	add	r4, r0
 800f68a:	4620      	mov	r0, r4
 800f68c:	2104      	movs	r1, #4
 800f68e:	f7fc feaf 	bl	800c3f0 <ucdr_alignment>
 800f692:	f1c5 0504 	rsb	r5, r5, #4
 800f696:	4428      	add	r0, r5
 800f698:	4420      	add	r0, r4
 800f69a:	bd38      	pop	{r3, r4, r5, pc}
 800f69c:	4b05      	ldr	r3, [pc, #20]	; (800f6b4 <get_serialized_size_builtin_interfaces__msg__Time+0x3c>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	4604      	mov	r4, r0
 800f6a2:	68db      	ldr	r3, [r3, #12]
 800f6a4:	4804      	ldr	r0, [pc, #16]	; (800f6b8 <get_serialized_size_builtin_interfaces__msg__Time+0x40>)
 800f6a6:	221b      	movs	r2, #27
 800f6a8:	2101      	movs	r1, #1
 800f6aa:	f007 fadb 	bl	8016c64 <fwrite>
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	bd38      	pop	{r3, r4, r5, pc}
 800f6b2:	bf00      	nop
 800f6b4:	20000140 	.word	0x20000140
 800f6b8:	0801932c 	.word	0x0801932c

0800f6bc <_Time__cdr_serialize>:
 800f6bc:	b538      	push	{r3, r4, r5, lr}
 800f6be:	4604      	mov	r4, r0
 800f6c0:	b150      	cbz	r0, 800f6d8 <_Time__cdr_serialize+0x1c>
 800f6c2:	460d      	mov	r5, r1
 800f6c4:	6801      	ldr	r1, [r0, #0]
 800f6c6:	4628      	mov	r0, r5
 800f6c8:	f7fc fccc 	bl	800c064 <ucdr_serialize_int32_t>
 800f6cc:	6861      	ldr	r1, [r4, #4]
 800f6ce:	4628      	mov	r0, r5
 800f6d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6d4:	f7fc bb94 	b.w	800be00 <ucdr_serialize_uint32_t>
 800f6d8:	4b04      	ldr	r3, [pc, #16]	; (800f6ec <_Time__cdr_serialize+0x30>)
 800f6da:	4805      	ldr	r0, [pc, #20]	; (800f6f0 <_Time__cdr_serialize+0x34>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	221b      	movs	r2, #27
 800f6e0:	68db      	ldr	r3, [r3, #12]
 800f6e2:	2101      	movs	r1, #1
 800f6e4:	f007 fabe 	bl	8016c64 <fwrite>
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	bd38      	pop	{r3, r4, r5, pc}
 800f6ec:	20000140 	.word	0x20000140
 800f6f0:	0801932c 	.word	0x0801932c

0800f6f4 <_Time__cdr_deserialize>:
 800f6f4:	b538      	push	{r3, r4, r5, lr}
 800f6f6:	460c      	mov	r4, r1
 800f6f8:	b141      	cbz	r1, 800f70c <_Time__cdr_deserialize+0x18>
 800f6fa:	4605      	mov	r5, r0
 800f6fc:	f7fc fce2 	bl	800c0c4 <ucdr_deserialize_int32_t>
 800f700:	1d21      	adds	r1, r4, #4
 800f702:	4628      	mov	r0, r5
 800f704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f708:	f7fc bbda 	b.w	800bec0 <ucdr_deserialize_uint32_t>
 800f70c:	4b04      	ldr	r3, [pc, #16]	; (800f720 <_Time__cdr_deserialize+0x2c>)
 800f70e:	4805      	ldr	r0, [pc, #20]	; (800f724 <_Time__cdr_deserialize+0x30>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	221b      	movs	r2, #27
 800f714:	68db      	ldr	r3, [r3, #12]
 800f716:	2101      	movs	r1, #1
 800f718:	f007 faa4 	bl	8016c64 <fwrite>
 800f71c:	4620      	mov	r0, r4
 800f71e:	bd38      	pop	{r3, r4, r5, pc}
 800f720:	20000140 	.word	0x20000140
 800f724:	0801932c 	.word	0x0801932c

0800f728 <_Time__max_serialized_size>:
 800f728:	b510      	push	{r4, lr}
 800f72a:	2104      	movs	r1, #4
 800f72c:	2000      	movs	r0, #0
 800f72e:	f7fc fe5f 	bl	800c3f0 <ucdr_alignment>
 800f732:	1d04      	adds	r4, r0, #4
 800f734:	4620      	mov	r0, r4
 800f736:	2104      	movs	r1, #4
 800f738:	f7fc fe5a 	bl	800c3f0 <ucdr_alignment>
 800f73c:	3004      	adds	r0, #4
 800f73e:	4420      	add	r0, r4
 800f740:	bd10      	pop	{r4, pc}
 800f742:	bf00      	nop

0800f744 <_Time__get_serialized_size>:
 800f744:	b510      	push	{r4, lr}
 800f746:	b158      	cbz	r0, 800f760 <_Time__get_serialized_size+0x1c>
 800f748:	2104      	movs	r1, #4
 800f74a:	2000      	movs	r0, #0
 800f74c:	f7fc fe50 	bl	800c3f0 <ucdr_alignment>
 800f750:	1d04      	adds	r4, r0, #4
 800f752:	4620      	mov	r0, r4
 800f754:	2104      	movs	r1, #4
 800f756:	f7fc fe4b 	bl	800c3f0 <ucdr_alignment>
 800f75a:	3004      	adds	r0, #4
 800f75c:	4420      	add	r0, r4
 800f75e:	bd10      	pop	{r4, pc}
 800f760:	4b05      	ldr	r3, [pc, #20]	; (800f778 <_Time__get_serialized_size+0x34>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	4604      	mov	r4, r0
 800f766:	68db      	ldr	r3, [r3, #12]
 800f768:	4804      	ldr	r0, [pc, #16]	; (800f77c <_Time__get_serialized_size+0x38>)
 800f76a:	221b      	movs	r2, #27
 800f76c:	2101      	movs	r1, #1
 800f76e:	f007 fa79 	bl	8016c64 <fwrite>
 800f772:	4620      	mov	r0, r4
 800f774:	bd10      	pop	{r4, pc}
 800f776:	bf00      	nop
 800f778:	20000140 	.word	0x20000140
 800f77c:	0801932c 	.word	0x0801932c

0800f780 <max_serialized_size_builtin_interfaces__msg__Time>:
 800f780:	b538      	push	{r3, r4, r5, lr}
 800f782:	2301      	movs	r3, #1
 800f784:	7003      	strb	r3, [r0, #0]
 800f786:	460c      	mov	r4, r1
 800f788:	4608      	mov	r0, r1
 800f78a:	2104      	movs	r1, #4
 800f78c:	f7fc fe30 	bl	800c3f0 <ucdr_alignment>
 800f790:	1d25      	adds	r5, r4, #4
 800f792:	4405      	add	r5, r0
 800f794:	4628      	mov	r0, r5
 800f796:	2104      	movs	r1, #4
 800f798:	f7fc fe2a 	bl	800c3f0 <ucdr_alignment>
 800f79c:	f1c4 0404 	rsb	r4, r4, #4
 800f7a0:	4420      	add	r0, r4
 800f7a2:	4428      	add	r0, r5
 800f7a4:	bd38      	pop	{r3, r4, r5, pc}
 800f7a6:	bf00      	nop

0800f7a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800f7a8:	4800      	ldr	r0, [pc, #0]	; (800f7ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800f7aa:	4770      	bx	lr
 800f7ac:	2000010c 	.word	0x2000010c

0800f7b0 <ucdr_serialize_sequence_char>:
 800f7b0:	b570      	push	{r4, r5, r6, lr}
 800f7b2:	460e      	mov	r6, r1
 800f7b4:	4615      	mov	r5, r2
 800f7b6:	7d01      	ldrb	r1, [r0, #20]
 800f7b8:	4604      	mov	r4, r0
 800f7ba:	f7fc fb51 	bl	800be60 <ucdr_serialize_endian_uint32_t>
 800f7be:	b90d      	cbnz	r5, 800f7c4 <ucdr_serialize_sequence_char+0x14>
 800f7c0:	2001      	movs	r0, #1
 800f7c2:	bd70      	pop	{r4, r5, r6, pc}
 800f7c4:	7d21      	ldrb	r1, [r4, #20]
 800f7c6:	462b      	mov	r3, r5
 800f7c8:	4632      	mov	r2, r6
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7d0:	f006 b96e 	b.w	8015ab0 <ucdr_serialize_endian_array_char>

0800f7d4 <ucdr_deserialize_sequence_char>:
 800f7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d8:	461d      	mov	r5, r3
 800f7da:	4616      	mov	r6, r2
 800f7dc:	460f      	mov	r7, r1
 800f7de:	461a      	mov	r2, r3
 800f7e0:	7d01      	ldrb	r1, [r0, #20]
 800f7e2:	4604      	mov	r4, r0
 800f7e4:	f7fc fb9c 	bl	800bf20 <ucdr_deserialize_endian_uint32_t>
 800f7e8:	682b      	ldr	r3, [r5, #0]
 800f7ea:	429e      	cmp	r6, r3
 800f7ec:	bf3c      	itt	cc
 800f7ee:	2201      	movcc	r2, #1
 800f7f0:	75a2      	strbcc	r2, [r4, #22]
 800f7f2:	b913      	cbnz	r3, 800f7fa <ucdr_deserialize_sequence_char+0x26>
 800f7f4:	2001      	movs	r0, #1
 800f7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7fa:	7d21      	ldrb	r1, [r4, #20]
 800f7fc:	463a      	mov	r2, r7
 800f7fe:	4620      	mov	r0, r4
 800f800:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f804:	f006 b986 	b.w	8015b14 <ucdr_deserialize_endian_array_char>

0800f808 <ucdr_serialize_sequence_uint8_t>:
 800f808:	b570      	push	{r4, r5, r6, lr}
 800f80a:	460e      	mov	r6, r1
 800f80c:	4615      	mov	r5, r2
 800f80e:	7d01      	ldrb	r1, [r0, #20]
 800f810:	4604      	mov	r4, r0
 800f812:	f7fc fb25 	bl	800be60 <ucdr_serialize_endian_uint32_t>
 800f816:	b90d      	cbnz	r5, 800f81c <ucdr_serialize_sequence_uint8_t+0x14>
 800f818:	2001      	movs	r0, #1
 800f81a:	bd70      	pop	{r4, r5, r6, pc}
 800f81c:	7d21      	ldrb	r1, [r4, #20]
 800f81e:	462b      	mov	r3, r5
 800f820:	4632      	mov	r2, r6
 800f822:	4620      	mov	r0, r4
 800f824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f828:	f006 b9d8 	b.w	8015bdc <ucdr_serialize_endian_array_uint8_t>

0800f82c <ucdr_serialize_sequence_double>:
 800f82c:	b570      	push	{r4, r5, r6, lr}
 800f82e:	460e      	mov	r6, r1
 800f830:	4615      	mov	r5, r2
 800f832:	7d01      	ldrb	r1, [r0, #20]
 800f834:	4604      	mov	r4, r0
 800f836:	f7fc fb13 	bl	800be60 <ucdr_serialize_endian_uint32_t>
 800f83a:	b90d      	cbnz	r5, 800f840 <ucdr_serialize_sequence_double+0x14>
 800f83c:	2001      	movs	r0, #1
 800f83e:	bd70      	pop	{r4, r5, r6, pc}
 800f840:	7d21      	ldrb	r1, [r4, #20]
 800f842:	462b      	mov	r3, r5
 800f844:	4632      	mov	r2, r6
 800f846:	4620      	mov	r0, r4
 800f848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f84c:	f006 ba2a 	b.w	8015ca4 <ucdr_serialize_endian_array_double>

0800f850 <ucdr_deserialize_sequence_double>:
 800f850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f854:	461d      	mov	r5, r3
 800f856:	4616      	mov	r6, r2
 800f858:	460f      	mov	r7, r1
 800f85a:	461a      	mov	r2, r3
 800f85c:	7d01      	ldrb	r1, [r0, #20]
 800f85e:	4604      	mov	r4, r0
 800f860:	f7fc fb5e 	bl	800bf20 <ucdr_deserialize_endian_uint32_t>
 800f864:	682b      	ldr	r3, [r5, #0]
 800f866:	429e      	cmp	r6, r3
 800f868:	bf3c      	itt	cc
 800f86a:	2201      	movcc	r2, #1
 800f86c:	75a2      	strbcc	r2, [r4, #22]
 800f86e:	b913      	cbnz	r3, 800f876 <ucdr_deserialize_sequence_double+0x26>
 800f870:	2001      	movs	r0, #1
 800f872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f876:	7d21      	ldrb	r1, [r4, #20]
 800f878:	463a      	mov	r2, r7
 800f87a:	4620      	mov	r0, r4
 800f87c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f880:	f006 ba64 	b.w	8015d4c <ucdr_deserialize_endian_array_double>

0800f884 <uxr_buffer_delete_entity>:
 800f884:	b530      	push	{r4, r5, lr}
 800f886:	b08f      	sub	sp, #60	; 0x3c
 800f888:	2403      	movs	r4, #3
 800f88a:	2500      	movs	r5, #0
 800f88c:	e9cd 4500 	strd	r4, r5, [sp]
 800f890:	9202      	str	r2, [sp, #8]
 800f892:	ab06      	add	r3, sp, #24
 800f894:	2204      	movs	r2, #4
 800f896:	9103      	str	r1, [sp, #12]
 800f898:	4604      	mov	r4, r0
 800f89a:	f001 f959 	bl	8010b50 <uxr_prepare_stream_to_write_submessage>
 800f89e:	b918      	cbnz	r0, 800f8a8 <uxr_buffer_delete_entity+0x24>
 800f8a0:	4604      	mov	r4, r0
 800f8a2:	4620      	mov	r0, r4
 800f8a4:	b00f      	add	sp, #60	; 0x3c
 800f8a6:	bd30      	pop	{r4, r5, pc}
 800f8a8:	9902      	ldr	r1, [sp, #8]
 800f8aa:	aa05      	add	r2, sp, #20
 800f8ac:	4620      	mov	r0, r4
 800f8ae:	f001 fa85 	bl	8010dbc <uxr_init_base_object_request>
 800f8b2:	a905      	add	r1, sp, #20
 800f8b4:	4604      	mov	r4, r0
 800f8b6:	a806      	add	r0, sp, #24
 800f8b8:	f002 fec0 	bl	801263c <uxr_serialize_DELETE_Payload>
 800f8bc:	4620      	mov	r0, r4
 800f8be:	b00f      	add	sp, #60	; 0x3c
 800f8c0:	bd30      	pop	{r4, r5, pc}
 800f8c2:	bf00      	nop

0800f8c4 <uxr_common_create_entity>:
 800f8c4:	b530      	push	{r4, r5, lr}
 800f8c6:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800f8ca:	b08d      	sub	sp, #52	; 0x34
 800f8cc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f8d0:	2d01      	cmp	r5, #1
 800f8d2:	bf0c      	ite	eq
 800f8d4:	f003 0201 	andeq.w	r2, r3, #1
 800f8d8:	2200      	movne	r2, #0
 800f8da:	330e      	adds	r3, #14
 800f8dc:	4604      	mov	r4, r0
 800f8de:	441a      	add	r2, r3
 800f8e0:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 800f8e4:	9001      	str	r0, [sp, #4]
 800f8e6:	2101      	movs	r1, #1
 800f8e8:	9100      	str	r1, [sp, #0]
 800f8ea:	b292      	uxth	r2, r2
 800f8ec:	9903      	ldr	r1, [sp, #12]
 800f8ee:	ab04      	add	r3, sp, #16
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	f001 f92d 	bl	8010b50 <uxr_prepare_stream_to_write_submessage>
 800f8f6:	b918      	cbnz	r0, 800f900 <uxr_common_create_entity+0x3c>
 800f8f8:	4604      	mov	r4, r0
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	b00d      	add	sp, #52	; 0x34
 800f8fe:	bd30      	pop	{r4, r5, pc}
 800f900:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f902:	9902      	ldr	r1, [sp, #8]
 800f904:	4620      	mov	r0, r4
 800f906:	f001 fa59 	bl	8010dbc <uxr_init_base_object_request>
 800f90a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f90c:	4604      	mov	r4, r0
 800f90e:	a804      	add	r0, sp, #16
 800f910:	f002 fdfc 	bl	801250c <uxr_serialize_CREATE_Payload>
 800f914:	4620      	mov	r0, r4
 800f916:	b00d      	add	sp, #52	; 0x34
 800f918:	bd30      	pop	{r4, r5, pc}
 800f91a:	bf00      	nop

0800f91c <uxr_buffer_create_participant_bin>:
 800f91c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f91e:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 800f922:	ac11      	add	r4, sp, #68	; 0x44
 800f924:	9103      	str	r1, [sp, #12]
 800f926:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 800f928:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 800f92c:	2103      	movs	r1, #3
 800f92e:	7221      	strb	r1, [r4, #8]
 800f930:	2301      	movs	r3, #1
 800f932:	2100      	movs	r1, #0
 800f934:	7123      	strb	r3, [r4, #4]
 800f936:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 800f93a:	9202      	str	r2, [sp, #8]
 800f93c:	4605      	mov	r5, r0
 800f93e:	f88d 1014 	strb.w	r1, [sp, #20]
 800f942:	b1ce      	cbz	r6, 800f978 <uxr_buffer_create_participant_bin+0x5c>
 800f944:	f88d 301c 	strb.w	r3, [sp, #28]
 800f948:	9608      	str	r6, [sp, #32]
 800f94a:	a809      	add	r0, sp, #36	; 0x24
 800f94c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f950:	a915      	add	r1, sp, #84	; 0x54
 800f952:	f7fc fd49 	bl	800c3e8 <ucdr_init_buffer>
 800f956:	a905      	add	r1, sp, #20
 800f958:	a809      	add	r0, sp, #36	; 0x24
 800f95a:	f002 fb1f 	bl	8011f9c <uxr_serialize_OBJK_DomainParticipant_Binary>
 800f95e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f960:	9401      	str	r4, [sp, #4]
 800f962:	b283      	uxth	r3, r0
 800f964:	9700      	str	r7, [sp, #0]
 800f966:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f96a:	60e0      	str	r0, [r4, #12]
 800f96c:	4628      	mov	r0, r5
 800f96e:	f7ff ffa9 	bl	800f8c4 <uxr_common_create_entity>
 800f972:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 800f976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f978:	f88d 601c 	strb.w	r6, [sp, #28]
 800f97c:	e7e5      	b.n	800f94a <uxr_buffer_create_participant_bin+0x2e>
 800f97e:	bf00      	nop

0800f980 <uxr_buffer_create_topic_bin>:
 800f980:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f982:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f986:	ac13      	add	r4, sp, #76	; 0x4c
 800f988:	4605      	mov	r5, r0
 800f98a:	9105      	str	r1, [sp, #20]
 800f98c:	4618      	mov	r0, r3
 800f98e:	a997      	add	r1, sp, #604	; 0x25c
 800f990:	2602      	movs	r6, #2
 800f992:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f996:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 800f99a:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 800f99e:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 800f9a0:	f000 fa60 	bl	800fe64 <uxr_object_id_to_raw>
 800f9a4:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 800f9a6:	9206      	str	r2, [sp, #24]
 800f9a8:	2303      	movs	r3, #3
 800f9aa:	2101      	movs	r1, #1
 800f9ac:	7223      	strb	r3, [r4, #8]
 800f9ae:	a80b      	add	r0, sp, #44	; 0x2c
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f9b6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800f9ba:	a917      	add	r1, sp, #92	; 0x5c
 800f9bc:	f88d 301c 	strb.w	r3, [sp, #28]
 800f9c0:	960a      	str	r6, [sp, #40]	; 0x28
 800f9c2:	f7fc fd11 	bl	800c3e8 <ucdr_init_buffer>
 800f9c6:	a906      	add	r1, sp, #24
 800f9c8:	a80b      	add	r0, sp, #44	; 0x2c
 800f9ca:	f002 fb09 	bl	8011fe0 <uxr_serialize_OBJK_Topic_Binary>
 800f9ce:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800f9d0:	9401      	str	r4, [sp, #4]
 800f9d2:	9700      	str	r7, [sp, #0]
 800f9d4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f9d8:	4628      	mov	r0, r5
 800f9da:	b2b3      	uxth	r3, r6
 800f9dc:	60e6      	str	r6, [r4, #12]
 800f9de:	f7ff ff71 	bl	800f8c4 <uxr_common_create_entity>
 800f9e2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f9e8 <uxr_buffer_create_publisher_bin>:
 800f9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9ea:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800f9ee:	ac0e      	add	r4, sp, #56	; 0x38
 800f9f0:	4605      	mov	r5, r0
 800f9f2:	9105      	str	r1, [sp, #20]
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	2603      	movs	r6, #3
 800f9f8:	a992      	add	r1, sp, #584	; 0x248
 800f9fa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f9fe:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800fa02:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800fa06:	f000 fa2d 	bl	800fe64 <uxr_object_id_to_raw>
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	a806      	add	r0, sp, #24
 800fa0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa12:	a912      	add	r1, sp, #72	; 0x48
 800fa14:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800fa18:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800fa1c:	7226      	strb	r6, [r4, #8]
 800fa1e:	f7fc fce3 	bl	800c3e8 <ucdr_init_buffer>
 800fa22:	a993      	add	r1, sp, #588	; 0x24c
 800fa24:	a806      	add	r0, sp, #24
 800fa26:	f002 fb8f 	bl	8012148 <uxr_serialize_OBJK_Publisher_Binary>
 800fa2a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fa2c:	9700      	str	r7, [sp, #0]
 800fa2e:	9401      	str	r4, [sp, #4]
 800fa30:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fa34:	4628      	mov	r0, r5
 800fa36:	b2b3      	uxth	r3, r6
 800fa38:	60e6      	str	r6, [r4, #12]
 800fa3a:	f7ff ff43 	bl	800f8c4 <uxr_common_create_entity>
 800fa3e:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800fa42:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fa44 <uxr_buffer_create_subscriber_bin>:
 800fa44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa46:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800fa4a:	ac0e      	add	r4, sp, #56	; 0x38
 800fa4c:	4605      	mov	r5, r0
 800fa4e:	9105      	str	r1, [sp, #20]
 800fa50:	4618      	mov	r0, r3
 800fa52:	a992      	add	r1, sp, #584	; 0x248
 800fa54:	2604      	movs	r6, #4
 800fa56:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fa5a:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800fa5e:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800fa62:	f000 f9ff 	bl	800fe64 <uxr_object_id_to_raw>
 800fa66:	2103      	movs	r1, #3
 800fa68:	2300      	movs	r3, #0
 800fa6a:	a806      	add	r0, sp, #24
 800fa6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa70:	7221      	strb	r1, [r4, #8]
 800fa72:	a912      	add	r1, sp, #72	; 0x48
 800fa74:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800fa78:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800fa7c:	f7fc fcb4 	bl	800c3e8 <ucdr_init_buffer>
 800fa80:	a993      	add	r1, sp, #588	; 0x24c
 800fa82:	a806      	add	r0, sp, #24
 800fa84:	f002 fc10 	bl	80122a8 <uxr_serialize_OBJK_Subscriber_Binary>
 800fa88:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fa8a:	9700      	str	r7, [sp, #0]
 800fa8c:	9401      	str	r4, [sp, #4]
 800fa8e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fa92:	4628      	mov	r0, r5
 800fa94:	b2b3      	uxth	r3, r6
 800fa96:	60e6      	str	r6, [r4, #12]
 800fa98:	f7ff ff14 	bl	800f8c4 <uxr_common_create_entity>
 800fa9c:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800faa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800faa2:	bf00      	nop

0800faa4 <uxr_buffer_create_datawriter_bin>:
 800faa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faa8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800faac:	ac1d      	add	r4, sp, #116	; 0x74
 800faae:	f8bd 92bc 	ldrh.w	r9, [sp, #700]	; 0x2bc
 800fab2:	9105      	str	r1, [sp, #20]
 800fab4:	2605      	movs	r6, #5
 800fab6:	a9a1      	add	r1, sp, #644	; 0x284
 800fab8:	4605      	mov	r5, r0
 800faba:	4618      	mov	r0, r3
 800fabc:	9204      	str	r2, [sp, #16]
 800fabe:	9303      	str	r3, [sp, #12]
 800fac0:	f89d b2b4 	ldrb.w	fp, [sp, #692]	; 0x2b4
 800fac4:	7126      	strb	r6, [r4, #4]
 800fac6:	f89d a2b8 	ldrb.w	sl, [sp, #696]	; 0x2b8
 800faca:	f89d 62c0 	ldrb.w	r6, [sp, #704]	; 0x2c0
 800face:	f89d 82c4 	ldrb.w	r8, [sp, #708]	; 0x2c4
 800fad2:	2703      	movs	r7, #3
 800fad4:	f000 f9c6 	bl	800fe64 <uxr_object_id_to_raw>
 800fad8:	a90e      	add	r1, sp, #56	; 0x38
 800fada:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
 800fadc:	7227      	strb	r7, [r4, #8]
 800fade:	f000 f9c1 	bl	800fe64 <uxr_object_id_to_raw>
 800fae2:	f1b9 0100 	subs.w	r1, r9, #0
 800fae6:	f04f 0300 	mov.w	r3, #0
 800faea:	bf18      	it	ne
 800faec:	2101      	movne	r1, #1
 800faee:	2201      	movs	r2, #1
 800faf0:	f8ad 9044 	strh.w	r9, [sp, #68]	; 0x44
 800faf4:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
 800faf8:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800fafc:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800fb00:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800fb04:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800fb08:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800fb0c:	f1bb 0f00 	cmp.w	fp, #0
 800fb10:	d131      	bne.n	800fb76 <uxr_buffer_create_datawriter_bin+0xd2>
 800fb12:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
 800fb16:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800fb1a:	f04f 0c12 	mov.w	ip, #18
 800fb1e:	200a      	movs	r0, #10
 800fb20:	2320      	movs	r3, #32
 800fb22:	2210      	movs	r2, #16
 800fb24:	2108      	movs	r1, #8
 800fb26:	2702      	movs	r7, #2
 800fb28:	f1ba 0f00 	cmp.w	sl, #0
 800fb2c:	d004      	beq.n	800fb38 <uxr_buffer_create_datawriter_bin+0x94>
 800fb2e:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800fb32:	4673      	mov	r3, lr
 800fb34:	4662      	mov	r2, ip
 800fb36:	4601      	mov	r1, r0
 800fb38:	2e02      	cmp	r6, #2
 800fb3a:	d027      	beq.n	800fb8c <uxr_buffer_create_datawriter_bin+0xe8>
 800fb3c:	2e03      	cmp	r6, #3
 800fb3e:	d02b      	beq.n	800fb98 <uxr_buffer_create_datawriter_bin+0xf4>
 800fb40:	2e01      	cmp	r6, #1
 800fb42:	d026      	beq.n	800fb92 <uxr_buffer_create_datawriter_bin+0xee>
 800fb44:	a806      	add	r0, sp, #24
 800fb46:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb4a:	a921      	add	r1, sp, #132	; 0x84
 800fb4c:	f7fc fc4c 	bl	800c3e8 <ucdr_init_buffer>
 800fb50:	a90e      	add	r1, sp, #56	; 0x38
 800fb52:	a806      	add	r0, sp, #24
 800fb54:	f002 fc5a 	bl	801240c <uxr_serialize_OBJK_DataWriter_Binary>
 800fb58:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fb5a:	9401      	str	r4, [sp, #4]
 800fb5c:	b283      	uxth	r3, r0
 800fb5e:	f8cd 8000 	str.w	r8, [sp]
 800fb62:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fb66:	60e0      	str	r0, [r4, #12]
 800fb68:	4628      	mov	r0, r5
 800fb6a:	f7ff feab 	bl	800f8c4 <uxr_common_create_entity>
 800fb6e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800fb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb76:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fb7a:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800fb7e:	f04f 0c13 	mov.w	ip, #19
 800fb82:	200b      	movs	r0, #11
 800fb84:	2321      	movs	r3, #33	; 0x21
 800fb86:	2211      	movs	r2, #17
 800fb88:	2109      	movs	r1, #9
 800fb8a:	e7cd      	b.n	800fb28 <uxr_buffer_create_datawriter_bin+0x84>
 800fb8c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fb90:	e7d8      	b.n	800fb44 <uxr_buffer_create_datawriter_bin+0xa0>
 800fb92:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800fb96:	e7d5      	b.n	800fb44 <uxr_buffer_create_datawriter_bin+0xa0>
 800fb98:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800fb9c:	e7d2      	b.n	800fb44 <uxr_buffer_create_datawriter_bin+0xa0>
 800fb9e:	bf00      	nop

0800fba0 <uxr_buffer_create_datareader_bin>:
 800fba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fba4:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800fba8:	ac1f      	add	r4, sp, #124	; 0x7c
 800fbaa:	f8bd 92c4 	ldrh.w	r9, [sp, #708]	; 0x2c4
 800fbae:	9105      	str	r1, [sp, #20]
 800fbb0:	2606      	movs	r6, #6
 800fbb2:	a9a3      	add	r1, sp, #652	; 0x28c
 800fbb4:	4605      	mov	r5, r0
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	9204      	str	r2, [sp, #16]
 800fbba:	9303      	str	r3, [sp, #12]
 800fbbc:	f89d b2bc 	ldrb.w	fp, [sp, #700]	; 0x2bc
 800fbc0:	7126      	strb	r6, [r4, #4]
 800fbc2:	f89d a2c0 	ldrb.w	sl, [sp, #704]	; 0x2c0
 800fbc6:	f89d 62c8 	ldrb.w	r6, [sp, #712]	; 0x2c8
 800fbca:	f89d 82cc 	ldrb.w	r8, [sp, #716]	; 0x2cc
 800fbce:	2703      	movs	r7, #3
 800fbd0:	f000 f948 	bl	800fe64 <uxr_object_id_to_raw>
 800fbd4:	a90e      	add	r1, sp, #56	; 0x38
 800fbd6:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
 800fbd8:	7227      	strb	r7, [r4, #8]
 800fbda:	f000 f943 	bl	800fe64 <uxr_object_id_to_raw>
 800fbde:	f1b9 0100 	subs.w	r1, r9, #0
 800fbe2:	f04f 0300 	mov.w	r3, #0
 800fbe6:	bf18      	it	ne
 800fbe8:	2101      	movne	r1, #1
 800fbea:	2201      	movs	r2, #1
 800fbec:	f8ad 9044 	strh.w	r9, [sp, #68]	; 0x44
 800fbf0:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
 800fbf4:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800fbf8:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800fbfc:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800fc00:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800fc04:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800fc08:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800fc0c:	f1bb 0f00 	cmp.w	fp, #0
 800fc10:	d131      	bne.n	800fc76 <uxr_buffer_create_datareader_bin+0xd6>
 800fc12:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
 800fc16:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800fc1a:	f04f 0c12 	mov.w	ip, #18
 800fc1e:	200a      	movs	r0, #10
 800fc20:	2320      	movs	r3, #32
 800fc22:	2210      	movs	r2, #16
 800fc24:	2108      	movs	r1, #8
 800fc26:	2702      	movs	r7, #2
 800fc28:	f1ba 0f00 	cmp.w	sl, #0
 800fc2c:	d004      	beq.n	800fc38 <uxr_buffer_create_datareader_bin+0x98>
 800fc2e:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800fc32:	4673      	mov	r3, lr
 800fc34:	4662      	mov	r2, ip
 800fc36:	4601      	mov	r1, r0
 800fc38:	2e02      	cmp	r6, #2
 800fc3a:	d027      	beq.n	800fc8c <uxr_buffer_create_datareader_bin+0xec>
 800fc3c:	2e03      	cmp	r6, #3
 800fc3e:	d02b      	beq.n	800fc98 <uxr_buffer_create_datareader_bin+0xf8>
 800fc40:	2e01      	cmp	r6, #1
 800fc42:	d026      	beq.n	800fc92 <uxr_buffer_create_datareader_bin+0xf2>
 800fc44:	a806      	add	r0, sp, #24
 800fc46:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc4a:	a923      	add	r1, sp, #140	; 0x8c
 800fc4c:	f7fc fbcc 	bl	800c3e8 <ucdr_init_buffer>
 800fc50:	a90e      	add	r1, sp, #56	; 0x38
 800fc52:	a806      	add	r0, sp, #24
 800fc54:	f002 fb9e 	bl	8012394 <uxr_serialize_OBJK_DataReader_Binary>
 800fc58:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fc5a:	9401      	str	r4, [sp, #4]
 800fc5c:	b283      	uxth	r3, r0
 800fc5e:	f8cd 8000 	str.w	r8, [sp]
 800fc62:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fc66:	60e0      	str	r0, [r4, #12]
 800fc68:	4628      	mov	r0, r5
 800fc6a:	f7ff fe2b 	bl	800f8c4 <uxr_common_create_entity>
 800fc6e:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 800fc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc76:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fc7a:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800fc7e:	f04f 0c13 	mov.w	ip, #19
 800fc82:	200b      	movs	r0, #11
 800fc84:	2321      	movs	r3, #33	; 0x21
 800fc86:	2211      	movs	r2, #17
 800fc88:	2109      	movs	r1, #9
 800fc8a:	e7cd      	b.n	800fc28 <uxr_buffer_create_datareader_bin+0x88>
 800fc8c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fc90:	e7d8      	b.n	800fc44 <uxr_buffer_create_datareader_bin+0xa4>
 800fc92:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800fc96:	e7d5      	b.n	800fc44 <uxr_buffer_create_datareader_bin+0xa4>
 800fc98:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800fc9c:	e7d2      	b.n	800fc44 <uxr_buffer_create_datareader_bin+0xa4>
 800fc9e:	bf00      	nop

0800fca0 <get_custom_error>:
 800fca0:	4b01      	ldr	r3, [pc, #4]	; (800fca8 <get_custom_error+0x8>)
 800fca2:	7818      	ldrb	r0, [r3, #0]
 800fca4:	4770      	bx	lr
 800fca6:	bf00      	nop
 800fca8:	20010284 	.word	0x20010284

0800fcac <recv_custom_msg>:
 800fcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcb0:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 800fcb4:	b089      	sub	sp, #36	; 0x24
 800fcb6:	2600      	movs	r6, #0
 800fcb8:	4604      	mov	r4, r0
 800fcba:	9305      	str	r3, [sp, #20]
 800fcbc:	468a      	mov	sl, r1
 800fcbe:	4693      	mov	fp, r2
 800fcc0:	f88d 601e 	strb.w	r6, [sp, #30]
 800fcc4:	b325      	cbz	r5, 800fd10 <recv_custom_msg+0x64>
 800fcc6:	f200 2902 	addw	r9, r0, #514	; 0x202
 800fcca:	f10d 081f 	add.w	r8, sp, #31
 800fcce:	af05      	add	r7, sp, #20
 800fcd0:	f10d 061e 	add.w	r6, sp, #30
 800fcd4:	f44f 7500 	mov.w	r5, #512	; 0x200
 800fcd8:	e002      	b.n	800fce0 <recv_custom_msg+0x34>
 800fcda:	9b05      	ldr	r3, [sp, #20]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	dd0f      	ble.n	800fd00 <recv_custom_msg+0x54>
 800fce0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800fce4:	e9cd 5600 	strd	r5, r6, [sp]
 800fce8:	4623      	mov	r3, r4
 800fcea:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 800fcee:	4622      	mov	r2, r4
 800fcf0:	4648      	mov	r0, r9
 800fcf2:	f001 fa87 	bl	8011204 <uxr_read_framed_msg>
 800fcf6:	2800      	cmp	r0, #0
 800fcf8:	d0ef      	beq.n	800fcda <recv_custom_msg+0x2e>
 800fcfa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fcfe:	b1b3      	cbz	r3, 800fd2e <recv_custom_msg+0x82>
 800fd00:	4b0f      	ldr	r3, [pc, #60]	; (800fd40 <recv_custom_msg+0x94>)
 800fd02:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800fd06:	701a      	strb	r2, [r3, #0]
 800fd08:	2000      	movs	r0, #0
 800fd0a:	b009      	add	sp, #36	; 0x24
 800fd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd10:	f10d 021f 	add.w	r2, sp, #31
 800fd14:	9200      	str	r2, [sp, #0]
 800fd16:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 800fd1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fd1e:	4601      	mov	r1, r0
 800fd20:	47a8      	blx	r5
 800fd22:	2800      	cmp	r0, #0
 800fd24:	d0ec      	beq.n	800fd00 <recv_custom_msg+0x54>
 800fd26:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d1e8      	bne.n	800fd00 <recv_custom_msg+0x54>
 800fd2e:	f8cb 0000 	str.w	r0, [fp]
 800fd32:	2001      	movs	r0, #1
 800fd34:	f8ca 4000 	str.w	r4, [sl]
 800fd38:	b009      	add	sp, #36	; 0x24
 800fd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd3e:	bf00      	nop
 800fd40:	20010284 	.word	0x20010284

0800fd44 <send_custom_msg>:
 800fd44:	b570      	push	{r4, r5, r6, lr}
 800fd46:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 800fd4a:	b086      	sub	sp, #24
 800fd4c:	4616      	mov	r6, r2
 800fd4e:	b975      	cbnz	r5, 800fd6e <send_custom_msg+0x2a>
 800fd50:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 800fd54:	f10d 0317 	add.w	r3, sp, #23
 800fd58:	47a0      	blx	r4
 800fd5a:	b108      	cbz	r0, 800fd60 <send_custom_msg+0x1c>
 800fd5c:	42b0      	cmp	r0, r6
 800fd5e:	d015      	beq.n	800fd8c <send_custom_msg+0x48>
 800fd60:	4b0c      	ldr	r3, [pc, #48]	; (800fd94 <send_custom_msg+0x50>)
 800fd62:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800fd66:	701a      	strb	r2, [r3, #0]
 800fd68:	2000      	movs	r0, #0
 800fd6a:	b006      	add	sp, #24
 800fd6c:	bd70      	pop	{r4, r5, r6, pc}
 800fd6e:	460b      	mov	r3, r1
 800fd70:	2200      	movs	r2, #0
 800fd72:	f10d 0117 	add.w	r1, sp, #23
 800fd76:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800fd7a:	9600      	str	r6, [sp, #0]
 800fd7c:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 800fd80:	4602      	mov	r2, r0
 800fd82:	f200 2002 	addw	r0, r0, #514	; 0x202
 800fd86:	f001 f84f 	bl	8010e28 <uxr_write_framed_msg>
 800fd8a:	e7e6      	b.n	800fd5a <send_custom_msg+0x16>
 800fd8c:	2001      	movs	r0, #1
 800fd8e:	b006      	add	sp, #24
 800fd90:	bd70      	pop	{r4, r5, r6, pc}
 800fd92:	bf00      	nop
 800fd94:	20010284 	.word	0x20010284

0800fd98 <uxr_set_custom_transport_callbacks>:
 800fd98:	b430      	push	{r4, r5}
 800fd9a:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800fd9e:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 800fda2:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 800fda6:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 800fdaa:	bc30      	pop	{r4, r5}
 800fdac:	4770      	bx	lr
 800fdae:	bf00      	nop

0800fdb0 <uxr_init_custom_transport>:
 800fdb0:	b538      	push	{r3, r4, r5, lr}
 800fdb2:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 800fdb6:	b303      	cbz	r3, 800fdfa <uxr_init_custom_transport+0x4a>
 800fdb8:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800fdbc:	4604      	mov	r4, r0
 800fdbe:	b1e2      	cbz	r2, 800fdfa <uxr_init_custom_transport+0x4a>
 800fdc0:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800fdc4:	b1ca      	cbz	r2, 800fdfa <uxr_init_custom_transport+0x4a>
 800fdc6:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 800fdca:	b1b2      	cbz	r2, 800fdfa <uxr_init_custom_transport+0x4a>
 800fdcc:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 800fdd0:	4798      	blx	r3
 800fdd2:	4605      	mov	r5, r0
 800fdd4:	b188      	cbz	r0, 800fdfa <uxr_init_custom_transport+0x4a>
 800fdd6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800fdda:	b98b      	cbnz	r3, 800fe00 <uxr_init_custom_transport+0x50>
 800fddc:	480b      	ldr	r0, [pc, #44]	; (800fe0c <uxr_init_custom_transport+0x5c>)
 800fdde:	490c      	ldr	r1, [pc, #48]	; (800fe10 <uxr_init_custom_transport+0x60>)
 800fde0:	4a0c      	ldr	r2, [pc, #48]	; (800fe14 <uxr_init_custom_transport+0x64>)
 800fde2:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 800fde6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fdea:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 800fdee:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 800fdf2:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 800fdf6:	4628      	mov	r0, r5
 800fdf8:	bd38      	pop	{r3, r4, r5, pc}
 800fdfa:	2500      	movs	r5, #0
 800fdfc:	4628      	mov	r0, r5
 800fdfe:	bd38      	pop	{r3, r4, r5, pc}
 800fe00:	2100      	movs	r1, #0
 800fe02:	f204 2002 	addw	r0, r4, #514	; 0x202
 800fe06:	f001 f809 	bl	8010e1c <uxr_init_framing_io>
 800fe0a:	e7e7      	b.n	800fddc <uxr_init_custom_transport+0x2c>
 800fe0c:	0800fd45 	.word	0x0800fd45
 800fe10:	0800fcad 	.word	0x0800fcad
 800fe14:	0800fca1 	.word	0x0800fca1

0800fe18 <uxr_close_custom_transport>:
 800fe18:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800fe1c:	4718      	bx	r3
 800fe1e:	bf00      	nop

0800fe20 <uxr_object_id>:
 800fe20:	b082      	sub	sp, #8
 800fe22:	2300      	movs	r3, #0
 800fe24:	f88d 1006 	strb.w	r1, [sp, #6]
 800fe28:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fe2c:	f360 030f 	bfi	r3, r0, #0, #16
 800fe30:	f362 431f 	bfi	r3, r2, #16, #16
 800fe34:	4618      	mov	r0, r3
 800fe36:	b002      	add	sp, #8
 800fe38:	4770      	bx	lr
 800fe3a:	bf00      	nop

0800fe3c <uxr_object_id_from_raw>:
 800fe3c:	7843      	ldrb	r3, [r0, #1]
 800fe3e:	7801      	ldrb	r1, [r0, #0]
 800fe40:	b082      	sub	sp, #8
 800fe42:	f003 000f 	and.w	r0, r3, #15
 800fe46:	f88d 0006 	strb.w	r0, [sp, #6]
 800fe4a:	091b      	lsrs	r3, r3, #4
 800fe4c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800fe50:	2200      	movs	r2, #0
 800fe52:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800fe56:	f363 020f 	bfi	r2, r3, #0, #16
 800fe5a:	f361 421f 	bfi	r2, r1, #16, #16
 800fe5e:	4610      	mov	r0, r2
 800fe60:	b002      	add	sp, #8
 800fe62:	4770      	bx	lr

0800fe64 <uxr_object_id_to_raw>:
 800fe64:	4602      	mov	r2, r0
 800fe66:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800fe70:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800fe74:	700a      	strb	r2, [r1, #0]
 800fe76:	704b      	strb	r3, [r1, #1]
 800fe78:	b002      	add	sp, #8
 800fe7a:	4770      	bx	lr

0800fe7c <uxr_buffer_request_data>:
 800fe7c:	b530      	push	{r4, r5, lr}
 800fe7e:	b095      	sub	sp, #84	; 0x54
 800fe80:	4604      	mov	r4, r0
 800fe82:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800fe84:	9105      	str	r1, [sp, #20]
 800fe86:	2d00      	cmp	r5, #0
 800fe88:	bf14      	ite	ne
 800fe8a:	2101      	movne	r1, #1
 800fe8c:	2100      	moveq	r1, #0
 800fe8e:	9204      	str	r2, [sp, #16]
 800fe90:	f04f 0200 	mov.w	r2, #0
 800fe94:	9303      	str	r3, [sp, #12]
 800fe96:	f88d 301c 	strb.w	r3, [sp, #28]
 800fe9a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800fe9e:	f88d 201d 	strb.w	r2, [sp, #29]
 800fea2:	f88d 201e 	strb.w	r2, [sp, #30]
 800fea6:	d021      	beq.n	800feec <uxr_buffer_request_data+0x70>
 800fea8:	686a      	ldr	r2, [r5, #4]
 800feaa:	682b      	ldr	r3, [r5, #0]
 800feac:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 800feb0:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800feb4:	2210      	movs	r2, #16
 800feb6:	2000      	movs	r0, #0
 800feb8:	2108      	movs	r1, #8
 800feba:	e9cd 1000 	strd	r1, r0, [sp]
 800febe:	ab0c      	add	r3, sp, #48	; 0x30
 800fec0:	9905      	ldr	r1, [sp, #20]
 800fec2:	4620      	mov	r0, r4
 800fec4:	f000 fe44 	bl	8010b50 <uxr_prepare_stream_to_write_submessage>
 800fec8:	b918      	cbnz	r0, 800fed2 <uxr_buffer_request_data+0x56>
 800feca:	4604      	mov	r4, r0
 800fecc:	4620      	mov	r0, r4
 800fece:	b015      	add	sp, #84	; 0x54
 800fed0:	bd30      	pop	{r4, r5, pc}
 800fed2:	9904      	ldr	r1, [sp, #16]
 800fed4:	aa06      	add	r2, sp, #24
 800fed6:	4620      	mov	r0, r4
 800fed8:	f000 ff70 	bl	8010dbc <uxr_init_base_object_request>
 800fedc:	a906      	add	r1, sp, #24
 800fede:	4604      	mov	r4, r0
 800fee0:	a80c      	add	r0, sp, #48	; 0x30
 800fee2:	f002 fc09 	bl	80126f8 <uxr_serialize_READ_DATA_Payload>
 800fee6:	4620      	mov	r0, r4
 800fee8:	b015      	add	sp, #84	; 0x54
 800feea:	bd30      	pop	{r4, r5, pc}
 800feec:	2208      	movs	r2, #8
 800feee:	e7e2      	b.n	800feb6 <uxr_buffer_request_data+0x3a>

0800fef0 <read_submessage_format>:
 800fef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fef4:	b095      	sub	sp, #84	; 0x54
 800fef6:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 800fefa:	b113      	cbz	r3, 800ff02 <read_submessage_format+0x12>
 800fefc:	b015      	add	sp, #84	; 0x54
 800fefe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff02:	460c      	mov	r4, r1
 800ff04:	4616      	mov	r6, r2
 800ff06:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ff0a:	461d      	mov	r5, r3
 800ff0c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ff0e:	9304      	str	r3, [sp, #16]
 800ff10:	1a52      	subs	r2, r2, r1
 800ff12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ff14:	9305      	str	r3, [sp, #20]
 800ff16:	4607      	mov	r7, r0
 800ff18:	a80c      	add	r0, sp, #48	; 0x30
 800ff1a:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800ff1e:	f7fc fa63 	bl	800c3e8 <ucdr_init_buffer>
 800ff22:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ff26:	a80c      	add	r0, sp, #48	; 0x30
 800ff28:	f7fc fa34 	bl	800c394 <ucdr_set_on_full_buffer_callback>
 800ff2c:	69e3      	ldr	r3, [r4, #28]
 800ff2e:	b193      	cbz	r3, 800ff56 <read_submessage_format+0x66>
 800ff30:	f1b8 0f07 	cmp.w	r8, #7
 800ff34:	751d      	strb	r5, [r3, #20]
 800ff36:	d03e      	beq.n	800ffb6 <read_submessage_format+0xc6>
 800ff38:	f1b8 0f08 	cmp.w	r8, #8
 800ff3c:	d02c      	beq.n	800ff98 <read_submessage_format+0xa8>
 800ff3e:	f1b8 0f06 	cmp.w	r8, #6
 800ff42:	d011      	beq.n	800ff68 <read_submessage_format+0x78>
 800ff44:	2201      	movs	r2, #1
 800ff46:	751a      	strb	r2, [r3, #20]
 800ff48:	4631      	mov	r1, r6
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	f7fc faa0 	bl	800c490 <ucdr_advance_buffer>
 800ff50:	b015      	add	sp, #84	; 0x54
 800ff52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff56:	f1b8 0f07 	cmp.w	r8, #7
 800ff5a:	d02c      	beq.n	800ffb6 <read_submessage_format+0xc6>
 800ff5c:	f1b8 0f08 	cmp.w	r8, #8
 800ff60:	d01a      	beq.n	800ff98 <read_submessage_format+0xa8>
 800ff62:	f1b8 0f06 	cmp.w	r8, #6
 800ff66:	d1ef      	bne.n	800ff48 <read_submessage_format+0x58>
 800ff68:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 800ff6c:	b18d      	cbz	r5, 800ff92 <read_submessage_format+0xa2>
 800ff6e:	2306      	movs	r3, #6
 800ff70:	f88d 3016 	strb.w	r3, [sp, #22]
 800ff74:	aa0c      	add	r2, sp, #48	; 0x30
 800ff76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff7a:	9302      	str	r3, [sp, #8]
 800ff7c:	9200      	str	r2, [sp, #0]
 800ff7e:	9b04      	ldr	r3, [sp, #16]
 800ff80:	9905      	ldr	r1, [sp, #20]
 800ff82:	9601      	str	r6, [sp, #4]
 800ff84:	464a      	mov	r2, r9
 800ff86:	4638      	mov	r0, r7
 800ff88:	47a8      	blx	r5
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800ff90:	69e3      	ldr	r3, [r4, #28]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d1d6      	bne.n	800ff44 <read_submessage_format+0x54>
 800ff96:	e7d7      	b.n	800ff48 <read_submessage_format+0x58>
 800ff98:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ff9c:	2a00      	cmp	r2, #0
 800ff9e:	d0f8      	beq.n	800ff92 <read_submessage_format+0xa2>
 800ffa0:	a906      	add	r1, sp, #24
 800ffa2:	a80c      	add	r0, sp, #48	; 0x30
 800ffa4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ffa6:	f002 fc7b 	bl	80128a0 <uxr_deserialize_SampleIdentity>
 800ffaa:	2800      	cmp	r0, #0
 800ffac:	d13c      	bne.n	8010028 <read_submessage_format+0x138>
 800ffae:	69e3      	ldr	r3, [r4, #28]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d1c7      	bne.n	800ff44 <read_submessage_format+0x54>
 800ffb4:	e7c8      	b.n	800ff48 <read_submessage_format+0x58>
 800ffb6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ffba:	b132      	cbz	r2, 800ffca <read_submessage_format+0xda>
 800ffbc:	a906      	add	r1, sp, #24
 800ffbe:	a80c      	add	r0, sp, #48	; 0x30
 800ffc0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ffc2:	f002 fa4f 	bl	8012464 <uxr_deserialize_BaseObjectRequest>
 800ffc6:	b930      	cbnz	r0, 800ffd6 <read_submessage_format+0xe6>
 800ffc8:	69e3      	ldr	r3, [r4, #28]
 800ffca:	68a2      	ldr	r2, [r4, #8]
 800ffcc:	4432      	add	r2, r6
 800ffce:	60a2      	str	r2, [r4, #8]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d1b7      	bne.n	800ff44 <read_submessage_format+0x54>
 800ffd4:	e7b8      	b.n	800ff48 <read_submessage_format+0x58>
 800ffd6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800ffda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ffdc:	1a52      	subs	r2, r2, r1
 800ffde:	a80c      	add	r0, sp, #48	; 0x30
 800ffe0:	1aed      	subs	r5, r5, r3
 800ffe2:	f7fc fa01 	bl	800c3e8 <ucdr_init_buffer>
 800ffe6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ffea:	a80c      	add	r0, sp, #48	; 0x30
 800ffec:	f7fc f9d2 	bl	800c394 <ucdr_set_on_full_buffer_callback>
 800fff0:	4435      	add	r5, r6
 800fff2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800fff6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fffa:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800fffe:	9002      	str	r0, [sp, #8]
 8010000:	2207      	movs	r2, #7
 8010002:	f88d 2016 	strb.w	r2, [sp, #22]
 8010006:	b2ad      	uxth	r5, r5
 8010008:	aa0c      	add	r2, sp, #48	; 0x30
 801000a:	9200      	str	r2, [sp, #0]
 801000c:	9501      	str	r5, [sp, #4]
 801000e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010012:	b29b      	uxth	r3, r3
 8010014:	9905      	ldr	r1, [sp, #20]
 8010016:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 801001a:	464a      	mov	r2, r9
 801001c:	4638      	mov	r0, r7
 801001e:	47a8      	blx	r5
 8010020:	2301      	movs	r3, #1
 8010022:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8010026:	e7cf      	b.n	800ffc8 <read_submessage_format+0xd8>
 8010028:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801002c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801002e:	1a52      	subs	r2, r2, r1
 8010030:	a80c      	add	r0, sp, #48	; 0x30
 8010032:	1aed      	subs	r5, r5, r3
 8010034:	f7fc f9d8 	bl	800c3e8 <ucdr_init_buffer>
 8010038:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801003c:	a80c      	add	r0, sp, #48	; 0x30
 801003e:	f7fc f9a9 	bl	800c394 <ucdr_set_on_full_buffer_callback>
 8010042:	4435      	add	r5, r6
 8010044:	2308      	movs	r3, #8
 8010046:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 801004a:	f88d 3016 	strb.w	r3, [sp, #22]
 801004e:	b2ad      	uxth	r5, r5
 8010050:	ab0c      	add	r3, sp, #48	; 0x30
 8010052:	9300      	str	r3, [sp, #0]
 8010054:	9002      	str	r0, [sp, #8]
 8010056:	9501      	str	r5, [sp, #4]
 8010058:	ab06      	add	r3, sp, #24
 801005a:	9905      	ldr	r1, [sp, #20]
 801005c:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 8010060:	464a      	mov	r2, r9
 8010062:	4638      	mov	r0, r7
 8010064:	47a8      	blx	r5
 8010066:	2301      	movs	r3, #1
 8010068:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 801006c:	e79f      	b.n	800ffae <read_submessage_format+0xbe>
 801006e:	bf00      	nop

08010070 <on_get_fragmentation_info>:
 8010070:	b500      	push	{lr}
 8010072:	b08b      	sub	sp, #44	; 0x2c
 8010074:	4601      	mov	r1, r0
 8010076:	2204      	movs	r2, #4
 8010078:	a802      	add	r0, sp, #8
 801007a:	f7fc f9b5 	bl	800c3e8 <ucdr_init_buffer>
 801007e:	f10d 0305 	add.w	r3, sp, #5
 8010082:	a802      	add	r0, sp, #8
 8010084:	f10d 0206 	add.w	r2, sp, #6
 8010088:	a901      	add	r1, sp, #4
 801008a:	f001 fc9f 	bl	80119cc <uxr_read_submessage_header>
 801008e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010092:	2b0d      	cmp	r3, #13
 8010094:	d003      	beq.n	801009e <on_get_fragmentation_info+0x2e>
 8010096:	2000      	movs	r0, #0
 8010098:	b00b      	add	sp, #44	; 0x2c
 801009a:	f85d fb04 	ldr.w	pc, [sp], #4
 801009e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80100a2:	f013 0f02 	tst.w	r3, #2
 80100a6:	bf14      	ite	ne
 80100a8:	2002      	movne	r0, #2
 80100aa:	2001      	moveq	r0, #1
 80100ac:	b00b      	add	sp, #44	; 0x2c
 80100ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80100b2:	bf00      	nop

080100b4 <write_submessage_acknack.isra.0>:
 80100b4:	b570      	push	{r4, r5, r6, lr}
 80100b6:	b092      	sub	sp, #72	; 0x48
 80100b8:	4605      	mov	r5, r0
 80100ba:	460e      	mov	r6, r1
 80100bc:	4614      	mov	r4, r2
 80100be:	f000 fe75 	bl	8010dac <uxr_session_header_offset>
 80100c2:	a905      	add	r1, sp, #20
 80100c4:	9000      	str	r0, [sp, #0]
 80100c6:	2300      	movs	r3, #0
 80100c8:	a80a      	add	r0, sp, #40	; 0x28
 80100ca:	2211      	movs	r2, #17
 80100cc:	f7fc f97a 	bl	800c3c4 <ucdr_init_buffer_origin_offset>
 80100d0:	2218      	movs	r2, #24
 80100d2:	fb02 5404 	mla	r4, r2, r4, r5
 80100d6:	2300      	movs	r3, #0
 80100d8:	2205      	movs	r2, #5
 80100da:	3450      	adds	r4, #80	; 0x50
 80100dc:	a80a      	add	r0, sp, #40	; 0x28
 80100de:	210a      	movs	r1, #10
 80100e0:	f001 fc5a 	bl	8011998 <uxr_buffer_submessage_header>
 80100e4:	a903      	add	r1, sp, #12
 80100e6:	4620      	mov	r0, r4
 80100e8:	f006 f82a 	bl	8016140 <uxr_compute_acknack>
 80100ec:	a903      	add	r1, sp, #12
 80100ee:	ba43      	rev16	r3, r0
 80100f0:	a80a      	add	r0, sp, #40	; 0x28
 80100f2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80100f6:	f88d 6010 	strb.w	r6, [sp, #16]
 80100fa:	f002 fb21 	bl	8012740 <uxr_serialize_ACKNACK_Payload>
 80100fe:	2200      	movs	r2, #0
 8010100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010102:	4611      	mov	r1, r2
 8010104:	4628      	mov	r0, r5
 8010106:	f000 fdf9 	bl	8010cfc <uxr_stamp_session_header>
 801010a:	a80a      	add	r0, sp, #40	; 0x28
 801010c:	f7fc f99a 	bl	800c444 <ucdr_buffer_length>
 8010110:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8010112:	4602      	mov	r2, r0
 8010114:	a905      	add	r1, sp, #20
 8010116:	e9d3 0400 	ldrd	r0, r4, [r3]
 801011a:	47a0      	blx	r4
 801011c:	b012      	add	sp, #72	; 0x48
 801011e:	bd70      	pop	{r4, r5, r6, pc}

08010120 <read_submessage_list>:
 8010120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010124:	b098      	sub	sp, #96	; 0x60
 8010126:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 801040c <read_submessage_list+0x2ec>
 801012a:	920b      	str	r2, [sp, #44]	; 0x2c
 801012c:	4604      	mov	r4, r0
 801012e:	4688      	mov	r8, r1
 8010130:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 8010134:	aa0e      	add	r2, sp, #56	; 0x38
 8010136:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 801013a:	4640      	mov	r0, r8
 801013c:	f001 fc46 	bl	80119cc <uxr_read_submessage_header>
 8010140:	2800      	cmp	r0, #0
 8010142:	f000 8107 	beq.w	8010354 <read_submessage_list+0x234>
 8010146:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 801014a:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 801014e:	3b04      	subs	r3, #4
 8010150:	2b0b      	cmp	r3, #11
 8010152:	d8ed      	bhi.n	8010130 <read_submessage_list+0x10>
 8010154:	a101      	add	r1, pc, #4	; (adr r1, 801015c <read_submessage_list+0x3c>)
 8010156:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801015a:	bf00      	nop
 801015c:	08010345 	.word	0x08010345
 8010160:	08010339 	.word	0x08010339
 8010164:	08010131 	.word	0x08010131
 8010168:	08010131 	.word	0x08010131
 801016c:	08010131 	.word	0x08010131
 8010170:	0801029b 	.word	0x0801029b
 8010174:	0801022d 	.word	0x0801022d
 8010178:	080101eb 	.word	0x080101eb
 801017c:	08010131 	.word	0x08010131
 8010180:	08010131 	.word	0x08010131
 8010184:	08010131 	.word	0x08010131
 8010188:	0801018d 	.word	0x0801018d
 801018c:	a912      	add	r1, sp, #72	; 0x48
 801018e:	4640      	mov	r0, r8
 8010190:	f002 fb34 	bl	80127fc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010194:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8010198:	2d00      	cmp	r5, #0
 801019a:	f000 810a 	beq.w	80103b2 <read_submessage_list+0x292>
 801019e:	f001 fc5d 	bl	8011a5c <uxr_nanos>
 80101a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80101a4:	460b      	mov	r3, r1
 80101a6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80101a8:	2700      	movs	r7, #0
 80101aa:	fbc9 6701 	smlal	r6, r7, r9, r1
 80101ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80101b2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80101b4:	4602      	mov	r2, r0
 80101b6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80101b8:	460e      	mov	r6, r1
 80101ba:	2700      	movs	r7, #0
 80101bc:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80101c0:	9106      	str	r1, [sp, #24]
 80101c2:	fbc9 6700 	smlal	r6, r7, r9, r0
 80101c6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80101c8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80101cc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80101ce:	2700      	movs	r7, #0
 80101d0:	4608      	mov	r0, r1
 80101d2:	4639      	mov	r1, r7
 80101d4:	fbc9 0106 	smlal	r0, r1, r9, r6
 80101d8:	e9cd 0100 	strd	r0, r1, [sp]
 80101dc:	4620      	mov	r0, r4
 80101de:	47a8      	blx	r5
 80101e0:	f04f 0301 	mov.w	r3, #1
 80101e4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80101e8:	e7a2      	b.n	8010130 <read_submessage_list+0x10>
 80101ea:	a912      	add	r1, sp, #72	; 0x48
 80101ec:	4640      	mov	r0, r8
 80101ee:	f002 fae5 	bl	80127bc <uxr_deserialize_HEARTBEAT_Payload>
 80101f2:	2100      	movs	r1, #0
 80101f4:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80101f8:	f001 fabe 	bl	8011778 <uxr_stream_id_from_raw>
 80101fc:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010200:	4603      	mov	r3, r0
 8010202:	4629      	mov	r1, r5
 8010204:	f104 0008 	add.w	r0, r4, #8
 8010208:	9311      	str	r3, [sp, #68]	; 0x44
 801020a:	f001 fba3 	bl	8011954 <uxr_get_input_reliable_stream>
 801020e:	2800      	cmp	r0, #0
 8010210:	d08e      	beq.n	8010130 <read_submessage_list+0x10>
 8010212:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 8010216:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 801021a:	f005 ff85 	bl	8016128 <uxr_process_heartbeat>
 801021e:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8010222:	462a      	mov	r2, r5
 8010224:	4620      	mov	r0, r4
 8010226:	f7ff ff45 	bl	80100b4 <write_submessage_acknack.isra.0>
 801022a:	e781      	b.n	8010130 <read_submessage_list+0x10>
 801022c:	a912      	add	r1, sp, #72	; 0x48
 801022e:	4640      	mov	r0, r8
 8010230:	f002 fa9c 	bl	801276c <uxr_deserialize_ACKNACK_Payload>
 8010234:	2100      	movs	r1, #0
 8010236:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801023a:	f001 fa9d 	bl	8011778 <uxr_stream_id_from_raw>
 801023e:	4603      	mov	r3, r0
 8010240:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010244:	f104 0008 	add.w	r0, r4, #8
 8010248:	930f      	str	r3, [sp, #60]	; 0x3c
 801024a:	f001 fb6d 	bl	8011928 <uxr_get_output_reliable_stream>
 801024e:	4605      	mov	r5, r0
 8010250:	2800      	cmp	r0, #0
 8010252:	f43f af6d 	beq.w	8010130 <read_submessage_list+0x10>
 8010256:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 801025a:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 801025e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8010262:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010266:	b289      	uxth	r1, r1
 8010268:	f006 fa98 	bl	801679c <uxr_process_acknack>
 801026c:	4628      	mov	r0, r5
 801026e:	f006 fa5b 	bl	8016728 <uxr_begin_output_nack_buffer_it>
 8010272:	af10      	add	r7, sp, #64	; 0x40
 8010274:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8010278:	e005      	b.n	8010286 <read_submessage_list+0x166>
 801027a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801027c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801027e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010280:	e9d3 0600 	ldrd	r0, r6, [r3]
 8010284:	47b0      	blx	r6
 8010286:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 801028a:	aa11      	add	r2, sp, #68	; 0x44
 801028c:	4639      	mov	r1, r7
 801028e:	4628      	mov	r0, r5
 8010290:	f006 fa4c 	bl	801672c <uxr_next_reliable_nack_buffer_to_send>
 8010294:	2800      	cmp	r0, #0
 8010296:	d1f0      	bne.n	801027a <read_submessage_list+0x15a>
 8010298:	e74a      	b.n	8010130 <read_submessage_list+0x10>
 801029a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801029e:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 80102a2:	af10      	add	r7, sp, #64	; 0x40
 80102a4:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80102a8:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 80102ac:	4639      	mov	r1, r7
 80102ae:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80102b2:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 80102b6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80102ba:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 80102be:	4640      	mov	r0, r8
 80102c0:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 80102c4:	f002 f8ce 	bl	8012464 <uxr_deserialize_BaseObjectRequest>
 80102c8:	4638      	mov	r0, r7
 80102ca:	a911      	add	r1, sp, #68	; 0x44
 80102cc:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 80102d0:	f000 fd92 	bl	8010df8 <uxr_parse_base_object_request>
 80102d4:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 80102d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80102da:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 80102de:	9112      	str	r1, [sp, #72]	; 0x48
 80102e0:	3d04      	subs	r5, #4
 80102e2:	f006 060e 	and.w	r6, r6, #14
 80102e6:	b2ad      	uxth	r5, r5
 80102e8:	f1ba 0f00 	cmp.w	sl, #0
 80102ec:	d006      	beq.n	80102fc <read_submessage_list+0x1dc>
 80102ee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80102f2:	9300      	str	r3, [sp, #0]
 80102f4:	463a      	mov	r2, r7
 80102f6:	2300      	movs	r3, #0
 80102f8:	4620      	mov	r0, r4
 80102fa:	47d0      	blx	sl
 80102fc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80102fe:	b168      	cbz	r0, 801031c <read_submessage_list+0x1fc>
 8010300:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8010302:	2300      	movs	r3, #0
 8010304:	3902      	subs	r1, #2
 8010306:	e002      	b.n	801030e <read_submessage_list+0x1ee>
 8010308:	3301      	adds	r3, #1
 801030a:	4283      	cmp	r3, r0
 801030c:	d006      	beq.n	801031c <read_submessage_list+0x1fc>
 801030e:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8010312:	42ba      	cmp	r2, r7
 8010314:	d1f8      	bne.n	8010308 <read_submessage_list+0x1e8>
 8010316:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8010318:	2100      	movs	r1, #0
 801031a:	54d1      	strb	r1, [r2, r3]
 801031c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801031e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010320:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8010324:	9302      	str	r3, [sp, #8]
 8010326:	e9cd 1000 	strd	r1, r0, [sp]
 801032a:	4633      	mov	r3, r6
 801032c:	462a      	mov	r2, r5
 801032e:	4641      	mov	r1, r8
 8010330:	4620      	mov	r0, r4
 8010332:	f7ff fddd 	bl	800fef0 <read_submessage_format>
 8010336:	e6fb      	b.n	8010130 <read_submessage_list+0x10>
 8010338:	b97a      	cbnz	r2, 801035a <read_submessage_list+0x23a>
 801033a:	4641      	mov	r1, r8
 801033c:	4620      	mov	r0, r4
 801033e:	f000 fcab 	bl	8010c98 <uxr_read_delete_session_status>
 8010342:	e6f5      	b.n	8010130 <read_submessage_list+0x10>
 8010344:	2a00      	cmp	r2, #0
 8010346:	f47f aef3 	bne.w	8010130 <read_submessage_list+0x10>
 801034a:	4641      	mov	r1, r8
 801034c:	4620      	mov	r0, r4
 801034e:	f000 fc97 	bl	8010c80 <uxr_read_create_session_status>
 8010352:	e6ed      	b.n	8010130 <read_submessage_list+0x10>
 8010354:	b018      	add	sp, #96	; 0x60
 8010356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801035a:	a912      	add	r1, sp, #72	; 0x48
 801035c:	4640      	mov	r0, r8
 801035e:	f002 f9ad 	bl	80126bc <uxr_deserialize_STATUS_Payload>
 8010362:	a910      	add	r1, sp, #64	; 0x40
 8010364:	aa0f      	add	r2, sp, #60	; 0x3c
 8010366:	a812      	add	r0, sp, #72	; 0x48
 8010368:	f000 fd46 	bl	8010df8 <uxr_parse_base_object_request>
 801036c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8010370:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010372:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8010376:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801037a:	9111      	str	r1, [sp, #68]	; 0x44
 801037c:	b135      	cbz	r5, 801038c <read_submessage_list+0x26c>
 801037e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8010382:	9300      	str	r3, [sp, #0]
 8010384:	4632      	mov	r2, r6
 8010386:	463b      	mov	r3, r7
 8010388:	4620      	mov	r0, r4
 801038a:	47a8      	blx	r5
 801038c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801038e:	2b00      	cmp	r3, #0
 8010390:	f43f aece 	beq.w	8010130 <read_submessage_list+0x10>
 8010394:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8010396:	2100      	movs	r1, #0
 8010398:	3802      	subs	r0, #2
 801039a:	e003      	b.n	80103a4 <read_submessage_list+0x284>
 801039c:	3101      	adds	r1, #1
 801039e:	4299      	cmp	r1, r3
 80103a0:	f43f aec6 	beq.w	8010130 <read_submessage_list+0x10>
 80103a4:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 80103a8:	42b2      	cmp	r2, r6
 80103aa:	d1f7      	bne.n	801039c <read_submessage_list+0x27c>
 80103ac:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80103ae:	545f      	strb	r7, [r3, r1]
 80103b0:	e6be      	b.n	8010130 <read_submessage_list+0x10>
 80103b2:	f001 fb53 	bl	8011a5c <uxr_nanos>
 80103b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80103b8:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80103ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80103bc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80103be:	2700      	movs	r7, #0
 80103c0:	fbc9 6703 	smlal	r6, r7, r9, r3
 80103c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80103c6:	eb16 0c00 	adds.w	ip, r6, r0
 80103ca:	4618      	mov	r0, r3
 80103cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80103ce:	eb47 0e01 	adc.w	lr, r7, r1
 80103d2:	461e      	mov	r6, r3
 80103d4:	2100      	movs	r1, #0
 80103d6:	2700      	movs	r7, #0
 80103d8:	fbc9 0105 	smlal	r0, r1, r9, r5
 80103dc:	fbc9 6702 	smlal	r6, r7, r9, r2
 80103e0:	1983      	adds	r3, r0, r6
 80103e2:	eb41 0207 	adc.w	r2, r1, r7
 80103e6:	ebbc 0303 	subs.w	r3, ip, r3
 80103ea:	9308      	str	r3, [sp, #32]
 80103ec:	eb6e 0302 	sbc.w	r3, lr, r2
 80103f0:	9309      	str	r3, [sp, #36]	; 0x24
 80103f2:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80103f6:	0fd3      	lsrs	r3, r2, #31
 80103f8:	18c9      	adds	r1, r1, r3
 80103fa:	f142 0200 	adc.w	r2, r2, #0
 80103fe:	084b      	lsrs	r3, r1, #1
 8010400:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8010404:	1052      	asrs	r2, r2, #1
 8010406:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 801040a:	e6e9      	b.n	80101e0 <read_submessage_list+0xc0>
 801040c:	3b9aca00 	.word	0x3b9aca00

08010410 <listen_message>:
 8010410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010414:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8010416:	b09a      	sub	sp, #104	; 0x68
 8010418:	6894      	ldr	r4, [r2, #8]
 801041a:	460b      	mov	r3, r1
 801041c:	4605      	mov	r5, r0
 801041e:	a906      	add	r1, sp, #24
 8010420:	6810      	ldr	r0, [r2, #0]
 8010422:	aa07      	add	r2, sp, #28
 8010424:	47a0      	blx	r4
 8010426:	4604      	mov	r4, r0
 8010428:	b918      	cbnz	r0, 8010432 <listen_message+0x22>
 801042a:	4620      	mov	r0, r4
 801042c:	b01a      	add	sp, #104	; 0x68
 801042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010432:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8010436:	a80a      	add	r0, sp, #40	; 0x28
 8010438:	f7fb ffd6 	bl	800c3e8 <ucdr_init_buffer>
 801043c:	a90a      	add	r1, sp, #40	; 0x28
 801043e:	f10d 0316 	add.w	r3, sp, #22
 8010442:	aa05      	add	r2, sp, #20
 8010444:	4628      	mov	r0, r5
 8010446:	f000 fc6f 	bl	8010d28 <uxr_read_session_header>
 801044a:	2800      	cmp	r0, #0
 801044c:	d0ed      	beq.n	801042a <listen_message+0x1a>
 801044e:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8010452:	2100      	movs	r1, #0
 8010454:	f001 f990 	bl	8011778 <uxr_stream_id_from_raw>
 8010458:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801045c:	2f01      	cmp	r7, #1
 801045e:	f8bd a016 	ldrh.w	sl, [sp, #22]
 8010462:	9009      	str	r0, [sp, #36]	; 0x24
 8010464:	fa5f f880 	uxtb.w	r8, r0
 8010468:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801046c:	d041      	beq.n	80104f2 <listen_message+0xe2>
 801046e:	2f02      	cmp	r7, #2
 8010470:	d00b      	beq.n	801048a <listen_message+0x7a>
 8010472:	2f00      	cmp	r7, #0
 8010474:	d1d9      	bne.n	801042a <listen_message+0x1a>
 8010476:	4639      	mov	r1, r7
 8010478:	4638      	mov	r0, r7
 801047a:	f001 f97d 	bl	8011778 <uxr_stream_id_from_raw>
 801047e:	a90a      	add	r1, sp, #40	; 0x28
 8010480:	4602      	mov	r2, r0
 8010482:	4628      	mov	r0, r5
 8010484:	f7ff fe4c 	bl	8010120 <read_submessage_list>
 8010488:	e7cf      	b.n	801042a <listen_message+0x1a>
 801048a:	4631      	mov	r1, r6
 801048c:	f105 0008 	add.w	r0, r5, #8
 8010490:	f001 fa60 	bl	8011954 <uxr_get_input_reliable_stream>
 8010494:	4681      	mov	r9, r0
 8010496:	b330      	cbz	r0, 80104e6 <listen_message+0xd6>
 8010498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801049a:	9203      	str	r2, [sp, #12]
 801049c:	a80a      	add	r0, sp, #40	; 0x28
 801049e:	f7fb ffd5 	bl	800c44c <ucdr_buffer_remaining>
 80104a2:	4603      	mov	r3, r0
 80104a4:	f10d 0015 	add.w	r0, sp, #21
 80104a8:	9000      	str	r0, [sp, #0]
 80104aa:	9a03      	ldr	r2, [sp, #12]
 80104ac:	4651      	mov	r1, sl
 80104ae:	4648      	mov	r0, r9
 80104b0:	f005 fd3c 	bl	8015f2c <uxr_receive_reliable_message>
 80104b4:	b1b8      	cbz	r0, 80104e6 <listen_message+0xd6>
 80104b6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80104ba:	b393      	cbz	r3, 8010522 <listen_message+0x112>
 80104bc:	2702      	movs	r7, #2
 80104be:	e008      	b.n	80104d2 <listen_message+0xc2>
 80104c0:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
 80104c4:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80104c8:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 80104cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104ce:	f7ff fe27 	bl	8010120 <read_submessage_list>
 80104d2:	a912      	add	r1, sp, #72	; 0x48
 80104d4:	2204      	movs	r2, #4
 80104d6:	4648      	mov	r0, r9
 80104d8:	f005 fda8 	bl	801602c <uxr_next_input_reliable_buffer_available>
 80104dc:	4603      	mov	r3, r0
 80104de:	a912      	add	r1, sp, #72	; 0x48
 80104e0:	4628      	mov	r0, r5
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d1ec      	bne.n	80104c0 <listen_message+0xb0>
 80104e6:	4632      	mov	r2, r6
 80104e8:	4641      	mov	r1, r8
 80104ea:	4628      	mov	r0, r5
 80104ec:	f7ff fde2 	bl	80100b4 <write_submessage_acknack.isra.0>
 80104f0:	e79b      	b.n	801042a <listen_message+0x1a>
 80104f2:	4631      	mov	r1, r6
 80104f4:	f105 0008 	add.w	r0, r5, #8
 80104f8:	f001 fa22 	bl	8011940 <uxr_get_input_best_effort_stream>
 80104fc:	2800      	cmp	r0, #0
 80104fe:	d094      	beq.n	801042a <listen_message+0x1a>
 8010500:	4651      	mov	r1, sl
 8010502:	f005 fc8f 	bl	8015e24 <uxr_receive_best_effort_message>
 8010506:	2800      	cmp	r0, #0
 8010508:	d08f      	beq.n	801042a <listen_message+0x1a>
 801050a:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
 801050e:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8010512:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8010516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010518:	a90a      	add	r1, sp, #40	; 0x28
 801051a:	4628      	mov	r0, r5
 801051c:	f7ff fe00 	bl	8010120 <read_submessage_list>
 8010520:	e783      	b.n	801042a <listen_message+0x1a>
 8010522:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
 8010526:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 801052a:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 801052e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010530:	a90a      	add	r1, sp, #40	; 0x28
 8010532:	4628      	mov	r0, r5
 8010534:	f7ff fdf4 	bl	8010120 <read_submessage_list>
 8010538:	e7c0      	b.n	80104bc <listen_message+0xac>
 801053a:	bf00      	nop

0801053c <listen_message_reliably>:
 801053c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010540:	1e0b      	subs	r3, r1, #0
 8010542:	b095      	sub	sp, #84	; 0x54
 8010544:	bfb8      	it	lt
 8010546:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 801054a:	4683      	mov	fp, r0
 801054c:	9303      	str	r3, [sp, #12]
 801054e:	f001 fa69 	bl	8011a24 <uxr_millis>
 8010552:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8010556:	4688      	mov	r8, r1
 8010558:	4607      	mov	r7, r0
 801055a:	2b00      	cmp	r3, #0
 801055c:	f000 8093 	beq.w	8010686 <listen_message_reliably+0x14a>
 8010560:	2600      	movs	r6, #0
 8010562:	4630      	mov	r0, r6
 8010564:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8010568:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801056c:	e00f      	b.n	801058e <listen_message_reliably+0x52>
 801056e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010572:	454a      	cmp	r2, r9
 8010574:	eb73 010a 	sbcs.w	r1, r3, sl
 8010578:	bfb8      	it	lt
 801057a:	469a      	movlt	sl, r3
 801057c:	f106 0601 	add.w	r6, r6, #1
 8010580:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8010584:	b2f0      	uxtb	r0, r6
 8010586:	bfb8      	it	lt
 8010588:	4691      	movlt	r9, r2
 801058a:	4283      	cmp	r3, r0
 801058c:	d953      	bls.n	8010636 <listen_message_reliably+0xfa>
 801058e:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8010592:	2201      	movs	r2, #1
 8010594:	2102      	movs	r1, #2
 8010596:	f001 f8c5 	bl	8011724 <uxr_stream_id>
 801059a:	00e4      	lsls	r4, r4, #3
 801059c:	f104 0520 	add.w	r5, r4, #32
 80105a0:	445d      	add	r5, fp
 80105a2:	4601      	mov	r1, r0
 80105a4:	4643      	mov	r3, r8
 80105a6:	463a      	mov	r2, r7
 80105a8:	4628      	mov	r0, r5
 80105aa:	9104      	str	r1, [sp, #16]
 80105ac:	f006 f890 	bl	80166d0 <uxr_update_output_stream_heartbeat_timestamp>
 80105b0:	eb0b 0304 	add.w	r3, fp, r4
 80105b4:	2800      	cmp	r0, #0
 80105b6:	d0da      	beq.n	801056e <listen_message_reliably+0x32>
 80105b8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80105bc:	f89d 5011 	ldrb.w	r5, [sp, #17]
 80105c0:	9302      	str	r3, [sp, #8]
 80105c2:	4658      	mov	r0, fp
 80105c4:	f000 fbf2 	bl	8010dac <uxr_session_header_offset>
 80105c8:	3501      	adds	r5, #1
 80105ca:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80105ce:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 80105d2:	9000      	str	r0, [sp, #0]
 80105d4:	2300      	movs	r3, #0
 80105d6:	a80c      	add	r0, sp, #48	; 0x30
 80105d8:	2211      	movs	r2, #17
 80105da:	a907      	add	r1, sp, #28
 80105dc:	f7fb fef2 	bl	800c3c4 <ucdr_init_buffer_origin_offset>
 80105e0:	2300      	movs	r3, #0
 80105e2:	2205      	movs	r2, #5
 80105e4:	210b      	movs	r1, #11
 80105e6:	a80c      	add	r0, sp, #48	; 0x30
 80105e8:	f001 f9d6 	bl	8011998 <uxr_buffer_submessage_header>
 80105ec:	8968      	ldrh	r0, [r5, #10]
 80105ee:	2101      	movs	r1, #1
 80105f0:	f006 f92c 	bl	801684c <uxr_seq_num_add>
 80105f4:	9902      	ldr	r1, [sp, #8]
 80105f6:	892a      	ldrh	r2, [r5, #8]
 80105f8:	f88d 1018 	strb.w	r1, [sp, #24]
 80105fc:	4603      	mov	r3, r0
 80105fe:	a905      	add	r1, sp, #20
 8010600:	a80c      	add	r0, sp, #48	; 0x30
 8010602:	f8ad 2016 	strh.w	r2, [sp, #22]
 8010606:	f8ad 3014 	strh.w	r3, [sp, #20]
 801060a:	f002 f8c3 	bl	8012794 <uxr_serialize_HEARTBEAT_Payload>
 801060e:	2200      	movs	r2, #0
 8010610:	4611      	mov	r1, r2
 8010612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010614:	4658      	mov	r0, fp
 8010616:	f000 fb71 	bl	8010cfc <uxr_stamp_session_header>
 801061a:	a80c      	add	r0, sp, #48	; 0x30
 801061c:	f7fb ff12 	bl	800c444 <ucdr_buffer_length>
 8010620:	f8db 3070 	ldr.w	r3, [fp, #112]	; 0x70
 8010624:	4602      	mov	r2, r0
 8010626:	a907      	add	r1, sp, #28
 8010628:	e9d3 0500 	ldrd	r0, r5, [r3]
 801062c:	445c      	add	r4, fp
 801062e:	47a8      	blx	r5
 8010630:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8010634:	e79d      	b.n	8010572 <listen_message_reliably+0x36>
 8010636:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 801063a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801063e:	45a2      	cmp	sl, r4
 8010640:	bf08      	it	eq
 8010642:	4599      	cmpeq	r9, r3
 8010644:	d01f      	beq.n	8010686 <listen_message_reliably+0x14a>
 8010646:	eba9 0107 	sub.w	r1, r9, r7
 801064a:	2900      	cmp	r1, #0
 801064c:	9c03      	ldr	r4, [sp, #12]
 801064e:	bf08      	it	eq
 8010650:	2101      	moveq	r1, #1
 8010652:	428c      	cmp	r4, r1
 8010654:	4623      	mov	r3, r4
 8010656:	bfa8      	it	ge
 8010658:	460b      	movge	r3, r1
 801065a:	4619      	mov	r1, r3
 801065c:	4658      	mov	r0, fp
 801065e:	461f      	mov	r7, r3
 8010660:	f7ff fed6 	bl	8010410 <listen_message>
 8010664:	b110      	cbz	r0, 801066c <listen_message_reliably+0x130>
 8010666:	b015      	add	sp, #84	; 0x54
 8010668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801066c:	1be3      	subs	r3, r4, r7
 801066e:	2b00      	cmp	r3, #0
 8010670:	9303      	str	r3, [sp, #12]
 8010672:	ddf8      	ble.n	8010666 <listen_message_reliably+0x12a>
 8010674:	f001 f9d6 	bl	8011a24 <uxr_millis>
 8010678:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 801067c:	4688      	mov	r8, r1
 801067e:	4607      	mov	r7, r0
 8010680:	2b00      	cmp	r3, #0
 8010682:	f47f af6d 	bne.w	8010560 <listen_message_reliably+0x24>
 8010686:	9903      	ldr	r1, [sp, #12]
 8010688:	e7df      	b.n	801064a <listen_message_reliably+0x10e>
 801068a:	bf00      	nop

0801068c <uxr_init_session>:
 801068c:	b5d0      	push	{r4, r6, r7, lr}
 801068e:	2300      	movs	r3, #0
 8010690:	2600      	movs	r6, #0
 8010692:	2700      	movs	r7, #0
 8010694:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 8010698:	4604      	mov	r4, r0
 801069a:	6701      	str	r1, [r0, #112]	; 0x70
 801069c:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 80106a0:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 80106a4:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 80106a8:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 80106ac:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 80106b0:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 80106b4:	2181      	movs	r1, #129	; 0x81
 80106b6:	f000 fa8f 	bl	8010bd8 <uxr_init_session_info>
 80106ba:	f104 0008 	add.w	r0, r4, #8
 80106be:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 80106c2:	f001 b885 	b.w	80117d0 <uxr_init_stream_storage>
 80106c6:	bf00      	nop

080106c8 <uxr_set_status_callback>:
 80106c8:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 80106cc:	4770      	bx	lr
 80106ce:	bf00      	nop

080106d0 <uxr_set_topic_callback>:
 80106d0:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 80106d4:	4770      	bx	lr
 80106d6:	bf00      	nop

080106d8 <uxr_set_request_callback>:
 80106d8:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 80106dc:	4770      	bx	lr
 80106de:	bf00      	nop

080106e0 <uxr_set_reply_callback>:
 80106e0:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 80106e4:	4770      	bx	lr
 80106e6:	bf00      	nop

080106e8 <uxr_create_session>:
 80106e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106ea:	4604      	mov	r4, r0
 80106ec:	b093      	sub	sp, #76	; 0x4c
 80106ee:	3008      	adds	r0, #8
 80106f0:	f001 f878 	bl	80117e4 <uxr_reset_stream_storage>
 80106f4:	4620      	mov	r0, r4
 80106f6:	f000 fb59 	bl	8010dac <uxr_session_header_offset>
 80106fa:	a903      	add	r1, sp, #12
 80106fc:	9000      	str	r0, [sp, #0]
 80106fe:	2300      	movs	r3, #0
 8010700:	a80a      	add	r0, sp, #40	; 0x28
 8010702:	221c      	movs	r2, #28
 8010704:	f7fb fe5e 	bl	800c3c4 <ucdr_init_buffer_origin_offset>
 8010708:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801070a:	8a1a      	ldrh	r2, [r3, #16]
 801070c:	3a04      	subs	r2, #4
 801070e:	b292      	uxth	r2, r2
 8010710:	4620      	mov	r0, r4
 8010712:	a90a      	add	r1, sp, #40	; 0x28
 8010714:	f000 fa72 	bl	8010bfc <uxr_buffer_create_session>
 8010718:	990a      	ldr	r1, [sp, #40]	; 0x28
 801071a:	4620      	mov	r0, r4
 801071c:	f000 fada 	bl	8010cd4 <uxr_stamp_create_session_header>
 8010720:	a80a      	add	r0, sp, #40	; 0x28
 8010722:	f7fb fe8f 	bl	800c444 <ucdr_buffer_length>
 8010726:	23ff      	movs	r3, #255	; 0xff
 8010728:	4606      	mov	r6, r0
 801072a:	7163      	strb	r3, [r4, #5]
 801072c:	250a      	movs	r5, #10
 801072e:	e001      	b.n	8010734 <uxr_create_session+0x4c>
 8010730:	28ff      	cmp	r0, #255	; 0xff
 8010732:	d10d      	bne.n	8010750 <uxr_create_session+0x68>
 8010734:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010736:	4632      	mov	r2, r6
 8010738:	e9d3 0700 	ldrd	r0, r7, [r3]
 801073c:	a903      	add	r1, sp, #12
 801073e:	47b8      	blx	r7
 8010740:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010744:	4620      	mov	r0, r4
 8010746:	f7ff fe63 	bl	8010410 <listen_message>
 801074a:	3d01      	subs	r5, #1
 801074c:	7960      	ldrb	r0, [r4, #5]
 801074e:	d1ef      	bne.n	8010730 <uxr_create_session+0x48>
 8010750:	fab0 f080 	clz	r0, r0
 8010754:	0940      	lsrs	r0, r0, #5
 8010756:	b013      	add	sp, #76	; 0x4c
 8010758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801075a:	bf00      	nop

0801075c <uxr_delete_session_retries>:
 801075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801075e:	b091      	sub	sp, #68	; 0x44
 8010760:	4604      	mov	r4, r0
 8010762:	460d      	mov	r5, r1
 8010764:	f000 fb22 	bl	8010dac <uxr_session_header_offset>
 8010768:	2300      	movs	r3, #0
 801076a:	2210      	movs	r2, #16
 801076c:	9000      	str	r0, [sp, #0]
 801076e:	a904      	add	r1, sp, #16
 8010770:	a808      	add	r0, sp, #32
 8010772:	f7fb fe27 	bl	800c3c4 <ucdr_init_buffer_origin_offset>
 8010776:	a908      	add	r1, sp, #32
 8010778:	4620      	mov	r0, r4
 801077a:	f000 fa65 	bl	8010c48 <uxr_buffer_delete_session>
 801077e:	2200      	movs	r2, #0
 8010780:	9b08      	ldr	r3, [sp, #32]
 8010782:	4611      	mov	r1, r2
 8010784:	4620      	mov	r0, r4
 8010786:	f000 fab9 	bl	8010cfc <uxr_stamp_session_header>
 801078a:	a808      	add	r0, sp, #32
 801078c:	f7fb fe5a 	bl	800c444 <ucdr_buffer_length>
 8010790:	23ff      	movs	r3, #255	; 0xff
 8010792:	4602      	mov	r2, r0
 8010794:	7163      	strb	r3, [r4, #5]
 8010796:	b1ed      	cbz	r5, 80107d4 <uxr_delete_session_retries+0x78>
 8010798:	2600      	movs	r6, #0
 801079a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801079c:	9203      	str	r2, [sp, #12]
 801079e:	e9d3 0700 	ldrd	r0, r7, [r3]
 80107a2:	a904      	add	r1, sp, #16
 80107a4:	47b8      	blx	r7
 80107a6:	3601      	adds	r6, #1
 80107a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80107ac:	4620      	mov	r0, r4
 80107ae:	f7ff fe2f 	bl	8010410 <listen_message>
 80107b2:	42b5      	cmp	r5, r6
 80107b4:	7963      	ldrb	r3, [r4, #5]
 80107b6:	d007      	beq.n	80107c8 <uxr_delete_session_retries+0x6c>
 80107b8:	2bff      	cmp	r3, #255	; 0xff
 80107ba:	9a03      	ldr	r2, [sp, #12]
 80107bc:	d0ed      	beq.n	801079a <uxr_delete_session_retries+0x3e>
 80107be:	fab3 f083 	clz	r0, r3
 80107c2:	0940      	lsrs	r0, r0, #5
 80107c4:	b011      	add	sp, #68	; 0x44
 80107c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107c8:	2bff      	cmp	r3, #255	; 0xff
 80107ca:	bf08      	it	eq
 80107cc:	2000      	moveq	r0, #0
 80107ce:	d1f6      	bne.n	80107be <uxr_delete_session_retries+0x62>
 80107d0:	b011      	add	sp, #68	; 0x44
 80107d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80107d6:	a904      	add	r1, sp, #16
 80107d8:	e9d3 0500 	ldrd	r0, r5, [r3]
 80107dc:	47a8      	blx	r5
 80107de:	7963      	ldrb	r3, [r4, #5]
 80107e0:	fab3 f083 	clz	r0, r3
 80107e4:	0940      	lsrs	r0, r0, #5
 80107e6:	e7ed      	b.n	80107c4 <uxr_delete_session_retries+0x68>

080107e8 <uxr_create_output_best_effort_stream>:
 80107e8:	b510      	push	{r4, lr}
 80107ea:	b084      	sub	sp, #16
 80107ec:	e9cd 2100 	strd	r2, r1, [sp]
 80107f0:	4604      	mov	r4, r0
 80107f2:	f000 fadb 	bl	8010dac <uxr_session_header_offset>
 80107f6:	e9dd 2100 	ldrd	r2, r1, [sp]
 80107fa:	4603      	mov	r3, r0
 80107fc:	f104 0008 	add.w	r0, r4, #8
 8010800:	b004      	add	sp, #16
 8010802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010806:	f001 b82d 	b.w	8011864 <uxr_add_output_best_effort_buffer>
 801080a:	bf00      	nop

0801080c <uxr_create_output_reliable_stream>:
 801080c:	b530      	push	{r4, r5, lr}
 801080e:	b089      	sub	sp, #36	; 0x24
 8010810:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010814:	9303      	str	r3, [sp, #12]
 8010816:	4604      	mov	r4, r0
 8010818:	f000 fac8 	bl	8010dac <uxr_session_header_offset>
 801081c:	4605      	mov	r5, r0
 801081e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010822:	9905      	ldr	r1, [sp, #20]
 8010824:	9500      	str	r5, [sp, #0]
 8010826:	f104 0008 	add.w	r0, r4, #8
 801082a:	f001 f82d 	bl	8011888 <uxr_add_output_reliable_buffer>
 801082e:	2200      	movs	r2, #0
 8010830:	b2c3      	uxtb	r3, r0
 8010832:	f363 0207 	bfi	r2, r3, #0, #8
 8010836:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801083a:	f363 220f 	bfi	r2, r3, #8, #8
 801083e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010842:	f363 4217 	bfi	r2, r3, #16, #8
 8010846:	0e03      	lsrs	r3, r0, #24
 8010848:	f363 621f 	bfi	r2, r3, #24, #8
 801084c:	4610      	mov	r0, r2
 801084e:	b009      	add	sp, #36	; 0x24
 8010850:	bd30      	pop	{r4, r5, pc}
 8010852:	bf00      	nop

08010854 <uxr_create_input_best_effort_stream>:
 8010854:	b082      	sub	sp, #8
 8010856:	3008      	adds	r0, #8
 8010858:	b002      	add	sp, #8
 801085a:	f001 b82f 	b.w	80118bc <uxr_add_input_best_effort_buffer>
 801085e:	bf00      	nop

08010860 <uxr_create_input_reliable_stream>:
 8010860:	b510      	push	{r4, lr}
 8010862:	b084      	sub	sp, #16
 8010864:	4c0b      	ldr	r4, [pc, #44]	; (8010894 <uxr_create_input_reliable_stream+0x34>)
 8010866:	9400      	str	r4, [sp, #0]
 8010868:	3008      	adds	r0, #8
 801086a:	f001 f83d 	bl	80118e8 <uxr_add_input_reliable_buffer>
 801086e:	2200      	movs	r2, #0
 8010870:	b2c3      	uxtb	r3, r0
 8010872:	f363 0207 	bfi	r2, r3, #0, #8
 8010876:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801087a:	f363 220f 	bfi	r2, r3, #8, #8
 801087e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010882:	f363 4217 	bfi	r2, r3, #16, #8
 8010886:	0e03      	lsrs	r3, r0, #24
 8010888:	f363 621f 	bfi	r2, r3, #24, #8
 801088c:	4610      	mov	r0, r2
 801088e:	b004      	add	sp, #16
 8010890:	bd10      	pop	{r4, pc}
 8010892:	bf00      	nop
 8010894:	08010071 	.word	0x08010071

08010898 <uxr_sync_session>:
 8010898:	b5f0      	push	{r4, r5, r6, r7, lr}
 801089a:	b093      	sub	sp, #76	; 0x4c
 801089c:	4604      	mov	r4, r0
 801089e:	460d      	mov	r5, r1
 80108a0:	f000 fa84 	bl	8010dac <uxr_session_header_offset>
 80108a4:	a905      	add	r1, sp, #20
 80108a6:	9000      	str	r0, [sp, #0]
 80108a8:	2300      	movs	r3, #0
 80108aa:	a80a      	add	r0, sp, #40	; 0x28
 80108ac:	2214      	movs	r2, #20
 80108ae:	f7fb fd89 	bl	800c3c4 <ucdr_init_buffer_origin_offset>
 80108b2:	2300      	movs	r3, #0
 80108b4:	2208      	movs	r2, #8
 80108b6:	210e      	movs	r1, #14
 80108b8:	a80a      	add	r0, sp, #40	; 0x28
 80108ba:	f001 f86d 	bl	8011998 <uxr_buffer_submessage_header>
 80108be:	f001 f8cd 	bl	8011a5c <uxr_nanos>
 80108c2:	a31b      	add	r3, pc, #108	; (adr r3, 8010930 <uxr_sync_session+0x98>)
 80108c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c8:	4606      	mov	r6, r0
 80108ca:	460f      	mov	r7, r1
 80108cc:	f7ef fce8 	bl	80002a0 <__aeabi_ldivmod>
 80108d0:	a317      	add	r3, pc, #92	; (adr r3, 8010930 <uxr_sync_session+0x98>)
 80108d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d6:	4684      	mov	ip, r0
 80108d8:	4639      	mov	r1, r7
 80108da:	4630      	mov	r0, r6
 80108dc:	f8cd c00c 	str.w	ip, [sp, #12]
 80108e0:	f7ef fcde 	bl	80002a0 <__aeabi_ldivmod>
 80108e4:	a903      	add	r1, sp, #12
 80108e6:	a80a      	add	r0, sp, #40	; 0x28
 80108e8:	9204      	str	r2, [sp, #16]
 80108ea:	f001 ff79 	bl	80127e0 <uxr_serialize_TIMESTAMP_Payload>
 80108ee:	2200      	movs	r2, #0
 80108f0:	4611      	mov	r1, r2
 80108f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108f4:	4620      	mov	r0, r4
 80108f6:	f000 fa01 	bl	8010cfc <uxr_stamp_session_header>
 80108fa:	a80a      	add	r0, sp, #40	; 0x28
 80108fc:	f7fb fda2 	bl	800c444 <ucdr_buffer_length>
 8010900:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010902:	4602      	mov	r2, r0
 8010904:	a905      	add	r1, sp, #20
 8010906:	e9d3 0600 	ldrd	r0, r6, [r3]
 801090a:	47b0      	blx	r6
 801090c:	2300      	movs	r3, #0
 801090e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8010912:	e002      	b.n	801091a <uxr_sync_session+0x82>
 8010914:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
 8010918:	b938      	cbnz	r0, 801092a <uxr_sync_session+0x92>
 801091a:	4629      	mov	r1, r5
 801091c:	4620      	mov	r0, r4
 801091e:	f7ff fe0d 	bl	801053c <listen_message_reliably>
 8010922:	2800      	cmp	r0, #0
 8010924:	d1f6      	bne.n	8010914 <uxr_sync_session+0x7c>
 8010926:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
 801092a:	b013      	add	sp, #76	; 0x4c
 801092c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801092e:	bf00      	nop
 8010930:	3b9aca00 	.word	0x3b9aca00
 8010934:	00000000 	.word	0x00000000

08010938 <uxr_epoch_nanos>:
 8010938:	b510      	push	{r4, lr}
 801093a:	4604      	mov	r4, r0
 801093c:	f001 f88e 	bl	8011a5c <uxr_nanos>
 8010940:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8010944:	1ac0      	subs	r0, r0, r3
 8010946:	eb61 0102 	sbc.w	r1, r1, r2
 801094a:	bd10      	pop	{r4, pc}

0801094c <uxr_flash_output_streams>:
 801094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010950:	7e03      	ldrb	r3, [r0, #24]
 8010952:	b084      	sub	sp, #16
 8010954:	4604      	mov	r4, r0
 8010956:	b1fb      	cbz	r3, 8010998 <uxr_flash_output_streams+0x4c>
 8010958:	f04f 0900 	mov.w	r9, #0
 801095c:	4648      	mov	r0, r9
 801095e:	f10d 0802 	add.w	r8, sp, #2
 8010962:	af03      	add	r7, sp, #12
 8010964:	ae02      	add	r6, sp, #8
 8010966:	2201      	movs	r2, #1
 8010968:	4611      	mov	r1, r2
 801096a:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801096e:	f000 fed9 	bl	8011724 <uxr_stream_id>
 8010972:	3508      	adds	r5, #8
 8010974:	4684      	mov	ip, r0
 8010976:	4643      	mov	r3, r8
 8010978:	4628      	mov	r0, r5
 801097a:	463a      	mov	r2, r7
 801097c:	4631      	mov	r1, r6
 801097e:	f8cd c004 	str.w	ip, [sp, #4]
 8010982:	f005 fc65 	bl	8016250 <uxr_prepare_best_effort_buffer_to_send>
 8010986:	2800      	cmp	r0, #0
 8010988:	d13d      	bne.n	8010a06 <uxr_flash_output_streams+0xba>
 801098a:	7e23      	ldrb	r3, [r4, #24]
 801098c:	f109 0901 	add.w	r9, r9, #1
 8010990:	fa5f f089 	uxtb.w	r0, r9
 8010994:	4283      	cmp	r3, r0
 8010996:	d8e6      	bhi.n	8010966 <uxr_flash_output_streams+0x1a>
 8010998:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801099c:	b383      	cbz	r3, 8010a00 <uxr_flash_output_streams+0xb4>
 801099e:	f04f 0900 	mov.w	r9, #0
 80109a2:	4648      	mov	r0, r9
 80109a4:	f10d 0802 	add.w	r8, sp, #2
 80109a8:	af03      	add	r7, sp, #12
 80109aa:	ae02      	add	r6, sp, #8
 80109ac:	2201      	movs	r2, #1
 80109ae:	2102      	movs	r1, #2
 80109b0:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80109b4:	f000 feb6 	bl	8011724 <uxr_stream_id>
 80109b8:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80109bc:	3520      	adds	r5, #32
 80109be:	9001      	str	r0, [sp, #4]
 80109c0:	e00c      	b.n	80109dc <uxr_flash_output_streams+0x90>
 80109c2:	9b02      	ldr	r3, [sp, #8]
 80109c4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80109c8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80109cc:	f000 f996 	bl	8010cfc <uxr_stamp_session_header>
 80109d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80109d2:	9a03      	ldr	r2, [sp, #12]
 80109d4:	9902      	ldr	r1, [sp, #8]
 80109d6:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80109da:	47d0      	blx	sl
 80109dc:	4643      	mov	r3, r8
 80109de:	463a      	mov	r2, r7
 80109e0:	4631      	mov	r1, r6
 80109e2:	4628      	mov	r0, r5
 80109e4:	f005 fe32 	bl	801664c <uxr_prepare_next_reliable_buffer_to_send>
 80109e8:	4603      	mov	r3, r0
 80109ea:	4620      	mov	r0, r4
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d1e8      	bne.n	80109c2 <uxr_flash_output_streams+0x76>
 80109f0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80109f4:	f109 0901 	add.w	r9, r9, #1
 80109f8:	fa5f f089 	uxtb.w	r0, r9
 80109fc:	4283      	cmp	r3, r0
 80109fe:	d8d5      	bhi.n	80109ac <uxr_flash_output_streams+0x60>
 8010a00:	b004      	add	sp, #16
 8010a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a06:	9b02      	ldr	r3, [sp, #8]
 8010a08:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010a0c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010a10:	4620      	mov	r0, r4
 8010a12:	f000 f973 	bl	8010cfc <uxr_stamp_session_header>
 8010a16:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010a18:	9a03      	ldr	r2, [sp, #12]
 8010a1a:	9902      	ldr	r1, [sp, #8]
 8010a1c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010a20:	47a8      	blx	r5
 8010a22:	f109 0901 	add.w	r9, r9, #1
 8010a26:	7e23      	ldrb	r3, [r4, #24]
 8010a28:	fa5f f089 	uxtb.w	r0, r9
 8010a2c:	4283      	cmp	r3, r0
 8010a2e:	d89a      	bhi.n	8010966 <uxr_flash_output_streams+0x1a>
 8010a30:	e7b2      	b.n	8010998 <uxr_flash_output_streams+0x4c>
 8010a32:	bf00      	nop

08010a34 <uxr_run_session_until_data>:
 8010a34:	b570      	push	{r4, r5, r6, lr}
 8010a36:	4604      	mov	r4, r0
 8010a38:	460d      	mov	r5, r1
 8010a3a:	f000 fff3 	bl	8011a24 <uxr_millis>
 8010a3e:	4606      	mov	r6, r0
 8010a40:	4620      	mov	r0, r4
 8010a42:	f7ff ff83 	bl	801094c <uxr_flash_output_streams>
 8010a46:	2300      	movs	r3, #0
 8010a48:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8010a4c:	4629      	mov	r1, r5
 8010a4e:	e005      	b.n	8010a5c <uxr_run_session_until_data+0x28>
 8010a50:	f000 ffe8 	bl	8011a24 <uxr_millis>
 8010a54:	1b83      	subs	r3, r0, r6
 8010a56:	1ae9      	subs	r1, r5, r3
 8010a58:	2900      	cmp	r1, #0
 8010a5a:	dd07      	ble.n	8010a6c <uxr_run_session_until_data+0x38>
 8010a5c:	4620      	mov	r0, r4
 8010a5e:	f7ff fd6d 	bl	801053c <listen_message_reliably>
 8010a62:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8010a66:	2800      	cmp	r0, #0
 8010a68:	d0f2      	beq.n	8010a50 <uxr_run_session_until_data+0x1c>
 8010a6a:	bd70      	pop	{r4, r5, r6, pc}
 8010a6c:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8010a70:	bd70      	pop	{r4, r5, r6, pc}
 8010a72:	bf00      	nop

08010a74 <uxr_run_session_until_confirm_delivery>:
 8010a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a76:	4605      	mov	r5, r0
 8010a78:	460e      	mov	r6, r1
 8010a7a:	f100 0708 	add.w	r7, r0, #8
 8010a7e:	2400      	movs	r4, #0
 8010a80:	f7ff ff64 	bl	801094c <uxr_flash_output_streams>
 8010a84:	e005      	b.n	8010a92 <uxr_run_session_until_confirm_delivery+0x1e>
 8010a86:	b964      	cbnz	r4, 8010aa2 <uxr_run_session_until_confirm_delivery+0x2e>
 8010a88:	f7ff fd58 	bl	801053c <listen_message_reliably>
 8010a8c:	f080 0001 	eor.w	r0, r0, #1
 8010a90:	b2c4      	uxtb	r4, r0
 8010a92:	4638      	mov	r0, r7
 8010a94:	f000 ff6a 	bl	801196c <uxr_output_streams_confirmed>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	4631      	mov	r1, r6
 8010a9c:	4628      	mov	r0, r5
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d0f1      	beq.n	8010a86 <uxr_run_session_until_confirm_delivery+0x12>
 8010aa2:	4638      	mov	r0, r7
 8010aa4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010aa8:	f000 bf60 	b.w	801196c <uxr_output_streams_confirmed>

08010aac <uxr_run_session_until_all_status>:
 8010aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ab0:	9d08      	ldr	r5, [sp, #32]
 8010ab2:	460f      	mov	r7, r1
 8010ab4:	4692      	mov	sl, r2
 8010ab6:	461c      	mov	r4, r3
 8010ab8:	4606      	mov	r6, r0
 8010aba:	f7ff ff47 	bl	801094c <uxr_flash_output_streams>
 8010abe:	b125      	cbz	r5, 8010aca <uxr_run_session_until_all_status+0x1e>
 8010ac0:	462a      	mov	r2, r5
 8010ac2:	21ff      	movs	r1, #255	; 0xff
 8010ac4:	4620      	mov	r0, r4
 8010ac6:	f006 f981 	bl	8016dcc <memset>
 8010aca:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 8010ace:	67f5      	str	r5, [r6, #124]	; 0x7c
 8010ad0:	f000 ffa8 	bl	8011a24 <uxr_millis>
 8010ad4:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8010ad8:	f1aa 0a02 	sub.w	sl, sl, #2
 8010adc:	4680      	mov	r8, r0
 8010ade:	4639      	mov	r1, r7
 8010ae0:	4630      	mov	r0, r6
 8010ae2:	f7ff fd2b 	bl	801053c <listen_message_reliably>
 8010ae6:	f000 ff9d 	bl	8011a24 <uxr_millis>
 8010aea:	eba0 0008 	sub.w	r0, r0, r8
 8010aee:	1a39      	subs	r1, r7, r0
 8010af0:	b33d      	cbz	r5, 8010b42 <uxr_run_session_until_all_status+0x96>
 8010af2:	46cc      	mov	ip, r9
 8010af4:	464a      	mov	r2, r9
 8010af6:	2301      	movs	r3, #1
 8010af8:	e002      	b.n	8010b00 <uxr_run_session_until_all_status+0x54>
 8010afa:	42ab      	cmp	r3, r5
 8010afc:	d20c      	bcs.n	8010b18 <uxr_run_session_until_all_status+0x6c>
 8010afe:	3301      	adds	r3, #1
 8010b00:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8010b04:	2cff      	cmp	r4, #255	; 0xff
 8010b06:	d1f8      	bne.n	8010afa <uxr_run_session_until_all_status+0x4e>
 8010b08:	42ab      	cmp	r3, r5
 8010b0a:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 8010b0e:	d213      	bcs.n	8010b38 <uxr_run_session_until_all_status+0x8c>
 8010b10:	2800      	cmp	r0, #0
 8010b12:	d0f4      	beq.n	8010afe <uxr_run_session_until_all_status+0x52>
 8010b14:	2900      	cmp	r1, #0
 8010b16:	dce3      	bgt.n	8010ae0 <uxr_run_session_until_all_status+0x34>
 8010b18:	2300      	movs	r3, #0
 8010b1a:	444d      	add	r5, r9
 8010b1c:	67f3      	str	r3, [r6, #124]	; 0x7c
 8010b1e:	e001      	b.n	8010b24 <uxr_run_session_until_all_status+0x78>
 8010b20:	2b01      	cmp	r3, #1
 8010b22:	d812      	bhi.n	8010b4a <uxr_run_session_until_all_status+0x9e>
 8010b24:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8010b28:	4565      	cmp	r5, ip
 8010b2a:	d1f9      	bne.n	8010b20 <uxr_run_session_until_all_status+0x74>
 8010b2c:	2b01      	cmp	r3, #1
 8010b2e:	bf8c      	ite	hi
 8010b30:	2000      	movhi	r0, #0
 8010b32:	2001      	movls	r0, #1
 8010b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b38:	2900      	cmp	r1, #0
 8010b3a:	dded      	ble.n	8010b18 <uxr_run_session_until_all_status+0x6c>
 8010b3c:	2800      	cmp	r0, #0
 8010b3e:	d1cf      	bne.n	8010ae0 <uxr_run_session_until_all_status+0x34>
 8010b40:	e7ea      	b.n	8010b18 <uxr_run_session_until_all_status+0x6c>
 8010b42:	67f5      	str	r5, [r6, #124]	; 0x7c
 8010b44:	2001      	movs	r0, #1
 8010b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b4a:	2000      	movs	r0, #0
 8010b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010b50 <uxr_prepare_stream_to_write_submessage>:
 8010b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b54:	b082      	sub	sp, #8
 8010b56:	4682      	mov	sl, r0
 8010b58:	4610      	mov	r0, r2
 8010b5a:	4615      	mov	r5, r2
 8010b5c:	461e      	mov	r6, r3
 8010b5e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8010b62:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8010b66:	9101      	str	r1, [sp, #4]
 8010b68:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8010b6c:	f000 ff54 	bl	8011a18 <uxr_submessage_padding>
 8010b70:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010b74:	f105 0904 	add.w	r9, r5, #4
 8010b78:	2b01      	cmp	r3, #1
 8010b7a:	4481      	add	r9, r0
 8010b7c:	d01d      	beq.n	8010bba <uxr_prepare_stream_to_write_submessage+0x6a>
 8010b7e:	2b02      	cmp	r3, #2
 8010b80:	d116      	bne.n	8010bb0 <uxr_prepare_stream_to_write_submessage+0x60>
 8010b82:	4621      	mov	r1, r4
 8010b84:	f10a 0008 	add.w	r0, sl, #8
 8010b88:	f000 fece 	bl	8011928 <uxr_get_output_reliable_stream>
 8010b8c:	4604      	mov	r4, r0
 8010b8e:	b158      	cbz	r0, 8010ba8 <uxr_prepare_stream_to_write_submessage+0x58>
 8010b90:	4649      	mov	r1, r9
 8010b92:	4632      	mov	r2, r6
 8010b94:	f005 fc00 	bl	8016398 <uxr_prepare_reliable_buffer_to_write>
 8010b98:	4604      	mov	r4, r0
 8010b9a:	b12c      	cbz	r4, 8010ba8 <uxr_prepare_stream_to_write_submessage+0x58>
 8010b9c:	4643      	mov	r3, r8
 8010b9e:	b2aa      	uxth	r2, r5
 8010ba0:	4639      	mov	r1, r7
 8010ba2:	4630      	mov	r0, r6
 8010ba4:	f000 fef8 	bl	8011998 <uxr_buffer_submessage_header>
 8010ba8:	4620      	mov	r0, r4
 8010baa:	b002      	add	sp, #8
 8010bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bb0:	2400      	movs	r4, #0
 8010bb2:	4620      	mov	r0, r4
 8010bb4:	b002      	add	sp, #8
 8010bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bba:	4621      	mov	r1, r4
 8010bbc:	f10a 0008 	add.w	r0, sl, #8
 8010bc0:	f000 feaa 	bl	8011918 <uxr_get_output_best_effort_stream>
 8010bc4:	4604      	mov	r4, r0
 8010bc6:	2800      	cmp	r0, #0
 8010bc8:	d0ee      	beq.n	8010ba8 <uxr_prepare_stream_to_write_submessage+0x58>
 8010bca:	4649      	mov	r1, r9
 8010bcc:	4632      	mov	r2, r6
 8010bce:	f005 fb1f 	bl	8016210 <uxr_prepare_best_effort_buffer_to_write>
 8010bd2:	4604      	mov	r4, r0
 8010bd4:	e7e1      	b.n	8010b9a <uxr_prepare_stream_to_write_submessage+0x4a>
 8010bd6:	bf00      	nop

08010bd8 <uxr_init_session_info>:
 8010bd8:	b470      	push	{r4, r5, r6}
 8010bda:	7102      	strb	r2, [r0, #4]
 8010bdc:	0e16      	lsrs	r6, r2, #24
 8010bde:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8010be2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8010be6:	23ff      	movs	r3, #255	; 0xff
 8010be8:	2209      	movs	r2, #9
 8010bea:	7046      	strb	r6, [r0, #1]
 8010bec:	7085      	strb	r5, [r0, #2]
 8010bee:	70c4      	strb	r4, [r0, #3]
 8010bf0:	7001      	strb	r1, [r0, #0]
 8010bf2:	bc70      	pop	{r4, r5, r6}
 8010bf4:	80c2      	strh	r2, [r0, #6]
 8010bf6:	7143      	strb	r3, [r0, #5]
 8010bf8:	4770      	bx	lr
 8010bfa:	bf00      	nop

08010bfc <uxr_buffer_create_session>:
 8010bfc:	b570      	push	{r4, r5, r6, lr}
 8010bfe:	4d11      	ldr	r5, [pc, #68]	; (8010c44 <uxr_buffer_create_session+0x48>)
 8010c00:	f8d0 3001 	ldr.w	r3, [r0, #1]
 8010c04:	7806      	ldrb	r6, [r0, #0]
 8010c06:	b088      	sub	sp, #32
 8010c08:	460c      	mov	r4, r1
 8010c0a:	9302      	str	r3, [sp, #8]
 8010c0c:	2101      	movs	r1, #1
 8010c0e:	2300      	movs	r3, #0
 8010c10:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010c14:	88aa      	ldrh	r2, [r5, #4]
 8010c16:	80c1      	strh	r1, [r0, #6]
 8010c18:	f88d 600c 	strb.w	r6, [sp, #12]
 8010c1c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8010c20:	682e      	ldr	r6, [r5, #0]
 8010c22:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010c26:	4619      	mov	r1, r3
 8010c28:	2210      	movs	r2, #16
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	f88d 300d 	strb.w	r3, [sp, #13]
 8010c30:	9600      	str	r6, [sp, #0]
 8010c32:	f000 feb1 	bl	8011998 <uxr_buffer_submessage_header>
 8010c36:	4620      	mov	r0, r4
 8010c38:	4669      	mov	r1, sp
 8010c3a:	f001 fc65 	bl	8012508 <uxr_serialize_CREATE_CLIENT_Payload>
 8010c3e:	b008      	add	sp, #32
 8010c40:	bd70      	pop	{r4, r5, r6, pc}
 8010c42:	bf00      	nop
 8010c44:	080191e0 	.word	0x080191e0

08010c48 <uxr_buffer_delete_session>:
 8010c48:	b530      	push	{r4, r5, lr}
 8010c4a:	4b0c      	ldr	r3, [pc, #48]	; (8010c7c <uxr_buffer_delete_session+0x34>)
 8010c4c:	b083      	sub	sp, #12
 8010c4e:	891b      	ldrh	r3, [r3, #8]
 8010c50:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010c54:	2202      	movs	r2, #2
 8010c56:	460c      	mov	r4, r1
 8010c58:	80c2      	strh	r2, [r0, #6]
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	2204      	movs	r2, #4
 8010c5e:	4608      	mov	r0, r1
 8010c60:	f44f 7500 	mov.w	r5, #512	; 0x200
 8010c64:	2103      	movs	r1, #3
 8010c66:	f8ad 5004 	strh.w	r5, [sp, #4]
 8010c6a:	f000 fe95 	bl	8011998 <uxr_buffer_submessage_header>
 8010c6e:	4620      	mov	r0, r4
 8010c70:	a901      	add	r1, sp, #4
 8010c72:	f001 fce3 	bl	801263c <uxr_serialize_DELETE_Payload>
 8010c76:	b003      	add	sp, #12
 8010c78:	bd30      	pop	{r4, r5, pc}
 8010c7a:	bf00      	nop
 8010c7c:	080191e0 	.word	0x080191e0

08010c80 <uxr_read_create_session_status>:
 8010c80:	b510      	push	{r4, lr}
 8010c82:	b088      	sub	sp, #32
 8010c84:	4604      	mov	r4, r0
 8010c86:	4608      	mov	r0, r1
 8010c88:	a901      	add	r1, sp, #4
 8010c8a:	f001 fce7 	bl	801265c <uxr_deserialize_STATUS_AGENT_Payload>
 8010c8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010c92:	7163      	strb	r3, [r4, #5]
 8010c94:	b008      	add	sp, #32
 8010c96:	bd10      	pop	{r4, pc}

08010c98 <uxr_read_delete_session_status>:
 8010c98:	b510      	push	{r4, lr}
 8010c9a:	4604      	mov	r4, r0
 8010c9c:	b084      	sub	sp, #16
 8010c9e:	4608      	mov	r0, r1
 8010ca0:	a902      	add	r1, sp, #8
 8010ca2:	f001 fd0b 	bl	80126bc <uxr_deserialize_STATUS_Payload>
 8010ca6:	88e3      	ldrh	r3, [r4, #6]
 8010ca8:	2b02      	cmp	r3, #2
 8010caa:	d001      	beq.n	8010cb0 <uxr_read_delete_session_status+0x18>
 8010cac:	b004      	add	sp, #16
 8010cae:	bd10      	pop	{r4, pc}
 8010cb0:	f10d 000a 	add.w	r0, sp, #10
 8010cb4:	f7ff f8c2 	bl	800fe3c <uxr_object_id_from_raw>
 8010cb8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8010cbc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8010cc0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	2b02      	cmp	r3, #2
 8010cc8:	bf04      	itt	eq
 8010cca:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8010cce:	7163      	strbeq	r3, [r4, #5]
 8010cd0:	b004      	add	sp, #16
 8010cd2:	bd10      	pop	{r4, pc}

08010cd4 <uxr_stamp_create_session_header>:
 8010cd4:	b510      	push	{r4, lr}
 8010cd6:	4604      	mov	r4, r0
 8010cd8:	b08a      	sub	sp, #40	; 0x28
 8010cda:	a802      	add	r0, sp, #8
 8010cdc:	2208      	movs	r2, #8
 8010cde:	f7fb fb83 	bl	800c3e8 <ucdr_init_buffer>
 8010ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ce6:	9400      	str	r4, [sp, #0]
 8010ce8:	2300      	movs	r3, #0
 8010cea:	a802      	add	r0, sp, #8
 8010cec:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8010cf0:	461a      	mov	r2, r3
 8010cf2:	f001 f845 	bl	8011d80 <uxr_serialize_message_header>
 8010cf6:	b00a      	add	sp, #40	; 0x28
 8010cf8:	bd10      	pop	{r4, pc}
 8010cfa:	bf00      	nop

08010cfc <uxr_stamp_session_header>:
 8010cfc:	b570      	push	{r4, r5, r6, lr}
 8010cfe:	4604      	mov	r4, r0
 8010d00:	b08c      	sub	sp, #48	; 0x30
 8010d02:	460d      	mov	r5, r1
 8010d04:	4616      	mov	r6, r2
 8010d06:	4619      	mov	r1, r3
 8010d08:	a804      	add	r0, sp, #16
 8010d0a:	2208      	movs	r2, #8
 8010d0c:	9603      	str	r6, [sp, #12]
 8010d0e:	f7fb fb6b 	bl	800c3e8 <ucdr_init_buffer>
 8010d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d16:	9b03      	ldr	r3, [sp, #12]
 8010d18:	9400      	str	r4, [sp, #0]
 8010d1a:	462a      	mov	r2, r5
 8010d1c:	a804      	add	r0, sp, #16
 8010d1e:	f001 f82f 	bl	8011d80 <uxr_serialize_message_header>
 8010d22:	b00c      	add	sp, #48	; 0x30
 8010d24:	bd70      	pop	{r4, r5, r6, pc}
 8010d26:	bf00      	nop

08010d28 <uxr_read_session_header>:
 8010d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d2c:	4607      	mov	r7, r0
 8010d2e:	b084      	sub	sp, #16
 8010d30:	4608      	mov	r0, r1
 8010d32:	460c      	mov	r4, r1
 8010d34:	4615      	mov	r5, r2
 8010d36:	461e      	mov	r6, r3
 8010d38:	f7fb fb88 	bl	800c44c <ucdr_buffer_remaining>
 8010d3c:	2808      	cmp	r0, #8
 8010d3e:	d803      	bhi.n	8010d48 <uxr_read_session_header+0x20>
 8010d40:	2000      	movs	r0, #0
 8010d42:	b004      	add	sp, #16
 8010d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d48:	f10d 080c 	add.w	r8, sp, #12
 8010d4c:	4633      	mov	r3, r6
 8010d4e:	462a      	mov	r2, r5
 8010d50:	4620      	mov	r0, r4
 8010d52:	f8cd 8000 	str.w	r8, [sp]
 8010d56:	f10d 010b 	add.w	r1, sp, #11
 8010d5a:	f001 f82f 	bl	8011dbc <uxr_deserialize_message_header>
 8010d5e:	783a      	ldrb	r2, [r7, #0]
 8010d60:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010d64:	4293      	cmp	r3, r2
 8010d66:	d1eb      	bne.n	8010d40 <uxr_read_session_header+0x18>
 8010d68:	061b      	lsls	r3, r3, #24
 8010d6a:	d41c      	bmi.n	8010da6 <uxr_read_session_header+0x7e>
 8010d6c:	f898 2000 	ldrb.w	r2, [r8]
 8010d70:	787b      	ldrb	r3, [r7, #1]
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d003      	beq.n	8010d7e <uxr_read_session_header+0x56>
 8010d76:	2001      	movs	r0, #1
 8010d78:	f080 0001 	eor.w	r0, r0, #1
 8010d7c:	e7e1      	b.n	8010d42 <uxr_read_session_header+0x1a>
 8010d7e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8010d82:	78bb      	ldrb	r3, [r7, #2]
 8010d84:	429a      	cmp	r2, r3
 8010d86:	f107 0102 	add.w	r1, r7, #2
 8010d8a:	d1f4      	bne.n	8010d76 <uxr_read_session_header+0x4e>
 8010d8c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8010d90:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010d94:	429a      	cmp	r2, r3
 8010d96:	d1ee      	bne.n	8010d76 <uxr_read_session_header+0x4e>
 8010d98:	784b      	ldrb	r3, [r1, #1]
 8010d9a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d1e9      	bne.n	8010d76 <uxr_read_session_header+0x4e>
 8010da2:	2000      	movs	r0, #0
 8010da4:	e7e8      	b.n	8010d78 <uxr_read_session_header+0x50>
 8010da6:	2001      	movs	r0, #1
 8010da8:	e7cb      	b.n	8010d42 <uxr_read_session_header+0x1a>
 8010daa:	bf00      	nop

08010dac <uxr_session_header_offset>:
 8010dac:	f990 3000 	ldrsb.w	r3, [r0]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	bfac      	ite	ge
 8010db4:	2008      	movge	r0, #8
 8010db6:	2004      	movlt	r0, #4
 8010db8:	4770      	bx	lr
 8010dba:	bf00      	nop

08010dbc <uxr_init_base_object_request>:
 8010dbc:	b530      	push	{r4, r5, lr}
 8010dbe:	88c3      	ldrh	r3, [r0, #6]
 8010dc0:	b083      	sub	sp, #12
 8010dc2:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8010dc6:	9101      	str	r1, [sp, #4]
 8010dc8:	f1a3 010a 	sub.w	r1, r3, #10
 8010dcc:	b289      	uxth	r1, r1
 8010dce:	42a1      	cmp	r1, r4
 8010dd0:	d80e      	bhi.n	8010df0 <uxr_init_base_object_request+0x34>
 8010dd2:	3301      	adds	r3, #1
 8010dd4:	b29c      	uxth	r4, r3
 8010dd6:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8010dda:	b2db      	uxtb	r3, r3
 8010ddc:	80c4      	strh	r4, [r0, #6]
 8010dde:	1c91      	adds	r1, r2, #2
 8010de0:	9801      	ldr	r0, [sp, #4]
 8010de2:	7015      	strb	r5, [r2, #0]
 8010de4:	7053      	strb	r3, [r2, #1]
 8010de6:	f7ff f83d 	bl	800fe64 <uxr_object_id_to_raw>
 8010dea:	4620      	mov	r0, r4
 8010dec:	b003      	add	sp, #12
 8010dee:	bd30      	pop	{r4, r5, pc}
 8010df0:	230a      	movs	r3, #10
 8010df2:	461c      	mov	r4, r3
 8010df4:	2500      	movs	r5, #0
 8010df6:	e7f1      	b.n	8010ddc <uxr_init_base_object_request+0x20>

08010df8 <uxr_parse_base_object_request>:
 8010df8:	b570      	push	{r4, r5, r6, lr}
 8010dfa:	4604      	mov	r4, r0
 8010dfc:	3002      	adds	r0, #2
 8010dfe:	460d      	mov	r5, r1
 8010e00:	4616      	mov	r6, r2
 8010e02:	f7ff f81b 	bl	800fe3c <uxr_object_id_from_raw>
 8010e06:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8010e0a:	8028      	strh	r0, [r5, #0]
 8010e0c:	806b      	strh	r3, [r5, #2]
 8010e0e:	7822      	ldrb	r2, [r4, #0]
 8010e10:	7863      	ldrb	r3, [r4, #1]
 8010e12:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010e16:	8033      	strh	r3, [r6, #0]
 8010e18:	bd70      	pop	{r4, r5, r6, pc}
 8010e1a:	bf00      	nop

08010e1c <uxr_init_framing_io>:
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	7041      	strb	r1, [r0, #1]
 8010e20:	7003      	strb	r3, [r0, #0]
 8010e22:	8583      	strh	r3, [r0, #44]	; 0x2c
 8010e24:	4770      	bx	lr
 8010e26:	bf00      	nop

08010e28 <uxr_write_framed_msg>:
 8010e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e2c:	7845      	ldrb	r5, [r0, #1]
 8010e2e:	b085      	sub	sp, #20
 8010e30:	4604      	mov	r4, r0
 8010e32:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 8010e36:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8010e3a:	f1bc 0f01 	cmp.w	ip, #1
 8010e3e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8010e42:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8010e46:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 8010e4a:	460e      	mov	r6, r1
 8010e4c:	4617      	mov	r7, r2
 8010e4e:	469b      	mov	fp, r3
 8010e50:	f240 811c 	bls.w	801108c <uxr_write_framed_msg+0x264>
 8010e54:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8010e58:	2302      	movs	r3, #2
 8010e5a:	2a01      	cmp	r2, #1
 8010e5c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8010e60:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8010e64:	f240 8096 	bls.w	8010f94 <uxr_write_framed_msg+0x16c>
 8010e68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e6a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8010e6e:	b2d9      	uxtb	r1, r3
 8010e70:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8010e74:	2203      	movs	r2, #3
 8010e76:	2b01      	cmp	r3, #1
 8010e78:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010e7c:	f240 809f 	bls.w	8010fbe <uxr_write_framed_msg+0x196>
 8010e80:	18a3      	adds	r3, r4, r2
 8010e82:	3201      	adds	r2, #1
 8010e84:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8010e88:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010e8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e8e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8010e92:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8010e96:	2901      	cmp	r1, #1
 8010e98:	eb04 0102 	add.w	r1, r4, r2
 8010e9c:	f240 8107 	bls.w	80110ae <uxr_write_framed_msg+0x286>
 8010ea0:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8010ea4:	3201      	adds	r2, #1
 8010ea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ea8:	b2d2      	uxtb	r2, r2
 8010eaa:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	f000 810c 	beq.w	80110cc <uxr_write_framed_msg+0x2a4>
 8010eb4:	f04f 0a00 	mov.w	sl, #0
 8010eb8:	46d1      	mov	r9, sl
 8010eba:	4653      	mov	r3, sl
 8010ebc:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8010ec0:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8010ec4:	2901      	cmp	r1, #1
 8010ec6:	f240 80a8 	bls.w	801101a <uxr_write_framed_msg+0x1f2>
 8010eca:	2a29      	cmp	r2, #41	; 0x29
 8010ecc:	f200 8083 	bhi.w	8010fd6 <uxr_write_framed_msg+0x1ae>
 8010ed0:	18a1      	adds	r1, r4, r2
 8010ed2:	3201      	adds	r2, #1
 8010ed4:	b2d2      	uxtb	r2, r2
 8010ed6:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8010eda:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010ede:	ea8a 0303 	eor.w	r3, sl, r3
 8010ee2:	4986      	ldr	r1, [pc, #536]	; (80110fc <uxr_write_framed_msg+0x2d4>)
 8010ee4:	b2db      	uxtb	r3, r3
 8010ee6:	f109 0901 	add.w	r9, r9, #1
 8010eea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010eee:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010ef0:	fa1f f989 	uxth.w	r9, r9
 8010ef4:	4549      	cmp	r1, r9
 8010ef6:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8010efa:	464b      	mov	r3, r9
 8010efc:	d8de      	bhi.n	8010ebc <uxr_write_framed_msg+0x94>
 8010efe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8010f02:	fa5f f98a 	uxtb.w	r9, sl
 8010f06:	9301      	str	r3, [sp, #4]
 8010f08:	f04f 0b00 	mov.w	fp, #0
 8010f0c:	f88d 900c 	strb.w	r9, [sp, #12]
 8010f10:	f88d 300d 	strb.w	r3, [sp, #13]
 8010f14:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 8010f18:	fa5f f18a 	uxtb.w	r1, sl
 8010f1c:	2901      	cmp	r1, #1
 8010f1e:	d920      	bls.n	8010f62 <uxr_write_framed_msg+0x13a>
 8010f20:	2a29      	cmp	r2, #41	; 0x29
 8010f22:	f240 808c 	bls.w	801103e <uxr_write_framed_msg+0x216>
 8010f26:	2500      	movs	r5, #0
 8010f28:	e000      	b.n	8010f2c <uxr_write_framed_msg+0x104>
 8010f2a:	b160      	cbz	r0, 8010f46 <uxr_write_framed_msg+0x11e>
 8010f2c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8010f30:	1b52      	subs	r2, r2, r5
 8010f32:	4421      	add	r1, r4
 8010f34:	4643      	mov	r3, r8
 8010f36:	4638      	mov	r0, r7
 8010f38:	47b0      	blx	r6
 8010f3a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8010f3e:	4405      	add	r5, r0
 8010f40:	4295      	cmp	r5, r2
 8010f42:	d3f2      	bcc.n	8010f2a <uxr_write_framed_msg+0x102>
 8010f44:	d003      	beq.n	8010f4e <uxr_write_framed_msg+0x126>
 8010f46:	2000      	movs	r0, #0
 8010f48:	b005      	add	sp, #20
 8010f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f4e:	fa5f f18a 	uxtb.w	r1, sl
 8010f52:	f04f 0300 	mov.w	r3, #0
 8010f56:	2901      	cmp	r1, #1
 8010f58:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8010f5c:	f04f 0200 	mov.w	r2, #0
 8010f60:	d86d      	bhi.n	801103e <uxr_write_framed_msg+0x216>
 8010f62:	1c51      	adds	r1, r2, #1
 8010f64:	b2c9      	uxtb	r1, r1
 8010f66:	2929      	cmp	r1, #41	; 0x29
 8010f68:	d8dd      	bhi.n	8010f26 <uxr_write_framed_msg+0xfe>
 8010f6a:	18a0      	adds	r0, r4, r2
 8010f6c:	3202      	adds	r2, #2
 8010f6e:	f089 0920 	eor.w	r9, r9, #32
 8010f72:	b2d2      	uxtb	r2, r2
 8010f74:	4659      	mov	r1, fp
 8010f76:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8010f7a:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8010f7e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8010f82:	f04f 0b01 	mov.w	fp, #1
 8010f86:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010f8a:	2900      	cmp	r1, #0
 8010f8c:	d163      	bne.n	8011056 <uxr_write_framed_msg+0x22e>
 8010f8e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010f92:	e7bf      	b.n	8010f14 <uxr_write_framed_msg+0xec>
 8010f94:	2204      	movs	r2, #4
 8010f96:	2503      	movs	r5, #3
 8010f98:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010f9a:	4423      	add	r3, r4
 8010f9c:	b2c9      	uxtb	r1, r1
 8010f9e:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8010fa2:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 8010fa6:	4425      	add	r5, r4
 8010fa8:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8010fac:	f080 0020 	eor.w	r0, r0, #32
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8010fb6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010fba:	f63f af61 	bhi.w	8010e80 <uxr_write_framed_msg+0x58>
 8010fbe:	18a3      	adds	r3, r4, r2
 8010fc0:	f081 0120 	eor.w	r1, r1, #32
 8010fc4:	3202      	adds	r2, #2
 8010fc6:	207d      	movs	r0, #125	; 0x7d
 8010fc8:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8010fcc:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 8010fd0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010fd4:	e75a      	b.n	8010e8c <uxr_write_framed_msg+0x64>
 8010fd6:	2500      	movs	r5, #0
 8010fd8:	e001      	b.n	8010fde <uxr_write_framed_msg+0x1b6>
 8010fda:	2800      	cmp	r0, #0
 8010fdc:	d0b3      	beq.n	8010f46 <uxr_write_framed_msg+0x11e>
 8010fde:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8010fe2:	1b52      	subs	r2, r2, r5
 8010fe4:	4421      	add	r1, r4
 8010fe6:	4643      	mov	r3, r8
 8010fe8:	4638      	mov	r0, r7
 8010fea:	47b0      	blx	r6
 8010fec:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8010ff0:	4405      	add	r5, r0
 8010ff2:	4295      	cmp	r5, r2
 8010ff4:	d3f1      	bcc.n	8010fda <uxr_write_framed_msg+0x1b2>
 8010ff6:	d1a6      	bne.n	8010f46 <uxr_write_framed_msg+0x11e>
 8010ff8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010ffa:	f04f 0300 	mov.w	r3, #0
 8010ffe:	454a      	cmp	r2, r9
 8011000:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011004:	464b      	mov	r3, r9
 8011006:	d971      	bls.n	80110ec <uxr_write_framed_msg+0x2c4>
 8011008:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801100c:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8011010:	2901      	cmp	r1, #1
 8011012:	f04f 0200 	mov.w	r2, #0
 8011016:	f63f af58 	bhi.w	8010eca <uxr_write_framed_msg+0xa2>
 801101a:	1c51      	adds	r1, r2, #1
 801101c:	b2c9      	uxtb	r1, r1
 801101e:	2929      	cmp	r1, #41	; 0x29
 8011020:	d8d9      	bhi.n	8010fd6 <uxr_write_framed_msg+0x1ae>
 8011022:	18a0      	adds	r0, r4, r2
 8011024:	3202      	adds	r2, #2
 8011026:	b2d2      	uxtb	r2, r2
 8011028:	f083 0120 	eor.w	r1, r3, #32
 801102c:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8011030:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8011034:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8011038:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801103c:	e74f      	b.n	8010ede <uxr_write_framed_msg+0xb6>
 801103e:	18a0      	adds	r0, r4, r2
 8011040:	3201      	adds	r2, #1
 8011042:	b2d2      	uxtb	r2, r2
 8011044:	4659      	mov	r1, fp
 8011046:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 801104a:	f04f 0b01 	mov.w	fp, #1
 801104e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011052:	2900      	cmp	r1, #0
 8011054:	d09b      	beq.n	8010f8e <uxr_write_framed_msg+0x166>
 8011056:	2500      	movs	r5, #0
 8011058:	e002      	b.n	8011060 <uxr_write_framed_msg+0x238>
 801105a:	2800      	cmp	r0, #0
 801105c:	f43f af73 	beq.w	8010f46 <uxr_write_framed_msg+0x11e>
 8011060:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8011064:	1b52      	subs	r2, r2, r5
 8011066:	4421      	add	r1, r4
 8011068:	4643      	mov	r3, r8
 801106a:	4638      	mov	r0, r7
 801106c:	47b0      	blx	r6
 801106e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8011072:	4405      	add	r5, r0
 8011074:	4295      	cmp	r5, r2
 8011076:	d3f0      	bcc.n	801105a <uxr_write_framed_msg+0x232>
 8011078:	f47f af65 	bne.w	8010f46 <uxr_write_framed_msg+0x11e>
 801107c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801107e:	2300      	movs	r3, #0
 8011080:	b290      	uxth	r0, r2
 8011082:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011086:	b005      	add	sp, #20
 8011088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801108c:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8011090:	f085 0520 	eor.w	r5, r5, #32
 8011094:	2303      	movs	r3, #3
 8011096:	217d      	movs	r1, #125	; 0x7d
 8011098:	2a01      	cmp	r2, #1
 801109a:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 801109e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80110a2:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 80110a6:	d814      	bhi.n	80110d2 <uxr_write_framed_msg+0x2aa>
 80110a8:	2205      	movs	r2, #5
 80110aa:	2504      	movs	r5, #4
 80110ac:	e774      	b.n	8010f98 <uxr_write_framed_msg+0x170>
 80110ae:	f083 0320 	eor.w	r3, r3, #32
 80110b2:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 80110b6:	3202      	adds	r2, #2
 80110b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80110ba:	b2d2      	uxtb	r2, r2
 80110bc:	207d      	movs	r0, #125	; 0x7d
 80110be:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 80110c2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	f47f aef4 	bne.w	8010eb4 <uxr_write_framed_msg+0x8c>
 80110cc:	9301      	str	r3, [sp, #4]
 80110ce:	4699      	mov	r9, r3
 80110d0:	e71a      	b.n	8010f08 <uxr_write_framed_msg+0xe0>
 80110d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80110d4:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80110d8:	b2d9      	uxtb	r1, r3
 80110da:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 80110de:	2204      	movs	r2, #4
 80110e0:	2b01      	cmp	r3, #1
 80110e2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80110e6:	f63f aecb 	bhi.w	8010e80 <uxr_write_framed_msg+0x58>
 80110ea:	e768      	b.n	8010fbe <uxr_write_framed_msg+0x196>
 80110ec:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80110f0:	fa5f f98a 	uxtb.w	r9, sl
 80110f4:	9301      	str	r3, [sp, #4]
 80110f6:	2200      	movs	r2, #0
 80110f8:	e706      	b.n	8010f08 <uxr_write_framed_msg+0xe0>
 80110fa:	bf00      	nop
 80110fc:	08019648 	.word	0x08019648

08011100 <uxr_framing_read_transport>:
 8011100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011104:	4604      	mov	r4, r0
 8011106:	b083      	sub	sp, #12
 8011108:	461f      	mov	r7, r3
 801110a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 801110e:	4689      	mov	r9, r1
 8011110:	4692      	mov	sl, r2
 8011112:	f000 fc87 	bl	8011a24 <uxr_millis>
 8011116:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801111a:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 801111e:	42b3      	cmp	r3, r6
 8011120:	4680      	mov	r8, r0
 8011122:	d05f      	beq.n	80111e4 <uxr_framing_read_transport+0xe4>
 8011124:	d81b      	bhi.n	801115e <uxr_framing_read_transport+0x5e>
 8011126:	1e75      	subs	r5, r6, #1
 8011128:	1aed      	subs	r5, r5, r3
 801112a:	b2ed      	uxtb	r5, r5
 801112c:	2600      	movs	r6, #0
 801112e:	455d      	cmp	r5, fp
 8011130:	d81e      	bhi.n	8011170 <uxr_framing_read_transport+0x70>
 8011132:	19ab      	adds	r3, r5, r6
 8011134:	455b      	cmp	r3, fp
 8011136:	bf84      	itt	hi
 8011138:	ebab 0605 	subhi.w	r6, fp, r5
 801113c:	b2f6      	uxtbhi	r6, r6
 801113e:	b9e5      	cbnz	r5, 801117a <uxr_framing_read_transport+0x7a>
 8011140:	f04f 0b00 	mov.w	fp, #0
 8011144:	f000 fc6e 	bl	8011a24 <uxr_millis>
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	eba0 0008 	sub.w	r0, r0, r8
 801114e:	1a1b      	subs	r3, r3, r0
 8011150:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011154:	4658      	mov	r0, fp
 8011156:	603b      	str	r3, [r7, #0]
 8011158:	b003      	add	sp, #12
 801115a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801115e:	2e00      	cmp	r6, #0
 8011160:	d048      	beq.n	80111f4 <uxr_framing_read_transport+0xf4>
 8011162:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8011166:	b2ed      	uxtb	r5, r5
 8011168:	3e01      	subs	r6, #1
 801116a:	455d      	cmp	r5, fp
 801116c:	b2f6      	uxtb	r6, r6
 801116e:	d9e0      	bls.n	8011132 <uxr_framing_read_transport+0x32>
 8011170:	fa5f f58b 	uxtb.w	r5, fp
 8011174:	2600      	movs	r6, #0
 8011176:	2d00      	cmp	r5, #0
 8011178:	d0e2      	beq.n	8011140 <uxr_framing_read_transport+0x40>
 801117a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801117e:	3102      	adds	r1, #2
 8011180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011182:	9300      	str	r3, [sp, #0]
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	4421      	add	r1, r4
 8011188:	462a      	mov	r2, r5
 801118a:	4650      	mov	r0, sl
 801118c:	47c8      	blx	r9
 801118e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8011192:	4a1b      	ldr	r2, [pc, #108]	; (8011200 <uxr_framing_read_transport+0x100>)
 8011194:	4403      	add	r3, r0
 8011196:	0859      	lsrs	r1, r3, #1
 8011198:	fba2 2101 	umull	r2, r1, r2, r1
 801119c:	0889      	lsrs	r1, r1, #2
 801119e:	222a      	movs	r2, #42	; 0x2a
 80111a0:	fb02 3111 	mls	r1, r2, r1, r3
 80111a4:	4683      	mov	fp, r0
 80111a6:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 80111aa:	2800      	cmp	r0, #0
 80111ac:	d0c8      	beq.n	8011140 <uxr_framing_read_transport+0x40>
 80111ae:	42a8      	cmp	r0, r5
 80111b0:	d1c8      	bne.n	8011144 <uxr_framing_read_transport+0x44>
 80111b2:	b31e      	cbz	r6, 80111fc <uxr_framing_read_transport+0xfc>
 80111b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80111b6:	9300      	str	r3, [sp, #0]
 80111b8:	3102      	adds	r1, #2
 80111ba:	4421      	add	r1, r4
 80111bc:	4632      	mov	r2, r6
 80111be:	2300      	movs	r3, #0
 80111c0:	4650      	mov	r0, sl
 80111c2:	47c8      	blx	r9
 80111c4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80111c8:	490d      	ldr	r1, [pc, #52]	; (8011200 <uxr_framing_read_transport+0x100>)
 80111ca:	181a      	adds	r2, r3, r0
 80111cc:	0853      	lsrs	r3, r2, #1
 80111ce:	fba1 1303 	umull	r1, r3, r1, r3
 80111d2:	089b      	lsrs	r3, r3, #2
 80111d4:	212a      	movs	r1, #42	; 0x2a
 80111d6:	fb01 2313 	mls	r3, r1, r3, r2
 80111da:	eb00 0b05 	add.w	fp, r0, r5
 80111de:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80111e2:	e7af      	b.n	8011144 <uxr_framing_read_transport+0x44>
 80111e4:	2600      	movs	r6, #0
 80111e6:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 80111ea:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80111ec:	d9c0      	bls.n	8011170 <uxr_framing_read_transport+0x70>
 80111ee:	2102      	movs	r1, #2
 80111f0:	2529      	movs	r5, #41	; 0x29
 80111f2:	e7c5      	b.n	8011180 <uxr_framing_read_transport+0x80>
 80111f4:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 80111f8:	b2ed      	uxtb	r5, r5
 80111fa:	e798      	b.n	801112e <uxr_framing_read_transport+0x2e>
 80111fc:	46ab      	mov	fp, r5
 80111fe:	e7a1      	b.n	8011144 <uxr_framing_read_transport+0x44>
 8011200:	30c30c31 	.word	0x30c30c31

08011204 <uxr_read_framed_msg>:
 8011204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011208:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 801120c:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 8011210:	42ae      	cmp	r6, r5
 8011212:	b083      	sub	sp, #12
 8011214:	4604      	mov	r4, r0
 8011216:	461f      	mov	r7, r3
 8011218:	4689      	mov	r9, r1
 801121a:	4692      	mov	sl, r2
 801121c:	f000 817d 	beq.w	801151a <uxr_read_framed_msg+0x316>
 8011220:	7823      	ldrb	r3, [r4, #0]
 8011222:	4ecc      	ldr	r6, [pc, #816]	; (8011554 <uxr_read_framed_msg+0x350>)
 8011224:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8011558 <uxr_read_framed_msg+0x354>
 8011228:	2b07      	cmp	r3, #7
 801122a:	d8fd      	bhi.n	8011228 <uxr_read_framed_msg+0x24>
 801122c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011230:	00f40113 	.word	0x00f40113
 8011234:	00b700d4 	.word	0x00b700d4
 8011238:	004d008e 	.word	0x004d008e
 801123c:	00080030 	.word	0x00080030
 8011240:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8011244:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8011248:	4298      	cmp	r0, r3
 801124a:	f000 8141 	beq.w	80114d0 <uxr_read_framed_msg+0x2cc>
 801124e:	18e2      	adds	r2, r4, r3
 8011250:	7891      	ldrb	r1, [r2, #2]
 8011252:	297d      	cmp	r1, #125	; 0x7d
 8011254:	f000 81a2 	beq.w	801159c <uxr_read_framed_msg+0x398>
 8011258:	3301      	adds	r3, #1
 801125a:	085a      	lsrs	r2, r3, #1
 801125c:	fba6 0202 	umull	r0, r2, r6, r2
 8011260:	0892      	lsrs	r2, r2, #2
 8011262:	202a      	movs	r0, #42	; 0x2a
 8011264:	fb00 3312 	mls	r3, r0, r2, r3
 8011268:	297e      	cmp	r1, #126	; 0x7e
 801126a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801126e:	f000 8251 	beq.w	8011714 <uxr_read_framed_msg+0x510>
 8011272:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011274:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8011276:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801127a:	b29b      	uxth	r3, r3
 801127c:	2100      	movs	r1, #0
 801127e:	429a      	cmp	r2, r3
 8011280:	86a3      	strh	r3, [r4, #52]	; 0x34
 8011282:	7021      	strb	r1, [r4, #0]
 8011284:	f000 8182 	beq.w	801158c <uxr_read_framed_msg+0x388>
 8011288:	2000      	movs	r0, #0
 801128a:	b003      	add	sp, #12
 801128c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011290:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8011294:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8011298:	4298      	cmp	r0, r3
 801129a:	f000 8128 	beq.w	80114ee <uxr_read_framed_msg+0x2ea>
 801129e:	18e2      	adds	r2, r4, r3
 80112a0:	7891      	ldrb	r1, [r2, #2]
 80112a2:	297d      	cmp	r1, #125	; 0x7d
 80112a4:	f000 8196 	beq.w	80115d4 <uxr_read_framed_msg+0x3d0>
 80112a8:	3301      	adds	r3, #1
 80112aa:	085a      	lsrs	r2, r3, #1
 80112ac:	fba6 0202 	umull	r0, r2, r6, r2
 80112b0:	0892      	lsrs	r2, r2, #2
 80112b2:	202a      	movs	r0, #42	; 0x2a
 80112b4:	fb00 3312 	mls	r3, r0, r2, r3
 80112b8:	297e      	cmp	r1, #126	; 0x7e
 80112ba:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80112be:	f000 8219 	beq.w	80116f4 <uxr_read_framed_msg+0x4f0>
 80112c2:	2307      	movs	r3, #7
 80112c4:	86a1      	strh	r1, [r4, #52]	; 0x34
 80112c6:	7023      	strb	r3, [r4, #0]
 80112c8:	e7ae      	b.n	8011228 <uxr_read_framed_msg+0x24>
 80112ca:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80112cc:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 80112ce:	429d      	cmp	r5, r3
 80112d0:	d937      	bls.n	8011342 <uxr_read_framed_msg+0x13e>
 80112d2:	ee07 9a90 	vmov	s15, r9
 80112d6:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80112da:	e01e      	b.n	801131a <uxr_read_framed_msg+0x116>
 80112dc:	f89e e002 	ldrb.w	lr, [lr, #2]
 80112e0:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 80112e4:	f000 80d2 	beq.w	801148c <uxr_read_framed_msg+0x288>
 80112e8:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80112ec:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80112f0:	f000 8214 	beq.w	801171c <uxr_read_framed_msg+0x518>
 80112f4:	f807 e003 	strb.w	lr, [r7, r3]
 80112f8:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80112fa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80112fc:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 80112fe:	ea80 010e 	eor.w	r1, r0, lr
 8011302:	b2c9      	uxtb	r1, r1
 8011304:	3301      	adds	r3, #1
 8011306:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 801130a:	b29b      	uxth	r3, r3
 801130c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8011310:	42ab      	cmp	r3, r5
 8011312:	86e2      	strh	r2, [r4, #54]	; 0x36
 8011314:	8663      	strh	r3, [r4, #50]	; 0x32
 8011316:	f080 8121 	bcs.w	801155c <uxr_read_framed_msg+0x358>
 801131a:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 801131e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8011322:	f101 0b01 	add.w	fp, r1, #1
 8011326:	ea4f 025b 	mov.w	r2, fp, lsr #1
 801132a:	fba6 9202 	umull	r9, r2, r6, r2
 801132e:	0892      	lsrs	r2, r2, #2
 8011330:	4288      	cmp	r0, r1
 8011332:	eb04 0e01 	add.w	lr, r4, r1
 8011336:	fb0c b212 	mls	r2, ip, r2, fp
 801133a:	d1cf      	bne.n	80112dc <uxr_read_framed_msg+0xd8>
 801133c:	ee17 9a90 	vmov	r9, s15
 8011340:	429d      	cmp	r5, r3
 8011342:	f040 8112 	bne.w	801156a <uxr_read_framed_msg+0x366>
 8011346:	2306      	movs	r3, #6
 8011348:	7023      	strb	r3, [r4, #0]
 801134a:	e76d      	b.n	8011228 <uxr_read_framed_msg+0x24>
 801134c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8011350:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8011354:	4298      	cmp	r0, r3
 8011356:	f000 80bb 	beq.w	80114d0 <uxr_read_framed_msg+0x2cc>
 801135a:	18e2      	adds	r2, r4, r3
 801135c:	7891      	ldrb	r1, [r2, #2]
 801135e:	297d      	cmp	r1, #125	; 0x7d
 8011360:	f000 8153 	beq.w	801160a <uxr_read_framed_msg+0x406>
 8011364:	3301      	adds	r3, #1
 8011366:	085a      	lsrs	r2, r3, #1
 8011368:	fba6 0202 	umull	r0, r2, r6, r2
 801136c:	0892      	lsrs	r2, r2, #2
 801136e:	202a      	movs	r0, #42	; 0x2a
 8011370:	fb00 3212 	mls	r2, r0, r2, r3
 8011374:	297e      	cmp	r1, #126	; 0x7e
 8011376:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801137a:	f000 81cb 	beq.w	8011714 <uxr_read_framed_msg+0x510>
 801137e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8011380:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011384:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011386:	b29b      	uxth	r3, r3
 8011388:	2000      	movs	r0, #0
 801138a:	428b      	cmp	r3, r1
 801138c:	8623      	strh	r3, [r4, #48]	; 0x30
 801138e:	8660      	strh	r0, [r4, #50]	; 0x32
 8011390:	86e0      	strh	r0, [r4, #54]	; 0x36
 8011392:	f240 80db 	bls.w	801154c <uxr_read_framed_msg+0x348>
 8011396:	7020      	strb	r0, [r4, #0]
 8011398:	b003      	add	sp, #12
 801139a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801139e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80113a2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80113a6:	4298      	cmp	r0, r3
 80113a8:	f000 80a1 	beq.w	80114ee <uxr_read_framed_msg+0x2ea>
 80113ac:	18e2      	adds	r2, r4, r3
 80113ae:	7891      	ldrb	r1, [r2, #2]
 80113b0:	297d      	cmp	r1, #125	; 0x7d
 80113b2:	f000 8167 	beq.w	8011684 <uxr_read_framed_msg+0x480>
 80113b6:	3301      	adds	r3, #1
 80113b8:	085a      	lsrs	r2, r3, #1
 80113ba:	fba6 0202 	umull	r0, r2, r6, r2
 80113be:	0892      	lsrs	r2, r2, #2
 80113c0:	202a      	movs	r0, #42	; 0x2a
 80113c2:	fb00 3312 	mls	r3, r0, r2, r3
 80113c6:	297e      	cmp	r1, #126	; 0x7e
 80113c8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80113cc:	f000 8192 	beq.w	80116f4 <uxr_read_framed_msg+0x4f0>
 80113d0:	2304      	movs	r3, #4
 80113d2:	8621      	strh	r1, [r4, #48]	; 0x30
 80113d4:	7023      	strb	r3, [r4, #0]
 80113d6:	e727      	b.n	8011228 <uxr_read_framed_msg+0x24>
 80113d8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80113dc:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80113e0:	4290      	cmp	r0, r2
 80113e2:	f000 80b1 	beq.w	8011548 <uxr_read_framed_msg+0x344>
 80113e6:	18a3      	adds	r3, r4, r2
 80113e8:	7899      	ldrb	r1, [r3, #2]
 80113ea:	297d      	cmp	r1, #125	; 0x7d
 80113ec:	f000 8166 	beq.w	80116bc <uxr_read_framed_msg+0x4b8>
 80113f0:	3201      	adds	r2, #1
 80113f2:	0850      	lsrs	r0, r2, #1
 80113f4:	fba6 3000 	umull	r3, r0, r6, r0
 80113f8:	0880      	lsrs	r0, r0, #2
 80113fa:	232a      	movs	r3, #42	; 0x2a
 80113fc:	fb03 2210 	mls	r2, r3, r0, r2
 8011400:	297e      	cmp	r1, #126	; 0x7e
 8011402:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8011406:	f000 8187 	beq.w	8011718 <uxr_read_framed_msg+0x514>
 801140a:	7863      	ldrb	r3, [r4, #1]
 801140c:	428b      	cmp	r3, r1
 801140e:	bf0c      	ite	eq
 8011410:	2303      	moveq	r3, #3
 8011412:	2300      	movne	r3, #0
 8011414:	7023      	strb	r3, [r4, #0]
 8011416:	e707      	b.n	8011228 <uxr_read_framed_msg+0x24>
 8011418:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801141c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8011420:	2200      	movs	r2, #0
 8011422:	4299      	cmp	r1, r3
 8011424:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8011428:	d063      	beq.n	80114f2 <uxr_read_framed_msg+0x2ee>
 801142a:	18e2      	adds	r2, r4, r3
 801142c:	7892      	ldrb	r2, [r2, #2]
 801142e:	2a7d      	cmp	r2, #125	; 0x7d
 8011430:	f000 8107 	beq.w	8011642 <uxr_read_framed_msg+0x43e>
 8011434:	1c59      	adds	r1, r3, #1
 8011436:	084b      	lsrs	r3, r1, #1
 8011438:	fba6 0303 	umull	r0, r3, r6, r3
 801143c:	089b      	lsrs	r3, r3, #2
 801143e:	202a      	movs	r0, #42	; 0x2a
 8011440:	fb00 1313 	mls	r3, r0, r3, r1
 8011444:	2a7e      	cmp	r2, #126	; 0x7e
 8011446:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 801144a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801144e:	d050      	beq.n	80114f2 <uxr_read_framed_msg+0x2ee>
 8011450:	2302      	movs	r3, #2
 8011452:	7023      	strb	r3, [r4, #0]
 8011454:	e6e8      	b.n	8011228 <uxr_read_framed_msg+0x24>
 8011456:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 801145a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801145e:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8011462:	1c51      	adds	r1, r2, #1
 8011464:	084b      	lsrs	r3, r1, #1
 8011466:	fba6 5303 	umull	r5, r3, r6, r3
 801146a:	089b      	lsrs	r3, r3, #2
 801146c:	fb0c 1313 	mls	r3, ip, r3, r1
 8011470:	4596      	cmp	lr, r2
 8011472:	eb04 0002 	add.w	r0, r4, r2
 8011476:	b2da      	uxtb	r2, r3
 8011478:	f43f af06 	beq.w	8011288 <uxr_read_framed_msg+0x84>
 801147c:	7883      	ldrb	r3, [r0, #2]
 801147e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8011482:	2b7e      	cmp	r3, #126	; 0x7e
 8011484:	d1ed      	bne.n	8011462 <uxr_read_framed_msg+0x25e>
 8011486:	2301      	movs	r3, #1
 8011488:	7023      	strb	r3, [r4, #0]
 801148a:	e6cd      	b.n	8011228 <uxr_read_framed_msg+0x24>
 801148c:	f101 0b01 	add.w	fp, r1, #1
 8011490:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8011494:	fba6 e202 	umull	lr, r2, r6, r2
 8011498:	3102      	adds	r1, #2
 801149a:	0892      	lsrs	r2, r2, #2
 801149c:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 80114a0:	fb0c b212 	mls	r2, ip, r2, fp
 80114a4:	fba6 9e0e 	umull	r9, lr, r6, lr
 80114a8:	eb04 0b02 	add.w	fp, r4, r2
 80114ac:	b2d2      	uxtb	r2, r2
 80114ae:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 80114b2:	4290      	cmp	r0, r2
 80114b4:	fb0c 111e 	mls	r1, ip, lr, r1
 80114b8:	f43f af40 	beq.w	801133c <uxr_read_framed_msg+0x138>
 80114bc:	f89b e002 	ldrb.w	lr, [fp, #2]
 80114c0:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 80114c4:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80114c8:	d036      	beq.n	8011538 <uxr_read_framed_msg+0x334>
 80114ca:	f08e 0e20 	eor.w	lr, lr, #32
 80114ce:	e711      	b.n	80112f4 <uxr_read_framed_msg+0xf0>
 80114d0:	2301      	movs	r3, #1
 80114d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80114d4:	4649      	mov	r1, r9
 80114d6:	e9cd 2300 	strd	r2, r3, [sp]
 80114da:	4620      	mov	r0, r4
 80114dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114de:	4652      	mov	r2, sl
 80114e0:	f7ff fe0e 	bl	8011100 <uxr_framing_read_transport>
 80114e4:	2800      	cmp	r0, #0
 80114e6:	f43f aecf 	beq.w	8011288 <uxr_read_framed_msg+0x84>
 80114ea:	7823      	ldrb	r3, [r4, #0]
 80114ec:	e69c      	b.n	8011228 <uxr_read_framed_msg+0x24>
 80114ee:	2302      	movs	r3, #2
 80114f0:	e7ef      	b.n	80114d2 <uxr_read_framed_msg+0x2ce>
 80114f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80114f4:	2304      	movs	r3, #4
 80114f6:	e9cd 2300 	strd	r2, r3, [sp]
 80114fa:	4649      	mov	r1, r9
 80114fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114fe:	4652      	mov	r2, sl
 8011500:	4620      	mov	r0, r4
 8011502:	f7ff fdfd 	bl	8011100 <uxr_framing_read_transport>
 8011506:	2800      	cmp	r0, #0
 8011508:	d1ef      	bne.n	80114ea <uxr_read_framed_msg+0x2e6>
 801150a:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 801150e:	387e      	subs	r0, #126	; 0x7e
 8011510:	bf18      	it	ne
 8011512:	2001      	movne	r0, #1
 8011514:	2800      	cmp	r0, #0
 8011516:	d0e8      	beq.n	80114ea <uxr_read_framed_msg+0x2e6>
 8011518:	e6b6      	b.n	8011288 <uxr_read_framed_msg+0x84>
 801151a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801151c:	2305      	movs	r3, #5
 801151e:	e9cd 5300 	strd	r5, r3, [sp]
 8011522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011524:	f7ff fdec 	bl	8011100 <uxr_framing_read_transport>
 8011528:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801152c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8011530:	429a      	cmp	r2, r3
 8011532:	f43f aea9 	beq.w	8011288 <uxr_read_framed_msg+0x84>
 8011536:	e673      	b.n	8011220 <uxr_read_framed_msg+0x1c>
 8011538:	429d      	cmp	r5, r3
 801153a:	ee17 9a90 	vmov	r9, s15
 801153e:	f43f af02 	beq.w	8011346 <uxr_read_framed_msg+0x142>
 8011542:	2301      	movs	r3, #1
 8011544:	7023      	strb	r3, [r4, #0]
 8011546:	e66f      	b.n	8011228 <uxr_read_framed_msg+0x24>
 8011548:	2303      	movs	r3, #3
 801154a:	e7c2      	b.n	80114d2 <uxr_read_framed_msg+0x2ce>
 801154c:	2305      	movs	r3, #5
 801154e:	7023      	strb	r3, [r4, #0]
 8011550:	e66a      	b.n	8011228 <uxr_read_framed_msg+0x24>
 8011552:	bf00      	nop
 8011554:	30c30c31 	.word	0x30c30c31
 8011558:	08019648 	.word	0x08019648
 801155c:	ee17 9a90 	vmov	r9, s15
 8011560:	f43f aef1 	beq.w	8011346 <uxr_read_framed_msg+0x142>
 8011564:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8011568:	d08d      	beq.n	8011486 <uxr_read_framed_msg+0x282>
 801156a:	1aeb      	subs	r3, r5, r3
 801156c:	3302      	adds	r3, #2
 801156e:	9301      	str	r3, [sp, #4]
 8011570:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011572:	9300      	str	r3, [sp, #0]
 8011574:	4652      	mov	r2, sl
 8011576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011578:	4649      	mov	r1, r9
 801157a:	4620      	mov	r0, r4
 801157c:	f7ff fdc0 	bl	8011100 <uxr_framing_read_transport>
 8011580:	fab0 f080 	clz	r0, r0
 8011584:	0940      	lsrs	r0, r0, #5
 8011586:	2800      	cmp	r0, #0
 8011588:	d0af      	beq.n	80114ea <uxr_read_framed_msg+0x2e6>
 801158a:	e67d      	b.n	8011288 <uxr_read_framed_msg+0x84>
 801158c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801158e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8011592:	7013      	strb	r3, [r2, #0]
 8011594:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8011596:	b003      	add	sp, #12
 8011598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801159c:	1c59      	adds	r1, r3, #1
 801159e:	084a      	lsrs	r2, r1, #1
 80115a0:	fba6 5202 	umull	r5, r2, r6, r2
 80115a4:	0892      	lsrs	r2, r2, #2
 80115a6:	252a      	movs	r5, #42	; 0x2a
 80115a8:	fb05 1212 	mls	r2, r5, r2, r1
 80115ac:	b2d1      	uxtb	r1, r2
 80115ae:	4288      	cmp	r0, r1
 80115b0:	d08e      	beq.n	80114d0 <uxr_read_framed_msg+0x2cc>
 80115b2:	3302      	adds	r3, #2
 80115b4:	4422      	add	r2, r4
 80115b6:	0858      	lsrs	r0, r3, #1
 80115b8:	fba6 1000 	umull	r1, r0, r6, r0
 80115bc:	7891      	ldrb	r1, [r2, #2]
 80115be:	0882      	lsrs	r2, r0, #2
 80115c0:	fb05 3312 	mls	r3, r5, r2, r3
 80115c4:	297e      	cmp	r1, #126	; 0x7e
 80115c6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80115ca:	f000 80a3 	beq.w	8011714 <uxr_read_framed_msg+0x510>
 80115ce:	f081 0120 	eor.w	r1, r1, #32
 80115d2:	e64e      	b.n	8011272 <uxr_read_framed_msg+0x6e>
 80115d4:	1c59      	adds	r1, r3, #1
 80115d6:	084a      	lsrs	r2, r1, #1
 80115d8:	fba6 5202 	umull	r5, r2, r6, r2
 80115dc:	0892      	lsrs	r2, r2, #2
 80115de:	252a      	movs	r5, #42	; 0x2a
 80115e0:	fb05 1212 	mls	r2, r5, r2, r1
 80115e4:	b2d1      	uxtb	r1, r2
 80115e6:	4288      	cmp	r0, r1
 80115e8:	d081      	beq.n	80114ee <uxr_read_framed_msg+0x2ea>
 80115ea:	3302      	adds	r3, #2
 80115ec:	4422      	add	r2, r4
 80115ee:	0858      	lsrs	r0, r3, #1
 80115f0:	fba6 1000 	umull	r1, r0, r6, r0
 80115f4:	7891      	ldrb	r1, [r2, #2]
 80115f6:	0882      	lsrs	r2, r0, #2
 80115f8:	fb05 3312 	mls	r3, r5, r2, r3
 80115fc:	297e      	cmp	r1, #126	; 0x7e
 80115fe:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011602:	d077      	beq.n	80116f4 <uxr_read_framed_msg+0x4f0>
 8011604:	f081 0120 	eor.w	r1, r1, #32
 8011608:	e65b      	b.n	80112c2 <uxr_read_framed_msg+0xbe>
 801160a:	1c59      	adds	r1, r3, #1
 801160c:	084a      	lsrs	r2, r1, #1
 801160e:	fba6 5202 	umull	r5, r2, r6, r2
 8011612:	0892      	lsrs	r2, r2, #2
 8011614:	252a      	movs	r5, #42	; 0x2a
 8011616:	fb05 1212 	mls	r2, r5, r2, r1
 801161a:	b2d1      	uxtb	r1, r2
 801161c:	4288      	cmp	r0, r1
 801161e:	f43f af57 	beq.w	80114d0 <uxr_read_framed_msg+0x2cc>
 8011622:	3302      	adds	r3, #2
 8011624:	4422      	add	r2, r4
 8011626:	0858      	lsrs	r0, r3, #1
 8011628:	fba6 1000 	umull	r1, r0, r6, r0
 801162c:	7891      	ldrb	r1, [r2, #2]
 801162e:	0882      	lsrs	r2, r0, #2
 8011630:	fb05 3312 	mls	r3, r5, r2, r3
 8011634:	297e      	cmp	r1, #126	; 0x7e
 8011636:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801163a:	d06b      	beq.n	8011714 <uxr_read_framed_msg+0x510>
 801163c:	f081 0120 	eor.w	r1, r1, #32
 8011640:	e69d      	b.n	801137e <uxr_read_framed_msg+0x17a>
 8011642:	1c5d      	adds	r5, r3, #1
 8011644:	086a      	lsrs	r2, r5, #1
 8011646:	fba6 0202 	umull	r0, r2, r6, r2
 801164a:	0892      	lsrs	r2, r2, #2
 801164c:	202a      	movs	r0, #42	; 0x2a
 801164e:	fb00 5212 	mls	r2, r0, r2, r5
 8011652:	b2d5      	uxtb	r5, r2
 8011654:	42a9      	cmp	r1, r5
 8011656:	f43f af4c 	beq.w	80114f2 <uxr_read_framed_msg+0x2ee>
 801165a:	3302      	adds	r3, #2
 801165c:	4422      	add	r2, r4
 801165e:	0859      	lsrs	r1, r3, #1
 8011660:	fba6 5101 	umull	r5, r1, r6, r1
 8011664:	7895      	ldrb	r5, [r2, #2]
 8011666:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 801166a:	088a      	lsrs	r2, r1, #2
 801166c:	fb00 3312 	mls	r3, r0, r2, r3
 8011670:	2d7e      	cmp	r5, #126	; 0x7e
 8011672:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011676:	f43f af3c 	beq.w	80114f2 <uxr_read_framed_msg+0x2ee>
 801167a:	f085 0520 	eor.w	r5, r5, #32
 801167e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8011682:	e6e5      	b.n	8011450 <uxr_read_framed_msg+0x24c>
 8011684:	1c59      	adds	r1, r3, #1
 8011686:	084a      	lsrs	r2, r1, #1
 8011688:	fba6 5202 	umull	r5, r2, r6, r2
 801168c:	0892      	lsrs	r2, r2, #2
 801168e:	252a      	movs	r5, #42	; 0x2a
 8011690:	fb05 1212 	mls	r2, r5, r2, r1
 8011694:	b2d1      	uxtb	r1, r2
 8011696:	4288      	cmp	r0, r1
 8011698:	f43f af29 	beq.w	80114ee <uxr_read_framed_msg+0x2ea>
 801169c:	3302      	adds	r3, #2
 801169e:	4422      	add	r2, r4
 80116a0:	0858      	lsrs	r0, r3, #1
 80116a2:	fba6 1000 	umull	r1, r0, r6, r0
 80116a6:	7891      	ldrb	r1, [r2, #2]
 80116a8:	0882      	lsrs	r2, r0, #2
 80116aa:	fb05 3312 	mls	r3, r5, r2, r3
 80116ae:	297e      	cmp	r1, #126	; 0x7e
 80116b0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80116b4:	d01e      	beq.n	80116f4 <uxr_read_framed_msg+0x4f0>
 80116b6:	f081 0120 	eor.w	r1, r1, #32
 80116ba:	e689      	b.n	80113d0 <uxr_read_framed_msg+0x1cc>
 80116bc:	1c51      	adds	r1, r2, #1
 80116be:	084b      	lsrs	r3, r1, #1
 80116c0:	fba6 5303 	umull	r5, r3, r6, r3
 80116c4:	089b      	lsrs	r3, r3, #2
 80116c6:	252a      	movs	r5, #42	; 0x2a
 80116c8:	fb05 1313 	mls	r3, r5, r3, r1
 80116cc:	b2d9      	uxtb	r1, r3
 80116ce:	4288      	cmp	r0, r1
 80116d0:	f43f af3a 	beq.w	8011548 <uxr_read_framed_msg+0x344>
 80116d4:	3202      	adds	r2, #2
 80116d6:	4423      	add	r3, r4
 80116d8:	0850      	lsrs	r0, r2, #1
 80116da:	789b      	ldrb	r3, [r3, #2]
 80116dc:	fba6 1000 	umull	r1, r0, r6, r0
 80116e0:	0880      	lsrs	r0, r0, #2
 80116e2:	fb05 2210 	mls	r2, r5, r0, r2
 80116e6:	2b7e      	cmp	r3, #126	; 0x7e
 80116e8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80116ec:	d014      	beq.n	8011718 <uxr_read_framed_msg+0x514>
 80116ee:	f083 0120 	eor.w	r1, r3, #32
 80116f2:	e68a      	b.n	801140a <uxr_read_framed_msg+0x206>
 80116f4:	2302      	movs	r3, #2
 80116f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80116f8:	4649      	mov	r1, r9
 80116fa:	e9cd 2300 	strd	r2, r3, [sp]
 80116fe:	4620      	mov	r0, r4
 8011700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011702:	4652      	mov	r2, sl
 8011704:	f7ff fcfc 	bl	8011100 <uxr_framing_read_transport>
 8011708:	2800      	cmp	r0, #0
 801170a:	f47f aeee 	bne.w	80114ea <uxr_read_framed_msg+0x2e6>
 801170e:	2301      	movs	r3, #1
 8011710:	7023      	strb	r3, [r4, #0]
 8011712:	e589      	b.n	8011228 <uxr_read_framed_msg+0x24>
 8011714:	2301      	movs	r3, #1
 8011716:	e7ee      	b.n	80116f6 <uxr_read_framed_msg+0x4f2>
 8011718:	2303      	movs	r3, #3
 801171a:	e7ec      	b.n	80116f6 <uxr_read_framed_msg+0x4f2>
 801171c:	ee17 9a90 	vmov	r9, s15
 8011720:	e6b1      	b.n	8011486 <uxr_read_framed_msg+0x282>
 8011722:	bf00      	nop

08011724 <uxr_stream_id>:
 8011724:	b410      	push	{r4}
 8011726:	2901      	cmp	r1, #1
 8011728:	b083      	sub	sp, #12
 801172a:	d01f      	beq.n	801176c <uxr_stream_id+0x48>
 801172c:	2902      	cmp	r1, #2
 801172e:	f04f 0400 	mov.w	r4, #0
 8011732:	d01e      	beq.n	8011772 <uxr_stream_id+0x4e>
 8011734:	2300      	movs	r3, #0
 8011736:	f364 0307 	bfi	r3, r4, #0, #8
 801173a:	f360 230f 	bfi	r3, r0, #8, #8
 801173e:	f361 4317 	bfi	r3, r1, #16, #8
 8011742:	f362 631f 	bfi	r3, r2, #24, #8
 8011746:	b2da      	uxtb	r2, r3
 8011748:	2000      	movs	r0, #0
 801174a:	f362 0007 	bfi	r0, r2, #0, #8
 801174e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011752:	f362 200f 	bfi	r0, r2, #8, #8
 8011756:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801175a:	f362 4017 	bfi	r0, r2, #16, #8
 801175e:	0e1b      	lsrs	r3, r3, #24
 8011760:	f363 601f 	bfi	r0, r3, #24, #8
 8011764:	b003      	add	sp, #12
 8011766:	f85d 4b04 	ldr.w	r4, [sp], #4
 801176a:	4770      	bx	lr
 801176c:	1c44      	adds	r4, r0, #1
 801176e:	b2e4      	uxtb	r4, r4
 8011770:	e7e0      	b.n	8011734 <uxr_stream_id+0x10>
 8011772:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 8011776:	e7dd      	b.n	8011734 <uxr_stream_id+0x10>

08011778 <uxr_stream_id_from_raw>:
 8011778:	b410      	push	{r4}
 801177a:	b083      	sub	sp, #12
 801177c:	b128      	cbz	r0, 801178a <uxr_stream_id_from_raw+0x12>
 801177e:	0603      	lsls	r3, r0, #24
 8011780:	d421      	bmi.n	80117c6 <uxr_stream_id_from_raw+0x4e>
 8011782:	1e42      	subs	r2, r0, #1
 8011784:	b2d2      	uxtb	r2, r2
 8011786:	2401      	movs	r4, #1
 8011788:	e001      	b.n	801178e <uxr_stream_id_from_raw+0x16>
 801178a:	4604      	mov	r4, r0
 801178c:	4602      	mov	r2, r0
 801178e:	2300      	movs	r3, #0
 8011790:	f360 0307 	bfi	r3, r0, #0, #8
 8011794:	f362 230f 	bfi	r3, r2, #8, #8
 8011798:	f364 4317 	bfi	r3, r4, #16, #8
 801179c:	f361 631f 	bfi	r3, r1, #24, #8
 80117a0:	b2da      	uxtb	r2, r3
 80117a2:	2000      	movs	r0, #0
 80117a4:	f362 0007 	bfi	r0, r2, #0, #8
 80117a8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80117ac:	f362 200f 	bfi	r0, r2, #8, #8
 80117b0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80117b4:	f362 4017 	bfi	r0, r2, #16, #8
 80117b8:	0e1b      	lsrs	r3, r3, #24
 80117ba:	f363 601f 	bfi	r0, r3, #24, #8
 80117be:	b003      	add	sp, #12
 80117c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117c4:	4770      	bx	lr
 80117c6:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 80117ca:	2402      	movs	r4, #2
 80117cc:	e7df      	b.n	801178e <uxr_stream_id_from_raw+0x16>
 80117ce:	bf00      	nop

080117d0 <uxr_init_stream_storage>:
 80117d0:	2300      	movs	r3, #0
 80117d2:	7403      	strb	r3, [r0, #16]
 80117d4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80117d8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80117dc:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 80117e0:	4770      	bx	lr
 80117e2:	bf00      	nop

080117e4 <uxr_reset_stream_storage>:
 80117e4:	b570      	push	{r4, r5, r6, lr}
 80117e6:	7c03      	ldrb	r3, [r0, #16]
 80117e8:	4604      	mov	r4, r0
 80117ea:	b153      	cbz	r3, 8011802 <uxr_reset_stream_storage+0x1e>
 80117ec:	4606      	mov	r6, r0
 80117ee:	2500      	movs	r5, #0
 80117f0:	4630      	mov	r0, r6
 80117f2:	f004 fd07 	bl	8016204 <uxr_reset_output_best_effort_stream>
 80117f6:	7c23      	ldrb	r3, [r4, #16]
 80117f8:	3501      	adds	r5, #1
 80117fa:	42ab      	cmp	r3, r5
 80117fc:	f106 0610 	add.w	r6, r6, #16
 8011800:	d8f6      	bhi.n	80117f0 <uxr_reset_stream_storage+0xc>
 8011802:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011806:	b163      	cbz	r3, 8011822 <uxr_reset_stream_storage+0x3e>
 8011808:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801180c:	2500      	movs	r5, #0
 801180e:	4630      	mov	r0, r6
 8011810:	f004 fb04 	bl	8015e1c <uxr_reset_input_best_effort_stream>
 8011814:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011818:	3501      	adds	r5, #1
 801181a:	42ab      	cmp	r3, r5
 801181c:	f106 0602 	add.w	r6, r6, #2
 8011820:	d8f5      	bhi.n	801180e <uxr_reset_stream_storage+0x2a>
 8011822:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011826:	b163      	cbz	r3, 8011842 <uxr_reset_stream_storage+0x5e>
 8011828:	f104 0618 	add.w	r6, r4, #24
 801182c:	2500      	movs	r5, #0
 801182e:	4630      	mov	r0, r6
 8011830:	f004 fd88 	bl	8016344 <uxr_reset_output_reliable_stream>
 8011834:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011838:	3501      	adds	r5, #1
 801183a:	42ab      	cmp	r3, r5
 801183c:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8011840:	d8f5      	bhi.n	801182e <uxr_reset_stream_storage+0x4a>
 8011842:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011846:	b163      	cbz	r3, 8011862 <uxr_reset_stream_storage+0x7e>
 8011848:	f104 0648 	add.w	r6, r4, #72	; 0x48
 801184c:	2500      	movs	r5, #0
 801184e:	4630      	mov	r0, r6
 8011850:	f004 fb4c 	bl	8015eec <uxr_reset_input_reliable_stream>
 8011854:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011858:	3501      	adds	r5, #1
 801185a:	42ab      	cmp	r3, r5
 801185c:	f106 0618 	add.w	r6, r6, #24
 8011860:	d8f5      	bhi.n	801184e <uxr_reset_stream_storage+0x6a>
 8011862:	bd70      	pop	{r4, r5, r6, pc}

08011864 <uxr_add_output_best_effort_buffer>:
 8011864:	b530      	push	{r4, r5, lr}
 8011866:	7c04      	ldrb	r4, [r0, #16]
 8011868:	1c65      	adds	r5, r4, #1
 801186a:	b083      	sub	sp, #12
 801186c:	7405      	strb	r5, [r0, #16]
 801186e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011872:	f004 fcbb 	bl	80161ec <uxr_init_output_best_effort_stream>
 8011876:	2201      	movs	r2, #1
 8011878:	4620      	mov	r0, r4
 801187a:	4611      	mov	r1, r2
 801187c:	b003      	add	sp, #12
 801187e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011882:	f7ff bf4f 	b.w	8011724 <uxr_stream_id>
 8011886:	bf00      	nop

08011888 <uxr_add_output_reliable_buffer>:
 8011888:	b570      	push	{r4, r5, r6, lr}
 801188a:	b084      	sub	sp, #16
 801188c:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8011890:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8011894:	9600      	str	r6, [sp, #0]
 8011896:	2528      	movs	r5, #40	; 0x28
 8011898:	1c66      	adds	r6, r4, #1
 801189a:	fb05 0504 	mla	r5, r5, r4, r0
 801189e:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 80118a2:	f105 0018 	add.w	r0, r5, #24
 80118a6:	f004 fd1b 	bl	80162e0 <uxr_init_output_reliable_stream>
 80118aa:	4620      	mov	r0, r4
 80118ac:	2201      	movs	r2, #1
 80118ae:	2102      	movs	r1, #2
 80118b0:	b004      	add	sp, #16
 80118b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118b6:	f7ff bf35 	b.w	8011724 <uxr_stream_id>
 80118ba:	bf00      	nop

080118bc <uxr_add_input_best_effort_buffer>:
 80118bc:	b510      	push	{r4, lr}
 80118be:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 80118c2:	1c62      	adds	r2, r4, #1
 80118c4:	f104 0321 	add.w	r3, r4, #33	; 0x21
 80118c8:	b082      	sub	sp, #8
 80118ca:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80118ce:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80118d2:	f004 fa9f 	bl	8015e14 <uxr_init_input_best_effort_stream>
 80118d6:	4620      	mov	r0, r4
 80118d8:	2200      	movs	r2, #0
 80118da:	2101      	movs	r1, #1
 80118dc:	b002      	add	sp, #8
 80118de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118e2:	f7ff bf1f 	b.w	8011724 <uxr_stream_id>
 80118e6:	bf00      	nop

080118e8 <uxr_add_input_reliable_buffer>:
 80118e8:	b570      	push	{r4, r5, r6, lr}
 80118ea:	b084      	sub	sp, #16
 80118ec:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 80118f0:	9e08      	ldr	r6, [sp, #32]
 80118f2:	9600      	str	r6, [sp, #0]
 80118f4:	2518      	movs	r5, #24
 80118f6:	1c66      	adds	r6, r4, #1
 80118f8:	fb05 0504 	mla	r5, r5, r4, r0
 80118fc:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 8011900:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8011904:	f004 face 	bl	8015ea4 <uxr_init_input_reliable_stream>
 8011908:	4620      	mov	r0, r4
 801190a:	2200      	movs	r2, #0
 801190c:	2102      	movs	r1, #2
 801190e:	b004      	add	sp, #16
 8011910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011914:	f7ff bf06 	b.w	8011724 <uxr_stream_id>

08011918 <uxr_get_output_best_effort_stream>:
 8011918:	7c03      	ldrb	r3, [r0, #16]
 801191a:	428b      	cmp	r3, r1
 801191c:	bf8c      	ite	hi
 801191e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011922:	2000      	movls	r0, #0
 8011924:	4770      	bx	lr
 8011926:	bf00      	nop

08011928 <uxr_get_output_reliable_stream>:
 8011928:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801192c:	428b      	cmp	r3, r1
 801192e:	bf83      	ittte	hi
 8011930:	2328      	movhi	r3, #40	; 0x28
 8011932:	fb03 0101 	mlahi	r1, r3, r1, r0
 8011936:	f101 0018 	addhi.w	r0, r1, #24
 801193a:	2000      	movls	r0, #0
 801193c:	4770      	bx	lr
 801193e:	bf00      	nop

08011940 <uxr_get_input_best_effort_stream>:
 8011940:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8011944:	428b      	cmp	r3, r1
 8011946:	bf86      	itte	hi
 8011948:	3121      	addhi	r1, #33	; 0x21
 801194a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801194e:	2000      	movls	r0, #0
 8011950:	4770      	bx	lr
 8011952:	bf00      	nop

08011954 <uxr_get_input_reliable_stream>:
 8011954:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8011958:	428b      	cmp	r3, r1
 801195a:	bf83      	ittte	hi
 801195c:	2318      	movhi	r3, #24
 801195e:	fb03 0101 	mlahi	r1, r3, r1, r0
 8011962:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 8011966:	2000      	movls	r0, #0
 8011968:	4770      	bx	lr
 801196a:	bf00      	nop

0801196c <uxr_output_streams_confirmed>:
 801196c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8011970:	b183      	cbz	r3, 8011994 <uxr_output_streams_confirmed+0x28>
 8011972:	b570      	push	{r4, r5, r6, lr}
 8011974:	4606      	mov	r6, r0
 8011976:	f100 0518 	add.w	r5, r0, #24
 801197a:	2400      	movs	r4, #0
 801197c:	e001      	b.n	8011982 <uxr_output_streams_confirmed+0x16>
 801197e:	3528      	adds	r5, #40	; 0x28
 8011980:	b138      	cbz	r0, 8011992 <uxr_output_streams_confirmed+0x26>
 8011982:	4628      	mov	r0, r5
 8011984:	f004 ff38 	bl	80167f8 <uxr_is_output_up_to_date>
 8011988:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 801198c:	3401      	adds	r4, #1
 801198e:	42a3      	cmp	r3, r4
 8011990:	d8f5      	bhi.n	801197e <uxr_output_streams_confirmed+0x12>
 8011992:	bd70      	pop	{r4, r5, r6, pc}
 8011994:	2001      	movs	r0, #1
 8011996:	4770      	bx	lr

08011998 <uxr_buffer_submessage_header>:
 8011998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801199a:	4604      	mov	r4, r0
 801199c:	460e      	mov	r6, r1
 801199e:	2104      	movs	r1, #4
 80119a0:	4615      	mov	r5, r2
 80119a2:	461f      	mov	r7, r3
 80119a4:	f7fa fd3c 	bl	800c420 <ucdr_align_to>
 80119a8:	2301      	movs	r3, #1
 80119aa:	ea47 0203 	orr.w	r2, r7, r3
 80119ae:	4631      	mov	r1, r6
 80119b0:	7523      	strb	r3, [r4, #20]
 80119b2:	4620      	mov	r0, r4
 80119b4:	462b      	mov	r3, r5
 80119b6:	f000 fa21 	bl	8011dfc <uxr_serialize_submessage_header>
 80119ba:	4620      	mov	r0, r4
 80119bc:	f7fa fd46 	bl	800c44c <ucdr_buffer_remaining>
 80119c0:	42a8      	cmp	r0, r5
 80119c2:	bf34      	ite	cc
 80119c4:	2000      	movcc	r0, #0
 80119c6:	2001      	movcs	r0, #1
 80119c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119ca:	bf00      	nop

080119cc <uxr_read_submessage_header>:
 80119cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119d0:	4604      	mov	r4, r0
 80119d2:	460d      	mov	r5, r1
 80119d4:	2104      	movs	r1, #4
 80119d6:	4616      	mov	r6, r2
 80119d8:	4698      	mov	r8, r3
 80119da:	f7fa fd21 	bl	800c420 <ucdr_align_to>
 80119de:	4620      	mov	r0, r4
 80119e0:	f7fa fd34 	bl	800c44c <ucdr_buffer_remaining>
 80119e4:	2803      	cmp	r0, #3
 80119e6:	bf8c      	ite	hi
 80119e8:	2701      	movhi	r7, #1
 80119ea:	2700      	movls	r7, #0
 80119ec:	d802      	bhi.n	80119f4 <uxr_read_submessage_header+0x28>
 80119ee:	4638      	mov	r0, r7
 80119f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119f4:	4633      	mov	r3, r6
 80119f6:	4642      	mov	r2, r8
 80119f8:	4620      	mov	r0, r4
 80119fa:	4629      	mov	r1, r5
 80119fc:	f000 fa12 	bl	8011e24 <uxr_deserialize_submessage_header>
 8011a00:	f898 3000 	ldrb.w	r3, [r8]
 8011a04:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8011a08:	f003 0301 	and.w	r3, r3, #1
 8011a0c:	f888 2000 	strb.w	r2, [r8]
 8011a10:	7523      	strb	r3, [r4, #20]
 8011a12:	4638      	mov	r0, r7
 8011a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011a18 <uxr_submessage_padding>:
 8011a18:	f010 0003 	ands.w	r0, r0, #3
 8011a1c:	bf18      	it	ne
 8011a1e:	f1c0 0004 	rsbne	r0, r0, #4
 8011a22:	4770      	bx	lr

08011a24 <uxr_millis>:
 8011a24:	b510      	push	{r4, lr}
 8011a26:	b084      	sub	sp, #16
 8011a28:	4669      	mov	r1, sp
 8011a2a:	2001      	movs	r0, #1
 8011a2c:	f7f0 f8e4 	bl	8001bf8 <clock_gettime>
 8011a30:	e9dd 2400 	ldrd	r2, r4, [sp]
 8011a34:	4907      	ldr	r1, [pc, #28]	; (8011a54 <uxr_millis+0x30>)
 8011a36:	9802      	ldr	r0, [sp, #8]
 8011a38:	fba2 2301 	umull	r2, r3, r2, r1
 8011a3c:	fb01 3304 	mla	r3, r1, r4, r3
 8011a40:	4604      	mov	r4, r0
 8011a42:	1810      	adds	r0, r2, r0
 8011a44:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8011a48:	4a03      	ldr	r2, [pc, #12]	; (8011a58 <uxr_millis+0x34>)
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	f7ee fc28 	bl	80002a0 <__aeabi_ldivmod>
 8011a50:	b004      	add	sp, #16
 8011a52:	bd10      	pop	{r4, pc}
 8011a54:	3b9aca00 	.word	0x3b9aca00
 8011a58:	000f4240 	.word	0x000f4240

08011a5c <uxr_nanos>:
 8011a5c:	b510      	push	{r4, lr}
 8011a5e:	b084      	sub	sp, #16
 8011a60:	4669      	mov	r1, sp
 8011a62:	2001      	movs	r0, #1
 8011a64:	f7f0 f8c8 	bl	8001bf8 <clock_gettime>
 8011a68:	e9dd 2400 	ldrd	r2, r4, [sp]
 8011a6c:	4905      	ldr	r1, [pc, #20]	; (8011a84 <uxr_nanos+0x28>)
 8011a6e:	9802      	ldr	r0, [sp, #8]
 8011a70:	fba2 2301 	umull	r2, r3, r2, r1
 8011a74:	fb01 3304 	mla	r3, r1, r4, r3
 8011a78:	4604      	mov	r4, r0
 8011a7a:	1810      	adds	r0, r2, r0
 8011a7c:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8011a80:	b004      	add	sp, #16
 8011a82:	bd10      	pop	{r4, pc}
 8011a84:	3b9aca00 	.word	0x3b9aca00

08011a88 <on_full_output_buffer_fragmented>:
 8011a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a8c:	460c      	mov	r4, r1
 8011a8e:	b08a      	sub	sp, #40	; 0x28
 8011a90:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8011a94:	4606      	mov	r6, r0
 8011a96:	f104 0008 	add.w	r0, r4, #8
 8011a9a:	f7ff ff45 	bl	8011928 <uxr_get_output_reliable_stream>
 8011a9e:	4605      	mov	r5, r0
 8011aa0:	f004 feb4 	bl	801680c <get_available_free_slots>
 8011aa4:	b968      	cbnz	r0, 8011ac2 <on_full_output_buffer_fragmented+0x3a>
 8011aa6:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8011aaa:	4620      	mov	r0, r4
 8011aac:	4798      	blx	r3
 8011aae:	b918      	cbnz	r0, 8011ab8 <on_full_output_buffer_fragmented+0x30>
 8011ab0:	2001      	movs	r0, #1
 8011ab2:	b00a      	add	sp, #40	; 0x28
 8011ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ab8:	4628      	mov	r0, r5
 8011aba:	f004 fea7 	bl	801680c <get_available_free_slots>
 8011abe:	2800      	cmp	r0, #0
 8011ac0:	d0f6      	beq.n	8011ab0 <on_full_output_buffer_fragmented+0x28>
 8011ac2:	8928      	ldrh	r0, [r5, #8]
 8011ac4:	89eb      	ldrh	r3, [r5, #14]
 8011ac6:	7b2a      	ldrb	r2, [r5, #12]
 8011ac8:	fbb3 f1f0 	udiv	r1, r3, r0
 8011acc:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 8011ad0:	fb00 3111 	mls	r1, r0, r1, r3
 8011ad4:	b28b      	uxth	r3, r1
 8011ad6:	32fc      	adds	r2, #252	; 0xfc
 8011ad8:	6869      	ldr	r1, [r5, #4]
 8011ada:	fbb1 f1f0 	udiv	r1, r1, r0
 8011ade:	1f0f      	subs	r7, r1, #4
 8011ae0:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8011ae4:	fb01 f103 	mul.w	r1, r1, r3
 8011ae8:	443a      	add	r2, r7
 8011aea:	682b      	ldr	r3, [r5, #0]
 8011aec:	fa1f f882 	uxth.w	r8, r2
 8011af0:	3104      	adds	r1, #4
 8011af2:	4419      	add	r1, r3
 8011af4:	eba0 0008 	sub.w	r0, r0, r8
 8011af8:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8011afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b00:	9300      	str	r3, [sp, #0]
 8011b02:	463a      	mov	r2, r7
 8011b04:	a802      	add	r0, sp, #8
 8011b06:	2300      	movs	r3, #0
 8011b08:	f7fa fc5c 	bl	800c3c4 <ucdr_init_buffer_origin_offset>
 8011b0c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8011b10:	42ba      	cmp	r2, r7
 8011b12:	d927      	bls.n	8011b64 <on_full_output_buffer_fragmented+0xdc>
 8011b14:	4642      	mov	r2, r8
 8011b16:	2300      	movs	r3, #0
 8011b18:	210d      	movs	r1, #13
 8011b1a:	a802      	add	r0, sp, #8
 8011b1c:	f7ff ff3c 	bl	8011998 <uxr_buffer_submessage_header>
 8011b20:	8928      	ldrh	r0, [r5, #8]
 8011b22:	89eb      	ldrh	r3, [r5, #14]
 8011b24:	fbb3 f1f0 	udiv	r1, r3, r0
 8011b28:	fb00 3111 	mls	r1, r0, r1, r3
 8011b2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011b30:	b289      	uxth	r1, r1
 8011b32:	fbb3 f3f0 	udiv	r3, r3, r0
 8011b36:	fb03 f301 	mul.w	r3, r3, r1
 8011b3a:	50d7      	str	r7, [r2, r3]
 8011b3c:	89e8      	ldrh	r0, [r5, #14]
 8011b3e:	2101      	movs	r1, #1
 8011b40:	f004 fe84 	bl	801684c <uxr_seq_num_add>
 8011b44:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8011b48:	81e8      	strh	r0, [r5, #14]
 8011b4a:	1a52      	subs	r2, r2, r1
 8011b4c:	4630      	mov	r0, r6
 8011b4e:	f7fa fc4b 	bl	800c3e8 <ucdr_init_buffer>
 8011b52:	4630      	mov	r0, r6
 8011b54:	490f      	ldr	r1, [pc, #60]	; (8011b94 <on_full_output_buffer_fragmented+0x10c>)
 8011b56:	4622      	mov	r2, r4
 8011b58:	f7fa fc1c 	bl	800c394 <ucdr_set_on_full_buffer_callback>
 8011b5c:	2000      	movs	r0, #0
 8011b5e:	b00a      	add	sp, #40	; 0x28
 8011b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b64:	b292      	uxth	r2, r2
 8011b66:	2302      	movs	r3, #2
 8011b68:	210d      	movs	r1, #13
 8011b6a:	a802      	add	r0, sp, #8
 8011b6c:	f7ff ff14 	bl	8011998 <uxr_buffer_submessage_header>
 8011b70:	8928      	ldrh	r0, [r5, #8]
 8011b72:	89eb      	ldrh	r3, [r5, #14]
 8011b74:	fbb3 f2f0 	udiv	r2, r3, r0
 8011b78:	fb00 3212 	mls	r2, r0, r2, r3
 8011b7c:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8011b80:	686b      	ldr	r3, [r5, #4]
 8011b82:	fbb3 f3f0 	udiv	r3, r3, r0
 8011b86:	b292      	uxth	r2, r2
 8011b88:	6828      	ldr	r0, [r5, #0]
 8011b8a:	fb03 f302 	mul.w	r3, r3, r2
 8011b8e:	3108      	adds	r1, #8
 8011b90:	50c1      	str	r1, [r0, r3]
 8011b92:	e7d3      	b.n	8011b3c <on_full_output_buffer_fragmented+0xb4>
 8011b94:	08011a89 	.word	0x08011a89

08011b98 <uxr_prepare_output_stream>:
 8011b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b9a:	b087      	sub	sp, #28
 8011b9c:	2407      	movs	r4, #7
 8011b9e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011ba0:	9202      	str	r2, [sp, #8]
 8011ba2:	2500      	movs	r5, #0
 8011ba4:	1d32      	adds	r2, r6, #4
 8011ba6:	e9cd 4500 	strd	r4, r5, [sp]
 8011baa:	9103      	str	r1, [sp, #12]
 8011bac:	461c      	mov	r4, r3
 8011bae:	4606      	mov	r6, r0
 8011bb0:	f7fe ffce 	bl	8010b50 <uxr_prepare_stream_to_write_submessage>
 8011bb4:	f080 0201 	eor.w	r2, r0, #1
 8011bb8:	b2d2      	uxtb	r2, r2
 8011bba:	75a2      	strb	r2, [r4, #22]
 8011bbc:	b112      	cbz	r2, 8011bc4 <uxr_prepare_output_stream+0x2c>
 8011bbe:	4628      	mov	r0, r5
 8011bc0:	b007      	add	sp, #28
 8011bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bc4:	aa05      	add	r2, sp, #20
 8011bc6:	9902      	ldr	r1, [sp, #8]
 8011bc8:	4630      	mov	r0, r6
 8011bca:	f7ff f8f7 	bl	8010dbc <uxr_init_base_object_request>
 8011bce:	a905      	add	r1, sp, #20
 8011bd0:	4605      	mov	r5, r0
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	f000 fda4 	bl	8012720 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011bd8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8011bdc:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8011be0:	1a52      	subs	r2, r2, r1
 8011be2:	4620      	mov	r0, r4
 8011be4:	f7fa fc00 	bl	800c3e8 <ucdr_init_buffer>
 8011be8:	4620      	mov	r0, r4
 8011bea:	463a      	mov	r2, r7
 8011bec:	4631      	mov	r1, r6
 8011bee:	f7fa fbd1 	bl	800c394 <ucdr_set_on_full_buffer_callback>
 8011bf2:	4628      	mov	r0, r5
 8011bf4:	b007      	add	sp, #28
 8011bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011bf8 <uxr_prepare_output_stream_fragmented>:
 8011bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bfc:	b091      	sub	sp, #68	; 0x44
 8011bfe:	4605      	mov	r5, r0
 8011c00:	9105      	str	r1, [sp, #20]
 8011c02:	3008      	adds	r0, #8
 8011c04:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011c08:	9302      	str	r3, [sp, #8]
 8011c0a:	9204      	str	r2, [sp, #16]
 8011c0c:	f7ff fe8c 	bl	8011928 <uxr_get_output_reliable_stream>
 8011c10:	2800      	cmp	r0, #0
 8011c12:	f000 808d 	beq.w	8011d30 <uxr_prepare_output_stream_fragmented+0x138>
 8011c16:	4604      	mov	r4, r0
 8011c18:	f004 fdf8 	bl	801680c <get_available_free_slots>
 8011c1c:	2800      	cmp	r0, #0
 8011c1e:	f000 8082 	beq.w	8011d26 <uxr_prepare_output_stream_fragmented+0x12e>
 8011c22:	8922      	ldrh	r2, [r4, #8]
 8011c24:	89e7      	ldrh	r7, [r4, #14]
 8011c26:	fbb7 f8f2 	udiv	r8, r7, r2
 8011c2a:	e9d4 3100 	ldrd	r3, r1, [r4]
 8011c2e:	fb02 7818 	mls	r8, r2, r8, r7
 8011c32:	fa1f f888 	uxth.w	r8, r8
 8011c36:	fbb1 f2f2 	udiv	r2, r1, r2
 8011c3a:	fb02 f808 	mul.w	r8, r2, r8
 8011c3e:	f108 0804 	add.w	r8, r8, #4
 8011c42:	4498      	add	r8, r3
 8011c44:	7b23      	ldrb	r3, [r4, #12]
 8011c46:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8011c4a:	9203      	str	r2, [sp, #12]
 8011c4c:	4553      	cmp	r3, sl
 8011c4e:	f1a2 0b04 	sub.w	fp, r2, #4
 8011c52:	d379      	bcc.n	8011d48 <uxr_prepare_output_stream_fragmented+0x150>
 8011c54:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8011c56:	f8cd a000 	str.w	sl, [sp]
 8011c5a:	f1ab 0904 	sub.w	r9, fp, #4
 8011c5e:	eba9 0903 	sub.w	r9, r9, r3
 8011c62:	a808      	add	r0, sp, #32
 8011c64:	465a      	mov	r2, fp
 8011c66:	4641      	mov	r1, r8
 8011c68:	3608      	adds	r6, #8
 8011c6a:	fa1f f989 	uxth.w	r9, r9
 8011c6e:	2300      	movs	r3, #0
 8011c70:	f7fa fba8 	bl	800c3c4 <ucdr_init_buffer_origin_offset>
 8011c74:	455e      	cmp	r6, fp
 8011c76:	bf34      	ite	cc
 8011c78:	2302      	movcc	r3, #2
 8011c7a:	2300      	movcs	r3, #0
 8011c7c:	464a      	mov	r2, r9
 8011c7e:	a808      	add	r0, sp, #32
 8011c80:	210d      	movs	r1, #13
 8011c82:	f7ff fe89 	bl	8011998 <uxr_buffer_submessage_header>
 8011c86:	8920      	ldrh	r0, [r4, #8]
 8011c88:	fbb7 f3f0 	udiv	r3, r7, r0
 8011c8c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8011c90:	fb00 7313 	mls	r3, r0, r3, r7
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	fbb1 f1f0 	udiv	r1, r1, r0
 8011c9a:	fb03 f301 	mul.w	r3, r3, r1
 8011c9e:	4638      	mov	r0, r7
 8011ca0:	f842 b003 	str.w	fp, [r2, r3]
 8011ca4:	2101      	movs	r1, #1
 8011ca6:	f004 fdd1 	bl	801684c <uxr_seq_num_add>
 8011caa:	9a03      	ldr	r2, [sp, #12]
 8011cac:	f10a 0104 	add.w	r1, sl, #4
 8011cb0:	4441      	add	r1, r8
 8011cb2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011cb6:	3a08      	subs	r2, #8
 8011cb8:	4607      	mov	r7, r0
 8011cba:	eba2 020a 	sub.w	r2, r2, sl
 8011cbe:	4640      	mov	r0, r8
 8011cc0:	f7fa fb92 	bl	800c3e8 <ucdr_init_buffer>
 8011cc4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011cc6:	81e7      	strh	r7, [r4, #14]
 8011cc8:	3204      	adds	r2, #4
 8011cca:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8011cce:	bf28      	it	cs
 8011cd0:	2200      	movcs	r2, #0
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	b292      	uxth	r2, r2
 8011cd6:	2107      	movs	r1, #7
 8011cd8:	4640      	mov	r0, r8
 8011cda:	f7ff fe5d 	bl	8011998 <uxr_buffer_submessage_header>
 8011cde:	aa07      	add	r2, sp, #28
 8011ce0:	9904      	ldr	r1, [sp, #16]
 8011ce2:	4628      	mov	r0, r5
 8011ce4:	f7ff f86a 	bl	8010dbc <uxr_init_base_object_request>
 8011ce8:	a907      	add	r1, sp, #28
 8011cea:	4604      	mov	r4, r0
 8011cec:	4640      	mov	r0, r8
 8011cee:	f000 fd17 	bl	8012720 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011cf2:	e9d8 2101 	ldrd	r2, r1, [r8, #4]
 8011cf6:	4640      	mov	r0, r8
 8011cf8:	1a52      	subs	r2, r2, r1
 8011cfa:	f7fa fb75 	bl	800c3e8 <ucdr_init_buffer>
 8011cfe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011d00:	9b05      	ldr	r3, [sp, #20]
 8011d02:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 8011d06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011d08:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 8011d0c:	4640      	mov	r0, r8
 8011d0e:	491b      	ldr	r1, [pc, #108]	; (8011d7c <uxr_prepare_output_stream_fragmented+0x184>)
 8011d10:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
 8011d14:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8011d18:	462a      	mov	r2, r5
 8011d1a:	f7fa fb3b 	bl	800c394 <ucdr_set_on_full_buffer_callback>
 8011d1e:	4620      	mov	r0, r4
 8011d20:	b011      	add	sp, #68	; 0x44
 8011d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d26:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011d28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011d2a:	4628      	mov	r0, r5
 8011d2c:	4798      	blx	r3
 8011d2e:	b920      	cbnz	r0, 8011d3a <uxr_prepare_output_stream_fragmented+0x142>
 8011d30:	2400      	movs	r4, #0
 8011d32:	4620      	mov	r0, r4
 8011d34:	b011      	add	sp, #68	; 0x44
 8011d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	f004 fd66 	bl	801680c <get_available_free_slots>
 8011d40:	2800      	cmp	r0, #0
 8011d42:	f47f af6e 	bne.w	8011c22 <uxr_prepare_output_stream_fragmented+0x2a>
 8011d46:	e7f3      	b.n	8011d30 <uxr_prepare_output_stream_fragmented+0x138>
 8011d48:	4638      	mov	r0, r7
 8011d4a:	2101      	movs	r1, #1
 8011d4c:	f004 fd7e 	bl	801684c <uxr_seq_num_add>
 8011d50:	8922      	ldrh	r2, [r4, #8]
 8011d52:	fbb0 f8f2 	udiv	r8, r0, r2
 8011d56:	fb02 0818 	mls	r8, r2, r8, r0
 8011d5a:	fa1f f888 	uxth.w	r8, r8
 8011d5e:	6863      	ldr	r3, [r4, #4]
 8011d60:	fbb3 f3f2 	udiv	r3, r3, r2
 8011d64:	6822      	ldr	r2, [r4, #0]
 8011d66:	fb08 f803 	mul.w	r8, r8, r3
 8011d6a:	f108 0804 	add.w	r8, r8, #4
 8011d6e:	4490      	add	r8, r2
 8011d70:	7b23      	ldrb	r3, [r4, #12]
 8011d72:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8011d76:	4607      	mov	r7, r0
 8011d78:	e76c      	b.n	8011c54 <uxr_prepare_output_stream_fragmented+0x5c>
 8011d7a:	bf00      	nop
 8011d7c:	08011a89 	.word	0x08011a89

08011d80 <uxr_serialize_message_header>:
 8011d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d82:	b083      	sub	sp, #12
 8011d84:	4616      	mov	r6, r2
 8011d86:	4604      	mov	r4, r0
 8011d88:	9301      	str	r3, [sp, #4]
 8011d8a:	460d      	mov	r5, r1
 8011d8c:	9f08      	ldr	r7, [sp, #32]
 8011d8e:	f7f9 ff67 	bl	800bc60 <ucdr_serialize_uint8_t>
 8011d92:	4631      	mov	r1, r6
 8011d94:	4620      	mov	r0, r4
 8011d96:	f7f9 ff63 	bl	800bc60 <ucdr_serialize_uint8_t>
 8011d9a:	9a01      	ldr	r2, [sp, #4]
 8011d9c:	4620      	mov	r0, r4
 8011d9e:	2101      	movs	r1, #1
 8011da0:	f7f9 ffb2 	bl	800bd08 <ucdr_serialize_endian_uint16_t>
 8011da4:	062b      	lsls	r3, r5, #24
 8011da6:	d501      	bpl.n	8011dac <uxr_serialize_message_header+0x2c>
 8011da8:	b003      	add	sp, #12
 8011daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dac:	4639      	mov	r1, r7
 8011dae:	4620      	mov	r0, r4
 8011db0:	2204      	movs	r2, #4
 8011db2:	b003      	add	sp, #12
 8011db4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011db8:	f003 bede 	b.w	8015b78 <ucdr_serialize_array_uint8_t>

08011dbc <uxr_deserialize_message_header>:
 8011dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dbe:	b083      	sub	sp, #12
 8011dc0:	4616      	mov	r6, r2
 8011dc2:	4604      	mov	r4, r0
 8011dc4:	9301      	str	r3, [sp, #4]
 8011dc6:	460d      	mov	r5, r1
 8011dc8:	9f08      	ldr	r7, [sp, #32]
 8011dca:	f7f9 ff5f 	bl	800bc8c <ucdr_deserialize_uint8_t>
 8011dce:	4631      	mov	r1, r6
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	f7f9 ff5b 	bl	800bc8c <ucdr_deserialize_uint8_t>
 8011dd6:	9a01      	ldr	r2, [sp, #4]
 8011dd8:	4620      	mov	r0, r4
 8011dda:	2101      	movs	r1, #1
 8011ddc:	f7f9 ffe6 	bl	800bdac <ucdr_deserialize_endian_uint16_t>
 8011de0:	f995 3000 	ldrsb.w	r3, [r5]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	da01      	bge.n	8011dec <uxr_deserialize_message_header+0x30>
 8011de8:	b003      	add	sp, #12
 8011dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dec:	4639      	mov	r1, r7
 8011dee:	4620      	mov	r0, r4
 8011df0:	2204      	movs	r2, #4
 8011df2:	b003      	add	sp, #12
 8011df4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011df8:	f003 bf22 	b.w	8015c40 <ucdr_deserialize_array_uint8_t>

08011dfc <uxr_serialize_submessage_header>:
 8011dfc:	b530      	push	{r4, r5, lr}
 8011dfe:	b083      	sub	sp, #12
 8011e00:	4615      	mov	r5, r2
 8011e02:	4604      	mov	r4, r0
 8011e04:	9301      	str	r3, [sp, #4]
 8011e06:	f7f9 ff2b 	bl	800bc60 <ucdr_serialize_uint8_t>
 8011e0a:	4629      	mov	r1, r5
 8011e0c:	4620      	mov	r0, r4
 8011e0e:	f7f9 ff27 	bl	800bc60 <ucdr_serialize_uint8_t>
 8011e12:	9a01      	ldr	r2, [sp, #4]
 8011e14:	4620      	mov	r0, r4
 8011e16:	2101      	movs	r1, #1
 8011e18:	b003      	add	sp, #12
 8011e1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e1e:	f7f9 bf73 	b.w	800bd08 <ucdr_serialize_endian_uint16_t>
 8011e22:	bf00      	nop

08011e24 <uxr_deserialize_submessage_header>:
 8011e24:	b530      	push	{r4, r5, lr}
 8011e26:	b083      	sub	sp, #12
 8011e28:	4615      	mov	r5, r2
 8011e2a:	4604      	mov	r4, r0
 8011e2c:	9301      	str	r3, [sp, #4]
 8011e2e:	f7f9 ff2d 	bl	800bc8c <ucdr_deserialize_uint8_t>
 8011e32:	4629      	mov	r1, r5
 8011e34:	4620      	mov	r0, r4
 8011e36:	f7f9 ff29 	bl	800bc8c <ucdr_deserialize_uint8_t>
 8011e3a:	9a01      	ldr	r2, [sp, #4]
 8011e3c:	4620      	mov	r0, r4
 8011e3e:	2101      	movs	r1, #1
 8011e40:	b003      	add	sp, #12
 8011e42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e46:	f7f9 bfb1 	b.w	800bdac <ucdr_deserialize_endian_uint16_t>
 8011e4a:	bf00      	nop

08011e4c <uxr_serialize_CLIENT_Representation>:
 8011e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e50:	2204      	movs	r2, #4
 8011e52:	460c      	mov	r4, r1
 8011e54:	4605      	mov	r5, r0
 8011e56:	f003 fe8f 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 8011e5a:	1d21      	adds	r1, r4, #4
 8011e5c:	4607      	mov	r7, r0
 8011e5e:	2202      	movs	r2, #2
 8011e60:	4628      	mov	r0, r5
 8011e62:	f003 fe89 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 8011e66:	1da1      	adds	r1, r4, #6
 8011e68:	4007      	ands	r7, r0
 8011e6a:	2202      	movs	r2, #2
 8011e6c:	4628      	mov	r0, r5
 8011e6e:	f003 fe83 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 8011e72:	fa5f f887 	uxtb.w	r8, r7
 8011e76:	2204      	movs	r2, #4
 8011e78:	4607      	mov	r7, r0
 8011e7a:	f104 0108 	add.w	r1, r4, #8
 8011e7e:	4628      	mov	r0, r5
 8011e80:	f003 fe7a 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 8011e84:	ea08 0707 	and.w	r7, r8, r7
 8011e88:	7b21      	ldrb	r1, [r4, #12]
 8011e8a:	4680      	mov	r8, r0
 8011e8c:	4628      	mov	r0, r5
 8011e8e:	f7f9 fee7 	bl	800bc60 <ucdr_serialize_uint8_t>
 8011e92:	ea08 0807 	and.w	r8, r8, r7
 8011e96:	7b61      	ldrb	r1, [r4, #13]
 8011e98:	4607      	mov	r7, r0
 8011e9a:	4628      	mov	r0, r5
 8011e9c:	f7f9 feb0 	bl	800bc00 <ucdr_serialize_bool>
 8011ea0:	7b63      	ldrb	r3, [r4, #13]
 8011ea2:	ea08 0707 	and.w	r7, r8, r7
 8011ea6:	ea07 0600 	and.w	r6, r7, r0
 8011eaa:	b933      	cbnz	r3, 8011eba <uxr_serialize_CLIENT_Representation+0x6e>
 8011eac:	8ba1      	ldrh	r1, [r4, #28]
 8011eae:	4628      	mov	r0, r5
 8011eb0:	f7f9 ff02 	bl	800bcb8 <ucdr_serialize_uint16_t>
 8011eb4:	4030      	ands	r0, r6
 8011eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011eba:	6921      	ldr	r1, [r4, #16]
 8011ebc:	4628      	mov	r0, r5
 8011ebe:	f7f9 ff9f 	bl	800be00 <ucdr_serialize_uint32_t>
 8011ec2:	6923      	ldr	r3, [r4, #16]
 8011ec4:	b1cb      	cbz	r3, 8011efa <uxr_serialize_CLIENT_Representation+0xae>
 8011ec6:	b1d0      	cbz	r0, 8011efe <uxr_serialize_CLIENT_Representation+0xb2>
 8011ec8:	46a0      	mov	r8, r4
 8011eca:	f04f 0900 	mov.w	r9, #0
 8011ece:	e002      	b.n	8011ed6 <uxr_serialize_CLIENT_Representation+0x8a>
 8011ed0:	f108 0808 	add.w	r8, r8, #8
 8011ed4:	b198      	cbz	r0, 8011efe <uxr_serialize_CLIENT_Representation+0xb2>
 8011ed6:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011eda:	4628      	mov	r0, r5
 8011edc:	f003 ff8a 	bl	8015df4 <ucdr_serialize_string>
 8011ee0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011ee4:	4607      	mov	r7, r0
 8011ee6:	4628      	mov	r0, r5
 8011ee8:	f003 ff84 	bl	8015df4 <ucdr_serialize_string>
 8011eec:	6923      	ldr	r3, [r4, #16]
 8011eee:	f109 0901 	add.w	r9, r9, #1
 8011ef2:	4038      	ands	r0, r7
 8011ef4:	4599      	cmp	r9, r3
 8011ef6:	b2c0      	uxtb	r0, r0
 8011ef8:	d3ea      	bcc.n	8011ed0 <uxr_serialize_CLIENT_Representation+0x84>
 8011efa:	4006      	ands	r6, r0
 8011efc:	e7d6      	b.n	8011eac <uxr_serialize_CLIENT_Representation+0x60>
 8011efe:	2600      	movs	r6, #0
 8011f00:	e7d4      	b.n	8011eac <uxr_serialize_CLIENT_Representation+0x60>
 8011f02:	bf00      	nop

08011f04 <uxr_serialize_AGENT_Representation>:
 8011f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f08:	2204      	movs	r2, #4
 8011f0a:	460c      	mov	r4, r1
 8011f0c:	4605      	mov	r5, r0
 8011f0e:	f003 fe33 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 8011f12:	1d21      	adds	r1, r4, #4
 8011f14:	4606      	mov	r6, r0
 8011f16:	2202      	movs	r2, #2
 8011f18:	4628      	mov	r0, r5
 8011f1a:	f003 fe2d 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 8011f1e:	1da1      	adds	r1, r4, #6
 8011f20:	4006      	ands	r6, r0
 8011f22:	2202      	movs	r2, #2
 8011f24:	4628      	mov	r0, r5
 8011f26:	f003 fe27 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 8011f2a:	b2f6      	uxtb	r6, r6
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	7a21      	ldrb	r1, [r4, #8]
 8011f30:	4628      	mov	r0, r5
 8011f32:	401e      	ands	r6, r3
 8011f34:	f7f9 fe64 	bl	800bc00 <ucdr_serialize_bool>
 8011f38:	7a23      	ldrb	r3, [r4, #8]
 8011f3a:	ea00 0706 	and.w	r7, r0, r6
 8011f3e:	b913      	cbnz	r3, 8011f46 <uxr_serialize_AGENT_Representation+0x42>
 8011f40:	4638      	mov	r0, r7
 8011f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f46:	68e1      	ldr	r1, [r4, #12]
 8011f48:	4628      	mov	r0, r5
 8011f4a:	f7f9 ff59 	bl	800be00 <ucdr_serialize_uint32_t>
 8011f4e:	68e3      	ldr	r3, [r4, #12]
 8011f50:	b313      	cbz	r3, 8011f98 <uxr_serialize_AGENT_Representation+0x94>
 8011f52:	b1e8      	cbz	r0, 8011f90 <uxr_serialize_AGENT_Representation+0x8c>
 8011f54:	46a0      	mov	r8, r4
 8011f56:	f04f 0900 	mov.w	r9, #0
 8011f5a:	e002      	b.n	8011f62 <uxr_serialize_AGENT_Representation+0x5e>
 8011f5c:	f108 0808 	add.w	r8, r8, #8
 8011f60:	b1b3      	cbz	r3, 8011f90 <uxr_serialize_AGENT_Representation+0x8c>
 8011f62:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011f66:	4628      	mov	r0, r5
 8011f68:	f003 ff44 	bl	8015df4 <ucdr_serialize_string>
 8011f6c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011f70:	4606      	mov	r6, r0
 8011f72:	4628      	mov	r0, r5
 8011f74:	f003 ff3e 	bl	8015df4 <ucdr_serialize_string>
 8011f78:	68e2      	ldr	r2, [r4, #12]
 8011f7a:	f109 0901 	add.w	r9, r9, #1
 8011f7e:	ea06 0300 	and.w	r3, r6, r0
 8011f82:	4591      	cmp	r9, r2
 8011f84:	b2db      	uxtb	r3, r3
 8011f86:	d3e9      	bcc.n	8011f5c <uxr_serialize_AGENT_Representation+0x58>
 8011f88:	401f      	ands	r7, r3
 8011f8a:	4638      	mov	r0, r7
 8011f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f90:	2700      	movs	r7, #0
 8011f92:	4638      	mov	r0, r7
 8011f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f98:	4007      	ands	r7, r0
 8011f9a:	e7d1      	b.n	8011f40 <uxr_serialize_AGENT_Representation+0x3c>

08011f9c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011f9c:	b570      	push	{r4, r5, r6, lr}
 8011f9e:	460d      	mov	r5, r1
 8011fa0:	7809      	ldrb	r1, [r1, #0]
 8011fa2:	4606      	mov	r6, r0
 8011fa4:	f7f9 fe2c 	bl	800bc00 <ucdr_serialize_bool>
 8011fa8:	782b      	ldrb	r3, [r5, #0]
 8011faa:	4604      	mov	r4, r0
 8011fac:	b94b      	cbnz	r3, 8011fc2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8011fae:	7a29      	ldrb	r1, [r5, #8]
 8011fb0:	4630      	mov	r0, r6
 8011fb2:	f7f9 fe25 	bl	800bc00 <ucdr_serialize_bool>
 8011fb6:	7a2b      	ldrb	r3, [r5, #8]
 8011fb8:	4004      	ands	r4, r0
 8011fba:	b2e4      	uxtb	r4, r4
 8011fbc:	b943      	cbnz	r3, 8011fd0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	bd70      	pop	{r4, r5, r6, pc}
 8011fc2:	6869      	ldr	r1, [r5, #4]
 8011fc4:	4630      	mov	r0, r6
 8011fc6:	f003 ff15 	bl	8015df4 <ucdr_serialize_string>
 8011fca:	4004      	ands	r4, r0
 8011fcc:	b2e4      	uxtb	r4, r4
 8011fce:	e7ee      	b.n	8011fae <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8011fd0:	68e9      	ldr	r1, [r5, #12]
 8011fd2:	4630      	mov	r0, r6
 8011fd4:	f003 ff0e 	bl	8015df4 <ucdr_serialize_string>
 8011fd8:	4004      	ands	r4, r0
 8011fda:	4620      	mov	r0, r4
 8011fdc:	bd70      	pop	{r4, r5, r6, pc}
 8011fde:	bf00      	nop

08011fe0 <uxr_serialize_OBJK_Topic_Binary>:
 8011fe0:	b570      	push	{r4, r5, r6, lr}
 8011fe2:	460d      	mov	r5, r1
 8011fe4:	6809      	ldr	r1, [r1, #0]
 8011fe6:	4606      	mov	r6, r0
 8011fe8:	f003 ff04 	bl	8015df4 <ucdr_serialize_string>
 8011fec:	7929      	ldrb	r1, [r5, #4]
 8011fee:	4604      	mov	r4, r0
 8011ff0:	4630      	mov	r0, r6
 8011ff2:	f7f9 fe05 	bl	800bc00 <ucdr_serialize_bool>
 8011ff6:	792b      	ldrb	r3, [r5, #4]
 8011ff8:	4004      	ands	r4, r0
 8011ffa:	b2e4      	uxtb	r4, r4
 8011ffc:	b943      	cbnz	r3, 8012010 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8011ffe:	7b29      	ldrb	r1, [r5, #12]
 8012000:	4630      	mov	r0, r6
 8012002:	f7f9 fdfd 	bl	800bc00 <ucdr_serialize_bool>
 8012006:	7b2b      	ldrb	r3, [r5, #12]
 8012008:	4004      	ands	r4, r0
 801200a:	b93b      	cbnz	r3, 801201c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801200c:	4620      	mov	r0, r4
 801200e:	bd70      	pop	{r4, r5, r6, pc}
 8012010:	68a9      	ldr	r1, [r5, #8]
 8012012:	4630      	mov	r0, r6
 8012014:	f003 feee 	bl	8015df4 <ucdr_serialize_string>
 8012018:	4004      	ands	r4, r0
 801201a:	e7f0      	b.n	8011ffe <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801201c:	6929      	ldr	r1, [r5, #16]
 801201e:	4630      	mov	r0, r6
 8012020:	f003 fee8 	bl	8015df4 <ucdr_serialize_string>
 8012024:	4004      	ands	r4, r0
 8012026:	b2e4      	uxtb	r4, r4
 8012028:	4620      	mov	r0, r4
 801202a:	bd70      	pop	{r4, r5, r6, pc}

0801202c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801202c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012030:	460c      	mov	r4, r1
 8012032:	7809      	ldrb	r1, [r1, #0]
 8012034:	4606      	mov	r6, r0
 8012036:	f7f9 fde3 	bl	800bc00 <ucdr_serialize_bool>
 801203a:	7823      	ldrb	r3, [r4, #0]
 801203c:	4605      	mov	r5, r0
 801203e:	b96b      	cbnz	r3, 801205c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012040:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8012044:	4630      	mov	r0, r6
 8012046:	f7f9 fddb 	bl	800bc00 <ucdr_serialize_bool>
 801204a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801204e:	4005      	ands	r5, r0
 8012050:	b2ed      	uxtb	r5, r5
 8012052:	2b00      	cmp	r3, #0
 8012054:	d169      	bne.n	801212a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8012056:	4628      	mov	r0, r5
 8012058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801205c:	6861      	ldr	r1, [r4, #4]
 801205e:	4630      	mov	r0, r6
 8012060:	f7f9 fece 	bl	800be00 <ucdr_serialize_uint32_t>
 8012064:	6863      	ldr	r3, [r4, #4]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d06b      	beq.n	8012142 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801206a:	2800      	cmp	r0, #0
 801206c:	d067      	beq.n	801213e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801206e:	68a1      	ldr	r1, [r4, #8]
 8012070:	4630      	mov	r0, r6
 8012072:	f003 febf 	bl	8015df4 <ucdr_serialize_string>
 8012076:	6863      	ldr	r3, [r4, #4]
 8012078:	2b01      	cmp	r3, #1
 801207a:	d953      	bls.n	8012124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801207c:	2800      	cmp	r0, #0
 801207e:	d05e      	beq.n	801213e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012080:	68e1      	ldr	r1, [r4, #12]
 8012082:	4630      	mov	r0, r6
 8012084:	f003 feb6 	bl	8015df4 <ucdr_serialize_string>
 8012088:	6863      	ldr	r3, [r4, #4]
 801208a:	2b02      	cmp	r3, #2
 801208c:	d94a      	bls.n	8012124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801208e:	2800      	cmp	r0, #0
 8012090:	d055      	beq.n	801213e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012092:	6921      	ldr	r1, [r4, #16]
 8012094:	4630      	mov	r0, r6
 8012096:	f003 fead 	bl	8015df4 <ucdr_serialize_string>
 801209a:	6863      	ldr	r3, [r4, #4]
 801209c:	2b03      	cmp	r3, #3
 801209e:	d941      	bls.n	8012124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80120a0:	2800      	cmp	r0, #0
 80120a2:	d04c      	beq.n	801213e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80120a4:	6961      	ldr	r1, [r4, #20]
 80120a6:	4630      	mov	r0, r6
 80120a8:	f003 fea4 	bl	8015df4 <ucdr_serialize_string>
 80120ac:	6863      	ldr	r3, [r4, #4]
 80120ae:	2b04      	cmp	r3, #4
 80120b0:	d938      	bls.n	8012124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80120b2:	2800      	cmp	r0, #0
 80120b4:	d043      	beq.n	801213e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80120b6:	69a1      	ldr	r1, [r4, #24]
 80120b8:	4630      	mov	r0, r6
 80120ba:	f003 fe9b 	bl	8015df4 <ucdr_serialize_string>
 80120be:	6863      	ldr	r3, [r4, #4]
 80120c0:	2b05      	cmp	r3, #5
 80120c2:	d92f      	bls.n	8012124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80120c4:	2800      	cmp	r0, #0
 80120c6:	d03a      	beq.n	801213e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80120c8:	69e1      	ldr	r1, [r4, #28]
 80120ca:	4630      	mov	r0, r6
 80120cc:	f003 fe92 	bl	8015df4 <ucdr_serialize_string>
 80120d0:	6863      	ldr	r3, [r4, #4]
 80120d2:	2b06      	cmp	r3, #6
 80120d4:	d926      	bls.n	8012124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80120d6:	b390      	cbz	r0, 801213e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80120d8:	6a21      	ldr	r1, [r4, #32]
 80120da:	4630      	mov	r0, r6
 80120dc:	f003 fe8a 	bl	8015df4 <ucdr_serialize_string>
 80120e0:	6863      	ldr	r3, [r4, #4]
 80120e2:	2b07      	cmp	r3, #7
 80120e4:	d91e      	bls.n	8012124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80120e6:	b350      	cbz	r0, 801213e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80120e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80120ea:	4630      	mov	r0, r6
 80120ec:	f003 fe82 	bl	8015df4 <ucdr_serialize_string>
 80120f0:	6863      	ldr	r3, [r4, #4]
 80120f2:	2b08      	cmp	r3, #8
 80120f4:	d916      	bls.n	8012124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80120f6:	b310      	cbz	r0, 801213e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80120f8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80120fa:	4630      	mov	r0, r6
 80120fc:	f003 fe7a 	bl	8015df4 <ucdr_serialize_string>
 8012100:	6863      	ldr	r3, [r4, #4]
 8012102:	2b09      	cmp	r3, #9
 8012104:	d90e      	bls.n	8012124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012106:	b1d0      	cbz	r0, 801213e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012108:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801210c:	2709      	movs	r7, #9
 801210e:	e000      	b.n	8012112 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012110:	b1a8      	cbz	r0, 801213e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012112:	f858 1b04 	ldr.w	r1, [r8], #4
 8012116:	4630      	mov	r0, r6
 8012118:	f003 fe6c 	bl	8015df4 <ucdr_serialize_string>
 801211c:	6862      	ldr	r2, [r4, #4]
 801211e:	3701      	adds	r7, #1
 8012120:	4297      	cmp	r7, r2
 8012122:	d3f5      	bcc.n	8012110 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012124:	4005      	ands	r5, r0
 8012126:	b2ed      	uxtb	r5, r5
 8012128:	e78a      	b.n	8012040 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801212a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801212c:	4630      	mov	r0, r6
 801212e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012132:	f7fd fb69 	bl	800f808 <ucdr_serialize_sequence_uint8_t>
 8012136:	4005      	ands	r5, r0
 8012138:	4628      	mov	r0, r5
 801213a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801213e:	2500      	movs	r5, #0
 8012140:	e77e      	b.n	8012040 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012142:	4028      	ands	r0, r5
 8012144:	b2c5      	uxtb	r5, r0
 8012146:	e77b      	b.n	8012040 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012148 <uxr_serialize_OBJK_Publisher_Binary>:
 8012148:	b570      	push	{r4, r5, r6, lr}
 801214a:	460d      	mov	r5, r1
 801214c:	7809      	ldrb	r1, [r1, #0]
 801214e:	4606      	mov	r6, r0
 8012150:	f7f9 fd56 	bl	800bc00 <ucdr_serialize_bool>
 8012154:	782b      	ldrb	r3, [r5, #0]
 8012156:	4604      	mov	r4, r0
 8012158:	b94b      	cbnz	r3, 801216e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801215a:	7a29      	ldrb	r1, [r5, #8]
 801215c:	4630      	mov	r0, r6
 801215e:	f7f9 fd4f 	bl	800bc00 <ucdr_serialize_bool>
 8012162:	7a2b      	ldrb	r3, [r5, #8]
 8012164:	4004      	ands	r4, r0
 8012166:	b2e4      	uxtb	r4, r4
 8012168:	b943      	cbnz	r3, 801217c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801216a:	4620      	mov	r0, r4
 801216c:	bd70      	pop	{r4, r5, r6, pc}
 801216e:	6869      	ldr	r1, [r5, #4]
 8012170:	4630      	mov	r0, r6
 8012172:	f003 fe3f 	bl	8015df4 <ucdr_serialize_string>
 8012176:	4004      	ands	r4, r0
 8012178:	b2e4      	uxtb	r4, r4
 801217a:	e7ee      	b.n	801215a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801217c:	f105 010c 	add.w	r1, r5, #12
 8012180:	4630      	mov	r0, r6
 8012182:	f7ff ff53 	bl	801202c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012186:	4004      	ands	r4, r0
 8012188:	4620      	mov	r0, r4
 801218a:	bd70      	pop	{r4, r5, r6, pc}

0801218c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801218c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012190:	460c      	mov	r4, r1
 8012192:	7809      	ldrb	r1, [r1, #0]
 8012194:	4606      	mov	r6, r0
 8012196:	f7f9 fd33 	bl	800bc00 <ucdr_serialize_bool>
 801219a:	7823      	ldrb	r3, [r4, #0]
 801219c:	4605      	mov	r5, r0
 801219e:	b96b      	cbnz	r3, 80121bc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 80121a0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80121a4:	4630      	mov	r0, r6
 80121a6:	f7f9 fd2b 	bl	800bc00 <ucdr_serialize_bool>
 80121aa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80121ae:	4005      	ands	r5, r0
 80121b0:	b2ed      	uxtb	r5, r5
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d169      	bne.n	801228a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 80121b6:	4628      	mov	r0, r5
 80121b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121bc:	6861      	ldr	r1, [r4, #4]
 80121be:	4630      	mov	r0, r6
 80121c0:	f7f9 fe1e 	bl	800be00 <ucdr_serialize_uint32_t>
 80121c4:	6863      	ldr	r3, [r4, #4]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d06b      	beq.n	80122a2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 80121ca:	2800      	cmp	r0, #0
 80121cc:	d067      	beq.n	801229e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80121ce:	68a1      	ldr	r1, [r4, #8]
 80121d0:	4630      	mov	r0, r6
 80121d2:	f003 fe0f 	bl	8015df4 <ucdr_serialize_string>
 80121d6:	6863      	ldr	r3, [r4, #4]
 80121d8:	2b01      	cmp	r3, #1
 80121da:	d953      	bls.n	8012284 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80121dc:	2800      	cmp	r0, #0
 80121de:	d05e      	beq.n	801229e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80121e0:	68e1      	ldr	r1, [r4, #12]
 80121e2:	4630      	mov	r0, r6
 80121e4:	f003 fe06 	bl	8015df4 <ucdr_serialize_string>
 80121e8:	6863      	ldr	r3, [r4, #4]
 80121ea:	2b02      	cmp	r3, #2
 80121ec:	d94a      	bls.n	8012284 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80121ee:	2800      	cmp	r0, #0
 80121f0:	d055      	beq.n	801229e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80121f2:	6921      	ldr	r1, [r4, #16]
 80121f4:	4630      	mov	r0, r6
 80121f6:	f003 fdfd 	bl	8015df4 <ucdr_serialize_string>
 80121fa:	6863      	ldr	r3, [r4, #4]
 80121fc:	2b03      	cmp	r3, #3
 80121fe:	d941      	bls.n	8012284 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012200:	2800      	cmp	r0, #0
 8012202:	d04c      	beq.n	801229e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012204:	6961      	ldr	r1, [r4, #20]
 8012206:	4630      	mov	r0, r6
 8012208:	f003 fdf4 	bl	8015df4 <ucdr_serialize_string>
 801220c:	6863      	ldr	r3, [r4, #4]
 801220e:	2b04      	cmp	r3, #4
 8012210:	d938      	bls.n	8012284 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012212:	2800      	cmp	r0, #0
 8012214:	d043      	beq.n	801229e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012216:	69a1      	ldr	r1, [r4, #24]
 8012218:	4630      	mov	r0, r6
 801221a:	f003 fdeb 	bl	8015df4 <ucdr_serialize_string>
 801221e:	6863      	ldr	r3, [r4, #4]
 8012220:	2b05      	cmp	r3, #5
 8012222:	d92f      	bls.n	8012284 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012224:	2800      	cmp	r0, #0
 8012226:	d03a      	beq.n	801229e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012228:	69e1      	ldr	r1, [r4, #28]
 801222a:	4630      	mov	r0, r6
 801222c:	f003 fde2 	bl	8015df4 <ucdr_serialize_string>
 8012230:	6863      	ldr	r3, [r4, #4]
 8012232:	2b06      	cmp	r3, #6
 8012234:	d926      	bls.n	8012284 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012236:	b390      	cbz	r0, 801229e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012238:	6a21      	ldr	r1, [r4, #32]
 801223a:	4630      	mov	r0, r6
 801223c:	f003 fdda 	bl	8015df4 <ucdr_serialize_string>
 8012240:	6863      	ldr	r3, [r4, #4]
 8012242:	2b07      	cmp	r3, #7
 8012244:	d91e      	bls.n	8012284 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012246:	b350      	cbz	r0, 801229e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012248:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801224a:	4630      	mov	r0, r6
 801224c:	f003 fdd2 	bl	8015df4 <ucdr_serialize_string>
 8012250:	6863      	ldr	r3, [r4, #4]
 8012252:	2b08      	cmp	r3, #8
 8012254:	d916      	bls.n	8012284 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012256:	b310      	cbz	r0, 801229e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012258:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801225a:	4630      	mov	r0, r6
 801225c:	f003 fdca 	bl	8015df4 <ucdr_serialize_string>
 8012260:	6863      	ldr	r3, [r4, #4]
 8012262:	2b09      	cmp	r3, #9
 8012264:	d90e      	bls.n	8012284 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012266:	b1d0      	cbz	r0, 801229e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012268:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801226c:	2709      	movs	r7, #9
 801226e:	e000      	b.n	8012272 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8012270:	b1a8      	cbz	r0, 801229e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012272:	f858 1b04 	ldr.w	r1, [r8], #4
 8012276:	4630      	mov	r0, r6
 8012278:	f003 fdbc 	bl	8015df4 <ucdr_serialize_string>
 801227c:	6862      	ldr	r2, [r4, #4]
 801227e:	3701      	adds	r7, #1
 8012280:	4297      	cmp	r7, r2
 8012282:	d3f5      	bcc.n	8012270 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012284:	4005      	ands	r5, r0
 8012286:	b2ed      	uxtb	r5, r5
 8012288:	e78a      	b.n	80121a0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801228a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801228c:	4630      	mov	r0, r6
 801228e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012292:	f7fd fab9 	bl	800f808 <ucdr_serialize_sequence_uint8_t>
 8012296:	4005      	ands	r5, r0
 8012298:	4628      	mov	r0, r5
 801229a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801229e:	2500      	movs	r5, #0
 80122a0:	e77e      	b.n	80121a0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80122a2:	4028      	ands	r0, r5
 80122a4:	b2c5      	uxtb	r5, r0
 80122a6:	e77b      	b.n	80121a0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

080122a8 <uxr_serialize_OBJK_Subscriber_Binary>:
 80122a8:	b570      	push	{r4, r5, r6, lr}
 80122aa:	460d      	mov	r5, r1
 80122ac:	7809      	ldrb	r1, [r1, #0]
 80122ae:	4606      	mov	r6, r0
 80122b0:	f7f9 fca6 	bl	800bc00 <ucdr_serialize_bool>
 80122b4:	782b      	ldrb	r3, [r5, #0]
 80122b6:	4604      	mov	r4, r0
 80122b8:	b94b      	cbnz	r3, 80122ce <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80122ba:	7a29      	ldrb	r1, [r5, #8]
 80122bc:	4630      	mov	r0, r6
 80122be:	f7f9 fc9f 	bl	800bc00 <ucdr_serialize_bool>
 80122c2:	7a2b      	ldrb	r3, [r5, #8]
 80122c4:	4004      	ands	r4, r0
 80122c6:	b2e4      	uxtb	r4, r4
 80122c8:	b943      	cbnz	r3, 80122dc <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80122ca:	4620      	mov	r0, r4
 80122cc:	bd70      	pop	{r4, r5, r6, pc}
 80122ce:	6869      	ldr	r1, [r5, #4]
 80122d0:	4630      	mov	r0, r6
 80122d2:	f003 fd8f 	bl	8015df4 <ucdr_serialize_string>
 80122d6:	4004      	ands	r4, r0
 80122d8:	b2e4      	uxtb	r4, r4
 80122da:	e7ee      	b.n	80122ba <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80122dc:	f105 010c 	add.w	r1, r5, #12
 80122e0:	4630      	mov	r0, r6
 80122e2:	f7ff ff53 	bl	801218c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80122e6:	4004      	ands	r4, r0
 80122e8:	4620      	mov	r0, r4
 80122ea:	bd70      	pop	{r4, r5, r6, pc}

080122ec <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80122ec:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80122f0:	4688      	mov	r8, r1
 80122f2:	8809      	ldrh	r1, [r1, #0]
 80122f4:	4681      	mov	r9, r0
 80122f6:	f7f9 fcdf 	bl	800bcb8 <ucdr_serialize_uint16_t>
 80122fa:	f898 1002 	ldrb.w	r1, [r8, #2]
 80122fe:	4606      	mov	r6, r0
 8012300:	4648      	mov	r0, r9
 8012302:	f7f9 fc7d 	bl	800bc00 <ucdr_serialize_bool>
 8012306:	f898 3002 	ldrb.w	r3, [r8, #2]
 801230a:	4030      	ands	r0, r6
 801230c:	b2c5      	uxtb	r5, r0
 801230e:	b9eb      	cbnz	r3, 801234c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012310:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012314:	4648      	mov	r0, r9
 8012316:	f7f9 fc73 	bl	800bc00 <ucdr_serialize_bool>
 801231a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801231e:	4005      	ands	r5, r0
 8012320:	bb7b      	cbnz	r3, 8012382 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012322:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012326:	4648      	mov	r0, r9
 8012328:	f7f9 fc6a 	bl	800bc00 <ucdr_serialize_bool>
 801232c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012330:	4005      	ands	r5, r0
 8012332:	b9f3      	cbnz	r3, 8012372 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012334:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012338:	4648      	mov	r0, r9
 801233a:	f7f9 fc61 	bl	800bc00 <ucdr_serialize_bool>
 801233e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012342:	4005      	ands	r5, r0
 8012344:	b94b      	cbnz	r3, 801235a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012346:	4628      	mov	r0, r5
 8012348:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801234c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012350:	4648      	mov	r0, r9
 8012352:	f7f9 fcb1 	bl	800bcb8 <ucdr_serialize_uint16_t>
 8012356:	4005      	ands	r5, r0
 8012358:	e7da      	b.n	8012310 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801235a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801235e:	4648      	mov	r0, r9
 8012360:	f108 011c 	add.w	r1, r8, #28
 8012364:	f7fd fa50 	bl	800f808 <ucdr_serialize_sequence_uint8_t>
 8012368:	4028      	ands	r0, r5
 801236a:	b2c5      	uxtb	r5, r0
 801236c:	4628      	mov	r0, r5
 801236e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012372:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012376:	4648      	mov	r0, r9
 8012378:	f7f9 fd42 	bl	800be00 <ucdr_serialize_uint32_t>
 801237c:	4028      	ands	r0, r5
 801237e:	b2c5      	uxtb	r5, r0
 8012380:	e7d8      	b.n	8012334 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012382:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012386:	4648      	mov	r0, r9
 8012388:	f7f9 fd3a 	bl	800be00 <ucdr_serialize_uint32_t>
 801238c:	4028      	ands	r0, r5
 801238e:	b2c5      	uxtb	r5, r0
 8012390:	e7c7      	b.n	8012322 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012392:	bf00      	nop

08012394 <uxr_serialize_OBJK_DataReader_Binary>:
 8012394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012396:	2202      	movs	r2, #2
 8012398:	460c      	mov	r4, r1
 801239a:	4606      	mov	r6, r0
 801239c:	f003 fbec 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 80123a0:	78a1      	ldrb	r1, [r4, #2]
 80123a2:	4605      	mov	r5, r0
 80123a4:	4630      	mov	r0, r6
 80123a6:	f7f9 fc2b 	bl	800bc00 <ucdr_serialize_bool>
 80123aa:	78a3      	ldrb	r3, [r4, #2]
 80123ac:	4005      	ands	r5, r0
 80123ae:	b2ed      	uxtb	r5, r5
 80123b0:	b90b      	cbnz	r3, 80123b6 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80123b2:	4628      	mov	r0, r5
 80123b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123b6:	f104 0108 	add.w	r1, r4, #8
 80123ba:	4630      	mov	r0, r6
 80123bc:	f7ff ff96 	bl	80122ec <uxr_serialize_OBJK_Endpoint_QosBinary>
 80123c0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80123c4:	4607      	mov	r7, r0
 80123c6:	4630      	mov	r0, r6
 80123c8:	f7f9 fc1a 	bl	800bc00 <ucdr_serialize_bool>
 80123cc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80123d0:	4038      	ands	r0, r7
 80123d2:	b2c7      	uxtb	r7, r0
 80123d4:	b95b      	cbnz	r3, 80123ee <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80123d6:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 80123da:	4630      	mov	r0, r6
 80123dc:	f7f9 fc10 	bl	800bc00 <ucdr_serialize_bool>
 80123e0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80123e4:	4007      	ands	r7, r0
 80123e6:	b94b      	cbnz	r3, 80123fc <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80123e8:	403d      	ands	r5, r7
 80123ea:	4628      	mov	r0, r5
 80123ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123ee:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 80123f2:	4630      	mov	r0, r6
 80123f4:	f7f9 fdc4 	bl	800bf80 <ucdr_serialize_uint64_t>
 80123f8:	4007      	ands	r7, r0
 80123fa:	e7ec      	b.n	80123d6 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80123fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80123fe:	4630      	mov	r0, r6
 8012400:	f003 fcf8 	bl	8015df4 <ucdr_serialize_string>
 8012404:	4007      	ands	r7, r0
 8012406:	b2ff      	uxtb	r7, r7
 8012408:	e7ee      	b.n	80123e8 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801240a:	bf00      	nop

0801240c <uxr_serialize_OBJK_DataWriter_Binary>:
 801240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801240e:	2202      	movs	r2, #2
 8012410:	460d      	mov	r5, r1
 8012412:	4606      	mov	r6, r0
 8012414:	f003 fbb0 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 8012418:	78a9      	ldrb	r1, [r5, #2]
 801241a:	4604      	mov	r4, r0
 801241c:	4630      	mov	r0, r6
 801241e:	f7f9 fbef 	bl	800bc00 <ucdr_serialize_bool>
 8012422:	78ab      	ldrb	r3, [r5, #2]
 8012424:	4004      	ands	r4, r0
 8012426:	b2e4      	uxtb	r4, r4
 8012428:	b90b      	cbnz	r3, 801242e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801242a:	4620      	mov	r0, r4
 801242c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801242e:	f105 0108 	add.w	r1, r5, #8
 8012432:	4630      	mov	r0, r6
 8012434:	f7ff ff5a 	bl	80122ec <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012438:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 801243c:	4607      	mov	r7, r0
 801243e:	4630      	mov	r0, r6
 8012440:	f7f9 fbde 	bl	800bc00 <ucdr_serialize_bool>
 8012444:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012448:	4007      	ands	r7, r0
 801244a:	b2ff      	uxtb	r7, r7
 801244c:	b913      	cbnz	r3, 8012454 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801244e:	403c      	ands	r4, r7
 8012450:	4620      	mov	r0, r4
 8012452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012454:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8012458:	4630      	mov	r0, r6
 801245a:	f7f9 fd91 	bl	800bf80 <ucdr_serialize_uint64_t>
 801245e:	4007      	ands	r7, r0
 8012460:	e7f5      	b.n	801244e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012462:	bf00      	nop

08012464 <uxr_deserialize_BaseObjectRequest>:
 8012464:	b570      	push	{r4, r5, r6, lr}
 8012466:	2202      	movs	r2, #2
 8012468:	4605      	mov	r5, r0
 801246a:	460e      	mov	r6, r1
 801246c:	f003 fbe8 	bl	8015c40 <ucdr_deserialize_array_uint8_t>
 8012470:	1cb1      	adds	r1, r6, #2
 8012472:	4604      	mov	r4, r0
 8012474:	2202      	movs	r2, #2
 8012476:	4628      	mov	r0, r5
 8012478:	f003 fbe2 	bl	8015c40 <ucdr_deserialize_array_uint8_t>
 801247c:	4020      	ands	r0, r4
 801247e:	b2c0      	uxtb	r0, r0
 8012480:	bd70      	pop	{r4, r5, r6, pc}
 8012482:	bf00      	nop

08012484 <uxr_serialize_ReadSpecification>:
 8012484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012488:	460e      	mov	r6, r1
 801248a:	7809      	ldrb	r1, [r1, #0]
 801248c:	4607      	mov	r7, r0
 801248e:	f7f9 fbe7 	bl	800bc60 <ucdr_serialize_uint8_t>
 8012492:	7871      	ldrb	r1, [r6, #1]
 8012494:	4604      	mov	r4, r0
 8012496:	4638      	mov	r0, r7
 8012498:	f7f9 fbe2 	bl	800bc60 <ucdr_serialize_uint8_t>
 801249c:	78b1      	ldrb	r1, [r6, #2]
 801249e:	4004      	ands	r4, r0
 80124a0:	4638      	mov	r0, r7
 80124a2:	f7f9 fbad 	bl	800bc00 <ucdr_serialize_bool>
 80124a6:	78b3      	ldrb	r3, [r6, #2]
 80124a8:	b2e4      	uxtb	r4, r4
 80124aa:	4004      	ands	r4, r0
 80124ac:	b94b      	cbnz	r3, 80124c2 <uxr_serialize_ReadSpecification+0x3e>
 80124ae:	7a31      	ldrb	r1, [r6, #8]
 80124b0:	4638      	mov	r0, r7
 80124b2:	f7f9 fba5 	bl	800bc00 <ucdr_serialize_bool>
 80124b6:	7a33      	ldrb	r3, [r6, #8]
 80124b8:	4004      	ands	r4, r0
 80124ba:	b943      	cbnz	r3, 80124ce <uxr_serialize_ReadSpecification+0x4a>
 80124bc:	4620      	mov	r0, r4
 80124be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124c2:	6871      	ldr	r1, [r6, #4]
 80124c4:	4638      	mov	r0, r7
 80124c6:	f003 fc95 	bl	8015df4 <ucdr_serialize_string>
 80124ca:	4004      	ands	r4, r0
 80124cc:	e7ef      	b.n	80124ae <uxr_serialize_ReadSpecification+0x2a>
 80124ce:	8971      	ldrh	r1, [r6, #10]
 80124d0:	4638      	mov	r0, r7
 80124d2:	f7f9 fbf1 	bl	800bcb8 <ucdr_serialize_uint16_t>
 80124d6:	89b1      	ldrh	r1, [r6, #12]
 80124d8:	4605      	mov	r5, r0
 80124da:	4638      	mov	r0, r7
 80124dc:	f7f9 fbec 	bl	800bcb8 <ucdr_serialize_uint16_t>
 80124e0:	89f1      	ldrh	r1, [r6, #14]
 80124e2:	4005      	ands	r5, r0
 80124e4:	4638      	mov	r0, r7
 80124e6:	f7f9 fbe7 	bl	800bcb8 <ucdr_serialize_uint16_t>
 80124ea:	8a31      	ldrh	r1, [r6, #16]
 80124ec:	4680      	mov	r8, r0
 80124ee:	4638      	mov	r0, r7
 80124f0:	f7f9 fbe2 	bl	800bcb8 <ucdr_serialize_uint16_t>
 80124f4:	b2ed      	uxtb	r5, r5
 80124f6:	4025      	ands	r5, r4
 80124f8:	ea08 0505 	and.w	r5, r8, r5
 80124fc:	ea00 0405 	and.w	r4, r0, r5
 8012500:	4620      	mov	r0, r4
 8012502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012506:	bf00      	nop

08012508 <uxr_serialize_CREATE_CLIENT_Payload>:
 8012508:	f7ff bca0 	b.w	8011e4c <uxr_serialize_CLIENT_Representation>

0801250c <uxr_serialize_CREATE_Payload>:
 801250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801250e:	2202      	movs	r2, #2
 8012510:	4606      	mov	r6, r0
 8012512:	460d      	mov	r5, r1
 8012514:	f003 fb30 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 8012518:	1ca9      	adds	r1, r5, #2
 801251a:	4604      	mov	r4, r0
 801251c:	2202      	movs	r2, #2
 801251e:	4630      	mov	r0, r6
 8012520:	f003 fb2a 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 8012524:	7929      	ldrb	r1, [r5, #4]
 8012526:	4607      	mov	r7, r0
 8012528:	4630      	mov	r0, r6
 801252a:	f7f9 fb99 	bl	800bc60 <ucdr_serialize_uint8_t>
 801252e:	b328      	cbz	r0, 801257c <uxr_serialize_CREATE_Payload+0x70>
 8012530:	792b      	ldrb	r3, [r5, #4]
 8012532:	403c      	ands	r4, r7
 8012534:	3b01      	subs	r3, #1
 8012536:	b2e4      	uxtb	r4, r4
 8012538:	2b0d      	cmp	r3, #13
 801253a:	d81d      	bhi.n	8012578 <uxr_serialize_CREATE_Payload+0x6c>
 801253c:	e8df f003 	tbb	[pc, r3]
 8012540:	32320753 	.word	0x32320753
 8012544:	07070707 	.word	0x07070707
 8012548:	2121211c 	.word	0x2121211c
 801254c:	684c      	.short	0x684c
 801254e:	7a29      	ldrb	r1, [r5, #8]
 8012550:	4630      	mov	r0, r6
 8012552:	f7f9 fb85 	bl	800bc60 <ucdr_serialize_uint8_t>
 8012556:	4607      	mov	r7, r0
 8012558:	b130      	cbz	r0, 8012568 <uxr_serialize_CREATE_Payload+0x5c>
 801255a:	7a2b      	ldrb	r3, [r5, #8]
 801255c:	2b02      	cmp	r3, #2
 801255e:	d035      	beq.n	80125cc <uxr_serialize_CREATE_Payload+0xc0>
 8012560:	2b03      	cmp	r3, #3
 8012562:	d02b      	beq.n	80125bc <uxr_serialize_CREATE_Payload+0xb0>
 8012564:	2b01      	cmp	r3, #1
 8012566:	d031      	beq.n	80125cc <uxr_serialize_CREATE_Payload+0xc0>
 8012568:	f505 7104 	add.w	r1, r5, #528	; 0x210
 801256c:	4630      	mov	r0, r6
 801256e:	2202      	movs	r2, #2
 8012570:	f003 fb02 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 8012574:	4038      	ands	r0, r7
 8012576:	4004      	ands	r4, r0
 8012578:	4620      	mov	r0, r4
 801257a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801257c:	2400      	movs	r4, #0
 801257e:	4620      	mov	r0, r4
 8012580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012582:	7a29      	ldrb	r1, [r5, #8]
 8012584:	4630      	mov	r0, r6
 8012586:	f7f9 fb6b 	bl	800bc60 <ucdr_serialize_uint8_t>
 801258a:	2800      	cmp	r0, #0
 801258c:	d0f6      	beq.n	801257c <uxr_serialize_CREATE_Payload+0x70>
 801258e:	7a2b      	ldrb	r3, [r5, #8]
 8012590:	2b01      	cmp	r3, #1
 8012592:	d001      	beq.n	8012598 <uxr_serialize_CREATE_Payload+0x8c>
 8012594:	2b02      	cmp	r3, #2
 8012596:	d1ef      	bne.n	8012578 <uxr_serialize_CREATE_Payload+0x6c>
 8012598:	68e9      	ldr	r1, [r5, #12]
 801259a:	4630      	mov	r0, r6
 801259c:	f003 fc2a 	bl	8015df4 <ucdr_serialize_string>
 80125a0:	4004      	ands	r4, r0
 80125a2:	e7e9      	b.n	8012578 <uxr_serialize_CREATE_Payload+0x6c>
 80125a4:	7a29      	ldrb	r1, [r5, #8]
 80125a6:	4630      	mov	r0, r6
 80125a8:	f7f9 fb5a 	bl	800bc60 <ucdr_serialize_uint8_t>
 80125ac:	4607      	mov	r7, r0
 80125ae:	2800      	cmp	r0, #0
 80125b0:	d0da      	beq.n	8012568 <uxr_serialize_CREATE_Payload+0x5c>
 80125b2:	7a2b      	ldrb	r3, [r5, #8]
 80125b4:	2b02      	cmp	r3, #2
 80125b6:	d009      	beq.n	80125cc <uxr_serialize_CREATE_Payload+0xc0>
 80125b8:	2b03      	cmp	r3, #3
 80125ba:	d1d5      	bne.n	8012568 <uxr_serialize_CREATE_Payload+0x5c>
 80125bc:	68ea      	ldr	r2, [r5, #12]
 80125be:	f105 0110 	add.w	r1, r5, #16
 80125c2:	4630      	mov	r0, r6
 80125c4:	f7fd f920 	bl	800f808 <ucdr_serialize_sequence_uint8_t>
 80125c8:	4607      	mov	r7, r0
 80125ca:	e7cd      	b.n	8012568 <uxr_serialize_CREATE_Payload+0x5c>
 80125cc:	68e9      	ldr	r1, [r5, #12]
 80125ce:	4630      	mov	r0, r6
 80125d0:	f003 fc10 	bl	8015df4 <ucdr_serialize_string>
 80125d4:	4607      	mov	r7, r0
 80125d6:	e7c7      	b.n	8012568 <uxr_serialize_CREATE_Payload+0x5c>
 80125d8:	f105 0108 	add.w	r1, r5, #8
 80125dc:	4630      	mov	r0, r6
 80125de:	f7ff fc91 	bl	8011f04 <uxr_serialize_AGENT_Representation>
 80125e2:	4004      	ands	r4, r0
 80125e4:	e7c8      	b.n	8012578 <uxr_serialize_CREATE_Payload+0x6c>
 80125e6:	7a29      	ldrb	r1, [r5, #8]
 80125e8:	4630      	mov	r0, r6
 80125ea:	f7f9 fb39 	bl	800bc60 <ucdr_serialize_uint8_t>
 80125ee:	4607      	mov	r7, r0
 80125f0:	b130      	cbz	r0, 8012600 <uxr_serialize_CREATE_Payload+0xf4>
 80125f2:	7a2b      	ldrb	r3, [r5, #8]
 80125f4:	2b02      	cmp	r3, #2
 80125f6:	d012      	beq.n	801261e <uxr_serialize_CREATE_Payload+0x112>
 80125f8:	2b03      	cmp	r3, #3
 80125fa:	d016      	beq.n	801262a <uxr_serialize_CREATE_Payload+0x11e>
 80125fc:	2b01      	cmp	r3, #1
 80125fe:	d00e      	beq.n	801261e <uxr_serialize_CREATE_Payload+0x112>
 8012600:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 8012604:	4630      	mov	r0, r6
 8012606:	f7f9 fd05 	bl	800c014 <ucdr_serialize_int16_t>
 801260a:	4038      	ands	r0, r7
 801260c:	4004      	ands	r4, r0
 801260e:	e7b3      	b.n	8012578 <uxr_serialize_CREATE_Payload+0x6c>
 8012610:	f105 0108 	add.w	r1, r5, #8
 8012614:	4630      	mov	r0, r6
 8012616:	f7ff fc19 	bl	8011e4c <uxr_serialize_CLIENT_Representation>
 801261a:	4004      	ands	r4, r0
 801261c:	e7ac      	b.n	8012578 <uxr_serialize_CREATE_Payload+0x6c>
 801261e:	68e9      	ldr	r1, [r5, #12]
 8012620:	4630      	mov	r0, r6
 8012622:	f003 fbe7 	bl	8015df4 <ucdr_serialize_string>
 8012626:	4607      	mov	r7, r0
 8012628:	e7ea      	b.n	8012600 <uxr_serialize_CREATE_Payload+0xf4>
 801262a:	68ea      	ldr	r2, [r5, #12]
 801262c:	f105 0110 	add.w	r1, r5, #16
 8012630:	4630      	mov	r0, r6
 8012632:	f7fd f8e9 	bl	800f808 <ucdr_serialize_sequence_uint8_t>
 8012636:	4607      	mov	r7, r0
 8012638:	e7e2      	b.n	8012600 <uxr_serialize_CREATE_Payload+0xf4>
 801263a:	bf00      	nop

0801263c <uxr_serialize_DELETE_Payload>:
 801263c:	b570      	push	{r4, r5, r6, lr}
 801263e:	2202      	movs	r2, #2
 8012640:	4605      	mov	r5, r0
 8012642:	460e      	mov	r6, r1
 8012644:	f003 fa98 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 8012648:	1cb1      	adds	r1, r6, #2
 801264a:	4604      	mov	r4, r0
 801264c:	2202      	movs	r2, #2
 801264e:	4628      	mov	r0, r5
 8012650:	f003 fa92 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 8012654:	4020      	ands	r0, r4
 8012656:	b2c0      	uxtb	r0, r0
 8012658:	bd70      	pop	{r4, r5, r6, pc}
 801265a:	bf00      	nop

0801265c <uxr_deserialize_STATUS_AGENT_Payload>:
 801265c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012660:	4606      	mov	r6, r0
 8012662:	460f      	mov	r7, r1
 8012664:	f7f9 fb12 	bl	800bc8c <ucdr_deserialize_uint8_t>
 8012668:	1c79      	adds	r1, r7, #1
 801266a:	4605      	mov	r5, r0
 801266c:	4630      	mov	r0, r6
 801266e:	f7f9 fb0d 	bl	800bc8c <ucdr_deserialize_uint8_t>
 8012672:	1d39      	adds	r1, r7, #4
 8012674:	4681      	mov	r9, r0
 8012676:	2204      	movs	r2, #4
 8012678:	4630      	mov	r0, r6
 801267a:	f003 fae1 	bl	8015c40 <ucdr_deserialize_array_uint8_t>
 801267e:	f107 0108 	add.w	r1, r7, #8
 8012682:	4604      	mov	r4, r0
 8012684:	2202      	movs	r2, #2
 8012686:	4630      	mov	r0, r6
 8012688:	f003 fada 	bl	8015c40 <ucdr_deserialize_array_uint8_t>
 801268c:	f107 010a 	add.w	r1, r7, #10
 8012690:	4680      	mov	r8, r0
 8012692:	2202      	movs	r2, #2
 8012694:	4630      	mov	r0, r6
 8012696:	f003 fad3 	bl	8015c40 <ucdr_deserialize_array_uint8_t>
 801269a:	ea05 0509 	and.w	r5, r5, r9
 801269e:	b2ed      	uxtb	r5, r5
 80126a0:	402c      	ands	r4, r5
 80126a2:	f107 010c 	add.w	r1, r7, #12
 80126a6:	4605      	mov	r5, r0
 80126a8:	4630      	mov	r0, r6
 80126aa:	f7f9 fabf 	bl	800bc2c <ucdr_deserialize_bool>
 80126ae:	ea08 0404 	and.w	r4, r8, r4
 80126b2:	4025      	ands	r5, r4
 80126b4:	4028      	ands	r0, r5
 80126b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126ba:	bf00      	nop

080126bc <uxr_deserialize_STATUS_Payload>:
 80126bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126c0:	2202      	movs	r2, #2
 80126c2:	4606      	mov	r6, r0
 80126c4:	460f      	mov	r7, r1
 80126c6:	f003 fabb 	bl	8015c40 <ucdr_deserialize_array_uint8_t>
 80126ca:	2202      	movs	r2, #2
 80126cc:	1cb9      	adds	r1, r7, #2
 80126ce:	4605      	mov	r5, r0
 80126d0:	4630      	mov	r0, r6
 80126d2:	f003 fab5 	bl	8015c40 <ucdr_deserialize_array_uint8_t>
 80126d6:	1d39      	adds	r1, r7, #4
 80126d8:	4680      	mov	r8, r0
 80126da:	4630      	mov	r0, r6
 80126dc:	f7f9 fad6 	bl	800bc8c <ucdr_deserialize_uint8_t>
 80126e0:	1d79      	adds	r1, r7, #5
 80126e2:	4604      	mov	r4, r0
 80126e4:	4630      	mov	r0, r6
 80126e6:	f7f9 fad1 	bl	800bc8c <ucdr_deserialize_uint8_t>
 80126ea:	ea05 0508 	and.w	r5, r5, r8
 80126ee:	402c      	ands	r4, r5
 80126f0:	4020      	ands	r0, r4
 80126f2:	b2c0      	uxtb	r0, r0
 80126f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080126f8 <uxr_serialize_READ_DATA_Payload>:
 80126f8:	b570      	push	{r4, r5, r6, lr}
 80126fa:	2202      	movs	r2, #2
 80126fc:	4605      	mov	r5, r0
 80126fe:	460e      	mov	r6, r1
 8012700:	f003 fa3a 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 8012704:	1cb1      	adds	r1, r6, #2
 8012706:	2202      	movs	r2, #2
 8012708:	4604      	mov	r4, r0
 801270a:	4628      	mov	r0, r5
 801270c:	f003 fa34 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 8012710:	1d31      	adds	r1, r6, #4
 8012712:	4004      	ands	r4, r0
 8012714:	4628      	mov	r0, r5
 8012716:	f7ff feb5 	bl	8012484 <uxr_serialize_ReadSpecification>
 801271a:	b2e4      	uxtb	r4, r4
 801271c:	4020      	ands	r0, r4
 801271e:	bd70      	pop	{r4, r5, r6, pc}

08012720 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8012720:	b570      	push	{r4, r5, r6, lr}
 8012722:	2202      	movs	r2, #2
 8012724:	4605      	mov	r5, r0
 8012726:	460e      	mov	r6, r1
 8012728:	f003 fa26 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 801272c:	1cb1      	adds	r1, r6, #2
 801272e:	4604      	mov	r4, r0
 8012730:	2202      	movs	r2, #2
 8012732:	4628      	mov	r0, r5
 8012734:	f003 fa20 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 8012738:	4020      	ands	r0, r4
 801273a:	b2c0      	uxtb	r0, r0
 801273c:	bd70      	pop	{r4, r5, r6, pc}
 801273e:	bf00      	nop

08012740 <uxr_serialize_ACKNACK_Payload>:
 8012740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012742:	460f      	mov	r7, r1
 8012744:	460e      	mov	r6, r1
 8012746:	f837 1b02 	ldrh.w	r1, [r7], #2
 801274a:	4605      	mov	r5, r0
 801274c:	f7f9 fab4 	bl	800bcb8 <ucdr_serialize_uint16_t>
 8012750:	4639      	mov	r1, r7
 8012752:	2202      	movs	r2, #2
 8012754:	4604      	mov	r4, r0
 8012756:	4628      	mov	r0, r5
 8012758:	f003 fa0e 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 801275c:	7931      	ldrb	r1, [r6, #4]
 801275e:	4004      	ands	r4, r0
 8012760:	4628      	mov	r0, r5
 8012762:	f7f9 fa7d 	bl	800bc60 <ucdr_serialize_uint8_t>
 8012766:	b2e4      	uxtb	r4, r4
 8012768:	4020      	ands	r0, r4
 801276a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801276c <uxr_deserialize_ACKNACK_Payload>:
 801276c:	b570      	push	{r4, r5, r6, lr}
 801276e:	4605      	mov	r5, r0
 8012770:	460e      	mov	r6, r1
 8012772:	f7f9 faf1 	bl	800bd58 <ucdr_deserialize_uint16_t>
 8012776:	1cb1      	adds	r1, r6, #2
 8012778:	2202      	movs	r2, #2
 801277a:	4604      	mov	r4, r0
 801277c:	4628      	mov	r0, r5
 801277e:	f003 fa5f 	bl	8015c40 <ucdr_deserialize_array_uint8_t>
 8012782:	1d31      	adds	r1, r6, #4
 8012784:	4004      	ands	r4, r0
 8012786:	4628      	mov	r0, r5
 8012788:	f7f9 fa80 	bl	800bc8c <ucdr_deserialize_uint8_t>
 801278c:	b2e4      	uxtb	r4, r4
 801278e:	4020      	ands	r0, r4
 8012790:	bd70      	pop	{r4, r5, r6, pc}
 8012792:	bf00      	nop

08012794 <uxr_serialize_HEARTBEAT_Payload>:
 8012794:	b570      	push	{r4, r5, r6, lr}
 8012796:	460d      	mov	r5, r1
 8012798:	8809      	ldrh	r1, [r1, #0]
 801279a:	4606      	mov	r6, r0
 801279c:	f7f9 fa8c 	bl	800bcb8 <ucdr_serialize_uint16_t>
 80127a0:	8869      	ldrh	r1, [r5, #2]
 80127a2:	4604      	mov	r4, r0
 80127a4:	4630      	mov	r0, r6
 80127a6:	f7f9 fa87 	bl	800bcb8 <ucdr_serialize_uint16_t>
 80127aa:	7929      	ldrb	r1, [r5, #4]
 80127ac:	4004      	ands	r4, r0
 80127ae:	4630      	mov	r0, r6
 80127b0:	f7f9 fa56 	bl	800bc60 <ucdr_serialize_uint8_t>
 80127b4:	b2e4      	uxtb	r4, r4
 80127b6:	4020      	ands	r0, r4
 80127b8:	bd70      	pop	{r4, r5, r6, pc}
 80127ba:	bf00      	nop

080127bc <uxr_deserialize_HEARTBEAT_Payload>:
 80127bc:	b570      	push	{r4, r5, r6, lr}
 80127be:	4605      	mov	r5, r0
 80127c0:	460e      	mov	r6, r1
 80127c2:	f7f9 fac9 	bl	800bd58 <ucdr_deserialize_uint16_t>
 80127c6:	1cb1      	adds	r1, r6, #2
 80127c8:	4604      	mov	r4, r0
 80127ca:	4628      	mov	r0, r5
 80127cc:	f7f9 fac4 	bl	800bd58 <ucdr_deserialize_uint16_t>
 80127d0:	1d31      	adds	r1, r6, #4
 80127d2:	4004      	ands	r4, r0
 80127d4:	4628      	mov	r0, r5
 80127d6:	f7f9 fa59 	bl	800bc8c <ucdr_deserialize_uint8_t>
 80127da:	b2e4      	uxtb	r4, r4
 80127dc:	4020      	ands	r0, r4
 80127de:	bd70      	pop	{r4, r5, r6, pc}

080127e0 <uxr_serialize_TIMESTAMP_Payload>:
 80127e0:	b570      	push	{r4, r5, r6, lr}
 80127e2:	460d      	mov	r5, r1
 80127e4:	6809      	ldr	r1, [r1, #0]
 80127e6:	4606      	mov	r6, r0
 80127e8:	f7f9 fc3c 	bl	800c064 <ucdr_serialize_int32_t>
 80127ec:	6869      	ldr	r1, [r5, #4]
 80127ee:	4604      	mov	r4, r0
 80127f0:	4630      	mov	r0, r6
 80127f2:	f7f9 fb05 	bl	800be00 <ucdr_serialize_uint32_t>
 80127f6:	4020      	ands	r0, r4
 80127f8:	b2c0      	uxtb	r0, r0
 80127fa:	bd70      	pop	{r4, r5, r6, pc}

080127fc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80127fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012800:	4605      	mov	r5, r0
 8012802:	460e      	mov	r6, r1
 8012804:	f7f9 fc5e 	bl	800c0c4 <ucdr_deserialize_int32_t>
 8012808:	1d31      	adds	r1, r6, #4
 801280a:	4607      	mov	r7, r0
 801280c:	4628      	mov	r0, r5
 801280e:	f7f9 fb57 	bl	800bec0 <ucdr_deserialize_uint32_t>
 8012812:	f106 0108 	add.w	r1, r6, #8
 8012816:	4680      	mov	r8, r0
 8012818:	4628      	mov	r0, r5
 801281a:	f7f9 fc53 	bl	800c0c4 <ucdr_deserialize_int32_t>
 801281e:	f106 010c 	add.w	r1, r6, #12
 8012822:	4604      	mov	r4, r0
 8012824:	4628      	mov	r0, r5
 8012826:	f7f9 fb4b 	bl	800bec0 <ucdr_deserialize_uint32_t>
 801282a:	ea07 0708 	and.w	r7, r7, r8
 801282e:	403c      	ands	r4, r7
 8012830:	f106 0110 	add.w	r1, r6, #16
 8012834:	4004      	ands	r4, r0
 8012836:	4628      	mov	r0, r5
 8012838:	f7f9 fc44 	bl	800c0c4 <ucdr_deserialize_int32_t>
 801283c:	f106 0114 	add.w	r1, r6, #20
 8012840:	4603      	mov	r3, r0
 8012842:	4628      	mov	r0, r5
 8012844:	461d      	mov	r5, r3
 8012846:	f7f9 fb3b 	bl	800bec0 <ucdr_deserialize_uint32_t>
 801284a:	b2e4      	uxtb	r4, r4
 801284c:	402c      	ands	r4, r5
 801284e:	4020      	ands	r0, r4
 8012850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012854 <uxr_serialize_SampleIdentity>:
 8012854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012858:	220c      	movs	r2, #12
 801285a:	4604      	mov	r4, r0
 801285c:	460d      	mov	r5, r1
 801285e:	f003 f98b 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 8012862:	2203      	movs	r2, #3
 8012864:	f105 010c 	add.w	r1, r5, #12
 8012868:	4607      	mov	r7, r0
 801286a:	4620      	mov	r0, r4
 801286c:	f003 f984 	bl	8015b78 <ucdr_serialize_array_uint8_t>
 8012870:	7be9      	ldrb	r1, [r5, #15]
 8012872:	4680      	mov	r8, r0
 8012874:	4620      	mov	r0, r4
 8012876:	f7f9 f9f3 	bl	800bc60 <ucdr_serialize_uint8_t>
 801287a:	6929      	ldr	r1, [r5, #16]
 801287c:	4606      	mov	r6, r0
 801287e:	4620      	mov	r0, r4
 8012880:	f7f9 fbf0 	bl	800c064 <ucdr_serialize_int32_t>
 8012884:	6969      	ldr	r1, [r5, #20]
 8012886:	4603      	mov	r3, r0
 8012888:	4620      	mov	r0, r4
 801288a:	ea07 0708 	and.w	r7, r7, r8
 801288e:	461c      	mov	r4, r3
 8012890:	f7f9 fab6 	bl	800be00 <ucdr_serialize_uint32_t>
 8012894:	403e      	ands	r6, r7
 8012896:	4034      	ands	r4, r6
 8012898:	4020      	ands	r0, r4
 801289a:	b2c0      	uxtb	r0, r0
 801289c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080128a0 <uxr_deserialize_SampleIdentity>:
 80128a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128a4:	220c      	movs	r2, #12
 80128a6:	4604      	mov	r4, r0
 80128a8:	460d      	mov	r5, r1
 80128aa:	f003 f9c9 	bl	8015c40 <ucdr_deserialize_array_uint8_t>
 80128ae:	2203      	movs	r2, #3
 80128b0:	f105 010c 	add.w	r1, r5, #12
 80128b4:	4607      	mov	r7, r0
 80128b6:	4620      	mov	r0, r4
 80128b8:	f003 f9c2 	bl	8015c40 <ucdr_deserialize_array_uint8_t>
 80128bc:	f105 010f 	add.w	r1, r5, #15
 80128c0:	4680      	mov	r8, r0
 80128c2:	4620      	mov	r0, r4
 80128c4:	f7f9 f9e2 	bl	800bc8c <ucdr_deserialize_uint8_t>
 80128c8:	f105 0110 	add.w	r1, r5, #16
 80128cc:	4606      	mov	r6, r0
 80128ce:	4620      	mov	r0, r4
 80128d0:	f7f9 fbf8 	bl	800c0c4 <ucdr_deserialize_int32_t>
 80128d4:	f105 0114 	add.w	r1, r5, #20
 80128d8:	4603      	mov	r3, r0
 80128da:	4620      	mov	r0, r4
 80128dc:	ea07 0708 	and.w	r7, r7, r8
 80128e0:	461c      	mov	r4, r3
 80128e2:	f7f9 faed 	bl	800bec0 <ucdr_deserialize_uint32_t>
 80128e6:	403e      	ands	r6, r7
 80128e8:	4034      	ands	r4, r6
 80128ea:	4020      	ands	r0, r4
 80128ec:	b2c0      	uxtb	r0, r0
 80128ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128f2:	bf00      	nop

080128f4 <rcl_client_get_rmw_handle>:
 80128f4:	b110      	cbz	r0, 80128fc <rcl_client_get_rmw_handle+0x8>
 80128f6:	6800      	ldr	r0, [r0, #0]
 80128f8:	b100      	cbz	r0, 80128fc <rcl_client_get_rmw_handle+0x8>
 80128fa:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80128fc:	4770      	bx	lr
 80128fe:	bf00      	nop

08012900 <rcl_take_response>:
 8012900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012902:	460e      	mov	r6, r1
 8012904:	460c      	mov	r4, r1
 8012906:	4607      	mov	r7, r0
 8012908:	4694      	mov	ip, r2
 801290a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801290c:	b08d      	sub	sp, #52	; 0x34
 801290e:	ad06      	add	r5, sp, #24
 8012910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012912:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012916:	e885 0003 	stmia.w	r5, {r0, r1}
 801291a:	b337      	cbz	r7, 801296a <rcl_take_response+0x6a>
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	b323      	cbz	r3, 801296a <rcl_take_response+0x6a>
 8012920:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8012922:	b310      	cbz	r0, 801296a <rcl_take_response+0x6a>
 8012924:	4662      	mov	r2, ip
 8012926:	b31a      	cbz	r2, 8012970 <rcl_take_response+0x70>
 8012928:	2300      	movs	r3, #0
 801292a:	2600      	movs	r6, #0
 801292c:	2700      	movs	r7, #0
 801292e:	f88d 3007 	strb.w	r3, [sp, #7]
 8012932:	a902      	add	r1, sp, #8
 8012934:	f10d 0307 	add.w	r3, sp, #7
 8012938:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801293c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012940:	f002 fee0 	bl	8015704 <rmw_take_response>
 8012944:	4606      	mov	r6, r0
 8012946:	b9a8      	cbnz	r0, 8012974 <rcl_take_response+0x74>
 8012948:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801294c:	f240 13f5 	movw	r3, #501	; 0x1f5
 8012950:	2a00      	cmp	r2, #0
 8012952:	bf08      	it	eq
 8012954:	461e      	moveq	r6, r3
 8012956:	ad06      	add	r5, sp, #24
 8012958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801295a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801295c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012960:	e884 0003 	stmia.w	r4, {r0, r1}
 8012964:	4630      	mov	r0, r6
 8012966:	b00d      	add	sp, #52	; 0x34
 8012968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801296a:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801296e:	e7f2      	b.n	8012956 <rcl_take_response+0x56>
 8012970:	260b      	movs	r6, #11
 8012972:	e7f0      	b.n	8012956 <rcl_take_response+0x56>
 8012974:	2601      	movs	r6, #1
 8012976:	e7ee      	b.n	8012956 <rcl_take_response+0x56>

08012978 <rcl_convert_rmw_ret_to_rcl_ret>:
 8012978:	280b      	cmp	r0, #11
 801297a:	dc0d      	bgt.n	8012998 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801297c:	2800      	cmp	r0, #0
 801297e:	db09      	blt.n	8012994 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012980:	280b      	cmp	r0, #11
 8012982:	d807      	bhi.n	8012994 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012984:	e8df f000 	tbb	[pc, r0]
 8012988:	07060607 	.word	0x07060607
 801298c:	06060606 	.word	0x06060606
 8012990:	07070606 	.word	0x07070606
 8012994:	2001      	movs	r0, #1
 8012996:	4770      	bx	lr
 8012998:	28cb      	cmp	r0, #203	; 0xcb
 801299a:	bf18      	it	ne
 801299c:	2001      	movne	r0, #1
 801299e:	4770      	bx	lr

080129a0 <rcl_get_zero_initialized_context>:
 80129a0:	4b06      	ldr	r3, [pc, #24]	; (80129bc <rcl_get_zero_initialized_context+0x1c>)
 80129a2:	b430      	push	{r4, r5}
 80129a4:	2400      	movs	r4, #0
 80129a6:	2500      	movs	r5, #0
 80129a8:	e9c3 4502 	strd	r4, r5, [r3, #8]
 80129ac:	4604      	mov	r4, r0
 80129ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80129b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80129b4:	4620      	mov	r0, r4
 80129b6:	bc30      	pop	{r4, r5}
 80129b8:	4770      	bx	lr
 80129ba:	bf00      	nop
 80129bc:	20010288 	.word	0x20010288

080129c0 <rcl_context_is_valid>:
 80129c0:	b150      	cbz	r0, 80129d8 <rcl_context_is_valid+0x18>
 80129c2:	b508      	push	{r3, lr}
 80129c4:	3008      	adds	r0, #8
 80129c6:	2105      	movs	r1, #5
 80129c8:	f002 f912 	bl	8014bf0 <__atomic_load_8>
 80129cc:	ea51 0300 	orrs.w	r3, r1, r0
 80129d0:	bf14      	ite	ne
 80129d2:	2001      	movne	r0, #1
 80129d4:	2000      	moveq	r0, #0
 80129d6:	bd08      	pop	{r3, pc}
 80129d8:	4770      	bx	lr
 80129da:	bf00      	nop

080129dc <__cleanup_context>:
 80129dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80129e0:	b087      	sub	sp, #28
 80129e2:	4606      	mov	r6, r0
 80129e4:	2305      	movs	r3, #5
 80129e6:	3008      	adds	r0, #8
 80129e8:	9300      	str	r3, [sp, #0]
 80129ea:	2200      	movs	r2, #0
 80129ec:	2300      	movs	r3, #0
 80129ee:	f002 f933 	bl	8014c58 <__atomic_store_8>
 80129f2:	6830      	ldr	r0, [r6, #0]
 80129f4:	2800      	cmp	r0, #0
 80129f6:	d056      	beq.n	8012aa6 <__cleanup_context+0xca>
 80129f8:	6947      	ldr	r7, [r0, #20]
 80129fa:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80129fe:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8012a02:	b137      	cbz	r7, 8012a12 <__cleanup_context+0x36>
 8012a04:	3014      	adds	r0, #20
 8012a06:	f7f9 fdb7 	bl	800c578 <rcl_init_options_fini>
 8012a0a:	4607      	mov	r7, r0
 8012a0c:	2800      	cmp	r0, #0
 8012a0e:	d14c      	bne.n	8012aaa <__cleanup_context+0xce>
 8012a10:	6830      	ldr	r0, [r6, #0]
 8012a12:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012a14:	b143      	cbz	r3, 8012a28 <__cleanup_context+0x4c>
 8012a16:	3028      	adds	r0, #40	; 0x28
 8012a18:	f7fb fbbe 	bl	800e198 <rmw_context_fini>
 8012a1c:	b118      	cbz	r0, 8012a26 <__cleanup_context+0x4a>
 8012a1e:	2f00      	cmp	r7, #0
 8012a20:	d046      	beq.n	8012ab0 <__cleanup_context+0xd4>
 8012a22:	f7fa ff53 	bl	800d8cc <rcutils_reset_error>
 8012a26:	6830      	ldr	r0, [r6, #0]
 8012a28:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8012a2c:	f1bc 0f00 	cmp.w	ip, #0
 8012a30:	d01c      	beq.n	8012a6c <__cleanup_context+0x90>
 8012a32:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8012a36:	2a01      	cmp	r2, #1
 8012a38:	f173 0100 	sbcs.w	r1, r3, #0
 8012a3c:	db12      	blt.n	8012a64 <__cleanup_context+0x88>
 8012a3e:	2400      	movs	r4, #0
 8012a40:	2500      	movs	r5, #0
 8012a42:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 8012a46:	4649      	mov	r1, r9
 8012a48:	b308      	cbz	r0, 8012a8e <__cleanup_context+0xb2>
 8012a4a:	47c0      	blx	r8
 8012a4c:	6831      	ldr	r1, [r6, #0]
 8012a4e:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8012a52:	3401      	adds	r4, #1
 8012a54:	f145 0500 	adc.w	r5, r5, #0
 8012a58:	4294      	cmp	r4, r2
 8012a5a:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8012a5e:	eb75 0103 	sbcs.w	r1, r5, r3
 8012a62:	dbee      	blt.n	8012a42 <__cleanup_context+0x66>
 8012a64:	4660      	mov	r0, ip
 8012a66:	4649      	mov	r1, r9
 8012a68:	47c0      	blx	r8
 8012a6a:	6830      	ldr	r0, [r6, #0]
 8012a6c:	4649      	mov	r1, r9
 8012a6e:	47c0      	blx	r8
 8012a70:	4b11      	ldr	r3, [pc, #68]	; (8012ab8 <__cleanup_context+0xdc>)
 8012a72:	2000      	movs	r0, #0
 8012a74:	2100      	movs	r1, #0
 8012a76:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012a7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012a7c:	ac02      	add	r4, sp, #8
 8012a7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012a82:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8012a86:	4638      	mov	r0, r7
 8012a88:	b007      	add	sp, #28
 8012a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a8e:	3401      	adds	r4, #1
 8012a90:	f145 0500 	adc.w	r5, r5, #0
 8012a94:	4294      	cmp	r4, r2
 8012a96:	eb75 0103 	sbcs.w	r1, r5, r3
 8012a9a:	dbd2      	blt.n	8012a42 <__cleanup_context+0x66>
 8012a9c:	4660      	mov	r0, ip
 8012a9e:	4649      	mov	r1, r9
 8012aa0:	47c0      	blx	r8
 8012aa2:	6830      	ldr	r0, [r6, #0]
 8012aa4:	e7e2      	b.n	8012a6c <__cleanup_context+0x90>
 8012aa6:	4607      	mov	r7, r0
 8012aa8:	e7e2      	b.n	8012a70 <__cleanup_context+0x94>
 8012aaa:	f7fa ff0f 	bl	800d8cc <rcutils_reset_error>
 8012aae:	e7af      	b.n	8012a10 <__cleanup_context+0x34>
 8012ab0:	f7ff ff62 	bl	8012978 <rcl_convert_rmw_ret_to_rcl_ret>
 8012ab4:	4607      	mov	r7, r0
 8012ab6:	e7b4      	b.n	8012a22 <__cleanup_context+0x46>
 8012ab8:	20010288 	.word	0x20010288

08012abc <rcl_expand_topic_name>:
 8012abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ac0:	b08b      	sub	sp, #44	; 0x2c
 8012ac2:	9306      	str	r3, [sp, #24]
 8012ac4:	2800      	cmp	r0, #0
 8012ac6:	f000 80d2 	beq.w	8012c6e <rcl_expand_topic_name+0x1b2>
 8012aca:	460e      	mov	r6, r1
 8012acc:	2900      	cmp	r1, #0
 8012ace:	f000 80ce 	beq.w	8012c6e <rcl_expand_topic_name+0x1b2>
 8012ad2:	4617      	mov	r7, r2
 8012ad4:	2a00      	cmp	r2, #0
 8012ad6:	f000 80ca 	beq.w	8012c6e <rcl_expand_topic_name+0x1b2>
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	f000 80c7 	beq.w	8012c6e <rcl_expand_topic_name+0x1b2>
 8012ae0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	f000 80c3 	beq.w	8012c6e <rcl_expand_topic_name+0x1b2>
 8012ae8:	a909      	add	r1, sp, #36	; 0x24
 8012aea:	2200      	movs	r2, #0
 8012aec:	4680      	mov	r8, r0
 8012aee:	f001 f9a1 	bl	8013e34 <rcl_validate_topic_name>
 8012af2:	4604      	mov	r4, r0
 8012af4:	2800      	cmp	r0, #0
 8012af6:	f040 80b6 	bne.w	8012c66 <rcl_expand_topic_name+0x1aa>
 8012afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	f040 80bf 	bne.w	8012c80 <rcl_expand_topic_name+0x1c4>
 8012b02:	4602      	mov	r2, r0
 8012b04:	a909      	add	r1, sp, #36	; 0x24
 8012b06:	4630      	mov	r0, r6
 8012b08:	f002 fb3a 	bl	8015180 <rmw_validate_node_name>
 8012b0c:	2800      	cmp	r0, #0
 8012b0e:	f040 80b3 	bne.w	8012c78 <rcl_expand_topic_name+0x1bc>
 8012b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b14:	2a00      	cmp	r2, #0
 8012b16:	f040 80b8 	bne.w	8012c8a <rcl_expand_topic_name+0x1ce>
 8012b1a:	a909      	add	r1, sp, #36	; 0x24
 8012b1c:	4638      	mov	r0, r7
 8012b1e:	f002 fb11 	bl	8015144 <rmw_validate_namespace>
 8012b22:	2800      	cmp	r0, #0
 8012b24:	f040 80a8 	bne.w	8012c78 <rcl_expand_topic_name+0x1bc>
 8012b28:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012b2a:	2c00      	cmp	r4, #0
 8012b2c:	f040 80f6 	bne.w	8012d1c <rcl_expand_topic_name+0x260>
 8012b30:	217b      	movs	r1, #123	; 0x7b
 8012b32:	4640      	mov	r0, r8
 8012b34:	f004 fade 	bl	80170f4 <strchr>
 8012b38:	f898 3000 	ldrb.w	r3, [r8]
 8012b3c:	2b2f      	cmp	r3, #47	; 0x2f
 8012b3e:	4605      	mov	r5, r0
 8012b40:	f000 80c4 	beq.w	8012ccc <rcl_expand_topic_name+0x210>
 8012b44:	2b7e      	cmp	r3, #126	; 0x7e
 8012b46:	d16f      	bne.n	8012c28 <rcl_expand_topic_name+0x16c>
 8012b48:	4638      	mov	r0, r7
 8012b4a:	f7ed fb4b 	bl	80001e4 <strlen>
 8012b4e:	4b87      	ldr	r3, [pc, #540]	; (8012d6c <rcl_expand_topic_name+0x2b0>)
 8012b50:	4987      	ldr	r1, [pc, #540]	; (8012d70 <rcl_expand_topic_name+0x2b4>)
 8012b52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012b54:	9604      	str	r6, [sp, #16]
 8012b56:	2801      	cmp	r0, #1
 8012b58:	bf0c      	ite	eq
 8012b5a:	4618      	moveq	r0, r3
 8012b5c:	4608      	movne	r0, r1
 8012b5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012b62:	e9cd 2300 	strd	r2, r3, [sp]
 8012b66:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8012b6a:	f108 0101 	add.w	r1, r8, #1
 8012b6e:	9105      	str	r1, [sp, #20]
 8012b70:	ab14      	add	r3, sp, #80	; 0x50
 8012b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012b74:	f002 f928 	bl	8014dc8 <rcutils_format_string_limit>
 8012b78:	4682      	mov	sl, r0
 8012b7a:	2800      	cmp	r0, #0
 8012b7c:	f000 80d0 	beq.w	8012d20 <rcl_expand_topic_name+0x264>
 8012b80:	2d00      	cmp	r5, #0
 8012b82:	f000 80aa 	beq.w	8012cda <rcl_expand_topic_name+0x21e>
 8012b86:	217b      	movs	r1, #123	; 0x7b
 8012b88:	f004 fab4 	bl	80170f4 <strchr>
 8012b8c:	46d1      	mov	r9, sl
 8012b8e:	4605      	mov	r5, r0
 8012b90:	9407      	str	r4, [sp, #28]
 8012b92:	46d3      	mov	fp, sl
 8012b94:	464c      	mov	r4, r9
 8012b96:	2d00      	cmp	r5, #0
 8012b98:	f000 80c7 	beq.w	8012d2a <rcl_expand_topic_name+0x26e>
 8012b9c:	217d      	movs	r1, #125	; 0x7d
 8012b9e:	4620      	mov	r0, r4
 8012ba0:	f004 faa8 	bl	80170f4 <strchr>
 8012ba4:	eba0 0905 	sub.w	r9, r0, r5
 8012ba8:	f109 0a01 	add.w	sl, r9, #1
 8012bac:	4871      	ldr	r0, [pc, #452]	; (8012d74 <rcl_expand_topic_name+0x2b8>)
 8012bae:	4652      	mov	r2, sl
 8012bb0:	4629      	mov	r1, r5
 8012bb2:	f004 fab4 	bl	801711e <strncmp>
 8012bb6:	2800      	cmp	r0, #0
 8012bb8:	f000 808d 	beq.w	8012cd6 <rcl_expand_topic_name+0x21a>
 8012bbc:	486e      	ldr	r0, [pc, #440]	; (8012d78 <rcl_expand_topic_name+0x2bc>)
 8012bbe:	4652      	mov	r2, sl
 8012bc0:	4629      	mov	r1, r5
 8012bc2:	f004 faac 	bl	801711e <strncmp>
 8012bc6:	b130      	cbz	r0, 8012bd6 <rcl_expand_topic_name+0x11a>
 8012bc8:	486c      	ldr	r0, [pc, #432]	; (8012d7c <rcl_expand_topic_name+0x2c0>)
 8012bca:	4652      	mov	r2, sl
 8012bcc:	4629      	mov	r1, r5
 8012bce:	f004 faa6 	bl	801711e <strncmp>
 8012bd2:	2800      	cmp	r0, #0
 8012bd4:	d15b      	bne.n	8012c8e <rcl_expand_topic_name+0x1d2>
 8012bd6:	46b9      	mov	r9, r7
 8012bd8:	ab16      	add	r3, sp, #88	; 0x58
 8012bda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012bde:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012be2:	ab14      	add	r3, sp, #80	; 0x50
 8012be4:	4628      	mov	r0, r5
 8012be6:	cb0c      	ldmia	r3, {r2, r3}
 8012be8:	4651      	mov	r1, sl
 8012bea:	f002 fa39 	bl	8015060 <rcutils_strndup>
 8012bee:	4605      	mov	r5, r0
 8012bf0:	2800      	cmp	r0, #0
 8012bf2:	f000 80a4 	beq.w	8012d3e <rcl_expand_topic_name+0x282>
 8012bf6:	464a      	mov	r2, r9
 8012bf8:	4620      	mov	r0, r4
 8012bfa:	ab14      	add	r3, sp, #80	; 0x50
 8012bfc:	4629      	mov	r1, r5
 8012bfe:	f002 f935 	bl	8014e6c <rcutils_repl_str>
 8012c02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012c04:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012c06:	4604      	mov	r4, r0
 8012c08:	4628      	mov	r0, r5
 8012c0a:	4798      	blx	r3
 8012c0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012c0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012c10:	4658      	mov	r0, fp
 8012c12:	4798      	blx	r3
 8012c14:	2c00      	cmp	r4, #0
 8012c16:	f000 8083 	beq.w	8012d20 <rcl_expand_topic_name+0x264>
 8012c1a:	217b      	movs	r1, #123	; 0x7b
 8012c1c:	4620      	mov	r0, r4
 8012c1e:	f004 fa69 	bl	80170f4 <strchr>
 8012c22:	46a3      	mov	fp, r4
 8012c24:	4605      	mov	r5, r0
 8012c26:	e7b6      	b.n	8012b96 <rcl_expand_topic_name+0xda>
 8012c28:	2800      	cmp	r0, #0
 8012c2a:	d151      	bne.n	8012cd0 <rcl_expand_topic_name+0x214>
 8012c2c:	4638      	mov	r0, r7
 8012c2e:	f7ed fad9 	bl	80001e4 <strlen>
 8012c32:	4b53      	ldr	r3, [pc, #332]	; (8012d80 <rcl_expand_topic_name+0x2c4>)
 8012c34:	4a53      	ldr	r2, [pc, #332]	; (8012d84 <rcl_expand_topic_name+0x2c8>)
 8012c36:	f8cd 8010 	str.w	r8, [sp, #16]
 8012c3a:	2801      	cmp	r0, #1
 8012c3c:	bf0c      	ite	eq
 8012c3e:	4618      	moveq	r0, r3
 8012c40:	4610      	movne	r0, r2
 8012c42:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012c44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012c48:	e9cd 3200 	strd	r3, r2, [sp]
 8012c4c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8012c50:	ab14      	add	r3, sp, #80	; 0x50
 8012c52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012c54:	f002 f8b8 	bl	8014dc8 <rcutils_format_string_limit>
 8012c58:	4682      	mov	sl, r0
 8012c5a:	4653      	mov	r3, sl
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d05f      	beq.n	8012d20 <rcl_expand_topic_name+0x264>
 8012c60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012c62:	f8c3 a000 	str.w	sl, [r3]
 8012c66:	4620      	mov	r0, r4
 8012c68:	b00b      	add	sp, #44	; 0x2c
 8012c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c6e:	240b      	movs	r4, #11
 8012c70:	4620      	mov	r0, r4
 8012c72:	b00b      	add	sp, #44	; 0x2c
 8012c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c78:	f7ff fe7e 	bl	8012978 <rcl_convert_rmw_ret_to_rcl_ret>
 8012c7c:	4604      	mov	r4, r0
 8012c7e:	e7f2      	b.n	8012c66 <rcl_expand_topic_name+0x1aa>
 8012c80:	2467      	movs	r4, #103	; 0x67
 8012c82:	4620      	mov	r0, r4
 8012c84:	b00b      	add	sp, #44	; 0x2c
 8012c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c8a:	24c9      	movs	r4, #201	; 0xc9
 8012c8c:	e7eb      	b.n	8012c66 <rcl_expand_topic_name+0x1aa>
 8012c8e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8012c92:	9806      	ldr	r0, [sp, #24]
 8012c94:	1c69      	adds	r1, r5, #1
 8012c96:	f7fa ff35 	bl	800db04 <rcutils_string_map_getn>
 8012c9a:	4681      	mov	r9, r0
 8012c9c:	2800      	cmp	r0, #0
 8012c9e:	d19b      	bne.n	8012bd8 <rcl_expand_topic_name+0x11c>
 8012ca0:	aa16      	add	r2, sp, #88	; 0x58
 8012ca2:	ca07      	ldmia	r2, {r0, r1, r2}
 8012ca4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012ca6:	f8c3 9000 	str.w	r9, [r3]
 8012caa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012cae:	ab14      	add	r3, sp, #80	; 0x50
 8012cb0:	cb0c      	ldmia	r3, {r2, r3}
 8012cb2:	4651      	mov	r1, sl
 8012cb4:	4628      	mov	r0, r5
 8012cb6:	f002 f9d3 	bl	8015060 <rcutils_strndup>
 8012cba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012cbc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012cbe:	4798      	blx	r3
 8012cc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012cc2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012cc4:	4658      	mov	r0, fp
 8012cc6:	4798      	blx	r3
 8012cc8:	2469      	movs	r4, #105	; 0x69
 8012cca:	e7cc      	b.n	8012c66 <rcl_expand_topic_name+0x1aa>
 8012ccc:	2800      	cmp	r0, #0
 8012cce:	d03e      	beq.n	8012d4e <rcl_expand_topic_name+0x292>
 8012cd0:	46c1      	mov	r9, r8
 8012cd2:	46a2      	mov	sl, r4
 8012cd4:	e75c      	b.n	8012b90 <rcl_expand_topic_name+0xd4>
 8012cd6:	46b1      	mov	r9, r6
 8012cd8:	e77e      	b.n	8012bd8 <rcl_expand_topic_name+0x11c>
 8012cda:	f89a 3000 	ldrb.w	r3, [sl]
 8012cde:	2b2f      	cmp	r3, #47	; 0x2f
 8012ce0:	d0be      	beq.n	8012c60 <rcl_expand_topic_name+0x1a4>
 8012ce2:	4638      	mov	r0, r7
 8012ce4:	f7ed fa7e 	bl	80001e4 <strlen>
 8012ce8:	4b25      	ldr	r3, [pc, #148]	; (8012d80 <rcl_expand_topic_name+0x2c4>)
 8012cea:	4926      	ldr	r1, [pc, #152]	; (8012d84 <rcl_expand_topic_name+0x2c8>)
 8012cec:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012cee:	f8cd a010 	str.w	sl, [sp, #16]
 8012cf2:	2801      	cmp	r0, #1
 8012cf4:	bf0c      	ite	eq
 8012cf6:	4618      	moveq	r0, r3
 8012cf8:	4608      	movne	r0, r1
 8012cfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012cfe:	e9cd 2300 	strd	r2, r3, [sp]
 8012d02:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8012d06:	ab14      	add	r3, sp, #80	; 0x50
 8012d08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012d0a:	f002 f85d 	bl	8014dc8 <rcutils_format_string_limit>
 8012d0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012d10:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012d12:	4603      	mov	r3, r0
 8012d14:	4650      	mov	r0, sl
 8012d16:	469a      	mov	sl, r3
 8012d18:	4790      	blx	r2
 8012d1a:	e79e      	b.n	8012c5a <rcl_expand_topic_name+0x19e>
 8012d1c:	24ca      	movs	r4, #202	; 0xca
 8012d1e:	e7a2      	b.n	8012c66 <rcl_expand_topic_name+0x1aa>
 8012d20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012d22:	2300      	movs	r3, #0
 8012d24:	6013      	str	r3, [r2, #0]
 8012d26:	240a      	movs	r4, #10
 8012d28:	e79d      	b.n	8012c66 <rcl_expand_topic_name+0x1aa>
 8012d2a:	465b      	mov	r3, fp
 8012d2c:	9c07      	ldr	r4, [sp, #28]
 8012d2e:	46da      	mov	sl, fp
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d1d2      	bne.n	8012cda <rcl_expand_topic_name+0x21e>
 8012d34:	f898 3000 	ldrb.w	r3, [r8]
 8012d38:	2b2f      	cmp	r3, #47	; 0x2f
 8012d3a:	d091      	beq.n	8012c60 <rcl_expand_topic_name+0x1a4>
 8012d3c:	e776      	b.n	8012c2c <rcl_expand_topic_name+0x170>
 8012d3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012d40:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012d42:	601d      	str	r5, [r3, #0]
 8012d44:	4658      	mov	r0, fp
 8012d46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012d48:	4798      	blx	r3
 8012d4a:	240a      	movs	r4, #10
 8012d4c:	e78b      	b.n	8012c66 <rcl_expand_topic_name+0x1aa>
 8012d4e:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8012d52:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012d56:	ab14      	add	r3, sp, #80	; 0x50
 8012d58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012d5a:	4640      	mov	r0, r8
 8012d5c:	f002 f95e 	bl	801501c <rcutils_strdup>
 8012d60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012d62:	2800      	cmp	r0, #0
 8012d64:	bf08      	it	eq
 8012d66:	240a      	moveq	r4, #10
 8012d68:	6018      	str	r0, [r3, #0]
 8012d6a:	e77c      	b.n	8012c66 <rcl_expand_topic_name+0x1aa>
 8012d6c:	08019598 	.word	0x08019598
 8012d70:	08019848 	.word	0x08019848
 8012d74:	08019850 	.word	0x08019850
 8012d78:	08019858 	.word	0x08019858
 8012d7c:	08019860 	.word	0x08019860
 8012d80:	080195a8 	.word	0x080195a8
 8012d84:	08019584 	.word	0x08019584

08012d88 <rcl_get_default_topic_name_substitutions>:
 8012d88:	2800      	cmp	r0, #0
 8012d8a:	bf0c      	ite	eq
 8012d8c:	200b      	moveq	r0, #11
 8012d8e:	2000      	movne	r0, #0
 8012d90:	4770      	bx	lr
 8012d92:	bf00      	nop

08012d94 <rcl_init>:
 8012d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d98:	1e07      	subs	r7, r0, #0
 8012d9a:	b0a1      	sub	sp, #132	; 0x84
 8012d9c:	4688      	mov	r8, r1
 8012d9e:	4692      	mov	sl, r2
 8012da0:	4699      	mov	r9, r3
 8012da2:	f340 8096 	ble.w	8012ed2 <rcl_init+0x13e>
 8012da6:	2900      	cmp	r1, #0
 8012da8:	f000 8096 	beq.w	8012ed8 <rcl_init+0x144>
 8012dac:	1f0d      	subs	r5, r1, #4
 8012dae:	2400      	movs	r4, #0
 8012db0:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8012db4:	3401      	adds	r4, #1
 8012db6:	2e00      	cmp	r6, #0
 8012db8:	f000 808e 	beq.w	8012ed8 <rcl_init+0x144>
 8012dbc:	42a7      	cmp	r7, r4
 8012dbe:	d1f7      	bne.n	8012db0 <rcl_init+0x1c>
 8012dc0:	f1ba 0f00 	cmp.w	sl, #0
 8012dc4:	f000 8088 	beq.w	8012ed8 <rcl_init+0x144>
 8012dc8:	f8da 4000 	ldr.w	r4, [sl]
 8012dcc:	2c00      	cmp	r4, #0
 8012dce:	f000 8083 	beq.w	8012ed8 <rcl_init+0x144>
 8012dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012dd4:	ad1b      	add	r5, sp, #108	; 0x6c
 8012dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012dd8:	6823      	ldr	r3, [r4, #0]
 8012dda:	602b      	str	r3, [r5, #0]
 8012ddc:	a81b      	add	r0, sp, #108	; 0x6c
 8012dde:	f7fa fc83 	bl	800d6e8 <rcutils_allocator_is_valid>
 8012de2:	2800      	cmp	r0, #0
 8012de4:	d078      	beq.n	8012ed8 <rcl_init+0x144>
 8012de6:	f1b9 0f00 	cmp.w	r9, #0
 8012dea:	d075      	beq.n	8012ed8 <rcl_init+0x144>
 8012dec:	f8d9 3000 	ldr.w	r3, [r9]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d176      	bne.n	8012ee2 <rcl_init+0x14e>
 8012df4:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8012df8:	2178      	movs	r1, #120	; 0x78
 8012dfa:	2001      	movs	r0, #1
 8012dfc:	4798      	blx	r3
 8012dfe:	4604      	mov	r4, r0
 8012e00:	f8c9 0000 	str.w	r0, [r9]
 8012e04:	2800      	cmp	r0, #0
 8012e06:	f000 80c6 	beq.w	8012f96 <rcl_init+0x202>
 8012e0a:	a804      	add	r0, sp, #16
 8012e0c:	f002 f944 	bl	8015098 <rmw_get_zero_initialized_context>
 8012e10:	a904      	add	r1, sp, #16
 8012e12:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8012e16:	2250      	movs	r2, #80	; 0x50
 8012e18:	ac1b      	add	r4, sp, #108	; 0x6c
 8012e1a:	f003 ffaf 	bl	8016d7c <memcpy>
 8012e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012e20:	f8d9 5000 	ldr.w	r5, [r9]
 8012e24:	6826      	ldr	r6, [r4, #0]
 8012e26:	462c      	mov	r4, r5
 8012e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e2a:	f105 0114 	add.w	r1, r5, #20
 8012e2e:	6026      	str	r6, [r4, #0]
 8012e30:	4650      	mov	r0, sl
 8012e32:	f7f9 fbc5 	bl	800c5c0 <rcl_init_options_copy>
 8012e36:	4606      	mov	r6, r0
 8012e38:	2800      	cmp	r0, #0
 8012e3a:	d143      	bne.n	8012ec4 <rcl_init+0x130>
 8012e3c:	f8d9 b000 	ldr.w	fp, [r9]
 8012e40:	463c      	mov	r4, r7
 8012e42:	17fd      	asrs	r5, r7, #31
 8012e44:	e9cb 4506 	strd	r4, r5, [fp, #24]
 8012e48:	f8cb 0020 	str.w	r0, [fp, #32]
 8012e4c:	2f00      	cmp	r7, #0
 8012e4e:	d04d      	beq.n	8012eec <rcl_init+0x158>
 8012e50:	f1b8 0f00 	cmp.w	r8, #0
 8012e54:	d04a      	beq.n	8012eec <rcl_init+0x158>
 8012e56:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8012e5a:	4638      	mov	r0, r7
 8012e5c:	2104      	movs	r1, #4
 8012e5e:	4798      	blx	r3
 8012e60:	f8d9 a000 	ldr.w	sl, [r9]
 8012e64:	f8cb 0020 	str.w	r0, [fp, #32]
 8012e68:	f8da 3020 	ldr.w	r3, [sl, #32]
 8012e6c:	b34b      	cbz	r3, 8012ec2 <rcl_init+0x12e>
 8012e6e:	2f01      	cmp	r7, #1
 8012e70:	f175 0300 	sbcs.w	r3, r5, #0
 8012e74:	db3a      	blt.n	8012eec <rcl_init+0x158>
 8012e76:	f1a8 0804 	sub.w	r8, r8, #4
 8012e7a:	2600      	movs	r6, #0
 8012e7c:	2700      	movs	r7, #0
 8012e7e:	e00c      	b.n	8012e9a <rcl_init+0x106>
 8012e80:	f8d8 1000 	ldr.w	r1, [r8]
 8012e84:	f003 ff7a 	bl	8016d7c <memcpy>
 8012e88:	3601      	adds	r6, #1
 8012e8a:	f147 0700 	adc.w	r7, r7, #0
 8012e8e:	42bd      	cmp	r5, r7
 8012e90:	bf08      	it	eq
 8012e92:	42b4      	cmpeq	r4, r6
 8012e94:	d02a      	beq.n	8012eec <rcl_init+0x158>
 8012e96:	f8d9 a000 	ldr.w	sl, [r9]
 8012e9a:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8012e9e:	f7ed f9a1 	bl	80001e4 <strlen>
 8012ea2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012ea4:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8012ea6:	f8da a020 	ldr.w	sl, [sl, #32]
 8012eaa:	9003      	str	r0, [sp, #12]
 8012eac:	4798      	blx	r3
 8012eae:	f8d9 1000 	ldr.w	r1, [r9]
 8012eb2:	9a03      	ldr	r2, [sp, #12]
 8012eb4:	6a09      	ldr	r1, [r1, #32]
 8012eb6:	00b3      	lsls	r3, r6, #2
 8012eb8:	f84a 0003 	str.w	r0, [sl, r3]
 8012ebc:	58c8      	ldr	r0, [r1, r3]
 8012ebe:	2800      	cmp	r0, #0
 8012ec0:	d1de      	bne.n	8012e80 <rcl_init+0xec>
 8012ec2:	260a      	movs	r6, #10
 8012ec4:	4648      	mov	r0, r9
 8012ec6:	f7ff fd89 	bl	80129dc <__cleanup_context>
 8012eca:	4630      	mov	r0, r6
 8012ecc:	b021      	add	sp, #132	; 0x84
 8012ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ed2:	2900      	cmp	r1, #0
 8012ed4:	f43f af74 	beq.w	8012dc0 <rcl_init+0x2c>
 8012ed8:	260b      	movs	r6, #11
 8012eda:	4630      	mov	r0, r6
 8012edc:	b021      	add	sp, #132	; 0x84
 8012ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ee2:	2664      	movs	r6, #100	; 0x64
 8012ee4:	4630      	mov	r0, r6
 8012ee6:	b021      	add	sp, #132	; 0x84
 8012ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eec:	2605      	movs	r6, #5
 8012eee:	2300      	movs	r3, #0
 8012ef0:	4832      	ldr	r0, [pc, #200]	; (8012fbc <rcl_init+0x228>)
 8012ef2:	9600      	str	r6, [sp, #0]
 8012ef4:	2201      	movs	r2, #1
 8012ef6:	f001 ff1d 	bl	8014d34 <__atomic_fetch_add_8>
 8012efa:	4604      	mov	r4, r0
 8012efc:	460d      	mov	r5, r1
 8012efe:	ea54 0305 	orrs.w	r3, r4, r5
 8012f02:	d03e      	beq.n	8012f82 <rcl_init+0x1ee>
 8012f04:	4602      	mov	r2, r0
 8012f06:	460b      	mov	r3, r1
 8012f08:	9600      	str	r6, [sp, #0]
 8012f0a:	f109 0008 	add.w	r0, r9, #8
 8012f0e:	f001 fea3 	bl	8014c58 <__atomic_store_8>
 8012f12:	f8d9 3000 	ldr.w	r3, [r9]
 8012f16:	695f      	ldr	r7, [r3, #20]
 8012f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f1a:	3301      	adds	r3, #1
 8012f1c:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8012f20:	d03d      	beq.n	8012f9e <rcl_init+0x20a>
 8012f22:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8012f26:	b94b      	cbnz	r3, 8012f3c <rcl_init+0x1a8>
 8012f28:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8012f2c:	f000 f848 	bl	8012fc0 <rcl_get_localhost_only>
 8012f30:	4606      	mov	r6, r0
 8012f32:	2800      	cmp	r0, #0
 8012f34:	d1c6      	bne.n	8012ec4 <rcl_init+0x130>
 8012f36:	f8d9 3000 	ldr.w	r3, [r9]
 8012f3a:	695f      	ldr	r7, [r3, #20]
 8012f3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012f3e:	aa1a      	add	r2, sp, #104	; 0x68
 8012f40:	a919      	add	r1, sp, #100	; 0x64
 8012f42:	f000 ff65 	bl	8013e10 <rcl_validate_enclave_name>
 8012f46:	4606      	mov	r6, r0
 8012f48:	2800      	cmp	r0, #0
 8012f4a:	d1bb      	bne.n	8012ec4 <rcl_init+0x130>
 8012f4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012f4e:	bb23      	cbnz	r3, 8012f9a <rcl_init+0x206>
 8012f50:	f8d9 1000 	ldr.w	r1, [r9]
 8012f54:	694b      	ldr	r3, [r1, #20]
 8012f56:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8012f58:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8012f5c:	f000 fa9e 	bl	801349c <rcl_get_security_options_from_environment>
 8012f60:	4606      	mov	r6, r0
 8012f62:	2800      	cmp	r0, #0
 8012f64:	d1ae      	bne.n	8012ec4 <rcl_init+0x130>
 8012f66:	f8d9 1000 	ldr.w	r1, [r9]
 8012f6a:	6948      	ldr	r0, [r1, #20]
 8012f6c:	3128      	adds	r1, #40	; 0x28
 8012f6e:	3018      	adds	r0, #24
 8012f70:	f7fa ffec 	bl	800df4c <rmw_init>
 8012f74:	4606      	mov	r6, r0
 8012f76:	2800      	cmp	r0, #0
 8012f78:	d0af      	beq.n	8012eda <rcl_init+0x146>
 8012f7a:	f7ff fcfd 	bl	8012978 <rcl_convert_rmw_ret_to_rcl_ret>
 8012f7e:	4606      	mov	r6, r0
 8012f80:	e7a0      	b.n	8012ec4 <rcl_init+0x130>
 8012f82:	9600      	str	r6, [sp, #0]
 8012f84:	480d      	ldr	r0, [pc, #52]	; (8012fbc <rcl_init+0x228>)
 8012f86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f8e:	f001 fe63 	bl	8014c58 <__atomic_store_8>
 8012f92:	2601      	movs	r6, #1
 8012f94:	e796      	b.n	8012ec4 <rcl_init+0x130>
 8012f96:	260a      	movs	r6, #10
 8012f98:	e79f      	b.n	8012eda <rcl_init+0x146>
 8012f9a:	2601      	movs	r6, #1
 8012f9c:	e792      	b.n	8012ec4 <rcl_init+0x130>
 8012f9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012fa2:	f003 fc73 	bl	801688c <rcl_get_default_domain_id>
 8012fa6:	4606      	mov	r6, r0
 8012fa8:	2800      	cmp	r0, #0
 8012faa:	d18b      	bne.n	8012ec4 <rcl_init+0x130>
 8012fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fae:	3301      	adds	r3, #1
 8012fb0:	f8d9 3000 	ldr.w	r3, [r9]
 8012fb4:	bf08      	it	eq
 8012fb6:	6278      	streq	r0, [r7, #36]	; 0x24
 8012fb8:	695f      	ldr	r7, [r3, #20]
 8012fba:	e7b2      	b.n	8012f22 <rcl_init+0x18e>
 8012fbc:	20000138 	.word	0x20000138

08012fc0 <rcl_get_localhost_only>:
 8012fc0:	b510      	push	{r4, lr}
 8012fc2:	b082      	sub	sp, #8
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	9301      	str	r3, [sp, #4]
 8012fc8:	b1b8      	cbz	r0, 8012ffa <rcl_get_localhost_only+0x3a>
 8012fca:	4604      	mov	r4, r0
 8012fcc:	a901      	add	r1, sp, #4
 8012fce:	480c      	ldr	r0, [pc, #48]	; (8013000 <rcl_get_localhost_only+0x40>)
 8012fd0:	f001 ff34 	bl	8014e3c <rcutils_get_env>
 8012fd4:	b110      	cbz	r0, 8012fdc <rcl_get_localhost_only+0x1c>
 8012fd6:	2001      	movs	r0, #1
 8012fd8:	b002      	add	sp, #8
 8012fda:	bd10      	pop	{r4, pc}
 8012fdc:	9b01      	ldr	r3, [sp, #4]
 8012fde:	b113      	cbz	r3, 8012fe6 <rcl_get_localhost_only+0x26>
 8012fe0:	781a      	ldrb	r2, [r3, #0]
 8012fe2:	2a31      	cmp	r2, #49	; 0x31
 8012fe4:	d004      	beq.n	8012ff0 <rcl_get_localhost_only+0x30>
 8012fe6:	2302      	movs	r3, #2
 8012fe8:	2000      	movs	r0, #0
 8012fea:	7023      	strb	r3, [r4, #0]
 8012fec:	b002      	add	sp, #8
 8012fee:	bd10      	pop	{r4, pc}
 8012ff0:	785b      	ldrb	r3, [r3, #1]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d1f7      	bne.n	8012fe6 <rcl_get_localhost_only+0x26>
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	e7f6      	b.n	8012fe8 <rcl_get_localhost_only+0x28>
 8012ffa:	200b      	movs	r0, #11
 8012ffc:	b002      	add	sp, #8
 8012ffe:	bd10      	pop	{r4, pc}
 8013000:	0801986c 	.word	0x0801986c

08013004 <rcl_get_zero_initialized_node>:
 8013004:	4a03      	ldr	r2, [pc, #12]	; (8013014 <rcl_get_zero_initialized_node+0x10>)
 8013006:	4603      	mov	r3, r0
 8013008:	e892 0003 	ldmia.w	r2, {r0, r1}
 801300c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013010:	4618      	mov	r0, r3
 8013012:	4770      	bx	lr
 8013014:	08019888 	.word	0x08019888

08013018 <rcl_node_init>:
 8013018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801301c:	b09b      	sub	sp, #108	; 0x6c
 801301e:	4604      	mov	r4, r0
 8013020:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 8013024:	f04f 0c00 	mov.w	ip, #0
 8013028:	a815      	add	r0, sp, #84	; 0x54
 801302a:	460e      	mov	r6, r1
 801302c:	4615      	mov	r5, r2
 801302e:	461f      	mov	r7, r3
 8013030:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 8013034:	f003 fd40 	bl	8016ab8 <rcl_guard_condition_get_default_options>
 8013038:	f1b8 0f00 	cmp.w	r8, #0
 801303c:	f000 80fd 	beq.w	801323a <rcl_node_init+0x222>
 8013040:	f108 0b04 	add.w	fp, r8, #4
 8013044:	4658      	mov	r0, fp
 8013046:	f7fa fb4f 	bl	800d6e8 <rcutils_allocator_is_valid>
 801304a:	2800      	cmp	r0, #0
 801304c:	f000 80f5 	beq.w	801323a <rcl_node_init+0x222>
 8013050:	2e00      	cmp	r6, #0
 8013052:	f000 80f2 	beq.w	801323a <rcl_node_init+0x222>
 8013056:	2d00      	cmp	r5, #0
 8013058:	f000 80ef 	beq.w	801323a <rcl_node_init+0x222>
 801305c:	2c00      	cmp	r4, #0
 801305e:	f000 80ec 	beq.w	801323a <rcl_node_init+0x222>
 8013062:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013066:	f1b9 0f00 	cmp.w	r9, #0
 801306a:	f040 8112 	bne.w	8013292 <rcl_node_init+0x27a>
 801306e:	2f00      	cmp	r7, #0
 8013070:	f000 80e3 	beq.w	801323a <rcl_node_init+0x222>
 8013074:	4638      	mov	r0, r7
 8013076:	f7ff fca3 	bl	80129c0 <rcl_context_is_valid>
 801307a:	4682      	mov	sl, r0
 801307c:	2800      	cmp	r0, #0
 801307e:	f000 80e2 	beq.w	8013246 <rcl_node_init+0x22e>
 8013082:	464a      	mov	r2, r9
 8013084:	a914      	add	r1, sp, #80	; 0x50
 8013086:	4630      	mov	r0, r6
 8013088:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 801308c:	f002 f878 	bl	8015180 <rmw_validate_node_name>
 8013090:	4681      	mov	r9, r0
 8013092:	2800      	cmp	r0, #0
 8013094:	f040 80d3 	bne.w	801323e <rcl_node_init+0x226>
 8013098:	9814      	ldr	r0, [sp, #80]	; 0x50
 801309a:	2800      	cmp	r0, #0
 801309c:	f040 8105 	bne.w	80132aa <rcl_node_init+0x292>
 80130a0:	4628      	mov	r0, r5
 80130a2:	f7ed f89f 	bl	80001e4 <strlen>
 80130a6:	2800      	cmp	r0, #0
 80130a8:	f040 80d0 	bne.w	801324c <rcl_node_init+0x234>
 80130ac:	4d8e      	ldr	r5, [pc, #568]	; (80132e8 <rcl_node_init+0x2d0>)
 80130ae:	a914      	add	r1, sp, #80	; 0x50
 80130b0:	2200      	movs	r2, #0
 80130b2:	4628      	mov	r0, r5
 80130b4:	f002 f846 	bl	8015144 <rmw_validate_namespace>
 80130b8:	4681      	mov	r9, r0
 80130ba:	2800      	cmp	r0, #0
 80130bc:	f040 80bf 	bne.w	801323e <rcl_node_init+0x226>
 80130c0:	4682      	mov	sl, r0
 80130c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	f040 80f5 	bne.w	80132b4 <rcl_node_init+0x29c>
 80130ca:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80130ce:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80130d2:	9307      	str	r3, [sp, #28]
 80130d4:	2030      	movs	r0, #48	; 0x30
 80130d6:	4790      	blx	r2
 80130d8:	4681      	mov	r9, r0
 80130da:	6060      	str	r0, [r4, #4]
 80130dc:	2800      	cmp	r0, #0
 80130de:	f000 80de 	beq.w	801329e <rcl_node_init+0x286>
 80130e2:	9b07      	ldr	r3, [sp, #28]
 80130e4:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80130e8:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80130ec:	a80a      	add	r0, sp, #40	; 0x28
 80130ee:	f7f9 fb17 	bl	800c720 <rcl_node_get_default_options>
 80130f2:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80130f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80130fa:	46cc      	mov	ip, r9
 80130fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013100:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8013104:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8013108:	6861      	ldr	r1, [r4, #4]
 801310a:	6027      	str	r7, [r4, #0]
 801310c:	4640      	mov	r0, r8
 801310e:	f7f9 fb23 	bl	800c758 <rcl_node_options_copy>
 8013112:	2800      	cmp	r0, #0
 8013114:	d167      	bne.n	80131e6 <rcl_node_init+0x1ce>
 8013116:	4628      	mov	r0, r5
 8013118:	f7ed f864 	bl	80001e4 <strlen>
 801311c:	4428      	add	r0, r5
 801311e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013122:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8013126:	2b2f      	cmp	r3, #47	; 0x2f
 8013128:	bf08      	it	eq
 801312a:	4970      	ldreq	r1, [pc, #448]	; (80132ec <rcl_node_init+0x2d4>)
 801312c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8013130:	bf18      	it	ne
 8013132:	496f      	ldrne	r1, [pc, #444]	; (80132f0 <rcl_node_init+0x2d8>)
 8013134:	9604      	str	r6, [sp, #16]
 8013136:	e9cd 1502 	strd	r1, r5, [sp, #8]
 801313a:	e9cd 3200 	strd	r3, r2, [sp]
 801313e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8013142:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013146:	f001 fe3f 	bl	8014dc8 <rcutils_format_string_limit>
 801314a:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 801314e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013152:	f8d9 3000 	ldr.w	r3, [r9]
 8013156:	9313      	str	r3, [sp, #76]	; 0x4c
 8013158:	1c59      	adds	r1, r3, #1
 801315a:	f000 80b7 	beq.w	80132cc <rcl_node_init+0x2b4>
 801315e:	683a      	ldr	r2, [r7, #0]
 8013160:	f8c9 301c 	str.w	r3, [r9, #28]
 8013164:	6952      	ldr	r2, [r2, #20]
 8013166:	6821      	ldr	r1, [r4, #0]
 8013168:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 801316c:	6808      	ldr	r0, [r1, #0]
 801316e:	f1a2 0201 	sub.w	r2, r2, #1
 8013172:	fab2 f282 	clz	r2, r2
 8013176:	0952      	lsrs	r2, r2, #5
 8013178:	9200      	str	r2, [sp, #0]
 801317a:	4631      	mov	r1, r6
 801317c:	3028      	adds	r0, #40	; 0x28
 801317e:	462a      	mov	r2, r5
 8013180:	f7fb f8b6 	bl	800e2f0 <rmw_create_node>
 8013184:	6863      	ldr	r3, [r4, #4]
 8013186:	f8c9 0020 	str.w	r0, [r9, #32]
 801318a:	6a18      	ldr	r0, [r3, #32]
 801318c:	b368      	cbz	r0, 80131ea <rcl_node_init+0x1d2>
 801318e:	f7fb f93b 	bl	800e408 <rmw_node_get_graph_guard_condition>
 8013192:	4681      	mov	r9, r0
 8013194:	b338      	cbz	r0, 80131e6 <rcl_node_init+0x1ce>
 8013196:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801319a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801319e:	6866      	ldr	r6, [r4, #4]
 80131a0:	2008      	movs	r0, #8
 80131a2:	4798      	blx	r3
 80131a4:	6863      	ldr	r3, [r4, #4]
 80131a6:	6270      	str	r0, [r6, #36]	; 0x24
 80131a8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80131aa:	b1f6      	cbz	r6, 80131ea <rcl_node_init+0x1d2>
 80131ac:	a808      	add	r0, sp, #32
 80131ae:	f003 fba1 	bl	80168f4 <rcl_get_zero_initialized_guard_condition>
 80131b2:	a808      	add	r0, sp, #32
 80131b4:	c803      	ldmia	r0, {r0, r1}
 80131b6:	e886 0003 	stmia.w	r6, {r0, r1}
 80131ba:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80131be:	ae15      	add	r6, sp, #84	; 0x54
 80131c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80131c2:	f8db 3000 	ldr.w	r3, [fp]
 80131c6:	6033      	str	r3, [r6, #0]
 80131c8:	ab1a      	add	r3, sp, #104	; 0x68
 80131ca:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80131ce:	6866      	ldr	r6, [r4, #4]
 80131d0:	6a76      	ldr	r6, [r6, #36]	; 0x24
 80131d2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80131d6:	4649      	mov	r1, r9
 80131d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131da:	4630      	mov	r0, r6
 80131dc:	463a      	mov	r2, r7
 80131de:	f003 fbed 	bl	80169bc <rcl_guard_condition_init_from_rmw>
 80131e2:	4681      	mov	r9, r0
 80131e4:	b328      	cbz	r0, 8013232 <rcl_node_init+0x21a>
 80131e6:	6863      	ldr	r3, [r4, #4]
 80131e8:	b1f3      	cbz	r3, 8013228 <rcl_node_init+0x210>
 80131ea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80131ec:	b128      	cbz	r0, 80131fa <rcl_node_init+0x1e2>
 80131ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80131f2:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80131f6:	4798      	blx	r3
 80131f8:	6863      	ldr	r3, [r4, #4]
 80131fa:	6a18      	ldr	r0, [r3, #32]
 80131fc:	b110      	cbz	r0, 8013204 <rcl_node_init+0x1ec>
 80131fe:	f7fb f88f 	bl	800e320 <rmw_destroy_node>
 8013202:	6863      	ldr	r3, [r4, #4]
 8013204:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013206:	b148      	cbz	r0, 801321c <rcl_node_init+0x204>
 8013208:	f003 fc30 	bl	8016a6c <rcl_guard_condition_fini>
 801320c:	6862      	ldr	r2, [r4, #4]
 801320e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013212:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8013214:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013218:	4798      	blx	r3
 801321a:	6863      	ldr	r3, [r4, #4]
 801321c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8013220:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013224:	4618      	mov	r0, r3
 8013226:	4790      	blx	r2
 8013228:	2300      	movs	r3, #0
 801322a:	e9c4 3300 	strd	r3, r3, [r4]
 801322e:	f04f 0901 	mov.w	r9, #1
 8013232:	f1ba 0f00 	cmp.w	sl, #0
 8013236:	d125      	bne.n	8013284 <rcl_node_init+0x26c>
 8013238:	e001      	b.n	801323e <rcl_node_init+0x226>
 801323a:	f04f 090b 	mov.w	r9, #11
 801323e:	4648      	mov	r0, r9
 8013240:	b01b      	add	sp, #108	; 0x6c
 8013242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013246:	f04f 0965 	mov.w	r9, #101	; 0x65
 801324a:	e7f8      	b.n	801323e <rcl_node_init+0x226>
 801324c:	782b      	ldrb	r3, [r5, #0]
 801324e:	2b2f      	cmp	r3, #47	; 0x2f
 8013250:	f43f af2d 	beq.w	80130ae <rcl_node_init+0x96>
 8013254:	4927      	ldr	r1, [pc, #156]	; (80132f4 <rcl_node_init+0x2dc>)
 8013256:	f8db 3010 	ldr.w	r3, [fp, #16]
 801325a:	9300      	str	r3, [sp, #0]
 801325c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013260:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8013264:	9503      	str	r5, [sp, #12]
 8013266:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 801326a:	f001 fdad 	bl	8014dc8 <rcutils_format_string_limit>
 801326e:	4605      	mov	r5, r0
 8013270:	b348      	cbz	r0, 80132c6 <rcl_node_init+0x2ae>
 8013272:	2200      	movs	r2, #0
 8013274:	a914      	add	r1, sp, #80	; 0x50
 8013276:	9214      	str	r2, [sp, #80]	; 0x50
 8013278:	f001 ff64 	bl	8015144 <rmw_validate_namespace>
 801327c:	4681      	mov	r9, r0
 801327e:	2800      	cmp	r0, #0
 8013280:	f43f af1f 	beq.w	80130c2 <rcl_node_init+0xaa>
 8013284:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013288:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801328c:	4628      	mov	r0, r5
 801328e:	4798      	blx	r3
 8013290:	e7d5      	b.n	801323e <rcl_node_init+0x226>
 8013292:	f04f 0964 	mov.w	r9, #100	; 0x64
 8013296:	4648      	mov	r0, r9
 8013298:	b01b      	add	sp, #108	; 0x6c
 801329a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801329e:	f04f 090a 	mov.w	r9, #10
 80132a2:	f1ba 0f00 	cmp.w	sl, #0
 80132a6:	d1ed      	bne.n	8013284 <rcl_node_init+0x26c>
 80132a8:	e7c9      	b.n	801323e <rcl_node_init+0x226>
 80132aa:	f001 ffbb 	bl	8015224 <rmw_node_name_validation_result_string>
 80132ae:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 80132b2:	e7c4      	b.n	801323e <rcl_node_init+0x226>
 80132b4:	4618      	mov	r0, r3
 80132b6:	f001 ff57 	bl	8015168 <rmw_namespace_validation_result_string>
 80132ba:	f04f 09ca 	mov.w	r9, #202	; 0xca
 80132be:	f1ba 0f00 	cmp.w	sl, #0
 80132c2:	d1df      	bne.n	8013284 <rcl_node_init+0x26c>
 80132c4:	e7bb      	b.n	801323e <rcl_node_init+0x226>
 80132c6:	f04f 090a 	mov.w	r9, #10
 80132ca:	e7b8      	b.n	801323e <rcl_node_init+0x226>
 80132cc:	a813      	add	r0, sp, #76	; 0x4c
 80132ce:	f003 fadd 	bl	801688c <rcl_get_default_domain_id>
 80132d2:	2800      	cmp	r0, #0
 80132d4:	d187      	bne.n	80131e6 <rcl_node_init+0x1ce>
 80132d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80132d8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80132dc:	1c5a      	adds	r2, r3, #1
 80132de:	bf04      	itt	eq
 80132e0:	9013      	streq	r0, [sp, #76]	; 0x4c
 80132e2:	4603      	moveq	r3, r0
 80132e4:	e73b      	b.n	801315e <rcl_node_init+0x146>
 80132e6:	bf00      	nop
 80132e8:	08019580 	.word	0x08019580
 80132ec:	080195a8 	.word	0x080195a8
 80132f0:	08019584 	.word	0x08019584
 80132f4:	08019884 	.word	0x08019884

080132f8 <rcl_node_is_valid>:
 80132f8:	b130      	cbz	r0, 8013308 <rcl_node_is_valid+0x10>
 80132fa:	6843      	ldr	r3, [r0, #4]
 80132fc:	b123      	cbz	r3, 8013308 <rcl_node_is_valid+0x10>
 80132fe:	6a1b      	ldr	r3, [r3, #32]
 8013300:	b113      	cbz	r3, 8013308 <rcl_node_is_valid+0x10>
 8013302:	6800      	ldr	r0, [r0, #0]
 8013304:	f7ff bb5c 	b.w	80129c0 <rcl_context_is_valid>
 8013308:	2000      	movs	r0, #0
 801330a:	4770      	bx	lr

0801330c <rcl_node_get_name>:
 801330c:	b120      	cbz	r0, 8013318 <rcl_node_get_name+0xc>
 801330e:	6840      	ldr	r0, [r0, #4]
 8013310:	b110      	cbz	r0, 8013318 <rcl_node_get_name+0xc>
 8013312:	6a00      	ldr	r0, [r0, #32]
 8013314:	b100      	cbz	r0, 8013318 <rcl_node_get_name+0xc>
 8013316:	6880      	ldr	r0, [r0, #8]
 8013318:	4770      	bx	lr
 801331a:	bf00      	nop

0801331c <rcl_node_get_namespace>:
 801331c:	b120      	cbz	r0, 8013328 <rcl_node_get_namespace+0xc>
 801331e:	6840      	ldr	r0, [r0, #4]
 8013320:	b110      	cbz	r0, 8013328 <rcl_node_get_namespace+0xc>
 8013322:	6a00      	ldr	r0, [r0, #32]
 8013324:	b100      	cbz	r0, 8013328 <rcl_node_get_namespace+0xc>
 8013326:	68c0      	ldr	r0, [r0, #12]
 8013328:	4770      	bx	lr
 801332a:	bf00      	nop

0801332c <rcl_node_get_options>:
 801332c:	b128      	cbz	r0, 801333a <rcl_node_get_options+0xe>
 801332e:	6840      	ldr	r0, [r0, #4]
 8013330:	b118      	cbz	r0, 801333a <rcl_node_get_options+0xe>
 8013332:	6a03      	ldr	r3, [r0, #32]
 8013334:	2b00      	cmp	r3, #0
 8013336:	bf08      	it	eq
 8013338:	2000      	moveq	r0, #0
 801333a:	4770      	bx	lr

0801333c <rcl_node_get_rmw_handle>:
 801333c:	b110      	cbz	r0, 8013344 <rcl_node_get_rmw_handle+0x8>
 801333e:	6840      	ldr	r0, [r0, #4]
 8013340:	b100      	cbz	r0, 8013344 <rcl_node_get_rmw_handle+0x8>
 8013342:	6a00      	ldr	r0, [r0, #32]
 8013344:	4770      	bx	lr
 8013346:	bf00      	nop

08013348 <exact_match_lookup>:
 8013348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801334a:	f102 0708 	add.w	r7, r2, #8
 801334e:	460b      	mov	r3, r1
 8013350:	4614      	mov	r4, r2
 8013352:	4606      	mov	r6, r0
 8013354:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013358:	b085      	sub	sp, #20
 801335a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801335e:	4618      	mov	r0, r3
 8013360:	4918      	ldr	r1, [pc, #96]	; (80133c4 <exact_match_lookup+0x7c>)
 8013362:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013366:	f001 fd21 	bl	8014dac <rcutils_join_path>
 801336a:	7833      	ldrb	r3, [r6, #0]
 801336c:	2b2f      	cmp	r3, #47	; 0x2f
 801336e:	4605      	mov	r5, r0
 8013370:	d021      	beq.n	80133b6 <exact_match_lookup+0x6e>
 8013372:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8013376:	e88d 0003 	stmia.w	sp, {r0, r1}
 801337a:	1c70      	adds	r0, r6, #1
 801337c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013380:	f001 fd1a 	bl	8014db8 <rcutils_to_native_path>
 8013384:	4606      	mov	r6, r0
 8013386:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801338a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801338e:	4631      	mov	r1, r6
 8013390:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013394:	4628      	mov	r0, r5
 8013396:	f001 fd09 	bl	8014dac <rcutils_join_path>
 801339a:	6862      	ldr	r2, [r4, #4]
 801339c:	6921      	ldr	r1, [r4, #16]
 801339e:	4603      	mov	r3, r0
 80133a0:	4630      	mov	r0, r6
 80133a2:	461e      	mov	r6, r3
 80133a4:	4790      	blx	r2
 80133a6:	4628      	mov	r0, r5
 80133a8:	6863      	ldr	r3, [r4, #4]
 80133aa:	6921      	ldr	r1, [r4, #16]
 80133ac:	4798      	blx	r3
 80133ae:	4635      	mov	r5, r6
 80133b0:	4628      	mov	r0, r5
 80133b2:	b005      	add	sp, #20
 80133b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133b6:	7873      	ldrb	r3, [r6, #1]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d1da      	bne.n	8013372 <exact_match_lookup+0x2a>
 80133bc:	4628      	mov	r0, r5
 80133be:	b005      	add	sp, #20
 80133c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133c2:	bf00      	nop
 80133c4:	080198cc 	.word	0x080198cc

080133c8 <rcl_get_secure_root>:
 80133c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133cc:	b085      	sub	sp, #20
 80133ce:	b168      	cbz	r0, 80133ec <rcl_get_secure_root+0x24>
 80133d0:	4607      	mov	r7, r0
 80133d2:	4608      	mov	r0, r1
 80133d4:	460c      	mov	r4, r1
 80133d6:	f7fa f987 	bl	800d6e8 <rcutils_allocator_is_valid>
 80133da:	b138      	cbz	r0, 80133ec <rcl_get_secure_root+0x24>
 80133dc:	2300      	movs	r3, #0
 80133de:	482d      	ldr	r0, [pc, #180]	; (8013494 <rcl_get_secure_root+0xcc>)
 80133e0:	9303      	str	r3, [sp, #12]
 80133e2:	a903      	add	r1, sp, #12
 80133e4:	f001 fd2a 	bl	8014e3c <rcutils_get_env>
 80133e8:	4605      	mov	r5, r0
 80133ea:	b120      	cbz	r0, 80133f6 <rcl_get_secure_root+0x2e>
 80133ec:	2500      	movs	r5, #0
 80133ee:	4628      	mov	r0, r5
 80133f0:	b005      	add	sp, #20
 80133f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133f6:	9b03      	ldr	r3, [sp, #12]
 80133f8:	781a      	ldrb	r2, [r3, #0]
 80133fa:	2a00      	cmp	r2, #0
 80133fc:	d0f6      	beq.n	80133ec <rcl_get_secure_root+0x24>
 80133fe:	f104 090c 	add.w	r9, r4, #12
 8013402:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013406:	e88d 0003 	stmia.w	sp, {r0, r1}
 801340a:	4618      	mov	r0, r3
 801340c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013410:	f001 fe04 	bl	801501c <rcutils_strdup>
 8013414:	4680      	mov	r8, r0
 8013416:	2800      	cmp	r0, #0
 8013418:	d0e8      	beq.n	80133ec <rcl_get_secure_root+0x24>
 801341a:	481f      	ldr	r0, [pc, #124]	; (8013498 <rcl_get_secure_root+0xd0>)
 801341c:	9503      	str	r5, [sp, #12]
 801341e:	a903      	add	r1, sp, #12
 8013420:	f001 fd0c 	bl	8014e3c <rcutils_get_env>
 8013424:	b160      	cbz	r0, 8013440 <rcl_get_secure_root+0x78>
 8013426:	2600      	movs	r6, #0
 8013428:	6863      	ldr	r3, [r4, #4]
 801342a:	6921      	ldr	r1, [r4, #16]
 801342c:	4630      	mov	r0, r6
 801342e:	4798      	blx	r3
 8013430:	4640      	mov	r0, r8
 8013432:	6863      	ldr	r3, [r4, #4]
 8013434:	6921      	ldr	r1, [r4, #16]
 8013436:	4798      	blx	r3
 8013438:	4628      	mov	r0, r5
 801343a:	b005      	add	sp, #20
 801343c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013440:	9b03      	ldr	r3, [sp, #12]
 8013442:	781e      	ldrb	r6, [r3, #0]
 8013444:	b1f6      	cbz	r6, 8013484 <rcl_get_secure_root+0xbc>
 8013446:	e899 0003 	ldmia.w	r9, {r0, r1}
 801344a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801344e:	4618      	mov	r0, r3
 8013450:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013454:	f001 fde2 	bl	801501c <rcutils_strdup>
 8013458:	4606      	mov	r6, r0
 801345a:	2800      	cmp	r0, #0
 801345c:	d0e3      	beq.n	8013426 <rcl_get_secure_root+0x5e>
 801345e:	4622      	mov	r2, r4
 8013460:	4641      	mov	r1, r8
 8013462:	f7ff ff71 	bl	8013348 <exact_match_lookup>
 8013466:	4605      	mov	r5, r0
 8013468:	2d00      	cmp	r5, #0
 801346a:	d0dd      	beq.n	8013428 <rcl_get_secure_root+0x60>
 801346c:	4628      	mov	r0, r5
 801346e:	f001 fc9b 	bl	8014da8 <rcutils_is_directory>
 8013472:	4607      	mov	r7, r0
 8013474:	2800      	cmp	r0, #0
 8013476:	d1d7      	bne.n	8013428 <rcl_get_secure_root+0x60>
 8013478:	4628      	mov	r0, r5
 801347a:	6863      	ldr	r3, [r4, #4]
 801347c:	6921      	ldr	r1, [r4, #16]
 801347e:	4798      	blx	r3
 8013480:	463d      	mov	r5, r7
 8013482:	e7d1      	b.n	8013428 <rcl_get_secure_root+0x60>
 8013484:	4638      	mov	r0, r7
 8013486:	4622      	mov	r2, r4
 8013488:	4641      	mov	r1, r8
 801348a:	f7ff ff5d 	bl	8013348 <exact_match_lookup>
 801348e:	4605      	mov	r5, r0
 8013490:	e7ea      	b.n	8013468 <rcl_get_secure_root+0xa0>
 8013492:	bf00      	nop
 8013494:	080198d8 	.word	0x080198d8
 8013498:	080198f0 	.word	0x080198f0

0801349c <rcl_get_security_options_from_environment>:
 801349c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134a0:	b082      	sub	sp, #8
 80134a2:	4607      	mov	r7, r0
 80134a4:	4688      	mov	r8, r1
 80134a6:	2400      	movs	r4, #0
 80134a8:	481d      	ldr	r0, [pc, #116]	; (8013520 <rcl_get_security_options_from_environment+0x84>)
 80134aa:	9401      	str	r4, [sp, #4]
 80134ac:	a901      	add	r1, sp, #4
 80134ae:	4616      	mov	r6, r2
 80134b0:	f001 fcc4 	bl	8014e3c <rcutils_get_env>
 80134b4:	b120      	cbz	r0, 80134c0 <rcl_get_security_options_from_environment+0x24>
 80134b6:	2501      	movs	r5, #1
 80134b8:	4628      	mov	r0, r5
 80134ba:	b002      	add	sp, #8
 80134bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134c0:	4918      	ldr	r1, [pc, #96]	; (8013524 <rcl_get_security_options_from_environment+0x88>)
 80134c2:	4604      	mov	r4, r0
 80134c4:	9801      	ldr	r0, [sp, #4]
 80134c6:	f7ec fe83 	bl	80001d0 <strcmp>
 80134ca:	4605      	mov	r5, r0
 80134cc:	b9c8      	cbnz	r0, 8013502 <rcl_get_security_options_from_environment+0x66>
 80134ce:	9001      	str	r0, [sp, #4]
 80134d0:	b1ee      	cbz	r6, 801350e <rcl_get_security_options_from_environment+0x72>
 80134d2:	4815      	ldr	r0, [pc, #84]	; (8013528 <rcl_get_security_options_from_environment+0x8c>)
 80134d4:	a901      	add	r1, sp, #4
 80134d6:	f001 fcb1 	bl	8014e3c <rcutils_get_env>
 80134da:	2800      	cmp	r0, #0
 80134dc:	d1eb      	bne.n	80134b6 <rcl_get_security_options_from_environment+0x1a>
 80134de:	4913      	ldr	r1, [pc, #76]	; (801352c <rcl_get_security_options_from_environment+0x90>)
 80134e0:	9801      	ldr	r0, [sp, #4]
 80134e2:	f7ec fe75 	bl	80001d0 <strcmp>
 80134e6:	fab0 f080 	clz	r0, r0
 80134ea:	0940      	lsrs	r0, r0, #5
 80134ec:	7030      	strb	r0, [r6, #0]
 80134ee:	4641      	mov	r1, r8
 80134f0:	4638      	mov	r0, r7
 80134f2:	f7ff ff69 	bl	80133c8 <rcl_get_secure_root>
 80134f6:	b160      	cbz	r0, 8013512 <rcl_get_security_options_from_environment+0x76>
 80134f8:	6070      	str	r0, [r6, #4]
 80134fa:	4628      	mov	r0, r5
 80134fc:	b002      	add	sp, #8
 80134fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013502:	4625      	mov	r5, r4
 8013504:	4628      	mov	r0, r5
 8013506:	7034      	strb	r4, [r6, #0]
 8013508:	b002      	add	sp, #8
 801350a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801350e:	250b      	movs	r5, #11
 8013510:	e7d2      	b.n	80134b8 <rcl_get_security_options_from_environment+0x1c>
 8013512:	7835      	ldrb	r5, [r6, #0]
 8013514:	f1a5 0501 	sub.w	r5, r5, #1
 8013518:	fab5 f585 	clz	r5, r5
 801351c:	096d      	lsrs	r5, r5, #5
 801351e:	e7cb      	b.n	80134b8 <rcl_get_security_options_from_environment+0x1c>
 8013520:	08019890 	.word	0x08019890
 8013524:	080198a4 	.word	0x080198a4
 8013528:	080198ac 	.word	0x080198ac
 801352c:	080198c4 	.word	0x080198c4

08013530 <rcl_service_get_rmw_handle>:
 8013530:	b110      	cbz	r0, 8013538 <rcl_service_get_rmw_handle+0x8>
 8013532:	6800      	ldr	r0, [r0, #0]
 8013534:	b100      	cbz	r0, 8013538 <rcl_service_get_rmw_handle+0x8>
 8013536:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013538:	4770      	bx	lr
 801353a:	bf00      	nop

0801353c <rcl_take_request>:
 801353c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801353e:	460e      	mov	r6, r1
 8013540:	460c      	mov	r4, r1
 8013542:	4607      	mov	r7, r0
 8013544:	4694      	mov	ip, r2
 8013546:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013548:	b08d      	sub	sp, #52	; 0x34
 801354a:	ad06      	add	r5, sp, #24
 801354c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801354e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013552:	e885 0003 	stmia.w	r5, {r0, r1}
 8013556:	b1e7      	cbz	r7, 8013592 <rcl_take_request+0x56>
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	b1d3      	cbz	r3, 8013592 <rcl_take_request+0x56>
 801355c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801355e:	b1c0      	cbz	r0, 8013592 <rcl_take_request+0x56>
 8013560:	4662      	mov	r2, ip
 8013562:	b30a      	cbz	r2, 80135a8 <rcl_take_request+0x6c>
 8013564:	2500      	movs	r5, #0
 8013566:	f10d 0307 	add.w	r3, sp, #7
 801356a:	a902      	add	r1, sp, #8
 801356c:	f88d 5007 	strb.w	r5, [sp, #7]
 8013570:	f002 f816 	bl	80155a0 <rmw_take_request>
 8013574:	4606      	mov	r6, r0
 8013576:	b178      	cbz	r0, 8013598 <rcl_take_request+0x5c>
 8013578:	280a      	cmp	r0, #10
 801357a:	bf18      	it	ne
 801357c:	2601      	movne	r6, #1
 801357e:	ad06      	add	r5, sp, #24
 8013580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013584:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013588:	e884 0003 	stmia.w	r4, {r0, r1}
 801358c:	4630      	mov	r0, r6
 801358e:	b00d      	add	sp, #52	; 0x34
 8013590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013592:	f44f 7616 	mov.w	r6, #600	; 0x258
 8013596:	e7f2      	b.n	801357e <rcl_take_request+0x42>
 8013598:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801359c:	f240 2359 	movw	r3, #601	; 0x259
 80135a0:	2a00      	cmp	r2, #0
 80135a2:	bf08      	it	eq
 80135a4:	461e      	moveq	r6, r3
 80135a6:	e7ea      	b.n	801357e <rcl_take_request+0x42>
 80135a8:	260b      	movs	r6, #11
 80135aa:	e7e8      	b.n	801357e <rcl_take_request+0x42>

080135ac <rcl_send_response>:
 80135ac:	b160      	cbz	r0, 80135c8 <rcl_send_response+0x1c>
 80135ae:	6800      	ldr	r0, [r0, #0]
 80135b0:	b150      	cbz	r0, 80135c8 <rcl_send_response+0x1c>
 80135b2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80135b4:	b140      	cbz	r0, 80135c8 <rcl_send_response+0x1c>
 80135b6:	b151      	cbz	r1, 80135ce <rcl_send_response+0x22>
 80135b8:	b510      	push	{r4, lr}
 80135ba:	b152      	cbz	r2, 80135d2 <rcl_send_response+0x26>
 80135bc:	f002 f84a 	bl	8015654 <rmw_send_response>
 80135c0:	3800      	subs	r0, #0
 80135c2:	bf18      	it	ne
 80135c4:	2001      	movne	r0, #1
 80135c6:	bd10      	pop	{r4, pc}
 80135c8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80135cc:	4770      	bx	lr
 80135ce:	200b      	movs	r0, #11
 80135d0:	4770      	bx	lr
 80135d2:	200b      	movs	r0, #11
 80135d4:	bd10      	pop	{r4, pc}
 80135d6:	bf00      	nop

080135d8 <rcl_get_system_time>:
 80135d8:	4608      	mov	r0, r1
 80135da:	f7fa bac5 	b.w	800db68 <rcutils_system_time_now>
 80135de:	bf00      	nop

080135e0 <rcl_get_steady_time>:
 80135e0:	4608      	mov	r0, r1
 80135e2:	f7fa bae9 	b.w	800dbb8 <rcutils_steady_time_now>
 80135e6:	bf00      	nop

080135e8 <rcl_get_ros_time>:
 80135e8:	7a03      	ldrb	r3, [r0, #8]
 80135ea:	b510      	push	{r4, lr}
 80135ec:	460c      	mov	r4, r1
 80135ee:	b133      	cbz	r3, 80135fe <rcl_get_ros_time+0x16>
 80135f0:	2105      	movs	r1, #5
 80135f2:	f001 fafd 	bl	8014bf0 <__atomic_load_8>
 80135f6:	e9c4 0100 	strd	r0, r1, [r4]
 80135fa:	2000      	movs	r0, #0
 80135fc:	bd10      	pop	{r4, pc}
 80135fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013602:	4608      	mov	r0, r1
 8013604:	f7fa bab0 	b.w	800db68 <rcutils_system_time_now>

08013608 <rcl_clock_init>:
 8013608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801360c:	4606      	mov	r6, r0
 801360e:	4610      	mov	r0, r2
 8013610:	4614      	mov	r4, r2
 8013612:	460d      	mov	r5, r1
 8013614:	f7fa f868 	bl	800d6e8 <rcutils_allocator_is_valid>
 8013618:	b128      	cbz	r0, 8013626 <rcl_clock_init+0x1e>
 801361a:	2e03      	cmp	r6, #3
 801361c:	d803      	bhi.n	8013626 <rcl_clock_init+0x1e>
 801361e:	e8df f006 	tbb	[pc, r6]
 8013622:	2c1b      	.short	0x2c1b
 8013624:	0554      	.short	0x0554
 8013626:	200b      	movs	r0, #11
 8013628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801362c:	2d00      	cmp	r5, #0
 801362e:	d0fa      	beq.n	8013626 <rcl_clock_init+0x1e>
 8013630:	2c00      	cmp	r4, #0
 8013632:	d0f8      	beq.n	8013626 <rcl_clock_init+0x1e>
 8013634:	2600      	movs	r6, #0
 8013636:	702e      	strb	r6, [r5, #0]
 8013638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801363a:	f105 0714 	add.w	r7, r5, #20
 801363e:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8013642:	612e      	str	r6, [r5, #16]
 8013644:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013646:	6823      	ldr	r3, [r4, #0]
 8013648:	603b      	str	r3, [r7, #0]
 801364a:	2303      	movs	r3, #3
 801364c:	4a2b      	ldr	r2, [pc, #172]	; (80136fc <rcl_clock_init+0xf4>)
 801364e:	702b      	strb	r3, [r5, #0]
 8013650:	4630      	mov	r0, r6
 8013652:	60ea      	str	r2, [r5, #12]
 8013654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013658:	2d00      	cmp	r5, #0
 801365a:	d0e4      	beq.n	8013626 <rcl_clock_init+0x1e>
 801365c:	2600      	movs	r6, #0
 801365e:	702e      	strb	r6, [r5, #0]
 8013660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013662:	f105 0714 	add.w	r7, r5, #20
 8013666:	e9c5 6601 	strd	r6, r6, [r5, #4]
 801366a:	e9c5 6603 	strd	r6, r6, [r5, #12]
 801366e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013670:	6823      	ldr	r3, [r4, #0]
 8013672:	603b      	str	r3, [r7, #0]
 8013674:	4630      	mov	r0, r6
 8013676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801367a:	2d00      	cmp	r5, #0
 801367c:	d0d3      	beq.n	8013626 <rcl_clock_init+0x1e>
 801367e:	2c00      	cmp	r4, #0
 8013680:	d0d1      	beq.n	8013626 <rcl_clock_init+0x1e>
 8013682:	2600      	movs	r6, #0
 8013684:	702e      	strb	r6, [r5, #0]
 8013686:	46a4      	mov	ip, r4
 8013688:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801368c:	f105 0714 	add.w	r7, r5, #20
 8013690:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8013694:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8013698:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801369a:	f8dc 3000 	ldr.w	r3, [ip]
 801369e:	603b      	str	r3, [r7, #0]
 80136a0:	6921      	ldr	r1, [r4, #16]
 80136a2:	6823      	ldr	r3, [r4, #0]
 80136a4:	2010      	movs	r0, #16
 80136a6:	4798      	blx	r3
 80136a8:	4603      	mov	r3, r0
 80136aa:	6128      	str	r0, [r5, #16]
 80136ac:	b318      	cbz	r0, 80136f6 <rcl_clock_init+0xee>
 80136ae:	f04f 0800 	mov.w	r8, #0
 80136b2:	f04f 0900 	mov.w	r9, #0
 80136b6:	7206      	strb	r6, [r0, #8]
 80136b8:	e9c3 8900 	strd	r8, r9, [r3]
 80136bc:	2301      	movs	r3, #1
 80136be:	4a10      	ldr	r2, [pc, #64]	; (8013700 <rcl_clock_init+0xf8>)
 80136c0:	702b      	strb	r3, [r5, #0]
 80136c2:	4630      	mov	r0, r6
 80136c4:	60ea      	str	r2, [r5, #12]
 80136c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136ca:	2d00      	cmp	r5, #0
 80136cc:	d0ab      	beq.n	8013626 <rcl_clock_init+0x1e>
 80136ce:	2c00      	cmp	r4, #0
 80136d0:	d0a9      	beq.n	8013626 <rcl_clock_init+0x1e>
 80136d2:	2600      	movs	r6, #0
 80136d4:	702e      	strb	r6, [r5, #0]
 80136d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80136d8:	f105 0714 	add.w	r7, r5, #20
 80136dc:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80136e0:	612e      	str	r6, [r5, #16]
 80136e2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80136e4:	6823      	ldr	r3, [r4, #0]
 80136e6:	603b      	str	r3, [r7, #0]
 80136e8:	2302      	movs	r3, #2
 80136ea:	4a06      	ldr	r2, [pc, #24]	; (8013704 <rcl_clock_init+0xfc>)
 80136ec:	702b      	strb	r3, [r5, #0]
 80136ee:	4630      	mov	r0, r6
 80136f0:	60ea      	str	r2, [r5, #12]
 80136f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136f6:	200a      	movs	r0, #10
 80136f8:	e796      	b.n	8013628 <rcl_clock_init+0x20>
 80136fa:	bf00      	nop
 80136fc:	080135e1 	.word	0x080135e1
 8013700:	080135e9 	.word	0x080135e9
 8013704:	080135d9 	.word	0x080135d9

08013708 <rcl_clock_get_now>:
 8013708:	b140      	cbz	r0, 801371c <rcl_clock_get_now+0x14>
 801370a:	b139      	cbz	r1, 801371c <rcl_clock_get_now+0x14>
 801370c:	7803      	ldrb	r3, [r0, #0]
 801370e:	b11b      	cbz	r3, 8013718 <rcl_clock_get_now+0x10>
 8013710:	68c3      	ldr	r3, [r0, #12]
 8013712:	b10b      	cbz	r3, 8013718 <rcl_clock_get_now+0x10>
 8013714:	6900      	ldr	r0, [r0, #16]
 8013716:	4718      	bx	r3
 8013718:	2001      	movs	r0, #1
 801371a:	4770      	bx	lr
 801371c:	200b      	movs	r0, #11
 801371e:	4770      	bx	lr

08013720 <rcl_clock_add_jump_callback>:
 8013720:	b082      	sub	sp, #8
 8013722:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013726:	a908      	add	r1, sp, #32
 8013728:	e881 000c 	stmia.w	r1, {r2, r3}
 801372c:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	; 0x38
 8013730:	b340      	cbz	r0, 8013784 <rcl_clock_add_jump_callback+0x64>
 8013732:	4604      	mov	r4, r0
 8013734:	3014      	adds	r0, #20
 8013736:	f7f9 ffd7 	bl	800d6e8 <rcutils_allocator_is_valid>
 801373a:	b318      	cbz	r0, 8013784 <rcl_clock_add_jump_callback+0x64>
 801373c:	b315      	cbz	r5, 8013784 <rcl_clock_add_jump_callback+0x64>
 801373e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013742:	2a00      	cmp	r2, #0
 8013744:	f173 0300 	sbcs.w	r3, r3, #0
 8013748:	db1c      	blt.n	8013784 <rcl_clock_add_jump_callback+0x64>
 801374a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801374e:	2a01      	cmp	r2, #1
 8013750:	f173 0300 	sbcs.w	r3, r3, #0
 8013754:	da16      	bge.n	8013784 <rcl_clock_add_jump_callback+0x64>
 8013756:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 801375a:	2f00      	cmp	r7, #0
 801375c:	d03e      	beq.n	80137dc <rcl_clock_add_jump_callback+0xbc>
 801375e:	2300      	movs	r3, #0
 8013760:	f100 0220 	add.w	r2, r0, #32
 8013764:	e003      	b.n	801376e <rcl_clock_add_jump_callback+0x4e>
 8013766:	42bb      	cmp	r3, r7
 8013768:	f102 0228 	add.w	r2, r2, #40	; 0x28
 801376c:	d00f      	beq.n	801378e <rcl_clock_add_jump_callback+0x6e>
 801376e:	f852 1c20 	ldr.w	r1, [r2, #-32]
 8013772:	42a9      	cmp	r1, r5
 8013774:	f103 0301 	add.w	r3, r3, #1
 8013778:	d1f5      	bne.n	8013766 <rcl_clock_add_jump_callback+0x46>
 801377a:	6811      	ldr	r1, [r2, #0]
 801377c:	42b1      	cmp	r1, r6
 801377e:	d1f2      	bne.n	8013766 <rcl_clock_add_jump_callback+0x46>
 8013780:	2001      	movs	r0, #1
 8013782:	e000      	b.n	8013786 <rcl_clock_add_jump_callback+0x66>
 8013784:	200b      	movs	r0, #11
 8013786:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801378a:	b002      	add	sp, #8
 801378c:	4770      	bx	lr
 801378e:	3301      	adds	r3, #1
 8013790:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8013794:	00d9      	lsls	r1, r3, #3
 8013796:	69e3      	ldr	r3, [r4, #28]
 8013798:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801379a:	4798      	blx	r3
 801379c:	4684      	mov	ip, r0
 801379e:	b1d8      	cbz	r0, 80137d8 <rcl_clock_add_jump_callback+0xb8>
 80137a0:	af08      	add	r7, sp, #32
 80137a2:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80137a6:	6060      	str	r0, [r4, #4]
 80137a8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80137aa:	eb0e 098e 	add.w	r9, lr, lr, lsl #2
 80137ae:	eb0c 08c9 	add.w	r8, ip, r9, lsl #3
 80137b2:	f84c 5039 	str.w	r5, [ip, r9, lsl #3]
 80137b6:	f108 0508 	add.w	r5, r8, #8
 80137ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80137bc:	e897 0003 	ldmia.w	r7, {r0, r1}
 80137c0:	f10e 0301 	add.w	r3, lr, #1
 80137c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80137c8:	f8c8 6020 	str.w	r6, [r8, #32]
 80137cc:	60a3      	str	r3, [r4, #8]
 80137ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137d2:	2000      	movs	r0, #0
 80137d4:	b002      	add	sp, #8
 80137d6:	4770      	bx	lr
 80137d8:	200a      	movs	r0, #10
 80137da:	e7d4      	b.n	8013786 <rcl_clock_add_jump_callback+0x66>
 80137dc:	2128      	movs	r1, #40	; 0x28
 80137de:	e7da      	b.n	8013796 <rcl_clock_add_jump_callback+0x76>

080137e0 <rcl_clock_remove_jump_callback>:
 80137e0:	2800      	cmp	r0, #0
 80137e2:	d057      	beq.n	8013894 <rcl_clock_remove_jump_callback+0xb4>
 80137e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137e8:	4607      	mov	r7, r0
 80137ea:	3014      	adds	r0, #20
 80137ec:	460c      	mov	r4, r1
 80137ee:	4615      	mov	r5, r2
 80137f0:	f7f9 ff7a 	bl	800d6e8 <rcutils_allocator_is_valid>
 80137f4:	2800      	cmp	r0, #0
 80137f6:	d03a      	beq.n	801386e <rcl_clock_remove_jump_callback+0x8e>
 80137f8:	2c00      	cmp	r4, #0
 80137fa:	d038      	beq.n	801386e <rcl_clock_remove_jump_callback+0x8e>
 80137fc:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8013800:	f1b8 0f00 	cmp.w	r8, #0
 8013804:	d00c      	beq.n	8013820 <rcl_clock_remove_jump_callback+0x40>
 8013806:	f8d7 e004 	ldr.w	lr, [r7, #4]
 801380a:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
 801380e:	4676      	mov	r6, lr
 8013810:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
 8013814:	6833      	ldr	r3, [r6, #0]
 8013816:	42a3      	cmp	r3, r4
 8013818:	d005      	beq.n	8013826 <rcl_clock_remove_jump_callback+0x46>
 801381a:	3628      	adds	r6, #40	; 0x28
 801381c:	45b4      	cmp	ip, r6
 801381e:	d1f9      	bne.n	8013814 <rcl_clock_remove_jump_callback+0x34>
 8013820:	2001      	movs	r0, #1
 8013822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013826:	6a33      	ldr	r3, [r6, #32]
 8013828:	3628      	adds	r6, #40	; 0x28
 801382a:	4566      	cmp	r6, ip
 801382c:	d02a      	beq.n	8013884 <rcl_clock_remove_jump_callback+0xa4>
 801382e:	42ab      	cmp	r3, r5
 8013830:	d1f0      	bne.n	8013814 <rcl_clock_remove_jump_callback+0x34>
 8013832:	4635      	mov	r5, r6
 8013834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013836:	f1a6 0428 	sub.w	r4, r6, #40	; 0x28
 801383a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801383c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801383e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013840:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013844:	3628      	adds	r6, #40	; 0x28
 8013846:	4566      	cmp	r6, ip
 8013848:	e884 0003 	stmia.w	r4, {r0, r1}
 801384c:	d1f1      	bne.n	8013832 <rcl_clock_remove_jump_callback+0x52>
 801384e:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8013852:	60bc      	str	r4, [r7, #8]
 8013854:	b174      	cbz	r4, 8013874 <rcl_clock_remove_jump_callback+0x94>
 8013856:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801385a:	69fb      	ldr	r3, [r7, #28]
 801385c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801385e:	00e1      	lsls	r1, r4, #3
 8013860:	4670      	mov	r0, lr
 8013862:	4798      	blx	r3
 8013864:	b1c0      	cbz	r0, 8013898 <rcl_clock_remove_jump_callback+0xb8>
 8013866:	6078      	str	r0, [r7, #4]
 8013868:	2000      	movs	r0, #0
 801386a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801386e:	200b      	movs	r0, #11
 8013870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013874:	4670      	mov	r0, lr
 8013876:	69bb      	ldr	r3, [r7, #24]
 8013878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801387a:	4798      	blx	r3
 801387c:	607c      	str	r4, [r7, #4]
 801387e:	4620      	mov	r0, r4
 8013880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013884:	42ab      	cmp	r3, r5
 8013886:	d1cb      	bne.n	8013820 <rcl_clock_remove_jump_callback+0x40>
 8013888:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 801388c:	60bc      	str	r4, [r7, #8]
 801388e:	2c00      	cmp	r4, #0
 8013890:	d1e1      	bne.n	8013856 <rcl_clock_remove_jump_callback+0x76>
 8013892:	e7ef      	b.n	8013874 <rcl_clock_remove_jump_callback+0x94>
 8013894:	200b      	movs	r0, #11
 8013896:	4770      	bx	lr
 8013898:	200a      	movs	r0, #10
 801389a:	e7e9      	b.n	8013870 <rcl_clock_remove_jump_callback+0x90>

0801389c <_rcl_timer_time_jump>:
 801389c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138a0:	4682      	mov	sl, r0
 80138a2:	b087      	sub	sp, #28
 80138a4:	4614      	mov	r4, r2
 80138a6:	b131      	cbz	r1, 80138b6 <_rcl_timer_time_jump+0x1a>
 80138a8:	7803      	ldrb	r3, [r0, #0]
 80138aa:	3b02      	subs	r3, #2
 80138ac:	2b01      	cmp	r3, #1
 80138ae:	d944      	bls.n	801393a <_rcl_timer_time_jump+0x9e>
 80138b0:	b007      	add	sp, #28
 80138b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138b6:	6813      	ldr	r3, [r2, #0]
 80138b8:	a904      	add	r1, sp, #16
 80138ba:	6818      	ldr	r0, [r3, #0]
 80138bc:	f7ff ff24 	bl	8013708 <rcl_clock_get_now>
 80138c0:	2800      	cmp	r0, #0
 80138c2:	d1f5      	bne.n	80138b0 <_rcl_timer_time_jump+0x14>
 80138c4:	6820      	ldr	r0, [r4, #0]
 80138c6:	2105      	movs	r1, #5
 80138c8:	3020      	adds	r0, #32
 80138ca:	f001 f991 	bl	8014bf0 <__atomic_load_8>
 80138ce:	4602      	mov	r2, r0
 80138d0:	6820      	ldr	r0, [r4, #0]
 80138d2:	460b      	mov	r3, r1
 80138d4:	3028      	adds	r0, #40	; 0x28
 80138d6:	2105      	movs	r1, #5
 80138d8:	4690      	mov	r8, r2
 80138da:	4699      	mov	r9, r3
 80138dc:	f001 f988 	bl	8014bf0 <__atomic_load_8>
 80138e0:	4602      	mov	r2, r0
 80138e2:	6820      	ldr	r0, [r4, #0]
 80138e4:	460b      	mov	r3, r1
 80138e6:	3018      	adds	r0, #24
 80138e8:	2105      	movs	r1, #5
 80138ea:	461f      	mov	r7, r3
 80138ec:	4616      	mov	r6, r2
 80138ee:	f001 f97f 	bl	8014bf0 <__atomic_load_8>
 80138f2:	f89a 3000 	ldrb.w	r3, [sl]
 80138f6:	9103      	str	r1, [sp, #12]
 80138f8:	3b02      	subs	r3, #2
 80138fa:	2b01      	cmp	r3, #1
 80138fc:	4605      	mov	r5, r0
 80138fe:	d93a      	bls.n	8013976 <_rcl_timer_time_jump+0xda>
 8013900:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013904:	45b2      	cmp	sl, r6
 8013906:	eb7b 0307 	sbcs.w	r3, fp, r7
 801390a:	da64      	bge.n	80139d6 <_rcl_timer_time_jump+0x13a>
 801390c:	45c2      	cmp	sl, r8
 801390e:	eb7b 0309 	sbcs.w	r3, fp, r9
 8013912:	dacd      	bge.n	80138b0 <_rcl_timer_time_jump+0x14>
 8013914:	6820      	ldr	r0, [r4, #0]
 8013916:	eb15 020a 	adds.w	r2, r5, sl
 801391a:	f04f 0505 	mov.w	r5, #5
 801391e:	eb41 030b 	adc.w	r3, r1, fp
 8013922:	3028      	adds	r0, #40	; 0x28
 8013924:	9500      	str	r5, [sp, #0]
 8013926:	f001 f997 	bl	8014c58 <__atomic_store_8>
 801392a:	6820      	ldr	r0, [r4, #0]
 801392c:	9500      	str	r5, [sp, #0]
 801392e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013932:	3020      	adds	r0, #32
 8013934:	f001 f990 	bl	8014c58 <__atomic_store_8>
 8013938:	e7ba      	b.n	80138b0 <_rcl_timer_time_jump+0x14>
 801393a:	6813      	ldr	r3, [r2, #0]
 801393c:	a904      	add	r1, sp, #16
 801393e:	6818      	ldr	r0, [r3, #0]
 8013940:	f7ff fee2 	bl	8013708 <rcl_clock_get_now>
 8013944:	2800      	cmp	r0, #0
 8013946:	d1b3      	bne.n	80138b0 <_rcl_timer_time_jump+0x14>
 8013948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801394c:	4313      	orrs	r3, r2
 801394e:	d0af      	beq.n	80138b0 <_rcl_timer_time_jump+0x14>
 8013950:	6820      	ldr	r0, [r4, #0]
 8013952:	2105      	movs	r1, #5
 8013954:	3028      	adds	r0, #40	; 0x28
 8013956:	f001 f94b 	bl	8014bf0 <__atomic_load_8>
 801395a:	9a04      	ldr	r2, [sp, #16]
 801395c:	6823      	ldr	r3, [r4, #0]
 801395e:	9e05      	ldr	r6, [sp, #20]
 8013960:	1a82      	subs	r2, r0, r2
 8013962:	f04f 0405 	mov.w	r4, #5
 8013966:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801396a:	9400      	str	r4, [sp, #0]
 801396c:	eb61 0306 	sbc.w	r3, r1, r6
 8013970:	f001 f972 	bl	8014c58 <__atomic_store_8>
 8013974:	e79c      	b.n	80138b0 <_rcl_timer_time_jump+0x14>
 8013976:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801397a:	4313      	orrs	r3, r2
 801397c:	d098      	beq.n	80138b0 <_rcl_timer_time_jump+0x14>
 801397e:	6820      	ldr	r0, [r4, #0]
 8013980:	f04f 0805 	mov.w	r8, #5
 8013984:	2300      	movs	r3, #0
 8013986:	3030      	adds	r0, #48	; 0x30
 8013988:	f8cd 8000 	str.w	r8, [sp]
 801398c:	2200      	movs	r2, #0
 801398e:	f001 f997 	bl	8014cc0 <__atomic_exchange_8>
 8013992:	4606      	mov	r6, r0
 8013994:	460f      	mov	r7, r1
 8013996:	ea56 0307 	orrs.w	r3, r6, r7
 801399a:	d089      	beq.n	80138b0 <_rcl_timer_time_jump+0x14>
 801399c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80139a0:	1b92      	subs	r2, r2, r6
 80139a2:	eb63 0301 	sbc.w	r3, r3, r1
 80139a6:	9903      	ldr	r1, [sp, #12]
 80139a8:	6820      	ldr	r0, [r4, #0]
 80139aa:	f8cd 8000 	str.w	r8, [sp]
 80139ae:	1952      	adds	r2, r2, r5
 80139b0:	eb43 0101 	adc.w	r1, r3, r1
 80139b4:	460b      	mov	r3, r1
 80139b6:	3028      	adds	r0, #40	; 0x28
 80139b8:	f001 f94e 	bl	8014c58 <__atomic_store_8>
 80139bc:	9a04      	ldr	r2, [sp, #16]
 80139be:	6820      	ldr	r0, [r4, #0]
 80139c0:	9b05      	ldr	r3, [sp, #20]
 80139c2:	f8cd 8000 	str.w	r8, [sp]
 80139c6:	1b92      	subs	r2, r2, r6
 80139c8:	f100 0020 	add.w	r0, r0, #32
 80139cc:	eb63 0307 	sbc.w	r3, r3, r7
 80139d0:	f001 f942 	bl	8014c58 <__atomic_store_8>
 80139d4:	e76c      	b.n	80138b0 <_rcl_timer_time_jump+0x14>
 80139d6:	6820      	ldr	r0, [r4, #0]
 80139d8:	3008      	adds	r0, #8
 80139da:	f003 f887 	bl	8016aec <rcl_trigger_guard_condition>
 80139de:	e767      	b.n	80138b0 <_rcl_timer_time_jump+0x14>

080139e0 <rcl_get_zero_initialized_timer>:
 80139e0:	4b01      	ldr	r3, [pc, #4]	; (80139e8 <rcl_get_zero_initialized_timer+0x8>)
 80139e2:	6818      	ldr	r0, [r3, #0]
 80139e4:	4770      	bx	lr
 80139e6:	bf00      	nop
 80139e8:	08019910 	.word	0x08019910

080139ec <rcl_timer_init>:
 80139ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139f0:	b0ad      	sub	sp, #180	; 0xb4
 80139f2:	4604      	mov	r4, r0
 80139f4:	a839      	add	r0, sp, #228	; 0xe4
 80139f6:	460d      	mov	r5, r1
 80139f8:	4690      	mov	r8, r2
 80139fa:	f7f9 fe75 	bl	800d6e8 <rcutils_allocator_is_valid>
 80139fe:	2800      	cmp	r0, #0
 8013a00:	d072      	beq.n	8013ae8 <rcl_timer_init+0xfc>
 8013a02:	2c00      	cmp	r4, #0
 8013a04:	d070      	beq.n	8013ae8 <rcl_timer_init+0xfc>
 8013a06:	2d00      	cmp	r5, #0
 8013a08:	d06e      	beq.n	8013ae8 <rcl_timer_init+0xfc>
 8013a0a:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8013a0e:	2a00      	cmp	r2, #0
 8013a10:	f173 0300 	sbcs.w	r3, r3, #0
 8013a14:	db68      	blt.n	8013ae8 <rcl_timer_init+0xfc>
 8013a16:	6823      	ldr	r3, [r4, #0]
 8013a18:	b12b      	cbz	r3, 8013a26 <rcl_timer_init+0x3a>
 8013a1a:	f04f 0a64 	mov.w	sl, #100	; 0x64
 8013a1e:	4650      	mov	r0, sl
 8013a20:	b02d      	add	sp, #180	; 0xb4
 8013a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a26:	a90a      	add	r1, sp, #40	; 0x28
 8013a28:	4628      	mov	r0, r5
 8013a2a:	f7ff fe6d 	bl	8013708 <rcl_clock_get_now>
 8013a2e:	4682      	mov	sl, r0
 8013a30:	2800      	cmp	r0, #0
 8013a32:	d1f4      	bne.n	8013a1e <rcl_timer_init+0x32>
 8013a34:	f10d 0920 	add.w	r9, sp, #32
 8013a38:	4648      	mov	r0, r9
 8013a3a:	e9cd 5818 	strd	r5, r8, [sp, #96]	; 0x60
 8013a3e:	f002 ff59 	bl	80168f4 <rcl_get_zero_initialized_guard_condition>
 8013a42:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013a46:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8013a4a:	f10d 0934 	add.w	r9, sp, #52	; 0x34
 8013a4e:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013a52:	4648      	mov	r0, r9
 8013a54:	f003 f830 	bl	8016ab8 <rcl_guard_condition_get_default_options>
 8013a58:	ab0f      	add	r3, sp, #60	; 0x3c
 8013a5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013a5e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013a62:	4641      	mov	r1, r8
 8013a64:	e899 000c 	ldmia.w	r9, {r2, r3}
 8013a68:	4658      	mov	r0, fp
 8013a6a:	f002 ff4d 	bl	8016908 <rcl_guard_condition_init>
 8013a6e:	4682      	mov	sl, r0
 8013a70:	2800      	cmp	r0, #0
 8013a72:	d1d4      	bne.n	8013a1e <rcl_timer_init+0x32>
 8013a74:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013a76:	f893 c000 	ldrb.w	ip, [r3]
 8013a7a:	f1bc 0f01 	cmp.w	ip, #1
 8013a7e:	d039      	beq.n	8013af4 <rcl_timer_init+0x108>
 8013a80:	f10d 0ce4 	add.w	ip, sp, #228	; 0xe4
 8013a84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a88:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 8013a8c:	9e36      	ldr	r6, [sp, #216]	; 0xd8
 8013a8e:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 8013a92:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013a96:	eb18 0606 	adds.w	r6, r8, r6
 8013a9a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8013a9c:	9606      	str	r6, [sp, #24]
 8013a9e:	e9dd 6736 	ldrd	r6, r7, [sp, #216]	; 0xd8
 8013aa2:	eb49 0303 	adc.w	r3, r9, r3
 8013aa6:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8013aa8:	9307      	str	r3, [sp, #28]
 8013aaa:	921c      	str	r2, [sp, #112]	; 0x70
 8013aac:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
 8013ab0:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8013ab4:	f8dc 3000 	ldr.w	r3, [ip]
 8013ab8:	f8ce 3000 	str.w	r3, [lr]
 8013abc:	2000      	movs	r0, #0
 8013abe:	2100      	movs	r1, #0
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
 8013ac6:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8013ac8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8013aca:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
 8013ace:	2050      	movs	r0, #80	; 0x50
 8013ad0:	e9cd 6722 	strd	r6, r7, [sp, #136]	; 0x88
 8013ad4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 8013ad8:	4798      	blx	r3
 8013ada:	6020      	str	r0, [r4, #0]
 8013adc:	b360      	cbz	r0, 8013b38 <rcl_timer_init+0x14c>
 8013ade:	2250      	movs	r2, #80	; 0x50
 8013ae0:	a918      	add	r1, sp, #96	; 0x60
 8013ae2:	f003 f94b 	bl	8016d7c <memcpy>
 8013ae6:	e79a      	b.n	8013a1e <rcl_timer_init+0x32>
 8013ae8:	f04f 0a0b 	mov.w	sl, #11
 8013aec:	4650      	mov	r0, sl
 8013aee:	b02d      	add	sp, #180	; 0xb4
 8013af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013af4:	2201      	movs	r2, #1
 8013af6:	2300      	movs	r3, #0
 8013af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013b00:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8013b04:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8013b08:	ab14      	add	r3, sp, #80	; 0x50
 8013b0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013b0c:	f88d c048 	strb.w	ip, [sp, #72]	; 0x48
 8013b10:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8013b50 <rcl_timer_init+0x164>
 8013b14:	9405      	str	r4, [sp, #20]
 8013b16:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013b1a:	f8cd c010 	str.w	ip, [sp, #16]
 8013b1e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013b22:	4628      	mov	r0, r5
 8013b24:	f7ff fdfc 	bl	8013720 <rcl_clock_add_jump_callback>
 8013b28:	4680      	mov	r8, r0
 8013b2a:	2800      	cmp	r0, #0
 8013b2c:	d0a8      	beq.n	8013a80 <rcl_timer_init+0x94>
 8013b2e:	4658      	mov	r0, fp
 8013b30:	f002 ff9c 	bl	8016a6c <rcl_guard_condition_fini>
 8013b34:	46c2      	mov	sl, r8
 8013b36:	e772      	b.n	8013a1e <rcl_timer_init+0x32>
 8013b38:	4658      	mov	r0, fp
 8013b3a:	f002 ff97 	bl	8016a6c <rcl_guard_condition_fini>
 8013b3e:	4904      	ldr	r1, [pc, #16]	; (8013b50 <rcl_timer_init+0x164>)
 8013b40:	4622      	mov	r2, r4
 8013b42:	4628      	mov	r0, r5
 8013b44:	f7ff fe4c 	bl	80137e0 <rcl_clock_remove_jump_callback>
 8013b48:	f04f 0a0a 	mov.w	sl, #10
 8013b4c:	e767      	b.n	8013a1e <rcl_timer_init+0x32>
 8013b4e:	bf00      	nop
 8013b50:	0801389d 	.word	0x0801389d

08013b54 <rcl_timer_call>:
 8013b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b58:	b08b      	sub	sp, #44	; 0x2c
 8013b5a:	2800      	cmp	r0, #0
 8013b5c:	d06e      	beq.n	8013c3c <rcl_timer_call+0xe8>
 8013b5e:	6803      	ldr	r3, [r0, #0]
 8013b60:	f3bf 8f5b 	dmb	ish
 8013b64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013b68:	f3bf 8f5b 	dmb	ish
 8013b6c:	4604      	mov	r4, r0
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d159      	bne.n	8013c26 <rcl_timer_call+0xd2>
 8013b72:	6803      	ldr	r3, [r0, #0]
 8013b74:	a908      	add	r1, sp, #32
 8013b76:	6818      	ldr	r0, [r3, #0]
 8013b78:	f7ff fdc6 	bl	8013708 <rcl_clock_get_now>
 8013b7c:	4605      	mov	r5, r0
 8013b7e:	2800      	cmp	r0, #0
 8013b80:	d14d      	bne.n	8013c1e <rcl_timer_call+0xca>
 8013b82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013b86:	2a00      	cmp	r2, #0
 8013b88:	f173 0100 	sbcs.w	r1, r3, #0
 8013b8c:	db51      	blt.n	8013c32 <rcl_timer_call+0xde>
 8013b8e:	6820      	ldr	r0, [r4, #0]
 8013b90:	2605      	movs	r6, #5
 8013b92:	9600      	str	r6, [sp, #0]
 8013b94:	3020      	adds	r0, #32
 8013b96:	f001 f893 	bl	8014cc0 <__atomic_exchange_8>
 8013b9a:	6822      	ldr	r2, [r4, #0]
 8013b9c:	f3bf 8f5b 	dmb	ish
 8013ba0:	4682      	mov	sl, r0
 8013ba2:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8013ba6:	f3bf 8f5b 	dmb	ish
 8013baa:	6820      	ldr	r0, [r4, #0]
 8013bac:	460b      	mov	r3, r1
 8013bae:	3028      	adds	r0, #40	; 0x28
 8013bb0:	4631      	mov	r1, r6
 8013bb2:	9305      	str	r3, [sp, #20]
 8013bb4:	f001 f81c 	bl	8014bf0 <__atomic_load_8>
 8013bb8:	4603      	mov	r3, r0
 8013bba:	6820      	ldr	r0, [r4, #0]
 8013bbc:	460a      	mov	r2, r1
 8013bbe:	3018      	adds	r0, #24
 8013bc0:	4631      	mov	r1, r6
 8013bc2:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8013bc6:	f001 f813 	bl	8014bf0 <__atomic_load_8>
 8013bca:	9b04      	ldr	r3, [sp, #16]
 8013bcc:	9a03      	ldr	r2, [sp, #12]
 8013bce:	4606      	mov	r6, r0
 8013bd0:	460f      	mov	r7, r1
 8013bd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013bd6:	eb13 0806 	adds.w	r8, r3, r6
 8013bda:	eb42 0907 	adc.w	r9, r2, r7
 8013bde:	4580      	cmp	r8, r0
 8013be0:	eb79 0301 	sbcs.w	r3, r9, r1
 8013be4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013be8:	460a      	mov	r2, r1
 8013bea:	da04      	bge.n	8013bf6 <rcl_timer_call+0xa2>
 8013bec:	ea56 0307 	orrs.w	r3, r6, r7
 8013bf0:	d129      	bne.n	8013c46 <rcl_timer_call+0xf2>
 8013bf2:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8013bf6:	6820      	ldr	r0, [r4, #0]
 8013bf8:	2105      	movs	r1, #5
 8013bfa:	4642      	mov	r2, r8
 8013bfc:	464b      	mov	r3, r9
 8013bfe:	3028      	adds	r0, #40	; 0x28
 8013c00:	9100      	str	r1, [sp, #0]
 8013c02:	f001 f829 	bl	8014c58 <__atomic_store_8>
 8013c06:	f1bb 0f00 	cmp.w	fp, #0
 8013c0a:	d008      	beq.n	8013c1e <rcl_timer_call+0xca>
 8013c0c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013c10:	9905      	ldr	r1, [sp, #20]
 8013c12:	ebb2 020a 	subs.w	r2, r2, sl
 8013c16:	4620      	mov	r0, r4
 8013c18:	eb63 0301 	sbc.w	r3, r3, r1
 8013c1c:	47d8      	blx	fp
 8013c1e:	4628      	mov	r0, r5
 8013c20:	b00b      	add	sp, #44	; 0x2c
 8013c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c26:	f240 3521 	movw	r5, #801	; 0x321
 8013c2a:	4628      	mov	r0, r5
 8013c2c:	b00b      	add	sp, #44	; 0x2c
 8013c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c32:	2501      	movs	r5, #1
 8013c34:	4628      	mov	r0, r5
 8013c36:	b00b      	add	sp, #44	; 0x2c
 8013c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c3c:	250b      	movs	r5, #11
 8013c3e:	4628      	mov	r0, r5
 8013c40:	b00b      	add	sp, #44	; 0x2c
 8013c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c46:	ebb0 0008 	subs.w	r0, r0, r8
 8013c4a:	eb62 0109 	sbc.w	r1, r2, r9
 8013c4e:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8013c52:	463b      	mov	r3, r7
 8013c54:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8013c58:	4632      	mov	r2, r6
 8013c5a:	f7ec fb21 	bl	80002a0 <__aeabi_ldivmod>
 8013c5e:	1c43      	adds	r3, r0, #1
 8013c60:	f141 0100 	adc.w	r1, r1, #0
 8013c64:	fb00 7007 	mla	r0, r0, r7, r7
 8013c68:	fb06 0001 	mla	r0, r6, r1, r0
 8013c6c:	fba3 6706 	umull	r6, r7, r3, r6
 8013c70:	4407      	add	r7, r0
 8013c72:	eb18 0806 	adds.w	r8, r8, r6
 8013c76:	eb49 0907 	adc.w	r9, r9, r7
 8013c7a:	e7bc      	b.n	8013bf6 <rcl_timer_call+0xa2>

08013c7c <rcl_timer_is_ready>:
 8013c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c80:	b082      	sub	sp, #8
 8013c82:	b310      	cbz	r0, 8013cca <rcl_timer_is_ready+0x4e>
 8013c84:	4688      	mov	r8, r1
 8013c86:	b301      	cbz	r1, 8013cca <rcl_timer_is_ready+0x4e>
 8013c88:	6803      	ldr	r3, [r0, #0]
 8013c8a:	4604      	mov	r4, r0
 8013c8c:	4669      	mov	r1, sp
 8013c8e:	6818      	ldr	r0, [r3, #0]
 8013c90:	f7ff fd3a 	bl	8013708 <rcl_clock_get_now>
 8013c94:	4605      	mov	r5, r0
 8013c96:	b118      	cbz	r0, 8013ca0 <rcl_timer_is_ready+0x24>
 8013c98:	4628      	mov	r0, r5
 8013c9a:	b002      	add	sp, #8
 8013c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ca0:	6820      	ldr	r0, [r4, #0]
 8013ca2:	2105      	movs	r1, #5
 8013ca4:	3028      	adds	r0, #40	; 0x28
 8013ca6:	f000 ffa3 	bl	8014bf0 <__atomic_load_8>
 8013caa:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013cae:	1ac6      	subs	r6, r0, r3
 8013cb0:	eb61 0702 	sbc.w	r7, r1, r2
 8013cb4:	2e01      	cmp	r6, #1
 8013cb6:	f177 0300 	sbcs.w	r3, r7, #0
 8013cba:	db0b      	blt.n	8013cd4 <rcl_timer_is_ready+0x58>
 8013cbc:	462b      	mov	r3, r5
 8013cbe:	4628      	mov	r0, r5
 8013cc0:	f888 3000 	strb.w	r3, [r8]
 8013cc4:	b002      	add	sp, #8
 8013cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cca:	250b      	movs	r5, #11
 8013ccc:	4628      	mov	r0, r5
 8013cce:	b002      	add	sp, #8
 8013cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cd4:	6823      	ldr	r3, [r4, #0]
 8013cd6:	f3bf 8f5b 	dmb	ish
 8013cda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013cde:	f3bf 8f5b 	dmb	ish
 8013ce2:	fab3 f383 	clz	r3, r3
 8013ce6:	095b      	lsrs	r3, r3, #5
 8013ce8:	e7e9      	b.n	8013cbe <rcl_timer_is_ready+0x42>
 8013cea:	bf00      	nop

08013cec <rcl_timer_get_time_until_next_call>:
 8013cec:	b570      	push	{r4, r5, r6, lr}
 8013cee:	b082      	sub	sp, #8
 8013cf0:	b1d8      	cbz	r0, 8013d2a <rcl_timer_get_time_until_next_call+0x3e>
 8013cf2:	460d      	mov	r5, r1
 8013cf4:	b1c9      	cbz	r1, 8013d2a <rcl_timer_get_time_until_next_call+0x3e>
 8013cf6:	6803      	ldr	r3, [r0, #0]
 8013cf8:	4604      	mov	r4, r0
 8013cfa:	4669      	mov	r1, sp
 8013cfc:	6818      	ldr	r0, [r3, #0]
 8013cfe:	f7ff fd03 	bl	8013708 <rcl_clock_get_now>
 8013d02:	4606      	mov	r6, r0
 8013d04:	b110      	cbz	r0, 8013d0c <rcl_timer_get_time_until_next_call+0x20>
 8013d06:	4630      	mov	r0, r6
 8013d08:	b002      	add	sp, #8
 8013d0a:	bd70      	pop	{r4, r5, r6, pc}
 8013d0c:	6820      	ldr	r0, [r4, #0]
 8013d0e:	2105      	movs	r1, #5
 8013d10:	3028      	adds	r0, #40	; 0x28
 8013d12:	f000 ff6d 	bl	8014bf0 <__atomic_load_8>
 8013d16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013d1a:	1ac0      	subs	r0, r0, r3
 8013d1c:	eb61 0102 	sbc.w	r1, r1, r2
 8013d20:	e9c5 0100 	strd	r0, r1, [r5]
 8013d24:	4630      	mov	r0, r6
 8013d26:	b002      	add	sp, #8
 8013d28:	bd70      	pop	{r4, r5, r6, pc}
 8013d2a:	260b      	movs	r6, #11
 8013d2c:	4630      	mov	r0, r6
 8013d2e:	b002      	add	sp, #8
 8013d30:	bd70      	pop	{r4, r5, r6, pc}
 8013d32:	bf00      	nop

08013d34 <rcl_timer_is_canceled>:
 8013d34:	b168      	cbz	r0, 8013d52 <rcl_timer_is_canceled+0x1e>
 8013d36:	b161      	cbz	r1, 8013d52 <rcl_timer_is_canceled+0x1e>
 8013d38:	6803      	ldr	r3, [r0, #0]
 8013d3a:	f3bf 8f5b 	dmb	ish
 8013d3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013d42:	f3bf 8f5b 	dmb	ish
 8013d46:	3b00      	subs	r3, #0
 8013d48:	bf18      	it	ne
 8013d4a:	2301      	movne	r3, #1
 8013d4c:	700b      	strb	r3, [r1, #0]
 8013d4e:	2000      	movs	r0, #0
 8013d50:	4770      	bx	lr
 8013d52:	200b      	movs	r0, #11
 8013d54:	4770      	bx	lr
 8013d56:	bf00      	nop

08013d58 <rcl_timer_get_guard_condition>:
 8013d58:	b130      	cbz	r0, 8013d68 <rcl_timer_get_guard_condition+0x10>
 8013d5a:	6800      	ldr	r0, [r0, #0]
 8013d5c:	b120      	cbz	r0, 8013d68 <rcl_timer_get_guard_condition+0x10>
 8013d5e:	68c3      	ldr	r3, [r0, #12]
 8013d60:	b10b      	cbz	r3, 8013d66 <rcl_timer_get_guard_condition+0xe>
 8013d62:	3008      	adds	r0, #8
 8013d64:	4770      	bx	lr
 8013d66:	4618      	mov	r0, r3
 8013d68:	4770      	bx	lr
 8013d6a:	bf00      	nop

08013d6c <rcl_validate_enclave_name_with_size>:
 8013d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d6e:	b0c3      	sub	sp, #268	; 0x10c
 8013d70:	b1d0      	cbz	r0, 8013da8 <rcl_validate_enclave_name_with_size+0x3c>
 8013d72:	4615      	mov	r5, r2
 8013d74:	b1c2      	cbz	r2, 8013da8 <rcl_validate_enclave_name_with_size+0x3c>
 8013d76:	461f      	mov	r7, r3
 8013d78:	466a      	mov	r2, sp
 8013d7a:	ab01      	add	r3, sp, #4
 8013d7c:	460e      	mov	r6, r1
 8013d7e:	f001 f993 	bl	80150a8 <rmw_validate_namespace_with_size>
 8013d82:	4604      	mov	r4, r0
 8013d84:	b9e0      	cbnz	r0, 8013dc0 <rcl_validate_enclave_name_with_size+0x54>
 8013d86:	9b00      	ldr	r3, [sp, #0]
 8013d88:	b923      	cbnz	r3, 8013d94 <rcl_validate_enclave_name_with_size+0x28>
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	602b      	str	r3, [r5, #0]
 8013d8e:	4620      	mov	r0, r4
 8013d90:	b043      	add	sp, #268	; 0x10c
 8013d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d94:	2b07      	cmp	r3, #7
 8013d96:	d00b      	beq.n	8013db0 <rcl_validate_enclave_name_with_size+0x44>
 8013d98:	1e5a      	subs	r2, r3, #1
 8013d9a:	2a05      	cmp	r2, #5
 8013d9c:	d82e      	bhi.n	8013dfc <rcl_validate_enclave_name_with_size+0x90>
 8013d9e:	e8df f002 	tbb	[pc, r2]
 8013da2:	211e      	.short	0x211e
 8013da4:	152a2724 	.word	0x152a2724
 8013da8:	240b      	movs	r4, #11
 8013daa:	4620      	mov	r0, r4
 8013dac:	b043      	add	sp, #268	; 0x10c
 8013dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013db0:	2eff      	cmp	r6, #255	; 0xff
 8013db2:	d9ea      	bls.n	8013d8a <rcl_validate_enclave_name_with_size+0x1e>
 8013db4:	602b      	str	r3, [r5, #0]
 8013db6:	2f00      	cmp	r7, #0
 8013db8:	d0e9      	beq.n	8013d8e <rcl_validate_enclave_name_with_size+0x22>
 8013dba:	23fe      	movs	r3, #254	; 0xfe
 8013dbc:	603b      	str	r3, [r7, #0]
 8013dbe:	e7e6      	b.n	8013d8e <rcl_validate_enclave_name_with_size+0x22>
 8013dc0:	f7fe fdda 	bl	8012978 <rcl_convert_rmw_ret_to_rcl_ret>
 8013dc4:	4604      	mov	r4, r0
 8013dc6:	4620      	mov	r0, r4
 8013dc8:	b043      	add	sp, #268	; 0x10c
 8013dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013dcc:	2306      	movs	r3, #6
 8013dce:	602b      	str	r3, [r5, #0]
 8013dd0:	2f00      	cmp	r7, #0
 8013dd2:	d0dc      	beq.n	8013d8e <rcl_validate_enclave_name_with_size+0x22>
 8013dd4:	9b01      	ldr	r3, [sp, #4]
 8013dd6:	603b      	str	r3, [r7, #0]
 8013dd8:	4620      	mov	r0, r4
 8013dda:	b043      	add	sp, #268	; 0x10c
 8013ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013dde:	2301      	movs	r3, #1
 8013de0:	602b      	str	r3, [r5, #0]
 8013de2:	e7f5      	b.n	8013dd0 <rcl_validate_enclave_name_with_size+0x64>
 8013de4:	2302      	movs	r3, #2
 8013de6:	602b      	str	r3, [r5, #0]
 8013de8:	e7f2      	b.n	8013dd0 <rcl_validate_enclave_name_with_size+0x64>
 8013dea:	2303      	movs	r3, #3
 8013dec:	602b      	str	r3, [r5, #0]
 8013dee:	e7ef      	b.n	8013dd0 <rcl_validate_enclave_name_with_size+0x64>
 8013df0:	2304      	movs	r3, #4
 8013df2:	602b      	str	r3, [r5, #0]
 8013df4:	e7ec      	b.n	8013dd0 <rcl_validate_enclave_name_with_size+0x64>
 8013df6:	2305      	movs	r3, #5
 8013df8:	602b      	str	r3, [r5, #0]
 8013dfa:	e7e9      	b.n	8013dd0 <rcl_validate_enclave_name_with_size+0x64>
 8013dfc:	4a03      	ldr	r2, [pc, #12]	; (8013e0c <rcl_validate_enclave_name_with_size+0xa0>)
 8013dfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013e02:	a802      	add	r0, sp, #8
 8013e04:	f001 f8de 	bl	8014fc4 <rcutils_snprintf>
 8013e08:	2401      	movs	r4, #1
 8013e0a:	e7c0      	b.n	8013d8e <rcl_validate_enclave_name_with_size+0x22>
 8013e0c:	08019914 	.word	0x08019914

08013e10 <rcl_validate_enclave_name>:
 8013e10:	b168      	cbz	r0, 8013e2e <rcl_validate_enclave_name+0x1e>
 8013e12:	b570      	push	{r4, r5, r6, lr}
 8013e14:	460d      	mov	r5, r1
 8013e16:	4616      	mov	r6, r2
 8013e18:	4604      	mov	r4, r0
 8013e1a:	f7ec f9e3 	bl	80001e4 <strlen>
 8013e1e:	4633      	mov	r3, r6
 8013e20:	4601      	mov	r1, r0
 8013e22:	462a      	mov	r2, r5
 8013e24:	4620      	mov	r0, r4
 8013e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e2a:	f7ff bf9f 	b.w	8013d6c <rcl_validate_enclave_name_with_size>
 8013e2e:	200b      	movs	r0, #11
 8013e30:	4770      	bx	lr
 8013e32:	bf00      	nop

08013e34 <rcl_validate_topic_name>:
 8013e34:	2800      	cmp	r0, #0
 8013e36:	f000 808b 	beq.w	8013f50 <rcl_validate_topic_name+0x11c>
 8013e3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e3e:	460e      	mov	r6, r1
 8013e40:	2900      	cmp	r1, #0
 8013e42:	f000 808c 	beq.w	8013f5e <rcl_validate_topic_name+0x12a>
 8013e46:	4617      	mov	r7, r2
 8013e48:	4605      	mov	r5, r0
 8013e4a:	f7ec f9cb 	bl	80001e4 <strlen>
 8013e4e:	b1b0      	cbz	r0, 8013e7e <rcl_validate_topic_name+0x4a>
 8013e50:	f895 9000 	ldrb.w	r9, [r5]
 8013e54:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8014004 <rcl_validate_topic_name+0x1d0>
 8013e58:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8013e5c:	f013 0304 	ands.w	r3, r3, #4
 8013e60:	d178      	bne.n	8013f54 <rcl_validate_topic_name+0x120>
 8013e62:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8013e66:	f815 2008 	ldrb.w	r2, [r5, r8]
 8013e6a:	2a2f      	cmp	r2, #47	; 0x2f
 8013e6c:	d10e      	bne.n	8013e8c <rcl_validate_topic_name+0x58>
 8013e6e:	2202      	movs	r2, #2
 8013e70:	6032      	str	r2, [r6, #0]
 8013e72:	b36f      	cbz	r7, 8013ed0 <rcl_validate_topic_name+0x9c>
 8013e74:	f8c7 8000 	str.w	r8, [r7]
 8013e78:	4618      	mov	r0, r3
 8013e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e7e:	2301      	movs	r3, #1
 8013e80:	6033      	str	r3, [r6, #0]
 8013e82:	b32f      	cbz	r7, 8013ed0 <rcl_validate_topic_name+0x9c>
 8013e84:	2000      	movs	r0, #0
 8013e86:	6038      	str	r0, [r7, #0]
 8013e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e8c:	461c      	mov	r4, r3
 8013e8e:	4619      	mov	r1, r3
 8013e90:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8013e94:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8013e98:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013e9c:	f1be 0f09 	cmp.w	lr, #9
 8013ea0:	d946      	bls.n	8013f30 <rcl_validate_topic_name+0xfc>
 8013ea2:	f022 0e20 	bic.w	lr, r2, #32
 8013ea6:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8013eaa:	f1be 0f19 	cmp.w	lr, #25
 8013eae:	d93f      	bls.n	8013f30 <rcl_validate_topic_name+0xfc>
 8013eb0:	2a5f      	cmp	r2, #95	; 0x5f
 8013eb2:	d014      	beq.n	8013ede <rcl_validate_topic_name+0xaa>
 8013eb4:	2a2f      	cmp	r2, #47	; 0x2f
 8013eb6:	d05b      	beq.n	8013f70 <rcl_validate_topic_name+0x13c>
 8013eb8:	2a7e      	cmp	r2, #126	; 0x7e
 8013eba:	d052      	beq.n	8013f62 <rcl_validate_topic_name+0x12e>
 8013ebc:	2a7b      	cmp	r2, #123	; 0x7b
 8013ebe:	d00a      	beq.n	8013ed6 <rcl_validate_topic_name+0xa2>
 8013ec0:	2a7d      	cmp	r2, #125	; 0x7d
 8013ec2:	d16f      	bne.n	8013fa4 <rcl_validate_topic_name+0x170>
 8013ec4:	2c00      	cmp	r4, #0
 8013ec6:	d15e      	bne.n	8013f86 <rcl_validate_topic_name+0x152>
 8013ec8:	2305      	movs	r3, #5
 8013eca:	6033      	str	r3, [r6, #0]
 8013ecc:	b107      	cbz	r7, 8013ed0 <rcl_validate_topic_name+0x9c>
 8013ece:	6039      	str	r1, [r7, #0]
 8013ed0:	2000      	movs	r0, #0
 8013ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ed6:	2c00      	cmp	r4, #0
 8013ed8:	d14c      	bne.n	8013f74 <rcl_validate_topic_name+0x140>
 8013eda:	460b      	mov	r3, r1
 8013edc:	2401      	movs	r4, #1
 8013ede:	3101      	adds	r1, #1
 8013ee0:	4288      	cmp	r0, r1
 8013ee2:	d1d7      	bne.n	8013e94 <rcl_validate_topic_name+0x60>
 8013ee4:	2c00      	cmp	r4, #0
 8013ee6:	d156      	bne.n	8013f96 <rcl_validate_topic_name+0x162>
 8013ee8:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8013eec:	4620      	mov	r0, r4
 8013eee:	d061      	beq.n	8013fb4 <rcl_validate_topic_name+0x180>
 8013ef0:	f108 0e01 	add.w	lr, r8, #1
 8013ef4:	e007      	b.n	8013f06 <rcl_validate_topic_name+0xd2>
 8013ef6:	2801      	cmp	r0, #1
 8013ef8:	d047      	beq.n	8013f8a <rcl_validate_topic_name+0x156>
 8013efa:	461a      	mov	r2, r3
 8013efc:	4291      	cmp	r1, r2
 8013efe:	4618      	mov	r0, r3
 8013f00:	f105 0501 	add.w	r5, r5, #1
 8013f04:	d944      	bls.n	8013f90 <rcl_validate_topic_name+0x15c>
 8013f06:	4580      	cmp	r8, r0
 8013f08:	f100 0301 	add.w	r3, r0, #1
 8013f0c:	d037      	beq.n	8013f7e <rcl_validate_topic_name+0x14a>
 8013f0e:	782a      	ldrb	r2, [r5, #0]
 8013f10:	2a2f      	cmp	r2, #47	; 0x2f
 8013f12:	d1f0      	bne.n	8013ef6 <rcl_validate_topic_name+0xc2>
 8013f14:	786b      	ldrb	r3, [r5, #1]
 8013f16:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8013f1a:	1c43      	adds	r3, r0, #1
 8013f1c:	0760      	lsls	r0, r4, #29
 8013f1e:	461a      	mov	r2, r3
 8013f20:	d5ec      	bpl.n	8013efc <rcl_validate_topic_name+0xc8>
 8013f22:	2304      	movs	r3, #4
 8013f24:	6033      	str	r3, [r6, #0]
 8013f26:	2f00      	cmp	r7, #0
 8013f28:	d0d2      	beq.n	8013ed0 <rcl_validate_topic_name+0x9c>
 8013f2a:	603a      	str	r2, [r7, #0]
 8013f2c:	2000      	movs	r0, #0
 8013f2e:	e7ab      	b.n	8013e88 <rcl_validate_topic_name+0x54>
 8013f30:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013f34:	0752      	lsls	r2, r2, #29
 8013f36:	d5d2      	bpl.n	8013ede <rcl_validate_topic_name+0xaa>
 8013f38:	2c00      	cmp	r4, #0
 8013f3a:	d0d0      	beq.n	8013ede <rcl_validate_topic_name+0xaa>
 8013f3c:	2900      	cmp	r1, #0
 8013f3e:	d0ce      	beq.n	8013ede <rcl_validate_topic_name+0xaa>
 8013f40:	1e4a      	subs	r2, r1, #1
 8013f42:	429a      	cmp	r2, r3
 8013f44:	d1cb      	bne.n	8013ede <rcl_validate_topic_name+0xaa>
 8013f46:	2309      	movs	r3, #9
 8013f48:	6033      	str	r3, [r6, #0]
 8013f4a:	2f00      	cmp	r7, #0
 8013f4c:	d1bf      	bne.n	8013ece <rcl_validate_topic_name+0x9a>
 8013f4e:	e7bf      	b.n	8013ed0 <rcl_validate_topic_name+0x9c>
 8013f50:	200b      	movs	r0, #11
 8013f52:	4770      	bx	lr
 8013f54:	2304      	movs	r3, #4
 8013f56:	6033      	str	r3, [r6, #0]
 8013f58:	2f00      	cmp	r7, #0
 8013f5a:	d193      	bne.n	8013e84 <rcl_validate_topic_name+0x50>
 8013f5c:	e7b8      	b.n	8013ed0 <rcl_validate_topic_name+0x9c>
 8013f5e:	200b      	movs	r0, #11
 8013f60:	e792      	b.n	8013e88 <rcl_validate_topic_name+0x54>
 8013f62:	2900      	cmp	r1, #0
 8013f64:	d0bb      	beq.n	8013ede <rcl_validate_topic_name+0xaa>
 8013f66:	2306      	movs	r3, #6
 8013f68:	6033      	str	r3, [r6, #0]
 8013f6a:	2f00      	cmp	r7, #0
 8013f6c:	d1af      	bne.n	8013ece <rcl_validate_topic_name+0x9a>
 8013f6e:	e7af      	b.n	8013ed0 <rcl_validate_topic_name+0x9c>
 8013f70:	2c00      	cmp	r4, #0
 8013f72:	d0b4      	beq.n	8013ede <rcl_validate_topic_name+0xaa>
 8013f74:	2308      	movs	r3, #8
 8013f76:	6033      	str	r3, [r6, #0]
 8013f78:	2f00      	cmp	r7, #0
 8013f7a:	d1a8      	bne.n	8013ece <rcl_validate_topic_name+0x9a>
 8013f7c:	e7a8      	b.n	8013ed0 <rcl_validate_topic_name+0x9c>
 8013f7e:	4672      	mov	r2, lr
 8013f80:	f108 0301 	add.w	r3, r8, #1
 8013f84:	e7ba      	b.n	8013efc <rcl_validate_topic_name+0xc8>
 8013f86:	2400      	movs	r4, #0
 8013f88:	e7a9      	b.n	8013ede <rcl_validate_topic_name+0xaa>
 8013f8a:	2202      	movs	r2, #2
 8013f8c:	4613      	mov	r3, r2
 8013f8e:	e7b5      	b.n	8013efc <rcl_validate_topic_name+0xc8>
 8013f90:	2000      	movs	r0, #0
 8013f92:	6030      	str	r0, [r6, #0]
 8013f94:	e778      	b.n	8013e88 <rcl_validate_topic_name+0x54>
 8013f96:	2205      	movs	r2, #5
 8013f98:	6032      	str	r2, [r6, #0]
 8013f9a:	2f00      	cmp	r7, #0
 8013f9c:	d098      	beq.n	8013ed0 <rcl_validate_topic_name+0x9c>
 8013f9e:	603b      	str	r3, [r7, #0]
 8013fa0:	2000      	movs	r0, #0
 8013fa2:	e771      	b.n	8013e88 <rcl_validate_topic_name+0x54>
 8013fa4:	2c00      	cmp	r4, #0
 8013fa6:	bf14      	ite	ne
 8013fa8:	2308      	movne	r3, #8
 8013faa:	2303      	moveq	r3, #3
 8013fac:	6033      	str	r3, [r6, #0]
 8013fae:	2f00      	cmp	r7, #0
 8013fb0:	d18d      	bne.n	8013ece <rcl_validate_topic_name+0x9a>
 8013fb2:	e78d      	b.n	8013ed0 <rcl_validate_topic_name+0x9c>
 8013fb4:	f108 0401 	add.w	r4, r8, #1
 8013fb8:	e007      	b.n	8013fca <rcl_validate_topic_name+0x196>
 8013fba:	2801      	cmp	r0, #1
 8013fbc:	d019      	beq.n	8013ff2 <rcl_validate_topic_name+0x1be>
 8013fbe:	461a      	mov	r2, r3
 8013fc0:	4291      	cmp	r1, r2
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	f105 0501 	add.w	r5, r5, #1
 8013fc8:	d9e2      	bls.n	8013f90 <rcl_validate_topic_name+0x15c>
 8013fca:	4580      	cmp	r8, r0
 8013fcc:	f100 0301 	add.w	r3, r0, #1
 8013fd0:	d00b      	beq.n	8013fea <rcl_validate_topic_name+0x1b6>
 8013fd2:	782a      	ldrb	r2, [r5, #0]
 8013fd4:	2a2f      	cmp	r2, #47	; 0x2f
 8013fd6:	d1f0      	bne.n	8013fba <rcl_validate_topic_name+0x186>
 8013fd8:	786b      	ldrb	r3, [r5, #1]
 8013fda:	f81c e003 	ldrb.w	lr, [ip, r3]
 8013fde:	1c43      	adds	r3, r0, #1
 8013fe0:	f01e 0f04 	tst.w	lr, #4
 8013fe4:	461a      	mov	r2, r3
 8013fe6:	d0eb      	beq.n	8013fc0 <rcl_validate_topic_name+0x18c>
 8013fe8:	e79b      	b.n	8013f22 <rcl_validate_topic_name+0xee>
 8013fea:	4622      	mov	r2, r4
 8013fec:	f108 0301 	add.w	r3, r8, #1
 8013ff0:	e7e6      	b.n	8013fc0 <rcl_validate_topic_name+0x18c>
 8013ff2:	2307      	movs	r3, #7
 8013ff4:	6033      	str	r3, [r6, #0]
 8013ff6:	2f00      	cmp	r7, #0
 8013ff8:	f43f af6a 	beq.w	8013ed0 <rcl_validate_topic_name+0x9c>
 8013ffc:	6038      	str	r0, [r7, #0]
 8013ffe:	2000      	movs	r0, #0
 8014000:	e742      	b.n	8013e88 <rcl_validate_topic_name+0x54>
 8014002:	bf00      	nop
 8014004:	08019d2d 	.word	0x08019d2d

08014008 <rcl_get_zero_initialized_wait_set>:
 8014008:	b470      	push	{r4, r5, r6}
 801400a:	4d07      	ldr	r5, [pc, #28]	; (8014028 <rcl_get_zero_initialized_wait_set+0x20>)
 801400c:	4606      	mov	r6, r0
 801400e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014010:	4634      	mov	r4, r6
 8014012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801401a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801401c:	682b      	ldr	r3, [r5, #0]
 801401e:	6023      	str	r3, [r4, #0]
 8014020:	4630      	mov	r0, r6
 8014022:	bc70      	pop	{r4, r5, r6}
 8014024:	4770      	bx	lr
 8014026:	bf00      	nop
 8014028:	08019974 	.word	0x08019974

0801402c <rcl_wait_set_is_valid>:
 801402c:	b118      	cbz	r0, 8014036 <rcl_wait_set_is_valid+0xa>
 801402e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8014030:	3800      	subs	r0, #0
 8014032:	bf18      	it	ne
 8014034:	2001      	movne	r0, #1
 8014036:	4770      	bx	lr

08014038 <rcl_wait_set_fini>:
 8014038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801403c:	b082      	sub	sp, #8
 801403e:	2800      	cmp	r0, #0
 8014040:	f000 8095 	beq.w	801416e <rcl_wait_set_fini+0x136>
 8014044:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8014046:	4604      	mov	r4, r0
 8014048:	2e00      	cmp	r6, #0
 801404a:	f000 808c 	beq.w	8014166 <rcl_wait_set_fini+0x12e>
 801404e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8014050:	f001 fd1a 	bl	8015a88 <rmw_destroy_wait_set>
 8014054:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014056:	1e06      	subs	r6, r0, #0
 8014058:	bf18      	it	ne
 801405a:	f44f 7661 	movne.w	r6, #900	; 0x384
 801405e:	2d00      	cmp	r5, #0
 8014060:	f000 8081 	beq.w	8014166 <rcl_wait_set_fini+0x12e>
 8014064:	6820      	ldr	r0, [r4, #0]
 8014066:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801406a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801406c:	2700      	movs	r7, #0
 801406e:	6067      	str	r7, [r4, #4]
 8014070:	602f      	str	r7, [r5, #0]
 8014072:	b120      	cbz	r0, 801407e <rcl_wait_set_fini+0x46>
 8014074:	9101      	str	r1, [sp, #4]
 8014076:	47c0      	blx	r8
 8014078:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801407a:	9901      	ldr	r1, [sp, #4]
 801407c:	6027      	str	r7, [r4, #0]
 801407e:	68a8      	ldr	r0, [r5, #8]
 8014080:	b120      	cbz	r0, 801408c <rcl_wait_set_fini+0x54>
 8014082:	47c0      	blx	r8
 8014084:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014086:	2300      	movs	r3, #0
 8014088:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801408c:	68a0      	ldr	r0, [r4, #8]
 801408e:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8014090:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8014092:	f04f 0800 	mov.w	r8, #0
 8014096:	f8c4 800c 	str.w	r8, [r4, #12]
 801409a:	f8c5 800c 	str.w	r8, [r5, #12]
 801409e:	b128      	cbz	r0, 80140ac <rcl_wait_set_fini+0x74>
 80140a0:	47b8      	blx	r7
 80140a2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80140a4:	f8c4 8008 	str.w	r8, [r4, #8]
 80140a8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80140aa:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80140ac:	6968      	ldr	r0, [r5, #20]
 80140ae:	f04f 0800 	mov.w	r8, #0
 80140b2:	f8c5 8010 	str.w	r8, [r5, #16]
 80140b6:	b128      	cbz	r0, 80140c4 <rcl_wait_set_fini+0x8c>
 80140b8:	47b8      	blx	r7
 80140ba:	f8c5 8014 	str.w	r8, [r5, #20]
 80140be:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80140c0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80140c2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80140c4:	6920      	ldr	r0, [r4, #16]
 80140c6:	f04f 0800 	mov.w	r8, #0
 80140ca:	f8c4 8014 	str.w	r8, [r4, #20]
 80140ce:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 80140d2:	b128      	cbz	r0, 80140e0 <rcl_wait_set_fini+0xa8>
 80140d4:	47b8      	blx	r7
 80140d6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80140d8:	f8c4 8010 	str.w	r8, [r4, #16]
 80140dc:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80140de:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80140e0:	69a0      	ldr	r0, [r4, #24]
 80140e2:	f04f 0800 	mov.w	r8, #0
 80140e6:	f8c4 801c 	str.w	r8, [r4, #28]
 80140ea:	f8c5 8018 	str.w	r8, [r5, #24]
 80140ee:	b128      	cbz	r0, 80140fc <rcl_wait_set_fini+0xc4>
 80140f0:	9101      	str	r1, [sp, #4]
 80140f2:	47b8      	blx	r7
 80140f4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80140f6:	9901      	ldr	r1, [sp, #4]
 80140f8:	f8c4 8018 	str.w	r8, [r4, #24]
 80140fc:	6a28      	ldr	r0, [r5, #32]
 80140fe:	b120      	cbz	r0, 801410a <rcl_wait_set_fini+0xd2>
 8014100:	47b8      	blx	r7
 8014102:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014104:	2300      	movs	r3, #0
 8014106:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801410a:	6a20      	ldr	r0, [r4, #32]
 801410c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8014110:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8014112:	2700      	movs	r7, #0
 8014114:	6267      	str	r7, [r4, #36]	; 0x24
 8014116:	626f      	str	r7, [r5, #36]	; 0x24
 8014118:	b120      	cbz	r0, 8014124 <rcl_wait_set_fini+0xec>
 801411a:	9101      	str	r1, [sp, #4]
 801411c:	47c0      	blx	r8
 801411e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014120:	9901      	ldr	r1, [sp, #4]
 8014122:	6227      	str	r7, [r4, #32]
 8014124:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8014126:	b120      	cbz	r0, 8014132 <rcl_wait_set_fini+0xfa>
 8014128:	47c0      	blx	r8
 801412a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801412c:	2300      	movs	r3, #0
 801412e:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8014132:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014134:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8014138:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801413a:	2700      	movs	r7, #0
 801413c:	62e7      	str	r7, [r4, #44]	; 0x2c
 801413e:	632f      	str	r7, [r5, #48]	; 0x30
 8014140:	b120      	cbz	r0, 801414c <rcl_wait_set_fini+0x114>
 8014142:	9101      	str	r1, [sp, #4]
 8014144:	47c0      	blx	r8
 8014146:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014148:	9901      	ldr	r1, [sp, #4]
 801414a:	62a7      	str	r7, [r4, #40]	; 0x28
 801414c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801414e:	b120      	cbz	r0, 801415a <rcl_wait_set_fini+0x122>
 8014150:	47c0      	blx	r8
 8014152:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014154:	2300      	movs	r3, #0
 8014156:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801415a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801415c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801415e:	4628      	mov	r0, r5
 8014160:	4798      	blx	r3
 8014162:	2300      	movs	r3, #0
 8014164:	6323      	str	r3, [r4, #48]	; 0x30
 8014166:	4630      	mov	r0, r6
 8014168:	b002      	add	sp, #8
 801416a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801416e:	260b      	movs	r6, #11
 8014170:	4630      	mov	r0, r6
 8014172:	b002      	add	sp, #8
 8014174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014178 <rcl_wait_set_add_subscription>:
 8014178:	b320      	cbz	r0, 80141c4 <rcl_wait_set_add_subscription+0x4c>
 801417a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801417c:	b570      	push	{r4, r5, r6, lr}
 801417e:	4604      	mov	r4, r0
 8014180:	b1d3      	cbz	r3, 80141b8 <rcl_wait_set_add_subscription+0x40>
 8014182:	b319      	cbz	r1, 80141cc <rcl_wait_set_add_subscription+0x54>
 8014184:	681d      	ldr	r5, [r3, #0]
 8014186:	6860      	ldr	r0, [r4, #4]
 8014188:	4285      	cmp	r5, r0
 801418a:	d218      	bcs.n	80141be <rcl_wait_set_add_subscription+0x46>
 801418c:	6820      	ldr	r0, [r4, #0]
 801418e:	1c6e      	adds	r6, r5, #1
 8014190:	601e      	str	r6, [r3, #0]
 8014192:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014196:	b102      	cbz	r2, 801419a <rcl_wait_set_add_subscription+0x22>
 8014198:	6015      	str	r5, [r2, #0]
 801419a:	4608      	mov	r0, r1
 801419c:	f7f8 fdb0 	bl	800cd00 <rcl_subscription_get_rmw_handle>
 80141a0:	b190      	cbz	r0, 80141c8 <rcl_wait_set_add_subscription+0x50>
 80141a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80141a4:	6842      	ldr	r2, [r0, #4]
 80141a6:	689b      	ldr	r3, [r3, #8]
 80141a8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80141ac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80141ae:	6853      	ldr	r3, [r2, #4]
 80141b0:	3301      	adds	r3, #1
 80141b2:	6053      	str	r3, [r2, #4]
 80141b4:	2000      	movs	r0, #0
 80141b6:	bd70      	pop	{r4, r5, r6, pc}
 80141b8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80141bc:	bd70      	pop	{r4, r5, r6, pc}
 80141be:	f240 3086 	movw	r0, #902	; 0x386
 80141c2:	bd70      	pop	{r4, r5, r6, pc}
 80141c4:	200b      	movs	r0, #11
 80141c6:	4770      	bx	lr
 80141c8:	2001      	movs	r0, #1
 80141ca:	bd70      	pop	{r4, r5, r6, pc}
 80141cc:	200b      	movs	r0, #11
 80141ce:	bd70      	pop	{r4, r5, r6, pc}

080141d0 <rcl_wait_set_clear>:
 80141d0:	2800      	cmp	r0, #0
 80141d2:	d073      	beq.n	80142bc <rcl_wait_set_clear+0xec>
 80141d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80141d6:	b510      	push	{r4, lr}
 80141d8:	4604      	mov	r4, r0
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d070      	beq.n	80142c0 <rcl_wait_set_clear+0xf0>
 80141de:	6800      	ldr	r0, [r0, #0]
 80141e0:	b138      	cbz	r0, 80141f2 <rcl_wait_set_clear+0x22>
 80141e2:	6862      	ldr	r2, [r4, #4]
 80141e4:	2100      	movs	r1, #0
 80141e6:	0092      	lsls	r2, r2, #2
 80141e8:	f002 fdf0 	bl	8016dcc <memset>
 80141ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80141ee:	2200      	movs	r2, #0
 80141f0:	601a      	str	r2, [r3, #0]
 80141f2:	68a0      	ldr	r0, [r4, #8]
 80141f4:	b138      	cbz	r0, 8014206 <rcl_wait_set_clear+0x36>
 80141f6:	68e2      	ldr	r2, [r4, #12]
 80141f8:	2100      	movs	r1, #0
 80141fa:	0092      	lsls	r2, r2, #2
 80141fc:	f002 fde6 	bl	8016dcc <memset>
 8014200:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014202:	2200      	movs	r2, #0
 8014204:	60da      	str	r2, [r3, #12]
 8014206:	69a0      	ldr	r0, [r4, #24]
 8014208:	b138      	cbz	r0, 801421a <rcl_wait_set_clear+0x4a>
 801420a:	69e2      	ldr	r2, [r4, #28]
 801420c:	2100      	movs	r1, #0
 801420e:	0092      	lsls	r2, r2, #2
 8014210:	f002 fddc 	bl	8016dcc <memset>
 8014214:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014216:	2200      	movs	r2, #0
 8014218:	619a      	str	r2, [r3, #24]
 801421a:	6a20      	ldr	r0, [r4, #32]
 801421c:	b138      	cbz	r0, 801422e <rcl_wait_set_clear+0x5e>
 801421e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8014220:	2100      	movs	r1, #0
 8014222:	0092      	lsls	r2, r2, #2
 8014224:	f002 fdd2 	bl	8016dcc <memset>
 8014228:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801422a:	2200      	movs	r2, #0
 801422c:	625a      	str	r2, [r3, #36]	; 0x24
 801422e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014230:	b138      	cbz	r0, 8014242 <rcl_wait_set_clear+0x72>
 8014232:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014234:	2100      	movs	r1, #0
 8014236:	0092      	lsls	r2, r2, #2
 8014238:	f002 fdc8 	bl	8016dcc <memset>
 801423c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801423e:	2200      	movs	r2, #0
 8014240:	631a      	str	r2, [r3, #48]	; 0x30
 8014242:	6920      	ldr	r0, [r4, #16]
 8014244:	b138      	cbz	r0, 8014256 <rcl_wait_set_clear+0x86>
 8014246:	6962      	ldr	r2, [r4, #20]
 8014248:	2100      	movs	r1, #0
 801424a:	0092      	lsls	r2, r2, #2
 801424c:	f002 fdbe 	bl	8016dcc <memset>
 8014250:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014252:	2200      	movs	r2, #0
 8014254:	641a      	str	r2, [r3, #64]	; 0x40
 8014256:	6898      	ldr	r0, [r3, #8]
 8014258:	b138      	cbz	r0, 801426a <rcl_wait_set_clear+0x9a>
 801425a:	685a      	ldr	r2, [r3, #4]
 801425c:	2100      	movs	r1, #0
 801425e:	0092      	lsls	r2, r2, #2
 8014260:	f002 fdb4 	bl	8016dcc <memset>
 8014264:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014266:	2200      	movs	r2, #0
 8014268:	605a      	str	r2, [r3, #4]
 801426a:	6958      	ldr	r0, [r3, #20]
 801426c:	b138      	cbz	r0, 801427e <rcl_wait_set_clear+0xae>
 801426e:	691a      	ldr	r2, [r3, #16]
 8014270:	2100      	movs	r1, #0
 8014272:	0092      	lsls	r2, r2, #2
 8014274:	f002 fdaa 	bl	8016dcc <memset>
 8014278:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801427a:	2200      	movs	r2, #0
 801427c:	611a      	str	r2, [r3, #16]
 801427e:	6a18      	ldr	r0, [r3, #32]
 8014280:	b138      	cbz	r0, 8014292 <rcl_wait_set_clear+0xc2>
 8014282:	69da      	ldr	r2, [r3, #28]
 8014284:	2100      	movs	r1, #0
 8014286:	0092      	lsls	r2, r2, #2
 8014288:	f002 fda0 	bl	8016dcc <memset>
 801428c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801428e:	2200      	movs	r2, #0
 8014290:	61da      	str	r2, [r3, #28]
 8014292:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8014294:	b138      	cbz	r0, 80142a6 <rcl_wait_set_clear+0xd6>
 8014296:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014298:	2100      	movs	r1, #0
 801429a:	0092      	lsls	r2, r2, #2
 801429c:	f002 fd96 	bl	8016dcc <memset>
 80142a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80142a2:	2200      	movs	r2, #0
 80142a4:	629a      	str	r2, [r3, #40]	; 0x28
 80142a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80142a8:	b138      	cbz	r0, 80142ba <rcl_wait_set_clear+0xea>
 80142aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80142ac:	2100      	movs	r1, #0
 80142ae:	0092      	lsls	r2, r2, #2
 80142b0:	f002 fd8c 	bl	8016dcc <memset>
 80142b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80142b6:	2000      	movs	r0, #0
 80142b8:	6358      	str	r0, [r3, #52]	; 0x34
 80142ba:	bd10      	pop	{r4, pc}
 80142bc:	200b      	movs	r0, #11
 80142be:	4770      	bx	lr
 80142c0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80142c4:	bd10      	pop	{r4, pc}
 80142c6:	bf00      	nop

080142c8 <rcl_wait_set_resize>:
 80142c8:	2800      	cmp	r0, #0
 80142ca:	f000 81a6 	beq.w	801461a <rcl_wait_set_resize+0x352>
 80142ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142d2:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 80142d6:	b083      	sub	sp, #12
 80142d8:	4604      	mov	r4, r0
 80142da:	f1ba 0f00 	cmp.w	sl, #0
 80142de:	f000 819e 	beq.w	801461e <rcl_wait_set_resize+0x356>
 80142e2:	461e      	mov	r6, r3
 80142e4:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 80142e8:	f04f 0800 	mov.w	r8, #0
 80142ec:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 80142f0:	9300      	str	r3, [sp, #0]
 80142f2:	f8c0 8004 	str.w	r8, [r0, #4]
 80142f6:	460f      	mov	r7, r1
 80142f8:	4615      	mov	r5, r2
 80142fa:	f8ca 8000 	str.w	r8, [sl]
 80142fe:	2900      	cmp	r1, #0
 8014300:	f000 80c9 	beq.w	8014496 <rcl_wait_set_resize+0x1ce>
 8014304:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8014308:	6800      	ldr	r0, [r0, #0]
 801430a:	4651      	mov	r1, sl
 801430c:	464a      	mov	r2, r9
 801430e:	4798      	blx	r3
 8014310:	6020      	str	r0, [r4, #0]
 8014312:	2800      	cmp	r0, #0
 8014314:	f000 80d8 	beq.w	80144c8 <rcl_wait_set_resize+0x200>
 8014318:	4652      	mov	r2, sl
 801431a:	4641      	mov	r1, r8
 801431c:	f002 fd56 	bl	8016dcc <memset>
 8014320:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014322:	6067      	str	r7, [r4, #4]
 8014324:	6898      	ldr	r0, [r3, #8]
 8014326:	f8c3 8004 	str.w	r8, [r3, #4]
 801432a:	9301      	str	r3, [sp, #4]
 801432c:	464a      	mov	r2, r9
 801432e:	9b00      	ldr	r3, [sp, #0]
 8014330:	4651      	mov	r1, sl
 8014332:	4798      	blx	r3
 8014334:	9b01      	ldr	r3, [sp, #4]
 8014336:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014338:	6098      	str	r0, [r3, #8]
 801433a:	6897      	ldr	r7, [r2, #8]
 801433c:	2f00      	cmp	r7, #0
 801433e:	f000 80be 	beq.w	80144be <rcl_wait_set_resize+0x1f6>
 8014342:	4652      	mov	r2, sl
 8014344:	4641      	mov	r1, r8
 8014346:	4638      	mov	r0, r7
 8014348:	f002 fd40 	bl	8016dcc <memset>
 801434c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014350:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014354:	2700      	movs	r7, #0
 8014356:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 801435a:	60e7      	str	r7, [r4, #12]
 801435c:	f8ca 700c 	str.w	r7, [sl, #12]
 8014360:	2d00      	cmp	r5, #0
 8014362:	f040 80b5 	bne.w	80144d0 <rcl_wait_set_resize+0x208>
 8014366:	68a0      	ldr	r0, [r4, #8]
 8014368:	b130      	cbz	r0, 8014378 <rcl_wait_set_resize+0xb0>
 801436a:	4641      	mov	r1, r8
 801436c:	4790      	blx	r2
 801436e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014372:	60a5      	str	r5, [r4, #8]
 8014374:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014378:	2700      	movs	r7, #0
 801437a:	19ad      	adds	r5, r5, r6
 801437c:	f8ca 7010 	str.w	r7, [sl, #16]
 8014380:	f040 80be 	bne.w	8014500 <rcl_wait_set_resize+0x238>
 8014384:	f8da 0014 	ldr.w	r0, [sl, #20]
 8014388:	b148      	cbz	r0, 801439e <rcl_wait_set_resize+0xd6>
 801438a:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 801438e:	4641      	mov	r1, r8
 8014390:	4798      	blx	r3
 8014392:	f8ca 5014 	str.w	r5, [sl, #20]
 8014396:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801439a:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801439e:	2500      	movs	r5, #0
 80143a0:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 80143a4:	6165      	str	r5, [r4, #20]
 80143a6:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 80143aa:	2e00      	cmp	r6, #0
 80143ac:	f040 80bf 	bne.w	801452e <rcl_wait_set_resize+0x266>
 80143b0:	6920      	ldr	r0, [r4, #16]
 80143b2:	b140      	cbz	r0, 80143c6 <rcl_wait_set_resize+0xfe>
 80143b4:	4641      	mov	r1, r8
 80143b6:	47c8      	blx	r9
 80143b8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80143bc:	6126      	str	r6, [r4, #16]
 80143be:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 80143c2:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80143c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143c8:	2500      	movs	r5, #0
 80143ca:	61e5      	str	r5, [r4, #28]
 80143cc:	f8ca 5018 	str.w	r5, [sl, #24]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	f040 80c1 	bne.w	8014558 <rcl_wait_set_resize+0x290>
 80143d6:	69a0      	ldr	r0, [r4, #24]
 80143d8:	b128      	cbz	r0, 80143e6 <rcl_wait_set_resize+0x11e>
 80143da:	4641      	mov	r1, r8
 80143dc:	47c8      	blx	r9
 80143de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143e0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80143e4:	61a3      	str	r3, [r4, #24]
 80143e6:	f8da 0020 	ldr.w	r0, [sl, #32]
 80143ea:	b130      	cbz	r0, 80143fa <rcl_wait_set_resize+0x132>
 80143ec:	4641      	mov	r1, r8
 80143ee:	47c8      	blx	r9
 80143f0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80143f4:	2300      	movs	r3, #0
 80143f6:	e9ca 3307 	strd	r3, r3, [sl, #28]
 80143fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80143fc:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 8014400:	2600      	movs	r6, #0
 8014402:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 8014406:	6266      	str	r6, [r4, #36]	; 0x24
 8014408:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 801440c:	2b00      	cmp	r3, #0
 801440e:	f000 80c8 	beq.w	80145a2 <rcl_wait_set_resize+0x2da>
 8014412:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8014416:	6a20      	ldr	r0, [r4, #32]
 8014418:	4651      	mov	r1, sl
 801441a:	463a      	mov	r2, r7
 801441c:	47c8      	blx	r9
 801441e:	6220      	str	r0, [r4, #32]
 8014420:	2800      	cmp	r0, #0
 8014422:	d051      	beq.n	80144c8 <rcl_wait_set_resize+0x200>
 8014424:	4652      	mov	r2, sl
 8014426:	4631      	mov	r1, r6
 8014428:	f002 fcd0 	bl	8016dcc <memset>
 801442c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801442e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014430:	6263      	str	r3, [r4, #36]	; 0x24
 8014432:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8014434:	62ae      	str	r6, [r5, #40]	; 0x28
 8014436:	463a      	mov	r2, r7
 8014438:	4651      	mov	r1, sl
 801443a:	47c8      	blx	r9
 801443c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801443e:	62e8      	str	r0, [r5, #44]	; 0x2c
 8014440:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8014442:	2d00      	cmp	r5, #0
 8014444:	f000 8105 	beq.w	8014652 <rcl_wait_set_resize+0x38a>
 8014448:	4652      	mov	r2, sl
 801444a:	4631      	mov	r1, r6
 801444c:	4628      	mov	r0, r5
 801444e:	f002 fcbd 	bl	8016dcc <memset>
 8014452:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014458:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 801445c:	2500      	movs	r5, #0
 801445e:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 8014462:	62e5      	str	r5, [r4, #44]	; 0x2c
 8014464:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 8014468:	2b00      	cmp	r3, #0
 801446a:	f040 80af 	bne.w	80145cc <rcl_wait_set_resize+0x304>
 801446e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014470:	b128      	cbz	r0, 801447e <rcl_wait_set_resize+0x1b6>
 8014472:	4631      	mov	r1, r6
 8014474:	47b8      	blx	r7
 8014476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014478:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801447c:	62a3      	str	r3, [r4, #40]	; 0x28
 801447e:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8014482:	b310      	cbz	r0, 80144ca <rcl_wait_set_resize+0x202>
 8014484:	4631      	mov	r1, r6
 8014486:	47b8      	blx	r7
 8014488:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801448a:	2000      	movs	r0, #0
 801448c:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 8014490:	b003      	add	sp, #12
 8014492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014496:	6800      	ldr	r0, [r0, #0]
 8014498:	b120      	cbz	r0, 80144a4 <rcl_wait_set_resize+0x1dc>
 801449a:	4649      	mov	r1, r9
 801449c:	47d8      	blx	fp
 801449e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80144a2:	6027      	str	r7, [r4, #0]
 80144a4:	f8da 0008 	ldr.w	r0, [sl, #8]
 80144a8:	2800      	cmp	r0, #0
 80144aa:	f43f af51 	beq.w	8014350 <rcl_wait_set_resize+0x88>
 80144ae:	4649      	mov	r1, r9
 80144b0:	47d8      	blx	fp
 80144b2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80144b6:	2300      	movs	r3, #0
 80144b8:	e9ca 3301 	strd	r3, r3, [sl, #4]
 80144bc:	e748      	b.n	8014350 <rcl_wait_set_resize+0x88>
 80144be:	6820      	ldr	r0, [r4, #0]
 80144c0:	4649      	mov	r1, r9
 80144c2:	47d8      	blx	fp
 80144c4:	e9c4 7700 	strd	r7, r7, [r4]
 80144c8:	200a      	movs	r0, #10
 80144ca:	b003      	add	sp, #12
 80144cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144d0:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80144d4:	68a0      	ldr	r0, [r4, #8]
 80144d6:	4642      	mov	r2, r8
 80144d8:	4649      	mov	r1, r9
 80144da:	4798      	blx	r3
 80144dc:	60a0      	str	r0, [r4, #8]
 80144de:	2800      	cmp	r0, #0
 80144e0:	d0f2      	beq.n	80144c8 <rcl_wait_set_resize+0x200>
 80144e2:	4639      	mov	r1, r7
 80144e4:	464a      	mov	r2, r9
 80144e6:	f002 fc71 	bl	8016dcc <memset>
 80144ea:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80144ee:	60e5      	str	r5, [r4, #12]
 80144f0:	2700      	movs	r7, #0
 80144f2:	19ad      	adds	r5, r5, r6
 80144f4:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80144f8:	f8ca 7010 	str.w	r7, [sl, #16]
 80144fc:	f43f af42 	beq.w	8014384 <rcl_wait_set_resize+0xbc>
 8014500:	00ad      	lsls	r5, r5, #2
 8014502:	4642      	mov	r2, r8
 8014504:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8014508:	f8da 0014 	ldr.w	r0, [sl, #20]
 801450c:	4629      	mov	r1, r5
 801450e:	4798      	blx	r3
 8014510:	4680      	mov	r8, r0
 8014512:	f8ca 0014 	str.w	r0, [sl, #20]
 8014516:	2800      	cmp	r0, #0
 8014518:	f000 8084 	beq.w	8014624 <rcl_wait_set_resize+0x35c>
 801451c:	462a      	mov	r2, r5
 801451e:	4639      	mov	r1, r7
 8014520:	f002 fc54 	bl	8016dcc <memset>
 8014524:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014528:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801452c:	e737      	b.n	801439e <rcl_wait_set_resize+0xd6>
 801452e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8014532:	6920      	ldr	r0, [r4, #16]
 8014534:	4642      	mov	r2, r8
 8014536:	4649      	mov	r1, r9
 8014538:	47b8      	blx	r7
 801453a:	6120      	str	r0, [r4, #16]
 801453c:	2800      	cmp	r0, #0
 801453e:	d0c3      	beq.n	80144c8 <rcl_wait_set_resize+0x200>
 8014540:	464a      	mov	r2, r9
 8014542:	4629      	mov	r1, r5
 8014544:	f002 fc42 	bl	8016dcc <memset>
 8014548:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801454c:	6166      	str	r6, [r4, #20]
 801454e:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8014552:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014556:	e736      	b.n	80143c6 <rcl_wait_set_resize+0xfe>
 8014558:	009e      	lsls	r6, r3, #2
 801455a:	69a0      	ldr	r0, [r4, #24]
 801455c:	4631      	mov	r1, r6
 801455e:	4642      	mov	r2, r8
 8014560:	47b8      	blx	r7
 8014562:	61a0      	str	r0, [r4, #24]
 8014564:	2800      	cmp	r0, #0
 8014566:	d0af      	beq.n	80144c8 <rcl_wait_set_resize+0x200>
 8014568:	4632      	mov	r2, r6
 801456a:	4629      	mov	r1, r5
 801456c:	f002 fc2e 	bl	8016dcc <memset>
 8014570:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014576:	61e3      	str	r3, [r4, #28]
 8014578:	f8da 0020 	ldr.w	r0, [sl, #32]
 801457c:	f8ca 501c 	str.w	r5, [sl, #28]
 8014580:	4642      	mov	r2, r8
 8014582:	4631      	mov	r1, r6
 8014584:	47b8      	blx	r7
 8014586:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014588:	f8ca 0020 	str.w	r0, [sl, #32]
 801458c:	6a1f      	ldr	r7, [r3, #32]
 801458e:	2f00      	cmp	r7, #0
 8014590:	d058      	beq.n	8014644 <rcl_wait_set_resize+0x37c>
 8014592:	4632      	mov	r2, r6
 8014594:	4629      	mov	r1, r5
 8014596:	4638      	mov	r0, r7
 8014598:	f002 fc18 	bl	8016dcc <memset>
 801459c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80145a0:	e72b      	b.n	80143fa <rcl_wait_set_resize+0x132>
 80145a2:	6a20      	ldr	r0, [r4, #32]
 80145a4:	b128      	cbz	r0, 80145b2 <rcl_wait_set_resize+0x2ea>
 80145a6:	4639      	mov	r1, r7
 80145a8:	47c0      	blx	r8
 80145aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80145ac:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80145b0:	6223      	str	r3, [r4, #32]
 80145b2:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 80145b6:	2800      	cmp	r0, #0
 80145b8:	f43f af4d 	beq.w	8014456 <rcl_wait_set_resize+0x18e>
 80145bc:	4639      	mov	r1, r7
 80145be:	47c0      	blx	r8
 80145c0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80145c4:	2300      	movs	r3, #0
 80145c6:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 80145ca:	e744      	b.n	8014456 <rcl_wait_set_resize+0x18e>
 80145cc:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80145d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80145d2:	4641      	mov	r1, r8
 80145d4:	4632      	mov	r2, r6
 80145d6:	47c8      	blx	r9
 80145d8:	62a0      	str	r0, [r4, #40]	; 0x28
 80145da:	2800      	cmp	r0, #0
 80145dc:	f43f af74 	beq.w	80144c8 <rcl_wait_set_resize+0x200>
 80145e0:	4642      	mov	r2, r8
 80145e2:	4629      	mov	r1, r5
 80145e4:	f002 fbf2 	bl	8016dcc <memset>
 80145e8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80145ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80145ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80145f0:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 80145f4:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 80145f8:	4632      	mov	r2, r6
 80145fa:	4641      	mov	r1, r8
 80145fc:	47c8      	blx	r9
 80145fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014600:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8014604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014606:	b35b      	cbz	r3, 8014660 <rcl_wait_set_resize+0x398>
 8014608:	4642      	mov	r2, r8
 801460a:	4618      	mov	r0, r3
 801460c:	4629      	mov	r1, r5
 801460e:	f002 fbdd 	bl	8016dcc <memset>
 8014612:	4628      	mov	r0, r5
 8014614:	b003      	add	sp, #12
 8014616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801461a:	200b      	movs	r0, #11
 801461c:	4770      	bx	lr
 801461e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014622:	e752      	b.n	80144ca <rcl_wait_set_resize+0x202>
 8014624:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014626:	68a0      	ldr	r0, [r4, #8]
 8014628:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801462a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801462c:	4790      	blx	r2
 801462e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014630:	6920      	ldr	r0, [r4, #16]
 8014632:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014634:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8014636:	e9c4 8802 	strd	r8, r8, [r4, #8]
 801463a:	4790      	blx	r2
 801463c:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8014640:	200a      	movs	r0, #10
 8014642:	e742      	b.n	80144ca <rcl_wait_set_resize+0x202>
 8014644:	69a0      	ldr	r0, [r4, #24]
 8014646:	4641      	mov	r1, r8
 8014648:	47c8      	blx	r9
 801464a:	e9c4 7706 	strd	r7, r7, [r4, #24]
 801464e:	200a      	movs	r0, #10
 8014650:	e73b      	b.n	80144ca <rcl_wait_set_resize+0x202>
 8014652:	6a20      	ldr	r0, [r4, #32]
 8014654:	4639      	mov	r1, r7
 8014656:	47c0      	blx	r8
 8014658:	e9c4 5508 	strd	r5, r5, [r4, #32]
 801465c:	200a      	movs	r0, #10
 801465e:	e734      	b.n	80144ca <rcl_wait_set_resize+0x202>
 8014660:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014662:	9300      	str	r3, [sp, #0]
 8014664:	4631      	mov	r1, r6
 8014666:	47b8      	blx	r7
 8014668:	9b00      	ldr	r3, [sp, #0]
 801466a:	200a      	movs	r0, #10
 801466c:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8014670:	e72b      	b.n	80144ca <rcl_wait_set_resize+0x202>
 8014672:	bf00      	nop

08014674 <rcl_wait_set_init>:
 8014674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014678:	b084      	sub	sp, #16
 801467a:	4604      	mov	r4, r0
 801467c:	a810      	add	r0, sp, #64	; 0x40
 801467e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8014682:	460f      	mov	r7, r1
 8014684:	4690      	mov	r8, r2
 8014686:	4699      	mov	r9, r3
 8014688:	f7f9 f82e 	bl	800d6e8 <rcutils_allocator_is_valid>
 801468c:	2800      	cmp	r0, #0
 801468e:	d06b      	beq.n	8014768 <rcl_wait_set_init+0xf4>
 8014690:	2c00      	cmp	r4, #0
 8014692:	d069      	beq.n	8014768 <rcl_wait_set_init+0xf4>
 8014694:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014696:	b125      	cbz	r5, 80146a2 <rcl_wait_set_init+0x2e>
 8014698:	2564      	movs	r5, #100	; 0x64
 801469a:	4628      	mov	r0, r5
 801469c:	b004      	add	sp, #16
 801469e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146a2:	f1ba 0f00 	cmp.w	sl, #0
 80146a6:	d05f      	beq.n	8014768 <rcl_wait_set_init+0xf4>
 80146a8:	4650      	mov	r0, sl
 80146aa:	f7fe f989 	bl	80129c0 <rcl_context_is_valid>
 80146ae:	2800      	cmp	r0, #0
 80146b0:	d067      	beq.n	8014782 <rcl_wait_set_init+0x10e>
 80146b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80146b4:	9914      	ldr	r1, [sp, #80]	; 0x50
 80146b6:	205c      	movs	r0, #92	; 0x5c
 80146b8:	4798      	blx	r3
 80146ba:	6320      	str	r0, [r4, #48]	; 0x30
 80146bc:	2800      	cmp	r0, #0
 80146be:	d062      	beq.n	8014786 <rcl_wait_set_init+0x112>
 80146c0:	225c      	movs	r2, #92	; 0x5c
 80146c2:	4629      	mov	r1, r5
 80146c4:	f002 fb82 	bl	8016dcc <memset>
 80146c8:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80146cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80146d0:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80146d2:	f8dc e000 	ldr.w	lr, [ip]
 80146d6:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 80146da:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 80146de:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80146e2:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80146e6:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 80146ea:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 80146ee:	60b5      	str	r5, [r6, #8]
 80146f0:	6075      	str	r5, [r6, #4]
 80146f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146f6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80146fa:	1899      	adds	r1, r3, r2
 80146fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80146fe:	f8da 0000 	ldr.w	r0, [sl]
 8014702:	f8cc e000 	str.w	lr, [ip]
 8014706:	4419      	add	r1, r3
 8014708:	4441      	add	r1, r8
 801470a:	3028      	adds	r0, #40	; 0x28
 801470c:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8014710:	f001 f9b0 	bl	8015a74 <rmw_create_wait_set>
 8014714:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014716:	63f0      	str	r0, [r6, #60]	; 0x3c
 8014718:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801471a:	b350      	cbz	r0, 8014772 <rcl_wait_set_init+0xfe>
 801471c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801471e:	9302      	str	r3, [sp, #8]
 8014720:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014722:	9301      	str	r3, [sp, #4]
 8014724:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014726:	9300      	str	r3, [sp, #0]
 8014728:	4642      	mov	r2, r8
 801472a:	464b      	mov	r3, r9
 801472c:	4639      	mov	r1, r7
 801472e:	4620      	mov	r0, r4
 8014730:	f7ff fdca 	bl	80142c8 <rcl_wait_set_resize>
 8014734:	4605      	mov	r5, r0
 8014736:	2800      	cmp	r0, #0
 8014738:	d0af      	beq.n	801469a <rcl_wait_set_init+0x26>
 801473a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801473c:	bb2b      	cbnz	r3, 801478a <rcl_wait_set_init+0x116>
 801473e:	2600      	movs	r6, #0
 8014740:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8014744:	9600      	str	r6, [sp, #0]
 8014746:	4633      	mov	r3, r6
 8014748:	4632      	mov	r2, r6
 801474a:	4631      	mov	r1, r6
 801474c:	4620      	mov	r0, r4
 801474e:	f7ff fdbb 	bl	80142c8 <rcl_wait_set_resize>
 8014752:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8014754:	2800      	cmp	r0, #0
 8014756:	d0a0      	beq.n	801469a <rcl_wait_set_init+0x26>
 8014758:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801475a:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801475c:	4798      	blx	r3
 801475e:	4628      	mov	r0, r5
 8014760:	6326      	str	r6, [r4, #48]	; 0x30
 8014762:	b004      	add	sp, #16
 8014764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014768:	250b      	movs	r5, #11
 801476a:	4628      	mov	r0, r5
 801476c:	b004      	add	sp, #16
 801476e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014772:	2501      	movs	r5, #1
 8014774:	f001 f988 	bl	8015a88 <rmw_destroy_wait_set>
 8014778:	2800      	cmp	r0, #0
 801477a:	bf18      	it	ne
 801477c:	f44f 7561 	movne.w	r5, #900	; 0x384
 8014780:	e7dd      	b.n	801473e <rcl_wait_set_init+0xca>
 8014782:	2565      	movs	r5, #101	; 0x65
 8014784:	e789      	b.n	801469a <rcl_wait_set_init+0x26>
 8014786:	250a      	movs	r5, #10
 8014788:	e787      	b.n	801469a <rcl_wait_set_init+0x26>
 801478a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801478c:	e7f2      	b.n	8014774 <rcl_wait_set_init+0x100>
 801478e:	bf00      	nop

08014790 <rcl_wait_set_add_guard_condition>:
 8014790:	b320      	cbz	r0, 80147dc <rcl_wait_set_add_guard_condition+0x4c>
 8014792:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014794:	b570      	push	{r4, r5, r6, lr}
 8014796:	4604      	mov	r4, r0
 8014798:	b1d3      	cbz	r3, 80147d0 <rcl_wait_set_add_guard_condition+0x40>
 801479a:	b319      	cbz	r1, 80147e4 <rcl_wait_set_add_guard_condition+0x54>
 801479c:	68dd      	ldr	r5, [r3, #12]
 801479e:	68e0      	ldr	r0, [r4, #12]
 80147a0:	4285      	cmp	r5, r0
 80147a2:	d218      	bcs.n	80147d6 <rcl_wait_set_add_guard_condition+0x46>
 80147a4:	68a0      	ldr	r0, [r4, #8]
 80147a6:	1c6e      	adds	r6, r5, #1
 80147a8:	60de      	str	r6, [r3, #12]
 80147aa:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80147ae:	b102      	cbz	r2, 80147b2 <rcl_wait_set_add_guard_condition+0x22>
 80147b0:	6015      	str	r5, [r2, #0]
 80147b2:	4608      	mov	r0, r1
 80147b4:	f002 f9aa 	bl	8016b0c <rcl_guard_condition_get_rmw_handle>
 80147b8:	b190      	cbz	r0, 80147e0 <rcl_wait_set_add_guard_condition+0x50>
 80147ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80147bc:	6842      	ldr	r2, [r0, #4]
 80147be:	695b      	ldr	r3, [r3, #20]
 80147c0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80147c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80147c6:	6913      	ldr	r3, [r2, #16]
 80147c8:	3301      	adds	r3, #1
 80147ca:	6113      	str	r3, [r2, #16]
 80147cc:	2000      	movs	r0, #0
 80147ce:	bd70      	pop	{r4, r5, r6, pc}
 80147d0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80147d4:	bd70      	pop	{r4, r5, r6, pc}
 80147d6:	f240 3086 	movw	r0, #902	; 0x386
 80147da:	bd70      	pop	{r4, r5, r6, pc}
 80147dc:	200b      	movs	r0, #11
 80147de:	4770      	bx	lr
 80147e0:	2001      	movs	r0, #1
 80147e2:	bd70      	pop	{r4, r5, r6, pc}
 80147e4:	200b      	movs	r0, #11
 80147e6:	bd70      	pop	{r4, r5, r6, pc}

080147e8 <rcl_wait_set_add_timer>:
 80147e8:	b340      	cbz	r0, 801483c <rcl_wait_set_add_timer+0x54>
 80147ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80147ec:	b570      	push	{r4, r5, r6, lr}
 80147ee:	4604      	mov	r4, r0
 80147f0:	b1f3      	cbz	r3, 8014830 <rcl_wait_set_add_timer+0x48>
 80147f2:	b329      	cbz	r1, 8014840 <rcl_wait_set_add_timer+0x58>
 80147f4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80147f6:	6965      	ldr	r5, [r4, #20]
 80147f8:	42a8      	cmp	r0, r5
 80147fa:	d21c      	bcs.n	8014836 <rcl_wait_set_add_timer+0x4e>
 80147fc:	6925      	ldr	r5, [r4, #16]
 80147fe:	1c46      	adds	r6, r0, #1
 8014800:	641e      	str	r6, [r3, #64]	; 0x40
 8014802:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8014806:	b102      	cbz	r2, 801480a <rcl_wait_set_add_timer+0x22>
 8014808:	6010      	str	r0, [r2, #0]
 801480a:	4608      	mov	r0, r1
 801480c:	f7ff faa4 	bl	8013d58 <rcl_timer_get_guard_condition>
 8014810:	b168      	cbz	r0, 801482e <rcl_wait_set_add_timer+0x46>
 8014812:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014814:	68e3      	ldr	r3, [r4, #12]
 8014816:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8014818:	3b01      	subs	r3, #1
 801481a:	441d      	add	r5, r3
 801481c:	f002 f976 	bl	8016b0c <rcl_guard_condition_get_rmw_handle>
 8014820:	b180      	cbz	r0, 8014844 <rcl_wait_set_add_timer+0x5c>
 8014822:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014824:	6842      	ldr	r2, [r0, #4]
 8014826:	695b      	ldr	r3, [r3, #20]
 8014828:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801482c:	2000      	movs	r0, #0
 801482e:	bd70      	pop	{r4, r5, r6, pc}
 8014830:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014834:	bd70      	pop	{r4, r5, r6, pc}
 8014836:	f240 3086 	movw	r0, #902	; 0x386
 801483a:	bd70      	pop	{r4, r5, r6, pc}
 801483c:	200b      	movs	r0, #11
 801483e:	4770      	bx	lr
 8014840:	200b      	movs	r0, #11
 8014842:	bd70      	pop	{r4, r5, r6, pc}
 8014844:	2001      	movs	r0, #1
 8014846:	bd70      	pop	{r4, r5, r6, pc}

08014848 <rcl_wait_set_add_client>:
 8014848:	b320      	cbz	r0, 8014894 <rcl_wait_set_add_client+0x4c>
 801484a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801484c:	b570      	push	{r4, r5, r6, lr}
 801484e:	4604      	mov	r4, r0
 8014850:	b1d3      	cbz	r3, 8014888 <rcl_wait_set_add_client+0x40>
 8014852:	b319      	cbz	r1, 801489c <rcl_wait_set_add_client+0x54>
 8014854:	699d      	ldr	r5, [r3, #24]
 8014856:	69e0      	ldr	r0, [r4, #28]
 8014858:	4285      	cmp	r5, r0
 801485a:	d218      	bcs.n	801488e <rcl_wait_set_add_client+0x46>
 801485c:	69a0      	ldr	r0, [r4, #24]
 801485e:	1c6e      	adds	r6, r5, #1
 8014860:	619e      	str	r6, [r3, #24]
 8014862:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014866:	b102      	cbz	r2, 801486a <rcl_wait_set_add_client+0x22>
 8014868:	6015      	str	r5, [r2, #0]
 801486a:	4608      	mov	r0, r1
 801486c:	f7fe f842 	bl	80128f4 <rcl_client_get_rmw_handle>
 8014870:	b190      	cbz	r0, 8014898 <rcl_wait_set_add_client+0x50>
 8014872:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014874:	6842      	ldr	r2, [r0, #4]
 8014876:	6a1b      	ldr	r3, [r3, #32]
 8014878:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801487c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801487e:	69d3      	ldr	r3, [r2, #28]
 8014880:	3301      	adds	r3, #1
 8014882:	61d3      	str	r3, [r2, #28]
 8014884:	2000      	movs	r0, #0
 8014886:	bd70      	pop	{r4, r5, r6, pc}
 8014888:	f44f 7061 	mov.w	r0, #900	; 0x384
 801488c:	bd70      	pop	{r4, r5, r6, pc}
 801488e:	f240 3086 	movw	r0, #902	; 0x386
 8014892:	bd70      	pop	{r4, r5, r6, pc}
 8014894:	200b      	movs	r0, #11
 8014896:	4770      	bx	lr
 8014898:	2001      	movs	r0, #1
 801489a:	bd70      	pop	{r4, r5, r6, pc}
 801489c:	200b      	movs	r0, #11
 801489e:	bd70      	pop	{r4, r5, r6, pc}

080148a0 <rcl_wait_set_add_service>:
 80148a0:	b320      	cbz	r0, 80148ec <rcl_wait_set_add_service+0x4c>
 80148a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80148a4:	b570      	push	{r4, r5, r6, lr}
 80148a6:	4604      	mov	r4, r0
 80148a8:	b1d3      	cbz	r3, 80148e0 <rcl_wait_set_add_service+0x40>
 80148aa:	b319      	cbz	r1, 80148f4 <rcl_wait_set_add_service+0x54>
 80148ac:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80148ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80148b0:	4285      	cmp	r5, r0
 80148b2:	d218      	bcs.n	80148e6 <rcl_wait_set_add_service+0x46>
 80148b4:	6a20      	ldr	r0, [r4, #32]
 80148b6:	1c6e      	adds	r6, r5, #1
 80148b8:	625e      	str	r6, [r3, #36]	; 0x24
 80148ba:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80148be:	b102      	cbz	r2, 80148c2 <rcl_wait_set_add_service+0x22>
 80148c0:	6015      	str	r5, [r2, #0]
 80148c2:	4608      	mov	r0, r1
 80148c4:	f7fe fe34 	bl	8013530 <rcl_service_get_rmw_handle>
 80148c8:	b190      	cbz	r0, 80148f0 <rcl_wait_set_add_service+0x50>
 80148ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80148cc:	6842      	ldr	r2, [r0, #4]
 80148ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148d0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80148d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80148d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80148d8:	3301      	adds	r3, #1
 80148da:	6293      	str	r3, [r2, #40]	; 0x28
 80148dc:	2000      	movs	r0, #0
 80148de:	bd70      	pop	{r4, r5, r6, pc}
 80148e0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80148e4:	bd70      	pop	{r4, r5, r6, pc}
 80148e6:	f240 3086 	movw	r0, #902	; 0x386
 80148ea:	bd70      	pop	{r4, r5, r6, pc}
 80148ec:	200b      	movs	r0, #11
 80148ee:	4770      	bx	lr
 80148f0:	2001      	movs	r0, #1
 80148f2:	bd70      	pop	{r4, r5, r6, pc}
 80148f4:	200b      	movs	r0, #11
 80148f6:	bd70      	pop	{r4, r5, r6, pc}

080148f8 <rcl_wait>:
 80148f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148fc:	b08f      	sub	sp, #60	; 0x3c
 80148fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014902:	2800      	cmp	r0, #0
 8014904:	f000 814c 	beq.w	8014ba0 <rcl_wait+0x2a8>
 8014908:	6b05      	ldr	r5, [r0, #48]	; 0x30
 801490a:	4604      	mov	r4, r0
 801490c:	2d00      	cmp	r5, #0
 801490e:	f000 80bc 	beq.w	8014a8a <rcl_wait+0x192>
 8014912:	6843      	ldr	r3, [r0, #4]
 8014914:	b973      	cbnz	r3, 8014934 <rcl_wait+0x3c>
 8014916:	68e3      	ldr	r3, [r4, #12]
 8014918:	b963      	cbnz	r3, 8014934 <rcl_wait+0x3c>
 801491a:	6963      	ldr	r3, [r4, #20]
 801491c:	b953      	cbnz	r3, 8014934 <rcl_wait+0x3c>
 801491e:	69e3      	ldr	r3, [r4, #28]
 8014920:	b943      	cbnz	r3, 8014934 <rcl_wait+0x3c>
 8014922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014924:	b933      	cbnz	r3, 8014934 <rcl_wait+0x3c>
 8014926:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014928:	b923      	cbnz	r3, 8014934 <rcl_wait+0x3c>
 801492a:	f240 3085 	movw	r0, #901	; 0x385
 801492e:	b00f      	add	sp, #60	; 0x3c
 8014930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014934:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014938:	2a01      	cmp	r2, #1
 801493a:	f173 0300 	sbcs.w	r3, r3, #0
 801493e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8014940:	db56      	blt.n	80149f0 <rcl_wait+0xf8>
 8014942:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8014946:	2900      	cmp	r1, #0
 8014948:	f000 8149 	beq.w	8014bde <rcl_wait+0x2e6>
 801494c:	2300      	movs	r3, #0
 801494e:	9307      	str	r3, [sp, #28]
 8014950:	469b      	mov	fp, r3
 8014952:	f04f 0800 	mov.w	r8, #0
 8014956:	f04f 0900 	mov.w	r9, #0
 801495a:	e00d      	b.n	8014978 <rcl_wait+0x80>
 801495c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801495e:	6922      	ldr	r2, [r4, #16]
 8014960:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8014962:	f842 000a 	str.w	r0, [r2, sl]
 8014966:	f118 0801 	adds.w	r8, r8, #1
 801496a:	f149 0900 	adc.w	r9, r9, #0
 801496e:	2300      	movs	r3, #0
 8014970:	4599      	cmp	r9, r3
 8014972:	bf08      	it	eq
 8014974:	4588      	cmpeq	r8, r1
 8014976:	d243      	bcs.n	8014a00 <rcl_wait+0x108>
 8014978:	6922      	ldr	r2, [r4, #16]
 801497a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 801497e:	f852 000a 	ldr.w	r0, [r2, sl]
 8014982:	2800      	cmp	r0, #0
 8014984:	d0ef      	beq.n	8014966 <rcl_wait+0x6e>
 8014986:	68e2      	ldr	r2, [r4, #12]
 8014988:	6969      	ldr	r1, [r5, #20]
 801498a:	4442      	add	r2, r8
 801498c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8014990:	b13b      	cbz	r3, 80149a2 <rcl_wait+0xaa>
 8014992:	692a      	ldr	r2, [r5, #16]
 8014994:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014998:	6921      	ldr	r1, [r4, #16]
 801499a:	3201      	adds	r2, #1
 801499c:	f851 000a 	ldr.w	r0, [r1, sl]
 80149a0:	612a      	str	r2, [r5, #16]
 80149a2:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 80149a6:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 80149aa:	f7ff f9c3 	bl	8013d34 <rcl_timer_is_canceled>
 80149ae:	2800      	cmp	r0, #0
 80149b0:	d1bd      	bne.n	801492e <rcl_wait+0x36>
 80149b2:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80149b6:	2a00      	cmp	r2, #0
 80149b8:	d1d0      	bne.n	801495c <rcl_wait+0x64>
 80149ba:	6922      	ldr	r2, [r4, #16]
 80149bc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80149c0:	f852 000a 	ldr.w	r0, [r2, sl]
 80149c4:	a90a      	add	r1, sp, #40	; 0x28
 80149c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80149ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80149ce:	f7ff f98d 	bl	8013cec <rcl_timer_get_time_until_next_call>
 80149d2:	2800      	cmp	r0, #0
 80149d4:	d1ab      	bne.n	801492e <rcl_wait+0x36>
 80149d6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80149da:	42b2      	cmp	r2, r6
 80149dc:	eb73 0107 	sbcs.w	r1, r3, r7
 80149e0:	da03      	bge.n	80149ea <rcl_wait+0xf2>
 80149e2:	461f      	mov	r7, r3
 80149e4:	2301      	movs	r3, #1
 80149e6:	4616      	mov	r6, r2
 80149e8:	9307      	str	r3, [sp, #28]
 80149ea:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80149ec:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80149ee:	e7ba      	b.n	8014966 <rcl_wait+0x6e>
 80149f0:	2900      	cmp	r1, #0
 80149f2:	f000 80de 	beq.w	8014bb2 <rcl_wait+0x2ba>
 80149f6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80149fa:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80149fe:	e7a5      	b.n	801494c <rcl_wait+0x54>
 8014a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014a04:	4313      	orrs	r3, r2
 8014a06:	d145      	bne.n	8014a94 <rcl_wait+0x19c>
 8014a08:	2300      	movs	r3, #0
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014a10:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014a14:	ab0a      	add	r3, sp, #40	; 0x28
 8014a16:	9302      	str	r3, [sp, #8]
 8014a18:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8014a1a:	9301      	str	r3, [sp, #4]
 8014a1c:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8014a20:	9300      	str	r3, [sp, #0]
 8014a22:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8014a26:	f105 031c 	add.w	r3, r5, #28
 8014a2a:	f105 0110 	add.w	r1, r5, #16
 8014a2e:	1d28      	adds	r0, r5, #4
 8014a30:	f000 feae 	bl	8015790 <rmw_wait>
 8014a34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014a38:	4680      	mov	r8, r0
 8014a3a:	b30a      	cbz	r2, 8014a80 <rcl_wait+0x188>
 8014a3c:	2500      	movs	r5, #0
 8014a3e:	462f      	mov	r7, r5
 8014a40:	e004      	b.n	8014a4c <rcl_wait+0x154>
 8014a42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014a46:	3501      	adds	r5, #1
 8014a48:	42aa      	cmp	r2, r5
 8014a4a:	d919      	bls.n	8014a80 <rcl_wait+0x188>
 8014a4c:	6922      	ldr	r2, [r4, #16]
 8014a4e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014a52:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8014a56:	00ae      	lsls	r6, r5, #2
 8014a58:	2800      	cmp	r0, #0
 8014a5a:	d0f3      	beq.n	8014a44 <rcl_wait+0x14c>
 8014a5c:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 8014a60:	f7ff f90c 	bl	8013c7c <rcl_timer_is_ready>
 8014a64:	2800      	cmp	r0, #0
 8014a66:	f47f af62 	bne.w	801492e <rcl_wait+0x36>
 8014a6a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8014a6e:	2a00      	cmp	r2, #0
 8014a70:	d1e7      	bne.n	8014a42 <rcl_wait+0x14a>
 8014a72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014a74:	6921      	ldr	r1, [r4, #16]
 8014a76:	518a      	str	r2, [r1, r6]
 8014a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014a7a:	3501      	adds	r5, #1
 8014a7c:	42aa      	cmp	r2, r5
 8014a7e:	d8e5      	bhi.n	8014a4c <rcl_wait+0x154>
 8014a80:	f038 0002 	bics.w	r0, r8, #2
 8014a84:	d029      	beq.n	8014ada <rcl_wait+0x1e2>
 8014a86:	2001      	movs	r0, #1
 8014a88:	e751      	b.n	801492e <rcl_wait+0x36>
 8014a8a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014a8e:	b00f      	add	sp, #60	; 0x3c
 8014a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014a98:	2a01      	cmp	r2, #1
 8014a9a:	f173 0300 	sbcs.w	r3, r3, #0
 8014a9e:	f2c0 8083 	blt.w	8014ba8 <rcl_wait+0x2b0>
 8014aa2:	2e00      	cmp	r6, #0
 8014aa4:	f177 0300 	sbcs.w	r3, r7, #0
 8014aa8:	bfbc      	itt	lt
 8014aaa:	2600      	movlt	r6, #0
 8014aac:	2700      	movlt	r7, #0
 8014aae:	a34e      	add	r3, pc, #312	; (adr r3, 8014be8 <rcl_wait+0x2f0>)
 8014ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ab4:	4630      	mov	r0, r6
 8014ab6:	4639      	mov	r1, r7
 8014ab8:	f7eb fbf2 	bl	80002a0 <__aeabi_ldivmod>
 8014abc:	a34a      	add	r3, pc, #296	; (adr r3, 8014be8 <rcl_wait+0x2f0>)
 8014abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ac2:	4680      	mov	r8, r0
 8014ac4:	4689      	mov	r9, r1
 8014ac6:	4630      	mov	r0, r6
 8014ac8:	4639      	mov	r1, r7
 8014aca:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8014ace:	f7eb fbe7 	bl	80002a0 <__aeabi_ldivmod>
 8014ad2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014ad6:	ab0a      	add	r3, sp, #40	; 0x28
 8014ad8:	e79d      	b.n	8014a16 <rcl_wait+0x11e>
 8014ada:	6866      	ldr	r6, [r4, #4]
 8014adc:	4602      	mov	r2, r0
 8014ade:	b91e      	cbnz	r6, 8014ae8 <rcl_wait+0x1f0>
 8014ae0:	e00d      	b.n	8014afe <rcl_wait+0x206>
 8014ae2:	3201      	adds	r2, #1
 8014ae4:	42b2      	cmp	r2, r6
 8014ae6:	d00a      	beq.n	8014afe <rcl_wait+0x206>
 8014ae8:	6899      	ldr	r1, [r3, #8]
 8014aea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014aee:	2900      	cmp	r1, #0
 8014af0:	d1f7      	bne.n	8014ae2 <rcl_wait+0x1ea>
 8014af2:	6825      	ldr	r5, [r4, #0]
 8014af4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014af8:	3201      	adds	r2, #1
 8014afa:	42b2      	cmp	r2, r6
 8014afc:	d1f4      	bne.n	8014ae8 <rcl_wait+0x1f0>
 8014afe:	68e6      	ldr	r6, [r4, #12]
 8014b00:	2200      	movs	r2, #0
 8014b02:	b91e      	cbnz	r6, 8014b0c <rcl_wait+0x214>
 8014b04:	e00d      	b.n	8014b22 <rcl_wait+0x22a>
 8014b06:	3201      	adds	r2, #1
 8014b08:	42b2      	cmp	r2, r6
 8014b0a:	d00a      	beq.n	8014b22 <rcl_wait+0x22a>
 8014b0c:	6959      	ldr	r1, [r3, #20]
 8014b0e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014b12:	2900      	cmp	r1, #0
 8014b14:	d1f7      	bne.n	8014b06 <rcl_wait+0x20e>
 8014b16:	68a5      	ldr	r5, [r4, #8]
 8014b18:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014b1c:	3201      	adds	r2, #1
 8014b1e:	42b2      	cmp	r2, r6
 8014b20:	d1f4      	bne.n	8014b0c <rcl_wait+0x214>
 8014b22:	69e6      	ldr	r6, [r4, #28]
 8014b24:	2200      	movs	r2, #0
 8014b26:	b91e      	cbnz	r6, 8014b30 <rcl_wait+0x238>
 8014b28:	e00d      	b.n	8014b46 <rcl_wait+0x24e>
 8014b2a:	3201      	adds	r2, #1
 8014b2c:	42b2      	cmp	r2, r6
 8014b2e:	d00a      	beq.n	8014b46 <rcl_wait+0x24e>
 8014b30:	6a19      	ldr	r1, [r3, #32]
 8014b32:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014b36:	2900      	cmp	r1, #0
 8014b38:	d1f7      	bne.n	8014b2a <rcl_wait+0x232>
 8014b3a:	69a5      	ldr	r5, [r4, #24]
 8014b3c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014b40:	3201      	adds	r2, #1
 8014b42:	42b2      	cmp	r2, r6
 8014b44:	d1f4      	bne.n	8014b30 <rcl_wait+0x238>
 8014b46:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014b48:	2200      	movs	r2, #0
 8014b4a:	b91e      	cbnz	r6, 8014b54 <rcl_wait+0x25c>
 8014b4c:	e00d      	b.n	8014b6a <rcl_wait+0x272>
 8014b4e:	3201      	adds	r2, #1
 8014b50:	4296      	cmp	r6, r2
 8014b52:	d00a      	beq.n	8014b6a <rcl_wait+0x272>
 8014b54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014b56:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014b5a:	2900      	cmp	r1, #0
 8014b5c:	d1f7      	bne.n	8014b4e <rcl_wait+0x256>
 8014b5e:	6a25      	ldr	r5, [r4, #32]
 8014b60:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014b64:	3201      	adds	r2, #1
 8014b66:	4296      	cmp	r6, r2
 8014b68:	d1f4      	bne.n	8014b54 <rcl_wait+0x25c>
 8014b6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	b91e      	cbnz	r6, 8014b78 <rcl_wait+0x280>
 8014b70:	e00d      	b.n	8014b8e <rcl_wait+0x296>
 8014b72:	3201      	adds	r2, #1
 8014b74:	42b2      	cmp	r2, r6
 8014b76:	d00a      	beq.n	8014b8e <rcl_wait+0x296>
 8014b78:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8014b7a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014b7e:	2900      	cmp	r1, #0
 8014b80:	d1f7      	bne.n	8014b72 <rcl_wait+0x27a>
 8014b82:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8014b84:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014b88:	3201      	adds	r2, #1
 8014b8a:	42b2      	cmp	r2, r6
 8014b8c:	d1f4      	bne.n	8014b78 <rcl_wait+0x280>
 8014b8e:	f1b8 0f02 	cmp.w	r8, #2
 8014b92:	f47f aecc 	bne.w	801492e <rcl_wait+0x36>
 8014b96:	9b07      	ldr	r3, [sp, #28]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	bf08      	it	eq
 8014b9c:	2002      	moveq	r0, #2
 8014b9e:	e6c6      	b.n	801492e <rcl_wait+0x36>
 8014ba0:	200b      	movs	r0, #11
 8014ba2:	b00f      	add	sp, #60	; 0x3c
 8014ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ba8:	9b07      	ldr	r3, [sp, #28]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	f47f af79 	bne.w	8014aa2 <rcl_wait+0x1aa>
 8014bb0:	e731      	b.n	8014a16 <rcl_wait+0x11e>
 8014bb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014bb6:	4313      	orrs	r3, r2
 8014bb8:	bf08      	it	eq
 8014bba:	9107      	streq	r1, [sp, #28]
 8014bbc:	f43f af24 	beq.w	8014a08 <rcl_wait+0x110>
 8014bc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014bc4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8014bc8:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8014bcc:	2a01      	cmp	r2, #1
 8014bce:	f173 0300 	sbcs.w	r3, r3, #0
 8014bd2:	f04f 0300 	mov.w	r3, #0
 8014bd6:	9307      	str	r3, [sp, #28]
 8014bd8:	f6bf af63 	bge.w	8014aa2 <rcl_wait+0x1aa>
 8014bdc:	e71b      	b.n	8014a16 <rcl_wait+0x11e>
 8014bde:	4632      	mov	r2, r6
 8014be0:	463b      	mov	r3, r7
 8014be2:	e7f3      	b.n	8014bcc <rcl_wait+0x2d4>
 8014be4:	f3af 8000 	nop.w
 8014be8:	3b9aca00 	.word	0x3b9aca00
 8014bec:	00000000 	.word	0x00000000

08014bf0 <__atomic_load_8>:
 8014bf0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014bf4:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8014bf8:	4b14      	ldr	r3, [pc, #80]	; (8014c4c <__atomic_load_8+0x5c>)
 8014bfa:	4a15      	ldr	r2, [pc, #84]	; (8014c50 <__atomic_load_8+0x60>)
 8014bfc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014c00:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014c04:	fb03 f301 	mul.w	r3, r3, r1
 8014c08:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8014c0c:	fba2 1203 	umull	r1, r2, r2, r3
 8014c10:	0912      	lsrs	r2, r2, #4
 8014c12:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8014c16:	b430      	push	{r4, r5}
 8014c18:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 8014c1c:	4c0d      	ldr	r4, [pc, #52]	; (8014c54 <__atomic_load_8+0x64>)
 8014c1e:	1a9b      	subs	r3, r3, r2
 8014c20:	18e1      	adds	r1, r4, r3
 8014c22:	f04f 0501 	mov.w	r5, #1
 8014c26:	e8d1 2f4f 	ldrexb	r2, [r1]
 8014c2a:	e8c1 5f4c 	strexb	ip, r5, [r1]
 8014c2e:	f1bc 0f00 	cmp.w	ip, #0
 8014c32:	d1f8      	bne.n	8014c26 <__atomic_load_8+0x36>
 8014c34:	f3bf 8f5b 	dmb	ish
 8014c38:	b2d2      	uxtb	r2, r2
 8014c3a:	2a00      	cmp	r2, #0
 8014c3c:	d1f3      	bne.n	8014c26 <__atomic_load_8+0x36>
 8014c3e:	e9d0 0100 	ldrd	r0, r1, [r0]
 8014c42:	f3bf 8f5b 	dmb	ish
 8014c46:	54e2      	strb	r2, [r4, r3]
 8014c48:	bc30      	pop	{r4, r5}
 8014c4a:	4770      	bx	lr
 8014c4c:	27d4eb2d 	.word	0x27d4eb2d
 8014c50:	b21642c9 	.word	0xb21642c9
 8014c54:	20010298 	.word	0x20010298

08014c58 <__atomic_store_8>:
 8014c58:	b4f0      	push	{r4, r5, r6, r7}
 8014c5a:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8014c5e:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8014c62:	4914      	ldr	r1, [pc, #80]	; (8014cb4 <__atomic_store_8+0x5c>)
 8014c64:	4c14      	ldr	r4, [pc, #80]	; (8014cb8 <__atomic_store_8+0x60>)
 8014c66:	4e15      	ldr	r6, [pc, #84]	; (8014cbc <__atomic_store_8+0x64>)
 8014c68:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8014c6c:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8014c70:	fb01 f105 	mul.w	r1, r1, r5
 8014c74:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014c78:	fba4 5401 	umull	r5, r4, r4, r1
 8014c7c:	0924      	lsrs	r4, r4, #4
 8014c7e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8014c82:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8014c86:	1b09      	subs	r1, r1, r4
 8014c88:	1875      	adds	r5, r6, r1
 8014c8a:	f04f 0701 	mov.w	r7, #1
 8014c8e:	e8d5 4f4f 	ldrexb	r4, [r5]
 8014c92:	e8c5 7f4c 	strexb	ip, r7, [r5]
 8014c96:	f1bc 0f00 	cmp.w	ip, #0
 8014c9a:	d1f8      	bne.n	8014c8e <__atomic_store_8+0x36>
 8014c9c:	f3bf 8f5b 	dmb	ish
 8014ca0:	b2e4      	uxtb	r4, r4
 8014ca2:	2c00      	cmp	r4, #0
 8014ca4:	d1f3      	bne.n	8014c8e <__atomic_store_8+0x36>
 8014ca6:	e9c0 2300 	strd	r2, r3, [r0]
 8014caa:	f3bf 8f5b 	dmb	ish
 8014cae:	5474      	strb	r4, [r6, r1]
 8014cb0:	bcf0      	pop	{r4, r5, r6, r7}
 8014cb2:	4770      	bx	lr
 8014cb4:	27d4eb2d 	.word	0x27d4eb2d
 8014cb8:	b21642c9 	.word	0xb21642c9
 8014cbc:	20010298 	.word	0x20010298

08014cc0 <__atomic_exchange_8>:
 8014cc0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8014cc4:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8014cc8:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8014ccc:	4c16      	ldr	r4, [pc, #88]	; (8014d28 <__atomic_exchange_8+0x68>)
 8014cce:	4917      	ldr	r1, [pc, #92]	; (8014d2c <__atomic_exchange_8+0x6c>)
 8014cd0:	4e17      	ldr	r6, [pc, #92]	; (8014d30 <__atomic_exchange_8+0x70>)
 8014cd2:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8014cd6:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8014cda:	fb04 f505 	mul.w	r5, r4, r5
 8014cde:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8014ce2:	fba1 4105 	umull	r4, r1, r1, r5
 8014ce6:	0909      	lsrs	r1, r1, #4
 8014ce8:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8014cec:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8014cf0:	1a6c      	subs	r4, r5, r1
 8014cf2:	1931      	adds	r1, r6, r4
 8014cf4:	f04f 0701 	mov.w	r7, #1
 8014cf8:	e8d1 5f4f 	ldrexb	r5, [r1]
 8014cfc:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8014d00:	f1bc 0f00 	cmp.w	ip, #0
 8014d04:	d1f8      	bne.n	8014cf8 <__atomic_exchange_8+0x38>
 8014d06:	f3bf 8f5b 	dmb	ish
 8014d0a:	b2ed      	uxtb	r5, r5
 8014d0c:	2d00      	cmp	r5, #0
 8014d0e:	d1f3      	bne.n	8014cf8 <__atomic_exchange_8+0x38>
 8014d10:	e9d0 8900 	ldrd	r8, r9, [r0]
 8014d14:	e9c0 2300 	strd	r2, r3, [r0]
 8014d18:	f3bf 8f5b 	dmb	ish
 8014d1c:	5535      	strb	r5, [r6, r4]
 8014d1e:	4640      	mov	r0, r8
 8014d20:	4649      	mov	r1, r9
 8014d22:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8014d26:	4770      	bx	lr
 8014d28:	27d4eb2d 	.word	0x27d4eb2d
 8014d2c:	b21642c9 	.word	0xb21642c9
 8014d30:	20010298 	.word	0x20010298

08014d34 <__atomic_fetch_add_8>:
 8014d34:	b4f0      	push	{r4, r5, r6, r7}
 8014d36:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8014d3a:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8014d3e:	4c17      	ldr	r4, [pc, #92]	; (8014d9c <__atomic_fetch_add_8+0x68>)
 8014d40:	4917      	ldr	r1, [pc, #92]	; (8014da0 <__atomic_fetch_add_8+0x6c>)
 8014d42:	4e18      	ldr	r6, [pc, #96]	; (8014da4 <__atomic_fetch_add_8+0x70>)
 8014d44:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8014d48:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8014d4c:	fb04 f505 	mul.w	r5, r4, r5
 8014d50:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8014d54:	fba1 4105 	umull	r4, r1, r1, r5
 8014d58:	0909      	lsrs	r1, r1, #4
 8014d5a:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8014d5e:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8014d62:	1a6c      	subs	r4, r5, r1
 8014d64:	1931      	adds	r1, r6, r4
 8014d66:	f04f 0701 	mov.w	r7, #1
 8014d6a:	e8d1 5f4f 	ldrexb	r5, [r1]
 8014d6e:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8014d72:	f1bc 0f00 	cmp.w	ip, #0
 8014d76:	d1f8      	bne.n	8014d6a <__atomic_fetch_add_8+0x36>
 8014d78:	f3bf 8f5b 	dmb	ish
 8014d7c:	b2ed      	uxtb	r5, r5
 8014d7e:	2d00      	cmp	r5, #0
 8014d80:	d1f3      	bne.n	8014d6a <__atomic_fetch_add_8+0x36>
 8014d82:	e9d0 7100 	ldrd	r7, r1, [r0]
 8014d86:	18ba      	adds	r2, r7, r2
 8014d88:	eb41 0303 	adc.w	r3, r1, r3
 8014d8c:	e9c0 2300 	strd	r2, r3, [r0]
 8014d90:	f3bf 8f5b 	dmb	ish
 8014d94:	5535      	strb	r5, [r6, r4]
 8014d96:	4638      	mov	r0, r7
 8014d98:	bcf0      	pop	{r4, r5, r6, r7}
 8014d9a:	4770      	bx	lr
 8014d9c:	27d4eb2d 	.word	0x27d4eb2d
 8014da0:	b21642c9 	.word	0xb21642c9
 8014da4:	20010298 	.word	0x20010298

08014da8 <rcutils_is_directory>:
 8014da8:	2000      	movs	r0, #0
 8014daa:	4770      	bx	lr

08014dac <rcutils_join_path>:
 8014dac:	b082      	sub	sp, #8
 8014dae:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014db2:	2000      	movs	r0, #0
 8014db4:	b002      	add	sp, #8
 8014db6:	4770      	bx	lr

08014db8 <rcutils_to_native_path>:
 8014db8:	b084      	sub	sp, #16
 8014dba:	a801      	add	r0, sp, #4
 8014dbc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014dc0:	b004      	add	sp, #16
 8014dc2:	2000      	movs	r0, #0
 8014dc4:	4770      	bx	lr
 8014dc6:	bf00      	nop

08014dc8 <rcutils_format_string_limit>:
 8014dc8:	b40f      	push	{r0, r1, r2, r3}
 8014dca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dcc:	b083      	sub	sp, #12
 8014dce:	ac08      	add	r4, sp, #32
 8014dd0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014dd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014dd6:	b34e      	cbz	r6, 8014e2c <rcutils_format_string_limit+0x64>
 8014dd8:	a808      	add	r0, sp, #32
 8014dda:	f7f8 fc85 	bl	800d6e8 <rcutils_allocator_is_valid>
 8014dde:	b328      	cbz	r0, 8014e2c <rcutils_format_string_limit+0x64>
 8014de0:	2100      	movs	r1, #0
 8014de2:	ab0f      	add	r3, sp, #60	; 0x3c
 8014de4:	4608      	mov	r0, r1
 8014de6:	4632      	mov	r2, r6
 8014de8:	e9cd 3300 	strd	r3, r3, [sp]
 8014dec:	f000 f904 	bl	8014ff8 <rcutils_vsnprintf>
 8014df0:	1c43      	adds	r3, r0, #1
 8014df2:	4605      	mov	r5, r0
 8014df4:	d01a      	beq.n	8014e2c <rcutils_format_string_limit+0x64>
 8014df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014df8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014dfa:	1c47      	adds	r7, r0, #1
 8014dfc:	429f      	cmp	r7, r3
 8014dfe:	bf84      	itt	hi
 8014e00:	461f      	movhi	r7, r3
 8014e02:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8014e06:	4638      	mov	r0, r7
 8014e08:	9b08      	ldr	r3, [sp, #32]
 8014e0a:	4798      	blx	r3
 8014e0c:	4604      	mov	r4, r0
 8014e0e:	b168      	cbz	r0, 8014e2c <rcutils_format_string_limit+0x64>
 8014e10:	9b01      	ldr	r3, [sp, #4]
 8014e12:	4632      	mov	r2, r6
 8014e14:	4639      	mov	r1, r7
 8014e16:	f000 f8ef 	bl	8014ff8 <rcutils_vsnprintf>
 8014e1a:	2800      	cmp	r0, #0
 8014e1c:	db02      	blt.n	8014e24 <rcutils_format_string_limit+0x5c>
 8014e1e:	2300      	movs	r3, #0
 8014e20:	5563      	strb	r3, [r4, r5]
 8014e22:	e004      	b.n	8014e2e <rcutils_format_string_limit+0x66>
 8014e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014e28:	4620      	mov	r0, r4
 8014e2a:	4798      	blx	r3
 8014e2c:	2400      	movs	r4, #0
 8014e2e:	4620      	mov	r0, r4
 8014e30:	b003      	add	sp, #12
 8014e32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014e36:	b004      	add	sp, #16
 8014e38:	4770      	bx	lr
 8014e3a:	bf00      	nop

08014e3c <rcutils_get_env>:
 8014e3c:	b168      	cbz	r0, 8014e5a <rcutils_get_env+0x1e>
 8014e3e:	b510      	push	{r4, lr}
 8014e40:	460c      	mov	r4, r1
 8014e42:	b129      	cbz	r1, 8014e50 <rcutils_get_env+0x14>
 8014e44:	f001 ff1c 	bl	8016c80 <getenv>
 8014e48:	b120      	cbz	r0, 8014e54 <rcutils_get_env+0x18>
 8014e4a:	6020      	str	r0, [r4, #0]
 8014e4c:	2000      	movs	r0, #0
 8014e4e:	bd10      	pop	{r4, pc}
 8014e50:	4803      	ldr	r0, [pc, #12]	; (8014e60 <rcutils_get_env+0x24>)
 8014e52:	bd10      	pop	{r4, pc}
 8014e54:	4b03      	ldr	r3, [pc, #12]	; (8014e64 <rcutils_get_env+0x28>)
 8014e56:	6023      	str	r3, [r4, #0]
 8014e58:	bd10      	pop	{r4, pc}
 8014e5a:	4803      	ldr	r0, [pc, #12]	; (8014e68 <rcutils_get_env+0x2c>)
 8014e5c:	4770      	bx	lr
 8014e5e:	bf00      	nop
 8014e60:	080199c4 	.word	0x080199c4
 8014e64:	08019ae8 	.word	0x08019ae8
 8014e68:	080199a8 	.word	0x080199a8

08014e6c <rcutils_repl_str>:
 8014e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e70:	ed2d 8b02 	vpush	{d8}
 8014e74:	b087      	sub	sp, #28
 8014e76:	4680      	mov	r8, r0
 8014e78:	4608      	mov	r0, r1
 8014e7a:	f8cd 8000 	str.w	r8, [sp]
 8014e7e:	ee08 2a10 	vmov	s16, r2
 8014e82:	468a      	mov	sl, r1
 8014e84:	4699      	mov	r9, r3
 8014e86:	f7eb f9ad 	bl	80001e4 <strlen>
 8014e8a:	2600      	movs	r6, #0
 8014e8c:	4647      	mov	r7, r8
 8014e8e:	9001      	str	r0, [sp, #4]
 8014e90:	46b3      	mov	fp, r6
 8014e92:	2510      	movs	r5, #16
 8014e94:	46b0      	mov	r8, r6
 8014e96:	e01d      	b.n	8014ed4 <rcutils_repl_str+0x68>
 8014e98:	f10b 0b01 	add.w	fp, fp, #1
 8014e9c:	455e      	cmp	r6, fp
 8014e9e:	d211      	bcs.n	8014ec4 <rcutils_repl_str+0x58>
 8014ea0:	442e      	add	r6, r5
 8014ea2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014ea6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014eaa:	00b1      	lsls	r1, r6, #2
 8014eac:	4798      	blx	r3
 8014eae:	2800      	cmp	r0, #0
 8014eb0:	f000 8084 	beq.w	8014fbc <rcutils_repl_str+0x150>
 8014eb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014eb8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8014ebc:	bf28      	it	cs
 8014ebe:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8014ec2:	4680      	mov	r8, r0
 8014ec4:	9a00      	ldr	r2, [sp, #0]
 8014ec6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8014eca:	1aa2      	subs	r2, r4, r2
 8014ecc:	f843 2c04 	str.w	r2, [r3, #-4]
 8014ed0:	9b01      	ldr	r3, [sp, #4]
 8014ed2:	18e7      	adds	r7, r4, r3
 8014ed4:	4651      	mov	r1, sl
 8014ed6:	4638      	mov	r0, r7
 8014ed8:	f002 f940 	bl	801715c <strstr>
 8014edc:	4604      	mov	r4, r0
 8014ede:	4640      	mov	r0, r8
 8014ee0:	2c00      	cmp	r4, #0
 8014ee2:	d1d9      	bne.n	8014e98 <rcutils_repl_str+0x2c>
 8014ee4:	46b8      	mov	r8, r7
 8014ee6:	4607      	mov	r7, r0
 8014ee8:	4640      	mov	r0, r8
 8014eea:	f7eb f97b 	bl	80001e4 <strlen>
 8014eee:	9b00      	ldr	r3, [sp, #0]
 8014ef0:	eba8 0303 	sub.w	r3, r8, r3
 8014ef4:	181d      	adds	r5, r3, r0
 8014ef6:	9504      	str	r5, [sp, #16]
 8014ef8:	f1bb 0f00 	cmp.w	fp, #0
 8014efc:	d03d      	beq.n	8014f7a <rcutils_repl_str+0x10e>
 8014efe:	ee18 0a10 	vmov	r0, s16
 8014f02:	f7eb f96f 	bl	80001e4 <strlen>
 8014f06:	9b01      	ldr	r3, [sp, #4]
 8014f08:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014f0c:	1ac3      	subs	r3, r0, r3
 8014f0e:	fb0b 5303 	mla	r3, fp, r3, r5
 8014f12:	9305      	str	r3, [sp, #20]
 8014f14:	4606      	mov	r6, r0
 8014f16:	1c58      	adds	r0, r3, #1
 8014f18:	f8d9 3000 	ldr.w	r3, [r9]
 8014f1c:	4798      	blx	r3
 8014f1e:	9003      	str	r0, [sp, #12]
 8014f20:	2800      	cmp	r0, #0
 8014f22:	d04c      	beq.n	8014fbe <rcutils_repl_str+0x152>
 8014f24:	683a      	ldr	r2, [r7, #0]
 8014f26:	9900      	ldr	r1, [sp, #0]
 8014f28:	f001 ff28 	bl	8016d7c <memcpy>
 8014f2c:	9b03      	ldr	r3, [sp, #12]
 8014f2e:	683d      	ldr	r5, [r7, #0]
 8014f30:	ee18 8a10 	vmov	r8, s16
 8014f34:	441d      	add	r5, r3
 8014f36:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8014f3a:	9302      	str	r3, [sp, #8]
 8014f3c:	46ba      	mov	sl, r7
 8014f3e:	4632      	mov	r2, r6
 8014f40:	4641      	mov	r1, r8
 8014f42:	4628      	mov	r0, r5
 8014f44:	f001 ff1a 	bl	8016d7c <memcpy>
 8014f48:	9b01      	ldr	r3, [sp, #4]
 8014f4a:	f85a 2b04 	ldr.w	r2, [sl], #4
 8014f4e:	441a      	add	r2, r3
 8014f50:	9b00      	ldr	r3, [sp, #0]
 8014f52:	1899      	adds	r1, r3, r2
 8014f54:	9b02      	ldr	r3, [sp, #8]
 8014f56:	4435      	add	r5, r6
 8014f58:	429c      	cmp	r4, r3
 8014f5a:	4628      	mov	r0, r5
 8014f5c:	d025      	beq.n	8014faa <rcutils_repl_str+0x13e>
 8014f5e:	f8da 3000 	ldr.w	r3, [sl]
 8014f62:	3401      	adds	r4, #1
 8014f64:	1a9a      	subs	r2, r3, r2
 8014f66:	4415      	add	r5, r2
 8014f68:	f001 ff08 	bl	8016d7c <memcpy>
 8014f6c:	455c      	cmp	r4, fp
 8014f6e:	d3e6      	bcc.n	8014f3e <rcutils_repl_str+0xd2>
 8014f70:	9a03      	ldr	r2, [sp, #12]
 8014f72:	9905      	ldr	r1, [sp, #20]
 8014f74:	2300      	movs	r3, #0
 8014f76:	5453      	strb	r3, [r2, r1]
 8014f78:	e00b      	b.n	8014f92 <rcutils_repl_str+0x126>
 8014f7a:	4628      	mov	r0, r5
 8014f7c:	f8d9 3000 	ldr.w	r3, [r9]
 8014f80:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014f84:	3001      	adds	r0, #1
 8014f86:	4798      	blx	r3
 8014f88:	9003      	str	r0, [sp, #12]
 8014f8a:	b110      	cbz	r0, 8014f92 <rcutils_repl_str+0x126>
 8014f8c:	9900      	ldr	r1, [sp, #0]
 8014f8e:	f002 f8be 	bl	801710e <strcpy>
 8014f92:	4638      	mov	r0, r7
 8014f94:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014f98:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014f9c:	4798      	blx	r3
 8014f9e:	9803      	ldr	r0, [sp, #12]
 8014fa0:	b007      	add	sp, #28
 8014fa2:	ecbd 8b02 	vpop	{d8}
 8014fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014faa:	9b04      	ldr	r3, [sp, #16]
 8014fac:	3401      	adds	r4, #1
 8014fae:	1a9a      	subs	r2, r3, r2
 8014fb0:	4415      	add	r5, r2
 8014fb2:	f001 fee3 	bl	8016d7c <memcpy>
 8014fb6:	455c      	cmp	r4, fp
 8014fb8:	d3c1      	bcc.n	8014f3e <rcutils_repl_str+0xd2>
 8014fba:	e7d9      	b.n	8014f70 <rcutils_repl_str+0x104>
 8014fbc:	4647      	mov	r7, r8
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	9303      	str	r3, [sp, #12]
 8014fc2:	e7e6      	b.n	8014f92 <rcutils_repl_str+0x126>

08014fc4 <rcutils_snprintf>:
 8014fc4:	b40c      	push	{r2, r3}
 8014fc6:	b530      	push	{r4, r5, lr}
 8014fc8:	b083      	sub	sp, #12
 8014fca:	ab06      	add	r3, sp, #24
 8014fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fd0:	9301      	str	r3, [sp, #4]
 8014fd2:	b152      	cbz	r2, 8014fea <rcutils_snprintf+0x26>
 8014fd4:	b138      	cbz	r0, 8014fe6 <rcutils_snprintf+0x22>
 8014fd6:	b141      	cbz	r1, 8014fea <rcutils_snprintf+0x26>
 8014fd8:	f002 f98a 	bl	80172f0 <vsniprintf>
 8014fdc:	b003      	add	sp, #12
 8014fde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014fe2:	b002      	add	sp, #8
 8014fe4:	4770      	bx	lr
 8014fe6:	2900      	cmp	r1, #0
 8014fe8:	d0f6      	beq.n	8014fd8 <rcutils_snprintf+0x14>
 8014fea:	f001 fdd5 	bl	8016b98 <__errno>
 8014fee:	2316      	movs	r3, #22
 8014ff0:	6003      	str	r3, [r0, #0]
 8014ff2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ff6:	e7f1      	b.n	8014fdc <rcutils_snprintf+0x18>

08014ff8 <rcutils_vsnprintf>:
 8014ff8:	b570      	push	{r4, r5, r6, lr}
 8014ffa:	b13a      	cbz	r2, 801500c <rcutils_vsnprintf+0x14>
 8014ffc:	b120      	cbz	r0, 8015008 <rcutils_vsnprintf+0x10>
 8014ffe:	b129      	cbz	r1, 801500c <rcutils_vsnprintf+0x14>
 8015000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015004:	f002 b974 	b.w	80172f0 <vsniprintf>
 8015008:	2900      	cmp	r1, #0
 801500a:	d0f9      	beq.n	8015000 <rcutils_vsnprintf+0x8>
 801500c:	f001 fdc4 	bl	8016b98 <__errno>
 8015010:	2316      	movs	r3, #22
 8015012:	6003      	str	r3, [r0, #0]
 8015014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015018:	bd70      	pop	{r4, r5, r6, pc}
 801501a:	bf00      	nop

0801501c <rcutils_strdup>:
 801501c:	b084      	sub	sp, #16
 801501e:	b570      	push	{r4, r5, r6, lr}
 8015020:	b082      	sub	sp, #8
 8015022:	ac07      	add	r4, sp, #28
 8015024:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8015028:	4605      	mov	r5, r0
 801502a:	b1b0      	cbz	r0, 801505a <rcutils_strdup+0x3e>
 801502c:	f7eb f8da 	bl	80001e4 <strlen>
 8015030:	1c42      	adds	r2, r0, #1
 8015032:	9b07      	ldr	r3, [sp, #28]
 8015034:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015036:	9201      	str	r2, [sp, #4]
 8015038:	4606      	mov	r6, r0
 801503a:	4610      	mov	r0, r2
 801503c:	4798      	blx	r3
 801503e:	4604      	mov	r4, r0
 8015040:	b128      	cbz	r0, 801504e <rcutils_strdup+0x32>
 8015042:	9a01      	ldr	r2, [sp, #4]
 8015044:	4629      	mov	r1, r5
 8015046:	f001 fe99 	bl	8016d7c <memcpy>
 801504a:	2300      	movs	r3, #0
 801504c:	55a3      	strb	r3, [r4, r6]
 801504e:	4620      	mov	r0, r4
 8015050:	b002      	add	sp, #8
 8015052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015056:	b004      	add	sp, #16
 8015058:	4770      	bx	lr
 801505a:	4604      	mov	r4, r0
 801505c:	e7f7      	b.n	801504e <rcutils_strdup+0x32>
 801505e:	bf00      	nop

08015060 <rcutils_strndup>:
 8015060:	b082      	sub	sp, #8
 8015062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015064:	460e      	mov	r6, r1
 8015066:	a906      	add	r1, sp, #24
 8015068:	e881 000c 	stmia.w	r1, {r2, r3}
 801506c:	4605      	mov	r5, r0
 801506e:	b180      	cbz	r0, 8015092 <rcutils_strndup+0x32>
 8015070:	1c77      	adds	r7, r6, #1
 8015072:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015074:	4638      	mov	r0, r7
 8015076:	4790      	blx	r2
 8015078:	4604      	mov	r4, r0
 801507a:	b128      	cbz	r0, 8015088 <rcutils_strndup+0x28>
 801507c:	463a      	mov	r2, r7
 801507e:	4629      	mov	r1, r5
 8015080:	f001 fe7c 	bl	8016d7c <memcpy>
 8015084:	2300      	movs	r3, #0
 8015086:	55a3      	strb	r3, [r4, r6]
 8015088:	4620      	mov	r0, r4
 801508a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801508e:	b002      	add	sp, #8
 8015090:	4770      	bx	lr
 8015092:	4604      	mov	r4, r0
 8015094:	e7f8      	b.n	8015088 <rcutils_strndup+0x28>
 8015096:	bf00      	nop

08015098 <rmw_get_zero_initialized_context>:
 8015098:	b510      	push	{r4, lr}
 801509a:	2250      	movs	r2, #80	; 0x50
 801509c:	4604      	mov	r4, r0
 801509e:	2100      	movs	r1, #0
 80150a0:	f001 fe94 	bl	8016dcc <memset>
 80150a4:	4620      	mov	r0, r4
 80150a6:	bd10      	pop	{r4, pc}

080150a8 <rmw_validate_namespace_with_size>:
 80150a8:	b340      	cbz	r0, 80150fc <rmw_validate_namespace_with_size+0x54>
 80150aa:	b5d0      	push	{r4, r6, r7, lr}
 80150ac:	4614      	mov	r4, r2
 80150ae:	b0c2      	sub	sp, #264	; 0x108
 80150b0:	b332      	cbz	r2, 8015100 <rmw_validate_namespace_with_size+0x58>
 80150b2:	2901      	cmp	r1, #1
 80150b4:	460f      	mov	r7, r1
 80150b6:	461e      	mov	r6, r3
 80150b8:	d102      	bne.n	80150c0 <rmw_validate_namespace_with_size+0x18>
 80150ba:	7803      	ldrb	r3, [r0, #0]
 80150bc:	2b2f      	cmp	r3, #47	; 0x2f
 80150be:	d019      	beq.n	80150f4 <rmw_validate_namespace_with_size+0x4c>
 80150c0:	aa01      	add	r2, sp, #4
 80150c2:	4669      	mov	r1, sp
 80150c4:	f7f8 fdcc 	bl	800dc60 <rmw_validate_full_topic_name>
 80150c8:	b990      	cbnz	r0, 80150f0 <rmw_validate_namespace_with_size+0x48>
 80150ca:	9b00      	ldr	r3, [sp, #0]
 80150cc:	b14b      	cbz	r3, 80150e2 <rmw_validate_namespace_with_size+0x3a>
 80150ce:	2b07      	cmp	r3, #7
 80150d0:	d007      	beq.n	80150e2 <rmw_validate_namespace_with_size+0x3a>
 80150d2:	1e5a      	subs	r2, r3, #1
 80150d4:	2a05      	cmp	r2, #5
 80150d6:	d82b      	bhi.n	8015130 <rmw_validate_namespace_with_size+0x88>
 80150d8:	e8df f002 	tbb	[pc, r2]
 80150dc:	24211e1b 	.word	0x24211e1b
 80150e0:	1427      	.short	0x1427
 80150e2:	2ff5      	cmp	r7, #245	; 0xf5
 80150e4:	d906      	bls.n	80150f4 <rmw_validate_namespace_with_size+0x4c>
 80150e6:	2307      	movs	r3, #7
 80150e8:	6023      	str	r3, [r4, #0]
 80150ea:	b10e      	cbz	r6, 80150f0 <rmw_validate_namespace_with_size+0x48>
 80150ec:	23f4      	movs	r3, #244	; 0xf4
 80150ee:	6033      	str	r3, [r6, #0]
 80150f0:	b042      	add	sp, #264	; 0x108
 80150f2:	bdd0      	pop	{r4, r6, r7, pc}
 80150f4:	2000      	movs	r0, #0
 80150f6:	6020      	str	r0, [r4, #0]
 80150f8:	b042      	add	sp, #264	; 0x108
 80150fa:	bdd0      	pop	{r4, r6, r7, pc}
 80150fc:	200b      	movs	r0, #11
 80150fe:	4770      	bx	lr
 8015100:	200b      	movs	r0, #11
 8015102:	e7f5      	b.n	80150f0 <rmw_validate_namespace_with_size+0x48>
 8015104:	2306      	movs	r3, #6
 8015106:	6023      	str	r3, [r4, #0]
 8015108:	2e00      	cmp	r6, #0
 801510a:	d0f1      	beq.n	80150f0 <rmw_validate_namespace_with_size+0x48>
 801510c:	9b01      	ldr	r3, [sp, #4]
 801510e:	6033      	str	r3, [r6, #0]
 8015110:	e7ee      	b.n	80150f0 <rmw_validate_namespace_with_size+0x48>
 8015112:	2301      	movs	r3, #1
 8015114:	6023      	str	r3, [r4, #0]
 8015116:	e7f7      	b.n	8015108 <rmw_validate_namespace_with_size+0x60>
 8015118:	2302      	movs	r3, #2
 801511a:	6023      	str	r3, [r4, #0]
 801511c:	e7f4      	b.n	8015108 <rmw_validate_namespace_with_size+0x60>
 801511e:	2303      	movs	r3, #3
 8015120:	6023      	str	r3, [r4, #0]
 8015122:	e7f1      	b.n	8015108 <rmw_validate_namespace_with_size+0x60>
 8015124:	2304      	movs	r3, #4
 8015126:	6023      	str	r3, [r4, #0]
 8015128:	e7ee      	b.n	8015108 <rmw_validate_namespace_with_size+0x60>
 801512a:	2305      	movs	r3, #5
 801512c:	6023      	str	r3, [r4, #0]
 801512e:	e7eb      	b.n	8015108 <rmw_validate_namespace_with_size+0x60>
 8015130:	4a03      	ldr	r2, [pc, #12]	; (8015140 <rmw_validate_namespace_with_size+0x98>)
 8015132:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015136:	a802      	add	r0, sp, #8
 8015138:	f7ff ff44 	bl	8014fc4 <rcutils_snprintf>
 801513c:	2001      	movs	r0, #1
 801513e:	e7d7      	b.n	80150f0 <rmw_validate_namespace_with_size+0x48>
 8015140:	080199e0 	.word	0x080199e0

08015144 <rmw_validate_namespace>:
 8015144:	b168      	cbz	r0, 8015162 <rmw_validate_namespace+0x1e>
 8015146:	b570      	push	{r4, r5, r6, lr}
 8015148:	460d      	mov	r5, r1
 801514a:	4616      	mov	r6, r2
 801514c:	4604      	mov	r4, r0
 801514e:	f7eb f849 	bl	80001e4 <strlen>
 8015152:	4633      	mov	r3, r6
 8015154:	4601      	mov	r1, r0
 8015156:	462a      	mov	r2, r5
 8015158:	4620      	mov	r0, r4
 801515a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801515e:	f7ff bfa3 	b.w	80150a8 <rmw_validate_namespace_with_size>
 8015162:	200b      	movs	r0, #11
 8015164:	4770      	bx	lr
 8015166:	bf00      	nop

08015168 <rmw_namespace_validation_result_string>:
 8015168:	2807      	cmp	r0, #7
 801516a:	bf9a      	itte	ls
 801516c:	4b02      	ldrls	r3, [pc, #8]	; (8015178 <rmw_namespace_validation_result_string+0x10>)
 801516e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015172:	4802      	ldrhi	r0, [pc, #8]	; (801517c <rmw_namespace_validation_result_string+0x14>)
 8015174:	4770      	bx	lr
 8015176:	bf00      	nop
 8015178:	08019bd8 	.word	0x08019bd8
 801517c:	08019a30 	.word	0x08019a30

08015180 <rmw_validate_node_name>:
 8015180:	2800      	cmp	r0, #0
 8015182:	d03b      	beq.n	80151fc <rmw_validate_node_name+0x7c>
 8015184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015188:	460f      	mov	r7, r1
 801518a:	2900      	cmp	r1, #0
 801518c:	d038      	beq.n	8015200 <rmw_validate_node_name+0x80>
 801518e:	4615      	mov	r5, r2
 8015190:	4604      	mov	r4, r0
 8015192:	f7eb f827 	bl	80001e4 <strlen>
 8015196:	b1e0      	cbz	r0, 80151d2 <rmw_validate_node_name+0x52>
 8015198:	1e63      	subs	r3, r4, #1
 801519a:	eb03 0e00 	add.w	lr, r3, r0
 801519e:	f1c4 0c01 	rsb	ip, r4, #1
 80151a2:	eb0c 0803 	add.w	r8, ip, r3
 80151a6:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 80151aa:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 80151ae:	f026 0220 	bic.w	r2, r6, #32
 80151b2:	2909      	cmp	r1, #9
 80151b4:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 80151b8:	d913      	bls.n	80151e2 <rmw_validate_node_name+0x62>
 80151ba:	2a19      	cmp	r2, #25
 80151bc:	d911      	bls.n	80151e2 <rmw_validate_node_name+0x62>
 80151be:	2e5f      	cmp	r6, #95	; 0x5f
 80151c0:	d00f      	beq.n	80151e2 <rmw_validate_node_name+0x62>
 80151c2:	2302      	movs	r3, #2
 80151c4:	603b      	str	r3, [r7, #0]
 80151c6:	b10d      	cbz	r5, 80151cc <rmw_validate_node_name+0x4c>
 80151c8:	f8c5 8000 	str.w	r8, [r5]
 80151cc:	2000      	movs	r0, #0
 80151ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151d2:	2301      	movs	r3, #1
 80151d4:	603b      	str	r3, [r7, #0]
 80151d6:	2d00      	cmp	r5, #0
 80151d8:	d0f8      	beq.n	80151cc <rmw_validate_node_name+0x4c>
 80151da:	2000      	movs	r0, #0
 80151dc:	6028      	str	r0, [r5, #0]
 80151de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151e2:	4573      	cmp	r3, lr
 80151e4:	d1dd      	bne.n	80151a2 <rmw_validate_node_name+0x22>
 80151e6:	7822      	ldrb	r2, [r4, #0]
 80151e8:	4b0d      	ldr	r3, [pc, #52]	; (8015220 <rmw_validate_node_name+0xa0>)
 80151ea:	5cd3      	ldrb	r3, [r2, r3]
 80151ec:	f013 0304 	ands.w	r3, r3, #4
 80151f0:	d110      	bne.n	8015214 <rmw_validate_node_name+0x94>
 80151f2:	28ff      	cmp	r0, #255	; 0xff
 80151f4:	d806      	bhi.n	8015204 <rmw_validate_node_name+0x84>
 80151f6:	603b      	str	r3, [r7, #0]
 80151f8:	4618      	mov	r0, r3
 80151fa:	e7e8      	b.n	80151ce <rmw_validate_node_name+0x4e>
 80151fc:	200b      	movs	r0, #11
 80151fe:	4770      	bx	lr
 8015200:	200b      	movs	r0, #11
 8015202:	e7e4      	b.n	80151ce <rmw_validate_node_name+0x4e>
 8015204:	2204      	movs	r2, #4
 8015206:	603a      	str	r2, [r7, #0]
 8015208:	2d00      	cmp	r5, #0
 801520a:	d0df      	beq.n	80151cc <rmw_validate_node_name+0x4c>
 801520c:	22fe      	movs	r2, #254	; 0xfe
 801520e:	4618      	mov	r0, r3
 8015210:	602a      	str	r2, [r5, #0]
 8015212:	e7dc      	b.n	80151ce <rmw_validate_node_name+0x4e>
 8015214:	2303      	movs	r3, #3
 8015216:	603b      	str	r3, [r7, #0]
 8015218:	2d00      	cmp	r5, #0
 801521a:	d1de      	bne.n	80151da <rmw_validate_node_name+0x5a>
 801521c:	e7d6      	b.n	80151cc <rmw_validate_node_name+0x4c>
 801521e:	bf00      	nop
 8015220:	08019d2d 	.word	0x08019d2d

08015224 <rmw_node_name_validation_result_string>:
 8015224:	2804      	cmp	r0, #4
 8015226:	bf9a      	itte	ls
 8015228:	4b02      	ldrls	r3, [pc, #8]	; (8015234 <rmw_node_name_validation_result_string+0x10>)
 801522a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801522e:	4802      	ldrhi	r0, [pc, #8]	; (8015238 <rmw_node_name_validation_result_string+0x14>)
 8015230:	4770      	bx	lr
 8015232:	bf00      	nop
 8015234:	08019ce4 	.word	0x08019ce4
 8015238:	08019bf8 	.word	0x08019bf8

0801523c <on_status>:
 801523c:	b082      	sub	sp, #8
 801523e:	b002      	add	sp, #8
 8015240:	4770      	bx	lr
 8015242:	bf00      	nop

08015244 <on_topic>:
 8015244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015248:	4a21      	ldr	r2, [pc, #132]	; (80152d0 <on_topic+0x8c>)
 801524a:	b094      	sub	sp, #80	; 0x50
 801524c:	6812      	ldr	r2, [r2, #0]
 801524e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8015250:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8015254:	9113      	str	r1, [sp, #76]	; 0x4c
 8015256:	9312      	str	r3, [sp, #72]	; 0x48
 8015258:	b3ba      	cbz	r2, 80152ca <on_topic+0x86>
 801525a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801525e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8015262:	e001      	b.n	8015268 <on_topic+0x24>
 8015264:	6892      	ldr	r2, [r2, #8]
 8015266:	b382      	cbz	r2, 80152ca <on_topic+0x86>
 8015268:	68d4      	ldr	r4, [r2, #12]
 801526a:	8aa3      	ldrh	r3, [r4, #20]
 801526c:	428b      	cmp	r3, r1
 801526e:	d1f9      	bne.n	8015264 <on_topic+0x20>
 8015270:	7da3      	ldrb	r3, [r4, #22]
 8015272:	4283      	cmp	r3, r0
 8015274:	d1f6      	bne.n	8015264 <on_topic+0x20>
 8015276:	2248      	movs	r2, #72	; 0x48
 8015278:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801527c:	4668      	mov	r0, sp
 801527e:	f001 fd7d 	bl	8016d7c <memcpy>
 8015282:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8015286:	4620      	mov	r0, r4
 8015288:	f7f9 fdda 	bl	800ee40 <rmw_uxrce_get_static_input_buffer_for_entity>
 801528c:	4607      	mov	r7, r0
 801528e:	b1e0      	cbz	r0, 80152ca <on_topic+0x86>
 8015290:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8015294:	462a      	mov	r2, r5
 8015296:	4630      	mov	r0, r6
 8015298:	f108 0110 	add.w	r1, r8, #16
 801529c:	f000 fcd0 	bl	8015c40 <ucdr_deserialize_array_uint8_t>
 80152a0:	b930      	cbnz	r0, 80152b0 <on_topic+0x6c>
 80152a2:	480c      	ldr	r0, [pc, #48]	; (80152d4 <on_topic+0x90>)
 80152a4:	4639      	mov	r1, r7
 80152a6:	b014      	add	sp, #80	; 0x50
 80152a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80152ac:	f000 b8ba 	b.w	8015424 <put_memory>
 80152b0:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 80152b4:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 80152b8:	f7f9 fc00 	bl	800eabc <rmw_uros_epoch_nanos>
 80152bc:	f608 0218 	addw	r2, r8, #2072	; 0x818
 80152c0:	2305      	movs	r3, #5
 80152c2:	e9c2 0100 	strd	r0, r1, [r2]
 80152c6:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 80152ca:	b014      	add	sp, #80	; 0x50
 80152cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152d0:	200144b4 	.word	0x200144b4
 80152d4:	20011248 	.word	0x20011248

080152d8 <on_request>:
 80152d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152dc:	4822      	ldr	r0, [pc, #136]	; (8015368 <on_request+0x90>)
 80152de:	b095      	sub	sp, #84	; 0x54
 80152e0:	9113      	str	r1, [sp, #76]	; 0x4c
 80152e2:	6801      	ldr	r1, [r0, #0]
 80152e4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80152e6:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 80152ea:	2900      	cmp	r1, #0
 80152ec:	d039      	beq.n	8015362 <on_request+0x8a>
 80152ee:	461d      	mov	r5, r3
 80152f0:	e001      	b.n	80152f6 <on_request+0x1e>
 80152f2:	6889      	ldr	r1, [r1, #8]
 80152f4:	b3a9      	cbz	r1, 8015362 <on_request+0x8a>
 80152f6:	68cc      	ldr	r4, [r1, #12]
 80152f8:	8b20      	ldrh	r0, [r4, #24]
 80152fa:	4290      	cmp	r0, r2
 80152fc:	d1f9      	bne.n	80152f2 <on_request+0x1a>
 80152fe:	2248      	movs	r2, #72	; 0x48
 8015300:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8015304:	4668      	mov	r0, sp
 8015306:	f001 fd39 	bl	8016d7c <memcpy>
 801530a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 801530e:	4620      	mov	r0, r4
 8015310:	f7f9 fd96 	bl	800ee40 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015314:	4680      	mov	r8, r0
 8015316:	b320      	cbz	r0, 8015362 <on_request+0x8a>
 8015318:	f8d0 900c 	ldr.w	r9, [r0, #12]
 801531c:	4632      	mov	r2, r6
 801531e:	4638      	mov	r0, r7
 8015320:	f109 0110 	add.w	r1, r9, #16
 8015324:	f000 fc8c 	bl	8015c40 <ucdr_deserialize_array_uint8_t>
 8015328:	b930      	cbnz	r0, 8015338 <on_request+0x60>
 801532a:	4810      	ldr	r0, [pc, #64]	; (801536c <on_request+0x94>)
 801532c:	4641      	mov	r1, r8
 801532e:	b015      	add	sp, #84	; 0x54
 8015330:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015334:	f000 b876 	b.w	8015424 <put_memory>
 8015338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801533a:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 801533e:	f609 0428 	addw	r4, r9, #2088	; 0x828
 8015342:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8015346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015348:	e895 0003 	ldmia.w	r5, {r0, r1}
 801534c:	e884 0003 	stmia.w	r4, {r0, r1}
 8015350:	f7f9 fbb4 	bl	800eabc <rmw_uros_epoch_nanos>
 8015354:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8015358:	2303      	movs	r3, #3
 801535a:	e9c2 0100 	strd	r0, r1, [r2]
 801535e:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8015362:	b015      	add	sp, #84	; 0x54
 8015364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015368:	200144a4 	.word	0x200144a4
 801536c:	20011248 	.word	0x20011248

08015370 <on_reply>:
 8015370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015374:	4821      	ldr	r0, [pc, #132]	; (80153fc <on_reply+0x8c>)
 8015376:	b095      	sub	sp, #84	; 0x54
 8015378:	9113      	str	r1, [sp, #76]	; 0x4c
 801537a:	6801      	ldr	r1, [r0, #0]
 801537c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801537e:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8015382:	b3b9      	cbz	r1, 80153f4 <on_reply+0x84>
 8015384:	461d      	mov	r5, r3
 8015386:	e001      	b.n	801538c <on_reply+0x1c>
 8015388:	6889      	ldr	r1, [r1, #8]
 801538a:	b399      	cbz	r1, 80153f4 <on_reply+0x84>
 801538c:	68cc      	ldr	r4, [r1, #12]
 801538e:	8b20      	ldrh	r0, [r4, #24]
 8015390:	4290      	cmp	r0, r2
 8015392:	d1f9      	bne.n	8015388 <on_reply+0x18>
 8015394:	2248      	movs	r2, #72	; 0x48
 8015396:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801539a:	4668      	mov	r0, sp
 801539c:	f001 fcee 	bl	8016d7c <memcpy>
 80153a0:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80153a4:	4620      	mov	r0, r4
 80153a6:	f7f9 fd4b 	bl	800ee40 <rmw_uxrce_get_static_input_buffer_for_entity>
 80153aa:	4680      	mov	r8, r0
 80153ac:	b310      	cbz	r0, 80153f4 <on_reply+0x84>
 80153ae:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80153b2:	4632      	mov	r2, r6
 80153b4:	4638      	mov	r0, r7
 80153b6:	f109 0110 	add.w	r1, r9, #16
 80153ba:	f000 fc41 	bl	8015c40 <ucdr_deserialize_array_uint8_t>
 80153be:	b930      	cbnz	r0, 80153ce <on_reply+0x5e>
 80153c0:	480f      	ldr	r0, [pc, #60]	; (8015400 <on_reply+0x90>)
 80153c2:	4641      	mov	r1, r8
 80153c4:	b015      	add	sp, #84	; 0x54
 80153c6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80153ca:	f000 b82b 	b.w	8015424 <put_memory>
 80153ce:	b2aa      	uxth	r2, r5
 80153d0:	2300      	movs	r3, #0
 80153d2:	f609 0128 	addw	r1, r9, #2088	; 0x828
 80153d6:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 80153da:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 80153de:	e9c1 2300 	strd	r2, r3, [r1]
 80153e2:	f7f9 fb6b 	bl	800eabc <rmw_uros_epoch_nanos>
 80153e6:	f609 0218 	addw	r2, r9, #2072	; 0x818
 80153ea:	2304      	movs	r3, #4
 80153ec:	e9c2 0100 	strd	r0, r1, [r2]
 80153f0:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80153f4:	b015      	add	sp, #84	; 0x54
 80153f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153fa:	bf00      	nop
 80153fc:	20011ad8 	.word	0x20011ad8
 8015400:	20011248 	.word	0x20011248

08015404 <get_memory>:
 8015404:	4603      	mov	r3, r0
 8015406:	6840      	ldr	r0, [r0, #4]
 8015408:	b158      	cbz	r0, 8015422 <get_memory+0x1e>
 801540a:	6882      	ldr	r2, [r0, #8]
 801540c:	605a      	str	r2, [r3, #4]
 801540e:	b10a      	cbz	r2, 8015414 <get_memory+0x10>
 8015410:	2100      	movs	r1, #0
 8015412:	6051      	str	r1, [r2, #4]
 8015414:	681a      	ldr	r2, [r3, #0]
 8015416:	6082      	str	r2, [r0, #8]
 8015418:	b102      	cbz	r2, 801541c <get_memory+0x18>
 801541a:	6050      	str	r0, [r2, #4]
 801541c:	2200      	movs	r2, #0
 801541e:	6042      	str	r2, [r0, #4]
 8015420:	6018      	str	r0, [r3, #0]
 8015422:	4770      	bx	lr

08015424 <put_memory>:
 8015424:	684b      	ldr	r3, [r1, #4]
 8015426:	b10b      	cbz	r3, 801542c <put_memory+0x8>
 8015428:	688a      	ldr	r2, [r1, #8]
 801542a:	609a      	str	r2, [r3, #8]
 801542c:	688a      	ldr	r2, [r1, #8]
 801542e:	b102      	cbz	r2, 8015432 <put_memory+0xe>
 8015430:	6053      	str	r3, [r2, #4]
 8015432:	6803      	ldr	r3, [r0, #0]
 8015434:	428b      	cmp	r3, r1
 8015436:	6843      	ldr	r3, [r0, #4]
 8015438:	bf08      	it	eq
 801543a:	6002      	streq	r2, [r0, #0]
 801543c:	608b      	str	r3, [r1, #8]
 801543e:	b103      	cbz	r3, 8015442 <put_memory+0x1e>
 8015440:	6059      	str	r1, [r3, #4]
 8015442:	2300      	movs	r3, #0
 8015444:	604b      	str	r3, [r1, #4]
 8015446:	6041      	str	r1, [r0, #4]
 8015448:	4770      	bx	lr
 801544a:	bf00      	nop

0801544c <rmw_destroy_client>:
 801544c:	b538      	push	{r3, r4, r5, lr}
 801544e:	b128      	cbz	r0, 801545c <rmw_destroy_client+0x10>
 8015450:	4604      	mov	r4, r0
 8015452:	6800      	ldr	r0, [r0, #0]
 8015454:	460d      	mov	r5, r1
 8015456:	f7f9 fe49 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 801545a:	b910      	cbnz	r0, 8015462 <rmw_destroy_client+0x16>
 801545c:	2401      	movs	r4, #1
 801545e:	4620      	mov	r0, r4
 8015460:	bd38      	pop	{r3, r4, r5, pc}
 8015462:	6863      	ldr	r3, [r4, #4]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d0f9      	beq.n	801545c <rmw_destroy_client+0x10>
 8015468:	2d00      	cmp	r5, #0
 801546a:	d0f7      	beq.n	801545c <rmw_destroy_client+0x10>
 801546c:	6828      	ldr	r0, [r5, #0]
 801546e:	f7f9 fe3d 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 8015472:	2800      	cmp	r0, #0
 8015474:	d0f2      	beq.n	801545c <rmw_destroy_client+0x10>
 8015476:	686b      	ldr	r3, [r5, #4]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d0ef      	beq.n	801545c <rmw_destroy_client+0x10>
 801547c:	6864      	ldr	r4, [r4, #4]
 801547e:	691a      	ldr	r2, [r3, #16]
 8015480:	6920      	ldr	r0, [r4, #16]
 8015482:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015486:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801548a:	6819      	ldr	r1, [r3, #0]
 801548c:	f7fa f9fa 	bl	800f884 <uxr_buffer_delete_entity>
 8015490:	4602      	mov	r2, r0
 8015492:	6920      	ldr	r0, [r4, #16]
 8015494:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015498:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801549c:	f7f9 fdbc 	bl	800f018 <run_xrce_session>
 80154a0:	2800      	cmp	r0, #0
 80154a2:	4628      	mov	r0, r5
 80154a4:	bf14      	ite	ne
 80154a6:	2400      	movne	r4, #0
 80154a8:	2402      	moveq	r4, #2
 80154aa:	f7f9 fca9 	bl	800ee00 <rmw_uxrce_fini_client_memory>
 80154ae:	e7d6      	b.n	801545e <rmw_destroy_client+0x12>

080154b0 <rmw_get_implementation_identifier>:
 80154b0:	4b01      	ldr	r3, [pc, #4]	; (80154b8 <rmw_get_implementation_identifier+0x8>)
 80154b2:	6818      	ldr	r0, [r3, #0]
 80154b4:	4770      	bx	lr
 80154b6:	bf00      	nop
 80154b8:	08019d10 	.word	0x08019d10

080154bc <create_topic>:
 80154bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80154c0:	4605      	mov	r5, r0
 80154c2:	b085      	sub	sp, #20
 80154c4:	4822      	ldr	r0, [pc, #136]	; (8015550 <create_topic+0x94>)
 80154c6:	460f      	mov	r7, r1
 80154c8:	4616      	mov	r6, r2
 80154ca:	f7ff ff9b 	bl	8015404 <get_memory>
 80154ce:	4604      	mov	r4, r0
 80154d0:	b3a0      	cbz	r0, 801553c <create_topic+0x80>
 80154d2:	692a      	ldr	r2, [r5, #16]
 80154d4:	68c4      	ldr	r4, [r0, #12]
 80154d6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8015554 <create_topic+0x98>
 80154da:	61a5      	str	r5, [r4, #24]
 80154dc:	f241 5396 	movw	r3, #5526	; 0x1596
 80154e0:	6166      	str	r6, [r4, #20]
 80154e2:	5ad0      	ldrh	r0, [r2, r3]
 80154e4:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8015558 <create_topic+0x9c>
 80154e8:	1c41      	adds	r1, r0, #1
 80154ea:	52d1      	strh	r1, [r2, r3]
 80154ec:	2102      	movs	r1, #2
 80154ee:	f7fa fc97 	bl	800fe20 <uxr_object_id>
 80154f2:	4641      	mov	r1, r8
 80154f4:	6120      	str	r0, [r4, #16]
 80154f6:	223c      	movs	r2, #60	; 0x3c
 80154f8:	4638      	mov	r0, r7
 80154fa:	f7f9 fde1 	bl	800f0c0 <generate_topic_name>
 80154fe:	4649      	mov	r1, r9
 8015500:	2264      	movs	r2, #100	; 0x64
 8015502:	4630      	mov	r0, r6
 8015504:	f7f9 fda4 	bl	800f050 <generate_type_name>
 8015508:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 801550c:	2106      	movs	r1, #6
 801550e:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015512:	f8cd 9004 	str.w	r9, [sp, #4]
 8015516:	f8cd 8000 	str.w	r8, [sp]
 801551a:	9102      	str	r1, [sp, #8]
 801551c:	6811      	ldr	r1, [r2, #0]
 801551e:	6922      	ldr	r2, [r4, #16]
 8015520:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015524:	f7fa fa2c 	bl	800f980 <uxr_buffer_create_topic_bin>
 8015528:	4602      	mov	r2, r0
 801552a:	6928      	ldr	r0, [r5, #16]
 801552c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015530:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015534:	f7f9 fd70 	bl	800f018 <run_xrce_session>
 8015538:	4605      	mov	r5, r0
 801553a:	b118      	cbz	r0, 8015544 <create_topic+0x88>
 801553c:	4620      	mov	r0, r4
 801553e:	b005      	add	sp, #20
 8015540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015544:	4620      	mov	r0, r4
 8015546:	f7f9 fc6f 	bl	800ee28 <rmw_uxrce_fini_topic_memory>
 801554a:	462c      	mov	r4, r5
 801554c:	e7f6      	b.n	801553c <create_topic+0x80>
 801554e:	bf00      	nop
 8015550:	200143e0 	.word	0x200143e0
 8015554:	200102b0 	.word	0x200102b0
 8015558:	200102ec 	.word	0x200102ec

0801555c <destroy_topic>:
 801555c:	b538      	push	{r3, r4, r5, lr}
 801555e:	6985      	ldr	r5, [r0, #24]
 8015560:	b1d5      	cbz	r5, 8015598 <destroy_topic+0x3c>
 8015562:	4604      	mov	r4, r0
 8015564:	6928      	ldr	r0, [r5, #16]
 8015566:	6922      	ldr	r2, [r4, #16]
 8015568:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801556c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015570:	6819      	ldr	r1, [r3, #0]
 8015572:	f7fa f987 	bl	800f884 <uxr_buffer_delete_entity>
 8015576:	4602      	mov	r2, r0
 8015578:	6928      	ldr	r0, [r5, #16]
 801557a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801557e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015582:	f7f9 fd49 	bl	800f018 <run_xrce_session>
 8015586:	2800      	cmp	r0, #0
 8015588:	4620      	mov	r0, r4
 801558a:	bf14      	ite	ne
 801558c:	2400      	movne	r4, #0
 801558e:	2402      	moveq	r4, #2
 8015590:	f7f9 fc4a 	bl	800ee28 <rmw_uxrce_fini_topic_memory>
 8015594:	4620      	mov	r0, r4
 8015596:	bd38      	pop	{r3, r4, r5, pc}
 8015598:	2401      	movs	r4, #1
 801559a:	4620      	mov	r0, r4
 801559c:	bd38      	pop	{r3, r4, r5, pc}
 801559e:	bf00      	nop

080155a0 <rmw_take_request>:
 80155a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80155a4:	4605      	mov	r5, r0
 80155a6:	b089      	sub	sp, #36	; 0x24
 80155a8:	460c      	mov	r4, r1
 80155aa:	4690      	mov	r8, r2
 80155ac:	461f      	mov	r7, r3
 80155ae:	b10b      	cbz	r3, 80155b4 <rmw_take_request+0x14>
 80155b0:	2300      	movs	r3, #0
 80155b2:	703b      	strb	r3, [r7, #0]
 80155b4:	6828      	ldr	r0, [r5, #0]
 80155b6:	f7f9 fd99 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 80155ba:	2800      	cmp	r0, #0
 80155bc:	d040      	beq.n	8015640 <rmw_take_request+0xa0>
 80155be:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80155c2:	f7f9 fcb1 	bl	800ef28 <rmw_uxrce_clean_expired_static_input_buffer>
 80155c6:	4648      	mov	r0, r9
 80155c8:	f7f9 fc86 	bl	800eed8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80155cc:	4606      	mov	r6, r0
 80155ce:	2800      	cmp	r0, #0
 80155d0:	d03a      	beq.n	8015648 <rmw_take_request+0xa8>
 80155d2:	68c5      	ldr	r5, [r0, #12]
 80155d4:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 80155d8:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 80155dc:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 80155e0:	7423      	strb	r3, [r4, #16]
 80155e2:	e9c4 1208 	strd	r1, r2, [r4, #32]
 80155e6:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 80155ea:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 80155ee:	74e2      	strb	r2, [r4, #19]
 80155f0:	f8a4 3011 	strh.w	r3, [r4, #17]
 80155f4:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 80155f8:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 80155fc:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 8015600:	61e1      	str	r1, [r4, #28]
 8015602:	6162      	str	r2, [r4, #20]
 8015604:	61a3      	str	r3, [r4, #24]
 8015606:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801560a:	689b      	ldr	r3, [r3, #8]
 801560c:	4798      	blx	r3
 801560e:	6844      	ldr	r4, [r0, #4]
 8015610:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8015614:	f105 0110 	add.w	r1, r5, #16
 8015618:	4668      	mov	r0, sp
 801561a:	f7f6 fee5 	bl	800c3e8 <ucdr_init_buffer>
 801561e:	68e3      	ldr	r3, [r4, #12]
 8015620:	4641      	mov	r1, r8
 8015622:	4668      	mov	r0, sp
 8015624:	4798      	blx	r3
 8015626:	4631      	mov	r1, r6
 8015628:	4604      	mov	r4, r0
 801562a:	4809      	ldr	r0, [pc, #36]	; (8015650 <rmw_take_request+0xb0>)
 801562c:	f7ff fefa 	bl	8015424 <put_memory>
 8015630:	b107      	cbz	r7, 8015634 <rmw_take_request+0x94>
 8015632:	703c      	strb	r4, [r7, #0]
 8015634:	f084 0001 	eor.w	r0, r4, #1
 8015638:	b2c0      	uxtb	r0, r0
 801563a:	b009      	add	sp, #36	; 0x24
 801563c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015640:	200c      	movs	r0, #12
 8015642:	b009      	add	sp, #36	; 0x24
 8015644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015648:	2001      	movs	r0, #1
 801564a:	b009      	add	sp, #36	; 0x24
 801564c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015650:	20011248 	.word	0x20011248

08015654 <rmw_send_response>:
 8015654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015656:	4605      	mov	r5, r0
 8015658:	b091      	sub	sp, #68	; 0x44
 801565a:	6800      	ldr	r0, [r0, #0]
 801565c:	460c      	mov	r4, r1
 801565e:	4616      	mov	r6, r2
 8015660:	f7f9 fd44 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 8015664:	2800      	cmp	r0, #0
 8015666:	d043      	beq.n	80156f0 <rmw_send_response+0x9c>
 8015668:	4623      	mov	r3, r4
 801566a:	4627      	mov	r7, r4
 801566c:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8015670:	f837 ef01 	ldrh.w	lr, [r7, #1]!
 8015674:	6859      	ldr	r1, [r3, #4]
 8015676:	686d      	ldr	r5, [r5, #4]
 8015678:	689a      	ldr	r2, [r3, #8]
 801567a:	78bb      	ldrb	r3, [r7, #2]
 801567c:	f894 c000 	ldrb.w	ip, [r4]
 8015680:	6967      	ldr	r7, [r4, #20]
 8015682:	f88d 3016 	strb.w	r3, [sp, #22]
 8015686:	ab02      	add	r3, sp, #8
 8015688:	f8ad e014 	strh.w	lr, [sp, #20]
 801568c:	f88d c017 	strb.w	ip, [sp, #23]
 8015690:	9706      	str	r7, [sp, #24]
 8015692:	c307      	stmia	r3!, {r0, r1, r2}
 8015694:	696b      	ldr	r3, [r5, #20]
 8015696:	6922      	ldr	r2, [r4, #16]
 8015698:	9207      	str	r2, [sp, #28]
 801569a:	68db      	ldr	r3, [r3, #12]
 801569c:	6fac      	ldr	r4, [r5, #120]	; 0x78
 801569e:	4798      	blx	r3
 80156a0:	4603      	mov	r3, r0
 80156a2:	4630      	mov	r0, r6
 80156a4:	685f      	ldr	r7, [r3, #4]
 80156a6:	693b      	ldr	r3, [r7, #16]
 80156a8:	4798      	blx	r3
 80156aa:	6923      	ldr	r3, [r4, #16]
 80156ac:	3018      	adds	r0, #24
 80156ae:	9000      	str	r0, [sp, #0]
 80156b0:	692a      	ldr	r2, [r5, #16]
 80156b2:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80156b4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80156b8:	ab08      	add	r3, sp, #32
 80156ba:	f7fc fa6d 	bl	8011b98 <uxr_prepare_output_stream>
 80156be:	b910      	cbnz	r0, 80156c6 <rmw_send_response+0x72>
 80156c0:	2001      	movs	r0, #1
 80156c2:	b011      	add	sp, #68	; 0x44
 80156c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156c6:	a902      	add	r1, sp, #8
 80156c8:	a808      	add	r0, sp, #32
 80156ca:	f7fd f8c3 	bl	8012854 <uxr_serialize_SampleIdentity>
 80156ce:	68bb      	ldr	r3, [r7, #8]
 80156d0:	a908      	add	r1, sp, #32
 80156d2:	4630      	mov	r0, r6
 80156d4:	4798      	blx	r3
 80156d6:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 80156da:	6920      	ldr	r0, [r4, #16]
 80156dc:	2b01      	cmp	r3, #1
 80156de:	d00a      	beq.n	80156f6 <rmw_send_response+0xa2>
 80156e0:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80156e2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80156e6:	f7fb f9c5 	bl	8010a74 <uxr_run_session_until_confirm_delivery>
 80156ea:	2000      	movs	r0, #0
 80156ec:	b011      	add	sp, #68	; 0x44
 80156ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156f0:	200c      	movs	r0, #12
 80156f2:	b011      	add	sp, #68	; 0x44
 80156f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156f6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80156fa:	f7fb f927 	bl	801094c <uxr_flash_output_streams>
 80156fe:	2000      	movs	r0, #0
 8015700:	b011      	add	sp, #68	; 0x44
 8015702:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015704 <rmw_take_response>:
 8015704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015708:	4605      	mov	r5, r0
 801570a:	b089      	sub	sp, #36	; 0x24
 801570c:	460f      	mov	r7, r1
 801570e:	4690      	mov	r8, r2
 8015710:	461c      	mov	r4, r3
 8015712:	b10b      	cbz	r3, 8015718 <rmw_take_response+0x14>
 8015714:	2300      	movs	r3, #0
 8015716:	7023      	strb	r3, [r4, #0]
 8015718:	6828      	ldr	r0, [r5, #0]
 801571a:	f7f9 fce7 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 801571e:	b360      	cbz	r0, 801577a <rmw_take_response+0x76>
 8015720:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015724:	f7f9 fc00 	bl	800ef28 <rmw_uxrce_clean_expired_static_input_buffer>
 8015728:	4648      	mov	r0, r9
 801572a:	f7f9 fbd5 	bl	800eed8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801572e:	4606      	mov	r6, r0
 8015730:	b338      	cbz	r0, 8015782 <rmw_take_response+0x7e>
 8015732:	68c5      	ldr	r5, [r0, #12]
 8015734:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8015738:	f605 0328 	addw	r3, r5, #2088	; 0x828
 801573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015740:	68c9      	ldr	r1, [r1, #12]
 8015742:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8015746:	4788      	blx	r1
 8015748:	6847      	ldr	r7, [r0, #4]
 801574a:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 801574e:	f105 0110 	add.w	r1, r5, #16
 8015752:	4668      	mov	r0, sp
 8015754:	f7f6 fe48 	bl	800c3e8 <ucdr_init_buffer>
 8015758:	4641      	mov	r1, r8
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	4668      	mov	r0, sp
 801575e:	4798      	blx	r3
 8015760:	4631      	mov	r1, r6
 8015762:	4605      	mov	r5, r0
 8015764:	4809      	ldr	r0, [pc, #36]	; (801578c <rmw_take_response+0x88>)
 8015766:	f7ff fe5d 	bl	8015424 <put_memory>
 801576a:	b104      	cbz	r4, 801576e <rmw_take_response+0x6a>
 801576c:	7025      	strb	r5, [r4, #0]
 801576e:	f085 0001 	eor.w	r0, r5, #1
 8015772:	b2c0      	uxtb	r0, r0
 8015774:	b009      	add	sp, #36	; 0x24
 8015776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801577a:	200c      	movs	r0, #12
 801577c:	b009      	add	sp, #36	; 0x24
 801577e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015782:	2001      	movs	r0, #1
 8015784:	b009      	add	sp, #36	; 0x24
 8015786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801578a:	bf00      	nop
 801578c:	20011248 	.word	0x20011248

08015790 <rmw_wait>:
 8015790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015794:	4688      	mov	r8, r1
 8015796:	4606      	mov	r6, r0
 8015798:	990c      	ldr	r1, [sp, #48]	; 0x30
 801579a:	461d      	mov	r5, r3
 801579c:	4691      	mov	r9, r2
 801579e:	2a00      	cmp	r2, #0
 80157a0:	f000 811d 	beq.w	80159de <rmw_wait+0x24e>
 80157a4:	2900      	cmp	r1, #0
 80157a6:	f000 8126 	beq.w	80159f6 <rmw_wait+0x266>
 80157aa:	e9d1 2300 	ldrd	r2, r3, [r1]
 80157ae:	0157      	lsls	r7, r2, #5
 80157b0:	015c      	lsls	r4, r3, #5
 80157b2:	1abf      	subs	r7, r7, r2
 80157b4:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 80157b8:	eb64 0403 	sbc.w	r4, r4, r3
 80157bc:	00b8      	lsls	r0, r7, #2
 80157be:	00a4      	lsls	r4, r4, #2
 80157c0:	ea44 7497 	orr.w	r4, r4, r7, lsr #30
 80157c4:	1887      	adds	r7, r0, r2
 80157c6:	eb43 0404 	adc.w	r4, r3, r4
 80157ca:	4aa8      	ldr	r2, [pc, #672]	; (8015a6c <rmw_wait+0x2dc>)
 80157cc:	2300      	movs	r3, #0
 80157ce:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80157d2:	f7ea fdb5 	bl	8000340 <__aeabi_uldivmod>
 80157d6:	00e4      	lsls	r4, r4, #3
 80157d8:	ea44 7457 	orr.w	r4, r4, r7, lsr #29
 80157dc:	00ff      	lsls	r7, r7, #3
 80157de:	eb17 0a00 	adds.w	sl, r7, r0
 80157e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80157e6:	eb44 0b01 	adc.w	fp, r4, r1
 80157ea:	2300      	movs	r3, #0
 80157ec:	4552      	cmp	r2, sl
 80157ee:	eb73 010b 	sbcs.w	r1, r3, fp
 80157f2:	f2c0 80f2 	blt.w	80159da <rmw_wait+0x24a>
 80157f6:	4f9e      	ldr	r7, [pc, #632]	; (8015a70 <rmw_wait+0x2e0>)
 80157f8:	f7f9 fb96 	bl	800ef28 <rmw_uxrce_clean_expired_static_input_buffer>
 80157fc:	683b      	ldr	r3, [r7, #0]
 80157fe:	b143      	cbz	r3, 8015812 <rmw_wait+0x82>
 8015800:	461a      	mov	r2, r3
 8015802:	f241 54a4 	movw	r4, #5540	; 0x15a4
 8015806:	2000      	movs	r0, #0
 8015808:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 801580c:	5508      	strb	r0, [r1, r4]
 801580e:	2a00      	cmp	r2, #0
 8015810:	d1fa      	bne.n	8015808 <rmw_wait+0x78>
 8015812:	f1b9 0f00 	cmp.w	r9, #0
 8015816:	d011      	beq.n	801583c <rmw_wait+0xac>
 8015818:	f8d9 0000 	ldr.w	r0, [r9]
 801581c:	b170      	cbz	r0, 801583c <rmw_wait+0xac>
 801581e:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8015822:	2200      	movs	r2, #0
 8015824:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8015828:	2401      	movs	r4, #1
 801582a:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 801582e:	6f89      	ldr	r1, [r1, #120]	; 0x78
 8015830:	3201      	adds	r2, #1
 8015832:	6909      	ldr	r1, [r1, #16]
 8015834:	4290      	cmp	r0, r2
 8015836:	f801 400c 	strb.w	r4, [r1, ip]
 801583a:	d1f6      	bne.n	801582a <rmw_wait+0x9a>
 801583c:	b185      	cbz	r5, 8015860 <rmw_wait+0xd0>
 801583e:	6828      	ldr	r0, [r5, #0]
 8015840:	b170      	cbz	r0, 8015860 <rmw_wait+0xd0>
 8015842:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8015846:	2200      	movs	r2, #0
 8015848:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 801584c:	2401      	movs	r4, #1
 801584e:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8015852:	6f89      	ldr	r1, [r1, #120]	; 0x78
 8015854:	3201      	adds	r2, #1
 8015856:	6909      	ldr	r1, [r1, #16]
 8015858:	4290      	cmp	r0, r2
 801585a:	f801 400c 	strb.w	r4, [r1, ip]
 801585e:	d1f6      	bne.n	801584e <rmw_wait+0xbe>
 8015860:	b186      	cbz	r6, 8015884 <rmw_wait+0xf4>
 8015862:	6830      	ldr	r0, [r6, #0]
 8015864:	b170      	cbz	r0, 8015884 <rmw_wait+0xf4>
 8015866:	f8d6 e004 	ldr.w	lr, [r6, #4]
 801586a:	2200      	movs	r2, #0
 801586c:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8015870:	2401      	movs	r4, #1
 8015872:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8015876:	6a09      	ldr	r1, [r1, #32]
 8015878:	3201      	adds	r2, #1
 801587a:	6909      	ldr	r1, [r1, #16]
 801587c:	4290      	cmp	r0, r2
 801587e:	f801 400c 	strb.w	r4, [r1, ip]
 8015882:	d1f6      	bne.n	8015872 <rmw_wait+0xe2>
 8015884:	2b00      	cmp	r3, #0
 8015886:	f000 80ce 	beq.w	8015a26 <rmw_wait+0x296>
 801588a:	2400      	movs	r4, #0
 801588c:	f241 51a4 	movw	r1, #5540	; 0x15a4
 8015890:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8015894:	5c52      	ldrb	r2, [r2, r1]
 8015896:	4414      	add	r4, r2
 8015898:	b2e4      	uxtb	r4, r4
 801589a:	2b00      	cmp	r3, #0
 801589c:	d1f8      	bne.n	8015890 <rmw_wait+0x100>
 801589e:	f7f9 fb43 	bl	800ef28 <rmw_uxrce_clean_expired_static_input_buffer>
 80158a2:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80158a6:	d00d      	beq.n	80158c4 <rmw_wait+0x134>
 80158a8:	ee07 aa90 	vmov	s15, sl
 80158ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80158b0:	ee07 4a90 	vmov	s15, r4
 80158b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80158b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80158bc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80158c0:	ee17 aa90 	vmov	sl, s15
 80158c4:	683c      	ldr	r4, [r7, #0]
 80158c6:	b144      	cbz	r4, 80158da <rmw_wait+0x14a>
 80158c8:	f241 57a4 	movw	r7, #5540	; 0x15a4
 80158cc:	68e0      	ldr	r0, [r4, #12]
 80158ce:	5dc3      	ldrb	r3, [r0, r7]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d169      	bne.n	80159a8 <rmw_wait+0x218>
 80158d4:	68a4      	ldr	r4, [r4, #8]
 80158d6:	2c00      	cmp	r4, #0
 80158d8:	d1f8      	bne.n	80158cc <rmw_wait+0x13c>
 80158da:	f1b9 0f00 	cmp.w	r9, #0
 80158de:	f000 80a4 	beq.w	8015a2a <rmw_wait+0x29a>
 80158e2:	f8d9 7000 	ldr.w	r7, [r9]
 80158e6:	2f00      	cmp	r7, #0
 80158e8:	f000 8088 	beq.w	80159fc <rmw_wait+0x26c>
 80158ec:	2400      	movs	r4, #0
 80158ee:	4627      	mov	r7, r4
 80158f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80158f4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80158f8:	f7f9 faee 	bl	800eed8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80158fc:	2800      	cmp	r0, #0
 80158fe:	d064      	beq.n	80159ca <rmw_wait+0x23a>
 8015900:	f8d9 3000 	ldr.w	r3, [r9]
 8015904:	3401      	adds	r4, #1
 8015906:	42a3      	cmp	r3, r4
 8015908:	f04f 0701 	mov.w	r7, #1
 801590c:	d8f0      	bhi.n	80158f0 <rmw_wait+0x160>
 801590e:	b17d      	cbz	r5, 8015930 <rmw_wait+0x1a0>
 8015910:	682b      	ldr	r3, [r5, #0]
 8015912:	b16b      	cbz	r3, 8015930 <rmw_wait+0x1a0>
 8015914:	2400      	movs	r4, #0
 8015916:	686b      	ldr	r3, [r5, #4]
 8015918:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801591c:	f7f9 fadc 	bl	800eed8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015920:	2800      	cmp	r0, #0
 8015922:	d04a      	beq.n	80159ba <rmw_wait+0x22a>
 8015924:	682b      	ldr	r3, [r5, #0]
 8015926:	3401      	adds	r4, #1
 8015928:	42a3      	cmp	r3, r4
 801592a:	f04f 0701 	mov.w	r7, #1
 801592e:	d8f2      	bhi.n	8015916 <rmw_wait+0x186>
 8015930:	b1de      	cbz	r6, 801596a <rmw_wait+0x1da>
 8015932:	6833      	ldr	r3, [r6, #0]
 8015934:	b1cb      	cbz	r3, 801596a <rmw_wait+0x1da>
 8015936:	2400      	movs	r4, #0
 8015938:	6873      	ldr	r3, [r6, #4]
 801593a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801593e:	f7f9 facb 	bl	800eed8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015942:	b158      	cbz	r0, 801595c <rmw_wait+0x1cc>
 8015944:	6833      	ldr	r3, [r6, #0]
 8015946:	3401      	adds	r4, #1
 8015948:	42a3      	cmp	r3, r4
 801594a:	d963      	bls.n	8015a14 <rmw_wait+0x284>
 801594c:	6873      	ldr	r3, [r6, #4]
 801594e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015952:	2701      	movs	r7, #1
 8015954:	f7f9 fac0 	bl	800eed8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015958:	2800      	cmp	r0, #0
 801595a:	d1f3      	bne.n	8015944 <rmw_wait+0x1b4>
 801595c:	e9d6 3200 	ldrd	r3, r2, [r6]
 8015960:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015964:	3401      	adds	r4, #1
 8015966:	42a3      	cmp	r3, r4
 8015968:	d8e6      	bhi.n	8015938 <rmw_wait+0x1a8>
 801596a:	f1b8 0f00 	cmp.w	r8, #0
 801596e:	d016      	beq.n	801599e <rmw_wait+0x20e>
 8015970:	f8d8 4000 	ldr.w	r4, [r8]
 8015974:	b19c      	cbz	r4, 801599e <rmw_wait+0x20e>
 8015976:	2300      	movs	r3, #0
 8015978:	461d      	mov	r5, r3
 801597a:	e004      	b.n	8015986 <rmw_wait+0x1f6>
 801597c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015980:	3301      	adds	r3, #1
 8015982:	42a3      	cmp	r3, r4
 8015984:	d00b      	beq.n	801599e <rmw_wait+0x20e>
 8015986:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801598a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801598e:	780a      	ldrb	r2, [r1, #0]
 8015990:	2a00      	cmp	r2, #0
 8015992:	d0f3      	beq.n	801597c <rmw_wait+0x1ec>
 8015994:	3301      	adds	r3, #1
 8015996:	42a3      	cmp	r3, r4
 8015998:	700d      	strb	r5, [r1, #0]
 801599a:	4617      	mov	r7, r2
 801599c:	d1f3      	bne.n	8015986 <rmw_wait+0x1f6>
 801599e:	2f00      	cmp	r7, #0
 80159a0:	d035      	beq.n	8015a0e <rmw_wait+0x27e>
 80159a2:	2000      	movs	r0, #0
 80159a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159a8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80159ac:	4651      	mov	r1, sl
 80159ae:	f7fb f841 	bl	8010a34 <uxr_run_session_until_data>
 80159b2:	68a4      	ldr	r4, [r4, #8]
 80159b4:	2c00      	cmp	r4, #0
 80159b6:	d189      	bne.n	80158cc <rmw_wait+0x13c>
 80159b8:	e78f      	b.n	80158da <rmw_wait+0x14a>
 80159ba:	e9d5 3200 	ldrd	r3, r2, [r5]
 80159be:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80159c2:	3401      	adds	r4, #1
 80159c4:	429c      	cmp	r4, r3
 80159c6:	d3a6      	bcc.n	8015916 <rmw_wait+0x186>
 80159c8:	e7b2      	b.n	8015930 <rmw_wait+0x1a0>
 80159ca:	e9d9 3200 	ldrd	r3, r2, [r9]
 80159ce:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80159d2:	3401      	adds	r4, #1
 80159d4:	42a3      	cmp	r3, r4
 80159d6:	d88b      	bhi.n	80158f0 <rmw_wait+0x160>
 80159d8:	e799      	b.n	801590e <rmw_wait+0x17e>
 80159da:	4692      	mov	sl, r2
 80159dc:	e70b      	b.n	80157f6 <rmw_wait+0x66>
 80159de:	2b00      	cmp	r3, #0
 80159e0:	f47f aee0 	bne.w	80157a4 <rmw_wait+0x14>
 80159e4:	2800      	cmp	r0, #0
 80159e6:	f47f aedd 	bne.w	80157a4 <rmw_wait+0x14>
 80159ea:	f1b8 0f00 	cmp.w	r8, #0
 80159ee:	d0d8      	beq.n	80159a2 <rmw_wait+0x212>
 80159f0:	2900      	cmp	r1, #0
 80159f2:	f47f aeda 	bne.w	80157aa <rmw_wait+0x1a>
 80159f6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80159fa:	e6fc      	b.n	80157f6 <rmw_wait+0x66>
 80159fc:	bb05      	cbnz	r5, 8015a40 <rmw_wait+0x2b0>
 80159fe:	b366      	cbz	r6, 8015a5a <rmw_wait+0x2ca>
 8015a00:	6833      	ldr	r3, [r6, #0]
 8015a02:	462f      	mov	r7, r5
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d196      	bne.n	8015936 <rmw_wait+0x1a6>
 8015a08:	f1b8 0f00 	cmp.w	r8, #0
 8015a0c:	d1b0      	bne.n	8015970 <rmw_wait+0x1e0>
 8015a0e:	2002      	movs	r0, #2
 8015a10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a14:	f1b8 0f00 	cmp.w	r8, #0
 8015a18:	d0c3      	beq.n	80159a2 <rmw_wait+0x212>
 8015a1a:	f8d8 4000 	ldr.w	r4, [r8]
 8015a1e:	2701      	movs	r7, #1
 8015a20:	2c00      	cmp	r4, #0
 8015a22:	d1a8      	bne.n	8015976 <rmw_wait+0x1e6>
 8015a24:	e7bd      	b.n	80159a2 <rmw_wait+0x212>
 8015a26:	461c      	mov	r4, r3
 8015a28:	e739      	b.n	801589e <rmw_wait+0x10e>
 8015a2a:	2d00      	cmp	r5, #0
 8015a2c:	d0e7      	beq.n	80159fe <rmw_wait+0x26e>
 8015a2e:	682b      	ldr	r3, [r5, #0]
 8015a30:	464f      	mov	r7, r9
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	f47f af6e 	bne.w	8015914 <rmw_wait+0x184>
 8015a38:	2e00      	cmp	r6, #0
 8015a3a:	f47f af7a 	bne.w	8015932 <rmw_wait+0x1a2>
 8015a3e:	e007      	b.n	8015a50 <rmw_wait+0x2c0>
 8015a40:	682b      	ldr	r3, [r5, #0]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	f47f af66 	bne.w	8015914 <rmw_wait+0x184>
 8015a48:	461f      	mov	r7, r3
 8015a4a:	2e00      	cmp	r6, #0
 8015a4c:	f47f af71 	bne.w	8015932 <rmw_wait+0x1a2>
 8015a50:	4637      	mov	r7, r6
 8015a52:	f1b8 0f00 	cmp.w	r8, #0
 8015a56:	d18b      	bne.n	8015970 <rmw_wait+0x1e0>
 8015a58:	e7d9      	b.n	8015a0e <rmw_wait+0x27e>
 8015a5a:	f1b8 0f00 	cmp.w	r8, #0
 8015a5e:	d0d6      	beq.n	8015a0e <rmw_wait+0x27e>
 8015a60:	f8d8 4000 	ldr.w	r4, [r8]
 8015a64:	4637      	mov	r7, r6
 8015a66:	2c00      	cmp	r4, #0
 8015a68:	d185      	bne.n	8015976 <rmw_wait+0x1e6>
 8015a6a:	e7d0      	b.n	8015a0e <rmw_wait+0x27e>
 8015a6c:	000f4240 	.word	0x000f4240
 8015a70:	200143f0 	.word	0x200143f0

08015a74 <rmw_create_wait_set>:
 8015a74:	b508      	push	{r3, lr}
 8015a76:	4803      	ldr	r0, [pc, #12]	; (8015a84 <rmw_create_wait_set+0x10>)
 8015a78:	f7ff fcc4 	bl	8015404 <get_memory>
 8015a7c:	b108      	cbz	r0, 8015a82 <rmw_create_wait_set+0xe>
 8015a7e:	68c0      	ldr	r0, [r0, #12]
 8015a80:	3010      	adds	r0, #16
 8015a82:	bd08      	pop	{r3, pc}
 8015a84:	20015bc8 	.word	0x20015bc8

08015a88 <rmw_destroy_wait_set>:
 8015a88:	b508      	push	{r3, lr}
 8015a8a:	4b08      	ldr	r3, [pc, #32]	; (8015aac <rmw_destroy_wait_set+0x24>)
 8015a8c:	6819      	ldr	r1, [r3, #0]
 8015a8e:	b911      	cbnz	r1, 8015a96 <rmw_destroy_wait_set+0xe>
 8015a90:	e00a      	b.n	8015aa8 <rmw_destroy_wait_set+0x20>
 8015a92:	6889      	ldr	r1, [r1, #8]
 8015a94:	b141      	cbz	r1, 8015aa8 <rmw_destroy_wait_set+0x20>
 8015a96:	68cb      	ldr	r3, [r1, #12]
 8015a98:	3310      	adds	r3, #16
 8015a9a:	4298      	cmp	r0, r3
 8015a9c:	d1f9      	bne.n	8015a92 <rmw_destroy_wait_set+0xa>
 8015a9e:	4803      	ldr	r0, [pc, #12]	; (8015aac <rmw_destroy_wait_set+0x24>)
 8015aa0:	f7ff fcc0 	bl	8015424 <put_memory>
 8015aa4:	2000      	movs	r0, #0
 8015aa6:	bd08      	pop	{r3, pc}
 8015aa8:	2001      	movs	r0, #1
 8015aaa:	bd08      	pop	{r3, pc}
 8015aac:	20015bc8 	.word	0x20015bc8

08015ab0 <ucdr_serialize_endian_array_char>:
 8015ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ab4:	4619      	mov	r1, r3
 8015ab6:	461e      	mov	r6, r3
 8015ab8:	4690      	mov	r8, r2
 8015aba:	4604      	mov	r4, r0
 8015abc:	f7f6 fc42 	bl	800c344 <ucdr_check_buffer_available_for>
 8015ac0:	b9e0      	cbnz	r0, 8015afc <ucdr_serialize_endian_array_char+0x4c>
 8015ac2:	4637      	mov	r7, r6
 8015ac4:	e009      	b.n	8015ada <ucdr_serialize_endian_array_char+0x2a>
 8015ac6:	68a0      	ldr	r0, [r4, #8]
 8015ac8:	f001 f958 	bl	8016d7c <memcpy>
 8015acc:	68a2      	ldr	r2, [r4, #8]
 8015ace:	6923      	ldr	r3, [r4, #16]
 8015ad0:	442a      	add	r2, r5
 8015ad2:	442b      	add	r3, r5
 8015ad4:	1b7f      	subs	r7, r7, r5
 8015ad6:	60a2      	str	r2, [r4, #8]
 8015ad8:	6123      	str	r3, [r4, #16]
 8015ada:	2201      	movs	r2, #1
 8015adc:	4639      	mov	r1, r7
 8015ade:	4620      	mov	r0, r4
 8015ae0:	f7f6 fcb8 	bl	800c454 <ucdr_check_final_buffer_behavior_array>
 8015ae4:	1bf1      	subs	r1, r6, r7
 8015ae6:	4441      	add	r1, r8
 8015ae8:	4605      	mov	r5, r0
 8015aea:	4602      	mov	r2, r0
 8015aec:	2800      	cmp	r0, #0
 8015aee:	d1ea      	bne.n	8015ac6 <ucdr_serialize_endian_array_char+0x16>
 8015af0:	2301      	movs	r3, #1
 8015af2:	7da0      	ldrb	r0, [r4, #22]
 8015af4:	7563      	strb	r3, [r4, #21]
 8015af6:	4058      	eors	r0, r3
 8015af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015afc:	4632      	mov	r2, r6
 8015afe:	68a0      	ldr	r0, [r4, #8]
 8015b00:	4641      	mov	r1, r8
 8015b02:	f001 f93b 	bl	8016d7c <memcpy>
 8015b06:	68a2      	ldr	r2, [r4, #8]
 8015b08:	6923      	ldr	r3, [r4, #16]
 8015b0a:	4432      	add	r2, r6
 8015b0c:	4433      	add	r3, r6
 8015b0e:	60a2      	str	r2, [r4, #8]
 8015b10:	6123      	str	r3, [r4, #16]
 8015b12:	e7ed      	b.n	8015af0 <ucdr_serialize_endian_array_char+0x40>

08015b14 <ucdr_deserialize_endian_array_char>:
 8015b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b18:	4619      	mov	r1, r3
 8015b1a:	461e      	mov	r6, r3
 8015b1c:	4690      	mov	r8, r2
 8015b1e:	4604      	mov	r4, r0
 8015b20:	f7f6 fc10 	bl	800c344 <ucdr_check_buffer_available_for>
 8015b24:	b9e0      	cbnz	r0, 8015b60 <ucdr_deserialize_endian_array_char+0x4c>
 8015b26:	4637      	mov	r7, r6
 8015b28:	e009      	b.n	8015b3e <ucdr_deserialize_endian_array_char+0x2a>
 8015b2a:	68a1      	ldr	r1, [r4, #8]
 8015b2c:	f001 f926 	bl	8016d7c <memcpy>
 8015b30:	68a2      	ldr	r2, [r4, #8]
 8015b32:	6923      	ldr	r3, [r4, #16]
 8015b34:	442a      	add	r2, r5
 8015b36:	442b      	add	r3, r5
 8015b38:	1b7f      	subs	r7, r7, r5
 8015b3a:	60a2      	str	r2, [r4, #8]
 8015b3c:	6123      	str	r3, [r4, #16]
 8015b3e:	2201      	movs	r2, #1
 8015b40:	4639      	mov	r1, r7
 8015b42:	4620      	mov	r0, r4
 8015b44:	f7f6 fc86 	bl	800c454 <ucdr_check_final_buffer_behavior_array>
 8015b48:	4605      	mov	r5, r0
 8015b4a:	1bf0      	subs	r0, r6, r7
 8015b4c:	4440      	add	r0, r8
 8015b4e:	462a      	mov	r2, r5
 8015b50:	2d00      	cmp	r5, #0
 8015b52:	d1ea      	bne.n	8015b2a <ucdr_deserialize_endian_array_char+0x16>
 8015b54:	2301      	movs	r3, #1
 8015b56:	7da0      	ldrb	r0, [r4, #22]
 8015b58:	7563      	strb	r3, [r4, #21]
 8015b5a:	4058      	eors	r0, r3
 8015b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b60:	4632      	mov	r2, r6
 8015b62:	68a1      	ldr	r1, [r4, #8]
 8015b64:	4640      	mov	r0, r8
 8015b66:	f001 f909 	bl	8016d7c <memcpy>
 8015b6a:	68a2      	ldr	r2, [r4, #8]
 8015b6c:	6923      	ldr	r3, [r4, #16]
 8015b6e:	4432      	add	r2, r6
 8015b70:	4433      	add	r3, r6
 8015b72:	60a2      	str	r2, [r4, #8]
 8015b74:	6123      	str	r3, [r4, #16]
 8015b76:	e7ed      	b.n	8015b54 <ucdr_deserialize_endian_array_char+0x40>

08015b78 <ucdr_serialize_array_uint8_t>:
 8015b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b7c:	4688      	mov	r8, r1
 8015b7e:	4611      	mov	r1, r2
 8015b80:	4616      	mov	r6, r2
 8015b82:	4604      	mov	r4, r0
 8015b84:	f7f6 fbde 	bl	800c344 <ucdr_check_buffer_available_for>
 8015b88:	b9e0      	cbnz	r0, 8015bc4 <ucdr_serialize_array_uint8_t+0x4c>
 8015b8a:	4637      	mov	r7, r6
 8015b8c:	e009      	b.n	8015ba2 <ucdr_serialize_array_uint8_t+0x2a>
 8015b8e:	68a0      	ldr	r0, [r4, #8]
 8015b90:	f001 f8f4 	bl	8016d7c <memcpy>
 8015b94:	68a2      	ldr	r2, [r4, #8]
 8015b96:	6923      	ldr	r3, [r4, #16]
 8015b98:	442a      	add	r2, r5
 8015b9a:	442b      	add	r3, r5
 8015b9c:	1b7f      	subs	r7, r7, r5
 8015b9e:	60a2      	str	r2, [r4, #8]
 8015ba0:	6123      	str	r3, [r4, #16]
 8015ba2:	2201      	movs	r2, #1
 8015ba4:	4639      	mov	r1, r7
 8015ba6:	4620      	mov	r0, r4
 8015ba8:	f7f6 fc54 	bl	800c454 <ucdr_check_final_buffer_behavior_array>
 8015bac:	1bf1      	subs	r1, r6, r7
 8015bae:	4441      	add	r1, r8
 8015bb0:	4605      	mov	r5, r0
 8015bb2:	4602      	mov	r2, r0
 8015bb4:	2800      	cmp	r0, #0
 8015bb6:	d1ea      	bne.n	8015b8e <ucdr_serialize_array_uint8_t+0x16>
 8015bb8:	2301      	movs	r3, #1
 8015bba:	7da0      	ldrb	r0, [r4, #22]
 8015bbc:	7563      	strb	r3, [r4, #21]
 8015bbe:	4058      	eors	r0, r3
 8015bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bc4:	4632      	mov	r2, r6
 8015bc6:	68a0      	ldr	r0, [r4, #8]
 8015bc8:	4641      	mov	r1, r8
 8015bca:	f001 f8d7 	bl	8016d7c <memcpy>
 8015bce:	68a3      	ldr	r3, [r4, #8]
 8015bd0:	6922      	ldr	r2, [r4, #16]
 8015bd2:	4433      	add	r3, r6
 8015bd4:	4432      	add	r2, r6
 8015bd6:	60a3      	str	r3, [r4, #8]
 8015bd8:	6122      	str	r2, [r4, #16]
 8015bda:	e7ed      	b.n	8015bb8 <ucdr_serialize_array_uint8_t+0x40>

08015bdc <ucdr_serialize_endian_array_uint8_t>:
 8015bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015be0:	4619      	mov	r1, r3
 8015be2:	461e      	mov	r6, r3
 8015be4:	4690      	mov	r8, r2
 8015be6:	4604      	mov	r4, r0
 8015be8:	f7f6 fbac 	bl	800c344 <ucdr_check_buffer_available_for>
 8015bec:	b9e0      	cbnz	r0, 8015c28 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8015bee:	4637      	mov	r7, r6
 8015bf0:	e009      	b.n	8015c06 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8015bf2:	68a0      	ldr	r0, [r4, #8]
 8015bf4:	f001 f8c2 	bl	8016d7c <memcpy>
 8015bf8:	68a2      	ldr	r2, [r4, #8]
 8015bfa:	6923      	ldr	r3, [r4, #16]
 8015bfc:	442a      	add	r2, r5
 8015bfe:	442b      	add	r3, r5
 8015c00:	1b7f      	subs	r7, r7, r5
 8015c02:	60a2      	str	r2, [r4, #8]
 8015c04:	6123      	str	r3, [r4, #16]
 8015c06:	2201      	movs	r2, #1
 8015c08:	4639      	mov	r1, r7
 8015c0a:	4620      	mov	r0, r4
 8015c0c:	f7f6 fc22 	bl	800c454 <ucdr_check_final_buffer_behavior_array>
 8015c10:	1bf1      	subs	r1, r6, r7
 8015c12:	4441      	add	r1, r8
 8015c14:	4605      	mov	r5, r0
 8015c16:	4602      	mov	r2, r0
 8015c18:	2800      	cmp	r0, #0
 8015c1a:	d1ea      	bne.n	8015bf2 <ucdr_serialize_endian_array_uint8_t+0x16>
 8015c1c:	2301      	movs	r3, #1
 8015c1e:	7da0      	ldrb	r0, [r4, #22]
 8015c20:	7563      	strb	r3, [r4, #21]
 8015c22:	4058      	eors	r0, r3
 8015c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c28:	4632      	mov	r2, r6
 8015c2a:	68a0      	ldr	r0, [r4, #8]
 8015c2c:	4641      	mov	r1, r8
 8015c2e:	f001 f8a5 	bl	8016d7c <memcpy>
 8015c32:	68a2      	ldr	r2, [r4, #8]
 8015c34:	6923      	ldr	r3, [r4, #16]
 8015c36:	4432      	add	r2, r6
 8015c38:	4433      	add	r3, r6
 8015c3a:	60a2      	str	r2, [r4, #8]
 8015c3c:	6123      	str	r3, [r4, #16]
 8015c3e:	e7ed      	b.n	8015c1c <ucdr_serialize_endian_array_uint8_t+0x40>

08015c40 <ucdr_deserialize_array_uint8_t>:
 8015c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c44:	4688      	mov	r8, r1
 8015c46:	4611      	mov	r1, r2
 8015c48:	4616      	mov	r6, r2
 8015c4a:	4604      	mov	r4, r0
 8015c4c:	f7f6 fb7a 	bl	800c344 <ucdr_check_buffer_available_for>
 8015c50:	b9e0      	cbnz	r0, 8015c8c <ucdr_deserialize_array_uint8_t+0x4c>
 8015c52:	4637      	mov	r7, r6
 8015c54:	e009      	b.n	8015c6a <ucdr_deserialize_array_uint8_t+0x2a>
 8015c56:	68a1      	ldr	r1, [r4, #8]
 8015c58:	f001 f890 	bl	8016d7c <memcpy>
 8015c5c:	68a2      	ldr	r2, [r4, #8]
 8015c5e:	6923      	ldr	r3, [r4, #16]
 8015c60:	442a      	add	r2, r5
 8015c62:	442b      	add	r3, r5
 8015c64:	1b7f      	subs	r7, r7, r5
 8015c66:	60a2      	str	r2, [r4, #8]
 8015c68:	6123      	str	r3, [r4, #16]
 8015c6a:	2201      	movs	r2, #1
 8015c6c:	4639      	mov	r1, r7
 8015c6e:	4620      	mov	r0, r4
 8015c70:	f7f6 fbf0 	bl	800c454 <ucdr_check_final_buffer_behavior_array>
 8015c74:	4605      	mov	r5, r0
 8015c76:	1bf0      	subs	r0, r6, r7
 8015c78:	4440      	add	r0, r8
 8015c7a:	462a      	mov	r2, r5
 8015c7c:	2d00      	cmp	r5, #0
 8015c7e:	d1ea      	bne.n	8015c56 <ucdr_deserialize_array_uint8_t+0x16>
 8015c80:	2301      	movs	r3, #1
 8015c82:	7da0      	ldrb	r0, [r4, #22]
 8015c84:	7563      	strb	r3, [r4, #21]
 8015c86:	4058      	eors	r0, r3
 8015c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c8c:	4632      	mov	r2, r6
 8015c8e:	68a1      	ldr	r1, [r4, #8]
 8015c90:	4640      	mov	r0, r8
 8015c92:	f001 f873 	bl	8016d7c <memcpy>
 8015c96:	68a3      	ldr	r3, [r4, #8]
 8015c98:	6922      	ldr	r2, [r4, #16]
 8015c9a:	4433      	add	r3, r6
 8015c9c:	4432      	add	r2, r6
 8015c9e:	60a3      	str	r3, [r4, #8]
 8015ca0:	6122      	str	r2, [r4, #16]
 8015ca2:	e7ed      	b.n	8015c80 <ucdr_deserialize_array_uint8_t+0x40>

08015ca4 <ucdr_serialize_endian_array_double>:
 8015ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ca8:	4605      	mov	r5, r0
 8015caa:	460f      	mov	r7, r1
 8015cac:	2108      	movs	r1, #8
 8015cae:	4614      	mov	r4, r2
 8015cb0:	461e      	mov	r6, r3
 8015cb2:	f7f6 fba5 	bl	800c400 <ucdr_buffer_alignment>
 8015cb6:	68aa      	ldr	r2, [r5, #8]
 8015cb8:	692b      	ldr	r3, [r5, #16]
 8015cba:	4402      	add	r2, r0
 8015cbc:	2f01      	cmp	r7, #1
 8015cbe:	4418      	add	r0, r3
 8015cc0:	60aa      	str	r2, [r5, #8]
 8015cc2:	6128      	str	r0, [r5, #16]
 8015cc4:	d00f      	beq.n	8015ce6 <ucdr_serialize_endian_array_double+0x42>
 8015cc6:	b14e      	cbz	r6, 8015cdc <ucdr_serialize_endian_array_double+0x38>
 8015cc8:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8015ccc:	ecb4 0b02 	vldmia	r4!, {d0}
 8015cd0:	4639      	mov	r1, r7
 8015cd2:	4628      	mov	r0, r5
 8015cd4:	f7f6 fa70 	bl	800c1b8 <ucdr_serialize_endian_double>
 8015cd8:	42a6      	cmp	r6, r4
 8015cda:	d1f7      	bne.n	8015ccc <ucdr_serialize_endian_array_double+0x28>
 8015cdc:	7da8      	ldrb	r0, [r5, #22]
 8015cde:	f080 0001 	eor.w	r0, r0, #1
 8015ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ce6:	00f6      	lsls	r6, r6, #3
 8015ce8:	4631      	mov	r1, r6
 8015cea:	4628      	mov	r0, r5
 8015cec:	f7f6 fb2a 	bl	800c344 <ucdr_check_buffer_available_for>
 8015cf0:	b9f8      	cbnz	r0, 8015d32 <ucdr_serialize_endian_array_double+0x8e>
 8015cf2:	46b0      	mov	r8, r6
 8015cf4:	e00a      	b.n	8015d0c <ucdr_serialize_endian_array_double+0x68>
 8015cf6:	68a8      	ldr	r0, [r5, #8]
 8015cf8:	f001 f840 	bl	8016d7c <memcpy>
 8015cfc:	68aa      	ldr	r2, [r5, #8]
 8015cfe:	692b      	ldr	r3, [r5, #16]
 8015d00:	443a      	add	r2, r7
 8015d02:	443b      	add	r3, r7
 8015d04:	eba8 0807 	sub.w	r8, r8, r7
 8015d08:	60aa      	str	r2, [r5, #8]
 8015d0a:	612b      	str	r3, [r5, #16]
 8015d0c:	2208      	movs	r2, #8
 8015d0e:	4641      	mov	r1, r8
 8015d10:	4628      	mov	r0, r5
 8015d12:	f7f6 fb9f 	bl	800c454 <ucdr_check_final_buffer_behavior_array>
 8015d16:	eba6 0108 	sub.w	r1, r6, r8
 8015d1a:	4421      	add	r1, r4
 8015d1c:	4607      	mov	r7, r0
 8015d1e:	4602      	mov	r2, r0
 8015d20:	2800      	cmp	r0, #0
 8015d22:	d1e8      	bne.n	8015cf6 <ucdr_serialize_endian_array_double+0x52>
 8015d24:	7da8      	ldrb	r0, [r5, #22]
 8015d26:	2308      	movs	r3, #8
 8015d28:	756b      	strb	r3, [r5, #21]
 8015d2a:	f080 0001 	eor.w	r0, r0, #1
 8015d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d32:	4632      	mov	r2, r6
 8015d34:	68a8      	ldr	r0, [r5, #8]
 8015d36:	4621      	mov	r1, r4
 8015d38:	f001 f820 	bl	8016d7c <memcpy>
 8015d3c:	68aa      	ldr	r2, [r5, #8]
 8015d3e:	692b      	ldr	r3, [r5, #16]
 8015d40:	4432      	add	r2, r6
 8015d42:	441e      	add	r6, r3
 8015d44:	60aa      	str	r2, [r5, #8]
 8015d46:	612e      	str	r6, [r5, #16]
 8015d48:	e7ec      	b.n	8015d24 <ucdr_serialize_endian_array_double+0x80>
 8015d4a:	bf00      	nop

08015d4c <ucdr_deserialize_endian_array_double>:
 8015d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d50:	4605      	mov	r5, r0
 8015d52:	460f      	mov	r7, r1
 8015d54:	2108      	movs	r1, #8
 8015d56:	4614      	mov	r4, r2
 8015d58:	461e      	mov	r6, r3
 8015d5a:	f7f6 fb51 	bl	800c400 <ucdr_buffer_alignment>
 8015d5e:	68aa      	ldr	r2, [r5, #8]
 8015d60:	692b      	ldr	r3, [r5, #16]
 8015d62:	4402      	add	r2, r0
 8015d64:	2f01      	cmp	r7, #1
 8015d66:	4418      	add	r0, r3
 8015d68:	60aa      	str	r2, [r5, #8]
 8015d6a:	6128      	str	r0, [r5, #16]
 8015d6c:	d00f      	beq.n	8015d8e <ucdr_deserialize_endian_array_double+0x42>
 8015d6e:	b14e      	cbz	r6, 8015d84 <ucdr_deserialize_endian_array_double+0x38>
 8015d70:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8015d74:	4622      	mov	r2, r4
 8015d76:	4639      	mov	r1, r7
 8015d78:	3408      	adds	r4, #8
 8015d7a:	4628      	mov	r0, r5
 8015d7c:	f7f6 faa4 	bl	800c2c8 <ucdr_deserialize_endian_double>
 8015d80:	42a6      	cmp	r6, r4
 8015d82:	d1f7      	bne.n	8015d74 <ucdr_deserialize_endian_array_double+0x28>
 8015d84:	7da8      	ldrb	r0, [r5, #22]
 8015d86:	f080 0001 	eor.w	r0, r0, #1
 8015d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d8e:	00f6      	lsls	r6, r6, #3
 8015d90:	4631      	mov	r1, r6
 8015d92:	4628      	mov	r0, r5
 8015d94:	f7f6 fad6 	bl	800c344 <ucdr_check_buffer_available_for>
 8015d98:	b9f8      	cbnz	r0, 8015dda <ucdr_deserialize_endian_array_double+0x8e>
 8015d9a:	46b0      	mov	r8, r6
 8015d9c:	e00a      	b.n	8015db4 <ucdr_deserialize_endian_array_double+0x68>
 8015d9e:	68a9      	ldr	r1, [r5, #8]
 8015da0:	f000 ffec 	bl	8016d7c <memcpy>
 8015da4:	68aa      	ldr	r2, [r5, #8]
 8015da6:	692b      	ldr	r3, [r5, #16]
 8015da8:	443a      	add	r2, r7
 8015daa:	443b      	add	r3, r7
 8015dac:	eba8 0807 	sub.w	r8, r8, r7
 8015db0:	60aa      	str	r2, [r5, #8]
 8015db2:	612b      	str	r3, [r5, #16]
 8015db4:	2208      	movs	r2, #8
 8015db6:	4641      	mov	r1, r8
 8015db8:	4628      	mov	r0, r5
 8015dba:	f7f6 fb4b 	bl	800c454 <ucdr_check_final_buffer_behavior_array>
 8015dbe:	4607      	mov	r7, r0
 8015dc0:	eba6 0008 	sub.w	r0, r6, r8
 8015dc4:	4420      	add	r0, r4
 8015dc6:	463a      	mov	r2, r7
 8015dc8:	2f00      	cmp	r7, #0
 8015dca:	d1e8      	bne.n	8015d9e <ucdr_deserialize_endian_array_double+0x52>
 8015dcc:	7da8      	ldrb	r0, [r5, #22]
 8015dce:	2308      	movs	r3, #8
 8015dd0:	756b      	strb	r3, [r5, #21]
 8015dd2:	f080 0001 	eor.w	r0, r0, #1
 8015dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dda:	4632      	mov	r2, r6
 8015ddc:	68a9      	ldr	r1, [r5, #8]
 8015dde:	4620      	mov	r0, r4
 8015de0:	f000 ffcc 	bl	8016d7c <memcpy>
 8015de4:	68aa      	ldr	r2, [r5, #8]
 8015de6:	692b      	ldr	r3, [r5, #16]
 8015de8:	4432      	add	r2, r6
 8015dea:	441e      	add	r6, r3
 8015dec:	60aa      	str	r2, [r5, #8]
 8015dee:	612e      	str	r6, [r5, #16]
 8015df0:	e7ec      	b.n	8015dcc <ucdr_deserialize_endian_array_double+0x80>
 8015df2:	bf00      	nop

08015df4 <ucdr_serialize_string>:
 8015df4:	b510      	push	{r4, lr}
 8015df6:	b082      	sub	sp, #8
 8015df8:	4604      	mov	r4, r0
 8015dfa:	4608      	mov	r0, r1
 8015dfc:	9101      	str	r1, [sp, #4]
 8015dfe:	f7ea f9f1 	bl	80001e4 <strlen>
 8015e02:	9901      	ldr	r1, [sp, #4]
 8015e04:	4602      	mov	r2, r0
 8015e06:	3201      	adds	r2, #1
 8015e08:	4620      	mov	r0, r4
 8015e0a:	b002      	add	sp, #8
 8015e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e10:	f7f9 bcce 	b.w	800f7b0 <ucdr_serialize_sequence_char>

08015e14 <uxr_init_input_best_effort_stream>:
 8015e14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e18:	8003      	strh	r3, [r0, #0]
 8015e1a:	4770      	bx	lr

08015e1c <uxr_reset_input_best_effort_stream>:
 8015e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e20:	8003      	strh	r3, [r0, #0]
 8015e22:	4770      	bx	lr

08015e24 <uxr_receive_best_effort_message>:
 8015e24:	b538      	push	{r3, r4, r5, lr}
 8015e26:	4604      	mov	r4, r0
 8015e28:	8800      	ldrh	r0, [r0, #0]
 8015e2a:	460d      	mov	r5, r1
 8015e2c:	f000 fd16 	bl	801685c <uxr_seq_num_cmp>
 8015e30:	4603      	mov	r3, r0
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8015e38:	bfb8      	it	lt
 8015e3a:	8025      	strhlt	r5, [r4, #0]
 8015e3c:	bd38      	pop	{r3, r4, r5, pc}
 8015e3e:	bf00      	nop

08015e40 <on_full_input_buffer>:
 8015e40:	b570      	push	{r4, r5, r6, lr}
 8015e42:	6802      	ldr	r2, [r0, #0]
 8015e44:	460d      	mov	r5, r1
 8015e46:	6809      	ldr	r1, [r1, #0]
 8015e48:	686c      	ldr	r4, [r5, #4]
 8015e4a:	1a53      	subs	r3, r2, r1
 8015e4c:	4606      	mov	r6, r0
 8015e4e:	8928      	ldrh	r0, [r5, #8]
 8015e50:	fbb4 f4f0 	udiv	r4, r4, r0
 8015e54:	fbb3 f3f4 	udiv	r3, r3, r4
 8015e58:	3301      	adds	r3, #1
 8015e5a:	b29b      	uxth	r3, r3
 8015e5c:	fbb3 f2f0 	udiv	r2, r3, r0
 8015e60:	fb00 3312 	mls	r3, r0, r2, r3
 8015e64:	b29b      	uxth	r3, r3
 8015e66:	fb04 f403 	mul.w	r4, r4, r3
 8015e6a:	1d23      	adds	r3, r4, #4
 8015e6c:	440b      	add	r3, r1
 8015e6e:	7d28      	ldrb	r0, [r5, #20]
 8015e70:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8015e74:	b110      	cbz	r0, 8015e7c <on_full_input_buffer+0x3c>
 8015e76:	2000      	movs	r0, #0
 8015e78:	f843 0c04 	str.w	r0, [r3, #-4]
 8015e7c:	2a03      	cmp	r2, #3
 8015e7e:	d801      	bhi.n	8015e84 <on_full_input_buffer+0x44>
 8015e80:	2001      	movs	r0, #1
 8015e82:	bd70      	pop	{r4, r5, r6, pc}
 8015e84:	3408      	adds	r4, #8
 8015e86:	6933      	ldr	r3, [r6, #16]
 8015e88:	4421      	add	r1, r4
 8015e8a:	4630      	mov	r0, r6
 8015e8c:	3a04      	subs	r2, #4
 8015e8e:	f7f6 faa3 	bl	800c3d8 <ucdr_init_buffer_origin>
 8015e92:	4630      	mov	r0, r6
 8015e94:	4902      	ldr	r1, [pc, #8]	; (8015ea0 <on_full_input_buffer+0x60>)
 8015e96:	462a      	mov	r2, r5
 8015e98:	f7f6 fa7c 	bl	800c394 <ucdr_set_on_full_buffer_callback>
 8015e9c:	2000      	movs	r0, #0
 8015e9e:	bd70      	pop	{r4, r5, r6, pc}
 8015ea0:	08015e41 	.word	0x08015e41

08015ea4 <uxr_init_input_reliable_stream>:
 8015ea4:	b470      	push	{r4, r5, r6}
 8015ea6:	9c03      	ldr	r4, [sp, #12]
 8015ea8:	6001      	str	r1, [r0, #0]
 8015eaa:	2600      	movs	r6, #0
 8015eac:	8103      	strh	r3, [r0, #8]
 8015eae:	6042      	str	r2, [r0, #4]
 8015eb0:	6104      	str	r4, [r0, #16]
 8015eb2:	7506      	strb	r6, [r0, #20]
 8015eb4:	b1ab      	cbz	r3, 8015ee2 <uxr_init_input_reliable_stream+0x3e>
 8015eb6:	600e      	str	r6, [r1, #0]
 8015eb8:	8901      	ldrh	r1, [r0, #8]
 8015eba:	2901      	cmp	r1, #1
 8015ebc:	d911      	bls.n	8015ee2 <uxr_init_input_reliable_stream+0x3e>
 8015ebe:	2201      	movs	r2, #1
 8015ec0:	e9d0 5400 	ldrd	r5, r4, [r0]
 8015ec4:	fbb2 f3f1 	udiv	r3, r2, r1
 8015ec8:	fb01 2313 	mls	r3, r1, r3, r2
 8015ecc:	b29b      	uxth	r3, r3
 8015ece:	fbb4 f1f1 	udiv	r1, r4, r1
 8015ed2:	fb03 f301 	mul.w	r3, r3, r1
 8015ed6:	3201      	adds	r2, #1
 8015ed8:	50ee      	str	r6, [r5, r3]
 8015eda:	8901      	ldrh	r1, [r0, #8]
 8015edc:	b292      	uxth	r2, r2
 8015ede:	4291      	cmp	r1, r2
 8015ee0:	d8ee      	bhi.n	8015ec0 <uxr_init_input_reliable_stream+0x1c>
 8015ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ee6:	bc70      	pop	{r4, r5, r6}
 8015ee8:	60c3      	str	r3, [r0, #12]
 8015eea:	4770      	bx	lr

08015eec <uxr_reset_input_reliable_stream>:
 8015eec:	8902      	ldrh	r2, [r0, #8]
 8015eee:	b1ca      	cbz	r2, 8015f24 <uxr_reset_input_reliable_stream+0x38>
 8015ef0:	b470      	push	{r4, r5, r6}
 8015ef2:	2400      	movs	r4, #0
 8015ef4:	4621      	mov	r1, r4
 8015ef6:	4626      	mov	r6, r4
 8015ef8:	fbb1 f3f2 	udiv	r3, r1, r2
 8015efc:	fb02 1313 	mls	r3, r2, r3, r1
 8015f00:	e9d0 5100 	ldrd	r5, r1, [r0]
 8015f04:	b29b      	uxth	r3, r3
 8015f06:	fbb1 f2f2 	udiv	r2, r1, r2
 8015f0a:	fb03 f302 	mul.w	r3, r3, r2
 8015f0e:	3401      	adds	r4, #1
 8015f10:	50ee      	str	r6, [r5, r3]
 8015f12:	8902      	ldrh	r2, [r0, #8]
 8015f14:	b2a1      	uxth	r1, r4
 8015f16:	428a      	cmp	r2, r1
 8015f18:	d8ee      	bhi.n	8015ef8 <uxr_reset_input_reliable_stream+0xc>
 8015f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f1e:	bc70      	pop	{r4, r5, r6}
 8015f20:	60c3      	str	r3, [r0, #12]
 8015f22:	4770      	bx	lr
 8015f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f28:	60c3      	str	r3, [r0, #12]
 8015f2a:	4770      	bx	lr

08015f2c <uxr_receive_reliable_message>:
 8015f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f30:	4604      	mov	r4, r0
 8015f32:	460d      	mov	r5, r1
 8015f34:	8901      	ldrh	r1, [r0, #8]
 8015f36:	8980      	ldrh	r0, [r0, #12]
 8015f38:	4690      	mov	r8, r2
 8015f3a:	461f      	mov	r7, r3
 8015f3c:	f000 fc86 	bl	801684c <uxr_seq_num_add>
 8015f40:	4629      	mov	r1, r5
 8015f42:	4606      	mov	r6, r0
 8015f44:	89a0      	ldrh	r0, [r4, #12]
 8015f46:	f000 fc89 	bl	801685c <uxr_seq_num_cmp>
 8015f4a:	2800      	cmp	r0, #0
 8015f4c:	db0a      	blt.n	8015f64 <uxr_receive_reliable_message+0x38>
 8015f4e:	2600      	movs	r6, #0
 8015f50:	89e0      	ldrh	r0, [r4, #14]
 8015f52:	4629      	mov	r1, r5
 8015f54:	f000 fc82 	bl	801685c <uxr_seq_num_cmp>
 8015f58:	2800      	cmp	r0, #0
 8015f5a:	bfb8      	it	lt
 8015f5c:	81e5      	strhlt	r5, [r4, #14]
 8015f5e:	4630      	mov	r0, r6
 8015f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f64:	4630      	mov	r0, r6
 8015f66:	4629      	mov	r1, r5
 8015f68:	f000 fc78 	bl	801685c <uxr_seq_num_cmp>
 8015f6c:	2800      	cmp	r0, #0
 8015f6e:	dbee      	blt.n	8015f4e <uxr_receive_reliable_message+0x22>
 8015f70:	6923      	ldr	r3, [r4, #16]
 8015f72:	4640      	mov	r0, r8
 8015f74:	4798      	blx	r3
 8015f76:	2101      	movs	r1, #1
 8015f78:	4681      	mov	r9, r0
 8015f7a:	89a0      	ldrh	r0, [r4, #12]
 8015f7c:	f000 fc66 	bl	801684c <uxr_seq_num_add>
 8015f80:	f1b9 0f00 	cmp.w	r9, #0
 8015f84:	d101      	bne.n	8015f8a <uxr_receive_reliable_message+0x5e>
 8015f86:	4285      	cmp	r5, r0
 8015f88:	d049      	beq.n	801601e <uxr_receive_reliable_message+0xf2>
 8015f8a:	8921      	ldrh	r1, [r4, #8]
 8015f8c:	fbb5 f3f1 	udiv	r3, r5, r1
 8015f90:	fb01 5313 	mls	r3, r1, r3, r5
 8015f94:	b29b      	uxth	r3, r3
 8015f96:	6862      	ldr	r2, [r4, #4]
 8015f98:	6820      	ldr	r0, [r4, #0]
 8015f9a:	fbb2 f2f1 	udiv	r2, r2, r1
 8015f9e:	fb03 f302 	mul.w	r3, r3, r2
 8015fa2:	3304      	adds	r3, #4
 8015fa4:	4418      	add	r0, r3
 8015fa6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d1cf      	bne.n	8015f4e <uxr_receive_reliable_message+0x22>
 8015fae:	4641      	mov	r1, r8
 8015fb0:	463a      	mov	r2, r7
 8015fb2:	f000 fee3 	bl	8016d7c <memcpy>
 8015fb6:	8921      	ldrh	r1, [r4, #8]
 8015fb8:	fbb5 f3f1 	udiv	r3, r5, r1
 8015fbc:	fb01 5313 	mls	r3, r1, r3, r5
 8015fc0:	b29b      	uxth	r3, r3
 8015fc2:	6862      	ldr	r2, [r4, #4]
 8015fc4:	fbb2 f2f1 	udiv	r2, r2, r1
 8015fc8:	6821      	ldr	r1, [r4, #0]
 8015fca:	fb03 f302 	mul.w	r3, r3, r2
 8015fce:	2201      	movs	r2, #1
 8015fd0:	50cf      	str	r7, [r1, r3]
 8015fd2:	9b08      	ldr	r3, [sp, #32]
 8015fd4:	701a      	strb	r2, [r3, #0]
 8015fd6:	f1b9 0f00 	cmp.w	r9, #0
 8015fda:	d0b8      	beq.n	8015f4e <uxr_receive_reliable_message+0x22>
 8015fdc:	89a6      	ldrh	r6, [r4, #12]
 8015fde:	e001      	b.n	8015fe4 <uxr_receive_reliable_message+0xb8>
 8015fe0:	2801      	cmp	r0, #1
 8015fe2:	d1b4      	bne.n	8015f4e <uxr_receive_reliable_message+0x22>
 8015fe4:	4630      	mov	r0, r6
 8015fe6:	2101      	movs	r1, #1
 8015fe8:	f000 fc30 	bl	801684c <uxr_seq_num_add>
 8015fec:	8921      	ldrh	r1, [r4, #8]
 8015fee:	fbb0 f3f1 	udiv	r3, r0, r1
 8015ff2:	fb01 0313 	mls	r3, r1, r3, r0
 8015ff6:	b29b      	uxth	r3, r3
 8015ff8:	6862      	ldr	r2, [r4, #4]
 8015ffa:	fbb2 f2f1 	udiv	r2, r2, r1
 8015ffe:	4606      	mov	r6, r0
 8016000:	fb03 f302 	mul.w	r3, r3, r2
 8016004:	6820      	ldr	r0, [r4, #0]
 8016006:	3304      	adds	r3, #4
 8016008:	4418      	add	r0, r3
 801600a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d09d      	beq.n	8015f4e <uxr_receive_reliable_message+0x22>
 8016012:	6923      	ldr	r3, [r4, #16]
 8016014:	4798      	blx	r3
 8016016:	2802      	cmp	r0, #2
 8016018:	d1e2      	bne.n	8015fe0 <uxr_receive_reliable_message+0xb4>
 801601a:	2601      	movs	r6, #1
 801601c:	e798      	b.n	8015f50 <uxr_receive_reliable_message+0x24>
 801601e:	9b08      	ldr	r3, [sp, #32]
 8016020:	81a5      	strh	r5, [r4, #12]
 8016022:	2601      	movs	r6, #1
 8016024:	f883 9000 	strb.w	r9, [r3]
 8016028:	e792      	b.n	8015f50 <uxr_receive_reliable_message+0x24>
 801602a:	bf00      	nop

0801602c <uxr_next_input_reliable_buffer_available>:
 801602c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016030:	4604      	mov	r4, r0
 8016032:	460e      	mov	r6, r1
 8016034:	8980      	ldrh	r0, [r0, #12]
 8016036:	2101      	movs	r1, #1
 8016038:	4617      	mov	r7, r2
 801603a:	f000 fc07 	bl	801684c <uxr_seq_num_add>
 801603e:	8921      	ldrh	r1, [r4, #8]
 8016040:	fbb0 f3f1 	udiv	r3, r0, r1
 8016044:	fb01 0313 	mls	r3, r1, r3, r0
 8016048:	b29b      	uxth	r3, r3
 801604a:	6862      	ldr	r2, [r4, #4]
 801604c:	fbb2 f2f1 	udiv	r2, r2, r1
 8016050:	fb03 f302 	mul.w	r3, r3, r2
 8016054:	6822      	ldr	r2, [r4, #0]
 8016056:	3304      	adds	r3, #4
 8016058:	eb02 0803 	add.w	r8, r2, r3
 801605c:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8016060:	f1b9 0f00 	cmp.w	r9, #0
 8016064:	d025      	beq.n	80160b2 <uxr_next_input_reliable_buffer_available+0x86>
 8016066:	6923      	ldr	r3, [r4, #16]
 8016068:	4605      	mov	r5, r0
 801606a:	4640      	mov	r0, r8
 801606c:	4798      	blx	r3
 801606e:	4682      	mov	sl, r0
 8016070:	b310      	cbz	r0, 80160b8 <uxr_next_input_reliable_buffer_available+0x8c>
 8016072:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016076:	e005      	b.n	8016084 <uxr_next_input_reliable_buffer_available+0x58>
 8016078:	6923      	ldr	r3, [r4, #16]
 801607a:	4798      	blx	r3
 801607c:	2802      	cmp	r0, #2
 801607e:	d032      	beq.n	80160e6 <uxr_next_input_reliable_buffer_available+0xba>
 8016080:	2801      	cmp	r0, #1
 8016082:	d116      	bne.n	80160b2 <uxr_next_input_reliable_buffer_available+0x86>
 8016084:	4650      	mov	r0, sl
 8016086:	2101      	movs	r1, #1
 8016088:	f000 fbe0 	bl	801684c <uxr_seq_num_add>
 801608c:	8921      	ldrh	r1, [r4, #8]
 801608e:	fbb0 f3f1 	udiv	r3, r0, r1
 8016092:	fb01 0313 	mls	r3, r1, r3, r0
 8016096:	b29b      	uxth	r3, r3
 8016098:	6862      	ldr	r2, [r4, #4]
 801609a:	fbb2 f2f1 	udiv	r2, r2, r1
 801609e:	4682      	mov	sl, r0
 80160a0:	fb03 f302 	mul.w	r3, r3, r2
 80160a4:	6820      	ldr	r0, [r4, #0]
 80160a6:	3304      	adds	r3, #4
 80160a8:	4418      	add	r0, r3
 80160aa:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d1e2      	bne.n	8016078 <uxr_next_input_reliable_buffer_available+0x4c>
 80160b2:	2000      	movs	r0, #0
 80160b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160b8:	464a      	mov	r2, r9
 80160ba:	4641      	mov	r1, r8
 80160bc:	4630      	mov	r0, r6
 80160be:	f7f6 f993 	bl	800c3e8 <ucdr_init_buffer>
 80160c2:	8921      	ldrh	r1, [r4, #8]
 80160c4:	fbb5 f3f1 	udiv	r3, r5, r1
 80160c8:	fb01 5313 	mls	r3, r1, r3, r5
 80160cc:	b29b      	uxth	r3, r3
 80160ce:	6862      	ldr	r2, [r4, #4]
 80160d0:	fbb2 f2f1 	udiv	r2, r2, r1
 80160d4:	6821      	ldr	r1, [r4, #0]
 80160d6:	fb03 f302 	mul.w	r3, r3, r2
 80160da:	2001      	movs	r0, #1
 80160dc:	f841 a003 	str.w	sl, [r1, r3]
 80160e0:	81a5      	strh	r5, [r4, #12]
 80160e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160e6:	8922      	ldrh	r2, [r4, #8]
 80160e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80160ec:	fb02 5510 	mls	r5, r2, r0, r5
 80160f0:	b2ad      	uxth	r5, r5
 80160f2:	6863      	ldr	r3, [r4, #4]
 80160f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80160f8:	fb05 f503 	mul.w	r5, r5, r3
 80160fc:	6823      	ldr	r3, [r4, #0]
 80160fe:	2000      	movs	r0, #0
 8016100:	5158      	str	r0, [r3, r5]
 8016102:	eba9 0207 	sub.w	r2, r9, r7
 8016106:	eb08 0107 	add.w	r1, r8, r7
 801610a:	4630      	mov	r0, r6
 801610c:	f7f6 f96c 	bl	800c3e8 <ucdr_init_buffer>
 8016110:	4630      	mov	r0, r6
 8016112:	4904      	ldr	r1, [pc, #16]	; (8016124 <uxr_next_input_reliable_buffer_available+0xf8>)
 8016114:	4622      	mov	r2, r4
 8016116:	f7f6 f93d 	bl	800c394 <ucdr_set_on_full_buffer_callback>
 801611a:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801611e:	2001      	movs	r0, #1
 8016120:	e7c8      	b.n	80160b4 <uxr_next_input_reliable_buffer_available+0x88>
 8016122:	bf00      	nop
 8016124:	08015e41 	.word	0x08015e41

08016128 <uxr_process_heartbeat>:
 8016128:	b538      	push	{r3, r4, r5, lr}
 801612a:	4611      	mov	r1, r2
 801612c:	4604      	mov	r4, r0
 801612e:	89c0      	ldrh	r0, [r0, #14]
 8016130:	4615      	mov	r5, r2
 8016132:	f000 fb93 	bl	801685c <uxr_seq_num_cmp>
 8016136:	2800      	cmp	r0, #0
 8016138:	bfb8      	it	lt
 801613a:	81e5      	strhlt	r5, [r4, #14]
 801613c:	bd38      	pop	{r3, r4, r5, pc}
 801613e:	bf00      	nop

08016140 <uxr_compute_acknack>:
 8016140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016144:	8903      	ldrh	r3, [r0, #8]
 8016146:	8986      	ldrh	r6, [r0, #12]
 8016148:	4604      	mov	r4, r0
 801614a:	460d      	mov	r5, r1
 801614c:	b1d3      	cbz	r3, 8016184 <uxr_compute_acknack+0x44>
 801614e:	4630      	mov	r0, r6
 8016150:	2701      	movs	r7, #1
 8016152:	e003      	b.n	801615c <uxr_compute_acknack+0x1c>
 8016154:	4567      	cmp	r7, ip
 8016156:	d215      	bcs.n	8016184 <uxr_compute_acknack+0x44>
 8016158:	89a0      	ldrh	r0, [r4, #12]
 801615a:	3701      	adds	r7, #1
 801615c:	b2b9      	uxth	r1, r7
 801615e:	f000 fb75 	bl	801684c <uxr_seq_num_add>
 8016162:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016166:	fbb0 f2fc 	udiv	r2, r0, ip
 801616a:	e9d4 1300 	ldrd	r1, r3, [r4]
 801616e:	fb0c 0212 	mls	r2, ip, r2, r0
 8016172:	b292      	uxth	r2, r2
 8016174:	fbb3 f3fc 	udiv	r3, r3, ip
 8016178:	fb02 1303 	mla	r3, r2, r3, r1
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d1e8      	bne.n	8016154 <uxr_compute_acknack+0x14>
 8016182:	4606      	mov	r6, r0
 8016184:	802e      	strh	r6, [r5, #0]
 8016186:	4630      	mov	r0, r6
 8016188:	2101      	movs	r1, #1
 801618a:	89e6      	ldrh	r6, [r4, #14]
 801618c:	f000 fb62 	bl	8016854 <uxr_seq_num_sub>
 8016190:	4601      	mov	r1, r0
 8016192:	4630      	mov	r0, r6
 8016194:	f000 fb5e 	bl	8016854 <uxr_seq_num_sub>
 8016198:	4606      	mov	r6, r0
 801619a:	b318      	cbz	r0, 80161e4 <uxr_compute_acknack+0xa4>
 801619c:	f04f 0900 	mov.w	r9, #0
 80161a0:	464f      	mov	r7, r9
 80161a2:	f04f 0801 	mov.w	r8, #1
 80161a6:	fa1f f189 	uxth.w	r1, r9
 80161aa:	8828      	ldrh	r0, [r5, #0]
 80161ac:	f000 fb4e 	bl	801684c <uxr_seq_num_add>
 80161b0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80161b4:	6822      	ldr	r2, [r4, #0]
 80161b6:	fbb0 f1fc 	udiv	r1, r0, ip
 80161ba:	fb01 011c 	mls	r1, r1, ip, r0
 80161be:	b289      	uxth	r1, r1
 80161c0:	6863      	ldr	r3, [r4, #4]
 80161c2:	fbb3 f3fc 	udiv	r3, r3, ip
 80161c6:	fb01 2303 	mla	r3, r1, r3, r2
 80161ca:	fa08 f209 	lsl.w	r2, r8, r9
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	f109 0901 	add.w	r9, r9, #1
 80161d4:	b90b      	cbnz	r3, 80161da <uxr_compute_acknack+0x9a>
 80161d6:	4317      	orrs	r7, r2
 80161d8:	b2bf      	uxth	r7, r7
 80161da:	454e      	cmp	r6, r9
 80161dc:	d1e3      	bne.n	80161a6 <uxr_compute_acknack+0x66>
 80161de:	4638      	mov	r0, r7
 80161e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161e4:	4607      	mov	r7, r0
 80161e6:	4638      	mov	r0, r7
 80161e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080161ec <uxr_init_output_best_effort_stream>:
 80161ec:	b410      	push	{r4}
 80161ee:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80161f2:	81c4      	strh	r4, [r0, #14]
 80161f4:	e9c0 1300 	strd	r1, r3, [r0]
 80161f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161fc:	7303      	strb	r3, [r0, #12]
 80161fe:	6082      	str	r2, [r0, #8]
 8016200:	4770      	bx	lr
 8016202:	bf00      	nop

08016204 <uxr_reset_output_best_effort_stream>:
 8016204:	7b02      	ldrb	r2, [r0, #12]
 8016206:	6042      	str	r2, [r0, #4]
 8016208:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801620c:	81c3      	strh	r3, [r0, #14]
 801620e:	4770      	bx	lr

08016210 <uxr_prepare_best_effort_buffer_to_write>:
 8016210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016212:	4604      	mov	r4, r0
 8016214:	b083      	sub	sp, #12
 8016216:	6840      	ldr	r0, [r0, #4]
 8016218:	460d      	mov	r5, r1
 801621a:	4616      	mov	r6, r2
 801621c:	f7fb fbfc 	bl	8011a18 <uxr_submessage_padding>
 8016220:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8016224:	4410      	add	r0, r2
 8016226:	1942      	adds	r2, r0, r5
 8016228:	4293      	cmp	r3, r2
 801622a:	bf2c      	ite	cs
 801622c:	2701      	movcs	r7, #1
 801622e:	2700      	movcc	r7, #0
 8016230:	d202      	bcs.n	8016238 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8016232:	4638      	mov	r0, r7
 8016234:	b003      	add	sp, #12
 8016236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016238:	9000      	str	r0, [sp, #0]
 801623a:	6821      	ldr	r1, [r4, #0]
 801623c:	4630      	mov	r0, r6
 801623e:	2300      	movs	r3, #0
 8016240:	f7f6 f8c0 	bl	800c3c4 <ucdr_init_buffer_origin_offset>
 8016244:	6861      	ldr	r1, [r4, #4]
 8016246:	4638      	mov	r0, r7
 8016248:	4429      	add	r1, r5
 801624a:	6061      	str	r1, [r4, #4]
 801624c:	b003      	add	sp, #12
 801624e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016250 <uxr_prepare_best_effort_buffer_to_send>:
 8016250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016254:	6845      	ldr	r5, [r0, #4]
 8016256:	4604      	mov	r4, r0
 8016258:	7b00      	ldrb	r0, [r0, #12]
 801625a:	4285      	cmp	r5, r0
 801625c:	bf8c      	ite	hi
 801625e:	2701      	movhi	r7, #1
 8016260:	2700      	movls	r7, #0
 8016262:	d802      	bhi.n	801626a <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8016264:	4638      	mov	r0, r7
 8016266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801626a:	4688      	mov	r8, r1
 801626c:	89e0      	ldrh	r0, [r4, #14]
 801626e:	2101      	movs	r1, #1
 8016270:	4615      	mov	r5, r2
 8016272:	461e      	mov	r6, r3
 8016274:	f000 faea 	bl	801684c <uxr_seq_num_add>
 8016278:	e9d4 2300 	ldrd	r2, r3, [r4]
 801627c:	81e0      	strh	r0, [r4, #14]
 801627e:	8030      	strh	r0, [r6, #0]
 8016280:	f8c8 2000 	str.w	r2, [r8]
 8016284:	602b      	str	r3, [r5, #0]
 8016286:	7b23      	ldrb	r3, [r4, #12]
 8016288:	6063      	str	r3, [r4, #4]
 801628a:	4638      	mov	r0, r7
 801628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016290 <on_full_output_buffer>:
 8016290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016292:	6802      	ldr	r2, [r0, #0]
 8016294:	460d      	mov	r5, r1
 8016296:	6809      	ldr	r1, [r1, #0]
 8016298:	892f      	ldrh	r7, [r5, #8]
 801629a:	686c      	ldr	r4, [r5, #4]
 801629c:	fbb4 f4f7 	udiv	r4, r4, r7
 80162a0:	1a53      	subs	r3, r2, r1
 80162a2:	fbb3 f3f4 	udiv	r3, r3, r4
 80162a6:	3301      	adds	r3, #1
 80162a8:	b29b      	uxth	r3, r3
 80162aa:	fbb3 f2f7 	udiv	r2, r3, r7
 80162ae:	fb07 3312 	mls	r3, r7, r2, r3
 80162b2:	b29b      	uxth	r3, r3
 80162b4:	fb04 f403 	mul.w	r4, r4, r3
 80162b8:	7b2f      	ldrb	r7, [r5, #12]
 80162ba:	590a      	ldr	r2, [r1, r4]
 80162bc:	6903      	ldr	r3, [r0, #16]
 80162be:	443c      	add	r4, r7
 80162c0:	3408      	adds	r4, #8
 80162c2:	1bd2      	subs	r2, r2, r7
 80162c4:	4606      	mov	r6, r0
 80162c6:	4421      	add	r1, r4
 80162c8:	3a04      	subs	r2, #4
 80162ca:	f7f6 f885 	bl	800c3d8 <ucdr_init_buffer_origin>
 80162ce:	4630      	mov	r0, r6
 80162d0:	4902      	ldr	r1, [pc, #8]	; (80162dc <on_full_output_buffer+0x4c>)
 80162d2:	462a      	mov	r2, r5
 80162d4:	f7f6 f85e 	bl	800c394 <ucdr_set_on_full_buffer_callback>
 80162d8:	2000      	movs	r0, #0
 80162da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162dc:	08016291 	.word	0x08016291

080162e0 <uxr_init_output_reliable_stream>:
 80162e0:	b430      	push	{r4, r5}
 80162e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80162e6:	6001      	str	r1, [r0, #0]
 80162e8:	8103      	strh	r3, [r0, #8]
 80162ea:	6042      	str	r2, [r0, #4]
 80162ec:	7304      	strb	r4, [r0, #12]
 80162ee:	b1b3      	cbz	r3, 801631e <uxr_init_output_reliable_stream+0x3e>
 80162f0:	600c      	str	r4, [r1, #0]
 80162f2:	8901      	ldrh	r1, [r0, #8]
 80162f4:	2901      	cmp	r1, #1
 80162f6:	d912      	bls.n	801631e <uxr_init_output_reliable_stream+0x3e>
 80162f8:	2201      	movs	r2, #1
 80162fa:	e9d0 5400 	ldrd	r5, r4, [r0]
 80162fe:	fbb2 f3f1 	udiv	r3, r2, r1
 8016302:	fb01 2313 	mls	r3, r1, r3, r2
 8016306:	b29b      	uxth	r3, r3
 8016308:	fbb4 f1f1 	udiv	r1, r4, r1
 801630c:	fb03 f301 	mul.w	r3, r3, r1
 8016310:	7b01      	ldrb	r1, [r0, #12]
 8016312:	50e9      	str	r1, [r5, r3]
 8016314:	3201      	adds	r2, #1
 8016316:	8901      	ldrh	r1, [r0, #8]
 8016318:	b292      	uxth	r2, r2
 801631a:	4291      	cmp	r1, r2
 801631c:	d8ed      	bhi.n	80162fa <uxr_init_output_reliable_stream+0x1a>
 801631e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016322:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016326:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801632a:	4b05      	ldr	r3, [pc, #20]	; (8016340 <uxr_init_output_reliable_stream+0x60>)
 801632c:	f8c0 300e 	str.w	r3, [r0, #14]
 8016330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016334:	2300      	movs	r3, #0
 8016336:	bc30      	pop	{r4, r5}
 8016338:	8242      	strh	r2, [r0, #18]
 801633a:	8403      	strh	r3, [r0, #32]
 801633c:	4770      	bx	lr
 801633e:	bf00      	nop
 8016340:	ffff0000 	.word	0xffff0000

08016344 <uxr_reset_output_reliable_stream>:
 8016344:	8902      	ldrh	r2, [r0, #8]
 8016346:	b430      	push	{r4, r5}
 8016348:	b19a      	cbz	r2, 8016372 <uxr_reset_output_reliable_stream+0x2e>
 801634a:	2400      	movs	r4, #0
 801634c:	4621      	mov	r1, r4
 801634e:	fbb1 f3f2 	udiv	r3, r1, r2
 8016352:	fb02 1313 	mls	r3, r2, r3, r1
 8016356:	e9d0 5100 	ldrd	r5, r1, [r0]
 801635a:	b29b      	uxth	r3, r3
 801635c:	fbb1 f2f2 	udiv	r2, r1, r2
 8016360:	fb03 f302 	mul.w	r3, r3, r2
 8016364:	7b02      	ldrb	r2, [r0, #12]
 8016366:	50ea      	str	r2, [r5, r3]
 8016368:	3401      	adds	r4, #1
 801636a:	8902      	ldrh	r2, [r0, #8]
 801636c:	b2a1      	uxth	r1, r4
 801636e:	428a      	cmp	r2, r1
 8016370:	d8ed      	bhi.n	801634e <uxr_reset_output_reliable_stream+0xa>
 8016372:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016376:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801637a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801637e:	4b05      	ldr	r3, [pc, #20]	; (8016394 <uxr_reset_output_reliable_stream+0x50>)
 8016380:	f8c0 300e 	str.w	r3, [r0, #14]
 8016384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016388:	2300      	movs	r3, #0
 801638a:	bc30      	pop	{r4, r5}
 801638c:	8242      	strh	r2, [r0, #18]
 801638e:	8403      	strh	r3, [r0, #32]
 8016390:	4770      	bx	lr
 8016392:	bf00      	nop
 8016394:	ffff0000 	.word	0xffff0000

08016398 <uxr_prepare_reliable_buffer_to_write>:
 8016398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801639c:	8903      	ldrh	r3, [r0, #8]
 801639e:	89c5      	ldrh	r5, [r0, #14]
 80163a0:	fbb5 fef3 	udiv	lr, r5, r3
 80163a4:	4604      	mov	r4, r0
 80163a6:	fb03 571e 	mls	r7, r3, lr, r5
 80163aa:	6800      	ldr	r0, [r0, #0]
 80163ac:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80163b0:	fbbc fcf3 	udiv	ip, ip, r3
 80163b4:	b2bf      	uxth	r7, r7
 80163b6:	fb0c 0707 	mla	r7, ip, r7, r0
 80163ba:	4688      	mov	r8, r1
 80163bc:	6839      	ldr	r1, [r7, #0]
 80163be:	b091      	sub	sp, #68	; 0x44
 80163c0:	eb01 0908 	add.w	r9, r1, r8
 80163c4:	f1ac 0604 	sub.w	r6, ip, #4
 80163c8:	9204      	str	r2, [sp, #16]
 80163ca:	45b1      	cmp	r9, r6
 80163cc:	f107 0204 	add.w	r2, r7, #4
 80163d0:	9102      	str	r1, [sp, #8]
 80163d2:	9203      	str	r2, [sp, #12]
 80163d4:	f8cd c014 	str.w	ip, [sp, #20]
 80163d8:	f240 80d7 	bls.w	801658a <uxr_prepare_reliable_buffer_to_write+0x1f2>
 80163dc:	f894 b00c 	ldrb.w	fp, [r4, #12]
 80163e0:	eb0b 0208 	add.w	r2, fp, r8
 80163e4:	42b2      	cmp	r2, r6
 80163e6:	f240 80bd 	bls.w	8016564 <uxr_prepare_reliable_buffer_to_write+0x1cc>
 80163ea:	460a      	mov	r2, r1
 80163ec:	3204      	adds	r2, #4
 80163ee:	42b2      	cmp	r2, r6
 80163f0:	f080 810e 	bcs.w	8016610 <uxr_prepare_reliable_buffer_to_write+0x278>
 80163f4:	f8cd c01c 	str.w	ip, [sp, #28]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	f000 8123 	beq.w	8016644 <uxr_prepare_reliable_buffer_to_write+0x2ac>
 80163fe:	f04f 0a00 	mov.w	sl, #0
 8016402:	4652      	mov	r2, sl
 8016404:	4657      	mov	r7, sl
 8016406:	fbb7 f1f3 	udiv	r1, r7, r3
 801640a:	fb03 7111 	mls	r1, r3, r1, r7
 801640e:	b289      	uxth	r1, r1
 8016410:	fb0c 0101 	mla	r1, ip, r1, r0
 8016414:	f10a 0a01 	add.w	sl, sl, #1
 8016418:	6809      	ldr	r1, [r1, #0]
 801641a:	458b      	cmp	fp, r1
 801641c:	bf08      	it	eq
 801641e:	3201      	addeq	r2, #1
 8016420:	fa1f f78a 	uxth.w	r7, sl
 8016424:	bf08      	it	eq
 8016426:	b292      	uxtheq	r2, r2
 8016428:	429f      	cmp	r7, r3
 801642a:	d3ec      	bcc.n	8016406 <uxr_prepare_reliable_buffer_to_write+0x6e>
 801642c:	9902      	ldr	r1, [sp, #8]
 801642e:	1f37      	subs	r7, r6, #4
 8016430:	b2bf      	uxth	r7, r7
 8016432:	eba7 0901 	sub.w	r9, r7, r1
 8016436:	fa1f f989 	uxth.w	r9, r9
 801643a:	eba7 070b 	sub.w	r7, r7, fp
 801643e:	b2bf      	uxth	r7, r7
 8016440:	eba8 0109 	sub.w	r1, r8, r9
 8016444:	fbb1 faf7 	udiv	sl, r1, r7
 8016448:	fb07 111a 	mls	r1, r7, sl, r1
 801644c:	9706      	str	r7, [sp, #24]
 801644e:	2900      	cmp	r1, #0
 8016450:	f040 80bd 	bne.w	80165ce <uxr_prepare_reliable_buffer_to_write+0x236>
 8016454:	fa1f fa8a 	uxth.w	sl, sl
 8016458:	4592      	cmp	sl, r2
 801645a:	f200 8092 	bhi.w	8016582 <uxr_prepare_reliable_buffer_to_write+0x1ea>
 801645e:	f10d 0b20 	add.w	fp, sp, #32
 8016462:	f1ba 0f00 	cmp.w	sl, #0
 8016466:	d03e      	beq.n	80164e6 <uxr_prepare_reliable_buffer_to_write+0x14e>
 8016468:	f04f 0800 	mov.w	r8, #0
 801646c:	f10d 0b20 	add.w	fp, sp, #32
 8016470:	e006      	b.n	8016480 <uxr_prepare_reliable_buffer_to_write+0xe8>
 8016472:	6860      	ldr	r0, [r4, #4]
 8016474:	fbb0 fcf3 	udiv	ip, r0, r3
 8016478:	6820      	ldr	r0, [r4, #0]
 801647a:	fbb5 fef3 	udiv	lr, r5, r3
 801647e:	46b9      	mov	r9, r7
 8016480:	fb03 531e 	mls	r3, r3, lr, r5
 8016484:	b29b      	uxth	r3, r3
 8016486:	fb0c 0003 	mla	r0, ip, r3, r0
 801648a:	1d01      	adds	r1, r0, #4
 801648c:	6803      	ldr	r3, [r0, #0]
 801648e:	9300      	str	r3, [sp, #0]
 8016490:	4632      	mov	r2, r6
 8016492:	2300      	movs	r3, #0
 8016494:	4658      	mov	r0, fp
 8016496:	f7f5 ff95 	bl	800c3c4 <ucdr_init_buffer_origin_offset>
 801649a:	464a      	mov	r2, r9
 801649c:	2300      	movs	r3, #0
 801649e:	210d      	movs	r1, #13
 80164a0:	4658      	mov	r0, fp
 80164a2:	f7fb fa79 	bl	8011998 <uxr_buffer_submessage_header>
 80164a6:	8920      	ldrh	r0, [r4, #8]
 80164a8:	fbb5 f3f0 	udiv	r3, r5, r0
 80164ac:	e9d4 2100 	ldrd	r2, r1, [r4]
 80164b0:	fb00 5313 	mls	r3, r0, r3, r5
 80164b4:	b29b      	uxth	r3, r3
 80164b6:	fbb1 f1f0 	udiv	r1, r1, r0
 80164ba:	fb03 f301 	mul.w	r3, r3, r1
 80164be:	4628      	mov	r0, r5
 80164c0:	50d6      	str	r6, [r2, r3]
 80164c2:	2101      	movs	r1, #1
 80164c4:	f000 f9c2 	bl	801684c <uxr_seq_num_add>
 80164c8:	f108 0801 	add.w	r8, r8, #1
 80164cc:	fa1f f388 	uxth.w	r3, r8
 80164d0:	459a      	cmp	sl, r3
 80164d2:	4605      	mov	r5, r0
 80164d4:	8923      	ldrh	r3, [r4, #8]
 80164d6:	d8cc      	bhi.n	8016472 <uxr_prepare_reliable_buffer_to_write+0xda>
 80164d8:	fbb0 fef3 	udiv	lr, r0, r3
 80164dc:	6820      	ldr	r0, [r4, #0]
 80164de:	6861      	ldr	r1, [r4, #4]
 80164e0:	fbb1 f2f3 	udiv	r2, r1, r3
 80164e4:	9207      	str	r2, [sp, #28]
 80164e6:	fb03 511e 	mls	r1, r3, lr, r5
 80164ea:	9b07      	ldr	r3, [sp, #28]
 80164ec:	b289      	uxth	r1, r1
 80164ee:	fb03 0101 	mla	r1, r3, r1, r0
 80164f2:	4632      	mov	r2, r6
 80164f4:	680b      	ldr	r3, [r1, #0]
 80164f6:	9300      	str	r3, [sp, #0]
 80164f8:	4658      	mov	r0, fp
 80164fa:	3104      	adds	r1, #4
 80164fc:	2300      	movs	r3, #0
 80164fe:	f7f5 ff61 	bl	800c3c4 <ucdr_init_buffer_origin_offset>
 8016502:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8016506:	4658      	mov	r0, fp
 8016508:	fa1f f288 	uxth.w	r2, r8
 801650c:	2302      	movs	r3, #2
 801650e:	210d      	movs	r1, #13
 8016510:	f7fb fa42 	bl	8011998 <uxr_buffer_submessage_header>
 8016514:	e9d4 0200 	ldrd	r0, r2, [r4]
 8016518:	8921      	ldrh	r1, [r4, #8]
 801651a:	9f02      	ldr	r7, [sp, #8]
 801651c:	9006      	str	r0, [sp, #24]
 801651e:	9803      	ldr	r0, [sp, #12]
 8016520:	7b26      	ldrb	r6, [r4, #12]
 8016522:	fbb5 f3f1 	udiv	r3, r5, r1
 8016526:	fbb2 f2f1 	udiv	r2, r2, r1
 801652a:	fb01 5313 	mls	r3, r1, r3, r5
 801652e:	1d39      	adds	r1, r7, #4
 8016530:	4408      	add	r0, r1
 8016532:	b29b      	uxth	r3, r3
 8016534:	fb03 f302 	mul.w	r3, r3, r2
 8016538:	4601      	mov	r1, r0
 801653a:	3604      	adds	r6, #4
 801653c:	9806      	ldr	r0, [sp, #24]
 801653e:	9a05      	ldr	r2, [sp, #20]
 8016540:	4446      	add	r6, r8
 8016542:	50c6      	str	r6, [r0, r3]
 8016544:	9e04      	ldr	r6, [sp, #16]
 8016546:	3a08      	subs	r2, #8
 8016548:	1bd2      	subs	r2, r2, r7
 801654a:	4630      	mov	r0, r6
 801654c:	f7f5 ff4c 	bl	800c3e8 <ucdr_init_buffer>
 8016550:	4630      	mov	r0, r6
 8016552:	493d      	ldr	r1, [pc, #244]	; (8016648 <uxr_prepare_reliable_buffer_to_write+0x2b0>)
 8016554:	4622      	mov	r2, r4
 8016556:	f7f5 ff1d 	bl	800c394 <ucdr_set_on_full_buffer_callback>
 801655a:	2001      	movs	r0, #1
 801655c:	81e5      	strh	r5, [r4, #14]
 801655e:	b011      	add	sp, #68	; 0x44
 8016560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016564:	4628      	mov	r0, r5
 8016566:	2101      	movs	r1, #1
 8016568:	f000 f970 	bl	801684c <uxr_seq_num_add>
 801656c:	8921      	ldrh	r1, [r4, #8]
 801656e:	4605      	mov	r5, r0
 8016570:	8a60      	ldrh	r0, [r4, #18]
 8016572:	f000 f96b 	bl	801684c <uxr_seq_num_add>
 8016576:	4601      	mov	r1, r0
 8016578:	4628      	mov	r0, r5
 801657a:	f000 f96f 	bl	801685c <uxr_seq_num_cmp>
 801657e:	2800      	cmp	r0, #0
 8016580:	dd2b      	ble.n	80165da <uxr_prepare_reliable_buffer_to_write+0x242>
 8016582:	2000      	movs	r0, #0
 8016584:	b011      	add	sp, #68	; 0x44
 8016586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801658a:	4619      	mov	r1, r3
 801658c:	8a60      	ldrh	r0, [r4, #18]
 801658e:	f000 f95d 	bl	801684c <uxr_seq_num_add>
 8016592:	4601      	mov	r1, r0
 8016594:	4628      	mov	r0, r5
 8016596:	f000 f961 	bl	801685c <uxr_seq_num_cmp>
 801659a:	2800      	cmp	r0, #0
 801659c:	dcf1      	bgt.n	8016582 <uxr_prepare_reliable_buffer_to_write+0x1ea>
 801659e:	8921      	ldrh	r1, [r4, #8]
 80165a0:	fbb5 f3f1 	udiv	r3, r5, r1
 80165a4:	e9d4 4200 	ldrd	r4, r2, [r4]
 80165a8:	fb01 5313 	mls	r3, r1, r3, r5
 80165ac:	b29b      	uxth	r3, r3
 80165ae:	fbb2 f2f1 	udiv	r2, r2, r1
 80165b2:	fb03 f302 	mul.w	r3, r3, r2
 80165b6:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80165ba:	f844 9003 	str.w	r9, [r4, r3]
 80165be:	9b02      	ldr	r3, [sp, #8]
 80165c0:	9300      	str	r3, [sp, #0]
 80165c2:	464a      	mov	r2, r9
 80165c4:	2300      	movs	r3, #0
 80165c6:	f7f5 fefd 	bl	800c3c4 <ucdr_init_buffer_origin_offset>
 80165ca:	2001      	movs	r0, #1
 80165cc:	e7da      	b.n	8016584 <uxr_prepare_reliable_buffer_to_write+0x1ec>
 80165ce:	f10a 0a01 	add.w	sl, sl, #1
 80165d2:	fa1f fa8a 	uxth.w	sl, sl
 80165d6:	9106      	str	r1, [sp, #24]
 80165d8:	e73e      	b.n	8016458 <uxr_prepare_reliable_buffer_to_write+0xc0>
 80165da:	8920      	ldrh	r0, [r4, #8]
 80165dc:	fbb5 f3f0 	udiv	r3, r5, r0
 80165e0:	fb00 5313 	mls	r3, r0, r3, r5
 80165e4:	b29b      	uxth	r3, r3
 80165e6:	6862      	ldr	r2, [r4, #4]
 80165e8:	6821      	ldr	r1, [r4, #0]
 80165ea:	fbb2 f0f0 	udiv	r0, r2, r0
 80165ee:	fb03 f300 	mul.w	r3, r3, r0
 80165f2:	7b22      	ldrb	r2, [r4, #12]
 80165f4:	9804      	ldr	r0, [sp, #16]
 80165f6:	3304      	adds	r3, #4
 80165f8:	4419      	add	r1, r3
 80165fa:	4442      	add	r2, r8
 80165fc:	f841 2c04 	str.w	r2, [r1, #-4]
 8016600:	7b23      	ldrb	r3, [r4, #12]
 8016602:	9300      	str	r3, [sp, #0]
 8016604:	2300      	movs	r3, #0
 8016606:	f7f5 fedd 	bl	800c3c4 <ucdr_init_buffer_origin_offset>
 801660a:	81e5      	strh	r5, [r4, #14]
 801660c:	2001      	movs	r0, #1
 801660e:	e7b9      	b.n	8016584 <uxr_prepare_reliable_buffer_to_write+0x1ec>
 8016610:	4628      	mov	r0, r5
 8016612:	2101      	movs	r1, #1
 8016614:	f000 f91a 	bl	801684c <uxr_seq_num_add>
 8016618:	8923      	ldrh	r3, [r4, #8]
 801661a:	f894 b00c 	ldrb.w	fp, [r4, #12]
 801661e:	4605      	mov	r5, r0
 8016620:	e9d4 0c00 	ldrd	r0, ip, [r4]
 8016624:	fbb5 fef3 	udiv	lr, r5, r3
 8016628:	fb03 521e 	mls	r2, r3, lr, r5
 801662c:	b292      	uxth	r2, r2
 801662e:	fbbc fcf3 	udiv	ip, ip, r3
 8016632:	fb0c 0202 	mla	r2, ip, r2, r0
 8016636:	1d11      	adds	r1, r2, #4
 8016638:	6812      	ldr	r2, [r2, #0]
 801663a:	9103      	str	r1, [sp, #12]
 801663c:	9202      	str	r2, [sp, #8]
 801663e:	f8cd c01c 	str.w	ip, [sp, #28]
 8016642:	e6d9      	b.n	80163f8 <uxr_prepare_reliable_buffer_to_write+0x60>
 8016644:	461a      	mov	r2, r3
 8016646:	e6f1      	b.n	801642c <uxr_prepare_reliable_buffer_to_write+0x94>
 8016648:	08016291 	.word	0x08016291

0801664c <uxr_prepare_next_reliable_buffer_to_send>:
 801664c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016650:	4605      	mov	r5, r0
 8016652:	4688      	mov	r8, r1
 8016654:	8a00      	ldrh	r0, [r0, #16]
 8016656:	2101      	movs	r1, #1
 8016658:	4617      	mov	r7, r2
 801665a:	461e      	mov	r6, r3
 801665c:	f000 f8f6 	bl	801684c <uxr_seq_num_add>
 8016660:	8030      	strh	r0, [r6, #0]
 8016662:	892a      	ldrh	r2, [r5, #8]
 8016664:	fbb0 f3f2 	udiv	r3, r0, r2
 8016668:	fb02 0413 	mls	r4, r2, r3, r0
 801666c:	b2a4      	uxth	r4, r4
 801666e:	686b      	ldr	r3, [r5, #4]
 8016670:	fbb3 f2f2 	udiv	r2, r3, r2
 8016674:	682b      	ldr	r3, [r5, #0]
 8016676:	89e9      	ldrh	r1, [r5, #14]
 8016678:	fb04 f402 	mul.w	r4, r4, r2
 801667c:	3404      	adds	r4, #4
 801667e:	4423      	add	r3, r4
 8016680:	f8c8 3000 	str.w	r3, [r8]
 8016684:	682b      	ldr	r3, [r5, #0]
 8016686:	441c      	add	r4, r3
 8016688:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801668c:	603b      	str	r3, [r7, #0]
 801668e:	f000 f8e5 	bl	801685c <uxr_seq_num_cmp>
 8016692:	2800      	cmp	r0, #0
 8016694:	dd02      	ble.n	801669c <uxr_prepare_next_reliable_buffer_to_send+0x50>
 8016696:	2000      	movs	r0, #0
 8016698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801669c:	683a      	ldr	r2, [r7, #0]
 801669e:	7b2b      	ldrb	r3, [r5, #12]
 80166a0:	429a      	cmp	r2, r3
 80166a2:	d9f8      	bls.n	8016696 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80166a4:	8a69      	ldrh	r1, [r5, #18]
 80166a6:	8a28      	ldrh	r0, [r5, #16]
 80166a8:	f000 f8d4 	bl	8016854 <uxr_seq_num_sub>
 80166ac:	892b      	ldrh	r3, [r5, #8]
 80166ae:	4283      	cmp	r3, r0
 80166b0:	d0f1      	beq.n	8016696 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80166b2:	8830      	ldrh	r0, [r6, #0]
 80166b4:	89eb      	ldrh	r3, [r5, #14]
 80166b6:	8228      	strh	r0, [r5, #16]
 80166b8:	4298      	cmp	r0, r3
 80166ba:	d002      	beq.n	80166c2 <uxr_prepare_next_reliable_buffer_to_send+0x76>
 80166bc:	2001      	movs	r0, #1
 80166be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166c2:	2101      	movs	r1, #1
 80166c4:	f000 f8c2 	bl	801684c <uxr_seq_num_add>
 80166c8:	81e8      	strh	r0, [r5, #14]
 80166ca:	2001      	movs	r0, #1
 80166cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080166d0 <uxr_update_output_stream_heartbeat_timestamp>:
 80166d0:	b5d0      	push	{r4, r6, r7, lr}
 80166d2:	8a01      	ldrh	r1, [r0, #16]
 80166d4:	4604      	mov	r4, r0
 80166d6:	8a40      	ldrh	r0, [r0, #18]
 80166d8:	4616      	mov	r6, r2
 80166da:	461f      	mov	r7, r3
 80166dc:	f000 f8be 	bl	801685c <uxr_seq_num_cmp>
 80166e0:	2800      	cmp	r0, #0
 80166e2:	db07      	blt.n	80166f4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80166e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80166e8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80166ec:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80166f0:	2000      	movs	r0, #0
 80166f2:	bdd0      	pop	{r4, r6, r7, pc}
 80166f4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80166f8:	b948      	cbnz	r0, 801670e <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 80166fa:	2301      	movs	r3, #1
 80166fc:	f884 3020 	strb.w	r3, [r4, #32]
 8016700:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8016704:	f147 0200 	adc.w	r2, r7, #0
 8016708:	e9c4 3206 	strd	r3, r2, [r4, #24]
 801670c:	bdd0      	pop	{r4, r6, r7, pc}
 801670e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016712:	4296      	cmp	r6, r2
 8016714:	eb77 0303 	sbcs.w	r3, r7, r3
 8016718:	bfa5      	ittet	ge
 801671a:	3001      	addge	r0, #1
 801671c:	f884 0020 	strbge.w	r0, [r4, #32]
 8016720:	2000      	movlt	r0, #0
 8016722:	2001      	movge	r0, #1
 8016724:	e7ec      	b.n	8016700 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8016726:	bf00      	nop

08016728 <uxr_begin_output_nack_buffer_it>:
 8016728:	8a40      	ldrh	r0, [r0, #18]
 801672a:	4770      	bx	lr

0801672c <uxr_next_reliable_nack_buffer_to_send>:
 801672c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016730:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8016734:	f1b9 0f00 	cmp.w	r9, #0
 8016738:	d011      	beq.n	801675e <uxr_next_reliable_nack_buffer_to_send+0x32>
 801673a:	4605      	mov	r5, r0
 801673c:	8818      	ldrh	r0, [r3, #0]
 801673e:	460f      	mov	r7, r1
 8016740:	4690      	mov	r8, r2
 8016742:	461e      	mov	r6, r3
 8016744:	2101      	movs	r1, #1
 8016746:	f000 f881 	bl	801684c <uxr_seq_num_add>
 801674a:	8030      	strh	r0, [r6, #0]
 801674c:	8a29      	ldrh	r1, [r5, #16]
 801674e:	f000 f885 	bl	801685c <uxr_seq_num_cmp>
 8016752:	2800      	cmp	r0, #0
 8016754:	dd06      	ble.n	8016764 <uxr_next_reliable_nack_buffer_to_send+0x38>
 8016756:	f04f 0900 	mov.w	r9, #0
 801675a:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 801675e:	4648      	mov	r0, r9
 8016760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016764:	892a      	ldrh	r2, [r5, #8]
 8016766:	8830      	ldrh	r0, [r6, #0]
 8016768:	fbb0 f4f2 	udiv	r4, r0, r2
 801676c:	fb02 0414 	mls	r4, r2, r4, r0
 8016770:	b2a4      	uxth	r4, r4
 8016772:	686b      	ldr	r3, [r5, #4]
 8016774:	fbb3 f2f2 	udiv	r2, r3, r2
 8016778:	682b      	ldr	r3, [r5, #0]
 801677a:	fb04 f402 	mul.w	r4, r4, r2
 801677e:	3404      	adds	r4, #4
 8016780:	4423      	add	r3, r4
 8016782:	603b      	str	r3, [r7, #0]
 8016784:	682b      	ldr	r3, [r5, #0]
 8016786:	441c      	add	r4, r3
 8016788:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801678c:	f8c8 3000 	str.w	r3, [r8]
 8016790:	7b2a      	ldrb	r2, [r5, #12]
 8016792:	429a      	cmp	r2, r3
 8016794:	d0d6      	beq.n	8016744 <uxr_next_reliable_nack_buffer_to_send+0x18>
 8016796:	4648      	mov	r0, r9
 8016798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801679c <uxr_process_acknack>:
 801679c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801679e:	4604      	mov	r4, r0
 80167a0:	460e      	mov	r6, r1
 80167a2:	4610      	mov	r0, r2
 80167a4:	2101      	movs	r1, #1
 80167a6:	f000 f855 	bl	8016854 <uxr_seq_num_sub>
 80167aa:	8a61      	ldrh	r1, [r4, #18]
 80167ac:	f000 f852 	bl	8016854 <uxr_seq_num_sub>
 80167b0:	b1c0      	cbz	r0, 80167e4 <uxr_process_acknack+0x48>
 80167b2:	4605      	mov	r5, r0
 80167b4:	2700      	movs	r7, #0
 80167b6:	2101      	movs	r1, #1
 80167b8:	8a60      	ldrh	r0, [r4, #18]
 80167ba:	f000 f847 	bl	801684c <uxr_seq_num_add>
 80167be:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80167c2:	fbb0 f3fc 	udiv	r3, r0, ip
 80167c6:	e9d4 2100 	ldrd	r2, r1, [r4]
 80167ca:	fb0c 0313 	mls	r3, ip, r3, r0
 80167ce:	b29b      	uxth	r3, r3
 80167d0:	fbb1 f1fc 	udiv	r1, r1, ip
 80167d4:	3701      	adds	r7, #1
 80167d6:	fb03 f301 	mul.w	r3, r3, r1
 80167da:	42bd      	cmp	r5, r7
 80167dc:	7b21      	ldrb	r1, [r4, #12]
 80167de:	8260      	strh	r0, [r4, #18]
 80167e0:	50d1      	str	r1, [r2, r3]
 80167e2:	d1e8      	bne.n	80167b6 <uxr_process_acknack+0x1a>
 80167e4:	3e00      	subs	r6, #0
 80167e6:	f04f 0300 	mov.w	r3, #0
 80167ea:	bf18      	it	ne
 80167ec:	2601      	movne	r6, #1
 80167ee:	f884 3020 	strb.w	r3, [r4, #32]
 80167f2:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 80167f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080167f8 <uxr_is_output_up_to_date>:
 80167f8:	8a01      	ldrh	r1, [r0, #16]
 80167fa:	8a40      	ldrh	r0, [r0, #18]
 80167fc:	b508      	push	{r3, lr}
 80167fe:	f000 f82d 	bl	801685c <uxr_seq_num_cmp>
 8016802:	fab0 f080 	clz	r0, r0
 8016806:	0940      	lsrs	r0, r0, #5
 8016808:	bd08      	pop	{r3, pc}
 801680a:	bf00      	nop

0801680c <get_available_free_slots>:
 801680c:	8901      	ldrh	r1, [r0, #8]
 801680e:	b1d9      	cbz	r1, 8016848 <get_available_free_slots+0x3c>
 8016810:	b4f0      	push	{r4, r5, r6, r7}
 8016812:	2400      	movs	r4, #0
 8016814:	6845      	ldr	r5, [r0, #4]
 8016816:	6807      	ldr	r7, [r0, #0]
 8016818:	7b06      	ldrb	r6, [r0, #12]
 801681a:	fbb5 f5f1 	udiv	r5, r5, r1
 801681e:	4620      	mov	r0, r4
 8016820:	4622      	mov	r2, r4
 8016822:	fbb2 f3f1 	udiv	r3, r2, r1
 8016826:	fb01 2313 	mls	r3, r1, r3, r2
 801682a:	b29b      	uxth	r3, r3
 801682c:	fb05 7303 	mla	r3, r5, r3, r7
 8016830:	3401      	adds	r4, #1
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	429e      	cmp	r6, r3
 8016836:	bf08      	it	eq
 8016838:	3001      	addeq	r0, #1
 801683a:	b2a2      	uxth	r2, r4
 801683c:	bf08      	it	eq
 801683e:	b280      	uxtheq	r0, r0
 8016840:	428a      	cmp	r2, r1
 8016842:	d3ee      	bcc.n	8016822 <get_available_free_slots+0x16>
 8016844:	bcf0      	pop	{r4, r5, r6, r7}
 8016846:	4770      	bx	lr
 8016848:	4608      	mov	r0, r1
 801684a:	4770      	bx	lr

0801684c <uxr_seq_num_add>:
 801684c:	4408      	add	r0, r1
 801684e:	b280      	uxth	r0, r0
 8016850:	4770      	bx	lr
 8016852:	bf00      	nop

08016854 <uxr_seq_num_sub>:
 8016854:	1a40      	subs	r0, r0, r1
 8016856:	b280      	uxth	r0, r0
 8016858:	4770      	bx	lr
 801685a:	bf00      	nop

0801685c <uxr_seq_num_cmp>:
 801685c:	4288      	cmp	r0, r1
 801685e:	d011      	beq.n	8016884 <uxr_seq_num_cmp+0x28>
 8016860:	d309      	bcc.n	8016876 <uxr_seq_num_cmp+0x1a>
 8016862:	4288      	cmp	r0, r1
 8016864:	d910      	bls.n	8016888 <uxr_seq_num_cmp+0x2c>
 8016866:	1a40      	subs	r0, r0, r1
 8016868:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801686c:	bfd4      	ite	le
 801686e:	2001      	movle	r0, #1
 8016870:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8016874:	4770      	bx	lr
 8016876:	1a0b      	subs	r3, r1, r0
 8016878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801687c:	daf1      	bge.n	8016862 <uxr_seq_num_cmp+0x6>
 801687e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016882:	4770      	bx	lr
 8016884:	2000      	movs	r0, #0
 8016886:	4770      	bx	lr
 8016888:	2001      	movs	r0, #1
 801688a:	4770      	bx	lr

0801688c <rcl_get_default_domain_id>:
 801688c:	b530      	push	{r4, r5, lr}
 801688e:	b083      	sub	sp, #12
 8016890:	2300      	movs	r3, #0
 8016892:	9300      	str	r3, [sp, #0]
 8016894:	b1d0      	cbz	r0, 80168cc <rcl_get_default_domain_id+0x40>
 8016896:	4604      	mov	r4, r0
 8016898:	4669      	mov	r1, sp
 801689a:	4815      	ldr	r0, [pc, #84]	; (80168f0 <rcl_get_default_domain_id+0x64>)
 801689c:	f7fe face 	bl	8014e3c <rcutils_get_env>
 80168a0:	4602      	mov	r2, r0
 80168a2:	b110      	cbz	r0, 80168aa <rcl_get_default_domain_id+0x1e>
 80168a4:	2001      	movs	r0, #1
 80168a6:	b003      	add	sp, #12
 80168a8:	bd30      	pop	{r4, r5, pc}
 80168aa:	9b00      	ldr	r3, [sp, #0]
 80168ac:	b18b      	cbz	r3, 80168d2 <rcl_get_default_domain_id+0x46>
 80168ae:	7818      	ldrb	r0, [r3, #0]
 80168b0:	2800      	cmp	r0, #0
 80168b2:	d0f8      	beq.n	80168a6 <rcl_get_default_domain_id+0x1a>
 80168b4:	4618      	mov	r0, r3
 80168b6:	a901      	add	r1, sp, #4
 80168b8:	9201      	str	r2, [sp, #4]
 80168ba:	f000 fce3 	bl	8017284 <strtoul>
 80168be:	4605      	mov	r5, r0
 80168c0:	b150      	cbz	r0, 80168d8 <rcl_get_default_domain_id+0x4c>
 80168c2:	1c43      	adds	r3, r0, #1
 80168c4:	d00d      	beq.n	80168e2 <rcl_get_default_domain_id+0x56>
 80168c6:	6025      	str	r5, [r4, #0]
 80168c8:	2000      	movs	r0, #0
 80168ca:	e7ec      	b.n	80168a6 <rcl_get_default_domain_id+0x1a>
 80168cc:	200b      	movs	r0, #11
 80168ce:	b003      	add	sp, #12
 80168d0:	bd30      	pop	{r4, r5, pc}
 80168d2:	4618      	mov	r0, r3
 80168d4:	b003      	add	sp, #12
 80168d6:	bd30      	pop	{r4, r5, pc}
 80168d8:	9b01      	ldr	r3, [sp, #4]
 80168da:	781b      	ldrb	r3, [r3, #0]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d0f2      	beq.n	80168c6 <rcl_get_default_domain_id+0x3a>
 80168e0:	e7e0      	b.n	80168a4 <rcl_get_default_domain_id+0x18>
 80168e2:	f000 f959 	bl	8016b98 <__errno>
 80168e6:	6803      	ldr	r3, [r0, #0]
 80168e8:	2b22      	cmp	r3, #34	; 0x22
 80168ea:	d1ec      	bne.n	80168c6 <rcl_get_default_domain_id+0x3a>
 80168ec:	e7da      	b.n	80168a4 <rcl_get_default_domain_id+0x18>
 80168ee:	bf00      	nop
 80168f0:	08019d14 	.word	0x08019d14

080168f4 <rcl_get_zero_initialized_guard_condition>:
 80168f4:	4a03      	ldr	r2, [pc, #12]	; (8016904 <rcl_get_zero_initialized_guard_condition+0x10>)
 80168f6:	4603      	mov	r3, r0
 80168f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80168fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8016900:	4618      	mov	r0, r3
 8016902:	4770      	bx	lr
 8016904:	08019d24 	.word	0x08019d24

08016908 <rcl_guard_condition_init>:
 8016908:	b082      	sub	sp, #8
 801690a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801690c:	b087      	sub	sp, #28
 801690e:	ac0c      	add	r4, sp, #48	; 0x30
 8016910:	e884 000c 	stmia.w	r4, {r2, r3}
 8016914:	4625      	mov	r5, r4
 8016916:	4607      	mov	r7, r0
 8016918:	460e      	mov	r6, r1
 801691a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801691c:	ac01      	add	r4, sp, #4
 801691e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016920:	682b      	ldr	r3, [r5, #0]
 8016922:	6023      	str	r3, [r4, #0]
 8016924:	a801      	add	r0, sp, #4
 8016926:	f7f6 fedf 	bl	800d6e8 <rcutils_allocator_is_valid>
 801692a:	2800      	cmp	r0, #0
 801692c:	d034      	beq.n	8016998 <rcl_guard_condition_init+0x90>
 801692e:	463c      	mov	r4, r7
 8016930:	2f00      	cmp	r7, #0
 8016932:	d031      	beq.n	8016998 <rcl_guard_condition_init+0x90>
 8016934:	4635      	mov	r5, r6
 8016936:	687e      	ldr	r6, [r7, #4]
 8016938:	bb46      	cbnz	r6, 801698c <rcl_guard_condition_init+0x84>
 801693a:	2d00      	cmp	r5, #0
 801693c:	d02c      	beq.n	8016998 <rcl_guard_condition_init+0x90>
 801693e:	4628      	mov	r0, r5
 8016940:	f7fc f83e 	bl	80129c0 <rcl_context_is_valid>
 8016944:	2800      	cmp	r0, #0
 8016946:	d02d      	beq.n	80169a4 <rcl_guard_condition_init+0x9c>
 8016948:	9b01      	ldr	r3, [sp, #4]
 801694a:	9905      	ldr	r1, [sp, #20]
 801694c:	201c      	movs	r0, #28
 801694e:	4798      	blx	r3
 8016950:	4607      	mov	r7, r0
 8016952:	6060      	str	r0, [r4, #4]
 8016954:	2800      	cmp	r0, #0
 8016956:	d02e      	beq.n	80169b6 <rcl_guard_condition_init+0xae>
 8016958:	6828      	ldr	r0, [r5, #0]
 801695a:	3028      	adds	r0, #40	; 0x28
 801695c:	f000 f8dc 	bl	8016b18 <rmw_create_guard_condition>
 8016960:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8016964:	6038      	str	r0, [r7, #0]
 8016966:	f8dc 5000 	ldr.w	r5, [ip]
 801696a:	b1ed      	cbz	r5, 80169a8 <rcl_guard_condition_init+0xa0>
 801696c:	ac01      	add	r4, sp, #4
 801696e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016970:	2701      	movs	r7, #1
 8016972:	f10c 0508 	add.w	r5, ip, #8
 8016976:	f88c 7004 	strb.w	r7, [ip, #4]
 801697a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801697c:	6823      	ldr	r3, [r4, #0]
 801697e:	602b      	str	r3, [r5, #0]
 8016980:	4630      	mov	r0, r6
 8016982:	b007      	add	sp, #28
 8016984:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016988:	b002      	add	sp, #8
 801698a:	4770      	bx	lr
 801698c:	2064      	movs	r0, #100	; 0x64
 801698e:	b007      	add	sp, #28
 8016990:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016994:	b002      	add	sp, #8
 8016996:	4770      	bx	lr
 8016998:	200b      	movs	r0, #11
 801699a:	b007      	add	sp, #28
 801699c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80169a0:	b002      	add	sp, #8
 80169a2:	4770      	bx	lr
 80169a4:	2065      	movs	r0, #101	; 0x65
 80169a6:	e7f2      	b.n	801698e <rcl_guard_condition_init+0x86>
 80169a8:	4660      	mov	r0, ip
 80169aa:	9b02      	ldr	r3, [sp, #8]
 80169ac:	9905      	ldr	r1, [sp, #20]
 80169ae:	4798      	blx	r3
 80169b0:	6065      	str	r5, [r4, #4]
 80169b2:	2001      	movs	r0, #1
 80169b4:	e7eb      	b.n	801698e <rcl_guard_condition_init+0x86>
 80169b6:	200a      	movs	r0, #10
 80169b8:	e7e9      	b.n	801698e <rcl_guard_condition_init+0x86>
 80169ba:	bf00      	nop

080169bc <rcl_guard_condition_init_from_rmw>:
 80169bc:	b082      	sub	sp, #8
 80169be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169c2:	b086      	sub	sp, #24
 80169c4:	ac0c      	add	r4, sp, #48	; 0x30
 80169c6:	4684      	mov	ip, r0
 80169c8:	f844 3f04 	str.w	r3, [r4, #4]!
 80169cc:	460f      	mov	r7, r1
 80169ce:	4690      	mov	r8, r2
 80169d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169d2:	ad01      	add	r5, sp, #4
 80169d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80169d6:	6823      	ldr	r3, [r4, #0]
 80169d8:	602b      	str	r3, [r5, #0]
 80169da:	a801      	add	r0, sp, #4
 80169dc:	4664      	mov	r4, ip
 80169de:	f7f6 fe83 	bl	800d6e8 <rcutils_allocator_is_valid>
 80169e2:	b328      	cbz	r0, 8016a30 <rcl_guard_condition_init_from_rmw+0x74>
 80169e4:	b324      	cbz	r4, 8016a30 <rcl_guard_condition_init_from_rmw+0x74>
 80169e6:	6866      	ldr	r6, [r4, #4]
 80169e8:	b9e6      	cbnz	r6, 8016a24 <rcl_guard_condition_init_from_rmw+0x68>
 80169ea:	f1b8 0f00 	cmp.w	r8, #0
 80169ee:	d01f      	beq.n	8016a30 <rcl_guard_condition_init_from_rmw+0x74>
 80169f0:	4640      	mov	r0, r8
 80169f2:	f7fb ffe5 	bl	80129c0 <rcl_context_is_valid>
 80169f6:	b308      	cbz	r0, 8016a3c <rcl_guard_condition_init_from_rmw+0x80>
 80169f8:	9b01      	ldr	r3, [sp, #4]
 80169fa:	9905      	ldr	r1, [sp, #20]
 80169fc:	201c      	movs	r0, #28
 80169fe:	4798      	blx	r3
 8016a00:	4605      	mov	r5, r0
 8016a02:	6060      	str	r0, [r4, #4]
 8016a04:	b340      	cbz	r0, 8016a58 <rcl_guard_condition_init_from_rmw+0x9c>
 8016a06:	b1df      	cbz	r7, 8016a40 <rcl_guard_condition_init_from_rmw+0x84>
 8016a08:	6007      	str	r7, [r0, #0]
 8016a0a:	7106      	strb	r6, [r0, #4]
 8016a0c:	ac01      	add	r4, sp, #4
 8016a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a10:	3508      	adds	r5, #8
 8016a12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016a14:	6823      	ldr	r3, [r4, #0]
 8016a16:	602b      	str	r3, [r5, #0]
 8016a18:	2000      	movs	r0, #0
 8016a1a:	b006      	add	sp, #24
 8016a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a20:	b002      	add	sp, #8
 8016a22:	4770      	bx	lr
 8016a24:	2064      	movs	r0, #100	; 0x64
 8016a26:	b006      	add	sp, #24
 8016a28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a2c:	b002      	add	sp, #8
 8016a2e:	4770      	bx	lr
 8016a30:	200b      	movs	r0, #11
 8016a32:	b006      	add	sp, #24
 8016a34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a38:	b002      	add	sp, #8
 8016a3a:	4770      	bx	lr
 8016a3c:	2065      	movs	r0, #101	; 0x65
 8016a3e:	e7f2      	b.n	8016a26 <rcl_guard_condition_init_from_rmw+0x6a>
 8016a40:	f8d8 0000 	ldr.w	r0, [r8]
 8016a44:	3028      	adds	r0, #40	; 0x28
 8016a46:	f000 f867 	bl	8016b18 <rmw_create_guard_condition>
 8016a4a:	6028      	str	r0, [r5, #0]
 8016a4c:	6865      	ldr	r5, [r4, #4]
 8016a4e:	682e      	ldr	r6, [r5, #0]
 8016a50:	b126      	cbz	r6, 8016a5c <rcl_guard_condition_init_from_rmw+0xa0>
 8016a52:	2301      	movs	r3, #1
 8016a54:	712b      	strb	r3, [r5, #4]
 8016a56:	e7d9      	b.n	8016a0c <rcl_guard_condition_init_from_rmw+0x50>
 8016a58:	200a      	movs	r0, #10
 8016a5a:	e7e4      	b.n	8016a26 <rcl_guard_condition_init_from_rmw+0x6a>
 8016a5c:	4628      	mov	r0, r5
 8016a5e:	9b02      	ldr	r3, [sp, #8]
 8016a60:	9905      	ldr	r1, [sp, #20]
 8016a62:	4798      	blx	r3
 8016a64:	6066      	str	r6, [r4, #4]
 8016a66:	2001      	movs	r0, #1
 8016a68:	e7dd      	b.n	8016a26 <rcl_guard_condition_init_from_rmw+0x6a>
 8016a6a:	bf00      	nop

08016a6c <rcl_guard_condition_fini>:
 8016a6c:	b570      	push	{r4, r5, r6, lr}
 8016a6e:	b082      	sub	sp, #8
 8016a70:	b1f0      	cbz	r0, 8016ab0 <rcl_guard_condition_fini+0x44>
 8016a72:	4604      	mov	r4, r0
 8016a74:	6840      	ldr	r0, [r0, #4]
 8016a76:	b158      	cbz	r0, 8016a90 <rcl_guard_condition_fini+0x24>
 8016a78:	6803      	ldr	r3, [r0, #0]
 8016a7a:	68c6      	ldr	r6, [r0, #12]
 8016a7c:	6981      	ldr	r1, [r0, #24]
 8016a7e:	b15b      	cbz	r3, 8016a98 <rcl_guard_condition_fini+0x2c>
 8016a80:	7905      	ldrb	r5, [r0, #4]
 8016a82:	b95d      	cbnz	r5, 8016a9c <rcl_guard_condition_fini+0x30>
 8016a84:	47b0      	blx	r6
 8016a86:	2300      	movs	r3, #0
 8016a88:	4628      	mov	r0, r5
 8016a8a:	6063      	str	r3, [r4, #4]
 8016a8c:	b002      	add	sp, #8
 8016a8e:	bd70      	pop	{r4, r5, r6, pc}
 8016a90:	4605      	mov	r5, r0
 8016a92:	4628      	mov	r0, r5
 8016a94:	b002      	add	sp, #8
 8016a96:	bd70      	pop	{r4, r5, r6, pc}
 8016a98:	461d      	mov	r5, r3
 8016a9a:	e7f3      	b.n	8016a84 <rcl_guard_condition_fini+0x18>
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	9101      	str	r1, [sp, #4]
 8016aa0:	f000 f84e 	bl	8016b40 <rmw_destroy_guard_condition>
 8016aa4:	1e05      	subs	r5, r0, #0
 8016aa6:	9901      	ldr	r1, [sp, #4]
 8016aa8:	6860      	ldr	r0, [r4, #4]
 8016aaa:	bf18      	it	ne
 8016aac:	2501      	movne	r5, #1
 8016aae:	e7e9      	b.n	8016a84 <rcl_guard_condition_fini+0x18>
 8016ab0:	250b      	movs	r5, #11
 8016ab2:	4628      	mov	r0, r5
 8016ab4:	b002      	add	sp, #8
 8016ab6:	bd70      	pop	{r4, r5, r6, pc}

08016ab8 <rcl_guard_condition_get_default_options>:
 8016ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016aba:	b087      	sub	sp, #28
 8016abc:	4607      	mov	r7, r0
 8016abe:	466c      	mov	r4, sp
 8016ac0:	4668      	mov	r0, sp
 8016ac2:	f7f6 fe03 	bl	800d6cc <rcutils_get_default_allocator>
 8016ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ac8:	4d07      	ldr	r5, [pc, #28]	; (8016ae8 <rcl_guard_condition_get_default_options+0x30>)
 8016aca:	f8d4 c000 	ldr.w	ip, [r4]
 8016ace:	462e      	mov	r6, r5
 8016ad0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016ad2:	462c      	mov	r4, r5
 8016ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ad6:	463c      	mov	r4, r7
 8016ad8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016ada:	4638      	mov	r0, r7
 8016adc:	f8c6 c000 	str.w	ip, [r6]
 8016ae0:	f8c4 c000 	str.w	ip, [r4]
 8016ae4:	b007      	add	sp, #28
 8016ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ae8:	20010350 	.word	0x20010350

08016aec <rcl_trigger_guard_condition>:
 8016aec:	b148      	cbz	r0, 8016b02 <rcl_trigger_guard_condition+0x16>
 8016aee:	b508      	push	{r3, lr}
 8016af0:	6843      	ldr	r3, [r0, #4]
 8016af2:	b143      	cbz	r3, 8016b06 <rcl_trigger_guard_condition+0x1a>
 8016af4:	6818      	ldr	r0, [r3, #0]
 8016af6:	f000 f837 	bl	8016b68 <rmw_trigger_guard_condition>
 8016afa:	3800      	subs	r0, #0
 8016afc:	bf18      	it	ne
 8016afe:	2001      	movne	r0, #1
 8016b00:	bd08      	pop	{r3, pc}
 8016b02:	200b      	movs	r0, #11
 8016b04:	4770      	bx	lr
 8016b06:	200b      	movs	r0, #11
 8016b08:	bd08      	pop	{r3, pc}
 8016b0a:	bf00      	nop

08016b0c <rcl_guard_condition_get_rmw_handle>:
 8016b0c:	b110      	cbz	r0, 8016b14 <rcl_guard_condition_get_rmw_handle+0x8>
 8016b0e:	6840      	ldr	r0, [r0, #4]
 8016b10:	b100      	cbz	r0, 8016b14 <rcl_guard_condition_get_rmw_handle+0x8>
 8016b12:	6800      	ldr	r0, [r0, #0]
 8016b14:	4770      	bx	lr
 8016b16:	bf00      	nop

08016b18 <rmw_create_guard_condition>:
 8016b18:	b538      	push	{r3, r4, r5, lr}
 8016b1a:	4605      	mov	r5, r0
 8016b1c:	4807      	ldr	r0, [pc, #28]	; (8016b3c <rmw_create_guard_condition+0x24>)
 8016b1e:	f7fe fc71 	bl	8015404 <get_memory>
 8016b22:	4604      	mov	r4, r0
 8016b24:	b138      	cbz	r0, 8016b36 <rmw_create_guard_condition+0x1e>
 8016b26:	68c4      	ldr	r4, [r0, #12]
 8016b28:	2300      	movs	r3, #0
 8016b2a:	61e5      	str	r5, [r4, #28]
 8016b2c:	7423      	strb	r3, [r4, #16]
 8016b2e:	f7fe fcbf 	bl	80154b0 <rmw_get_implementation_identifier>
 8016b32:	f844 0f14 	str.w	r0, [r4, #20]!
 8016b36:	4620      	mov	r0, r4
 8016b38:	bd38      	pop	{r3, r4, r5, pc}
 8016b3a:	bf00      	nop
 8016b3c:	200143d0 	.word	0x200143d0

08016b40 <rmw_destroy_guard_condition>:
 8016b40:	b508      	push	{r3, lr}
 8016b42:	4b08      	ldr	r3, [pc, #32]	; (8016b64 <rmw_destroy_guard_condition+0x24>)
 8016b44:	6819      	ldr	r1, [r3, #0]
 8016b46:	b911      	cbnz	r1, 8016b4e <rmw_destroy_guard_condition+0xe>
 8016b48:	e00a      	b.n	8016b60 <rmw_destroy_guard_condition+0x20>
 8016b4a:	6889      	ldr	r1, [r1, #8]
 8016b4c:	b141      	cbz	r1, 8016b60 <rmw_destroy_guard_condition+0x20>
 8016b4e:	68cb      	ldr	r3, [r1, #12]
 8016b50:	3314      	adds	r3, #20
 8016b52:	4298      	cmp	r0, r3
 8016b54:	d1f9      	bne.n	8016b4a <rmw_destroy_guard_condition+0xa>
 8016b56:	4803      	ldr	r0, [pc, #12]	; (8016b64 <rmw_destroy_guard_condition+0x24>)
 8016b58:	f7fe fc64 	bl	8015424 <put_memory>
 8016b5c:	2000      	movs	r0, #0
 8016b5e:	bd08      	pop	{r3, pc}
 8016b60:	2001      	movs	r0, #1
 8016b62:	bd08      	pop	{r3, pc}
 8016b64:	200143d0 	.word	0x200143d0

08016b68 <rmw_trigger_guard_condition>:
 8016b68:	b160      	cbz	r0, 8016b84 <rmw_trigger_guard_condition+0x1c>
 8016b6a:	b510      	push	{r4, lr}
 8016b6c:	4604      	mov	r4, r0
 8016b6e:	6800      	ldr	r0, [r0, #0]
 8016b70:	f7f8 fabc 	bl	800f0ec <is_uxrce_rmw_identifier_valid>
 8016b74:	b908      	cbnz	r0, 8016b7a <rmw_trigger_guard_condition+0x12>
 8016b76:	2001      	movs	r0, #1
 8016b78:	bd10      	pop	{r4, pc}
 8016b7a:	6863      	ldr	r3, [r4, #4]
 8016b7c:	2201      	movs	r2, #1
 8016b7e:	701a      	strb	r2, [r3, #0]
 8016b80:	2000      	movs	r0, #0
 8016b82:	bd10      	pop	{r4, pc}
 8016b84:	2001      	movs	r0, #1
 8016b86:	4770      	bx	lr

08016b88 <calloc>:
 8016b88:	4b02      	ldr	r3, [pc, #8]	; (8016b94 <calloc+0xc>)
 8016b8a:	460a      	mov	r2, r1
 8016b8c:	4601      	mov	r1, r0
 8016b8e:	6818      	ldr	r0, [r3, #0]
 8016b90:	f000 b924 	b.w	8016ddc <_calloc_r>
 8016b94:	20000140 	.word	0x20000140

08016b98 <__errno>:
 8016b98:	4b01      	ldr	r3, [pc, #4]	; (8016ba0 <__errno+0x8>)
 8016b9a:	6818      	ldr	r0, [r3, #0]
 8016b9c:	4770      	bx	lr
 8016b9e:	bf00      	nop
 8016ba0:	20000140 	.word	0x20000140

08016ba4 <_fwrite_r>:
 8016ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ba8:	9c08      	ldr	r4, [sp, #32]
 8016baa:	4689      	mov	r9, r1
 8016bac:	4617      	mov	r7, r2
 8016bae:	fb02 f803 	mul.w	r8, r2, r3
 8016bb2:	4605      	mov	r5, r0
 8016bb4:	b118      	cbz	r0, 8016bbe <_fwrite_r+0x1a>
 8016bb6:	6983      	ldr	r3, [r0, #24]
 8016bb8:	b90b      	cbnz	r3, 8016bbe <_fwrite_r+0x1a>
 8016bba:	f000 fdab 	bl	8017714 <__sinit>
 8016bbe:	4b26      	ldr	r3, [pc, #152]	; (8016c58 <_fwrite_r+0xb4>)
 8016bc0:	429c      	cmp	r4, r3
 8016bc2:	d123      	bne.n	8016c0c <_fwrite_r+0x68>
 8016bc4:	686c      	ldr	r4, [r5, #4]
 8016bc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016bc8:	07de      	lsls	r6, r3, #31
 8016bca:	d405      	bmi.n	8016bd8 <_fwrite_r+0x34>
 8016bcc:	89a3      	ldrh	r3, [r4, #12]
 8016bce:	0598      	lsls	r0, r3, #22
 8016bd0:	d402      	bmi.n	8016bd8 <_fwrite_r+0x34>
 8016bd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016bd4:	f000 f8bf 	bl	8016d56 <__retarget_lock_acquire_recursive>
 8016bd8:	89a3      	ldrh	r3, [r4, #12]
 8016bda:	0719      	lsls	r1, r3, #28
 8016bdc:	d520      	bpl.n	8016c20 <_fwrite_r+0x7c>
 8016bde:	6923      	ldr	r3, [r4, #16]
 8016be0:	b1f3      	cbz	r3, 8016c20 <_fwrite_r+0x7c>
 8016be2:	2600      	movs	r6, #0
 8016be4:	4546      	cmp	r6, r8
 8016be6:	d029      	beq.n	8016c3c <_fwrite_r+0x98>
 8016be8:	68a0      	ldr	r0, [r4, #8]
 8016bea:	f819 1006 	ldrb.w	r1, [r9, r6]
 8016bee:	3801      	subs	r0, #1
 8016bf0:	2800      	cmp	r0, #0
 8016bf2:	60a0      	str	r0, [r4, #8]
 8016bf4:	da04      	bge.n	8016c00 <_fwrite_r+0x5c>
 8016bf6:	69a3      	ldr	r3, [r4, #24]
 8016bf8:	4298      	cmp	r0, r3
 8016bfa:	db19      	blt.n	8016c30 <_fwrite_r+0x8c>
 8016bfc:	290a      	cmp	r1, #10
 8016bfe:	d017      	beq.n	8016c30 <_fwrite_r+0x8c>
 8016c00:	6823      	ldr	r3, [r4, #0]
 8016c02:	1c5a      	adds	r2, r3, #1
 8016c04:	6022      	str	r2, [r4, #0]
 8016c06:	7019      	strb	r1, [r3, #0]
 8016c08:	3601      	adds	r6, #1
 8016c0a:	e7eb      	b.n	8016be4 <_fwrite_r+0x40>
 8016c0c:	4b13      	ldr	r3, [pc, #76]	; (8016c5c <_fwrite_r+0xb8>)
 8016c0e:	429c      	cmp	r4, r3
 8016c10:	d101      	bne.n	8016c16 <_fwrite_r+0x72>
 8016c12:	68ac      	ldr	r4, [r5, #8]
 8016c14:	e7d7      	b.n	8016bc6 <_fwrite_r+0x22>
 8016c16:	4b12      	ldr	r3, [pc, #72]	; (8016c60 <_fwrite_r+0xbc>)
 8016c18:	429c      	cmp	r4, r3
 8016c1a:	bf08      	it	eq
 8016c1c:	68ec      	ldreq	r4, [r5, #12]
 8016c1e:	e7d2      	b.n	8016bc6 <_fwrite_r+0x22>
 8016c20:	4621      	mov	r1, r4
 8016c22:	4628      	mov	r0, r5
 8016c24:	f000 fbc4 	bl	80173b0 <__swsetup_r>
 8016c28:	2800      	cmp	r0, #0
 8016c2a:	d0da      	beq.n	8016be2 <_fwrite_r+0x3e>
 8016c2c:	2600      	movs	r6, #0
 8016c2e:	e005      	b.n	8016c3c <_fwrite_r+0x98>
 8016c30:	4622      	mov	r2, r4
 8016c32:	4628      	mov	r0, r5
 8016c34:	f000 fb6a 	bl	801730c <__swbuf_r>
 8016c38:	3001      	adds	r0, #1
 8016c3a:	d1e5      	bne.n	8016c08 <_fwrite_r+0x64>
 8016c3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c3e:	07da      	lsls	r2, r3, #31
 8016c40:	d405      	bmi.n	8016c4e <_fwrite_r+0xaa>
 8016c42:	89a3      	ldrh	r3, [r4, #12]
 8016c44:	059b      	lsls	r3, r3, #22
 8016c46:	d402      	bmi.n	8016c4e <_fwrite_r+0xaa>
 8016c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c4a:	f000 f885 	bl	8016d58 <__retarget_lock_release_recursive>
 8016c4e:	fbb6 f0f7 	udiv	r0, r6, r7
 8016c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c56:	bf00      	nop
 8016c58:	08019f08 	.word	0x08019f08
 8016c5c:	08019f28 	.word	0x08019f28
 8016c60:	08019ee8 	.word	0x08019ee8

08016c64 <fwrite>:
 8016c64:	b507      	push	{r0, r1, r2, lr}
 8016c66:	9300      	str	r3, [sp, #0]
 8016c68:	4613      	mov	r3, r2
 8016c6a:	460a      	mov	r2, r1
 8016c6c:	4601      	mov	r1, r0
 8016c6e:	4803      	ldr	r0, [pc, #12]	; (8016c7c <fwrite+0x18>)
 8016c70:	6800      	ldr	r0, [r0, #0]
 8016c72:	f7ff ff97 	bl	8016ba4 <_fwrite_r>
 8016c76:	b003      	add	sp, #12
 8016c78:	f85d fb04 	ldr.w	pc, [sp], #4
 8016c7c:	20000140 	.word	0x20000140

08016c80 <getenv>:
 8016c80:	b507      	push	{r0, r1, r2, lr}
 8016c82:	4b04      	ldr	r3, [pc, #16]	; (8016c94 <getenv+0x14>)
 8016c84:	4601      	mov	r1, r0
 8016c86:	aa01      	add	r2, sp, #4
 8016c88:	6818      	ldr	r0, [r3, #0]
 8016c8a:	f000 f805 	bl	8016c98 <_findenv_r>
 8016c8e:	b003      	add	sp, #12
 8016c90:	f85d fb04 	ldr.w	pc, [sp], #4
 8016c94:	20000140 	.word	0x20000140

08016c98 <_findenv_r>:
 8016c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c9c:	4607      	mov	r7, r0
 8016c9e:	4689      	mov	r9, r1
 8016ca0:	4616      	mov	r6, r2
 8016ca2:	f000 fc11 	bl	80174c8 <__env_lock>
 8016ca6:	4b18      	ldr	r3, [pc, #96]	; (8016d08 <_findenv_r+0x70>)
 8016ca8:	681c      	ldr	r4, [r3, #0]
 8016caa:	469a      	mov	sl, r3
 8016cac:	b134      	cbz	r4, 8016cbc <_findenv_r+0x24>
 8016cae:	464b      	mov	r3, r9
 8016cb0:	4698      	mov	r8, r3
 8016cb2:	f813 1b01 	ldrb.w	r1, [r3], #1
 8016cb6:	b139      	cbz	r1, 8016cc8 <_findenv_r+0x30>
 8016cb8:	293d      	cmp	r1, #61	; 0x3d
 8016cba:	d1f9      	bne.n	8016cb0 <_findenv_r+0x18>
 8016cbc:	4638      	mov	r0, r7
 8016cbe:	f000 fc09 	bl	80174d4 <__env_unlock>
 8016cc2:	2000      	movs	r0, #0
 8016cc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cc8:	eba8 0809 	sub.w	r8, r8, r9
 8016ccc:	46a3      	mov	fp, r4
 8016cce:	f854 0b04 	ldr.w	r0, [r4], #4
 8016cd2:	2800      	cmp	r0, #0
 8016cd4:	d0f2      	beq.n	8016cbc <_findenv_r+0x24>
 8016cd6:	4642      	mov	r2, r8
 8016cd8:	4649      	mov	r1, r9
 8016cda:	f000 fa20 	bl	801711e <strncmp>
 8016cde:	2800      	cmp	r0, #0
 8016ce0:	d1f4      	bne.n	8016ccc <_findenv_r+0x34>
 8016ce2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016ce6:	eb03 0508 	add.w	r5, r3, r8
 8016cea:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016cee:	2b3d      	cmp	r3, #61	; 0x3d
 8016cf0:	d1ec      	bne.n	8016ccc <_findenv_r+0x34>
 8016cf2:	f8da 3000 	ldr.w	r3, [sl]
 8016cf6:	ebab 0303 	sub.w	r3, fp, r3
 8016cfa:	109b      	asrs	r3, r3, #2
 8016cfc:	4638      	mov	r0, r7
 8016cfe:	6033      	str	r3, [r6, #0]
 8016d00:	f000 fbe8 	bl	80174d4 <__env_unlock>
 8016d04:	1c68      	adds	r0, r5, #1
 8016d06:	e7dd      	b.n	8016cc4 <_findenv_r+0x2c>
 8016d08:	20000000 	.word	0x20000000

08016d0c <__libc_init_array>:
 8016d0c:	b570      	push	{r4, r5, r6, lr}
 8016d0e:	4d0d      	ldr	r5, [pc, #52]	; (8016d44 <__libc_init_array+0x38>)
 8016d10:	4c0d      	ldr	r4, [pc, #52]	; (8016d48 <__libc_init_array+0x3c>)
 8016d12:	1b64      	subs	r4, r4, r5
 8016d14:	10a4      	asrs	r4, r4, #2
 8016d16:	2600      	movs	r6, #0
 8016d18:	42a6      	cmp	r6, r4
 8016d1a:	d109      	bne.n	8016d30 <__libc_init_array+0x24>
 8016d1c:	4d0b      	ldr	r5, [pc, #44]	; (8016d4c <__libc_init_array+0x40>)
 8016d1e:	4c0c      	ldr	r4, [pc, #48]	; (8016d50 <__libc_init_array+0x44>)
 8016d20:	f001 fb88 	bl	8018434 <_init>
 8016d24:	1b64      	subs	r4, r4, r5
 8016d26:	10a4      	asrs	r4, r4, #2
 8016d28:	2600      	movs	r6, #0
 8016d2a:	42a6      	cmp	r6, r4
 8016d2c:	d105      	bne.n	8016d3a <__libc_init_array+0x2e>
 8016d2e:	bd70      	pop	{r4, r5, r6, pc}
 8016d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d34:	4798      	blx	r3
 8016d36:	3601      	adds	r6, #1
 8016d38:	e7ee      	b.n	8016d18 <__libc_init_array+0xc>
 8016d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d3e:	4798      	blx	r3
 8016d40:	3601      	adds	r6, #1
 8016d42:	e7f2      	b.n	8016d2a <__libc_init_array+0x1e>
 8016d44:	08019f84 	.word	0x08019f84
 8016d48:	08019f84 	.word	0x08019f84
 8016d4c:	08019f84 	.word	0x08019f84
 8016d50:	08019f88 	.word	0x08019f88

08016d54 <__retarget_lock_init_recursive>:
 8016d54:	4770      	bx	lr

08016d56 <__retarget_lock_acquire_recursive>:
 8016d56:	4770      	bx	lr

08016d58 <__retarget_lock_release_recursive>:
 8016d58:	4770      	bx	lr
	...

08016d5c <malloc>:
 8016d5c:	4b02      	ldr	r3, [pc, #8]	; (8016d68 <malloc+0xc>)
 8016d5e:	4601      	mov	r1, r0
 8016d60:	6818      	ldr	r0, [r3, #0]
 8016d62:	f000 b89b 	b.w	8016e9c <_malloc_r>
 8016d66:	bf00      	nop
 8016d68:	20000140 	.word	0x20000140

08016d6c <free>:
 8016d6c:	4b02      	ldr	r3, [pc, #8]	; (8016d78 <free+0xc>)
 8016d6e:	4601      	mov	r1, r0
 8016d70:	6818      	ldr	r0, [r3, #0]
 8016d72:	f000 b843 	b.w	8016dfc <_free_r>
 8016d76:	bf00      	nop
 8016d78:	20000140 	.word	0x20000140

08016d7c <memcpy>:
 8016d7c:	440a      	add	r2, r1
 8016d7e:	4291      	cmp	r1, r2
 8016d80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016d84:	d100      	bne.n	8016d88 <memcpy+0xc>
 8016d86:	4770      	bx	lr
 8016d88:	b510      	push	{r4, lr}
 8016d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d92:	4291      	cmp	r1, r2
 8016d94:	d1f9      	bne.n	8016d8a <memcpy+0xe>
 8016d96:	bd10      	pop	{r4, pc}

08016d98 <memmove>:
 8016d98:	4288      	cmp	r0, r1
 8016d9a:	b510      	push	{r4, lr}
 8016d9c:	eb01 0402 	add.w	r4, r1, r2
 8016da0:	d902      	bls.n	8016da8 <memmove+0x10>
 8016da2:	4284      	cmp	r4, r0
 8016da4:	4623      	mov	r3, r4
 8016da6:	d807      	bhi.n	8016db8 <memmove+0x20>
 8016da8:	1e43      	subs	r3, r0, #1
 8016daa:	42a1      	cmp	r1, r4
 8016dac:	d008      	beq.n	8016dc0 <memmove+0x28>
 8016dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016db2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016db6:	e7f8      	b.n	8016daa <memmove+0x12>
 8016db8:	4402      	add	r2, r0
 8016dba:	4601      	mov	r1, r0
 8016dbc:	428a      	cmp	r2, r1
 8016dbe:	d100      	bne.n	8016dc2 <memmove+0x2a>
 8016dc0:	bd10      	pop	{r4, pc}
 8016dc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016dc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016dca:	e7f7      	b.n	8016dbc <memmove+0x24>

08016dcc <memset>:
 8016dcc:	4402      	add	r2, r0
 8016dce:	4603      	mov	r3, r0
 8016dd0:	4293      	cmp	r3, r2
 8016dd2:	d100      	bne.n	8016dd6 <memset+0xa>
 8016dd4:	4770      	bx	lr
 8016dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8016dda:	e7f9      	b.n	8016dd0 <memset+0x4>

08016ddc <_calloc_r>:
 8016ddc:	b513      	push	{r0, r1, r4, lr}
 8016dde:	434a      	muls	r2, r1
 8016de0:	4611      	mov	r1, r2
 8016de2:	9201      	str	r2, [sp, #4]
 8016de4:	f000 f85a 	bl	8016e9c <_malloc_r>
 8016de8:	4604      	mov	r4, r0
 8016dea:	b118      	cbz	r0, 8016df4 <_calloc_r+0x18>
 8016dec:	9a01      	ldr	r2, [sp, #4]
 8016dee:	2100      	movs	r1, #0
 8016df0:	f7ff ffec 	bl	8016dcc <memset>
 8016df4:	4620      	mov	r0, r4
 8016df6:	b002      	add	sp, #8
 8016df8:	bd10      	pop	{r4, pc}
	...

08016dfc <_free_r>:
 8016dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016dfe:	2900      	cmp	r1, #0
 8016e00:	d048      	beq.n	8016e94 <_free_r+0x98>
 8016e02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016e06:	9001      	str	r0, [sp, #4]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	f1a1 0404 	sub.w	r4, r1, #4
 8016e0e:	bfb8      	it	lt
 8016e10:	18e4      	addlt	r4, r4, r3
 8016e12:	f000 fd93 	bl	801793c <__malloc_lock>
 8016e16:	4a20      	ldr	r2, [pc, #128]	; (8016e98 <_free_r+0x9c>)
 8016e18:	9801      	ldr	r0, [sp, #4]
 8016e1a:	6813      	ldr	r3, [r2, #0]
 8016e1c:	4615      	mov	r5, r2
 8016e1e:	b933      	cbnz	r3, 8016e2e <_free_r+0x32>
 8016e20:	6063      	str	r3, [r4, #4]
 8016e22:	6014      	str	r4, [r2, #0]
 8016e24:	b003      	add	sp, #12
 8016e26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e2a:	f000 bd8d 	b.w	8017948 <__malloc_unlock>
 8016e2e:	42a3      	cmp	r3, r4
 8016e30:	d90b      	bls.n	8016e4a <_free_r+0x4e>
 8016e32:	6821      	ldr	r1, [r4, #0]
 8016e34:	1862      	adds	r2, r4, r1
 8016e36:	4293      	cmp	r3, r2
 8016e38:	bf04      	itt	eq
 8016e3a:	681a      	ldreq	r2, [r3, #0]
 8016e3c:	685b      	ldreq	r3, [r3, #4]
 8016e3e:	6063      	str	r3, [r4, #4]
 8016e40:	bf04      	itt	eq
 8016e42:	1852      	addeq	r2, r2, r1
 8016e44:	6022      	streq	r2, [r4, #0]
 8016e46:	602c      	str	r4, [r5, #0]
 8016e48:	e7ec      	b.n	8016e24 <_free_r+0x28>
 8016e4a:	461a      	mov	r2, r3
 8016e4c:	685b      	ldr	r3, [r3, #4]
 8016e4e:	b10b      	cbz	r3, 8016e54 <_free_r+0x58>
 8016e50:	42a3      	cmp	r3, r4
 8016e52:	d9fa      	bls.n	8016e4a <_free_r+0x4e>
 8016e54:	6811      	ldr	r1, [r2, #0]
 8016e56:	1855      	adds	r5, r2, r1
 8016e58:	42a5      	cmp	r5, r4
 8016e5a:	d10b      	bne.n	8016e74 <_free_r+0x78>
 8016e5c:	6824      	ldr	r4, [r4, #0]
 8016e5e:	4421      	add	r1, r4
 8016e60:	1854      	adds	r4, r2, r1
 8016e62:	42a3      	cmp	r3, r4
 8016e64:	6011      	str	r1, [r2, #0]
 8016e66:	d1dd      	bne.n	8016e24 <_free_r+0x28>
 8016e68:	681c      	ldr	r4, [r3, #0]
 8016e6a:	685b      	ldr	r3, [r3, #4]
 8016e6c:	6053      	str	r3, [r2, #4]
 8016e6e:	4421      	add	r1, r4
 8016e70:	6011      	str	r1, [r2, #0]
 8016e72:	e7d7      	b.n	8016e24 <_free_r+0x28>
 8016e74:	d902      	bls.n	8016e7c <_free_r+0x80>
 8016e76:	230c      	movs	r3, #12
 8016e78:	6003      	str	r3, [r0, #0]
 8016e7a:	e7d3      	b.n	8016e24 <_free_r+0x28>
 8016e7c:	6825      	ldr	r5, [r4, #0]
 8016e7e:	1961      	adds	r1, r4, r5
 8016e80:	428b      	cmp	r3, r1
 8016e82:	bf04      	itt	eq
 8016e84:	6819      	ldreq	r1, [r3, #0]
 8016e86:	685b      	ldreq	r3, [r3, #4]
 8016e88:	6063      	str	r3, [r4, #4]
 8016e8a:	bf04      	itt	eq
 8016e8c:	1949      	addeq	r1, r1, r5
 8016e8e:	6021      	streq	r1, [r4, #0]
 8016e90:	6054      	str	r4, [r2, #4]
 8016e92:	e7c7      	b.n	8016e24 <_free_r+0x28>
 8016e94:	b003      	add	sp, #12
 8016e96:	bd30      	pop	{r4, r5, pc}
 8016e98:	20010364 	.word	0x20010364

08016e9c <_malloc_r>:
 8016e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e9e:	1ccd      	adds	r5, r1, #3
 8016ea0:	f025 0503 	bic.w	r5, r5, #3
 8016ea4:	3508      	adds	r5, #8
 8016ea6:	2d0c      	cmp	r5, #12
 8016ea8:	bf38      	it	cc
 8016eaa:	250c      	movcc	r5, #12
 8016eac:	2d00      	cmp	r5, #0
 8016eae:	4606      	mov	r6, r0
 8016eb0:	db01      	blt.n	8016eb6 <_malloc_r+0x1a>
 8016eb2:	42a9      	cmp	r1, r5
 8016eb4:	d903      	bls.n	8016ebe <_malloc_r+0x22>
 8016eb6:	230c      	movs	r3, #12
 8016eb8:	6033      	str	r3, [r6, #0]
 8016eba:	2000      	movs	r0, #0
 8016ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ebe:	f000 fd3d 	bl	801793c <__malloc_lock>
 8016ec2:	4921      	ldr	r1, [pc, #132]	; (8016f48 <_malloc_r+0xac>)
 8016ec4:	680a      	ldr	r2, [r1, #0]
 8016ec6:	4614      	mov	r4, r2
 8016ec8:	b99c      	cbnz	r4, 8016ef2 <_malloc_r+0x56>
 8016eca:	4f20      	ldr	r7, [pc, #128]	; (8016f4c <_malloc_r+0xb0>)
 8016ecc:	683b      	ldr	r3, [r7, #0]
 8016ece:	b923      	cbnz	r3, 8016eda <_malloc_r+0x3e>
 8016ed0:	4621      	mov	r1, r4
 8016ed2:	4630      	mov	r0, r6
 8016ed4:	f000 f8ca 	bl	801706c <_sbrk_r>
 8016ed8:	6038      	str	r0, [r7, #0]
 8016eda:	4629      	mov	r1, r5
 8016edc:	4630      	mov	r0, r6
 8016ede:	f000 f8c5 	bl	801706c <_sbrk_r>
 8016ee2:	1c43      	adds	r3, r0, #1
 8016ee4:	d123      	bne.n	8016f2e <_malloc_r+0x92>
 8016ee6:	230c      	movs	r3, #12
 8016ee8:	6033      	str	r3, [r6, #0]
 8016eea:	4630      	mov	r0, r6
 8016eec:	f000 fd2c 	bl	8017948 <__malloc_unlock>
 8016ef0:	e7e3      	b.n	8016eba <_malloc_r+0x1e>
 8016ef2:	6823      	ldr	r3, [r4, #0]
 8016ef4:	1b5b      	subs	r3, r3, r5
 8016ef6:	d417      	bmi.n	8016f28 <_malloc_r+0x8c>
 8016ef8:	2b0b      	cmp	r3, #11
 8016efa:	d903      	bls.n	8016f04 <_malloc_r+0x68>
 8016efc:	6023      	str	r3, [r4, #0]
 8016efe:	441c      	add	r4, r3
 8016f00:	6025      	str	r5, [r4, #0]
 8016f02:	e004      	b.n	8016f0e <_malloc_r+0x72>
 8016f04:	6863      	ldr	r3, [r4, #4]
 8016f06:	42a2      	cmp	r2, r4
 8016f08:	bf0c      	ite	eq
 8016f0a:	600b      	streq	r3, [r1, #0]
 8016f0c:	6053      	strne	r3, [r2, #4]
 8016f0e:	4630      	mov	r0, r6
 8016f10:	f000 fd1a 	bl	8017948 <__malloc_unlock>
 8016f14:	f104 000b 	add.w	r0, r4, #11
 8016f18:	1d23      	adds	r3, r4, #4
 8016f1a:	f020 0007 	bic.w	r0, r0, #7
 8016f1e:	1ac2      	subs	r2, r0, r3
 8016f20:	d0cc      	beq.n	8016ebc <_malloc_r+0x20>
 8016f22:	1a1b      	subs	r3, r3, r0
 8016f24:	50a3      	str	r3, [r4, r2]
 8016f26:	e7c9      	b.n	8016ebc <_malloc_r+0x20>
 8016f28:	4622      	mov	r2, r4
 8016f2a:	6864      	ldr	r4, [r4, #4]
 8016f2c:	e7cc      	b.n	8016ec8 <_malloc_r+0x2c>
 8016f2e:	1cc4      	adds	r4, r0, #3
 8016f30:	f024 0403 	bic.w	r4, r4, #3
 8016f34:	42a0      	cmp	r0, r4
 8016f36:	d0e3      	beq.n	8016f00 <_malloc_r+0x64>
 8016f38:	1a21      	subs	r1, r4, r0
 8016f3a:	4630      	mov	r0, r6
 8016f3c:	f000 f896 	bl	801706c <_sbrk_r>
 8016f40:	3001      	adds	r0, #1
 8016f42:	d1dd      	bne.n	8016f00 <_malloc_r+0x64>
 8016f44:	e7cf      	b.n	8016ee6 <_malloc_r+0x4a>
 8016f46:	bf00      	nop
 8016f48:	20010364 	.word	0x20010364
 8016f4c:	20010368 	.word	0x20010368

08016f50 <iprintf>:
 8016f50:	b40f      	push	{r0, r1, r2, r3}
 8016f52:	4b0a      	ldr	r3, [pc, #40]	; (8016f7c <iprintf+0x2c>)
 8016f54:	b513      	push	{r0, r1, r4, lr}
 8016f56:	681c      	ldr	r4, [r3, #0]
 8016f58:	b124      	cbz	r4, 8016f64 <iprintf+0x14>
 8016f5a:	69a3      	ldr	r3, [r4, #24]
 8016f5c:	b913      	cbnz	r3, 8016f64 <iprintf+0x14>
 8016f5e:	4620      	mov	r0, r4
 8016f60:	f000 fbd8 	bl	8017714 <__sinit>
 8016f64:	ab05      	add	r3, sp, #20
 8016f66:	9a04      	ldr	r2, [sp, #16]
 8016f68:	68a1      	ldr	r1, [r4, #8]
 8016f6a:	9301      	str	r3, [sp, #4]
 8016f6c:	4620      	mov	r0, r4
 8016f6e:	f000 fe9d 	bl	8017cac <_vfiprintf_r>
 8016f72:	b002      	add	sp, #8
 8016f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f78:	b004      	add	sp, #16
 8016f7a:	4770      	bx	lr
 8016f7c:	20000140 	.word	0x20000140

08016f80 <srand>:
 8016f80:	b538      	push	{r3, r4, r5, lr}
 8016f82:	4b10      	ldr	r3, [pc, #64]	; (8016fc4 <srand+0x44>)
 8016f84:	681d      	ldr	r5, [r3, #0]
 8016f86:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8016f88:	4604      	mov	r4, r0
 8016f8a:	b9b3      	cbnz	r3, 8016fba <srand+0x3a>
 8016f8c:	2018      	movs	r0, #24
 8016f8e:	f7ff fee5 	bl	8016d5c <malloc>
 8016f92:	4602      	mov	r2, r0
 8016f94:	63a8      	str	r0, [r5, #56]	; 0x38
 8016f96:	b920      	cbnz	r0, 8016fa2 <srand+0x22>
 8016f98:	4b0b      	ldr	r3, [pc, #44]	; (8016fc8 <srand+0x48>)
 8016f9a:	480c      	ldr	r0, [pc, #48]	; (8016fcc <srand+0x4c>)
 8016f9c:	2142      	movs	r1, #66	; 0x42
 8016f9e:	f000 fa75 	bl	801748c <__assert_func>
 8016fa2:	490b      	ldr	r1, [pc, #44]	; (8016fd0 <srand+0x50>)
 8016fa4:	4b0b      	ldr	r3, [pc, #44]	; (8016fd4 <srand+0x54>)
 8016fa6:	e9c0 1300 	strd	r1, r3, [r0]
 8016faa:	4b0b      	ldr	r3, [pc, #44]	; (8016fd8 <srand+0x58>)
 8016fac:	6083      	str	r3, [r0, #8]
 8016fae:	230b      	movs	r3, #11
 8016fb0:	8183      	strh	r3, [r0, #12]
 8016fb2:	2100      	movs	r1, #0
 8016fb4:	2001      	movs	r0, #1
 8016fb6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016fba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8016fbc:	2200      	movs	r2, #0
 8016fbe:	611c      	str	r4, [r3, #16]
 8016fc0:	615a      	str	r2, [r3, #20]
 8016fc2:	bd38      	pop	{r3, r4, r5, pc}
 8016fc4:	20000140 	.word	0x20000140
 8016fc8:	08019e34 	.word	0x08019e34
 8016fcc:	08019e4b 	.word	0x08019e4b
 8016fd0:	abcd330e 	.word	0xabcd330e
 8016fd4:	e66d1234 	.word	0xe66d1234
 8016fd8:	0005deec 	.word	0x0005deec

08016fdc <rand>:
 8016fdc:	4b17      	ldr	r3, [pc, #92]	; (801703c <rand+0x60>)
 8016fde:	b510      	push	{r4, lr}
 8016fe0:	681c      	ldr	r4, [r3, #0]
 8016fe2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016fe4:	b9b3      	cbnz	r3, 8017014 <rand+0x38>
 8016fe6:	2018      	movs	r0, #24
 8016fe8:	f7ff feb8 	bl	8016d5c <malloc>
 8016fec:	63a0      	str	r0, [r4, #56]	; 0x38
 8016fee:	b928      	cbnz	r0, 8016ffc <rand+0x20>
 8016ff0:	4602      	mov	r2, r0
 8016ff2:	4b13      	ldr	r3, [pc, #76]	; (8017040 <rand+0x64>)
 8016ff4:	4813      	ldr	r0, [pc, #76]	; (8017044 <rand+0x68>)
 8016ff6:	214e      	movs	r1, #78	; 0x4e
 8016ff8:	f000 fa48 	bl	801748c <__assert_func>
 8016ffc:	4a12      	ldr	r2, [pc, #72]	; (8017048 <rand+0x6c>)
 8016ffe:	4b13      	ldr	r3, [pc, #76]	; (801704c <rand+0x70>)
 8017000:	e9c0 2300 	strd	r2, r3, [r0]
 8017004:	4b12      	ldr	r3, [pc, #72]	; (8017050 <rand+0x74>)
 8017006:	6083      	str	r3, [r0, #8]
 8017008:	230b      	movs	r3, #11
 801700a:	8183      	strh	r3, [r0, #12]
 801700c:	2201      	movs	r2, #1
 801700e:	2300      	movs	r3, #0
 8017010:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017014:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017016:	480f      	ldr	r0, [pc, #60]	; (8017054 <rand+0x78>)
 8017018:	690a      	ldr	r2, [r1, #16]
 801701a:	694b      	ldr	r3, [r1, #20]
 801701c:	4c0e      	ldr	r4, [pc, #56]	; (8017058 <rand+0x7c>)
 801701e:	4350      	muls	r0, r2
 8017020:	fb04 0003 	mla	r0, r4, r3, r0
 8017024:	fba2 3404 	umull	r3, r4, r2, r4
 8017028:	1c5a      	adds	r2, r3, #1
 801702a:	4404      	add	r4, r0
 801702c:	f144 0000 	adc.w	r0, r4, #0
 8017030:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8017034:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017038:	bd10      	pop	{r4, pc}
 801703a:	bf00      	nop
 801703c:	20000140 	.word	0x20000140
 8017040:	08019e34 	.word	0x08019e34
 8017044:	08019e4b 	.word	0x08019e4b
 8017048:	abcd330e 	.word	0xabcd330e
 801704c:	e66d1234 	.word	0xe66d1234
 8017050:	0005deec 	.word	0x0005deec
 8017054:	5851f42d 	.word	0x5851f42d
 8017058:	4c957f2d 	.word	0x4c957f2d

0801705c <realloc>:
 801705c:	4b02      	ldr	r3, [pc, #8]	; (8017068 <realloc+0xc>)
 801705e:	460a      	mov	r2, r1
 8017060:	4601      	mov	r1, r0
 8017062:	6818      	ldr	r0, [r3, #0]
 8017064:	f000 bc76 	b.w	8017954 <_realloc_r>
 8017068:	20000140 	.word	0x20000140

0801706c <_sbrk_r>:
 801706c:	b538      	push	{r3, r4, r5, lr}
 801706e:	4d06      	ldr	r5, [pc, #24]	; (8017088 <_sbrk_r+0x1c>)
 8017070:	2300      	movs	r3, #0
 8017072:	4604      	mov	r4, r0
 8017074:	4608      	mov	r0, r1
 8017076:	602b      	str	r3, [r5, #0]
 8017078:	f7eb fa68 	bl	800254c <_sbrk>
 801707c:	1c43      	adds	r3, r0, #1
 801707e:	d102      	bne.n	8017086 <_sbrk_r+0x1a>
 8017080:	682b      	ldr	r3, [r5, #0]
 8017082:	b103      	cbz	r3, 8017086 <_sbrk_r+0x1a>
 8017084:	6023      	str	r3, [r4, #0]
 8017086:	bd38      	pop	{r3, r4, r5, pc}
 8017088:	20015be4 	.word	0x20015be4

0801708c <sniprintf>:
 801708c:	b40c      	push	{r2, r3}
 801708e:	b530      	push	{r4, r5, lr}
 8017090:	4b17      	ldr	r3, [pc, #92]	; (80170f0 <sniprintf+0x64>)
 8017092:	1e0c      	subs	r4, r1, #0
 8017094:	681d      	ldr	r5, [r3, #0]
 8017096:	b09d      	sub	sp, #116	; 0x74
 8017098:	da08      	bge.n	80170ac <sniprintf+0x20>
 801709a:	238b      	movs	r3, #139	; 0x8b
 801709c:	602b      	str	r3, [r5, #0]
 801709e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80170a2:	b01d      	add	sp, #116	; 0x74
 80170a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80170a8:	b002      	add	sp, #8
 80170aa:	4770      	bx	lr
 80170ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80170b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80170b4:	bf14      	ite	ne
 80170b6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80170ba:	4623      	moveq	r3, r4
 80170bc:	9304      	str	r3, [sp, #16]
 80170be:	9307      	str	r3, [sp, #28]
 80170c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80170c4:	9002      	str	r0, [sp, #8]
 80170c6:	9006      	str	r0, [sp, #24]
 80170c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80170cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80170ce:	ab21      	add	r3, sp, #132	; 0x84
 80170d0:	a902      	add	r1, sp, #8
 80170d2:	4628      	mov	r0, r5
 80170d4:	9301      	str	r3, [sp, #4]
 80170d6:	f000 fcbf 	bl	8017a58 <_svfiprintf_r>
 80170da:	1c43      	adds	r3, r0, #1
 80170dc:	bfbc      	itt	lt
 80170de:	238b      	movlt	r3, #139	; 0x8b
 80170e0:	602b      	strlt	r3, [r5, #0]
 80170e2:	2c00      	cmp	r4, #0
 80170e4:	d0dd      	beq.n	80170a2 <sniprintf+0x16>
 80170e6:	9b02      	ldr	r3, [sp, #8]
 80170e8:	2200      	movs	r2, #0
 80170ea:	701a      	strb	r2, [r3, #0]
 80170ec:	e7d9      	b.n	80170a2 <sniprintf+0x16>
 80170ee:	bf00      	nop
 80170f0:	20000140 	.word	0x20000140

080170f4 <strchr>:
 80170f4:	b2c9      	uxtb	r1, r1
 80170f6:	4603      	mov	r3, r0
 80170f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80170fc:	b11a      	cbz	r2, 8017106 <strchr+0x12>
 80170fe:	428a      	cmp	r2, r1
 8017100:	d1f9      	bne.n	80170f6 <strchr+0x2>
 8017102:	4618      	mov	r0, r3
 8017104:	4770      	bx	lr
 8017106:	2900      	cmp	r1, #0
 8017108:	bf18      	it	ne
 801710a:	2300      	movne	r3, #0
 801710c:	e7f9      	b.n	8017102 <strchr+0xe>

0801710e <strcpy>:
 801710e:	4603      	mov	r3, r0
 8017110:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017114:	f803 2b01 	strb.w	r2, [r3], #1
 8017118:	2a00      	cmp	r2, #0
 801711a:	d1f9      	bne.n	8017110 <strcpy+0x2>
 801711c:	4770      	bx	lr

0801711e <strncmp>:
 801711e:	b510      	push	{r4, lr}
 8017120:	b16a      	cbz	r2, 801713e <strncmp+0x20>
 8017122:	3901      	subs	r1, #1
 8017124:	1884      	adds	r4, r0, r2
 8017126:	f810 3b01 	ldrb.w	r3, [r0], #1
 801712a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801712e:	4293      	cmp	r3, r2
 8017130:	d103      	bne.n	801713a <strncmp+0x1c>
 8017132:	42a0      	cmp	r0, r4
 8017134:	d001      	beq.n	801713a <strncmp+0x1c>
 8017136:	2b00      	cmp	r3, #0
 8017138:	d1f5      	bne.n	8017126 <strncmp+0x8>
 801713a:	1a98      	subs	r0, r3, r2
 801713c:	bd10      	pop	{r4, pc}
 801713e:	4610      	mov	r0, r2
 8017140:	e7fc      	b.n	801713c <strncmp+0x1e>

08017142 <strnlen>:
 8017142:	b510      	push	{r4, lr}
 8017144:	4602      	mov	r2, r0
 8017146:	4401      	add	r1, r0
 8017148:	428a      	cmp	r2, r1
 801714a:	4613      	mov	r3, r2
 801714c:	d101      	bne.n	8017152 <strnlen+0x10>
 801714e:	1a18      	subs	r0, r3, r0
 8017150:	bd10      	pop	{r4, pc}
 8017152:	781c      	ldrb	r4, [r3, #0]
 8017154:	3201      	adds	r2, #1
 8017156:	2c00      	cmp	r4, #0
 8017158:	d1f6      	bne.n	8017148 <strnlen+0x6>
 801715a:	e7f8      	b.n	801714e <strnlen+0xc>

0801715c <strstr>:
 801715c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801715e:	780c      	ldrb	r4, [r1, #0]
 8017160:	b164      	cbz	r4, 801717c <strstr+0x20>
 8017162:	4603      	mov	r3, r0
 8017164:	781a      	ldrb	r2, [r3, #0]
 8017166:	4618      	mov	r0, r3
 8017168:	1c5e      	adds	r6, r3, #1
 801716a:	b90a      	cbnz	r2, 8017170 <strstr+0x14>
 801716c:	4610      	mov	r0, r2
 801716e:	e005      	b.n	801717c <strstr+0x20>
 8017170:	4294      	cmp	r4, r2
 8017172:	d108      	bne.n	8017186 <strstr+0x2a>
 8017174:	460d      	mov	r5, r1
 8017176:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801717a:	b902      	cbnz	r2, 801717e <strstr+0x22>
 801717c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801717e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8017182:	4297      	cmp	r7, r2
 8017184:	d0f7      	beq.n	8017176 <strstr+0x1a>
 8017186:	4633      	mov	r3, r6
 8017188:	e7ec      	b.n	8017164 <strstr+0x8>
	...

0801718c <_strtoul_l.isra.0>:
 801718c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017190:	4e3b      	ldr	r6, [pc, #236]	; (8017280 <_strtoul_l.isra.0+0xf4>)
 8017192:	4686      	mov	lr, r0
 8017194:	468c      	mov	ip, r1
 8017196:	4660      	mov	r0, ip
 8017198:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801719c:	5da5      	ldrb	r5, [r4, r6]
 801719e:	f015 0508 	ands.w	r5, r5, #8
 80171a2:	d1f8      	bne.n	8017196 <_strtoul_l.isra.0+0xa>
 80171a4:	2c2d      	cmp	r4, #45	; 0x2d
 80171a6:	d134      	bne.n	8017212 <_strtoul_l.isra.0+0x86>
 80171a8:	f89c 4000 	ldrb.w	r4, [ip]
 80171ac:	f04f 0801 	mov.w	r8, #1
 80171b0:	f100 0c02 	add.w	ip, r0, #2
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d05e      	beq.n	8017276 <_strtoul_l.isra.0+0xea>
 80171b8:	2b10      	cmp	r3, #16
 80171ba:	d10c      	bne.n	80171d6 <_strtoul_l.isra.0+0x4a>
 80171bc:	2c30      	cmp	r4, #48	; 0x30
 80171be:	d10a      	bne.n	80171d6 <_strtoul_l.isra.0+0x4a>
 80171c0:	f89c 0000 	ldrb.w	r0, [ip]
 80171c4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80171c8:	2858      	cmp	r0, #88	; 0x58
 80171ca:	d14f      	bne.n	801726c <_strtoul_l.isra.0+0xe0>
 80171cc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80171d0:	2310      	movs	r3, #16
 80171d2:	f10c 0c02 	add.w	ip, ip, #2
 80171d6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80171da:	2500      	movs	r5, #0
 80171dc:	fbb7 f7f3 	udiv	r7, r7, r3
 80171e0:	fb03 f907 	mul.w	r9, r3, r7
 80171e4:	ea6f 0909 	mvn.w	r9, r9
 80171e8:	4628      	mov	r0, r5
 80171ea:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80171ee:	2e09      	cmp	r6, #9
 80171f0:	d818      	bhi.n	8017224 <_strtoul_l.isra.0+0x98>
 80171f2:	4634      	mov	r4, r6
 80171f4:	42a3      	cmp	r3, r4
 80171f6:	dd24      	ble.n	8017242 <_strtoul_l.isra.0+0xb6>
 80171f8:	2d00      	cmp	r5, #0
 80171fa:	db1f      	blt.n	801723c <_strtoul_l.isra.0+0xb0>
 80171fc:	4287      	cmp	r7, r0
 80171fe:	d31d      	bcc.n	801723c <_strtoul_l.isra.0+0xb0>
 8017200:	d101      	bne.n	8017206 <_strtoul_l.isra.0+0x7a>
 8017202:	45a1      	cmp	r9, r4
 8017204:	db1a      	blt.n	801723c <_strtoul_l.isra.0+0xb0>
 8017206:	fb00 4003 	mla	r0, r0, r3, r4
 801720a:	2501      	movs	r5, #1
 801720c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8017210:	e7eb      	b.n	80171ea <_strtoul_l.isra.0+0x5e>
 8017212:	2c2b      	cmp	r4, #43	; 0x2b
 8017214:	bf08      	it	eq
 8017216:	f89c 4000 	ldrbeq.w	r4, [ip]
 801721a:	46a8      	mov	r8, r5
 801721c:	bf08      	it	eq
 801721e:	f100 0c02 	addeq.w	ip, r0, #2
 8017222:	e7c7      	b.n	80171b4 <_strtoul_l.isra.0+0x28>
 8017224:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8017228:	2e19      	cmp	r6, #25
 801722a:	d801      	bhi.n	8017230 <_strtoul_l.isra.0+0xa4>
 801722c:	3c37      	subs	r4, #55	; 0x37
 801722e:	e7e1      	b.n	80171f4 <_strtoul_l.isra.0+0x68>
 8017230:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8017234:	2e19      	cmp	r6, #25
 8017236:	d804      	bhi.n	8017242 <_strtoul_l.isra.0+0xb6>
 8017238:	3c57      	subs	r4, #87	; 0x57
 801723a:	e7db      	b.n	80171f4 <_strtoul_l.isra.0+0x68>
 801723c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8017240:	e7e4      	b.n	801720c <_strtoul_l.isra.0+0x80>
 8017242:	2d00      	cmp	r5, #0
 8017244:	da07      	bge.n	8017256 <_strtoul_l.isra.0+0xca>
 8017246:	2322      	movs	r3, #34	; 0x22
 8017248:	f8ce 3000 	str.w	r3, [lr]
 801724c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017250:	b942      	cbnz	r2, 8017264 <_strtoul_l.isra.0+0xd8>
 8017252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017256:	f1b8 0f00 	cmp.w	r8, #0
 801725a:	d000      	beq.n	801725e <_strtoul_l.isra.0+0xd2>
 801725c:	4240      	negs	r0, r0
 801725e:	2a00      	cmp	r2, #0
 8017260:	d0f7      	beq.n	8017252 <_strtoul_l.isra.0+0xc6>
 8017262:	b10d      	cbz	r5, 8017268 <_strtoul_l.isra.0+0xdc>
 8017264:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8017268:	6011      	str	r1, [r2, #0]
 801726a:	e7f2      	b.n	8017252 <_strtoul_l.isra.0+0xc6>
 801726c:	2430      	movs	r4, #48	; 0x30
 801726e:	2b00      	cmp	r3, #0
 8017270:	d1b1      	bne.n	80171d6 <_strtoul_l.isra.0+0x4a>
 8017272:	2308      	movs	r3, #8
 8017274:	e7af      	b.n	80171d6 <_strtoul_l.isra.0+0x4a>
 8017276:	2c30      	cmp	r4, #48	; 0x30
 8017278:	d0a2      	beq.n	80171c0 <_strtoul_l.isra.0+0x34>
 801727a:	230a      	movs	r3, #10
 801727c:	e7ab      	b.n	80171d6 <_strtoul_l.isra.0+0x4a>
 801727e:	bf00      	nop
 8017280:	08019d2d 	.word	0x08019d2d

08017284 <strtoul>:
 8017284:	4613      	mov	r3, r2
 8017286:	460a      	mov	r2, r1
 8017288:	4601      	mov	r1, r0
 801728a:	4802      	ldr	r0, [pc, #8]	; (8017294 <strtoul+0x10>)
 801728c:	6800      	ldr	r0, [r0, #0]
 801728e:	f7ff bf7d 	b.w	801718c <_strtoul_l.isra.0>
 8017292:	bf00      	nop
 8017294:	20000140 	.word	0x20000140

08017298 <_vsniprintf_r>:
 8017298:	b530      	push	{r4, r5, lr}
 801729a:	1e14      	subs	r4, r2, #0
 801729c:	4605      	mov	r5, r0
 801729e:	b09b      	sub	sp, #108	; 0x6c
 80172a0:	4618      	mov	r0, r3
 80172a2:	da05      	bge.n	80172b0 <_vsniprintf_r+0x18>
 80172a4:	238b      	movs	r3, #139	; 0x8b
 80172a6:	602b      	str	r3, [r5, #0]
 80172a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80172ac:	b01b      	add	sp, #108	; 0x6c
 80172ae:	bd30      	pop	{r4, r5, pc}
 80172b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80172b4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80172b8:	bf14      	ite	ne
 80172ba:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80172be:	4623      	moveq	r3, r4
 80172c0:	9302      	str	r3, [sp, #8]
 80172c2:	9305      	str	r3, [sp, #20]
 80172c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80172c8:	9100      	str	r1, [sp, #0]
 80172ca:	9104      	str	r1, [sp, #16]
 80172cc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80172d0:	4602      	mov	r2, r0
 80172d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80172d4:	4669      	mov	r1, sp
 80172d6:	4628      	mov	r0, r5
 80172d8:	f000 fbbe 	bl	8017a58 <_svfiprintf_r>
 80172dc:	1c43      	adds	r3, r0, #1
 80172de:	bfbc      	itt	lt
 80172e0:	238b      	movlt	r3, #139	; 0x8b
 80172e2:	602b      	strlt	r3, [r5, #0]
 80172e4:	2c00      	cmp	r4, #0
 80172e6:	d0e1      	beq.n	80172ac <_vsniprintf_r+0x14>
 80172e8:	9b00      	ldr	r3, [sp, #0]
 80172ea:	2200      	movs	r2, #0
 80172ec:	701a      	strb	r2, [r3, #0]
 80172ee:	e7dd      	b.n	80172ac <_vsniprintf_r+0x14>

080172f0 <vsniprintf>:
 80172f0:	b507      	push	{r0, r1, r2, lr}
 80172f2:	9300      	str	r3, [sp, #0]
 80172f4:	4613      	mov	r3, r2
 80172f6:	460a      	mov	r2, r1
 80172f8:	4601      	mov	r1, r0
 80172fa:	4803      	ldr	r0, [pc, #12]	; (8017308 <vsniprintf+0x18>)
 80172fc:	6800      	ldr	r0, [r0, #0]
 80172fe:	f7ff ffcb 	bl	8017298 <_vsniprintf_r>
 8017302:	b003      	add	sp, #12
 8017304:	f85d fb04 	ldr.w	pc, [sp], #4
 8017308:	20000140 	.word	0x20000140

0801730c <__swbuf_r>:
 801730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801730e:	460e      	mov	r6, r1
 8017310:	4614      	mov	r4, r2
 8017312:	4605      	mov	r5, r0
 8017314:	b118      	cbz	r0, 801731e <__swbuf_r+0x12>
 8017316:	6983      	ldr	r3, [r0, #24]
 8017318:	b90b      	cbnz	r3, 801731e <__swbuf_r+0x12>
 801731a:	f000 f9fb 	bl	8017714 <__sinit>
 801731e:	4b21      	ldr	r3, [pc, #132]	; (80173a4 <__swbuf_r+0x98>)
 8017320:	429c      	cmp	r4, r3
 8017322:	d12b      	bne.n	801737c <__swbuf_r+0x70>
 8017324:	686c      	ldr	r4, [r5, #4]
 8017326:	69a3      	ldr	r3, [r4, #24]
 8017328:	60a3      	str	r3, [r4, #8]
 801732a:	89a3      	ldrh	r3, [r4, #12]
 801732c:	071a      	lsls	r2, r3, #28
 801732e:	d52f      	bpl.n	8017390 <__swbuf_r+0x84>
 8017330:	6923      	ldr	r3, [r4, #16]
 8017332:	b36b      	cbz	r3, 8017390 <__swbuf_r+0x84>
 8017334:	6923      	ldr	r3, [r4, #16]
 8017336:	6820      	ldr	r0, [r4, #0]
 8017338:	1ac0      	subs	r0, r0, r3
 801733a:	6963      	ldr	r3, [r4, #20]
 801733c:	b2f6      	uxtb	r6, r6
 801733e:	4283      	cmp	r3, r0
 8017340:	4637      	mov	r7, r6
 8017342:	dc04      	bgt.n	801734e <__swbuf_r+0x42>
 8017344:	4621      	mov	r1, r4
 8017346:	4628      	mov	r0, r5
 8017348:	f000 f950 	bl	80175ec <_fflush_r>
 801734c:	bb30      	cbnz	r0, 801739c <__swbuf_r+0x90>
 801734e:	68a3      	ldr	r3, [r4, #8]
 8017350:	3b01      	subs	r3, #1
 8017352:	60a3      	str	r3, [r4, #8]
 8017354:	6823      	ldr	r3, [r4, #0]
 8017356:	1c5a      	adds	r2, r3, #1
 8017358:	6022      	str	r2, [r4, #0]
 801735a:	701e      	strb	r6, [r3, #0]
 801735c:	6963      	ldr	r3, [r4, #20]
 801735e:	3001      	adds	r0, #1
 8017360:	4283      	cmp	r3, r0
 8017362:	d004      	beq.n	801736e <__swbuf_r+0x62>
 8017364:	89a3      	ldrh	r3, [r4, #12]
 8017366:	07db      	lsls	r3, r3, #31
 8017368:	d506      	bpl.n	8017378 <__swbuf_r+0x6c>
 801736a:	2e0a      	cmp	r6, #10
 801736c:	d104      	bne.n	8017378 <__swbuf_r+0x6c>
 801736e:	4621      	mov	r1, r4
 8017370:	4628      	mov	r0, r5
 8017372:	f000 f93b 	bl	80175ec <_fflush_r>
 8017376:	b988      	cbnz	r0, 801739c <__swbuf_r+0x90>
 8017378:	4638      	mov	r0, r7
 801737a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801737c:	4b0a      	ldr	r3, [pc, #40]	; (80173a8 <__swbuf_r+0x9c>)
 801737e:	429c      	cmp	r4, r3
 8017380:	d101      	bne.n	8017386 <__swbuf_r+0x7a>
 8017382:	68ac      	ldr	r4, [r5, #8]
 8017384:	e7cf      	b.n	8017326 <__swbuf_r+0x1a>
 8017386:	4b09      	ldr	r3, [pc, #36]	; (80173ac <__swbuf_r+0xa0>)
 8017388:	429c      	cmp	r4, r3
 801738a:	bf08      	it	eq
 801738c:	68ec      	ldreq	r4, [r5, #12]
 801738e:	e7ca      	b.n	8017326 <__swbuf_r+0x1a>
 8017390:	4621      	mov	r1, r4
 8017392:	4628      	mov	r0, r5
 8017394:	f000 f80c 	bl	80173b0 <__swsetup_r>
 8017398:	2800      	cmp	r0, #0
 801739a:	d0cb      	beq.n	8017334 <__swbuf_r+0x28>
 801739c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80173a0:	e7ea      	b.n	8017378 <__swbuf_r+0x6c>
 80173a2:	bf00      	nop
 80173a4:	08019f08 	.word	0x08019f08
 80173a8:	08019f28 	.word	0x08019f28
 80173ac:	08019ee8 	.word	0x08019ee8

080173b0 <__swsetup_r>:
 80173b0:	4b32      	ldr	r3, [pc, #200]	; (801747c <__swsetup_r+0xcc>)
 80173b2:	b570      	push	{r4, r5, r6, lr}
 80173b4:	681d      	ldr	r5, [r3, #0]
 80173b6:	4606      	mov	r6, r0
 80173b8:	460c      	mov	r4, r1
 80173ba:	b125      	cbz	r5, 80173c6 <__swsetup_r+0x16>
 80173bc:	69ab      	ldr	r3, [r5, #24]
 80173be:	b913      	cbnz	r3, 80173c6 <__swsetup_r+0x16>
 80173c0:	4628      	mov	r0, r5
 80173c2:	f000 f9a7 	bl	8017714 <__sinit>
 80173c6:	4b2e      	ldr	r3, [pc, #184]	; (8017480 <__swsetup_r+0xd0>)
 80173c8:	429c      	cmp	r4, r3
 80173ca:	d10f      	bne.n	80173ec <__swsetup_r+0x3c>
 80173cc:	686c      	ldr	r4, [r5, #4]
 80173ce:	89a3      	ldrh	r3, [r4, #12]
 80173d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80173d4:	0719      	lsls	r1, r3, #28
 80173d6:	d42c      	bmi.n	8017432 <__swsetup_r+0x82>
 80173d8:	06dd      	lsls	r5, r3, #27
 80173da:	d411      	bmi.n	8017400 <__swsetup_r+0x50>
 80173dc:	2309      	movs	r3, #9
 80173de:	6033      	str	r3, [r6, #0]
 80173e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80173e4:	81a3      	strh	r3, [r4, #12]
 80173e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80173ea:	e03e      	b.n	801746a <__swsetup_r+0xba>
 80173ec:	4b25      	ldr	r3, [pc, #148]	; (8017484 <__swsetup_r+0xd4>)
 80173ee:	429c      	cmp	r4, r3
 80173f0:	d101      	bne.n	80173f6 <__swsetup_r+0x46>
 80173f2:	68ac      	ldr	r4, [r5, #8]
 80173f4:	e7eb      	b.n	80173ce <__swsetup_r+0x1e>
 80173f6:	4b24      	ldr	r3, [pc, #144]	; (8017488 <__swsetup_r+0xd8>)
 80173f8:	429c      	cmp	r4, r3
 80173fa:	bf08      	it	eq
 80173fc:	68ec      	ldreq	r4, [r5, #12]
 80173fe:	e7e6      	b.n	80173ce <__swsetup_r+0x1e>
 8017400:	0758      	lsls	r0, r3, #29
 8017402:	d512      	bpl.n	801742a <__swsetup_r+0x7a>
 8017404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017406:	b141      	cbz	r1, 801741a <__swsetup_r+0x6a>
 8017408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801740c:	4299      	cmp	r1, r3
 801740e:	d002      	beq.n	8017416 <__swsetup_r+0x66>
 8017410:	4630      	mov	r0, r6
 8017412:	f7ff fcf3 	bl	8016dfc <_free_r>
 8017416:	2300      	movs	r3, #0
 8017418:	6363      	str	r3, [r4, #52]	; 0x34
 801741a:	89a3      	ldrh	r3, [r4, #12]
 801741c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017420:	81a3      	strh	r3, [r4, #12]
 8017422:	2300      	movs	r3, #0
 8017424:	6063      	str	r3, [r4, #4]
 8017426:	6923      	ldr	r3, [r4, #16]
 8017428:	6023      	str	r3, [r4, #0]
 801742a:	89a3      	ldrh	r3, [r4, #12]
 801742c:	f043 0308 	orr.w	r3, r3, #8
 8017430:	81a3      	strh	r3, [r4, #12]
 8017432:	6923      	ldr	r3, [r4, #16]
 8017434:	b94b      	cbnz	r3, 801744a <__swsetup_r+0x9a>
 8017436:	89a3      	ldrh	r3, [r4, #12]
 8017438:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801743c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017440:	d003      	beq.n	801744a <__swsetup_r+0x9a>
 8017442:	4621      	mov	r1, r4
 8017444:	4630      	mov	r0, r6
 8017446:	f000 fa39 	bl	80178bc <__smakebuf_r>
 801744a:	89a0      	ldrh	r0, [r4, #12]
 801744c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017450:	f010 0301 	ands.w	r3, r0, #1
 8017454:	d00a      	beq.n	801746c <__swsetup_r+0xbc>
 8017456:	2300      	movs	r3, #0
 8017458:	60a3      	str	r3, [r4, #8]
 801745a:	6963      	ldr	r3, [r4, #20]
 801745c:	425b      	negs	r3, r3
 801745e:	61a3      	str	r3, [r4, #24]
 8017460:	6923      	ldr	r3, [r4, #16]
 8017462:	b943      	cbnz	r3, 8017476 <__swsetup_r+0xc6>
 8017464:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017468:	d1ba      	bne.n	80173e0 <__swsetup_r+0x30>
 801746a:	bd70      	pop	{r4, r5, r6, pc}
 801746c:	0781      	lsls	r1, r0, #30
 801746e:	bf58      	it	pl
 8017470:	6963      	ldrpl	r3, [r4, #20]
 8017472:	60a3      	str	r3, [r4, #8]
 8017474:	e7f4      	b.n	8017460 <__swsetup_r+0xb0>
 8017476:	2000      	movs	r0, #0
 8017478:	e7f7      	b.n	801746a <__swsetup_r+0xba>
 801747a:	bf00      	nop
 801747c:	20000140 	.word	0x20000140
 8017480:	08019f08 	.word	0x08019f08
 8017484:	08019f28 	.word	0x08019f28
 8017488:	08019ee8 	.word	0x08019ee8

0801748c <__assert_func>:
 801748c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801748e:	4614      	mov	r4, r2
 8017490:	461a      	mov	r2, r3
 8017492:	4b09      	ldr	r3, [pc, #36]	; (80174b8 <__assert_func+0x2c>)
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	4605      	mov	r5, r0
 8017498:	68d8      	ldr	r0, [r3, #12]
 801749a:	b14c      	cbz	r4, 80174b0 <__assert_func+0x24>
 801749c:	4b07      	ldr	r3, [pc, #28]	; (80174bc <__assert_func+0x30>)
 801749e:	9100      	str	r1, [sp, #0]
 80174a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80174a4:	4906      	ldr	r1, [pc, #24]	; (80174c0 <__assert_func+0x34>)
 80174a6:	462b      	mov	r3, r5
 80174a8:	f000 f9b2 	bl	8017810 <fiprintf>
 80174ac:	f000 ff18 	bl	80182e0 <abort>
 80174b0:	4b04      	ldr	r3, [pc, #16]	; (80174c4 <__assert_func+0x38>)
 80174b2:	461c      	mov	r4, r3
 80174b4:	e7f3      	b.n	801749e <__assert_func+0x12>
 80174b6:	bf00      	nop
 80174b8:	20000140 	.word	0x20000140
 80174bc:	08019eaa 	.word	0x08019eaa
 80174c0:	08019eb7 	.word	0x08019eb7
 80174c4:	08019ee5 	.word	0x08019ee5

080174c8 <__env_lock>:
 80174c8:	4801      	ldr	r0, [pc, #4]	; (80174d0 <__env_lock+0x8>)
 80174ca:	f7ff bc44 	b.w	8016d56 <__retarget_lock_acquire_recursive>
 80174ce:	bf00      	nop
 80174d0:	20015bda 	.word	0x20015bda

080174d4 <__env_unlock>:
 80174d4:	4801      	ldr	r0, [pc, #4]	; (80174dc <__env_unlock+0x8>)
 80174d6:	f7ff bc3f 	b.w	8016d58 <__retarget_lock_release_recursive>
 80174da:	bf00      	nop
 80174dc:	20015bda 	.word	0x20015bda

080174e0 <__sflush_r>:
 80174e0:	898a      	ldrh	r2, [r1, #12]
 80174e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174e6:	4605      	mov	r5, r0
 80174e8:	0710      	lsls	r0, r2, #28
 80174ea:	460c      	mov	r4, r1
 80174ec:	d458      	bmi.n	80175a0 <__sflush_r+0xc0>
 80174ee:	684b      	ldr	r3, [r1, #4]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	dc05      	bgt.n	8017500 <__sflush_r+0x20>
 80174f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	dc02      	bgt.n	8017500 <__sflush_r+0x20>
 80174fa:	2000      	movs	r0, #0
 80174fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017500:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017502:	2e00      	cmp	r6, #0
 8017504:	d0f9      	beq.n	80174fa <__sflush_r+0x1a>
 8017506:	2300      	movs	r3, #0
 8017508:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801750c:	682f      	ldr	r7, [r5, #0]
 801750e:	602b      	str	r3, [r5, #0]
 8017510:	d032      	beq.n	8017578 <__sflush_r+0x98>
 8017512:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017514:	89a3      	ldrh	r3, [r4, #12]
 8017516:	075a      	lsls	r2, r3, #29
 8017518:	d505      	bpl.n	8017526 <__sflush_r+0x46>
 801751a:	6863      	ldr	r3, [r4, #4]
 801751c:	1ac0      	subs	r0, r0, r3
 801751e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017520:	b10b      	cbz	r3, 8017526 <__sflush_r+0x46>
 8017522:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017524:	1ac0      	subs	r0, r0, r3
 8017526:	2300      	movs	r3, #0
 8017528:	4602      	mov	r2, r0
 801752a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801752c:	6a21      	ldr	r1, [r4, #32]
 801752e:	4628      	mov	r0, r5
 8017530:	47b0      	blx	r6
 8017532:	1c43      	adds	r3, r0, #1
 8017534:	89a3      	ldrh	r3, [r4, #12]
 8017536:	d106      	bne.n	8017546 <__sflush_r+0x66>
 8017538:	6829      	ldr	r1, [r5, #0]
 801753a:	291d      	cmp	r1, #29
 801753c:	d82c      	bhi.n	8017598 <__sflush_r+0xb8>
 801753e:	4a2a      	ldr	r2, [pc, #168]	; (80175e8 <__sflush_r+0x108>)
 8017540:	40ca      	lsrs	r2, r1
 8017542:	07d6      	lsls	r6, r2, #31
 8017544:	d528      	bpl.n	8017598 <__sflush_r+0xb8>
 8017546:	2200      	movs	r2, #0
 8017548:	6062      	str	r2, [r4, #4]
 801754a:	04d9      	lsls	r1, r3, #19
 801754c:	6922      	ldr	r2, [r4, #16]
 801754e:	6022      	str	r2, [r4, #0]
 8017550:	d504      	bpl.n	801755c <__sflush_r+0x7c>
 8017552:	1c42      	adds	r2, r0, #1
 8017554:	d101      	bne.n	801755a <__sflush_r+0x7a>
 8017556:	682b      	ldr	r3, [r5, #0]
 8017558:	b903      	cbnz	r3, 801755c <__sflush_r+0x7c>
 801755a:	6560      	str	r0, [r4, #84]	; 0x54
 801755c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801755e:	602f      	str	r7, [r5, #0]
 8017560:	2900      	cmp	r1, #0
 8017562:	d0ca      	beq.n	80174fa <__sflush_r+0x1a>
 8017564:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017568:	4299      	cmp	r1, r3
 801756a:	d002      	beq.n	8017572 <__sflush_r+0x92>
 801756c:	4628      	mov	r0, r5
 801756e:	f7ff fc45 	bl	8016dfc <_free_r>
 8017572:	2000      	movs	r0, #0
 8017574:	6360      	str	r0, [r4, #52]	; 0x34
 8017576:	e7c1      	b.n	80174fc <__sflush_r+0x1c>
 8017578:	6a21      	ldr	r1, [r4, #32]
 801757a:	2301      	movs	r3, #1
 801757c:	4628      	mov	r0, r5
 801757e:	47b0      	blx	r6
 8017580:	1c41      	adds	r1, r0, #1
 8017582:	d1c7      	bne.n	8017514 <__sflush_r+0x34>
 8017584:	682b      	ldr	r3, [r5, #0]
 8017586:	2b00      	cmp	r3, #0
 8017588:	d0c4      	beq.n	8017514 <__sflush_r+0x34>
 801758a:	2b1d      	cmp	r3, #29
 801758c:	d001      	beq.n	8017592 <__sflush_r+0xb2>
 801758e:	2b16      	cmp	r3, #22
 8017590:	d101      	bne.n	8017596 <__sflush_r+0xb6>
 8017592:	602f      	str	r7, [r5, #0]
 8017594:	e7b1      	b.n	80174fa <__sflush_r+0x1a>
 8017596:	89a3      	ldrh	r3, [r4, #12]
 8017598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801759c:	81a3      	strh	r3, [r4, #12]
 801759e:	e7ad      	b.n	80174fc <__sflush_r+0x1c>
 80175a0:	690f      	ldr	r7, [r1, #16]
 80175a2:	2f00      	cmp	r7, #0
 80175a4:	d0a9      	beq.n	80174fa <__sflush_r+0x1a>
 80175a6:	0793      	lsls	r3, r2, #30
 80175a8:	680e      	ldr	r6, [r1, #0]
 80175aa:	bf08      	it	eq
 80175ac:	694b      	ldreq	r3, [r1, #20]
 80175ae:	600f      	str	r7, [r1, #0]
 80175b0:	bf18      	it	ne
 80175b2:	2300      	movne	r3, #0
 80175b4:	eba6 0807 	sub.w	r8, r6, r7
 80175b8:	608b      	str	r3, [r1, #8]
 80175ba:	f1b8 0f00 	cmp.w	r8, #0
 80175be:	dd9c      	ble.n	80174fa <__sflush_r+0x1a>
 80175c0:	6a21      	ldr	r1, [r4, #32]
 80175c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80175c4:	4643      	mov	r3, r8
 80175c6:	463a      	mov	r2, r7
 80175c8:	4628      	mov	r0, r5
 80175ca:	47b0      	blx	r6
 80175cc:	2800      	cmp	r0, #0
 80175ce:	dc06      	bgt.n	80175de <__sflush_r+0xfe>
 80175d0:	89a3      	ldrh	r3, [r4, #12]
 80175d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175d6:	81a3      	strh	r3, [r4, #12]
 80175d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80175dc:	e78e      	b.n	80174fc <__sflush_r+0x1c>
 80175de:	4407      	add	r7, r0
 80175e0:	eba8 0800 	sub.w	r8, r8, r0
 80175e4:	e7e9      	b.n	80175ba <__sflush_r+0xda>
 80175e6:	bf00      	nop
 80175e8:	20400001 	.word	0x20400001

080175ec <_fflush_r>:
 80175ec:	b538      	push	{r3, r4, r5, lr}
 80175ee:	690b      	ldr	r3, [r1, #16]
 80175f0:	4605      	mov	r5, r0
 80175f2:	460c      	mov	r4, r1
 80175f4:	b913      	cbnz	r3, 80175fc <_fflush_r+0x10>
 80175f6:	2500      	movs	r5, #0
 80175f8:	4628      	mov	r0, r5
 80175fa:	bd38      	pop	{r3, r4, r5, pc}
 80175fc:	b118      	cbz	r0, 8017606 <_fflush_r+0x1a>
 80175fe:	6983      	ldr	r3, [r0, #24]
 8017600:	b90b      	cbnz	r3, 8017606 <_fflush_r+0x1a>
 8017602:	f000 f887 	bl	8017714 <__sinit>
 8017606:	4b14      	ldr	r3, [pc, #80]	; (8017658 <_fflush_r+0x6c>)
 8017608:	429c      	cmp	r4, r3
 801760a:	d11b      	bne.n	8017644 <_fflush_r+0x58>
 801760c:	686c      	ldr	r4, [r5, #4]
 801760e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017612:	2b00      	cmp	r3, #0
 8017614:	d0ef      	beq.n	80175f6 <_fflush_r+0xa>
 8017616:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017618:	07d0      	lsls	r0, r2, #31
 801761a:	d404      	bmi.n	8017626 <_fflush_r+0x3a>
 801761c:	0599      	lsls	r1, r3, #22
 801761e:	d402      	bmi.n	8017626 <_fflush_r+0x3a>
 8017620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017622:	f7ff fb98 	bl	8016d56 <__retarget_lock_acquire_recursive>
 8017626:	4628      	mov	r0, r5
 8017628:	4621      	mov	r1, r4
 801762a:	f7ff ff59 	bl	80174e0 <__sflush_r>
 801762e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017630:	07da      	lsls	r2, r3, #31
 8017632:	4605      	mov	r5, r0
 8017634:	d4e0      	bmi.n	80175f8 <_fflush_r+0xc>
 8017636:	89a3      	ldrh	r3, [r4, #12]
 8017638:	059b      	lsls	r3, r3, #22
 801763a:	d4dd      	bmi.n	80175f8 <_fflush_r+0xc>
 801763c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801763e:	f7ff fb8b 	bl	8016d58 <__retarget_lock_release_recursive>
 8017642:	e7d9      	b.n	80175f8 <_fflush_r+0xc>
 8017644:	4b05      	ldr	r3, [pc, #20]	; (801765c <_fflush_r+0x70>)
 8017646:	429c      	cmp	r4, r3
 8017648:	d101      	bne.n	801764e <_fflush_r+0x62>
 801764a:	68ac      	ldr	r4, [r5, #8]
 801764c:	e7df      	b.n	801760e <_fflush_r+0x22>
 801764e:	4b04      	ldr	r3, [pc, #16]	; (8017660 <_fflush_r+0x74>)
 8017650:	429c      	cmp	r4, r3
 8017652:	bf08      	it	eq
 8017654:	68ec      	ldreq	r4, [r5, #12]
 8017656:	e7da      	b.n	801760e <_fflush_r+0x22>
 8017658:	08019f08 	.word	0x08019f08
 801765c:	08019f28 	.word	0x08019f28
 8017660:	08019ee8 	.word	0x08019ee8

08017664 <std>:
 8017664:	2300      	movs	r3, #0
 8017666:	b510      	push	{r4, lr}
 8017668:	4604      	mov	r4, r0
 801766a:	e9c0 3300 	strd	r3, r3, [r0]
 801766e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017672:	6083      	str	r3, [r0, #8]
 8017674:	8181      	strh	r1, [r0, #12]
 8017676:	6643      	str	r3, [r0, #100]	; 0x64
 8017678:	81c2      	strh	r2, [r0, #14]
 801767a:	6183      	str	r3, [r0, #24]
 801767c:	4619      	mov	r1, r3
 801767e:	2208      	movs	r2, #8
 8017680:	305c      	adds	r0, #92	; 0x5c
 8017682:	f7ff fba3 	bl	8016dcc <memset>
 8017686:	4b05      	ldr	r3, [pc, #20]	; (801769c <std+0x38>)
 8017688:	6263      	str	r3, [r4, #36]	; 0x24
 801768a:	4b05      	ldr	r3, [pc, #20]	; (80176a0 <std+0x3c>)
 801768c:	62a3      	str	r3, [r4, #40]	; 0x28
 801768e:	4b05      	ldr	r3, [pc, #20]	; (80176a4 <std+0x40>)
 8017690:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017692:	4b05      	ldr	r3, [pc, #20]	; (80176a8 <std+0x44>)
 8017694:	6224      	str	r4, [r4, #32]
 8017696:	6323      	str	r3, [r4, #48]	; 0x30
 8017698:	bd10      	pop	{r4, pc}
 801769a:	bf00      	nop
 801769c:	08018235 	.word	0x08018235
 80176a0:	08018257 	.word	0x08018257
 80176a4:	0801828f 	.word	0x0801828f
 80176a8:	080182b3 	.word	0x080182b3

080176ac <_cleanup_r>:
 80176ac:	4901      	ldr	r1, [pc, #4]	; (80176b4 <_cleanup_r+0x8>)
 80176ae:	f000 b8c1 	b.w	8017834 <_fwalk_reent>
 80176b2:	bf00      	nop
 80176b4:	080175ed 	.word	0x080175ed

080176b8 <__sfmoreglue>:
 80176b8:	b570      	push	{r4, r5, r6, lr}
 80176ba:	1e4a      	subs	r2, r1, #1
 80176bc:	2568      	movs	r5, #104	; 0x68
 80176be:	4355      	muls	r5, r2
 80176c0:	460e      	mov	r6, r1
 80176c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80176c6:	f7ff fbe9 	bl	8016e9c <_malloc_r>
 80176ca:	4604      	mov	r4, r0
 80176cc:	b140      	cbz	r0, 80176e0 <__sfmoreglue+0x28>
 80176ce:	2100      	movs	r1, #0
 80176d0:	e9c0 1600 	strd	r1, r6, [r0]
 80176d4:	300c      	adds	r0, #12
 80176d6:	60a0      	str	r0, [r4, #8]
 80176d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80176dc:	f7ff fb76 	bl	8016dcc <memset>
 80176e0:	4620      	mov	r0, r4
 80176e2:	bd70      	pop	{r4, r5, r6, pc}

080176e4 <__sfp_lock_acquire>:
 80176e4:	4801      	ldr	r0, [pc, #4]	; (80176ec <__sfp_lock_acquire+0x8>)
 80176e6:	f7ff bb36 	b.w	8016d56 <__retarget_lock_acquire_recursive>
 80176ea:	bf00      	nop
 80176ec:	20015be0 	.word	0x20015be0

080176f0 <__sfp_lock_release>:
 80176f0:	4801      	ldr	r0, [pc, #4]	; (80176f8 <__sfp_lock_release+0x8>)
 80176f2:	f7ff bb31 	b.w	8016d58 <__retarget_lock_release_recursive>
 80176f6:	bf00      	nop
 80176f8:	20015be0 	.word	0x20015be0

080176fc <__sinit_lock_acquire>:
 80176fc:	4801      	ldr	r0, [pc, #4]	; (8017704 <__sinit_lock_acquire+0x8>)
 80176fe:	f7ff bb2a 	b.w	8016d56 <__retarget_lock_acquire_recursive>
 8017702:	bf00      	nop
 8017704:	20015bdb 	.word	0x20015bdb

08017708 <__sinit_lock_release>:
 8017708:	4801      	ldr	r0, [pc, #4]	; (8017710 <__sinit_lock_release+0x8>)
 801770a:	f7ff bb25 	b.w	8016d58 <__retarget_lock_release_recursive>
 801770e:	bf00      	nop
 8017710:	20015bdb 	.word	0x20015bdb

08017714 <__sinit>:
 8017714:	b510      	push	{r4, lr}
 8017716:	4604      	mov	r4, r0
 8017718:	f7ff fff0 	bl	80176fc <__sinit_lock_acquire>
 801771c:	69a3      	ldr	r3, [r4, #24]
 801771e:	b11b      	cbz	r3, 8017728 <__sinit+0x14>
 8017720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017724:	f7ff bff0 	b.w	8017708 <__sinit_lock_release>
 8017728:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801772c:	6523      	str	r3, [r4, #80]	; 0x50
 801772e:	4b13      	ldr	r3, [pc, #76]	; (801777c <__sinit+0x68>)
 8017730:	4a13      	ldr	r2, [pc, #76]	; (8017780 <__sinit+0x6c>)
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	62a2      	str	r2, [r4, #40]	; 0x28
 8017736:	42a3      	cmp	r3, r4
 8017738:	bf04      	itt	eq
 801773a:	2301      	moveq	r3, #1
 801773c:	61a3      	streq	r3, [r4, #24]
 801773e:	4620      	mov	r0, r4
 8017740:	f000 f820 	bl	8017784 <__sfp>
 8017744:	6060      	str	r0, [r4, #4]
 8017746:	4620      	mov	r0, r4
 8017748:	f000 f81c 	bl	8017784 <__sfp>
 801774c:	60a0      	str	r0, [r4, #8]
 801774e:	4620      	mov	r0, r4
 8017750:	f000 f818 	bl	8017784 <__sfp>
 8017754:	2200      	movs	r2, #0
 8017756:	60e0      	str	r0, [r4, #12]
 8017758:	2104      	movs	r1, #4
 801775a:	6860      	ldr	r0, [r4, #4]
 801775c:	f7ff ff82 	bl	8017664 <std>
 8017760:	68a0      	ldr	r0, [r4, #8]
 8017762:	2201      	movs	r2, #1
 8017764:	2109      	movs	r1, #9
 8017766:	f7ff ff7d 	bl	8017664 <std>
 801776a:	68e0      	ldr	r0, [r4, #12]
 801776c:	2202      	movs	r2, #2
 801776e:	2112      	movs	r1, #18
 8017770:	f7ff ff78 	bl	8017664 <std>
 8017774:	2301      	movs	r3, #1
 8017776:	61a3      	str	r3, [r4, #24]
 8017778:	e7d2      	b.n	8017720 <__sinit+0xc>
 801777a:	bf00      	nop
 801777c:	08019e30 	.word	0x08019e30
 8017780:	080176ad 	.word	0x080176ad

08017784 <__sfp>:
 8017784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017786:	4607      	mov	r7, r0
 8017788:	f7ff ffac 	bl	80176e4 <__sfp_lock_acquire>
 801778c:	4b1e      	ldr	r3, [pc, #120]	; (8017808 <__sfp+0x84>)
 801778e:	681e      	ldr	r6, [r3, #0]
 8017790:	69b3      	ldr	r3, [r6, #24]
 8017792:	b913      	cbnz	r3, 801779a <__sfp+0x16>
 8017794:	4630      	mov	r0, r6
 8017796:	f7ff ffbd 	bl	8017714 <__sinit>
 801779a:	3648      	adds	r6, #72	; 0x48
 801779c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80177a0:	3b01      	subs	r3, #1
 80177a2:	d503      	bpl.n	80177ac <__sfp+0x28>
 80177a4:	6833      	ldr	r3, [r6, #0]
 80177a6:	b30b      	cbz	r3, 80177ec <__sfp+0x68>
 80177a8:	6836      	ldr	r6, [r6, #0]
 80177aa:	e7f7      	b.n	801779c <__sfp+0x18>
 80177ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80177b0:	b9d5      	cbnz	r5, 80177e8 <__sfp+0x64>
 80177b2:	4b16      	ldr	r3, [pc, #88]	; (801780c <__sfp+0x88>)
 80177b4:	60e3      	str	r3, [r4, #12]
 80177b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80177ba:	6665      	str	r5, [r4, #100]	; 0x64
 80177bc:	f7ff faca 	bl	8016d54 <__retarget_lock_init_recursive>
 80177c0:	f7ff ff96 	bl	80176f0 <__sfp_lock_release>
 80177c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80177c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80177cc:	6025      	str	r5, [r4, #0]
 80177ce:	61a5      	str	r5, [r4, #24]
 80177d0:	2208      	movs	r2, #8
 80177d2:	4629      	mov	r1, r5
 80177d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80177d8:	f7ff faf8 	bl	8016dcc <memset>
 80177dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80177e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80177e4:	4620      	mov	r0, r4
 80177e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177e8:	3468      	adds	r4, #104	; 0x68
 80177ea:	e7d9      	b.n	80177a0 <__sfp+0x1c>
 80177ec:	2104      	movs	r1, #4
 80177ee:	4638      	mov	r0, r7
 80177f0:	f7ff ff62 	bl	80176b8 <__sfmoreglue>
 80177f4:	4604      	mov	r4, r0
 80177f6:	6030      	str	r0, [r6, #0]
 80177f8:	2800      	cmp	r0, #0
 80177fa:	d1d5      	bne.n	80177a8 <__sfp+0x24>
 80177fc:	f7ff ff78 	bl	80176f0 <__sfp_lock_release>
 8017800:	230c      	movs	r3, #12
 8017802:	603b      	str	r3, [r7, #0]
 8017804:	e7ee      	b.n	80177e4 <__sfp+0x60>
 8017806:	bf00      	nop
 8017808:	08019e30 	.word	0x08019e30
 801780c:	ffff0001 	.word	0xffff0001

08017810 <fiprintf>:
 8017810:	b40e      	push	{r1, r2, r3}
 8017812:	b503      	push	{r0, r1, lr}
 8017814:	4601      	mov	r1, r0
 8017816:	ab03      	add	r3, sp, #12
 8017818:	4805      	ldr	r0, [pc, #20]	; (8017830 <fiprintf+0x20>)
 801781a:	f853 2b04 	ldr.w	r2, [r3], #4
 801781e:	6800      	ldr	r0, [r0, #0]
 8017820:	9301      	str	r3, [sp, #4]
 8017822:	f000 fa43 	bl	8017cac <_vfiprintf_r>
 8017826:	b002      	add	sp, #8
 8017828:	f85d eb04 	ldr.w	lr, [sp], #4
 801782c:	b003      	add	sp, #12
 801782e:	4770      	bx	lr
 8017830:	20000140 	.word	0x20000140

08017834 <_fwalk_reent>:
 8017834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017838:	4606      	mov	r6, r0
 801783a:	4688      	mov	r8, r1
 801783c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017840:	2700      	movs	r7, #0
 8017842:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017846:	f1b9 0901 	subs.w	r9, r9, #1
 801784a:	d505      	bpl.n	8017858 <_fwalk_reent+0x24>
 801784c:	6824      	ldr	r4, [r4, #0]
 801784e:	2c00      	cmp	r4, #0
 8017850:	d1f7      	bne.n	8017842 <_fwalk_reent+0xe>
 8017852:	4638      	mov	r0, r7
 8017854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017858:	89ab      	ldrh	r3, [r5, #12]
 801785a:	2b01      	cmp	r3, #1
 801785c:	d907      	bls.n	801786e <_fwalk_reent+0x3a>
 801785e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017862:	3301      	adds	r3, #1
 8017864:	d003      	beq.n	801786e <_fwalk_reent+0x3a>
 8017866:	4629      	mov	r1, r5
 8017868:	4630      	mov	r0, r6
 801786a:	47c0      	blx	r8
 801786c:	4307      	orrs	r7, r0
 801786e:	3568      	adds	r5, #104	; 0x68
 8017870:	e7e9      	b.n	8017846 <_fwalk_reent+0x12>

08017872 <__swhatbuf_r>:
 8017872:	b570      	push	{r4, r5, r6, lr}
 8017874:	460e      	mov	r6, r1
 8017876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801787a:	2900      	cmp	r1, #0
 801787c:	b096      	sub	sp, #88	; 0x58
 801787e:	4614      	mov	r4, r2
 8017880:	461d      	mov	r5, r3
 8017882:	da07      	bge.n	8017894 <__swhatbuf_r+0x22>
 8017884:	2300      	movs	r3, #0
 8017886:	602b      	str	r3, [r5, #0]
 8017888:	89b3      	ldrh	r3, [r6, #12]
 801788a:	061a      	lsls	r2, r3, #24
 801788c:	d410      	bmi.n	80178b0 <__swhatbuf_r+0x3e>
 801788e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017892:	e00e      	b.n	80178b2 <__swhatbuf_r+0x40>
 8017894:	466a      	mov	r2, sp
 8017896:	f000 fd3b 	bl	8018310 <_fstat_r>
 801789a:	2800      	cmp	r0, #0
 801789c:	dbf2      	blt.n	8017884 <__swhatbuf_r+0x12>
 801789e:	9a01      	ldr	r2, [sp, #4]
 80178a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80178a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80178a8:	425a      	negs	r2, r3
 80178aa:	415a      	adcs	r2, r3
 80178ac:	602a      	str	r2, [r5, #0]
 80178ae:	e7ee      	b.n	801788e <__swhatbuf_r+0x1c>
 80178b0:	2340      	movs	r3, #64	; 0x40
 80178b2:	2000      	movs	r0, #0
 80178b4:	6023      	str	r3, [r4, #0]
 80178b6:	b016      	add	sp, #88	; 0x58
 80178b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080178bc <__smakebuf_r>:
 80178bc:	898b      	ldrh	r3, [r1, #12]
 80178be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80178c0:	079d      	lsls	r5, r3, #30
 80178c2:	4606      	mov	r6, r0
 80178c4:	460c      	mov	r4, r1
 80178c6:	d507      	bpl.n	80178d8 <__smakebuf_r+0x1c>
 80178c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80178cc:	6023      	str	r3, [r4, #0]
 80178ce:	6123      	str	r3, [r4, #16]
 80178d0:	2301      	movs	r3, #1
 80178d2:	6163      	str	r3, [r4, #20]
 80178d4:	b002      	add	sp, #8
 80178d6:	bd70      	pop	{r4, r5, r6, pc}
 80178d8:	ab01      	add	r3, sp, #4
 80178da:	466a      	mov	r2, sp
 80178dc:	f7ff ffc9 	bl	8017872 <__swhatbuf_r>
 80178e0:	9900      	ldr	r1, [sp, #0]
 80178e2:	4605      	mov	r5, r0
 80178e4:	4630      	mov	r0, r6
 80178e6:	f7ff fad9 	bl	8016e9c <_malloc_r>
 80178ea:	b948      	cbnz	r0, 8017900 <__smakebuf_r+0x44>
 80178ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178f0:	059a      	lsls	r2, r3, #22
 80178f2:	d4ef      	bmi.n	80178d4 <__smakebuf_r+0x18>
 80178f4:	f023 0303 	bic.w	r3, r3, #3
 80178f8:	f043 0302 	orr.w	r3, r3, #2
 80178fc:	81a3      	strh	r3, [r4, #12]
 80178fe:	e7e3      	b.n	80178c8 <__smakebuf_r+0xc>
 8017900:	4b0d      	ldr	r3, [pc, #52]	; (8017938 <__smakebuf_r+0x7c>)
 8017902:	62b3      	str	r3, [r6, #40]	; 0x28
 8017904:	89a3      	ldrh	r3, [r4, #12]
 8017906:	6020      	str	r0, [r4, #0]
 8017908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801790c:	81a3      	strh	r3, [r4, #12]
 801790e:	9b00      	ldr	r3, [sp, #0]
 8017910:	6163      	str	r3, [r4, #20]
 8017912:	9b01      	ldr	r3, [sp, #4]
 8017914:	6120      	str	r0, [r4, #16]
 8017916:	b15b      	cbz	r3, 8017930 <__smakebuf_r+0x74>
 8017918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801791c:	4630      	mov	r0, r6
 801791e:	f000 fd09 	bl	8018334 <_isatty_r>
 8017922:	b128      	cbz	r0, 8017930 <__smakebuf_r+0x74>
 8017924:	89a3      	ldrh	r3, [r4, #12]
 8017926:	f023 0303 	bic.w	r3, r3, #3
 801792a:	f043 0301 	orr.w	r3, r3, #1
 801792e:	81a3      	strh	r3, [r4, #12]
 8017930:	89a0      	ldrh	r0, [r4, #12]
 8017932:	4305      	orrs	r5, r0
 8017934:	81a5      	strh	r5, [r4, #12]
 8017936:	e7cd      	b.n	80178d4 <__smakebuf_r+0x18>
 8017938:	080176ad 	.word	0x080176ad

0801793c <__malloc_lock>:
 801793c:	4801      	ldr	r0, [pc, #4]	; (8017944 <__malloc_lock+0x8>)
 801793e:	f7ff ba0a 	b.w	8016d56 <__retarget_lock_acquire_recursive>
 8017942:	bf00      	nop
 8017944:	20015bdc 	.word	0x20015bdc

08017948 <__malloc_unlock>:
 8017948:	4801      	ldr	r0, [pc, #4]	; (8017950 <__malloc_unlock+0x8>)
 801794a:	f7ff ba05 	b.w	8016d58 <__retarget_lock_release_recursive>
 801794e:	bf00      	nop
 8017950:	20015bdc 	.word	0x20015bdc

08017954 <_realloc_r>:
 8017954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017956:	4607      	mov	r7, r0
 8017958:	4614      	mov	r4, r2
 801795a:	460e      	mov	r6, r1
 801795c:	b921      	cbnz	r1, 8017968 <_realloc_r+0x14>
 801795e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017962:	4611      	mov	r1, r2
 8017964:	f7ff ba9a 	b.w	8016e9c <_malloc_r>
 8017968:	b922      	cbnz	r2, 8017974 <_realloc_r+0x20>
 801796a:	f7ff fa47 	bl	8016dfc <_free_r>
 801796e:	4625      	mov	r5, r4
 8017970:	4628      	mov	r0, r5
 8017972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017974:	f000 fd00 	bl	8018378 <_malloc_usable_size_r>
 8017978:	42a0      	cmp	r0, r4
 801797a:	d20f      	bcs.n	801799c <_realloc_r+0x48>
 801797c:	4621      	mov	r1, r4
 801797e:	4638      	mov	r0, r7
 8017980:	f7ff fa8c 	bl	8016e9c <_malloc_r>
 8017984:	4605      	mov	r5, r0
 8017986:	2800      	cmp	r0, #0
 8017988:	d0f2      	beq.n	8017970 <_realloc_r+0x1c>
 801798a:	4631      	mov	r1, r6
 801798c:	4622      	mov	r2, r4
 801798e:	f7ff f9f5 	bl	8016d7c <memcpy>
 8017992:	4631      	mov	r1, r6
 8017994:	4638      	mov	r0, r7
 8017996:	f7ff fa31 	bl	8016dfc <_free_r>
 801799a:	e7e9      	b.n	8017970 <_realloc_r+0x1c>
 801799c:	4635      	mov	r5, r6
 801799e:	e7e7      	b.n	8017970 <_realloc_r+0x1c>

080179a0 <__ssputs_r>:
 80179a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179a4:	688e      	ldr	r6, [r1, #8]
 80179a6:	429e      	cmp	r6, r3
 80179a8:	4682      	mov	sl, r0
 80179aa:	460c      	mov	r4, r1
 80179ac:	4690      	mov	r8, r2
 80179ae:	461f      	mov	r7, r3
 80179b0:	d838      	bhi.n	8017a24 <__ssputs_r+0x84>
 80179b2:	898a      	ldrh	r2, [r1, #12]
 80179b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80179b8:	d032      	beq.n	8017a20 <__ssputs_r+0x80>
 80179ba:	6825      	ldr	r5, [r4, #0]
 80179bc:	6909      	ldr	r1, [r1, #16]
 80179be:	eba5 0901 	sub.w	r9, r5, r1
 80179c2:	6965      	ldr	r5, [r4, #20]
 80179c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80179c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80179cc:	3301      	adds	r3, #1
 80179ce:	444b      	add	r3, r9
 80179d0:	106d      	asrs	r5, r5, #1
 80179d2:	429d      	cmp	r5, r3
 80179d4:	bf38      	it	cc
 80179d6:	461d      	movcc	r5, r3
 80179d8:	0553      	lsls	r3, r2, #21
 80179da:	d531      	bpl.n	8017a40 <__ssputs_r+0xa0>
 80179dc:	4629      	mov	r1, r5
 80179de:	f7ff fa5d 	bl	8016e9c <_malloc_r>
 80179e2:	4606      	mov	r6, r0
 80179e4:	b950      	cbnz	r0, 80179fc <__ssputs_r+0x5c>
 80179e6:	230c      	movs	r3, #12
 80179e8:	f8ca 3000 	str.w	r3, [sl]
 80179ec:	89a3      	ldrh	r3, [r4, #12]
 80179ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179f2:	81a3      	strh	r3, [r4, #12]
 80179f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80179f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179fc:	6921      	ldr	r1, [r4, #16]
 80179fe:	464a      	mov	r2, r9
 8017a00:	f7ff f9bc 	bl	8016d7c <memcpy>
 8017a04:	89a3      	ldrh	r3, [r4, #12]
 8017a06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a0e:	81a3      	strh	r3, [r4, #12]
 8017a10:	6126      	str	r6, [r4, #16]
 8017a12:	6165      	str	r5, [r4, #20]
 8017a14:	444e      	add	r6, r9
 8017a16:	eba5 0509 	sub.w	r5, r5, r9
 8017a1a:	6026      	str	r6, [r4, #0]
 8017a1c:	60a5      	str	r5, [r4, #8]
 8017a1e:	463e      	mov	r6, r7
 8017a20:	42be      	cmp	r6, r7
 8017a22:	d900      	bls.n	8017a26 <__ssputs_r+0x86>
 8017a24:	463e      	mov	r6, r7
 8017a26:	4632      	mov	r2, r6
 8017a28:	6820      	ldr	r0, [r4, #0]
 8017a2a:	4641      	mov	r1, r8
 8017a2c:	f7ff f9b4 	bl	8016d98 <memmove>
 8017a30:	68a3      	ldr	r3, [r4, #8]
 8017a32:	6822      	ldr	r2, [r4, #0]
 8017a34:	1b9b      	subs	r3, r3, r6
 8017a36:	4432      	add	r2, r6
 8017a38:	60a3      	str	r3, [r4, #8]
 8017a3a:	6022      	str	r2, [r4, #0]
 8017a3c:	2000      	movs	r0, #0
 8017a3e:	e7db      	b.n	80179f8 <__ssputs_r+0x58>
 8017a40:	462a      	mov	r2, r5
 8017a42:	f7ff ff87 	bl	8017954 <_realloc_r>
 8017a46:	4606      	mov	r6, r0
 8017a48:	2800      	cmp	r0, #0
 8017a4a:	d1e1      	bne.n	8017a10 <__ssputs_r+0x70>
 8017a4c:	6921      	ldr	r1, [r4, #16]
 8017a4e:	4650      	mov	r0, sl
 8017a50:	f7ff f9d4 	bl	8016dfc <_free_r>
 8017a54:	e7c7      	b.n	80179e6 <__ssputs_r+0x46>
	...

08017a58 <_svfiprintf_r>:
 8017a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a5c:	4698      	mov	r8, r3
 8017a5e:	898b      	ldrh	r3, [r1, #12]
 8017a60:	061b      	lsls	r3, r3, #24
 8017a62:	b09d      	sub	sp, #116	; 0x74
 8017a64:	4607      	mov	r7, r0
 8017a66:	460d      	mov	r5, r1
 8017a68:	4614      	mov	r4, r2
 8017a6a:	d50e      	bpl.n	8017a8a <_svfiprintf_r+0x32>
 8017a6c:	690b      	ldr	r3, [r1, #16]
 8017a6e:	b963      	cbnz	r3, 8017a8a <_svfiprintf_r+0x32>
 8017a70:	2140      	movs	r1, #64	; 0x40
 8017a72:	f7ff fa13 	bl	8016e9c <_malloc_r>
 8017a76:	6028      	str	r0, [r5, #0]
 8017a78:	6128      	str	r0, [r5, #16]
 8017a7a:	b920      	cbnz	r0, 8017a86 <_svfiprintf_r+0x2e>
 8017a7c:	230c      	movs	r3, #12
 8017a7e:	603b      	str	r3, [r7, #0]
 8017a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017a84:	e0d1      	b.n	8017c2a <_svfiprintf_r+0x1d2>
 8017a86:	2340      	movs	r3, #64	; 0x40
 8017a88:	616b      	str	r3, [r5, #20]
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8017a8e:	2320      	movs	r3, #32
 8017a90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017a94:	f8cd 800c 	str.w	r8, [sp, #12]
 8017a98:	2330      	movs	r3, #48	; 0x30
 8017a9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017c44 <_svfiprintf_r+0x1ec>
 8017a9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017aa2:	f04f 0901 	mov.w	r9, #1
 8017aa6:	4623      	mov	r3, r4
 8017aa8:	469a      	mov	sl, r3
 8017aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017aae:	b10a      	cbz	r2, 8017ab4 <_svfiprintf_r+0x5c>
 8017ab0:	2a25      	cmp	r2, #37	; 0x25
 8017ab2:	d1f9      	bne.n	8017aa8 <_svfiprintf_r+0x50>
 8017ab4:	ebba 0b04 	subs.w	fp, sl, r4
 8017ab8:	d00b      	beq.n	8017ad2 <_svfiprintf_r+0x7a>
 8017aba:	465b      	mov	r3, fp
 8017abc:	4622      	mov	r2, r4
 8017abe:	4629      	mov	r1, r5
 8017ac0:	4638      	mov	r0, r7
 8017ac2:	f7ff ff6d 	bl	80179a0 <__ssputs_r>
 8017ac6:	3001      	adds	r0, #1
 8017ac8:	f000 80aa 	beq.w	8017c20 <_svfiprintf_r+0x1c8>
 8017acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017ace:	445a      	add	r2, fp
 8017ad0:	9209      	str	r2, [sp, #36]	; 0x24
 8017ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	f000 80a2 	beq.w	8017c20 <_svfiprintf_r+0x1c8>
 8017adc:	2300      	movs	r3, #0
 8017ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ae6:	f10a 0a01 	add.w	sl, sl, #1
 8017aea:	9304      	str	r3, [sp, #16]
 8017aec:	9307      	str	r3, [sp, #28]
 8017aee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017af2:	931a      	str	r3, [sp, #104]	; 0x68
 8017af4:	4654      	mov	r4, sl
 8017af6:	2205      	movs	r2, #5
 8017af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017afc:	4851      	ldr	r0, [pc, #324]	; (8017c44 <_svfiprintf_r+0x1ec>)
 8017afe:	f7e8 fb7f 	bl	8000200 <memchr>
 8017b02:	9a04      	ldr	r2, [sp, #16]
 8017b04:	b9d8      	cbnz	r0, 8017b3e <_svfiprintf_r+0xe6>
 8017b06:	06d0      	lsls	r0, r2, #27
 8017b08:	bf44      	itt	mi
 8017b0a:	2320      	movmi	r3, #32
 8017b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b10:	0711      	lsls	r1, r2, #28
 8017b12:	bf44      	itt	mi
 8017b14:	232b      	movmi	r3, #43	; 0x2b
 8017b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8017b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8017b20:	d015      	beq.n	8017b4e <_svfiprintf_r+0xf6>
 8017b22:	9a07      	ldr	r2, [sp, #28]
 8017b24:	4654      	mov	r4, sl
 8017b26:	2000      	movs	r0, #0
 8017b28:	f04f 0c0a 	mov.w	ip, #10
 8017b2c:	4621      	mov	r1, r4
 8017b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b32:	3b30      	subs	r3, #48	; 0x30
 8017b34:	2b09      	cmp	r3, #9
 8017b36:	d94e      	bls.n	8017bd6 <_svfiprintf_r+0x17e>
 8017b38:	b1b0      	cbz	r0, 8017b68 <_svfiprintf_r+0x110>
 8017b3a:	9207      	str	r2, [sp, #28]
 8017b3c:	e014      	b.n	8017b68 <_svfiprintf_r+0x110>
 8017b3e:	eba0 0308 	sub.w	r3, r0, r8
 8017b42:	fa09 f303 	lsl.w	r3, r9, r3
 8017b46:	4313      	orrs	r3, r2
 8017b48:	9304      	str	r3, [sp, #16]
 8017b4a:	46a2      	mov	sl, r4
 8017b4c:	e7d2      	b.n	8017af4 <_svfiprintf_r+0x9c>
 8017b4e:	9b03      	ldr	r3, [sp, #12]
 8017b50:	1d19      	adds	r1, r3, #4
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	9103      	str	r1, [sp, #12]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	bfbb      	ittet	lt
 8017b5a:	425b      	neglt	r3, r3
 8017b5c:	f042 0202 	orrlt.w	r2, r2, #2
 8017b60:	9307      	strge	r3, [sp, #28]
 8017b62:	9307      	strlt	r3, [sp, #28]
 8017b64:	bfb8      	it	lt
 8017b66:	9204      	strlt	r2, [sp, #16]
 8017b68:	7823      	ldrb	r3, [r4, #0]
 8017b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8017b6c:	d10c      	bne.n	8017b88 <_svfiprintf_r+0x130>
 8017b6e:	7863      	ldrb	r3, [r4, #1]
 8017b70:	2b2a      	cmp	r3, #42	; 0x2a
 8017b72:	d135      	bne.n	8017be0 <_svfiprintf_r+0x188>
 8017b74:	9b03      	ldr	r3, [sp, #12]
 8017b76:	1d1a      	adds	r2, r3, #4
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	9203      	str	r2, [sp, #12]
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	bfb8      	it	lt
 8017b80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017b84:	3402      	adds	r4, #2
 8017b86:	9305      	str	r3, [sp, #20]
 8017b88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017c54 <_svfiprintf_r+0x1fc>
 8017b8c:	7821      	ldrb	r1, [r4, #0]
 8017b8e:	2203      	movs	r2, #3
 8017b90:	4650      	mov	r0, sl
 8017b92:	f7e8 fb35 	bl	8000200 <memchr>
 8017b96:	b140      	cbz	r0, 8017baa <_svfiprintf_r+0x152>
 8017b98:	2340      	movs	r3, #64	; 0x40
 8017b9a:	eba0 000a 	sub.w	r0, r0, sl
 8017b9e:	fa03 f000 	lsl.w	r0, r3, r0
 8017ba2:	9b04      	ldr	r3, [sp, #16]
 8017ba4:	4303      	orrs	r3, r0
 8017ba6:	3401      	adds	r4, #1
 8017ba8:	9304      	str	r3, [sp, #16]
 8017baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bae:	4826      	ldr	r0, [pc, #152]	; (8017c48 <_svfiprintf_r+0x1f0>)
 8017bb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017bb4:	2206      	movs	r2, #6
 8017bb6:	f7e8 fb23 	bl	8000200 <memchr>
 8017bba:	2800      	cmp	r0, #0
 8017bbc:	d038      	beq.n	8017c30 <_svfiprintf_r+0x1d8>
 8017bbe:	4b23      	ldr	r3, [pc, #140]	; (8017c4c <_svfiprintf_r+0x1f4>)
 8017bc0:	bb1b      	cbnz	r3, 8017c0a <_svfiprintf_r+0x1b2>
 8017bc2:	9b03      	ldr	r3, [sp, #12]
 8017bc4:	3307      	adds	r3, #7
 8017bc6:	f023 0307 	bic.w	r3, r3, #7
 8017bca:	3308      	adds	r3, #8
 8017bcc:	9303      	str	r3, [sp, #12]
 8017bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bd0:	4433      	add	r3, r6
 8017bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8017bd4:	e767      	b.n	8017aa6 <_svfiprintf_r+0x4e>
 8017bd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8017bda:	460c      	mov	r4, r1
 8017bdc:	2001      	movs	r0, #1
 8017bde:	e7a5      	b.n	8017b2c <_svfiprintf_r+0xd4>
 8017be0:	2300      	movs	r3, #0
 8017be2:	3401      	adds	r4, #1
 8017be4:	9305      	str	r3, [sp, #20]
 8017be6:	4619      	mov	r1, r3
 8017be8:	f04f 0c0a 	mov.w	ip, #10
 8017bec:	4620      	mov	r0, r4
 8017bee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017bf2:	3a30      	subs	r2, #48	; 0x30
 8017bf4:	2a09      	cmp	r2, #9
 8017bf6:	d903      	bls.n	8017c00 <_svfiprintf_r+0x1a8>
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d0c5      	beq.n	8017b88 <_svfiprintf_r+0x130>
 8017bfc:	9105      	str	r1, [sp, #20]
 8017bfe:	e7c3      	b.n	8017b88 <_svfiprintf_r+0x130>
 8017c00:	fb0c 2101 	mla	r1, ip, r1, r2
 8017c04:	4604      	mov	r4, r0
 8017c06:	2301      	movs	r3, #1
 8017c08:	e7f0      	b.n	8017bec <_svfiprintf_r+0x194>
 8017c0a:	ab03      	add	r3, sp, #12
 8017c0c:	9300      	str	r3, [sp, #0]
 8017c0e:	462a      	mov	r2, r5
 8017c10:	4b0f      	ldr	r3, [pc, #60]	; (8017c50 <_svfiprintf_r+0x1f8>)
 8017c12:	a904      	add	r1, sp, #16
 8017c14:	4638      	mov	r0, r7
 8017c16:	f3af 8000 	nop.w
 8017c1a:	1c42      	adds	r2, r0, #1
 8017c1c:	4606      	mov	r6, r0
 8017c1e:	d1d6      	bne.n	8017bce <_svfiprintf_r+0x176>
 8017c20:	89ab      	ldrh	r3, [r5, #12]
 8017c22:	065b      	lsls	r3, r3, #25
 8017c24:	f53f af2c 	bmi.w	8017a80 <_svfiprintf_r+0x28>
 8017c28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017c2a:	b01d      	add	sp, #116	; 0x74
 8017c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c30:	ab03      	add	r3, sp, #12
 8017c32:	9300      	str	r3, [sp, #0]
 8017c34:	462a      	mov	r2, r5
 8017c36:	4b06      	ldr	r3, [pc, #24]	; (8017c50 <_svfiprintf_r+0x1f8>)
 8017c38:	a904      	add	r1, sp, #16
 8017c3a:	4638      	mov	r0, r7
 8017c3c:	f000 f9d4 	bl	8017fe8 <_printf_i>
 8017c40:	e7eb      	b.n	8017c1a <_svfiprintf_r+0x1c2>
 8017c42:	bf00      	nop
 8017c44:	08019f48 	.word	0x08019f48
 8017c48:	08019f52 	.word	0x08019f52
 8017c4c:	00000000 	.word	0x00000000
 8017c50:	080179a1 	.word	0x080179a1
 8017c54:	08019f4e 	.word	0x08019f4e

08017c58 <__sfputc_r>:
 8017c58:	6893      	ldr	r3, [r2, #8]
 8017c5a:	3b01      	subs	r3, #1
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	b410      	push	{r4}
 8017c60:	6093      	str	r3, [r2, #8]
 8017c62:	da08      	bge.n	8017c76 <__sfputc_r+0x1e>
 8017c64:	6994      	ldr	r4, [r2, #24]
 8017c66:	42a3      	cmp	r3, r4
 8017c68:	db01      	blt.n	8017c6e <__sfputc_r+0x16>
 8017c6a:	290a      	cmp	r1, #10
 8017c6c:	d103      	bne.n	8017c76 <__sfputc_r+0x1e>
 8017c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c72:	f7ff bb4b 	b.w	801730c <__swbuf_r>
 8017c76:	6813      	ldr	r3, [r2, #0]
 8017c78:	1c58      	adds	r0, r3, #1
 8017c7a:	6010      	str	r0, [r2, #0]
 8017c7c:	7019      	strb	r1, [r3, #0]
 8017c7e:	4608      	mov	r0, r1
 8017c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c84:	4770      	bx	lr

08017c86 <__sfputs_r>:
 8017c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c88:	4606      	mov	r6, r0
 8017c8a:	460f      	mov	r7, r1
 8017c8c:	4614      	mov	r4, r2
 8017c8e:	18d5      	adds	r5, r2, r3
 8017c90:	42ac      	cmp	r4, r5
 8017c92:	d101      	bne.n	8017c98 <__sfputs_r+0x12>
 8017c94:	2000      	movs	r0, #0
 8017c96:	e007      	b.n	8017ca8 <__sfputs_r+0x22>
 8017c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c9c:	463a      	mov	r2, r7
 8017c9e:	4630      	mov	r0, r6
 8017ca0:	f7ff ffda 	bl	8017c58 <__sfputc_r>
 8017ca4:	1c43      	adds	r3, r0, #1
 8017ca6:	d1f3      	bne.n	8017c90 <__sfputs_r+0xa>
 8017ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017cac <_vfiprintf_r>:
 8017cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cb0:	460d      	mov	r5, r1
 8017cb2:	b09d      	sub	sp, #116	; 0x74
 8017cb4:	4614      	mov	r4, r2
 8017cb6:	4698      	mov	r8, r3
 8017cb8:	4606      	mov	r6, r0
 8017cba:	b118      	cbz	r0, 8017cc4 <_vfiprintf_r+0x18>
 8017cbc:	6983      	ldr	r3, [r0, #24]
 8017cbe:	b90b      	cbnz	r3, 8017cc4 <_vfiprintf_r+0x18>
 8017cc0:	f7ff fd28 	bl	8017714 <__sinit>
 8017cc4:	4b89      	ldr	r3, [pc, #548]	; (8017eec <_vfiprintf_r+0x240>)
 8017cc6:	429d      	cmp	r5, r3
 8017cc8:	d11b      	bne.n	8017d02 <_vfiprintf_r+0x56>
 8017cca:	6875      	ldr	r5, [r6, #4]
 8017ccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017cce:	07d9      	lsls	r1, r3, #31
 8017cd0:	d405      	bmi.n	8017cde <_vfiprintf_r+0x32>
 8017cd2:	89ab      	ldrh	r3, [r5, #12]
 8017cd4:	059a      	lsls	r2, r3, #22
 8017cd6:	d402      	bmi.n	8017cde <_vfiprintf_r+0x32>
 8017cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017cda:	f7ff f83c 	bl	8016d56 <__retarget_lock_acquire_recursive>
 8017cde:	89ab      	ldrh	r3, [r5, #12]
 8017ce0:	071b      	lsls	r3, r3, #28
 8017ce2:	d501      	bpl.n	8017ce8 <_vfiprintf_r+0x3c>
 8017ce4:	692b      	ldr	r3, [r5, #16]
 8017ce6:	b9eb      	cbnz	r3, 8017d24 <_vfiprintf_r+0x78>
 8017ce8:	4629      	mov	r1, r5
 8017cea:	4630      	mov	r0, r6
 8017cec:	f7ff fb60 	bl	80173b0 <__swsetup_r>
 8017cf0:	b1c0      	cbz	r0, 8017d24 <_vfiprintf_r+0x78>
 8017cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017cf4:	07dc      	lsls	r4, r3, #31
 8017cf6:	d50e      	bpl.n	8017d16 <_vfiprintf_r+0x6a>
 8017cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017cfc:	b01d      	add	sp, #116	; 0x74
 8017cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d02:	4b7b      	ldr	r3, [pc, #492]	; (8017ef0 <_vfiprintf_r+0x244>)
 8017d04:	429d      	cmp	r5, r3
 8017d06:	d101      	bne.n	8017d0c <_vfiprintf_r+0x60>
 8017d08:	68b5      	ldr	r5, [r6, #8]
 8017d0a:	e7df      	b.n	8017ccc <_vfiprintf_r+0x20>
 8017d0c:	4b79      	ldr	r3, [pc, #484]	; (8017ef4 <_vfiprintf_r+0x248>)
 8017d0e:	429d      	cmp	r5, r3
 8017d10:	bf08      	it	eq
 8017d12:	68f5      	ldreq	r5, [r6, #12]
 8017d14:	e7da      	b.n	8017ccc <_vfiprintf_r+0x20>
 8017d16:	89ab      	ldrh	r3, [r5, #12]
 8017d18:	0598      	lsls	r0, r3, #22
 8017d1a:	d4ed      	bmi.n	8017cf8 <_vfiprintf_r+0x4c>
 8017d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d1e:	f7ff f81b 	bl	8016d58 <__retarget_lock_release_recursive>
 8017d22:	e7e9      	b.n	8017cf8 <_vfiprintf_r+0x4c>
 8017d24:	2300      	movs	r3, #0
 8017d26:	9309      	str	r3, [sp, #36]	; 0x24
 8017d28:	2320      	movs	r3, #32
 8017d2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017d32:	2330      	movs	r3, #48	; 0x30
 8017d34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017ef8 <_vfiprintf_r+0x24c>
 8017d38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017d3c:	f04f 0901 	mov.w	r9, #1
 8017d40:	4623      	mov	r3, r4
 8017d42:	469a      	mov	sl, r3
 8017d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d48:	b10a      	cbz	r2, 8017d4e <_vfiprintf_r+0xa2>
 8017d4a:	2a25      	cmp	r2, #37	; 0x25
 8017d4c:	d1f9      	bne.n	8017d42 <_vfiprintf_r+0x96>
 8017d4e:	ebba 0b04 	subs.w	fp, sl, r4
 8017d52:	d00b      	beq.n	8017d6c <_vfiprintf_r+0xc0>
 8017d54:	465b      	mov	r3, fp
 8017d56:	4622      	mov	r2, r4
 8017d58:	4629      	mov	r1, r5
 8017d5a:	4630      	mov	r0, r6
 8017d5c:	f7ff ff93 	bl	8017c86 <__sfputs_r>
 8017d60:	3001      	adds	r0, #1
 8017d62:	f000 80aa 	beq.w	8017eba <_vfiprintf_r+0x20e>
 8017d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d68:	445a      	add	r2, fp
 8017d6a:	9209      	str	r2, [sp, #36]	; 0x24
 8017d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	f000 80a2 	beq.w	8017eba <_vfiprintf_r+0x20e>
 8017d76:	2300      	movs	r3, #0
 8017d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017d7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017d80:	f10a 0a01 	add.w	sl, sl, #1
 8017d84:	9304      	str	r3, [sp, #16]
 8017d86:	9307      	str	r3, [sp, #28]
 8017d88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017d8c:	931a      	str	r3, [sp, #104]	; 0x68
 8017d8e:	4654      	mov	r4, sl
 8017d90:	2205      	movs	r2, #5
 8017d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d96:	4858      	ldr	r0, [pc, #352]	; (8017ef8 <_vfiprintf_r+0x24c>)
 8017d98:	f7e8 fa32 	bl	8000200 <memchr>
 8017d9c:	9a04      	ldr	r2, [sp, #16]
 8017d9e:	b9d8      	cbnz	r0, 8017dd8 <_vfiprintf_r+0x12c>
 8017da0:	06d1      	lsls	r1, r2, #27
 8017da2:	bf44      	itt	mi
 8017da4:	2320      	movmi	r3, #32
 8017da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017daa:	0713      	lsls	r3, r2, #28
 8017dac:	bf44      	itt	mi
 8017dae:	232b      	movmi	r3, #43	; 0x2b
 8017db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017db4:	f89a 3000 	ldrb.w	r3, [sl]
 8017db8:	2b2a      	cmp	r3, #42	; 0x2a
 8017dba:	d015      	beq.n	8017de8 <_vfiprintf_r+0x13c>
 8017dbc:	9a07      	ldr	r2, [sp, #28]
 8017dbe:	4654      	mov	r4, sl
 8017dc0:	2000      	movs	r0, #0
 8017dc2:	f04f 0c0a 	mov.w	ip, #10
 8017dc6:	4621      	mov	r1, r4
 8017dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017dcc:	3b30      	subs	r3, #48	; 0x30
 8017dce:	2b09      	cmp	r3, #9
 8017dd0:	d94e      	bls.n	8017e70 <_vfiprintf_r+0x1c4>
 8017dd2:	b1b0      	cbz	r0, 8017e02 <_vfiprintf_r+0x156>
 8017dd4:	9207      	str	r2, [sp, #28]
 8017dd6:	e014      	b.n	8017e02 <_vfiprintf_r+0x156>
 8017dd8:	eba0 0308 	sub.w	r3, r0, r8
 8017ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8017de0:	4313      	orrs	r3, r2
 8017de2:	9304      	str	r3, [sp, #16]
 8017de4:	46a2      	mov	sl, r4
 8017de6:	e7d2      	b.n	8017d8e <_vfiprintf_r+0xe2>
 8017de8:	9b03      	ldr	r3, [sp, #12]
 8017dea:	1d19      	adds	r1, r3, #4
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	9103      	str	r1, [sp, #12]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	bfbb      	ittet	lt
 8017df4:	425b      	neglt	r3, r3
 8017df6:	f042 0202 	orrlt.w	r2, r2, #2
 8017dfa:	9307      	strge	r3, [sp, #28]
 8017dfc:	9307      	strlt	r3, [sp, #28]
 8017dfe:	bfb8      	it	lt
 8017e00:	9204      	strlt	r2, [sp, #16]
 8017e02:	7823      	ldrb	r3, [r4, #0]
 8017e04:	2b2e      	cmp	r3, #46	; 0x2e
 8017e06:	d10c      	bne.n	8017e22 <_vfiprintf_r+0x176>
 8017e08:	7863      	ldrb	r3, [r4, #1]
 8017e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8017e0c:	d135      	bne.n	8017e7a <_vfiprintf_r+0x1ce>
 8017e0e:	9b03      	ldr	r3, [sp, #12]
 8017e10:	1d1a      	adds	r2, r3, #4
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	9203      	str	r2, [sp, #12]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	bfb8      	it	lt
 8017e1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017e1e:	3402      	adds	r4, #2
 8017e20:	9305      	str	r3, [sp, #20]
 8017e22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017f08 <_vfiprintf_r+0x25c>
 8017e26:	7821      	ldrb	r1, [r4, #0]
 8017e28:	2203      	movs	r2, #3
 8017e2a:	4650      	mov	r0, sl
 8017e2c:	f7e8 f9e8 	bl	8000200 <memchr>
 8017e30:	b140      	cbz	r0, 8017e44 <_vfiprintf_r+0x198>
 8017e32:	2340      	movs	r3, #64	; 0x40
 8017e34:	eba0 000a 	sub.w	r0, r0, sl
 8017e38:	fa03 f000 	lsl.w	r0, r3, r0
 8017e3c:	9b04      	ldr	r3, [sp, #16]
 8017e3e:	4303      	orrs	r3, r0
 8017e40:	3401      	adds	r4, #1
 8017e42:	9304      	str	r3, [sp, #16]
 8017e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e48:	482c      	ldr	r0, [pc, #176]	; (8017efc <_vfiprintf_r+0x250>)
 8017e4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017e4e:	2206      	movs	r2, #6
 8017e50:	f7e8 f9d6 	bl	8000200 <memchr>
 8017e54:	2800      	cmp	r0, #0
 8017e56:	d03f      	beq.n	8017ed8 <_vfiprintf_r+0x22c>
 8017e58:	4b29      	ldr	r3, [pc, #164]	; (8017f00 <_vfiprintf_r+0x254>)
 8017e5a:	bb1b      	cbnz	r3, 8017ea4 <_vfiprintf_r+0x1f8>
 8017e5c:	9b03      	ldr	r3, [sp, #12]
 8017e5e:	3307      	adds	r3, #7
 8017e60:	f023 0307 	bic.w	r3, r3, #7
 8017e64:	3308      	adds	r3, #8
 8017e66:	9303      	str	r3, [sp, #12]
 8017e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e6a:	443b      	add	r3, r7
 8017e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8017e6e:	e767      	b.n	8017d40 <_vfiprintf_r+0x94>
 8017e70:	fb0c 3202 	mla	r2, ip, r2, r3
 8017e74:	460c      	mov	r4, r1
 8017e76:	2001      	movs	r0, #1
 8017e78:	e7a5      	b.n	8017dc6 <_vfiprintf_r+0x11a>
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	3401      	adds	r4, #1
 8017e7e:	9305      	str	r3, [sp, #20]
 8017e80:	4619      	mov	r1, r3
 8017e82:	f04f 0c0a 	mov.w	ip, #10
 8017e86:	4620      	mov	r0, r4
 8017e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e8c:	3a30      	subs	r2, #48	; 0x30
 8017e8e:	2a09      	cmp	r2, #9
 8017e90:	d903      	bls.n	8017e9a <_vfiprintf_r+0x1ee>
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d0c5      	beq.n	8017e22 <_vfiprintf_r+0x176>
 8017e96:	9105      	str	r1, [sp, #20]
 8017e98:	e7c3      	b.n	8017e22 <_vfiprintf_r+0x176>
 8017e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e9e:	4604      	mov	r4, r0
 8017ea0:	2301      	movs	r3, #1
 8017ea2:	e7f0      	b.n	8017e86 <_vfiprintf_r+0x1da>
 8017ea4:	ab03      	add	r3, sp, #12
 8017ea6:	9300      	str	r3, [sp, #0]
 8017ea8:	462a      	mov	r2, r5
 8017eaa:	4b16      	ldr	r3, [pc, #88]	; (8017f04 <_vfiprintf_r+0x258>)
 8017eac:	a904      	add	r1, sp, #16
 8017eae:	4630      	mov	r0, r6
 8017eb0:	f3af 8000 	nop.w
 8017eb4:	4607      	mov	r7, r0
 8017eb6:	1c78      	adds	r0, r7, #1
 8017eb8:	d1d6      	bne.n	8017e68 <_vfiprintf_r+0x1bc>
 8017eba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017ebc:	07d9      	lsls	r1, r3, #31
 8017ebe:	d405      	bmi.n	8017ecc <_vfiprintf_r+0x220>
 8017ec0:	89ab      	ldrh	r3, [r5, #12]
 8017ec2:	059a      	lsls	r2, r3, #22
 8017ec4:	d402      	bmi.n	8017ecc <_vfiprintf_r+0x220>
 8017ec6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017ec8:	f7fe ff46 	bl	8016d58 <__retarget_lock_release_recursive>
 8017ecc:	89ab      	ldrh	r3, [r5, #12]
 8017ece:	065b      	lsls	r3, r3, #25
 8017ed0:	f53f af12 	bmi.w	8017cf8 <_vfiprintf_r+0x4c>
 8017ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017ed6:	e711      	b.n	8017cfc <_vfiprintf_r+0x50>
 8017ed8:	ab03      	add	r3, sp, #12
 8017eda:	9300      	str	r3, [sp, #0]
 8017edc:	462a      	mov	r2, r5
 8017ede:	4b09      	ldr	r3, [pc, #36]	; (8017f04 <_vfiprintf_r+0x258>)
 8017ee0:	a904      	add	r1, sp, #16
 8017ee2:	4630      	mov	r0, r6
 8017ee4:	f000 f880 	bl	8017fe8 <_printf_i>
 8017ee8:	e7e4      	b.n	8017eb4 <_vfiprintf_r+0x208>
 8017eea:	bf00      	nop
 8017eec:	08019f08 	.word	0x08019f08
 8017ef0:	08019f28 	.word	0x08019f28
 8017ef4:	08019ee8 	.word	0x08019ee8
 8017ef8:	08019f48 	.word	0x08019f48
 8017efc:	08019f52 	.word	0x08019f52
 8017f00:	00000000 	.word	0x00000000
 8017f04:	08017c87 	.word	0x08017c87
 8017f08:	08019f4e 	.word	0x08019f4e

08017f0c <_printf_common>:
 8017f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f10:	4616      	mov	r6, r2
 8017f12:	4699      	mov	r9, r3
 8017f14:	688a      	ldr	r2, [r1, #8]
 8017f16:	690b      	ldr	r3, [r1, #16]
 8017f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017f1c:	4293      	cmp	r3, r2
 8017f1e:	bfb8      	it	lt
 8017f20:	4613      	movlt	r3, r2
 8017f22:	6033      	str	r3, [r6, #0]
 8017f24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017f28:	4607      	mov	r7, r0
 8017f2a:	460c      	mov	r4, r1
 8017f2c:	b10a      	cbz	r2, 8017f32 <_printf_common+0x26>
 8017f2e:	3301      	adds	r3, #1
 8017f30:	6033      	str	r3, [r6, #0]
 8017f32:	6823      	ldr	r3, [r4, #0]
 8017f34:	0699      	lsls	r1, r3, #26
 8017f36:	bf42      	ittt	mi
 8017f38:	6833      	ldrmi	r3, [r6, #0]
 8017f3a:	3302      	addmi	r3, #2
 8017f3c:	6033      	strmi	r3, [r6, #0]
 8017f3e:	6825      	ldr	r5, [r4, #0]
 8017f40:	f015 0506 	ands.w	r5, r5, #6
 8017f44:	d106      	bne.n	8017f54 <_printf_common+0x48>
 8017f46:	f104 0a19 	add.w	sl, r4, #25
 8017f4a:	68e3      	ldr	r3, [r4, #12]
 8017f4c:	6832      	ldr	r2, [r6, #0]
 8017f4e:	1a9b      	subs	r3, r3, r2
 8017f50:	42ab      	cmp	r3, r5
 8017f52:	dc26      	bgt.n	8017fa2 <_printf_common+0x96>
 8017f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017f58:	1e13      	subs	r3, r2, #0
 8017f5a:	6822      	ldr	r2, [r4, #0]
 8017f5c:	bf18      	it	ne
 8017f5e:	2301      	movne	r3, #1
 8017f60:	0692      	lsls	r2, r2, #26
 8017f62:	d42b      	bmi.n	8017fbc <_printf_common+0xb0>
 8017f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017f68:	4649      	mov	r1, r9
 8017f6a:	4638      	mov	r0, r7
 8017f6c:	47c0      	blx	r8
 8017f6e:	3001      	adds	r0, #1
 8017f70:	d01e      	beq.n	8017fb0 <_printf_common+0xa4>
 8017f72:	6823      	ldr	r3, [r4, #0]
 8017f74:	68e5      	ldr	r5, [r4, #12]
 8017f76:	6832      	ldr	r2, [r6, #0]
 8017f78:	f003 0306 	and.w	r3, r3, #6
 8017f7c:	2b04      	cmp	r3, #4
 8017f7e:	bf08      	it	eq
 8017f80:	1aad      	subeq	r5, r5, r2
 8017f82:	68a3      	ldr	r3, [r4, #8]
 8017f84:	6922      	ldr	r2, [r4, #16]
 8017f86:	bf0c      	ite	eq
 8017f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017f8c:	2500      	movne	r5, #0
 8017f8e:	4293      	cmp	r3, r2
 8017f90:	bfc4      	itt	gt
 8017f92:	1a9b      	subgt	r3, r3, r2
 8017f94:	18ed      	addgt	r5, r5, r3
 8017f96:	2600      	movs	r6, #0
 8017f98:	341a      	adds	r4, #26
 8017f9a:	42b5      	cmp	r5, r6
 8017f9c:	d11a      	bne.n	8017fd4 <_printf_common+0xc8>
 8017f9e:	2000      	movs	r0, #0
 8017fa0:	e008      	b.n	8017fb4 <_printf_common+0xa8>
 8017fa2:	2301      	movs	r3, #1
 8017fa4:	4652      	mov	r2, sl
 8017fa6:	4649      	mov	r1, r9
 8017fa8:	4638      	mov	r0, r7
 8017faa:	47c0      	blx	r8
 8017fac:	3001      	adds	r0, #1
 8017fae:	d103      	bne.n	8017fb8 <_printf_common+0xac>
 8017fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fb8:	3501      	adds	r5, #1
 8017fba:	e7c6      	b.n	8017f4a <_printf_common+0x3e>
 8017fbc:	18e1      	adds	r1, r4, r3
 8017fbe:	1c5a      	adds	r2, r3, #1
 8017fc0:	2030      	movs	r0, #48	; 0x30
 8017fc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017fc6:	4422      	add	r2, r4
 8017fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017fcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017fd0:	3302      	adds	r3, #2
 8017fd2:	e7c7      	b.n	8017f64 <_printf_common+0x58>
 8017fd4:	2301      	movs	r3, #1
 8017fd6:	4622      	mov	r2, r4
 8017fd8:	4649      	mov	r1, r9
 8017fda:	4638      	mov	r0, r7
 8017fdc:	47c0      	blx	r8
 8017fde:	3001      	adds	r0, #1
 8017fe0:	d0e6      	beq.n	8017fb0 <_printf_common+0xa4>
 8017fe2:	3601      	adds	r6, #1
 8017fe4:	e7d9      	b.n	8017f9a <_printf_common+0x8e>
	...

08017fe8 <_printf_i>:
 8017fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017fec:	460c      	mov	r4, r1
 8017fee:	4691      	mov	r9, r2
 8017ff0:	7e27      	ldrb	r7, [r4, #24]
 8017ff2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017ff4:	2f78      	cmp	r7, #120	; 0x78
 8017ff6:	4680      	mov	r8, r0
 8017ff8:	469a      	mov	sl, r3
 8017ffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017ffe:	d807      	bhi.n	8018010 <_printf_i+0x28>
 8018000:	2f62      	cmp	r7, #98	; 0x62
 8018002:	d80a      	bhi.n	801801a <_printf_i+0x32>
 8018004:	2f00      	cmp	r7, #0
 8018006:	f000 80d8 	beq.w	80181ba <_printf_i+0x1d2>
 801800a:	2f58      	cmp	r7, #88	; 0x58
 801800c:	f000 80a3 	beq.w	8018156 <_printf_i+0x16e>
 8018010:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018018:	e03a      	b.n	8018090 <_printf_i+0xa8>
 801801a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801801e:	2b15      	cmp	r3, #21
 8018020:	d8f6      	bhi.n	8018010 <_printf_i+0x28>
 8018022:	a001      	add	r0, pc, #4	; (adr r0, 8018028 <_printf_i+0x40>)
 8018024:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018028:	08018081 	.word	0x08018081
 801802c:	08018095 	.word	0x08018095
 8018030:	08018011 	.word	0x08018011
 8018034:	08018011 	.word	0x08018011
 8018038:	08018011 	.word	0x08018011
 801803c:	08018011 	.word	0x08018011
 8018040:	08018095 	.word	0x08018095
 8018044:	08018011 	.word	0x08018011
 8018048:	08018011 	.word	0x08018011
 801804c:	08018011 	.word	0x08018011
 8018050:	08018011 	.word	0x08018011
 8018054:	080181a1 	.word	0x080181a1
 8018058:	080180c5 	.word	0x080180c5
 801805c:	08018183 	.word	0x08018183
 8018060:	08018011 	.word	0x08018011
 8018064:	08018011 	.word	0x08018011
 8018068:	080181c3 	.word	0x080181c3
 801806c:	08018011 	.word	0x08018011
 8018070:	080180c5 	.word	0x080180c5
 8018074:	08018011 	.word	0x08018011
 8018078:	08018011 	.word	0x08018011
 801807c:	0801818b 	.word	0x0801818b
 8018080:	680b      	ldr	r3, [r1, #0]
 8018082:	1d1a      	adds	r2, r3, #4
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	600a      	str	r2, [r1, #0]
 8018088:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801808c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018090:	2301      	movs	r3, #1
 8018092:	e0a3      	b.n	80181dc <_printf_i+0x1f4>
 8018094:	6825      	ldr	r5, [r4, #0]
 8018096:	6808      	ldr	r0, [r1, #0]
 8018098:	062e      	lsls	r6, r5, #24
 801809a:	f100 0304 	add.w	r3, r0, #4
 801809e:	d50a      	bpl.n	80180b6 <_printf_i+0xce>
 80180a0:	6805      	ldr	r5, [r0, #0]
 80180a2:	600b      	str	r3, [r1, #0]
 80180a4:	2d00      	cmp	r5, #0
 80180a6:	da03      	bge.n	80180b0 <_printf_i+0xc8>
 80180a8:	232d      	movs	r3, #45	; 0x2d
 80180aa:	426d      	negs	r5, r5
 80180ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80180b0:	485e      	ldr	r0, [pc, #376]	; (801822c <_printf_i+0x244>)
 80180b2:	230a      	movs	r3, #10
 80180b4:	e019      	b.n	80180ea <_printf_i+0x102>
 80180b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80180ba:	6805      	ldr	r5, [r0, #0]
 80180bc:	600b      	str	r3, [r1, #0]
 80180be:	bf18      	it	ne
 80180c0:	b22d      	sxthne	r5, r5
 80180c2:	e7ef      	b.n	80180a4 <_printf_i+0xbc>
 80180c4:	680b      	ldr	r3, [r1, #0]
 80180c6:	6825      	ldr	r5, [r4, #0]
 80180c8:	1d18      	adds	r0, r3, #4
 80180ca:	6008      	str	r0, [r1, #0]
 80180cc:	0628      	lsls	r0, r5, #24
 80180ce:	d501      	bpl.n	80180d4 <_printf_i+0xec>
 80180d0:	681d      	ldr	r5, [r3, #0]
 80180d2:	e002      	b.n	80180da <_printf_i+0xf2>
 80180d4:	0669      	lsls	r1, r5, #25
 80180d6:	d5fb      	bpl.n	80180d0 <_printf_i+0xe8>
 80180d8:	881d      	ldrh	r5, [r3, #0]
 80180da:	4854      	ldr	r0, [pc, #336]	; (801822c <_printf_i+0x244>)
 80180dc:	2f6f      	cmp	r7, #111	; 0x6f
 80180de:	bf0c      	ite	eq
 80180e0:	2308      	moveq	r3, #8
 80180e2:	230a      	movne	r3, #10
 80180e4:	2100      	movs	r1, #0
 80180e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80180ea:	6866      	ldr	r6, [r4, #4]
 80180ec:	60a6      	str	r6, [r4, #8]
 80180ee:	2e00      	cmp	r6, #0
 80180f0:	bfa2      	ittt	ge
 80180f2:	6821      	ldrge	r1, [r4, #0]
 80180f4:	f021 0104 	bicge.w	r1, r1, #4
 80180f8:	6021      	strge	r1, [r4, #0]
 80180fa:	b90d      	cbnz	r5, 8018100 <_printf_i+0x118>
 80180fc:	2e00      	cmp	r6, #0
 80180fe:	d04d      	beq.n	801819c <_printf_i+0x1b4>
 8018100:	4616      	mov	r6, r2
 8018102:	fbb5 f1f3 	udiv	r1, r5, r3
 8018106:	fb03 5711 	mls	r7, r3, r1, r5
 801810a:	5dc7      	ldrb	r7, [r0, r7]
 801810c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018110:	462f      	mov	r7, r5
 8018112:	42bb      	cmp	r3, r7
 8018114:	460d      	mov	r5, r1
 8018116:	d9f4      	bls.n	8018102 <_printf_i+0x11a>
 8018118:	2b08      	cmp	r3, #8
 801811a:	d10b      	bne.n	8018134 <_printf_i+0x14c>
 801811c:	6823      	ldr	r3, [r4, #0]
 801811e:	07df      	lsls	r7, r3, #31
 8018120:	d508      	bpl.n	8018134 <_printf_i+0x14c>
 8018122:	6923      	ldr	r3, [r4, #16]
 8018124:	6861      	ldr	r1, [r4, #4]
 8018126:	4299      	cmp	r1, r3
 8018128:	bfde      	ittt	le
 801812a:	2330      	movle	r3, #48	; 0x30
 801812c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018130:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8018134:	1b92      	subs	r2, r2, r6
 8018136:	6122      	str	r2, [r4, #16]
 8018138:	f8cd a000 	str.w	sl, [sp]
 801813c:	464b      	mov	r3, r9
 801813e:	aa03      	add	r2, sp, #12
 8018140:	4621      	mov	r1, r4
 8018142:	4640      	mov	r0, r8
 8018144:	f7ff fee2 	bl	8017f0c <_printf_common>
 8018148:	3001      	adds	r0, #1
 801814a:	d14c      	bne.n	80181e6 <_printf_i+0x1fe>
 801814c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018150:	b004      	add	sp, #16
 8018152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018156:	4835      	ldr	r0, [pc, #212]	; (801822c <_printf_i+0x244>)
 8018158:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801815c:	6823      	ldr	r3, [r4, #0]
 801815e:	680e      	ldr	r6, [r1, #0]
 8018160:	061f      	lsls	r7, r3, #24
 8018162:	f856 5b04 	ldr.w	r5, [r6], #4
 8018166:	600e      	str	r6, [r1, #0]
 8018168:	d514      	bpl.n	8018194 <_printf_i+0x1ac>
 801816a:	07d9      	lsls	r1, r3, #31
 801816c:	bf44      	itt	mi
 801816e:	f043 0320 	orrmi.w	r3, r3, #32
 8018172:	6023      	strmi	r3, [r4, #0]
 8018174:	b91d      	cbnz	r5, 801817e <_printf_i+0x196>
 8018176:	6823      	ldr	r3, [r4, #0]
 8018178:	f023 0320 	bic.w	r3, r3, #32
 801817c:	6023      	str	r3, [r4, #0]
 801817e:	2310      	movs	r3, #16
 8018180:	e7b0      	b.n	80180e4 <_printf_i+0xfc>
 8018182:	6823      	ldr	r3, [r4, #0]
 8018184:	f043 0320 	orr.w	r3, r3, #32
 8018188:	6023      	str	r3, [r4, #0]
 801818a:	2378      	movs	r3, #120	; 0x78
 801818c:	4828      	ldr	r0, [pc, #160]	; (8018230 <_printf_i+0x248>)
 801818e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018192:	e7e3      	b.n	801815c <_printf_i+0x174>
 8018194:	065e      	lsls	r6, r3, #25
 8018196:	bf48      	it	mi
 8018198:	b2ad      	uxthmi	r5, r5
 801819a:	e7e6      	b.n	801816a <_printf_i+0x182>
 801819c:	4616      	mov	r6, r2
 801819e:	e7bb      	b.n	8018118 <_printf_i+0x130>
 80181a0:	680b      	ldr	r3, [r1, #0]
 80181a2:	6826      	ldr	r6, [r4, #0]
 80181a4:	6960      	ldr	r0, [r4, #20]
 80181a6:	1d1d      	adds	r5, r3, #4
 80181a8:	600d      	str	r5, [r1, #0]
 80181aa:	0635      	lsls	r5, r6, #24
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	d501      	bpl.n	80181b4 <_printf_i+0x1cc>
 80181b0:	6018      	str	r0, [r3, #0]
 80181b2:	e002      	b.n	80181ba <_printf_i+0x1d2>
 80181b4:	0671      	lsls	r1, r6, #25
 80181b6:	d5fb      	bpl.n	80181b0 <_printf_i+0x1c8>
 80181b8:	8018      	strh	r0, [r3, #0]
 80181ba:	2300      	movs	r3, #0
 80181bc:	6123      	str	r3, [r4, #16]
 80181be:	4616      	mov	r6, r2
 80181c0:	e7ba      	b.n	8018138 <_printf_i+0x150>
 80181c2:	680b      	ldr	r3, [r1, #0]
 80181c4:	1d1a      	adds	r2, r3, #4
 80181c6:	600a      	str	r2, [r1, #0]
 80181c8:	681e      	ldr	r6, [r3, #0]
 80181ca:	6862      	ldr	r2, [r4, #4]
 80181cc:	2100      	movs	r1, #0
 80181ce:	4630      	mov	r0, r6
 80181d0:	f7e8 f816 	bl	8000200 <memchr>
 80181d4:	b108      	cbz	r0, 80181da <_printf_i+0x1f2>
 80181d6:	1b80      	subs	r0, r0, r6
 80181d8:	6060      	str	r0, [r4, #4]
 80181da:	6863      	ldr	r3, [r4, #4]
 80181dc:	6123      	str	r3, [r4, #16]
 80181de:	2300      	movs	r3, #0
 80181e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80181e4:	e7a8      	b.n	8018138 <_printf_i+0x150>
 80181e6:	6923      	ldr	r3, [r4, #16]
 80181e8:	4632      	mov	r2, r6
 80181ea:	4649      	mov	r1, r9
 80181ec:	4640      	mov	r0, r8
 80181ee:	47d0      	blx	sl
 80181f0:	3001      	adds	r0, #1
 80181f2:	d0ab      	beq.n	801814c <_printf_i+0x164>
 80181f4:	6823      	ldr	r3, [r4, #0]
 80181f6:	079b      	lsls	r3, r3, #30
 80181f8:	d413      	bmi.n	8018222 <_printf_i+0x23a>
 80181fa:	68e0      	ldr	r0, [r4, #12]
 80181fc:	9b03      	ldr	r3, [sp, #12]
 80181fe:	4298      	cmp	r0, r3
 8018200:	bfb8      	it	lt
 8018202:	4618      	movlt	r0, r3
 8018204:	e7a4      	b.n	8018150 <_printf_i+0x168>
 8018206:	2301      	movs	r3, #1
 8018208:	4632      	mov	r2, r6
 801820a:	4649      	mov	r1, r9
 801820c:	4640      	mov	r0, r8
 801820e:	47d0      	blx	sl
 8018210:	3001      	adds	r0, #1
 8018212:	d09b      	beq.n	801814c <_printf_i+0x164>
 8018214:	3501      	adds	r5, #1
 8018216:	68e3      	ldr	r3, [r4, #12]
 8018218:	9903      	ldr	r1, [sp, #12]
 801821a:	1a5b      	subs	r3, r3, r1
 801821c:	42ab      	cmp	r3, r5
 801821e:	dcf2      	bgt.n	8018206 <_printf_i+0x21e>
 8018220:	e7eb      	b.n	80181fa <_printf_i+0x212>
 8018222:	2500      	movs	r5, #0
 8018224:	f104 0619 	add.w	r6, r4, #25
 8018228:	e7f5      	b.n	8018216 <_printf_i+0x22e>
 801822a:	bf00      	nop
 801822c:	08019f59 	.word	0x08019f59
 8018230:	08019f6a 	.word	0x08019f6a

08018234 <__sread>:
 8018234:	b510      	push	{r4, lr}
 8018236:	460c      	mov	r4, r1
 8018238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801823c:	f000 f8a4 	bl	8018388 <_read_r>
 8018240:	2800      	cmp	r0, #0
 8018242:	bfab      	itete	ge
 8018244:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018246:	89a3      	ldrhlt	r3, [r4, #12]
 8018248:	181b      	addge	r3, r3, r0
 801824a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801824e:	bfac      	ite	ge
 8018250:	6563      	strge	r3, [r4, #84]	; 0x54
 8018252:	81a3      	strhlt	r3, [r4, #12]
 8018254:	bd10      	pop	{r4, pc}

08018256 <__swrite>:
 8018256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801825a:	461f      	mov	r7, r3
 801825c:	898b      	ldrh	r3, [r1, #12]
 801825e:	05db      	lsls	r3, r3, #23
 8018260:	4605      	mov	r5, r0
 8018262:	460c      	mov	r4, r1
 8018264:	4616      	mov	r6, r2
 8018266:	d505      	bpl.n	8018274 <__swrite+0x1e>
 8018268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801826c:	2302      	movs	r3, #2
 801826e:	2200      	movs	r2, #0
 8018270:	f000 f870 	bl	8018354 <_lseek_r>
 8018274:	89a3      	ldrh	r3, [r4, #12]
 8018276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801827a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801827e:	81a3      	strh	r3, [r4, #12]
 8018280:	4632      	mov	r2, r6
 8018282:	463b      	mov	r3, r7
 8018284:	4628      	mov	r0, r5
 8018286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801828a:	f000 b817 	b.w	80182bc <_write_r>

0801828e <__sseek>:
 801828e:	b510      	push	{r4, lr}
 8018290:	460c      	mov	r4, r1
 8018292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018296:	f000 f85d 	bl	8018354 <_lseek_r>
 801829a:	1c43      	adds	r3, r0, #1
 801829c:	89a3      	ldrh	r3, [r4, #12]
 801829e:	bf15      	itete	ne
 80182a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80182a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80182a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80182aa:	81a3      	strheq	r3, [r4, #12]
 80182ac:	bf18      	it	ne
 80182ae:	81a3      	strhne	r3, [r4, #12]
 80182b0:	bd10      	pop	{r4, pc}

080182b2 <__sclose>:
 80182b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182b6:	f000 b81b 	b.w	80182f0 <_close_r>
	...

080182bc <_write_r>:
 80182bc:	b538      	push	{r3, r4, r5, lr}
 80182be:	4d07      	ldr	r5, [pc, #28]	; (80182dc <_write_r+0x20>)
 80182c0:	4604      	mov	r4, r0
 80182c2:	4608      	mov	r0, r1
 80182c4:	4611      	mov	r1, r2
 80182c6:	2200      	movs	r2, #0
 80182c8:	602a      	str	r2, [r5, #0]
 80182ca:	461a      	mov	r2, r3
 80182cc:	f7ea f8ed 	bl	80024aa <_write>
 80182d0:	1c43      	adds	r3, r0, #1
 80182d2:	d102      	bne.n	80182da <_write_r+0x1e>
 80182d4:	682b      	ldr	r3, [r5, #0]
 80182d6:	b103      	cbz	r3, 80182da <_write_r+0x1e>
 80182d8:	6023      	str	r3, [r4, #0]
 80182da:	bd38      	pop	{r3, r4, r5, pc}
 80182dc:	20015be4 	.word	0x20015be4

080182e0 <abort>:
 80182e0:	b508      	push	{r3, lr}
 80182e2:	2006      	movs	r0, #6
 80182e4:	f000 f88a 	bl	80183fc <raise>
 80182e8:	2001      	movs	r0, #1
 80182ea:	f7ea f8b7 	bl	800245c <_exit>
	...

080182f0 <_close_r>:
 80182f0:	b538      	push	{r3, r4, r5, lr}
 80182f2:	4d06      	ldr	r5, [pc, #24]	; (801830c <_close_r+0x1c>)
 80182f4:	2300      	movs	r3, #0
 80182f6:	4604      	mov	r4, r0
 80182f8:	4608      	mov	r0, r1
 80182fa:	602b      	str	r3, [r5, #0]
 80182fc:	f7ea f8f1 	bl	80024e2 <_close>
 8018300:	1c43      	adds	r3, r0, #1
 8018302:	d102      	bne.n	801830a <_close_r+0x1a>
 8018304:	682b      	ldr	r3, [r5, #0]
 8018306:	b103      	cbz	r3, 801830a <_close_r+0x1a>
 8018308:	6023      	str	r3, [r4, #0]
 801830a:	bd38      	pop	{r3, r4, r5, pc}
 801830c:	20015be4 	.word	0x20015be4

08018310 <_fstat_r>:
 8018310:	b538      	push	{r3, r4, r5, lr}
 8018312:	4d07      	ldr	r5, [pc, #28]	; (8018330 <_fstat_r+0x20>)
 8018314:	2300      	movs	r3, #0
 8018316:	4604      	mov	r4, r0
 8018318:	4608      	mov	r0, r1
 801831a:	4611      	mov	r1, r2
 801831c:	602b      	str	r3, [r5, #0]
 801831e:	f7ea f8ec 	bl	80024fa <_fstat>
 8018322:	1c43      	adds	r3, r0, #1
 8018324:	d102      	bne.n	801832c <_fstat_r+0x1c>
 8018326:	682b      	ldr	r3, [r5, #0]
 8018328:	b103      	cbz	r3, 801832c <_fstat_r+0x1c>
 801832a:	6023      	str	r3, [r4, #0]
 801832c:	bd38      	pop	{r3, r4, r5, pc}
 801832e:	bf00      	nop
 8018330:	20015be4 	.word	0x20015be4

08018334 <_isatty_r>:
 8018334:	b538      	push	{r3, r4, r5, lr}
 8018336:	4d06      	ldr	r5, [pc, #24]	; (8018350 <_isatty_r+0x1c>)
 8018338:	2300      	movs	r3, #0
 801833a:	4604      	mov	r4, r0
 801833c:	4608      	mov	r0, r1
 801833e:	602b      	str	r3, [r5, #0]
 8018340:	f7ea f8eb 	bl	800251a <_isatty>
 8018344:	1c43      	adds	r3, r0, #1
 8018346:	d102      	bne.n	801834e <_isatty_r+0x1a>
 8018348:	682b      	ldr	r3, [r5, #0]
 801834a:	b103      	cbz	r3, 801834e <_isatty_r+0x1a>
 801834c:	6023      	str	r3, [r4, #0]
 801834e:	bd38      	pop	{r3, r4, r5, pc}
 8018350:	20015be4 	.word	0x20015be4

08018354 <_lseek_r>:
 8018354:	b538      	push	{r3, r4, r5, lr}
 8018356:	4d07      	ldr	r5, [pc, #28]	; (8018374 <_lseek_r+0x20>)
 8018358:	4604      	mov	r4, r0
 801835a:	4608      	mov	r0, r1
 801835c:	4611      	mov	r1, r2
 801835e:	2200      	movs	r2, #0
 8018360:	602a      	str	r2, [r5, #0]
 8018362:	461a      	mov	r2, r3
 8018364:	f7ea f8e4 	bl	8002530 <_lseek>
 8018368:	1c43      	adds	r3, r0, #1
 801836a:	d102      	bne.n	8018372 <_lseek_r+0x1e>
 801836c:	682b      	ldr	r3, [r5, #0]
 801836e:	b103      	cbz	r3, 8018372 <_lseek_r+0x1e>
 8018370:	6023      	str	r3, [r4, #0]
 8018372:	bd38      	pop	{r3, r4, r5, pc}
 8018374:	20015be4 	.word	0x20015be4

08018378 <_malloc_usable_size_r>:
 8018378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801837c:	1f18      	subs	r0, r3, #4
 801837e:	2b00      	cmp	r3, #0
 8018380:	bfbc      	itt	lt
 8018382:	580b      	ldrlt	r3, [r1, r0]
 8018384:	18c0      	addlt	r0, r0, r3
 8018386:	4770      	bx	lr

08018388 <_read_r>:
 8018388:	b538      	push	{r3, r4, r5, lr}
 801838a:	4d07      	ldr	r5, [pc, #28]	; (80183a8 <_read_r+0x20>)
 801838c:	4604      	mov	r4, r0
 801838e:	4608      	mov	r0, r1
 8018390:	4611      	mov	r1, r2
 8018392:	2200      	movs	r2, #0
 8018394:	602a      	str	r2, [r5, #0]
 8018396:	461a      	mov	r2, r3
 8018398:	f7ea f86a 	bl	8002470 <_read>
 801839c:	1c43      	adds	r3, r0, #1
 801839e:	d102      	bne.n	80183a6 <_read_r+0x1e>
 80183a0:	682b      	ldr	r3, [r5, #0]
 80183a2:	b103      	cbz	r3, 80183a6 <_read_r+0x1e>
 80183a4:	6023      	str	r3, [r4, #0]
 80183a6:	bd38      	pop	{r3, r4, r5, pc}
 80183a8:	20015be4 	.word	0x20015be4

080183ac <_raise_r>:
 80183ac:	291f      	cmp	r1, #31
 80183ae:	b538      	push	{r3, r4, r5, lr}
 80183b0:	4604      	mov	r4, r0
 80183b2:	460d      	mov	r5, r1
 80183b4:	d904      	bls.n	80183c0 <_raise_r+0x14>
 80183b6:	2316      	movs	r3, #22
 80183b8:	6003      	str	r3, [r0, #0]
 80183ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80183be:	bd38      	pop	{r3, r4, r5, pc}
 80183c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80183c2:	b112      	cbz	r2, 80183ca <_raise_r+0x1e>
 80183c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80183c8:	b94b      	cbnz	r3, 80183de <_raise_r+0x32>
 80183ca:	4620      	mov	r0, r4
 80183cc:	f000 f830 	bl	8018430 <_getpid_r>
 80183d0:	462a      	mov	r2, r5
 80183d2:	4601      	mov	r1, r0
 80183d4:	4620      	mov	r0, r4
 80183d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80183da:	f000 b817 	b.w	801840c <_kill_r>
 80183de:	2b01      	cmp	r3, #1
 80183e0:	d00a      	beq.n	80183f8 <_raise_r+0x4c>
 80183e2:	1c59      	adds	r1, r3, #1
 80183e4:	d103      	bne.n	80183ee <_raise_r+0x42>
 80183e6:	2316      	movs	r3, #22
 80183e8:	6003      	str	r3, [r0, #0]
 80183ea:	2001      	movs	r0, #1
 80183ec:	e7e7      	b.n	80183be <_raise_r+0x12>
 80183ee:	2400      	movs	r4, #0
 80183f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80183f4:	4628      	mov	r0, r5
 80183f6:	4798      	blx	r3
 80183f8:	2000      	movs	r0, #0
 80183fa:	e7e0      	b.n	80183be <_raise_r+0x12>

080183fc <raise>:
 80183fc:	4b02      	ldr	r3, [pc, #8]	; (8018408 <raise+0xc>)
 80183fe:	4601      	mov	r1, r0
 8018400:	6818      	ldr	r0, [r3, #0]
 8018402:	f7ff bfd3 	b.w	80183ac <_raise_r>
 8018406:	bf00      	nop
 8018408:	20000140 	.word	0x20000140

0801840c <_kill_r>:
 801840c:	b538      	push	{r3, r4, r5, lr}
 801840e:	4d07      	ldr	r5, [pc, #28]	; (801842c <_kill_r+0x20>)
 8018410:	2300      	movs	r3, #0
 8018412:	4604      	mov	r4, r0
 8018414:	4608      	mov	r0, r1
 8018416:	4611      	mov	r1, r2
 8018418:	602b      	str	r3, [r5, #0]
 801841a:	f7ea f80f 	bl	800243c <_kill>
 801841e:	1c43      	adds	r3, r0, #1
 8018420:	d102      	bne.n	8018428 <_kill_r+0x1c>
 8018422:	682b      	ldr	r3, [r5, #0]
 8018424:	b103      	cbz	r3, 8018428 <_kill_r+0x1c>
 8018426:	6023      	str	r3, [r4, #0]
 8018428:	bd38      	pop	{r3, r4, r5, pc}
 801842a:	bf00      	nop
 801842c:	20015be4 	.word	0x20015be4

08018430 <_getpid_r>:
 8018430:	f7e9 bffc 	b.w	800242c <_getpid>

08018434 <_init>:
 8018434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018436:	bf00      	nop
 8018438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801843a:	bc08      	pop	{r3}
 801843c:	469e      	mov	lr, r3
 801843e:	4770      	bx	lr

08018440 <_fini>:
 8018440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018442:	bf00      	nop
 8018444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018446:	bc08      	pop	{r3}
 8018448:	469e      	mov	lr, r3
 801844a:	4770      	bx	lr
