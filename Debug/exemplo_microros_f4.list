
exemplo_microros_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cfa0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e28  0801d130  0801d130  0002d130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ef58  0801ef58  00030368  2**0
                  CONTENTS
  4 .ARM          00000008  0801ef58  0801ef58  0002ef58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ef60  0801ef60  00030368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ef60  0801ef60  0002ef60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ef64  0801ef64  0002ef64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  0801ef68  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030368  2**0
                  CONTENTS
 10 .bss          00015ca8  20000368  20000368  00030368  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20016010  20016010  00030368  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030368  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002db2a  00000000  00000000  00030398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053f6  00000000  00000000  0005dec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020e8  00000000  00000000  000632b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f18  00000000  00000000  000653a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029e95  00000000  00000000  000672b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028664  00000000  00000000  0009114d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4f50  00000000  00000000  000b97b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000ac  00000000  00000000  001ae701  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a6ac  00000000  00000000  001ae7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000368 	.word	0x20000368
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d118 	.word	0x0801d118

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000036c 	.word	0x2000036c
 80001cc:	0801d118 	.word	0x0801d118

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c76:	f000 b9ef 	b.w	8001058 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f883 	bl	8000d94 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f876 	bl	8000d94 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f865 	bl	8000d94 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f857 	bl	8000d94 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d0c:	f000 b9a4 	b.w	8001058 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff fee3 	bl	8000afc <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc59 	bl	8000618 <__aeabi_dmul>
 8000d66:	f7ff ff07 	bl	8000b78 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fbda 	bl	8000524 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc50 	bl	8000618 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff fa92 	bl	80002a8 <__aeabi_dsub>
 8000d84:	f7ff fef8 	bl	8000b78 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	468c      	mov	ip, r1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f040 8083 	bne.w	8000eaa <__udivmoddi4+0x116>
 8000da4:	428a      	cmp	r2, r1
 8000da6:	4617      	mov	r7, r2
 8000da8:	d947      	bls.n	8000e3a <__udivmoddi4+0xa6>
 8000daa:	fab2 f282 	clz	r2, r2
 8000dae:	b142      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000db0:	f1c2 0020 	rsb	r0, r2, #32
 8000db4:	fa24 f000 	lsr.w	r0, r4, r0
 8000db8:	4091      	lsls	r1, r2
 8000dba:	4097      	lsls	r7, r2
 8000dbc:	ea40 0c01 	orr.w	ip, r0, r1
 8000dc0:	4094      	lsls	r4, r2
 8000dc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dc6:	0c23      	lsrs	r3, r4, #16
 8000dc8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dcc:	fa1f fe87 	uxth.w	lr, r7
 8000dd0:	fb08 c116 	mls	r1, r8, r6, ip
 8000dd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd8:	fb06 f10e 	mul.w	r1, r6, lr
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	d909      	bls.n	8000df4 <__udivmoddi4+0x60>
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000de6:	f080 8119 	bcs.w	800101c <__udivmoddi4+0x288>
 8000dea:	4299      	cmp	r1, r3
 8000dec:	f240 8116 	bls.w	800101c <__udivmoddi4+0x288>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	443b      	add	r3, r7
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000e00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d909      	bls.n	8000e20 <__udivmoddi4+0x8c>
 8000e0c:	193c      	adds	r4, r7, r4
 8000e0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e12:	f080 8105 	bcs.w	8001020 <__udivmoddi4+0x28c>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f240 8102 	bls.w	8001020 <__udivmoddi4+0x28c>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	443c      	add	r4, r7
 8000e20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e24:	eba4 040e 	sub.w	r4, r4, lr
 8000e28:	2600      	movs	r6, #0
 8000e2a:	b11d      	cbz	r5, 8000e34 <__udivmoddi4+0xa0>
 8000e2c:	40d4      	lsrs	r4, r2
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e9c5 4300 	strd	r4, r3, [r5]
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	b902      	cbnz	r2, 8000e3e <__udivmoddi4+0xaa>
 8000e3c:	deff      	udf	#255	; 0xff
 8000e3e:	fab2 f282 	clz	r2, r2
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	d150      	bne.n	8000ee8 <__udivmoddi4+0x154>
 8000e46:	1bcb      	subs	r3, r1, r7
 8000e48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e4c:	fa1f f887 	uxth.w	r8, r7
 8000e50:	2601      	movs	r6, #1
 8000e52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e56:	0c21      	lsrs	r1, r4, #16
 8000e58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e60:	fb08 f30c 	mul.w	r3, r8, ip
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0xe4>
 8000e68:	1879      	adds	r1, r7, r1
 8000e6a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0xe2>
 8000e70:	428b      	cmp	r3, r1
 8000e72:	f200 80e9 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000e76:	4684      	mov	ip, r0
 8000e78:	1ac9      	subs	r1, r1, r3
 8000e7a:	b2a3      	uxth	r3, r4
 8000e7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e88:	fb08 f800 	mul.w	r8, r8, r0
 8000e8c:	45a0      	cmp	r8, r4
 8000e8e:	d907      	bls.n	8000ea0 <__udivmoddi4+0x10c>
 8000e90:	193c      	adds	r4, r7, r4
 8000e92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x10a>
 8000e98:	45a0      	cmp	r8, r4
 8000e9a:	f200 80d9 	bhi.w	8001050 <__udivmoddi4+0x2bc>
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	eba4 0408 	sub.w	r4, r4, r8
 8000ea4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ea8:	e7bf      	b.n	8000e2a <__udivmoddi4+0x96>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d909      	bls.n	8000ec2 <__udivmoddi4+0x12e>
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	f000 80b1 	beq.w	8001016 <__udivmoddi4+0x282>
 8000eb4:	2600      	movs	r6, #0
 8000eb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eba:	4630      	mov	r0, r6
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	fab3 f683 	clz	r6, r3
 8000ec6:	2e00      	cmp	r6, #0
 8000ec8:	d14a      	bne.n	8000f60 <__udivmoddi4+0x1cc>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d302      	bcc.n	8000ed4 <__udivmoddi4+0x140>
 8000ece:	4282      	cmp	r2, r0
 8000ed0:	f200 80b8 	bhi.w	8001044 <__udivmoddi4+0x2b0>
 8000ed4:	1a84      	subs	r4, r0, r2
 8000ed6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eda:	2001      	movs	r0, #1
 8000edc:	468c      	mov	ip, r1
 8000ede:	2d00      	cmp	r5, #0
 8000ee0:	d0a8      	beq.n	8000e34 <__udivmoddi4+0xa0>
 8000ee2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ee6:	e7a5      	b.n	8000e34 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f603 	lsr.w	r6, r0, r3
 8000ef0:	4097      	lsls	r7, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000efa:	40d9      	lsrs	r1, r3
 8000efc:	4330      	orrs	r0, r6
 8000efe:	0c03      	lsrs	r3, r0, #16
 8000f00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f04:	fa1f f887 	uxth.w	r8, r7
 8000f08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f10:	fb06 f108 	mul.w	r1, r6, r8
 8000f14:	4299      	cmp	r1, r3
 8000f16:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1a:	d909      	bls.n	8000f30 <__udivmoddi4+0x19c>
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000f22:	f080 808d 	bcs.w	8001040 <__udivmoddi4+0x2ac>
 8000f26:	4299      	cmp	r1, r3
 8000f28:	f240 808a 	bls.w	8001040 <__udivmoddi4+0x2ac>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	443b      	add	r3, r7
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	b281      	uxth	r1, r0
 8000f34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f40:	fb00 f308 	mul.w	r3, r0, r8
 8000f44:	428b      	cmp	r3, r1
 8000f46:	d907      	bls.n	8000f58 <__udivmoddi4+0x1c4>
 8000f48:	1879      	adds	r1, r7, r1
 8000f4a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f4e:	d273      	bcs.n	8001038 <__udivmoddi4+0x2a4>
 8000f50:	428b      	cmp	r3, r1
 8000f52:	d971      	bls.n	8001038 <__udivmoddi4+0x2a4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4439      	add	r1, r7
 8000f58:	1acb      	subs	r3, r1, r3
 8000f5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f5e:	e778      	b.n	8000e52 <__udivmoddi4+0xbe>
 8000f60:	f1c6 0c20 	rsb	ip, r6, #32
 8000f64:	fa03 f406 	lsl.w	r4, r3, r6
 8000f68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f6c:	431c      	orrs	r4, r3
 8000f6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f72:	fa01 f306 	lsl.w	r3, r1, r6
 8000f76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f7e:	431f      	orrs	r7, r3
 8000f80:	0c3b      	lsrs	r3, r7, #16
 8000f82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f86:	fa1f f884 	uxth.w	r8, r4
 8000f8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f92:	fb09 fa08 	mul.w	sl, r9, r8
 8000f96:	458a      	cmp	sl, r1
 8000f98:	fa02 f206 	lsl.w	r2, r2, r6
 8000f9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x220>
 8000fa2:	1861      	adds	r1, r4, r1
 8000fa4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000fa8:	d248      	bcs.n	800103c <__udivmoddi4+0x2a8>
 8000faa:	458a      	cmp	sl, r1
 8000fac:	d946      	bls.n	800103c <__udivmoddi4+0x2a8>
 8000fae:	f1a9 0902 	sub.w	r9, r9, #2
 8000fb2:	4421      	add	r1, r4
 8000fb4:	eba1 010a 	sub.w	r1, r1, sl
 8000fb8:	b2bf      	uxth	r7, r7
 8000fba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fbe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fc2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fc6:	fb00 f808 	mul.w	r8, r0, r8
 8000fca:	45b8      	cmp	r8, r7
 8000fcc:	d907      	bls.n	8000fde <__udivmoddi4+0x24a>
 8000fce:	19e7      	adds	r7, r4, r7
 8000fd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fd4:	d22e      	bcs.n	8001034 <__udivmoddi4+0x2a0>
 8000fd6:	45b8      	cmp	r8, r7
 8000fd8:	d92c      	bls.n	8001034 <__udivmoddi4+0x2a0>
 8000fda:	3802      	subs	r0, #2
 8000fdc:	4427      	add	r7, r4
 8000fde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fe2:	eba7 0708 	sub.w	r7, r7, r8
 8000fe6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fea:	454f      	cmp	r7, r9
 8000fec:	46c6      	mov	lr, r8
 8000fee:	4649      	mov	r1, r9
 8000ff0:	d31a      	bcc.n	8001028 <__udivmoddi4+0x294>
 8000ff2:	d017      	beq.n	8001024 <__udivmoddi4+0x290>
 8000ff4:	b15d      	cbz	r5, 800100e <__udivmoddi4+0x27a>
 8000ff6:	ebb3 020e 	subs.w	r2, r3, lr
 8000ffa:	eb67 0701 	sbc.w	r7, r7, r1
 8000ffe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001002:	40f2      	lsrs	r2, r6
 8001004:	ea4c 0202 	orr.w	r2, ip, r2
 8001008:	40f7      	lsrs	r7, r6
 800100a:	e9c5 2700 	strd	r2, r7, [r5]
 800100e:	2600      	movs	r6, #0
 8001010:	4631      	mov	r1, r6
 8001012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e70b      	b.n	8000e34 <__udivmoddi4+0xa0>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e9      	b.n	8000df4 <__udivmoddi4+0x60>
 8001020:	4618      	mov	r0, r3
 8001022:	e6fd      	b.n	8000e20 <__udivmoddi4+0x8c>
 8001024:	4543      	cmp	r3, r8
 8001026:	d2e5      	bcs.n	8000ff4 <__udivmoddi4+0x260>
 8001028:	ebb8 0e02 	subs.w	lr, r8, r2
 800102c:	eb69 0104 	sbc.w	r1, r9, r4
 8001030:	3801      	subs	r0, #1
 8001032:	e7df      	b.n	8000ff4 <__udivmoddi4+0x260>
 8001034:	4608      	mov	r0, r1
 8001036:	e7d2      	b.n	8000fde <__udivmoddi4+0x24a>
 8001038:	4660      	mov	r0, ip
 800103a:	e78d      	b.n	8000f58 <__udivmoddi4+0x1c4>
 800103c:	4681      	mov	r9, r0
 800103e:	e7b9      	b.n	8000fb4 <__udivmoddi4+0x220>
 8001040:	4666      	mov	r6, ip
 8001042:	e775      	b.n	8000f30 <__udivmoddi4+0x19c>
 8001044:	4630      	mov	r0, r6
 8001046:	e74a      	b.n	8000ede <__udivmoddi4+0x14a>
 8001048:	f1ac 0c02 	sub.w	ip, ip, #2
 800104c:	4439      	add	r1, r7
 800104e:	e713      	b.n	8000e78 <__udivmoddi4+0xe4>
 8001050:	3802      	subs	r0, #2
 8001052:	443c      	add	r4, r7
 8001054:	e724      	b.n	8000ea0 <__udivmoddi4+0x10c>
 8001056:	bf00      	nop

08001058 <__aeabi_idiv0>:
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001068:	f00a fc5e 	bl	800b928 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800106c:	4b58      	ldr	r3, [pc, #352]	; (80011d0 <pvPortMallocMicroROS+0x174>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001074:	f000 f98c 	bl	8001390 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001078:	4b56      	ldr	r3, [pc, #344]	; (80011d4 <pvPortMallocMicroROS+0x178>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4013      	ands	r3, r2
 8001080:	2b00      	cmp	r3, #0
 8001082:	f040 808e 	bne.w	80011a2 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d01d      	beq.n	80010c8 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800108c:	2208      	movs	r2, #8
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	2b00      	cmp	r3, #0
 800109c:	d014      	beq.n	80010c8 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f023 0307 	bic.w	r3, r3, #7
 80010a4:	3308      	adds	r3, #8
 80010a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00a      	beq.n	80010c8 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80010b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b6:	f383 8811 	msr	BASEPRI, r3
 80010ba:	f3bf 8f6f 	isb	sy
 80010be:	f3bf 8f4f 	dsb	sy
 80010c2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80010c4:	bf00      	nop
 80010c6:	e7fe      	b.n	80010c6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d069      	beq.n	80011a2 <pvPortMallocMicroROS+0x146>
 80010ce:	4b42      	ldr	r3, [pc, #264]	; (80011d8 <pvPortMallocMicroROS+0x17c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d864      	bhi.n	80011a2 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <pvPortMallocMicroROS+0x180>)
 80010da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80010dc:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <pvPortMallocMicroROS+0x180>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80010e2:	e004      	b.n	80010ee <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d903      	bls.n	8001100 <pvPortMallocMicroROS+0xa4>
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1f1      	bne.n	80010e4 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001100:	4b33      	ldr	r3, [pc, #204]	; (80011d0 <pvPortMallocMicroROS+0x174>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001106:	429a      	cmp	r2, r3
 8001108:	d04b      	beq.n	80011a2 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2208      	movs	r2, #8
 8001110:	4413      	add	r3, r2
 8001112:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	6a3b      	ldr	r3, [r7, #32]
 800111a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	1ad2      	subs	r2, r2, r3
 8001124:	2308      	movs	r3, #8
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	429a      	cmp	r2, r3
 800112a:	d91f      	bls.n	800116c <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800112c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00a      	beq.n	8001154 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800113e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001142:	f383 8811 	msr	BASEPRI, r3
 8001146:	f3bf 8f6f 	isb	sy
 800114a:	f3bf 8f4f 	dsb	sy
 800114e:	613b      	str	r3, [r7, #16]
}
 8001150:	bf00      	nop
 8001152:	e7fe      	b.n	8001152 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	1ad2      	subs	r2, r2, r3
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001166:	69b8      	ldr	r0, [r7, #24]
 8001168:	f000 f974 	bl	8001454 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <pvPortMallocMicroROS+0x17c>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	4a18      	ldr	r2, [pc, #96]	; (80011d8 <pvPortMallocMicroROS+0x17c>)
 8001178:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <pvPortMallocMicroROS+0x17c>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <pvPortMallocMicroROS+0x184>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d203      	bcs.n	800118e <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <pvPortMallocMicroROS+0x17c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a15      	ldr	r2, [pc, #84]	; (80011e0 <pvPortMallocMicroROS+0x184>)
 800118c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <pvPortMallocMicroROS+0x178>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	431a      	orrs	r2, r3
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80011a2:	f00a fbcf 	bl	800b944 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00a      	beq.n	80011c6 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80011b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b4:	f383 8811 	msr	BASEPRI, r3
 80011b8:	f3bf 8f6f 	isb	sy
 80011bc:	f3bf 8f4f 	dsb	sy
 80011c0:	60fb      	str	r3, [r7, #12]
}
 80011c2:	bf00      	nop
 80011c4:	e7fe      	b.n	80011c4 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80011c6:	69fb      	ldr	r3, [r7, #28]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200078bc 	.word	0x200078bc
 80011d4:	200078c8 	.word	0x200078c8
 80011d8:	200078c0 	.word	0x200078c0
 80011dc:	200078b4 	.word	0x200078b4
 80011e0:	200078c4 	.word	0x200078c4

080011e4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d048      	beq.n	8001288 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80011f6:	2308      	movs	r3, #8
 80011f8:	425b      	negs	r3, r3
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4413      	add	r3, r2
 80011fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4b21      	ldr	r3, [pc, #132]	; (8001290 <vPortFreeMicroROS+0xac>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4013      	ands	r3, r2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10a      	bne.n	8001228 <vPortFreeMicroROS+0x44>
	__asm volatile
 8001212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001216:	f383 8811 	msr	BASEPRI, r3
 800121a:	f3bf 8f6f 	isb	sy
 800121e:	f3bf 8f4f 	dsb	sy
 8001222:	60fb      	str	r3, [r7, #12]
}
 8001224:	bf00      	nop
 8001226:	e7fe      	b.n	8001226 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00a      	beq.n	8001246 <vPortFreeMicroROS+0x62>
	__asm volatile
 8001230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001234:	f383 8811 	msr	BASEPRI, r3
 8001238:	f3bf 8f6f 	isb	sy
 800123c:	f3bf 8f4f 	dsb	sy
 8001240:	60bb      	str	r3, [r7, #8]
}
 8001242:	bf00      	nop
 8001244:	e7fe      	b.n	8001244 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <vPortFreeMicroROS+0xac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d019      	beq.n	8001288 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d115      	bne.n	8001288 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <vPortFreeMicroROS+0xac>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	43db      	mvns	r3, r3
 8001266:	401a      	ands	r2, r3
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800126c:	f00a fb5c 	bl	800b928 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <vPortFreeMicroROS+0xb0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4413      	add	r3, r2
 800127a:	4a06      	ldr	r2, [pc, #24]	; (8001294 <vPortFreeMicroROS+0xb0>)
 800127c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800127e:	6938      	ldr	r0, [r7, #16]
 8001280:	f000 f8e8 	bl	8001454 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001284:	f00a fb5e 	bl	800b944 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001288:	bf00      	nop
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200078c8 	.word	0x200078c8
 8001294:	200078c0 	.word	0x200078c0

08001298 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80012a4:	2308      	movs	r3, #8
 80012a6:	425b      	negs	r3, r3
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	4413      	add	r3, r2
 80012ac:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <getBlockSize+0x38>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	4013      	ands	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]

	return count;
 80012c0:	68fb      	ldr	r3, [r7, #12]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	371c      	adds	r7, #28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200078c8 	.word	0x200078c8

080012d4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012de:	f00a fb23 	bl	800b928 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80012e2:	6838      	ldr	r0, [r7, #0]
 80012e4:	f7ff feba 	bl	800105c <pvPortMallocMicroROS>
 80012e8:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80012ee:	2308      	movs	r3, #8
 80012f0:	425b      	negs	r3, r3
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	4413      	add	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <pvPortReallocMicroROS+0x70>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	43db      	mvns	r3, r3
 800130e:	4013      	ands	r3, r2
 8001310:	617b      	str	r3, [r7, #20]

  	while(count--)
 8001312:	e007      	b.n	8001324 <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 8001314:	69fa      	ldr	r2, [r7, #28]
 8001316:	1c53      	adds	r3, r2, #1
 8001318:	61fb      	str	r3, [r7, #28]
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	1c59      	adds	r1, r3, #1
 800131e:	61b9      	str	r1, [r7, #24]
 8001320:	7812      	ldrb	r2, [r2, #0]
 8001322:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	1e5a      	subs	r2, r3, #1
 8001328:	617a      	str	r2, [r7, #20]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f2      	bne.n	8001314 <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ff58 	bl	80011e4 <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 8001334:	f00a fb06 	bl	800b944 <xTaskResumeAll>

	return newmem;
 8001338:	693b      	ldr	r3, [r7, #16]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200078c8 	.word	0x200078c8

08001348 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001352:	f00a fae9 	bl	800b928 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff fe7b 	bl	800105c <pvPortMallocMicroROS>
 8001366:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	613b      	str	r3, [r7, #16]

  	while(count--)
 800136c:	e004      	b.n	8001378 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1c5a      	adds	r2, r3, #1
 8001372:	613a      	str	r2, [r7, #16]
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	1e5a      	subs	r2, r3, #1
 800137c:	617a      	str	r2, [r7, #20]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f5      	bne.n	800136e <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001382:	f00a fadf 	bl	800b944 <xTaskResumeAll>
  	return mem;
 8001386:	68fb      	ldr	r3, [r7, #12]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001396:	f247 5330 	movw	r3, #30000	; 0x7530
 800139a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800139c:	4b27      	ldr	r3, [pc, #156]	; (800143c <prvHeapInit+0xac>)
 800139e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00c      	beq.n	80013c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	3307      	adds	r3, #7
 80013ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f023 0307 	bic.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	4a1f      	ldr	r2, [pc, #124]	; (800143c <prvHeapInit+0xac>)
 80013c0:	4413      	add	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80013c8:	4a1d      	ldr	r2, [pc, #116]	; (8001440 <prvHeapInit+0xb0>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <prvHeapInit+0xb0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	4413      	add	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80013dc:	2208      	movs	r2, #8
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	1a9b      	subs	r3, r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f023 0307 	bic.w	r3, r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4a15      	ldr	r2, [pc, #84]	; (8001444 <prvHeapInit+0xb4>)
 80013f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <prvHeapInit+0xb4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <prvHeapInit+0xb4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	1ad2      	subs	r2, r2, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <prvHeapInit+0xb4>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <prvHeapInit+0xb8>)
 800141e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	4a09      	ldr	r2, [pc, #36]	; (800144c <prvHeapInit+0xbc>)
 8001426:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <prvHeapInit+0xc0>)
 800142a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800142e:	601a      	str	r2, [r3, #0]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	20000384 	.word	0x20000384
 8001440:	200078b4 	.word	0x200078b4
 8001444:	200078bc 	.word	0x200078bc
 8001448:	200078c4 	.word	0x200078c4
 800144c:	200078c0 	.word	0x200078c0
 8001450:	200078c8 	.word	0x200078c8

08001454 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800145c:	4b28      	ldr	r3, [pc, #160]	; (8001500 <prvInsertBlockIntoFreeList+0xac>)
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	e002      	b.n	8001468 <prvInsertBlockIntoFreeList+0x14>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	429a      	cmp	r2, r3
 8001470:	d8f7      	bhi.n	8001462 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	4413      	add	r3, r2
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	429a      	cmp	r2, r3
 8001482:	d108      	bne.n	8001496 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	441a      	add	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	441a      	add	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d118      	bne.n	80014dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <prvInsertBlockIntoFreeList+0xb0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d00d      	beq.n	80014d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	441a      	add	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	e008      	b.n	80014e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <prvInsertBlockIntoFreeList+0xb0>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	e003      	b.n	80014e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d002      	beq.n	80014f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	200078b4 	.word	0x200078b4
 8001504:	200078bc 	.word	0x200078bc

08001508 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001516:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800151c:	4904      	ldr	r1, [pc, #16]	; (8001530 <cubemx_transport_open+0x28>)
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f007 fafa 	bl	8008b18 <HAL_UART_Receive_DMA>
    return true;
 8001524:	2301      	movs	r3, #1
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200078cc 	.word	0x200078cc

08001534 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001542:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f007 fb17 	bl	8008b78 <HAL_UART_DMAStop>
    return true;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001568:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b20      	cmp	r3, #32
 8001574:	d11c      	bne.n	80015b0 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	b29b      	uxth	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f007 fa4c 	bl	8008a1c <HAL_UART_Transmit_DMA>
 8001584:	4603      	mov	r3, r0
 8001586:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001588:	e002      	b.n	8001590 <cubemx_transport_write+0x3c>
            osDelay(1);
 800158a:	2001      	movs	r0, #1
 800158c:	f009 f9a1 	bl	800a8d2 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001590:	7cfb      	ldrb	r3, [r7, #19]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d105      	bne.n	80015a2 <cubemx_transport_write+0x4e>
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b20      	cmp	r3, #32
 80015a0:	d1f3      	bne.n	800158a <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80015a2:	7cfb      	ldrb	r3, [r7, #19]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <cubemx_transport_write+0x58>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	e002      	b.n	80015b2 <cubemx_transport_write+0x5e>
 80015ac:	2300      	movs	r3, #0
 80015ae:	e000      	b.n	80015b2 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 80015b0:	2300      	movs	r3, #0
    }
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80015d0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d6:	b672      	cpsid	i
}
 80015d8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80015e6:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <cubemx_transport_read+0x9c>)
 80015e8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015ea:	b662      	cpsie	i
}
 80015ec:	bf00      	nop
        __enable_irq();
        ms_used++;
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3301      	adds	r3, #1
 80015f2:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80015f4:	2001      	movs	r0, #1
 80015f6:	f009 f96c 	bl	800a8d2 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <cubemx_transport_read+0xa0>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <cubemx_transport_read+0x9c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d103      	bne.n	800160e <cubemx_transport_read+0x52>
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	dbe3      	blt.n	80015d6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001612:	e011      	b.n	8001638 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <cubemx_transport_read+0xa0>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	440b      	add	r3, r1
 800161e:	4910      	ldr	r1, [pc, #64]	; (8001660 <cubemx_transport_read+0xa4>)
 8001620:	5c8a      	ldrb	r2, [r1, r2]
 8001622:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <cubemx_transport_read+0xa0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	3301      	adds	r3, #1
 800162a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <cubemx_transport_read+0xa0>)
 8001630:	6013      	str	r3, [r2, #0]
        wrote++;
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	3301      	adds	r3, #1
 8001636:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <cubemx_transport_read+0xa0>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <cubemx_transport_read+0x9c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d003      	beq.n	800164c <cubemx_transport_read+0x90>
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	d3e3      	bcc.n	8001614 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 800164c:	69bb      	ldr	r3, [r7, #24]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3720      	adds	r7, #32
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200080d0 	.word	0x200080d0
 800165c:	200080cc 	.word	0x200080cc
 8001660:	200078cc 	.word	0x200078cc

08001664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001668:	f001 ff06 	bl	8003478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166c:	f000 f8a2 	bl	80017b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001670:	f000 fb52 	bl	8001d18 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001674:	f000 f968 	bl	8001948 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001678:	f000 f994 	bl	80019a4 <MX_I2S3_Init>
  MX_SPI1_Init();
 800167c:	f000 f9c2 	bl	8001a04 <MX_SPI1_Init>
  MX_DMA_Init();
 8001680:	f000 fb0c 	bl	8001c9c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001684:	f000 fa94 	bl	8001bb0 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 8001688:	f000 fae6 	bl	8001c58 <MX_USB_OTG_FS_HCD_Init>
  MX_TIM1_Init();
 800168c:	f000 f9f0 	bl	8001a70 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001690:	f000 fab8 	bl	8001c04 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001694:	f000 f8f8 	bl	8001888 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc_values, 2);
 8001698:	2202      	movs	r2, #2
 800169a:	4929      	ldr	r1, [pc, #164]	; (8001740 <main+0xdc>)
 800169c:	4829      	ldr	r0, [pc, #164]	; (8001744 <main+0xe0>)
 800169e:	f001 ff95 	bl	80035cc <HAL_ADC_Start_DMA>
  status = HAL_UART_Receive_IT(&huart3, &uart_gps_rx, 1);
 80016a2:	2201      	movs	r2, #1
 80016a4:	4928      	ldr	r1, [pc, #160]	; (8001748 <main+0xe4>)
 80016a6:	4829      	ldr	r0, [pc, #164]	; (800174c <main+0xe8>)
 80016a8:	f007 f987 	bl	80089ba <HAL_UART_Receive_IT>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b27      	ldr	r3, [pc, #156]	; (8001750 <main+0xec>)
 80016b2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80016b4:	f008 ff62 	bl	800a57c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_ros2 */
  task_ros2Handle = osThreadNew(task_ros2_function, NULL, &task_ros2_attributes);
 80016b8:	4a26      	ldr	r2, [pc, #152]	; (8001754 <main+0xf0>)
 80016ba:	2100      	movs	r1, #0
 80016bc:	4826      	ldr	r0, [pc, #152]	; (8001758 <main+0xf4>)
 80016be:	f008 ffa7 	bl	800a610 <osThreadNew>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a25      	ldr	r2, [pc, #148]	; (800175c <main+0xf8>)
 80016c6:	6013      	str	r3, [r2, #0]

  /* creation of task_gps */
  task_gpsHandle = osThreadNew(task_gps_function, NULL, &task_gps_attributes);
 80016c8:	4a25      	ldr	r2, [pc, #148]	; (8001760 <main+0xfc>)
 80016ca:	2100      	movs	r1, #0
 80016cc:	4825      	ldr	r0, [pc, #148]	; (8001764 <main+0x100>)
 80016ce:	f008 ff9f 	bl	800a610 <osThreadNew>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4a24      	ldr	r2, [pc, #144]	; (8001768 <main+0x104>)
 80016d6:	6013      	str	r3, [r2, #0]

  /* creation of task_stepper */
  task_stepperHandle = osThreadNew(task_stepper_function, NULL, &task_stepper_attributes);
 80016d8:	4a24      	ldr	r2, [pc, #144]	; (800176c <main+0x108>)
 80016da:	2100      	movs	r1, #0
 80016dc:	4824      	ldr	r0, [pc, #144]	; (8001770 <main+0x10c>)
 80016de:	f008 ff97 	bl	800a610 <osThreadNew>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4a23      	ldr	r2, [pc, #140]	; (8001774 <main+0x110>)
 80016e6:	6013      	str	r3, [r2, #0]

  /* creation of task_angle_sens */
  task_angle_sensHandle = osThreadNew(task_angle_sensor_function, NULL, &task_angle_sens_attributes);
 80016e8:	4a23      	ldr	r2, [pc, #140]	; (8001778 <main+0x114>)
 80016ea:	2100      	movs	r1, #0
 80016ec:	4823      	ldr	r0, [pc, #140]	; (800177c <main+0x118>)
 80016ee:	f008 ff8f 	bl	800a610 <osThreadNew>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a22      	ldr	r2, [pc, #136]	; (8001780 <main+0x11c>)
 80016f6:	6013      	str	r3, [r2, #0]

  /* creation of task_analog_inp */
  task_analog_inpHandle = osThreadNew(task_analog_input_function, NULL, &task_analog_inp_attributes);
 80016f8:	4a22      	ldr	r2, [pc, #136]	; (8001784 <main+0x120>)
 80016fa:	2100      	movs	r1, #0
 80016fc:	4822      	ldr	r0, [pc, #136]	; (8001788 <main+0x124>)
 80016fe:	f008 ff87 	bl	800a610 <osThreadNew>
 8001702:	4603      	mov	r3, r0
 8001704:	4a21      	ldr	r2, [pc, #132]	; (800178c <main+0x128>)
 8001706:	6013      	str	r3, [r2, #0]

  /* creation of task_dac */
  task_dacHandle = osThreadNew(task_dac_function, NULL, &task_dac_attributes);
 8001708:	4a21      	ldr	r2, [pc, #132]	; (8001790 <main+0x12c>)
 800170a:	2100      	movs	r1, #0
 800170c:	4821      	ldr	r0, [pc, #132]	; (8001794 <main+0x130>)
 800170e:	f008 ff7f 	bl	800a610 <osThreadNew>
 8001712:	4603      	mov	r3, r0
 8001714:	4a20      	ldr	r2, [pc, #128]	; (8001798 <main+0x134>)
 8001716:	6013      	str	r3, [r2, #0]

  /* creation of task_digital_io */
  task_digital_ioHandle = osThreadNew(task_digital_io_function, NULL, &task_digital_io_attributes);
 8001718:	4a20      	ldr	r2, [pc, #128]	; (800179c <main+0x138>)
 800171a:	2100      	movs	r1, #0
 800171c:	4820      	ldr	r0, [pc, #128]	; (80017a0 <main+0x13c>)
 800171e:	f008 ff77 	bl	800a610 <osThreadNew>
 8001722:	4603      	mov	r3, r0
 8001724:	4a1f      	ldr	r2, [pc, #124]	; (80017a4 <main+0x140>)
 8001726:	6013      	str	r3, [r2, #0]

  /* creation of task_main */
  task_mainHandle = osThreadNew(task_main_function, NULL, &task_main_attributes);
 8001728:	4a1f      	ldr	r2, [pc, #124]	; (80017a8 <main+0x144>)
 800172a:	2100      	movs	r1, #0
 800172c:	481f      	ldr	r0, [pc, #124]	; (80017ac <main+0x148>)
 800172e:	f008 ff6f 	bl	800a610 <osThreadNew>
 8001732:	4603      	mov	r3, r0
 8001734:	4a1e      	ldr	r2, [pc, #120]	; (80017b0 <main+0x14c>)
 8001736:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001738:	f008 ff44 	bl	800a5c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800173c:	e7fe      	b.n	800173c <main+0xd8>
 800173e:	bf00      	nop
 8001740:	20010dcc 	.word	0x20010dcc
 8001744:	20010834 	.word	0x20010834
 8001748:	200080d5 	.word	0x200080d5
 800174c:	200105c0 	.word	0x200105c0
 8001750:	20010dc8 	.word	0x20010dc8
 8001754:	0801df20 	.word	0x0801df20
 8001758:	080021e1 	.word	0x080021e1
 800175c:	200105b8 	.word	0x200105b8
 8001760:	0801df44 	.word	0x0801df44
 8001764:	08002575 	.word	0x08002575
 8001768:	20010550 	.word	0x20010550
 800176c:	0801df68 	.word	0x0801df68
 8001770:	08002679 	.word	0x08002679
 8001774:	20010828 	.word	0x20010828
 8001778:	0801df8c 	.word	0x0801df8c
 800177c:	08002689 	.word	0x08002689
 8001780:	200109b0 	.word	0x200109b0
 8001784:	0801dfb0 	.word	0x0801dfb0
 8001788:	08002699 	.word	0x08002699
 800178c:	20010dd0 	.word	0x20010dd0
 8001790:	0801dfd4 	.word	0x0801dfd4
 8001794:	080026a9 	.word	0x080026a9
 8001798:	200108e0 	.word	0x200108e0
 800179c:	0801dff8 	.word	0x0801dff8
 80017a0:	080026b9 	.word	0x080026b9
 80017a4:	200108e4 	.word	0x200108e4
 80017a8:	0801e01c 	.word	0x0801e01c
 80017ac:	080026fd 	.word	0x080026fd
 80017b0:	2001087c 	.word	0x2001087c

080017b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b094      	sub	sp, #80	; 0x50
 80017b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ba:	f107 0320 	add.w	r3, r7, #32
 80017be:	2230      	movs	r2, #48	; 0x30
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f017 fb2e 	bl	8018e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	4b28      	ldr	r3, [pc, #160]	; (8001880 <SystemClock_Config+0xcc>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	4a27      	ldr	r2, [pc, #156]	; (8001880 <SystemClock_Config+0xcc>)
 80017e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e6:	6413      	str	r3, [r2, #64]	; 0x40
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <SystemClock_Config+0xcc>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	4b22      	ldr	r3, [pc, #136]	; (8001884 <SystemClock_Config+0xd0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a21      	ldr	r2, [pc, #132]	; (8001884 <SystemClock_Config+0xd0>)
 80017fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <SystemClock_Config+0xd0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001810:	2301      	movs	r3, #1
 8001812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800181a:	2302      	movs	r3, #2
 800181c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800181e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001824:	2308      	movs	r3, #8
 8001826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001828:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800182c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800182e:	2302      	movs	r3, #2
 8001830:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001832:	2307      	movs	r3, #7
 8001834:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001836:	f107 0320 	add.w	r3, r7, #32
 800183a:	4618      	mov	r0, r3
 800183c:	f005 fa62 	bl	8006d04 <HAL_RCC_OscConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001846:	f000 ff73 	bl	8002730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800184a:	230f      	movs	r3, #15
 800184c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800184e:	2302      	movs	r3, #2
 8001850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001856:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800185a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800185c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001860:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	2105      	movs	r1, #5
 8001868:	4618      	mov	r0, r3
 800186a:	f005 fcc3 	bl	80071f4 <HAL_RCC_ClockConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001874:	f000 ff5c 	bl	8002730 <Error_Handler>
  }
}
 8001878:	bf00      	nop
 800187a:	3750      	adds	r7, #80	; 0x50
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40023800 	.word	0x40023800
 8001884:	40007000 	.word	0x40007000

08001888 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800188e:	463b      	mov	r3, r7
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800189a:	4b28      	ldr	r3, [pc, #160]	; (800193c <MX_ADC1_Init+0xb4>)
 800189c:	4a28      	ldr	r2, [pc, #160]	; (8001940 <MX_ADC1_Init+0xb8>)
 800189e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018a0:	4b26      	ldr	r3, [pc, #152]	; (800193c <MX_ADC1_Init+0xb4>)
 80018a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018a8:	4b24      	ldr	r3, [pc, #144]	; (800193c <MX_ADC1_Init+0xb4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80018ae:	4b23      	ldr	r3, [pc, #140]	; (800193c <MX_ADC1_Init+0xb4>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018b4:	4b21      	ldr	r3, [pc, #132]	; (800193c <MX_ADC1_Init+0xb4>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ba:	4b20      	ldr	r3, [pc, #128]	; (800193c <MX_ADC1_Init+0xb4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018c2:	4b1e      	ldr	r3, [pc, #120]	; (800193c <MX_ADC1_Init+0xb4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018c8:	4b1c      	ldr	r3, [pc, #112]	; (800193c <MX_ADC1_Init+0xb4>)
 80018ca:	4a1e      	ldr	r2, [pc, #120]	; (8001944 <MX_ADC1_Init+0xbc>)
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ce:	4b1b      	ldr	r3, [pc, #108]	; (800193c <MX_ADC1_Init+0xb4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <MX_ADC1_Init+0xb4>)
 80018d6:	2202      	movs	r2, #2
 80018d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018da:	4b18      	ldr	r3, [pc, #96]	; (800193c <MX_ADC1_Init+0xb4>)
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <MX_ADC1_Init+0xb4>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018e8:	4814      	ldr	r0, [pc, #80]	; (800193c <MX_ADC1_Init+0xb4>)
 80018ea:	f001 fe2b 	bl	8003544 <HAL_ADC_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80018f4:	f000 ff1c 	bl	8002730 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80018f8:	230e      	movs	r3, #14
 80018fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018fc:	2301      	movs	r3, #1
 80018fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001900:	2302      	movs	r3, #2
 8001902:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001904:	463b      	mov	r3, r7
 8001906:	4619      	mov	r1, r3
 8001908:	480c      	ldr	r0, [pc, #48]	; (800193c <MX_ADC1_Init+0xb4>)
 800190a:	f001 ff8d 	bl	8003828 <HAL_ADC_ConfigChannel>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001914:	f000 ff0c 	bl	8002730 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001918:	230f      	movs	r3, #15
 800191a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800191c:	2302      	movs	r3, #2
 800191e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001920:	463b      	mov	r3, r7
 8001922:	4619      	mov	r1, r3
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <MX_ADC1_Init+0xb4>)
 8001926:	f001 ff7f 	bl	8003828 <HAL_ADC_ConfigChannel>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001930:	f000 fefe 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20010834 	.word	0x20010834
 8001940:	40012000 	.word	0x40012000
 8001944:	0f000001 	.word	0x0f000001

08001948 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <MX_I2C1_Init+0x50>)
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <MX_I2C1_Init+0x54>)
 8001950:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_I2C1_Init+0x50>)
 8001954:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <MX_I2C1_Init+0x58>)
 8001956:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_I2C1_Init+0x50>)
 8001966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800196a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <MX_I2C1_Init+0x50>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_I2C1_Init+0x50>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <MX_I2C1_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_I2C1_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <MX_I2C1_Init+0x50>)
 8001986:	f004 fbd9 	bl	800613c <HAL_I2C_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001990:	f000 fece 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20010624 	.word	0x20010624
 800199c:	40005400 	.word	0x40005400
 80019a0:	000186a0 	.word	0x000186a0

080019a4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <MX_I2S3_Init+0x54>)
 80019aa:	4a14      	ldr	r2, [pc, #80]	; (80019fc <MX_I2S3_Init+0x58>)
 80019ac:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <MX_I2S3_Init+0x54>)
 80019b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <MX_I2S3_Init+0x54>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_I2S3_Init+0x54>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <MX_I2S3_Init+0x54>)
 80019c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <MX_I2S3_Init+0x54>)
 80019cc:	4a0c      	ldr	r2, [pc, #48]	; (8001a00 <MX_I2S3_Init+0x5c>)
 80019ce:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_I2S3_Init+0x54>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <MX_I2S3_Init+0x54>)
 80019d8:	2200      	movs	r2, #0
 80019da:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_I2S3_Init+0x54>)
 80019de:	2200      	movs	r2, #0
 80019e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_I2S3_Init+0x54>)
 80019e4:	f004 fcee 	bl	80063c4 <HAL_I2S_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80019ee:	f000 fe9f 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20010d80 	.word	0x20010d80
 80019fc:	40003c00 	.word	0x40003c00
 8001a00:	00017700 	.word	0x00017700

08001a04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a08:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a0a:	4a18      	ldr	r2, [pc, #96]	; (8001a6c <MX_SPI1_Init+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a50:	220a      	movs	r2, #10
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a56:	f005 ff3b 	bl	80078d0 <HAL_SPI_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a60:	f000 fe66 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200109bc 	.word	0x200109bc
 8001a6c:	40013000 	.word	0x40013000

08001a70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b096      	sub	sp, #88	; 0x58
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]
 8001a9e:	615a      	str	r2, [r3, #20]
 8001aa0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f017 f9bb 	bl	8018e24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aae:	4b3e      	ldr	r3, [pc, #248]	; (8001ba8 <MX_TIM1_Init+0x138>)
 8001ab0:	4a3e      	ldr	r2, [pc, #248]	; (8001bac <MX_TIM1_Init+0x13c>)
 8001ab2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ab4:	4b3c      	ldr	r3, [pc, #240]	; (8001ba8 <MX_TIM1_Init+0x138>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aba:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <MX_TIM1_Init+0x138>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ac0:	4b39      	ldr	r3, [pc, #228]	; (8001ba8 <MX_TIM1_Init+0x138>)
 8001ac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ac6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac8:	4b37      	ldr	r3, [pc, #220]	; (8001ba8 <MX_TIM1_Init+0x138>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ace:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <MX_TIM1_Init+0x138>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad4:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <MX_TIM1_Init+0x138>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ada:	4833      	ldr	r0, [pc, #204]	; (8001ba8 <MX_TIM1_Init+0x138>)
 8001adc:	f005 ff81 	bl	80079e2 <HAL_TIM_Base_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001ae6:	f000 fe23 	bl	8002730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001af0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001af4:	4619      	mov	r1, r3
 8001af6:	482c      	ldr	r0, [pc, #176]	; (8001ba8 <MX_TIM1_Init+0x138>)
 8001af8:	f006 fa56 	bl	8007fa8 <HAL_TIM_ConfigClockSource>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b02:	f000 fe15 	bl	8002730 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b06:	4828      	ldr	r0, [pc, #160]	; (8001ba8 <MX_TIM1_Init+0x138>)
 8001b08:	f006 f82a 	bl	8007b60 <HAL_TIM_PWM_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b12:	f000 fe0d 	bl	8002730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b22:	4619      	mov	r1, r3
 8001b24:	4820      	ldr	r0, [pc, #128]	; (8001ba8 <MX_TIM1_Init+0x138>)
 8001b26:	f006 fe19 	bl	800875c <HAL_TIMEx_MasterConfigSynchronization>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b30:	f000 fdfe 	bl	8002730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b34:	2360      	movs	r3, #96	; 0x60
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b40:	2300      	movs	r3, #0
 8001b42:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b54:	2200      	movs	r2, #0
 8001b56:	4619      	mov	r1, r3
 8001b58:	4813      	ldr	r0, [pc, #76]	; (8001ba8 <MX_TIM1_Init+0x138>)
 8001b5a:	f006 f963 	bl	8007e24 <HAL_TIM_PWM_ConfigChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001b64:	f000 fde4 	bl	8002730 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <MX_TIM1_Init+0x138>)
 8001b8c:	f006 fe62 	bl	8008854 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001b96:	f000 fdcb 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b9a:	4803      	ldr	r0, [pc, #12]	; (8001ba8 <MX_TIM1_Init+0x138>)
 8001b9c:	f001 f8f8 	bl	8002d90 <HAL_TIM_MspPostInit>

}
 8001ba0:	bf00      	nop
 8001ba2:	3758      	adds	r7, #88	; 0x58
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20010968 	.word	0x20010968
 8001bac:	40010000 	.word	0x40010000

08001bb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bb4:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_USART2_UART_Init+0x4c>)
 8001bb6:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <MX_USART2_UART_Init+0x50>)
 8001bb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <MX_USART2_UART_Init+0x4c>)
 8001bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <MX_USART2_UART_Init+0x4c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <MX_USART2_UART_Init+0x4c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <MX_USART2_UART_Init+0x4c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <MX_USART2_UART_Init+0x4c>)
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <MX_USART2_UART_Init+0x4c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <MX_USART2_UART_Init+0x4c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001be6:	4805      	ldr	r0, [pc, #20]	; (8001bfc <MX_USART2_UART_Init+0x4c>)
 8001be8:	f006 fe9a 	bl	8008920 <HAL_UART_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bf2:	f000 fd9d 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20010d18 	.word	0x20010d18
 8001c00:	40004400 	.word	0x40004400

08001c04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <MX_USART3_UART_Init+0x4c>)
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <MX_USART3_UART_Init+0x50>)
 8001c0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <MX_USART3_UART_Init+0x4c>)
 8001c10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <MX_USART3_UART_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <MX_USART3_UART_Init+0x4c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <MX_USART3_UART_Init+0x4c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_USART3_UART_Init+0x4c>)
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <MX_USART3_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <MX_USART3_UART_Init+0x4c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <MX_USART3_UART_Init+0x4c>)
 8001c3c:	f006 fe70 	bl	8008920 <HAL_UART_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c46:	f000 fd73 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200105c0 	.word	0x200105c0
 8001c54:	40004800 	.word	0x40004800

08001c58 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001c62:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c66:	2208      	movs	r2, #8
 8001c68:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c78:	2202      	movs	r2, #2
 8001c7a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c84:	f002 ff45 	bl	8004b12 <HAL_HCD_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8001c8e:	f000 fd4f 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20010a14 	.word	0x20010a14

08001c9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <MX_DMA_Init+0x78>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a1a      	ldr	r2, [pc, #104]	; (8001d14 <MX_DMA_Init+0x78>)
 8001cac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <MX_DMA_Init+0x78>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <MX_DMA_Init+0x78>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a13      	ldr	r2, [pc, #76]	; (8001d14 <MX_DMA_Init+0x78>)
 8001cc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <MX_DMA_Init+0x78>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2105      	movs	r1, #5
 8001cde:	2010      	movs	r0, #16
 8001ce0:	f002 f8fa 	bl	8003ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ce4:	2010      	movs	r0, #16
 8001ce6:	f002 f913 	bl	8003f10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2105      	movs	r1, #5
 8001cee:	2011      	movs	r0, #17
 8001cf0:	f002 f8f2 	bl	8003ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001cf4:	2011      	movs	r0, #17
 8001cf6:	f002 f90b 	bl	8003f10 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2105      	movs	r1, #5
 8001cfe:	2038      	movs	r0, #56	; 0x38
 8001d00:	f002 f8ea 	bl	8003ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d04:	2038      	movs	r0, #56	; 0x38
 8001d06:	f002 f903 	bl	8003f10 <HAL_NVIC_EnableIRQ>

}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800

08001d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08c      	sub	sp, #48	; 0x30
 8001d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
 8001d2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	4b77      	ldr	r3, [pc, #476]	; (8001f10 <MX_GPIO_Init+0x1f8>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a76      	ldr	r2, [pc, #472]	; (8001f10 <MX_GPIO_Init+0x1f8>)
 8001d38:	f043 0310 	orr.w	r3, r3, #16
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b74      	ldr	r3, [pc, #464]	; (8001f10 <MX_GPIO_Init+0x1f8>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	61bb      	str	r3, [r7, #24]
 8001d48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	4b70      	ldr	r3, [pc, #448]	; (8001f10 <MX_GPIO_Init+0x1f8>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a6f      	ldr	r2, [pc, #444]	; (8001f10 <MX_GPIO_Init+0x1f8>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b6d      	ldr	r3, [pc, #436]	; (8001f10 <MX_GPIO_Init+0x1f8>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b69      	ldr	r3, [pc, #420]	; (8001f10 <MX_GPIO_Init+0x1f8>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a68      	ldr	r2, [pc, #416]	; (8001f10 <MX_GPIO_Init+0x1f8>)
 8001d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b66      	ldr	r3, [pc, #408]	; (8001f10 <MX_GPIO_Init+0x1f8>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b62      	ldr	r3, [pc, #392]	; (8001f10 <MX_GPIO_Init+0x1f8>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a61      	ldr	r2, [pc, #388]	; (8001f10 <MX_GPIO_Init+0x1f8>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b5f      	ldr	r3, [pc, #380]	; (8001f10 <MX_GPIO_Init+0x1f8>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	4b5b      	ldr	r3, [pc, #364]	; (8001f10 <MX_GPIO_Init+0x1f8>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a5a      	ldr	r2, [pc, #360]	; (8001f10 <MX_GPIO_Init+0x1f8>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b58      	ldr	r3, [pc, #352]	; (8001f10 <MX_GPIO_Init+0x1f8>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	4b54      	ldr	r3, [pc, #336]	; (8001f10 <MX_GPIO_Init+0x1f8>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a53      	ldr	r2, [pc, #332]	; (8001f10 <MX_GPIO_Init+0x1f8>)
 8001dc4:	f043 0308 	orr.w	r3, r3, #8
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b51      	ldr	r3, [pc, #324]	; (8001f10 <MX_GPIO_Init+0x1f8>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|STEPPER_EN_Pin|STEPPER_DIR_Pin, GPIO_PIN_RESET);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8001ddc:	484d      	ldr	r0, [pc, #308]	; (8001f14 <MX_GPIO_Init+0x1fc>)
 8001dde:	f002 fe5b 	bl	8004a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001de2:	2201      	movs	r2, #1
 8001de4:	2101      	movs	r1, #1
 8001de6:	484c      	ldr	r0, [pc, #304]	; (8001f18 <MX_GPIO_Init+0x200>)
 8001de8:	f002 fe56 	bl	8004a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001dec:	2200      	movs	r2, #0
 8001dee:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001df2:	484a      	ldr	r0, [pc, #296]	; (8001f1c <MX_GPIO_Init+0x204>)
 8001df4:	f002 fe50 	bl	8004a98 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin STEPPER_EN_Pin STEPPER_DIR_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|STEPPER_EN_Pin|STEPPER_DIR_Pin;
 8001df8:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8001dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e0a:	f107 031c 	add.w	r3, r7, #28
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4840      	ldr	r0, [pc, #256]	; (8001f14 <MX_GPIO_Init+0x1fc>)
 8001e12:	f002 fc8d 	bl	8004730 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001e16:	2301      	movs	r3, #1
 8001e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	483a      	ldr	r0, [pc, #232]	; (8001f18 <MX_GPIO_Init+0x200>)
 8001e2e:	f002 fc7f 	bl	8004730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001e32:	2308      	movs	r3, #8
 8001e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e42:	2305      	movs	r3, #5
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001e46:	f107 031c 	add.w	r3, r7, #28
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4832      	ldr	r0, [pc, #200]	; (8001f18 <MX_GPIO_Init+0x200>)
 8001e4e:	f002 fc6f 	bl	8004730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0_Pin */
  GPIO_InitStruct.Pin = PB0_Pin;
 8001e52:	2301      	movs	r3, #1
 8001e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e56:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PB0_GPIO_Port, &GPIO_InitStruct);
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	4619      	mov	r1, r3
 8001e66:	482e      	ldr	r0, [pc, #184]	; (8001f20 <MX_GPIO_Init+0x208>)
 8001e68:	f002 fc62 	bl	8004730 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001e78:	f107 031c 	add.w	r3, r7, #28
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4829      	ldr	r0, [pc, #164]	; (8001f24 <MX_GPIO_Init+0x20c>)
 8001e80:	f002 fc56 	bl	8004730 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e96:	2305      	movs	r3, #5
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4820      	ldr	r0, [pc, #128]	; (8001f24 <MX_GPIO_Init+0x20c>)
 8001ea2:	f002 fc45 	bl	8004730 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001ea6:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001eaa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eac:	2301      	movs	r3, #1
 8001eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4817      	ldr	r0, [pc, #92]	; (8001f1c <MX_GPIO_Init+0x204>)
 8001ec0:	f002 fc36 	bl	8004730 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ec4:	2320      	movs	r3, #32
 8001ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4811      	ldr	r0, [pc, #68]	; (8001f1c <MX_GPIO_Init+0x204>)
 8001ed8:	f002 fc2a 	bl	8004730 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001edc:	2302      	movs	r3, #2
 8001ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ee0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4808      	ldr	r0, [pc, #32]	; (8001f14 <MX_GPIO_Init+0x1fc>)
 8001ef2:	f002 fc1d 	bl	8004730 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2105      	movs	r1, #5
 8001efa:	2006      	movs	r0, #6
 8001efc:	f001 ffec 	bl	8003ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f00:	2006      	movs	r0, #6
 8001f02:	f002 f805 	bl	8003f10 <HAL_NVIC_EnableIRQ>

}
 8001f06:	bf00      	nop
 8001f08:	3730      	adds	r7, #48	; 0x30
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40020800 	.word	0x40020800
 8001f1c:	40020c00 	.word	0x40020c00
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40020400 	.word	0x40020400

08001f28 <convertDegMinToDecDeg>:
 * Convert NMEA absolute position to decimal degrees
 * "ddmm.mmmm" or "dddmm.mmmm" really is D+M/60,
 * then negated if quadrant is 'W' or 'S'
 */
double convertDegMinToDecDeg (float degMin)
{
 8001f28:	b5b0      	push	{r4, r5, r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	ed87 0a01 	vstr	s0, [r7, #4]
  double min = 0.0;
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double decDeg = 0.0;
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	e9c7 2302 	strd	r2, r3, [r7, #8]

  //get the minutes, fmod() requires double
  min = fmod((double)degMin, 100.0);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe fb0c 	bl	8000568 <__aeabi_f2d>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001fc0 <convertDegMinToDecDeg+0x98>
 8001f58:	ec43 2b10 	vmov	d0, r2, r3
 8001f5c:	f01a ff8e 	bl	801ce7c <fmod>
 8001f60:	ed87 0b04 	vstr	d0, [r7, #16]

  //rebuild coordinates in decimal degrees
  degMin = (int) ( degMin / 100 );
 8001f64:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f68:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001fc8 <convertDegMinToDecDeg+0xa0>
 8001f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f78:	edc7 7a01 	vstr	s15, [r7, #4]
  decDeg = degMin + ( min / 60 );
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7fe faf3 	bl	8000568 <__aeabi_f2d>
 8001f82:	4604      	mov	r4, r0
 8001f84:	460d      	mov	r5, r1
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <convertDegMinToDecDeg+0xa4>)
 8001f8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f90:	f7fe fc6c 	bl	800086c <__aeabi_ddiv>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4620      	mov	r0, r4
 8001f9a:	4629      	mov	r1, r5
 8001f9c:	f7fe f986 	bl	80002ac <__adddf3>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	e9c7 2302 	strd	r2, r3, [r7, #8]

  return decDeg;
 8001fa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fac:	ec43 2b17 	vmov	d7, r2, r3
}
 8001fb0:	eeb0 0a47 	vmov.f32	s0, s14
 8001fb4:	eef0 0a67 	vmov.f32	s1, s15
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	40590000 	.word	0x40590000
 8001fc8:	42c80000 	.word	0x42c80000
 8001fcc:	404e0000 	.word	0x404e0000

08001fd0 <ros2_gpio_input_timer_callback>:

void ros2_gpio_input_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	e9c7 2300 	strd	r2, r3, [r7]


		//sprintf(joint_state_msg.header.frame_id.data, "%ld", seq_no);
		//joint_state_msg.header.frame_id.size = strlen(joint_state_msg.header.frame_id.data);

		ros2_gpio_input_msg.data= gpio_input;
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <ros2_gpio_input_timer_callback+0x3c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <ros2_gpio_input_timer_callback+0x40>)
 8001fe4:	601a      	str	r2, [r3, #0]

		// Publish the message
		rcl_ret_t ret = rcl_publish(&ros2_gpio_input_pub, &ros2_gpio_input_msg, NULL);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	4909      	ldr	r1, [pc, #36]	; (8002010 <ros2_gpio_input_timer_callback+0x40>)
 8001fea:	480a      	ldr	r0, [pc, #40]	; (8002014 <ros2_gpio_input_timer_callback+0x44>)
 8001fec:	f00b fd76 	bl	800dadc <rcl_publish>
 8001ff0:	6178      	str	r0, [r7, #20]
		if (ret != RCL_RET_OK)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d004      	beq.n	8002002 <ros2_gpio_input_timer_callback+0x32>
		{
		  printf("Error publishing joint_state (line %d)\n", __LINE__);
 8001ff8:	f240 316d 	movw	r1, #877	; 0x36d
 8001ffc:	4806      	ldr	r0, [pc, #24]	; (8002018 <ros2_gpio_input_timer_callback+0x48>)
 8001ffe:	f017 f9e3 	bl	80193c8 <iprintf>
		}
}
 8002002:	bf00      	nop
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	2001082c 	.word	0x2001082c
 8002010:	20010830 	.word	0x20010830
 8002014:	20010964 	.word	0x20010964
 8002018:	0801d1a0 	.word	0x0801d1a0

0800201c <ros2_gps_timer_callback>:

void ros2_gps_timer_callback(rcl_timer_t * timer, int64_t last_call_time) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b08c      	sub	sp, #48	; 0x30
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d03e      	beq.n	80020ac <ros2_gps_timer_callback+0x90>
// Fill the message timestamp
		struct timespec ts;
		int64_t time_ns;
		time_ns = rmw_uros_epoch_nanos();
 800202e:	f00d fdcd 	bl	800fbcc <rmw_uros_epoch_nanos>
 8002032:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		UTILS_NanosecondsToTimespec(time_ns, &ts);
 8002036:	f107 0310 	add.w	r3, r7, #16
 800203a:	461a      	mov	r2, r3
 800203c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002040:	f000 fc1a 	bl	8002878 <UTILS_NanosecondsToTimespec>


	// Create the Header
		ros2_gps_msg.header.stamp.sec = ts.tv_sec;
 8002044:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002048:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <ros2_gps_timer_callback+0x98>)
 800204a:	601a      	str	r2, [r3, #0]
		ros2_gps_msg.header.stamp.nanosec = ts.tv_nsec;
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	461a      	mov	r2, r3
 8002050:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <ros2_gps_timer_callback+0x98>)
 8002052:	605a      	str	r2, [r3, #4]

		ros2_gps_msg.latitude = gps_latitude;
 8002054:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <ros2_gps_timer_callback+0x9c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fa85 	bl	8000568 <__aeabi_f2d>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4914      	ldr	r1, [pc, #80]	; (80020b4 <ros2_gps_timer_callback+0x98>)
 8002064:	e9c1 2306 	strd	r2, r3, [r1, #24]
		ros2_gps_msg.longitude = gps_longitude;
 8002068:	4b14      	ldr	r3, [pc, #80]	; (80020bc <ros2_gps_timer_callback+0xa0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fa7b 	bl	8000568 <__aeabi_f2d>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	490f      	ldr	r1, [pc, #60]	; (80020b4 <ros2_gps_timer_callback+0x98>)
 8002078:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ros2_gps_msg.altitude = gps_alt;
 800207c:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <ros2_gps_timer_callback+0xa4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe fa71 	bl	8000568 <__aeabi_f2d>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	490a      	ldr	r1, [pc, #40]	; (80020b4 <ros2_gps_timer_callback+0x98>)
 800208c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		// Publish the message
				rcl_ret_t ret = rcl_publish(&ros2_gps_pub, &ros2_gps_msg, NULL);
 8002090:	2200      	movs	r2, #0
 8002092:	4908      	ldr	r1, [pc, #32]	; (80020b4 <ros2_gps_timer_callback+0x98>)
 8002094:	480b      	ldr	r0, [pc, #44]	; (80020c4 <ros2_gps_timer_callback+0xa8>)
 8002096:	f00b fd21 	bl	800dadc <rcl_publish>
 800209a:	6278      	str	r0, [r7, #36]	; 0x24
				if (ret != RCL_RET_OK)
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d004      	beq.n	80020ac <ros2_gps_timer_callback+0x90>
				{
				  printf("Error publishing gps (line %d)\n", __LINE__);
 80020a2:	f240 3185 	movw	r1, #901	; 0x385
 80020a6:	4808      	ldr	r0, [pc, #32]	; (80020c8 <ros2_gps_timer_callback+0xac>)
 80020a8:	f017 f98e 	bl	80193c8 <iprintf>
				}
			}


}
 80020ac:	bf00      	nop
 80020ae:	3730      	adds	r7, #48	; 0x30
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	200107a0 	.word	0x200107a0
 80020b8:	200080dc 	.word	0x200080dc
 80020bc:	200080e0 	.word	0x200080e0
 80020c0:	200080e8 	.word	0x200080e8
 80020c4:	20010d7c 	.word	0x20010d7c
 80020c8:	0801d1c8 	.word	0x0801d1c8

080020cc <ros2_analog_input_timer_callback>:

void ros2_analog_input_timer_callback(rcl_timer_t * timer, int64_t last_call_time){
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d018      	beq.n	8002110 <ros2_analog_input_timer_callback+0x44>
	ros2_analog_input_msg.data.data[0] = adc_values[0];
 80020de:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <ros2_analog_input_timer_callback+0x4c>)
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	4a0e      	ldr	r2, [pc, #56]	; (800211c <ros2_analog_input_timer_callback+0x50>)
 80020e4:	8812      	ldrh	r2, [r2, #0]
 80020e6:	801a      	strh	r2, [r3, #0]
	ros2_analog_input_msg.data.data[1] = adc_values[1];
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <ros2_analog_input_timer_callback+0x4c>)
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	3302      	adds	r3, #2
 80020ee:	4a0b      	ldr	r2, [pc, #44]	; (800211c <ros2_analog_input_timer_callback+0x50>)
 80020f0:	8852      	ldrh	r2, [r2, #2]
 80020f2:	801a      	strh	r2, [r3, #0]
	// Publish the message
					rcl_ret_t ret = rcl_publish(&ros2_analog_input_pub, &ros2_analog_input_msg, NULL);
 80020f4:	2200      	movs	r2, #0
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <ros2_analog_input_timer_callback+0x4c>)
 80020f8:	4809      	ldr	r0, [pc, #36]	; (8002120 <ros2_analog_input_timer_callback+0x54>)
 80020fa:	f00b fcef 	bl	800dadc <rcl_publish>
 80020fe:	6178      	str	r0, [r7, #20]
					if (ret != RCL_RET_OK)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d004      	beq.n	8002110 <ros2_analog_input_timer_callback+0x44>
					{
					  printf("Error publishing gps (line %d)\n", __LINE__);
 8002106:	f44f 7165 	mov.w	r1, #916	; 0x394
 800210a:	4806      	ldr	r0, [pc, #24]	; (8002124 <ros2_analog_input_timer_callback+0x58>)
 800210c:	f017 f95c 	bl	80193c8 <iprintf>
					}
	}

}
 8002110:	bf00      	nop
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20010948 	.word	0x20010948
 800211c:	20010dcc 	.word	0x20010dcc
 8002120:	200105bc 	.word	0x200105bc
 8002124:	0801d1c8 	.word	0x0801d1c8

08002128 <ros2_gpio_output_callback>:



void ros2_gpio_output_callback(const void * msgin)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

	const std_msgs__msg__Int32 *gpio_output_msg;
	int32_t data = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]
	if (msgin != NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00f      	beq.n	800215a <ros2_gpio_output_callback+0x32>
	{



		gpio_output_msg = (const std_msgs__msg__Int32 *)msgin;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	60bb      	str	r3, [r7, #8]
		data = gpio_output_msg->data;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, (data & 0x00000001));
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	b2db      	uxtb	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002154:	4803      	ldr	r0, [pc, #12]	; (8002164 <ros2_gpio_output_callback+0x3c>)
 8002156:	f002 fc9f 	bl	8004a98 <HAL_GPIO_WritePin>


	}
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40020c00 	.word	0x40020c00

08002168 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
if (huart->Instance == USART3){
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <HAL_UART_RxCpltCallback+0x58>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d11e      	bne.n	80021b8 <HAL_UART_RxCpltCallback+0x50>
	if ((uart_gps_rx != '\n') && gps_buffer_index < sizeof(gps_buffer)){
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_UART_RxCpltCallback+0x5c>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b0a      	cmp	r3, #10
 8002180:	d00b      	beq.n	800219a <HAL_UART_RxCpltCallback+0x32>
		gps_buffer[gps_buffer_index++] = uart_gps_rx;
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_UART_RxCpltCallback+0x60>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	b2d1      	uxtb	r1, r2
 800218a:	4a0f      	ldr	r2, [pc, #60]	; (80021c8 <HAL_UART_RxCpltCallback+0x60>)
 800218c:	7011      	strb	r1, [r2, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <HAL_UART_RxCpltCallback+0x5c>)
 8002192:	7819      	ldrb	r1, [r3, #0]
 8002194:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <HAL_UART_RxCpltCallback+0x64>)
 8002196:	5499      	strb	r1, [r3, r2]
 8002198:	e005      	b.n	80021a6 <HAL_UART_RxCpltCallback+0x3e>
	} else {
		osThreadFlagsSet(task_gpsHandle, TF_GPS_DATA);
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_UART_RxCpltCallback+0x68>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2101      	movs	r1, #1
 80021a0:	4618      	mov	r0, r3
 80021a2:	f008 fac7 	bl	800a734 <osThreadFlagsSet>
	}

	status = HAL_UART_Receive_IT(&huart3, &uart_gps_rx, 1);
 80021a6:	2201      	movs	r2, #1
 80021a8:	4906      	ldr	r1, [pc, #24]	; (80021c4 <HAL_UART_RxCpltCallback+0x5c>)
 80021aa:	480a      	ldr	r0, [pc, #40]	; (80021d4 <HAL_UART_RxCpltCallback+0x6c>)
 80021ac:	f006 fc05 	bl	80089ba <HAL_UART_Receive_IT>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461a      	mov	r2, r3
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <HAL_UART_RxCpltCallback+0x70>)
 80021b6:	701a      	strb	r2, [r3, #0]

}
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40004800 	.word	0x40004800
 80021c4:	200080d5 	.word	0x200080d5
 80021c8:	200080d4 	.word	0x200080d4
 80021cc:	20010678 	.word	0x20010678
 80021d0:	20010550 	.word	0x20010550
 80021d4:	200105c0 	.word	0x200105c0
 80021d8:	20010dc8 	.word	0x20010dc8
 80021dc:	00000000 	.word	0x00000000

080021e0 <task_ros2_function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_ros2_function */
void task_ros2_function(void *argument)
{
 80021e0:	b5b0      	push	{r4, r5, r7, lr}
 80021e2:	b0d2      	sub	sp, #328	; 0x148
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	f107 031c 	add.w	r3, r7, #28
 80021ea:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	// micro-ROS configuration
	  rmw_uros_set_custom_transport(
 80021ec:	4bc0      	ldr	r3, [pc, #768]	; (80024f0 <task_ros2_function+0x310>)
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	4bc0      	ldr	r3, [pc, #768]	; (80024f4 <task_ros2_function+0x314>)
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	4bc0      	ldr	r3, [pc, #768]	; (80024f8 <task_ros2_function+0x318>)
 80021f6:	4ac1      	ldr	r2, [pc, #772]	; (80024fc <task_ros2_function+0x31c>)
 80021f8:	49c1      	ldr	r1, [pc, #772]	; (8002500 <task_ros2_function+0x320>)
 80021fa:	2001      	movs	r0, #1
 80021fc:	f00c fe3e 	bl	800ee7c <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002200:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002204:	4618      	mov	r0, r3
 8002206:	f00c fabb 	bl	800e780 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 800220a:	4bbe      	ldr	r3, [pc, #760]	; (8002504 <task_ros2_function+0x324>)
 800220c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8002210:	4bbd      	ldr	r3, [pc, #756]	; (8002508 <task_ros2_function+0x328>)
 8002212:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8002216:	4bbd      	ldr	r3, [pc, #756]	; (800250c <task_ros2_function+0x32c>)
 8002218:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800221c:	4bbc      	ldr	r3, [pc, #752]	; (8002510 <task_ros2_function+0x330>)
 800221e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002222:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002226:	4618      	mov	r0, r3
 8002228:	f00c fab8 	bl	800e79c <rcutils_set_default_allocator>
 800222c:	4603      	mov	r3, r0
 800222e:	f083 0301 	eor.w	r3, r3, #1
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d004      	beq.n	8002242 <task_ros2_function+0x62>
		  printf("Error on default allocators (line %d)\n", __LINE__);
 8002238:	f44f 7176 	mov.w	r1, #984	; 0x3d8
 800223c:	48b5      	ldr	r0, [pc, #724]	; (8002514 <task_ros2_function+0x334>)
 800223e:	f017 f8c3 	bl	80193c8 <iprintf>
	  rcl_allocator_t allocator;
	  rcl_node_t node;
	  rclc_executor_t executor;
	  rcl_init_options_t init_options;

	  allocator = rcl_get_default_allocator();
 8002242:	463b      	mov	r3, r7
 8002244:	4618      	mov	r0, r3
 8002246:	f00c fac9 	bl	800e7dc <rcutils_get_default_allocator>
 800224a:	463b      	mov	r3, r7
 800224c:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 8002250:	461d      	mov	r5, r3
 8002252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002256:	682b      	ldr	r3, [r5, #0]
 8002258:	6023      	str	r3, [r4, #0]
	  init_options = rcl_get_zero_initialized_init_options();
 800225a:	f00b f9bf 	bl	800d5dc <rcl_get_zero_initialized_init_options>
 800225e:	4602      	mov	r2, r0
 8002260:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002264:	601a      	str	r2, [r3, #0]
	  rcl_init_options_init(&init_options, allocator);
 8002266:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800226a:	466a      	mov	r2, sp
 800226c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002270:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002274:	e882 0003 	stmia.w	r2, {r0, r1}
 8002278:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800227c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800227e:	4620      	mov	r0, r4
 8002280:	f00b f9ae 	bl	800d5e0 <rcl_init_options_init>

	  // create init_options
	  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8002284:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002288:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 800228c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	4613      	mov	r3, r2
 8002294:	2200      	movs	r2, #0
 8002296:	2100      	movs	r1, #0
 8002298:	f00c f968 	bl	800e56c <rclc_support_init_with_options>

	  // create node
	  rcl_node_options_t node_ops = rcl_node_get_default_options();
 800229c:	f107 0320 	add.w	r3, r7, #32
 80022a0:	4618      	mov	r0, r3
 80022a2:	f00b fac3 	bl	800d82c <rcl_node_get_default_options>
	  node_ops.domain_id = 25;
 80022a6:	f107 0320 	add.w	r3, r7, #32
 80022aa:	2219      	movs	r2, #25
 80022ac:	601a      	str	r2, [r3, #0]
	  rclc_node_init_with_options(&node, "acquisition_system", "", &support, &node_ops);
 80022ae:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80022b2:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 80022b6:	f107 0320 	add.w	r3, r7, #32
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	4613      	mov	r3, r2
 80022be:	4a96      	ldr	r2, [pc, #600]	; (8002518 <task_ros2_function+0x338>)
 80022c0:	4996      	ldr	r1, [pc, #600]	; (800251c <task_ros2_function+0x33c>)
 80022c2:	f00c f991 	bl	800e5e8 <rclc_node_init_with_options>


	  //time sync
	  if( rmw_uros_sync_session(1000) != RMW_RET_OK)
 80022c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022ca:	f00d fc8d 	bl	800fbe8 <rmw_uros_sync_session>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d004      	beq.n	80022de <task_ros2_function+0xfe>
		  printf("Error on time sync (line %d)\n", __LINE__);
 80022d4:	f240 411c 	movw	r1, #1052	; 0x41c
 80022d8:	4891      	ldr	r0, [pc, #580]	; (8002520 <task_ros2_function+0x340>)
 80022da:	f017 f875 	bl	80193c8 <iprintf>




	  //create gpio_output_sub
	  ros2_gpio_output_sub = rcl_get_zero_initialized_subscription();
 80022de:	f00b fc21 	bl	800db24 <rcl_get_zero_initialized_subscription>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4a8f      	ldr	r2, [pc, #572]	; (8002524 <task_ros2_function+0x344>)
 80022e6:	6013      	str	r3, [r2, #0]
	  rclc_subscription_init_best_effort(
 80022e8:	f00e f93a 	bl	8010560 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80022f2:	4b8d      	ldr	r3, [pc, #564]	; (8002528 <task_ros2_function+0x348>)
 80022f4:	488b      	ldr	r0, [pc, #556]	; (8002524 <task_ros2_function+0x344>)
 80022f6:	f00c f9d9 	bl	800e6ac <rclc_subscription_init_best_effort>
			  "/gpio_output");



	  // gpio_input pub
	  rclc_publisher_init_default(
 80022fa:	f00e f931 	bl	8010560 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80022fe:	4602      	mov	r2, r0
 8002300:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002304:	4b89      	ldr	r3, [pc, #548]	; (800252c <task_ros2_function+0x34c>)
 8002306:	488a      	ldr	r0, [pc, #552]	; (8002530 <task_ros2_function+0x350>)
 8002308:	f00c f99c 	bl	800e644 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			  "/gpio_input");

	  // gps_pub
	  rclc_publisher_init_default(
 800230c:	f00d ff90 	bl	8010230 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>
 8002310:	4602      	mov	r2, r0
 8002312:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002316:	4b87      	ldr	r3, [pc, #540]	; (8002534 <task_ros2_function+0x354>)
 8002318:	4887      	ldr	r0, [pc, #540]	; (8002538 <task_ros2_function+0x358>)
 800231a:	f00c f993 	bl	800e644 <rclc_publisher_init_default>
	  			  &ros2_gps_pub,
	  			  &node,
	  			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, NavSatFix),
	  			  "/gps");

	  rclc_publisher_init_default(
 800231e:	f00e f921 	bl	8010564 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>
 8002322:	4602      	mov	r2, r0
 8002324:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002328:	4b84      	ldr	r3, [pc, #528]	; (800253c <task_ros2_function+0x35c>)
 800232a:	4885      	ldr	r0, [pc, #532]	; (8002540 <task_ros2_function+0x360>)
 800232c:	f00c f98a 	bl	800e644 <rclc_publisher_init_default>




	  // gps memmory allocation
	  ros2_gps_msg.header.frame_id.capacity = 20;
 8002330:	4b84      	ldr	r3, [pc, #528]	; (8002544 <task_ros2_function+0x364>)
 8002332:	2214      	movs	r2, #20
 8002334:	611a      	str	r2, [r3, #16]
	  ros2_gps_msg.header.frame_id.data = (char*) pvPortMalloc(ros2_gps_msg.header.frame_id.capacity  * sizeof(char));
 8002336:	4b83      	ldr	r3, [pc, #524]	; (8002544 <task_ros2_function+0x364>)
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	4618      	mov	r0, r3
 800233c:	f00a ff64 	bl	800d208 <pvPortMalloc>
 8002340:	4603      	mov	r3, r0
 8002342:	4a80      	ldr	r2, [pc, #512]	; (8002544 <task_ros2_function+0x364>)
 8002344:	6093      	str	r3, [r2, #8]
	  ros2_gps_msg.header.frame_id.size = strlen(ros2_gps_msg.header.frame_id.data);
 8002346:	4b7f      	ldr	r3, [pc, #508]	; (8002544 <task_ros2_function+0x364>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	4618      	mov	r0, r3
 800234c:	f7fd ff4a 	bl	80001e4 <strlen>
 8002350:	4603      	mov	r3, r0
 8002352:	4a7c      	ldr	r2, [pc, #496]	; (8002544 <task_ros2_function+0x364>)
 8002354:	60d3      	str	r3, [r2, #12]


	  // analog input allocation
	  ros2_analog_input_msg.data.capacity = 2;
 8002356:	4b7c      	ldr	r3, [pc, #496]	; (8002548 <task_ros2_function+0x368>)
 8002358:	2202      	movs	r2, #2
 800235a:	619a      	str	r2, [r3, #24]
	  ros2_analog_input_msg.data.size = 2;
 800235c:	4b7a      	ldr	r3, [pc, #488]	; (8002548 <task_ros2_function+0x368>)
 800235e:	2202      	movs	r2, #2
 8002360:	615a      	str	r2, [r3, #20]
	  ros2_analog_input_msg.data.data = (uint16_t*) pvPortMalloc(ros2_analog_input_msg.data.capacity * sizeof(uint16_t));
 8002362:	4b79      	ldr	r3, [pc, #484]	; (8002548 <task_ros2_function+0x368>)
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4618      	mov	r0, r3
 800236a:	f00a ff4d 	bl	800d208 <pvPortMalloc>
 800236e:	4603      	mov	r3, r0
 8002370:	4a75      	ldr	r2, [pc, #468]	; (8002548 <task_ros2_function+0x368>)
 8002372:	6113      	str	r3, [r2, #16]
	  ros2_analog_input_msg.layout.dim.capacity = 2;
 8002374:	4b74      	ldr	r3, [pc, #464]	; (8002548 <task_ros2_function+0x368>)
 8002376:	2202      	movs	r2, #2
 8002378:	609a      	str	r2, [r3, #8]
	  ros2_analog_input_msg.layout.dim.size = 2;
 800237a:	4b73      	ldr	r3, [pc, #460]	; (8002548 <task_ros2_function+0x368>)
 800237c:	2202      	movs	r2, #2
 800237e:	605a      	str	r2, [r3, #4]
	  ros2_analog_input_msg.layout.dim.data = (std_msgs__msg__MultiArrayDimension*) pvPortMalloc(ros2_analog_input_msg.layout.dim.capacity * sizeof(std_msgs__msg__MultiArrayDimension));
 8002380:	4b71      	ldr	r3, [pc, #452]	; (8002548 <task_ros2_function+0x368>)
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4618      	mov	r0, r3
 800238e:	f00a ff3b 	bl	800d208 <pvPortMalloc>
 8002392:	4603      	mov	r3, r0
 8002394:	4a6c      	ldr	r2, [pc, #432]	; (8002548 <task_ros2_function+0x368>)
 8002396:	6013      	str	r3, [r2, #0]
	  for (size_t i =0; i< ros2_analog_input_msg.layout.dim.capacity; i++){
 8002398:	2300      	movs	r3, #0
 800239a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800239e:	e031      	b.n	8002404 <task_ros2_function+0x224>
		  ros2_analog_input_msg.layout.dim.data[i].label.capacity = 20;
 80023a0:	4b69      	ldr	r3, [pc, #420]	; (8002548 <task_ros2_function+0x368>)
 80023a2:	6819      	ldr	r1, [r3, #0]
 80023a4:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	2214      	movs	r2, #20
 80023b4:	609a      	str	r2, [r3, #8]
		  ros2_analog_input_msg.layout.dim.data[i].label.size = 10;
 80023b6:	4b64      	ldr	r3, [pc, #400]	; (8002548 <task_ros2_function+0x368>)
 80023b8:	6819      	ldr	r1, [r3, #0]
 80023ba:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	220a      	movs	r2, #10
 80023ca:	605a      	str	r2, [r3, #4]
		  ros2_analog_input_msg.layout.dim.data[i].label.data = (char*) pvPortMalloc(ros2_analog_input_msg.layout.dim.data[i].label.capacity * sizeof(char));
 80023cc:	4b5e      	ldr	r3, [pc, #376]	; (8002548 <task_ros2_function+0x368>)
 80023ce:	6819      	ldr	r1, [r3, #0]
 80023d0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	6898      	ldr	r0, [r3, #8]
 80023e0:	4b59      	ldr	r3, [pc, #356]	; (8002548 <task_ros2_function+0x368>)
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	18cc      	adds	r4, r1, r3
 80023f2:	f00a ff09 	bl	800d208 <pvPortMalloc>
 80023f6:	4603      	mov	r3, r0
 80023f8:	6023      	str	r3, [r4, #0]
	  for (size_t i =0; i< ros2_analog_input_msg.layout.dim.capacity; i++){
 80023fa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80023fe:	3301      	adds	r3, #1
 8002400:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002404:	4b50      	ldr	r3, [pc, #320]	; (8002548 <task_ros2_function+0x368>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800240c:	429a      	cmp	r2, r3
 800240e:	d3c7      	bcc.n	80023a0 <task_ros2_function+0x1c0>

	  }
	  strcpy(ros2_analog_input_msg.layout.dim.data[0].label.data, "Analog 1");
 8002410:	4b4d      	ldr	r3, [pc, #308]	; (8002548 <task_ros2_function+0x368>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	494d      	ldr	r1, [pc, #308]	; (800254c <task_ros2_function+0x36c>)
 8002418:	461a      	mov	r2, r3
 800241a:	460b      	mov	r3, r1
 800241c:	cb03      	ldmia	r3!, {r0, r1}
 800241e:	6010      	str	r0, [r2, #0]
 8002420:	6051      	str	r1, [r2, #4]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	7213      	strb	r3, [r2, #8]
	  strcpy(ros2_analog_input_msg.layout.dim.data[1].label.data, "Analog 2");
 8002426:	4b48      	ldr	r3, [pc, #288]	; (8002548 <task_ros2_function+0x368>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	3314      	adds	r3, #20
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4948      	ldr	r1, [pc, #288]	; (8002550 <task_ros2_function+0x370>)
 8002430:	461a      	mov	r2, r3
 8002432:	460b      	mov	r3, r1
 8002434:	cb03      	ldmia	r3!, {r0, r1}
 8002436:	6010      	str	r0, [r2, #0]
 8002438:	6051      	str	r1, [r2, #4]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	7213      	strb	r3, [r2, #8]


	  // Create a timer
	  rclc_timer_init_default(&ros2_gpio_input_timer, &support, RCL_MS_TO_NS(1000), ros2_gpio_input_timer_callback);
 800243e:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8002442:	4b44      	ldr	r3, [pc, #272]	; (8002554 <task_ros2_function+0x374>)
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	a326      	add	r3, pc, #152	; (adr r3, 80024e0 <task_ros2_function+0x300>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	4842      	ldr	r0, [pc, #264]	; (8002558 <task_ros2_function+0x378>)
 800244e:	f00c f961 	bl	800e714 <rclc_timer_init_default>
	  rclc_timer_init_default(&ros2_gps_timer, &support, RCL_MS_TO_NS(1000), ros2_gps_timer_callback);
 8002452:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8002456:	4b41      	ldr	r3, [pc, #260]	; (800255c <task_ros2_function+0x37c>)
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	a321      	add	r3, pc, #132	; (adr r3, 80024e0 <task_ros2_function+0x300>)
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	483f      	ldr	r0, [pc, #252]	; (8002560 <task_ros2_function+0x380>)
 8002462:	f00c f957 	bl	800e714 <rclc_timer_init_default>
	  rclc_timer_init_default(&ros2_analog_input_timer, &support, RCL_MS_TO_NS(50), ros2_analog_input_timer_callback);
 8002466:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800246a:	4b3e      	ldr	r3, [pc, #248]	; (8002564 <task_ros2_function+0x384>)
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	a31e      	add	r3, pc, #120	; (adr r3, 80024e8 <task_ros2_function+0x308>)
 8002470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002474:	483c      	ldr	r0, [pc, #240]	; (8002568 <task_ros2_function+0x388>)
 8002476:	f00c f94d 	bl	800e714 <rclc_timer_init_default>

	  // Create executor
	  rclc_executor_init(&executor, &support.context, 4, &allocator);
 800247a:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800247e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002482:	f103 0108 	add.w	r1, r3, #8
 8002486:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800248a:	4613      	mov	r3, r2
 800248c:	2204      	movs	r2, #4
 800248e:	f00b fdfb 	bl	800e088 <rclc_executor_init>

	  rclc_executor_add_subscription(&executor, &ros2_gpio_output_sub, &ros2_gpio_output_msg,
 8002492:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002496:	2300      	movs	r3, #0
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	4b34      	ldr	r3, [pc, #208]	; (800256c <task_ros2_function+0x38c>)
 800249c:	4a34      	ldr	r2, [pc, #208]	; (8002570 <task_ros2_function+0x390>)
 800249e:	4921      	ldr	r1, [pc, #132]	; (8002524 <task_ros2_function+0x344>)
 80024a0:	f00b fe66 	bl	800e170 <rclc_executor_add_subscription>
	  			  &ros2_gpio_output_callback, ON_NEW_DATA); // ON_NEW_DATA does not work properly

	  rclc_executor_add_timer(&executor, &ros2_gpio_input_timer);
 80024a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024a8:	492b      	ldr	r1, [pc, #172]	; (8002558 <task_ros2_function+0x378>)
 80024aa:	4618      	mov	r0, r3
 80024ac:	f00b fe9a 	bl	800e1e4 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &ros2_gps_timer);
 80024b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024b4:	492a      	ldr	r1, [pc, #168]	; (8002560 <task_ros2_function+0x380>)
 80024b6:	4618      	mov	r0, r3
 80024b8:	f00b fe94 	bl	800e1e4 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &ros2_analog_input_timer);
 80024bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024c0:	4929      	ldr	r1, [pc, #164]	; (8002568 <task_ros2_function+0x388>)
 80024c2:	4618      	mov	r0, r3
 80024c4:	f00b fe8e 	bl	800e1e4 <rclc_executor_add_timer>


	  // Run executor
	  rclc_executor_spin(&executor);
 80024c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024cc:	4618      	mov	r0, r3
 80024ce:	f00c f813 	bl	800e4f8 <rclc_executor_spin>

	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 80024d2:	2001      	movs	r0, #1
 80024d4:	f008 f9fd 	bl	800a8d2 <osDelay>
 80024d8:	e7fb      	b.n	80024d2 <task_ros2_function+0x2f2>
 80024da:	bf00      	nop
 80024dc:	f3af 8000 	nop.w
 80024e0:	3b9aca00 	.word	0x3b9aca00
 80024e4:	00000000 	.word	0x00000000
 80024e8:	02faf080 	.word	0x02faf080
 80024ec:	00000000 	.word	0x00000000
 80024f0:	080015bd 	.word	0x080015bd
 80024f4:	08001555 	.word	0x08001555
 80024f8:	08001535 	.word	0x08001535
 80024fc:	08001509 	.word	0x08001509
 8002500:	20010d18 	.word	0x20010d18
 8002504:	0800273d 	.word	0x0800273d
 8002508:	08002781 	.word	0x08002781
 800250c:	080027b9 	.word	0x080027b9
 8002510:	08002825 	.word	0x08002825
 8002514:	0801d1e8 	.word	0x0801d1e8
 8002518:	0801d210 	.word	0x0801d210
 800251c:	0801d214 	.word	0x0801d214
 8002520:	0801d228 	.word	0x0801d228
 8002524:	20010554 	.word	0x20010554
 8002528:	0801d248 	.word	0x0801d248
 800252c:	0801d258 	.word	0x0801d258
 8002530:	20010964 	.word	0x20010964
 8002534:	0801d264 	.word	0x0801d264
 8002538:	20010d7c 	.word	0x20010d7c
 800253c:	0801d26c 	.word	0x0801d26c
 8002540:	200105bc 	.word	0x200105bc
 8002544:	200107a0 	.word	0x200107a0
 8002548:	20010948 	.word	0x20010948
 800254c:	0801d27c 	.word	0x0801d27c
 8002550:	0801d288 	.word	0x0801d288
 8002554:	08001fd1 	.word	0x08001fd1
 8002558:	200109b8 	.word	0x200109b8
 800255c:	0800201d 	.word	0x0800201d
 8002560:	20010824 	.word	0x20010824
 8002564:	080020cd 	.word	0x080020cd
 8002568:	200109b4 	.word	0x200109b4
 800256c:	08002129 	.word	0x08002129
 8002570:	20010820 	.word	0x20010820

08002574 <task_gps_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_gps_function */
void task_gps_function(void *argument)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08c      	sub	sp, #48	; 0x30
 8002578:	af0a      	add	r7, sp, #40	; 0x28
 800257a:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
    osThreadFlagsWait(TF_GPS_DATA, osFlagsWaitAny, osWaitForever);
 800257c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002580:	2100      	movs	r1, #0
 8002582:	2001      	movs	r0, #1
 8002584:	f008 f924 	bl	800a7d0 <osThreadFlagsWait>
    if(sscanf(gps_buffer, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c,%f", &gps_time, &gps_latitude, &ns, &gps_longitude, &ew, &lock, &sats, &gps_hdop, &gps_alt, &unit, &gps_geoid) >= 1){
 8002588:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <task_gps_function+0xcc>)
 800258a:	9308      	str	r3, [sp, #32]
 800258c:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <task_gps_function+0xd0>)
 800258e:	9307      	str	r3, [sp, #28]
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <task_gps_function+0xd4>)
 8002592:	9306      	str	r3, [sp, #24]
 8002594:	4b2d      	ldr	r3, [pc, #180]	; (800264c <task_gps_function+0xd8>)
 8002596:	9305      	str	r3, [sp, #20]
 8002598:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <task_gps_function+0xdc>)
 800259a:	9304      	str	r3, [sp, #16]
 800259c:	4b2d      	ldr	r3, [pc, #180]	; (8002654 <task_gps_function+0xe0>)
 800259e:	9303      	str	r3, [sp, #12]
 80025a0:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <task_gps_function+0xe4>)
 80025a2:	9302      	str	r3, [sp, #8]
 80025a4:	4b2d      	ldr	r3, [pc, #180]	; (800265c <task_gps_function+0xe8>)
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <task_gps_function+0xec>)
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	4b2d      	ldr	r3, [pc, #180]	; (8002664 <task_gps_function+0xf0>)
 80025ae:	4a2e      	ldr	r2, [pc, #184]	; (8002668 <task_gps_function+0xf4>)
 80025b0:	492e      	ldr	r1, [pc, #184]	; (800266c <task_gps_function+0xf8>)
 80025b2:	482f      	ldr	r0, [pc, #188]	; (8002670 <task_gps_function+0xfc>)
 80025b4:	f017 f800 	bl	80195b8 <siscanf>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	dd36      	ble.n	800262c <task_gps_function+0xb8>
    	gps_latitude = (float) convertDegMinToDecDeg(gps_latitude);
 80025be:	4b29      	ldr	r3, [pc, #164]	; (8002664 <task_gps_function+0xf0>)
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	eeb0 0a67 	vmov.f32	s0, s15
 80025c8:	f7ff fcae 	bl	8001f28 <convertDegMinToDecDeg>
 80025cc:	ec53 2b10 	vmov	r2, r3, d0
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	f7fe faf0 	bl	8000bb8 <__aeabi_d2f>
 80025d8:	4603      	mov	r3, r0
 80025da:	4a22      	ldr	r2, [pc, #136]	; (8002664 <task_gps_function+0xf0>)
 80025dc:	6013      	str	r3, [r2, #0]
    	gps_longitude = (float) convertDegMinToDecDeg(gps_longitude);
 80025de:	4b1f      	ldr	r3, [pc, #124]	; (800265c <task_gps_function+0xe8>)
 80025e0:	edd3 7a00 	vldr	s15, [r3]
 80025e4:	eeb0 0a67 	vmov.f32	s0, s15
 80025e8:	f7ff fc9e 	bl	8001f28 <convertDegMinToDecDeg>
 80025ec:	ec53 2b10 	vmov	r2, r3, d0
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	f7fe fae0 	bl	8000bb8 <__aeabi_d2f>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4a18      	ldr	r2, [pc, #96]	; (800265c <task_gps_function+0xe8>)
 80025fc:	6013      	str	r3, [r2, #0]
    	if (ns == 'S') {
 80025fe:	4b18      	ldr	r3, [pc, #96]	; (8002660 <task_gps_function+0xec>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b53      	cmp	r3, #83	; 0x53
 8002604:	d107      	bne.n	8002616 <task_gps_function+0xa2>
    		gps_latitude = - gps_latitude;
 8002606:	4b17      	ldr	r3, [pc, #92]	; (8002664 <task_gps_function+0xf0>)
 8002608:	edd3 7a00 	vldr	s15, [r3]
 800260c:	eef1 7a67 	vneg.f32	s15, s15
 8002610:	4b14      	ldr	r3, [pc, #80]	; (8002664 <task_gps_function+0xf0>)
 8002612:	edc3 7a00 	vstr	s15, [r3]
    	}
    	if (ew = 'W'){
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <task_gps_function+0xe4>)
 8002618:	2257      	movs	r2, #87	; 0x57
 800261a:	701a      	strb	r2, [r3, #0]
    		gps_longitude = - gps_longitude;
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <task_gps_function+0xe8>)
 800261e:	edd3 7a00 	vldr	s15, [r3]
 8002622:	eef1 7a67 	vneg.f32	s15, s15
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <task_gps_function+0xe8>)
 8002628:	edc3 7a00 	vstr	s15, [r3]
    	}
    }
    gps_buffer_index = 0;
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <task_gps_function+0x100>)
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
    memset(gps_buffer, 0, sizeof(gps_buffer));
 8002632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002636:	2100      	movs	r1, #0
 8002638:	480d      	ldr	r0, [pc, #52]	; (8002670 <task_gps_function+0xfc>)
 800263a:	f016 fbf3 	bl	8018e24 <memset>
    osThreadFlagsWait(TF_GPS_DATA, osFlagsWaitAny, osWaitForever);
 800263e:	e79d      	b.n	800257c <task_gps_function+0x8>
 8002640:	200080ec 	.word	0x200080ec
 8002644:	20000002 	.word	0x20000002
 8002648:	200080e8 	.word	0x200080e8
 800264c:	200080e4 	.word	0x200080e4
 8002650:	200080f4 	.word	0x200080f4
 8002654:	200080f0 	.word	0x200080f0
 8002658:	20000001 	.word	0x20000001
 800265c:	200080e0 	.word	0x200080e0
 8002660:	20000000 	.word	0x20000000
 8002664:	200080dc 	.word	0x200080dc
 8002668:	200080d8 	.word	0x200080d8
 800266c:	0801d294 	.word	0x0801d294
 8002670:	20010678 	.word	0x20010678
 8002674:	200080d4 	.word	0x200080d4

08002678 <task_stepper_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_stepper_function */
void task_stepper_function(void *argument)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_stepper_function */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002680:	2001      	movs	r0, #1
 8002682:	f008 f926 	bl	800a8d2 <osDelay>
 8002686:	e7fb      	b.n	8002680 <task_stepper_function+0x8>

08002688 <task_angle_sensor_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_angle_sensor_function */
void task_angle_sensor_function(void *argument)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_angle_sensor_function */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002690:	2001      	movs	r0, #1
 8002692:	f008 f91e 	bl	800a8d2 <osDelay>
 8002696:	e7fb      	b.n	8002690 <task_angle_sensor_function+0x8>

08002698 <task_analog_input_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_analog_input_function */
void task_analog_input_function(void *argument)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_analog_input_function */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80026a0:	2001      	movs	r0, #1
 80026a2:	f008 f916 	bl	800a8d2 <osDelay>
 80026a6:	e7fb      	b.n	80026a0 <task_analog_input_function+0x8>

080026a8 <task_dac_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_dac_function */
void task_dac_function(void *argument)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_dac_function */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80026b0:	2001      	movs	r0, #1
 80026b2:	f008 f90e 	bl	800a8d2 <osDelay>
 80026b6:	e7fb      	b.n	80026b0 <task_dac_function+0x8>

080026b8 <task_digital_io_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_digital_io_function */
void task_digital_io_function(void *argument)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_digital_io_function */
	uint16_t button_input = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	  button_input = HAL_GPIO_ReadPin(PB0_GPIO_Port, PB0_Pin);
 80026c4:	2101      	movs	r1, #1
 80026c6:	480b      	ldr	r0, [pc, #44]	; (80026f4 <task_digital_io_function+0x3c>)
 80026c8:	f002 f9ce 	bl	8004a68 <HAL_GPIO_ReadPin>
 80026cc:	4603      	mov	r3, r0
 80026ce:	81fb      	strh	r3, [r7, #14]

	  if (button_input == GPIO_PIN_RESET){
 80026d0:	89fb      	ldrh	r3, [r7, #14]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d103      	bne.n	80026de <task_digital_io_function+0x26>
		  gpio_input &= !(1<<0);
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <task_digital_io_function+0x40>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e005      	b.n	80026ea <task_digital_io_function+0x32>
	  }
	  else {
		  gpio_input |= (1<<0);
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <task_digital_io_function+0x40>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <task_digital_io_function+0x40>)
 80026e8:	6013      	str	r3, [r2, #0]
	  }
    osDelay(50);
 80026ea:	2032      	movs	r0, #50	; 0x32
 80026ec:	f008 f8f1 	bl	800a8d2 <osDelay>
	  button_input = HAL_GPIO_ReadPin(PB0_GPIO_Port, PB0_Pin);
 80026f0:	e7e8      	b.n	80026c4 <task_digital_io_function+0xc>
 80026f2:	bf00      	nop
 80026f4:	40020000 	.word	0x40020000
 80026f8:	2001082c 	.word	0x2001082c

080026fc <task_main_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_main_function */
void task_main_function(void *argument)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_main_function */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002704:	2001      	movs	r0, #1
 8002706:	f008 f8e4 	bl	800a8d2 <osDelay>
 800270a:	e7fb      	b.n	8002704 <task_main_function+0x8>

0800270c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a04      	ldr	r2, [pc, #16]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d101      	bne.n	8002722 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800271e:	f000 fecd 	bl	80034bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40001400 	.word	0x40001400

08002730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002734:	b672      	cpsid	i
}
 8002736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002738:	e7fe      	b.n	8002738 <Error_Handler+0x8>
	...

0800273c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <microros_allocate+0x3c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4413      	add	r3, r2
 8002750:	461a      	mov	r2, r3
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <microros_allocate+0x3c>)
 8002754:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <microros_allocate+0x40>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4413      	add	r3, r2
 8002760:	461a      	mov	r2, r3
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <microros_allocate+0x40>)
 8002764:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe fc78 	bl	800105c <pvPortMallocMicroROS>
 800276c:	4603      	mov	r3, r0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200080f8 	.word	0x200080f8
 800277c:	200080fc 	.word	0x200080fc

08002780 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00c      	beq.n	80027aa <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7fe fd81 	bl	8001298 <getBlockSize>
 8002796:	4603      	mov	r3, r0
 8002798:	4a06      	ldr	r2, [pc, #24]	; (80027b4 <microros_deallocate+0x34>)
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <microros_deallocate+0x34>)
 80027a2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7fe fd1d 	bl	80011e4 <vPortFreeMicroROS>
  }
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	200080fc 	.word	0x200080fc

080027b8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80027c4:	4b15      	ldr	r3, [pc, #84]	; (800281c <microros_reallocate+0x64>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	4413      	add	r3, r2
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <microros_reallocate+0x64>)
 80027d2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <microros_reallocate+0x68>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4413      	add	r3, r2
 80027de:	461a      	mov	r2, r3
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <microros_reallocate+0x68>)
 80027e2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d104      	bne.n	80027f4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80027ea:	68b8      	ldr	r0, [r7, #8]
 80027ec:	f7fe fc36 	bl	800105c <pvPortMallocMicroROS>
 80027f0:	4603      	mov	r3, r0
 80027f2:	e00e      	b.n	8002812 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f7fe fd4f 	bl	8001298 <getBlockSize>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4a08      	ldr	r2, [pc, #32]	; (8002820 <microros_reallocate+0x68>)
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	461a      	mov	r2, r3
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <microros_reallocate+0x68>)
 8002806:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f7fe fd62 	bl	80012d4 <pvPortReallocMicroROS>
 8002810:	4603      	mov	r3, r0
  }
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	200080f8 	.word	0x200080f8
 8002820:	200080fc 	.word	0x200080fc

08002824 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	4a0c      	ldr	r2, [pc, #48]	; (800286c <microros_zero_allocate+0x48>)
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	4413      	add	r3, r2
 800283e:	461a      	mov	r2, r3
 8002840:	4b0a      	ldr	r3, [pc, #40]	; (800286c <microros_zero_allocate+0x48>)
 8002842:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	4a08      	ldr	r2, [pc, #32]	; (8002870 <microros_zero_allocate+0x4c>)
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	4413      	add	r3, r2
 8002852:	461a      	mov	r2, r3
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <microros_zero_allocate+0x4c>)
 8002856:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f7fe fd74 	bl	8001348 <pvPortCallocMicroROS>
 8002860:	4603      	mov	r3, r0
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	200080f8 	.word	0x200080f8
 8002870:	200080fc 	.word	0x200080fc
 8002874:	00000000 	.word	0x00000000

08002878 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002878:	b5b0      	push	{r4, r5, r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002888:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800288c:	a320      	add	r3, pc, #128	; (adr r3, 8002910 <UTILS_NanosecondsToTimespec+0x98>)
 800288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002892:	f7fe f9e1 	bl	8000c58 <__aeabi_ldivmod>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80028a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028a4:	a31a      	add	r3, pc, #104	; (adr r3, 8002910 <UTILS_NanosecondsToTimespec+0x98>)
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	f7fe f9d5 	bl	8000c58 <__aeabi_ldivmod>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	da1f      	bge.n	80028fa <UTILS_NanosecondsToTimespec+0x82>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4a12      	ldr	r2, [pc, #72]	; (8002908 <UTILS_NanosecondsToTimespec+0x90>)
 80028c0:	fb82 1203 	smull	r1, r2, r2, r3
 80028c4:	1712      	asrs	r2, r2, #28
 80028c6:	17db      	asrs	r3, r3, #31
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	3301      	adds	r3, #1
 80028cc:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	461a      	mov	r2, r3
 80028d8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80028dc:	1a84      	subs	r4, r0, r2
 80028de:	eb61 0503 	sbc.w	r5, r1, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	e9c3 4500 	strd	r4, r5, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	4907      	ldr	r1, [pc, #28]	; (800290c <UTILS_NanosecondsToTimespec+0x94>)
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	441a      	add	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	609a      	str	r2, [r3, #8]
    }
}
 80028fa:	bf00      	nop
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bdb0      	pop	{r4, r5, r7, pc}
 8002902:	bf00      	nop
 8002904:	f3af 8000 	nop.w
 8002908:	44b82fa1 	.word	0x44b82fa1
 800290c:	3b9aca00 	.word	0x3b9aca00
 8002910:	3b9aca00 	.word	0x3b9aca00
 8002914:	00000000 	.word	0x00000000

08002918 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002918:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	6039      	str	r1, [r7, #0]
    TimeOut_t xCurrentTime = { 0 };
 8002924:	f107 0308 	add.w	r3, r7, #8
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	e9c7 2304 	strd	r2, r3, [r7, #16]
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800293a:	f107 0308 	add.w	r3, r7, #8
 800293e:	4618      	mov	r0, r3
 8002940:	f009 fa7a 	bl	800be38 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4618      	mov	r0, r3
 8002948:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	0003      	movs	r3, r0
 8002956:	2200      	movs	r2, #0
 8002958:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	461a      	mov	r2, r3
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002968:	1884      	adds	r4, r0, r2
 800296a:	eb41 0503 	adc.w	r5, r1, r3
 800296e:	e9c7 4504 	strd	r4, r5, [r7, #16]

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002972:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002976:	4622      	mov	r2, r4
 8002978:	462b      	mov	r3, r5
 800297a:	f04f 0000 	mov.w	r0, #0
 800297e:	f04f 0100 	mov.w	r1, #0
 8002982:	0159      	lsls	r1, r3, #5
 8002984:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002988:	0150      	lsls	r0, r2, #5
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	1b12      	subs	r2, r2, r4
 8002990:	eb63 0305 	sbc.w	r3, r3, r5
 8002994:	f04f 0000 	mov.w	r0, #0
 8002998:	f04f 0100 	mov.w	r1, #0
 800299c:	0259      	lsls	r1, r3, #9
 800299e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80029a2:	0250      	lsls	r0, r2, #9
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	1912      	adds	r2, r2, r4
 80029aa:	eb45 0303 	adc.w	r3, r5, r3
 80029ae:	f04f 0000 	mov.w	r0, #0
 80029b2:	f04f 0100 	mov.w	r1, #0
 80029b6:	0199      	lsls	r1, r3, #6
 80029b8:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 80029bc:	0190      	lsls	r0, r2, #6
 80029be:	1a80      	subs	r0, r0, r2
 80029c0:	eb61 0103 	sbc.w	r1, r1, r3
 80029c4:	eb10 0804 	adds.w	r8, r0, r4
 80029c8:	eb41 0905 	adc.w	r9, r1, r5
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	4640      	mov	r0, r8
 80029d0:	4649      	mov	r1, r9
 80029d2:	f7ff ff51 	bl	8002878 <UTILS_NanosecondsToTimespec>

    return 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080029e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	607b      	str	r3, [r7, #4]
 80029ee:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <HAL_MspInit+0x54>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	4a11      	ldr	r2, [pc, #68]	; (8002a38 <HAL_MspInit+0x54>)
 80029f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f8:	6453      	str	r3, [r2, #68]	; 0x44
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <HAL_MspInit+0x54>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a02:	607b      	str	r3, [r7, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_MspInit+0x54>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <HAL_MspInit+0x54>)
 8002a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a14:	6413      	str	r3, [r2, #64]	; 0x40
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <HAL_MspInit+0x54>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a22:	2200      	movs	r2, #0
 8002a24:	210f      	movs	r1, #15
 8002a26:	f06f 0001 	mvn.w	r0, #1
 8002a2a:	f001 fa55 	bl	8003ed8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800

08002a3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08a      	sub	sp, #40	; 0x28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a2f      	ldr	r2, [pc, #188]	; (8002b18 <HAL_ADC_MspInit+0xdc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d157      	bne.n	8002b0e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <HAL_ADC_MspInit+0xe0>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	4a2d      	ldr	r2, [pc, #180]	; (8002b1c <HAL_ADC_MspInit+0xe0>)
 8002a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6e:	4b2b      	ldr	r3, [pc, #172]	; (8002b1c <HAL_ADC_MspInit+0xe0>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	4b27      	ldr	r3, [pc, #156]	; (8002b1c <HAL_ADC_MspInit+0xe0>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	4a26      	ldr	r2, [pc, #152]	; (8002b1c <HAL_ADC_MspInit+0xe0>)
 8002a84:	f043 0304 	orr.w	r3, r3, #4
 8002a88:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8a:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <HAL_ADC_MspInit+0xe0>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a96:	2330      	movs	r3, #48	; 0x30
 8002a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	481d      	ldr	r0, [pc, #116]	; (8002b20 <HAL_ADC_MspInit+0xe4>)
 8002aaa:	f001 fe41 	bl	8004730 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002aae:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <HAL_ADC_MspInit+0xe8>)
 8002ab0:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <HAL_ADC_MspInit+0xec>)
 8002ab2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <HAL_ADC_MspInit+0xe8>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aba:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <HAL_ADC_MspInit+0xe8>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac0:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <HAL_ADC_MspInit+0xe8>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ac6:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <HAL_ADC_MspInit+0xe8>)
 8002ac8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002acc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <HAL_ADC_MspInit+0xe8>)
 8002ad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ad4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ad6:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <HAL_ADC_MspInit+0xe8>)
 8002ad8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002adc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ade:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <HAL_ADC_MspInit+0xe8>)
 8002ae0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ae4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ae6:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <HAL_ADC_MspInit+0xe8>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aec:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <HAL_ADC_MspInit+0xe8>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002af2:	480c      	ldr	r0, [pc, #48]	; (8002b24 <HAL_ADC_MspInit+0xe8>)
 8002af4:	f001 fa1a 	bl	8003f2c <HAL_DMA_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002afe:	f7ff fe17 	bl	8002730 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <HAL_ADC_MspInit+0xe8>)
 8002b06:	639a      	str	r2, [r3, #56]	; 0x38
 8002b08:	4a06      	ldr	r2, [pc, #24]	; (8002b24 <HAL_ADC_MspInit+0xe8>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b0e:	bf00      	nop
 8002b10:	3728      	adds	r7, #40	; 0x28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40012000 	.word	0x40012000
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40020800 	.word	0x40020800
 8002b24:	200108e8 	.word	0x200108e8
 8002b28:	40026410 	.word	0x40026410

08002b2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b34:	f107 0314 	add.w	r3, r7, #20
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a19      	ldr	r2, [pc, #100]	; (8002bb0 <HAL_I2C_MspInit+0x84>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d12c      	bne.n	8002ba8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <HAL_I2C_MspInit+0x88>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	4a17      	ldr	r2, [pc, #92]	; (8002bb4 <HAL_I2C_MspInit+0x88>)
 8002b58:	f043 0302 	orr.w	r3, r3, #2
 8002b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <HAL_I2C_MspInit+0x88>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002b6a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b70:	2312      	movs	r3, #18
 8002b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b74:	2301      	movs	r3, #1
 8002b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	4619      	mov	r1, r3
 8002b86:	480c      	ldr	r0, [pc, #48]	; (8002bb8 <HAL_I2C_MspInit+0x8c>)
 8002b88:	f001 fdd2 	bl	8004730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <HAL_I2C_MspInit+0x88>)
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	4a07      	ldr	r2, [pc, #28]	; (8002bb4 <HAL_I2C_MspInit+0x88>)
 8002b96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_I2C_MspInit+0x88>)
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ba8:	bf00      	nop
 8002baa:	3728      	adds	r7, #40	; 0x28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40005400 	.word	0x40005400
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40020400 	.word	0x40020400

08002bbc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08e      	sub	sp, #56	; 0x38
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bd4:	f107 0314 	add.w	r3, r7, #20
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a31      	ldr	r2, [pc, #196]	; (8002cac <HAL_I2S_MspInit+0xf0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d15a      	bne.n	8002ca2 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002bec:	2301      	movs	r3, #1
 8002bee:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002bf0:	23c0      	movs	r3, #192	; 0xc0
 8002bf2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f004 fd27 	bl	8007650 <HAL_RCCEx_PeriphCLKConfig>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002c08:	f7ff fd92 	bl	8002730 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	4b27      	ldr	r3, [pc, #156]	; (8002cb0 <HAL_I2S_MspInit+0xf4>)
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	4a26      	ldr	r2, [pc, #152]	; (8002cb0 <HAL_I2S_MspInit+0xf4>)
 8002c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1c:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <HAL_I2S_MspInit+0xf4>)
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <HAL_I2S_MspInit+0xf4>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	4a1f      	ldr	r2, [pc, #124]	; (8002cb0 <HAL_I2S_MspInit+0xf4>)
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	6313      	str	r3, [r2, #48]	; 0x30
 8002c38:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <HAL_I2S_MspInit+0xf4>)
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c44:	2300      	movs	r3, #0
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_I2S_MspInit+0xf4>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	4a18      	ldr	r2, [pc, #96]	; (8002cb0 <HAL_I2S_MspInit+0xf4>)
 8002c4e:	f043 0304 	orr.w	r3, r3, #4
 8002c52:	6313      	str	r3, [r2, #48]	; 0x30
 8002c54:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <HAL_I2S_MspInit+0xf4>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002c60:	2310      	movs	r3, #16
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c64:	2302      	movs	r3, #2
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c70:	2306      	movs	r3, #6
 8002c72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c78:	4619      	mov	r1, r3
 8002c7a:	480e      	ldr	r0, [pc, #56]	; (8002cb4 <HAL_I2S_MspInit+0xf8>)
 8002c7c:	f001 fd58 	bl	8004730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002c80:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c86:	2302      	movs	r3, #2
 8002c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c92:	2306      	movs	r3, #6
 8002c94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4806      	ldr	r0, [pc, #24]	; (8002cb8 <HAL_I2S_MspInit+0xfc>)
 8002c9e:	f001 fd47 	bl	8004730 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002ca2:	bf00      	nop
 8002ca4:	3738      	adds	r7, #56	; 0x38
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40003c00 	.word	0x40003c00
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40020000 	.word	0x40020000
 8002cb8:	40020800 	.word	0x40020800

08002cbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08a      	sub	sp, #40	; 0x28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 0314 	add.w	r3, r7, #20
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a19      	ldr	r2, [pc, #100]	; (8002d40 <HAL_SPI_MspInit+0x84>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d12b      	bne.n	8002d36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <HAL_SPI_MspInit+0x88>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	4a17      	ldr	r2, [pc, #92]	; (8002d44 <HAL_SPI_MspInit+0x88>)
 8002ce8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cec:	6453      	str	r3, [r2, #68]	; 0x44
 8002cee:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <HAL_SPI_MspInit+0x88>)
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <HAL_SPI_MspInit+0x88>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a10      	ldr	r2, [pc, #64]	; (8002d44 <HAL_SPI_MspInit+0x88>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <HAL_SPI_MspInit+0x88>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002d16:	23e0      	movs	r3, #224	; 0xe0
 8002d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d22:	2300      	movs	r3, #0
 8002d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d26:	2305      	movs	r3, #5
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2a:	f107 0314 	add.w	r3, r7, #20
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4805      	ldr	r0, [pc, #20]	; (8002d48 <HAL_SPI_MspInit+0x8c>)
 8002d32:	f001 fcfd 	bl	8004730 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d36:	bf00      	nop
 8002d38:	3728      	adds	r7, #40	; 0x28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40013000 	.word	0x40013000
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020000 	.word	0x40020000

08002d4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0b      	ldr	r2, [pc, #44]	; (8002d88 <HAL_TIM_Base_MspInit+0x3c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d10d      	bne.n	8002d7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <HAL_TIM_Base_MspInit+0x40>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <HAL_TIM_Base_MspInit+0x40>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d6e:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <HAL_TIM_Base_MspInit+0x40>)
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002d7a:	bf00      	nop
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40010000 	.word	0x40010000
 8002d8c:	40023800 	.word	0x40023800

08002d90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	f107 030c 	add.w	r3, r7, #12
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <HAL_TIM_MspPostInit+0x68>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d11e      	bne.n	8002df0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <HAL_TIM_MspPostInit+0x6c>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	4a10      	ldr	r2, [pc, #64]	; (8002dfc <HAL_TIM_MspPostInit+0x6c>)
 8002dbc:	f043 0310 	orr.w	r3, r3, #16
 8002dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <HAL_TIM_MspPostInit+0x6c>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = STEPPER_PUL_Pin;
 8002dce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002de0:	2301      	movs	r3, #1
 8002de2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEPPER_PUL_GPIO_Port, &GPIO_InitStruct);
 8002de4:	f107 030c 	add.w	r3, r7, #12
 8002de8:	4619      	mov	r1, r3
 8002dea:	4805      	ldr	r0, [pc, #20]	; (8002e00 <HAL_TIM_MspPostInit+0x70>)
 8002dec:	f001 fca0 	bl	8004730 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002df0:	bf00      	nop
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40010000 	.word	0x40010000
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40021000 	.word	0x40021000

08002e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08c      	sub	sp, #48	; 0x30
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	f107 031c 	add.w	r3, r7, #28
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a7a      	ldr	r2, [pc, #488]	; (800300c <HAL_UART_MspInit+0x208>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	f040 8094 	bne.w	8002f50 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61bb      	str	r3, [r7, #24]
 8002e2c:	4b78      	ldr	r3, [pc, #480]	; (8003010 <HAL_UART_MspInit+0x20c>)
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	4a77      	ldr	r2, [pc, #476]	; (8003010 <HAL_UART_MspInit+0x20c>)
 8002e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e36:	6413      	str	r3, [r2, #64]	; 0x40
 8002e38:	4b75      	ldr	r3, [pc, #468]	; (8003010 <HAL_UART_MspInit+0x20c>)
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	4b71      	ldr	r3, [pc, #452]	; (8003010 <HAL_UART_MspInit+0x20c>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	4a70      	ldr	r2, [pc, #448]	; (8003010 <HAL_UART_MspInit+0x20c>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6313      	str	r3, [r2, #48]	; 0x30
 8002e54:	4b6e      	ldr	r3, [pc, #440]	; (8003010 <HAL_UART_MspInit+0x20c>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = ROS_USART_TX_Pin|ROS_USART_RX_Pin;
 8002e60:	230c      	movs	r3, #12
 8002e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e64:	2302      	movs	r3, #2
 8002e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e70:	2307      	movs	r3, #7
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e74:	f107 031c 	add.w	r3, r7, #28
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4866      	ldr	r0, [pc, #408]	; (8003014 <HAL_UART_MspInit+0x210>)
 8002e7c:	f001 fc58 	bl	8004730 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002e80:	4b65      	ldr	r3, [pc, #404]	; (8003018 <HAL_UART_MspInit+0x214>)
 8002e82:	4a66      	ldr	r2, [pc, #408]	; (800301c <HAL_UART_MspInit+0x218>)
 8002e84:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002e86:	4b64      	ldr	r3, [pc, #400]	; (8003018 <HAL_UART_MspInit+0x214>)
 8002e88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e8c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e8e:	4b62      	ldr	r3, [pc, #392]	; (8003018 <HAL_UART_MspInit+0x214>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e94:	4b60      	ldr	r3, [pc, #384]	; (8003018 <HAL_UART_MspInit+0x214>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e9a:	4b5f      	ldr	r3, [pc, #380]	; (8003018 <HAL_UART_MspInit+0x214>)
 8002e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ea0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ea2:	4b5d      	ldr	r3, [pc, #372]	; (8003018 <HAL_UART_MspInit+0x214>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ea8:	4b5b      	ldr	r3, [pc, #364]	; (8003018 <HAL_UART_MspInit+0x214>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002eae:	4b5a      	ldr	r3, [pc, #360]	; (8003018 <HAL_UART_MspInit+0x214>)
 8002eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eb4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002eb6:	4b58      	ldr	r3, [pc, #352]	; (8003018 <HAL_UART_MspInit+0x214>)
 8002eb8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ebc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ebe:	4b56      	ldr	r3, [pc, #344]	; (8003018 <HAL_UART_MspInit+0x214>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ec4:	4854      	ldr	r0, [pc, #336]	; (8003018 <HAL_UART_MspInit+0x214>)
 8002ec6:	f001 f831 	bl	8003f2c <HAL_DMA_Init>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002ed0:	f7ff fc2e 	bl	8002730 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a50      	ldr	r2, [pc, #320]	; (8003018 <HAL_UART_MspInit+0x214>)
 8002ed8:	639a      	str	r2, [r3, #56]	; 0x38
 8002eda:	4a4f      	ldr	r2, [pc, #316]	; (8003018 <HAL_UART_MspInit+0x214>)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002ee0:	4b4f      	ldr	r3, [pc, #316]	; (8003020 <HAL_UART_MspInit+0x21c>)
 8002ee2:	4a50      	ldr	r2, [pc, #320]	; (8003024 <HAL_UART_MspInit+0x220>)
 8002ee4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002ee6:	4b4e      	ldr	r3, [pc, #312]	; (8003020 <HAL_UART_MspInit+0x21c>)
 8002ee8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002eec:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eee:	4b4c      	ldr	r3, [pc, #304]	; (8003020 <HAL_UART_MspInit+0x21c>)
 8002ef0:	2240      	movs	r2, #64	; 0x40
 8002ef2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ef4:	4b4a      	ldr	r3, [pc, #296]	; (8003020 <HAL_UART_MspInit+0x21c>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002efa:	4b49      	ldr	r3, [pc, #292]	; (8003020 <HAL_UART_MspInit+0x21c>)
 8002efc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f00:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f02:	4b47      	ldr	r3, [pc, #284]	; (8003020 <HAL_UART_MspInit+0x21c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f08:	4b45      	ldr	r3, [pc, #276]	; (8003020 <HAL_UART_MspInit+0x21c>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002f0e:	4b44      	ldr	r3, [pc, #272]	; (8003020 <HAL_UART_MspInit+0x21c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f14:	4b42      	ldr	r3, [pc, #264]	; (8003020 <HAL_UART_MspInit+0x21c>)
 8002f16:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f1a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f1c:	4b40      	ldr	r3, [pc, #256]	; (8003020 <HAL_UART_MspInit+0x21c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002f22:	483f      	ldr	r0, [pc, #252]	; (8003020 <HAL_UART_MspInit+0x21c>)
 8002f24:	f001 f802 	bl	8003f2c <HAL_DMA_Init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002f2e:	f7ff fbff 	bl	8002730 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a3a      	ldr	r2, [pc, #232]	; (8003020 <HAL_UART_MspInit+0x21c>)
 8002f36:	635a      	str	r2, [r3, #52]	; 0x34
 8002f38:	4a39      	ldr	r2, [pc, #228]	; (8003020 <HAL_UART_MspInit+0x21c>)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2105      	movs	r1, #5
 8002f42:	2026      	movs	r0, #38	; 0x26
 8002f44:	f000 ffc8 	bl	8003ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f48:	2026      	movs	r0, #38	; 0x26
 8002f4a:	f000 ffe1 	bl	8003f10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f4e:	e058      	b.n	8003002 <HAL_UART_MspInit+0x1fe>
  else if(huart->Instance==USART3)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a34      	ldr	r2, [pc, #208]	; (8003028 <HAL_UART_MspInit+0x224>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d153      	bne.n	8003002 <HAL_UART_MspInit+0x1fe>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	4b2c      	ldr	r3, [pc, #176]	; (8003010 <HAL_UART_MspInit+0x20c>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	4a2b      	ldr	r2, [pc, #172]	; (8003010 <HAL_UART_MspInit+0x20c>)
 8002f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f68:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6a:	4b29      	ldr	r3, [pc, #164]	; (8003010 <HAL_UART_MspInit+0x20c>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	4b25      	ldr	r3, [pc, #148]	; (8003010 <HAL_UART_MspInit+0x20c>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	4a24      	ldr	r2, [pc, #144]	; (8003010 <HAL_UART_MspInit+0x20c>)
 8002f80:	f043 0302 	orr.w	r3, r3, #2
 8002f84:	6313      	str	r3, [r2, #48]	; 0x30
 8002f86:	4b22      	ldr	r3, [pc, #136]	; (8003010 <HAL_UART_MspInit+0x20c>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <HAL_UART_MspInit+0x20c>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	4a1d      	ldr	r2, [pc, #116]	; (8003010 <HAL_UART_MspInit+0x20c>)
 8002f9c:	f043 0308 	orr.w	r3, r3, #8
 8002fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <HAL_UART_MspInit+0x20c>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_USART_RX_Pin;
 8002fae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fc0:	2307      	movs	r3, #7
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPS_USART_RX_GPIO_Port, &GPIO_InitStruct);
 8002fc4:	f107 031c 	add.w	r3, r7, #28
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4818      	ldr	r0, [pc, #96]	; (800302c <HAL_UART_MspInit+0x228>)
 8002fcc:	f001 fbb0 	bl	8004730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPS_USART_TX_Pin;
 8002fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fe2:	2307      	movs	r3, #7
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPS_USART_TX_GPIO_Port, &GPIO_InitStruct);
 8002fe6:	f107 031c 	add.w	r3, r7, #28
 8002fea:	4619      	mov	r1, r3
 8002fec:	4810      	ldr	r0, [pc, #64]	; (8003030 <HAL_UART_MspInit+0x22c>)
 8002fee:	f001 fb9f 	bl	8004730 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2105      	movs	r1, #5
 8002ff6:	2027      	movs	r0, #39	; 0x27
 8002ff8:	f000 ff6e 	bl	8003ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ffc:	2027      	movs	r0, #39	; 0x27
 8002ffe:	f000 ff87 	bl	8003f10 <HAL_NVIC_EnableIRQ>
}
 8003002:	bf00      	nop
 8003004:	3730      	adds	r7, #48	; 0x30
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40004400 	.word	0x40004400
 8003010:	40023800 	.word	0x40023800
 8003014:	40020000 	.word	0x40020000
 8003018:	20010558 	.word	0x20010558
 800301c:	40026088 	.word	0x40026088
 8003020:	20010880 	.word	0x20010880
 8003024:	400260a0 	.word	0x400260a0
 8003028:	40004800 	.word	0x40004800
 800302c:	40020400 	.word	0x40020400
 8003030:	40020c00 	.word	0x40020c00

08003034 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	; 0x28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303c:	f107 0314 	add.w	r3, r7, #20
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003054:	d147      	bne.n	80030e6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	4b25      	ldr	r3, [pc, #148]	; (80030f0 <HAL_HCD_MspInit+0xbc>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4a24      	ldr	r2, [pc, #144]	; (80030f0 <HAL_HCD_MspInit+0xbc>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6313      	str	r3, [r2, #48]	; 0x30
 8003066:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <HAL_HCD_MspInit+0xbc>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8003072:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003078:	2300      	movs	r3, #0
 800307a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	4619      	mov	r1, r3
 8003086:	481b      	ldr	r0, [pc, #108]	; (80030f4 <HAL_HCD_MspInit+0xc0>)
 8003088:	f001 fb52 	bl	8004730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800308c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003092:	2302      	movs	r3, #2
 8003094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309a:	2300      	movs	r3, #0
 800309c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800309e:	230a      	movs	r3, #10
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a2:	f107 0314 	add.w	r3, r7, #20
 80030a6:	4619      	mov	r1, r3
 80030a8:	4812      	ldr	r0, [pc, #72]	; (80030f4 <HAL_HCD_MspInit+0xc0>)
 80030aa:	f001 fb41 	bl	8004730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80030ae:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <HAL_HCD_MspInit+0xbc>)
 80030b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b2:	4a0f      	ldr	r2, [pc, #60]	; (80030f0 <HAL_HCD_MspInit+0xbc>)
 80030b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b8:	6353      	str	r3, [r2, #52]	; 0x34
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <HAL_HCD_MspInit+0xbc>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	4a0b      	ldr	r2, [pc, #44]	; (80030f0 <HAL_HCD_MspInit+0xbc>)
 80030c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_HCD_MspInit+0xbc>)
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80030d6:	2200      	movs	r2, #0
 80030d8:	2105      	movs	r1, #5
 80030da:	2043      	movs	r0, #67	; 0x43
 80030dc:	f000 fefc 	bl	8003ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80030e0:	2043      	movs	r0, #67	; 0x43
 80030e2:	f000 ff15 	bl	8003f10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80030e6:	bf00      	nop
 80030e8:	3728      	adds	r7, #40	; 0x28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40020000 	.word	0x40020000

080030f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08c      	sub	sp, #48	; 0x30
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8003108:	2200      	movs	r2, #0
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	2037      	movs	r0, #55	; 0x37
 800310e:	f000 fee3 	bl	8003ed8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003112:	2037      	movs	r0, #55	; 0x37
 8003114:	f000 fefc 	bl	8003f10 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	4b1f      	ldr	r3, [pc, #124]	; (800319c <HAL_InitTick+0xa4>)
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	4a1e      	ldr	r2, [pc, #120]	; (800319c <HAL_InitTick+0xa4>)
 8003122:	f043 0320 	orr.w	r3, r3, #32
 8003126:	6413      	str	r3, [r2, #64]	; 0x40
 8003128:	4b1c      	ldr	r3, [pc, #112]	; (800319c <HAL_InitTick+0xa4>)
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003134:	f107 0210 	add.w	r2, r7, #16
 8003138:	f107 0314 	add.w	r3, r7, #20
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f004 fa54 	bl	80075ec <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003144:	f004 fa2a 	bl	800759c <HAL_RCC_GetPCLK1Freq>
 8003148:	4603      	mov	r3, r0
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	4a13      	ldr	r2, [pc, #76]	; (80031a0 <HAL_InitTick+0xa8>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	0c9b      	lsrs	r3, r3, #18
 8003158:	3b01      	subs	r3, #1
 800315a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <HAL_InitTick+0xac>)
 800315e:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <HAL_InitTick+0xb0>)
 8003160:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <HAL_InitTick+0xac>)
 8003164:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003168:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800316a:	4a0e      	ldr	r2, [pc, #56]	; (80031a4 <HAL_InitTick+0xac>)
 800316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <HAL_InitTick+0xac>)
 8003172:	2200      	movs	r2, #0
 8003174:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_InitTick+0xac>)
 8003178:	2200      	movs	r2, #0
 800317a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800317c:	4809      	ldr	r0, [pc, #36]	; (80031a4 <HAL_InitTick+0xac>)
 800317e:	f004 fc30 	bl	80079e2 <HAL_TIM_Base_Init>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d104      	bne.n	8003192 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8003188:	4806      	ldr	r0, [pc, #24]	; (80031a4 <HAL_InitTick+0xac>)
 800318a:	f004 fc79 	bl	8007a80 <HAL_TIM_Base_Start_IT>
 800318e:	4603      	mov	r3, r0
 8003190:	e000      	b.n	8003194 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
}
 8003194:	4618      	mov	r0, r3
 8003196:	3730      	adds	r7, #48	; 0x30
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40023800 	.word	0x40023800
 80031a0:	431bde83 	.word	0x431bde83
 80031a4:	20010dd4 	.word	0x20010dd4
 80031a8:	40001400 	.word	0x40001400

080031ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031b0:	e7fe      	b.n	80031b0 <NMI_Handler+0x4>

080031b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031b2:	b480      	push	{r7}
 80031b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031b6:	e7fe      	b.n	80031b6 <HardFault_Handler+0x4>

080031b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031bc:	e7fe      	b.n	80031bc <MemManage_Handler+0x4>

080031be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031be:	b480      	push	{r7}
 80031c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031c2:	e7fe      	b.n	80031c2 <BusFault_Handler+0x4>

080031c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031c8:	e7fe      	b.n	80031c8 <UsageFault_Handler+0x4>

080031ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031ca:	b480      	push	{r7}
 80031cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80031dc:	2001      	movs	r0, #1
 80031de:	f001 fc75 	bl	8004acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80031ec:	4802      	ldr	r0, [pc, #8]	; (80031f8 <DMA1_Stream5_IRQHandler+0x10>)
 80031ee:	f001 f835 	bl	800425c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20010558 	.word	0x20010558

080031fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003200:	4802      	ldr	r0, [pc, #8]	; (800320c <DMA1_Stream6_IRQHandler+0x10>)
 8003202:	f001 f82b 	bl	800425c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20010880 	.word	0x20010880

08003210 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003214:	4802      	ldr	r0, [pc, #8]	; (8003220 <USART2_IRQHandler+0x10>)
 8003216:	f005 fd2f 	bl	8008c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20010d18 	.word	0x20010d18

08003224 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003228:	4802      	ldr	r0, [pc, #8]	; (8003234 <USART3_IRQHandler+0x10>)
 800322a:	f005 fd25 	bl	8008c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	200105c0 	.word	0x200105c0

08003238 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800323c:	4802      	ldr	r0, [pc, #8]	; (8003248 <TIM7_IRQHandler+0x10>)
 800323e:	f004 fce8 	bl	8007c12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20010dd4 	.word	0x20010dd4

0800324c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003250:	4802      	ldr	r0, [pc, #8]	; (800325c <DMA2_Stream0_IRQHandler+0x10>)
 8003252:	f001 f803 	bl	800425c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003256:	bf00      	nop
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	200108e8 	.word	0x200108e8

08003260 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003264:	4802      	ldr	r0, [pc, #8]	; (8003270 <OTG_FS_IRQHandler+0x10>)
 8003266:	f001 fcb6 	bl	8004bd6 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20010a14 	.word	0x20010a14

08003274 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
	return 1;
 8003278:	2301      	movs	r3, #1
}
 800327a:	4618      	mov	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <_kill>:

int _kill(int pid, int sig)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800328e:	f015 fcaf 	bl	8018bf0 <__errno>
 8003292:	4603      	mov	r3, r0
 8003294:	2216      	movs	r2, #22
 8003296:	601a      	str	r2, [r3, #0]
	return -1;
 8003298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <_exit>:

void _exit (int status)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80032ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ffe7 	bl	8003284 <_kill>
	while (1) {}		/* Make sure we hang here */
 80032b6:	e7fe      	b.n	80032b6 <_exit+0x12>

080032b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	e00a      	b.n	80032e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80032ca:	f3af 8000 	nop.w
 80032ce:	4601      	mov	r1, r0
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	60ba      	str	r2, [r7, #8]
 80032d6:	b2ca      	uxtb	r2, r1
 80032d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	3301      	adds	r3, #1
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	dbf0      	blt.n	80032ca <_read+0x12>
	}

return len;
 80032e8:	687b      	ldr	r3, [r7, #4]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b086      	sub	sp, #24
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	e009      	b.n	8003318 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	60ba      	str	r2, [r7, #8]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	3301      	adds	r3, #1
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	429a      	cmp	r2, r3
 800331e:	dbf1      	blt.n	8003304 <_write+0x12>
	}
	return len;
 8003320:	687b      	ldr	r3, [r7, #4]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <_close>:

int _close(int file)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
	return -1;
 8003332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003352:	605a      	str	r2, [r3, #4]
	return 0;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <_isatty>:

int _isatty(int file)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
	return 1;
 800336a:	2301      	movs	r3, #1
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
	return 0;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
	...

08003394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800339c:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <_sbrk+0x5c>)
 800339e:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <_sbrk+0x60>)
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033a8:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <_sbrk+0x64>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d102      	bne.n	80033b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033b0:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <_sbrk+0x64>)
 80033b2:	4a12      	ldr	r2, [pc, #72]	; (80033fc <_sbrk+0x68>)
 80033b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033b6:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <_sbrk+0x64>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d207      	bcs.n	80033d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033c4:	f015 fc14 	bl	8018bf0 <__errno>
 80033c8:	4603      	mov	r3, r0
 80033ca:	220c      	movs	r2, #12
 80033cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033d2:	e009      	b.n	80033e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033d4:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <_sbrk+0x64>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033da:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <_sbrk+0x64>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4413      	add	r3, r2
 80033e2:	4a05      	ldr	r2, [pc, #20]	; (80033f8 <_sbrk+0x64>)
 80033e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033e6:	68fb      	ldr	r3, [r7, #12]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20020000 	.word	0x20020000
 80033f4:	00000400 	.word	0x00000400
 80033f8:	20008104 	.word	0x20008104
 80033fc:	20016010 	.word	0x20016010

08003400 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003404:	4b06      	ldr	r3, [pc, #24]	; (8003420 <SystemInit+0x20>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	4a05      	ldr	r2, [pc, #20]	; (8003420 <SystemInit+0x20>)
 800340c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800345c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003428:	480d      	ldr	r0, [pc, #52]	; (8003460 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800342a:	490e      	ldr	r1, [pc, #56]	; (8003464 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800342c:	4a0e      	ldr	r2, [pc, #56]	; (8003468 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800342e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003430:	e002      	b.n	8003438 <LoopCopyDataInit>

08003432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003436:	3304      	adds	r3, #4

08003438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800343a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800343c:	d3f9      	bcc.n	8003432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800343e:	4a0b      	ldr	r2, [pc, #44]	; (800346c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003440:	4c0b      	ldr	r4, [pc, #44]	; (8003470 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003444:	e001      	b.n	800344a <LoopFillZerobss>

08003446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003448:	3204      	adds	r2, #4

0800344a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800344a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800344c:	d3fb      	bcc.n	8003446 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800344e:	f7ff ffd7 	bl	8003400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003452:	f015 fc87 	bl	8018d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003456:	f7fe f905 	bl	8001664 <main>
  bx  lr    
 800345a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800345c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003464:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 8003468:	0801ef68 	.word	0x0801ef68
  ldr r2, =_sbss
 800346c:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8003470:	20016010 	.word	0x20016010

08003474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003474:	e7fe      	b.n	8003474 <ADC_IRQHandler>
	...

08003478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800347c:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <HAL_Init+0x40>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a0d      	ldr	r2, [pc, #52]	; (80034b8 <HAL_Init+0x40>)
 8003482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_Init+0x40>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <HAL_Init+0x40>)
 800348e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003494:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <HAL_Init+0x40>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a07      	ldr	r2, [pc, #28]	; (80034b8 <HAL_Init+0x40>)
 800349a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800349e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034a0:	2003      	movs	r0, #3
 80034a2:	f000 fd0e 	bl	8003ec2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034a6:	200f      	movs	r0, #15
 80034a8:	f7ff fe26 	bl	80030f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034ac:	f7ff fa9a 	bl	80029e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40023c00 	.word	0x40023c00

080034bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <HAL_IncTick+0x20>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <HAL_IncTick+0x24>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4413      	add	r3, r2
 80034cc:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <HAL_IncTick+0x24>)
 80034ce:	6013      	str	r3, [r2, #0]
}
 80034d0:	bf00      	nop
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000010 	.word	0x20000010
 80034e0:	20010e1c 	.word	0x20010e1c

080034e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return uwTick;
 80034e8:	4b03      	ldr	r3, [pc, #12]	; (80034f8 <HAL_GetTick+0x14>)
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20010e1c 	.word	0x20010e1c

080034fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003504:	f7ff ffee 	bl	80034e4 <HAL_GetTick>
 8003508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003514:	d005      	beq.n	8003522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003516:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <HAL_Delay+0x44>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4413      	add	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003522:	bf00      	nop
 8003524:	f7ff ffde 	bl	80034e4 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	429a      	cmp	r2, r3
 8003532:	d8f7      	bhi.n	8003524 <HAL_Delay+0x28>
  {
  }
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000010 	.word	0x20000010

08003544 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e033      	b.n	80035c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d109      	bne.n	8003576 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff fa6a 	bl	8002a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b00      	cmp	r3, #0
 8003580:	d118      	bne.n	80035b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800358a:	f023 0302 	bic.w	r3, r3, #2
 800358e:	f043 0202 	orr.w	r2, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fa68 	bl	8003a6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f023 0303 	bic.w	r3, r3, #3
 80035aa:	f043 0201 	orr.w	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40
 80035b2:	e001      	b.n	80035b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_ADC_Start_DMA+0x1e>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e0e9      	b.n	80037be <HAL_ADC_Start_DMA+0x1f2>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d018      	beq.n	8003632 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003610:	4b6d      	ldr	r3, [pc, #436]	; (80037c8 <HAL_ADC_Start_DMA+0x1fc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a6d      	ldr	r2, [pc, #436]	; (80037cc <HAL_ADC_Start_DMA+0x200>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	0c9a      	lsrs	r2, r3, #18
 800361c:	4613      	mov	r3, r2
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	4413      	add	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003624:	e002      	b.n	800362c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	3b01      	subs	r3, #1
 800362a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f9      	bne.n	8003626 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003640:	d107      	bne.n	8003652 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003650:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b01      	cmp	r3, #1
 800365e:	f040 80a1 	bne.w	80037a4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800366a:	f023 0301 	bic.w	r3, r3, #1
 800366e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003680:	2b00      	cmp	r3, #0
 8003682:	d007      	beq.n	8003694 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800368c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800369c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a0:	d106      	bne.n	80036b0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f023 0206 	bic.w	r2, r3, #6
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
 80036ae:	e002      	b.n	80036b6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036be:	4b44      	ldr	r3, [pc, #272]	; (80037d0 <HAL_ADC_Start_DMA+0x204>)
 80036c0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	4a43      	ldr	r2, [pc, #268]	; (80037d4 <HAL_ADC_Start_DMA+0x208>)
 80036c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ce:	4a42      	ldr	r2, [pc, #264]	; (80037d8 <HAL_ADC_Start_DMA+0x20c>)
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d6:	4a41      	ldr	r2, [pc, #260]	; (80037dc <HAL_ADC_Start_DMA+0x210>)
 80036d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80036e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80036f2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003702:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	334c      	adds	r3, #76	; 0x4c
 800370e:	4619      	mov	r1, r3
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f000 fcb8 	bl	8004088 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	2b00      	cmp	r3, #0
 8003722:	d12a      	bne.n	800377a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2d      	ldr	r2, [pc, #180]	; (80037e0 <HAL_ADC_Start_DMA+0x214>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d015      	beq.n	800375a <HAL_ADC_Start_DMA+0x18e>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <HAL_ADC_Start_DMA+0x218>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d105      	bne.n	8003744 <HAL_ADC_Start_DMA+0x178>
 8003738:	4b25      	ldr	r3, [pc, #148]	; (80037d0 <HAL_ADC_Start_DMA+0x204>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a27      	ldr	r2, [pc, #156]	; (80037e8 <HAL_ADC_Start_DMA+0x21c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d136      	bne.n	80037bc <HAL_ADC_Start_DMA+0x1f0>
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <HAL_ADC_Start_DMA+0x204>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b00      	cmp	r3, #0
 8003758:	d130      	bne.n	80037bc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d129      	bne.n	80037bc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	e020      	b.n	80037bc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a18      	ldr	r2, [pc, #96]	; (80037e0 <HAL_ADC_Start_DMA+0x214>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d11b      	bne.n	80037bc <HAL_ADC_Start_DMA+0x1f0>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d114      	bne.n	80037bc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037a0:	609a      	str	r2, [r3, #8]
 80037a2:	e00b      	b.n	80037bc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	f043 0210 	orr.w	r2, r3, #16
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b4:	f043 0201 	orr.w	r2, r3, #1
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000008 	.word	0x20000008
 80037cc:	431bde83 	.word	0x431bde83
 80037d0:	40012300 	.word	0x40012300
 80037d4:	08003c65 	.word	0x08003c65
 80037d8:	08003d1f 	.word	0x08003d1f
 80037dc:	08003d3b 	.word	0x08003d3b
 80037e0:	40012000 	.word	0x40012000
 80037e4:	40012100 	.word	0x40012100
 80037e8:	40012200 	.word	0x40012200

080037ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x1c>
 8003840:	2302      	movs	r3, #2
 8003842:	e105      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x228>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b09      	cmp	r3, #9
 8003852:	d925      	bls.n	80038a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68d9      	ldr	r1, [r3, #12]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	b29b      	uxth	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	4613      	mov	r3, r2
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	4413      	add	r3, r2
 8003868:	3b1e      	subs	r3, #30
 800386a:	2207      	movs	r2, #7
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43da      	mvns	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	400a      	ands	r2, r1
 8003878:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68d9      	ldr	r1, [r3, #12]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	4618      	mov	r0, r3
 800388c:	4603      	mov	r3, r0
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	4403      	add	r3, r0
 8003892:	3b1e      	subs	r3, #30
 8003894:	409a      	lsls	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	60da      	str	r2, [r3, #12]
 800389e:	e022      	b.n	80038e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6919      	ldr	r1, [r3, #16]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	4613      	mov	r3, r2
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	4413      	add	r3, r2
 80038b4:	2207      	movs	r2, #7
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43da      	mvns	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	400a      	ands	r2, r1
 80038c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6919      	ldr	r1, [r3, #16]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	4618      	mov	r0, r3
 80038d6:	4603      	mov	r3, r0
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	4403      	add	r3, r0
 80038dc:	409a      	lsls	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b06      	cmp	r3, #6
 80038ec:	d824      	bhi.n	8003938 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	3b05      	subs	r3, #5
 8003900:	221f      	movs	r2, #31
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43da      	mvns	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	400a      	ands	r2, r1
 800390e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	4618      	mov	r0, r3
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	3b05      	subs	r3, #5
 800392a:	fa00 f203 	lsl.w	r2, r0, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	635a      	str	r2, [r3, #52]	; 0x34
 8003936:	e04c      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b0c      	cmp	r3, #12
 800393e:	d824      	bhi.n	800398a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	3b23      	subs	r3, #35	; 0x23
 8003952:	221f      	movs	r2, #31
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43da      	mvns	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	400a      	ands	r2, r1
 8003960:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	b29b      	uxth	r3, r3
 800396e:	4618      	mov	r0, r3
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	3b23      	subs	r3, #35	; 0x23
 800397c:	fa00 f203 	lsl.w	r2, r0, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
 8003988:	e023      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	3b41      	subs	r3, #65	; 0x41
 800399c:	221f      	movs	r2, #31
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43da      	mvns	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	400a      	ands	r2, r1
 80039aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	4618      	mov	r0, r3
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	3b41      	subs	r3, #65	; 0x41
 80039c6:	fa00 f203 	lsl.w	r2, r0, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039d2:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <HAL_ADC_ConfigChannel+0x234>)
 80039d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a21      	ldr	r2, [pc, #132]	; (8003a60 <HAL_ADC_ConfigChannel+0x238>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d109      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x1cc>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b12      	cmp	r3, #18
 80039e6:	d105      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a19      	ldr	r2, [pc, #100]	; (8003a60 <HAL_ADC_ConfigChannel+0x238>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d123      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x21e>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b10      	cmp	r3, #16
 8003a04:	d003      	beq.n	8003a0e <HAL_ADC_ConfigChannel+0x1e6>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b11      	cmp	r3, #17
 8003a0c:	d11b      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b10      	cmp	r3, #16
 8003a20:	d111      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a22:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <HAL_ADC_ConfigChannel+0x23c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a10      	ldr	r2, [pc, #64]	; (8003a68 <HAL_ADC_ConfigChannel+0x240>)
 8003a28:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2c:	0c9a      	lsrs	r2, r3, #18
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a38:	e002      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f9      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	40012300 	.word	0x40012300
 8003a60:	40012000 	.word	0x40012000
 8003a64:	20000008 	.word	0x20000008
 8003a68:	431bde83 	.word	0x431bde83

08003a6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a74:	4b79      	ldr	r3, [pc, #484]	; (8003c5c <ADC_Init+0x1f0>)
 8003a76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6859      	ldr	r1, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	021a      	lsls	r2, r3, #8
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ac4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6859      	ldr	r1, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ae6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6899      	ldr	r1, [r3, #8]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	4a58      	ldr	r2, [pc, #352]	; (8003c60 <ADC_Init+0x1f4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d022      	beq.n	8003b4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6899      	ldr	r1, [r3, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6899      	ldr	r1, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	609a      	str	r2, [r3, #8]
 8003b48:	e00f      	b.n	8003b6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0202 	bic.w	r2, r2, #2
 8003b78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6899      	ldr	r1, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	7e1b      	ldrb	r3, [r3, #24]
 8003b84:	005a      	lsls	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01b      	beq.n	8003bd0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ba6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003bb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6859      	ldr	r1, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	035a      	lsls	r2, r3, #13
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	e007      	b.n	8003be0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bde:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003bee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	051a      	lsls	r2, r3, #20
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6899      	ldr	r1, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c22:	025a      	lsls	r2, r3, #9
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6899      	ldr	r1, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	029a      	lsls	r2, r3, #10
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]
}
 8003c50:	bf00      	nop
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	40012300 	.word	0x40012300
 8003c60:	0f000001 	.word	0x0f000001

08003c64 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d13c      	bne.n	8003cf8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d12b      	bne.n	8003cf0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d127      	bne.n	8003cf0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d006      	beq.n	8003cbc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d119      	bne.n	8003cf0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0220 	bic.w	r2, r2, #32
 8003cca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	f043 0201 	orr.w	r2, r3, #1
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f7ff fd7b 	bl	80037ec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003cf6:	e00e      	b.n	8003d16 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	f003 0310 	and.w	r3, r3, #16
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f7ff fd85 	bl	8003814 <HAL_ADC_ErrorCallback>
}
 8003d0a:	e004      	b.n	8003d16 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	4798      	blx	r3
}
 8003d16:	bf00      	nop
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f7ff fd67 	bl	8003800 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d32:	bf00      	nop
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d46:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2240      	movs	r2, #64	; 0x40
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	f043 0204 	orr.w	r2, r3, #4
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f7ff fd5a 	bl	8003814 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d60:	bf00      	nop
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d78:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <__NVIC_SetPriorityGrouping+0x44>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d84:	4013      	ands	r3, r2
 8003d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d9a:	4a04      	ldr	r2, [pc, #16]	; (8003dac <__NVIC_SetPriorityGrouping+0x44>)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	60d3      	str	r3, [r2, #12]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db4:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	0a1b      	lsrs	r3, r3, #8
 8003dba:	f003 0307 	and.w	r3, r3, #7
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	db0b      	blt.n	8003df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	f003 021f 	and.w	r2, r3, #31
 8003de4:	4907      	ldr	r1, [pc, #28]	; (8003e04 <__NVIC_EnableIRQ+0x38>)
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	2001      	movs	r0, #1
 8003dee:	fa00 f202 	lsl.w	r2, r0, r2
 8003df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	e000e100 	.word	0xe000e100

08003e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	6039      	str	r1, [r7, #0]
 8003e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	db0a      	blt.n	8003e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	490c      	ldr	r1, [pc, #48]	; (8003e54 <__NVIC_SetPriority+0x4c>)
 8003e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e26:	0112      	lsls	r2, r2, #4
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e30:	e00a      	b.n	8003e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	4908      	ldr	r1, [pc, #32]	; (8003e58 <__NVIC_SetPriority+0x50>)
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	3b04      	subs	r3, #4
 8003e40:	0112      	lsls	r2, r2, #4
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	440b      	add	r3, r1
 8003e46:	761a      	strb	r2, [r3, #24]
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	e000e100 	.word	0xe000e100
 8003e58:	e000ed00 	.word	0xe000ed00

08003e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b089      	sub	sp, #36	; 0x24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f1c3 0307 	rsb	r3, r3, #7
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	bf28      	it	cs
 8003e7a:	2304      	movcs	r3, #4
 8003e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	3304      	adds	r3, #4
 8003e82:	2b06      	cmp	r3, #6
 8003e84:	d902      	bls.n	8003e8c <NVIC_EncodePriority+0x30>
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3b03      	subs	r3, #3
 8003e8a:	e000      	b.n	8003e8e <NVIC_EncodePriority+0x32>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43da      	mvns	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	401a      	ands	r2, r3
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003eae:	43d9      	mvns	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb4:	4313      	orrs	r3, r2
         );
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3724      	adds	r7, #36	; 0x24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff ff4c 	bl	8003d68 <__NVIC_SetPriorityGrouping>
}
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003eea:	f7ff ff61 	bl	8003db0 <__NVIC_GetPriorityGrouping>
 8003eee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	6978      	ldr	r0, [r7, #20]
 8003ef6:	f7ff ffb1 	bl	8003e5c <NVIC_EncodePriority>
 8003efa:	4602      	mov	r2, r0
 8003efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f00:	4611      	mov	r1, r2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff ff80 	bl	8003e08 <__NVIC_SetPriority>
}
 8003f08:	bf00      	nop
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff ff54 	bl	8003dcc <__NVIC_EnableIRQ>
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f38:	f7ff fad4 	bl	80034e4 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e099      	b.n	800407c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0201 	bic.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f68:	e00f      	b.n	8003f8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f6a:	f7ff fabb 	bl	80034e4 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b05      	cmp	r3, #5
 8003f76:	d908      	bls.n	8003f8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2203      	movs	r2, #3
 8003f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e078      	b.n	800407c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e8      	bne.n	8003f6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4b38      	ldr	r3, [pc, #224]	; (8004084 <HAL_DMA_Init+0x158>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d107      	bne.n	8003ff4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	4313      	orrs	r3, r2
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f023 0307 	bic.w	r3, r3, #7
 800400a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b04      	cmp	r3, #4
 800401c:	d117      	bne.n	800404e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00e      	beq.n	800404e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fb01 	bl	8004638 <DMA_CheckFifoParam>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2240      	movs	r2, #64	; 0x40
 8004040:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800404a:	2301      	movs	r3, #1
 800404c:	e016      	b.n	800407c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fab8 	bl	80045cc <DMA_CalcBaseAndBitshift>
 800405c:	4603      	mov	r3, r0
 800405e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004064:	223f      	movs	r2, #63	; 0x3f
 8004066:	409a      	lsls	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	f010803f 	.word	0xf010803f

08004088 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_DMA_Start_IT+0x26>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e040      	b.n	8004130 <HAL_DMA_Start_IT+0xa8>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d12f      	bne.n	8004122 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2202      	movs	r2, #2
 80040c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	68b9      	ldr	r1, [r7, #8]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 fa4a 	bl	8004570 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e0:	223f      	movs	r2, #63	; 0x3f
 80040e2:	409a      	lsls	r2, r3
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0216 	orr.w	r2, r2, #22
 80040f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0208 	orr.w	r2, r2, #8
 800410e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	e005      	b.n	800412e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800412a:	2302      	movs	r3, #2
 800412c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800412e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004144:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004146:	f7ff f9cd 	bl	80034e4 <HAL_GetTick>
 800414a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d008      	beq.n	800416a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2280      	movs	r2, #128	; 0x80
 800415c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e052      	b.n	8004210 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0216 	bic.w	r2, r2, #22
 8004178:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004188:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <HAL_DMA_Abort+0x62>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0208 	bic.w	r2, r2, #8
 80041a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0201 	bic.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041ba:	e013      	b.n	80041e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041bc:	f7ff f992 	bl	80034e4 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b05      	cmp	r3, #5
 80041c8:	d90c      	bls.n	80041e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2203      	movs	r2, #3
 80041d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e015      	b.n	8004210 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e4      	bne.n	80041bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f6:	223f      	movs	r2, #63	; 0x3f
 80041f8:	409a      	lsls	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d004      	beq.n	8004236 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2280      	movs	r2, #128	; 0x80
 8004230:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e00c      	b.n	8004250 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2205      	movs	r2, #5
 800423a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004268:	4b92      	ldr	r3, [pc, #584]	; (80044b4 <HAL_DMA_IRQHandler+0x258>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a92      	ldr	r2, [pc, #584]	; (80044b8 <HAL_DMA_IRQHandler+0x25c>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	0a9b      	lsrs	r3, r3, #10
 8004274:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004286:	2208      	movs	r2, #8
 8004288:	409a      	lsls	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4013      	ands	r3, r2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01a      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d013      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0204 	bic.w	r2, r2, #4
 80042ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b4:	2208      	movs	r2, #8
 80042b6:	409a      	lsls	r2, r3
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c0:	f043 0201 	orr.w	r2, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042cc:	2201      	movs	r2, #1
 80042ce:	409a      	lsls	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4013      	ands	r3, r2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d012      	beq.n	80042fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00b      	beq.n	80042fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ea:	2201      	movs	r2, #1
 80042ec:	409a      	lsls	r2, r3
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f6:	f043 0202 	orr.w	r2, r3, #2
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004302:	2204      	movs	r2, #4
 8004304:	409a      	lsls	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4013      	ands	r3, r2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d012      	beq.n	8004334 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00b      	beq.n	8004334 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004320:	2204      	movs	r2, #4
 8004322:	409a      	lsls	r2, r3
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432c:	f043 0204 	orr.w	r2, r3, #4
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004338:	2210      	movs	r2, #16
 800433a:	409a      	lsls	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4013      	ands	r3, r2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d043      	beq.n	80043cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d03c      	beq.n	80043cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004356:	2210      	movs	r2, #16
 8004358:	409a      	lsls	r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d018      	beq.n	800439e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d108      	bne.n	800438c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d024      	beq.n	80043cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	4798      	blx	r3
 800438a:	e01f      	b.n	80043cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01b      	beq.n	80043cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	4798      	blx	r3
 800439c:	e016      	b.n	80043cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d107      	bne.n	80043bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0208 	bic.w	r2, r2, #8
 80043ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d0:	2220      	movs	r2, #32
 80043d2:	409a      	lsls	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 808e 	beq.w	80044fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8086 	beq.w	80044fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f2:	2220      	movs	r2, #32
 80043f4:	409a      	lsls	r2, r3
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b05      	cmp	r3, #5
 8004404:	d136      	bne.n	8004474 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0216 	bic.w	r2, r2, #22
 8004414:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695a      	ldr	r2, [r3, #20]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004424:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d103      	bne.n	8004436 <HAL_DMA_IRQHandler+0x1da>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0208 	bic.w	r2, r2, #8
 8004444:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444a:	223f      	movs	r2, #63	; 0x3f
 800444c:	409a      	lsls	r2, r3
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004466:	2b00      	cmp	r3, #0
 8004468:	d07d      	beq.n	8004566 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	4798      	blx	r3
        }
        return;
 8004472:	e078      	b.n	8004566 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01c      	beq.n	80044bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d108      	bne.n	80044a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004494:	2b00      	cmp	r3, #0
 8004496:	d030      	beq.n	80044fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4798      	blx	r3
 80044a0:	e02b      	b.n	80044fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d027      	beq.n	80044fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	4798      	blx	r3
 80044b2:	e022      	b.n	80044fa <HAL_DMA_IRQHandler+0x29e>
 80044b4:	20000008 	.word	0x20000008
 80044b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10f      	bne.n	80044ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0210 	bic.w	r2, r2, #16
 80044d8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d032      	beq.n	8004568 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d022      	beq.n	8004554 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2205      	movs	r2, #5
 8004512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0201 	bic.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	3301      	adds	r3, #1
 800452a:	60bb      	str	r3, [r7, #8]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	429a      	cmp	r2, r3
 8004530:	d307      	bcc.n	8004542 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1f2      	bne.n	8004526 <HAL_DMA_IRQHandler+0x2ca>
 8004540:	e000      	b.n	8004544 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004542:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
 8004564:	e000      	b.n	8004568 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004566:	bf00      	nop
    }
  }
}
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop

08004570 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800458c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	2b40      	cmp	r3, #64	; 0x40
 800459c:	d108      	bne.n	80045b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045ae:	e007      	b.n	80045c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	60da      	str	r2, [r3, #12]
}
 80045c0:	bf00      	nop
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	3b10      	subs	r3, #16
 80045dc:	4a14      	ldr	r2, [pc, #80]	; (8004630 <DMA_CalcBaseAndBitshift+0x64>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	091b      	lsrs	r3, r3, #4
 80045e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045e6:	4a13      	ldr	r2, [pc, #76]	; (8004634 <DMA_CalcBaseAndBitshift+0x68>)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4413      	add	r3, r2
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d909      	bls.n	800460e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004602:	f023 0303 	bic.w	r3, r3, #3
 8004606:	1d1a      	adds	r2, r3, #4
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	659a      	str	r2, [r3, #88]	; 0x58
 800460c:	e007      	b.n	800461e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004616:	f023 0303 	bic.w	r3, r3, #3
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	aaaaaaab 	.word	0xaaaaaaab
 8004634:	0801e058 	.word	0x0801e058

08004638 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d11f      	bne.n	8004692 <DMA_CheckFifoParam+0x5a>
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b03      	cmp	r3, #3
 8004656:	d856      	bhi.n	8004706 <DMA_CheckFifoParam+0xce>
 8004658:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <DMA_CheckFifoParam+0x28>)
 800465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465e:	bf00      	nop
 8004660:	08004671 	.word	0x08004671
 8004664:	08004683 	.word	0x08004683
 8004668:	08004671 	.word	0x08004671
 800466c:	08004707 	.word	0x08004707
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d046      	beq.n	800470a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004680:	e043      	b.n	800470a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800468a:	d140      	bne.n	800470e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004690:	e03d      	b.n	800470e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800469a:	d121      	bne.n	80046e0 <DMA_CheckFifoParam+0xa8>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d837      	bhi.n	8004712 <DMA_CheckFifoParam+0xda>
 80046a2:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <DMA_CheckFifoParam+0x70>)
 80046a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a8:	080046b9 	.word	0x080046b9
 80046ac:	080046bf 	.word	0x080046bf
 80046b0:	080046b9 	.word	0x080046b9
 80046b4:	080046d1 	.word	0x080046d1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
      break;
 80046bc:	e030      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d025      	beq.n	8004716 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ce:	e022      	b.n	8004716 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046d8:	d11f      	bne.n	800471a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046de:	e01c      	b.n	800471a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d903      	bls.n	80046ee <DMA_CheckFifoParam+0xb6>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d003      	beq.n	80046f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046ec:	e018      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	73fb      	strb	r3, [r7, #15]
      break;
 80046f2:	e015      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00e      	beq.n	800471e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	73fb      	strb	r3, [r7, #15]
      break;
 8004704:	e00b      	b.n	800471e <DMA_CheckFifoParam+0xe6>
      break;
 8004706:	bf00      	nop
 8004708:	e00a      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
      break;
 800470a:	bf00      	nop
 800470c:	e008      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
      break;
 800470e:	bf00      	nop
 8004710:	e006      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
      break;
 8004712:	bf00      	nop
 8004714:	e004      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
      break;
 8004716:	bf00      	nop
 8004718:	e002      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
      break;   
 800471a:	bf00      	nop
 800471c:	e000      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
      break;
 800471e:	bf00      	nop
    }
  } 
  
  return status; 
 8004720:	7bfb      	ldrb	r3, [r7, #15]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop

08004730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004730:	b480      	push	{r7}
 8004732:	b089      	sub	sp, #36	; 0x24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800473e:	2300      	movs	r3, #0
 8004740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004742:	2300      	movs	r3, #0
 8004744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004746:	2300      	movs	r3, #0
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	e16b      	b.n	8004a24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800474c:	2201      	movs	r2, #1
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	429a      	cmp	r2, r3
 8004766:	f040 815a 	bne.w	8004a1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	2b01      	cmp	r3, #1
 8004774:	d005      	beq.n	8004782 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800477e:	2b02      	cmp	r3, #2
 8004780:	d130      	bne.n	80047e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	2203      	movs	r2, #3
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	43db      	mvns	r3, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4013      	ands	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047b8:	2201      	movs	r2, #1
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	43db      	mvns	r3, r3
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	4013      	ands	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	091b      	lsrs	r3, r3, #4
 80047ce:	f003 0201 	and.w	r2, r3, #1
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d017      	beq.n	8004820 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	2203      	movs	r2, #3
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4313      	orrs	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f003 0303 	and.w	r3, r3, #3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d123      	bne.n	8004874 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	08da      	lsrs	r2, r3, #3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3208      	adds	r2, #8
 8004834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004838:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	220f      	movs	r2, #15
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	43db      	mvns	r3, r3
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	4013      	ands	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4313      	orrs	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	08da      	lsrs	r2, r3, #3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3208      	adds	r2, #8
 800486e:	69b9      	ldr	r1, [r7, #24]
 8004870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	2203      	movs	r2, #3
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	43db      	mvns	r3, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4013      	ands	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f003 0203 	and.w	r2, r3, #3
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4313      	orrs	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80b4 	beq.w	8004a1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	4b60      	ldr	r3, [pc, #384]	; (8004a3c <HAL_GPIO_Init+0x30c>)
 80048bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048be:	4a5f      	ldr	r2, [pc, #380]	; (8004a3c <HAL_GPIO_Init+0x30c>)
 80048c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048c4:	6453      	str	r3, [r2, #68]	; 0x44
 80048c6:	4b5d      	ldr	r3, [pc, #372]	; (8004a3c <HAL_GPIO_Init+0x30c>)
 80048c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048d2:	4a5b      	ldr	r2, [pc, #364]	; (8004a40 <HAL_GPIO_Init+0x310>)
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	089b      	lsrs	r3, r3, #2
 80048d8:	3302      	adds	r3, #2
 80048da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	220f      	movs	r2, #15
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	43db      	mvns	r3, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4013      	ands	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a52      	ldr	r2, [pc, #328]	; (8004a44 <HAL_GPIO_Init+0x314>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d02b      	beq.n	8004956 <HAL_GPIO_Init+0x226>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a51      	ldr	r2, [pc, #324]	; (8004a48 <HAL_GPIO_Init+0x318>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d025      	beq.n	8004952 <HAL_GPIO_Init+0x222>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a50      	ldr	r2, [pc, #320]	; (8004a4c <HAL_GPIO_Init+0x31c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01f      	beq.n	800494e <HAL_GPIO_Init+0x21e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a4f      	ldr	r2, [pc, #316]	; (8004a50 <HAL_GPIO_Init+0x320>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d019      	beq.n	800494a <HAL_GPIO_Init+0x21a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a4e      	ldr	r2, [pc, #312]	; (8004a54 <HAL_GPIO_Init+0x324>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <HAL_GPIO_Init+0x216>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a4d      	ldr	r2, [pc, #308]	; (8004a58 <HAL_GPIO_Init+0x328>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00d      	beq.n	8004942 <HAL_GPIO_Init+0x212>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a4c      	ldr	r2, [pc, #304]	; (8004a5c <HAL_GPIO_Init+0x32c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <HAL_GPIO_Init+0x20e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a4b      	ldr	r2, [pc, #300]	; (8004a60 <HAL_GPIO_Init+0x330>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d101      	bne.n	800493a <HAL_GPIO_Init+0x20a>
 8004936:	2307      	movs	r3, #7
 8004938:	e00e      	b.n	8004958 <HAL_GPIO_Init+0x228>
 800493a:	2308      	movs	r3, #8
 800493c:	e00c      	b.n	8004958 <HAL_GPIO_Init+0x228>
 800493e:	2306      	movs	r3, #6
 8004940:	e00a      	b.n	8004958 <HAL_GPIO_Init+0x228>
 8004942:	2305      	movs	r3, #5
 8004944:	e008      	b.n	8004958 <HAL_GPIO_Init+0x228>
 8004946:	2304      	movs	r3, #4
 8004948:	e006      	b.n	8004958 <HAL_GPIO_Init+0x228>
 800494a:	2303      	movs	r3, #3
 800494c:	e004      	b.n	8004958 <HAL_GPIO_Init+0x228>
 800494e:	2302      	movs	r3, #2
 8004950:	e002      	b.n	8004958 <HAL_GPIO_Init+0x228>
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <HAL_GPIO_Init+0x228>
 8004956:	2300      	movs	r3, #0
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	f002 0203 	and.w	r2, r2, #3
 800495e:	0092      	lsls	r2, r2, #2
 8004960:	4093      	lsls	r3, r2
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	4313      	orrs	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004968:	4935      	ldr	r1, [pc, #212]	; (8004a40 <HAL_GPIO_Init+0x310>)
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	089b      	lsrs	r3, r3, #2
 800496e:	3302      	adds	r3, #2
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004976:	4b3b      	ldr	r3, [pc, #236]	; (8004a64 <HAL_GPIO_Init+0x334>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	43db      	mvns	r3, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4013      	ands	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4313      	orrs	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800499a:	4a32      	ldr	r2, [pc, #200]	; (8004a64 <HAL_GPIO_Init+0x334>)
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80049a0:	4b30      	ldr	r3, [pc, #192]	; (8004a64 <HAL_GPIO_Init+0x334>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	43db      	mvns	r3, r3
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	4013      	ands	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049c4:	4a27      	ldr	r2, [pc, #156]	; (8004a64 <HAL_GPIO_Init+0x334>)
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049ca:	4b26      	ldr	r3, [pc, #152]	; (8004a64 <HAL_GPIO_Init+0x334>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	43db      	mvns	r3, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4013      	ands	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049ee:	4a1d      	ldr	r2, [pc, #116]	; (8004a64 <HAL_GPIO_Init+0x334>)
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049f4:	4b1b      	ldr	r3, [pc, #108]	; (8004a64 <HAL_GPIO_Init+0x334>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	43db      	mvns	r3, r3
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4013      	ands	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a18:	4a12      	ldr	r2, [pc, #72]	; (8004a64 <HAL_GPIO_Init+0x334>)
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	3301      	adds	r3, #1
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	2b0f      	cmp	r3, #15
 8004a28:	f67f ae90 	bls.w	800474c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a2c:	bf00      	nop
 8004a2e:	bf00      	nop
 8004a30:	3724      	adds	r7, #36	; 0x24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	40013800 	.word	0x40013800
 8004a44:	40020000 	.word	0x40020000
 8004a48:	40020400 	.word	0x40020400
 8004a4c:	40020800 	.word	0x40020800
 8004a50:	40020c00 	.word	0x40020c00
 8004a54:	40021000 	.word	0x40021000
 8004a58:	40021400 	.word	0x40021400
 8004a5c:	40021800 	.word	0x40021800
 8004a60:	40021c00 	.word	0x40021c00
 8004a64:	40013c00 	.word	0x40013c00

08004a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	887b      	ldrh	r3, [r7, #2]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a80:	2301      	movs	r3, #1
 8004a82:	73fb      	strb	r3, [r7, #15]
 8004a84:	e001      	b.n	8004a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	807b      	strh	r3, [r7, #2]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004aa8:	787b      	ldrb	r3, [r7, #1]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aae:	887a      	ldrh	r2, [r7, #2]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ab4:	e003      	b.n	8004abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ab6:	887b      	ldrh	r3, [r7, #2]
 8004ab8:	041a      	lsls	r2, r3, #16
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	619a      	str	r2, [r3, #24]
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ad6:	4b08      	ldr	r3, [pc, #32]	; (8004af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ad8:	695a      	ldr	r2, [r3, #20]
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d006      	beq.n	8004af0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ae2:	4a05      	ldr	r2, [pc, #20]	; (8004af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ae4:	88fb      	ldrh	r3, [r7, #6]
 8004ae6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ae8:	88fb      	ldrh	r3, [r7, #6]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 f806 	bl	8004afc <HAL_GPIO_EXTI_Callback>
  }
}
 8004af0:	bf00      	nop
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40013c00 	.word	0x40013c00

08004afc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004b12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b14:	b08f      	sub	sp, #60	; 0x3c
 8004b16:	af0a      	add	r7, sp, #40	; 0x28
 8004b18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e054      	b.n	8004bce <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fe fa78 	bl	8003034 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2203      	movs	r2, #3
 8004b48:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d102      	bne.n	8004b5e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f005 f95d 	bl	8009e22 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	603b      	str	r3, [r7, #0]
 8004b6e:	687e      	ldr	r6, [r7, #4]
 8004b70:	466d      	mov	r5, sp
 8004b72:	f106 0410 	add.w	r4, r6, #16
 8004b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b82:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b86:	1d33      	adds	r3, r6, #4
 8004b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b8a:	6838      	ldr	r0, [r7, #0]
 8004b8c:	f005 f8e8 	bl	8009d60 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2101      	movs	r1, #1
 8004b96:	4618      	mov	r0, r3
 8004b98:	f005 f954 	bl	8009e44 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	687e      	ldr	r6, [r7, #4]
 8004ba4:	466d      	mov	r5, sp
 8004ba6:	f106 0410 	add.w	r4, r6, #16
 8004baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004bb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8004bba:	1d33      	adds	r3, r6, #4
 8004bbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bbe:	6838      	ldr	r0, [r7, #0]
 8004bc0:	f005 fa7c 	bl	800a0bc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bd6 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b086      	sub	sp, #24
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f005 fa24 	bl	800a03a <USB_GetMode>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	f040 80f6 	bne.w	8004de6 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f005 fa08 	bl	800a014 <USB_ReadInterrupts>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 80ec 	beq.w	8004de4 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f005 f9ff 	bl	800a014 <USB_ReadInterrupts>
 8004c16:	4603      	mov	r3, r0
 8004c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c20:	d104      	bne.n	8004c2c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004c2a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f005 f9ef 	bl	800a014 <USB_ReadInterrupts>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c40:	d104      	bne.n	8004c4c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c4a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f005 f9df 	bl	800a014 <USB_ReadInterrupts>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c60:	d104      	bne.n	8004c6c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004c6a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f005 f9cf 	bl	800a014 <USB_ReadInterrupts>
 8004c76:	4603      	mov	r3, r0
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d103      	bne.n	8004c88 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2202      	movs	r2, #2
 8004c86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f005 f9c1 	bl	800a014 <USB_ReadInterrupts>
 8004c92:	4603      	mov	r3, r0
 8004c94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c9c:	d11c      	bne.n	8004cd8 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004ca6:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10f      	bne.n	8004cd8 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004cb8:	2110      	movs	r1, #16
 8004cba:	6938      	ldr	r0, [r7, #16]
 8004cbc:	f005 f90e 	bl	8009edc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004cc0:	6938      	ldr	r0, [r7, #16]
 8004cc2:	f005 f92f 	bl	8009f24 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2101      	movs	r1, #1
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f005 faa9 	bl	800a224 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f89e 	bl	8004e14 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f005 f999 	bl	800a014 <USB_ReadInterrupts>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cec:	d102      	bne.n	8004cf4 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f001 f9b1 	bl	8006056 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f005 f98b 	bl	800a014 <USB_ReadInterrupts>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d106      	bne.n	8004d16 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f86f 	bl	8004dec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2208      	movs	r2, #8
 8004d14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f005 f97a 	bl	800a014 <USB_ReadInterrupts>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f003 0310 	and.w	r3, r3, #16
 8004d26:	2b10      	cmp	r3, #16
 8004d28:	d101      	bne.n	8004d2e <HAL_HCD_IRQHandler+0x158>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <HAL_HCD_IRQHandler+0x15a>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d012      	beq.n	8004d5a <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699a      	ldr	r2, [r3, #24]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0210 	bic.w	r2, r2, #16
 8004d42:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f001 f8b4 	bl	8005eb2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	699a      	ldr	r2, [r3, #24]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f042 0210 	orr.w	r2, r2, #16
 8004d58:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f005 f958 	bl	800a014 <USB_ReadInterrupts>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d6e:	d13a      	bne.n	8004de6 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f005 fa8f 	bl	800a298 <USB_HC_ReadInterrupt>
 8004d7a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	e025      	b.n	8004dce <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d018      	beq.n	8004dc8 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dac:	d106      	bne.n	8004dbc <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	4619      	mov	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f859 	bl	8004e6c <HCD_HC_IN_IRQHandler>
 8004dba:	e005      	b.n	8004dc8 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fc74 	bl	80056b0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d3d4      	bcc.n	8004d82 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004de0:	615a      	str	r2, [r3, #20]
 8004de2:	e000      	b.n	8004de6 <HAL_HCD_IRQHandler+0x210>
      return;
 8004de4:	bf00      	nop
    }
  }
}
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	70fb      	strb	r3, [r7, #3]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d119      	bne.n	8004ed0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	2304      	movs	r3, #4
 8004eac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	0151      	lsls	r1, r2, #5
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	440a      	add	r2, r1
 8004ec4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ec8:	f043 0302 	orr.w	r3, r3, #2
 8004ecc:	60d3      	str	r3, [r2, #12]
 8004ece:	e101      	b.n	80050d4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee6:	d12b      	bne.n	8004f40 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004efa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	212c      	movs	r1, #44	; 0x2c
 8004f02:	fb01 f303 	mul.w	r3, r1, r3
 8004f06:	4413      	add	r3, r2
 8004f08:	3361      	adds	r3, #97	; 0x61
 8004f0a:	2207      	movs	r2, #7
 8004f0c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	0151      	lsls	r1, r2, #5
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	440a      	add	r2, r1
 8004f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f28:	f043 0302 	orr.w	r3, r3, #2
 8004f2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	4611      	mov	r1, r2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f005 f9be 	bl	800a2ba <USB_HC_Halt>
 8004f3e:	e0c9      	b.n	80050d4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b20      	cmp	r3, #32
 8004f54:	d109      	bne.n	8004f6a <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f62:	461a      	mov	r2, r3
 8004f64:	2320      	movs	r3, #32
 8004f66:	6093      	str	r3, [r2, #8]
 8004f68:	e0b4      	b.n	80050d4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d133      	bne.n	8004fe8 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	0151      	lsls	r1, r2, #5
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	440a      	add	r2, r1
 8004f96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f9a:	f043 0302 	orr.w	r3, r3, #2
 8004f9e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	212c      	movs	r1, #44	; 0x2c
 8004fa6:	fb01 f303 	mul.w	r3, r1, r3
 8004faa:	4413      	add	r3, r2
 8004fac:	3361      	adds	r3, #97	; 0x61
 8004fae:	2205      	movs	r2, #5
 8004fb0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	4611      	mov	r1, r2
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f005 f96a 	bl	800a2ba <USB_HC_Halt>
 8004fe6:	e075      	b.n	80050d4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffe:	d134      	bne.n	800506a <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	4413      	add	r3, r2
 8005008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	0151      	lsls	r1, r2, #5
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	440a      	add	r2, r1
 8005016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800501a:	f043 0302 	orr.w	r3, r3, #2
 800501e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	212c      	movs	r1, #44	; 0x2c
 8005026:	fb01 f303 	mul.w	r3, r1, r3
 800502a:	4413      	add	r3, r2
 800502c:	3361      	adds	r3, #97	; 0x61
 800502e:	2208      	movs	r2, #8
 8005030:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	4413      	add	r3, r2
 800503a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503e:	461a      	mov	r2, r3
 8005040:	2310      	movs	r3, #16
 8005042:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4413      	add	r3, r2
 800504c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005050:	461a      	mov	r2, r3
 8005052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005056:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	4611      	mov	r1, r2
 8005062:	4618      	mov	r0, r3
 8005064:	f005 f929 	bl	800a2ba <USB_HC_Halt>
 8005068:	e034      	b.n	80050d4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	4413      	add	r3, r2
 8005072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507c:	2b80      	cmp	r3, #128	; 0x80
 800507e:	d129      	bne.n	80050d4 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	4413      	add	r3, r2
 8005088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	0151      	lsls	r1, r2, #5
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	440a      	add	r2, r1
 8005096:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800509a:	f043 0302 	orr.w	r3, r3, #2
 800509e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	212c      	movs	r1, #44	; 0x2c
 80050a6:	fb01 f303 	mul.w	r3, r1, r3
 80050aa:	4413      	add	r3, r2
 80050ac:	3361      	adds	r3, #97	; 0x61
 80050ae:	2206      	movs	r2, #6
 80050b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	4611      	mov	r1, r2
 80050bc:	4618      	mov	r0, r3
 80050be:	f005 f8fc 	bl	800a2ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ce:	461a      	mov	r2, r3
 80050d0:	2380      	movs	r3, #128	; 0x80
 80050d2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ea:	d122      	bne.n	8005132 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	0151      	lsls	r1, r2, #5
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	440a      	add	r2, r1
 8005102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005106:	f043 0302 	orr.w	r3, r3, #2
 800510a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	4611      	mov	r1, r2
 8005116:	4618      	mov	r0, r3
 8005118:	f005 f8cf 	bl	800a2ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	4413      	add	r3, r2
 8005124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005128:	461a      	mov	r2, r3
 800512a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800512e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005130:	e2ba      	b.n	80056a8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	4413      	add	r3, r2
 800513a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b01      	cmp	r3, #1
 8005146:	f040 811b 	bne.w	8005380 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d019      	beq.n	8005186 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	212c      	movs	r1, #44	; 0x2c
 8005158:	fb01 f303 	mul.w	r3, r1, r3
 800515c:	4413      	add	r3, r2
 800515e:	3348      	adds	r3, #72	; 0x48
 8005160:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	0159      	lsls	r1, r3, #5
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	440b      	add	r3, r1
 800516a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005174:	1ad2      	subs	r2, r2, r3
 8005176:	6879      	ldr	r1, [r7, #4]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	202c      	movs	r0, #44	; 0x2c
 800517c:	fb00 f303 	mul.w	r3, r0, r3
 8005180:	440b      	add	r3, r1
 8005182:	3350      	adds	r3, #80	; 0x50
 8005184:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	212c      	movs	r1, #44	; 0x2c
 800518c:	fb01 f303 	mul.w	r3, r1, r3
 8005190:	4413      	add	r3, r2
 8005192:	3361      	adds	r3, #97	; 0x61
 8005194:	2201      	movs	r2, #1
 8005196:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	212c      	movs	r1, #44	; 0x2c
 800519e:	fb01 f303 	mul.w	r3, r1, r3
 80051a2:	4413      	add	r3, r2
 80051a4:	335c      	adds	r3, #92	; 0x5c
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b6:	461a      	mov	r2, r3
 80051b8:	2301      	movs	r3, #1
 80051ba:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	212c      	movs	r1, #44	; 0x2c
 80051c2:	fb01 f303 	mul.w	r3, r1, r3
 80051c6:	4413      	add	r3, r2
 80051c8:	333f      	adds	r3, #63	; 0x3f
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d009      	beq.n	80051e4 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	212c      	movs	r1, #44	; 0x2c
 80051d6:	fb01 f303 	mul.w	r3, r1, r3
 80051da:	4413      	add	r3, r2
 80051dc:	333f      	adds	r3, #63	; 0x3f
 80051de:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d121      	bne.n	8005228 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	0151      	lsls	r1, r2, #5
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	440a      	add	r2, r1
 80051fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051fe:	f043 0302 	orr.w	r3, r3, #2
 8005202:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	4611      	mov	r1, r2
 800520e:	4618      	mov	r0, r3
 8005210:	f005 f853 	bl	800a2ba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	4413      	add	r3, r2
 800521c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005220:	461a      	mov	r2, r3
 8005222:	2310      	movs	r3, #16
 8005224:	6093      	str	r3, [r2, #8]
 8005226:	e066      	b.n	80052f6 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	212c      	movs	r1, #44	; 0x2c
 800522e:	fb01 f303 	mul.w	r3, r1, r3
 8005232:	4413      	add	r3, r2
 8005234:	333f      	adds	r3, #63	; 0x3f
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b03      	cmp	r3, #3
 800523a:	d127      	bne.n	800528c <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	4413      	add	r3, r2
 8005244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	440a      	add	r2, r1
 8005252:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005256:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800525a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	212c      	movs	r1, #44	; 0x2c
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	4413      	add	r3, r2
 8005268:	3360      	adds	r3, #96	; 0x60
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	b2d9      	uxtb	r1, r3
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	202c      	movs	r0, #44	; 0x2c
 8005278:	fb00 f303 	mul.w	r3, r0, r3
 800527c:	4413      	add	r3, r2
 800527e:	3360      	adds	r3, #96	; 0x60
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7ff fde3 	bl	8004e50 <HAL_HCD_HC_NotifyURBChange_Callback>
 800528a:	e034      	b.n	80052f6 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	212c      	movs	r1, #44	; 0x2c
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	4413      	add	r3, r2
 8005298:	333f      	adds	r3, #63	; 0x3f
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d12a      	bne.n	80052f6 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	212c      	movs	r1, #44	; 0x2c
 80052a6:	fb01 f303 	mul.w	r3, r1, r3
 80052aa:	4413      	add	r3, r2
 80052ac:	3360      	adds	r3, #96	; 0x60
 80052ae:	2201      	movs	r2, #1
 80052b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	212c      	movs	r1, #44	; 0x2c
 80052b8:	fb01 f303 	mul.w	r3, r1, r3
 80052bc:	4413      	add	r3, r2
 80052be:	3354      	adds	r3, #84	; 0x54
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	f083 0301 	eor.w	r3, r3, #1
 80052c6:	b2d8      	uxtb	r0, r3
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	212c      	movs	r1, #44	; 0x2c
 80052ce:	fb01 f303 	mul.w	r3, r1, r3
 80052d2:	4413      	add	r3, r2
 80052d4:	3354      	adds	r3, #84	; 0x54
 80052d6:	4602      	mov	r2, r0
 80052d8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	b2d9      	uxtb	r1, r3
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	202c      	movs	r0, #44	; 0x2c
 80052e4:	fb00 f303 	mul.w	r3, r0, r3
 80052e8:	4413      	add	r3, r2
 80052ea:	3360      	adds	r3, #96	; 0x60
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff fdad 	bl	8004e50 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d12b      	bne.n	8005356 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	212c      	movs	r1, #44	; 0x2c
 8005304:	fb01 f303 	mul.w	r3, r1, r3
 8005308:	4413      	add	r3, r2
 800530a:	3348      	adds	r3, #72	; 0x48
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	202c      	movs	r0, #44	; 0x2c
 8005314:	fb00 f202 	mul.w	r2, r0, r2
 8005318:	440a      	add	r2, r1
 800531a:	3240      	adds	r2, #64	; 0x40
 800531c:	8812      	ldrh	r2, [r2, #0]
 800531e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 81be 	beq.w	80056a8 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	212c      	movs	r1, #44	; 0x2c
 8005332:	fb01 f303 	mul.w	r3, r1, r3
 8005336:	4413      	add	r3, r2
 8005338:	3354      	adds	r3, #84	; 0x54
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	f083 0301 	eor.w	r3, r3, #1
 8005340:	b2d8      	uxtb	r0, r3
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	212c      	movs	r1, #44	; 0x2c
 8005348:	fb01 f303 	mul.w	r3, r1, r3
 800534c:	4413      	add	r3, r2
 800534e:	3354      	adds	r3, #84	; 0x54
 8005350:	4602      	mov	r2, r0
 8005352:	701a      	strb	r2, [r3, #0]
}
 8005354:	e1a8      	b.n	80056a8 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	212c      	movs	r1, #44	; 0x2c
 800535c:	fb01 f303 	mul.w	r3, r1, r3
 8005360:	4413      	add	r3, r2
 8005362:	3354      	adds	r3, #84	; 0x54
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	f083 0301 	eor.w	r3, r3, #1
 800536a:	b2d8      	uxtb	r0, r3
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	212c      	movs	r1, #44	; 0x2c
 8005372:	fb01 f303 	mul.w	r3, r1, r3
 8005376:	4413      	add	r3, r2
 8005378:	3354      	adds	r3, #84	; 0x54
 800537a:	4602      	mov	r2, r0
 800537c:	701a      	strb	r2, [r3, #0]
}
 800537e:	e193      	b.n	80056a8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4413      	add	r3, r2
 8005388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b02      	cmp	r3, #2
 8005394:	f040 8106 	bne.w	80055a4 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	0151      	lsls	r1, r2, #5
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	440a      	add	r2, r1
 80053ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053b2:	f023 0302 	bic.w	r3, r3, #2
 80053b6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	212c      	movs	r1, #44	; 0x2c
 80053be:	fb01 f303 	mul.w	r3, r1, r3
 80053c2:	4413      	add	r3, r2
 80053c4:	3361      	adds	r3, #97	; 0x61
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d109      	bne.n	80053e0 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	212c      	movs	r1, #44	; 0x2c
 80053d2:	fb01 f303 	mul.w	r3, r1, r3
 80053d6:	4413      	add	r3, r2
 80053d8:	3360      	adds	r3, #96	; 0x60
 80053da:	2201      	movs	r2, #1
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	e0c9      	b.n	8005574 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	212c      	movs	r1, #44	; 0x2c
 80053e6:	fb01 f303 	mul.w	r3, r1, r3
 80053ea:	4413      	add	r3, r2
 80053ec:	3361      	adds	r3, #97	; 0x61
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b05      	cmp	r3, #5
 80053f2:	d109      	bne.n	8005408 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	212c      	movs	r1, #44	; 0x2c
 80053fa:	fb01 f303 	mul.w	r3, r1, r3
 80053fe:	4413      	add	r3, r2
 8005400:	3360      	adds	r3, #96	; 0x60
 8005402:	2205      	movs	r2, #5
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	e0b5      	b.n	8005574 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	212c      	movs	r1, #44	; 0x2c
 800540e:	fb01 f303 	mul.w	r3, r1, r3
 8005412:	4413      	add	r3, r2
 8005414:	3361      	adds	r3, #97	; 0x61
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b06      	cmp	r3, #6
 800541a:	d009      	beq.n	8005430 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	212c      	movs	r1, #44	; 0x2c
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	4413      	add	r3, r2
 8005428:	3361      	adds	r3, #97	; 0x61
 800542a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800542c:	2b08      	cmp	r3, #8
 800542e:	d150      	bne.n	80054d2 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	212c      	movs	r1, #44	; 0x2c
 8005436:	fb01 f303 	mul.w	r3, r1, r3
 800543a:	4413      	add	r3, r2
 800543c:	335c      	adds	r3, #92	; 0x5c
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	202c      	movs	r0, #44	; 0x2c
 8005448:	fb00 f303 	mul.w	r3, r0, r3
 800544c:	440b      	add	r3, r1
 800544e:	335c      	adds	r3, #92	; 0x5c
 8005450:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	212c      	movs	r1, #44	; 0x2c
 8005458:	fb01 f303 	mul.w	r3, r1, r3
 800545c:	4413      	add	r3, r2
 800545e:	335c      	adds	r3, #92	; 0x5c
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b02      	cmp	r3, #2
 8005464:	d912      	bls.n	800548c <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	212c      	movs	r1, #44	; 0x2c
 800546c:	fb01 f303 	mul.w	r3, r1, r3
 8005470:	4413      	add	r3, r2
 8005472:	335c      	adds	r3, #92	; 0x5c
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	212c      	movs	r1, #44	; 0x2c
 800547e:	fb01 f303 	mul.w	r3, r1, r3
 8005482:	4413      	add	r3, r2
 8005484:	3360      	adds	r3, #96	; 0x60
 8005486:	2204      	movs	r2, #4
 8005488:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800548a:	e073      	b.n	8005574 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	212c      	movs	r1, #44	; 0x2c
 8005492:	fb01 f303 	mul.w	r3, r1, r3
 8005496:	4413      	add	r3, r2
 8005498:	3360      	adds	r3, #96	; 0x60
 800549a:	2202      	movs	r2, #2
 800549c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054b4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054bc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ca:	461a      	mov	r2, r3
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80054d0:	e050      	b.n	8005574 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	212c      	movs	r1, #44	; 0x2c
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	4413      	add	r3, r2
 80054de:	3361      	adds	r3, #97	; 0x61
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d122      	bne.n	800552c <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	212c      	movs	r1, #44	; 0x2c
 80054ec:	fb01 f303 	mul.w	r3, r1, r3
 80054f0:	4413      	add	r3, r2
 80054f2:	3360      	adds	r3, #96	; 0x60
 80054f4:	2202      	movs	r2, #2
 80054f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800550e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005516:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	4413      	add	r3, r2
 8005520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005524:	461a      	mov	r2, r3
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	e023      	b.n	8005574 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	212c      	movs	r1, #44	; 0x2c
 8005532:	fb01 f303 	mul.w	r3, r1, r3
 8005536:	4413      	add	r3, r2
 8005538:	3361      	adds	r3, #97	; 0x61
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b07      	cmp	r3, #7
 800553e:	d119      	bne.n	8005574 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	212c      	movs	r1, #44	; 0x2c
 8005546:	fb01 f303 	mul.w	r3, r1, r3
 800554a:	4413      	add	r3, r2
 800554c:	335c      	adds	r3, #92	; 0x5c
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	202c      	movs	r0, #44	; 0x2c
 8005558:	fb00 f303 	mul.w	r3, r0, r3
 800555c:	440b      	add	r3, r1
 800555e:	335c      	adds	r3, #92	; 0x5c
 8005560:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	212c      	movs	r1, #44	; 0x2c
 8005568:	fb01 f303 	mul.w	r3, r1, r3
 800556c:	4413      	add	r3, r2
 800556e:	3360      	adds	r3, #96	; 0x60
 8005570:	2204      	movs	r2, #4
 8005572:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	4413      	add	r3, r2
 800557c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005580:	461a      	mov	r2, r3
 8005582:	2302      	movs	r3, #2
 8005584:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	b2d9      	uxtb	r1, r3
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	202c      	movs	r0, #44	; 0x2c
 8005590:	fb00 f303 	mul.w	r3, r0, r3
 8005594:	4413      	add	r3, r2
 8005596:	3360      	adds	r3, #96	; 0x60
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7ff fc57 	bl	8004e50 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80055a2:	e081      	b.n	80056a8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 0310 	and.w	r3, r3, #16
 80055b6:	2b10      	cmp	r3, #16
 80055b8:	d176      	bne.n	80056a8 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	212c      	movs	r1, #44	; 0x2c
 80055c0:	fb01 f303 	mul.w	r3, r1, r3
 80055c4:	4413      	add	r3, r2
 80055c6:	333f      	adds	r3, #63	; 0x3f
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d121      	bne.n	8005612 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	212c      	movs	r1, #44	; 0x2c
 80055d4:	fb01 f303 	mul.w	r3, r1, r3
 80055d8:	4413      	add	r3, r2
 80055da:	335c      	adds	r3, #92	; 0x5c
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	0151      	lsls	r1, r2, #5
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	440a      	add	r2, r1
 80055f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055fa:	f043 0302 	orr.w	r3, r3, #2
 80055fe:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	4611      	mov	r1, r2
 800560a:	4618      	mov	r0, r3
 800560c:	f004 fe55 	bl	800a2ba <USB_HC_Halt>
 8005610:	e041      	b.n	8005696 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	212c      	movs	r1, #44	; 0x2c
 8005618:	fb01 f303 	mul.w	r3, r1, r3
 800561c:	4413      	add	r3, r2
 800561e:	333f      	adds	r3, #63	; 0x3f
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	212c      	movs	r1, #44	; 0x2c
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	4413      	add	r3, r2
 8005632:	333f      	adds	r3, #63	; 0x3f
 8005634:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005636:	2b02      	cmp	r3, #2
 8005638:	d12d      	bne.n	8005696 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	212c      	movs	r1, #44	; 0x2c
 8005640:	fb01 f303 	mul.w	r3, r1, r3
 8005644:	4413      	add	r3, r2
 8005646:	335c      	adds	r3, #92	; 0x5c
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d120      	bne.n	8005696 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	212c      	movs	r1, #44	; 0x2c
 800565a:	fb01 f303 	mul.w	r3, r1, r3
 800565e:	4413      	add	r3, r2
 8005660:	3361      	adds	r3, #97	; 0x61
 8005662:	2203      	movs	r2, #3
 8005664:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	4413      	add	r3, r2
 800566e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	0151      	lsls	r1, r2, #5
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	440a      	add	r2, r1
 800567c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005680:	f043 0302 	orr.w	r3, r3, #2
 8005684:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	4611      	mov	r1, r2
 8005690:	4618      	mov	r0, r3
 8005692:	f004 fe12 	bl	800a2ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	4413      	add	r3, r2
 800569e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a2:	461a      	mov	r2, r3
 80056a4:	2310      	movs	r3, #16
 80056a6:	6093      	str	r3, [r2, #8]
}
 80056a8:	bf00      	nop
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80056c6:	78fb      	ldrb	r3, [r7, #3]
 80056c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d119      	bne.n	8005714 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ec:	461a      	mov	r2, r3
 80056ee:	2304      	movs	r3, #4
 80056f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	0151      	lsls	r1, r2, #5
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	440a      	add	r2, r1
 8005708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800570c:	f043 0302 	orr.w	r3, r3, #2
 8005710:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005712:	e3ca      	b.n	8005eaa <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	4413      	add	r3, r2
 800571c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 0320 	and.w	r3, r3, #32
 8005726:	2b20      	cmp	r3, #32
 8005728:	d13e      	bne.n	80057a8 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	4413      	add	r3, r2
 8005732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005736:	461a      	mov	r2, r3
 8005738:	2320      	movs	r3, #32
 800573a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	212c      	movs	r1, #44	; 0x2c
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	4413      	add	r3, r2
 8005748:	333d      	adds	r3, #61	; 0x3d
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b01      	cmp	r3, #1
 800574e:	f040 83ac 	bne.w	8005eaa <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	212c      	movs	r1, #44	; 0x2c
 8005758:	fb01 f303 	mul.w	r3, r1, r3
 800575c:	4413      	add	r3, r2
 800575e:	333d      	adds	r3, #61	; 0x3d
 8005760:	2200      	movs	r2, #0
 8005762:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	212c      	movs	r1, #44	; 0x2c
 800576a:	fb01 f303 	mul.w	r3, r1, r3
 800576e:	4413      	add	r3, r2
 8005770:	3360      	adds	r3, #96	; 0x60
 8005772:	2202      	movs	r2, #2
 8005774:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	4413      	add	r3, r2
 800577e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	0151      	lsls	r1, r2, #5
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	440a      	add	r2, r1
 800578c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005790:	f043 0302 	orr.w	r3, r3, #2
 8005794:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	4611      	mov	r1, r2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f004 fd8a 	bl	800a2ba <USB_HC_Halt>
}
 80057a6:	e380      	b.n	8005eaa <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057be:	d122      	bne.n	8005806 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	0151      	lsls	r1, r2, #5
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	440a      	add	r2, r1
 80057d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057da:	f043 0302 	orr.w	r3, r3, #2
 80057de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	4611      	mov	r1, r2
 80057ea:	4618      	mov	r0, r3
 80057ec:	f004 fd65 	bl	800a2ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057fc:	461a      	mov	r2, r3
 80057fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005802:	6093      	str	r3, [r2, #8]
}
 8005804:	e351      	b.n	8005eaa <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	4413      	add	r3, r2
 800580e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b01      	cmp	r3, #1
 800581a:	d150      	bne.n	80058be <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	212c      	movs	r1, #44	; 0x2c
 8005822:	fb01 f303 	mul.w	r3, r1, r3
 8005826:	4413      	add	r3, r2
 8005828:	335c      	adds	r3, #92	; 0x5c
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	4413      	add	r3, r2
 8005836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005840:	2b40      	cmp	r3, #64	; 0x40
 8005842:	d111      	bne.n	8005868 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	212c      	movs	r1, #44	; 0x2c
 800584a:	fb01 f303 	mul.w	r3, r1, r3
 800584e:	4413      	add	r3, r2
 8005850:	333d      	adds	r3, #61	; 0x3d
 8005852:	2201      	movs	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	4413      	add	r3, r2
 800585e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005862:	461a      	mov	r2, r3
 8005864:	2340      	movs	r3, #64	; 0x40
 8005866:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	4413      	add	r3, r2
 8005870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	0151      	lsls	r1, r2, #5
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	440a      	add	r2, r1
 800587e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005882:	f043 0302 	orr.w	r3, r3, #2
 8005886:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	4611      	mov	r1, r2
 8005892:	4618      	mov	r0, r3
 8005894:	f004 fd11 	bl	800a2ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a4:	461a      	mov	r2, r3
 80058a6:	2301      	movs	r3, #1
 80058a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	212c      	movs	r1, #44	; 0x2c
 80058b0:	fb01 f303 	mul.w	r3, r1, r3
 80058b4:	4413      	add	r3, r2
 80058b6:	3361      	adds	r3, #97	; 0x61
 80058b8:	2201      	movs	r2, #1
 80058ba:	701a      	strb	r2, [r3, #0]
}
 80058bc:	e2f5      	b.n	8005eaa <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d0:	2b40      	cmp	r3, #64	; 0x40
 80058d2:	d13c      	bne.n	800594e <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	212c      	movs	r1, #44	; 0x2c
 80058da:	fb01 f303 	mul.w	r3, r1, r3
 80058de:	4413      	add	r3, r2
 80058e0:	3361      	adds	r3, #97	; 0x61
 80058e2:	2204      	movs	r2, #4
 80058e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	212c      	movs	r1, #44	; 0x2c
 80058ec:	fb01 f303 	mul.w	r3, r1, r3
 80058f0:	4413      	add	r3, r2
 80058f2:	333d      	adds	r3, #61	; 0x3d
 80058f4:	2201      	movs	r2, #1
 80058f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	212c      	movs	r1, #44	; 0x2c
 80058fe:	fb01 f303 	mul.w	r3, r1, r3
 8005902:	4413      	add	r3, r2
 8005904:	335c      	adds	r3, #92	; 0x5c
 8005906:	2200      	movs	r2, #0
 8005908:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	4413      	add	r3, r2
 8005912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	0151      	lsls	r1, r2, #5
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	440a      	add	r2, r1
 8005920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005924:	f043 0302 	orr.w	r3, r3, #2
 8005928:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	4611      	mov	r1, r2
 8005934:	4618      	mov	r0, r3
 8005936:	f004 fcc0 	bl	800a2ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	4413      	add	r3, r2
 8005942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005946:	461a      	mov	r2, r3
 8005948:	2340      	movs	r3, #64	; 0x40
 800594a:	6093      	str	r3, [r2, #8]
}
 800594c:	e2ad      	b.n	8005eaa <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	4413      	add	r3, r2
 8005956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b08      	cmp	r3, #8
 8005962:	d12a      	bne.n	80059ba <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	4413      	add	r3, r2
 800596c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005970:	461a      	mov	r2, r3
 8005972:	2308      	movs	r3, #8
 8005974:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	4413      	add	r3, r2
 800597e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	0151      	lsls	r1, r2, #5
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	440a      	add	r2, r1
 800598c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005990:	f043 0302 	orr.w	r3, r3, #2
 8005994:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	4611      	mov	r1, r2
 80059a0:	4618      	mov	r0, r3
 80059a2:	f004 fc8a 	bl	800a2ba <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	212c      	movs	r1, #44	; 0x2c
 80059ac:	fb01 f303 	mul.w	r3, r1, r3
 80059b0:	4413      	add	r3, r2
 80059b2:	3361      	adds	r3, #97	; 0x61
 80059b4:	2205      	movs	r2, #5
 80059b6:	701a      	strb	r2, [r3, #0]
}
 80059b8:	e277      	b.n	8005eaa <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 0310 	and.w	r3, r3, #16
 80059cc:	2b10      	cmp	r3, #16
 80059ce:	d150      	bne.n	8005a72 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	212c      	movs	r1, #44	; 0x2c
 80059d6:	fb01 f303 	mul.w	r3, r1, r3
 80059da:	4413      	add	r3, r2
 80059dc:	335c      	adds	r3, #92	; 0x5c
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	212c      	movs	r1, #44	; 0x2c
 80059e8:	fb01 f303 	mul.w	r3, r1, r3
 80059ec:	4413      	add	r3, r2
 80059ee:	3361      	adds	r3, #97	; 0x61
 80059f0:	2203      	movs	r2, #3
 80059f2:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	212c      	movs	r1, #44	; 0x2c
 80059fa:	fb01 f303 	mul.w	r3, r1, r3
 80059fe:	4413      	add	r3, r2
 8005a00:	333d      	adds	r3, #61	; 0x3d
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d112      	bne.n	8005a2e <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	212c      	movs	r1, #44	; 0x2c
 8005a0e:	fb01 f303 	mul.w	r3, r1, r3
 8005a12:	4413      	add	r3, r2
 8005a14:	333c      	adds	r3, #60	; 0x3c
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d108      	bne.n	8005a2e <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	212c      	movs	r1, #44	; 0x2c
 8005a22:	fb01 f303 	mul.w	r3, r1, r3
 8005a26:	4413      	add	r3, r2
 8005a28:	333d      	adds	r3, #61	; 0x3d
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a48:	f043 0302 	orr.w	r3, r3, #2
 8005a4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	4611      	mov	r1, r2
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f004 fc2e 	bl	800a2ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	2310      	movs	r3, #16
 8005a6e:	6093      	str	r3, [r2, #8]
}
 8005a70:	e21b      	b.n	8005eaa <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a84:	2b80      	cmp	r3, #128	; 0x80
 8005a86:	d174      	bne.n	8005b72 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d121      	bne.n	8005ad4 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	212c      	movs	r1, #44	; 0x2c
 8005a96:	fb01 f303 	mul.w	r3, r1, r3
 8005a9a:	4413      	add	r3, r2
 8005a9c:	3361      	adds	r3, #97	; 0x61
 8005a9e:	2206      	movs	r2, #6
 8005aa0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	0151      	lsls	r1, r2, #5
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	440a      	add	r2, r1
 8005ab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005abc:	f043 0302 	orr.w	r3, r3, #2
 8005ac0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	4611      	mov	r1, r2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f004 fbf4 	bl	800a2ba <USB_HC_Halt>
 8005ad2:	e044      	b.n	8005b5e <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	212c      	movs	r1, #44	; 0x2c
 8005ada:	fb01 f303 	mul.w	r3, r1, r3
 8005ade:	4413      	add	r3, r2
 8005ae0:	335c      	adds	r3, #92	; 0x5c
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	6879      	ldr	r1, [r7, #4]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	202c      	movs	r0, #44	; 0x2c
 8005aec:	fb00 f303 	mul.w	r3, r0, r3
 8005af0:	440b      	add	r3, r1
 8005af2:	335c      	adds	r3, #92	; 0x5c
 8005af4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	212c      	movs	r1, #44	; 0x2c
 8005afc:	fb01 f303 	mul.w	r3, r1, r3
 8005b00:	4413      	add	r3, r2
 8005b02:	335c      	adds	r3, #92	; 0x5c
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d920      	bls.n	8005b4c <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	212c      	movs	r1, #44	; 0x2c
 8005b10:	fb01 f303 	mul.w	r3, r1, r3
 8005b14:	4413      	add	r3, r2
 8005b16:	335c      	adds	r3, #92	; 0x5c
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	212c      	movs	r1, #44	; 0x2c
 8005b22:	fb01 f303 	mul.w	r3, r1, r3
 8005b26:	4413      	add	r3, r2
 8005b28:	3360      	adds	r3, #96	; 0x60
 8005b2a:	2204      	movs	r2, #4
 8005b2c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	b2d9      	uxtb	r1, r3
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	202c      	movs	r0, #44	; 0x2c
 8005b38:	fb00 f303 	mul.w	r3, r0, r3
 8005b3c:	4413      	add	r3, r2
 8005b3e:	3360      	adds	r3, #96	; 0x60
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7ff f983 	bl	8004e50 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005b4a:	e008      	b.n	8005b5e <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	212c      	movs	r1, #44	; 0x2c
 8005b52:	fb01 f303 	mul.w	r3, r1, r3
 8005b56:	4413      	add	r3, r2
 8005b58:	3360      	adds	r3, #96	; 0x60
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	2380      	movs	r3, #128	; 0x80
 8005b6e:	6093      	str	r3, [r2, #8]
}
 8005b70:	e19b      	b.n	8005eaa <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b88:	d134      	bne.n	8005bf4 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ba4:	f043 0302 	orr.w	r3, r3, #2
 8005ba8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f004 fb80 	bl	800a2ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	2310      	movs	r3, #16
 8005bca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd8:	461a      	mov	r2, r3
 8005bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bde:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	212c      	movs	r1, #44	; 0x2c
 8005be6:	fb01 f303 	mul.w	r3, r1, r3
 8005bea:	4413      	add	r3, r2
 8005bec:	3361      	adds	r3, #97	; 0x61
 8005bee:	2208      	movs	r2, #8
 8005bf0:	701a      	strb	r2, [r3, #0]
}
 8005bf2:	e15a      	b.n	8005eaa <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	f040 814f 	bne.w	8005eaa <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c26:	f023 0302 	bic.w	r3, r3, #2
 8005c2a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	212c      	movs	r1, #44	; 0x2c
 8005c32:	fb01 f303 	mul.w	r3, r1, r3
 8005c36:	4413      	add	r3, r2
 8005c38:	3361      	adds	r3, #97	; 0x61
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d17d      	bne.n	8005d3c <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	212c      	movs	r1, #44	; 0x2c
 8005c46:	fb01 f303 	mul.w	r3, r1, r3
 8005c4a:	4413      	add	r3, r2
 8005c4c:	3360      	adds	r3, #96	; 0x60
 8005c4e:	2201      	movs	r2, #1
 8005c50:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	212c      	movs	r1, #44	; 0x2c
 8005c58:	fb01 f303 	mul.w	r3, r1, r3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	333f      	adds	r3, #63	; 0x3f
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d00a      	beq.n	8005c7c <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	212c      	movs	r1, #44	; 0x2c
 8005c6c:	fb01 f303 	mul.w	r3, r1, r3
 8005c70:	4413      	add	r3, r2
 8005c72:	333f      	adds	r3, #63	; 0x3f
 8005c74:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	f040 8100 	bne.w	8005e7c <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d113      	bne.n	8005cac <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	212c      	movs	r1, #44	; 0x2c
 8005c8a:	fb01 f303 	mul.w	r3, r1, r3
 8005c8e:	4413      	add	r3, r2
 8005c90:	3355      	adds	r3, #85	; 0x55
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	f083 0301 	eor.w	r3, r3, #1
 8005c98:	b2d8      	uxtb	r0, r3
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	212c      	movs	r1, #44	; 0x2c
 8005ca0:	fb01 f303 	mul.w	r3, r1, r3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	3355      	adds	r3, #85	; 0x55
 8005ca8:	4602      	mov	r2, r0
 8005caa:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	f040 80e3 	bne.w	8005e7c <HCD_HC_OUT_IRQHandler+0x7cc>
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	212c      	movs	r1, #44	; 0x2c
 8005cbc:	fb01 f303 	mul.w	r3, r1, r3
 8005cc0:	4413      	add	r3, r2
 8005cc2:	334c      	adds	r3, #76	; 0x4c
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 80d8 	beq.w	8005e7c <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	212c      	movs	r1, #44	; 0x2c
 8005cd2:	fb01 f303 	mul.w	r3, r1, r3
 8005cd6:	4413      	add	r3, r2
 8005cd8:	334c      	adds	r3, #76	; 0x4c
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	202c      	movs	r0, #44	; 0x2c
 8005ce2:	fb00 f202 	mul.w	r2, r0, r2
 8005ce6:	440a      	add	r2, r1
 8005ce8:	3240      	adds	r2, #64	; 0x40
 8005cea:	8812      	ldrh	r2, [r2, #0]
 8005cec:	4413      	add	r3, r2
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	6879      	ldr	r1, [r7, #4]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	202c      	movs	r0, #44	; 0x2c
 8005cf6:	fb00 f202 	mul.w	r2, r0, r2
 8005cfa:	440a      	add	r2, r1
 8005cfc:	3240      	adds	r2, #64	; 0x40
 8005cfe:	8812      	ldrh	r2, [r2, #0]
 8005d00:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 80b5 	beq.w	8005e7c <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	212c      	movs	r1, #44	; 0x2c
 8005d18:	fb01 f303 	mul.w	r3, r1, r3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	3355      	adds	r3, #85	; 0x55
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	f083 0301 	eor.w	r3, r3, #1
 8005d26:	b2d8      	uxtb	r0, r3
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	212c      	movs	r1, #44	; 0x2c
 8005d2e:	fb01 f303 	mul.w	r3, r1, r3
 8005d32:	4413      	add	r3, r2
 8005d34:	3355      	adds	r3, #85	; 0x55
 8005d36:	4602      	mov	r2, r0
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	e09f      	b.n	8005e7c <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	212c      	movs	r1, #44	; 0x2c
 8005d42:	fb01 f303 	mul.w	r3, r1, r3
 8005d46:	4413      	add	r3, r2
 8005d48:	3361      	adds	r3, #97	; 0x61
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d109      	bne.n	8005d64 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	212c      	movs	r1, #44	; 0x2c
 8005d56:	fb01 f303 	mul.w	r3, r1, r3
 8005d5a:	4413      	add	r3, r2
 8005d5c:	3360      	adds	r3, #96	; 0x60
 8005d5e:	2202      	movs	r2, #2
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	e08b      	b.n	8005e7c <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	212c      	movs	r1, #44	; 0x2c
 8005d6a:	fb01 f303 	mul.w	r3, r1, r3
 8005d6e:	4413      	add	r3, r2
 8005d70:	3361      	adds	r3, #97	; 0x61
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b04      	cmp	r3, #4
 8005d76:	d109      	bne.n	8005d8c <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	212c      	movs	r1, #44	; 0x2c
 8005d7e:	fb01 f303 	mul.w	r3, r1, r3
 8005d82:	4413      	add	r3, r2
 8005d84:	3360      	adds	r3, #96	; 0x60
 8005d86:	2202      	movs	r2, #2
 8005d88:	701a      	strb	r2, [r3, #0]
 8005d8a:	e077      	b.n	8005e7c <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	212c      	movs	r1, #44	; 0x2c
 8005d92:	fb01 f303 	mul.w	r3, r1, r3
 8005d96:	4413      	add	r3, r2
 8005d98:	3361      	adds	r3, #97	; 0x61
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2b05      	cmp	r3, #5
 8005d9e:	d109      	bne.n	8005db4 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	212c      	movs	r1, #44	; 0x2c
 8005da6:	fb01 f303 	mul.w	r3, r1, r3
 8005daa:	4413      	add	r3, r2
 8005dac:	3360      	adds	r3, #96	; 0x60
 8005dae:	2205      	movs	r2, #5
 8005db0:	701a      	strb	r2, [r3, #0]
 8005db2:	e063      	b.n	8005e7c <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	212c      	movs	r1, #44	; 0x2c
 8005dba:	fb01 f303 	mul.w	r3, r1, r3
 8005dbe:	4413      	add	r3, r2
 8005dc0:	3361      	adds	r3, #97	; 0x61
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b06      	cmp	r3, #6
 8005dc6:	d009      	beq.n	8005ddc <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	212c      	movs	r1, #44	; 0x2c
 8005dce:	fb01 f303 	mul.w	r3, r1, r3
 8005dd2:	4413      	add	r3, r2
 8005dd4:	3361      	adds	r3, #97	; 0x61
 8005dd6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d14f      	bne.n	8005e7c <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	212c      	movs	r1, #44	; 0x2c
 8005de2:	fb01 f303 	mul.w	r3, r1, r3
 8005de6:	4413      	add	r3, r2
 8005de8:	335c      	adds	r3, #92	; 0x5c
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	202c      	movs	r0, #44	; 0x2c
 8005df4:	fb00 f303 	mul.w	r3, r0, r3
 8005df8:	440b      	add	r3, r1
 8005dfa:	335c      	adds	r3, #92	; 0x5c
 8005dfc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	212c      	movs	r1, #44	; 0x2c
 8005e04:	fb01 f303 	mul.w	r3, r1, r3
 8005e08:	4413      	add	r3, r2
 8005e0a:	335c      	adds	r3, #92	; 0x5c
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d912      	bls.n	8005e38 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	212c      	movs	r1, #44	; 0x2c
 8005e18:	fb01 f303 	mul.w	r3, r1, r3
 8005e1c:	4413      	add	r3, r2
 8005e1e:	335c      	adds	r3, #92	; 0x5c
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	212c      	movs	r1, #44	; 0x2c
 8005e2a:	fb01 f303 	mul.w	r3, r1, r3
 8005e2e:	4413      	add	r3, r2
 8005e30:	3360      	adds	r3, #96	; 0x60
 8005e32:	2204      	movs	r2, #4
 8005e34:	701a      	strb	r2, [r3, #0]
 8005e36:	e021      	b.n	8005e7c <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	212c      	movs	r1, #44	; 0x2c
 8005e3e:	fb01 f303 	mul.w	r3, r1, r3
 8005e42:	4413      	add	r3, r2
 8005e44:	3360      	adds	r3, #96	; 0x60
 8005e46:	2202      	movs	r2, #2
 8005e48:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e60:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e68:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e76:	461a      	mov	r2, r3
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e88:	461a      	mov	r2, r3
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	b2d9      	uxtb	r1, r3
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	202c      	movs	r0, #44	; 0x2c
 8005e98:	fb00 f303 	mul.w	r3, r0, r3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	3360      	adds	r3, #96	; 0x60
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7fe ffd3 	bl	8004e50 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005eaa:	bf00      	nop
 8005eac:	3720      	adds	r7, #32
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b08a      	sub	sp, #40	; 0x28
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	0c5b      	lsrs	r3, r3, #17
 8005ed8:	f003 030f 	and.w	r3, r3, #15
 8005edc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	091b      	lsrs	r3, r3, #4
 8005ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ee6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d004      	beq.n	8005ef8 <HCD_RXQLVL_IRQHandler+0x46>
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b05      	cmp	r3, #5
 8005ef2:	f000 80a9 	beq.w	8006048 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005ef6:	e0aa      	b.n	800604e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 80a6 	beq.w	800604c <HCD_RXQLVL_IRQHandler+0x19a>
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	212c      	movs	r1, #44	; 0x2c
 8005f06:	fb01 f303 	mul.w	r3, r1, r3
 8005f0a:	4413      	add	r3, r2
 8005f0c:	3344      	adds	r3, #68	; 0x44
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 809b 	beq.w	800604c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	212c      	movs	r1, #44	; 0x2c
 8005f1c:	fb01 f303 	mul.w	r3, r1, r3
 8005f20:	4413      	add	r3, r2
 8005f22:	3350      	adds	r3, #80	; 0x50
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	441a      	add	r2, r3
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	202c      	movs	r0, #44	; 0x2c
 8005f30:	fb00 f303 	mul.w	r3, r0, r3
 8005f34:	440b      	add	r3, r1
 8005f36:	334c      	adds	r3, #76	; 0x4c
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d87a      	bhi.n	8006034 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6818      	ldr	r0, [r3, #0]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	212c      	movs	r1, #44	; 0x2c
 8005f48:	fb01 f303 	mul.w	r3, r1, r3
 8005f4c:	4413      	add	r3, r2
 8005f4e:	3344      	adds	r3, #68	; 0x44
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	b292      	uxth	r2, r2
 8005f56:	4619      	mov	r1, r3
 8005f58:	f004 f804 	bl	8009f64 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	212c      	movs	r1, #44	; 0x2c
 8005f62:	fb01 f303 	mul.w	r3, r1, r3
 8005f66:	4413      	add	r3, r2
 8005f68:	3344      	adds	r3, #68	; 0x44
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	441a      	add	r2, r3
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	202c      	movs	r0, #44	; 0x2c
 8005f76:	fb00 f303 	mul.w	r3, r0, r3
 8005f7a:	440b      	add	r3, r1
 8005f7c:	3344      	adds	r3, #68	; 0x44
 8005f7e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	212c      	movs	r1, #44	; 0x2c
 8005f86:	fb01 f303 	mul.w	r3, r1, r3
 8005f8a:	4413      	add	r3, r2
 8005f8c:	3350      	adds	r3, #80	; 0x50
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	441a      	add	r2, r3
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	202c      	movs	r0, #44	; 0x2c
 8005f9a:	fb00 f303 	mul.w	r3, r0, r3
 8005f9e:	440b      	add	r3, r1
 8005fa0:	3350      	adds	r3, #80	; 0x50
 8005fa2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	0cdb      	lsrs	r3, r3, #19
 8005fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fb8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	212c      	movs	r1, #44	; 0x2c
 8005fc0:	fb01 f303 	mul.w	r3, r1, r3
 8005fc4:	4413      	add	r3, r2
 8005fc6:	3340      	adds	r3, #64	; 0x40
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d13c      	bne.n	800604c <HCD_RXQLVL_IRQHandler+0x19a>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d039      	beq.n	800604c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fee:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ff6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006004:	461a      	mov	r2, r3
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	212c      	movs	r1, #44	; 0x2c
 8006010:	fb01 f303 	mul.w	r3, r1, r3
 8006014:	4413      	add	r3, r2
 8006016:	3354      	adds	r3, #84	; 0x54
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	f083 0301 	eor.w	r3, r3, #1
 800601e:	b2d8      	uxtb	r0, r3
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	212c      	movs	r1, #44	; 0x2c
 8006026:	fb01 f303 	mul.w	r3, r1, r3
 800602a:	4413      	add	r3, r2
 800602c:	3354      	adds	r3, #84	; 0x54
 800602e:	4602      	mov	r2, r0
 8006030:	701a      	strb	r2, [r3, #0]
      break;
 8006032:	e00b      	b.n	800604c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	212c      	movs	r1, #44	; 0x2c
 800603a:	fb01 f303 	mul.w	r3, r1, r3
 800603e:	4413      	add	r3, r2
 8006040:	3360      	adds	r3, #96	; 0x60
 8006042:	2204      	movs	r2, #4
 8006044:	701a      	strb	r2, [r3, #0]
      break;
 8006046:	e001      	b.n	800604c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006048:	bf00      	nop
 800604a:	e000      	b.n	800604e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800604c:	bf00      	nop
  }
}
 800604e:	bf00      	nop
 8006050:	3728      	adds	r7, #40	; 0x28
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b086      	sub	sp, #24
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006082:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b02      	cmp	r3, #2
 800608c:	d10b      	bne.n	80060a6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b01      	cmp	r3, #1
 8006096:	d102      	bne.n	800609e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7fe feb1 	bl	8004e00 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f043 0302 	orr.w	r3, r3, #2
 80060a4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	d132      	bne.n	8006116 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f043 0308 	orr.w	r3, r3, #8
 80060b6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f003 0304 	and.w	r3, r3, #4
 80060be:	2b04      	cmp	r3, #4
 80060c0:	d126      	bne.n	8006110 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d113      	bne.n	80060f2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80060d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060d4:	d106      	bne.n	80060e4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2102      	movs	r1, #2
 80060dc:	4618      	mov	r0, r3
 80060de:	f004 f8a1 	bl	800a224 <USB_InitFSLSPClkSel>
 80060e2:	e011      	b.n	8006108 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2101      	movs	r1, #1
 80060ea:	4618      	mov	r0, r3
 80060ec:	f004 f89a 	bl	800a224 <USB_InitFSLSPClkSel>
 80060f0:	e00a      	b.n	8006108 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d106      	bne.n	8006108 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006100:	461a      	mov	r2, r3
 8006102:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006106:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7fe fe8d 	bl	8004e28 <HAL_HCD_PortEnabled_Callback>
 800610e:	e002      	b.n	8006116 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7fe fe93 	bl	8004e3c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f003 0320 	and.w	r3, r3, #32
 800611c:	2b20      	cmp	r3, #32
 800611e:	d103      	bne.n	8006128 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f043 0320 	orr.w	r3, r3, #32
 8006126:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800612e:	461a      	mov	r2, r3
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	6013      	str	r3, [r2, #0]
}
 8006134:	bf00      	nop
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e12b      	b.n	80063a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fc fce2 	bl	8002b2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2224      	movs	r2, #36	; 0x24
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0201 	bic.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800618e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800619e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061a0:	f001 f9fc 	bl	800759c <HAL_RCC_GetPCLK1Freq>
 80061a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	4a81      	ldr	r2, [pc, #516]	; (80063b0 <HAL_I2C_Init+0x274>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d807      	bhi.n	80061c0 <HAL_I2C_Init+0x84>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4a80      	ldr	r2, [pc, #512]	; (80063b4 <HAL_I2C_Init+0x278>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	bf94      	ite	ls
 80061b8:	2301      	movls	r3, #1
 80061ba:	2300      	movhi	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	e006      	b.n	80061ce <HAL_I2C_Init+0x92>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4a7d      	ldr	r2, [pc, #500]	; (80063b8 <HAL_I2C_Init+0x27c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	bf94      	ite	ls
 80061c8:	2301      	movls	r3, #1
 80061ca:	2300      	movhi	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e0e7      	b.n	80063a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4a78      	ldr	r2, [pc, #480]	; (80063bc <HAL_I2C_Init+0x280>)
 80061da:	fba2 2303 	umull	r2, r3, r2, r3
 80061de:	0c9b      	lsrs	r3, r3, #18
 80061e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	4a6a      	ldr	r2, [pc, #424]	; (80063b0 <HAL_I2C_Init+0x274>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d802      	bhi.n	8006210 <HAL_I2C_Init+0xd4>
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	3301      	adds	r3, #1
 800620e:	e009      	b.n	8006224 <HAL_I2C_Init+0xe8>
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006216:	fb02 f303 	mul.w	r3, r2, r3
 800621a:	4a69      	ldr	r2, [pc, #420]	; (80063c0 <HAL_I2C_Init+0x284>)
 800621c:	fba2 2303 	umull	r2, r3, r2, r3
 8006220:	099b      	lsrs	r3, r3, #6
 8006222:	3301      	adds	r3, #1
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6812      	ldr	r2, [r2, #0]
 8006228:	430b      	orrs	r3, r1
 800622a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006236:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	495c      	ldr	r1, [pc, #368]	; (80063b0 <HAL_I2C_Init+0x274>)
 8006240:	428b      	cmp	r3, r1
 8006242:	d819      	bhi.n	8006278 <HAL_I2C_Init+0x13c>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	1e59      	subs	r1, r3, #1
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006252:	1c59      	adds	r1, r3, #1
 8006254:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006258:	400b      	ands	r3, r1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00a      	beq.n	8006274 <HAL_I2C_Init+0x138>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	1e59      	subs	r1, r3, #1
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	fbb1 f3f3 	udiv	r3, r1, r3
 800626c:	3301      	adds	r3, #1
 800626e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006272:	e051      	b.n	8006318 <HAL_I2C_Init+0x1dc>
 8006274:	2304      	movs	r3, #4
 8006276:	e04f      	b.n	8006318 <HAL_I2C_Init+0x1dc>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d111      	bne.n	80062a4 <HAL_I2C_Init+0x168>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	1e58      	subs	r0, r3, #1
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6859      	ldr	r1, [r3, #4]
 8006288:	460b      	mov	r3, r1
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	440b      	add	r3, r1
 800628e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006292:	3301      	adds	r3, #1
 8006294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006298:	2b00      	cmp	r3, #0
 800629a:	bf0c      	ite	eq
 800629c:	2301      	moveq	r3, #1
 800629e:	2300      	movne	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	e012      	b.n	80062ca <HAL_I2C_Init+0x18e>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	1e58      	subs	r0, r3, #1
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6859      	ldr	r1, [r3, #4]
 80062ac:	460b      	mov	r3, r1
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	0099      	lsls	r1, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ba:	3301      	adds	r3, #1
 80062bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	bf0c      	ite	eq
 80062c4:	2301      	moveq	r3, #1
 80062c6:	2300      	movne	r3, #0
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <HAL_I2C_Init+0x196>
 80062ce:	2301      	movs	r3, #1
 80062d0:	e022      	b.n	8006318 <HAL_I2C_Init+0x1dc>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10e      	bne.n	80062f8 <HAL_I2C_Init+0x1bc>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	1e58      	subs	r0, r3, #1
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6859      	ldr	r1, [r3, #4]
 80062e2:	460b      	mov	r3, r1
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	440b      	add	r3, r1
 80062e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ec:	3301      	adds	r3, #1
 80062ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f6:	e00f      	b.n	8006318 <HAL_I2C_Init+0x1dc>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	1e58      	subs	r0, r3, #1
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6859      	ldr	r1, [r3, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	440b      	add	r3, r1
 8006306:	0099      	lsls	r1, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	fbb0 f3f3 	udiv	r3, r0, r3
 800630e:	3301      	adds	r3, #1
 8006310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	6809      	ldr	r1, [r1, #0]
 800631c:	4313      	orrs	r3, r2
 800631e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69da      	ldr	r2, [r3, #28]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6911      	ldr	r1, [r2, #16]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	68d2      	ldr	r2, [r2, #12]
 8006352:	4311      	orrs	r1, r2
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	6812      	ldr	r2, [r2, #0]
 8006358:	430b      	orrs	r3, r1
 800635a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	695a      	ldr	r2, [r3, #20]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0201 	orr.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2220      	movs	r2, #32
 8006392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	000186a0 	.word	0x000186a0
 80063b4:	001e847f 	.word	0x001e847f
 80063b8:	003d08ff 	.word	0x003d08ff
 80063bc:	431bde83 	.word	0x431bde83
 80063c0:	10624dd3 	.word	0x10624dd3

080063c4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b088      	sub	sp, #32
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e128      	b.n	8006628 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d109      	bne.n	80063f6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a90      	ldr	r2, [pc, #576]	; (8006630 <HAL_I2S_Init+0x26c>)
 80063ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7fc fbe3 	bl	8002bbc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2202      	movs	r2, #2
 80063fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6812      	ldr	r2, [r2, #0]
 8006408:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800640c:	f023 030f 	bic.w	r3, r3, #15
 8006410:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2202      	movs	r2, #2
 8006418:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	2b02      	cmp	r3, #2
 8006420:	d060      	beq.n	80064e4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d102      	bne.n	8006430 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800642a:	2310      	movs	r3, #16
 800642c:	617b      	str	r3, [r7, #20]
 800642e:	e001      	b.n	8006434 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006430:	2320      	movs	r3, #32
 8006432:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	2b20      	cmp	r3, #32
 800643a:	d802      	bhi.n	8006442 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006442:	2001      	movs	r0, #1
 8006444:	f001 f9e6 	bl	8007814 <HAL_RCCEx_GetPeriphCLKFreq>
 8006448:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006452:	d125      	bne.n	80064a0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d010      	beq.n	800647e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	fbb2 f2f3 	udiv	r2, r2, r3
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	005b      	lsls	r3, r3, #1
 800646e:	461a      	mov	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	fbb2 f3f3 	udiv	r3, r2, r3
 8006478:	3305      	adds	r3, #5
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	e01f      	b.n	80064be <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	fbb2 f2f3 	udiv	r2, r2, r3
 8006488:	4613      	mov	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	005b      	lsls	r3, r3, #1
 8006490:	461a      	mov	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	fbb2 f3f3 	udiv	r3, r2, r3
 800649a:	3305      	adds	r3, #5
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	e00e      	b.n	80064be <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80064a8:	4613      	mov	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	461a      	mov	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ba:	3305      	adds	r3, #5
 80064bc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	4a5c      	ldr	r2, [pc, #368]	; (8006634 <HAL_I2S_Init+0x270>)
 80064c2:	fba2 2303 	umull	r2, r3, r2, r3
 80064c6:	08db      	lsrs	r3, r3, #3
 80064c8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	085b      	lsrs	r3, r3, #1
 80064da:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	021b      	lsls	r3, r3, #8
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	e003      	b.n	80064ec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80064e4:	2302      	movs	r3, #2
 80064e6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d902      	bls.n	80064f8 <HAL_I2S_Init+0x134>
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	2bff      	cmp	r3, #255	; 0xff
 80064f6:	d907      	bls.n	8006508 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fc:	f043 0210 	orr.w	r2, r3, #16
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e08f      	b.n	8006628 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691a      	ldr	r2, [r3, #16]
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	ea42 0103 	orr.w	r1, r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69fa      	ldr	r2, [r7, #28]
 8006518:	430a      	orrs	r2, r1
 800651a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006526:	f023 030f 	bic.w	r3, r3, #15
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6851      	ldr	r1, [r2, #4]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6892      	ldr	r2, [r2, #8]
 8006532:	4311      	orrs	r1, r2
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	68d2      	ldr	r2, [r2, #12]
 8006538:	4311      	orrs	r1, r2
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6992      	ldr	r2, [r2, #24]
 800653e:	430a      	orrs	r2, r1
 8006540:	431a      	orrs	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800654a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d161      	bne.n	8006618 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a38      	ldr	r2, [pc, #224]	; (8006638 <HAL_I2S_Init+0x274>)
 8006558:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a37      	ldr	r2, [pc, #220]	; (800663c <HAL_I2S_Init+0x278>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d101      	bne.n	8006568 <HAL_I2S_Init+0x1a4>
 8006564:	4b36      	ldr	r3, [pc, #216]	; (8006640 <HAL_I2S_Init+0x27c>)
 8006566:	e001      	b.n	800656c <HAL_I2S_Init+0x1a8>
 8006568:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	6812      	ldr	r2, [r2, #0]
 8006572:	4932      	ldr	r1, [pc, #200]	; (800663c <HAL_I2S_Init+0x278>)
 8006574:	428a      	cmp	r2, r1
 8006576:	d101      	bne.n	800657c <HAL_I2S_Init+0x1b8>
 8006578:	4a31      	ldr	r2, [pc, #196]	; (8006640 <HAL_I2S_Init+0x27c>)
 800657a:	e001      	b.n	8006580 <HAL_I2S_Init+0x1bc>
 800657c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006580:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006584:	f023 030f 	bic.w	r3, r3, #15
 8006588:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a2b      	ldr	r2, [pc, #172]	; (800663c <HAL_I2S_Init+0x278>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d101      	bne.n	8006598 <HAL_I2S_Init+0x1d4>
 8006594:	4b2a      	ldr	r3, [pc, #168]	; (8006640 <HAL_I2S_Init+0x27c>)
 8006596:	e001      	b.n	800659c <HAL_I2S_Init+0x1d8>
 8006598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800659c:	2202      	movs	r2, #2
 800659e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a25      	ldr	r2, [pc, #148]	; (800663c <HAL_I2S_Init+0x278>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d101      	bne.n	80065ae <HAL_I2S_Init+0x1ea>
 80065aa:	4b25      	ldr	r3, [pc, #148]	; (8006640 <HAL_I2S_Init+0x27c>)
 80065ac:	e001      	b.n	80065b2 <HAL_I2S_Init+0x1ee>
 80065ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065be:	d003      	beq.n	80065c8 <HAL_I2S_Init+0x204>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d103      	bne.n	80065d0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80065c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065cc:	613b      	str	r3, [r7, #16]
 80065ce:	e001      	b.n	80065d4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80065d0:	2300      	movs	r3, #0
 80065d2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80065de:	4313      	orrs	r3, r2
 80065e0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80065e8:	4313      	orrs	r3, r2
 80065ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80065f2:	4313      	orrs	r3, r2
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	897b      	ldrh	r3, [r7, #10]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006600:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a0d      	ldr	r2, [pc, #52]	; (800663c <HAL_I2S_Init+0x278>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d101      	bne.n	8006610 <HAL_I2S_Init+0x24c>
 800660c:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <HAL_I2S_Init+0x27c>)
 800660e:	e001      	b.n	8006614 <HAL_I2S_Init+0x250>
 8006610:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006614:	897a      	ldrh	r2, [r7, #10]
 8006616:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3720      	adds	r7, #32
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	0800673b 	.word	0x0800673b
 8006634:	cccccccd 	.word	0xcccccccd
 8006638:	08006851 	.word	0x08006851
 800663c:	40003800 	.word	0x40003800
 8006640:	40003400 	.word	0x40003400

08006644 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668c:	881a      	ldrh	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	1c9a      	adds	r2, r3, #2
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	3b01      	subs	r3, #1
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10e      	bne.n	80066d4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066c4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff ffb8 	bl	8006644 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ee:	b292      	uxth	r2, r2
 80066f0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f6:	1c9a      	adds	r2, r3, #2
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006700:	b29b      	uxth	r3, r3
 8006702:	3b01      	subs	r3, #1
 8006704:	b29a      	uxth	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800670e:	b29b      	uxth	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10e      	bne.n	8006732 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006722:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff ff93 	bl	8006658 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006732:	bf00      	nop
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b086      	sub	sp, #24
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b04      	cmp	r3, #4
 8006754:	d13a      	bne.n	80067cc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b01      	cmp	r3, #1
 800675e:	d109      	bne.n	8006774 <I2S_IRQHandler+0x3a>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676a:	2b40      	cmp	r3, #64	; 0x40
 800676c:	d102      	bne.n	8006774 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff ffb4 	bl	80066dc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677a:	2b40      	cmp	r3, #64	; 0x40
 800677c:	d126      	bne.n	80067cc <I2S_IRQHandler+0x92>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f003 0320 	and.w	r3, r3, #32
 8006788:	2b20      	cmp	r3, #32
 800678a:	d11f      	bne.n	80067cc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800679a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800679c:	2300      	movs	r3, #0
 800679e:	613b      	str	r3, [r7, #16]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	613b      	str	r3, [r7, #16]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067be:	f043 0202 	orr.w	r2, r3, #2
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7ff ff50 	bl	800666c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b03      	cmp	r3, #3
 80067d6:	d136      	bne.n	8006846 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d109      	bne.n	80067f6 <I2S_IRQHandler+0xbc>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ec:	2b80      	cmp	r3, #128	; 0x80
 80067ee:	d102      	bne.n	80067f6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff ff45 	bl	8006680 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d122      	bne.n	8006846 <I2S_IRQHandler+0x10c>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b20      	cmp	r3, #32
 800680c:	d11b      	bne.n	8006846 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800681c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800681e:	2300      	movs	r3, #0
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	60fb      	str	r3, [r7, #12]
 800682a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006838:	f043 0204 	orr.w	r2, r3, #4
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff ff13 	bl	800666c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006846:	bf00      	nop
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4aa2      	ldr	r2, [pc, #648]	; (8006af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d101      	bne.n	800686e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800686a:	4ba2      	ldr	r3, [pc, #648]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800686c:	e001      	b.n	8006872 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800686e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a9b      	ldr	r2, [pc, #620]	; (8006af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d101      	bne.n	800688c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006888:	4b9a      	ldr	r3, [pc, #616]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800688a:	e001      	b.n	8006890 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800688c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800689c:	d004      	beq.n	80068a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f040 8099 	bne.w	80069da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d107      	bne.n	80068c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f925 	bl	8006b0c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d107      	bne.n	80068dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f9c8 	bl	8006c6c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e2:	2b40      	cmp	r3, #64	; 0x40
 80068e4:	d13a      	bne.n	800695c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f003 0320 	and.w	r3, r3, #32
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d035      	beq.n	800695c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a7e      	ldr	r2, [pc, #504]	; (8006af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d101      	bne.n	80068fe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80068fa:	4b7e      	ldr	r3, [pc, #504]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80068fc:	e001      	b.n	8006902 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80068fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4979      	ldr	r1, [pc, #484]	; (8006af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800690a:	428b      	cmp	r3, r1
 800690c:	d101      	bne.n	8006912 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800690e:	4b79      	ldr	r3, [pc, #484]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006910:	e001      	b.n	8006916 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006916:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800691a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800692a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694e:	f043 0202 	orr.w	r2, r3, #2
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7ff fe88 	bl	800666c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	f003 0308 	and.w	r3, r3, #8
 8006962:	2b08      	cmp	r3, #8
 8006964:	f040 80be 	bne.w	8006ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 80b8 	beq.w	8006ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006982:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a59      	ldr	r2, [pc, #356]	; (8006af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d101      	bne.n	8006992 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800698e:	4b59      	ldr	r3, [pc, #356]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006990:	e001      	b.n	8006996 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006992:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4954      	ldr	r1, [pc, #336]	; (8006af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800699e:	428b      	cmp	r3, r1
 80069a0:	d101      	bne.n	80069a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80069a2:	4b54      	ldr	r3, [pc, #336]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80069a4:	e001      	b.n	80069aa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80069a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069ae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80069b0:	2300      	movs	r3, #0
 80069b2:	60bb      	str	r3, [r7, #8]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	60bb      	str	r3, [r7, #8]
 80069bc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ca:	f043 0204 	orr.w	r2, r3, #4
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff fe4a 	bl	800666c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069d8:	e084      	b.n	8006ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d107      	bne.n	80069f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f8be 	bl	8006b70 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d107      	bne.n	8006a0e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f8fd 	bl	8006c08 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a14:	2b40      	cmp	r3, #64	; 0x40
 8006a16:	d12f      	bne.n	8006a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d02a      	beq.n	8006a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a30:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a2e      	ldr	r2, [pc, #184]	; (8006af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d101      	bne.n	8006a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006a3c:	4b2d      	ldr	r3, [pc, #180]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a3e:	e001      	b.n	8006a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4929      	ldr	r1, [pc, #164]	; (8006af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a4c:	428b      	cmp	r3, r1
 8006a4e:	d101      	bne.n	8006a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006a50:	4b28      	ldr	r3, [pc, #160]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a52:	e001      	b.n	8006a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006a54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a5c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6a:	f043 0202 	orr.w	r2, r3, #2
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff fdfa 	bl	800666c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b08      	cmp	r3, #8
 8006a80:	d131      	bne.n	8006ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f003 0320 	and.w	r3, r3, #32
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d02c      	beq.n	8006ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a17      	ldr	r2, [pc, #92]	; (8006af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d101      	bne.n	8006a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006a96:	4b17      	ldr	r3, [pc, #92]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a98:	e001      	b.n	8006a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006a9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4912      	ldr	r1, [pc, #72]	; (8006af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006aa6:	428b      	cmp	r3, r1
 8006aa8:	d101      	bne.n	8006aae <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006aaa:	4b12      	ldr	r3, [pc, #72]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006aac:	e001      	b.n	8006ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006aae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ab2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ab6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ac6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad4:	f043 0204 	orr.w	r2, r3, #4
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff fdc5 	bl	800666c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006ae2:	e000      	b.n	8006ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006ae4:	bf00      	nop
}
 8006ae6:	bf00      	nop
 8006ae8:	3720      	adds	r7, #32
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	40003800 	.word	0x40003800
 8006af4:	40003400 	.word	0x40003400

08006af8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	1c99      	adds	r1, r3, #2
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	6251      	str	r1, [r2, #36]	; 0x24
 8006b1e:	881a      	ldrh	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d113      	bne.n	8006b66 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b4c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d106      	bne.n	8006b66 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff ffc9 	bl	8006af8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b66:	bf00      	nop
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
	...

08006b70 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	1c99      	adds	r1, r3, #2
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6251      	str	r1, [r2, #36]	; 0x24
 8006b82:	8819      	ldrh	r1, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a1d      	ldr	r2, [pc, #116]	; (8006c00 <I2SEx_TxISR_I2SExt+0x90>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d101      	bne.n	8006b92 <I2SEx_TxISR_I2SExt+0x22>
 8006b8e:	4b1d      	ldr	r3, [pc, #116]	; (8006c04 <I2SEx_TxISR_I2SExt+0x94>)
 8006b90:	e001      	b.n	8006b96 <I2SEx_TxISR_I2SExt+0x26>
 8006b92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b96:	460a      	mov	r2, r1
 8006b98:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d121      	bne.n	8006bf6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a12      	ldr	r2, [pc, #72]	; (8006c00 <I2SEx_TxISR_I2SExt+0x90>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d101      	bne.n	8006bc0 <I2SEx_TxISR_I2SExt+0x50>
 8006bbc:	4b11      	ldr	r3, [pc, #68]	; (8006c04 <I2SEx_TxISR_I2SExt+0x94>)
 8006bbe:	e001      	b.n	8006bc4 <I2SEx_TxISR_I2SExt+0x54>
 8006bc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	490d      	ldr	r1, [pc, #52]	; (8006c00 <I2SEx_TxISR_I2SExt+0x90>)
 8006bcc:	428b      	cmp	r3, r1
 8006bce:	d101      	bne.n	8006bd4 <I2SEx_TxISR_I2SExt+0x64>
 8006bd0:	4b0c      	ldr	r3, [pc, #48]	; (8006c04 <I2SEx_TxISR_I2SExt+0x94>)
 8006bd2:	e001      	b.n	8006bd8 <I2SEx_TxISR_I2SExt+0x68>
 8006bd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006bdc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d106      	bne.n	8006bf6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7ff ff81 	bl	8006af8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bf6:	bf00      	nop
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	40003800 	.word	0x40003800
 8006c04:	40003400 	.word	0x40003400

08006c08 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68d8      	ldr	r0, [r3, #12]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1a:	1c99      	adds	r1, r3, #2
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006c20:	b282      	uxth	r2, r0
 8006c22:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d113      	bne.n	8006c64 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c4a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7ff ff4a 	bl	8006af8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c64:	bf00      	nop
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a20      	ldr	r2, [pc, #128]	; (8006cfc <I2SEx_RxISR_I2SExt+0x90>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d101      	bne.n	8006c82 <I2SEx_RxISR_I2SExt+0x16>
 8006c7e:	4b20      	ldr	r3, [pc, #128]	; (8006d00 <I2SEx_RxISR_I2SExt+0x94>)
 8006c80:	e001      	b.n	8006c86 <I2SEx_RxISR_I2SExt+0x1a>
 8006c82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c86:	68d8      	ldr	r0, [r3, #12]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8c:	1c99      	adds	r1, r3, #2
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006c92:	b282      	uxth	r2, r0
 8006c94:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d121      	bne.n	8006cf2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a12      	ldr	r2, [pc, #72]	; (8006cfc <I2SEx_RxISR_I2SExt+0x90>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d101      	bne.n	8006cbc <I2SEx_RxISR_I2SExt+0x50>
 8006cb8:	4b11      	ldr	r3, [pc, #68]	; (8006d00 <I2SEx_RxISR_I2SExt+0x94>)
 8006cba:	e001      	b.n	8006cc0 <I2SEx_RxISR_I2SExt+0x54>
 8006cbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	490d      	ldr	r1, [pc, #52]	; (8006cfc <I2SEx_RxISR_I2SExt+0x90>)
 8006cc8:	428b      	cmp	r3, r1
 8006cca:	d101      	bne.n	8006cd0 <I2SEx_RxISR_I2SExt+0x64>
 8006ccc:	4b0c      	ldr	r3, [pc, #48]	; (8006d00 <I2SEx_RxISR_I2SExt+0x94>)
 8006cce:	e001      	b.n	8006cd4 <I2SEx_RxISR_I2SExt+0x68>
 8006cd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006cd8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d106      	bne.n	8006cf2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7ff ff03 	bl	8006af8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006cf2:	bf00      	nop
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	40003800 	.word	0x40003800
 8006d00:	40003400 	.word	0x40003400

08006d04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e264      	b.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d075      	beq.n	8006e0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d22:	4ba3      	ldr	r3, [pc, #652]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 030c 	and.w	r3, r3, #12
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	d00c      	beq.n	8006d48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d2e:	4ba0      	ldr	r3, [pc, #640]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d36:	2b08      	cmp	r3, #8
 8006d38:	d112      	bne.n	8006d60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d3a:	4b9d      	ldr	r3, [pc, #628]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d46:	d10b      	bne.n	8006d60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d48:	4b99      	ldr	r3, [pc, #612]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d05b      	beq.n	8006e0c <HAL_RCC_OscConfig+0x108>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d157      	bne.n	8006e0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e23f      	b.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d68:	d106      	bne.n	8006d78 <HAL_RCC_OscConfig+0x74>
 8006d6a:	4b91      	ldr	r3, [pc, #580]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a90      	ldr	r2, [pc, #576]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	e01d      	b.n	8006db4 <HAL_RCC_OscConfig+0xb0>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d80:	d10c      	bne.n	8006d9c <HAL_RCC_OscConfig+0x98>
 8006d82:	4b8b      	ldr	r3, [pc, #556]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a8a      	ldr	r2, [pc, #552]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	4b88      	ldr	r3, [pc, #544]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a87      	ldr	r2, [pc, #540]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	e00b      	b.n	8006db4 <HAL_RCC_OscConfig+0xb0>
 8006d9c:	4b84      	ldr	r3, [pc, #528]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a83      	ldr	r2, [pc, #524]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006da6:	6013      	str	r3, [r2, #0]
 8006da8:	4b81      	ldr	r3, [pc, #516]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a80      	ldr	r2, [pc, #512]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d013      	beq.n	8006de4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dbc:	f7fc fb92 	bl	80034e4 <HAL_GetTick>
 8006dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dc2:	e008      	b.n	8006dd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dc4:	f7fc fb8e 	bl	80034e4 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	2b64      	cmp	r3, #100	; 0x64
 8006dd0:	d901      	bls.n	8006dd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e204      	b.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dd6:	4b76      	ldr	r3, [pc, #472]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d0f0      	beq.n	8006dc4 <HAL_RCC_OscConfig+0xc0>
 8006de2:	e014      	b.n	8006e0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de4:	f7fc fb7e 	bl	80034e4 <HAL_GetTick>
 8006de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dea:	e008      	b.n	8006dfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dec:	f7fc fb7a 	bl	80034e4 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b64      	cmp	r3, #100	; 0x64
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e1f0      	b.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dfe:	4b6c      	ldr	r3, [pc, #432]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1f0      	bne.n	8006dec <HAL_RCC_OscConfig+0xe8>
 8006e0a:	e000      	b.n	8006e0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d063      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e1a:	4b65      	ldr	r3, [pc, #404]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f003 030c 	and.w	r3, r3, #12
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00b      	beq.n	8006e3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e26:	4b62      	ldr	r3, [pc, #392]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e2e:	2b08      	cmp	r3, #8
 8006e30:	d11c      	bne.n	8006e6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e32:	4b5f      	ldr	r3, [pc, #380]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d116      	bne.n	8006e6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e3e:	4b5c      	ldr	r3, [pc, #368]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d005      	beq.n	8006e56 <HAL_RCC_OscConfig+0x152>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d001      	beq.n	8006e56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e1c4      	b.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e56:	4b56      	ldr	r3, [pc, #344]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	4952      	ldr	r1, [pc, #328]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e6a:	e03a      	b.n	8006ee2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d020      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e74:	4b4f      	ldr	r3, [pc, #316]	; (8006fb4 <HAL_RCC_OscConfig+0x2b0>)
 8006e76:	2201      	movs	r2, #1
 8006e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e7a:	f7fc fb33 	bl	80034e4 <HAL_GetTick>
 8006e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e80:	e008      	b.n	8006e94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e82:	f7fc fb2f 	bl	80034e4 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d901      	bls.n	8006e94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e1a5      	b.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e94:	4b46      	ldr	r3, [pc, #280]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0302 	and.w	r3, r3, #2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d0f0      	beq.n	8006e82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ea0:	4b43      	ldr	r3, [pc, #268]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	00db      	lsls	r3, r3, #3
 8006eae:	4940      	ldr	r1, [pc, #256]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	600b      	str	r3, [r1, #0]
 8006eb4:	e015      	b.n	8006ee2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eb6:	4b3f      	ldr	r3, [pc, #252]	; (8006fb4 <HAL_RCC_OscConfig+0x2b0>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ebc:	f7fc fb12 	bl	80034e4 <HAL_GetTick>
 8006ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ec2:	e008      	b.n	8006ed6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ec4:	f7fc fb0e 	bl	80034e4 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d901      	bls.n	8006ed6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e184      	b.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ed6:	4b36      	ldr	r3, [pc, #216]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1f0      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0308 	and.w	r3, r3, #8
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d030      	beq.n	8006f50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d016      	beq.n	8006f24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ef6:	4b30      	ldr	r3, [pc, #192]	; (8006fb8 <HAL_RCC_OscConfig+0x2b4>)
 8006ef8:	2201      	movs	r2, #1
 8006efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006efc:	f7fc faf2 	bl	80034e4 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f02:	e008      	b.n	8006f16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f04:	f7fc faee 	bl	80034e4 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e164      	b.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f16:	4b26      	ldr	r3, [pc, #152]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0f0      	beq.n	8006f04 <HAL_RCC_OscConfig+0x200>
 8006f22:	e015      	b.n	8006f50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f24:	4b24      	ldr	r3, [pc, #144]	; (8006fb8 <HAL_RCC_OscConfig+0x2b4>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f2a:	f7fc fadb 	bl	80034e4 <HAL_GetTick>
 8006f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f30:	e008      	b.n	8006f44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f32:	f7fc fad7 	bl	80034e4 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d901      	bls.n	8006f44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e14d      	b.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f44:	4b1a      	ldr	r3, [pc, #104]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1f0      	bne.n	8006f32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0304 	and.w	r3, r3, #4
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 80a0 	beq.w	800709e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f62:	4b13      	ldr	r3, [pc, #76]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10f      	bne.n	8006f8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60bb      	str	r3, [r7, #8]
 8006f72:	4b0f      	ldr	r3, [pc, #60]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	4a0e      	ldr	r2, [pc, #56]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f7e:	4b0c      	ldr	r3, [pc, #48]	; (8006fb0 <HAL_RCC_OscConfig+0x2ac>)
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f86:	60bb      	str	r3, [r7, #8]
 8006f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f8e:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <HAL_RCC_OscConfig+0x2b8>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d121      	bne.n	8006fde <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f9a:	4b08      	ldr	r3, [pc, #32]	; (8006fbc <HAL_RCC_OscConfig+0x2b8>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a07      	ldr	r2, [pc, #28]	; (8006fbc <HAL_RCC_OscConfig+0x2b8>)
 8006fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fa6:	f7fc fa9d 	bl	80034e4 <HAL_GetTick>
 8006faa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fac:	e011      	b.n	8006fd2 <HAL_RCC_OscConfig+0x2ce>
 8006fae:	bf00      	nop
 8006fb0:	40023800 	.word	0x40023800
 8006fb4:	42470000 	.word	0x42470000
 8006fb8:	42470e80 	.word	0x42470e80
 8006fbc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fc0:	f7fc fa90 	bl	80034e4 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e106      	b.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fd2:	4b85      	ldr	r3, [pc, #532]	; (80071e8 <HAL_RCC_OscConfig+0x4e4>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0f0      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d106      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x2f0>
 8006fe6:	4b81      	ldr	r3, [pc, #516]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 8006fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fea:	4a80      	ldr	r2, [pc, #512]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 8006fec:	f043 0301 	orr.w	r3, r3, #1
 8006ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ff2:	e01c      	b.n	800702e <HAL_RCC_OscConfig+0x32a>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	2b05      	cmp	r3, #5
 8006ffa:	d10c      	bne.n	8007016 <HAL_RCC_OscConfig+0x312>
 8006ffc:	4b7b      	ldr	r3, [pc, #492]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 8006ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007000:	4a7a      	ldr	r2, [pc, #488]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 8007002:	f043 0304 	orr.w	r3, r3, #4
 8007006:	6713      	str	r3, [r2, #112]	; 0x70
 8007008:	4b78      	ldr	r3, [pc, #480]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 800700a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700c:	4a77      	ldr	r2, [pc, #476]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 800700e:	f043 0301 	orr.w	r3, r3, #1
 8007012:	6713      	str	r3, [r2, #112]	; 0x70
 8007014:	e00b      	b.n	800702e <HAL_RCC_OscConfig+0x32a>
 8007016:	4b75      	ldr	r3, [pc, #468]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 8007018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701a:	4a74      	ldr	r2, [pc, #464]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 800701c:	f023 0301 	bic.w	r3, r3, #1
 8007020:	6713      	str	r3, [r2, #112]	; 0x70
 8007022:	4b72      	ldr	r3, [pc, #456]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 8007024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007026:	4a71      	ldr	r2, [pc, #452]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 8007028:	f023 0304 	bic.w	r3, r3, #4
 800702c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d015      	beq.n	8007062 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007036:	f7fc fa55 	bl	80034e4 <HAL_GetTick>
 800703a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800703c:	e00a      	b.n	8007054 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800703e:	f7fc fa51 	bl	80034e4 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	f241 3288 	movw	r2, #5000	; 0x1388
 800704c:	4293      	cmp	r3, r2
 800704e:	d901      	bls.n	8007054 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e0c5      	b.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007054:	4b65      	ldr	r3, [pc, #404]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 8007056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d0ee      	beq.n	800703e <HAL_RCC_OscConfig+0x33a>
 8007060:	e014      	b.n	800708c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007062:	f7fc fa3f 	bl	80034e4 <HAL_GetTick>
 8007066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007068:	e00a      	b.n	8007080 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800706a:	f7fc fa3b 	bl	80034e4 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	f241 3288 	movw	r2, #5000	; 0x1388
 8007078:	4293      	cmp	r3, r2
 800707a:	d901      	bls.n	8007080 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e0af      	b.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007080:	4b5a      	ldr	r3, [pc, #360]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 8007082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1ee      	bne.n	800706a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800708c:	7dfb      	ldrb	r3, [r7, #23]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d105      	bne.n	800709e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007092:	4b56      	ldr	r3, [pc, #344]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	4a55      	ldr	r2, [pc, #340]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 8007098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800709c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 809b 	beq.w	80071de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070a8:	4b50      	ldr	r3, [pc, #320]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f003 030c 	and.w	r3, r3, #12
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	d05c      	beq.n	800716e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d141      	bne.n	8007140 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070bc:	4b4c      	ldr	r3, [pc, #304]	; (80071f0 <HAL_RCC_OscConfig+0x4ec>)
 80070be:	2200      	movs	r2, #0
 80070c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070c2:	f7fc fa0f 	bl	80034e4 <HAL_GetTick>
 80070c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070c8:	e008      	b.n	80070dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070ca:	f7fc fa0b 	bl	80034e4 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d901      	bls.n	80070dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e081      	b.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070dc:	4b43      	ldr	r3, [pc, #268]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1f0      	bne.n	80070ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	69da      	ldr	r2, [r3, #28]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	431a      	orrs	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	019b      	lsls	r3, r3, #6
 80070f8:	431a      	orrs	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fe:	085b      	lsrs	r3, r3, #1
 8007100:	3b01      	subs	r3, #1
 8007102:	041b      	lsls	r3, r3, #16
 8007104:	431a      	orrs	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710a:	061b      	lsls	r3, r3, #24
 800710c:	4937      	ldr	r1, [pc, #220]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 800710e:	4313      	orrs	r3, r2
 8007110:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007112:	4b37      	ldr	r3, [pc, #220]	; (80071f0 <HAL_RCC_OscConfig+0x4ec>)
 8007114:	2201      	movs	r2, #1
 8007116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007118:	f7fc f9e4 	bl	80034e4 <HAL_GetTick>
 800711c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800711e:	e008      	b.n	8007132 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007120:	f7fc f9e0 	bl	80034e4 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e056      	b.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007132:	4b2e      	ldr	r3, [pc, #184]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0f0      	beq.n	8007120 <HAL_RCC_OscConfig+0x41c>
 800713e:	e04e      	b.n	80071de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007140:	4b2b      	ldr	r3, [pc, #172]	; (80071f0 <HAL_RCC_OscConfig+0x4ec>)
 8007142:	2200      	movs	r2, #0
 8007144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007146:	f7fc f9cd 	bl	80034e4 <HAL_GetTick>
 800714a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800714c:	e008      	b.n	8007160 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800714e:	f7fc f9c9 	bl	80034e4 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d901      	bls.n	8007160 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e03f      	b.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007160:	4b22      	ldr	r3, [pc, #136]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1f0      	bne.n	800714e <HAL_RCC_OscConfig+0x44a>
 800716c:	e037      	b.n	80071de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d101      	bne.n	800717a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e032      	b.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800717a:	4b1c      	ldr	r3, [pc, #112]	; (80071ec <HAL_RCC_OscConfig+0x4e8>)
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d028      	beq.n	80071da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007192:	429a      	cmp	r2, r3
 8007194:	d121      	bne.n	80071da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d11a      	bne.n	80071da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071aa:	4013      	ands	r3, r2
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d111      	bne.n	80071da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c0:	085b      	lsrs	r3, r3, #1
 80071c2:	3b01      	subs	r3, #1
 80071c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d107      	bne.n	80071da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d001      	beq.n	80071de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e000      	b.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	40007000 	.word	0x40007000
 80071ec:	40023800 	.word	0x40023800
 80071f0:	42470060 	.word	0x42470060

080071f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e0cc      	b.n	80073a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007208:	4b68      	ldr	r3, [pc, #416]	; (80073ac <HAL_RCC_ClockConfig+0x1b8>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0307 	and.w	r3, r3, #7
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d90c      	bls.n	8007230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007216:	4b65      	ldr	r3, [pc, #404]	; (80073ac <HAL_RCC_ClockConfig+0x1b8>)
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800721e:	4b63      	ldr	r3, [pc, #396]	; (80073ac <HAL_RCC_ClockConfig+0x1b8>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	429a      	cmp	r2, r3
 800722a:	d001      	beq.n	8007230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e0b8      	b.n	80073a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b00      	cmp	r3, #0
 800723a:	d020      	beq.n	800727e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b00      	cmp	r3, #0
 8007246:	d005      	beq.n	8007254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007248:	4b59      	ldr	r3, [pc, #356]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	4a58      	ldr	r2, [pc, #352]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 800724e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007252:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007260:	4b53      	ldr	r3, [pc, #332]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	4a52      	ldr	r2, [pc, #328]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007266:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800726a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800726c:	4b50      	ldr	r3, [pc, #320]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	494d      	ldr	r1, [pc, #308]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 800727a:	4313      	orrs	r3, r2
 800727c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d044      	beq.n	8007314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d107      	bne.n	80072a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007292:	4b47      	ldr	r3, [pc, #284]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d119      	bne.n	80072d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e07f      	b.n	80073a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d003      	beq.n	80072b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	d107      	bne.n	80072c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072b2:	4b3f      	ldr	r3, [pc, #252]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d109      	bne.n	80072d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e06f      	b.n	80073a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072c2:	4b3b      	ldr	r3, [pc, #236]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e067      	b.n	80073a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072d2:	4b37      	ldr	r3, [pc, #220]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f023 0203 	bic.w	r2, r3, #3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	4934      	ldr	r1, [pc, #208]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072e4:	f7fc f8fe 	bl	80034e4 <HAL_GetTick>
 80072e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072ea:	e00a      	b.n	8007302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072ec:	f7fc f8fa 	bl	80034e4 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d901      	bls.n	8007302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e04f      	b.n	80073a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007302:	4b2b      	ldr	r3, [pc, #172]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f003 020c 	and.w	r2, r3, #12
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	429a      	cmp	r2, r3
 8007312:	d1eb      	bne.n	80072ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007314:	4b25      	ldr	r3, [pc, #148]	; (80073ac <HAL_RCC_ClockConfig+0x1b8>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0307 	and.w	r3, r3, #7
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	429a      	cmp	r2, r3
 8007320:	d20c      	bcs.n	800733c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007322:	4b22      	ldr	r3, [pc, #136]	; (80073ac <HAL_RCC_ClockConfig+0x1b8>)
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	b2d2      	uxtb	r2, r2
 8007328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800732a:	4b20      	ldr	r3, [pc, #128]	; (80073ac <HAL_RCC_ClockConfig+0x1b8>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0307 	and.w	r3, r3, #7
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	429a      	cmp	r2, r3
 8007336:	d001      	beq.n	800733c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e032      	b.n	80073a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	d008      	beq.n	800735a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007348:	4b19      	ldr	r3, [pc, #100]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	4916      	ldr	r1, [pc, #88]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007356:	4313      	orrs	r3, r2
 8007358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0308 	and.w	r3, r3, #8
 8007362:	2b00      	cmp	r3, #0
 8007364:	d009      	beq.n	800737a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007366:	4b12      	ldr	r3, [pc, #72]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	490e      	ldr	r1, [pc, #56]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007376:	4313      	orrs	r3, r2
 8007378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800737a:	f000 f821 	bl	80073c0 <HAL_RCC_GetSysClockFreq>
 800737e:	4602      	mov	r2, r0
 8007380:	4b0b      	ldr	r3, [pc, #44]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	091b      	lsrs	r3, r3, #4
 8007386:	f003 030f 	and.w	r3, r3, #15
 800738a:	490a      	ldr	r1, [pc, #40]	; (80073b4 <HAL_RCC_ClockConfig+0x1c0>)
 800738c:	5ccb      	ldrb	r3, [r1, r3]
 800738e:	fa22 f303 	lsr.w	r3, r2, r3
 8007392:	4a09      	ldr	r2, [pc, #36]	; (80073b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007396:	4b09      	ldr	r3, [pc, #36]	; (80073bc <HAL_RCC_ClockConfig+0x1c8>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4618      	mov	r0, r3
 800739c:	f7fb feac 	bl	80030f8 <HAL_InitTick>

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	40023c00 	.word	0x40023c00
 80073b0:	40023800 	.word	0x40023800
 80073b4:	0801e040 	.word	0x0801e040
 80073b8:	20000008 	.word	0x20000008
 80073bc:	2000000c 	.word	0x2000000c

080073c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80073c4:	b084      	sub	sp, #16
 80073c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80073c8:	2300      	movs	r3, #0
 80073ca:	607b      	str	r3, [r7, #4]
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	2300      	movs	r3, #0
 80073d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073d8:	4b67      	ldr	r3, [pc, #412]	; (8007578 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f003 030c 	and.w	r3, r3, #12
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	d00d      	beq.n	8007400 <HAL_RCC_GetSysClockFreq+0x40>
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	f200 80bd 	bhi.w	8007564 <HAL_RCC_GetSysClockFreq+0x1a4>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <HAL_RCC_GetSysClockFreq+0x34>
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d003      	beq.n	80073fa <HAL_RCC_GetSysClockFreq+0x3a>
 80073f2:	e0b7      	b.n	8007564 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073f4:	4b61      	ldr	r3, [pc, #388]	; (800757c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80073f6:	60bb      	str	r3, [r7, #8]
       break;
 80073f8:	e0b7      	b.n	800756a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073fa:	4b61      	ldr	r3, [pc, #388]	; (8007580 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80073fc:	60bb      	str	r3, [r7, #8]
      break;
 80073fe:	e0b4      	b.n	800756a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007400:	4b5d      	ldr	r3, [pc, #372]	; (8007578 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007408:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800740a:	4b5b      	ldr	r3, [pc, #364]	; (8007578 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d04d      	beq.n	80074b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007416:	4b58      	ldr	r3, [pc, #352]	; (8007578 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	099b      	lsrs	r3, r3, #6
 800741c:	461a      	mov	r2, r3
 800741e:	f04f 0300 	mov.w	r3, #0
 8007422:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007426:	f04f 0100 	mov.w	r1, #0
 800742a:	ea02 0800 	and.w	r8, r2, r0
 800742e:	ea03 0901 	and.w	r9, r3, r1
 8007432:	4640      	mov	r0, r8
 8007434:	4649      	mov	r1, r9
 8007436:	f04f 0200 	mov.w	r2, #0
 800743a:	f04f 0300 	mov.w	r3, #0
 800743e:	014b      	lsls	r3, r1, #5
 8007440:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007444:	0142      	lsls	r2, r0, #5
 8007446:	4610      	mov	r0, r2
 8007448:	4619      	mov	r1, r3
 800744a:	ebb0 0008 	subs.w	r0, r0, r8
 800744e:	eb61 0109 	sbc.w	r1, r1, r9
 8007452:	f04f 0200 	mov.w	r2, #0
 8007456:	f04f 0300 	mov.w	r3, #0
 800745a:	018b      	lsls	r3, r1, #6
 800745c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007460:	0182      	lsls	r2, r0, #6
 8007462:	1a12      	subs	r2, r2, r0
 8007464:	eb63 0301 	sbc.w	r3, r3, r1
 8007468:	f04f 0000 	mov.w	r0, #0
 800746c:	f04f 0100 	mov.w	r1, #0
 8007470:	00d9      	lsls	r1, r3, #3
 8007472:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007476:	00d0      	lsls	r0, r2, #3
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	eb12 0208 	adds.w	r2, r2, r8
 8007480:	eb43 0309 	adc.w	r3, r3, r9
 8007484:	f04f 0000 	mov.w	r0, #0
 8007488:	f04f 0100 	mov.w	r1, #0
 800748c:	0259      	lsls	r1, r3, #9
 800748e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007492:	0250      	lsls	r0, r2, #9
 8007494:	4602      	mov	r2, r0
 8007496:	460b      	mov	r3, r1
 8007498:	4610      	mov	r0, r2
 800749a:	4619      	mov	r1, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	461a      	mov	r2, r3
 80074a0:	f04f 0300 	mov.w	r3, #0
 80074a4:	f7f9 fc28 	bl	8000cf8 <__aeabi_uldivmod>
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	4613      	mov	r3, r2
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	e04a      	b.n	8007548 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074b2:	4b31      	ldr	r3, [pc, #196]	; (8007578 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	099b      	lsrs	r3, r3, #6
 80074b8:	461a      	mov	r2, r3
 80074ba:	f04f 0300 	mov.w	r3, #0
 80074be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80074c2:	f04f 0100 	mov.w	r1, #0
 80074c6:	ea02 0400 	and.w	r4, r2, r0
 80074ca:	ea03 0501 	and.w	r5, r3, r1
 80074ce:	4620      	mov	r0, r4
 80074d0:	4629      	mov	r1, r5
 80074d2:	f04f 0200 	mov.w	r2, #0
 80074d6:	f04f 0300 	mov.w	r3, #0
 80074da:	014b      	lsls	r3, r1, #5
 80074dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80074e0:	0142      	lsls	r2, r0, #5
 80074e2:	4610      	mov	r0, r2
 80074e4:	4619      	mov	r1, r3
 80074e6:	1b00      	subs	r0, r0, r4
 80074e8:	eb61 0105 	sbc.w	r1, r1, r5
 80074ec:	f04f 0200 	mov.w	r2, #0
 80074f0:	f04f 0300 	mov.w	r3, #0
 80074f4:	018b      	lsls	r3, r1, #6
 80074f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80074fa:	0182      	lsls	r2, r0, #6
 80074fc:	1a12      	subs	r2, r2, r0
 80074fe:	eb63 0301 	sbc.w	r3, r3, r1
 8007502:	f04f 0000 	mov.w	r0, #0
 8007506:	f04f 0100 	mov.w	r1, #0
 800750a:	00d9      	lsls	r1, r3, #3
 800750c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007510:	00d0      	lsls	r0, r2, #3
 8007512:	4602      	mov	r2, r0
 8007514:	460b      	mov	r3, r1
 8007516:	1912      	adds	r2, r2, r4
 8007518:	eb45 0303 	adc.w	r3, r5, r3
 800751c:	f04f 0000 	mov.w	r0, #0
 8007520:	f04f 0100 	mov.w	r1, #0
 8007524:	0299      	lsls	r1, r3, #10
 8007526:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800752a:	0290      	lsls	r0, r2, #10
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	4610      	mov	r0, r2
 8007532:	4619      	mov	r1, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	461a      	mov	r2, r3
 8007538:	f04f 0300 	mov.w	r3, #0
 800753c:	f7f9 fbdc 	bl	8000cf8 <__aeabi_uldivmod>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	4613      	mov	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007548:	4b0b      	ldr	r3, [pc, #44]	; (8007578 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	0c1b      	lsrs	r3, r3, #16
 800754e:	f003 0303 	and.w	r3, r3, #3
 8007552:	3301      	adds	r3, #1
 8007554:	005b      	lsls	r3, r3, #1
 8007556:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007560:	60bb      	str	r3, [r7, #8]
      break;
 8007562:	e002      	b.n	800756a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007564:	4b05      	ldr	r3, [pc, #20]	; (800757c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007566:	60bb      	str	r3, [r7, #8]
      break;
 8007568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800756a:	68bb      	ldr	r3, [r7, #8]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007576:	bf00      	nop
 8007578:	40023800 	.word	0x40023800
 800757c:	00f42400 	.word	0x00f42400
 8007580:	007a1200 	.word	0x007a1200

08007584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007584:	b480      	push	{r7}
 8007586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007588:	4b03      	ldr	r3, [pc, #12]	; (8007598 <HAL_RCC_GetHCLKFreq+0x14>)
 800758a:	681b      	ldr	r3, [r3, #0]
}
 800758c:	4618      	mov	r0, r3
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	20000008 	.word	0x20000008

0800759c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075a0:	f7ff fff0 	bl	8007584 <HAL_RCC_GetHCLKFreq>
 80075a4:	4602      	mov	r2, r0
 80075a6:	4b05      	ldr	r3, [pc, #20]	; (80075bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	0a9b      	lsrs	r3, r3, #10
 80075ac:	f003 0307 	and.w	r3, r3, #7
 80075b0:	4903      	ldr	r1, [pc, #12]	; (80075c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075b2:	5ccb      	ldrb	r3, [r1, r3]
 80075b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	40023800 	.word	0x40023800
 80075c0:	0801e050 	.word	0x0801e050

080075c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80075c8:	f7ff ffdc 	bl	8007584 <HAL_RCC_GetHCLKFreq>
 80075cc:	4602      	mov	r2, r0
 80075ce:	4b05      	ldr	r3, [pc, #20]	; (80075e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	0b5b      	lsrs	r3, r3, #13
 80075d4:	f003 0307 	and.w	r3, r3, #7
 80075d8:	4903      	ldr	r1, [pc, #12]	; (80075e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075da:	5ccb      	ldrb	r3, [r1, r3]
 80075dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	40023800 	.word	0x40023800
 80075e8:	0801e050 	.word	0x0801e050

080075ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	220f      	movs	r2, #15
 80075fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80075fc:	4b12      	ldr	r3, [pc, #72]	; (8007648 <HAL_RCC_GetClockConfig+0x5c>)
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f003 0203 	and.w	r2, r3, #3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007608:	4b0f      	ldr	r3, [pc, #60]	; (8007648 <HAL_RCC_GetClockConfig+0x5c>)
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007614:	4b0c      	ldr	r3, [pc, #48]	; (8007648 <HAL_RCC_GetClockConfig+0x5c>)
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007620:	4b09      	ldr	r3, [pc, #36]	; (8007648 <HAL_RCC_GetClockConfig+0x5c>)
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	08db      	lsrs	r3, r3, #3
 8007626:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800762e:	4b07      	ldr	r3, [pc, #28]	; (800764c <HAL_RCC_GetClockConfig+0x60>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0207 	and.w	r2, r3, #7
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	601a      	str	r2, [r3, #0]
}
 800763a:	bf00      	nop
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	40023800 	.word	0x40023800
 800764c:	40023c00 	.word	0x40023c00

08007650 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d105      	bne.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007674:	2b00      	cmp	r3, #0
 8007676:	d035      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007678:	4b62      	ldr	r3, [pc, #392]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800767a:	2200      	movs	r2, #0
 800767c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800767e:	f7fb ff31 	bl	80034e4 <HAL_GetTick>
 8007682:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007684:	e008      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007686:	f7fb ff2d 	bl	80034e4 <HAL_GetTick>
 800768a:	4602      	mov	r2, r0
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	2b02      	cmp	r3, #2
 8007692:	d901      	bls.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e0b0      	b.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007698:	4b5b      	ldr	r3, [pc, #364]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1f0      	bne.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	019a      	lsls	r2, r3, #6
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	071b      	lsls	r3, r3, #28
 80076b0:	4955      	ldr	r1, [pc, #340]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80076b8:	4b52      	ldr	r3, [pc, #328]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80076ba:	2201      	movs	r2, #1
 80076bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80076be:	f7fb ff11 	bl	80034e4 <HAL_GetTick>
 80076c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80076c4:	e008      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80076c6:	f7fb ff0d 	bl	80034e4 <HAL_GetTick>
 80076ca:	4602      	mov	r2, r0
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d901      	bls.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e090      	b.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80076d8:	4b4b      	ldr	r3, [pc, #300]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d0f0      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0302 	and.w	r3, r3, #2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 8083 	beq.w	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80076f2:	2300      	movs	r3, #0
 80076f4:	60fb      	str	r3, [r7, #12]
 80076f6:	4b44      	ldr	r3, [pc, #272]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fa:	4a43      	ldr	r2, [pc, #268]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007700:	6413      	str	r3, [r2, #64]	; 0x40
 8007702:	4b41      	ldr	r3, [pc, #260]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800770a:	60fb      	str	r3, [r7, #12]
 800770c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800770e:	4b3f      	ldr	r3, [pc, #252]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a3e      	ldr	r2, [pc, #248]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007718:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800771a:	f7fb fee3 	bl	80034e4 <HAL_GetTick>
 800771e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007720:	e008      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007722:	f7fb fedf 	bl	80034e4 <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	2b02      	cmp	r3, #2
 800772e:	d901      	bls.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e062      	b.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007734:	4b35      	ldr	r3, [pc, #212]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800773c:	2b00      	cmp	r3, #0
 800773e:	d0f0      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007740:	4b31      	ldr	r3, [pc, #196]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007748:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d02f      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	429a      	cmp	r2, r3
 800775c:	d028      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800775e:	4b2a      	ldr	r3, [pc, #168]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007766:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007768:	4b29      	ldr	r3, [pc, #164]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800776a:	2201      	movs	r2, #1
 800776c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800776e:	4b28      	ldr	r3, [pc, #160]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007770:	2200      	movs	r2, #0
 8007772:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007774:	4a24      	ldr	r2, [pc, #144]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800777a:	4b23      	ldr	r3, [pc, #140]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800777c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b01      	cmp	r3, #1
 8007784:	d114      	bne.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007786:	f7fb fead 	bl	80034e4 <HAL_GetTick>
 800778a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800778c:	e00a      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800778e:	f7fb fea9 	bl	80034e4 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	f241 3288 	movw	r2, #5000	; 0x1388
 800779c:	4293      	cmp	r3, r2
 800779e:	d901      	bls.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e02a      	b.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077a4:	4b18      	ldr	r3, [pc, #96]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d0ee      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077bc:	d10d      	bne.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80077be:	4b12      	ldr	r3, [pc, #72]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80077ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077d2:	490d      	ldr	r1, [pc, #52]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	608b      	str	r3, [r1, #8]
 80077d8:	e005      	b.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80077da:	4b0b      	ldr	r3, [pc, #44]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	4a0a      	ldr	r2, [pc, #40]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80077e4:	6093      	str	r3, [r2, #8]
 80077e6:	4b08      	ldr	r3, [pc, #32]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077f2:	4905      	ldr	r1, [pc, #20]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	42470068 	.word	0x42470068
 8007808:	40023800 	.word	0x40023800
 800780c:	40007000 	.word	0x40007000
 8007810:	42470e40 	.word	0x42470e40

08007814 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800781c:	2300      	movs	r3, #0
 800781e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007820:	2300      	movs	r3, #0
 8007822:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d13e      	bne.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007832:	4b23      	ldr	r3, [pc, #140]	; (80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d005      	beq.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d12f      	bne.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007848:	4b1e      	ldr	r3, [pc, #120]	; (80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800784a:	617b      	str	r3, [r7, #20]
          break;
 800784c:	e02f      	b.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800784e:	4b1c      	ldr	r3, [pc, #112]	; (80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007856:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800785a:	d108      	bne.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800785c:	4b18      	ldr	r3, [pc, #96]	; (80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007864:	4a18      	ldr	r2, [pc, #96]	; (80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007866:	fbb2 f3f3 	udiv	r3, r2, r3
 800786a:	613b      	str	r3, [r7, #16]
 800786c:	e007      	b.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800786e:	4b14      	ldr	r3, [pc, #80]	; (80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007876:	4a15      	ldr	r2, [pc, #84]	; (80078cc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007878:	fbb2 f3f3 	udiv	r3, r2, r3
 800787c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800787e:	4b10      	ldr	r3, [pc, #64]	; (80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007884:	099b      	lsrs	r3, r3, #6
 8007886:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	fb02 f303 	mul.w	r3, r2, r3
 8007890:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007892:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007898:	0f1b      	lsrs	r3, r3, #28
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a4:	617b      	str	r3, [r7, #20]
          break;
 80078a6:	e002      	b.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80078a8:	2300      	movs	r3, #0
 80078aa:	617b      	str	r3, [r7, #20]
          break;
 80078ac:	bf00      	nop
        }
      }
      break;
 80078ae:	bf00      	nop
    }
  }
  return frequency;
 80078b0:	697b      	ldr	r3, [r7, #20]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	371c      	adds	r7, #28
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	40023800 	.word	0x40023800
 80078c4:	00bb8000 	.word	0x00bb8000
 80078c8:	007a1200 	.word	0x007a1200
 80078cc:	00f42400 	.word	0x00f42400

080078d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e07b      	b.n	80079da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d108      	bne.n	80078fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078f2:	d009      	beq.n	8007908 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	61da      	str	r2, [r3, #28]
 80078fa:	e005      	b.n	8007908 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d106      	bne.n	8007928 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7fb f9ca 	bl	8002cbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800793e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007950:	431a      	orrs	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800795a:	431a      	orrs	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	f003 0302 	and.w	r3, r3, #2
 8007964:	431a      	orrs	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	431a      	orrs	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007978:	431a      	orrs	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007982:	431a      	orrs	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a1b      	ldr	r3, [r3, #32]
 8007988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800798c:	ea42 0103 	orr.w	r1, r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007994:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	0c1b      	lsrs	r3, r3, #16
 80079a6:	f003 0104 	and.w	r1, r3, #4
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	f003 0210 	and.w	r2, r3, #16
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	69da      	ldr	r2, [r3, #28]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b082      	sub	sp, #8
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e041      	b.n	8007a78 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d106      	bne.n	8007a0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7fb f99f 	bl	8002d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2202      	movs	r2, #2
 8007a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4610      	mov	r0, r2
 8007a22:	f000 fbb1 	bl	8008188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d001      	beq.n	8007a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e04e      	b.n	8007b36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68da      	ldr	r2, [r3, #12]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0201 	orr.w	r2, r2, #1
 8007aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a23      	ldr	r2, [pc, #140]	; (8007b44 <HAL_TIM_Base_Start_IT+0xc4>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d022      	beq.n	8007b00 <HAL_TIM_Base_Start_IT+0x80>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ac2:	d01d      	beq.n	8007b00 <HAL_TIM_Base_Start_IT+0x80>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a1f      	ldr	r2, [pc, #124]	; (8007b48 <HAL_TIM_Base_Start_IT+0xc8>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d018      	beq.n	8007b00 <HAL_TIM_Base_Start_IT+0x80>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a1e      	ldr	r2, [pc, #120]	; (8007b4c <HAL_TIM_Base_Start_IT+0xcc>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d013      	beq.n	8007b00 <HAL_TIM_Base_Start_IT+0x80>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a1c      	ldr	r2, [pc, #112]	; (8007b50 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d00e      	beq.n	8007b00 <HAL_TIM_Base_Start_IT+0x80>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a1b      	ldr	r2, [pc, #108]	; (8007b54 <HAL_TIM_Base_Start_IT+0xd4>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d009      	beq.n	8007b00 <HAL_TIM_Base_Start_IT+0x80>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a19      	ldr	r2, [pc, #100]	; (8007b58 <HAL_TIM_Base_Start_IT+0xd8>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d004      	beq.n	8007b00 <HAL_TIM_Base_Start_IT+0x80>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a18      	ldr	r2, [pc, #96]	; (8007b5c <HAL_TIM_Base_Start_IT+0xdc>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d111      	bne.n	8007b24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b06      	cmp	r3, #6
 8007b10:	d010      	beq.n	8007b34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f042 0201 	orr.w	r2, r2, #1
 8007b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b22:	e007      	b.n	8007b34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f042 0201 	orr.w	r2, r2, #1
 8007b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	40010000 	.word	0x40010000
 8007b48:	40000400 	.word	0x40000400
 8007b4c:	40000800 	.word	0x40000800
 8007b50:	40000c00 	.word	0x40000c00
 8007b54:	40010400 	.word	0x40010400
 8007b58:	40014000 	.word	0x40014000
 8007b5c:	40001800 	.word	0x40001800

08007b60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e041      	b.n	8007bf6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d106      	bne.n	8007b8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f839 	bl	8007bfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	f000 faf2 	bl	8008188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b083      	sub	sp, #12
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c06:	bf00      	nop
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d122      	bne.n	8007c6e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d11b      	bne.n	8007c6e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f06f 0202 	mvn.w	r2, #2
 8007c3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	f003 0303 	and.w	r3, r3, #3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d003      	beq.n	8007c5c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fa78 	bl	800814a <HAL_TIM_IC_CaptureCallback>
 8007c5a:	e005      	b.n	8007c68 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fa6a 	bl	8008136 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fa7b 	bl	800815e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b04      	cmp	r3, #4
 8007c7a:	d122      	bne.n	8007cc2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	f003 0304 	and.w	r3, r3, #4
 8007c86:	2b04      	cmp	r3, #4
 8007c88:	d11b      	bne.n	8007cc2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f06f 0204 	mvn.w	r2, #4
 8007c92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2202      	movs	r2, #2
 8007c98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d003      	beq.n	8007cb0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fa4e 	bl	800814a <HAL_TIM_IC_CaptureCallback>
 8007cae:	e005      	b.n	8007cbc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fa40 	bl	8008136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fa51 	bl	800815e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	f003 0308 	and.w	r3, r3, #8
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	d122      	bne.n	8007d16 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	f003 0308 	and.w	r3, r3, #8
 8007cda:	2b08      	cmp	r3, #8
 8007cdc:	d11b      	bne.n	8007d16 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f06f 0208 	mvn.w	r2, #8
 8007ce6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2204      	movs	r2, #4
 8007cec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	69db      	ldr	r3, [r3, #28]
 8007cf4:	f003 0303 	and.w	r3, r3, #3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fa24 	bl	800814a <HAL_TIM_IC_CaptureCallback>
 8007d02:	e005      	b.n	8007d10 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fa16 	bl	8008136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fa27 	bl	800815e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	f003 0310 	and.w	r3, r3, #16
 8007d20:	2b10      	cmp	r3, #16
 8007d22:	d122      	bne.n	8007d6a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	f003 0310 	and.w	r3, r3, #16
 8007d2e:	2b10      	cmp	r3, #16
 8007d30:	d11b      	bne.n	8007d6a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f06f 0210 	mvn.w	r2, #16
 8007d3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2208      	movs	r2, #8
 8007d40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	69db      	ldr	r3, [r3, #28]
 8007d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d003      	beq.n	8007d58 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f9fa 	bl	800814a <HAL_TIM_IC_CaptureCallback>
 8007d56:	e005      	b.n	8007d64 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f9ec 	bl	8008136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f9fd 	bl	800815e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d10e      	bne.n	8007d96 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d107      	bne.n	8007d96 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f06f 0201 	mvn.w	r2, #1
 8007d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7fa fcbb 	bl	800270c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da0:	2b80      	cmp	r3, #128	; 0x80
 8007da2:	d10e      	bne.n	8007dc2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dae:	2b80      	cmp	r3, #128	; 0x80
 8007db0:	d107      	bne.n	8007dc2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fda5 	bl	800890c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dcc:	2b40      	cmp	r3, #64	; 0x40
 8007dce:	d10e      	bne.n	8007dee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dda:	2b40      	cmp	r3, #64	; 0x40
 8007ddc:	d107      	bne.n	8007dee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f9c2 	bl	8008172 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	f003 0320 	and.w	r3, r3, #32
 8007df8:	2b20      	cmp	r3, #32
 8007dfa:	d10e      	bne.n	8007e1a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	f003 0320 	and.w	r3, r3, #32
 8007e06:	2b20      	cmp	r3, #32
 8007e08:	d107      	bne.n	8007e1a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f06f 0220 	mvn.w	r2, #32
 8007e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fd6f 	bl	80088f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e1a:	bf00      	nop
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
	...

08007e24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d101      	bne.n	8007e42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e0ae      	b.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b0c      	cmp	r3, #12
 8007e4e:	f200 809f 	bhi.w	8007f90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007e52:	a201      	add	r2, pc, #4	; (adr r2, 8007e58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e58:	08007e8d 	.word	0x08007e8d
 8007e5c:	08007f91 	.word	0x08007f91
 8007e60:	08007f91 	.word	0x08007f91
 8007e64:	08007f91 	.word	0x08007f91
 8007e68:	08007ecd 	.word	0x08007ecd
 8007e6c:	08007f91 	.word	0x08007f91
 8007e70:	08007f91 	.word	0x08007f91
 8007e74:	08007f91 	.word	0x08007f91
 8007e78:	08007f0f 	.word	0x08007f0f
 8007e7c:	08007f91 	.word	0x08007f91
 8007e80:	08007f91 	.word	0x08007f91
 8007e84:	08007f91 	.word	0x08007f91
 8007e88:	08007f4f 	.word	0x08007f4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68b9      	ldr	r1, [r7, #8]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 fa18 	bl	80082c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699a      	ldr	r2, [r3, #24]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0208 	orr.w	r2, r2, #8
 8007ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	699a      	ldr	r2, [r3, #24]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f022 0204 	bic.w	r2, r2, #4
 8007eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6999      	ldr	r1, [r3, #24]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	691a      	ldr	r2, [r3, #16]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	619a      	str	r2, [r3, #24]
      break;
 8007eca:	e064      	b.n	8007f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68b9      	ldr	r1, [r7, #8]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 fa68 	bl	80083a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	699a      	ldr	r2, [r3, #24]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	699a      	ldr	r2, [r3, #24]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6999      	ldr	r1, [r3, #24]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	021a      	lsls	r2, r3, #8
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	619a      	str	r2, [r3, #24]
      break;
 8007f0c:	e043      	b.n	8007f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68b9      	ldr	r1, [r7, #8]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 fabd 	bl	8008494 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69da      	ldr	r2, [r3, #28]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f042 0208 	orr.w	r2, r2, #8
 8007f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69da      	ldr	r2, [r3, #28]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f022 0204 	bic.w	r2, r2, #4
 8007f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69d9      	ldr	r1, [r3, #28]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	691a      	ldr	r2, [r3, #16]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	430a      	orrs	r2, r1
 8007f4a:	61da      	str	r2, [r3, #28]
      break;
 8007f4c:	e023      	b.n	8007f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68b9      	ldr	r1, [r7, #8]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 fb11 	bl	800857c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	69da      	ldr	r2, [r3, #28]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	69da      	ldr	r2, [r3, #28]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	69d9      	ldr	r1, [r3, #28]
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	021a      	lsls	r2, r3, #8
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	61da      	str	r2, [r3, #28]
      break;
 8007f8e:	e002      	b.n	8007f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	75fb      	strb	r3, [r7, #23]
      break;
 8007f94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3718      	adds	r7, #24
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d101      	bne.n	8007fc4 <HAL_TIM_ConfigClockSource+0x1c>
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	e0b4      	b.n	800812e <HAL_TIM_ConfigClockSource+0x186>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ffc:	d03e      	beq.n	800807c <HAL_TIM_ConfigClockSource+0xd4>
 8007ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008002:	f200 8087 	bhi.w	8008114 <HAL_TIM_ConfigClockSource+0x16c>
 8008006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800800a:	f000 8086 	beq.w	800811a <HAL_TIM_ConfigClockSource+0x172>
 800800e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008012:	d87f      	bhi.n	8008114 <HAL_TIM_ConfigClockSource+0x16c>
 8008014:	2b70      	cmp	r3, #112	; 0x70
 8008016:	d01a      	beq.n	800804e <HAL_TIM_ConfigClockSource+0xa6>
 8008018:	2b70      	cmp	r3, #112	; 0x70
 800801a:	d87b      	bhi.n	8008114 <HAL_TIM_ConfigClockSource+0x16c>
 800801c:	2b60      	cmp	r3, #96	; 0x60
 800801e:	d050      	beq.n	80080c2 <HAL_TIM_ConfigClockSource+0x11a>
 8008020:	2b60      	cmp	r3, #96	; 0x60
 8008022:	d877      	bhi.n	8008114 <HAL_TIM_ConfigClockSource+0x16c>
 8008024:	2b50      	cmp	r3, #80	; 0x50
 8008026:	d03c      	beq.n	80080a2 <HAL_TIM_ConfigClockSource+0xfa>
 8008028:	2b50      	cmp	r3, #80	; 0x50
 800802a:	d873      	bhi.n	8008114 <HAL_TIM_ConfigClockSource+0x16c>
 800802c:	2b40      	cmp	r3, #64	; 0x40
 800802e:	d058      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x13a>
 8008030:	2b40      	cmp	r3, #64	; 0x40
 8008032:	d86f      	bhi.n	8008114 <HAL_TIM_ConfigClockSource+0x16c>
 8008034:	2b30      	cmp	r3, #48	; 0x30
 8008036:	d064      	beq.n	8008102 <HAL_TIM_ConfigClockSource+0x15a>
 8008038:	2b30      	cmp	r3, #48	; 0x30
 800803a:	d86b      	bhi.n	8008114 <HAL_TIM_ConfigClockSource+0x16c>
 800803c:	2b20      	cmp	r3, #32
 800803e:	d060      	beq.n	8008102 <HAL_TIM_ConfigClockSource+0x15a>
 8008040:	2b20      	cmp	r3, #32
 8008042:	d867      	bhi.n	8008114 <HAL_TIM_ConfigClockSource+0x16c>
 8008044:	2b00      	cmp	r3, #0
 8008046:	d05c      	beq.n	8008102 <HAL_TIM_ConfigClockSource+0x15a>
 8008048:	2b10      	cmp	r3, #16
 800804a:	d05a      	beq.n	8008102 <HAL_TIM_ConfigClockSource+0x15a>
 800804c:	e062      	b.n	8008114 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6818      	ldr	r0, [r3, #0]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	6899      	ldr	r1, [r3, #8]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	f000 fb5d 	bl	800871c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008070:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	609a      	str	r2, [r3, #8]
      break;
 800807a:	e04f      	b.n	800811c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6818      	ldr	r0, [r3, #0]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	6899      	ldr	r1, [r3, #8]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f000 fb46 	bl	800871c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689a      	ldr	r2, [r3, #8]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800809e:	609a      	str	r2, [r3, #8]
      break;
 80080a0:	e03c      	b.n	800811c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6818      	ldr	r0, [r3, #0]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	6859      	ldr	r1, [r3, #4]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	461a      	mov	r2, r3
 80080b0:	f000 faba 	bl	8008628 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2150      	movs	r1, #80	; 0x50
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 fb13 	bl	80086e6 <TIM_ITRx_SetConfig>
      break;
 80080c0:	e02c      	b.n	800811c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6818      	ldr	r0, [r3, #0]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	6859      	ldr	r1, [r3, #4]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	461a      	mov	r2, r3
 80080d0:	f000 fad9 	bl	8008686 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2160      	movs	r1, #96	; 0x60
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 fb03 	bl	80086e6 <TIM_ITRx_SetConfig>
      break;
 80080e0:	e01c      	b.n	800811c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6818      	ldr	r0, [r3, #0]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	6859      	ldr	r1, [r3, #4]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	461a      	mov	r2, r3
 80080f0:	f000 fa9a 	bl	8008628 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2140      	movs	r1, #64	; 0x40
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 faf3 	bl	80086e6 <TIM_ITRx_SetConfig>
      break;
 8008100:	e00c      	b.n	800811c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4619      	mov	r1, r3
 800810c:	4610      	mov	r0, r2
 800810e:	f000 faea 	bl	80086e6 <TIM_ITRx_SetConfig>
      break;
 8008112:	e003      	b.n	800811c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	73fb      	strb	r3, [r7, #15]
      break;
 8008118:	e000      	b.n	800811c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800811a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800812c:	7bfb      	ldrb	r3, [r7, #15]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008136:	b480      	push	{r7}
 8008138:	b083      	sub	sp, #12
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800813e:	bf00      	nop
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008152:	bf00      	nop
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800815e:	b480      	push	{r7}
 8008160:	b083      	sub	sp, #12
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008166:	bf00      	nop
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800817a:	bf00      	nop
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
	...

08008188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a40      	ldr	r2, [pc, #256]	; (800829c <TIM_Base_SetConfig+0x114>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d013      	beq.n	80081c8 <TIM_Base_SetConfig+0x40>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081a6:	d00f      	beq.n	80081c8 <TIM_Base_SetConfig+0x40>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a3d      	ldr	r2, [pc, #244]	; (80082a0 <TIM_Base_SetConfig+0x118>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d00b      	beq.n	80081c8 <TIM_Base_SetConfig+0x40>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a3c      	ldr	r2, [pc, #240]	; (80082a4 <TIM_Base_SetConfig+0x11c>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d007      	beq.n	80081c8 <TIM_Base_SetConfig+0x40>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a3b      	ldr	r2, [pc, #236]	; (80082a8 <TIM_Base_SetConfig+0x120>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d003      	beq.n	80081c8 <TIM_Base_SetConfig+0x40>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a3a      	ldr	r2, [pc, #232]	; (80082ac <TIM_Base_SetConfig+0x124>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d108      	bne.n	80081da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a2f      	ldr	r2, [pc, #188]	; (800829c <TIM_Base_SetConfig+0x114>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d02b      	beq.n	800823a <TIM_Base_SetConfig+0xb2>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081e8:	d027      	beq.n	800823a <TIM_Base_SetConfig+0xb2>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a2c      	ldr	r2, [pc, #176]	; (80082a0 <TIM_Base_SetConfig+0x118>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d023      	beq.n	800823a <TIM_Base_SetConfig+0xb2>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a2b      	ldr	r2, [pc, #172]	; (80082a4 <TIM_Base_SetConfig+0x11c>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d01f      	beq.n	800823a <TIM_Base_SetConfig+0xb2>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a2a      	ldr	r2, [pc, #168]	; (80082a8 <TIM_Base_SetConfig+0x120>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d01b      	beq.n	800823a <TIM_Base_SetConfig+0xb2>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a29      	ldr	r2, [pc, #164]	; (80082ac <TIM_Base_SetConfig+0x124>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d017      	beq.n	800823a <TIM_Base_SetConfig+0xb2>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a28      	ldr	r2, [pc, #160]	; (80082b0 <TIM_Base_SetConfig+0x128>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d013      	beq.n	800823a <TIM_Base_SetConfig+0xb2>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a27      	ldr	r2, [pc, #156]	; (80082b4 <TIM_Base_SetConfig+0x12c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d00f      	beq.n	800823a <TIM_Base_SetConfig+0xb2>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a26      	ldr	r2, [pc, #152]	; (80082b8 <TIM_Base_SetConfig+0x130>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d00b      	beq.n	800823a <TIM_Base_SetConfig+0xb2>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a25      	ldr	r2, [pc, #148]	; (80082bc <TIM_Base_SetConfig+0x134>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d007      	beq.n	800823a <TIM_Base_SetConfig+0xb2>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a24      	ldr	r2, [pc, #144]	; (80082c0 <TIM_Base_SetConfig+0x138>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d003      	beq.n	800823a <TIM_Base_SetConfig+0xb2>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a23      	ldr	r2, [pc, #140]	; (80082c4 <TIM_Base_SetConfig+0x13c>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d108      	bne.n	800824c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	4313      	orrs	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	689a      	ldr	r2, [r3, #8]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a0a      	ldr	r2, [pc, #40]	; (800829c <TIM_Base_SetConfig+0x114>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d003      	beq.n	8008280 <TIM_Base_SetConfig+0xf8>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a0c      	ldr	r2, [pc, #48]	; (80082ac <TIM_Base_SetConfig+0x124>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d103      	bne.n	8008288 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	691a      	ldr	r2, [r3, #16]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	615a      	str	r2, [r3, #20]
}
 800828e:	bf00      	nop
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	40010000 	.word	0x40010000
 80082a0:	40000400 	.word	0x40000400
 80082a4:	40000800 	.word	0x40000800
 80082a8:	40000c00 	.word	0x40000c00
 80082ac:	40010400 	.word	0x40010400
 80082b0:	40014000 	.word	0x40014000
 80082b4:	40014400 	.word	0x40014400
 80082b8:	40014800 	.word	0x40014800
 80082bc:	40001800 	.word	0x40001800
 80082c0:	40001c00 	.word	0x40001c00
 80082c4:	40002000 	.word	0x40002000

080082c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b087      	sub	sp, #28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a1b      	ldr	r3, [r3, #32]
 80082d6:	f023 0201 	bic.w	r2, r3, #1
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f023 0303 	bic.w	r3, r3, #3
 80082fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	4313      	orrs	r3, r2
 8008308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f023 0302 	bic.w	r3, r3, #2
 8008310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	697a      	ldr	r2, [r7, #20]
 8008318:	4313      	orrs	r3, r2
 800831a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a20      	ldr	r2, [pc, #128]	; (80083a0 <TIM_OC1_SetConfig+0xd8>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d003      	beq.n	800832c <TIM_OC1_SetConfig+0x64>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a1f      	ldr	r2, [pc, #124]	; (80083a4 <TIM_OC1_SetConfig+0xdc>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d10c      	bne.n	8008346 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f023 0308 	bic.w	r3, r3, #8
 8008332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	4313      	orrs	r3, r2
 800833c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f023 0304 	bic.w	r3, r3, #4
 8008344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a15      	ldr	r2, [pc, #84]	; (80083a0 <TIM_OC1_SetConfig+0xd8>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d003      	beq.n	8008356 <TIM_OC1_SetConfig+0x8e>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a14      	ldr	r2, [pc, #80]	; (80083a4 <TIM_OC1_SetConfig+0xdc>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d111      	bne.n	800837a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800835c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	4313      	orrs	r3, r2
 800836e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	4313      	orrs	r3, r2
 8008378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	685a      	ldr	r2, [r3, #4]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	621a      	str	r2, [r3, #32]
}
 8008394:	bf00      	nop
 8008396:	371c      	adds	r7, #28
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr
 80083a0:	40010000 	.word	0x40010000
 80083a4:	40010400 	.word	0x40010400

080083a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	f023 0210 	bic.w	r2, r3, #16
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	021b      	lsls	r3, r3, #8
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f023 0320 	bic.w	r3, r3, #32
 80083f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	011b      	lsls	r3, r3, #4
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a22      	ldr	r2, [pc, #136]	; (800848c <TIM_OC2_SetConfig+0xe4>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d003      	beq.n	8008410 <TIM_OC2_SetConfig+0x68>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a21      	ldr	r2, [pc, #132]	; (8008490 <TIM_OC2_SetConfig+0xe8>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d10d      	bne.n	800842c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	011b      	lsls	r3, r3, #4
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	4313      	orrs	r3, r2
 8008422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800842a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a17      	ldr	r2, [pc, #92]	; (800848c <TIM_OC2_SetConfig+0xe4>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d003      	beq.n	800843c <TIM_OC2_SetConfig+0x94>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a16      	ldr	r2, [pc, #88]	; (8008490 <TIM_OC2_SetConfig+0xe8>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d113      	bne.n	8008464 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008442:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800844a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	695b      	ldr	r3, [r3, #20]
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	4313      	orrs	r3, r2
 8008456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	4313      	orrs	r3, r2
 8008462:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	685a      	ldr	r2, [r3, #4]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	621a      	str	r2, [r3, #32]
}
 800847e:	bf00      	nop
 8008480:	371c      	adds	r7, #28
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	40010000 	.word	0x40010000
 8008490:	40010400 	.word	0x40010400

08008494 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f023 0303 	bic.w	r3, r3, #3
 80084ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	021b      	lsls	r3, r3, #8
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a21      	ldr	r2, [pc, #132]	; (8008574 <TIM_OC3_SetConfig+0xe0>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d003      	beq.n	80084fa <TIM_OC3_SetConfig+0x66>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a20      	ldr	r2, [pc, #128]	; (8008578 <TIM_OC3_SetConfig+0xe4>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d10d      	bne.n	8008516 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008500:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	4313      	orrs	r3, r2
 800850c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a16      	ldr	r2, [pc, #88]	; (8008574 <TIM_OC3_SetConfig+0xe0>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d003      	beq.n	8008526 <TIM_OC3_SetConfig+0x92>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a15      	ldr	r2, [pc, #84]	; (8008578 <TIM_OC3_SetConfig+0xe4>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d113      	bne.n	800854e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800852c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	011b      	lsls	r3, r3, #4
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	4313      	orrs	r3, r2
 8008540:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	011b      	lsls	r3, r3, #4
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	4313      	orrs	r3, r2
 800854c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	621a      	str	r2, [r3, #32]
}
 8008568:	bf00      	nop
 800856a:	371c      	adds	r7, #28
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr
 8008574:	40010000 	.word	0x40010000
 8008578:	40010400 	.word	0x40010400

0800857c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a1b      	ldr	r3, [r3, #32]
 8008596:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	69db      	ldr	r3, [r3, #28]
 80085a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	021b      	lsls	r3, r3, #8
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	4313      	orrs	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	031b      	lsls	r3, r3, #12
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a12      	ldr	r2, [pc, #72]	; (8008620 <TIM_OC4_SetConfig+0xa4>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d003      	beq.n	80085e4 <TIM_OC4_SetConfig+0x68>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a11      	ldr	r2, [pc, #68]	; (8008624 <TIM_OC4_SetConfig+0xa8>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d109      	bne.n	80085f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	019b      	lsls	r3, r3, #6
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	621a      	str	r2, [r3, #32]
}
 8008612:	bf00      	nop
 8008614:	371c      	adds	r7, #28
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	40010000 	.word	0x40010000
 8008624:	40010400 	.word	0x40010400

08008628 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008628:	b480      	push	{r7}
 800862a:	b087      	sub	sp, #28
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	f023 0201 	bic.w	r2, r3, #1
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	011b      	lsls	r3, r3, #4
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	4313      	orrs	r3, r2
 800865c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f023 030a 	bic.w	r3, r3, #10
 8008664:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	4313      	orrs	r3, r2
 800866c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	693a      	ldr	r2, [r7, #16]
 8008672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	621a      	str	r2, [r3, #32]
}
 800867a:	bf00      	nop
 800867c:	371c      	adds	r7, #28
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008686:	b480      	push	{r7}
 8008688:	b087      	sub	sp, #28
 800868a:	af00      	add	r7, sp, #0
 800868c:	60f8      	str	r0, [r7, #12]
 800868e:	60b9      	str	r1, [r7, #8]
 8008690:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	f023 0210 	bic.w	r2, r3, #16
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6a1b      	ldr	r3, [r3, #32]
 80086a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	031b      	lsls	r3, r3, #12
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	011b      	lsls	r3, r3, #4
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	621a      	str	r2, [r3, #32]
}
 80086da:	bf00      	nop
 80086dc:	371c      	adds	r7, #28
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b085      	sub	sp, #20
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4313      	orrs	r3, r2
 8008704:	f043 0307 	orr.w	r3, r3, #7
 8008708:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	609a      	str	r2, [r3, #8]
}
 8008710:	bf00      	nop
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008736:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	021a      	lsls	r2, r3, #8
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	431a      	orrs	r2, r3
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	4313      	orrs	r3, r2
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	4313      	orrs	r3, r2
 8008748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	609a      	str	r2, [r3, #8]
}
 8008750:	bf00      	nop
 8008752:	371c      	adds	r7, #28
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800876c:	2b01      	cmp	r3, #1
 800876e:	d101      	bne.n	8008774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008770:	2302      	movs	r3, #2
 8008772:	e05a      	b.n	800882a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2202      	movs	r2, #2
 8008780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800879a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a21      	ldr	r2, [pc, #132]	; (8008838 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d022      	beq.n	80087fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087c0:	d01d      	beq.n	80087fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a1d      	ldr	r2, [pc, #116]	; (800883c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d018      	beq.n	80087fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a1b      	ldr	r2, [pc, #108]	; (8008840 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d013      	beq.n	80087fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a1a      	ldr	r2, [pc, #104]	; (8008844 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d00e      	beq.n	80087fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a18      	ldr	r2, [pc, #96]	; (8008848 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d009      	beq.n	80087fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a17      	ldr	r2, [pc, #92]	; (800884c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d004      	beq.n	80087fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a15      	ldr	r2, [pc, #84]	; (8008850 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d10c      	bne.n	8008818 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	4313      	orrs	r3, r2
 800880e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	40010000 	.word	0x40010000
 800883c:	40000400 	.word	0x40000400
 8008840:	40000800 	.word	0x40000800
 8008844:	40000c00 	.word	0x40000c00
 8008848:	40010400 	.word	0x40010400
 800884c:	40014000 	.word	0x40014000
 8008850:	40001800 	.word	0x40001800

08008854 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800885e:	2300      	movs	r3, #0
 8008860:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008868:	2b01      	cmp	r3, #1
 800886a:	d101      	bne.n	8008870 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800886c:	2302      	movs	r3, #2
 800886e:	e03d      	b.n	80088ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	4313      	orrs	r3, r2
 8008884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	4313      	orrs	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	4313      	orrs	r3, r2
 80088a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	69db      	ldr	r3, [r3, #28]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3714      	adds	r7, #20
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e03f      	b.n	80089b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d106      	bne.n	800894c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f7fa fa5c 	bl	8002e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2224      	movs	r2, #36	; 0x24
 8008950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68da      	ldr	r2, [r3, #12]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f001 f833 	bl	80099d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	691a      	ldr	r2, [r3, #16]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	695a      	ldr	r2, [r3, #20]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68da      	ldr	r2, [r3, #12]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2220      	movs	r2, #32
 80089a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2220      	movs	r2, #32
 80089ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	4613      	mov	r3, r2
 80089c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b20      	cmp	r3, #32
 80089d2:	d11d      	bne.n	8008a10 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d002      	beq.n	80089e0 <HAL_UART_Receive_IT+0x26>
 80089da:	88fb      	ldrh	r3, [r7, #6]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d101      	bne.n	80089e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e016      	b.n	8008a12 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d101      	bne.n	80089f2 <HAL_UART_Receive_IT+0x38>
 80089ee:	2302      	movs	r3, #2
 80089f0:	e00f      	b.n	8008a12 <HAL_UART_Receive_IT+0x58>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a00:	88fb      	ldrh	r3, [r7, #6]
 8008a02:	461a      	mov	r2, r3
 8008a04:	68b9      	ldr	r1, [r7, #8]
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f000 fd4b 	bl	80094a2 <UART_Start_Receive_IT>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	e000      	b.n	8008a12 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008a10:	2302      	movs	r3, #2
  }
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
	...

08008a1c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b08c      	sub	sp, #48	; 0x30
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	4613      	mov	r3, r2
 8008a28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	2b20      	cmp	r3, #32
 8008a34:	d165      	bne.n	8008b02 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <HAL_UART_Transmit_DMA+0x26>
 8008a3c:	88fb      	ldrh	r3, [r7, #6]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e05e      	b.n	8008b04 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d101      	bne.n	8008a54 <HAL_UART_Transmit_DMA+0x38>
 8008a50:	2302      	movs	r3, #2
 8008a52:	e057      	b.n	8008b04 <HAL_UART_Transmit_DMA+0xe8>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	88fa      	ldrh	r2, [r7, #6]
 8008a66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	88fa      	ldrh	r2, [r7, #6]
 8008a6c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2221      	movs	r2, #33	; 0x21
 8008a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a80:	4a22      	ldr	r2, [pc, #136]	; (8008b0c <HAL_UART_Transmit_DMA+0xf0>)
 8008a82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a88:	4a21      	ldr	r2, [pc, #132]	; (8008b10 <HAL_UART_Transmit_DMA+0xf4>)
 8008a8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a90:	4a20      	ldr	r2, [pc, #128]	; (8008b14 <HAL_UART_Transmit_DMA+0xf8>)
 8008a92:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a98:	2200      	movs	r2, #0
 8008a9a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008a9c:	f107 0308 	add.w	r3, r7, #8
 8008aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa8:	6819      	ldr	r1, [r3, #0]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	3304      	adds	r3, #4
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	88fb      	ldrh	r3, [r7, #6]
 8008ab4:	f7fb fae8 	bl	8004088 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ac0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3314      	adds	r3, #20
 8008ad0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	e853 3f00 	ldrex	r3, [r3]
 8008ad8:	617b      	str	r3, [r7, #20]
   return(result);
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3314      	adds	r3, #20
 8008ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008aea:	627a      	str	r2, [r7, #36]	; 0x24
 8008aec:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aee:	6a39      	ldr	r1, [r7, #32]
 8008af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af2:	e841 2300 	strex	r3, r2, [r1]
 8008af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1e5      	bne.n	8008aca <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	e000      	b.n	8008b04 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008b02:	2302      	movs	r3, #2
  }
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3730      	adds	r7, #48	; 0x30
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	080091fd 	.word	0x080091fd
 8008b10:	08009297 	.word	0x08009297
 8008b14:	0800940f 	.word	0x0800940f

08008b18 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	4613      	mov	r3, r2
 8008b24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b20      	cmp	r3, #32
 8008b30:	d11d      	bne.n	8008b6e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <HAL_UART_Receive_DMA+0x26>
 8008b38:	88fb      	ldrh	r3, [r7, #6]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e016      	b.n	8008b70 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d101      	bne.n	8008b50 <HAL_UART_Receive_DMA+0x38>
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	e00f      	b.n	8008b70 <HAL_UART_Receive_DMA+0x58>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008b5e:	88fb      	ldrh	r3, [r7, #6]
 8008b60:	461a      	mov	r2, r3
 8008b62:	68b9      	ldr	r1, [r7, #8]
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f000 fcd7 	bl	8009518 <UART_Start_Receive_DMA>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	e000      	b.n	8008b70 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008b6e:	2302      	movs	r3, #2
  }
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b090      	sub	sp, #64	; 0x40
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008b80:	2300      	movs	r3, #0
 8008b82:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	695b      	ldr	r3, [r3, #20]
 8008b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b8e:	2b80      	cmp	r3, #128	; 0x80
 8008b90:	bf0c      	ite	eq
 8008b92:	2301      	moveq	r3, #1
 8008b94:	2300      	movne	r3, #0
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b21      	cmp	r3, #33	; 0x21
 8008ba4:	d128      	bne.n	8008bf8 <HAL_UART_DMAStop+0x80>
 8008ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d025      	beq.n	8008bf8 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	3314      	adds	r3, #20
 8008bb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	623b      	str	r3, [r7, #32]
   return(result);
 8008bbc:	6a3b      	ldr	r3, [r7, #32]
 8008bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3314      	adds	r3, #20
 8008bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bcc:	633a      	str	r2, [r7, #48]	; 0x30
 8008bce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bd4:	e841 2300 	strex	r3, r2, [r1]
 8008bd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e5      	bne.n	8008bac <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d004      	beq.n	8008bf2 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fb faa3 	bl	8004138 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fd2a 	bl	800964c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	695b      	ldr	r3, [r3, #20]
 8008bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c02:	2b40      	cmp	r3, #64	; 0x40
 8008c04:	bf0c      	ite	eq
 8008c06:	2301      	moveq	r3, #1
 8008c08:	2300      	movne	r3, #0
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b22      	cmp	r3, #34	; 0x22
 8008c18:	d128      	bne.n	8008c6c <HAL_UART_DMAStop+0xf4>
 8008c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d025      	beq.n	8008c6c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	3314      	adds	r3, #20
 8008c26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	e853 3f00 	ldrex	r3, [r3]
 8008c2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c36:	637b      	str	r3, [r7, #52]	; 0x34
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3314      	adds	r3, #20
 8008c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c40:	61fa      	str	r2, [r7, #28]
 8008c42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c44:	69b9      	ldr	r1, [r7, #24]
 8008c46:	69fa      	ldr	r2, [r7, #28]
 8008c48:	e841 2300 	strex	r3, r2, [r1]
 8008c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1e5      	bne.n	8008c20 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d004      	beq.n	8008c66 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fb fa69 	bl	8004138 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fd18 	bl	800969c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3740      	adds	r7, #64	; 0x40
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b0ba      	sub	sp, #232	; 0xe8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cae:	f003 030f 	and.w	r3, r3, #15
 8008cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10f      	bne.n	8008cde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d009      	beq.n	8008cde <HAL_UART_IRQHandler+0x66>
 8008cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cce:	f003 0320 	and.w	r3, r3, #32
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d003      	beq.n	8008cde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fdbf 	bl	800985a <UART_Receive_IT>
      return;
 8008cdc:	e256      	b.n	800918c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f000 80de 	beq.w	8008ea4 <HAL_UART_IRQHandler+0x22c>
 8008ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cec:	f003 0301 	and.w	r3, r3, #1
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d106      	bne.n	8008d02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cf8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f000 80d1 	beq.w	8008ea4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00b      	beq.n	8008d26 <HAL_UART_IRQHandler+0xae>
 8008d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d005      	beq.n	8008d26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1e:	f043 0201 	orr.w	r2, r3, #1
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d2a:	f003 0304 	and.w	r3, r3, #4
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00b      	beq.n	8008d4a <HAL_UART_IRQHandler+0xd2>
 8008d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d005      	beq.n	8008d4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d42:	f043 0202 	orr.w	r2, r3, #2
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d4e:	f003 0302 	and.w	r3, r3, #2
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00b      	beq.n	8008d6e <HAL_UART_IRQHandler+0xf6>
 8008d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d5a:	f003 0301 	and.w	r3, r3, #1
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d005      	beq.n	8008d6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d66:	f043 0204 	orr.w	r2, r3, #4
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d72:	f003 0308 	and.w	r3, r3, #8
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d011      	beq.n	8008d9e <HAL_UART_IRQHandler+0x126>
 8008d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d7e:	f003 0320 	and.w	r3, r3, #32
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d105      	bne.n	8008d92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d8a:	f003 0301 	and.w	r3, r3, #1
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d005      	beq.n	8008d9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d96:	f043 0208 	orr.w	r2, r3, #8
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f000 81ed 	beq.w	8009182 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dac:	f003 0320 	and.w	r3, r3, #32
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d008      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x14e>
 8008db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008db8:	f003 0320 	and.w	r3, r3, #32
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fd4a 	bl	800985a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd0:	2b40      	cmp	r3, #64	; 0x40
 8008dd2:	bf0c      	ite	eq
 8008dd4:	2301      	moveq	r3, #1
 8008dd6:	2300      	movne	r3, #0
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de2:	f003 0308 	and.w	r3, r3, #8
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d103      	bne.n	8008df2 <HAL_UART_IRQHandler+0x17a>
 8008dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d04f      	beq.n	8008e92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fc52 	bl	800969c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e02:	2b40      	cmp	r3, #64	; 0x40
 8008e04:	d141      	bne.n	8008e8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	3314      	adds	r3, #20
 8008e0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e14:	e853 3f00 	ldrex	r3, [r3]
 8008e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3314      	adds	r3, #20
 8008e2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008e32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008e3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008e42:	e841 2300 	strex	r3, r2, [r1]
 8008e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1d9      	bne.n	8008e06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d013      	beq.n	8008e82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5e:	4a7d      	ldr	r2, [pc, #500]	; (8009054 <HAL_UART_IRQHandler+0x3dc>)
 8008e60:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fb f9d6 	bl	8004218 <HAL_DMA_Abort_IT>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d016      	beq.n	8008ea0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e80:	e00e      	b.n	8008ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f9a4 	bl	80091d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e88:	e00a      	b.n	8008ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f9a0 	bl	80091d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e90:	e006      	b.n	8008ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f99c 	bl	80091d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008e9e:	e170      	b.n	8009182 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ea0:	bf00      	nop
    return;
 8008ea2:	e16e      	b.n	8009182 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	f040 814a 	bne.w	8009142 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eb2:	f003 0310 	and.w	r3, r3, #16
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 8143 	beq.w	8009142 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ec0:	f003 0310 	and.w	r3, r3, #16
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f000 813c 	beq.w	8009142 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008eca:	2300      	movs	r3, #0
 8008ecc:	60bb      	str	r3, [r7, #8]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	60bb      	str	r3, [r7, #8]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	60bb      	str	r3, [r7, #8]
 8008ede:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	695b      	ldr	r3, [r3, #20]
 8008ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eea:	2b40      	cmp	r3, #64	; 0x40
 8008eec:	f040 80b4 	bne.w	8009058 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008efc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 8140 	beq.w	8009186 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	f080 8139 	bcs.w	8009186 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f26:	f000 8088 	beq.w	800903a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	330c      	adds	r3, #12
 8008f30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f38:	e853 3f00 	ldrex	r3, [r3]
 8008f3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	330c      	adds	r3, #12
 8008f52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008f56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008f62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008f66:	e841 2300 	strex	r3, r2, [r1]
 8008f6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1d9      	bne.n	8008f2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3314      	adds	r3, #20
 8008f7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f80:	e853 3f00 	ldrex	r3, [r3]
 8008f84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008f86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f88:	f023 0301 	bic.w	r3, r3, #1
 8008f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3314      	adds	r3, #20
 8008f96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008f9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008f9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008fa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008fa6:	e841 2300 	strex	r3, r2, [r1]
 8008faa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008fac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1e1      	bne.n	8008f76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3314      	adds	r3, #20
 8008fb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fbc:	e853 3f00 	ldrex	r3, [r3]
 8008fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	3314      	adds	r3, #20
 8008fd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008fd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008fd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008fdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008fde:	e841 2300 	strex	r3, r2, [r1]
 8008fe2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1e3      	bne.n	8008fb2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2220      	movs	r2, #32
 8008fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	330c      	adds	r3, #12
 8008ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800900a:	f023 0310 	bic.w	r3, r3, #16
 800900e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	330c      	adds	r3, #12
 8009018:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800901c:	65ba      	str	r2, [r7, #88]	; 0x58
 800901e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009020:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009022:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009024:	e841 2300 	strex	r3, r2, [r1]
 8009028:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800902a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1e3      	bne.n	8008ff8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009034:	4618      	mov	r0, r3
 8009036:	f7fb f87f 	bl	8004138 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009042:	b29b      	uxth	r3, r3
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	b29b      	uxth	r3, r3
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f8ca 	bl	80091e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009050:	e099      	b.n	8009186 <HAL_UART_IRQHandler+0x50e>
 8009052:	bf00      	nop
 8009054:	08009763 	.word	0x08009763
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009060:	b29b      	uxth	r3, r3
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800906c:	b29b      	uxth	r3, r3
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 808b 	beq.w	800918a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009074:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 8086 	beq.w	800918a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	330c      	adds	r3, #12
 8009084:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009088:	e853 3f00 	ldrex	r3, [r3]
 800908c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800908e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009090:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009094:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	330c      	adds	r3, #12
 800909e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80090a2:	647a      	str	r2, [r7, #68]	; 0x44
 80090a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090aa:	e841 2300 	strex	r3, r2, [r1]
 80090ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1e3      	bne.n	800907e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3314      	adds	r3, #20
 80090bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	e853 3f00 	ldrex	r3, [r3]
 80090c4:	623b      	str	r3, [r7, #32]
   return(result);
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	f023 0301 	bic.w	r3, r3, #1
 80090cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	3314      	adds	r3, #20
 80090d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80090da:	633a      	str	r2, [r7, #48]	; 0x30
 80090dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090e2:	e841 2300 	strex	r3, r2, [r1]
 80090e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1e3      	bne.n	80090b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2220      	movs	r2, #32
 80090f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	330c      	adds	r3, #12
 8009102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	e853 3f00 	ldrex	r3, [r3]
 800910a:	60fb      	str	r3, [r7, #12]
   return(result);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f023 0310 	bic.w	r3, r3, #16
 8009112:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	330c      	adds	r3, #12
 800911c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009120:	61fa      	str	r2, [r7, #28]
 8009122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009124:	69b9      	ldr	r1, [r7, #24]
 8009126:	69fa      	ldr	r2, [r7, #28]
 8009128:	e841 2300 	strex	r3, r2, [r1]
 800912c:	617b      	str	r3, [r7, #20]
   return(result);
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1e3      	bne.n	80090fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009134:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f852 	bl	80091e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009140:	e023      	b.n	800918a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800914a:	2b00      	cmp	r3, #0
 800914c:	d009      	beq.n	8009162 <HAL_UART_IRQHandler+0x4ea>
 800914e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fb15 	bl	800978a <UART_Transmit_IT>
    return;
 8009160:	e014      	b.n	800918c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00e      	beq.n	800918c <HAL_UART_IRQHandler+0x514>
 800916e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009176:	2b00      	cmp	r3, #0
 8009178:	d008      	beq.n	800918c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fb55 	bl	800982a <UART_EndTransmit_IT>
    return;
 8009180:	e004      	b.n	800918c <HAL_UART_IRQHandler+0x514>
    return;
 8009182:	bf00      	nop
 8009184:	e002      	b.n	800918c <HAL_UART_IRQHandler+0x514>
      return;
 8009186:	bf00      	nop
 8009188:	e000      	b.n	800918c <HAL_UART_IRQHandler+0x514>
      return;
 800918a:	bf00      	nop
  }
}
 800918c:	37e8      	adds	r7, #232	; 0xe8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop

08009194 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800919c:	bf00      	nop
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b090      	sub	sp, #64	; 0x40
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009208:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009214:	2b00      	cmp	r3, #0
 8009216:	d137      	bne.n	8009288 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800921a:	2200      	movs	r2, #0
 800921c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800921e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3314      	adds	r3, #20
 8009224:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009228:	e853 3f00 	ldrex	r3, [r3]
 800922c:	623b      	str	r3, [r7, #32]
   return(result);
 800922e:	6a3b      	ldr	r3, [r7, #32]
 8009230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009234:	63bb      	str	r3, [r7, #56]	; 0x38
 8009236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	3314      	adds	r3, #20
 800923c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800923e:	633a      	str	r2, [r7, #48]	; 0x30
 8009240:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009242:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009246:	e841 2300 	strex	r3, r2, [r1]
 800924a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800924c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1e5      	bne.n	800921e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	330c      	adds	r3, #12
 8009258:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	e853 3f00 	ldrex	r3, [r3]
 8009260:	60fb      	str	r3, [r7, #12]
   return(result);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009268:	637b      	str	r3, [r7, #52]	; 0x34
 800926a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	330c      	adds	r3, #12
 8009270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009272:	61fa      	str	r2, [r7, #28]
 8009274:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009276:	69b9      	ldr	r1, [r7, #24]
 8009278:	69fa      	ldr	r2, [r7, #28]
 800927a:	e841 2300 	strex	r3, r2, [r1]
 800927e:	617b      	str	r3, [r7, #20]
   return(result);
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1e5      	bne.n	8009252 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009286:	e002      	b.n	800928e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009288:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800928a:	f7ff ff83 	bl	8009194 <HAL_UART_TxCpltCallback>
}
 800928e:	bf00      	nop
 8009290:	3740      	adds	r7, #64	; 0x40
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b084      	sub	sp, #16
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f7ff ff7f 	bl	80091a8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092aa:	bf00      	nop
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b09c      	sub	sp, #112	; 0x70
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092be:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d172      	bne.n	80093b4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80092ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092d0:	2200      	movs	r2, #0
 80092d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	330c      	adds	r3, #12
 80092da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092de:	e853 3f00 	ldrex	r3, [r3]
 80092e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80092ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	330c      	adds	r3, #12
 80092f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80092f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80092f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092fc:	e841 2300 	strex	r3, r2, [r1]
 8009300:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1e5      	bne.n	80092d4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3314      	adds	r3, #20
 800930e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009312:	e853 3f00 	ldrex	r3, [r3]
 8009316:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800931a:	f023 0301 	bic.w	r3, r3, #1
 800931e:	667b      	str	r3, [r7, #100]	; 0x64
 8009320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3314      	adds	r3, #20
 8009326:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009328:	647a      	str	r2, [r7, #68]	; 0x44
 800932a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800932e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009330:	e841 2300 	strex	r3, r2, [r1]
 8009334:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1e5      	bne.n	8009308 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800933c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3314      	adds	r3, #20
 8009342:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009346:	e853 3f00 	ldrex	r3, [r3]
 800934a:	623b      	str	r3, [r7, #32]
   return(result);
 800934c:	6a3b      	ldr	r3, [r7, #32]
 800934e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009352:	663b      	str	r3, [r7, #96]	; 0x60
 8009354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	3314      	adds	r3, #20
 800935a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800935c:	633a      	str	r2, [r7, #48]	; 0x30
 800935e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009360:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009364:	e841 2300 	strex	r3, r2, [r1]
 8009368:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800936a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1e5      	bne.n	800933c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009372:	2220      	movs	r2, #32
 8009374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800937a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800937c:	2b01      	cmp	r3, #1
 800937e:	d119      	bne.n	80093b4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	330c      	adds	r3, #12
 8009386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	e853 3f00 	ldrex	r3, [r3]
 800938e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f023 0310 	bic.w	r3, r3, #16
 8009396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	330c      	adds	r3, #12
 800939e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80093a0:	61fa      	str	r2, [r7, #28]
 80093a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a4:	69b9      	ldr	r1, [r7, #24]
 80093a6:	69fa      	ldr	r2, [r7, #28]
 80093a8:	e841 2300 	strex	r3, r2, [r1]
 80093ac:	617b      	str	r3, [r7, #20]
   return(result);
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1e5      	bne.n	8009380 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d106      	bne.n	80093ca <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093c0:	4619      	mov	r1, r3
 80093c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80093c4:	f7ff ff0e 	bl	80091e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093c8:	e002      	b.n	80093d0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80093ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80093cc:	f7f8 fecc 	bl	8002168 <HAL_UART_RxCpltCallback>
}
 80093d0:	bf00      	nop
 80093d2:	3770      	adds	r7, #112	; 0x70
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d108      	bne.n	8009400 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093f2:	085b      	lsrs	r3, r3, #1
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	4619      	mov	r1, r3
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f7ff fef3 	bl	80091e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093fe:	e002      	b.n	8009406 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f7ff fedb 	bl	80091bc <HAL_UART_RxHalfCpltCallback>
}
 8009406:	bf00      	nop
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b084      	sub	sp, #16
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009416:	2300      	movs	r3, #0
 8009418:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800942a:	2b80      	cmp	r3, #128	; 0x80
 800942c:	bf0c      	ite	eq
 800942e:	2301      	moveq	r3, #1
 8009430:	2300      	movne	r3, #0
 8009432:	b2db      	uxtb	r3, r3
 8009434:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800943c:	b2db      	uxtb	r3, r3
 800943e:	2b21      	cmp	r3, #33	; 0x21
 8009440:	d108      	bne.n	8009454 <UART_DMAError+0x46>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d005      	beq.n	8009454 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	2200      	movs	r2, #0
 800944c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800944e:	68b8      	ldr	r0, [r7, #8]
 8009450:	f000 f8fc 	bl	800964c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	695b      	ldr	r3, [r3, #20]
 800945a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800945e:	2b40      	cmp	r3, #64	; 0x40
 8009460:	bf0c      	ite	eq
 8009462:	2301      	moveq	r3, #1
 8009464:	2300      	movne	r3, #0
 8009466:	b2db      	uxtb	r3, r3
 8009468:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009470:	b2db      	uxtb	r3, r3
 8009472:	2b22      	cmp	r3, #34	; 0x22
 8009474:	d108      	bne.n	8009488 <UART_DMAError+0x7a>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d005      	beq.n	8009488 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	2200      	movs	r2, #0
 8009480:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009482:	68b8      	ldr	r0, [r7, #8]
 8009484:	f000 f90a 	bl	800969c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948c:	f043 0210 	orr.w	r2, r3, #16
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009494:	68b8      	ldr	r0, [r7, #8]
 8009496:	f7ff fe9b 	bl	80091d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800949a:	bf00      	nop
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b085      	sub	sp, #20
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	60f8      	str	r0, [r7, #12]
 80094aa:	60b9      	str	r1, [r7, #8]
 80094ac:	4613      	mov	r3, r2
 80094ae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	88fa      	ldrh	r2, [r7, #6]
 80094ba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	88fa      	ldrh	r2, [r7, #6]
 80094c0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2222      	movs	r2, #34	; 0x22
 80094cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68da      	ldr	r2, [r3, #12]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094e6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	695a      	ldr	r2, [r3, #20]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f042 0201 	orr.w	r2, r2, #1
 80094f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68da      	ldr	r2, [r3, #12]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f042 0220 	orr.w	r2, r2, #32
 8009506:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
	...

08009518 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b098      	sub	sp, #96	; 0x60
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	4613      	mov	r3, r2
 8009524:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	88fa      	ldrh	r2, [r7, #6]
 8009530:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2222      	movs	r2, #34	; 0x22
 800953c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009544:	4a3e      	ldr	r2, [pc, #248]	; (8009640 <UART_Start_Receive_DMA+0x128>)
 8009546:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954c:	4a3d      	ldr	r2, [pc, #244]	; (8009644 <UART_Start_Receive_DMA+0x12c>)
 800954e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009554:	4a3c      	ldr	r2, [pc, #240]	; (8009648 <UART_Start_Receive_DMA+0x130>)
 8009556:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955c:	2200      	movs	r2, #0
 800955e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009560:	f107 0308 	add.w	r3, r7, #8
 8009564:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	3304      	adds	r3, #4
 8009570:	4619      	mov	r1, r3
 8009572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	88fb      	ldrh	r3, [r7, #6]
 8009578:	f7fa fd86 	bl	8004088 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800957c:	2300      	movs	r3, #0
 800957e:	613b      	str	r3, [r7, #16]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	613b      	str	r3, [r7, #16]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	613b      	str	r3, [r7, #16]
 8009590:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	330c      	adds	r3, #12
 80095a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095a4:	e853 3f00 	ldrex	r3, [r3]
 80095a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	330c      	adds	r3, #12
 80095b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 80095bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80095c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095c2:	e841 2300 	strex	r3, r2, [r1]
 80095c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80095c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1e5      	bne.n	800959a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3314      	adds	r3, #20
 80095d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d8:	e853 3f00 	ldrex	r3, [r3]
 80095dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	f043 0301 	orr.w	r3, r3, #1
 80095e4:	657b      	str	r3, [r7, #84]	; 0x54
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3314      	adds	r3, #20
 80095ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80095ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80095f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80095f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095f6:	e841 2300 	strex	r3, r2, [r1]
 80095fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1e5      	bne.n	80095ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3314      	adds	r3, #20
 8009608:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	e853 3f00 	ldrex	r3, [r3]
 8009610:	617b      	str	r3, [r7, #20]
   return(result);
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009618:	653b      	str	r3, [r7, #80]	; 0x50
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	3314      	adds	r3, #20
 8009620:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009622:	627a      	str	r2, [r7, #36]	; 0x24
 8009624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009626:	6a39      	ldr	r1, [r7, #32]
 8009628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800962a:	e841 2300 	strex	r3, r2, [r1]
 800962e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1e5      	bne.n	8009602 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3760      	adds	r7, #96	; 0x60
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	080092b3 	.word	0x080092b3
 8009644:	080093d9 	.word	0x080093d9
 8009648:	0800940f 	.word	0x0800940f

0800964c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800964c:	b480      	push	{r7}
 800964e:	b089      	sub	sp, #36	; 0x24
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	330c      	adds	r3, #12
 800965a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	e853 3f00 	ldrex	r3, [r3]
 8009662:	60bb      	str	r3, [r7, #8]
   return(result);
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800966a:	61fb      	str	r3, [r7, #28]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	330c      	adds	r3, #12
 8009672:	69fa      	ldr	r2, [r7, #28]
 8009674:	61ba      	str	r2, [r7, #24]
 8009676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009678:	6979      	ldr	r1, [r7, #20]
 800967a:	69ba      	ldr	r2, [r7, #24]
 800967c:	e841 2300 	strex	r3, r2, [r1]
 8009680:	613b      	str	r3, [r7, #16]
   return(result);
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1e5      	bne.n	8009654 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2220      	movs	r2, #32
 800968c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009690:	bf00      	nop
 8009692:	3724      	adds	r7, #36	; 0x24
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800969c:	b480      	push	{r7}
 800969e:	b095      	sub	sp, #84	; 0x54
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	330c      	adds	r3, #12
 80096aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ae:	e853 3f00 	ldrex	r3, [r3]
 80096b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80096b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	330c      	adds	r3, #12
 80096c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096c4:	643a      	str	r2, [r7, #64]	; 0x40
 80096c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096cc:	e841 2300 	strex	r3, r2, [r1]
 80096d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1e5      	bne.n	80096a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	3314      	adds	r3, #20
 80096de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	e853 3f00 	ldrex	r3, [r3]
 80096e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	f023 0301 	bic.w	r3, r3, #1
 80096ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3314      	adds	r3, #20
 80096f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80096fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009700:	e841 2300 	strex	r3, r2, [r1]
 8009704:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1e5      	bne.n	80096d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009710:	2b01      	cmp	r3, #1
 8009712:	d119      	bne.n	8009748 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	330c      	adds	r3, #12
 800971a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	e853 3f00 	ldrex	r3, [r3]
 8009722:	60bb      	str	r3, [r7, #8]
   return(result);
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	f023 0310 	bic.w	r3, r3, #16
 800972a:	647b      	str	r3, [r7, #68]	; 0x44
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	330c      	adds	r3, #12
 8009732:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009734:	61ba      	str	r2, [r7, #24]
 8009736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009738:	6979      	ldr	r1, [r7, #20]
 800973a:	69ba      	ldr	r2, [r7, #24]
 800973c:	e841 2300 	strex	r3, r2, [r1]
 8009740:	613b      	str	r3, [r7, #16]
   return(result);
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1e5      	bne.n	8009714 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2220      	movs	r2, #32
 800974c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009756:	bf00      	nop
 8009758:	3754      	adds	r7, #84	; 0x54
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f7ff fd27 	bl	80091d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009782:	bf00      	nop
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800978a:	b480      	push	{r7}
 800978c:	b085      	sub	sp, #20
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009798:	b2db      	uxtb	r3, r3
 800979a:	2b21      	cmp	r3, #33	; 0x21
 800979c:	d13e      	bne.n	800981c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097a6:	d114      	bne.n	80097d2 <UART_Transmit_IT+0x48>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d110      	bne.n	80097d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a1b      	ldr	r3, [r3, #32]
 80097b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	881b      	ldrh	r3, [r3, #0]
 80097ba:	461a      	mov	r2, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	1c9a      	adds	r2, r3, #2
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	621a      	str	r2, [r3, #32]
 80097d0:	e008      	b.n	80097e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	1c59      	adds	r1, r3, #1
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	6211      	str	r1, [r2, #32]
 80097dc:	781a      	ldrb	r2, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	3b01      	subs	r3, #1
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	4619      	mov	r1, r3
 80097f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10f      	bne.n	8009818 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68da      	ldr	r2, [r3, #12]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009806:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68da      	ldr	r2, [r3, #12]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009816:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009818:	2300      	movs	r3, #0
 800981a:	e000      	b.n	800981e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800981c:	2302      	movs	r3, #2
  }
}
 800981e:	4618      	mov	r0, r3
 8009820:	3714      	adds	r7, #20
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b082      	sub	sp, #8
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68da      	ldr	r2, [r3, #12]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009840:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2220      	movs	r2, #32
 8009846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7ff fca2 	bl	8009194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b08c      	sub	sp, #48	; 0x30
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009868:	b2db      	uxtb	r3, r3
 800986a:	2b22      	cmp	r3, #34	; 0x22
 800986c:	f040 80ab 	bne.w	80099c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009878:	d117      	bne.n	80098aa <UART_Receive_IT+0x50>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d113      	bne.n	80098aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009882:	2300      	movs	r3, #0
 8009884:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800988a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	b29b      	uxth	r3, r3
 8009894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009898:	b29a      	uxth	r2, r3
 800989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a2:	1c9a      	adds	r2, r3, #2
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	629a      	str	r2, [r3, #40]	; 0x28
 80098a8:	e026      	b.n	80098f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80098b0:	2300      	movs	r3, #0
 80098b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098bc:	d007      	beq.n	80098ce <UART_Receive_IT+0x74>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10a      	bne.n	80098dc <UART_Receive_IT+0x82>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d106      	bne.n	80098dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d8:	701a      	strb	r2, [r3, #0]
 80098da:	e008      	b.n	80098ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098e8:	b2da      	uxtb	r2, r3
 80098ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f2:	1c5a      	adds	r2, r3, #1
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	3b01      	subs	r3, #1
 8009900:	b29b      	uxth	r3, r3
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	4619      	mov	r1, r3
 8009906:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009908:	2b00      	cmp	r3, #0
 800990a:	d15a      	bne.n	80099c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	68da      	ldr	r2, [r3, #12]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f022 0220 	bic.w	r2, r2, #32
 800991a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68da      	ldr	r2, [r3, #12]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800992a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	695a      	ldr	r2, [r3, #20]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f022 0201 	bic.w	r2, r2, #1
 800993a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2220      	movs	r2, #32
 8009940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009948:	2b01      	cmp	r3, #1
 800994a:	d135      	bne.n	80099b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	330c      	adds	r3, #12
 8009958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	e853 3f00 	ldrex	r3, [r3]
 8009960:	613b      	str	r3, [r7, #16]
   return(result);
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	f023 0310 	bic.w	r3, r3, #16
 8009968:	627b      	str	r3, [r7, #36]	; 0x24
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	330c      	adds	r3, #12
 8009970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009972:	623a      	str	r2, [r7, #32]
 8009974:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009976:	69f9      	ldr	r1, [r7, #28]
 8009978:	6a3a      	ldr	r2, [r7, #32]
 800997a:	e841 2300 	strex	r3, r2, [r1]
 800997e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1e5      	bne.n	8009952 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 0310 	and.w	r3, r3, #16
 8009990:	2b10      	cmp	r3, #16
 8009992:	d10a      	bne.n	80099aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009994:	2300      	movs	r3, #0
 8009996:	60fb      	str	r3, [r7, #12]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	60fb      	str	r3, [r7, #12]
 80099a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f7ff fc17 	bl	80091e4 <HAL_UARTEx_RxEventCallback>
 80099b6:	e002      	b.n	80099be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f7f8 fbd5 	bl	8002168 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	e002      	b.n	80099c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	e000      	b.n	80099c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80099c6:	2302      	movs	r3, #2
  }
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3730      	adds	r7, #48	; 0x30
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d4:	b09f      	sub	sp, #124	; 0x7c
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80099e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099e6:	68d9      	ldr	r1, [r3, #12]
 80099e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	ea40 0301 	orr.w	r3, r0, r1
 80099f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80099f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099f4:	689a      	ldr	r2, [r3, #8]
 80099f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	431a      	orrs	r2, r3
 80099fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099fe:	695b      	ldr	r3, [r3, #20]
 8009a00:	431a      	orrs	r2, r3
 8009a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a04:	69db      	ldr	r3, [r3, #28]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009a14:	f021 010c 	bic.w	r1, r1, #12
 8009a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a1e:	430b      	orrs	r3, r1
 8009a20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	695b      	ldr	r3, [r3, #20]
 8009a28:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a2e:	6999      	ldr	r1, [r3, #24]
 8009a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	ea40 0301 	orr.w	r3, r0, r1
 8009a38:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	4bc5      	ldr	r3, [pc, #788]	; (8009d54 <UART_SetConfig+0x384>)
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d004      	beq.n	8009a4e <UART_SetConfig+0x7e>
 8009a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	4bc3      	ldr	r3, [pc, #780]	; (8009d58 <UART_SetConfig+0x388>)
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d103      	bne.n	8009a56 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a4e:	f7fd fdb9 	bl	80075c4 <HAL_RCC_GetPCLK2Freq>
 8009a52:	6778      	str	r0, [r7, #116]	; 0x74
 8009a54:	e002      	b.n	8009a5c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a56:	f7fd fda1 	bl	800759c <HAL_RCC_GetPCLK1Freq>
 8009a5a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a5e:	69db      	ldr	r3, [r3, #28]
 8009a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a64:	f040 80b6 	bne.w	8009bd4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a6a:	461c      	mov	r4, r3
 8009a6c:	f04f 0500 	mov.w	r5, #0
 8009a70:	4622      	mov	r2, r4
 8009a72:	462b      	mov	r3, r5
 8009a74:	1891      	adds	r1, r2, r2
 8009a76:	6439      	str	r1, [r7, #64]	; 0x40
 8009a78:	415b      	adcs	r3, r3
 8009a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8009a7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009a80:	1912      	adds	r2, r2, r4
 8009a82:	eb45 0303 	adc.w	r3, r5, r3
 8009a86:	f04f 0000 	mov.w	r0, #0
 8009a8a:	f04f 0100 	mov.w	r1, #0
 8009a8e:	00d9      	lsls	r1, r3, #3
 8009a90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009a94:	00d0      	lsls	r0, r2, #3
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	1911      	adds	r1, r2, r4
 8009a9c:	6639      	str	r1, [r7, #96]	; 0x60
 8009a9e:	416b      	adcs	r3, r5
 8009aa0:	667b      	str	r3, [r7, #100]	; 0x64
 8009aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	f04f 0300 	mov.w	r3, #0
 8009aac:	1891      	adds	r1, r2, r2
 8009aae:	63b9      	str	r1, [r7, #56]	; 0x38
 8009ab0:	415b      	adcs	r3, r3
 8009ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ab4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009ab8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009abc:	f7f7 f91c 	bl	8000cf8 <__aeabi_uldivmod>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	4ba5      	ldr	r3, [pc, #660]	; (8009d5c <UART_SetConfig+0x38c>)
 8009ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8009aca:	095b      	lsrs	r3, r3, #5
 8009acc:	011e      	lsls	r6, r3, #4
 8009ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ad0:	461c      	mov	r4, r3
 8009ad2:	f04f 0500 	mov.w	r5, #0
 8009ad6:	4622      	mov	r2, r4
 8009ad8:	462b      	mov	r3, r5
 8009ada:	1891      	adds	r1, r2, r2
 8009adc:	6339      	str	r1, [r7, #48]	; 0x30
 8009ade:	415b      	adcs	r3, r3
 8009ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8009ae2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009ae6:	1912      	adds	r2, r2, r4
 8009ae8:	eb45 0303 	adc.w	r3, r5, r3
 8009aec:	f04f 0000 	mov.w	r0, #0
 8009af0:	f04f 0100 	mov.w	r1, #0
 8009af4:	00d9      	lsls	r1, r3, #3
 8009af6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009afa:	00d0      	lsls	r0, r2, #3
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	1911      	adds	r1, r2, r4
 8009b02:	65b9      	str	r1, [r7, #88]	; 0x58
 8009b04:	416b      	adcs	r3, r5
 8009b06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	f04f 0300 	mov.w	r3, #0
 8009b12:	1891      	adds	r1, r2, r2
 8009b14:	62b9      	str	r1, [r7, #40]	; 0x28
 8009b16:	415b      	adcs	r3, r3
 8009b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b1e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009b22:	f7f7 f8e9 	bl	8000cf8 <__aeabi_uldivmod>
 8009b26:	4602      	mov	r2, r0
 8009b28:	460b      	mov	r3, r1
 8009b2a:	4b8c      	ldr	r3, [pc, #560]	; (8009d5c <UART_SetConfig+0x38c>)
 8009b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8009b30:	095b      	lsrs	r3, r3, #5
 8009b32:	2164      	movs	r1, #100	; 0x64
 8009b34:	fb01 f303 	mul.w	r3, r1, r3
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	00db      	lsls	r3, r3, #3
 8009b3c:	3332      	adds	r3, #50	; 0x32
 8009b3e:	4a87      	ldr	r2, [pc, #540]	; (8009d5c <UART_SetConfig+0x38c>)
 8009b40:	fba2 2303 	umull	r2, r3, r2, r3
 8009b44:	095b      	lsrs	r3, r3, #5
 8009b46:	005b      	lsls	r3, r3, #1
 8009b48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009b4c:	441e      	add	r6, r3
 8009b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b50:	4618      	mov	r0, r3
 8009b52:	f04f 0100 	mov.w	r1, #0
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	1894      	adds	r4, r2, r2
 8009b5c:	623c      	str	r4, [r7, #32]
 8009b5e:	415b      	adcs	r3, r3
 8009b60:	627b      	str	r3, [r7, #36]	; 0x24
 8009b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009b66:	1812      	adds	r2, r2, r0
 8009b68:	eb41 0303 	adc.w	r3, r1, r3
 8009b6c:	f04f 0400 	mov.w	r4, #0
 8009b70:	f04f 0500 	mov.w	r5, #0
 8009b74:	00dd      	lsls	r5, r3, #3
 8009b76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009b7a:	00d4      	lsls	r4, r2, #3
 8009b7c:	4622      	mov	r2, r4
 8009b7e:	462b      	mov	r3, r5
 8009b80:	1814      	adds	r4, r2, r0
 8009b82:	653c      	str	r4, [r7, #80]	; 0x50
 8009b84:	414b      	adcs	r3, r1
 8009b86:	657b      	str	r3, [r7, #84]	; 0x54
 8009b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	f04f 0300 	mov.w	r3, #0
 8009b92:	1891      	adds	r1, r2, r2
 8009b94:	61b9      	str	r1, [r7, #24]
 8009b96:	415b      	adcs	r3, r3
 8009b98:	61fb      	str	r3, [r7, #28]
 8009b9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b9e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009ba2:	f7f7 f8a9 	bl	8000cf8 <__aeabi_uldivmod>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4b6c      	ldr	r3, [pc, #432]	; (8009d5c <UART_SetConfig+0x38c>)
 8009bac:	fba3 1302 	umull	r1, r3, r3, r2
 8009bb0:	095b      	lsrs	r3, r3, #5
 8009bb2:	2164      	movs	r1, #100	; 0x64
 8009bb4:	fb01 f303 	mul.w	r3, r1, r3
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	00db      	lsls	r3, r3, #3
 8009bbc:	3332      	adds	r3, #50	; 0x32
 8009bbe:	4a67      	ldr	r2, [pc, #412]	; (8009d5c <UART_SetConfig+0x38c>)
 8009bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009bc4:	095b      	lsrs	r3, r3, #5
 8009bc6:	f003 0207 	and.w	r2, r3, #7
 8009bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4432      	add	r2, r6
 8009bd0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009bd2:	e0b9      	b.n	8009d48 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009bd6:	461c      	mov	r4, r3
 8009bd8:	f04f 0500 	mov.w	r5, #0
 8009bdc:	4622      	mov	r2, r4
 8009bde:	462b      	mov	r3, r5
 8009be0:	1891      	adds	r1, r2, r2
 8009be2:	6139      	str	r1, [r7, #16]
 8009be4:	415b      	adcs	r3, r3
 8009be6:	617b      	str	r3, [r7, #20]
 8009be8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009bec:	1912      	adds	r2, r2, r4
 8009bee:	eb45 0303 	adc.w	r3, r5, r3
 8009bf2:	f04f 0000 	mov.w	r0, #0
 8009bf6:	f04f 0100 	mov.w	r1, #0
 8009bfa:	00d9      	lsls	r1, r3, #3
 8009bfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009c00:	00d0      	lsls	r0, r2, #3
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	eb12 0804 	adds.w	r8, r2, r4
 8009c0a:	eb43 0905 	adc.w	r9, r3, r5
 8009c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f04f 0100 	mov.w	r1, #0
 8009c18:	f04f 0200 	mov.w	r2, #0
 8009c1c:	f04f 0300 	mov.w	r3, #0
 8009c20:	008b      	lsls	r3, r1, #2
 8009c22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009c26:	0082      	lsls	r2, r0, #2
 8009c28:	4640      	mov	r0, r8
 8009c2a:	4649      	mov	r1, r9
 8009c2c:	f7f7 f864 	bl	8000cf8 <__aeabi_uldivmod>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	4b49      	ldr	r3, [pc, #292]	; (8009d5c <UART_SetConfig+0x38c>)
 8009c36:	fba3 2302 	umull	r2, r3, r3, r2
 8009c3a:	095b      	lsrs	r3, r3, #5
 8009c3c:	011e      	lsls	r6, r3, #4
 8009c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c40:	4618      	mov	r0, r3
 8009c42:	f04f 0100 	mov.w	r1, #0
 8009c46:	4602      	mov	r2, r0
 8009c48:	460b      	mov	r3, r1
 8009c4a:	1894      	adds	r4, r2, r2
 8009c4c:	60bc      	str	r4, [r7, #8]
 8009c4e:	415b      	adcs	r3, r3
 8009c50:	60fb      	str	r3, [r7, #12]
 8009c52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c56:	1812      	adds	r2, r2, r0
 8009c58:	eb41 0303 	adc.w	r3, r1, r3
 8009c5c:	f04f 0400 	mov.w	r4, #0
 8009c60:	f04f 0500 	mov.w	r5, #0
 8009c64:	00dd      	lsls	r5, r3, #3
 8009c66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009c6a:	00d4      	lsls	r4, r2, #3
 8009c6c:	4622      	mov	r2, r4
 8009c6e:	462b      	mov	r3, r5
 8009c70:	1814      	adds	r4, r2, r0
 8009c72:	64bc      	str	r4, [r7, #72]	; 0x48
 8009c74:	414b      	adcs	r3, r1
 8009c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f04f 0100 	mov.w	r1, #0
 8009c82:	f04f 0200 	mov.w	r2, #0
 8009c86:	f04f 0300 	mov.w	r3, #0
 8009c8a:	008b      	lsls	r3, r1, #2
 8009c8c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009c90:	0082      	lsls	r2, r0, #2
 8009c92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009c96:	f7f7 f82f 	bl	8000cf8 <__aeabi_uldivmod>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	4b2f      	ldr	r3, [pc, #188]	; (8009d5c <UART_SetConfig+0x38c>)
 8009ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8009ca4:	095b      	lsrs	r3, r3, #5
 8009ca6:	2164      	movs	r1, #100	; 0x64
 8009ca8:	fb01 f303 	mul.w	r3, r1, r3
 8009cac:	1ad3      	subs	r3, r2, r3
 8009cae:	011b      	lsls	r3, r3, #4
 8009cb0:	3332      	adds	r3, #50	; 0x32
 8009cb2:	4a2a      	ldr	r2, [pc, #168]	; (8009d5c <UART_SetConfig+0x38c>)
 8009cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8009cb8:	095b      	lsrs	r3, r3, #5
 8009cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cbe:	441e      	add	r6, r3
 8009cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f04f 0100 	mov.w	r1, #0
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	1894      	adds	r4, r2, r2
 8009cce:	603c      	str	r4, [r7, #0]
 8009cd0:	415b      	adcs	r3, r3
 8009cd2:	607b      	str	r3, [r7, #4]
 8009cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cd8:	1812      	adds	r2, r2, r0
 8009cda:	eb41 0303 	adc.w	r3, r1, r3
 8009cde:	f04f 0400 	mov.w	r4, #0
 8009ce2:	f04f 0500 	mov.w	r5, #0
 8009ce6:	00dd      	lsls	r5, r3, #3
 8009ce8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009cec:	00d4      	lsls	r4, r2, #3
 8009cee:	4622      	mov	r2, r4
 8009cf0:	462b      	mov	r3, r5
 8009cf2:	eb12 0a00 	adds.w	sl, r2, r0
 8009cf6:	eb43 0b01 	adc.w	fp, r3, r1
 8009cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f04f 0100 	mov.w	r1, #0
 8009d04:	f04f 0200 	mov.w	r2, #0
 8009d08:	f04f 0300 	mov.w	r3, #0
 8009d0c:	008b      	lsls	r3, r1, #2
 8009d0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009d12:	0082      	lsls	r2, r0, #2
 8009d14:	4650      	mov	r0, sl
 8009d16:	4659      	mov	r1, fp
 8009d18:	f7f6 ffee 	bl	8000cf8 <__aeabi_uldivmod>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4b0e      	ldr	r3, [pc, #56]	; (8009d5c <UART_SetConfig+0x38c>)
 8009d22:	fba3 1302 	umull	r1, r3, r3, r2
 8009d26:	095b      	lsrs	r3, r3, #5
 8009d28:	2164      	movs	r1, #100	; 0x64
 8009d2a:	fb01 f303 	mul.w	r3, r1, r3
 8009d2e:	1ad3      	subs	r3, r2, r3
 8009d30:	011b      	lsls	r3, r3, #4
 8009d32:	3332      	adds	r3, #50	; 0x32
 8009d34:	4a09      	ldr	r2, [pc, #36]	; (8009d5c <UART_SetConfig+0x38c>)
 8009d36:	fba2 2303 	umull	r2, r3, r2, r3
 8009d3a:	095b      	lsrs	r3, r3, #5
 8009d3c:	f003 020f 	and.w	r2, r3, #15
 8009d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4432      	add	r2, r6
 8009d46:	609a      	str	r2, [r3, #8]
}
 8009d48:	bf00      	nop
 8009d4a:	377c      	adds	r7, #124	; 0x7c
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d52:	bf00      	nop
 8009d54:	40011000 	.word	0x40011000
 8009d58:	40011400 	.word	0x40011400
 8009d5c:	51eb851f 	.word	0x51eb851f

08009d60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d60:	b084      	sub	sp, #16
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b084      	sub	sp, #16
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	f107 001c 	add.w	r0, r7, #28
 8009d6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d122      	bne.n	8009dbe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d105      	bne.n	8009db2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f950 	bl	800a058 <USB_CoreReset>
 8009db8:	4603      	mov	r3, r0
 8009dba:	73fb      	strb	r3, [r7, #15]
 8009dbc:	e01a      	b.n	8009df4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f944 	bl	800a058 <USB_CoreReset>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d106      	bne.n	8009de8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	639a      	str	r2, [r3, #56]	; 0x38
 8009de6:	e005      	b.n	8009df4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d10b      	bne.n	8009e12 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	f043 0206 	orr.w	r2, r3, #6
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	f043 0220 	orr.w	r2, r3, #32
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e1e:	b004      	add	sp, #16
 8009e20:	4770      	bx	lr

08009e22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	f023 0201 	bic.w	r2, r3, #1
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009e50:	2300      	movs	r3, #0
 8009e52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009e60:	78fb      	ldrb	r3, [r7, #3]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d115      	bne.n	8009e92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009e72:	2001      	movs	r0, #1
 8009e74:	f7f9 fb42 	bl	80034fc <HAL_Delay>
      ms++;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f8db 	bl	800a03a <USB_GetMode>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d01e      	beq.n	8009ec8 <USB_SetCurrentMode+0x84>
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2b31      	cmp	r3, #49	; 0x31
 8009e8e:	d9f0      	bls.n	8009e72 <USB_SetCurrentMode+0x2e>
 8009e90:	e01a      	b.n	8009ec8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009e92:	78fb      	ldrb	r3, [r7, #3]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d115      	bne.n	8009ec4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ea4:	2001      	movs	r0, #1
 8009ea6:	f7f9 fb29 	bl	80034fc <HAL_Delay>
      ms++;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	3301      	adds	r3, #1
 8009eae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f8c2 	bl	800a03a <USB_GetMode>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d005      	beq.n	8009ec8 <USB_SetCurrentMode+0x84>
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2b31      	cmp	r3, #49	; 0x31
 8009ec0:	d9f0      	bls.n	8009ea4 <USB_SetCurrentMode+0x60>
 8009ec2:	e001      	b.n	8009ec8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e005      	b.n	8009ed4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2b32      	cmp	r3, #50	; 0x32
 8009ecc:	d101      	bne.n	8009ed2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e000      	b.n	8009ed4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	019b      	lsls	r3, r3, #6
 8009eee:	f043 0220 	orr.w	r2, r3, #32
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	60fb      	str	r3, [r7, #12]
 8009efc:	4a08      	ldr	r2, [pc, #32]	; (8009f20 <USB_FlushTxFifo+0x44>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d901      	bls.n	8009f06 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8009f02:	2303      	movs	r3, #3
 8009f04:	e006      	b.n	8009f14 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	f003 0320 	and.w	r3, r3, #32
 8009f0e:	2b20      	cmp	r3, #32
 8009f10:	d0f1      	beq.n	8009ef6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3714      	adds	r7, #20
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	00030d40 	.word	0x00030d40

08009f24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2210      	movs	r2, #16
 8009f34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	60fb      	str	r3, [r7, #12]
 8009f3c:	4a08      	ldr	r2, [pc, #32]	; (8009f60 <USB_FlushRxFifo+0x3c>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d901      	bls.n	8009f46 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e006      	b.n	8009f54 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	f003 0310 	and.w	r3, r3, #16
 8009f4e:	2b10      	cmp	r3, #16
 8009f50:	d0f1      	beq.n	8009f36 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr
 8009f60:	00030d40 	.word	0x00030d40

08009f64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b08b      	sub	sp, #44	; 0x2c
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009f7a:	88fb      	ldrh	r3, [r7, #6]
 8009f7c:	089b      	lsrs	r3, r3, #2
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009f82:	88fb      	ldrh	r3, [r7, #6]
 8009f84:	f003 0303 	and.w	r3, r3, #3
 8009f88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	623b      	str	r3, [r7, #32]
 8009f8e:	e014      	b.n	8009fba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009faa:	3301      	adds	r3, #1
 8009fac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009fb4:	6a3b      	ldr	r3, [r7, #32]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	623b      	str	r3, [r7, #32]
 8009fba:	6a3a      	ldr	r2, [r7, #32]
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d3e6      	bcc.n	8009f90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009fc2:	8bfb      	ldrh	r3, [r7, #30]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d01e      	beq.n	800a006 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	f107 0310 	add.w	r3, r7, #16
 8009fd8:	6812      	ldr	r2, [r2, #0]
 8009fda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	6a3b      	ldr	r3, [r7, #32]
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	00db      	lsls	r3, r3, #3
 8009fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	701a      	strb	r2, [r3, #0]
      i++;
 8009fee:	6a3b      	ldr	r3, [r7, #32]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	623b      	str	r3, [r7, #32]
      pDest++;
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009ffa:	8bfb      	ldrh	r3, [r7, #30]
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a000:	8bfb      	ldrh	r3, [r7, #30]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1ea      	bne.n	8009fdc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a008:	4618      	mov	r0, r3
 800a00a:	372c      	adds	r7, #44	; 0x2c
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	695b      	ldr	r3, [r3, #20]
 800a020:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	699b      	ldr	r3, [r3, #24]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4013      	ands	r3, r2
 800a02a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a02c:	68fb      	ldr	r3, [r7, #12]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3714      	adds	r7, #20
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a03a:	b480      	push	{r7}
 800a03c:	b083      	sub	sp, #12
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	695b      	ldr	r3, [r3, #20]
 800a046:	f003 0301 	and.w	r3, r3, #1
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	370c      	adds	r7, #12
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
	...

0800a058 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a060:	2300      	movs	r3, #0
 800a062:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	3301      	adds	r3, #1
 800a068:	60fb      	str	r3, [r7, #12]
 800a06a:	4a13      	ldr	r2, [pc, #76]	; (800a0b8 <USB_CoreReset+0x60>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d901      	bls.n	800a074 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800a070:	2303      	movs	r3, #3
 800a072:	e01a      	b.n	800a0aa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	daf3      	bge.n	800a064 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a07c:	2300      	movs	r3, #0
 800a07e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	f043 0201 	orr.w	r2, r3, #1
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	3301      	adds	r3, #1
 800a090:	60fb      	str	r3, [r7, #12]
 800a092:	4a09      	ldr	r2, [pc, #36]	; (800a0b8 <USB_CoreReset+0x60>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d901      	bls.n	800a09c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800a098:	2303      	movs	r3, #3
 800a09a:	e006      	b.n	800a0aa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	f003 0301 	and.w	r3, r3, #1
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d0f1      	beq.n	800a08c <USB_CoreReset+0x34>

  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3714      	adds	r7, #20
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	00030d40 	.word	0x00030d40

0800a0bc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a0bc:	b084      	sub	sp, #16
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b084      	sub	sp, #16
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	f107 001c 	add.w	r0, r7, #28
 800a0ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0d8:	461a      	mov	r2, r3
 800a0da:	2300      	movs	r3, #0
 800a0dc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0fa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d018      	beq.n	800a140 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a110:	2b01      	cmp	r3, #1
 800a112:	d10a      	bne.n	800a12a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	68ba      	ldr	r2, [r7, #8]
 800a11e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a122:	f043 0304 	orr.w	r3, r3, #4
 800a126:	6013      	str	r3, [r2, #0]
 800a128:	e014      	b.n	800a154 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68ba      	ldr	r2, [r7, #8]
 800a134:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a138:	f023 0304 	bic.w	r3, r3, #4
 800a13c:	6013      	str	r3, [r2, #0]
 800a13e:	e009      	b.n	800a154 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a14e:	f023 0304 	bic.w	r3, r3, #4
 800a152:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800a154:	2110      	movs	r1, #16
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f7ff fec0 	bl	8009edc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f7ff fee1 	bl	8009f24 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a162:	2300      	movs	r3, #0
 800a164:	60fb      	str	r3, [r7, #12]
 800a166:	e015      	b.n	800a194 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	015a      	lsls	r2, r3, #5
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	4413      	add	r3, r2
 800a170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a174:	461a      	mov	r2, r3
 800a176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a17a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	015a      	lsls	r2, r3, #5
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	4413      	add	r3, r2
 800a184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a188:	461a      	mov	r2, r3
 800a18a:	2300      	movs	r3, #0
 800a18c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	3301      	adds	r3, #1
 800a192:	60fb      	str	r3, [r7, #12]
 800a194:	6a3b      	ldr	r3, [r7, #32]
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d3e5      	bcc.n	800a168 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1a8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00b      	beq.n	800a1ce <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1bc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a13      	ldr	r2, [pc, #76]	; (800a210 <USB_HostInit+0x154>)
 800a1c2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a13      	ldr	r2, [pc, #76]	; (800a214 <USB_HostInit+0x158>)
 800a1c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a1cc:	e009      	b.n	800a1e2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2280      	movs	r2, #128	; 0x80
 800a1d2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a10      	ldr	r2, [pc, #64]	; (800a218 <USB_HostInit+0x15c>)
 800a1d8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a0f      	ldr	r2, [pc, #60]	; (800a21c <USB_HostInit+0x160>)
 800a1de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d105      	bne.n	800a1f4 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	f043 0210 	orr.w	r2, r3, #16
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	699a      	ldr	r2, [r3, #24]
 800a1f8:	4b09      	ldr	r3, [pc, #36]	; (800a220 <USB_HostInit+0x164>)
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a20c:	b004      	add	sp, #16
 800a20e:	4770      	bx	lr
 800a210:	01000200 	.word	0x01000200
 800a214:	00e00300 	.word	0x00e00300
 800a218:	00600080 	.word	0x00600080
 800a21c:	004000e0 	.word	0x004000e0
 800a220:	a3200008 	.word	0xa3200008

0800a224 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	460b      	mov	r3, r1
 800a22e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a242:	f023 0303 	bic.w	r3, r3, #3
 800a246:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	78fb      	ldrb	r3, [r7, #3]
 800a252:	f003 0303 	and.w	r3, r3, #3
 800a256:	68f9      	ldr	r1, [r7, #12]
 800a258:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a25c:	4313      	orrs	r3, r2
 800a25e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a260:	78fb      	ldrb	r3, [r7, #3]
 800a262:	2b01      	cmp	r3, #1
 800a264:	d107      	bne.n	800a276 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a26c:	461a      	mov	r2, r3
 800a26e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a272:	6053      	str	r3, [r2, #4]
 800a274:	e009      	b.n	800a28a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a276:	78fb      	ldrb	r3, [r7, #3]
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d106      	bne.n	800a28a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a282:	461a      	mov	r2, r3
 800a284:	f241 7370 	movw	r3, #6000	; 0x1770
 800a288:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3714      	adds	r7, #20
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2aa:	695b      	ldr	r3, [r3, #20]
 800a2ac:	b29b      	uxth	r3, r3
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3714      	adds	r7, #20
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b089      	sub	sp, #36	; 0x24
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800a2ca:	78fb      	ldrb	r3, [r7, #3]
 800a2cc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	015a      	lsls	r2, r3, #5
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	4413      	add	r3, r2
 800a2da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	0c9b      	lsrs	r3, r3, #18
 800a2e2:	f003 0303 	and.w	r3, r3, #3
 800a2e6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	015a      	lsls	r2, r3, #5
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	0fdb      	lsrs	r3, r3, #31
 800a2f8:	f003 0301 	and.w	r3, r3, #1
 800a2fc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	f003 0320 	and.w	r3, r3, #32
 800a306:	2b20      	cmp	r3, #32
 800a308:	d104      	bne.n	800a314 <USB_HC_Halt+0x5a>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d101      	bne.n	800a314 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800a310:	2300      	movs	r3, #0
 800a312:	e0e8      	b.n	800a4e6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d002      	beq.n	800a320 <USB_HC_Halt+0x66>
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d173      	bne.n	800a408 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	015a      	lsls	r2, r3, #5
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	4413      	add	r3, r2
 800a328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	697a      	ldr	r2, [r7, #20]
 800a330:	0151      	lsls	r1, r2, #5
 800a332:	69ba      	ldr	r2, [r7, #24]
 800a334:	440a      	add	r2, r1
 800a336:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a33a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a33e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	f003 0320 	and.w	r3, r3, #32
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f040 80cb 	bne.w	800a4e4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a352:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a356:	2b00      	cmp	r3, #0
 800a358:	d143      	bne.n	800a3e2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	015a      	lsls	r2, r3, #5
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	4413      	add	r3, r2
 800a362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	697a      	ldr	r2, [r7, #20]
 800a36a:	0151      	lsls	r1, r2, #5
 800a36c:	69ba      	ldr	r2, [r7, #24]
 800a36e:	440a      	add	r2, r1
 800a370:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a378:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	015a      	lsls	r2, r3, #5
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	4413      	add	r3, r2
 800a382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	0151      	lsls	r1, r2, #5
 800a38c:	69ba      	ldr	r2, [r7, #24]
 800a38e:	440a      	add	r2, r1
 800a390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a398:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	015a      	lsls	r2, r3, #5
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	697a      	ldr	r2, [r7, #20]
 800a3aa:	0151      	lsls	r1, r2, #5
 800a3ac:	69ba      	ldr	r2, [r7, #24]
 800a3ae:	440a      	add	r2, r1
 800a3b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a3b8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	61fb      	str	r3, [r7, #28]
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3c6:	d81d      	bhi.n	800a404 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	015a      	lsls	r2, r3, #5
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3de:	d0ec      	beq.n	800a3ba <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a3e0:	e080      	b.n	800a4e4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	015a      	lsls	r2, r3, #5
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	0151      	lsls	r1, r2, #5
 800a3f4:	69ba      	ldr	r2, [r7, #24]
 800a3f6:	440a      	add	r2, r1
 800a3f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a400:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a402:	e06f      	b.n	800a4e4 <USB_HC_Halt+0x22a>
            break;
 800a404:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a406:	e06d      	b.n	800a4e4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	015a      	lsls	r2, r3, #5
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	4413      	add	r3, r2
 800a410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	0151      	lsls	r1, r2, #5
 800a41a:	69ba      	ldr	r2, [r7, #24]
 800a41c:	440a      	add	r2, r1
 800a41e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a422:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a426:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a434:	2b00      	cmp	r3, #0
 800a436:	d143      	bne.n	800a4c0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	015a      	lsls	r2, r3, #5
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	4413      	add	r3, r2
 800a440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	697a      	ldr	r2, [r7, #20]
 800a448:	0151      	lsls	r1, r2, #5
 800a44a:	69ba      	ldr	r2, [r7, #24]
 800a44c:	440a      	add	r2, r1
 800a44e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a452:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a456:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	0151      	lsls	r1, r2, #5
 800a46a:	69ba      	ldr	r2, [r7, #24]
 800a46c:	440a      	add	r2, r1
 800a46e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a472:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a476:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	015a      	lsls	r2, r3, #5
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	4413      	add	r3, r2
 800a480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	697a      	ldr	r2, [r7, #20]
 800a488:	0151      	lsls	r1, r2, #5
 800a48a:	69ba      	ldr	r2, [r7, #24]
 800a48c:	440a      	add	r2, r1
 800a48e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a492:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a496:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	3301      	adds	r3, #1
 800a49c:	61fb      	str	r3, [r7, #28]
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4a4:	d81d      	bhi.n	800a4e2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	015a      	lsls	r2, r3, #5
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4bc:	d0ec      	beq.n	800a498 <USB_HC_Halt+0x1de>
 800a4be:	e011      	b.n	800a4e4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	015a      	lsls	r2, r3, #5
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	697a      	ldr	r2, [r7, #20]
 800a4d0:	0151      	lsls	r1, r2, #5
 800a4d2:	69ba      	ldr	r2, [r7, #24]
 800a4d4:	440a      	add	r2, r1
 800a4d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a4de:	6013      	str	r3, [r2, #0]
 800a4e0:	e000      	b.n	800a4e4 <USB_HC_Halt+0x22a>
          break;
 800a4e2:	bf00      	nop
    }
  }

  return HAL_OK;
 800a4e4:	2300      	movs	r3, #0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3724      	adds	r7, #36	; 0x24
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
	...

0800a4f4 <__NVIC_SetPriority>:
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	6039      	str	r1, [r7, #0]
 800a4fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a504:	2b00      	cmp	r3, #0
 800a506:	db0a      	blt.n	800a51e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	b2da      	uxtb	r2, r3
 800a50c:	490c      	ldr	r1, [pc, #48]	; (800a540 <__NVIC_SetPriority+0x4c>)
 800a50e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a512:	0112      	lsls	r2, r2, #4
 800a514:	b2d2      	uxtb	r2, r2
 800a516:	440b      	add	r3, r1
 800a518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a51c:	e00a      	b.n	800a534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	b2da      	uxtb	r2, r3
 800a522:	4908      	ldr	r1, [pc, #32]	; (800a544 <__NVIC_SetPriority+0x50>)
 800a524:	79fb      	ldrb	r3, [r7, #7]
 800a526:	f003 030f 	and.w	r3, r3, #15
 800a52a:	3b04      	subs	r3, #4
 800a52c:	0112      	lsls	r2, r2, #4
 800a52e:	b2d2      	uxtb	r2, r2
 800a530:	440b      	add	r3, r1
 800a532:	761a      	strb	r2, [r3, #24]
}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	e000e100 	.word	0xe000e100
 800a544:	e000ed00 	.word	0xe000ed00

0800a548 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a548:	b580      	push	{r7, lr}
 800a54a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a54c:	4b05      	ldr	r3, [pc, #20]	; (800a564 <SysTick_Handler+0x1c>)
 800a54e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a550:	f001 fdf2 	bl	800c138 <xTaskGetSchedulerState>
 800a554:	4603      	mov	r3, r0
 800a556:	2b01      	cmp	r3, #1
 800a558:	d001      	beq.n	800a55e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a55a:	f002 fdc5 	bl	800d0e8 <xPortSysTickHandler>
  }
}
 800a55e:	bf00      	nop
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	e000e010 	.word	0xe000e010

0800a568 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a568:	b580      	push	{r7, lr}
 800a56a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a56c:	2100      	movs	r1, #0
 800a56e:	f06f 0004 	mvn.w	r0, #4
 800a572:	f7ff ffbf 	bl	800a4f4 <__NVIC_SetPriority>
#endif
}
 800a576:	bf00      	nop
 800a578:	bd80      	pop	{r7, pc}
	...

0800a57c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a582:	f3ef 8305 	mrs	r3, IPSR
 800a586:	603b      	str	r3, [r7, #0]
  return(result);
 800a588:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d003      	beq.n	800a596 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a58e:	f06f 0305 	mvn.w	r3, #5
 800a592:	607b      	str	r3, [r7, #4]
 800a594:	e00c      	b.n	800a5b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a596:	4b0a      	ldr	r3, [pc, #40]	; (800a5c0 <osKernelInitialize+0x44>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d105      	bne.n	800a5aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a59e:	4b08      	ldr	r3, [pc, #32]	; (800a5c0 <osKernelInitialize+0x44>)
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	607b      	str	r3, [r7, #4]
 800a5a8:	e002      	b.n	800a5b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a5aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a5b0:	687b      	ldr	r3, [r7, #4]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	370c      	adds	r7, #12
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	20008108 	.word	0x20008108

0800a5c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5ca:	f3ef 8305 	mrs	r3, IPSR
 800a5ce:	603b      	str	r3, [r7, #0]
  return(result);
 800a5d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d003      	beq.n	800a5de <osKernelStart+0x1a>
    stat = osErrorISR;
 800a5d6:	f06f 0305 	mvn.w	r3, #5
 800a5da:	607b      	str	r3, [r7, #4]
 800a5dc:	e010      	b.n	800a600 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a5de:	4b0b      	ldr	r3, [pc, #44]	; (800a60c <osKernelStart+0x48>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d109      	bne.n	800a5fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a5e6:	f7ff ffbf 	bl	800a568 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a5ea:	4b08      	ldr	r3, [pc, #32]	; (800a60c <osKernelStart+0x48>)
 800a5ec:	2202      	movs	r2, #2
 800a5ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a5f0:	f001 f934 	bl	800b85c <vTaskStartScheduler>
      stat = osOK;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	607b      	str	r3, [r7, #4]
 800a5f8:	e002      	b.n	800a600 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a5fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a600:	687b      	ldr	r3, [r7, #4]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20008108 	.word	0x20008108

0800a610 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a610:	b580      	push	{r7, lr}
 800a612:	b08e      	sub	sp, #56	; 0x38
 800a614:	af04      	add	r7, sp, #16
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a61c:	2300      	movs	r3, #0
 800a61e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a620:	f3ef 8305 	mrs	r3, IPSR
 800a624:	617b      	str	r3, [r7, #20]
  return(result);
 800a626:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d17e      	bne.n	800a72a <osThreadNew+0x11a>
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d07b      	beq.n	800a72a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a632:	2380      	movs	r3, #128	; 0x80
 800a634:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a636:	2318      	movs	r3, #24
 800a638:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a63a:	2300      	movs	r3, #0
 800a63c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a63e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a642:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d045      	beq.n	800a6d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d002      	beq.n	800a658 <osThreadNew+0x48>
        name = attr->name;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	699b      	ldr	r3, [r3, #24]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d002      	beq.n	800a666 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	699b      	ldr	r3, [r3, #24]
 800a664:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d008      	beq.n	800a67e <osThreadNew+0x6e>
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	2b38      	cmp	r3, #56	; 0x38
 800a670:	d805      	bhi.n	800a67e <osThreadNew+0x6e>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	f003 0301 	and.w	r3, r3, #1
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d001      	beq.n	800a682 <osThreadNew+0x72>
        return (NULL);
 800a67e:	2300      	movs	r3, #0
 800a680:	e054      	b.n	800a72c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	695b      	ldr	r3, [r3, #20]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d003      	beq.n	800a692 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	695b      	ldr	r3, [r3, #20]
 800a68e:	089b      	lsrs	r3, r3, #2
 800a690:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00e      	beq.n	800a6b8 <osThreadNew+0xa8>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	2b5b      	cmp	r3, #91	; 0x5b
 800a6a0:	d90a      	bls.n	800a6b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d006      	beq.n	800a6b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d002      	beq.n	800a6b8 <osThreadNew+0xa8>
        mem = 1;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	61bb      	str	r3, [r7, #24]
 800a6b6:	e010      	b.n	800a6da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d10c      	bne.n	800a6da <osThreadNew+0xca>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d108      	bne.n	800a6da <osThreadNew+0xca>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d104      	bne.n	800a6da <osThreadNew+0xca>
          mem = 0;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	61bb      	str	r3, [r7, #24]
 800a6d4:	e001      	b.n	800a6da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d110      	bne.n	800a702 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a6e8:	9202      	str	r2, [sp, #8]
 800a6ea:	9301      	str	r3, [sp, #4]
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	6a3a      	ldr	r2, [r7, #32]
 800a6f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f000 feda 	bl	800b4b0 <xTaskCreateStatic>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	613b      	str	r3, [r7, #16]
 800a700:	e013      	b.n	800a72a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d110      	bne.n	800a72a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a708:	6a3b      	ldr	r3, [r7, #32]
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	f107 0310 	add.w	r3, r7, #16
 800a710:	9301      	str	r3, [sp, #4]
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f000 ff25 	bl	800b56a <xTaskCreate>
 800a720:	4603      	mov	r3, r0
 800a722:	2b01      	cmp	r3, #1
 800a724:	d001      	beq.n	800a72a <osThreadNew+0x11a>
            hTask = NULL;
 800a726:	2300      	movs	r3, #0
 800a728:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a72a:	693b      	ldr	r3, [r7, #16]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3728      	adds	r7, #40	; 0x28
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800a734:	b580      	push	{r7, lr}
 800a736:	b088      	sub	sp, #32
 800a738:	af02      	add	r7, sp, #8
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d002      	beq.n	800a74e <osThreadFlagsSet+0x1a>
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	da03      	bge.n	800a756 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800a74e:	f06f 0303 	mvn.w	r3, #3
 800a752:	60fb      	str	r3, [r7, #12]
 800a754:	e035      	b.n	800a7c2 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800a756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a75a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a75c:	f3ef 8305 	mrs	r3, IPSR
 800a760:	613b      	str	r3, [r7, #16]
  return(result);
 800a762:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800a764:	2b00      	cmp	r3, #0
 800a766:	d01f      	beq.n	800a7a8 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800a768:	2300      	movs	r3, #0
 800a76a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800a76c:	f107 0308 	add.w	r3, r7, #8
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	2300      	movs	r3, #0
 800a774:	2201      	movs	r2, #1
 800a776:	6839      	ldr	r1, [r7, #0]
 800a778:	6978      	ldr	r0, [r7, #20]
 800a77a:	f001 fe7b 	bl	800c474 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800a77e:	f107 030c 	add.w	r3, r7, #12
 800a782:	2200      	movs	r2, #0
 800a784:	9200      	str	r2, [sp, #0]
 800a786:	2200      	movs	r2, #0
 800a788:	2100      	movs	r1, #0
 800a78a:	6978      	ldr	r0, [r7, #20]
 800a78c:	f001 fe72 	bl	800c474 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d015      	beq.n	800a7c2 <osThreadFlagsSet+0x8e>
 800a796:	4b0d      	ldr	r3, [pc, #52]	; (800a7cc <osThreadFlagsSet+0x98>)
 800a798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a79c:	601a      	str	r2, [r3, #0]
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	f3bf 8f6f 	isb	sy
 800a7a6:	e00c      	b.n	800a7c2 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	6839      	ldr	r1, [r7, #0]
 800a7ae:	6978      	ldr	r0, [r7, #20]
 800a7b0:	f001 fda8 	bl	800c304 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800a7b4:	f107 030c 	add.w	r3, r7, #12
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	6978      	ldr	r0, [r7, #20]
 800a7be:	f001 fda1 	bl	800c304 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3718      	adds	r7, #24
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	e000ed04 	.word	0xe000ed04

0800a7d0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b08c      	sub	sp, #48	; 0x30
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7dc:	f3ef 8305 	mrs	r3, IPSR
 800a7e0:	617b      	str	r3, [r7, #20]
  return(result);
 800a7e2:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d003      	beq.n	800a7f0 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800a7e8:	f06f 0305 	mvn.w	r3, #5
 800a7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7ee:	e06b      	b.n	800a8c8 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	da03      	bge.n	800a7fe <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800a7f6:	f06f 0303 	mvn.w	r3, #3
 800a7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7fc:	e064      	b.n	800a8c8 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	f003 0302 	and.w	r3, r3, #2
 800a804:	2b00      	cmp	r3, #0
 800a806:	d002      	beq.n	800a80e <osThreadFlagsWait+0x3e>
      clear = 0U;
 800a808:	2300      	movs	r3, #0
 800a80a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a80c:	e001      	b.n	800a812 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800a812:	2300      	movs	r3, #0
 800a814:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800a81a:	f001 f931 	bl	800ba80 <xTaskGetTickCount>
 800a81e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800a820:	f107 0210 	add.w	r2, r7, #16
 800a824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a826:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a828:	2000      	movs	r0, #0
 800a82a:	f001 fd11 	bl	800c250 <xTaskNotifyWait>
 800a82e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	2b01      	cmp	r3, #1
 800a834:	d137      	bne.n	800a8a6 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800a836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	4013      	ands	r3, r2
 800a83c:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a842:	4313      	orrs	r3, r2
 800a844:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	f003 0301 	and.w	r3, r3, #1
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00c      	beq.n	800a86a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a854:	4013      	ands	r3, r2
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d032      	beq.n	800a8c2 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d10f      	bne.n	800a882 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800a862:	f06f 0302 	mvn.w	r3, #2
 800a866:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800a868:	e02e      	b.n	800a8c8 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86e:	4013      	ands	r3, r2
 800a870:	2b00      	cmp	r3, #0
 800a872:	d128      	bne.n	800a8c6 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d103      	bne.n	800a882 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800a87a:	f06f 0302 	mvn.w	r3, #2
 800a87e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800a880:	e022      	b.n	800a8c8 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800a882:	f001 f8fd 	bl	800ba80 <xTaskGetTickCount>
 800a886:	4602      	mov	r2, r0
 800a888:	6a3b      	ldr	r3, [r7, #32]
 800a88a:	1ad3      	subs	r3, r2, r3
 800a88c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800a88e:	69ba      	ldr	r2, [r7, #24]
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a892:	429a      	cmp	r2, r3
 800a894:	d902      	bls.n	800a89c <osThreadFlagsWait+0xcc>
          tout  = 0;
 800a896:	2300      	movs	r3, #0
 800a898:	627b      	str	r3, [r7, #36]	; 0x24
 800a89a:	e00e      	b.n	800a8ba <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800a89c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	1ad3      	subs	r3, r2, r3
 800a8a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a8a4:	e009      	b.n	800a8ba <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d103      	bne.n	800a8b4 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800a8ac:	f06f 0302 	mvn.w	r3, #2
 800a8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8b2:	e002      	b.n	800a8ba <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800a8b4:	f06f 0301 	mvn.w	r3, #1
 800a8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d1af      	bne.n	800a820 <osThreadFlagsWait+0x50>
 800a8c0:	e002      	b.n	800a8c8 <osThreadFlagsWait+0xf8>
            break;
 800a8c2:	bf00      	nop
 800a8c4:	e000      	b.n	800a8c8 <osThreadFlagsWait+0xf8>
            break;
 800a8c6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800a8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3730      	adds	r7, #48	; 0x30
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8da:	f3ef 8305 	mrs	r3, IPSR
 800a8de:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d003      	beq.n	800a8ee <osDelay+0x1c>
    stat = osErrorISR;
 800a8e6:	f06f 0305 	mvn.w	r3, #5
 800a8ea:	60fb      	str	r3, [r7, #12]
 800a8ec:	e007      	b.n	800a8fe <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d002      	beq.n	800a8fe <osDelay+0x2c>
      vTaskDelay(ticks);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 ff7b 	bl	800b7f4 <vTaskDelay>
    }
  }

  return (stat);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
}
 800a900:	4618      	mov	r0, r3
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	4a07      	ldr	r2, [pc, #28]	; (800a934 <vApplicationGetIdleTaskMemory+0x2c>)
 800a918:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	4a06      	ldr	r2, [pc, #24]	; (800a938 <vApplicationGetIdleTaskMemory+0x30>)
 800a91e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2280      	movs	r2, #128	; 0x80
 800a924:	601a      	str	r2, [r3, #0]
}
 800a926:	bf00      	nop
 800a928:	3714      	adds	r7, #20
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	2000810c 	.word	0x2000810c
 800a938:	20008168 	.word	0x20008168

0800a93c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	4a07      	ldr	r2, [pc, #28]	; (800a968 <vApplicationGetTimerTaskMemory+0x2c>)
 800a94c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	4a06      	ldr	r2, [pc, #24]	; (800a96c <vApplicationGetTimerTaskMemory+0x30>)
 800a952:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a95a:	601a      	str	r2, [r3, #0]
}
 800a95c:	bf00      	nop
 800a95e:	3714      	adds	r7, #20
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr
 800a968:	20008368 	.word	0x20008368
 800a96c:	200083c4 	.word	0x200083c4

0800a970 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f103 0208 	add.w	r2, r3, #8
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a988:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f103 0208 	add.w	r2, r3, #8
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f103 0208 	add.w	r2, r3, #8
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a9a4:	bf00      	nop
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a9be:	bf00      	nop
 800a9c0:	370c      	adds	r7, #12
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b085      	sub	sp, #20
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
 800a9d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	689a      	ldr	r2, [r3, #8]
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	1c5a      	adds	r2, r3, #1
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	601a      	str	r2, [r3, #0]
}
 800aa06:	bf00      	nop
 800aa08:	3714      	adds	r7, #20
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr

0800aa12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa12:	b480      	push	{r7}
 800aa14:	b085      	sub	sp, #20
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
 800aa1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa28:	d103      	bne.n	800aa32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	60fb      	str	r3, [r7, #12]
 800aa30:	e00c      	b.n	800aa4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	3308      	adds	r3, #8
 800aa36:	60fb      	str	r3, [r7, #12]
 800aa38:	e002      	b.n	800aa40 <vListInsert+0x2e>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	60fb      	str	r3, [r7, #12]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68ba      	ldr	r2, [r7, #8]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d2f6      	bcs.n	800aa3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	685a      	ldr	r2, [r3, #4]
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	683a      	ldr	r2, [r7, #0]
 800aa5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	683a      	ldr	r2, [r7, #0]
 800aa66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	1c5a      	adds	r2, r3, #1
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	601a      	str	r2, [r3, #0]
}
 800aa78:	bf00      	nop
 800aa7a:	3714      	adds	r7, #20
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	6892      	ldr	r2, [r2, #8]
 800aa9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	6852      	ldr	r2, [r2, #4]
 800aaa4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d103      	bne.n	800aab8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	689a      	ldr	r2, [r3, #8]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	1e5a      	subs	r2, r3, #1
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3714      	adds	r7, #20
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10a      	bne.n	800ab02 <xQueueGenericReset+0x2a>
	__asm volatile
 800aaec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	60bb      	str	r3, [r7, #8]
}
 800aafe:	bf00      	nop
 800ab00:	e7fe      	b.n	800ab00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab02:	f002 fa5f 	bl	800cfc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab0e:	68f9      	ldr	r1, [r7, #12]
 800ab10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab12:	fb01 f303 	mul.w	r3, r1, r3
 800ab16:	441a      	add	r2, r3
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab32:	3b01      	subs	r3, #1
 800ab34:	68f9      	ldr	r1, [r7, #12]
 800ab36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab38:	fb01 f303 	mul.w	r3, r1, r3
 800ab3c:	441a      	add	r2, r3
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	22ff      	movs	r2, #255	; 0xff
 800ab46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	22ff      	movs	r2, #255	; 0xff
 800ab4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d114      	bne.n	800ab82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d01a      	beq.n	800ab96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	3310      	adds	r3, #16
 800ab64:	4618      	mov	r0, r3
 800ab66:	f001 f903 	bl	800bd70 <xTaskRemoveFromEventList>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d012      	beq.n	800ab96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab70:	4b0c      	ldr	r3, [pc, #48]	; (800aba4 <xQueueGenericReset+0xcc>)
 800ab72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab76:	601a      	str	r2, [r3, #0]
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	e009      	b.n	800ab96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	3310      	adds	r3, #16
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7ff fef2 	bl	800a970 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	3324      	adds	r3, #36	; 0x24
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7ff feed 	bl	800a970 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab96:	f002 fa45 	bl	800d024 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab9a:	2301      	movs	r3, #1
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	e000ed04 	.word	0xe000ed04

0800aba8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b08e      	sub	sp, #56	; 0x38
 800abac:	af02      	add	r7, sp, #8
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
 800abb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d10a      	bne.n	800abd2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800abbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc0:	f383 8811 	msr	BASEPRI, r3
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800abce:	bf00      	nop
 800abd0:	e7fe      	b.n	800abd0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d10a      	bne.n	800abee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800abd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abdc:	f383 8811 	msr	BASEPRI, r3
 800abe0:	f3bf 8f6f 	isb	sy
 800abe4:	f3bf 8f4f 	dsb	sy
 800abe8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800abea:	bf00      	nop
 800abec:	e7fe      	b.n	800abec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d002      	beq.n	800abfa <xQueueGenericCreateStatic+0x52>
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d001      	beq.n	800abfe <xQueueGenericCreateStatic+0x56>
 800abfa:	2301      	movs	r3, #1
 800abfc:	e000      	b.n	800ac00 <xQueueGenericCreateStatic+0x58>
 800abfe:	2300      	movs	r3, #0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10a      	bne.n	800ac1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	623b      	str	r3, [r7, #32]
}
 800ac16:	bf00      	nop
 800ac18:	e7fe      	b.n	800ac18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d102      	bne.n	800ac26 <xQueueGenericCreateStatic+0x7e>
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d101      	bne.n	800ac2a <xQueueGenericCreateStatic+0x82>
 800ac26:	2301      	movs	r3, #1
 800ac28:	e000      	b.n	800ac2c <xQueueGenericCreateStatic+0x84>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10a      	bne.n	800ac46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	61fb      	str	r3, [r7, #28]
}
 800ac42:	bf00      	nop
 800ac44:	e7fe      	b.n	800ac44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac46:	2350      	movs	r3, #80	; 0x50
 800ac48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	2b50      	cmp	r3, #80	; 0x50
 800ac4e:	d00a      	beq.n	800ac66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	61bb      	str	r3, [r7, #24]
}
 800ac62:	bf00      	nop
 800ac64:	e7fe      	b.n	800ac64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ac6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d00d      	beq.n	800ac8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ac7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	4613      	mov	r3, r2
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	68b9      	ldr	r1, [r7, #8]
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f000 f805 	bl	800ac98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3730      	adds	r7, #48	; 0x30
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	607a      	str	r2, [r7, #4]
 800aca4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d103      	bne.n	800acb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	69ba      	ldr	r2, [r7, #24]
 800acb0:	601a      	str	r2, [r3, #0]
 800acb2:	e002      	b.n	800acba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800acc6:	2101      	movs	r1, #1
 800acc8:	69b8      	ldr	r0, [r7, #24]
 800acca:	f7ff ff05 	bl	800aad8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	78fa      	ldrb	r2, [r7, #3]
 800acd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800acd6:	bf00      	nop
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
	...

0800ace0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b08e      	sub	sp, #56	; 0x38
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800acee:	2300      	movs	r3, #0
 800acf0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10a      	bne.n	800ad12 <xQueueGenericSend+0x32>
	__asm volatile
 800acfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad0e:	bf00      	nop
 800ad10:	e7fe      	b.n	800ad10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d103      	bne.n	800ad20 <xQueueGenericSend+0x40>
 800ad18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d101      	bne.n	800ad24 <xQueueGenericSend+0x44>
 800ad20:	2301      	movs	r3, #1
 800ad22:	e000      	b.n	800ad26 <xQueueGenericSend+0x46>
 800ad24:	2300      	movs	r3, #0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10a      	bne.n	800ad40 <xQueueGenericSend+0x60>
	__asm volatile
 800ad2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2e:	f383 8811 	msr	BASEPRI, r3
 800ad32:	f3bf 8f6f 	isb	sy
 800ad36:	f3bf 8f4f 	dsb	sy
 800ad3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad3c:	bf00      	nop
 800ad3e:	e7fe      	b.n	800ad3e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d103      	bne.n	800ad4e <xQueueGenericSend+0x6e>
 800ad46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d101      	bne.n	800ad52 <xQueueGenericSend+0x72>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e000      	b.n	800ad54 <xQueueGenericSend+0x74>
 800ad52:	2300      	movs	r3, #0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10a      	bne.n	800ad6e <xQueueGenericSend+0x8e>
	__asm volatile
 800ad58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5c:	f383 8811 	msr	BASEPRI, r3
 800ad60:	f3bf 8f6f 	isb	sy
 800ad64:	f3bf 8f4f 	dsb	sy
 800ad68:	623b      	str	r3, [r7, #32]
}
 800ad6a:	bf00      	nop
 800ad6c:	e7fe      	b.n	800ad6c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad6e:	f001 f9e3 	bl	800c138 <xTaskGetSchedulerState>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d102      	bne.n	800ad7e <xQueueGenericSend+0x9e>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d101      	bne.n	800ad82 <xQueueGenericSend+0xa2>
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e000      	b.n	800ad84 <xQueueGenericSend+0xa4>
 800ad82:	2300      	movs	r3, #0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d10a      	bne.n	800ad9e <xQueueGenericSend+0xbe>
	__asm volatile
 800ad88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8c:	f383 8811 	msr	BASEPRI, r3
 800ad90:	f3bf 8f6f 	isb	sy
 800ad94:	f3bf 8f4f 	dsb	sy
 800ad98:	61fb      	str	r3, [r7, #28]
}
 800ad9a:	bf00      	nop
 800ad9c:	e7fe      	b.n	800ad9c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad9e:	f002 f911 	bl	800cfc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ada6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adaa:	429a      	cmp	r2, r3
 800adac:	d302      	bcc.n	800adb4 <xQueueGenericSend+0xd4>
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	2b02      	cmp	r3, #2
 800adb2:	d129      	bne.n	800ae08 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800adb4:	683a      	ldr	r2, [r7, #0]
 800adb6:	68b9      	ldr	r1, [r7, #8]
 800adb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adba:	f000 fa0b 	bl	800b1d4 <prvCopyDataToQueue>
 800adbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800adc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d010      	beq.n	800adea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adca:	3324      	adds	r3, #36	; 0x24
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 ffcf 	bl	800bd70 <xTaskRemoveFromEventList>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d013      	beq.n	800ae00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800add8:	4b3f      	ldr	r3, [pc, #252]	; (800aed8 <xQueueGenericSend+0x1f8>)
 800adda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adde:	601a      	str	r2, [r3, #0]
 800ade0:	f3bf 8f4f 	dsb	sy
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	e00a      	b.n	800ae00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800adea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adec:	2b00      	cmp	r3, #0
 800adee:	d007      	beq.n	800ae00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800adf0:	4b39      	ldr	r3, [pc, #228]	; (800aed8 <xQueueGenericSend+0x1f8>)
 800adf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adf6:	601a      	str	r2, [r3, #0]
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae00:	f002 f910 	bl	800d024 <vPortExitCritical>
				return pdPASS;
 800ae04:	2301      	movs	r3, #1
 800ae06:	e063      	b.n	800aed0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d103      	bne.n	800ae16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae0e:	f002 f909 	bl	800d024 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae12:	2300      	movs	r3, #0
 800ae14:	e05c      	b.n	800aed0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d106      	bne.n	800ae2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae1c:	f107 0314 	add.w	r3, r7, #20
 800ae20:	4618      	mov	r0, r3
 800ae22:	f001 f82f 	bl	800be84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae26:	2301      	movs	r3, #1
 800ae28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae2a:	f002 f8fb 	bl	800d024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae2e:	f000 fd7b 	bl	800b928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae32:	f002 f8c7 	bl	800cfc4 <vPortEnterCritical>
 800ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae3c:	b25b      	sxtb	r3, r3
 800ae3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae42:	d103      	bne.n	800ae4c <xQueueGenericSend+0x16c>
 800ae44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae46:	2200      	movs	r2, #0
 800ae48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae52:	b25b      	sxtb	r3, r3
 800ae54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae58:	d103      	bne.n	800ae62 <xQueueGenericSend+0x182>
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae62:	f002 f8df 	bl	800d024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae66:	1d3a      	adds	r2, r7, #4
 800ae68:	f107 0314 	add.w	r3, r7, #20
 800ae6c:	4611      	mov	r1, r2
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f001 f81e 	bl	800beb0 <xTaskCheckForTimeOut>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d124      	bne.n	800aec4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae7c:	f000 faa2 	bl	800b3c4 <prvIsQueueFull>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d018      	beq.n	800aeb8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ae86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae88:	3310      	adds	r3, #16
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	4611      	mov	r1, r2
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f000 ff1e 	bl	800bcd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ae94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae96:	f000 fa2d 	bl	800b2f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ae9a:	f000 fd53 	bl	800b944 <xTaskResumeAll>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f47f af7c 	bne.w	800ad9e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aea6:	4b0c      	ldr	r3, [pc, #48]	; (800aed8 <xQueueGenericSend+0x1f8>)
 800aea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeac:	601a      	str	r2, [r3, #0]
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	e772      	b.n	800ad9e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aeb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aeba:	f000 fa1b 	bl	800b2f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aebe:	f000 fd41 	bl	800b944 <xTaskResumeAll>
 800aec2:	e76c      	b.n	800ad9e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aec6:	f000 fa15 	bl	800b2f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aeca:	f000 fd3b 	bl	800b944 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aece:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3738      	adds	r7, #56	; 0x38
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	e000ed04 	.word	0xe000ed04

0800aedc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b090      	sub	sp, #64	; 0x40
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
 800aee8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d10a      	bne.n	800af0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef8:	f383 8811 	msr	BASEPRI, r3
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af06:	bf00      	nop
 800af08:	e7fe      	b.n	800af08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d103      	bne.n	800af18 <xQueueGenericSendFromISR+0x3c>
 800af10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af14:	2b00      	cmp	r3, #0
 800af16:	d101      	bne.n	800af1c <xQueueGenericSendFromISR+0x40>
 800af18:	2301      	movs	r3, #1
 800af1a:	e000      	b.n	800af1e <xQueueGenericSendFromISR+0x42>
 800af1c:	2300      	movs	r3, #0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d10a      	bne.n	800af38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800af22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af26:	f383 8811 	msr	BASEPRI, r3
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af34:	bf00      	nop
 800af36:	e7fe      	b.n	800af36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	d103      	bne.n	800af46 <xQueueGenericSendFromISR+0x6a>
 800af3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af42:	2b01      	cmp	r3, #1
 800af44:	d101      	bne.n	800af4a <xQueueGenericSendFromISR+0x6e>
 800af46:	2301      	movs	r3, #1
 800af48:	e000      	b.n	800af4c <xQueueGenericSendFromISR+0x70>
 800af4a:	2300      	movs	r3, #0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d10a      	bne.n	800af66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800af50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af54:	f383 8811 	msr	BASEPRI, r3
 800af58:	f3bf 8f6f 	isb	sy
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	623b      	str	r3, [r7, #32]
}
 800af62:	bf00      	nop
 800af64:	e7fe      	b.n	800af64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af66:	f002 f90f 	bl	800d188 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800af6a:	f3ef 8211 	mrs	r2, BASEPRI
 800af6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	61fa      	str	r2, [r7, #28]
 800af80:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800af82:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af84:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af8e:	429a      	cmp	r2, r3
 800af90:	d302      	bcc.n	800af98 <xQueueGenericSendFromISR+0xbc>
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	2b02      	cmp	r3, #2
 800af96:	d12f      	bne.n	800aff8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800af98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afa8:	683a      	ldr	r2, [r7, #0]
 800afaa:	68b9      	ldr	r1, [r7, #8]
 800afac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800afae:	f000 f911 	bl	800b1d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800afb2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800afb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afba:	d112      	bne.n	800afe2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d016      	beq.n	800aff2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc6:	3324      	adds	r3, #36	; 0x24
 800afc8:	4618      	mov	r0, r3
 800afca:	f000 fed1 	bl	800bd70 <xTaskRemoveFromEventList>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00e      	beq.n	800aff2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00b      	beq.n	800aff2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2201      	movs	r2, #1
 800afde:	601a      	str	r2, [r3, #0]
 800afe0:	e007      	b.n	800aff2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800afe2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800afe6:	3301      	adds	r3, #1
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	b25a      	sxtb	r2, r3
 800afec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aff2:	2301      	movs	r3, #1
 800aff4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800aff6:	e001      	b.n	800affc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aff8:	2300      	movs	r3, #0
 800affa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800affc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800affe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b006:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3740      	adds	r7, #64	; 0x40
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
	...

0800b014 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b08c      	sub	sp, #48	; 0x30
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b020:	2300      	movs	r3, #0
 800b022:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d10a      	bne.n	800b044 <xQueueReceive+0x30>
	__asm volatile
 800b02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b032:	f383 8811 	msr	BASEPRI, r3
 800b036:	f3bf 8f6f 	isb	sy
 800b03a:	f3bf 8f4f 	dsb	sy
 800b03e:	623b      	str	r3, [r7, #32]
}
 800b040:	bf00      	nop
 800b042:	e7fe      	b.n	800b042 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d103      	bne.n	800b052 <xQueueReceive+0x3e>
 800b04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d101      	bne.n	800b056 <xQueueReceive+0x42>
 800b052:	2301      	movs	r3, #1
 800b054:	e000      	b.n	800b058 <xQueueReceive+0x44>
 800b056:	2300      	movs	r3, #0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d10a      	bne.n	800b072 <xQueueReceive+0x5e>
	__asm volatile
 800b05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b060:	f383 8811 	msr	BASEPRI, r3
 800b064:	f3bf 8f6f 	isb	sy
 800b068:	f3bf 8f4f 	dsb	sy
 800b06c:	61fb      	str	r3, [r7, #28]
}
 800b06e:	bf00      	nop
 800b070:	e7fe      	b.n	800b070 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b072:	f001 f861 	bl	800c138 <xTaskGetSchedulerState>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d102      	bne.n	800b082 <xQueueReceive+0x6e>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d101      	bne.n	800b086 <xQueueReceive+0x72>
 800b082:	2301      	movs	r3, #1
 800b084:	e000      	b.n	800b088 <xQueueReceive+0x74>
 800b086:	2300      	movs	r3, #0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d10a      	bne.n	800b0a2 <xQueueReceive+0x8e>
	__asm volatile
 800b08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b090:	f383 8811 	msr	BASEPRI, r3
 800b094:	f3bf 8f6f 	isb	sy
 800b098:	f3bf 8f4f 	dsb	sy
 800b09c:	61bb      	str	r3, [r7, #24]
}
 800b09e:	bf00      	nop
 800b0a0:	e7fe      	b.n	800b0a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0a2:	f001 ff8f 	bl	800cfc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d01f      	beq.n	800b0f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0b2:	68b9      	ldr	r1, [r7, #8]
 800b0b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0b6:	f000 f8f7 	bl	800b2a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	1e5a      	subs	r2, r3, #1
 800b0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00f      	beq.n	800b0ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0cc:	3310      	adds	r3, #16
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f000 fe4e 	bl	800bd70 <xTaskRemoveFromEventList>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d007      	beq.n	800b0ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b0da:	4b3d      	ldr	r3, [pc, #244]	; (800b1d0 <xQueueReceive+0x1bc>)
 800b0dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0e0:	601a      	str	r2, [r3, #0]
 800b0e2:	f3bf 8f4f 	dsb	sy
 800b0e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b0ea:	f001 ff9b 	bl	800d024 <vPortExitCritical>
				return pdPASS;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e069      	b.n	800b1c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d103      	bne.n	800b100 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b0f8:	f001 ff94 	bl	800d024 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	e062      	b.n	800b1c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b102:	2b00      	cmp	r3, #0
 800b104:	d106      	bne.n	800b114 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b106:	f107 0310 	add.w	r3, r7, #16
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 feba 	bl	800be84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b110:	2301      	movs	r3, #1
 800b112:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b114:	f001 ff86 	bl	800d024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b118:	f000 fc06 	bl	800b928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b11c:	f001 ff52 	bl	800cfc4 <vPortEnterCritical>
 800b120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b122:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b126:	b25b      	sxtb	r3, r3
 800b128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b12c:	d103      	bne.n	800b136 <xQueueReceive+0x122>
 800b12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b130:	2200      	movs	r2, #0
 800b132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b138:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b13c:	b25b      	sxtb	r3, r3
 800b13e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b142:	d103      	bne.n	800b14c <xQueueReceive+0x138>
 800b144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b146:	2200      	movs	r2, #0
 800b148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b14c:	f001 ff6a 	bl	800d024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b150:	1d3a      	adds	r2, r7, #4
 800b152:	f107 0310 	add.w	r3, r7, #16
 800b156:	4611      	mov	r1, r2
 800b158:	4618      	mov	r0, r3
 800b15a:	f000 fea9 	bl	800beb0 <xTaskCheckForTimeOut>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d123      	bne.n	800b1ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b166:	f000 f917 	bl	800b398 <prvIsQueueEmpty>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d017      	beq.n	800b1a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b172:	3324      	adds	r3, #36	; 0x24
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	4611      	mov	r1, r2
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 fda9 	bl	800bcd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b17e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b180:	f000 f8b8 	bl	800b2f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b184:	f000 fbde 	bl	800b944 <xTaskResumeAll>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d189      	bne.n	800b0a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b18e:	4b10      	ldr	r3, [pc, #64]	; (800b1d0 <xQueueReceive+0x1bc>)
 800b190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b194:	601a      	str	r2, [r3, #0]
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	f3bf 8f6f 	isb	sy
 800b19e:	e780      	b.n	800b0a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b1a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1a2:	f000 f8a7 	bl	800b2f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1a6:	f000 fbcd 	bl	800b944 <xTaskResumeAll>
 800b1aa:	e77a      	b.n	800b0a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b1ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1ae:	f000 f8a1 	bl	800b2f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1b2:	f000 fbc7 	bl	800b944 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1b8:	f000 f8ee 	bl	800b398 <prvIsQueueEmpty>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f43f af6f 	beq.w	800b0a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b1c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3730      	adds	r7, #48	; 0x30
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	e000ed04 	.word	0xe000ed04

0800b1d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b086      	sub	sp, #24
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d10d      	bne.n	800b20e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d14d      	bne.n	800b296 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	4618      	mov	r0, r3
 800b200:	f000 ffb8 	bl	800c174 <xTaskPriorityDisinherit>
 800b204:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2200      	movs	r2, #0
 800b20a:	609a      	str	r2, [r3, #8]
 800b20c:	e043      	b.n	800b296 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d119      	bne.n	800b248 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	6858      	ldr	r0, [r3, #4]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21c:	461a      	mov	r2, r3
 800b21e:	68b9      	ldr	r1, [r7, #8]
 800b220:	f00d fdd8 	bl	8018dd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	685a      	ldr	r2, [r3, #4]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b22c:	441a      	add	r2, r3
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	685a      	ldr	r2, [r3, #4]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d32b      	bcc.n	800b296 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	605a      	str	r2, [r3, #4]
 800b246:	e026      	b.n	800b296 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	68d8      	ldr	r0, [r3, #12]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b250:	461a      	mov	r2, r3
 800b252:	68b9      	ldr	r1, [r7, #8]
 800b254:	f00d fdbe 	bl	8018dd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	68da      	ldr	r2, [r3, #12]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b260:	425b      	negs	r3, r3
 800b262:	441a      	add	r2, r3
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	68da      	ldr	r2, [r3, #12]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	429a      	cmp	r2, r3
 800b272:	d207      	bcs.n	800b284 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	689a      	ldr	r2, [r3, #8]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27c:	425b      	negs	r3, r3
 800b27e:	441a      	add	r2, r3
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b02      	cmp	r3, #2
 800b288:	d105      	bne.n	800b296 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d002      	beq.n	800b296 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	3b01      	subs	r3, #1
 800b294:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	1c5a      	adds	r2, r3, #1
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b29e:	697b      	ldr	r3, [r7, #20]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3718      	adds	r7, #24
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d018      	beq.n	800b2ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	68da      	ldr	r2, [r3, #12]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c2:	441a      	add	r2, r3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	68da      	ldr	r2, [r3, #12]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d303      	bcc.n	800b2dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	68d9      	ldr	r1, [r3, #12]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	6838      	ldr	r0, [r7, #0]
 800b2e8:	f00d fd74 	bl	8018dd4 <memcpy>
	}
}
 800b2ec:	bf00      	nop
 800b2ee:	3708      	adds	r7, #8
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b2fc:	f001 fe62 	bl	800cfc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b306:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b308:	e011      	b.n	800b32e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d012      	beq.n	800b338 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	3324      	adds	r3, #36	; 0x24
 800b316:	4618      	mov	r0, r3
 800b318:	f000 fd2a 	bl	800bd70 <xTaskRemoveFromEventList>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b322:	f000 fe27 	bl	800bf74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b326:	7bfb      	ldrb	r3, [r7, #15]
 800b328:	3b01      	subs	r3, #1
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b32e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b332:	2b00      	cmp	r3, #0
 800b334:	dce9      	bgt.n	800b30a <prvUnlockQueue+0x16>
 800b336:	e000      	b.n	800b33a <prvUnlockQueue+0x46>
					break;
 800b338:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	22ff      	movs	r2, #255	; 0xff
 800b33e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b342:	f001 fe6f 	bl	800d024 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b346:	f001 fe3d 	bl	800cfc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b350:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b352:	e011      	b.n	800b378 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d012      	beq.n	800b382 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	3310      	adds	r3, #16
 800b360:	4618      	mov	r0, r3
 800b362:	f000 fd05 	bl	800bd70 <xTaskRemoveFromEventList>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d001      	beq.n	800b370 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b36c:	f000 fe02 	bl	800bf74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b370:	7bbb      	ldrb	r3, [r7, #14]
 800b372:	3b01      	subs	r3, #1
 800b374:	b2db      	uxtb	r3, r3
 800b376:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b378:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	dce9      	bgt.n	800b354 <prvUnlockQueue+0x60>
 800b380:	e000      	b.n	800b384 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b382:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	22ff      	movs	r2, #255	; 0xff
 800b388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b38c:	f001 fe4a 	bl	800d024 <vPortExitCritical>
}
 800b390:	bf00      	nop
 800b392:	3710      	adds	r7, #16
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3a0:	f001 fe10 	bl	800cfc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d102      	bne.n	800b3b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	60fb      	str	r3, [r7, #12]
 800b3b0:	e001      	b.n	800b3b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3b6:	f001 fe35 	bl	800d024 <vPortExitCritical>

	return xReturn;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3cc:	f001 fdfa 	bl	800cfc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d102      	bne.n	800b3e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	60fb      	str	r3, [r7, #12]
 800b3e0:	e001      	b.n	800b3e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3e6:	f001 fe1d 	bl	800d024 <vPortExitCritical>

	return xReturn;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3fe:	2300      	movs	r3, #0
 800b400:	60fb      	str	r3, [r7, #12]
 800b402:	e014      	b.n	800b42e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b404:	4a0f      	ldr	r2, [pc, #60]	; (800b444 <vQueueAddToRegistry+0x50>)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d10b      	bne.n	800b428 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b410:	490c      	ldr	r1, [pc, #48]	; (800b444 <vQueueAddToRegistry+0x50>)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	683a      	ldr	r2, [r7, #0]
 800b416:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b41a:	4a0a      	ldr	r2, [pc, #40]	; (800b444 <vQueueAddToRegistry+0x50>)
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	00db      	lsls	r3, r3, #3
 800b420:	4413      	add	r3, r2
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b426:	e006      	b.n	800b436 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	3301      	adds	r3, #1
 800b42c:	60fb      	str	r3, [r7, #12]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2b07      	cmp	r3, #7
 800b432:	d9e7      	bls.n	800b404 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b434:	bf00      	nop
 800b436:	bf00      	nop
 800b438:	3714      	adds	r7, #20
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	20010e20 	.word	0x20010e20

0800b448 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b086      	sub	sp, #24
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b458:	f001 fdb4 	bl	800cfc4 <vPortEnterCritical>
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b462:	b25b      	sxtb	r3, r3
 800b464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b468:	d103      	bne.n	800b472 <vQueueWaitForMessageRestricted+0x2a>
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b478:	b25b      	sxtb	r3, r3
 800b47a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b47e:	d103      	bne.n	800b488 <vQueueWaitForMessageRestricted+0x40>
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	2200      	movs	r2, #0
 800b484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b488:	f001 fdcc 	bl	800d024 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b490:	2b00      	cmp	r3, #0
 800b492:	d106      	bne.n	800b4a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	3324      	adds	r3, #36	; 0x24
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	68b9      	ldr	r1, [r7, #8]
 800b49c:	4618      	mov	r0, r3
 800b49e:	f000 fc3b 	bl	800bd18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b4a2:	6978      	ldr	r0, [r7, #20]
 800b4a4:	f7ff ff26 	bl	800b2f4 <prvUnlockQueue>
	}
 800b4a8:	bf00      	nop
 800b4aa:	3718      	adds	r7, #24
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b08e      	sub	sp, #56	; 0x38
 800b4b4:	af04      	add	r7, sp, #16
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
 800b4bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10a      	bne.n	800b4da <xTaskCreateStatic+0x2a>
	__asm volatile
 800b4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c8:	f383 8811 	msr	BASEPRI, r3
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	623b      	str	r3, [r7, #32]
}
 800b4d6:	bf00      	nop
 800b4d8:	e7fe      	b.n	800b4d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10a      	bne.n	800b4f6 <xTaskCreateStatic+0x46>
	__asm volatile
 800b4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	61fb      	str	r3, [r7, #28]
}
 800b4f2:	bf00      	nop
 800b4f4:	e7fe      	b.n	800b4f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b4f6:	235c      	movs	r3, #92	; 0x5c
 800b4f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	2b5c      	cmp	r3, #92	; 0x5c
 800b4fe:	d00a      	beq.n	800b516 <xTaskCreateStatic+0x66>
	__asm volatile
 800b500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	61bb      	str	r3, [r7, #24]
}
 800b512:	bf00      	nop
 800b514:	e7fe      	b.n	800b514 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b516:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d01e      	beq.n	800b55c <xTaskCreateStatic+0xac>
 800b51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b520:	2b00      	cmp	r3, #0
 800b522:	d01b      	beq.n	800b55c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b526:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b52c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b530:	2202      	movs	r2, #2
 800b532:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b536:	2300      	movs	r3, #0
 800b538:	9303      	str	r3, [sp, #12]
 800b53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53c:	9302      	str	r3, [sp, #8]
 800b53e:	f107 0314 	add.w	r3, r7, #20
 800b542:	9301      	str	r3, [sp, #4]
 800b544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	68b9      	ldr	r1, [r7, #8]
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	f000 f850 	bl	800b5f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b556:	f000 f8dd 	bl	800b714 <prvAddNewTaskToReadyList>
 800b55a:	e001      	b.n	800b560 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b55c:	2300      	movs	r3, #0
 800b55e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b560:	697b      	ldr	r3, [r7, #20]
	}
 800b562:	4618      	mov	r0, r3
 800b564:	3728      	adds	r7, #40	; 0x28
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b08c      	sub	sp, #48	; 0x30
 800b56e:	af04      	add	r7, sp, #16
 800b570:	60f8      	str	r0, [r7, #12]
 800b572:	60b9      	str	r1, [r7, #8]
 800b574:	603b      	str	r3, [r7, #0]
 800b576:	4613      	mov	r3, r2
 800b578:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b57a:	88fb      	ldrh	r3, [r7, #6]
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	4618      	mov	r0, r3
 800b580:	f001 fe42 	bl	800d208 <pvPortMalloc>
 800b584:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d00e      	beq.n	800b5aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b58c:	205c      	movs	r0, #92	; 0x5c
 800b58e:	f001 fe3b 	bl	800d208 <pvPortMalloc>
 800b592:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d003      	beq.n	800b5a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	697a      	ldr	r2, [r7, #20]
 800b59e:	631a      	str	r2, [r3, #48]	; 0x30
 800b5a0:	e005      	b.n	800b5ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5a2:	6978      	ldr	r0, [r7, #20]
 800b5a4:	f001 fefc 	bl	800d3a0 <vPortFree>
 800b5a8:	e001      	b.n	800b5ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d017      	beq.n	800b5e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b5bc:	88fa      	ldrh	r2, [r7, #6]
 800b5be:	2300      	movs	r3, #0
 800b5c0:	9303      	str	r3, [sp, #12]
 800b5c2:	69fb      	ldr	r3, [r7, #28]
 800b5c4:	9302      	str	r3, [sp, #8]
 800b5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c8:	9301      	str	r3, [sp, #4]
 800b5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	68b9      	ldr	r1, [r7, #8]
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f000 f80e 	bl	800b5f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5d8:	69f8      	ldr	r0, [r7, #28]
 800b5da:	f000 f89b 	bl	800b714 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	61bb      	str	r3, [r7, #24]
 800b5e2:	e002      	b.n	800b5ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b5e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b5ea:	69bb      	ldr	r3, [r7, #24]
	}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3720      	adds	r7, #32
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b088      	sub	sp, #32
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
 800b600:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b604:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	461a      	mov	r2, r3
 800b60c:	21a5      	movs	r1, #165	; 0xa5
 800b60e:	f00d fc09 	bl	8018e24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b61c:	3b01      	subs	r3, #1
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4413      	add	r3, r2
 800b622:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	f023 0307 	bic.w	r3, r3, #7
 800b62a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b62c:	69bb      	ldr	r3, [r7, #24]
 800b62e:	f003 0307 	and.w	r3, r3, #7
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00a      	beq.n	800b64c <prvInitialiseNewTask+0x58>
	__asm volatile
 800b636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63a:	f383 8811 	msr	BASEPRI, r3
 800b63e:	f3bf 8f6f 	isb	sy
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	617b      	str	r3, [r7, #20]
}
 800b648:	bf00      	nop
 800b64a:	e7fe      	b.n	800b64a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d01f      	beq.n	800b692 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b652:	2300      	movs	r3, #0
 800b654:	61fb      	str	r3, [r7, #28]
 800b656:	e012      	b.n	800b67e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b658:	68ba      	ldr	r2, [r7, #8]
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	4413      	add	r3, r2
 800b65e:	7819      	ldrb	r1, [r3, #0]
 800b660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	4413      	add	r3, r2
 800b666:	3334      	adds	r3, #52	; 0x34
 800b668:	460a      	mov	r2, r1
 800b66a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b66c:	68ba      	ldr	r2, [r7, #8]
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	4413      	add	r3, r2
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d006      	beq.n	800b686 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	3301      	adds	r3, #1
 800b67c:	61fb      	str	r3, [r7, #28]
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	2b0f      	cmp	r3, #15
 800b682:	d9e9      	bls.n	800b658 <prvInitialiseNewTask+0x64>
 800b684:	e000      	b.n	800b688 <prvInitialiseNewTask+0x94>
			{
				break;
 800b686:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68a:	2200      	movs	r2, #0
 800b68c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b690:	e003      	b.n	800b69a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b694:	2200      	movs	r2, #0
 800b696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69c:	2b37      	cmp	r3, #55	; 0x37
 800b69e:	d901      	bls.n	800b6a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6a0:	2337      	movs	r3, #55	; 0x37
 800b6a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b8:	3304      	adds	r3, #4
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7ff f978 	bl	800a9b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c2:	3318      	adds	r3, #24
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7ff f973 	bl	800a9b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b6ee:	683a      	ldr	r2, [r7, #0]
 800b6f0:	68f9      	ldr	r1, [r7, #12]
 800b6f2:	69b8      	ldr	r0, [r7, #24]
 800b6f4:	f001 fb3c 	bl	800cd70 <pxPortInitialiseStack>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b708:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b70a:	bf00      	nop
 800b70c:	3720      	adds	r7, #32
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
	...

0800b714 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b71c:	f001 fc52 	bl	800cfc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b720:	4b2d      	ldr	r3, [pc, #180]	; (800b7d8 <prvAddNewTaskToReadyList+0xc4>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	3301      	adds	r3, #1
 800b726:	4a2c      	ldr	r2, [pc, #176]	; (800b7d8 <prvAddNewTaskToReadyList+0xc4>)
 800b728:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b72a:	4b2c      	ldr	r3, [pc, #176]	; (800b7dc <prvAddNewTaskToReadyList+0xc8>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d109      	bne.n	800b746 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b732:	4a2a      	ldr	r2, [pc, #168]	; (800b7dc <prvAddNewTaskToReadyList+0xc8>)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b738:	4b27      	ldr	r3, [pc, #156]	; (800b7d8 <prvAddNewTaskToReadyList+0xc4>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d110      	bne.n	800b762 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b740:	f000 fc3c 	bl	800bfbc <prvInitialiseTaskLists>
 800b744:	e00d      	b.n	800b762 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b746:	4b26      	ldr	r3, [pc, #152]	; (800b7e0 <prvAddNewTaskToReadyList+0xcc>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d109      	bne.n	800b762 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b74e:	4b23      	ldr	r3, [pc, #140]	; (800b7dc <prvAddNewTaskToReadyList+0xc8>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b758:	429a      	cmp	r2, r3
 800b75a:	d802      	bhi.n	800b762 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b75c:	4a1f      	ldr	r2, [pc, #124]	; (800b7dc <prvAddNewTaskToReadyList+0xc8>)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b762:	4b20      	ldr	r3, [pc, #128]	; (800b7e4 <prvAddNewTaskToReadyList+0xd0>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	3301      	adds	r3, #1
 800b768:	4a1e      	ldr	r2, [pc, #120]	; (800b7e4 <prvAddNewTaskToReadyList+0xd0>)
 800b76a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b76c:	4b1d      	ldr	r3, [pc, #116]	; (800b7e4 <prvAddNewTaskToReadyList+0xd0>)
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b778:	4b1b      	ldr	r3, [pc, #108]	; (800b7e8 <prvAddNewTaskToReadyList+0xd4>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d903      	bls.n	800b788 <prvAddNewTaskToReadyList+0x74>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b784:	4a18      	ldr	r2, [pc, #96]	; (800b7e8 <prvAddNewTaskToReadyList+0xd4>)
 800b786:	6013      	str	r3, [r2, #0]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b78c:	4613      	mov	r3, r2
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	4413      	add	r3, r2
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	4a15      	ldr	r2, [pc, #84]	; (800b7ec <prvAddNewTaskToReadyList+0xd8>)
 800b796:	441a      	add	r2, r3
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	3304      	adds	r3, #4
 800b79c:	4619      	mov	r1, r3
 800b79e:	4610      	mov	r0, r2
 800b7a0:	f7ff f913 	bl	800a9ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b7a4:	f001 fc3e 	bl	800d024 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b7a8:	4b0d      	ldr	r3, [pc, #52]	; (800b7e0 <prvAddNewTaskToReadyList+0xcc>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00e      	beq.n	800b7ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b7b0:	4b0a      	ldr	r3, [pc, #40]	; (800b7dc <prvAddNewTaskToReadyList+0xc8>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d207      	bcs.n	800b7ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b7be:	4b0c      	ldr	r3, [pc, #48]	; (800b7f0 <prvAddNewTaskToReadyList+0xdc>)
 800b7c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7c4:	601a      	str	r2, [r3, #0]
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7ce:	bf00      	nop
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	20008c98 	.word	0x20008c98
 800b7dc:	200087c4 	.word	0x200087c4
 800b7e0:	20008ca4 	.word	0x20008ca4
 800b7e4:	20008cb4 	.word	0x20008cb4
 800b7e8:	20008ca0 	.word	0x20008ca0
 800b7ec:	200087c8 	.word	0x200087c8
 800b7f0:	e000ed04 	.word	0xe000ed04

0800b7f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d017      	beq.n	800b836 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b806:	4b13      	ldr	r3, [pc, #76]	; (800b854 <vTaskDelay+0x60>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00a      	beq.n	800b824 <vTaskDelay+0x30>
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	60bb      	str	r3, [r7, #8]
}
 800b820:	bf00      	nop
 800b822:	e7fe      	b.n	800b822 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b824:	f000 f880 	bl	800b928 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b828:	2100      	movs	r1, #0
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 fefe 	bl	800c62c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b830:	f000 f888 	bl	800b944 <xTaskResumeAll>
 800b834:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d107      	bne.n	800b84c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b83c:	4b06      	ldr	r3, [pc, #24]	; (800b858 <vTaskDelay+0x64>)
 800b83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b842:	601a      	str	r2, [r3, #0]
 800b844:	f3bf 8f4f 	dsb	sy
 800b848:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b84c:	bf00      	nop
 800b84e:	3710      	adds	r7, #16
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	20008cc0 	.word	0x20008cc0
 800b858:	e000ed04 	.word	0xe000ed04

0800b85c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b08a      	sub	sp, #40	; 0x28
 800b860:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b862:	2300      	movs	r3, #0
 800b864:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b866:	2300      	movs	r3, #0
 800b868:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b86a:	463a      	mov	r2, r7
 800b86c:	1d39      	adds	r1, r7, #4
 800b86e:	f107 0308 	add.w	r3, r7, #8
 800b872:	4618      	mov	r0, r3
 800b874:	f7ff f848 	bl	800a908 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b878:	6839      	ldr	r1, [r7, #0]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	9202      	str	r2, [sp, #8]
 800b880:	9301      	str	r3, [sp, #4]
 800b882:	2300      	movs	r3, #0
 800b884:	9300      	str	r3, [sp, #0]
 800b886:	2300      	movs	r3, #0
 800b888:	460a      	mov	r2, r1
 800b88a:	4921      	ldr	r1, [pc, #132]	; (800b910 <vTaskStartScheduler+0xb4>)
 800b88c:	4821      	ldr	r0, [pc, #132]	; (800b914 <vTaskStartScheduler+0xb8>)
 800b88e:	f7ff fe0f 	bl	800b4b0 <xTaskCreateStatic>
 800b892:	4603      	mov	r3, r0
 800b894:	4a20      	ldr	r2, [pc, #128]	; (800b918 <vTaskStartScheduler+0xbc>)
 800b896:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b898:	4b1f      	ldr	r3, [pc, #124]	; (800b918 <vTaskStartScheduler+0xbc>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d002      	beq.n	800b8a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	617b      	str	r3, [r7, #20]
 800b8a4:	e001      	b.n	800b8aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d102      	bne.n	800b8b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b8b0:	f000 ff10 	bl	800c6d4 <xTimerCreateTimerTask>
 800b8b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d116      	bne.n	800b8ea <vTaskStartScheduler+0x8e>
	__asm volatile
 800b8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c0:	f383 8811 	msr	BASEPRI, r3
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	613b      	str	r3, [r7, #16]
}
 800b8ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b8d0:	4b12      	ldr	r3, [pc, #72]	; (800b91c <vTaskStartScheduler+0xc0>)
 800b8d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b8d8:	4b11      	ldr	r3, [pc, #68]	; (800b920 <vTaskStartScheduler+0xc4>)
 800b8da:	2201      	movs	r2, #1
 800b8dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b8de:	4b11      	ldr	r3, [pc, #68]	; (800b924 <vTaskStartScheduler+0xc8>)
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b8e4:	f001 facc 	bl	800ce80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b8e8:	e00e      	b.n	800b908 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8f0:	d10a      	bne.n	800b908 <vTaskStartScheduler+0xac>
	__asm volatile
 800b8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f6:	f383 8811 	msr	BASEPRI, r3
 800b8fa:	f3bf 8f6f 	isb	sy
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	60fb      	str	r3, [r7, #12]
}
 800b904:	bf00      	nop
 800b906:	e7fe      	b.n	800b906 <vTaskStartScheduler+0xaa>
}
 800b908:	bf00      	nop
 800b90a:	3718      	adds	r7, #24
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	0801d2bc 	.word	0x0801d2bc
 800b914:	0800bf8d 	.word	0x0800bf8d
 800b918:	20008cbc 	.word	0x20008cbc
 800b91c:	20008cb8 	.word	0x20008cb8
 800b920:	20008ca4 	.word	0x20008ca4
 800b924:	20008c9c 	.word	0x20008c9c

0800b928 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b928:	b480      	push	{r7}
 800b92a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b92c:	4b04      	ldr	r3, [pc, #16]	; (800b940 <vTaskSuspendAll+0x18>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	3301      	adds	r3, #1
 800b932:	4a03      	ldr	r2, [pc, #12]	; (800b940 <vTaskSuspendAll+0x18>)
 800b934:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b936:	bf00      	nop
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr
 800b940:	20008cc0 	.word	0x20008cc0

0800b944 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b94a:	2300      	movs	r3, #0
 800b94c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b94e:	2300      	movs	r3, #0
 800b950:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b952:	4b42      	ldr	r3, [pc, #264]	; (800ba5c <xTaskResumeAll+0x118>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d10a      	bne.n	800b970 <xTaskResumeAll+0x2c>
	__asm volatile
 800b95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95e:	f383 8811 	msr	BASEPRI, r3
 800b962:	f3bf 8f6f 	isb	sy
 800b966:	f3bf 8f4f 	dsb	sy
 800b96a:	603b      	str	r3, [r7, #0]
}
 800b96c:	bf00      	nop
 800b96e:	e7fe      	b.n	800b96e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b970:	f001 fb28 	bl	800cfc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b974:	4b39      	ldr	r3, [pc, #228]	; (800ba5c <xTaskResumeAll+0x118>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	3b01      	subs	r3, #1
 800b97a:	4a38      	ldr	r2, [pc, #224]	; (800ba5c <xTaskResumeAll+0x118>)
 800b97c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b97e:	4b37      	ldr	r3, [pc, #220]	; (800ba5c <xTaskResumeAll+0x118>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d162      	bne.n	800ba4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b986:	4b36      	ldr	r3, [pc, #216]	; (800ba60 <xTaskResumeAll+0x11c>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d05e      	beq.n	800ba4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b98e:	e02f      	b.n	800b9f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b990:	4b34      	ldr	r3, [pc, #208]	; (800ba64 <xTaskResumeAll+0x120>)
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	3318      	adds	r3, #24
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7ff f871 	bl	800aa84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	3304      	adds	r3, #4
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7ff f86c 	bl	800aa84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b0:	4b2d      	ldr	r3, [pc, #180]	; (800ba68 <xTaskResumeAll+0x124>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d903      	bls.n	800b9c0 <xTaskResumeAll+0x7c>
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9bc:	4a2a      	ldr	r2, [pc, #168]	; (800ba68 <xTaskResumeAll+0x124>)
 800b9be:	6013      	str	r3, [r2, #0]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	4413      	add	r3, r2
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	4a27      	ldr	r2, [pc, #156]	; (800ba6c <xTaskResumeAll+0x128>)
 800b9ce:	441a      	add	r2, r3
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	3304      	adds	r3, #4
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	4610      	mov	r0, r2
 800b9d8:	f7fe fff7 	bl	800a9ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9e0:	4b23      	ldr	r3, [pc, #140]	; (800ba70 <xTaskResumeAll+0x12c>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d302      	bcc.n	800b9f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b9ea:	4b22      	ldr	r3, [pc, #136]	; (800ba74 <xTaskResumeAll+0x130>)
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9f0:	4b1c      	ldr	r3, [pc, #112]	; (800ba64 <xTaskResumeAll+0x120>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1cb      	bne.n	800b990 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b9fe:	f000 fb7b 	bl	800c0f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ba02:	4b1d      	ldr	r3, [pc, #116]	; (800ba78 <xTaskResumeAll+0x134>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d010      	beq.n	800ba30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba0e:	f000 f847 	bl	800baa0 <xTaskIncrementTick>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ba18:	4b16      	ldr	r3, [pc, #88]	; (800ba74 <xTaskResumeAll+0x130>)
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	3b01      	subs	r3, #1
 800ba22:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1f1      	bne.n	800ba0e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ba2a:	4b13      	ldr	r3, [pc, #76]	; (800ba78 <xTaskResumeAll+0x134>)
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba30:	4b10      	ldr	r3, [pc, #64]	; (800ba74 <xTaskResumeAll+0x130>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d009      	beq.n	800ba4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba3c:	4b0f      	ldr	r3, [pc, #60]	; (800ba7c <xTaskResumeAll+0x138>)
 800ba3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba42:	601a      	str	r2, [r3, #0]
 800ba44:	f3bf 8f4f 	dsb	sy
 800ba48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba4c:	f001 faea 	bl	800d024 <vPortExitCritical>

	return xAlreadyYielded;
 800ba50:	68bb      	ldr	r3, [r7, #8]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	20008cc0 	.word	0x20008cc0
 800ba60:	20008c98 	.word	0x20008c98
 800ba64:	20008c58 	.word	0x20008c58
 800ba68:	20008ca0 	.word	0x20008ca0
 800ba6c:	200087c8 	.word	0x200087c8
 800ba70:	200087c4 	.word	0x200087c4
 800ba74:	20008cac 	.word	0x20008cac
 800ba78:	20008ca8 	.word	0x20008ca8
 800ba7c:	e000ed04 	.word	0xe000ed04

0800ba80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ba86:	4b05      	ldr	r3, [pc, #20]	; (800ba9c <xTaskGetTickCount+0x1c>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ba8c:	687b      	ldr	r3, [r7, #4]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	370c      	adds	r7, #12
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	20008c9c 	.word	0x20008c9c

0800baa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b086      	sub	sp, #24
 800baa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800baa6:	2300      	movs	r3, #0
 800baa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800baaa:	4b4f      	ldr	r3, [pc, #316]	; (800bbe8 <xTaskIncrementTick+0x148>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f040 808f 	bne.w	800bbd2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bab4:	4b4d      	ldr	r3, [pc, #308]	; (800bbec <xTaskIncrementTick+0x14c>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	3301      	adds	r3, #1
 800baba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800babc:	4a4b      	ldr	r2, [pc, #300]	; (800bbec <xTaskIncrementTick+0x14c>)
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d120      	bne.n	800bb0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bac8:	4b49      	ldr	r3, [pc, #292]	; (800bbf0 <xTaskIncrementTick+0x150>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d00a      	beq.n	800bae8 <xTaskIncrementTick+0x48>
	__asm volatile
 800bad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	603b      	str	r3, [r7, #0]
}
 800bae4:	bf00      	nop
 800bae6:	e7fe      	b.n	800bae6 <xTaskIncrementTick+0x46>
 800bae8:	4b41      	ldr	r3, [pc, #260]	; (800bbf0 <xTaskIncrementTick+0x150>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	60fb      	str	r3, [r7, #12]
 800baee:	4b41      	ldr	r3, [pc, #260]	; (800bbf4 <xTaskIncrementTick+0x154>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a3f      	ldr	r2, [pc, #252]	; (800bbf0 <xTaskIncrementTick+0x150>)
 800baf4:	6013      	str	r3, [r2, #0]
 800baf6:	4a3f      	ldr	r2, [pc, #252]	; (800bbf4 <xTaskIncrementTick+0x154>)
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6013      	str	r3, [r2, #0]
 800bafc:	4b3e      	ldr	r3, [pc, #248]	; (800bbf8 <xTaskIncrementTick+0x158>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	3301      	adds	r3, #1
 800bb02:	4a3d      	ldr	r2, [pc, #244]	; (800bbf8 <xTaskIncrementTick+0x158>)
 800bb04:	6013      	str	r3, [r2, #0]
 800bb06:	f000 faf7 	bl	800c0f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb0a:	4b3c      	ldr	r3, [pc, #240]	; (800bbfc <xTaskIncrementTick+0x15c>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	693a      	ldr	r2, [r7, #16]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d349      	bcc.n	800bba8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb14:	4b36      	ldr	r3, [pc, #216]	; (800bbf0 <xTaskIncrementTick+0x150>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d104      	bne.n	800bb28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb1e:	4b37      	ldr	r3, [pc, #220]	; (800bbfc <xTaskIncrementTick+0x15c>)
 800bb20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb24:	601a      	str	r2, [r3, #0]
					break;
 800bb26:	e03f      	b.n	800bba8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb28:	4b31      	ldr	r3, [pc, #196]	; (800bbf0 <xTaskIncrementTick+0x150>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb38:	693a      	ldr	r2, [r7, #16]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d203      	bcs.n	800bb48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb40:	4a2e      	ldr	r2, [pc, #184]	; (800bbfc <xTaskIncrementTick+0x15c>)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb46:	e02f      	b.n	800bba8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fe ff99 	bl	800aa84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d004      	beq.n	800bb64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	3318      	adds	r3, #24
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7fe ff90 	bl	800aa84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb68:	4b25      	ldr	r3, [pc, #148]	; (800bc00 <xTaskIncrementTick+0x160>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d903      	bls.n	800bb78 <xTaskIncrementTick+0xd8>
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb74:	4a22      	ldr	r2, [pc, #136]	; (800bc00 <xTaskIncrementTick+0x160>)
 800bb76:	6013      	str	r3, [r2, #0]
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	4413      	add	r3, r2
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	4a1f      	ldr	r2, [pc, #124]	; (800bc04 <xTaskIncrementTick+0x164>)
 800bb86:	441a      	add	r2, r3
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	3304      	adds	r3, #4
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	4610      	mov	r0, r2
 800bb90:	f7fe ff1b 	bl	800a9ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb98:	4b1b      	ldr	r3, [pc, #108]	; (800bc08 <xTaskIncrementTick+0x168>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d3b8      	bcc.n	800bb14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bba2:	2301      	movs	r3, #1
 800bba4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bba6:	e7b5      	b.n	800bb14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bba8:	4b17      	ldr	r3, [pc, #92]	; (800bc08 <xTaskIncrementTick+0x168>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbae:	4915      	ldr	r1, [pc, #84]	; (800bc04 <xTaskIncrementTick+0x164>)
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	4413      	add	r3, r2
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	440b      	add	r3, r1
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d901      	bls.n	800bbc4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bbc4:	4b11      	ldr	r3, [pc, #68]	; (800bc0c <xTaskIncrementTick+0x16c>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d007      	beq.n	800bbdc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	617b      	str	r3, [r7, #20]
 800bbd0:	e004      	b.n	800bbdc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bbd2:	4b0f      	ldr	r3, [pc, #60]	; (800bc10 <xTaskIncrementTick+0x170>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	4a0d      	ldr	r2, [pc, #52]	; (800bc10 <xTaskIncrementTick+0x170>)
 800bbda:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bbdc:	697b      	ldr	r3, [r7, #20]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3718      	adds	r7, #24
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	20008cc0 	.word	0x20008cc0
 800bbec:	20008c9c 	.word	0x20008c9c
 800bbf0:	20008c50 	.word	0x20008c50
 800bbf4:	20008c54 	.word	0x20008c54
 800bbf8:	20008cb0 	.word	0x20008cb0
 800bbfc:	20008cb8 	.word	0x20008cb8
 800bc00:	20008ca0 	.word	0x20008ca0
 800bc04:	200087c8 	.word	0x200087c8
 800bc08:	200087c4 	.word	0x200087c4
 800bc0c:	20008cac 	.word	0x20008cac
 800bc10:	20008ca8 	.word	0x20008ca8

0800bc14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc1a:	4b28      	ldr	r3, [pc, #160]	; (800bcbc <vTaskSwitchContext+0xa8>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d003      	beq.n	800bc2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc22:	4b27      	ldr	r3, [pc, #156]	; (800bcc0 <vTaskSwitchContext+0xac>)
 800bc24:	2201      	movs	r2, #1
 800bc26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc28:	e041      	b.n	800bcae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bc2a:	4b25      	ldr	r3, [pc, #148]	; (800bcc0 <vTaskSwitchContext+0xac>)
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc30:	4b24      	ldr	r3, [pc, #144]	; (800bcc4 <vTaskSwitchContext+0xb0>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	60fb      	str	r3, [r7, #12]
 800bc36:	e010      	b.n	800bc5a <vTaskSwitchContext+0x46>
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d10a      	bne.n	800bc54 <vTaskSwitchContext+0x40>
	__asm volatile
 800bc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc42:	f383 8811 	msr	BASEPRI, r3
 800bc46:	f3bf 8f6f 	isb	sy
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	607b      	str	r3, [r7, #4]
}
 800bc50:	bf00      	nop
 800bc52:	e7fe      	b.n	800bc52 <vTaskSwitchContext+0x3e>
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	3b01      	subs	r3, #1
 800bc58:	60fb      	str	r3, [r7, #12]
 800bc5a:	491b      	ldr	r1, [pc, #108]	; (800bcc8 <vTaskSwitchContext+0xb4>)
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	4413      	add	r3, r2
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	440b      	add	r3, r1
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d0e4      	beq.n	800bc38 <vTaskSwitchContext+0x24>
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	4613      	mov	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4413      	add	r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	4a13      	ldr	r2, [pc, #76]	; (800bcc8 <vTaskSwitchContext+0xb4>)
 800bc7a:	4413      	add	r3, r2
 800bc7c:	60bb      	str	r3, [r7, #8]
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	685a      	ldr	r2, [r3, #4]
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	605a      	str	r2, [r3, #4]
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	685a      	ldr	r2, [r3, #4]
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	3308      	adds	r3, #8
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d104      	bne.n	800bc9e <vTaskSwitchContext+0x8a>
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	685a      	ldr	r2, [r3, #4]
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	605a      	str	r2, [r3, #4]
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	4a09      	ldr	r2, [pc, #36]	; (800bccc <vTaskSwitchContext+0xb8>)
 800bca6:	6013      	str	r3, [r2, #0]
 800bca8:	4a06      	ldr	r2, [pc, #24]	; (800bcc4 <vTaskSwitchContext+0xb0>)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	6013      	str	r3, [r2, #0]
}
 800bcae:	bf00      	nop
 800bcb0:	3714      	adds	r7, #20
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr
 800bcba:	bf00      	nop
 800bcbc:	20008cc0 	.word	0x20008cc0
 800bcc0:	20008cac 	.word	0x20008cac
 800bcc4:	20008ca0 	.word	0x20008ca0
 800bcc8:	200087c8 	.word	0x200087c8
 800bccc:	200087c4 	.word	0x200087c4

0800bcd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10a      	bne.n	800bcf6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	60fb      	str	r3, [r7, #12]
}
 800bcf2:	bf00      	nop
 800bcf4:	e7fe      	b.n	800bcf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bcf6:	4b07      	ldr	r3, [pc, #28]	; (800bd14 <vTaskPlaceOnEventList+0x44>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	3318      	adds	r3, #24
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f7fe fe87 	bl	800aa12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd04:	2101      	movs	r1, #1
 800bd06:	6838      	ldr	r0, [r7, #0]
 800bd08:	f000 fc90 	bl	800c62c <prvAddCurrentTaskToDelayedList>
}
 800bd0c:	bf00      	nop
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	200087c4 	.word	0x200087c4

0800bd18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b086      	sub	sp, #24
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10a      	bne.n	800bd40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2e:	f383 8811 	msr	BASEPRI, r3
 800bd32:	f3bf 8f6f 	isb	sy
 800bd36:	f3bf 8f4f 	dsb	sy
 800bd3a:	617b      	str	r3, [r7, #20]
}
 800bd3c:	bf00      	nop
 800bd3e:	e7fe      	b.n	800bd3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd40:	4b0a      	ldr	r3, [pc, #40]	; (800bd6c <vTaskPlaceOnEventListRestricted+0x54>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	3318      	adds	r3, #24
 800bd46:	4619      	mov	r1, r3
 800bd48:	68f8      	ldr	r0, [r7, #12]
 800bd4a:	f7fe fe3e 	bl	800a9ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d002      	beq.n	800bd5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bd54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd5a:	6879      	ldr	r1, [r7, #4]
 800bd5c:	68b8      	ldr	r0, [r7, #8]
 800bd5e:	f000 fc65 	bl	800c62c <prvAddCurrentTaskToDelayedList>
	}
 800bd62:	bf00      	nop
 800bd64:	3718      	adds	r7, #24
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	200087c4 	.word	0x200087c4

0800bd70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d10a      	bne.n	800bd9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8a:	f383 8811 	msr	BASEPRI, r3
 800bd8e:	f3bf 8f6f 	isb	sy
 800bd92:	f3bf 8f4f 	dsb	sy
 800bd96:	60fb      	str	r3, [r7, #12]
}
 800bd98:	bf00      	nop
 800bd9a:	e7fe      	b.n	800bd9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	3318      	adds	r3, #24
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7fe fe6f 	bl	800aa84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bda6:	4b1e      	ldr	r3, [pc, #120]	; (800be20 <xTaskRemoveFromEventList+0xb0>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d11d      	bne.n	800bdea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	3304      	adds	r3, #4
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7fe fe66 	bl	800aa84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdbc:	4b19      	ldr	r3, [pc, #100]	; (800be24 <xTaskRemoveFromEventList+0xb4>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d903      	bls.n	800bdcc <xTaskRemoveFromEventList+0x5c>
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc8:	4a16      	ldr	r2, [pc, #88]	; (800be24 <xTaskRemoveFromEventList+0xb4>)
 800bdca:	6013      	str	r3, [r2, #0]
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	4413      	add	r3, r2
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	4a13      	ldr	r2, [pc, #76]	; (800be28 <xTaskRemoveFromEventList+0xb8>)
 800bdda:	441a      	add	r2, r3
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	3304      	adds	r3, #4
 800bde0:	4619      	mov	r1, r3
 800bde2:	4610      	mov	r0, r2
 800bde4:	f7fe fdf1 	bl	800a9ca <vListInsertEnd>
 800bde8:	e005      	b.n	800bdf6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	3318      	adds	r3, #24
 800bdee:	4619      	mov	r1, r3
 800bdf0:	480e      	ldr	r0, [pc, #56]	; (800be2c <xTaskRemoveFromEventList+0xbc>)
 800bdf2:	f7fe fdea 	bl	800a9ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdfa:	4b0d      	ldr	r3, [pc, #52]	; (800be30 <xTaskRemoveFromEventList+0xc0>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be00:	429a      	cmp	r2, r3
 800be02:	d905      	bls.n	800be10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be04:	2301      	movs	r3, #1
 800be06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be08:	4b0a      	ldr	r3, [pc, #40]	; (800be34 <xTaskRemoveFromEventList+0xc4>)
 800be0a:	2201      	movs	r2, #1
 800be0c:	601a      	str	r2, [r3, #0]
 800be0e:	e001      	b.n	800be14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800be10:	2300      	movs	r3, #0
 800be12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be14:	697b      	ldr	r3, [r7, #20]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3718      	adds	r7, #24
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	20008cc0 	.word	0x20008cc0
 800be24:	20008ca0 	.word	0x20008ca0
 800be28:	200087c8 	.word	0x200087c8
 800be2c:	20008c58 	.word	0x20008c58
 800be30:	200087c4 	.word	0x200087c4
 800be34:	20008cac 	.word	0x20008cac

0800be38 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10a      	bne.n	800be5c <vTaskSetTimeOutState+0x24>
	__asm volatile
 800be46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4a:	f383 8811 	msr	BASEPRI, r3
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	60fb      	str	r3, [r7, #12]
}
 800be58:	bf00      	nop
 800be5a:	e7fe      	b.n	800be5a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800be5c:	f001 f8b2 	bl	800cfc4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be60:	4b06      	ldr	r3, [pc, #24]	; (800be7c <vTaskSetTimeOutState+0x44>)
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800be68:	4b05      	ldr	r3, [pc, #20]	; (800be80 <vTaskSetTimeOutState+0x48>)
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800be70:	f001 f8d8 	bl	800d024 <vPortExitCritical>
}
 800be74:	bf00      	nop
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	20008cb0 	.word	0x20008cb0
 800be80:	20008c9c 	.word	0x20008c9c

0800be84 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be8c:	4b06      	ldr	r3, [pc, #24]	; (800bea8 <vTaskInternalSetTimeOutState+0x24>)
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be94:	4b05      	ldr	r3, [pc, #20]	; (800beac <vTaskInternalSetTimeOutState+0x28>)
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	605a      	str	r2, [r3, #4]
}
 800be9c:	bf00      	nop
 800be9e:	370c      	adds	r7, #12
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr
 800bea8:	20008cb0 	.word	0x20008cb0
 800beac:	20008c9c 	.word	0x20008c9c

0800beb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b088      	sub	sp, #32
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d10a      	bne.n	800bed6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec4:	f383 8811 	msr	BASEPRI, r3
 800bec8:	f3bf 8f6f 	isb	sy
 800becc:	f3bf 8f4f 	dsb	sy
 800bed0:	613b      	str	r3, [r7, #16]
}
 800bed2:	bf00      	nop
 800bed4:	e7fe      	b.n	800bed4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d10a      	bne.n	800bef2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee0:	f383 8811 	msr	BASEPRI, r3
 800bee4:	f3bf 8f6f 	isb	sy
 800bee8:	f3bf 8f4f 	dsb	sy
 800beec:	60fb      	str	r3, [r7, #12]
}
 800beee:	bf00      	nop
 800bef0:	e7fe      	b.n	800bef0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bef2:	f001 f867 	bl	800cfc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bef6:	4b1d      	ldr	r3, [pc, #116]	; (800bf6c <xTaskCheckForTimeOut+0xbc>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	69ba      	ldr	r2, [r7, #24]
 800bf02:	1ad3      	subs	r3, r2, r3
 800bf04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf0e:	d102      	bne.n	800bf16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bf10:	2300      	movs	r3, #0
 800bf12:	61fb      	str	r3, [r7, #28]
 800bf14:	e023      	b.n	800bf5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	4b15      	ldr	r3, [pc, #84]	; (800bf70 <xTaskCheckForTimeOut+0xc0>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d007      	beq.n	800bf32 <xTaskCheckForTimeOut+0x82>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	69ba      	ldr	r2, [r7, #24]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d302      	bcc.n	800bf32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	61fb      	str	r3, [r7, #28]
 800bf30:	e015      	b.n	800bf5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	697a      	ldr	r2, [r7, #20]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d20b      	bcs.n	800bf54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	1ad2      	subs	r2, r2, r3
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f7ff ff9b 	bl	800be84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	61fb      	str	r3, [r7, #28]
 800bf52:	e004      	b.n	800bf5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	2200      	movs	r2, #0
 800bf58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf5e:	f001 f861 	bl	800d024 <vPortExitCritical>

	return xReturn;
 800bf62:	69fb      	ldr	r3, [r7, #28]
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3720      	adds	r7, #32
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	20008c9c 	.word	0x20008c9c
 800bf70:	20008cb0 	.word	0x20008cb0

0800bf74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf74:	b480      	push	{r7}
 800bf76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf78:	4b03      	ldr	r3, [pc, #12]	; (800bf88 <vTaskMissedYield+0x14>)
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	601a      	str	r2, [r3, #0]
}
 800bf7e:	bf00      	nop
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr
 800bf88:	20008cac 	.word	0x20008cac

0800bf8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf94:	f000 f852 	bl	800c03c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf98:	4b06      	ldr	r3, [pc, #24]	; (800bfb4 <prvIdleTask+0x28>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d9f9      	bls.n	800bf94 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bfa0:	4b05      	ldr	r3, [pc, #20]	; (800bfb8 <prvIdleTask+0x2c>)
 800bfa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfa6:	601a      	str	r2, [r3, #0]
 800bfa8:	f3bf 8f4f 	dsb	sy
 800bfac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bfb0:	e7f0      	b.n	800bf94 <prvIdleTask+0x8>
 800bfb2:	bf00      	nop
 800bfb4:	200087c8 	.word	0x200087c8
 800bfb8:	e000ed04 	.word	0xe000ed04

0800bfbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	607b      	str	r3, [r7, #4]
 800bfc6:	e00c      	b.n	800bfe2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	4613      	mov	r3, r2
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	4413      	add	r3, r2
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	4a12      	ldr	r2, [pc, #72]	; (800c01c <prvInitialiseTaskLists+0x60>)
 800bfd4:	4413      	add	r3, r2
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7fe fcca 	bl	800a970 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	607b      	str	r3, [r7, #4]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2b37      	cmp	r3, #55	; 0x37
 800bfe6:	d9ef      	bls.n	800bfc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bfe8:	480d      	ldr	r0, [pc, #52]	; (800c020 <prvInitialiseTaskLists+0x64>)
 800bfea:	f7fe fcc1 	bl	800a970 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bfee:	480d      	ldr	r0, [pc, #52]	; (800c024 <prvInitialiseTaskLists+0x68>)
 800bff0:	f7fe fcbe 	bl	800a970 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bff4:	480c      	ldr	r0, [pc, #48]	; (800c028 <prvInitialiseTaskLists+0x6c>)
 800bff6:	f7fe fcbb 	bl	800a970 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bffa:	480c      	ldr	r0, [pc, #48]	; (800c02c <prvInitialiseTaskLists+0x70>)
 800bffc:	f7fe fcb8 	bl	800a970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c000:	480b      	ldr	r0, [pc, #44]	; (800c030 <prvInitialiseTaskLists+0x74>)
 800c002:	f7fe fcb5 	bl	800a970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c006:	4b0b      	ldr	r3, [pc, #44]	; (800c034 <prvInitialiseTaskLists+0x78>)
 800c008:	4a05      	ldr	r2, [pc, #20]	; (800c020 <prvInitialiseTaskLists+0x64>)
 800c00a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c00c:	4b0a      	ldr	r3, [pc, #40]	; (800c038 <prvInitialiseTaskLists+0x7c>)
 800c00e:	4a05      	ldr	r2, [pc, #20]	; (800c024 <prvInitialiseTaskLists+0x68>)
 800c010:	601a      	str	r2, [r3, #0]
}
 800c012:	bf00      	nop
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	200087c8 	.word	0x200087c8
 800c020:	20008c28 	.word	0x20008c28
 800c024:	20008c3c 	.word	0x20008c3c
 800c028:	20008c58 	.word	0x20008c58
 800c02c:	20008c6c 	.word	0x20008c6c
 800c030:	20008c84 	.word	0x20008c84
 800c034:	20008c50 	.word	0x20008c50
 800c038:	20008c54 	.word	0x20008c54

0800c03c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c042:	e019      	b.n	800c078 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c044:	f000 ffbe 	bl	800cfc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c048:	4b10      	ldr	r3, [pc, #64]	; (800c08c <prvCheckTasksWaitingTermination+0x50>)
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	3304      	adds	r3, #4
 800c054:	4618      	mov	r0, r3
 800c056:	f7fe fd15 	bl	800aa84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c05a:	4b0d      	ldr	r3, [pc, #52]	; (800c090 <prvCheckTasksWaitingTermination+0x54>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	3b01      	subs	r3, #1
 800c060:	4a0b      	ldr	r2, [pc, #44]	; (800c090 <prvCheckTasksWaitingTermination+0x54>)
 800c062:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c064:	4b0b      	ldr	r3, [pc, #44]	; (800c094 <prvCheckTasksWaitingTermination+0x58>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	3b01      	subs	r3, #1
 800c06a:	4a0a      	ldr	r2, [pc, #40]	; (800c094 <prvCheckTasksWaitingTermination+0x58>)
 800c06c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c06e:	f000 ffd9 	bl	800d024 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 f810 	bl	800c098 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c078:	4b06      	ldr	r3, [pc, #24]	; (800c094 <prvCheckTasksWaitingTermination+0x58>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d1e1      	bne.n	800c044 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c080:	bf00      	nop
 800c082:	bf00      	nop
 800c084:	3708      	adds	r7, #8
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
 800c08a:	bf00      	nop
 800c08c:	20008c6c 	.word	0x20008c6c
 800c090:	20008c98 	.word	0x20008c98
 800c094:	20008c80 	.word	0x20008c80

0800c098 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d108      	bne.n	800c0bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f001 f976 	bl	800d3a0 <vPortFree>
				vPortFree( pxTCB );
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f001 f973 	bl	800d3a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c0ba:	e018      	b.n	800c0ee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d103      	bne.n	800c0ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f001 f96a 	bl	800d3a0 <vPortFree>
	}
 800c0cc:	e00f      	b.n	800c0ee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c0d4:	2b02      	cmp	r3, #2
 800c0d6:	d00a      	beq.n	800c0ee <prvDeleteTCB+0x56>
	__asm volatile
 800c0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0dc:	f383 8811 	msr	BASEPRI, r3
 800c0e0:	f3bf 8f6f 	isb	sy
 800c0e4:	f3bf 8f4f 	dsb	sy
 800c0e8:	60fb      	str	r3, [r7, #12]
}
 800c0ea:	bf00      	nop
 800c0ec:	e7fe      	b.n	800c0ec <prvDeleteTCB+0x54>
	}
 800c0ee:	bf00      	nop
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
	...

0800c0f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b083      	sub	sp, #12
 800c0fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0fe:	4b0c      	ldr	r3, [pc, #48]	; (800c130 <prvResetNextTaskUnblockTime+0x38>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d104      	bne.n	800c112 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c108:	4b0a      	ldr	r3, [pc, #40]	; (800c134 <prvResetNextTaskUnblockTime+0x3c>)
 800c10a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c10e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c110:	e008      	b.n	800c124 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c112:	4b07      	ldr	r3, [pc, #28]	; (800c130 <prvResetNextTaskUnblockTime+0x38>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	68db      	ldr	r3, [r3, #12]
 800c11a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	4a04      	ldr	r2, [pc, #16]	; (800c134 <prvResetNextTaskUnblockTime+0x3c>)
 800c122:	6013      	str	r3, [r2, #0]
}
 800c124:	bf00      	nop
 800c126:	370c      	adds	r7, #12
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr
 800c130:	20008c50 	.word	0x20008c50
 800c134:	20008cb8 	.word	0x20008cb8

0800c138 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c13e:	4b0b      	ldr	r3, [pc, #44]	; (800c16c <xTaskGetSchedulerState+0x34>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d102      	bne.n	800c14c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c146:	2301      	movs	r3, #1
 800c148:	607b      	str	r3, [r7, #4]
 800c14a:	e008      	b.n	800c15e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c14c:	4b08      	ldr	r3, [pc, #32]	; (800c170 <xTaskGetSchedulerState+0x38>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d102      	bne.n	800c15a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c154:	2302      	movs	r3, #2
 800c156:	607b      	str	r3, [r7, #4]
 800c158:	e001      	b.n	800c15e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c15a:	2300      	movs	r3, #0
 800c15c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c15e:	687b      	ldr	r3, [r7, #4]
	}
 800c160:	4618      	mov	r0, r3
 800c162:	370c      	adds	r7, #12
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr
 800c16c:	20008ca4 	.word	0x20008ca4
 800c170:	20008cc0 	.word	0x20008cc0

0800c174 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c174:	b580      	push	{r7, lr}
 800c176:	b086      	sub	sp, #24
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c180:	2300      	movs	r3, #0
 800c182:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d056      	beq.n	800c238 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c18a:	4b2e      	ldr	r3, [pc, #184]	; (800c244 <xTaskPriorityDisinherit+0xd0>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	693a      	ldr	r2, [r7, #16]
 800c190:	429a      	cmp	r2, r3
 800c192:	d00a      	beq.n	800c1aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c198:	f383 8811 	msr	BASEPRI, r3
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	f3bf 8f4f 	dsb	sy
 800c1a4:	60fb      	str	r3, [r7, #12]
}
 800c1a6:	bf00      	nop
 800c1a8:	e7fe      	b.n	800c1a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10a      	bne.n	800c1c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b6:	f383 8811 	msr	BASEPRI, r3
 800c1ba:	f3bf 8f6f 	isb	sy
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	60bb      	str	r3, [r7, #8]
}
 800c1c4:	bf00      	nop
 800c1c6:	e7fe      	b.n	800c1c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1cc:	1e5a      	subs	r2, r3, #1
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d02c      	beq.n	800c238 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d128      	bne.n	800c238 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	3304      	adds	r3, #4
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7fe fc4a 	bl	800aa84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c208:	4b0f      	ldr	r3, [pc, #60]	; (800c248 <xTaskPriorityDisinherit+0xd4>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d903      	bls.n	800c218 <xTaskPriorityDisinherit+0xa4>
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c214:	4a0c      	ldr	r2, [pc, #48]	; (800c248 <xTaskPriorityDisinherit+0xd4>)
 800c216:	6013      	str	r3, [r2, #0]
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c21c:	4613      	mov	r3, r2
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	4413      	add	r3, r2
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	4a09      	ldr	r2, [pc, #36]	; (800c24c <xTaskPriorityDisinherit+0xd8>)
 800c226:	441a      	add	r2, r3
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	3304      	adds	r3, #4
 800c22c:	4619      	mov	r1, r3
 800c22e:	4610      	mov	r0, r2
 800c230:	f7fe fbcb 	bl	800a9ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c234:	2301      	movs	r3, #1
 800c236:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c238:	697b      	ldr	r3, [r7, #20]
	}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3718      	adds	r7, #24
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	200087c4 	.word	0x200087c4
 800c248:	20008ca0 	.word	0x20008ca0
 800c24c:	200087c8 	.word	0x200087c8

0800c250 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
 800c25c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c25e:	f000 feb1 	bl	800cfc4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c262:	4b26      	ldr	r3, [pc, #152]	; (800c2fc <xTaskNotifyWait+0xac>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	d01a      	beq.n	800c2a6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c270:	4b22      	ldr	r3, [pc, #136]	; (800c2fc <xTaskNotifyWait+0xac>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	43d2      	mvns	r2, r2
 800c27a:	400a      	ands	r2, r1
 800c27c:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c27e:	4b1f      	ldr	r3, [pc, #124]	; (800c2fc <xTaskNotifyWait+0xac>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2201      	movs	r2, #1
 800c284:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d00b      	beq.n	800c2a6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c28e:	2101      	movs	r1, #1
 800c290:	6838      	ldr	r0, [r7, #0]
 800c292:	f000 f9cb 	bl	800c62c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c296:	4b1a      	ldr	r3, [pc, #104]	; (800c300 <xTaskNotifyWait+0xb0>)
 800c298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c29c:	601a      	str	r2, [r3, #0]
 800c29e:	f3bf 8f4f 	dsb	sy
 800c2a2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c2a6:	f000 febd 	bl	800d024 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c2aa:	f000 fe8b 	bl	800cfc4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d004      	beq.n	800c2be <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c2b4:	4b11      	ldr	r3, [pc, #68]	; (800c2fc <xTaskNotifyWait+0xac>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c2be:	4b0f      	ldr	r3, [pc, #60]	; (800c2fc <xTaskNotifyWait+0xac>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	2b02      	cmp	r3, #2
 800c2ca:	d002      	beq.n	800c2d2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	617b      	str	r3, [r7, #20]
 800c2d0:	e008      	b.n	800c2e4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c2d2:	4b0a      	ldr	r3, [pc, #40]	; (800c2fc <xTaskNotifyWait+0xac>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	43d2      	mvns	r2, r2
 800c2dc:	400a      	ands	r2, r1
 800c2de:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c2e4:	4b05      	ldr	r3, [pc, #20]	; (800c2fc <xTaskNotifyWait+0xac>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800c2ee:	f000 fe99 	bl	800d024 <vPortExitCritical>

		return xReturn;
 800c2f2:	697b      	ldr	r3, [r7, #20]
	}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3718      	adds	r7, #24
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	200087c4 	.word	0x200087c4
 800c300:	e000ed04 	.word	0xe000ed04

0800c304 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c304:	b580      	push	{r7, lr}
 800c306:	b08a      	sub	sp, #40	; 0x28
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	603b      	str	r3, [r7, #0]
 800c310:	4613      	mov	r3, r2
 800c312:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c314:	2301      	movs	r3, #1
 800c316:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d10a      	bne.n	800c334 <xTaskGenericNotify+0x30>
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	61bb      	str	r3, [r7, #24]
}
 800c330:	bf00      	nop
 800c332:	e7fe      	b.n	800c332 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c338:	f000 fe44 	bl	800cfc4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d003      	beq.n	800c34a <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c342:	6a3b      	ldr	r3, [r7, #32]
 800c344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c34a:	6a3b      	ldr	r3, [r7, #32]
 800c34c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c350:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c352:	6a3b      	ldr	r3, [r7, #32]
 800c354:	2202      	movs	r2, #2
 800c356:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c35a:	79fb      	ldrb	r3, [r7, #7]
 800c35c:	2b04      	cmp	r3, #4
 800c35e:	d828      	bhi.n	800c3b2 <xTaskGenericNotify+0xae>
 800c360:	a201      	add	r2, pc, #4	; (adr r2, 800c368 <xTaskGenericNotify+0x64>)
 800c362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c366:	bf00      	nop
 800c368:	0800c3d3 	.word	0x0800c3d3
 800c36c:	0800c37d 	.word	0x0800c37d
 800c370:	0800c38b 	.word	0x0800c38b
 800c374:	0800c397 	.word	0x0800c397
 800c378:	0800c39f 	.word	0x0800c39f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c37c:	6a3b      	ldr	r3, [r7, #32]
 800c37e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	431a      	orrs	r2, r3
 800c384:	6a3b      	ldr	r3, [r7, #32]
 800c386:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c388:	e026      	b.n	800c3d8 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c38a:	6a3b      	ldr	r3, [r7, #32]
 800c38c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c38e:	1c5a      	adds	r2, r3, #1
 800c390:	6a3b      	ldr	r3, [r7, #32]
 800c392:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c394:	e020      	b.n	800c3d8 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c396:	6a3b      	ldr	r3, [r7, #32]
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c39c:	e01c      	b.n	800c3d8 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c39e:	7ffb      	ldrb	r3, [r7, #31]
 800c3a0:	2b02      	cmp	r3, #2
 800c3a2:	d003      	beq.n	800c3ac <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c3a4:	6a3b      	ldr	r3, [r7, #32]
 800c3a6:	68ba      	ldr	r2, [r7, #8]
 800c3a8:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c3aa:	e015      	b.n	800c3d8 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c3b0:	e012      	b.n	800c3d8 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c3b2:	6a3b      	ldr	r3, [r7, #32]
 800c3b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3ba:	d00c      	beq.n	800c3d6 <xTaskGenericNotify+0xd2>
	__asm volatile
 800c3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c0:	f383 8811 	msr	BASEPRI, r3
 800c3c4:	f3bf 8f6f 	isb	sy
 800c3c8:	f3bf 8f4f 	dsb	sy
 800c3cc:	617b      	str	r3, [r7, #20]
}
 800c3ce:	bf00      	nop
 800c3d0:	e7fe      	b.n	800c3d0 <xTaskGenericNotify+0xcc>
					break;
 800c3d2:	bf00      	nop
 800c3d4:	e000      	b.n	800c3d8 <xTaskGenericNotify+0xd4>

					break;
 800c3d6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c3d8:	7ffb      	ldrb	r3, [r7, #31]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d13a      	bne.n	800c454 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3de:	6a3b      	ldr	r3, [r7, #32]
 800c3e0:	3304      	adds	r3, #4
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7fe fb4e 	bl	800aa84 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c3e8:	6a3b      	ldr	r3, [r7, #32]
 800c3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ec:	4b1d      	ldr	r3, [pc, #116]	; (800c464 <xTaskGenericNotify+0x160>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d903      	bls.n	800c3fc <xTaskGenericNotify+0xf8>
 800c3f4:	6a3b      	ldr	r3, [r7, #32]
 800c3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f8:	4a1a      	ldr	r2, [pc, #104]	; (800c464 <xTaskGenericNotify+0x160>)
 800c3fa:	6013      	str	r3, [r2, #0]
 800c3fc:	6a3b      	ldr	r3, [r7, #32]
 800c3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c400:	4613      	mov	r3, r2
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	4413      	add	r3, r2
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	4a17      	ldr	r2, [pc, #92]	; (800c468 <xTaskGenericNotify+0x164>)
 800c40a:	441a      	add	r2, r3
 800c40c:	6a3b      	ldr	r3, [r7, #32]
 800c40e:	3304      	adds	r3, #4
 800c410:	4619      	mov	r1, r3
 800c412:	4610      	mov	r0, r2
 800c414:	f7fe fad9 	bl	800a9ca <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c418:	6a3b      	ldr	r3, [r7, #32]
 800c41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d00a      	beq.n	800c436 <xTaskGenericNotify+0x132>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	613b      	str	r3, [r7, #16]
}
 800c432:	bf00      	nop
 800c434:	e7fe      	b.n	800c434 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c436:	6a3b      	ldr	r3, [r7, #32]
 800c438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c43a:	4b0c      	ldr	r3, [pc, #48]	; (800c46c <xTaskGenericNotify+0x168>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c440:	429a      	cmp	r2, r3
 800c442:	d907      	bls.n	800c454 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c444:	4b0a      	ldr	r3, [pc, #40]	; (800c470 <xTaskGenericNotify+0x16c>)
 800c446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c44a:	601a      	str	r2, [r3, #0]
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c454:	f000 fde6 	bl	800d024 <vPortExitCritical>

		return xReturn;
 800c458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3728      	adds	r7, #40	; 0x28
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	20008ca0 	.word	0x20008ca0
 800c468:	200087c8 	.word	0x200087c8
 800c46c:	200087c4 	.word	0x200087c4
 800c470:	e000ed04 	.word	0xe000ed04

0800c474 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c474:	b580      	push	{r7, lr}
 800c476:	b08e      	sub	sp, #56	; 0x38
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	603b      	str	r3, [r7, #0]
 800c480:	4613      	mov	r3, r2
 800c482:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c484:	2301      	movs	r3, #1
 800c486:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d10a      	bne.n	800c4a4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c492:	f383 8811 	msr	BASEPRI, r3
 800c496:	f3bf 8f6f 	isb	sy
 800c49a:	f3bf 8f4f 	dsb	sy
 800c49e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c4a0:	bf00      	nop
 800c4a2:	e7fe      	b.n	800c4a2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4a4:	f000 fe70 	bl	800d188 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c4ac:	f3ef 8211 	mrs	r2, BASEPRI
 800c4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	623a      	str	r2, [r7, #32]
 800c4c2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c4c4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d003      	beq.n	800c4d6 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c4dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e2:	2202      	movs	r2, #2
 800c4e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c4e8:	79fb      	ldrb	r3, [r7, #7]
 800c4ea:	2b04      	cmp	r3, #4
 800c4ec:	d828      	bhi.n	800c540 <xTaskGenericNotifyFromISR+0xcc>
 800c4ee:	a201      	add	r2, pc, #4	; (adr r2, 800c4f4 <xTaskGenericNotifyFromISR+0x80>)
 800c4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4f4:	0800c561 	.word	0x0800c561
 800c4f8:	0800c509 	.word	0x0800c509
 800c4fc:	0800c517 	.word	0x0800c517
 800c500:	0800c523 	.word	0x0800c523
 800c504:	0800c52b 	.word	0x0800c52b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	431a      	orrs	r2, r3
 800c510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c512:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c514:	e027      	b.n	800c566 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c51a:	1c5a      	adds	r2, r3, #1
 800c51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c520:	e021      	b.n	800c566 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	68ba      	ldr	r2, [r7, #8]
 800c526:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c528:	e01d      	b.n	800c566 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c52a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c52e:	2b02      	cmp	r3, #2
 800c530:	d003      	beq.n	800c53a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c538:	e015      	b.n	800c566 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800c53a:	2300      	movs	r3, #0
 800c53c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c53e:	e012      	b.n	800c566 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c548:	d00c      	beq.n	800c564 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800c54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54e:	f383 8811 	msr	BASEPRI, r3
 800c552:	f3bf 8f6f 	isb	sy
 800c556:	f3bf 8f4f 	dsb	sy
 800c55a:	61bb      	str	r3, [r7, #24]
}
 800c55c:	bf00      	nop
 800c55e:	e7fe      	b.n	800c55e <xTaskGenericNotifyFromISR+0xea>
					break;
 800c560:	bf00      	nop
 800c562:	e000      	b.n	800c566 <xTaskGenericNotifyFromISR+0xf2>
					break;
 800c564:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c566:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d146      	bne.n	800c5fc <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c572:	2b00      	cmp	r3, #0
 800c574:	d00a      	beq.n	800c58c <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800c576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57a:	f383 8811 	msr	BASEPRI, r3
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	617b      	str	r3, [r7, #20]
}
 800c588:	bf00      	nop
 800c58a:	e7fe      	b.n	800c58a <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c58c:	4b21      	ldr	r3, [pc, #132]	; (800c614 <xTaskGenericNotifyFromISR+0x1a0>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d11d      	bne.n	800c5d0 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c596:	3304      	adds	r3, #4
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fe fa73 	bl	800aa84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5a2:	4b1d      	ldr	r3, [pc, #116]	; (800c618 <xTaskGenericNotifyFromISR+0x1a4>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d903      	bls.n	800c5b2 <xTaskGenericNotifyFromISR+0x13e>
 800c5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ae:	4a1a      	ldr	r2, [pc, #104]	; (800c618 <xTaskGenericNotifyFromISR+0x1a4>)
 800c5b0:	6013      	str	r3, [r2, #0]
 800c5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	4413      	add	r3, r2
 800c5bc:	009b      	lsls	r3, r3, #2
 800c5be:	4a17      	ldr	r2, [pc, #92]	; (800c61c <xTaskGenericNotifyFromISR+0x1a8>)
 800c5c0:	441a      	add	r2, r3
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c4:	3304      	adds	r3, #4
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	4610      	mov	r0, r2
 800c5ca:	f7fe f9fe 	bl	800a9ca <vListInsertEnd>
 800c5ce:	e005      	b.n	800c5dc <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d2:	3318      	adds	r3, #24
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	4812      	ldr	r0, [pc, #72]	; (800c620 <xTaskGenericNotifyFromISR+0x1ac>)
 800c5d8:	f7fe f9f7 	bl	800a9ca <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5e0:	4b10      	ldr	r3, [pc, #64]	; (800c624 <xTaskGenericNotifyFromISR+0x1b0>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d908      	bls.n	800c5fc <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c5ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d002      	beq.n	800c5f6 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c5f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c5f6:	4b0c      	ldr	r3, [pc, #48]	; (800c628 <xTaskGenericNotifyFromISR+0x1b4>)
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	601a      	str	r2, [r3, #0]
 800c5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fe:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	f383 8811 	msr	BASEPRI, r3
}
 800c606:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3738      	adds	r7, #56	; 0x38
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	20008cc0 	.word	0x20008cc0
 800c618:	20008ca0 	.word	0x20008ca0
 800c61c:	200087c8 	.word	0x200087c8
 800c620:	20008c58 	.word	0x20008c58
 800c624:	200087c4 	.word	0x200087c4
 800c628:	20008cac 	.word	0x20008cac

0800c62c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b084      	sub	sp, #16
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c636:	4b21      	ldr	r3, [pc, #132]	; (800c6bc <prvAddCurrentTaskToDelayedList+0x90>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c63c:	4b20      	ldr	r3, [pc, #128]	; (800c6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	3304      	adds	r3, #4
 800c642:	4618      	mov	r0, r3
 800c644:	f7fe fa1e 	bl	800aa84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c64e:	d10a      	bne.n	800c666 <prvAddCurrentTaskToDelayedList+0x3a>
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d007      	beq.n	800c666 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c656:	4b1a      	ldr	r3, [pc, #104]	; (800c6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	3304      	adds	r3, #4
 800c65c:	4619      	mov	r1, r3
 800c65e:	4819      	ldr	r0, [pc, #100]	; (800c6c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800c660:	f7fe f9b3 	bl	800a9ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c664:	e026      	b.n	800c6b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4413      	add	r3, r2
 800c66c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c66e:	4b14      	ldr	r3, [pc, #80]	; (800c6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	68ba      	ldr	r2, [r7, #8]
 800c674:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c676:	68ba      	ldr	r2, [r7, #8]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d209      	bcs.n	800c692 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c67e:	4b12      	ldr	r3, [pc, #72]	; (800c6c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	4b0f      	ldr	r3, [pc, #60]	; (800c6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	3304      	adds	r3, #4
 800c688:	4619      	mov	r1, r3
 800c68a:	4610      	mov	r0, r2
 800c68c:	f7fe f9c1 	bl	800aa12 <vListInsert>
}
 800c690:	e010      	b.n	800c6b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c692:	4b0e      	ldr	r3, [pc, #56]	; (800c6cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	4b0a      	ldr	r3, [pc, #40]	; (800c6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	3304      	adds	r3, #4
 800c69c:	4619      	mov	r1, r3
 800c69e:	4610      	mov	r0, r2
 800c6a0:	f7fe f9b7 	bl	800aa12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c6a4:	4b0a      	ldr	r3, [pc, #40]	; (800c6d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	68ba      	ldr	r2, [r7, #8]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d202      	bcs.n	800c6b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c6ae:	4a08      	ldr	r2, [pc, #32]	; (800c6d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	6013      	str	r3, [r2, #0]
}
 800c6b4:	bf00      	nop
 800c6b6:	3710      	adds	r7, #16
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	20008c9c 	.word	0x20008c9c
 800c6c0:	200087c4 	.word	0x200087c4
 800c6c4:	20008c84 	.word	0x20008c84
 800c6c8:	20008c54 	.word	0x20008c54
 800c6cc:	20008c50 	.word	0x20008c50
 800c6d0:	20008cb8 	.word	0x20008cb8

0800c6d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b08a      	sub	sp, #40	; 0x28
 800c6d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c6de:	f000 fb07 	bl	800ccf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c6e2:	4b1c      	ldr	r3, [pc, #112]	; (800c754 <xTimerCreateTimerTask+0x80>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d021      	beq.n	800c72e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c6f2:	1d3a      	adds	r2, r7, #4
 800c6f4:	f107 0108 	add.w	r1, r7, #8
 800c6f8:	f107 030c 	add.w	r3, r7, #12
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7fe f91d 	bl	800a93c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c702:	6879      	ldr	r1, [r7, #4]
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	68fa      	ldr	r2, [r7, #12]
 800c708:	9202      	str	r2, [sp, #8]
 800c70a:	9301      	str	r3, [sp, #4]
 800c70c:	2302      	movs	r3, #2
 800c70e:	9300      	str	r3, [sp, #0]
 800c710:	2300      	movs	r3, #0
 800c712:	460a      	mov	r2, r1
 800c714:	4910      	ldr	r1, [pc, #64]	; (800c758 <xTimerCreateTimerTask+0x84>)
 800c716:	4811      	ldr	r0, [pc, #68]	; (800c75c <xTimerCreateTimerTask+0x88>)
 800c718:	f7fe feca 	bl	800b4b0 <xTaskCreateStatic>
 800c71c:	4603      	mov	r3, r0
 800c71e:	4a10      	ldr	r2, [pc, #64]	; (800c760 <xTimerCreateTimerTask+0x8c>)
 800c720:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c722:	4b0f      	ldr	r3, [pc, #60]	; (800c760 <xTimerCreateTimerTask+0x8c>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d001      	beq.n	800c72e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c72a:	2301      	movs	r3, #1
 800c72c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d10a      	bne.n	800c74a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c738:	f383 8811 	msr	BASEPRI, r3
 800c73c:	f3bf 8f6f 	isb	sy
 800c740:	f3bf 8f4f 	dsb	sy
 800c744:	613b      	str	r3, [r7, #16]
}
 800c746:	bf00      	nop
 800c748:	e7fe      	b.n	800c748 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c74a:	697b      	ldr	r3, [r7, #20]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3718      	adds	r7, #24
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	20008cf4 	.word	0x20008cf4
 800c758:	0801d2c4 	.word	0x0801d2c4
 800c75c:	0800c899 	.word	0x0800c899
 800c760:	20008cf8 	.word	0x20008cf8

0800c764 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b08a      	sub	sp, #40	; 0x28
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
 800c770:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c772:	2300      	movs	r3, #0
 800c774:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d10a      	bne.n	800c792 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c780:	f383 8811 	msr	BASEPRI, r3
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	f3bf 8f4f 	dsb	sy
 800c78c:	623b      	str	r3, [r7, #32]
}
 800c78e:	bf00      	nop
 800c790:	e7fe      	b.n	800c790 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c792:	4b1a      	ldr	r3, [pc, #104]	; (800c7fc <xTimerGenericCommand+0x98>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d02a      	beq.n	800c7f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	2b05      	cmp	r3, #5
 800c7aa:	dc18      	bgt.n	800c7de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c7ac:	f7ff fcc4 	bl	800c138 <xTaskGetSchedulerState>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b02      	cmp	r3, #2
 800c7b4:	d109      	bne.n	800c7ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c7b6:	4b11      	ldr	r3, [pc, #68]	; (800c7fc <xTimerGenericCommand+0x98>)
 800c7b8:	6818      	ldr	r0, [r3, #0]
 800c7ba:	f107 0110 	add.w	r1, r7, #16
 800c7be:	2300      	movs	r3, #0
 800c7c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7c2:	f7fe fa8d 	bl	800ace0 <xQueueGenericSend>
 800c7c6:	6278      	str	r0, [r7, #36]	; 0x24
 800c7c8:	e012      	b.n	800c7f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c7ca:	4b0c      	ldr	r3, [pc, #48]	; (800c7fc <xTimerGenericCommand+0x98>)
 800c7cc:	6818      	ldr	r0, [r3, #0]
 800c7ce:	f107 0110 	add.w	r1, r7, #16
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f7fe fa83 	bl	800ace0 <xQueueGenericSend>
 800c7da:	6278      	str	r0, [r7, #36]	; 0x24
 800c7dc:	e008      	b.n	800c7f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c7de:	4b07      	ldr	r3, [pc, #28]	; (800c7fc <xTimerGenericCommand+0x98>)
 800c7e0:	6818      	ldr	r0, [r3, #0]
 800c7e2:	f107 0110 	add.w	r1, r7, #16
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	683a      	ldr	r2, [r7, #0]
 800c7ea:	f7fe fb77 	bl	800aedc <xQueueGenericSendFromISR>
 800c7ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3728      	adds	r7, #40	; 0x28
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	20008cf4 	.word	0x20008cf4

0800c800 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b088      	sub	sp, #32
 800c804:	af02      	add	r7, sp, #8
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c80a:	4b22      	ldr	r3, [pc, #136]	; (800c894 <prvProcessExpiredTimer+0x94>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	68db      	ldr	r3, [r3, #12]
 800c812:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	3304      	adds	r3, #4
 800c818:	4618      	mov	r0, r3
 800c81a:	f7fe f933 	bl	800aa84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c824:	f003 0304 	and.w	r3, r3, #4
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d022      	beq.n	800c872 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	699a      	ldr	r2, [r3, #24]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	18d1      	adds	r1, r2, r3
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	683a      	ldr	r2, [r7, #0]
 800c838:	6978      	ldr	r0, [r7, #20]
 800c83a:	f000 f8d1 	bl	800c9e0 <prvInsertTimerInActiveList>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d01f      	beq.n	800c884 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c844:	2300      	movs	r3, #0
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	2300      	movs	r3, #0
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	2100      	movs	r1, #0
 800c84e:	6978      	ldr	r0, [r7, #20]
 800c850:	f7ff ff88 	bl	800c764 <xTimerGenericCommand>
 800c854:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d113      	bne.n	800c884 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c860:	f383 8811 	msr	BASEPRI, r3
 800c864:	f3bf 8f6f 	isb	sy
 800c868:	f3bf 8f4f 	dsb	sy
 800c86c:	60fb      	str	r3, [r7, #12]
}
 800c86e:	bf00      	nop
 800c870:	e7fe      	b.n	800c870 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c878:	f023 0301 	bic.w	r3, r3, #1
 800c87c:	b2da      	uxtb	r2, r3
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	6a1b      	ldr	r3, [r3, #32]
 800c888:	6978      	ldr	r0, [r7, #20]
 800c88a:	4798      	blx	r3
}
 800c88c:	bf00      	nop
 800c88e:	3718      	adds	r7, #24
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	20008cec 	.word	0x20008cec

0800c898 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c8a0:	f107 0308 	add.w	r3, r7, #8
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f000 f857 	bl	800c958 <prvGetNextExpireTime>
 800c8aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	68f8      	ldr	r0, [r7, #12]
 800c8b2:	f000 f803 	bl	800c8bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c8b6:	f000 f8d5 	bl	800ca64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c8ba:	e7f1      	b.n	800c8a0 <prvTimerTask+0x8>

0800c8bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c8c6:	f7ff f82f 	bl	800b928 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c8ca:	f107 0308 	add.w	r3, r7, #8
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f000 f866 	bl	800c9a0 <prvSampleTimeNow>
 800c8d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d130      	bne.n	800c93e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d10a      	bne.n	800c8f8 <prvProcessTimerOrBlockTask+0x3c>
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d806      	bhi.n	800c8f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c8ea:	f7ff f82b 	bl	800b944 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c8ee:	68f9      	ldr	r1, [r7, #12]
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f7ff ff85 	bl	800c800 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c8f6:	e024      	b.n	800c942 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d008      	beq.n	800c910 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c8fe:	4b13      	ldr	r3, [pc, #76]	; (800c94c <prvProcessTimerOrBlockTask+0x90>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d101      	bne.n	800c90c <prvProcessTimerOrBlockTask+0x50>
 800c908:	2301      	movs	r3, #1
 800c90a:	e000      	b.n	800c90e <prvProcessTimerOrBlockTask+0x52>
 800c90c:	2300      	movs	r3, #0
 800c90e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c910:	4b0f      	ldr	r3, [pc, #60]	; (800c950 <prvProcessTimerOrBlockTask+0x94>)
 800c912:	6818      	ldr	r0, [r3, #0]
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	1ad3      	subs	r3, r2, r3
 800c91a:	683a      	ldr	r2, [r7, #0]
 800c91c:	4619      	mov	r1, r3
 800c91e:	f7fe fd93 	bl	800b448 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c922:	f7ff f80f 	bl	800b944 <xTaskResumeAll>
 800c926:	4603      	mov	r3, r0
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d10a      	bne.n	800c942 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c92c:	4b09      	ldr	r3, [pc, #36]	; (800c954 <prvProcessTimerOrBlockTask+0x98>)
 800c92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c932:	601a      	str	r2, [r3, #0]
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	f3bf 8f6f 	isb	sy
}
 800c93c:	e001      	b.n	800c942 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c93e:	f7ff f801 	bl	800b944 <xTaskResumeAll>
}
 800c942:	bf00      	nop
 800c944:	3710      	adds	r7, #16
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	20008cf0 	.word	0x20008cf0
 800c950:	20008cf4 	.word	0x20008cf4
 800c954:	e000ed04 	.word	0xe000ed04

0800c958 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c958:	b480      	push	{r7}
 800c95a:	b085      	sub	sp, #20
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c960:	4b0e      	ldr	r3, [pc, #56]	; (800c99c <prvGetNextExpireTime+0x44>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d101      	bne.n	800c96e <prvGetNextExpireTime+0x16>
 800c96a:	2201      	movs	r2, #1
 800c96c:	e000      	b.n	800c970 <prvGetNextExpireTime+0x18>
 800c96e:	2200      	movs	r2, #0
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d105      	bne.n	800c988 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c97c:	4b07      	ldr	r3, [pc, #28]	; (800c99c <prvGetNextExpireTime+0x44>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	68db      	ldr	r3, [r3, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	60fb      	str	r3, [r7, #12]
 800c986:	e001      	b.n	800c98c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c988:	2300      	movs	r3, #0
 800c98a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c98c:	68fb      	ldr	r3, [r7, #12]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3714      	adds	r7, #20
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr
 800c99a:	bf00      	nop
 800c99c:	20008cec 	.word	0x20008cec

0800c9a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c9a8:	f7ff f86a 	bl	800ba80 <xTaskGetTickCount>
 800c9ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c9ae:	4b0b      	ldr	r3, [pc, #44]	; (800c9dc <prvSampleTimeNow+0x3c>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	68fa      	ldr	r2, [r7, #12]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d205      	bcs.n	800c9c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c9b8:	f000 f936 	bl	800cc28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	601a      	str	r2, [r3, #0]
 800c9c2:	e002      	b.n	800c9ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c9ca:	4a04      	ldr	r2, [pc, #16]	; (800c9dc <prvSampleTimeNow+0x3c>)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	20008cfc 	.word	0x20008cfc

0800c9e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b086      	sub	sp, #24
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	607a      	str	r2, [r7, #4]
 800c9ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	68fa      	ldr	r2, [r7, #12]
 800c9fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c9fe:	68ba      	ldr	r2, [r7, #8]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d812      	bhi.n	800ca2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca06:	687a      	ldr	r2, [r7, #4]
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	1ad2      	subs	r2, r2, r3
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	699b      	ldr	r3, [r3, #24]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d302      	bcc.n	800ca1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ca14:	2301      	movs	r3, #1
 800ca16:	617b      	str	r3, [r7, #20]
 800ca18:	e01b      	b.n	800ca52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ca1a:	4b10      	ldr	r3, [pc, #64]	; (800ca5c <prvInsertTimerInActiveList+0x7c>)
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	3304      	adds	r3, #4
 800ca22:	4619      	mov	r1, r3
 800ca24:	4610      	mov	r0, r2
 800ca26:	f7fd fff4 	bl	800aa12 <vListInsert>
 800ca2a:	e012      	b.n	800ca52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d206      	bcs.n	800ca42 <prvInsertTimerInActiveList+0x62>
 800ca34:	68ba      	ldr	r2, [r7, #8]
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d302      	bcc.n	800ca42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	617b      	str	r3, [r7, #20]
 800ca40:	e007      	b.n	800ca52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca42:	4b07      	ldr	r3, [pc, #28]	; (800ca60 <prvInsertTimerInActiveList+0x80>)
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	3304      	adds	r3, #4
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	4610      	mov	r0, r2
 800ca4e:	f7fd ffe0 	bl	800aa12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ca52:	697b      	ldr	r3, [r7, #20]
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3718      	adds	r7, #24
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	20008cf0 	.word	0x20008cf0
 800ca60:	20008cec 	.word	0x20008cec

0800ca64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b08e      	sub	sp, #56	; 0x38
 800ca68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca6a:	e0ca      	b.n	800cc02 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	da18      	bge.n	800caa4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ca72:	1d3b      	adds	r3, r7, #4
 800ca74:	3304      	adds	r3, #4
 800ca76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ca78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d10a      	bne.n	800ca94 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ca7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	61fb      	str	r3, [r7, #28]
}
 800ca90:	bf00      	nop
 800ca92:	e7fe      	b.n	800ca92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ca94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca9a:	6850      	ldr	r0, [r2, #4]
 800ca9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca9e:	6892      	ldr	r2, [r2, #8]
 800caa0:	4611      	mov	r1, r2
 800caa2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	f2c0 80aa 	blt.w	800cc00 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab2:	695b      	ldr	r3, [r3, #20]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d004      	beq.n	800cac2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caba:	3304      	adds	r3, #4
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7fd ffe1 	bl	800aa84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cac2:	463b      	mov	r3, r7
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7ff ff6b 	bl	800c9a0 <prvSampleTimeNow>
 800caca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2b09      	cmp	r3, #9
 800cad0:	f200 8097 	bhi.w	800cc02 <prvProcessReceivedCommands+0x19e>
 800cad4:	a201      	add	r2, pc, #4	; (adr r2, 800cadc <prvProcessReceivedCommands+0x78>)
 800cad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cada:	bf00      	nop
 800cadc:	0800cb05 	.word	0x0800cb05
 800cae0:	0800cb05 	.word	0x0800cb05
 800cae4:	0800cb05 	.word	0x0800cb05
 800cae8:	0800cb79 	.word	0x0800cb79
 800caec:	0800cb8d 	.word	0x0800cb8d
 800caf0:	0800cbd7 	.word	0x0800cbd7
 800caf4:	0800cb05 	.word	0x0800cb05
 800caf8:	0800cb05 	.word	0x0800cb05
 800cafc:	0800cb79 	.word	0x0800cb79
 800cb00:	0800cb8d 	.word	0x0800cb8d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb0a:	f043 0301 	orr.w	r3, r3, #1
 800cb0e:	b2da      	uxtb	r2, r3
 800cb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cb16:	68ba      	ldr	r2, [r7, #8]
 800cb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1a:	699b      	ldr	r3, [r3, #24]
 800cb1c:	18d1      	adds	r1, r2, r3
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb24:	f7ff ff5c 	bl	800c9e0 <prvInsertTimerInActiveList>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d069      	beq.n	800cc02 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb30:	6a1b      	ldr	r3, [r3, #32]
 800cb32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb3c:	f003 0304 	and.w	r3, r3, #4
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d05e      	beq.n	800cc02 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb48:	699b      	ldr	r3, [r3, #24]
 800cb4a:	441a      	add	r2, r3
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	9300      	str	r3, [sp, #0]
 800cb50:	2300      	movs	r3, #0
 800cb52:	2100      	movs	r1, #0
 800cb54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb56:	f7ff fe05 	bl	800c764 <xTimerGenericCommand>
 800cb5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cb5c:	6a3b      	ldr	r3, [r7, #32]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d14f      	bne.n	800cc02 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cb62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb66:	f383 8811 	msr	BASEPRI, r3
 800cb6a:	f3bf 8f6f 	isb	sy
 800cb6e:	f3bf 8f4f 	dsb	sy
 800cb72:	61bb      	str	r3, [r7, #24]
}
 800cb74:	bf00      	nop
 800cb76:	e7fe      	b.n	800cb76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb7e:	f023 0301 	bic.w	r3, r3, #1
 800cb82:	b2da      	uxtb	r2, r3
 800cb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cb8a:	e03a      	b.n	800cc02 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb92:	f043 0301 	orr.w	r3, r3, #1
 800cb96:	b2da      	uxtb	r2, r3
 800cb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cb9e:	68ba      	ldr	r2, [r7, #8]
 800cba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba6:	699b      	ldr	r3, [r3, #24]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d10a      	bne.n	800cbc2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb0:	f383 8811 	msr	BASEPRI, r3
 800cbb4:	f3bf 8f6f 	isb	sy
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	617b      	str	r3, [r7, #20]
}
 800cbbe:	bf00      	nop
 800cbc0:	e7fe      	b.n	800cbc0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc4:	699a      	ldr	r2, [r3, #24]
 800cbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc8:	18d1      	adds	r1, r2, r3
 800cbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbd0:	f7ff ff06 	bl	800c9e0 <prvInsertTimerInActiveList>
					break;
 800cbd4:	e015      	b.n	800cc02 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbdc:	f003 0302 	and.w	r3, r3, #2
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d103      	bne.n	800cbec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cbe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbe6:	f000 fbdb 	bl	800d3a0 <vPortFree>
 800cbea:	e00a      	b.n	800cc02 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbf2:	f023 0301 	bic.w	r3, r3, #1
 800cbf6:	b2da      	uxtb	r2, r3
 800cbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cbfe:	e000      	b.n	800cc02 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cc00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cc02:	4b08      	ldr	r3, [pc, #32]	; (800cc24 <prvProcessReceivedCommands+0x1c0>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	1d39      	adds	r1, r7, #4
 800cc08:	2200      	movs	r2, #0
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7fe fa02 	bl	800b014 <xQueueReceive>
 800cc10:	4603      	mov	r3, r0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	f47f af2a 	bne.w	800ca6c <prvProcessReceivedCommands+0x8>
	}
}
 800cc18:	bf00      	nop
 800cc1a:	bf00      	nop
 800cc1c:	3730      	adds	r7, #48	; 0x30
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	20008cf4 	.word	0x20008cf4

0800cc28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b088      	sub	sp, #32
 800cc2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc2e:	e048      	b.n	800ccc2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc30:	4b2d      	ldr	r3, [pc, #180]	; (800cce8 <prvSwitchTimerLists+0xc0>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc3a:	4b2b      	ldr	r3, [pc, #172]	; (800cce8 <prvSwitchTimerLists+0xc0>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	68db      	ldr	r3, [r3, #12]
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	3304      	adds	r3, #4
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7fd ff1b 	bl	800aa84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	6a1b      	ldr	r3, [r3, #32]
 800cc52:	68f8      	ldr	r0, [r7, #12]
 800cc54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc5c:	f003 0304 	and.w	r3, r3, #4
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d02e      	beq.n	800ccc2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	699b      	ldr	r3, [r3, #24]
 800cc68:	693a      	ldr	r2, [r7, #16]
 800cc6a:	4413      	add	r3, r2
 800cc6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cc6e:	68ba      	ldr	r2, [r7, #8]
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d90e      	bls.n	800cc94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	68ba      	ldr	r2, [r7, #8]
 800cc7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	68fa      	ldr	r2, [r7, #12]
 800cc80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cc82:	4b19      	ldr	r3, [pc, #100]	; (800cce8 <prvSwitchTimerLists+0xc0>)
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	3304      	adds	r3, #4
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	4610      	mov	r0, r2
 800cc8e:	f7fd fec0 	bl	800aa12 <vListInsert>
 800cc92:	e016      	b.n	800ccc2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc94:	2300      	movs	r3, #0
 800cc96:	9300      	str	r3, [sp, #0]
 800cc98:	2300      	movs	r3, #0
 800cc9a:	693a      	ldr	r2, [r7, #16]
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	f7ff fd60 	bl	800c764 <xTimerGenericCommand>
 800cca4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d10a      	bne.n	800ccc2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ccac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb0:	f383 8811 	msr	BASEPRI, r3
 800ccb4:	f3bf 8f6f 	isb	sy
 800ccb8:	f3bf 8f4f 	dsb	sy
 800ccbc:	603b      	str	r3, [r7, #0]
}
 800ccbe:	bf00      	nop
 800ccc0:	e7fe      	b.n	800ccc0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ccc2:	4b09      	ldr	r3, [pc, #36]	; (800cce8 <prvSwitchTimerLists+0xc0>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d1b1      	bne.n	800cc30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cccc:	4b06      	ldr	r3, [pc, #24]	; (800cce8 <prvSwitchTimerLists+0xc0>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ccd2:	4b06      	ldr	r3, [pc, #24]	; (800ccec <prvSwitchTimerLists+0xc4>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	4a04      	ldr	r2, [pc, #16]	; (800cce8 <prvSwitchTimerLists+0xc0>)
 800ccd8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ccda:	4a04      	ldr	r2, [pc, #16]	; (800ccec <prvSwitchTimerLists+0xc4>)
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	6013      	str	r3, [r2, #0]
}
 800cce0:	bf00      	nop
 800cce2:	3718      	adds	r7, #24
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	20008cec 	.word	0x20008cec
 800ccec:	20008cf0 	.word	0x20008cf0

0800ccf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ccf6:	f000 f965 	bl	800cfc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ccfa:	4b15      	ldr	r3, [pc, #84]	; (800cd50 <prvCheckForValidListAndQueue+0x60>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d120      	bne.n	800cd44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cd02:	4814      	ldr	r0, [pc, #80]	; (800cd54 <prvCheckForValidListAndQueue+0x64>)
 800cd04:	f7fd fe34 	bl	800a970 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cd08:	4813      	ldr	r0, [pc, #76]	; (800cd58 <prvCheckForValidListAndQueue+0x68>)
 800cd0a:	f7fd fe31 	bl	800a970 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cd0e:	4b13      	ldr	r3, [pc, #76]	; (800cd5c <prvCheckForValidListAndQueue+0x6c>)
 800cd10:	4a10      	ldr	r2, [pc, #64]	; (800cd54 <prvCheckForValidListAndQueue+0x64>)
 800cd12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cd14:	4b12      	ldr	r3, [pc, #72]	; (800cd60 <prvCheckForValidListAndQueue+0x70>)
 800cd16:	4a10      	ldr	r2, [pc, #64]	; (800cd58 <prvCheckForValidListAndQueue+0x68>)
 800cd18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	9300      	str	r3, [sp, #0]
 800cd1e:	4b11      	ldr	r3, [pc, #68]	; (800cd64 <prvCheckForValidListAndQueue+0x74>)
 800cd20:	4a11      	ldr	r2, [pc, #68]	; (800cd68 <prvCheckForValidListAndQueue+0x78>)
 800cd22:	2110      	movs	r1, #16
 800cd24:	200a      	movs	r0, #10
 800cd26:	f7fd ff3f 	bl	800aba8 <xQueueGenericCreateStatic>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	4a08      	ldr	r2, [pc, #32]	; (800cd50 <prvCheckForValidListAndQueue+0x60>)
 800cd2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cd30:	4b07      	ldr	r3, [pc, #28]	; (800cd50 <prvCheckForValidListAndQueue+0x60>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d005      	beq.n	800cd44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cd38:	4b05      	ldr	r3, [pc, #20]	; (800cd50 <prvCheckForValidListAndQueue+0x60>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	490b      	ldr	r1, [pc, #44]	; (800cd6c <prvCheckForValidListAndQueue+0x7c>)
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7fe fb58 	bl	800b3f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd44:	f000 f96e 	bl	800d024 <vPortExitCritical>
}
 800cd48:	bf00      	nop
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	20008cf4 	.word	0x20008cf4
 800cd54:	20008cc4 	.word	0x20008cc4
 800cd58:	20008cd8 	.word	0x20008cd8
 800cd5c:	20008cec 	.word	0x20008cec
 800cd60:	20008cf0 	.word	0x20008cf0
 800cd64:	20008da0 	.word	0x20008da0
 800cd68:	20008d00 	.word	0x20008d00
 800cd6c:	0801d2cc 	.word	0x0801d2cc

0800cd70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cd70:	b480      	push	{r7}
 800cd72:	b085      	sub	sp, #20
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	3b04      	subs	r3, #4
 800cd80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cd88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	3b04      	subs	r3, #4
 800cd8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	f023 0201 	bic.w	r2, r3, #1
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	3b04      	subs	r3, #4
 800cd9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cda0:	4a0c      	ldr	r2, [pc, #48]	; (800cdd4 <pxPortInitialiseStack+0x64>)
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	3b14      	subs	r3, #20
 800cdaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	3b04      	subs	r3, #4
 800cdb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f06f 0202 	mvn.w	r2, #2
 800cdbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	3b20      	subs	r3, #32
 800cdc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3714      	adds	r7, #20
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr
 800cdd4:	0800cdd9 	.word	0x0800cdd9

0800cdd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cdde:	2300      	movs	r3, #0
 800cde0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cde2:	4b12      	ldr	r3, [pc, #72]	; (800ce2c <prvTaskExitError+0x54>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdea:	d00a      	beq.n	800ce02 <prvTaskExitError+0x2a>
	__asm volatile
 800cdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf0:	f383 8811 	msr	BASEPRI, r3
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	60fb      	str	r3, [r7, #12]
}
 800cdfe:	bf00      	nop
 800ce00:	e7fe      	b.n	800ce00 <prvTaskExitError+0x28>
	__asm volatile
 800ce02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce06:	f383 8811 	msr	BASEPRI, r3
 800ce0a:	f3bf 8f6f 	isb	sy
 800ce0e:	f3bf 8f4f 	dsb	sy
 800ce12:	60bb      	str	r3, [r7, #8]
}
 800ce14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ce16:	bf00      	nop
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d0fc      	beq.n	800ce18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ce1e:	bf00      	nop
 800ce20:	bf00      	nop
 800ce22:	3714      	adds	r7, #20
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr
 800ce2c:	20000014 	.word	0x20000014

0800ce30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ce30:	4b07      	ldr	r3, [pc, #28]	; (800ce50 <pxCurrentTCBConst2>)
 800ce32:	6819      	ldr	r1, [r3, #0]
 800ce34:	6808      	ldr	r0, [r1, #0]
 800ce36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce3a:	f380 8809 	msr	PSP, r0
 800ce3e:	f3bf 8f6f 	isb	sy
 800ce42:	f04f 0000 	mov.w	r0, #0
 800ce46:	f380 8811 	msr	BASEPRI, r0
 800ce4a:	4770      	bx	lr
 800ce4c:	f3af 8000 	nop.w

0800ce50 <pxCurrentTCBConst2>:
 800ce50:	200087c4 	.word	0x200087c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ce54:	bf00      	nop
 800ce56:	bf00      	nop

0800ce58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ce58:	4808      	ldr	r0, [pc, #32]	; (800ce7c <prvPortStartFirstTask+0x24>)
 800ce5a:	6800      	ldr	r0, [r0, #0]
 800ce5c:	6800      	ldr	r0, [r0, #0]
 800ce5e:	f380 8808 	msr	MSP, r0
 800ce62:	f04f 0000 	mov.w	r0, #0
 800ce66:	f380 8814 	msr	CONTROL, r0
 800ce6a:	b662      	cpsie	i
 800ce6c:	b661      	cpsie	f
 800ce6e:	f3bf 8f4f 	dsb	sy
 800ce72:	f3bf 8f6f 	isb	sy
 800ce76:	df00      	svc	0
 800ce78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ce7a:	bf00      	nop
 800ce7c:	e000ed08 	.word	0xe000ed08

0800ce80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b086      	sub	sp, #24
 800ce84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ce86:	4b46      	ldr	r3, [pc, #280]	; (800cfa0 <xPortStartScheduler+0x120>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a46      	ldr	r2, [pc, #280]	; (800cfa4 <xPortStartScheduler+0x124>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d10a      	bne.n	800cea6 <xPortStartScheduler+0x26>
	__asm volatile
 800ce90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce94:	f383 8811 	msr	BASEPRI, r3
 800ce98:	f3bf 8f6f 	isb	sy
 800ce9c:	f3bf 8f4f 	dsb	sy
 800cea0:	613b      	str	r3, [r7, #16]
}
 800cea2:	bf00      	nop
 800cea4:	e7fe      	b.n	800cea4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cea6:	4b3e      	ldr	r3, [pc, #248]	; (800cfa0 <xPortStartScheduler+0x120>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4a3f      	ldr	r2, [pc, #252]	; (800cfa8 <xPortStartScheduler+0x128>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d10a      	bne.n	800cec6 <xPortStartScheduler+0x46>
	__asm volatile
 800ceb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb4:	f383 8811 	msr	BASEPRI, r3
 800ceb8:	f3bf 8f6f 	isb	sy
 800cebc:	f3bf 8f4f 	dsb	sy
 800cec0:	60fb      	str	r3, [r7, #12]
}
 800cec2:	bf00      	nop
 800cec4:	e7fe      	b.n	800cec4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cec6:	4b39      	ldr	r3, [pc, #228]	; (800cfac <xPortStartScheduler+0x12c>)
 800cec8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	b2db      	uxtb	r3, r3
 800ced0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	22ff      	movs	r2, #255	; 0xff
 800ced6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cee0:	78fb      	ldrb	r3, [r7, #3]
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cee8:	b2da      	uxtb	r2, r3
 800ceea:	4b31      	ldr	r3, [pc, #196]	; (800cfb0 <xPortStartScheduler+0x130>)
 800ceec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ceee:	4b31      	ldr	r3, [pc, #196]	; (800cfb4 <xPortStartScheduler+0x134>)
 800cef0:	2207      	movs	r2, #7
 800cef2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cef4:	e009      	b.n	800cf0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cef6:	4b2f      	ldr	r3, [pc, #188]	; (800cfb4 <xPortStartScheduler+0x134>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	3b01      	subs	r3, #1
 800cefc:	4a2d      	ldr	r2, [pc, #180]	; (800cfb4 <xPortStartScheduler+0x134>)
 800cefe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cf00:	78fb      	ldrb	r3, [r7, #3]
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	005b      	lsls	r3, r3, #1
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cf0a:	78fb      	ldrb	r3, [r7, #3]
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf12:	2b80      	cmp	r3, #128	; 0x80
 800cf14:	d0ef      	beq.n	800cef6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cf16:	4b27      	ldr	r3, [pc, #156]	; (800cfb4 <xPortStartScheduler+0x134>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f1c3 0307 	rsb	r3, r3, #7
 800cf1e:	2b04      	cmp	r3, #4
 800cf20:	d00a      	beq.n	800cf38 <xPortStartScheduler+0xb8>
	__asm volatile
 800cf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf26:	f383 8811 	msr	BASEPRI, r3
 800cf2a:	f3bf 8f6f 	isb	sy
 800cf2e:	f3bf 8f4f 	dsb	sy
 800cf32:	60bb      	str	r3, [r7, #8]
}
 800cf34:	bf00      	nop
 800cf36:	e7fe      	b.n	800cf36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cf38:	4b1e      	ldr	r3, [pc, #120]	; (800cfb4 <xPortStartScheduler+0x134>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	021b      	lsls	r3, r3, #8
 800cf3e:	4a1d      	ldr	r2, [pc, #116]	; (800cfb4 <xPortStartScheduler+0x134>)
 800cf40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cf42:	4b1c      	ldr	r3, [pc, #112]	; (800cfb4 <xPortStartScheduler+0x134>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cf4a:	4a1a      	ldr	r2, [pc, #104]	; (800cfb4 <xPortStartScheduler+0x134>)
 800cf4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	b2da      	uxtb	r2, r3
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cf56:	4b18      	ldr	r3, [pc, #96]	; (800cfb8 <xPortStartScheduler+0x138>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a17      	ldr	r2, [pc, #92]	; (800cfb8 <xPortStartScheduler+0x138>)
 800cf5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cf60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cf62:	4b15      	ldr	r3, [pc, #84]	; (800cfb8 <xPortStartScheduler+0x138>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4a14      	ldr	r2, [pc, #80]	; (800cfb8 <xPortStartScheduler+0x138>)
 800cf68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cf6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cf6e:	f000 f8dd 	bl	800d12c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cf72:	4b12      	ldr	r3, [pc, #72]	; (800cfbc <xPortStartScheduler+0x13c>)
 800cf74:	2200      	movs	r2, #0
 800cf76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cf78:	f000 f8fc 	bl	800d174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cf7c:	4b10      	ldr	r3, [pc, #64]	; (800cfc0 <xPortStartScheduler+0x140>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4a0f      	ldr	r2, [pc, #60]	; (800cfc0 <xPortStartScheduler+0x140>)
 800cf82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cf86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cf88:	f7ff ff66 	bl	800ce58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cf8c:	f7fe fe42 	bl	800bc14 <vTaskSwitchContext>
	prvTaskExitError();
 800cf90:	f7ff ff22 	bl	800cdd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cf94:	2300      	movs	r3, #0
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3718      	adds	r7, #24
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	e000ed00 	.word	0xe000ed00
 800cfa4:	410fc271 	.word	0x410fc271
 800cfa8:	410fc270 	.word	0x410fc270
 800cfac:	e000e400 	.word	0xe000e400
 800cfb0:	20008df0 	.word	0x20008df0
 800cfb4:	20008df4 	.word	0x20008df4
 800cfb8:	e000ed20 	.word	0xe000ed20
 800cfbc:	20000014 	.word	0x20000014
 800cfc0:	e000ef34 	.word	0xe000ef34

0800cfc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
	__asm volatile
 800cfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfce:	f383 8811 	msr	BASEPRI, r3
 800cfd2:	f3bf 8f6f 	isb	sy
 800cfd6:	f3bf 8f4f 	dsb	sy
 800cfda:	607b      	str	r3, [r7, #4]
}
 800cfdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cfde:	4b0f      	ldr	r3, [pc, #60]	; (800d01c <vPortEnterCritical+0x58>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	4a0d      	ldr	r2, [pc, #52]	; (800d01c <vPortEnterCritical+0x58>)
 800cfe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cfe8:	4b0c      	ldr	r3, [pc, #48]	; (800d01c <vPortEnterCritical+0x58>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d10f      	bne.n	800d010 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cff0:	4b0b      	ldr	r3, [pc, #44]	; (800d020 <vPortEnterCritical+0x5c>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	b2db      	uxtb	r3, r3
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d00a      	beq.n	800d010 <vPortEnterCritical+0x4c>
	__asm volatile
 800cffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffe:	f383 8811 	msr	BASEPRI, r3
 800d002:	f3bf 8f6f 	isb	sy
 800d006:	f3bf 8f4f 	dsb	sy
 800d00a:	603b      	str	r3, [r7, #0]
}
 800d00c:	bf00      	nop
 800d00e:	e7fe      	b.n	800d00e <vPortEnterCritical+0x4a>
	}
}
 800d010:	bf00      	nop
 800d012:	370c      	adds	r7, #12
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr
 800d01c:	20000014 	.word	0x20000014
 800d020:	e000ed04 	.word	0xe000ed04

0800d024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d02a:	4b12      	ldr	r3, [pc, #72]	; (800d074 <vPortExitCritical+0x50>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d10a      	bne.n	800d048 <vPortExitCritical+0x24>
	__asm volatile
 800d032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d036:	f383 8811 	msr	BASEPRI, r3
 800d03a:	f3bf 8f6f 	isb	sy
 800d03e:	f3bf 8f4f 	dsb	sy
 800d042:	607b      	str	r3, [r7, #4]
}
 800d044:	bf00      	nop
 800d046:	e7fe      	b.n	800d046 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d048:	4b0a      	ldr	r3, [pc, #40]	; (800d074 <vPortExitCritical+0x50>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	3b01      	subs	r3, #1
 800d04e:	4a09      	ldr	r2, [pc, #36]	; (800d074 <vPortExitCritical+0x50>)
 800d050:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d052:	4b08      	ldr	r3, [pc, #32]	; (800d074 <vPortExitCritical+0x50>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d105      	bne.n	800d066 <vPortExitCritical+0x42>
 800d05a:	2300      	movs	r3, #0
 800d05c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	f383 8811 	msr	BASEPRI, r3
}
 800d064:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d066:	bf00      	nop
 800d068:	370c      	adds	r7, #12
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	20000014 	.word	0x20000014
	...

0800d080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d080:	f3ef 8009 	mrs	r0, PSP
 800d084:	f3bf 8f6f 	isb	sy
 800d088:	4b15      	ldr	r3, [pc, #84]	; (800d0e0 <pxCurrentTCBConst>)
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	f01e 0f10 	tst.w	lr, #16
 800d090:	bf08      	it	eq
 800d092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d09a:	6010      	str	r0, [r2, #0]
 800d09c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d0a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d0a4:	f380 8811 	msr	BASEPRI, r0
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	f3bf 8f6f 	isb	sy
 800d0b0:	f7fe fdb0 	bl	800bc14 <vTaskSwitchContext>
 800d0b4:	f04f 0000 	mov.w	r0, #0
 800d0b8:	f380 8811 	msr	BASEPRI, r0
 800d0bc:	bc09      	pop	{r0, r3}
 800d0be:	6819      	ldr	r1, [r3, #0]
 800d0c0:	6808      	ldr	r0, [r1, #0]
 800d0c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c6:	f01e 0f10 	tst.w	lr, #16
 800d0ca:	bf08      	it	eq
 800d0cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d0d0:	f380 8809 	msr	PSP, r0
 800d0d4:	f3bf 8f6f 	isb	sy
 800d0d8:	4770      	bx	lr
 800d0da:	bf00      	nop
 800d0dc:	f3af 8000 	nop.w

0800d0e0 <pxCurrentTCBConst>:
 800d0e0:	200087c4 	.word	0x200087c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d0e4:	bf00      	nop
 800d0e6:	bf00      	nop

0800d0e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
	__asm volatile
 800d0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f2:	f383 8811 	msr	BASEPRI, r3
 800d0f6:	f3bf 8f6f 	isb	sy
 800d0fa:	f3bf 8f4f 	dsb	sy
 800d0fe:	607b      	str	r3, [r7, #4]
}
 800d100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d102:	f7fe fccd 	bl	800baa0 <xTaskIncrementTick>
 800d106:	4603      	mov	r3, r0
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d003      	beq.n	800d114 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d10c:	4b06      	ldr	r3, [pc, #24]	; (800d128 <xPortSysTickHandler+0x40>)
 800d10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d112:	601a      	str	r2, [r3, #0]
 800d114:	2300      	movs	r3, #0
 800d116:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	f383 8811 	msr	BASEPRI, r3
}
 800d11e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d120:	bf00      	nop
 800d122:	3708      	adds	r7, #8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	e000ed04 	.word	0xe000ed04

0800d12c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d12c:	b480      	push	{r7}
 800d12e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d130:	4b0b      	ldr	r3, [pc, #44]	; (800d160 <vPortSetupTimerInterrupt+0x34>)
 800d132:	2200      	movs	r2, #0
 800d134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d136:	4b0b      	ldr	r3, [pc, #44]	; (800d164 <vPortSetupTimerInterrupt+0x38>)
 800d138:	2200      	movs	r2, #0
 800d13a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d13c:	4b0a      	ldr	r3, [pc, #40]	; (800d168 <vPortSetupTimerInterrupt+0x3c>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a0a      	ldr	r2, [pc, #40]	; (800d16c <vPortSetupTimerInterrupt+0x40>)
 800d142:	fba2 2303 	umull	r2, r3, r2, r3
 800d146:	099b      	lsrs	r3, r3, #6
 800d148:	4a09      	ldr	r2, [pc, #36]	; (800d170 <vPortSetupTimerInterrupt+0x44>)
 800d14a:	3b01      	subs	r3, #1
 800d14c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d14e:	4b04      	ldr	r3, [pc, #16]	; (800d160 <vPortSetupTimerInterrupt+0x34>)
 800d150:	2207      	movs	r2, #7
 800d152:	601a      	str	r2, [r3, #0]
}
 800d154:	bf00      	nop
 800d156:	46bd      	mov	sp, r7
 800d158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15c:	4770      	bx	lr
 800d15e:	bf00      	nop
 800d160:	e000e010 	.word	0xe000e010
 800d164:	e000e018 	.word	0xe000e018
 800d168:	20000008 	.word	0x20000008
 800d16c:	10624dd3 	.word	0x10624dd3
 800d170:	e000e014 	.word	0xe000e014

0800d174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d174:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d184 <vPortEnableVFP+0x10>
 800d178:	6801      	ldr	r1, [r0, #0]
 800d17a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d17e:	6001      	str	r1, [r0, #0]
 800d180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d182:	bf00      	nop
 800d184:	e000ed88 	.word	0xe000ed88

0800d188 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d188:	b480      	push	{r7}
 800d18a:	b085      	sub	sp, #20
 800d18c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d18e:	f3ef 8305 	mrs	r3, IPSR
 800d192:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2b0f      	cmp	r3, #15
 800d198:	d914      	bls.n	800d1c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d19a:	4a17      	ldr	r2, [pc, #92]	; (800d1f8 <vPortValidateInterruptPriority+0x70>)
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	4413      	add	r3, r2
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d1a4:	4b15      	ldr	r3, [pc, #84]	; (800d1fc <vPortValidateInterruptPriority+0x74>)
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	7afa      	ldrb	r2, [r7, #11]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d20a      	bcs.n	800d1c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b2:	f383 8811 	msr	BASEPRI, r3
 800d1b6:	f3bf 8f6f 	isb	sy
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	607b      	str	r3, [r7, #4]
}
 800d1c0:	bf00      	nop
 800d1c2:	e7fe      	b.n	800d1c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d1c4:	4b0e      	ldr	r3, [pc, #56]	; (800d200 <vPortValidateInterruptPriority+0x78>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d1cc:	4b0d      	ldr	r3, [pc, #52]	; (800d204 <vPortValidateInterruptPriority+0x7c>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d90a      	bls.n	800d1ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d8:	f383 8811 	msr	BASEPRI, r3
 800d1dc:	f3bf 8f6f 	isb	sy
 800d1e0:	f3bf 8f4f 	dsb	sy
 800d1e4:	603b      	str	r3, [r7, #0]
}
 800d1e6:	bf00      	nop
 800d1e8:	e7fe      	b.n	800d1e8 <vPortValidateInterruptPriority+0x60>
	}
 800d1ea:	bf00      	nop
 800d1ec:	3714      	adds	r7, #20
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr
 800d1f6:	bf00      	nop
 800d1f8:	e000e3f0 	.word	0xe000e3f0
 800d1fc:	20008df0 	.word	0x20008df0
 800d200:	e000ed0c 	.word	0xe000ed0c
 800d204:	20008df4 	.word	0x20008df4

0800d208 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b08a      	sub	sp, #40	; 0x28
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d210:	2300      	movs	r3, #0
 800d212:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d214:	f7fe fb88 	bl	800b928 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d218:	4b5b      	ldr	r3, [pc, #364]	; (800d388 <pvPortMalloc+0x180>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d101      	bne.n	800d224 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d220:	f000 f920 	bl	800d464 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d224:	4b59      	ldr	r3, [pc, #356]	; (800d38c <pvPortMalloc+0x184>)
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	4013      	ands	r3, r2
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	f040 8093 	bne.w	800d358 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d01d      	beq.n	800d274 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d238:	2208      	movs	r2, #8
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	4413      	add	r3, r2
 800d23e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f003 0307 	and.w	r3, r3, #7
 800d246:	2b00      	cmp	r3, #0
 800d248:	d014      	beq.n	800d274 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f023 0307 	bic.w	r3, r3, #7
 800d250:	3308      	adds	r3, #8
 800d252:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f003 0307 	and.w	r3, r3, #7
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d00a      	beq.n	800d274 <pvPortMalloc+0x6c>
	__asm volatile
 800d25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d262:	f383 8811 	msr	BASEPRI, r3
 800d266:	f3bf 8f6f 	isb	sy
 800d26a:	f3bf 8f4f 	dsb	sy
 800d26e:	617b      	str	r3, [r7, #20]
}
 800d270:	bf00      	nop
 800d272:	e7fe      	b.n	800d272 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d06e      	beq.n	800d358 <pvPortMalloc+0x150>
 800d27a:	4b45      	ldr	r3, [pc, #276]	; (800d390 <pvPortMalloc+0x188>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	429a      	cmp	r2, r3
 800d282:	d869      	bhi.n	800d358 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d284:	4b43      	ldr	r3, [pc, #268]	; (800d394 <pvPortMalloc+0x18c>)
 800d286:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d288:	4b42      	ldr	r3, [pc, #264]	; (800d394 <pvPortMalloc+0x18c>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d28e:	e004      	b.n	800d29a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d292:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d903      	bls.n	800d2ac <pvPortMalloc+0xa4>
 800d2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d1f1      	bne.n	800d290 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d2ac:	4b36      	ldr	r3, [pc, #216]	; (800d388 <pvPortMalloc+0x180>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d050      	beq.n	800d358 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d2b6:	6a3b      	ldr	r3, [r7, #32]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	2208      	movs	r2, #8
 800d2bc:	4413      	add	r3, r2
 800d2be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	6a3b      	ldr	r3, [r7, #32]
 800d2c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ca:	685a      	ldr	r2, [r3, #4]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	1ad2      	subs	r2, r2, r3
 800d2d0:	2308      	movs	r3, #8
 800d2d2:	005b      	lsls	r3, r3, #1
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d91f      	bls.n	800d318 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d2d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4413      	add	r3, r2
 800d2de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2e0:	69bb      	ldr	r3, [r7, #24]
 800d2e2:	f003 0307 	and.w	r3, r3, #7
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00a      	beq.n	800d300 <pvPortMalloc+0xf8>
	__asm volatile
 800d2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ee:	f383 8811 	msr	BASEPRI, r3
 800d2f2:	f3bf 8f6f 	isb	sy
 800d2f6:	f3bf 8f4f 	dsb	sy
 800d2fa:	613b      	str	r3, [r7, #16]
}
 800d2fc:	bf00      	nop
 800d2fe:	e7fe      	b.n	800d2fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d302:	685a      	ldr	r2, [r3, #4]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	1ad2      	subs	r2, r2, r3
 800d308:	69bb      	ldr	r3, [r7, #24]
 800d30a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d312:	69b8      	ldr	r0, [r7, #24]
 800d314:	f000 f908 	bl	800d528 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d318:	4b1d      	ldr	r3, [pc, #116]	; (800d390 <pvPortMalloc+0x188>)
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	1ad3      	subs	r3, r2, r3
 800d322:	4a1b      	ldr	r2, [pc, #108]	; (800d390 <pvPortMalloc+0x188>)
 800d324:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d326:	4b1a      	ldr	r3, [pc, #104]	; (800d390 <pvPortMalloc+0x188>)
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	4b1b      	ldr	r3, [pc, #108]	; (800d398 <pvPortMalloc+0x190>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	429a      	cmp	r2, r3
 800d330:	d203      	bcs.n	800d33a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d332:	4b17      	ldr	r3, [pc, #92]	; (800d390 <pvPortMalloc+0x188>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	4a18      	ldr	r2, [pc, #96]	; (800d398 <pvPortMalloc+0x190>)
 800d338:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33c:	685a      	ldr	r2, [r3, #4]
 800d33e:	4b13      	ldr	r3, [pc, #76]	; (800d38c <pvPortMalloc+0x184>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	431a      	orrs	r2, r3
 800d344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d346:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34a:	2200      	movs	r2, #0
 800d34c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d34e:	4b13      	ldr	r3, [pc, #76]	; (800d39c <pvPortMalloc+0x194>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	3301      	adds	r3, #1
 800d354:	4a11      	ldr	r2, [pc, #68]	; (800d39c <pvPortMalloc+0x194>)
 800d356:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d358:	f7fe faf4 	bl	800b944 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d35c:	69fb      	ldr	r3, [r7, #28]
 800d35e:	f003 0307 	and.w	r3, r3, #7
 800d362:	2b00      	cmp	r3, #0
 800d364:	d00a      	beq.n	800d37c <pvPortMalloc+0x174>
	__asm volatile
 800d366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36a:	f383 8811 	msr	BASEPRI, r3
 800d36e:	f3bf 8f6f 	isb	sy
 800d372:	f3bf 8f4f 	dsb	sy
 800d376:	60fb      	str	r3, [r7, #12]
}
 800d378:	bf00      	nop
 800d37a:	e7fe      	b.n	800d37a <pvPortMalloc+0x172>
	return pvReturn;
 800d37c:	69fb      	ldr	r3, [r7, #28]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3728      	adds	r7, #40	; 0x28
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	20010330 	.word	0x20010330
 800d38c:	20010344 	.word	0x20010344
 800d390:	20010334 	.word	0x20010334
 800d394:	20010328 	.word	0x20010328
 800d398:	20010338 	.word	0x20010338
 800d39c:	2001033c 	.word	0x2001033c

0800d3a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b086      	sub	sp, #24
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d04d      	beq.n	800d44e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d3b2:	2308      	movs	r3, #8
 800d3b4:	425b      	negs	r3, r3
 800d3b6:	697a      	ldr	r2, [r7, #20]
 800d3b8:	4413      	add	r3, r2
 800d3ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	685a      	ldr	r2, [r3, #4]
 800d3c4:	4b24      	ldr	r3, [pc, #144]	; (800d458 <vPortFree+0xb8>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4013      	ands	r3, r2
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d10a      	bne.n	800d3e4 <vPortFree+0x44>
	__asm volatile
 800d3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d2:	f383 8811 	msr	BASEPRI, r3
 800d3d6:	f3bf 8f6f 	isb	sy
 800d3da:	f3bf 8f4f 	dsb	sy
 800d3de:	60fb      	str	r3, [r7, #12]
}
 800d3e0:	bf00      	nop
 800d3e2:	e7fe      	b.n	800d3e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d00a      	beq.n	800d402 <vPortFree+0x62>
	__asm volatile
 800d3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f0:	f383 8811 	msr	BASEPRI, r3
 800d3f4:	f3bf 8f6f 	isb	sy
 800d3f8:	f3bf 8f4f 	dsb	sy
 800d3fc:	60bb      	str	r3, [r7, #8]
}
 800d3fe:	bf00      	nop
 800d400:	e7fe      	b.n	800d400 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	685a      	ldr	r2, [r3, #4]
 800d406:	4b14      	ldr	r3, [pc, #80]	; (800d458 <vPortFree+0xb8>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4013      	ands	r3, r2
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d01e      	beq.n	800d44e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d11a      	bne.n	800d44e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	685a      	ldr	r2, [r3, #4]
 800d41c:	4b0e      	ldr	r3, [pc, #56]	; (800d458 <vPortFree+0xb8>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	43db      	mvns	r3, r3
 800d422:	401a      	ands	r2, r3
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d428:	f7fe fa7e 	bl	800b928 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	685a      	ldr	r2, [r3, #4]
 800d430:	4b0a      	ldr	r3, [pc, #40]	; (800d45c <vPortFree+0xbc>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4413      	add	r3, r2
 800d436:	4a09      	ldr	r2, [pc, #36]	; (800d45c <vPortFree+0xbc>)
 800d438:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d43a:	6938      	ldr	r0, [r7, #16]
 800d43c:	f000 f874 	bl	800d528 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d440:	4b07      	ldr	r3, [pc, #28]	; (800d460 <vPortFree+0xc0>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3301      	adds	r3, #1
 800d446:	4a06      	ldr	r2, [pc, #24]	; (800d460 <vPortFree+0xc0>)
 800d448:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d44a:	f7fe fa7b 	bl	800b944 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d44e:	bf00      	nop
 800d450:	3718      	adds	r7, #24
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	20010344 	.word	0x20010344
 800d45c:	20010334 	.word	0x20010334
 800d460:	20010340 	.word	0x20010340

0800d464 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d464:	b480      	push	{r7}
 800d466:	b085      	sub	sp, #20
 800d468:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d46a:	f247 5330 	movw	r3, #30000	; 0x7530
 800d46e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d470:	4b27      	ldr	r3, [pc, #156]	; (800d510 <prvHeapInit+0xac>)
 800d472:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f003 0307 	and.w	r3, r3, #7
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d00c      	beq.n	800d498 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	3307      	adds	r3, #7
 800d482:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f023 0307 	bic.w	r3, r3, #7
 800d48a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d48c:	68ba      	ldr	r2, [r7, #8]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	1ad3      	subs	r3, r2, r3
 800d492:	4a1f      	ldr	r2, [pc, #124]	; (800d510 <prvHeapInit+0xac>)
 800d494:	4413      	add	r3, r2
 800d496:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d49c:	4a1d      	ldr	r2, [pc, #116]	; (800d514 <prvHeapInit+0xb0>)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d4a2:	4b1c      	ldr	r3, [pc, #112]	; (800d514 <prvHeapInit+0xb0>)
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	68ba      	ldr	r2, [r7, #8]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d4b0:	2208      	movs	r2, #8
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	1a9b      	subs	r3, r3, r2
 800d4b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f023 0307 	bic.w	r3, r3, #7
 800d4be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	4a15      	ldr	r2, [pc, #84]	; (800d518 <prvHeapInit+0xb4>)
 800d4c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d4c6:	4b14      	ldr	r3, [pc, #80]	; (800d518 <prvHeapInit+0xb4>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d4ce:	4b12      	ldr	r3, [pc, #72]	; (800d518 <prvHeapInit+0xb4>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	68fa      	ldr	r2, [r7, #12]
 800d4de:	1ad2      	subs	r2, r2, r3
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d4e4:	4b0c      	ldr	r3, [pc, #48]	; (800d518 <prvHeapInit+0xb4>)
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	4a0a      	ldr	r2, [pc, #40]	; (800d51c <prvHeapInit+0xb8>)
 800d4f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	4a09      	ldr	r2, [pc, #36]	; (800d520 <prvHeapInit+0xbc>)
 800d4fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d4fc:	4b09      	ldr	r3, [pc, #36]	; (800d524 <prvHeapInit+0xc0>)
 800d4fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d502:	601a      	str	r2, [r3, #0]
}
 800d504:	bf00      	nop
 800d506:	3714      	adds	r7, #20
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr
 800d510:	20008df8 	.word	0x20008df8
 800d514:	20010328 	.word	0x20010328
 800d518:	20010330 	.word	0x20010330
 800d51c:	20010338 	.word	0x20010338
 800d520:	20010334 	.word	0x20010334
 800d524:	20010344 	.word	0x20010344

0800d528 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d528:	b480      	push	{r7}
 800d52a:	b085      	sub	sp, #20
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d530:	4b28      	ldr	r3, [pc, #160]	; (800d5d4 <prvInsertBlockIntoFreeList+0xac>)
 800d532:	60fb      	str	r3, [r7, #12]
 800d534:	e002      	b.n	800d53c <prvInsertBlockIntoFreeList+0x14>
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	60fb      	str	r3, [r7, #12]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	687a      	ldr	r2, [r7, #4]
 800d542:	429a      	cmp	r2, r3
 800d544:	d8f7      	bhi.n	800d536 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	68ba      	ldr	r2, [r7, #8]
 800d550:	4413      	add	r3, r2
 800d552:	687a      	ldr	r2, [r7, #4]
 800d554:	429a      	cmp	r2, r3
 800d556:	d108      	bne.n	800d56a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	685a      	ldr	r2, [r3, #4]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	441a      	add	r2, r3
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	68ba      	ldr	r2, [r7, #8]
 800d574:	441a      	add	r2, r3
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d118      	bne.n	800d5b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	4b15      	ldr	r3, [pc, #84]	; (800d5d8 <prvInsertBlockIntoFreeList+0xb0>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	429a      	cmp	r2, r3
 800d588:	d00d      	beq.n	800d5a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	685a      	ldr	r2, [r3, #4]
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	685b      	ldr	r3, [r3, #4]
 800d594:	441a      	add	r2, r3
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	601a      	str	r2, [r3, #0]
 800d5a4:	e008      	b.n	800d5b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d5a6:	4b0c      	ldr	r3, [pc, #48]	; (800d5d8 <prvInsertBlockIntoFreeList+0xb0>)
 800d5a8:	681a      	ldr	r2, [r3, #0]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	601a      	str	r2, [r3, #0]
 800d5ae:	e003      	b.n	800d5b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d5b8:	68fa      	ldr	r2, [r7, #12]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d002      	beq.n	800d5c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d5c6:	bf00      	nop
 800d5c8:	3714      	adds	r7, #20
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr
 800d5d2:	bf00      	nop
 800d5d4:	20010328 	.word	0x20010328
 800d5d8:	20010330 	.word	0x20010330

0800d5dc <rcl_get_zero_initialized_init_options>:
 800d5dc:	2000      	movs	r0, #0
 800d5de:	4770      	bx	lr

0800d5e0 <rcl_init_options_init>:
 800d5e0:	b084      	sub	sp, #16
 800d5e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5e4:	b091      	sub	sp, #68	; 0x44
 800d5e6:	af17      	add	r7, sp, #92	; 0x5c
 800d5e8:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800d5ec:	2800      	cmp	r0, #0
 800d5ee:	d044      	beq.n	800d67a <rcl_init_options_init+0x9a>
 800d5f0:	6803      	ldr	r3, [r0, #0]
 800d5f2:	4606      	mov	r6, r0
 800d5f4:	b133      	cbz	r3, 800d604 <rcl_init_options_init+0x24>
 800d5f6:	2464      	movs	r4, #100	; 0x64
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	b011      	add	sp, #68	; 0x44
 800d5fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d600:	b004      	add	sp, #16
 800d602:	4770      	bx	lr
 800d604:	4638      	mov	r0, r7
 800d606:	f001 f8f7 	bl	800e7f8 <rcutils_allocator_is_valid>
 800d60a:	2800      	cmp	r0, #0
 800d60c:	d035      	beq.n	800d67a <rcl_init_options_init+0x9a>
 800d60e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d610:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800d612:	2050      	movs	r0, #80	; 0x50
 800d614:	4798      	blx	r3
 800d616:	4604      	mov	r4, r0
 800d618:	6030      	str	r0, [r6, #0]
 800d61a:	2800      	cmp	r0, #0
 800d61c:	d02f      	beq.n	800d67e <rcl_init_options_init+0x9e>
 800d61e:	46bc      	mov	ip, r7
 800d620:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d624:	4625      	mov	r5, r4
 800d626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d628:	f8dc 3000 	ldr.w	r3, [ip]
 800d62c:	602b      	str	r3, [r5, #0]
 800d62e:	a802      	add	r0, sp, #8
 800d630:	ad02      	add	r5, sp, #8
 800d632:	f001 fb71 	bl	800ed18 <rmw_get_zero_initialized_init_options>
 800d636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d638:	3418      	adds	r4, #24
 800d63a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d63c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d63e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d644:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d648:	6833      	ldr	r3, [r6, #0]
 800d64a:	e884 0003 	stmia.w	r4, {r0, r1}
 800d64e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800d652:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d656:	f103 0018 	add.w	r0, r3, #24
 800d65a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d65e:	f001 fc23 	bl	800eea8 <rmw_init_options_init>
 800d662:	4604      	mov	r4, r0
 800d664:	2800      	cmp	r0, #0
 800d666:	d0c7      	beq.n	800d5f8 <rcl_init_options_init+0x18>
 800d668:	6830      	ldr	r0, [r6, #0]
 800d66a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d66c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800d66e:	4798      	blx	r3
 800d670:	4620      	mov	r0, r4
 800d672:	f007 f9b9 	bl	80149e8 <rcl_convert_rmw_ret_to_rcl_ret>
 800d676:	4604      	mov	r4, r0
 800d678:	e7be      	b.n	800d5f8 <rcl_init_options_init+0x18>
 800d67a:	240b      	movs	r4, #11
 800d67c:	e7bc      	b.n	800d5f8 <rcl_init_options_init+0x18>
 800d67e:	240a      	movs	r4, #10
 800d680:	e7ba      	b.n	800d5f8 <rcl_init_options_init+0x18>
 800d682:	bf00      	nop

0800d684 <rcl_init_options_fini>:
 800d684:	b570      	push	{r4, r5, r6, lr}
 800d686:	b086      	sub	sp, #24
 800d688:	b1c0      	cbz	r0, 800d6bc <rcl_init_options_fini+0x38>
 800d68a:	6804      	ldr	r4, [r0, #0]
 800d68c:	4606      	mov	r6, r0
 800d68e:	b1ac      	cbz	r4, 800d6bc <rcl_init_options_fini+0x38>
 800d690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d692:	ad01      	add	r5, sp, #4
 800d694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d696:	6823      	ldr	r3, [r4, #0]
 800d698:	602b      	str	r3, [r5, #0]
 800d69a:	a801      	add	r0, sp, #4
 800d69c:	f001 f8ac 	bl	800e7f8 <rcutils_allocator_is_valid>
 800d6a0:	b160      	cbz	r0, 800d6bc <rcl_init_options_fini+0x38>
 800d6a2:	6830      	ldr	r0, [r6, #0]
 800d6a4:	3018      	adds	r0, #24
 800d6a6:	f001 fc9b 	bl	800efe0 <rmw_init_options_fini>
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	b950      	cbnz	r0, 800d6c4 <rcl_init_options_fini+0x40>
 800d6ae:	6830      	ldr	r0, [r6, #0]
 800d6b0:	9b02      	ldr	r3, [sp, #8]
 800d6b2:	9905      	ldr	r1, [sp, #20]
 800d6b4:	4798      	blx	r3
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	b006      	add	sp, #24
 800d6ba:	bd70      	pop	{r4, r5, r6, pc}
 800d6bc:	240b      	movs	r4, #11
 800d6be:	4620      	mov	r0, r4
 800d6c0:	b006      	add	sp, #24
 800d6c2:	bd70      	pop	{r4, r5, r6, pc}
 800d6c4:	f007 f990 	bl	80149e8 <rcl_convert_rmw_ret_to_rcl_ret>
 800d6c8:	4604      	mov	r4, r0
 800d6ca:	e7f8      	b.n	800d6be <rcl_init_options_fini+0x3a>

0800d6cc <rcl_init_options_copy>:
 800d6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d0:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 800d6d4:	2800      	cmp	r0, #0
 800d6d6:	d067      	beq.n	800d7a8 <rcl_init_options_copy+0xdc>
 800d6d8:	6806      	ldr	r6, [r0, #0]
 800d6da:	4605      	mov	r5, r0
 800d6dc:	2e00      	cmp	r6, #0
 800d6de:	d063      	beq.n	800d7a8 <rcl_init_options_copy+0xdc>
 800d6e0:	460c      	mov	r4, r1
 800d6e2:	2900      	cmp	r1, #0
 800d6e4:	d060      	beq.n	800d7a8 <rcl_init_options_copy+0xdc>
 800d6e6:	680b      	ldr	r3, [r1, #0]
 800d6e8:	b12b      	cbz	r3, 800d6f6 <rcl_init_options_copy+0x2a>
 800d6ea:	2664      	movs	r6, #100	; 0x64
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 800d6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d6f8:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800d6fc:	4647      	mov	r7, r8
 800d6fe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d700:	4640      	mov	r0, r8
 800d702:	6833      	ldr	r3, [r6, #0]
 800d704:	603b      	str	r3, [r7, #0]
 800d706:	f001 f877 	bl	800e7f8 <rcutils_allocator_is_valid>
 800d70a:	2800      	cmp	r0, #0
 800d70c:	d04c      	beq.n	800d7a8 <rcl_init_options_copy+0xdc>
 800d70e:	f8d8 3000 	ldr.w	r3, [r8]
 800d712:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d716:	2050      	movs	r0, #80	; 0x50
 800d718:	4798      	blx	r3
 800d71a:	4606      	mov	r6, r0
 800d71c:	6020      	str	r0, [r4, #0]
 800d71e:	2800      	cmp	r0, #0
 800d720:	d07c      	beq.n	800d81c <rcl_init_options_copy+0x150>
 800d722:	46c4      	mov	ip, r8
 800d724:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d728:	4637      	mov	r7, r6
 800d72a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d72c:	f8dc 3000 	ldr.w	r3, [ip]
 800d730:	603b      	str	r3, [r7, #0]
 800d732:	a802      	add	r0, sp, #8
 800d734:	af02      	add	r7, sp, #8
 800d736:	f001 faef 	bl	800ed18 <rmw_get_zero_initialized_init_options>
 800d73a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d73c:	3618      	adds	r6, #24
 800d73e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d740:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d742:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d744:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d746:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d748:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d74c:	e886 0003 	stmia.w	r6, {r0, r1}
 800d750:	ab13      	add	r3, sp, #76	; 0x4c
 800d752:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d756:	6823      	ldr	r3, [r4, #0]
 800d758:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d75c:	f103 0018 	add.w	r0, r3, #24
 800d760:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800d764:	f001 fba0 	bl	800eea8 <rmw_init_options_init>
 800d768:	4606      	mov	r6, r0
 800d76a:	bb18      	cbnz	r0, 800d7b4 <rcl_init_options_copy+0xe8>
 800d76c:	682f      	ldr	r7, [r5, #0]
 800d76e:	f8d4 c000 	ldr.w	ip, [r4]
 800d772:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d774:	4666      	mov	r6, ip
 800d776:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	6033      	str	r3, [r6, #0]
 800d77c:	f10c 0018 	add.w	r0, ip, #24
 800d780:	f001 fc2e 	bl	800efe0 <rmw_init_options_fini>
 800d784:	4607      	mov	r7, r0
 800d786:	b310      	cbz	r0, 800d7ce <rcl_init_options_copy+0x102>
 800d788:	4640      	mov	r0, r8
 800d78a:	f001 f8ff 	bl	800e98c <rcutils_get_error_string>
 800d78e:	f001 f925 	bl	800e9dc <rcutils_reset_error>
 800d792:	4620      	mov	r0, r4
 800d794:	f7ff ff76 	bl	800d684 <rcl_init_options_fini>
 800d798:	4606      	mov	r6, r0
 800d79a:	2800      	cmp	r0, #0
 800d79c:	d1a6      	bne.n	800d6ec <rcl_init_options_copy+0x20>
 800d79e:	4638      	mov	r0, r7
 800d7a0:	f007 f922 	bl	80149e8 <rcl_convert_rmw_ret_to_rcl_ret>
 800d7a4:	4606      	mov	r6, r0
 800d7a6:	e7a1      	b.n	800d6ec <rcl_init_options_copy+0x20>
 800d7a8:	260b      	movs	r6, #11
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 800d7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d7b8:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d7bc:	6820      	ldr	r0, [r4, #0]
 800d7be:	4798      	blx	r3
 800d7c0:	4630      	mov	r0, r6
 800d7c2:	f007 f911 	bl	80149e8 <rcl_convert_rmw_ret_to_rcl_ret>
 800d7c6:	4606      	mov	r6, r0
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	d0cf      	beq.n	800d76c <rcl_init_options_copy+0xa0>
 800d7cc:	e78e      	b.n	800d6ec <rcl_init_options_copy+0x20>
 800d7ce:	a802      	add	r0, sp, #8
 800d7d0:	ae02      	add	r6, sp, #8
 800d7d2:	6827      	ldr	r7, [r4, #0]
 800d7d4:	f001 faa0 	bl	800ed18 <rmw_get_zero_initialized_init_options>
 800d7d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d7da:	3718      	adds	r7, #24
 800d7dc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d7de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d7e0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d7e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d7e4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d7e6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d7ea:	682a      	ldr	r2, [r5, #0]
 800d7ec:	6823      	ldr	r3, [r4, #0]
 800d7ee:	e887 0003 	stmia.w	r7, {r0, r1}
 800d7f2:	f102 0018 	add.w	r0, r2, #24
 800d7f6:	f103 0118 	add.w	r1, r3, #24
 800d7fa:	f001 fbad 	bl	800ef58 <rmw_init_options_copy>
 800d7fe:	4606      	mov	r6, r0
 800d800:	2800      	cmp	r0, #0
 800d802:	f43f af73 	beq.w	800d6ec <rcl_init_options_copy+0x20>
 800d806:	4640      	mov	r0, r8
 800d808:	f001 f8c0 	bl	800e98c <rcutils_get_error_string>
 800d80c:	f001 f8e6 	bl	800e9dc <rcutils_reset_error>
 800d810:	4620      	mov	r0, r4
 800d812:	f7ff ff37 	bl	800d684 <rcl_init_options_fini>
 800d816:	b118      	cbz	r0, 800d820 <rcl_init_options_copy+0x154>
 800d818:	4606      	mov	r6, r0
 800d81a:	e767      	b.n	800d6ec <rcl_init_options_copy+0x20>
 800d81c:	260a      	movs	r6, #10
 800d81e:	e765      	b.n	800d6ec <rcl_init_options_copy+0x20>
 800d820:	4630      	mov	r0, r6
 800d822:	f007 f8e1 	bl	80149e8 <rcl_convert_rmw_ret_to_rcl_ret>
 800d826:	4606      	mov	r6, r0
 800d828:	e760      	b.n	800d6ec <rcl_init_options_copy+0x20>
 800d82a:	bf00      	nop

0800d82c <rcl_node_get_default_options>:
 800d82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d82e:	b087      	sub	sp, #28
 800d830:	4607      	mov	r7, r0
 800d832:	466d      	mov	r5, sp
 800d834:	4668      	mov	r0, sp
 800d836:	f000 ffd1 	bl	800e7dc <rcutils_get_default_allocator>
 800d83a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d83c:	4c08      	ldr	r4, [pc, #32]	; (800d860 <rcl_node_get_default_options+0x34>)
 800d83e:	f8d5 c000 	ldr.w	ip, [r5]
 800d842:	1d26      	adds	r6, r4, #4
 800d844:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d848:	463d      	mov	r5, r7
 800d84a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d84c:	f8c6 c000 	str.w	ip, [r6]
 800d850:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d854:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800d858:	4638      	mov	r0, r7
 800d85a:	b007      	add	sp, #28
 800d85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d85e:	bf00      	nop
 800d860:	20000018 	.word	0x20000018

0800d864 <rcl_node_options_copy>:
 800d864:	b1c8      	cbz	r0, 800d89a <rcl_node_options_copy+0x36>
 800d866:	b4f0      	push	{r4, r5, r6, r7}
 800d868:	460f      	mov	r7, r1
 800d86a:	b199      	cbz	r1, 800d894 <rcl_node_options_copy+0x30>
 800d86c:	4288      	cmp	r0, r1
 800d86e:	4606      	mov	r6, r0
 800d870:	d010      	beq.n	800d894 <rcl_node_options_copy+0x30>
 800d872:	4605      	mov	r5, r0
 800d874:	460c      	mov	r4, r1
 800d876:	f855 3b04 	ldr.w	r3, [r5], #4
 800d87a:	f844 3b04 	str.w	r3, [r4], #4
 800d87e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d882:	7e32      	ldrb	r2, [r6, #24]
 800d884:	6829      	ldr	r1, [r5, #0]
 800d886:	7e73      	ldrb	r3, [r6, #25]
 800d888:	6021      	str	r1, [r4, #0]
 800d88a:	2000      	movs	r0, #0
 800d88c:	763a      	strb	r2, [r7, #24]
 800d88e:	767b      	strb	r3, [r7, #25]
 800d890:	bcf0      	pop	{r4, r5, r6, r7}
 800d892:	4770      	bx	lr
 800d894:	200b      	movs	r0, #11
 800d896:	bcf0      	pop	{r4, r5, r6, r7}
 800d898:	4770      	bx	lr
 800d89a:	200b      	movs	r0, #11
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop

0800d8a0 <rcl_get_zero_initialized_publisher>:
 800d8a0:	4b01      	ldr	r3, [pc, #4]	; (800d8a8 <rcl_get_zero_initialized_publisher+0x8>)
 800d8a2:	6818      	ldr	r0, [r3, #0]
 800d8a4:	4770      	bx	lr
 800d8a6:	bf00      	nop
 800d8a8:	0801e060 	.word	0x0801e060

0800d8ac <rcl_publisher_init>:
 800d8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b0:	b091      	sub	sp, #68	; 0x44
 800d8b2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800d8b4:	b3d7      	cbz	r7, 800d92c <rcl_publisher_init+0x80>
 800d8b6:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800d8ba:	4604      	mov	r4, r0
 800d8bc:	4648      	mov	r0, r9
 800d8be:	4688      	mov	r8, r1
 800d8c0:	4616      	mov	r6, r2
 800d8c2:	461d      	mov	r5, r3
 800d8c4:	f000 ff98 	bl	800e7f8 <rcutils_allocator_is_valid>
 800d8c8:	b380      	cbz	r0, 800d92c <rcl_publisher_init+0x80>
 800d8ca:	b37c      	cbz	r4, 800d92c <rcl_publisher_init+0x80>
 800d8cc:	f8d4 a000 	ldr.w	sl, [r4]
 800d8d0:	f1ba 0f00 	cmp.w	sl, #0
 800d8d4:	d004      	beq.n	800d8e0 <rcl_publisher_init+0x34>
 800d8d6:	2564      	movs	r5, #100	; 0x64
 800d8d8:	4628      	mov	r0, r5
 800d8da:	b011      	add	sp, #68	; 0x44
 800d8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8e0:	4640      	mov	r0, r8
 800d8e2:	f007 fd41 	bl	8015368 <rcl_node_is_valid>
 800d8e6:	b330      	cbz	r0, 800d936 <rcl_publisher_init+0x8a>
 800d8e8:	b306      	cbz	r6, 800d92c <rcl_publisher_init+0x80>
 800d8ea:	b1fd      	cbz	r5, 800d92c <rcl_publisher_init+0x80>
 800d8ec:	46ce      	mov	lr, r9
 800d8ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d8f2:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800d8f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d8fa:	f8de 3000 	ldr.w	r3, [lr]
 800d8fe:	f8cc 3000 	str.w	r3, [ip]
 800d902:	f001 f889 	bl	800ea18 <rcutils_get_zero_initialized_string_map>
 800d906:	ab10      	add	r3, sp, #64	; 0x40
 800d908:	4684      	mov	ip, r0
 800d90a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800d90e:	f8cd c020 	str.w	ip, [sp, #32]
 800d912:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d916:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800d91a:	4651      	mov	r1, sl
 800d91c:	a808      	add	r0, sp, #32
 800d91e:	f001 f8f5 	bl	800eb0c <rcutils_string_map_init>
 800d922:	b150      	cbz	r0, 800d93a <rcl_publisher_init+0x8e>
 800d924:	280a      	cmp	r0, #10
 800d926:	d013      	beq.n	800d950 <rcl_publisher_init+0xa4>
 800d928:	2501      	movs	r5, #1
 800d92a:	e7d5      	b.n	800d8d8 <rcl_publisher_init+0x2c>
 800d92c:	250b      	movs	r5, #11
 800d92e:	4628      	mov	r0, r5
 800d930:	b011      	add	sp, #68	; 0x44
 800d932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d936:	25c8      	movs	r5, #200	; 0xc8
 800d938:	e7ce      	b.n	800d8d8 <rcl_publisher_init+0x2c>
 800d93a:	a808      	add	r0, sp, #32
 800d93c:	f007 fa5c 	bl	8014df8 <rcl_get_default_topic_name_substitutions>
 800d940:	4682      	mov	sl, r0
 800d942:	b138      	cbz	r0, 800d954 <rcl_publisher_init+0xa8>
 800d944:	a808      	add	r0, sp, #32
 800d946:	f001 f921 	bl	800eb8c <rcutils_string_map_fini>
 800d94a:	f1ba 0f0a 	cmp.w	sl, #10
 800d94e:	d1eb      	bne.n	800d928 <rcl_publisher_init+0x7c>
 800d950:	250a      	movs	r5, #10
 800d952:	e7c1      	b.n	800d8d8 <rcl_publisher_init+0x2c>
 800d954:	4640      	mov	r0, r8
 800d956:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d95a:	f007 fd0f 	bl	801537c <rcl_node_get_name>
 800d95e:	4682      	mov	sl, r0
 800d960:	4640      	mov	r0, r8
 800d962:	f007 fd13 	bl	801538c <rcl_node_get_namespace>
 800d966:	4686      	mov	lr, r0
 800d968:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800d96c:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800d970:	46ec      	mov	ip, sp
 800d972:	f8cd b014 	str.w	fp, [sp, #20]
 800d976:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d97a:	f8d9 3000 	ldr.w	r3, [r9]
 800d97e:	f8cc 3000 	str.w	r3, [ip]
 800d982:	4628      	mov	r0, r5
 800d984:	4651      	mov	r1, sl
 800d986:	4672      	mov	r2, lr
 800d988:	ab08      	add	r3, sp, #32
 800d98a:	f007 f8cf 	bl	8014b2c <rcl_expand_topic_name>
 800d98e:	4605      	mov	r5, r0
 800d990:	a808      	add	r0, sp, #32
 800d992:	f001 f8fb 	bl	800eb8c <rcutils_string_map_fini>
 800d996:	b920      	cbnz	r0, 800d9a2 <rcl_publisher_init+0xf6>
 800d998:	b15d      	cbz	r5, 800d9b2 <rcl_publisher_init+0x106>
 800d99a:	2d67      	cmp	r5, #103	; 0x67
 800d99c:	d002      	beq.n	800d9a4 <rcl_publisher_init+0xf8>
 800d99e:	2d69      	cmp	r5, #105	; 0x69
 800d9a0:	d05f      	beq.n	800da62 <rcl_publisher_init+0x1b6>
 800d9a2:	2501      	movs	r5, #1
 800d9a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	d096      	beq.n	800d8d8 <rcl_publisher_init+0x2c>
 800d9aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9ac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d9ae:	4798      	blx	r3
 800d9b0:	e792      	b.n	800d8d8 <rcl_publisher_init+0x2c>
 800d9b2:	4640      	mov	r0, r8
 800d9b4:	f007 fcf2 	bl	801539c <rcl_node_get_options>
 800d9b8:	2800      	cmp	r0, #0
 800d9ba:	d0f2      	beq.n	800d9a2 <rcl_publisher_init+0xf6>
 800d9bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9be:	f7f2 fc11 	bl	80001e4 <strlen>
 800d9c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d9c6:	3001      	adds	r0, #1
 800d9c8:	4798      	blx	r3
 800d9ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9cc:	9107      	str	r1, [sp, #28]
 800d9ce:	4681      	mov	r9, r0
 800d9d0:	4608      	mov	r0, r1
 800d9d2:	f7f2 fc07 	bl	80001e4 <strlen>
 800d9d6:	9907      	ldr	r1, [sp, #28]
 800d9d8:	1c42      	adds	r2, r0, #1
 800d9da:	4648      	mov	r0, r9
 800d9dc:	f00b f9fa 	bl	8018dd4 <memcpy>
 800d9e0:	462a      	mov	r2, r5
 800d9e2:	4648      	mov	r0, r9
 800d9e4:	a90a      	add	r1, sp, #40	; 0x28
 800d9e6:	f001 f9c3 	bl	800ed70 <rmw_validate_full_topic_name>
 800d9ea:	2800      	cmp	r0, #0
 800d9ec:	d137      	bne.n	800da5e <rcl_publisher_init+0x1b2>
 800d9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d138      	bne.n	800da66 <rcl_publisher_init+0x1ba>
 800d9f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d9f8:	20c0      	movs	r0, #192	; 0xc0
 800d9fa:	4798      	blx	r3
 800d9fc:	6020      	str	r0, [r4, #0]
 800d9fe:	b3a0      	cbz	r0, 800da6a <rcl_publisher_init+0x1be>
 800da00:	4640      	mov	r0, r8
 800da02:	f007 fcd3 	bl	80153ac <rcl_node_get_rmw_handle>
 800da06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800da0a:	9300      	str	r3, [sp, #0]
 800da0c:	4631      	mov	r1, r6
 800da0e:	463b      	mov	r3, r7
 800da10:	464a      	mov	r2, r9
 800da12:	6825      	ldr	r5, [r4, #0]
 800da14:	f001 fdea 	bl	800f5ec <rmw_create_publisher>
 800da18:	6821      	ldr	r1, [r4, #0]
 800da1a:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800da1e:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800da22:	b388      	cbz	r0, 800da88 <rcl_publisher_init+0x1dc>
 800da24:	3168      	adds	r1, #104	; 0x68
 800da26:	f001 fec7 	bl	800f7b8 <rmw_publisher_get_actual_qos>
 800da2a:	6823      	ldr	r3, [r4, #0]
 800da2c:	4605      	mov	r5, r0
 800da2e:	b9f0      	cbnz	r0, 800da6e <rcl_publisher_init+0x1c2>
 800da30:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800da34:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800da38:	4618      	mov	r0, r3
 800da3a:	2268      	movs	r2, #104	; 0x68
 800da3c:	4639      	mov	r1, r7
 800da3e:	f00b f9c9 	bl	8018dd4 <memcpy>
 800da42:	f8d8 2000 	ldr.w	r2, [r8]
 800da46:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800da4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da4c:	b110      	cbz	r0, 800da54 <rcl_publisher_init+0x1a8>
 800da4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da50:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800da52:	4798      	blx	r3
 800da54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da56:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800da58:	4648      	mov	r0, r9
 800da5a:	4798      	blx	r3
 800da5c:	e73c      	b.n	800d8d8 <rcl_publisher_init+0x2c>
 800da5e:	2501      	movs	r5, #1
 800da60:	e7f3      	b.n	800da4a <rcl_publisher_init+0x19e>
 800da62:	2567      	movs	r5, #103	; 0x67
 800da64:	e79e      	b.n	800d9a4 <rcl_publisher_init+0xf8>
 800da66:	2567      	movs	r5, #103	; 0x67
 800da68:	e7ef      	b.n	800da4a <rcl_publisher_init+0x19e>
 800da6a:	250a      	movs	r5, #10
 800da6c:	e7ed      	b.n	800da4a <rcl_publisher_init+0x19e>
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d0f5      	beq.n	800da5e <rcl_publisher_init+0x1b2>
 800da72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800da76:	b13b      	cbz	r3, 800da88 <rcl_publisher_init+0x1dc>
 800da78:	4640      	mov	r0, r8
 800da7a:	f007 fc97 	bl	80153ac <rcl_node_get_rmw_handle>
 800da7e:	6823      	ldr	r3, [r4, #0]
 800da80:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800da84:	f001 fe9a 	bl	800f7bc <rmw_destroy_publisher>
 800da88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da8a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800da8c:	6820      	ldr	r0, [r4, #0]
 800da8e:	4798      	blx	r3
 800da90:	2300      	movs	r3, #0
 800da92:	6023      	str	r3, [r4, #0]
 800da94:	2501      	movs	r5, #1
 800da96:	e7d8      	b.n	800da4a <rcl_publisher_init+0x19e>

0800da98 <rcl_publisher_get_default_options>:
 800da98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da9a:	4f0e      	ldr	r7, [pc, #56]	; (800dad4 <rcl_publisher_get_default_options+0x3c>)
 800da9c:	490e      	ldr	r1, [pc, #56]	; (800dad8 <rcl_publisher_get_default_options+0x40>)
 800da9e:	b087      	sub	sp, #28
 800daa0:	4606      	mov	r6, r0
 800daa2:	2250      	movs	r2, #80	; 0x50
 800daa4:	4638      	mov	r0, r7
 800daa6:	f00b f995 	bl	8018dd4 <memcpy>
 800daaa:	466c      	mov	r4, sp
 800daac:	4668      	mov	r0, sp
 800daae:	f000 fe95 	bl	800e7dc <rcutils_get_default_allocator>
 800dab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dab4:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800dab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800daba:	6823      	ldr	r3, [r4, #0]
 800dabc:	602b      	str	r3, [r5, #0]
 800dabe:	f001 f93b 	bl	800ed38 <rmw_get_default_publisher_options>
 800dac2:	4639      	mov	r1, r7
 800dac4:	6678      	str	r0, [r7, #100]	; 0x64
 800dac6:	2268      	movs	r2, #104	; 0x68
 800dac8:	4630      	mov	r0, r6
 800daca:	f00b f983 	bl	8018dd4 <memcpy>
 800dace:	4630      	mov	r0, r6
 800dad0:	b007      	add	sp, #28
 800dad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dad4:	20010348 	.word	0x20010348
 800dad8:	0801e068 	.word	0x0801e068

0800dadc <rcl_publish>:
 800dadc:	b1f8      	cbz	r0, 800db1e <rcl_publish+0x42>
 800dade:	6803      	ldr	r3, [r0, #0]
 800dae0:	b570      	push	{r4, r5, r6, lr}
 800dae2:	4604      	mov	r4, r0
 800dae4:	b1b3      	cbz	r3, 800db14 <rcl_publish+0x38>
 800dae6:	4616      	mov	r6, r2
 800dae8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800daec:	b192      	cbz	r2, 800db14 <rcl_publish+0x38>
 800daee:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800daf2:	460d      	mov	r5, r1
 800daf4:	f006 ff9c 	bl	8014a30 <rcl_context_is_valid>
 800daf8:	b160      	cbz	r0, 800db14 <rcl_publish+0x38>
 800dafa:	6823      	ldr	r3, [r4, #0]
 800dafc:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800db00:	b140      	cbz	r0, 800db14 <rcl_publish+0x38>
 800db02:	b155      	cbz	r5, 800db1a <rcl_publish+0x3e>
 800db04:	4632      	mov	r2, r6
 800db06:	4629      	mov	r1, r5
 800db08:	f001 fd10 	bl	800f52c <rmw_publish>
 800db0c:	3800      	subs	r0, #0
 800db0e:	bf18      	it	ne
 800db10:	2001      	movne	r0, #1
 800db12:	bd70      	pop	{r4, r5, r6, pc}
 800db14:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800db18:	bd70      	pop	{r4, r5, r6, pc}
 800db1a:	200b      	movs	r0, #11
 800db1c:	bd70      	pop	{r4, r5, r6, pc}
 800db1e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800db22:	4770      	bx	lr

0800db24 <rcl_get_zero_initialized_subscription>:
 800db24:	4b01      	ldr	r3, [pc, #4]	; (800db2c <rcl_get_zero_initialized_subscription+0x8>)
 800db26:	6818      	ldr	r0, [r3, #0]
 800db28:	4770      	bx	lr
 800db2a:	bf00      	nop
 800db2c:	0801e0b8 	.word	0x0801e0b8

0800db30 <rcl_subscription_init>:
 800db30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db34:	b091      	sub	sp, #68	; 0x44
 800db36:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800db38:	b1d7      	cbz	r7, 800db70 <rcl_subscription_init+0x40>
 800db3a:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800db3e:	4604      	mov	r4, r0
 800db40:	4648      	mov	r0, r9
 800db42:	4688      	mov	r8, r1
 800db44:	4616      	mov	r6, r2
 800db46:	461d      	mov	r5, r3
 800db48:	f000 fe56 	bl	800e7f8 <rcutils_allocator_is_valid>
 800db4c:	b180      	cbz	r0, 800db70 <rcl_subscription_init+0x40>
 800db4e:	b17c      	cbz	r4, 800db70 <rcl_subscription_init+0x40>
 800db50:	4640      	mov	r0, r8
 800db52:	f007 fc09 	bl	8015368 <rcl_node_is_valid>
 800db56:	b380      	cbz	r0, 800dbba <rcl_subscription_init+0x8a>
 800db58:	b156      	cbz	r6, 800db70 <rcl_subscription_init+0x40>
 800db5a:	b14d      	cbz	r5, 800db70 <rcl_subscription_init+0x40>
 800db5c:	f8d4 a000 	ldr.w	sl, [r4]
 800db60:	f1ba 0f00 	cmp.w	sl, #0
 800db64:	d009      	beq.n	800db7a <rcl_subscription_init+0x4a>
 800db66:	2564      	movs	r5, #100	; 0x64
 800db68:	4628      	mov	r0, r5
 800db6a:	b011      	add	sp, #68	; 0x44
 800db6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db70:	250b      	movs	r5, #11
 800db72:	4628      	mov	r0, r5
 800db74:	b011      	add	sp, #68	; 0x44
 800db76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db7a:	46ce      	mov	lr, r9
 800db7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800db80:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800db84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db88:	f8de 3000 	ldr.w	r3, [lr]
 800db8c:	f8cc 3000 	str.w	r3, [ip]
 800db90:	f000 ff42 	bl	800ea18 <rcutils_get_zero_initialized_string_map>
 800db94:	ab10      	add	r3, sp, #64	; 0x40
 800db96:	4684      	mov	ip, r0
 800db98:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800db9c:	f8cd c020 	str.w	ip, [sp, #32]
 800dba0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800dba4:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800dba8:	4651      	mov	r1, sl
 800dbaa:	a808      	add	r0, sp, #32
 800dbac:	f000 ffae 	bl	800eb0c <rcutils_string_map_init>
 800dbb0:	b140      	cbz	r0, 800dbc4 <rcl_subscription_init+0x94>
 800dbb2:	280a      	cmp	r0, #10
 800dbb4:	d011      	beq.n	800dbda <rcl_subscription_init+0xaa>
 800dbb6:	2501      	movs	r5, #1
 800dbb8:	e7db      	b.n	800db72 <rcl_subscription_init+0x42>
 800dbba:	25c8      	movs	r5, #200	; 0xc8
 800dbbc:	4628      	mov	r0, r5
 800dbbe:	b011      	add	sp, #68	; 0x44
 800dbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbc4:	a808      	add	r0, sp, #32
 800dbc6:	f007 f917 	bl	8014df8 <rcl_get_default_topic_name_substitutions>
 800dbca:	4682      	mov	sl, r0
 800dbcc:	b138      	cbz	r0, 800dbde <rcl_subscription_init+0xae>
 800dbce:	a808      	add	r0, sp, #32
 800dbd0:	f000 ffdc 	bl	800eb8c <rcutils_string_map_fini>
 800dbd4:	f1ba 0f0a 	cmp.w	sl, #10
 800dbd8:	d1ed      	bne.n	800dbb6 <rcl_subscription_init+0x86>
 800dbda:	250a      	movs	r5, #10
 800dbdc:	e7c9      	b.n	800db72 <rcl_subscription_init+0x42>
 800dbde:	4640      	mov	r0, r8
 800dbe0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800dbe4:	f007 fbca 	bl	801537c <rcl_node_get_name>
 800dbe8:	4682      	mov	sl, r0
 800dbea:	4640      	mov	r0, r8
 800dbec:	f007 fbce 	bl	801538c <rcl_node_get_namespace>
 800dbf0:	4686      	mov	lr, r0
 800dbf2:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800dbf6:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800dbfa:	46ec      	mov	ip, sp
 800dbfc:	f8cd b014 	str.w	fp, [sp, #20]
 800dc00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dc04:	f8d9 3000 	ldr.w	r3, [r9]
 800dc08:	f8cc 3000 	str.w	r3, [ip]
 800dc0c:	4628      	mov	r0, r5
 800dc0e:	4651      	mov	r1, sl
 800dc10:	4672      	mov	r2, lr
 800dc12:	ab08      	add	r3, sp, #32
 800dc14:	f006 ff8a 	bl	8014b2c <rcl_expand_topic_name>
 800dc18:	4605      	mov	r5, r0
 800dc1a:	a808      	add	r0, sp, #32
 800dc1c:	f000 ffb6 	bl	800eb8c <rcutils_string_map_fini>
 800dc20:	b920      	cbnz	r0, 800dc2c <rcl_subscription_init+0xfc>
 800dc22:	b15d      	cbz	r5, 800dc3c <rcl_subscription_init+0x10c>
 800dc24:	2d67      	cmp	r5, #103	; 0x67
 800dc26:	d002      	beq.n	800dc2e <rcl_subscription_init+0xfe>
 800dc28:	2d69      	cmp	r5, #105	; 0x69
 800dc2a:	d05a      	beq.n	800dce2 <rcl_subscription_init+0x1b2>
 800dc2c:	2501      	movs	r5, #1
 800dc2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc30:	2800      	cmp	r0, #0
 800dc32:	d09e      	beq.n	800db72 <rcl_subscription_init+0x42>
 800dc34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc36:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dc38:	4798      	blx	r3
 800dc3a:	e79a      	b.n	800db72 <rcl_subscription_init+0x42>
 800dc3c:	4640      	mov	r0, r8
 800dc3e:	f007 fbad 	bl	801539c <rcl_node_get_options>
 800dc42:	2800      	cmp	r0, #0
 800dc44:	d0f2      	beq.n	800dc2c <rcl_subscription_init+0xfc>
 800dc46:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc48:	f7f2 facc 	bl	80001e4 <strlen>
 800dc4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc4e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dc50:	3001      	adds	r0, #1
 800dc52:	4798      	blx	r3
 800dc54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc56:	9107      	str	r1, [sp, #28]
 800dc58:	4681      	mov	r9, r0
 800dc5a:	4608      	mov	r0, r1
 800dc5c:	f7f2 fac2 	bl	80001e4 <strlen>
 800dc60:	9907      	ldr	r1, [sp, #28]
 800dc62:	1c42      	adds	r2, r0, #1
 800dc64:	4648      	mov	r0, r9
 800dc66:	f00b f8b5 	bl	8018dd4 <memcpy>
 800dc6a:	462a      	mov	r2, r5
 800dc6c:	4648      	mov	r0, r9
 800dc6e:	a90a      	add	r1, sp, #40	; 0x28
 800dc70:	f001 f87e 	bl	800ed70 <rmw_validate_full_topic_name>
 800dc74:	2800      	cmp	r0, #0
 800dc76:	d132      	bne.n	800dcde <rcl_subscription_init+0x1ae>
 800dc78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d133      	bne.n	800dce6 <rcl_subscription_init+0x1b6>
 800dc7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc80:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dc82:	20c8      	movs	r0, #200	; 0xc8
 800dc84:	4798      	blx	r3
 800dc86:	6020      	str	r0, [r4, #0]
 800dc88:	b378      	cbz	r0, 800dcea <rcl_subscription_init+0x1ba>
 800dc8a:	4640      	mov	r0, r8
 800dc8c:	f007 fb8e 	bl	80153ac <rcl_node_get_rmw_handle>
 800dc90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800dc94:	9300      	str	r3, [sp, #0]
 800dc96:	4631      	mov	r1, r6
 800dc98:	463b      	mov	r3, r7
 800dc9a:	464a      	mov	r2, r9
 800dc9c:	6825      	ldr	r5, [r4, #0]
 800dc9e:	f001 fe0f 	bl	800f8c0 <rmw_create_subscription>
 800dca2:	6821      	ldr	r1, [r4, #0]
 800dca4:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800dca8:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800dcac:	b368      	cbz	r0, 800dd0a <rcl_subscription_init+0x1da>
 800dcae:	3170      	adds	r1, #112	; 0x70
 800dcb0:	f001 fef2 	bl	800fa98 <rmw_subscription_get_actual_qos>
 800dcb4:	4605      	mov	r5, r0
 800dcb6:	b9d0      	cbnz	r0, 800dcee <rcl_subscription_init+0x1be>
 800dcb8:	6820      	ldr	r0, [r4, #0]
 800dcba:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800dcbe:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800dcc2:	2270      	movs	r2, #112	; 0x70
 800dcc4:	4639      	mov	r1, r7
 800dcc6:	f00b f885 	bl	8018dd4 <memcpy>
 800dcca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dccc:	b110      	cbz	r0, 800dcd4 <rcl_subscription_init+0x1a4>
 800dcce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcd0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dcd2:	4798      	blx	r3
 800dcd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcd6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dcd8:	4648      	mov	r0, r9
 800dcda:	4798      	blx	r3
 800dcdc:	e749      	b.n	800db72 <rcl_subscription_init+0x42>
 800dcde:	2501      	movs	r5, #1
 800dce0:	e7f3      	b.n	800dcca <rcl_subscription_init+0x19a>
 800dce2:	2567      	movs	r5, #103	; 0x67
 800dce4:	e7a3      	b.n	800dc2e <rcl_subscription_init+0xfe>
 800dce6:	2567      	movs	r5, #103	; 0x67
 800dce8:	e7ef      	b.n	800dcca <rcl_subscription_init+0x19a>
 800dcea:	250a      	movs	r5, #10
 800dcec:	e7ed      	b.n	800dcca <rcl_subscription_init+0x19a>
 800dcee:	6823      	ldr	r3, [r4, #0]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d0f4      	beq.n	800dcde <rcl_subscription_init+0x1ae>
 800dcf4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800dcf8:	b13b      	cbz	r3, 800dd0a <rcl_subscription_init+0x1da>
 800dcfa:	4640      	mov	r0, r8
 800dcfc:	f007 fb56 	bl	80153ac <rcl_node_get_rmw_handle>
 800dd00:	6823      	ldr	r3, [r4, #0]
 800dd02:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800dd06:	f001 fec9 	bl	800fa9c <rmw_destroy_subscription>
 800dd0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd0c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dd0e:	6820      	ldr	r0, [r4, #0]
 800dd10:	4798      	blx	r3
 800dd12:	2300      	movs	r3, #0
 800dd14:	6023      	str	r3, [r4, #0]
 800dd16:	2501      	movs	r5, #1
 800dd18:	e7d7      	b.n	800dcca <rcl_subscription_init+0x19a>
 800dd1a:	bf00      	nop

0800dd1c <rcl_subscription_get_default_options>:
 800dd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd20:	4f12      	ldr	r7, [pc, #72]	; (800dd6c <rcl_subscription_get_default_options+0x50>)
 800dd22:	4913      	ldr	r1, [pc, #76]	; (800dd70 <rcl_subscription_get_default_options+0x54>)
 800dd24:	b088      	sub	sp, #32
 800dd26:	4606      	mov	r6, r0
 800dd28:	2250      	movs	r2, #80	; 0x50
 800dd2a:	4638      	mov	r0, r7
 800dd2c:	f00b f852 	bl	8018dd4 <memcpy>
 800dd30:	ac02      	add	r4, sp, #8
 800dd32:	a802      	add	r0, sp, #8
 800dd34:	f000 fd52 	bl	800e7dc <rcutils_get_default_allocator>
 800dd38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd3a:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800dd3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dd40:	46e8      	mov	r8, sp
 800dd42:	6823      	ldr	r3, [r4, #0]
 800dd44:	602b      	str	r3, [r5, #0]
 800dd46:	4640      	mov	r0, r8
 800dd48:	f000 fffc 	bl	800ed44 <rmw_get_default_subscription_options>
 800dd4c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800dd50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800dd54:	e883 0003 	stmia.w	r3, {r0, r1}
 800dd58:	2270      	movs	r2, #112	; 0x70
 800dd5a:	4639      	mov	r1, r7
 800dd5c:	4630      	mov	r0, r6
 800dd5e:	f00b f839 	bl	8018dd4 <memcpy>
 800dd62:	4630      	mov	r0, r6
 800dd64:	b008      	add	sp, #32
 800dd66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd6a:	bf00      	nop
 800dd6c:	200103b0 	.word	0x200103b0
 800dd70:	0801e0c0 	.word	0x0801e0c0

0800dd74 <rcl_take>:
 800dd74:	2800      	cmp	r0, #0
 800dd76:	d03f      	beq.n	800ddf8 <rcl_take+0x84>
 800dd78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd7c:	4617      	mov	r7, r2
 800dd7e:	6802      	ldr	r2, [r0, #0]
 800dd80:	b09d      	sub	sp, #116	; 0x74
 800dd82:	4606      	mov	r6, r0
 800dd84:	b382      	cbz	r2, 800dde8 <rcl_take+0x74>
 800dd86:	4699      	mov	r9, r3
 800dd88:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800dd8c:	b363      	cbz	r3, 800dde8 <rcl_take+0x74>
 800dd8e:	4688      	mov	r8, r1
 800dd90:	b381      	cbz	r1, 800ddf4 <rcl_take+0x80>
 800dd92:	2f00      	cmp	r7, #0
 800dd94:	d034      	beq.n	800de00 <rcl_take+0x8c>
 800dd96:	a802      	add	r0, sp, #8
 800dd98:	ac02      	add	r4, sp, #8
 800dd9a:	f000 ffd7 	bl	800ed4c <rmw_get_zero_initialized_message_info>
 800dd9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dda0:	463d      	mov	r5, r7
 800dda2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dda4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dda6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dda8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ddac:	6834      	ldr	r4, [r6, #0]
 800ddae:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 800ddb2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800ddb6:	2400      	movs	r4, #0
 800ddb8:	463b      	mov	r3, r7
 800ddba:	4630      	mov	r0, r6
 800ddbc:	f8cd 9000 	str.w	r9, [sp]
 800ddc0:	4641      	mov	r1, r8
 800ddc2:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800ddc6:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 800ddca:	f001 feb5 	bl	800fb38 <rmw_take_with_info>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	b9c0      	cbnz	r0, 800de04 <rcl_take+0x90>
 800ddd2:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800ddd6:	f240 1291 	movw	r2, #401	; 0x191
 800ddda:	2900      	cmp	r1, #0
 800dddc:	bf08      	it	eq
 800ddde:	4613      	moveq	r3, r2
 800dde0:	4618      	mov	r0, r3
 800dde2:	b01d      	add	sp, #116	; 0x74
 800dde4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dde8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ddec:	4618      	mov	r0, r3
 800ddee:	b01d      	add	sp, #116	; 0x74
 800ddf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddf4:	230b      	movs	r3, #11
 800ddf6:	e7f3      	b.n	800dde0 <rcl_take+0x6c>
 800ddf8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	4770      	bx	lr
 800de00:	af10      	add	r7, sp, #64	; 0x40
 800de02:	e7c8      	b.n	800dd96 <rcl_take+0x22>
 800de04:	f006 fdf0 	bl	80149e8 <rcl_convert_rmw_ret_to_rcl_ret>
 800de08:	4603      	mov	r3, r0
 800de0a:	e7e9      	b.n	800dde0 <rcl_take+0x6c>

0800de0c <rcl_subscription_get_rmw_handle>:
 800de0c:	b118      	cbz	r0, 800de16 <rcl_subscription_get_rmw_handle+0xa>
 800de0e:	6800      	ldr	r0, [r0, #0]
 800de10:	b108      	cbz	r0, 800de16 <rcl_subscription_get_rmw_handle+0xa>
 800de12:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800de16:	4770      	bx	lr

0800de18 <_rclc_check_for_new_data>:
 800de18:	2800      	cmp	r0, #0
 800de1a:	d042      	beq.n	800dea2 <_rclc_check_for_new_data+0x8a>
 800de1c:	b510      	push	{r4, lr}
 800de1e:	7803      	ldrb	r3, [r0, #0]
 800de20:	b084      	sub	sp, #16
 800de22:	4604      	mov	r4, r0
 800de24:	2b08      	cmp	r3, #8
 800de26:	d847      	bhi.n	800deb8 <_rclc_check_for_new_data+0xa0>
 800de28:	e8df f003 	tbb	[pc, r3]
 800de2c:	17251010 	.word	0x17251010
 800de30:	05050517 	.word	0x05050517
 800de34:	1e          	.byte	0x1e
 800de35:	00          	.byte	0x00
 800de36:	6a0b      	ldr	r3, [r1, #32]
 800de38:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800de3a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800de3e:	b118      	cbz	r0, 800de48 <_rclc_check_for_new_data+0x30>
 800de40:	2301      	movs	r3, #1
 800de42:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800de46:	2000      	movs	r0, #0
 800de48:	b004      	add	sp, #16
 800de4a:	bd10      	pop	{r4, pc}
 800de4c:	680b      	ldr	r3, [r1, #0]
 800de4e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800de50:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800de54:	2800      	cmp	r0, #0
 800de56:	d1f3      	bne.n	800de40 <_rclc_check_for_new_data+0x28>
 800de58:	e7f6      	b.n	800de48 <_rclc_check_for_new_data+0x30>
 800de5a:	698b      	ldr	r3, [r1, #24]
 800de5c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800de5e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800de62:	2800      	cmp	r0, #0
 800de64:	d1ec      	bne.n	800de40 <_rclc_check_for_new_data+0x28>
 800de66:	e7ef      	b.n	800de48 <_rclc_check_for_new_data+0x30>
 800de68:	688b      	ldr	r3, [r1, #8]
 800de6a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800de6c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800de70:	2800      	cmp	r0, #0
 800de72:	d1e5      	bne.n	800de40 <_rclc_check_for_new_data+0x28>
 800de74:	e7e8      	b.n	800de48 <_rclc_check_for_new_data+0x30>
 800de76:	690b      	ldr	r3, [r1, #16]
 800de78:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800de7a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800de7e:	2800      	cmp	r0, #0
 800de80:	d0e2      	beq.n	800de48 <_rclc_check_for_new_data+0x30>
 800de82:	2300      	movs	r3, #0
 800de84:	6860      	ldr	r0, [r4, #4]
 800de86:	f88d 300f 	strb.w	r3, [sp, #15]
 800de8a:	f10d 010f 	add.w	r1, sp, #15
 800de8e:	f007 ff2d 	bl	8015cec <rcl_timer_is_ready>
 800de92:	b960      	cbnz	r0, 800deae <_rclc_check_for_new_data+0x96>
 800de94:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800de98:	b12b      	cbz	r3, 800dea6 <_rclc_check_for_new_data+0x8e>
 800de9a:	2301      	movs	r3, #1
 800de9c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800dea0:	e7d2      	b.n	800de48 <_rclc_check_for_new_data+0x30>
 800dea2:	200b      	movs	r0, #11
 800dea4:	4770      	bx	lr
 800dea6:	f000 fd99 	bl	800e9dc <rcutils_reset_error>
 800deaa:	2001      	movs	r0, #1
 800deac:	e7cc      	b.n	800de48 <_rclc_check_for_new_data+0x30>
 800deae:	9001      	str	r0, [sp, #4]
 800deb0:	f000 fd94 	bl	800e9dc <rcutils_reset_error>
 800deb4:	9801      	ldr	r0, [sp, #4]
 800deb6:	e7c7      	b.n	800de48 <_rclc_check_for_new_data+0x30>
 800deb8:	2001      	movs	r0, #1
 800deba:	e7c5      	b.n	800de48 <_rclc_check_for_new_data+0x30>

0800debc <_rclc_take_new_data>:
 800debc:	2800      	cmp	r0, #0
 800debe:	d049      	beq.n	800df54 <_rclc_take_new_data+0x98>
 800dec0:	b510      	push	{r4, lr}
 800dec2:	7803      	ldrb	r3, [r0, #0]
 800dec4:	b08e      	sub	sp, #56	; 0x38
 800dec6:	4604      	mov	r4, r0
 800dec8:	2b08      	cmp	r3, #8
 800deca:	d84a      	bhi.n	800df62 <_rclc_take_new_data+0xa6>
 800decc:	e8df f003 	tbb	[pc, r3]
 800ded0:	2b121515 	.word	0x2b121515
 800ded4:	0505052b 	.word	0x0505052b
 800ded8:	12          	.byte	0x12
 800ded9:	00          	.byte	0x00
 800deda:	6a0b      	ldr	r3, [r1, #32]
 800dedc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800dede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dee2:	b13b      	cbz	r3, 800def4 <_rclc_take_new_data+0x38>
 800dee4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800dee8:	f104 0110 	add.w	r1, r4, #16
 800deec:	f007 fb5e 	bl	80155ac <rcl_take_request>
 800def0:	2800      	cmp	r0, #0
 800def2:	d131      	bne.n	800df58 <_rclc_take_new_data+0x9c>
 800def4:	2000      	movs	r0, #0
 800def6:	b00e      	add	sp, #56	; 0x38
 800def8:	bd10      	pop	{r4, pc}
 800defa:	680b      	ldr	r3, [r1, #0]
 800defc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800defe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d0f6      	beq.n	800def4 <_rclc_take_new_data+0x38>
 800df06:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800df0a:	2300      	movs	r3, #0
 800df0c:	aa02      	add	r2, sp, #8
 800df0e:	f7ff ff31 	bl	800dd74 <rcl_take>
 800df12:	2800      	cmp	r0, #0
 800df14:	d0ef      	beq.n	800def6 <_rclc_take_new_data+0x3a>
 800df16:	f240 1391 	movw	r3, #401	; 0x191
 800df1a:	4298      	cmp	r0, r3
 800df1c:	d115      	bne.n	800df4a <_rclc_take_new_data+0x8e>
 800df1e:	2300      	movs	r3, #0
 800df20:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800df24:	e7e7      	b.n	800def6 <_rclc_take_new_data+0x3a>
 800df26:	698b      	ldr	r3, [r1, #24]
 800df28:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800df2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d0e0      	beq.n	800def4 <_rclc_take_new_data+0x38>
 800df32:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800df36:	f104 0110 	add.w	r1, r4, #16
 800df3a:	f006 fd19 	bl	8014970 <rcl_take_response>
 800df3e:	2800      	cmp	r0, #0
 800df40:	d0d8      	beq.n	800def4 <_rclc_take_new_data+0x38>
 800df42:	f240 13f5 	movw	r3, #501	; 0x1f5
 800df46:	4298      	cmp	r0, r3
 800df48:	d0d5      	beq.n	800def6 <_rclc_take_new_data+0x3a>
 800df4a:	9001      	str	r0, [sp, #4]
 800df4c:	f000 fd46 	bl	800e9dc <rcutils_reset_error>
 800df50:	9801      	ldr	r0, [sp, #4]
 800df52:	e7d0      	b.n	800def6 <_rclc_take_new_data+0x3a>
 800df54:	200b      	movs	r0, #11
 800df56:	4770      	bx	lr
 800df58:	f240 2359 	movw	r3, #601	; 0x259
 800df5c:	4298      	cmp	r0, r3
 800df5e:	d0de      	beq.n	800df1e <_rclc_take_new_data+0x62>
 800df60:	e7f3      	b.n	800df4a <_rclc_take_new_data+0x8e>
 800df62:	2001      	movs	r0, #1
 800df64:	e7c7      	b.n	800def6 <_rclc_take_new_data+0x3a>
 800df66:	bf00      	nop

0800df68 <_rclc_execute>:
 800df68:	2800      	cmp	r0, #0
 800df6a:	d058      	beq.n	800e01e <_rclc_execute+0xb6>
 800df6c:	b510      	push	{r4, lr}
 800df6e:	7843      	ldrb	r3, [r0, #1]
 800df70:	b082      	sub	sp, #8
 800df72:	4604      	mov	r4, r0
 800df74:	b14b      	cbz	r3, 800df8a <_rclc_execute+0x22>
 800df76:	2b01      	cmp	r3, #1
 800df78:	d017      	beq.n	800dfaa <_rclc_execute+0x42>
 800df7a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800df7e:	b18b      	cbz	r3, 800dfa4 <_rclc_execute+0x3c>
 800df80:	2000      	movs	r0, #0
 800df82:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 800df86:	b002      	add	sp, #8
 800df88:	bd10      	pop	{r4, pc}
 800df8a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800df8e:	b14b      	cbz	r3, 800dfa4 <_rclc_execute+0x3c>
 800df90:	7803      	ldrb	r3, [r0, #0]
 800df92:	2b08      	cmp	r3, #8
 800df94:	d860      	bhi.n	800e058 <_rclc_execute+0xf0>
 800df96:	e8df f003 	tbb	[pc, r3]
 800df9a:	5128      	.short	0x5128
 800df9c:	122c2832 	.word	0x122c2832
 800dfa0:	1212      	.short	0x1212
 800dfa2:	38          	.byte	0x38
 800dfa3:	00          	.byte	0x00
 800dfa4:	2000      	movs	r0, #0
 800dfa6:	b002      	add	sp, #8
 800dfa8:	bd10      	pop	{r4, pc}
 800dfaa:	7803      	ldrb	r3, [r0, #0]
 800dfac:	2b08      	cmp	r3, #8
 800dfae:	d853      	bhi.n	800e058 <_rclc_execute+0xf0>
 800dfb0:	e8df f003 	tbb	[pc, r3]
 800dfb4:	1b252e37 	.word	0x1b252e37
 800dfb8:	0505051f 	.word	0x0505051f
 800dfbc:	2b          	.byte	0x2b
 800dfbd:	00          	.byte	0x00
 800dfbe:	2b06      	cmp	r3, #6
 800dfc0:	d041      	beq.n	800e046 <_rclc_execute+0xde>
 800dfc2:	2b07      	cmp	r3, #7
 800dfc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dfc6:	d133      	bne.n	800e030 <_rclc_execute+0xc8>
 800dfc8:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 800dfcc:	68a0      	ldr	r0, [r4, #8]
 800dfce:	4798      	blx	r3
 800dfd0:	f104 0110 	add.w	r1, r4, #16
 800dfd4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800dfd6:	6860      	ldr	r0, [r4, #4]
 800dfd8:	f007 fb20 	bl	801561c <rcl_send_response>
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	d0cc      	beq.n	800df7a <_rclc_execute+0x12>
 800dfe0:	9001      	str	r0, [sp, #4]
 800dfe2:	f000 fcfb 	bl	800e9dc <rcutils_reset_error>
 800dfe6:	9801      	ldr	r0, [sp, #4]
 800dfe8:	e7cd      	b.n	800df86 <_rclc_execute+0x1e>
 800dfea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dfec:	68a0      	ldr	r0, [r4, #8]
 800dfee:	4798      	blx	r3
 800dff0:	e7c3      	b.n	800df7a <_rclc_execute+0x12>
 800dff2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dff4:	68a0      	ldr	r0, [r4, #8]
 800dff6:	f104 0110 	add.w	r1, r4, #16
 800dffa:	4798      	blx	r3
 800dffc:	e7bd      	b.n	800df7a <_rclc_execute+0x12>
 800dffe:	6860      	ldr	r0, [r4, #4]
 800e000:	f007 fde0 	bl	8015bc4 <rcl_timer_call>
 800e004:	2800      	cmp	r0, #0
 800e006:	d0b8      	beq.n	800df7a <_rclc_execute+0x12>
 800e008:	e7ea      	b.n	800dfe0 <_rclc_execute+0x78>
 800e00a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e00c:	4798      	blx	r3
 800e00e:	e7b4      	b.n	800df7a <_rclc_execute+0x12>
 800e010:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800e014:	b990      	cbnz	r0, 800e03c <_rclc_execute+0xd4>
 800e016:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800e01a:	4798      	blx	r3
 800e01c:	e7ad      	b.n	800df7a <_rclc_execute+0x12>
 800e01e:	200b      	movs	r0, #11
 800e020:	4770      	bx	lr
 800e022:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800e026:	2800      	cmp	r0, #0
 800e028:	d1df      	bne.n	800dfea <_rclc_execute+0x82>
 800e02a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e02c:	4798      	blx	r3
 800e02e:	e7a4      	b.n	800df7a <_rclc_execute+0x12>
 800e030:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e032:	68a0      	ldr	r0, [r4, #8]
 800e034:	4798      	blx	r3
 800e036:	f104 0110 	add.w	r1, r4, #16
 800e03a:	e7cb      	b.n	800dfd4 <_rclc_execute+0x6c>
 800e03c:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800e040:	68a0      	ldr	r0, [r4, #8]
 800e042:	4798      	blx	r3
 800e044:	e799      	b.n	800df7a <_rclc_execute+0x12>
 800e046:	f104 0110 	add.w	r1, r4, #16
 800e04a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e04c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e04e:	68a0      	ldr	r0, [r4, #8]
 800e050:	9101      	str	r1, [sp, #4]
 800e052:	4798      	blx	r3
 800e054:	9901      	ldr	r1, [sp, #4]
 800e056:	e7bd      	b.n	800dfd4 <_rclc_execute+0x6c>
 800e058:	2001      	movs	r0, #1
 800e05a:	e794      	b.n	800df86 <_rclc_execute+0x1e>

0800e05c <rclc_executor_trigger_any>:
 800e05c:	b170      	cbz	r0, 800e07c <rclc_executor_trigger_any+0x20>
 800e05e:	b179      	cbz	r1, 800e080 <rclc_executor_trigger_any+0x24>
 800e060:	4603      	mov	r3, r0
 800e062:	2200      	movs	r2, #0
 800e064:	e005      	b.n	800e072 <rclc_executor_trigger_any+0x16>
 800e066:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800e06a:	3340      	adds	r3, #64	; 0x40
 800e06c:	b930      	cbnz	r0, 800e07c <rclc_executor_trigger_any+0x20>
 800e06e:	4291      	cmp	r1, r2
 800e070:	d005      	beq.n	800e07e <rclc_executor_trigger_any+0x22>
 800e072:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800e076:	3201      	adds	r2, #1
 800e078:	2800      	cmp	r0, #0
 800e07a:	d1f4      	bne.n	800e066 <rclc_executor_trigger_any+0xa>
 800e07c:	4770      	bx	lr
 800e07e:	4770      	bx	lr
 800e080:	4608      	mov	r0, r1
 800e082:	e7fb      	b.n	800e07c <rclc_executor_trigger_any+0x20>
 800e084:	0000      	movs	r0, r0
	...

0800e088 <rclc_executor_init>:
 800e088:	2800      	cmp	r0, #0
 800e08a:	d063      	beq.n	800e154 <rclc_executor_init+0xcc>
 800e08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e090:	460f      	mov	r7, r1
 800e092:	b0ae      	sub	sp, #184	; 0xb8
 800e094:	2900      	cmp	r1, #0
 800e096:	d055      	beq.n	800e144 <rclc_executor_init+0xbc>
 800e098:	4605      	mov	r5, r0
 800e09a:	4618      	mov	r0, r3
 800e09c:	4616      	mov	r6, r2
 800e09e:	4698      	mov	r8, r3
 800e0a0:	f000 fbaa 	bl	800e7f8 <rcutils_allocator_is_valid>
 800e0a4:	2800      	cmp	r0, #0
 800e0a6:	d04d      	beq.n	800e144 <rclc_executor_init+0xbc>
 800e0a8:	2e00      	cmp	r6, #0
 800e0aa:	d04b      	beq.n	800e144 <rclc_executor_init+0xbc>
 800e0ac:	492e      	ldr	r1, [pc, #184]	; (800e168 <rclc_executor_init+0xe0>)
 800e0ae:	2280      	movs	r2, #128	; 0x80
 800e0b0:	a80e      	add	r0, sp, #56	; 0x38
 800e0b2:	f00a fe8f 	bl	8018dd4 <memcpy>
 800e0b6:	2400      	movs	r4, #0
 800e0b8:	a90e      	add	r1, sp, #56	; 0x38
 800e0ba:	2280      	movs	r2, #128	; 0x80
 800e0bc:	4628      	mov	r0, r5
 800e0be:	f00a fe89 	bl	8018dd4 <memcpy>
 800e0c2:	602f      	str	r7, [r5, #0]
 800e0c4:	4668      	mov	r0, sp
 800e0c6:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800e0ca:	466f      	mov	r7, sp
 800e0cc:	f007 ffd4 	bl	8016078 <rcl_get_zero_initialized_wait_set>
 800e0d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e0d2:	f105 0c14 	add.w	ip, r5, #20
 800e0d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e0da:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e0dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e0e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e0e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e0e6:	a31e      	add	r3, pc, #120	; (adr r3, 800e160 <rclc_executor_init+0xd8>)
 800e0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ec:	6839      	ldr	r1, [r7, #0]
 800e0ee:	f8cc 1000 	str.w	r1, [ip]
 800e0f2:	f8d8 7000 	ldr.w	r7, [r8]
 800e0f6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e0fa:	f8c5 8010 	str.w	r8, [r5, #16]
 800e0fe:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800e102:	01b0      	lsls	r0, r6, #6
 800e104:	47b8      	blx	r7
 800e106:	6068      	str	r0, [r5, #4]
 800e108:	b908      	cbnz	r0, 800e10e <rclc_executor_init+0x86>
 800e10a:	e025      	b.n	800e158 <rclc_executor_init+0xd0>
 800e10c:	6868      	ldr	r0, [r5, #4]
 800e10e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800e112:	4631      	mov	r1, r6
 800e114:	3401      	adds	r4, #1
 800e116:	f000 fa15 	bl	800e544 <rclc_executor_handle_init>
 800e11a:	42a6      	cmp	r6, r4
 800e11c:	d1f6      	bne.n	800e10c <rclc_executor_init+0x84>
 800e11e:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800e122:	f000 fa03 	bl	800e52c <rclc_executor_handle_counters_zero_init>
 800e126:	686b      	ldr	r3, [r5, #4]
 800e128:	4a10      	ldr	r2, [pc, #64]	; (800e16c <rclc_executor_init+0xe4>)
 800e12a:	672a      	str	r2, [r5, #112]	; 0x70
 800e12c:	2000      	movs	r0, #0
 800e12e:	6768      	str	r0, [r5, #116]	; 0x74
 800e130:	b163      	cbz	r3, 800e14c <rclc_executor_init+0xc4>
 800e132:	692b      	ldr	r3, [r5, #16]
 800e134:	b153      	cbz	r3, 800e14c <rclc_executor_init+0xc4>
 800e136:	68ab      	ldr	r3, [r5, #8]
 800e138:	b143      	cbz	r3, 800e14c <rclc_executor_init+0xc4>
 800e13a:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800e13e:	b02e      	add	sp, #184	; 0xb8
 800e140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e144:	200b      	movs	r0, #11
 800e146:	b02e      	add	sp, #184	; 0xb8
 800e148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e14c:	4618      	mov	r0, r3
 800e14e:	b02e      	add	sp, #184	; 0xb8
 800e150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e154:	200b      	movs	r0, #11
 800e156:	4770      	bx	lr
 800e158:	200a      	movs	r0, #10
 800e15a:	e7f4      	b.n	800e146 <rclc_executor_init+0xbe>
 800e15c:	f3af 8000 	nop.w
 800e160:	3b9aca00 	.word	0x3b9aca00
 800e164:	00000000 	.word	0x00000000
 800e168:	0801e110 	.word	0x0801e110
 800e16c:	0800e05d 	.word	0x0800e05d

0800e170 <rclc_executor_add_subscription>:
 800e170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e174:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800e178:	b358      	cbz	r0, 800e1d2 <rclc_executor_add_subscription+0x62>
 800e17a:	b351      	cbz	r1, 800e1d2 <rclc_executor_add_subscription+0x62>
 800e17c:	b34a      	cbz	r2, 800e1d2 <rclc_executor_add_subscription+0x62>
 800e17e:	b343      	cbz	r3, 800e1d2 <rclc_executor_add_subscription+0x62>
 800e180:	4604      	mov	r4, r0
 800e182:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800e186:	4285      	cmp	r5, r0
 800e188:	d302      	bcc.n	800e190 <rclc_executor_add_subscription+0x20>
 800e18a:	2001      	movs	r0, #1
 800e18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e190:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800e194:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800e198:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800e19c:	f04f 0c00 	mov.w	ip, #0
 800e1a0:	f80e c008 	strb.w	ip, [lr, r8]
 800e1a4:	2001      	movs	r0, #1
 800e1a6:	3501      	adds	r5, #1
 800e1a8:	f104 0814 	add.w	r8, r4, #20
 800e1ac:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
 800e1b0:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800e1b4:	6333      	str	r3, [r6, #48]	; 0x30
 800e1b6:	7077      	strb	r7, [r6, #1]
 800e1b8:	f8c6 c02c 	str.w	ip, [r6, #44]	; 0x2c
 800e1bc:	4640      	mov	r0, r8
 800e1be:	60e5      	str	r5, [r4, #12]
 800e1c0:	f007 ff6c 	bl	801609c <rcl_wait_set_is_valid>
 800e1c4:	b940      	cbnz	r0, 800e1d8 <rclc_executor_add_subscription+0x68>
 800e1c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	64a3      	str	r3, [r4, #72]	; 0x48
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1d2:	200b      	movs	r0, #11
 800e1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1d8:	4640      	mov	r0, r8
 800e1da:	f007 ff65 	bl	80160a8 <rcl_wait_set_fini>
 800e1de:	2800      	cmp	r0, #0
 800e1e0:	d0f1      	beq.n	800e1c6 <rclc_executor_add_subscription+0x56>
 800e1e2:	e7d3      	b.n	800e18c <rclc_executor_add_subscription+0x1c>

0800e1e4 <rclc_executor_add_timer>:
 800e1e4:	b308      	cbz	r0, 800e22a <rclc_executor_add_timer+0x46>
 800e1e6:	b301      	cbz	r1, 800e22a <rclc_executor_add_timer+0x46>
 800e1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ea:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	4604      	mov	r4, r0
 800e1f2:	d301      	bcc.n	800e1f8 <rclc_executor_add_timer+0x14>
 800e1f4:	2001      	movs	r0, #1
 800e1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1f8:	6840      	ldr	r0, [r0, #4]
 800e1fa:	019d      	lsls	r5, r3, #6
 800e1fc:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800e200:	2702      	movs	r7, #2
 800e202:	6051      	str	r1, [r2, #4]
 800e204:	3301      	adds	r3, #1
 800e206:	5347      	strh	r7, [r0, r5]
 800e208:	2601      	movs	r6, #1
 800e20a:	2100      	movs	r1, #0
 800e20c:	f104 0514 	add.w	r5, r4, #20
 800e210:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
 800e214:	62d1      	str	r1, [r2, #44]	; 0x2c
 800e216:	4628      	mov	r0, r5
 800e218:	60e3      	str	r3, [r4, #12]
 800e21a:	f007 ff3f 	bl	801609c <rcl_wait_set_is_valid>
 800e21e:	b930      	cbnz	r0, 800e22e <rclc_executor_add_timer+0x4a>
 800e220:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e222:	3301      	adds	r3, #1
 800e224:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e226:	2000      	movs	r0, #0
 800e228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e22a:	200b      	movs	r0, #11
 800e22c:	4770      	bx	lr
 800e22e:	4628      	mov	r0, r5
 800e230:	f007 ff3a 	bl	80160a8 <rcl_wait_set_fini>
 800e234:	2800      	cmp	r0, #0
 800e236:	d0f3      	beq.n	800e220 <rclc_executor_add_timer+0x3c>
 800e238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e23a:	bf00      	nop

0800e23c <rclc_executor_prepare>:
 800e23c:	2800      	cmp	r0, #0
 800e23e:	d03d      	beq.n	800e2bc <rclc_executor_prepare+0x80>
 800e240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e244:	f100 0814 	add.w	r8, r0, #20
 800e248:	b09a      	sub	sp, #104	; 0x68
 800e24a:	4604      	mov	r4, r0
 800e24c:	4640      	mov	r0, r8
 800e24e:	f007 ff25 	bl	801609c <rcl_wait_set_is_valid>
 800e252:	b118      	cbz	r0, 800e25c <rclc_executor_prepare+0x20>
 800e254:	2000      	movs	r0, #0
 800e256:	b01a      	add	sp, #104	; 0x68
 800e258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e25c:	4640      	mov	r0, r8
 800e25e:	f007 ff23 	bl	80160a8 <rcl_wait_set_fini>
 800e262:	2800      	cmp	r0, #0
 800e264:	d127      	bne.n	800e2b6 <rclc_executor_prepare+0x7a>
 800e266:	a80c      	add	r0, sp, #48	; 0x30
 800e268:	ad0c      	add	r5, sp, #48	; 0x30
 800e26a:	f007 ff05 	bl	8016078 <rcl_get_zero_initialized_wait_set>
 800e26e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e270:	4646      	mov	r6, r8
 800e272:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e276:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e27a:	6927      	ldr	r7, [r4, #16]
 800e27c:	682d      	ldr	r5, [r5, #0]
 800e27e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e280:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e282:	6035      	str	r5, [r6, #0]
 800e284:	ad04      	add	r5, sp, #16
 800e286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e288:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800e28c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e28e:	6826      	ldr	r6, [r4, #0]
 800e290:	6838      	ldr	r0, [r7, #0]
 800e292:	6028      	str	r0, [r5, #0]
 800e294:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800e298:	e9cd 3200 	strd	r3, r2, [sp]
 800e29c:	4640      	mov	r0, r8
 800e29e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e2a0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e2a2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e2a4:	f008 fa1e 	bl	80166e4 <rcl_wait_set_init>
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	d0d4      	beq.n	800e256 <rclc_executor_prepare+0x1a>
 800e2ac:	900b      	str	r0, [sp, #44]	; 0x2c
 800e2ae:	f000 fb95 	bl	800e9dc <rcutils_reset_error>
 800e2b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e2b4:	e7cf      	b.n	800e256 <rclc_executor_prepare+0x1a>
 800e2b6:	f000 fb91 	bl	800e9dc <rcutils_reset_error>
 800e2ba:	e7d4      	b.n	800e266 <rclc_executor_prepare+0x2a>
 800e2bc:	200b      	movs	r0, #11
 800e2be:	4770      	bx	lr

0800e2c0 <rclc_executor_spin_some.part.0>:
 800e2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c4:	f100 0814 	add.w	r8, r0, #20
 800e2c8:	b083      	sub	sp, #12
 800e2ca:	4692      	mov	sl, r2
 800e2cc:	4699      	mov	r9, r3
 800e2ce:	4605      	mov	r5, r0
 800e2d0:	f7ff ffb4 	bl	800e23c <rclc_executor_prepare>
 800e2d4:	4640      	mov	r0, r8
 800e2d6:	f007 ffb3 	bl	8016240 <rcl_wait_set_clear>
 800e2da:	4607      	mov	r7, r0
 800e2dc:	2800      	cmp	r0, #0
 800e2de:	f040 80ad 	bne.w	800e43c <rclc_executor_spin_some.part.0+0x17c>
 800e2e2:	68ab      	ldr	r3, [r5, #8]
 800e2e4:	4604      	mov	r4, r0
 800e2e6:	b1eb      	cbz	r3, 800e324 <rclc_executor_spin_some.part.0+0x64>
 800e2e8:	686e      	ldr	r6, [r5, #4]
 800e2ea:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800e2ee:	01a2      	lsls	r2, r4, #6
 800e2f0:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800e2f4:	b1b3      	cbz	r3, 800e324 <rclc_executor_spin_some.part.0+0x64>
 800e2f6:	5cb3      	ldrb	r3, [r6, r2]
 800e2f8:	2b08      	cmp	r3, #8
 800e2fa:	f200 8098 	bhi.w	800e42e <rclc_executor_spin_some.part.0+0x16e>
 800e2fe:	e8df f003 	tbb	[pc, r3]
 800e302:	7a7a      	.short	0x7a7a
 800e304:	056c6c83 	.word	0x056c6c83
 800e308:	0505      	.short	0x0505
 800e30a:	8c          	.byte	0x8c
 800e30b:	00          	.byte	0x00
 800e30c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800e310:	4640      	mov	r0, r8
 800e312:	6849      	ldr	r1, [r1, #4]
 800e314:	f008 fafc 	bl	8016910 <rcl_wait_set_add_service>
 800e318:	2800      	cmp	r0, #0
 800e31a:	d166      	bne.n	800e3ea <rclc_executor_spin_some.part.0+0x12a>
 800e31c:	68ab      	ldr	r3, [r5, #8]
 800e31e:	3401      	adds	r4, #1
 800e320:	429c      	cmp	r4, r3
 800e322:	d3e1      	bcc.n	800e2e8 <rclc_executor_spin_some.part.0+0x28>
 800e324:	464b      	mov	r3, r9
 800e326:	4652      	mov	r2, sl
 800e328:	4640      	mov	r0, r8
 800e32a:	f008 fb1d 	bl	8016968 <rcl_wait>
 800e32e:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800e332:	2b00      	cmp	r3, #0
 800e334:	f000 8088 	beq.w	800e448 <rclc_executor_spin_some.part.0+0x188>
 800e338:	2b01      	cmp	r3, #1
 800e33a:	d178      	bne.n	800e42e <rclc_executor_spin_some.part.0+0x16e>
 800e33c:	68ab      	ldr	r3, [r5, #8]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	f000 80cd 	beq.w	800e4de <rclc_executor_spin_some.part.0+0x21e>
 800e344:	2400      	movs	r4, #0
 800e346:	4626      	mov	r6, r4
 800e348:	f240 1991 	movw	r9, #401	; 0x191
 800e34c:	e009      	b.n	800e362 <rclc_executor_spin_some.part.0+0xa2>
 800e34e:	f7ff fd63 	bl	800de18 <_rclc_check_for_new_data>
 800e352:	4604      	mov	r4, r0
 800e354:	b108      	cbz	r0, 800e35a <rclc_executor_spin_some.part.0+0x9a>
 800e356:	4548      	cmp	r0, r9
 800e358:	d13d      	bne.n	800e3d6 <rclc_executor_spin_some.part.0+0x116>
 800e35a:	68ab      	ldr	r3, [r5, #8]
 800e35c:	429e      	cmp	r6, r3
 800e35e:	f080 80c3 	bcs.w	800e4e8 <rclc_executor_spin_some.part.0+0x228>
 800e362:	686a      	ldr	r2, [r5, #4]
 800e364:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800e368:	4641      	mov	r1, r8
 800e36a:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800e36e:	3601      	adds	r6, #1
 800e370:	f1bc 0f00 	cmp.w	ip, #0
 800e374:	d1eb      	bne.n	800e34e <rclc_executor_spin_some.part.0+0x8e>
 800e376:	4619      	mov	r1, r3
 800e378:	4610      	mov	r0, r2
 800e37a:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800e37e:	4798      	blx	r3
 800e380:	b348      	cbz	r0, 800e3d6 <rclc_executor_spin_some.part.0+0x116>
 800e382:	68ab      	ldr	r3, [r5, #8]
 800e384:	b33b      	cbz	r3, 800e3d6 <rclc_executor_spin_some.part.0+0x116>
 800e386:	2600      	movs	r6, #0
 800e388:	f240 1991 	movw	r9, #401	; 0x191
 800e38c:	e008      	b.n	800e3a0 <rclc_executor_spin_some.part.0+0xe0>
 800e38e:	f7ff fd95 	bl	800debc <_rclc_take_new_data>
 800e392:	4604      	mov	r4, r0
 800e394:	b108      	cbz	r0, 800e39a <rclc_executor_spin_some.part.0+0xda>
 800e396:	4548      	cmp	r0, r9
 800e398:	d11d      	bne.n	800e3d6 <rclc_executor_spin_some.part.0+0x116>
 800e39a:	68ab      	ldr	r3, [r5, #8]
 800e39c:	429e      	cmp	r6, r3
 800e39e:	d208      	bcs.n	800e3b2 <rclc_executor_spin_some.part.0+0xf2>
 800e3a0:	6868      	ldr	r0, [r5, #4]
 800e3a2:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800e3a6:	4641      	mov	r1, r8
 800e3a8:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800e3ac:	3601      	adds	r6, #1
 800e3ae:	2a00      	cmp	r2, #0
 800e3b0:	d1ed      	bne.n	800e38e <rclc_executor_spin_some.part.0+0xce>
 800e3b2:	2600      	movs	r6, #0
 800e3b4:	b93b      	cbnz	r3, 800e3c6 <rclc_executor_spin_some.part.0+0x106>
 800e3b6:	e00e      	b.n	800e3d6 <rclc_executor_spin_some.part.0+0x116>
 800e3b8:	f7ff fdd6 	bl	800df68 <_rclc_execute>
 800e3bc:	4604      	mov	r4, r0
 800e3be:	b950      	cbnz	r0, 800e3d6 <rclc_executor_spin_some.part.0+0x116>
 800e3c0:	68ab      	ldr	r3, [r5, #8]
 800e3c2:	429e      	cmp	r6, r3
 800e3c4:	d236      	bcs.n	800e434 <rclc_executor_spin_some.part.0+0x174>
 800e3c6:	6868      	ldr	r0, [r5, #4]
 800e3c8:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800e3cc:	3601      	adds	r6, #1
 800e3ce:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d1f0      	bne.n	800e3b8 <rclc_executor_spin_some.part.0+0xf8>
 800e3d6:	4627      	mov	r7, r4
 800e3d8:	e02c      	b.n	800e434 <rclc_executor_spin_some.part.0+0x174>
 800e3da:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800e3de:	4640      	mov	r0, r8
 800e3e0:	6849      	ldr	r1, [r1, #4]
 800e3e2:	f008 fa69 	bl	80168b8 <rcl_wait_set_add_client>
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	d098      	beq.n	800e31c <rclc_executor_spin_some.part.0+0x5c>
 800e3ea:	9001      	str	r0, [sp, #4]
 800e3ec:	f000 faf6 	bl	800e9dc <rcutils_reset_error>
 800e3f0:	9801      	ldr	r0, [sp, #4]
 800e3f2:	4607      	mov	r7, r0
 800e3f4:	e01e      	b.n	800e434 <rclc_executor_spin_some.part.0+0x174>
 800e3f6:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800e3fa:	4640      	mov	r0, r8
 800e3fc:	6849      	ldr	r1, [r1, #4]
 800e3fe:	f007 fef3 	bl	80161e8 <rcl_wait_set_add_subscription>
 800e402:	2800      	cmp	r0, #0
 800e404:	d08a      	beq.n	800e31c <rclc_executor_spin_some.part.0+0x5c>
 800e406:	e7f0      	b.n	800e3ea <rclc_executor_spin_some.part.0+0x12a>
 800e408:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800e40c:	4640      	mov	r0, r8
 800e40e:	6849      	ldr	r1, [r1, #4]
 800e410:	f008 fa22 	bl	8016858 <rcl_wait_set_add_timer>
 800e414:	2800      	cmp	r0, #0
 800e416:	d081      	beq.n	800e31c <rclc_executor_spin_some.part.0+0x5c>
 800e418:	e7e7      	b.n	800e3ea <rclc_executor_spin_some.part.0+0x12a>
 800e41a:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800e41e:	4640      	mov	r0, r8
 800e420:	6849      	ldr	r1, [r1, #4]
 800e422:	f008 f9ed 	bl	8016800 <rcl_wait_set_add_guard_condition>
 800e426:	2800      	cmp	r0, #0
 800e428:	f43f af78 	beq.w	800e31c <rclc_executor_spin_some.part.0+0x5c>
 800e42c:	e7dd      	b.n	800e3ea <rclc_executor_spin_some.part.0+0x12a>
 800e42e:	f000 fad5 	bl	800e9dc <rcutils_reset_error>
 800e432:	2701      	movs	r7, #1
 800e434:	4638      	mov	r0, r7
 800e436:	b003      	add	sp, #12
 800e438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e43c:	f000 face 	bl	800e9dc <rcutils_reset_error>
 800e440:	4638      	mov	r0, r7
 800e442:	b003      	add	sp, #12
 800e444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e448:	68ab      	ldr	r3, [r5, #8]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d04e      	beq.n	800e4ec <rclc_executor_spin_some.part.0+0x22c>
 800e44e:	2400      	movs	r4, #0
 800e450:	4626      	mov	r6, r4
 800e452:	f240 1991 	movw	r9, #401	; 0x191
 800e456:	e008      	b.n	800e46a <rclc_executor_spin_some.part.0+0x1aa>
 800e458:	f7ff fcde 	bl	800de18 <_rclc_check_for_new_data>
 800e45c:	4604      	mov	r4, r0
 800e45e:	b108      	cbz	r0, 800e464 <rclc_executor_spin_some.part.0+0x1a4>
 800e460:	4548      	cmp	r0, r9
 800e462:	d1b8      	bne.n	800e3d6 <rclc_executor_spin_some.part.0+0x116>
 800e464:	68ab      	ldr	r3, [r5, #8]
 800e466:	429e      	cmp	r6, r3
 800e468:	d23c      	bcs.n	800e4e4 <rclc_executor_spin_some.part.0+0x224>
 800e46a:	686a      	ldr	r2, [r5, #4]
 800e46c:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800e470:	4641      	mov	r1, r8
 800e472:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800e476:	3601      	adds	r6, #1
 800e478:	f1bc 0f00 	cmp.w	ip, #0
 800e47c:	d1ec      	bne.n	800e458 <rclc_executor_spin_some.part.0+0x198>
 800e47e:	4619      	mov	r1, r3
 800e480:	4610      	mov	r0, r2
 800e482:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800e486:	4798      	blx	r3
 800e488:	2800      	cmp	r0, #0
 800e48a:	d0a4      	beq.n	800e3d6 <rclc_executor_spin_some.part.0+0x116>
 800e48c:	68ab      	ldr	r3, [r5, #8]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d0a1      	beq.n	800e3d6 <rclc_executor_spin_some.part.0+0x116>
 800e492:	f04f 0a00 	mov.w	sl, #0
 800e496:	f240 1691 	movw	r6, #401	; 0x191
 800e49a:	f240 2959 	movw	r9, #601	; 0x259
 800e49e:	e010      	b.n	800e4c2 <rclc_executor_spin_some.part.0+0x202>
 800e4a0:	f7ff fd0c 	bl	800debc <_rclc_take_new_data>
 800e4a4:	b118      	cbz	r0, 800e4ae <rclc_executor_spin_some.part.0+0x1ee>
 800e4a6:	42b0      	cmp	r0, r6
 800e4a8:	d001      	beq.n	800e4ae <rclc_executor_spin_some.part.0+0x1ee>
 800e4aa:	4548      	cmp	r0, r9
 800e4ac:	d121      	bne.n	800e4f2 <rclc_executor_spin_some.part.0+0x232>
 800e4ae:	6868      	ldr	r0, [r5, #4]
 800e4b0:	4458      	add	r0, fp
 800e4b2:	f7ff fd59 	bl	800df68 <_rclc_execute>
 800e4b6:	4604      	mov	r4, r0
 800e4b8:	2800      	cmp	r0, #0
 800e4ba:	d18c      	bne.n	800e3d6 <rclc_executor_spin_some.part.0+0x116>
 800e4bc:	68ab      	ldr	r3, [r5, #8]
 800e4be:	459a      	cmp	sl, r3
 800e4c0:	d2b8      	bcs.n	800e434 <rclc_executor_spin_some.part.0+0x174>
 800e4c2:	6868      	ldr	r0, [r5, #4]
 800e4c4:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800e4c8:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800e4cc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800e4d0:	4641      	mov	r1, r8
 800e4d2:	f10a 0a01 	add.w	sl, sl, #1
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1e2      	bne.n	800e4a0 <rclc_executor_spin_some.part.0+0x1e0>
 800e4da:	4627      	mov	r7, r4
 800e4dc:	e7aa      	b.n	800e434 <rclc_executor_spin_some.part.0+0x174>
 800e4de:	686a      	ldr	r2, [r5, #4]
 800e4e0:	461c      	mov	r4, r3
 800e4e2:	e748      	b.n	800e376 <rclc_executor_spin_some.part.0+0xb6>
 800e4e4:	686a      	ldr	r2, [r5, #4]
 800e4e6:	e7ca      	b.n	800e47e <rclc_executor_spin_some.part.0+0x1be>
 800e4e8:	686a      	ldr	r2, [r5, #4]
 800e4ea:	e744      	b.n	800e376 <rclc_executor_spin_some.part.0+0xb6>
 800e4ec:	686a      	ldr	r2, [r5, #4]
 800e4ee:	461c      	mov	r4, r3
 800e4f0:	e7c5      	b.n	800e47e <rclc_executor_spin_some.part.0+0x1be>
 800e4f2:	4607      	mov	r7, r0
 800e4f4:	e79e      	b.n	800e434 <rclc_executor_spin_some.part.0+0x174>
 800e4f6:	bf00      	nop

0800e4f8 <rclc_executor_spin>:
 800e4f8:	b1a8      	cbz	r0, 800e526 <rclc_executor_spin+0x2e>
 800e4fa:	b5d0      	push	{r4, r6, r7, lr}
 800e4fc:	4604      	mov	r4, r0
 800e4fe:	6820      	ldr	r0, [r4, #0]
 800e500:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 800e504:	f006 fa94 	bl	8014a30 <rcl_context_is_valid>
 800e508:	4601      	mov	r1, r0
 800e50a:	4632      	mov	r2, r6
 800e50c:	463b      	mov	r3, r7
 800e50e:	4620      	mov	r0, r4
 800e510:	b129      	cbz	r1, 800e51e <rclc_executor_spin+0x26>
 800e512:	f7ff fed5 	bl	800e2c0 <rclc_executor_spin_some.part.0>
 800e516:	f030 0302 	bics.w	r3, r0, #2
 800e51a:	d0f0      	beq.n	800e4fe <rclc_executor_spin+0x6>
 800e51c:	bdd0      	pop	{r4, r6, r7, pc}
 800e51e:	f000 fa5d 	bl	800e9dc <rcutils_reset_error>
 800e522:	2001      	movs	r0, #1
 800e524:	bdd0      	pop	{r4, r6, r7, pc}
 800e526:	200b      	movs	r0, #11
 800e528:	4770      	bx	lr
 800e52a:	bf00      	nop

0800e52c <rclc_executor_handle_counters_zero_init>:
 800e52c:	b140      	cbz	r0, 800e540 <rclc_executor_handle_counters_zero_init+0x14>
 800e52e:	2300      	movs	r3, #0
 800e530:	6003      	str	r3, [r0, #0]
 800e532:	6043      	str	r3, [r0, #4]
 800e534:	6083      	str	r3, [r0, #8]
 800e536:	60c3      	str	r3, [r0, #12]
 800e538:	6103      	str	r3, [r0, #16]
 800e53a:	6143      	str	r3, [r0, #20]
 800e53c:	4618      	mov	r0, r3
 800e53e:	4770      	bx	lr
 800e540:	200b      	movs	r0, #11
 800e542:	4770      	bx	lr

0800e544 <rclc_executor_handle_init>:
 800e544:	b178      	cbz	r0, 800e566 <rclc_executor_handle_init+0x22>
 800e546:	b430      	push	{r4, r5}
 800e548:	4603      	mov	r3, r0
 800e54a:	2209      	movs	r2, #9
 800e54c:	2000      	movs	r0, #0
 800e54e:	2400      	movs	r4, #0
 800e550:	2500      	movs	r5, #0
 800e552:	801a      	strh	r2, [r3, #0]
 800e554:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800e558:	bc30      	pop	{r4, r5}
 800e55a:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800e55e:	6359      	str	r1, [r3, #52]	; 0x34
 800e560:	6318      	str	r0, [r3, #48]	; 0x30
 800e562:	8718      	strh	r0, [r3, #56]	; 0x38
 800e564:	4770      	bx	lr
 800e566:	200b      	movs	r0, #11
 800e568:	4770      	bx	lr
 800e56a:	bf00      	nop

0800e56c <rclc_support_init_with_options>:
 800e56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e570:	b084      	sub	sp, #16
 800e572:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800e576:	b390      	cbz	r0, 800e5de <rclc_support_init_with_options+0x72>
 800e578:	461c      	mov	r4, r3
 800e57a:	b383      	cbz	r3, 800e5de <rclc_support_init_with_options+0x72>
 800e57c:	f1b8 0f00 	cmp.w	r8, #0
 800e580:	d02d      	beq.n	800e5de <rclc_support_init_with_options+0x72>
 800e582:	4605      	mov	r5, r0
 800e584:	460e      	mov	r6, r1
 800e586:	4617      	mov	r7, r2
 800e588:	f7ff f828 	bl	800d5dc <rcl_get_zero_initialized_init_options>
 800e58c:	4629      	mov	r1, r5
 800e58e:	6028      	str	r0, [r5, #0]
 800e590:	4620      	mov	r0, r4
 800e592:	f7ff f89b 	bl	800d6cc <rcl_init_options_copy>
 800e596:	4604      	mov	r4, r0
 800e598:	b9d8      	cbnz	r0, 800e5d2 <rclc_support_init_with_options+0x66>
 800e59a:	466c      	mov	r4, sp
 800e59c:	4620      	mov	r0, r4
 800e59e:	f006 fa37 	bl	8014a10 <rcl_get_zero_initialized_context>
 800e5a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e5a6:	f105 0408 	add.w	r4, r5, #8
 800e5aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e5ae:	4623      	mov	r3, r4
 800e5b0:	4639      	mov	r1, r7
 800e5b2:	4630      	mov	r0, r6
 800e5b4:	462a      	mov	r2, r5
 800e5b6:	f006 fc25 	bl	8014e04 <rcl_init>
 800e5ba:	4604      	mov	r4, r0
 800e5bc:	b948      	cbnz	r0, 800e5d2 <rclc_support_init_with_options+0x66>
 800e5be:	f8c5 8018 	str.w	r8, [r5, #24]
 800e5c2:	4642      	mov	r2, r8
 800e5c4:	f105 011c 	add.w	r1, r5, #28
 800e5c8:	2003      	movs	r0, #3
 800e5ca:	f007 f855 	bl	8015678 <rcl_clock_init>
 800e5ce:	4604      	mov	r4, r0
 800e5d0:	b108      	cbz	r0, 800e5d6 <rclc_support_init_with_options+0x6a>
 800e5d2:	f000 fa03 	bl	800e9dc <rcutils_reset_error>
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	b004      	add	sp, #16
 800e5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5de:	240b      	movs	r4, #11
 800e5e0:	4620      	mov	r0, r4
 800e5e2:	b004      	add	sp, #16
 800e5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e5e8 <rclc_node_init_with_options>:
 800e5e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5ec:	b087      	sub	sp, #28
 800e5ee:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800e5f0:	b1e0      	cbz	r0, 800e62c <rclc_node_init_with_options+0x44>
 800e5f2:	460d      	mov	r5, r1
 800e5f4:	b1d1      	cbz	r1, 800e62c <rclc_node_init_with_options+0x44>
 800e5f6:	4616      	mov	r6, r2
 800e5f8:	b1c2      	cbz	r2, 800e62c <rclc_node_init_with_options+0x44>
 800e5fa:	4698      	mov	r8, r3
 800e5fc:	b1b3      	cbz	r3, 800e62c <rclc_node_init_with_options+0x44>
 800e5fe:	b1af      	cbz	r7, 800e62c <rclc_node_init_with_options+0x44>
 800e600:	f10d 0910 	add.w	r9, sp, #16
 800e604:	4604      	mov	r4, r0
 800e606:	4648      	mov	r0, r9
 800e608:	f006 fd34 	bl	8015074 <rcl_get_zero_initialized_node>
 800e60c:	e899 0003 	ldmia.w	r9, {r0, r1}
 800e610:	f108 0308 	add.w	r3, r8, #8
 800e614:	9700      	str	r7, [sp, #0]
 800e616:	4632      	mov	r2, r6
 800e618:	e884 0003 	stmia.w	r4, {r0, r1}
 800e61c:	4629      	mov	r1, r5
 800e61e:	4620      	mov	r0, r4
 800e620:	f006 fd32 	bl	8015088 <rcl_node_init>
 800e624:	b930      	cbnz	r0, 800e634 <rclc_node_init_with_options+0x4c>
 800e626:	b007      	add	sp, #28
 800e628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e62c:	200b      	movs	r0, #11
 800e62e:	b007      	add	sp, #28
 800e630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e634:	9003      	str	r0, [sp, #12]
 800e636:	f000 f9d1 	bl	800e9dc <rcutils_reset_error>
 800e63a:	9803      	ldr	r0, [sp, #12]
 800e63c:	b007      	add	sp, #28
 800e63e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e642:	bf00      	nop

0800e644 <rclc_publisher_init_default>:
 800e644:	b368      	cbz	r0, 800e6a2 <rclc_publisher_init_default+0x5e>
 800e646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e64a:	460d      	mov	r5, r1
 800e64c:	b09e      	sub	sp, #120	; 0x78
 800e64e:	b321      	cbz	r1, 800e69a <rclc_publisher_init_default+0x56>
 800e650:	4616      	mov	r6, r2
 800e652:	b312      	cbz	r2, 800e69a <rclc_publisher_init_default+0x56>
 800e654:	461f      	mov	r7, r3
 800e656:	b303      	cbz	r3, 800e69a <rclc_publisher_init_default+0x56>
 800e658:	4604      	mov	r4, r0
 800e65a:	f7ff f921 	bl	800d8a0 <rcl_get_zero_initialized_publisher>
 800e65e:	f10d 0810 	add.w	r8, sp, #16
 800e662:	6020      	str	r0, [r4, #0]
 800e664:	4640      	mov	r0, r8
 800e666:	f7ff fa17 	bl	800da98 <rcl_publisher_get_default_options>
 800e66a:	490f      	ldr	r1, [pc, #60]	; (800e6a8 <rclc_publisher_init_default+0x64>)
 800e66c:	2250      	movs	r2, #80	; 0x50
 800e66e:	4640      	mov	r0, r8
 800e670:	f00a fbb0 	bl	8018dd4 <memcpy>
 800e674:	f8cd 8000 	str.w	r8, [sp]
 800e678:	463b      	mov	r3, r7
 800e67a:	4632      	mov	r2, r6
 800e67c:	4629      	mov	r1, r5
 800e67e:	4620      	mov	r0, r4
 800e680:	f7ff f914 	bl	800d8ac <rcl_publisher_init>
 800e684:	b910      	cbnz	r0, 800e68c <rclc_publisher_init_default+0x48>
 800e686:	b01e      	add	sp, #120	; 0x78
 800e688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e68c:	9003      	str	r0, [sp, #12]
 800e68e:	f000 f9a5 	bl	800e9dc <rcutils_reset_error>
 800e692:	9803      	ldr	r0, [sp, #12]
 800e694:	b01e      	add	sp, #120	; 0x78
 800e696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e69a:	200b      	movs	r0, #11
 800e69c:	b01e      	add	sp, #120	; 0x78
 800e69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6a2:	200b      	movs	r0, #11
 800e6a4:	4770      	bx	lr
 800e6a6:	bf00      	nop
 800e6a8:	0801e190 	.word	0x0801e190

0800e6ac <rclc_subscription_init_best_effort>:
 800e6ac:	b368      	cbz	r0, 800e70a <rclc_subscription_init_best_effort+0x5e>
 800e6ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b2:	460d      	mov	r5, r1
 800e6b4:	b0a0      	sub	sp, #128	; 0x80
 800e6b6:	b321      	cbz	r1, 800e702 <rclc_subscription_init_best_effort+0x56>
 800e6b8:	4616      	mov	r6, r2
 800e6ba:	b312      	cbz	r2, 800e702 <rclc_subscription_init_best_effort+0x56>
 800e6bc:	461f      	mov	r7, r3
 800e6be:	b303      	cbz	r3, 800e702 <rclc_subscription_init_best_effort+0x56>
 800e6c0:	4604      	mov	r4, r0
 800e6c2:	f7ff fa2f 	bl	800db24 <rcl_get_zero_initialized_subscription>
 800e6c6:	f10d 0810 	add.w	r8, sp, #16
 800e6ca:	6020      	str	r0, [r4, #0]
 800e6cc:	4640      	mov	r0, r8
 800e6ce:	f7ff fb25 	bl	800dd1c <rcl_subscription_get_default_options>
 800e6d2:	490f      	ldr	r1, [pc, #60]	; (800e710 <rclc_subscription_init_best_effort+0x64>)
 800e6d4:	2250      	movs	r2, #80	; 0x50
 800e6d6:	4640      	mov	r0, r8
 800e6d8:	f00a fb7c 	bl	8018dd4 <memcpy>
 800e6dc:	f8cd 8000 	str.w	r8, [sp]
 800e6e0:	463b      	mov	r3, r7
 800e6e2:	4632      	mov	r2, r6
 800e6e4:	4629      	mov	r1, r5
 800e6e6:	4620      	mov	r0, r4
 800e6e8:	f7ff fa22 	bl	800db30 <rcl_subscription_init>
 800e6ec:	b910      	cbnz	r0, 800e6f4 <rclc_subscription_init_best_effort+0x48>
 800e6ee:	b020      	add	sp, #128	; 0x80
 800e6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6f4:	9003      	str	r0, [sp, #12]
 800e6f6:	f000 f971 	bl	800e9dc <rcutils_reset_error>
 800e6fa:	9803      	ldr	r0, [sp, #12]
 800e6fc:	b020      	add	sp, #128	; 0x80
 800e6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e702:	200b      	movs	r0, #11
 800e704:	b020      	add	sp, #128	; 0x80
 800e706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e70a:	200b      	movs	r0, #11
 800e70c:	4770      	bx	lr
 800e70e:	bf00      	nop
 800e710:	0801e1e0 	.word	0x0801e1e0

0800e714 <rclc_timer_init_default>:
 800e714:	b350      	cbz	r0, 800e76c <rclc_timer_init_default+0x58>
 800e716:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e71a:	460c      	mov	r4, r1
 800e71c:	b08b      	sub	sp, #44	; 0x2c
 800e71e:	b309      	cbz	r1, 800e764 <rclc_timer_init_default+0x50>
 800e720:	4691      	mov	r9, r2
 800e722:	4698      	mov	r8, r3
 800e724:	4607      	mov	r7, r0
 800e726:	f007 f993 	bl	8015a50 <rcl_get_zero_initialized_timer>
 800e72a:	69a6      	ldr	r6, [r4, #24]
 800e72c:	6038      	str	r0, [r7, #0]
 800e72e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e730:	ad03      	add	r5, sp, #12
 800e732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e734:	6833      	ldr	r3, [r6, #0]
 800e736:	602b      	str	r3, [r5, #0]
 800e738:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e73a:	9302      	str	r3, [sp, #8]
 800e73c:	e9cd 9800 	strd	r9, r8, [sp]
 800e740:	4638      	mov	r0, r7
 800e742:	f104 0208 	add.w	r2, r4, #8
 800e746:	f104 011c 	add.w	r1, r4, #28
 800e74a:	f007 f987 	bl	8015a5c <rcl_timer_init>
 800e74e:	b910      	cbnz	r0, 800e756 <rclc_timer_init_default+0x42>
 800e750:	b00b      	add	sp, #44	; 0x2c
 800e752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e756:	9009      	str	r0, [sp, #36]	; 0x24
 800e758:	f000 f940 	bl	800e9dc <rcutils_reset_error>
 800e75c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e75e:	b00b      	add	sp, #44	; 0x2c
 800e760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e764:	200b      	movs	r0, #11
 800e766:	b00b      	add	sp, #44	; 0x2c
 800e768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e76c:	200b      	movs	r0, #11
 800e76e:	4770      	bx	lr

0800e770 <__default_zero_allocate>:
 800e770:	f00a ba36 	b.w	8018be0 <calloc>

0800e774 <__default_reallocate>:
 800e774:	f00a beae 	b.w	80194d4 <realloc>

0800e778 <__default_deallocate>:
 800e778:	f00a bb24 	b.w	8018dc4 <free>

0800e77c <__default_allocate>:
 800e77c:	f00a bb1a 	b.w	8018db4 <malloc>

0800e780 <rcutils_get_zero_initialized_allocator>:
 800e780:	b470      	push	{r4, r5, r6}
 800e782:	4d05      	ldr	r5, [pc, #20]	; (800e798 <rcutils_get_zero_initialized_allocator+0x18>)
 800e784:	4606      	mov	r6, r0
 800e786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e788:	4634      	mov	r4, r6
 800e78a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e78c:	682b      	ldr	r3, [r5, #0]
 800e78e:	6023      	str	r3, [r4, #0]
 800e790:	4630      	mov	r0, r6
 800e792:	bc70      	pop	{r4, r5, r6}
 800e794:	4770      	bx	lr
 800e796:	bf00      	nop
 800e798:	0801e230 	.word	0x0801e230

0800e79c <rcutils_set_default_allocator>:
 800e79c:	b1a0      	cbz	r0, 800e7c8 <rcutils_set_default_allocator+0x2c>
 800e79e:	6801      	ldr	r1, [r0, #0]
 800e7a0:	b199      	cbz	r1, 800e7ca <rcutils_set_default_allocator+0x2e>
 800e7a2:	b430      	push	{r4, r5}
 800e7a4:	6844      	ldr	r4, [r0, #4]
 800e7a6:	b194      	cbz	r4, 800e7ce <rcutils_set_default_allocator+0x32>
 800e7a8:	68c5      	ldr	r5, [r0, #12]
 800e7aa:	b15d      	cbz	r5, 800e7c4 <rcutils_set_default_allocator+0x28>
 800e7ac:	6883      	ldr	r3, [r0, #8]
 800e7ae:	b18b      	cbz	r3, 800e7d4 <rcutils_set_default_allocator+0x38>
 800e7b0:	4a09      	ldr	r2, [pc, #36]	; (800e7d8 <rcutils_set_default_allocator+0x3c>)
 800e7b2:	e9c2 1400 	strd	r1, r4, [r2]
 800e7b6:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800e7ba:	2000      	movs	r0, #0
 800e7bc:	6110      	str	r0, [r2, #16]
 800e7be:	2001      	movs	r0, #1
 800e7c0:	bc30      	pop	{r4, r5}
 800e7c2:	4770      	bx	lr
 800e7c4:	4628      	mov	r0, r5
 800e7c6:	e7fb      	b.n	800e7c0 <rcutils_set_default_allocator+0x24>
 800e7c8:	4770      	bx	lr
 800e7ca:	4608      	mov	r0, r1
 800e7cc:	4770      	bx	lr
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	bc30      	pop	{r4, r5}
 800e7d2:	4770      	bx	lr
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	e7f3      	b.n	800e7c0 <rcutils_set_default_allocator+0x24>
 800e7d8:	20000034 	.word	0x20000034

0800e7dc <rcutils_get_default_allocator>:
 800e7dc:	b470      	push	{r4, r5, r6}
 800e7de:	4d05      	ldr	r5, [pc, #20]	; (800e7f4 <rcutils_get_default_allocator+0x18>)
 800e7e0:	4606      	mov	r6, r0
 800e7e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7e4:	4634      	mov	r4, r6
 800e7e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7e8:	682b      	ldr	r3, [r5, #0]
 800e7ea:	6023      	str	r3, [r4, #0]
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	bc70      	pop	{r4, r5, r6}
 800e7f0:	4770      	bx	lr
 800e7f2:	bf00      	nop
 800e7f4:	20000034 	.word	0x20000034

0800e7f8 <rcutils_allocator_is_valid>:
 800e7f8:	b158      	cbz	r0, 800e812 <rcutils_allocator_is_valid+0x1a>
 800e7fa:	6803      	ldr	r3, [r0, #0]
 800e7fc:	b143      	cbz	r3, 800e810 <rcutils_allocator_is_valid+0x18>
 800e7fe:	6843      	ldr	r3, [r0, #4]
 800e800:	b133      	cbz	r3, 800e810 <rcutils_allocator_is_valid+0x18>
 800e802:	68c3      	ldr	r3, [r0, #12]
 800e804:	b123      	cbz	r3, 800e810 <rcutils_allocator_is_valid+0x18>
 800e806:	6880      	ldr	r0, [r0, #8]
 800e808:	3800      	subs	r0, #0
 800e80a:	bf18      	it	ne
 800e80c:	2001      	movne	r0, #1
 800e80e:	4770      	bx	lr
 800e810:	4618      	mov	r0, r3
 800e812:	4770      	bx	lr

0800e814 <__rcutils_format_error_string>:
 800e814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e818:	460e      	mov	r6, r1
 800e81a:	b086      	sub	sp, #24
 800e81c:	4607      	mov	r7, r0
 800e81e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e822:	4630      	mov	r0, r6
 800e824:	f00a ff60 	bl	80196e8 <strnlen>
 800e828:	f240 38ff 	movw	r8, #1023	; 0x3ff
 800e82c:	4540      	cmp	r0, r8
 800e82e:	bf28      	it	cs
 800e830:	4640      	movcs	r0, r8
 800e832:	4605      	mov	r5, r0
 800e834:	f5c5 6480 	rsb	r4, r5, #1024	; 0x400
 800e838:	462a      	mov	r2, r5
 800e83a:	4631      	mov	r1, r6
 800e83c:	4638      	mov	r0, r7
 800e83e:	f00a fad7 	bl	8018df0 <memmove>
 800e842:	2c05      	cmp	r4, #5
 800e844:	46a1      	mov	r9, r4
 800e846:	bf28      	it	cs
 800e848:	f04f 0905 	movcs.w	r9, #5
 800e84c:	454c      	cmp	r4, r9
 800e84e:	f04f 0300 	mov.w	r3, #0
 800e852:	bf98      	it	ls
 800e854:	eba8 0905 	subls.w	r9, r8, r5
 800e858:	557b      	strb	r3, [r7, r5]
 800e85a:	442f      	add	r7, r5
 800e85c:	4949      	ldr	r1, [pc, #292]	; (800e984 <__rcutils_format_error_string+0x170>)
 800e85e:	eba4 0409 	sub.w	r4, r4, r9
 800e862:	464a      	mov	r2, r9
 800e864:	4638      	mov	r0, r7
 800e866:	f04f 0800 	mov.w	r8, #0
 800e86a:	f506 7540 	add.w	r5, r6, #768	; 0x300
 800e86e:	f00a fab1 	bl	8018dd4 <memcpy>
 800e872:	f807 8009 	strb.w	r8, [r7, r9]
 800e876:	4621      	mov	r1, r4
 800e878:	4628      	mov	r0, r5
 800e87a:	f00a ff35 	bl	80196e8 <strnlen>
 800e87e:	4284      	cmp	r4, r0
 800e880:	4682      	mov	sl, r0
 800e882:	444f      	add	r7, r9
 800e884:	d96b      	bls.n	800e95e <__rcutils_format_error_string+0x14a>
 800e886:	1a24      	subs	r4, r4, r0
 800e888:	2c01      	cmp	r4, #1
 800e88a:	4629      	mov	r1, r5
 800e88c:	4602      	mov	r2, r0
 800e88e:	4625      	mov	r5, r4
 800e890:	4638      	mov	r0, r7
 800e892:	bf28      	it	cs
 800e894:	2501      	movcs	r5, #1
 800e896:	f00a faab 	bl	8018df0 <memmove>
 800e89a:	42ac      	cmp	r4, r5
 800e89c:	f807 800a 	strb.w	r8, [r7, sl]
 800e8a0:	eb07 030a 	add.w	r3, r7, sl
 800e8a4:	bf88      	it	hi
 800e8a6:	1b64      	subhi	r4, r4, r5
 800e8a8:	d963      	bls.n	800e972 <__rcutils_format_error_string+0x15e>
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	4936      	ldr	r1, [pc, #216]	; (800e988 <__rcutils_format_error_string+0x174>)
 800e8ae:	462a      	mov	r2, r5
 800e8b0:	f00a fa90 	bl	8018dd4 <memcpy>
 800e8b4:	f04f 0800 	mov.w	r8, #0
 800e8b8:	f800 8005 	strb.w	r8, [r0, r5]
 800e8bc:	e9d6 67fa 	ldrd	r6, r7, [r6, #1000]	; 0x3e8
 800e8c0:	ea56 0307 	orrs.w	r3, r6, r7
 800e8c4:	eb00 0a05 	add.w	sl, r0, r5
 800e8c8:	d056      	beq.n	800e978 <__rcutils_format_error_string+0x164>
 800e8ca:	46e9      	mov	r9, sp
 800e8cc:	464d      	mov	r5, r9
 800e8ce:	4630      	mov	r0, r6
 800e8d0:	4639      	mov	r1, r7
 800e8d2:	220a      	movs	r2, #10
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	f7f2 fa0f 	bl	8000cf8 <__aeabi_uldivmod>
 800e8da:	3230      	adds	r2, #48	; 0x30
 800e8dc:	f805 2b01 	strb.w	r2, [r5], #1
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	220a      	movs	r2, #10
 800e8e4:	4630      	mov	r0, r6
 800e8e6:	4639      	mov	r1, r7
 800e8e8:	f7f2 fa06 	bl	8000cf8 <__aeabi_uldivmod>
 800e8ec:	463b      	mov	r3, r7
 800e8ee:	4632      	mov	r2, r6
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	bf08      	it	eq
 800e8f4:	2a0a      	cmpeq	r2, #10
 800e8f6:	f108 0801 	add.w	r8, r8, #1
 800e8fa:	4606      	mov	r6, r0
 800e8fc:	460f      	mov	r7, r1
 800e8fe:	d2e6      	bcs.n	800e8ce <__rcutils_format_error_string+0xba>
 800e900:	ab06      	add	r3, sp, #24
 800e902:	4498      	add	r8, r3
 800e904:	2300      	movs	r3, #0
 800e906:	2115      	movs	r1, #21
 800e908:	f808 3c18 	strb.w	r3, [r8, #-24]
 800e90c:	4648      	mov	r0, r9
 800e90e:	f00a feeb 	bl	80196e8 <strnlen>
 800e912:	2801      	cmp	r0, #1
 800e914:	d90f      	bls.n	800e936 <__rcutils_format_error_string+0x122>
 800e916:	1e43      	subs	r3, r0, #1
 800e918:	f10d 32ff 	add.w	r2, sp, #4294967295	; 0xffffffff
 800e91c:	4410      	add	r0, r2
 800e91e:	444b      	add	r3, r9
 800e920:	464a      	mov	r2, r9
 800e922:	7811      	ldrb	r1, [r2, #0]
 800e924:	781d      	ldrb	r5, [r3, #0]
 800e926:	f802 5b01 	strb.w	r5, [r2], #1
 800e92a:	f803 1901 	strb.w	r1, [r3], #-1
 800e92e:	1a81      	subs	r1, r0, r2
 800e930:	1ac5      	subs	r5, r0, r3
 800e932:	428d      	cmp	r5, r1
 800e934:	d3f5      	bcc.n	800e922 <__rcutils_format_error_string+0x10e>
 800e936:	4621      	mov	r1, r4
 800e938:	4648      	mov	r0, r9
 800e93a:	f00a fed5 	bl	80196e8 <strnlen>
 800e93e:	42a0      	cmp	r0, r4
 800e940:	4605      	mov	r5, r0
 800e942:	bf28      	it	cs
 800e944:	f104 35ff 	addcs.w	r5, r4, #4294967295	; 0xffffffff
 800e948:	4649      	mov	r1, r9
 800e94a:	462a      	mov	r2, r5
 800e94c:	4650      	mov	r0, sl
 800e94e:	f00a fa41 	bl	8018dd4 <memcpy>
 800e952:	2300      	movs	r3, #0
 800e954:	f80a 3005 	strb.w	r3, [sl, r5]
 800e958:	b006      	add	sp, #24
 800e95a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e95e:	3c01      	subs	r4, #1
 800e960:	4622      	mov	r2, r4
 800e962:	4629      	mov	r1, r5
 800e964:	4638      	mov	r0, r7
 800e966:	f00a fa43 	bl	8018df0 <memmove>
 800e96a:	f807 8004 	strb.w	r8, [r7, r4]
 800e96e:	193b      	adds	r3, r7, r4
 800e970:	2401      	movs	r4, #1
 800e972:	1e65      	subs	r5, r4, #1
 800e974:	2401      	movs	r4, #1
 800e976:	e798      	b.n	800e8aa <__rcutils_format_error_string+0x96>
 800e978:	2330      	movs	r3, #48	; 0x30
 800e97a:	f8ad 3000 	strh.w	r3, [sp]
 800e97e:	46e9      	mov	r9, sp
 800e980:	e7d9      	b.n	800e936 <__rcutils_format_error_string+0x122>
 800e982:	bf00      	nop
 800e984:	0801e244 	.word	0x0801e244
 800e988:	0801e24c 	.word	0x0801e24c

0800e98c <rcutils_get_error_string>:
 800e98c:	b538      	push	{r3, r4, r5, lr}
 800e98e:	4b0e      	ldr	r3, [pc, #56]	; (800e9c8 <rcutils_get_error_string+0x3c>)
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	4604      	mov	r4, r0
 800e994:	b18b      	cbz	r3, 800e9ba <rcutils_get_error_string+0x2e>
 800e996:	4d0d      	ldr	r5, [pc, #52]	; (800e9cc <rcutils_get_error_string+0x40>)
 800e998:	782b      	ldrb	r3, [r5, #0]
 800e99a:	b13b      	cbz	r3, 800e9ac <rcutils_get_error_string+0x20>
 800e99c:	490c      	ldr	r1, [pc, #48]	; (800e9d0 <rcutils_get_error_string+0x44>)
 800e99e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	f00a fa16 	bl	8018dd4 <memcpy>
 800e9a8:	4620      	mov	r0, r4
 800e9aa:	bd38      	pop	{r3, r4, r5, pc}
 800e9ac:	4909      	ldr	r1, [pc, #36]	; (800e9d4 <rcutils_get_error_string+0x48>)
 800e9ae:	4808      	ldr	r0, [pc, #32]	; (800e9d0 <rcutils_get_error_string+0x44>)
 800e9b0:	f7ff ff30 	bl	800e814 <__rcutils_format_error_string>
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	702b      	strb	r3, [r5, #0]
 800e9b8:	e7f0      	b.n	800e99c <rcutils_get_error_string+0x10>
 800e9ba:	4907      	ldr	r1, [pc, #28]	; (800e9d8 <rcutils_get_error_string+0x4c>)
 800e9bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e9c0:	f00a fa08 	bl	8018dd4 <memcpy>
 800e9c4:	4620      	mov	r0, r4
 800e9c6:	bd38      	pop	{r3, r4, r5, pc}
 800e9c8:	20010420 	.word	0x20010420
 800e9cc:	20010421 	.word	0x20010421
 800e9d0:	20010e60 	.word	0x20010e60
 800e9d4:	20011260 	.word	0x20011260
 800e9d8:	0801dad4 	.word	0x0801dad4

0800e9dc <rcutils_reset_error>:
 800e9dc:	b510      	push	{r4, lr}
 800e9de:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800e9e2:	2100      	movs	r1, #0
 800e9e4:	4807      	ldr	r0, [pc, #28]	; (800ea04 <rcutils_reset_error+0x28>)
 800e9e6:	f00a fa1d 	bl	8018e24 <memset>
 800e9ea:	4b07      	ldr	r3, [pc, #28]	; (800ea08 <rcutils_reset_error+0x2c>)
 800e9ec:	4907      	ldr	r1, [pc, #28]	; (800ea0c <rcutils_reset_error+0x30>)
 800e9ee:	4808      	ldr	r0, [pc, #32]	; (800ea10 <rcutils_reset_error+0x34>)
 800e9f0:	2400      	movs	r4, #0
 800e9f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e9f6:	701c      	strb	r4, [r3, #0]
 800e9f8:	f00a f9ec 	bl	8018dd4 <memcpy>
 800e9fc:	4b05      	ldr	r3, [pc, #20]	; (800ea14 <rcutils_reset_error+0x38>)
 800e9fe:	701c      	strb	r4, [r3, #0]
 800ea00:	bd10      	pop	{r4, pc}
 800ea02:	bf00      	nop
 800ea04:	20011260 	.word	0x20011260
 800ea08:	20010421 	.word	0x20010421
 800ea0c:	0801d2d4 	.word	0x0801d2d4
 800ea10:	20010e60 	.word	0x20010e60
 800ea14:	20010420 	.word	0x20010420

0800ea18 <rcutils_get_zero_initialized_string_map>:
 800ea18:	4b01      	ldr	r3, [pc, #4]	; (800ea20 <rcutils_get_zero_initialized_string_map+0x8>)
 800ea1a:	2000      	movs	r0, #0
 800ea1c:	6018      	str	r0, [r3, #0]
 800ea1e:	4770      	bx	lr
 800ea20:	20010424 	.word	0x20010424

0800ea24 <rcutils_string_map_reserve>:
 800ea24:	2800      	cmp	r0, #0
 800ea26:	d061      	beq.n	800eaec <rcutils_string_map_reserve+0xc8>
 800ea28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea2c:	6805      	ldr	r5, [r0, #0]
 800ea2e:	b083      	sub	sp, #12
 800ea30:	460c      	mov	r4, r1
 800ea32:	4606      	mov	r6, r0
 800ea34:	b12d      	cbz	r5, 800ea42 <rcutils_string_map_reserve+0x1e>
 800ea36:	68eb      	ldr	r3, [r5, #12]
 800ea38:	42a3      	cmp	r3, r4
 800ea3a:	d906      	bls.n	800ea4a <rcutils_string_map_reserve+0x26>
 800ea3c:	461c      	mov	r4, r3
 800ea3e:	2d00      	cmp	r5, #0
 800ea40:	d1f9      	bne.n	800ea36 <rcutils_string_map_reserve+0x12>
 800ea42:	201f      	movs	r0, #31
 800ea44:	b003      	add	sp, #12
 800ea46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea4a:	68ab      	ldr	r3, [r5, #8]
 800ea4c:	42a3      	cmp	r3, r4
 800ea4e:	d049      	beq.n	800eae4 <rcutils_string_map_reserve+0xc0>
 800ea50:	6a2f      	ldr	r7, [r5, #32]
 800ea52:	2c00      	cmp	r4, #0
 800ea54:	d035      	beq.n	800eac2 <rcutils_string_map_reserve+0x9e>
 800ea56:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800ea5a:	d245      	bcs.n	800eae8 <rcutils_string_map_reserve+0xc4>
 800ea5c:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800ea60:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800ea64:	6828      	ldr	r0, [r5, #0]
 800ea66:	4641      	mov	r1, r8
 800ea68:	463a      	mov	r2, r7
 800ea6a:	47c8      	blx	r9
 800ea6c:	2800      	cmp	r0, #0
 800ea6e:	d03b      	beq.n	800eae8 <rcutils_string_map_reserve+0xc4>
 800ea70:	6833      	ldr	r3, [r6, #0]
 800ea72:	463a      	mov	r2, r7
 800ea74:	6018      	str	r0, [r3, #0]
 800ea76:	4641      	mov	r1, r8
 800ea78:	6858      	ldr	r0, [r3, #4]
 800ea7a:	47c8      	blx	r9
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	d033      	beq.n	800eae8 <rcutils_string_map_reserve+0xc4>
 800ea80:	6835      	ldr	r5, [r6, #0]
 800ea82:	68ab      	ldr	r3, [r5, #8]
 800ea84:	6068      	str	r0, [r5, #4]
 800ea86:	42a3      	cmp	r3, r4
 800ea88:	d227      	bcs.n	800eada <rcutils_string_map_reserve+0xb6>
 800ea8a:	682a      	ldr	r2, [r5, #0]
 800ea8c:	eb00 0108 	add.w	r1, r0, r8
 800ea90:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800ea94:	428f      	cmp	r7, r1
 800ea96:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800ea9a:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800ea9e:	d203      	bcs.n	800eaa8 <rcutils_string_map_reserve+0x84>
 800eaa0:	eb02 0108 	add.w	r1, r2, r8
 800eaa4:	428e      	cmp	r6, r1
 800eaa6:	d323      	bcc.n	800eaf0 <rcutils_string_map_reserve+0xcc>
 800eaa8:	1ae3      	subs	r3, r4, r3
 800eaaa:	009a      	lsls	r2, r3, #2
 800eaac:	4638      	mov	r0, r7
 800eaae:	2100      	movs	r1, #0
 800eab0:	9201      	str	r2, [sp, #4]
 800eab2:	f00a f9b7 	bl	8018e24 <memset>
 800eab6:	9a01      	ldr	r2, [sp, #4]
 800eab8:	4630      	mov	r0, r6
 800eaba:	2100      	movs	r1, #0
 800eabc:	f00a f9b2 	bl	8018e24 <memset>
 800eac0:	e00b      	b.n	800eada <rcutils_string_map_reserve+0xb6>
 800eac2:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800eac6:	6828      	ldr	r0, [r5, #0]
 800eac8:	4639      	mov	r1, r7
 800eaca:	47c0      	blx	r8
 800eacc:	6833      	ldr	r3, [r6, #0]
 800eace:	4639      	mov	r1, r7
 800ead0:	6858      	ldr	r0, [r3, #4]
 800ead2:	601c      	str	r4, [r3, #0]
 800ead4:	47c0      	blx	r8
 800ead6:	6835      	ldr	r5, [r6, #0]
 800ead8:	606c      	str	r4, [r5, #4]
 800eada:	2000      	movs	r0, #0
 800eadc:	60ac      	str	r4, [r5, #8]
 800eade:	b003      	add	sp, #12
 800eae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eae4:	2000      	movs	r0, #0
 800eae6:	e7ad      	b.n	800ea44 <rcutils_string_map_reserve+0x20>
 800eae8:	200a      	movs	r0, #10
 800eaea:	e7ab      	b.n	800ea44 <rcutils_string_map_reserve+0x20>
 800eaec:	200b      	movs	r0, #11
 800eaee:	4770      	bx	lr
 800eaf0:	1f13      	subs	r3, r2, #4
 800eaf2:	f1ac 0c04 	sub.w	ip, ip, #4
 800eaf6:	4498      	add	r8, r3
 800eaf8:	4460      	add	r0, ip
 800eafa:	4462      	add	r2, ip
 800eafc:	2300      	movs	r3, #0
 800eafe:	f842 3f04 	str.w	r3, [r2, #4]!
 800eb02:	4542      	cmp	r2, r8
 800eb04:	f840 3f04 	str.w	r3, [r0, #4]!
 800eb08:	d1f9      	bne.n	800eafe <rcutils_string_map_reserve+0xda>
 800eb0a:	e7e6      	b.n	800eada <rcutils_string_map_reserve+0xb6>

0800eb0c <rcutils_string_map_init>:
 800eb0c:	b082      	sub	sp, #8
 800eb0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb10:	460e      	mov	r6, r1
 800eb12:	a906      	add	r1, sp, #24
 800eb14:	e881 000c 	stmia.w	r1, {r2, r3}
 800eb18:	b380      	cbz	r0, 800eb7c <rcutils_string_map_init+0x70>
 800eb1a:	6807      	ldr	r7, [r0, #0]
 800eb1c:	4604      	mov	r4, r0
 800eb1e:	b12f      	cbz	r7, 800eb2c <rcutils_string_map_init+0x20>
 800eb20:	251e      	movs	r5, #30
 800eb22:	4628      	mov	r0, r5
 800eb24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eb28:	b002      	add	sp, #8
 800eb2a:	4770      	bx	lr
 800eb2c:	a806      	add	r0, sp, #24
 800eb2e:	f7ff fe63 	bl	800e7f8 <rcutils_allocator_is_valid>
 800eb32:	b318      	cbz	r0, 800eb7c <rcutils_string_map_init+0x70>
 800eb34:	9b06      	ldr	r3, [sp, #24]
 800eb36:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eb38:	2024      	movs	r0, #36	; 0x24
 800eb3a:	4798      	blx	r3
 800eb3c:	4605      	mov	r5, r0
 800eb3e:	6020      	str	r0, [r4, #0]
 800eb40:	b310      	cbz	r0, 800eb88 <rcutils_string_map_init+0x7c>
 800eb42:	f10d 0e18 	add.w	lr, sp, #24
 800eb46:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eb4a:	f105 0c10 	add.w	ip, r5, #16
 800eb4e:	e9c5 7700 	strd	r7, r7, [r5]
 800eb52:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800eb56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb5a:	f8de 3000 	ldr.w	r3, [lr]
 800eb5e:	f8cc 3000 	str.w	r3, [ip]
 800eb62:	4631      	mov	r1, r6
 800eb64:	4620      	mov	r0, r4
 800eb66:	f7ff ff5d 	bl	800ea24 <rcutils_string_map_reserve>
 800eb6a:	4605      	mov	r5, r0
 800eb6c:	2800      	cmp	r0, #0
 800eb6e:	d0d8      	beq.n	800eb22 <rcutils_string_map_init+0x16>
 800eb70:	9b07      	ldr	r3, [sp, #28]
 800eb72:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eb74:	6820      	ldr	r0, [r4, #0]
 800eb76:	4798      	blx	r3
 800eb78:	6027      	str	r7, [r4, #0]
 800eb7a:	e7d2      	b.n	800eb22 <rcutils_string_map_init+0x16>
 800eb7c:	250b      	movs	r5, #11
 800eb7e:	4628      	mov	r0, r5
 800eb80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eb84:	b002      	add	sp, #8
 800eb86:	4770      	bx	lr
 800eb88:	250a      	movs	r5, #10
 800eb8a:	e7ca      	b.n	800eb22 <rcutils_string_map_init+0x16>

0800eb8c <rcutils_string_map_fini>:
 800eb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb90:	b082      	sub	sp, #8
 800eb92:	2800      	cmp	r0, #0
 800eb94:	d039      	beq.n	800ec0a <rcutils_string_map_fini+0x7e>
 800eb96:	6804      	ldr	r4, [r0, #0]
 800eb98:	4606      	mov	r6, r0
 800eb9a:	2c00      	cmp	r4, #0
 800eb9c:	d031      	beq.n	800ec02 <rcutils_string_map_fini+0x76>
 800eb9e:	68a3      	ldr	r3, [r4, #8]
 800eba0:	b323      	cbz	r3, 800ebec <rcutils_string_map_fini+0x60>
 800eba2:	2500      	movs	r5, #0
 800eba4:	6822      	ldr	r2, [r4, #0]
 800eba6:	46a8      	mov	r8, r5
 800eba8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800ebac:	b1d8      	cbz	r0, 800ebe6 <rcutils_string_map_fini+0x5a>
 800ebae:	6a21      	ldr	r1, [r4, #32]
 800ebb0:	6967      	ldr	r7, [r4, #20]
 800ebb2:	9101      	str	r1, [sp, #4]
 800ebb4:	47b8      	blx	r7
 800ebb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ebba:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800ebbe:	9901      	ldr	r1, [sp, #4]
 800ebc0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ebc4:	47b8      	blx	r7
 800ebc6:	68e3      	ldr	r3, [r4, #12]
 800ebc8:	6862      	ldr	r2, [r4, #4]
 800ebca:	3b01      	subs	r3, #1
 800ebcc:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800ebd0:	60e3      	str	r3, [r4, #12]
 800ebd2:	6834      	ldr	r4, [r6, #0]
 800ebd4:	68a3      	ldr	r3, [r4, #8]
 800ebd6:	3501      	adds	r5, #1
 800ebd8:	429d      	cmp	r5, r3
 800ebda:	d207      	bcs.n	800ebec <rcutils_string_map_fini+0x60>
 800ebdc:	6822      	ldr	r2, [r4, #0]
 800ebde:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800ebe2:	2800      	cmp	r0, #0
 800ebe4:	d1e3      	bne.n	800ebae <rcutils_string_map_fini+0x22>
 800ebe6:	3501      	adds	r5, #1
 800ebe8:	429d      	cmp	r5, r3
 800ebea:	d3dd      	bcc.n	800eba8 <rcutils_string_map_fini+0x1c>
 800ebec:	2100      	movs	r1, #0
 800ebee:	4630      	mov	r0, r6
 800ebf0:	f7ff ff18 	bl	800ea24 <rcutils_string_map_reserve>
 800ebf4:	4604      	mov	r4, r0
 800ebf6:	b920      	cbnz	r0, 800ec02 <rcutils_string_map_fini+0x76>
 800ebf8:	6830      	ldr	r0, [r6, #0]
 800ebfa:	6943      	ldr	r3, [r0, #20]
 800ebfc:	6a01      	ldr	r1, [r0, #32]
 800ebfe:	4798      	blx	r3
 800ec00:	6034      	str	r4, [r6, #0]
 800ec02:	4620      	mov	r0, r4
 800ec04:	b002      	add	sp, #8
 800ec06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec0a:	240b      	movs	r4, #11
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	b002      	add	sp, #8
 800ec10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ec14 <rcutils_string_map_getn>:
 800ec14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec18:	b082      	sub	sp, #8
 800ec1a:	b308      	cbz	r0, 800ec60 <rcutils_string_map_getn+0x4c>
 800ec1c:	6804      	ldr	r4, [r0, #0]
 800ec1e:	b304      	cbz	r4, 800ec62 <rcutils_string_map_getn+0x4e>
 800ec20:	460d      	mov	r5, r1
 800ec22:	b1e9      	cbz	r1, 800ec60 <rcutils_string_map_getn+0x4c>
 800ec24:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800ec28:	6827      	ldr	r7, [r4, #0]
 800ec2a:	f1b9 0f00 	cmp.w	r9, #0
 800ec2e:	d017      	beq.n	800ec60 <rcutils_string_map_getn+0x4c>
 800ec30:	4690      	mov	r8, r2
 800ec32:	3f04      	subs	r7, #4
 800ec34:	2600      	movs	r6, #0
 800ec36:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800ec3a:	9101      	str	r1, [sp, #4]
 800ec3c:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800ec40:	4608      	mov	r0, r1
 800ec42:	3601      	adds	r6, #1
 800ec44:	b151      	cbz	r1, 800ec5c <rcutils_string_map_getn+0x48>
 800ec46:	f7f1 facd 	bl	80001e4 <strlen>
 800ec4a:	4540      	cmp	r0, r8
 800ec4c:	4602      	mov	r2, r0
 800ec4e:	9901      	ldr	r1, [sp, #4]
 800ec50:	bf38      	it	cc
 800ec52:	4642      	movcc	r2, r8
 800ec54:	4628      	mov	r0, r5
 800ec56:	f00a fd35 	bl	80196c4 <strncmp>
 800ec5a:	b130      	cbz	r0, 800ec6a <rcutils_string_map_getn+0x56>
 800ec5c:	45b1      	cmp	r9, r6
 800ec5e:	d1ea      	bne.n	800ec36 <rcutils_string_map_getn+0x22>
 800ec60:	2400      	movs	r4, #0
 800ec62:	4620      	mov	r0, r4
 800ec64:	b002      	add	sp, #8
 800ec66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec6a:	6863      	ldr	r3, [r4, #4]
 800ec6c:	f853 400a 	ldr.w	r4, [r3, sl]
 800ec70:	4620      	mov	r0, r4
 800ec72:	b002      	add	sp, #8
 800ec74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ec78 <rcutils_system_time_now>:
 800ec78:	b310      	cbz	r0, 800ecc0 <rcutils_system_time_now+0x48>
 800ec7a:	b570      	push	{r4, r5, r6, lr}
 800ec7c:	b084      	sub	sp, #16
 800ec7e:	4669      	mov	r1, sp
 800ec80:	4604      	mov	r4, r0
 800ec82:	2001      	movs	r0, #1
 800ec84:	f7f3 fe48 	bl	8002918 <clock_gettime>
 800ec88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	f171 0300 	sbcs.w	r3, r1, #0
 800ec92:	db12      	blt.n	800ecba <rcutils_system_time_now+0x42>
 800ec94:	9d02      	ldr	r5, [sp, #8]
 800ec96:	2d00      	cmp	r5, #0
 800ec98:	db0c      	blt.n	800ecb4 <rcutils_system_time_now+0x3c>
 800ec9a:	4e0a      	ldr	r6, [pc, #40]	; (800ecc4 <rcutils_system_time_now+0x4c>)
 800ec9c:	fba0 2306 	umull	r2, r3, r0, r6
 800eca0:	1952      	adds	r2, r2, r5
 800eca2:	fb06 3301 	mla	r3, r6, r1, r3
 800eca6:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800ecaa:	2000      	movs	r0, #0
 800ecac:	e9c4 2300 	strd	r2, r3, [r4]
 800ecb0:	b004      	add	sp, #16
 800ecb2:	bd70      	pop	{r4, r5, r6, pc}
 800ecb4:	ea50 0301 	orrs.w	r3, r0, r1
 800ecb8:	d1ef      	bne.n	800ec9a <rcutils_system_time_now+0x22>
 800ecba:	2002      	movs	r0, #2
 800ecbc:	b004      	add	sp, #16
 800ecbe:	bd70      	pop	{r4, r5, r6, pc}
 800ecc0:	200b      	movs	r0, #11
 800ecc2:	4770      	bx	lr
 800ecc4:	3b9aca00 	.word	0x3b9aca00

0800ecc8 <rcutils_steady_time_now>:
 800ecc8:	b310      	cbz	r0, 800ed10 <rcutils_steady_time_now+0x48>
 800ecca:	b570      	push	{r4, r5, r6, lr}
 800eccc:	b084      	sub	sp, #16
 800ecce:	4669      	mov	r1, sp
 800ecd0:	4604      	mov	r4, r0
 800ecd2:	2000      	movs	r0, #0
 800ecd4:	f7f3 fe20 	bl	8002918 <clock_gettime>
 800ecd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	f171 0300 	sbcs.w	r3, r1, #0
 800ece2:	db12      	blt.n	800ed0a <rcutils_steady_time_now+0x42>
 800ece4:	9d02      	ldr	r5, [sp, #8]
 800ece6:	2d00      	cmp	r5, #0
 800ece8:	db0c      	blt.n	800ed04 <rcutils_steady_time_now+0x3c>
 800ecea:	4e0a      	ldr	r6, [pc, #40]	; (800ed14 <rcutils_steady_time_now+0x4c>)
 800ecec:	fba0 2306 	umull	r2, r3, r0, r6
 800ecf0:	1952      	adds	r2, r2, r5
 800ecf2:	fb06 3301 	mla	r3, r6, r1, r3
 800ecf6:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800ecfa:	2000      	movs	r0, #0
 800ecfc:	e9c4 2300 	strd	r2, r3, [r4]
 800ed00:	b004      	add	sp, #16
 800ed02:	bd70      	pop	{r4, r5, r6, pc}
 800ed04:	ea50 0301 	orrs.w	r3, r0, r1
 800ed08:	d1ef      	bne.n	800ecea <rcutils_steady_time_now+0x22>
 800ed0a:	2002      	movs	r0, #2
 800ed0c:	b004      	add	sp, #16
 800ed0e:	bd70      	pop	{r4, r5, r6, pc}
 800ed10:	200b      	movs	r0, #11
 800ed12:	4770      	bx	lr
 800ed14:	3b9aca00 	.word	0x3b9aca00

0800ed18 <rmw_get_zero_initialized_init_options>:
 800ed18:	b510      	push	{r4, lr}
 800ed1a:	2238      	movs	r2, #56	; 0x38
 800ed1c:	4604      	mov	r4, r0
 800ed1e:	2100      	movs	r1, #0
 800ed20:	f00a f880 	bl	8018e24 <memset>
 800ed24:	f104 0010 	add.w	r0, r4, #16
 800ed28:	f000 f808 	bl	800ed3c <rmw_get_default_security_options>
 800ed2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed30:	60e3      	str	r3, [r4, #12]
 800ed32:	4620      	mov	r0, r4
 800ed34:	bd10      	pop	{r4, pc}
 800ed36:	bf00      	nop

0800ed38 <rmw_get_default_publisher_options>:
 800ed38:	2000      	movs	r0, #0
 800ed3a:	4770      	bx	lr

0800ed3c <rmw_get_default_security_options>:
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	7002      	strb	r2, [r0, #0]
 800ed40:	6042      	str	r2, [r0, #4]
 800ed42:	4770      	bx	lr

0800ed44 <rmw_get_default_subscription_options>:
 800ed44:	2200      	movs	r2, #0
 800ed46:	6002      	str	r2, [r0, #0]
 800ed48:	7102      	strb	r2, [r0, #4]
 800ed4a:	4770      	bx	lr

0800ed4c <rmw_get_zero_initialized_message_info>:
 800ed4c:	b470      	push	{r4, r5, r6}
 800ed4e:	4d07      	ldr	r5, [pc, #28]	; (800ed6c <rmw_get_zero_initialized_message_info+0x20>)
 800ed50:	4606      	mov	r6, r0
 800ed52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed54:	4634      	mov	r4, r6
 800ed56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed5c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ed60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ed64:	4630      	mov	r0, r6
 800ed66:	bc70      	pop	{r4, r5, r6}
 800ed68:	4770      	bx	lr
 800ed6a:	bf00      	nop
 800ed6c:	0801ded8 	.word	0x0801ded8

0800ed70 <rmw_validate_full_topic_name>:
 800ed70:	2800      	cmp	r0, #0
 800ed72:	d062      	beq.n	800ee3a <rmw_validate_full_topic_name+0xca>
 800ed74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed78:	460d      	mov	r5, r1
 800ed7a:	2900      	cmp	r1, #0
 800ed7c:	d05f      	beq.n	800ee3e <rmw_validate_full_topic_name+0xce>
 800ed7e:	4616      	mov	r6, r2
 800ed80:	4604      	mov	r4, r0
 800ed82:	f7f1 fa2f 	bl	80001e4 <strlen>
 800ed86:	b148      	cbz	r0, 800ed9c <rmw_validate_full_topic_name+0x2c>
 800ed88:	7823      	ldrb	r3, [r4, #0]
 800ed8a:	2b2f      	cmp	r3, #47	; 0x2f
 800ed8c:	d00d      	beq.n	800edaa <rmw_validate_full_topic_name+0x3a>
 800ed8e:	2302      	movs	r3, #2
 800ed90:	602b      	str	r3, [r5, #0]
 800ed92:	b13e      	cbz	r6, 800eda4 <rmw_validate_full_topic_name+0x34>
 800ed94:	2000      	movs	r0, #0
 800ed96:	6030      	str	r0, [r6, #0]
 800ed98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	602b      	str	r3, [r5, #0]
 800eda0:	2e00      	cmp	r6, #0
 800eda2:	d1f7      	bne.n	800ed94 <rmw_validate_full_topic_name+0x24>
 800eda4:	2000      	movs	r0, #0
 800eda6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edaa:	1e47      	subs	r7, r0, #1
 800edac:	5de3      	ldrb	r3, [r4, r7]
 800edae:	2b2f      	cmp	r3, #47	; 0x2f
 800edb0:	d047      	beq.n	800ee42 <rmw_validate_full_topic_name+0xd2>
 800edb2:	1e63      	subs	r3, r4, #1
 800edb4:	eb03 0900 	add.w	r9, r3, r0
 800edb8:	f1c4 0e01 	rsb	lr, r4, #1
 800edbc:	eb0e 0803 	add.w	r8, lr, r3
 800edc0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800edc4:	f021 0220 	bic.w	r2, r1, #32
 800edc8:	3a41      	subs	r2, #65	; 0x41
 800edca:	2a19      	cmp	r2, #25
 800edcc:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800edd0:	d90c      	bls.n	800edec <rmw_validate_full_topic_name+0x7c>
 800edd2:	295f      	cmp	r1, #95	; 0x5f
 800edd4:	d00a      	beq.n	800edec <rmw_validate_full_topic_name+0x7c>
 800edd6:	f1bc 0f0a 	cmp.w	ip, #10
 800edda:	d907      	bls.n	800edec <rmw_validate_full_topic_name+0x7c>
 800eddc:	2304      	movs	r3, #4
 800edde:	602b      	str	r3, [r5, #0]
 800ede0:	2e00      	cmp	r6, #0
 800ede2:	d0df      	beq.n	800eda4 <rmw_validate_full_topic_name+0x34>
 800ede4:	f8c6 8000 	str.w	r8, [r6]
 800ede8:	2000      	movs	r0, #0
 800edea:	e7d5      	b.n	800ed98 <rmw_validate_full_topic_name+0x28>
 800edec:	454b      	cmp	r3, r9
 800edee:	d1e5      	bne.n	800edbc <rmw_validate_full_topic_name+0x4c>
 800edf0:	f8df e084 	ldr.w	lr, [pc, #132]	; 800ee78 <rmw_validate_full_topic_name+0x108>
 800edf4:	2300      	movs	r3, #0
 800edf6:	f107 0801 	add.w	r8, r7, #1
 800edfa:	e005      	b.n	800ee08 <rmw_validate_full_topic_name+0x98>
 800edfc:	4611      	mov	r1, r2
 800edfe:	4288      	cmp	r0, r1
 800ee00:	4613      	mov	r3, r2
 800ee02:	f104 0401 	add.w	r4, r4, #1
 800ee06:	d925      	bls.n	800ee54 <rmw_validate_full_topic_name+0xe4>
 800ee08:	429f      	cmp	r7, r3
 800ee0a:	f103 0201 	add.w	r2, r3, #1
 800ee0e:	d01e      	beq.n	800ee4e <rmw_validate_full_topic_name+0xde>
 800ee10:	7821      	ldrb	r1, [r4, #0]
 800ee12:	292f      	cmp	r1, #47	; 0x2f
 800ee14:	d1f2      	bne.n	800edfc <rmw_validate_full_topic_name+0x8c>
 800ee16:	f894 c001 	ldrb.w	ip, [r4, #1]
 800ee1a:	1c5a      	adds	r2, r3, #1
 800ee1c:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800ee20:	4611      	mov	r1, r2
 800ee22:	d024      	beq.n	800ee6e <rmw_validate_full_topic_name+0xfe>
 800ee24:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800ee28:	075b      	lsls	r3, r3, #29
 800ee2a:	d5e8      	bpl.n	800edfe <rmw_validate_full_topic_name+0x8e>
 800ee2c:	2306      	movs	r3, #6
 800ee2e:	602b      	str	r3, [r5, #0]
 800ee30:	2e00      	cmp	r6, #0
 800ee32:	d0b7      	beq.n	800eda4 <rmw_validate_full_topic_name+0x34>
 800ee34:	6032      	str	r2, [r6, #0]
 800ee36:	2000      	movs	r0, #0
 800ee38:	e7ae      	b.n	800ed98 <rmw_validate_full_topic_name+0x28>
 800ee3a:	200b      	movs	r0, #11
 800ee3c:	4770      	bx	lr
 800ee3e:	200b      	movs	r0, #11
 800ee40:	e7aa      	b.n	800ed98 <rmw_validate_full_topic_name+0x28>
 800ee42:	2303      	movs	r3, #3
 800ee44:	602b      	str	r3, [r5, #0]
 800ee46:	2e00      	cmp	r6, #0
 800ee48:	d0ac      	beq.n	800eda4 <rmw_validate_full_topic_name+0x34>
 800ee4a:	6037      	str	r7, [r6, #0]
 800ee4c:	e7aa      	b.n	800eda4 <rmw_validate_full_topic_name+0x34>
 800ee4e:	4641      	mov	r1, r8
 800ee50:	1c7a      	adds	r2, r7, #1
 800ee52:	e7d4      	b.n	800edfe <rmw_validate_full_topic_name+0x8e>
 800ee54:	28f7      	cmp	r0, #247	; 0xf7
 800ee56:	d802      	bhi.n	800ee5e <rmw_validate_full_topic_name+0xee>
 800ee58:	2000      	movs	r0, #0
 800ee5a:	6028      	str	r0, [r5, #0]
 800ee5c:	e79c      	b.n	800ed98 <rmw_validate_full_topic_name+0x28>
 800ee5e:	2307      	movs	r3, #7
 800ee60:	602b      	str	r3, [r5, #0]
 800ee62:	2e00      	cmp	r6, #0
 800ee64:	d09e      	beq.n	800eda4 <rmw_validate_full_topic_name+0x34>
 800ee66:	23f6      	movs	r3, #246	; 0xf6
 800ee68:	6033      	str	r3, [r6, #0]
 800ee6a:	2000      	movs	r0, #0
 800ee6c:	e794      	b.n	800ed98 <rmw_validate_full_topic_name+0x28>
 800ee6e:	2305      	movs	r3, #5
 800ee70:	602b      	str	r3, [r5, #0]
 800ee72:	2e00      	cmp	r6, #0
 800ee74:	d1de      	bne.n	800ee34 <rmw_validate_full_topic_name+0xc4>
 800ee76:	e795      	b.n	800eda4 <rmw_validate_full_topic_name+0x34>
 800ee78:	0801ea89 	.word	0x0801ea89

0800ee7c <rmw_uros_set_custom_transport>:
 800ee7c:	b470      	push	{r4, r5, r6}
 800ee7e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ee82:	b162      	cbz	r2, 800ee9e <rmw_uros_set_custom_transport+0x22>
 800ee84:	b15b      	cbz	r3, 800ee9e <rmw_uros_set_custom_transport+0x22>
 800ee86:	b155      	cbz	r5, 800ee9e <rmw_uros_set_custom_transport+0x22>
 800ee88:	b14e      	cbz	r6, 800ee9e <rmw_uros_set_custom_transport+0x22>
 800ee8a:	4c06      	ldr	r4, [pc, #24]	; (800eea4 <rmw_uros_set_custom_transport+0x28>)
 800ee8c:	7020      	strb	r0, [r4, #0]
 800ee8e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ee92:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ee96:	6166      	str	r6, [r4, #20]
 800ee98:	2000      	movs	r0, #0
 800ee9a:	bc70      	pop	{r4, r5, r6}
 800ee9c:	4770      	bx	lr
 800ee9e:	200b      	movs	r0, #11
 800eea0:	bc70      	pop	{r4, r5, r6}
 800eea2:	4770      	bx	lr
 800eea4:	20011650 	.word	0x20011650

0800eea8 <rmw_init_options_init>:
 800eea8:	b084      	sub	sp, #16
 800eeaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eeae:	ad09      	add	r5, sp, #36	; 0x24
 800eeb0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800eeb4:	b130      	cbz	r0, 800eec4 <rmw_init_options_init+0x1c>
 800eeb6:	4604      	mov	r4, r0
 800eeb8:	4628      	mov	r0, r5
 800eeba:	f7ff fc9d 	bl	800e7f8 <rcutils_allocator_is_valid>
 800eebe:	b108      	cbz	r0, 800eec4 <rmw_init_options_init+0x1c>
 800eec0:	68a3      	ldr	r3, [r4, #8]
 800eec2:	b123      	cbz	r3, 800eece <rmw_init_options_init+0x26>
 800eec4:	200b      	movs	r0, #11
 800eec6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eeca:	b004      	add	sp, #16
 800eecc:	4770      	bx	lr
 800eece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eed0:	4f1c      	ldr	r7, [pc, #112]	; (800ef44 <rmw_init_options_init+0x9c>)
 800eed2:	682e      	ldr	r6, [r5, #0]
 800eed4:	683d      	ldr	r5, [r7, #0]
 800eed6:	60a5      	str	r5, [r4, #8]
 800eed8:	f04f 0800 	mov.w	r8, #0
 800eedc:	f04f 0900 	mov.w	r9, #0
 800eee0:	f104 0520 	add.w	r5, r4, #32
 800eee4:	e9c4 8900 	strd	r8, r9, [r4]
 800eee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eeea:	4b17      	ldr	r3, [pc, #92]	; (800ef48 <rmw_init_options_init+0xa0>)
 800eeec:	4817      	ldr	r0, [pc, #92]	; (800ef4c <rmw_init_options_init+0xa4>)
 800eeee:	602e      	str	r6, [r5, #0]
 800eef0:	4917      	ldr	r1, [pc, #92]	; (800ef50 <rmw_init_options_init+0xa8>)
 800eef2:	61e3      	str	r3, [r4, #28]
 800eef4:	2203      	movs	r2, #3
 800eef6:	f000 ff63 	bl	800fdc0 <rmw_uxrce_init_init_options_impl_memory>
 800eefa:	4814      	ldr	r0, [pc, #80]	; (800ef4c <rmw_init_options_init+0xa4>)
 800eefc:	f008 faba 	bl	8017474 <get_memory>
 800ef00:	b1e8      	cbz	r0, 800ef3e <rmw_init_options_init+0x96>
 800ef02:	4a14      	ldr	r2, [pc, #80]	; (800ef54 <rmw_init_options_init+0xac>)
 800ef04:	68c3      	ldr	r3, [r0, #12]
 800ef06:	6851      	ldr	r1, [r2, #4]
 800ef08:	7810      	ldrb	r0, [r2, #0]
 800ef0a:	6363      	str	r3, [r4, #52]	; 0x34
 800ef0c:	7418      	strb	r0, [r3, #16]
 800ef0e:	6159      	str	r1, [r3, #20]
 800ef10:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800ef14:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800ef18:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800ef1c:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800ef20:	f004 fdd4 	bl	8013acc <uxr_nanos>
 800ef24:	f00a fa68 	bl	80193f8 <srand>
 800ef28:	f00a fa94 	bl	8019454 <rand>
 800ef2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef2e:	6298      	str	r0, [r3, #40]	; 0x28
 800ef30:	2800      	cmp	r0, #0
 800ef32:	d0f9      	beq.n	800ef28 <rmw_init_options_init+0x80>
 800ef34:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef38:	2000      	movs	r0, #0
 800ef3a:	b004      	add	sp, #16
 800ef3c:	4770      	bx	lr
 800ef3e:	2001      	movs	r0, #1
 800ef40:	e7c1      	b.n	800eec6 <rmw_init_options_init+0x1e>
 800ef42:	bf00      	nop
 800ef44:	0801ea10 	.word	0x0801ea10
 800ef48:	0801e250 	.word	0x0801e250
 800ef4c:	2001496c 	.word	0x2001496c
 800ef50:	200145c0 	.word	0x200145c0
 800ef54:	20011650 	.word	0x20011650

0800ef58 <rmw_init_options_copy>:
 800ef58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef5a:	b158      	cbz	r0, 800ef74 <rmw_init_options_copy+0x1c>
 800ef5c:	460e      	mov	r6, r1
 800ef5e:	b149      	cbz	r1, 800ef74 <rmw_init_options_copy+0x1c>
 800ef60:	4b1d      	ldr	r3, [pc, #116]	; (800efd8 <rmw_init_options_copy+0x80>)
 800ef62:	4604      	mov	r4, r0
 800ef64:	6819      	ldr	r1, [r3, #0]
 800ef66:	6880      	ldr	r0, [r0, #8]
 800ef68:	f7f1 f932 	bl	80001d0 <strcmp>
 800ef6c:	4607      	mov	r7, r0
 800ef6e:	bb68      	cbnz	r0, 800efcc <rmw_init_options_copy+0x74>
 800ef70:	68b3      	ldr	r3, [r6, #8]
 800ef72:	b113      	cbz	r3, 800ef7a <rmw_init_options_copy+0x22>
 800ef74:	270b      	movs	r7, #11
 800ef76:	4638      	mov	r0, r7
 800ef78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef7a:	4623      	mov	r3, r4
 800ef7c:	4632      	mov	r2, r6
 800ef7e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800ef82:	681d      	ldr	r5, [r3, #0]
 800ef84:	6858      	ldr	r0, [r3, #4]
 800ef86:	6899      	ldr	r1, [r3, #8]
 800ef88:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800ef8c:	f8c2 c00c 	str.w	ip, [r2, #12]
 800ef90:	3310      	adds	r3, #16
 800ef92:	4573      	cmp	r3, lr
 800ef94:	6015      	str	r5, [r2, #0]
 800ef96:	6050      	str	r0, [r2, #4]
 800ef98:	6091      	str	r1, [r2, #8]
 800ef9a:	f102 0210 	add.w	r2, r2, #16
 800ef9e:	d1f0      	bne.n	800ef82 <rmw_init_options_copy+0x2a>
 800efa0:	6819      	ldr	r1, [r3, #0]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	480d      	ldr	r0, [pc, #52]	; (800efdc <rmw_init_options_copy+0x84>)
 800efa6:	6053      	str	r3, [r2, #4]
 800efa8:	6011      	str	r1, [r2, #0]
 800efaa:	f008 fa63 	bl	8017474 <get_memory>
 800efae:	b180      	cbz	r0, 800efd2 <rmw_init_options_copy+0x7a>
 800efb0:	68c5      	ldr	r5, [r0, #12]
 800efb2:	6375      	str	r5, [r6, #52]	; 0x34
 800efb4:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800efb6:	3610      	adds	r6, #16
 800efb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800efba:	f105 0410 	add.w	r4, r5, #16
 800efbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800efc0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800efc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800efc8:	4638      	mov	r0, r7
 800efca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efcc:	270c      	movs	r7, #12
 800efce:	4638      	mov	r0, r7
 800efd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efd2:	2701      	movs	r7, #1
 800efd4:	e7cf      	b.n	800ef76 <rmw_init_options_copy+0x1e>
 800efd6:	bf00      	nop
 800efd8:	0801ea10 	.word	0x0801ea10
 800efdc:	2001496c 	.word	0x2001496c

0800efe0 <rmw_init_options_fini>:
 800efe0:	b570      	push	{r4, r5, r6, lr}
 800efe2:	b08e      	sub	sp, #56	; 0x38
 800efe4:	b348      	cbz	r0, 800f03a <rmw_init_options_fini+0x5a>
 800efe6:	4604      	mov	r4, r0
 800efe8:	3020      	adds	r0, #32
 800efea:	f7ff fc05 	bl	800e7f8 <rcutils_allocator_is_valid>
 800efee:	b320      	cbz	r0, 800f03a <rmw_init_options_fini+0x5a>
 800eff0:	4b18      	ldr	r3, [pc, #96]	; (800f054 <rmw_init_options_fini+0x74>)
 800eff2:	68a0      	ldr	r0, [r4, #8]
 800eff4:	6819      	ldr	r1, [r3, #0]
 800eff6:	f7f1 f8eb 	bl	80001d0 <strcmp>
 800effa:	4606      	mov	r6, r0
 800effc:	bb28      	cbnz	r0, 800f04a <rmw_init_options_fini+0x6a>
 800effe:	4b16      	ldr	r3, [pc, #88]	; (800f058 <rmw_init_options_fini+0x78>)
 800f000:	6819      	ldr	r1, [r3, #0]
 800f002:	b1f1      	cbz	r1, 800f042 <rmw_init_options_fini+0x62>
 800f004:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f006:	e001      	b.n	800f00c <rmw_init_options_fini+0x2c>
 800f008:	6889      	ldr	r1, [r1, #8]
 800f00a:	b1d1      	cbz	r1, 800f042 <rmw_init_options_fini+0x62>
 800f00c:	68cb      	ldr	r3, [r1, #12]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d1fa      	bne.n	800f008 <rmw_init_options_fini+0x28>
 800f012:	4811      	ldr	r0, [pc, #68]	; (800f058 <rmw_init_options_fini+0x78>)
 800f014:	f008 fa3e 	bl	8017494 <put_memory>
 800f018:	466d      	mov	r5, sp
 800f01a:	4668      	mov	r0, sp
 800f01c:	f7ff fe7c 	bl	800ed18 <rmw_get_zero_initialized_init_options>
 800f020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f02a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f02c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f030:	e884 0003 	stmia.w	r4, {r0, r1}
 800f034:	4630      	mov	r0, r6
 800f036:	b00e      	add	sp, #56	; 0x38
 800f038:	bd70      	pop	{r4, r5, r6, pc}
 800f03a:	260b      	movs	r6, #11
 800f03c:	4630      	mov	r0, r6
 800f03e:	b00e      	add	sp, #56	; 0x38
 800f040:	bd70      	pop	{r4, r5, r6, pc}
 800f042:	2601      	movs	r6, #1
 800f044:	4630      	mov	r0, r6
 800f046:	b00e      	add	sp, #56	; 0x38
 800f048:	bd70      	pop	{r4, r5, r6, pc}
 800f04a:	260c      	movs	r6, #12
 800f04c:	4630      	mov	r0, r6
 800f04e:	b00e      	add	sp, #56	; 0x38
 800f050:	bd70      	pop	{r4, r5, r6, pc}
 800f052:	bf00      	nop
 800f054:	0801ea10 	.word	0x0801ea10
 800f058:	2001496c 	.word	0x2001496c

0800f05c <rmw_init>:
 800f05c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f060:	b083      	sub	sp, #12
 800f062:	2800      	cmp	r0, #0
 800f064:	f000 80e0 	beq.w	800f228 <rmw_init+0x1cc>
 800f068:	460e      	mov	r6, r1
 800f06a:	2900      	cmp	r1, #0
 800f06c:	f000 80dc 	beq.w	800f228 <rmw_init+0x1cc>
 800f070:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f072:	4604      	mov	r4, r0
 800f074:	2b00      	cmp	r3, #0
 800f076:	f000 80d7 	beq.w	800f228 <rmw_init+0x1cc>
 800f07a:	4b70      	ldr	r3, [pc, #448]	; (800f23c <rmw_init+0x1e0>)
 800f07c:	6880      	ldr	r0, [r0, #8]
 800f07e:	f8d3 8000 	ldr.w	r8, [r3]
 800f082:	4641      	mov	r1, r8
 800f084:	f7f1 f8a4 	bl	80001d0 <strcmp>
 800f088:	4607      	mov	r7, r0
 800f08a:	2800      	cmp	r0, #0
 800f08c:	f040 80c7 	bne.w	800f21e <rmw_init+0x1c2>
 800f090:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f094:	68e3      	ldr	r3, [r4, #12]
 800f096:	61f3      	str	r3, [r6, #28]
 800f098:	e9c6 0100 	strd	r0, r1, [r6]
 800f09c:	2201      	movs	r2, #1
 800f09e:	4968      	ldr	r1, [pc, #416]	; (800f240 <rmw_init+0x1e4>)
 800f0a0:	4868      	ldr	r0, [pc, #416]	; (800f244 <rmw_init+0x1e8>)
 800f0a2:	f8c6 8008 	str.w	r8, [r6, #8]
 800f0a6:	f000 fe33 	bl	800fd10 <rmw_uxrce_init_session_memory>
 800f0aa:	4867      	ldr	r0, [pc, #412]	; (800f248 <rmw_init+0x1ec>)
 800f0ac:	4967      	ldr	r1, [pc, #412]	; (800f24c <rmw_init+0x1f0>)
 800f0ae:	2204      	movs	r2, #4
 800f0b0:	f000 fe68 	bl	800fd84 <rmw_uxrce_init_static_input_buffer_memory>
 800f0b4:	4863      	ldr	r0, [pc, #396]	; (800f244 <rmw_init+0x1e8>)
 800f0b6:	f008 f9dd 	bl	8017474 <get_memory>
 800f0ba:	2800      	cmp	r0, #0
 800f0bc:	f000 80b9 	beq.w	800f232 <rmw_init+0x1d6>
 800f0c0:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
 800f0c4:	68c5      	ldr	r5, [r0, #12]
 800f0c6:	f8dc 0024 	ldr.w	r0, [ip, #36]	; 0x24
 800f0ca:	f89c 1010 	ldrb.w	r1, [ip, #16]
 800f0ce:	e9dc 2306 	ldrd	r2, r3, [ip, #24]
 800f0d2:	9001      	str	r0, [sp, #4]
 800f0d4:	f8dc 0020 	ldr.w	r0, [ip, #32]
 800f0d8:	9000      	str	r0, [sp, #0]
 800f0da:	f105 0910 	add.w	r9, r5, #16
 800f0de:	4648      	mov	r0, r9
 800f0e0:	f002 fe92 	bl	8011e08 <uxr_set_custom_transport_callbacks>
 800f0e4:	f241 5394 	movw	r3, #5524	; 0x1594
 800f0e8:	f241 5c98 	movw	ip, #5528	; 0x1598
 800f0ec:	f241 509c 	movw	r0, #5532	; 0x159c
 800f0f0:	f505 51ad 	add.w	r1, r5, #5536	; 0x15a0
 800f0f4:	50ef      	str	r7, [r5, r3]
 800f0f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f0fa:	f505 735e 	add.w	r3, r5, #888	; 0x378
 800f0fe:	f845 700c 	str.w	r7, [r5, ip]
 800f102:	502f      	str	r7, [r5, r0]
 800f104:	e9c5 33e1 	strd	r3, r3, [r5, #900]	; 0x384
 800f108:	e9c5 22e3 	strd	r2, r2, [r5, #908]	; 0x38c
 800f10c:	4850      	ldr	r0, [pc, #320]	; (800f250 <rmw_init+0x1f4>)
 800f10e:	600f      	str	r7, [r1, #0]
 800f110:	2201      	movs	r2, #1
 800f112:	e9c5 87da 	strd	r8, r7, [r5, #872]	; 0x368
 800f116:	494f      	ldr	r1, [pc, #316]	; (800f254 <rmw_init+0x1f8>)
 800f118:	64b5      	str	r5, [r6, #72]	; 0x48
 800f11a:	f000 fddf 	bl	800fcdc <rmw_uxrce_init_node_memory>
 800f11e:	494e      	ldr	r1, [pc, #312]	; (800f258 <rmw_init+0x1fc>)
 800f120:	484e      	ldr	r0, [pc, #312]	; (800f25c <rmw_init+0x200>)
 800f122:	2205      	movs	r2, #5
 800f124:	f000 fdc0 	bl	800fca8 <rmw_uxrce_init_subscription_memory>
 800f128:	494d      	ldr	r1, [pc, #308]	; (800f260 <rmw_init+0x204>)
 800f12a:	484e      	ldr	r0, [pc, #312]	; (800f264 <rmw_init+0x208>)
 800f12c:	220a      	movs	r2, #10
 800f12e:	f000 fda1 	bl	800fc74 <rmw_uxrce_init_publisher_memory>
 800f132:	494d      	ldr	r1, [pc, #308]	; (800f268 <rmw_init+0x20c>)
 800f134:	484d      	ldr	r0, [pc, #308]	; (800f26c <rmw_init+0x210>)
 800f136:	2201      	movs	r2, #1
 800f138:	f000 fd68 	bl	800fc0c <rmw_uxrce_init_service_memory>
 800f13c:	494c      	ldr	r1, [pc, #304]	; (800f270 <rmw_init+0x214>)
 800f13e:	484d      	ldr	r0, [pc, #308]	; (800f274 <rmw_init+0x218>)
 800f140:	2201      	movs	r2, #1
 800f142:	f000 fd7d 	bl	800fc40 <rmw_uxrce_init_client_memory>
 800f146:	494c      	ldr	r1, [pc, #304]	; (800f278 <rmw_init+0x21c>)
 800f148:	484c      	ldr	r0, [pc, #304]	; (800f27c <rmw_init+0x220>)
 800f14a:	220f      	movs	r2, #15
 800f14c:	f000 fdfe 	bl	800fd4c <rmw_uxrce_init_topic_memory>
 800f150:	494b      	ldr	r1, [pc, #300]	; (800f280 <rmw_init+0x224>)
 800f152:	484c      	ldr	r0, [pc, #304]	; (800f284 <rmw_init+0x228>)
 800f154:	2203      	movs	r2, #3
 800f156:	f000 fe33 	bl	800fdc0 <rmw_uxrce_init_init_options_impl_memory>
 800f15a:	494b      	ldr	r1, [pc, #300]	; (800f288 <rmw_init+0x22c>)
 800f15c:	484b      	ldr	r0, [pc, #300]	; (800f28c <rmw_init+0x230>)
 800f15e:	2204      	movs	r2, #4
 800f160:	f000 fe48 	bl	800fdf4 <rmw_uxrce_init_wait_set_memory>
 800f164:	494a      	ldr	r1, [pc, #296]	; (800f290 <rmw_init+0x234>)
 800f166:	484b      	ldr	r0, [pc, #300]	; (800f294 <rmw_init+0x238>)
 800f168:	2204      	movs	r2, #4
 800f16a:	f000 fe5f 	bl	800fe2c <rmw_uxrce_init_guard_condition_memory>
 800f16e:	463a      	mov	r2, r7
 800f170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f172:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 800f174:	f000 fd12 	bl	800fb9c <rmw_uxrce_transport_init>
 800f178:	4607      	mov	r7, r0
 800f17a:	2800      	cmp	r0, #0
 800f17c:	d150      	bne.n	800f220 <rmw_init+0x1c4>
 800f17e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f180:	f505 7428 	add.w	r4, r5, #672	; 0x2a0
 800f184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f186:	4620      	mov	r0, r4
 800f188:	f505 7122 	add.w	r1, r5, #648	; 0x288
 800f18c:	f003 fab6 	bl	80126fc <uxr_init_session>
 800f190:	4941      	ldr	r1, [pc, #260]	; (800f298 <rmw_init+0x23c>)
 800f192:	462a      	mov	r2, r5
 800f194:	4620      	mov	r0, r4
 800f196:	f003 fad3 	bl	8012740 <uxr_set_topic_callback>
 800f19a:	4940      	ldr	r1, [pc, #256]	; (800f29c <rmw_init+0x240>)
 800f19c:	463a      	mov	r2, r7
 800f19e:	4620      	mov	r0, r4
 800f1a0:	f003 faca 	bl	8012738 <uxr_set_status_callback>
 800f1a4:	493e      	ldr	r1, [pc, #248]	; (800f2a0 <rmw_init+0x244>)
 800f1a6:	463a      	mov	r2, r7
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	f003 facd 	bl	8012748 <uxr_set_request_callback>
 800f1ae:	493d      	ldr	r1, [pc, #244]	; (800f2a4 <rmw_init+0x248>)
 800f1b0:	463a      	mov	r2, r7
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	f003 facc 	bl	8012750 <uxr_set_reply_callback>
 800f1b8:	f8b5 2298 	ldrh.w	r2, [r5, #664]	; 0x298
 800f1bc:	2304      	movs	r3, #4
 800f1be:	0092      	lsls	r2, r2, #2
 800f1c0:	f505 7165 	add.w	r1, r5, #916	; 0x394
 800f1c4:	4620      	mov	r0, r4
 800f1c6:	f003 fb83 	bl	80128d0 <uxr_create_input_reliable_stream>
 800f1ca:	f8b5 2298 	ldrh.w	r2, [r5, #664]	; 0x298
 800f1ce:	f8c5 0374 	str.w	r0, [r5, #884]	; 0x374
 800f1d2:	0092      	lsls	r2, r2, #2
 800f1d4:	2304      	movs	r3, #4
 800f1d6:	f605 3194 	addw	r1, r5, #2964	; 0xb94
 800f1da:	4620      	mov	r0, r4
 800f1dc:	f003 fb4e 	bl	801287c <uxr_create_output_reliable_stream>
 800f1e0:	f8c5 0378 	str.w	r0, [r5, #888]	; 0x378
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	f003 fb6d 	bl	80128c4 <uxr_create_input_best_effort_stream>
 800f1ea:	f505 519c 	add.w	r1, r5, #4992	; 0x1380
 800f1ee:	f8c5 0380 	str.w	r0, [r5, #896]	; 0x380
 800f1f2:	f8b5 2298 	ldrh.w	r2, [r5, #664]	; 0x298
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	3114      	adds	r1, #20
 800f1fa:	f003 fb2d 	bl	8012858 <uxr_create_output_best_effort_stream>
 800f1fe:	f8c5 037c 	str.w	r0, [r5, #892]	; 0x37c
 800f202:	4620      	mov	r0, r4
 800f204:	f003 faa8 	bl	8012758 <uxr_create_session>
 800f208:	b950      	cbnz	r0, 800f220 <rmw_init+0x1c4>
 800f20a:	4648      	mov	r0, r9
 800f20c:	f002 fe3c 	bl	8011e88 <uxr_close_custom_transport>
 800f210:	480c      	ldr	r0, [pc, #48]	; (800f244 <rmw_init+0x1e8>)
 800f212:	4629      	mov	r1, r5
 800f214:	f008 f93e 	bl	8017494 <put_memory>
 800f218:	64b7      	str	r7, [r6, #72]	; 0x48
 800f21a:	2701      	movs	r7, #1
 800f21c:	e000      	b.n	800f220 <rmw_init+0x1c4>
 800f21e:	270c      	movs	r7, #12
 800f220:	4638      	mov	r0, r7
 800f222:	b003      	add	sp, #12
 800f224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f228:	270b      	movs	r7, #11
 800f22a:	4638      	mov	r0, r7
 800f22c:	b003      	add	sp, #12
 800f22e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f232:	2701      	movs	r7, #1
 800f234:	4638      	mov	r0, r7
 800f236:	b003      	add	sp, #12
 800f238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f23c:	0801ea10 	.word	0x0801ea10
 800f240:	20014a48 	.word	0x20014a48
 800f244:	20014818 	.word	0x20014818
 800f248:	20011670 	.word	0x20011670
 800f24c:	20012450 	.word	0x20012450
 800f250:	20014644 	.word	0x20014644
 800f254:	20014828 	.word	0x20014828
 800f258:	20011f78 	.word	0x20011f78
 800f25c:	200148dc 	.word	0x200148dc
 800f260:	20011690 	.word	0x20011690
 800f264:	20011680 	.word	0x20011680
 800f268:	20014980 	.word	0x20014980
 800f26c:	200148cc 	.word	0x200148cc
 800f270:	20012388 	.word	0x20012388
 800f274:	20011f00 	.word	0x20011f00
 800f278:	20014654 	.word	0x20014654
 800f27c:	20014808 	.word	0x20014808
 800f280:	200145c0 	.word	0x200145c0
 800f284:	2001496c 	.word	0x2001496c
 800f288:	20014550 	.word	0x20014550
 800f28c:	20015ff0 	.word	0x20015ff0
 800f290:	200148ec 	.word	0x200148ec
 800f294:	200147f8 	.word	0x200147f8
 800f298:	080172b5 	.word	0x080172b5
 800f29c:	080172ad 	.word	0x080172ad
 800f2a0:	08017349 	.word	0x08017349
 800f2a4:	080173e1 	.word	0x080173e1

0800f2a8 <rmw_context_fini>:
 800f2a8:	4b17      	ldr	r3, [pc, #92]	; (800f308 <rmw_context_fini+0x60>)
 800f2aa:	b570      	push	{r4, r5, r6, lr}
 800f2ac:	681c      	ldr	r4, [r3, #0]
 800f2ae:	4605      	mov	r5, r0
 800f2b0:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800f2b2:	b33c      	cbz	r4, 800f304 <rmw_context_fini+0x5c>
 800f2b4:	2600      	movs	r6, #0
 800f2b6:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 800f2ba:	691a      	ldr	r2, [r3, #16]
 800f2bc:	4282      	cmp	r2, r0
 800f2be:	d018      	beq.n	800f2f2 <rmw_context_fini+0x4a>
 800f2c0:	2c00      	cmp	r4, #0
 800f2c2:	d1f8      	bne.n	800f2b6 <rmw_context_fini+0xe>
 800f2c4:	b188      	cbz	r0, 800f2ea <rmw_context_fini+0x42>
 800f2c6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f2ca:	789b      	ldrb	r3, [r3, #2]
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	bf14      	ite	ne
 800f2d0:	210a      	movne	r1, #10
 800f2d2:	2100      	moveq	r1, #0
 800f2d4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f2d8:	f003 fa78 	bl	80127cc <uxr_delete_session_retries>
 800f2dc:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800f2de:	f000 fdbf 	bl	800fe60 <rmw_uxrce_fini_session_memory>
 800f2e2:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800f2e4:	3010      	adds	r0, #16
 800f2e6:	f002 fdcf 	bl	8011e88 <uxr_close_custom_transport>
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	4630      	mov	r0, r6
 800f2ee:	64ab      	str	r3, [r5, #72]	; 0x48
 800f2f0:	bd70      	pop	{r4, r5, r6, pc}
 800f2f2:	f103 0018 	add.w	r0, r3, #24
 800f2f6:	f000 f89b 	bl	800f430 <rmw_destroy_node>
 800f2fa:	4606      	mov	r6, r0
 800f2fc:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800f2fe:	2c00      	cmp	r4, #0
 800f300:	d1d9      	bne.n	800f2b6 <rmw_context_fini+0xe>
 800f302:	e7df      	b.n	800f2c4 <rmw_context_fini+0x1c>
 800f304:	4626      	mov	r6, r4
 800f306:	e7dd      	b.n	800f2c4 <rmw_context_fini+0x1c>
 800f308:	20014644 	.word	0x20014644

0800f30c <create_node>:
 800f30c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f310:	b083      	sub	sp, #12
 800f312:	2b00      	cmp	r3, #0
 800f314:	d05f      	beq.n	800f3d6 <create_node+0xca>
 800f316:	4606      	mov	r6, r0
 800f318:	4835      	ldr	r0, [pc, #212]	; (800f3f0 <create_node+0xe4>)
 800f31a:	460f      	mov	r7, r1
 800f31c:	4690      	mov	r8, r2
 800f31e:	461d      	mov	r5, r3
 800f320:	f008 f8a8 	bl	8017474 <get_memory>
 800f324:	2800      	cmp	r0, #0
 800f326:	d056      	beq.n	800f3d6 <create_node+0xca>
 800f328:	68c4      	ldr	r4, [r0, #12]
 800f32a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800f32c:	6123      	str	r3, [r4, #16]
 800f32e:	f008 f8f7 	bl	8017520 <rmw_get_implementation_identifier>
 800f332:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800f336:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800f33a:	f8c4 9020 	str.w	r9, [r4, #32]
 800f33e:	4630      	mov	r0, r6
 800f340:	f7f0 ff50 	bl	80001e4 <strlen>
 800f344:	1c42      	adds	r2, r0, #1
 800f346:	2a3c      	cmp	r2, #60	; 0x3c
 800f348:	f104 0518 	add.w	r5, r4, #24
 800f34c:	d840      	bhi.n	800f3d0 <create_node+0xc4>
 800f34e:	4648      	mov	r0, r9
 800f350:	4631      	mov	r1, r6
 800f352:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800f356:	f009 fd3d 	bl	8018dd4 <memcpy>
 800f35a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800f35e:	4638      	mov	r0, r7
 800f360:	f7f0 ff40 	bl	80001e4 <strlen>
 800f364:	1c42      	adds	r2, r0, #1
 800f366:	2a3c      	cmp	r2, #60	; 0x3c
 800f368:	d832      	bhi.n	800f3d0 <create_node+0xc4>
 800f36a:	4639      	mov	r1, r7
 800f36c:	4648      	mov	r0, r9
 800f36e:	f009 fd31 	bl	8018dd4 <memcpy>
 800f372:	f241 5394 	movw	r3, #5524	; 0x1594
 800f376:	6922      	ldr	r2, [r4, #16]
 800f378:	5ad0      	ldrh	r0, [r2, r3]
 800f37a:	2101      	movs	r1, #1
 800f37c:	eb00 0c01 	add.w	ip, r0, r1
 800f380:	f822 c003 	strh.w	ip, [r2, r3]
 800f384:	f002 fd84 	bl	8011e90 <uxr_object_id>
 800f388:	6160      	str	r0, [r4, #20]
 800f38a:	783b      	ldrb	r3, [r7, #0]
 800f38c:	2b2f      	cmp	r3, #47	; 0x2f
 800f38e:	d127      	bne.n	800f3e0 <create_node+0xd4>
 800f390:	787b      	ldrb	r3, [r7, #1]
 800f392:	bb2b      	cbnz	r3, 800f3e0 <create_node+0xd4>
 800f394:	4a17      	ldr	r2, [pc, #92]	; (800f3f4 <create_node+0xe8>)
 800f396:	4818      	ldr	r0, [pc, #96]	; (800f3f8 <create_node+0xec>)
 800f398:	4633      	mov	r3, r6
 800f39a:	213c      	movs	r1, #60	; 0x3c
 800f39c:	f00a f8b8 	bl	8019510 <sniprintf>
 800f3a0:	6920      	ldr	r0, [r4, #16]
 800f3a2:	4b15      	ldr	r3, [pc, #84]	; (800f3f8 <create_node+0xec>)
 800f3a4:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800f3a8:	9300      	str	r3, [sp, #0]
 800f3aa:	2306      	movs	r3, #6
 800f3ac:	9301      	str	r3, [sp, #4]
 800f3ae:	6811      	ldr	r1, [r2, #0]
 800f3b0:	6962      	ldr	r2, [r4, #20]
 800f3b2:	fa1f f388 	uxth.w	r3, r8
 800f3b6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f3ba:	f002 fae7 	bl	801198c <uxr_buffer_create_participant_bin>
 800f3be:	4602      	mov	r2, r0
 800f3c0:	6920      	ldr	r0, [r4, #16]
 800f3c2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f3c6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f3ca:	f000 fead 	bl	8010128 <run_xrce_session>
 800f3ce:	b918      	cbnz	r0, 800f3d8 <create_node+0xcc>
 800f3d0:	4628      	mov	r0, r5
 800f3d2:	f000 fd4b 	bl	800fe6c <rmw_uxrce_fini_node_memory>
 800f3d6:	2500      	movs	r5, #0
 800f3d8:	4628      	mov	r0, r5
 800f3da:	b003      	add	sp, #12
 800f3dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3e0:	4a06      	ldr	r2, [pc, #24]	; (800f3fc <create_node+0xf0>)
 800f3e2:	9600      	str	r6, [sp, #0]
 800f3e4:	463b      	mov	r3, r7
 800f3e6:	213c      	movs	r1, #60	; 0x3c
 800f3e8:	4803      	ldr	r0, [pc, #12]	; (800f3f8 <create_node+0xec>)
 800f3ea:	f00a f891 	bl	8019510 <sniprintf>
 800f3ee:	e7d7      	b.n	800f3a0 <create_node+0x94>
 800f3f0:	20014644 	.word	0x20014644
 800f3f4:	0801e290 	.word	0x0801e290
 800f3f8:	20010428 	.word	0x20010428
 800f3fc:	0801e254 	.word	0x0801e254

0800f400 <rmw_create_node>:
 800f400:	b199      	cbz	r1, 800f42a <rmw_create_node+0x2a>
 800f402:	b430      	push	{r4, r5}
 800f404:	4615      	mov	r5, r2
 800f406:	461a      	mov	r2, r3
 800f408:	780b      	ldrb	r3, [r1, #0]
 800f40a:	460c      	mov	r4, r1
 800f40c:	b153      	cbz	r3, 800f424 <rmw_create_node+0x24>
 800f40e:	b14d      	cbz	r5, 800f424 <rmw_create_node+0x24>
 800f410:	782b      	ldrb	r3, [r5, #0]
 800f412:	b13b      	cbz	r3, 800f424 <rmw_create_node+0x24>
 800f414:	b902      	cbnz	r2, 800f418 <rmw_create_node+0x18>
 800f416:	69c2      	ldr	r2, [r0, #28]
 800f418:	4603      	mov	r3, r0
 800f41a:	4629      	mov	r1, r5
 800f41c:	4620      	mov	r0, r4
 800f41e:	bc30      	pop	{r4, r5}
 800f420:	f7ff bf74 	b.w	800f30c <create_node>
 800f424:	2000      	movs	r0, #0
 800f426:	bc30      	pop	{r4, r5}
 800f428:	4770      	bx	lr
 800f42a:	2000      	movs	r0, #0
 800f42c:	4770      	bx	lr
 800f42e:	bf00      	nop

0800f430 <rmw_destroy_node>:
 800f430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f432:	2800      	cmp	r0, #0
 800f434:	d05b      	beq.n	800f4ee <rmw_destroy_node+0xbe>
 800f436:	4607      	mov	r7, r0
 800f438:	6800      	ldr	r0, [r0, #0]
 800f43a:	f000 fedf 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 800f43e:	2800      	cmp	r0, #0
 800f440:	d055      	beq.n	800f4ee <rmw_destroy_node+0xbe>
 800f442:	687c      	ldr	r4, [r7, #4]
 800f444:	2c00      	cmp	r4, #0
 800f446:	d052      	beq.n	800f4ee <rmw_destroy_node+0xbe>
 800f448:	4b2f      	ldr	r3, [pc, #188]	; (800f508 <rmw_destroy_node+0xd8>)
 800f44a:	681d      	ldr	r5, [r3, #0]
 800f44c:	2d00      	cmp	r5, #0
 800f44e:	d059      	beq.n	800f504 <rmw_destroy_node+0xd4>
 800f450:	2600      	movs	r6, #0
 800f452:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800f456:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800f45a:	429c      	cmp	r4, r3
 800f45c:	d04a      	beq.n	800f4f4 <rmw_destroy_node+0xc4>
 800f45e:	2d00      	cmp	r5, #0
 800f460:	d1f7      	bne.n	800f452 <rmw_destroy_node+0x22>
 800f462:	4b2a      	ldr	r3, [pc, #168]	; (800f50c <rmw_destroy_node+0xdc>)
 800f464:	681d      	ldr	r5, [r3, #0]
 800f466:	b15d      	cbz	r5, 800f480 <rmw_destroy_node+0x50>
 800f468:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800f46c:	6a0b      	ldr	r3, [r1, #32]
 800f46e:	429c      	cmp	r4, r3
 800f470:	d1f9      	bne.n	800f466 <rmw_destroy_node+0x36>
 800f472:	317c      	adds	r1, #124	; 0x7c
 800f474:	4638      	mov	r0, r7
 800f476:	f000 fb11 	bl	800fa9c <rmw_destroy_subscription>
 800f47a:	4606      	mov	r6, r0
 800f47c:	2d00      	cmp	r5, #0
 800f47e:	d1f3      	bne.n	800f468 <rmw_destroy_node+0x38>
 800f480:	4b23      	ldr	r3, [pc, #140]	; (800f510 <rmw_destroy_node+0xe0>)
 800f482:	681d      	ldr	r5, [r3, #0]
 800f484:	b15d      	cbz	r5, 800f49e <rmw_destroy_node+0x6e>
 800f486:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800f48a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800f48c:	429c      	cmp	r4, r3
 800f48e:	d1f9      	bne.n	800f484 <rmw_destroy_node+0x54>
 800f490:	317c      	adds	r1, #124	; 0x7c
 800f492:	4638      	mov	r0, r7
 800f494:	f000 f9e2 	bl	800f85c <rmw_destroy_service>
 800f498:	4606      	mov	r6, r0
 800f49a:	2d00      	cmp	r5, #0
 800f49c:	d1f3      	bne.n	800f486 <rmw_destroy_node+0x56>
 800f49e:	4b1d      	ldr	r3, [pc, #116]	; (800f514 <rmw_destroy_node+0xe4>)
 800f4a0:	681d      	ldr	r5, [r3, #0]
 800f4a2:	b15d      	cbz	r5, 800f4bc <rmw_destroy_node+0x8c>
 800f4a4:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800f4a8:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800f4aa:	429c      	cmp	r4, r3
 800f4ac:	d1f9      	bne.n	800f4a2 <rmw_destroy_node+0x72>
 800f4ae:	317c      	adds	r1, #124	; 0x7c
 800f4b0:	4638      	mov	r0, r7
 800f4b2:	f008 f803 	bl	80174bc <rmw_destroy_client>
 800f4b6:	4606      	mov	r6, r0
 800f4b8:	2d00      	cmp	r5, #0
 800f4ba:	d1f3      	bne.n	800f4a4 <rmw_destroy_node+0x74>
 800f4bc:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800f4c0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f4c4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f4c8:	6819      	ldr	r1, [r3, #0]
 800f4ca:	f002 fa13 	bl	80118f4 <uxr_buffer_delete_entity>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	6920      	ldr	r0, [r4, #16]
 800f4d2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f4d6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f4da:	f000 fe25 	bl	8010128 <run_xrce_session>
 800f4de:	2800      	cmp	r0, #0
 800f4e0:	bf08      	it	eq
 800f4e2:	2602      	moveq	r6, #2
 800f4e4:	4638      	mov	r0, r7
 800f4e6:	f000 fcc1 	bl	800fe6c <rmw_uxrce_fini_node_memory>
 800f4ea:	4630      	mov	r0, r6
 800f4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4ee:	2601      	movs	r6, #1
 800f4f0:	4630      	mov	r0, r6
 800f4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4f4:	3184      	adds	r1, #132	; 0x84
 800f4f6:	4638      	mov	r0, r7
 800f4f8:	f000 f960 	bl	800f7bc <rmw_destroy_publisher>
 800f4fc:	4606      	mov	r6, r0
 800f4fe:	2d00      	cmp	r5, #0
 800f500:	d1a7      	bne.n	800f452 <rmw_destroy_node+0x22>
 800f502:	e7ae      	b.n	800f462 <rmw_destroy_node+0x32>
 800f504:	462e      	mov	r6, r5
 800f506:	e7ac      	b.n	800f462 <rmw_destroy_node+0x32>
 800f508:	20011680 	.word	0x20011680
 800f50c:	200148dc 	.word	0x200148dc
 800f510:	200148cc 	.word	0x200148cc
 800f514:	20011f00 	.word	0x20011f00

0800f518 <rmw_node_get_graph_guard_condition>:
 800f518:	6843      	ldr	r3, [r0, #4]
 800f51a:	6918      	ldr	r0, [r3, #16]
 800f51c:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800f520:	4770      	bx	lr
 800f522:	bf00      	nop

0800f524 <flush_session>:
 800f524:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800f526:	f003 badd 	b.w	8012ae4 <uxr_run_session_until_confirm_delivery>
 800f52a:	bf00      	nop

0800f52c <rmw_publish>:
 800f52c:	2800      	cmp	r0, #0
 800f52e:	d053      	beq.n	800f5d8 <rmw_publish+0xac>
 800f530:	b570      	push	{r4, r5, r6, lr}
 800f532:	460d      	mov	r5, r1
 800f534:	b08e      	sub	sp, #56	; 0x38
 800f536:	2900      	cmp	r1, #0
 800f538:	d04b      	beq.n	800f5d2 <rmw_publish+0xa6>
 800f53a:	4604      	mov	r4, r0
 800f53c:	6800      	ldr	r0, [r0, #0]
 800f53e:	f000 fe5d 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 800f542:	2800      	cmp	r0, #0
 800f544:	d045      	beq.n	800f5d2 <rmw_publish+0xa6>
 800f546:	6866      	ldr	r6, [r4, #4]
 800f548:	2e00      	cmp	r6, #0
 800f54a:	d042      	beq.n	800f5d2 <rmw_publish+0xa6>
 800f54c:	69b4      	ldr	r4, [r6, #24]
 800f54e:	4628      	mov	r0, r5
 800f550:	6923      	ldr	r3, [r4, #16]
 800f552:	4798      	blx	r3
 800f554:	69f3      	ldr	r3, [r6, #28]
 800f556:	9005      	str	r0, [sp, #20]
 800f558:	b113      	cbz	r3, 800f560 <rmw_publish+0x34>
 800f55a:	a805      	add	r0, sp, #20
 800f55c:	4798      	blx	r3
 800f55e:	9805      	ldr	r0, [sp, #20]
 800f560:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800f564:	691b      	ldr	r3, [r3, #16]
 800f566:	9000      	str	r0, [sp, #0]
 800f568:	6972      	ldr	r2, [r6, #20]
 800f56a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800f56c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800f570:	ab06      	add	r3, sp, #24
 800f572:	f004 fb49 	bl	8013c08 <uxr_prepare_output_stream>
 800f576:	b1d8      	cbz	r0, 800f5b0 <rmw_publish+0x84>
 800f578:	68a3      	ldr	r3, [r4, #8]
 800f57a:	4628      	mov	r0, r5
 800f57c:	a906      	add	r1, sp, #24
 800f57e:	4798      	blx	r3
 800f580:	6a33      	ldr	r3, [r6, #32]
 800f582:	4604      	mov	r4, r0
 800f584:	b10b      	cbz	r3, 800f58a <rmw_publish+0x5e>
 800f586:	a806      	add	r0, sp, #24
 800f588:	4798      	blx	r3
 800f58a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800f58e:	2b01      	cmp	r3, #1
 800f590:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800f594:	d022      	beq.n	800f5dc <rmw_publish+0xb0>
 800f596:	6918      	ldr	r0, [r3, #16]
 800f598:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800f59a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f59e:	f003 faa1 	bl	8012ae4 <uxr_run_session_until_confirm_delivery>
 800f5a2:	4020      	ands	r0, r4
 800f5a4:	b2c4      	uxtb	r4, r0
 800f5a6:	f084 0001 	eor.w	r0, r4, #1
 800f5aa:	b2c0      	uxtb	r0, r0
 800f5ac:	b00e      	add	sp, #56	; 0x38
 800f5ae:	bd70      	pop	{r4, r5, r6, pc}
 800f5b0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800f5b4:	4a0c      	ldr	r2, [pc, #48]	; (800f5e8 <rmw_publish+0xbc>)
 800f5b6:	6918      	ldr	r0, [r3, #16]
 800f5b8:	9b05      	ldr	r3, [sp, #20]
 800f5ba:	9300      	str	r3, [sp, #0]
 800f5bc:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800f5c0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f5c4:	6972      	ldr	r2, [r6, #20]
 800f5c6:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800f5c8:	ab06      	add	r3, sp, #24
 800f5ca:	f004 fb4d 	bl	8013c68 <uxr_prepare_output_stream_fragmented>
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	d1d2      	bne.n	800f578 <rmw_publish+0x4c>
 800f5d2:	2001      	movs	r0, #1
 800f5d4:	b00e      	add	sp, #56	; 0x38
 800f5d6:	bd70      	pop	{r4, r5, r6, pc}
 800f5d8:	2001      	movs	r0, #1
 800f5da:	4770      	bx	lr
 800f5dc:	6918      	ldr	r0, [r3, #16]
 800f5de:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f5e2:	f003 f9eb 	bl	80129bc <uxr_flash_output_streams>
 800f5e6:	e7de      	b.n	800f5a6 <rmw_publish+0x7a>
 800f5e8:	0800f525 	.word	0x0800f525

0800f5ec <rmw_create_publisher>:
 800f5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5f0:	b086      	sub	sp, #24
 800f5f2:	2800      	cmp	r0, #0
 800f5f4:	f000 80d5 	beq.w	800f7a2 <rmw_create_publisher+0x1b6>
 800f5f8:	460e      	mov	r6, r1
 800f5fa:	2900      	cmp	r1, #0
 800f5fc:	f000 80d1 	beq.w	800f7a2 <rmw_create_publisher+0x1b6>
 800f600:	4604      	mov	r4, r0
 800f602:	6800      	ldr	r0, [r0, #0]
 800f604:	4615      	mov	r5, r2
 800f606:	4698      	mov	r8, r3
 800f608:	f000 fdf8 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 800f60c:	2800      	cmp	r0, #0
 800f60e:	f000 80c8 	beq.w	800f7a2 <rmw_create_publisher+0x1b6>
 800f612:	2d00      	cmp	r5, #0
 800f614:	f000 80c5 	beq.w	800f7a2 <rmw_create_publisher+0x1b6>
 800f618:	782b      	ldrb	r3, [r5, #0]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	f000 80c1 	beq.w	800f7a2 <rmw_create_publisher+0x1b6>
 800f620:	f1b8 0f00 	cmp.w	r8, #0
 800f624:	f000 80bd 	beq.w	800f7a2 <rmw_create_publisher+0x1b6>
 800f628:	4860      	ldr	r0, [pc, #384]	; (800f7ac <rmw_create_publisher+0x1c0>)
 800f62a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f62e:	f007 ff21 	bl	8017474 <get_memory>
 800f632:	2800      	cmp	r0, #0
 800f634:	f000 80b5 	beq.w	800f7a2 <rmw_create_publisher+0x1b6>
 800f638:	68c4      	ldr	r4, [r0, #12]
 800f63a:	2300      	movs	r3, #0
 800f63c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800f640:	f007 ff6e 	bl	8017520 <rmw_get_implementation_identifier>
 800f644:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800f648:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800f64c:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800f650:	4628      	mov	r0, r5
 800f652:	f7f0 fdc7 	bl	80001e4 <strlen>
 800f656:	3001      	adds	r0, #1
 800f658:	283c      	cmp	r0, #60	; 0x3c
 800f65a:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800f65e:	f200 809d 	bhi.w	800f79c <rmw_create_publisher+0x1b0>
 800f662:	4a53      	ldr	r2, [pc, #332]	; (800f7b0 <rmw_create_publisher+0x1c4>)
 800f664:	462b      	mov	r3, r5
 800f666:	213c      	movs	r1, #60	; 0x3c
 800f668:	4650      	mov	r0, sl
 800f66a:	f009 ff51 	bl	8019510 <sniprintf>
 800f66e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f672:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800f676:	4641      	mov	r1, r8
 800f678:	2250      	movs	r2, #80	; 0x50
 800f67a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800f67e:	f009 fba9 	bl	8018dd4 <memcpy>
 800f682:	f898 3008 	ldrb.w	r3, [r8, #8]
 800f686:	494b      	ldr	r1, [pc, #300]	; (800f7b4 <rmw_create_publisher+0x1c8>)
 800f688:	2b02      	cmp	r3, #2
 800f68a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f68e:	bf0c      	ite	eq
 800f690:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800f694:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800f698:	67a3      	str	r3, [r4, #120]	; 0x78
 800f69a:	2300      	movs	r3, #0
 800f69c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f6a0:	4630      	mov	r0, r6
 800f6a2:	f000 fdb9 	bl	8010218 <get_message_typesupport_handle>
 800f6a6:	2800      	cmp	r0, #0
 800f6a8:	d078      	beq.n	800f79c <rmw_create_publisher+0x1b0>
 800f6aa:	6842      	ldr	r2, [r0, #4]
 800f6ac:	61a2      	str	r2, [r4, #24]
 800f6ae:	2a00      	cmp	r2, #0
 800f6b0:	d074      	beq.n	800f79c <rmw_create_publisher+0x1b0>
 800f6b2:	4629      	mov	r1, r5
 800f6b4:	4643      	mov	r3, r8
 800f6b6:	4648      	mov	r0, r9
 800f6b8:	f007 ff38 	bl	801752c <create_topic>
 800f6bc:	6260      	str	r0, [r4, #36]	; 0x24
 800f6be:	2800      	cmp	r0, #0
 800f6c0:	d06c      	beq.n	800f79c <rmw_create_publisher+0x1b0>
 800f6c2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f6c6:	f241 5398 	movw	r3, #5528	; 0x1598
 800f6ca:	2103      	movs	r1, #3
 800f6cc:	5ad0      	ldrh	r0, [r2, r3]
 800f6ce:	1c45      	adds	r5, r0, #1
 800f6d0:	52d5      	strh	r5, [r2, r3]
 800f6d2:	f002 fbdd 	bl	8011e90 <uxr_object_id>
 800f6d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f6da:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800f6de:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800f6e2:	6912      	ldr	r2, [r2, #16]
 800f6e4:	6120      	str	r0, [r4, #16]
 800f6e6:	2606      	movs	r6, #6
 800f6e8:	9600      	str	r6, [sp, #0]
 800f6ea:	6819      	ldr	r1, [r3, #0]
 800f6ec:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f6f0:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800f6f4:	6922      	ldr	r2, [r4, #16]
 800f6f6:	f002 f9af 	bl	8011a58 <uxr_buffer_create_publisher_bin>
 800f6fa:	4602      	mov	r2, r0
 800f6fc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f700:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f704:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f708:	f000 fd0e 	bl	8010128 <run_xrce_session>
 800f70c:	2800      	cmp	r0, #0
 800f70e:	d041      	beq.n	800f794 <rmw_create_publisher+0x1a8>
 800f710:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f714:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800f718:	f241 539a 	movw	r3, #5530	; 0x159a
 800f71c:	2105      	movs	r1, #5
 800f71e:	5ad0      	ldrh	r0, [r2, r3]
 800f720:	1c45      	adds	r5, r0, #1
 800f722:	52d5      	strh	r5, [r2, r3]
 800f724:	f002 fbb4 	bl	8011e90 <uxr_object_id>
 800f728:	6160      	str	r0, [r4, #20]
 800f72a:	f898 1009 	ldrb.w	r1, [r8, #9]
 800f72e:	f898 2000 	ldrb.w	r2, [r8]
 800f732:	f898 3008 	ldrb.w	r3, [r8, #8]
 800f736:	f8d9 5010 	ldr.w	r5, [r9, #16]
 800f73a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800f73e:	f8d5 5384 	ldr.w	r5, [r5, #900]	; 0x384
 800f742:	6900      	ldr	r0, [r0, #16]
 800f744:	f8b8 c004 	ldrh.w	ip, [r8, #4]
 800f748:	f8cd c00c 	str.w	ip, [sp, #12]
 800f74c:	3902      	subs	r1, #2
 800f74e:	f1a2 0201 	sub.w	r2, r2, #1
 800f752:	bf18      	it	ne
 800f754:	2101      	movne	r1, #1
 800f756:	fab2 f282 	clz	r2, r2
 800f75a:	2b01      	cmp	r3, #1
 800f75c:	bf8c      	ite	hi
 800f75e:	2300      	movhi	r3, #0
 800f760:	2301      	movls	r3, #1
 800f762:	0952      	lsrs	r2, r2, #5
 800f764:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f768:	9605      	str	r6, [sp, #20]
 800f76a:	9104      	str	r1, [sp, #16]
 800f76c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f76e:	691b      	ldr	r3, [r3, #16]
 800f770:	9300      	str	r3, [sp, #0]
 800f772:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f776:	6829      	ldr	r1, [r5, #0]
 800f778:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f77c:	f002 f9ca 	bl	8011b14 <uxr_buffer_create_datawriter_bin>
 800f780:	4602      	mov	r2, r0
 800f782:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f786:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f78a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f78e:	f000 fccb 	bl	8010128 <run_xrce_session>
 800f792:	b938      	cbnz	r0, 800f7a4 <rmw_create_publisher+0x1b8>
 800f794:	4805      	ldr	r0, [pc, #20]	; (800f7ac <rmw_create_publisher+0x1c0>)
 800f796:	4621      	mov	r1, r4
 800f798:	f007 fe7c 	bl	8017494 <put_memory>
 800f79c:	4638      	mov	r0, r7
 800f79e:	f000 fb7b 	bl	800fe98 <rmw_uxrce_fini_publisher_memory>
 800f7a2:	2700      	movs	r7, #0
 800f7a4:	4638      	mov	r0, r7
 800f7a6:	b006      	add	sp, #24
 800f7a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7ac:	20011680 	.word	0x20011680
 800f7b0:	0801e290 	.word	0x0801e290
 800f7b4:	0801e25c 	.word	0x0801e25c

0800f7b8 <rmw_publisher_get_actual_qos>:
 800f7b8:	2000      	movs	r0, #0
 800f7ba:	4770      	bx	lr

0800f7bc <rmw_destroy_publisher>:
 800f7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7be:	b128      	cbz	r0, 800f7cc <rmw_destroy_publisher+0x10>
 800f7c0:	4604      	mov	r4, r0
 800f7c2:	6800      	ldr	r0, [r0, #0]
 800f7c4:	460d      	mov	r5, r1
 800f7c6:	f000 fd19 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 800f7ca:	b910      	cbnz	r0, 800f7d2 <rmw_destroy_publisher+0x16>
 800f7cc:	2401      	movs	r4, #1
 800f7ce:	4620      	mov	r0, r4
 800f7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7d2:	6863      	ldr	r3, [r4, #4]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d0f9      	beq.n	800f7cc <rmw_destroy_publisher+0x10>
 800f7d8:	2d00      	cmp	r5, #0
 800f7da:	d0f7      	beq.n	800f7cc <rmw_destroy_publisher+0x10>
 800f7dc:	6828      	ldr	r0, [r5, #0]
 800f7de:	f000 fd0d 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	d0f2      	beq.n	800f7cc <rmw_destroy_publisher+0x10>
 800f7e6:	686c      	ldr	r4, [r5, #4]
 800f7e8:	2c00      	cmp	r4, #0
 800f7ea:	d0ef      	beq.n	800f7cc <rmw_destroy_publisher+0x10>
 800f7ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f7ee:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800f7f2:	f007 feeb 	bl	80175cc <destroy_topic>
 800f7f6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f7fa:	6962      	ldr	r2, [r4, #20]
 800f7fc:	6918      	ldr	r0, [r3, #16]
 800f7fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f802:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f806:	6819      	ldr	r1, [r3, #0]
 800f808:	f002 f874 	bl	80118f4 <uxr_buffer_delete_entity>
 800f80c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800f810:	6922      	ldr	r2, [r4, #16]
 800f812:	4603      	mov	r3, r0
 800f814:	6908      	ldr	r0, [r1, #16]
 800f816:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f81a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f81e:	6809      	ldr	r1, [r1, #0]
 800f820:	461c      	mov	r4, r3
 800f822:	f002 f867 	bl	80118f4 <uxr_buffer_delete_entity>
 800f826:	4606      	mov	r6, r0
 800f828:	6938      	ldr	r0, [r7, #16]
 800f82a:	4622      	mov	r2, r4
 800f82c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f830:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f834:	f000 fc78 	bl	8010128 <run_xrce_session>
 800f838:	4604      	mov	r4, r0
 800f83a:	6938      	ldr	r0, [r7, #16]
 800f83c:	4632      	mov	r2, r6
 800f83e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f842:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f846:	f000 fc6f 	bl	8010128 <run_xrce_session>
 800f84a:	b12c      	cbz	r4, 800f858 <rmw_destroy_publisher+0x9c>
 800f84c:	b120      	cbz	r0, 800f858 <rmw_destroy_publisher+0x9c>
 800f84e:	2400      	movs	r4, #0
 800f850:	4628      	mov	r0, r5
 800f852:	f000 fb21 	bl	800fe98 <rmw_uxrce_fini_publisher_memory>
 800f856:	e7ba      	b.n	800f7ce <rmw_destroy_publisher+0x12>
 800f858:	2402      	movs	r4, #2
 800f85a:	e7f9      	b.n	800f850 <rmw_destroy_publisher+0x94>

0800f85c <rmw_destroy_service>:
 800f85c:	b538      	push	{r3, r4, r5, lr}
 800f85e:	b128      	cbz	r0, 800f86c <rmw_destroy_service+0x10>
 800f860:	4604      	mov	r4, r0
 800f862:	6800      	ldr	r0, [r0, #0]
 800f864:	460d      	mov	r5, r1
 800f866:	f000 fcc9 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 800f86a:	b910      	cbnz	r0, 800f872 <rmw_destroy_service+0x16>
 800f86c:	2401      	movs	r4, #1
 800f86e:	4620      	mov	r0, r4
 800f870:	bd38      	pop	{r3, r4, r5, pc}
 800f872:	6863      	ldr	r3, [r4, #4]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d0f9      	beq.n	800f86c <rmw_destroy_service+0x10>
 800f878:	2d00      	cmp	r5, #0
 800f87a:	d0f7      	beq.n	800f86c <rmw_destroy_service+0x10>
 800f87c:	6828      	ldr	r0, [r5, #0]
 800f87e:	f000 fcbd 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 800f882:	2800      	cmp	r0, #0
 800f884:	d0f2      	beq.n	800f86c <rmw_destroy_service+0x10>
 800f886:	686b      	ldr	r3, [r5, #4]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d0ef      	beq.n	800f86c <rmw_destroy_service+0x10>
 800f88c:	6864      	ldr	r4, [r4, #4]
 800f88e:	691a      	ldr	r2, [r3, #16]
 800f890:	6920      	ldr	r0, [r4, #16]
 800f892:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f896:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f89a:	6819      	ldr	r1, [r3, #0]
 800f89c:	f002 f82a 	bl	80118f4 <uxr_buffer_delete_entity>
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	6920      	ldr	r0, [r4, #16]
 800f8a4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f8a8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f8ac:	f000 fc3c 	bl	8010128 <run_xrce_session>
 800f8b0:	2800      	cmp	r0, #0
 800f8b2:	4628      	mov	r0, r5
 800f8b4:	bf14      	ite	ne
 800f8b6:	2400      	movne	r4, #0
 800f8b8:	2402      	moveq	r4, #2
 800f8ba:	f000 fb15 	bl	800fee8 <rmw_uxrce_fini_service_memory>
 800f8be:	e7d6      	b.n	800f86e <rmw_destroy_service+0x12>

0800f8c0 <rmw_create_subscription>:
 800f8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8c4:	b08a      	sub	sp, #40	; 0x28
 800f8c6:	2800      	cmp	r0, #0
 800f8c8:	f000 80db 	beq.w	800fa82 <rmw_create_subscription+0x1c2>
 800f8cc:	4688      	mov	r8, r1
 800f8ce:	2900      	cmp	r1, #0
 800f8d0:	f000 80d7 	beq.w	800fa82 <rmw_create_subscription+0x1c2>
 800f8d4:	4604      	mov	r4, r0
 800f8d6:	6800      	ldr	r0, [r0, #0]
 800f8d8:	4615      	mov	r5, r2
 800f8da:	461e      	mov	r6, r3
 800f8dc:	f000 fc8e 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 800f8e0:	2800      	cmp	r0, #0
 800f8e2:	f000 80ce 	beq.w	800fa82 <rmw_create_subscription+0x1c2>
 800f8e6:	2d00      	cmp	r5, #0
 800f8e8:	f000 80cb 	beq.w	800fa82 <rmw_create_subscription+0x1c2>
 800f8ec:	782b      	ldrb	r3, [r5, #0]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	f000 80c7 	beq.w	800fa82 <rmw_create_subscription+0x1c2>
 800f8f4:	2e00      	cmp	r6, #0
 800f8f6:	f000 80c4 	beq.w	800fa82 <rmw_create_subscription+0x1c2>
 800f8fa:	4864      	ldr	r0, [pc, #400]	; (800fa8c <rmw_create_subscription+0x1cc>)
 800f8fc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f900:	f007 fdb8 	bl	8017474 <get_memory>
 800f904:	4604      	mov	r4, r0
 800f906:	2800      	cmp	r0, #0
 800f908:	f000 80bc 	beq.w	800fa84 <rmw_create_subscription+0x1c4>
 800f90c:	68c7      	ldr	r7, [r0, #12]
 800f90e:	2300      	movs	r3, #0
 800f910:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f914:	f007 fe04 	bl	8017520 <rmw_get_implementation_identifier>
 800f918:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 800f91c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800f91e:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800f922:	4628      	mov	r0, r5
 800f924:	f7f0 fc5e 	bl	80001e4 <strlen>
 800f928:	3001      	adds	r0, #1
 800f92a:	283c      	cmp	r0, #60	; 0x3c
 800f92c:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800f930:	f200 80a4 	bhi.w	800fa7c <rmw_create_subscription+0x1bc>
 800f934:	4a56      	ldr	r2, [pc, #344]	; (800fa90 <rmw_create_subscription+0x1d0>)
 800f936:	462b      	mov	r3, r5
 800f938:	213c      	movs	r1, #60	; 0x3c
 800f93a:	4650      	mov	r0, sl
 800f93c:	f009 fde8 	bl	8019510 <sniprintf>
 800f940:	4631      	mov	r1, r6
 800f942:	f8c7 9020 	str.w	r9, [r7, #32]
 800f946:	2250      	movs	r2, #80	; 0x50
 800f948:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f94c:	f009 fa42 	bl	8018dd4 <memcpy>
 800f950:	4950      	ldr	r1, [pc, #320]	; (800fa94 <rmw_create_subscription+0x1d4>)
 800f952:	4640      	mov	r0, r8
 800f954:	f000 fc60 	bl	8010218 <get_message_typesupport_handle>
 800f958:	2800      	cmp	r0, #0
 800f95a:	f000 808f 	beq.w	800fa7c <rmw_create_subscription+0x1bc>
 800f95e:	6842      	ldr	r2, [r0, #4]
 800f960:	61ba      	str	r2, [r7, #24]
 800f962:	2a00      	cmp	r2, #0
 800f964:	f000 808a 	beq.w	800fa7c <rmw_create_subscription+0x1bc>
 800f968:	4629      	mov	r1, r5
 800f96a:	4633      	mov	r3, r6
 800f96c:	4648      	mov	r0, r9
 800f96e:	f007 fddd 	bl	801752c <create_topic>
 800f972:	61f8      	str	r0, [r7, #28]
 800f974:	2800      	cmp	r0, #0
 800f976:	f000 8081 	beq.w	800fa7c <rmw_create_subscription+0x1bc>
 800f97a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f97e:	f241 539c 	movw	r3, #5532	; 0x159c
 800f982:	2104      	movs	r1, #4
 800f984:	5ad0      	ldrh	r0, [r2, r3]
 800f986:	1c45      	adds	r5, r0, #1
 800f988:	52d5      	strh	r5, [r2, r3]
 800f98a:	f002 fa81 	bl	8011e90 <uxr_object_id>
 800f98e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f992:	6138      	str	r0, [r7, #16]
 800f994:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800f998:	f04f 0806 	mov.w	r8, #6
 800f99c:	f8cd 8000 	str.w	r8, [sp]
 800f9a0:	6811      	ldr	r1, [r2, #0]
 800f9a2:	693a      	ldr	r2, [r7, #16]
 800f9a4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800f9a8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f9ac:	f002 f882 	bl	8011ab4 <uxr_buffer_create_subscriber_bin>
 800f9b0:	4602      	mov	r2, r0
 800f9b2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f9b6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f9ba:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f9be:	f000 fbb3 	bl	8010128 <run_xrce_session>
 800f9c2:	2800      	cmp	r0, #0
 800f9c4:	d056      	beq.n	800fa74 <rmw_create_subscription+0x1b4>
 800f9c6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f9ca:	f241 539e 	movw	r3, #5534	; 0x159e
 800f9ce:	4641      	mov	r1, r8
 800f9d0:	5ad0      	ldrh	r0, [r2, r3]
 800f9d2:	1c45      	adds	r5, r0, #1
 800f9d4:	52d5      	strh	r5, [r2, r3]
 800f9d6:	f002 fa5b 	bl	8011e90 <uxr_object_id>
 800f9da:	6178      	str	r0, [r7, #20]
 800f9dc:	7a71      	ldrb	r1, [r6, #9]
 800f9de:	7832      	ldrb	r2, [r6, #0]
 800f9e0:	7a33      	ldrb	r3, [r6, #8]
 800f9e2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f9e6:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 800f9ea:	f8d0 5384 	ldr.w	r5, [r0, #900]	; 0x384
 800f9ee:	f8cd 8014 	str.w	r8, [sp, #20]
 800f9f2:	3902      	subs	r1, #2
 800f9f4:	f1a2 0201 	sub.w	r2, r2, #1
 800f9f8:	bf18      	it	ne
 800f9fa:	2101      	movne	r1, #1
 800f9fc:	fab2 f282 	clz	r2, r2
 800fa00:	2b01      	cmp	r3, #1
 800fa02:	bf8c      	ite	hi
 800fa04:	2300      	movhi	r3, #0
 800fa06:	2301      	movls	r3, #1
 800fa08:	0952      	lsrs	r2, r2, #5
 800fa0a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fa0e:	9104      	str	r1, [sp, #16]
 800fa10:	f8cd c00c 	str.w	ip, [sp, #12]
 800fa14:	69fb      	ldr	r3, [r7, #28]
 800fa16:	691b      	ldr	r3, [r3, #16]
 800fa18:	9300      	str	r3, [sp, #0]
 800fa1a:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800fa1e:	6829      	ldr	r1, [r5, #0]
 800fa20:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fa24:	f002 f8f4 	bl	8011c10 <uxr_buffer_create_datareader_bin>
 800fa28:	4602      	mov	r2, r0
 800fa2a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fa2e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800fa32:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800fa36:	f000 fb77 	bl	8010128 <run_xrce_session>
 800fa3a:	b1d8      	cbz	r0, 800fa74 <rmw_create_subscription+0x1b4>
 800fa3c:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800fa40:	7a33      	ldrb	r3, [r6, #8]
 800fa42:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fa46:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	e9cd 1208 	strd	r1, r2, [sp, #32]
 800fa50:	2b02      	cmp	r3, #2
 800fa52:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800fa56:	bf0c      	ite	eq
 800fa58:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800fa5c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800fa60:	9307      	str	r3, [sp, #28]
 800fa62:	aa08      	add	r2, sp, #32
 800fa64:	9200      	str	r2, [sp, #0]
 800fa66:	697a      	ldr	r2, [r7, #20]
 800fa68:	6809      	ldr	r1, [r1, #0]
 800fa6a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fa6e:	f002 fa3d 	bl	8011eec <uxr_buffer_request_data>
 800fa72:	e007      	b.n	800fa84 <rmw_create_subscription+0x1c4>
 800fa74:	4805      	ldr	r0, [pc, #20]	; (800fa8c <rmw_create_subscription+0x1cc>)
 800fa76:	4639      	mov	r1, r7
 800fa78:	f007 fd0c 	bl	8017494 <put_memory>
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	f000 fa1f 	bl	800fec0 <rmw_uxrce_fini_subscription_memory>
 800fa82:	2400      	movs	r4, #0
 800fa84:	4620      	mov	r0, r4
 800fa86:	b00a      	add	sp, #40	; 0x28
 800fa88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa8c:	200148dc 	.word	0x200148dc
 800fa90:	0801e290 	.word	0x0801e290
 800fa94:	0801e25c 	.word	0x0801e25c

0800fa98 <rmw_subscription_get_actual_qos>:
 800fa98:	2000      	movs	r0, #0
 800fa9a:	4770      	bx	lr

0800fa9c <rmw_destroy_subscription>:
 800fa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa9e:	b128      	cbz	r0, 800faac <rmw_destroy_subscription+0x10>
 800faa0:	4604      	mov	r4, r0
 800faa2:	6800      	ldr	r0, [r0, #0]
 800faa4:	460d      	mov	r5, r1
 800faa6:	f000 fba9 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 800faaa:	b910      	cbnz	r0, 800fab2 <rmw_destroy_subscription+0x16>
 800faac:	2401      	movs	r4, #1
 800faae:	4620      	mov	r0, r4
 800fab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fab2:	6863      	ldr	r3, [r4, #4]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d0f9      	beq.n	800faac <rmw_destroy_subscription+0x10>
 800fab8:	2d00      	cmp	r5, #0
 800faba:	d0f7      	beq.n	800faac <rmw_destroy_subscription+0x10>
 800fabc:	6828      	ldr	r0, [r5, #0]
 800fabe:	f000 fb9d 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 800fac2:	2800      	cmp	r0, #0
 800fac4:	d0f2      	beq.n	800faac <rmw_destroy_subscription+0x10>
 800fac6:	686c      	ldr	r4, [r5, #4]
 800fac8:	2c00      	cmp	r4, #0
 800faca:	d0ef      	beq.n	800faac <rmw_destroy_subscription+0x10>
 800facc:	e9d4 0707 	ldrd	r0, r7, [r4, #28]
 800fad0:	f007 fd7c 	bl	80175cc <destroy_topic>
 800fad4:	6a23      	ldr	r3, [r4, #32]
 800fad6:	6962      	ldr	r2, [r4, #20]
 800fad8:	6918      	ldr	r0, [r3, #16]
 800fada:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800fade:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fae2:	6819      	ldr	r1, [r3, #0]
 800fae4:	f001 ff06 	bl	80118f4 <uxr_buffer_delete_entity>
 800fae8:	6a21      	ldr	r1, [r4, #32]
 800faea:	6922      	ldr	r2, [r4, #16]
 800faec:	4603      	mov	r3, r0
 800faee:	6908      	ldr	r0, [r1, #16]
 800faf0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800faf4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800faf8:	6809      	ldr	r1, [r1, #0]
 800fafa:	461c      	mov	r4, r3
 800fafc:	f001 fefa 	bl	80118f4 <uxr_buffer_delete_entity>
 800fb00:	4606      	mov	r6, r0
 800fb02:	6938      	ldr	r0, [r7, #16]
 800fb04:	4622      	mov	r2, r4
 800fb06:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800fb0a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800fb0e:	f000 fb0b 	bl	8010128 <run_xrce_session>
 800fb12:	4604      	mov	r4, r0
 800fb14:	6938      	ldr	r0, [r7, #16]
 800fb16:	4632      	mov	r2, r6
 800fb18:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800fb1c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800fb20:	f000 fb02 	bl	8010128 <run_xrce_session>
 800fb24:	b12c      	cbz	r4, 800fb32 <rmw_destroy_subscription+0x96>
 800fb26:	b120      	cbz	r0, 800fb32 <rmw_destroy_subscription+0x96>
 800fb28:	2400      	movs	r4, #0
 800fb2a:	4628      	mov	r0, r5
 800fb2c:	f000 f9c8 	bl	800fec0 <rmw_uxrce_fini_subscription_memory>
 800fb30:	e7bd      	b.n	800faae <rmw_destroy_subscription+0x12>
 800fb32:	2402      	movs	r4, #2
 800fb34:	e7f9      	b.n	800fb2a <rmw_destroy_subscription+0x8e>
 800fb36:	bf00      	nop

0800fb38 <rmw_take_with_info>:
 800fb38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb3a:	4605      	mov	r5, r0
 800fb3c:	b089      	sub	sp, #36	; 0x24
 800fb3e:	460f      	mov	r7, r1
 800fb40:	4614      	mov	r4, r2
 800fb42:	b10a      	cbz	r2, 800fb48 <rmw_take_with_info+0x10>
 800fb44:	2300      	movs	r3, #0
 800fb46:	7013      	strb	r3, [r2, #0]
 800fb48:	6828      	ldr	r0, [r5, #0]
 800fb4a:	f000 fb57 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 800fb4e:	b910      	cbnz	r0, 800fb56 <rmw_take_with_info+0x1e>
 800fb50:	2001      	movs	r0, #1
 800fb52:	b009      	add	sp, #36	; 0x24
 800fb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb56:	686d      	ldr	r5, [r5, #4]
 800fb58:	f000 fa6e 	bl	8010038 <rmw_uxrce_clean_expired_static_input_buffer>
 800fb5c:	4628      	mov	r0, r5
 800fb5e:	f000 fa43 	bl	800ffe8 <rmw_uxrce_find_static_input_buffer_by_owner>
 800fb62:	4606      	mov	r6, r0
 800fb64:	2800      	cmp	r0, #0
 800fb66:	d0f3      	beq.n	800fb50 <rmw_take_with_info+0x18>
 800fb68:	68c1      	ldr	r1, [r0, #12]
 800fb6a:	4668      	mov	r0, sp
 800fb6c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800fb70:	3110      	adds	r1, #16
 800fb72:	f001 fde1 	bl	8011738 <ucdr_init_buffer>
 800fb76:	69ab      	ldr	r3, [r5, #24]
 800fb78:	4639      	mov	r1, r7
 800fb7a:	68db      	ldr	r3, [r3, #12]
 800fb7c:	4668      	mov	r0, sp
 800fb7e:	4798      	blx	r3
 800fb80:	4631      	mov	r1, r6
 800fb82:	4605      	mov	r5, r0
 800fb84:	4804      	ldr	r0, [pc, #16]	; (800fb98 <rmw_take_with_info+0x60>)
 800fb86:	f007 fc85 	bl	8017494 <put_memory>
 800fb8a:	b104      	cbz	r4, 800fb8e <rmw_take_with_info+0x56>
 800fb8c:	7025      	strb	r5, [r4, #0]
 800fb8e:	f085 0001 	eor.w	r0, r5, #1
 800fb92:	b2c0      	uxtb	r0, r0
 800fb94:	b009      	add	sp, #36	; 0x24
 800fb96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb98:	20011670 	.word	0x20011670

0800fb9c <rmw_uxrce_transport_init>:
 800fb9c:	b508      	push	{r3, lr}
 800fb9e:	b108      	cbz	r0, 800fba4 <rmw_uxrce_transport_init+0x8>
 800fba0:	f100 0210 	add.w	r2, r0, #16
 800fba4:	b139      	cbz	r1, 800fbb6 <rmw_uxrce_transport_init+0x1a>
 800fba6:	6949      	ldr	r1, [r1, #20]
 800fba8:	4610      	mov	r0, r2
 800fbaa:	f002 f939 	bl	8011e20 <uxr_init_custom_transport>
 800fbae:	f080 0001 	eor.w	r0, r0, #1
 800fbb2:	b2c0      	uxtb	r0, r0
 800fbb4:	bd08      	pop	{r3, pc}
 800fbb6:	4b04      	ldr	r3, [pc, #16]	; (800fbc8 <rmw_uxrce_transport_init+0x2c>)
 800fbb8:	4610      	mov	r0, r2
 800fbba:	6859      	ldr	r1, [r3, #4]
 800fbbc:	f002 f930 	bl	8011e20 <uxr_init_custom_transport>
 800fbc0:	f080 0001 	eor.w	r0, r0, #1
 800fbc4:	b2c0      	uxtb	r0, r0
 800fbc6:	bd08      	pop	{r3, pc}
 800fbc8:	20011650 	.word	0x20011650

0800fbcc <rmw_uros_epoch_nanos>:
 800fbcc:	4b05      	ldr	r3, [pc, #20]	; (800fbe4 <rmw_uros_epoch_nanos+0x18>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	b123      	cbz	r3, 800fbdc <rmw_uros_epoch_nanos+0x10>
 800fbd2:	68d8      	ldr	r0, [r3, #12]
 800fbd4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fbd8:	f002 bee6 	b.w	80129a8 <uxr_epoch_nanos>
 800fbdc:	2000      	movs	r0, #0
 800fbde:	2100      	movs	r1, #0
 800fbe0:	4770      	bx	lr
 800fbe2:	bf00      	nop
 800fbe4:	20014818 	.word	0x20014818

0800fbe8 <rmw_uros_sync_session>:
 800fbe8:	b508      	push	{r3, lr}
 800fbea:	4b07      	ldr	r3, [pc, #28]	; (800fc08 <rmw_uros_sync_session+0x20>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	b14b      	cbz	r3, 800fc04 <rmw_uros_sync_session+0x1c>
 800fbf0:	4601      	mov	r1, r0
 800fbf2:	68d8      	ldr	r0, [r3, #12]
 800fbf4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fbf8:	f002 fe86 	bl	8012908 <uxr_sync_session>
 800fbfc:	f080 0001 	eor.w	r0, r0, #1
 800fc00:	b2c0      	uxtb	r0, r0
 800fc02:	bd08      	pop	{r3, pc}
 800fc04:	2001      	movs	r0, #1
 800fc06:	bd08      	pop	{r3, pc}
 800fc08:	20014818 	.word	0x20014818

0800fc0c <rmw_uxrce_init_service_memory>:
 800fc0c:	b1b2      	cbz	r2, 800fc3c <rmw_uxrce_init_service_memory+0x30>
 800fc0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc10:	7a07      	ldrb	r7, [r0, #8]
 800fc12:	4605      	mov	r5, r0
 800fc14:	b98f      	cbnz	r7, 800fc3a <rmw_uxrce_init_service_memory+0x2e>
 800fc16:	e9c0 7700 	strd	r7, r7, [r0]
 800fc1a:	460c      	mov	r4, r1
 800fc1c:	23c8      	movs	r3, #200	; 0xc8
 800fc1e:	2101      	movs	r1, #1
 800fc20:	fb03 4602 	mla	r6, r3, r2, r4
 800fc24:	60c3      	str	r3, [r0, #12]
 800fc26:	7201      	strb	r1, [r0, #8]
 800fc28:	4621      	mov	r1, r4
 800fc2a:	4628      	mov	r0, r5
 800fc2c:	f007 fc32 	bl	8017494 <put_memory>
 800fc30:	60e4      	str	r4, [r4, #12]
 800fc32:	f804 7bc8 	strb.w	r7, [r4], #200
 800fc36:	42a6      	cmp	r6, r4
 800fc38:	d1f6      	bne.n	800fc28 <rmw_uxrce_init_service_memory+0x1c>
 800fc3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop

0800fc40 <rmw_uxrce_init_client_memory>:
 800fc40:	b1b2      	cbz	r2, 800fc70 <rmw_uxrce_init_client_memory+0x30>
 800fc42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc44:	7a07      	ldrb	r7, [r0, #8]
 800fc46:	4605      	mov	r5, r0
 800fc48:	b98f      	cbnz	r7, 800fc6e <rmw_uxrce_init_client_memory+0x2e>
 800fc4a:	e9c0 7700 	strd	r7, r7, [r0]
 800fc4e:	460c      	mov	r4, r1
 800fc50:	23c8      	movs	r3, #200	; 0xc8
 800fc52:	2101      	movs	r1, #1
 800fc54:	fb03 4602 	mla	r6, r3, r2, r4
 800fc58:	60c3      	str	r3, [r0, #12]
 800fc5a:	7201      	strb	r1, [r0, #8]
 800fc5c:	4621      	mov	r1, r4
 800fc5e:	4628      	mov	r0, r5
 800fc60:	f007 fc18 	bl	8017494 <put_memory>
 800fc64:	60e4      	str	r4, [r4, #12]
 800fc66:	f804 7bc8 	strb.w	r7, [r4], #200
 800fc6a:	42a6      	cmp	r6, r4
 800fc6c:	d1f6      	bne.n	800fc5c <rmw_uxrce_init_client_memory+0x1c>
 800fc6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc70:	4770      	bx	lr
 800fc72:	bf00      	nop

0800fc74 <rmw_uxrce_init_publisher_memory>:
 800fc74:	b1b2      	cbz	r2, 800fca4 <rmw_uxrce_init_publisher_memory+0x30>
 800fc76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc78:	7a07      	ldrb	r7, [r0, #8]
 800fc7a:	4605      	mov	r5, r0
 800fc7c:	b98f      	cbnz	r7, 800fca2 <rmw_uxrce_init_publisher_memory+0x2e>
 800fc7e:	e9c0 7700 	strd	r7, r7, [r0]
 800fc82:	460c      	mov	r4, r1
 800fc84:	23d8      	movs	r3, #216	; 0xd8
 800fc86:	2101      	movs	r1, #1
 800fc88:	fb03 4602 	mla	r6, r3, r2, r4
 800fc8c:	60c3      	str	r3, [r0, #12]
 800fc8e:	7201      	strb	r1, [r0, #8]
 800fc90:	4621      	mov	r1, r4
 800fc92:	4628      	mov	r0, r5
 800fc94:	f007 fbfe 	bl	8017494 <put_memory>
 800fc98:	60e4      	str	r4, [r4, #12]
 800fc9a:	f804 7bd8 	strb.w	r7, [r4], #216
 800fc9e:	42a6      	cmp	r6, r4
 800fca0:	d1f6      	bne.n	800fc90 <rmw_uxrce_init_publisher_memory+0x1c>
 800fca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fca4:	4770      	bx	lr
 800fca6:	bf00      	nop

0800fca8 <rmw_uxrce_init_subscription_memory>:
 800fca8:	b1b2      	cbz	r2, 800fcd8 <rmw_uxrce_init_subscription_memory+0x30>
 800fcaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcac:	7a07      	ldrb	r7, [r0, #8]
 800fcae:	4605      	mov	r5, r0
 800fcb0:	b98f      	cbnz	r7, 800fcd6 <rmw_uxrce_init_subscription_memory+0x2e>
 800fcb2:	e9c0 7700 	strd	r7, r7, [r0]
 800fcb6:	460c      	mov	r4, r1
 800fcb8:	23d0      	movs	r3, #208	; 0xd0
 800fcba:	2101      	movs	r1, #1
 800fcbc:	fb03 4602 	mla	r6, r3, r2, r4
 800fcc0:	60c3      	str	r3, [r0, #12]
 800fcc2:	7201      	strb	r1, [r0, #8]
 800fcc4:	4621      	mov	r1, r4
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	f007 fbe4 	bl	8017494 <put_memory>
 800fccc:	60e4      	str	r4, [r4, #12]
 800fcce:	f804 7bd0 	strb.w	r7, [r4], #208
 800fcd2:	42a6      	cmp	r6, r4
 800fcd4:	d1f6      	bne.n	800fcc4 <rmw_uxrce_init_subscription_memory+0x1c>
 800fcd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcd8:	4770      	bx	lr
 800fcda:	bf00      	nop

0800fcdc <rmw_uxrce_init_node_memory>:
 800fcdc:	b1b2      	cbz	r2, 800fd0c <rmw_uxrce_init_node_memory+0x30>
 800fcde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fce0:	7a07      	ldrb	r7, [r0, #8]
 800fce2:	4605      	mov	r5, r0
 800fce4:	b98f      	cbnz	r7, 800fd0a <rmw_uxrce_init_node_memory+0x2e>
 800fce6:	e9c0 7700 	strd	r7, r7, [r0]
 800fcea:	460c      	mov	r4, r1
 800fcec:	23a4      	movs	r3, #164	; 0xa4
 800fcee:	2101      	movs	r1, #1
 800fcf0:	fb03 4602 	mla	r6, r3, r2, r4
 800fcf4:	60c3      	str	r3, [r0, #12]
 800fcf6:	7201      	strb	r1, [r0, #8]
 800fcf8:	4621      	mov	r1, r4
 800fcfa:	4628      	mov	r0, r5
 800fcfc:	f007 fbca 	bl	8017494 <put_memory>
 800fd00:	60e4      	str	r4, [r4, #12]
 800fd02:	f804 7ba4 	strb.w	r7, [r4], #164
 800fd06:	42a6      	cmp	r6, r4
 800fd08:	d1f6      	bne.n	800fcf8 <rmw_uxrce_init_node_memory+0x1c>
 800fd0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd0c:	4770      	bx	lr
 800fd0e:	bf00      	nop

0800fd10 <rmw_uxrce_init_session_memory>:
 800fd10:	b1d2      	cbz	r2, 800fd48 <rmw_uxrce_init_session_memory+0x38>
 800fd12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd16:	7a07      	ldrb	r7, [r0, #8]
 800fd18:	4605      	mov	r5, r0
 800fd1a:	b99f      	cbnz	r7, 800fd44 <rmw_uxrce_init_session_memory+0x34>
 800fd1c:	e9c0 7700 	strd	r7, r7, [r0]
 800fd20:	f241 53a8 	movw	r3, #5544	; 0x15a8
 800fd24:	460c      	mov	r4, r1
 800fd26:	2101      	movs	r1, #1
 800fd28:	fb03 4602 	mla	r6, r3, r2, r4
 800fd2c:	60c3      	str	r3, [r0, #12]
 800fd2e:	4698      	mov	r8, r3
 800fd30:	7201      	strb	r1, [r0, #8]
 800fd32:	4621      	mov	r1, r4
 800fd34:	4628      	mov	r0, r5
 800fd36:	f007 fbad 	bl	8017494 <put_memory>
 800fd3a:	60e4      	str	r4, [r4, #12]
 800fd3c:	7027      	strb	r7, [r4, #0]
 800fd3e:	4444      	add	r4, r8
 800fd40:	42a6      	cmp	r6, r4
 800fd42:	d1f6      	bne.n	800fd32 <rmw_uxrce_init_session_memory+0x22>
 800fd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd48:	4770      	bx	lr
 800fd4a:	bf00      	nop

0800fd4c <rmw_uxrce_init_topic_memory>:
 800fd4c:	b1c2      	cbz	r2, 800fd80 <rmw_uxrce_init_topic_memory+0x34>
 800fd4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd50:	7a07      	ldrb	r7, [r0, #8]
 800fd52:	4606      	mov	r6, r0
 800fd54:	b99f      	cbnz	r7, 800fd7e <rmw_uxrce_init_topic_memory+0x32>
 800fd56:	e9c0 7700 	strd	r7, r7, [r0]
 800fd5a:	460c      	mov	r4, r1
 800fd5c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800fd60:	2101      	movs	r1, #1
 800fd62:	231c      	movs	r3, #28
 800fd64:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fd68:	7201      	strb	r1, [r0, #8]
 800fd6a:	60c3      	str	r3, [r0, #12]
 800fd6c:	4621      	mov	r1, r4
 800fd6e:	4630      	mov	r0, r6
 800fd70:	f007 fb90 	bl	8017494 <put_memory>
 800fd74:	60e4      	str	r4, [r4, #12]
 800fd76:	f804 7b1c 	strb.w	r7, [r4], #28
 800fd7a:	42a5      	cmp	r5, r4
 800fd7c:	d1f6      	bne.n	800fd6c <rmw_uxrce_init_topic_memory+0x20>
 800fd7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop

0800fd84 <rmw_uxrce_init_static_input_buffer_memory>:
 800fd84:	b1d2      	cbz	r2, 800fdbc <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800fd86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd88:	7a07      	ldrb	r7, [r0, #8]
 800fd8a:	4606      	mov	r6, r0
 800fd8c:	b9af      	cbnz	r7, 800fdba <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800fd8e:	e9c0 7700 	strd	r7, r7, [r0]
 800fd92:	460c      	mov	r4, r1
 800fd94:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800fd98:	2101      	movs	r1, #1
 800fd9a:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800fd9e:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800fda2:	7201      	strb	r1, [r0, #8]
 800fda4:	60c3      	str	r3, [r0, #12]
 800fda6:	4621      	mov	r1, r4
 800fda8:	4630      	mov	r0, r6
 800fdaa:	f007 fb73 	bl	8017494 <put_memory>
 800fdae:	60e4      	str	r4, [r4, #12]
 800fdb0:	7027      	strb	r7, [r4, #0]
 800fdb2:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800fdb6:	42a5      	cmp	r5, r4
 800fdb8:	d1f5      	bne.n	800fda6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800fdba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdbc:	4770      	bx	lr
 800fdbe:	bf00      	nop

0800fdc0 <rmw_uxrce_init_init_options_impl_memory>:
 800fdc0:	b1b2      	cbz	r2, 800fdf0 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800fdc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdc4:	7a07      	ldrb	r7, [r0, #8]
 800fdc6:	4605      	mov	r5, r0
 800fdc8:	b98f      	cbnz	r7, 800fdee <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800fdca:	e9c0 7700 	strd	r7, r7, [r0]
 800fdce:	460c      	mov	r4, r1
 800fdd0:	232c      	movs	r3, #44	; 0x2c
 800fdd2:	2101      	movs	r1, #1
 800fdd4:	fb03 4602 	mla	r6, r3, r2, r4
 800fdd8:	60c3      	str	r3, [r0, #12]
 800fdda:	7201      	strb	r1, [r0, #8]
 800fddc:	4621      	mov	r1, r4
 800fdde:	4628      	mov	r0, r5
 800fde0:	f007 fb58 	bl	8017494 <put_memory>
 800fde4:	60e4      	str	r4, [r4, #12]
 800fde6:	f804 7b2c 	strb.w	r7, [r4], #44
 800fdea:	42a6      	cmp	r6, r4
 800fdec:	d1f6      	bne.n	800fddc <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800fdee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdf0:	4770      	bx	lr
 800fdf2:	bf00      	nop

0800fdf4 <rmw_uxrce_init_wait_set_memory>:
 800fdf4:	b1c2      	cbz	r2, 800fe28 <rmw_uxrce_init_wait_set_memory+0x34>
 800fdf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdf8:	7a07      	ldrb	r7, [r0, #8]
 800fdfa:	4606      	mov	r6, r0
 800fdfc:	b99f      	cbnz	r7, 800fe26 <rmw_uxrce_init_wait_set_memory+0x32>
 800fdfe:	e9c0 7700 	strd	r7, r7, [r0]
 800fe02:	460c      	mov	r4, r1
 800fe04:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800fe08:	2101      	movs	r1, #1
 800fe0a:	231c      	movs	r3, #28
 800fe0c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fe10:	7201      	strb	r1, [r0, #8]
 800fe12:	60c3      	str	r3, [r0, #12]
 800fe14:	4621      	mov	r1, r4
 800fe16:	4630      	mov	r0, r6
 800fe18:	f007 fb3c 	bl	8017494 <put_memory>
 800fe1c:	60e4      	str	r4, [r4, #12]
 800fe1e:	f804 7b1c 	strb.w	r7, [r4], #28
 800fe22:	42a5      	cmp	r5, r4
 800fe24:	d1f6      	bne.n	800fe14 <rmw_uxrce_init_wait_set_memory+0x20>
 800fe26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe28:	4770      	bx	lr
 800fe2a:	bf00      	nop

0800fe2c <rmw_uxrce_init_guard_condition_memory>:
 800fe2c:	b1b2      	cbz	r2, 800fe5c <rmw_uxrce_init_guard_condition_memory+0x30>
 800fe2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe30:	7a07      	ldrb	r7, [r0, #8]
 800fe32:	4605      	mov	r5, r0
 800fe34:	b98f      	cbnz	r7, 800fe5a <rmw_uxrce_init_guard_condition_memory+0x2e>
 800fe36:	e9c0 7700 	strd	r7, r7, [r0]
 800fe3a:	460c      	mov	r4, r1
 800fe3c:	2320      	movs	r3, #32
 800fe3e:	2101      	movs	r1, #1
 800fe40:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800fe44:	7201      	strb	r1, [r0, #8]
 800fe46:	60c3      	str	r3, [r0, #12]
 800fe48:	4621      	mov	r1, r4
 800fe4a:	4628      	mov	r0, r5
 800fe4c:	f007 fb22 	bl	8017494 <put_memory>
 800fe50:	60e4      	str	r4, [r4, #12]
 800fe52:	f804 7b20 	strb.w	r7, [r4], #32
 800fe56:	42a6      	cmp	r6, r4
 800fe58:	d1f6      	bne.n	800fe48 <rmw_uxrce_init_guard_condition_memory+0x1c>
 800fe5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe5c:	4770      	bx	lr
 800fe5e:	bf00      	nop

0800fe60 <rmw_uxrce_fini_session_memory>:
 800fe60:	4601      	mov	r1, r0
 800fe62:	4801      	ldr	r0, [pc, #4]	; (800fe68 <rmw_uxrce_fini_session_memory+0x8>)
 800fe64:	f007 bb16 	b.w	8017494 <put_memory>
 800fe68:	20014818 	.word	0x20014818

0800fe6c <rmw_uxrce_fini_node_memory>:
 800fe6c:	b538      	push	{r3, r4, r5, lr}
 800fe6e:	4604      	mov	r4, r0
 800fe70:	6800      	ldr	r0, [r0, #0]
 800fe72:	f000 f9c3 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 800fe76:	b158      	cbz	r0, 800fe90 <rmw_uxrce_fini_node_memory+0x24>
 800fe78:	6823      	ldr	r3, [r4, #0]
 800fe7a:	b10b      	cbz	r3, 800fe80 <rmw_uxrce_fini_node_memory+0x14>
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	6023      	str	r3, [r4, #0]
 800fe80:	6861      	ldr	r1, [r4, #4]
 800fe82:	b129      	cbz	r1, 800fe90 <rmw_uxrce_fini_node_memory+0x24>
 800fe84:	2500      	movs	r5, #0
 800fe86:	4803      	ldr	r0, [pc, #12]	; (800fe94 <rmw_uxrce_fini_node_memory+0x28>)
 800fe88:	610d      	str	r5, [r1, #16]
 800fe8a:	f007 fb03 	bl	8017494 <put_memory>
 800fe8e:	6065      	str	r5, [r4, #4]
 800fe90:	bd38      	pop	{r3, r4, r5, pc}
 800fe92:	bf00      	nop
 800fe94:	20014644 	.word	0x20014644

0800fe98 <rmw_uxrce_fini_publisher_memory>:
 800fe98:	b510      	push	{r4, lr}
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	6800      	ldr	r0, [r0, #0]
 800fe9e:	f000 f9ad 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 800fea2:	b150      	cbz	r0, 800feba <rmw_uxrce_fini_publisher_memory+0x22>
 800fea4:	6823      	ldr	r3, [r4, #0]
 800fea6:	b10b      	cbz	r3, 800feac <rmw_uxrce_fini_publisher_memory+0x14>
 800fea8:	2300      	movs	r3, #0
 800feaa:	6023      	str	r3, [r4, #0]
 800feac:	6861      	ldr	r1, [r4, #4]
 800feae:	b121      	cbz	r1, 800feba <rmw_uxrce_fini_publisher_memory+0x22>
 800feb0:	4802      	ldr	r0, [pc, #8]	; (800febc <rmw_uxrce_fini_publisher_memory+0x24>)
 800feb2:	f007 faef 	bl	8017494 <put_memory>
 800feb6:	2300      	movs	r3, #0
 800feb8:	6063      	str	r3, [r4, #4]
 800feba:	bd10      	pop	{r4, pc}
 800febc:	20011680 	.word	0x20011680

0800fec0 <rmw_uxrce_fini_subscription_memory>:
 800fec0:	b510      	push	{r4, lr}
 800fec2:	4604      	mov	r4, r0
 800fec4:	6800      	ldr	r0, [r0, #0]
 800fec6:	f000 f999 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 800feca:	b150      	cbz	r0, 800fee2 <rmw_uxrce_fini_subscription_memory+0x22>
 800fecc:	6823      	ldr	r3, [r4, #0]
 800fece:	b10b      	cbz	r3, 800fed4 <rmw_uxrce_fini_subscription_memory+0x14>
 800fed0:	2300      	movs	r3, #0
 800fed2:	6023      	str	r3, [r4, #0]
 800fed4:	6861      	ldr	r1, [r4, #4]
 800fed6:	b121      	cbz	r1, 800fee2 <rmw_uxrce_fini_subscription_memory+0x22>
 800fed8:	4802      	ldr	r0, [pc, #8]	; (800fee4 <rmw_uxrce_fini_subscription_memory+0x24>)
 800feda:	f007 fadb 	bl	8017494 <put_memory>
 800fede:	2300      	movs	r3, #0
 800fee0:	6063      	str	r3, [r4, #4]
 800fee2:	bd10      	pop	{r4, pc}
 800fee4:	200148dc 	.word	0x200148dc

0800fee8 <rmw_uxrce_fini_service_memory>:
 800fee8:	b510      	push	{r4, lr}
 800feea:	4604      	mov	r4, r0
 800feec:	6800      	ldr	r0, [r0, #0]
 800feee:	f000 f985 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 800fef2:	b150      	cbz	r0, 800ff0a <rmw_uxrce_fini_service_memory+0x22>
 800fef4:	6823      	ldr	r3, [r4, #0]
 800fef6:	b10b      	cbz	r3, 800fefc <rmw_uxrce_fini_service_memory+0x14>
 800fef8:	2300      	movs	r3, #0
 800fefa:	6023      	str	r3, [r4, #0]
 800fefc:	6861      	ldr	r1, [r4, #4]
 800fefe:	b121      	cbz	r1, 800ff0a <rmw_uxrce_fini_service_memory+0x22>
 800ff00:	4802      	ldr	r0, [pc, #8]	; (800ff0c <rmw_uxrce_fini_service_memory+0x24>)
 800ff02:	f007 fac7 	bl	8017494 <put_memory>
 800ff06:	2300      	movs	r3, #0
 800ff08:	6063      	str	r3, [r4, #4]
 800ff0a:	bd10      	pop	{r4, pc}
 800ff0c:	200148cc 	.word	0x200148cc

0800ff10 <rmw_uxrce_fini_client_memory>:
 800ff10:	b510      	push	{r4, lr}
 800ff12:	4604      	mov	r4, r0
 800ff14:	6800      	ldr	r0, [r0, #0]
 800ff16:	f000 f971 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 800ff1a:	b150      	cbz	r0, 800ff32 <rmw_uxrce_fini_client_memory+0x22>
 800ff1c:	6823      	ldr	r3, [r4, #0]
 800ff1e:	b10b      	cbz	r3, 800ff24 <rmw_uxrce_fini_client_memory+0x14>
 800ff20:	2300      	movs	r3, #0
 800ff22:	6023      	str	r3, [r4, #0]
 800ff24:	6861      	ldr	r1, [r4, #4]
 800ff26:	b121      	cbz	r1, 800ff32 <rmw_uxrce_fini_client_memory+0x22>
 800ff28:	4802      	ldr	r0, [pc, #8]	; (800ff34 <rmw_uxrce_fini_client_memory+0x24>)
 800ff2a:	f007 fab3 	bl	8017494 <put_memory>
 800ff2e:	2300      	movs	r3, #0
 800ff30:	6063      	str	r3, [r4, #4]
 800ff32:	bd10      	pop	{r4, pc}
 800ff34:	20011f00 	.word	0x20011f00

0800ff38 <rmw_uxrce_fini_topic_memory>:
 800ff38:	b510      	push	{r4, lr}
 800ff3a:	4601      	mov	r1, r0
 800ff3c:	4604      	mov	r4, r0
 800ff3e:	4803      	ldr	r0, [pc, #12]	; (800ff4c <rmw_uxrce_fini_topic_memory+0x14>)
 800ff40:	f007 faa8 	bl	8017494 <put_memory>
 800ff44:	2300      	movs	r3, #0
 800ff46:	61a3      	str	r3, [r4, #24]
 800ff48:	bd10      	pop	{r4, pc}
 800ff4a:	bf00      	nop
 800ff4c:	20014808 	.word	0x20014808

0800ff50 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ff50:	b082      	sub	sp, #8
 800ff52:	b4f0      	push	{r4, r5, r6, r7}
 800ff54:	4923      	ldr	r1, [pc, #140]	; (800ffe4 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800ff56:	ac04      	add	r4, sp, #16
 800ff58:	e884 000c 	stmia.w	r4, {r2, r3}
 800ff5c:	680d      	ldr	r5, [r1, #0]
 800ff5e:	9c05      	ldr	r4, [sp, #20]
 800ff60:	2d00      	cmp	r5, #0
 800ff62:	d03d      	beq.n	800ffe0 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800ff64:	462b      	mov	r3, r5
 800ff66:	2100      	movs	r1, #0
 800ff68:	68da      	ldr	r2, [r3, #12]
 800ff6a:	689b      	ldr	r3, [r3, #8]
 800ff6c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800ff70:	4290      	cmp	r0, r2
 800ff72:	bf08      	it	eq
 800ff74:	3101      	addeq	r1, #1
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d1f6      	bne.n	800ff68 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800ff7a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ff7e:	2b02      	cmp	r3, #2
 800ff80:	d026      	beq.n	800ffd0 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800ff82:	d906      	bls.n	800ff92 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800ff84:	2b03      	cmp	r3, #3
 800ff86:	d004      	beq.n	800ff92 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800ff88:	2100      	movs	r1, #0
 800ff8a:	bcf0      	pop	{r4, r5, r6, r7}
 800ff8c:	4608      	mov	r0, r1
 800ff8e:	b002      	add	sp, #8
 800ff90:	4770      	bx	lr
 800ff92:	b304      	cbz	r4, 800ffd6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ff94:	428c      	cmp	r4, r1
 800ff96:	d81e      	bhi.n	800ffd6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ff98:	2d00      	cmp	r5, #0
 800ff9a:	d0f5      	beq.n	800ff88 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ff9c:	2100      	movs	r1, #0
 800ff9e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800ffa2:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800ffa6:	e002      	b.n	800ffae <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800ffa8:	68ad      	ldr	r5, [r5, #8]
 800ffaa:	2d00      	cmp	r5, #0
 800ffac:	d0ed      	beq.n	800ff8a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ffae:	68eb      	ldr	r3, [r5, #12]
 800ffb0:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800ffb4:	4290      	cmp	r0, r2
 800ffb6:	d1f7      	bne.n	800ffa8 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800ffb8:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800ffbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc0:	42b2      	cmp	r2, r6
 800ffc2:	eb73 0407 	sbcs.w	r4, r3, r7
 800ffc6:	daef      	bge.n	800ffa8 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800ffc8:	4616      	mov	r6, r2
 800ffca:	461f      	mov	r7, r3
 800ffcc:	4629      	mov	r1, r5
 800ffce:	e7eb      	b.n	800ffa8 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800ffd0:	b10c      	cbz	r4, 800ffd6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ffd2:	428c      	cmp	r4, r1
 800ffd4:	d9d8      	bls.n	800ff88 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ffd6:	bcf0      	pop	{r4, r5, r6, r7}
 800ffd8:	4802      	ldr	r0, [pc, #8]	; (800ffe4 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800ffda:	b002      	add	sp, #8
 800ffdc:	f007 ba4a 	b.w	8017474 <get_memory>
 800ffe0:	4629      	mov	r1, r5
 800ffe2:	e7ca      	b.n	800ff7a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800ffe4:	20011670 	.word	0x20011670

0800ffe8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800ffe8:	4b12      	ldr	r3, [pc, #72]	; (8010034 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	b1fb      	cbz	r3, 801002e <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800ffee:	b4f0      	push	{r4, r5, r6, r7}
 800fff0:	f04f 0c00 	mov.w	ip, #0
 800fff4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fff8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800fffc:	e001      	b.n	8010002 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800fffe:	689b      	ldr	r3, [r3, #8]
 8010000:	b193      	cbz	r3, 8010028 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 8010002:	68da      	ldr	r2, [r3, #12]
 8010004:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 8010008:	4288      	cmp	r0, r1
 801000a:	d1f8      	bne.n	800fffe <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 801000c:	f602 0218 	addw	r2, r2, #2072	; 0x818
 8010010:	e9d2 6700 	ldrd	r6, r7, [r2]
 8010014:	42a6      	cmp	r6, r4
 8010016:	eb77 0205 	sbcs.w	r2, r7, r5
 801001a:	daf0      	bge.n	800fffe <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 801001c:	469c      	mov	ip, r3
 801001e:	689b      	ldr	r3, [r3, #8]
 8010020:	4634      	mov	r4, r6
 8010022:	463d      	mov	r5, r7
 8010024:	2b00      	cmp	r3, #0
 8010026:	d1ec      	bne.n	8010002 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 8010028:	4660      	mov	r0, ip
 801002a:	bcf0      	pop	{r4, r5, r6, r7}
 801002c:	4770      	bx	lr
 801002e:	4618      	mov	r0, r3
 8010030:	4770      	bx	lr
 8010032:	bf00      	nop
 8010034:	20011670 	.word	0x20011670

08010038 <rmw_uxrce_clean_expired_static_input_buffer>:
 8010038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801003c:	4e38      	ldr	r6, [pc, #224]	; (8010120 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 801003e:	f8d6 8000 	ldr.w	r8, [r6]
 8010042:	b083      	sub	sp, #12
 8010044:	f7ff fdc2 	bl	800fbcc <rmw_uros_epoch_nanos>
 8010048:	f1b8 0f00 	cmp.w	r8, #0
 801004c:	d05f      	beq.n	801010e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 801004e:	46b1      	mov	r9, r6
 8010050:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8010054:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 8010058:	2b04      	cmp	r3, #4
 801005a:	4682      	mov	sl, r0
 801005c:	468b      	mov	fp, r1
 801005e:	d02d      	beq.n	80100bc <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8010060:	2b05      	cmp	r3, #5
 8010062:	d041      	beq.n	80100e8 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 8010064:	2b03      	cmp	r3, #3
 8010066:	d029      	beq.n	80100bc <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8010068:	2200      	movs	r2, #0
 801006a:	2300      	movs	r3, #0
 801006c:	e9cd 2300 	strd	r2, r3, [sp]
 8010070:	2001      	movs	r0, #1
 8010072:	2100      	movs	r1, #0
 8010074:	9b00      	ldr	r3, [sp, #0]
 8010076:	f606 0618 	addw	r6, r6, #2072	; 0x818
 801007a:	e9d6 6700 	ldrd	r6, r7, [r6]
 801007e:	18c2      	adds	r2, r0, r3
 8010080:	9b01      	ldr	r3, [sp, #4]
 8010082:	eb41 0303 	adc.w	r3, r1, r3
 8010086:	1994      	adds	r4, r2, r6
 8010088:	eb43 0507 	adc.w	r5, r3, r7
 801008c:	4554      	cmp	r4, sl
 801008e:	eb75 020b 	sbcs.w	r2, r5, fp
 8010092:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010096:	db03      	blt.n	80100a0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8010098:	45b2      	cmp	sl, r6
 801009a:	eb7b 0207 	sbcs.w	r2, fp, r7
 801009e:	da05      	bge.n	80100ac <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 80100a0:	4641      	mov	r1, r8
 80100a2:	4648      	mov	r0, r9
 80100a4:	9300      	str	r3, [sp, #0]
 80100a6:	f007 f9f5 	bl	8017494 <put_memory>
 80100aa:	9b00      	ldr	r3, [sp, #0]
 80100ac:	b37b      	cbz	r3, 801010e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 80100ae:	4698      	mov	r8, r3
 80100b0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80100b4:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 80100b8:	2b04      	cmp	r3, #4
 80100ba:	d1d1      	bne.n	8010060 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 80100bc:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 80100c0:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 80100c4:	e9cd 2300 	strd	r2, r3, [sp]
 80100c8:	4313      	orrs	r3, r2
 80100ca:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 80100ce:	d015      	beq.n	80100fc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 80100d0:	9a01      	ldr	r2, [sp, #4]
 80100d2:	4b14      	ldr	r3, [pc, #80]	; (8010124 <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 80100d4:	fb03 f702 	mul.w	r7, r3, r2
 80100d8:	9a00      	ldr	r2, [sp, #0]
 80100da:	fba2 2303 	umull	r2, r3, r2, r3
 80100de:	e9cd 2300 	strd	r2, r3, [sp]
 80100e2:	443b      	add	r3, r7
 80100e4:	9301      	str	r3, [sp, #4]
 80100e6:	e7c5      	b.n	8010074 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 80100e8:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 80100ec:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 80100f0:	e9cd 2300 	strd	r2, r3, [sp]
 80100f4:	4313      	orrs	r3, r2
 80100f6:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 80100fa:	d1e9      	bne.n	80100d0 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 80100fc:	ea50 0301 	orrs.w	r3, r0, r1
 8010100:	bf02      	ittt	eq
 8010102:	a305      	addeq	r3, pc, #20	; (adr r3, 8010118 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 8010104:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 8010108:	e9cd 2300 	strdeq	r2, r3, [sp]
 801010c:	e7b2      	b.n	8010074 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 801010e:	b003      	add	sp, #12
 8010110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010114:	f3af 8000 	nop.w
 8010118:	fc23ac00 	.word	0xfc23ac00
 801011c:	00000006 	.word	0x00000006
 8010120:	20011670 	.word	0x20011670
 8010124:	3b9aca00 	.word	0x3b9aca00

08010128 <run_xrce_session>:
 8010128:	b510      	push	{r4, lr}
 801012a:	788c      	ldrb	r4, [r1, #2]
 801012c:	b086      	sub	sp, #24
 801012e:	2c01      	cmp	r4, #1
 8010130:	f8ad 200e 	strh.w	r2, [sp, #14]
 8010134:	d00c      	beq.n	8010150 <run_xrce_session+0x28>
 8010136:	4619      	mov	r1, r3
 8010138:	2301      	movs	r3, #1
 801013a:	9300      	str	r3, [sp, #0]
 801013c:	f10d 020e 	add.w	r2, sp, #14
 8010140:	f10d 0317 	add.w	r3, sp, #23
 8010144:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010148:	f002 fce8 	bl	8012b1c <uxr_run_session_until_all_status>
 801014c:	b006      	add	sp, #24
 801014e:	bd10      	pop	{r4, pc}
 8010150:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010154:	f002 fc32 	bl	80129bc <uxr_flash_output_streams>
 8010158:	4620      	mov	r0, r4
 801015a:	b006      	add	sp, #24
 801015c:	bd10      	pop	{r4, pc}
 801015e:	bf00      	nop

08010160 <generate_type_name>:
 8010160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010164:	4606      	mov	r6, r0
 8010166:	b086      	sub	sp, #24
 8010168:	6840      	ldr	r0, [r0, #4]
 801016a:	460f      	mov	r7, r1
 801016c:	4690      	mov	r8, r2
 801016e:	f7f0 f839 	bl	80001e4 <strlen>
 8010172:	6834      	ldr	r4, [r6, #0]
 8010174:	4605      	mov	r5, r0
 8010176:	b11c      	cbz	r4, 8010180 <generate_type_name+0x20>
 8010178:	4620      	mov	r0, r4
 801017a:	f7f0 f833 	bl	80001e4 <strlen>
 801017e:	4604      	mov	r4, r0
 8010180:	2300      	movs	r3, #0
 8010182:	703b      	strb	r3, [r7, #0]
 8010184:	6833      	ldr	r3, [r6, #0]
 8010186:	3508      	adds	r5, #8
 8010188:	442c      	add	r4, r5
 801018a:	b19b      	cbz	r3, 80101b4 <generate_type_name+0x54>
 801018c:	490b      	ldr	r1, [pc, #44]	; (80101bc <generate_type_name+0x5c>)
 801018e:	4608      	mov	r0, r1
 8010190:	6875      	ldr	r5, [r6, #4]
 8010192:	4a0b      	ldr	r2, [pc, #44]	; (80101c0 <generate_type_name+0x60>)
 8010194:	9504      	str	r5, [sp, #16]
 8010196:	4d0b      	ldr	r5, [pc, #44]	; (80101c4 <generate_type_name+0x64>)
 8010198:	9103      	str	r1, [sp, #12]
 801019a:	e9cd 5201 	strd	r5, r2, [sp, #4]
 801019e:	9000      	str	r0, [sp, #0]
 80101a0:	9205      	str	r2, [sp, #20]
 80101a2:	4641      	mov	r1, r8
 80101a4:	4a08      	ldr	r2, [pc, #32]	; (80101c8 <generate_type_name+0x68>)
 80101a6:	4638      	mov	r0, r7
 80101a8:	f009 f9b2 	bl	8019510 <sniprintf>
 80101ac:	4620      	mov	r0, r4
 80101ae:	b006      	add	sp, #24
 80101b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101b4:	4b05      	ldr	r3, [pc, #20]	; (80101cc <generate_type_name+0x6c>)
 80101b6:	4901      	ldr	r1, [pc, #4]	; (80101bc <generate_type_name+0x5c>)
 80101b8:	4618      	mov	r0, r3
 80101ba:	e7e9      	b.n	8010190 <generate_type_name+0x30>
 80101bc:	0801e280 	.word	0x0801e280
 80101c0:	0801e294 	.word	0x0801e294
 80101c4:	0801e298 	.word	0x0801e298
 80101c8:	0801e284 	.word	0x0801e284
 80101cc:	0801e7e8 	.word	0x0801e7e8

080101d0 <generate_topic_name>:
 80101d0:	b510      	push	{r4, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	4b07      	ldr	r3, [pc, #28]	; (80101f4 <generate_topic_name+0x24>)
 80101d6:	9000      	str	r0, [sp, #0]
 80101d8:	4614      	mov	r4, r2
 80101da:	4608      	mov	r0, r1
 80101dc:	4611      	mov	r1, r2
 80101de:	4a06      	ldr	r2, [pc, #24]	; (80101f8 <generate_topic_name+0x28>)
 80101e0:	f009 f996 	bl	8019510 <sniprintf>
 80101e4:	2800      	cmp	r0, #0
 80101e6:	da02      	bge.n	80101ee <generate_topic_name+0x1e>
 80101e8:	4284      	cmp	r4, r0
 80101ea:	bfd8      	it	le
 80101ec:	2000      	movle	r0, #0
 80101ee:	b002      	add	sp, #8
 80101f0:	bd10      	pop	{r4, pc}
 80101f2:	bf00      	nop
 80101f4:	0801e2a4 	.word	0x0801e2a4
 80101f8:	0801e29c 	.word	0x0801e29c

080101fc <is_uxrce_rmw_identifier_valid>:
 80101fc:	b510      	push	{r4, lr}
 80101fe:	4604      	mov	r4, r0
 8010200:	b140      	cbz	r0, 8010214 <is_uxrce_rmw_identifier_valid+0x18>
 8010202:	f007 f98d 	bl	8017520 <rmw_get_implementation_identifier>
 8010206:	4601      	mov	r1, r0
 8010208:	4620      	mov	r0, r4
 801020a:	f7ef ffe1 	bl	80001d0 <strcmp>
 801020e:	fab0 f080 	clz	r0, r0
 8010212:	0940      	lsrs	r0, r0, #5
 8010214:	bd10      	pop	{r4, pc}
 8010216:	bf00      	nop

08010218 <get_message_typesupport_handle>:
 8010218:	6883      	ldr	r3, [r0, #8]
 801021a:	4718      	bx	r3

0801021c <get_message_typesupport_handle_function>:
 801021c:	b510      	push	{r4, lr}
 801021e:	4604      	mov	r4, r0
 8010220:	6800      	ldr	r0, [r0, #0]
 8010222:	f7ef ffd5 	bl	80001d0 <strcmp>
 8010226:	2800      	cmp	r0, #0
 8010228:	bf0c      	ite	eq
 801022a:	4620      	moveq	r0, r4
 801022c:	2000      	movne	r0, #0
 801022e:	bd10      	pop	{r4, pc}

08010230 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>:
 8010230:	f000 b8f6 	b.w	8010420 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>

08010234 <get_serialized_size_sensor_msgs__msg__NavSatFix>:
 8010234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010236:	4604      	mov	r4, r0
 8010238:	b358      	cbz	r0, 8010292 <get_serialized_size_sensor_msgs__msg__NavSatFix+0x5e>
 801023a:	460e      	mov	r6, r1
 801023c:	f000 f9a2 	bl	8010584 <get_serialized_size_std_msgs__msg__Header>
 8010240:	1837      	adds	r7, r6, r0
 8010242:	4639      	mov	r1, r7
 8010244:	f104 0014 	add.w	r0, r4, #20
 8010248:	f000 f8ee 	bl	8010428 <get_serialized_size_sensor_msgs__msg__NavSatStatus>
 801024c:	183c      	adds	r4, r7, r0
 801024e:	4620      	mov	r0, r4
 8010250:	2108      	movs	r1, #8
 8010252:	f001 fa75 	bl	8011740 <ucdr_alignment>
 8010256:	3008      	adds	r0, #8
 8010258:	4404      	add	r4, r0
 801025a:	4620      	mov	r0, r4
 801025c:	2108      	movs	r1, #8
 801025e:	f001 fa6f 	bl	8011740 <ucdr_alignment>
 8010262:	f100 0508 	add.w	r5, r0, #8
 8010266:	4425      	add	r5, r4
 8010268:	4628      	mov	r0, r5
 801026a:	2108      	movs	r1, #8
 801026c:	f001 fa68 	bl	8011740 <ucdr_alignment>
 8010270:	3008      	adds	r0, #8
 8010272:	4405      	add	r5, r0
 8010274:	4628      	mov	r0, r5
 8010276:	2108      	movs	r1, #8
 8010278:	f001 fa62 	bl	8011740 <ucdr_alignment>
 801027c:	3048      	adds	r0, #72	; 0x48
 801027e:	4405      	add	r5, r0
 8010280:	4628      	mov	r0, r5
 8010282:	2101      	movs	r1, #1
 8010284:	f001 fa5c 	bl	8011740 <ucdr_alignment>
 8010288:	f1c6 0601 	rsb	r6, r6, #1
 801028c:	4430      	add	r0, r6
 801028e:	4428      	add	r0, r5
 8010290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010292:	4b05      	ldr	r3, [pc, #20]	; (80102a8 <get_serialized_size_sensor_msgs__msg__NavSatFix+0x74>)
 8010294:	4805      	ldr	r0, [pc, #20]	; (80102ac <get_serialized_size_sensor_msgs__msg__NavSatFix+0x78>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	221b      	movs	r2, #27
 801029a:	68db      	ldr	r3, [r3, #12]
 801029c:	2101      	movs	r1, #1
 801029e:	f008 fd0d 	bl	8018cbc <fwrite>
 80102a2:	4620      	mov	r0, r4
 80102a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102a6:	bf00      	nop
 80102a8:	20000190 	.word	0x20000190
 80102ac:	0801e2a8 	.word	0x0801e2a8

080102b0 <_NavSatFix__get_serialized_size>:
 80102b0:	2100      	movs	r1, #0
 80102b2:	f7ff bfbf 	b.w	8010234 <get_serialized_size_sensor_msgs__msg__NavSatFix>
 80102b6:	bf00      	nop

080102b8 <_NavSatFix__cdr_deserialize>:
 80102b8:	b538      	push	{r3, r4, r5, lr}
 80102ba:	460c      	mov	r4, r1
 80102bc:	b359      	cbz	r1, 8010316 <_NavSatFix__cdr_deserialize+0x5e>
 80102be:	4605      	mov	r5, r0
 80102c0:	f000 fa12 	bl	80106e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80102c4:	6843      	ldr	r3, [r0, #4]
 80102c6:	4621      	mov	r1, r4
 80102c8:	68db      	ldr	r3, [r3, #12]
 80102ca:	4628      	mov	r0, r5
 80102cc:	4798      	blx	r3
 80102ce:	f000 f943 	bl	8010558 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>
 80102d2:	6843      	ldr	r3, [r0, #4]
 80102d4:	f104 0114 	add.w	r1, r4, #20
 80102d8:	68db      	ldr	r3, [r3, #12]
 80102da:	4628      	mov	r0, r5
 80102dc:	4798      	blx	r3
 80102de:	f104 0118 	add.w	r1, r4, #24
 80102e2:	4628      	mov	r0, r5
 80102e4:	f001 f95a 	bl	801159c <ucdr_deserialize_double>
 80102e8:	f104 0120 	add.w	r1, r4, #32
 80102ec:	4628      	mov	r0, r5
 80102ee:	f001 f955 	bl	801159c <ucdr_deserialize_double>
 80102f2:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80102f6:	4628      	mov	r0, r5
 80102f8:	f001 f950 	bl	801159c <ucdr_deserialize_double>
 80102fc:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8010300:	4628      	mov	r0, r5
 8010302:	2209      	movs	r2, #9
 8010304:	f000 fda4 	bl	8010e50 <ucdr_deserialize_array_double>
 8010308:	f104 0178 	add.w	r1, r4, #120	; 0x78
 801030c:	4628      	mov	r0, r5
 801030e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010312:	f000 be37 	b.w	8010f84 <ucdr_deserialize_uint8_t>
 8010316:	4b05      	ldr	r3, [pc, #20]	; (801032c <_NavSatFix__cdr_deserialize+0x74>)
 8010318:	4805      	ldr	r0, [pc, #20]	; (8010330 <_NavSatFix__cdr_deserialize+0x78>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	221b      	movs	r2, #27
 801031e:	68db      	ldr	r3, [r3, #12]
 8010320:	2101      	movs	r1, #1
 8010322:	f008 fccb 	bl	8018cbc <fwrite>
 8010326:	4620      	mov	r0, r4
 8010328:	bd38      	pop	{r3, r4, r5, pc}
 801032a:	bf00      	nop
 801032c:	20000190 	.word	0x20000190
 8010330:	0801e2a8 	.word	0x0801e2a8

08010334 <_NavSatFix__cdr_serialize>:
 8010334:	b538      	push	{r3, r4, r5, lr}
 8010336:	4604      	mov	r4, r0
 8010338:	b358      	cbz	r0, 8010392 <_NavSatFix__cdr_serialize+0x5e>
 801033a:	460d      	mov	r5, r1
 801033c:	f000 f9d4 	bl	80106e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010340:	6843      	ldr	r3, [r0, #4]
 8010342:	4629      	mov	r1, r5
 8010344:	689b      	ldr	r3, [r3, #8]
 8010346:	4620      	mov	r0, r4
 8010348:	4798      	blx	r3
 801034a:	f000 f905 	bl	8010558 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>
 801034e:	6843      	ldr	r3, [r0, #4]
 8010350:	4629      	mov	r1, r5
 8010352:	689b      	ldr	r3, [r3, #8]
 8010354:	f104 0014 	add.w	r0, r4, #20
 8010358:	4798      	blx	r3
 801035a:	ed94 0b06 	vldr	d0, [r4, #24]
 801035e:	4628      	mov	r0, r5
 8010360:	f001 f888 	bl	8011474 <ucdr_serialize_double>
 8010364:	ed94 0b08 	vldr	d0, [r4, #32]
 8010368:	4628      	mov	r0, r5
 801036a:	f001 f883 	bl	8011474 <ucdr_serialize_double>
 801036e:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 8010372:	4628      	mov	r0, r5
 8010374:	f001 f87e 	bl	8011474 <ucdr_serialize_double>
 8010378:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801037c:	4628      	mov	r0, r5
 801037e:	2209      	movs	r2, #9
 8010380:	f000 fd12 	bl	8010da8 <ucdr_serialize_array_double>
 8010384:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8010388:	4628      	mov	r0, r5
 801038a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801038e:	f000 bde3 	b.w	8010f58 <ucdr_serialize_uint8_t>
 8010392:	4b05      	ldr	r3, [pc, #20]	; (80103a8 <_NavSatFix__cdr_serialize+0x74>)
 8010394:	4805      	ldr	r0, [pc, #20]	; (80103ac <_NavSatFix__cdr_serialize+0x78>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	221b      	movs	r2, #27
 801039a:	68db      	ldr	r3, [r3, #12]
 801039c:	2101      	movs	r1, #1
 801039e:	f008 fc8d 	bl	8018cbc <fwrite>
 80103a2:	4620      	mov	r0, r4
 80103a4:	bd38      	pop	{r3, r4, r5, pc}
 80103a6:	bf00      	nop
 80103a8:	20000190 	.word	0x20000190
 80103ac:	0801e2a8 	.word	0x0801e2a8

080103b0 <max_serialized_size_sensor_msgs__msg__NavSatFix>:
 80103b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103b2:	2701      	movs	r7, #1
 80103b4:	7007      	strb	r7, [r0, #0]
 80103b6:	460c      	mov	r4, r1
 80103b8:	4605      	mov	r5, r0
 80103ba:	f000 f98b 	bl	80106d4 <max_serialized_size_std_msgs__msg__Header>
 80103be:	1826      	adds	r6, r4, r0
 80103c0:	4631      	mov	r1, r6
 80103c2:	4628      	mov	r0, r5
 80103c4:	f000 f8b6 	bl	8010534 <max_serialized_size_sensor_msgs__msg__NavSatStatus>
 80103c8:	1835      	adds	r5, r6, r0
 80103ca:	4628      	mov	r0, r5
 80103cc:	2108      	movs	r1, #8
 80103ce:	f001 f9b7 	bl	8011740 <ucdr_alignment>
 80103d2:	3008      	adds	r0, #8
 80103d4:	4405      	add	r5, r0
 80103d6:	4628      	mov	r0, r5
 80103d8:	2108      	movs	r1, #8
 80103da:	f001 f9b1 	bl	8011740 <ucdr_alignment>
 80103de:	3008      	adds	r0, #8
 80103e0:	1946      	adds	r6, r0, r5
 80103e2:	4630      	mov	r0, r6
 80103e4:	2108      	movs	r1, #8
 80103e6:	f001 f9ab 	bl	8011740 <ucdr_alignment>
 80103ea:	f100 0508 	add.w	r5, r0, #8
 80103ee:	4435      	add	r5, r6
 80103f0:	4628      	mov	r0, r5
 80103f2:	2108      	movs	r1, #8
 80103f4:	f001 f9a4 	bl	8011740 <ucdr_alignment>
 80103f8:	3048      	adds	r0, #72	; 0x48
 80103fa:	4405      	add	r5, r0
 80103fc:	4639      	mov	r1, r7
 80103fe:	4628      	mov	r0, r5
 8010400:	f001 f99e 	bl	8011740 <ucdr_alignment>
 8010404:	1b3c      	subs	r4, r7, r4
 8010406:	4420      	add	r0, r4
 8010408:	4428      	add	r0, r5
 801040a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801040c <_NavSatFix__max_serialized_size>:
 801040c:	b500      	push	{lr}
 801040e:	b083      	sub	sp, #12
 8010410:	2100      	movs	r1, #0
 8010412:	f10d 0007 	add.w	r0, sp, #7
 8010416:	f7ff ffcb 	bl	80103b0 <max_serialized_size_sensor_msgs__msg__NavSatFix>
 801041a:	b003      	add	sp, #12
 801041c:	f85d fb04 	ldr.w	pc, [sp], #4

08010420 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>:
 8010420:	4800      	ldr	r0, [pc, #0]	; (8010424 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix+0x4>)
 8010422:	4770      	bx	lr
 8010424:	20000048 	.word	0x20000048

08010428 <get_serialized_size_sensor_msgs__msg__NavSatStatus>:
 8010428:	b538      	push	{r3, r4, r5, lr}
 801042a:	b178      	cbz	r0, 801044c <get_serialized_size_sensor_msgs__msg__NavSatStatus+0x24>
 801042c:	460d      	mov	r5, r1
 801042e:	4628      	mov	r0, r5
 8010430:	2101      	movs	r1, #1
 8010432:	f001 f985 	bl	8011740 <ucdr_alignment>
 8010436:	1c6c      	adds	r4, r5, #1
 8010438:	4404      	add	r4, r0
 801043a:	4620      	mov	r0, r4
 801043c:	2102      	movs	r1, #2
 801043e:	f001 f97f 	bl	8011740 <ucdr_alignment>
 8010442:	f1c5 0502 	rsb	r5, r5, #2
 8010446:	4428      	add	r0, r5
 8010448:	4420      	add	r0, r4
 801044a:	bd38      	pop	{r3, r4, r5, pc}
 801044c:	4b05      	ldr	r3, [pc, #20]	; (8010464 <get_serialized_size_sensor_msgs__msg__NavSatStatus+0x3c>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	4604      	mov	r4, r0
 8010452:	68db      	ldr	r3, [r3, #12]
 8010454:	4804      	ldr	r0, [pc, #16]	; (8010468 <get_serialized_size_sensor_msgs__msg__NavSatStatus+0x40>)
 8010456:	221b      	movs	r2, #27
 8010458:	2101      	movs	r1, #1
 801045a:	f008 fc2f 	bl	8018cbc <fwrite>
 801045e:	4620      	mov	r0, r4
 8010460:	bd38      	pop	{r3, r4, r5, pc}
 8010462:	bf00      	nop
 8010464:	20000190 	.word	0x20000190
 8010468:	0801e2a8 	.word	0x0801e2a8

0801046c <_NavSatStatus__cdr_serialize>:
 801046c:	b538      	push	{r3, r4, r5, lr}
 801046e:	4604      	mov	r4, r0
 8010470:	b158      	cbz	r0, 801048a <_NavSatStatus__cdr_serialize+0x1e>
 8010472:	460d      	mov	r5, r1
 8010474:	f990 1000 	ldrsb.w	r1, [r0]
 8010478:	4628      	mov	r0, r5
 801047a:	f000 ff47 	bl	801130c <ucdr_serialize_int8_t>
 801047e:	8861      	ldrh	r1, [r4, #2]
 8010480:	4628      	mov	r0, r5
 8010482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010486:	f000 bd93 	b.w	8010fb0 <ucdr_serialize_uint16_t>
 801048a:	4b05      	ldr	r3, [pc, #20]	; (80104a0 <_NavSatStatus__cdr_serialize+0x34>)
 801048c:	4805      	ldr	r0, [pc, #20]	; (80104a4 <_NavSatStatus__cdr_serialize+0x38>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	221b      	movs	r2, #27
 8010492:	68db      	ldr	r3, [r3, #12]
 8010494:	2101      	movs	r1, #1
 8010496:	f008 fc11 	bl	8018cbc <fwrite>
 801049a:	4620      	mov	r0, r4
 801049c:	bd38      	pop	{r3, r4, r5, pc}
 801049e:	bf00      	nop
 80104a0:	20000190 	.word	0x20000190
 80104a4:	0801e2a8 	.word	0x0801e2a8

080104a8 <_NavSatStatus__cdr_deserialize>:
 80104a8:	b538      	push	{r3, r4, r5, lr}
 80104aa:	460c      	mov	r4, r1
 80104ac:	b141      	cbz	r1, 80104c0 <_NavSatStatus__cdr_deserialize+0x18>
 80104ae:	4605      	mov	r5, r0
 80104b0:	f000 ff42 	bl	8011338 <ucdr_deserialize_int8_t>
 80104b4:	1ca1      	adds	r1, r4, #2
 80104b6:	4628      	mov	r0, r5
 80104b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104bc:	f000 bdc8 	b.w	8011050 <ucdr_deserialize_uint16_t>
 80104c0:	4b04      	ldr	r3, [pc, #16]	; (80104d4 <_NavSatStatus__cdr_deserialize+0x2c>)
 80104c2:	4805      	ldr	r0, [pc, #20]	; (80104d8 <_NavSatStatus__cdr_deserialize+0x30>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	221b      	movs	r2, #27
 80104c8:	68db      	ldr	r3, [r3, #12]
 80104ca:	2101      	movs	r1, #1
 80104cc:	f008 fbf6 	bl	8018cbc <fwrite>
 80104d0:	4620      	mov	r0, r4
 80104d2:	bd38      	pop	{r3, r4, r5, pc}
 80104d4:	20000190 	.word	0x20000190
 80104d8:	0801e2a8 	.word	0x0801e2a8

080104dc <_NavSatStatus__max_serialized_size>:
 80104dc:	b510      	push	{r4, lr}
 80104de:	2101      	movs	r1, #1
 80104e0:	2000      	movs	r0, #0
 80104e2:	f001 f92d 	bl	8011740 <ucdr_alignment>
 80104e6:	1c44      	adds	r4, r0, #1
 80104e8:	4620      	mov	r0, r4
 80104ea:	2102      	movs	r1, #2
 80104ec:	f001 f928 	bl	8011740 <ucdr_alignment>
 80104f0:	3002      	adds	r0, #2
 80104f2:	4420      	add	r0, r4
 80104f4:	bd10      	pop	{r4, pc}
 80104f6:	bf00      	nop

080104f8 <_NavSatStatus__get_serialized_size>:
 80104f8:	b510      	push	{r4, lr}
 80104fa:	b158      	cbz	r0, 8010514 <_NavSatStatus__get_serialized_size+0x1c>
 80104fc:	2101      	movs	r1, #1
 80104fe:	2000      	movs	r0, #0
 8010500:	f001 f91e 	bl	8011740 <ucdr_alignment>
 8010504:	1c44      	adds	r4, r0, #1
 8010506:	4620      	mov	r0, r4
 8010508:	2102      	movs	r1, #2
 801050a:	f001 f919 	bl	8011740 <ucdr_alignment>
 801050e:	3002      	adds	r0, #2
 8010510:	4420      	add	r0, r4
 8010512:	bd10      	pop	{r4, pc}
 8010514:	4b05      	ldr	r3, [pc, #20]	; (801052c <_NavSatStatus__get_serialized_size+0x34>)
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	4604      	mov	r4, r0
 801051a:	68db      	ldr	r3, [r3, #12]
 801051c:	4804      	ldr	r0, [pc, #16]	; (8010530 <_NavSatStatus__get_serialized_size+0x38>)
 801051e:	221b      	movs	r2, #27
 8010520:	2101      	movs	r1, #1
 8010522:	f008 fbcb 	bl	8018cbc <fwrite>
 8010526:	4620      	mov	r0, r4
 8010528:	bd10      	pop	{r4, pc}
 801052a:	bf00      	nop
 801052c:	20000190 	.word	0x20000190
 8010530:	0801e2a8 	.word	0x0801e2a8

08010534 <max_serialized_size_sensor_msgs__msg__NavSatStatus>:
 8010534:	b538      	push	{r3, r4, r5, lr}
 8010536:	460c      	mov	r4, r1
 8010538:	2101      	movs	r1, #1
 801053a:	7001      	strb	r1, [r0, #0]
 801053c:	4620      	mov	r0, r4
 801053e:	f001 f8ff 	bl	8011740 <ucdr_alignment>
 8010542:	1c65      	adds	r5, r4, #1
 8010544:	4405      	add	r5, r0
 8010546:	4628      	mov	r0, r5
 8010548:	2102      	movs	r1, #2
 801054a:	f001 f8f9 	bl	8011740 <ucdr_alignment>
 801054e:	f1c4 0402 	rsb	r4, r4, #2
 8010552:	4420      	add	r0, r4
 8010554:	4428      	add	r0, r5
 8010556:	bd38      	pop	{r3, r4, r5, pc}

08010558 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>:
 8010558:	4800      	ldr	r0, [pc, #0]	; (801055c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus+0x4>)
 801055a:	4770      	bx	lr
 801055c:	20000070 	.word	0x20000070

08010560 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010560:	f000 b92a 	b.w	80107b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>

08010564 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>:
 8010564:	f000 b9de 	b.w	8010924 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>

08010568 <_Header__max_serialized_size>:
 8010568:	b500      	push	{lr}
 801056a:	b083      	sub	sp, #12
 801056c:	2301      	movs	r3, #1
 801056e:	2100      	movs	r1, #0
 8010570:	f10d 0007 	add.w	r0, sp, #7
 8010574:	f88d 3007 	strb.w	r3, [sp, #7]
 8010578:	f000 fa5c 	bl	8010a34 <max_serialized_size_builtin_interfaces__msg__Time>
 801057c:	b003      	add	sp, #12
 801057e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010582:	bf00      	nop

08010584 <get_serialized_size_std_msgs__msg__Header>:
 8010584:	b570      	push	{r4, r5, r6, lr}
 8010586:	4605      	mov	r5, r0
 8010588:	b170      	cbz	r0, 80105a8 <get_serialized_size_std_msgs__msg__Header+0x24>
 801058a:	460c      	mov	r4, r1
 801058c:	f000 f9ce 	bl	801092c <get_serialized_size_builtin_interfaces__msg__Time>
 8010590:	1826      	adds	r6, r4, r0
 8010592:	4630      	mov	r0, r6
 8010594:	2104      	movs	r1, #4
 8010596:	f001 f8d3 	bl	8011740 <ucdr_alignment>
 801059a:	68e9      	ldr	r1, [r5, #12]
 801059c:	f1c4 0405 	rsb	r4, r4, #5
 80105a0:	440c      	add	r4, r1
 80105a2:	4404      	add	r4, r0
 80105a4:	19a0      	adds	r0, r4, r6
 80105a6:	bd70      	pop	{r4, r5, r6, pc}
 80105a8:	4b04      	ldr	r3, [pc, #16]	; (80105bc <get_serialized_size_std_msgs__msg__Header+0x38>)
 80105aa:	4805      	ldr	r0, [pc, #20]	; (80105c0 <get_serialized_size_std_msgs__msg__Header+0x3c>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	221b      	movs	r2, #27
 80105b0:	68db      	ldr	r3, [r3, #12]
 80105b2:	2101      	movs	r1, #1
 80105b4:	f008 fb82 	bl	8018cbc <fwrite>
 80105b8:	4628      	mov	r0, r5
 80105ba:	bd70      	pop	{r4, r5, r6, pc}
 80105bc:	20000190 	.word	0x20000190
 80105c0:	0801e2a8 	.word	0x0801e2a8

080105c4 <_Header__cdr_deserialize>:
 80105c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105c6:	460c      	mov	r4, r1
 80105c8:	b083      	sub	sp, #12
 80105ca:	b1e9      	cbz	r1, 8010608 <_Header__cdr_deserialize+0x44>
 80105cc:	4607      	mov	r7, r0
 80105ce:	f000 fa45 	bl	8010a5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80105d2:	6843      	ldr	r3, [r0, #4]
 80105d4:	4621      	mov	r1, r4
 80105d6:	68db      	ldr	r3, [r3, #12]
 80105d8:	4638      	mov	r0, r7
 80105da:	4798      	blx	r3
 80105dc:	6926      	ldr	r6, [r4, #16]
 80105de:	68a1      	ldr	r1, [r4, #8]
 80105e0:	4632      	mov	r2, r6
 80105e2:	ab01      	add	r3, sp, #4
 80105e4:	4638      	mov	r0, r7
 80105e6:	f001 f92d 	bl	8011844 <ucdr_deserialize_sequence_char>
 80105ea:	4605      	mov	r5, r0
 80105ec:	b130      	cbz	r0, 80105fc <_Header__cdr_deserialize+0x38>
 80105ee:	9b01      	ldr	r3, [sp, #4]
 80105f0:	b103      	cbz	r3, 80105f4 <_Header__cdr_deserialize+0x30>
 80105f2:	3b01      	subs	r3, #1
 80105f4:	4628      	mov	r0, r5
 80105f6:	60e3      	str	r3, [r4, #12]
 80105f8:	b003      	add	sp, #12
 80105fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105fc:	9901      	ldr	r1, [sp, #4]
 80105fe:	42b1      	cmp	r1, r6
 8010600:	d80e      	bhi.n	8010620 <_Header__cdr_deserialize+0x5c>
 8010602:	4628      	mov	r0, r5
 8010604:	b003      	add	sp, #12
 8010606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010608:	4b09      	ldr	r3, [pc, #36]	; (8010630 <_Header__cdr_deserialize+0x6c>)
 801060a:	480a      	ldr	r0, [pc, #40]	; (8010634 <_Header__cdr_deserialize+0x70>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	221b      	movs	r2, #27
 8010610:	68db      	ldr	r3, [r3, #12]
 8010612:	2101      	movs	r1, #1
 8010614:	f008 fb52 	bl	8018cbc <fwrite>
 8010618:	4625      	mov	r5, r4
 801061a:	4628      	mov	r0, r5
 801061c:	b003      	add	sp, #12
 801061e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010620:	75b8      	strb	r0, [r7, #22]
 8010622:	60e0      	str	r0, [r4, #12]
 8010624:	4638      	mov	r0, r7
 8010626:	f001 f8db 	bl	80117e0 <ucdr_advance_buffer>
 801062a:	4628      	mov	r0, r5
 801062c:	b003      	add	sp, #12
 801062e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010630:	20000190 	.word	0x20000190
 8010634:	0801e2a8 	.word	0x0801e2a8

08010638 <_Header__cdr_serialize>:
 8010638:	b570      	push	{r4, r5, r6, lr}
 801063a:	4604      	mov	r4, r0
 801063c:	b1e8      	cbz	r0, 801067a <_Header__cdr_serialize+0x42>
 801063e:	460e      	mov	r6, r1
 8010640:	f000 fa0c 	bl	8010a5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010644:	6843      	ldr	r3, [r0, #4]
 8010646:	4631      	mov	r1, r6
 8010648:	689b      	ldr	r3, [r3, #8]
 801064a:	4620      	mov	r0, r4
 801064c:	4798      	blx	r3
 801064e:	68a5      	ldr	r5, [r4, #8]
 8010650:	b155      	cbz	r5, 8010668 <_Header__cdr_serialize+0x30>
 8010652:	4628      	mov	r0, r5
 8010654:	f7ef fdc6 	bl	80001e4 <strlen>
 8010658:	4629      	mov	r1, r5
 801065a:	60e0      	str	r0, [r4, #12]
 801065c:	1c42      	adds	r2, r0, #1
 801065e:	4630      	mov	r0, r6
 8010660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010664:	f001 b8dc 	b.w	8011820 <ucdr_serialize_sequence_char>
 8010668:	4628      	mov	r0, r5
 801066a:	60e0      	str	r0, [r4, #12]
 801066c:	462a      	mov	r2, r5
 801066e:	4629      	mov	r1, r5
 8010670:	4630      	mov	r0, r6
 8010672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010676:	f001 b8d3 	b.w	8011820 <ucdr_serialize_sequence_char>
 801067a:	4b05      	ldr	r3, [pc, #20]	; (8010690 <_Header__cdr_serialize+0x58>)
 801067c:	4805      	ldr	r0, [pc, #20]	; (8010694 <_Header__cdr_serialize+0x5c>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	221b      	movs	r2, #27
 8010682:	68db      	ldr	r3, [r3, #12]
 8010684:	2101      	movs	r1, #1
 8010686:	f008 fb19 	bl	8018cbc <fwrite>
 801068a:	4620      	mov	r0, r4
 801068c:	bd70      	pop	{r4, r5, r6, pc}
 801068e:	bf00      	nop
 8010690:	20000190 	.word	0x20000190
 8010694:	0801e2a8 	.word	0x0801e2a8

08010698 <_Header__get_serialized_size>:
 8010698:	b538      	push	{r3, r4, r5, lr}
 801069a:	4604      	mov	r4, r0
 801069c:	b158      	cbz	r0, 80106b6 <_Header__get_serialized_size+0x1e>
 801069e:	2100      	movs	r1, #0
 80106a0:	f000 f944 	bl	801092c <get_serialized_size_builtin_interfaces__msg__Time>
 80106a4:	2104      	movs	r1, #4
 80106a6:	4605      	mov	r5, r0
 80106a8:	f001 f84a 	bl	8011740 <ucdr_alignment>
 80106ac:	68e2      	ldr	r2, [r4, #12]
 80106ae:	3205      	adds	r2, #5
 80106b0:	1953      	adds	r3, r2, r5
 80106b2:	4418      	add	r0, r3
 80106b4:	bd38      	pop	{r3, r4, r5, pc}
 80106b6:	4b05      	ldr	r3, [pc, #20]	; (80106cc <_Header__get_serialized_size+0x34>)
 80106b8:	4805      	ldr	r0, [pc, #20]	; (80106d0 <_Header__get_serialized_size+0x38>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	221b      	movs	r2, #27
 80106be:	68db      	ldr	r3, [r3, #12]
 80106c0:	2101      	movs	r1, #1
 80106c2:	f008 fafb 	bl	8018cbc <fwrite>
 80106c6:	4620      	mov	r0, r4
 80106c8:	bd38      	pop	{r3, r4, r5, pc}
 80106ca:	bf00      	nop
 80106cc:	20000190 	.word	0x20000190
 80106d0:	0801e2a8 	.word	0x0801e2a8

080106d4 <max_serialized_size_std_msgs__msg__Header>:
 80106d4:	b510      	push	{r4, lr}
 80106d6:	2301      	movs	r3, #1
 80106d8:	4604      	mov	r4, r0
 80106da:	7003      	strb	r3, [r0, #0]
 80106dc:	f000 f9aa 	bl	8010a34 <max_serialized_size_builtin_interfaces__msg__Time>
 80106e0:	2300      	movs	r3, #0
 80106e2:	7023      	strb	r3, [r4, #0]
 80106e4:	bd10      	pop	{r4, pc}
 80106e6:	bf00      	nop

080106e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80106e8:	4800      	ldr	r0, [pc, #0]	; (80106ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 80106ea:	4770      	bx	lr
 80106ec:	20000098 	.word	0x20000098

080106f0 <_Int32__max_serialized_size>:
 80106f0:	b508      	push	{r3, lr}
 80106f2:	2104      	movs	r1, #4
 80106f4:	2000      	movs	r0, #0
 80106f6:	f001 f823 	bl	8011740 <ucdr_alignment>
 80106fa:	3004      	adds	r0, #4
 80106fc:	bd08      	pop	{r3, pc}
 80106fe:	bf00      	nop

08010700 <get_serialized_size_std_msgs__msg__Int32>:
 8010700:	b510      	push	{r4, lr}
 8010702:	b128      	cbz	r0, 8010710 <get_serialized_size_std_msgs__msg__Int32+0x10>
 8010704:	4608      	mov	r0, r1
 8010706:	2104      	movs	r1, #4
 8010708:	f001 f81a 	bl	8011740 <ucdr_alignment>
 801070c:	3004      	adds	r0, #4
 801070e:	bd10      	pop	{r4, pc}
 8010710:	4b05      	ldr	r3, [pc, #20]	; (8010728 <get_serialized_size_std_msgs__msg__Int32+0x28>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	4604      	mov	r4, r0
 8010716:	68db      	ldr	r3, [r3, #12]
 8010718:	4804      	ldr	r0, [pc, #16]	; (801072c <get_serialized_size_std_msgs__msg__Int32+0x2c>)
 801071a:	221b      	movs	r2, #27
 801071c:	2101      	movs	r1, #1
 801071e:	f008 facd 	bl	8018cbc <fwrite>
 8010722:	4620      	mov	r0, r4
 8010724:	bd10      	pop	{r4, pc}
 8010726:	bf00      	nop
 8010728:	20000190 	.word	0x20000190
 801072c:	0801e2a8 	.word	0x0801e2a8

08010730 <_Int32__cdr_serialize>:
 8010730:	b510      	push	{r4, lr}
 8010732:	4604      	mov	r4, r0
 8010734:	b130      	cbz	r0, 8010744 <_Int32__cdr_serialize+0x14>
 8010736:	460b      	mov	r3, r1
 8010738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801073c:	6801      	ldr	r1, [r0, #0]
 801073e:	4618      	mov	r0, r3
 8010740:	f000 be38 	b.w	80113b4 <ucdr_serialize_int32_t>
 8010744:	4b04      	ldr	r3, [pc, #16]	; (8010758 <_Int32__cdr_serialize+0x28>)
 8010746:	4805      	ldr	r0, [pc, #20]	; (801075c <_Int32__cdr_serialize+0x2c>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	221b      	movs	r2, #27
 801074c:	68db      	ldr	r3, [r3, #12]
 801074e:	2101      	movs	r1, #1
 8010750:	f008 fab4 	bl	8018cbc <fwrite>
 8010754:	4620      	mov	r0, r4
 8010756:	bd10      	pop	{r4, pc}
 8010758:	20000190 	.word	0x20000190
 801075c:	0801e2a8 	.word	0x0801e2a8

08010760 <_Int32__cdr_deserialize>:
 8010760:	b109      	cbz	r1, 8010766 <_Int32__cdr_deserialize+0x6>
 8010762:	f000 be57 	b.w	8011414 <ucdr_deserialize_int32_t>
 8010766:	b510      	push	{r4, lr}
 8010768:	4b05      	ldr	r3, [pc, #20]	; (8010780 <_Int32__cdr_deserialize+0x20>)
 801076a:	4806      	ldr	r0, [pc, #24]	; (8010784 <_Int32__cdr_deserialize+0x24>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	460c      	mov	r4, r1
 8010770:	68db      	ldr	r3, [r3, #12]
 8010772:	221b      	movs	r2, #27
 8010774:	2101      	movs	r1, #1
 8010776:	f008 faa1 	bl	8018cbc <fwrite>
 801077a:	4620      	mov	r0, r4
 801077c:	bd10      	pop	{r4, pc}
 801077e:	bf00      	nop
 8010780:	20000190 	.word	0x20000190
 8010784:	0801e2a8 	.word	0x0801e2a8

08010788 <_Int32__get_serialized_size>:
 8010788:	b510      	push	{r4, lr}
 801078a:	b128      	cbz	r0, 8010798 <_Int32__get_serialized_size+0x10>
 801078c:	2104      	movs	r1, #4
 801078e:	2000      	movs	r0, #0
 8010790:	f000 ffd6 	bl	8011740 <ucdr_alignment>
 8010794:	3004      	adds	r0, #4
 8010796:	bd10      	pop	{r4, pc}
 8010798:	4b05      	ldr	r3, [pc, #20]	; (80107b0 <_Int32__get_serialized_size+0x28>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	4604      	mov	r4, r0
 801079e:	68db      	ldr	r3, [r3, #12]
 80107a0:	4804      	ldr	r0, [pc, #16]	; (80107b4 <_Int32__get_serialized_size+0x2c>)
 80107a2:	221b      	movs	r2, #27
 80107a4:	2101      	movs	r1, #1
 80107a6:	f008 fa89 	bl	8018cbc <fwrite>
 80107aa:	4620      	mov	r0, r4
 80107ac:	bd10      	pop	{r4, pc}
 80107ae:	bf00      	nop
 80107b0:	20000190 	.word	0x20000190
 80107b4:	0801e2a8 	.word	0x0801e2a8

080107b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80107b8:	4800      	ldr	r0, [pc, #0]	; (80107bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 80107ba:	4770      	bx	lr
 80107bc:	200000c0 	.word	0x200000c0

080107c0 <_UInt16MultiArray__max_serialized_size>:
 80107c0:	b500      	push	{lr}
 80107c2:	b083      	sub	sp, #12
 80107c4:	2301      	movs	r3, #1
 80107c6:	2100      	movs	r1, #0
 80107c8:	f10d 0007 	add.w	r0, sp, #7
 80107cc:	f88d 3007 	strb.w	r3, [sp, #7]
 80107d0:	f007 fa6c 	bl	8017cac <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 80107d4:	b003      	add	sp, #12
 80107d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80107da:	bf00      	nop

080107dc <get_serialized_size_std_msgs__msg__UInt16MultiArray>:
 80107dc:	b570      	push	{r4, r5, r6, lr}
 80107de:	4604      	mov	r4, r0
 80107e0:	b198      	cbz	r0, 801080a <get_serialized_size_std_msgs__msg__UInt16MultiArray+0x2e>
 80107e2:	460e      	mov	r6, r1
 80107e4:	f007 f9a4 	bl	8017b30 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 80107e8:	1835      	adds	r5, r6, r0
 80107ea:	4628      	mov	r0, r5
 80107ec:	2104      	movs	r1, #4
 80107ee:	6964      	ldr	r4, [r4, #20]
 80107f0:	f000 ffa6 	bl	8011740 <ucdr_alignment>
 80107f4:	3004      	adds	r0, #4
 80107f6:	4405      	add	r5, r0
 80107f8:	4628      	mov	r0, r5
 80107fa:	2102      	movs	r1, #2
 80107fc:	f000 ffa0 	bl	8011740 <ucdr_alignment>
 8010800:	ebc6 0644 	rsb	r6, r6, r4, lsl #1
 8010804:	4430      	add	r0, r6
 8010806:	4428      	add	r0, r5
 8010808:	bd70      	pop	{r4, r5, r6, pc}
 801080a:	4b05      	ldr	r3, [pc, #20]	; (8010820 <get_serialized_size_std_msgs__msg__UInt16MultiArray+0x44>)
 801080c:	4805      	ldr	r0, [pc, #20]	; (8010824 <get_serialized_size_std_msgs__msg__UInt16MultiArray+0x48>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	221b      	movs	r2, #27
 8010812:	68db      	ldr	r3, [r3, #12]
 8010814:	2101      	movs	r1, #1
 8010816:	f008 fa51 	bl	8018cbc <fwrite>
 801081a:	4620      	mov	r0, r4
 801081c:	bd70      	pop	{r4, r5, r6, pc}
 801081e:	bf00      	nop
 8010820:	20000190 	.word	0x20000190
 8010824:	0801e2a8 	.word	0x0801e2a8

08010828 <_UInt16MultiArray__cdr_deserialize>:
 8010828:	b5f0      	push	{r4, r5, r6, r7, lr}
 801082a:	460c      	mov	r4, r1
 801082c:	b083      	sub	sp, #12
 801082e:	b1d9      	cbz	r1, 8010868 <_UInt16MultiArray__cdr_deserialize+0x40>
 8010830:	4607      	mov	r7, r0
 8010832:	f007 fa45 	bl	8017cc0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8010836:	6843      	ldr	r3, [r0, #4]
 8010838:	4621      	mov	r1, r4
 801083a:	68db      	ldr	r3, [r3, #12]
 801083c:	4638      	mov	r0, r7
 801083e:	4798      	blx	r3
 8010840:	69a6      	ldr	r6, [r4, #24]
 8010842:	6921      	ldr	r1, [r4, #16]
 8010844:	4632      	mov	r2, r6
 8010846:	ab01      	add	r3, sp, #4
 8010848:	4638      	mov	r0, r7
 801084a:	f001 f839 	bl	80118c0 <ucdr_deserialize_sequence_uint16_t>
 801084e:	4605      	mov	r5, r0
 8010850:	b928      	cbnz	r0, 801085e <_UInt16MultiArray__cdr_deserialize+0x36>
 8010852:	9901      	ldr	r1, [sp, #4]
 8010854:	42b1      	cmp	r1, r6
 8010856:	d813      	bhi.n	8010880 <_UInt16MultiArray__cdr_deserialize+0x58>
 8010858:	4628      	mov	r0, r5
 801085a:	b003      	add	sp, #12
 801085c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801085e:	9b01      	ldr	r3, [sp, #4]
 8010860:	6163      	str	r3, [r4, #20]
 8010862:	4628      	mov	r0, r5
 8010864:	b003      	add	sp, #12
 8010866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010868:	4b0a      	ldr	r3, [pc, #40]	; (8010894 <_UInt16MultiArray__cdr_deserialize+0x6c>)
 801086a:	480b      	ldr	r0, [pc, #44]	; (8010898 <_UInt16MultiArray__cdr_deserialize+0x70>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	221b      	movs	r2, #27
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	2101      	movs	r1, #1
 8010874:	f008 fa22 	bl	8018cbc <fwrite>
 8010878:	4625      	mov	r5, r4
 801087a:	4628      	mov	r0, r5
 801087c:	b003      	add	sp, #12
 801087e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010880:	75b8      	strb	r0, [r7, #22]
 8010882:	0049      	lsls	r1, r1, #1
 8010884:	6160      	str	r0, [r4, #20]
 8010886:	4638      	mov	r0, r7
 8010888:	f000 ffaa 	bl	80117e0 <ucdr_advance_buffer>
 801088c:	4628      	mov	r0, r5
 801088e:	b003      	add	sp, #12
 8010890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010892:	bf00      	nop
 8010894:	20000190 	.word	0x20000190
 8010898:	0801e2a8 	.word	0x0801e2a8

0801089c <_UInt16MultiArray__cdr_serialize>:
 801089c:	b538      	push	{r3, r4, r5, lr}
 801089e:	4604      	mov	r4, r0
 80108a0:	b170      	cbz	r0, 80108c0 <_UInt16MultiArray__cdr_serialize+0x24>
 80108a2:	460d      	mov	r5, r1
 80108a4:	f007 fa0c 	bl	8017cc0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 80108a8:	6843      	ldr	r3, [r0, #4]
 80108aa:	4629      	mov	r1, r5
 80108ac:	689b      	ldr	r3, [r3, #8]
 80108ae:	4620      	mov	r0, r4
 80108b0:	4798      	blx	r3
 80108b2:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 80108b6:	4628      	mov	r0, r5
 80108b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108bc:	f000 bfee 	b.w	801189c <ucdr_serialize_sequence_uint16_t>
 80108c0:	4b04      	ldr	r3, [pc, #16]	; (80108d4 <_UInt16MultiArray__cdr_serialize+0x38>)
 80108c2:	4805      	ldr	r0, [pc, #20]	; (80108d8 <_UInt16MultiArray__cdr_serialize+0x3c>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	221b      	movs	r2, #27
 80108c8:	68db      	ldr	r3, [r3, #12]
 80108ca:	2101      	movs	r1, #1
 80108cc:	f008 f9f6 	bl	8018cbc <fwrite>
 80108d0:	4620      	mov	r0, r4
 80108d2:	bd38      	pop	{r3, r4, r5, pc}
 80108d4:	20000190 	.word	0x20000190
 80108d8:	0801e2a8 	.word	0x0801e2a8

080108dc <_UInt16MultiArray__get_serialized_size>:
 80108dc:	b538      	push	{r3, r4, r5, lr}
 80108de:	4604      	mov	r4, r0
 80108e0:	b188      	cbz	r0, 8010906 <_UInt16MultiArray__get_serialized_size+0x2a>
 80108e2:	2100      	movs	r1, #0
 80108e4:	f007 f924 	bl	8017b30 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 80108e8:	2104      	movs	r1, #4
 80108ea:	6965      	ldr	r5, [r4, #20]
 80108ec:	4604      	mov	r4, r0
 80108ee:	f000 ff27 	bl	8011740 <ucdr_alignment>
 80108f2:	4420      	add	r0, r4
 80108f4:	1d04      	adds	r4, r0, #4
 80108f6:	4620      	mov	r0, r4
 80108f8:	2102      	movs	r1, #2
 80108fa:	f000 ff21 	bl	8011740 <ucdr_alignment>
 80108fe:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 8010902:	4420      	add	r0, r4
 8010904:	bd38      	pop	{r3, r4, r5, pc}
 8010906:	4b05      	ldr	r3, [pc, #20]	; (801091c <_UInt16MultiArray__get_serialized_size+0x40>)
 8010908:	4805      	ldr	r0, [pc, #20]	; (8010920 <_UInt16MultiArray__get_serialized_size+0x44>)
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	221b      	movs	r2, #27
 801090e:	68db      	ldr	r3, [r3, #12]
 8010910:	2101      	movs	r1, #1
 8010912:	f008 f9d3 	bl	8018cbc <fwrite>
 8010916:	4620      	mov	r0, r4
 8010918:	bd38      	pop	{r3, r4, r5, pc}
 801091a:	bf00      	nop
 801091c:	20000190 	.word	0x20000190
 8010920:	0801e2a8 	.word	0x0801e2a8

08010924 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>:
 8010924:	4800      	ldr	r0, [pc, #0]	; (8010928 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0x4>)
 8010926:	4770      	bx	lr
 8010928:	200000e8 	.word	0x200000e8

0801092c <get_serialized_size_builtin_interfaces__msg__Time>:
 801092c:	b538      	push	{r3, r4, r5, lr}
 801092e:	b178      	cbz	r0, 8010950 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8010930:	460d      	mov	r5, r1
 8010932:	4628      	mov	r0, r5
 8010934:	2104      	movs	r1, #4
 8010936:	f000 ff03 	bl	8011740 <ucdr_alignment>
 801093a:	1d2c      	adds	r4, r5, #4
 801093c:	4404      	add	r4, r0
 801093e:	4620      	mov	r0, r4
 8010940:	2104      	movs	r1, #4
 8010942:	f000 fefd 	bl	8011740 <ucdr_alignment>
 8010946:	f1c5 0504 	rsb	r5, r5, #4
 801094a:	4428      	add	r0, r5
 801094c:	4420      	add	r0, r4
 801094e:	bd38      	pop	{r3, r4, r5, pc}
 8010950:	4b05      	ldr	r3, [pc, #20]	; (8010968 <get_serialized_size_builtin_interfaces__msg__Time+0x3c>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	4604      	mov	r4, r0
 8010956:	68db      	ldr	r3, [r3, #12]
 8010958:	4804      	ldr	r0, [pc, #16]	; (801096c <get_serialized_size_builtin_interfaces__msg__Time+0x40>)
 801095a:	221b      	movs	r2, #27
 801095c:	2101      	movs	r1, #1
 801095e:	f008 f9ad 	bl	8018cbc <fwrite>
 8010962:	4620      	mov	r0, r4
 8010964:	bd38      	pop	{r3, r4, r5, pc}
 8010966:	bf00      	nop
 8010968:	20000190 	.word	0x20000190
 801096c:	0801e2a8 	.word	0x0801e2a8

08010970 <_Time__cdr_serialize>:
 8010970:	b538      	push	{r3, r4, r5, lr}
 8010972:	4604      	mov	r4, r0
 8010974:	b150      	cbz	r0, 801098c <_Time__cdr_serialize+0x1c>
 8010976:	460d      	mov	r5, r1
 8010978:	6801      	ldr	r1, [r0, #0]
 801097a:	4628      	mov	r0, r5
 801097c:	f000 fd1a 	bl	80113b4 <ucdr_serialize_int32_t>
 8010980:	6861      	ldr	r1, [r4, #4]
 8010982:	4628      	mov	r0, r5
 8010984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010988:	f000 bbb6 	b.w	80110f8 <ucdr_serialize_uint32_t>
 801098c:	4b04      	ldr	r3, [pc, #16]	; (80109a0 <_Time__cdr_serialize+0x30>)
 801098e:	4805      	ldr	r0, [pc, #20]	; (80109a4 <_Time__cdr_serialize+0x34>)
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	221b      	movs	r2, #27
 8010994:	68db      	ldr	r3, [r3, #12]
 8010996:	2101      	movs	r1, #1
 8010998:	f008 f990 	bl	8018cbc <fwrite>
 801099c:	4620      	mov	r0, r4
 801099e:	bd38      	pop	{r3, r4, r5, pc}
 80109a0:	20000190 	.word	0x20000190
 80109a4:	0801e2a8 	.word	0x0801e2a8

080109a8 <_Time__cdr_deserialize>:
 80109a8:	b538      	push	{r3, r4, r5, lr}
 80109aa:	460c      	mov	r4, r1
 80109ac:	b141      	cbz	r1, 80109c0 <_Time__cdr_deserialize+0x18>
 80109ae:	4605      	mov	r5, r0
 80109b0:	f000 fd30 	bl	8011414 <ucdr_deserialize_int32_t>
 80109b4:	1d21      	adds	r1, r4, #4
 80109b6:	4628      	mov	r0, r5
 80109b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109bc:	f000 bbfc 	b.w	80111b8 <ucdr_deserialize_uint32_t>
 80109c0:	4b04      	ldr	r3, [pc, #16]	; (80109d4 <_Time__cdr_deserialize+0x2c>)
 80109c2:	4805      	ldr	r0, [pc, #20]	; (80109d8 <_Time__cdr_deserialize+0x30>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	221b      	movs	r2, #27
 80109c8:	68db      	ldr	r3, [r3, #12]
 80109ca:	2101      	movs	r1, #1
 80109cc:	f008 f976 	bl	8018cbc <fwrite>
 80109d0:	4620      	mov	r0, r4
 80109d2:	bd38      	pop	{r3, r4, r5, pc}
 80109d4:	20000190 	.word	0x20000190
 80109d8:	0801e2a8 	.word	0x0801e2a8

080109dc <_Time__max_serialized_size>:
 80109dc:	b510      	push	{r4, lr}
 80109de:	2104      	movs	r1, #4
 80109e0:	2000      	movs	r0, #0
 80109e2:	f000 fead 	bl	8011740 <ucdr_alignment>
 80109e6:	1d04      	adds	r4, r0, #4
 80109e8:	4620      	mov	r0, r4
 80109ea:	2104      	movs	r1, #4
 80109ec:	f000 fea8 	bl	8011740 <ucdr_alignment>
 80109f0:	3004      	adds	r0, #4
 80109f2:	4420      	add	r0, r4
 80109f4:	bd10      	pop	{r4, pc}
 80109f6:	bf00      	nop

080109f8 <_Time__get_serialized_size>:
 80109f8:	b510      	push	{r4, lr}
 80109fa:	b158      	cbz	r0, 8010a14 <_Time__get_serialized_size+0x1c>
 80109fc:	2104      	movs	r1, #4
 80109fe:	2000      	movs	r0, #0
 8010a00:	f000 fe9e 	bl	8011740 <ucdr_alignment>
 8010a04:	1d04      	adds	r4, r0, #4
 8010a06:	4620      	mov	r0, r4
 8010a08:	2104      	movs	r1, #4
 8010a0a:	f000 fe99 	bl	8011740 <ucdr_alignment>
 8010a0e:	3004      	adds	r0, #4
 8010a10:	4420      	add	r0, r4
 8010a12:	bd10      	pop	{r4, pc}
 8010a14:	4b05      	ldr	r3, [pc, #20]	; (8010a2c <_Time__get_serialized_size+0x34>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	4604      	mov	r4, r0
 8010a1a:	68db      	ldr	r3, [r3, #12]
 8010a1c:	4804      	ldr	r0, [pc, #16]	; (8010a30 <_Time__get_serialized_size+0x38>)
 8010a1e:	221b      	movs	r2, #27
 8010a20:	2101      	movs	r1, #1
 8010a22:	f008 f94b 	bl	8018cbc <fwrite>
 8010a26:	4620      	mov	r0, r4
 8010a28:	bd10      	pop	{r4, pc}
 8010a2a:	bf00      	nop
 8010a2c:	20000190 	.word	0x20000190
 8010a30:	0801e2a8 	.word	0x0801e2a8

08010a34 <max_serialized_size_builtin_interfaces__msg__Time>:
 8010a34:	b538      	push	{r3, r4, r5, lr}
 8010a36:	2301      	movs	r3, #1
 8010a38:	7003      	strb	r3, [r0, #0]
 8010a3a:	460c      	mov	r4, r1
 8010a3c:	4608      	mov	r0, r1
 8010a3e:	2104      	movs	r1, #4
 8010a40:	f000 fe7e 	bl	8011740 <ucdr_alignment>
 8010a44:	1d25      	adds	r5, r4, #4
 8010a46:	4405      	add	r5, r0
 8010a48:	4628      	mov	r0, r5
 8010a4a:	2104      	movs	r1, #4
 8010a4c:	f000 fe78 	bl	8011740 <ucdr_alignment>
 8010a50:	f1c4 0404 	rsb	r4, r4, #4
 8010a54:	4420      	add	r0, r4
 8010a56:	4428      	add	r0, r5
 8010a58:	bd38      	pop	{r3, r4, r5, pc}
 8010a5a:	bf00      	nop

08010a5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8010a5c:	4800      	ldr	r0, [pc, #0]	; (8010a60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8010a5e:	4770      	bx	lr
 8010a60:	20000110 	.word	0x20000110

08010a64 <ucdr_serialize_endian_array_char>:
 8010a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a68:	4619      	mov	r1, r3
 8010a6a:	461e      	mov	r6, r3
 8010a6c:	4690      	mov	r8, r2
 8010a6e:	4604      	mov	r4, r0
 8010a70:	f000 fe10 	bl	8011694 <ucdr_check_buffer_available_for>
 8010a74:	b9e0      	cbnz	r0, 8010ab0 <ucdr_serialize_endian_array_char+0x4c>
 8010a76:	4637      	mov	r7, r6
 8010a78:	e009      	b.n	8010a8e <ucdr_serialize_endian_array_char+0x2a>
 8010a7a:	68a0      	ldr	r0, [r4, #8]
 8010a7c:	f008 f9aa 	bl	8018dd4 <memcpy>
 8010a80:	68a2      	ldr	r2, [r4, #8]
 8010a82:	6923      	ldr	r3, [r4, #16]
 8010a84:	442a      	add	r2, r5
 8010a86:	442b      	add	r3, r5
 8010a88:	1b7f      	subs	r7, r7, r5
 8010a8a:	60a2      	str	r2, [r4, #8]
 8010a8c:	6123      	str	r3, [r4, #16]
 8010a8e:	2201      	movs	r2, #1
 8010a90:	4639      	mov	r1, r7
 8010a92:	4620      	mov	r0, r4
 8010a94:	f000 fe86 	bl	80117a4 <ucdr_check_final_buffer_behavior_array>
 8010a98:	1bf1      	subs	r1, r6, r7
 8010a9a:	4441      	add	r1, r8
 8010a9c:	4605      	mov	r5, r0
 8010a9e:	4602      	mov	r2, r0
 8010aa0:	2800      	cmp	r0, #0
 8010aa2:	d1ea      	bne.n	8010a7a <ucdr_serialize_endian_array_char+0x16>
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	7da0      	ldrb	r0, [r4, #22]
 8010aa8:	7563      	strb	r3, [r4, #21]
 8010aaa:	4058      	eors	r0, r3
 8010aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ab0:	4632      	mov	r2, r6
 8010ab2:	68a0      	ldr	r0, [r4, #8]
 8010ab4:	4641      	mov	r1, r8
 8010ab6:	f008 f98d 	bl	8018dd4 <memcpy>
 8010aba:	68a2      	ldr	r2, [r4, #8]
 8010abc:	6923      	ldr	r3, [r4, #16]
 8010abe:	4432      	add	r2, r6
 8010ac0:	4433      	add	r3, r6
 8010ac2:	60a2      	str	r2, [r4, #8]
 8010ac4:	6123      	str	r3, [r4, #16]
 8010ac6:	e7ed      	b.n	8010aa4 <ucdr_serialize_endian_array_char+0x40>

08010ac8 <ucdr_deserialize_endian_array_char>:
 8010ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010acc:	4619      	mov	r1, r3
 8010ace:	461e      	mov	r6, r3
 8010ad0:	4690      	mov	r8, r2
 8010ad2:	4604      	mov	r4, r0
 8010ad4:	f000 fdde 	bl	8011694 <ucdr_check_buffer_available_for>
 8010ad8:	b9e0      	cbnz	r0, 8010b14 <ucdr_deserialize_endian_array_char+0x4c>
 8010ada:	4637      	mov	r7, r6
 8010adc:	e009      	b.n	8010af2 <ucdr_deserialize_endian_array_char+0x2a>
 8010ade:	68a1      	ldr	r1, [r4, #8]
 8010ae0:	f008 f978 	bl	8018dd4 <memcpy>
 8010ae4:	68a2      	ldr	r2, [r4, #8]
 8010ae6:	6923      	ldr	r3, [r4, #16]
 8010ae8:	442a      	add	r2, r5
 8010aea:	442b      	add	r3, r5
 8010aec:	1b7f      	subs	r7, r7, r5
 8010aee:	60a2      	str	r2, [r4, #8]
 8010af0:	6123      	str	r3, [r4, #16]
 8010af2:	2201      	movs	r2, #1
 8010af4:	4639      	mov	r1, r7
 8010af6:	4620      	mov	r0, r4
 8010af8:	f000 fe54 	bl	80117a4 <ucdr_check_final_buffer_behavior_array>
 8010afc:	4605      	mov	r5, r0
 8010afe:	1bf0      	subs	r0, r6, r7
 8010b00:	4440      	add	r0, r8
 8010b02:	462a      	mov	r2, r5
 8010b04:	2d00      	cmp	r5, #0
 8010b06:	d1ea      	bne.n	8010ade <ucdr_deserialize_endian_array_char+0x16>
 8010b08:	2301      	movs	r3, #1
 8010b0a:	7da0      	ldrb	r0, [r4, #22]
 8010b0c:	7563      	strb	r3, [r4, #21]
 8010b0e:	4058      	eors	r0, r3
 8010b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b14:	4632      	mov	r2, r6
 8010b16:	68a1      	ldr	r1, [r4, #8]
 8010b18:	4640      	mov	r0, r8
 8010b1a:	f008 f95b 	bl	8018dd4 <memcpy>
 8010b1e:	68a2      	ldr	r2, [r4, #8]
 8010b20:	6923      	ldr	r3, [r4, #16]
 8010b22:	4432      	add	r2, r6
 8010b24:	4433      	add	r3, r6
 8010b26:	60a2      	str	r2, [r4, #8]
 8010b28:	6123      	str	r3, [r4, #16]
 8010b2a:	e7ed      	b.n	8010b08 <ucdr_deserialize_endian_array_char+0x40>

08010b2c <ucdr_serialize_array_uint8_t>:
 8010b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b30:	4688      	mov	r8, r1
 8010b32:	4611      	mov	r1, r2
 8010b34:	4616      	mov	r6, r2
 8010b36:	4604      	mov	r4, r0
 8010b38:	f000 fdac 	bl	8011694 <ucdr_check_buffer_available_for>
 8010b3c:	b9e0      	cbnz	r0, 8010b78 <ucdr_serialize_array_uint8_t+0x4c>
 8010b3e:	4637      	mov	r7, r6
 8010b40:	e009      	b.n	8010b56 <ucdr_serialize_array_uint8_t+0x2a>
 8010b42:	68a0      	ldr	r0, [r4, #8]
 8010b44:	f008 f946 	bl	8018dd4 <memcpy>
 8010b48:	68a2      	ldr	r2, [r4, #8]
 8010b4a:	6923      	ldr	r3, [r4, #16]
 8010b4c:	442a      	add	r2, r5
 8010b4e:	442b      	add	r3, r5
 8010b50:	1b7f      	subs	r7, r7, r5
 8010b52:	60a2      	str	r2, [r4, #8]
 8010b54:	6123      	str	r3, [r4, #16]
 8010b56:	2201      	movs	r2, #1
 8010b58:	4639      	mov	r1, r7
 8010b5a:	4620      	mov	r0, r4
 8010b5c:	f000 fe22 	bl	80117a4 <ucdr_check_final_buffer_behavior_array>
 8010b60:	1bf1      	subs	r1, r6, r7
 8010b62:	4441      	add	r1, r8
 8010b64:	4605      	mov	r5, r0
 8010b66:	4602      	mov	r2, r0
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	d1ea      	bne.n	8010b42 <ucdr_serialize_array_uint8_t+0x16>
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	7da0      	ldrb	r0, [r4, #22]
 8010b70:	7563      	strb	r3, [r4, #21]
 8010b72:	4058      	eors	r0, r3
 8010b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b78:	4632      	mov	r2, r6
 8010b7a:	68a0      	ldr	r0, [r4, #8]
 8010b7c:	4641      	mov	r1, r8
 8010b7e:	f008 f929 	bl	8018dd4 <memcpy>
 8010b82:	68a3      	ldr	r3, [r4, #8]
 8010b84:	6922      	ldr	r2, [r4, #16]
 8010b86:	4433      	add	r3, r6
 8010b88:	4432      	add	r2, r6
 8010b8a:	60a3      	str	r3, [r4, #8]
 8010b8c:	6122      	str	r2, [r4, #16]
 8010b8e:	e7ed      	b.n	8010b6c <ucdr_serialize_array_uint8_t+0x40>

08010b90 <ucdr_serialize_endian_array_uint8_t>:
 8010b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b94:	4619      	mov	r1, r3
 8010b96:	461e      	mov	r6, r3
 8010b98:	4690      	mov	r8, r2
 8010b9a:	4604      	mov	r4, r0
 8010b9c:	f000 fd7a 	bl	8011694 <ucdr_check_buffer_available_for>
 8010ba0:	b9e0      	cbnz	r0, 8010bdc <ucdr_serialize_endian_array_uint8_t+0x4c>
 8010ba2:	4637      	mov	r7, r6
 8010ba4:	e009      	b.n	8010bba <ucdr_serialize_endian_array_uint8_t+0x2a>
 8010ba6:	68a0      	ldr	r0, [r4, #8]
 8010ba8:	f008 f914 	bl	8018dd4 <memcpy>
 8010bac:	68a2      	ldr	r2, [r4, #8]
 8010bae:	6923      	ldr	r3, [r4, #16]
 8010bb0:	442a      	add	r2, r5
 8010bb2:	442b      	add	r3, r5
 8010bb4:	1b7f      	subs	r7, r7, r5
 8010bb6:	60a2      	str	r2, [r4, #8]
 8010bb8:	6123      	str	r3, [r4, #16]
 8010bba:	2201      	movs	r2, #1
 8010bbc:	4639      	mov	r1, r7
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	f000 fdf0 	bl	80117a4 <ucdr_check_final_buffer_behavior_array>
 8010bc4:	1bf1      	subs	r1, r6, r7
 8010bc6:	4441      	add	r1, r8
 8010bc8:	4605      	mov	r5, r0
 8010bca:	4602      	mov	r2, r0
 8010bcc:	2800      	cmp	r0, #0
 8010bce:	d1ea      	bne.n	8010ba6 <ucdr_serialize_endian_array_uint8_t+0x16>
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	7da0      	ldrb	r0, [r4, #22]
 8010bd4:	7563      	strb	r3, [r4, #21]
 8010bd6:	4058      	eors	r0, r3
 8010bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bdc:	4632      	mov	r2, r6
 8010bde:	68a0      	ldr	r0, [r4, #8]
 8010be0:	4641      	mov	r1, r8
 8010be2:	f008 f8f7 	bl	8018dd4 <memcpy>
 8010be6:	68a2      	ldr	r2, [r4, #8]
 8010be8:	6923      	ldr	r3, [r4, #16]
 8010bea:	4432      	add	r2, r6
 8010bec:	4433      	add	r3, r6
 8010bee:	60a2      	str	r2, [r4, #8]
 8010bf0:	6123      	str	r3, [r4, #16]
 8010bf2:	e7ed      	b.n	8010bd0 <ucdr_serialize_endian_array_uint8_t+0x40>

08010bf4 <ucdr_deserialize_array_uint8_t>:
 8010bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bf8:	4688      	mov	r8, r1
 8010bfa:	4611      	mov	r1, r2
 8010bfc:	4616      	mov	r6, r2
 8010bfe:	4604      	mov	r4, r0
 8010c00:	f000 fd48 	bl	8011694 <ucdr_check_buffer_available_for>
 8010c04:	b9e0      	cbnz	r0, 8010c40 <ucdr_deserialize_array_uint8_t+0x4c>
 8010c06:	4637      	mov	r7, r6
 8010c08:	e009      	b.n	8010c1e <ucdr_deserialize_array_uint8_t+0x2a>
 8010c0a:	68a1      	ldr	r1, [r4, #8]
 8010c0c:	f008 f8e2 	bl	8018dd4 <memcpy>
 8010c10:	68a2      	ldr	r2, [r4, #8]
 8010c12:	6923      	ldr	r3, [r4, #16]
 8010c14:	442a      	add	r2, r5
 8010c16:	442b      	add	r3, r5
 8010c18:	1b7f      	subs	r7, r7, r5
 8010c1a:	60a2      	str	r2, [r4, #8]
 8010c1c:	6123      	str	r3, [r4, #16]
 8010c1e:	2201      	movs	r2, #1
 8010c20:	4639      	mov	r1, r7
 8010c22:	4620      	mov	r0, r4
 8010c24:	f000 fdbe 	bl	80117a4 <ucdr_check_final_buffer_behavior_array>
 8010c28:	4605      	mov	r5, r0
 8010c2a:	1bf0      	subs	r0, r6, r7
 8010c2c:	4440      	add	r0, r8
 8010c2e:	462a      	mov	r2, r5
 8010c30:	2d00      	cmp	r5, #0
 8010c32:	d1ea      	bne.n	8010c0a <ucdr_deserialize_array_uint8_t+0x16>
 8010c34:	2301      	movs	r3, #1
 8010c36:	7da0      	ldrb	r0, [r4, #22]
 8010c38:	7563      	strb	r3, [r4, #21]
 8010c3a:	4058      	eors	r0, r3
 8010c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c40:	4632      	mov	r2, r6
 8010c42:	68a1      	ldr	r1, [r4, #8]
 8010c44:	4640      	mov	r0, r8
 8010c46:	f008 f8c5 	bl	8018dd4 <memcpy>
 8010c4a:	68a3      	ldr	r3, [r4, #8]
 8010c4c:	6922      	ldr	r2, [r4, #16]
 8010c4e:	4433      	add	r3, r6
 8010c50:	4432      	add	r2, r6
 8010c52:	60a3      	str	r3, [r4, #8]
 8010c54:	6122      	str	r2, [r4, #16]
 8010c56:	e7ed      	b.n	8010c34 <ucdr_deserialize_array_uint8_t+0x40>

08010c58 <ucdr_serialize_endian_array_uint16_t>:
 8010c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c5c:	4605      	mov	r5, r0
 8010c5e:	460f      	mov	r7, r1
 8010c60:	2102      	movs	r1, #2
 8010c62:	4614      	mov	r4, r2
 8010c64:	461e      	mov	r6, r3
 8010c66:	f000 fd73 	bl	8011750 <ucdr_buffer_alignment>
 8010c6a:	68aa      	ldr	r2, [r5, #8]
 8010c6c:	692b      	ldr	r3, [r5, #16]
 8010c6e:	4402      	add	r2, r0
 8010c70:	2f01      	cmp	r7, #1
 8010c72:	4418      	add	r0, r3
 8010c74:	60aa      	str	r2, [r5, #8]
 8010c76:	6128      	str	r0, [r5, #16]
 8010c78:	d010      	beq.n	8010c9c <ucdr_serialize_endian_array_uint16_t+0x44>
 8010c7a:	b156      	cbz	r6, 8010c92 <ucdr_serialize_endian_array_uint16_t+0x3a>
 8010c7c:	3c02      	subs	r4, #2
 8010c7e:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 8010c82:	f834 2f02 	ldrh.w	r2, [r4, #2]!
 8010c86:	4639      	mov	r1, r7
 8010c88:	4628      	mov	r0, r5
 8010c8a:	f000 f9b9 	bl	8011000 <ucdr_serialize_endian_uint16_t>
 8010c8e:	42b4      	cmp	r4, r6
 8010c90:	d1f7      	bne.n	8010c82 <ucdr_serialize_endian_array_uint16_t+0x2a>
 8010c92:	7da8      	ldrb	r0, [r5, #22]
 8010c94:	f080 0001 	eor.w	r0, r0, #1
 8010c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c9c:	0076      	lsls	r6, r6, #1
 8010c9e:	4631      	mov	r1, r6
 8010ca0:	4628      	mov	r0, r5
 8010ca2:	f000 fcf7 	bl	8011694 <ucdr_check_buffer_available_for>
 8010ca6:	b9f8      	cbnz	r0, 8010ce8 <ucdr_serialize_endian_array_uint16_t+0x90>
 8010ca8:	46b0      	mov	r8, r6
 8010caa:	e00a      	b.n	8010cc2 <ucdr_serialize_endian_array_uint16_t+0x6a>
 8010cac:	68a8      	ldr	r0, [r5, #8]
 8010cae:	f008 f891 	bl	8018dd4 <memcpy>
 8010cb2:	68aa      	ldr	r2, [r5, #8]
 8010cb4:	692b      	ldr	r3, [r5, #16]
 8010cb6:	443a      	add	r2, r7
 8010cb8:	443b      	add	r3, r7
 8010cba:	eba8 0807 	sub.w	r8, r8, r7
 8010cbe:	60aa      	str	r2, [r5, #8]
 8010cc0:	612b      	str	r3, [r5, #16]
 8010cc2:	2202      	movs	r2, #2
 8010cc4:	4641      	mov	r1, r8
 8010cc6:	4628      	mov	r0, r5
 8010cc8:	f000 fd6c 	bl	80117a4 <ucdr_check_final_buffer_behavior_array>
 8010ccc:	eba6 0108 	sub.w	r1, r6, r8
 8010cd0:	4421      	add	r1, r4
 8010cd2:	4607      	mov	r7, r0
 8010cd4:	4602      	mov	r2, r0
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	d1e8      	bne.n	8010cac <ucdr_serialize_endian_array_uint16_t+0x54>
 8010cda:	7da8      	ldrb	r0, [r5, #22]
 8010cdc:	2302      	movs	r3, #2
 8010cde:	756b      	strb	r3, [r5, #21]
 8010ce0:	f080 0001 	eor.w	r0, r0, #1
 8010ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ce8:	4632      	mov	r2, r6
 8010cea:	68a8      	ldr	r0, [r5, #8]
 8010cec:	4621      	mov	r1, r4
 8010cee:	f008 f871 	bl	8018dd4 <memcpy>
 8010cf2:	68aa      	ldr	r2, [r5, #8]
 8010cf4:	692b      	ldr	r3, [r5, #16]
 8010cf6:	4432      	add	r2, r6
 8010cf8:	441e      	add	r6, r3
 8010cfa:	60aa      	str	r2, [r5, #8]
 8010cfc:	612e      	str	r6, [r5, #16]
 8010cfe:	e7ec      	b.n	8010cda <ucdr_serialize_endian_array_uint16_t+0x82>

08010d00 <ucdr_deserialize_endian_array_uint16_t>:
 8010d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d04:	4605      	mov	r5, r0
 8010d06:	460f      	mov	r7, r1
 8010d08:	2102      	movs	r1, #2
 8010d0a:	4614      	mov	r4, r2
 8010d0c:	461e      	mov	r6, r3
 8010d0e:	f000 fd1f 	bl	8011750 <ucdr_buffer_alignment>
 8010d12:	68aa      	ldr	r2, [r5, #8]
 8010d14:	692b      	ldr	r3, [r5, #16]
 8010d16:	4402      	add	r2, r0
 8010d18:	2f01      	cmp	r7, #1
 8010d1a:	4418      	add	r0, r3
 8010d1c:	60aa      	str	r2, [r5, #8]
 8010d1e:	6128      	str	r0, [r5, #16]
 8010d20:	d00f      	beq.n	8010d42 <ucdr_deserialize_endian_array_uint16_t+0x42>
 8010d22:	b14e      	cbz	r6, 8010d38 <ucdr_deserialize_endian_array_uint16_t+0x38>
 8010d24:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 8010d28:	4622      	mov	r2, r4
 8010d2a:	4639      	mov	r1, r7
 8010d2c:	3402      	adds	r4, #2
 8010d2e:	4628      	mov	r0, r5
 8010d30:	f000 f9b8 	bl	80110a4 <ucdr_deserialize_endian_uint16_t>
 8010d34:	42a6      	cmp	r6, r4
 8010d36:	d1f7      	bne.n	8010d28 <ucdr_deserialize_endian_array_uint16_t+0x28>
 8010d38:	7da8      	ldrb	r0, [r5, #22]
 8010d3a:	f080 0001 	eor.w	r0, r0, #1
 8010d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d42:	0076      	lsls	r6, r6, #1
 8010d44:	4631      	mov	r1, r6
 8010d46:	4628      	mov	r0, r5
 8010d48:	f000 fca4 	bl	8011694 <ucdr_check_buffer_available_for>
 8010d4c:	b9f8      	cbnz	r0, 8010d8e <ucdr_deserialize_endian_array_uint16_t+0x8e>
 8010d4e:	46b0      	mov	r8, r6
 8010d50:	e00a      	b.n	8010d68 <ucdr_deserialize_endian_array_uint16_t+0x68>
 8010d52:	68a9      	ldr	r1, [r5, #8]
 8010d54:	f008 f83e 	bl	8018dd4 <memcpy>
 8010d58:	68aa      	ldr	r2, [r5, #8]
 8010d5a:	692b      	ldr	r3, [r5, #16]
 8010d5c:	443a      	add	r2, r7
 8010d5e:	443b      	add	r3, r7
 8010d60:	eba8 0807 	sub.w	r8, r8, r7
 8010d64:	60aa      	str	r2, [r5, #8]
 8010d66:	612b      	str	r3, [r5, #16]
 8010d68:	2202      	movs	r2, #2
 8010d6a:	4641      	mov	r1, r8
 8010d6c:	4628      	mov	r0, r5
 8010d6e:	f000 fd19 	bl	80117a4 <ucdr_check_final_buffer_behavior_array>
 8010d72:	4607      	mov	r7, r0
 8010d74:	eba6 0008 	sub.w	r0, r6, r8
 8010d78:	4420      	add	r0, r4
 8010d7a:	463a      	mov	r2, r7
 8010d7c:	2f00      	cmp	r7, #0
 8010d7e:	d1e8      	bne.n	8010d52 <ucdr_deserialize_endian_array_uint16_t+0x52>
 8010d80:	7da8      	ldrb	r0, [r5, #22]
 8010d82:	2302      	movs	r3, #2
 8010d84:	756b      	strb	r3, [r5, #21]
 8010d86:	f080 0001 	eor.w	r0, r0, #1
 8010d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d8e:	4632      	mov	r2, r6
 8010d90:	68a9      	ldr	r1, [r5, #8]
 8010d92:	4620      	mov	r0, r4
 8010d94:	f008 f81e 	bl	8018dd4 <memcpy>
 8010d98:	68aa      	ldr	r2, [r5, #8]
 8010d9a:	692b      	ldr	r3, [r5, #16]
 8010d9c:	4432      	add	r2, r6
 8010d9e:	441e      	add	r6, r3
 8010da0:	60aa      	str	r2, [r5, #8]
 8010da2:	612e      	str	r6, [r5, #16]
 8010da4:	e7ec      	b.n	8010d80 <ucdr_deserialize_endian_array_uint16_t+0x80>
 8010da6:	bf00      	nop

08010da8 <ucdr_serialize_array_double>:
 8010da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dac:	4604      	mov	r4, r0
 8010dae:	460d      	mov	r5, r1
 8010db0:	2108      	movs	r1, #8
 8010db2:	4616      	mov	r6, r2
 8010db4:	f000 fccc 	bl	8011750 <ucdr_buffer_alignment>
 8010db8:	68a2      	ldr	r2, [r4, #8]
 8010dba:	6923      	ldr	r3, [r4, #16]
 8010dbc:	7d21      	ldrb	r1, [r4, #20]
 8010dbe:	4402      	add	r2, r0
 8010dc0:	2901      	cmp	r1, #1
 8010dc2:	4418      	add	r0, r3
 8010dc4:	60a2      	str	r2, [r4, #8]
 8010dc6:	6120      	str	r0, [r4, #16]
 8010dc8:	d010      	beq.n	8010dec <ucdr_serialize_array_double+0x44>
 8010dca:	b156      	cbz	r6, 8010de2 <ucdr_serialize_array_double+0x3a>
 8010dcc:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8010dd0:	e000      	b.n	8010dd4 <ucdr_serialize_array_double+0x2c>
 8010dd2:	7d21      	ldrb	r1, [r4, #20]
 8010dd4:	ecb5 0b02 	vldmia	r5!, {d0}
 8010dd8:	4620      	mov	r0, r4
 8010dda:	f000 fb95 	bl	8011508 <ucdr_serialize_endian_double>
 8010dde:	42ae      	cmp	r6, r5
 8010de0:	d1f7      	bne.n	8010dd2 <ucdr_serialize_array_double+0x2a>
 8010de2:	7da0      	ldrb	r0, [r4, #22]
 8010de4:	f080 0001 	eor.w	r0, r0, #1
 8010de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dec:	00f7      	lsls	r7, r6, #3
 8010dee:	4639      	mov	r1, r7
 8010df0:	4620      	mov	r0, r4
 8010df2:	f000 fc4f 	bl	8011694 <ucdr_check_buffer_available_for>
 8010df6:	b9f8      	cbnz	r0, 8010e38 <ucdr_serialize_array_double+0x90>
 8010df8:	46b8      	mov	r8, r7
 8010dfa:	e00a      	b.n	8010e12 <ucdr_serialize_array_double+0x6a>
 8010dfc:	68a0      	ldr	r0, [r4, #8]
 8010dfe:	f007 ffe9 	bl	8018dd4 <memcpy>
 8010e02:	68a2      	ldr	r2, [r4, #8]
 8010e04:	6923      	ldr	r3, [r4, #16]
 8010e06:	4432      	add	r2, r6
 8010e08:	4433      	add	r3, r6
 8010e0a:	eba8 0806 	sub.w	r8, r8, r6
 8010e0e:	60a2      	str	r2, [r4, #8]
 8010e10:	6123      	str	r3, [r4, #16]
 8010e12:	2208      	movs	r2, #8
 8010e14:	4641      	mov	r1, r8
 8010e16:	4620      	mov	r0, r4
 8010e18:	f000 fcc4 	bl	80117a4 <ucdr_check_final_buffer_behavior_array>
 8010e1c:	eba7 0108 	sub.w	r1, r7, r8
 8010e20:	4429      	add	r1, r5
 8010e22:	4606      	mov	r6, r0
 8010e24:	4602      	mov	r2, r0
 8010e26:	2800      	cmp	r0, #0
 8010e28:	d1e8      	bne.n	8010dfc <ucdr_serialize_array_double+0x54>
 8010e2a:	7da0      	ldrb	r0, [r4, #22]
 8010e2c:	2308      	movs	r3, #8
 8010e2e:	7563      	strb	r3, [r4, #21]
 8010e30:	f080 0001 	eor.w	r0, r0, #1
 8010e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e38:	463a      	mov	r2, r7
 8010e3a:	68a0      	ldr	r0, [r4, #8]
 8010e3c:	4629      	mov	r1, r5
 8010e3e:	f007 ffc9 	bl	8018dd4 <memcpy>
 8010e42:	68a2      	ldr	r2, [r4, #8]
 8010e44:	6923      	ldr	r3, [r4, #16]
 8010e46:	443a      	add	r2, r7
 8010e48:	443b      	add	r3, r7
 8010e4a:	60a2      	str	r2, [r4, #8]
 8010e4c:	6123      	str	r3, [r4, #16]
 8010e4e:	e7ec      	b.n	8010e2a <ucdr_serialize_array_double+0x82>

08010e50 <ucdr_deserialize_array_double>:
 8010e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e54:	4605      	mov	r5, r0
 8010e56:	460c      	mov	r4, r1
 8010e58:	2108      	movs	r1, #8
 8010e5a:	4616      	mov	r6, r2
 8010e5c:	f000 fc78 	bl	8011750 <ucdr_buffer_alignment>
 8010e60:	68aa      	ldr	r2, [r5, #8]
 8010e62:	692b      	ldr	r3, [r5, #16]
 8010e64:	7d29      	ldrb	r1, [r5, #20]
 8010e66:	4402      	add	r2, r0
 8010e68:	2901      	cmp	r1, #1
 8010e6a:	4418      	add	r0, r3
 8010e6c:	60aa      	str	r2, [r5, #8]
 8010e6e:	6128      	str	r0, [r5, #16]
 8010e70:	d010      	beq.n	8010e94 <ucdr_deserialize_array_double+0x44>
 8010e72:	b156      	cbz	r6, 8010e8a <ucdr_deserialize_array_double+0x3a>
 8010e74:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8010e78:	e000      	b.n	8010e7c <ucdr_deserialize_array_double+0x2c>
 8010e7a:	7d29      	ldrb	r1, [r5, #20]
 8010e7c:	4622      	mov	r2, r4
 8010e7e:	4628      	mov	r0, r5
 8010e80:	3408      	adds	r4, #8
 8010e82:	f000 fbc9 	bl	8011618 <ucdr_deserialize_endian_double>
 8010e86:	42a6      	cmp	r6, r4
 8010e88:	d1f7      	bne.n	8010e7a <ucdr_deserialize_array_double+0x2a>
 8010e8a:	7da8      	ldrb	r0, [r5, #22]
 8010e8c:	f080 0001 	eor.w	r0, r0, #1
 8010e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e94:	00f7      	lsls	r7, r6, #3
 8010e96:	4639      	mov	r1, r7
 8010e98:	4628      	mov	r0, r5
 8010e9a:	f000 fbfb 	bl	8011694 <ucdr_check_buffer_available_for>
 8010e9e:	b9f8      	cbnz	r0, 8010ee0 <ucdr_deserialize_array_double+0x90>
 8010ea0:	46b8      	mov	r8, r7
 8010ea2:	e00a      	b.n	8010eba <ucdr_deserialize_array_double+0x6a>
 8010ea4:	68a9      	ldr	r1, [r5, #8]
 8010ea6:	f007 ff95 	bl	8018dd4 <memcpy>
 8010eaa:	68aa      	ldr	r2, [r5, #8]
 8010eac:	692b      	ldr	r3, [r5, #16]
 8010eae:	4432      	add	r2, r6
 8010eb0:	4433      	add	r3, r6
 8010eb2:	eba8 0806 	sub.w	r8, r8, r6
 8010eb6:	60aa      	str	r2, [r5, #8]
 8010eb8:	612b      	str	r3, [r5, #16]
 8010eba:	2208      	movs	r2, #8
 8010ebc:	4641      	mov	r1, r8
 8010ebe:	4628      	mov	r0, r5
 8010ec0:	f000 fc70 	bl	80117a4 <ucdr_check_final_buffer_behavior_array>
 8010ec4:	4606      	mov	r6, r0
 8010ec6:	eba7 0008 	sub.w	r0, r7, r8
 8010eca:	4420      	add	r0, r4
 8010ecc:	4632      	mov	r2, r6
 8010ece:	2e00      	cmp	r6, #0
 8010ed0:	d1e8      	bne.n	8010ea4 <ucdr_deserialize_array_double+0x54>
 8010ed2:	7da8      	ldrb	r0, [r5, #22]
 8010ed4:	2308      	movs	r3, #8
 8010ed6:	756b      	strb	r3, [r5, #21]
 8010ed8:	f080 0001 	eor.w	r0, r0, #1
 8010edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ee0:	463a      	mov	r2, r7
 8010ee2:	68a9      	ldr	r1, [r5, #8]
 8010ee4:	4620      	mov	r0, r4
 8010ee6:	f007 ff75 	bl	8018dd4 <memcpy>
 8010eea:	68aa      	ldr	r2, [r5, #8]
 8010eec:	692b      	ldr	r3, [r5, #16]
 8010eee:	443a      	add	r2, r7
 8010ef0:	443b      	add	r3, r7
 8010ef2:	60aa      	str	r2, [r5, #8]
 8010ef4:	612b      	str	r3, [r5, #16]
 8010ef6:	e7ec      	b.n	8010ed2 <ucdr_deserialize_array_double+0x82>

08010ef8 <ucdr_serialize_bool>:
 8010ef8:	b538      	push	{r3, r4, r5, lr}
 8010efa:	460d      	mov	r5, r1
 8010efc:	2101      	movs	r1, #1
 8010efe:	4604      	mov	r4, r0
 8010f00:	f000 fbd4 	bl	80116ac <ucdr_check_final_buffer_behavior>
 8010f04:	b148      	cbz	r0, 8010f1a <ucdr_serialize_bool+0x22>
 8010f06:	68a3      	ldr	r3, [r4, #8]
 8010f08:	701d      	strb	r5, [r3, #0]
 8010f0a:	68a2      	ldr	r2, [r4, #8]
 8010f0c:	6923      	ldr	r3, [r4, #16]
 8010f0e:	3201      	adds	r2, #1
 8010f10:	3301      	adds	r3, #1
 8010f12:	2101      	movs	r1, #1
 8010f14:	60a2      	str	r2, [r4, #8]
 8010f16:	6123      	str	r3, [r4, #16]
 8010f18:	7561      	strb	r1, [r4, #21]
 8010f1a:	7da0      	ldrb	r0, [r4, #22]
 8010f1c:	f080 0001 	eor.w	r0, r0, #1
 8010f20:	bd38      	pop	{r3, r4, r5, pc}
 8010f22:	bf00      	nop

08010f24 <ucdr_deserialize_bool>:
 8010f24:	b538      	push	{r3, r4, r5, lr}
 8010f26:	460d      	mov	r5, r1
 8010f28:	2101      	movs	r1, #1
 8010f2a:	4604      	mov	r4, r0
 8010f2c:	f000 fbbe 	bl	80116ac <ucdr_check_final_buffer_behavior>
 8010f30:	b168      	cbz	r0, 8010f4e <ucdr_deserialize_bool+0x2a>
 8010f32:	68a2      	ldr	r2, [r4, #8]
 8010f34:	6923      	ldr	r3, [r4, #16]
 8010f36:	f812 1b01 	ldrb.w	r1, [r2], #1
 8010f3a:	3900      	subs	r1, #0
 8010f3c:	f103 0301 	add.w	r3, r3, #1
 8010f40:	bf18      	it	ne
 8010f42:	2101      	movne	r1, #1
 8010f44:	2001      	movs	r0, #1
 8010f46:	7029      	strb	r1, [r5, #0]
 8010f48:	60a2      	str	r2, [r4, #8]
 8010f4a:	6123      	str	r3, [r4, #16]
 8010f4c:	7560      	strb	r0, [r4, #21]
 8010f4e:	7da0      	ldrb	r0, [r4, #22]
 8010f50:	f080 0001 	eor.w	r0, r0, #1
 8010f54:	bd38      	pop	{r3, r4, r5, pc}
 8010f56:	bf00      	nop

08010f58 <ucdr_serialize_uint8_t>:
 8010f58:	b538      	push	{r3, r4, r5, lr}
 8010f5a:	460d      	mov	r5, r1
 8010f5c:	2101      	movs	r1, #1
 8010f5e:	4604      	mov	r4, r0
 8010f60:	f000 fba4 	bl	80116ac <ucdr_check_final_buffer_behavior>
 8010f64:	b148      	cbz	r0, 8010f7a <ucdr_serialize_uint8_t+0x22>
 8010f66:	68a3      	ldr	r3, [r4, #8]
 8010f68:	701d      	strb	r5, [r3, #0]
 8010f6a:	68a2      	ldr	r2, [r4, #8]
 8010f6c:	6923      	ldr	r3, [r4, #16]
 8010f6e:	3201      	adds	r2, #1
 8010f70:	3301      	adds	r3, #1
 8010f72:	2101      	movs	r1, #1
 8010f74:	60a2      	str	r2, [r4, #8]
 8010f76:	6123      	str	r3, [r4, #16]
 8010f78:	7561      	strb	r1, [r4, #21]
 8010f7a:	7da0      	ldrb	r0, [r4, #22]
 8010f7c:	f080 0001 	eor.w	r0, r0, #1
 8010f80:	bd38      	pop	{r3, r4, r5, pc}
 8010f82:	bf00      	nop

08010f84 <ucdr_deserialize_uint8_t>:
 8010f84:	b538      	push	{r3, r4, r5, lr}
 8010f86:	460d      	mov	r5, r1
 8010f88:	2101      	movs	r1, #1
 8010f8a:	4604      	mov	r4, r0
 8010f8c:	f000 fb8e 	bl	80116ac <ucdr_check_final_buffer_behavior>
 8010f90:	b150      	cbz	r0, 8010fa8 <ucdr_deserialize_uint8_t+0x24>
 8010f92:	68a3      	ldr	r3, [r4, #8]
 8010f94:	781b      	ldrb	r3, [r3, #0]
 8010f96:	702b      	strb	r3, [r5, #0]
 8010f98:	68a2      	ldr	r2, [r4, #8]
 8010f9a:	6923      	ldr	r3, [r4, #16]
 8010f9c:	3201      	adds	r2, #1
 8010f9e:	3301      	adds	r3, #1
 8010fa0:	2101      	movs	r1, #1
 8010fa2:	60a2      	str	r2, [r4, #8]
 8010fa4:	6123      	str	r3, [r4, #16]
 8010fa6:	7561      	strb	r1, [r4, #21]
 8010fa8:	7da0      	ldrb	r0, [r4, #22]
 8010faa:	f080 0001 	eor.w	r0, r0, #1
 8010fae:	bd38      	pop	{r3, r4, r5, pc}

08010fb0 <ucdr_serialize_uint16_t>:
 8010fb0:	b538      	push	{r3, r4, r5, lr}
 8010fb2:	4604      	mov	r4, r0
 8010fb4:	460d      	mov	r5, r1
 8010fb6:	2102      	movs	r1, #2
 8010fb8:	f000 fbca 	bl	8011750 <ucdr_buffer_alignment>
 8010fbc:	68a2      	ldr	r2, [r4, #8]
 8010fbe:	6923      	ldr	r3, [r4, #16]
 8010fc0:	4402      	add	r2, r0
 8010fc2:	4418      	add	r0, r3
 8010fc4:	6120      	str	r0, [r4, #16]
 8010fc6:	60a2      	str	r2, [r4, #8]
 8010fc8:	4620      	mov	r0, r4
 8010fca:	2102      	movs	r1, #2
 8010fcc:	f000 fb6e 	bl	80116ac <ucdr_check_final_buffer_behavior>
 8010fd0:	b180      	cbz	r0, 8010ff4 <ucdr_serialize_uint16_t+0x44>
 8010fd2:	7d23      	ldrb	r3, [r4, #20]
 8010fd4:	2b01      	cmp	r3, #1
 8010fd6:	68a3      	ldr	r3, [r4, #8]
 8010fd8:	d010      	beq.n	8010ffc <ucdr_serialize_uint16_t+0x4c>
 8010fda:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8010fde:	701a      	strb	r2, [r3, #0]
 8010fe0:	68a3      	ldr	r3, [r4, #8]
 8010fe2:	705d      	strb	r5, [r3, #1]
 8010fe4:	68a2      	ldr	r2, [r4, #8]
 8010fe6:	6923      	ldr	r3, [r4, #16]
 8010fe8:	3202      	adds	r2, #2
 8010fea:	3302      	adds	r3, #2
 8010fec:	2102      	movs	r1, #2
 8010fee:	60a2      	str	r2, [r4, #8]
 8010ff0:	6123      	str	r3, [r4, #16]
 8010ff2:	7561      	strb	r1, [r4, #21]
 8010ff4:	7da0      	ldrb	r0, [r4, #22]
 8010ff6:	f080 0001 	eor.w	r0, r0, #1
 8010ffa:	bd38      	pop	{r3, r4, r5, pc}
 8010ffc:	801d      	strh	r5, [r3, #0]
 8010ffe:	e7f1      	b.n	8010fe4 <ucdr_serialize_uint16_t+0x34>

08011000 <ucdr_serialize_endian_uint16_t>:
 8011000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011002:	4604      	mov	r4, r0
 8011004:	460f      	mov	r7, r1
 8011006:	2102      	movs	r1, #2
 8011008:	4616      	mov	r6, r2
 801100a:	f000 fba1 	bl	8011750 <ucdr_buffer_alignment>
 801100e:	68a5      	ldr	r5, [r4, #8]
 8011010:	6923      	ldr	r3, [r4, #16]
 8011012:	4405      	add	r5, r0
 8011014:	4418      	add	r0, r3
 8011016:	6120      	str	r0, [r4, #16]
 8011018:	60a5      	str	r5, [r4, #8]
 801101a:	4620      	mov	r0, r4
 801101c:	2102      	movs	r1, #2
 801101e:	f000 fb45 	bl	80116ac <ucdr_check_final_buffer_behavior>
 8011022:	b178      	cbz	r0, 8011044 <ucdr_serialize_endian_uint16_t+0x44>
 8011024:	2f01      	cmp	r7, #1
 8011026:	68a3      	ldr	r3, [r4, #8]
 8011028:	d010      	beq.n	801104c <ucdr_serialize_endian_uint16_t+0x4c>
 801102a:	f3c6 2207 	ubfx	r2, r6, #8, #8
 801102e:	701a      	strb	r2, [r3, #0]
 8011030:	68a3      	ldr	r3, [r4, #8]
 8011032:	705e      	strb	r6, [r3, #1]
 8011034:	68a2      	ldr	r2, [r4, #8]
 8011036:	6923      	ldr	r3, [r4, #16]
 8011038:	3202      	adds	r2, #2
 801103a:	3302      	adds	r3, #2
 801103c:	2102      	movs	r1, #2
 801103e:	60a2      	str	r2, [r4, #8]
 8011040:	6123      	str	r3, [r4, #16]
 8011042:	7561      	strb	r1, [r4, #21]
 8011044:	7da0      	ldrb	r0, [r4, #22]
 8011046:	f080 0001 	eor.w	r0, r0, #1
 801104a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801104c:	801e      	strh	r6, [r3, #0]
 801104e:	e7f1      	b.n	8011034 <ucdr_serialize_endian_uint16_t+0x34>

08011050 <ucdr_deserialize_uint16_t>:
 8011050:	b538      	push	{r3, r4, r5, lr}
 8011052:	4604      	mov	r4, r0
 8011054:	460d      	mov	r5, r1
 8011056:	2102      	movs	r1, #2
 8011058:	f000 fb7a 	bl	8011750 <ucdr_buffer_alignment>
 801105c:	68a2      	ldr	r2, [r4, #8]
 801105e:	6923      	ldr	r3, [r4, #16]
 8011060:	4402      	add	r2, r0
 8011062:	4418      	add	r0, r3
 8011064:	6120      	str	r0, [r4, #16]
 8011066:	60a2      	str	r2, [r4, #8]
 8011068:	4620      	mov	r0, r4
 801106a:	2102      	movs	r1, #2
 801106c:	f000 fb1e 	bl	80116ac <ucdr_check_final_buffer_behavior>
 8011070:	b180      	cbz	r0, 8011094 <ucdr_deserialize_uint16_t+0x44>
 8011072:	7d23      	ldrb	r3, [r4, #20]
 8011074:	2b01      	cmp	r3, #1
 8011076:	68a3      	ldr	r3, [r4, #8]
 8011078:	d010      	beq.n	801109c <ucdr_deserialize_uint16_t+0x4c>
 801107a:	785b      	ldrb	r3, [r3, #1]
 801107c:	702b      	strb	r3, [r5, #0]
 801107e:	68a3      	ldr	r3, [r4, #8]
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	706b      	strb	r3, [r5, #1]
 8011084:	68a2      	ldr	r2, [r4, #8]
 8011086:	6923      	ldr	r3, [r4, #16]
 8011088:	3202      	adds	r2, #2
 801108a:	3302      	adds	r3, #2
 801108c:	2102      	movs	r1, #2
 801108e:	60a2      	str	r2, [r4, #8]
 8011090:	6123      	str	r3, [r4, #16]
 8011092:	7561      	strb	r1, [r4, #21]
 8011094:	7da0      	ldrb	r0, [r4, #22]
 8011096:	f080 0001 	eor.w	r0, r0, #1
 801109a:	bd38      	pop	{r3, r4, r5, pc}
 801109c:	881b      	ldrh	r3, [r3, #0]
 801109e:	802b      	strh	r3, [r5, #0]
 80110a0:	e7f0      	b.n	8011084 <ucdr_deserialize_uint16_t+0x34>
 80110a2:	bf00      	nop

080110a4 <ucdr_deserialize_endian_uint16_t>:
 80110a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110a6:	4604      	mov	r4, r0
 80110a8:	460f      	mov	r7, r1
 80110aa:	2102      	movs	r1, #2
 80110ac:	4616      	mov	r6, r2
 80110ae:	f000 fb4f 	bl	8011750 <ucdr_buffer_alignment>
 80110b2:	68a5      	ldr	r5, [r4, #8]
 80110b4:	6923      	ldr	r3, [r4, #16]
 80110b6:	4405      	add	r5, r0
 80110b8:	4418      	add	r0, r3
 80110ba:	6120      	str	r0, [r4, #16]
 80110bc:	60a5      	str	r5, [r4, #8]
 80110be:	4620      	mov	r0, r4
 80110c0:	2102      	movs	r1, #2
 80110c2:	f000 faf3 	bl	80116ac <ucdr_check_final_buffer_behavior>
 80110c6:	b178      	cbz	r0, 80110e8 <ucdr_deserialize_endian_uint16_t+0x44>
 80110c8:	2f01      	cmp	r7, #1
 80110ca:	68a3      	ldr	r3, [r4, #8]
 80110cc:	d010      	beq.n	80110f0 <ucdr_deserialize_endian_uint16_t+0x4c>
 80110ce:	785b      	ldrb	r3, [r3, #1]
 80110d0:	7033      	strb	r3, [r6, #0]
 80110d2:	68a3      	ldr	r3, [r4, #8]
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	7073      	strb	r3, [r6, #1]
 80110d8:	68a2      	ldr	r2, [r4, #8]
 80110da:	6923      	ldr	r3, [r4, #16]
 80110dc:	3202      	adds	r2, #2
 80110de:	3302      	adds	r3, #2
 80110e0:	2102      	movs	r1, #2
 80110e2:	60a2      	str	r2, [r4, #8]
 80110e4:	6123      	str	r3, [r4, #16]
 80110e6:	7561      	strb	r1, [r4, #21]
 80110e8:	7da0      	ldrb	r0, [r4, #22]
 80110ea:	f080 0001 	eor.w	r0, r0, #1
 80110ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110f0:	881b      	ldrh	r3, [r3, #0]
 80110f2:	8033      	strh	r3, [r6, #0]
 80110f4:	e7f0      	b.n	80110d8 <ucdr_deserialize_endian_uint16_t+0x34>
 80110f6:	bf00      	nop

080110f8 <ucdr_serialize_uint32_t>:
 80110f8:	b538      	push	{r3, r4, r5, lr}
 80110fa:	4604      	mov	r4, r0
 80110fc:	460d      	mov	r5, r1
 80110fe:	2104      	movs	r1, #4
 8011100:	f000 fb26 	bl	8011750 <ucdr_buffer_alignment>
 8011104:	68a2      	ldr	r2, [r4, #8]
 8011106:	6923      	ldr	r3, [r4, #16]
 8011108:	4402      	add	r2, r0
 801110a:	4418      	add	r0, r3
 801110c:	6120      	str	r0, [r4, #16]
 801110e:	60a2      	str	r2, [r4, #8]
 8011110:	4620      	mov	r0, r4
 8011112:	2104      	movs	r1, #4
 8011114:	f000 faca 	bl	80116ac <ucdr_check_final_buffer_behavior>
 8011118:	b1c0      	cbz	r0, 801114c <ucdr_serialize_uint32_t+0x54>
 801111a:	7d23      	ldrb	r3, [r4, #20]
 801111c:	2b01      	cmp	r3, #1
 801111e:	68a3      	ldr	r3, [r4, #8]
 8011120:	d018      	beq.n	8011154 <ucdr_serialize_uint32_t+0x5c>
 8011122:	f3c5 6207 	ubfx	r2, r5, #24, #8
 8011126:	701a      	strb	r2, [r3, #0]
 8011128:	68a3      	ldr	r3, [r4, #8]
 801112a:	f3c5 4207 	ubfx	r2, r5, #16, #8
 801112e:	705a      	strb	r2, [r3, #1]
 8011130:	68a3      	ldr	r3, [r4, #8]
 8011132:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8011136:	709a      	strb	r2, [r3, #2]
 8011138:	68a3      	ldr	r3, [r4, #8]
 801113a:	70dd      	strb	r5, [r3, #3]
 801113c:	68a2      	ldr	r2, [r4, #8]
 801113e:	6923      	ldr	r3, [r4, #16]
 8011140:	3204      	adds	r2, #4
 8011142:	3304      	adds	r3, #4
 8011144:	2104      	movs	r1, #4
 8011146:	60a2      	str	r2, [r4, #8]
 8011148:	6123      	str	r3, [r4, #16]
 801114a:	7561      	strb	r1, [r4, #21]
 801114c:	7da0      	ldrb	r0, [r4, #22]
 801114e:	f080 0001 	eor.w	r0, r0, #1
 8011152:	bd38      	pop	{r3, r4, r5, pc}
 8011154:	601d      	str	r5, [r3, #0]
 8011156:	e7f1      	b.n	801113c <ucdr_serialize_uint32_t+0x44>

08011158 <ucdr_serialize_endian_uint32_t>:
 8011158:	b570      	push	{r4, r5, r6, lr}
 801115a:	4604      	mov	r4, r0
 801115c:	460e      	mov	r6, r1
 801115e:	2104      	movs	r1, #4
 8011160:	4615      	mov	r5, r2
 8011162:	f000 faf5 	bl	8011750 <ucdr_buffer_alignment>
 8011166:	68a2      	ldr	r2, [r4, #8]
 8011168:	6923      	ldr	r3, [r4, #16]
 801116a:	4402      	add	r2, r0
 801116c:	4418      	add	r0, r3
 801116e:	6120      	str	r0, [r4, #16]
 8011170:	60a2      	str	r2, [r4, #8]
 8011172:	4620      	mov	r0, r4
 8011174:	2104      	movs	r1, #4
 8011176:	f000 fa99 	bl	80116ac <ucdr_check_final_buffer_behavior>
 801117a:	b1b8      	cbz	r0, 80111ac <ucdr_serialize_endian_uint32_t+0x54>
 801117c:	2e01      	cmp	r6, #1
 801117e:	68a3      	ldr	r3, [r4, #8]
 8011180:	d018      	beq.n	80111b4 <ucdr_serialize_endian_uint32_t+0x5c>
 8011182:	f3c5 6207 	ubfx	r2, r5, #24, #8
 8011186:	701a      	strb	r2, [r3, #0]
 8011188:	68a3      	ldr	r3, [r4, #8]
 801118a:	f3c5 4207 	ubfx	r2, r5, #16, #8
 801118e:	705a      	strb	r2, [r3, #1]
 8011190:	68a3      	ldr	r3, [r4, #8]
 8011192:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8011196:	709a      	strb	r2, [r3, #2]
 8011198:	68a3      	ldr	r3, [r4, #8]
 801119a:	70dd      	strb	r5, [r3, #3]
 801119c:	68a2      	ldr	r2, [r4, #8]
 801119e:	6923      	ldr	r3, [r4, #16]
 80111a0:	3204      	adds	r2, #4
 80111a2:	3304      	adds	r3, #4
 80111a4:	2104      	movs	r1, #4
 80111a6:	60a2      	str	r2, [r4, #8]
 80111a8:	6123      	str	r3, [r4, #16]
 80111aa:	7561      	strb	r1, [r4, #21]
 80111ac:	7da0      	ldrb	r0, [r4, #22]
 80111ae:	f080 0001 	eor.w	r0, r0, #1
 80111b2:	bd70      	pop	{r4, r5, r6, pc}
 80111b4:	601d      	str	r5, [r3, #0]
 80111b6:	e7f1      	b.n	801119c <ucdr_serialize_endian_uint32_t+0x44>

080111b8 <ucdr_deserialize_uint32_t>:
 80111b8:	b538      	push	{r3, r4, r5, lr}
 80111ba:	4604      	mov	r4, r0
 80111bc:	460d      	mov	r5, r1
 80111be:	2104      	movs	r1, #4
 80111c0:	f000 fac6 	bl	8011750 <ucdr_buffer_alignment>
 80111c4:	68a2      	ldr	r2, [r4, #8]
 80111c6:	6923      	ldr	r3, [r4, #16]
 80111c8:	4402      	add	r2, r0
 80111ca:	4418      	add	r0, r3
 80111cc:	6120      	str	r0, [r4, #16]
 80111ce:	60a2      	str	r2, [r4, #8]
 80111d0:	4620      	mov	r0, r4
 80111d2:	2104      	movs	r1, #4
 80111d4:	f000 fa6a 	bl	80116ac <ucdr_check_final_buffer_behavior>
 80111d8:	b1b0      	cbz	r0, 8011208 <ucdr_deserialize_uint32_t+0x50>
 80111da:	7d23      	ldrb	r3, [r4, #20]
 80111dc:	2b01      	cmp	r3, #1
 80111de:	68a3      	ldr	r3, [r4, #8]
 80111e0:	d016      	beq.n	8011210 <ucdr_deserialize_uint32_t+0x58>
 80111e2:	78db      	ldrb	r3, [r3, #3]
 80111e4:	702b      	strb	r3, [r5, #0]
 80111e6:	68a3      	ldr	r3, [r4, #8]
 80111e8:	789b      	ldrb	r3, [r3, #2]
 80111ea:	706b      	strb	r3, [r5, #1]
 80111ec:	68a3      	ldr	r3, [r4, #8]
 80111ee:	785b      	ldrb	r3, [r3, #1]
 80111f0:	70ab      	strb	r3, [r5, #2]
 80111f2:	68a3      	ldr	r3, [r4, #8]
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	70eb      	strb	r3, [r5, #3]
 80111f8:	68a2      	ldr	r2, [r4, #8]
 80111fa:	6923      	ldr	r3, [r4, #16]
 80111fc:	3204      	adds	r2, #4
 80111fe:	3304      	adds	r3, #4
 8011200:	2104      	movs	r1, #4
 8011202:	60a2      	str	r2, [r4, #8]
 8011204:	6123      	str	r3, [r4, #16]
 8011206:	7561      	strb	r1, [r4, #21]
 8011208:	7da0      	ldrb	r0, [r4, #22]
 801120a:	f080 0001 	eor.w	r0, r0, #1
 801120e:	bd38      	pop	{r3, r4, r5, pc}
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	602b      	str	r3, [r5, #0]
 8011214:	e7f0      	b.n	80111f8 <ucdr_deserialize_uint32_t+0x40>
 8011216:	bf00      	nop

08011218 <ucdr_deserialize_endian_uint32_t>:
 8011218:	b570      	push	{r4, r5, r6, lr}
 801121a:	4604      	mov	r4, r0
 801121c:	460e      	mov	r6, r1
 801121e:	2104      	movs	r1, #4
 8011220:	4615      	mov	r5, r2
 8011222:	f000 fa95 	bl	8011750 <ucdr_buffer_alignment>
 8011226:	68a2      	ldr	r2, [r4, #8]
 8011228:	6923      	ldr	r3, [r4, #16]
 801122a:	4402      	add	r2, r0
 801122c:	4418      	add	r0, r3
 801122e:	6120      	str	r0, [r4, #16]
 8011230:	60a2      	str	r2, [r4, #8]
 8011232:	4620      	mov	r0, r4
 8011234:	2104      	movs	r1, #4
 8011236:	f000 fa39 	bl	80116ac <ucdr_check_final_buffer_behavior>
 801123a:	b1a8      	cbz	r0, 8011268 <ucdr_deserialize_endian_uint32_t+0x50>
 801123c:	2e01      	cmp	r6, #1
 801123e:	68a3      	ldr	r3, [r4, #8]
 8011240:	d016      	beq.n	8011270 <ucdr_deserialize_endian_uint32_t+0x58>
 8011242:	78db      	ldrb	r3, [r3, #3]
 8011244:	702b      	strb	r3, [r5, #0]
 8011246:	68a3      	ldr	r3, [r4, #8]
 8011248:	789b      	ldrb	r3, [r3, #2]
 801124a:	706b      	strb	r3, [r5, #1]
 801124c:	68a3      	ldr	r3, [r4, #8]
 801124e:	785b      	ldrb	r3, [r3, #1]
 8011250:	70ab      	strb	r3, [r5, #2]
 8011252:	68a3      	ldr	r3, [r4, #8]
 8011254:	781b      	ldrb	r3, [r3, #0]
 8011256:	70eb      	strb	r3, [r5, #3]
 8011258:	68a2      	ldr	r2, [r4, #8]
 801125a:	6923      	ldr	r3, [r4, #16]
 801125c:	3204      	adds	r2, #4
 801125e:	3304      	adds	r3, #4
 8011260:	2104      	movs	r1, #4
 8011262:	60a2      	str	r2, [r4, #8]
 8011264:	6123      	str	r3, [r4, #16]
 8011266:	7561      	strb	r1, [r4, #21]
 8011268:	7da0      	ldrb	r0, [r4, #22]
 801126a:	f080 0001 	eor.w	r0, r0, #1
 801126e:	bd70      	pop	{r4, r5, r6, pc}
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	602b      	str	r3, [r5, #0]
 8011274:	e7f0      	b.n	8011258 <ucdr_deserialize_endian_uint32_t+0x40>
 8011276:	bf00      	nop

08011278 <ucdr_serialize_uint64_t>:
 8011278:	b510      	push	{r4, lr}
 801127a:	2108      	movs	r1, #8
 801127c:	4604      	mov	r4, r0
 801127e:	b082      	sub	sp, #8
 8011280:	e9cd 2300 	strd	r2, r3, [sp]
 8011284:	f000 fa64 	bl	8011750 <ucdr_buffer_alignment>
 8011288:	68a2      	ldr	r2, [r4, #8]
 801128a:	6923      	ldr	r3, [r4, #16]
 801128c:	4402      	add	r2, r0
 801128e:	4418      	add	r0, r3
 8011290:	6120      	str	r0, [r4, #16]
 8011292:	60a2      	str	r2, [r4, #8]
 8011294:	4620      	mov	r0, r4
 8011296:	2108      	movs	r1, #8
 8011298:	f000 fa08 	bl	80116ac <ucdr_check_final_buffer_behavior>
 801129c:	b350      	cbz	r0, 80112f4 <ucdr_serialize_uint64_t+0x7c>
 801129e:	7d23      	ldrb	r3, [r4, #20]
 80112a0:	2b01      	cmp	r3, #1
 80112a2:	d02c      	beq.n	80112fe <ucdr_serialize_uint64_t+0x86>
 80112a4:	68a3      	ldr	r3, [r4, #8]
 80112a6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80112aa:	701a      	strb	r2, [r3, #0]
 80112ac:	68a3      	ldr	r3, [r4, #8]
 80112ae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80112b2:	705a      	strb	r2, [r3, #1]
 80112b4:	68a3      	ldr	r3, [r4, #8]
 80112b6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80112ba:	709a      	strb	r2, [r3, #2]
 80112bc:	68a3      	ldr	r3, [r4, #8]
 80112be:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80112c2:	70da      	strb	r2, [r3, #3]
 80112c4:	68a3      	ldr	r3, [r4, #8]
 80112c6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80112ca:	711a      	strb	r2, [r3, #4]
 80112cc:	68a3      	ldr	r3, [r4, #8]
 80112ce:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80112d2:	715a      	strb	r2, [r3, #5]
 80112d4:	68a3      	ldr	r3, [r4, #8]
 80112d6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80112da:	719a      	strb	r2, [r3, #6]
 80112dc:	68a3      	ldr	r3, [r4, #8]
 80112de:	f89d 2000 	ldrb.w	r2, [sp]
 80112e2:	71da      	strb	r2, [r3, #7]
 80112e4:	68a2      	ldr	r2, [r4, #8]
 80112e6:	6923      	ldr	r3, [r4, #16]
 80112e8:	3208      	adds	r2, #8
 80112ea:	3308      	adds	r3, #8
 80112ec:	2108      	movs	r1, #8
 80112ee:	60a2      	str	r2, [r4, #8]
 80112f0:	6123      	str	r3, [r4, #16]
 80112f2:	7561      	strb	r1, [r4, #21]
 80112f4:	7da0      	ldrb	r0, [r4, #22]
 80112f6:	f080 0001 	eor.w	r0, r0, #1
 80112fa:	b002      	add	sp, #8
 80112fc:	bd10      	pop	{r4, pc}
 80112fe:	466b      	mov	r3, sp
 8011300:	cb03      	ldmia	r3!, {r0, r1}
 8011302:	68a3      	ldr	r3, [r4, #8]
 8011304:	6018      	str	r0, [r3, #0]
 8011306:	6059      	str	r1, [r3, #4]
 8011308:	e7ec      	b.n	80112e4 <ucdr_serialize_uint64_t+0x6c>
 801130a:	bf00      	nop

0801130c <ucdr_serialize_int8_t>:
 801130c:	b538      	push	{r3, r4, r5, lr}
 801130e:	460d      	mov	r5, r1
 8011310:	2101      	movs	r1, #1
 8011312:	4604      	mov	r4, r0
 8011314:	f000 f9ca 	bl	80116ac <ucdr_check_final_buffer_behavior>
 8011318:	b148      	cbz	r0, 801132e <ucdr_serialize_int8_t+0x22>
 801131a:	68a3      	ldr	r3, [r4, #8]
 801131c:	701d      	strb	r5, [r3, #0]
 801131e:	68a2      	ldr	r2, [r4, #8]
 8011320:	6923      	ldr	r3, [r4, #16]
 8011322:	3201      	adds	r2, #1
 8011324:	3301      	adds	r3, #1
 8011326:	2101      	movs	r1, #1
 8011328:	60a2      	str	r2, [r4, #8]
 801132a:	6123      	str	r3, [r4, #16]
 801132c:	7561      	strb	r1, [r4, #21]
 801132e:	7da0      	ldrb	r0, [r4, #22]
 8011330:	f080 0001 	eor.w	r0, r0, #1
 8011334:	bd38      	pop	{r3, r4, r5, pc}
 8011336:	bf00      	nop

08011338 <ucdr_deserialize_int8_t>:
 8011338:	b538      	push	{r3, r4, r5, lr}
 801133a:	460d      	mov	r5, r1
 801133c:	2101      	movs	r1, #1
 801133e:	4604      	mov	r4, r0
 8011340:	f000 f9b4 	bl	80116ac <ucdr_check_final_buffer_behavior>
 8011344:	b150      	cbz	r0, 801135c <ucdr_deserialize_int8_t+0x24>
 8011346:	68a3      	ldr	r3, [r4, #8]
 8011348:	781b      	ldrb	r3, [r3, #0]
 801134a:	702b      	strb	r3, [r5, #0]
 801134c:	68a2      	ldr	r2, [r4, #8]
 801134e:	6923      	ldr	r3, [r4, #16]
 8011350:	3201      	adds	r2, #1
 8011352:	3301      	adds	r3, #1
 8011354:	2101      	movs	r1, #1
 8011356:	60a2      	str	r2, [r4, #8]
 8011358:	6123      	str	r3, [r4, #16]
 801135a:	7561      	strb	r1, [r4, #21]
 801135c:	7da0      	ldrb	r0, [r4, #22]
 801135e:	f080 0001 	eor.w	r0, r0, #1
 8011362:	bd38      	pop	{r3, r4, r5, pc}

08011364 <ucdr_serialize_int16_t>:
 8011364:	b538      	push	{r3, r4, r5, lr}
 8011366:	4604      	mov	r4, r0
 8011368:	460d      	mov	r5, r1
 801136a:	2102      	movs	r1, #2
 801136c:	f000 f9f0 	bl	8011750 <ucdr_buffer_alignment>
 8011370:	68a2      	ldr	r2, [r4, #8]
 8011372:	6923      	ldr	r3, [r4, #16]
 8011374:	4402      	add	r2, r0
 8011376:	4418      	add	r0, r3
 8011378:	6120      	str	r0, [r4, #16]
 801137a:	60a2      	str	r2, [r4, #8]
 801137c:	4620      	mov	r0, r4
 801137e:	2102      	movs	r1, #2
 8011380:	f000 f994 	bl	80116ac <ucdr_check_final_buffer_behavior>
 8011384:	b180      	cbz	r0, 80113a8 <ucdr_serialize_int16_t+0x44>
 8011386:	7d23      	ldrb	r3, [r4, #20]
 8011388:	2b01      	cmp	r3, #1
 801138a:	68a3      	ldr	r3, [r4, #8]
 801138c:	d010      	beq.n	80113b0 <ucdr_serialize_int16_t+0x4c>
 801138e:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8011392:	701a      	strb	r2, [r3, #0]
 8011394:	68a3      	ldr	r3, [r4, #8]
 8011396:	705d      	strb	r5, [r3, #1]
 8011398:	68a2      	ldr	r2, [r4, #8]
 801139a:	6923      	ldr	r3, [r4, #16]
 801139c:	3202      	adds	r2, #2
 801139e:	3302      	adds	r3, #2
 80113a0:	2102      	movs	r1, #2
 80113a2:	60a2      	str	r2, [r4, #8]
 80113a4:	6123      	str	r3, [r4, #16]
 80113a6:	7561      	strb	r1, [r4, #21]
 80113a8:	7da0      	ldrb	r0, [r4, #22]
 80113aa:	f080 0001 	eor.w	r0, r0, #1
 80113ae:	bd38      	pop	{r3, r4, r5, pc}
 80113b0:	801d      	strh	r5, [r3, #0]
 80113b2:	e7f1      	b.n	8011398 <ucdr_serialize_int16_t+0x34>

080113b4 <ucdr_serialize_int32_t>:
 80113b4:	b538      	push	{r3, r4, r5, lr}
 80113b6:	4604      	mov	r4, r0
 80113b8:	460d      	mov	r5, r1
 80113ba:	2104      	movs	r1, #4
 80113bc:	f000 f9c8 	bl	8011750 <ucdr_buffer_alignment>
 80113c0:	68a2      	ldr	r2, [r4, #8]
 80113c2:	6923      	ldr	r3, [r4, #16]
 80113c4:	4402      	add	r2, r0
 80113c6:	4418      	add	r0, r3
 80113c8:	6120      	str	r0, [r4, #16]
 80113ca:	60a2      	str	r2, [r4, #8]
 80113cc:	4620      	mov	r0, r4
 80113ce:	2104      	movs	r1, #4
 80113d0:	f000 f96c 	bl	80116ac <ucdr_check_final_buffer_behavior>
 80113d4:	b1c0      	cbz	r0, 8011408 <ucdr_serialize_int32_t+0x54>
 80113d6:	7d23      	ldrb	r3, [r4, #20]
 80113d8:	2b01      	cmp	r3, #1
 80113da:	68a3      	ldr	r3, [r4, #8]
 80113dc:	d018      	beq.n	8011410 <ucdr_serialize_int32_t+0x5c>
 80113de:	f3c5 6207 	ubfx	r2, r5, #24, #8
 80113e2:	701a      	strb	r2, [r3, #0]
 80113e4:	68a3      	ldr	r3, [r4, #8]
 80113e6:	f3c5 4207 	ubfx	r2, r5, #16, #8
 80113ea:	705a      	strb	r2, [r3, #1]
 80113ec:	68a3      	ldr	r3, [r4, #8]
 80113ee:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80113f2:	709a      	strb	r2, [r3, #2]
 80113f4:	68a3      	ldr	r3, [r4, #8]
 80113f6:	70dd      	strb	r5, [r3, #3]
 80113f8:	68a2      	ldr	r2, [r4, #8]
 80113fa:	6923      	ldr	r3, [r4, #16]
 80113fc:	3204      	adds	r2, #4
 80113fe:	3304      	adds	r3, #4
 8011400:	2104      	movs	r1, #4
 8011402:	60a2      	str	r2, [r4, #8]
 8011404:	6123      	str	r3, [r4, #16]
 8011406:	7561      	strb	r1, [r4, #21]
 8011408:	7da0      	ldrb	r0, [r4, #22]
 801140a:	f080 0001 	eor.w	r0, r0, #1
 801140e:	bd38      	pop	{r3, r4, r5, pc}
 8011410:	601d      	str	r5, [r3, #0]
 8011412:	e7f1      	b.n	80113f8 <ucdr_serialize_int32_t+0x44>

08011414 <ucdr_deserialize_int32_t>:
 8011414:	b538      	push	{r3, r4, r5, lr}
 8011416:	4604      	mov	r4, r0
 8011418:	460d      	mov	r5, r1
 801141a:	2104      	movs	r1, #4
 801141c:	f000 f998 	bl	8011750 <ucdr_buffer_alignment>
 8011420:	68a2      	ldr	r2, [r4, #8]
 8011422:	6923      	ldr	r3, [r4, #16]
 8011424:	4402      	add	r2, r0
 8011426:	4418      	add	r0, r3
 8011428:	6120      	str	r0, [r4, #16]
 801142a:	60a2      	str	r2, [r4, #8]
 801142c:	4620      	mov	r0, r4
 801142e:	2104      	movs	r1, #4
 8011430:	f000 f93c 	bl	80116ac <ucdr_check_final_buffer_behavior>
 8011434:	b1b0      	cbz	r0, 8011464 <ucdr_deserialize_int32_t+0x50>
 8011436:	7d23      	ldrb	r3, [r4, #20]
 8011438:	2b01      	cmp	r3, #1
 801143a:	68a3      	ldr	r3, [r4, #8]
 801143c:	d016      	beq.n	801146c <ucdr_deserialize_int32_t+0x58>
 801143e:	78db      	ldrb	r3, [r3, #3]
 8011440:	702b      	strb	r3, [r5, #0]
 8011442:	68a3      	ldr	r3, [r4, #8]
 8011444:	789b      	ldrb	r3, [r3, #2]
 8011446:	706b      	strb	r3, [r5, #1]
 8011448:	68a3      	ldr	r3, [r4, #8]
 801144a:	785b      	ldrb	r3, [r3, #1]
 801144c:	70ab      	strb	r3, [r5, #2]
 801144e:	68a3      	ldr	r3, [r4, #8]
 8011450:	781b      	ldrb	r3, [r3, #0]
 8011452:	70eb      	strb	r3, [r5, #3]
 8011454:	68a2      	ldr	r2, [r4, #8]
 8011456:	6923      	ldr	r3, [r4, #16]
 8011458:	3204      	adds	r2, #4
 801145a:	3304      	adds	r3, #4
 801145c:	2104      	movs	r1, #4
 801145e:	60a2      	str	r2, [r4, #8]
 8011460:	6123      	str	r3, [r4, #16]
 8011462:	7561      	strb	r1, [r4, #21]
 8011464:	7da0      	ldrb	r0, [r4, #22]
 8011466:	f080 0001 	eor.w	r0, r0, #1
 801146a:	bd38      	pop	{r3, r4, r5, pc}
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	602b      	str	r3, [r5, #0]
 8011470:	e7f0      	b.n	8011454 <ucdr_deserialize_int32_t+0x40>
 8011472:	bf00      	nop

08011474 <ucdr_serialize_double>:
 8011474:	b510      	push	{r4, lr}
 8011476:	2108      	movs	r1, #8
 8011478:	4604      	mov	r4, r0
 801147a:	b082      	sub	sp, #8
 801147c:	ed8d 0b00 	vstr	d0, [sp]
 8011480:	f000 f966 	bl	8011750 <ucdr_buffer_alignment>
 8011484:	68a2      	ldr	r2, [r4, #8]
 8011486:	6923      	ldr	r3, [r4, #16]
 8011488:	4402      	add	r2, r0
 801148a:	4418      	add	r0, r3
 801148c:	6120      	str	r0, [r4, #16]
 801148e:	60a2      	str	r2, [r4, #8]
 8011490:	4620      	mov	r0, r4
 8011492:	2108      	movs	r1, #8
 8011494:	f000 f90a 	bl	80116ac <ucdr_check_final_buffer_behavior>
 8011498:	b350      	cbz	r0, 80114f0 <ucdr_serialize_double+0x7c>
 801149a:	7d23      	ldrb	r3, [r4, #20]
 801149c:	2b01      	cmp	r3, #1
 801149e:	d02c      	beq.n	80114fa <ucdr_serialize_double+0x86>
 80114a0:	68a3      	ldr	r3, [r4, #8]
 80114a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80114a6:	701a      	strb	r2, [r3, #0]
 80114a8:	68a3      	ldr	r3, [r4, #8]
 80114aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80114ae:	705a      	strb	r2, [r3, #1]
 80114b0:	68a3      	ldr	r3, [r4, #8]
 80114b2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80114b6:	709a      	strb	r2, [r3, #2]
 80114b8:	68a3      	ldr	r3, [r4, #8]
 80114ba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80114be:	70da      	strb	r2, [r3, #3]
 80114c0:	68a3      	ldr	r3, [r4, #8]
 80114c2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80114c6:	711a      	strb	r2, [r3, #4]
 80114c8:	68a3      	ldr	r3, [r4, #8]
 80114ca:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80114ce:	715a      	strb	r2, [r3, #5]
 80114d0:	68a3      	ldr	r3, [r4, #8]
 80114d2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80114d6:	719a      	strb	r2, [r3, #6]
 80114d8:	68a3      	ldr	r3, [r4, #8]
 80114da:	f89d 2000 	ldrb.w	r2, [sp]
 80114de:	71da      	strb	r2, [r3, #7]
 80114e0:	68a2      	ldr	r2, [r4, #8]
 80114e2:	6923      	ldr	r3, [r4, #16]
 80114e4:	3208      	adds	r2, #8
 80114e6:	3308      	adds	r3, #8
 80114e8:	2108      	movs	r1, #8
 80114ea:	60a2      	str	r2, [r4, #8]
 80114ec:	6123      	str	r3, [r4, #16]
 80114ee:	7561      	strb	r1, [r4, #21]
 80114f0:	7da0      	ldrb	r0, [r4, #22]
 80114f2:	f080 0001 	eor.w	r0, r0, #1
 80114f6:	b002      	add	sp, #8
 80114f8:	bd10      	pop	{r4, pc}
 80114fa:	466b      	mov	r3, sp
 80114fc:	cb03      	ldmia	r3!, {r0, r1}
 80114fe:	68a3      	ldr	r3, [r4, #8]
 8011500:	6018      	str	r0, [r3, #0]
 8011502:	6059      	str	r1, [r3, #4]
 8011504:	e7ec      	b.n	80114e0 <ucdr_serialize_double+0x6c>
 8011506:	bf00      	nop

08011508 <ucdr_serialize_endian_double>:
 8011508:	b530      	push	{r4, r5, lr}
 801150a:	4604      	mov	r4, r0
 801150c:	b083      	sub	sp, #12
 801150e:	460d      	mov	r5, r1
 8011510:	2108      	movs	r1, #8
 8011512:	ed8d 0b00 	vstr	d0, [sp]
 8011516:	f000 f91b 	bl	8011750 <ucdr_buffer_alignment>
 801151a:	68a2      	ldr	r2, [r4, #8]
 801151c:	6923      	ldr	r3, [r4, #16]
 801151e:	4402      	add	r2, r0
 8011520:	4418      	add	r0, r3
 8011522:	6120      	str	r0, [r4, #16]
 8011524:	60a2      	str	r2, [r4, #8]
 8011526:	4620      	mov	r0, r4
 8011528:	2108      	movs	r1, #8
 801152a:	f000 f8bf 	bl	80116ac <ucdr_check_final_buffer_behavior>
 801152e:	b348      	cbz	r0, 8011584 <ucdr_serialize_endian_double+0x7c>
 8011530:	2d01      	cmp	r5, #1
 8011532:	d02c      	beq.n	801158e <ucdr_serialize_endian_double+0x86>
 8011534:	68a3      	ldr	r3, [r4, #8]
 8011536:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801153a:	701a      	strb	r2, [r3, #0]
 801153c:	68a3      	ldr	r3, [r4, #8]
 801153e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011542:	705a      	strb	r2, [r3, #1]
 8011544:	68a3      	ldr	r3, [r4, #8]
 8011546:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801154a:	709a      	strb	r2, [r3, #2]
 801154c:	68a3      	ldr	r3, [r4, #8]
 801154e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011552:	70da      	strb	r2, [r3, #3]
 8011554:	68a3      	ldr	r3, [r4, #8]
 8011556:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801155a:	711a      	strb	r2, [r3, #4]
 801155c:	68a3      	ldr	r3, [r4, #8]
 801155e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011562:	715a      	strb	r2, [r3, #5]
 8011564:	68a3      	ldr	r3, [r4, #8]
 8011566:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801156a:	719a      	strb	r2, [r3, #6]
 801156c:	68a3      	ldr	r3, [r4, #8]
 801156e:	f89d 2000 	ldrb.w	r2, [sp]
 8011572:	71da      	strb	r2, [r3, #7]
 8011574:	68a2      	ldr	r2, [r4, #8]
 8011576:	6923      	ldr	r3, [r4, #16]
 8011578:	3208      	adds	r2, #8
 801157a:	3308      	adds	r3, #8
 801157c:	2108      	movs	r1, #8
 801157e:	60a2      	str	r2, [r4, #8]
 8011580:	6123      	str	r3, [r4, #16]
 8011582:	7561      	strb	r1, [r4, #21]
 8011584:	7da0      	ldrb	r0, [r4, #22]
 8011586:	f080 0001 	eor.w	r0, r0, #1
 801158a:	b003      	add	sp, #12
 801158c:	bd30      	pop	{r4, r5, pc}
 801158e:	466b      	mov	r3, sp
 8011590:	cb03      	ldmia	r3!, {r0, r1}
 8011592:	68a3      	ldr	r3, [r4, #8]
 8011594:	6018      	str	r0, [r3, #0]
 8011596:	6059      	str	r1, [r3, #4]
 8011598:	e7ec      	b.n	8011574 <ucdr_serialize_endian_double+0x6c>
 801159a:	bf00      	nop

0801159c <ucdr_deserialize_double>:
 801159c:	b538      	push	{r3, r4, r5, lr}
 801159e:	4604      	mov	r4, r0
 80115a0:	460d      	mov	r5, r1
 80115a2:	2108      	movs	r1, #8
 80115a4:	f000 f8d4 	bl	8011750 <ucdr_buffer_alignment>
 80115a8:	68a2      	ldr	r2, [r4, #8]
 80115aa:	6923      	ldr	r3, [r4, #16]
 80115ac:	4402      	add	r2, r0
 80115ae:	4418      	add	r0, r3
 80115b0:	6120      	str	r0, [r4, #16]
 80115b2:	60a2      	str	r2, [r4, #8]
 80115b4:	4620      	mov	r0, r4
 80115b6:	2108      	movs	r1, #8
 80115b8:	f000 f878 	bl	80116ac <ucdr_check_final_buffer_behavior>
 80115bc:	b310      	cbz	r0, 8011604 <ucdr_deserialize_double+0x68>
 80115be:	7d23      	ldrb	r3, [r4, #20]
 80115c0:	2b01      	cmp	r3, #1
 80115c2:	68a3      	ldr	r3, [r4, #8]
 80115c4:	d022      	beq.n	801160c <ucdr_deserialize_double+0x70>
 80115c6:	79db      	ldrb	r3, [r3, #7]
 80115c8:	702b      	strb	r3, [r5, #0]
 80115ca:	68a3      	ldr	r3, [r4, #8]
 80115cc:	799b      	ldrb	r3, [r3, #6]
 80115ce:	706b      	strb	r3, [r5, #1]
 80115d0:	68a3      	ldr	r3, [r4, #8]
 80115d2:	795b      	ldrb	r3, [r3, #5]
 80115d4:	70ab      	strb	r3, [r5, #2]
 80115d6:	68a3      	ldr	r3, [r4, #8]
 80115d8:	791b      	ldrb	r3, [r3, #4]
 80115da:	70eb      	strb	r3, [r5, #3]
 80115dc:	68a3      	ldr	r3, [r4, #8]
 80115de:	78db      	ldrb	r3, [r3, #3]
 80115e0:	712b      	strb	r3, [r5, #4]
 80115e2:	68a3      	ldr	r3, [r4, #8]
 80115e4:	789b      	ldrb	r3, [r3, #2]
 80115e6:	716b      	strb	r3, [r5, #5]
 80115e8:	68a3      	ldr	r3, [r4, #8]
 80115ea:	785b      	ldrb	r3, [r3, #1]
 80115ec:	71ab      	strb	r3, [r5, #6]
 80115ee:	68a3      	ldr	r3, [r4, #8]
 80115f0:	781b      	ldrb	r3, [r3, #0]
 80115f2:	71eb      	strb	r3, [r5, #7]
 80115f4:	68a2      	ldr	r2, [r4, #8]
 80115f6:	6923      	ldr	r3, [r4, #16]
 80115f8:	3208      	adds	r2, #8
 80115fa:	3308      	adds	r3, #8
 80115fc:	2108      	movs	r1, #8
 80115fe:	60a2      	str	r2, [r4, #8]
 8011600:	6123      	str	r3, [r4, #16]
 8011602:	7561      	strb	r1, [r4, #21]
 8011604:	7da0      	ldrb	r0, [r4, #22]
 8011606:	f080 0001 	eor.w	r0, r0, #1
 801160a:	bd38      	pop	{r3, r4, r5, pc}
 801160c:	681a      	ldr	r2, [r3, #0]
 801160e:	685b      	ldr	r3, [r3, #4]
 8011610:	606b      	str	r3, [r5, #4]
 8011612:	602a      	str	r2, [r5, #0]
 8011614:	e7ee      	b.n	80115f4 <ucdr_deserialize_double+0x58>
 8011616:	bf00      	nop

08011618 <ucdr_deserialize_endian_double>:
 8011618:	b570      	push	{r4, r5, r6, lr}
 801161a:	4604      	mov	r4, r0
 801161c:	460e      	mov	r6, r1
 801161e:	2108      	movs	r1, #8
 8011620:	4615      	mov	r5, r2
 8011622:	f000 f895 	bl	8011750 <ucdr_buffer_alignment>
 8011626:	68a2      	ldr	r2, [r4, #8]
 8011628:	6923      	ldr	r3, [r4, #16]
 801162a:	4402      	add	r2, r0
 801162c:	4418      	add	r0, r3
 801162e:	6120      	str	r0, [r4, #16]
 8011630:	60a2      	str	r2, [r4, #8]
 8011632:	4620      	mov	r0, r4
 8011634:	2108      	movs	r1, #8
 8011636:	f000 f839 	bl	80116ac <ucdr_check_final_buffer_behavior>
 801163a:	b308      	cbz	r0, 8011680 <ucdr_deserialize_endian_double+0x68>
 801163c:	2e01      	cmp	r6, #1
 801163e:	68a3      	ldr	r3, [r4, #8]
 8011640:	d022      	beq.n	8011688 <ucdr_deserialize_endian_double+0x70>
 8011642:	79db      	ldrb	r3, [r3, #7]
 8011644:	702b      	strb	r3, [r5, #0]
 8011646:	68a3      	ldr	r3, [r4, #8]
 8011648:	799b      	ldrb	r3, [r3, #6]
 801164a:	706b      	strb	r3, [r5, #1]
 801164c:	68a3      	ldr	r3, [r4, #8]
 801164e:	795b      	ldrb	r3, [r3, #5]
 8011650:	70ab      	strb	r3, [r5, #2]
 8011652:	68a3      	ldr	r3, [r4, #8]
 8011654:	791b      	ldrb	r3, [r3, #4]
 8011656:	70eb      	strb	r3, [r5, #3]
 8011658:	68a3      	ldr	r3, [r4, #8]
 801165a:	78db      	ldrb	r3, [r3, #3]
 801165c:	712b      	strb	r3, [r5, #4]
 801165e:	68a3      	ldr	r3, [r4, #8]
 8011660:	789b      	ldrb	r3, [r3, #2]
 8011662:	716b      	strb	r3, [r5, #5]
 8011664:	68a3      	ldr	r3, [r4, #8]
 8011666:	785b      	ldrb	r3, [r3, #1]
 8011668:	71ab      	strb	r3, [r5, #6]
 801166a:	68a3      	ldr	r3, [r4, #8]
 801166c:	781b      	ldrb	r3, [r3, #0]
 801166e:	71eb      	strb	r3, [r5, #7]
 8011670:	68a2      	ldr	r2, [r4, #8]
 8011672:	6923      	ldr	r3, [r4, #16]
 8011674:	3208      	adds	r2, #8
 8011676:	3308      	adds	r3, #8
 8011678:	2108      	movs	r1, #8
 801167a:	60a2      	str	r2, [r4, #8]
 801167c:	6123      	str	r3, [r4, #16]
 801167e:	7561      	strb	r1, [r4, #21]
 8011680:	7da0      	ldrb	r0, [r4, #22]
 8011682:	f080 0001 	eor.w	r0, r0, #1
 8011686:	bd70      	pop	{r4, r5, r6, pc}
 8011688:	681a      	ldr	r2, [r3, #0]
 801168a:	685b      	ldr	r3, [r3, #4]
 801168c:	606b      	str	r3, [r5, #4]
 801168e:	602a      	str	r2, [r5, #0]
 8011690:	e7ee      	b.n	8011670 <ucdr_deserialize_endian_double+0x58>
 8011692:	bf00      	nop

08011694 <ucdr_check_buffer_available_for>:
 8011694:	7d83      	ldrb	r3, [r0, #22]
 8011696:	b93b      	cbnz	r3, 80116a8 <ucdr_check_buffer_available_for+0x14>
 8011698:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 801169c:	4419      	add	r1, r3
 801169e:	4288      	cmp	r0, r1
 80116a0:	bf34      	ite	cc
 80116a2:	2000      	movcc	r0, #0
 80116a4:	2001      	movcs	r0, #1
 80116a6:	4770      	bx	lr
 80116a8:	2000      	movs	r0, #0
 80116aa:	4770      	bx	lr

080116ac <ucdr_check_final_buffer_behavior>:
 80116ac:	b538      	push	{r3, r4, r5, lr}
 80116ae:	7d83      	ldrb	r3, [r0, #22]
 80116b0:	b97b      	cbnz	r3, 80116d2 <ucdr_check_final_buffer_behavior+0x26>
 80116b2:	e9d0 5201 	ldrd	r5, r2, [r0, #4]
 80116b6:	4411      	add	r1, r2
 80116b8:	428d      	cmp	r5, r1
 80116ba:	4604      	mov	r4, r0
 80116bc:	d20c      	bcs.n	80116d8 <ucdr_check_final_buffer_behavior+0x2c>
 80116be:	6982      	ldr	r2, [r0, #24]
 80116c0:	b16a      	cbz	r2, 80116de <ucdr_check_final_buffer_behavior+0x32>
 80116c2:	69c1      	ldr	r1, [r0, #28]
 80116c4:	4790      	blx	r2
 80116c6:	f080 0301 	eor.w	r3, r0, #1
 80116ca:	b2db      	uxtb	r3, r3
 80116cc:	75a0      	strb	r0, [r4, #22]
 80116ce:	4618      	mov	r0, r3
 80116d0:	bd38      	pop	{r3, r4, r5, pc}
 80116d2:	2300      	movs	r3, #0
 80116d4:	4618      	mov	r0, r3
 80116d6:	bd38      	pop	{r3, r4, r5, pc}
 80116d8:	2301      	movs	r3, #1
 80116da:	4618      	mov	r0, r3
 80116dc:	bd38      	pop	{r3, r4, r5, pc}
 80116de:	2001      	movs	r0, #1
 80116e0:	75a0      	strb	r0, [r4, #22]
 80116e2:	e7f4      	b.n	80116ce <ucdr_check_final_buffer_behavior+0x22>

080116e4 <ucdr_set_on_full_buffer_callback>:
 80116e4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80116e8:	4770      	bx	lr
 80116ea:	bf00      	nop

080116ec <ucdr_init_buffer_origin_offset_endian>:
 80116ec:	b430      	push	{r4, r5}
 80116ee:	9c02      	ldr	r4, [sp, #8]
 80116f0:	f89d 500c 	ldrb.w	r5, [sp, #12]
 80116f4:	6001      	str	r1, [r0, #0]
 80116f6:	440a      	add	r2, r1
 80116f8:	60c3      	str	r3, [r0, #12]
 80116fa:	4421      	add	r1, r4
 80116fc:	441c      	add	r4, r3
 80116fe:	2300      	movs	r3, #0
 8011700:	6104      	str	r4, [r0, #16]
 8011702:	7505      	strb	r5, [r0, #20]
 8011704:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8011708:	bc30      	pop	{r4, r5}
 801170a:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801170e:	7543      	strb	r3, [r0, #21]
 8011710:	7583      	strb	r3, [r0, #22]
 8011712:	4770      	bx	lr

08011714 <ucdr_init_buffer_origin_offset>:
 8011714:	b510      	push	{r4, lr}
 8011716:	b082      	sub	sp, #8
 8011718:	9c04      	ldr	r4, [sp, #16]
 801171a:	9400      	str	r4, [sp, #0]
 801171c:	2401      	movs	r4, #1
 801171e:	9401      	str	r4, [sp, #4]
 8011720:	f7ff ffe4 	bl	80116ec <ucdr_init_buffer_origin_offset_endian>
 8011724:	b002      	add	sp, #8
 8011726:	bd10      	pop	{r4, pc}

08011728 <ucdr_init_buffer_origin>:
 8011728:	b510      	push	{r4, lr}
 801172a:	b082      	sub	sp, #8
 801172c:	2400      	movs	r4, #0
 801172e:	9400      	str	r4, [sp, #0]
 8011730:	f7ff fff0 	bl	8011714 <ucdr_init_buffer_origin_offset>
 8011734:	b002      	add	sp, #8
 8011736:	bd10      	pop	{r4, pc}

08011738 <ucdr_init_buffer>:
 8011738:	2300      	movs	r3, #0
 801173a:	f7ff bff5 	b.w	8011728 <ucdr_init_buffer_origin>
 801173e:	bf00      	nop

08011740 <ucdr_alignment>:
 8011740:	fbb0 f3f1 	udiv	r3, r0, r1
 8011744:	fb03 0011 	mls	r0, r3, r1, r0
 8011748:	1a08      	subs	r0, r1, r0
 801174a:	3901      	subs	r1, #1
 801174c:	4008      	ands	r0, r1
 801174e:	4770      	bx	lr

08011750 <ucdr_buffer_alignment>:
 8011750:	7d43      	ldrb	r3, [r0, #21]
 8011752:	428b      	cmp	r3, r1
 8011754:	d20a      	bcs.n	801176c <ucdr_buffer_alignment+0x1c>
 8011756:	e9d0 0303 	ldrd	r0, r3, [r0, #12]
 801175a:	1a1b      	subs	r3, r3, r0
 801175c:	fbb3 f0f1 	udiv	r0, r3, r1
 8011760:	fb01 3010 	mls	r0, r1, r0, r3
 8011764:	1a08      	subs	r0, r1, r0
 8011766:	3901      	subs	r1, #1
 8011768:	4008      	ands	r0, r1
 801176a:	4770      	bx	lr
 801176c:	2000      	movs	r0, #0
 801176e:	4770      	bx	lr

08011770 <ucdr_align_to>:
 8011770:	b570      	push	{r4, r5, r6, lr}
 8011772:	4604      	mov	r4, r0
 8011774:	460e      	mov	r6, r1
 8011776:	f7ff ffeb 	bl	8011750 <ucdr_buffer_alignment>
 801177a:	68a5      	ldr	r5, [r4, #8]
 801177c:	6863      	ldr	r3, [r4, #4]
 801177e:	6922      	ldr	r2, [r4, #16]
 8011780:	7566      	strb	r6, [r4, #21]
 8011782:	4405      	add	r5, r0
 8011784:	42ab      	cmp	r3, r5
 8011786:	4410      	add	r0, r2
 8011788:	bf28      	it	cs
 801178a:	462b      	movcs	r3, r5
 801178c:	6120      	str	r0, [r4, #16]
 801178e:	60a3      	str	r3, [r4, #8]
 8011790:	bd70      	pop	{r4, r5, r6, pc}
 8011792:	bf00      	nop

08011794 <ucdr_buffer_length>:
 8011794:	6882      	ldr	r2, [r0, #8]
 8011796:	6800      	ldr	r0, [r0, #0]
 8011798:	1a10      	subs	r0, r2, r0
 801179a:	4770      	bx	lr

0801179c <ucdr_buffer_remaining>:
 801179c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80117a0:	1a10      	subs	r0, r2, r0
 80117a2:	4770      	bx	lr

080117a4 <ucdr_check_final_buffer_behavior_array>:
 80117a4:	b538      	push	{r3, r4, r5, lr}
 80117a6:	7d83      	ldrb	r3, [r0, #22]
 80117a8:	b96b      	cbnz	r3, 80117c6 <ucdr_check_final_buffer_behavior_array+0x22>
 80117aa:	460d      	mov	r5, r1
 80117ac:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80117b0:	441a      	add	r2, r3
 80117b2:	4291      	cmp	r1, r2
 80117b4:	4604      	mov	r4, r0
 80117b6:	d208      	bcs.n	80117ca <ucdr_check_final_buffer_behavior_array+0x26>
 80117b8:	b13d      	cbz	r5, 80117ca <ucdr_check_final_buffer_behavior_array+0x26>
 80117ba:	6983      	ldr	r3, [r0, #24]
 80117bc:	b163      	cbz	r3, 80117d8 <ucdr_check_final_buffer_behavior_array+0x34>
 80117be:	69c1      	ldr	r1, [r0, #28]
 80117c0:	4798      	blx	r3
 80117c2:	75a0      	strb	r0, [r4, #22]
 80117c4:	b108      	cbz	r0, 80117ca <ucdr_check_final_buffer_behavior_array+0x26>
 80117c6:	2000      	movs	r0, #0
 80117c8:	bd38      	pop	{r3, r4, r5, pc}
 80117ca:	4620      	mov	r0, r4
 80117cc:	f7ff ffe6 	bl	801179c <ucdr_buffer_remaining>
 80117d0:	42a8      	cmp	r0, r5
 80117d2:	bf28      	it	cs
 80117d4:	4628      	movcs	r0, r5
 80117d6:	bd38      	pop	{r3, r4, r5, pc}
 80117d8:	2301      	movs	r3, #1
 80117da:	7583      	strb	r3, [r0, #22]
 80117dc:	e7f3      	b.n	80117c6 <ucdr_check_final_buffer_behavior_array+0x22>
 80117de:	bf00      	nop

080117e0 <ucdr_advance_buffer>:
 80117e0:	b538      	push	{r3, r4, r5, lr}
 80117e2:	4604      	mov	r4, r0
 80117e4:	460d      	mov	r5, r1
 80117e6:	f7ff ff55 	bl	8011694 <ucdr_check_buffer_available_for>
 80117ea:	b178      	cbz	r0, 801180c <ucdr_advance_buffer+0x2c>
 80117ec:	68a3      	ldr	r3, [r4, #8]
 80117ee:	6921      	ldr	r1, [r4, #16]
 80117f0:	442b      	add	r3, r5
 80117f2:	60a3      	str	r3, [r4, #8]
 80117f4:	2301      	movs	r3, #1
 80117f6:	4429      	add	r1, r5
 80117f8:	7563      	strb	r3, [r4, #21]
 80117fa:	6121      	str	r1, [r4, #16]
 80117fc:	bd38      	pop	{r3, r4, r5, pc}
 80117fe:	68a2      	ldr	r2, [r4, #8]
 8011800:	6923      	ldr	r3, [r4, #16]
 8011802:	4402      	add	r2, r0
 8011804:	4403      	add	r3, r0
 8011806:	1a2d      	subs	r5, r5, r0
 8011808:	60a2      	str	r2, [r4, #8]
 801180a:	6123      	str	r3, [r4, #16]
 801180c:	2201      	movs	r2, #1
 801180e:	4629      	mov	r1, r5
 8011810:	4620      	mov	r0, r4
 8011812:	f7ff ffc7 	bl	80117a4 <ucdr_check_final_buffer_behavior_array>
 8011816:	2800      	cmp	r0, #0
 8011818:	d1f1      	bne.n	80117fe <ucdr_advance_buffer+0x1e>
 801181a:	2301      	movs	r3, #1
 801181c:	7563      	strb	r3, [r4, #21]
 801181e:	bd38      	pop	{r3, r4, r5, pc}

08011820 <ucdr_serialize_sequence_char>:
 8011820:	b570      	push	{r4, r5, r6, lr}
 8011822:	460e      	mov	r6, r1
 8011824:	4615      	mov	r5, r2
 8011826:	7d01      	ldrb	r1, [r0, #20]
 8011828:	4604      	mov	r4, r0
 801182a:	f7ff fc95 	bl	8011158 <ucdr_serialize_endian_uint32_t>
 801182e:	b90d      	cbnz	r5, 8011834 <ucdr_serialize_sequence_char+0x14>
 8011830:	2001      	movs	r0, #1
 8011832:	bd70      	pop	{r4, r5, r6, pc}
 8011834:	7d21      	ldrb	r1, [r4, #20]
 8011836:	462b      	mov	r3, r5
 8011838:	4632      	mov	r2, r6
 801183a:	4620      	mov	r0, r4
 801183c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011840:	f7ff b910 	b.w	8010a64 <ucdr_serialize_endian_array_char>

08011844 <ucdr_deserialize_sequence_char>:
 8011844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011848:	461d      	mov	r5, r3
 801184a:	4616      	mov	r6, r2
 801184c:	460f      	mov	r7, r1
 801184e:	461a      	mov	r2, r3
 8011850:	7d01      	ldrb	r1, [r0, #20]
 8011852:	4604      	mov	r4, r0
 8011854:	f7ff fce0 	bl	8011218 <ucdr_deserialize_endian_uint32_t>
 8011858:	682b      	ldr	r3, [r5, #0]
 801185a:	429e      	cmp	r6, r3
 801185c:	bf3c      	itt	cc
 801185e:	2201      	movcc	r2, #1
 8011860:	75a2      	strbcc	r2, [r4, #22]
 8011862:	b913      	cbnz	r3, 801186a <ucdr_deserialize_sequence_char+0x26>
 8011864:	2001      	movs	r0, #1
 8011866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801186a:	7d21      	ldrb	r1, [r4, #20]
 801186c:	463a      	mov	r2, r7
 801186e:	4620      	mov	r0, r4
 8011870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011874:	f7ff b928 	b.w	8010ac8 <ucdr_deserialize_endian_array_char>

08011878 <ucdr_serialize_sequence_uint8_t>:
 8011878:	b570      	push	{r4, r5, r6, lr}
 801187a:	460e      	mov	r6, r1
 801187c:	4615      	mov	r5, r2
 801187e:	7d01      	ldrb	r1, [r0, #20]
 8011880:	4604      	mov	r4, r0
 8011882:	f7ff fc69 	bl	8011158 <ucdr_serialize_endian_uint32_t>
 8011886:	b90d      	cbnz	r5, 801188c <ucdr_serialize_sequence_uint8_t+0x14>
 8011888:	2001      	movs	r0, #1
 801188a:	bd70      	pop	{r4, r5, r6, pc}
 801188c:	7d21      	ldrb	r1, [r4, #20]
 801188e:	462b      	mov	r3, r5
 8011890:	4632      	mov	r2, r6
 8011892:	4620      	mov	r0, r4
 8011894:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011898:	f7ff b97a 	b.w	8010b90 <ucdr_serialize_endian_array_uint8_t>

0801189c <ucdr_serialize_sequence_uint16_t>:
 801189c:	b570      	push	{r4, r5, r6, lr}
 801189e:	460e      	mov	r6, r1
 80118a0:	4615      	mov	r5, r2
 80118a2:	7d01      	ldrb	r1, [r0, #20]
 80118a4:	4604      	mov	r4, r0
 80118a6:	f7ff fc57 	bl	8011158 <ucdr_serialize_endian_uint32_t>
 80118aa:	b90d      	cbnz	r5, 80118b0 <ucdr_serialize_sequence_uint16_t+0x14>
 80118ac:	2001      	movs	r0, #1
 80118ae:	bd70      	pop	{r4, r5, r6, pc}
 80118b0:	7d21      	ldrb	r1, [r4, #20]
 80118b2:	462b      	mov	r3, r5
 80118b4:	4632      	mov	r2, r6
 80118b6:	4620      	mov	r0, r4
 80118b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118bc:	f7ff b9cc 	b.w	8010c58 <ucdr_serialize_endian_array_uint16_t>

080118c0 <ucdr_deserialize_sequence_uint16_t>:
 80118c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118c4:	461d      	mov	r5, r3
 80118c6:	4616      	mov	r6, r2
 80118c8:	460f      	mov	r7, r1
 80118ca:	461a      	mov	r2, r3
 80118cc:	7d01      	ldrb	r1, [r0, #20]
 80118ce:	4604      	mov	r4, r0
 80118d0:	f7ff fca2 	bl	8011218 <ucdr_deserialize_endian_uint32_t>
 80118d4:	682b      	ldr	r3, [r5, #0]
 80118d6:	429e      	cmp	r6, r3
 80118d8:	bf3c      	itt	cc
 80118da:	2201      	movcc	r2, #1
 80118dc:	75a2      	strbcc	r2, [r4, #22]
 80118de:	b913      	cbnz	r3, 80118e6 <ucdr_deserialize_sequence_uint16_t+0x26>
 80118e0:	2001      	movs	r0, #1
 80118e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118e6:	7d21      	ldrb	r1, [r4, #20]
 80118e8:	463a      	mov	r2, r7
 80118ea:	4620      	mov	r0, r4
 80118ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118f0:	f7ff ba06 	b.w	8010d00 <ucdr_deserialize_endian_array_uint16_t>

080118f4 <uxr_buffer_delete_entity>:
 80118f4:	b530      	push	{r4, r5, lr}
 80118f6:	b08f      	sub	sp, #60	; 0x3c
 80118f8:	2403      	movs	r4, #3
 80118fa:	2500      	movs	r5, #0
 80118fc:	e9cd 4500 	strd	r4, r5, [sp]
 8011900:	9202      	str	r2, [sp, #8]
 8011902:	ab06      	add	r3, sp, #24
 8011904:	2204      	movs	r2, #4
 8011906:	9103      	str	r1, [sp, #12]
 8011908:	4604      	mov	r4, r0
 801190a:	f001 f959 	bl	8012bc0 <uxr_prepare_stream_to_write_submessage>
 801190e:	b918      	cbnz	r0, 8011918 <uxr_buffer_delete_entity+0x24>
 8011910:	4604      	mov	r4, r0
 8011912:	4620      	mov	r0, r4
 8011914:	b00f      	add	sp, #60	; 0x3c
 8011916:	bd30      	pop	{r4, r5, pc}
 8011918:	9902      	ldr	r1, [sp, #8]
 801191a:	aa05      	add	r2, sp, #20
 801191c:	4620      	mov	r0, r4
 801191e:	f001 fa85 	bl	8012e2c <uxr_init_base_object_request>
 8011922:	a905      	add	r1, sp, #20
 8011924:	4604      	mov	r4, r0
 8011926:	a806      	add	r0, sp, #24
 8011928:	f002 fec0 	bl	80146ac <uxr_serialize_DELETE_Payload>
 801192c:	4620      	mov	r0, r4
 801192e:	b00f      	add	sp, #60	; 0x3c
 8011930:	bd30      	pop	{r4, r5, pc}
 8011932:	bf00      	nop

08011934 <uxr_common_create_entity>:
 8011934:	b530      	push	{r4, r5, lr}
 8011936:	f3c2 4507 	ubfx	r5, r2, #16, #8
 801193a:	b08d      	sub	sp, #52	; 0x34
 801193c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8011940:	2d01      	cmp	r5, #1
 8011942:	bf0c      	ite	eq
 8011944:	f003 0201 	andeq.w	r2, r3, #1
 8011948:	2200      	movne	r2, #0
 801194a:	330e      	adds	r3, #14
 801194c:	4604      	mov	r4, r0
 801194e:	441a      	add	r2, r3
 8011950:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8011954:	9001      	str	r0, [sp, #4]
 8011956:	2101      	movs	r1, #1
 8011958:	9100      	str	r1, [sp, #0]
 801195a:	b292      	uxth	r2, r2
 801195c:	9903      	ldr	r1, [sp, #12]
 801195e:	ab04      	add	r3, sp, #16
 8011960:	4620      	mov	r0, r4
 8011962:	f001 f92d 	bl	8012bc0 <uxr_prepare_stream_to_write_submessage>
 8011966:	b918      	cbnz	r0, 8011970 <uxr_common_create_entity+0x3c>
 8011968:	4604      	mov	r4, r0
 801196a:	4620      	mov	r0, r4
 801196c:	b00d      	add	sp, #52	; 0x34
 801196e:	bd30      	pop	{r4, r5, pc}
 8011970:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011972:	9902      	ldr	r1, [sp, #8]
 8011974:	4620      	mov	r0, r4
 8011976:	f001 fa59 	bl	8012e2c <uxr_init_base_object_request>
 801197a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801197c:	4604      	mov	r4, r0
 801197e:	a804      	add	r0, sp, #16
 8011980:	f002 fdfc 	bl	801457c <uxr_serialize_CREATE_Payload>
 8011984:	4620      	mov	r0, r4
 8011986:	b00d      	add	sp, #52	; 0x34
 8011988:	bd30      	pop	{r4, r5, pc}
 801198a:	bf00      	nop

0801198c <uxr_buffer_create_participant_bin>:
 801198c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801198e:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8011992:	ac11      	add	r4, sp, #68	; 0x44
 8011994:	9103      	str	r1, [sp, #12]
 8011996:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 8011998:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 801199c:	2103      	movs	r1, #3
 801199e:	7221      	strb	r1, [r4, #8]
 80119a0:	2301      	movs	r3, #1
 80119a2:	2100      	movs	r1, #0
 80119a4:	7123      	strb	r3, [r4, #4]
 80119a6:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 80119aa:	9202      	str	r2, [sp, #8]
 80119ac:	4605      	mov	r5, r0
 80119ae:	f88d 1014 	strb.w	r1, [sp, #20]
 80119b2:	b1ce      	cbz	r6, 80119e8 <uxr_buffer_create_participant_bin+0x5c>
 80119b4:	f88d 301c 	strb.w	r3, [sp, #28]
 80119b8:	9608      	str	r6, [sp, #32]
 80119ba:	a809      	add	r0, sp, #36	; 0x24
 80119bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80119c0:	a915      	add	r1, sp, #84	; 0x54
 80119c2:	f7ff feb9 	bl	8011738 <ucdr_init_buffer>
 80119c6:	a905      	add	r1, sp, #20
 80119c8:	a809      	add	r0, sp, #36	; 0x24
 80119ca:	f002 fb1f 	bl	801400c <uxr_serialize_OBJK_DomainParticipant_Binary>
 80119ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 80119d0:	9401      	str	r4, [sp, #4]
 80119d2:	b283      	uxth	r3, r0
 80119d4:	9700      	str	r7, [sp, #0]
 80119d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80119da:	60e0      	str	r0, [r4, #12]
 80119dc:	4628      	mov	r0, r5
 80119de:	f7ff ffa9 	bl	8011934 <uxr_common_create_entity>
 80119e2:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 80119e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119e8:	f88d 601c 	strb.w	r6, [sp, #28]
 80119ec:	e7e5      	b.n	80119ba <uxr_buffer_create_participant_bin+0x2e>
 80119ee:	bf00      	nop

080119f0 <uxr_buffer_create_topic_bin>:
 80119f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119f2:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80119f6:	ac13      	add	r4, sp, #76	; 0x4c
 80119f8:	4605      	mov	r5, r0
 80119fa:	9105      	str	r1, [sp, #20]
 80119fc:	4618      	mov	r0, r3
 80119fe:	a997      	add	r1, sp, #604	; 0x25c
 8011a00:	2602      	movs	r6, #2
 8011a02:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011a06:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 8011a0a:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 8011a0e:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 8011a10:	f000 fa60 	bl	8011ed4 <uxr_object_id_to_raw>
 8011a14:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 8011a16:	9206      	str	r2, [sp, #24]
 8011a18:	2303      	movs	r3, #3
 8011a1a:	2101      	movs	r1, #1
 8011a1c:	7223      	strb	r3, [r4, #8]
 8011a1e:	a80b      	add	r0, sp, #44	; 0x2c
 8011a20:	2300      	movs	r3, #0
 8011a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a26:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8011a2a:	a917      	add	r1, sp, #92	; 0x5c
 8011a2c:	f88d 301c 	strb.w	r3, [sp, #28]
 8011a30:	960a      	str	r6, [sp, #40]	; 0x28
 8011a32:	f7ff fe81 	bl	8011738 <ucdr_init_buffer>
 8011a36:	a906      	add	r1, sp, #24
 8011a38:	a80b      	add	r0, sp, #44	; 0x2c
 8011a3a:	f002 fb09 	bl	8014050 <uxr_serialize_OBJK_Topic_Binary>
 8011a3e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011a40:	9401      	str	r4, [sp, #4]
 8011a42:	9700      	str	r7, [sp, #0]
 8011a44:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011a48:	4628      	mov	r0, r5
 8011a4a:	b2b3      	uxth	r3, r6
 8011a4c:	60e6      	str	r6, [r4, #12]
 8011a4e:	f7ff ff71 	bl	8011934 <uxr_common_create_entity>
 8011a52:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8011a56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011a58 <uxr_buffer_create_publisher_bin>:
 8011a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a5a:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8011a5e:	ac0e      	add	r4, sp, #56	; 0x38
 8011a60:	4605      	mov	r5, r0
 8011a62:	9105      	str	r1, [sp, #20]
 8011a64:	4618      	mov	r0, r3
 8011a66:	2603      	movs	r6, #3
 8011a68:	a992      	add	r1, sp, #584	; 0x248
 8011a6a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011a6e:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8011a72:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8011a76:	f000 fa2d 	bl	8011ed4 <uxr_object_id_to_raw>
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	a806      	add	r0, sp, #24
 8011a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a82:	a912      	add	r1, sp, #72	; 0x48
 8011a84:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011a88:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011a8c:	7226      	strb	r6, [r4, #8]
 8011a8e:	f7ff fe53 	bl	8011738 <ucdr_init_buffer>
 8011a92:	a993      	add	r1, sp, #588	; 0x24c
 8011a94:	a806      	add	r0, sp, #24
 8011a96:	f002 fb8f 	bl	80141b8 <uxr_serialize_OBJK_Publisher_Binary>
 8011a9a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011a9c:	9700      	str	r7, [sp, #0]
 8011a9e:	9401      	str	r4, [sp, #4]
 8011aa0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011aa4:	4628      	mov	r0, r5
 8011aa6:	b2b3      	uxth	r3, r6
 8011aa8:	60e6      	str	r6, [r4, #12]
 8011aaa:	f7ff ff43 	bl	8011934 <uxr_common_create_entity>
 8011aae:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8011ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011ab4 <uxr_buffer_create_subscriber_bin>:
 8011ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ab6:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8011aba:	ac0e      	add	r4, sp, #56	; 0x38
 8011abc:	4605      	mov	r5, r0
 8011abe:	9105      	str	r1, [sp, #20]
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	a992      	add	r1, sp, #584	; 0x248
 8011ac4:	2604      	movs	r6, #4
 8011ac6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011aca:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8011ace:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8011ad2:	f000 f9ff 	bl	8011ed4 <uxr_object_id_to_raw>
 8011ad6:	2103      	movs	r1, #3
 8011ad8:	2300      	movs	r3, #0
 8011ada:	a806      	add	r0, sp, #24
 8011adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011ae0:	7221      	strb	r1, [r4, #8]
 8011ae2:	a912      	add	r1, sp, #72	; 0x48
 8011ae4:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011ae8:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011aec:	f7ff fe24 	bl	8011738 <ucdr_init_buffer>
 8011af0:	a993      	add	r1, sp, #588	; 0x24c
 8011af2:	a806      	add	r0, sp, #24
 8011af4:	f002 fc10 	bl	8014318 <uxr_serialize_OBJK_Subscriber_Binary>
 8011af8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011afa:	9700      	str	r7, [sp, #0]
 8011afc:	9401      	str	r4, [sp, #4]
 8011afe:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011b02:	4628      	mov	r0, r5
 8011b04:	b2b3      	uxth	r3, r6
 8011b06:	60e6      	str	r6, [r4, #12]
 8011b08:	f7ff ff14 	bl	8011934 <uxr_common_create_entity>
 8011b0c:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8011b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b12:	bf00      	nop

08011b14 <uxr_buffer_create_datawriter_bin>:
 8011b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b18:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8011b1c:	ac1d      	add	r4, sp, #116	; 0x74
 8011b1e:	f8bd 92bc 	ldrh.w	r9, [sp, #700]	; 0x2bc
 8011b22:	9105      	str	r1, [sp, #20]
 8011b24:	2605      	movs	r6, #5
 8011b26:	a9a1      	add	r1, sp, #644	; 0x284
 8011b28:	4605      	mov	r5, r0
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	9204      	str	r2, [sp, #16]
 8011b2e:	9303      	str	r3, [sp, #12]
 8011b30:	f89d b2b4 	ldrb.w	fp, [sp, #692]	; 0x2b4
 8011b34:	7126      	strb	r6, [r4, #4]
 8011b36:	f89d a2b8 	ldrb.w	sl, [sp, #696]	; 0x2b8
 8011b3a:	f89d 62c0 	ldrb.w	r6, [sp, #704]	; 0x2c0
 8011b3e:	f89d 82c4 	ldrb.w	r8, [sp, #708]	; 0x2c4
 8011b42:	2703      	movs	r7, #3
 8011b44:	f000 f9c6 	bl	8011ed4 <uxr_object_id_to_raw>
 8011b48:	a90e      	add	r1, sp, #56	; 0x38
 8011b4a:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
 8011b4c:	7227      	strb	r7, [r4, #8]
 8011b4e:	f000 f9c1 	bl	8011ed4 <uxr_object_id_to_raw>
 8011b52:	f1b9 0100 	subs.w	r1, r9, #0
 8011b56:	f04f 0300 	mov.w	r3, #0
 8011b5a:	bf18      	it	ne
 8011b5c:	2101      	movne	r1, #1
 8011b5e:	2201      	movs	r2, #1
 8011b60:	f8ad 9044 	strh.w	r9, [sp, #68]	; 0x44
 8011b64:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
 8011b68:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8011b6c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8011b70:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8011b74:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8011b78:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011b7c:	f1bb 0f00 	cmp.w	fp, #0
 8011b80:	d131      	bne.n	8011be6 <uxr_buffer_create_datawriter_bin+0xd2>
 8011b82:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
 8011b86:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011b8a:	f04f 0c12 	mov.w	ip, #18
 8011b8e:	200a      	movs	r0, #10
 8011b90:	2320      	movs	r3, #32
 8011b92:	2210      	movs	r2, #16
 8011b94:	2108      	movs	r1, #8
 8011b96:	2702      	movs	r7, #2
 8011b98:	f1ba 0f00 	cmp.w	sl, #0
 8011b9c:	d004      	beq.n	8011ba8 <uxr_buffer_create_datawriter_bin+0x94>
 8011b9e:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011ba2:	4673      	mov	r3, lr
 8011ba4:	4662      	mov	r2, ip
 8011ba6:	4601      	mov	r1, r0
 8011ba8:	2e02      	cmp	r6, #2
 8011baa:	d027      	beq.n	8011bfc <uxr_buffer_create_datawriter_bin+0xe8>
 8011bac:	2e03      	cmp	r6, #3
 8011bae:	d02b      	beq.n	8011c08 <uxr_buffer_create_datawriter_bin+0xf4>
 8011bb0:	2e01      	cmp	r6, #1
 8011bb2:	d026      	beq.n	8011c02 <uxr_buffer_create_datawriter_bin+0xee>
 8011bb4:	a806      	add	r0, sp, #24
 8011bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011bba:	a921      	add	r1, sp, #132	; 0x84
 8011bbc:	f7ff fdbc 	bl	8011738 <ucdr_init_buffer>
 8011bc0:	a90e      	add	r1, sp, #56	; 0x38
 8011bc2:	a806      	add	r0, sp, #24
 8011bc4:	f002 fc5a 	bl	801447c <uxr_serialize_OBJK_DataWriter_Binary>
 8011bc8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011bca:	9401      	str	r4, [sp, #4]
 8011bcc:	b283      	uxth	r3, r0
 8011bce:	f8cd 8000 	str.w	r8, [sp]
 8011bd2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011bd6:	60e0      	str	r0, [r4, #12]
 8011bd8:	4628      	mov	r0, r5
 8011bda:	f7ff feab 	bl	8011934 <uxr_common_create_entity>
 8011bde:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8011be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011be6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011bea:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8011bee:	f04f 0c13 	mov.w	ip, #19
 8011bf2:	200b      	movs	r0, #11
 8011bf4:	2321      	movs	r3, #33	; 0x21
 8011bf6:	2211      	movs	r2, #17
 8011bf8:	2109      	movs	r1, #9
 8011bfa:	e7cd      	b.n	8011b98 <uxr_buffer_create_datawriter_bin+0x84>
 8011bfc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011c00:	e7d8      	b.n	8011bb4 <uxr_buffer_create_datawriter_bin+0xa0>
 8011c02:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011c06:	e7d5      	b.n	8011bb4 <uxr_buffer_create_datawriter_bin+0xa0>
 8011c08:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011c0c:	e7d2      	b.n	8011bb4 <uxr_buffer_create_datawriter_bin+0xa0>
 8011c0e:	bf00      	nop

08011c10 <uxr_buffer_create_datareader_bin>:
 8011c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c14:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8011c18:	ac1f      	add	r4, sp, #124	; 0x7c
 8011c1a:	f8bd 92c4 	ldrh.w	r9, [sp, #708]	; 0x2c4
 8011c1e:	9105      	str	r1, [sp, #20]
 8011c20:	2606      	movs	r6, #6
 8011c22:	a9a3      	add	r1, sp, #652	; 0x28c
 8011c24:	4605      	mov	r5, r0
 8011c26:	4618      	mov	r0, r3
 8011c28:	9204      	str	r2, [sp, #16]
 8011c2a:	9303      	str	r3, [sp, #12]
 8011c2c:	f89d b2bc 	ldrb.w	fp, [sp, #700]	; 0x2bc
 8011c30:	7126      	strb	r6, [r4, #4]
 8011c32:	f89d a2c0 	ldrb.w	sl, [sp, #704]	; 0x2c0
 8011c36:	f89d 62c8 	ldrb.w	r6, [sp, #712]	; 0x2c8
 8011c3a:	f89d 82cc 	ldrb.w	r8, [sp, #716]	; 0x2cc
 8011c3e:	2703      	movs	r7, #3
 8011c40:	f000 f948 	bl	8011ed4 <uxr_object_id_to_raw>
 8011c44:	a90e      	add	r1, sp, #56	; 0x38
 8011c46:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
 8011c48:	7227      	strb	r7, [r4, #8]
 8011c4a:	f000 f943 	bl	8011ed4 <uxr_object_id_to_raw>
 8011c4e:	f1b9 0100 	subs.w	r1, r9, #0
 8011c52:	f04f 0300 	mov.w	r3, #0
 8011c56:	bf18      	it	ne
 8011c58:	2101      	movne	r1, #1
 8011c5a:	2201      	movs	r2, #1
 8011c5c:	f8ad 9044 	strh.w	r9, [sp, #68]	; 0x44
 8011c60:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
 8011c64:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8011c68:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8011c6c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8011c70:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8011c74:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8011c78:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011c7c:	f1bb 0f00 	cmp.w	fp, #0
 8011c80:	d131      	bne.n	8011ce6 <uxr_buffer_create_datareader_bin+0xd6>
 8011c82:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
 8011c86:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011c8a:	f04f 0c12 	mov.w	ip, #18
 8011c8e:	200a      	movs	r0, #10
 8011c90:	2320      	movs	r3, #32
 8011c92:	2210      	movs	r2, #16
 8011c94:	2108      	movs	r1, #8
 8011c96:	2702      	movs	r7, #2
 8011c98:	f1ba 0f00 	cmp.w	sl, #0
 8011c9c:	d004      	beq.n	8011ca8 <uxr_buffer_create_datareader_bin+0x98>
 8011c9e:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011ca2:	4673      	mov	r3, lr
 8011ca4:	4662      	mov	r2, ip
 8011ca6:	4601      	mov	r1, r0
 8011ca8:	2e02      	cmp	r6, #2
 8011caa:	d027      	beq.n	8011cfc <uxr_buffer_create_datareader_bin+0xec>
 8011cac:	2e03      	cmp	r6, #3
 8011cae:	d02b      	beq.n	8011d08 <uxr_buffer_create_datareader_bin+0xf8>
 8011cb0:	2e01      	cmp	r6, #1
 8011cb2:	d026      	beq.n	8011d02 <uxr_buffer_create_datareader_bin+0xf2>
 8011cb4:	a806      	add	r0, sp, #24
 8011cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011cba:	a923      	add	r1, sp, #140	; 0x8c
 8011cbc:	f7ff fd3c 	bl	8011738 <ucdr_init_buffer>
 8011cc0:	a90e      	add	r1, sp, #56	; 0x38
 8011cc2:	a806      	add	r0, sp, #24
 8011cc4:	f002 fb9e 	bl	8014404 <uxr_serialize_OBJK_DataReader_Binary>
 8011cc8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011cca:	9401      	str	r4, [sp, #4]
 8011ccc:	b283      	uxth	r3, r0
 8011cce:	f8cd 8000 	str.w	r8, [sp]
 8011cd2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011cd6:	60e0      	str	r0, [r4, #12]
 8011cd8:	4628      	mov	r0, r5
 8011cda:	f7ff fe2b 	bl	8011934 <uxr_common_create_entity>
 8011cde:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8011ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ce6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011cea:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8011cee:	f04f 0c13 	mov.w	ip, #19
 8011cf2:	200b      	movs	r0, #11
 8011cf4:	2321      	movs	r3, #33	; 0x21
 8011cf6:	2211      	movs	r2, #17
 8011cf8:	2109      	movs	r1, #9
 8011cfa:	e7cd      	b.n	8011c98 <uxr_buffer_create_datareader_bin+0x88>
 8011cfc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011d00:	e7d8      	b.n	8011cb4 <uxr_buffer_create_datareader_bin+0xa4>
 8011d02:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011d06:	e7d5      	b.n	8011cb4 <uxr_buffer_create_datareader_bin+0xa4>
 8011d08:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011d0c:	e7d2      	b.n	8011cb4 <uxr_buffer_create_datareader_bin+0xa4>
 8011d0e:	bf00      	nop

08011d10 <get_custom_error>:
 8011d10:	4b01      	ldr	r3, [pc, #4]	; (8011d18 <get_custom_error+0x8>)
 8011d12:	7818      	ldrb	r0, [r3, #0]
 8011d14:	4770      	bx	lr
 8011d16:	bf00      	nop
 8011d18:	20010464 	.word	0x20010464

08011d1c <recv_custom_msg>:
 8011d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d20:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8011d24:	b089      	sub	sp, #36	; 0x24
 8011d26:	2600      	movs	r6, #0
 8011d28:	4604      	mov	r4, r0
 8011d2a:	9305      	str	r3, [sp, #20]
 8011d2c:	468a      	mov	sl, r1
 8011d2e:	4693      	mov	fp, r2
 8011d30:	f88d 601e 	strb.w	r6, [sp, #30]
 8011d34:	b325      	cbz	r5, 8011d80 <recv_custom_msg+0x64>
 8011d36:	f200 2902 	addw	r9, r0, #514	; 0x202
 8011d3a:	f10d 081f 	add.w	r8, sp, #31
 8011d3e:	af05      	add	r7, sp, #20
 8011d40:	f10d 061e 	add.w	r6, sp, #30
 8011d44:	f44f 7500 	mov.w	r5, #512	; 0x200
 8011d48:	e002      	b.n	8011d50 <recv_custom_msg+0x34>
 8011d4a:	9b05      	ldr	r3, [sp, #20]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	dd0f      	ble.n	8011d70 <recv_custom_msg+0x54>
 8011d50:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8011d54:	e9cd 5600 	strd	r5, r6, [sp]
 8011d58:	4623      	mov	r3, r4
 8011d5a:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8011d5e:	4622      	mov	r2, r4
 8011d60:	4648      	mov	r0, r9
 8011d62:	f001 fa87 	bl	8013274 <uxr_read_framed_msg>
 8011d66:	2800      	cmp	r0, #0
 8011d68:	d0ef      	beq.n	8011d4a <recv_custom_msg+0x2e>
 8011d6a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8011d6e:	b1b3      	cbz	r3, 8011d9e <recv_custom_msg+0x82>
 8011d70:	4b0f      	ldr	r3, [pc, #60]	; (8011db0 <recv_custom_msg+0x94>)
 8011d72:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8011d76:	701a      	strb	r2, [r3, #0]
 8011d78:	2000      	movs	r0, #0
 8011d7a:	b009      	add	sp, #36	; 0x24
 8011d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d80:	f10d 021f 	add.w	r2, sp, #31
 8011d84:	9200      	str	r2, [sp, #0]
 8011d86:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8011d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d8e:	4601      	mov	r1, r0
 8011d90:	47a8      	blx	r5
 8011d92:	2800      	cmp	r0, #0
 8011d94:	d0ec      	beq.n	8011d70 <recv_custom_msg+0x54>
 8011d96:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d1e8      	bne.n	8011d70 <recv_custom_msg+0x54>
 8011d9e:	f8cb 0000 	str.w	r0, [fp]
 8011da2:	2001      	movs	r0, #1
 8011da4:	f8ca 4000 	str.w	r4, [sl]
 8011da8:	b009      	add	sp, #36	; 0x24
 8011daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dae:	bf00      	nop
 8011db0:	20010464 	.word	0x20010464

08011db4 <send_custom_msg>:
 8011db4:	b570      	push	{r4, r5, r6, lr}
 8011db6:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8011dba:	b086      	sub	sp, #24
 8011dbc:	4616      	mov	r6, r2
 8011dbe:	b975      	cbnz	r5, 8011dde <send_custom_msg+0x2a>
 8011dc0:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8011dc4:	f10d 0317 	add.w	r3, sp, #23
 8011dc8:	47a0      	blx	r4
 8011dca:	b108      	cbz	r0, 8011dd0 <send_custom_msg+0x1c>
 8011dcc:	42b0      	cmp	r0, r6
 8011dce:	d015      	beq.n	8011dfc <send_custom_msg+0x48>
 8011dd0:	4b0c      	ldr	r3, [pc, #48]	; (8011e04 <send_custom_msg+0x50>)
 8011dd2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8011dd6:	701a      	strb	r2, [r3, #0]
 8011dd8:	2000      	movs	r0, #0
 8011dda:	b006      	add	sp, #24
 8011ddc:	bd70      	pop	{r4, r5, r6, pc}
 8011dde:	460b      	mov	r3, r1
 8011de0:	2200      	movs	r2, #0
 8011de2:	f10d 0117 	add.w	r1, sp, #23
 8011de6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011dea:	9600      	str	r6, [sp, #0]
 8011dec:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8011df0:	4602      	mov	r2, r0
 8011df2:	f200 2002 	addw	r0, r0, #514	; 0x202
 8011df6:	f001 f84f 	bl	8012e98 <uxr_write_framed_msg>
 8011dfa:	e7e6      	b.n	8011dca <send_custom_msg+0x16>
 8011dfc:	2001      	movs	r0, #1
 8011dfe:	b006      	add	sp, #24
 8011e00:	bd70      	pop	{r4, r5, r6, pc}
 8011e02:	bf00      	nop
 8011e04:	20010464 	.word	0x20010464

08011e08 <uxr_set_custom_transport_callbacks>:
 8011e08:	b430      	push	{r4, r5}
 8011e0a:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8011e0e:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8011e12:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 8011e16:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8011e1a:	bc30      	pop	{r4, r5}
 8011e1c:	4770      	bx	lr
 8011e1e:	bf00      	nop

08011e20 <uxr_init_custom_transport>:
 8011e20:	b538      	push	{r3, r4, r5, lr}
 8011e22:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8011e26:	b303      	cbz	r3, 8011e6a <uxr_init_custom_transport+0x4a>
 8011e28:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	b1e2      	cbz	r2, 8011e6a <uxr_init_custom_transport+0x4a>
 8011e30:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8011e34:	b1ca      	cbz	r2, 8011e6a <uxr_init_custom_transport+0x4a>
 8011e36:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8011e3a:	b1b2      	cbz	r2, 8011e6a <uxr_init_custom_transport+0x4a>
 8011e3c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8011e40:	4798      	blx	r3
 8011e42:	4605      	mov	r5, r0
 8011e44:	b188      	cbz	r0, 8011e6a <uxr_init_custom_transport+0x4a>
 8011e46:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8011e4a:	b98b      	cbnz	r3, 8011e70 <uxr_init_custom_transport+0x50>
 8011e4c:	480b      	ldr	r0, [pc, #44]	; (8011e7c <uxr_init_custom_transport+0x5c>)
 8011e4e:	490c      	ldr	r1, [pc, #48]	; (8011e80 <uxr_init_custom_transport+0x60>)
 8011e50:	4a0c      	ldr	r2, [pc, #48]	; (8011e84 <uxr_init_custom_transport+0x64>)
 8011e52:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 8011e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011e5a:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 8011e5e:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8011e62:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8011e66:	4628      	mov	r0, r5
 8011e68:	bd38      	pop	{r3, r4, r5, pc}
 8011e6a:	2500      	movs	r5, #0
 8011e6c:	4628      	mov	r0, r5
 8011e6e:	bd38      	pop	{r3, r4, r5, pc}
 8011e70:	2100      	movs	r1, #0
 8011e72:	f204 2002 	addw	r0, r4, #514	; 0x202
 8011e76:	f001 f809 	bl	8012e8c <uxr_init_framing_io>
 8011e7a:	e7e7      	b.n	8011e4c <uxr_init_custom_transport+0x2c>
 8011e7c:	08011db5 	.word	0x08011db5
 8011e80:	08011d1d 	.word	0x08011d1d
 8011e84:	08011d11 	.word	0x08011d11

08011e88 <uxr_close_custom_transport>:
 8011e88:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8011e8c:	4718      	bx	r3
 8011e8e:	bf00      	nop

08011e90 <uxr_object_id>:
 8011e90:	b082      	sub	sp, #8
 8011e92:	2300      	movs	r3, #0
 8011e94:	f88d 1006 	strb.w	r1, [sp, #6]
 8011e98:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011e9c:	f360 030f 	bfi	r3, r0, #0, #16
 8011ea0:	f362 431f 	bfi	r3, r2, #16, #16
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	b002      	add	sp, #8
 8011ea8:	4770      	bx	lr
 8011eaa:	bf00      	nop

08011eac <uxr_object_id_from_raw>:
 8011eac:	7843      	ldrb	r3, [r0, #1]
 8011eae:	7801      	ldrb	r1, [r0, #0]
 8011eb0:	b082      	sub	sp, #8
 8011eb2:	f003 000f 	and.w	r0, r3, #15
 8011eb6:	f88d 0006 	strb.w	r0, [sp, #6]
 8011eba:	091b      	lsrs	r3, r3, #4
 8011ebc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8011ec6:	f363 020f 	bfi	r2, r3, #0, #16
 8011eca:	f361 421f 	bfi	r2, r1, #16, #16
 8011ece:	4610      	mov	r0, r2
 8011ed0:	b002      	add	sp, #8
 8011ed2:	4770      	bx	lr

08011ed4 <uxr_object_id_to_raw>:
 8011ed4:	4602      	mov	r2, r0
 8011ed6:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8011eda:	b082      	sub	sp, #8
 8011edc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8011ee0:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8011ee4:	700a      	strb	r2, [r1, #0]
 8011ee6:	704b      	strb	r3, [r1, #1]
 8011ee8:	b002      	add	sp, #8
 8011eea:	4770      	bx	lr

08011eec <uxr_buffer_request_data>:
 8011eec:	b530      	push	{r4, r5, lr}
 8011eee:	b095      	sub	sp, #84	; 0x54
 8011ef0:	4604      	mov	r4, r0
 8011ef2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8011ef4:	9105      	str	r1, [sp, #20]
 8011ef6:	2d00      	cmp	r5, #0
 8011ef8:	bf14      	ite	ne
 8011efa:	2101      	movne	r1, #1
 8011efc:	2100      	moveq	r1, #0
 8011efe:	9204      	str	r2, [sp, #16]
 8011f00:	f04f 0200 	mov.w	r2, #0
 8011f04:	9303      	str	r3, [sp, #12]
 8011f06:	f88d 301c 	strb.w	r3, [sp, #28]
 8011f0a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8011f0e:	f88d 201d 	strb.w	r2, [sp, #29]
 8011f12:	f88d 201e 	strb.w	r2, [sp, #30]
 8011f16:	d021      	beq.n	8011f5c <uxr_buffer_request_data+0x70>
 8011f18:	686a      	ldr	r2, [r5, #4]
 8011f1a:	682b      	ldr	r3, [r5, #0]
 8011f1c:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 8011f20:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8011f24:	2210      	movs	r2, #16
 8011f26:	2000      	movs	r0, #0
 8011f28:	2108      	movs	r1, #8
 8011f2a:	e9cd 1000 	strd	r1, r0, [sp]
 8011f2e:	ab0c      	add	r3, sp, #48	; 0x30
 8011f30:	9905      	ldr	r1, [sp, #20]
 8011f32:	4620      	mov	r0, r4
 8011f34:	f000 fe44 	bl	8012bc0 <uxr_prepare_stream_to_write_submessage>
 8011f38:	b918      	cbnz	r0, 8011f42 <uxr_buffer_request_data+0x56>
 8011f3a:	4604      	mov	r4, r0
 8011f3c:	4620      	mov	r0, r4
 8011f3e:	b015      	add	sp, #84	; 0x54
 8011f40:	bd30      	pop	{r4, r5, pc}
 8011f42:	9904      	ldr	r1, [sp, #16]
 8011f44:	aa06      	add	r2, sp, #24
 8011f46:	4620      	mov	r0, r4
 8011f48:	f000 ff70 	bl	8012e2c <uxr_init_base_object_request>
 8011f4c:	a906      	add	r1, sp, #24
 8011f4e:	4604      	mov	r4, r0
 8011f50:	a80c      	add	r0, sp, #48	; 0x30
 8011f52:	f002 fc09 	bl	8014768 <uxr_serialize_READ_DATA_Payload>
 8011f56:	4620      	mov	r0, r4
 8011f58:	b015      	add	sp, #84	; 0x54
 8011f5a:	bd30      	pop	{r4, r5, pc}
 8011f5c:	2208      	movs	r2, #8
 8011f5e:	e7e2      	b.n	8011f26 <uxr_buffer_request_data+0x3a>

08011f60 <read_submessage_format>:
 8011f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f64:	b095      	sub	sp, #84	; 0x54
 8011f66:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 8011f6a:	b113      	cbz	r3, 8011f72 <read_submessage_format+0x12>
 8011f6c:	b015      	add	sp, #84	; 0x54
 8011f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f72:	460c      	mov	r4, r1
 8011f74:	4616      	mov	r6, r2
 8011f76:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8011f7a:	461d      	mov	r5, r3
 8011f7c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011f7e:	9304      	str	r3, [sp, #16]
 8011f80:	1a52      	subs	r2, r2, r1
 8011f82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011f84:	9305      	str	r3, [sp, #20]
 8011f86:	4607      	mov	r7, r0
 8011f88:	a80c      	add	r0, sp, #48	; 0x30
 8011f8a:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8011f8e:	f7ff fbd3 	bl	8011738 <ucdr_init_buffer>
 8011f92:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011f96:	a80c      	add	r0, sp, #48	; 0x30
 8011f98:	f7ff fba4 	bl	80116e4 <ucdr_set_on_full_buffer_callback>
 8011f9c:	69e3      	ldr	r3, [r4, #28]
 8011f9e:	b193      	cbz	r3, 8011fc6 <read_submessage_format+0x66>
 8011fa0:	f1b8 0f07 	cmp.w	r8, #7
 8011fa4:	751d      	strb	r5, [r3, #20]
 8011fa6:	d03e      	beq.n	8012026 <read_submessage_format+0xc6>
 8011fa8:	f1b8 0f08 	cmp.w	r8, #8
 8011fac:	d02c      	beq.n	8012008 <read_submessage_format+0xa8>
 8011fae:	f1b8 0f06 	cmp.w	r8, #6
 8011fb2:	d011      	beq.n	8011fd8 <read_submessage_format+0x78>
 8011fb4:	2201      	movs	r2, #1
 8011fb6:	751a      	strb	r2, [r3, #20]
 8011fb8:	4631      	mov	r1, r6
 8011fba:	4620      	mov	r0, r4
 8011fbc:	f7ff fc10 	bl	80117e0 <ucdr_advance_buffer>
 8011fc0:	b015      	add	sp, #84	; 0x54
 8011fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fc6:	f1b8 0f07 	cmp.w	r8, #7
 8011fca:	d02c      	beq.n	8012026 <read_submessage_format+0xc6>
 8011fcc:	f1b8 0f08 	cmp.w	r8, #8
 8011fd0:	d01a      	beq.n	8012008 <read_submessage_format+0xa8>
 8011fd2:	f1b8 0f06 	cmp.w	r8, #6
 8011fd6:	d1ef      	bne.n	8011fb8 <read_submessage_format+0x58>
 8011fd8:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8011fdc:	b18d      	cbz	r5, 8012002 <read_submessage_format+0xa2>
 8011fde:	2306      	movs	r3, #6
 8011fe0:	f88d 3016 	strb.w	r3, [sp, #22]
 8011fe4:	aa0c      	add	r2, sp, #48	; 0x30
 8011fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011fea:	9302      	str	r3, [sp, #8]
 8011fec:	9200      	str	r2, [sp, #0]
 8011fee:	9b04      	ldr	r3, [sp, #16]
 8011ff0:	9905      	ldr	r1, [sp, #20]
 8011ff2:	9601      	str	r6, [sp, #4]
 8011ff4:	464a      	mov	r2, r9
 8011ff6:	4638      	mov	r0, r7
 8011ff8:	47a8      	blx	r5
 8011ffa:	2301      	movs	r3, #1
 8011ffc:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8012000:	69e3      	ldr	r3, [r4, #28]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d1d6      	bne.n	8011fb4 <read_submessage_format+0x54>
 8012006:	e7d7      	b.n	8011fb8 <read_submessage_format+0x58>
 8012008:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801200c:	2a00      	cmp	r2, #0
 801200e:	d0f8      	beq.n	8012002 <read_submessage_format+0xa2>
 8012010:	a906      	add	r1, sp, #24
 8012012:	a80c      	add	r0, sp, #48	; 0x30
 8012014:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8012016:	f002 fc7b 	bl	8014910 <uxr_deserialize_SampleIdentity>
 801201a:	2800      	cmp	r0, #0
 801201c:	d13c      	bne.n	8012098 <read_submessage_format+0x138>
 801201e:	69e3      	ldr	r3, [r4, #28]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d1c7      	bne.n	8011fb4 <read_submessage_format+0x54>
 8012024:	e7c8      	b.n	8011fb8 <read_submessage_format+0x58>
 8012026:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801202a:	b132      	cbz	r2, 801203a <read_submessage_format+0xda>
 801202c:	a906      	add	r1, sp, #24
 801202e:	a80c      	add	r0, sp, #48	; 0x30
 8012030:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8012032:	f002 fa4f 	bl	80144d4 <uxr_deserialize_BaseObjectRequest>
 8012036:	b930      	cbnz	r0, 8012046 <read_submessage_format+0xe6>
 8012038:	69e3      	ldr	r3, [r4, #28]
 801203a:	68a2      	ldr	r2, [r4, #8]
 801203c:	4432      	add	r2, r6
 801203e:	60a2      	str	r2, [r4, #8]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d1b7      	bne.n	8011fb4 <read_submessage_format+0x54>
 8012044:	e7b8      	b.n	8011fb8 <read_submessage_format+0x58>
 8012046:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801204a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801204c:	1a52      	subs	r2, r2, r1
 801204e:	a80c      	add	r0, sp, #48	; 0x30
 8012050:	1aed      	subs	r5, r5, r3
 8012052:	f7ff fb71 	bl	8011738 <ucdr_init_buffer>
 8012056:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801205a:	a80c      	add	r0, sp, #48	; 0x30
 801205c:	f7ff fb42 	bl	80116e4 <ucdr_set_on_full_buffer_callback>
 8012060:	4435      	add	r5, r6
 8012062:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8012066:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801206a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801206e:	9002      	str	r0, [sp, #8]
 8012070:	2207      	movs	r2, #7
 8012072:	f88d 2016 	strb.w	r2, [sp, #22]
 8012076:	b2ad      	uxth	r5, r5
 8012078:	aa0c      	add	r2, sp, #48	; 0x30
 801207a:	9200      	str	r2, [sp, #0]
 801207c:	9501      	str	r5, [sp, #4]
 801207e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012082:	b29b      	uxth	r3, r3
 8012084:	9905      	ldr	r1, [sp, #20]
 8012086:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 801208a:	464a      	mov	r2, r9
 801208c:	4638      	mov	r0, r7
 801208e:	47a8      	blx	r5
 8012090:	2301      	movs	r3, #1
 8012092:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8012096:	e7cf      	b.n	8012038 <read_submessage_format+0xd8>
 8012098:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801209c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801209e:	1a52      	subs	r2, r2, r1
 80120a0:	a80c      	add	r0, sp, #48	; 0x30
 80120a2:	1aed      	subs	r5, r5, r3
 80120a4:	f7ff fb48 	bl	8011738 <ucdr_init_buffer>
 80120a8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80120ac:	a80c      	add	r0, sp, #48	; 0x30
 80120ae:	f7ff fb19 	bl	80116e4 <ucdr_set_on_full_buffer_callback>
 80120b2:	4435      	add	r5, r6
 80120b4:	2308      	movs	r3, #8
 80120b6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80120ba:	f88d 3016 	strb.w	r3, [sp, #22]
 80120be:	b2ad      	uxth	r5, r5
 80120c0:	ab0c      	add	r3, sp, #48	; 0x30
 80120c2:	9300      	str	r3, [sp, #0]
 80120c4:	9002      	str	r0, [sp, #8]
 80120c6:	9501      	str	r5, [sp, #4]
 80120c8:	ab06      	add	r3, sp, #24
 80120ca:	9905      	ldr	r1, [sp, #20]
 80120cc:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 80120d0:	464a      	mov	r2, r9
 80120d2:	4638      	mov	r0, r7
 80120d4:	47a8      	blx	r5
 80120d6:	2301      	movs	r3, #1
 80120d8:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80120dc:	e79f      	b.n	801201e <read_submessage_format+0xbe>
 80120de:	bf00      	nop

080120e0 <on_get_fragmentation_info>:
 80120e0:	b500      	push	{lr}
 80120e2:	b08b      	sub	sp, #44	; 0x2c
 80120e4:	4601      	mov	r1, r0
 80120e6:	2204      	movs	r2, #4
 80120e8:	a802      	add	r0, sp, #8
 80120ea:	f7ff fb25 	bl	8011738 <ucdr_init_buffer>
 80120ee:	f10d 0305 	add.w	r3, sp, #5
 80120f2:	a802      	add	r0, sp, #8
 80120f4:	f10d 0206 	add.w	r2, sp, #6
 80120f8:	a901      	add	r1, sp, #4
 80120fa:	f001 fc9f 	bl	8013a3c <uxr_read_submessage_header>
 80120fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012102:	2b0d      	cmp	r3, #13
 8012104:	d003      	beq.n	801210e <on_get_fragmentation_info+0x2e>
 8012106:	2000      	movs	r0, #0
 8012108:	b00b      	add	sp, #44	; 0x2c
 801210a:	f85d fb04 	ldr.w	pc, [sp], #4
 801210e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012112:	f013 0f02 	tst.w	r3, #2
 8012116:	bf14      	ite	ne
 8012118:	2002      	movne	r0, #2
 801211a:	2001      	moveq	r0, #1
 801211c:	b00b      	add	sp, #44	; 0x2c
 801211e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012122:	bf00      	nop

08012124 <write_submessage_acknack.isra.0>:
 8012124:	b570      	push	{r4, r5, r6, lr}
 8012126:	b092      	sub	sp, #72	; 0x48
 8012128:	4605      	mov	r5, r0
 801212a:	460e      	mov	r6, r1
 801212c:	4614      	mov	r4, r2
 801212e:	f000 fe75 	bl	8012e1c <uxr_session_header_offset>
 8012132:	a905      	add	r1, sp, #20
 8012134:	9000      	str	r0, [sp, #0]
 8012136:	2300      	movs	r3, #0
 8012138:	a80a      	add	r0, sp, #40	; 0x28
 801213a:	2211      	movs	r2, #17
 801213c:	f7ff faea 	bl	8011714 <ucdr_init_buffer_origin_offset>
 8012140:	2218      	movs	r2, #24
 8012142:	fb02 5404 	mla	r4, r2, r4, r5
 8012146:	2300      	movs	r3, #0
 8012148:	2205      	movs	r2, #5
 801214a:	3450      	adds	r4, #80	; 0x50
 801214c:	a80a      	add	r0, sp, #40	; 0x28
 801214e:	210a      	movs	r1, #10
 8012150:	f001 fc5a 	bl	8013a08 <uxr_buffer_submessage_header>
 8012154:	a903      	add	r1, sp, #12
 8012156:	4620      	mov	r0, r4
 8012158:	f005 ff5c 	bl	8018014 <uxr_compute_acknack>
 801215c:	a903      	add	r1, sp, #12
 801215e:	ba43      	rev16	r3, r0
 8012160:	a80a      	add	r0, sp, #40	; 0x28
 8012162:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012166:	f88d 6010 	strb.w	r6, [sp, #16]
 801216a:	f002 fb21 	bl	80147b0 <uxr_serialize_ACKNACK_Payload>
 801216e:	2200      	movs	r2, #0
 8012170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012172:	4611      	mov	r1, r2
 8012174:	4628      	mov	r0, r5
 8012176:	f000 fdf9 	bl	8012d6c <uxr_stamp_session_header>
 801217a:	a80a      	add	r0, sp, #40	; 0x28
 801217c:	f7ff fb0a 	bl	8011794 <ucdr_buffer_length>
 8012180:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8012182:	4602      	mov	r2, r0
 8012184:	a905      	add	r1, sp, #20
 8012186:	e9d3 0400 	ldrd	r0, r4, [r3]
 801218a:	47a0      	blx	r4
 801218c:	b012      	add	sp, #72	; 0x48
 801218e:	bd70      	pop	{r4, r5, r6, pc}

08012190 <read_submessage_list>:
 8012190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012194:	b098      	sub	sp, #96	; 0x60
 8012196:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 801247c <read_submessage_list+0x2ec>
 801219a:	920b      	str	r2, [sp, #44]	; 0x2c
 801219c:	4604      	mov	r4, r0
 801219e:	4688      	mov	r8, r1
 80121a0:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 80121a4:	aa0e      	add	r2, sp, #56	; 0x38
 80121a6:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 80121aa:	4640      	mov	r0, r8
 80121ac:	f001 fc46 	bl	8013a3c <uxr_read_submessage_header>
 80121b0:	2800      	cmp	r0, #0
 80121b2:	f000 8107 	beq.w	80123c4 <read_submessage_list+0x234>
 80121b6:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 80121ba:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 80121be:	3b04      	subs	r3, #4
 80121c0:	2b0b      	cmp	r3, #11
 80121c2:	d8ed      	bhi.n	80121a0 <read_submessage_list+0x10>
 80121c4:	a101      	add	r1, pc, #4	; (adr r1, 80121cc <read_submessage_list+0x3c>)
 80121c6:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80121ca:	bf00      	nop
 80121cc:	080123b5 	.word	0x080123b5
 80121d0:	080123a9 	.word	0x080123a9
 80121d4:	080121a1 	.word	0x080121a1
 80121d8:	080121a1 	.word	0x080121a1
 80121dc:	080121a1 	.word	0x080121a1
 80121e0:	0801230b 	.word	0x0801230b
 80121e4:	0801229d 	.word	0x0801229d
 80121e8:	0801225b 	.word	0x0801225b
 80121ec:	080121a1 	.word	0x080121a1
 80121f0:	080121a1 	.word	0x080121a1
 80121f4:	080121a1 	.word	0x080121a1
 80121f8:	080121fd 	.word	0x080121fd
 80121fc:	a912      	add	r1, sp, #72	; 0x48
 80121fe:	4640      	mov	r0, r8
 8012200:	f002 fb34 	bl	801486c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8012204:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8012208:	2d00      	cmp	r5, #0
 801220a:	f000 810a 	beq.w	8012422 <read_submessage_list+0x292>
 801220e:	f001 fc5d 	bl	8013acc <uxr_nanos>
 8012212:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012214:	460b      	mov	r3, r1
 8012216:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012218:	2700      	movs	r7, #0
 801221a:	fbc9 6701 	smlal	r6, r7, r9, r1
 801221e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012222:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012224:	4602      	mov	r2, r0
 8012226:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012228:	460e      	mov	r6, r1
 801222a:	2700      	movs	r7, #0
 801222c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8012230:	9106      	str	r1, [sp, #24]
 8012232:	fbc9 6700 	smlal	r6, r7, r9, r0
 8012236:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012238:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801223c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801223e:	2700      	movs	r7, #0
 8012240:	4608      	mov	r0, r1
 8012242:	4639      	mov	r1, r7
 8012244:	fbc9 0106 	smlal	r0, r1, r9, r6
 8012248:	e9cd 0100 	strd	r0, r1, [sp]
 801224c:	4620      	mov	r0, r4
 801224e:	47a8      	blx	r5
 8012250:	f04f 0301 	mov.w	r3, #1
 8012254:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8012258:	e7a2      	b.n	80121a0 <read_submessage_list+0x10>
 801225a:	a912      	add	r1, sp, #72	; 0x48
 801225c:	4640      	mov	r0, r8
 801225e:	f002 fae5 	bl	801482c <uxr_deserialize_HEARTBEAT_Payload>
 8012262:	2100      	movs	r1, #0
 8012264:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8012268:	f001 fabe 	bl	80137e8 <uxr_stream_id_from_raw>
 801226c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8012270:	4603      	mov	r3, r0
 8012272:	4629      	mov	r1, r5
 8012274:	f104 0008 	add.w	r0, r4, #8
 8012278:	9311      	str	r3, [sp, #68]	; 0x44
 801227a:	f001 fba3 	bl	80139c4 <uxr_get_input_reliable_stream>
 801227e:	2800      	cmp	r0, #0
 8012280:	d08e      	beq.n	80121a0 <read_submessage_list+0x10>
 8012282:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 8012286:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 801228a:	f005 feb7 	bl	8017ffc <uxr_process_heartbeat>
 801228e:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8012292:	462a      	mov	r2, r5
 8012294:	4620      	mov	r0, r4
 8012296:	f7ff ff45 	bl	8012124 <write_submessage_acknack.isra.0>
 801229a:	e781      	b.n	80121a0 <read_submessage_list+0x10>
 801229c:	a912      	add	r1, sp, #72	; 0x48
 801229e:	4640      	mov	r0, r8
 80122a0:	f002 fa9c 	bl	80147dc <uxr_deserialize_ACKNACK_Payload>
 80122a4:	2100      	movs	r1, #0
 80122a6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80122aa:	f001 fa9d 	bl	80137e8 <uxr_stream_id_from_raw>
 80122ae:	4603      	mov	r3, r0
 80122b0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80122b4:	f104 0008 	add.w	r0, r4, #8
 80122b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80122ba:	f001 fb6d 	bl	8013998 <uxr_get_output_reliable_stream>
 80122be:	4605      	mov	r5, r0
 80122c0:	2800      	cmp	r0, #0
 80122c2:	f43f af6d 	beq.w	80121a0 <read_submessage_list+0x10>
 80122c6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 80122ca:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 80122ce:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80122d2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80122d6:	b289      	uxth	r1, r1
 80122d8:	f006 f9ca 	bl	8018670 <uxr_process_acknack>
 80122dc:	4628      	mov	r0, r5
 80122de:	f006 f98d 	bl	80185fc <uxr_begin_output_nack_buffer_it>
 80122e2:	af10      	add	r7, sp, #64	; 0x40
 80122e4:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 80122e8:	e005      	b.n	80122f6 <read_submessage_list+0x166>
 80122ea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80122ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80122ee:	9910      	ldr	r1, [sp, #64]	; 0x40
 80122f0:	e9d3 0600 	ldrd	r0, r6, [r3]
 80122f4:	47b0      	blx	r6
 80122f6:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 80122fa:	aa11      	add	r2, sp, #68	; 0x44
 80122fc:	4639      	mov	r1, r7
 80122fe:	4628      	mov	r0, r5
 8012300:	f006 f97e 	bl	8018600 <uxr_next_reliable_nack_buffer_to_send>
 8012304:	2800      	cmp	r0, #0
 8012306:	d1f0      	bne.n	80122ea <read_submessage_list+0x15a>
 8012308:	e74a      	b.n	80121a0 <read_submessage_list+0x10>
 801230a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801230e:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 8012312:	af10      	add	r7, sp, #64	; 0x40
 8012314:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8012318:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 801231c:	4639      	mov	r1, r7
 801231e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8012322:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 8012326:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801232a:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 801232e:	4640      	mov	r0, r8
 8012330:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8012334:	f002 f8ce 	bl	80144d4 <uxr_deserialize_BaseObjectRequest>
 8012338:	4638      	mov	r0, r7
 801233a:	a911      	add	r1, sp, #68	; 0x44
 801233c:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8012340:	f000 fd92 	bl	8012e68 <uxr_parse_base_object_request>
 8012344:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8012348:	9911      	ldr	r1, [sp, #68]	; 0x44
 801234a:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 801234e:	9112      	str	r1, [sp, #72]	; 0x48
 8012350:	3d04      	subs	r5, #4
 8012352:	f006 060e 	and.w	r6, r6, #14
 8012356:	b2ad      	uxth	r5, r5
 8012358:	f1ba 0f00 	cmp.w	sl, #0
 801235c:	d006      	beq.n	801236c <read_submessage_list+0x1dc>
 801235e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8012362:	9300      	str	r3, [sp, #0]
 8012364:	463a      	mov	r2, r7
 8012366:	2300      	movs	r3, #0
 8012368:	4620      	mov	r0, r4
 801236a:	47d0      	blx	sl
 801236c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 801236e:	b168      	cbz	r0, 801238c <read_submessage_list+0x1fc>
 8012370:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8012372:	2300      	movs	r3, #0
 8012374:	3902      	subs	r1, #2
 8012376:	e002      	b.n	801237e <read_submessage_list+0x1ee>
 8012378:	3301      	adds	r3, #1
 801237a:	4283      	cmp	r3, r0
 801237c:	d006      	beq.n	801238c <read_submessage_list+0x1fc>
 801237e:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8012382:	42ba      	cmp	r2, r7
 8012384:	d1f8      	bne.n	8012378 <read_submessage_list+0x1e8>
 8012386:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8012388:	2100      	movs	r1, #0
 801238a:	54d1      	strb	r1, [r2, r3]
 801238c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801238e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012390:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8012394:	9302      	str	r3, [sp, #8]
 8012396:	e9cd 1000 	strd	r1, r0, [sp]
 801239a:	4633      	mov	r3, r6
 801239c:	462a      	mov	r2, r5
 801239e:	4641      	mov	r1, r8
 80123a0:	4620      	mov	r0, r4
 80123a2:	f7ff fddd 	bl	8011f60 <read_submessage_format>
 80123a6:	e6fb      	b.n	80121a0 <read_submessage_list+0x10>
 80123a8:	b97a      	cbnz	r2, 80123ca <read_submessage_list+0x23a>
 80123aa:	4641      	mov	r1, r8
 80123ac:	4620      	mov	r0, r4
 80123ae:	f000 fcab 	bl	8012d08 <uxr_read_delete_session_status>
 80123b2:	e6f5      	b.n	80121a0 <read_submessage_list+0x10>
 80123b4:	2a00      	cmp	r2, #0
 80123b6:	f47f aef3 	bne.w	80121a0 <read_submessage_list+0x10>
 80123ba:	4641      	mov	r1, r8
 80123bc:	4620      	mov	r0, r4
 80123be:	f000 fc97 	bl	8012cf0 <uxr_read_create_session_status>
 80123c2:	e6ed      	b.n	80121a0 <read_submessage_list+0x10>
 80123c4:	b018      	add	sp, #96	; 0x60
 80123c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123ca:	a912      	add	r1, sp, #72	; 0x48
 80123cc:	4640      	mov	r0, r8
 80123ce:	f002 f9ad 	bl	801472c <uxr_deserialize_STATUS_Payload>
 80123d2:	a910      	add	r1, sp, #64	; 0x40
 80123d4:	aa0f      	add	r2, sp, #60	; 0x3c
 80123d6:	a812      	add	r0, sp, #72	; 0x48
 80123d8:	f000 fd46 	bl	8012e68 <uxr_parse_base_object_request>
 80123dc:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80123e0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80123e2:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80123e6:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80123ea:	9111      	str	r1, [sp, #68]	; 0x44
 80123ec:	b135      	cbz	r5, 80123fc <read_submessage_list+0x26c>
 80123ee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80123f2:	9300      	str	r3, [sp, #0]
 80123f4:	4632      	mov	r2, r6
 80123f6:	463b      	mov	r3, r7
 80123f8:	4620      	mov	r0, r4
 80123fa:	47a8      	blx	r5
 80123fc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80123fe:	2b00      	cmp	r3, #0
 8012400:	f43f aece 	beq.w	80121a0 <read_submessage_list+0x10>
 8012404:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8012406:	2100      	movs	r1, #0
 8012408:	3802      	subs	r0, #2
 801240a:	e003      	b.n	8012414 <read_submessage_list+0x284>
 801240c:	3101      	adds	r1, #1
 801240e:	4299      	cmp	r1, r3
 8012410:	f43f aec6 	beq.w	80121a0 <read_submessage_list+0x10>
 8012414:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8012418:	42b2      	cmp	r2, r6
 801241a:	d1f7      	bne.n	801240c <read_submessage_list+0x27c>
 801241c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801241e:	545f      	strb	r7, [r3, r1]
 8012420:	e6be      	b.n	80121a0 <read_submessage_list+0x10>
 8012422:	f001 fb53 	bl	8013acc <uxr_nanos>
 8012426:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012428:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801242a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801242c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801242e:	2700      	movs	r7, #0
 8012430:	fbc9 6703 	smlal	r6, r7, r9, r3
 8012434:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012436:	eb16 0c00 	adds.w	ip, r6, r0
 801243a:	4618      	mov	r0, r3
 801243c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801243e:	eb47 0e01 	adc.w	lr, r7, r1
 8012442:	461e      	mov	r6, r3
 8012444:	2100      	movs	r1, #0
 8012446:	2700      	movs	r7, #0
 8012448:	fbc9 0105 	smlal	r0, r1, r9, r5
 801244c:	fbc9 6702 	smlal	r6, r7, r9, r2
 8012450:	1983      	adds	r3, r0, r6
 8012452:	eb41 0207 	adc.w	r2, r1, r7
 8012456:	ebbc 0303 	subs.w	r3, ip, r3
 801245a:	9308      	str	r3, [sp, #32]
 801245c:	eb6e 0302 	sbc.w	r3, lr, r2
 8012460:	9309      	str	r3, [sp, #36]	; 0x24
 8012462:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8012466:	0fd3      	lsrs	r3, r2, #31
 8012468:	18c9      	adds	r1, r1, r3
 801246a:	f142 0200 	adc.w	r2, r2, #0
 801246e:	084b      	lsrs	r3, r1, #1
 8012470:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8012474:	1052      	asrs	r2, r2, #1
 8012476:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 801247a:	e6e9      	b.n	8012250 <read_submessage_list+0xc0>
 801247c:	3b9aca00 	.word	0x3b9aca00

08012480 <listen_message>:
 8012480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012484:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8012486:	b09a      	sub	sp, #104	; 0x68
 8012488:	6894      	ldr	r4, [r2, #8]
 801248a:	460b      	mov	r3, r1
 801248c:	4605      	mov	r5, r0
 801248e:	a906      	add	r1, sp, #24
 8012490:	6810      	ldr	r0, [r2, #0]
 8012492:	aa07      	add	r2, sp, #28
 8012494:	47a0      	blx	r4
 8012496:	4604      	mov	r4, r0
 8012498:	b918      	cbnz	r0, 80124a2 <listen_message+0x22>
 801249a:	4620      	mov	r0, r4
 801249c:	b01a      	add	sp, #104	; 0x68
 801249e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124a2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80124a6:	a80a      	add	r0, sp, #40	; 0x28
 80124a8:	f7ff f946 	bl	8011738 <ucdr_init_buffer>
 80124ac:	a90a      	add	r1, sp, #40	; 0x28
 80124ae:	f10d 0316 	add.w	r3, sp, #22
 80124b2:	aa05      	add	r2, sp, #20
 80124b4:	4628      	mov	r0, r5
 80124b6:	f000 fc6f 	bl	8012d98 <uxr_read_session_header>
 80124ba:	2800      	cmp	r0, #0
 80124bc:	d0ed      	beq.n	801249a <listen_message+0x1a>
 80124be:	f89d 0014 	ldrb.w	r0, [sp, #20]
 80124c2:	2100      	movs	r1, #0
 80124c4:	f001 f990 	bl	80137e8 <uxr_stream_id_from_raw>
 80124c8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80124cc:	2f01      	cmp	r7, #1
 80124ce:	f8bd a016 	ldrh.w	sl, [sp, #22]
 80124d2:	9009      	str	r0, [sp, #36]	; 0x24
 80124d4:	fa5f f880 	uxtb.w	r8, r0
 80124d8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80124dc:	d041      	beq.n	8012562 <listen_message+0xe2>
 80124de:	2f02      	cmp	r7, #2
 80124e0:	d00b      	beq.n	80124fa <listen_message+0x7a>
 80124e2:	2f00      	cmp	r7, #0
 80124e4:	d1d9      	bne.n	801249a <listen_message+0x1a>
 80124e6:	4639      	mov	r1, r7
 80124e8:	4638      	mov	r0, r7
 80124ea:	f001 f97d 	bl	80137e8 <uxr_stream_id_from_raw>
 80124ee:	a90a      	add	r1, sp, #40	; 0x28
 80124f0:	4602      	mov	r2, r0
 80124f2:	4628      	mov	r0, r5
 80124f4:	f7ff fe4c 	bl	8012190 <read_submessage_list>
 80124f8:	e7cf      	b.n	801249a <listen_message+0x1a>
 80124fa:	4631      	mov	r1, r6
 80124fc:	f105 0008 	add.w	r0, r5, #8
 8012500:	f001 fa60 	bl	80139c4 <uxr_get_input_reliable_stream>
 8012504:	4681      	mov	r9, r0
 8012506:	b330      	cbz	r0, 8012556 <listen_message+0xd6>
 8012508:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801250a:	9203      	str	r2, [sp, #12]
 801250c:	a80a      	add	r0, sp, #40	; 0x28
 801250e:	f7ff f945 	bl	801179c <ucdr_buffer_remaining>
 8012512:	4603      	mov	r3, r0
 8012514:	f10d 0015 	add.w	r0, sp, #21
 8012518:	9000      	str	r0, [sp, #0]
 801251a:	9a03      	ldr	r2, [sp, #12]
 801251c:	4651      	mov	r1, sl
 801251e:	4648      	mov	r0, r9
 8012520:	f005 fc6e 	bl	8017e00 <uxr_receive_reliable_message>
 8012524:	b1b8      	cbz	r0, 8012556 <listen_message+0xd6>
 8012526:	f89d 3015 	ldrb.w	r3, [sp, #21]
 801252a:	b393      	cbz	r3, 8012592 <listen_message+0x112>
 801252c:	2702      	movs	r7, #2
 801252e:	e008      	b.n	8012542 <listen_message+0xc2>
 8012530:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
 8012534:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8012538:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 801253c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801253e:	f7ff fe27 	bl	8012190 <read_submessage_list>
 8012542:	a912      	add	r1, sp, #72	; 0x48
 8012544:	2204      	movs	r2, #4
 8012546:	4648      	mov	r0, r9
 8012548:	f005 fcda 	bl	8017f00 <uxr_next_input_reliable_buffer_available>
 801254c:	4603      	mov	r3, r0
 801254e:	a912      	add	r1, sp, #72	; 0x48
 8012550:	4628      	mov	r0, r5
 8012552:	2b00      	cmp	r3, #0
 8012554:	d1ec      	bne.n	8012530 <listen_message+0xb0>
 8012556:	4632      	mov	r2, r6
 8012558:	4641      	mov	r1, r8
 801255a:	4628      	mov	r0, r5
 801255c:	f7ff fde2 	bl	8012124 <write_submessage_acknack.isra.0>
 8012560:	e79b      	b.n	801249a <listen_message+0x1a>
 8012562:	4631      	mov	r1, r6
 8012564:	f105 0008 	add.w	r0, r5, #8
 8012568:	f001 fa22 	bl	80139b0 <uxr_get_input_best_effort_stream>
 801256c:	2800      	cmp	r0, #0
 801256e:	d094      	beq.n	801249a <listen_message+0x1a>
 8012570:	4651      	mov	r1, sl
 8012572:	f005 fbc1 	bl	8017cf8 <uxr_receive_best_effort_message>
 8012576:	2800      	cmp	r0, #0
 8012578:	d08f      	beq.n	801249a <listen_message+0x1a>
 801257a:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
 801257e:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8012582:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8012586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012588:	a90a      	add	r1, sp, #40	; 0x28
 801258a:	4628      	mov	r0, r5
 801258c:	f7ff fe00 	bl	8012190 <read_submessage_list>
 8012590:	e783      	b.n	801249a <listen_message+0x1a>
 8012592:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
 8012596:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 801259a:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 801259e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80125a0:	a90a      	add	r1, sp, #40	; 0x28
 80125a2:	4628      	mov	r0, r5
 80125a4:	f7ff fdf4 	bl	8012190 <read_submessage_list>
 80125a8:	e7c0      	b.n	801252c <listen_message+0xac>
 80125aa:	bf00      	nop

080125ac <listen_message_reliably>:
 80125ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125b0:	1e0b      	subs	r3, r1, #0
 80125b2:	b095      	sub	sp, #84	; 0x54
 80125b4:	bfb8      	it	lt
 80125b6:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80125ba:	4683      	mov	fp, r0
 80125bc:	9303      	str	r3, [sp, #12]
 80125be:	f001 fa69 	bl	8013a94 <uxr_millis>
 80125c2:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 80125c6:	4688      	mov	r8, r1
 80125c8:	4607      	mov	r7, r0
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	f000 8093 	beq.w	80126f6 <listen_message_reliably+0x14a>
 80125d0:	2600      	movs	r6, #0
 80125d2:	4630      	mov	r0, r6
 80125d4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80125d8:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80125dc:	e00f      	b.n	80125fe <listen_message_reliably+0x52>
 80125de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80125e2:	454a      	cmp	r2, r9
 80125e4:	eb73 010a 	sbcs.w	r1, r3, sl
 80125e8:	bfb8      	it	lt
 80125ea:	469a      	movlt	sl, r3
 80125ec:	f106 0601 	add.w	r6, r6, #1
 80125f0:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 80125f4:	b2f0      	uxtb	r0, r6
 80125f6:	bfb8      	it	lt
 80125f8:	4691      	movlt	r9, r2
 80125fa:	4283      	cmp	r3, r0
 80125fc:	d953      	bls.n	80126a6 <listen_message_reliably+0xfa>
 80125fe:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8012602:	2201      	movs	r2, #1
 8012604:	2102      	movs	r1, #2
 8012606:	f001 f8c5 	bl	8013794 <uxr_stream_id>
 801260a:	00e4      	lsls	r4, r4, #3
 801260c:	f104 0520 	add.w	r5, r4, #32
 8012610:	445d      	add	r5, fp
 8012612:	4601      	mov	r1, r0
 8012614:	4643      	mov	r3, r8
 8012616:	463a      	mov	r2, r7
 8012618:	4628      	mov	r0, r5
 801261a:	9104      	str	r1, [sp, #16]
 801261c:	f005 ffc2 	bl	80185a4 <uxr_update_output_stream_heartbeat_timestamp>
 8012620:	eb0b 0304 	add.w	r3, fp, r4
 8012624:	2800      	cmp	r0, #0
 8012626:	d0da      	beq.n	80125de <listen_message_reliably+0x32>
 8012628:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801262c:	f89d 5011 	ldrb.w	r5, [sp, #17]
 8012630:	9302      	str	r3, [sp, #8]
 8012632:	4658      	mov	r0, fp
 8012634:	f000 fbf2 	bl	8012e1c <uxr_session_header_offset>
 8012638:	3501      	adds	r5, #1
 801263a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801263e:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8012642:	9000      	str	r0, [sp, #0]
 8012644:	2300      	movs	r3, #0
 8012646:	a80c      	add	r0, sp, #48	; 0x30
 8012648:	2211      	movs	r2, #17
 801264a:	a907      	add	r1, sp, #28
 801264c:	f7ff f862 	bl	8011714 <ucdr_init_buffer_origin_offset>
 8012650:	2300      	movs	r3, #0
 8012652:	2205      	movs	r2, #5
 8012654:	210b      	movs	r1, #11
 8012656:	a80c      	add	r0, sp, #48	; 0x30
 8012658:	f001 f9d6 	bl	8013a08 <uxr_buffer_submessage_header>
 801265c:	8968      	ldrh	r0, [r5, #10]
 801265e:	2101      	movs	r1, #1
 8012660:	f006 f85e 	bl	8018720 <uxr_seq_num_add>
 8012664:	9902      	ldr	r1, [sp, #8]
 8012666:	892a      	ldrh	r2, [r5, #8]
 8012668:	f88d 1018 	strb.w	r1, [sp, #24]
 801266c:	4603      	mov	r3, r0
 801266e:	a905      	add	r1, sp, #20
 8012670:	a80c      	add	r0, sp, #48	; 0x30
 8012672:	f8ad 2016 	strh.w	r2, [sp, #22]
 8012676:	f8ad 3014 	strh.w	r3, [sp, #20]
 801267a:	f002 f8c3 	bl	8014804 <uxr_serialize_HEARTBEAT_Payload>
 801267e:	2200      	movs	r2, #0
 8012680:	4611      	mov	r1, r2
 8012682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012684:	4658      	mov	r0, fp
 8012686:	f000 fb71 	bl	8012d6c <uxr_stamp_session_header>
 801268a:	a80c      	add	r0, sp, #48	; 0x30
 801268c:	f7ff f882 	bl	8011794 <ucdr_buffer_length>
 8012690:	f8db 3070 	ldr.w	r3, [fp, #112]	; 0x70
 8012694:	4602      	mov	r2, r0
 8012696:	a907      	add	r1, sp, #28
 8012698:	e9d3 0500 	ldrd	r0, r5, [r3]
 801269c:	445c      	add	r4, fp
 801269e:	47a8      	blx	r5
 80126a0:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80126a4:	e79d      	b.n	80125e2 <listen_message_reliably+0x36>
 80126a6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80126aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80126ae:	45a2      	cmp	sl, r4
 80126b0:	bf08      	it	eq
 80126b2:	4599      	cmpeq	r9, r3
 80126b4:	d01f      	beq.n	80126f6 <listen_message_reliably+0x14a>
 80126b6:	eba9 0107 	sub.w	r1, r9, r7
 80126ba:	2900      	cmp	r1, #0
 80126bc:	9c03      	ldr	r4, [sp, #12]
 80126be:	bf08      	it	eq
 80126c0:	2101      	moveq	r1, #1
 80126c2:	428c      	cmp	r4, r1
 80126c4:	4623      	mov	r3, r4
 80126c6:	bfa8      	it	ge
 80126c8:	460b      	movge	r3, r1
 80126ca:	4619      	mov	r1, r3
 80126cc:	4658      	mov	r0, fp
 80126ce:	461f      	mov	r7, r3
 80126d0:	f7ff fed6 	bl	8012480 <listen_message>
 80126d4:	b110      	cbz	r0, 80126dc <listen_message_reliably+0x130>
 80126d6:	b015      	add	sp, #84	; 0x54
 80126d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126dc:	1be3      	subs	r3, r4, r7
 80126de:	2b00      	cmp	r3, #0
 80126e0:	9303      	str	r3, [sp, #12]
 80126e2:	ddf8      	ble.n	80126d6 <listen_message_reliably+0x12a>
 80126e4:	f001 f9d6 	bl	8013a94 <uxr_millis>
 80126e8:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 80126ec:	4688      	mov	r8, r1
 80126ee:	4607      	mov	r7, r0
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	f47f af6d 	bne.w	80125d0 <listen_message_reliably+0x24>
 80126f6:	9903      	ldr	r1, [sp, #12]
 80126f8:	e7df      	b.n	80126ba <listen_message_reliably+0x10e>
 80126fa:	bf00      	nop

080126fc <uxr_init_session>:
 80126fc:	b5d0      	push	{r4, r6, r7, lr}
 80126fe:	2300      	movs	r3, #0
 8012700:	2600      	movs	r6, #0
 8012702:	2700      	movs	r7, #0
 8012704:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 8012708:	4604      	mov	r4, r0
 801270a:	6701      	str	r1, [r0, #112]	; 0x70
 801270c:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 8012710:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 8012714:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 8012718:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 801271c:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 8012720:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8012724:	2181      	movs	r1, #129	; 0x81
 8012726:	f000 fa8f 	bl	8012c48 <uxr_init_session_info>
 801272a:	f104 0008 	add.w	r0, r4, #8
 801272e:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 8012732:	f001 b885 	b.w	8013840 <uxr_init_stream_storage>
 8012736:	bf00      	nop

08012738 <uxr_set_status_callback>:
 8012738:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 801273c:	4770      	bx	lr
 801273e:	bf00      	nop

08012740 <uxr_set_topic_callback>:
 8012740:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8012744:	4770      	bx	lr
 8012746:	bf00      	nop

08012748 <uxr_set_request_callback>:
 8012748:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 801274c:	4770      	bx	lr
 801274e:	bf00      	nop

08012750 <uxr_set_reply_callback>:
 8012750:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8012754:	4770      	bx	lr
 8012756:	bf00      	nop

08012758 <uxr_create_session>:
 8012758:	b5f0      	push	{r4, r5, r6, r7, lr}
 801275a:	4604      	mov	r4, r0
 801275c:	b093      	sub	sp, #76	; 0x4c
 801275e:	3008      	adds	r0, #8
 8012760:	f001 f878 	bl	8013854 <uxr_reset_stream_storage>
 8012764:	4620      	mov	r0, r4
 8012766:	f000 fb59 	bl	8012e1c <uxr_session_header_offset>
 801276a:	a903      	add	r1, sp, #12
 801276c:	9000      	str	r0, [sp, #0]
 801276e:	2300      	movs	r3, #0
 8012770:	a80a      	add	r0, sp, #40	; 0x28
 8012772:	221c      	movs	r2, #28
 8012774:	f7fe ffce 	bl	8011714 <ucdr_init_buffer_origin_offset>
 8012778:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801277a:	8a1a      	ldrh	r2, [r3, #16]
 801277c:	3a04      	subs	r2, #4
 801277e:	b292      	uxth	r2, r2
 8012780:	4620      	mov	r0, r4
 8012782:	a90a      	add	r1, sp, #40	; 0x28
 8012784:	f000 fa72 	bl	8012c6c <uxr_buffer_create_session>
 8012788:	990a      	ldr	r1, [sp, #40]	; 0x28
 801278a:	4620      	mov	r0, r4
 801278c:	f000 fada 	bl	8012d44 <uxr_stamp_create_session_header>
 8012790:	a80a      	add	r0, sp, #40	; 0x28
 8012792:	f7fe ffff 	bl	8011794 <ucdr_buffer_length>
 8012796:	23ff      	movs	r3, #255	; 0xff
 8012798:	4606      	mov	r6, r0
 801279a:	7163      	strb	r3, [r4, #5]
 801279c:	250a      	movs	r5, #10
 801279e:	e001      	b.n	80127a4 <uxr_create_session+0x4c>
 80127a0:	28ff      	cmp	r0, #255	; 0xff
 80127a2:	d10d      	bne.n	80127c0 <uxr_create_session+0x68>
 80127a4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80127a6:	4632      	mov	r2, r6
 80127a8:	e9d3 0700 	ldrd	r0, r7, [r3]
 80127ac:	a903      	add	r1, sp, #12
 80127ae:	47b8      	blx	r7
 80127b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80127b4:	4620      	mov	r0, r4
 80127b6:	f7ff fe63 	bl	8012480 <listen_message>
 80127ba:	3d01      	subs	r5, #1
 80127bc:	7960      	ldrb	r0, [r4, #5]
 80127be:	d1ef      	bne.n	80127a0 <uxr_create_session+0x48>
 80127c0:	fab0 f080 	clz	r0, r0
 80127c4:	0940      	lsrs	r0, r0, #5
 80127c6:	b013      	add	sp, #76	; 0x4c
 80127c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127ca:	bf00      	nop

080127cc <uxr_delete_session_retries>:
 80127cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127ce:	b091      	sub	sp, #68	; 0x44
 80127d0:	4604      	mov	r4, r0
 80127d2:	460d      	mov	r5, r1
 80127d4:	f000 fb22 	bl	8012e1c <uxr_session_header_offset>
 80127d8:	2300      	movs	r3, #0
 80127da:	2210      	movs	r2, #16
 80127dc:	9000      	str	r0, [sp, #0]
 80127de:	a904      	add	r1, sp, #16
 80127e0:	a808      	add	r0, sp, #32
 80127e2:	f7fe ff97 	bl	8011714 <ucdr_init_buffer_origin_offset>
 80127e6:	a908      	add	r1, sp, #32
 80127e8:	4620      	mov	r0, r4
 80127ea:	f000 fa65 	bl	8012cb8 <uxr_buffer_delete_session>
 80127ee:	2200      	movs	r2, #0
 80127f0:	9b08      	ldr	r3, [sp, #32]
 80127f2:	4611      	mov	r1, r2
 80127f4:	4620      	mov	r0, r4
 80127f6:	f000 fab9 	bl	8012d6c <uxr_stamp_session_header>
 80127fa:	a808      	add	r0, sp, #32
 80127fc:	f7fe ffca 	bl	8011794 <ucdr_buffer_length>
 8012800:	23ff      	movs	r3, #255	; 0xff
 8012802:	4602      	mov	r2, r0
 8012804:	7163      	strb	r3, [r4, #5]
 8012806:	b1ed      	cbz	r5, 8012844 <uxr_delete_session_retries+0x78>
 8012808:	2600      	movs	r6, #0
 801280a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801280c:	9203      	str	r2, [sp, #12]
 801280e:	e9d3 0700 	ldrd	r0, r7, [r3]
 8012812:	a904      	add	r1, sp, #16
 8012814:	47b8      	blx	r7
 8012816:	3601      	adds	r6, #1
 8012818:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801281c:	4620      	mov	r0, r4
 801281e:	f7ff fe2f 	bl	8012480 <listen_message>
 8012822:	42b5      	cmp	r5, r6
 8012824:	7963      	ldrb	r3, [r4, #5]
 8012826:	d007      	beq.n	8012838 <uxr_delete_session_retries+0x6c>
 8012828:	2bff      	cmp	r3, #255	; 0xff
 801282a:	9a03      	ldr	r2, [sp, #12]
 801282c:	d0ed      	beq.n	801280a <uxr_delete_session_retries+0x3e>
 801282e:	fab3 f083 	clz	r0, r3
 8012832:	0940      	lsrs	r0, r0, #5
 8012834:	b011      	add	sp, #68	; 0x44
 8012836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012838:	2bff      	cmp	r3, #255	; 0xff
 801283a:	bf08      	it	eq
 801283c:	2000      	moveq	r0, #0
 801283e:	d1f6      	bne.n	801282e <uxr_delete_session_retries+0x62>
 8012840:	b011      	add	sp, #68	; 0x44
 8012842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012844:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012846:	a904      	add	r1, sp, #16
 8012848:	e9d3 0500 	ldrd	r0, r5, [r3]
 801284c:	47a8      	blx	r5
 801284e:	7963      	ldrb	r3, [r4, #5]
 8012850:	fab3 f083 	clz	r0, r3
 8012854:	0940      	lsrs	r0, r0, #5
 8012856:	e7ed      	b.n	8012834 <uxr_delete_session_retries+0x68>

08012858 <uxr_create_output_best_effort_stream>:
 8012858:	b510      	push	{r4, lr}
 801285a:	b084      	sub	sp, #16
 801285c:	e9cd 2100 	strd	r2, r1, [sp]
 8012860:	4604      	mov	r4, r0
 8012862:	f000 fadb 	bl	8012e1c <uxr_session_header_offset>
 8012866:	e9dd 2100 	ldrd	r2, r1, [sp]
 801286a:	4603      	mov	r3, r0
 801286c:	f104 0008 	add.w	r0, r4, #8
 8012870:	b004      	add	sp, #16
 8012872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012876:	f001 b82d 	b.w	80138d4 <uxr_add_output_best_effort_buffer>
 801287a:	bf00      	nop

0801287c <uxr_create_output_reliable_stream>:
 801287c:	b530      	push	{r4, r5, lr}
 801287e:	b089      	sub	sp, #36	; 0x24
 8012880:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8012884:	9303      	str	r3, [sp, #12]
 8012886:	4604      	mov	r4, r0
 8012888:	f000 fac8 	bl	8012e1c <uxr_session_header_offset>
 801288c:	4605      	mov	r5, r0
 801288e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8012892:	9905      	ldr	r1, [sp, #20]
 8012894:	9500      	str	r5, [sp, #0]
 8012896:	f104 0008 	add.w	r0, r4, #8
 801289a:	f001 f82d 	bl	80138f8 <uxr_add_output_reliable_buffer>
 801289e:	2200      	movs	r2, #0
 80128a0:	b2c3      	uxtb	r3, r0
 80128a2:	f363 0207 	bfi	r2, r3, #0, #8
 80128a6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80128aa:	f363 220f 	bfi	r2, r3, #8, #8
 80128ae:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80128b2:	f363 4217 	bfi	r2, r3, #16, #8
 80128b6:	0e03      	lsrs	r3, r0, #24
 80128b8:	f363 621f 	bfi	r2, r3, #24, #8
 80128bc:	4610      	mov	r0, r2
 80128be:	b009      	add	sp, #36	; 0x24
 80128c0:	bd30      	pop	{r4, r5, pc}
 80128c2:	bf00      	nop

080128c4 <uxr_create_input_best_effort_stream>:
 80128c4:	b082      	sub	sp, #8
 80128c6:	3008      	adds	r0, #8
 80128c8:	b002      	add	sp, #8
 80128ca:	f001 b82f 	b.w	801392c <uxr_add_input_best_effort_buffer>
 80128ce:	bf00      	nop

080128d0 <uxr_create_input_reliable_stream>:
 80128d0:	b510      	push	{r4, lr}
 80128d2:	b084      	sub	sp, #16
 80128d4:	4c0b      	ldr	r4, [pc, #44]	; (8012904 <uxr_create_input_reliable_stream+0x34>)
 80128d6:	9400      	str	r4, [sp, #0]
 80128d8:	3008      	adds	r0, #8
 80128da:	f001 f83d 	bl	8013958 <uxr_add_input_reliable_buffer>
 80128de:	2200      	movs	r2, #0
 80128e0:	b2c3      	uxtb	r3, r0
 80128e2:	f363 0207 	bfi	r2, r3, #0, #8
 80128e6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80128ea:	f363 220f 	bfi	r2, r3, #8, #8
 80128ee:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80128f2:	f363 4217 	bfi	r2, r3, #16, #8
 80128f6:	0e03      	lsrs	r3, r0, #24
 80128f8:	f363 621f 	bfi	r2, r3, #24, #8
 80128fc:	4610      	mov	r0, r2
 80128fe:	b004      	add	sp, #16
 8012900:	bd10      	pop	{r4, pc}
 8012902:	bf00      	nop
 8012904:	080120e1 	.word	0x080120e1

08012908 <uxr_sync_session>:
 8012908:	b5f0      	push	{r4, r5, r6, r7, lr}
 801290a:	b093      	sub	sp, #76	; 0x4c
 801290c:	4604      	mov	r4, r0
 801290e:	460d      	mov	r5, r1
 8012910:	f000 fa84 	bl	8012e1c <uxr_session_header_offset>
 8012914:	a905      	add	r1, sp, #20
 8012916:	9000      	str	r0, [sp, #0]
 8012918:	2300      	movs	r3, #0
 801291a:	a80a      	add	r0, sp, #40	; 0x28
 801291c:	2214      	movs	r2, #20
 801291e:	f7fe fef9 	bl	8011714 <ucdr_init_buffer_origin_offset>
 8012922:	2300      	movs	r3, #0
 8012924:	2208      	movs	r2, #8
 8012926:	210e      	movs	r1, #14
 8012928:	a80a      	add	r0, sp, #40	; 0x28
 801292a:	f001 f86d 	bl	8013a08 <uxr_buffer_submessage_header>
 801292e:	f001 f8cd 	bl	8013acc <uxr_nanos>
 8012932:	a31b      	add	r3, pc, #108	; (adr r3, 80129a0 <uxr_sync_session+0x98>)
 8012934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012938:	4606      	mov	r6, r0
 801293a:	460f      	mov	r7, r1
 801293c:	f7ee f98c 	bl	8000c58 <__aeabi_ldivmod>
 8012940:	a317      	add	r3, pc, #92	; (adr r3, 80129a0 <uxr_sync_session+0x98>)
 8012942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012946:	4684      	mov	ip, r0
 8012948:	4639      	mov	r1, r7
 801294a:	4630      	mov	r0, r6
 801294c:	f8cd c00c 	str.w	ip, [sp, #12]
 8012950:	f7ee f982 	bl	8000c58 <__aeabi_ldivmod>
 8012954:	a903      	add	r1, sp, #12
 8012956:	a80a      	add	r0, sp, #40	; 0x28
 8012958:	9204      	str	r2, [sp, #16]
 801295a:	f001 ff79 	bl	8014850 <uxr_serialize_TIMESTAMP_Payload>
 801295e:	2200      	movs	r2, #0
 8012960:	4611      	mov	r1, r2
 8012962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012964:	4620      	mov	r0, r4
 8012966:	f000 fa01 	bl	8012d6c <uxr_stamp_session_header>
 801296a:	a80a      	add	r0, sp, #40	; 0x28
 801296c:	f7fe ff12 	bl	8011794 <ucdr_buffer_length>
 8012970:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012972:	4602      	mov	r2, r0
 8012974:	a905      	add	r1, sp, #20
 8012976:	e9d3 0600 	ldrd	r0, r6, [r3]
 801297a:	47b0      	blx	r6
 801297c:	2300      	movs	r3, #0
 801297e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8012982:	e002      	b.n	801298a <uxr_sync_session+0x82>
 8012984:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
 8012988:	b938      	cbnz	r0, 801299a <uxr_sync_session+0x92>
 801298a:	4629      	mov	r1, r5
 801298c:	4620      	mov	r0, r4
 801298e:	f7ff fe0d 	bl	80125ac <listen_message_reliably>
 8012992:	2800      	cmp	r0, #0
 8012994:	d1f6      	bne.n	8012984 <uxr_sync_session+0x7c>
 8012996:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
 801299a:	b013      	add	sp, #76	; 0x4c
 801299c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801299e:	bf00      	nop
 80129a0:	3b9aca00 	.word	0x3b9aca00
 80129a4:	00000000 	.word	0x00000000

080129a8 <uxr_epoch_nanos>:
 80129a8:	b510      	push	{r4, lr}
 80129aa:	4604      	mov	r4, r0
 80129ac:	f001 f88e 	bl	8013acc <uxr_nanos>
 80129b0:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80129b4:	1ac0      	subs	r0, r0, r3
 80129b6:	eb61 0102 	sbc.w	r1, r1, r2
 80129ba:	bd10      	pop	{r4, pc}

080129bc <uxr_flash_output_streams>:
 80129bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129c0:	7e03      	ldrb	r3, [r0, #24]
 80129c2:	b084      	sub	sp, #16
 80129c4:	4604      	mov	r4, r0
 80129c6:	b1fb      	cbz	r3, 8012a08 <uxr_flash_output_streams+0x4c>
 80129c8:	f04f 0900 	mov.w	r9, #0
 80129cc:	4648      	mov	r0, r9
 80129ce:	f10d 0802 	add.w	r8, sp, #2
 80129d2:	af03      	add	r7, sp, #12
 80129d4:	ae02      	add	r6, sp, #8
 80129d6:	2201      	movs	r2, #1
 80129d8:	4611      	mov	r1, r2
 80129da:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80129de:	f000 fed9 	bl	8013794 <uxr_stream_id>
 80129e2:	3508      	adds	r5, #8
 80129e4:	4684      	mov	ip, r0
 80129e6:	4643      	mov	r3, r8
 80129e8:	4628      	mov	r0, r5
 80129ea:	463a      	mov	r2, r7
 80129ec:	4631      	mov	r1, r6
 80129ee:	f8cd c004 	str.w	ip, [sp, #4]
 80129f2:	f005 fb97 	bl	8018124 <uxr_prepare_best_effort_buffer_to_send>
 80129f6:	2800      	cmp	r0, #0
 80129f8:	d13d      	bne.n	8012a76 <uxr_flash_output_streams+0xba>
 80129fa:	7e23      	ldrb	r3, [r4, #24]
 80129fc:	f109 0901 	add.w	r9, r9, #1
 8012a00:	fa5f f089 	uxtb.w	r0, r9
 8012a04:	4283      	cmp	r3, r0
 8012a06:	d8e6      	bhi.n	80129d6 <uxr_flash_output_streams+0x1a>
 8012a08:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012a0c:	b383      	cbz	r3, 8012a70 <uxr_flash_output_streams+0xb4>
 8012a0e:	f04f 0900 	mov.w	r9, #0
 8012a12:	4648      	mov	r0, r9
 8012a14:	f10d 0802 	add.w	r8, sp, #2
 8012a18:	af03      	add	r7, sp, #12
 8012a1a:	ae02      	add	r6, sp, #8
 8012a1c:	2201      	movs	r2, #1
 8012a1e:	2102      	movs	r1, #2
 8012a20:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8012a24:	f000 feb6 	bl	8013794 <uxr_stream_id>
 8012a28:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8012a2c:	3520      	adds	r5, #32
 8012a2e:	9001      	str	r0, [sp, #4]
 8012a30:	e00c      	b.n	8012a4c <uxr_flash_output_streams+0x90>
 8012a32:	9b02      	ldr	r3, [sp, #8]
 8012a34:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012a38:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012a3c:	f000 f996 	bl	8012d6c <uxr_stamp_session_header>
 8012a40:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012a42:	9a03      	ldr	r2, [sp, #12]
 8012a44:	9902      	ldr	r1, [sp, #8]
 8012a46:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8012a4a:	47d0      	blx	sl
 8012a4c:	4643      	mov	r3, r8
 8012a4e:	463a      	mov	r2, r7
 8012a50:	4631      	mov	r1, r6
 8012a52:	4628      	mov	r0, r5
 8012a54:	f005 fd64 	bl	8018520 <uxr_prepare_next_reliable_buffer_to_send>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	4620      	mov	r0, r4
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d1e8      	bne.n	8012a32 <uxr_flash_output_streams+0x76>
 8012a60:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012a64:	f109 0901 	add.w	r9, r9, #1
 8012a68:	fa5f f089 	uxtb.w	r0, r9
 8012a6c:	4283      	cmp	r3, r0
 8012a6e:	d8d5      	bhi.n	8012a1c <uxr_flash_output_streams+0x60>
 8012a70:	b004      	add	sp, #16
 8012a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a76:	9b02      	ldr	r3, [sp, #8]
 8012a78:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012a7c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012a80:	4620      	mov	r0, r4
 8012a82:	f000 f973 	bl	8012d6c <uxr_stamp_session_header>
 8012a86:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012a88:	9a03      	ldr	r2, [sp, #12]
 8012a8a:	9902      	ldr	r1, [sp, #8]
 8012a8c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012a90:	47a8      	blx	r5
 8012a92:	f109 0901 	add.w	r9, r9, #1
 8012a96:	7e23      	ldrb	r3, [r4, #24]
 8012a98:	fa5f f089 	uxtb.w	r0, r9
 8012a9c:	4283      	cmp	r3, r0
 8012a9e:	d89a      	bhi.n	80129d6 <uxr_flash_output_streams+0x1a>
 8012aa0:	e7b2      	b.n	8012a08 <uxr_flash_output_streams+0x4c>
 8012aa2:	bf00      	nop

08012aa4 <uxr_run_session_until_data>:
 8012aa4:	b570      	push	{r4, r5, r6, lr}
 8012aa6:	4604      	mov	r4, r0
 8012aa8:	460d      	mov	r5, r1
 8012aaa:	f000 fff3 	bl	8013a94 <uxr_millis>
 8012aae:	4606      	mov	r6, r0
 8012ab0:	4620      	mov	r0, r4
 8012ab2:	f7ff ff83 	bl	80129bc <uxr_flash_output_streams>
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8012abc:	4629      	mov	r1, r5
 8012abe:	e005      	b.n	8012acc <uxr_run_session_until_data+0x28>
 8012ac0:	f000 ffe8 	bl	8013a94 <uxr_millis>
 8012ac4:	1b83      	subs	r3, r0, r6
 8012ac6:	1ae9      	subs	r1, r5, r3
 8012ac8:	2900      	cmp	r1, #0
 8012aca:	dd07      	ble.n	8012adc <uxr_run_session_until_data+0x38>
 8012acc:	4620      	mov	r0, r4
 8012ace:	f7ff fd6d 	bl	80125ac <listen_message_reliably>
 8012ad2:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8012ad6:	2800      	cmp	r0, #0
 8012ad8:	d0f2      	beq.n	8012ac0 <uxr_run_session_until_data+0x1c>
 8012ada:	bd70      	pop	{r4, r5, r6, pc}
 8012adc:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8012ae0:	bd70      	pop	{r4, r5, r6, pc}
 8012ae2:	bf00      	nop

08012ae4 <uxr_run_session_until_confirm_delivery>:
 8012ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ae6:	4605      	mov	r5, r0
 8012ae8:	460e      	mov	r6, r1
 8012aea:	f100 0708 	add.w	r7, r0, #8
 8012aee:	2400      	movs	r4, #0
 8012af0:	f7ff ff64 	bl	80129bc <uxr_flash_output_streams>
 8012af4:	e005      	b.n	8012b02 <uxr_run_session_until_confirm_delivery+0x1e>
 8012af6:	b964      	cbnz	r4, 8012b12 <uxr_run_session_until_confirm_delivery+0x2e>
 8012af8:	f7ff fd58 	bl	80125ac <listen_message_reliably>
 8012afc:	f080 0001 	eor.w	r0, r0, #1
 8012b00:	b2c4      	uxtb	r4, r0
 8012b02:	4638      	mov	r0, r7
 8012b04:	f000 ff6a 	bl	80139dc <uxr_output_streams_confirmed>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	4631      	mov	r1, r6
 8012b0c:	4628      	mov	r0, r5
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d0f1      	beq.n	8012af6 <uxr_run_session_until_confirm_delivery+0x12>
 8012b12:	4638      	mov	r0, r7
 8012b14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012b18:	f000 bf60 	b.w	80139dc <uxr_output_streams_confirmed>

08012b1c <uxr_run_session_until_all_status>:
 8012b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b20:	9d08      	ldr	r5, [sp, #32]
 8012b22:	460f      	mov	r7, r1
 8012b24:	4692      	mov	sl, r2
 8012b26:	461c      	mov	r4, r3
 8012b28:	4606      	mov	r6, r0
 8012b2a:	f7ff ff47 	bl	80129bc <uxr_flash_output_streams>
 8012b2e:	b125      	cbz	r5, 8012b3a <uxr_run_session_until_all_status+0x1e>
 8012b30:	462a      	mov	r2, r5
 8012b32:	21ff      	movs	r1, #255	; 0xff
 8012b34:	4620      	mov	r0, r4
 8012b36:	f006 f975 	bl	8018e24 <memset>
 8012b3a:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 8012b3e:	67f5      	str	r5, [r6, #124]	; 0x7c
 8012b40:	f000 ffa8 	bl	8013a94 <uxr_millis>
 8012b44:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8012b48:	f1aa 0a02 	sub.w	sl, sl, #2
 8012b4c:	4680      	mov	r8, r0
 8012b4e:	4639      	mov	r1, r7
 8012b50:	4630      	mov	r0, r6
 8012b52:	f7ff fd2b 	bl	80125ac <listen_message_reliably>
 8012b56:	f000 ff9d 	bl	8013a94 <uxr_millis>
 8012b5a:	eba0 0008 	sub.w	r0, r0, r8
 8012b5e:	1a39      	subs	r1, r7, r0
 8012b60:	b33d      	cbz	r5, 8012bb2 <uxr_run_session_until_all_status+0x96>
 8012b62:	46cc      	mov	ip, r9
 8012b64:	464a      	mov	r2, r9
 8012b66:	2301      	movs	r3, #1
 8012b68:	e002      	b.n	8012b70 <uxr_run_session_until_all_status+0x54>
 8012b6a:	42ab      	cmp	r3, r5
 8012b6c:	d20c      	bcs.n	8012b88 <uxr_run_session_until_all_status+0x6c>
 8012b6e:	3301      	adds	r3, #1
 8012b70:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8012b74:	2cff      	cmp	r4, #255	; 0xff
 8012b76:	d1f8      	bne.n	8012b6a <uxr_run_session_until_all_status+0x4e>
 8012b78:	42ab      	cmp	r3, r5
 8012b7a:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 8012b7e:	d213      	bcs.n	8012ba8 <uxr_run_session_until_all_status+0x8c>
 8012b80:	2800      	cmp	r0, #0
 8012b82:	d0f4      	beq.n	8012b6e <uxr_run_session_until_all_status+0x52>
 8012b84:	2900      	cmp	r1, #0
 8012b86:	dce3      	bgt.n	8012b50 <uxr_run_session_until_all_status+0x34>
 8012b88:	2300      	movs	r3, #0
 8012b8a:	444d      	add	r5, r9
 8012b8c:	67f3      	str	r3, [r6, #124]	; 0x7c
 8012b8e:	e001      	b.n	8012b94 <uxr_run_session_until_all_status+0x78>
 8012b90:	2b01      	cmp	r3, #1
 8012b92:	d812      	bhi.n	8012bba <uxr_run_session_until_all_status+0x9e>
 8012b94:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8012b98:	4565      	cmp	r5, ip
 8012b9a:	d1f9      	bne.n	8012b90 <uxr_run_session_until_all_status+0x74>
 8012b9c:	2b01      	cmp	r3, #1
 8012b9e:	bf8c      	ite	hi
 8012ba0:	2000      	movhi	r0, #0
 8012ba2:	2001      	movls	r0, #1
 8012ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ba8:	2900      	cmp	r1, #0
 8012baa:	dded      	ble.n	8012b88 <uxr_run_session_until_all_status+0x6c>
 8012bac:	2800      	cmp	r0, #0
 8012bae:	d1cf      	bne.n	8012b50 <uxr_run_session_until_all_status+0x34>
 8012bb0:	e7ea      	b.n	8012b88 <uxr_run_session_until_all_status+0x6c>
 8012bb2:	67f5      	str	r5, [r6, #124]	; 0x7c
 8012bb4:	2001      	movs	r0, #1
 8012bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bba:	2000      	movs	r0, #0
 8012bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012bc0 <uxr_prepare_stream_to_write_submessage>:
 8012bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bc4:	b082      	sub	sp, #8
 8012bc6:	4682      	mov	sl, r0
 8012bc8:	4610      	mov	r0, r2
 8012bca:	4615      	mov	r5, r2
 8012bcc:	461e      	mov	r6, r3
 8012bce:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8012bd2:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8012bd6:	9101      	str	r1, [sp, #4]
 8012bd8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8012bdc:	f000 ff54 	bl	8013a88 <uxr_submessage_padding>
 8012be0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012be4:	f105 0904 	add.w	r9, r5, #4
 8012be8:	2b01      	cmp	r3, #1
 8012bea:	4481      	add	r9, r0
 8012bec:	d01d      	beq.n	8012c2a <uxr_prepare_stream_to_write_submessage+0x6a>
 8012bee:	2b02      	cmp	r3, #2
 8012bf0:	d116      	bne.n	8012c20 <uxr_prepare_stream_to_write_submessage+0x60>
 8012bf2:	4621      	mov	r1, r4
 8012bf4:	f10a 0008 	add.w	r0, sl, #8
 8012bf8:	f000 fece 	bl	8013998 <uxr_get_output_reliable_stream>
 8012bfc:	4604      	mov	r4, r0
 8012bfe:	b158      	cbz	r0, 8012c18 <uxr_prepare_stream_to_write_submessage+0x58>
 8012c00:	4649      	mov	r1, r9
 8012c02:	4632      	mov	r2, r6
 8012c04:	f005 fb32 	bl	801826c <uxr_prepare_reliable_buffer_to_write>
 8012c08:	4604      	mov	r4, r0
 8012c0a:	b12c      	cbz	r4, 8012c18 <uxr_prepare_stream_to_write_submessage+0x58>
 8012c0c:	4643      	mov	r3, r8
 8012c0e:	b2aa      	uxth	r2, r5
 8012c10:	4639      	mov	r1, r7
 8012c12:	4630      	mov	r0, r6
 8012c14:	f000 fef8 	bl	8013a08 <uxr_buffer_submessage_header>
 8012c18:	4620      	mov	r0, r4
 8012c1a:	b002      	add	sp, #8
 8012c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c20:	2400      	movs	r4, #0
 8012c22:	4620      	mov	r0, r4
 8012c24:	b002      	add	sp, #8
 8012c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c2a:	4621      	mov	r1, r4
 8012c2c:	f10a 0008 	add.w	r0, sl, #8
 8012c30:	f000 feaa 	bl	8013988 <uxr_get_output_best_effort_stream>
 8012c34:	4604      	mov	r4, r0
 8012c36:	2800      	cmp	r0, #0
 8012c38:	d0ee      	beq.n	8012c18 <uxr_prepare_stream_to_write_submessage+0x58>
 8012c3a:	4649      	mov	r1, r9
 8012c3c:	4632      	mov	r2, r6
 8012c3e:	f005 fa51 	bl	80180e4 <uxr_prepare_best_effort_buffer_to_write>
 8012c42:	4604      	mov	r4, r0
 8012c44:	e7e1      	b.n	8012c0a <uxr_prepare_stream_to_write_submessage+0x4a>
 8012c46:	bf00      	nop

08012c48 <uxr_init_session_info>:
 8012c48:	b470      	push	{r4, r5, r6}
 8012c4a:	7102      	strb	r2, [r0, #4]
 8012c4c:	0e16      	lsrs	r6, r2, #24
 8012c4e:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8012c52:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8012c56:	23ff      	movs	r3, #255	; 0xff
 8012c58:	2209      	movs	r2, #9
 8012c5a:	7046      	strb	r6, [r0, #1]
 8012c5c:	7085      	strb	r5, [r0, #2]
 8012c5e:	70c4      	strb	r4, [r0, #3]
 8012c60:	7001      	strb	r1, [r0, #0]
 8012c62:	bc70      	pop	{r4, r5, r6}
 8012c64:	80c2      	strh	r2, [r0, #6]
 8012c66:	7143      	strb	r3, [r0, #5]
 8012c68:	4770      	bx	lr
 8012c6a:	bf00      	nop

08012c6c <uxr_buffer_create_session>:
 8012c6c:	b570      	push	{r4, r5, r6, lr}
 8012c6e:	4d11      	ldr	r5, [pc, #68]	; (8012cb4 <uxr_buffer_create_session+0x48>)
 8012c70:	f8d0 3001 	ldr.w	r3, [r0, #1]
 8012c74:	7806      	ldrb	r6, [r0, #0]
 8012c76:	b088      	sub	sp, #32
 8012c78:	460c      	mov	r4, r1
 8012c7a:	9302      	str	r3, [sp, #8]
 8012c7c:	2101      	movs	r1, #1
 8012c7e:	2300      	movs	r3, #0
 8012c80:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012c84:	88aa      	ldrh	r2, [r5, #4]
 8012c86:	80c1      	strh	r1, [r0, #6]
 8012c88:	f88d 600c 	strb.w	r6, [sp, #12]
 8012c8c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012c90:	682e      	ldr	r6, [r5, #0]
 8012c92:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012c96:	4619      	mov	r1, r3
 8012c98:	2210      	movs	r2, #16
 8012c9a:	4620      	mov	r0, r4
 8012c9c:	f88d 300d 	strb.w	r3, [sp, #13]
 8012ca0:	9600      	str	r6, [sp, #0]
 8012ca2:	f000 feb1 	bl	8013a08 <uxr_buffer_submessage_header>
 8012ca6:	4620      	mov	r0, r4
 8012ca8:	4669      	mov	r1, sp
 8012caa:	f001 fc65 	bl	8014578 <uxr_serialize_CREATE_CLIENT_Payload>
 8012cae:	b008      	add	sp, #32
 8012cb0:	bd70      	pop	{r4, r5, r6, pc}
 8012cb2:	bf00      	nop
 8012cb4:	0801df08 	.word	0x0801df08

08012cb8 <uxr_buffer_delete_session>:
 8012cb8:	b530      	push	{r4, r5, lr}
 8012cba:	4b0c      	ldr	r3, [pc, #48]	; (8012cec <uxr_buffer_delete_session+0x34>)
 8012cbc:	b083      	sub	sp, #12
 8012cbe:	891b      	ldrh	r3, [r3, #8]
 8012cc0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012cc4:	2202      	movs	r2, #2
 8012cc6:	460c      	mov	r4, r1
 8012cc8:	80c2      	strh	r2, [r0, #6]
 8012cca:	2300      	movs	r3, #0
 8012ccc:	2204      	movs	r2, #4
 8012cce:	4608      	mov	r0, r1
 8012cd0:	f44f 7500 	mov.w	r5, #512	; 0x200
 8012cd4:	2103      	movs	r1, #3
 8012cd6:	f8ad 5004 	strh.w	r5, [sp, #4]
 8012cda:	f000 fe95 	bl	8013a08 <uxr_buffer_submessage_header>
 8012cde:	4620      	mov	r0, r4
 8012ce0:	a901      	add	r1, sp, #4
 8012ce2:	f001 fce3 	bl	80146ac <uxr_serialize_DELETE_Payload>
 8012ce6:	b003      	add	sp, #12
 8012ce8:	bd30      	pop	{r4, r5, pc}
 8012cea:	bf00      	nop
 8012cec:	0801df08 	.word	0x0801df08

08012cf0 <uxr_read_create_session_status>:
 8012cf0:	b510      	push	{r4, lr}
 8012cf2:	b088      	sub	sp, #32
 8012cf4:	4604      	mov	r4, r0
 8012cf6:	4608      	mov	r0, r1
 8012cf8:	a901      	add	r1, sp, #4
 8012cfa:	f001 fce7 	bl	80146cc <uxr_deserialize_STATUS_AGENT_Payload>
 8012cfe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012d02:	7163      	strb	r3, [r4, #5]
 8012d04:	b008      	add	sp, #32
 8012d06:	bd10      	pop	{r4, pc}

08012d08 <uxr_read_delete_session_status>:
 8012d08:	b510      	push	{r4, lr}
 8012d0a:	4604      	mov	r4, r0
 8012d0c:	b084      	sub	sp, #16
 8012d0e:	4608      	mov	r0, r1
 8012d10:	a902      	add	r1, sp, #8
 8012d12:	f001 fd0b 	bl	801472c <uxr_deserialize_STATUS_Payload>
 8012d16:	88e3      	ldrh	r3, [r4, #6]
 8012d18:	2b02      	cmp	r3, #2
 8012d1a:	d001      	beq.n	8012d20 <uxr_read_delete_session_status+0x18>
 8012d1c:	b004      	add	sp, #16
 8012d1e:	bd10      	pop	{r4, pc}
 8012d20:	f10d 000a 	add.w	r0, sp, #10
 8012d24:	f7ff f8c2 	bl	8011eac <uxr_object_id_from_raw>
 8012d28:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012d2c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8012d30:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012d34:	b29b      	uxth	r3, r3
 8012d36:	2b02      	cmp	r3, #2
 8012d38:	bf04      	itt	eq
 8012d3a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8012d3e:	7163      	strbeq	r3, [r4, #5]
 8012d40:	b004      	add	sp, #16
 8012d42:	bd10      	pop	{r4, pc}

08012d44 <uxr_stamp_create_session_header>:
 8012d44:	b510      	push	{r4, lr}
 8012d46:	4604      	mov	r4, r0
 8012d48:	b08a      	sub	sp, #40	; 0x28
 8012d4a:	a802      	add	r0, sp, #8
 8012d4c:	2208      	movs	r2, #8
 8012d4e:	f7fe fcf3 	bl	8011738 <ucdr_init_buffer>
 8012d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d56:	9400      	str	r4, [sp, #0]
 8012d58:	2300      	movs	r3, #0
 8012d5a:	a802      	add	r0, sp, #8
 8012d5c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8012d60:	461a      	mov	r2, r3
 8012d62:	f001 f845 	bl	8013df0 <uxr_serialize_message_header>
 8012d66:	b00a      	add	sp, #40	; 0x28
 8012d68:	bd10      	pop	{r4, pc}
 8012d6a:	bf00      	nop

08012d6c <uxr_stamp_session_header>:
 8012d6c:	b570      	push	{r4, r5, r6, lr}
 8012d6e:	4604      	mov	r4, r0
 8012d70:	b08c      	sub	sp, #48	; 0x30
 8012d72:	460d      	mov	r5, r1
 8012d74:	4616      	mov	r6, r2
 8012d76:	4619      	mov	r1, r3
 8012d78:	a804      	add	r0, sp, #16
 8012d7a:	2208      	movs	r2, #8
 8012d7c:	9603      	str	r6, [sp, #12]
 8012d7e:	f7fe fcdb 	bl	8011738 <ucdr_init_buffer>
 8012d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d86:	9b03      	ldr	r3, [sp, #12]
 8012d88:	9400      	str	r4, [sp, #0]
 8012d8a:	462a      	mov	r2, r5
 8012d8c:	a804      	add	r0, sp, #16
 8012d8e:	f001 f82f 	bl	8013df0 <uxr_serialize_message_header>
 8012d92:	b00c      	add	sp, #48	; 0x30
 8012d94:	bd70      	pop	{r4, r5, r6, pc}
 8012d96:	bf00      	nop

08012d98 <uxr_read_session_header>:
 8012d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d9c:	4607      	mov	r7, r0
 8012d9e:	b084      	sub	sp, #16
 8012da0:	4608      	mov	r0, r1
 8012da2:	460c      	mov	r4, r1
 8012da4:	4615      	mov	r5, r2
 8012da6:	461e      	mov	r6, r3
 8012da8:	f7fe fcf8 	bl	801179c <ucdr_buffer_remaining>
 8012dac:	2808      	cmp	r0, #8
 8012dae:	d803      	bhi.n	8012db8 <uxr_read_session_header+0x20>
 8012db0:	2000      	movs	r0, #0
 8012db2:	b004      	add	sp, #16
 8012db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012db8:	f10d 080c 	add.w	r8, sp, #12
 8012dbc:	4633      	mov	r3, r6
 8012dbe:	462a      	mov	r2, r5
 8012dc0:	4620      	mov	r0, r4
 8012dc2:	f8cd 8000 	str.w	r8, [sp]
 8012dc6:	f10d 010b 	add.w	r1, sp, #11
 8012dca:	f001 f82f 	bl	8013e2c <uxr_deserialize_message_header>
 8012dce:	783a      	ldrb	r2, [r7, #0]
 8012dd0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8012dd4:	4293      	cmp	r3, r2
 8012dd6:	d1eb      	bne.n	8012db0 <uxr_read_session_header+0x18>
 8012dd8:	061b      	lsls	r3, r3, #24
 8012dda:	d41c      	bmi.n	8012e16 <uxr_read_session_header+0x7e>
 8012ddc:	f898 2000 	ldrb.w	r2, [r8]
 8012de0:	787b      	ldrb	r3, [r7, #1]
 8012de2:	429a      	cmp	r2, r3
 8012de4:	d003      	beq.n	8012dee <uxr_read_session_header+0x56>
 8012de6:	2001      	movs	r0, #1
 8012de8:	f080 0001 	eor.w	r0, r0, #1
 8012dec:	e7e1      	b.n	8012db2 <uxr_read_session_header+0x1a>
 8012dee:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8012df2:	78bb      	ldrb	r3, [r7, #2]
 8012df4:	429a      	cmp	r2, r3
 8012df6:	f107 0102 	add.w	r1, r7, #2
 8012dfa:	d1f4      	bne.n	8012de6 <uxr_read_session_header+0x4e>
 8012dfc:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8012e00:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012e04:	429a      	cmp	r2, r3
 8012e06:	d1ee      	bne.n	8012de6 <uxr_read_session_header+0x4e>
 8012e08:	784b      	ldrb	r3, [r1, #1]
 8012e0a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8012e0e:	429a      	cmp	r2, r3
 8012e10:	d1e9      	bne.n	8012de6 <uxr_read_session_header+0x4e>
 8012e12:	2000      	movs	r0, #0
 8012e14:	e7e8      	b.n	8012de8 <uxr_read_session_header+0x50>
 8012e16:	2001      	movs	r0, #1
 8012e18:	e7cb      	b.n	8012db2 <uxr_read_session_header+0x1a>
 8012e1a:	bf00      	nop

08012e1c <uxr_session_header_offset>:
 8012e1c:	f990 3000 	ldrsb.w	r3, [r0]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	bfac      	ite	ge
 8012e24:	2008      	movge	r0, #8
 8012e26:	2004      	movlt	r0, #4
 8012e28:	4770      	bx	lr
 8012e2a:	bf00      	nop

08012e2c <uxr_init_base_object_request>:
 8012e2c:	b530      	push	{r4, r5, lr}
 8012e2e:	88c3      	ldrh	r3, [r0, #6]
 8012e30:	b083      	sub	sp, #12
 8012e32:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8012e36:	9101      	str	r1, [sp, #4]
 8012e38:	f1a3 010a 	sub.w	r1, r3, #10
 8012e3c:	b289      	uxth	r1, r1
 8012e3e:	42a1      	cmp	r1, r4
 8012e40:	d80e      	bhi.n	8012e60 <uxr_init_base_object_request+0x34>
 8012e42:	3301      	adds	r3, #1
 8012e44:	b29c      	uxth	r4, r3
 8012e46:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8012e4a:	b2db      	uxtb	r3, r3
 8012e4c:	80c4      	strh	r4, [r0, #6]
 8012e4e:	1c91      	adds	r1, r2, #2
 8012e50:	9801      	ldr	r0, [sp, #4]
 8012e52:	7015      	strb	r5, [r2, #0]
 8012e54:	7053      	strb	r3, [r2, #1]
 8012e56:	f7ff f83d 	bl	8011ed4 <uxr_object_id_to_raw>
 8012e5a:	4620      	mov	r0, r4
 8012e5c:	b003      	add	sp, #12
 8012e5e:	bd30      	pop	{r4, r5, pc}
 8012e60:	230a      	movs	r3, #10
 8012e62:	461c      	mov	r4, r3
 8012e64:	2500      	movs	r5, #0
 8012e66:	e7f1      	b.n	8012e4c <uxr_init_base_object_request+0x20>

08012e68 <uxr_parse_base_object_request>:
 8012e68:	b570      	push	{r4, r5, r6, lr}
 8012e6a:	4604      	mov	r4, r0
 8012e6c:	3002      	adds	r0, #2
 8012e6e:	460d      	mov	r5, r1
 8012e70:	4616      	mov	r6, r2
 8012e72:	f7ff f81b 	bl	8011eac <uxr_object_id_from_raw>
 8012e76:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8012e7a:	8028      	strh	r0, [r5, #0]
 8012e7c:	806b      	strh	r3, [r5, #2]
 8012e7e:	7822      	ldrb	r2, [r4, #0]
 8012e80:	7863      	ldrb	r3, [r4, #1]
 8012e82:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012e86:	8033      	strh	r3, [r6, #0]
 8012e88:	bd70      	pop	{r4, r5, r6, pc}
 8012e8a:	bf00      	nop

08012e8c <uxr_init_framing_io>:
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	7041      	strb	r1, [r0, #1]
 8012e90:	7003      	strb	r3, [r0, #0]
 8012e92:	8583      	strh	r3, [r0, #44]	; 0x2c
 8012e94:	4770      	bx	lr
 8012e96:	bf00      	nop

08012e98 <uxr_write_framed_msg>:
 8012e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e9c:	7845      	ldrb	r5, [r0, #1]
 8012e9e:	b085      	sub	sp, #20
 8012ea0:	4604      	mov	r4, r0
 8012ea2:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 8012ea6:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8012eaa:	f1bc 0f01 	cmp.w	ip, #1
 8012eae:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8012eb2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8012eb6:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 8012eba:	460e      	mov	r6, r1
 8012ebc:	4617      	mov	r7, r2
 8012ebe:	469b      	mov	fp, r3
 8012ec0:	f240 811c 	bls.w	80130fc <uxr_write_framed_msg+0x264>
 8012ec4:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8012ec8:	2302      	movs	r3, #2
 8012eca:	2a01      	cmp	r2, #1
 8012ecc:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8012ed0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8012ed4:	f240 8096 	bls.w	8013004 <uxr_write_framed_msg+0x16c>
 8012ed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012eda:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8012ede:	b2d9      	uxtb	r1, r3
 8012ee0:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8012ee4:	2203      	movs	r2, #3
 8012ee6:	2b01      	cmp	r3, #1
 8012ee8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012eec:	f240 809f 	bls.w	801302e <uxr_write_framed_msg+0x196>
 8012ef0:	18a3      	adds	r3, r4, r2
 8012ef2:	3201      	adds	r2, #1
 8012ef4:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8012ef8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012efc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012efe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012f02:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8012f06:	2901      	cmp	r1, #1
 8012f08:	eb04 0102 	add.w	r1, r4, r2
 8012f0c:	f240 8107 	bls.w	801311e <uxr_write_framed_msg+0x286>
 8012f10:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8012f14:	3201      	adds	r2, #1
 8012f16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f18:	b2d2      	uxtb	r2, r2
 8012f1a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	f000 810c 	beq.w	801313c <uxr_write_framed_msg+0x2a4>
 8012f24:	f04f 0a00 	mov.w	sl, #0
 8012f28:	46d1      	mov	r9, sl
 8012f2a:	4653      	mov	r3, sl
 8012f2c:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8012f30:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8012f34:	2901      	cmp	r1, #1
 8012f36:	f240 80a8 	bls.w	801308a <uxr_write_framed_msg+0x1f2>
 8012f3a:	2a29      	cmp	r2, #41	; 0x29
 8012f3c:	f200 8083 	bhi.w	8013046 <uxr_write_framed_msg+0x1ae>
 8012f40:	18a1      	adds	r1, r4, r2
 8012f42:	3201      	adds	r2, #1
 8012f44:	b2d2      	uxtb	r2, r2
 8012f46:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8012f4a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012f4e:	ea8a 0303 	eor.w	r3, sl, r3
 8012f52:	4986      	ldr	r1, [pc, #536]	; (801316c <uxr_write_framed_msg+0x2d4>)
 8012f54:	b2db      	uxtb	r3, r3
 8012f56:	f109 0901 	add.w	r9, r9, #1
 8012f5a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012f5e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012f60:	fa1f f989 	uxth.w	r9, r9
 8012f64:	4549      	cmp	r1, r9
 8012f66:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8012f6a:	464b      	mov	r3, r9
 8012f6c:	d8de      	bhi.n	8012f2c <uxr_write_framed_msg+0x94>
 8012f6e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8012f72:	fa5f f98a 	uxtb.w	r9, sl
 8012f76:	9301      	str	r3, [sp, #4]
 8012f78:	f04f 0b00 	mov.w	fp, #0
 8012f7c:	f88d 900c 	strb.w	r9, [sp, #12]
 8012f80:	f88d 300d 	strb.w	r3, [sp, #13]
 8012f84:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 8012f88:	fa5f f18a 	uxtb.w	r1, sl
 8012f8c:	2901      	cmp	r1, #1
 8012f8e:	d920      	bls.n	8012fd2 <uxr_write_framed_msg+0x13a>
 8012f90:	2a29      	cmp	r2, #41	; 0x29
 8012f92:	f240 808c 	bls.w	80130ae <uxr_write_framed_msg+0x216>
 8012f96:	2500      	movs	r5, #0
 8012f98:	e000      	b.n	8012f9c <uxr_write_framed_msg+0x104>
 8012f9a:	b160      	cbz	r0, 8012fb6 <uxr_write_framed_msg+0x11e>
 8012f9c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8012fa0:	1b52      	subs	r2, r2, r5
 8012fa2:	4421      	add	r1, r4
 8012fa4:	4643      	mov	r3, r8
 8012fa6:	4638      	mov	r0, r7
 8012fa8:	47b0      	blx	r6
 8012faa:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8012fae:	4405      	add	r5, r0
 8012fb0:	4295      	cmp	r5, r2
 8012fb2:	d3f2      	bcc.n	8012f9a <uxr_write_framed_msg+0x102>
 8012fb4:	d003      	beq.n	8012fbe <uxr_write_framed_msg+0x126>
 8012fb6:	2000      	movs	r0, #0
 8012fb8:	b005      	add	sp, #20
 8012fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fbe:	fa5f f18a 	uxtb.w	r1, sl
 8012fc2:	f04f 0300 	mov.w	r3, #0
 8012fc6:	2901      	cmp	r1, #1
 8012fc8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8012fcc:	f04f 0200 	mov.w	r2, #0
 8012fd0:	d86d      	bhi.n	80130ae <uxr_write_framed_msg+0x216>
 8012fd2:	1c51      	adds	r1, r2, #1
 8012fd4:	b2c9      	uxtb	r1, r1
 8012fd6:	2929      	cmp	r1, #41	; 0x29
 8012fd8:	d8dd      	bhi.n	8012f96 <uxr_write_framed_msg+0xfe>
 8012fda:	18a0      	adds	r0, r4, r2
 8012fdc:	3202      	adds	r2, #2
 8012fde:	f089 0920 	eor.w	r9, r9, #32
 8012fe2:	b2d2      	uxtb	r2, r2
 8012fe4:	4659      	mov	r1, fp
 8012fe6:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8012fea:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8012fee:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8012ff2:	f04f 0b01 	mov.w	fp, #1
 8012ff6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012ffa:	2900      	cmp	r1, #0
 8012ffc:	d163      	bne.n	80130c6 <uxr_write_framed_msg+0x22e>
 8012ffe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013002:	e7bf      	b.n	8012f84 <uxr_write_framed_msg+0xec>
 8013004:	2204      	movs	r2, #4
 8013006:	2503      	movs	r5, #3
 8013008:	990e      	ldr	r1, [sp, #56]	; 0x38
 801300a:	4423      	add	r3, r4
 801300c:	b2c9      	uxtb	r1, r1
 801300e:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8013012:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 8013016:	4425      	add	r5, r4
 8013018:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801301c:	f080 0020 	eor.w	r0, r0, #32
 8013020:	2b01      	cmp	r3, #1
 8013022:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8013026:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801302a:	f63f af61 	bhi.w	8012ef0 <uxr_write_framed_msg+0x58>
 801302e:	18a3      	adds	r3, r4, r2
 8013030:	f081 0120 	eor.w	r1, r1, #32
 8013034:	3202      	adds	r2, #2
 8013036:	207d      	movs	r0, #125	; 0x7d
 8013038:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801303c:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 8013040:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013044:	e75a      	b.n	8012efc <uxr_write_framed_msg+0x64>
 8013046:	2500      	movs	r5, #0
 8013048:	e001      	b.n	801304e <uxr_write_framed_msg+0x1b6>
 801304a:	2800      	cmp	r0, #0
 801304c:	d0b3      	beq.n	8012fb6 <uxr_write_framed_msg+0x11e>
 801304e:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8013052:	1b52      	subs	r2, r2, r5
 8013054:	4421      	add	r1, r4
 8013056:	4643      	mov	r3, r8
 8013058:	4638      	mov	r0, r7
 801305a:	47b0      	blx	r6
 801305c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8013060:	4405      	add	r5, r0
 8013062:	4295      	cmp	r5, r2
 8013064:	d3f1      	bcc.n	801304a <uxr_write_framed_msg+0x1b2>
 8013066:	d1a6      	bne.n	8012fb6 <uxr_write_framed_msg+0x11e>
 8013068:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801306a:	f04f 0300 	mov.w	r3, #0
 801306e:	454a      	cmp	r2, r9
 8013070:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013074:	464b      	mov	r3, r9
 8013076:	d971      	bls.n	801315c <uxr_write_framed_msg+0x2c4>
 8013078:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801307c:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8013080:	2901      	cmp	r1, #1
 8013082:	f04f 0200 	mov.w	r2, #0
 8013086:	f63f af58 	bhi.w	8012f3a <uxr_write_framed_msg+0xa2>
 801308a:	1c51      	adds	r1, r2, #1
 801308c:	b2c9      	uxtb	r1, r1
 801308e:	2929      	cmp	r1, #41	; 0x29
 8013090:	d8d9      	bhi.n	8013046 <uxr_write_framed_msg+0x1ae>
 8013092:	18a0      	adds	r0, r4, r2
 8013094:	3202      	adds	r2, #2
 8013096:	b2d2      	uxtb	r2, r2
 8013098:	f083 0120 	eor.w	r1, r3, #32
 801309c:	f04f 057d 	mov.w	r5, #125	; 0x7d
 80130a0:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 80130a4:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 80130a8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80130ac:	e74f      	b.n	8012f4e <uxr_write_framed_msg+0xb6>
 80130ae:	18a0      	adds	r0, r4, r2
 80130b0:	3201      	adds	r2, #1
 80130b2:	b2d2      	uxtb	r2, r2
 80130b4:	4659      	mov	r1, fp
 80130b6:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 80130ba:	f04f 0b01 	mov.w	fp, #1
 80130be:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80130c2:	2900      	cmp	r1, #0
 80130c4:	d09b      	beq.n	8012ffe <uxr_write_framed_msg+0x166>
 80130c6:	2500      	movs	r5, #0
 80130c8:	e002      	b.n	80130d0 <uxr_write_framed_msg+0x238>
 80130ca:	2800      	cmp	r0, #0
 80130cc:	f43f af73 	beq.w	8012fb6 <uxr_write_framed_msg+0x11e>
 80130d0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80130d4:	1b52      	subs	r2, r2, r5
 80130d6:	4421      	add	r1, r4
 80130d8:	4643      	mov	r3, r8
 80130da:	4638      	mov	r0, r7
 80130dc:	47b0      	blx	r6
 80130de:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80130e2:	4405      	add	r5, r0
 80130e4:	4295      	cmp	r5, r2
 80130e6:	d3f0      	bcc.n	80130ca <uxr_write_framed_msg+0x232>
 80130e8:	f47f af65 	bne.w	8012fb6 <uxr_write_framed_msg+0x11e>
 80130ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80130ee:	2300      	movs	r3, #0
 80130f0:	b290      	uxth	r0, r2
 80130f2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80130f6:	b005      	add	sp, #20
 80130f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130fc:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8013100:	f085 0520 	eor.w	r5, r5, #32
 8013104:	2303      	movs	r3, #3
 8013106:	217d      	movs	r1, #125	; 0x7d
 8013108:	2a01      	cmp	r2, #1
 801310a:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 801310e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013112:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8013116:	d814      	bhi.n	8013142 <uxr_write_framed_msg+0x2aa>
 8013118:	2205      	movs	r2, #5
 801311a:	2504      	movs	r5, #4
 801311c:	e774      	b.n	8013008 <uxr_write_framed_msg+0x170>
 801311e:	f083 0320 	eor.w	r3, r3, #32
 8013122:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 8013126:	3202      	adds	r2, #2
 8013128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801312a:	b2d2      	uxtb	r2, r2
 801312c:	207d      	movs	r0, #125	; 0x7d
 801312e:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8013132:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013136:	2b00      	cmp	r3, #0
 8013138:	f47f aef4 	bne.w	8012f24 <uxr_write_framed_msg+0x8c>
 801313c:	9301      	str	r3, [sp, #4]
 801313e:	4699      	mov	r9, r3
 8013140:	e71a      	b.n	8012f78 <uxr_write_framed_msg+0xe0>
 8013142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013144:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8013148:	b2d9      	uxtb	r1, r3
 801314a:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801314e:	2204      	movs	r2, #4
 8013150:	2b01      	cmp	r3, #1
 8013152:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013156:	f63f aecb 	bhi.w	8012ef0 <uxr_write_framed_msg+0x58>
 801315a:	e768      	b.n	801302e <uxr_write_framed_msg+0x196>
 801315c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8013160:	fa5f f98a 	uxtb.w	r9, sl
 8013164:	9301      	str	r3, [sp, #4]
 8013166:	2200      	movs	r2, #0
 8013168:	e706      	b.n	8012f78 <uxr_write_framed_msg+0xe0>
 801316a:	bf00      	nop
 801316c:	0801e348 	.word	0x0801e348

08013170 <uxr_framing_read_transport>:
 8013170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013174:	4604      	mov	r4, r0
 8013176:	b083      	sub	sp, #12
 8013178:	461f      	mov	r7, r3
 801317a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 801317e:	4689      	mov	r9, r1
 8013180:	4692      	mov	sl, r2
 8013182:	f000 fc87 	bl	8013a94 <uxr_millis>
 8013186:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801318a:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 801318e:	42b3      	cmp	r3, r6
 8013190:	4680      	mov	r8, r0
 8013192:	d05f      	beq.n	8013254 <uxr_framing_read_transport+0xe4>
 8013194:	d81b      	bhi.n	80131ce <uxr_framing_read_transport+0x5e>
 8013196:	1e75      	subs	r5, r6, #1
 8013198:	1aed      	subs	r5, r5, r3
 801319a:	b2ed      	uxtb	r5, r5
 801319c:	2600      	movs	r6, #0
 801319e:	455d      	cmp	r5, fp
 80131a0:	d81e      	bhi.n	80131e0 <uxr_framing_read_transport+0x70>
 80131a2:	19ab      	adds	r3, r5, r6
 80131a4:	455b      	cmp	r3, fp
 80131a6:	bf84      	itt	hi
 80131a8:	ebab 0605 	subhi.w	r6, fp, r5
 80131ac:	b2f6      	uxtbhi	r6, r6
 80131ae:	b9e5      	cbnz	r5, 80131ea <uxr_framing_read_transport+0x7a>
 80131b0:	f04f 0b00 	mov.w	fp, #0
 80131b4:	f000 fc6e 	bl	8013a94 <uxr_millis>
 80131b8:	683b      	ldr	r3, [r7, #0]
 80131ba:	eba0 0008 	sub.w	r0, r0, r8
 80131be:	1a1b      	subs	r3, r3, r0
 80131c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80131c4:	4658      	mov	r0, fp
 80131c6:	603b      	str	r3, [r7, #0]
 80131c8:	b003      	add	sp, #12
 80131ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ce:	2e00      	cmp	r6, #0
 80131d0:	d048      	beq.n	8013264 <uxr_framing_read_transport+0xf4>
 80131d2:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 80131d6:	b2ed      	uxtb	r5, r5
 80131d8:	3e01      	subs	r6, #1
 80131da:	455d      	cmp	r5, fp
 80131dc:	b2f6      	uxtb	r6, r6
 80131de:	d9e0      	bls.n	80131a2 <uxr_framing_read_transport+0x32>
 80131e0:	fa5f f58b 	uxtb.w	r5, fp
 80131e4:	2600      	movs	r6, #0
 80131e6:	2d00      	cmp	r5, #0
 80131e8:	d0e2      	beq.n	80131b0 <uxr_framing_read_transport+0x40>
 80131ea:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80131ee:	3102      	adds	r1, #2
 80131f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80131f2:	9300      	str	r3, [sp, #0]
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	4421      	add	r1, r4
 80131f8:	462a      	mov	r2, r5
 80131fa:	4650      	mov	r0, sl
 80131fc:	47c8      	blx	r9
 80131fe:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013202:	4a1b      	ldr	r2, [pc, #108]	; (8013270 <uxr_framing_read_transport+0x100>)
 8013204:	4403      	add	r3, r0
 8013206:	0859      	lsrs	r1, r3, #1
 8013208:	fba2 2101 	umull	r2, r1, r2, r1
 801320c:	0889      	lsrs	r1, r1, #2
 801320e:	222a      	movs	r2, #42	; 0x2a
 8013210:	fb02 3111 	mls	r1, r2, r1, r3
 8013214:	4683      	mov	fp, r0
 8013216:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801321a:	2800      	cmp	r0, #0
 801321c:	d0c8      	beq.n	80131b0 <uxr_framing_read_transport+0x40>
 801321e:	42a8      	cmp	r0, r5
 8013220:	d1c8      	bne.n	80131b4 <uxr_framing_read_transport+0x44>
 8013222:	b31e      	cbz	r6, 801326c <uxr_framing_read_transport+0xfc>
 8013224:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013226:	9300      	str	r3, [sp, #0]
 8013228:	3102      	adds	r1, #2
 801322a:	4421      	add	r1, r4
 801322c:	4632      	mov	r2, r6
 801322e:	2300      	movs	r3, #0
 8013230:	4650      	mov	r0, sl
 8013232:	47c8      	blx	r9
 8013234:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013238:	490d      	ldr	r1, [pc, #52]	; (8013270 <uxr_framing_read_transport+0x100>)
 801323a:	181a      	adds	r2, r3, r0
 801323c:	0853      	lsrs	r3, r2, #1
 801323e:	fba1 1303 	umull	r1, r3, r1, r3
 8013242:	089b      	lsrs	r3, r3, #2
 8013244:	212a      	movs	r1, #42	; 0x2a
 8013246:	fb01 2313 	mls	r3, r1, r3, r2
 801324a:	eb00 0b05 	add.w	fp, r0, r5
 801324e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8013252:	e7af      	b.n	80131b4 <uxr_framing_read_transport+0x44>
 8013254:	2600      	movs	r6, #0
 8013256:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 801325a:	85a6      	strh	r6, [r4, #44]	; 0x2c
 801325c:	d9c0      	bls.n	80131e0 <uxr_framing_read_transport+0x70>
 801325e:	2102      	movs	r1, #2
 8013260:	2529      	movs	r5, #41	; 0x29
 8013262:	e7c5      	b.n	80131f0 <uxr_framing_read_transport+0x80>
 8013264:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8013268:	b2ed      	uxtb	r5, r5
 801326a:	e798      	b.n	801319e <uxr_framing_read_transport+0x2e>
 801326c:	46ab      	mov	fp, r5
 801326e:	e7a1      	b.n	80131b4 <uxr_framing_read_transport+0x44>
 8013270:	30c30c31 	.word	0x30c30c31

08013274 <uxr_read_framed_msg>:
 8013274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013278:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 801327c:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 8013280:	42ae      	cmp	r6, r5
 8013282:	b083      	sub	sp, #12
 8013284:	4604      	mov	r4, r0
 8013286:	461f      	mov	r7, r3
 8013288:	4689      	mov	r9, r1
 801328a:	4692      	mov	sl, r2
 801328c:	f000 817d 	beq.w	801358a <uxr_read_framed_msg+0x316>
 8013290:	7823      	ldrb	r3, [r4, #0]
 8013292:	4ecc      	ldr	r6, [pc, #816]	; (80135c4 <uxr_read_framed_msg+0x350>)
 8013294:	f8df 8330 	ldr.w	r8, [pc, #816]	; 80135c8 <uxr_read_framed_msg+0x354>
 8013298:	2b07      	cmp	r3, #7
 801329a:	d8fd      	bhi.n	8013298 <uxr_read_framed_msg+0x24>
 801329c:	e8df f013 	tbh	[pc, r3, lsl #1]
 80132a0:	00f40113 	.word	0x00f40113
 80132a4:	00b700d4 	.word	0x00b700d4
 80132a8:	004d008e 	.word	0x004d008e
 80132ac:	00080030 	.word	0x00080030
 80132b0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80132b4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80132b8:	4298      	cmp	r0, r3
 80132ba:	f000 8141 	beq.w	8013540 <uxr_read_framed_msg+0x2cc>
 80132be:	18e2      	adds	r2, r4, r3
 80132c0:	7891      	ldrb	r1, [r2, #2]
 80132c2:	297d      	cmp	r1, #125	; 0x7d
 80132c4:	f000 81a2 	beq.w	801360c <uxr_read_framed_msg+0x398>
 80132c8:	3301      	adds	r3, #1
 80132ca:	085a      	lsrs	r2, r3, #1
 80132cc:	fba6 0202 	umull	r0, r2, r6, r2
 80132d0:	0892      	lsrs	r2, r2, #2
 80132d2:	202a      	movs	r0, #42	; 0x2a
 80132d4:	fb00 3312 	mls	r3, r0, r2, r3
 80132d8:	297e      	cmp	r1, #126	; 0x7e
 80132da:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80132de:	f000 8251 	beq.w	8013784 <uxr_read_framed_msg+0x510>
 80132e2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80132e4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80132e6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80132ea:	b29b      	uxth	r3, r3
 80132ec:	2100      	movs	r1, #0
 80132ee:	429a      	cmp	r2, r3
 80132f0:	86a3      	strh	r3, [r4, #52]	; 0x34
 80132f2:	7021      	strb	r1, [r4, #0]
 80132f4:	f000 8182 	beq.w	80135fc <uxr_read_framed_msg+0x388>
 80132f8:	2000      	movs	r0, #0
 80132fa:	b003      	add	sp, #12
 80132fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013300:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013304:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013308:	4298      	cmp	r0, r3
 801330a:	f000 8128 	beq.w	801355e <uxr_read_framed_msg+0x2ea>
 801330e:	18e2      	adds	r2, r4, r3
 8013310:	7891      	ldrb	r1, [r2, #2]
 8013312:	297d      	cmp	r1, #125	; 0x7d
 8013314:	f000 8196 	beq.w	8013644 <uxr_read_framed_msg+0x3d0>
 8013318:	3301      	adds	r3, #1
 801331a:	085a      	lsrs	r2, r3, #1
 801331c:	fba6 0202 	umull	r0, r2, r6, r2
 8013320:	0892      	lsrs	r2, r2, #2
 8013322:	202a      	movs	r0, #42	; 0x2a
 8013324:	fb00 3312 	mls	r3, r0, r2, r3
 8013328:	297e      	cmp	r1, #126	; 0x7e
 801332a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801332e:	f000 8219 	beq.w	8013764 <uxr_read_framed_msg+0x4f0>
 8013332:	2307      	movs	r3, #7
 8013334:	86a1      	strh	r1, [r4, #52]	; 0x34
 8013336:	7023      	strb	r3, [r4, #0]
 8013338:	e7ae      	b.n	8013298 <uxr_read_framed_msg+0x24>
 801333a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801333c:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 801333e:	429d      	cmp	r5, r3
 8013340:	d937      	bls.n	80133b2 <uxr_read_framed_msg+0x13e>
 8013342:	ee07 9a90 	vmov	s15, r9
 8013346:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801334a:	e01e      	b.n	801338a <uxr_read_framed_msg+0x116>
 801334c:	f89e e002 	ldrb.w	lr, [lr, #2]
 8013350:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 8013354:	f000 80d2 	beq.w	80134fc <uxr_read_framed_msg+0x288>
 8013358:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801335c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013360:	f000 8214 	beq.w	801378c <uxr_read_framed_msg+0x518>
 8013364:	f807 e003 	strb.w	lr, [r7, r3]
 8013368:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801336a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801336c:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 801336e:	ea80 010e 	eor.w	r1, r0, lr
 8013372:	b2c9      	uxtb	r1, r1
 8013374:	3301      	adds	r3, #1
 8013376:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 801337a:	b29b      	uxth	r3, r3
 801337c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8013380:	42ab      	cmp	r3, r5
 8013382:	86e2      	strh	r2, [r4, #54]	; 0x36
 8013384:	8663      	strh	r3, [r4, #50]	; 0x32
 8013386:	f080 8121 	bcs.w	80135cc <uxr_read_framed_msg+0x358>
 801338a:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 801338e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013392:	f101 0b01 	add.w	fp, r1, #1
 8013396:	ea4f 025b 	mov.w	r2, fp, lsr #1
 801339a:	fba6 9202 	umull	r9, r2, r6, r2
 801339e:	0892      	lsrs	r2, r2, #2
 80133a0:	4288      	cmp	r0, r1
 80133a2:	eb04 0e01 	add.w	lr, r4, r1
 80133a6:	fb0c b212 	mls	r2, ip, r2, fp
 80133aa:	d1cf      	bne.n	801334c <uxr_read_framed_msg+0xd8>
 80133ac:	ee17 9a90 	vmov	r9, s15
 80133b0:	429d      	cmp	r5, r3
 80133b2:	f040 8112 	bne.w	80135da <uxr_read_framed_msg+0x366>
 80133b6:	2306      	movs	r3, #6
 80133b8:	7023      	strb	r3, [r4, #0]
 80133ba:	e76d      	b.n	8013298 <uxr_read_framed_msg+0x24>
 80133bc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80133c0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80133c4:	4298      	cmp	r0, r3
 80133c6:	f000 80bb 	beq.w	8013540 <uxr_read_framed_msg+0x2cc>
 80133ca:	18e2      	adds	r2, r4, r3
 80133cc:	7891      	ldrb	r1, [r2, #2]
 80133ce:	297d      	cmp	r1, #125	; 0x7d
 80133d0:	f000 8153 	beq.w	801367a <uxr_read_framed_msg+0x406>
 80133d4:	3301      	adds	r3, #1
 80133d6:	085a      	lsrs	r2, r3, #1
 80133d8:	fba6 0202 	umull	r0, r2, r6, r2
 80133dc:	0892      	lsrs	r2, r2, #2
 80133de:	202a      	movs	r0, #42	; 0x2a
 80133e0:	fb00 3212 	mls	r2, r0, r2, r3
 80133e4:	297e      	cmp	r1, #126	; 0x7e
 80133e6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80133ea:	f000 81cb 	beq.w	8013784 <uxr_read_framed_msg+0x510>
 80133ee:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80133f0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80133f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80133f6:	b29b      	uxth	r3, r3
 80133f8:	2000      	movs	r0, #0
 80133fa:	428b      	cmp	r3, r1
 80133fc:	8623      	strh	r3, [r4, #48]	; 0x30
 80133fe:	8660      	strh	r0, [r4, #50]	; 0x32
 8013400:	86e0      	strh	r0, [r4, #54]	; 0x36
 8013402:	f240 80db 	bls.w	80135bc <uxr_read_framed_msg+0x348>
 8013406:	7020      	strb	r0, [r4, #0]
 8013408:	b003      	add	sp, #12
 801340a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801340e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013412:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013416:	4298      	cmp	r0, r3
 8013418:	f000 80a1 	beq.w	801355e <uxr_read_framed_msg+0x2ea>
 801341c:	18e2      	adds	r2, r4, r3
 801341e:	7891      	ldrb	r1, [r2, #2]
 8013420:	297d      	cmp	r1, #125	; 0x7d
 8013422:	f000 8167 	beq.w	80136f4 <uxr_read_framed_msg+0x480>
 8013426:	3301      	adds	r3, #1
 8013428:	085a      	lsrs	r2, r3, #1
 801342a:	fba6 0202 	umull	r0, r2, r6, r2
 801342e:	0892      	lsrs	r2, r2, #2
 8013430:	202a      	movs	r0, #42	; 0x2a
 8013432:	fb00 3312 	mls	r3, r0, r2, r3
 8013436:	297e      	cmp	r1, #126	; 0x7e
 8013438:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801343c:	f000 8192 	beq.w	8013764 <uxr_read_framed_msg+0x4f0>
 8013440:	2304      	movs	r3, #4
 8013442:	8621      	strh	r1, [r4, #48]	; 0x30
 8013444:	7023      	strb	r3, [r4, #0]
 8013446:	e727      	b.n	8013298 <uxr_read_framed_msg+0x24>
 8013448:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801344c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8013450:	4290      	cmp	r0, r2
 8013452:	f000 80b1 	beq.w	80135b8 <uxr_read_framed_msg+0x344>
 8013456:	18a3      	adds	r3, r4, r2
 8013458:	7899      	ldrb	r1, [r3, #2]
 801345a:	297d      	cmp	r1, #125	; 0x7d
 801345c:	f000 8166 	beq.w	801372c <uxr_read_framed_msg+0x4b8>
 8013460:	3201      	adds	r2, #1
 8013462:	0850      	lsrs	r0, r2, #1
 8013464:	fba6 3000 	umull	r3, r0, r6, r0
 8013468:	0880      	lsrs	r0, r0, #2
 801346a:	232a      	movs	r3, #42	; 0x2a
 801346c:	fb03 2210 	mls	r2, r3, r0, r2
 8013470:	297e      	cmp	r1, #126	; 0x7e
 8013472:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013476:	f000 8187 	beq.w	8013788 <uxr_read_framed_msg+0x514>
 801347a:	7863      	ldrb	r3, [r4, #1]
 801347c:	428b      	cmp	r3, r1
 801347e:	bf0c      	ite	eq
 8013480:	2303      	moveq	r3, #3
 8013482:	2300      	movne	r3, #0
 8013484:	7023      	strb	r3, [r4, #0]
 8013486:	e707      	b.n	8013298 <uxr_read_framed_msg+0x24>
 8013488:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801348c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013490:	2200      	movs	r2, #0
 8013492:	4299      	cmp	r1, r3
 8013494:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8013498:	d063      	beq.n	8013562 <uxr_read_framed_msg+0x2ee>
 801349a:	18e2      	adds	r2, r4, r3
 801349c:	7892      	ldrb	r2, [r2, #2]
 801349e:	2a7d      	cmp	r2, #125	; 0x7d
 80134a0:	f000 8107 	beq.w	80136b2 <uxr_read_framed_msg+0x43e>
 80134a4:	1c59      	adds	r1, r3, #1
 80134a6:	084b      	lsrs	r3, r1, #1
 80134a8:	fba6 0303 	umull	r0, r3, r6, r3
 80134ac:	089b      	lsrs	r3, r3, #2
 80134ae:	202a      	movs	r0, #42	; 0x2a
 80134b0:	fb00 1313 	mls	r3, r0, r3, r1
 80134b4:	2a7e      	cmp	r2, #126	; 0x7e
 80134b6:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 80134ba:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80134be:	d050      	beq.n	8013562 <uxr_read_framed_msg+0x2ee>
 80134c0:	2302      	movs	r3, #2
 80134c2:	7023      	strb	r3, [r4, #0]
 80134c4:	e6e8      	b.n	8013298 <uxr_read_framed_msg+0x24>
 80134c6:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 80134ca:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80134ce:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80134d2:	1c51      	adds	r1, r2, #1
 80134d4:	084b      	lsrs	r3, r1, #1
 80134d6:	fba6 5303 	umull	r5, r3, r6, r3
 80134da:	089b      	lsrs	r3, r3, #2
 80134dc:	fb0c 1313 	mls	r3, ip, r3, r1
 80134e0:	4596      	cmp	lr, r2
 80134e2:	eb04 0002 	add.w	r0, r4, r2
 80134e6:	b2da      	uxtb	r2, r3
 80134e8:	f43f af06 	beq.w	80132f8 <uxr_read_framed_msg+0x84>
 80134ec:	7883      	ldrb	r3, [r0, #2]
 80134ee:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80134f2:	2b7e      	cmp	r3, #126	; 0x7e
 80134f4:	d1ed      	bne.n	80134d2 <uxr_read_framed_msg+0x25e>
 80134f6:	2301      	movs	r3, #1
 80134f8:	7023      	strb	r3, [r4, #0]
 80134fa:	e6cd      	b.n	8013298 <uxr_read_framed_msg+0x24>
 80134fc:	f101 0b01 	add.w	fp, r1, #1
 8013500:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8013504:	fba6 e202 	umull	lr, r2, r6, r2
 8013508:	3102      	adds	r1, #2
 801350a:	0892      	lsrs	r2, r2, #2
 801350c:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8013510:	fb0c b212 	mls	r2, ip, r2, fp
 8013514:	fba6 9e0e 	umull	r9, lr, r6, lr
 8013518:	eb04 0b02 	add.w	fp, r4, r2
 801351c:	b2d2      	uxtb	r2, r2
 801351e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8013522:	4290      	cmp	r0, r2
 8013524:	fb0c 111e 	mls	r1, ip, lr, r1
 8013528:	f43f af40 	beq.w	80133ac <uxr_read_framed_msg+0x138>
 801352c:	f89b e002 	ldrb.w	lr, [fp, #2]
 8013530:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8013534:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8013538:	d036      	beq.n	80135a8 <uxr_read_framed_msg+0x334>
 801353a:	f08e 0e20 	eor.w	lr, lr, #32
 801353e:	e711      	b.n	8013364 <uxr_read_framed_msg+0xf0>
 8013540:	2301      	movs	r3, #1
 8013542:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013544:	4649      	mov	r1, r9
 8013546:	e9cd 2300 	strd	r2, r3, [sp]
 801354a:	4620      	mov	r0, r4
 801354c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801354e:	4652      	mov	r2, sl
 8013550:	f7ff fe0e 	bl	8013170 <uxr_framing_read_transport>
 8013554:	2800      	cmp	r0, #0
 8013556:	f43f aecf 	beq.w	80132f8 <uxr_read_framed_msg+0x84>
 801355a:	7823      	ldrb	r3, [r4, #0]
 801355c:	e69c      	b.n	8013298 <uxr_read_framed_msg+0x24>
 801355e:	2302      	movs	r3, #2
 8013560:	e7ef      	b.n	8013542 <uxr_read_framed_msg+0x2ce>
 8013562:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013564:	2304      	movs	r3, #4
 8013566:	e9cd 2300 	strd	r2, r3, [sp]
 801356a:	4649      	mov	r1, r9
 801356c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801356e:	4652      	mov	r2, sl
 8013570:	4620      	mov	r0, r4
 8013572:	f7ff fdfd 	bl	8013170 <uxr_framing_read_transport>
 8013576:	2800      	cmp	r0, #0
 8013578:	d1ef      	bne.n	801355a <uxr_read_framed_msg+0x2e6>
 801357a:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 801357e:	387e      	subs	r0, #126	; 0x7e
 8013580:	bf18      	it	ne
 8013582:	2001      	movne	r0, #1
 8013584:	2800      	cmp	r0, #0
 8013586:	d0e8      	beq.n	801355a <uxr_read_framed_msg+0x2e6>
 8013588:	e6b6      	b.n	80132f8 <uxr_read_framed_msg+0x84>
 801358a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801358c:	2305      	movs	r3, #5
 801358e:	e9cd 5300 	strd	r5, r3, [sp]
 8013592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013594:	f7ff fdec 	bl	8013170 <uxr_framing_read_transport>
 8013598:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801359c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80135a0:	429a      	cmp	r2, r3
 80135a2:	f43f aea9 	beq.w	80132f8 <uxr_read_framed_msg+0x84>
 80135a6:	e673      	b.n	8013290 <uxr_read_framed_msg+0x1c>
 80135a8:	429d      	cmp	r5, r3
 80135aa:	ee17 9a90 	vmov	r9, s15
 80135ae:	f43f af02 	beq.w	80133b6 <uxr_read_framed_msg+0x142>
 80135b2:	2301      	movs	r3, #1
 80135b4:	7023      	strb	r3, [r4, #0]
 80135b6:	e66f      	b.n	8013298 <uxr_read_framed_msg+0x24>
 80135b8:	2303      	movs	r3, #3
 80135ba:	e7c2      	b.n	8013542 <uxr_read_framed_msg+0x2ce>
 80135bc:	2305      	movs	r3, #5
 80135be:	7023      	strb	r3, [r4, #0]
 80135c0:	e66a      	b.n	8013298 <uxr_read_framed_msg+0x24>
 80135c2:	bf00      	nop
 80135c4:	30c30c31 	.word	0x30c30c31
 80135c8:	0801e348 	.word	0x0801e348
 80135cc:	ee17 9a90 	vmov	r9, s15
 80135d0:	f43f aef1 	beq.w	80133b6 <uxr_read_framed_msg+0x142>
 80135d4:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80135d8:	d08d      	beq.n	80134f6 <uxr_read_framed_msg+0x282>
 80135da:	1aeb      	subs	r3, r5, r3
 80135dc:	3302      	adds	r3, #2
 80135de:	9301      	str	r3, [sp, #4]
 80135e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80135e2:	9300      	str	r3, [sp, #0]
 80135e4:	4652      	mov	r2, sl
 80135e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80135e8:	4649      	mov	r1, r9
 80135ea:	4620      	mov	r0, r4
 80135ec:	f7ff fdc0 	bl	8013170 <uxr_framing_read_transport>
 80135f0:	fab0 f080 	clz	r0, r0
 80135f4:	0940      	lsrs	r0, r0, #5
 80135f6:	2800      	cmp	r0, #0
 80135f8:	d0af      	beq.n	801355a <uxr_read_framed_msg+0x2e6>
 80135fa:	e67d      	b.n	80132f8 <uxr_read_framed_msg+0x84>
 80135fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80135fe:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8013602:	7013      	strb	r3, [r2, #0]
 8013604:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8013606:	b003      	add	sp, #12
 8013608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801360c:	1c59      	adds	r1, r3, #1
 801360e:	084a      	lsrs	r2, r1, #1
 8013610:	fba6 5202 	umull	r5, r2, r6, r2
 8013614:	0892      	lsrs	r2, r2, #2
 8013616:	252a      	movs	r5, #42	; 0x2a
 8013618:	fb05 1212 	mls	r2, r5, r2, r1
 801361c:	b2d1      	uxtb	r1, r2
 801361e:	4288      	cmp	r0, r1
 8013620:	d08e      	beq.n	8013540 <uxr_read_framed_msg+0x2cc>
 8013622:	3302      	adds	r3, #2
 8013624:	4422      	add	r2, r4
 8013626:	0858      	lsrs	r0, r3, #1
 8013628:	fba6 1000 	umull	r1, r0, r6, r0
 801362c:	7891      	ldrb	r1, [r2, #2]
 801362e:	0882      	lsrs	r2, r0, #2
 8013630:	fb05 3312 	mls	r3, r5, r2, r3
 8013634:	297e      	cmp	r1, #126	; 0x7e
 8013636:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801363a:	f000 80a3 	beq.w	8013784 <uxr_read_framed_msg+0x510>
 801363e:	f081 0120 	eor.w	r1, r1, #32
 8013642:	e64e      	b.n	80132e2 <uxr_read_framed_msg+0x6e>
 8013644:	1c59      	adds	r1, r3, #1
 8013646:	084a      	lsrs	r2, r1, #1
 8013648:	fba6 5202 	umull	r5, r2, r6, r2
 801364c:	0892      	lsrs	r2, r2, #2
 801364e:	252a      	movs	r5, #42	; 0x2a
 8013650:	fb05 1212 	mls	r2, r5, r2, r1
 8013654:	b2d1      	uxtb	r1, r2
 8013656:	4288      	cmp	r0, r1
 8013658:	d081      	beq.n	801355e <uxr_read_framed_msg+0x2ea>
 801365a:	3302      	adds	r3, #2
 801365c:	4422      	add	r2, r4
 801365e:	0858      	lsrs	r0, r3, #1
 8013660:	fba6 1000 	umull	r1, r0, r6, r0
 8013664:	7891      	ldrb	r1, [r2, #2]
 8013666:	0882      	lsrs	r2, r0, #2
 8013668:	fb05 3312 	mls	r3, r5, r2, r3
 801366c:	297e      	cmp	r1, #126	; 0x7e
 801366e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013672:	d077      	beq.n	8013764 <uxr_read_framed_msg+0x4f0>
 8013674:	f081 0120 	eor.w	r1, r1, #32
 8013678:	e65b      	b.n	8013332 <uxr_read_framed_msg+0xbe>
 801367a:	1c59      	adds	r1, r3, #1
 801367c:	084a      	lsrs	r2, r1, #1
 801367e:	fba6 5202 	umull	r5, r2, r6, r2
 8013682:	0892      	lsrs	r2, r2, #2
 8013684:	252a      	movs	r5, #42	; 0x2a
 8013686:	fb05 1212 	mls	r2, r5, r2, r1
 801368a:	b2d1      	uxtb	r1, r2
 801368c:	4288      	cmp	r0, r1
 801368e:	f43f af57 	beq.w	8013540 <uxr_read_framed_msg+0x2cc>
 8013692:	3302      	adds	r3, #2
 8013694:	4422      	add	r2, r4
 8013696:	0858      	lsrs	r0, r3, #1
 8013698:	fba6 1000 	umull	r1, r0, r6, r0
 801369c:	7891      	ldrb	r1, [r2, #2]
 801369e:	0882      	lsrs	r2, r0, #2
 80136a0:	fb05 3312 	mls	r3, r5, r2, r3
 80136a4:	297e      	cmp	r1, #126	; 0x7e
 80136a6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80136aa:	d06b      	beq.n	8013784 <uxr_read_framed_msg+0x510>
 80136ac:	f081 0120 	eor.w	r1, r1, #32
 80136b0:	e69d      	b.n	80133ee <uxr_read_framed_msg+0x17a>
 80136b2:	1c5d      	adds	r5, r3, #1
 80136b4:	086a      	lsrs	r2, r5, #1
 80136b6:	fba6 0202 	umull	r0, r2, r6, r2
 80136ba:	0892      	lsrs	r2, r2, #2
 80136bc:	202a      	movs	r0, #42	; 0x2a
 80136be:	fb00 5212 	mls	r2, r0, r2, r5
 80136c2:	b2d5      	uxtb	r5, r2
 80136c4:	42a9      	cmp	r1, r5
 80136c6:	f43f af4c 	beq.w	8013562 <uxr_read_framed_msg+0x2ee>
 80136ca:	3302      	adds	r3, #2
 80136cc:	4422      	add	r2, r4
 80136ce:	0859      	lsrs	r1, r3, #1
 80136d0:	fba6 5101 	umull	r5, r1, r6, r1
 80136d4:	7895      	ldrb	r5, [r2, #2]
 80136d6:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 80136da:	088a      	lsrs	r2, r1, #2
 80136dc:	fb00 3312 	mls	r3, r0, r2, r3
 80136e0:	2d7e      	cmp	r5, #126	; 0x7e
 80136e2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80136e6:	f43f af3c 	beq.w	8013562 <uxr_read_framed_msg+0x2ee>
 80136ea:	f085 0520 	eor.w	r5, r5, #32
 80136ee:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 80136f2:	e6e5      	b.n	80134c0 <uxr_read_framed_msg+0x24c>
 80136f4:	1c59      	adds	r1, r3, #1
 80136f6:	084a      	lsrs	r2, r1, #1
 80136f8:	fba6 5202 	umull	r5, r2, r6, r2
 80136fc:	0892      	lsrs	r2, r2, #2
 80136fe:	252a      	movs	r5, #42	; 0x2a
 8013700:	fb05 1212 	mls	r2, r5, r2, r1
 8013704:	b2d1      	uxtb	r1, r2
 8013706:	4288      	cmp	r0, r1
 8013708:	f43f af29 	beq.w	801355e <uxr_read_framed_msg+0x2ea>
 801370c:	3302      	adds	r3, #2
 801370e:	4422      	add	r2, r4
 8013710:	0858      	lsrs	r0, r3, #1
 8013712:	fba6 1000 	umull	r1, r0, r6, r0
 8013716:	7891      	ldrb	r1, [r2, #2]
 8013718:	0882      	lsrs	r2, r0, #2
 801371a:	fb05 3312 	mls	r3, r5, r2, r3
 801371e:	297e      	cmp	r1, #126	; 0x7e
 8013720:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013724:	d01e      	beq.n	8013764 <uxr_read_framed_msg+0x4f0>
 8013726:	f081 0120 	eor.w	r1, r1, #32
 801372a:	e689      	b.n	8013440 <uxr_read_framed_msg+0x1cc>
 801372c:	1c51      	adds	r1, r2, #1
 801372e:	084b      	lsrs	r3, r1, #1
 8013730:	fba6 5303 	umull	r5, r3, r6, r3
 8013734:	089b      	lsrs	r3, r3, #2
 8013736:	252a      	movs	r5, #42	; 0x2a
 8013738:	fb05 1313 	mls	r3, r5, r3, r1
 801373c:	b2d9      	uxtb	r1, r3
 801373e:	4288      	cmp	r0, r1
 8013740:	f43f af3a 	beq.w	80135b8 <uxr_read_framed_msg+0x344>
 8013744:	3202      	adds	r2, #2
 8013746:	4423      	add	r3, r4
 8013748:	0850      	lsrs	r0, r2, #1
 801374a:	789b      	ldrb	r3, [r3, #2]
 801374c:	fba6 1000 	umull	r1, r0, r6, r0
 8013750:	0880      	lsrs	r0, r0, #2
 8013752:	fb05 2210 	mls	r2, r5, r0, r2
 8013756:	2b7e      	cmp	r3, #126	; 0x7e
 8013758:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801375c:	d014      	beq.n	8013788 <uxr_read_framed_msg+0x514>
 801375e:	f083 0120 	eor.w	r1, r3, #32
 8013762:	e68a      	b.n	801347a <uxr_read_framed_msg+0x206>
 8013764:	2302      	movs	r3, #2
 8013766:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013768:	4649      	mov	r1, r9
 801376a:	e9cd 2300 	strd	r2, r3, [sp]
 801376e:	4620      	mov	r0, r4
 8013770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013772:	4652      	mov	r2, sl
 8013774:	f7ff fcfc 	bl	8013170 <uxr_framing_read_transport>
 8013778:	2800      	cmp	r0, #0
 801377a:	f47f aeee 	bne.w	801355a <uxr_read_framed_msg+0x2e6>
 801377e:	2301      	movs	r3, #1
 8013780:	7023      	strb	r3, [r4, #0]
 8013782:	e589      	b.n	8013298 <uxr_read_framed_msg+0x24>
 8013784:	2301      	movs	r3, #1
 8013786:	e7ee      	b.n	8013766 <uxr_read_framed_msg+0x4f2>
 8013788:	2303      	movs	r3, #3
 801378a:	e7ec      	b.n	8013766 <uxr_read_framed_msg+0x4f2>
 801378c:	ee17 9a90 	vmov	r9, s15
 8013790:	e6b1      	b.n	80134f6 <uxr_read_framed_msg+0x282>
 8013792:	bf00      	nop

08013794 <uxr_stream_id>:
 8013794:	b410      	push	{r4}
 8013796:	2901      	cmp	r1, #1
 8013798:	b083      	sub	sp, #12
 801379a:	d01f      	beq.n	80137dc <uxr_stream_id+0x48>
 801379c:	2902      	cmp	r1, #2
 801379e:	f04f 0400 	mov.w	r4, #0
 80137a2:	d01e      	beq.n	80137e2 <uxr_stream_id+0x4e>
 80137a4:	2300      	movs	r3, #0
 80137a6:	f364 0307 	bfi	r3, r4, #0, #8
 80137aa:	f360 230f 	bfi	r3, r0, #8, #8
 80137ae:	f361 4317 	bfi	r3, r1, #16, #8
 80137b2:	f362 631f 	bfi	r3, r2, #24, #8
 80137b6:	b2da      	uxtb	r2, r3
 80137b8:	2000      	movs	r0, #0
 80137ba:	f362 0007 	bfi	r0, r2, #0, #8
 80137be:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80137c2:	f362 200f 	bfi	r0, r2, #8, #8
 80137c6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80137ca:	f362 4017 	bfi	r0, r2, #16, #8
 80137ce:	0e1b      	lsrs	r3, r3, #24
 80137d0:	f363 601f 	bfi	r0, r3, #24, #8
 80137d4:	b003      	add	sp, #12
 80137d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137da:	4770      	bx	lr
 80137dc:	1c44      	adds	r4, r0, #1
 80137de:	b2e4      	uxtb	r4, r4
 80137e0:	e7e0      	b.n	80137a4 <uxr_stream_id+0x10>
 80137e2:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 80137e6:	e7dd      	b.n	80137a4 <uxr_stream_id+0x10>

080137e8 <uxr_stream_id_from_raw>:
 80137e8:	b410      	push	{r4}
 80137ea:	b083      	sub	sp, #12
 80137ec:	b128      	cbz	r0, 80137fa <uxr_stream_id_from_raw+0x12>
 80137ee:	0603      	lsls	r3, r0, #24
 80137f0:	d421      	bmi.n	8013836 <uxr_stream_id_from_raw+0x4e>
 80137f2:	1e42      	subs	r2, r0, #1
 80137f4:	b2d2      	uxtb	r2, r2
 80137f6:	2401      	movs	r4, #1
 80137f8:	e001      	b.n	80137fe <uxr_stream_id_from_raw+0x16>
 80137fa:	4604      	mov	r4, r0
 80137fc:	4602      	mov	r2, r0
 80137fe:	2300      	movs	r3, #0
 8013800:	f360 0307 	bfi	r3, r0, #0, #8
 8013804:	f362 230f 	bfi	r3, r2, #8, #8
 8013808:	f364 4317 	bfi	r3, r4, #16, #8
 801380c:	f361 631f 	bfi	r3, r1, #24, #8
 8013810:	b2da      	uxtb	r2, r3
 8013812:	2000      	movs	r0, #0
 8013814:	f362 0007 	bfi	r0, r2, #0, #8
 8013818:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801381c:	f362 200f 	bfi	r0, r2, #8, #8
 8013820:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013824:	f362 4017 	bfi	r0, r2, #16, #8
 8013828:	0e1b      	lsrs	r3, r3, #24
 801382a:	f363 601f 	bfi	r0, r3, #24, #8
 801382e:	b003      	add	sp, #12
 8013830:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013834:	4770      	bx	lr
 8013836:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 801383a:	2402      	movs	r4, #2
 801383c:	e7df      	b.n	80137fe <uxr_stream_id_from_raw+0x16>
 801383e:	bf00      	nop

08013840 <uxr_init_stream_storage>:
 8013840:	2300      	movs	r3, #0
 8013842:	7403      	strb	r3, [r0, #16]
 8013844:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8013848:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 801384c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8013850:	4770      	bx	lr
 8013852:	bf00      	nop

08013854 <uxr_reset_stream_storage>:
 8013854:	b570      	push	{r4, r5, r6, lr}
 8013856:	7c03      	ldrb	r3, [r0, #16]
 8013858:	4604      	mov	r4, r0
 801385a:	b153      	cbz	r3, 8013872 <uxr_reset_stream_storage+0x1e>
 801385c:	4606      	mov	r6, r0
 801385e:	2500      	movs	r5, #0
 8013860:	4630      	mov	r0, r6
 8013862:	f004 fc39 	bl	80180d8 <uxr_reset_output_best_effort_stream>
 8013866:	7c23      	ldrb	r3, [r4, #16]
 8013868:	3501      	adds	r5, #1
 801386a:	42ab      	cmp	r3, r5
 801386c:	f106 0610 	add.w	r6, r6, #16
 8013870:	d8f6      	bhi.n	8013860 <uxr_reset_stream_storage+0xc>
 8013872:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013876:	b163      	cbz	r3, 8013892 <uxr_reset_stream_storage+0x3e>
 8013878:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801387c:	2500      	movs	r5, #0
 801387e:	4630      	mov	r0, r6
 8013880:	f004 fa36 	bl	8017cf0 <uxr_reset_input_best_effort_stream>
 8013884:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013888:	3501      	adds	r5, #1
 801388a:	42ab      	cmp	r3, r5
 801388c:	f106 0602 	add.w	r6, r6, #2
 8013890:	d8f5      	bhi.n	801387e <uxr_reset_stream_storage+0x2a>
 8013892:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8013896:	b163      	cbz	r3, 80138b2 <uxr_reset_stream_storage+0x5e>
 8013898:	f104 0618 	add.w	r6, r4, #24
 801389c:	2500      	movs	r5, #0
 801389e:	4630      	mov	r0, r6
 80138a0:	f004 fcba 	bl	8018218 <uxr_reset_output_reliable_stream>
 80138a4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80138a8:	3501      	adds	r5, #1
 80138aa:	42ab      	cmp	r3, r5
 80138ac:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80138b0:	d8f5      	bhi.n	801389e <uxr_reset_stream_storage+0x4a>
 80138b2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80138b6:	b163      	cbz	r3, 80138d2 <uxr_reset_stream_storage+0x7e>
 80138b8:	f104 0648 	add.w	r6, r4, #72	; 0x48
 80138bc:	2500      	movs	r5, #0
 80138be:	4630      	mov	r0, r6
 80138c0:	f004 fa7e 	bl	8017dc0 <uxr_reset_input_reliable_stream>
 80138c4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80138c8:	3501      	adds	r5, #1
 80138ca:	42ab      	cmp	r3, r5
 80138cc:	f106 0618 	add.w	r6, r6, #24
 80138d0:	d8f5      	bhi.n	80138be <uxr_reset_stream_storage+0x6a>
 80138d2:	bd70      	pop	{r4, r5, r6, pc}

080138d4 <uxr_add_output_best_effort_buffer>:
 80138d4:	b530      	push	{r4, r5, lr}
 80138d6:	7c04      	ldrb	r4, [r0, #16]
 80138d8:	1c65      	adds	r5, r4, #1
 80138da:	b083      	sub	sp, #12
 80138dc:	7405      	strb	r5, [r0, #16]
 80138de:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80138e2:	f004 fbed 	bl	80180c0 <uxr_init_output_best_effort_stream>
 80138e6:	2201      	movs	r2, #1
 80138e8:	4620      	mov	r0, r4
 80138ea:	4611      	mov	r1, r2
 80138ec:	b003      	add	sp, #12
 80138ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80138f2:	f7ff bf4f 	b.w	8013794 <uxr_stream_id>
 80138f6:	bf00      	nop

080138f8 <uxr_add_output_reliable_buffer>:
 80138f8:	b570      	push	{r4, r5, r6, lr}
 80138fa:	b084      	sub	sp, #16
 80138fc:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8013900:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8013904:	9600      	str	r6, [sp, #0]
 8013906:	2528      	movs	r5, #40	; 0x28
 8013908:	1c66      	adds	r6, r4, #1
 801390a:	fb05 0504 	mla	r5, r5, r4, r0
 801390e:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 8013912:	f105 0018 	add.w	r0, r5, #24
 8013916:	f004 fc4d 	bl	80181b4 <uxr_init_output_reliable_stream>
 801391a:	4620      	mov	r0, r4
 801391c:	2201      	movs	r2, #1
 801391e:	2102      	movs	r1, #2
 8013920:	b004      	add	sp, #16
 8013922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013926:	f7ff bf35 	b.w	8013794 <uxr_stream_id>
 801392a:	bf00      	nop

0801392c <uxr_add_input_best_effort_buffer>:
 801392c:	b510      	push	{r4, lr}
 801392e:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8013932:	1c62      	adds	r2, r4, #1
 8013934:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8013938:	b082      	sub	sp, #8
 801393a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801393e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8013942:	f004 f9d1 	bl	8017ce8 <uxr_init_input_best_effort_stream>
 8013946:	4620      	mov	r0, r4
 8013948:	2200      	movs	r2, #0
 801394a:	2101      	movs	r1, #1
 801394c:	b002      	add	sp, #8
 801394e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013952:	f7ff bf1f 	b.w	8013794 <uxr_stream_id>
 8013956:	bf00      	nop

08013958 <uxr_add_input_reliable_buffer>:
 8013958:	b570      	push	{r4, r5, r6, lr}
 801395a:	b084      	sub	sp, #16
 801395c:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 8013960:	9e08      	ldr	r6, [sp, #32]
 8013962:	9600      	str	r6, [sp, #0]
 8013964:	2518      	movs	r5, #24
 8013966:	1c66      	adds	r6, r4, #1
 8013968:	fb05 0504 	mla	r5, r5, r4, r0
 801396c:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 8013970:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8013974:	f004 fa00 	bl	8017d78 <uxr_init_input_reliable_stream>
 8013978:	4620      	mov	r0, r4
 801397a:	2200      	movs	r2, #0
 801397c:	2102      	movs	r1, #2
 801397e:	b004      	add	sp, #16
 8013980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013984:	f7ff bf06 	b.w	8013794 <uxr_stream_id>

08013988 <uxr_get_output_best_effort_stream>:
 8013988:	7c03      	ldrb	r3, [r0, #16]
 801398a:	428b      	cmp	r3, r1
 801398c:	bf8c      	ite	hi
 801398e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8013992:	2000      	movls	r0, #0
 8013994:	4770      	bx	lr
 8013996:	bf00      	nop

08013998 <uxr_get_output_reliable_stream>:
 8013998:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801399c:	428b      	cmp	r3, r1
 801399e:	bf83      	ittte	hi
 80139a0:	2328      	movhi	r3, #40	; 0x28
 80139a2:	fb03 0101 	mlahi	r1, r3, r1, r0
 80139a6:	f101 0018 	addhi.w	r0, r1, #24
 80139aa:	2000      	movls	r0, #0
 80139ac:	4770      	bx	lr
 80139ae:	bf00      	nop

080139b0 <uxr_get_input_best_effort_stream>:
 80139b0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80139b4:	428b      	cmp	r3, r1
 80139b6:	bf86      	itte	hi
 80139b8:	3121      	addhi	r1, #33	; 0x21
 80139ba:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80139be:	2000      	movls	r0, #0
 80139c0:	4770      	bx	lr
 80139c2:	bf00      	nop

080139c4 <uxr_get_input_reliable_stream>:
 80139c4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80139c8:	428b      	cmp	r3, r1
 80139ca:	bf83      	ittte	hi
 80139cc:	2318      	movhi	r3, #24
 80139ce:	fb03 0101 	mlahi	r1, r3, r1, r0
 80139d2:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 80139d6:	2000      	movls	r0, #0
 80139d8:	4770      	bx	lr
 80139da:	bf00      	nop

080139dc <uxr_output_streams_confirmed>:
 80139dc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80139e0:	b183      	cbz	r3, 8013a04 <uxr_output_streams_confirmed+0x28>
 80139e2:	b570      	push	{r4, r5, r6, lr}
 80139e4:	4606      	mov	r6, r0
 80139e6:	f100 0518 	add.w	r5, r0, #24
 80139ea:	2400      	movs	r4, #0
 80139ec:	e001      	b.n	80139f2 <uxr_output_streams_confirmed+0x16>
 80139ee:	3528      	adds	r5, #40	; 0x28
 80139f0:	b138      	cbz	r0, 8013a02 <uxr_output_streams_confirmed+0x26>
 80139f2:	4628      	mov	r0, r5
 80139f4:	f004 fe6a 	bl	80186cc <uxr_is_output_up_to_date>
 80139f8:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80139fc:	3401      	adds	r4, #1
 80139fe:	42a3      	cmp	r3, r4
 8013a00:	d8f5      	bhi.n	80139ee <uxr_output_streams_confirmed+0x12>
 8013a02:	bd70      	pop	{r4, r5, r6, pc}
 8013a04:	2001      	movs	r0, #1
 8013a06:	4770      	bx	lr

08013a08 <uxr_buffer_submessage_header>:
 8013a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a0a:	4604      	mov	r4, r0
 8013a0c:	460e      	mov	r6, r1
 8013a0e:	2104      	movs	r1, #4
 8013a10:	4615      	mov	r5, r2
 8013a12:	461f      	mov	r7, r3
 8013a14:	f7fd feac 	bl	8011770 <ucdr_align_to>
 8013a18:	2301      	movs	r3, #1
 8013a1a:	ea47 0203 	orr.w	r2, r7, r3
 8013a1e:	4631      	mov	r1, r6
 8013a20:	7523      	strb	r3, [r4, #20]
 8013a22:	4620      	mov	r0, r4
 8013a24:	462b      	mov	r3, r5
 8013a26:	f000 fa21 	bl	8013e6c <uxr_serialize_submessage_header>
 8013a2a:	4620      	mov	r0, r4
 8013a2c:	f7fd feb6 	bl	801179c <ucdr_buffer_remaining>
 8013a30:	42a8      	cmp	r0, r5
 8013a32:	bf34      	ite	cc
 8013a34:	2000      	movcc	r0, #0
 8013a36:	2001      	movcs	r0, #1
 8013a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a3a:	bf00      	nop

08013a3c <uxr_read_submessage_header>:
 8013a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a40:	4604      	mov	r4, r0
 8013a42:	460d      	mov	r5, r1
 8013a44:	2104      	movs	r1, #4
 8013a46:	4616      	mov	r6, r2
 8013a48:	4698      	mov	r8, r3
 8013a4a:	f7fd fe91 	bl	8011770 <ucdr_align_to>
 8013a4e:	4620      	mov	r0, r4
 8013a50:	f7fd fea4 	bl	801179c <ucdr_buffer_remaining>
 8013a54:	2803      	cmp	r0, #3
 8013a56:	bf8c      	ite	hi
 8013a58:	2701      	movhi	r7, #1
 8013a5a:	2700      	movls	r7, #0
 8013a5c:	d802      	bhi.n	8013a64 <uxr_read_submessage_header+0x28>
 8013a5e:	4638      	mov	r0, r7
 8013a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a64:	4633      	mov	r3, r6
 8013a66:	4642      	mov	r2, r8
 8013a68:	4620      	mov	r0, r4
 8013a6a:	4629      	mov	r1, r5
 8013a6c:	f000 fa12 	bl	8013e94 <uxr_deserialize_submessage_header>
 8013a70:	f898 3000 	ldrb.w	r3, [r8]
 8013a74:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8013a78:	f003 0301 	and.w	r3, r3, #1
 8013a7c:	f888 2000 	strb.w	r2, [r8]
 8013a80:	7523      	strb	r3, [r4, #20]
 8013a82:	4638      	mov	r0, r7
 8013a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013a88 <uxr_submessage_padding>:
 8013a88:	f010 0003 	ands.w	r0, r0, #3
 8013a8c:	bf18      	it	ne
 8013a8e:	f1c0 0004 	rsbne	r0, r0, #4
 8013a92:	4770      	bx	lr

08013a94 <uxr_millis>:
 8013a94:	b510      	push	{r4, lr}
 8013a96:	b084      	sub	sp, #16
 8013a98:	4669      	mov	r1, sp
 8013a9a:	2001      	movs	r0, #1
 8013a9c:	f7ee ff3c 	bl	8002918 <clock_gettime>
 8013aa0:	e9dd 2400 	ldrd	r2, r4, [sp]
 8013aa4:	4907      	ldr	r1, [pc, #28]	; (8013ac4 <uxr_millis+0x30>)
 8013aa6:	9802      	ldr	r0, [sp, #8]
 8013aa8:	fba2 2301 	umull	r2, r3, r2, r1
 8013aac:	fb01 3304 	mla	r3, r1, r4, r3
 8013ab0:	4604      	mov	r4, r0
 8013ab2:	1810      	adds	r0, r2, r0
 8013ab4:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8013ab8:	4a03      	ldr	r2, [pc, #12]	; (8013ac8 <uxr_millis+0x34>)
 8013aba:	2300      	movs	r3, #0
 8013abc:	f7ed f8cc 	bl	8000c58 <__aeabi_ldivmod>
 8013ac0:	b004      	add	sp, #16
 8013ac2:	bd10      	pop	{r4, pc}
 8013ac4:	3b9aca00 	.word	0x3b9aca00
 8013ac8:	000f4240 	.word	0x000f4240

08013acc <uxr_nanos>:
 8013acc:	b510      	push	{r4, lr}
 8013ace:	b084      	sub	sp, #16
 8013ad0:	4669      	mov	r1, sp
 8013ad2:	2001      	movs	r0, #1
 8013ad4:	f7ee ff20 	bl	8002918 <clock_gettime>
 8013ad8:	e9dd 2400 	ldrd	r2, r4, [sp]
 8013adc:	4905      	ldr	r1, [pc, #20]	; (8013af4 <uxr_nanos+0x28>)
 8013ade:	9802      	ldr	r0, [sp, #8]
 8013ae0:	fba2 2301 	umull	r2, r3, r2, r1
 8013ae4:	fb01 3304 	mla	r3, r1, r4, r3
 8013ae8:	4604      	mov	r4, r0
 8013aea:	1810      	adds	r0, r2, r0
 8013aec:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8013af0:	b004      	add	sp, #16
 8013af2:	bd10      	pop	{r4, pc}
 8013af4:	3b9aca00 	.word	0x3b9aca00

08013af8 <on_full_output_buffer_fragmented>:
 8013af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013afc:	460c      	mov	r4, r1
 8013afe:	b08a      	sub	sp, #40	; 0x28
 8013b00:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8013b04:	4606      	mov	r6, r0
 8013b06:	f104 0008 	add.w	r0, r4, #8
 8013b0a:	f7ff ff45 	bl	8013998 <uxr_get_output_reliable_stream>
 8013b0e:	4605      	mov	r5, r0
 8013b10:	f004 fde6 	bl	80186e0 <get_available_free_slots>
 8013b14:	b968      	cbnz	r0, 8013b32 <on_full_output_buffer_fragmented+0x3a>
 8013b16:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8013b1a:	4620      	mov	r0, r4
 8013b1c:	4798      	blx	r3
 8013b1e:	b918      	cbnz	r0, 8013b28 <on_full_output_buffer_fragmented+0x30>
 8013b20:	2001      	movs	r0, #1
 8013b22:	b00a      	add	sp, #40	; 0x28
 8013b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b28:	4628      	mov	r0, r5
 8013b2a:	f004 fdd9 	bl	80186e0 <get_available_free_slots>
 8013b2e:	2800      	cmp	r0, #0
 8013b30:	d0f6      	beq.n	8013b20 <on_full_output_buffer_fragmented+0x28>
 8013b32:	8928      	ldrh	r0, [r5, #8]
 8013b34:	89eb      	ldrh	r3, [r5, #14]
 8013b36:	7b2a      	ldrb	r2, [r5, #12]
 8013b38:	fbb3 f1f0 	udiv	r1, r3, r0
 8013b3c:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 8013b40:	fb00 3111 	mls	r1, r0, r1, r3
 8013b44:	b28b      	uxth	r3, r1
 8013b46:	32fc      	adds	r2, #252	; 0xfc
 8013b48:	6869      	ldr	r1, [r5, #4]
 8013b4a:	fbb1 f1f0 	udiv	r1, r1, r0
 8013b4e:	1f0f      	subs	r7, r1, #4
 8013b50:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8013b54:	fb01 f103 	mul.w	r1, r1, r3
 8013b58:	443a      	add	r2, r7
 8013b5a:	682b      	ldr	r3, [r5, #0]
 8013b5c:	fa1f f882 	uxth.w	r8, r2
 8013b60:	3104      	adds	r1, #4
 8013b62:	4419      	add	r1, r3
 8013b64:	eba0 0008 	sub.w	r0, r0, r8
 8013b68:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8013b6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b70:	9300      	str	r3, [sp, #0]
 8013b72:	463a      	mov	r2, r7
 8013b74:	a802      	add	r0, sp, #8
 8013b76:	2300      	movs	r3, #0
 8013b78:	f7fd fdcc 	bl	8011714 <ucdr_init_buffer_origin_offset>
 8013b7c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8013b80:	42ba      	cmp	r2, r7
 8013b82:	d927      	bls.n	8013bd4 <on_full_output_buffer_fragmented+0xdc>
 8013b84:	4642      	mov	r2, r8
 8013b86:	2300      	movs	r3, #0
 8013b88:	210d      	movs	r1, #13
 8013b8a:	a802      	add	r0, sp, #8
 8013b8c:	f7ff ff3c 	bl	8013a08 <uxr_buffer_submessage_header>
 8013b90:	8928      	ldrh	r0, [r5, #8]
 8013b92:	89eb      	ldrh	r3, [r5, #14]
 8013b94:	fbb3 f1f0 	udiv	r1, r3, r0
 8013b98:	fb00 3111 	mls	r1, r0, r1, r3
 8013b9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013ba0:	b289      	uxth	r1, r1
 8013ba2:	fbb3 f3f0 	udiv	r3, r3, r0
 8013ba6:	fb03 f301 	mul.w	r3, r3, r1
 8013baa:	50d7      	str	r7, [r2, r3]
 8013bac:	89e8      	ldrh	r0, [r5, #14]
 8013bae:	2101      	movs	r1, #1
 8013bb0:	f004 fdb6 	bl	8018720 <uxr_seq_num_add>
 8013bb4:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8013bb8:	81e8      	strh	r0, [r5, #14]
 8013bba:	1a52      	subs	r2, r2, r1
 8013bbc:	4630      	mov	r0, r6
 8013bbe:	f7fd fdbb 	bl	8011738 <ucdr_init_buffer>
 8013bc2:	4630      	mov	r0, r6
 8013bc4:	490f      	ldr	r1, [pc, #60]	; (8013c04 <on_full_output_buffer_fragmented+0x10c>)
 8013bc6:	4622      	mov	r2, r4
 8013bc8:	f7fd fd8c 	bl	80116e4 <ucdr_set_on_full_buffer_callback>
 8013bcc:	2000      	movs	r0, #0
 8013bce:	b00a      	add	sp, #40	; 0x28
 8013bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bd4:	b292      	uxth	r2, r2
 8013bd6:	2302      	movs	r3, #2
 8013bd8:	210d      	movs	r1, #13
 8013bda:	a802      	add	r0, sp, #8
 8013bdc:	f7ff ff14 	bl	8013a08 <uxr_buffer_submessage_header>
 8013be0:	8928      	ldrh	r0, [r5, #8]
 8013be2:	89eb      	ldrh	r3, [r5, #14]
 8013be4:	fbb3 f2f0 	udiv	r2, r3, r0
 8013be8:	fb00 3212 	mls	r2, r0, r2, r3
 8013bec:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8013bf0:	686b      	ldr	r3, [r5, #4]
 8013bf2:	fbb3 f3f0 	udiv	r3, r3, r0
 8013bf6:	b292      	uxth	r2, r2
 8013bf8:	6828      	ldr	r0, [r5, #0]
 8013bfa:	fb03 f302 	mul.w	r3, r3, r2
 8013bfe:	3108      	adds	r1, #8
 8013c00:	50c1      	str	r1, [r0, r3]
 8013c02:	e7d3      	b.n	8013bac <on_full_output_buffer_fragmented+0xb4>
 8013c04:	08013af9 	.word	0x08013af9

08013c08 <uxr_prepare_output_stream>:
 8013c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c0a:	b087      	sub	sp, #28
 8013c0c:	2407      	movs	r4, #7
 8013c0e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013c10:	9202      	str	r2, [sp, #8]
 8013c12:	2500      	movs	r5, #0
 8013c14:	1d32      	adds	r2, r6, #4
 8013c16:	e9cd 4500 	strd	r4, r5, [sp]
 8013c1a:	9103      	str	r1, [sp, #12]
 8013c1c:	461c      	mov	r4, r3
 8013c1e:	4606      	mov	r6, r0
 8013c20:	f7fe ffce 	bl	8012bc0 <uxr_prepare_stream_to_write_submessage>
 8013c24:	f080 0201 	eor.w	r2, r0, #1
 8013c28:	b2d2      	uxtb	r2, r2
 8013c2a:	75a2      	strb	r2, [r4, #22]
 8013c2c:	b112      	cbz	r2, 8013c34 <uxr_prepare_output_stream+0x2c>
 8013c2e:	4628      	mov	r0, r5
 8013c30:	b007      	add	sp, #28
 8013c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c34:	aa05      	add	r2, sp, #20
 8013c36:	9902      	ldr	r1, [sp, #8]
 8013c38:	4630      	mov	r0, r6
 8013c3a:	f7ff f8f7 	bl	8012e2c <uxr_init_base_object_request>
 8013c3e:	a905      	add	r1, sp, #20
 8013c40:	4605      	mov	r5, r0
 8013c42:	4620      	mov	r0, r4
 8013c44:	f000 fda4 	bl	8014790 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013c48:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8013c4c:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8013c50:	1a52      	subs	r2, r2, r1
 8013c52:	4620      	mov	r0, r4
 8013c54:	f7fd fd70 	bl	8011738 <ucdr_init_buffer>
 8013c58:	4620      	mov	r0, r4
 8013c5a:	463a      	mov	r2, r7
 8013c5c:	4631      	mov	r1, r6
 8013c5e:	f7fd fd41 	bl	80116e4 <ucdr_set_on_full_buffer_callback>
 8013c62:	4628      	mov	r0, r5
 8013c64:	b007      	add	sp, #28
 8013c66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013c68 <uxr_prepare_output_stream_fragmented>:
 8013c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c6c:	b091      	sub	sp, #68	; 0x44
 8013c6e:	4605      	mov	r5, r0
 8013c70:	9105      	str	r1, [sp, #20]
 8013c72:	3008      	adds	r0, #8
 8013c74:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013c78:	9302      	str	r3, [sp, #8]
 8013c7a:	9204      	str	r2, [sp, #16]
 8013c7c:	f7ff fe8c 	bl	8013998 <uxr_get_output_reliable_stream>
 8013c80:	2800      	cmp	r0, #0
 8013c82:	f000 808d 	beq.w	8013da0 <uxr_prepare_output_stream_fragmented+0x138>
 8013c86:	4604      	mov	r4, r0
 8013c88:	f004 fd2a 	bl	80186e0 <get_available_free_slots>
 8013c8c:	2800      	cmp	r0, #0
 8013c8e:	f000 8082 	beq.w	8013d96 <uxr_prepare_output_stream_fragmented+0x12e>
 8013c92:	8922      	ldrh	r2, [r4, #8]
 8013c94:	89e7      	ldrh	r7, [r4, #14]
 8013c96:	fbb7 f8f2 	udiv	r8, r7, r2
 8013c9a:	e9d4 3100 	ldrd	r3, r1, [r4]
 8013c9e:	fb02 7818 	mls	r8, r2, r8, r7
 8013ca2:	fa1f f888 	uxth.w	r8, r8
 8013ca6:	fbb1 f2f2 	udiv	r2, r1, r2
 8013caa:	fb02 f808 	mul.w	r8, r2, r8
 8013cae:	f108 0804 	add.w	r8, r8, #4
 8013cb2:	4498      	add	r8, r3
 8013cb4:	7b23      	ldrb	r3, [r4, #12]
 8013cb6:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8013cba:	9203      	str	r2, [sp, #12]
 8013cbc:	4553      	cmp	r3, sl
 8013cbe:	f1a2 0b04 	sub.w	fp, r2, #4
 8013cc2:	d379      	bcc.n	8013db8 <uxr_prepare_output_stream_fragmented+0x150>
 8013cc4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8013cc6:	f8cd a000 	str.w	sl, [sp]
 8013cca:	f1ab 0904 	sub.w	r9, fp, #4
 8013cce:	eba9 0903 	sub.w	r9, r9, r3
 8013cd2:	a808      	add	r0, sp, #32
 8013cd4:	465a      	mov	r2, fp
 8013cd6:	4641      	mov	r1, r8
 8013cd8:	3608      	adds	r6, #8
 8013cda:	fa1f f989 	uxth.w	r9, r9
 8013cde:	2300      	movs	r3, #0
 8013ce0:	f7fd fd18 	bl	8011714 <ucdr_init_buffer_origin_offset>
 8013ce4:	455e      	cmp	r6, fp
 8013ce6:	bf34      	ite	cc
 8013ce8:	2302      	movcc	r3, #2
 8013cea:	2300      	movcs	r3, #0
 8013cec:	464a      	mov	r2, r9
 8013cee:	a808      	add	r0, sp, #32
 8013cf0:	210d      	movs	r1, #13
 8013cf2:	f7ff fe89 	bl	8013a08 <uxr_buffer_submessage_header>
 8013cf6:	8920      	ldrh	r0, [r4, #8]
 8013cf8:	fbb7 f3f0 	udiv	r3, r7, r0
 8013cfc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013d00:	fb00 7313 	mls	r3, r0, r3, r7
 8013d04:	b29b      	uxth	r3, r3
 8013d06:	fbb1 f1f0 	udiv	r1, r1, r0
 8013d0a:	fb03 f301 	mul.w	r3, r3, r1
 8013d0e:	4638      	mov	r0, r7
 8013d10:	f842 b003 	str.w	fp, [r2, r3]
 8013d14:	2101      	movs	r1, #1
 8013d16:	f004 fd03 	bl	8018720 <uxr_seq_num_add>
 8013d1a:	9a03      	ldr	r2, [sp, #12]
 8013d1c:	f10a 0104 	add.w	r1, sl, #4
 8013d20:	4441      	add	r1, r8
 8013d22:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013d26:	3a08      	subs	r2, #8
 8013d28:	4607      	mov	r7, r0
 8013d2a:	eba2 020a 	sub.w	r2, r2, sl
 8013d2e:	4640      	mov	r0, r8
 8013d30:	f7fd fd02 	bl	8011738 <ucdr_init_buffer>
 8013d34:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013d36:	81e7      	strh	r7, [r4, #14]
 8013d38:	3204      	adds	r2, #4
 8013d3a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8013d3e:	bf28      	it	cs
 8013d40:	2200      	movcs	r2, #0
 8013d42:	2300      	movs	r3, #0
 8013d44:	b292      	uxth	r2, r2
 8013d46:	2107      	movs	r1, #7
 8013d48:	4640      	mov	r0, r8
 8013d4a:	f7ff fe5d 	bl	8013a08 <uxr_buffer_submessage_header>
 8013d4e:	aa07      	add	r2, sp, #28
 8013d50:	9904      	ldr	r1, [sp, #16]
 8013d52:	4628      	mov	r0, r5
 8013d54:	f7ff f86a 	bl	8012e2c <uxr_init_base_object_request>
 8013d58:	a907      	add	r1, sp, #28
 8013d5a:	4604      	mov	r4, r0
 8013d5c:	4640      	mov	r0, r8
 8013d5e:	f000 fd17 	bl	8014790 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013d62:	e9d8 2101 	ldrd	r2, r1, [r8, #4]
 8013d66:	4640      	mov	r0, r8
 8013d68:	1a52      	subs	r2, r2, r1
 8013d6a:	f7fd fce5 	bl	8011738 <ucdr_init_buffer>
 8013d6e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013d70:	9b05      	ldr	r3, [sp, #20]
 8013d72:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 8013d76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013d78:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 8013d7c:	4640      	mov	r0, r8
 8013d7e:	491b      	ldr	r1, [pc, #108]	; (8013dec <uxr_prepare_output_stream_fragmented+0x184>)
 8013d80:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
 8013d84:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8013d88:	462a      	mov	r2, r5
 8013d8a:	f7fd fcab 	bl	80116e4 <ucdr_set_on_full_buffer_callback>
 8013d8e:	4620      	mov	r0, r4
 8013d90:	b011      	add	sp, #68	; 0x44
 8013d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d96:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013d98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d9a:	4628      	mov	r0, r5
 8013d9c:	4798      	blx	r3
 8013d9e:	b920      	cbnz	r0, 8013daa <uxr_prepare_output_stream_fragmented+0x142>
 8013da0:	2400      	movs	r4, #0
 8013da2:	4620      	mov	r0, r4
 8013da4:	b011      	add	sp, #68	; 0x44
 8013da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013daa:	4620      	mov	r0, r4
 8013dac:	f004 fc98 	bl	80186e0 <get_available_free_slots>
 8013db0:	2800      	cmp	r0, #0
 8013db2:	f47f af6e 	bne.w	8013c92 <uxr_prepare_output_stream_fragmented+0x2a>
 8013db6:	e7f3      	b.n	8013da0 <uxr_prepare_output_stream_fragmented+0x138>
 8013db8:	4638      	mov	r0, r7
 8013dba:	2101      	movs	r1, #1
 8013dbc:	f004 fcb0 	bl	8018720 <uxr_seq_num_add>
 8013dc0:	8922      	ldrh	r2, [r4, #8]
 8013dc2:	fbb0 f8f2 	udiv	r8, r0, r2
 8013dc6:	fb02 0818 	mls	r8, r2, r8, r0
 8013dca:	fa1f f888 	uxth.w	r8, r8
 8013dce:	6863      	ldr	r3, [r4, #4]
 8013dd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8013dd4:	6822      	ldr	r2, [r4, #0]
 8013dd6:	fb08 f803 	mul.w	r8, r8, r3
 8013dda:	f108 0804 	add.w	r8, r8, #4
 8013dde:	4490      	add	r8, r2
 8013de0:	7b23      	ldrb	r3, [r4, #12]
 8013de2:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8013de6:	4607      	mov	r7, r0
 8013de8:	e76c      	b.n	8013cc4 <uxr_prepare_output_stream_fragmented+0x5c>
 8013dea:	bf00      	nop
 8013dec:	08013af9 	.word	0x08013af9

08013df0 <uxr_serialize_message_header>:
 8013df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013df2:	b083      	sub	sp, #12
 8013df4:	4616      	mov	r6, r2
 8013df6:	4604      	mov	r4, r0
 8013df8:	9301      	str	r3, [sp, #4]
 8013dfa:	460d      	mov	r5, r1
 8013dfc:	9f08      	ldr	r7, [sp, #32]
 8013dfe:	f7fd f8ab 	bl	8010f58 <ucdr_serialize_uint8_t>
 8013e02:	4631      	mov	r1, r6
 8013e04:	4620      	mov	r0, r4
 8013e06:	f7fd f8a7 	bl	8010f58 <ucdr_serialize_uint8_t>
 8013e0a:	9a01      	ldr	r2, [sp, #4]
 8013e0c:	4620      	mov	r0, r4
 8013e0e:	2101      	movs	r1, #1
 8013e10:	f7fd f8f6 	bl	8011000 <ucdr_serialize_endian_uint16_t>
 8013e14:	062b      	lsls	r3, r5, #24
 8013e16:	d501      	bpl.n	8013e1c <uxr_serialize_message_header+0x2c>
 8013e18:	b003      	add	sp, #12
 8013e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e1c:	4639      	mov	r1, r7
 8013e1e:	4620      	mov	r0, r4
 8013e20:	2204      	movs	r2, #4
 8013e22:	b003      	add	sp, #12
 8013e24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013e28:	f7fc be80 	b.w	8010b2c <ucdr_serialize_array_uint8_t>

08013e2c <uxr_deserialize_message_header>:
 8013e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e2e:	b083      	sub	sp, #12
 8013e30:	4616      	mov	r6, r2
 8013e32:	4604      	mov	r4, r0
 8013e34:	9301      	str	r3, [sp, #4]
 8013e36:	460d      	mov	r5, r1
 8013e38:	9f08      	ldr	r7, [sp, #32]
 8013e3a:	f7fd f8a3 	bl	8010f84 <ucdr_deserialize_uint8_t>
 8013e3e:	4631      	mov	r1, r6
 8013e40:	4620      	mov	r0, r4
 8013e42:	f7fd f89f 	bl	8010f84 <ucdr_deserialize_uint8_t>
 8013e46:	9a01      	ldr	r2, [sp, #4]
 8013e48:	4620      	mov	r0, r4
 8013e4a:	2101      	movs	r1, #1
 8013e4c:	f7fd f92a 	bl	80110a4 <ucdr_deserialize_endian_uint16_t>
 8013e50:	f995 3000 	ldrsb.w	r3, [r5]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	da01      	bge.n	8013e5c <uxr_deserialize_message_header+0x30>
 8013e58:	b003      	add	sp, #12
 8013e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e5c:	4639      	mov	r1, r7
 8013e5e:	4620      	mov	r0, r4
 8013e60:	2204      	movs	r2, #4
 8013e62:	b003      	add	sp, #12
 8013e64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013e68:	f7fc bec4 	b.w	8010bf4 <ucdr_deserialize_array_uint8_t>

08013e6c <uxr_serialize_submessage_header>:
 8013e6c:	b530      	push	{r4, r5, lr}
 8013e6e:	b083      	sub	sp, #12
 8013e70:	4615      	mov	r5, r2
 8013e72:	4604      	mov	r4, r0
 8013e74:	9301      	str	r3, [sp, #4]
 8013e76:	f7fd f86f 	bl	8010f58 <ucdr_serialize_uint8_t>
 8013e7a:	4629      	mov	r1, r5
 8013e7c:	4620      	mov	r0, r4
 8013e7e:	f7fd f86b 	bl	8010f58 <ucdr_serialize_uint8_t>
 8013e82:	9a01      	ldr	r2, [sp, #4]
 8013e84:	4620      	mov	r0, r4
 8013e86:	2101      	movs	r1, #1
 8013e88:	b003      	add	sp, #12
 8013e8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013e8e:	f7fd b8b7 	b.w	8011000 <ucdr_serialize_endian_uint16_t>
 8013e92:	bf00      	nop

08013e94 <uxr_deserialize_submessage_header>:
 8013e94:	b530      	push	{r4, r5, lr}
 8013e96:	b083      	sub	sp, #12
 8013e98:	4615      	mov	r5, r2
 8013e9a:	4604      	mov	r4, r0
 8013e9c:	9301      	str	r3, [sp, #4]
 8013e9e:	f7fd f871 	bl	8010f84 <ucdr_deserialize_uint8_t>
 8013ea2:	4629      	mov	r1, r5
 8013ea4:	4620      	mov	r0, r4
 8013ea6:	f7fd f86d 	bl	8010f84 <ucdr_deserialize_uint8_t>
 8013eaa:	9a01      	ldr	r2, [sp, #4]
 8013eac:	4620      	mov	r0, r4
 8013eae:	2101      	movs	r1, #1
 8013eb0:	b003      	add	sp, #12
 8013eb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013eb6:	f7fd b8f5 	b.w	80110a4 <ucdr_deserialize_endian_uint16_t>
 8013eba:	bf00      	nop

08013ebc <uxr_serialize_CLIENT_Representation>:
 8013ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ec0:	2204      	movs	r2, #4
 8013ec2:	460c      	mov	r4, r1
 8013ec4:	4605      	mov	r5, r0
 8013ec6:	f7fc fe31 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 8013eca:	1d21      	adds	r1, r4, #4
 8013ecc:	4607      	mov	r7, r0
 8013ece:	2202      	movs	r2, #2
 8013ed0:	4628      	mov	r0, r5
 8013ed2:	f7fc fe2b 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 8013ed6:	1da1      	adds	r1, r4, #6
 8013ed8:	4007      	ands	r7, r0
 8013eda:	2202      	movs	r2, #2
 8013edc:	4628      	mov	r0, r5
 8013ede:	f7fc fe25 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 8013ee2:	fa5f f887 	uxtb.w	r8, r7
 8013ee6:	2204      	movs	r2, #4
 8013ee8:	4607      	mov	r7, r0
 8013eea:	f104 0108 	add.w	r1, r4, #8
 8013eee:	4628      	mov	r0, r5
 8013ef0:	f7fc fe1c 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 8013ef4:	ea08 0707 	and.w	r7, r8, r7
 8013ef8:	7b21      	ldrb	r1, [r4, #12]
 8013efa:	4680      	mov	r8, r0
 8013efc:	4628      	mov	r0, r5
 8013efe:	f7fd f82b 	bl	8010f58 <ucdr_serialize_uint8_t>
 8013f02:	ea08 0807 	and.w	r8, r8, r7
 8013f06:	7b61      	ldrb	r1, [r4, #13]
 8013f08:	4607      	mov	r7, r0
 8013f0a:	4628      	mov	r0, r5
 8013f0c:	f7fc fff4 	bl	8010ef8 <ucdr_serialize_bool>
 8013f10:	7b63      	ldrb	r3, [r4, #13]
 8013f12:	ea08 0707 	and.w	r7, r8, r7
 8013f16:	ea07 0600 	and.w	r6, r7, r0
 8013f1a:	b933      	cbnz	r3, 8013f2a <uxr_serialize_CLIENT_Representation+0x6e>
 8013f1c:	8ba1      	ldrh	r1, [r4, #28]
 8013f1e:	4628      	mov	r0, r5
 8013f20:	f7fd f846 	bl	8010fb0 <ucdr_serialize_uint16_t>
 8013f24:	4030      	ands	r0, r6
 8013f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f2a:	6921      	ldr	r1, [r4, #16]
 8013f2c:	4628      	mov	r0, r5
 8013f2e:	f7fd f8e3 	bl	80110f8 <ucdr_serialize_uint32_t>
 8013f32:	6923      	ldr	r3, [r4, #16]
 8013f34:	b1cb      	cbz	r3, 8013f6a <uxr_serialize_CLIENT_Representation+0xae>
 8013f36:	b1d0      	cbz	r0, 8013f6e <uxr_serialize_CLIENT_Representation+0xb2>
 8013f38:	46a0      	mov	r8, r4
 8013f3a:	f04f 0900 	mov.w	r9, #0
 8013f3e:	e002      	b.n	8013f46 <uxr_serialize_CLIENT_Representation+0x8a>
 8013f40:	f108 0808 	add.w	r8, r8, #8
 8013f44:	b198      	cbz	r0, 8013f6e <uxr_serialize_CLIENT_Representation+0xb2>
 8013f46:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013f4a:	4628      	mov	r0, r5
 8013f4c:	f003 febc 	bl	8017cc8 <ucdr_serialize_string>
 8013f50:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8013f54:	4607      	mov	r7, r0
 8013f56:	4628      	mov	r0, r5
 8013f58:	f003 feb6 	bl	8017cc8 <ucdr_serialize_string>
 8013f5c:	6923      	ldr	r3, [r4, #16]
 8013f5e:	f109 0901 	add.w	r9, r9, #1
 8013f62:	4038      	ands	r0, r7
 8013f64:	4599      	cmp	r9, r3
 8013f66:	b2c0      	uxtb	r0, r0
 8013f68:	d3ea      	bcc.n	8013f40 <uxr_serialize_CLIENT_Representation+0x84>
 8013f6a:	4006      	ands	r6, r0
 8013f6c:	e7d6      	b.n	8013f1c <uxr_serialize_CLIENT_Representation+0x60>
 8013f6e:	2600      	movs	r6, #0
 8013f70:	e7d4      	b.n	8013f1c <uxr_serialize_CLIENT_Representation+0x60>
 8013f72:	bf00      	nop

08013f74 <uxr_serialize_AGENT_Representation>:
 8013f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f78:	2204      	movs	r2, #4
 8013f7a:	460c      	mov	r4, r1
 8013f7c:	4605      	mov	r5, r0
 8013f7e:	f7fc fdd5 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 8013f82:	1d21      	adds	r1, r4, #4
 8013f84:	4606      	mov	r6, r0
 8013f86:	2202      	movs	r2, #2
 8013f88:	4628      	mov	r0, r5
 8013f8a:	f7fc fdcf 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 8013f8e:	1da1      	adds	r1, r4, #6
 8013f90:	4006      	ands	r6, r0
 8013f92:	2202      	movs	r2, #2
 8013f94:	4628      	mov	r0, r5
 8013f96:	f7fc fdc9 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 8013f9a:	b2f6      	uxtb	r6, r6
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	7a21      	ldrb	r1, [r4, #8]
 8013fa0:	4628      	mov	r0, r5
 8013fa2:	401e      	ands	r6, r3
 8013fa4:	f7fc ffa8 	bl	8010ef8 <ucdr_serialize_bool>
 8013fa8:	7a23      	ldrb	r3, [r4, #8]
 8013faa:	ea00 0706 	and.w	r7, r0, r6
 8013fae:	b913      	cbnz	r3, 8013fb6 <uxr_serialize_AGENT_Representation+0x42>
 8013fb0:	4638      	mov	r0, r7
 8013fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fb6:	68e1      	ldr	r1, [r4, #12]
 8013fb8:	4628      	mov	r0, r5
 8013fba:	f7fd f89d 	bl	80110f8 <ucdr_serialize_uint32_t>
 8013fbe:	68e3      	ldr	r3, [r4, #12]
 8013fc0:	b313      	cbz	r3, 8014008 <uxr_serialize_AGENT_Representation+0x94>
 8013fc2:	b1e8      	cbz	r0, 8014000 <uxr_serialize_AGENT_Representation+0x8c>
 8013fc4:	46a0      	mov	r8, r4
 8013fc6:	f04f 0900 	mov.w	r9, #0
 8013fca:	e002      	b.n	8013fd2 <uxr_serialize_AGENT_Representation+0x5e>
 8013fcc:	f108 0808 	add.w	r8, r8, #8
 8013fd0:	b1b3      	cbz	r3, 8014000 <uxr_serialize_AGENT_Representation+0x8c>
 8013fd2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013fd6:	4628      	mov	r0, r5
 8013fd8:	f003 fe76 	bl	8017cc8 <ucdr_serialize_string>
 8013fdc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013fe0:	4606      	mov	r6, r0
 8013fe2:	4628      	mov	r0, r5
 8013fe4:	f003 fe70 	bl	8017cc8 <ucdr_serialize_string>
 8013fe8:	68e2      	ldr	r2, [r4, #12]
 8013fea:	f109 0901 	add.w	r9, r9, #1
 8013fee:	ea06 0300 	and.w	r3, r6, r0
 8013ff2:	4591      	cmp	r9, r2
 8013ff4:	b2db      	uxtb	r3, r3
 8013ff6:	d3e9      	bcc.n	8013fcc <uxr_serialize_AGENT_Representation+0x58>
 8013ff8:	401f      	ands	r7, r3
 8013ffa:	4638      	mov	r0, r7
 8013ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014000:	2700      	movs	r7, #0
 8014002:	4638      	mov	r0, r7
 8014004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014008:	4007      	ands	r7, r0
 801400a:	e7d1      	b.n	8013fb0 <uxr_serialize_AGENT_Representation+0x3c>

0801400c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801400c:	b570      	push	{r4, r5, r6, lr}
 801400e:	460d      	mov	r5, r1
 8014010:	7809      	ldrb	r1, [r1, #0]
 8014012:	4606      	mov	r6, r0
 8014014:	f7fc ff70 	bl	8010ef8 <ucdr_serialize_bool>
 8014018:	782b      	ldrb	r3, [r5, #0]
 801401a:	4604      	mov	r4, r0
 801401c:	b94b      	cbnz	r3, 8014032 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801401e:	7a29      	ldrb	r1, [r5, #8]
 8014020:	4630      	mov	r0, r6
 8014022:	f7fc ff69 	bl	8010ef8 <ucdr_serialize_bool>
 8014026:	7a2b      	ldrb	r3, [r5, #8]
 8014028:	4004      	ands	r4, r0
 801402a:	b2e4      	uxtb	r4, r4
 801402c:	b943      	cbnz	r3, 8014040 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801402e:	4620      	mov	r0, r4
 8014030:	bd70      	pop	{r4, r5, r6, pc}
 8014032:	6869      	ldr	r1, [r5, #4]
 8014034:	4630      	mov	r0, r6
 8014036:	f003 fe47 	bl	8017cc8 <ucdr_serialize_string>
 801403a:	4004      	ands	r4, r0
 801403c:	b2e4      	uxtb	r4, r4
 801403e:	e7ee      	b.n	801401e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8014040:	68e9      	ldr	r1, [r5, #12]
 8014042:	4630      	mov	r0, r6
 8014044:	f003 fe40 	bl	8017cc8 <ucdr_serialize_string>
 8014048:	4004      	ands	r4, r0
 801404a:	4620      	mov	r0, r4
 801404c:	bd70      	pop	{r4, r5, r6, pc}
 801404e:	bf00      	nop

08014050 <uxr_serialize_OBJK_Topic_Binary>:
 8014050:	b570      	push	{r4, r5, r6, lr}
 8014052:	460d      	mov	r5, r1
 8014054:	6809      	ldr	r1, [r1, #0]
 8014056:	4606      	mov	r6, r0
 8014058:	f003 fe36 	bl	8017cc8 <ucdr_serialize_string>
 801405c:	7929      	ldrb	r1, [r5, #4]
 801405e:	4604      	mov	r4, r0
 8014060:	4630      	mov	r0, r6
 8014062:	f7fc ff49 	bl	8010ef8 <ucdr_serialize_bool>
 8014066:	792b      	ldrb	r3, [r5, #4]
 8014068:	4004      	ands	r4, r0
 801406a:	b2e4      	uxtb	r4, r4
 801406c:	b943      	cbnz	r3, 8014080 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801406e:	7b29      	ldrb	r1, [r5, #12]
 8014070:	4630      	mov	r0, r6
 8014072:	f7fc ff41 	bl	8010ef8 <ucdr_serialize_bool>
 8014076:	7b2b      	ldrb	r3, [r5, #12]
 8014078:	4004      	ands	r4, r0
 801407a:	b93b      	cbnz	r3, 801408c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801407c:	4620      	mov	r0, r4
 801407e:	bd70      	pop	{r4, r5, r6, pc}
 8014080:	68a9      	ldr	r1, [r5, #8]
 8014082:	4630      	mov	r0, r6
 8014084:	f003 fe20 	bl	8017cc8 <ucdr_serialize_string>
 8014088:	4004      	ands	r4, r0
 801408a:	e7f0      	b.n	801406e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801408c:	6929      	ldr	r1, [r5, #16]
 801408e:	4630      	mov	r0, r6
 8014090:	f003 fe1a 	bl	8017cc8 <ucdr_serialize_string>
 8014094:	4004      	ands	r4, r0
 8014096:	b2e4      	uxtb	r4, r4
 8014098:	4620      	mov	r0, r4
 801409a:	bd70      	pop	{r4, r5, r6, pc}

0801409c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801409c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140a0:	460c      	mov	r4, r1
 80140a2:	7809      	ldrb	r1, [r1, #0]
 80140a4:	4606      	mov	r6, r0
 80140a6:	f7fc ff27 	bl	8010ef8 <ucdr_serialize_bool>
 80140aa:	7823      	ldrb	r3, [r4, #0]
 80140ac:	4605      	mov	r5, r0
 80140ae:	b96b      	cbnz	r3, 80140cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80140b0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80140b4:	4630      	mov	r0, r6
 80140b6:	f7fc ff1f 	bl	8010ef8 <ucdr_serialize_bool>
 80140ba:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80140be:	4005      	ands	r5, r0
 80140c0:	b2ed      	uxtb	r5, r5
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d169      	bne.n	801419a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80140c6:	4628      	mov	r0, r5
 80140c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140cc:	6861      	ldr	r1, [r4, #4]
 80140ce:	4630      	mov	r0, r6
 80140d0:	f7fd f812 	bl	80110f8 <ucdr_serialize_uint32_t>
 80140d4:	6863      	ldr	r3, [r4, #4]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d06b      	beq.n	80141b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80140da:	2800      	cmp	r0, #0
 80140dc:	d067      	beq.n	80141ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80140de:	68a1      	ldr	r1, [r4, #8]
 80140e0:	4630      	mov	r0, r6
 80140e2:	f003 fdf1 	bl	8017cc8 <ucdr_serialize_string>
 80140e6:	6863      	ldr	r3, [r4, #4]
 80140e8:	2b01      	cmp	r3, #1
 80140ea:	d953      	bls.n	8014194 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80140ec:	2800      	cmp	r0, #0
 80140ee:	d05e      	beq.n	80141ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80140f0:	68e1      	ldr	r1, [r4, #12]
 80140f2:	4630      	mov	r0, r6
 80140f4:	f003 fde8 	bl	8017cc8 <ucdr_serialize_string>
 80140f8:	6863      	ldr	r3, [r4, #4]
 80140fa:	2b02      	cmp	r3, #2
 80140fc:	d94a      	bls.n	8014194 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80140fe:	2800      	cmp	r0, #0
 8014100:	d055      	beq.n	80141ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014102:	6921      	ldr	r1, [r4, #16]
 8014104:	4630      	mov	r0, r6
 8014106:	f003 fddf 	bl	8017cc8 <ucdr_serialize_string>
 801410a:	6863      	ldr	r3, [r4, #4]
 801410c:	2b03      	cmp	r3, #3
 801410e:	d941      	bls.n	8014194 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014110:	2800      	cmp	r0, #0
 8014112:	d04c      	beq.n	80141ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014114:	6961      	ldr	r1, [r4, #20]
 8014116:	4630      	mov	r0, r6
 8014118:	f003 fdd6 	bl	8017cc8 <ucdr_serialize_string>
 801411c:	6863      	ldr	r3, [r4, #4]
 801411e:	2b04      	cmp	r3, #4
 8014120:	d938      	bls.n	8014194 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014122:	2800      	cmp	r0, #0
 8014124:	d043      	beq.n	80141ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014126:	69a1      	ldr	r1, [r4, #24]
 8014128:	4630      	mov	r0, r6
 801412a:	f003 fdcd 	bl	8017cc8 <ucdr_serialize_string>
 801412e:	6863      	ldr	r3, [r4, #4]
 8014130:	2b05      	cmp	r3, #5
 8014132:	d92f      	bls.n	8014194 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014134:	2800      	cmp	r0, #0
 8014136:	d03a      	beq.n	80141ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014138:	69e1      	ldr	r1, [r4, #28]
 801413a:	4630      	mov	r0, r6
 801413c:	f003 fdc4 	bl	8017cc8 <ucdr_serialize_string>
 8014140:	6863      	ldr	r3, [r4, #4]
 8014142:	2b06      	cmp	r3, #6
 8014144:	d926      	bls.n	8014194 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014146:	b390      	cbz	r0, 80141ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014148:	6a21      	ldr	r1, [r4, #32]
 801414a:	4630      	mov	r0, r6
 801414c:	f003 fdbc 	bl	8017cc8 <ucdr_serialize_string>
 8014150:	6863      	ldr	r3, [r4, #4]
 8014152:	2b07      	cmp	r3, #7
 8014154:	d91e      	bls.n	8014194 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014156:	b350      	cbz	r0, 80141ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014158:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801415a:	4630      	mov	r0, r6
 801415c:	f003 fdb4 	bl	8017cc8 <ucdr_serialize_string>
 8014160:	6863      	ldr	r3, [r4, #4]
 8014162:	2b08      	cmp	r3, #8
 8014164:	d916      	bls.n	8014194 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014166:	b310      	cbz	r0, 80141ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014168:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801416a:	4630      	mov	r0, r6
 801416c:	f003 fdac 	bl	8017cc8 <ucdr_serialize_string>
 8014170:	6863      	ldr	r3, [r4, #4]
 8014172:	2b09      	cmp	r3, #9
 8014174:	d90e      	bls.n	8014194 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014176:	b1d0      	cbz	r0, 80141ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014178:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801417c:	2709      	movs	r7, #9
 801417e:	e000      	b.n	8014182 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8014180:	b1a8      	cbz	r0, 80141ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014182:	f858 1b04 	ldr.w	r1, [r8], #4
 8014186:	4630      	mov	r0, r6
 8014188:	f003 fd9e 	bl	8017cc8 <ucdr_serialize_string>
 801418c:	6862      	ldr	r2, [r4, #4]
 801418e:	3701      	adds	r7, #1
 8014190:	4297      	cmp	r7, r2
 8014192:	d3f5      	bcc.n	8014180 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8014194:	4005      	ands	r5, r0
 8014196:	b2ed      	uxtb	r5, r5
 8014198:	e78a      	b.n	80140b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801419a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801419c:	4630      	mov	r0, r6
 801419e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80141a2:	f7fd fb69 	bl	8011878 <ucdr_serialize_sequence_uint8_t>
 80141a6:	4005      	ands	r5, r0
 80141a8:	4628      	mov	r0, r5
 80141aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141ae:	2500      	movs	r5, #0
 80141b0:	e77e      	b.n	80140b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80141b2:	4028      	ands	r0, r5
 80141b4:	b2c5      	uxtb	r5, r0
 80141b6:	e77b      	b.n	80140b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080141b8 <uxr_serialize_OBJK_Publisher_Binary>:
 80141b8:	b570      	push	{r4, r5, r6, lr}
 80141ba:	460d      	mov	r5, r1
 80141bc:	7809      	ldrb	r1, [r1, #0]
 80141be:	4606      	mov	r6, r0
 80141c0:	f7fc fe9a 	bl	8010ef8 <ucdr_serialize_bool>
 80141c4:	782b      	ldrb	r3, [r5, #0]
 80141c6:	4604      	mov	r4, r0
 80141c8:	b94b      	cbnz	r3, 80141de <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80141ca:	7a29      	ldrb	r1, [r5, #8]
 80141cc:	4630      	mov	r0, r6
 80141ce:	f7fc fe93 	bl	8010ef8 <ucdr_serialize_bool>
 80141d2:	7a2b      	ldrb	r3, [r5, #8]
 80141d4:	4004      	ands	r4, r0
 80141d6:	b2e4      	uxtb	r4, r4
 80141d8:	b943      	cbnz	r3, 80141ec <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80141da:	4620      	mov	r0, r4
 80141dc:	bd70      	pop	{r4, r5, r6, pc}
 80141de:	6869      	ldr	r1, [r5, #4]
 80141e0:	4630      	mov	r0, r6
 80141e2:	f003 fd71 	bl	8017cc8 <ucdr_serialize_string>
 80141e6:	4004      	ands	r4, r0
 80141e8:	b2e4      	uxtb	r4, r4
 80141ea:	e7ee      	b.n	80141ca <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80141ec:	f105 010c 	add.w	r1, r5, #12
 80141f0:	4630      	mov	r0, r6
 80141f2:	f7ff ff53 	bl	801409c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80141f6:	4004      	ands	r4, r0
 80141f8:	4620      	mov	r0, r4
 80141fa:	bd70      	pop	{r4, r5, r6, pc}

080141fc <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 80141fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014200:	460c      	mov	r4, r1
 8014202:	7809      	ldrb	r1, [r1, #0]
 8014204:	4606      	mov	r6, r0
 8014206:	f7fc fe77 	bl	8010ef8 <ucdr_serialize_bool>
 801420a:	7823      	ldrb	r3, [r4, #0]
 801420c:	4605      	mov	r5, r0
 801420e:	b96b      	cbnz	r3, 801422c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8014210:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8014214:	4630      	mov	r0, r6
 8014216:	f7fc fe6f 	bl	8010ef8 <ucdr_serialize_bool>
 801421a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801421e:	4005      	ands	r5, r0
 8014220:	b2ed      	uxtb	r5, r5
 8014222:	2b00      	cmp	r3, #0
 8014224:	d169      	bne.n	80142fa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8014226:	4628      	mov	r0, r5
 8014228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801422c:	6861      	ldr	r1, [r4, #4]
 801422e:	4630      	mov	r0, r6
 8014230:	f7fc ff62 	bl	80110f8 <ucdr_serialize_uint32_t>
 8014234:	6863      	ldr	r3, [r4, #4]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d06b      	beq.n	8014312 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801423a:	2800      	cmp	r0, #0
 801423c:	d067      	beq.n	801430e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801423e:	68a1      	ldr	r1, [r4, #8]
 8014240:	4630      	mov	r0, r6
 8014242:	f003 fd41 	bl	8017cc8 <ucdr_serialize_string>
 8014246:	6863      	ldr	r3, [r4, #4]
 8014248:	2b01      	cmp	r3, #1
 801424a:	d953      	bls.n	80142f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801424c:	2800      	cmp	r0, #0
 801424e:	d05e      	beq.n	801430e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014250:	68e1      	ldr	r1, [r4, #12]
 8014252:	4630      	mov	r0, r6
 8014254:	f003 fd38 	bl	8017cc8 <ucdr_serialize_string>
 8014258:	6863      	ldr	r3, [r4, #4]
 801425a:	2b02      	cmp	r3, #2
 801425c:	d94a      	bls.n	80142f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801425e:	2800      	cmp	r0, #0
 8014260:	d055      	beq.n	801430e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014262:	6921      	ldr	r1, [r4, #16]
 8014264:	4630      	mov	r0, r6
 8014266:	f003 fd2f 	bl	8017cc8 <ucdr_serialize_string>
 801426a:	6863      	ldr	r3, [r4, #4]
 801426c:	2b03      	cmp	r3, #3
 801426e:	d941      	bls.n	80142f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014270:	2800      	cmp	r0, #0
 8014272:	d04c      	beq.n	801430e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014274:	6961      	ldr	r1, [r4, #20]
 8014276:	4630      	mov	r0, r6
 8014278:	f003 fd26 	bl	8017cc8 <ucdr_serialize_string>
 801427c:	6863      	ldr	r3, [r4, #4]
 801427e:	2b04      	cmp	r3, #4
 8014280:	d938      	bls.n	80142f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014282:	2800      	cmp	r0, #0
 8014284:	d043      	beq.n	801430e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014286:	69a1      	ldr	r1, [r4, #24]
 8014288:	4630      	mov	r0, r6
 801428a:	f003 fd1d 	bl	8017cc8 <ucdr_serialize_string>
 801428e:	6863      	ldr	r3, [r4, #4]
 8014290:	2b05      	cmp	r3, #5
 8014292:	d92f      	bls.n	80142f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014294:	2800      	cmp	r0, #0
 8014296:	d03a      	beq.n	801430e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014298:	69e1      	ldr	r1, [r4, #28]
 801429a:	4630      	mov	r0, r6
 801429c:	f003 fd14 	bl	8017cc8 <ucdr_serialize_string>
 80142a0:	6863      	ldr	r3, [r4, #4]
 80142a2:	2b06      	cmp	r3, #6
 80142a4:	d926      	bls.n	80142f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80142a6:	b390      	cbz	r0, 801430e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80142a8:	6a21      	ldr	r1, [r4, #32]
 80142aa:	4630      	mov	r0, r6
 80142ac:	f003 fd0c 	bl	8017cc8 <ucdr_serialize_string>
 80142b0:	6863      	ldr	r3, [r4, #4]
 80142b2:	2b07      	cmp	r3, #7
 80142b4:	d91e      	bls.n	80142f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80142b6:	b350      	cbz	r0, 801430e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80142b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80142ba:	4630      	mov	r0, r6
 80142bc:	f003 fd04 	bl	8017cc8 <ucdr_serialize_string>
 80142c0:	6863      	ldr	r3, [r4, #4]
 80142c2:	2b08      	cmp	r3, #8
 80142c4:	d916      	bls.n	80142f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80142c6:	b310      	cbz	r0, 801430e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80142c8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80142ca:	4630      	mov	r0, r6
 80142cc:	f003 fcfc 	bl	8017cc8 <ucdr_serialize_string>
 80142d0:	6863      	ldr	r3, [r4, #4]
 80142d2:	2b09      	cmp	r3, #9
 80142d4:	d90e      	bls.n	80142f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80142d6:	b1d0      	cbz	r0, 801430e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80142d8:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 80142dc:	2709      	movs	r7, #9
 80142de:	e000      	b.n	80142e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80142e0:	b1a8      	cbz	r0, 801430e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80142e2:	f858 1b04 	ldr.w	r1, [r8], #4
 80142e6:	4630      	mov	r0, r6
 80142e8:	f003 fcee 	bl	8017cc8 <ucdr_serialize_string>
 80142ec:	6862      	ldr	r2, [r4, #4]
 80142ee:	3701      	adds	r7, #1
 80142f0:	4297      	cmp	r7, r2
 80142f2:	d3f5      	bcc.n	80142e0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80142f4:	4005      	ands	r5, r0
 80142f6:	b2ed      	uxtb	r5, r5
 80142f8:	e78a      	b.n	8014210 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80142fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80142fc:	4630      	mov	r0, r6
 80142fe:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014302:	f7fd fab9 	bl	8011878 <ucdr_serialize_sequence_uint8_t>
 8014306:	4005      	ands	r5, r0
 8014308:	4628      	mov	r0, r5
 801430a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801430e:	2500      	movs	r5, #0
 8014310:	e77e      	b.n	8014210 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8014312:	4028      	ands	r0, r5
 8014314:	b2c5      	uxtb	r5, r0
 8014316:	e77b      	b.n	8014210 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08014318 <uxr_serialize_OBJK_Subscriber_Binary>:
 8014318:	b570      	push	{r4, r5, r6, lr}
 801431a:	460d      	mov	r5, r1
 801431c:	7809      	ldrb	r1, [r1, #0]
 801431e:	4606      	mov	r6, r0
 8014320:	f7fc fdea 	bl	8010ef8 <ucdr_serialize_bool>
 8014324:	782b      	ldrb	r3, [r5, #0]
 8014326:	4604      	mov	r4, r0
 8014328:	b94b      	cbnz	r3, 801433e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801432a:	7a29      	ldrb	r1, [r5, #8]
 801432c:	4630      	mov	r0, r6
 801432e:	f7fc fde3 	bl	8010ef8 <ucdr_serialize_bool>
 8014332:	7a2b      	ldrb	r3, [r5, #8]
 8014334:	4004      	ands	r4, r0
 8014336:	b2e4      	uxtb	r4, r4
 8014338:	b943      	cbnz	r3, 801434c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801433a:	4620      	mov	r0, r4
 801433c:	bd70      	pop	{r4, r5, r6, pc}
 801433e:	6869      	ldr	r1, [r5, #4]
 8014340:	4630      	mov	r0, r6
 8014342:	f003 fcc1 	bl	8017cc8 <ucdr_serialize_string>
 8014346:	4004      	ands	r4, r0
 8014348:	b2e4      	uxtb	r4, r4
 801434a:	e7ee      	b.n	801432a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801434c:	f105 010c 	add.w	r1, r5, #12
 8014350:	4630      	mov	r0, r6
 8014352:	f7ff ff53 	bl	80141fc <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8014356:	4004      	ands	r4, r0
 8014358:	4620      	mov	r0, r4
 801435a:	bd70      	pop	{r4, r5, r6, pc}

0801435c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801435c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8014360:	4688      	mov	r8, r1
 8014362:	8809      	ldrh	r1, [r1, #0]
 8014364:	4681      	mov	r9, r0
 8014366:	f7fc fe23 	bl	8010fb0 <ucdr_serialize_uint16_t>
 801436a:	f898 1002 	ldrb.w	r1, [r8, #2]
 801436e:	4606      	mov	r6, r0
 8014370:	4648      	mov	r0, r9
 8014372:	f7fc fdc1 	bl	8010ef8 <ucdr_serialize_bool>
 8014376:	f898 3002 	ldrb.w	r3, [r8, #2]
 801437a:	4030      	ands	r0, r6
 801437c:	b2c5      	uxtb	r5, r0
 801437e:	b9eb      	cbnz	r3, 80143bc <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8014380:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014384:	4648      	mov	r0, r9
 8014386:	f7fc fdb7 	bl	8010ef8 <ucdr_serialize_bool>
 801438a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801438e:	4005      	ands	r5, r0
 8014390:	bb7b      	cbnz	r3, 80143f2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8014392:	f898 100c 	ldrb.w	r1, [r8, #12]
 8014396:	4648      	mov	r0, r9
 8014398:	f7fc fdae 	bl	8010ef8 <ucdr_serialize_bool>
 801439c:	f898 300c 	ldrb.w	r3, [r8, #12]
 80143a0:	4005      	ands	r5, r0
 80143a2:	b9f3      	cbnz	r3, 80143e2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80143a4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80143a8:	4648      	mov	r0, r9
 80143aa:	f7fc fda5 	bl	8010ef8 <ucdr_serialize_bool>
 80143ae:	f898 3014 	ldrb.w	r3, [r8, #20]
 80143b2:	4005      	ands	r5, r0
 80143b4:	b94b      	cbnz	r3, 80143ca <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80143b6:	4628      	mov	r0, r5
 80143b8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80143bc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80143c0:	4648      	mov	r0, r9
 80143c2:	f7fc fdf5 	bl	8010fb0 <ucdr_serialize_uint16_t>
 80143c6:	4005      	ands	r5, r0
 80143c8:	e7da      	b.n	8014380 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80143ca:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80143ce:	4648      	mov	r0, r9
 80143d0:	f108 011c 	add.w	r1, r8, #28
 80143d4:	f7fd fa50 	bl	8011878 <ucdr_serialize_sequence_uint8_t>
 80143d8:	4028      	ands	r0, r5
 80143da:	b2c5      	uxtb	r5, r0
 80143dc:	4628      	mov	r0, r5
 80143de:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80143e2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80143e6:	4648      	mov	r0, r9
 80143e8:	f7fc fe86 	bl	80110f8 <ucdr_serialize_uint32_t>
 80143ec:	4028      	ands	r0, r5
 80143ee:	b2c5      	uxtb	r5, r0
 80143f0:	e7d8      	b.n	80143a4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80143f2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80143f6:	4648      	mov	r0, r9
 80143f8:	f7fc fe7e 	bl	80110f8 <ucdr_serialize_uint32_t>
 80143fc:	4028      	ands	r0, r5
 80143fe:	b2c5      	uxtb	r5, r0
 8014400:	e7c7      	b.n	8014392 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8014402:	bf00      	nop

08014404 <uxr_serialize_OBJK_DataReader_Binary>:
 8014404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014406:	2202      	movs	r2, #2
 8014408:	460c      	mov	r4, r1
 801440a:	4606      	mov	r6, r0
 801440c:	f7fc fb8e 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 8014410:	78a1      	ldrb	r1, [r4, #2]
 8014412:	4605      	mov	r5, r0
 8014414:	4630      	mov	r0, r6
 8014416:	f7fc fd6f 	bl	8010ef8 <ucdr_serialize_bool>
 801441a:	78a3      	ldrb	r3, [r4, #2]
 801441c:	4005      	ands	r5, r0
 801441e:	b2ed      	uxtb	r5, r5
 8014420:	b90b      	cbnz	r3, 8014426 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8014422:	4628      	mov	r0, r5
 8014424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014426:	f104 0108 	add.w	r1, r4, #8
 801442a:	4630      	mov	r0, r6
 801442c:	f7ff ff96 	bl	801435c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014430:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014434:	4607      	mov	r7, r0
 8014436:	4630      	mov	r0, r6
 8014438:	f7fc fd5e 	bl	8010ef8 <ucdr_serialize_bool>
 801443c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014440:	4038      	ands	r0, r7
 8014442:	b2c7      	uxtb	r7, r0
 8014444:	b95b      	cbnz	r3, 801445e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8014446:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801444a:	4630      	mov	r0, r6
 801444c:	f7fc fd54 	bl	8010ef8 <ucdr_serialize_bool>
 8014450:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014454:	4007      	ands	r7, r0
 8014456:	b94b      	cbnz	r3, 801446c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8014458:	403d      	ands	r5, r7
 801445a:	4628      	mov	r0, r5
 801445c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801445e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8014462:	4630      	mov	r0, r6
 8014464:	f7fc ff08 	bl	8011278 <ucdr_serialize_uint64_t>
 8014468:	4007      	ands	r7, r0
 801446a:	e7ec      	b.n	8014446 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801446c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801446e:	4630      	mov	r0, r6
 8014470:	f003 fc2a 	bl	8017cc8 <ucdr_serialize_string>
 8014474:	4007      	ands	r7, r0
 8014476:	b2ff      	uxtb	r7, r7
 8014478:	e7ee      	b.n	8014458 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801447a:	bf00      	nop

0801447c <uxr_serialize_OBJK_DataWriter_Binary>:
 801447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801447e:	2202      	movs	r2, #2
 8014480:	460d      	mov	r5, r1
 8014482:	4606      	mov	r6, r0
 8014484:	f7fc fb52 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 8014488:	78a9      	ldrb	r1, [r5, #2]
 801448a:	4604      	mov	r4, r0
 801448c:	4630      	mov	r0, r6
 801448e:	f7fc fd33 	bl	8010ef8 <ucdr_serialize_bool>
 8014492:	78ab      	ldrb	r3, [r5, #2]
 8014494:	4004      	ands	r4, r0
 8014496:	b2e4      	uxtb	r4, r4
 8014498:	b90b      	cbnz	r3, 801449e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801449a:	4620      	mov	r0, r4
 801449c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801449e:	f105 0108 	add.w	r1, r5, #8
 80144a2:	4630      	mov	r0, r6
 80144a4:	f7ff ff5a 	bl	801435c <uxr_serialize_OBJK_Endpoint_QosBinary>
 80144a8:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 80144ac:	4607      	mov	r7, r0
 80144ae:	4630      	mov	r0, r6
 80144b0:	f7fc fd22 	bl	8010ef8 <ucdr_serialize_bool>
 80144b4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80144b8:	4007      	ands	r7, r0
 80144ba:	b2ff      	uxtb	r7, r7
 80144bc:	b913      	cbnz	r3, 80144c4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80144be:	403c      	ands	r4, r7
 80144c0:	4620      	mov	r0, r4
 80144c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144c4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 80144c8:	4630      	mov	r0, r6
 80144ca:	f7fc fed5 	bl	8011278 <ucdr_serialize_uint64_t>
 80144ce:	4007      	ands	r7, r0
 80144d0:	e7f5      	b.n	80144be <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80144d2:	bf00      	nop

080144d4 <uxr_deserialize_BaseObjectRequest>:
 80144d4:	b570      	push	{r4, r5, r6, lr}
 80144d6:	2202      	movs	r2, #2
 80144d8:	4605      	mov	r5, r0
 80144da:	460e      	mov	r6, r1
 80144dc:	f7fc fb8a 	bl	8010bf4 <ucdr_deserialize_array_uint8_t>
 80144e0:	1cb1      	adds	r1, r6, #2
 80144e2:	4604      	mov	r4, r0
 80144e4:	2202      	movs	r2, #2
 80144e6:	4628      	mov	r0, r5
 80144e8:	f7fc fb84 	bl	8010bf4 <ucdr_deserialize_array_uint8_t>
 80144ec:	4020      	ands	r0, r4
 80144ee:	b2c0      	uxtb	r0, r0
 80144f0:	bd70      	pop	{r4, r5, r6, pc}
 80144f2:	bf00      	nop

080144f4 <uxr_serialize_ReadSpecification>:
 80144f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144f8:	460e      	mov	r6, r1
 80144fa:	7809      	ldrb	r1, [r1, #0]
 80144fc:	4607      	mov	r7, r0
 80144fe:	f7fc fd2b 	bl	8010f58 <ucdr_serialize_uint8_t>
 8014502:	7871      	ldrb	r1, [r6, #1]
 8014504:	4604      	mov	r4, r0
 8014506:	4638      	mov	r0, r7
 8014508:	f7fc fd26 	bl	8010f58 <ucdr_serialize_uint8_t>
 801450c:	78b1      	ldrb	r1, [r6, #2]
 801450e:	4004      	ands	r4, r0
 8014510:	4638      	mov	r0, r7
 8014512:	f7fc fcf1 	bl	8010ef8 <ucdr_serialize_bool>
 8014516:	78b3      	ldrb	r3, [r6, #2]
 8014518:	b2e4      	uxtb	r4, r4
 801451a:	4004      	ands	r4, r0
 801451c:	b94b      	cbnz	r3, 8014532 <uxr_serialize_ReadSpecification+0x3e>
 801451e:	7a31      	ldrb	r1, [r6, #8]
 8014520:	4638      	mov	r0, r7
 8014522:	f7fc fce9 	bl	8010ef8 <ucdr_serialize_bool>
 8014526:	7a33      	ldrb	r3, [r6, #8]
 8014528:	4004      	ands	r4, r0
 801452a:	b943      	cbnz	r3, 801453e <uxr_serialize_ReadSpecification+0x4a>
 801452c:	4620      	mov	r0, r4
 801452e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014532:	6871      	ldr	r1, [r6, #4]
 8014534:	4638      	mov	r0, r7
 8014536:	f003 fbc7 	bl	8017cc8 <ucdr_serialize_string>
 801453a:	4004      	ands	r4, r0
 801453c:	e7ef      	b.n	801451e <uxr_serialize_ReadSpecification+0x2a>
 801453e:	8971      	ldrh	r1, [r6, #10]
 8014540:	4638      	mov	r0, r7
 8014542:	f7fc fd35 	bl	8010fb0 <ucdr_serialize_uint16_t>
 8014546:	89b1      	ldrh	r1, [r6, #12]
 8014548:	4605      	mov	r5, r0
 801454a:	4638      	mov	r0, r7
 801454c:	f7fc fd30 	bl	8010fb0 <ucdr_serialize_uint16_t>
 8014550:	89f1      	ldrh	r1, [r6, #14]
 8014552:	4005      	ands	r5, r0
 8014554:	4638      	mov	r0, r7
 8014556:	f7fc fd2b 	bl	8010fb0 <ucdr_serialize_uint16_t>
 801455a:	8a31      	ldrh	r1, [r6, #16]
 801455c:	4680      	mov	r8, r0
 801455e:	4638      	mov	r0, r7
 8014560:	f7fc fd26 	bl	8010fb0 <ucdr_serialize_uint16_t>
 8014564:	b2ed      	uxtb	r5, r5
 8014566:	4025      	ands	r5, r4
 8014568:	ea08 0505 	and.w	r5, r8, r5
 801456c:	ea00 0405 	and.w	r4, r0, r5
 8014570:	4620      	mov	r0, r4
 8014572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014576:	bf00      	nop

08014578 <uxr_serialize_CREATE_CLIENT_Payload>:
 8014578:	f7ff bca0 	b.w	8013ebc <uxr_serialize_CLIENT_Representation>

0801457c <uxr_serialize_CREATE_Payload>:
 801457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801457e:	2202      	movs	r2, #2
 8014580:	4606      	mov	r6, r0
 8014582:	460d      	mov	r5, r1
 8014584:	f7fc fad2 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 8014588:	1ca9      	adds	r1, r5, #2
 801458a:	4604      	mov	r4, r0
 801458c:	2202      	movs	r2, #2
 801458e:	4630      	mov	r0, r6
 8014590:	f7fc facc 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 8014594:	7929      	ldrb	r1, [r5, #4]
 8014596:	4607      	mov	r7, r0
 8014598:	4630      	mov	r0, r6
 801459a:	f7fc fcdd 	bl	8010f58 <ucdr_serialize_uint8_t>
 801459e:	b328      	cbz	r0, 80145ec <uxr_serialize_CREATE_Payload+0x70>
 80145a0:	792b      	ldrb	r3, [r5, #4]
 80145a2:	403c      	ands	r4, r7
 80145a4:	3b01      	subs	r3, #1
 80145a6:	b2e4      	uxtb	r4, r4
 80145a8:	2b0d      	cmp	r3, #13
 80145aa:	d81d      	bhi.n	80145e8 <uxr_serialize_CREATE_Payload+0x6c>
 80145ac:	e8df f003 	tbb	[pc, r3]
 80145b0:	32320753 	.word	0x32320753
 80145b4:	07070707 	.word	0x07070707
 80145b8:	2121211c 	.word	0x2121211c
 80145bc:	684c      	.short	0x684c
 80145be:	7a29      	ldrb	r1, [r5, #8]
 80145c0:	4630      	mov	r0, r6
 80145c2:	f7fc fcc9 	bl	8010f58 <ucdr_serialize_uint8_t>
 80145c6:	4607      	mov	r7, r0
 80145c8:	b130      	cbz	r0, 80145d8 <uxr_serialize_CREATE_Payload+0x5c>
 80145ca:	7a2b      	ldrb	r3, [r5, #8]
 80145cc:	2b02      	cmp	r3, #2
 80145ce:	d035      	beq.n	801463c <uxr_serialize_CREATE_Payload+0xc0>
 80145d0:	2b03      	cmp	r3, #3
 80145d2:	d02b      	beq.n	801462c <uxr_serialize_CREATE_Payload+0xb0>
 80145d4:	2b01      	cmp	r3, #1
 80145d6:	d031      	beq.n	801463c <uxr_serialize_CREATE_Payload+0xc0>
 80145d8:	f505 7104 	add.w	r1, r5, #528	; 0x210
 80145dc:	4630      	mov	r0, r6
 80145de:	2202      	movs	r2, #2
 80145e0:	f7fc faa4 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 80145e4:	4038      	ands	r0, r7
 80145e6:	4004      	ands	r4, r0
 80145e8:	4620      	mov	r0, r4
 80145ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145ec:	2400      	movs	r4, #0
 80145ee:	4620      	mov	r0, r4
 80145f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145f2:	7a29      	ldrb	r1, [r5, #8]
 80145f4:	4630      	mov	r0, r6
 80145f6:	f7fc fcaf 	bl	8010f58 <ucdr_serialize_uint8_t>
 80145fa:	2800      	cmp	r0, #0
 80145fc:	d0f6      	beq.n	80145ec <uxr_serialize_CREATE_Payload+0x70>
 80145fe:	7a2b      	ldrb	r3, [r5, #8]
 8014600:	2b01      	cmp	r3, #1
 8014602:	d001      	beq.n	8014608 <uxr_serialize_CREATE_Payload+0x8c>
 8014604:	2b02      	cmp	r3, #2
 8014606:	d1ef      	bne.n	80145e8 <uxr_serialize_CREATE_Payload+0x6c>
 8014608:	68e9      	ldr	r1, [r5, #12]
 801460a:	4630      	mov	r0, r6
 801460c:	f003 fb5c 	bl	8017cc8 <ucdr_serialize_string>
 8014610:	4004      	ands	r4, r0
 8014612:	e7e9      	b.n	80145e8 <uxr_serialize_CREATE_Payload+0x6c>
 8014614:	7a29      	ldrb	r1, [r5, #8]
 8014616:	4630      	mov	r0, r6
 8014618:	f7fc fc9e 	bl	8010f58 <ucdr_serialize_uint8_t>
 801461c:	4607      	mov	r7, r0
 801461e:	2800      	cmp	r0, #0
 8014620:	d0da      	beq.n	80145d8 <uxr_serialize_CREATE_Payload+0x5c>
 8014622:	7a2b      	ldrb	r3, [r5, #8]
 8014624:	2b02      	cmp	r3, #2
 8014626:	d009      	beq.n	801463c <uxr_serialize_CREATE_Payload+0xc0>
 8014628:	2b03      	cmp	r3, #3
 801462a:	d1d5      	bne.n	80145d8 <uxr_serialize_CREATE_Payload+0x5c>
 801462c:	68ea      	ldr	r2, [r5, #12]
 801462e:	f105 0110 	add.w	r1, r5, #16
 8014632:	4630      	mov	r0, r6
 8014634:	f7fd f920 	bl	8011878 <ucdr_serialize_sequence_uint8_t>
 8014638:	4607      	mov	r7, r0
 801463a:	e7cd      	b.n	80145d8 <uxr_serialize_CREATE_Payload+0x5c>
 801463c:	68e9      	ldr	r1, [r5, #12]
 801463e:	4630      	mov	r0, r6
 8014640:	f003 fb42 	bl	8017cc8 <ucdr_serialize_string>
 8014644:	4607      	mov	r7, r0
 8014646:	e7c7      	b.n	80145d8 <uxr_serialize_CREATE_Payload+0x5c>
 8014648:	f105 0108 	add.w	r1, r5, #8
 801464c:	4630      	mov	r0, r6
 801464e:	f7ff fc91 	bl	8013f74 <uxr_serialize_AGENT_Representation>
 8014652:	4004      	ands	r4, r0
 8014654:	e7c8      	b.n	80145e8 <uxr_serialize_CREATE_Payload+0x6c>
 8014656:	7a29      	ldrb	r1, [r5, #8]
 8014658:	4630      	mov	r0, r6
 801465a:	f7fc fc7d 	bl	8010f58 <ucdr_serialize_uint8_t>
 801465e:	4607      	mov	r7, r0
 8014660:	b130      	cbz	r0, 8014670 <uxr_serialize_CREATE_Payload+0xf4>
 8014662:	7a2b      	ldrb	r3, [r5, #8]
 8014664:	2b02      	cmp	r3, #2
 8014666:	d012      	beq.n	801468e <uxr_serialize_CREATE_Payload+0x112>
 8014668:	2b03      	cmp	r3, #3
 801466a:	d016      	beq.n	801469a <uxr_serialize_CREATE_Payload+0x11e>
 801466c:	2b01      	cmp	r3, #1
 801466e:	d00e      	beq.n	801468e <uxr_serialize_CREATE_Payload+0x112>
 8014670:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 8014674:	4630      	mov	r0, r6
 8014676:	f7fc fe75 	bl	8011364 <ucdr_serialize_int16_t>
 801467a:	4038      	ands	r0, r7
 801467c:	4004      	ands	r4, r0
 801467e:	e7b3      	b.n	80145e8 <uxr_serialize_CREATE_Payload+0x6c>
 8014680:	f105 0108 	add.w	r1, r5, #8
 8014684:	4630      	mov	r0, r6
 8014686:	f7ff fc19 	bl	8013ebc <uxr_serialize_CLIENT_Representation>
 801468a:	4004      	ands	r4, r0
 801468c:	e7ac      	b.n	80145e8 <uxr_serialize_CREATE_Payload+0x6c>
 801468e:	68e9      	ldr	r1, [r5, #12]
 8014690:	4630      	mov	r0, r6
 8014692:	f003 fb19 	bl	8017cc8 <ucdr_serialize_string>
 8014696:	4607      	mov	r7, r0
 8014698:	e7ea      	b.n	8014670 <uxr_serialize_CREATE_Payload+0xf4>
 801469a:	68ea      	ldr	r2, [r5, #12]
 801469c:	f105 0110 	add.w	r1, r5, #16
 80146a0:	4630      	mov	r0, r6
 80146a2:	f7fd f8e9 	bl	8011878 <ucdr_serialize_sequence_uint8_t>
 80146a6:	4607      	mov	r7, r0
 80146a8:	e7e2      	b.n	8014670 <uxr_serialize_CREATE_Payload+0xf4>
 80146aa:	bf00      	nop

080146ac <uxr_serialize_DELETE_Payload>:
 80146ac:	b570      	push	{r4, r5, r6, lr}
 80146ae:	2202      	movs	r2, #2
 80146b0:	4605      	mov	r5, r0
 80146b2:	460e      	mov	r6, r1
 80146b4:	f7fc fa3a 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 80146b8:	1cb1      	adds	r1, r6, #2
 80146ba:	4604      	mov	r4, r0
 80146bc:	2202      	movs	r2, #2
 80146be:	4628      	mov	r0, r5
 80146c0:	f7fc fa34 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 80146c4:	4020      	ands	r0, r4
 80146c6:	b2c0      	uxtb	r0, r0
 80146c8:	bd70      	pop	{r4, r5, r6, pc}
 80146ca:	bf00      	nop

080146cc <uxr_deserialize_STATUS_AGENT_Payload>:
 80146cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146d0:	4606      	mov	r6, r0
 80146d2:	460f      	mov	r7, r1
 80146d4:	f7fc fc56 	bl	8010f84 <ucdr_deserialize_uint8_t>
 80146d8:	1c79      	adds	r1, r7, #1
 80146da:	4605      	mov	r5, r0
 80146dc:	4630      	mov	r0, r6
 80146de:	f7fc fc51 	bl	8010f84 <ucdr_deserialize_uint8_t>
 80146e2:	1d39      	adds	r1, r7, #4
 80146e4:	4681      	mov	r9, r0
 80146e6:	2204      	movs	r2, #4
 80146e8:	4630      	mov	r0, r6
 80146ea:	f7fc fa83 	bl	8010bf4 <ucdr_deserialize_array_uint8_t>
 80146ee:	f107 0108 	add.w	r1, r7, #8
 80146f2:	4604      	mov	r4, r0
 80146f4:	2202      	movs	r2, #2
 80146f6:	4630      	mov	r0, r6
 80146f8:	f7fc fa7c 	bl	8010bf4 <ucdr_deserialize_array_uint8_t>
 80146fc:	f107 010a 	add.w	r1, r7, #10
 8014700:	4680      	mov	r8, r0
 8014702:	2202      	movs	r2, #2
 8014704:	4630      	mov	r0, r6
 8014706:	f7fc fa75 	bl	8010bf4 <ucdr_deserialize_array_uint8_t>
 801470a:	ea05 0509 	and.w	r5, r5, r9
 801470e:	b2ed      	uxtb	r5, r5
 8014710:	402c      	ands	r4, r5
 8014712:	f107 010c 	add.w	r1, r7, #12
 8014716:	4605      	mov	r5, r0
 8014718:	4630      	mov	r0, r6
 801471a:	f7fc fc03 	bl	8010f24 <ucdr_deserialize_bool>
 801471e:	ea08 0404 	and.w	r4, r8, r4
 8014722:	4025      	ands	r5, r4
 8014724:	4028      	ands	r0, r5
 8014726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801472a:	bf00      	nop

0801472c <uxr_deserialize_STATUS_Payload>:
 801472c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014730:	2202      	movs	r2, #2
 8014732:	4606      	mov	r6, r0
 8014734:	460f      	mov	r7, r1
 8014736:	f7fc fa5d 	bl	8010bf4 <ucdr_deserialize_array_uint8_t>
 801473a:	2202      	movs	r2, #2
 801473c:	1cb9      	adds	r1, r7, #2
 801473e:	4605      	mov	r5, r0
 8014740:	4630      	mov	r0, r6
 8014742:	f7fc fa57 	bl	8010bf4 <ucdr_deserialize_array_uint8_t>
 8014746:	1d39      	adds	r1, r7, #4
 8014748:	4680      	mov	r8, r0
 801474a:	4630      	mov	r0, r6
 801474c:	f7fc fc1a 	bl	8010f84 <ucdr_deserialize_uint8_t>
 8014750:	1d79      	adds	r1, r7, #5
 8014752:	4604      	mov	r4, r0
 8014754:	4630      	mov	r0, r6
 8014756:	f7fc fc15 	bl	8010f84 <ucdr_deserialize_uint8_t>
 801475a:	ea05 0508 	and.w	r5, r5, r8
 801475e:	402c      	ands	r4, r5
 8014760:	4020      	ands	r0, r4
 8014762:	b2c0      	uxtb	r0, r0
 8014764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014768 <uxr_serialize_READ_DATA_Payload>:
 8014768:	b570      	push	{r4, r5, r6, lr}
 801476a:	2202      	movs	r2, #2
 801476c:	4605      	mov	r5, r0
 801476e:	460e      	mov	r6, r1
 8014770:	f7fc f9dc 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 8014774:	1cb1      	adds	r1, r6, #2
 8014776:	2202      	movs	r2, #2
 8014778:	4604      	mov	r4, r0
 801477a:	4628      	mov	r0, r5
 801477c:	f7fc f9d6 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 8014780:	1d31      	adds	r1, r6, #4
 8014782:	4004      	ands	r4, r0
 8014784:	4628      	mov	r0, r5
 8014786:	f7ff feb5 	bl	80144f4 <uxr_serialize_ReadSpecification>
 801478a:	b2e4      	uxtb	r4, r4
 801478c:	4020      	ands	r0, r4
 801478e:	bd70      	pop	{r4, r5, r6, pc}

08014790 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8014790:	b570      	push	{r4, r5, r6, lr}
 8014792:	2202      	movs	r2, #2
 8014794:	4605      	mov	r5, r0
 8014796:	460e      	mov	r6, r1
 8014798:	f7fc f9c8 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 801479c:	1cb1      	adds	r1, r6, #2
 801479e:	4604      	mov	r4, r0
 80147a0:	2202      	movs	r2, #2
 80147a2:	4628      	mov	r0, r5
 80147a4:	f7fc f9c2 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 80147a8:	4020      	ands	r0, r4
 80147aa:	b2c0      	uxtb	r0, r0
 80147ac:	bd70      	pop	{r4, r5, r6, pc}
 80147ae:	bf00      	nop

080147b0 <uxr_serialize_ACKNACK_Payload>:
 80147b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147b2:	460f      	mov	r7, r1
 80147b4:	460e      	mov	r6, r1
 80147b6:	f837 1b02 	ldrh.w	r1, [r7], #2
 80147ba:	4605      	mov	r5, r0
 80147bc:	f7fc fbf8 	bl	8010fb0 <ucdr_serialize_uint16_t>
 80147c0:	4639      	mov	r1, r7
 80147c2:	2202      	movs	r2, #2
 80147c4:	4604      	mov	r4, r0
 80147c6:	4628      	mov	r0, r5
 80147c8:	f7fc f9b0 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 80147cc:	7931      	ldrb	r1, [r6, #4]
 80147ce:	4004      	ands	r4, r0
 80147d0:	4628      	mov	r0, r5
 80147d2:	f7fc fbc1 	bl	8010f58 <ucdr_serialize_uint8_t>
 80147d6:	b2e4      	uxtb	r4, r4
 80147d8:	4020      	ands	r0, r4
 80147da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080147dc <uxr_deserialize_ACKNACK_Payload>:
 80147dc:	b570      	push	{r4, r5, r6, lr}
 80147de:	4605      	mov	r5, r0
 80147e0:	460e      	mov	r6, r1
 80147e2:	f7fc fc35 	bl	8011050 <ucdr_deserialize_uint16_t>
 80147e6:	1cb1      	adds	r1, r6, #2
 80147e8:	2202      	movs	r2, #2
 80147ea:	4604      	mov	r4, r0
 80147ec:	4628      	mov	r0, r5
 80147ee:	f7fc fa01 	bl	8010bf4 <ucdr_deserialize_array_uint8_t>
 80147f2:	1d31      	adds	r1, r6, #4
 80147f4:	4004      	ands	r4, r0
 80147f6:	4628      	mov	r0, r5
 80147f8:	f7fc fbc4 	bl	8010f84 <ucdr_deserialize_uint8_t>
 80147fc:	b2e4      	uxtb	r4, r4
 80147fe:	4020      	ands	r0, r4
 8014800:	bd70      	pop	{r4, r5, r6, pc}
 8014802:	bf00      	nop

08014804 <uxr_serialize_HEARTBEAT_Payload>:
 8014804:	b570      	push	{r4, r5, r6, lr}
 8014806:	460d      	mov	r5, r1
 8014808:	8809      	ldrh	r1, [r1, #0]
 801480a:	4606      	mov	r6, r0
 801480c:	f7fc fbd0 	bl	8010fb0 <ucdr_serialize_uint16_t>
 8014810:	8869      	ldrh	r1, [r5, #2]
 8014812:	4604      	mov	r4, r0
 8014814:	4630      	mov	r0, r6
 8014816:	f7fc fbcb 	bl	8010fb0 <ucdr_serialize_uint16_t>
 801481a:	7929      	ldrb	r1, [r5, #4]
 801481c:	4004      	ands	r4, r0
 801481e:	4630      	mov	r0, r6
 8014820:	f7fc fb9a 	bl	8010f58 <ucdr_serialize_uint8_t>
 8014824:	b2e4      	uxtb	r4, r4
 8014826:	4020      	ands	r0, r4
 8014828:	bd70      	pop	{r4, r5, r6, pc}
 801482a:	bf00      	nop

0801482c <uxr_deserialize_HEARTBEAT_Payload>:
 801482c:	b570      	push	{r4, r5, r6, lr}
 801482e:	4605      	mov	r5, r0
 8014830:	460e      	mov	r6, r1
 8014832:	f7fc fc0d 	bl	8011050 <ucdr_deserialize_uint16_t>
 8014836:	1cb1      	adds	r1, r6, #2
 8014838:	4604      	mov	r4, r0
 801483a:	4628      	mov	r0, r5
 801483c:	f7fc fc08 	bl	8011050 <ucdr_deserialize_uint16_t>
 8014840:	1d31      	adds	r1, r6, #4
 8014842:	4004      	ands	r4, r0
 8014844:	4628      	mov	r0, r5
 8014846:	f7fc fb9d 	bl	8010f84 <ucdr_deserialize_uint8_t>
 801484a:	b2e4      	uxtb	r4, r4
 801484c:	4020      	ands	r0, r4
 801484e:	bd70      	pop	{r4, r5, r6, pc}

08014850 <uxr_serialize_TIMESTAMP_Payload>:
 8014850:	b570      	push	{r4, r5, r6, lr}
 8014852:	460d      	mov	r5, r1
 8014854:	6809      	ldr	r1, [r1, #0]
 8014856:	4606      	mov	r6, r0
 8014858:	f7fc fdac 	bl	80113b4 <ucdr_serialize_int32_t>
 801485c:	6869      	ldr	r1, [r5, #4]
 801485e:	4604      	mov	r4, r0
 8014860:	4630      	mov	r0, r6
 8014862:	f7fc fc49 	bl	80110f8 <ucdr_serialize_uint32_t>
 8014866:	4020      	ands	r0, r4
 8014868:	b2c0      	uxtb	r0, r0
 801486a:	bd70      	pop	{r4, r5, r6, pc}

0801486c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801486c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014870:	4605      	mov	r5, r0
 8014872:	460e      	mov	r6, r1
 8014874:	f7fc fdce 	bl	8011414 <ucdr_deserialize_int32_t>
 8014878:	1d31      	adds	r1, r6, #4
 801487a:	4607      	mov	r7, r0
 801487c:	4628      	mov	r0, r5
 801487e:	f7fc fc9b 	bl	80111b8 <ucdr_deserialize_uint32_t>
 8014882:	f106 0108 	add.w	r1, r6, #8
 8014886:	4680      	mov	r8, r0
 8014888:	4628      	mov	r0, r5
 801488a:	f7fc fdc3 	bl	8011414 <ucdr_deserialize_int32_t>
 801488e:	f106 010c 	add.w	r1, r6, #12
 8014892:	4604      	mov	r4, r0
 8014894:	4628      	mov	r0, r5
 8014896:	f7fc fc8f 	bl	80111b8 <ucdr_deserialize_uint32_t>
 801489a:	ea07 0708 	and.w	r7, r7, r8
 801489e:	403c      	ands	r4, r7
 80148a0:	f106 0110 	add.w	r1, r6, #16
 80148a4:	4004      	ands	r4, r0
 80148a6:	4628      	mov	r0, r5
 80148a8:	f7fc fdb4 	bl	8011414 <ucdr_deserialize_int32_t>
 80148ac:	f106 0114 	add.w	r1, r6, #20
 80148b0:	4603      	mov	r3, r0
 80148b2:	4628      	mov	r0, r5
 80148b4:	461d      	mov	r5, r3
 80148b6:	f7fc fc7f 	bl	80111b8 <ucdr_deserialize_uint32_t>
 80148ba:	b2e4      	uxtb	r4, r4
 80148bc:	402c      	ands	r4, r5
 80148be:	4020      	ands	r0, r4
 80148c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080148c4 <uxr_serialize_SampleIdentity>:
 80148c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148c8:	220c      	movs	r2, #12
 80148ca:	4604      	mov	r4, r0
 80148cc:	460d      	mov	r5, r1
 80148ce:	f7fc f92d 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 80148d2:	2203      	movs	r2, #3
 80148d4:	f105 010c 	add.w	r1, r5, #12
 80148d8:	4607      	mov	r7, r0
 80148da:	4620      	mov	r0, r4
 80148dc:	f7fc f926 	bl	8010b2c <ucdr_serialize_array_uint8_t>
 80148e0:	7be9      	ldrb	r1, [r5, #15]
 80148e2:	4680      	mov	r8, r0
 80148e4:	4620      	mov	r0, r4
 80148e6:	f7fc fb37 	bl	8010f58 <ucdr_serialize_uint8_t>
 80148ea:	6929      	ldr	r1, [r5, #16]
 80148ec:	4606      	mov	r6, r0
 80148ee:	4620      	mov	r0, r4
 80148f0:	f7fc fd60 	bl	80113b4 <ucdr_serialize_int32_t>
 80148f4:	6969      	ldr	r1, [r5, #20]
 80148f6:	4603      	mov	r3, r0
 80148f8:	4620      	mov	r0, r4
 80148fa:	ea07 0708 	and.w	r7, r7, r8
 80148fe:	461c      	mov	r4, r3
 8014900:	f7fc fbfa 	bl	80110f8 <ucdr_serialize_uint32_t>
 8014904:	403e      	ands	r6, r7
 8014906:	4034      	ands	r4, r6
 8014908:	4020      	ands	r0, r4
 801490a:	b2c0      	uxtb	r0, r0
 801490c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014910 <uxr_deserialize_SampleIdentity>:
 8014910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014914:	220c      	movs	r2, #12
 8014916:	4604      	mov	r4, r0
 8014918:	460d      	mov	r5, r1
 801491a:	f7fc f96b 	bl	8010bf4 <ucdr_deserialize_array_uint8_t>
 801491e:	2203      	movs	r2, #3
 8014920:	f105 010c 	add.w	r1, r5, #12
 8014924:	4607      	mov	r7, r0
 8014926:	4620      	mov	r0, r4
 8014928:	f7fc f964 	bl	8010bf4 <ucdr_deserialize_array_uint8_t>
 801492c:	f105 010f 	add.w	r1, r5, #15
 8014930:	4680      	mov	r8, r0
 8014932:	4620      	mov	r0, r4
 8014934:	f7fc fb26 	bl	8010f84 <ucdr_deserialize_uint8_t>
 8014938:	f105 0110 	add.w	r1, r5, #16
 801493c:	4606      	mov	r6, r0
 801493e:	4620      	mov	r0, r4
 8014940:	f7fc fd68 	bl	8011414 <ucdr_deserialize_int32_t>
 8014944:	f105 0114 	add.w	r1, r5, #20
 8014948:	4603      	mov	r3, r0
 801494a:	4620      	mov	r0, r4
 801494c:	ea07 0708 	and.w	r7, r7, r8
 8014950:	461c      	mov	r4, r3
 8014952:	f7fc fc31 	bl	80111b8 <ucdr_deserialize_uint32_t>
 8014956:	403e      	ands	r6, r7
 8014958:	4034      	ands	r4, r6
 801495a:	4020      	ands	r0, r4
 801495c:	b2c0      	uxtb	r0, r0
 801495e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014962:	bf00      	nop

08014964 <rcl_client_get_rmw_handle>:
 8014964:	b110      	cbz	r0, 801496c <rcl_client_get_rmw_handle+0x8>
 8014966:	6800      	ldr	r0, [r0, #0]
 8014968:	b100      	cbz	r0, 801496c <rcl_client_get_rmw_handle+0x8>
 801496a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801496c:	4770      	bx	lr
 801496e:	bf00      	nop

08014970 <rcl_take_response>:
 8014970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014972:	460e      	mov	r6, r1
 8014974:	460c      	mov	r4, r1
 8014976:	4607      	mov	r7, r0
 8014978:	4694      	mov	ip, r2
 801497a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801497c:	b08d      	sub	sp, #52	; 0x34
 801497e:	ad06      	add	r5, sp, #24
 8014980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014982:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014986:	e885 0003 	stmia.w	r5, {r0, r1}
 801498a:	b337      	cbz	r7, 80149da <rcl_take_response+0x6a>
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	b323      	cbz	r3, 80149da <rcl_take_response+0x6a>
 8014990:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8014992:	b310      	cbz	r0, 80149da <rcl_take_response+0x6a>
 8014994:	4662      	mov	r2, ip
 8014996:	b31a      	cbz	r2, 80149e0 <rcl_take_response+0x70>
 8014998:	2300      	movs	r3, #0
 801499a:	2600      	movs	r6, #0
 801499c:	2700      	movs	r7, #0
 801499e:	f88d 3007 	strb.w	r3, [sp, #7]
 80149a2:	a902      	add	r1, sp, #8
 80149a4:	f10d 0307 	add.w	r3, sp, #7
 80149a8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80149ac:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80149b0:	f002 fee0 	bl	8017774 <rmw_take_response>
 80149b4:	4606      	mov	r6, r0
 80149b6:	b9a8      	cbnz	r0, 80149e4 <rcl_take_response+0x74>
 80149b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80149bc:	f240 13f5 	movw	r3, #501	; 0x1f5
 80149c0:	2a00      	cmp	r2, #0
 80149c2:	bf08      	it	eq
 80149c4:	461e      	moveq	r6, r3
 80149c6:	ad06      	add	r5, sp, #24
 80149c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80149ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80149cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80149d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80149d4:	4630      	mov	r0, r6
 80149d6:	b00d      	add	sp, #52	; 0x34
 80149d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149da:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 80149de:	e7f2      	b.n	80149c6 <rcl_take_response+0x56>
 80149e0:	260b      	movs	r6, #11
 80149e2:	e7f0      	b.n	80149c6 <rcl_take_response+0x56>
 80149e4:	2601      	movs	r6, #1
 80149e6:	e7ee      	b.n	80149c6 <rcl_take_response+0x56>

080149e8 <rcl_convert_rmw_ret_to_rcl_ret>:
 80149e8:	280b      	cmp	r0, #11
 80149ea:	dc0d      	bgt.n	8014a08 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80149ec:	2800      	cmp	r0, #0
 80149ee:	db09      	blt.n	8014a04 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80149f0:	280b      	cmp	r0, #11
 80149f2:	d807      	bhi.n	8014a04 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80149f4:	e8df f000 	tbb	[pc, r0]
 80149f8:	07060607 	.word	0x07060607
 80149fc:	06060606 	.word	0x06060606
 8014a00:	07070606 	.word	0x07070606
 8014a04:	2001      	movs	r0, #1
 8014a06:	4770      	bx	lr
 8014a08:	28cb      	cmp	r0, #203	; 0xcb
 8014a0a:	bf18      	it	ne
 8014a0c:	2001      	movne	r0, #1
 8014a0e:	4770      	bx	lr

08014a10 <rcl_get_zero_initialized_context>:
 8014a10:	4b06      	ldr	r3, [pc, #24]	; (8014a2c <rcl_get_zero_initialized_context+0x1c>)
 8014a12:	b430      	push	{r4, r5}
 8014a14:	2400      	movs	r4, #0
 8014a16:	2500      	movs	r5, #0
 8014a18:	e9c3 4502 	strd	r4, r5, [r3, #8]
 8014a1c:	4604      	mov	r4, r0
 8014a1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014a20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014a24:	4620      	mov	r0, r4
 8014a26:	bc30      	pop	{r4, r5}
 8014a28:	4770      	bx	lr
 8014a2a:	bf00      	nop
 8014a2c:	20010468 	.word	0x20010468

08014a30 <rcl_context_is_valid>:
 8014a30:	b150      	cbz	r0, 8014a48 <rcl_context_is_valid+0x18>
 8014a32:	b508      	push	{r3, lr}
 8014a34:	3008      	adds	r0, #8
 8014a36:	2105      	movs	r1, #5
 8014a38:	f002 f912 	bl	8016c60 <__atomic_load_8>
 8014a3c:	ea51 0300 	orrs.w	r3, r1, r0
 8014a40:	bf14      	ite	ne
 8014a42:	2001      	movne	r0, #1
 8014a44:	2000      	moveq	r0, #0
 8014a46:	bd08      	pop	{r3, pc}
 8014a48:	4770      	bx	lr
 8014a4a:	bf00      	nop

08014a4c <__cleanup_context>:
 8014a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a50:	b087      	sub	sp, #28
 8014a52:	4606      	mov	r6, r0
 8014a54:	2305      	movs	r3, #5
 8014a56:	3008      	adds	r0, #8
 8014a58:	9300      	str	r3, [sp, #0]
 8014a5a:	2200      	movs	r2, #0
 8014a5c:	2300      	movs	r3, #0
 8014a5e:	f002 f933 	bl	8016cc8 <__atomic_store_8>
 8014a62:	6830      	ldr	r0, [r6, #0]
 8014a64:	2800      	cmp	r0, #0
 8014a66:	d056      	beq.n	8014b16 <__cleanup_context+0xca>
 8014a68:	6947      	ldr	r7, [r0, #20]
 8014a6a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8014a6e:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8014a72:	b137      	cbz	r7, 8014a82 <__cleanup_context+0x36>
 8014a74:	3014      	adds	r0, #20
 8014a76:	f7f8 fe05 	bl	800d684 <rcl_init_options_fini>
 8014a7a:	4607      	mov	r7, r0
 8014a7c:	2800      	cmp	r0, #0
 8014a7e:	d14c      	bne.n	8014b1a <__cleanup_context+0xce>
 8014a80:	6830      	ldr	r0, [r6, #0]
 8014a82:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014a84:	b143      	cbz	r3, 8014a98 <__cleanup_context+0x4c>
 8014a86:	3028      	adds	r0, #40	; 0x28
 8014a88:	f7fa fc0e 	bl	800f2a8 <rmw_context_fini>
 8014a8c:	b118      	cbz	r0, 8014a96 <__cleanup_context+0x4a>
 8014a8e:	2f00      	cmp	r7, #0
 8014a90:	d046      	beq.n	8014b20 <__cleanup_context+0xd4>
 8014a92:	f7f9 ffa3 	bl	800e9dc <rcutils_reset_error>
 8014a96:	6830      	ldr	r0, [r6, #0]
 8014a98:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8014a9c:	f1bc 0f00 	cmp.w	ip, #0
 8014aa0:	d01c      	beq.n	8014adc <__cleanup_context+0x90>
 8014aa2:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8014aa6:	2a01      	cmp	r2, #1
 8014aa8:	f173 0100 	sbcs.w	r1, r3, #0
 8014aac:	db12      	blt.n	8014ad4 <__cleanup_context+0x88>
 8014aae:	2400      	movs	r4, #0
 8014ab0:	2500      	movs	r5, #0
 8014ab2:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 8014ab6:	4649      	mov	r1, r9
 8014ab8:	b308      	cbz	r0, 8014afe <__cleanup_context+0xb2>
 8014aba:	47c0      	blx	r8
 8014abc:	6831      	ldr	r1, [r6, #0]
 8014abe:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8014ac2:	3401      	adds	r4, #1
 8014ac4:	f145 0500 	adc.w	r5, r5, #0
 8014ac8:	4294      	cmp	r4, r2
 8014aca:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8014ace:	eb75 0103 	sbcs.w	r1, r5, r3
 8014ad2:	dbee      	blt.n	8014ab2 <__cleanup_context+0x66>
 8014ad4:	4660      	mov	r0, ip
 8014ad6:	4649      	mov	r1, r9
 8014ad8:	47c0      	blx	r8
 8014ada:	6830      	ldr	r0, [r6, #0]
 8014adc:	4649      	mov	r1, r9
 8014ade:	47c0      	blx	r8
 8014ae0:	4b11      	ldr	r3, [pc, #68]	; (8014b28 <__cleanup_context+0xdc>)
 8014ae2:	2000      	movs	r0, #0
 8014ae4:	2100      	movs	r1, #0
 8014ae6:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014aea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014aec:	ac02      	add	r4, sp, #8
 8014aee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014af2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8014af6:	4638      	mov	r0, r7
 8014af8:	b007      	add	sp, #28
 8014afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014afe:	3401      	adds	r4, #1
 8014b00:	f145 0500 	adc.w	r5, r5, #0
 8014b04:	4294      	cmp	r4, r2
 8014b06:	eb75 0103 	sbcs.w	r1, r5, r3
 8014b0a:	dbd2      	blt.n	8014ab2 <__cleanup_context+0x66>
 8014b0c:	4660      	mov	r0, ip
 8014b0e:	4649      	mov	r1, r9
 8014b10:	47c0      	blx	r8
 8014b12:	6830      	ldr	r0, [r6, #0]
 8014b14:	e7e2      	b.n	8014adc <__cleanup_context+0x90>
 8014b16:	4607      	mov	r7, r0
 8014b18:	e7e2      	b.n	8014ae0 <__cleanup_context+0x94>
 8014b1a:	f7f9 ff5f 	bl	800e9dc <rcutils_reset_error>
 8014b1e:	e7af      	b.n	8014a80 <__cleanup_context+0x34>
 8014b20:	f7ff ff62 	bl	80149e8 <rcl_convert_rmw_ret_to_rcl_ret>
 8014b24:	4607      	mov	r7, r0
 8014b26:	e7b4      	b.n	8014a92 <__cleanup_context+0x46>
 8014b28:	20010468 	.word	0x20010468

08014b2c <rcl_expand_topic_name>:
 8014b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b30:	b08b      	sub	sp, #44	; 0x2c
 8014b32:	9306      	str	r3, [sp, #24]
 8014b34:	2800      	cmp	r0, #0
 8014b36:	f000 80d2 	beq.w	8014cde <rcl_expand_topic_name+0x1b2>
 8014b3a:	460e      	mov	r6, r1
 8014b3c:	2900      	cmp	r1, #0
 8014b3e:	f000 80ce 	beq.w	8014cde <rcl_expand_topic_name+0x1b2>
 8014b42:	4617      	mov	r7, r2
 8014b44:	2a00      	cmp	r2, #0
 8014b46:	f000 80ca 	beq.w	8014cde <rcl_expand_topic_name+0x1b2>
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	f000 80c7 	beq.w	8014cde <rcl_expand_topic_name+0x1b2>
 8014b50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	f000 80c3 	beq.w	8014cde <rcl_expand_topic_name+0x1b2>
 8014b58:	a909      	add	r1, sp, #36	; 0x24
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	4680      	mov	r8, r0
 8014b5e:	f001 f9a1 	bl	8015ea4 <rcl_validate_topic_name>
 8014b62:	4604      	mov	r4, r0
 8014b64:	2800      	cmp	r0, #0
 8014b66:	f040 80b6 	bne.w	8014cd6 <rcl_expand_topic_name+0x1aa>
 8014b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	f040 80bf 	bne.w	8014cf0 <rcl_expand_topic_name+0x1c4>
 8014b72:	4602      	mov	r2, r0
 8014b74:	a909      	add	r1, sp, #36	; 0x24
 8014b76:	4630      	mov	r0, r6
 8014b78:	f002 fb3a 	bl	80171f0 <rmw_validate_node_name>
 8014b7c:	2800      	cmp	r0, #0
 8014b7e:	f040 80b3 	bne.w	8014ce8 <rcl_expand_topic_name+0x1bc>
 8014b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b84:	2a00      	cmp	r2, #0
 8014b86:	f040 80b8 	bne.w	8014cfa <rcl_expand_topic_name+0x1ce>
 8014b8a:	a909      	add	r1, sp, #36	; 0x24
 8014b8c:	4638      	mov	r0, r7
 8014b8e:	f002 fb11 	bl	80171b4 <rmw_validate_namespace>
 8014b92:	2800      	cmp	r0, #0
 8014b94:	f040 80a8 	bne.w	8014ce8 <rcl_expand_topic_name+0x1bc>
 8014b98:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014b9a:	2c00      	cmp	r4, #0
 8014b9c:	f040 80f6 	bne.w	8014d8c <rcl_expand_topic_name+0x260>
 8014ba0:	217b      	movs	r1, #123	; 0x7b
 8014ba2:	4640      	mov	r0, r8
 8014ba4:	f004 fd79 	bl	801969a <strchr>
 8014ba8:	f898 3000 	ldrb.w	r3, [r8]
 8014bac:	2b2f      	cmp	r3, #47	; 0x2f
 8014bae:	4605      	mov	r5, r0
 8014bb0:	f000 80c4 	beq.w	8014d3c <rcl_expand_topic_name+0x210>
 8014bb4:	2b7e      	cmp	r3, #126	; 0x7e
 8014bb6:	d16f      	bne.n	8014c98 <rcl_expand_topic_name+0x16c>
 8014bb8:	4638      	mov	r0, r7
 8014bba:	f7eb fb13 	bl	80001e4 <strlen>
 8014bbe:	4b87      	ldr	r3, [pc, #540]	; (8014ddc <rcl_expand_topic_name+0x2b0>)
 8014bc0:	4987      	ldr	r1, [pc, #540]	; (8014de0 <rcl_expand_topic_name+0x2b4>)
 8014bc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014bc4:	9604      	str	r6, [sp, #16]
 8014bc6:	2801      	cmp	r0, #1
 8014bc8:	bf0c      	ite	eq
 8014bca:	4618      	moveq	r0, r3
 8014bcc:	4608      	movne	r0, r1
 8014bce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014bd2:	e9cd 2300 	strd	r2, r3, [sp]
 8014bd6:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014bda:	f108 0101 	add.w	r1, r8, #1
 8014bde:	9105      	str	r1, [sp, #20]
 8014be0:	ab14      	add	r3, sp, #80	; 0x50
 8014be2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014be4:	f002 f928 	bl	8016e38 <rcutils_format_string_limit>
 8014be8:	4682      	mov	sl, r0
 8014bea:	2800      	cmp	r0, #0
 8014bec:	f000 80d0 	beq.w	8014d90 <rcl_expand_topic_name+0x264>
 8014bf0:	2d00      	cmp	r5, #0
 8014bf2:	f000 80aa 	beq.w	8014d4a <rcl_expand_topic_name+0x21e>
 8014bf6:	217b      	movs	r1, #123	; 0x7b
 8014bf8:	f004 fd4f 	bl	801969a <strchr>
 8014bfc:	46d1      	mov	r9, sl
 8014bfe:	4605      	mov	r5, r0
 8014c00:	9407      	str	r4, [sp, #28]
 8014c02:	46d3      	mov	fp, sl
 8014c04:	464c      	mov	r4, r9
 8014c06:	2d00      	cmp	r5, #0
 8014c08:	f000 80c7 	beq.w	8014d9a <rcl_expand_topic_name+0x26e>
 8014c0c:	217d      	movs	r1, #125	; 0x7d
 8014c0e:	4620      	mov	r0, r4
 8014c10:	f004 fd43 	bl	801969a <strchr>
 8014c14:	eba0 0905 	sub.w	r9, r0, r5
 8014c18:	f109 0a01 	add.w	sl, r9, #1
 8014c1c:	4871      	ldr	r0, [pc, #452]	; (8014de4 <rcl_expand_topic_name+0x2b8>)
 8014c1e:	4652      	mov	r2, sl
 8014c20:	4629      	mov	r1, r5
 8014c22:	f004 fd4f 	bl	80196c4 <strncmp>
 8014c26:	2800      	cmp	r0, #0
 8014c28:	f000 808d 	beq.w	8014d46 <rcl_expand_topic_name+0x21a>
 8014c2c:	486e      	ldr	r0, [pc, #440]	; (8014de8 <rcl_expand_topic_name+0x2bc>)
 8014c2e:	4652      	mov	r2, sl
 8014c30:	4629      	mov	r1, r5
 8014c32:	f004 fd47 	bl	80196c4 <strncmp>
 8014c36:	b130      	cbz	r0, 8014c46 <rcl_expand_topic_name+0x11a>
 8014c38:	486c      	ldr	r0, [pc, #432]	; (8014dec <rcl_expand_topic_name+0x2c0>)
 8014c3a:	4652      	mov	r2, sl
 8014c3c:	4629      	mov	r1, r5
 8014c3e:	f004 fd41 	bl	80196c4 <strncmp>
 8014c42:	2800      	cmp	r0, #0
 8014c44:	d15b      	bne.n	8014cfe <rcl_expand_topic_name+0x1d2>
 8014c46:	46b9      	mov	r9, r7
 8014c48:	ab16      	add	r3, sp, #88	; 0x58
 8014c4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014c4e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014c52:	ab14      	add	r3, sp, #80	; 0x50
 8014c54:	4628      	mov	r0, r5
 8014c56:	cb0c      	ldmia	r3, {r2, r3}
 8014c58:	4651      	mov	r1, sl
 8014c5a:	f002 fa39 	bl	80170d0 <rcutils_strndup>
 8014c5e:	4605      	mov	r5, r0
 8014c60:	2800      	cmp	r0, #0
 8014c62:	f000 80a4 	beq.w	8014dae <rcl_expand_topic_name+0x282>
 8014c66:	464a      	mov	r2, r9
 8014c68:	4620      	mov	r0, r4
 8014c6a:	ab14      	add	r3, sp, #80	; 0x50
 8014c6c:	4629      	mov	r1, r5
 8014c6e:	f002 f935 	bl	8016edc <rcutils_repl_str>
 8014c72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c74:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014c76:	4604      	mov	r4, r0
 8014c78:	4628      	mov	r0, r5
 8014c7a:	4798      	blx	r3
 8014c7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014c80:	4658      	mov	r0, fp
 8014c82:	4798      	blx	r3
 8014c84:	2c00      	cmp	r4, #0
 8014c86:	f000 8083 	beq.w	8014d90 <rcl_expand_topic_name+0x264>
 8014c8a:	217b      	movs	r1, #123	; 0x7b
 8014c8c:	4620      	mov	r0, r4
 8014c8e:	f004 fd04 	bl	801969a <strchr>
 8014c92:	46a3      	mov	fp, r4
 8014c94:	4605      	mov	r5, r0
 8014c96:	e7b6      	b.n	8014c06 <rcl_expand_topic_name+0xda>
 8014c98:	2800      	cmp	r0, #0
 8014c9a:	d151      	bne.n	8014d40 <rcl_expand_topic_name+0x214>
 8014c9c:	4638      	mov	r0, r7
 8014c9e:	f7eb faa1 	bl	80001e4 <strlen>
 8014ca2:	4b53      	ldr	r3, [pc, #332]	; (8014df0 <rcl_expand_topic_name+0x2c4>)
 8014ca4:	4a53      	ldr	r2, [pc, #332]	; (8014df4 <rcl_expand_topic_name+0x2c8>)
 8014ca6:	f8cd 8010 	str.w	r8, [sp, #16]
 8014caa:	2801      	cmp	r0, #1
 8014cac:	bf0c      	ite	eq
 8014cae:	4618      	moveq	r0, r3
 8014cb0:	4610      	movne	r0, r2
 8014cb2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014cb8:	e9cd 3200 	strd	r3, r2, [sp]
 8014cbc:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014cc0:	ab14      	add	r3, sp, #80	; 0x50
 8014cc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014cc4:	f002 f8b8 	bl	8016e38 <rcutils_format_string_limit>
 8014cc8:	4682      	mov	sl, r0
 8014cca:	4653      	mov	r3, sl
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d05f      	beq.n	8014d90 <rcl_expand_topic_name+0x264>
 8014cd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014cd2:	f8c3 a000 	str.w	sl, [r3]
 8014cd6:	4620      	mov	r0, r4
 8014cd8:	b00b      	add	sp, #44	; 0x2c
 8014cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cde:	240b      	movs	r4, #11
 8014ce0:	4620      	mov	r0, r4
 8014ce2:	b00b      	add	sp, #44	; 0x2c
 8014ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ce8:	f7ff fe7e 	bl	80149e8 <rcl_convert_rmw_ret_to_rcl_ret>
 8014cec:	4604      	mov	r4, r0
 8014cee:	e7f2      	b.n	8014cd6 <rcl_expand_topic_name+0x1aa>
 8014cf0:	2467      	movs	r4, #103	; 0x67
 8014cf2:	4620      	mov	r0, r4
 8014cf4:	b00b      	add	sp, #44	; 0x2c
 8014cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cfa:	24c9      	movs	r4, #201	; 0xc9
 8014cfc:	e7eb      	b.n	8014cd6 <rcl_expand_topic_name+0x1aa>
 8014cfe:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8014d02:	9806      	ldr	r0, [sp, #24]
 8014d04:	1c69      	adds	r1, r5, #1
 8014d06:	f7f9 ff85 	bl	800ec14 <rcutils_string_map_getn>
 8014d0a:	4681      	mov	r9, r0
 8014d0c:	2800      	cmp	r0, #0
 8014d0e:	d19b      	bne.n	8014c48 <rcl_expand_topic_name+0x11c>
 8014d10:	aa16      	add	r2, sp, #88	; 0x58
 8014d12:	ca07      	ldmia	r2, {r0, r1, r2}
 8014d14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014d16:	f8c3 9000 	str.w	r9, [r3]
 8014d1a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014d1e:	ab14      	add	r3, sp, #80	; 0x50
 8014d20:	cb0c      	ldmia	r3, {r2, r3}
 8014d22:	4651      	mov	r1, sl
 8014d24:	4628      	mov	r0, r5
 8014d26:	f002 f9d3 	bl	80170d0 <rcutils_strndup>
 8014d2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014d2e:	4798      	blx	r3
 8014d30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d32:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014d34:	4658      	mov	r0, fp
 8014d36:	4798      	blx	r3
 8014d38:	2469      	movs	r4, #105	; 0x69
 8014d3a:	e7cc      	b.n	8014cd6 <rcl_expand_topic_name+0x1aa>
 8014d3c:	2800      	cmp	r0, #0
 8014d3e:	d03e      	beq.n	8014dbe <rcl_expand_topic_name+0x292>
 8014d40:	46c1      	mov	r9, r8
 8014d42:	46a2      	mov	sl, r4
 8014d44:	e75c      	b.n	8014c00 <rcl_expand_topic_name+0xd4>
 8014d46:	46b1      	mov	r9, r6
 8014d48:	e77e      	b.n	8014c48 <rcl_expand_topic_name+0x11c>
 8014d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8014d4e:	2b2f      	cmp	r3, #47	; 0x2f
 8014d50:	d0be      	beq.n	8014cd0 <rcl_expand_topic_name+0x1a4>
 8014d52:	4638      	mov	r0, r7
 8014d54:	f7eb fa46 	bl	80001e4 <strlen>
 8014d58:	4b25      	ldr	r3, [pc, #148]	; (8014df0 <rcl_expand_topic_name+0x2c4>)
 8014d5a:	4926      	ldr	r1, [pc, #152]	; (8014df4 <rcl_expand_topic_name+0x2c8>)
 8014d5c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014d5e:	f8cd a010 	str.w	sl, [sp, #16]
 8014d62:	2801      	cmp	r0, #1
 8014d64:	bf0c      	ite	eq
 8014d66:	4618      	moveq	r0, r3
 8014d68:	4608      	movne	r0, r1
 8014d6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014d6e:	e9cd 2300 	strd	r2, r3, [sp]
 8014d72:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014d76:	ab14      	add	r3, sp, #80	; 0x50
 8014d78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014d7a:	f002 f85d 	bl	8016e38 <rcutils_format_string_limit>
 8014d7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d80:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014d82:	4603      	mov	r3, r0
 8014d84:	4650      	mov	r0, sl
 8014d86:	469a      	mov	sl, r3
 8014d88:	4790      	blx	r2
 8014d8a:	e79e      	b.n	8014cca <rcl_expand_topic_name+0x19e>
 8014d8c:	24ca      	movs	r4, #202	; 0xca
 8014d8e:	e7a2      	b.n	8014cd6 <rcl_expand_topic_name+0x1aa>
 8014d90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014d92:	2300      	movs	r3, #0
 8014d94:	6013      	str	r3, [r2, #0]
 8014d96:	240a      	movs	r4, #10
 8014d98:	e79d      	b.n	8014cd6 <rcl_expand_topic_name+0x1aa>
 8014d9a:	465b      	mov	r3, fp
 8014d9c:	9c07      	ldr	r4, [sp, #28]
 8014d9e:	46da      	mov	sl, fp
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d1d2      	bne.n	8014d4a <rcl_expand_topic_name+0x21e>
 8014da4:	f898 3000 	ldrb.w	r3, [r8]
 8014da8:	2b2f      	cmp	r3, #47	; 0x2f
 8014daa:	d091      	beq.n	8014cd0 <rcl_expand_topic_name+0x1a4>
 8014dac:	e776      	b.n	8014c9c <rcl_expand_topic_name+0x170>
 8014dae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014db0:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014db2:	601d      	str	r5, [r3, #0]
 8014db4:	4658      	mov	r0, fp
 8014db6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014db8:	4798      	blx	r3
 8014dba:	240a      	movs	r4, #10
 8014dbc:	e78b      	b.n	8014cd6 <rcl_expand_topic_name+0x1aa>
 8014dbe:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8014dc2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014dc6:	ab14      	add	r3, sp, #80	; 0x50
 8014dc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014dca:	4640      	mov	r0, r8
 8014dcc:	f002 f95e 	bl	801708c <rcutils_strdup>
 8014dd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014dd2:	2800      	cmp	r0, #0
 8014dd4:	bf08      	it	eq
 8014dd6:	240a      	moveq	r4, #10
 8014dd8:	6018      	str	r0, [r3, #0]
 8014dda:	e77c      	b.n	8014cd6 <rcl_expand_topic_name+0x1aa>
 8014ddc:	0801e28c 	.word	0x0801e28c
 8014de0:	0801e548 	.word	0x0801e548
 8014de4:	0801e550 	.word	0x0801e550
 8014de8:	0801e558 	.word	0x0801e558
 8014dec:	0801e560 	.word	0x0801e560
 8014df0:	0801e29c 	.word	0x0801e29c
 8014df4:	0801e254 	.word	0x0801e254

08014df8 <rcl_get_default_topic_name_substitutions>:
 8014df8:	2800      	cmp	r0, #0
 8014dfa:	bf0c      	ite	eq
 8014dfc:	200b      	moveq	r0, #11
 8014dfe:	2000      	movne	r0, #0
 8014e00:	4770      	bx	lr
 8014e02:	bf00      	nop

08014e04 <rcl_init>:
 8014e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e08:	1e07      	subs	r7, r0, #0
 8014e0a:	b0a1      	sub	sp, #132	; 0x84
 8014e0c:	4688      	mov	r8, r1
 8014e0e:	4692      	mov	sl, r2
 8014e10:	4699      	mov	r9, r3
 8014e12:	f340 8096 	ble.w	8014f42 <rcl_init+0x13e>
 8014e16:	2900      	cmp	r1, #0
 8014e18:	f000 8096 	beq.w	8014f48 <rcl_init+0x144>
 8014e1c:	1f0d      	subs	r5, r1, #4
 8014e1e:	2400      	movs	r4, #0
 8014e20:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8014e24:	3401      	adds	r4, #1
 8014e26:	2e00      	cmp	r6, #0
 8014e28:	f000 808e 	beq.w	8014f48 <rcl_init+0x144>
 8014e2c:	42a7      	cmp	r7, r4
 8014e2e:	d1f7      	bne.n	8014e20 <rcl_init+0x1c>
 8014e30:	f1ba 0f00 	cmp.w	sl, #0
 8014e34:	f000 8088 	beq.w	8014f48 <rcl_init+0x144>
 8014e38:	f8da 4000 	ldr.w	r4, [sl]
 8014e3c:	2c00      	cmp	r4, #0
 8014e3e:	f000 8083 	beq.w	8014f48 <rcl_init+0x144>
 8014e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e44:	ad1b      	add	r5, sp, #108	; 0x6c
 8014e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014e48:	6823      	ldr	r3, [r4, #0]
 8014e4a:	602b      	str	r3, [r5, #0]
 8014e4c:	a81b      	add	r0, sp, #108	; 0x6c
 8014e4e:	f7f9 fcd3 	bl	800e7f8 <rcutils_allocator_is_valid>
 8014e52:	2800      	cmp	r0, #0
 8014e54:	d078      	beq.n	8014f48 <rcl_init+0x144>
 8014e56:	f1b9 0f00 	cmp.w	r9, #0
 8014e5a:	d075      	beq.n	8014f48 <rcl_init+0x144>
 8014e5c:	f8d9 3000 	ldr.w	r3, [r9]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d176      	bne.n	8014f52 <rcl_init+0x14e>
 8014e64:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8014e68:	2178      	movs	r1, #120	; 0x78
 8014e6a:	2001      	movs	r0, #1
 8014e6c:	4798      	blx	r3
 8014e6e:	4604      	mov	r4, r0
 8014e70:	f8c9 0000 	str.w	r0, [r9]
 8014e74:	2800      	cmp	r0, #0
 8014e76:	f000 80c6 	beq.w	8015006 <rcl_init+0x202>
 8014e7a:	a804      	add	r0, sp, #16
 8014e7c:	f002 f944 	bl	8017108 <rmw_get_zero_initialized_context>
 8014e80:	a904      	add	r1, sp, #16
 8014e82:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014e86:	2250      	movs	r2, #80	; 0x50
 8014e88:	ac1b      	add	r4, sp, #108	; 0x6c
 8014e8a:	f003 ffa3 	bl	8018dd4 <memcpy>
 8014e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e90:	f8d9 5000 	ldr.w	r5, [r9]
 8014e94:	6826      	ldr	r6, [r4, #0]
 8014e96:	462c      	mov	r4, r5
 8014e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e9a:	f105 0114 	add.w	r1, r5, #20
 8014e9e:	6026      	str	r6, [r4, #0]
 8014ea0:	4650      	mov	r0, sl
 8014ea2:	f7f8 fc13 	bl	800d6cc <rcl_init_options_copy>
 8014ea6:	4606      	mov	r6, r0
 8014ea8:	2800      	cmp	r0, #0
 8014eaa:	d143      	bne.n	8014f34 <rcl_init+0x130>
 8014eac:	f8d9 b000 	ldr.w	fp, [r9]
 8014eb0:	463c      	mov	r4, r7
 8014eb2:	17fd      	asrs	r5, r7, #31
 8014eb4:	e9cb 4506 	strd	r4, r5, [fp, #24]
 8014eb8:	f8cb 0020 	str.w	r0, [fp, #32]
 8014ebc:	2f00      	cmp	r7, #0
 8014ebe:	d04d      	beq.n	8014f5c <rcl_init+0x158>
 8014ec0:	f1b8 0f00 	cmp.w	r8, #0
 8014ec4:	d04a      	beq.n	8014f5c <rcl_init+0x158>
 8014ec6:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8014eca:	4638      	mov	r0, r7
 8014ecc:	2104      	movs	r1, #4
 8014ece:	4798      	blx	r3
 8014ed0:	f8d9 a000 	ldr.w	sl, [r9]
 8014ed4:	f8cb 0020 	str.w	r0, [fp, #32]
 8014ed8:	f8da 3020 	ldr.w	r3, [sl, #32]
 8014edc:	b34b      	cbz	r3, 8014f32 <rcl_init+0x12e>
 8014ede:	2f01      	cmp	r7, #1
 8014ee0:	f175 0300 	sbcs.w	r3, r5, #0
 8014ee4:	db3a      	blt.n	8014f5c <rcl_init+0x158>
 8014ee6:	f1a8 0804 	sub.w	r8, r8, #4
 8014eea:	2600      	movs	r6, #0
 8014eec:	2700      	movs	r7, #0
 8014eee:	e00c      	b.n	8014f0a <rcl_init+0x106>
 8014ef0:	f8d8 1000 	ldr.w	r1, [r8]
 8014ef4:	f003 ff6e 	bl	8018dd4 <memcpy>
 8014ef8:	3601      	adds	r6, #1
 8014efa:	f147 0700 	adc.w	r7, r7, #0
 8014efe:	42bd      	cmp	r5, r7
 8014f00:	bf08      	it	eq
 8014f02:	42b4      	cmpeq	r4, r6
 8014f04:	d02a      	beq.n	8014f5c <rcl_init+0x158>
 8014f06:	f8d9 a000 	ldr.w	sl, [r9]
 8014f0a:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8014f0e:	f7eb f969 	bl	80001e4 <strlen>
 8014f12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014f14:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8014f16:	f8da a020 	ldr.w	sl, [sl, #32]
 8014f1a:	9003      	str	r0, [sp, #12]
 8014f1c:	4798      	blx	r3
 8014f1e:	f8d9 1000 	ldr.w	r1, [r9]
 8014f22:	9a03      	ldr	r2, [sp, #12]
 8014f24:	6a09      	ldr	r1, [r1, #32]
 8014f26:	00b3      	lsls	r3, r6, #2
 8014f28:	f84a 0003 	str.w	r0, [sl, r3]
 8014f2c:	58c8      	ldr	r0, [r1, r3]
 8014f2e:	2800      	cmp	r0, #0
 8014f30:	d1de      	bne.n	8014ef0 <rcl_init+0xec>
 8014f32:	260a      	movs	r6, #10
 8014f34:	4648      	mov	r0, r9
 8014f36:	f7ff fd89 	bl	8014a4c <__cleanup_context>
 8014f3a:	4630      	mov	r0, r6
 8014f3c:	b021      	add	sp, #132	; 0x84
 8014f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f42:	2900      	cmp	r1, #0
 8014f44:	f43f af74 	beq.w	8014e30 <rcl_init+0x2c>
 8014f48:	260b      	movs	r6, #11
 8014f4a:	4630      	mov	r0, r6
 8014f4c:	b021      	add	sp, #132	; 0x84
 8014f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f52:	2664      	movs	r6, #100	; 0x64
 8014f54:	4630      	mov	r0, r6
 8014f56:	b021      	add	sp, #132	; 0x84
 8014f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f5c:	2605      	movs	r6, #5
 8014f5e:	2300      	movs	r3, #0
 8014f60:	4832      	ldr	r0, [pc, #200]	; (801502c <rcl_init+0x228>)
 8014f62:	9600      	str	r6, [sp, #0]
 8014f64:	2201      	movs	r2, #1
 8014f66:	f001 ff1d 	bl	8016da4 <__atomic_fetch_add_8>
 8014f6a:	4604      	mov	r4, r0
 8014f6c:	460d      	mov	r5, r1
 8014f6e:	ea54 0305 	orrs.w	r3, r4, r5
 8014f72:	d03e      	beq.n	8014ff2 <rcl_init+0x1ee>
 8014f74:	4602      	mov	r2, r0
 8014f76:	460b      	mov	r3, r1
 8014f78:	9600      	str	r6, [sp, #0]
 8014f7a:	f109 0008 	add.w	r0, r9, #8
 8014f7e:	f001 fea3 	bl	8016cc8 <__atomic_store_8>
 8014f82:	f8d9 3000 	ldr.w	r3, [r9]
 8014f86:	695f      	ldr	r7, [r3, #20]
 8014f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f8a:	3301      	adds	r3, #1
 8014f8c:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8014f90:	d03d      	beq.n	801500e <rcl_init+0x20a>
 8014f92:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8014f96:	b94b      	cbnz	r3, 8014fac <rcl_init+0x1a8>
 8014f98:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8014f9c:	f000 f848 	bl	8015030 <rcl_get_localhost_only>
 8014fa0:	4606      	mov	r6, r0
 8014fa2:	2800      	cmp	r0, #0
 8014fa4:	d1c6      	bne.n	8014f34 <rcl_init+0x130>
 8014fa6:	f8d9 3000 	ldr.w	r3, [r9]
 8014faa:	695f      	ldr	r7, [r3, #20]
 8014fac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014fae:	aa1a      	add	r2, sp, #104	; 0x68
 8014fb0:	a919      	add	r1, sp, #100	; 0x64
 8014fb2:	f000 ff65 	bl	8015e80 <rcl_validate_enclave_name>
 8014fb6:	4606      	mov	r6, r0
 8014fb8:	2800      	cmp	r0, #0
 8014fba:	d1bb      	bne.n	8014f34 <rcl_init+0x130>
 8014fbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014fbe:	bb23      	cbnz	r3, 801500a <rcl_init+0x206>
 8014fc0:	f8d9 1000 	ldr.w	r1, [r9]
 8014fc4:	694b      	ldr	r3, [r1, #20]
 8014fc6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8014fc8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8014fcc:	f000 fa9e 	bl	801550c <rcl_get_security_options_from_environment>
 8014fd0:	4606      	mov	r6, r0
 8014fd2:	2800      	cmp	r0, #0
 8014fd4:	d1ae      	bne.n	8014f34 <rcl_init+0x130>
 8014fd6:	f8d9 1000 	ldr.w	r1, [r9]
 8014fda:	6948      	ldr	r0, [r1, #20]
 8014fdc:	3128      	adds	r1, #40	; 0x28
 8014fde:	3018      	adds	r0, #24
 8014fe0:	f7fa f83c 	bl	800f05c <rmw_init>
 8014fe4:	4606      	mov	r6, r0
 8014fe6:	2800      	cmp	r0, #0
 8014fe8:	d0af      	beq.n	8014f4a <rcl_init+0x146>
 8014fea:	f7ff fcfd 	bl	80149e8 <rcl_convert_rmw_ret_to_rcl_ret>
 8014fee:	4606      	mov	r6, r0
 8014ff0:	e7a0      	b.n	8014f34 <rcl_init+0x130>
 8014ff2:	9600      	str	r6, [sp, #0]
 8014ff4:	480d      	ldr	r0, [pc, #52]	; (801502c <rcl_init+0x228>)
 8014ff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ffe:	f001 fe63 	bl	8016cc8 <__atomic_store_8>
 8015002:	2601      	movs	r6, #1
 8015004:	e796      	b.n	8014f34 <rcl_init+0x130>
 8015006:	260a      	movs	r6, #10
 8015008:	e79f      	b.n	8014f4a <rcl_init+0x146>
 801500a:	2601      	movs	r6, #1
 801500c:	e792      	b.n	8014f34 <rcl_init+0x130>
 801500e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8015012:	f003 fba5 	bl	8018760 <rcl_get_default_domain_id>
 8015016:	4606      	mov	r6, r0
 8015018:	2800      	cmp	r0, #0
 801501a:	d18b      	bne.n	8014f34 <rcl_init+0x130>
 801501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801501e:	3301      	adds	r3, #1
 8015020:	f8d9 3000 	ldr.w	r3, [r9]
 8015024:	bf08      	it	eq
 8015026:	6278      	streq	r0, [r7, #36]	; 0x24
 8015028:	695f      	ldr	r7, [r3, #20]
 801502a:	e7b2      	b.n	8014f92 <rcl_init+0x18e>
 801502c:	20000138 	.word	0x20000138

08015030 <rcl_get_localhost_only>:
 8015030:	b510      	push	{r4, lr}
 8015032:	b082      	sub	sp, #8
 8015034:	2300      	movs	r3, #0
 8015036:	9301      	str	r3, [sp, #4]
 8015038:	b1b8      	cbz	r0, 801506a <rcl_get_localhost_only+0x3a>
 801503a:	4604      	mov	r4, r0
 801503c:	a901      	add	r1, sp, #4
 801503e:	480c      	ldr	r0, [pc, #48]	; (8015070 <rcl_get_localhost_only+0x40>)
 8015040:	f001 ff34 	bl	8016eac <rcutils_get_env>
 8015044:	b110      	cbz	r0, 801504c <rcl_get_localhost_only+0x1c>
 8015046:	2001      	movs	r0, #1
 8015048:	b002      	add	sp, #8
 801504a:	bd10      	pop	{r4, pc}
 801504c:	9b01      	ldr	r3, [sp, #4]
 801504e:	b113      	cbz	r3, 8015056 <rcl_get_localhost_only+0x26>
 8015050:	781a      	ldrb	r2, [r3, #0]
 8015052:	2a31      	cmp	r2, #49	; 0x31
 8015054:	d004      	beq.n	8015060 <rcl_get_localhost_only+0x30>
 8015056:	2302      	movs	r3, #2
 8015058:	2000      	movs	r0, #0
 801505a:	7023      	strb	r3, [r4, #0]
 801505c:	b002      	add	sp, #8
 801505e:	bd10      	pop	{r4, pc}
 8015060:	785b      	ldrb	r3, [r3, #1]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d1f7      	bne.n	8015056 <rcl_get_localhost_only+0x26>
 8015066:	2301      	movs	r3, #1
 8015068:	e7f6      	b.n	8015058 <rcl_get_localhost_only+0x28>
 801506a:	200b      	movs	r0, #11
 801506c:	b002      	add	sp, #8
 801506e:	bd10      	pop	{r4, pc}
 8015070:	0801e56c 	.word	0x0801e56c

08015074 <rcl_get_zero_initialized_node>:
 8015074:	4a03      	ldr	r2, [pc, #12]	; (8015084 <rcl_get_zero_initialized_node+0x10>)
 8015076:	4603      	mov	r3, r0
 8015078:	e892 0003 	ldmia.w	r2, {r0, r1}
 801507c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015080:	4618      	mov	r0, r3
 8015082:	4770      	bx	lr
 8015084:	0801e588 	.word	0x0801e588

08015088 <rcl_node_init>:
 8015088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801508c:	b09b      	sub	sp, #108	; 0x6c
 801508e:	4604      	mov	r4, r0
 8015090:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 8015094:	f04f 0c00 	mov.w	ip, #0
 8015098:	a815      	add	r0, sp, #84	; 0x54
 801509a:	460e      	mov	r6, r1
 801509c:	4615      	mov	r5, r2
 801509e:	461f      	mov	r7, r3
 80150a0:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 80150a4:	f003 fc72 	bl	801898c <rcl_guard_condition_get_default_options>
 80150a8:	f1b8 0f00 	cmp.w	r8, #0
 80150ac:	f000 80fd 	beq.w	80152aa <rcl_node_init+0x222>
 80150b0:	f108 0b04 	add.w	fp, r8, #4
 80150b4:	4658      	mov	r0, fp
 80150b6:	f7f9 fb9f 	bl	800e7f8 <rcutils_allocator_is_valid>
 80150ba:	2800      	cmp	r0, #0
 80150bc:	f000 80f5 	beq.w	80152aa <rcl_node_init+0x222>
 80150c0:	2e00      	cmp	r6, #0
 80150c2:	f000 80f2 	beq.w	80152aa <rcl_node_init+0x222>
 80150c6:	2d00      	cmp	r5, #0
 80150c8:	f000 80ef 	beq.w	80152aa <rcl_node_init+0x222>
 80150cc:	2c00      	cmp	r4, #0
 80150ce:	f000 80ec 	beq.w	80152aa <rcl_node_init+0x222>
 80150d2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80150d6:	f1b9 0f00 	cmp.w	r9, #0
 80150da:	f040 8112 	bne.w	8015302 <rcl_node_init+0x27a>
 80150de:	2f00      	cmp	r7, #0
 80150e0:	f000 80e3 	beq.w	80152aa <rcl_node_init+0x222>
 80150e4:	4638      	mov	r0, r7
 80150e6:	f7ff fca3 	bl	8014a30 <rcl_context_is_valid>
 80150ea:	4682      	mov	sl, r0
 80150ec:	2800      	cmp	r0, #0
 80150ee:	f000 80e2 	beq.w	80152b6 <rcl_node_init+0x22e>
 80150f2:	464a      	mov	r2, r9
 80150f4:	a914      	add	r1, sp, #80	; 0x50
 80150f6:	4630      	mov	r0, r6
 80150f8:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 80150fc:	f002 f878 	bl	80171f0 <rmw_validate_node_name>
 8015100:	4681      	mov	r9, r0
 8015102:	2800      	cmp	r0, #0
 8015104:	f040 80d3 	bne.w	80152ae <rcl_node_init+0x226>
 8015108:	9814      	ldr	r0, [sp, #80]	; 0x50
 801510a:	2800      	cmp	r0, #0
 801510c:	f040 8105 	bne.w	801531a <rcl_node_init+0x292>
 8015110:	4628      	mov	r0, r5
 8015112:	f7eb f867 	bl	80001e4 <strlen>
 8015116:	2800      	cmp	r0, #0
 8015118:	f040 80d0 	bne.w	80152bc <rcl_node_init+0x234>
 801511c:	4d8e      	ldr	r5, [pc, #568]	; (8015358 <rcl_node_init+0x2d0>)
 801511e:	a914      	add	r1, sp, #80	; 0x50
 8015120:	2200      	movs	r2, #0
 8015122:	4628      	mov	r0, r5
 8015124:	f002 f846 	bl	80171b4 <rmw_validate_namespace>
 8015128:	4681      	mov	r9, r0
 801512a:	2800      	cmp	r0, #0
 801512c:	f040 80bf 	bne.w	80152ae <rcl_node_init+0x226>
 8015130:	4682      	mov	sl, r0
 8015132:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015134:	2b00      	cmp	r3, #0
 8015136:	f040 80f5 	bne.w	8015324 <rcl_node_init+0x29c>
 801513a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801513e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015142:	9307      	str	r3, [sp, #28]
 8015144:	2030      	movs	r0, #48	; 0x30
 8015146:	4790      	blx	r2
 8015148:	4681      	mov	r9, r0
 801514a:	6060      	str	r0, [r4, #4]
 801514c:	2800      	cmp	r0, #0
 801514e:	f000 80de 	beq.w	801530e <rcl_node_init+0x286>
 8015152:	9b07      	ldr	r3, [sp, #28]
 8015154:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8015158:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 801515c:	a80a      	add	r0, sp, #40	; 0x28
 801515e:	f7f8 fb65 	bl	800d82c <rcl_node_get_default_options>
 8015162:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8015166:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801516a:	46cc      	mov	ip, r9
 801516c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015170:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8015174:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8015178:	6861      	ldr	r1, [r4, #4]
 801517a:	6027      	str	r7, [r4, #0]
 801517c:	4640      	mov	r0, r8
 801517e:	f7f8 fb71 	bl	800d864 <rcl_node_options_copy>
 8015182:	2800      	cmp	r0, #0
 8015184:	d167      	bne.n	8015256 <rcl_node_init+0x1ce>
 8015186:	4628      	mov	r0, r5
 8015188:	f7eb f82c 	bl	80001e4 <strlen>
 801518c:	4428      	add	r0, r5
 801518e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015192:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8015196:	2b2f      	cmp	r3, #47	; 0x2f
 8015198:	bf08      	it	eq
 801519a:	4970      	ldreq	r1, [pc, #448]	; (801535c <rcl_node_init+0x2d4>)
 801519c:	f8db 3010 	ldr.w	r3, [fp, #16]
 80151a0:	bf18      	it	ne
 80151a2:	496f      	ldrne	r1, [pc, #444]	; (8015360 <rcl_node_init+0x2d8>)
 80151a4:	9604      	str	r6, [sp, #16]
 80151a6:	e9cd 1502 	strd	r1, r5, [sp, #8]
 80151aa:	e9cd 3200 	strd	r3, r2, [sp]
 80151ae:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80151b2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80151b6:	f001 fe3f 	bl	8016e38 <rcutils_format_string_limit>
 80151ba:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 80151be:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80151c2:	f8d9 3000 	ldr.w	r3, [r9]
 80151c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80151c8:	1c59      	adds	r1, r3, #1
 80151ca:	f000 80b7 	beq.w	801533c <rcl_node_init+0x2b4>
 80151ce:	683a      	ldr	r2, [r7, #0]
 80151d0:	f8c9 301c 	str.w	r3, [r9, #28]
 80151d4:	6952      	ldr	r2, [r2, #20]
 80151d6:	6821      	ldr	r1, [r4, #0]
 80151d8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80151dc:	6808      	ldr	r0, [r1, #0]
 80151de:	f1a2 0201 	sub.w	r2, r2, #1
 80151e2:	fab2 f282 	clz	r2, r2
 80151e6:	0952      	lsrs	r2, r2, #5
 80151e8:	9200      	str	r2, [sp, #0]
 80151ea:	4631      	mov	r1, r6
 80151ec:	3028      	adds	r0, #40	; 0x28
 80151ee:	462a      	mov	r2, r5
 80151f0:	f7fa f906 	bl	800f400 <rmw_create_node>
 80151f4:	6863      	ldr	r3, [r4, #4]
 80151f6:	f8c9 0020 	str.w	r0, [r9, #32]
 80151fa:	6a18      	ldr	r0, [r3, #32]
 80151fc:	b368      	cbz	r0, 801525a <rcl_node_init+0x1d2>
 80151fe:	f7fa f98b 	bl	800f518 <rmw_node_get_graph_guard_condition>
 8015202:	4681      	mov	r9, r0
 8015204:	b338      	cbz	r0, 8015256 <rcl_node_init+0x1ce>
 8015206:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801520a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801520e:	6866      	ldr	r6, [r4, #4]
 8015210:	2008      	movs	r0, #8
 8015212:	4798      	blx	r3
 8015214:	6863      	ldr	r3, [r4, #4]
 8015216:	6270      	str	r0, [r6, #36]	; 0x24
 8015218:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 801521a:	b1f6      	cbz	r6, 801525a <rcl_node_init+0x1d2>
 801521c:	a808      	add	r0, sp, #32
 801521e:	f003 fad3 	bl	80187c8 <rcl_get_zero_initialized_guard_condition>
 8015222:	a808      	add	r0, sp, #32
 8015224:	c803      	ldmia	r0, {r0, r1}
 8015226:	e886 0003 	stmia.w	r6, {r0, r1}
 801522a:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 801522e:	ae15      	add	r6, sp, #84	; 0x54
 8015230:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015232:	f8db 3000 	ldr.w	r3, [fp]
 8015236:	6033      	str	r3, [r6, #0]
 8015238:	ab1a      	add	r3, sp, #104	; 0x68
 801523a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801523e:	6866      	ldr	r6, [r4, #4]
 8015240:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8015242:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015246:	4649      	mov	r1, r9
 8015248:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801524a:	4630      	mov	r0, r6
 801524c:	463a      	mov	r2, r7
 801524e:	f003 fb1f 	bl	8018890 <rcl_guard_condition_init_from_rmw>
 8015252:	4681      	mov	r9, r0
 8015254:	b328      	cbz	r0, 80152a2 <rcl_node_init+0x21a>
 8015256:	6863      	ldr	r3, [r4, #4]
 8015258:	b1f3      	cbz	r3, 8015298 <rcl_node_init+0x210>
 801525a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801525c:	b128      	cbz	r0, 801526a <rcl_node_init+0x1e2>
 801525e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015262:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015266:	4798      	blx	r3
 8015268:	6863      	ldr	r3, [r4, #4]
 801526a:	6a18      	ldr	r0, [r3, #32]
 801526c:	b110      	cbz	r0, 8015274 <rcl_node_init+0x1ec>
 801526e:	f7fa f8df 	bl	800f430 <rmw_destroy_node>
 8015272:	6863      	ldr	r3, [r4, #4]
 8015274:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015276:	b148      	cbz	r0, 801528c <rcl_node_init+0x204>
 8015278:	f003 fb62 	bl	8018940 <rcl_guard_condition_fini>
 801527c:	6862      	ldr	r2, [r4, #4]
 801527e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015282:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8015284:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015288:	4798      	blx	r3
 801528a:	6863      	ldr	r3, [r4, #4]
 801528c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8015290:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015294:	4618      	mov	r0, r3
 8015296:	4790      	blx	r2
 8015298:	2300      	movs	r3, #0
 801529a:	e9c4 3300 	strd	r3, r3, [r4]
 801529e:	f04f 0901 	mov.w	r9, #1
 80152a2:	f1ba 0f00 	cmp.w	sl, #0
 80152a6:	d125      	bne.n	80152f4 <rcl_node_init+0x26c>
 80152a8:	e001      	b.n	80152ae <rcl_node_init+0x226>
 80152aa:	f04f 090b 	mov.w	r9, #11
 80152ae:	4648      	mov	r0, r9
 80152b0:	b01b      	add	sp, #108	; 0x6c
 80152b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152b6:	f04f 0965 	mov.w	r9, #101	; 0x65
 80152ba:	e7f8      	b.n	80152ae <rcl_node_init+0x226>
 80152bc:	782b      	ldrb	r3, [r5, #0]
 80152be:	2b2f      	cmp	r3, #47	; 0x2f
 80152c0:	f43f af2d 	beq.w	801511e <rcl_node_init+0x96>
 80152c4:	4927      	ldr	r1, [pc, #156]	; (8015364 <rcl_node_init+0x2dc>)
 80152c6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80152ca:	9300      	str	r3, [sp, #0]
 80152cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80152d0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80152d4:	9503      	str	r5, [sp, #12]
 80152d6:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80152da:	f001 fdad 	bl	8016e38 <rcutils_format_string_limit>
 80152de:	4605      	mov	r5, r0
 80152e0:	b348      	cbz	r0, 8015336 <rcl_node_init+0x2ae>
 80152e2:	2200      	movs	r2, #0
 80152e4:	a914      	add	r1, sp, #80	; 0x50
 80152e6:	9214      	str	r2, [sp, #80]	; 0x50
 80152e8:	f001 ff64 	bl	80171b4 <rmw_validate_namespace>
 80152ec:	4681      	mov	r9, r0
 80152ee:	2800      	cmp	r0, #0
 80152f0:	f43f af1f 	beq.w	8015132 <rcl_node_init+0xaa>
 80152f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80152f8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80152fc:	4628      	mov	r0, r5
 80152fe:	4798      	blx	r3
 8015300:	e7d5      	b.n	80152ae <rcl_node_init+0x226>
 8015302:	f04f 0964 	mov.w	r9, #100	; 0x64
 8015306:	4648      	mov	r0, r9
 8015308:	b01b      	add	sp, #108	; 0x6c
 801530a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801530e:	f04f 090a 	mov.w	r9, #10
 8015312:	f1ba 0f00 	cmp.w	sl, #0
 8015316:	d1ed      	bne.n	80152f4 <rcl_node_init+0x26c>
 8015318:	e7c9      	b.n	80152ae <rcl_node_init+0x226>
 801531a:	f001 ffbb 	bl	8017294 <rmw_node_name_validation_result_string>
 801531e:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 8015322:	e7c4      	b.n	80152ae <rcl_node_init+0x226>
 8015324:	4618      	mov	r0, r3
 8015326:	f001 ff57 	bl	80171d8 <rmw_namespace_validation_result_string>
 801532a:	f04f 09ca 	mov.w	r9, #202	; 0xca
 801532e:	f1ba 0f00 	cmp.w	sl, #0
 8015332:	d1df      	bne.n	80152f4 <rcl_node_init+0x26c>
 8015334:	e7bb      	b.n	80152ae <rcl_node_init+0x226>
 8015336:	f04f 090a 	mov.w	r9, #10
 801533a:	e7b8      	b.n	80152ae <rcl_node_init+0x226>
 801533c:	a813      	add	r0, sp, #76	; 0x4c
 801533e:	f003 fa0f 	bl	8018760 <rcl_get_default_domain_id>
 8015342:	2800      	cmp	r0, #0
 8015344:	d187      	bne.n	8015256 <rcl_node_init+0x1ce>
 8015346:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015348:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801534c:	1c5a      	adds	r2, r3, #1
 801534e:	bf04      	itt	eq
 8015350:	9013      	streq	r0, [sp, #76]	; 0x4c
 8015352:	4603      	moveq	r3, r0
 8015354:	e73b      	b.n	80151ce <rcl_node_init+0x146>
 8015356:	bf00      	nop
 8015358:	0801e250 	.word	0x0801e250
 801535c:	0801e29c 	.word	0x0801e29c
 8015360:	0801e254 	.word	0x0801e254
 8015364:	0801e584 	.word	0x0801e584

08015368 <rcl_node_is_valid>:
 8015368:	b130      	cbz	r0, 8015378 <rcl_node_is_valid+0x10>
 801536a:	6843      	ldr	r3, [r0, #4]
 801536c:	b123      	cbz	r3, 8015378 <rcl_node_is_valid+0x10>
 801536e:	6a1b      	ldr	r3, [r3, #32]
 8015370:	b113      	cbz	r3, 8015378 <rcl_node_is_valid+0x10>
 8015372:	6800      	ldr	r0, [r0, #0]
 8015374:	f7ff bb5c 	b.w	8014a30 <rcl_context_is_valid>
 8015378:	2000      	movs	r0, #0
 801537a:	4770      	bx	lr

0801537c <rcl_node_get_name>:
 801537c:	b120      	cbz	r0, 8015388 <rcl_node_get_name+0xc>
 801537e:	6840      	ldr	r0, [r0, #4]
 8015380:	b110      	cbz	r0, 8015388 <rcl_node_get_name+0xc>
 8015382:	6a00      	ldr	r0, [r0, #32]
 8015384:	b100      	cbz	r0, 8015388 <rcl_node_get_name+0xc>
 8015386:	6880      	ldr	r0, [r0, #8]
 8015388:	4770      	bx	lr
 801538a:	bf00      	nop

0801538c <rcl_node_get_namespace>:
 801538c:	b120      	cbz	r0, 8015398 <rcl_node_get_namespace+0xc>
 801538e:	6840      	ldr	r0, [r0, #4]
 8015390:	b110      	cbz	r0, 8015398 <rcl_node_get_namespace+0xc>
 8015392:	6a00      	ldr	r0, [r0, #32]
 8015394:	b100      	cbz	r0, 8015398 <rcl_node_get_namespace+0xc>
 8015396:	68c0      	ldr	r0, [r0, #12]
 8015398:	4770      	bx	lr
 801539a:	bf00      	nop

0801539c <rcl_node_get_options>:
 801539c:	b128      	cbz	r0, 80153aa <rcl_node_get_options+0xe>
 801539e:	6840      	ldr	r0, [r0, #4]
 80153a0:	b118      	cbz	r0, 80153aa <rcl_node_get_options+0xe>
 80153a2:	6a03      	ldr	r3, [r0, #32]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	bf08      	it	eq
 80153a8:	2000      	moveq	r0, #0
 80153aa:	4770      	bx	lr

080153ac <rcl_node_get_rmw_handle>:
 80153ac:	b110      	cbz	r0, 80153b4 <rcl_node_get_rmw_handle+0x8>
 80153ae:	6840      	ldr	r0, [r0, #4]
 80153b0:	b100      	cbz	r0, 80153b4 <rcl_node_get_rmw_handle+0x8>
 80153b2:	6a00      	ldr	r0, [r0, #32]
 80153b4:	4770      	bx	lr
 80153b6:	bf00      	nop

080153b8 <exact_match_lookup>:
 80153b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153ba:	f102 0708 	add.w	r7, r2, #8
 80153be:	460b      	mov	r3, r1
 80153c0:	4614      	mov	r4, r2
 80153c2:	4606      	mov	r6, r0
 80153c4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80153c8:	b085      	sub	sp, #20
 80153ca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80153ce:	4618      	mov	r0, r3
 80153d0:	4918      	ldr	r1, [pc, #96]	; (8015434 <exact_match_lookup+0x7c>)
 80153d2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80153d6:	f001 fd21 	bl	8016e1c <rcutils_join_path>
 80153da:	7833      	ldrb	r3, [r6, #0]
 80153dc:	2b2f      	cmp	r3, #47	; 0x2f
 80153de:	4605      	mov	r5, r0
 80153e0:	d021      	beq.n	8015426 <exact_match_lookup+0x6e>
 80153e2:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 80153e6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80153ea:	1c70      	adds	r0, r6, #1
 80153ec:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80153f0:	f001 fd1a 	bl	8016e28 <rcutils_to_native_path>
 80153f4:	4606      	mov	r6, r0
 80153f6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80153fa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80153fe:	4631      	mov	r1, r6
 8015400:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015404:	4628      	mov	r0, r5
 8015406:	f001 fd09 	bl	8016e1c <rcutils_join_path>
 801540a:	6862      	ldr	r2, [r4, #4]
 801540c:	6921      	ldr	r1, [r4, #16]
 801540e:	4603      	mov	r3, r0
 8015410:	4630      	mov	r0, r6
 8015412:	461e      	mov	r6, r3
 8015414:	4790      	blx	r2
 8015416:	4628      	mov	r0, r5
 8015418:	6863      	ldr	r3, [r4, #4]
 801541a:	6921      	ldr	r1, [r4, #16]
 801541c:	4798      	blx	r3
 801541e:	4635      	mov	r5, r6
 8015420:	4628      	mov	r0, r5
 8015422:	b005      	add	sp, #20
 8015424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015426:	7873      	ldrb	r3, [r6, #1]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d1da      	bne.n	80153e2 <exact_match_lookup+0x2a>
 801542c:	4628      	mov	r0, r5
 801542e:	b005      	add	sp, #20
 8015430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015432:	bf00      	nop
 8015434:	0801e5cc 	.word	0x0801e5cc

08015438 <rcl_get_secure_root>:
 8015438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801543c:	b085      	sub	sp, #20
 801543e:	b168      	cbz	r0, 801545c <rcl_get_secure_root+0x24>
 8015440:	4607      	mov	r7, r0
 8015442:	4608      	mov	r0, r1
 8015444:	460c      	mov	r4, r1
 8015446:	f7f9 f9d7 	bl	800e7f8 <rcutils_allocator_is_valid>
 801544a:	b138      	cbz	r0, 801545c <rcl_get_secure_root+0x24>
 801544c:	2300      	movs	r3, #0
 801544e:	482d      	ldr	r0, [pc, #180]	; (8015504 <rcl_get_secure_root+0xcc>)
 8015450:	9303      	str	r3, [sp, #12]
 8015452:	a903      	add	r1, sp, #12
 8015454:	f001 fd2a 	bl	8016eac <rcutils_get_env>
 8015458:	4605      	mov	r5, r0
 801545a:	b120      	cbz	r0, 8015466 <rcl_get_secure_root+0x2e>
 801545c:	2500      	movs	r5, #0
 801545e:	4628      	mov	r0, r5
 8015460:	b005      	add	sp, #20
 8015462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015466:	9b03      	ldr	r3, [sp, #12]
 8015468:	781a      	ldrb	r2, [r3, #0]
 801546a:	2a00      	cmp	r2, #0
 801546c:	d0f6      	beq.n	801545c <rcl_get_secure_root+0x24>
 801546e:	f104 090c 	add.w	r9, r4, #12
 8015472:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015476:	e88d 0003 	stmia.w	sp, {r0, r1}
 801547a:	4618      	mov	r0, r3
 801547c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015480:	f001 fe04 	bl	801708c <rcutils_strdup>
 8015484:	4680      	mov	r8, r0
 8015486:	2800      	cmp	r0, #0
 8015488:	d0e8      	beq.n	801545c <rcl_get_secure_root+0x24>
 801548a:	481f      	ldr	r0, [pc, #124]	; (8015508 <rcl_get_secure_root+0xd0>)
 801548c:	9503      	str	r5, [sp, #12]
 801548e:	a903      	add	r1, sp, #12
 8015490:	f001 fd0c 	bl	8016eac <rcutils_get_env>
 8015494:	b160      	cbz	r0, 80154b0 <rcl_get_secure_root+0x78>
 8015496:	2600      	movs	r6, #0
 8015498:	6863      	ldr	r3, [r4, #4]
 801549a:	6921      	ldr	r1, [r4, #16]
 801549c:	4630      	mov	r0, r6
 801549e:	4798      	blx	r3
 80154a0:	4640      	mov	r0, r8
 80154a2:	6863      	ldr	r3, [r4, #4]
 80154a4:	6921      	ldr	r1, [r4, #16]
 80154a6:	4798      	blx	r3
 80154a8:	4628      	mov	r0, r5
 80154aa:	b005      	add	sp, #20
 80154ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154b0:	9b03      	ldr	r3, [sp, #12]
 80154b2:	781e      	ldrb	r6, [r3, #0]
 80154b4:	b1f6      	cbz	r6, 80154f4 <rcl_get_secure_root+0xbc>
 80154b6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80154ba:	e88d 0003 	stmia.w	sp, {r0, r1}
 80154be:	4618      	mov	r0, r3
 80154c0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80154c4:	f001 fde2 	bl	801708c <rcutils_strdup>
 80154c8:	4606      	mov	r6, r0
 80154ca:	2800      	cmp	r0, #0
 80154cc:	d0e3      	beq.n	8015496 <rcl_get_secure_root+0x5e>
 80154ce:	4622      	mov	r2, r4
 80154d0:	4641      	mov	r1, r8
 80154d2:	f7ff ff71 	bl	80153b8 <exact_match_lookup>
 80154d6:	4605      	mov	r5, r0
 80154d8:	2d00      	cmp	r5, #0
 80154da:	d0dd      	beq.n	8015498 <rcl_get_secure_root+0x60>
 80154dc:	4628      	mov	r0, r5
 80154de:	f001 fc9b 	bl	8016e18 <rcutils_is_directory>
 80154e2:	4607      	mov	r7, r0
 80154e4:	2800      	cmp	r0, #0
 80154e6:	d1d7      	bne.n	8015498 <rcl_get_secure_root+0x60>
 80154e8:	4628      	mov	r0, r5
 80154ea:	6863      	ldr	r3, [r4, #4]
 80154ec:	6921      	ldr	r1, [r4, #16]
 80154ee:	4798      	blx	r3
 80154f0:	463d      	mov	r5, r7
 80154f2:	e7d1      	b.n	8015498 <rcl_get_secure_root+0x60>
 80154f4:	4638      	mov	r0, r7
 80154f6:	4622      	mov	r2, r4
 80154f8:	4641      	mov	r1, r8
 80154fa:	f7ff ff5d 	bl	80153b8 <exact_match_lookup>
 80154fe:	4605      	mov	r5, r0
 8015500:	e7ea      	b.n	80154d8 <rcl_get_secure_root+0xa0>
 8015502:	bf00      	nop
 8015504:	0801e5d8 	.word	0x0801e5d8
 8015508:	0801e5f0 	.word	0x0801e5f0

0801550c <rcl_get_security_options_from_environment>:
 801550c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015510:	b082      	sub	sp, #8
 8015512:	4607      	mov	r7, r0
 8015514:	4688      	mov	r8, r1
 8015516:	2400      	movs	r4, #0
 8015518:	481d      	ldr	r0, [pc, #116]	; (8015590 <rcl_get_security_options_from_environment+0x84>)
 801551a:	9401      	str	r4, [sp, #4]
 801551c:	a901      	add	r1, sp, #4
 801551e:	4616      	mov	r6, r2
 8015520:	f001 fcc4 	bl	8016eac <rcutils_get_env>
 8015524:	b120      	cbz	r0, 8015530 <rcl_get_security_options_from_environment+0x24>
 8015526:	2501      	movs	r5, #1
 8015528:	4628      	mov	r0, r5
 801552a:	b002      	add	sp, #8
 801552c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015530:	4918      	ldr	r1, [pc, #96]	; (8015594 <rcl_get_security_options_from_environment+0x88>)
 8015532:	4604      	mov	r4, r0
 8015534:	9801      	ldr	r0, [sp, #4]
 8015536:	f7ea fe4b 	bl	80001d0 <strcmp>
 801553a:	4605      	mov	r5, r0
 801553c:	b9c8      	cbnz	r0, 8015572 <rcl_get_security_options_from_environment+0x66>
 801553e:	9001      	str	r0, [sp, #4]
 8015540:	b1ee      	cbz	r6, 801557e <rcl_get_security_options_from_environment+0x72>
 8015542:	4815      	ldr	r0, [pc, #84]	; (8015598 <rcl_get_security_options_from_environment+0x8c>)
 8015544:	a901      	add	r1, sp, #4
 8015546:	f001 fcb1 	bl	8016eac <rcutils_get_env>
 801554a:	2800      	cmp	r0, #0
 801554c:	d1eb      	bne.n	8015526 <rcl_get_security_options_from_environment+0x1a>
 801554e:	4913      	ldr	r1, [pc, #76]	; (801559c <rcl_get_security_options_from_environment+0x90>)
 8015550:	9801      	ldr	r0, [sp, #4]
 8015552:	f7ea fe3d 	bl	80001d0 <strcmp>
 8015556:	fab0 f080 	clz	r0, r0
 801555a:	0940      	lsrs	r0, r0, #5
 801555c:	7030      	strb	r0, [r6, #0]
 801555e:	4641      	mov	r1, r8
 8015560:	4638      	mov	r0, r7
 8015562:	f7ff ff69 	bl	8015438 <rcl_get_secure_root>
 8015566:	b160      	cbz	r0, 8015582 <rcl_get_security_options_from_environment+0x76>
 8015568:	6070      	str	r0, [r6, #4]
 801556a:	4628      	mov	r0, r5
 801556c:	b002      	add	sp, #8
 801556e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015572:	4625      	mov	r5, r4
 8015574:	4628      	mov	r0, r5
 8015576:	7034      	strb	r4, [r6, #0]
 8015578:	b002      	add	sp, #8
 801557a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801557e:	250b      	movs	r5, #11
 8015580:	e7d2      	b.n	8015528 <rcl_get_security_options_from_environment+0x1c>
 8015582:	7835      	ldrb	r5, [r6, #0]
 8015584:	f1a5 0501 	sub.w	r5, r5, #1
 8015588:	fab5 f585 	clz	r5, r5
 801558c:	096d      	lsrs	r5, r5, #5
 801558e:	e7cb      	b.n	8015528 <rcl_get_security_options_from_environment+0x1c>
 8015590:	0801e590 	.word	0x0801e590
 8015594:	0801e5a4 	.word	0x0801e5a4
 8015598:	0801e5ac 	.word	0x0801e5ac
 801559c:	0801e5c4 	.word	0x0801e5c4

080155a0 <rcl_service_get_rmw_handle>:
 80155a0:	b110      	cbz	r0, 80155a8 <rcl_service_get_rmw_handle+0x8>
 80155a2:	6800      	ldr	r0, [r0, #0]
 80155a4:	b100      	cbz	r0, 80155a8 <rcl_service_get_rmw_handle+0x8>
 80155a6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80155a8:	4770      	bx	lr
 80155aa:	bf00      	nop

080155ac <rcl_take_request>:
 80155ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155ae:	460e      	mov	r6, r1
 80155b0:	460c      	mov	r4, r1
 80155b2:	4607      	mov	r7, r0
 80155b4:	4694      	mov	ip, r2
 80155b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80155b8:	b08d      	sub	sp, #52	; 0x34
 80155ba:	ad06      	add	r5, sp, #24
 80155bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80155be:	e896 0003 	ldmia.w	r6, {r0, r1}
 80155c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80155c6:	b1e7      	cbz	r7, 8015602 <rcl_take_request+0x56>
 80155c8:	683b      	ldr	r3, [r7, #0]
 80155ca:	b1d3      	cbz	r3, 8015602 <rcl_take_request+0x56>
 80155cc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80155ce:	b1c0      	cbz	r0, 8015602 <rcl_take_request+0x56>
 80155d0:	4662      	mov	r2, ip
 80155d2:	b30a      	cbz	r2, 8015618 <rcl_take_request+0x6c>
 80155d4:	2500      	movs	r5, #0
 80155d6:	f10d 0307 	add.w	r3, sp, #7
 80155da:	a902      	add	r1, sp, #8
 80155dc:	f88d 5007 	strb.w	r5, [sp, #7]
 80155e0:	f002 f816 	bl	8017610 <rmw_take_request>
 80155e4:	4606      	mov	r6, r0
 80155e6:	b178      	cbz	r0, 8015608 <rcl_take_request+0x5c>
 80155e8:	280a      	cmp	r0, #10
 80155ea:	bf18      	it	ne
 80155ec:	2601      	movne	r6, #1
 80155ee:	ad06      	add	r5, sp, #24
 80155f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80155f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80155f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80155f8:	e884 0003 	stmia.w	r4, {r0, r1}
 80155fc:	4630      	mov	r0, r6
 80155fe:	b00d      	add	sp, #52	; 0x34
 8015600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015602:	f44f 7616 	mov.w	r6, #600	; 0x258
 8015606:	e7f2      	b.n	80155ee <rcl_take_request+0x42>
 8015608:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801560c:	f240 2359 	movw	r3, #601	; 0x259
 8015610:	2a00      	cmp	r2, #0
 8015612:	bf08      	it	eq
 8015614:	461e      	moveq	r6, r3
 8015616:	e7ea      	b.n	80155ee <rcl_take_request+0x42>
 8015618:	260b      	movs	r6, #11
 801561a:	e7e8      	b.n	80155ee <rcl_take_request+0x42>

0801561c <rcl_send_response>:
 801561c:	b160      	cbz	r0, 8015638 <rcl_send_response+0x1c>
 801561e:	6800      	ldr	r0, [r0, #0]
 8015620:	b150      	cbz	r0, 8015638 <rcl_send_response+0x1c>
 8015622:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8015624:	b140      	cbz	r0, 8015638 <rcl_send_response+0x1c>
 8015626:	b151      	cbz	r1, 801563e <rcl_send_response+0x22>
 8015628:	b510      	push	{r4, lr}
 801562a:	b152      	cbz	r2, 8015642 <rcl_send_response+0x26>
 801562c:	f002 f84a 	bl	80176c4 <rmw_send_response>
 8015630:	3800      	subs	r0, #0
 8015632:	bf18      	it	ne
 8015634:	2001      	movne	r0, #1
 8015636:	bd10      	pop	{r4, pc}
 8015638:	f44f 7016 	mov.w	r0, #600	; 0x258
 801563c:	4770      	bx	lr
 801563e:	200b      	movs	r0, #11
 8015640:	4770      	bx	lr
 8015642:	200b      	movs	r0, #11
 8015644:	bd10      	pop	{r4, pc}
 8015646:	bf00      	nop

08015648 <rcl_get_system_time>:
 8015648:	4608      	mov	r0, r1
 801564a:	f7f9 bb15 	b.w	800ec78 <rcutils_system_time_now>
 801564e:	bf00      	nop

08015650 <rcl_get_steady_time>:
 8015650:	4608      	mov	r0, r1
 8015652:	f7f9 bb39 	b.w	800ecc8 <rcutils_steady_time_now>
 8015656:	bf00      	nop

08015658 <rcl_get_ros_time>:
 8015658:	7a03      	ldrb	r3, [r0, #8]
 801565a:	b510      	push	{r4, lr}
 801565c:	460c      	mov	r4, r1
 801565e:	b133      	cbz	r3, 801566e <rcl_get_ros_time+0x16>
 8015660:	2105      	movs	r1, #5
 8015662:	f001 fafd 	bl	8016c60 <__atomic_load_8>
 8015666:	e9c4 0100 	strd	r0, r1, [r4]
 801566a:	2000      	movs	r0, #0
 801566c:	bd10      	pop	{r4, pc}
 801566e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015672:	4608      	mov	r0, r1
 8015674:	f7f9 bb00 	b.w	800ec78 <rcutils_system_time_now>

08015678 <rcl_clock_init>:
 8015678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801567c:	4606      	mov	r6, r0
 801567e:	4610      	mov	r0, r2
 8015680:	4614      	mov	r4, r2
 8015682:	460d      	mov	r5, r1
 8015684:	f7f9 f8b8 	bl	800e7f8 <rcutils_allocator_is_valid>
 8015688:	b128      	cbz	r0, 8015696 <rcl_clock_init+0x1e>
 801568a:	2e03      	cmp	r6, #3
 801568c:	d803      	bhi.n	8015696 <rcl_clock_init+0x1e>
 801568e:	e8df f006 	tbb	[pc, r6]
 8015692:	2c1b      	.short	0x2c1b
 8015694:	0554      	.short	0x0554
 8015696:	200b      	movs	r0, #11
 8015698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801569c:	2d00      	cmp	r5, #0
 801569e:	d0fa      	beq.n	8015696 <rcl_clock_init+0x1e>
 80156a0:	2c00      	cmp	r4, #0
 80156a2:	d0f8      	beq.n	8015696 <rcl_clock_init+0x1e>
 80156a4:	2600      	movs	r6, #0
 80156a6:	702e      	strb	r6, [r5, #0]
 80156a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80156aa:	f105 0714 	add.w	r7, r5, #20
 80156ae:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80156b2:	612e      	str	r6, [r5, #16]
 80156b4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80156b6:	6823      	ldr	r3, [r4, #0]
 80156b8:	603b      	str	r3, [r7, #0]
 80156ba:	2303      	movs	r3, #3
 80156bc:	4a2b      	ldr	r2, [pc, #172]	; (801576c <rcl_clock_init+0xf4>)
 80156be:	702b      	strb	r3, [r5, #0]
 80156c0:	4630      	mov	r0, r6
 80156c2:	60ea      	str	r2, [r5, #12]
 80156c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80156c8:	2d00      	cmp	r5, #0
 80156ca:	d0e4      	beq.n	8015696 <rcl_clock_init+0x1e>
 80156cc:	2600      	movs	r6, #0
 80156ce:	702e      	strb	r6, [r5, #0]
 80156d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80156d2:	f105 0714 	add.w	r7, r5, #20
 80156d6:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80156da:	e9c5 6603 	strd	r6, r6, [r5, #12]
 80156de:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80156e0:	6823      	ldr	r3, [r4, #0]
 80156e2:	603b      	str	r3, [r7, #0]
 80156e4:	4630      	mov	r0, r6
 80156e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80156ea:	2d00      	cmp	r5, #0
 80156ec:	d0d3      	beq.n	8015696 <rcl_clock_init+0x1e>
 80156ee:	2c00      	cmp	r4, #0
 80156f0:	d0d1      	beq.n	8015696 <rcl_clock_init+0x1e>
 80156f2:	2600      	movs	r6, #0
 80156f4:	702e      	strb	r6, [r5, #0]
 80156f6:	46a4      	mov	ip, r4
 80156f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80156fc:	f105 0714 	add.w	r7, r5, #20
 8015700:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8015704:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8015708:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801570a:	f8dc 3000 	ldr.w	r3, [ip]
 801570e:	603b      	str	r3, [r7, #0]
 8015710:	6921      	ldr	r1, [r4, #16]
 8015712:	6823      	ldr	r3, [r4, #0]
 8015714:	2010      	movs	r0, #16
 8015716:	4798      	blx	r3
 8015718:	4603      	mov	r3, r0
 801571a:	6128      	str	r0, [r5, #16]
 801571c:	b318      	cbz	r0, 8015766 <rcl_clock_init+0xee>
 801571e:	f04f 0800 	mov.w	r8, #0
 8015722:	f04f 0900 	mov.w	r9, #0
 8015726:	7206      	strb	r6, [r0, #8]
 8015728:	e9c3 8900 	strd	r8, r9, [r3]
 801572c:	2301      	movs	r3, #1
 801572e:	4a10      	ldr	r2, [pc, #64]	; (8015770 <rcl_clock_init+0xf8>)
 8015730:	702b      	strb	r3, [r5, #0]
 8015732:	4630      	mov	r0, r6
 8015734:	60ea      	str	r2, [r5, #12]
 8015736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801573a:	2d00      	cmp	r5, #0
 801573c:	d0ab      	beq.n	8015696 <rcl_clock_init+0x1e>
 801573e:	2c00      	cmp	r4, #0
 8015740:	d0a9      	beq.n	8015696 <rcl_clock_init+0x1e>
 8015742:	2600      	movs	r6, #0
 8015744:	702e      	strb	r6, [r5, #0]
 8015746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015748:	f105 0714 	add.w	r7, r5, #20
 801574c:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8015750:	612e      	str	r6, [r5, #16]
 8015752:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015754:	6823      	ldr	r3, [r4, #0]
 8015756:	603b      	str	r3, [r7, #0]
 8015758:	2302      	movs	r3, #2
 801575a:	4a06      	ldr	r2, [pc, #24]	; (8015774 <rcl_clock_init+0xfc>)
 801575c:	702b      	strb	r3, [r5, #0]
 801575e:	4630      	mov	r0, r6
 8015760:	60ea      	str	r2, [r5, #12]
 8015762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015766:	200a      	movs	r0, #10
 8015768:	e796      	b.n	8015698 <rcl_clock_init+0x20>
 801576a:	bf00      	nop
 801576c:	08015651 	.word	0x08015651
 8015770:	08015659 	.word	0x08015659
 8015774:	08015649 	.word	0x08015649

08015778 <rcl_clock_get_now>:
 8015778:	b140      	cbz	r0, 801578c <rcl_clock_get_now+0x14>
 801577a:	b139      	cbz	r1, 801578c <rcl_clock_get_now+0x14>
 801577c:	7803      	ldrb	r3, [r0, #0]
 801577e:	b11b      	cbz	r3, 8015788 <rcl_clock_get_now+0x10>
 8015780:	68c3      	ldr	r3, [r0, #12]
 8015782:	b10b      	cbz	r3, 8015788 <rcl_clock_get_now+0x10>
 8015784:	6900      	ldr	r0, [r0, #16]
 8015786:	4718      	bx	r3
 8015788:	2001      	movs	r0, #1
 801578a:	4770      	bx	lr
 801578c:	200b      	movs	r0, #11
 801578e:	4770      	bx	lr

08015790 <rcl_clock_add_jump_callback>:
 8015790:	b082      	sub	sp, #8
 8015792:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015796:	a908      	add	r1, sp, #32
 8015798:	e881 000c 	stmia.w	r1, {r2, r3}
 801579c:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	; 0x38
 80157a0:	b340      	cbz	r0, 80157f4 <rcl_clock_add_jump_callback+0x64>
 80157a2:	4604      	mov	r4, r0
 80157a4:	3014      	adds	r0, #20
 80157a6:	f7f9 f827 	bl	800e7f8 <rcutils_allocator_is_valid>
 80157aa:	b318      	cbz	r0, 80157f4 <rcl_clock_add_jump_callback+0x64>
 80157ac:	b315      	cbz	r5, 80157f4 <rcl_clock_add_jump_callback+0x64>
 80157ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80157b2:	2a00      	cmp	r2, #0
 80157b4:	f173 0300 	sbcs.w	r3, r3, #0
 80157b8:	db1c      	blt.n	80157f4 <rcl_clock_add_jump_callback+0x64>
 80157ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80157be:	2a01      	cmp	r2, #1
 80157c0:	f173 0300 	sbcs.w	r3, r3, #0
 80157c4:	da16      	bge.n	80157f4 <rcl_clock_add_jump_callback+0x64>
 80157c6:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80157ca:	2f00      	cmp	r7, #0
 80157cc:	d03e      	beq.n	801584c <rcl_clock_add_jump_callback+0xbc>
 80157ce:	2300      	movs	r3, #0
 80157d0:	f100 0220 	add.w	r2, r0, #32
 80157d4:	e003      	b.n	80157de <rcl_clock_add_jump_callback+0x4e>
 80157d6:	42bb      	cmp	r3, r7
 80157d8:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80157dc:	d00f      	beq.n	80157fe <rcl_clock_add_jump_callback+0x6e>
 80157de:	f852 1c20 	ldr.w	r1, [r2, #-32]
 80157e2:	42a9      	cmp	r1, r5
 80157e4:	f103 0301 	add.w	r3, r3, #1
 80157e8:	d1f5      	bne.n	80157d6 <rcl_clock_add_jump_callback+0x46>
 80157ea:	6811      	ldr	r1, [r2, #0]
 80157ec:	42b1      	cmp	r1, r6
 80157ee:	d1f2      	bne.n	80157d6 <rcl_clock_add_jump_callback+0x46>
 80157f0:	2001      	movs	r0, #1
 80157f2:	e000      	b.n	80157f6 <rcl_clock_add_jump_callback+0x66>
 80157f4:	200b      	movs	r0, #11
 80157f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157fa:	b002      	add	sp, #8
 80157fc:	4770      	bx	lr
 80157fe:	3301      	adds	r3, #1
 8015800:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015804:	00d9      	lsls	r1, r3, #3
 8015806:	69e3      	ldr	r3, [r4, #28]
 8015808:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801580a:	4798      	blx	r3
 801580c:	4684      	mov	ip, r0
 801580e:	b1d8      	cbz	r0, 8015848 <rcl_clock_add_jump_callback+0xb8>
 8015810:	af08      	add	r7, sp, #32
 8015812:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8015816:	6060      	str	r0, [r4, #4]
 8015818:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801581a:	eb0e 098e 	add.w	r9, lr, lr, lsl #2
 801581e:	eb0c 08c9 	add.w	r8, ip, r9, lsl #3
 8015822:	f84c 5039 	str.w	r5, [ip, r9, lsl #3]
 8015826:	f108 0508 	add.w	r5, r8, #8
 801582a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801582c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8015830:	f10e 0301 	add.w	r3, lr, #1
 8015834:	e885 0003 	stmia.w	r5, {r0, r1}
 8015838:	f8c8 6020 	str.w	r6, [r8, #32]
 801583c:	60a3      	str	r3, [r4, #8]
 801583e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015842:	2000      	movs	r0, #0
 8015844:	b002      	add	sp, #8
 8015846:	4770      	bx	lr
 8015848:	200a      	movs	r0, #10
 801584a:	e7d4      	b.n	80157f6 <rcl_clock_add_jump_callback+0x66>
 801584c:	2128      	movs	r1, #40	; 0x28
 801584e:	e7da      	b.n	8015806 <rcl_clock_add_jump_callback+0x76>

08015850 <rcl_clock_remove_jump_callback>:
 8015850:	2800      	cmp	r0, #0
 8015852:	d057      	beq.n	8015904 <rcl_clock_remove_jump_callback+0xb4>
 8015854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015858:	4607      	mov	r7, r0
 801585a:	3014      	adds	r0, #20
 801585c:	460c      	mov	r4, r1
 801585e:	4615      	mov	r5, r2
 8015860:	f7f8 ffca 	bl	800e7f8 <rcutils_allocator_is_valid>
 8015864:	2800      	cmp	r0, #0
 8015866:	d03a      	beq.n	80158de <rcl_clock_remove_jump_callback+0x8e>
 8015868:	2c00      	cmp	r4, #0
 801586a:	d038      	beq.n	80158de <rcl_clock_remove_jump_callback+0x8e>
 801586c:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8015870:	f1b8 0f00 	cmp.w	r8, #0
 8015874:	d00c      	beq.n	8015890 <rcl_clock_remove_jump_callback+0x40>
 8015876:	f8d7 e004 	ldr.w	lr, [r7, #4]
 801587a:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
 801587e:	4676      	mov	r6, lr
 8015880:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
 8015884:	6833      	ldr	r3, [r6, #0]
 8015886:	42a3      	cmp	r3, r4
 8015888:	d005      	beq.n	8015896 <rcl_clock_remove_jump_callback+0x46>
 801588a:	3628      	adds	r6, #40	; 0x28
 801588c:	45b4      	cmp	ip, r6
 801588e:	d1f9      	bne.n	8015884 <rcl_clock_remove_jump_callback+0x34>
 8015890:	2001      	movs	r0, #1
 8015892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015896:	6a33      	ldr	r3, [r6, #32]
 8015898:	3628      	adds	r6, #40	; 0x28
 801589a:	4566      	cmp	r6, ip
 801589c:	d02a      	beq.n	80158f4 <rcl_clock_remove_jump_callback+0xa4>
 801589e:	42ab      	cmp	r3, r5
 80158a0:	d1f0      	bne.n	8015884 <rcl_clock_remove_jump_callback+0x34>
 80158a2:	4635      	mov	r5, r6
 80158a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80158a6:	f1a6 0428 	sub.w	r4, r6, #40	; 0x28
 80158aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80158ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80158ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80158b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80158b4:	3628      	adds	r6, #40	; 0x28
 80158b6:	4566      	cmp	r6, ip
 80158b8:	e884 0003 	stmia.w	r4, {r0, r1}
 80158bc:	d1f1      	bne.n	80158a2 <rcl_clock_remove_jump_callback+0x52>
 80158be:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 80158c2:	60bc      	str	r4, [r7, #8]
 80158c4:	b174      	cbz	r4, 80158e4 <rcl_clock_remove_jump_callback+0x94>
 80158c6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80158ca:	69fb      	ldr	r3, [r7, #28]
 80158cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158ce:	00e1      	lsls	r1, r4, #3
 80158d0:	4670      	mov	r0, lr
 80158d2:	4798      	blx	r3
 80158d4:	b1c0      	cbz	r0, 8015908 <rcl_clock_remove_jump_callback+0xb8>
 80158d6:	6078      	str	r0, [r7, #4]
 80158d8:	2000      	movs	r0, #0
 80158da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158de:	200b      	movs	r0, #11
 80158e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158e4:	4670      	mov	r0, lr
 80158e6:	69bb      	ldr	r3, [r7, #24]
 80158e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80158ea:	4798      	blx	r3
 80158ec:	607c      	str	r4, [r7, #4]
 80158ee:	4620      	mov	r0, r4
 80158f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158f4:	42ab      	cmp	r3, r5
 80158f6:	d1cb      	bne.n	8015890 <rcl_clock_remove_jump_callback+0x40>
 80158f8:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 80158fc:	60bc      	str	r4, [r7, #8]
 80158fe:	2c00      	cmp	r4, #0
 8015900:	d1e1      	bne.n	80158c6 <rcl_clock_remove_jump_callback+0x76>
 8015902:	e7ef      	b.n	80158e4 <rcl_clock_remove_jump_callback+0x94>
 8015904:	200b      	movs	r0, #11
 8015906:	4770      	bx	lr
 8015908:	200a      	movs	r0, #10
 801590a:	e7e9      	b.n	80158e0 <rcl_clock_remove_jump_callback+0x90>

0801590c <_rcl_timer_time_jump>:
 801590c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015910:	4682      	mov	sl, r0
 8015912:	b087      	sub	sp, #28
 8015914:	4614      	mov	r4, r2
 8015916:	b131      	cbz	r1, 8015926 <_rcl_timer_time_jump+0x1a>
 8015918:	7803      	ldrb	r3, [r0, #0]
 801591a:	3b02      	subs	r3, #2
 801591c:	2b01      	cmp	r3, #1
 801591e:	d944      	bls.n	80159aa <_rcl_timer_time_jump+0x9e>
 8015920:	b007      	add	sp, #28
 8015922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015926:	6813      	ldr	r3, [r2, #0]
 8015928:	a904      	add	r1, sp, #16
 801592a:	6818      	ldr	r0, [r3, #0]
 801592c:	f7ff ff24 	bl	8015778 <rcl_clock_get_now>
 8015930:	2800      	cmp	r0, #0
 8015932:	d1f5      	bne.n	8015920 <_rcl_timer_time_jump+0x14>
 8015934:	6820      	ldr	r0, [r4, #0]
 8015936:	2105      	movs	r1, #5
 8015938:	3020      	adds	r0, #32
 801593a:	f001 f991 	bl	8016c60 <__atomic_load_8>
 801593e:	4602      	mov	r2, r0
 8015940:	6820      	ldr	r0, [r4, #0]
 8015942:	460b      	mov	r3, r1
 8015944:	3028      	adds	r0, #40	; 0x28
 8015946:	2105      	movs	r1, #5
 8015948:	4690      	mov	r8, r2
 801594a:	4699      	mov	r9, r3
 801594c:	f001 f988 	bl	8016c60 <__atomic_load_8>
 8015950:	4602      	mov	r2, r0
 8015952:	6820      	ldr	r0, [r4, #0]
 8015954:	460b      	mov	r3, r1
 8015956:	3018      	adds	r0, #24
 8015958:	2105      	movs	r1, #5
 801595a:	461f      	mov	r7, r3
 801595c:	4616      	mov	r6, r2
 801595e:	f001 f97f 	bl	8016c60 <__atomic_load_8>
 8015962:	f89a 3000 	ldrb.w	r3, [sl]
 8015966:	9103      	str	r1, [sp, #12]
 8015968:	3b02      	subs	r3, #2
 801596a:	2b01      	cmp	r3, #1
 801596c:	4605      	mov	r5, r0
 801596e:	d93a      	bls.n	80159e6 <_rcl_timer_time_jump+0xda>
 8015970:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8015974:	45b2      	cmp	sl, r6
 8015976:	eb7b 0307 	sbcs.w	r3, fp, r7
 801597a:	da64      	bge.n	8015a46 <_rcl_timer_time_jump+0x13a>
 801597c:	45c2      	cmp	sl, r8
 801597e:	eb7b 0309 	sbcs.w	r3, fp, r9
 8015982:	dacd      	bge.n	8015920 <_rcl_timer_time_jump+0x14>
 8015984:	6820      	ldr	r0, [r4, #0]
 8015986:	eb15 020a 	adds.w	r2, r5, sl
 801598a:	f04f 0505 	mov.w	r5, #5
 801598e:	eb41 030b 	adc.w	r3, r1, fp
 8015992:	3028      	adds	r0, #40	; 0x28
 8015994:	9500      	str	r5, [sp, #0]
 8015996:	f001 f997 	bl	8016cc8 <__atomic_store_8>
 801599a:	6820      	ldr	r0, [r4, #0]
 801599c:	9500      	str	r5, [sp, #0]
 801599e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80159a2:	3020      	adds	r0, #32
 80159a4:	f001 f990 	bl	8016cc8 <__atomic_store_8>
 80159a8:	e7ba      	b.n	8015920 <_rcl_timer_time_jump+0x14>
 80159aa:	6813      	ldr	r3, [r2, #0]
 80159ac:	a904      	add	r1, sp, #16
 80159ae:	6818      	ldr	r0, [r3, #0]
 80159b0:	f7ff fee2 	bl	8015778 <rcl_clock_get_now>
 80159b4:	2800      	cmp	r0, #0
 80159b6:	d1b3      	bne.n	8015920 <_rcl_timer_time_jump+0x14>
 80159b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80159bc:	4313      	orrs	r3, r2
 80159be:	d0af      	beq.n	8015920 <_rcl_timer_time_jump+0x14>
 80159c0:	6820      	ldr	r0, [r4, #0]
 80159c2:	2105      	movs	r1, #5
 80159c4:	3028      	adds	r0, #40	; 0x28
 80159c6:	f001 f94b 	bl	8016c60 <__atomic_load_8>
 80159ca:	9a04      	ldr	r2, [sp, #16]
 80159cc:	6823      	ldr	r3, [r4, #0]
 80159ce:	9e05      	ldr	r6, [sp, #20]
 80159d0:	1a82      	subs	r2, r0, r2
 80159d2:	f04f 0405 	mov.w	r4, #5
 80159d6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80159da:	9400      	str	r4, [sp, #0]
 80159dc:	eb61 0306 	sbc.w	r3, r1, r6
 80159e0:	f001 f972 	bl	8016cc8 <__atomic_store_8>
 80159e4:	e79c      	b.n	8015920 <_rcl_timer_time_jump+0x14>
 80159e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80159ea:	4313      	orrs	r3, r2
 80159ec:	d098      	beq.n	8015920 <_rcl_timer_time_jump+0x14>
 80159ee:	6820      	ldr	r0, [r4, #0]
 80159f0:	f04f 0805 	mov.w	r8, #5
 80159f4:	2300      	movs	r3, #0
 80159f6:	3030      	adds	r0, #48	; 0x30
 80159f8:	f8cd 8000 	str.w	r8, [sp]
 80159fc:	2200      	movs	r2, #0
 80159fe:	f001 f997 	bl	8016d30 <__atomic_exchange_8>
 8015a02:	4606      	mov	r6, r0
 8015a04:	460f      	mov	r7, r1
 8015a06:	ea56 0307 	orrs.w	r3, r6, r7
 8015a0a:	d089      	beq.n	8015920 <_rcl_timer_time_jump+0x14>
 8015a0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015a10:	1b92      	subs	r2, r2, r6
 8015a12:	eb63 0301 	sbc.w	r3, r3, r1
 8015a16:	9903      	ldr	r1, [sp, #12]
 8015a18:	6820      	ldr	r0, [r4, #0]
 8015a1a:	f8cd 8000 	str.w	r8, [sp]
 8015a1e:	1952      	adds	r2, r2, r5
 8015a20:	eb43 0101 	adc.w	r1, r3, r1
 8015a24:	460b      	mov	r3, r1
 8015a26:	3028      	adds	r0, #40	; 0x28
 8015a28:	f001 f94e 	bl	8016cc8 <__atomic_store_8>
 8015a2c:	9a04      	ldr	r2, [sp, #16]
 8015a2e:	6820      	ldr	r0, [r4, #0]
 8015a30:	9b05      	ldr	r3, [sp, #20]
 8015a32:	f8cd 8000 	str.w	r8, [sp]
 8015a36:	1b92      	subs	r2, r2, r6
 8015a38:	f100 0020 	add.w	r0, r0, #32
 8015a3c:	eb63 0307 	sbc.w	r3, r3, r7
 8015a40:	f001 f942 	bl	8016cc8 <__atomic_store_8>
 8015a44:	e76c      	b.n	8015920 <_rcl_timer_time_jump+0x14>
 8015a46:	6820      	ldr	r0, [r4, #0]
 8015a48:	3008      	adds	r0, #8
 8015a4a:	f002 ffb9 	bl	80189c0 <rcl_trigger_guard_condition>
 8015a4e:	e767      	b.n	8015920 <_rcl_timer_time_jump+0x14>

08015a50 <rcl_get_zero_initialized_timer>:
 8015a50:	4b01      	ldr	r3, [pc, #4]	; (8015a58 <rcl_get_zero_initialized_timer+0x8>)
 8015a52:	6818      	ldr	r0, [r3, #0]
 8015a54:	4770      	bx	lr
 8015a56:	bf00      	nop
 8015a58:	0801e610 	.word	0x0801e610

08015a5c <rcl_timer_init>:
 8015a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a60:	b0ad      	sub	sp, #180	; 0xb4
 8015a62:	4604      	mov	r4, r0
 8015a64:	a839      	add	r0, sp, #228	; 0xe4
 8015a66:	460d      	mov	r5, r1
 8015a68:	4690      	mov	r8, r2
 8015a6a:	f7f8 fec5 	bl	800e7f8 <rcutils_allocator_is_valid>
 8015a6e:	2800      	cmp	r0, #0
 8015a70:	d072      	beq.n	8015b58 <rcl_timer_init+0xfc>
 8015a72:	2c00      	cmp	r4, #0
 8015a74:	d070      	beq.n	8015b58 <rcl_timer_init+0xfc>
 8015a76:	2d00      	cmp	r5, #0
 8015a78:	d06e      	beq.n	8015b58 <rcl_timer_init+0xfc>
 8015a7a:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8015a7e:	2a00      	cmp	r2, #0
 8015a80:	f173 0300 	sbcs.w	r3, r3, #0
 8015a84:	db68      	blt.n	8015b58 <rcl_timer_init+0xfc>
 8015a86:	6823      	ldr	r3, [r4, #0]
 8015a88:	b12b      	cbz	r3, 8015a96 <rcl_timer_init+0x3a>
 8015a8a:	f04f 0a64 	mov.w	sl, #100	; 0x64
 8015a8e:	4650      	mov	r0, sl
 8015a90:	b02d      	add	sp, #180	; 0xb4
 8015a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a96:	a90a      	add	r1, sp, #40	; 0x28
 8015a98:	4628      	mov	r0, r5
 8015a9a:	f7ff fe6d 	bl	8015778 <rcl_clock_get_now>
 8015a9e:	4682      	mov	sl, r0
 8015aa0:	2800      	cmp	r0, #0
 8015aa2:	d1f4      	bne.n	8015a8e <rcl_timer_init+0x32>
 8015aa4:	f10d 0920 	add.w	r9, sp, #32
 8015aa8:	4648      	mov	r0, r9
 8015aaa:	e9cd 5818 	strd	r5, r8, [sp, #96]	; 0x60
 8015aae:	f002 fe8b 	bl	80187c8 <rcl_get_zero_initialized_guard_condition>
 8015ab2:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015ab6:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8015aba:	f10d 0934 	add.w	r9, sp, #52	; 0x34
 8015abe:	e88b 0003 	stmia.w	fp, {r0, r1}
 8015ac2:	4648      	mov	r0, r9
 8015ac4:	f002 ff62 	bl	801898c <rcl_guard_condition_get_default_options>
 8015ac8:	ab0f      	add	r3, sp, #60	; 0x3c
 8015aca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015ace:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015ad2:	4641      	mov	r1, r8
 8015ad4:	e899 000c 	ldmia.w	r9, {r2, r3}
 8015ad8:	4658      	mov	r0, fp
 8015ada:	f002 fe7f 	bl	80187dc <rcl_guard_condition_init>
 8015ade:	4682      	mov	sl, r0
 8015ae0:	2800      	cmp	r0, #0
 8015ae2:	d1d4      	bne.n	8015a8e <rcl_timer_init+0x32>
 8015ae4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015ae6:	f893 c000 	ldrb.w	ip, [r3]
 8015aea:	f1bc 0f01 	cmp.w	ip, #1
 8015aee:	d039      	beq.n	8015b64 <rcl_timer_init+0x108>
 8015af0:	f10d 0ce4 	add.w	ip, sp, #228	; 0xe4
 8015af4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015af8:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 8015afc:	9e36      	ldr	r6, [sp, #216]	; 0xd8
 8015afe:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 8015b02:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015b06:	eb18 0606 	adds.w	r6, r8, r6
 8015b0a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8015b0c:	9606      	str	r6, [sp, #24]
 8015b0e:	e9dd 6736 	ldrd	r6, r7, [sp, #216]	; 0xd8
 8015b12:	eb49 0303 	adc.w	r3, r9, r3
 8015b16:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8015b18:	9307      	str	r3, [sp, #28]
 8015b1a:	921c      	str	r2, [sp, #112]	; 0x70
 8015b1c:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
 8015b20:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8015b24:	f8dc 3000 	ldr.w	r3, [ip]
 8015b28:	f8ce 3000 	str.w	r3, [lr]
 8015b2c:	2000      	movs	r0, #0
 8015b2e:	2100      	movs	r1, #0
 8015b30:	2200      	movs	r2, #0
 8015b32:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
 8015b36:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8015b38:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8015b3a:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
 8015b3e:	2050      	movs	r0, #80	; 0x50
 8015b40:	e9cd 6722 	strd	r6, r7, [sp, #136]	; 0x88
 8015b44:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 8015b48:	4798      	blx	r3
 8015b4a:	6020      	str	r0, [r4, #0]
 8015b4c:	b360      	cbz	r0, 8015ba8 <rcl_timer_init+0x14c>
 8015b4e:	2250      	movs	r2, #80	; 0x50
 8015b50:	a918      	add	r1, sp, #96	; 0x60
 8015b52:	f003 f93f 	bl	8018dd4 <memcpy>
 8015b56:	e79a      	b.n	8015a8e <rcl_timer_init+0x32>
 8015b58:	f04f 0a0b 	mov.w	sl, #11
 8015b5c:	4650      	mov	r0, sl
 8015b5e:	b02d      	add	sp, #180	; 0xb4
 8015b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b64:	2201      	movs	r2, #1
 8015b66:	2300      	movs	r3, #0
 8015b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015b70:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8015b74:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8015b78:	ab14      	add	r3, sp, #80	; 0x50
 8015b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015b7c:	f88d c048 	strb.w	ip, [sp, #72]	; 0x48
 8015b80:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8015bc0 <rcl_timer_init+0x164>
 8015b84:	9405      	str	r4, [sp, #20]
 8015b86:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015b8a:	f8cd c010 	str.w	ip, [sp, #16]
 8015b8e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8015b92:	4628      	mov	r0, r5
 8015b94:	f7ff fdfc 	bl	8015790 <rcl_clock_add_jump_callback>
 8015b98:	4680      	mov	r8, r0
 8015b9a:	2800      	cmp	r0, #0
 8015b9c:	d0a8      	beq.n	8015af0 <rcl_timer_init+0x94>
 8015b9e:	4658      	mov	r0, fp
 8015ba0:	f002 fece 	bl	8018940 <rcl_guard_condition_fini>
 8015ba4:	46c2      	mov	sl, r8
 8015ba6:	e772      	b.n	8015a8e <rcl_timer_init+0x32>
 8015ba8:	4658      	mov	r0, fp
 8015baa:	f002 fec9 	bl	8018940 <rcl_guard_condition_fini>
 8015bae:	4904      	ldr	r1, [pc, #16]	; (8015bc0 <rcl_timer_init+0x164>)
 8015bb0:	4622      	mov	r2, r4
 8015bb2:	4628      	mov	r0, r5
 8015bb4:	f7ff fe4c 	bl	8015850 <rcl_clock_remove_jump_callback>
 8015bb8:	f04f 0a0a 	mov.w	sl, #10
 8015bbc:	e767      	b.n	8015a8e <rcl_timer_init+0x32>
 8015bbe:	bf00      	nop
 8015bc0:	0801590d 	.word	0x0801590d

08015bc4 <rcl_timer_call>:
 8015bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bc8:	b08b      	sub	sp, #44	; 0x2c
 8015bca:	2800      	cmp	r0, #0
 8015bcc:	d06e      	beq.n	8015cac <rcl_timer_call+0xe8>
 8015bce:	6803      	ldr	r3, [r0, #0]
 8015bd0:	f3bf 8f5b 	dmb	ish
 8015bd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015bd8:	f3bf 8f5b 	dmb	ish
 8015bdc:	4604      	mov	r4, r0
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d159      	bne.n	8015c96 <rcl_timer_call+0xd2>
 8015be2:	6803      	ldr	r3, [r0, #0]
 8015be4:	a908      	add	r1, sp, #32
 8015be6:	6818      	ldr	r0, [r3, #0]
 8015be8:	f7ff fdc6 	bl	8015778 <rcl_clock_get_now>
 8015bec:	4605      	mov	r5, r0
 8015bee:	2800      	cmp	r0, #0
 8015bf0:	d14d      	bne.n	8015c8e <rcl_timer_call+0xca>
 8015bf2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015bf6:	2a00      	cmp	r2, #0
 8015bf8:	f173 0100 	sbcs.w	r1, r3, #0
 8015bfc:	db51      	blt.n	8015ca2 <rcl_timer_call+0xde>
 8015bfe:	6820      	ldr	r0, [r4, #0]
 8015c00:	2605      	movs	r6, #5
 8015c02:	9600      	str	r6, [sp, #0]
 8015c04:	3020      	adds	r0, #32
 8015c06:	f001 f893 	bl	8016d30 <__atomic_exchange_8>
 8015c0a:	6822      	ldr	r2, [r4, #0]
 8015c0c:	f3bf 8f5b 	dmb	ish
 8015c10:	4682      	mov	sl, r0
 8015c12:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8015c16:	f3bf 8f5b 	dmb	ish
 8015c1a:	6820      	ldr	r0, [r4, #0]
 8015c1c:	460b      	mov	r3, r1
 8015c1e:	3028      	adds	r0, #40	; 0x28
 8015c20:	4631      	mov	r1, r6
 8015c22:	9305      	str	r3, [sp, #20]
 8015c24:	f001 f81c 	bl	8016c60 <__atomic_load_8>
 8015c28:	4603      	mov	r3, r0
 8015c2a:	6820      	ldr	r0, [r4, #0]
 8015c2c:	460a      	mov	r2, r1
 8015c2e:	3018      	adds	r0, #24
 8015c30:	4631      	mov	r1, r6
 8015c32:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8015c36:	f001 f813 	bl	8016c60 <__atomic_load_8>
 8015c3a:	9b04      	ldr	r3, [sp, #16]
 8015c3c:	9a03      	ldr	r2, [sp, #12]
 8015c3e:	4606      	mov	r6, r0
 8015c40:	460f      	mov	r7, r1
 8015c42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015c46:	eb13 0806 	adds.w	r8, r3, r6
 8015c4a:	eb42 0907 	adc.w	r9, r2, r7
 8015c4e:	4580      	cmp	r8, r0
 8015c50:	eb79 0301 	sbcs.w	r3, r9, r1
 8015c54:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015c58:	460a      	mov	r2, r1
 8015c5a:	da04      	bge.n	8015c66 <rcl_timer_call+0xa2>
 8015c5c:	ea56 0307 	orrs.w	r3, r6, r7
 8015c60:	d129      	bne.n	8015cb6 <rcl_timer_call+0xf2>
 8015c62:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8015c66:	6820      	ldr	r0, [r4, #0]
 8015c68:	2105      	movs	r1, #5
 8015c6a:	4642      	mov	r2, r8
 8015c6c:	464b      	mov	r3, r9
 8015c6e:	3028      	adds	r0, #40	; 0x28
 8015c70:	9100      	str	r1, [sp, #0]
 8015c72:	f001 f829 	bl	8016cc8 <__atomic_store_8>
 8015c76:	f1bb 0f00 	cmp.w	fp, #0
 8015c7a:	d008      	beq.n	8015c8e <rcl_timer_call+0xca>
 8015c7c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015c80:	9905      	ldr	r1, [sp, #20]
 8015c82:	ebb2 020a 	subs.w	r2, r2, sl
 8015c86:	4620      	mov	r0, r4
 8015c88:	eb63 0301 	sbc.w	r3, r3, r1
 8015c8c:	47d8      	blx	fp
 8015c8e:	4628      	mov	r0, r5
 8015c90:	b00b      	add	sp, #44	; 0x2c
 8015c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c96:	f240 3521 	movw	r5, #801	; 0x321
 8015c9a:	4628      	mov	r0, r5
 8015c9c:	b00b      	add	sp, #44	; 0x2c
 8015c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ca2:	2501      	movs	r5, #1
 8015ca4:	4628      	mov	r0, r5
 8015ca6:	b00b      	add	sp, #44	; 0x2c
 8015ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cac:	250b      	movs	r5, #11
 8015cae:	4628      	mov	r0, r5
 8015cb0:	b00b      	add	sp, #44	; 0x2c
 8015cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cb6:	ebb0 0008 	subs.w	r0, r0, r8
 8015cba:	eb62 0109 	sbc.w	r1, r2, r9
 8015cbe:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8015cc2:	463b      	mov	r3, r7
 8015cc4:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8015cc8:	4632      	mov	r2, r6
 8015cca:	f7ea ffc5 	bl	8000c58 <__aeabi_ldivmod>
 8015cce:	1c43      	adds	r3, r0, #1
 8015cd0:	f141 0100 	adc.w	r1, r1, #0
 8015cd4:	fb00 7007 	mla	r0, r0, r7, r7
 8015cd8:	fb06 0001 	mla	r0, r6, r1, r0
 8015cdc:	fba3 6706 	umull	r6, r7, r3, r6
 8015ce0:	4407      	add	r7, r0
 8015ce2:	eb18 0806 	adds.w	r8, r8, r6
 8015ce6:	eb49 0907 	adc.w	r9, r9, r7
 8015cea:	e7bc      	b.n	8015c66 <rcl_timer_call+0xa2>

08015cec <rcl_timer_is_ready>:
 8015cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cf0:	b082      	sub	sp, #8
 8015cf2:	b310      	cbz	r0, 8015d3a <rcl_timer_is_ready+0x4e>
 8015cf4:	4688      	mov	r8, r1
 8015cf6:	b301      	cbz	r1, 8015d3a <rcl_timer_is_ready+0x4e>
 8015cf8:	6803      	ldr	r3, [r0, #0]
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	4669      	mov	r1, sp
 8015cfe:	6818      	ldr	r0, [r3, #0]
 8015d00:	f7ff fd3a 	bl	8015778 <rcl_clock_get_now>
 8015d04:	4605      	mov	r5, r0
 8015d06:	b118      	cbz	r0, 8015d10 <rcl_timer_is_ready+0x24>
 8015d08:	4628      	mov	r0, r5
 8015d0a:	b002      	add	sp, #8
 8015d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d10:	6820      	ldr	r0, [r4, #0]
 8015d12:	2105      	movs	r1, #5
 8015d14:	3028      	adds	r0, #40	; 0x28
 8015d16:	f000 ffa3 	bl	8016c60 <__atomic_load_8>
 8015d1a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015d1e:	1ac6      	subs	r6, r0, r3
 8015d20:	eb61 0702 	sbc.w	r7, r1, r2
 8015d24:	2e01      	cmp	r6, #1
 8015d26:	f177 0300 	sbcs.w	r3, r7, #0
 8015d2a:	db0b      	blt.n	8015d44 <rcl_timer_is_ready+0x58>
 8015d2c:	462b      	mov	r3, r5
 8015d2e:	4628      	mov	r0, r5
 8015d30:	f888 3000 	strb.w	r3, [r8]
 8015d34:	b002      	add	sp, #8
 8015d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d3a:	250b      	movs	r5, #11
 8015d3c:	4628      	mov	r0, r5
 8015d3e:	b002      	add	sp, #8
 8015d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d44:	6823      	ldr	r3, [r4, #0]
 8015d46:	f3bf 8f5b 	dmb	ish
 8015d4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015d4e:	f3bf 8f5b 	dmb	ish
 8015d52:	fab3 f383 	clz	r3, r3
 8015d56:	095b      	lsrs	r3, r3, #5
 8015d58:	e7e9      	b.n	8015d2e <rcl_timer_is_ready+0x42>
 8015d5a:	bf00      	nop

08015d5c <rcl_timer_get_time_until_next_call>:
 8015d5c:	b570      	push	{r4, r5, r6, lr}
 8015d5e:	b082      	sub	sp, #8
 8015d60:	b1d8      	cbz	r0, 8015d9a <rcl_timer_get_time_until_next_call+0x3e>
 8015d62:	460d      	mov	r5, r1
 8015d64:	b1c9      	cbz	r1, 8015d9a <rcl_timer_get_time_until_next_call+0x3e>
 8015d66:	6803      	ldr	r3, [r0, #0]
 8015d68:	4604      	mov	r4, r0
 8015d6a:	4669      	mov	r1, sp
 8015d6c:	6818      	ldr	r0, [r3, #0]
 8015d6e:	f7ff fd03 	bl	8015778 <rcl_clock_get_now>
 8015d72:	4606      	mov	r6, r0
 8015d74:	b110      	cbz	r0, 8015d7c <rcl_timer_get_time_until_next_call+0x20>
 8015d76:	4630      	mov	r0, r6
 8015d78:	b002      	add	sp, #8
 8015d7a:	bd70      	pop	{r4, r5, r6, pc}
 8015d7c:	6820      	ldr	r0, [r4, #0]
 8015d7e:	2105      	movs	r1, #5
 8015d80:	3028      	adds	r0, #40	; 0x28
 8015d82:	f000 ff6d 	bl	8016c60 <__atomic_load_8>
 8015d86:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015d8a:	1ac0      	subs	r0, r0, r3
 8015d8c:	eb61 0102 	sbc.w	r1, r1, r2
 8015d90:	e9c5 0100 	strd	r0, r1, [r5]
 8015d94:	4630      	mov	r0, r6
 8015d96:	b002      	add	sp, #8
 8015d98:	bd70      	pop	{r4, r5, r6, pc}
 8015d9a:	260b      	movs	r6, #11
 8015d9c:	4630      	mov	r0, r6
 8015d9e:	b002      	add	sp, #8
 8015da0:	bd70      	pop	{r4, r5, r6, pc}
 8015da2:	bf00      	nop

08015da4 <rcl_timer_is_canceled>:
 8015da4:	b168      	cbz	r0, 8015dc2 <rcl_timer_is_canceled+0x1e>
 8015da6:	b161      	cbz	r1, 8015dc2 <rcl_timer_is_canceled+0x1e>
 8015da8:	6803      	ldr	r3, [r0, #0]
 8015daa:	f3bf 8f5b 	dmb	ish
 8015dae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015db2:	f3bf 8f5b 	dmb	ish
 8015db6:	3b00      	subs	r3, #0
 8015db8:	bf18      	it	ne
 8015dba:	2301      	movne	r3, #1
 8015dbc:	700b      	strb	r3, [r1, #0]
 8015dbe:	2000      	movs	r0, #0
 8015dc0:	4770      	bx	lr
 8015dc2:	200b      	movs	r0, #11
 8015dc4:	4770      	bx	lr
 8015dc6:	bf00      	nop

08015dc8 <rcl_timer_get_guard_condition>:
 8015dc8:	b130      	cbz	r0, 8015dd8 <rcl_timer_get_guard_condition+0x10>
 8015dca:	6800      	ldr	r0, [r0, #0]
 8015dcc:	b120      	cbz	r0, 8015dd8 <rcl_timer_get_guard_condition+0x10>
 8015dce:	68c3      	ldr	r3, [r0, #12]
 8015dd0:	b10b      	cbz	r3, 8015dd6 <rcl_timer_get_guard_condition+0xe>
 8015dd2:	3008      	adds	r0, #8
 8015dd4:	4770      	bx	lr
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	4770      	bx	lr
 8015dda:	bf00      	nop

08015ddc <rcl_validate_enclave_name_with_size>:
 8015ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015dde:	b0c3      	sub	sp, #268	; 0x10c
 8015de0:	b1d0      	cbz	r0, 8015e18 <rcl_validate_enclave_name_with_size+0x3c>
 8015de2:	4615      	mov	r5, r2
 8015de4:	b1c2      	cbz	r2, 8015e18 <rcl_validate_enclave_name_with_size+0x3c>
 8015de6:	461f      	mov	r7, r3
 8015de8:	466a      	mov	r2, sp
 8015dea:	ab01      	add	r3, sp, #4
 8015dec:	460e      	mov	r6, r1
 8015dee:	f001 f993 	bl	8017118 <rmw_validate_namespace_with_size>
 8015df2:	4604      	mov	r4, r0
 8015df4:	b9e0      	cbnz	r0, 8015e30 <rcl_validate_enclave_name_with_size+0x54>
 8015df6:	9b00      	ldr	r3, [sp, #0]
 8015df8:	b923      	cbnz	r3, 8015e04 <rcl_validate_enclave_name_with_size+0x28>
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	602b      	str	r3, [r5, #0]
 8015dfe:	4620      	mov	r0, r4
 8015e00:	b043      	add	sp, #268	; 0x10c
 8015e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e04:	2b07      	cmp	r3, #7
 8015e06:	d00b      	beq.n	8015e20 <rcl_validate_enclave_name_with_size+0x44>
 8015e08:	1e5a      	subs	r2, r3, #1
 8015e0a:	2a05      	cmp	r2, #5
 8015e0c:	d82e      	bhi.n	8015e6c <rcl_validate_enclave_name_with_size+0x90>
 8015e0e:	e8df f002 	tbb	[pc, r2]
 8015e12:	211e      	.short	0x211e
 8015e14:	152a2724 	.word	0x152a2724
 8015e18:	240b      	movs	r4, #11
 8015e1a:	4620      	mov	r0, r4
 8015e1c:	b043      	add	sp, #268	; 0x10c
 8015e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e20:	2eff      	cmp	r6, #255	; 0xff
 8015e22:	d9ea      	bls.n	8015dfa <rcl_validate_enclave_name_with_size+0x1e>
 8015e24:	602b      	str	r3, [r5, #0]
 8015e26:	2f00      	cmp	r7, #0
 8015e28:	d0e9      	beq.n	8015dfe <rcl_validate_enclave_name_with_size+0x22>
 8015e2a:	23fe      	movs	r3, #254	; 0xfe
 8015e2c:	603b      	str	r3, [r7, #0]
 8015e2e:	e7e6      	b.n	8015dfe <rcl_validate_enclave_name_with_size+0x22>
 8015e30:	f7fe fdda 	bl	80149e8 <rcl_convert_rmw_ret_to_rcl_ret>
 8015e34:	4604      	mov	r4, r0
 8015e36:	4620      	mov	r0, r4
 8015e38:	b043      	add	sp, #268	; 0x10c
 8015e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e3c:	2306      	movs	r3, #6
 8015e3e:	602b      	str	r3, [r5, #0]
 8015e40:	2f00      	cmp	r7, #0
 8015e42:	d0dc      	beq.n	8015dfe <rcl_validate_enclave_name_with_size+0x22>
 8015e44:	9b01      	ldr	r3, [sp, #4]
 8015e46:	603b      	str	r3, [r7, #0]
 8015e48:	4620      	mov	r0, r4
 8015e4a:	b043      	add	sp, #268	; 0x10c
 8015e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e4e:	2301      	movs	r3, #1
 8015e50:	602b      	str	r3, [r5, #0]
 8015e52:	e7f5      	b.n	8015e40 <rcl_validate_enclave_name_with_size+0x64>
 8015e54:	2302      	movs	r3, #2
 8015e56:	602b      	str	r3, [r5, #0]
 8015e58:	e7f2      	b.n	8015e40 <rcl_validate_enclave_name_with_size+0x64>
 8015e5a:	2303      	movs	r3, #3
 8015e5c:	602b      	str	r3, [r5, #0]
 8015e5e:	e7ef      	b.n	8015e40 <rcl_validate_enclave_name_with_size+0x64>
 8015e60:	2304      	movs	r3, #4
 8015e62:	602b      	str	r3, [r5, #0]
 8015e64:	e7ec      	b.n	8015e40 <rcl_validate_enclave_name_with_size+0x64>
 8015e66:	2305      	movs	r3, #5
 8015e68:	602b      	str	r3, [r5, #0]
 8015e6a:	e7e9      	b.n	8015e40 <rcl_validate_enclave_name_with_size+0x64>
 8015e6c:	4a03      	ldr	r2, [pc, #12]	; (8015e7c <rcl_validate_enclave_name_with_size+0xa0>)
 8015e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015e72:	a802      	add	r0, sp, #8
 8015e74:	f001 f8de 	bl	8017034 <rcutils_snprintf>
 8015e78:	2401      	movs	r4, #1
 8015e7a:	e7c0      	b.n	8015dfe <rcl_validate_enclave_name_with_size+0x22>
 8015e7c:	0801e614 	.word	0x0801e614

08015e80 <rcl_validate_enclave_name>:
 8015e80:	b168      	cbz	r0, 8015e9e <rcl_validate_enclave_name+0x1e>
 8015e82:	b570      	push	{r4, r5, r6, lr}
 8015e84:	460d      	mov	r5, r1
 8015e86:	4616      	mov	r6, r2
 8015e88:	4604      	mov	r4, r0
 8015e8a:	f7ea f9ab 	bl	80001e4 <strlen>
 8015e8e:	4633      	mov	r3, r6
 8015e90:	4601      	mov	r1, r0
 8015e92:	462a      	mov	r2, r5
 8015e94:	4620      	mov	r0, r4
 8015e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e9a:	f7ff bf9f 	b.w	8015ddc <rcl_validate_enclave_name_with_size>
 8015e9e:	200b      	movs	r0, #11
 8015ea0:	4770      	bx	lr
 8015ea2:	bf00      	nop

08015ea4 <rcl_validate_topic_name>:
 8015ea4:	2800      	cmp	r0, #0
 8015ea6:	f000 808b 	beq.w	8015fc0 <rcl_validate_topic_name+0x11c>
 8015eaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015eae:	460e      	mov	r6, r1
 8015eb0:	2900      	cmp	r1, #0
 8015eb2:	f000 808c 	beq.w	8015fce <rcl_validate_topic_name+0x12a>
 8015eb6:	4617      	mov	r7, r2
 8015eb8:	4605      	mov	r5, r0
 8015eba:	f7ea f993 	bl	80001e4 <strlen>
 8015ebe:	b1b0      	cbz	r0, 8015eee <rcl_validate_topic_name+0x4a>
 8015ec0:	f895 9000 	ldrb.w	r9, [r5]
 8015ec4:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8016074 <rcl_validate_topic_name+0x1d0>
 8015ec8:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8015ecc:	f013 0304 	ands.w	r3, r3, #4
 8015ed0:	d178      	bne.n	8015fc4 <rcl_validate_topic_name+0x120>
 8015ed2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8015ed6:	f815 2008 	ldrb.w	r2, [r5, r8]
 8015eda:	2a2f      	cmp	r2, #47	; 0x2f
 8015edc:	d10e      	bne.n	8015efc <rcl_validate_topic_name+0x58>
 8015ede:	2202      	movs	r2, #2
 8015ee0:	6032      	str	r2, [r6, #0]
 8015ee2:	b36f      	cbz	r7, 8015f40 <rcl_validate_topic_name+0x9c>
 8015ee4:	f8c7 8000 	str.w	r8, [r7]
 8015ee8:	4618      	mov	r0, r3
 8015eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eee:	2301      	movs	r3, #1
 8015ef0:	6033      	str	r3, [r6, #0]
 8015ef2:	b32f      	cbz	r7, 8015f40 <rcl_validate_topic_name+0x9c>
 8015ef4:	2000      	movs	r0, #0
 8015ef6:	6038      	str	r0, [r7, #0]
 8015ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015efc:	461c      	mov	r4, r3
 8015efe:	4619      	mov	r1, r3
 8015f00:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8015f04:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015f08:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8015f0c:	f1be 0f09 	cmp.w	lr, #9
 8015f10:	d946      	bls.n	8015fa0 <rcl_validate_topic_name+0xfc>
 8015f12:	f022 0e20 	bic.w	lr, r2, #32
 8015f16:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8015f1a:	f1be 0f19 	cmp.w	lr, #25
 8015f1e:	d93f      	bls.n	8015fa0 <rcl_validate_topic_name+0xfc>
 8015f20:	2a5f      	cmp	r2, #95	; 0x5f
 8015f22:	d014      	beq.n	8015f4e <rcl_validate_topic_name+0xaa>
 8015f24:	2a2f      	cmp	r2, #47	; 0x2f
 8015f26:	d05b      	beq.n	8015fe0 <rcl_validate_topic_name+0x13c>
 8015f28:	2a7e      	cmp	r2, #126	; 0x7e
 8015f2a:	d052      	beq.n	8015fd2 <rcl_validate_topic_name+0x12e>
 8015f2c:	2a7b      	cmp	r2, #123	; 0x7b
 8015f2e:	d00a      	beq.n	8015f46 <rcl_validate_topic_name+0xa2>
 8015f30:	2a7d      	cmp	r2, #125	; 0x7d
 8015f32:	d16f      	bne.n	8016014 <rcl_validate_topic_name+0x170>
 8015f34:	2c00      	cmp	r4, #0
 8015f36:	d15e      	bne.n	8015ff6 <rcl_validate_topic_name+0x152>
 8015f38:	2305      	movs	r3, #5
 8015f3a:	6033      	str	r3, [r6, #0]
 8015f3c:	b107      	cbz	r7, 8015f40 <rcl_validate_topic_name+0x9c>
 8015f3e:	6039      	str	r1, [r7, #0]
 8015f40:	2000      	movs	r0, #0
 8015f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f46:	2c00      	cmp	r4, #0
 8015f48:	d14c      	bne.n	8015fe4 <rcl_validate_topic_name+0x140>
 8015f4a:	460b      	mov	r3, r1
 8015f4c:	2401      	movs	r4, #1
 8015f4e:	3101      	adds	r1, #1
 8015f50:	4288      	cmp	r0, r1
 8015f52:	d1d7      	bne.n	8015f04 <rcl_validate_topic_name+0x60>
 8015f54:	2c00      	cmp	r4, #0
 8015f56:	d156      	bne.n	8016006 <rcl_validate_topic_name+0x162>
 8015f58:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8015f5c:	4620      	mov	r0, r4
 8015f5e:	d061      	beq.n	8016024 <rcl_validate_topic_name+0x180>
 8015f60:	f108 0e01 	add.w	lr, r8, #1
 8015f64:	e007      	b.n	8015f76 <rcl_validate_topic_name+0xd2>
 8015f66:	2801      	cmp	r0, #1
 8015f68:	d047      	beq.n	8015ffa <rcl_validate_topic_name+0x156>
 8015f6a:	461a      	mov	r2, r3
 8015f6c:	4291      	cmp	r1, r2
 8015f6e:	4618      	mov	r0, r3
 8015f70:	f105 0501 	add.w	r5, r5, #1
 8015f74:	d944      	bls.n	8016000 <rcl_validate_topic_name+0x15c>
 8015f76:	4580      	cmp	r8, r0
 8015f78:	f100 0301 	add.w	r3, r0, #1
 8015f7c:	d037      	beq.n	8015fee <rcl_validate_topic_name+0x14a>
 8015f7e:	782a      	ldrb	r2, [r5, #0]
 8015f80:	2a2f      	cmp	r2, #47	; 0x2f
 8015f82:	d1f0      	bne.n	8015f66 <rcl_validate_topic_name+0xc2>
 8015f84:	786b      	ldrb	r3, [r5, #1]
 8015f86:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8015f8a:	1c43      	adds	r3, r0, #1
 8015f8c:	0760      	lsls	r0, r4, #29
 8015f8e:	461a      	mov	r2, r3
 8015f90:	d5ec      	bpl.n	8015f6c <rcl_validate_topic_name+0xc8>
 8015f92:	2304      	movs	r3, #4
 8015f94:	6033      	str	r3, [r6, #0]
 8015f96:	2f00      	cmp	r7, #0
 8015f98:	d0d2      	beq.n	8015f40 <rcl_validate_topic_name+0x9c>
 8015f9a:	603a      	str	r2, [r7, #0]
 8015f9c:	2000      	movs	r0, #0
 8015f9e:	e7ab      	b.n	8015ef8 <rcl_validate_topic_name+0x54>
 8015fa0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015fa4:	0752      	lsls	r2, r2, #29
 8015fa6:	d5d2      	bpl.n	8015f4e <rcl_validate_topic_name+0xaa>
 8015fa8:	2c00      	cmp	r4, #0
 8015faa:	d0d0      	beq.n	8015f4e <rcl_validate_topic_name+0xaa>
 8015fac:	2900      	cmp	r1, #0
 8015fae:	d0ce      	beq.n	8015f4e <rcl_validate_topic_name+0xaa>
 8015fb0:	1e4a      	subs	r2, r1, #1
 8015fb2:	429a      	cmp	r2, r3
 8015fb4:	d1cb      	bne.n	8015f4e <rcl_validate_topic_name+0xaa>
 8015fb6:	2309      	movs	r3, #9
 8015fb8:	6033      	str	r3, [r6, #0]
 8015fba:	2f00      	cmp	r7, #0
 8015fbc:	d1bf      	bne.n	8015f3e <rcl_validate_topic_name+0x9a>
 8015fbe:	e7bf      	b.n	8015f40 <rcl_validate_topic_name+0x9c>
 8015fc0:	200b      	movs	r0, #11
 8015fc2:	4770      	bx	lr
 8015fc4:	2304      	movs	r3, #4
 8015fc6:	6033      	str	r3, [r6, #0]
 8015fc8:	2f00      	cmp	r7, #0
 8015fca:	d193      	bne.n	8015ef4 <rcl_validate_topic_name+0x50>
 8015fcc:	e7b8      	b.n	8015f40 <rcl_validate_topic_name+0x9c>
 8015fce:	200b      	movs	r0, #11
 8015fd0:	e792      	b.n	8015ef8 <rcl_validate_topic_name+0x54>
 8015fd2:	2900      	cmp	r1, #0
 8015fd4:	d0bb      	beq.n	8015f4e <rcl_validate_topic_name+0xaa>
 8015fd6:	2306      	movs	r3, #6
 8015fd8:	6033      	str	r3, [r6, #0]
 8015fda:	2f00      	cmp	r7, #0
 8015fdc:	d1af      	bne.n	8015f3e <rcl_validate_topic_name+0x9a>
 8015fde:	e7af      	b.n	8015f40 <rcl_validate_topic_name+0x9c>
 8015fe0:	2c00      	cmp	r4, #0
 8015fe2:	d0b4      	beq.n	8015f4e <rcl_validate_topic_name+0xaa>
 8015fe4:	2308      	movs	r3, #8
 8015fe6:	6033      	str	r3, [r6, #0]
 8015fe8:	2f00      	cmp	r7, #0
 8015fea:	d1a8      	bne.n	8015f3e <rcl_validate_topic_name+0x9a>
 8015fec:	e7a8      	b.n	8015f40 <rcl_validate_topic_name+0x9c>
 8015fee:	4672      	mov	r2, lr
 8015ff0:	f108 0301 	add.w	r3, r8, #1
 8015ff4:	e7ba      	b.n	8015f6c <rcl_validate_topic_name+0xc8>
 8015ff6:	2400      	movs	r4, #0
 8015ff8:	e7a9      	b.n	8015f4e <rcl_validate_topic_name+0xaa>
 8015ffa:	2202      	movs	r2, #2
 8015ffc:	4613      	mov	r3, r2
 8015ffe:	e7b5      	b.n	8015f6c <rcl_validate_topic_name+0xc8>
 8016000:	2000      	movs	r0, #0
 8016002:	6030      	str	r0, [r6, #0]
 8016004:	e778      	b.n	8015ef8 <rcl_validate_topic_name+0x54>
 8016006:	2205      	movs	r2, #5
 8016008:	6032      	str	r2, [r6, #0]
 801600a:	2f00      	cmp	r7, #0
 801600c:	d098      	beq.n	8015f40 <rcl_validate_topic_name+0x9c>
 801600e:	603b      	str	r3, [r7, #0]
 8016010:	2000      	movs	r0, #0
 8016012:	e771      	b.n	8015ef8 <rcl_validate_topic_name+0x54>
 8016014:	2c00      	cmp	r4, #0
 8016016:	bf14      	ite	ne
 8016018:	2308      	movne	r3, #8
 801601a:	2303      	moveq	r3, #3
 801601c:	6033      	str	r3, [r6, #0]
 801601e:	2f00      	cmp	r7, #0
 8016020:	d18d      	bne.n	8015f3e <rcl_validate_topic_name+0x9a>
 8016022:	e78d      	b.n	8015f40 <rcl_validate_topic_name+0x9c>
 8016024:	f108 0401 	add.w	r4, r8, #1
 8016028:	e007      	b.n	801603a <rcl_validate_topic_name+0x196>
 801602a:	2801      	cmp	r0, #1
 801602c:	d019      	beq.n	8016062 <rcl_validate_topic_name+0x1be>
 801602e:	461a      	mov	r2, r3
 8016030:	4291      	cmp	r1, r2
 8016032:	4618      	mov	r0, r3
 8016034:	f105 0501 	add.w	r5, r5, #1
 8016038:	d9e2      	bls.n	8016000 <rcl_validate_topic_name+0x15c>
 801603a:	4580      	cmp	r8, r0
 801603c:	f100 0301 	add.w	r3, r0, #1
 8016040:	d00b      	beq.n	801605a <rcl_validate_topic_name+0x1b6>
 8016042:	782a      	ldrb	r2, [r5, #0]
 8016044:	2a2f      	cmp	r2, #47	; 0x2f
 8016046:	d1f0      	bne.n	801602a <rcl_validate_topic_name+0x186>
 8016048:	786b      	ldrb	r3, [r5, #1]
 801604a:	f81c e003 	ldrb.w	lr, [ip, r3]
 801604e:	1c43      	adds	r3, r0, #1
 8016050:	f01e 0f04 	tst.w	lr, #4
 8016054:	461a      	mov	r2, r3
 8016056:	d0eb      	beq.n	8016030 <rcl_validate_topic_name+0x18c>
 8016058:	e79b      	b.n	8015f92 <rcl_validate_topic_name+0xee>
 801605a:	4622      	mov	r2, r4
 801605c:	f108 0301 	add.w	r3, r8, #1
 8016060:	e7e6      	b.n	8016030 <rcl_validate_topic_name+0x18c>
 8016062:	2307      	movs	r3, #7
 8016064:	6033      	str	r3, [r6, #0]
 8016066:	2f00      	cmp	r7, #0
 8016068:	f43f af6a 	beq.w	8015f40 <rcl_validate_topic_name+0x9c>
 801606c:	6038      	str	r0, [r7, #0]
 801606e:	2000      	movs	r0, #0
 8016070:	e742      	b.n	8015ef8 <rcl_validate_topic_name+0x54>
 8016072:	bf00      	nop
 8016074:	0801ea89 	.word	0x0801ea89

08016078 <rcl_get_zero_initialized_wait_set>:
 8016078:	b470      	push	{r4, r5, r6}
 801607a:	4d07      	ldr	r5, [pc, #28]	; (8016098 <rcl_get_zero_initialized_wait_set+0x20>)
 801607c:	4606      	mov	r6, r0
 801607e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016080:	4634      	mov	r4, r6
 8016082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801608a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801608c:	682b      	ldr	r3, [r5, #0]
 801608e:	6023      	str	r3, [r4, #0]
 8016090:	4630      	mov	r0, r6
 8016092:	bc70      	pop	{r4, r5, r6}
 8016094:	4770      	bx	lr
 8016096:	bf00      	nop
 8016098:	0801e674 	.word	0x0801e674

0801609c <rcl_wait_set_is_valid>:
 801609c:	b118      	cbz	r0, 80160a6 <rcl_wait_set_is_valid+0xa>
 801609e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80160a0:	3800      	subs	r0, #0
 80160a2:	bf18      	it	ne
 80160a4:	2001      	movne	r0, #1
 80160a6:	4770      	bx	lr

080160a8 <rcl_wait_set_fini>:
 80160a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160ac:	b082      	sub	sp, #8
 80160ae:	2800      	cmp	r0, #0
 80160b0:	f000 8095 	beq.w	80161de <rcl_wait_set_fini+0x136>
 80160b4:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80160b6:	4604      	mov	r4, r0
 80160b8:	2e00      	cmp	r6, #0
 80160ba:	f000 808c 	beq.w	80161d6 <rcl_wait_set_fini+0x12e>
 80160be:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80160c0:	f001 fd1a 	bl	8017af8 <rmw_destroy_wait_set>
 80160c4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80160c6:	1e06      	subs	r6, r0, #0
 80160c8:	bf18      	it	ne
 80160ca:	f44f 7661 	movne.w	r6, #900	; 0x384
 80160ce:	2d00      	cmp	r5, #0
 80160d0:	f000 8081 	beq.w	80161d6 <rcl_wait_set_fini+0x12e>
 80160d4:	6820      	ldr	r0, [r4, #0]
 80160d6:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80160da:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80160dc:	2700      	movs	r7, #0
 80160de:	6067      	str	r7, [r4, #4]
 80160e0:	602f      	str	r7, [r5, #0]
 80160e2:	b120      	cbz	r0, 80160ee <rcl_wait_set_fini+0x46>
 80160e4:	9101      	str	r1, [sp, #4]
 80160e6:	47c0      	blx	r8
 80160e8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80160ea:	9901      	ldr	r1, [sp, #4]
 80160ec:	6027      	str	r7, [r4, #0]
 80160ee:	68a8      	ldr	r0, [r5, #8]
 80160f0:	b120      	cbz	r0, 80160fc <rcl_wait_set_fini+0x54>
 80160f2:	47c0      	blx	r8
 80160f4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80160f6:	2300      	movs	r3, #0
 80160f8:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80160fc:	68a0      	ldr	r0, [r4, #8]
 80160fe:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8016100:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016102:	f04f 0800 	mov.w	r8, #0
 8016106:	f8c4 800c 	str.w	r8, [r4, #12]
 801610a:	f8c5 800c 	str.w	r8, [r5, #12]
 801610e:	b128      	cbz	r0, 801611c <rcl_wait_set_fini+0x74>
 8016110:	47b8      	blx	r7
 8016112:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016114:	f8c4 8008 	str.w	r8, [r4, #8]
 8016118:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801611a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801611c:	6968      	ldr	r0, [r5, #20]
 801611e:	f04f 0800 	mov.w	r8, #0
 8016122:	f8c5 8010 	str.w	r8, [r5, #16]
 8016126:	b128      	cbz	r0, 8016134 <rcl_wait_set_fini+0x8c>
 8016128:	47b8      	blx	r7
 801612a:	f8c5 8014 	str.w	r8, [r5, #20]
 801612e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016130:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8016132:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016134:	6920      	ldr	r0, [r4, #16]
 8016136:	f04f 0800 	mov.w	r8, #0
 801613a:	f8c4 8014 	str.w	r8, [r4, #20]
 801613e:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8016142:	b128      	cbz	r0, 8016150 <rcl_wait_set_fini+0xa8>
 8016144:	47b8      	blx	r7
 8016146:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016148:	f8c4 8010 	str.w	r8, [r4, #16]
 801614c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801614e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016150:	69a0      	ldr	r0, [r4, #24]
 8016152:	f04f 0800 	mov.w	r8, #0
 8016156:	f8c4 801c 	str.w	r8, [r4, #28]
 801615a:	f8c5 8018 	str.w	r8, [r5, #24]
 801615e:	b128      	cbz	r0, 801616c <rcl_wait_set_fini+0xc4>
 8016160:	9101      	str	r1, [sp, #4]
 8016162:	47b8      	blx	r7
 8016164:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016166:	9901      	ldr	r1, [sp, #4]
 8016168:	f8c4 8018 	str.w	r8, [r4, #24]
 801616c:	6a28      	ldr	r0, [r5, #32]
 801616e:	b120      	cbz	r0, 801617a <rcl_wait_set_fini+0xd2>
 8016170:	47b8      	blx	r7
 8016172:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016174:	2300      	movs	r3, #0
 8016176:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801617a:	6a20      	ldr	r0, [r4, #32]
 801617c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8016180:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016182:	2700      	movs	r7, #0
 8016184:	6267      	str	r7, [r4, #36]	; 0x24
 8016186:	626f      	str	r7, [r5, #36]	; 0x24
 8016188:	b120      	cbz	r0, 8016194 <rcl_wait_set_fini+0xec>
 801618a:	9101      	str	r1, [sp, #4]
 801618c:	47c0      	blx	r8
 801618e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016190:	9901      	ldr	r1, [sp, #4]
 8016192:	6227      	str	r7, [r4, #32]
 8016194:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8016196:	b120      	cbz	r0, 80161a2 <rcl_wait_set_fini+0xfa>
 8016198:	47c0      	blx	r8
 801619a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801619c:	2300      	movs	r3, #0
 801619e:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80161a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80161a4:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80161a8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80161aa:	2700      	movs	r7, #0
 80161ac:	62e7      	str	r7, [r4, #44]	; 0x2c
 80161ae:	632f      	str	r7, [r5, #48]	; 0x30
 80161b0:	b120      	cbz	r0, 80161bc <rcl_wait_set_fini+0x114>
 80161b2:	9101      	str	r1, [sp, #4]
 80161b4:	47c0      	blx	r8
 80161b6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80161b8:	9901      	ldr	r1, [sp, #4]
 80161ba:	62a7      	str	r7, [r4, #40]	; 0x28
 80161bc:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80161be:	b120      	cbz	r0, 80161ca <rcl_wait_set_fini+0x122>
 80161c0:	47c0      	blx	r8
 80161c2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80161c4:	2300      	movs	r3, #0
 80161c6:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 80161ca:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80161cc:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80161ce:	4628      	mov	r0, r5
 80161d0:	4798      	blx	r3
 80161d2:	2300      	movs	r3, #0
 80161d4:	6323      	str	r3, [r4, #48]	; 0x30
 80161d6:	4630      	mov	r0, r6
 80161d8:	b002      	add	sp, #8
 80161da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161de:	260b      	movs	r6, #11
 80161e0:	4630      	mov	r0, r6
 80161e2:	b002      	add	sp, #8
 80161e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080161e8 <rcl_wait_set_add_subscription>:
 80161e8:	b320      	cbz	r0, 8016234 <rcl_wait_set_add_subscription+0x4c>
 80161ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80161ec:	b570      	push	{r4, r5, r6, lr}
 80161ee:	4604      	mov	r4, r0
 80161f0:	b1d3      	cbz	r3, 8016228 <rcl_wait_set_add_subscription+0x40>
 80161f2:	b319      	cbz	r1, 801623c <rcl_wait_set_add_subscription+0x54>
 80161f4:	681d      	ldr	r5, [r3, #0]
 80161f6:	6860      	ldr	r0, [r4, #4]
 80161f8:	4285      	cmp	r5, r0
 80161fa:	d218      	bcs.n	801622e <rcl_wait_set_add_subscription+0x46>
 80161fc:	6820      	ldr	r0, [r4, #0]
 80161fe:	1c6e      	adds	r6, r5, #1
 8016200:	601e      	str	r6, [r3, #0]
 8016202:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016206:	b102      	cbz	r2, 801620a <rcl_wait_set_add_subscription+0x22>
 8016208:	6015      	str	r5, [r2, #0]
 801620a:	4608      	mov	r0, r1
 801620c:	f7f7 fdfe 	bl	800de0c <rcl_subscription_get_rmw_handle>
 8016210:	b190      	cbz	r0, 8016238 <rcl_wait_set_add_subscription+0x50>
 8016212:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016214:	6842      	ldr	r2, [r0, #4]
 8016216:	689b      	ldr	r3, [r3, #8]
 8016218:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801621c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801621e:	6853      	ldr	r3, [r2, #4]
 8016220:	3301      	adds	r3, #1
 8016222:	6053      	str	r3, [r2, #4]
 8016224:	2000      	movs	r0, #0
 8016226:	bd70      	pop	{r4, r5, r6, pc}
 8016228:	f44f 7061 	mov.w	r0, #900	; 0x384
 801622c:	bd70      	pop	{r4, r5, r6, pc}
 801622e:	f240 3086 	movw	r0, #902	; 0x386
 8016232:	bd70      	pop	{r4, r5, r6, pc}
 8016234:	200b      	movs	r0, #11
 8016236:	4770      	bx	lr
 8016238:	2001      	movs	r0, #1
 801623a:	bd70      	pop	{r4, r5, r6, pc}
 801623c:	200b      	movs	r0, #11
 801623e:	bd70      	pop	{r4, r5, r6, pc}

08016240 <rcl_wait_set_clear>:
 8016240:	2800      	cmp	r0, #0
 8016242:	d073      	beq.n	801632c <rcl_wait_set_clear+0xec>
 8016244:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016246:	b510      	push	{r4, lr}
 8016248:	4604      	mov	r4, r0
 801624a:	2b00      	cmp	r3, #0
 801624c:	d070      	beq.n	8016330 <rcl_wait_set_clear+0xf0>
 801624e:	6800      	ldr	r0, [r0, #0]
 8016250:	b138      	cbz	r0, 8016262 <rcl_wait_set_clear+0x22>
 8016252:	6862      	ldr	r2, [r4, #4]
 8016254:	2100      	movs	r1, #0
 8016256:	0092      	lsls	r2, r2, #2
 8016258:	f002 fde4 	bl	8018e24 <memset>
 801625c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801625e:	2200      	movs	r2, #0
 8016260:	601a      	str	r2, [r3, #0]
 8016262:	68a0      	ldr	r0, [r4, #8]
 8016264:	b138      	cbz	r0, 8016276 <rcl_wait_set_clear+0x36>
 8016266:	68e2      	ldr	r2, [r4, #12]
 8016268:	2100      	movs	r1, #0
 801626a:	0092      	lsls	r2, r2, #2
 801626c:	f002 fdda 	bl	8018e24 <memset>
 8016270:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016272:	2200      	movs	r2, #0
 8016274:	60da      	str	r2, [r3, #12]
 8016276:	69a0      	ldr	r0, [r4, #24]
 8016278:	b138      	cbz	r0, 801628a <rcl_wait_set_clear+0x4a>
 801627a:	69e2      	ldr	r2, [r4, #28]
 801627c:	2100      	movs	r1, #0
 801627e:	0092      	lsls	r2, r2, #2
 8016280:	f002 fdd0 	bl	8018e24 <memset>
 8016284:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016286:	2200      	movs	r2, #0
 8016288:	619a      	str	r2, [r3, #24]
 801628a:	6a20      	ldr	r0, [r4, #32]
 801628c:	b138      	cbz	r0, 801629e <rcl_wait_set_clear+0x5e>
 801628e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016290:	2100      	movs	r1, #0
 8016292:	0092      	lsls	r2, r2, #2
 8016294:	f002 fdc6 	bl	8018e24 <memset>
 8016298:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801629a:	2200      	movs	r2, #0
 801629c:	625a      	str	r2, [r3, #36]	; 0x24
 801629e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80162a0:	b138      	cbz	r0, 80162b2 <rcl_wait_set_clear+0x72>
 80162a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80162a4:	2100      	movs	r1, #0
 80162a6:	0092      	lsls	r2, r2, #2
 80162a8:	f002 fdbc 	bl	8018e24 <memset>
 80162ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80162ae:	2200      	movs	r2, #0
 80162b0:	631a      	str	r2, [r3, #48]	; 0x30
 80162b2:	6920      	ldr	r0, [r4, #16]
 80162b4:	b138      	cbz	r0, 80162c6 <rcl_wait_set_clear+0x86>
 80162b6:	6962      	ldr	r2, [r4, #20]
 80162b8:	2100      	movs	r1, #0
 80162ba:	0092      	lsls	r2, r2, #2
 80162bc:	f002 fdb2 	bl	8018e24 <memset>
 80162c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80162c2:	2200      	movs	r2, #0
 80162c4:	641a      	str	r2, [r3, #64]	; 0x40
 80162c6:	6898      	ldr	r0, [r3, #8]
 80162c8:	b138      	cbz	r0, 80162da <rcl_wait_set_clear+0x9a>
 80162ca:	685a      	ldr	r2, [r3, #4]
 80162cc:	2100      	movs	r1, #0
 80162ce:	0092      	lsls	r2, r2, #2
 80162d0:	f002 fda8 	bl	8018e24 <memset>
 80162d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80162d6:	2200      	movs	r2, #0
 80162d8:	605a      	str	r2, [r3, #4]
 80162da:	6958      	ldr	r0, [r3, #20]
 80162dc:	b138      	cbz	r0, 80162ee <rcl_wait_set_clear+0xae>
 80162de:	691a      	ldr	r2, [r3, #16]
 80162e0:	2100      	movs	r1, #0
 80162e2:	0092      	lsls	r2, r2, #2
 80162e4:	f002 fd9e 	bl	8018e24 <memset>
 80162e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80162ea:	2200      	movs	r2, #0
 80162ec:	611a      	str	r2, [r3, #16]
 80162ee:	6a18      	ldr	r0, [r3, #32]
 80162f0:	b138      	cbz	r0, 8016302 <rcl_wait_set_clear+0xc2>
 80162f2:	69da      	ldr	r2, [r3, #28]
 80162f4:	2100      	movs	r1, #0
 80162f6:	0092      	lsls	r2, r2, #2
 80162f8:	f002 fd94 	bl	8018e24 <memset>
 80162fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80162fe:	2200      	movs	r2, #0
 8016300:	61da      	str	r2, [r3, #28]
 8016302:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8016304:	b138      	cbz	r0, 8016316 <rcl_wait_set_clear+0xd6>
 8016306:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016308:	2100      	movs	r1, #0
 801630a:	0092      	lsls	r2, r2, #2
 801630c:	f002 fd8a 	bl	8018e24 <memset>
 8016310:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016312:	2200      	movs	r2, #0
 8016314:	629a      	str	r2, [r3, #40]	; 0x28
 8016316:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016318:	b138      	cbz	r0, 801632a <rcl_wait_set_clear+0xea>
 801631a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801631c:	2100      	movs	r1, #0
 801631e:	0092      	lsls	r2, r2, #2
 8016320:	f002 fd80 	bl	8018e24 <memset>
 8016324:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016326:	2000      	movs	r0, #0
 8016328:	6358      	str	r0, [r3, #52]	; 0x34
 801632a:	bd10      	pop	{r4, pc}
 801632c:	200b      	movs	r0, #11
 801632e:	4770      	bx	lr
 8016330:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016334:	bd10      	pop	{r4, pc}
 8016336:	bf00      	nop

08016338 <rcl_wait_set_resize>:
 8016338:	2800      	cmp	r0, #0
 801633a:	f000 81a6 	beq.w	801668a <rcl_wait_set_resize+0x352>
 801633e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016342:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 8016346:	b083      	sub	sp, #12
 8016348:	4604      	mov	r4, r0
 801634a:	f1ba 0f00 	cmp.w	sl, #0
 801634e:	f000 819e 	beq.w	801668e <rcl_wait_set_resize+0x356>
 8016352:	461e      	mov	r6, r3
 8016354:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 8016358:	f04f 0800 	mov.w	r8, #0
 801635c:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 8016360:	9300      	str	r3, [sp, #0]
 8016362:	f8c0 8004 	str.w	r8, [r0, #4]
 8016366:	460f      	mov	r7, r1
 8016368:	4615      	mov	r5, r2
 801636a:	f8ca 8000 	str.w	r8, [sl]
 801636e:	2900      	cmp	r1, #0
 8016370:	f000 80c9 	beq.w	8016506 <rcl_wait_set_resize+0x1ce>
 8016374:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8016378:	6800      	ldr	r0, [r0, #0]
 801637a:	4651      	mov	r1, sl
 801637c:	464a      	mov	r2, r9
 801637e:	4798      	blx	r3
 8016380:	6020      	str	r0, [r4, #0]
 8016382:	2800      	cmp	r0, #0
 8016384:	f000 80d8 	beq.w	8016538 <rcl_wait_set_resize+0x200>
 8016388:	4652      	mov	r2, sl
 801638a:	4641      	mov	r1, r8
 801638c:	f002 fd4a 	bl	8018e24 <memset>
 8016390:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016392:	6067      	str	r7, [r4, #4]
 8016394:	6898      	ldr	r0, [r3, #8]
 8016396:	f8c3 8004 	str.w	r8, [r3, #4]
 801639a:	9301      	str	r3, [sp, #4]
 801639c:	464a      	mov	r2, r9
 801639e:	9b00      	ldr	r3, [sp, #0]
 80163a0:	4651      	mov	r1, sl
 80163a2:	4798      	blx	r3
 80163a4:	9b01      	ldr	r3, [sp, #4]
 80163a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80163a8:	6098      	str	r0, [r3, #8]
 80163aa:	6897      	ldr	r7, [r2, #8]
 80163ac:	2f00      	cmp	r7, #0
 80163ae:	f000 80be 	beq.w	801652e <rcl_wait_set_resize+0x1f6>
 80163b2:	4652      	mov	r2, sl
 80163b4:	4641      	mov	r1, r8
 80163b6:	4638      	mov	r0, r7
 80163b8:	f002 fd34 	bl	8018e24 <memset>
 80163bc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80163c0:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80163c4:	2700      	movs	r7, #0
 80163c6:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 80163ca:	60e7      	str	r7, [r4, #12]
 80163cc:	f8ca 700c 	str.w	r7, [sl, #12]
 80163d0:	2d00      	cmp	r5, #0
 80163d2:	f040 80b5 	bne.w	8016540 <rcl_wait_set_resize+0x208>
 80163d6:	68a0      	ldr	r0, [r4, #8]
 80163d8:	b130      	cbz	r0, 80163e8 <rcl_wait_set_resize+0xb0>
 80163da:	4641      	mov	r1, r8
 80163dc:	4790      	blx	r2
 80163de:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80163e2:	60a5      	str	r5, [r4, #8]
 80163e4:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80163e8:	2700      	movs	r7, #0
 80163ea:	19ad      	adds	r5, r5, r6
 80163ec:	f8ca 7010 	str.w	r7, [sl, #16]
 80163f0:	f040 80be 	bne.w	8016570 <rcl_wait_set_resize+0x238>
 80163f4:	f8da 0014 	ldr.w	r0, [sl, #20]
 80163f8:	b148      	cbz	r0, 801640e <rcl_wait_set_resize+0xd6>
 80163fa:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 80163fe:	4641      	mov	r1, r8
 8016400:	4798      	blx	r3
 8016402:	f8ca 5014 	str.w	r5, [sl, #20]
 8016406:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801640a:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801640e:	2500      	movs	r5, #0
 8016410:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8016414:	6165      	str	r5, [r4, #20]
 8016416:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 801641a:	2e00      	cmp	r6, #0
 801641c:	f040 80bf 	bne.w	801659e <rcl_wait_set_resize+0x266>
 8016420:	6920      	ldr	r0, [r4, #16]
 8016422:	b140      	cbz	r0, 8016436 <rcl_wait_set_resize+0xfe>
 8016424:	4641      	mov	r1, r8
 8016426:	47c8      	blx	r9
 8016428:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801642c:	6126      	str	r6, [r4, #16]
 801642e:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8016432:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016438:	2500      	movs	r5, #0
 801643a:	61e5      	str	r5, [r4, #28]
 801643c:	f8ca 5018 	str.w	r5, [sl, #24]
 8016440:	2b00      	cmp	r3, #0
 8016442:	f040 80c1 	bne.w	80165c8 <rcl_wait_set_resize+0x290>
 8016446:	69a0      	ldr	r0, [r4, #24]
 8016448:	b128      	cbz	r0, 8016456 <rcl_wait_set_resize+0x11e>
 801644a:	4641      	mov	r1, r8
 801644c:	47c8      	blx	r9
 801644e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016450:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016454:	61a3      	str	r3, [r4, #24]
 8016456:	f8da 0020 	ldr.w	r0, [sl, #32]
 801645a:	b130      	cbz	r0, 801646a <rcl_wait_set_resize+0x132>
 801645c:	4641      	mov	r1, r8
 801645e:	47c8      	blx	r9
 8016460:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016464:	2300      	movs	r3, #0
 8016466:	e9ca 3307 	strd	r3, r3, [sl, #28]
 801646a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801646c:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 8016470:	2600      	movs	r6, #0
 8016472:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 8016476:	6266      	str	r6, [r4, #36]	; 0x24
 8016478:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 801647c:	2b00      	cmp	r3, #0
 801647e:	f000 80c8 	beq.w	8016612 <rcl_wait_set_resize+0x2da>
 8016482:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8016486:	6a20      	ldr	r0, [r4, #32]
 8016488:	4651      	mov	r1, sl
 801648a:	463a      	mov	r2, r7
 801648c:	47c8      	blx	r9
 801648e:	6220      	str	r0, [r4, #32]
 8016490:	2800      	cmp	r0, #0
 8016492:	d051      	beq.n	8016538 <rcl_wait_set_resize+0x200>
 8016494:	4652      	mov	r2, sl
 8016496:	4631      	mov	r1, r6
 8016498:	f002 fcc4 	bl	8018e24 <memset>
 801649c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801649e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164a0:	6263      	str	r3, [r4, #36]	; 0x24
 80164a2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80164a4:	62ae      	str	r6, [r5, #40]	; 0x28
 80164a6:	463a      	mov	r2, r7
 80164a8:	4651      	mov	r1, sl
 80164aa:	47c8      	blx	r9
 80164ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80164ae:	62e8      	str	r0, [r5, #44]	; 0x2c
 80164b0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80164b2:	2d00      	cmp	r5, #0
 80164b4:	f000 8105 	beq.w	80166c2 <rcl_wait_set_resize+0x38a>
 80164b8:	4652      	mov	r2, sl
 80164ba:	4631      	mov	r1, r6
 80164bc:	4628      	mov	r0, r5
 80164be:	f002 fcb1 	bl	8018e24 <memset>
 80164c2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80164c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164c8:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 80164cc:	2500      	movs	r5, #0
 80164ce:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 80164d2:	62e5      	str	r5, [r4, #44]	; 0x2c
 80164d4:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 80164d8:	2b00      	cmp	r3, #0
 80164da:	f040 80af 	bne.w	801663c <rcl_wait_set_resize+0x304>
 80164de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80164e0:	b128      	cbz	r0, 80164ee <rcl_wait_set_resize+0x1b6>
 80164e2:	4631      	mov	r1, r6
 80164e4:	47b8      	blx	r7
 80164e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164e8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80164ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80164ee:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 80164f2:	b310      	cbz	r0, 801653a <rcl_wait_set_resize+0x202>
 80164f4:	4631      	mov	r1, r6
 80164f6:	47b8      	blx	r7
 80164f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80164fa:	2000      	movs	r0, #0
 80164fc:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 8016500:	b003      	add	sp, #12
 8016502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016506:	6800      	ldr	r0, [r0, #0]
 8016508:	b120      	cbz	r0, 8016514 <rcl_wait_set_resize+0x1dc>
 801650a:	4649      	mov	r1, r9
 801650c:	47d8      	blx	fp
 801650e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016512:	6027      	str	r7, [r4, #0]
 8016514:	f8da 0008 	ldr.w	r0, [sl, #8]
 8016518:	2800      	cmp	r0, #0
 801651a:	f43f af51 	beq.w	80163c0 <rcl_wait_set_resize+0x88>
 801651e:	4649      	mov	r1, r9
 8016520:	47d8      	blx	fp
 8016522:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016526:	2300      	movs	r3, #0
 8016528:	e9ca 3301 	strd	r3, r3, [sl, #4]
 801652c:	e748      	b.n	80163c0 <rcl_wait_set_resize+0x88>
 801652e:	6820      	ldr	r0, [r4, #0]
 8016530:	4649      	mov	r1, r9
 8016532:	47d8      	blx	fp
 8016534:	e9c4 7700 	strd	r7, r7, [r4]
 8016538:	200a      	movs	r0, #10
 801653a:	b003      	add	sp, #12
 801653c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016540:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8016544:	68a0      	ldr	r0, [r4, #8]
 8016546:	4642      	mov	r2, r8
 8016548:	4649      	mov	r1, r9
 801654a:	4798      	blx	r3
 801654c:	60a0      	str	r0, [r4, #8]
 801654e:	2800      	cmp	r0, #0
 8016550:	d0f2      	beq.n	8016538 <rcl_wait_set_resize+0x200>
 8016552:	4639      	mov	r1, r7
 8016554:	464a      	mov	r2, r9
 8016556:	f002 fc65 	bl	8018e24 <memset>
 801655a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801655e:	60e5      	str	r5, [r4, #12]
 8016560:	2700      	movs	r7, #0
 8016562:	19ad      	adds	r5, r5, r6
 8016564:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016568:	f8ca 7010 	str.w	r7, [sl, #16]
 801656c:	f43f af42 	beq.w	80163f4 <rcl_wait_set_resize+0xbc>
 8016570:	00ad      	lsls	r5, r5, #2
 8016572:	4642      	mov	r2, r8
 8016574:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8016578:	f8da 0014 	ldr.w	r0, [sl, #20]
 801657c:	4629      	mov	r1, r5
 801657e:	4798      	blx	r3
 8016580:	4680      	mov	r8, r0
 8016582:	f8ca 0014 	str.w	r0, [sl, #20]
 8016586:	2800      	cmp	r0, #0
 8016588:	f000 8084 	beq.w	8016694 <rcl_wait_set_resize+0x35c>
 801658c:	462a      	mov	r2, r5
 801658e:	4639      	mov	r1, r7
 8016590:	f002 fc48 	bl	8018e24 <memset>
 8016594:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016598:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801659c:	e737      	b.n	801640e <rcl_wait_set_resize+0xd6>
 801659e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80165a2:	6920      	ldr	r0, [r4, #16]
 80165a4:	4642      	mov	r2, r8
 80165a6:	4649      	mov	r1, r9
 80165a8:	47b8      	blx	r7
 80165aa:	6120      	str	r0, [r4, #16]
 80165ac:	2800      	cmp	r0, #0
 80165ae:	d0c3      	beq.n	8016538 <rcl_wait_set_resize+0x200>
 80165b0:	464a      	mov	r2, r9
 80165b2:	4629      	mov	r1, r5
 80165b4:	f002 fc36 	bl	8018e24 <memset>
 80165b8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80165bc:	6166      	str	r6, [r4, #20]
 80165be:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 80165c2:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80165c6:	e736      	b.n	8016436 <rcl_wait_set_resize+0xfe>
 80165c8:	009e      	lsls	r6, r3, #2
 80165ca:	69a0      	ldr	r0, [r4, #24]
 80165cc:	4631      	mov	r1, r6
 80165ce:	4642      	mov	r2, r8
 80165d0:	47b8      	blx	r7
 80165d2:	61a0      	str	r0, [r4, #24]
 80165d4:	2800      	cmp	r0, #0
 80165d6:	d0af      	beq.n	8016538 <rcl_wait_set_resize+0x200>
 80165d8:	4632      	mov	r2, r6
 80165da:	4629      	mov	r1, r5
 80165dc:	f002 fc22 	bl	8018e24 <memset>
 80165e0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80165e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165e6:	61e3      	str	r3, [r4, #28]
 80165e8:	f8da 0020 	ldr.w	r0, [sl, #32]
 80165ec:	f8ca 501c 	str.w	r5, [sl, #28]
 80165f0:	4642      	mov	r2, r8
 80165f2:	4631      	mov	r1, r6
 80165f4:	47b8      	blx	r7
 80165f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80165f8:	f8ca 0020 	str.w	r0, [sl, #32]
 80165fc:	6a1f      	ldr	r7, [r3, #32]
 80165fe:	2f00      	cmp	r7, #0
 8016600:	d058      	beq.n	80166b4 <rcl_wait_set_resize+0x37c>
 8016602:	4632      	mov	r2, r6
 8016604:	4629      	mov	r1, r5
 8016606:	4638      	mov	r0, r7
 8016608:	f002 fc0c 	bl	8018e24 <memset>
 801660c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016610:	e72b      	b.n	801646a <rcl_wait_set_resize+0x132>
 8016612:	6a20      	ldr	r0, [r4, #32]
 8016614:	b128      	cbz	r0, 8016622 <rcl_wait_set_resize+0x2ea>
 8016616:	4639      	mov	r1, r7
 8016618:	47c0      	blx	r8
 801661a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801661c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016620:	6223      	str	r3, [r4, #32]
 8016622:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 8016626:	2800      	cmp	r0, #0
 8016628:	f43f af4d 	beq.w	80164c6 <rcl_wait_set_resize+0x18e>
 801662c:	4639      	mov	r1, r7
 801662e:	47c0      	blx	r8
 8016630:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016634:	2300      	movs	r3, #0
 8016636:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 801663a:	e744      	b.n	80164c6 <rcl_wait_set_resize+0x18e>
 801663c:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8016640:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016642:	4641      	mov	r1, r8
 8016644:	4632      	mov	r2, r6
 8016646:	47c8      	blx	r9
 8016648:	62a0      	str	r0, [r4, #40]	; 0x28
 801664a:	2800      	cmp	r0, #0
 801664c:	f43f af74 	beq.w	8016538 <rcl_wait_set_resize+0x200>
 8016650:	4642      	mov	r2, r8
 8016652:	4629      	mov	r1, r5
 8016654:	f002 fbe6 	bl	8018e24 <memset>
 8016658:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801665c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801665e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016660:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8016664:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 8016668:	4632      	mov	r2, r6
 801666a:	4641      	mov	r1, r8
 801666c:	47c8      	blx	r9
 801666e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016670:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8016674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016676:	b35b      	cbz	r3, 80166d0 <rcl_wait_set_resize+0x398>
 8016678:	4642      	mov	r2, r8
 801667a:	4618      	mov	r0, r3
 801667c:	4629      	mov	r1, r5
 801667e:	f002 fbd1 	bl	8018e24 <memset>
 8016682:	4628      	mov	r0, r5
 8016684:	b003      	add	sp, #12
 8016686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801668a:	200b      	movs	r0, #11
 801668c:	4770      	bx	lr
 801668e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016692:	e752      	b.n	801653a <rcl_wait_set_resize+0x202>
 8016694:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016696:	68a0      	ldr	r0, [r4, #8]
 8016698:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801669a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801669c:	4790      	blx	r2
 801669e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80166a0:	6920      	ldr	r0, [r4, #16]
 80166a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80166a4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80166a6:	e9c4 8802 	strd	r8, r8, [r4, #8]
 80166aa:	4790      	blx	r2
 80166ac:	e9c4 8804 	strd	r8, r8, [r4, #16]
 80166b0:	200a      	movs	r0, #10
 80166b2:	e742      	b.n	801653a <rcl_wait_set_resize+0x202>
 80166b4:	69a0      	ldr	r0, [r4, #24]
 80166b6:	4641      	mov	r1, r8
 80166b8:	47c8      	blx	r9
 80166ba:	e9c4 7706 	strd	r7, r7, [r4, #24]
 80166be:	200a      	movs	r0, #10
 80166c0:	e73b      	b.n	801653a <rcl_wait_set_resize+0x202>
 80166c2:	6a20      	ldr	r0, [r4, #32]
 80166c4:	4639      	mov	r1, r7
 80166c6:	47c0      	blx	r8
 80166c8:	e9c4 5508 	strd	r5, r5, [r4, #32]
 80166cc:	200a      	movs	r0, #10
 80166ce:	e734      	b.n	801653a <rcl_wait_set_resize+0x202>
 80166d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80166d2:	9300      	str	r3, [sp, #0]
 80166d4:	4631      	mov	r1, r6
 80166d6:	47b8      	blx	r7
 80166d8:	9b00      	ldr	r3, [sp, #0]
 80166da:	200a      	movs	r0, #10
 80166dc:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80166e0:	e72b      	b.n	801653a <rcl_wait_set_resize+0x202>
 80166e2:	bf00      	nop

080166e4 <rcl_wait_set_init>:
 80166e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166e8:	b084      	sub	sp, #16
 80166ea:	4604      	mov	r4, r0
 80166ec:	a810      	add	r0, sp, #64	; 0x40
 80166ee:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80166f2:	460f      	mov	r7, r1
 80166f4:	4690      	mov	r8, r2
 80166f6:	4699      	mov	r9, r3
 80166f8:	f7f8 f87e 	bl	800e7f8 <rcutils_allocator_is_valid>
 80166fc:	2800      	cmp	r0, #0
 80166fe:	d06b      	beq.n	80167d8 <rcl_wait_set_init+0xf4>
 8016700:	2c00      	cmp	r4, #0
 8016702:	d069      	beq.n	80167d8 <rcl_wait_set_init+0xf4>
 8016704:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016706:	b125      	cbz	r5, 8016712 <rcl_wait_set_init+0x2e>
 8016708:	2564      	movs	r5, #100	; 0x64
 801670a:	4628      	mov	r0, r5
 801670c:	b004      	add	sp, #16
 801670e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016712:	f1ba 0f00 	cmp.w	sl, #0
 8016716:	d05f      	beq.n	80167d8 <rcl_wait_set_init+0xf4>
 8016718:	4650      	mov	r0, sl
 801671a:	f7fe f989 	bl	8014a30 <rcl_context_is_valid>
 801671e:	2800      	cmp	r0, #0
 8016720:	d067      	beq.n	80167f2 <rcl_wait_set_init+0x10e>
 8016722:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016724:	9914      	ldr	r1, [sp, #80]	; 0x50
 8016726:	205c      	movs	r0, #92	; 0x5c
 8016728:	4798      	blx	r3
 801672a:	6320      	str	r0, [r4, #48]	; 0x30
 801672c:	2800      	cmp	r0, #0
 801672e:	d062      	beq.n	80167f6 <rcl_wait_set_init+0x112>
 8016730:	225c      	movs	r2, #92	; 0x5c
 8016732:	4629      	mov	r1, r5
 8016734:	f002 fb76 	bl	8018e24 <memset>
 8016738:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801673c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016740:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8016742:	f8dc e000 	ldr.w	lr, [ip]
 8016746:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 801674a:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 801674e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8016752:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8016756:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 801675a:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 801675e:	60b5      	str	r5, [r6, #8]
 8016760:	6075      	str	r5, [r6, #4]
 8016762:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016766:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801676a:	1899      	adds	r1, r3, r2
 801676c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801676e:	f8da 0000 	ldr.w	r0, [sl]
 8016772:	f8cc e000 	str.w	lr, [ip]
 8016776:	4419      	add	r1, r3
 8016778:	4441      	add	r1, r8
 801677a:	3028      	adds	r0, #40	; 0x28
 801677c:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8016780:	f001 f9b0 	bl	8017ae4 <rmw_create_wait_set>
 8016784:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016786:	63f0      	str	r0, [r6, #60]	; 0x3c
 8016788:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801678a:	b350      	cbz	r0, 80167e2 <rcl_wait_set_init+0xfe>
 801678c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801678e:	9302      	str	r3, [sp, #8]
 8016790:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016792:	9301      	str	r3, [sp, #4]
 8016794:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016796:	9300      	str	r3, [sp, #0]
 8016798:	4642      	mov	r2, r8
 801679a:	464b      	mov	r3, r9
 801679c:	4639      	mov	r1, r7
 801679e:	4620      	mov	r0, r4
 80167a0:	f7ff fdca 	bl	8016338 <rcl_wait_set_resize>
 80167a4:	4605      	mov	r5, r0
 80167a6:	2800      	cmp	r0, #0
 80167a8:	d0af      	beq.n	801670a <rcl_wait_set_init+0x26>
 80167aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80167ac:	bb2b      	cbnz	r3, 80167fa <rcl_wait_set_init+0x116>
 80167ae:	2600      	movs	r6, #0
 80167b0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80167b4:	9600      	str	r6, [sp, #0]
 80167b6:	4633      	mov	r3, r6
 80167b8:	4632      	mov	r2, r6
 80167ba:	4631      	mov	r1, r6
 80167bc:	4620      	mov	r0, r4
 80167be:	f7ff fdbb 	bl	8016338 <rcl_wait_set_resize>
 80167c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80167c4:	2800      	cmp	r0, #0
 80167c6:	d0a0      	beq.n	801670a <rcl_wait_set_init+0x26>
 80167c8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80167ca:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80167cc:	4798      	blx	r3
 80167ce:	4628      	mov	r0, r5
 80167d0:	6326      	str	r6, [r4, #48]	; 0x30
 80167d2:	b004      	add	sp, #16
 80167d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167d8:	250b      	movs	r5, #11
 80167da:	4628      	mov	r0, r5
 80167dc:	b004      	add	sp, #16
 80167de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167e2:	2501      	movs	r5, #1
 80167e4:	f001 f988 	bl	8017af8 <rmw_destroy_wait_set>
 80167e8:	2800      	cmp	r0, #0
 80167ea:	bf18      	it	ne
 80167ec:	f44f 7561 	movne.w	r5, #900	; 0x384
 80167f0:	e7dd      	b.n	80167ae <rcl_wait_set_init+0xca>
 80167f2:	2565      	movs	r5, #101	; 0x65
 80167f4:	e789      	b.n	801670a <rcl_wait_set_init+0x26>
 80167f6:	250a      	movs	r5, #10
 80167f8:	e787      	b.n	801670a <rcl_wait_set_init+0x26>
 80167fa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80167fc:	e7f2      	b.n	80167e4 <rcl_wait_set_init+0x100>
 80167fe:	bf00      	nop

08016800 <rcl_wait_set_add_guard_condition>:
 8016800:	b320      	cbz	r0, 801684c <rcl_wait_set_add_guard_condition+0x4c>
 8016802:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016804:	b570      	push	{r4, r5, r6, lr}
 8016806:	4604      	mov	r4, r0
 8016808:	b1d3      	cbz	r3, 8016840 <rcl_wait_set_add_guard_condition+0x40>
 801680a:	b319      	cbz	r1, 8016854 <rcl_wait_set_add_guard_condition+0x54>
 801680c:	68dd      	ldr	r5, [r3, #12]
 801680e:	68e0      	ldr	r0, [r4, #12]
 8016810:	4285      	cmp	r5, r0
 8016812:	d218      	bcs.n	8016846 <rcl_wait_set_add_guard_condition+0x46>
 8016814:	68a0      	ldr	r0, [r4, #8]
 8016816:	1c6e      	adds	r6, r5, #1
 8016818:	60de      	str	r6, [r3, #12]
 801681a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801681e:	b102      	cbz	r2, 8016822 <rcl_wait_set_add_guard_condition+0x22>
 8016820:	6015      	str	r5, [r2, #0]
 8016822:	4608      	mov	r0, r1
 8016824:	f002 f8dc 	bl	80189e0 <rcl_guard_condition_get_rmw_handle>
 8016828:	b190      	cbz	r0, 8016850 <rcl_wait_set_add_guard_condition+0x50>
 801682a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801682c:	6842      	ldr	r2, [r0, #4]
 801682e:	695b      	ldr	r3, [r3, #20]
 8016830:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016834:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016836:	6913      	ldr	r3, [r2, #16]
 8016838:	3301      	adds	r3, #1
 801683a:	6113      	str	r3, [r2, #16]
 801683c:	2000      	movs	r0, #0
 801683e:	bd70      	pop	{r4, r5, r6, pc}
 8016840:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016844:	bd70      	pop	{r4, r5, r6, pc}
 8016846:	f240 3086 	movw	r0, #902	; 0x386
 801684a:	bd70      	pop	{r4, r5, r6, pc}
 801684c:	200b      	movs	r0, #11
 801684e:	4770      	bx	lr
 8016850:	2001      	movs	r0, #1
 8016852:	bd70      	pop	{r4, r5, r6, pc}
 8016854:	200b      	movs	r0, #11
 8016856:	bd70      	pop	{r4, r5, r6, pc}

08016858 <rcl_wait_set_add_timer>:
 8016858:	b340      	cbz	r0, 80168ac <rcl_wait_set_add_timer+0x54>
 801685a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801685c:	b570      	push	{r4, r5, r6, lr}
 801685e:	4604      	mov	r4, r0
 8016860:	b1f3      	cbz	r3, 80168a0 <rcl_wait_set_add_timer+0x48>
 8016862:	b329      	cbz	r1, 80168b0 <rcl_wait_set_add_timer+0x58>
 8016864:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8016866:	6965      	ldr	r5, [r4, #20]
 8016868:	42a8      	cmp	r0, r5
 801686a:	d21c      	bcs.n	80168a6 <rcl_wait_set_add_timer+0x4e>
 801686c:	6925      	ldr	r5, [r4, #16]
 801686e:	1c46      	adds	r6, r0, #1
 8016870:	641e      	str	r6, [r3, #64]	; 0x40
 8016872:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8016876:	b102      	cbz	r2, 801687a <rcl_wait_set_add_timer+0x22>
 8016878:	6010      	str	r0, [r2, #0]
 801687a:	4608      	mov	r0, r1
 801687c:	f7ff faa4 	bl	8015dc8 <rcl_timer_get_guard_condition>
 8016880:	b168      	cbz	r0, 801689e <rcl_wait_set_add_timer+0x46>
 8016882:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016884:	68e3      	ldr	r3, [r4, #12]
 8016886:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8016888:	3b01      	subs	r3, #1
 801688a:	441d      	add	r5, r3
 801688c:	f002 f8a8 	bl	80189e0 <rcl_guard_condition_get_rmw_handle>
 8016890:	b180      	cbz	r0, 80168b4 <rcl_wait_set_add_timer+0x5c>
 8016892:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016894:	6842      	ldr	r2, [r0, #4]
 8016896:	695b      	ldr	r3, [r3, #20]
 8016898:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801689c:	2000      	movs	r0, #0
 801689e:	bd70      	pop	{r4, r5, r6, pc}
 80168a0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80168a4:	bd70      	pop	{r4, r5, r6, pc}
 80168a6:	f240 3086 	movw	r0, #902	; 0x386
 80168aa:	bd70      	pop	{r4, r5, r6, pc}
 80168ac:	200b      	movs	r0, #11
 80168ae:	4770      	bx	lr
 80168b0:	200b      	movs	r0, #11
 80168b2:	bd70      	pop	{r4, r5, r6, pc}
 80168b4:	2001      	movs	r0, #1
 80168b6:	bd70      	pop	{r4, r5, r6, pc}

080168b8 <rcl_wait_set_add_client>:
 80168b8:	b320      	cbz	r0, 8016904 <rcl_wait_set_add_client+0x4c>
 80168ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80168bc:	b570      	push	{r4, r5, r6, lr}
 80168be:	4604      	mov	r4, r0
 80168c0:	b1d3      	cbz	r3, 80168f8 <rcl_wait_set_add_client+0x40>
 80168c2:	b319      	cbz	r1, 801690c <rcl_wait_set_add_client+0x54>
 80168c4:	699d      	ldr	r5, [r3, #24]
 80168c6:	69e0      	ldr	r0, [r4, #28]
 80168c8:	4285      	cmp	r5, r0
 80168ca:	d218      	bcs.n	80168fe <rcl_wait_set_add_client+0x46>
 80168cc:	69a0      	ldr	r0, [r4, #24]
 80168ce:	1c6e      	adds	r6, r5, #1
 80168d0:	619e      	str	r6, [r3, #24]
 80168d2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80168d6:	b102      	cbz	r2, 80168da <rcl_wait_set_add_client+0x22>
 80168d8:	6015      	str	r5, [r2, #0]
 80168da:	4608      	mov	r0, r1
 80168dc:	f7fe f842 	bl	8014964 <rcl_client_get_rmw_handle>
 80168e0:	b190      	cbz	r0, 8016908 <rcl_wait_set_add_client+0x50>
 80168e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80168e4:	6842      	ldr	r2, [r0, #4]
 80168e6:	6a1b      	ldr	r3, [r3, #32]
 80168e8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80168ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80168ee:	69d3      	ldr	r3, [r2, #28]
 80168f0:	3301      	adds	r3, #1
 80168f2:	61d3      	str	r3, [r2, #28]
 80168f4:	2000      	movs	r0, #0
 80168f6:	bd70      	pop	{r4, r5, r6, pc}
 80168f8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80168fc:	bd70      	pop	{r4, r5, r6, pc}
 80168fe:	f240 3086 	movw	r0, #902	; 0x386
 8016902:	bd70      	pop	{r4, r5, r6, pc}
 8016904:	200b      	movs	r0, #11
 8016906:	4770      	bx	lr
 8016908:	2001      	movs	r0, #1
 801690a:	bd70      	pop	{r4, r5, r6, pc}
 801690c:	200b      	movs	r0, #11
 801690e:	bd70      	pop	{r4, r5, r6, pc}

08016910 <rcl_wait_set_add_service>:
 8016910:	b320      	cbz	r0, 801695c <rcl_wait_set_add_service+0x4c>
 8016912:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016914:	b570      	push	{r4, r5, r6, lr}
 8016916:	4604      	mov	r4, r0
 8016918:	b1d3      	cbz	r3, 8016950 <rcl_wait_set_add_service+0x40>
 801691a:	b319      	cbz	r1, 8016964 <rcl_wait_set_add_service+0x54>
 801691c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801691e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016920:	4285      	cmp	r5, r0
 8016922:	d218      	bcs.n	8016956 <rcl_wait_set_add_service+0x46>
 8016924:	6a20      	ldr	r0, [r4, #32]
 8016926:	1c6e      	adds	r6, r5, #1
 8016928:	625e      	str	r6, [r3, #36]	; 0x24
 801692a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801692e:	b102      	cbz	r2, 8016932 <rcl_wait_set_add_service+0x22>
 8016930:	6015      	str	r5, [r2, #0]
 8016932:	4608      	mov	r0, r1
 8016934:	f7fe fe34 	bl	80155a0 <rcl_service_get_rmw_handle>
 8016938:	b190      	cbz	r0, 8016960 <rcl_wait_set_add_service+0x50>
 801693a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801693c:	6842      	ldr	r2, [r0, #4]
 801693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016940:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016944:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016946:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8016948:	3301      	adds	r3, #1
 801694a:	6293      	str	r3, [r2, #40]	; 0x28
 801694c:	2000      	movs	r0, #0
 801694e:	bd70      	pop	{r4, r5, r6, pc}
 8016950:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016954:	bd70      	pop	{r4, r5, r6, pc}
 8016956:	f240 3086 	movw	r0, #902	; 0x386
 801695a:	bd70      	pop	{r4, r5, r6, pc}
 801695c:	200b      	movs	r0, #11
 801695e:	4770      	bx	lr
 8016960:	2001      	movs	r0, #1
 8016962:	bd70      	pop	{r4, r5, r6, pc}
 8016964:	200b      	movs	r0, #11
 8016966:	bd70      	pop	{r4, r5, r6, pc}

08016968 <rcl_wait>:
 8016968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801696c:	b08f      	sub	sp, #60	; 0x3c
 801696e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016972:	2800      	cmp	r0, #0
 8016974:	f000 814c 	beq.w	8016c10 <rcl_wait+0x2a8>
 8016978:	6b05      	ldr	r5, [r0, #48]	; 0x30
 801697a:	4604      	mov	r4, r0
 801697c:	2d00      	cmp	r5, #0
 801697e:	f000 80bc 	beq.w	8016afa <rcl_wait+0x192>
 8016982:	6843      	ldr	r3, [r0, #4]
 8016984:	b973      	cbnz	r3, 80169a4 <rcl_wait+0x3c>
 8016986:	68e3      	ldr	r3, [r4, #12]
 8016988:	b963      	cbnz	r3, 80169a4 <rcl_wait+0x3c>
 801698a:	6963      	ldr	r3, [r4, #20]
 801698c:	b953      	cbnz	r3, 80169a4 <rcl_wait+0x3c>
 801698e:	69e3      	ldr	r3, [r4, #28]
 8016990:	b943      	cbnz	r3, 80169a4 <rcl_wait+0x3c>
 8016992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016994:	b933      	cbnz	r3, 80169a4 <rcl_wait+0x3c>
 8016996:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016998:	b923      	cbnz	r3, 80169a4 <rcl_wait+0x3c>
 801699a:	f240 3085 	movw	r0, #901	; 0x385
 801699e:	b00f      	add	sp, #60	; 0x3c
 80169a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80169a8:	2a01      	cmp	r2, #1
 80169aa:	f173 0300 	sbcs.w	r3, r3, #0
 80169ae:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80169b0:	db56      	blt.n	8016a60 <rcl_wait+0xf8>
 80169b2:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80169b6:	2900      	cmp	r1, #0
 80169b8:	f000 8149 	beq.w	8016c4e <rcl_wait+0x2e6>
 80169bc:	2300      	movs	r3, #0
 80169be:	9307      	str	r3, [sp, #28]
 80169c0:	469b      	mov	fp, r3
 80169c2:	f04f 0800 	mov.w	r8, #0
 80169c6:	f04f 0900 	mov.w	r9, #0
 80169ca:	e00d      	b.n	80169e8 <rcl_wait+0x80>
 80169cc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80169ce:	6922      	ldr	r2, [r4, #16]
 80169d0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80169d2:	f842 000a 	str.w	r0, [r2, sl]
 80169d6:	f118 0801 	adds.w	r8, r8, #1
 80169da:	f149 0900 	adc.w	r9, r9, #0
 80169de:	2300      	movs	r3, #0
 80169e0:	4599      	cmp	r9, r3
 80169e2:	bf08      	it	eq
 80169e4:	4588      	cmpeq	r8, r1
 80169e6:	d243      	bcs.n	8016a70 <rcl_wait+0x108>
 80169e8:	6922      	ldr	r2, [r4, #16]
 80169ea:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 80169ee:	f852 000a 	ldr.w	r0, [r2, sl]
 80169f2:	2800      	cmp	r0, #0
 80169f4:	d0ef      	beq.n	80169d6 <rcl_wait+0x6e>
 80169f6:	68e2      	ldr	r2, [r4, #12]
 80169f8:	6969      	ldr	r1, [r5, #20]
 80169fa:	4442      	add	r2, r8
 80169fc:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8016a00:	b13b      	cbz	r3, 8016a12 <rcl_wait+0xaa>
 8016a02:	692a      	ldr	r2, [r5, #16]
 8016a04:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016a08:	6921      	ldr	r1, [r4, #16]
 8016a0a:	3201      	adds	r2, #1
 8016a0c:	f851 000a 	ldr.w	r0, [r1, sl]
 8016a10:	612a      	str	r2, [r5, #16]
 8016a12:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8016a16:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 8016a1a:	f7ff f9c3 	bl	8015da4 <rcl_timer_is_canceled>
 8016a1e:	2800      	cmp	r0, #0
 8016a20:	d1bd      	bne.n	801699e <rcl_wait+0x36>
 8016a22:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8016a26:	2a00      	cmp	r2, #0
 8016a28:	d1d0      	bne.n	80169cc <rcl_wait+0x64>
 8016a2a:	6922      	ldr	r2, [r4, #16]
 8016a2c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016a30:	f852 000a 	ldr.w	r0, [r2, sl]
 8016a34:	a90a      	add	r1, sp, #40	; 0x28
 8016a36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a3a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016a3e:	f7ff f98d 	bl	8015d5c <rcl_timer_get_time_until_next_call>
 8016a42:	2800      	cmp	r0, #0
 8016a44:	d1ab      	bne.n	801699e <rcl_wait+0x36>
 8016a46:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016a4a:	42b2      	cmp	r2, r6
 8016a4c:	eb73 0107 	sbcs.w	r1, r3, r7
 8016a50:	da03      	bge.n	8016a5a <rcl_wait+0xf2>
 8016a52:	461f      	mov	r7, r3
 8016a54:	2301      	movs	r3, #1
 8016a56:	4616      	mov	r6, r2
 8016a58:	9307      	str	r3, [sp, #28]
 8016a5a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016a5c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8016a5e:	e7ba      	b.n	80169d6 <rcl_wait+0x6e>
 8016a60:	2900      	cmp	r1, #0
 8016a62:	f000 80de 	beq.w	8016c22 <rcl_wait+0x2ba>
 8016a66:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8016a6a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8016a6e:	e7a5      	b.n	80169bc <rcl_wait+0x54>
 8016a70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016a74:	4313      	orrs	r3, r2
 8016a76:	d145      	bne.n	8016b04 <rcl_wait+0x19c>
 8016a78:	2300      	movs	r3, #0
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016a80:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016a84:	ab0a      	add	r3, sp, #40	; 0x28
 8016a86:	9302      	str	r3, [sp, #8]
 8016a88:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8016a8a:	9301      	str	r3, [sp, #4]
 8016a8c:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8016a90:	9300      	str	r3, [sp, #0]
 8016a92:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8016a96:	f105 031c 	add.w	r3, r5, #28
 8016a9a:	f105 0110 	add.w	r1, r5, #16
 8016a9e:	1d28      	adds	r0, r5, #4
 8016aa0:	f000 feae 	bl	8017800 <rmw_wait>
 8016aa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016aa8:	4680      	mov	r8, r0
 8016aaa:	b30a      	cbz	r2, 8016af0 <rcl_wait+0x188>
 8016aac:	2500      	movs	r5, #0
 8016aae:	462f      	mov	r7, r5
 8016ab0:	e004      	b.n	8016abc <rcl_wait+0x154>
 8016ab2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016ab6:	3501      	adds	r5, #1
 8016ab8:	42aa      	cmp	r2, r5
 8016aba:	d919      	bls.n	8016af0 <rcl_wait+0x188>
 8016abc:	6922      	ldr	r2, [r4, #16]
 8016abe:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016ac2:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8016ac6:	00ae      	lsls	r6, r5, #2
 8016ac8:	2800      	cmp	r0, #0
 8016aca:	d0f3      	beq.n	8016ab4 <rcl_wait+0x14c>
 8016acc:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 8016ad0:	f7ff f90c 	bl	8015cec <rcl_timer_is_ready>
 8016ad4:	2800      	cmp	r0, #0
 8016ad6:	f47f af62 	bne.w	801699e <rcl_wait+0x36>
 8016ada:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8016ade:	2a00      	cmp	r2, #0
 8016ae0:	d1e7      	bne.n	8016ab2 <rcl_wait+0x14a>
 8016ae2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016ae4:	6921      	ldr	r1, [r4, #16]
 8016ae6:	518a      	str	r2, [r1, r6]
 8016ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016aea:	3501      	adds	r5, #1
 8016aec:	42aa      	cmp	r2, r5
 8016aee:	d8e5      	bhi.n	8016abc <rcl_wait+0x154>
 8016af0:	f038 0002 	bics.w	r0, r8, #2
 8016af4:	d029      	beq.n	8016b4a <rcl_wait+0x1e2>
 8016af6:	2001      	movs	r0, #1
 8016af8:	e751      	b.n	801699e <rcl_wait+0x36>
 8016afa:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016afe:	b00f      	add	sp, #60	; 0x3c
 8016b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016b08:	2a01      	cmp	r2, #1
 8016b0a:	f173 0300 	sbcs.w	r3, r3, #0
 8016b0e:	f2c0 8083 	blt.w	8016c18 <rcl_wait+0x2b0>
 8016b12:	2e00      	cmp	r6, #0
 8016b14:	f177 0300 	sbcs.w	r3, r7, #0
 8016b18:	bfbc      	itt	lt
 8016b1a:	2600      	movlt	r6, #0
 8016b1c:	2700      	movlt	r7, #0
 8016b1e:	a34e      	add	r3, pc, #312	; (adr r3, 8016c58 <rcl_wait+0x2f0>)
 8016b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b24:	4630      	mov	r0, r6
 8016b26:	4639      	mov	r1, r7
 8016b28:	f7ea f896 	bl	8000c58 <__aeabi_ldivmod>
 8016b2c:	a34a      	add	r3, pc, #296	; (adr r3, 8016c58 <rcl_wait+0x2f0>)
 8016b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b32:	4680      	mov	r8, r0
 8016b34:	4689      	mov	r9, r1
 8016b36:	4630      	mov	r0, r6
 8016b38:	4639      	mov	r1, r7
 8016b3a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8016b3e:	f7ea f88b 	bl	8000c58 <__aeabi_ldivmod>
 8016b42:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016b46:	ab0a      	add	r3, sp, #40	; 0x28
 8016b48:	e79d      	b.n	8016a86 <rcl_wait+0x11e>
 8016b4a:	6866      	ldr	r6, [r4, #4]
 8016b4c:	4602      	mov	r2, r0
 8016b4e:	b91e      	cbnz	r6, 8016b58 <rcl_wait+0x1f0>
 8016b50:	e00d      	b.n	8016b6e <rcl_wait+0x206>
 8016b52:	3201      	adds	r2, #1
 8016b54:	42b2      	cmp	r2, r6
 8016b56:	d00a      	beq.n	8016b6e <rcl_wait+0x206>
 8016b58:	6899      	ldr	r1, [r3, #8]
 8016b5a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016b5e:	2900      	cmp	r1, #0
 8016b60:	d1f7      	bne.n	8016b52 <rcl_wait+0x1ea>
 8016b62:	6825      	ldr	r5, [r4, #0]
 8016b64:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016b68:	3201      	adds	r2, #1
 8016b6a:	42b2      	cmp	r2, r6
 8016b6c:	d1f4      	bne.n	8016b58 <rcl_wait+0x1f0>
 8016b6e:	68e6      	ldr	r6, [r4, #12]
 8016b70:	2200      	movs	r2, #0
 8016b72:	b91e      	cbnz	r6, 8016b7c <rcl_wait+0x214>
 8016b74:	e00d      	b.n	8016b92 <rcl_wait+0x22a>
 8016b76:	3201      	adds	r2, #1
 8016b78:	42b2      	cmp	r2, r6
 8016b7a:	d00a      	beq.n	8016b92 <rcl_wait+0x22a>
 8016b7c:	6959      	ldr	r1, [r3, #20]
 8016b7e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016b82:	2900      	cmp	r1, #0
 8016b84:	d1f7      	bne.n	8016b76 <rcl_wait+0x20e>
 8016b86:	68a5      	ldr	r5, [r4, #8]
 8016b88:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016b8c:	3201      	adds	r2, #1
 8016b8e:	42b2      	cmp	r2, r6
 8016b90:	d1f4      	bne.n	8016b7c <rcl_wait+0x214>
 8016b92:	69e6      	ldr	r6, [r4, #28]
 8016b94:	2200      	movs	r2, #0
 8016b96:	b91e      	cbnz	r6, 8016ba0 <rcl_wait+0x238>
 8016b98:	e00d      	b.n	8016bb6 <rcl_wait+0x24e>
 8016b9a:	3201      	adds	r2, #1
 8016b9c:	42b2      	cmp	r2, r6
 8016b9e:	d00a      	beq.n	8016bb6 <rcl_wait+0x24e>
 8016ba0:	6a19      	ldr	r1, [r3, #32]
 8016ba2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016ba6:	2900      	cmp	r1, #0
 8016ba8:	d1f7      	bne.n	8016b9a <rcl_wait+0x232>
 8016baa:	69a5      	ldr	r5, [r4, #24]
 8016bac:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016bb0:	3201      	adds	r2, #1
 8016bb2:	42b2      	cmp	r2, r6
 8016bb4:	d1f4      	bne.n	8016ba0 <rcl_wait+0x238>
 8016bb6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016bb8:	2200      	movs	r2, #0
 8016bba:	b91e      	cbnz	r6, 8016bc4 <rcl_wait+0x25c>
 8016bbc:	e00d      	b.n	8016bda <rcl_wait+0x272>
 8016bbe:	3201      	adds	r2, #1
 8016bc0:	4296      	cmp	r6, r2
 8016bc2:	d00a      	beq.n	8016bda <rcl_wait+0x272>
 8016bc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8016bc6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016bca:	2900      	cmp	r1, #0
 8016bcc:	d1f7      	bne.n	8016bbe <rcl_wait+0x256>
 8016bce:	6a25      	ldr	r5, [r4, #32]
 8016bd0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016bd4:	3201      	adds	r2, #1
 8016bd6:	4296      	cmp	r6, r2
 8016bd8:	d1f4      	bne.n	8016bc4 <rcl_wait+0x25c>
 8016bda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016bdc:	2200      	movs	r2, #0
 8016bde:	b91e      	cbnz	r6, 8016be8 <rcl_wait+0x280>
 8016be0:	e00d      	b.n	8016bfe <rcl_wait+0x296>
 8016be2:	3201      	adds	r2, #1
 8016be4:	42b2      	cmp	r2, r6
 8016be6:	d00a      	beq.n	8016bfe <rcl_wait+0x296>
 8016be8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8016bea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016bee:	2900      	cmp	r1, #0
 8016bf0:	d1f7      	bne.n	8016be2 <rcl_wait+0x27a>
 8016bf2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8016bf4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016bf8:	3201      	adds	r2, #1
 8016bfa:	42b2      	cmp	r2, r6
 8016bfc:	d1f4      	bne.n	8016be8 <rcl_wait+0x280>
 8016bfe:	f1b8 0f02 	cmp.w	r8, #2
 8016c02:	f47f aecc 	bne.w	801699e <rcl_wait+0x36>
 8016c06:	9b07      	ldr	r3, [sp, #28]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	bf08      	it	eq
 8016c0c:	2002      	moveq	r0, #2
 8016c0e:	e6c6      	b.n	801699e <rcl_wait+0x36>
 8016c10:	200b      	movs	r0, #11
 8016c12:	b00f      	add	sp, #60	; 0x3c
 8016c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c18:	9b07      	ldr	r3, [sp, #28]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	f47f af79 	bne.w	8016b12 <rcl_wait+0x1aa>
 8016c20:	e731      	b.n	8016a86 <rcl_wait+0x11e>
 8016c22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016c26:	4313      	orrs	r3, r2
 8016c28:	bf08      	it	eq
 8016c2a:	9107      	streq	r1, [sp, #28]
 8016c2c:	f43f af24 	beq.w	8016a78 <rcl_wait+0x110>
 8016c30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016c34:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8016c38:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8016c3c:	2a01      	cmp	r2, #1
 8016c3e:	f173 0300 	sbcs.w	r3, r3, #0
 8016c42:	f04f 0300 	mov.w	r3, #0
 8016c46:	9307      	str	r3, [sp, #28]
 8016c48:	f6bf af63 	bge.w	8016b12 <rcl_wait+0x1aa>
 8016c4c:	e71b      	b.n	8016a86 <rcl_wait+0x11e>
 8016c4e:	4632      	mov	r2, r6
 8016c50:	463b      	mov	r3, r7
 8016c52:	e7f3      	b.n	8016c3c <rcl_wait+0x2d4>
 8016c54:	f3af 8000 	nop.w
 8016c58:	3b9aca00 	.word	0x3b9aca00
 8016c5c:	00000000 	.word	0x00000000

08016c60 <__atomic_load_8>:
 8016c60:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016c64:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8016c68:	4b14      	ldr	r3, [pc, #80]	; (8016cbc <__atomic_load_8+0x5c>)
 8016c6a:	4a15      	ldr	r2, [pc, #84]	; (8016cc0 <__atomic_load_8+0x60>)
 8016c6c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016c70:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8016c74:	fb03 f301 	mul.w	r3, r3, r1
 8016c78:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8016c7c:	fba2 1203 	umull	r1, r2, r2, r3
 8016c80:	0912      	lsrs	r2, r2, #4
 8016c82:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8016c86:	b430      	push	{r4, r5}
 8016c88:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 8016c8c:	4c0d      	ldr	r4, [pc, #52]	; (8016cc4 <__atomic_load_8+0x64>)
 8016c8e:	1a9b      	subs	r3, r3, r2
 8016c90:	18e1      	adds	r1, r4, r3
 8016c92:	f04f 0501 	mov.w	r5, #1
 8016c96:	e8d1 2f4f 	ldrexb	r2, [r1]
 8016c9a:	e8c1 5f4c 	strexb	ip, r5, [r1]
 8016c9e:	f1bc 0f00 	cmp.w	ip, #0
 8016ca2:	d1f8      	bne.n	8016c96 <__atomic_load_8+0x36>
 8016ca4:	f3bf 8f5b 	dmb	ish
 8016ca8:	b2d2      	uxtb	r2, r2
 8016caa:	2a00      	cmp	r2, #0
 8016cac:	d1f3      	bne.n	8016c96 <__atomic_load_8+0x36>
 8016cae:	e9d0 0100 	ldrd	r0, r1, [r0]
 8016cb2:	f3bf 8f5b 	dmb	ish
 8016cb6:	54e2      	strb	r2, [r4, r3]
 8016cb8:	bc30      	pop	{r4, r5}
 8016cba:	4770      	bx	lr
 8016cbc:	27d4eb2d 	.word	0x27d4eb2d
 8016cc0:	b21642c9 	.word	0xb21642c9
 8016cc4:	20010478 	.word	0x20010478

08016cc8 <__atomic_store_8>:
 8016cc8:	b4f0      	push	{r4, r5, r6, r7}
 8016cca:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8016cce:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8016cd2:	4914      	ldr	r1, [pc, #80]	; (8016d24 <__atomic_store_8+0x5c>)
 8016cd4:	4c14      	ldr	r4, [pc, #80]	; (8016d28 <__atomic_store_8+0x60>)
 8016cd6:	4e15      	ldr	r6, [pc, #84]	; (8016d2c <__atomic_store_8+0x64>)
 8016cd8:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8016cdc:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8016ce0:	fb01 f105 	mul.w	r1, r1, r5
 8016ce4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016ce8:	fba4 5401 	umull	r5, r4, r4, r1
 8016cec:	0924      	lsrs	r4, r4, #4
 8016cee:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8016cf2:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8016cf6:	1b09      	subs	r1, r1, r4
 8016cf8:	1875      	adds	r5, r6, r1
 8016cfa:	f04f 0701 	mov.w	r7, #1
 8016cfe:	e8d5 4f4f 	ldrexb	r4, [r5]
 8016d02:	e8c5 7f4c 	strexb	ip, r7, [r5]
 8016d06:	f1bc 0f00 	cmp.w	ip, #0
 8016d0a:	d1f8      	bne.n	8016cfe <__atomic_store_8+0x36>
 8016d0c:	f3bf 8f5b 	dmb	ish
 8016d10:	b2e4      	uxtb	r4, r4
 8016d12:	2c00      	cmp	r4, #0
 8016d14:	d1f3      	bne.n	8016cfe <__atomic_store_8+0x36>
 8016d16:	e9c0 2300 	strd	r2, r3, [r0]
 8016d1a:	f3bf 8f5b 	dmb	ish
 8016d1e:	5474      	strb	r4, [r6, r1]
 8016d20:	bcf0      	pop	{r4, r5, r6, r7}
 8016d22:	4770      	bx	lr
 8016d24:	27d4eb2d 	.word	0x27d4eb2d
 8016d28:	b21642c9 	.word	0xb21642c9
 8016d2c:	20010478 	.word	0x20010478

08016d30 <__atomic_exchange_8>:
 8016d30:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8016d34:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8016d38:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8016d3c:	4c16      	ldr	r4, [pc, #88]	; (8016d98 <__atomic_exchange_8+0x68>)
 8016d3e:	4917      	ldr	r1, [pc, #92]	; (8016d9c <__atomic_exchange_8+0x6c>)
 8016d40:	4e17      	ldr	r6, [pc, #92]	; (8016da0 <__atomic_exchange_8+0x70>)
 8016d42:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8016d46:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8016d4a:	fb04 f505 	mul.w	r5, r4, r5
 8016d4e:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8016d52:	fba1 4105 	umull	r4, r1, r1, r5
 8016d56:	0909      	lsrs	r1, r1, #4
 8016d58:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8016d5c:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8016d60:	1a6c      	subs	r4, r5, r1
 8016d62:	1931      	adds	r1, r6, r4
 8016d64:	f04f 0701 	mov.w	r7, #1
 8016d68:	e8d1 5f4f 	ldrexb	r5, [r1]
 8016d6c:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8016d70:	f1bc 0f00 	cmp.w	ip, #0
 8016d74:	d1f8      	bne.n	8016d68 <__atomic_exchange_8+0x38>
 8016d76:	f3bf 8f5b 	dmb	ish
 8016d7a:	b2ed      	uxtb	r5, r5
 8016d7c:	2d00      	cmp	r5, #0
 8016d7e:	d1f3      	bne.n	8016d68 <__atomic_exchange_8+0x38>
 8016d80:	e9d0 8900 	ldrd	r8, r9, [r0]
 8016d84:	e9c0 2300 	strd	r2, r3, [r0]
 8016d88:	f3bf 8f5b 	dmb	ish
 8016d8c:	5535      	strb	r5, [r6, r4]
 8016d8e:	4640      	mov	r0, r8
 8016d90:	4649      	mov	r1, r9
 8016d92:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8016d96:	4770      	bx	lr
 8016d98:	27d4eb2d 	.word	0x27d4eb2d
 8016d9c:	b21642c9 	.word	0xb21642c9
 8016da0:	20010478 	.word	0x20010478

08016da4 <__atomic_fetch_add_8>:
 8016da4:	b4f0      	push	{r4, r5, r6, r7}
 8016da6:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8016daa:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8016dae:	4c17      	ldr	r4, [pc, #92]	; (8016e0c <__atomic_fetch_add_8+0x68>)
 8016db0:	4917      	ldr	r1, [pc, #92]	; (8016e10 <__atomic_fetch_add_8+0x6c>)
 8016db2:	4e18      	ldr	r6, [pc, #96]	; (8016e14 <__atomic_fetch_add_8+0x70>)
 8016db4:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8016db8:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8016dbc:	fb04 f505 	mul.w	r5, r4, r5
 8016dc0:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8016dc4:	fba1 4105 	umull	r4, r1, r1, r5
 8016dc8:	0909      	lsrs	r1, r1, #4
 8016dca:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8016dce:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8016dd2:	1a6c      	subs	r4, r5, r1
 8016dd4:	1931      	adds	r1, r6, r4
 8016dd6:	f04f 0701 	mov.w	r7, #1
 8016dda:	e8d1 5f4f 	ldrexb	r5, [r1]
 8016dde:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8016de2:	f1bc 0f00 	cmp.w	ip, #0
 8016de6:	d1f8      	bne.n	8016dda <__atomic_fetch_add_8+0x36>
 8016de8:	f3bf 8f5b 	dmb	ish
 8016dec:	b2ed      	uxtb	r5, r5
 8016dee:	2d00      	cmp	r5, #0
 8016df0:	d1f3      	bne.n	8016dda <__atomic_fetch_add_8+0x36>
 8016df2:	e9d0 7100 	ldrd	r7, r1, [r0]
 8016df6:	18ba      	adds	r2, r7, r2
 8016df8:	eb41 0303 	adc.w	r3, r1, r3
 8016dfc:	e9c0 2300 	strd	r2, r3, [r0]
 8016e00:	f3bf 8f5b 	dmb	ish
 8016e04:	5535      	strb	r5, [r6, r4]
 8016e06:	4638      	mov	r0, r7
 8016e08:	bcf0      	pop	{r4, r5, r6, r7}
 8016e0a:	4770      	bx	lr
 8016e0c:	27d4eb2d 	.word	0x27d4eb2d
 8016e10:	b21642c9 	.word	0xb21642c9
 8016e14:	20010478 	.word	0x20010478

08016e18 <rcutils_is_directory>:
 8016e18:	2000      	movs	r0, #0
 8016e1a:	4770      	bx	lr

08016e1c <rcutils_join_path>:
 8016e1c:	b082      	sub	sp, #8
 8016e1e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8016e22:	2000      	movs	r0, #0
 8016e24:	b002      	add	sp, #8
 8016e26:	4770      	bx	lr

08016e28 <rcutils_to_native_path>:
 8016e28:	b084      	sub	sp, #16
 8016e2a:	a801      	add	r0, sp, #4
 8016e2c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016e30:	b004      	add	sp, #16
 8016e32:	2000      	movs	r0, #0
 8016e34:	4770      	bx	lr
 8016e36:	bf00      	nop

08016e38 <rcutils_format_string_limit>:
 8016e38:	b40f      	push	{r0, r1, r2, r3}
 8016e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e3c:	b083      	sub	sp, #12
 8016e3e:	ac08      	add	r4, sp, #32
 8016e40:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016e42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016e46:	b34e      	cbz	r6, 8016e9c <rcutils_format_string_limit+0x64>
 8016e48:	a808      	add	r0, sp, #32
 8016e4a:	f7f7 fcd5 	bl	800e7f8 <rcutils_allocator_is_valid>
 8016e4e:	b328      	cbz	r0, 8016e9c <rcutils_format_string_limit+0x64>
 8016e50:	2100      	movs	r1, #0
 8016e52:	ab0f      	add	r3, sp, #60	; 0x3c
 8016e54:	4608      	mov	r0, r1
 8016e56:	4632      	mov	r2, r6
 8016e58:	e9cd 3300 	strd	r3, r3, [sp]
 8016e5c:	f000 f904 	bl	8017068 <rcutils_vsnprintf>
 8016e60:	1c43      	adds	r3, r0, #1
 8016e62:	4605      	mov	r5, r0
 8016e64:	d01a      	beq.n	8016e9c <rcutils_format_string_limit+0x64>
 8016e66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e68:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016e6a:	1c47      	adds	r7, r0, #1
 8016e6c:	429f      	cmp	r7, r3
 8016e6e:	bf84      	itt	hi
 8016e70:	461f      	movhi	r7, r3
 8016e72:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8016e76:	4638      	mov	r0, r7
 8016e78:	9b08      	ldr	r3, [sp, #32]
 8016e7a:	4798      	blx	r3
 8016e7c:	4604      	mov	r4, r0
 8016e7e:	b168      	cbz	r0, 8016e9c <rcutils_format_string_limit+0x64>
 8016e80:	9b01      	ldr	r3, [sp, #4]
 8016e82:	4632      	mov	r2, r6
 8016e84:	4639      	mov	r1, r7
 8016e86:	f000 f8ef 	bl	8017068 <rcutils_vsnprintf>
 8016e8a:	2800      	cmp	r0, #0
 8016e8c:	db02      	blt.n	8016e94 <rcutils_format_string_limit+0x5c>
 8016e8e:	2300      	movs	r3, #0
 8016e90:	5563      	strb	r3, [r4, r5]
 8016e92:	e004      	b.n	8016e9e <rcutils_format_string_limit+0x66>
 8016e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016e98:	4620      	mov	r0, r4
 8016e9a:	4798      	blx	r3
 8016e9c:	2400      	movs	r4, #0
 8016e9e:	4620      	mov	r0, r4
 8016ea0:	b003      	add	sp, #12
 8016ea2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016ea6:	b004      	add	sp, #16
 8016ea8:	4770      	bx	lr
 8016eaa:	bf00      	nop

08016eac <rcutils_get_env>:
 8016eac:	b168      	cbz	r0, 8016eca <rcutils_get_env+0x1e>
 8016eae:	b510      	push	{r4, lr}
 8016eb0:	460c      	mov	r4, r1
 8016eb2:	b129      	cbz	r1, 8016ec0 <rcutils_get_env+0x14>
 8016eb4:	f001 ff10 	bl	8018cd8 <getenv>
 8016eb8:	b120      	cbz	r0, 8016ec4 <rcutils_get_env+0x18>
 8016eba:	6020      	str	r0, [r4, #0]
 8016ebc:	2000      	movs	r0, #0
 8016ebe:	bd10      	pop	{r4, pc}
 8016ec0:	4803      	ldr	r0, [pc, #12]	; (8016ed0 <rcutils_get_env+0x24>)
 8016ec2:	bd10      	pop	{r4, pc}
 8016ec4:	4b03      	ldr	r3, [pc, #12]	; (8016ed4 <rcutils_get_env+0x28>)
 8016ec6:	6023      	str	r3, [r4, #0]
 8016ec8:	bd10      	pop	{r4, pc}
 8016eca:	4803      	ldr	r0, [pc, #12]	; (8016ed8 <rcutils_get_env+0x2c>)
 8016ecc:	4770      	bx	lr
 8016ece:	bf00      	nop
 8016ed0:	0801e6c4 	.word	0x0801e6c4
 8016ed4:	0801e7e8 	.word	0x0801e7e8
 8016ed8:	0801e6a8 	.word	0x0801e6a8

08016edc <rcutils_repl_str>:
 8016edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ee0:	ed2d 8b02 	vpush	{d8}
 8016ee4:	b087      	sub	sp, #28
 8016ee6:	4680      	mov	r8, r0
 8016ee8:	4608      	mov	r0, r1
 8016eea:	f8cd 8000 	str.w	r8, [sp]
 8016eee:	ee08 2a10 	vmov	s16, r2
 8016ef2:	468a      	mov	sl, r1
 8016ef4:	4699      	mov	r9, r3
 8016ef6:	f7e9 f975 	bl	80001e4 <strlen>
 8016efa:	2600      	movs	r6, #0
 8016efc:	4647      	mov	r7, r8
 8016efe:	9001      	str	r0, [sp, #4]
 8016f00:	46b3      	mov	fp, r6
 8016f02:	2510      	movs	r5, #16
 8016f04:	46b0      	mov	r8, r6
 8016f06:	e01d      	b.n	8016f44 <rcutils_repl_str+0x68>
 8016f08:	f10b 0b01 	add.w	fp, fp, #1
 8016f0c:	455e      	cmp	r6, fp
 8016f0e:	d211      	bcs.n	8016f34 <rcutils_repl_str+0x58>
 8016f10:	442e      	add	r6, r5
 8016f12:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016f16:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016f1a:	00b1      	lsls	r1, r6, #2
 8016f1c:	4798      	blx	r3
 8016f1e:	2800      	cmp	r0, #0
 8016f20:	f000 8084 	beq.w	801702c <rcutils_repl_str+0x150>
 8016f24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016f28:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8016f2c:	bf28      	it	cs
 8016f2e:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8016f32:	4680      	mov	r8, r0
 8016f34:	9a00      	ldr	r2, [sp, #0]
 8016f36:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8016f3a:	1aa2      	subs	r2, r4, r2
 8016f3c:	f843 2c04 	str.w	r2, [r3, #-4]
 8016f40:	9b01      	ldr	r3, [sp, #4]
 8016f42:	18e7      	adds	r7, r4, r3
 8016f44:	4651      	mov	r1, sl
 8016f46:	4638      	mov	r0, r7
 8016f48:	f002 fbdb 	bl	8019702 <strstr>
 8016f4c:	4604      	mov	r4, r0
 8016f4e:	4640      	mov	r0, r8
 8016f50:	2c00      	cmp	r4, #0
 8016f52:	d1d9      	bne.n	8016f08 <rcutils_repl_str+0x2c>
 8016f54:	46b8      	mov	r8, r7
 8016f56:	4607      	mov	r7, r0
 8016f58:	4640      	mov	r0, r8
 8016f5a:	f7e9 f943 	bl	80001e4 <strlen>
 8016f5e:	9b00      	ldr	r3, [sp, #0]
 8016f60:	eba8 0303 	sub.w	r3, r8, r3
 8016f64:	181d      	adds	r5, r3, r0
 8016f66:	9504      	str	r5, [sp, #16]
 8016f68:	f1bb 0f00 	cmp.w	fp, #0
 8016f6c:	d03d      	beq.n	8016fea <rcutils_repl_str+0x10e>
 8016f6e:	ee18 0a10 	vmov	r0, s16
 8016f72:	f7e9 f937 	bl	80001e4 <strlen>
 8016f76:	9b01      	ldr	r3, [sp, #4]
 8016f78:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016f7c:	1ac3      	subs	r3, r0, r3
 8016f7e:	fb0b 5303 	mla	r3, fp, r3, r5
 8016f82:	9305      	str	r3, [sp, #20]
 8016f84:	4606      	mov	r6, r0
 8016f86:	1c58      	adds	r0, r3, #1
 8016f88:	f8d9 3000 	ldr.w	r3, [r9]
 8016f8c:	4798      	blx	r3
 8016f8e:	9003      	str	r0, [sp, #12]
 8016f90:	2800      	cmp	r0, #0
 8016f92:	d04c      	beq.n	801702e <rcutils_repl_str+0x152>
 8016f94:	683a      	ldr	r2, [r7, #0]
 8016f96:	9900      	ldr	r1, [sp, #0]
 8016f98:	f001 ff1c 	bl	8018dd4 <memcpy>
 8016f9c:	9b03      	ldr	r3, [sp, #12]
 8016f9e:	683d      	ldr	r5, [r7, #0]
 8016fa0:	ee18 8a10 	vmov	r8, s16
 8016fa4:	441d      	add	r5, r3
 8016fa6:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8016faa:	9302      	str	r3, [sp, #8]
 8016fac:	46ba      	mov	sl, r7
 8016fae:	4632      	mov	r2, r6
 8016fb0:	4641      	mov	r1, r8
 8016fb2:	4628      	mov	r0, r5
 8016fb4:	f001 ff0e 	bl	8018dd4 <memcpy>
 8016fb8:	9b01      	ldr	r3, [sp, #4]
 8016fba:	f85a 2b04 	ldr.w	r2, [sl], #4
 8016fbe:	441a      	add	r2, r3
 8016fc0:	9b00      	ldr	r3, [sp, #0]
 8016fc2:	1899      	adds	r1, r3, r2
 8016fc4:	9b02      	ldr	r3, [sp, #8]
 8016fc6:	4435      	add	r5, r6
 8016fc8:	429c      	cmp	r4, r3
 8016fca:	4628      	mov	r0, r5
 8016fcc:	d025      	beq.n	801701a <rcutils_repl_str+0x13e>
 8016fce:	f8da 3000 	ldr.w	r3, [sl]
 8016fd2:	3401      	adds	r4, #1
 8016fd4:	1a9a      	subs	r2, r3, r2
 8016fd6:	4415      	add	r5, r2
 8016fd8:	f001 fefc 	bl	8018dd4 <memcpy>
 8016fdc:	455c      	cmp	r4, fp
 8016fde:	d3e6      	bcc.n	8016fae <rcutils_repl_str+0xd2>
 8016fe0:	9a03      	ldr	r2, [sp, #12]
 8016fe2:	9905      	ldr	r1, [sp, #20]
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	5453      	strb	r3, [r2, r1]
 8016fe8:	e00b      	b.n	8017002 <rcutils_repl_str+0x126>
 8016fea:	4628      	mov	r0, r5
 8016fec:	f8d9 3000 	ldr.w	r3, [r9]
 8016ff0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016ff4:	3001      	adds	r0, #1
 8016ff6:	4798      	blx	r3
 8016ff8:	9003      	str	r0, [sp, #12]
 8016ffa:	b110      	cbz	r0, 8017002 <rcutils_repl_str+0x126>
 8016ffc:	9900      	ldr	r1, [sp, #0]
 8016ffe:	f002 fb59 	bl	80196b4 <strcpy>
 8017002:	4638      	mov	r0, r7
 8017004:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017008:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801700c:	4798      	blx	r3
 801700e:	9803      	ldr	r0, [sp, #12]
 8017010:	b007      	add	sp, #28
 8017012:	ecbd 8b02 	vpop	{d8}
 8017016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801701a:	9b04      	ldr	r3, [sp, #16]
 801701c:	3401      	adds	r4, #1
 801701e:	1a9a      	subs	r2, r3, r2
 8017020:	4415      	add	r5, r2
 8017022:	f001 fed7 	bl	8018dd4 <memcpy>
 8017026:	455c      	cmp	r4, fp
 8017028:	d3c1      	bcc.n	8016fae <rcutils_repl_str+0xd2>
 801702a:	e7d9      	b.n	8016fe0 <rcutils_repl_str+0x104>
 801702c:	4647      	mov	r7, r8
 801702e:	2300      	movs	r3, #0
 8017030:	9303      	str	r3, [sp, #12]
 8017032:	e7e6      	b.n	8017002 <rcutils_repl_str+0x126>

08017034 <rcutils_snprintf>:
 8017034:	b40c      	push	{r2, r3}
 8017036:	b530      	push	{r4, r5, lr}
 8017038:	b083      	sub	sp, #12
 801703a:	ab06      	add	r3, sp, #24
 801703c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017040:	9301      	str	r3, [sp, #4]
 8017042:	b152      	cbz	r2, 801705a <rcutils_snprintf+0x26>
 8017044:	b138      	cbz	r0, 8017056 <rcutils_snprintf+0x22>
 8017046:	b141      	cbz	r1, 801705a <rcutils_snprintf+0x26>
 8017048:	f003 fad8 	bl	801a5fc <vsniprintf>
 801704c:	b003      	add	sp, #12
 801704e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017052:	b002      	add	sp, #8
 8017054:	4770      	bx	lr
 8017056:	2900      	cmp	r1, #0
 8017058:	d0f6      	beq.n	8017048 <rcutils_snprintf+0x14>
 801705a:	f001 fdc9 	bl	8018bf0 <__errno>
 801705e:	2316      	movs	r3, #22
 8017060:	6003      	str	r3, [r0, #0]
 8017062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017066:	e7f1      	b.n	801704c <rcutils_snprintf+0x18>

08017068 <rcutils_vsnprintf>:
 8017068:	b570      	push	{r4, r5, r6, lr}
 801706a:	b13a      	cbz	r2, 801707c <rcutils_vsnprintf+0x14>
 801706c:	b120      	cbz	r0, 8017078 <rcutils_vsnprintf+0x10>
 801706e:	b129      	cbz	r1, 801707c <rcutils_vsnprintf+0x14>
 8017070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017074:	f003 bac2 	b.w	801a5fc <vsniprintf>
 8017078:	2900      	cmp	r1, #0
 801707a:	d0f9      	beq.n	8017070 <rcutils_vsnprintf+0x8>
 801707c:	f001 fdb8 	bl	8018bf0 <__errno>
 8017080:	2316      	movs	r3, #22
 8017082:	6003      	str	r3, [r0, #0]
 8017084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017088:	bd70      	pop	{r4, r5, r6, pc}
 801708a:	bf00      	nop

0801708c <rcutils_strdup>:
 801708c:	b084      	sub	sp, #16
 801708e:	b570      	push	{r4, r5, r6, lr}
 8017090:	b082      	sub	sp, #8
 8017092:	ac07      	add	r4, sp, #28
 8017094:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8017098:	4605      	mov	r5, r0
 801709a:	b1b0      	cbz	r0, 80170ca <rcutils_strdup+0x3e>
 801709c:	f7e9 f8a2 	bl	80001e4 <strlen>
 80170a0:	1c42      	adds	r2, r0, #1
 80170a2:	9b07      	ldr	r3, [sp, #28]
 80170a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80170a6:	9201      	str	r2, [sp, #4]
 80170a8:	4606      	mov	r6, r0
 80170aa:	4610      	mov	r0, r2
 80170ac:	4798      	blx	r3
 80170ae:	4604      	mov	r4, r0
 80170b0:	b128      	cbz	r0, 80170be <rcutils_strdup+0x32>
 80170b2:	9a01      	ldr	r2, [sp, #4]
 80170b4:	4629      	mov	r1, r5
 80170b6:	f001 fe8d 	bl	8018dd4 <memcpy>
 80170ba:	2300      	movs	r3, #0
 80170bc:	55a3      	strb	r3, [r4, r6]
 80170be:	4620      	mov	r0, r4
 80170c0:	b002      	add	sp, #8
 80170c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80170c6:	b004      	add	sp, #16
 80170c8:	4770      	bx	lr
 80170ca:	4604      	mov	r4, r0
 80170cc:	e7f7      	b.n	80170be <rcutils_strdup+0x32>
 80170ce:	bf00      	nop

080170d0 <rcutils_strndup>:
 80170d0:	b082      	sub	sp, #8
 80170d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170d4:	460e      	mov	r6, r1
 80170d6:	a906      	add	r1, sp, #24
 80170d8:	e881 000c 	stmia.w	r1, {r2, r3}
 80170dc:	4605      	mov	r5, r0
 80170de:	b180      	cbz	r0, 8017102 <rcutils_strndup+0x32>
 80170e0:	1c77      	adds	r7, r6, #1
 80170e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80170e4:	4638      	mov	r0, r7
 80170e6:	4790      	blx	r2
 80170e8:	4604      	mov	r4, r0
 80170ea:	b128      	cbz	r0, 80170f8 <rcutils_strndup+0x28>
 80170ec:	463a      	mov	r2, r7
 80170ee:	4629      	mov	r1, r5
 80170f0:	f001 fe70 	bl	8018dd4 <memcpy>
 80170f4:	2300      	movs	r3, #0
 80170f6:	55a3      	strb	r3, [r4, r6]
 80170f8:	4620      	mov	r0, r4
 80170fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80170fe:	b002      	add	sp, #8
 8017100:	4770      	bx	lr
 8017102:	4604      	mov	r4, r0
 8017104:	e7f8      	b.n	80170f8 <rcutils_strndup+0x28>
 8017106:	bf00      	nop

08017108 <rmw_get_zero_initialized_context>:
 8017108:	b510      	push	{r4, lr}
 801710a:	2250      	movs	r2, #80	; 0x50
 801710c:	4604      	mov	r4, r0
 801710e:	2100      	movs	r1, #0
 8017110:	f001 fe88 	bl	8018e24 <memset>
 8017114:	4620      	mov	r0, r4
 8017116:	bd10      	pop	{r4, pc}

08017118 <rmw_validate_namespace_with_size>:
 8017118:	b340      	cbz	r0, 801716c <rmw_validate_namespace_with_size+0x54>
 801711a:	b5d0      	push	{r4, r6, r7, lr}
 801711c:	4614      	mov	r4, r2
 801711e:	b0c2      	sub	sp, #264	; 0x108
 8017120:	b332      	cbz	r2, 8017170 <rmw_validate_namespace_with_size+0x58>
 8017122:	2901      	cmp	r1, #1
 8017124:	460f      	mov	r7, r1
 8017126:	461e      	mov	r6, r3
 8017128:	d102      	bne.n	8017130 <rmw_validate_namespace_with_size+0x18>
 801712a:	7803      	ldrb	r3, [r0, #0]
 801712c:	2b2f      	cmp	r3, #47	; 0x2f
 801712e:	d019      	beq.n	8017164 <rmw_validate_namespace_with_size+0x4c>
 8017130:	aa01      	add	r2, sp, #4
 8017132:	4669      	mov	r1, sp
 8017134:	f7f7 fe1c 	bl	800ed70 <rmw_validate_full_topic_name>
 8017138:	b990      	cbnz	r0, 8017160 <rmw_validate_namespace_with_size+0x48>
 801713a:	9b00      	ldr	r3, [sp, #0]
 801713c:	b14b      	cbz	r3, 8017152 <rmw_validate_namespace_with_size+0x3a>
 801713e:	2b07      	cmp	r3, #7
 8017140:	d007      	beq.n	8017152 <rmw_validate_namespace_with_size+0x3a>
 8017142:	1e5a      	subs	r2, r3, #1
 8017144:	2a05      	cmp	r2, #5
 8017146:	d82b      	bhi.n	80171a0 <rmw_validate_namespace_with_size+0x88>
 8017148:	e8df f002 	tbb	[pc, r2]
 801714c:	24211e1b 	.word	0x24211e1b
 8017150:	1427      	.short	0x1427
 8017152:	2ff5      	cmp	r7, #245	; 0xf5
 8017154:	d906      	bls.n	8017164 <rmw_validate_namespace_with_size+0x4c>
 8017156:	2307      	movs	r3, #7
 8017158:	6023      	str	r3, [r4, #0]
 801715a:	b10e      	cbz	r6, 8017160 <rmw_validate_namespace_with_size+0x48>
 801715c:	23f4      	movs	r3, #244	; 0xf4
 801715e:	6033      	str	r3, [r6, #0]
 8017160:	b042      	add	sp, #264	; 0x108
 8017162:	bdd0      	pop	{r4, r6, r7, pc}
 8017164:	2000      	movs	r0, #0
 8017166:	6020      	str	r0, [r4, #0]
 8017168:	b042      	add	sp, #264	; 0x108
 801716a:	bdd0      	pop	{r4, r6, r7, pc}
 801716c:	200b      	movs	r0, #11
 801716e:	4770      	bx	lr
 8017170:	200b      	movs	r0, #11
 8017172:	e7f5      	b.n	8017160 <rmw_validate_namespace_with_size+0x48>
 8017174:	2306      	movs	r3, #6
 8017176:	6023      	str	r3, [r4, #0]
 8017178:	2e00      	cmp	r6, #0
 801717a:	d0f1      	beq.n	8017160 <rmw_validate_namespace_with_size+0x48>
 801717c:	9b01      	ldr	r3, [sp, #4]
 801717e:	6033      	str	r3, [r6, #0]
 8017180:	e7ee      	b.n	8017160 <rmw_validate_namespace_with_size+0x48>
 8017182:	2301      	movs	r3, #1
 8017184:	6023      	str	r3, [r4, #0]
 8017186:	e7f7      	b.n	8017178 <rmw_validate_namespace_with_size+0x60>
 8017188:	2302      	movs	r3, #2
 801718a:	6023      	str	r3, [r4, #0]
 801718c:	e7f4      	b.n	8017178 <rmw_validate_namespace_with_size+0x60>
 801718e:	2303      	movs	r3, #3
 8017190:	6023      	str	r3, [r4, #0]
 8017192:	e7f1      	b.n	8017178 <rmw_validate_namespace_with_size+0x60>
 8017194:	2304      	movs	r3, #4
 8017196:	6023      	str	r3, [r4, #0]
 8017198:	e7ee      	b.n	8017178 <rmw_validate_namespace_with_size+0x60>
 801719a:	2305      	movs	r3, #5
 801719c:	6023      	str	r3, [r4, #0]
 801719e:	e7eb      	b.n	8017178 <rmw_validate_namespace_with_size+0x60>
 80171a0:	4a03      	ldr	r2, [pc, #12]	; (80171b0 <rmw_validate_namespace_with_size+0x98>)
 80171a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80171a6:	a802      	add	r0, sp, #8
 80171a8:	f7ff ff44 	bl	8017034 <rcutils_snprintf>
 80171ac:	2001      	movs	r0, #1
 80171ae:	e7d7      	b.n	8017160 <rmw_validate_namespace_with_size+0x48>
 80171b0:	0801e6e0 	.word	0x0801e6e0

080171b4 <rmw_validate_namespace>:
 80171b4:	b168      	cbz	r0, 80171d2 <rmw_validate_namespace+0x1e>
 80171b6:	b570      	push	{r4, r5, r6, lr}
 80171b8:	460d      	mov	r5, r1
 80171ba:	4616      	mov	r6, r2
 80171bc:	4604      	mov	r4, r0
 80171be:	f7e9 f811 	bl	80001e4 <strlen>
 80171c2:	4633      	mov	r3, r6
 80171c4:	4601      	mov	r1, r0
 80171c6:	462a      	mov	r2, r5
 80171c8:	4620      	mov	r0, r4
 80171ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80171ce:	f7ff bfa3 	b.w	8017118 <rmw_validate_namespace_with_size>
 80171d2:	200b      	movs	r0, #11
 80171d4:	4770      	bx	lr
 80171d6:	bf00      	nop

080171d8 <rmw_namespace_validation_result_string>:
 80171d8:	2807      	cmp	r0, #7
 80171da:	bf9a      	itte	ls
 80171dc:	4b02      	ldrls	r3, [pc, #8]	; (80171e8 <rmw_namespace_validation_result_string+0x10>)
 80171de:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80171e2:	4802      	ldrhi	r0, [pc, #8]	; (80171ec <rmw_namespace_validation_result_string+0x14>)
 80171e4:	4770      	bx	lr
 80171e6:	bf00      	nop
 80171e8:	0801e8d8 	.word	0x0801e8d8
 80171ec:	0801e730 	.word	0x0801e730

080171f0 <rmw_validate_node_name>:
 80171f0:	2800      	cmp	r0, #0
 80171f2:	d03b      	beq.n	801726c <rmw_validate_node_name+0x7c>
 80171f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171f8:	460f      	mov	r7, r1
 80171fa:	2900      	cmp	r1, #0
 80171fc:	d038      	beq.n	8017270 <rmw_validate_node_name+0x80>
 80171fe:	4615      	mov	r5, r2
 8017200:	4604      	mov	r4, r0
 8017202:	f7e8 ffef 	bl	80001e4 <strlen>
 8017206:	b1e0      	cbz	r0, 8017242 <rmw_validate_node_name+0x52>
 8017208:	1e63      	subs	r3, r4, #1
 801720a:	eb03 0e00 	add.w	lr, r3, r0
 801720e:	f1c4 0c01 	rsb	ip, r4, #1
 8017212:	eb0c 0803 	add.w	r8, ip, r3
 8017216:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 801721a:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 801721e:	f026 0220 	bic.w	r2, r6, #32
 8017222:	2909      	cmp	r1, #9
 8017224:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 8017228:	d913      	bls.n	8017252 <rmw_validate_node_name+0x62>
 801722a:	2a19      	cmp	r2, #25
 801722c:	d911      	bls.n	8017252 <rmw_validate_node_name+0x62>
 801722e:	2e5f      	cmp	r6, #95	; 0x5f
 8017230:	d00f      	beq.n	8017252 <rmw_validate_node_name+0x62>
 8017232:	2302      	movs	r3, #2
 8017234:	603b      	str	r3, [r7, #0]
 8017236:	b10d      	cbz	r5, 801723c <rmw_validate_node_name+0x4c>
 8017238:	f8c5 8000 	str.w	r8, [r5]
 801723c:	2000      	movs	r0, #0
 801723e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017242:	2301      	movs	r3, #1
 8017244:	603b      	str	r3, [r7, #0]
 8017246:	2d00      	cmp	r5, #0
 8017248:	d0f8      	beq.n	801723c <rmw_validate_node_name+0x4c>
 801724a:	2000      	movs	r0, #0
 801724c:	6028      	str	r0, [r5, #0]
 801724e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017252:	4573      	cmp	r3, lr
 8017254:	d1dd      	bne.n	8017212 <rmw_validate_node_name+0x22>
 8017256:	7822      	ldrb	r2, [r4, #0]
 8017258:	4b0d      	ldr	r3, [pc, #52]	; (8017290 <rmw_validate_node_name+0xa0>)
 801725a:	5cd3      	ldrb	r3, [r2, r3]
 801725c:	f013 0304 	ands.w	r3, r3, #4
 8017260:	d110      	bne.n	8017284 <rmw_validate_node_name+0x94>
 8017262:	28ff      	cmp	r0, #255	; 0xff
 8017264:	d806      	bhi.n	8017274 <rmw_validate_node_name+0x84>
 8017266:	603b      	str	r3, [r7, #0]
 8017268:	4618      	mov	r0, r3
 801726a:	e7e8      	b.n	801723e <rmw_validate_node_name+0x4e>
 801726c:	200b      	movs	r0, #11
 801726e:	4770      	bx	lr
 8017270:	200b      	movs	r0, #11
 8017272:	e7e4      	b.n	801723e <rmw_validate_node_name+0x4e>
 8017274:	2204      	movs	r2, #4
 8017276:	603a      	str	r2, [r7, #0]
 8017278:	2d00      	cmp	r5, #0
 801727a:	d0df      	beq.n	801723c <rmw_validate_node_name+0x4c>
 801727c:	22fe      	movs	r2, #254	; 0xfe
 801727e:	4618      	mov	r0, r3
 8017280:	602a      	str	r2, [r5, #0]
 8017282:	e7dc      	b.n	801723e <rmw_validate_node_name+0x4e>
 8017284:	2303      	movs	r3, #3
 8017286:	603b      	str	r3, [r7, #0]
 8017288:	2d00      	cmp	r5, #0
 801728a:	d1de      	bne.n	801724a <rmw_validate_node_name+0x5a>
 801728c:	e7d6      	b.n	801723c <rmw_validate_node_name+0x4c>
 801728e:	bf00      	nop
 8017290:	0801ea89 	.word	0x0801ea89

08017294 <rmw_node_name_validation_result_string>:
 8017294:	2804      	cmp	r0, #4
 8017296:	bf9a      	itte	ls
 8017298:	4b02      	ldrls	r3, [pc, #8]	; (80172a4 <rmw_node_name_validation_result_string+0x10>)
 801729a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801729e:	4802      	ldrhi	r0, [pc, #8]	; (80172a8 <rmw_node_name_validation_result_string+0x14>)
 80172a0:	4770      	bx	lr
 80172a2:	bf00      	nop
 80172a4:	0801e9e4 	.word	0x0801e9e4
 80172a8:	0801e8f8 	.word	0x0801e8f8

080172ac <on_status>:
 80172ac:	b082      	sub	sp, #8
 80172ae:	b002      	add	sp, #8
 80172b0:	4770      	bx	lr
 80172b2:	bf00      	nop

080172b4 <on_topic>:
 80172b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172b8:	4a21      	ldr	r2, [pc, #132]	; (8017340 <on_topic+0x8c>)
 80172ba:	b094      	sub	sp, #80	; 0x50
 80172bc:	6812      	ldr	r2, [r2, #0]
 80172be:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80172c0:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 80172c4:	9113      	str	r1, [sp, #76]	; 0x4c
 80172c6:	9312      	str	r3, [sp, #72]	; 0x48
 80172c8:	b3ba      	cbz	r2, 801733a <on_topic+0x86>
 80172ca:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80172ce:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80172d2:	e001      	b.n	80172d8 <on_topic+0x24>
 80172d4:	6892      	ldr	r2, [r2, #8]
 80172d6:	b382      	cbz	r2, 801733a <on_topic+0x86>
 80172d8:	68d4      	ldr	r4, [r2, #12]
 80172da:	8aa3      	ldrh	r3, [r4, #20]
 80172dc:	428b      	cmp	r3, r1
 80172de:	d1f9      	bne.n	80172d4 <on_topic+0x20>
 80172e0:	7da3      	ldrb	r3, [r4, #22]
 80172e2:	4283      	cmp	r3, r0
 80172e4:	d1f6      	bne.n	80172d4 <on_topic+0x20>
 80172e6:	2248      	movs	r2, #72	; 0x48
 80172e8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80172ec:	4668      	mov	r0, sp
 80172ee:	f001 fd71 	bl	8018dd4 <memcpy>
 80172f2:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80172f6:	4620      	mov	r0, r4
 80172f8:	f7f8 fe2a 	bl	800ff50 <rmw_uxrce_get_static_input_buffer_for_entity>
 80172fc:	4607      	mov	r7, r0
 80172fe:	b1e0      	cbz	r0, 801733a <on_topic+0x86>
 8017300:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8017304:	462a      	mov	r2, r5
 8017306:	4630      	mov	r0, r6
 8017308:	f108 0110 	add.w	r1, r8, #16
 801730c:	f7f9 fc72 	bl	8010bf4 <ucdr_deserialize_array_uint8_t>
 8017310:	b930      	cbnz	r0, 8017320 <on_topic+0x6c>
 8017312:	480c      	ldr	r0, [pc, #48]	; (8017344 <on_topic+0x90>)
 8017314:	4639      	mov	r1, r7
 8017316:	b014      	add	sp, #80	; 0x50
 8017318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801731c:	f000 b8ba 	b.w	8017494 <put_memory>
 8017320:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8017324:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8017328:	f7f8 fc50 	bl	800fbcc <rmw_uros_epoch_nanos>
 801732c:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8017330:	2305      	movs	r3, #5
 8017332:	e9c2 0100 	strd	r0, r1, [r2]
 8017336:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801733a:	b014      	add	sp, #80	; 0x50
 801733c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017340:	200148dc 	.word	0x200148dc
 8017344:	20011670 	.word	0x20011670

08017348 <on_request>:
 8017348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801734c:	4822      	ldr	r0, [pc, #136]	; (80173d8 <on_request+0x90>)
 801734e:	b095      	sub	sp, #84	; 0x54
 8017350:	9113      	str	r1, [sp, #76]	; 0x4c
 8017352:	6801      	ldr	r1, [r0, #0]
 8017354:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8017356:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 801735a:	2900      	cmp	r1, #0
 801735c:	d039      	beq.n	80173d2 <on_request+0x8a>
 801735e:	461d      	mov	r5, r3
 8017360:	e001      	b.n	8017366 <on_request+0x1e>
 8017362:	6889      	ldr	r1, [r1, #8]
 8017364:	b3a9      	cbz	r1, 80173d2 <on_request+0x8a>
 8017366:	68cc      	ldr	r4, [r1, #12]
 8017368:	8b20      	ldrh	r0, [r4, #24]
 801736a:	4290      	cmp	r0, r2
 801736c:	d1f9      	bne.n	8017362 <on_request+0x1a>
 801736e:	2248      	movs	r2, #72	; 0x48
 8017370:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8017374:	4668      	mov	r0, sp
 8017376:	f001 fd2d 	bl	8018dd4 <memcpy>
 801737a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 801737e:	4620      	mov	r0, r4
 8017380:	f7f8 fde6 	bl	800ff50 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017384:	4680      	mov	r8, r0
 8017386:	b320      	cbz	r0, 80173d2 <on_request+0x8a>
 8017388:	f8d0 900c 	ldr.w	r9, [r0, #12]
 801738c:	4632      	mov	r2, r6
 801738e:	4638      	mov	r0, r7
 8017390:	f109 0110 	add.w	r1, r9, #16
 8017394:	f7f9 fc2e 	bl	8010bf4 <ucdr_deserialize_array_uint8_t>
 8017398:	b930      	cbnz	r0, 80173a8 <on_request+0x60>
 801739a:	4810      	ldr	r0, [pc, #64]	; (80173dc <on_request+0x94>)
 801739c:	4641      	mov	r1, r8
 801739e:	b015      	add	sp, #84	; 0x54
 80173a0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173a4:	f000 b876 	b.w	8017494 <put_memory>
 80173a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80173aa:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 80173ae:	f609 0428 	addw	r4, r9, #2088	; 0x828
 80173b2:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 80173b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80173b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80173bc:	e884 0003 	stmia.w	r4, {r0, r1}
 80173c0:	f7f8 fc04 	bl	800fbcc <rmw_uros_epoch_nanos>
 80173c4:	f609 0218 	addw	r2, r9, #2072	; 0x818
 80173c8:	2303      	movs	r3, #3
 80173ca:	e9c2 0100 	strd	r0, r1, [r2]
 80173ce:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80173d2:	b015      	add	sp, #84	; 0x54
 80173d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80173d8:	200148cc 	.word	0x200148cc
 80173dc:	20011670 	.word	0x20011670

080173e0 <on_reply>:
 80173e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173e4:	4821      	ldr	r0, [pc, #132]	; (801746c <on_reply+0x8c>)
 80173e6:	b095      	sub	sp, #84	; 0x54
 80173e8:	9113      	str	r1, [sp, #76]	; 0x4c
 80173ea:	6801      	ldr	r1, [r0, #0]
 80173ec:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80173ee:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 80173f2:	b3b9      	cbz	r1, 8017464 <on_reply+0x84>
 80173f4:	461d      	mov	r5, r3
 80173f6:	e001      	b.n	80173fc <on_reply+0x1c>
 80173f8:	6889      	ldr	r1, [r1, #8]
 80173fa:	b399      	cbz	r1, 8017464 <on_reply+0x84>
 80173fc:	68cc      	ldr	r4, [r1, #12]
 80173fe:	8b20      	ldrh	r0, [r4, #24]
 8017400:	4290      	cmp	r0, r2
 8017402:	d1f9      	bne.n	80173f8 <on_reply+0x18>
 8017404:	2248      	movs	r2, #72	; 0x48
 8017406:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801740a:	4668      	mov	r0, sp
 801740c:	f001 fce2 	bl	8018dd4 <memcpy>
 8017410:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8017414:	4620      	mov	r0, r4
 8017416:	f7f8 fd9b 	bl	800ff50 <rmw_uxrce_get_static_input_buffer_for_entity>
 801741a:	4680      	mov	r8, r0
 801741c:	b310      	cbz	r0, 8017464 <on_reply+0x84>
 801741e:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8017422:	4632      	mov	r2, r6
 8017424:	4638      	mov	r0, r7
 8017426:	f109 0110 	add.w	r1, r9, #16
 801742a:	f7f9 fbe3 	bl	8010bf4 <ucdr_deserialize_array_uint8_t>
 801742e:	b930      	cbnz	r0, 801743e <on_reply+0x5e>
 8017430:	480f      	ldr	r0, [pc, #60]	; (8017470 <on_reply+0x90>)
 8017432:	4641      	mov	r1, r8
 8017434:	b015      	add	sp, #84	; 0x54
 8017436:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801743a:	f000 b82b 	b.w	8017494 <put_memory>
 801743e:	b2aa      	uxth	r2, r5
 8017440:	2300      	movs	r3, #0
 8017442:	f609 0128 	addw	r1, r9, #2088	; 0x828
 8017446:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 801744a:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 801744e:	e9c1 2300 	strd	r2, r3, [r1]
 8017452:	f7f8 fbbb 	bl	800fbcc <rmw_uros_epoch_nanos>
 8017456:	f609 0218 	addw	r2, r9, #2072	; 0x818
 801745a:	2304      	movs	r3, #4
 801745c:	e9c2 0100 	strd	r0, r1, [r2]
 8017460:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8017464:	b015      	add	sp, #84	; 0x54
 8017466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801746a:	bf00      	nop
 801746c:	20011f00 	.word	0x20011f00
 8017470:	20011670 	.word	0x20011670

08017474 <get_memory>:
 8017474:	4603      	mov	r3, r0
 8017476:	6840      	ldr	r0, [r0, #4]
 8017478:	b158      	cbz	r0, 8017492 <get_memory+0x1e>
 801747a:	6882      	ldr	r2, [r0, #8]
 801747c:	605a      	str	r2, [r3, #4]
 801747e:	b10a      	cbz	r2, 8017484 <get_memory+0x10>
 8017480:	2100      	movs	r1, #0
 8017482:	6051      	str	r1, [r2, #4]
 8017484:	681a      	ldr	r2, [r3, #0]
 8017486:	6082      	str	r2, [r0, #8]
 8017488:	b102      	cbz	r2, 801748c <get_memory+0x18>
 801748a:	6050      	str	r0, [r2, #4]
 801748c:	2200      	movs	r2, #0
 801748e:	6042      	str	r2, [r0, #4]
 8017490:	6018      	str	r0, [r3, #0]
 8017492:	4770      	bx	lr

08017494 <put_memory>:
 8017494:	684b      	ldr	r3, [r1, #4]
 8017496:	b10b      	cbz	r3, 801749c <put_memory+0x8>
 8017498:	688a      	ldr	r2, [r1, #8]
 801749a:	609a      	str	r2, [r3, #8]
 801749c:	688a      	ldr	r2, [r1, #8]
 801749e:	b102      	cbz	r2, 80174a2 <put_memory+0xe>
 80174a0:	6053      	str	r3, [r2, #4]
 80174a2:	6803      	ldr	r3, [r0, #0]
 80174a4:	428b      	cmp	r3, r1
 80174a6:	6843      	ldr	r3, [r0, #4]
 80174a8:	bf08      	it	eq
 80174aa:	6002      	streq	r2, [r0, #0]
 80174ac:	608b      	str	r3, [r1, #8]
 80174ae:	b103      	cbz	r3, 80174b2 <put_memory+0x1e>
 80174b0:	6059      	str	r1, [r3, #4]
 80174b2:	2300      	movs	r3, #0
 80174b4:	604b      	str	r3, [r1, #4]
 80174b6:	6041      	str	r1, [r0, #4]
 80174b8:	4770      	bx	lr
 80174ba:	bf00      	nop

080174bc <rmw_destroy_client>:
 80174bc:	b538      	push	{r3, r4, r5, lr}
 80174be:	b128      	cbz	r0, 80174cc <rmw_destroy_client+0x10>
 80174c0:	4604      	mov	r4, r0
 80174c2:	6800      	ldr	r0, [r0, #0]
 80174c4:	460d      	mov	r5, r1
 80174c6:	f7f8 fe99 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 80174ca:	b910      	cbnz	r0, 80174d2 <rmw_destroy_client+0x16>
 80174cc:	2401      	movs	r4, #1
 80174ce:	4620      	mov	r0, r4
 80174d0:	bd38      	pop	{r3, r4, r5, pc}
 80174d2:	6863      	ldr	r3, [r4, #4]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d0f9      	beq.n	80174cc <rmw_destroy_client+0x10>
 80174d8:	2d00      	cmp	r5, #0
 80174da:	d0f7      	beq.n	80174cc <rmw_destroy_client+0x10>
 80174dc:	6828      	ldr	r0, [r5, #0]
 80174de:	f7f8 fe8d 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 80174e2:	2800      	cmp	r0, #0
 80174e4:	d0f2      	beq.n	80174cc <rmw_destroy_client+0x10>
 80174e6:	686b      	ldr	r3, [r5, #4]
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d0ef      	beq.n	80174cc <rmw_destroy_client+0x10>
 80174ec:	6864      	ldr	r4, [r4, #4]
 80174ee:	691a      	ldr	r2, [r3, #16]
 80174f0:	6920      	ldr	r0, [r4, #16]
 80174f2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80174f6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80174fa:	6819      	ldr	r1, [r3, #0]
 80174fc:	f7fa f9fa 	bl	80118f4 <uxr_buffer_delete_entity>
 8017500:	4602      	mov	r2, r0
 8017502:	6920      	ldr	r0, [r4, #16]
 8017504:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017508:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801750c:	f7f8 fe0c 	bl	8010128 <run_xrce_session>
 8017510:	2800      	cmp	r0, #0
 8017512:	4628      	mov	r0, r5
 8017514:	bf14      	ite	ne
 8017516:	2400      	movne	r4, #0
 8017518:	2402      	moveq	r4, #2
 801751a:	f7f8 fcf9 	bl	800ff10 <rmw_uxrce_fini_client_memory>
 801751e:	e7d6      	b.n	80174ce <rmw_destroy_client+0x12>

08017520 <rmw_get_implementation_identifier>:
 8017520:	4b01      	ldr	r3, [pc, #4]	; (8017528 <rmw_get_implementation_identifier+0x8>)
 8017522:	6818      	ldr	r0, [r3, #0]
 8017524:	4770      	bx	lr
 8017526:	bf00      	nop
 8017528:	0801ea10 	.word	0x0801ea10

0801752c <create_topic>:
 801752c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017530:	4605      	mov	r5, r0
 8017532:	b085      	sub	sp, #20
 8017534:	4822      	ldr	r0, [pc, #136]	; (80175c0 <create_topic+0x94>)
 8017536:	460f      	mov	r7, r1
 8017538:	4616      	mov	r6, r2
 801753a:	f7ff ff9b 	bl	8017474 <get_memory>
 801753e:	4604      	mov	r4, r0
 8017540:	b3a0      	cbz	r0, 80175ac <create_topic+0x80>
 8017542:	692a      	ldr	r2, [r5, #16]
 8017544:	68c4      	ldr	r4, [r0, #12]
 8017546:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80175c4 <create_topic+0x98>
 801754a:	61a5      	str	r5, [r4, #24]
 801754c:	f241 5396 	movw	r3, #5526	; 0x1596
 8017550:	6166      	str	r6, [r4, #20]
 8017552:	5ad0      	ldrh	r0, [r2, r3]
 8017554:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80175c8 <create_topic+0x9c>
 8017558:	1c41      	adds	r1, r0, #1
 801755a:	52d1      	strh	r1, [r2, r3]
 801755c:	2102      	movs	r1, #2
 801755e:	f7fa fc97 	bl	8011e90 <uxr_object_id>
 8017562:	4641      	mov	r1, r8
 8017564:	6120      	str	r0, [r4, #16]
 8017566:	223c      	movs	r2, #60	; 0x3c
 8017568:	4638      	mov	r0, r7
 801756a:	f7f8 fe31 	bl	80101d0 <generate_topic_name>
 801756e:	4649      	mov	r1, r9
 8017570:	2264      	movs	r2, #100	; 0x64
 8017572:	4630      	mov	r0, r6
 8017574:	f7f8 fdf4 	bl	8010160 <generate_type_name>
 8017578:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 801757c:	2106      	movs	r1, #6
 801757e:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8017582:	f8cd 9004 	str.w	r9, [sp, #4]
 8017586:	f8cd 8000 	str.w	r8, [sp]
 801758a:	9102      	str	r1, [sp, #8]
 801758c:	6811      	ldr	r1, [r2, #0]
 801758e:	6922      	ldr	r2, [r4, #16]
 8017590:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017594:	f7fa fa2c 	bl	80119f0 <uxr_buffer_create_topic_bin>
 8017598:	4602      	mov	r2, r0
 801759a:	6928      	ldr	r0, [r5, #16]
 801759c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80175a0:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80175a4:	f7f8 fdc0 	bl	8010128 <run_xrce_session>
 80175a8:	4605      	mov	r5, r0
 80175aa:	b118      	cbz	r0, 80175b4 <create_topic+0x88>
 80175ac:	4620      	mov	r0, r4
 80175ae:	b005      	add	sp, #20
 80175b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175b4:	4620      	mov	r0, r4
 80175b6:	f7f8 fcbf 	bl	800ff38 <rmw_uxrce_fini_topic_memory>
 80175ba:	462c      	mov	r4, r5
 80175bc:	e7f6      	b.n	80175ac <create_topic+0x80>
 80175be:	bf00      	nop
 80175c0:	20014808 	.word	0x20014808
 80175c4:	20010490 	.word	0x20010490
 80175c8:	200104cc 	.word	0x200104cc

080175cc <destroy_topic>:
 80175cc:	b538      	push	{r3, r4, r5, lr}
 80175ce:	6985      	ldr	r5, [r0, #24]
 80175d0:	b1d5      	cbz	r5, 8017608 <destroy_topic+0x3c>
 80175d2:	4604      	mov	r4, r0
 80175d4:	6928      	ldr	r0, [r5, #16]
 80175d6:	6922      	ldr	r2, [r4, #16]
 80175d8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80175dc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80175e0:	6819      	ldr	r1, [r3, #0]
 80175e2:	f7fa f987 	bl	80118f4 <uxr_buffer_delete_entity>
 80175e6:	4602      	mov	r2, r0
 80175e8:	6928      	ldr	r0, [r5, #16]
 80175ea:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80175ee:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80175f2:	f7f8 fd99 	bl	8010128 <run_xrce_session>
 80175f6:	2800      	cmp	r0, #0
 80175f8:	4620      	mov	r0, r4
 80175fa:	bf14      	ite	ne
 80175fc:	2400      	movne	r4, #0
 80175fe:	2402      	moveq	r4, #2
 8017600:	f7f8 fc9a 	bl	800ff38 <rmw_uxrce_fini_topic_memory>
 8017604:	4620      	mov	r0, r4
 8017606:	bd38      	pop	{r3, r4, r5, pc}
 8017608:	2401      	movs	r4, #1
 801760a:	4620      	mov	r0, r4
 801760c:	bd38      	pop	{r3, r4, r5, pc}
 801760e:	bf00      	nop

08017610 <rmw_take_request>:
 8017610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017614:	4605      	mov	r5, r0
 8017616:	b089      	sub	sp, #36	; 0x24
 8017618:	460c      	mov	r4, r1
 801761a:	4690      	mov	r8, r2
 801761c:	461f      	mov	r7, r3
 801761e:	b10b      	cbz	r3, 8017624 <rmw_take_request+0x14>
 8017620:	2300      	movs	r3, #0
 8017622:	703b      	strb	r3, [r7, #0]
 8017624:	6828      	ldr	r0, [r5, #0]
 8017626:	f7f8 fde9 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 801762a:	2800      	cmp	r0, #0
 801762c:	d040      	beq.n	80176b0 <rmw_take_request+0xa0>
 801762e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017632:	f7f8 fd01 	bl	8010038 <rmw_uxrce_clean_expired_static_input_buffer>
 8017636:	4648      	mov	r0, r9
 8017638:	f7f8 fcd6 	bl	800ffe8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801763c:	4606      	mov	r6, r0
 801763e:	2800      	cmp	r0, #0
 8017640:	d03a      	beq.n	80176b8 <rmw_take_request+0xa8>
 8017642:	68c5      	ldr	r5, [r0, #12]
 8017644:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8017648:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 801764c:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8017650:	7423      	strb	r3, [r4, #16]
 8017652:	e9c4 1208 	strd	r1, r2, [r4, #32]
 8017656:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 801765a:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 801765e:	74e2      	strb	r2, [r4, #19]
 8017660:	f8a4 3011 	strh.w	r3, [r4, #17]
 8017664:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 8017668:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 801766c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 8017670:	61e1      	str	r1, [r4, #28]
 8017672:	6162      	str	r2, [r4, #20]
 8017674:	61a3      	str	r3, [r4, #24]
 8017676:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801767a:	689b      	ldr	r3, [r3, #8]
 801767c:	4798      	blx	r3
 801767e:	6844      	ldr	r4, [r0, #4]
 8017680:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8017684:	f105 0110 	add.w	r1, r5, #16
 8017688:	4668      	mov	r0, sp
 801768a:	f7fa f855 	bl	8011738 <ucdr_init_buffer>
 801768e:	68e3      	ldr	r3, [r4, #12]
 8017690:	4641      	mov	r1, r8
 8017692:	4668      	mov	r0, sp
 8017694:	4798      	blx	r3
 8017696:	4631      	mov	r1, r6
 8017698:	4604      	mov	r4, r0
 801769a:	4809      	ldr	r0, [pc, #36]	; (80176c0 <rmw_take_request+0xb0>)
 801769c:	f7ff fefa 	bl	8017494 <put_memory>
 80176a0:	b107      	cbz	r7, 80176a4 <rmw_take_request+0x94>
 80176a2:	703c      	strb	r4, [r7, #0]
 80176a4:	f084 0001 	eor.w	r0, r4, #1
 80176a8:	b2c0      	uxtb	r0, r0
 80176aa:	b009      	add	sp, #36	; 0x24
 80176ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176b0:	200c      	movs	r0, #12
 80176b2:	b009      	add	sp, #36	; 0x24
 80176b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176b8:	2001      	movs	r0, #1
 80176ba:	b009      	add	sp, #36	; 0x24
 80176bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176c0:	20011670 	.word	0x20011670

080176c4 <rmw_send_response>:
 80176c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176c6:	4605      	mov	r5, r0
 80176c8:	b091      	sub	sp, #68	; 0x44
 80176ca:	6800      	ldr	r0, [r0, #0]
 80176cc:	460c      	mov	r4, r1
 80176ce:	4616      	mov	r6, r2
 80176d0:	f7f8 fd94 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 80176d4:	2800      	cmp	r0, #0
 80176d6:	d043      	beq.n	8017760 <rmw_send_response+0x9c>
 80176d8:	4623      	mov	r3, r4
 80176da:	4627      	mov	r7, r4
 80176dc:	f853 0f04 	ldr.w	r0, [r3, #4]!
 80176e0:	f837 ef01 	ldrh.w	lr, [r7, #1]!
 80176e4:	6859      	ldr	r1, [r3, #4]
 80176e6:	686d      	ldr	r5, [r5, #4]
 80176e8:	689a      	ldr	r2, [r3, #8]
 80176ea:	78bb      	ldrb	r3, [r7, #2]
 80176ec:	f894 c000 	ldrb.w	ip, [r4]
 80176f0:	6967      	ldr	r7, [r4, #20]
 80176f2:	f88d 3016 	strb.w	r3, [sp, #22]
 80176f6:	ab02      	add	r3, sp, #8
 80176f8:	f8ad e014 	strh.w	lr, [sp, #20]
 80176fc:	f88d c017 	strb.w	ip, [sp, #23]
 8017700:	9706      	str	r7, [sp, #24]
 8017702:	c307      	stmia	r3!, {r0, r1, r2}
 8017704:	696b      	ldr	r3, [r5, #20]
 8017706:	6922      	ldr	r2, [r4, #16]
 8017708:	9207      	str	r2, [sp, #28]
 801770a:	68db      	ldr	r3, [r3, #12]
 801770c:	6fac      	ldr	r4, [r5, #120]	; 0x78
 801770e:	4798      	blx	r3
 8017710:	4603      	mov	r3, r0
 8017712:	4630      	mov	r0, r6
 8017714:	685f      	ldr	r7, [r3, #4]
 8017716:	693b      	ldr	r3, [r7, #16]
 8017718:	4798      	blx	r3
 801771a:	6923      	ldr	r3, [r4, #16]
 801771c:	3018      	adds	r0, #24
 801771e:	9000      	str	r0, [sp, #0]
 8017720:	692a      	ldr	r2, [r5, #16]
 8017722:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8017724:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8017728:	ab08      	add	r3, sp, #32
 801772a:	f7fc fa6d 	bl	8013c08 <uxr_prepare_output_stream>
 801772e:	b910      	cbnz	r0, 8017736 <rmw_send_response+0x72>
 8017730:	2001      	movs	r0, #1
 8017732:	b011      	add	sp, #68	; 0x44
 8017734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017736:	a902      	add	r1, sp, #8
 8017738:	a808      	add	r0, sp, #32
 801773a:	f7fd f8c3 	bl	80148c4 <uxr_serialize_SampleIdentity>
 801773e:	68bb      	ldr	r3, [r7, #8]
 8017740:	a908      	add	r1, sp, #32
 8017742:	4630      	mov	r0, r6
 8017744:	4798      	blx	r3
 8017746:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 801774a:	6920      	ldr	r0, [r4, #16]
 801774c:	2b01      	cmp	r3, #1
 801774e:	d00a      	beq.n	8017766 <rmw_send_response+0xa2>
 8017750:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8017752:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017756:	f7fb f9c5 	bl	8012ae4 <uxr_run_session_until_confirm_delivery>
 801775a:	2000      	movs	r0, #0
 801775c:	b011      	add	sp, #68	; 0x44
 801775e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017760:	200c      	movs	r0, #12
 8017762:	b011      	add	sp, #68	; 0x44
 8017764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017766:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801776a:	f7fb f927 	bl	80129bc <uxr_flash_output_streams>
 801776e:	2000      	movs	r0, #0
 8017770:	b011      	add	sp, #68	; 0x44
 8017772:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017774 <rmw_take_response>:
 8017774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017778:	4605      	mov	r5, r0
 801777a:	b089      	sub	sp, #36	; 0x24
 801777c:	460f      	mov	r7, r1
 801777e:	4690      	mov	r8, r2
 8017780:	461c      	mov	r4, r3
 8017782:	b10b      	cbz	r3, 8017788 <rmw_take_response+0x14>
 8017784:	2300      	movs	r3, #0
 8017786:	7023      	strb	r3, [r4, #0]
 8017788:	6828      	ldr	r0, [r5, #0]
 801778a:	f7f8 fd37 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 801778e:	b360      	cbz	r0, 80177ea <rmw_take_response+0x76>
 8017790:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017794:	f7f8 fc50 	bl	8010038 <rmw_uxrce_clean_expired_static_input_buffer>
 8017798:	4648      	mov	r0, r9
 801779a:	f7f8 fc25 	bl	800ffe8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801779e:	4606      	mov	r6, r0
 80177a0:	b338      	cbz	r0, 80177f2 <rmw_take_response+0x7e>
 80177a2:	68c5      	ldr	r5, [r0, #12]
 80177a4:	f8d9 1014 	ldr.w	r1, [r9, #20]
 80177a8:	f605 0328 	addw	r3, r5, #2088	; 0x828
 80177ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177b0:	68c9      	ldr	r1, [r1, #12]
 80177b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80177b6:	4788      	blx	r1
 80177b8:	6847      	ldr	r7, [r0, #4]
 80177ba:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 80177be:	f105 0110 	add.w	r1, r5, #16
 80177c2:	4668      	mov	r0, sp
 80177c4:	f7f9 ffb8 	bl	8011738 <ucdr_init_buffer>
 80177c8:	4641      	mov	r1, r8
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	4668      	mov	r0, sp
 80177ce:	4798      	blx	r3
 80177d0:	4631      	mov	r1, r6
 80177d2:	4605      	mov	r5, r0
 80177d4:	4809      	ldr	r0, [pc, #36]	; (80177fc <rmw_take_response+0x88>)
 80177d6:	f7ff fe5d 	bl	8017494 <put_memory>
 80177da:	b104      	cbz	r4, 80177de <rmw_take_response+0x6a>
 80177dc:	7025      	strb	r5, [r4, #0]
 80177de:	f085 0001 	eor.w	r0, r5, #1
 80177e2:	b2c0      	uxtb	r0, r0
 80177e4:	b009      	add	sp, #36	; 0x24
 80177e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177ea:	200c      	movs	r0, #12
 80177ec:	b009      	add	sp, #36	; 0x24
 80177ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177f2:	2001      	movs	r0, #1
 80177f4:	b009      	add	sp, #36	; 0x24
 80177f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177fa:	bf00      	nop
 80177fc:	20011670 	.word	0x20011670

08017800 <rmw_wait>:
 8017800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017804:	4688      	mov	r8, r1
 8017806:	4606      	mov	r6, r0
 8017808:	990c      	ldr	r1, [sp, #48]	; 0x30
 801780a:	461d      	mov	r5, r3
 801780c:	4691      	mov	r9, r2
 801780e:	2a00      	cmp	r2, #0
 8017810:	f000 811d 	beq.w	8017a4e <rmw_wait+0x24e>
 8017814:	2900      	cmp	r1, #0
 8017816:	f000 8126 	beq.w	8017a66 <rmw_wait+0x266>
 801781a:	e9d1 2300 	ldrd	r2, r3, [r1]
 801781e:	0157      	lsls	r7, r2, #5
 8017820:	015c      	lsls	r4, r3, #5
 8017822:	1abf      	subs	r7, r7, r2
 8017824:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 8017828:	eb64 0403 	sbc.w	r4, r4, r3
 801782c:	00b8      	lsls	r0, r7, #2
 801782e:	00a4      	lsls	r4, r4, #2
 8017830:	ea44 7497 	orr.w	r4, r4, r7, lsr #30
 8017834:	1887      	adds	r7, r0, r2
 8017836:	eb43 0404 	adc.w	r4, r3, r4
 801783a:	4aa8      	ldr	r2, [pc, #672]	; (8017adc <rmw_wait+0x2dc>)
 801783c:	2300      	movs	r3, #0
 801783e:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8017842:	f7e9 fa59 	bl	8000cf8 <__aeabi_uldivmod>
 8017846:	00e4      	lsls	r4, r4, #3
 8017848:	ea44 7457 	orr.w	r4, r4, r7, lsr #29
 801784c:	00ff      	lsls	r7, r7, #3
 801784e:	eb17 0a00 	adds.w	sl, r7, r0
 8017852:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8017856:	eb44 0b01 	adc.w	fp, r4, r1
 801785a:	2300      	movs	r3, #0
 801785c:	4552      	cmp	r2, sl
 801785e:	eb73 010b 	sbcs.w	r1, r3, fp
 8017862:	f2c0 80f2 	blt.w	8017a4a <rmw_wait+0x24a>
 8017866:	4f9e      	ldr	r7, [pc, #632]	; (8017ae0 <rmw_wait+0x2e0>)
 8017868:	f7f8 fbe6 	bl	8010038 <rmw_uxrce_clean_expired_static_input_buffer>
 801786c:	683b      	ldr	r3, [r7, #0]
 801786e:	b143      	cbz	r3, 8017882 <rmw_wait+0x82>
 8017870:	461a      	mov	r2, r3
 8017872:	f241 54a4 	movw	r4, #5540	; 0x15a4
 8017876:	2000      	movs	r0, #0
 8017878:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 801787c:	5508      	strb	r0, [r1, r4]
 801787e:	2a00      	cmp	r2, #0
 8017880:	d1fa      	bne.n	8017878 <rmw_wait+0x78>
 8017882:	f1b9 0f00 	cmp.w	r9, #0
 8017886:	d011      	beq.n	80178ac <rmw_wait+0xac>
 8017888:	f8d9 0000 	ldr.w	r0, [r9]
 801788c:	b170      	cbz	r0, 80178ac <rmw_wait+0xac>
 801788e:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8017892:	2200      	movs	r2, #0
 8017894:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8017898:	2401      	movs	r4, #1
 801789a:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 801789e:	6f89      	ldr	r1, [r1, #120]	; 0x78
 80178a0:	3201      	adds	r2, #1
 80178a2:	6909      	ldr	r1, [r1, #16]
 80178a4:	4290      	cmp	r0, r2
 80178a6:	f801 400c 	strb.w	r4, [r1, ip]
 80178aa:	d1f6      	bne.n	801789a <rmw_wait+0x9a>
 80178ac:	b185      	cbz	r5, 80178d0 <rmw_wait+0xd0>
 80178ae:	6828      	ldr	r0, [r5, #0]
 80178b0:	b170      	cbz	r0, 80178d0 <rmw_wait+0xd0>
 80178b2:	f8d5 e004 	ldr.w	lr, [r5, #4]
 80178b6:	2200      	movs	r2, #0
 80178b8:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 80178bc:	2401      	movs	r4, #1
 80178be:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 80178c2:	6f89      	ldr	r1, [r1, #120]	; 0x78
 80178c4:	3201      	adds	r2, #1
 80178c6:	6909      	ldr	r1, [r1, #16]
 80178c8:	4290      	cmp	r0, r2
 80178ca:	f801 400c 	strb.w	r4, [r1, ip]
 80178ce:	d1f6      	bne.n	80178be <rmw_wait+0xbe>
 80178d0:	b186      	cbz	r6, 80178f4 <rmw_wait+0xf4>
 80178d2:	6830      	ldr	r0, [r6, #0]
 80178d4:	b170      	cbz	r0, 80178f4 <rmw_wait+0xf4>
 80178d6:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80178da:	2200      	movs	r2, #0
 80178dc:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 80178e0:	2401      	movs	r4, #1
 80178e2:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 80178e6:	6a09      	ldr	r1, [r1, #32]
 80178e8:	3201      	adds	r2, #1
 80178ea:	6909      	ldr	r1, [r1, #16]
 80178ec:	4290      	cmp	r0, r2
 80178ee:	f801 400c 	strb.w	r4, [r1, ip]
 80178f2:	d1f6      	bne.n	80178e2 <rmw_wait+0xe2>
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	f000 80ce 	beq.w	8017a96 <rmw_wait+0x296>
 80178fa:	2400      	movs	r4, #0
 80178fc:	f241 51a4 	movw	r1, #5540	; 0x15a4
 8017900:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8017904:	5c52      	ldrb	r2, [r2, r1]
 8017906:	4414      	add	r4, r2
 8017908:	b2e4      	uxtb	r4, r4
 801790a:	2b00      	cmp	r3, #0
 801790c:	d1f8      	bne.n	8017900 <rmw_wait+0x100>
 801790e:	f7f8 fb93 	bl	8010038 <rmw_uxrce_clean_expired_static_input_buffer>
 8017912:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8017916:	d00d      	beq.n	8017934 <rmw_wait+0x134>
 8017918:	ee07 aa90 	vmov	s15, sl
 801791c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017920:	ee07 4a90 	vmov	s15, r4
 8017924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801792c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017930:	ee17 aa90 	vmov	sl, s15
 8017934:	683c      	ldr	r4, [r7, #0]
 8017936:	b144      	cbz	r4, 801794a <rmw_wait+0x14a>
 8017938:	f241 57a4 	movw	r7, #5540	; 0x15a4
 801793c:	68e0      	ldr	r0, [r4, #12]
 801793e:	5dc3      	ldrb	r3, [r0, r7]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d169      	bne.n	8017a18 <rmw_wait+0x218>
 8017944:	68a4      	ldr	r4, [r4, #8]
 8017946:	2c00      	cmp	r4, #0
 8017948:	d1f8      	bne.n	801793c <rmw_wait+0x13c>
 801794a:	f1b9 0f00 	cmp.w	r9, #0
 801794e:	f000 80a4 	beq.w	8017a9a <rmw_wait+0x29a>
 8017952:	f8d9 7000 	ldr.w	r7, [r9]
 8017956:	2f00      	cmp	r7, #0
 8017958:	f000 8088 	beq.w	8017a6c <rmw_wait+0x26c>
 801795c:	2400      	movs	r4, #0
 801795e:	4627      	mov	r7, r4
 8017960:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017964:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017968:	f7f8 fb3e 	bl	800ffe8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801796c:	2800      	cmp	r0, #0
 801796e:	d064      	beq.n	8017a3a <rmw_wait+0x23a>
 8017970:	f8d9 3000 	ldr.w	r3, [r9]
 8017974:	3401      	adds	r4, #1
 8017976:	42a3      	cmp	r3, r4
 8017978:	f04f 0701 	mov.w	r7, #1
 801797c:	d8f0      	bhi.n	8017960 <rmw_wait+0x160>
 801797e:	b17d      	cbz	r5, 80179a0 <rmw_wait+0x1a0>
 8017980:	682b      	ldr	r3, [r5, #0]
 8017982:	b16b      	cbz	r3, 80179a0 <rmw_wait+0x1a0>
 8017984:	2400      	movs	r4, #0
 8017986:	686b      	ldr	r3, [r5, #4]
 8017988:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801798c:	f7f8 fb2c 	bl	800ffe8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017990:	2800      	cmp	r0, #0
 8017992:	d04a      	beq.n	8017a2a <rmw_wait+0x22a>
 8017994:	682b      	ldr	r3, [r5, #0]
 8017996:	3401      	adds	r4, #1
 8017998:	42a3      	cmp	r3, r4
 801799a:	f04f 0701 	mov.w	r7, #1
 801799e:	d8f2      	bhi.n	8017986 <rmw_wait+0x186>
 80179a0:	b1de      	cbz	r6, 80179da <rmw_wait+0x1da>
 80179a2:	6833      	ldr	r3, [r6, #0]
 80179a4:	b1cb      	cbz	r3, 80179da <rmw_wait+0x1da>
 80179a6:	2400      	movs	r4, #0
 80179a8:	6873      	ldr	r3, [r6, #4]
 80179aa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80179ae:	f7f8 fb1b 	bl	800ffe8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80179b2:	b158      	cbz	r0, 80179cc <rmw_wait+0x1cc>
 80179b4:	6833      	ldr	r3, [r6, #0]
 80179b6:	3401      	adds	r4, #1
 80179b8:	42a3      	cmp	r3, r4
 80179ba:	d963      	bls.n	8017a84 <rmw_wait+0x284>
 80179bc:	6873      	ldr	r3, [r6, #4]
 80179be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80179c2:	2701      	movs	r7, #1
 80179c4:	f7f8 fb10 	bl	800ffe8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80179c8:	2800      	cmp	r0, #0
 80179ca:	d1f3      	bne.n	80179b4 <rmw_wait+0x1b4>
 80179cc:	e9d6 3200 	ldrd	r3, r2, [r6]
 80179d0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80179d4:	3401      	adds	r4, #1
 80179d6:	42a3      	cmp	r3, r4
 80179d8:	d8e6      	bhi.n	80179a8 <rmw_wait+0x1a8>
 80179da:	f1b8 0f00 	cmp.w	r8, #0
 80179de:	d016      	beq.n	8017a0e <rmw_wait+0x20e>
 80179e0:	f8d8 4000 	ldr.w	r4, [r8]
 80179e4:	b19c      	cbz	r4, 8017a0e <rmw_wait+0x20e>
 80179e6:	2300      	movs	r3, #0
 80179e8:	461d      	mov	r5, r3
 80179ea:	e004      	b.n	80179f6 <rmw_wait+0x1f6>
 80179ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80179f0:	3301      	adds	r3, #1
 80179f2:	42a3      	cmp	r3, r4
 80179f4:	d00b      	beq.n	8017a0e <rmw_wait+0x20e>
 80179f6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80179fa:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80179fe:	780a      	ldrb	r2, [r1, #0]
 8017a00:	2a00      	cmp	r2, #0
 8017a02:	d0f3      	beq.n	80179ec <rmw_wait+0x1ec>
 8017a04:	3301      	adds	r3, #1
 8017a06:	42a3      	cmp	r3, r4
 8017a08:	700d      	strb	r5, [r1, #0]
 8017a0a:	4617      	mov	r7, r2
 8017a0c:	d1f3      	bne.n	80179f6 <rmw_wait+0x1f6>
 8017a0e:	2f00      	cmp	r7, #0
 8017a10:	d035      	beq.n	8017a7e <rmw_wait+0x27e>
 8017a12:	2000      	movs	r0, #0
 8017a14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a18:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017a1c:	4651      	mov	r1, sl
 8017a1e:	f7fb f841 	bl	8012aa4 <uxr_run_session_until_data>
 8017a22:	68a4      	ldr	r4, [r4, #8]
 8017a24:	2c00      	cmp	r4, #0
 8017a26:	d189      	bne.n	801793c <rmw_wait+0x13c>
 8017a28:	e78f      	b.n	801794a <rmw_wait+0x14a>
 8017a2a:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017a2e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017a32:	3401      	adds	r4, #1
 8017a34:	429c      	cmp	r4, r3
 8017a36:	d3a6      	bcc.n	8017986 <rmw_wait+0x186>
 8017a38:	e7b2      	b.n	80179a0 <rmw_wait+0x1a0>
 8017a3a:	e9d9 3200 	ldrd	r3, r2, [r9]
 8017a3e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017a42:	3401      	adds	r4, #1
 8017a44:	42a3      	cmp	r3, r4
 8017a46:	d88b      	bhi.n	8017960 <rmw_wait+0x160>
 8017a48:	e799      	b.n	801797e <rmw_wait+0x17e>
 8017a4a:	4692      	mov	sl, r2
 8017a4c:	e70b      	b.n	8017866 <rmw_wait+0x66>
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	f47f aee0 	bne.w	8017814 <rmw_wait+0x14>
 8017a54:	2800      	cmp	r0, #0
 8017a56:	f47f aedd 	bne.w	8017814 <rmw_wait+0x14>
 8017a5a:	f1b8 0f00 	cmp.w	r8, #0
 8017a5e:	d0d8      	beq.n	8017a12 <rmw_wait+0x212>
 8017a60:	2900      	cmp	r1, #0
 8017a62:	f47f aeda 	bne.w	801781a <rmw_wait+0x1a>
 8017a66:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8017a6a:	e6fc      	b.n	8017866 <rmw_wait+0x66>
 8017a6c:	bb05      	cbnz	r5, 8017ab0 <rmw_wait+0x2b0>
 8017a6e:	b366      	cbz	r6, 8017aca <rmw_wait+0x2ca>
 8017a70:	6833      	ldr	r3, [r6, #0]
 8017a72:	462f      	mov	r7, r5
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d196      	bne.n	80179a6 <rmw_wait+0x1a6>
 8017a78:	f1b8 0f00 	cmp.w	r8, #0
 8017a7c:	d1b0      	bne.n	80179e0 <rmw_wait+0x1e0>
 8017a7e:	2002      	movs	r0, #2
 8017a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a84:	f1b8 0f00 	cmp.w	r8, #0
 8017a88:	d0c3      	beq.n	8017a12 <rmw_wait+0x212>
 8017a8a:	f8d8 4000 	ldr.w	r4, [r8]
 8017a8e:	2701      	movs	r7, #1
 8017a90:	2c00      	cmp	r4, #0
 8017a92:	d1a8      	bne.n	80179e6 <rmw_wait+0x1e6>
 8017a94:	e7bd      	b.n	8017a12 <rmw_wait+0x212>
 8017a96:	461c      	mov	r4, r3
 8017a98:	e739      	b.n	801790e <rmw_wait+0x10e>
 8017a9a:	2d00      	cmp	r5, #0
 8017a9c:	d0e7      	beq.n	8017a6e <rmw_wait+0x26e>
 8017a9e:	682b      	ldr	r3, [r5, #0]
 8017aa0:	464f      	mov	r7, r9
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	f47f af6e 	bne.w	8017984 <rmw_wait+0x184>
 8017aa8:	2e00      	cmp	r6, #0
 8017aaa:	f47f af7a 	bne.w	80179a2 <rmw_wait+0x1a2>
 8017aae:	e007      	b.n	8017ac0 <rmw_wait+0x2c0>
 8017ab0:	682b      	ldr	r3, [r5, #0]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	f47f af66 	bne.w	8017984 <rmw_wait+0x184>
 8017ab8:	461f      	mov	r7, r3
 8017aba:	2e00      	cmp	r6, #0
 8017abc:	f47f af71 	bne.w	80179a2 <rmw_wait+0x1a2>
 8017ac0:	4637      	mov	r7, r6
 8017ac2:	f1b8 0f00 	cmp.w	r8, #0
 8017ac6:	d18b      	bne.n	80179e0 <rmw_wait+0x1e0>
 8017ac8:	e7d9      	b.n	8017a7e <rmw_wait+0x27e>
 8017aca:	f1b8 0f00 	cmp.w	r8, #0
 8017ace:	d0d6      	beq.n	8017a7e <rmw_wait+0x27e>
 8017ad0:	f8d8 4000 	ldr.w	r4, [r8]
 8017ad4:	4637      	mov	r7, r6
 8017ad6:	2c00      	cmp	r4, #0
 8017ad8:	d185      	bne.n	80179e6 <rmw_wait+0x1e6>
 8017ada:	e7d0      	b.n	8017a7e <rmw_wait+0x27e>
 8017adc:	000f4240 	.word	0x000f4240
 8017ae0:	20014818 	.word	0x20014818

08017ae4 <rmw_create_wait_set>:
 8017ae4:	b508      	push	{r3, lr}
 8017ae6:	4803      	ldr	r0, [pc, #12]	; (8017af4 <rmw_create_wait_set+0x10>)
 8017ae8:	f7ff fcc4 	bl	8017474 <get_memory>
 8017aec:	b108      	cbz	r0, 8017af2 <rmw_create_wait_set+0xe>
 8017aee:	68c0      	ldr	r0, [r0, #12]
 8017af0:	3010      	adds	r0, #16
 8017af2:	bd08      	pop	{r3, pc}
 8017af4:	20015ff0 	.word	0x20015ff0

08017af8 <rmw_destroy_wait_set>:
 8017af8:	b508      	push	{r3, lr}
 8017afa:	4b08      	ldr	r3, [pc, #32]	; (8017b1c <rmw_destroy_wait_set+0x24>)
 8017afc:	6819      	ldr	r1, [r3, #0]
 8017afe:	b911      	cbnz	r1, 8017b06 <rmw_destroy_wait_set+0xe>
 8017b00:	e00a      	b.n	8017b18 <rmw_destroy_wait_set+0x20>
 8017b02:	6889      	ldr	r1, [r1, #8]
 8017b04:	b141      	cbz	r1, 8017b18 <rmw_destroy_wait_set+0x20>
 8017b06:	68cb      	ldr	r3, [r1, #12]
 8017b08:	3310      	adds	r3, #16
 8017b0a:	4298      	cmp	r0, r3
 8017b0c:	d1f9      	bne.n	8017b02 <rmw_destroy_wait_set+0xa>
 8017b0e:	4803      	ldr	r0, [pc, #12]	; (8017b1c <rmw_destroy_wait_set+0x24>)
 8017b10:	f7ff fcc0 	bl	8017494 <put_memory>
 8017b14:	2000      	movs	r0, #0
 8017b16:	bd08      	pop	{r3, pc}
 8017b18:	2001      	movs	r0, #1
 8017b1a:	bd08      	pop	{r3, pc}
 8017b1c:	20015ff0 	.word	0x20015ff0

08017b20 <_MultiArrayLayout__max_serialized_size>:
 8017b20:	b508      	push	{r3, lr}
 8017b22:	2104      	movs	r1, #4
 8017b24:	2000      	movs	r0, #0
 8017b26:	f7f9 fe0b 	bl	8011740 <ucdr_alignment>
 8017b2a:	3004      	adds	r0, #4
 8017b2c:	bd08      	pop	{r3, pc}
 8017b2e:	bf00      	nop

08017b30 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8017b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b34:	4607      	mov	r7, r0
 8017b36:	b378      	cbz	r0, 8017b98 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x68>
 8017b38:	4688      	mov	r8, r1
 8017b3a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8017b3e:	2104      	movs	r1, #4
 8017b40:	4640      	mov	r0, r8
 8017b42:	f7f9 fdfd 	bl	8011740 <ucdr_alignment>
 8017b46:	f108 0304 	add.w	r3, r8, #4
 8017b4a:	18c6      	adds	r6, r0, r3
 8017b4c:	f1b9 0f00 	cmp.w	r9, #0
 8017b50:	d018      	beq.n	8017b84 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x54>
 8017b52:	2400      	movs	r4, #0
 8017b54:	f001 f840 	bl	8018bd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8017b58:	683a      	ldr	r2, [r7, #0]
 8017b5a:	6843      	ldr	r3, [r0, #4]
 8017b5c:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8017b60:	4631      	mov	r1, r6
 8017b62:	695b      	ldr	r3, [r3, #20]
 8017b64:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8017b68:	4798      	blx	r3
 8017b6a:	2804      	cmp	r0, #4
 8017b6c:	4601      	mov	r1, r0
 8017b6e:	4605      	mov	r5, r0
 8017b70:	bf28      	it	cs
 8017b72:	2104      	movcs	r1, #4
 8017b74:	4630      	mov	r0, r6
 8017b76:	f7f9 fde3 	bl	8011740 <ucdr_alignment>
 8017b7a:	3401      	adds	r4, #1
 8017b7c:	4405      	add	r5, r0
 8017b7e:	45a1      	cmp	r9, r4
 8017b80:	442e      	add	r6, r5
 8017b82:	d1e7      	bne.n	8017b54 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x24>
 8017b84:	2104      	movs	r1, #4
 8017b86:	4630      	mov	r0, r6
 8017b88:	f7f9 fdda 	bl	8011740 <ucdr_alignment>
 8017b8c:	f1c8 0804 	rsb	r8, r8, #4
 8017b90:	4446      	add	r6, r8
 8017b92:	4430      	add	r0, r6
 8017b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b98:	4b05      	ldr	r3, [pc, #20]	; (8017bb0 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x80>)
 8017b9a:	4806      	ldr	r0, [pc, #24]	; (8017bb4 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x84>)
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	221b      	movs	r2, #27
 8017ba0:	68db      	ldr	r3, [r3, #12]
 8017ba2:	2101      	movs	r1, #1
 8017ba4:	f001 f88a 	bl	8018cbc <fwrite>
 8017ba8:	4638      	mov	r0, r7
 8017baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017bae:	bf00      	nop
 8017bb0:	20000190 	.word	0x20000190
 8017bb4:	0801e2a8 	.word	0x0801e2a8

08017bb8 <_MultiArrayLayout__get_serialized_size>:
 8017bb8:	2100      	movs	r1, #0
 8017bba:	f7ff bfb9 	b.w	8017b30 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 8017bbe:	bf00      	nop

08017bc0 <_MultiArrayLayout__cdr_deserialize>:
 8017bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bc2:	460e      	mov	r6, r1
 8017bc4:	b083      	sub	sp, #12
 8017bc6:	b311      	cbz	r1, 8017c0e <_MultiArrayLayout__cdr_deserialize+0x4e>
 8017bc8:	a901      	add	r1, sp, #4
 8017bca:	4607      	mov	r7, r0
 8017bcc:	f7f9 faf4 	bl	80111b8 <ucdr_deserialize_uint32_t>
 8017bd0:	9b01      	ldr	r3, [sp, #4]
 8017bd2:	68b2      	ldr	r2, [r6, #8]
 8017bd4:	429a      	cmp	r2, r3
 8017bd6:	d325      	bcc.n	8017c24 <_MultiArrayLayout__cdr_deserialize+0x64>
 8017bd8:	6073      	str	r3, [r6, #4]
 8017bda:	b18b      	cbz	r3, 8017c00 <_MultiArrayLayout__cdr_deserialize+0x40>
 8017bdc:	2400      	movs	r4, #0
 8017bde:	4625      	mov	r5, r4
 8017be0:	e002      	b.n	8017be8 <_MultiArrayLayout__cdr_deserialize+0x28>
 8017be2:	9b01      	ldr	r3, [sp, #4]
 8017be4:	42ab      	cmp	r3, r5
 8017be6:	d90b      	bls.n	8017c00 <_MultiArrayLayout__cdr_deserialize+0x40>
 8017be8:	f000 fff6 	bl	8018bd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8017bec:	6831      	ldr	r1, [r6, #0]
 8017bee:	6843      	ldr	r3, [r0, #4]
 8017bf0:	4421      	add	r1, r4
 8017bf2:	68db      	ldr	r3, [r3, #12]
 8017bf4:	4638      	mov	r0, r7
 8017bf6:	4798      	blx	r3
 8017bf8:	3501      	adds	r5, #1
 8017bfa:	3414      	adds	r4, #20
 8017bfc:	2800      	cmp	r0, #0
 8017bfe:	d1f0      	bne.n	8017be2 <_MultiArrayLayout__cdr_deserialize+0x22>
 8017c00:	f106 010c 	add.w	r1, r6, #12
 8017c04:	4638      	mov	r0, r7
 8017c06:	f7f9 fad7 	bl	80111b8 <ucdr_deserialize_uint32_t>
 8017c0a:	b003      	add	sp, #12
 8017c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c0e:	4b0b      	ldr	r3, [pc, #44]	; (8017c3c <_MultiArrayLayout__cdr_deserialize+0x7c>)
 8017c10:	480b      	ldr	r0, [pc, #44]	; (8017c40 <_MultiArrayLayout__cdr_deserialize+0x80>)
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	221b      	movs	r2, #27
 8017c16:	68db      	ldr	r3, [r3, #12]
 8017c18:	2101      	movs	r1, #1
 8017c1a:	f001 f84f 	bl	8018cbc <fwrite>
 8017c1e:	4630      	mov	r0, r6
 8017c20:	b003      	add	sp, #12
 8017c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c24:	4b05      	ldr	r3, [pc, #20]	; (8017c3c <_MultiArrayLayout__cdr_deserialize+0x7c>)
 8017c26:	4807      	ldr	r0, [pc, #28]	; (8017c44 <_MultiArrayLayout__cdr_deserialize+0x84>)
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	2231      	movs	r2, #49	; 0x31
 8017c2c:	68db      	ldr	r3, [r3, #12]
 8017c2e:	2101      	movs	r1, #1
 8017c30:	f001 f844 	bl	8018cbc <fwrite>
 8017c34:	2000      	movs	r0, #0
 8017c36:	b003      	add	sp, #12
 8017c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c3a:	bf00      	nop
 8017c3c:	20000190 	.word	0x20000190
 8017c40:	0801e2a8 	.word	0x0801e2a8
 8017c44:	0801ea14 	.word	0x0801ea14

08017c48 <_MultiArrayLayout__cdr_serialize>:
 8017c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c4a:	4605      	mov	r5, r0
 8017c4c:	b1f8      	cbz	r0, 8017c8e <_MultiArrayLayout__cdr_serialize+0x46>
 8017c4e:	6847      	ldr	r7, [r0, #4]
 8017c50:	460e      	mov	r6, r1
 8017c52:	4608      	mov	r0, r1
 8017c54:	4639      	mov	r1, r7
 8017c56:	f7f9 fa4f 	bl	80110f8 <ucdr_serialize_uint32_t>
 8017c5a:	b190      	cbz	r0, 8017c82 <_MultiArrayLayout__cdr_serialize+0x3a>
 8017c5c:	b18f      	cbz	r7, 8017c82 <_MultiArrayLayout__cdr_serialize+0x3a>
 8017c5e:	2400      	movs	r4, #0
 8017c60:	e001      	b.n	8017c66 <_MultiArrayLayout__cdr_serialize+0x1e>
 8017c62:	42a7      	cmp	r7, r4
 8017c64:	d00d      	beq.n	8017c82 <_MultiArrayLayout__cdr_serialize+0x3a>
 8017c66:	f000 ffb7 	bl	8018bd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8017c6a:	682a      	ldr	r2, [r5, #0]
 8017c6c:	6843      	ldr	r3, [r0, #4]
 8017c6e:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8017c72:	689b      	ldr	r3, [r3, #8]
 8017c74:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8017c78:	4631      	mov	r1, r6
 8017c7a:	3401      	adds	r4, #1
 8017c7c:	4798      	blx	r3
 8017c7e:	2800      	cmp	r0, #0
 8017c80:	d1ef      	bne.n	8017c62 <_MultiArrayLayout__cdr_serialize+0x1a>
 8017c82:	68e9      	ldr	r1, [r5, #12]
 8017c84:	4630      	mov	r0, r6
 8017c86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017c8a:	f7f9 ba35 	b.w	80110f8 <ucdr_serialize_uint32_t>
 8017c8e:	4b05      	ldr	r3, [pc, #20]	; (8017ca4 <_MultiArrayLayout__cdr_serialize+0x5c>)
 8017c90:	4805      	ldr	r0, [pc, #20]	; (8017ca8 <_MultiArrayLayout__cdr_serialize+0x60>)
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	221b      	movs	r2, #27
 8017c96:	68db      	ldr	r3, [r3, #12]
 8017c98:	2101      	movs	r1, #1
 8017c9a:	f001 f80f 	bl	8018cbc <fwrite>
 8017c9e:	4628      	mov	r0, r5
 8017ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ca2:	bf00      	nop
 8017ca4:	20000190 	.word	0x20000190
 8017ca8:	0801e2a8 	.word	0x0801e2a8

08017cac <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8017cac:	b508      	push	{r3, lr}
 8017cae:	4603      	mov	r3, r0
 8017cb0:	2200      	movs	r2, #0
 8017cb2:	4608      	mov	r0, r1
 8017cb4:	701a      	strb	r2, [r3, #0]
 8017cb6:	2104      	movs	r1, #4
 8017cb8:	f7f9 fd42 	bl	8011740 <ucdr_alignment>
 8017cbc:	3004      	adds	r0, #4
 8017cbe:	bd08      	pop	{r3, pc}

08017cc0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8017cc0:	4800      	ldr	r0, [pc, #0]	; (8017cc4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 8017cc2:	4770      	bx	lr
 8017cc4:	20000140 	.word	0x20000140

08017cc8 <ucdr_serialize_string>:
 8017cc8:	b510      	push	{r4, lr}
 8017cca:	b082      	sub	sp, #8
 8017ccc:	4604      	mov	r4, r0
 8017cce:	4608      	mov	r0, r1
 8017cd0:	9101      	str	r1, [sp, #4]
 8017cd2:	f7e8 fa87 	bl	80001e4 <strlen>
 8017cd6:	9901      	ldr	r1, [sp, #4]
 8017cd8:	4602      	mov	r2, r0
 8017cda:	3201      	adds	r2, #1
 8017cdc:	4620      	mov	r0, r4
 8017cde:	b002      	add	sp, #8
 8017ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ce4:	f7f9 bd9c 	b.w	8011820 <ucdr_serialize_sequence_char>

08017ce8 <uxr_init_input_best_effort_stream>:
 8017ce8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017cec:	8003      	strh	r3, [r0, #0]
 8017cee:	4770      	bx	lr

08017cf0 <uxr_reset_input_best_effort_stream>:
 8017cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017cf4:	8003      	strh	r3, [r0, #0]
 8017cf6:	4770      	bx	lr

08017cf8 <uxr_receive_best_effort_message>:
 8017cf8:	b538      	push	{r3, r4, r5, lr}
 8017cfa:	4604      	mov	r4, r0
 8017cfc:	8800      	ldrh	r0, [r0, #0]
 8017cfe:	460d      	mov	r5, r1
 8017d00:	f000 fd16 	bl	8018730 <uxr_seq_num_cmp>
 8017d04:	4603      	mov	r3, r0
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8017d0c:	bfb8      	it	lt
 8017d0e:	8025      	strhlt	r5, [r4, #0]
 8017d10:	bd38      	pop	{r3, r4, r5, pc}
 8017d12:	bf00      	nop

08017d14 <on_full_input_buffer>:
 8017d14:	b570      	push	{r4, r5, r6, lr}
 8017d16:	6802      	ldr	r2, [r0, #0]
 8017d18:	460d      	mov	r5, r1
 8017d1a:	6809      	ldr	r1, [r1, #0]
 8017d1c:	686c      	ldr	r4, [r5, #4]
 8017d1e:	1a53      	subs	r3, r2, r1
 8017d20:	4606      	mov	r6, r0
 8017d22:	8928      	ldrh	r0, [r5, #8]
 8017d24:	fbb4 f4f0 	udiv	r4, r4, r0
 8017d28:	fbb3 f3f4 	udiv	r3, r3, r4
 8017d2c:	3301      	adds	r3, #1
 8017d2e:	b29b      	uxth	r3, r3
 8017d30:	fbb3 f2f0 	udiv	r2, r3, r0
 8017d34:	fb00 3312 	mls	r3, r0, r2, r3
 8017d38:	b29b      	uxth	r3, r3
 8017d3a:	fb04 f403 	mul.w	r4, r4, r3
 8017d3e:	1d23      	adds	r3, r4, #4
 8017d40:	440b      	add	r3, r1
 8017d42:	7d28      	ldrb	r0, [r5, #20]
 8017d44:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8017d48:	b110      	cbz	r0, 8017d50 <on_full_input_buffer+0x3c>
 8017d4a:	2000      	movs	r0, #0
 8017d4c:	f843 0c04 	str.w	r0, [r3, #-4]
 8017d50:	2a03      	cmp	r2, #3
 8017d52:	d801      	bhi.n	8017d58 <on_full_input_buffer+0x44>
 8017d54:	2001      	movs	r0, #1
 8017d56:	bd70      	pop	{r4, r5, r6, pc}
 8017d58:	3408      	adds	r4, #8
 8017d5a:	6933      	ldr	r3, [r6, #16]
 8017d5c:	4421      	add	r1, r4
 8017d5e:	4630      	mov	r0, r6
 8017d60:	3a04      	subs	r2, #4
 8017d62:	f7f9 fce1 	bl	8011728 <ucdr_init_buffer_origin>
 8017d66:	4630      	mov	r0, r6
 8017d68:	4902      	ldr	r1, [pc, #8]	; (8017d74 <on_full_input_buffer+0x60>)
 8017d6a:	462a      	mov	r2, r5
 8017d6c:	f7f9 fcba 	bl	80116e4 <ucdr_set_on_full_buffer_callback>
 8017d70:	2000      	movs	r0, #0
 8017d72:	bd70      	pop	{r4, r5, r6, pc}
 8017d74:	08017d15 	.word	0x08017d15

08017d78 <uxr_init_input_reliable_stream>:
 8017d78:	b470      	push	{r4, r5, r6}
 8017d7a:	9c03      	ldr	r4, [sp, #12]
 8017d7c:	6001      	str	r1, [r0, #0]
 8017d7e:	2600      	movs	r6, #0
 8017d80:	8103      	strh	r3, [r0, #8]
 8017d82:	6042      	str	r2, [r0, #4]
 8017d84:	6104      	str	r4, [r0, #16]
 8017d86:	7506      	strb	r6, [r0, #20]
 8017d88:	b1ab      	cbz	r3, 8017db6 <uxr_init_input_reliable_stream+0x3e>
 8017d8a:	600e      	str	r6, [r1, #0]
 8017d8c:	8901      	ldrh	r1, [r0, #8]
 8017d8e:	2901      	cmp	r1, #1
 8017d90:	d911      	bls.n	8017db6 <uxr_init_input_reliable_stream+0x3e>
 8017d92:	2201      	movs	r2, #1
 8017d94:	e9d0 5400 	ldrd	r5, r4, [r0]
 8017d98:	fbb2 f3f1 	udiv	r3, r2, r1
 8017d9c:	fb01 2313 	mls	r3, r1, r3, r2
 8017da0:	b29b      	uxth	r3, r3
 8017da2:	fbb4 f1f1 	udiv	r1, r4, r1
 8017da6:	fb03 f301 	mul.w	r3, r3, r1
 8017daa:	3201      	adds	r2, #1
 8017dac:	50ee      	str	r6, [r5, r3]
 8017dae:	8901      	ldrh	r1, [r0, #8]
 8017db0:	b292      	uxth	r2, r2
 8017db2:	4291      	cmp	r1, r2
 8017db4:	d8ee      	bhi.n	8017d94 <uxr_init_input_reliable_stream+0x1c>
 8017db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017dba:	bc70      	pop	{r4, r5, r6}
 8017dbc:	60c3      	str	r3, [r0, #12]
 8017dbe:	4770      	bx	lr

08017dc0 <uxr_reset_input_reliable_stream>:
 8017dc0:	8902      	ldrh	r2, [r0, #8]
 8017dc2:	b1ca      	cbz	r2, 8017df8 <uxr_reset_input_reliable_stream+0x38>
 8017dc4:	b470      	push	{r4, r5, r6}
 8017dc6:	2400      	movs	r4, #0
 8017dc8:	4621      	mov	r1, r4
 8017dca:	4626      	mov	r6, r4
 8017dcc:	fbb1 f3f2 	udiv	r3, r1, r2
 8017dd0:	fb02 1313 	mls	r3, r2, r3, r1
 8017dd4:	e9d0 5100 	ldrd	r5, r1, [r0]
 8017dd8:	b29b      	uxth	r3, r3
 8017dda:	fbb1 f2f2 	udiv	r2, r1, r2
 8017dde:	fb03 f302 	mul.w	r3, r3, r2
 8017de2:	3401      	adds	r4, #1
 8017de4:	50ee      	str	r6, [r5, r3]
 8017de6:	8902      	ldrh	r2, [r0, #8]
 8017de8:	b2a1      	uxth	r1, r4
 8017dea:	428a      	cmp	r2, r1
 8017dec:	d8ee      	bhi.n	8017dcc <uxr_reset_input_reliable_stream+0xc>
 8017dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017df2:	bc70      	pop	{r4, r5, r6}
 8017df4:	60c3      	str	r3, [r0, #12]
 8017df6:	4770      	bx	lr
 8017df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017dfc:	60c3      	str	r3, [r0, #12]
 8017dfe:	4770      	bx	lr

08017e00 <uxr_receive_reliable_message>:
 8017e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e04:	4604      	mov	r4, r0
 8017e06:	460d      	mov	r5, r1
 8017e08:	8901      	ldrh	r1, [r0, #8]
 8017e0a:	8980      	ldrh	r0, [r0, #12]
 8017e0c:	4690      	mov	r8, r2
 8017e0e:	461f      	mov	r7, r3
 8017e10:	f000 fc86 	bl	8018720 <uxr_seq_num_add>
 8017e14:	4629      	mov	r1, r5
 8017e16:	4606      	mov	r6, r0
 8017e18:	89a0      	ldrh	r0, [r4, #12]
 8017e1a:	f000 fc89 	bl	8018730 <uxr_seq_num_cmp>
 8017e1e:	2800      	cmp	r0, #0
 8017e20:	db0a      	blt.n	8017e38 <uxr_receive_reliable_message+0x38>
 8017e22:	2600      	movs	r6, #0
 8017e24:	89e0      	ldrh	r0, [r4, #14]
 8017e26:	4629      	mov	r1, r5
 8017e28:	f000 fc82 	bl	8018730 <uxr_seq_num_cmp>
 8017e2c:	2800      	cmp	r0, #0
 8017e2e:	bfb8      	it	lt
 8017e30:	81e5      	strhlt	r5, [r4, #14]
 8017e32:	4630      	mov	r0, r6
 8017e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e38:	4630      	mov	r0, r6
 8017e3a:	4629      	mov	r1, r5
 8017e3c:	f000 fc78 	bl	8018730 <uxr_seq_num_cmp>
 8017e40:	2800      	cmp	r0, #0
 8017e42:	dbee      	blt.n	8017e22 <uxr_receive_reliable_message+0x22>
 8017e44:	6923      	ldr	r3, [r4, #16]
 8017e46:	4640      	mov	r0, r8
 8017e48:	4798      	blx	r3
 8017e4a:	2101      	movs	r1, #1
 8017e4c:	4681      	mov	r9, r0
 8017e4e:	89a0      	ldrh	r0, [r4, #12]
 8017e50:	f000 fc66 	bl	8018720 <uxr_seq_num_add>
 8017e54:	f1b9 0f00 	cmp.w	r9, #0
 8017e58:	d101      	bne.n	8017e5e <uxr_receive_reliable_message+0x5e>
 8017e5a:	4285      	cmp	r5, r0
 8017e5c:	d049      	beq.n	8017ef2 <uxr_receive_reliable_message+0xf2>
 8017e5e:	8921      	ldrh	r1, [r4, #8]
 8017e60:	fbb5 f3f1 	udiv	r3, r5, r1
 8017e64:	fb01 5313 	mls	r3, r1, r3, r5
 8017e68:	b29b      	uxth	r3, r3
 8017e6a:	6862      	ldr	r2, [r4, #4]
 8017e6c:	6820      	ldr	r0, [r4, #0]
 8017e6e:	fbb2 f2f1 	udiv	r2, r2, r1
 8017e72:	fb03 f302 	mul.w	r3, r3, r2
 8017e76:	3304      	adds	r3, #4
 8017e78:	4418      	add	r0, r3
 8017e7a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d1cf      	bne.n	8017e22 <uxr_receive_reliable_message+0x22>
 8017e82:	4641      	mov	r1, r8
 8017e84:	463a      	mov	r2, r7
 8017e86:	f000 ffa5 	bl	8018dd4 <memcpy>
 8017e8a:	8921      	ldrh	r1, [r4, #8]
 8017e8c:	fbb5 f3f1 	udiv	r3, r5, r1
 8017e90:	fb01 5313 	mls	r3, r1, r3, r5
 8017e94:	b29b      	uxth	r3, r3
 8017e96:	6862      	ldr	r2, [r4, #4]
 8017e98:	fbb2 f2f1 	udiv	r2, r2, r1
 8017e9c:	6821      	ldr	r1, [r4, #0]
 8017e9e:	fb03 f302 	mul.w	r3, r3, r2
 8017ea2:	2201      	movs	r2, #1
 8017ea4:	50cf      	str	r7, [r1, r3]
 8017ea6:	9b08      	ldr	r3, [sp, #32]
 8017ea8:	701a      	strb	r2, [r3, #0]
 8017eaa:	f1b9 0f00 	cmp.w	r9, #0
 8017eae:	d0b8      	beq.n	8017e22 <uxr_receive_reliable_message+0x22>
 8017eb0:	89a6      	ldrh	r6, [r4, #12]
 8017eb2:	e001      	b.n	8017eb8 <uxr_receive_reliable_message+0xb8>
 8017eb4:	2801      	cmp	r0, #1
 8017eb6:	d1b4      	bne.n	8017e22 <uxr_receive_reliable_message+0x22>
 8017eb8:	4630      	mov	r0, r6
 8017eba:	2101      	movs	r1, #1
 8017ebc:	f000 fc30 	bl	8018720 <uxr_seq_num_add>
 8017ec0:	8921      	ldrh	r1, [r4, #8]
 8017ec2:	fbb0 f3f1 	udiv	r3, r0, r1
 8017ec6:	fb01 0313 	mls	r3, r1, r3, r0
 8017eca:	b29b      	uxth	r3, r3
 8017ecc:	6862      	ldr	r2, [r4, #4]
 8017ece:	fbb2 f2f1 	udiv	r2, r2, r1
 8017ed2:	4606      	mov	r6, r0
 8017ed4:	fb03 f302 	mul.w	r3, r3, r2
 8017ed8:	6820      	ldr	r0, [r4, #0]
 8017eda:	3304      	adds	r3, #4
 8017edc:	4418      	add	r0, r3
 8017ede:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d09d      	beq.n	8017e22 <uxr_receive_reliable_message+0x22>
 8017ee6:	6923      	ldr	r3, [r4, #16]
 8017ee8:	4798      	blx	r3
 8017eea:	2802      	cmp	r0, #2
 8017eec:	d1e2      	bne.n	8017eb4 <uxr_receive_reliable_message+0xb4>
 8017eee:	2601      	movs	r6, #1
 8017ef0:	e798      	b.n	8017e24 <uxr_receive_reliable_message+0x24>
 8017ef2:	9b08      	ldr	r3, [sp, #32]
 8017ef4:	81a5      	strh	r5, [r4, #12]
 8017ef6:	2601      	movs	r6, #1
 8017ef8:	f883 9000 	strb.w	r9, [r3]
 8017efc:	e792      	b.n	8017e24 <uxr_receive_reliable_message+0x24>
 8017efe:	bf00      	nop

08017f00 <uxr_next_input_reliable_buffer_available>:
 8017f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f04:	4604      	mov	r4, r0
 8017f06:	460e      	mov	r6, r1
 8017f08:	8980      	ldrh	r0, [r0, #12]
 8017f0a:	2101      	movs	r1, #1
 8017f0c:	4617      	mov	r7, r2
 8017f0e:	f000 fc07 	bl	8018720 <uxr_seq_num_add>
 8017f12:	8921      	ldrh	r1, [r4, #8]
 8017f14:	fbb0 f3f1 	udiv	r3, r0, r1
 8017f18:	fb01 0313 	mls	r3, r1, r3, r0
 8017f1c:	b29b      	uxth	r3, r3
 8017f1e:	6862      	ldr	r2, [r4, #4]
 8017f20:	fbb2 f2f1 	udiv	r2, r2, r1
 8017f24:	fb03 f302 	mul.w	r3, r3, r2
 8017f28:	6822      	ldr	r2, [r4, #0]
 8017f2a:	3304      	adds	r3, #4
 8017f2c:	eb02 0803 	add.w	r8, r2, r3
 8017f30:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8017f34:	f1b9 0f00 	cmp.w	r9, #0
 8017f38:	d025      	beq.n	8017f86 <uxr_next_input_reliable_buffer_available+0x86>
 8017f3a:	6923      	ldr	r3, [r4, #16]
 8017f3c:	4605      	mov	r5, r0
 8017f3e:	4640      	mov	r0, r8
 8017f40:	4798      	blx	r3
 8017f42:	4682      	mov	sl, r0
 8017f44:	b310      	cbz	r0, 8017f8c <uxr_next_input_reliable_buffer_available+0x8c>
 8017f46:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8017f4a:	e005      	b.n	8017f58 <uxr_next_input_reliable_buffer_available+0x58>
 8017f4c:	6923      	ldr	r3, [r4, #16]
 8017f4e:	4798      	blx	r3
 8017f50:	2802      	cmp	r0, #2
 8017f52:	d032      	beq.n	8017fba <uxr_next_input_reliable_buffer_available+0xba>
 8017f54:	2801      	cmp	r0, #1
 8017f56:	d116      	bne.n	8017f86 <uxr_next_input_reliable_buffer_available+0x86>
 8017f58:	4650      	mov	r0, sl
 8017f5a:	2101      	movs	r1, #1
 8017f5c:	f000 fbe0 	bl	8018720 <uxr_seq_num_add>
 8017f60:	8921      	ldrh	r1, [r4, #8]
 8017f62:	fbb0 f3f1 	udiv	r3, r0, r1
 8017f66:	fb01 0313 	mls	r3, r1, r3, r0
 8017f6a:	b29b      	uxth	r3, r3
 8017f6c:	6862      	ldr	r2, [r4, #4]
 8017f6e:	fbb2 f2f1 	udiv	r2, r2, r1
 8017f72:	4682      	mov	sl, r0
 8017f74:	fb03 f302 	mul.w	r3, r3, r2
 8017f78:	6820      	ldr	r0, [r4, #0]
 8017f7a:	3304      	adds	r3, #4
 8017f7c:	4418      	add	r0, r3
 8017f7e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d1e2      	bne.n	8017f4c <uxr_next_input_reliable_buffer_available+0x4c>
 8017f86:	2000      	movs	r0, #0
 8017f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f8c:	464a      	mov	r2, r9
 8017f8e:	4641      	mov	r1, r8
 8017f90:	4630      	mov	r0, r6
 8017f92:	f7f9 fbd1 	bl	8011738 <ucdr_init_buffer>
 8017f96:	8921      	ldrh	r1, [r4, #8]
 8017f98:	fbb5 f3f1 	udiv	r3, r5, r1
 8017f9c:	fb01 5313 	mls	r3, r1, r3, r5
 8017fa0:	b29b      	uxth	r3, r3
 8017fa2:	6862      	ldr	r2, [r4, #4]
 8017fa4:	fbb2 f2f1 	udiv	r2, r2, r1
 8017fa8:	6821      	ldr	r1, [r4, #0]
 8017faa:	fb03 f302 	mul.w	r3, r3, r2
 8017fae:	2001      	movs	r0, #1
 8017fb0:	f841 a003 	str.w	sl, [r1, r3]
 8017fb4:	81a5      	strh	r5, [r4, #12]
 8017fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fba:	8922      	ldrh	r2, [r4, #8]
 8017fbc:	fbb5 f0f2 	udiv	r0, r5, r2
 8017fc0:	fb02 5510 	mls	r5, r2, r0, r5
 8017fc4:	b2ad      	uxth	r5, r5
 8017fc6:	6863      	ldr	r3, [r4, #4]
 8017fc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8017fcc:	fb05 f503 	mul.w	r5, r5, r3
 8017fd0:	6823      	ldr	r3, [r4, #0]
 8017fd2:	2000      	movs	r0, #0
 8017fd4:	5158      	str	r0, [r3, r5]
 8017fd6:	eba9 0207 	sub.w	r2, r9, r7
 8017fda:	eb08 0107 	add.w	r1, r8, r7
 8017fde:	4630      	mov	r0, r6
 8017fe0:	f7f9 fbaa 	bl	8011738 <ucdr_init_buffer>
 8017fe4:	4630      	mov	r0, r6
 8017fe6:	4904      	ldr	r1, [pc, #16]	; (8017ff8 <uxr_next_input_reliable_buffer_available+0xf8>)
 8017fe8:	4622      	mov	r2, r4
 8017fea:	f7f9 fb7b 	bl	80116e4 <ucdr_set_on_full_buffer_callback>
 8017fee:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8017ff2:	2001      	movs	r0, #1
 8017ff4:	e7c8      	b.n	8017f88 <uxr_next_input_reliable_buffer_available+0x88>
 8017ff6:	bf00      	nop
 8017ff8:	08017d15 	.word	0x08017d15

08017ffc <uxr_process_heartbeat>:
 8017ffc:	b538      	push	{r3, r4, r5, lr}
 8017ffe:	4611      	mov	r1, r2
 8018000:	4604      	mov	r4, r0
 8018002:	89c0      	ldrh	r0, [r0, #14]
 8018004:	4615      	mov	r5, r2
 8018006:	f000 fb93 	bl	8018730 <uxr_seq_num_cmp>
 801800a:	2800      	cmp	r0, #0
 801800c:	bfb8      	it	lt
 801800e:	81e5      	strhlt	r5, [r4, #14]
 8018010:	bd38      	pop	{r3, r4, r5, pc}
 8018012:	bf00      	nop

08018014 <uxr_compute_acknack>:
 8018014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018018:	8903      	ldrh	r3, [r0, #8]
 801801a:	8986      	ldrh	r6, [r0, #12]
 801801c:	4604      	mov	r4, r0
 801801e:	460d      	mov	r5, r1
 8018020:	b1d3      	cbz	r3, 8018058 <uxr_compute_acknack+0x44>
 8018022:	4630      	mov	r0, r6
 8018024:	2701      	movs	r7, #1
 8018026:	e003      	b.n	8018030 <uxr_compute_acknack+0x1c>
 8018028:	4567      	cmp	r7, ip
 801802a:	d215      	bcs.n	8018058 <uxr_compute_acknack+0x44>
 801802c:	89a0      	ldrh	r0, [r4, #12]
 801802e:	3701      	adds	r7, #1
 8018030:	b2b9      	uxth	r1, r7
 8018032:	f000 fb75 	bl	8018720 <uxr_seq_num_add>
 8018036:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801803a:	fbb0 f2fc 	udiv	r2, r0, ip
 801803e:	e9d4 1300 	ldrd	r1, r3, [r4]
 8018042:	fb0c 0212 	mls	r2, ip, r2, r0
 8018046:	b292      	uxth	r2, r2
 8018048:	fbb3 f3fc 	udiv	r3, r3, ip
 801804c:	fb02 1303 	mla	r3, r2, r3, r1
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	2b00      	cmp	r3, #0
 8018054:	d1e8      	bne.n	8018028 <uxr_compute_acknack+0x14>
 8018056:	4606      	mov	r6, r0
 8018058:	802e      	strh	r6, [r5, #0]
 801805a:	4630      	mov	r0, r6
 801805c:	2101      	movs	r1, #1
 801805e:	89e6      	ldrh	r6, [r4, #14]
 8018060:	f000 fb62 	bl	8018728 <uxr_seq_num_sub>
 8018064:	4601      	mov	r1, r0
 8018066:	4630      	mov	r0, r6
 8018068:	f000 fb5e 	bl	8018728 <uxr_seq_num_sub>
 801806c:	4606      	mov	r6, r0
 801806e:	b318      	cbz	r0, 80180b8 <uxr_compute_acknack+0xa4>
 8018070:	f04f 0900 	mov.w	r9, #0
 8018074:	464f      	mov	r7, r9
 8018076:	f04f 0801 	mov.w	r8, #1
 801807a:	fa1f f189 	uxth.w	r1, r9
 801807e:	8828      	ldrh	r0, [r5, #0]
 8018080:	f000 fb4e 	bl	8018720 <uxr_seq_num_add>
 8018084:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018088:	6822      	ldr	r2, [r4, #0]
 801808a:	fbb0 f1fc 	udiv	r1, r0, ip
 801808e:	fb01 011c 	mls	r1, r1, ip, r0
 8018092:	b289      	uxth	r1, r1
 8018094:	6863      	ldr	r3, [r4, #4]
 8018096:	fbb3 f3fc 	udiv	r3, r3, ip
 801809a:	fb01 2303 	mla	r3, r1, r3, r2
 801809e:	fa08 f209 	lsl.w	r2, r8, r9
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	f109 0901 	add.w	r9, r9, #1
 80180a8:	b90b      	cbnz	r3, 80180ae <uxr_compute_acknack+0x9a>
 80180aa:	4317      	orrs	r7, r2
 80180ac:	b2bf      	uxth	r7, r7
 80180ae:	454e      	cmp	r6, r9
 80180b0:	d1e3      	bne.n	801807a <uxr_compute_acknack+0x66>
 80180b2:	4638      	mov	r0, r7
 80180b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180b8:	4607      	mov	r7, r0
 80180ba:	4638      	mov	r0, r7
 80180bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080180c0 <uxr_init_output_best_effort_stream>:
 80180c0:	b410      	push	{r4}
 80180c2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80180c6:	81c4      	strh	r4, [r0, #14]
 80180c8:	e9c0 1300 	strd	r1, r3, [r0]
 80180cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180d0:	7303      	strb	r3, [r0, #12]
 80180d2:	6082      	str	r2, [r0, #8]
 80180d4:	4770      	bx	lr
 80180d6:	bf00      	nop

080180d8 <uxr_reset_output_best_effort_stream>:
 80180d8:	7b02      	ldrb	r2, [r0, #12]
 80180da:	6042      	str	r2, [r0, #4]
 80180dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80180e0:	81c3      	strh	r3, [r0, #14]
 80180e2:	4770      	bx	lr

080180e4 <uxr_prepare_best_effort_buffer_to_write>:
 80180e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180e6:	4604      	mov	r4, r0
 80180e8:	b083      	sub	sp, #12
 80180ea:	6840      	ldr	r0, [r0, #4]
 80180ec:	460d      	mov	r5, r1
 80180ee:	4616      	mov	r6, r2
 80180f0:	f7fb fcca 	bl	8013a88 <uxr_submessage_padding>
 80180f4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80180f8:	4410      	add	r0, r2
 80180fa:	1942      	adds	r2, r0, r5
 80180fc:	4293      	cmp	r3, r2
 80180fe:	bf2c      	ite	cs
 8018100:	2701      	movcs	r7, #1
 8018102:	2700      	movcc	r7, #0
 8018104:	d202      	bcs.n	801810c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8018106:	4638      	mov	r0, r7
 8018108:	b003      	add	sp, #12
 801810a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801810c:	9000      	str	r0, [sp, #0]
 801810e:	6821      	ldr	r1, [r4, #0]
 8018110:	4630      	mov	r0, r6
 8018112:	2300      	movs	r3, #0
 8018114:	f7f9 fafe 	bl	8011714 <ucdr_init_buffer_origin_offset>
 8018118:	6861      	ldr	r1, [r4, #4]
 801811a:	4638      	mov	r0, r7
 801811c:	4429      	add	r1, r5
 801811e:	6061      	str	r1, [r4, #4]
 8018120:	b003      	add	sp, #12
 8018122:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018124 <uxr_prepare_best_effort_buffer_to_send>:
 8018124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018128:	6845      	ldr	r5, [r0, #4]
 801812a:	4604      	mov	r4, r0
 801812c:	7b00      	ldrb	r0, [r0, #12]
 801812e:	4285      	cmp	r5, r0
 8018130:	bf8c      	ite	hi
 8018132:	2701      	movhi	r7, #1
 8018134:	2700      	movls	r7, #0
 8018136:	d802      	bhi.n	801813e <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8018138:	4638      	mov	r0, r7
 801813a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801813e:	4688      	mov	r8, r1
 8018140:	89e0      	ldrh	r0, [r4, #14]
 8018142:	2101      	movs	r1, #1
 8018144:	4615      	mov	r5, r2
 8018146:	461e      	mov	r6, r3
 8018148:	f000 faea 	bl	8018720 <uxr_seq_num_add>
 801814c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018150:	81e0      	strh	r0, [r4, #14]
 8018152:	8030      	strh	r0, [r6, #0]
 8018154:	f8c8 2000 	str.w	r2, [r8]
 8018158:	602b      	str	r3, [r5, #0]
 801815a:	7b23      	ldrb	r3, [r4, #12]
 801815c:	6063      	str	r3, [r4, #4]
 801815e:	4638      	mov	r0, r7
 8018160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018164 <on_full_output_buffer>:
 8018164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018166:	6802      	ldr	r2, [r0, #0]
 8018168:	460d      	mov	r5, r1
 801816a:	6809      	ldr	r1, [r1, #0]
 801816c:	892f      	ldrh	r7, [r5, #8]
 801816e:	686c      	ldr	r4, [r5, #4]
 8018170:	fbb4 f4f7 	udiv	r4, r4, r7
 8018174:	1a53      	subs	r3, r2, r1
 8018176:	fbb3 f3f4 	udiv	r3, r3, r4
 801817a:	3301      	adds	r3, #1
 801817c:	b29b      	uxth	r3, r3
 801817e:	fbb3 f2f7 	udiv	r2, r3, r7
 8018182:	fb07 3312 	mls	r3, r7, r2, r3
 8018186:	b29b      	uxth	r3, r3
 8018188:	fb04 f403 	mul.w	r4, r4, r3
 801818c:	7b2f      	ldrb	r7, [r5, #12]
 801818e:	590a      	ldr	r2, [r1, r4]
 8018190:	6903      	ldr	r3, [r0, #16]
 8018192:	443c      	add	r4, r7
 8018194:	3408      	adds	r4, #8
 8018196:	1bd2      	subs	r2, r2, r7
 8018198:	4606      	mov	r6, r0
 801819a:	4421      	add	r1, r4
 801819c:	3a04      	subs	r2, #4
 801819e:	f7f9 fac3 	bl	8011728 <ucdr_init_buffer_origin>
 80181a2:	4630      	mov	r0, r6
 80181a4:	4902      	ldr	r1, [pc, #8]	; (80181b0 <on_full_output_buffer+0x4c>)
 80181a6:	462a      	mov	r2, r5
 80181a8:	f7f9 fa9c 	bl	80116e4 <ucdr_set_on_full_buffer_callback>
 80181ac:	2000      	movs	r0, #0
 80181ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181b0:	08018165 	.word	0x08018165

080181b4 <uxr_init_output_reliable_stream>:
 80181b4:	b430      	push	{r4, r5}
 80181b6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80181ba:	6001      	str	r1, [r0, #0]
 80181bc:	8103      	strh	r3, [r0, #8]
 80181be:	6042      	str	r2, [r0, #4]
 80181c0:	7304      	strb	r4, [r0, #12]
 80181c2:	b1b3      	cbz	r3, 80181f2 <uxr_init_output_reliable_stream+0x3e>
 80181c4:	600c      	str	r4, [r1, #0]
 80181c6:	8901      	ldrh	r1, [r0, #8]
 80181c8:	2901      	cmp	r1, #1
 80181ca:	d912      	bls.n	80181f2 <uxr_init_output_reliable_stream+0x3e>
 80181cc:	2201      	movs	r2, #1
 80181ce:	e9d0 5400 	ldrd	r5, r4, [r0]
 80181d2:	fbb2 f3f1 	udiv	r3, r2, r1
 80181d6:	fb01 2313 	mls	r3, r1, r3, r2
 80181da:	b29b      	uxth	r3, r3
 80181dc:	fbb4 f1f1 	udiv	r1, r4, r1
 80181e0:	fb03 f301 	mul.w	r3, r3, r1
 80181e4:	7b01      	ldrb	r1, [r0, #12]
 80181e6:	50e9      	str	r1, [r5, r3]
 80181e8:	3201      	adds	r2, #1
 80181ea:	8901      	ldrh	r1, [r0, #8]
 80181ec:	b292      	uxth	r2, r2
 80181ee:	4291      	cmp	r1, r2
 80181f0:	d8ed      	bhi.n	80181ce <uxr_init_output_reliable_stream+0x1a>
 80181f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80181f6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80181fa:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80181fe:	4b05      	ldr	r3, [pc, #20]	; (8018214 <uxr_init_output_reliable_stream+0x60>)
 8018200:	f8c0 300e 	str.w	r3, [r0, #14]
 8018204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018208:	2300      	movs	r3, #0
 801820a:	bc30      	pop	{r4, r5}
 801820c:	8242      	strh	r2, [r0, #18]
 801820e:	8403      	strh	r3, [r0, #32]
 8018210:	4770      	bx	lr
 8018212:	bf00      	nop
 8018214:	ffff0000 	.word	0xffff0000

08018218 <uxr_reset_output_reliable_stream>:
 8018218:	8902      	ldrh	r2, [r0, #8]
 801821a:	b430      	push	{r4, r5}
 801821c:	b19a      	cbz	r2, 8018246 <uxr_reset_output_reliable_stream+0x2e>
 801821e:	2400      	movs	r4, #0
 8018220:	4621      	mov	r1, r4
 8018222:	fbb1 f3f2 	udiv	r3, r1, r2
 8018226:	fb02 1313 	mls	r3, r2, r3, r1
 801822a:	e9d0 5100 	ldrd	r5, r1, [r0]
 801822e:	b29b      	uxth	r3, r3
 8018230:	fbb1 f2f2 	udiv	r2, r1, r2
 8018234:	fb03 f302 	mul.w	r3, r3, r2
 8018238:	7b02      	ldrb	r2, [r0, #12]
 801823a:	50ea      	str	r2, [r5, r3]
 801823c:	3401      	adds	r4, #1
 801823e:	8902      	ldrh	r2, [r0, #8]
 8018240:	b2a1      	uxth	r1, r4
 8018242:	428a      	cmp	r2, r1
 8018244:	d8ed      	bhi.n	8018222 <uxr_reset_output_reliable_stream+0xa>
 8018246:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801824a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801824e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018252:	4b05      	ldr	r3, [pc, #20]	; (8018268 <uxr_reset_output_reliable_stream+0x50>)
 8018254:	f8c0 300e 	str.w	r3, [r0, #14]
 8018258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801825c:	2300      	movs	r3, #0
 801825e:	bc30      	pop	{r4, r5}
 8018260:	8242      	strh	r2, [r0, #18]
 8018262:	8403      	strh	r3, [r0, #32]
 8018264:	4770      	bx	lr
 8018266:	bf00      	nop
 8018268:	ffff0000 	.word	0xffff0000

0801826c <uxr_prepare_reliable_buffer_to_write>:
 801826c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018270:	8903      	ldrh	r3, [r0, #8]
 8018272:	89c5      	ldrh	r5, [r0, #14]
 8018274:	fbb5 fef3 	udiv	lr, r5, r3
 8018278:	4604      	mov	r4, r0
 801827a:	fb03 571e 	mls	r7, r3, lr, r5
 801827e:	6800      	ldr	r0, [r0, #0]
 8018280:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8018284:	fbbc fcf3 	udiv	ip, ip, r3
 8018288:	b2bf      	uxth	r7, r7
 801828a:	fb0c 0707 	mla	r7, ip, r7, r0
 801828e:	4688      	mov	r8, r1
 8018290:	6839      	ldr	r1, [r7, #0]
 8018292:	b091      	sub	sp, #68	; 0x44
 8018294:	eb01 0908 	add.w	r9, r1, r8
 8018298:	f1ac 0604 	sub.w	r6, ip, #4
 801829c:	9204      	str	r2, [sp, #16]
 801829e:	45b1      	cmp	r9, r6
 80182a0:	f107 0204 	add.w	r2, r7, #4
 80182a4:	9102      	str	r1, [sp, #8]
 80182a6:	9203      	str	r2, [sp, #12]
 80182a8:	f8cd c014 	str.w	ip, [sp, #20]
 80182ac:	f240 80d7 	bls.w	801845e <uxr_prepare_reliable_buffer_to_write+0x1f2>
 80182b0:	f894 b00c 	ldrb.w	fp, [r4, #12]
 80182b4:	eb0b 0208 	add.w	r2, fp, r8
 80182b8:	42b2      	cmp	r2, r6
 80182ba:	f240 80bd 	bls.w	8018438 <uxr_prepare_reliable_buffer_to_write+0x1cc>
 80182be:	460a      	mov	r2, r1
 80182c0:	3204      	adds	r2, #4
 80182c2:	42b2      	cmp	r2, r6
 80182c4:	f080 810e 	bcs.w	80184e4 <uxr_prepare_reliable_buffer_to_write+0x278>
 80182c8:	f8cd c01c 	str.w	ip, [sp, #28]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	f000 8123 	beq.w	8018518 <uxr_prepare_reliable_buffer_to_write+0x2ac>
 80182d2:	f04f 0a00 	mov.w	sl, #0
 80182d6:	4652      	mov	r2, sl
 80182d8:	4657      	mov	r7, sl
 80182da:	fbb7 f1f3 	udiv	r1, r7, r3
 80182de:	fb03 7111 	mls	r1, r3, r1, r7
 80182e2:	b289      	uxth	r1, r1
 80182e4:	fb0c 0101 	mla	r1, ip, r1, r0
 80182e8:	f10a 0a01 	add.w	sl, sl, #1
 80182ec:	6809      	ldr	r1, [r1, #0]
 80182ee:	458b      	cmp	fp, r1
 80182f0:	bf08      	it	eq
 80182f2:	3201      	addeq	r2, #1
 80182f4:	fa1f f78a 	uxth.w	r7, sl
 80182f8:	bf08      	it	eq
 80182fa:	b292      	uxtheq	r2, r2
 80182fc:	429f      	cmp	r7, r3
 80182fe:	d3ec      	bcc.n	80182da <uxr_prepare_reliable_buffer_to_write+0x6e>
 8018300:	9902      	ldr	r1, [sp, #8]
 8018302:	1f37      	subs	r7, r6, #4
 8018304:	b2bf      	uxth	r7, r7
 8018306:	eba7 0901 	sub.w	r9, r7, r1
 801830a:	fa1f f989 	uxth.w	r9, r9
 801830e:	eba7 070b 	sub.w	r7, r7, fp
 8018312:	b2bf      	uxth	r7, r7
 8018314:	eba8 0109 	sub.w	r1, r8, r9
 8018318:	fbb1 faf7 	udiv	sl, r1, r7
 801831c:	fb07 111a 	mls	r1, r7, sl, r1
 8018320:	9706      	str	r7, [sp, #24]
 8018322:	2900      	cmp	r1, #0
 8018324:	f040 80bd 	bne.w	80184a2 <uxr_prepare_reliable_buffer_to_write+0x236>
 8018328:	fa1f fa8a 	uxth.w	sl, sl
 801832c:	4592      	cmp	sl, r2
 801832e:	f200 8092 	bhi.w	8018456 <uxr_prepare_reliable_buffer_to_write+0x1ea>
 8018332:	f10d 0b20 	add.w	fp, sp, #32
 8018336:	f1ba 0f00 	cmp.w	sl, #0
 801833a:	d03e      	beq.n	80183ba <uxr_prepare_reliable_buffer_to_write+0x14e>
 801833c:	f04f 0800 	mov.w	r8, #0
 8018340:	f10d 0b20 	add.w	fp, sp, #32
 8018344:	e006      	b.n	8018354 <uxr_prepare_reliable_buffer_to_write+0xe8>
 8018346:	6860      	ldr	r0, [r4, #4]
 8018348:	fbb0 fcf3 	udiv	ip, r0, r3
 801834c:	6820      	ldr	r0, [r4, #0]
 801834e:	fbb5 fef3 	udiv	lr, r5, r3
 8018352:	46b9      	mov	r9, r7
 8018354:	fb03 531e 	mls	r3, r3, lr, r5
 8018358:	b29b      	uxth	r3, r3
 801835a:	fb0c 0003 	mla	r0, ip, r3, r0
 801835e:	1d01      	adds	r1, r0, #4
 8018360:	6803      	ldr	r3, [r0, #0]
 8018362:	9300      	str	r3, [sp, #0]
 8018364:	4632      	mov	r2, r6
 8018366:	2300      	movs	r3, #0
 8018368:	4658      	mov	r0, fp
 801836a:	f7f9 f9d3 	bl	8011714 <ucdr_init_buffer_origin_offset>
 801836e:	464a      	mov	r2, r9
 8018370:	2300      	movs	r3, #0
 8018372:	210d      	movs	r1, #13
 8018374:	4658      	mov	r0, fp
 8018376:	f7fb fb47 	bl	8013a08 <uxr_buffer_submessage_header>
 801837a:	8920      	ldrh	r0, [r4, #8]
 801837c:	fbb5 f3f0 	udiv	r3, r5, r0
 8018380:	e9d4 2100 	ldrd	r2, r1, [r4]
 8018384:	fb00 5313 	mls	r3, r0, r3, r5
 8018388:	b29b      	uxth	r3, r3
 801838a:	fbb1 f1f0 	udiv	r1, r1, r0
 801838e:	fb03 f301 	mul.w	r3, r3, r1
 8018392:	4628      	mov	r0, r5
 8018394:	50d6      	str	r6, [r2, r3]
 8018396:	2101      	movs	r1, #1
 8018398:	f000 f9c2 	bl	8018720 <uxr_seq_num_add>
 801839c:	f108 0801 	add.w	r8, r8, #1
 80183a0:	fa1f f388 	uxth.w	r3, r8
 80183a4:	459a      	cmp	sl, r3
 80183a6:	4605      	mov	r5, r0
 80183a8:	8923      	ldrh	r3, [r4, #8]
 80183aa:	d8cc      	bhi.n	8018346 <uxr_prepare_reliable_buffer_to_write+0xda>
 80183ac:	fbb0 fef3 	udiv	lr, r0, r3
 80183b0:	6820      	ldr	r0, [r4, #0]
 80183b2:	6861      	ldr	r1, [r4, #4]
 80183b4:	fbb1 f2f3 	udiv	r2, r1, r3
 80183b8:	9207      	str	r2, [sp, #28]
 80183ba:	fb03 511e 	mls	r1, r3, lr, r5
 80183be:	9b07      	ldr	r3, [sp, #28]
 80183c0:	b289      	uxth	r1, r1
 80183c2:	fb03 0101 	mla	r1, r3, r1, r0
 80183c6:	4632      	mov	r2, r6
 80183c8:	680b      	ldr	r3, [r1, #0]
 80183ca:	9300      	str	r3, [sp, #0]
 80183cc:	4658      	mov	r0, fp
 80183ce:	3104      	adds	r1, #4
 80183d0:	2300      	movs	r3, #0
 80183d2:	f7f9 f99f 	bl	8011714 <ucdr_init_buffer_origin_offset>
 80183d6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80183da:	4658      	mov	r0, fp
 80183dc:	fa1f f288 	uxth.w	r2, r8
 80183e0:	2302      	movs	r3, #2
 80183e2:	210d      	movs	r1, #13
 80183e4:	f7fb fb10 	bl	8013a08 <uxr_buffer_submessage_header>
 80183e8:	e9d4 0200 	ldrd	r0, r2, [r4]
 80183ec:	8921      	ldrh	r1, [r4, #8]
 80183ee:	9f02      	ldr	r7, [sp, #8]
 80183f0:	9006      	str	r0, [sp, #24]
 80183f2:	9803      	ldr	r0, [sp, #12]
 80183f4:	7b26      	ldrb	r6, [r4, #12]
 80183f6:	fbb5 f3f1 	udiv	r3, r5, r1
 80183fa:	fbb2 f2f1 	udiv	r2, r2, r1
 80183fe:	fb01 5313 	mls	r3, r1, r3, r5
 8018402:	1d39      	adds	r1, r7, #4
 8018404:	4408      	add	r0, r1
 8018406:	b29b      	uxth	r3, r3
 8018408:	fb03 f302 	mul.w	r3, r3, r2
 801840c:	4601      	mov	r1, r0
 801840e:	3604      	adds	r6, #4
 8018410:	9806      	ldr	r0, [sp, #24]
 8018412:	9a05      	ldr	r2, [sp, #20]
 8018414:	4446      	add	r6, r8
 8018416:	50c6      	str	r6, [r0, r3]
 8018418:	9e04      	ldr	r6, [sp, #16]
 801841a:	3a08      	subs	r2, #8
 801841c:	1bd2      	subs	r2, r2, r7
 801841e:	4630      	mov	r0, r6
 8018420:	f7f9 f98a 	bl	8011738 <ucdr_init_buffer>
 8018424:	4630      	mov	r0, r6
 8018426:	493d      	ldr	r1, [pc, #244]	; (801851c <uxr_prepare_reliable_buffer_to_write+0x2b0>)
 8018428:	4622      	mov	r2, r4
 801842a:	f7f9 f95b 	bl	80116e4 <ucdr_set_on_full_buffer_callback>
 801842e:	2001      	movs	r0, #1
 8018430:	81e5      	strh	r5, [r4, #14]
 8018432:	b011      	add	sp, #68	; 0x44
 8018434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018438:	4628      	mov	r0, r5
 801843a:	2101      	movs	r1, #1
 801843c:	f000 f970 	bl	8018720 <uxr_seq_num_add>
 8018440:	8921      	ldrh	r1, [r4, #8]
 8018442:	4605      	mov	r5, r0
 8018444:	8a60      	ldrh	r0, [r4, #18]
 8018446:	f000 f96b 	bl	8018720 <uxr_seq_num_add>
 801844a:	4601      	mov	r1, r0
 801844c:	4628      	mov	r0, r5
 801844e:	f000 f96f 	bl	8018730 <uxr_seq_num_cmp>
 8018452:	2800      	cmp	r0, #0
 8018454:	dd2b      	ble.n	80184ae <uxr_prepare_reliable_buffer_to_write+0x242>
 8018456:	2000      	movs	r0, #0
 8018458:	b011      	add	sp, #68	; 0x44
 801845a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801845e:	4619      	mov	r1, r3
 8018460:	8a60      	ldrh	r0, [r4, #18]
 8018462:	f000 f95d 	bl	8018720 <uxr_seq_num_add>
 8018466:	4601      	mov	r1, r0
 8018468:	4628      	mov	r0, r5
 801846a:	f000 f961 	bl	8018730 <uxr_seq_num_cmp>
 801846e:	2800      	cmp	r0, #0
 8018470:	dcf1      	bgt.n	8018456 <uxr_prepare_reliable_buffer_to_write+0x1ea>
 8018472:	8921      	ldrh	r1, [r4, #8]
 8018474:	fbb5 f3f1 	udiv	r3, r5, r1
 8018478:	e9d4 4200 	ldrd	r4, r2, [r4]
 801847c:	fb01 5313 	mls	r3, r1, r3, r5
 8018480:	b29b      	uxth	r3, r3
 8018482:	fbb2 f2f1 	udiv	r2, r2, r1
 8018486:	fb03 f302 	mul.w	r3, r3, r2
 801848a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801848e:	f844 9003 	str.w	r9, [r4, r3]
 8018492:	9b02      	ldr	r3, [sp, #8]
 8018494:	9300      	str	r3, [sp, #0]
 8018496:	464a      	mov	r2, r9
 8018498:	2300      	movs	r3, #0
 801849a:	f7f9 f93b 	bl	8011714 <ucdr_init_buffer_origin_offset>
 801849e:	2001      	movs	r0, #1
 80184a0:	e7da      	b.n	8018458 <uxr_prepare_reliable_buffer_to_write+0x1ec>
 80184a2:	f10a 0a01 	add.w	sl, sl, #1
 80184a6:	fa1f fa8a 	uxth.w	sl, sl
 80184aa:	9106      	str	r1, [sp, #24]
 80184ac:	e73e      	b.n	801832c <uxr_prepare_reliable_buffer_to_write+0xc0>
 80184ae:	8920      	ldrh	r0, [r4, #8]
 80184b0:	fbb5 f3f0 	udiv	r3, r5, r0
 80184b4:	fb00 5313 	mls	r3, r0, r3, r5
 80184b8:	b29b      	uxth	r3, r3
 80184ba:	6862      	ldr	r2, [r4, #4]
 80184bc:	6821      	ldr	r1, [r4, #0]
 80184be:	fbb2 f0f0 	udiv	r0, r2, r0
 80184c2:	fb03 f300 	mul.w	r3, r3, r0
 80184c6:	7b22      	ldrb	r2, [r4, #12]
 80184c8:	9804      	ldr	r0, [sp, #16]
 80184ca:	3304      	adds	r3, #4
 80184cc:	4419      	add	r1, r3
 80184ce:	4442      	add	r2, r8
 80184d0:	f841 2c04 	str.w	r2, [r1, #-4]
 80184d4:	7b23      	ldrb	r3, [r4, #12]
 80184d6:	9300      	str	r3, [sp, #0]
 80184d8:	2300      	movs	r3, #0
 80184da:	f7f9 f91b 	bl	8011714 <ucdr_init_buffer_origin_offset>
 80184de:	81e5      	strh	r5, [r4, #14]
 80184e0:	2001      	movs	r0, #1
 80184e2:	e7b9      	b.n	8018458 <uxr_prepare_reliable_buffer_to_write+0x1ec>
 80184e4:	4628      	mov	r0, r5
 80184e6:	2101      	movs	r1, #1
 80184e8:	f000 f91a 	bl	8018720 <uxr_seq_num_add>
 80184ec:	8923      	ldrh	r3, [r4, #8]
 80184ee:	f894 b00c 	ldrb.w	fp, [r4, #12]
 80184f2:	4605      	mov	r5, r0
 80184f4:	e9d4 0c00 	ldrd	r0, ip, [r4]
 80184f8:	fbb5 fef3 	udiv	lr, r5, r3
 80184fc:	fb03 521e 	mls	r2, r3, lr, r5
 8018500:	b292      	uxth	r2, r2
 8018502:	fbbc fcf3 	udiv	ip, ip, r3
 8018506:	fb0c 0202 	mla	r2, ip, r2, r0
 801850a:	1d11      	adds	r1, r2, #4
 801850c:	6812      	ldr	r2, [r2, #0]
 801850e:	9103      	str	r1, [sp, #12]
 8018510:	9202      	str	r2, [sp, #8]
 8018512:	f8cd c01c 	str.w	ip, [sp, #28]
 8018516:	e6d9      	b.n	80182cc <uxr_prepare_reliable_buffer_to_write+0x60>
 8018518:	461a      	mov	r2, r3
 801851a:	e6f1      	b.n	8018300 <uxr_prepare_reliable_buffer_to_write+0x94>
 801851c:	08018165 	.word	0x08018165

08018520 <uxr_prepare_next_reliable_buffer_to_send>:
 8018520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018524:	4605      	mov	r5, r0
 8018526:	4688      	mov	r8, r1
 8018528:	8a00      	ldrh	r0, [r0, #16]
 801852a:	2101      	movs	r1, #1
 801852c:	4617      	mov	r7, r2
 801852e:	461e      	mov	r6, r3
 8018530:	f000 f8f6 	bl	8018720 <uxr_seq_num_add>
 8018534:	8030      	strh	r0, [r6, #0]
 8018536:	892a      	ldrh	r2, [r5, #8]
 8018538:	fbb0 f3f2 	udiv	r3, r0, r2
 801853c:	fb02 0413 	mls	r4, r2, r3, r0
 8018540:	b2a4      	uxth	r4, r4
 8018542:	686b      	ldr	r3, [r5, #4]
 8018544:	fbb3 f2f2 	udiv	r2, r3, r2
 8018548:	682b      	ldr	r3, [r5, #0]
 801854a:	89e9      	ldrh	r1, [r5, #14]
 801854c:	fb04 f402 	mul.w	r4, r4, r2
 8018550:	3404      	adds	r4, #4
 8018552:	4423      	add	r3, r4
 8018554:	f8c8 3000 	str.w	r3, [r8]
 8018558:	682b      	ldr	r3, [r5, #0]
 801855a:	441c      	add	r4, r3
 801855c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018560:	603b      	str	r3, [r7, #0]
 8018562:	f000 f8e5 	bl	8018730 <uxr_seq_num_cmp>
 8018566:	2800      	cmp	r0, #0
 8018568:	dd02      	ble.n	8018570 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 801856a:	2000      	movs	r0, #0
 801856c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018570:	683a      	ldr	r2, [r7, #0]
 8018572:	7b2b      	ldrb	r3, [r5, #12]
 8018574:	429a      	cmp	r2, r3
 8018576:	d9f8      	bls.n	801856a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018578:	8a69      	ldrh	r1, [r5, #18]
 801857a:	8a28      	ldrh	r0, [r5, #16]
 801857c:	f000 f8d4 	bl	8018728 <uxr_seq_num_sub>
 8018580:	892b      	ldrh	r3, [r5, #8]
 8018582:	4283      	cmp	r3, r0
 8018584:	d0f1      	beq.n	801856a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018586:	8830      	ldrh	r0, [r6, #0]
 8018588:	89eb      	ldrh	r3, [r5, #14]
 801858a:	8228      	strh	r0, [r5, #16]
 801858c:	4298      	cmp	r0, r3
 801858e:	d002      	beq.n	8018596 <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8018590:	2001      	movs	r0, #1
 8018592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018596:	2101      	movs	r1, #1
 8018598:	f000 f8c2 	bl	8018720 <uxr_seq_num_add>
 801859c:	81e8      	strh	r0, [r5, #14]
 801859e:	2001      	movs	r0, #1
 80185a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080185a4 <uxr_update_output_stream_heartbeat_timestamp>:
 80185a4:	b5d0      	push	{r4, r6, r7, lr}
 80185a6:	8a01      	ldrh	r1, [r0, #16]
 80185a8:	4604      	mov	r4, r0
 80185aa:	8a40      	ldrh	r0, [r0, #18]
 80185ac:	4616      	mov	r6, r2
 80185ae:	461f      	mov	r7, r3
 80185b0:	f000 f8be 	bl	8018730 <uxr_seq_num_cmp>
 80185b4:	2800      	cmp	r0, #0
 80185b6:	db07      	blt.n	80185c8 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80185b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80185bc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80185c0:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80185c4:	2000      	movs	r0, #0
 80185c6:	bdd0      	pop	{r4, r6, r7, pc}
 80185c8:	f894 0020 	ldrb.w	r0, [r4, #32]
 80185cc:	b948      	cbnz	r0, 80185e2 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 80185ce:	2301      	movs	r3, #1
 80185d0:	f884 3020 	strb.w	r3, [r4, #32]
 80185d4:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 80185d8:	f147 0200 	adc.w	r2, r7, #0
 80185dc:	e9c4 3206 	strd	r3, r2, [r4, #24]
 80185e0:	bdd0      	pop	{r4, r6, r7, pc}
 80185e2:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80185e6:	4296      	cmp	r6, r2
 80185e8:	eb77 0303 	sbcs.w	r3, r7, r3
 80185ec:	bfa5      	ittet	ge
 80185ee:	3001      	addge	r0, #1
 80185f0:	f884 0020 	strbge.w	r0, [r4, #32]
 80185f4:	2000      	movlt	r0, #0
 80185f6:	2001      	movge	r0, #1
 80185f8:	e7ec      	b.n	80185d4 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80185fa:	bf00      	nop

080185fc <uxr_begin_output_nack_buffer_it>:
 80185fc:	8a40      	ldrh	r0, [r0, #18]
 80185fe:	4770      	bx	lr

08018600 <uxr_next_reliable_nack_buffer_to_send>:
 8018600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018604:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8018608:	f1b9 0f00 	cmp.w	r9, #0
 801860c:	d011      	beq.n	8018632 <uxr_next_reliable_nack_buffer_to_send+0x32>
 801860e:	4605      	mov	r5, r0
 8018610:	8818      	ldrh	r0, [r3, #0]
 8018612:	460f      	mov	r7, r1
 8018614:	4690      	mov	r8, r2
 8018616:	461e      	mov	r6, r3
 8018618:	2101      	movs	r1, #1
 801861a:	f000 f881 	bl	8018720 <uxr_seq_num_add>
 801861e:	8030      	strh	r0, [r6, #0]
 8018620:	8a29      	ldrh	r1, [r5, #16]
 8018622:	f000 f885 	bl	8018730 <uxr_seq_num_cmp>
 8018626:	2800      	cmp	r0, #0
 8018628:	dd06      	ble.n	8018638 <uxr_next_reliable_nack_buffer_to_send+0x38>
 801862a:	f04f 0900 	mov.w	r9, #0
 801862e:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 8018632:	4648      	mov	r0, r9
 8018634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018638:	892a      	ldrh	r2, [r5, #8]
 801863a:	8830      	ldrh	r0, [r6, #0]
 801863c:	fbb0 f4f2 	udiv	r4, r0, r2
 8018640:	fb02 0414 	mls	r4, r2, r4, r0
 8018644:	b2a4      	uxth	r4, r4
 8018646:	686b      	ldr	r3, [r5, #4]
 8018648:	fbb3 f2f2 	udiv	r2, r3, r2
 801864c:	682b      	ldr	r3, [r5, #0]
 801864e:	fb04 f402 	mul.w	r4, r4, r2
 8018652:	3404      	adds	r4, #4
 8018654:	4423      	add	r3, r4
 8018656:	603b      	str	r3, [r7, #0]
 8018658:	682b      	ldr	r3, [r5, #0]
 801865a:	441c      	add	r4, r3
 801865c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018660:	f8c8 3000 	str.w	r3, [r8]
 8018664:	7b2a      	ldrb	r2, [r5, #12]
 8018666:	429a      	cmp	r2, r3
 8018668:	d0d6      	beq.n	8018618 <uxr_next_reliable_nack_buffer_to_send+0x18>
 801866a:	4648      	mov	r0, r9
 801866c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018670 <uxr_process_acknack>:
 8018670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018672:	4604      	mov	r4, r0
 8018674:	460e      	mov	r6, r1
 8018676:	4610      	mov	r0, r2
 8018678:	2101      	movs	r1, #1
 801867a:	f000 f855 	bl	8018728 <uxr_seq_num_sub>
 801867e:	8a61      	ldrh	r1, [r4, #18]
 8018680:	f000 f852 	bl	8018728 <uxr_seq_num_sub>
 8018684:	b1c0      	cbz	r0, 80186b8 <uxr_process_acknack+0x48>
 8018686:	4605      	mov	r5, r0
 8018688:	2700      	movs	r7, #0
 801868a:	2101      	movs	r1, #1
 801868c:	8a60      	ldrh	r0, [r4, #18]
 801868e:	f000 f847 	bl	8018720 <uxr_seq_num_add>
 8018692:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018696:	fbb0 f3fc 	udiv	r3, r0, ip
 801869a:	e9d4 2100 	ldrd	r2, r1, [r4]
 801869e:	fb0c 0313 	mls	r3, ip, r3, r0
 80186a2:	b29b      	uxth	r3, r3
 80186a4:	fbb1 f1fc 	udiv	r1, r1, ip
 80186a8:	3701      	adds	r7, #1
 80186aa:	fb03 f301 	mul.w	r3, r3, r1
 80186ae:	42bd      	cmp	r5, r7
 80186b0:	7b21      	ldrb	r1, [r4, #12]
 80186b2:	8260      	strh	r0, [r4, #18]
 80186b4:	50d1      	str	r1, [r2, r3]
 80186b6:	d1e8      	bne.n	801868a <uxr_process_acknack+0x1a>
 80186b8:	3e00      	subs	r6, #0
 80186ba:	f04f 0300 	mov.w	r3, #0
 80186be:	bf18      	it	ne
 80186c0:	2601      	movne	r6, #1
 80186c2:	f884 3020 	strb.w	r3, [r4, #32]
 80186c6:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 80186ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080186cc <uxr_is_output_up_to_date>:
 80186cc:	8a01      	ldrh	r1, [r0, #16]
 80186ce:	8a40      	ldrh	r0, [r0, #18]
 80186d0:	b508      	push	{r3, lr}
 80186d2:	f000 f82d 	bl	8018730 <uxr_seq_num_cmp>
 80186d6:	fab0 f080 	clz	r0, r0
 80186da:	0940      	lsrs	r0, r0, #5
 80186dc:	bd08      	pop	{r3, pc}
 80186de:	bf00      	nop

080186e0 <get_available_free_slots>:
 80186e0:	8901      	ldrh	r1, [r0, #8]
 80186e2:	b1d9      	cbz	r1, 801871c <get_available_free_slots+0x3c>
 80186e4:	b4f0      	push	{r4, r5, r6, r7}
 80186e6:	2400      	movs	r4, #0
 80186e8:	6845      	ldr	r5, [r0, #4]
 80186ea:	6807      	ldr	r7, [r0, #0]
 80186ec:	7b06      	ldrb	r6, [r0, #12]
 80186ee:	fbb5 f5f1 	udiv	r5, r5, r1
 80186f2:	4620      	mov	r0, r4
 80186f4:	4622      	mov	r2, r4
 80186f6:	fbb2 f3f1 	udiv	r3, r2, r1
 80186fa:	fb01 2313 	mls	r3, r1, r3, r2
 80186fe:	b29b      	uxth	r3, r3
 8018700:	fb05 7303 	mla	r3, r5, r3, r7
 8018704:	3401      	adds	r4, #1
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	429e      	cmp	r6, r3
 801870a:	bf08      	it	eq
 801870c:	3001      	addeq	r0, #1
 801870e:	b2a2      	uxth	r2, r4
 8018710:	bf08      	it	eq
 8018712:	b280      	uxtheq	r0, r0
 8018714:	428a      	cmp	r2, r1
 8018716:	d3ee      	bcc.n	80186f6 <get_available_free_slots+0x16>
 8018718:	bcf0      	pop	{r4, r5, r6, r7}
 801871a:	4770      	bx	lr
 801871c:	4608      	mov	r0, r1
 801871e:	4770      	bx	lr

08018720 <uxr_seq_num_add>:
 8018720:	4408      	add	r0, r1
 8018722:	b280      	uxth	r0, r0
 8018724:	4770      	bx	lr
 8018726:	bf00      	nop

08018728 <uxr_seq_num_sub>:
 8018728:	1a40      	subs	r0, r0, r1
 801872a:	b280      	uxth	r0, r0
 801872c:	4770      	bx	lr
 801872e:	bf00      	nop

08018730 <uxr_seq_num_cmp>:
 8018730:	4288      	cmp	r0, r1
 8018732:	d011      	beq.n	8018758 <uxr_seq_num_cmp+0x28>
 8018734:	d309      	bcc.n	801874a <uxr_seq_num_cmp+0x1a>
 8018736:	4288      	cmp	r0, r1
 8018738:	d910      	bls.n	801875c <uxr_seq_num_cmp+0x2c>
 801873a:	1a40      	subs	r0, r0, r1
 801873c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8018740:	bfd4      	ite	le
 8018742:	2001      	movle	r0, #1
 8018744:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8018748:	4770      	bx	lr
 801874a:	1a0b      	subs	r3, r1, r0
 801874c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018750:	daf1      	bge.n	8018736 <uxr_seq_num_cmp+0x6>
 8018752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018756:	4770      	bx	lr
 8018758:	2000      	movs	r0, #0
 801875a:	4770      	bx	lr
 801875c:	2001      	movs	r0, #1
 801875e:	4770      	bx	lr

08018760 <rcl_get_default_domain_id>:
 8018760:	b530      	push	{r4, r5, lr}
 8018762:	b083      	sub	sp, #12
 8018764:	2300      	movs	r3, #0
 8018766:	9300      	str	r3, [sp, #0]
 8018768:	b1d0      	cbz	r0, 80187a0 <rcl_get_default_domain_id+0x40>
 801876a:	4604      	mov	r4, r0
 801876c:	4669      	mov	r1, sp
 801876e:	4815      	ldr	r0, [pc, #84]	; (80187c4 <rcl_get_default_domain_id+0x64>)
 8018770:	f7fe fb9c 	bl	8016eac <rcutils_get_env>
 8018774:	4602      	mov	r2, r0
 8018776:	b110      	cbz	r0, 801877e <rcl_get_default_domain_id+0x1e>
 8018778:	2001      	movs	r0, #1
 801877a:	b003      	add	sp, #12
 801877c:	bd30      	pop	{r4, r5, pc}
 801877e:	9b00      	ldr	r3, [sp, #0]
 8018780:	b18b      	cbz	r3, 80187a6 <rcl_get_default_domain_id+0x46>
 8018782:	7818      	ldrb	r0, [r3, #0]
 8018784:	2800      	cmp	r0, #0
 8018786:	d0f8      	beq.n	801877a <rcl_get_default_domain_id+0x1a>
 8018788:	4618      	mov	r0, r3
 801878a:	a901      	add	r1, sp, #4
 801878c:	9201      	str	r2, [sp, #4]
 801878e:	f001 feff 	bl	801a590 <strtoul>
 8018792:	4605      	mov	r5, r0
 8018794:	b150      	cbz	r0, 80187ac <rcl_get_default_domain_id+0x4c>
 8018796:	1c43      	adds	r3, r0, #1
 8018798:	d00d      	beq.n	80187b6 <rcl_get_default_domain_id+0x56>
 801879a:	6025      	str	r5, [r4, #0]
 801879c:	2000      	movs	r0, #0
 801879e:	e7ec      	b.n	801877a <rcl_get_default_domain_id+0x1a>
 80187a0:	200b      	movs	r0, #11
 80187a2:	b003      	add	sp, #12
 80187a4:	bd30      	pop	{r4, r5, pc}
 80187a6:	4618      	mov	r0, r3
 80187a8:	b003      	add	sp, #12
 80187aa:	bd30      	pop	{r4, r5, pc}
 80187ac:	9b01      	ldr	r3, [sp, #4]
 80187ae:	781b      	ldrb	r3, [r3, #0]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d0f2      	beq.n	801879a <rcl_get_default_domain_id+0x3a>
 80187b4:	e7e0      	b.n	8018778 <rcl_get_default_domain_id+0x18>
 80187b6:	f000 fa1b 	bl	8018bf0 <__errno>
 80187ba:	6803      	ldr	r3, [r0, #0]
 80187bc:	2b22      	cmp	r3, #34	; 0x22
 80187be:	d1ec      	bne.n	801879a <rcl_get_default_domain_id+0x3a>
 80187c0:	e7da      	b.n	8018778 <rcl_get_default_domain_id+0x18>
 80187c2:	bf00      	nop
 80187c4:	0801ea5c 	.word	0x0801ea5c

080187c8 <rcl_get_zero_initialized_guard_condition>:
 80187c8:	4a03      	ldr	r2, [pc, #12]	; (80187d8 <rcl_get_zero_initialized_guard_condition+0x10>)
 80187ca:	4603      	mov	r3, r0
 80187cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80187d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80187d4:	4618      	mov	r0, r3
 80187d6:	4770      	bx	lr
 80187d8:	0801ea6c 	.word	0x0801ea6c

080187dc <rcl_guard_condition_init>:
 80187dc:	b082      	sub	sp, #8
 80187de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187e0:	b087      	sub	sp, #28
 80187e2:	ac0c      	add	r4, sp, #48	; 0x30
 80187e4:	e884 000c 	stmia.w	r4, {r2, r3}
 80187e8:	4625      	mov	r5, r4
 80187ea:	4607      	mov	r7, r0
 80187ec:	460e      	mov	r6, r1
 80187ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80187f0:	ac01      	add	r4, sp, #4
 80187f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80187f4:	682b      	ldr	r3, [r5, #0]
 80187f6:	6023      	str	r3, [r4, #0]
 80187f8:	a801      	add	r0, sp, #4
 80187fa:	f7f5 fffd 	bl	800e7f8 <rcutils_allocator_is_valid>
 80187fe:	2800      	cmp	r0, #0
 8018800:	d034      	beq.n	801886c <rcl_guard_condition_init+0x90>
 8018802:	463c      	mov	r4, r7
 8018804:	2f00      	cmp	r7, #0
 8018806:	d031      	beq.n	801886c <rcl_guard_condition_init+0x90>
 8018808:	4635      	mov	r5, r6
 801880a:	687e      	ldr	r6, [r7, #4]
 801880c:	bb46      	cbnz	r6, 8018860 <rcl_guard_condition_init+0x84>
 801880e:	2d00      	cmp	r5, #0
 8018810:	d02c      	beq.n	801886c <rcl_guard_condition_init+0x90>
 8018812:	4628      	mov	r0, r5
 8018814:	f7fc f90c 	bl	8014a30 <rcl_context_is_valid>
 8018818:	2800      	cmp	r0, #0
 801881a:	d02d      	beq.n	8018878 <rcl_guard_condition_init+0x9c>
 801881c:	9b01      	ldr	r3, [sp, #4]
 801881e:	9905      	ldr	r1, [sp, #20]
 8018820:	201c      	movs	r0, #28
 8018822:	4798      	blx	r3
 8018824:	4607      	mov	r7, r0
 8018826:	6060      	str	r0, [r4, #4]
 8018828:	2800      	cmp	r0, #0
 801882a:	d02e      	beq.n	801888a <rcl_guard_condition_init+0xae>
 801882c:	6828      	ldr	r0, [r5, #0]
 801882e:	3028      	adds	r0, #40	; 0x28
 8018830:	f000 f8dc 	bl	80189ec <rmw_create_guard_condition>
 8018834:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8018838:	6038      	str	r0, [r7, #0]
 801883a:	f8dc 5000 	ldr.w	r5, [ip]
 801883e:	b1ed      	cbz	r5, 801887c <rcl_guard_condition_init+0xa0>
 8018840:	ac01      	add	r4, sp, #4
 8018842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018844:	2701      	movs	r7, #1
 8018846:	f10c 0508 	add.w	r5, ip, #8
 801884a:	f88c 7004 	strb.w	r7, [ip, #4]
 801884e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018850:	6823      	ldr	r3, [r4, #0]
 8018852:	602b      	str	r3, [r5, #0]
 8018854:	4630      	mov	r0, r6
 8018856:	b007      	add	sp, #28
 8018858:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801885c:	b002      	add	sp, #8
 801885e:	4770      	bx	lr
 8018860:	2064      	movs	r0, #100	; 0x64
 8018862:	b007      	add	sp, #28
 8018864:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018868:	b002      	add	sp, #8
 801886a:	4770      	bx	lr
 801886c:	200b      	movs	r0, #11
 801886e:	b007      	add	sp, #28
 8018870:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018874:	b002      	add	sp, #8
 8018876:	4770      	bx	lr
 8018878:	2065      	movs	r0, #101	; 0x65
 801887a:	e7f2      	b.n	8018862 <rcl_guard_condition_init+0x86>
 801887c:	4660      	mov	r0, ip
 801887e:	9b02      	ldr	r3, [sp, #8]
 8018880:	9905      	ldr	r1, [sp, #20]
 8018882:	4798      	blx	r3
 8018884:	6065      	str	r5, [r4, #4]
 8018886:	2001      	movs	r0, #1
 8018888:	e7eb      	b.n	8018862 <rcl_guard_condition_init+0x86>
 801888a:	200a      	movs	r0, #10
 801888c:	e7e9      	b.n	8018862 <rcl_guard_condition_init+0x86>
 801888e:	bf00      	nop

08018890 <rcl_guard_condition_init_from_rmw>:
 8018890:	b082      	sub	sp, #8
 8018892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018896:	b086      	sub	sp, #24
 8018898:	ac0c      	add	r4, sp, #48	; 0x30
 801889a:	4684      	mov	ip, r0
 801889c:	f844 3f04 	str.w	r3, [r4, #4]!
 80188a0:	460f      	mov	r7, r1
 80188a2:	4690      	mov	r8, r2
 80188a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80188a6:	ad01      	add	r5, sp, #4
 80188a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80188aa:	6823      	ldr	r3, [r4, #0]
 80188ac:	602b      	str	r3, [r5, #0]
 80188ae:	a801      	add	r0, sp, #4
 80188b0:	4664      	mov	r4, ip
 80188b2:	f7f5 ffa1 	bl	800e7f8 <rcutils_allocator_is_valid>
 80188b6:	b328      	cbz	r0, 8018904 <rcl_guard_condition_init_from_rmw+0x74>
 80188b8:	b324      	cbz	r4, 8018904 <rcl_guard_condition_init_from_rmw+0x74>
 80188ba:	6866      	ldr	r6, [r4, #4]
 80188bc:	b9e6      	cbnz	r6, 80188f8 <rcl_guard_condition_init_from_rmw+0x68>
 80188be:	f1b8 0f00 	cmp.w	r8, #0
 80188c2:	d01f      	beq.n	8018904 <rcl_guard_condition_init_from_rmw+0x74>
 80188c4:	4640      	mov	r0, r8
 80188c6:	f7fc f8b3 	bl	8014a30 <rcl_context_is_valid>
 80188ca:	b308      	cbz	r0, 8018910 <rcl_guard_condition_init_from_rmw+0x80>
 80188cc:	9b01      	ldr	r3, [sp, #4]
 80188ce:	9905      	ldr	r1, [sp, #20]
 80188d0:	201c      	movs	r0, #28
 80188d2:	4798      	blx	r3
 80188d4:	4605      	mov	r5, r0
 80188d6:	6060      	str	r0, [r4, #4]
 80188d8:	b340      	cbz	r0, 801892c <rcl_guard_condition_init_from_rmw+0x9c>
 80188da:	b1df      	cbz	r7, 8018914 <rcl_guard_condition_init_from_rmw+0x84>
 80188dc:	6007      	str	r7, [r0, #0]
 80188de:	7106      	strb	r6, [r0, #4]
 80188e0:	ac01      	add	r4, sp, #4
 80188e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80188e4:	3508      	adds	r5, #8
 80188e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80188e8:	6823      	ldr	r3, [r4, #0]
 80188ea:	602b      	str	r3, [r5, #0]
 80188ec:	2000      	movs	r0, #0
 80188ee:	b006      	add	sp, #24
 80188f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80188f4:	b002      	add	sp, #8
 80188f6:	4770      	bx	lr
 80188f8:	2064      	movs	r0, #100	; 0x64
 80188fa:	b006      	add	sp, #24
 80188fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018900:	b002      	add	sp, #8
 8018902:	4770      	bx	lr
 8018904:	200b      	movs	r0, #11
 8018906:	b006      	add	sp, #24
 8018908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801890c:	b002      	add	sp, #8
 801890e:	4770      	bx	lr
 8018910:	2065      	movs	r0, #101	; 0x65
 8018912:	e7f2      	b.n	80188fa <rcl_guard_condition_init_from_rmw+0x6a>
 8018914:	f8d8 0000 	ldr.w	r0, [r8]
 8018918:	3028      	adds	r0, #40	; 0x28
 801891a:	f000 f867 	bl	80189ec <rmw_create_guard_condition>
 801891e:	6028      	str	r0, [r5, #0]
 8018920:	6865      	ldr	r5, [r4, #4]
 8018922:	682e      	ldr	r6, [r5, #0]
 8018924:	b126      	cbz	r6, 8018930 <rcl_guard_condition_init_from_rmw+0xa0>
 8018926:	2301      	movs	r3, #1
 8018928:	712b      	strb	r3, [r5, #4]
 801892a:	e7d9      	b.n	80188e0 <rcl_guard_condition_init_from_rmw+0x50>
 801892c:	200a      	movs	r0, #10
 801892e:	e7e4      	b.n	80188fa <rcl_guard_condition_init_from_rmw+0x6a>
 8018930:	4628      	mov	r0, r5
 8018932:	9b02      	ldr	r3, [sp, #8]
 8018934:	9905      	ldr	r1, [sp, #20]
 8018936:	4798      	blx	r3
 8018938:	6066      	str	r6, [r4, #4]
 801893a:	2001      	movs	r0, #1
 801893c:	e7dd      	b.n	80188fa <rcl_guard_condition_init_from_rmw+0x6a>
 801893e:	bf00      	nop

08018940 <rcl_guard_condition_fini>:
 8018940:	b570      	push	{r4, r5, r6, lr}
 8018942:	b082      	sub	sp, #8
 8018944:	b1f0      	cbz	r0, 8018984 <rcl_guard_condition_fini+0x44>
 8018946:	4604      	mov	r4, r0
 8018948:	6840      	ldr	r0, [r0, #4]
 801894a:	b158      	cbz	r0, 8018964 <rcl_guard_condition_fini+0x24>
 801894c:	6803      	ldr	r3, [r0, #0]
 801894e:	68c6      	ldr	r6, [r0, #12]
 8018950:	6981      	ldr	r1, [r0, #24]
 8018952:	b15b      	cbz	r3, 801896c <rcl_guard_condition_fini+0x2c>
 8018954:	7905      	ldrb	r5, [r0, #4]
 8018956:	b95d      	cbnz	r5, 8018970 <rcl_guard_condition_fini+0x30>
 8018958:	47b0      	blx	r6
 801895a:	2300      	movs	r3, #0
 801895c:	4628      	mov	r0, r5
 801895e:	6063      	str	r3, [r4, #4]
 8018960:	b002      	add	sp, #8
 8018962:	bd70      	pop	{r4, r5, r6, pc}
 8018964:	4605      	mov	r5, r0
 8018966:	4628      	mov	r0, r5
 8018968:	b002      	add	sp, #8
 801896a:	bd70      	pop	{r4, r5, r6, pc}
 801896c:	461d      	mov	r5, r3
 801896e:	e7f3      	b.n	8018958 <rcl_guard_condition_fini+0x18>
 8018970:	4618      	mov	r0, r3
 8018972:	9101      	str	r1, [sp, #4]
 8018974:	f000 f84e 	bl	8018a14 <rmw_destroy_guard_condition>
 8018978:	1e05      	subs	r5, r0, #0
 801897a:	9901      	ldr	r1, [sp, #4]
 801897c:	6860      	ldr	r0, [r4, #4]
 801897e:	bf18      	it	ne
 8018980:	2501      	movne	r5, #1
 8018982:	e7e9      	b.n	8018958 <rcl_guard_condition_fini+0x18>
 8018984:	250b      	movs	r5, #11
 8018986:	4628      	mov	r0, r5
 8018988:	b002      	add	sp, #8
 801898a:	bd70      	pop	{r4, r5, r6, pc}

0801898c <rcl_guard_condition_get_default_options>:
 801898c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801898e:	b087      	sub	sp, #28
 8018990:	4607      	mov	r7, r0
 8018992:	466c      	mov	r4, sp
 8018994:	4668      	mov	r0, sp
 8018996:	f7f5 ff21 	bl	800e7dc <rcutils_get_default_allocator>
 801899a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801899c:	4d07      	ldr	r5, [pc, #28]	; (80189bc <rcl_guard_condition_get_default_options+0x30>)
 801899e:	f8d4 c000 	ldr.w	ip, [r4]
 80189a2:	462e      	mov	r6, r5
 80189a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80189a6:	462c      	mov	r4, r5
 80189a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80189aa:	463c      	mov	r4, r7
 80189ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80189ae:	4638      	mov	r0, r7
 80189b0:	f8c6 c000 	str.w	ip, [r6]
 80189b4:	f8c4 c000 	str.w	ip, [r4]
 80189b8:	b007      	add	sp, #28
 80189ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189bc:	20010530 	.word	0x20010530

080189c0 <rcl_trigger_guard_condition>:
 80189c0:	b148      	cbz	r0, 80189d6 <rcl_trigger_guard_condition+0x16>
 80189c2:	b508      	push	{r3, lr}
 80189c4:	6843      	ldr	r3, [r0, #4]
 80189c6:	b143      	cbz	r3, 80189da <rcl_trigger_guard_condition+0x1a>
 80189c8:	6818      	ldr	r0, [r3, #0]
 80189ca:	f000 f837 	bl	8018a3c <rmw_trigger_guard_condition>
 80189ce:	3800      	subs	r0, #0
 80189d0:	bf18      	it	ne
 80189d2:	2001      	movne	r0, #1
 80189d4:	bd08      	pop	{r3, pc}
 80189d6:	200b      	movs	r0, #11
 80189d8:	4770      	bx	lr
 80189da:	200b      	movs	r0, #11
 80189dc:	bd08      	pop	{r3, pc}
 80189de:	bf00      	nop

080189e0 <rcl_guard_condition_get_rmw_handle>:
 80189e0:	b110      	cbz	r0, 80189e8 <rcl_guard_condition_get_rmw_handle+0x8>
 80189e2:	6840      	ldr	r0, [r0, #4]
 80189e4:	b100      	cbz	r0, 80189e8 <rcl_guard_condition_get_rmw_handle+0x8>
 80189e6:	6800      	ldr	r0, [r0, #0]
 80189e8:	4770      	bx	lr
 80189ea:	bf00      	nop

080189ec <rmw_create_guard_condition>:
 80189ec:	b538      	push	{r3, r4, r5, lr}
 80189ee:	4605      	mov	r5, r0
 80189f0:	4807      	ldr	r0, [pc, #28]	; (8018a10 <rmw_create_guard_condition+0x24>)
 80189f2:	f7fe fd3f 	bl	8017474 <get_memory>
 80189f6:	4604      	mov	r4, r0
 80189f8:	b138      	cbz	r0, 8018a0a <rmw_create_guard_condition+0x1e>
 80189fa:	68c4      	ldr	r4, [r0, #12]
 80189fc:	2300      	movs	r3, #0
 80189fe:	61e5      	str	r5, [r4, #28]
 8018a00:	7423      	strb	r3, [r4, #16]
 8018a02:	f7fe fd8d 	bl	8017520 <rmw_get_implementation_identifier>
 8018a06:	f844 0f14 	str.w	r0, [r4, #20]!
 8018a0a:	4620      	mov	r0, r4
 8018a0c:	bd38      	pop	{r3, r4, r5, pc}
 8018a0e:	bf00      	nop
 8018a10:	200147f8 	.word	0x200147f8

08018a14 <rmw_destroy_guard_condition>:
 8018a14:	b508      	push	{r3, lr}
 8018a16:	4b08      	ldr	r3, [pc, #32]	; (8018a38 <rmw_destroy_guard_condition+0x24>)
 8018a18:	6819      	ldr	r1, [r3, #0]
 8018a1a:	b911      	cbnz	r1, 8018a22 <rmw_destroy_guard_condition+0xe>
 8018a1c:	e00a      	b.n	8018a34 <rmw_destroy_guard_condition+0x20>
 8018a1e:	6889      	ldr	r1, [r1, #8]
 8018a20:	b141      	cbz	r1, 8018a34 <rmw_destroy_guard_condition+0x20>
 8018a22:	68cb      	ldr	r3, [r1, #12]
 8018a24:	3314      	adds	r3, #20
 8018a26:	4298      	cmp	r0, r3
 8018a28:	d1f9      	bne.n	8018a1e <rmw_destroy_guard_condition+0xa>
 8018a2a:	4803      	ldr	r0, [pc, #12]	; (8018a38 <rmw_destroy_guard_condition+0x24>)
 8018a2c:	f7fe fd32 	bl	8017494 <put_memory>
 8018a30:	2000      	movs	r0, #0
 8018a32:	bd08      	pop	{r3, pc}
 8018a34:	2001      	movs	r0, #1
 8018a36:	bd08      	pop	{r3, pc}
 8018a38:	200147f8 	.word	0x200147f8

08018a3c <rmw_trigger_guard_condition>:
 8018a3c:	b160      	cbz	r0, 8018a58 <rmw_trigger_guard_condition+0x1c>
 8018a3e:	b510      	push	{r4, lr}
 8018a40:	4604      	mov	r4, r0
 8018a42:	6800      	ldr	r0, [r0, #0]
 8018a44:	f7f7 fbda 	bl	80101fc <is_uxrce_rmw_identifier_valid>
 8018a48:	b908      	cbnz	r0, 8018a4e <rmw_trigger_guard_condition+0x12>
 8018a4a:	2001      	movs	r0, #1
 8018a4c:	bd10      	pop	{r4, pc}
 8018a4e:	6863      	ldr	r3, [r4, #4]
 8018a50:	2201      	movs	r2, #1
 8018a52:	701a      	strb	r2, [r3, #0]
 8018a54:	2000      	movs	r0, #0
 8018a56:	bd10      	pop	{r4, pc}
 8018a58:	2001      	movs	r0, #1
 8018a5a:	4770      	bx	lr

08018a5c <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8018a5c:	b570      	push	{r4, r5, r6, lr}
 8018a5e:	4604      	mov	r4, r0
 8018a60:	b1b8      	cbz	r0, 8018a92 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x36>
 8018a62:	460e      	mov	r6, r1
 8018a64:	4630      	mov	r0, r6
 8018a66:	2104      	movs	r1, #4
 8018a68:	f7f8 fe6a 	bl	8011740 <ucdr_alignment>
 8018a6c:	6864      	ldr	r4, [r4, #4]
 8018a6e:	1d75      	adds	r5, r6, #5
 8018a70:	4425      	add	r5, r4
 8018a72:	4405      	add	r5, r0
 8018a74:	4628      	mov	r0, r5
 8018a76:	2104      	movs	r1, #4
 8018a78:	f7f8 fe62 	bl	8011740 <ucdr_alignment>
 8018a7c:	3004      	adds	r0, #4
 8018a7e:	4405      	add	r5, r0
 8018a80:	4628      	mov	r0, r5
 8018a82:	2104      	movs	r1, #4
 8018a84:	f7f8 fe5c 	bl	8011740 <ucdr_alignment>
 8018a88:	f1c6 0604 	rsb	r6, r6, #4
 8018a8c:	4430      	add	r0, r6
 8018a8e:	4428      	add	r0, r5
 8018a90:	bd70      	pop	{r4, r5, r6, pc}
 8018a92:	4b05      	ldr	r3, [pc, #20]	; (8018aa8 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x4c>)
 8018a94:	4805      	ldr	r0, [pc, #20]	; (8018aac <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x50>)
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	221b      	movs	r2, #27
 8018a9a:	68db      	ldr	r3, [r3, #12]
 8018a9c:	2101      	movs	r1, #1
 8018a9e:	f000 f90d 	bl	8018cbc <fwrite>
 8018aa2:	4620      	mov	r0, r4
 8018aa4:	bd70      	pop	{r4, r5, r6, pc}
 8018aa6:	bf00      	nop
 8018aa8:	20000190 	.word	0x20000190
 8018aac:	0801e2a8 	.word	0x0801e2a8

08018ab0 <_MultiArrayDimension__cdr_serialize>:
 8018ab0:	b570      	push	{r4, r5, r6, lr}
 8018ab2:	4604      	mov	r4, r0
 8018ab4:	b1c0      	cbz	r0, 8018ae8 <_MultiArrayDimension__cdr_serialize+0x38>
 8018ab6:	6806      	ldr	r6, [r0, #0]
 8018ab8:	460d      	mov	r5, r1
 8018aba:	b196      	cbz	r6, 8018ae2 <_MultiArrayDimension__cdr_serialize+0x32>
 8018abc:	4630      	mov	r0, r6
 8018abe:	f7e7 fb91 	bl	80001e4 <strlen>
 8018ac2:	1c42      	adds	r2, r0, #1
 8018ac4:	6060      	str	r0, [r4, #4]
 8018ac6:	4631      	mov	r1, r6
 8018ac8:	4628      	mov	r0, r5
 8018aca:	f7f8 fea9 	bl	8011820 <ucdr_serialize_sequence_char>
 8018ace:	68e1      	ldr	r1, [r4, #12]
 8018ad0:	4628      	mov	r0, r5
 8018ad2:	f7f8 fb11 	bl	80110f8 <ucdr_serialize_uint32_t>
 8018ad6:	6921      	ldr	r1, [r4, #16]
 8018ad8:	4628      	mov	r0, r5
 8018ada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ade:	f7f8 bb0b 	b.w	80110f8 <ucdr_serialize_uint32_t>
 8018ae2:	4632      	mov	r2, r6
 8018ae4:	4630      	mov	r0, r6
 8018ae6:	e7ed      	b.n	8018ac4 <_MultiArrayDimension__cdr_serialize+0x14>
 8018ae8:	4b04      	ldr	r3, [pc, #16]	; (8018afc <_MultiArrayDimension__cdr_serialize+0x4c>)
 8018aea:	4805      	ldr	r0, [pc, #20]	; (8018b00 <_MultiArrayDimension__cdr_serialize+0x50>)
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	221b      	movs	r2, #27
 8018af0:	68db      	ldr	r3, [r3, #12]
 8018af2:	2101      	movs	r1, #1
 8018af4:	f000 f8e2 	bl	8018cbc <fwrite>
 8018af8:	4620      	mov	r0, r4
 8018afa:	bd70      	pop	{r4, r5, r6, pc}
 8018afc:	20000190 	.word	0x20000190
 8018b00:	0801e2a8 	.word	0x0801e2a8

08018b04 <_MultiArrayDimension__cdr_deserialize>:
 8018b04:	b570      	push	{r4, r5, r6, lr}
 8018b06:	460c      	mov	r4, r1
 8018b08:	b082      	sub	sp, #8
 8018b0a:	b1d9      	cbz	r1, 8018b44 <_MultiArrayDimension__cdr_deserialize+0x40>
 8018b0c:	688e      	ldr	r6, [r1, #8]
 8018b0e:	6809      	ldr	r1, [r1, #0]
 8018b10:	4632      	mov	r2, r6
 8018b12:	ab01      	add	r3, sp, #4
 8018b14:	4605      	mov	r5, r0
 8018b16:	f7f8 fe95 	bl	8011844 <ucdr_deserialize_sequence_char>
 8018b1a:	b120      	cbz	r0, 8018b26 <_MultiArrayDimension__cdr_deserialize+0x22>
 8018b1c:	9b01      	ldr	r3, [sp, #4]
 8018b1e:	b103      	cbz	r3, 8018b22 <_MultiArrayDimension__cdr_deserialize+0x1e>
 8018b20:	3b01      	subs	r3, #1
 8018b22:	6063      	str	r3, [r4, #4]
 8018b24:	e002      	b.n	8018b2c <_MultiArrayDimension__cdr_deserialize+0x28>
 8018b26:	9901      	ldr	r1, [sp, #4]
 8018b28:	42b1      	cmp	r1, r6
 8018b2a:	d816      	bhi.n	8018b5a <_MultiArrayDimension__cdr_deserialize+0x56>
 8018b2c:	f104 010c 	add.w	r1, r4, #12
 8018b30:	4628      	mov	r0, r5
 8018b32:	f7f8 fb41 	bl	80111b8 <ucdr_deserialize_uint32_t>
 8018b36:	f104 0110 	add.w	r1, r4, #16
 8018b3a:	4628      	mov	r0, r5
 8018b3c:	f7f8 fb3c 	bl	80111b8 <ucdr_deserialize_uint32_t>
 8018b40:	b002      	add	sp, #8
 8018b42:	bd70      	pop	{r4, r5, r6, pc}
 8018b44:	4b08      	ldr	r3, [pc, #32]	; (8018b68 <_MultiArrayDimension__cdr_deserialize+0x64>)
 8018b46:	4809      	ldr	r0, [pc, #36]	; (8018b6c <_MultiArrayDimension__cdr_deserialize+0x68>)
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	221b      	movs	r2, #27
 8018b4c:	68db      	ldr	r3, [r3, #12]
 8018b4e:	2101      	movs	r1, #1
 8018b50:	f000 f8b4 	bl	8018cbc <fwrite>
 8018b54:	4620      	mov	r0, r4
 8018b56:	b002      	add	sp, #8
 8018b58:	bd70      	pop	{r4, r5, r6, pc}
 8018b5a:	75a8      	strb	r0, [r5, #22]
 8018b5c:	6060      	str	r0, [r4, #4]
 8018b5e:	4628      	mov	r0, r5
 8018b60:	f7f8 fe3e 	bl	80117e0 <ucdr_advance_buffer>
 8018b64:	e7e2      	b.n	8018b2c <_MultiArrayDimension__cdr_deserialize+0x28>
 8018b66:	bf00      	nop
 8018b68:	20000190 	.word	0x20000190
 8018b6c:	0801e2a8 	.word	0x0801e2a8

08018b70 <_MultiArrayDimension__max_serialized_size>:
 8018b70:	b510      	push	{r4, lr}
 8018b72:	2104      	movs	r1, #4
 8018b74:	2000      	movs	r0, #0
 8018b76:	f7f8 fde3 	bl	8011740 <ucdr_alignment>
 8018b7a:	1d04      	adds	r4, r0, #4
 8018b7c:	4620      	mov	r0, r4
 8018b7e:	2104      	movs	r1, #4
 8018b80:	f7f8 fdde 	bl	8011740 <ucdr_alignment>
 8018b84:	3004      	adds	r0, #4
 8018b86:	4420      	add	r0, r4
 8018b88:	bd10      	pop	{r4, pc}
 8018b8a:	bf00      	nop

08018b8c <_MultiArrayDimension__get_serialized_size>:
 8018b8c:	b510      	push	{r4, lr}
 8018b8e:	4604      	mov	r4, r0
 8018b90:	b198      	cbz	r0, 8018bba <_MultiArrayDimension__get_serialized_size+0x2e>
 8018b92:	2104      	movs	r1, #4
 8018b94:	2000      	movs	r0, #0
 8018b96:	f7f8 fdd3 	bl	8011740 <ucdr_alignment>
 8018b9a:	6863      	ldr	r3, [r4, #4]
 8018b9c:	3305      	adds	r3, #5
 8018b9e:	181c      	adds	r4, r3, r0
 8018ba0:	4620      	mov	r0, r4
 8018ba2:	2104      	movs	r1, #4
 8018ba4:	f7f8 fdcc 	bl	8011740 <ucdr_alignment>
 8018ba8:	3004      	adds	r0, #4
 8018baa:	4404      	add	r4, r0
 8018bac:	4620      	mov	r0, r4
 8018bae:	2104      	movs	r1, #4
 8018bb0:	f7f8 fdc6 	bl	8011740 <ucdr_alignment>
 8018bb4:	3004      	adds	r0, #4
 8018bb6:	4420      	add	r0, r4
 8018bb8:	bd10      	pop	{r4, pc}
 8018bba:	4b05      	ldr	r3, [pc, #20]	; (8018bd0 <_MultiArrayDimension__get_serialized_size+0x44>)
 8018bbc:	4805      	ldr	r0, [pc, #20]	; (8018bd4 <_MultiArrayDimension__get_serialized_size+0x48>)
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	221b      	movs	r2, #27
 8018bc2:	68db      	ldr	r3, [r3, #12]
 8018bc4:	2101      	movs	r1, #1
 8018bc6:	f000 f879 	bl	8018cbc <fwrite>
 8018bca:	4620      	mov	r0, r4
 8018bcc:	bd10      	pop	{r4, pc}
 8018bce:	bf00      	nop
 8018bd0:	20000190 	.word	0x20000190
 8018bd4:	0801e2a8 	.word	0x0801e2a8

08018bd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8018bd8:	4800      	ldr	r0, [pc, #0]	; (8018bdc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 8018bda:	4770      	bx	lr
 8018bdc:	20000168 	.word	0x20000168

08018be0 <calloc>:
 8018be0:	4b02      	ldr	r3, [pc, #8]	; (8018bec <calloc+0xc>)
 8018be2:	460a      	mov	r2, r1
 8018be4:	4601      	mov	r1, r0
 8018be6:	6818      	ldr	r0, [r3, #0]
 8018be8:	f000 b924 	b.w	8018e34 <_calloc_r>
 8018bec:	20000190 	.word	0x20000190

08018bf0 <__errno>:
 8018bf0:	4b01      	ldr	r3, [pc, #4]	; (8018bf8 <__errno+0x8>)
 8018bf2:	6818      	ldr	r0, [r3, #0]
 8018bf4:	4770      	bx	lr
 8018bf6:	bf00      	nop
 8018bf8:	20000190 	.word	0x20000190

08018bfc <_fwrite_r>:
 8018bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c00:	9c08      	ldr	r4, [sp, #32]
 8018c02:	4689      	mov	r9, r1
 8018c04:	4617      	mov	r7, r2
 8018c06:	fb02 f803 	mul.w	r8, r2, r3
 8018c0a:	4605      	mov	r5, r0
 8018c0c:	b118      	cbz	r0, 8018c16 <_fwrite_r+0x1a>
 8018c0e:	6983      	ldr	r3, [r0, #24]
 8018c10:	b90b      	cbnz	r3, 8018c16 <_fwrite_r+0x1a>
 8018c12:	f001 ff27 	bl	801aa64 <__sinit>
 8018c16:	4b26      	ldr	r3, [pc, #152]	; (8018cb0 <_fwrite_r+0xb4>)
 8018c18:	429c      	cmp	r4, r3
 8018c1a:	d123      	bne.n	8018c64 <_fwrite_r+0x68>
 8018c1c:	686c      	ldr	r4, [r5, #4]
 8018c1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018c20:	07de      	lsls	r6, r3, #31
 8018c22:	d405      	bmi.n	8018c30 <_fwrite_r+0x34>
 8018c24:	89a3      	ldrh	r3, [r4, #12]
 8018c26:	0598      	lsls	r0, r3, #22
 8018c28:	d402      	bmi.n	8018c30 <_fwrite_r+0x34>
 8018c2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c2c:	f000 f8bf 	bl	8018dae <__retarget_lock_acquire_recursive>
 8018c30:	89a3      	ldrh	r3, [r4, #12]
 8018c32:	0719      	lsls	r1, r3, #28
 8018c34:	d520      	bpl.n	8018c78 <_fwrite_r+0x7c>
 8018c36:	6923      	ldr	r3, [r4, #16]
 8018c38:	b1f3      	cbz	r3, 8018c78 <_fwrite_r+0x7c>
 8018c3a:	2600      	movs	r6, #0
 8018c3c:	4546      	cmp	r6, r8
 8018c3e:	d029      	beq.n	8018c94 <_fwrite_r+0x98>
 8018c40:	68a0      	ldr	r0, [r4, #8]
 8018c42:	f819 1006 	ldrb.w	r1, [r9, r6]
 8018c46:	3801      	subs	r0, #1
 8018c48:	2800      	cmp	r0, #0
 8018c4a:	60a0      	str	r0, [r4, #8]
 8018c4c:	da04      	bge.n	8018c58 <_fwrite_r+0x5c>
 8018c4e:	69a3      	ldr	r3, [r4, #24]
 8018c50:	4298      	cmp	r0, r3
 8018c52:	db19      	blt.n	8018c88 <_fwrite_r+0x8c>
 8018c54:	290a      	cmp	r1, #10
 8018c56:	d017      	beq.n	8018c88 <_fwrite_r+0x8c>
 8018c58:	6823      	ldr	r3, [r4, #0]
 8018c5a:	1c5a      	adds	r2, r3, #1
 8018c5c:	6022      	str	r2, [r4, #0]
 8018c5e:	7019      	strb	r1, [r3, #0]
 8018c60:	3601      	adds	r6, #1
 8018c62:	e7eb      	b.n	8018c3c <_fwrite_r+0x40>
 8018c64:	4b13      	ldr	r3, [pc, #76]	; (8018cb4 <_fwrite_r+0xb8>)
 8018c66:	429c      	cmp	r4, r3
 8018c68:	d101      	bne.n	8018c6e <_fwrite_r+0x72>
 8018c6a:	68ac      	ldr	r4, [r5, #8]
 8018c6c:	e7d7      	b.n	8018c1e <_fwrite_r+0x22>
 8018c6e:	4b12      	ldr	r3, [pc, #72]	; (8018cb8 <_fwrite_r+0xbc>)
 8018c70:	429c      	cmp	r4, r3
 8018c72:	bf08      	it	eq
 8018c74:	68ec      	ldreq	r4, [r5, #12]
 8018c76:	e7d2      	b.n	8018c1e <_fwrite_r+0x22>
 8018c78:	4621      	mov	r1, r4
 8018c7a:	4628      	mov	r0, r5
 8018c7c:	f001 fd30 	bl	801a6e0 <__swsetup_r>
 8018c80:	2800      	cmp	r0, #0
 8018c82:	d0da      	beq.n	8018c3a <_fwrite_r+0x3e>
 8018c84:	2600      	movs	r6, #0
 8018c86:	e005      	b.n	8018c94 <_fwrite_r+0x98>
 8018c88:	4622      	mov	r2, r4
 8018c8a:	4628      	mov	r0, r5
 8018c8c:	f001 fcc4 	bl	801a618 <__swbuf_r>
 8018c90:	3001      	adds	r0, #1
 8018c92:	d1e5      	bne.n	8018c60 <_fwrite_r+0x64>
 8018c94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018c96:	07da      	lsls	r2, r3, #31
 8018c98:	d405      	bmi.n	8018ca6 <_fwrite_r+0xaa>
 8018c9a:	89a3      	ldrh	r3, [r4, #12]
 8018c9c:	059b      	lsls	r3, r3, #22
 8018c9e:	d402      	bmi.n	8018ca6 <_fwrite_r+0xaa>
 8018ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018ca2:	f000 f885 	bl	8018db0 <__retarget_lock_release_recursive>
 8018ca6:	fbb6 f0f7 	udiv	r0, r6, r7
 8018caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018cae:	bf00      	nop
 8018cb0:	0801ecc4 	.word	0x0801ecc4
 8018cb4:	0801ece4 	.word	0x0801ece4
 8018cb8:	0801eca4 	.word	0x0801eca4

08018cbc <fwrite>:
 8018cbc:	b507      	push	{r0, r1, r2, lr}
 8018cbe:	9300      	str	r3, [sp, #0]
 8018cc0:	4613      	mov	r3, r2
 8018cc2:	460a      	mov	r2, r1
 8018cc4:	4601      	mov	r1, r0
 8018cc6:	4803      	ldr	r0, [pc, #12]	; (8018cd4 <fwrite+0x18>)
 8018cc8:	6800      	ldr	r0, [r0, #0]
 8018cca:	f7ff ff97 	bl	8018bfc <_fwrite_r>
 8018cce:	b003      	add	sp, #12
 8018cd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8018cd4:	20000190 	.word	0x20000190

08018cd8 <getenv>:
 8018cd8:	b507      	push	{r0, r1, r2, lr}
 8018cda:	4b04      	ldr	r3, [pc, #16]	; (8018cec <getenv+0x14>)
 8018cdc:	4601      	mov	r1, r0
 8018cde:	aa01      	add	r2, sp, #4
 8018ce0:	6818      	ldr	r0, [r3, #0]
 8018ce2:	f000 f805 	bl	8018cf0 <_findenv_r>
 8018ce6:	b003      	add	sp, #12
 8018ce8:	f85d fb04 	ldr.w	pc, [sp], #4
 8018cec:	20000190 	.word	0x20000190

08018cf0 <_findenv_r>:
 8018cf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cf4:	4607      	mov	r7, r0
 8018cf6:	4689      	mov	r9, r1
 8018cf8:	4616      	mov	r6, r2
 8018cfa:	f001 fd8d 	bl	801a818 <__env_lock>
 8018cfe:	4b18      	ldr	r3, [pc, #96]	; (8018d60 <_findenv_r+0x70>)
 8018d00:	681c      	ldr	r4, [r3, #0]
 8018d02:	469a      	mov	sl, r3
 8018d04:	b134      	cbz	r4, 8018d14 <_findenv_r+0x24>
 8018d06:	464b      	mov	r3, r9
 8018d08:	4698      	mov	r8, r3
 8018d0a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8018d0e:	b139      	cbz	r1, 8018d20 <_findenv_r+0x30>
 8018d10:	293d      	cmp	r1, #61	; 0x3d
 8018d12:	d1f9      	bne.n	8018d08 <_findenv_r+0x18>
 8018d14:	4638      	mov	r0, r7
 8018d16:	f001 fd85 	bl	801a824 <__env_unlock>
 8018d1a:	2000      	movs	r0, #0
 8018d1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d20:	eba8 0809 	sub.w	r8, r8, r9
 8018d24:	46a3      	mov	fp, r4
 8018d26:	f854 0b04 	ldr.w	r0, [r4], #4
 8018d2a:	2800      	cmp	r0, #0
 8018d2c:	d0f2      	beq.n	8018d14 <_findenv_r+0x24>
 8018d2e:	4642      	mov	r2, r8
 8018d30:	4649      	mov	r1, r9
 8018d32:	f000 fcc7 	bl	80196c4 <strncmp>
 8018d36:	2800      	cmp	r0, #0
 8018d38:	d1f4      	bne.n	8018d24 <_findenv_r+0x34>
 8018d3a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018d3e:	eb03 0508 	add.w	r5, r3, r8
 8018d42:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018d46:	2b3d      	cmp	r3, #61	; 0x3d
 8018d48:	d1ec      	bne.n	8018d24 <_findenv_r+0x34>
 8018d4a:	f8da 3000 	ldr.w	r3, [sl]
 8018d4e:	ebab 0303 	sub.w	r3, fp, r3
 8018d52:	109b      	asrs	r3, r3, #2
 8018d54:	4638      	mov	r0, r7
 8018d56:	6033      	str	r3, [r6, #0]
 8018d58:	f001 fd64 	bl	801a824 <__env_unlock>
 8018d5c:	1c68      	adds	r0, r5, #1
 8018d5e:	e7dd      	b.n	8018d1c <_findenv_r+0x2c>
 8018d60:	20000004 	.word	0x20000004

08018d64 <__libc_init_array>:
 8018d64:	b570      	push	{r4, r5, r6, lr}
 8018d66:	4d0d      	ldr	r5, [pc, #52]	; (8018d9c <__libc_init_array+0x38>)
 8018d68:	4c0d      	ldr	r4, [pc, #52]	; (8018da0 <__libc_init_array+0x3c>)
 8018d6a:	1b64      	subs	r4, r4, r5
 8018d6c:	10a4      	asrs	r4, r4, #2
 8018d6e:	2600      	movs	r6, #0
 8018d70:	42a6      	cmp	r6, r4
 8018d72:	d109      	bne.n	8018d88 <__libc_init_array+0x24>
 8018d74:	4d0b      	ldr	r5, [pc, #44]	; (8018da4 <__libc_init_array+0x40>)
 8018d76:	4c0c      	ldr	r4, [pc, #48]	; (8018da8 <__libc_init_array+0x44>)
 8018d78:	f004 f9ce 	bl	801d118 <_init>
 8018d7c:	1b64      	subs	r4, r4, r5
 8018d7e:	10a4      	asrs	r4, r4, #2
 8018d80:	2600      	movs	r6, #0
 8018d82:	42a6      	cmp	r6, r4
 8018d84:	d105      	bne.n	8018d92 <__libc_init_array+0x2e>
 8018d86:	bd70      	pop	{r4, r5, r6, pc}
 8018d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8018d8c:	4798      	blx	r3
 8018d8e:	3601      	adds	r6, #1
 8018d90:	e7ee      	b.n	8018d70 <__libc_init_array+0xc>
 8018d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8018d96:	4798      	blx	r3
 8018d98:	3601      	adds	r6, #1
 8018d9a:	e7f2      	b.n	8018d82 <__libc_init_array+0x1e>
 8018d9c:	0801ef60 	.word	0x0801ef60
 8018da0:	0801ef60 	.word	0x0801ef60
 8018da4:	0801ef60 	.word	0x0801ef60
 8018da8:	0801ef64 	.word	0x0801ef64

08018dac <__retarget_lock_init_recursive>:
 8018dac:	4770      	bx	lr

08018dae <__retarget_lock_acquire_recursive>:
 8018dae:	4770      	bx	lr

08018db0 <__retarget_lock_release_recursive>:
 8018db0:	4770      	bx	lr
	...

08018db4 <malloc>:
 8018db4:	4b02      	ldr	r3, [pc, #8]	; (8018dc0 <malloc+0xc>)
 8018db6:	4601      	mov	r1, r0
 8018db8:	6818      	ldr	r0, [r3, #0]
 8018dba:	f000 b89b 	b.w	8018ef4 <_malloc_r>
 8018dbe:	bf00      	nop
 8018dc0:	20000190 	.word	0x20000190

08018dc4 <free>:
 8018dc4:	4b02      	ldr	r3, [pc, #8]	; (8018dd0 <free+0xc>)
 8018dc6:	4601      	mov	r1, r0
 8018dc8:	6818      	ldr	r0, [r3, #0]
 8018dca:	f000 b843 	b.w	8018e54 <_free_r>
 8018dce:	bf00      	nop
 8018dd0:	20000190 	.word	0x20000190

08018dd4 <memcpy>:
 8018dd4:	440a      	add	r2, r1
 8018dd6:	4291      	cmp	r1, r2
 8018dd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018ddc:	d100      	bne.n	8018de0 <memcpy+0xc>
 8018dde:	4770      	bx	lr
 8018de0:	b510      	push	{r4, lr}
 8018de2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018de6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018dea:	4291      	cmp	r1, r2
 8018dec:	d1f9      	bne.n	8018de2 <memcpy+0xe>
 8018dee:	bd10      	pop	{r4, pc}

08018df0 <memmove>:
 8018df0:	4288      	cmp	r0, r1
 8018df2:	b510      	push	{r4, lr}
 8018df4:	eb01 0402 	add.w	r4, r1, r2
 8018df8:	d902      	bls.n	8018e00 <memmove+0x10>
 8018dfa:	4284      	cmp	r4, r0
 8018dfc:	4623      	mov	r3, r4
 8018dfe:	d807      	bhi.n	8018e10 <memmove+0x20>
 8018e00:	1e43      	subs	r3, r0, #1
 8018e02:	42a1      	cmp	r1, r4
 8018e04:	d008      	beq.n	8018e18 <memmove+0x28>
 8018e06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018e0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018e0e:	e7f8      	b.n	8018e02 <memmove+0x12>
 8018e10:	4402      	add	r2, r0
 8018e12:	4601      	mov	r1, r0
 8018e14:	428a      	cmp	r2, r1
 8018e16:	d100      	bne.n	8018e1a <memmove+0x2a>
 8018e18:	bd10      	pop	{r4, pc}
 8018e1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018e1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018e22:	e7f7      	b.n	8018e14 <memmove+0x24>

08018e24 <memset>:
 8018e24:	4402      	add	r2, r0
 8018e26:	4603      	mov	r3, r0
 8018e28:	4293      	cmp	r3, r2
 8018e2a:	d100      	bne.n	8018e2e <memset+0xa>
 8018e2c:	4770      	bx	lr
 8018e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8018e32:	e7f9      	b.n	8018e28 <memset+0x4>

08018e34 <_calloc_r>:
 8018e34:	b513      	push	{r0, r1, r4, lr}
 8018e36:	434a      	muls	r2, r1
 8018e38:	4611      	mov	r1, r2
 8018e3a:	9201      	str	r2, [sp, #4]
 8018e3c:	f000 f85a 	bl	8018ef4 <_malloc_r>
 8018e40:	4604      	mov	r4, r0
 8018e42:	b118      	cbz	r0, 8018e4c <_calloc_r+0x18>
 8018e44:	9a01      	ldr	r2, [sp, #4]
 8018e46:	2100      	movs	r1, #0
 8018e48:	f7ff ffec 	bl	8018e24 <memset>
 8018e4c:	4620      	mov	r0, r4
 8018e4e:	b002      	add	sp, #8
 8018e50:	bd10      	pop	{r4, pc}
	...

08018e54 <_free_r>:
 8018e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018e56:	2900      	cmp	r1, #0
 8018e58:	d048      	beq.n	8018eec <_free_r+0x98>
 8018e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018e5e:	9001      	str	r0, [sp, #4]
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	f1a1 0404 	sub.w	r4, r1, #4
 8018e66:	bfb8      	it	lt
 8018e68:	18e4      	addlt	r4, r4, r3
 8018e6a:	f002 faa1 	bl	801b3b0 <__malloc_lock>
 8018e6e:	4a20      	ldr	r2, [pc, #128]	; (8018ef0 <_free_r+0x9c>)
 8018e70:	9801      	ldr	r0, [sp, #4]
 8018e72:	6813      	ldr	r3, [r2, #0]
 8018e74:	4615      	mov	r5, r2
 8018e76:	b933      	cbnz	r3, 8018e86 <_free_r+0x32>
 8018e78:	6063      	str	r3, [r4, #4]
 8018e7a:	6014      	str	r4, [r2, #0]
 8018e7c:	b003      	add	sp, #12
 8018e7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018e82:	f002 ba9b 	b.w	801b3bc <__malloc_unlock>
 8018e86:	42a3      	cmp	r3, r4
 8018e88:	d90b      	bls.n	8018ea2 <_free_r+0x4e>
 8018e8a:	6821      	ldr	r1, [r4, #0]
 8018e8c:	1862      	adds	r2, r4, r1
 8018e8e:	4293      	cmp	r3, r2
 8018e90:	bf04      	itt	eq
 8018e92:	681a      	ldreq	r2, [r3, #0]
 8018e94:	685b      	ldreq	r3, [r3, #4]
 8018e96:	6063      	str	r3, [r4, #4]
 8018e98:	bf04      	itt	eq
 8018e9a:	1852      	addeq	r2, r2, r1
 8018e9c:	6022      	streq	r2, [r4, #0]
 8018e9e:	602c      	str	r4, [r5, #0]
 8018ea0:	e7ec      	b.n	8018e7c <_free_r+0x28>
 8018ea2:	461a      	mov	r2, r3
 8018ea4:	685b      	ldr	r3, [r3, #4]
 8018ea6:	b10b      	cbz	r3, 8018eac <_free_r+0x58>
 8018ea8:	42a3      	cmp	r3, r4
 8018eaa:	d9fa      	bls.n	8018ea2 <_free_r+0x4e>
 8018eac:	6811      	ldr	r1, [r2, #0]
 8018eae:	1855      	adds	r5, r2, r1
 8018eb0:	42a5      	cmp	r5, r4
 8018eb2:	d10b      	bne.n	8018ecc <_free_r+0x78>
 8018eb4:	6824      	ldr	r4, [r4, #0]
 8018eb6:	4421      	add	r1, r4
 8018eb8:	1854      	adds	r4, r2, r1
 8018eba:	42a3      	cmp	r3, r4
 8018ebc:	6011      	str	r1, [r2, #0]
 8018ebe:	d1dd      	bne.n	8018e7c <_free_r+0x28>
 8018ec0:	681c      	ldr	r4, [r3, #0]
 8018ec2:	685b      	ldr	r3, [r3, #4]
 8018ec4:	6053      	str	r3, [r2, #4]
 8018ec6:	4421      	add	r1, r4
 8018ec8:	6011      	str	r1, [r2, #0]
 8018eca:	e7d7      	b.n	8018e7c <_free_r+0x28>
 8018ecc:	d902      	bls.n	8018ed4 <_free_r+0x80>
 8018ece:	230c      	movs	r3, #12
 8018ed0:	6003      	str	r3, [r0, #0]
 8018ed2:	e7d3      	b.n	8018e7c <_free_r+0x28>
 8018ed4:	6825      	ldr	r5, [r4, #0]
 8018ed6:	1961      	adds	r1, r4, r5
 8018ed8:	428b      	cmp	r3, r1
 8018eda:	bf04      	itt	eq
 8018edc:	6819      	ldreq	r1, [r3, #0]
 8018ede:	685b      	ldreq	r3, [r3, #4]
 8018ee0:	6063      	str	r3, [r4, #4]
 8018ee2:	bf04      	itt	eq
 8018ee4:	1949      	addeq	r1, r1, r5
 8018ee6:	6021      	streq	r1, [r4, #0]
 8018ee8:	6054      	str	r4, [r2, #4]
 8018eea:	e7c7      	b.n	8018e7c <_free_r+0x28>
 8018eec:	b003      	add	sp, #12
 8018eee:	bd30      	pop	{r4, r5, pc}
 8018ef0:	20010544 	.word	0x20010544

08018ef4 <_malloc_r>:
 8018ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ef6:	1ccd      	adds	r5, r1, #3
 8018ef8:	f025 0503 	bic.w	r5, r5, #3
 8018efc:	3508      	adds	r5, #8
 8018efe:	2d0c      	cmp	r5, #12
 8018f00:	bf38      	it	cc
 8018f02:	250c      	movcc	r5, #12
 8018f04:	2d00      	cmp	r5, #0
 8018f06:	4606      	mov	r6, r0
 8018f08:	db01      	blt.n	8018f0e <_malloc_r+0x1a>
 8018f0a:	42a9      	cmp	r1, r5
 8018f0c:	d903      	bls.n	8018f16 <_malloc_r+0x22>
 8018f0e:	230c      	movs	r3, #12
 8018f10:	6033      	str	r3, [r6, #0]
 8018f12:	2000      	movs	r0, #0
 8018f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f16:	f002 fa4b 	bl	801b3b0 <__malloc_lock>
 8018f1a:	4921      	ldr	r1, [pc, #132]	; (8018fa0 <_malloc_r+0xac>)
 8018f1c:	680a      	ldr	r2, [r1, #0]
 8018f1e:	4614      	mov	r4, r2
 8018f20:	b99c      	cbnz	r4, 8018f4a <_malloc_r+0x56>
 8018f22:	4f20      	ldr	r7, [pc, #128]	; (8018fa4 <_malloc_r+0xb0>)
 8018f24:	683b      	ldr	r3, [r7, #0]
 8018f26:	b923      	cbnz	r3, 8018f32 <_malloc_r+0x3e>
 8018f28:	4621      	mov	r1, r4
 8018f2a:	4630      	mov	r0, r6
 8018f2c:	f000 fada 	bl	80194e4 <_sbrk_r>
 8018f30:	6038      	str	r0, [r7, #0]
 8018f32:	4629      	mov	r1, r5
 8018f34:	4630      	mov	r0, r6
 8018f36:	f000 fad5 	bl	80194e4 <_sbrk_r>
 8018f3a:	1c43      	adds	r3, r0, #1
 8018f3c:	d123      	bne.n	8018f86 <_malloc_r+0x92>
 8018f3e:	230c      	movs	r3, #12
 8018f40:	6033      	str	r3, [r6, #0]
 8018f42:	4630      	mov	r0, r6
 8018f44:	f002 fa3a 	bl	801b3bc <__malloc_unlock>
 8018f48:	e7e3      	b.n	8018f12 <_malloc_r+0x1e>
 8018f4a:	6823      	ldr	r3, [r4, #0]
 8018f4c:	1b5b      	subs	r3, r3, r5
 8018f4e:	d417      	bmi.n	8018f80 <_malloc_r+0x8c>
 8018f50:	2b0b      	cmp	r3, #11
 8018f52:	d903      	bls.n	8018f5c <_malloc_r+0x68>
 8018f54:	6023      	str	r3, [r4, #0]
 8018f56:	441c      	add	r4, r3
 8018f58:	6025      	str	r5, [r4, #0]
 8018f5a:	e004      	b.n	8018f66 <_malloc_r+0x72>
 8018f5c:	6863      	ldr	r3, [r4, #4]
 8018f5e:	42a2      	cmp	r2, r4
 8018f60:	bf0c      	ite	eq
 8018f62:	600b      	streq	r3, [r1, #0]
 8018f64:	6053      	strne	r3, [r2, #4]
 8018f66:	4630      	mov	r0, r6
 8018f68:	f002 fa28 	bl	801b3bc <__malloc_unlock>
 8018f6c:	f104 000b 	add.w	r0, r4, #11
 8018f70:	1d23      	adds	r3, r4, #4
 8018f72:	f020 0007 	bic.w	r0, r0, #7
 8018f76:	1ac2      	subs	r2, r0, r3
 8018f78:	d0cc      	beq.n	8018f14 <_malloc_r+0x20>
 8018f7a:	1a1b      	subs	r3, r3, r0
 8018f7c:	50a3      	str	r3, [r4, r2]
 8018f7e:	e7c9      	b.n	8018f14 <_malloc_r+0x20>
 8018f80:	4622      	mov	r2, r4
 8018f82:	6864      	ldr	r4, [r4, #4]
 8018f84:	e7cc      	b.n	8018f20 <_malloc_r+0x2c>
 8018f86:	1cc4      	adds	r4, r0, #3
 8018f88:	f024 0403 	bic.w	r4, r4, #3
 8018f8c:	42a0      	cmp	r0, r4
 8018f8e:	d0e3      	beq.n	8018f58 <_malloc_r+0x64>
 8018f90:	1a21      	subs	r1, r4, r0
 8018f92:	4630      	mov	r0, r6
 8018f94:	f000 faa6 	bl	80194e4 <_sbrk_r>
 8018f98:	3001      	adds	r0, #1
 8018f9a:	d1dd      	bne.n	8018f58 <_malloc_r+0x64>
 8018f9c:	e7cf      	b.n	8018f3e <_malloc_r+0x4a>
 8018f9e:	bf00      	nop
 8018fa0:	20010544 	.word	0x20010544
 8018fa4:	20010548 	.word	0x20010548

08018fa8 <_scanf_float>:
 8018fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fac:	b087      	sub	sp, #28
 8018fae:	4617      	mov	r7, r2
 8018fb0:	9303      	str	r3, [sp, #12]
 8018fb2:	688b      	ldr	r3, [r1, #8]
 8018fb4:	1e5a      	subs	r2, r3, #1
 8018fb6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8018fba:	bf83      	ittte	hi
 8018fbc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018fc0:	195b      	addhi	r3, r3, r5
 8018fc2:	9302      	strhi	r3, [sp, #8]
 8018fc4:	2300      	movls	r3, #0
 8018fc6:	bf86      	itte	hi
 8018fc8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018fcc:	608b      	strhi	r3, [r1, #8]
 8018fce:	9302      	strls	r3, [sp, #8]
 8018fd0:	680b      	ldr	r3, [r1, #0]
 8018fd2:	468b      	mov	fp, r1
 8018fd4:	2500      	movs	r5, #0
 8018fd6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8018fda:	f84b 3b1c 	str.w	r3, [fp], #28
 8018fde:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8018fe2:	4680      	mov	r8, r0
 8018fe4:	460c      	mov	r4, r1
 8018fe6:	465e      	mov	r6, fp
 8018fe8:	46aa      	mov	sl, r5
 8018fea:	46a9      	mov	r9, r5
 8018fec:	9501      	str	r5, [sp, #4]
 8018fee:	68a2      	ldr	r2, [r4, #8]
 8018ff0:	b152      	cbz	r2, 8019008 <_scanf_float+0x60>
 8018ff2:	683b      	ldr	r3, [r7, #0]
 8018ff4:	781b      	ldrb	r3, [r3, #0]
 8018ff6:	2b4e      	cmp	r3, #78	; 0x4e
 8018ff8:	d864      	bhi.n	80190c4 <_scanf_float+0x11c>
 8018ffa:	2b40      	cmp	r3, #64	; 0x40
 8018ffc:	d83c      	bhi.n	8019078 <_scanf_float+0xd0>
 8018ffe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8019002:	b2c8      	uxtb	r0, r1
 8019004:	280e      	cmp	r0, #14
 8019006:	d93a      	bls.n	801907e <_scanf_float+0xd6>
 8019008:	f1b9 0f00 	cmp.w	r9, #0
 801900c:	d003      	beq.n	8019016 <_scanf_float+0x6e>
 801900e:	6823      	ldr	r3, [r4, #0]
 8019010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019014:	6023      	str	r3, [r4, #0]
 8019016:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801901a:	f1ba 0f01 	cmp.w	sl, #1
 801901e:	f200 8113 	bhi.w	8019248 <_scanf_float+0x2a0>
 8019022:	455e      	cmp	r6, fp
 8019024:	f200 8105 	bhi.w	8019232 <_scanf_float+0x28a>
 8019028:	2501      	movs	r5, #1
 801902a:	4628      	mov	r0, r5
 801902c:	b007      	add	sp, #28
 801902e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019032:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8019036:	2a0d      	cmp	r2, #13
 8019038:	d8e6      	bhi.n	8019008 <_scanf_float+0x60>
 801903a:	a101      	add	r1, pc, #4	; (adr r1, 8019040 <_scanf_float+0x98>)
 801903c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019040:	0801917f 	.word	0x0801917f
 8019044:	08019009 	.word	0x08019009
 8019048:	08019009 	.word	0x08019009
 801904c:	08019009 	.word	0x08019009
 8019050:	080191df 	.word	0x080191df
 8019054:	080191b7 	.word	0x080191b7
 8019058:	08019009 	.word	0x08019009
 801905c:	08019009 	.word	0x08019009
 8019060:	0801918d 	.word	0x0801918d
 8019064:	08019009 	.word	0x08019009
 8019068:	08019009 	.word	0x08019009
 801906c:	08019009 	.word	0x08019009
 8019070:	08019009 	.word	0x08019009
 8019074:	08019145 	.word	0x08019145
 8019078:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801907c:	e7db      	b.n	8019036 <_scanf_float+0x8e>
 801907e:	290e      	cmp	r1, #14
 8019080:	d8c2      	bhi.n	8019008 <_scanf_float+0x60>
 8019082:	a001      	add	r0, pc, #4	; (adr r0, 8019088 <_scanf_float+0xe0>)
 8019084:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019088:	08019137 	.word	0x08019137
 801908c:	08019009 	.word	0x08019009
 8019090:	08019137 	.word	0x08019137
 8019094:	080191cb 	.word	0x080191cb
 8019098:	08019009 	.word	0x08019009
 801909c:	080190e5 	.word	0x080190e5
 80190a0:	08019121 	.word	0x08019121
 80190a4:	08019121 	.word	0x08019121
 80190a8:	08019121 	.word	0x08019121
 80190ac:	08019121 	.word	0x08019121
 80190b0:	08019121 	.word	0x08019121
 80190b4:	08019121 	.word	0x08019121
 80190b8:	08019121 	.word	0x08019121
 80190bc:	08019121 	.word	0x08019121
 80190c0:	08019121 	.word	0x08019121
 80190c4:	2b6e      	cmp	r3, #110	; 0x6e
 80190c6:	d809      	bhi.n	80190dc <_scanf_float+0x134>
 80190c8:	2b60      	cmp	r3, #96	; 0x60
 80190ca:	d8b2      	bhi.n	8019032 <_scanf_float+0x8a>
 80190cc:	2b54      	cmp	r3, #84	; 0x54
 80190ce:	d077      	beq.n	80191c0 <_scanf_float+0x218>
 80190d0:	2b59      	cmp	r3, #89	; 0x59
 80190d2:	d199      	bne.n	8019008 <_scanf_float+0x60>
 80190d4:	2d07      	cmp	r5, #7
 80190d6:	d197      	bne.n	8019008 <_scanf_float+0x60>
 80190d8:	2508      	movs	r5, #8
 80190da:	e029      	b.n	8019130 <_scanf_float+0x188>
 80190dc:	2b74      	cmp	r3, #116	; 0x74
 80190de:	d06f      	beq.n	80191c0 <_scanf_float+0x218>
 80190e0:	2b79      	cmp	r3, #121	; 0x79
 80190e2:	e7f6      	b.n	80190d2 <_scanf_float+0x12a>
 80190e4:	6821      	ldr	r1, [r4, #0]
 80190e6:	05c8      	lsls	r0, r1, #23
 80190e8:	d51a      	bpl.n	8019120 <_scanf_float+0x178>
 80190ea:	9b02      	ldr	r3, [sp, #8]
 80190ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80190f0:	6021      	str	r1, [r4, #0]
 80190f2:	f109 0901 	add.w	r9, r9, #1
 80190f6:	b11b      	cbz	r3, 8019100 <_scanf_float+0x158>
 80190f8:	3b01      	subs	r3, #1
 80190fa:	3201      	adds	r2, #1
 80190fc:	9302      	str	r3, [sp, #8]
 80190fe:	60a2      	str	r2, [r4, #8]
 8019100:	68a3      	ldr	r3, [r4, #8]
 8019102:	3b01      	subs	r3, #1
 8019104:	60a3      	str	r3, [r4, #8]
 8019106:	6923      	ldr	r3, [r4, #16]
 8019108:	3301      	adds	r3, #1
 801910a:	6123      	str	r3, [r4, #16]
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	3b01      	subs	r3, #1
 8019110:	2b00      	cmp	r3, #0
 8019112:	607b      	str	r3, [r7, #4]
 8019114:	f340 8084 	ble.w	8019220 <_scanf_float+0x278>
 8019118:	683b      	ldr	r3, [r7, #0]
 801911a:	3301      	adds	r3, #1
 801911c:	603b      	str	r3, [r7, #0]
 801911e:	e766      	b.n	8018fee <_scanf_float+0x46>
 8019120:	eb1a 0f05 	cmn.w	sl, r5
 8019124:	f47f af70 	bne.w	8019008 <_scanf_float+0x60>
 8019128:	6822      	ldr	r2, [r4, #0]
 801912a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801912e:	6022      	str	r2, [r4, #0]
 8019130:	f806 3b01 	strb.w	r3, [r6], #1
 8019134:	e7e4      	b.n	8019100 <_scanf_float+0x158>
 8019136:	6822      	ldr	r2, [r4, #0]
 8019138:	0610      	lsls	r0, r2, #24
 801913a:	f57f af65 	bpl.w	8019008 <_scanf_float+0x60>
 801913e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019142:	e7f4      	b.n	801912e <_scanf_float+0x186>
 8019144:	f1ba 0f00 	cmp.w	sl, #0
 8019148:	d10e      	bne.n	8019168 <_scanf_float+0x1c0>
 801914a:	f1b9 0f00 	cmp.w	r9, #0
 801914e:	d10e      	bne.n	801916e <_scanf_float+0x1c6>
 8019150:	6822      	ldr	r2, [r4, #0]
 8019152:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019156:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801915a:	d108      	bne.n	801916e <_scanf_float+0x1c6>
 801915c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019160:	6022      	str	r2, [r4, #0]
 8019162:	f04f 0a01 	mov.w	sl, #1
 8019166:	e7e3      	b.n	8019130 <_scanf_float+0x188>
 8019168:	f1ba 0f02 	cmp.w	sl, #2
 801916c:	d055      	beq.n	801921a <_scanf_float+0x272>
 801916e:	2d01      	cmp	r5, #1
 8019170:	d002      	beq.n	8019178 <_scanf_float+0x1d0>
 8019172:	2d04      	cmp	r5, #4
 8019174:	f47f af48 	bne.w	8019008 <_scanf_float+0x60>
 8019178:	3501      	adds	r5, #1
 801917a:	b2ed      	uxtb	r5, r5
 801917c:	e7d8      	b.n	8019130 <_scanf_float+0x188>
 801917e:	f1ba 0f01 	cmp.w	sl, #1
 8019182:	f47f af41 	bne.w	8019008 <_scanf_float+0x60>
 8019186:	f04f 0a02 	mov.w	sl, #2
 801918a:	e7d1      	b.n	8019130 <_scanf_float+0x188>
 801918c:	b97d      	cbnz	r5, 80191ae <_scanf_float+0x206>
 801918e:	f1b9 0f00 	cmp.w	r9, #0
 8019192:	f47f af3c 	bne.w	801900e <_scanf_float+0x66>
 8019196:	6822      	ldr	r2, [r4, #0]
 8019198:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801919c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80191a0:	f47f af39 	bne.w	8019016 <_scanf_float+0x6e>
 80191a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80191a8:	6022      	str	r2, [r4, #0]
 80191aa:	2501      	movs	r5, #1
 80191ac:	e7c0      	b.n	8019130 <_scanf_float+0x188>
 80191ae:	2d03      	cmp	r5, #3
 80191b0:	d0e2      	beq.n	8019178 <_scanf_float+0x1d0>
 80191b2:	2d05      	cmp	r5, #5
 80191b4:	e7de      	b.n	8019174 <_scanf_float+0x1cc>
 80191b6:	2d02      	cmp	r5, #2
 80191b8:	f47f af26 	bne.w	8019008 <_scanf_float+0x60>
 80191bc:	2503      	movs	r5, #3
 80191be:	e7b7      	b.n	8019130 <_scanf_float+0x188>
 80191c0:	2d06      	cmp	r5, #6
 80191c2:	f47f af21 	bne.w	8019008 <_scanf_float+0x60>
 80191c6:	2507      	movs	r5, #7
 80191c8:	e7b2      	b.n	8019130 <_scanf_float+0x188>
 80191ca:	6822      	ldr	r2, [r4, #0]
 80191cc:	0591      	lsls	r1, r2, #22
 80191ce:	f57f af1b 	bpl.w	8019008 <_scanf_float+0x60>
 80191d2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80191d6:	6022      	str	r2, [r4, #0]
 80191d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80191dc:	e7a8      	b.n	8019130 <_scanf_float+0x188>
 80191de:	6822      	ldr	r2, [r4, #0]
 80191e0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80191e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80191e8:	d006      	beq.n	80191f8 <_scanf_float+0x250>
 80191ea:	0550      	lsls	r0, r2, #21
 80191ec:	f57f af0c 	bpl.w	8019008 <_scanf_float+0x60>
 80191f0:	f1b9 0f00 	cmp.w	r9, #0
 80191f4:	f43f af0f 	beq.w	8019016 <_scanf_float+0x6e>
 80191f8:	0591      	lsls	r1, r2, #22
 80191fa:	bf58      	it	pl
 80191fc:	9901      	ldrpl	r1, [sp, #4]
 80191fe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019202:	bf58      	it	pl
 8019204:	eba9 0101 	subpl.w	r1, r9, r1
 8019208:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801920c:	bf58      	it	pl
 801920e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8019212:	6022      	str	r2, [r4, #0]
 8019214:	f04f 0900 	mov.w	r9, #0
 8019218:	e78a      	b.n	8019130 <_scanf_float+0x188>
 801921a:	f04f 0a03 	mov.w	sl, #3
 801921e:	e787      	b.n	8019130 <_scanf_float+0x188>
 8019220:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019224:	4639      	mov	r1, r7
 8019226:	4640      	mov	r0, r8
 8019228:	4798      	blx	r3
 801922a:	2800      	cmp	r0, #0
 801922c:	f43f aedf 	beq.w	8018fee <_scanf_float+0x46>
 8019230:	e6ea      	b.n	8019008 <_scanf_float+0x60>
 8019232:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019236:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801923a:	463a      	mov	r2, r7
 801923c:	4640      	mov	r0, r8
 801923e:	4798      	blx	r3
 8019240:	6923      	ldr	r3, [r4, #16]
 8019242:	3b01      	subs	r3, #1
 8019244:	6123      	str	r3, [r4, #16]
 8019246:	e6ec      	b.n	8019022 <_scanf_float+0x7a>
 8019248:	1e6b      	subs	r3, r5, #1
 801924a:	2b06      	cmp	r3, #6
 801924c:	d825      	bhi.n	801929a <_scanf_float+0x2f2>
 801924e:	2d02      	cmp	r5, #2
 8019250:	d836      	bhi.n	80192c0 <_scanf_float+0x318>
 8019252:	455e      	cmp	r6, fp
 8019254:	f67f aee8 	bls.w	8019028 <_scanf_float+0x80>
 8019258:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801925c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019260:	463a      	mov	r2, r7
 8019262:	4640      	mov	r0, r8
 8019264:	4798      	blx	r3
 8019266:	6923      	ldr	r3, [r4, #16]
 8019268:	3b01      	subs	r3, #1
 801926a:	6123      	str	r3, [r4, #16]
 801926c:	e7f1      	b.n	8019252 <_scanf_float+0x2aa>
 801926e:	9802      	ldr	r0, [sp, #8]
 8019270:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019274:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8019278:	9002      	str	r0, [sp, #8]
 801927a:	463a      	mov	r2, r7
 801927c:	4640      	mov	r0, r8
 801927e:	4798      	blx	r3
 8019280:	6923      	ldr	r3, [r4, #16]
 8019282:	3b01      	subs	r3, #1
 8019284:	6123      	str	r3, [r4, #16]
 8019286:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801928a:	fa5f fa8a 	uxtb.w	sl, sl
 801928e:	f1ba 0f02 	cmp.w	sl, #2
 8019292:	d1ec      	bne.n	801926e <_scanf_float+0x2c6>
 8019294:	3d03      	subs	r5, #3
 8019296:	b2ed      	uxtb	r5, r5
 8019298:	1b76      	subs	r6, r6, r5
 801929a:	6823      	ldr	r3, [r4, #0]
 801929c:	05da      	lsls	r2, r3, #23
 801929e:	d52f      	bpl.n	8019300 <_scanf_float+0x358>
 80192a0:	055b      	lsls	r3, r3, #21
 80192a2:	d510      	bpl.n	80192c6 <_scanf_float+0x31e>
 80192a4:	455e      	cmp	r6, fp
 80192a6:	f67f aebf 	bls.w	8019028 <_scanf_float+0x80>
 80192aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80192ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80192b2:	463a      	mov	r2, r7
 80192b4:	4640      	mov	r0, r8
 80192b6:	4798      	blx	r3
 80192b8:	6923      	ldr	r3, [r4, #16]
 80192ba:	3b01      	subs	r3, #1
 80192bc:	6123      	str	r3, [r4, #16]
 80192be:	e7f1      	b.n	80192a4 <_scanf_float+0x2fc>
 80192c0:	46aa      	mov	sl, r5
 80192c2:	9602      	str	r6, [sp, #8]
 80192c4:	e7df      	b.n	8019286 <_scanf_float+0x2de>
 80192c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80192ca:	6923      	ldr	r3, [r4, #16]
 80192cc:	2965      	cmp	r1, #101	; 0x65
 80192ce:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80192d2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80192d6:	6123      	str	r3, [r4, #16]
 80192d8:	d00c      	beq.n	80192f4 <_scanf_float+0x34c>
 80192da:	2945      	cmp	r1, #69	; 0x45
 80192dc:	d00a      	beq.n	80192f4 <_scanf_float+0x34c>
 80192de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80192e2:	463a      	mov	r2, r7
 80192e4:	4640      	mov	r0, r8
 80192e6:	4798      	blx	r3
 80192e8:	6923      	ldr	r3, [r4, #16]
 80192ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80192ee:	3b01      	subs	r3, #1
 80192f0:	1eb5      	subs	r5, r6, #2
 80192f2:	6123      	str	r3, [r4, #16]
 80192f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80192f8:	463a      	mov	r2, r7
 80192fa:	4640      	mov	r0, r8
 80192fc:	4798      	blx	r3
 80192fe:	462e      	mov	r6, r5
 8019300:	6825      	ldr	r5, [r4, #0]
 8019302:	f015 0510 	ands.w	r5, r5, #16
 8019306:	d158      	bne.n	80193ba <_scanf_float+0x412>
 8019308:	7035      	strb	r5, [r6, #0]
 801930a:	6823      	ldr	r3, [r4, #0]
 801930c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8019310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019314:	d11c      	bne.n	8019350 <_scanf_float+0x3a8>
 8019316:	9b01      	ldr	r3, [sp, #4]
 8019318:	454b      	cmp	r3, r9
 801931a:	eba3 0209 	sub.w	r2, r3, r9
 801931e:	d124      	bne.n	801936a <_scanf_float+0x3c2>
 8019320:	2200      	movs	r2, #0
 8019322:	4659      	mov	r1, fp
 8019324:	4640      	mov	r0, r8
 8019326:	f001 f829 	bl	801a37c <_strtod_r>
 801932a:	9b03      	ldr	r3, [sp, #12]
 801932c:	6821      	ldr	r1, [r4, #0]
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	f011 0f02 	tst.w	r1, #2
 8019334:	ec57 6b10 	vmov	r6, r7, d0
 8019338:	f103 0204 	add.w	r2, r3, #4
 801933c:	d020      	beq.n	8019380 <_scanf_float+0x3d8>
 801933e:	9903      	ldr	r1, [sp, #12]
 8019340:	600a      	str	r2, [r1, #0]
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	e9c3 6700 	strd	r6, r7, [r3]
 8019348:	68e3      	ldr	r3, [r4, #12]
 801934a:	3301      	adds	r3, #1
 801934c:	60e3      	str	r3, [r4, #12]
 801934e:	e66c      	b.n	801902a <_scanf_float+0x82>
 8019350:	9b04      	ldr	r3, [sp, #16]
 8019352:	2b00      	cmp	r3, #0
 8019354:	d0e4      	beq.n	8019320 <_scanf_float+0x378>
 8019356:	9905      	ldr	r1, [sp, #20]
 8019358:	230a      	movs	r3, #10
 801935a:	462a      	mov	r2, r5
 801935c:	3101      	adds	r1, #1
 801935e:	4640      	mov	r0, r8
 8019360:	f001 f896 	bl	801a490 <_strtol_r>
 8019364:	9b04      	ldr	r3, [sp, #16]
 8019366:	9e05      	ldr	r6, [sp, #20]
 8019368:	1ac2      	subs	r2, r0, r3
 801936a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801936e:	429e      	cmp	r6, r3
 8019370:	bf28      	it	cs
 8019372:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8019376:	4912      	ldr	r1, [pc, #72]	; (80193c0 <_scanf_float+0x418>)
 8019378:	4630      	mov	r0, r6
 801937a:	f000 f8fd 	bl	8019578 <siprintf>
 801937e:	e7cf      	b.n	8019320 <_scanf_float+0x378>
 8019380:	f011 0f04 	tst.w	r1, #4
 8019384:	9903      	ldr	r1, [sp, #12]
 8019386:	600a      	str	r2, [r1, #0]
 8019388:	d1db      	bne.n	8019342 <_scanf_float+0x39a>
 801938a:	f8d3 8000 	ldr.w	r8, [r3]
 801938e:	ee10 2a10 	vmov	r2, s0
 8019392:	ee10 0a10 	vmov	r0, s0
 8019396:	463b      	mov	r3, r7
 8019398:	4639      	mov	r1, r7
 801939a:	f7e7 fbd7 	bl	8000b4c <__aeabi_dcmpun>
 801939e:	b128      	cbz	r0, 80193ac <_scanf_float+0x404>
 80193a0:	4808      	ldr	r0, [pc, #32]	; (80193c4 <_scanf_float+0x41c>)
 80193a2:	f000 f8af 	bl	8019504 <nanf>
 80193a6:	ed88 0a00 	vstr	s0, [r8]
 80193aa:	e7cd      	b.n	8019348 <_scanf_float+0x3a0>
 80193ac:	4630      	mov	r0, r6
 80193ae:	4639      	mov	r1, r7
 80193b0:	f7e7 fc02 	bl	8000bb8 <__aeabi_d2f>
 80193b4:	f8c8 0000 	str.w	r0, [r8]
 80193b8:	e7c6      	b.n	8019348 <_scanf_float+0x3a0>
 80193ba:	2500      	movs	r5, #0
 80193bc:	e635      	b.n	801902a <_scanf_float+0x82>
 80193be:	bf00      	nop
 80193c0:	0801eb90 	.word	0x0801eb90
 80193c4:	0801eca3 	.word	0x0801eca3

080193c8 <iprintf>:
 80193c8:	b40f      	push	{r0, r1, r2, r3}
 80193ca:	4b0a      	ldr	r3, [pc, #40]	; (80193f4 <iprintf+0x2c>)
 80193cc:	b513      	push	{r0, r1, r4, lr}
 80193ce:	681c      	ldr	r4, [r3, #0]
 80193d0:	b124      	cbz	r4, 80193dc <iprintf+0x14>
 80193d2:	69a3      	ldr	r3, [r4, #24]
 80193d4:	b913      	cbnz	r3, 80193dc <iprintf+0x14>
 80193d6:	4620      	mov	r0, r4
 80193d8:	f001 fb44 	bl	801aa64 <__sinit>
 80193dc:	ab05      	add	r3, sp, #20
 80193de:	9a04      	ldr	r2, [sp, #16]
 80193e0:	68a1      	ldr	r1, [r4, #8]
 80193e2:	9301      	str	r3, [sp, #4]
 80193e4:	4620      	mov	r0, r4
 80193e6:	f003 f827 	bl	801c438 <_vfiprintf_r>
 80193ea:	b002      	add	sp, #8
 80193ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193f0:	b004      	add	sp, #16
 80193f2:	4770      	bx	lr
 80193f4:	20000190 	.word	0x20000190

080193f8 <srand>:
 80193f8:	b538      	push	{r3, r4, r5, lr}
 80193fa:	4b10      	ldr	r3, [pc, #64]	; (801943c <srand+0x44>)
 80193fc:	681d      	ldr	r5, [r3, #0]
 80193fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8019400:	4604      	mov	r4, r0
 8019402:	b9b3      	cbnz	r3, 8019432 <srand+0x3a>
 8019404:	2018      	movs	r0, #24
 8019406:	f7ff fcd5 	bl	8018db4 <malloc>
 801940a:	4602      	mov	r2, r0
 801940c:	63a8      	str	r0, [r5, #56]	; 0x38
 801940e:	b920      	cbnz	r0, 801941a <srand+0x22>
 8019410:	4b0b      	ldr	r3, [pc, #44]	; (8019440 <srand+0x48>)
 8019412:	480c      	ldr	r0, [pc, #48]	; (8019444 <srand+0x4c>)
 8019414:	2142      	movs	r1, #66	; 0x42
 8019416:	f001 f9d1 	bl	801a7bc <__assert_func>
 801941a:	490b      	ldr	r1, [pc, #44]	; (8019448 <srand+0x50>)
 801941c:	4b0b      	ldr	r3, [pc, #44]	; (801944c <srand+0x54>)
 801941e:	e9c0 1300 	strd	r1, r3, [r0]
 8019422:	4b0b      	ldr	r3, [pc, #44]	; (8019450 <srand+0x58>)
 8019424:	6083      	str	r3, [r0, #8]
 8019426:	230b      	movs	r3, #11
 8019428:	8183      	strh	r3, [r0, #12]
 801942a:	2100      	movs	r1, #0
 801942c:	2001      	movs	r0, #1
 801942e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019432:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8019434:	2200      	movs	r2, #0
 8019436:	611c      	str	r4, [r3, #16]
 8019438:	615a      	str	r2, [r3, #20]
 801943a:	bd38      	pop	{r3, r4, r5, pc}
 801943c:	20000190 	.word	0x20000190
 8019440:	0801eb95 	.word	0x0801eb95
 8019444:	0801ebac 	.word	0x0801ebac
 8019448:	abcd330e 	.word	0xabcd330e
 801944c:	e66d1234 	.word	0xe66d1234
 8019450:	0005deec 	.word	0x0005deec

08019454 <rand>:
 8019454:	4b17      	ldr	r3, [pc, #92]	; (80194b4 <rand+0x60>)
 8019456:	b510      	push	{r4, lr}
 8019458:	681c      	ldr	r4, [r3, #0]
 801945a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801945c:	b9b3      	cbnz	r3, 801948c <rand+0x38>
 801945e:	2018      	movs	r0, #24
 8019460:	f7ff fca8 	bl	8018db4 <malloc>
 8019464:	63a0      	str	r0, [r4, #56]	; 0x38
 8019466:	b928      	cbnz	r0, 8019474 <rand+0x20>
 8019468:	4602      	mov	r2, r0
 801946a:	4b13      	ldr	r3, [pc, #76]	; (80194b8 <rand+0x64>)
 801946c:	4813      	ldr	r0, [pc, #76]	; (80194bc <rand+0x68>)
 801946e:	214e      	movs	r1, #78	; 0x4e
 8019470:	f001 f9a4 	bl	801a7bc <__assert_func>
 8019474:	4a12      	ldr	r2, [pc, #72]	; (80194c0 <rand+0x6c>)
 8019476:	4b13      	ldr	r3, [pc, #76]	; (80194c4 <rand+0x70>)
 8019478:	e9c0 2300 	strd	r2, r3, [r0]
 801947c:	4b12      	ldr	r3, [pc, #72]	; (80194c8 <rand+0x74>)
 801947e:	6083      	str	r3, [r0, #8]
 8019480:	230b      	movs	r3, #11
 8019482:	8183      	strh	r3, [r0, #12]
 8019484:	2201      	movs	r2, #1
 8019486:	2300      	movs	r3, #0
 8019488:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801948c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801948e:	480f      	ldr	r0, [pc, #60]	; (80194cc <rand+0x78>)
 8019490:	690a      	ldr	r2, [r1, #16]
 8019492:	694b      	ldr	r3, [r1, #20]
 8019494:	4c0e      	ldr	r4, [pc, #56]	; (80194d0 <rand+0x7c>)
 8019496:	4350      	muls	r0, r2
 8019498:	fb04 0003 	mla	r0, r4, r3, r0
 801949c:	fba2 3404 	umull	r3, r4, r2, r4
 80194a0:	1c5a      	adds	r2, r3, #1
 80194a2:	4404      	add	r4, r0
 80194a4:	f144 0000 	adc.w	r0, r4, #0
 80194a8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80194ac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80194b0:	bd10      	pop	{r4, pc}
 80194b2:	bf00      	nop
 80194b4:	20000190 	.word	0x20000190
 80194b8:	0801eb95 	.word	0x0801eb95
 80194bc:	0801ebac 	.word	0x0801ebac
 80194c0:	abcd330e 	.word	0xabcd330e
 80194c4:	e66d1234 	.word	0xe66d1234
 80194c8:	0005deec 	.word	0x0005deec
 80194cc:	5851f42d 	.word	0x5851f42d
 80194d0:	4c957f2d 	.word	0x4c957f2d

080194d4 <realloc>:
 80194d4:	4b02      	ldr	r3, [pc, #8]	; (80194e0 <realloc+0xc>)
 80194d6:	460a      	mov	r2, r1
 80194d8:	4601      	mov	r1, r0
 80194da:	6818      	ldr	r0, [r3, #0]
 80194dc:	f002 bc2f 	b.w	801bd3e <_realloc_r>
 80194e0:	20000190 	.word	0x20000190

080194e4 <_sbrk_r>:
 80194e4:	b538      	push	{r3, r4, r5, lr}
 80194e6:	4d06      	ldr	r5, [pc, #24]	; (8019500 <_sbrk_r+0x1c>)
 80194e8:	2300      	movs	r3, #0
 80194ea:	4604      	mov	r4, r0
 80194ec:	4608      	mov	r0, r1
 80194ee:	602b      	str	r3, [r5, #0]
 80194f0:	f7e9 ff50 	bl	8003394 <_sbrk>
 80194f4:	1c43      	adds	r3, r0, #1
 80194f6:	d102      	bne.n	80194fe <_sbrk_r+0x1a>
 80194f8:	682b      	ldr	r3, [r5, #0]
 80194fa:	b103      	cbz	r3, 80194fe <_sbrk_r+0x1a>
 80194fc:	6023      	str	r3, [r4, #0]
 80194fe:	bd38      	pop	{r3, r4, r5, pc}
 8019500:	2001600c 	.word	0x2001600c

08019504 <nanf>:
 8019504:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801950c <nanf+0x8>
 8019508:	4770      	bx	lr
 801950a:	bf00      	nop
 801950c:	7fc00000 	.word	0x7fc00000

08019510 <sniprintf>:
 8019510:	b40c      	push	{r2, r3}
 8019512:	b530      	push	{r4, r5, lr}
 8019514:	4b17      	ldr	r3, [pc, #92]	; (8019574 <sniprintf+0x64>)
 8019516:	1e0c      	subs	r4, r1, #0
 8019518:	681d      	ldr	r5, [r3, #0]
 801951a:	b09d      	sub	sp, #116	; 0x74
 801951c:	da08      	bge.n	8019530 <sniprintf+0x20>
 801951e:	238b      	movs	r3, #139	; 0x8b
 8019520:	602b      	str	r3, [r5, #0]
 8019522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019526:	b01d      	add	sp, #116	; 0x74
 8019528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801952c:	b002      	add	sp, #8
 801952e:	4770      	bx	lr
 8019530:	f44f 7302 	mov.w	r3, #520	; 0x208
 8019534:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019538:	bf14      	ite	ne
 801953a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801953e:	4623      	moveq	r3, r4
 8019540:	9304      	str	r3, [sp, #16]
 8019542:	9307      	str	r3, [sp, #28]
 8019544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019548:	9002      	str	r0, [sp, #8]
 801954a:	9006      	str	r0, [sp, #24]
 801954c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019550:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019552:	ab21      	add	r3, sp, #132	; 0x84
 8019554:	a902      	add	r1, sp, #8
 8019556:	4628      	mov	r0, r5
 8019558:	9301      	str	r3, [sp, #4]
 801955a:	f002 fc71 	bl	801be40 <_svfiprintf_r>
 801955e:	1c43      	adds	r3, r0, #1
 8019560:	bfbc      	itt	lt
 8019562:	238b      	movlt	r3, #139	; 0x8b
 8019564:	602b      	strlt	r3, [r5, #0]
 8019566:	2c00      	cmp	r4, #0
 8019568:	d0dd      	beq.n	8019526 <sniprintf+0x16>
 801956a:	9b02      	ldr	r3, [sp, #8]
 801956c:	2200      	movs	r2, #0
 801956e:	701a      	strb	r2, [r3, #0]
 8019570:	e7d9      	b.n	8019526 <sniprintf+0x16>
 8019572:	bf00      	nop
 8019574:	20000190 	.word	0x20000190

08019578 <siprintf>:
 8019578:	b40e      	push	{r1, r2, r3}
 801957a:	b500      	push	{lr}
 801957c:	b09c      	sub	sp, #112	; 0x70
 801957e:	ab1d      	add	r3, sp, #116	; 0x74
 8019580:	9002      	str	r0, [sp, #8]
 8019582:	9006      	str	r0, [sp, #24]
 8019584:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019588:	4809      	ldr	r0, [pc, #36]	; (80195b0 <siprintf+0x38>)
 801958a:	9107      	str	r1, [sp, #28]
 801958c:	9104      	str	r1, [sp, #16]
 801958e:	4909      	ldr	r1, [pc, #36]	; (80195b4 <siprintf+0x3c>)
 8019590:	f853 2b04 	ldr.w	r2, [r3], #4
 8019594:	9105      	str	r1, [sp, #20]
 8019596:	6800      	ldr	r0, [r0, #0]
 8019598:	9301      	str	r3, [sp, #4]
 801959a:	a902      	add	r1, sp, #8
 801959c:	f002 fc50 	bl	801be40 <_svfiprintf_r>
 80195a0:	9b02      	ldr	r3, [sp, #8]
 80195a2:	2200      	movs	r2, #0
 80195a4:	701a      	strb	r2, [r3, #0]
 80195a6:	b01c      	add	sp, #112	; 0x70
 80195a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80195ac:	b003      	add	sp, #12
 80195ae:	4770      	bx	lr
 80195b0:	20000190 	.word	0x20000190
 80195b4:	ffff0208 	.word	0xffff0208

080195b8 <siscanf>:
 80195b8:	b40e      	push	{r1, r2, r3}
 80195ba:	b510      	push	{r4, lr}
 80195bc:	b09f      	sub	sp, #124	; 0x7c
 80195be:	ac21      	add	r4, sp, #132	; 0x84
 80195c0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80195c4:	f854 2b04 	ldr.w	r2, [r4], #4
 80195c8:	9201      	str	r2, [sp, #4]
 80195ca:	f8ad 101c 	strh.w	r1, [sp, #28]
 80195ce:	9004      	str	r0, [sp, #16]
 80195d0:	9008      	str	r0, [sp, #32]
 80195d2:	f7e6 fe07 	bl	80001e4 <strlen>
 80195d6:	4b0c      	ldr	r3, [pc, #48]	; (8019608 <siscanf+0x50>)
 80195d8:	9005      	str	r0, [sp, #20]
 80195da:	9009      	str	r0, [sp, #36]	; 0x24
 80195dc:	930d      	str	r3, [sp, #52]	; 0x34
 80195de:	480b      	ldr	r0, [pc, #44]	; (801960c <siscanf+0x54>)
 80195e0:	9a01      	ldr	r2, [sp, #4]
 80195e2:	6800      	ldr	r0, [r0, #0]
 80195e4:	9403      	str	r4, [sp, #12]
 80195e6:	2300      	movs	r3, #0
 80195e8:	9311      	str	r3, [sp, #68]	; 0x44
 80195ea:	9316      	str	r3, [sp, #88]	; 0x58
 80195ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80195f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80195f4:	a904      	add	r1, sp, #16
 80195f6:	4623      	mov	r3, r4
 80195f8:	f002 fd7c 	bl	801c0f4 <__ssvfiscanf_r>
 80195fc:	b01f      	add	sp, #124	; 0x7c
 80195fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019602:	b003      	add	sp, #12
 8019604:	4770      	bx	lr
 8019606:	bf00      	nop
 8019608:	08019633 	.word	0x08019633
 801960c:	20000190 	.word	0x20000190

08019610 <__sread>:
 8019610:	b510      	push	{r4, lr}
 8019612:	460c      	mov	r4, r1
 8019614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019618:	f003 fb1e 	bl	801cc58 <_read_r>
 801961c:	2800      	cmp	r0, #0
 801961e:	bfab      	itete	ge
 8019620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019622:	89a3      	ldrhlt	r3, [r4, #12]
 8019624:	181b      	addge	r3, r3, r0
 8019626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801962a:	bfac      	ite	ge
 801962c:	6563      	strge	r3, [r4, #84]	; 0x54
 801962e:	81a3      	strhlt	r3, [r4, #12]
 8019630:	bd10      	pop	{r4, pc}

08019632 <__seofread>:
 8019632:	2000      	movs	r0, #0
 8019634:	4770      	bx	lr

08019636 <__swrite>:
 8019636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801963a:	461f      	mov	r7, r3
 801963c:	898b      	ldrh	r3, [r1, #12]
 801963e:	05db      	lsls	r3, r3, #23
 8019640:	4605      	mov	r5, r0
 8019642:	460c      	mov	r4, r1
 8019644:	4616      	mov	r6, r2
 8019646:	d505      	bpl.n	8019654 <__swrite+0x1e>
 8019648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801964c:	2302      	movs	r3, #2
 801964e:	2200      	movs	r2, #0
 8019650:	f001 fe26 	bl	801b2a0 <_lseek_r>
 8019654:	89a3      	ldrh	r3, [r4, #12]
 8019656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801965a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801965e:	81a3      	strh	r3, [r4, #12]
 8019660:	4632      	mov	r2, r6
 8019662:	463b      	mov	r3, r7
 8019664:	4628      	mov	r0, r5
 8019666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801966a:	f001 b827 	b.w	801a6bc <_write_r>

0801966e <__sseek>:
 801966e:	b510      	push	{r4, lr}
 8019670:	460c      	mov	r4, r1
 8019672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019676:	f001 fe13 	bl	801b2a0 <_lseek_r>
 801967a:	1c43      	adds	r3, r0, #1
 801967c:	89a3      	ldrh	r3, [r4, #12]
 801967e:	bf15      	itete	ne
 8019680:	6560      	strne	r0, [r4, #84]	; 0x54
 8019682:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019686:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801968a:	81a3      	strheq	r3, [r4, #12]
 801968c:	bf18      	it	ne
 801968e:	81a3      	strhne	r3, [r4, #12]
 8019690:	bd10      	pop	{r4, pc}

08019692 <__sclose>:
 8019692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019696:	f001 b8af 	b.w	801a7f8 <_close_r>

0801969a <strchr>:
 801969a:	b2c9      	uxtb	r1, r1
 801969c:	4603      	mov	r3, r0
 801969e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80196a2:	b11a      	cbz	r2, 80196ac <strchr+0x12>
 80196a4:	428a      	cmp	r2, r1
 80196a6:	d1f9      	bne.n	801969c <strchr+0x2>
 80196a8:	4618      	mov	r0, r3
 80196aa:	4770      	bx	lr
 80196ac:	2900      	cmp	r1, #0
 80196ae:	bf18      	it	ne
 80196b0:	2300      	movne	r3, #0
 80196b2:	e7f9      	b.n	80196a8 <strchr+0xe>

080196b4 <strcpy>:
 80196b4:	4603      	mov	r3, r0
 80196b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80196ba:	f803 2b01 	strb.w	r2, [r3], #1
 80196be:	2a00      	cmp	r2, #0
 80196c0:	d1f9      	bne.n	80196b6 <strcpy+0x2>
 80196c2:	4770      	bx	lr

080196c4 <strncmp>:
 80196c4:	b510      	push	{r4, lr}
 80196c6:	b16a      	cbz	r2, 80196e4 <strncmp+0x20>
 80196c8:	3901      	subs	r1, #1
 80196ca:	1884      	adds	r4, r0, r2
 80196cc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80196d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80196d4:	4293      	cmp	r3, r2
 80196d6:	d103      	bne.n	80196e0 <strncmp+0x1c>
 80196d8:	42a0      	cmp	r0, r4
 80196da:	d001      	beq.n	80196e0 <strncmp+0x1c>
 80196dc:	2b00      	cmp	r3, #0
 80196de:	d1f5      	bne.n	80196cc <strncmp+0x8>
 80196e0:	1a98      	subs	r0, r3, r2
 80196e2:	bd10      	pop	{r4, pc}
 80196e4:	4610      	mov	r0, r2
 80196e6:	e7fc      	b.n	80196e2 <strncmp+0x1e>

080196e8 <strnlen>:
 80196e8:	b510      	push	{r4, lr}
 80196ea:	4602      	mov	r2, r0
 80196ec:	4401      	add	r1, r0
 80196ee:	428a      	cmp	r2, r1
 80196f0:	4613      	mov	r3, r2
 80196f2:	d101      	bne.n	80196f8 <strnlen+0x10>
 80196f4:	1a18      	subs	r0, r3, r0
 80196f6:	bd10      	pop	{r4, pc}
 80196f8:	781c      	ldrb	r4, [r3, #0]
 80196fa:	3201      	adds	r2, #1
 80196fc:	2c00      	cmp	r4, #0
 80196fe:	d1f6      	bne.n	80196ee <strnlen+0x6>
 8019700:	e7f8      	b.n	80196f4 <strnlen+0xc>

08019702 <strstr>:
 8019702:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019704:	780c      	ldrb	r4, [r1, #0]
 8019706:	b164      	cbz	r4, 8019722 <strstr+0x20>
 8019708:	4603      	mov	r3, r0
 801970a:	781a      	ldrb	r2, [r3, #0]
 801970c:	4618      	mov	r0, r3
 801970e:	1c5e      	adds	r6, r3, #1
 8019710:	b90a      	cbnz	r2, 8019716 <strstr+0x14>
 8019712:	4610      	mov	r0, r2
 8019714:	e005      	b.n	8019722 <strstr+0x20>
 8019716:	4294      	cmp	r4, r2
 8019718:	d108      	bne.n	801972c <strstr+0x2a>
 801971a:	460d      	mov	r5, r1
 801971c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8019720:	b902      	cbnz	r2, 8019724 <strstr+0x22>
 8019722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019724:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8019728:	4297      	cmp	r7, r2
 801972a:	d0f7      	beq.n	801971c <strstr+0x1a>
 801972c:	4633      	mov	r3, r6
 801972e:	e7ec      	b.n	801970a <strstr+0x8>

08019730 <sulp>:
 8019730:	b570      	push	{r4, r5, r6, lr}
 8019732:	4604      	mov	r4, r0
 8019734:	460d      	mov	r5, r1
 8019736:	ec45 4b10 	vmov	d0, r4, r5
 801973a:	4616      	mov	r6, r2
 801973c:	f002 f9b0 	bl	801baa0 <__ulp>
 8019740:	ec51 0b10 	vmov	r0, r1, d0
 8019744:	b17e      	cbz	r6, 8019766 <sulp+0x36>
 8019746:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801974a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801974e:	2b00      	cmp	r3, #0
 8019750:	dd09      	ble.n	8019766 <sulp+0x36>
 8019752:	051b      	lsls	r3, r3, #20
 8019754:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8019758:	2400      	movs	r4, #0
 801975a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801975e:	4622      	mov	r2, r4
 8019760:	462b      	mov	r3, r5
 8019762:	f7e6 ff59 	bl	8000618 <__aeabi_dmul>
 8019766:	bd70      	pop	{r4, r5, r6, pc}

08019768 <_strtod_l>:
 8019768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801976c:	b0a3      	sub	sp, #140	; 0x8c
 801976e:	461f      	mov	r7, r3
 8019770:	2300      	movs	r3, #0
 8019772:	931e      	str	r3, [sp, #120]	; 0x78
 8019774:	4ba4      	ldr	r3, [pc, #656]	; (8019a08 <_strtod_l+0x2a0>)
 8019776:	9219      	str	r2, [sp, #100]	; 0x64
 8019778:	681b      	ldr	r3, [r3, #0]
 801977a:	9307      	str	r3, [sp, #28]
 801977c:	4604      	mov	r4, r0
 801977e:	4618      	mov	r0, r3
 8019780:	4688      	mov	r8, r1
 8019782:	f7e6 fd2f 	bl	80001e4 <strlen>
 8019786:	f04f 0a00 	mov.w	sl, #0
 801978a:	4605      	mov	r5, r0
 801978c:	f04f 0b00 	mov.w	fp, #0
 8019790:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8019794:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019796:	781a      	ldrb	r2, [r3, #0]
 8019798:	2a2b      	cmp	r2, #43	; 0x2b
 801979a:	d04c      	beq.n	8019836 <_strtod_l+0xce>
 801979c:	d839      	bhi.n	8019812 <_strtod_l+0xaa>
 801979e:	2a0d      	cmp	r2, #13
 80197a0:	d832      	bhi.n	8019808 <_strtod_l+0xa0>
 80197a2:	2a08      	cmp	r2, #8
 80197a4:	d832      	bhi.n	801980c <_strtod_l+0xa4>
 80197a6:	2a00      	cmp	r2, #0
 80197a8:	d03c      	beq.n	8019824 <_strtod_l+0xbc>
 80197aa:	2300      	movs	r3, #0
 80197ac:	930e      	str	r3, [sp, #56]	; 0x38
 80197ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80197b0:	7833      	ldrb	r3, [r6, #0]
 80197b2:	2b30      	cmp	r3, #48	; 0x30
 80197b4:	f040 80b4 	bne.w	8019920 <_strtod_l+0x1b8>
 80197b8:	7873      	ldrb	r3, [r6, #1]
 80197ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80197be:	2b58      	cmp	r3, #88	; 0x58
 80197c0:	d16c      	bne.n	801989c <_strtod_l+0x134>
 80197c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80197c4:	9301      	str	r3, [sp, #4]
 80197c6:	ab1e      	add	r3, sp, #120	; 0x78
 80197c8:	9702      	str	r7, [sp, #8]
 80197ca:	9300      	str	r3, [sp, #0]
 80197cc:	4a8f      	ldr	r2, [pc, #572]	; (8019a0c <_strtod_l+0x2a4>)
 80197ce:	ab1f      	add	r3, sp, #124	; 0x7c
 80197d0:	a91d      	add	r1, sp, #116	; 0x74
 80197d2:	4620      	mov	r0, r4
 80197d4:	f001 fa5c 	bl	801ac90 <__gethex>
 80197d8:	f010 0707 	ands.w	r7, r0, #7
 80197dc:	4605      	mov	r5, r0
 80197de:	d005      	beq.n	80197ec <_strtod_l+0x84>
 80197e0:	2f06      	cmp	r7, #6
 80197e2:	d12a      	bne.n	801983a <_strtod_l+0xd2>
 80197e4:	3601      	adds	r6, #1
 80197e6:	2300      	movs	r3, #0
 80197e8:	961d      	str	r6, [sp, #116]	; 0x74
 80197ea:	930e      	str	r3, [sp, #56]	; 0x38
 80197ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	f040 8596 	bne.w	801a320 <_strtod_l+0xbb8>
 80197f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80197f6:	b1db      	cbz	r3, 8019830 <_strtod_l+0xc8>
 80197f8:	4652      	mov	r2, sl
 80197fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80197fe:	ec43 2b10 	vmov	d0, r2, r3
 8019802:	b023      	add	sp, #140	; 0x8c
 8019804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019808:	2a20      	cmp	r2, #32
 801980a:	d1ce      	bne.n	80197aa <_strtod_l+0x42>
 801980c:	3301      	adds	r3, #1
 801980e:	931d      	str	r3, [sp, #116]	; 0x74
 8019810:	e7c0      	b.n	8019794 <_strtod_l+0x2c>
 8019812:	2a2d      	cmp	r2, #45	; 0x2d
 8019814:	d1c9      	bne.n	80197aa <_strtod_l+0x42>
 8019816:	2201      	movs	r2, #1
 8019818:	920e      	str	r2, [sp, #56]	; 0x38
 801981a:	1c5a      	adds	r2, r3, #1
 801981c:	921d      	str	r2, [sp, #116]	; 0x74
 801981e:	785b      	ldrb	r3, [r3, #1]
 8019820:	2b00      	cmp	r3, #0
 8019822:	d1c4      	bne.n	80197ae <_strtod_l+0x46>
 8019824:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019826:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801982a:	2b00      	cmp	r3, #0
 801982c:	f040 8576 	bne.w	801a31c <_strtod_l+0xbb4>
 8019830:	4652      	mov	r2, sl
 8019832:	465b      	mov	r3, fp
 8019834:	e7e3      	b.n	80197fe <_strtod_l+0x96>
 8019836:	2200      	movs	r2, #0
 8019838:	e7ee      	b.n	8019818 <_strtod_l+0xb0>
 801983a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801983c:	b13a      	cbz	r2, 801984e <_strtod_l+0xe6>
 801983e:	2135      	movs	r1, #53	; 0x35
 8019840:	a820      	add	r0, sp, #128	; 0x80
 8019842:	f002 fa38 	bl	801bcb6 <__copybits>
 8019846:	991e      	ldr	r1, [sp, #120]	; 0x78
 8019848:	4620      	mov	r0, r4
 801984a:	f001 fdfd 	bl	801b448 <_Bfree>
 801984e:	3f01      	subs	r7, #1
 8019850:	2f05      	cmp	r7, #5
 8019852:	d807      	bhi.n	8019864 <_strtod_l+0xfc>
 8019854:	e8df f007 	tbb	[pc, r7]
 8019858:	1d180b0e 	.word	0x1d180b0e
 801985c:	030e      	.short	0x030e
 801985e:	f04f 0b00 	mov.w	fp, #0
 8019862:	46da      	mov	sl, fp
 8019864:	0728      	lsls	r0, r5, #28
 8019866:	d5c1      	bpl.n	80197ec <_strtod_l+0x84>
 8019868:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801986c:	e7be      	b.n	80197ec <_strtod_l+0x84>
 801986e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8019872:	e7f7      	b.n	8019864 <_strtod_l+0xfc>
 8019874:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8019878:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801987a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801987e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019882:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8019886:	e7ed      	b.n	8019864 <_strtod_l+0xfc>
 8019888:	f8df b184 	ldr.w	fp, [pc, #388]	; 8019a10 <_strtod_l+0x2a8>
 801988c:	f04f 0a00 	mov.w	sl, #0
 8019890:	e7e8      	b.n	8019864 <_strtod_l+0xfc>
 8019892:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8019896:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801989a:	e7e3      	b.n	8019864 <_strtod_l+0xfc>
 801989c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801989e:	1c5a      	adds	r2, r3, #1
 80198a0:	921d      	str	r2, [sp, #116]	; 0x74
 80198a2:	785b      	ldrb	r3, [r3, #1]
 80198a4:	2b30      	cmp	r3, #48	; 0x30
 80198a6:	d0f9      	beq.n	801989c <_strtod_l+0x134>
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d09f      	beq.n	80197ec <_strtod_l+0x84>
 80198ac:	2301      	movs	r3, #1
 80198ae:	f04f 0900 	mov.w	r9, #0
 80198b2:	9304      	str	r3, [sp, #16]
 80198b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80198b6:	930a      	str	r3, [sp, #40]	; 0x28
 80198b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80198bc:	464f      	mov	r7, r9
 80198be:	220a      	movs	r2, #10
 80198c0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80198c2:	7806      	ldrb	r6, [r0, #0]
 80198c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80198c8:	b2d9      	uxtb	r1, r3
 80198ca:	2909      	cmp	r1, #9
 80198cc:	d92a      	bls.n	8019924 <_strtod_l+0x1bc>
 80198ce:	9907      	ldr	r1, [sp, #28]
 80198d0:	462a      	mov	r2, r5
 80198d2:	f7ff fef7 	bl	80196c4 <strncmp>
 80198d6:	b398      	cbz	r0, 8019940 <_strtod_l+0x1d8>
 80198d8:	2000      	movs	r0, #0
 80198da:	4633      	mov	r3, r6
 80198dc:	463d      	mov	r5, r7
 80198de:	9007      	str	r0, [sp, #28]
 80198e0:	4602      	mov	r2, r0
 80198e2:	2b65      	cmp	r3, #101	; 0x65
 80198e4:	d001      	beq.n	80198ea <_strtod_l+0x182>
 80198e6:	2b45      	cmp	r3, #69	; 0x45
 80198e8:	d118      	bne.n	801991c <_strtod_l+0x1b4>
 80198ea:	b91d      	cbnz	r5, 80198f4 <_strtod_l+0x18c>
 80198ec:	9b04      	ldr	r3, [sp, #16]
 80198ee:	4303      	orrs	r3, r0
 80198f0:	d098      	beq.n	8019824 <_strtod_l+0xbc>
 80198f2:	2500      	movs	r5, #0
 80198f4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80198f8:	f108 0301 	add.w	r3, r8, #1
 80198fc:	931d      	str	r3, [sp, #116]	; 0x74
 80198fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8019902:	2b2b      	cmp	r3, #43	; 0x2b
 8019904:	d075      	beq.n	80199f2 <_strtod_l+0x28a>
 8019906:	2b2d      	cmp	r3, #45	; 0x2d
 8019908:	d07b      	beq.n	8019a02 <_strtod_l+0x29a>
 801990a:	f04f 0c00 	mov.w	ip, #0
 801990e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8019912:	2909      	cmp	r1, #9
 8019914:	f240 8082 	bls.w	8019a1c <_strtod_l+0x2b4>
 8019918:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801991c:	2600      	movs	r6, #0
 801991e:	e09d      	b.n	8019a5c <_strtod_l+0x2f4>
 8019920:	2300      	movs	r3, #0
 8019922:	e7c4      	b.n	80198ae <_strtod_l+0x146>
 8019924:	2f08      	cmp	r7, #8
 8019926:	bfd8      	it	le
 8019928:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801992a:	f100 0001 	add.w	r0, r0, #1
 801992e:	bfda      	itte	le
 8019930:	fb02 3301 	mlale	r3, r2, r1, r3
 8019934:	9309      	strle	r3, [sp, #36]	; 0x24
 8019936:	fb02 3909 	mlagt	r9, r2, r9, r3
 801993a:	3701      	adds	r7, #1
 801993c:	901d      	str	r0, [sp, #116]	; 0x74
 801993e:	e7bf      	b.n	80198c0 <_strtod_l+0x158>
 8019940:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019942:	195a      	adds	r2, r3, r5
 8019944:	921d      	str	r2, [sp, #116]	; 0x74
 8019946:	5d5b      	ldrb	r3, [r3, r5]
 8019948:	2f00      	cmp	r7, #0
 801994a:	d037      	beq.n	80199bc <_strtod_l+0x254>
 801994c:	9007      	str	r0, [sp, #28]
 801994e:	463d      	mov	r5, r7
 8019950:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8019954:	2a09      	cmp	r2, #9
 8019956:	d912      	bls.n	801997e <_strtod_l+0x216>
 8019958:	2201      	movs	r2, #1
 801995a:	e7c2      	b.n	80198e2 <_strtod_l+0x17a>
 801995c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801995e:	1c5a      	adds	r2, r3, #1
 8019960:	921d      	str	r2, [sp, #116]	; 0x74
 8019962:	785b      	ldrb	r3, [r3, #1]
 8019964:	3001      	adds	r0, #1
 8019966:	2b30      	cmp	r3, #48	; 0x30
 8019968:	d0f8      	beq.n	801995c <_strtod_l+0x1f4>
 801996a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801996e:	2a08      	cmp	r2, #8
 8019970:	f200 84db 	bhi.w	801a32a <_strtod_l+0xbc2>
 8019974:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019976:	9007      	str	r0, [sp, #28]
 8019978:	2000      	movs	r0, #0
 801997a:	920a      	str	r2, [sp, #40]	; 0x28
 801997c:	4605      	mov	r5, r0
 801997e:	3b30      	subs	r3, #48	; 0x30
 8019980:	f100 0201 	add.w	r2, r0, #1
 8019984:	d014      	beq.n	80199b0 <_strtod_l+0x248>
 8019986:	9907      	ldr	r1, [sp, #28]
 8019988:	4411      	add	r1, r2
 801998a:	9107      	str	r1, [sp, #28]
 801998c:	462a      	mov	r2, r5
 801998e:	eb00 0e05 	add.w	lr, r0, r5
 8019992:	210a      	movs	r1, #10
 8019994:	4572      	cmp	r2, lr
 8019996:	d113      	bne.n	80199c0 <_strtod_l+0x258>
 8019998:	182a      	adds	r2, r5, r0
 801999a:	2a08      	cmp	r2, #8
 801999c:	f105 0501 	add.w	r5, r5, #1
 80199a0:	4405      	add	r5, r0
 80199a2:	dc1c      	bgt.n	80199de <_strtod_l+0x276>
 80199a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80199a6:	220a      	movs	r2, #10
 80199a8:	fb02 3301 	mla	r3, r2, r1, r3
 80199ac:	9309      	str	r3, [sp, #36]	; 0x24
 80199ae:	2200      	movs	r2, #0
 80199b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80199b2:	1c59      	adds	r1, r3, #1
 80199b4:	911d      	str	r1, [sp, #116]	; 0x74
 80199b6:	785b      	ldrb	r3, [r3, #1]
 80199b8:	4610      	mov	r0, r2
 80199ba:	e7c9      	b.n	8019950 <_strtod_l+0x1e8>
 80199bc:	4638      	mov	r0, r7
 80199be:	e7d2      	b.n	8019966 <_strtod_l+0x1fe>
 80199c0:	2a08      	cmp	r2, #8
 80199c2:	dc04      	bgt.n	80199ce <_strtod_l+0x266>
 80199c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80199c6:	434e      	muls	r6, r1
 80199c8:	9609      	str	r6, [sp, #36]	; 0x24
 80199ca:	3201      	adds	r2, #1
 80199cc:	e7e2      	b.n	8019994 <_strtod_l+0x22c>
 80199ce:	f102 0c01 	add.w	ip, r2, #1
 80199d2:	f1bc 0f10 	cmp.w	ip, #16
 80199d6:	bfd8      	it	le
 80199d8:	fb01 f909 	mulle.w	r9, r1, r9
 80199dc:	e7f5      	b.n	80199ca <_strtod_l+0x262>
 80199de:	2d10      	cmp	r5, #16
 80199e0:	bfdc      	itt	le
 80199e2:	220a      	movle	r2, #10
 80199e4:	fb02 3909 	mlale	r9, r2, r9, r3
 80199e8:	e7e1      	b.n	80199ae <_strtod_l+0x246>
 80199ea:	2300      	movs	r3, #0
 80199ec:	9307      	str	r3, [sp, #28]
 80199ee:	2201      	movs	r2, #1
 80199f0:	e77c      	b.n	80198ec <_strtod_l+0x184>
 80199f2:	f04f 0c00 	mov.w	ip, #0
 80199f6:	f108 0302 	add.w	r3, r8, #2
 80199fa:	931d      	str	r3, [sp, #116]	; 0x74
 80199fc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8019a00:	e785      	b.n	801990e <_strtod_l+0x1a6>
 8019a02:	f04f 0c01 	mov.w	ip, #1
 8019a06:	e7f6      	b.n	80199f6 <_strtod_l+0x28e>
 8019a08:	0801ed80 	.word	0x0801ed80
 8019a0c:	0801ec18 	.word	0x0801ec18
 8019a10:	7ff00000 	.word	0x7ff00000
 8019a14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019a16:	1c59      	adds	r1, r3, #1
 8019a18:	911d      	str	r1, [sp, #116]	; 0x74
 8019a1a:	785b      	ldrb	r3, [r3, #1]
 8019a1c:	2b30      	cmp	r3, #48	; 0x30
 8019a1e:	d0f9      	beq.n	8019a14 <_strtod_l+0x2ac>
 8019a20:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8019a24:	2908      	cmp	r1, #8
 8019a26:	f63f af79 	bhi.w	801991c <_strtod_l+0x1b4>
 8019a2a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8019a2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019a30:	9308      	str	r3, [sp, #32]
 8019a32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019a34:	1c59      	adds	r1, r3, #1
 8019a36:	911d      	str	r1, [sp, #116]	; 0x74
 8019a38:	785b      	ldrb	r3, [r3, #1]
 8019a3a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8019a3e:	2e09      	cmp	r6, #9
 8019a40:	d937      	bls.n	8019ab2 <_strtod_l+0x34a>
 8019a42:	9e08      	ldr	r6, [sp, #32]
 8019a44:	1b89      	subs	r1, r1, r6
 8019a46:	2908      	cmp	r1, #8
 8019a48:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8019a4c:	dc02      	bgt.n	8019a54 <_strtod_l+0x2ec>
 8019a4e:	4576      	cmp	r6, lr
 8019a50:	bfa8      	it	ge
 8019a52:	4676      	movge	r6, lr
 8019a54:	f1bc 0f00 	cmp.w	ip, #0
 8019a58:	d000      	beq.n	8019a5c <_strtod_l+0x2f4>
 8019a5a:	4276      	negs	r6, r6
 8019a5c:	2d00      	cmp	r5, #0
 8019a5e:	d14f      	bne.n	8019b00 <_strtod_l+0x398>
 8019a60:	9904      	ldr	r1, [sp, #16]
 8019a62:	4301      	orrs	r1, r0
 8019a64:	f47f aec2 	bne.w	80197ec <_strtod_l+0x84>
 8019a68:	2a00      	cmp	r2, #0
 8019a6a:	f47f aedb 	bne.w	8019824 <_strtod_l+0xbc>
 8019a6e:	2b69      	cmp	r3, #105	; 0x69
 8019a70:	d027      	beq.n	8019ac2 <_strtod_l+0x35a>
 8019a72:	dc24      	bgt.n	8019abe <_strtod_l+0x356>
 8019a74:	2b49      	cmp	r3, #73	; 0x49
 8019a76:	d024      	beq.n	8019ac2 <_strtod_l+0x35a>
 8019a78:	2b4e      	cmp	r3, #78	; 0x4e
 8019a7a:	f47f aed3 	bne.w	8019824 <_strtod_l+0xbc>
 8019a7e:	499e      	ldr	r1, [pc, #632]	; (8019cf8 <_strtod_l+0x590>)
 8019a80:	a81d      	add	r0, sp, #116	; 0x74
 8019a82:	f001 fb5d 	bl	801b140 <__match>
 8019a86:	2800      	cmp	r0, #0
 8019a88:	f43f aecc 	beq.w	8019824 <_strtod_l+0xbc>
 8019a8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019a8e:	781b      	ldrb	r3, [r3, #0]
 8019a90:	2b28      	cmp	r3, #40	; 0x28
 8019a92:	d12d      	bne.n	8019af0 <_strtod_l+0x388>
 8019a94:	4999      	ldr	r1, [pc, #612]	; (8019cfc <_strtod_l+0x594>)
 8019a96:	aa20      	add	r2, sp, #128	; 0x80
 8019a98:	a81d      	add	r0, sp, #116	; 0x74
 8019a9a:	f001 fb65 	bl	801b168 <__hexnan>
 8019a9e:	2805      	cmp	r0, #5
 8019aa0:	d126      	bne.n	8019af0 <_strtod_l+0x388>
 8019aa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019aa4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8019aa8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8019aac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8019ab0:	e69c      	b.n	80197ec <_strtod_l+0x84>
 8019ab2:	210a      	movs	r1, #10
 8019ab4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8019ab8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8019abc:	e7b9      	b.n	8019a32 <_strtod_l+0x2ca>
 8019abe:	2b6e      	cmp	r3, #110	; 0x6e
 8019ac0:	e7db      	b.n	8019a7a <_strtod_l+0x312>
 8019ac2:	498f      	ldr	r1, [pc, #572]	; (8019d00 <_strtod_l+0x598>)
 8019ac4:	a81d      	add	r0, sp, #116	; 0x74
 8019ac6:	f001 fb3b 	bl	801b140 <__match>
 8019aca:	2800      	cmp	r0, #0
 8019acc:	f43f aeaa 	beq.w	8019824 <_strtod_l+0xbc>
 8019ad0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019ad2:	498c      	ldr	r1, [pc, #560]	; (8019d04 <_strtod_l+0x59c>)
 8019ad4:	3b01      	subs	r3, #1
 8019ad6:	a81d      	add	r0, sp, #116	; 0x74
 8019ad8:	931d      	str	r3, [sp, #116]	; 0x74
 8019ada:	f001 fb31 	bl	801b140 <__match>
 8019ade:	b910      	cbnz	r0, 8019ae6 <_strtod_l+0x37e>
 8019ae0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019ae2:	3301      	adds	r3, #1
 8019ae4:	931d      	str	r3, [sp, #116]	; 0x74
 8019ae6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8019d14 <_strtod_l+0x5ac>
 8019aea:	f04f 0a00 	mov.w	sl, #0
 8019aee:	e67d      	b.n	80197ec <_strtod_l+0x84>
 8019af0:	4885      	ldr	r0, [pc, #532]	; (8019d08 <_strtod_l+0x5a0>)
 8019af2:	f003 f8c5 	bl	801cc80 <nan>
 8019af6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8019afa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8019afe:	e675      	b.n	80197ec <_strtod_l+0x84>
 8019b00:	9b07      	ldr	r3, [sp, #28]
 8019b02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019b04:	1af3      	subs	r3, r6, r3
 8019b06:	2f00      	cmp	r7, #0
 8019b08:	bf08      	it	eq
 8019b0a:	462f      	moveq	r7, r5
 8019b0c:	2d10      	cmp	r5, #16
 8019b0e:	9308      	str	r3, [sp, #32]
 8019b10:	46a8      	mov	r8, r5
 8019b12:	bfa8      	it	ge
 8019b14:	f04f 0810 	movge.w	r8, #16
 8019b18:	f7e6 fd04 	bl	8000524 <__aeabi_ui2d>
 8019b1c:	2d09      	cmp	r5, #9
 8019b1e:	4682      	mov	sl, r0
 8019b20:	468b      	mov	fp, r1
 8019b22:	dd13      	ble.n	8019b4c <_strtod_l+0x3e4>
 8019b24:	4b79      	ldr	r3, [pc, #484]	; (8019d0c <_strtod_l+0x5a4>)
 8019b26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8019b2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8019b2e:	f7e6 fd73 	bl	8000618 <__aeabi_dmul>
 8019b32:	4682      	mov	sl, r0
 8019b34:	4648      	mov	r0, r9
 8019b36:	468b      	mov	fp, r1
 8019b38:	f7e6 fcf4 	bl	8000524 <__aeabi_ui2d>
 8019b3c:	4602      	mov	r2, r0
 8019b3e:	460b      	mov	r3, r1
 8019b40:	4650      	mov	r0, sl
 8019b42:	4659      	mov	r1, fp
 8019b44:	f7e6 fbb2 	bl	80002ac <__adddf3>
 8019b48:	4682      	mov	sl, r0
 8019b4a:	468b      	mov	fp, r1
 8019b4c:	2d0f      	cmp	r5, #15
 8019b4e:	dc38      	bgt.n	8019bc2 <_strtod_l+0x45a>
 8019b50:	9b08      	ldr	r3, [sp, #32]
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	f43f ae4a 	beq.w	80197ec <_strtod_l+0x84>
 8019b58:	dd24      	ble.n	8019ba4 <_strtod_l+0x43c>
 8019b5a:	2b16      	cmp	r3, #22
 8019b5c:	dc0b      	bgt.n	8019b76 <_strtod_l+0x40e>
 8019b5e:	4d6b      	ldr	r5, [pc, #428]	; (8019d0c <_strtod_l+0x5a4>)
 8019b60:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8019b64:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019b68:	4652      	mov	r2, sl
 8019b6a:	465b      	mov	r3, fp
 8019b6c:	f7e6 fd54 	bl	8000618 <__aeabi_dmul>
 8019b70:	4682      	mov	sl, r0
 8019b72:	468b      	mov	fp, r1
 8019b74:	e63a      	b.n	80197ec <_strtod_l+0x84>
 8019b76:	9a08      	ldr	r2, [sp, #32]
 8019b78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8019b7c:	4293      	cmp	r3, r2
 8019b7e:	db20      	blt.n	8019bc2 <_strtod_l+0x45a>
 8019b80:	4c62      	ldr	r4, [pc, #392]	; (8019d0c <_strtod_l+0x5a4>)
 8019b82:	f1c5 050f 	rsb	r5, r5, #15
 8019b86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8019b8a:	4652      	mov	r2, sl
 8019b8c:	465b      	mov	r3, fp
 8019b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019b92:	f7e6 fd41 	bl	8000618 <__aeabi_dmul>
 8019b96:	9b08      	ldr	r3, [sp, #32]
 8019b98:	1b5d      	subs	r5, r3, r5
 8019b9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8019b9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019ba2:	e7e3      	b.n	8019b6c <_strtod_l+0x404>
 8019ba4:	9b08      	ldr	r3, [sp, #32]
 8019ba6:	3316      	adds	r3, #22
 8019ba8:	db0b      	blt.n	8019bc2 <_strtod_l+0x45a>
 8019baa:	9b07      	ldr	r3, [sp, #28]
 8019bac:	4a57      	ldr	r2, [pc, #348]	; (8019d0c <_strtod_l+0x5a4>)
 8019bae:	1b9e      	subs	r6, r3, r6
 8019bb0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8019bb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019bb8:	4650      	mov	r0, sl
 8019bba:	4659      	mov	r1, fp
 8019bbc:	f7e6 fe56 	bl	800086c <__aeabi_ddiv>
 8019bc0:	e7d6      	b.n	8019b70 <_strtod_l+0x408>
 8019bc2:	9b08      	ldr	r3, [sp, #32]
 8019bc4:	eba5 0808 	sub.w	r8, r5, r8
 8019bc8:	4498      	add	r8, r3
 8019bca:	f1b8 0f00 	cmp.w	r8, #0
 8019bce:	dd71      	ble.n	8019cb4 <_strtod_l+0x54c>
 8019bd0:	f018 030f 	ands.w	r3, r8, #15
 8019bd4:	d00a      	beq.n	8019bec <_strtod_l+0x484>
 8019bd6:	494d      	ldr	r1, [pc, #308]	; (8019d0c <_strtod_l+0x5a4>)
 8019bd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019bdc:	4652      	mov	r2, sl
 8019bde:	465b      	mov	r3, fp
 8019be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019be4:	f7e6 fd18 	bl	8000618 <__aeabi_dmul>
 8019be8:	4682      	mov	sl, r0
 8019bea:	468b      	mov	fp, r1
 8019bec:	f038 080f 	bics.w	r8, r8, #15
 8019bf0:	d04d      	beq.n	8019c8e <_strtod_l+0x526>
 8019bf2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8019bf6:	dd22      	ble.n	8019c3e <_strtod_l+0x4d6>
 8019bf8:	2500      	movs	r5, #0
 8019bfa:	462e      	mov	r6, r5
 8019bfc:	9509      	str	r5, [sp, #36]	; 0x24
 8019bfe:	9507      	str	r5, [sp, #28]
 8019c00:	2322      	movs	r3, #34	; 0x22
 8019c02:	f8df b110 	ldr.w	fp, [pc, #272]	; 8019d14 <_strtod_l+0x5ac>
 8019c06:	6023      	str	r3, [r4, #0]
 8019c08:	f04f 0a00 	mov.w	sl, #0
 8019c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	f43f adec 	beq.w	80197ec <_strtod_l+0x84>
 8019c14:	991e      	ldr	r1, [sp, #120]	; 0x78
 8019c16:	4620      	mov	r0, r4
 8019c18:	f001 fc16 	bl	801b448 <_Bfree>
 8019c1c:	9907      	ldr	r1, [sp, #28]
 8019c1e:	4620      	mov	r0, r4
 8019c20:	f001 fc12 	bl	801b448 <_Bfree>
 8019c24:	4631      	mov	r1, r6
 8019c26:	4620      	mov	r0, r4
 8019c28:	f001 fc0e 	bl	801b448 <_Bfree>
 8019c2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019c2e:	4620      	mov	r0, r4
 8019c30:	f001 fc0a 	bl	801b448 <_Bfree>
 8019c34:	4629      	mov	r1, r5
 8019c36:	4620      	mov	r0, r4
 8019c38:	f001 fc06 	bl	801b448 <_Bfree>
 8019c3c:	e5d6      	b.n	80197ec <_strtod_l+0x84>
 8019c3e:	2300      	movs	r3, #0
 8019c40:	ea4f 1828 	mov.w	r8, r8, asr #4
 8019c44:	4650      	mov	r0, sl
 8019c46:	4659      	mov	r1, fp
 8019c48:	4699      	mov	r9, r3
 8019c4a:	f1b8 0f01 	cmp.w	r8, #1
 8019c4e:	dc21      	bgt.n	8019c94 <_strtod_l+0x52c>
 8019c50:	b10b      	cbz	r3, 8019c56 <_strtod_l+0x4ee>
 8019c52:	4682      	mov	sl, r0
 8019c54:	468b      	mov	fp, r1
 8019c56:	4b2e      	ldr	r3, [pc, #184]	; (8019d10 <_strtod_l+0x5a8>)
 8019c58:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8019c5c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8019c60:	4652      	mov	r2, sl
 8019c62:	465b      	mov	r3, fp
 8019c64:	e9d9 0100 	ldrd	r0, r1, [r9]
 8019c68:	f7e6 fcd6 	bl	8000618 <__aeabi_dmul>
 8019c6c:	4b29      	ldr	r3, [pc, #164]	; (8019d14 <_strtod_l+0x5ac>)
 8019c6e:	460a      	mov	r2, r1
 8019c70:	400b      	ands	r3, r1
 8019c72:	4929      	ldr	r1, [pc, #164]	; (8019d18 <_strtod_l+0x5b0>)
 8019c74:	428b      	cmp	r3, r1
 8019c76:	4682      	mov	sl, r0
 8019c78:	d8be      	bhi.n	8019bf8 <_strtod_l+0x490>
 8019c7a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8019c7e:	428b      	cmp	r3, r1
 8019c80:	bf86      	itte	hi
 8019c82:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8019d1c <_strtod_l+0x5b4>
 8019c86:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8019c8a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8019c8e:	2300      	movs	r3, #0
 8019c90:	9304      	str	r3, [sp, #16]
 8019c92:	e081      	b.n	8019d98 <_strtod_l+0x630>
 8019c94:	f018 0f01 	tst.w	r8, #1
 8019c98:	d007      	beq.n	8019caa <_strtod_l+0x542>
 8019c9a:	4b1d      	ldr	r3, [pc, #116]	; (8019d10 <_strtod_l+0x5a8>)
 8019c9c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8019ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ca4:	f7e6 fcb8 	bl	8000618 <__aeabi_dmul>
 8019ca8:	2301      	movs	r3, #1
 8019caa:	f109 0901 	add.w	r9, r9, #1
 8019cae:	ea4f 0868 	mov.w	r8, r8, asr #1
 8019cb2:	e7ca      	b.n	8019c4a <_strtod_l+0x4e2>
 8019cb4:	d0eb      	beq.n	8019c8e <_strtod_l+0x526>
 8019cb6:	f1c8 0800 	rsb	r8, r8, #0
 8019cba:	f018 020f 	ands.w	r2, r8, #15
 8019cbe:	d00a      	beq.n	8019cd6 <_strtod_l+0x56e>
 8019cc0:	4b12      	ldr	r3, [pc, #72]	; (8019d0c <_strtod_l+0x5a4>)
 8019cc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019cc6:	4650      	mov	r0, sl
 8019cc8:	4659      	mov	r1, fp
 8019cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cce:	f7e6 fdcd 	bl	800086c <__aeabi_ddiv>
 8019cd2:	4682      	mov	sl, r0
 8019cd4:	468b      	mov	fp, r1
 8019cd6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8019cda:	d0d8      	beq.n	8019c8e <_strtod_l+0x526>
 8019cdc:	f1b8 0f1f 	cmp.w	r8, #31
 8019ce0:	dd1e      	ble.n	8019d20 <_strtod_l+0x5b8>
 8019ce2:	2500      	movs	r5, #0
 8019ce4:	462e      	mov	r6, r5
 8019ce6:	9509      	str	r5, [sp, #36]	; 0x24
 8019ce8:	9507      	str	r5, [sp, #28]
 8019cea:	2322      	movs	r3, #34	; 0x22
 8019cec:	f04f 0a00 	mov.w	sl, #0
 8019cf0:	f04f 0b00 	mov.w	fp, #0
 8019cf4:	6023      	str	r3, [r4, #0]
 8019cf6:	e789      	b.n	8019c0c <_strtod_l+0x4a4>
 8019cf8:	0801ec14 	.word	0x0801ec14
 8019cfc:	0801ec2c 	.word	0x0801ec2c
 8019d00:	0801ec0b 	.word	0x0801ec0b
 8019d04:	0801ec0e 	.word	0x0801ec0e
 8019d08:	0801eca3 	.word	0x0801eca3
 8019d0c:	0801ee20 	.word	0x0801ee20
 8019d10:	0801edf8 	.word	0x0801edf8
 8019d14:	7ff00000 	.word	0x7ff00000
 8019d18:	7ca00000 	.word	0x7ca00000
 8019d1c:	7fefffff 	.word	0x7fefffff
 8019d20:	f018 0310 	ands.w	r3, r8, #16
 8019d24:	bf18      	it	ne
 8019d26:	236a      	movne	r3, #106	; 0x6a
 8019d28:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801a0e0 <_strtod_l+0x978>
 8019d2c:	9304      	str	r3, [sp, #16]
 8019d2e:	4650      	mov	r0, sl
 8019d30:	4659      	mov	r1, fp
 8019d32:	2300      	movs	r3, #0
 8019d34:	f018 0f01 	tst.w	r8, #1
 8019d38:	d004      	beq.n	8019d44 <_strtod_l+0x5dc>
 8019d3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8019d3e:	f7e6 fc6b 	bl	8000618 <__aeabi_dmul>
 8019d42:	2301      	movs	r3, #1
 8019d44:	ea5f 0868 	movs.w	r8, r8, asr #1
 8019d48:	f109 0908 	add.w	r9, r9, #8
 8019d4c:	d1f2      	bne.n	8019d34 <_strtod_l+0x5cc>
 8019d4e:	b10b      	cbz	r3, 8019d54 <_strtod_l+0x5ec>
 8019d50:	4682      	mov	sl, r0
 8019d52:	468b      	mov	fp, r1
 8019d54:	9b04      	ldr	r3, [sp, #16]
 8019d56:	b1bb      	cbz	r3, 8019d88 <_strtod_l+0x620>
 8019d58:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8019d5c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	4659      	mov	r1, fp
 8019d64:	dd10      	ble.n	8019d88 <_strtod_l+0x620>
 8019d66:	2b1f      	cmp	r3, #31
 8019d68:	f340 8128 	ble.w	8019fbc <_strtod_l+0x854>
 8019d6c:	2b34      	cmp	r3, #52	; 0x34
 8019d6e:	bfde      	ittt	le
 8019d70:	3b20      	suble	r3, #32
 8019d72:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8019d76:	fa02 f303 	lslle.w	r3, r2, r3
 8019d7a:	f04f 0a00 	mov.w	sl, #0
 8019d7e:	bfcc      	ite	gt
 8019d80:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8019d84:	ea03 0b01 	andle.w	fp, r3, r1
 8019d88:	2200      	movs	r2, #0
 8019d8a:	2300      	movs	r3, #0
 8019d8c:	4650      	mov	r0, sl
 8019d8e:	4659      	mov	r1, fp
 8019d90:	f7e6 feaa 	bl	8000ae8 <__aeabi_dcmpeq>
 8019d94:	2800      	cmp	r0, #0
 8019d96:	d1a4      	bne.n	8019ce2 <_strtod_l+0x57a>
 8019d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d9a:	9300      	str	r3, [sp, #0]
 8019d9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019d9e:	462b      	mov	r3, r5
 8019da0:	463a      	mov	r2, r7
 8019da2:	4620      	mov	r0, r4
 8019da4:	f001 fbbc 	bl	801b520 <__s2b>
 8019da8:	9009      	str	r0, [sp, #36]	; 0x24
 8019daa:	2800      	cmp	r0, #0
 8019dac:	f43f af24 	beq.w	8019bf8 <_strtod_l+0x490>
 8019db0:	9b07      	ldr	r3, [sp, #28]
 8019db2:	1b9e      	subs	r6, r3, r6
 8019db4:	9b08      	ldr	r3, [sp, #32]
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	bfb4      	ite	lt
 8019dba:	4633      	movlt	r3, r6
 8019dbc:	2300      	movge	r3, #0
 8019dbe:	9310      	str	r3, [sp, #64]	; 0x40
 8019dc0:	9b08      	ldr	r3, [sp, #32]
 8019dc2:	2500      	movs	r5, #0
 8019dc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019dc8:	9318      	str	r3, [sp, #96]	; 0x60
 8019dca:	462e      	mov	r6, r5
 8019dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019dce:	4620      	mov	r0, r4
 8019dd0:	6859      	ldr	r1, [r3, #4]
 8019dd2:	f001 faf9 	bl	801b3c8 <_Balloc>
 8019dd6:	9007      	str	r0, [sp, #28]
 8019dd8:	2800      	cmp	r0, #0
 8019dda:	f43f af11 	beq.w	8019c00 <_strtod_l+0x498>
 8019dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019de0:	691a      	ldr	r2, [r3, #16]
 8019de2:	3202      	adds	r2, #2
 8019de4:	f103 010c 	add.w	r1, r3, #12
 8019de8:	0092      	lsls	r2, r2, #2
 8019dea:	300c      	adds	r0, #12
 8019dec:	f7fe fff2 	bl	8018dd4 <memcpy>
 8019df0:	ec4b ab10 	vmov	d0, sl, fp
 8019df4:	aa20      	add	r2, sp, #128	; 0x80
 8019df6:	a91f      	add	r1, sp, #124	; 0x7c
 8019df8:	4620      	mov	r0, r4
 8019dfa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8019dfe:	f001 fecb 	bl	801bb98 <__d2b>
 8019e02:	901e      	str	r0, [sp, #120]	; 0x78
 8019e04:	2800      	cmp	r0, #0
 8019e06:	f43f aefb 	beq.w	8019c00 <_strtod_l+0x498>
 8019e0a:	2101      	movs	r1, #1
 8019e0c:	4620      	mov	r0, r4
 8019e0e:	f001 fc21 	bl	801b654 <__i2b>
 8019e12:	4606      	mov	r6, r0
 8019e14:	2800      	cmp	r0, #0
 8019e16:	f43f aef3 	beq.w	8019c00 <_strtod_l+0x498>
 8019e1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019e1c:	9904      	ldr	r1, [sp, #16]
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	bfab      	itete	ge
 8019e22:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8019e24:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8019e26:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8019e28:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8019e2c:	bfac      	ite	ge
 8019e2e:	eb03 0902 	addge.w	r9, r3, r2
 8019e32:	1ad7      	sublt	r7, r2, r3
 8019e34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019e36:	eba3 0801 	sub.w	r8, r3, r1
 8019e3a:	4490      	add	r8, r2
 8019e3c:	4ba3      	ldr	r3, [pc, #652]	; (801a0cc <_strtod_l+0x964>)
 8019e3e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8019e42:	4598      	cmp	r8, r3
 8019e44:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8019e48:	f280 80cc 	bge.w	8019fe4 <_strtod_l+0x87c>
 8019e4c:	eba3 0308 	sub.w	r3, r3, r8
 8019e50:	2b1f      	cmp	r3, #31
 8019e52:	eba2 0203 	sub.w	r2, r2, r3
 8019e56:	f04f 0101 	mov.w	r1, #1
 8019e5a:	f300 80b6 	bgt.w	8019fca <_strtod_l+0x862>
 8019e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8019e62:	9311      	str	r3, [sp, #68]	; 0x44
 8019e64:	2300      	movs	r3, #0
 8019e66:	930c      	str	r3, [sp, #48]	; 0x30
 8019e68:	eb09 0802 	add.w	r8, r9, r2
 8019e6c:	9b04      	ldr	r3, [sp, #16]
 8019e6e:	45c1      	cmp	r9, r8
 8019e70:	4417      	add	r7, r2
 8019e72:	441f      	add	r7, r3
 8019e74:	464b      	mov	r3, r9
 8019e76:	bfa8      	it	ge
 8019e78:	4643      	movge	r3, r8
 8019e7a:	42bb      	cmp	r3, r7
 8019e7c:	bfa8      	it	ge
 8019e7e:	463b      	movge	r3, r7
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	bfc2      	ittt	gt
 8019e84:	eba8 0803 	subgt.w	r8, r8, r3
 8019e88:	1aff      	subgt	r7, r7, r3
 8019e8a:	eba9 0903 	subgt.w	r9, r9, r3
 8019e8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	dd17      	ble.n	8019ec4 <_strtod_l+0x75c>
 8019e94:	4631      	mov	r1, r6
 8019e96:	461a      	mov	r2, r3
 8019e98:	4620      	mov	r0, r4
 8019e9a:	f001 fc97 	bl	801b7cc <__pow5mult>
 8019e9e:	4606      	mov	r6, r0
 8019ea0:	2800      	cmp	r0, #0
 8019ea2:	f43f aead 	beq.w	8019c00 <_strtod_l+0x498>
 8019ea6:	4601      	mov	r1, r0
 8019ea8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8019eaa:	4620      	mov	r0, r4
 8019eac:	f001 fbe8 	bl	801b680 <__multiply>
 8019eb0:	900f      	str	r0, [sp, #60]	; 0x3c
 8019eb2:	2800      	cmp	r0, #0
 8019eb4:	f43f aea4 	beq.w	8019c00 <_strtod_l+0x498>
 8019eb8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8019eba:	4620      	mov	r0, r4
 8019ebc:	f001 fac4 	bl	801b448 <_Bfree>
 8019ec0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019ec2:	931e      	str	r3, [sp, #120]	; 0x78
 8019ec4:	f1b8 0f00 	cmp.w	r8, #0
 8019ec8:	f300 8091 	bgt.w	8019fee <_strtod_l+0x886>
 8019ecc:	9b08      	ldr	r3, [sp, #32]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	dd08      	ble.n	8019ee4 <_strtod_l+0x77c>
 8019ed2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019ed4:	9907      	ldr	r1, [sp, #28]
 8019ed6:	4620      	mov	r0, r4
 8019ed8:	f001 fc78 	bl	801b7cc <__pow5mult>
 8019edc:	9007      	str	r0, [sp, #28]
 8019ede:	2800      	cmp	r0, #0
 8019ee0:	f43f ae8e 	beq.w	8019c00 <_strtod_l+0x498>
 8019ee4:	2f00      	cmp	r7, #0
 8019ee6:	dd08      	ble.n	8019efa <_strtod_l+0x792>
 8019ee8:	9907      	ldr	r1, [sp, #28]
 8019eea:	463a      	mov	r2, r7
 8019eec:	4620      	mov	r0, r4
 8019eee:	f001 fcc7 	bl	801b880 <__lshift>
 8019ef2:	9007      	str	r0, [sp, #28]
 8019ef4:	2800      	cmp	r0, #0
 8019ef6:	f43f ae83 	beq.w	8019c00 <_strtod_l+0x498>
 8019efa:	f1b9 0f00 	cmp.w	r9, #0
 8019efe:	dd08      	ble.n	8019f12 <_strtod_l+0x7aa>
 8019f00:	4631      	mov	r1, r6
 8019f02:	464a      	mov	r2, r9
 8019f04:	4620      	mov	r0, r4
 8019f06:	f001 fcbb 	bl	801b880 <__lshift>
 8019f0a:	4606      	mov	r6, r0
 8019f0c:	2800      	cmp	r0, #0
 8019f0e:	f43f ae77 	beq.w	8019c00 <_strtod_l+0x498>
 8019f12:	9a07      	ldr	r2, [sp, #28]
 8019f14:	991e      	ldr	r1, [sp, #120]	; 0x78
 8019f16:	4620      	mov	r0, r4
 8019f18:	f001 fd3a 	bl	801b990 <__mdiff>
 8019f1c:	4605      	mov	r5, r0
 8019f1e:	2800      	cmp	r0, #0
 8019f20:	f43f ae6e 	beq.w	8019c00 <_strtod_l+0x498>
 8019f24:	68c3      	ldr	r3, [r0, #12]
 8019f26:	930f      	str	r3, [sp, #60]	; 0x3c
 8019f28:	2300      	movs	r3, #0
 8019f2a:	60c3      	str	r3, [r0, #12]
 8019f2c:	4631      	mov	r1, r6
 8019f2e:	f001 fd13 	bl	801b958 <__mcmp>
 8019f32:	2800      	cmp	r0, #0
 8019f34:	da65      	bge.n	801a002 <_strtod_l+0x89a>
 8019f36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019f38:	ea53 030a 	orrs.w	r3, r3, sl
 8019f3c:	f040 8087 	bne.w	801a04e <_strtod_l+0x8e6>
 8019f40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	f040 8082 	bne.w	801a04e <_strtod_l+0x8e6>
 8019f4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019f4e:	0d1b      	lsrs	r3, r3, #20
 8019f50:	051b      	lsls	r3, r3, #20
 8019f52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8019f56:	d97a      	bls.n	801a04e <_strtod_l+0x8e6>
 8019f58:	696b      	ldr	r3, [r5, #20]
 8019f5a:	b913      	cbnz	r3, 8019f62 <_strtod_l+0x7fa>
 8019f5c:	692b      	ldr	r3, [r5, #16]
 8019f5e:	2b01      	cmp	r3, #1
 8019f60:	dd75      	ble.n	801a04e <_strtod_l+0x8e6>
 8019f62:	4629      	mov	r1, r5
 8019f64:	2201      	movs	r2, #1
 8019f66:	4620      	mov	r0, r4
 8019f68:	f001 fc8a 	bl	801b880 <__lshift>
 8019f6c:	4631      	mov	r1, r6
 8019f6e:	4605      	mov	r5, r0
 8019f70:	f001 fcf2 	bl	801b958 <__mcmp>
 8019f74:	2800      	cmp	r0, #0
 8019f76:	dd6a      	ble.n	801a04e <_strtod_l+0x8e6>
 8019f78:	9904      	ldr	r1, [sp, #16]
 8019f7a:	4a55      	ldr	r2, [pc, #340]	; (801a0d0 <_strtod_l+0x968>)
 8019f7c:	465b      	mov	r3, fp
 8019f7e:	2900      	cmp	r1, #0
 8019f80:	f000 8085 	beq.w	801a08e <_strtod_l+0x926>
 8019f84:	ea02 010b 	and.w	r1, r2, fp
 8019f88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8019f8c:	dc7f      	bgt.n	801a08e <_strtod_l+0x926>
 8019f8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8019f92:	f77f aeaa 	ble.w	8019cea <_strtod_l+0x582>
 8019f96:	4a4f      	ldr	r2, [pc, #316]	; (801a0d4 <_strtod_l+0x96c>)
 8019f98:	2300      	movs	r3, #0
 8019f9a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8019f9e:	4650      	mov	r0, sl
 8019fa0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8019fa4:	4659      	mov	r1, fp
 8019fa6:	f7e6 fb37 	bl	8000618 <__aeabi_dmul>
 8019faa:	460b      	mov	r3, r1
 8019fac:	4303      	orrs	r3, r0
 8019fae:	bf08      	it	eq
 8019fb0:	2322      	moveq	r3, #34	; 0x22
 8019fb2:	4682      	mov	sl, r0
 8019fb4:	468b      	mov	fp, r1
 8019fb6:	bf08      	it	eq
 8019fb8:	6023      	streq	r3, [r4, #0]
 8019fba:	e62b      	b.n	8019c14 <_strtod_l+0x4ac>
 8019fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8019fc4:	ea03 0a0a 	and.w	sl, r3, sl
 8019fc8:	e6de      	b.n	8019d88 <_strtod_l+0x620>
 8019fca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8019fce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8019fd2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8019fd6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8019fda:	fa01 f308 	lsl.w	r3, r1, r8
 8019fde:	930c      	str	r3, [sp, #48]	; 0x30
 8019fe0:	9111      	str	r1, [sp, #68]	; 0x44
 8019fe2:	e741      	b.n	8019e68 <_strtod_l+0x700>
 8019fe4:	2300      	movs	r3, #0
 8019fe6:	930c      	str	r3, [sp, #48]	; 0x30
 8019fe8:	2301      	movs	r3, #1
 8019fea:	9311      	str	r3, [sp, #68]	; 0x44
 8019fec:	e73c      	b.n	8019e68 <_strtod_l+0x700>
 8019fee:	991e      	ldr	r1, [sp, #120]	; 0x78
 8019ff0:	4642      	mov	r2, r8
 8019ff2:	4620      	mov	r0, r4
 8019ff4:	f001 fc44 	bl	801b880 <__lshift>
 8019ff8:	901e      	str	r0, [sp, #120]	; 0x78
 8019ffa:	2800      	cmp	r0, #0
 8019ffc:	f47f af66 	bne.w	8019ecc <_strtod_l+0x764>
 801a000:	e5fe      	b.n	8019c00 <_strtod_l+0x498>
 801a002:	465f      	mov	r7, fp
 801a004:	d16e      	bne.n	801a0e4 <_strtod_l+0x97c>
 801a006:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a008:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a00c:	b342      	cbz	r2, 801a060 <_strtod_l+0x8f8>
 801a00e:	4a32      	ldr	r2, [pc, #200]	; (801a0d8 <_strtod_l+0x970>)
 801a010:	4293      	cmp	r3, r2
 801a012:	d128      	bne.n	801a066 <_strtod_l+0x8fe>
 801a014:	9b04      	ldr	r3, [sp, #16]
 801a016:	4650      	mov	r0, sl
 801a018:	b1eb      	cbz	r3, 801a056 <_strtod_l+0x8ee>
 801a01a:	4a2d      	ldr	r2, [pc, #180]	; (801a0d0 <_strtod_l+0x968>)
 801a01c:	403a      	ands	r2, r7
 801a01e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801a022:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801a026:	d819      	bhi.n	801a05c <_strtod_l+0x8f4>
 801a028:	0d12      	lsrs	r2, r2, #20
 801a02a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801a02e:	fa01 f303 	lsl.w	r3, r1, r3
 801a032:	4298      	cmp	r0, r3
 801a034:	d117      	bne.n	801a066 <_strtod_l+0x8fe>
 801a036:	4b29      	ldr	r3, [pc, #164]	; (801a0dc <_strtod_l+0x974>)
 801a038:	429f      	cmp	r7, r3
 801a03a:	d102      	bne.n	801a042 <_strtod_l+0x8da>
 801a03c:	3001      	adds	r0, #1
 801a03e:	f43f addf 	beq.w	8019c00 <_strtod_l+0x498>
 801a042:	4b23      	ldr	r3, [pc, #140]	; (801a0d0 <_strtod_l+0x968>)
 801a044:	403b      	ands	r3, r7
 801a046:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801a04a:	f04f 0a00 	mov.w	sl, #0
 801a04e:	9b04      	ldr	r3, [sp, #16]
 801a050:	2b00      	cmp	r3, #0
 801a052:	d1a0      	bne.n	8019f96 <_strtod_l+0x82e>
 801a054:	e5de      	b.n	8019c14 <_strtod_l+0x4ac>
 801a056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a05a:	e7ea      	b.n	801a032 <_strtod_l+0x8ca>
 801a05c:	460b      	mov	r3, r1
 801a05e:	e7e8      	b.n	801a032 <_strtod_l+0x8ca>
 801a060:	ea53 030a 	orrs.w	r3, r3, sl
 801a064:	d088      	beq.n	8019f78 <_strtod_l+0x810>
 801a066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a068:	b1db      	cbz	r3, 801a0a2 <_strtod_l+0x93a>
 801a06a:	423b      	tst	r3, r7
 801a06c:	d0ef      	beq.n	801a04e <_strtod_l+0x8e6>
 801a06e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a070:	9a04      	ldr	r2, [sp, #16]
 801a072:	4650      	mov	r0, sl
 801a074:	4659      	mov	r1, fp
 801a076:	b1c3      	cbz	r3, 801a0aa <_strtod_l+0x942>
 801a078:	f7ff fb5a 	bl	8019730 <sulp>
 801a07c:	4602      	mov	r2, r0
 801a07e:	460b      	mov	r3, r1
 801a080:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a084:	f7e6 f912 	bl	80002ac <__adddf3>
 801a088:	4682      	mov	sl, r0
 801a08a:	468b      	mov	fp, r1
 801a08c:	e7df      	b.n	801a04e <_strtod_l+0x8e6>
 801a08e:	4013      	ands	r3, r2
 801a090:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a094:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a098:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a09c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801a0a0:	e7d5      	b.n	801a04e <_strtod_l+0x8e6>
 801a0a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a0a4:	ea13 0f0a 	tst.w	r3, sl
 801a0a8:	e7e0      	b.n	801a06c <_strtod_l+0x904>
 801a0aa:	f7ff fb41 	bl	8019730 <sulp>
 801a0ae:	4602      	mov	r2, r0
 801a0b0:	460b      	mov	r3, r1
 801a0b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a0b6:	f7e6 f8f7 	bl	80002a8 <__aeabi_dsub>
 801a0ba:	2200      	movs	r2, #0
 801a0bc:	2300      	movs	r3, #0
 801a0be:	4682      	mov	sl, r0
 801a0c0:	468b      	mov	fp, r1
 801a0c2:	f7e6 fd11 	bl	8000ae8 <__aeabi_dcmpeq>
 801a0c6:	2800      	cmp	r0, #0
 801a0c8:	d0c1      	beq.n	801a04e <_strtod_l+0x8e6>
 801a0ca:	e60e      	b.n	8019cea <_strtod_l+0x582>
 801a0cc:	fffffc02 	.word	0xfffffc02
 801a0d0:	7ff00000 	.word	0x7ff00000
 801a0d4:	39500000 	.word	0x39500000
 801a0d8:	000fffff 	.word	0x000fffff
 801a0dc:	7fefffff 	.word	0x7fefffff
 801a0e0:	0801ec40 	.word	0x0801ec40
 801a0e4:	4631      	mov	r1, r6
 801a0e6:	4628      	mov	r0, r5
 801a0e8:	f001 fdb2 	bl	801bc50 <__ratio>
 801a0ec:	ec59 8b10 	vmov	r8, r9, d0
 801a0f0:	ee10 0a10 	vmov	r0, s0
 801a0f4:	2200      	movs	r2, #0
 801a0f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a0fa:	4649      	mov	r1, r9
 801a0fc:	f7e6 fd08 	bl	8000b10 <__aeabi_dcmple>
 801a100:	2800      	cmp	r0, #0
 801a102:	d07c      	beq.n	801a1fe <_strtod_l+0xa96>
 801a104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a106:	2b00      	cmp	r3, #0
 801a108:	d04c      	beq.n	801a1a4 <_strtod_l+0xa3c>
 801a10a:	4b95      	ldr	r3, [pc, #596]	; (801a360 <_strtod_l+0xbf8>)
 801a10c:	2200      	movs	r2, #0
 801a10e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801a112:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801a360 <_strtod_l+0xbf8>
 801a116:	f04f 0800 	mov.w	r8, #0
 801a11a:	4b92      	ldr	r3, [pc, #584]	; (801a364 <_strtod_l+0xbfc>)
 801a11c:	403b      	ands	r3, r7
 801a11e:	9311      	str	r3, [sp, #68]	; 0x44
 801a120:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a122:	4b91      	ldr	r3, [pc, #580]	; (801a368 <_strtod_l+0xc00>)
 801a124:	429a      	cmp	r2, r3
 801a126:	f040 80b2 	bne.w	801a28e <_strtod_l+0xb26>
 801a12a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a12e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a132:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801a136:	ec4b ab10 	vmov	d0, sl, fp
 801a13a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801a13e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801a142:	f001 fcad 	bl	801baa0 <__ulp>
 801a146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a14a:	ec53 2b10 	vmov	r2, r3, d0
 801a14e:	f7e6 fa63 	bl	8000618 <__aeabi_dmul>
 801a152:	4652      	mov	r2, sl
 801a154:	465b      	mov	r3, fp
 801a156:	f7e6 f8a9 	bl	80002ac <__adddf3>
 801a15a:	460b      	mov	r3, r1
 801a15c:	4981      	ldr	r1, [pc, #516]	; (801a364 <_strtod_l+0xbfc>)
 801a15e:	4a83      	ldr	r2, [pc, #524]	; (801a36c <_strtod_l+0xc04>)
 801a160:	4019      	ands	r1, r3
 801a162:	4291      	cmp	r1, r2
 801a164:	4682      	mov	sl, r0
 801a166:	d95e      	bls.n	801a226 <_strtod_l+0xabe>
 801a168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a16a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801a16e:	4293      	cmp	r3, r2
 801a170:	d103      	bne.n	801a17a <_strtod_l+0xa12>
 801a172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a174:	3301      	adds	r3, #1
 801a176:	f43f ad43 	beq.w	8019c00 <_strtod_l+0x498>
 801a17a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801a378 <_strtod_l+0xc10>
 801a17e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801a182:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a184:	4620      	mov	r0, r4
 801a186:	f001 f95f 	bl	801b448 <_Bfree>
 801a18a:	9907      	ldr	r1, [sp, #28]
 801a18c:	4620      	mov	r0, r4
 801a18e:	f001 f95b 	bl	801b448 <_Bfree>
 801a192:	4631      	mov	r1, r6
 801a194:	4620      	mov	r0, r4
 801a196:	f001 f957 	bl	801b448 <_Bfree>
 801a19a:	4629      	mov	r1, r5
 801a19c:	4620      	mov	r0, r4
 801a19e:	f001 f953 	bl	801b448 <_Bfree>
 801a1a2:	e613      	b.n	8019dcc <_strtod_l+0x664>
 801a1a4:	f1ba 0f00 	cmp.w	sl, #0
 801a1a8:	d11b      	bne.n	801a1e2 <_strtod_l+0xa7a>
 801a1aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a1ae:	b9f3      	cbnz	r3, 801a1ee <_strtod_l+0xa86>
 801a1b0:	4b6b      	ldr	r3, [pc, #428]	; (801a360 <_strtod_l+0xbf8>)
 801a1b2:	2200      	movs	r2, #0
 801a1b4:	4640      	mov	r0, r8
 801a1b6:	4649      	mov	r1, r9
 801a1b8:	f7e6 fca0 	bl	8000afc <__aeabi_dcmplt>
 801a1bc:	b9d0      	cbnz	r0, 801a1f4 <_strtod_l+0xa8c>
 801a1be:	4640      	mov	r0, r8
 801a1c0:	4649      	mov	r1, r9
 801a1c2:	4b6b      	ldr	r3, [pc, #428]	; (801a370 <_strtod_l+0xc08>)
 801a1c4:	2200      	movs	r2, #0
 801a1c6:	f7e6 fa27 	bl	8000618 <__aeabi_dmul>
 801a1ca:	4680      	mov	r8, r0
 801a1cc:	4689      	mov	r9, r1
 801a1ce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a1d2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801a1d6:	931b      	str	r3, [sp, #108]	; 0x6c
 801a1d8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801a1dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801a1e0:	e79b      	b.n	801a11a <_strtod_l+0x9b2>
 801a1e2:	f1ba 0f01 	cmp.w	sl, #1
 801a1e6:	d102      	bne.n	801a1ee <_strtod_l+0xa86>
 801a1e8:	2f00      	cmp	r7, #0
 801a1ea:	f43f ad7e 	beq.w	8019cea <_strtod_l+0x582>
 801a1ee:	4b61      	ldr	r3, [pc, #388]	; (801a374 <_strtod_l+0xc0c>)
 801a1f0:	2200      	movs	r2, #0
 801a1f2:	e78c      	b.n	801a10e <_strtod_l+0x9a6>
 801a1f4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801a370 <_strtod_l+0xc08>
 801a1f8:	f04f 0800 	mov.w	r8, #0
 801a1fc:	e7e7      	b.n	801a1ce <_strtod_l+0xa66>
 801a1fe:	4b5c      	ldr	r3, [pc, #368]	; (801a370 <_strtod_l+0xc08>)
 801a200:	4640      	mov	r0, r8
 801a202:	4649      	mov	r1, r9
 801a204:	2200      	movs	r2, #0
 801a206:	f7e6 fa07 	bl	8000618 <__aeabi_dmul>
 801a20a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a20c:	4680      	mov	r8, r0
 801a20e:	4689      	mov	r9, r1
 801a210:	b933      	cbnz	r3, 801a220 <_strtod_l+0xab8>
 801a212:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a216:	9012      	str	r0, [sp, #72]	; 0x48
 801a218:	9313      	str	r3, [sp, #76]	; 0x4c
 801a21a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801a21e:	e7dd      	b.n	801a1dc <_strtod_l+0xa74>
 801a220:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801a224:	e7f9      	b.n	801a21a <_strtod_l+0xab2>
 801a226:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801a22a:	9b04      	ldr	r3, [sp, #16]
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	d1a8      	bne.n	801a182 <_strtod_l+0xa1a>
 801a230:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a234:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a236:	0d1b      	lsrs	r3, r3, #20
 801a238:	051b      	lsls	r3, r3, #20
 801a23a:	429a      	cmp	r2, r3
 801a23c:	d1a1      	bne.n	801a182 <_strtod_l+0xa1a>
 801a23e:	4640      	mov	r0, r8
 801a240:	4649      	mov	r1, r9
 801a242:	f7e6 fd71 	bl	8000d28 <__aeabi_d2lz>
 801a246:	f7e6 f9b9 	bl	80005bc <__aeabi_l2d>
 801a24a:	4602      	mov	r2, r0
 801a24c:	460b      	mov	r3, r1
 801a24e:	4640      	mov	r0, r8
 801a250:	4649      	mov	r1, r9
 801a252:	f7e6 f829 	bl	80002a8 <__aeabi_dsub>
 801a256:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a258:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a25c:	ea43 030a 	orr.w	r3, r3, sl
 801a260:	4313      	orrs	r3, r2
 801a262:	4680      	mov	r8, r0
 801a264:	4689      	mov	r9, r1
 801a266:	d053      	beq.n	801a310 <_strtod_l+0xba8>
 801a268:	a335      	add	r3, pc, #212	; (adr r3, 801a340 <_strtod_l+0xbd8>)
 801a26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a26e:	f7e6 fc45 	bl	8000afc <__aeabi_dcmplt>
 801a272:	2800      	cmp	r0, #0
 801a274:	f47f acce 	bne.w	8019c14 <_strtod_l+0x4ac>
 801a278:	a333      	add	r3, pc, #204	; (adr r3, 801a348 <_strtod_l+0xbe0>)
 801a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a27e:	4640      	mov	r0, r8
 801a280:	4649      	mov	r1, r9
 801a282:	f7e6 fc59 	bl	8000b38 <__aeabi_dcmpgt>
 801a286:	2800      	cmp	r0, #0
 801a288:	f43f af7b 	beq.w	801a182 <_strtod_l+0xa1a>
 801a28c:	e4c2      	b.n	8019c14 <_strtod_l+0x4ac>
 801a28e:	9b04      	ldr	r3, [sp, #16]
 801a290:	b333      	cbz	r3, 801a2e0 <_strtod_l+0xb78>
 801a292:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a294:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a298:	d822      	bhi.n	801a2e0 <_strtod_l+0xb78>
 801a29a:	a32d      	add	r3, pc, #180	; (adr r3, 801a350 <_strtod_l+0xbe8>)
 801a29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2a0:	4640      	mov	r0, r8
 801a2a2:	4649      	mov	r1, r9
 801a2a4:	f7e6 fc34 	bl	8000b10 <__aeabi_dcmple>
 801a2a8:	b1a0      	cbz	r0, 801a2d4 <_strtod_l+0xb6c>
 801a2aa:	4649      	mov	r1, r9
 801a2ac:	4640      	mov	r0, r8
 801a2ae:	f7e6 fc63 	bl	8000b78 <__aeabi_d2uiz>
 801a2b2:	2801      	cmp	r0, #1
 801a2b4:	bf38      	it	cc
 801a2b6:	2001      	movcc	r0, #1
 801a2b8:	f7e6 f934 	bl	8000524 <__aeabi_ui2d>
 801a2bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a2be:	4680      	mov	r8, r0
 801a2c0:	4689      	mov	r9, r1
 801a2c2:	bb13      	cbnz	r3, 801a30a <_strtod_l+0xba2>
 801a2c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a2c8:	9014      	str	r0, [sp, #80]	; 0x50
 801a2ca:	9315      	str	r3, [sp, #84]	; 0x54
 801a2cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801a2d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801a2d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a2d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a2d8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801a2dc:	1a9b      	subs	r3, r3, r2
 801a2de:	930d      	str	r3, [sp, #52]	; 0x34
 801a2e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a2e4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801a2e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801a2ec:	f001 fbd8 	bl	801baa0 <__ulp>
 801a2f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a2f4:	ec53 2b10 	vmov	r2, r3, d0
 801a2f8:	f7e6 f98e 	bl	8000618 <__aeabi_dmul>
 801a2fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a300:	f7e5 ffd4 	bl	80002ac <__adddf3>
 801a304:	4682      	mov	sl, r0
 801a306:	468b      	mov	fp, r1
 801a308:	e78f      	b.n	801a22a <_strtod_l+0xac2>
 801a30a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801a30e:	e7dd      	b.n	801a2cc <_strtod_l+0xb64>
 801a310:	a311      	add	r3, pc, #68	; (adr r3, 801a358 <_strtod_l+0xbf0>)
 801a312:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a316:	f7e6 fbf1 	bl	8000afc <__aeabi_dcmplt>
 801a31a:	e7b4      	b.n	801a286 <_strtod_l+0xb1e>
 801a31c:	2300      	movs	r3, #0
 801a31e:	930e      	str	r3, [sp, #56]	; 0x38
 801a320:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a322:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a324:	6013      	str	r3, [r2, #0]
 801a326:	f7ff ba65 	b.w	80197f4 <_strtod_l+0x8c>
 801a32a:	2b65      	cmp	r3, #101	; 0x65
 801a32c:	f43f ab5d 	beq.w	80199ea <_strtod_l+0x282>
 801a330:	2b45      	cmp	r3, #69	; 0x45
 801a332:	f43f ab5a 	beq.w	80199ea <_strtod_l+0x282>
 801a336:	2201      	movs	r2, #1
 801a338:	f7ff bb92 	b.w	8019a60 <_strtod_l+0x2f8>
 801a33c:	f3af 8000 	nop.w
 801a340:	94a03595 	.word	0x94a03595
 801a344:	3fdfffff 	.word	0x3fdfffff
 801a348:	35afe535 	.word	0x35afe535
 801a34c:	3fe00000 	.word	0x3fe00000
 801a350:	ffc00000 	.word	0xffc00000
 801a354:	41dfffff 	.word	0x41dfffff
 801a358:	94a03595 	.word	0x94a03595
 801a35c:	3fcfffff 	.word	0x3fcfffff
 801a360:	3ff00000 	.word	0x3ff00000
 801a364:	7ff00000 	.word	0x7ff00000
 801a368:	7fe00000 	.word	0x7fe00000
 801a36c:	7c9fffff 	.word	0x7c9fffff
 801a370:	3fe00000 	.word	0x3fe00000
 801a374:	bff00000 	.word	0xbff00000
 801a378:	7fefffff 	.word	0x7fefffff

0801a37c <_strtod_r>:
 801a37c:	4b01      	ldr	r3, [pc, #4]	; (801a384 <_strtod_r+0x8>)
 801a37e:	f7ff b9f3 	b.w	8019768 <_strtod_l>
 801a382:	bf00      	nop
 801a384:	200001f8 	.word	0x200001f8

0801a388 <_strtol_l.isra.0>:
 801a388:	2b01      	cmp	r3, #1
 801a38a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a38e:	d001      	beq.n	801a394 <_strtol_l.isra.0+0xc>
 801a390:	2b24      	cmp	r3, #36	; 0x24
 801a392:	d906      	bls.n	801a3a2 <_strtol_l.isra.0+0x1a>
 801a394:	f7fe fc2c 	bl	8018bf0 <__errno>
 801a398:	2316      	movs	r3, #22
 801a39a:	6003      	str	r3, [r0, #0]
 801a39c:	2000      	movs	r0, #0
 801a39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3a2:	4f3a      	ldr	r7, [pc, #232]	; (801a48c <_strtol_l.isra.0+0x104>)
 801a3a4:	468e      	mov	lr, r1
 801a3a6:	4676      	mov	r6, lr
 801a3a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801a3ac:	5de5      	ldrb	r5, [r4, r7]
 801a3ae:	f015 0508 	ands.w	r5, r5, #8
 801a3b2:	d1f8      	bne.n	801a3a6 <_strtol_l.isra.0+0x1e>
 801a3b4:	2c2d      	cmp	r4, #45	; 0x2d
 801a3b6:	d134      	bne.n	801a422 <_strtol_l.isra.0+0x9a>
 801a3b8:	f89e 4000 	ldrb.w	r4, [lr]
 801a3bc:	f04f 0801 	mov.w	r8, #1
 801a3c0:	f106 0e02 	add.w	lr, r6, #2
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d05c      	beq.n	801a482 <_strtol_l.isra.0+0xfa>
 801a3c8:	2b10      	cmp	r3, #16
 801a3ca:	d10c      	bne.n	801a3e6 <_strtol_l.isra.0+0x5e>
 801a3cc:	2c30      	cmp	r4, #48	; 0x30
 801a3ce:	d10a      	bne.n	801a3e6 <_strtol_l.isra.0+0x5e>
 801a3d0:	f89e 4000 	ldrb.w	r4, [lr]
 801a3d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801a3d8:	2c58      	cmp	r4, #88	; 0x58
 801a3da:	d14d      	bne.n	801a478 <_strtol_l.isra.0+0xf0>
 801a3dc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801a3e0:	2310      	movs	r3, #16
 801a3e2:	f10e 0e02 	add.w	lr, lr, #2
 801a3e6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801a3ea:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801a3ee:	2600      	movs	r6, #0
 801a3f0:	fbbc f9f3 	udiv	r9, ip, r3
 801a3f4:	4635      	mov	r5, r6
 801a3f6:	fb03 ca19 	mls	sl, r3, r9, ip
 801a3fa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801a3fe:	2f09      	cmp	r7, #9
 801a400:	d818      	bhi.n	801a434 <_strtol_l.isra.0+0xac>
 801a402:	463c      	mov	r4, r7
 801a404:	42a3      	cmp	r3, r4
 801a406:	dd24      	ble.n	801a452 <_strtol_l.isra.0+0xca>
 801a408:	2e00      	cmp	r6, #0
 801a40a:	db1f      	blt.n	801a44c <_strtol_l.isra.0+0xc4>
 801a40c:	45a9      	cmp	r9, r5
 801a40e:	d31d      	bcc.n	801a44c <_strtol_l.isra.0+0xc4>
 801a410:	d101      	bne.n	801a416 <_strtol_l.isra.0+0x8e>
 801a412:	45a2      	cmp	sl, r4
 801a414:	db1a      	blt.n	801a44c <_strtol_l.isra.0+0xc4>
 801a416:	fb05 4503 	mla	r5, r5, r3, r4
 801a41a:	2601      	movs	r6, #1
 801a41c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801a420:	e7eb      	b.n	801a3fa <_strtol_l.isra.0+0x72>
 801a422:	2c2b      	cmp	r4, #43	; 0x2b
 801a424:	bf08      	it	eq
 801a426:	f89e 4000 	ldrbeq.w	r4, [lr]
 801a42a:	46a8      	mov	r8, r5
 801a42c:	bf08      	it	eq
 801a42e:	f106 0e02 	addeq.w	lr, r6, #2
 801a432:	e7c7      	b.n	801a3c4 <_strtol_l.isra.0+0x3c>
 801a434:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801a438:	2f19      	cmp	r7, #25
 801a43a:	d801      	bhi.n	801a440 <_strtol_l.isra.0+0xb8>
 801a43c:	3c37      	subs	r4, #55	; 0x37
 801a43e:	e7e1      	b.n	801a404 <_strtol_l.isra.0+0x7c>
 801a440:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801a444:	2f19      	cmp	r7, #25
 801a446:	d804      	bhi.n	801a452 <_strtol_l.isra.0+0xca>
 801a448:	3c57      	subs	r4, #87	; 0x57
 801a44a:	e7db      	b.n	801a404 <_strtol_l.isra.0+0x7c>
 801a44c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801a450:	e7e4      	b.n	801a41c <_strtol_l.isra.0+0x94>
 801a452:	2e00      	cmp	r6, #0
 801a454:	da05      	bge.n	801a462 <_strtol_l.isra.0+0xda>
 801a456:	2322      	movs	r3, #34	; 0x22
 801a458:	6003      	str	r3, [r0, #0]
 801a45a:	4665      	mov	r5, ip
 801a45c:	b942      	cbnz	r2, 801a470 <_strtol_l.isra.0+0xe8>
 801a45e:	4628      	mov	r0, r5
 801a460:	e79d      	b.n	801a39e <_strtol_l.isra.0+0x16>
 801a462:	f1b8 0f00 	cmp.w	r8, #0
 801a466:	d000      	beq.n	801a46a <_strtol_l.isra.0+0xe2>
 801a468:	426d      	negs	r5, r5
 801a46a:	2a00      	cmp	r2, #0
 801a46c:	d0f7      	beq.n	801a45e <_strtol_l.isra.0+0xd6>
 801a46e:	b10e      	cbz	r6, 801a474 <_strtol_l.isra.0+0xec>
 801a470:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801a474:	6011      	str	r1, [r2, #0]
 801a476:	e7f2      	b.n	801a45e <_strtol_l.isra.0+0xd6>
 801a478:	2430      	movs	r4, #48	; 0x30
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d1b3      	bne.n	801a3e6 <_strtol_l.isra.0+0x5e>
 801a47e:	2308      	movs	r3, #8
 801a480:	e7b1      	b.n	801a3e6 <_strtol_l.isra.0+0x5e>
 801a482:	2c30      	cmp	r4, #48	; 0x30
 801a484:	d0a4      	beq.n	801a3d0 <_strtol_l.isra.0+0x48>
 801a486:	230a      	movs	r3, #10
 801a488:	e7ad      	b.n	801a3e6 <_strtol_l.isra.0+0x5e>
 801a48a:	bf00      	nop
 801a48c:	0801ea89 	.word	0x0801ea89

0801a490 <_strtol_r>:
 801a490:	f7ff bf7a 	b.w	801a388 <_strtol_l.isra.0>

0801a494 <_strtoul_l.isra.0>:
 801a494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a498:	4e3b      	ldr	r6, [pc, #236]	; (801a588 <_strtoul_l.isra.0+0xf4>)
 801a49a:	4686      	mov	lr, r0
 801a49c:	468c      	mov	ip, r1
 801a49e:	4660      	mov	r0, ip
 801a4a0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801a4a4:	5da5      	ldrb	r5, [r4, r6]
 801a4a6:	f015 0508 	ands.w	r5, r5, #8
 801a4aa:	d1f8      	bne.n	801a49e <_strtoul_l.isra.0+0xa>
 801a4ac:	2c2d      	cmp	r4, #45	; 0x2d
 801a4ae:	d134      	bne.n	801a51a <_strtoul_l.isra.0+0x86>
 801a4b0:	f89c 4000 	ldrb.w	r4, [ip]
 801a4b4:	f04f 0801 	mov.w	r8, #1
 801a4b8:	f100 0c02 	add.w	ip, r0, #2
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d05e      	beq.n	801a57e <_strtoul_l.isra.0+0xea>
 801a4c0:	2b10      	cmp	r3, #16
 801a4c2:	d10c      	bne.n	801a4de <_strtoul_l.isra.0+0x4a>
 801a4c4:	2c30      	cmp	r4, #48	; 0x30
 801a4c6:	d10a      	bne.n	801a4de <_strtoul_l.isra.0+0x4a>
 801a4c8:	f89c 0000 	ldrb.w	r0, [ip]
 801a4cc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801a4d0:	2858      	cmp	r0, #88	; 0x58
 801a4d2:	d14f      	bne.n	801a574 <_strtoul_l.isra.0+0xe0>
 801a4d4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801a4d8:	2310      	movs	r3, #16
 801a4da:	f10c 0c02 	add.w	ip, ip, #2
 801a4de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a4e2:	2500      	movs	r5, #0
 801a4e4:	fbb7 f7f3 	udiv	r7, r7, r3
 801a4e8:	fb03 f907 	mul.w	r9, r3, r7
 801a4ec:	ea6f 0909 	mvn.w	r9, r9
 801a4f0:	4628      	mov	r0, r5
 801a4f2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801a4f6:	2e09      	cmp	r6, #9
 801a4f8:	d818      	bhi.n	801a52c <_strtoul_l.isra.0+0x98>
 801a4fa:	4634      	mov	r4, r6
 801a4fc:	42a3      	cmp	r3, r4
 801a4fe:	dd24      	ble.n	801a54a <_strtoul_l.isra.0+0xb6>
 801a500:	2d00      	cmp	r5, #0
 801a502:	db1f      	blt.n	801a544 <_strtoul_l.isra.0+0xb0>
 801a504:	4287      	cmp	r7, r0
 801a506:	d31d      	bcc.n	801a544 <_strtoul_l.isra.0+0xb0>
 801a508:	d101      	bne.n	801a50e <_strtoul_l.isra.0+0x7a>
 801a50a:	45a1      	cmp	r9, r4
 801a50c:	db1a      	blt.n	801a544 <_strtoul_l.isra.0+0xb0>
 801a50e:	fb00 4003 	mla	r0, r0, r3, r4
 801a512:	2501      	movs	r5, #1
 801a514:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801a518:	e7eb      	b.n	801a4f2 <_strtoul_l.isra.0+0x5e>
 801a51a:	2c2b      	cmp	r4, #43	; 0x2b
 801a51c:	bf08      	it	eq
 801a51e:	f89c 4000 	ldrbeq.w	r4, [ip]
 801a522:	46a8      	mov	r8, r5
 801a524:	bf08      	it	eq
 801a526:	f100 0c02 	addeq.w	ip, r0, #2
 801a52a:	e7c7      	b.n	801a4bc <_strtoul_l.isra.0+0x28>
 801a52c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801a530:	2e19      	cmp	r6, #25
 801a532:	d801      	bhi.n	801a538 <_strtoul_l.isra.0+0xa4>
 801a534:	3c37      	subs	r4, #55	; 0x37
 801a536:	e7e1      	b.n	801a4fc <_strtoul_l.isra.0+0x68>
 801a538:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801a53c:	2e19      	cmp	r6, #25
 801a53e:	d804      	bhi.n	801a54a <_strtoul_l.isra.0+0xb6>
 801a540:	3c57      	subs	r4, #87	; 0x57
 801a542:	e7db      	b.n	801a4fc <_strtoul_l.isra.0+0x68>
 801a544:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a548:	e7e4      	b.n	801a514 <_strtoul_l.isra.0+0x80>
 801a54a:	2d00      	cmp	r5, #0
 801a54c:	da07      	bge.n	801a55e <_strtoul_l.isra.0+0xca>
 801a54e:	2322      	movs	r3, #34	; 0x22
 801a550:	f8ce 3000 	str.w	r3, [lr]
 801a554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a558:	b942      	cbnz	r2, 801a56c <_strtoul_l.isra.0+0xd8>
 801a55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a55e:	f1b8 0f00 	cmp.w	r8, #0
 801a562:	d000      	beq.n	801a566 <_strtoul_l.isra.0+0xd2>
 801a564:	4240      	negs	r0, r0
 801a566:	2a00      	cmp	r2, #0
 801a568:	d0f7      	beq.n	801a55a <_strtoul_l.isra.0+0xc6>
 801a56a:	b10d      	cbz	r5, 801a570 <_strtoul_l.isra.0+0xdc>
 801a56c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 801a570:	6011      	str	r1, [r2, #0]
 801a572:	e7f2      	b.n	801a55a <_strtoul_l.isra.0+0xc6>
 801a574:	2430      	movs	r4, #48	; 0x30
 801a576:	2b00      	cmp	r3, #0
 801a578:	d1b1      	bne.n	801a4de <_strtoul_l.isra.0+0x4a>
 801a57a:	2308      	movs	r3, #8
 801a57c:	e7af      	b.n	801a4de <_strtoul_l.isra.0+0x4a>
 801a57e:	2c30      	cmp	r4, #48	; 0x30
 801a580:	d0a2      	beq.n	801a4c8 <_strtoul_l.isra.0+0x34>
 801a582:	230a      	movs	r3, #10
 801a584:	e7ab      	b.n	801a4de <_strtoul_l.isra.0+0x4a>
 801a586:	bf00      	nop
 801a588:	0801ea89 	.word	0x0801ea89

0801a58c <_strtoul_r>:
 801a58c:	f7ff bf82 	b.w	801a494 <_strtoul_l.isra.0>

0801a590 <strtoul>:
 801a590:	4613      	mov	r3, r2
 801a592:	460a      	mov	r2, r1
 801a594:	4601      	mov	r1, r0
 801a596:	4802      	ldr	r0, [pc, #8]	; (801a5a0 <strtoul+0x10>)
 801a598:	6800      	ldr	r0, [r0, #0]
 801a59a:	f7ff bf7b 	b.w	801a494 <_strtoul_l.isra.0>
 801a59e:	bf00      	nop
 801a5a0:	20000190 	.word	0x20000190

0801a5a4 <_vsniprintf_r>:
 801a5a4:	b530      	push	{r4, r5, lr}
 801a5a6:	1e14      	subs	r4, r2, #0
 801a5a8:	4605      	mov	r5, r0
 801a5aa:	b09b      	sub	sp, #108	; 0x6c
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	da05      	bge.n	801a5bc <_vsniprintf_r+0x18>
 801a5b0:	238b      	movs	r3, #139	; 0x8b
 801a5b2:	602b      	str	r3, [r5, #0]
 801a5b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a5b8:	b01b      	add	sp, #108	; 0x6c
 801a5ba:	bd30      	pop	{r4, r5, pc}
 801a5bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a5c0:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a5c4:	bf14      	ite	ne
 801a5c6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801a5ca:	4623      	moveq	r3, r4
 801a5cc:	9302      	str	r3, [sp, #8]
 801a5ce:	9305      	str	r3, [sp, #20]
 801a5d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a5d4:	9100      	str	r1, [sp, #0]
 801a5d6:	9104      	str	r1, [sp, #16]
 801a5d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a5dc:	4602      	mov	r2, r0
 801a5de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a5e0:	4669      	mov	r1, sp
 801a5e2:	4628      	mov	r0, r5
 801a5e4:	f001 fc2c 	bl	801be40 <_svfiprintf_r>
 801a5e8:	1c43      	adds	r3, r0, #1
 801a5ea:	bfbc      	itt	lt
 801a5ec:	238b      	movlt	r3, #139	; 0x8b
 801a5ee:	602b      	strlt	r3, [r5, #0]
 801a5f0:	2c00      	cmp	r4, #0
 801a5f2:	d0e1      	beq.n	801a5b8 <_vsniprintf_r+0x14>
 801a5f4:	9b00      	ldr	r3, [sp, #0]
 801a5f6:	2200      	movs	r2, #0
 801a5f8:	701a      	strb	r2, [r3, #0]
 801a5fa:	e7dd      	b.n	801a5b8 <_vsniprintf_r+0x14>

0801a5fc <vsniprintf>:
 801a5fc:	b507      	push	{r0, r1, r2, lr}
 801a5fe:	9300      	str	r3, [sp, #0]
 801a600:	4613      	mov	r3, r2
 801a602:	460a      	mov	r2, r1
 801a604:	4601      	mov	r1, r0
 801a606:	4803      	ldr	r0, [pc, #12]	; (801a614 <vsniprintf+0x18>)
 801a608:	6800      	ldr	r0, [r0, #0]
 801a60a:	f7ff ffcb 	bl	801a5a4 <_vsniprintf_r>
 801a60e:	b003      	add	sp, #12
 801a610:	f85d fb04 	ldr.w	pc, [sp], #4
 801a614:	20000190 	.word	0x20000190

0801a618 <__swbuf_r>:
 801a618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a61a:	460e      	mov	r6, r1
 801a61c:	4614      	mov	r4, r2
 801a61e:	4605      	mov	r5, r0
 801a620:	b118      	cbz	r0, 801a62a <__swbuf_r+0x12>
 801a622:	6983      	ldr	r3, [r0, #24]
 801a624:	b90b      	cbnz	r3, 801a62a <__swbuf_r+0x12>
 801a626:	f000 fa1d 	bl	801aa64 <__sinit>
 801a62a:	4b21      	ldr	r3, [pc, #132]	; (801a6b0 <__swbuf_r+0x98>)
 801a62c:	429c      	cmp	r4, r3
 801a62e:	d12b      	bne.n	801a688 <__swbuf_r+0x70>
 801a630:	686c      	ldr	r4, [r5, #4]
 801a632:	69a3      	ldr	r3, [r4, #24]
 801a634:	60a3      	str	r3, [r4, #8]
 801a636:	89a3      	ldrh	r3, [r4, #12]
 801a638:	071a      	lsls	r2, r3, #28
 801a63a:	d52f      	bpl.n	801a69c <__swbuf_r+0x84>
 801a63c:	6923      	ldr	r3, [r4, #16]
 801a63e:	b36b      	cbz	r3, 801a69c <__swbuf_r+0x84>
 801a640:	6923      	ldr	r3, [r4, #16]
 801a642:	6820      	ldr	r0, [r4, #0]
 801a644:	1ac0      	subs	r0, r0, r3
 801a646:	6963      	ldr	r3, [r4, #20]
 801a648:	b2f6      	uxtb	r6, r6
 801a64a:	4283      	cmp	r3, r0
 801a64c:	4637      	mov	r7, r6
 801a64e:	dc04      	bgt.n	801a65a <__swbuf_r+0x42>
 801a650:	4621      	mov	r1, r4
 801a652:	4628      	mov	r0, r5
 801a654:	f000 f972 	bl	801a93c <_fflush_r>
 801a658:	bb30      	cbnz	r0, 801a6a8 <__swbuf_r+0x90>
 801a65a:	68a3      	ldr	r3, [r4, #8]
 801a65c:	3b01      	subs	r3, #1
 801a65e:	60a3      	str	r3, [r4, #8]
 801a660:	6823      	ldr	r3, [r4, #0]
 801a662:	1c5a      	adds	r2, r3, #1
 801a664:	6022      	str	r2, [r4, #0]
 801a666:	701e      	strb	r6, [r3, #0]
 801a668:	6963      	ldr	r3, [r4, #20]
 801a66a:	3001      	adds	r0, #1
 801a66c:	4283      	cmp	r3, r0
 801a66e:	d004      	beq.n	801a67a <__swbuf_r+0x62>
 801a670:	89a3      	ldrh	r3, [r4, #12]
 801a672:	07db      	lsls	r3, r3, #31
 801a674:	d506      	bpl.n	801a684 <__swbuf_r+0x6c>
 801a676:	2e0a      	cmp	r6, #10
 801a678:	d104      	bne.n	801a684 <__swbuf_r+0x6c>
 801a67a:	4621      	mov	r1, r4
 801a67c:	4628      	mov	r0, r5
 801a67e:	f000 f95d 	bl	801a93c <_fflush_r>
 801a682:	b988      	cbnz	r0, 801a6a8 <__swbuf_r+0x90>
 801a684:	4638      	mov	r0, r7
 801a686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a688:	4b0a      	ldr	r3, [pc, #40]	; (801a6b4 <__swbuf_r+0x9c>)
 801a68a:	429c      	cmp	r4, r3
 801a68c:	d101      	bne.n	801a692 <__swbuf_r+0x7a>
 801a68e:	68ac      	ldr	r4, [r5, #8]
 801a690:	e7cf      	b.n	801a632 <__swbuf_r+0x1a>
 801a692:	4b09      	ldr	r3, [pc, #36]	; (801a6b8 <__swbuf_r+0xa0>)
 801a694:	429c      	cmp	r4, r3
 801a696:	bf08      	it	eq
 801a698:	68ec      	ldreq	r4, [r5, #12]
 801a69a:	e7ca      	b.n	801a632 <__swbuf_r+0x1a>
 801a69c:	4621      	mov	r1, r4
 801a69e:	4628      	mov	r0, r5
 801a6a0:	f000 f81e 	bl	801a6e0 <__swsetup_r>
 801a6a4:	2800      	cmp	r0, #0
 801a6a6:	d0cb      	beq.n	801a640 <__swbuf_r+0x28>
 801a6a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a6ac:	e7ea      	b.n	801a684 <__swbuf_r+0x6c>
 801a6ae:	bf00      	nop
 801a6b0:	0801ecc4 	.word	0x0801ecc4
 801a6b4:	0801ece4 	.word	0x0801ece4
 801a6b8:	0801eca4 	.word	0x0801eca4

0801a6bc <_write_r>:
 801a6bc:	b538      	push	{r3, r4, r5, lr}
 801a6be:	4d07      	ldr	r5, [pc, #28]	; (801a6dc <_write_r+0x20>)
 801a6c0:	4604      	mov	r4, r0
 801a6c2:	4608      	mov	r0, r1
 801a6c4:	4611      	mov	r1, r2
 801a6c6:	2200      	movs	r2, #0
 801a6c8:	602a      	str	r2, [r5, #0]
 801a6ca:	461a      	mov	r2, r3
 801a6cc:	f7e8 fe11 	bl	80032f2 <_write>
 801a6d0:	1c43      	adds	r3, r0, #1
 801a6d2:	d102      	bne.n	801a6da <_write_r+0x1e>
 801a6d4:	682b      	ldr	r3, [r5, #0]
 801a6d6:	b103      	cbz	r3, 801a6da <_write_r+0x1e>
 801a6d8:	6023      	str	r3, [r4, #0]
 801a6da:	bd38      	pop	{r3, r4, r5, pc}
 801a6dc:	2001600c 	.word	0x2001600c

0801a6e0 <__swsetup_r>:
 801a6e0:	4b32      	ldr	r3, [pc, #200]	; (801a7ac <__swsetup_r+0xcc>)
 801a6e2:	b570      	push	{r4, r5, r6, lr}
 801a6e4:	681d      	ldr	r5, [r3, #0]
 801a6e6:	4606      	mov	r6, r0
 801a6e8:	460c      	mov	r4, r1
 801a6ea:	b125      	cbz	r5, 801a6f6 <__swsetup_r+0x16>
 801a6ec:	69ab      	ldr	r3, [r5, #24]
 801a6ee:	b913      	cbnz	r3, 801a6f6 <__swsetup_r+0x16>
 801a6f0:	4628      	mov	r0, r5
 801a6f2:	f000 f9b7 	bl	801aa64 <__sinit>
 801a6f6:	4b2e      	ldr	r3, [pc, #184]	; (801a7b0 <__swsetup_r+0xd0>)
 801a6f8:	429c      	cmp	r4, r3
 801a6fa:	d10f      	bne.n	801a71c <__swsetup_r+0x3c>
 801a6fc:	686c      	ldr	r4, [r5, #4]
 801a6fe:	89a3      	ldrh	r3, [r4, #12]
 801a700:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a704:	0719      	lsls	r1, r3, #28
 801a706:	d42c      	bmi.n	801a762 <__swsetup_r+0x82>
 801a708:	06dd      	lsls	r5, r3, #27
 801a70a:	d411      	bmi.n	801a730 <__swsetup_r+0x50>
 801a70c:	2309      	movs	r3, #9
 801a70e:	6033      	str	r3, [r6, #0]
 801a710:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a714:	81a3      	strh	r3, [r4, #12]
 801a716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a71a:	e03e      	b.n	801a79a <__swsetup_r+0xba>
 801a71c:	4b25      	ldr	r3, [pc, #148]	; (801a7b4 <__swsetup_r+0xd4>)
 801a71e:	429c      	cmp	r4, r3
 801a720:	d101      	bne.n	801a726 <__swsetup_r+0x46>
 801a722:	68ac      	ldr	r4, [r5, #8]
 801a724:	e7eb      	b.n	801a6fe <__swsetup_r+0x1e>
 801a726:	4b24      	ldr	r3, [pc, #144]	; (801a7b8 <__swsetup_r+0xd8>)
 801a728:	429c      	cmp	r4, r3
 801a72a:	bf08      	it	eq
 801a72c:	68ec      	ldreq	r4, [r5, #12]
 801a72e:	e7e6      	b.n	801a6fe <__swsetup_r+0x1e>
 801a730:	0758      	lsls	r0, r3, #29
 801a732:	d512      	bpl.n	801a75a <__swsetup_r+0x7a>
 801a734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a736:	b141      	cbz	r1, 801a74a <__swsetup_r+0x6a>
 801a738:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a73c:	4299      	cmp	r1, r3
 801a73e:	d002      	beq.n	801a746 <__swsetup_r+0x66>
 801a740:	4630      	mov	r0, r6
 801a742:	f7fe fb87 	bl	8018e54 <_free_r>
 801a746:	2300      	movs	r3, #0
 801a748:	6363      	str	r3, [r4, #52]	; 0x34
 801a74a:	89a3      	ldrh	r3, [r4, #12]
 801a74c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a750:	81a3      	strh	r3, [r4, #12]
 801a752:	2300      	movs	r3, #0
 801a754:	6063      	str	r3, [r4, #4]
 801a756:	6923      	ldr	r3, [r4, #16]
 801a758:	6023      	str	r3, [r4, #0]
 801a75a:	89a3      	ldrh	r3, [r4, #12]
 801a75c:	f043 0308 	orr.w	r3, r3, #8
 801a760:	81a3      	strh	r3, [r4, #12]
 801a762:	6923      	ldr	r3, [r4, #16]
 801a764:	b94b      	cbnz	r3, 801a77a <__swsetup_r+0x9a>
 801a766:	89a3      	ldrh	r3, [r4, #12]
 801a768:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a76c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a770:	d003      	beq.n	801a77a <__swsetup_r+0x9a>
 801a772:	4621      	mov	r1, r4
 801a774:	4630      	mov	r0, r6
 801a776:	f000 fdc9 	bl	801b30c <__smakebuf_r>
 801a77a:	89a0      	ldrh	r0, [r4, #12]
 801a77c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a780:	f010 0301 	ands.w	r3, r0, #1
 801a784:	d00a      	beq.n	801a79c <__swsetup_r+0xbc>
 801a786:	2300      	movs	r3, #0
 801a788:	60a3      	str	r3, [r4, #8]
 801a78a:	6963      	ldr	r3, [r4, #20]
 801a78c:	425b      	negs	r3, r3
 801a78e:	61a3      	str	r3, [r4, #24]
 801a790:	6923      	ldr	r3, [r4, #16]
 801a792:	b943      	cbnz	r3, 801a7a6 <__swsetup_r+0xc6>
 801a794:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a798:	d1ba      	bne.n	801a710 <__swsetup_r+0x30>
 801a79a:	bd70      	pop	{r4, r5, r6, pc}
 801a79c:	0781      	lsls	r1, r0, #30
 801a79e:	bf58      	it	pl
 801a7a0:	6963      	ldrpl	r3, [r4, #20]
 801a7a2:	60a3      	str	r3, [r4, #8]
 801a7a4:	e7f4      	b.n	801a790 <__swsetup_r+0xb0>
 801a7a6:	2000      	movs	r0, #0
 801a7a8:	e7f7      	b.n	801a79a <__swsetup_r+0xba>
 801a7aa:	bf00      	nop
 801a7ac:	20000190 	.word	0x20000190
 801a7b0:	0801ecc4 	.word	0x0801ecc4
 801a7b4:	0801ece4 	.word	0x0801ece4
 801a7b8:	0801eca4 	.word	0x0801eca4

0801a7bc <__assert_func>:
 801a7bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a7be:	4614      	mov	r4, r2
 801a7c0:	461a      	mov	r2, r3
 801a7c2:	4b09      	ldr	r3, [pc, #36]	; (801a7e8 <__assert_func+0x2c>)
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	4605      	mov	r5, r0
 801a7c8:	68d8      	ldr	r0, [r3, #12]
 801a7ca:	b14c      	cbz	r4, 801a7e0 <__assert_func+0x24>
 801a7cc:	4b07      	ldr	r3, [pc, #28]	; (801a7ec <__assert_func+0x30>)
 801a7ce:	9100      	str	r1, [sp, #0]
 801a7d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a7d4:	4906      	ldr	r1, [pc, #24]	; (801a7f0 <__assert_func+0x34>)
 801a7d6:	462b      	mov	r3, r5
 801a7d8:	f000 f9c2 	bl	801ab60 <fiprintf>
 801a7dc:	f002 fad9 	bl	801cd92 <abort>
 801a7e0:	4b04      	ldr	r3, [pc, #16]	; (801a7f4 <__assert_func+0x38>)
 801a7e2:	461c      	mov	r4, r3
 801a7e4:	e7f3      	b.n	801a7ce <__assert_func+0x12>
 801a7e6:	bf00      	nop
 801a7e8:	20000190 	.word	0x20000190
 801a7ec:	0801ec68 	.word	0x0801ec68
 801a7f0:	0801ec75 	.word	0x0801ec75
 801a7f4:	0801eca3 	.word	0x0801eca3

0801a7f8 <_close_r>:
 801a7f8:	b538      	push	{r3, r4, r5, lr}
 801a7fa:	4d06      	ldr	r5, [pc, #24]	; (801a814 <_close_r+0x1c>)
 801a7fc:	2300      	movs	r3, #0
 801a7fe:	4604      	mov	r4, r0
 801a800:	4608      	mov	r0, r1
 801a802:	602b      	str	r3, [r5, #0]
 801a804:	f7e8 fd91 	bl	800332a <_close>
 801a808:	1c43      	adds	r3, r0, #1
 801a80a:	d102      	bne.n	801a812 <_close_r+0x1a>
 801a80c:	682b      	ldr	r3, [r5, #0]
 801a80e:	b103      	cbz	r3, 801a812 <_close_r+0x1a>
 801a810:	6023      	str	r3, [r4, #0]
 801a812:	bd38      	pop	{r3, r4, r5, pc}
 801a814:	2001600c 	.word	0x2001600c

0801a818 <__env_lock>:
 801a818:	4801      	ldr	r0, [pc, #4]	; (801a820 <__env_lock+0x8>)
 801a81a:	f7fe bac8 	b.w	8018dae <__retarget_lock_acquire_recursive>
 801a81e:	bf00      	nop
 801a820:	20016002 	.word	0x20016002

0801a824 <__env_unlock>:
 801a824:	4801      	ldr	r0, [pc, #4]	; (801a82c <__env_unlock+0x8>)
 801a826:	f7fe bac3 	b.w	8018db0 <__retarget_lock_release_recursive>
 801a82a:	bf00      	nop
 801a82c:	20016002 	.word	0x20016002

0801a830 <__sflush_r>:
 801a830:	898a      	ldrh	r2, [r1, #12]
 801a832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a836:	4605      	mov	r5, r0
 801a838:	0710      	lsls	r0, r2, #28
 801a83a:	460c      	mov	r4, r1
 801a83c:	d458      	bmi.n	801a8f0 <__sflush_r+0xc0>
 801a83e:	684b      	ldr	r3, [r1, #4]
 801a840:	2b00      	cmp	r3, #0
 801a842:	dc05      	bgt.n	801a850 <__sflush_r+0x20>
 801a844:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a846:	2b00      	cmp	r3, #0
 801a848:	dc02      	bgt.n	801a850 <__sflush_r+0x20>
 801a84a:	2000      	movs	r0, #0
 801a84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a852:	2e00      	cmp	r6, #0
 801a854:	d0f9      	beq.n	801a84a <__sflush_r+0x1a>
 801a856:	2300      	movs	r3, #0
 801a858:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a85c:	682f      	ldr	r7, [r5, #0]
 801a85e:	602b      	str	r3, [r5, #0]
 801a860:	d032      	beq.n	801a8c8 <__sflush_r+0x98>
 801a862:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a864:	89a3      	ldrh	r3, [r4, #12]
 801a866:	075a      	lsls	r2, r3, #29
 801a868:	d505      	bpl.n	801a876 <__sflush_r+0x46>
 801a86a:	6863      	ldr	r3, [r4, #4]
 801a86c:	1ac0      	subs	r0, r0, r3
 801a86e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a870:	b10b      	cbz	r3, 801a876 <__sflush_r+0x46>
 801a872:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a874:	1ac0      	subs	r0, r0, r3
 801a876:	2300      	movs	r3, #0
 801a878:	4602      	mov	r2, r0
 801a87a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a87c:	6a21      	ldr	r1, [r4, #32]
 801a87e:	4628      	mov	r0, r5
 801a880:	47b0      	blx	r6
 801a882:	1c43      	adds	r3, r0, #1
 801a884:	89a3      	ldrh	r3, [r4, #12]
 801a886:	d106      	bne.n	801a896 <__sflush_r+0x66>
 801a888:	6829      	ldr	r1, [r5, #0]
 801a88a:	291d      	cmp	r1, #29
 801a88c:	d82c      	bhi.n	801a8e8 <__sflush_r+0xb8>
 801a88e:	4a2a      	ldr	r2, [pc, #168]	; (801a938 <__sflush_r+0x108>)
 801a890:	40ca      	lsrs	r2, r1
 801a892:	07d6      	lsls	r6, r2, #31
 801a894:	d528      	bpl.n	801a8e8 <__sflush_r+0xb8>
 801a896:	2200      	movs	r2, #0
 801a898:	6062      	str	r2, [r4, #4]
 801a89a:	04d9      	lsls	r1, r3, #19
 801a89c:	6922      	ldr	r2, [r4, #16]
 801a89e:	6022      	str	r2, [r4, #0]
 801a8a0:	d504      	bpl.n	801a8ac <__sflush_r+0x7c>
 801a8a2:	1c42      	adds	r2, r0, #1
 801a8a4:	d101      	bne.n	801a8aa <__sflush_r+0x7a>
 801a8a6:	682b      	ldr	r3, [r5, #0]
 801a8a8:	b903      	cbnz	r3, 801a8ac <__sflush_r+0x7c>
 801a8aa:	6560      	str	r0, [r4, #84]	; 0x54
 801a8ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a8ae:	602f      	str	r7, [r5, #0]
 801a8b0:	2900      	cmp	r1, #0
 801a8b2:	d0ca      	beq.n	801a84a <__sflush_r+0x1a>
 801a8b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a8b8:	4299      	cmp	r1, r3
 801a8ba:	d002      	beq.n	801a8c2 <__sflush_r+0x92>
 801a8bc:	4628      	mov	r0, r5
 801a8be:	f7fe fac9 	bl	8018e54 <_free_r>
 801a8c2:	2000      	movs	r0, #0
 801a8c4:	6360      	str	r0, [r4, #52]	; 0x34
 801a8c6:	e7c1      	b.n	801a84c <__sflush_r+0x1c>
 801a8c8:	6a21      	ldr	r1, [r4, #32]
 801a8ca:	2301      	movs	r3, #1
 801a8cc:	4628      	mov	r0, r5
 801a8ce:	47b0      	blx	r6
 801a8d0:	1c41      	adds	r1, r0, #1
 801a8d2:	d1c7      	bne.n	801a864 <__sflush_r+0x34>
 801a8d4:	682b      	ldr	r3, [r5, #0]
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d0c4      	beq.n	801a864 <__sflush_r+0x34>
 801a8da:	2b1d      	cmp	r3, #29
 801a8dc:	d001      	beq.n	801a8e2 <__sflush_r+0xb2>
 801a8de:	2b16      	cmp	r3, #22
 801a8e0:	d101      	bne.n	801a8e6 <__sflush_r+0xb6>
 801a8e2:	602f      	str	r7, [r5, #0]
 801a8e4:	e7b1      	b.n	801a84a <__sflush_r+0x1a>
 801a8e6:	89a3      	ldrh	r3, [r4, #12]
 801a8e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a8ec:	81a3      	strh	r3, [r4, #12]
 801a8ee:	e7ad      	b.n	801a84c <__sflush_r+0x1c>
 801a8f0:	690f      	ldr	r7, [r1, #16]
 801a8f2:	2f00      	cmp	r7, #0
 801a8f4:	d0a9      	beq.n	801a84a <__sflush_r+0x1a>
 801a8f6:	0793      	lsls	r3, r2, #30
 801a8f8:	680e      	ldr	r6, [r1, #0]
 801a8fa:	bf08      	it	eq
 801a8fc:	694b      	ldreq	r3, [r1, #20]
 801a8fe:	600f      	str	r7, [r1, #0]
 801a900:	bf18      	it	ne
 801a902:	2300      	movne	r3, #0
 801a904:	eba6 0807 	sub.w	r8, r6, r7
 801a908:	608b      	str	r3, [r1, #8]
 801a90a:	f1b8 0f00 	cmp.w	r8, #0
 801a90e:	dd9c      	ble.n	801a84a <__sflush_r+0x1a>
 801a910:	6a21      	ldr	r1, [r4, #32]
 801a912:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a914:	4643      	mov	r3, r8
 801a916:	463a      	mov	r2, r7
 801a918:	4628      	mov	r0, r5
 801a91a:	47b0      	blx	r6
 801a91c:	2800      	cmp	r0, #0
 801a91e:	dc06      	bgt.n	801a92e <__sflush_r+0xfe>
 801a920:	89a3      	ldrh	r3, [r4, #12]
 801a922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a926:	81a3      	strh	r3, [r4, #12]
 801a928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a92c:	e78e      	b.n	801a84c <__sflush_r+0x1c>
 801a92e:	4407      	add	r7, r0
 801a930:	eba8 0800 	sub.w	r8, r8, r0
 801a934:	e7e9      	b.n	801a90a <__sflush_r+0xda>
 801a936:	bf00      	nop
 801a938:	20400001 	.word	0x20400001

0801a93c <_fflush_r>:
 801a93c:	b538      	push	{r3, r4, r5, lr}
 801a93e:	690b      	ldr	r3, [r1, #16]
 801a940:	4605      	mov	r5, r0
 801a942:	460c      	mov	r4, r1
 801a944:	b913      	cbnz	r3, 801a94c <_fflush_r+0x10>
 801a946:	2500      	movs	r5, #0
 801a948:	4628      	mov	r0, r5
 801a94a:	bd38      	pop	{r3, r4, r5, pc}
 801a94c:	b118      	cbz	r0, 801a956 <_fflush_r+0x1a>
 801a94e:	6983      	ldr	r3, [r0, #24]
 801a950:	b90b      	cbnz	r3, 801a956 <_fflush_r+0x1a>
 801a952:	f000 f887 	bl	801aa64 <__sinit>
 801a956:	4b14      	ldr	r3, [pc, #80]	; (801a9a8 <_fflush_r+0x6c>)
 801a958:	429c      	cmp	r4, r3
 801a95a:	d11b      	bne.n	801a994 <_fflush_r+0x58>
 801a95c:	686c      	ldr	r4, [r5, #4]
 801a95e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a962:	2b00      	cmp	r3, #0
 801a964:	d0ef      	beq.n	801a946 <_fflush_r+0xa>
 801a966:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a968:	07d0      	lsls	r0, r2, #31
 801a96a:	d404      	bmi.n	801a976 <_fflush_r+0x3a>
 801a96c:	0599      	lsls	r1, r3, #22
 801a96e:	d402      	bmi.n	801a976 <_fflush_r+0x3a>
 801a970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a972:	f7fe fa1c 	bl	8018dae <__retarget_lock_acquire_recursive>
 801a976:	4628      	mov	r0, r5
 801a978:	4621      	mov	r1, r4
 801a97a:	f7ff ff59 	bl	801a830 <__sflush_r>
 801a97e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a980:	07da      	lsls	r2, r3, #31
 801a982:	4605      	mov	r5, r0
 801a984:	d4e0      	bmi.n	801a948 <_fflush_r+0xc>
 801a986:	89a3      	ldrh	r3, [r4, #12]
 801a988:	059b      	lsls	r3, r3, #22
 801a98a:	d4dd      	bmi.n	801a948 <_fflush_r+0xc>
 801a98c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a98e:	f7fe fa0f 	bl	8018db0 <__retarget_lock_release_recursive>
 801a992:	e7d9      	b.n	801a948 <_fflush_r+0xc>
 801a994:	4b05      	ldr	r3, [pc, #20]	; (801a9ac <_fflush_r+0x70>)
 801a996:	429c      	cmp	r4, r3
 801a998:	d101      	bne.n	801a99e <_fflush_r+0x62>
 801a99a:	68ac      	ldr	r4, [r5, #8]
 801a99c:	e7df      	b.n	801a95e <_fflush_r+0x22>
 801a99e:	4b04      	ldr	r3, [pc, #16]	; (801a9b0 <_fflush_r+0x74>)
 801a9a0:	429c      	cmp	r4, r3
 801a9a2:	bf08      	it	eq
 801a9a4:	68ec      	ldreq	r4, [r5, #12]
 801a9a6:	e7da      	b.n	801a95e <_fflush_r+0x22>
 801a9a8:	0801ecc4 	.word	0x0801ecc4
 801a9ac:	0801ece4 	.word	0x0801ece4
 801a9b0:	0801eca4 	.word	0x0801eca4

0801a9b4 <std>:
 801a9b4:	2300      	movs	r3, #0
 801a9b6:	b510      	push	{r4, lr}
 801a9b8:	4604      	mov	r4, r0
 801a9ba:	e9c0 3300 	strd	r3, r3, [r0]
 801a9be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a9c2:	6083      	str	r3, [r0, #8]
 801a9c4:	8181      	strh	r1, [r0, #12]
 801a9c6:	6643      	str	r3, [r0, #100]	; 0x64
 801a9c8:	81c2      	strh	r2, [r0, #14]
 801a9ca:	6183      	str	r3, [r0, #24]
 801a9cc:	4619      	mov	r1, r3
 801a9ce:	2208      	movs	r2, #8
 801a9d0:	305c      	adds	r0, #92	; 0x5c
 801a9d2:	f7fe fa27 	bl	8018e24 <memset>
 801a9d6:	4b05      	ldr	r3, [pc, #20]	; (801a9ec <std+0x38>)
 801a9d8:	6263      	str	r3, [r4, #36]	; 0x24
 801a9da:	4b05      	ldr	r3, [pc, #20]	; (801a9f0 <std+0x3c>)
 801a9dc:	62a3      	str	r3, [r4, #40]	; 0x28
 801a9de:	4b05      	ldr	r3, [pc, #20]	; (801a9f4 <std+0x40>)
 801a9e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a9e2:	4b05      	ldr	r3, [pc, #20]	; (801a9f8 <std+0x44>)
 801a9e4:	6224      	str	r4, [r4, #32]
 801a9e6:	6323      	str	r3, [r4, #48]	; 0x30
 801a9e8:	bd10      	pop	{r4, pc}
 801a9ea:	bf00      	nop
 801a9ec:	08019611 	.word	0x08019611
 801a9f0:	08019637 	.word	0x08019637
 801a9f4:	0801966f 	.word	0x0801966f
 801a9f8:	08019693 	.word	0x08019693

0801a9fc <_cleanup_r>:
 801a9fc:	4901      	ldr	r1, [pc, #4]	; (801aa04 <_cleanup_r+0x8>)
 801a9fe:	f000 b8c1 	b.w	801ab84 <_fwalk_reent>
 801aa02:	bf00      	nop
 801aa04:	0801a93d 	.word	0x0801a93d

0801aa08 <__sfmoreglue>:
 801aa08:	b570      	push	{r4, r5, r6, lr}
 801aa0a:	1e4a      	subs	r2, r1, #1
 801aa0c:	2568      	movs	r5, #104	; 0x68
 801aa0e:	4355      	muls	r5, r2
 801aa10:	460e      	mov	r6, r1
 801aa12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801aa16:	f7fe fa6d 	bl	8018ef4 <_malloc_r>
 801aa1a:	4604      	mov	r4, r0
 801aa1c:	b140      	cbz	r0, 801aa30 <__sfmoreglue+0x28>
 801aa1e:	2100      	movs	r1, #0
 801aa20:	e9c0 1600 	strd	r1, r6, [r0]
 801aa24:	300c      	adds	r0, #12
 801aa26:	60a0      	str	r0, [r4, #8]
 801aa28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801aa2c:	f7fe f9fa 	bl	8018e24 <memset>
 801aa30:	4620      	mov	r0, r4
 801aa32:	bd70      	pop	{r4, r5, r6, pc}

0801aa34 <__sfp_lock_acquire>:
 801aa34:	4801      	ldr	r0, [pc, #4]	; (801aa3c <__sfp_lock_acquire+0x8>)
 801aa36:	f7fe b9ba 	b.w	8018dae <__retarget_lock_acquire_recursive>
 801aa3a:	bf00      	nop
 801aa3c:	20016008 	.word	0x20016008

0801aa40 <__sfp_lock_release>:
 801aa40:	4801      	ldr	r0, [pc, #4]	; (801aa48 <__sfp_lock_release+0x8>)
 801aa42:	f7fe b9b5 	b.w	8018db0 <__retarget_lock_release_recursive>
 801aa46:	bf00      	nop
 801aa48:	20016008 	.word	0x20016008

0801aa4c <__sinit_lock_acquire>:
 801aa4c:	4801      	ldr	r0, [pc, #4]	; (801aa54 <__sinit_lock_acquire+0x8>)
 801aa4e:	f7fe b9ae 	b.w	8018dae <__retarget_lock_acquire_recursive>
 801aa52:	bf00      	nop
 801aa54:	20016003 	.word	0x20016003

0801aa58 <__sinit_lock_release>:
 801aa58:	4801      	ldr	r0, [pc, #4]	; (801aa60 <__sinit_lock_release+0x8>)
 801aa5a:	f7fe b9a9 	b.w	8018db0 <__retarget_lock_release_recursive>
 801aa5e:	bf00      	nop
 801aa60:	20016003 	.word	0x20016003

0801aa64 <__sinit>:
 801aa64:	b510      	push	{r4, lr}
 801aa66:	4604      	mov	r4, r0
 801aa68:	f7ff fff0 	bl	801aa4c <__sinit_lock_acquire>
 801aa6c:	69a3      	ldr	r3, [r4, #24]
 801aa6e:	b11b      	cbz	r3, 801aa78 <__sinit+0x14>
 801aa70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa74:	f7ff bff0 	b.w	801aa58 <__sinit_lock_release>
 801aa78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801aa7c:	6523      	str	r3, [r4, #80]	; 0x50
 801aa7e:	4b13      	ldr	r3, [pc, #76]	; (801aacc <__sinit+0x68>)
 801aa80:	4a13      	ldr	r2, [pc, #76]	; (801aad0 <__sinit+0x6c>)
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	62a2      	str	r2, [r4, #40]	; 0x28
 801aa86:	42a3      	cmp	r3, r4
 801aa88:	bf04      	itt	eq
 801aa8a:	2301      	moveq	r3, #1
 801aa8c:	61a3      	streq	r3, [r4, #24]
 801aa8e:	4620      	mov	r0, r4
 801aa90:	f000 f820 	bl	801aad4 <__sfp>
 801aa94:	6060      	str	r0, [r4, #4]
 801aa96:	4620      	mov	r0, r4
 801aa98:	f000 f81c 	bl	801aad4 <__sfp>
 801aa9c:	60a0      	str	r0, [r4, #8]
 801aa9e:	4620      	mov	r0, r4
 801aaa0:	f000 f818 	bl	801aad4 <__sfp>
 801aaa4:	2200      	movs	r2, #0
 801aaa6:	60e0      	str	r0, [r4, #12]
 801aaa8:	2104      	movs	r1, #4
 801aaaa:	6860      	ldr	r0, [r4, #4]
 801aaac:	f7ff ff82 	bl	801a9b4 <std>
 801aab0:	68a0      	ldr	r0, [r4, #8]
 801aab2:	2201      	movs	r2, #1
 801aab4:	2109      	movs	r1, #9
 801aab6:	f7ff ff7d 	bl	801a9b4 <std>
 801aaba:	68e0      	ldr	r0, [r4, #12]
 801aabc:	2202      	movs	r2, #2
 801aabe:	2112      	movs	r1, #18
 801aac0:	f7ff ff78 	bl	801a9b4 <std>
 801aac4:	2301      	movs	r3, #1
 801aac6:	61a3      	str	r3, [r4, #24]
 801aac8:	e7d2      	b.n	801aa70 <__sinit+0xc>
 801aaca:	bf00      	nop
 801aacc:	0801eb8c 	.word	0x0801eb8c
 801aad0:	0801a9fd 	.word	0x0801a9fd

0801aad4 <__sfp>:
 801aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aad6:	4607      	mov	r7, r0
 801aad8:	f7ff ffac 	bl	801aa34 <__sfp_lock_acquire>
 801aadc:	4b1e      	ldr	r3, [pc, #120]	; (801ab58 <__sfp+0x84>)
 801aade:	681e      	ldr	r6, [r3, #0]
 801aae0:	69b3      	ldr	r3, [r6, #24]
 801aae2:	b913      	cbnz	r3, 801aaea <__sfp+0x16>
 801aae4:	4630      	mov	r0, r6
 801aae6:	f7ff ffbd 	bl	801aa64 <__sinit>
 801aaea:	3648      	adds	r6, #72	; 0x48
 801aaec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801aaf0:	3b01      	subs	r3, #1
 801aaf2:	d503      	bpl.n	801aafc <__sfp+0x28>
 801aaf4:	6833      	ldr	r3, [r6, #0]
 801aaf6:	b30b      	cbz	r3, 801ab3c <__sfp+0x68>
 801aaf8:	6836      	ldr	r6, [r6, #0]
 801aafa:	e7f7      	b.n	801aaec <__sfp+0x18>
 801aafc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ab00:	b9d5      	cbnz	r5, 801ab38 <__sfp+0x64>
 801ab02:	4b16      	ldr	r3, [pc, #88]	; (801ab5c <__sfp+0x88>)
 801ab04:	60e3      	str	r3, [r4, #12]
 801ab06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ab0a:	6665      	str	r5, [r4, #100]	; 0x64
 801ab0c:	f7fe f94e 	bl	8018dac <__retarget_lock_init_recursive>
 801ab10:	f7ff ff96 	bl	801aa40 <__sfp_lock_release>
 801ab14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ab18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ab1c:	6025      	str	r5, [r4, #0]
 801ab1e:	61a5      	str	r5, [r4, #24]
 801ab20:	2208      	movs	r2, #8
 801ab22:	4629      	mov	r1, r5
 801ab24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ab28:	f7fe f97c 	bl	8018e24 <memset>
 801ab2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ab30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ab34:	4620      	mov	r0, r4
 801ab36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab38:	3468      	adds	r4, #104	; 0x68
 801ab3a:	e7d9      	b.n	801aaf0 <__sfp+0x1c>
 801ab3c:	2104      	movs	r1, #4
 801ab3e:	4638      	mov	r0, r7
 801ab40:	f7ff ff62 	bl	801aa08 <__sfmoreglue>
 801ab44:	4604      	mov	r4, r0
 801ab46:	6030      	str	r0, [r6, #0]
 801ab48:	2800      	cmp	r0, #0
 801ab4a:	d1d5      	bne.n	801aaf8 <__sfp+0x24>
 801ab4c:	f7ff ff78 	bl	801aa40 <__sfp_lock_release>
 801ab50:	230c      	movs	r3, #12
 801ab52:	603b      	str	r3, [r7, #0]
 801ab54:	e7ee      	b.n	801ab34 <__sfp+0x60>
 801ab56:	bf00      	nop
 801ab58:	0801eb8c 	.word	0x0801eb8c
 801ab5c:	ffff0001 	.word	0xffff0001

0801ab60 <fiprintf>:
 801ab60:	b40e      	push	{r1, r2, r3}
 801ab62:	b503      	push	{r0, r1, lr}
 801ab64:	4601      	mov	r1, r0
 801ab66:	ab03      	add	r3, sp, #12
 801ab68:	4805      	ldr	r0, [pc, #20]	; (801ab80 <fiprintf+0x20>)
 801ab6a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ab6e:	6800      	ldr	r0, [r0, #0]
 801ab70:	9301      	str	r3, [sp, #4]
 801ab72:	f001 fc61 	bl	801c438 <_vfiprintf_r>
 801ab76:	b002      	add	sp, #8
 801ab78:	f85d eb04 	ldr.w	lr, [sp], #4
 801ab7c:	b003      	add	sp, #12
 801ab7e:	4770      	bx	lr
 801ab80:	20000190 	.word	0x20000190

0801ab84 <_fwalk_reent>:
 801ab84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab88:	4606      	mov	r6, r0
 801ab8a:	4688      	mov	r8, r1
 801ab8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ab90:	2700      	movs	r7, #0
 801ab92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ab96:	f1b9 0901 	subs.w	r9, r9, #1
 801ab9a:	d505      	bpl.n	801aba8 <_fwalk_reent+0x24>
 801ab9c:	6824      	ldr	r4, [r4, #0]
 801ab9e:	2c00      	cmp	r4, #0
 801aba0:	d1f7      	bne.n	801ab92 <_fwalk_reent+0xe>
 801aba2:	4638      	mov	r0, r7
 801aba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aba8:	89ab      	ldrh	r3, [r5, #12]
 801abaa:	2b01      	cmp	r3, #1
 801abac:	d907      	bls.n	801abbe <_fwalk_reent+0x3a>
 801abae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801abb2:	3301      	adds	r3, #1
 801abb4:	d003      	beq.n	801abbe <_fwalk_reent+0x3a>
 801abb6:	4629      	mov	r1, r5
 801abb8:	4630      	mov	r0, r6
 801abba:	47c0      	blx	r8
 801abbc:	4307      	orrs	r7, r0
 801abbe:	3568      	adds	r5, #104	; 0x68
 801abc0:	e7e9      	b.n	801ab96 <_fwalk_reent+0x12>

0801abc2 <rshift>:
 801abc2:	6903      	ldr	r3, [r0, #16]
 801abc4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801abc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801abcc:	ea4f 1261 	mov.w	r2, r1, asr #5
 801abd0:	f100 0414 	add.w	r4, r0, #20
 801abd4:	dd45      	ble.n	801ac62 <rshift+0xa0>
 801abd6:	f011 011f 	ands.w	r1, r1, #31
 801abda:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801abde:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801abe2:	d10c      	bne.n	801abfe <rshift+0x3c>
 801abe4:	f100 0710 	add.w	r7, r0, #16
 801abe8:	4629      	mov	r1, r5
 801abea:	42b1      	cmp	r1, r6
 801abec:	d334      	bcc.n	801ac58 <rshift+0x96>
 801abee:	1a9b      	subs	r3, r3, r2
 801abf0:	009b      	lsls	r3, r3, #2
 801abf2:	1eea      	subs	r2, r5, #3
 801abf4:	4296      	cmp	r6, r2
 801abf6:	bf38      	it	cc
 801abf8:	2300      	movcc	r3, #0
 801abfa:	4423      	add	r3, r4
 801abfc:	e015      	b.n	801ac2a <rshift+0x68>
 801abfe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ac02:	f1c1 0820 	rsb	r8, r1, #32
 801ac06:	40cf      	lsrs	r7, r1
 801ac08:	f105 0e04 	add.w	lr, r5, #4
 801ac0c:	46a1      	mov	r9, r4
 801ac0e:	4576      	cmp	r6, lr
 801ac10:	46f4      	mov	ip, lr
 801ac12:	d815      	bhi.n	801ac40 <rshift+0x7e>
 801ac14:	1a9b      	subs	r3, r3, r2
 801ac16:	009a      	lsls	r2, r3, #2
 801ac18:	3a04      	subs	r2, #4
 801ac1a:	3501      	adds	r5, #1
 801ac1c:	42ae      	cmp	r6, r5
 801ac1e:	bf38      	it	cc
 801ac20:	2200      	movcc	r2, #0
 801ac22:	18a3      	adds	r3, r4, r2
 801ac24:	50a7      	str	r7, [r4, r2]
 801ac26:	b107      	cbz	r7, 801ac2a <rshift+0x68>
 801ac28:	3304      	adds	r3, #4
 801ac2a:	1b1a      	subs	r2, r3, r4
 801ac2c:	42a3      	cmp	r3, r4
 801ac2e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801ac32:	bf08      	it	eq
 801ac34:	2300      	moveq	r3, #0
 801ac36:	6102      	str	r2, [r0, #16]
 801ac38:	bf08      	it	eq
 801ac3a:	6143      	streq	r3, [r0, #20]
 801ac3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ac40:	f8dc c000 	ldr.w	ip, [ip]
 801ac44:	fa0c fc08 	lsl.w	ip, ip, r8
 801ac48:	ea4c 0707 	orr.w	r7, ip, r7
 801ac4c:	f849 7b04 	str.w	r7, [r9], #4
 801ac50:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ac54:	40cf      	lsrs	r7, r1
 801ac56:	e7da      	b.n	801ac0e <rshift+0x4c>
 801ac58:	f851 cb04 	ldr.w	ip, [r1], #4
 801ac5c:	f847 cf04 	str.w	ip, [r7, #4]!
 801ac60:	e7c3      	b.n	801abea <rshift+0x28>
 801ac62:	4623      	mov	r3, r4
 801ac64:	e7e1      	b.n	801ac2a <rshift+0x68>

0801ac66 <__hexdig_fun>:
 801ac66:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801ac6a:	2b09      	cmp	r3, #9
 801ac6c:	d802      	bhi.n	801ac74 <__hexdig_fun+0xe>
 801ac6e:	3820      	subs	r0, #32
 801ac70:	b2c0      	uxtb	r0, r0
 801ac72:	4770      	bx	lr
 801ac74:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801ac78:	2b05      	cmp	r3, #5
 801ac7a:	d801      	bhi.n	801ac80 <__hexdig_fun+0x1a>
 801ac7c:	3847      	subs	r0, #71	; 0x47
 801ac7e:	e7f7      	b.n	801ac70 <__hexdig_fun+0xa>
 801ac80:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801ac84:	2b05      	cmp	r3, #5
 801ac86:	d801      	bhi.n	801ac8c <__hexdig_fun+0x26>
 801ac88:	3827      	subs	r0, #39	; 0x27
 801ac8a:	e7f1      	b.n	801ac70 <__hexdig_fun+0xa>
 801ac8c:	2000      	movs	r0, #0
 801ac8e:	4770      	bx	lr

0801ac90 <__gethex>:
 801ac90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac94:	ed2d 8b02 	vpush	{d8}
 801ac98:	b089      	sub	sp, #36	; 0x24
 801ac9a:	ee08 0a10 	vmov	s16, r0
 801ac9e:	9304      	str	r3, [sp, #16]
 801aca0:	4bbc      	ldr	r3, [pc, #752]	; (801af94 <__gethex+0x304>)
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	9301      	str	r3, [sp, #4]
 801aca6:	4618      	mov	r0, r3
 801aca8:	468b      	mov	fp, r1
 801acaa:	4690      	mov	r8, r2
 801acac:	f7e5 fa9a 	bl	80001e4 <strlen>
 801acb0:	9b01      	ldr	r3, [sp, #4]
 801acb2:	f8db 2000 	ldr.w	r2, [fp]
 801acb6:	4403      	add	r3, r0
 801acb8:	4682      	mov	sl, r0
 801acba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801acbe:	9305      	str	r3, [sp, #20]
 801acc0:	1c93      	adds	r3, r2, #2
 801acc2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801acc6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801acca:	32fe      	adds	r2, #254	; 0xfe
 801accc:	18d1      	adds	r1, r2, r3
 801acce:	461f      	mov	r7, r3
 801acd0:	f813 0b01 	ldrb.w	r0, [r3], #1
 801acd4:	9100      	str	r1, [sp, #0]
 801acd6:	2830      	cmp	r0, #48	; 0x30
 801acd8:	d0f8      	beq.n	801accc <__gethex+0x3c>
 801acda:	f7ff ffc4 	bl	801ac66 <__hexdig_fun>
 801acde:	4604      	mov	r4, r0
 801ace0:	2800      	cmp	r0, #0
 801ace2:	d13a      	bne.n	801ad5a <__gethex+0xca>
 801ace4:	9901      	ldr	r1, [sp, #4]
 801ace6:	4652      	mov	r2, sl
 801ace8:	4638      	mov	r0, r7
 801acea:	f7fe fceb 	bl	80196c4 <strncmp>
 801acee:	4605      	mov	r5, r0
 801acf0:	2800      	cmp	r0, #0
 801acf2:	d168      	bne.n	801adc6 <__gethex+0x136>
 801acf4:	f817 000a 	ldrb.w	r0, [r7, sl]
 801acf8:	eb07 060a 	add.w	r6, r7, sl
 801acfc:	f7ff ffb3 	bl	801ac66 <__hexdig_fun>
 801ad00:	2800      	cmp	r0, #0
 801ad02:	d062      	beq.n	801adca <__gethex+0x13a>
 801ad04:	4633      	mov	r3, r6
 801ad06:	7818      	ldrb	r0, [r3, #0]
 801ad08:	2830      	cmp	r0, #48	; 0x30
 801ad0a:	461f      	mov	r7, r3
 801ad0c:	f103 0301 	add.w	r3, r3, #1
 801ad10:	d0f9      	beq.n	801ad06 <__gethex+0x76>
 801ad12:	f7ff ffa8 	bl	801ac66 <__hexdig_fun>
 801ad16:	2301      	movs	r3, #1
 801ad18:	fab0 f480 	clz	r4, r0
 801ad1c:	0964      	lsrs	r4, r4, #5
 801ad1e:	4635      	mov	r5, r6
 801ad20:	9300      	str	r3, [sp, #0]
 801ad22:	463a      	mov	r2, r7
 801ad24:	4616      	mov	r6, r2
 801ad26:	3201      	adds	r2, #1
 801ad28:	7830      	ldrb	r0, [r6, #0]
 801ad2a:	f7ff ff9c 	bl	801ac66 <__hexdig_fun>
 801ad2e:	2800      	cmp	r0, #0
 801ad30:	d1f8      	bne.n	801ad24 <__gethex+0x94>
 801ad32:	9901      	ldr	r1, [sp, #4]
 801ad34:	4652      	mov	r2, sl
 801ad36:	4630      	mov	r0, r6
 801ad38:	f7fe fcc4 	bl	80196c4 <strncmp>
 801ad3c:	b980      	cbnz	r0, 801ad60 <__gethex+0xd0>
 801ad3e:	b94d      	cbnz	r5, 801ad54 <__gethex+0xc4>
 801ad40:	eb06 050a 	add.w	r5, r6, sl
 801ad44:	462a      	mov	r2, r5
 801ad46:	4616      	mov	r6, r2
 801ad48:	3201      	adds	r2, #1
 801ad4a:	7830      	ldrb	r0, [r6, #0]
 801ad4c:	f7ff ff8b 	bl	801ac66 <__hexdig_fun>
 801ad50:	2800      	cmp	r0, #0
 801ad52:	d1f8      	bne.n	801ad46 <__gethex+0xb6>
 801ad54:	1bad      	subs	r5, r5, r6
 801ad56:	00ad      	lsls	r5, r5, #2
 801ad58:	e004      	b.n	801ad64 <__gethex+0xd4>
 801ad5a:	2400      	movs	r4, #0
 801ad5c:	4625      	mov	r5, r4
 801ad5e:	e7e0      	b.n	801ad22 <__gethex+0x92>
 801ad60:	2d00      	cmp	r5, #0
 801ad62:	d1f7      	bne.n	801ad54 <__gethex+0xc4>
 801ad64:	7833      	ldrb	r3, [r6, #0]
 801ad66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ad6a:	2b50      	cmp	r3, #80	; 0x50
 801ad6c:	d13b      	bne.n	801ade6 <__gethex+0x156>
 801ad6e:	7873      	ldrb	r3, [r6, #1]
 801ad70:	2b2b      	cmp	r3, #43	; 0x2b
 801ad72:	d02c      	beq.n	801adce <__gethex+0x13e>
 801ad74:	2b2d      	cmp	r3, #45	; 0x2d
 801ad76:	d02e      	beq.n	801add6 <__gethex+0x146>
 801ad78:	1c71      	adds	r1, r6, #1
 801ad7a:	f04f 0900 	mov.w	r9, #0
 801ad7e:	7808      	ldrb	r0, [r1, #0]
 801ad80:	f7ff ff71 	bl	801ac66 <__hexdig_fun>
 801ad84:	1e43      	subs	r3, r0, #1
 801ad86:	b2db      	uxtb	r3, r3
 801ad88:	2b18      	cmp	r3, #24
 801ad8a:	d82c      	bhi.n	801ade6 <__gethex+0x156>
 801ad8c:	f1a0 0210 	sub.w	r2, r0, #16
 801ad90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801ad94:	f7ff ff67 	bl	801ac66 <__hexdig_fun>
 801ad98:	1e43      	subs	r3, r0, #1
 801ad9a:	b2db      	uxtb	r3, r3
 801ad9c:	2b18      	cmp	r3, #24
 801ad9e:	d91d      	bls.n	801addc <__gethex+0x14c>
 801ada0:	f1b9 0f00 	cmp.w	r9, #0
 801ada4:	d000      	beq.n	801ada8 <__gethex+0x118>
 801ada6:	4252      	negs	r2, r2
 801ada8:	4415      	add	r5, r2
 801adaa:	f8cb 1000 	str.w	r1, [fp]
 801adae:	b1e4      	cbz	r4, 801adea <__gethex+0x15a>
 801adb0:	9b00      	ldr	r3, [sp, #0]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	bf14      	ite	ne
 801adb6:	2700      	movne	r7, #0
 801adb8:	2706      	moveq	r7, #6
 801adba:	4638      	mov	r0, r7
 801adbc:	b009      	add	sp, #36	; 0x24
 801adbe:	ecbd 8b02 	vpop	{d8}
 801adc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adc6:	463e      	mov	r6, r7
 801adc8:	4625      	mov	r5, r4
 801adca:	2401      	movs	r4, #1
 801adcc:	e7ca      	b.n	801ad64 <__gethex+0xd4>
 801adce:	f04f 0900 	mov.w	r9, #0
 801add2:	1cb1      	adds	r1, r6, #2
 801add4:	e7d3      	b.n	801ad7e <__gethex+0xee>
 801add6:	f04f 0901 	mov.w	r9, #1
 801adda:	e7fa      	b.n	801add2 <__gethex+0x142>
 801addc:	230a      	movs	r3, #10
 801adde:	fb03 0202 	mla	r2, r3, r2, r0
 801ade2:	3a10      	subs	r2, #16
 801ade4:	e7d4      	b.n	801ad90 <__gethex+0x100>
 801ade6:	4631      	mov	r1, r6
 801ade8:	e7df      	b.n	801adaa <__gethex+0x11a>
 801adea:	1bf3      	subs	r3, r6, r7
 801adec:	3b01      	subs	r3, #1
 801adee:	4621      	mov	r1, r4
 801adf0:	2b07      	cmp	r3, #7
 801adf2:	dc0b      	bgt.n	801ae0c <__gethex+0x17c>
 801adf4:	ee18 0a10 	vmov	r0, s16
 801adf8:	f000 fae6 	bl	801b3c8 <_Balloc>
 801adfc:	4604      	mov	r4, r0
 801adfe:	b940      	cbnz	r0, 801ae12 <__gethex+0x182>
 801ae00:	4b65      	ldr	r3, [pc, #404]	; (801af98 <__gethex+0x308>)
 801ae02:	4602      	mov	r2, r0
 801ae04:	21de      	movs	r1, #222	; 0xde
 801ae06:	4865      	ldr	r0, [pc, #404]	; (801af9c <__gethex+0x30c>)
 801ae08:	f7ff fcd8 	bl	801a7bc <__assert_func>
 801ae0c:	3101      	adds	r1, #1
 801ae0e:	105b      	asrs	r3, r3, #1
 801ae10:	e7ee      	b.n	801adf0 <__gethex+0x160>
 801ae12:	f100 0914 	add.w	r9, r0, #20
 801ae16:	f04f 0b00 	mov.w	fp, #0
 801ae1a:	f1ca 0301 	rsb	r3, sl, #1
 801ae1e:	f8cd 9008 	str.w	r9, [sp, #8]
 801ae22:	f8cd b000 	str.w	fp, [sp]
 801ae26:	9306      	str	r3, [sp, #24]
 801ae28:	42b7      	cmp	r7, r6
 801ae2a:	d340      	bcc.n	801aeae <__gethex+0x21e>
 801ae2c:	9802      	ldr	r0, [sp, #8]
 801ae2e:	9b00      	ldr	r3, [sp, #0]
 801ae30:	f840 3b04 	str.w	r3, [r0], #4
 801ae34:	eba0 0009 	sub.w	r0, r0, r9
 801ae38:	1080      	asrs	r0, r0, #2
 801ae3a:	0146      	lsls	r6, r0, #5
 801ae3c:	6120      	str	r0, [r4, #16]
 801ae3e:	4618      	mov	r0, r3
 801ae40:	f000 fbb8 	bl	801b5b4 <__hi0bits>
 801ae44:	1a30      	subs	r0, r6, r0
 801ae46:	f8d8 6000 	ldr.w	r6, [r8]
 801ae4a:	42b0      	cmp	r0, r6
 801ae4c:	dd63      	ble.n	801af16 <__gethex+0x286>
 801ae4e:	1b87      	subs	r7, r0, r6
 801ae50:	4639      	mov	r1, r7
 801ae52:	4620      	mov	r0, r4
 801ae54:	f000 ff52 	bl	801bcfc <__any_on>
 801ae58:	4682      	mov	sl, r0
 801ae5a:	b1a8      	cbz	r0, 801ae88 <__gethex+0x1f8>
 801ae5c:	1e7b      	subs	r3, r7, #1
 801ae5e:	1159      	asrs	r1, r3, #5
 801ae60:	f003 021f 	and.w	r2, r3, #31
 801ae64:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801ae68:	f04f 0a01 	mov.w	sl, #1
 801ae6c:	fa0a f202 	lsl.w	r2, sl, r2
 801ae70:	420a      	tst	r2, r1
 801ae72:	d009      	beq.n	801ae88 <__gethex+0x1f8>
 801ae74:	4553      	cmp	r3, sl
 801ae76:	dd05      	ble.n	801ae84 <__gethex+0x1f4>
 801ae78:	1eb9      	subs	r1, r7, #2
 801ae7a:	4620      	mov	r0, r4
 801ae7c:	f000 ff3e 	bl	801bcfc <__any_on>
 801ae80:	2800      	cmp	r0, #0
 801ae82:	d145      	bne.n	801af10 <__gethex+0x280>
 801ae84:	f04f 0a02 	mov.w	sl, #2
 801ae88:	4639      	mov	r1, r7
 801ae8a:	4620      	mov	r0, r4
 801ae8c:	f7ff fe99 	bl	801abc2 <rshift>
 801ae90:	443d      	add	r5, r7
 801ae92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ae96:	42ab      	cmp	r3, r5
 801ae98:	da4c      	bge.n	801af34 <__gethex+0x2a4>
 801ae9a:	ee18 0a10 	vmov	r0, s16
 801ae9e:	4621      	mov	r1, r4
 801aea0:	f000 fad2 	bl	801b448 <_Bfree>
 801aea4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801aea6:	2300      	movs	r3, #0
 801aea8:	6013      	str	r3, [r2, #0]
 801aeaa:	27a3      	movs	r7, #163	; 0xa3
 801aeac:	e785      	b.n	801adba <__gethex+0x12a>
 801aeae:	1e73      	subs	r3, r6, #1
 801aeb0:	9a05      	ldr	r2, [sp, #20]
 801aeb2:	9303      	str	r3, [sp, #12]
 801aeb4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801aeb8:	4293      	cmp	r3, r2
 801aeba:	d019      	beq.n	801aef0 <__gethex+0x260>
 801aebc:	f1bb 0f20 	cmp.w	fp, #32
 801aec0:	d107      	bne.n	801aed2 <__gethex+0x242>
 801aec2:	9b02      	ldr	r3, [sp, #8]
 801aec4:	9a00      	ldr	r2, [sp, #0]
 801aec6:	f843 2b04 	str.w	r2, [r3], #4
 801aeca:	9302      	str	r3, [sp, #8]
 801aecc:	2300      	movs	r3, #0
 801aece:	9300      	str	r3, [sp, #0]
 801aed0:	469b      	mov	fp, r3
 801aed2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801aed6:	f7ff fec6 	bl	801ac66 <__hexdig_fun>
 801aeda:	9b00      	ldr	r3, [sp, #0]
 801aedc:	f000 000f 	and.w	r0, r0, #15
 801aee0:	fa00 f00b 	lsl.w	r0, r0, fp
 801aee4:	4303      	orrs	r3, r0
 801aee6:	9300      	str	r3, [sp, #0]
 801aee8:	f10b 0b04 	add.w	fp, fp, #4
 801aeec:	9b03      	ldr	r3, [sp, #12]
 801aeee:	e00d      	b.n	801af0c <__gethex+0x27c>
 801aef0:	9b03      	ldr	r3, [sp, #12]
 801aef2:	9a06      	ldr	r2, [sp, #24]
 801aef4:	4413      	add	r3, r2
 801aef6:	42bb      	cmp	r3, r7
 801aef8:	d3e0      	bcc.n	801aebc <__gethex+0x22c>
 801aefa:	4618      	mov	r0, r3
 801aefc:	9901      	ldr	r1, [sp, #4]
 801aefe:	9307      	str	r3, [sp, #28]
 801af00:	4652      	mov	r2, sl
 801af02:	f7fe fbdf 	bl	80196c4 <strncmp>
 801af06:	9b07      	ldr	r3, [sp, #28]
 801af08:	2800      	cmp	r0, #0
 801af0a:	d1d7      	bne.n	801aebc <__gethex+0x22c>
 801af0c:	461e      	mov	r6, r3
 801af0e:	e78b      	b.n	801ae28 <__gethex+0x198>
 801af10:	f04f 0a03 	mov.w	sl, #3
 801af14:	e7b8      	b.n	801ae88 <__gethex+0x1f8>
 801af16:	da0a      	bge.n	801af2e <__gethex+0x29e>
 801af18:	1a37      	subs	r7, r6, r0
 801af1a:	4621      	mov	r1, r4
 801af1c:	ee18 0a10 	vmov	r0, s16
 801af20:	463a      	mov	r2, r7
 801af22:	f000 fcad 	bl	801b880 <__lshift>
 801af26:	1bed      	subs	r5, r5, r7
 801af28:	4604      	mov	r4, r0
 801af2a:	f100 0914 	add.w	r9, r0, #20
 801af2e:	f04f 0a00 	mov.w	sl, #0
 801af32:	e7ae      	b.n	801ae92 <__gethex+0x202>
 801af34:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801af38:	42a8      	cmp	r0, r5
 801af3a:	dd72      	ble.n	801b022 <__gethex+0x392>
 801af3c:	1b45      	subs	r5, r0, r5
 801af3e:	42ae      	cmp	r6, r5
 801af40:	dc36      	bgt.n	801afb0 <__gethex+0x320>
 801af42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801af46:	2b02      	cmp	r3, #2
 801af48:	d02a      	beq.n	801afa0 <__gethex+0x310>
 801af4a:	2b03      	cmp	r3, #3
 801af4c:	d02c      	beq.n	801afa8 <__gethex+0x318>
 801af4e:	2b01      	cmp	r3, #1
 801af50:	d115      	bne.n	801af7e <__gethex+0x2ee>
 801af52:	42ae      	cmp	r6, r5
 801af54:	d113      	bne.n	801af7e <__gethex+0x2ee>
 801af56:	2e01      	cmp	r6, #1
 801af58:	d10b      	bne.n	801af72 <__gethex+0x2e2>
 801af5a:	9a04      	ldr	r2, [sp, #16]
 801af5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801af60:	6013      	str	r3, [r2, #0]
 801af62:	2301      	movs	r3, #1
 801af64:	6123      	str	r3, [r4, #16]
 801af66:	f8c9 3000 	str.w	r3, [r9]
 801af6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801af6c:	2762      	movs	r7, #98	; 0x62
 801af6e:	601c      	str	r4, [r3, #0]
 801af70:	e723      	b.n	801adba <__gethex+0x12a>
 801af72:	1e71      	subs	r1, r6, #1
 801af74:	4620      	mov	r0, r4
 801af76:	f000 fec1 	bl	801bcfc <__any_on>
 801af7a:	2800      	cmp	r0, #0
 801af7c:	d1ed      	bne.n	801af5a <__gethex+0x2ca>
 801af7e:	ee18 0a10 	vmov	r0, s16
 801af82:	4621      	mov	r1, r4
 801af84:	f000 fa60 	bl	801b448 <_Bfree>
 801af88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801af8a:	2300      	movs	r3, #0
 801af8c:	6013      	str	r3, [r2, #0]
 801af8e:	2750      	movs	r7, #80	; 0x50
 801af90:	e713      	b.n	801adba <__gethex+0x12a>
 801af92:	bf00      	nop
 801af94:	0801ed80 	.word	0x0801ed80
 801af98:	0801ed04 	.word	0x0801ed04
 801af9c:	0801ed15 	.word	0x0801ed15
 801afa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d1eb      	bne.n	801af7e <__gethex+0x2ee>
 801afa6:	e7d8      	b.n	801af5a <__gethex+0x2ca>
 801afa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d1d5      	bne.n	801af5a <__gethex+0x2ca>
 801afae:	e7e6      	b.n	801af7e <__gethex+0x2ee>
 801afb0:	1e6f      	subs	r7, r5, #1
 801afb2:	f1ba 0f00 	cmp.w	sl, #0
 801afb6:	d131      	bne.n	801b01c <__gethex+0x38c>
 801afb8:	b127      	cbz	r7, 801afc4 <__gethex+0x334>
 801afba:	4639      	mov	r1, r7
 801afbc:	4620      	mov	r0, r4
 801afbe:	f000 fe9d 	bl	801bcfc <__any_on>
 801afc2:	4682      	mov	sl, r0
 801afc4:	117b      	asrs	r3, r7, #5
 801afc6:	2101      	movs	r1, #1
 801afc8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801afcc:	f007 071f 	and.w	r7, r7, #31
 801afd0:	fa01 f707 	lsl.w	r7, r1, r7
 801afd4:	421f      	tst	r7, r3
 801afd6:	4629      	mov	r1, r5
 801afd8:	4620      	mov	r0, r4
 801afda:	bf18      	it	ne
 801afdc:	f04a 0a02 	orrne.w	sl, sl, #2
 801afe0:	1b76      	subs	r6, r6, r5
 801afe2:	f7ff fdee 	bl	801abc2 <rshift>
 801afe6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801afea:	2702      	movs	r7, #2
 801afec:	f1ba 0f00 	cmp.w	sl, #0
 801aff0:	d048      	beq.n	801b084 <__gethex+0x3f4>
 801aff2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801aff6:	2b02      	cmp	r3, #2
 801aff8:	d015      	beq.n	801b026 <__gethex+0x396>
 801affa:	2b03      	cmp	r3, #3
 801affc:	d017      	beq.n	801b02e <__gethex+0x39e>
 801affe:	2b01      	cmp	r3, #1
 801b000:	d109      	bne.n	801b016 <__gethex+0x386>
 801b002:	f01a 0f02 	tst.w	sl, #2
 801b006:	d006      	beq.n	801b016 <__gethex+0x386>
 801b008:	f8d9 0000 	ldr.w	r0, [r9]
 801b00c:	ea4a 0a00 	orr.w	sl, sl, r0
 801b010:	f01a 0f01 	tst.w	sl, #1
 801b014:	d10e      	bne.n	801b034 <__gethex+0x3a4>
 801b016:	f047 0710 	orr.w	r7, r7, #16
 801b01a:	e033      	b.n	801b084 <__gethex+0x3f4>
 801b01c:	f04f 0a01 	mov.w	sl, #1
 801b020:	e7d0      	b.n	801afc4 <__gethex+0x334>
 801b022:	2701      	movs	r7, #1
 801b024:	e7e2      	b.n	801afec <__gethex+0x35c>
 801b026:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b028:	f1c3 0301 	rsb	r3, r3, #1
 801b02c:	9315      	str	r3, [sp, #84]	; 0x54
 801b02e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b030:	2b00      	cmp	r3, #0
 801b032:	d0f0      	beq.n	801b016 <__gethex+0x386>
 801b034:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b038:	f104 0314 	add.w	r3, r4, #20
 801b03c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801b040:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801b044:	f04f 0c00 	mov.w	ip, #0
 801b048:	4618      	mov	r0, r3
 801b04a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b04e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801b052:	d01c      	beq.n	801b08e <__gethex+0x3fe>
 801b054:	3201      	adds	r2, #1
 801b056:	6002      	str	r2, [r0, #0]
 801b058:	2f02      	cmp	r7, #2
 801b05a:	f104 0314 	add.w	r3, r4, #20
 801b05e:	d13f      	bne.n	801b0e0 <__gethex+0x450>
 801b060:	f8d8 2000 	ldr.w	r2, [r8]
 801b064:	3a01      	subs	r2, #1
 801b066:	42b2      	cmp	r2, r6
 801b068:	d10a      	bne.n	801b080 <__gethex+0x3f0>
 801b06a:	1171      	asrs	r1, r6, #5
 801b06c:	2201      	movs	r2, #1
 801b06e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b072:	f006 061f 	and.w	r6, r6, #31
 801b076:	fa02 f606 	lsl.w	r6, r2, r6
 801b07a:	421e      	tst	r6, r3
 801b07c:	bf18      	it	ne
 801b07e:	4617      	movne	r7, r2
 801b080:	f047 0720 	orr.w	r7, r7, #32
 801b084:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b086:	601c      	str	r4, [r3, #0]
 801b088:	9b04      	ldr	r3, [sp, #16]
 801b08a:	601d      	str	r5, [r3, #0]
 801b08c:	e695      	b.n	801adba <__gethex+0x12a>
 801b08e:	4299      	cmp	r1, r3
 801b090:	f843 cc04 	str.w	ip, [r3, #-4]
 801b094:	d8d8      	bhi.n	801b048 <__gethex+0x3b8>
 801b096:	68a3      	ldr	r3, [r4, #8]
 801b098:	459b      	cmp	fp, r3
 801b09a:	db19      	blt.n	801b0d0 <__gethex+0x440>
 801b09c:	6861      	ldr	r1, [r4, #4]
 801b09e:	ee18 0a10 	vmov	r0, s16
 801b0a2:	3101      	adds	r1, #1
 801b0a4:	f000 f990 	bl	801b3c8 <_Balloc>
 801b0a8:	4681      	mov	r9, r0
 801b0aa:	b918      	cbnz	r0, 801b0b4 <__gethex+0x424>
 801b0ac:	4b1a      	ldr	r3, [pc, #104]	; (801b118 <__gethex+0x488>)
 801b0ae:	4602      	mov	r2, r0
 801b0b0:	2184      	movs	r1, #132	; 0x84
 801b0b2:	e6a8      	b.n	801ae06 <__gethex+0x176>
 801b0b4:	6922      	ldr	r2, [r4, #16]
 801b0b6:	3202      	adds	r2, #2
 801b0b8:	f104 010c 	add.w	r1, r4, #12
 801b0bc:	0092      	lsls	r2, r2, #2
 801b0be:	300c      	adds	r0, #12
 801b0c0:	f7fd fe88 	bl	8018dd4 <memcpy>
 801b0c4:	4621      	mov	r1, r4
 801b0c6:	ee18 0a10 	vmov	r0, s16
 801b0ca:	f000 f9bd 	bl	801b448 <_Bfree>
 801b0ce:	464c      	mov	r4, r9
 801b0d0:	6923      	ldr	r3, [r4, #16]
 801b0d2:	1c5a      	adds	r2, r3, #1
 801b0d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b0d8:	6122      	str	r2, [r4, #16]
 801b0da:	2201      	movs	r2, #1
 801b0dc:	615a      	str	r2, [r3, #20]
 801b0de:	e7bb      	b.n	801b058 <__gethex+0x3c8>
 801b0e0:	6922      	ldr	r2, [r4, #16]
 801b0e2:	455a      	cmp	r2, fp
 801b0e4:	dd0b      	ble.n	801b0fe <__gethex+0x46e>
 801b0e6:	2101      	movs	r1, #1
 801b0e8:	4620      	mov	r0, r4
 801b0ea:	f7ff fd6a 	bl	801abc2 <rshift>
 801b0ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b0f2:	3501      	adds	r5, #1
 801b0f4:	42ab      	cmp	r3, r5
 801b0f6:	f6ff aed0 	blt.w	801ae9a <__gethex+0x20a>
 801b0fa:	2701      	movs	r7, #1
 801b0fc:	e7c0      	b.n	801b080 <__gethex+0x3f0>
 801b0fe:	f016 061f 	ands.w	r6, r6, #31
 801b102:	d0fa      	beq.n	801b0fa <__gethex+0x46a>
 801b104:	449a      	add	sl, r3
 801b106:	f1c6 0620 	rsb	r6, r6, #32
 801b10a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801b10e:	f000 fa51 	bl	801b5b4 <__hi0bits>
 801b112:	42b0      	cmp	r0, r6
 801b114:	dbe7      	blt.n	801b0e6 <__gethex+0x456>
 801b116:	e7f0      	b.n	801b0fa <__gethex+0x46a>
 801b118:	0801ed04 	.word	0x0801ed04

0801b11c <L_shift>:
 801b11c:	f1c2 0208 	rsb	r2, r2, #8
 801b120:	0092      	lsls	r2, r2, #2
 801b122:	b570      	push	{r4, r5, r6, lr}
 801b124:	f1c2 0620 	rsb	r6, r2, #32
 801b128:	6843      	ldr	r3, [r0, #4]
 801b12a:	6804      	ldr	r4, [r0, #0]
 801b12c:	fa03 f506 	lsl.w	r5, r3, r6
 801b130:	432c      	orrs	r4, r5
 801b132:	40d3      	lsrs	r3, r2
 801b134:	6004      	str	r4, [r0, #0]
 801b136:	f840 3f04 	str.w	r3, [r0, #4]!
 801b13a:	4288      	cmp	r0, r1
 801b13c:	d3f4      	bcc.n	801b128 <L_shift+0xc>
 801b13e:	bd70      	pop	{r4, r5, r6, pc}

0801b140 <__match>:
 801b140:	b530      	push	{r4, r5, lr}
 801b142:	6803      	ldr	r3, [r0, #0]
 801b144:	3301      	adds	r3, #1
 801b146:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b14a:	b914      	cbnz	r4, 801b152 <__match+0x12>
 801b14c:	6003      	str	r3, [r0, #0]
 801b14e:	2001      	movs	r0, #1
 801b150:	bd30      	pop	{r4, r5, pc}
 801b152:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b156:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801b15a:	2d19      	cmp	r5, #25
 801b15c:	bf98      	it	ls
 801b15e:	3220      	addls	r2, #32
 801b160:	42a2      	cmp	r2, r4
 801b162:	d0f0      	beq.n	801b146 <__match+0x6>
 801b164:	2000      	movs	r0, #0
 801b166:	e7f3      	b.n	801b150 <__match+0x10>

0801b168 <__hexnan>:
 801b168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b16c:	680b      	ldr	r3, [r1, #0]
 801b16e:	6801      	ldr	r1, [r0, #0]
 801b170:	115e      	asrs	r6, r3, #5
 801b172:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b176:	f013 031f 	ands.w	r3, r3, #31
 801b17a:	b087      	sub	sp, #28
 801b17c:	bf18      	it	ne
 801b17e:	3604      	addne	r6, #4
 801b180:	2500      	movs	r5, #0
 801b182:	1f37      	subs	r7, r6, #4
 801b184:	4682      	mov	sl, r0
 801b186:	4690      	mov	r8, r2
 801b188:	9301      	str	r3, [sp, #4]
 801b18a:	f846 5c04 	str.w	r5, [r6, #-4]
 801b18e:	46b9      	mov	r9, r7
 801b190:	463c      	mov	r4, r7
 801b192:	9502      	str	r5, [sp, #8]
 801b194:	46ab      	mov	fp, r5
 801b196:	784a      	ldrb	r2, [r1, #1]
 801b198:	1c4b      	adds	r3, r1, #1
 801b19a:	9303      	str	r3, [sp, #12]
 801b19c:	b342      	cbz	r2, 801b1f0 <__hexnan+0x88>
 801b19e:	4610      	mov	r0, r2
 801b1a0:	9105      	str	r1, [sp, #20]
 801b1a2:	9204      	str	r2, [sp, #16]
 801b1a4:	f7ff fd5f 	bl	801ac66 <__hexdig_fun>
 801b1a8:	2800      	cmp	r0, #0
 801b1aa:	d14f      	bne.n	801b24c <__hexnan+0xe4>
 801b1ac:	9a04      	ldr	r2, [sp, #16]
 801b1ae:	9905      	ldr	r1, [sp, #20]
 801b1b0:	2a20      	cmp	r2, #32
 801b1b2:	d818      	bhi.n	801b1e6 <__hexnan+0x7e>
 801b1b4:	9b02      	ldr	r3, [sp, #8]
 801b1b6:	459b      	cmp	fp, r3
 801b1b8:	dd13      	ble.n	801b1e2 <__hexnan+0x7a>
 801b1ba:	454c      	cmp	r4, r9
 801b1bc:	d206      	bcs.n	801b1cc <__hexnan+0x64>
 801b1be:	2d07      	cmp	r5, #7
 801b1c0:	dc04      	bgt.n	801b1cc <__hexnan+0x64>
 801b1c2:	462a      	mov	r2, r5
 801b1c4:	4649      	mov	r1, r9
 801b1c6:	4620      	mov	r0, r4
 801b1c8:	f7ff ffa8 	bl	801b11c <L_shift>
 801b1cc:	4544      	cmp	r4, r8
 801b1ce:	d950      	bls.n	801b272 <__hexnan+0x10a>
 801b1d0:	2300      	movs	r3, #0
 801b1d2:	f1a4 0904 	sub.w	r9, r4, #4
 801b1d6:	f844 3c04 	str.w	r3, [r4, #-4]
 801b1da:	f8cd b008 	str.w	fp, [sp, #8]
 801b1de:	464c      	mov	r4, r9
 801b1e0:	461d      	mov	r5, r3
 801b1e2:	9903      	ldr	r1, [sp, #12]
 801b1e4:	e7d7      	b.n	801b196 <__hexnan+0x2e>
 801b1e6:	2a29      	cmp	r2, #41	; 0x29
 801b1e8:	d156      	bne.n	801b298 <__hexnan+0x130>
 801b1ea:	3102      	adds	r1, #2
 801b1ec:	f8ca 1000 	str.w	r1, [sl]
 801b1f0:	f1bb 0f00 	cmp.w	fp, #0
 801b1f4:	d050      	beq.n	801b298 <__hexnan+0x130>
 801b1f6:	454c      	cmp	r4, r9
 801b1f8:	d206      	bcs.n	801b208 <__hexnan+0xa0>
 801b1fa:	2d07      	cmp	r5, #7
 801b1fc:	dc04      	bgt.n	801b208 <__hexnan+0xa0>
 801b1fe:	462a      	mov	r2, r5
 801b200:	4649      	mov	r1, r9
 801b202:	4620      	mov	r0, r4
 801b204:	f7ff ff8a 	bl	801b11c <L_shift>
 801b208:	4544      	cmp	r4, r8
 801b20a:	d934      	bls.n	801b276 <__hexnan+0x10e>
 801b20c:	f1a8 0204 	sub.w	r2, r8, #4
 801b210:	4623      	mov	r3, r4
 801b212:	f853 1b04 	ldr.w	r1, [r3], #4
 801b216:	f842 1f04 	str.w	r1, [r2, #4]!
 801b21a:	429f      	cmp	r7, r3
 801b21c:	d2f9      	bcs.n	801b212 <__hexnan+0xaa>
 801b21e:	1b3b      	subs	r3, r7, r4
 801b220:	f023 0303 	bic.w	r3, r3, #3
 801b224:	3304      	adds	r3, #4
 801b226:	3401      	adds	r4, #1
 801b228:	3e03      	subs	r6, #3
 801b22a:	42b4      	cmp	r4, r6
 801b22c:	bf88      	it	hi
 801b22e:	2304      	movhi	r3, #4
 801b230:	4443      	add	r3, r8
 801b232:	2200      	movs	r2, #0
 801b234:	f843 2b04 	str.w	r2, [r3], #4
 801b238:	429f      	cmp	r7, r3
 801b23a:	d2fb      	bcs.n	801b234 <__hexnan+0xcc>
 801b23c:	683b      	ldr	r3, [r7, #0]
 801b23e:	b91b      	cbnz	r3, 801b248 <__hexnan+0xe0>
 801b240:	4547      	cmp	r7, r8
 801b242:	d127      	bne.n	801b294 <__hexnan+0x12c>
 801b244:	2301      	movs	r3, #1
 801b246:	603b      	str	r3, [r7, #0]
 801b248:	2005      	movs	r0, #5
 801b24a:	e026      	b.n	801b29a <__hexnan+0x132>
 801b24c:	3501      	adds	r5, #1
 801b24e:	2d08      	cmp	r5, #8
 801b250:	f10b 0b01 	add.w	fp, fp, #1
 801b254:	dd06      	ble.n	801b264 <__hexnan+0xfc>
 801b256:	4544      	cmp	r4, r8
 801b258:	d9c3      	bls.n	801b1e2 <__hexnan+0x7a>
 801b25a:	2300      	movs	r3, #0
 801b25c:	f844 3c04 	str.w	r3, [r4, #-4]
 801b260:	2501      	movs	r5, #1
 801b262:	3c04      	subs	r4, #4
 801b264:	6822      	ldr	r2, [r4, #0]
 801b266:	f000 000f 	and.w	r0, r0, #15
 801b26a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801b26e:	6022      	str	r2, [r4, #0]
 801b270:	e7b7      	b.n	801b1e2 <__hexnan+0x7a>
 801b272:	2508      	movs	r5, #8
 801b274:	e7b5      	b.n	801b1e2 <__hexnan+0x7a>
 801b276:	9b01      	ldr	r3, [sp, #4]
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d0df      	beq.n	801b23c <__hexnan+0xd4>
 801b27c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b280:	f1c3 0320 	rsb	r3, r3, #32
 801b284:	fa22 f303 	lsr.w	r3, r2, r3
 801b288:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801b28c:	401a      	ands	r2, r3
 801b28e:	f846 2c04 	str.w	r2, [r6, #-4]
 801b292:	e7d3      	b.n	801b23c <__hexnan+0xd4>
 801b294:	3f04      	subs	r7, #4
 801b296:	e7d1      	b.n	801b23c <__hexnan+0xd4>
 801b298:	2004      	movs	r0, #4
 801b29a:	b007      	add	sp, #28
 801b29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b2a0 <_lseek_r>:
 801b2a0:	b538      	push	{r3, r4, r5, lr}
 801b2a2:	4d07      	ldr	r5, [pc, #28]	; (801b2c0 <_lseek_r+0x20>)
 801b2a4:	4604      	mov	r4, r0
 801b2a6:	4608      	mov	r0, r1
 801b2a8:	4611      	mov	r1, r2
 801b2aa:	2200      	movs	r2, #0
 801b2ac:	602a      	str	r2, [r5, #0]
 801b2ae:	461a      	mov	r2, r3
 801b2b0:	f7e8 f862 	bl	8003378 <_lseek>
 801b2b4:	1c43      	adds	r3, r0, #1
 801b2b6:	d102      	bne.n	801b2be <_lseek_r+0x1e>
 801b2b8:	682b      	ldr	r3, [r5, #0]
 801b2ba:	b103      	cbz	r3, 801b2be <_lseek_r+0x1e>
 801b2bc:	6023      	str	r3, [r4, #0]
 801b2be:	bd38      	pop	{r3, r4, r5, pc}
 801b2c0:	2001600c 	.word	0x2001600c

0801b2c4 <__swhatbuf_r>:
 801b2c4:	b570      	push	{r4, r5, r6, lr}
 801b2c6:	460e      	mov	r6, r1
 801b2c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2cc:	2900      	cmp	r1, #0
 801b2ce:	b096      	sub	sp, #88	; 0x58
 801b2d0:	4614      	mov	r4, r2
 801b2d2:	461d      	mov	r5, r3
 801b2d4:	da07      	bge.n	801b2e6 <__swhatbuf_r+0x22>
 801b2d6:	2300      	movs	r3, #0
 801b2d8:	602b      	str	r3, [r5, #0]
 801b2da:	89b3      	ldrh	r3, [r6, #12]
 801b2dc:	061a      	lsls	r2, r3, #24
 801b2de:	d410      	bmi.n	801b302 <__swhatbuf_r+0x3e>
 801b2e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b2e4:	e00e      	b.n	801b304 <__swhatbuf_r+0x40>
 801b2e6:	466a      	mov	r2, sp
 801b2e8:	f001 fd5a 	bl	801cda0 <_fstat_r>
 801b2ec:	2800      	cmp	r0, #0
 801b2ee:	dbf2      	blt.n	801b2d6 <__swhatbuf_r+0x12>
 801b2f0:	9a01      	ldr	r2, [sp, #4]
 801b2f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b2f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b2fa:	425a      	negs	r2, r3
 801b2fc:	415a      	adcs	r2, r3
 801b2fe:	602a      	str	r2, [r5, #0]
 801b300:	e7ee      	b.n	801b2e0 <__swhatbuf_r+0x1c>
 801b302:	2340      	movs	r3, #64	; 0x40
 801b304:	2000      	movs	r0, #0
 801b306:	6023      	str	r3, [r4, #0]
 801b308:	b016      	add	sp, #88	; 0x58
 801b30a:	bd70      	pop	{r4, r5, r6, pc}

0801b30c <__smakebuf_r>:
 801b30c:	898b      	ldrh	r3, [r1, #12]
 801b30e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b310:	079d      	lsls	r5, r3, #30
 801b312:	4606      	mov	r6, r0
 801b314:	460c      	mov	r4, r1
 801b316:	d507      	bpl.n	801b328 <__smakebuf_r+0x1c>
 801b318:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b31c:	6023      	str	r3, [r4, #0]
 801b31e:	6123      	str	r3, [r4, #16]
 801b320:	2301      	movs	r3, #1
 801b322:	6163      	str	r3, [r4, #20]
 801b324:	b002      	add	sp, #8
 801b326:	bd70      	pop	{r4, r5, r6, pc}
 801b328:	ab01      	add	r3, sp, #4
 801b32a:	466a      	mov	r2, sp
 801b32c:	f7ff ffca 	bl	801b2c4 <__swhatbuf_r>
 801b330:	9900      	ldr	r1, [sp, #0]
 801b332:	4605      	mov	r5, r0
 801b334:	4630      	mov	r0, r6
 801b336:	f7fd fddd 	bl	8018ef4 <_malloc_r>
 801b33a:	b948      	cbnz	r0, 801b350 <__smakebuf_r+0x44>
 801b33c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b340:	059a      	lsls	r2, r3, #22
 801b342:	d4ef      	bmi.n	801b324 <__smakebuf_r+0x18>
 801b344:	f023 0303 	bic.w	r3, r3, #3
 801b348:	f043 0302 	orr.w	r3, r3, #2
 801b34c:	81a3      	strh	r3, [r4, #12]
 801b34e:	e7e3      	b.n	801b318 <__smakebuf_r+0xc>
 801b350:	4b0d      	ldr	r3, [pc, #52]	; (801b388 <__smakebuf_r+0x7c>)
 801b352:	62b3      	str	r3, [r6, #40]	; 0x28
 801b354:	89a3      	ldrh	r3, [r4, #12]
 801b356:	6020      	str	r0, [r4, #0]
 801b358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b35c:	81a3      	strh	r3, [r4, #12]
 801b35e:	9b00      	ldr	r3, [sp, #0]
 801b360:	6163      	str	r3, [r4, #20]
 801b362:	9b01      	ldr	r3, [sp, #4]
 801b364:	6120      	str	r0, [r4, #16]
 801b366:	b15b      	cbz	r3, 801b380 <__smakebuf_r+0x74>
 801b368:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b36c:	4630      	mov	r0, r6
 801b36e:	f001 fd29 	bl	801cdc4 <_isatty_r>
 801b372:	b128      	cbz	r0, 801b380 <__smakebuf_r+0x74>
 801b374:	89a3      	ldrh	r3, [r4, #12]
 801b376:	f023 0303 	bic.w	r3, r3, #3
 801b37a:	f043 0301 	orr.w	r3, r3, #1
 801b37e:	81a3      	strh	r3, [r4, #12]
 801b380:	89a0      	ldrh	r0, [r4, #12]
 801b382:	4305      	orrs	r5, r0
 801b384:	81a5      	strh	r5, [r4, #12]
 801b386:	e7cd      	b.n	801b324 <__smakebuf_r+0x18>
 801b388:	0801a9fd 	.word	0x0801a9fd

0801b38c <__ascii_mbtowc>:
 801b38c:	b082      	sub	sp, #8
 801b38e:	b901      	cbnz	r1, 801b392 <__ascii_mbtowc+0x6>
 801b390:	a901      	add	r1, sp, #4
 801b392:	b142      	cbz	r2, 801b3a6 <__ascii_mbtowc+0x1a>
 801b394:	b14b      	cbz	r3, 801b3aa <__ascii_mbtowc+0x1e>
 801b396:	7813      	ldrb	r3, [r2, #0]
 801b398:	600b      	str	r3, [r1, #0]
 801b39a:	7812      	ldrb	r2, [r2, #0]
 801b39c:	1e10      	subs	r0, r2, #0
 801b39e:	bf18      	it	ne
 801b3a0:	2001      	movne	r0, #1
 801b3a2:	b002      	add	sp, #8
 801b3a4:	4770      	bx	lr
 801b3a6:	4610      	mov	r0, r2
 801b3a8:	e7fb      	b.n	801b3a2 <__ascii_mbtowc+0x16>
 801b3aa:	f06f 0001 	mvn.w	r0, #1
 801b3ae:	e7f8      	b.n	801b3a2 <__ascii_mbtowc+0x16>

0801b3b0 <__malloc_lock>:
 801b3b0:	4801      	ldr	r0, [pc, #4]	; (801b3b8 <__malloc_lock+0x8>)
 801b3b2:	f7fd bcfc 	b.w	8018dae <__retarget_lock_acquire_recursive>
 801b3b6:	bf00      	nop
 801b3b8:	20016004 	.word	0x20016004

0801b3bc <__malloc_unlock>:
 801b3bc:	4801      	ldr	r0, [pc, #4]	; (801b3c4 <__malloc_unlock+0x8>)
 801b3be:	f7fd bcf7 	b.w	8018db0 <__retarget_lock_release_recursive>
 801b3c2:	bf00      	nop
 801b3c4:	20016004 	.word	0x20016004

0801b3c8 <_Balloc>:
 801b3c8:	b570      	push	{r4, r5, r6, lr}
 801b3ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b3cc:	4604      	mov	r4, r0
 801b3ce:	460d      	mov	r5, r1
 801b3d0:	b976      	cbnz	r6, 801b3f0 <_Balloc+0x28>
 801b3d2:	2010      	movs	r0, #16
 801b3d4:	f7fd fcee 	bl	8018db4 <malloc>
 801b3d8:	4602      	mov	r2, r0
 801b3da:	6260      	str	r0, [r4, #36]	; 0x24
 801b3dc:	b920      	cbnz	r0, 801b3e8 <_Balloc+0x20>
 801b3de:	4b18      	ldr	r3, [pc, #96]	; (801b440 <_Balloc+0x78>)
 801b3e0:	4818      	ldr	r0, [pc, #96]	; (801b444 <_Balloc+0x7c>)
 801b3e2:	2166      	movs	r1, #102	; 0x66
 801b3e4:	f7ff f9ea 	bl	801a7bc <__assert_func>
 801b3e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b3ec:	6006      	str	r6, [r0, #0]
 801b3ee:	60c6      	str	r6, [r0, #12]
 801b3f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b3f2:	68f3      	ldr	r3, [r6, #12]
 801b3f4:	b183      	cbz	r3, 801b418 <_Balloc+0x50>
 801b3f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b3f8:	68db      	ldr	r3, [r3, #12]
 801b3fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b3fe:	b9b8      	cbnz	r0, 801b430 <_Balloc+0x68>
 801b400:	2101      	movs	r1, #1
 801b402:	fa01 f605 	lsl.w	r6, r1, r5
 801b406:	1d72      	adds	r2, r6, #5
 801b408:	0092      	lsls	r2, r2, #2
 801b40a:	4620      	mov	r0, r4
 801b40c:	f7fd fd12 	bl	8018e34 <_calloc_r>
 801b410:	b160      	cbz	r0, 801b42c <_Balloc+0x64>
 801b412:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b416:	e00e      	b.n	801b436 <_Balloc+0x6e>
 801b418:	2221      	movs	r2, #33	; 0x21
 801b41a:	2104      	movs	r1, #4
 801b41c:	4620      	mov	r0, r4
 801b41e:	f7fd fd09 	bl	8018e34 <_calloc_r>
 801b422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b424:	60f0      	str	r0, [r6, #12]
 801b426:	68db      	ldr	r3, [r3, #12]
 801b428:	2b00      	cmp	r3, #0
 801b42a:	d1e4      	bne.n	801b3f6 <_Balloc+0x2e>
 801b42c:	2000      	movs	r0, #0
 801b42e:	bd70      	pop	{r4, r5, r6, pc}
 801b430:	6802      	ldr	r2, [r0, #0]
 801b432:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b436:	2300      	movs	r3, #0
 801b438:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b43c:	e7f7      	b.n	801b42e <_Balloc+0x66>
 801b43e:	bf00      	nop
 801b440:	0801eb95 	.word	0x0801eb95
 801b444:	0801ed94 	.word	0x0801ed94

0801b448 <_Bfree>:
 801b448:	b570      	push	{r4, r5, r6, lr}
 801b44a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b44c:	4605      	mov	r5, r0
 801b44e:	460c      	mov	r4, r1
 801b450:	b976      	cbnz	r6, 801b470 <_Bfree+0x28>
 801b452:	2010      	movs	r0, #16
 801b454:	f7fd fcae 	bl	8018db4 <malloc>
 801b458:	4602      	mov	r2, r0
 801b45a:	6268      	str	r0, [r5, #36]	; 0x24
 801b45c:	b920      	cbnz	r0, 801b468 <_Bfree+0x20>
 801b45e:	4b09      	ldr	r3, [pc, #36]	; (801b484 <_Bfree+0x3c>)
 801b460:	4809      	ldr	r0, [pc, #36]	; (801b488 <_Bfree+0x40>)
 801b462:	218a      	movs	r1, #138	; 0x8a
 801b464:	f7ff f9aa 	bl	801a7bc <__assert_func>
 801b468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b46c:	6006      	str	r6, [r0, #0]
 801b46e:	60c6      	str	r6, [r0, #12]
 801b470:	b13c      	cbz	r4, 801b482 <_Bfree+0x3a>
 801b472:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b474:	6862      	ldr	r2, [r4, #4]
 801b476:	68db      	ldr	r3, [r3, #12]
 801b478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b47c:	6021      	str	r1, [r4, #0]
 801b47e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b482:	bd70      	pop	{r4, r5, r6, pc}
 801b484:	0801eb95 	.word	0x0801eb95
 801b488:	0801ed94 	.word	0x0801ed94

0801b48c <__multadd>:
 801b48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b490:	690e      	ldr	r6, [r1, #16]
 801b492:	4607      	mov	r7, r0
 801b494:	4698      	mov	r8, r3
 801b496:	460c      	mov	r4, r1
 801b498:	f101 0014 	add.w	r0, r1, #20
 801b49c:	2300      	movs	r3, #0
 801b49e:	6805      	ldr	r5, [r0, #0]
 801b4a0:	b2a9      	uxth	r1, r5
 801b4a2:	fb02 8101 	mla	r1, r2, r1, r8
 801b4a6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801b4aa:	0c2d      	lsrs	r5, r5, #16
 801b4ac:	fb02 c505 	mla	r5, r2, r5, ip
 801b4b0:	b289      	uxth	r1, r1
 801b4b2:	3301      	adds	r3, #1
 801b4b4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801b4b8:	429e      	cmp	r6, r3
 801b4ba:	f840 1b04 	str.w	r1, [r0], #4
 801b4be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801b4c2:	dcec      	bgt.n	801b49e <__multadd+0x12>
 801b4c4:	f1b8 0f00 	cmp.w	r8, #0
 801b4c8:	d022      	beq.n	801b510 <__multadd+0x84>
 801b4ca:	68a3      	ldr	r3, [r4, #8]
 801b4cc:	42b3      	cmp	r3, r6
 801b4ce:	dc19      	bgt.n	801b504 <__multadd+0x78>
 801b4d0:	6861      	ldr	r1, [r4, #4]
 801b4d2:	4638      	mov	r0, r7
 801b4d4:	3101      	adds	r1, #1
 801b4d6:	f7ff ff77 	bl	801b3c8 <_Balloc>
 801b4da:	4605      	mov	r5, r0
 801b4dc:	b928      	cbnz	r0, 801b4ea <__multadd+0x5e>
 801b4de:	4602      	mov	r2, r0
 801b4e0:	4b0d      	ldr	r3, [pc, #52]	; (801b518 <__multadd+0x8c>)
 801b4e2:	480e      	ldr	r0, [pc, #56]	; (801b51c <__multadd+0x90>)
 801b4e4:	21b5      	movs	r1, #181	; 0xb5
 801b4e6:	f7ff f969 	bl	801a7bc <__assert_func>
 801b4ea:	6922      	ldr	r2, [r4, #16]
 801b4ec:	3202      	adds	r2, #2
 801b4ee:	f104 010c 	add.w	r1, r4, #12
 801b4f2:	0092      	lsls	r2, r2, #2
 801b4f4:	300c      	adds	r0, #12
 801b4f6:	f7fd fc6d 	bl	8018dd4 <memcpy>
 801b4fa:	4621      	mov	r1, r4
 801b4fc:	4638      	mov	r0, r7
 801b4fe:	f7ff ffa3 	bl	801b448 <_Bfree>
 801b502:	462c      	mov	r4, r5
 801b504:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801b508:	3601      	adds	r6, #1
 801b50a:	f8c3 8014 	str.w	r8, [r3, #20]
 801b50e:	6126      	str	r6, [r4, #16]
 801b510:	4620      	mov	r0, r4
 801b512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b516:	bf00      	nop
 801b518:	0801ed04 	.word	0x0801ed04
 801b51c:	0801ed94 	.word	0x0801ed94

0801b520 <__s2b>:
 801b520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b524:	460c      	mov	r4, r1
 801b526:	4615      	mov	r5, r2
 801b528:	461f      	mov	r7, r3
 801b52a:	2209      	movs	r2, #9
 801b52c:	3308      	adds	r3, #8
 801b52e:	4606      	mov	r6, r0
 801b530:	fb93 f3f2 	sdiv	r3, r3, r2
 801b534:	2100      	movs	r1, #0
 801b536:	2201      	movs	r2, #1
 801b538:	429a      	cmp	r2, r3
 801b53a:	db09      	blt.n	801b550 <__s2b+0x30>
 801b53c:	4630      	mov	r0, r6
 801b53e:	f7ff ff43 	bl	801b3c8 <_Balloc>
 801b542:	b940      	cbnz	r0, 801b556 <__s2b+0x36>
 801b544:	4602      	mov	r2, r0
 801b546:	4b19      	ldr	r3, [pc, #100]	; (801b5ac <__s2b+0x8c>)
 801b548:	4819      	ldr	r0, [pc, #100]	; (801b5b0 <__s2b+0x90>)
 801b54a:	21ce      	movs	r1, #206	; 0xce
 801b54c:	f7ff f936 	bl	801a7bc <__assert_func>
 801b550:	0052      	lsls	r2, r2, #1
 801b552:	3101      	adds	r1, #1
 801b554:	e7f0      	b.n	801b538 <__s2b+0x18>
 801b556:	9b08      	ldr	r3, [sp, #32]
 801b558:	6143      	str	r3, [r0, #20]
 801b55a:	2d09      	cmp	r5, #9
 801b55c:	f04f 0301 	mov.w	r3, #1
 801b560:	6103      	str	r3, [r0, #16]
 801b562:	dd16      	ble.n	801b592 <__s2b+0x72>
 801b564:	f104 0909 	add.w	r9, r4, #9
 801b568:	46c8      	mov	r8, r9
 801b56a:	442c      	add	r4, r5
 801b56c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b570:	4601      	mov	r1, r0
 801b572:	3b30      	subs	r3, #48	; 0x30
 801b574:	220a      	movs	r2, #10
 801b576:	4630      	mov	r0, r6
 801b578:	f7ff ff88 	bl	801b48c <__multadd>
 801b57c:	45a0      	cmp	r8, r4
 801b57e:	d1f5      	bne.n	801b56c <__s2b+0x4c>
 801b580:	f1a5 0408 	sub.w	r4, r5, #8
 801b584:	444c      	add	r4, r9
 801b586:	1b2d      	subs	r5, r5, r4
 801b588:	1963      	adds	r3, r4, r5
 801b58a:	42bb      	cmp	r3, r7
 801b58c:	db04      	blt.n	801b598 <__s2b+0x78>
 801b58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b592:	340a      	adds	r4, #10
 801b594:	2509      	movs	r5, #9
 801b596:	e7f6      	b.n	801b586 <__s2b+0x66>
 801b598:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b59c:	4601      	mov	r1, r0
 801b59e:	3b30      	subs	r3, #48	; 0x30
 801b5a0:	220a      	movs	r2, #10
 801b5a2:	4630      	mov	r0, r6
 801b5a4:	f7ff ff72 	bl	801b48c <__multadd>
 801b5a8:	e7ee      	b.n	801b588 <__s2b+0x68>
 801b5aa:	bf00      	nop
 801b5ac:	0801ed04 	.word	0x0801ed04
 801b5b0:	0801ed94 	.word	0x0801ed94

0801b5b4 <__hi0bits>:
 801b5b4:	0c03      	lsrs	r3, r0, #16
 801b5b6:	041b      	lsls	r3, r3, #16
 801b5b8:	b9d3      	cbnz	r3, 801b5f0 <__hi0bits+0x3c>
 801b5ba:	0400      	lsls	r0, r0, #16
 801b5bc:	2310      	movs	r3, #16
 801b5be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b5c2:	bf04      	itt	eq
 801b5c4:	0200      	lsleq	r0, r0, #8
 801b5c6:	3308      	addeq	r3, #8
 801b5c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b5cc:	bf04      	itt	eq
 801b5ce:	0100      	lsleq	r0, r0, #4
 801b5d0:	3304      	addeq	r3, #4
 801b5d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b5d6:	bf04      	itt	eq
 801b5d8:	0080      	lsleq	r0, r0, #2
 801b5da:	3302      	addeq	r3, #2
 801b5dc:	2800      	cmp	r0, #0
 801b5de:	db05      	blt.n	801b5ec <__hi0bits+0x38>
 801b5e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b5e4:	f103 0301 	add.w	r3, r3, #1
 801b5e8:	bf08      	it	eq
 801b5ea:	2320      	moveq	r3, #32
 801b5ec:	4618      	mov	r0, r3
 801b5ee:	4770      	bx	lr
 801b5f0:	2300      	movs	r3, #0
 801b5f2:	e7e4      	b.n	801b5be <__hi0bits+0xa>

0801b5f4 <__lo0bits>:
 801b5f4:	6803      	ldr	r3, [r0, #0]
 801b5f6:	f013 0207 	ands.w	r2, r3, #7
 801b5fa:	4601      	mov	r1, r0
 801b5fc:	d00b      	beq.n	801b616 <__lo0bits+0x22>
 801b5fe:	07da      	lsls	r2, r3, #31
 801b600:	d424      	bmi.n	801b64c <__lo0bits+0x58>
 801b602:	0798      	lsls	r0, r3, #30
 801b604:	bf49      	itett	mi
 801b606:	085b      	lsrmi	r3, r3, #1
 801b608:	089b      	lsrpl	r3, r3, #2
 801b60a:	2001      	movmi	r0, #1
 801b60c:	600b      	strmi	r3, [r1, #0]
 801b60e:	bf5c      	itt	pl
 801b610:	600b      	strpl	r3, [r1, #0]
 801b612:	2002      	movpl	r0, #2
 801b614:	4770      	bx	lr
 801b616:	b298      	uxth	r0, r3
 801b618:	b9b0      	cbnz	r0, 801b648 <__lo0bits+0x54>
 801b61a:	0c1b      	lsrs	r3, r3, #16
 801b61c:	2010      	movs	r0, #16
 801b61e:	f013 0fff 	tst.w	r3, #255	; 0xff
 801b622:	bf04      	itt	eq
 801b624:	0a1b      	lsreq	r3, r3, #8
 801b626:	3008      	addeq	r0, #8
 801b628:	071a      	lsls	r2, r3, #28
 801b62a:	bf04      	itt	eq
 801b62c:	091b      	lsreq	r3, r3, #4
 801b62e:	3004      	addeq	r0, #4
 801b630:	079a      	lsls	r2, r3, #30
 801b632:	bf04      	itt	eq
 801b634:	089b      	lsreq	r3, r3, #2
 801b636:	3002      	addeq	r0, #2
 801b638:	07da      	lsls	r2, r3, #31
 801b63a:	d403      	bmi.n	801b644 <__lo0bits+0x50>
 801b63c:	085b      	lsrs	r3, r3, #1
 801b63e:	f100 0001 	add.w	r0, r0, #1
 801b642:	d005      	beq.n	801b650 <__lo0bits+0x5c>
 801b644:	600b      	str	r3, [r1, #0]
 801b646:	4770      	bx	lr
 801b648:	4610      	mov	r0, r2
 801b64a:	e7e8      	b.n	801b61e <__lo0bits+0x2a>
 801b64c:	2000      	movs	r0, #0
 801b64e:	4770      	bx	lr
 801b650:	2020      	movs	r0, #32
 801b652:	4770      	bx	lr

0801b654 <__i2b>:
 801b654:	b510      	push	{r4, lr}
 801b656:	460c      	mov	r4, r1
 801b658:	2101      	movs	r1, #1
 801b65a:	f7ff feb5 	bl	801b3c8 <_Balloc>
 801b65e:	4602      	mov	r2, r0
 801b660:	b928      	cbnz	r0, 801b66e <__i2b+0x1a>
 801b662:	4b05      	ldr	r3, [pc, #20]	; (801b678 <__i2b+0x24>)
 801b664:	4805      	ldr	r0, [pc, #20]	; (801b67c <__i2b+0x28>)
 801b666:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801b66a:	f7ff f8a7 	bl	801a7bc <__assert_func>
 801b66e:	2301      	movs	r3, #1
 801b670:	6144      	str	r4, [r0, #20]
 801b672:	6103      	str	r3, [r0, #16]
 801b674:	bd10      	pop	{r4, pc}
 801b676:	bf00      	nop
 801b678:	0801ed04 	.word	0x0801ed04
 801b67c:	0801ed94 	.word	0x0801ed94

0801b680 <__multiply>:
 801b680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b684:	4614      	mov	r4, r2
 801b686:	690a      	ldr	r2, [r1, #16]
 801b688:	6923      	ldr	r3, [r4, #16]
 801b68a:	429a      	cmp	r2, r3
 801b68c:	bfb8      	it	lt
 801b68e:	460b      	movlt	r3, r1
 801b690:	460d      	mov	r5, r1
 801b692:	bfbc      	itt	lt
 801b694:	4625      	movlt	r5, r4
 801b696:	461c      	movlt	r4, r3
 801b698:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801b69c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801b6a0:	68ab      	ldr	r3, [r5, #8]
 801b6a2:	6869      	ldr	r1, [r5, #4]
 801b6a4:	eb0a 0709 	add.w	r7, sl, r9
 801b6a8:	42bb      	cmp	r3, r7
 801b6aa:	b085      	sub	sp, #20
 801b6ac:	bfb8      	it	lt
 801b6ae:	3101      	addlt	r1, #1
 801b6b0:	f7ff fe8a 	bl	801b3c8 <_Balloc>
 801b6b4:	b930      	cbnz	r0, 801b6c4 <__multiply+0x44>
 801b6b6:	4602      	mov	r2, r0
 801b6b8:	4b42      	ldr	r3, [pc, #264]	; (801b7c4 <__multiply+0x144>)
 801b6ba:	4843      	ldr	r0, [pc, #268]	; (801b7c8 <__multiply+0x148>)
 801b6bc:	f240 115d 	movw	r1, #349	; 0x15d
 801b6c0:	f7ff f87c 	bl	801a7bc <__assert_func>
 801b6c4:	f100 0614 	add.w	r6, r0, #20
 801b6c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801b6cc:	4633      	mov	r3, r6
 801b6ce:	2200      	movs	r2, #0
 801b6d0:	4543      	cmp	r3, r8
 801b6d2:	d31e      	bcc.n	801b712 <__multiply+0x92>
 801b6d4:	f105 0c14 	add.w	ip, r5, #20
 801b6d8:	f104 0314 	add.w	r3, r4, #20
 801b6dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801b6e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801b6e4:	9202      	str	r2, [sp, #8]
 801b6e6:	ebac 0205 	sub.w	r2, ip, r5
 801b6ea:	3a15      	subs	r2, #21
 801b6ec:	f022 0203 	bic.w	r2, r2, #3
 801b6f0:	3204      	adds	r2, #4
 801b6f2:	f105 0115 	add.w	r1, r5, #21
 801b6f6:	458c      	cmp	ip, r1
 801b6f8:	bf38      	it	cc
 801b6fa:	2204      	movcc	r2, #4
 801b6fc:	9201      	str	r2, [sp, #4]
 801b6fe:	9a02      	ldr	r2, [sp, #8]
 801b700:	9303      	str	r3, [sp, #12]
 801b702:	429a      	cmp	r2, r3
 801b704:	d808      	bhi.n	801b718 <__multiply+0x98>
 801b706:	2f00      	cmp	r7, #0
 801b708:	dc55      	bgt.n	801b7b6 <__multiply+0x136>
 801b70a:	6107      	str	r7, [r0, #16]
 801b70c:	b005      	add	sp, #20
 801b70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b712:	f843 2b04 	str.w	r2, [r3], #4
 801b716:	e7db      	b.n	801b6d0 <__multiply+0x50>
 801b718:	f8b3 a000 	ldrh.w	sl, [r3]
 801b71c:	f1ba 0f00 	cmp.w	sl, #0
 801b720:	d020      	beq.n	801b764 <__multiply+0xe4>
 801b722:	f105 0e14 	add.w	lr, r5, #20
 801b726:	46b1      	mov	r9, r6
 801b728:	2200      	movs	r2, #0
 801b72a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801b72e:	f8d9 b000 	ldr.w	fp, [r9]
 801b732:	b2a1      	uxth	r1, r4
 801b734:	fa1f fb8b 	uxth.w	fp, fp
 801b738:	fb0a b101 	mla	r1, sl, r1, fp
 801b73c:	4411      	add	r1, r2
 801b73e:	f8d9 2000 	ldr.w	r2, [r9]
 801b742:	0c24      	lsrs	r4, r4, #16
 801b744:	0c12      	lsrs	r2, r2, #16
 801b746:	fb0a 2404 	mla	r4, sl, r4, r2
 801b74a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801b74e:	b289      	uxth	r1, r1
 801b750:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801b754:	45f4      	cmp	ip, lr
 801b756:	f849 1b04 	str.w	r1, [r9], #4
 801b75a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801b75e:	d8e4      	bhi.n	801b72a <__multiply+0xaa>
 801b760:	9901      	ldr	r1, [sp, #4]
 801b762:	5072      	str	r2, [r6, r1]
 801b764:	9a03      	ldr	r2, [sp, #12]
 801b766:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b76a:	3304      	adds	r3, #4
 801b76c:	f1b9 0f00 	cmp.w	r9, #0
 801b770:	d01f      	beq.n	801b7b2 <__multiply+0x132>
 801b772:	6834      	ldr	r4, [r6, #0]
 801b774:	f105 0114 	add.w	r1, r5, #20
 801b778:	46b6      	mov	lr, r6
 801b77a:	f04f 0a00 	mov.w	sl, #0
 801b77e:	880a      	ldrh	r2, [r1, #0]
 801b780:	f8be b002 	ldrh.w	fp, [lr, #2]
 801b784:	fb09 b202 	mla	r2, r9, r2, fp
 801b788:	4492      	add	sl, r2
 801b78a:	b2a4      	uxth	r4, r4
 801b78c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801b790:	f84e 4b04 	str.w	r4, [lr], #4
 801b794:	f851 4b04 	ldr.w	r4, [r1], #4
 801b798:	f8be 2000 	ldrh.w	r2, [lr]
 801b79c:	0c24      	lsrs	r4, r4, #16
 801b79e:	fb09 2404 	mla	r4, r9, r4, r2
 801b7a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801b7a6:	458c      	cmp	ip, r1
 801b7a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801b7ac:	d8e7      	bhi.n	801b77e <__multiply+0xfe>
 801b7ae:	9a01      	ldr	r2, [sp, #4]
 801b7b0:	50b4      	str	r4, [r6, r2]
 801b7b2:	3604      	adds	r6, #4
 801b7b4:	e7a3      	b.n	801b6fe <__multiply+0x7e>
 801b7b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	d1a5      	bne.n	801b70a <__multiply+0x8a>
 801b7be:	3f01      	subs	r7, #1
 801b7c0:	e7a1      	b.n	801b706 <__multiply+0x86>
 801b7c2:	bf00      	nop
 801b7c4:	0801ed04 	.word	0x0801ed04
 801b7c8:	0801ed94 	.word	0x0801ed94

0801b7cc <__pow5mult>:
 801b7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b7d0:	4615      	mov	r5, r2
 801b7d2:	f012 0203 	ands.w	r2, r2, #3
 801b7d6:	4606      	mov	r6, r0
 801b7d8:	460f      	mov	r7, r1
 801b7da:	d007      	beq.n	801b7ec <__pow5mult+0x20>
 801b7dc:	4c25      	ldr	r4, [pc, #148]	; (801b874 <__pow5mult+0xa8>)
 801b7de:	3a01      	subs	r2, #1
 801b7e0:	2300      	movs	r3, #0
 801b7e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b7e6:	f7ff fe51 	bl	801b48c <__multadd>
 801b7ea:	4607      	mov	r7, r0
 801b7ec:	10ad      	asrs	r5, r5, #2
 801b7ee:	d03d      	beq.n	801b86c <__pow5mult+0xa0>
 801b7f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801b7f2:	b97c      	cbnz	r4, 801b814 <__pow5mult+0x48>
 801b7f4:	2010      	movs	r0, #16
 801b7f6:	f7fd fadd 	bl	8018db4 <malloc>
 801b7fa:	4602      	mov	r2, r0
 801b7fc:	6270      	str	r0, [r6, #36]	; 0x24
 801b7fe:	b928      	cbnz	r0, 801b80c <__pow5mult+0x40>
 801b800:	4b1d      	ldr	r3, [pc, #116]	; (801b878 <__pow5mult+0xac>)
 801b802:	481e      	ldr	r0, [pc, #120]	; (801b87c <__pow5mult+0xb0>)
 801b804:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801b808:	f7fe ffd8 	bl	801a7bc <__assert_func>
 801b80c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b810:	6004      	str	r4, [r0, #0]
 801b812:	60c4      	str	r4, [r0, #12]
 801b814:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b818:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b81c:	b94c      	cbnz	r4, 801b832 <__pow5mult+0x66>
 801b81e:	f240 2171 	movw	r1, #625	; 0x271
 801b822:	4630      	mov	r0, r6
 801b824:	f7ff ff16 	bl	801b654 <__i2b>
 801b828:	2300      	movs	r3, #0
 801b82a:	f8c8 0008 	str.w	r0, [r8, #8]
 801b82e:	4604      	mov	r4, r0
 801b830:	6003      	str	r3, [r0, #0]
 801b832:	f04f 0900 	mov.w	r9, #0
 801b836:	07eb      	lsls	r3, r5, #31
 801b838:	d50a      	bpl.n	801b850 <__pow5mult+0x84>
 801b83a:	4639      	mov	r1, r7
 801b83c:	4622      	mov	r2, r4
 801b83e:	4630      	mov	r0, r6
 801b840:	f7ff ff1e 	bl	801b680 <__multiply>
 801b844:	4639      	mov	r1, r7
 801b846:	4680      	mov	r8, r0
 801b848:	4630      	mov	r0, r6
 801b84a:	f7ff fdfd 	bl	801b448 <_Bfree>
 801b84e:	4647      	mov	r7, r8
 801b850:	106d      	asrs	r5, r5, #1
 801b852:	d00b      	beq.n	801b86c <__pow5mult+0xa0>
 801b854:	6820      	ldr	r0, [r4, #0]
 801b856:	b938      	cbnz	r0, 801b868 <__pow5mult+0x9c>
 801b858:	4622      	mov	r2, r4
 801b85a:	4621      	mov	r1, r4
 801b85c:	4630      	mov	r0, r6
 801b85e:	f7ff ff0f 	bl	801b680 <__multiply>
 801b862:	6020      	str	r0, [r4, #0]
 801b864:	f8c0 9000 	str.w	r9, [r0]
 801b868:	4604      	mov	r4, r0
 801b86a:	e7e4      	b.n	801b836 <__pow5mult+0x6a>
 801b86c:	4638      	mov	r0, r7
 801b86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b872:	bf00      	nop
 801b874:	0801eee8 	.word	0x0801eee8
 801b878:	0801eb95 	.word	0x0801eb95
 801b87c:	0801ed94 	.word	0x0801ed94

0801b880 <__lshift>:
 801b880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b884:	460c      	mov	r4, r1
 801b886:	6849      	ldr	r1, [r1, #4]
 801b888:	6923      	ldr	r3, [r4, #16]
 801b88a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b88e:	68a3      	ldr	r3, [r4, #8]
 801b890:	4607      	mov	r7, r0
 801b892:	4691      	mov	r9, r2
 801b894:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b898:	f108 0601 	add.w	r6, r8, #1
 801b89c:	42b3      	cmp	r3, r6
 801b89e:	db0b      	blt.n	801b8b8 <__lshift+0x38>
 801b8a0:	4638      	mov	r0, r7
 801b8a2:	f7ff fd91 	bl	801b3c8 <_Balloc>
 801b8a6:	4605      	mov	r5, r0
 801b8a8:	b948      	cbnz	r0, 801b8be <__lshift+0x3e>
 801b8aa:	4602      	mov	r2, r0
 801b8ac:	4b28      	ldr	r3, [pc, #160]	; (801b950 <__lshift+0xd0>)
 801b8ae:	4829      	ldr	r0, [pc, #164]	; (801b954 <__lshift+0xd4>)
 801b8b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 801b8b4:	f7fe ff82 	bl	801a7bc <__assert_func>
 801b8b8:	3101      	adds	r1, #1
 801b8ba:	005b      	lsls	r3, r3, #1
 801b8bc:	e7ee      	b.n	801b89c <__lshift+0x1c>
 801b8be:	2300      	movs	r3, #0
 801b8c0:	f100 0114 	add.w	r1, r0, #20
 801b8c4:	f100 0210 	add.w	r2, r0, #16
 801b8c8:	4618      	mov	r0, r3
 801b8ca:	4553      	cmp	r3, sl
 801b8cc:	db33      	blt.n	801b936 <__lshift+0xb6>
 801b8ce:	6920      	ldr	r0, [r4, #16]
 801b8d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b8d4:	f104 0314 	add.w	r3, r4, #20
 801b8d8:	f019 091f 	ands.w	r9, r9, #31
 801b8dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b8e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b8e4:	d02b      	beq.n	801b93e <__lshift+0xbe>
 801b8e6:	f1c9 0e20 	rsb	lr, r9, #32
 801b8ea:	468a      	mov	sl, r1
 801b8ec:	2200      	movs	r2, #0
 801b8ee:	6818      	ldr	r0, [r3, #0]
 801b8f0:	fa00 f009 	lsl.w	r0, r0, r9
 801b8f4:	4302      	orrs	r2, r0
 801b8f6:	f84a 2b04 	str.w	r2, [sl], #4
 801b8fa:	f853 2b04 	ldr.w	r2, [r3], #4
 801b8fe:	459c      	cmp	ip, r3
 801b900:	fa22 f20e 	lsr.w	r2, r2, lr
 801b904:	d8f3      	bhi.n	801b8ee <__lshift+0x6e>
 801b906:	ebac 0304 	sub.w	r3, ip, r4
 801b90a:	3b15      	subs	r3, #21
 801b90c:	f023 0303 	bic.w	r3, r3, #3
 801b910:	3304      	adds	r3, #4
 801b912:	f104 0015 	add.w	r0, r4, #21
 801b916:	4584      	cmp	ip, r0
 801b918:	bf38      	it	cc
 801b91a:	2304      	movcc	r3, #4
 801b91c:	50ca      	str	r2, [r1, r3]
 801b91e:	b10a      	cbz	r2, 801b924 <__lshift+0xa4>
 801b920:	f108 0602 	add.w	r6, r8, #2
 801b924:	3e01      	subs	r6, #1
 801b926:	4638      	mov	r0, r7
 801b928:	612e      	str	r6, [r5, #16]
 801b92a:	4621      	mov	r1, r4
 801b92c:	f7ff fd8c 	bl	801b448 <_Bfree>
 801b930:	4628      	mov	r0, r5
 801b932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b936:	f842 0f04 	str.w	r0, [r2, #4]!
 801b93a:	3301      	adds	r3, #1
 801b93c:	e7c5      	b.n	801b8ca <__lshift+0x4a>
 801b93e:	3904      	subs	r1, #4
 801b940:	f853 2b04 	ldr.w	r2, [r3], #4
 801b944:	f841 2f04 	str.w	r2, [r1, #4]!
 801b948:	459c      	cmp	ip, r3
 801b94a:	d8f9      	bhi.n	801b940 <__lshift+0xc0>
 801b94c:	e7ea      	b.n	801b924 <__lshift+0xa4>
 801b94e:	bf00      	nop
 801b950:	0801ed04 	.word	0x0801ed04
 801b954:	0801ed94 	.word	0x0801ed94

0801b958 <__mcmp>:
 801b958:	b530      	push	{r4, r5, lr}
 801b95a:	6902      	ldr	r2, [r0, #16]
 801b95c:	690c      	ldr	r4, [r1, #16]
 801b95e:	1b12      	subs	r2, r2, r4
 801b960:	d10e      	bne.n	801b980 <__mcmp+0x28>
 801b962:	f100 0314 	add.w	r3, r0, #20
 801b966:	3114      	adds	r1, #20
 801b968:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b96c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b970:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b974:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b978:	42a5      	cmp	r5, r4
 801b97a:	d003      	beq.n	801b984 <__mcmp+0x2c>
 801b97c:	d305      	bcc.n	801b98a <__mcmp+0x32>
 801b97e:	2201      	movs	r2, #1
 801b980:	4610      	mov	r0, r2
 801b982:	bd30      	pop	{r4, r5, pc}
 801b984:	4283      	cmp	r3, r0
 801b986:	d3f3      	bcc.n	801b970 <__mcmp+0x18>
 801b988:	e7fa      	b.n	801b980 <__mcmp+0x28>
 801b98a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b98e:	e7f7      	b.n	801b980 <__mcmp+0x28>

0801b990 <__mdiff>:
 801b990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b994:	460c      	mov	r4, r1
 801b996:	4606      	mov	r6, r0
 801b998:	4611      	mov	r1, r2
 801b99a:	4620      	mov	r0, r4
 801b99c:	4617      	mov	r7, r2
 801b99e:	f7ff ffdb 	bl	801b958 <__mcmp>
 801b9a2:	1e05      	subs	r5, r0, #0
 801b9a4:	d110      	bne.n	801b9c8 <__mdiff+0x38>
 801b9a6:	4629      	mov	r1, r5
 801b9a8:	4630      	mov	r0, r6
 801b9aa:	f7ff fd0d 	bl	801b3c8 <_Balloc>
 801b9ae:	b930      	cbnz	r0, 801b9be <__mdiff+0x2e>
 801b9b0:	4b39      	ldr	r3, [pc, #228]	; (801ba98 <__mdiff+0x108>)
 801b9b2:	4602      	mov	r2, r0
 801b9b4:	f240 2132 	movw	r1, #562	; 0x232
 801b9b8:	4838      	ldr	r0, [pc, #224]	; (801ba9c <__mdiff+0x10c>)
 801b9ba:	f7fe feff 	bl	801a7bc <__assert_func>
 801b9be:	2301      	movs	r3, #1
 801b9c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b9c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9c8:	bfa4      	itt	ge
 801b9ca:	463b      	movge	r3, r7
 801b9cc:	4627      	movge	r7, r4
 801b9ce:	4630      	mov	r0, r6
 801b9d0:	6879      	ldr	r1, [r7, #4]
 801b9d2:	bfa6      	itte	ge
 801b9d4:	461c      	movge	r4, r3
 801b9d6:	2500      	movge	r5, #0
 801b9d8:	2501      	movlt	r5, #1
 801b9da:	f7ff fcf5 	bl	801b3c8 <_Balloc>
 801b9de:	b920      	cbnz	r0, 801b9ea <__mdiff+0x5a>
 801b9e0:	4b2d      	ldr	r3, [pc, #180]	; (801ba98 <__mdiff+0x108>)
 801b9e2:	4602      	mov	r2, r0
 801b9e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 801b9e8:	e7e6      	b.n	801b9b8 <__mdiff+0x28>
 801b9ea:	693e      	ldr	r6, [r7, #16]
 801b9ec:	60c5      	str	r5, [r0, #12]
 801b9ee:	6925      	ldr	r5, [r4, #16]
 801b9f0:	f107 0114 	add.w	r1, r7, #20
 801b9f4:	f104 0914 	add.w	r9, r4, #20
 801b9f8:	f100 0e14 	add.w	lr, r0, #20
 801b9fc:	f107 0210 	add.w	r2, r7, #16
 801ba00:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801ba04:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801ba08:	46f2      	mov	sl, lr
 801ba0a:	2700      	movs	r7, #0
 801ba0c:	f859 3b04 	ldr.w	r3, [r9], #4
 801ba10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ba14:	fa1f f883 	uxth.w	r8, r3
 801ba18:	fa17 f78b 	uxtah	r7, r7, fp
 801ba1c:	0c1b      	lsrs	r3, r3, #16
 801ba1e:	eba7 0808 	sub.w	r8, r7, r8
 801ba22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ba26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ba2a:	fa1f f888 	uxth.w	r8, r8
 801ba2e:	141f      	asrs	r7, r3, #16
 801ba30:	454d      	cmp	r5, r9
 801ba32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ba36:	f84a 3b04 	str.w	r3, [sl], #4
 801ba3a:	d8e7      	bhi.n	801ba0c <__mdiff+0x7c>
 801ba3c:	1b2b      	subs	r3, r5, r4
 801ba3e:	3b15      	subs	r3, #21
 801ba40:	f023 0303 	bic.w	r3, r3, #3
 801ba44:	3304      	adds	r3, #4
 801ba46:	3415      	adds	r4, #21
 801ba48:	42a5      	cmp	r5, r4
 801ba4a:	bf38      	it	cc
 801ba4c:	2304      	movcc	r3, #4
 801ba4e:	4419      	add	r1, r3
 801ba50:	4473      	add	r3, lr
 801ba52:	469e      	mov	lr, r3
 801ba54:	460d      	mov	r5, r1
 801ba56:	4565      	cmp	r5, ip
 801ba58:	d30e      	bcc.n	801ba78 <__mdiff+0xe8>
 801ba5a:	f10c 0203 	add.w	r2, ip, #3
 801ba5e:	1a52      	subs	r2, r2, r1
 801ba60:	f022 0203 	bic.w	r2, r2, #3
 801ba64:	3903      	subs	r1, #3
 801ba66:	458c      	cmp	ip, r1
 801ba68:	bf38      	it	cc
 801ba6a:	2200      	movcc	r2, #0
 801ba6c:	441a      	add	r2, r3
 801ba6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ba72:	b17b      	cbz	r3, 801ba94 <__mdiff+0x104>
 801ba74:	6106      	str	r6, [r0, #16]
 801ba76:	e7a5      	b.n	801b9c4 <__mdiff+0x34>
 801ba78:	f855 8b04 	ldr.w	r8, [r5], #4
 801ba7c:	fa17 f488 	uxtah	r4, r7, r8
 801ba80:	1422      	asrs	r2, r4, #16
 801ba82:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801ba86:	b2a4      	uxth	r4, r4
 801ba88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801ba8c:	f84e 4b04 	str.w	r4, [lr], #4
 801ba90:	1417      	asrs	r7, r2, #16
 801ba92:	e7e0      	b.n	801ba56 <__mdiff+0xc6>
 801ba94:	3e01      	subs	r6, #1
 801ba96:	e7ea      	b.n	801ba6e <__mdiff+0xde>
 801ba98:	0801ed04 	.word	0x0801ed04
 801ba9c:	0801ed94 	.word	0x0801ed94

0801baa0 <__ulp>:
 801baa0:	b082      	sub	sp, #8
 801baa2:	ed8d 0b00 	vstr	d0, [sp]
 801baa6:	9b01      	ldr	r3, [sp, #4]
 801baa8:	4912      	ldr	r1, [pc, #72]	; (801baf4 <__ulp+0x54>)
 801baaa:	4019      	ands	r1, r3
 801baac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801bab0:	2900      	cmp	r1, #0
 801bab2:	dd05      	ble.n	801bac0 <__ulp+0x20>
 801bab4:	2200      	movs	r2, #0
 801bab6:	460b      	mov	r3, r1
 801bab8:	ec43 2b10 	vmov	d0, r2, r3
 801babc:	b002      	add	sp, #8
 801babe:	4770      	bx	lr
 801bac0:	4249      	negs	r1, r1
 801bac2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801bac6:	ea4f 5021 	mov.w	r0, r1, asr #20
 801baca:	f04f 0200 	mov.w	r2, #0
 801bace:	f04f 0300 	mov.w	r3, #0
 801bad2:	da04      	bge.n	801bade <__ulp+0x3e>
 801bad4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801bad8:	fa41 f300 	asr.w	r3, r1, r0
 801badc:	e7ec      	b.n	801bab8 <__ulp+0x18>
 801bade:	f1a0 0114 	sub.w	r1, r0, #20
 801bae2:	291e      	cmp	r1, #30
 801bae4:	bfda      	itte	le
 801bae6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801baea:	fa20 f101 	lsrle.w	r1, r0, r1
 801baee:	2101      	movgt	r1, #1
 801baf0:	460a      	mov	r2, r1
 801baf2:	e7e1      	b.n	801bab8 <__ulp+0x18>
 801baf4:	7ff00000 	.word	0x7ff00000

0801baf8 <__b2d>:
 801baf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bafa:	6905      	ldr	r5, [r0, #16]
 801bafc:	f100 0714 	add.w	r7, r0, #20
 801bb00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801bb04:	1f2e      	subs	r6, r5, #4
 801bb06:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801bb0a:	4620      	mov	r0, r4
 801bb0c:	f7ff fd52 	bl	801b5b4 <__hi0bits>
 801bb10:	f1c0 0320 	rsb	r3, r0, #32
 801bb14:	280a      	cmp	r0, #10
 801bb16:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801bb94 <__b2d+0x9c>
 801bb1a:	600b      	str	r3, [r1, #0]
 801bb1c:	dc14      	bgt.n	801bb48 <__b2d+0x50>
 801bb1e:	f1c0 0e0b 	rsb	lr, r0, #11
 801bb22:	fa24 f10e 	lsr.w	r1, r4, lr
 801bb26:	42b7      	cmp	r7, r6
 801bb28:	ea41 030c 	orr.w	r3, r1, ip
 801bb2c:	bf34      	ite	cc
 801bb2e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801bb32:	2100      	movcs	r1, #0
 801bb34:	3015      	adds	r0, #21
 801bb36:	fa04 f000 	lsl.w	r0, r4, r0
 801bb3a:	fa21 f10e 	lsr.w	r1, r1, lr
 801bb3e:	ea40 0201 	orr.w	r2, r0, r1
 801bb42:	ec43 2b10 	vmov	d0, r2, r3
 801bb46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb48:	42b7      	cmp	r7, r6
 801bb4a:	bf3a      	itte	cc
 801bb4c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801bb50:	f1a5 0608 	subcc.w	r6, r5, #8
 801bb54:	2100      	movcs	r1, #0
 801bb56:	380b      	subs	r0, #11
 801bb58:	d017      	beq.n	801bb8a <__b2d+0x92>
 801bb5a:	f1c0 0c20 	rsb	ip, r0, #32
 801bb5e:	fa04 f500 	lsl.w	r5, r4, r0
 801bb62:	42be      	cmp	r6, r7
 801bb64:	fa21 f40c 	lsr.w	r4, r1, ip
 801bb68:	ea45 0504 	orr.w	r5, r5, r4
 801bb6c:	bf8c      	ite	hi
 801bb6e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801bb72:	2400      	movls	r4, #0
 801bb74:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801bb78:	fa01 f000 	lsl.w	r0, r1, r0
 801bb7c:	fa24 f40c 	lsr.w	r4, r4, ip
 801bb80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801bb84:	ea40 0204 	orr.w	r2, r0, r4
 801bb88:	e7db      	b.n	801bb42 <__b2d+0x4a>
 801bb8a:	ea44 030c 	orr.w	r3, r4, ip
 801bb8e:	460a      	mov	r2, r1
 801bb90:	e7d7      	b.n	801bb42 <__b2d+0x4a>
 801bb92:	bf00      	nop
 801bb94:	3ff00000 	.word	0x3ff00000

0801bb98 <__d2b>:
 801bb98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bb9c:	4689      	mov	r9, r1
 801bb9e:	2101      	movs	r1, #1
 801bba0:	ec57 6b10 	vmov	r6, r7, d0
 801bba4:	4690      	mov	r8, r2
 801bba6:	f7ff fc0f 	bl	801b3c8 <_Balloc>
 801bbaa:	4604      	mov	r4, r0
 801bbac:	b930      	cbnz	r0, 801bbbc <__d2b+0x24>
 801bbae:	4602      	mov	r2, r0
 801bbb0:	4b25      	ldr	r3, [pc, #148]	; (801bc48 <__d2b+0xb0>)
 801bbb2:	4826      	ldr	r0, [pc, #152]	; (801bc4c <__d2b+0xb4>)
 801bbb4:	f240 310a 	movw	r1, #778	; 0x30a
 801bbb8:	f7fe fe00 	bl	801a7bc <__assert_func>
 801bbbc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801bbc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801bbc4:	bb35      	cbnz	r5, 801bc14 <__d2b+0x7c>
 801bbc6:	2e00      	cmp	r6, #0
 801bbc8:	9301      	str	r3, [sp, #4]
 801bbca:	d028      	beq.n	801bc1e <__d2b+0x86>
 801bbcc:	4668      	mov	r0, sp
 801bbce:	9600      	str	r6, [sp, #0]
 801bbd0:	f7ff fd10 	bl	801b5f4 <__lo0bits>
 801bbd4:	9900      	ldr	r1, [sp, #0]
 801bbd6:	b300      	cbz	r0, 801bc1a <__d2b+0x82>
 801bbd8:	9a01      	ldr	r2, [sp, #4]
 801bbda:	f1c0 0320 	rsb	r3, r0, #32
 801bbde:	fa02 f303 	lsl.w	r3, r2, r3
 801bbe2:	430b      	orrs	r3, r1
 801bbe4:	40c2      	lsrs	r2, r0
 801bbe6:	6163      	str	r3, [r4, #20]
 801bbe8:	9201      	str	r2, [sp, #4]
 801bbea:	9b01      	ldr	r3, [sp, #4]
 801bbec:	61a3      	str	r3, [r4, #24]
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	bf14      	ite	ne
 801bbf2:	2202      	movne	r2, #2
 801bbf4:	2201      	moveq	r2, #1
 801bbf6:	6122      	str	r2, [r4, #16]
 801bbf8:	b1d5      	cbz	r5, 801bc30 <__d2b+0x98>
 801bbfa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801bbfe:	4405      	add	r5, r0
 801bc00:	f8c9 5000 	str.w	r5, [r9]
 801bc04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801bc08:	f8c8 0000 	str.w	r0, [r8]
 801bc0c:	4620      	mov	r0, r4
 801bc0e:	b003      	add	sp, #12
 801bc10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bc14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bc18:	e7d5      	b.n	801bbc6 <__d2b+0x2e>
 801bc1a:	6161      	str	r1, [r4, #20]
 801bc1c:	e7e5      	b.n	801bbea <__d2b+0x52>
 801bc1e:	a801      	add	r0, sp, #4
 801bc20:	f7ff fce8 	bl	801b5f4 <__lo0bits>
 801bc24:	9b01      	ldr	r3, [sp, #4]
 801bc26:	6163      	str	r3, [r4, #20]
 801bc28:	2201      	movs	r2, #1
 801bc2a:	6122      	str	r2, [r4, #16]
 801bc2c:	3020      	adds	r0, #32
 801bc2e:	e7e3      	b.n	801bbf8 <__d2b+0x60>
 801bc30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801bc34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801bc38:	f8c9 0000 	str.w	r0, [r9]
 801bc3c:	6918      	ldr	r0, [r3, #16]
 801bc3e:	f7ff fcb9 	bl	801b5b4 <__hi0bits>
 801bc42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801bc46:	e7df      	b.n	801bc08 <__d2b+0x70>
 801bc48:	0801ed04 	.word	0x0801ed04
 801bc4c:	0801ed94 	.word	0x0801ed94

0801bc50 <__ratio>:
 801bc50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc54:	4688      	mov	r8, r1
 801bc56:	4669      	mov	r1, sp
 801bc58:	4681      	mov	r9, r0
 801bc5a:	f7ff ff4d 	bl	801baf8 <__b2d>
 801bc5e:	a901      	add	r1, sp, #4
 801bc60:	4640      	mov	r0, r8
 801bc62:	ec55 4b10 	vmov	r4, r5, d0
 801bc66:	f7ff ff47 	bl	801baf8 <__b2d>
 801bc6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bc6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801bc72:	eba3 0c02 	sub.w	ip, r3, r2
 801bc76:	e9dd 3200 	ldrd	r3, r2, [sp]
 801bc7a:	1a9b      	subs	r3, r3, r2
 801bc7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801bc80:	ec51 0b10 	vmov	r0, r1, d0
 801bc84:	2b00      	cmp	r3, #0
 801bc86:	bfd6      	itet	le
 801bc88:	460a      	movle	r2, r1
 801bc8a:	462a      	movgt	r2, r5
 801bc8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801bc90:	468b      	mov	fp, r1
 801bc92:	462f      	mov	r7, r5
 801bc94:	bfd4      	ite	le
 801bc96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801bc9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801bc9e:	4620      	mov	r0, r4
 801bca0:	ee10 2a10 	vmov	r2, s0
 801bca4:	465b      	mov	r3, fp
 801bca6:	4639      	mov	r1, r7
 801bca8:	f7e4 fde0 	bl	800086c <__aeabi_ddiv>
 801bcac:	ec41 0b10 	vmov	d0, r0, r1
 801bcb0:	b003      	add	sp, #12
 801bcb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bcb6 <__copybits>:
 801bcb6:	3901      	subs	r1, #1
 801bcb8:	b570      	push	{r4, r5, r6, lr}
 801bcba:	1149      	asrs	r1, r1, #5
 801bcbc:	6914      	ldr	r4, [r2, #16]
 801bcbe:	3101      	adds	r1, #1
 801bcc0:	f102 0314 	add.w	r3, r2, #20
 801bcc4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801bcc8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801bccc:	1f05      	subs	r5, r0, #4
 801bcce:	42a3      	cmp	r3, r4
 801bcd0:	d30c      	bcc.n	801bcec <__copybits+0x36>
 801bcd2:	1aa3      	subs	r3, r4, r2
 801bcd4:	3b11      	subs	r3, #17
 801bcd6:	f023 0303 	bic.w	r3, r3, #3
 801bcda:	3211      	adds	r2, #17
 801bcdc:	42a2      	cmp	r2, r4
 801bcde:	bf88      	it	hi
 801bce0:	2300      	movhi	r3, #0
 801bce2:	4418      	add	r0, r3
 801bce4:	2300      	movs	r3, #0
 801bce6:	4288      	cmp	r0, r1
 801bce8:	d305      	bcc.n	801bcf6 <__copybits+0x40>
 801bcea:	bd70      	pop	{r4, r5, r6, pc}
 801bcec:	f853 6b04 	ldr.w	r6, [r3], #4
 801bcf0:	f845 6f04 	str.w	r6, [r5, #4]!
 801bcf4:	e7eb      	b.n	801bcce <__copybits+0x18>
 801bcf6:	f840 3b04 	str.w	r3, [r0], #4
 801bcfa:	e7f4      	b.n	801bce6 <__copybits+0x30>

0801bcfc <__any_on>:
 801bcfc:	f100 0214 	add.w	r2, r0, #20
 801bd00:	6900      	ldr	r0, [r0, #16]
 801bd02:	114b      	asrs	r3, r1, #5
 801bd04:	4298      	cmp	r0, r3
 801bd06:	b510      	push	{r4, lr}
 801bd08:	db11      	blt.n	801bd2e <__any_on+0x32>
 801bd0a:	dd0a      	ble.n	801bd22 <__any_on+0x26>
 801bd0c:	f011 011f 	ands.w	r1, r1, #31
 801bd10:	d007      	beq.n	801bd22 <__any_on+0x26>
 801bd12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801bd16:	fa24 f001 	lsr.w	r0, r4, r1
 801bd1a:	fa00 f101 	lsl.w	r1, r0, r1
 801bd1e:	428c      	cmp	r4, r1
 801bd20:	d10b      	bne.n	801bd3a <__any_on+0x3e>
 801bd22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bd26:	4293      	cmp	r3, r2
 801bd28:	d803      	bhi.n	801bd32 <__any_on+0x36>
 801bd2a:	2000      	movs	r0, #0
 801bd2c:	bd10      	pop	{r4, pc}
 801bd2e:	4603      	mov	r3, r0
 801bd30:	e7f7      	b.n	801bd22 <__any_on+0x26>
 801bd32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bd36:	2900      	cmp	r1, #0
 801bd38:	d0f5      	beq.n	801bd26 <__any_on+0x2a>
 801bd3a:	2001      	movs	r0, #1
 801bd3c:	e7f6      	b.n	801bd2c <__any_on+0x30>

0801bd3e <_realloc_r>:
 801bd3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd40:	4607      	mov	r7, r0
 801bd42:	4614      	mov	r4, r2
 801bd44:	460e      	mov	r6, r1
 801bd46:	b921      	cbnz	r1, 801bd52 <_realloc_r+0x14>
 801bd48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801bd4c:	4611      	mov	r1, r2
 801bd4e:	f7fd b8d1 	b.w	8018ef4 <_malloc_r>
 801bd52:	b922      	cbnz	r2, 801bd5e <_realloc_r+0x20>
 801bd54:	f7fd f87e 	bl	8018e54 <_free_r>
 801bd58:	4625      	mov	r5, r4
 801bd5a:	4628      	mov	r0, r5
 801bd5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd5e:	f001 f841 	bl	801cde4 <_malloc_usable_size_r>
 801bd62:	42a0      	cmp	r0, r4
 801bd64:	d20f      	bcs.n	801bd86 <_realloc_r+0x48>
 801bd66:	4621      	mov	r1, r4
 801bd68:	4638      	mov	r0, r7
 801bd6a:	f7fd f8c3 	bl	8018ef4 <_malloc_r>
 801bd6e:	4605      	mov	r5, r0
 801bd70:	2800      	cmp	r0, #0
 801bd72:	d0f2      	beq.n	801bd5a <_realloc_r+0x1c>
 801bd74:	4631      	mov	r1, r6
 801bd76:	4622      	mov	r2, r4
 801bd78:	f7fd f82c 	bl	8018dd4 <memcpy>
 801bd7c:	4631      	mov	r1, r6
 801bd7e:	4638      	mov	r0, r7
 801bd80:	f7fd f868 	bl	8018e54 <_free_r>
 801bd84:	e7e9      	b.n	801bd5a <_realloc_r+0x1c>
 801bd86:	4635      	mov	r5, r6
 801bd88:	e7e7      	b.n	801bd5a <_realloc_r+0x1c>

0801bd8a <__ssputs_r>:
 801bd8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd8e:	688e      	ldr	r6, [r1, #8]
 801bd90:	429e      	cmp	r6, r3
 801bd92:	4682      	mov	sl, r0
 801bd94:	460c      	mov	r4, r1
 801bd96:	4690      	mov	r8, r2
 801bd98:	461f      	mov	r7, r3
 801bd9a:	d838      	bhi.n	801be0e <__ssputs_r+0x84>
 801bd9c:	898a      	ldrh	r2, [r1, #12]
 801bd9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801bda2:	d032      	beq.n	801be0a <__ssputs_r+0x80>
 801bda4:	6825      	ldr	r5, [r4, #0]
 801bda6:	6909      	ldr	r1, [r1, #16]
 801bda8:	eba5 0901 	sub.w	r9, r5, r1
 801bdac:	6965      	ldr	r5, [r4, #20]
 801bdae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bdb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bdb6:	3301      	adds	r3, #1
 801bdb8:	444b      	add	r3, r9
 801bdba:	106d      	asrs	r5, r5, #1
 801bdbc:	429d      	cmp	r5, r3
 801bdbe:	bf38      	it	cc
 801bdc0:	461d      	movcc	r5, r3
 801bdc2:	0553      	lsls	r3, r2, #21
 801bdc4:	d531      	bpl.n	801be2a <__ssputs_r+0xa0>
 801bdc6:	4629      	mov	r1, r5
 801bdc8:	f7fd f894 	bl	8018ef4 <_malloc_r>
 801bdcc:	4606      	mov	r6, r0
 801bdce:	b950      	cbnz	r0, 801bde6 <__ssputs_r+0x5c>
 801bdd0:	230c      	movs	r3, #12
 801bdd2:	f8ca 3000 	str.w	r3, [sl]
 801bdd6:	89a3      	ldrh	r3, [r4, #12]
 801bdd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bddc:	81a3      	strh	r3, [r4, #12]
 801bdde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bde2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bde6:	6921      	ldr	r1, [r4, #16]
 801bde8:	464a      	mov	r2, r9
 801bdea:	f7fc fff3 	bl	8018dd4 <memcpy>
 801bdee:	89a3      	ldrh	r3, [r4, #12]
 801bdf0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bdf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bdf8:	81a3      	strh	r3, [r4, #12]
 801bdfa:	6126      	str	r6, [r4, #16]
 801bdfc:	6165      	str	r5, [r4, #20]
 801bdfe:	444e      	add	r6, r9
 801be00:	eba5 0509 	sub.w	r5, r5, r9
 801be04:	6026      	str	r6, [r4, #0]
 801be06:	60a5      	str	r5, [r4, #8]
 801be08:	463e      	mov	r6, r7
 801be0a:	42be      	cmp	r6, r7
 801be0c:	d900      	bls.n	801be10 <__ssputs_r+0x86>
 801be0e:	463e      	mov	r6, r7
 801be10:	4632      	mov	r2, r6
 801be12:	6820      	ldr	r0, [r4, #0]
 801be14:	4641      	mov	r1, r8
 801be16:	f7fc ffeb 	bl	8018df0 <memmove>
 801be1a:	68a3      	ldr	r3, [r4, #8]
 801be1c:	6822      	ldr	r2, [r4, #0]
 801be1e:	1b9b      	subs	r3, r3, r6
 801be20:	4432      	add	r2, r6
 801be22:	60a3      	str	r3, [r4, #8]
 801be24:	6022      	str	r2, [r4, #0]
 801be26:	2000      	movs	r0, #0
 801be28:	e7db      	b.n	801bde2 <__ssputs_r+0x58>
 801be2a:	462a      	mov	r2, r5
 801be2c:	f7ff ff87 	bl	801bd3e <_realloc_r>
 801be30:	4606      	mov	r6, r0
 801be32:	2800      	cmp	r0, #0
 801be34:	d1e1      	bne.n	801bdfa <__ssputs_r+0x70>
 801be36:	6921      	ldr	r1, [r4, #16]
 801be38:	4650      	mov	r0, sl
 801be3a:	f7fd f80b 	bl	8018e54 <_free_r>
 801be3e:	e7c7      	b.n	801bdd0 <__ssputs_r+0x46>

0801be40 <_svfiprintf_r>:
 801be40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be44:	4698      	mov	r8, r3
 801be46:	898b      	ldrh	r3, [r1, #12]
 801be48:	061b      	lsls	r3, r3, #24
 801be4a:	b09d      	sub	sp, #116	; 0x74
 801be4c:	4607      	mov	r7, r0
 801be4e:	460d      	mov	r5, r1
 801be50:	4614      	mov	r4, r2
 801be52:	d50e      	bpl.n	801be72 <_svfiprintf_r+0x32>
 801be54:	690b      	ldr	r3, [r1, #16]
 801be56:	b963      	cbnz	r3, 801be72 <_svfiprintf_r+0x32>
 801be58:	2140      	movs	r1, #64	; 0x40
 801be5a:	f7fd f84b 	bl	8018ef4 <_malloc_r>
 801be5e:	6028      	str	r0, [r5, #0]
 801be60:	6128      	str	r0, [r5, #16]
 801be62:	b920      	cbnz	r0, 801be6e <_svfiprintf_r+0x2e>
 801be64:	230c      	movs	r3, #12
 801be66:	603b      	str	r3, [r7, #0]
 801be68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801be6c:	e0d1      	b.n	801c012 <_svfiprintf_r+0x1d2>
 801be6e:	2340      	movs	r3, #64	; 0x40
 801be70:	616b      	str	r3, [r5, #20]
 801be72:	2300      	movs	r3, #0
 801be74:	9309      	str	r3, [sp, #36]	; 0x24
 801be76:	2320      	movs	r3, #32
 801be78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801be7c:	f8cd 800c 	str.w	r8, [sp, #12]
 801be80:	2330      	movs	r3, #48	; 0x30
 801be82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801c02c <_svfiprintf_r+0x1ec>
 801be86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801be8a:	f04f 0901 	mov.w	r9, #1
 801be8e:	4623      	mov	r3, r4
 801be90:	469a      	mov	sl, r3
 801be92:	f813 2b01 	ldrb.w	r2, [r3], #1
 801be96:	b10a      	cbz	r2, 801be9c <_svfiprintf_r+0x5c>
 801be98:	2a25      	cmp	r2, #37	; 0x25
 801be9a:	d1f9      	bne.n	801be90 <_svfiprintf_r+0x50>
 801be9c:	ebba 0b04 	subs.w	fp, sl, r4
 801bea0:	d00b      	beq.n	801beba <_svfiprintf_r+0x7a>
 801bea2:	465b      	mov	r3, fp
 801bea4:	4622      	mov	r2, r4
 801bea6:	4629      	mov	r1, r5
 801bea8:	4638      	mov	r0, r7
 801beaa:	f7ff ff6e 	bl	801bd8a <__ssputs_r>
 801beae:	3001      	adds	r0, #1
 801beb0:	f000 80aa 	beq.w	801c008 <_svfiprintf_r+0x1c8>
 801beb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801beb6:	445a      	add	r2, fp
 801beb8:	9209      	str	r2, [sp, #36]	; 0x24
 801beba:	f89a 3000 	ldrb.w	r3, [sl]
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	f000 80a2 	beq.w	801c008 <_svfiprintf_r+0x1c8>
 801bec4:	2300      	movs	r3, #0
 801bec6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801beca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bece:	f10a 0a01 	add.w	sl, sl, #1
 801bed2:	9304      	str	r3, [sp, #16]
 801bed4:	9307      	str	r3, [sp, #28]
 801bed6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801beda:	931a      	str	r3, [sp, #104]	; 0x68
 801bedc:	4654      	mov	r4, sl
 801bede:	2205      	movs	r2, #5
 801bee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bee4:	4851      	ldr	r0, [pc, #324]	; (801c02c <_svfiprintf_r+0x1ec>)
 801bee6:	f7e4 f98b 	bl	8000200 <memchr>
 801beea:	9a04      	ldr	r2, [sp, #16]
 801beec:	b9d8      	cbnz	r0, 801bf26 <_svfiprintf_r+0xe6>
 801beee:	06d0      	lsls	r0, r2, #27
 801bef0:	bf44      	itt	mi
 801bef2:	2320      	movmi	r3, #32
 801bef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bef8:	0711      	lsls	r1, r2, #28
 801befa:	bf44      	itt	mi
 801befc:	232b      	movmi	r3, #43	; 0x2b
 801befe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bf02:	f89a 3000 	ldrb.w	r3, [sl]
 801bf06:	2b2a      	cmp	r3, #42	; 0x2a
 801bf08:	d015      	beq.n	801bf36 <_svfiprintf_r+0xf6>
 801bf0a:	9a07      	ldr	r2, [sp, #28]
 801bf0c:	4654      	mov	r4, sl
 801bf0e:	2000      	movs	r0, #0
 801bf10:	f04f 0c0a 	mov.w	ip, #10
 801bf14:	4621      	mov	r1, r4
 801bf16:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bf1a:	3b30      	subs	r3, #48	; 0x30
 801bf1c:	2b09      	cmp	r3, #9
 801bf1e:	d94e      	bls.n	801bfbe <_svfiprintf_r+0x17e>
 801bf20:	b1b0      	cbz	r0, 801bf50 <_svfiprintf_r+0x110>
 801bf22:	9207      	str	r2, [sp, #28]
 801bf24:	e014      	b.n	801bf50 <_svfiprintf_r+0x110>
 801bf26:	eba0 0308 	sub.w	r3, r0, r8
 801bf2a:	fa09 f303 	lsl.w	r3, r9, r3
 801bf2e:	4313      	orrs	r3, r2
 801bf30:	9304      	str	r3, [sp, #16]
 801bf32:	46a2      	mov	sl, r4
 801bf34:	e7d2      	b.n	801bedc <_svfiprintf_r+0x9c>
 801bf36:	9b03      	ldr	r3, [sp, #12]
 801bf38:	1d19      	adds	r1, r3, #4
 801bf3a:	681b      	ldr	r3, [r3, #0]
 801bf3c:	9103      	str	r1, [sp, #12]
 801bf3e:	2b00      	cmp	r3, #0
 801bf40:	bfbb      	ittet	lt
 801bf42:	425b      	neglt	r3, r3
 801bf44:	f042 0202 	orrlt.w	r2, r2, #2
 801bf48:	9307      	strge	r3, [sp, #28]
 801bf4a:	9307      	strlt	r3, [sp, #28]
 801bf4c:	bfb8      	it	lt
 801bf4e:	9204      	strlt	r2, [sp, #16]
 801bf50:	7823      	ldrb	r3, [r4, #0]
 801bf52:	2b2e      	cmp	r3, #46	; 0x2e
 801bf54:	d10c      	bne.n	801bf70 <_svfiprintf_r+0x130>
 801bf56:	7863      	ldrb	r3, [r4, #1]
 801bf58:	2b2a      	cmp	r3, #42	; 0x2a
 801bf5a:	d135      	bne.n	801bfc8 <_svfiprintf_r+0x188>
 801bf5c:	9b03      	ldr	r3, [sp, #12]
 801bf5e:	1d1a      	adds	r2, r3, #4
 801bf60:	681b      	ldr	r3, [r3, #0]
 801bf62:	9203      	str	r2, [sp, #12]
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	bfb8      	it	lt
 801bf68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801bf6c:	3402      	adds	r4, #2
 801bf6e:	9305      	str	r3, [sp, #20]
 801bf70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801c03c <_svfiprintf_r+0x1fc>
 801bf74:	7821      	ldrb	r1, [r4, #0]
 801bf76:	2203      	movs	r2, #3
 801bf78:	4650      	mov	r0, sl
 801bf7a:	f7e4 f941 	bl	8000200 <memchr>
 801bf7e:	b140      	cbz	r0, 801bf92 <_svfiprintf_r+0x152>
 801bf80:	2340      	movs	r3, #64	; 0x40
 801bf82:	eba0 000a 	sub.w	r0, r0, sl
 801bf86:	fa03 f000 	lsl.w	r0, r3, r0
 801bf8a:	9b04      	ldr	r3, [sp, #16]
 801bf8c:	4303      	orrs	r3, r0
 801bf8e:	3401      	adds	r4, #1
 801bf90:	9304      	str	r3, [sp, #16]
 801bf92:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf96:	4826      	ldr	r0, [pc, #152]	; (801c030 <_svfiprintf_r+0x1f0>)
 801bf98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bf9c:	2206      	movs	r2, #6
 801bf9e:	f7e4 f92f 	bl	8000200 <memchr>
 801bfa2:	2800      	cmp	r0, #0
 801bfa4:	d038      	beq.n	801c018 <_svfiprintf_r+0x1d8>
 801bfa6:	4b23      	ldr	r3, [pc, #140]	; (801c034 <_svfiprintf_r+0x1f4>)
 801bfa8:	bb1b      	cbnz	r3, 801bff2 <_svfiprintf_r+0x1b2>
 801bfaa:	9b03      	ldr	r3, [sp, #12]
 801bfac:	3307      	adds	r3, #7
 801bfae:	f023 0307 	bic.w	r3, r3, #7
 801bfb2:	3308      	adds	r3, #8
 801bfb4:	9303      	str	r3, [sp, #12]
 801bfb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bfb8:	4433      	add	r3, r6
 801bfba:	9309      	str	r3, [sp, #36]	; 0x24
 801bfbc:	e767      	b.n	801be8e <_svfiprintf_r+0x4e>
 801bfbe:	fb0c 3202 	mla	r2, ip, r2, r3
 801bfc2:	460c      	mov	r4, r1
 801bfc4:	2001      	movs	r0, #1
 801bfc6:	e7a5      	b.n	801bf14 <_svfiprintf_r+0xd4>
 801bfc8:	2300      	movs	r3, #0
 801bfca:	3401      	adds	r4, #1
 801bfcc:	9305      	str	r3, [sp, #20]
 801bfce:	4619      	mov	r1, r3
 801bfd0:	f04f 0c0a 	mov.w	ip, #10
 801bfd4:	4620      	mov	r0, r4
 801bfd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bfda:	3a30      	subs	r2, #48	; 0x30
 801bfdc:	2a09      	cmp	r2, #9
 801bfde:	d903      	bls.n	801bfe8 <_svfiprintf_r+0x1a8>
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d0c5      	beq.n	801bf70 <_svfiprintf_r+0x130>
 801bfe4:	9105      	str	r1, [sp, #20]
 801bfe6:	e7c3      	b.n	801bf70 <_svfiprintf_r+0x130>
 801bfe8:	fb0c 2101 	mla	r1, ip, r1, r2
 801bfec:	4604      	mov	r4, r0
 801bfee:	2301      	movs	r3, #1
 801bff0:	e7f0      	b.n	801bfd4 <_svfiprintf_r+0x194>
 801bff2:	ab03      	add	r3, sp, #12
 801bff4:	9300      	str	r3, [sp, #0]
 801bff6:	462a      	mov	r2, r5
 801bff8:	4b0f      	ldr	r3, [pc, #60]	; (801c038 <_svfiprintf_r+0x1f8>)
 801bffa:	a904      	add	r1, sp, #16
 801bffc:	4638      	mov	r0, r7
 801bffe:	f3af 8000 	nop.w
 801c002:	1c42      	adds	r2, r0, #1
 801c004:	4606      	mov	r6, r0
 801c006:	d1d6      	bne.n	801bfb6 <_svfiprintf_r+0x176>
 801c008:	89ab      	ldrh	r3, [r5, #12]
 801c00a:	065b      	lsls	r3, r3, #25
 801c00c:	f53f af2c 	bmi.w	801be68 <_svfiprintf_r+0x28>
 801c010:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c012:	b01d      	add	sp, #116	; 0x74
 801c014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c018:	ab03      	add	r3, sp, #12
 801c01a:	9300      	str	r3, [sp, #0]
 801c01c:	462a      	mov	r2, r5
 801c01e:	4b06      	ldr	r3, [pc, #24]	; (801c038 <_svfiprintf_r+0x1f8>)
 801c020:	a904      	add	r1, sp, #16
 801c022:	4638      	mov	r0, r7
 801c024:	f000 fba6 	bl	801c774 <_printf_i>
 801c028:	e7eb      	b.n	801c002 <_svfiprintf_r+0x1c2>
 801c02a:	bf00      	nop
 801c02c:	0801eef4 	.word	0x0801eef4
 801c030:	0801eefe 	.word	0x0801eefe
 801c034:	00000000 	.word	0x00000000
 801c038:	0801bd8b 	.word	0x0801bd8b
 801c03c:	0801eefa 	.word	0x0801eefa

0801c040 <_sungetc_r>:
 801c040:	b538      	push	{r3, r4, r5, lr}
 801c042:	1c4b      	adds	r3, r1, #1
 801c044:	4614      	mov	r4, r2
 801c046:	d103      	bne.n	801c050 <_sungetc_r+0x10>
 801c048:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801c04c:	4628      	mov	r0, r5
 801c04e:	bd38      	pop	{r3, r4, r5, pc}
 801c050:	8993      	ldrh	r3, [r2, #12]
 801c052:	f023 0320 	bic.w	r3, r3, #32
 801c056:	8193      	strh	r3, [r2, #12]
 801c058:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c05a:	6852      	ldr	r2, [r2, #4]
 801c05c:	b2cd      	uxtb	r5, r1
 801c05e:	b18b      	cbz	r3, 801c084 <_sungetc_r+0x44>
 801c060:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c062:	4293      	cmp	r3, r2
 801c064:	dd08      	ble.n	801c078 <_sungetc_r+0x38>
 801c066:	6823      	ldr	r3, [r4, #0]
 801c068:	1e5a      	subs	r2, r3, #1
 801c06a:	6022      	str	r2, [r4, #0]
 801c06c:	f803 5c01 	strb.w	r5, [r3, #-1]
 801c070:	6863      	ldr	r3, [r4, #4]
 801c072:	3301      	adds	r3, #1
 801c074:	6063      	str	r3, [r4, #4]
 801c076:	e7e9      	b.n	801c04c <_sungetc_r+0xc>
 801c078:	4621      	mov	r1, r4
 801c07a:	f000 fe43 	bl	801cd04 <__submore>
 801c07e:	2800      	cmp	r0, #0
 801c080:	d0f1      	beq.n	801c066 <_sungetc_r+0x26>
 801c082:	e7e1      	b.n	801c048 <_sungetc_r+0x8>
 801c084:	6921      	ldr	r1, [r4, #16]
 801c086:	6823      	ldr	r3, [r4, #0]
 801c088:	b151      	cbz	r1, 801c0a0 <_sungetc_r+0x60>
 801c08a:	4299      	cmp	r1, r3
 801c08c:	d208      	bcs.n	801c0a0 <_sungetc_r+0x60>
 801c08e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801c092:	42a9      	cmp	r1, r5
 801c094:	d104      	bne.n	801c0a0 <_sungetc_r+0x60>
 801c096:	3b01      	subs	r3, #1
 801c098:	3201      	adds	r2, #1
 801c09a:	6023      	str	r3, [r4, #0]
 801c09c:	6062      	str	r2, [r4, #4]
 801c09e:	e7d5      	b.n	801c04c <_sungetc_r+0xc>
 801c0a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801c0a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c0a8:	6363      	str	r3, [r4, #52]	; 0x34
 801c0aa:	2303      	movs	r3, #3
 801c0ac:	63a3      	str	r3, [r4, #56]	; 0x38
 801c0ae:	4623      	mov	r3, r4
 801c0b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 801c0b4:	6023      	str	r3, [r4, #0]
 801c0b6:	2301      	movs	r3, #1
 801c0b8:	e7dc      	b.n	801c074 <_sungetc_r+0x34>

0801c0ba <__ssrefill_r>:
 801c0ba:	b510      	push	{r4, lr}
 801c0bc:	460c      	mov	r4, r1
 801c0be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801c0c0:	b169      	cbz	r1, 801c0de <__ssrefill_r+0x24>
 801c0c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c0c6:	4299      	cmp	r1, r3
 801c0c8:	d001      	beq.n	801c0ce <__ssrefill_r+0x14>
 801c0ca:	f7fc fec3 	bl	8018e54 <_free_r>
 801c0ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c0d0:	6063      	str	r3, [r4, #4]
 801c0d2:	2000      	movs	r0, #0
 801c0d4:	6360      	str	r0, [r4, #52]	; 0x34
 801c0d6:	b113      	cbz	r3, 801c0de <__ssrefill_r+0x24>
 801c0d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c0da:	6023      	str	r3, [r4, #0]
 801c0dc:	bd10      	pop	{r4, pc}
 801c0de:	6923      	ldr	r3, [r4, #16]
 801c0e0:	6023      	str	r3, [r4, #0]
 801c0e2:	2300      	movs	r3, #0
 801c0e4:	6063      	str	r3, [r4, #4]
 801c0e6:	89a3      	ldrh	r3, [r4, #12]
 801c0e8:	f043 0320 	orr.w	r3, r3, #32
 801c0ec:	81a3      	strh	r3, [r4, #12]
 801c0ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c0f2:	e7f3      	b.n	801c0dc <__ssrefill_r+0x22>

0801c0f4 <__ssvfiscanf_r>:
 801c0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0f8:	460c      	mov	r4, r1
 801c0fa:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801c0fe:	2100      	movs	r1, #0
 801c100:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801c104:	49b2      	ldr	r1, [pc, #712]	; (801c3d0 <__ssvfiscanf_r+0x2dc>)
 801c106:	91a0      	str	r1, [sp, #640]	; 0x280
 801c108:	f10d 0804 	add.w	r8, sp, #4
 801c10c:	49b1      	ldr	r1, [pc, #708]	; (801c3d4 <__ssvfiscanf_r+0x2e0>)
 801c10e:	4fb2      	ldr	r7, [pc, #712]	; (801c3d8 <__ssvfiscanf_r+0x2e4>)
 801c110:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801c3dc <__ssvfiscanf_r+0x2e8>
 801c114:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801c118:	4606      	mov	r6, r0
 801c11a:	91a1      	str	r1, [sp, #644]	; 0x284
 801c11c:	9300      	str	r3, [sp, #0]
 801c11e:	f892 a000 	ldrb.w	sl, [r2]
 801c122:	f1ba 0f00 	cmp.w	sl, #0
 801c126:	f000 8151 	beq.w	801c3cc <__ssvfiscanf_r+0x2d8>
 801c12a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801c12e:	f013 0308 	ands.w	r3, r3, #8
 801c132:	f102 0501 	add.w	r5, r2, #1
 801c136:	d019      	beq.n	801c16c <__ssvfiscanf_r+0x78>
 801c138:	6863      	ldr	r3, [r4, #4]
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	dd0f      	ble.n	801c15e <__ssvfiscanf_r+0x6a>
 801c13e:	6823      	ldr	r3, [r4, #0]
 801c140:	781a      	ldrb	r2, [r3, #0]
 801c142:	5cba      	ldrb	r2, [r7, r2]
 801c144:	0712      	lsls	r2, r2, #28
 801c146:	d401      	bmi.n	801c14c <__ssvfiscanf_r+0x58>
 801c148:	462a      	mov	r2, r5
 801c14a:	e7e8      	b.n	801c11e <__ssvfiscanf_r+0x2a>
 801c14c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801c14e:	3201      	adds	r2, #1
 801c150:	9245      	str	r2, [sp, #276]	; 0x114
 801c152:	6862      	ldr	r2, [r4, #4]
 801c154:	3301      	adds	r3, #1
 801c156:	3a01      	subs	r2, #1
 801c158:	6062      	str	r2, [r4, #4]
 801c15a:	6023      	str	r3, [r4, #0]
 801c15c:	e7ec      	b.n	801c138 <__ssvfiscanf_r+0x44>
 801c15e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801c160:	4621      	mov	r1, r4
 801c162:	4630      	mov	r0, r6
 801c164:	4798      	blx	r3
 801c166:	2800      	cmp	r0, #0
 801c168:	d0e9      	beq.n	801c13e <__ssvfiscanf_r+0x4a>
 801c16a:	e7ed      	b.n	801c148 <__ssvfiscanf_r+0x54>
 801c16c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801c170:	f040 8083 	bne.w	801c27a <__ssvfiscanf_r+0x186>
 801c174:	9341      	str	r3, [sp, #260]	; 0x104
 801c176:	9343      	str	r3, [sp, #268]	; 0x10c
 801c178:	7853      	ldrb	r3, [r2, #1]
 801c17a:	2b2a      	cmp	r3, #42	; 0x2a
 801c17c:	bf02      	ittt	eq
 801c17e:	2310      	moveq	r3, #16
 801c180:	1c95      	addeq	r5, r2, #2
 801c182:	9341      	streq	r3, [sp, #260]	; 0x104
 801c184:	220a      	movs	r2, #10
 801c186:	46ab      	mov	fp, r5
 801c188:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801c18c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801c190:	2b09      	cmp	r3, #9
 801c192:	d91d      	bls.n	801c1d0 <__ssvfiscanf_r+0xdc>
 801c194:	4891      	ldr	r0, [pc, #580]	; (801c3dc <__ssvfiscanf_r+0x2e8>)
 801c196:	2203      	movs	r2, #3
 801c198:	f7e4 f832 	bl	8000200 <memchr>
 801c19c:	b140      	cbz	r0, 801c1b0 <__ssvfiscanf_r+0xbc>
 801c19e:	2301      	movs	r3, #1
 801c1a0:	eba0 0009 	sub.w	r0, r0, r9
 801c1a4:	fa03 f000 	lsl.w	r0, r3, r0
 801c1a8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801c1aa:	4318      	orrs	r0, r3
 801c1ac:	9041      	str	r0, [sp, #260]	; 0x104
 801c1ae:	465d      	mov	r5, fp
 801c1b0:	f815 3b01 	ldrb.w	r3, [r5], #1
 801c1b4:	2b78      	cmp	r3, #120	; 0x78
 801c1b6:	d806      	bhi.n	801c1c6 <__ssvfiscanf_r+0xd2>
 801c1b8:	2b57      	cmp	r3, #87	; 0x57
 801c1ba:	d810      	bhi.n	801c1de <__ssvfiscanf_r+0xea>
 801c1bc:	2b25      	cmp	r3, #37	; 0x25
 801c1be:	d05c      	beq.n	801c27a <__ssvfiscanf_r+0x186>
 801c1c0:	d856      	bhi.n	801c270 <__ssvfiscanf_r+0x17c>
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	d074      	beq.n	801c2b0 <__ssvfiscanf_r+0x1bc>
 801c1c6:	2303      	movs	r3, #3
 801c1c8:	9347      	str	r3, [sp, #284]	; 0x11c
 801c1ca:	230a      	movs	r3, #10
 801c1cc:	9342      	str	r3, [sp, #264]	; 0x108
 801c1ce:	e081      	b.n	801c2d4 <__ssvfiscanf_r+0x1e0>
 801c1d0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801c1d2:	fb02 1303 	mla	r3, r2, r3, r1
 801c1d6:	3b30      	subs	r3, #48	; 0x30
 801c1d8:	9343      	str	r3, [sp, #268]	; 0x10c
 801c1da:	465d      	mov	r5, fp
 801c1dc:	e7d3      	b.n	801c186 <__ssvfiscanf_r+0x92>
 801c1de:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801c1e2:	2a20      	cmp	r2, #32
 801c1e4:	d8ef      	bhi.n	801c1c6 <__ssvfiscanf_r+0xd2>
 801c1e6:	a101      	add	r1, pc, #4	; (adr r1, 801c1ec <__ssvfiscanf_r+0xf8>)
 801c1e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801c1ec:	0801c2bf 	.word	0x0801c2bf
 801c1f0:	0801c1c7 	.word	0x0801c1c7
 801c1f4:	0801c1c7 	.word	0x0801c1c7
 801c1f8:	0801c31d 	.word	0x0801c31d
 801c1fc:	0801c1c7 	.word	0x0801c1c7
 801c200:	0801c1c7 	.word	0x0801c1c7
 801c204:	0801c1c7 	.word	0x0801c1c7
 801c208:	0801c1c7 	.word	0x0801c1c7
 801c20c:	0801c1c7 	.word	0x0801c1c7
 801c210:	0801c1c7 	.word	0x0801c1c7
 801c214:	0801c1c7 	.word	0x0801c1c7
 801c218:	0801c333 	.word	0x0801c333
 801c21c:	0801c309 	.word	0x0801c309
 801c220:	0801c277 	.word	0x0801c277
 801c224:	0801c277 	.word	0x0801c277
 801c228:	0801c277 	.word	0x0801c277
 801c22c:	0801c1c7 	.word	0x0801c1c7
 801c230:	0801c30d 	.word	0x0801c30d
 801c234:	0801c1c7 	.word	0x0801c1c7
 801c238:	0801c1c7 	.word	0x0801c1c7
 801c23c:	0801c1c7 	.word	0x0801c1c7
 801c240:	0801c1c7 	.word	0x0801c1c7
 801c244:	0801c343 	.word	0x0801c343
 801c248:	0801c315 	.word	0x0801c315
 801c24c:	0801c2b7 	.word	0x0801c2b7
 801c250:	0801c1c7 	.word	0x0801c1c7
 801c254:	0801c1c7 	.word	0x0801c1c7
 801c258:	0801c33f 	.word	0x0801c33f
 801c25c:	0801c1c7 	.word	0x0801c1c7
 801c260:	0801c309 	.word	0x0801c309
 801c264:	0801c1c7 	.word	0x0801c1c7
 801c268:	0801c1c7 	.word	0x0801c1c7
 801c26c:	0801c2bf 	.word	0x0801c2bf
 801c270:	3b45      	subs	r3, #69	; 0x45
 801c272:	2b02      	cmp	r3, #2
 801c274:	d8a7      	bhi.n	801c1c6 <__ssvfiscanf_r+0xd2>
 801c276:	2305      	movs	r3, #5
 801c278:	e02b      	b.n	801c2d2 <__ssvfiscanf_r+0x1de>
 801c27a:	6863      	ldr	r3, [r4, #4]
 801c27c:	2b00      	cmp	r3, #0
 801c27e:	dd0d      	ble.n	801c29c <__ssvfiscanf_r+0x1a8>
 801c280:	6823      	ldr	r3, [r4, #0]
 801c282:	781a      	ldrb	r2, [r3, #0]
 801c284:	4552      	cmp	r2, sl
 801c286:	f040 80a1 	bne.w	801c3cc <__ssvfiscanf_r+0x2d8>
 801c28a:	3301      	adds	r3, #1
 801c28c:	6862      	ldr	r2, [r4, #4]
 801c28e:	6023      	str	r3, [r4, #0]
 801c290:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801c292:	3a01      	subs	r2, #1
 801c294:	3301      	adds	r3, #1
 801c296:	6062      	str	r2, [r4, #4]
 801c298:	9345      	str	r3, [sp, #276]	; 0x114
 801c29a:	e755      	b.n	801c148 <__ssvfiscanf_r+0x54>
 801c29c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801c29e:	4621      	mov	r1, r4
 801c2a0:	4630      	mov	r0, r6
 801c2a2:	4798      	blx	r3
 801c2a4:	2800      	cmp	r0, #0
 801c2a6:	d0eb      	beq.n	801c280 <__ssvfiscanf_r+0x18c>
 801c2a8:	9844      	ldr	r0, [sp, #272]	; 0x110
 801c2aa:	2800      	cmp	r0, #0
 801c2ac:	f040 8084 	bne.w	801c3b8 <__ssvfiscanf_r+0x2c4>
 801c2b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c2b4:	e086      	b.n	801c3c4 <__ssvfiscanf_r+0x2d0>
 801c2b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801c2b8:	f042 0220 	orr.w	r2, r2, #32
 801c2bc:	9241      	str	r2, [sp, #260]	; 0x104
 801c2be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801c2c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801c2c4:	9241      	str	r2, [sp, #260]	; 0x104
 801c2c6:	2210      	movs	r2, #16
 801c2c8:	2b6f      	cmp	r3, #111	; 0x6f
 801c2ca:	9242      	str	r2, [sp, #264]	; 0x108
 801c2cc:	bf34      	ite	cc
 801c2ce:	2303      	movcc	r3, #3
 801c2d0:	2304      	movcs	r3, #4
 801c2d2:	9347      	str	r3, [sp, #284]	; 0x11c
 801c2d4:	6863      	ldr	r3, [r4, #4]
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	dd41      	ble.n	801c35e <__ssvfiscanf_r+0x26a>
 801c2da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801c2dc:	0659      	lsls	r1, r3, #25
 801c2de:	d404      	bmi.n	801c2ea <__ssvfiscanf_r+0x1f6>
 801c2e0:	6823      	ldr	r3, [r4, #0]
 801c2e2:	781a      	ldrb	r2, [r3, #0]
 801c2e4:	5cba      	ldrb	r2, [r7, r2]
 801c2e6:	0712      	lsls	r2, r2, #28
 801c2e8:	d440      	bmi.n	801c36c <__ssvfiscanf_r+0x278>
 801c2ea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801c2ec:	2b02      	cmp	r3, #2
 801c2ee:	dc4f      	bgt.n	801c390 <__ssvfiscanf_r+0x29c>
 801c2f0:	466b      	mov	r3, sp
 801c2f2:	4622      	mov	r2, r4
 801c2f4:	a941      	add	r1, sp, #260	; 0x104
 801c2f6:	4630      	mov	r0, r6
 801c2f8:	f000 fb62 	bl	801c9c0 <_scanf_chars>
 801c2fc:	2801      	cmp	r0, #1
 801c2fe:	d065      	beq.n	801c3cc <__ssvfiscanf_r+0x2d8>
 801c300:	2802      	cmp	r0, #2
 801c302:	f47f af21 	bne.w	801c148 <__ssvfiscanf_r+0x54>
 801c306:	e7cf      	b.n	801c2a8 <__ssvfiscanf_r+0x1b4>
 801c308:	220a      	movs	r2, #10
 801c30a:	e7dd      	b.n	801c2c8 <__ssvfiscanf_r+0x1d4>
 801c30c:	2300      	movs	r3, #0
 801c30e:	9342      	str	r3, [sp, #264]	; 0x108
 801c310:	2303      	movs	r3, #3
 801c312:	e7de      	b.n	801c2d2 <__ssvfiscanf_r+0x1de>
 801c314:	2308      	movs	r3, #8
 801c316:	9342      	str	r3, [sp, #264]	; 0x108
 801c318:	2304      	movs	r3, #4
 801c31a:	e7da      	b.n	801c2d2 <__ssvfiscanf_r+0x1de>
 801c31c:	4629      	mov	r1, r5
 801c31e:	4640      	mov	r0, r8
 801c320:	f000 fcb6 	bl	801cc90 <__sccl>
 801c324:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801c326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c32a:	9341      	str	r3, [sp, #260]	; 0x104
 801c32c:	4605      	mov	r5, r0
 801c32e:	2301      	movs	r3, #1
 801c330:	e7cf      	b.n	801c2d2 <__ssvfiscanf_r+0x1de>
 801c332:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801c334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c338:	9341      	str	r3, [sp, #260]	; 0x104
 801c33a:	2300      	movs	r3, #0
 801c33c:	e7c9      	b.n	801c2d2 <__ssvfiscanf_r+0x1de>
 801c33e:	2302      	movs	r3, #2
 801c340:	e7c7      	b.n	801c2d2 <__ssvfiscanf_r+0x1de>
 801c342:	9841      	ldr	r0, [sp, #260]	; 0x104
 801c344:	06c3      	lsls	r3, r0, #27
 801c346:	f53f aeff 	bmi.w	801c148 <__ssvfiscanf_r+0x54>
 801c34a:	9b00      	ldr	r3, [sp, #0]
 801c34c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801c34e:	1d19      	adds	r1, r3, #4
 801c350:	9100      	str	r1, [sp, #0]
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	07c0      	lsls	r0, r0, #31
 801c356:	bf4c      	ite	mi
 801c358:	801a      	strhmi	r2, [r3, #0]
 801c35a:	601a      	strpl	r2, [r3, #0]
 801c35c:	e6f4      	b.n	801c148 <__ssvfiscanf_r+0x54>
 801c35e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801c360:	4621      	mov	r1, r4
 801c362:	4630      	mov	r0, r6
 801c364:	4798      	blx	r3
 801c366:	2800      	cmp	r0, #0
 801c368:	d0b7      	beq.n	801c2da <__ssvfiscanf_r+0x1e6>
 801c36a:	e79d      	b.n	801c2a8 <__ssvfiscanf_r+0x1b4>
 801c36c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801c36e:	3201      	adds	r2, #1
 801c370:	9245      	str	r2, [sp, #276]	; 0x114
 801c372:	6862      	ldr	r2, [r4, #4]
 801c374:	3a01      	subs	r2, #1
 801c376:	2a00      	cmp	r2, #0
 801c378:	6062      	str	r2, [r4, #4]
 801c37a:	dd02      	ble.n	801c382 <__ssvfiscanf_r+0x28e>
 801c37c:	3301      	adds	r3, #1
 801c37e:	6023      	str	r3, [r4, #0]
 801c380:	e7ae      	b.n	801c2e0 <__ssvfiscanf_r+0x1ec>
 801c382:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801c384:	4621      	mov	r1, r4
 801c386:	4630      	mov	r0, r6
 801c388:	4798      	blx	r3
 801c38a:	2800      	cmp	r0, #0
 801c38c:	d0a8      	beq.n	801c2e0 <__ssvfiscanf_r+0x1ec>
 801c38e:	e78b      	b.n	801c2a8 <__ssvfiscanf_r+0x1b4>
 801c390:	2b04      	cmp	r3, #4
 801c392:	dc06      	bgt.n	801c3a2 <__ssvfiscanf_r+0x2ae>
 801c394:	466b      	mov	r3, sp
 801c396:	4622      	mov	r2, r4
 801c398:	a941      	add	r1, sp, #260	; 0x104
 801c39a:	4630      	mov	r0, r6
 801c39c:	f000 fb68 	bl	801ca70 <_scanf_i>
 801c3a0:	e7ac      	b.n	801c2fc <__ssvfiscanf_r+0x208>
 801c3a2:	4b0f      	ldr	r3, [pc, #60]	; (801c3e0 <__ssvfiscanf_r+0x2ec>)
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	f43f aecf 	beq.w	801c148 <__ssvfiscanf_r+0x54>
 801c3aa:	466b      	mov	r3, sp
 801c3ac:	4622      	mov	r2, r4
 801c3ae:	a941      	add	r1, sp, #260	; 0x104
 801c3b0:	4630      	mov	r0, r6
 801c3b2:	f7fc fdf9 	bl	8018fa8 <_scanf_float>
 801c3b6:	e7a1      	b.n	801c2fc <__ssvfiscanf_r+0x208>
 801c3b8:	89a3      	ldrh	r3, [r4, #12]
 801c3ba:	f013 0f40 	tst.w	r3, #64	; 0x40
 801c3be:	bf18      	it	ne
 801c3c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801c3c4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801c3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3cc:	9844      	ldr	r0, [sp, #272]	; 0x110
 801c3ce:	e7f9      	b.n	801c3c4 <__ssvfiscanf_r+0x2d0>
 801c3d0:	0801c041 	.word	0x0801c041
 801c3d4:	0801c0bb 	.word	0x0801c0bb
 801c3d8:	0801ea89 	.word	0x0801ea89
 801c3dc:	0801eefa 	.word	0x0801eefa
 801c3e0:	08018fa9 	.word	0x08018fa9

0801c3e4 <__sfputc_r>:
 801c3e4:	6893      	ldr	r3, [r2, #8]
 801c3e6:	3b01      	subs	r3, #1
 801c3e8:	2b00      	cmp	r3, #0
 801c3ea:	b410      	push	{r4}
 801c3ec:	6093      	str	r3, [r2, #8]
 801c3ee:	da08      	bge.n	801c402 <__sfputc_r+0x1e>
 801c3f0:	6994      	ldr	r4, [r2, #24]
 801c3f2:	42a3      	cmp	r3, r4
 801c3f4:	db01      	blt.n	801c3fa <__sfputc_r+0x16>
 801c3f6:	290a      	cmp	r1, #10
 801c3f8:	d103      	bne.n	801c402 <__sfputc_r+0x1e>
 801c3fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c3fe:	f7fe b90b 	b.w	801a618 <__swbuf_r>
 801c402:	6813      	ldr	r3, [r2, #0]
 801c404:	1c58      	adds	r0, r3, #1
 801c406:	6010      	str	r0, [r2, #0]
 801c408:	7019      	strb	r1, [r3, #0]
 801c40a:	4608      	mov	r0, r1
 801c40c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c410:	4770      	bx	lr

0801c412 <__sfputs_r>:
 801c412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c414:	4606      	mov	r6, r0
 801c416:	460f      	mov	r7, r1
 801c418:	4614      	mov	r4, r2
 801c41a:	18d5      	adds	r5, r2, r3
 801c41c:	42ac      	cmp	r4, r5
 801c41e:	d101      	bne.n	801c424 <__sfputs_r+0x12>
 801c420:	2000      	movs	r0, #0
 801c422:	e007      	b.n	801c434 <__sfputs_r+0x22>
 801c424:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c428:	463a      	mov	r2, r7
 801c42a:	4630      	mov	r0, r6
 801c42c:	f7ff ffda 	bl	801c3e4 <__sfputc_r>
 801c430:	1c43      	adds	r3, r0, #1
 801c432:	d1f3      	bne.n	801c41c <__sfputs_r+0xa>
 801c434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c438 <_vfiprintf_r>:
 801c438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c43c:	460d      	mov	r5, r1
 801c43e:	b09d      	sub	sp, #116	; 0x74
 801c440:	4614      	mov	r4, r2
 801c442:	4698      	mov	r8, r3
 801c444:	4606      	mov	r6, r0
 801c446:	b118      	cbz	r0, 801c450 <_vfiprintf_r+0x18>
 801c448:	6983      	ldr	r3, [r0, #24]
 801c44a:	b90b      	cbnz	r3, 801c450 <_vfiprintf_r+0x18>
 801c44c:	f7fe fb0a 	bl	801aa64 <__sinit>
 801c450:	4b89      	ldr	r3, [pc, #548]	; (801c678 <_vfiprintf_r+0x240>)
 801c452:	429d      	cmp	r5, r3
 801c454:	d11b      	bne.n	801c48e <_vfiprintf_r+0x56>
 801c456:	6875      	ldr	r5, [r6, #4]
 801c458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c45a:	07d9      	lsls	r1, r3, #31
 801c45c:	d405      	bmi.n	801c46a <_vfiprintf_r+0x32>
 801c45e:	89ab      	ldrh	r3, [r5, #12]
 801c460:	059a      	lsls	r2, r3, #22
 801c462:	d402      	bmi.n	801c46a <_vfiprintf_r+0x32>
 801c464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c466:	f7fc fca2 	bl	8018dae <__retarget_lock_acquire_recursive>
 801c46a:	89ab      	ldrh	r3, [r5, #12]
 801c46c:	071b      	lsls	r3, r3, #28
 801c46e:	d501      	bpl.n	801c474 <_vfiprintf_r+0x3c>
 801c470:	692b      	ldr	r3, [r5, #16]
 801c472:	b9eb      	cbnz	r3, 801c4b0 <_vfiprintf_r+0x78>
 801c474:	4629      	mov	r1, r5
 801c476:	4630      	mov	r0, r6
 801c478:	f7fe f932 	bl	801a6e0 <__swsetup_r>
 801c47c:	b1c0      	cbz	r0, 801c4b0 <_vfiprintf_r+0x78>
 801c47e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c480:	07dc      	lsls	r4, r3, #31
 801c482:	d50e      	bpl.n	801c4a2 <_vfiprintf_r+0x6a>
 801c484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c488:	b01d      	add	sp, #116	; 0x74
 801c48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c48e:	4b7b      	ldr	r3, [pc, #492]	; (801c67c <_vfiprintf_r+0x244>)
 801c490:	429d      	cmp	r5, r3
 801c492:	d101      	bne.n	801c498 <_vfiprintf_r+0x60>
 801c494:	68b5      	ldr	r5, [r6, #8]
 801c496:	e7df      	b.n	801c458 <_vfiprintf_r+0x20>
 801c498:	4b79      	ldr	r3, [pc, #484]	; (801c680 <_vfiprintf_r+0x248>)
 801c49a:	429d      	cmp	r5, r3
 801c49c:	bf08      	it	eq
 801c49e:	68f5      	ldreq	r5, [r6, #12]
 801c4a0:	e7da      	b.n	801c458 <_vfiprintf_r+0x20>
 801c4a2:	89ab      	ldrh	r3, [r5, #12]
 801c4a4:	0598      	lsls	r0, r3, #22
 801c4a6:	d4ed      	bmi.n	801c484 <_vfiprintf_r+0x4c>
 801c4a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c4aa:	f7fc fc81 	bl	8018db0 <__retarget_lock_release_recursive>
 801c4ae:	e7e9      	b.n	801c484 <_vfiprintf_r+0x4c>
 801c4b0:	2300      	movs	r3, #0
 801c4b2:	9309      	str	r3, [sp, #36]	; 0x24
 801c4b4:	2320      	movs	r3, #32
 801c4b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c4ba:	f8cd 800c 	str.w	r8, [sp, #12]
 801c4be:	2330      	movs	r3, #48	; 0x30
 801c4c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c684 <_vfiprintf_r+0x24c>
 801c4c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c4c8:	f04f 0901 	mov.w	r9, #1
 801c4cc:	4623      	mov	r3, r4
 801c4ce:	469a      	mov	sl, r3
 801c4d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c4d4:	b10a      	cbz	r2, 801c4da <_vfiprintf_r+0xa2>
 801c4d6:	2a25      	cmp	r2, #37	; 0x25
 801c4d8:	d1f9      	bne.n	801c4ce <_vfiprintf_r+0x96>
 801c4da:	ebba 0b04 	subs.w	fp, sl, r4
 801c4de:	d00b      	beq.n	801c4f8 <_vfiprintf_r+0xc0>
 801c4e0:	465b      	mov	r3, fp
 801c4e2:	4622      	mov	r2, r4
 801c4e4:	4629      	mov	r1, r5
 801c4e6:	4630      	mov	r0, r6
 801c4e8:	f7ff ff93 	bl	801c412 <__sfputs_r>
 801c4ec:	3001      	adds	r0, #1
 801c4ee:	f000 80aa 	beq.w	801c646 <_vfiprintf_r+0x20e>
 801c4f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c4f4:	445a      	add	r2, fp
 801c4f6:	9209      	str	r2, [sp, #36]	; 0x24
 801c4f8:	f89a 3000 	ldrb.w	r3, [sl]
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	f000 80a2 	beq.w	801c646 <_vfiprintf_r+0x20e>
 801c502:	2300      	movs	r3, #0
 801c504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c50c:	f10a 0a01 	add.w	sl, sl, #1
 801c510:	9304      	str	r3, [sp, #16]
 801c512:	9307      	str	r3, [sp, #28]
 801c514:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c518:	931a      	str	r3, [sp, #104]	; 0x68
 801c51a:	4654      	mov	r4, sl
 801c51c:	2205      	movs	r2, #5
 801c51e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c522:	4858      	ldr	r0, [pc, #352]	; (801c684 <_vfiprintf_r+0x24c>)
 801c524:	f7e3 fe6c 	bl	8000200 <memchr>
 801c528:	9a04      	ldr	r2, [sp, #16]
 801c52a:	b9d8      	cbnz	r0, 801c564 <_vfiprintf_r+0x12c>
 801c52c:	06d1      	lsls	r1, r2, #27
 801c52e:	bf44      	itt	mi
 801c530:	2320      	movmi	r3, #32
 801c532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c536:	0713      	lsls	r3, r2, #28
 801c538:	bf44      	itt	mi
 801c53a:	232b      	movmi	r3, #43	; 0x2b
 801c53c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c540:	f89a 3000 	ldrb.w	r3, [sl]
 801c544:	2b2a      	cmp	r3, #42	; 0x2a
 801c546:	d015      	beq.n	801c574 <_vfiprintf_r+0x13c>
 801c548:	9a07      	ldr	r2, [sp, #28]
 801c54a:	4654      	mov	r4, sl
 801c54c:	2000      	movs	r0, #0
 801c54e:	f04f 0c0a 	mov.w	ip, #10
 801c552:	4621      	mov	r1, r4
 801c554:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c558:	3b30      	subs	r3, #48	; 0x30
 801c55a:	2b09      	cmp	r3, #9
 801c55c:	d94e      	bls.n	801c5fc <_vfiprintf_r+0x1c4>
 801c55e:	b1b0      	cbz	r0, 801c58e <_vfiprintf_r+0x156>
 801c560:	9207      	str	r2, [sp, #28]
 801c562:	e014      	b.n	801c58e <_vfiprintf_r+0x156>
 801c564:	eba0 0308 	sub.w	r3, r0, r8
 801c568:	fa09 f303 	lsl.w	r3, r9, r3
 801c56c:	4313      	orrs	r3, r2
 801c56e:	9304      	str	r3, [sp, #16]
 801c570:	46a2      	mov	sl, r4
 801c572:	e7d2      	b.n	801c51a <_vfiprintf_r+0xe2>
 801c574:	9b03      	ldr	r3, [sp, #12]
 801c576:	1d19      	adds	r1, r3, #4
 801c578:	681b      	ldr	r3, [r3, #0]
 801c57a:	9103      	str	r1, [sp, #12]
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	bfbb      	ittet	lt
 801c580:	425b      	neglt	r3, r3
 801c582:	f042 0202 	orrlt.w	r2, r2, #2
 801c586:	9307      	strge	r3, [sp, #28]
 801c588:	9307      	strlt	r3, [sp, #28]
 801c58a:	bfb8      	it	lt
 801c58c:	9204      	strlt	r2, [sp, #16]
 801c58e:	7823      	ldrb	r3, [r4, #0]
 801c590:	2b2e      	cmp	r3, #46	; 0x2e
 801c592:	d10c      	bne.n	801c5ae <_vfiprintf_r+0x176>
 801c594:	7863      	ldrb	r3, [r4, #1]
 801c596:	2b2a      	cmp	r3, #42	; 0x2a
 801c598:	d135      	bne.n	801c606 <_vfiprintf_r+0x1ce>
 801c59a:	9b03      	ldr	r3, [sp, #12]
 801c59c:	1d1a      	adds	r2, r3, #4
 801c59e:	681b      	ldr	r3, [r3, #0]
 801c5a0:	9203      	str	r2, [sp, #12]
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	bfb8      	it	lt
 801c5a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c5aa:	3402      	adds	r4, #2
 801c5ac:	9305      	str	r3, [sp, #20]
 801c5ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c694 <_vfiprintf_r+0x25c>
 801c5b2:	7821      	ldrb	r1, [r4, #0]
 801c5b4:	2203      	movs	r2, #3
 801c5b6:	4650      	mov	r0, sl
 801c5b8:	f7e3 fe22 	bl	8000200 <memchr>
 801c5bc:	b140      	cbz	r0, 801c5d0 <_vfiprintf_r+0x198>
 801c5be:	2340      	movs	r3, #64	; 0x40
 801c5c0:	eba0 000a 	sub.w	r0, r0, sl
 801c5c4:	fa03 f000 	lsl.w	r0, r3, r0
 801c5c8:	9b04      	ldr	r3, [sp, #16]
 801c5ca:	4303      	orrs	r3, r0
 801c5cc:	3401      	adds	r4, #1
 801c5ce:	9304      	str	r3, [sp, #16]
 801c5d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c5d4:	482c      	ldr	r0, [pc, #176]	; (801c688 <_vfiprintf_r+0x250>)
 801c5d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c5da:	2206      	movs	r2, #6
 801c5dc:	f7e3 fe10 	bl	8000200 <memchr>
 801c5e0:	2800      	cmp	r0, #0
 801c5e2:	d03f      	beq.n	801c664 <_vfiprintf_r+0x22c>
 801c5e4:	4b29      	ldr	r3, [pc, #164]	; (801c68c <_vfiprintf_r+0x254>)
 801c5e6:	bb1b      	cbnz	r3, 801c630 <_vfiprintf_r+0x1f8>
 801c5e8:	9b03      	ldr	r3, [sp, #12]
 801c5ea:	3307      	adds	r3, #7
 801c5ec:	f023 0307 	bic.w	r3, r3, #7
 801c5f0:	3308      	adds	r3, #8
 801c5f2:	9303      	str	r3, [sp, #12]
 801c5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c5f6:	443b      	add	r3, r7
 801c5f8:	9309      	str	r3, [sp, #36]	; 0x24
 801c5fa:	e767      	b.n	801c4cc <_vfiprintf_r+0x94>
 801c5fc:	fb0c 3202 	mla	r2, ip, r2, r3
 801c600:	460c      	mov	r4, r1
 801c602:	2001      	movs	r0, #1
 801c604:	e7a5      	b.n	801c552 <_vfiprintf_r+0x11a>
 801c606:	2300      	movs	r3, #0
 801c608:	3401      	adds	r4, #1
 801c60a:	9305      	str	r3, [sp, #20]
 801c60c:	4619      	mov	r1, r3
 801c60e:	f04f 0c0a 	mov.w	ip, #10
 801c612:	4620      	mov	r0, r4
 801c614:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c618:	3a30      	subs	r2, #48	; 0x30
 801c61a:	2a09      	cmp	r2, #9
 801c61c:	d903      	bls.n	801c626 <_vfiprintf_r+0x1ee>
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d0c5      	beq.n	801c5ae <_vfiprintf_r+0x176>
 801c622:	9105      	str	r1, [sp, #20]
 801c624:	e7c3      	b.n	801c5ae <_vfiprintf_r+0x176>
 801c626:	fb0c 2101 	mla	r1, ip, r1, r2
 801c62a:	4604      	mov	r4, r0
 801c62c:	2301      	movs	r3, #1
 801c62e:	e7f0      	b.n	801c612 <_vfiprintf_r+0x1da>
 801c630:	ab03      	add	r3, sp, #12
 801c632:	9300      	str	r3, [sp, #0]
 801c634:	462a      	mov	r2, r5
 801c636:	4b16      	ldr	r3, [pc, #88]	; (801c690 <_vfiprintf_r+0x258>)
 801c638:	a904      	add	r1, sp, #16
 801c63a:	4630      	mov	r0, r6
 801c63c:	f3af 8000 	nop.w
 801c640:	4607      	mov	r7, r0
 801c642:	1c78      	adds	r0, r7, #1
 801c644:	d1d6      	bne.n	801c5f4 <_vfiprintf_r+0x1bc>
 801c646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c648:	07d9      	lsls	r1, r3, #31
 801c64a:	d405      	bmi.n	801c658 <_vfiprintf_r+0x220>
 801c64c:	89ab      	ldrh	r3, [r5, #12]
 801c64e:	059a      	lsls	r2, r3, #22
 801c650:	d402      	bmi.n	801c658 <_vfiprintf_r+0x220>
 801c652:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c654:	f7fc fbac 	bl	8018db0 <__retarget_lock_release_recursive>
 801c658:	89ab      	ldrh	r3, [r5, #12]
 801c65a:	065b      	lsls	r3, r3, #25
 801c65c:	f53f af12 	bmi.w	801c484 <_vfiprintf_r+0x4c>
 801c660:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c662:	e711      	b.n	801c488 <_vfiprintf_r+0x50>
 801c664:	ab03      	add	r3, sp, #12
 801c666:	9300      	str	r3, [sp, #0]
 801c668:	462a      	mov	r2, r5
 801c66a:	4b09      	ldr	r3, [pc, #36]	; (801c690 <_vfiprintf_r+0x258>)
 801c66c:	a904      	add	r1, sp, #16
 801c66e:	4630      	mov	r0, r6
 801c670:	f000 f880 	bl	801c774 <_printf_i>
 801c674:	e7e4      	b.n	801c640 <_vfiprintf_r+0x208>
 801c676:	bf00      	nop
 801c678:	0801ecc4 	.word	0x0801ecc4
 801c67c:	0801ece4 	.word	0x0801ece4
 801c680:	0801eca4 	.word	0x0801eca4
 801c684:	0801eef4 	.word	0x0801eef4
 801c688:	0801eefe 	.word	0x0801eefe
 801c68c:	00000000 	.word	0x00000000
 801c690:	0801c413 	.word	0x0801c413
 801c694:	0801eefa 	.word	0x0801eefa

0801c698 <_printf_common>:
 801c698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c69c:	4616      	mov	r6, r2
 801c69e:	4699      	mov	r9, r3
 801c6a0:	688a      	ldr	r2, [r1, #8]
 801c6a2:	690b      	ldr	r3, [r1, #16]
 801c6a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c6a8:	4293      	cmp	r3, r2
 801c6aa:	bfb8      	it	lt
 801c6ac:	4613      	movlt	r3, r2
 801c6ae:	6033      	str	r3, [r6, #0]
 801c6b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c6b4:	4607      	mov	r7, r0
 801c6b6:	460c      	mov	r4, r1
 801c6b8:	b10a      	cbz	r2, 801c6be <_printf_common+0x26>
 801c6ba:	3301      	adds	r3, #1
 801c6bc:	6033      	str	r3, [r6, #0]
 801c6be:	6823      	ldr	r3, [r4, #0]
 801c6c0:	0699      	lsls	r1, r3, #26
 801c6c2:	bf42      	ittt	mi
 801c6c4:	6833      	ldrmi	r3, [r6, #0]
 801c6c6:	3302      	addmi	r3, #2
 801c6c8:	6033      	strmi	r3, [r6, #0]
 801c6ca:	6825      	ldr	r5, [r4, #0]
 801c6cc:	f015 0506 	ands.w	r5, r5, #6
 801c6d0:	d106      	bne.n	801c6e0 <_printf_common+0x48>
 801c6d2:	f104 0a19 	add.w	sl, r4, #25
 801c6d6:	68e3      	ldr	r3, [r4, #12]
 801c6d8:	6832      	ldr	r2, [r6, #0]
 801c6da:	1a9b      	subs	r3, r3, r2
 801c6dc:	42ab      	cmp	r3, r5
 801c6de:	dc26      	bgt.n	801c72e <_printf_common+0x96>
 801c6e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c6e4:	1e13      	subs	r3, r2, #0
 801c6e6:	6822      	ldr	r2, [r4, #0]
 801c6e8:	bf18      	it	ne
 801c6ea:	2301      	movne	r3, #1
 801c6ec:	0692      	lsls	r2, r2, #26
 801c6ee:	d42b      	bmi.n	801c748 <_printf_common+0xb0>
 801c6f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c6f4:	4649      	mov	r1, r9
 801c6f6:	4638      	mov	r0, r7
 801c6f8:	47c0      	blx	r8
 801c6fa:	3001      	adds	r0, #1
 801c6fc:	d01e      	beq.n	801c73c <_printf_common+0xa4>
 801c6fe:	6823      	ldr	r3, [r4, #0]
 801c700:	68e5      	ldr	r5, [r4, #12]
 801c702:	6832      	ldr	r2, [r6, #0]
 801c704:	f003 0306 	and.w	r3, r3, #6
 801c708:	2b04      	cmp	r3, #4
 801c70a:	bf08      	it	eq
 801c70c:	1aad      	subeq	r5, r5, r2
 801c70e:	68a3      	ldr	r3, [r4, #8]
 801c710:	6922      	ldr	r2, [r4, #16]
 801c712:	bf0c      	ite	eq
 801c714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c718:	2500      	movne	r5, #0
 801c71a:	4293      	cmp	r3, r2
 801c71c:	bfc4      	itt	gt
 801c71e:	1a9b      	subgt	r3, r3, r2
 801c720:	18ed      	addgt	r5, r5, r3
 801c722:	2600      	movs	r6, #0
 801c724:	341a      	adds	r4, #26
 801c726:	42b5      	cmp	r5, r6
 801c728:	d11a      	bne.n	801c760 <_printf_common+0xc8>
 801c72a:	2000      	movs	r0, #0
 801c72c:	e008      	b.n	801c740 <_printf_common+0xa8>
 801c72e:	2301      	movs	r3, #1
 801c730:	4652      	mov	r2, sl
 801c732:	4649      	mov	r1, r9
 801c734:	4638      	mov	r0, r7
 801c736:	47c0      	blx	r8
 801c738:	3001      	adds	r0, #1
 801c73a:	d103      	bne.n	801c744 <_printf_common+0xac>
 801c73c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c744:	3501      	adds	r5, #1
 801c746:	e7c6      	b.n	801c6d6 <_printf_common+0x3e>
 801c748:	18e1      	adds	r1, r4, r3
 801c74a:	1c5a      	adds	r2, r3, #1
 801c74c:	2030      	movs	r0, #48	; 0x30
 801c74e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c752:	4422      	add	r2, r4
 801c754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c758:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c75c:	3302      	adds	r3, #2
 801c75e:	e7c7      	b.n	801c6f0 <_printf_common+0x58>
 801c760:	2301      	movs	r3, #1
 801c762:	4622      	mov	r2, r4
 801c764:	4649      	mov	r1, r9
 801c766:	4638      	mov	r0, r7
 801c768:	47c0      	blx	r8
 801c76a:	3001      	adds	r0, #1
 801c76c:	d0e6      	beq.n	801c73c <_printf_common+0xa4>
 801c76e:	3601      	adds	r6, #1
 801c770:	e7d9      	b.n	801c726 <_printf_common+0x8e>
	...

0801c774 <_printf_i>:
 801c774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c778:	460c      	mov	r4, r1
 801c77a:	4691      	mov	r9, r2
 801c77c:	7e27      	ldrb	r7, [r4, #24]
 801c77e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c780:	2f78      	cmp	r7, #120	; 0x78
 801c782:	4680      	mov	r8, r0
 801c784:	469a      	mov	sl, r3
 801c786:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c78a:	d807      	bhi.n	801c79c <_printf_i+0x28>
 801c78c:	2f62      	cmp	r7, #98	; 0x62
 801c78e:	d80a      	bhi.n	801c7a6 <_printf_i+0x32>
 801c790:	2f00      	cmp	r7, #0
 801c792:	f000 80d8 	beq.w	801c946 <_printf_i+0x1d2>
 801c796:	2f58      	cmp	r7, #88	; 0x58
 801c798:	f000 80a3 	beq.w	801c8e2 <_printf_i+0x16e>
 801c79c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c7a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c7a4:	e03a      	b.n	801c81c <_printf_i+0xa8>
 801c7a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c7aa:	2b15      	cmp	r3, #21
 801c7ac:	d8f6      	bhi.n	801c79c <_printf_i+0x28>
 801c7ae:	a001      	add	r0, pc, #4	; (adr r0, 801c7b4 <_printf_i+0x40>)
 801c7b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801c7b4:	0801c80d 	.word	0x0801c80d
 801c7b8:	0801c821 	.word	0x0801c821
 801c7bc:	0801c79d 	.word	0x0801c79d
 801c7c0:	0801c79d 	.word	0x0801c79d
 801c7c4:	0801c79d 	.word	0x0801c79d
 801c7c8:	0801c79d 	.word	0x0801c79d
 801c7cc:	0801c821 	.word	0x0801c821
 801c7d0:	0801c79d 	.word	0x0801c79d
 801c7d4:	0801c79d 	.word	0x0801c79d
 801c7d8:	0801c79d 	.word	0x0801c79d
 801c7dc:	0801c79d 	.word	0x0801c79d
 801c7e0:	0801c92d 	.word	0x0801c92d
 801c7e4:	0801c851 	.word	0x0801c851
 801c7e8:	0801c90f 	.word	0x0801c90f
 801c7ec:	0801c79d 	.word	0x0801c79d
 801c7f0:	0801c79d 	.word	0x0801c79d
 801c7f4:	0801c94f 	.word	0x0801c94f
 801c7f8:	0801c79d 	.word	0x0801c79d
 801c7fc:	0801c851 	.word	0x0801c851
 801c800:	0801c79d 	.word	0x0801c79d
 801c804:	0801c79d 	.word	0x0801c79d
 801c808:	0801c917 	.word	0x0801c917
 801c80c:	680b      	ldr	r3, [r1, #0]
 801c80e:	1d1a      	adds	r2, r3, #4
 801c810:	681b      	ldr	r3, [r3, #0]
 801c812:	600a      	str	r2, [r1, #0]
 801c814:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c81c:	2301      	movs	r3, #1
 801c81e:	e0a3      	b.n	801c968 <_printf_i+0x1f4>
 801c820:	6825      	ldr	r5, [r4, #0]
 801c822:	6808      	ldr	r0, [r1, #0]
 801c824:	062e      	lsls	r6, r5, #24
 801c826:	f100 0304 	add.w	r3, r0, #4
 801c82a:	d50a      	bpl.n	801c842 <_printf_i+0xce>
 801c82c:	6805      	ldr	r5, [r0, #0]
 801c82e:	600b      	str	r3, [r1, #0]
 801c830:	2d00      	cmp	r5, #0
 801c832:	da03      	bge.n	801c83c <_printf_i+0xc8>
 801c834:	232d      	movs	r3, #45	; 0x2d
 801c836:	426d      	negs	r5, r5
 801c838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c83c:	485e      	ldr	r0, [pc, #376]	; (801c9b8 <_printf_i+0x244>)
 801c83e:	230a      	movs	r3, #10
 801c840:	e019      	b.n	801c876 <_printf_i+0x102>
 801c842:	f015 0f40 	tst.w	r5, #64	; 0x40
 801c846:	6805      	ldr	r5, [r0, #0]
 801c848:	600b      	str	r3, [r1, #0]
 801c84a:	bf18      	it	ne
 801c84c:	b22d      	sxthne	r5, r5
 801c84e:	e7ef      	b.n	801c830 <_printf_i+0xbc>
 801c850:	680b      	ldr	r3, [r1, #0]
 801c852:	6825      	ldr	r5, [r4, #0]
 801c854:	1d18      	adds	r0, r3, #4
 801c856:	6008      	str	r0, [r1, #0]
 801c858:	0628      	lsls	r0, r5, #24
 801c85a:	d501      	bpl.n	801c860 <_printf_i+0xec>
 801c85c:	681d      	ldr	r5, [r3, #0]
 801c85e:	e002      	b.n	801c866 <_printf_i+0xf2>
 801c860:	0669      	lsls	r1, r5, #25
 801c862:	d5fb      	bpl.n	801c85c <_printf_i+0xe8>
 801c864:	881d      	ldrh	r5, [r3, #0]
 801c866:	4854      	ldr	r0, [pc, #336]	; (801c9b8 <_printf_i+0x244>)
 801c868:	2f6f      	cmp	r7, #111	; 0x6f
 801c86a:	bf0c      	ite	eq
 801c86c:	2308      	moveq	r3, #8
 801c86e:	230a      	movne	r3, #10
 801c870:	2100      	movs	r1, #0
 801c872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c876:	6866      	ldr	r6, [r4, #4]
 801c878:	60a6      	str	r6, [r4, #8]
 801c87a:	2e00      	cmp	r6, #0
 801c87c:	bfa2      	ittt	ge
 801c87e:	6821      	ldrge	r1, [r4, #0]
 801c880:	f021 0104 	bicge.w	r1, r1, #4
 801c884:	6021      	strge	r1, [r4, #0]
 801c886:	b90d      	cbnz	r5, 801c88c <_printf_i+0x118>
 801c888:	2e00      	cmp	r6, #0
 801c88a:	d04d      	beq.n	801c928 <_printf_i+0x1b4>
 801c88c:	4616      	mov	r6, r2
 801c88e:	fbb5 f1f3 	udiv	r1, r5, r3
 801c892:	fb03 5711 	mls	r7, r3, r1, r5
 801c896:	5dc7      	ldrb	r7, [r0, r7]
 801c898:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c89c:	462f      	mov	r7, r5
 801c89e:	42bb      	cmp	r3, r7
 801c8a0:	460d      	mov	r5, r1
 801c8a2:	d9f4      	bls.n	801c88e <_printf_i+0x11a>
 801c8a4:	2b08      	cmp	r3, #8
 801c8a6:	d10b      	bne.n	801c8c0 <_printf_i+0x14c>
 801c8a8:	6823      	ldr	r3, [r4, #0]
 801c8aa:	07df      	lsls	r7, r3, #31
 801c8ac:	d508      	bpl.n	801c8c0 <_printf_i+0x14c>
 801c8ae:	6923      	ldr	r3, [r4, #16]
 801c8b0:	6861      	ldr	r1, [r4, #4]
 801c8b2:	4299      	cmp	r1, r3
 801c8b4:	bfde      	ittt	le
 801c8b6:	2330      	movle	r3, #48	; 0x30
 801c8b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c8bc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801c8c0:	1b92      	subs	r2, r2, r6
 801c8c2:	6122      	str	r2, [r4, #16]
 801c8c4:	f8cd a000 	str.w	sl, [sp]
 801c8c8:	464b      	mov	r3, r9
 801c8ca:	aa03      	add	r2, sp, #12
 801c8cc:	4621      	mov	r1, r4
 801c8ce:	4640      	mov	r0, r8
 801c8d0:	f7ff fee2 	bl	801c698 <_printf_common>
 801c8d4:	3001      	adds	r0, #1
 801c8d6:	d14c      	bne.n	801c972 <_printf_i+0x1fe>
 801c8d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c8dc:	b004      	add	sp, #16
 801c8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c8e2:	4835      	ldr	r0, [pc, #212]	; (801c9b8 <_printf_i+0x244>)
 801c8e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c8e8:	6823      	ldr	r3, [r4, #0]
 801c8ea:	680e      	ldr	r6, [r1, #0]
 801c8ec:	061f      	lsls	r7, r3, #24
 801c8ee:	f856 5b04 	ldr.w	r5, [r6], #4
 801c8f2:	600e      	str	r6, [r1, #0]
 801c8f4:	d514      	bpl.n	801c920 <_printf_i+0x1ac>
 801c8f6:	07d9      	lsls	r1, r3, #31
 801c8f8:	bf44      	itt	mi
 801c8fa:	f043 0320 	orrmi.w	r3, r3, #32
 801c8fe:	6023      	strmi	r3, [r4, #0]
 801c900:	b91d      	cbnz	r5, 801c90a <_printf_i+0x196>
 801c902:	6823      	ldr	r3, [r4, #0]
 801c904:	f023 0320 	bic.w	r3, r3, #32
 801c908:	6023      	str	r3, [r4, #0]
 801c90a:	2310      	movs	r3, #16
 801c90c:	e7b0      	b.n	801c870 <_printf_i+0xfc>
 801c90e:	6823      	ldr	r3, [r4, #0]
 801c910:	f043 0320 	orr.w	r3, r3, #32
 801c914:	6023      	str	r3, [r4, #0]
 801c916:	2378      	movs	r3, #120	; 0x78
 801c918:	4828      	ldr	r0, [pc, #160]	; (801c9bc <_printf_i+0x248>)
 801c91a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c91e:	e7e3      	b.n	801c8e8 <_printf_i+0x174>
 801c920:	065e      	lsls	r6, r3, #25
 801c922:	bf48      	it	mi
 801c924:	b2ad      	uxthmi	r5, r5
 801c926:	e7e6      	b.n	801c8f6 <_printf_i+0x182>
 801c928:	4616      	mov	r6, r2
 801c92a:	e7bb      	b.n	801c8a4 <_printf_i+0x130>
 801c92c:	680b      	ldr	r3, [r1, #0]
 801c92e:	6826      	ldr	r6, [r4, #0]
 801c930:	6960      	ldr	r0, [r4, #20]
 801c932:	1d1d      	adds	r5, r3, #4
 801c934:	600d      	str	r5, [r1, #0]
 801c936:	0635      	lsls	r5, r6, #24
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	d501      	bpl.n	801c940 <_printf_i+0x1cc>
 801c93c:	6018      	str	r0, [r3, #0]
 801c93e:	e002      	b.n	801c946 <_printf_i+0x1d2>
 801c940:	0671      	lsls	r1, r6, #25
 801c942:	d5fb      	bpl.n	801c93c <_printf_i+0x1c8>
 801c944:	8018      	strh	r0, [r3, #0]
 801c946:	2300      	movs	r3, #0
 801c948:	6123      	str	r3, [r4, #16]
 801c94a:	4616      	mov	r6, r2
 801c94c:	e7ba      	b.n	801c8c4 <_printf_i+0x150>
 801c94e:	680b      	ldr	r3, [r1, #0]
 801c950:	1d1a      	adds	r2, r3, #4
 801c952:	600a      	str	r2, [r1, #0]
 801c954:	681e      	ldr	r6, [r3, #0]
 801c956:	6862      	ldr	r2, [r4, #4]
 801c958:	2100      	movs	r1, #0
 801c95a:	4630      	mov	r0, r6
 801c95c:	f7e3 fc50 	bl	8000200 <memchr>
 801c960:	b108      	cbz	r0, 801c966 <_printf_i+0x1f2>
 801c962:	1b80      	subs	r0, r0, r6
 801c964:	6060      	str	r0, [r4, #4]
 801c966:	6863      	ldr	r3, [r4, #4]
 801c968:	6123      	str	r3, [r4, #16]
 801c96a:	2300      	movs	r3, #0
 801c96c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c970:	e7a8      	b.n	801c8c4 <_printf_i+0x150>
 801c972:	6923      	ldr	r3, [r4, #16]
 801c974:	4632      	mov	r2, r6
 801c976:	4649      	mov	r1, r9
 801c978:	4640      	mov	r0, r8
 801c97a:	47d0      	blx	sl
 801c97c:	3001      	adds	r0, #1
 801c97e:	d0ab      	beq.n	801c8d8 <_printf_i+0x164>
 801c980:	6823      	ldr	r3, [r4, #0]
 801c982:	079b      	lsls	r3, r3, #30
 801c984:	d413      	bmi.n	801c9ae <_printf_i+0x23a>
 801c986:	68e0      	ldr	r0, [r4, #12]
 801c988:	9b03      	ldr	r3, [sp, #12]
 801c98a:	4298      	cmp	r0, r3
 801c98c:	bfb8      	it	lt
 801c98e:	4618      	movlt	r0, r3
 801c990:	e7a4      	b.n	801c8dc <_printf_i+0x168>
 801c992:	2301      	movs	r3, #1
 801c994:	4632      	mov	r2, r6
 801c996:	4649      	mov	r1, r9
 801c998:	4640      	mov	r0, r8
 801c99a:	47d0      	blx	sl
 801c99c:	3001      	adds	r0, #1
 801c99e:	d09b      	beq.n	801c8d8 <_printf_i+0x164>
 801c9a0:	3501      	adds	r5, #1
 801c9a2:	68e3      	ldr	r3, [r4, #12]
 801c9a4:	9903      	ldr	r1, [sp, #12]
 801c9a6:	1a5b      	subs	r3, r3, r1
 801c9a8:	42ab      	cmp	r3, r5
 801c9aa:	dcf2      	bgt.n	801c992 <_printf_i+0x21e>
 801c9ac:	e7eb      	b.n	801c986 <_printf_i+0x212>
 801c9ae:	2500      	movs	r5, #0
 801c9b0:	f104 0619 	add.w	r6, r4, #25
 801c9b4:	e7f5      	b.n	801c9a2 <_printf_i+0x22e>
 801c9b6:	bf00      	nop
 801c9b8:	0801ef05 	.word	0x0801ef05
 801c9bc:	0801ef16 	.word	0x0801ef16

0801c9c0 <_scanf_chars>:
 801c9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c9c4:	4615      	mov	r5, r2
 801c9c6:	688a      	ldr	r2, [r1, #8]
 801c9c8:	4680      	mov	r8, r0
 801c9ca:	460c      	mov	r4, r1
 801c9cc:	b932      	cbnz	r2, 801c9dc <_scanf_chars+0x1c>
 801c9ce:	698a      	ldr	r2, [r1, #24]
 801c9d0:	2a00      	cmp	r2, #0
 801c9d2:	bf0c      	ite	eq
 801c9d4:	2201      	moveq	r2, #1
 801c9d6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 801c9da:	608a      	str	r2, [r1, #8]
 801c9dc:	6822      	ldr	r2, [r4, #0]
 801c9de:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801ca6c <_scanf_chars+0xac>
 801c9e2:	06d1      	lsls	r1, r2, #27
 801c9e4:	bf5f      	itttt	pl
 801c9e6:	681a      	ldrpl	r2, [r3, #0]
 801c9e8:	1d11      	addpl	r1, r2, #4
 801c9ea:	6019      	strpl	r1, [r3, #0]
 801c9ec:	6816      	ldrpl	r6, [r2, #0]
 801c9ee:	2700      	movs	r7, #0
 801c9f0:	69a0      	ldr	r0, [r4, #24]
 801c9f2:	b188      	cbz	r0, 801ca18 <_scanf_chars+0x58>
 801c9f4:	2801      	cmp	r0, #1
 801c9f6:	d107      	bne.n	801ca08 <_scanf_chars+0x48>
 801c9f8:	682b      	ldr	r3, [r5, #0]
 801c9fa:	781a      	ldrb	r2, [r3, #0]
 801c9fc:	6963      	ldr	r3, [r4, #20]
 801c9fe:	5c9b      	ldrb	r3, [r3, r2]
 801ca00:	b953      	cbnz	r3, 801ca18 <_scanf_chars+0x58>
 801ca02:	bb27      	cbnz	r7, 801ca4e <_scanf_chars+0x8e>
 801ca04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ca08:	2802      	cmp	r0, #2
 801ca0a:	d120      	bne.n	801ca4e <_scanf_chars+0x8e>
 801ca0c:	682b      	ldr	r3, [r5, #0]
 801ca0e:	781b      	ldrb	r3, [r3, #0]
 801ca10:	f813 3009 	ldrb.w	r3, [r3, r9]
 801ca14:	071b      	lsls	r3, r3, #28
 801ca16:	d41a      	bmi.n	801ca4e <_scanf_chars+0x8e>
 801ca18:	6823      	ldr	r3, [r4, #0]
 801ca1a:	06da      	lsls	r2, r3, #27
 801ca1c:	bf5e      	ittt	pl
 801ca1e:	682b      	ldrpl	r3, [r5, #0]
 801ca20:	781b      	ldrbpl	r3, [r3, #0]
 801ca22:	f806 3b01 	strbpl.w	r3, [r6], #1
 801ca26:	682a      	ldr	r2, [r5, #0]
 801ca28:	686b      	ldr	r3, [r5, #4]
 801ca2a:	3201      	adds	r2, #1
 801ca2c:	602a      	str	r2, [r5, #0]
 801ca2e:	68a2      	ldr	r2, [r4, #8]
 801ca30:	3b01      	subs	r3, #1
 801ca32:	3a01      	subs	r2, #1
 801ca34:	606b      	str	r3, [r5, #4]
 801ca36:	3701      	adds	r7, #1
 801ca38:	60a2      	str	r2, [r4, #8]
 801ca3a:	b142      	cbz	r2, 801ca4e <_scanf_chars+0x8e>
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	dcd7      	bgt.n	801c9f0 <_scanf_chars+0x30>
 801ca40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ca44:	4629      	mov	r1, r5
 801ca46:	4640      	mov	r0, r8
 801ca48:	4798      	blx	r3
 801ca4a:	2800      	cmp	r0, #0
 801ca4c:	d0d0      	beq.n	801c9f0 <_scanf_chars+0x30>
 801ca4e:	6823      	ldr	r3, [r4, #0]
 801ca50:	f013 0310 	ands.w	r3, r3, #16
 801ca54:	d105      	bne.n	801ca62 <_scanf_chars+0xa2>
 801ca56:	68e2      	ldr	r2, [r4, #12]
 801ca58:	3201      	adds	r2, #1
 801ca5a:	60e2      	str	r2, [r4, #12]
 801ca5c:	69a2      	ldr	r2, [r4, #24]
 801ca5e:	b102      	cbz	r2, 801ca62 <_scanf_chars+0xa2>
 801ca60:	7033      	strb	r3, [r6, #0]
 801ca62:	6923      	ldr	r3, [r4, #16]
 801ca64:	441f      	add	r7, r3
 801ca66:	6127      	str	r7, [r4, #16]
 801ca68:	2000      	movs	r0, #0
 801ca6a:	e7cb      	b.n	801ca04 <_scanf_chars+0x44>
 801ca6c:	0801ea89 	.word	0x0801ea89

0801ca70 <_scanf_i>:
 801ca70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca74:	4698      	mov	r8, r3
 801ca76:	4b74      	ldr	r3, [pc, #464]	; (801cc48 <_scanf_i+0x1d8>)
 801ca78:	460c      	mov	r4, r1
 801ca7a:	4682      	mov	sl, r0
 801ca7c:	4616      	mov	r6, r2
 801ca7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ca82:	b087      	sub	sp, #28
 801ca84:	ab03      	add	r3, sp, #12
 801ca86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ca8a:	4b70      	ldr	r3, [pc, #448]	; (801cc4c <_scanf_i+0x1dc>)
 801ca8c:	69a1      	ldr	r1, [r4, #24]
 801ca8e:	4a70      	ldr	r2, [pc, #448]	; (801cc50 <_scanf_i+0x1e0>)
 801ca90:	2903      	cmp	r1, #3
 801ca92:	bf18      	it	ne
 801ca94:	461a      	movne	r2, r3
 801ca96:	68a3      	ldr	r3, [r4, #8]
 801ca98:	9201      	str	r2, [sp, #4]
 801ca9a:	1e5a      	subs	r2, r3, #1
 801ca9c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801caa0:	bf88      	it	hi
 801caa2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801caa6:	4627      	mov	r7, r4
 801caa8:	bf82      	ittt	hi
 801caaa:	eb03 0905 	addhi.w	r9, r3, r5
 801caae:	f240 135d 	movwhi	r3, #349	; 0x15d
 801cab2:	60a3      	strhi	r3, [r4, #8]
 801cab4:	f857 3b1c 	ldr.w	r3, [r7], #28
 801cab8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801cabc:	bf98      	it	ls
 801cabe:	f04f 0900 	movls.w	r9, #0
 801cac2:	6023      	str	r3, [r4, #0]
 801cac4:	463d      	mov	r5, r7
 801cac6:	f04f 0b00 	mov.w	fp, #0
 801caca:	6831      	ldr	r1, [r6, #0]
 801cacc:	ab03      	add	r3, sp, #12
 801cace:	7809      	ldrb	r1, [r1, #0]
 801cad0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801cad4:	2202      	movs	r2, #2
 801cad6:	f7e3 fb93 	bl	8000200 <memchr>
 801cada:	b328      	cbz	r0, 801cb28 <_scanf_i+0xb8>
 801cadc:	f1bb 0f01 	cmp.w	fp, #1
 801cae0:	d159      	bne.n	801cb96 <_scanf_i+0x126>
 801cae2:	6862      	ldr	r2, [r4, #4]
 801cae4:	b92a      	cbnz	r2, 801caf2 <_scanf_i+0x82>
 801cae6:	6822      	ldr	r2, [r4, #0]
 801cae8:	2308      	movs	r3, #8
 801caea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801caee:	6063      	str	r3, [r4, #4]
 801caf0:	6022      	str	r2, [r4, #0]
 801caf2:	6822      	ldr	r2, [r4, #0]
 801caf4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801caf8:	6022      	str	r2, [r4, #0]
 801cafa:	68a2      	ldr	r2, [r4, #8]
 801cafc:	1e51      	subs	r1, r2, #1
 801cafe:	60a1      	str	r1, [r4, #8]
 801cb00:	b192      	cbz	r2, 801cb28 <_scanf_i+0xb8>
 801cb02:	6832      	ldr	r2, [r6, #0]
 801cb04:	1c51      	adds	r1, r2, #1
 801cb06:	6031      	str	r1, [r6, #0]
 801cb08:	7812      	ldrb	r2, [r2, #0]
 801cb0a:	f805 2b01 	strb.w	r2, [r5], #1
 801cb0e:	6872      	ldr	r2, [r6, #4]
 801cb10:	3a01      	subs	r2, #1
 801cb12:	2a00      	cmp	r2, #0
 801cb14:	6072      	str	r2, [r6, #4]
 801cb16:	dc07      	bgt.n	801cb28 <_scanf_i+0xb8>
 801cb18:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801cb1c:	4631      	mov	r1, r6
 801cb1e:	4650      	mov	r0, sl
 801cb20:	4790      	blx	r2
 801cb22:	2800      	cmp	r0, #0
 801cb24:	f040 8085 	bne.w	801cc32 <_scanf_i+0x1c2>
 801cb28:	f10b 0b01 	add.w	fp, fp, #1
 801cb2c:	f1bb 0f03 	cmp.w	fp, #3
 801cb30:	d1cb      	bne.n	801caca <_scanf_i+0x5a>
 801cb32:	6863      	ldr	r3, [r4, #4]
 801cb34:	b90b      	cbnz	r3, 801cb3a <_scanf_i+0xca>
 801cb36:	230a      	movs	r3, #10
 801cb38:	6063      	str	r3, [r4, #4]
 801cb3a:	6863      	ldr	r3, [r4, #4]
 801cb3c:	4945      	ldr	r1, [pc, #276]	; (801cc54 <_scanf_i+0x1e4>)
 801cb3e:	6960      	ldr	r0, [r4, #20]
 801cb40:	1ac9      	subs	r1, r1, r3
 801cb42:	f000 f8a5 	bl	801cc90 <__sccl>
 801cb46:	f04f 0b00 	mov.w	fp, #0
 801cb4a:	68a3      	ldr	r3, [r4, #8]
 801cb4c:	6822      	ldr	r2, [r4, #0]
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d03d      	beq.n	801cbce <_scanf_i+0x15e>
 801cb52:	6831      	ldr	r1, [r6, #0]
 801cb54:	6960      	ldr	r0, [r4, #20]
 801cb56:	f891 c000 	ldrb.w	ip, [r1]
 801cb5a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801cb5e:	2800      	cmp	r0, #0
 801cb60:	d035      	beq.n	801cbce <_scanf_i+0x15e>
 801cb62:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801cb66:	d124      	bne.n	801cbb2 <_scanf_i+0x142>
 801cb68:	0510      	lsls	r0, r2, #20
 801cb6a:	d522      	bpl.n	801cbb2 <_scanf_i+0x142>
 801cb6c:	f10b 0b01 	add.w	fp, fp, #1
 801cb70:	f1b9 0f00 	cmp.w	r9, #0
 801cb74:	d003      	beq.n	801cb7e <_scanf_i+0x10e>
 801cb76:	3301      	adds	r3, #1
 801cb78:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801cb7c:	60a3      	str	r3, [r4, #8]
 801cb7e:	6873      	ldr	r3, [r6, #4]
 801cb80:	3b01      	subs	r3, #1
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	6073      	str	r3, [r6, #4]
 801cb86:	dd1b      	ble.n	801cbc0 <_scanf_i+0x150>
 801cb88:	6833      	ldr	r3, [r6, #0]
 801cb8a:	3301      	adds	r3, #1
 801cb8c:	6033      	str	r3, [r6, #0]
 801cb8e:	68a3      	ldr	r3, [r4, #8]
 801cb90:	3b01      	subs	r3, #1
 801cb92:	60a3      	str	r3, [r4, #8]
 801cb94:	e7d9      	b.n	801cb4a <_scanf_i+0xda>
 801cb96:	f1bb 0f02 	cmp.w	fp, #2
 801cb9a:	d1ae      	bne.n	801cafa <_scanf_i+0x8a>
 801cb9c:	6822      	ldr	r2, [r4, #0]
 801cb9e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801cba2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801cba6:	d1bf      	bne.n	801cb28 <_scanf_i+0xb8>
 801cba8:	2310      	movs	r3, #16
 801cbaa:	6063      	str	r3, [r4, #4]
 801cbac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801cbb0:	e7a2      	b.n	801caf8 <_scanf_i+0x88>
 801cbb2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801cbb6:	6022      	str	r2, [r4, #0]
 801cbb8:	780b      	ldrb	r3, [r1, #0]
 801cbba:	f805 3b01 	strb.w	r3, [r5], #1
 801cbbe:	e7de      	b.n	801cb7e <_scanf_i+0x10e>
 801cbc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801cbc4:	4631      	mov	r1, r6
 801cbc6:	4650      	mov	r0, sl
 801cbc8:	4798      	blx	r3
 801cbca:	2800      	cmp	r0, #0
 801cbcc:	d0df      	beq.n	801cb8e <_scanf_i+0x11e>
 801cbce:	6823      	ldr	r3, [r4, #0]
 801cbd0:	05d9      	lsls	r1, r3, #23
 801cbd2:	d50d      	bpl.n	801cbf0 <_scanf_i+0x180>
 801cbd4:	42bd      	cmp	r5, r7
 801cbd6:	d909      	bls.n	801cbec <_scanf_i+0x17c>
 801cbd8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801cbdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801cbe0:	4632      	mov	r2, r6
 801cbe2:	4650      	mov	r0, sl
 801cbe4:	4798      	blx	r3
 801cbe6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 801cbea:	464d      	mov	r5, r9
 801cbec:	42bd      	cmp	r5, r7
 801cbee:	d028      	beq.n	801cc42 <_scanf_i+0x1d2>
 801cbf0:	6822      	ldr	r2, [r4, #0]
 801cbf2:	f012 0210 	ands.w	r2, r2, #16
 801cbf6:	d113      	bne.n	801cc20 <_scanf_i+0x1b0>
 801cbf8:	702a      	strb	r2, [r5, #0]
 801cbfa:	6863      	ldr	r3, [r4, #4]
 801cbfc:	9e01      	ldr	r6, [sp, #4]
 801cbfe:	4639      	mov	r1, r7
 801cc00:	4650      	mov	r0, sl
 801cc02:	47b0      	blx	r6
 801cc04:	f8d8 3000 	ldr.w	r3, [r8]
 801cc08:	6821      	ldr	r1, [r4, #0]
 801cc0a:	1d1a      	adds	r2, r3, #4
 801cc0c:	f8c8 2000 	str.w	r2, [r8]
 801cc10:	f011 0f20 	tst.w	r1, #32
 801cc14:	681b      	ldr	r3, [r3, #0]
 801cc16:	d00f      	beq.n	801cc38 <_scanf_i+0x1c8>
 801cc18:	6018      	str	r0, [r3, #0]
 801cc1a:	68e3      	ldr	r3, [r4, #12]
 801cc1c:	3301      	adds	r3, #1
 801cc1e:	60e3      	str	r3, [r4, #12]
 801cc20:	1bed      	subs	r5, r5, r7
 801cc22:	44ab      	add	fp, r5
 801cc24:	6925      	ldr	r5, [r4, #16]
 801cc26:	445d      	add	r5, fp
 801cc28:	6125      	str	r5, [r4, #16]
 801cc2a:	2000      	movs	r0, #0
 801cc2c:	b007      	add	sp, #28
 801cc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc32:	f04f 0b00 	mov.w	fp, #0
 801cc36:	e7ca      	b.n	801cbce <_scanf_i+0x15e>
 801cc38:	07ca      	lsls	r2, r1, #31
 801cc3a:	bf4c      	ite	mi
 801cc3c:	8018      	strhmi	r0, [r3, #0]
 801cc3e:	6018      	strpl	r0, [r3, #0]
 801cc40:	e7eb      	b.n	801cc1a <_scanf_i+0x1aa>
 801cc42:	2001      	movs	r0, #1
 801cc44:	e7f2      	b.n	801cc2c <_scanf_i+0x1bc>
 801cc46:	bf00      	nop
 801cc48:	0801df14 	.word	0x0801df14
 801cc4c:	0801a58d 	.word	0x0801a58d
 801cc50:	0801a491 	.word	0x0801a491
 801cc54:	0801ef40 	.word	0x0801ef40

0801cc58 <_read_r>:
 801cc58:	b538      	push	{r3, r4, r5, lr}
 801cc5a:	4d07      	ldr	r5, [pc, #28]	; (801cc78 <_read_r+0x20>)
 801cc5c:	4604      	mov	r4, r0
 801cc5e:	4608      	mov	r0, r1
 801cc60:	4611      	mov	r1, r2
 801cc62:	2200      	movs	r2, #0
 801cc64:	602a      	str	r2, [r5, #0]
 801cc66:	461a      	mov	r2, r3
 801cc68:	f7e6 fb26 	bl	80032b8 <_read>
 801cc6c:	1c43      	adds	r3, r0, #1
 801cc6e:	d102      	bne.n	801cc76 <_read_r+0x1e>
 801cc70:	682b      	ldr	r3, [r5, #0]
 801cc72:	b103      	cbz	r3, 801cc76 <_read_r+0x1e>
 801cc74:	6023      	str	r3, [r4, #0]
 801cc76:	bd38      	pop	{r3, r4, r5, pc}
 801cc78:	2001600c 	.word	0x2001600c
 801cc7c:	00000000 	.word	0x00000000

0801cc80 <nan>:
 801cc80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801cc88 <nan+0x8>
 801cc84:	4770      	bx	lr
 801cc86:	bf00      	nop
 801cc88:	00000000 	.word	0x00000000
 801cc8c:	7ff80000 	.word	0x7ff80000

0801cc90 <__sccl>:
 801cc90:	b570      	push	{r4, r5, r6, lr}
 801cc92:	780b      	ldrb	r3, [r1, #0]
 801cc94:	4604      	mov	r4, r0
 801cc96:	2b5e      	cmp	r3, #94	; 0x5e
 801cc98:	bf0b      	itete	eq
 801cc9a:	784b      	ldrbeq	r3, [r1, #1]
 801cc9c:	1c48      	addne	r0, r1, #1
 801cc9e:	1c88      	addeq	r0, r1, #2
 801cca0:	2200      	movne	r2, #0
 801cca2:	bf08      	it	eq
 801cca4:	2201      	moveq	r2, #1
 801cca6:	1e61      	subs	r1, r4, #1
 801cca8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801ccac:	f801 2f01 	strb.w	r2, [r1, #1]!
 801ccb0:	42a9      	cmp	r1, r5
 801ccb2:	d1fb      	bne.n	801ccac <__sccl+0x1c>
 801ccb4:	b90b      	cbnz	r3, 801ccba <__sccl+0x2a>
 801ccb6:	3801      	subs	r0, #1
 801ccb8:	bd70      	pop	{r4, r5, r6, pc}
 801ccba:	f082 0101 	eor.w	r1, r2, #1
 801ccbe:	54e1      	strb	r1, [r4, r3]
 801ccc0:	1c42      	adds	r2, r0, #1
 801ccc2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801ccc6:	2d2d      	cmp	r5, #45	; 0x2d
 801ccc8:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 801cccc:	4610      	mov	r0, r2
 801ccce:	d006      	beq.n	801ccde <__sccl+0x4e>
 801ccd0:	2d5d      	cmp	r5, #93	; 0x5d
 801ccd2:	d0f1      	beq.n	801ccb8 <__sccl+0x28>
 801ccd4:	b90d      	cbnz	r5, 801ccda <__sccl+0x4a>
 801ccd6:	4630      	mov	r0, r6
 801ccd8:	e7ee      	b.n	801ccb8 <__sccl+0x28>
 801ccda:	462b      	mov	r3, r5
 801ccdc:	e7ef      	b.n	801ccbe <__sccl+0x2e>
 801ccde:	7816      	ldrb	r6, [r2, #0]
 801cce0:	2e5d      	cmp	r6, #93	; 0x5d
 801cce2:	d0fa      	beq.n	801ccda <__sccl+0x4a>
 801cce4:	42b3      	cmp	r3, r6
 801cce6:	dcf8      	bgt.n	801ccda <__sccl+0x4a>
 801cce8:	4618      	mov	r0, r3
 801ccea:	3001      	adds	r0, #1
 801ccec:	4286      	cmp	r6, r0
 801ccee:	5421      	strb	r1, [r4, r0]
 801ccf0:	dcfb      	bgt.n	801ccea <__sccl+0x5a>
 801ccf2:	43d8      	mvns	r0, r3
 801ccf4:	4430      	add	r0, r6
 801ccf6:	1c5d      	adds	r5, r3, #1
 801ccf8:	42b3      	cmp	r3, r6
 801ccfa:	bfa8      	it	ge
 801ccfc:	2000      	movge	r0, #0
 801ccfe:	182b      	adds	r3, r5, r0
 801cd00:	3202      	adds	r2, #2
 801cd02:	e7de      	b.n	801ccc2 <__sccl+0x32>

0801cd04 <__submore>:
 801cd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd08:	460c      	mov	r4, r1
 801cd0a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801cd0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cd10:	4299      	cmp	r1, r3
 801cd12:	d11d      	bne.n	801cd50 <__submore+0x4c>
 801cd14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801cd18:	f7fc f8ec 	bl	8018ef4 <_malloc_r>
 801cd1c:	b918      	cbnz	r0, 801cd26 <__submore+0x22>
 801cd1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cd22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cd2a:	63a3      	str	r3, [r4, #56]	; 0x38
 801cd2c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801cd30:	6360      	str	r0, [r4, #52]	; 0x34
 801cd32:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801cd36:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801cd3a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801cd3e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801cd42:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801cd46:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801cd4a:	6020      	str	r0, [r4, #0]
 801cd4c:	2000      	movs	r0, #0
 801cd4e:	e7e8      	b.n	801cd22 <__submore+0x1e>
 801cd50:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801cd52:	0077      	lsls	r7, r6, #1
 801cd54:	463a      	mov	r2, r7
 801cd56:	f7fe fff2 	bl	801bd3e <_realloc_r>
 801cd5a:	4605      	mov	r5, r0
 801cd5c:	2800      	cmp	r0, #0
 801cd5e:	d0de      	beq.n	801cd1e <__submore+0x1a>
 801cd60:	eb00 0806 	add.w	r8, r0, r6
 801cd64:	4601      	mov	r1, r0
 801cd66:	4632      	mov	r2, r6
 801cd68:	4640      	mov	r0, r8
 801cd6a:	f7fc f833 	bl	8018dd4 <memcpy>
 801cd6e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801cd72:	f8c4 8000 	str.w	r8, [r4]
 801cd76:	e7e9      	b.n	801cd4c <__submore+0x48>

0801cd78 <__ascii_wctomb>:
 801cd78:	b149      	cbz	r1, 801cd8e <__ascii_wctomb+0x16>
 801cd7a:	2aff      	cmp	r2, #255	; 0xff
 801cd7c:	bf85      	ittet	hi
 801cd7e:	238a      	movhi	r3, #138	; 0x8a
 801cd80:	6003      	strhi	r3, [r0, #0]
 801cd82:	700a      	strbls	r2, [r1, #0]
 801cd84:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801cd88:	bf98      	it	ls
 801cd8a:	2001      	movls	r0, #1
 801cd8c:	4770      	bx	lr
 801cd8e:	4608      	mov	r0, r1
 801cd90:	4770      	bx	lr

0801cd92 <abort>:
 801cd92:	b508      	push	{r3, lr}
 801cd94:	2006      	movs	r0, #6
 801cd96:	f000 f855 	bl	801ce44 <raise>
 801cd9a:	2001      	movs	r0, #1
 801cd9c:	f7e6 fa82 	bl	80032a4 <_exit>

0801cda0 <_fstat_r>:
 801cda0:	b538      	push	{r3, r4, r5, lr}
 801cda2:	4d07      	ldr	r5, [pc, #28]	; (801cdc0 <_fstat_r+0x20>)
 801cda4:	2300      	movs	r3, #0
 801cda6:	4604      	mov	r4, r0
 801cda8:	4608      	mov	r0, r1
 801cdaa:	4611      	mov	r1, r2
 801cdac:	602b      	str	r3, [r5, #0]
 801cdae:	f7e6 fac8 	bl	8003342 <_fstat>
 801cdb2:	1c43      	adds	r3, r0, #1
 801cdb4:	d102      	bne.n	801cdbc <_fstat_r+0x1c>
 801cdb6:	682b      	ldr	r3, [r5, #0]
 801cdb8:	b103      	cbz	r3, 801cdbc <_fstat_r+0x1c>
 801cdba:	6023      	str	r3, [r4, #0]
 801cdbc:	bd38      	pop	{r3, r4, r5, pc}
 801cdbe:	bf00      	nop
 801cdc0:	2001600c 	.word	0x2001600c

0801cdc4 <_isatty_r>:
 801cdc4:	b538      	push	{r3, r4, r5, lr}
 801cdc6:	4d06      	ldr	r5, [pc, #24]	; (801cde0 <_isatty_r+0x1c>)
 801cdc8:	2300      	movs	r3, #0
 801cdca:	4604      	mov	r4, r0
 801cdcc:	4608      	mov	r0, r1
 801cdce:	602b      	str	r3, [r5, #0]
 801cdd0:	f7e6 fac7 	bl	8003362 <_isatty>
 801cdd4:	1c43      	adds	r3, r0, #1
 801cdd6:	d102      	bne.n	801cdde <_isatty_r+0x1a>
 801cdd8:	682b      	ldr	r3, [r5, #0]
 801cdda:	b103      	cbz	r3, 801cdde <_isatty_r+0x1a>
 801cddc:	6023      	str	r3, [r4, #0]
 801cdde:	bd38      	pop	{r3, r4, r5, pc}
 801cde0:	2001600c 	.word	0x2001600c

0801cde4 <_malloc_usable_size_r>:
 801cde4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cde8:	1f18      	subs	r0, r3, #4
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	bfbc      	itt	lt
 801cdee:	580b      	ldrlt	r3, [r1, r0]
 801cdf0:	18c0      	addlt	r0, r0, r3
 801cdf2:	4770      	bx	lr

0801cdf4 <_raise_r>:
 801cdf4:	291f      	cmp	r1, #31
 801cdf6:	b538      	push	{r3, r4, r5, lr}
 801cdf8:	4604      	mov	r4, r0
 801cdfa:	460d      	mov	r5, r1
 801cdfc:	d904      	bls.n	801ce08 <_raise_r+0x14>
 801cdfe:	2316      	movs	r3, #22
 801ce00:	6003      	str	r3, [r0, #0]
 801ce02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ce06:	bd38      	pop	{r3, r4, r5, pc}
 801ce08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ce0a:	b112      	cbz	r2, 801ce12 <_raise_r+0x1e>
 801ce0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ce10:	b94b      	cbnz	r3, 801ce26 <_raise_r+0x32>
 801ce12:	4620      	mov	r0, r4
 801ce14:	f000 f830 	bl	801ce78 <_getpid_r>
 801ce18:	462a      	mov	r2, r5
 801ce1a:	4601      	mov	r1, r0
 801ce1c:	4620      	mov	r0, r4
 801ce1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ce22:	f000 b817 	b.w	801ce54 <_kill_r>
 801ce26:	2b01      	cmp	r3, #1
 801ce28:	d00a      	beq.n	801ce40 <_raise_r+0x4c>
 801ce2a:	1c59      	adds	r1, r3, #1
 801ce2c:	d103      	bne.n	801ce36 <_raise_r+0x42>
 801ce2e:	2316      	movs	r3, #22
 801ce30:	6003      	str	r3, [r0, #0]
 801ce32:	2001      	movs	r0, #1
 801ce34:	e7e7      	b.n	801ce06 <_raise_r+0x12>
 801ce36:	2400      	movs	r4, #0
 801ce38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ce3c:	4628      	mov	r0, r5
 801ce3e:	4798      	blx	r3
 801ce40:	2000      	movs	r0, #0
 801ce42:	e7e0      	b.n	801ce06 <_raise_r+0x12>

0801ce44 <raise>:
 801ce44:	4b02      	ldr	r3, [pc, #8]	; (801ce50 <raise+0xc>)
 801ce46:	4601      	mov	r1, r0
 801ce48:	6818      	ldr	r0, [r3, #0]
 801ce4a:	f7ff bfd3 	b.w	801cdf4 <_raise_r>
 801ce4e:	bf00      	nop
 801ce50:	20000190 	.word	0x20000190

0801ce54 <_kill_r>:
 801ce54:	b538      	push	{r3, r4, r5, lr}
 801ce56:	4d07      	ldr	r5, [pc, #28]	; (801ce74 <_kill_r+0x20>)
 801ce58:	2300      	movs	r3, #0
 801ce5a:	4604      	mov	r4, r0
 801ce5c:	4608      	mov	r0, r1
 801ce5e:	4611      	mov	r1, r2
 801ce60:	602b      	str	r3, [r5, #0]
 801ce62:	f7e6 fa0f 	bl	8003284 <_kill>
 801ce66:	1c43      	adds	r3, r0, #1
 801ce68:	d102      	bne.n	801ce70 <_kill_r+0x1c>
 801ce6a:	682b      	ldr	r3, [r5, #0]
 801ce6c:	b103      	cbz	r3, 801ce70 <_kill_r+0x1c>
 801ce6e:	6023      	str	r3, [r4, #0]
 801ce70:	bd38      	pop	{r3, r4, r5, pc}
 801ce72:	bf00      	nop
 801ce74:	2001600c 	.word	0x2001600c

0801ce78 <_getpid_r>:
 801ce78:	f7e6 b9fc 	b.w	8003274 <_getpid>

0801ce7c <fmod>:
 801ce7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce7e:	ed2d 8b02 	vpush	{d8}
 801ce82:	ec57 6b10 	vmov	r6, r7, d0
 801ce86:	ec55 4b11 	vmov	r4, r5, d1
 801ce8a:	f000 f833 	bl	801cef4 <__ieee754_fmod>
 801ce8e:	4b18      	ldr	r3, [pc, #96]	; (801cef0 <fmod+0x74>)
 801ce90:	eeb0 8a40 	vmov.f32	s16, s0
 801ce94:	eef0 8a60 	vmov.f32	s17, s1
 801ce98:	f993 3000 	ldrsb.w	r3, [r3]
 801ce9c:	3301      	adds	r3, #1
 801ce9e:	d020      	beq.n	801cee2 <fmod+0x66>
 801cea0:	4622      	mov	r2, r4
 801cea2:	462b      	mov	r3, r5
 801cea4:	4620      	mov	r0, r4
 801cea6:	4629      	mov	r1, r5
 801cea8:	f7e3 fe50 	bl	8000b4c <__aeabi_dcmpun>
 801ceac:	b9c8      	cbnz	r0, 801cee2 <fmod+0x66>
 801ceae:	4632      	mov	r2, r6
 801ceb0:	463b      	mov	r3, r7
 801ceb2:	4630      	mov	r0, r6
 801ceb4:	4639      	mov	r1, r7
 801ceb6:	f7e3 fe49 	bl	8000b4c <__aeabi_dcmpun>
 801ceba:	b990      	cbnz	r0, 801cee2 <fmod+0x66>
 801cebc:	2200      	movs	r2, #0
 801cebe:	2300      	movs	r3, #0
 801cec0:	4620      	mov	r0, r4
 801cec2:	4629      	mov	r1, r5
 801cec4:	f7e3 fe10 	bl	8000ae8 <__aeabi_dcmpeq>
 801cec8:	b158      	cbz	r0, 801cee2 <fmod+0x66>
 801ceca:	f7fb fe91 	bl	8018bf0 <__errno>
 801cece:	2321      	movs	r3, #33	; 0x21
 801ced0:	6003      	str	r3, [r0, #0]
 801ced2:	2200      	movs	r2, #0
 801ced4:	2300      	movs	r3, #0
 801ced6:	4610      	mov	r0, r2
 801ced8:	4619      	mov	r1, r3
 801ceda:	f7e3 fcc7 	bl	800086c <__aeabi_ddiv>
 801cede:	ec41 0b18 	vmov	d8, r0, r1
 801cee2:	eeb0 0a48 	vmov.f32	s0, s16
 801cee6:	eef0 0a68 	vmov.f32	s1, s17
 801ceea:	ecbd 8b02 	vpop	{d8}
 801ceee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cef0:	20000364 	.word	0x20000364

0801cef4 <__ieee754_fmod>:
 801cef4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cef8:	ec53 2b11 	vmov	r2, r3, d1
 801cefc:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 801cf00:	ea5e 0402 	orrs.w	r4, lr, r2
 801cf04:	ec51 0b10 	vmov	r0, r1, d0
 801cf08:	ee11 7a10 	vmov	r7, s2
 801cf0c:	ee11 ca10 	vmov	ip, s2
 801cf10:	461e      	mov	r6, r3
 801cf12:	d00d      	beq.n	801cf30 <__ieee754_fmod+0x3c>
 801cf14:	4c7a      	ldr	r4, [pc, #488]	; (801d100 <__ieee754_fmod+0x20c>)
 801cf16:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801cf1a:	45a0      	cmp	r8, r4
 801cf1c:	4689      	mov	r9, r1
 801cf1e:	dc07      	bgt.n	801cf30 <__ieee754_fmod+0x3c>
 801cf20:	4254      	negs	r4, r2
 801cf22:	4d78      	ldr	r5, [pc, #480]	; (801d104 <__ieee754_fmod+0x210>)
 801cf24:	4314      	orrs	r4, r2
 801cf26:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 801cf2a:	42ac      	cmp	r4, r5
 801cf2c:	46ab      	mov	fp, r5
 801cf2e:	d909      	bls.n	801cf44 <__ieee754_fmod+0x50>
 801cf30:	f7e3 fb72 	bl	8000618 <__aeabi_dmul>
 801cf34:	4602      	mov	r2, r0
 801cf36:	460b      	mov	r3, r1
 801cf38:	f7e3 fc98 	bl	800086c <__aeabi_ddiv>
 801cf3c:	ec41 0b10 	vmov	d0, r0, r1
 801cf40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf44:	45f0      	cmp	r8, lr
 801cf46:	ee10 aa10 	vmov	sl, s0
 801cf4a:	ee10 4a10 	vmov	r4, s0
 801cf4e:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801cf52:	dc0a      	bgt.n	801cf6a <__ieee754_fmod+0x76>
 801cf54:	dbf2      	blt.n	801cf3c <__ieee754_fmod+0x48>
 801cf56:	4290      	cmp	r0, r2
 801cf58:	d3f0      	bcc.n	801cf3c <__ieee754_fmod+0x48>
 801cf5a:	d106      	bne.n	801cf6a <__ieee754_fmod+0x76>
 801cf5c:	4a6a      	ldr	r2, [pc, #424]	; (801d108 <__ieee754_fmod+0x214>)
 801cf5e:	0fed      	lsrs	r5, r5, #31
 801cf60:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801cf64:	e9d5 0100 	ldrd	r0, r1, [r5]
 801cf68:	e7e8      	b.n	801cf3c <__ieee754_fmod+0x48>
 801cf6a:	ea19 0f0b 	tst.w	r9, fp
 801cf6e:	d14a      	bne.n	801d006 <__ieee754_fmod+0x112>
 801cf70:	f1b8 0f00 	cmp.w	r8, #0
 801cf74:	d13f      	bne.n	801cff6 <__ieee754_fmod+0x102>
 801cf76:	4965      	ldr	r1, [pc, #404]	; (801d10c <__ieee754_fmod+0x218>)
 801cf78:	4653      	mov	r3, sl
 801cf7a:	2b00      	cmp	r3, #0
 801cf7c:	dc38      	bgt.n	801cff0 <__ieee754_fmod+0xfc>
 801cf7e:	4b61      	ldr	r3, [pc, #388]	; (801d104 <__ieee754_fmod+0x210>)
 801cf80:	4033      	ands	r3, r6
 801cf82:	2b00      	cmp	r3, #0
 801cf84:	d14f      	bne.n	801d026 <__ieee754_fmod+0x132>
 801cf86:	f1be 0f00 	cmp.w	lr, #0
 801cf8a:	d144      	bne.n	801d016 <__ieee754_fmod+0x122>
 801cf8c:	4a5f      	ldr	r2, [pc, #380]	; (801d10c <__ieee754_fmod+0x218>)
 801cf8e:	463b      	mov	r3, r7
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	dc3d      	bgt.n	801d010 <__ieee754_fmod+0x11c>
 801cf94:	4b5e      	ldr	r3, [pc, #376]	; (801d110 <__ieee754_fmod+0x21c>)
 801cf96:	4299      	cmp	r1, r3
 801cf98:	db4a      	blt.n	801d030 <__ieee754_fmod+0x13c>
 801cf9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801cf9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cfa2:	485b      	ldr	r0, [pc, #364]	; (801d110 <__ieee754_fmod+0x21c>)
 801cfa4:	4282      	cmp	r2, r0
 801cfa6:	db57      	blt.n	801d058 <__ieee754_fmod+0x164>
 801cfa8:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801cfac:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801cfb0:	1a89      	subs	r1, r1, r2
 801cfb2:	1b98      	subs	r0, r3, r6
 801cfb4:	eba4 070c 	sub.w	r7, r4, ip
 801cfb8:	2900      	cmp	r1, #0
 801cfba:	d164      	bne.n	801d086 <__ieee754_fmod+0x192>
 801cfbc:	4564      	cmp	r4, ip
 801cfbe:	bf38      	it	cc
 801cfc0:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 801cfc4:	2800      	cmp	r0, #0
 801cfc6:	bfa4      	itt	ge
 801cfc8:	463c      	movge	r4, r7
 801cfca:	4603      	movge	r3, r0
 801cfcc:	ea53 0104 	orrs.w	r1, r3, r4
 801cfd0:	d0c4      	beq.n	801cf5c <__ieee754_fmod+0x68>
 801cfd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801cfd6:	db6b      	blt.n	801d0b0 <__ieee754_fmod+0x1bc>
 801cfd8:	494d      	ldr	r1, [pc, #308]	; (801d110 <__ieee754_fmod+0x21c>)
 801cfda:	428a      	cmp	r2, r1
 801cfdc:	db6e      	blt.n	801d0bc <__ieee754_fmod+0x1c8>
 801cfde:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801cfe2:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801cfe6:	431d      	orrs	r5, r3
 801cfe8:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 801cfec:	4620      	mov	r0, r4
 801cfee:	e7a5      	b.n	801cf3c <__ieee754_fmod+0x48>
 801cff0:	3901      	subs	r1, #1
 801cff2:	005b      	lsls	r3, r3, #1
 801cff4:	e7c1      	b.n	801cf7a <__ieee754_fmod+0x86>
 801cff6:	4946      	ldr	r1, [pc, #280]	; (801d110 <__ieee754_fmod+0x21c>)
 801cff8:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	ddbe      	ble.n	801cf7e <__ieee754_fmod+0x8a>
 801d000:	3901      	subs	r1, #1
 801d002:	005b      	lsls	r3, r3, #1
 801d004:	e7fa      	b.n	801cffc <__ieee754_fmod+0x108>
 801d006:	ea4f 5128 	mov.w	r1, r8, asr #20
 801d00a:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801d00e:	e7b6      	b.n	801cf7e <__ieee754_fmod+0x8a>
 801d010:	3a01      	subs	r2, #1
 801d012:	005b      	lsls	r3, r3, #1
 801d014:	e7bc      	b.n	801cf90 <__ieee754_fmod+0x9c>
 801d016:	4a3e      	ldr	r2, [pc, #248]	; (801d110 <__ieee754_fmod+0x21c>)
 801d018:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	ddb9      	ble.n	801cf94 <__ieee754_fmod+0xa0>
 801d020:	3a01      	subs	r2, #1
 801d022:	005b      	lsls	r3, r3, #1
 801d024:	e7fa      	b.n	801d01c <__ieee754_fmod+0x128>
 801d026:	ea4f 522e 	mov.w	r2, lr, asr #20
 801d02a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801d02e:	e7b1      	b.n	801cf94 <__ieee754_fmod+0xa0>
 801d030:	1a5c      	subs	r4, r3, r1
 801d032:	2c1f      	cmp	r4, #31
 801d034:	dc0a      	bgt.n	801d04c <__ieee754_fmod+0x158>
 801d036:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 801d03a:	fa08 f804 	lsl.w	r8, r8, r4
 801d03e:	fa2a f303 	lsr.w	r3, sl, r3
 801d042:	ea43 0308 	orr.w	r3, r3, r8
 801d046:	fa0a f404 	lsl.w	r4, sl, r4
 801d04a:	e7aa      	b.n	801cfa2 <__ieee754_fmod+0xae>
 801d04c:	4b31      	ldr	r3, [pc, #196]	; (801d114 <__ieee754_fmod+0x220>)
 801d04e:	1a5b      	subs	r3, r3, r1
 801d050:	fa0a f303 	lsl.w	r3, sl, r3
 801d054:	2400      	movs	r4, #0
 801d056:	e7a4      	b.n	801cfa2 <__ieee754_fmod+0xae>
 801d058:	eba0 0c02 	sub.w	ip, r0, r2
 801d05c:	f1bc 0f1f 	cmp.w	ip, #31
 801d060:	dc0a      	bgt.n	801d078 <__ieee754_fmod+0x184>
 801d062:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 801d066:	fa0e fe0c 	lsl.w	lr, lr, ip
 801d06a:	fa27 f606 	lsr.w	r6, r7, r6
 801d06e:	ea46 060e 	orr.w	r6, r6, lr
 801d072:	fa07 fc0c 	lsl.w	ip, r7, ip
 801d076:	e79b      	b.n	801cfb0 <__ieee754_fmod+0xbc>
 801d078:	4e26      	ldr	r6, [pc, #152]	; (801d114 <__ieee754_fmod+0x220>)
 801d07a:	1ab6      	subs	r6, r6, r2
 801d07c:	fa07 f606 	lsl.w	r6, r7, r6
 801d080:	f04f 0c00 	mov.w	ip, #0
 801d084:	e794      	b.n	801cfb0 <__ieee754_fmod+0xbc>
 801d086:	4564      	cmp	r4, ip
 801d088:	bf38      	it	cc
 801d08a:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 801d08e:	2800      	cmp	r0, #0
 801d090:	da05      	bge.n	801d09e <__ieee754_fmod+0x1aa>
 801d092:	0fe0      	lsrs	r0, r4, #31
 801d094:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d098:	0064      	lsls	r4, r4, #1
 801d09a:	3901      	subs	r1, #1
 801d09c:	e789      	b.n	801cfb2 <__ieee754_fmod+0xbe>
 801d09e:	ea50 0307 	orrs.w	r3, r0, r7
 801d0a2:	f43f af5b 	beq.w	801cf5c <__ieee754_fmod+0x68>
 801d0a6:	0ffb      	lsrs	r3, r7, #31
 801d0a8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801d0ac:	007c      	lsls	r4, r7, #1
 801d0ae:	e7f4      	b.n	801d09a <__ieee754_fmod+0x1a6>
 801d0b0:	0fe1      	lsrs	r1, r4, #31
 801d0b2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801d0b6:	0064      	lsls	r4, r4, #1
 801d0b8:	3a01      	subs	r2, #1
 801d0ba:	e78a      	b.n	801cfd2 <__ieee754_fmod+0xde>
 801d0bc:	1a89      	subs	r1, r1, r2
 801d0be:	2914      	cmp	r1, #20
 801d0c0:	dc0a      	bgt.n	801d0d8 <__ieee754_fmod+0x1e4>
 801d0c2:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801d0c6:	fa03 f202 	lsl.w	r2, r3, r2
 801d0ca:	40cc      	lsrs	r4, r1
 801d0cc:	4322      	orrs	r2, r4
 801d0ce:	410b      	asrs	r3, r1
 801d0d0:	ea43 0105 	orr.w	r1, r3, r5
 801d0d4:	4610      	mov	r0, r2
 801d0d6:	e731      	b.n	801cf3c <__ieee754_fmod+0x48>
 801d0d8:	291f      	cmp	r1, #31
 801d0da:	dc07      	bgt.n	801d0ec <__ieee754_fmod+0x1f8>
 801d0dc:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801d0e0:	40cc      	lsrs	r4, r1
 801d0e2:	fa03 f202 	lsl.w	r2, r3, r2
 801d0e6:	4322      	orrs	r2, r4
 801d0e8:	462b      	mov	r3, r5
 801d0ea:	e7f1      	b.n	801d0d0 <__ieee754_fmod+0x1dc>
 801d0ec:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801d0f0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801d0f4:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 801d0f8:	32e2      	adds	r2, #226	; 0xe2
 801d0fa:	fa43 f202 	asr.w	r2, r3, r2
 801d0fe:	e7f3      	b.n	801d0e8 <__ieee754_fmod+0x1f4>
 801d100:	7fefffff 	.word	0x7fefffff
 801d104:	7ff00000 	.word	0x7ff00000
 801d108:	0801ef48 	.word	0x0801ef48
 801d10c:	fffffbed 	.word	0xfffffbed
 801d110:	fffffc02 	.word	0xfffffc02
 801d114:	fffffbe2 	.word	0xfffffbe2

0801d118 <_init>:
 801d118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d11a:	bf00      	nop
 801d11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d11e:	bc08      	pop	{r3}
 801d120:	469e      	mov	lr, r3
 801d122:	4770      	bx	lr

0801d124 <_fini>:
 801d124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d126:	bf00      	nop
 801d128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d12a:	bc08      	pop	{r3}
 801d12c:	469e      	mov	lr, r3
 801d12e:	4770      	bx	lr
