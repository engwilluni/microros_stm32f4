
exemplo_microros_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001db20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ec0  0801dcb0  0801dcb0  0002dcb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fb70  0801fb70  00030368  2**0
                  CONTENTS
  4 .ARM          00000008  0801fb70  0801fb70  0002fb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fb78  0801fb78  00030368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fb78  0801fb78  0002fb78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fb7c  0801fb7c  0002fb7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  0801fb80  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030368  2**0
                  CONTENTS
 10 .bss          00015ce8  20000368  20000368  00030368  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20016050  20016050  00030368  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030368  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e2b5  00000000  00000000  00030398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055a7  00000000  00000000  0005e64d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002190  00000000  00000000  00063bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001fb0  00000000  00000000  00065d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a1d7  00000000  00000000  00067d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029370  00000000  00000000  00091f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5340  00000000  00000000  000bb27f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000ac  00000000  00000000  001b05bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a9f8  00000000  00000000  001b066c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000368 	.word	0x20000368
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801dc98 	.word	0x0801dc98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000036c 	.word	0x2000036c
 80001cc:	0801dc98 	.word	0x0801dc98

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cc6:	f000 b9ef 	b.w	80010a8 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f883 	bl	8000de4 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f876 	bl	8000de4 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f865 	bl	8000de4 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f857 	bl	8000de4 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d5c:	f000 b9a4 	b.w	80010a8 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff febb 	bl	8000afc <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc31 	bl	8000618 <__aeabi_dmul>
 8000db6:	f7ff ff07 	bl	8000bc8 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fbb2 	bl	8000524 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc28 	bl	8000618 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff fa6a 	bl	80002a8 <__aeabi_dsub>
 8000dd4:	f7ff fef8 	bl	8000bc8 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	4604      	mov	r4, r0
 8000dec:	468c      	mov	ip, r1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 8083 	bne.w	8000efa <__udivmoddi4+0x116>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	d947      	bls.n	8000e8a <__udivmoddi4+0xa6>
 8000dfa:	fab2 f282 	clz	r2, r2
 8000dfe:	b142      	cbz	r2, 8000e12 <__udivmoddi4+0x2e>
 8000e00:	f1c2 0020 	rsb	r0, r2, #32
 8000e04:	fa24 f000 	lsr.w	r0, r4, r0
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	4097      	lsls	r7, r2
 8000e0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e10:	4094      	lsls	r4, r2
 8000e12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e16:	0c23      	lsrs	r3, r4, #16
 8000e18:	fbbc f6f8 	udiv	r6, ip, r8
 8000e1c:	fa1f fe87 	uxth.w	lr, r7
 8000e20:	fb08 c116 	mls	r1, r8, r6, ip
 8000e24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e28:	fb06 f10e 	mul.w	r1, r6, lr
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x60>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e36:	f080 8119 	bcs.w	800106c <__udivmoddi4+0x288>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 8116 	bls.w	800106c <__udivmoddi4+0x288>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	45a6      	cmp	lr, r4
 8000e5a:	d909      	bls.n	8000e70 <__udivmoddi4+0x8c>
 8000e5c:	193c      	adds	r4, r7, r4
 8000e5e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e62:	f080 8105 	bcs.w	8001070 <__udivmoddi4+0x28c>
 8000e66:	45a6      	cmp	lr, r4
 8000e68:	f240 8102 	bls.w	8001070 <__udivmoddi4+0x28c>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	443c      	add	r4, r7
 8000e70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e74:	eba4 040e 	sub.w	r4, r4, lr
 8000e78:	2600      	movs	r6, #0
 8000e7a:	b11d      	cbz	r5, 8000e84 <__udivmoddi4+0xa0>
 8000e7c:	40d4      	lsrs	r4, r2
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e9c5 4300 	strd	r4, r3, [r5]
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	b902      	cbnz	r2, 8000e8e <__udivmoddi4+0xaa>
 8000e8c:	deff      	udf	#255	; 0xff
 8000e8e:	fab2 f282 	clz	r2, r2
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	d150      	bne.n	8000f38 <__udivmoddi4+0x154>
 8000e96:	1bcb      	subs	r3, r1, r7
 8000e98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9c:	fa1f f887 	uxth.w	r8, r7
 8000ea0:	2601      	movs	r6, #1
 8000ea2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ea6:	0c21      	lsrs	r1, r4, #16
 8000ea8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0xe4>
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0xe2>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	f200 80e9 	bhi.w	8001098 <__udivmoddi4+0x2b4>
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	1ac9      	subs	r1, r1, r3
 8000eca:	b2a3      	uxth	r3, r4
 8000ecc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed8:	fb08 f800 	mul.w	r8, r8, r0
 8000edc:	45a0      	cmp	r8, r4
 8000ede:	d907      	bls.n	8000ef0 <__udivmoddi4+0x10c>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x10a>
 8000ee8:	45a0      	cmp	r8, r4
 8000eea:	f200 80d9 	bhi.w	80010a0 <__udivmoddi4+0x2bc>
 8000eee:	4618      	mov	r0, r3
 8000ef0:	eba4 0408 	sub.w	r4, r4, r8
 8000ef4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef8:	e7bf      	b.n	8000e7a <__udivmoddi4+0x96>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d909      	bls.n	8000f12 <__udivmoddi4+0x12e>
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	f000 80b1 	beq.w	8001066 <__udivmoddi4+0x282>
 8000f04:	2600      	movs	r6, #0
 8000f06:	e9c5 0100 	strd	r0, r1, [r5]
 8000f0a:	4630      	mov	r0, r6
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	fab3 f683 	clz	r6, r3
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d14a      	bne.n	8000fb0 <__udivmoddi4+0x1cc>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d302      	bcc.n	8000f24 <__udivmoddi4+0x140>
 8000f1e:	4282      	cmp	r2, r0
 8000f20:	f200 80b8 	bhi.w	8001094 <__udivmoddi4+0x2b0>
 8000f24:	1a84      	subs	r4, r0, r2
 8000f26:	eb61 0103 	sbc.w	r1, r1, r3
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	468c      	mov	ip, r1
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d0a8      	beq.n	8000e84 <__udivmoddi4+0xa0>
 8000f32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f36:	e7a5      	b.n	8000e84 <__udivmoddi4+0xa0>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f40:	4097      	lsls	r7, r2
 8000f42:	fa01 f002 	lsl.w	r0, r1, r2
 8000f46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f4a:	40d9      	lsrs	r1, r3
 8000f4c:	4330      	orrs	r0, r6
 8000f4e:	0c03      	lsrs	r3, r0, #16
 8000f50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f54:	fa1f f887 	uxth.w	r8, r7
 8000f58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f60:	fb06 f108 	mul.w	r1, r6, r8
 8000f64:	4299      	cmp	r1, r3
 8000f66:	fa04 f402 	lsl.w	r4, r4, r2
 8000f6a:	d909      	bls.n	8000f80 <__udivmoddi4+0x19c>
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000f72:	f080 808d 	bcs.w	8001090 <__udivmoddi4+0x2ac>
 8000f76:	4299      	cmp	r1, r3
 8000f78:	f240 808a 	bls.w	8001090 <__udivmoddi4+0x2ac>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	443b      	add	r3, r7
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b281      	uxth	r1, r0
 8000f84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f90:	fb00 f308 	mul.w	r3, r0, r8
 8000f94:	428b      	cmp	r3, r1
 8000f96:	d907      	bls.n	8000fa8 <__udivmoddi4+0x1c4>
 8000f98:	1879      	adds	r1, r7, r1
 8000f9a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f9e:	d273      	bcs.n	8001088 <__udivmoddi4+0x2a4>
 8000fa0:	428b      	cmp	r3, r1
 8000fa2:	d971      	bls.n	8001088 <__udivmoddi4+0x2a4>
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	4439      	add	r1, r7
 8000fa8:	1acb      	subs	r3, r1, r3
 8000faa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fae:	e778      	b.n	8000ea2 <__udivmoddi4+0xbe>
 8000fb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fbc:	431c      	orrs	r4, r3
 8000fbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fce:	431f      	orrs	r7, r3
 8000fd0:	0c3b      	lsrs	r3, r7, #16
 8000fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd6:	fa1f f884 	uxth.w	r8, r4
 8000fda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fe2:	fb09 fa08 	mul.w	sl, r9, r8
 8000fe6:	458a      	cmp	sl, r1
 8000fe8:	fa02 f206 	lsl.w	r2, r2, r6
 8000fec:	fa00 f306 	lsl.w	r3, r0, r6
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x220>
 8000ff2:	1861      	adds	r1, r4, r1
 8000ff4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ff8:	d248      	bcs.n	800108c <__udivmoddi4+0x2a8>
 8000ffa:	458a      	cmp	sl, r1
 8000ffc:	d946      	bls.n	800108c <__udivmoddi4+0x2a8>
 8000ffe:	f1a9 0902 	sub.w	r9, r9, #2
 8001002:	4421      	add	r1, r4
 8001004:	eba1 010a 	sub.w	r1, r1, sl
 8001008:	b2bf      	uxth	r7, r7
 800100a:	fbb1 f0fe 	udiv	r0, r1, lr
 800100e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001012:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001016:	fb00 f808 	mul.w	r8, r0, r8
 800101a:	45b8      	cmp	r8, r7
 800101c:	d907      	bls.n	800102e <__udivmoddi4+0x24a>
 800101e:	19e7      	adds	r7, r4, r7
 8001020:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8001024:	d22e      	bcs.n	8001084 <__udivmoddi4+0x2a0>
 8001026:	45b8      	cmp	r8, r7
 8001028:	d92c      	bls.n	8001084 <__udivmoddi4+0x2a0>
 800102a:	3802      	subs	r0, #2
 800102c:	4427      	add	r7, r4
 800102e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001032:	eba7 0708 	sub.w	r7, r7, r8
 8001036:	fba0 8902 	umull	r8, r9, r0, r2
 800103a:	454f      	cmp	r7, r9
 800103c:	46c6      	mov	lr, r8
 800103e:	4649      	mov	r1, r9
 8001040:	d31a      	bcc.n	8001078 <__udivmoddi4+0x294>
 8001042:	d017      	beq.n	8001074 <__udivmoddi4+0x290>
 8001044:	b15d      	cbz	r5, 800105e <__udivmoddi4+0x27a>
 8001046:	ebb3 020e 	subs.w	r2, r3, lr
 800104a:	eb67 0701 	sbc.w	r7, r7, r1
 800104e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001052:	40f2      	lsrs	r2, r6
 8001054:	ea4c 0202 	orr.w	r2, ip, r2
 8001058:	40f7      	lsrs	r7, r6
 800105a:	e9c5 2700 	strd	r2, r7, [r5]
 800105e:	2600      	movs	r6, #0
 8001060:	4631      	mov	r1, r6
 8001062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e70b      	b.n	8000e84 <__udivmoddi4+0xa0>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e9      	b.n	8000e44 <__udivmoddi4+0x60>
 8001070:	4618      	mov	r0, r3
 8001072:	e6fd      	b.n	8000e70 <__udivmoddi4+0x8c>
 8001074:	4543      	cmp	r3, r8
 8001076:	d2e5      	bcs.n	8001044 <__udivmoddi4+0x260>
 8001078:	ebb8 0e02 	subs.w	lr, r8, r2
 800107c:	eb69 0104 	sbc.w	r1, r9, r4
 8001080:	3801      	subs	r0, #1
 8001082:	e7df      	b.n	8001044 <__udivmoddi4+0x260>
 8001084:	4608      	mov	r0, r1
 8001086:	e7d2      	b.n	800102e <__udivmoddi4+0x24a>
 8001088:	4660      	mov	r0, ip
 800108a:	e78d      	b.n	8000fa8 <__udivmoddi4+0x1c4>
 800108c:	4681      	mov	r9, r0
 800108e:	e7b9      	b.n	8001004 <__udivmoddi4+0x220>
 8001090:	4666      	mov	r6, ip
 8001092:	e775      	b.n	8000f80 <__udivmoddi4+0x19c>
 8001094:	4630      	mov	r0, r6
 8001096:	e74a      	b.n	8000f2e <__udivmoddi4+0x14a>
 8001098:	f1ac 0c02 	sub.w	ip, ip, #2
 800109c:	4439      	add	r1, r7
 800109e:	e713      	b.n	8000ec8 <__udivmoddi4+0xe4>
 80010a0:	3802      	subs	r0, #2
 80010a2:	443c      	add	r4, r7
 80010a4:	e724      	b.n	8000ef0 <__udivmoddi4+0x10c>
 80010a6:	bf00      	nop

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80010b8:	f00b f908 	bl	800c2cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80010bc:	4b58      	ldr	r3, [pc, #352]	; (8001220 <pvPortMallocMicroROS+0x174>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80010c4:	f000 f98c 	bl	80013e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80010c8:	4b56      	ldr	r3, [pc, #344]	; (8001224 <pvPortMallocMicroROS+0x178>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f040 808e 	bne.w	80011f2 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d01d      	beq.n	8001118 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80010dc:	2208      	movs	r2, #8
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d014      	beq.n	8001118 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f023 0307 	bic.w	r3, r3, #7
 80010f4:	3308      	adds	r3, #8
 80010f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00a      	beq.n	8001118 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001106:	f383 8811 	msr	BASEPRI, r3
 800110a:	f3bf 8f6f 	isb	sy
 800110e:	f3bf 8f4f 	dsb	sy
 8001112:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001114:	bf00      	nop
 8001116:	e7fe      	b.n	8001116 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d069      	beq.n	80011f2 <pvPortMallocMicroROS+0x146>
 800111e:	4b42      	ldr	r3, [pc, #264]	; (8001228 <pvPortMallocMicroROS+0x17c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	429a      	cmp	r2, r3
 8001126:	d864      	bhi.n	80011f2 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001128:	4b40      	ldr	r3, [pc, #256]	; (800122c <pvPortMallocMicroROS+0x180>)
 800112a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800112c:	4b3f      	ldr	r3, [pc, #252]	; (800122c <pvPortMallocMicroROS+0x180>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001132:	e004      	b.n	800113e <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	429a      	cmp	r2, r3
 8001146:	d903      	bls.n	8001150 <pvPortMallocMicroROS+0xa4>
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f1      	bne.n	8001134 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001150:	4b33      	ldr	r3, [pc, #204]	; (8001220 <pvPortMallocMicroROS+0x174>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001156:	429a      	cmp	r2, r3
 8001158:	d04b      	beq.n	80011f2 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800115a:	6a3b      	ldr	r3, [r7, #32]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2208      	movs	r2, #8
 8001160:	4413      	add	r3, r2
 8001162:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	6a3b      	ldr	r3, [r7, #32]
 800116a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	1ad2      	subs	r2, r2, r3
 8001174:	2308      	movs	r3, #8
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	429a      	cmp	r2, r3
 800117a:	d91f      	bls.n	80011bc <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800117c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00a      	beq.n	80011a4 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800118e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001192:	f383 8811 	msr	BASEPRI, r3
 8001196:	f3bf 8f6f 	isb	sy
 800119a:	f3bf 8f4f 	dsb	sy
 800119e:	613b      	str	r3, [r7, #16]
}
 80011a0:	bf00      	nop
 80011a2:	e7fe      	b.n	80011a2 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	1ad2      	subs	r2, r2, r3
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80011b6:	69b8      	ldr	r0, [r7, #24]
 80011b8:	f000 f974 	bl	80014a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <pvPortMallocMicroROS+0x17c>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	4a18      	ldr	r2, [pc, #96]	; (8001228 <pvPortMallocMicroROS+0x17c>)
 80011c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <pvPortMallocMicroROS+0x17c>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <pvPortMallocMicroROS+0x184>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d203      	bcs.n	80011de <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <pvPortMallocMicroROS+0x17c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a15      	ldr	r2, [pc, #84]	; (8001230 <pvPortMallocMicroROS+0x184>)
 80011dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <pvPortMallocMicroROS+0x178>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	431a      	orrs	r2, r3
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80011f2:	f00b f879 	bl	800c2e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00a      	beq.n	8001216 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8001200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001204:	f383 8811 	msr	BASEPRI, r3
 8001208:	f3bf 8f6f 	isb	sy
 800120c:	f3bf 8f4f 	dsb	sy
 8001210:	60fb      	str	r3, [r7, #12]
}
 8001212:	bf00      	nop
 8001214:	e7fe      	b.n	8001214 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 8001216:	69fb      	ldr	r3, [r7, #28]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3728      	adds	r7, #40	; 0x28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200078bc 	.word	0x200078bc
 8001224:	200078c8 	.word	0x200078c8
 8001228:	200078c0 	.word	0x200078c0
 800122c:	200078b4 	.word	0x200078b4
 8001230:	200078c4 	.word	0x200078c4

08001234 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d048      	beq.n	80012d8 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001246:	2308      	movs	r3, #8
 8001248:	425b      	negs	r3, r3
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	4413      	add	r3, r2
 800124e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <vPortFreeMicroROS+0xac>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4013      	ands	r3, r2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10a      	bne.n	8001278 <vPortFreeMicroROS+0x44>
	__asm volatile
 8001262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001266:	f383 8811 	msr	BASEPRI, r3
 800126a:	f3bf 8f6f 	isb	sy
 800126e:	f3bf 8f4f 	dsb	sy
 8001272:	60fb      	str	r3, [r7, #12]
}
 8001274:	bf00      	nop
 8001276:	e7fe      	b.n	8001276 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00a      	beq.n	8001296 <vPortFreeMicroROS+0x62>
	__asm volatile
 8001280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001284:	f383 8811 	msr	BASEPRI, r3
 8001288:	f3bf 8f6f 	isb	sy
 800128c:	f3bf 8f4f 	dsb	sy
 8001290:	60bb      	str	r3, [r7, #8]
}
 8001292:	bf00      	nop
 8001294:	e7fe      	b.n	8001294 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <vPortFreeMicroROS+0xac>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4013      	ands	r3, r2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d019      	beq.n	80012d8 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d115      	bne.n	80012d8 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <vPortFreeMicroROS+0xac>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	401a      	ands	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80012bc:	f00b f806 	bl	800c2cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <vPortFreeMicroROS+0xb0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4413      	add	r3, r2
 80012ca:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <vPortFreeMicroROS+0xb0>)
 80012cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80012ce:	6938      	ldr	r0, [r7, #16]
 80012d0:	f000 f8e8 	bl	80014a4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80012d4:	f00b f808 	bl	800c2e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80012d8:	bf00      	nop
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200078c8 	.word	0x200078c8
 80012e4:	200078c0 	.word	0x200078c0

080012e8 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80012f4:	2308      	movs	r3, #8
 80012f6:	425b      	negs	r3, r3
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	4413      	add	r3, r2
 80012fc:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <getBlockSize+0x38>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	43db      	mvns	r3, r3
 800130c:	4013      	ands	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]

	return count;
 8001310:	68fb      	ldr	r3, [r7, #12]
}
 8001312:	4618      	mov	r0, r3
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	200078c8 	.word	0x200078c8

08001324 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800132e:	f00a ffcd 	bl	800c2cc <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001332:	6838      	ldr	r0, [r7, #0]
 8001334:	f7ff feba 	bl	80010ac <pvPortMallocMicroROS>
 8001338:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800133e:	2308      	movs	r3, #8
 8001340:	425b      	negs	r3, r3
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	4413      	add	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <pvPortReallocMicroROS+0x70>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	43db      	mvns	r3, r3
 800135e:	4013      	ands	r3, r2
 8001360:	617b      	str	r3, [r7, #20]

  	while(count--)
 8001362:	e007      	b.n	8001374 <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	1c53      	adds	r3, r2, #1
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	1c59      	adds	r1, r3, #1
 800136e:	61b9      	str	r1, [r7, #24]
 8001370:	7812      	ldrb	r2, [r2, #0]
 8001372:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	1e5a      	subs	r2, r3, #1
 8001378:	617a      	str	r2, [r7, #20]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f2      	bne.n	8001364 <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ff58 	bl	8001234 <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 8001384:	f00a ffb0 	bl	800c2e8 <xTaskResumeAll>

	return newmem;
 8001388:	693b      	ldr	r3, [r7, #16]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3720      	adds	r7, #32
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200078c8 	.word	0x200078c8

08001398 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80013a2:	f00a ff93 	bl	800c2cc <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	fb02 f303 	mul.w	r3, r2, r3
 80013ae:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80013b0:	6978      	ldr	r0, [r7, #20]
 80013b2:	f7ff fe7b 	bl	80010ac <pvPortMallocMicroROS>
 80013b6:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	613b      	str	r3, [r7, #16]

  	while(count--)
 80013bc:	e004      	b.n	80013c8 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	613a      	str	r2, [r7, #16]
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	1e5a      	subs	r2, r3, #1
 80013cc:	617a      	str	r2, [r7, #20]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f5      	bne.n	80013be <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80013d2:	f00a ff89 	bl	800c2e8 <xTaskResumeAll>
  	return mem;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80013e6:	f247 5330 	movw	r3, #30000	; 0x7530
 80013ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80013ec:	4b27      	ldr	r3, [pc, #156]	; (800148c <prvHeapInit+0xac>)
 80013ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00c      	beq.n	8001414 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	3307      	adds	r3, #7
 80013fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f023 0307 	bic.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	4a1f      	ldr	r2, [pc, #124]	; (800148c <prvHeapInit+0xac>)
 8001410:	4413      	add	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001418:	4a1d      	ldr	r2, [pc, #116]	; (8001490 <prvHeapInit+0xb0>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <prvHeapInit+0xb0>)
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	4413      	add	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800142c:	2208      	movs	r2, #8
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1a9b      	subs	r3, r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f023 0307 	bic.w	r3, r3, #7
 800143a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4a15      	ldr	r2, [pc, #84]	; (8001494 <prvHeapInit+0xb4>)
 8001440:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <prvHeapInit+0xb4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2200      	movs	r2, #0
 8001448:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <prvHeapInit+0xb4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	1ad2      	subs	r2, r2, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <prvHeapInit+0xb4>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <prvHeapInit+0xb8>)
 800146e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4a09      	ldr	r2, [pc, #36]	; (800149c <prvHeapInit+0xbc>)
 8001476:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <prvHeapInit+0xc0>)
 800147a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800147e:	601a      	str	r2, [r3, #0]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	20000384 	.word	0x20000384
 8001490:	200078b4 	.word	0x200078b4
 8001494:	200078bc 	.word	0x200078bc
 8001498:	200078c4 	.word	0x200078c4
 800149c:	200078c0 	.word	0x200078c0
 80014a0:	200078c8 	.word	0x200078c8

080014a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <prvInsertBlockIntoFreeList+0xac>)
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	e002      	b.n	80014b8 <prvInsertBlockIntoFreeList+0x14>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d8f7      	bhi.n	80014b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	4413      	add	r3, r2
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d108      	bne.n	80014e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	441a      	add	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	441a      	add	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d118      	bne.n	800152c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <prvInsertBlockIntoFreeList+0xb0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d00d      	beq.n	8001522 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	441a      	add	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e008      	b.n	8001534 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <prvInsertBlockIntoFreeList+0xb0>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	e003      	b.n	8001534 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	429a      	cmp	r2, r3
 800153a:	d002      	beq.n	8001542 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	200078b4 	.word	0x200078b4
 8001554:	200078bc 	.word	0x200078bc

08001558 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001566:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001568:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800156c:	4904      	ldr	r1, [pc, #16]	; (8001580 <cubemx_transport_open+0x28>)
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f007 ffa4 	bl	80094bc <HAL_UART_Receive_DMA>
    return true;
 8001574:	2301      	movs	r3, #1
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200078cc 	.word	0x200078cc

08001584 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001592:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f007 ffc1 	bl	800951c <HAL_UART_DMAStop>
    return true;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80015b8:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b20      	cmp	r3, #32
 80015c4:	d11c      	bne.n	8001600 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f007 fef6 	bl	80093c0 <HAL_UART_Transmit_DMA>
 80015d4:	4603      	mov	r3, r0
 80015d6:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80015d8:	e002      	b.n	80015e0 <cubemx_transport_write+0x3c>
            osDelay(1);
 80015da:	2001      	movs	r0, #1
 80015dc:	f009 fe4b 	bl	800b276 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80015e0:	7cfb      	ldrb	r3, [r7, #19]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d105      	bne.n	80015f2 <cubemx_transport_write+0x4e>
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b20      	cmp	r3, #32
 80015f0:	d1f3      	bne.n	80015da <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80015f2:	7cfb      	ldrb	r3, [r7, #19]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <cubemx_transport_write+0x58>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	e002      	b.n	8001602 <cubemx_transport_write+0x5e>
 80015fc:	2300      	movs	r3, #0
 80015fe:	e000      	b.n	8001602 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001600:	2300      	movs	r3, #0
    }
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001620:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001626:	b672      	cpsid	i
}
 8001628:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001636:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <cubemx_transport_read+0x9c>)
 8001638:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800163a:	b662      	cpsie	i
}
 800163c:	bf00      	nop
        __enable_irq();
        ms_used++;
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3301      	adds	r3, #1
 8001642:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001644:	2001      	movs	r0, #1
 8001646:	f009 fe16 	bl	800b276 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <cubemx_transport_read+0xa0>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <cubemx_transport_read+0x9c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d103      	bne.n	800165e <cubemx_transport_read+0x52>
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	dbe3      	blt.n	8001626 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001662:	e011      	b.n	8001688 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <cubemx_transport_read+0xa0>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	440b      	add	r3, r1
 800166e:	4910      	ldr	r1, [pc, #64]	; (80016b0 <cubemx_transport_read+0xa4>)
 8001670:	5c8a      	ldrb	r2, [r1, r2]
 8001672:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <cubemx_transport_read+0xa0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	3301      	adds	r3, #1
 800167a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800167e:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <cubemx_transport_read+0xa0>)
 8001680:	6013      	str	r3, [r2, #0]
        wrote++;
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	3301      	adds	r3, #1
 8001686:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <cubemx_transport_read+0xa0>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <cubemx_transport_read+0x9c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d003      	beq.n	800169c <cubemx_transport_read+0x90>
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	d3e3      	bcc.n	8001664 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 800169c:	69bb      	ldr	r3, [r7, #24]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3720      	adds	r7, #32
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200080d0 	.word	0x200080d0
 80016ac:	200080cc 	.word	0x200080cc
 80016b0:	200078cc 	.word	0x200078cc

080016b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b8:	f002 fad0 	bl	8003c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016bc:	f000 f8a2 	bl	8001804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c0:	f000 fb28 	bl	8001d14 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016c4:	f000 f968 	bl	8001998 <MX_I2C1_Init>
  MX_I2S3_Init();
 80016c8:	f000 f994 	bl	80019f4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80016cc:	f000 f9c2 	bl	8001a54 <MX_SPI1_Init>
  MX_DMA_Init();
 80016d0:	f000 fae2 	bl	8001c98 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016d4:	f000 fa6a 	bl	8001bac <MX_USART2_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 80016d8:	f000 fabc 	bl	8001c54 <MX_USB_OTG_FS_HCD_Init>
  MX_USART3_UART_Init();
 80016dc:	f000 fa90 	bl	8001c00 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80016e0:	f000 f8fa 	bl	80018d8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80016e4:	f000 f9ec 	bl	8001ac0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc_values, 2);
 80016e8:	2202      	movs	r2, #2
 80016ea:	4929      	ldr	r1, [pc, #164]	; (8001790 <main+0xdc>)
 80016ec:	4829      	ldr	r0, [pc, #164]	; (8001794 <main+0xe0>)
 80016ee:	f002 fb5f 	bl	8003db0 <HAL_ADC_Start_DMA>
  status = HAL_UART_Receive_IT(&huart3, &uart_gps_rx, 1);
 80016f2:	2201      	movs	r2, #1
 80016f4:	4928      	ldr	r1, [pc, #160]	; (8001798 <main+0xe4>)
 80016f6:	4829      	ldr	r0, [pc, #164]	; (800179c <main+0xe8>)
 80016f8:	f007 fe31 	bl	800935e <HAL_UART_Receive_IT>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <main+0xec>)
 8001702:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001704:	f009 fc0c 	bl	800af20 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_ros2 */
  task_ros2Handle = osThreadNew(task_ros2_function, NULL, &task_ros2_attributes);
 8001708:	4a26      	ldr	r2, [pc, #152]	; (80017a4 <main+0xf0>)
 800170a:	2100      	movs	r1, #0
 800170c:	4826      	ldr	r0, [pc, #152]	; (80017a8 <main+0xf4>)
 800170e:	f009 fc51 	bl	800afb4 <osThreadNew>
 8001712:	4603      	mov	r3, r0
 8001714:	4a25      	ldr	r2, [pc, #148]	; (80017ac <main+0xf8>)
 8001716:	6013      	str	r3, [r2, #0]

  /* creation of task_gps */
  task_gpsHandle = osThreadNew(task_gps_function, NULL, &task_gps_attributes);
 8001718:	4a25      	ldr	r2, [pc, #148]	; (80017b0 <main+0xfc>)
 800171a:	2100      	movs	r1, #0
 800171c:	4825      	ldr	r0, [pc, #148]	; (80017b4 <main+0x100>)
 800171e:	f009 fc49 	bl	800afb4 <osThreadNew>
 8001722:	4603      	mov	r3, r0
 8001724:	4a24      	ldr	r2, [pc, #144]	; (80017b8 <main+0x104>)
 8001726:	6013      	str	r3, [r2, #0]

  /* creation of task_stepper */
  task_stepperHandle = osThreadNew(task_stepper_function, NULL, &task_stepper_attributes);
 8001728:	4a24      	ldr	r2, [pc, #144]	; (80017bc <main+0x108>)
 800172a:	2100      	movs	r1, #0
 800172c:	4824      	ldr	r0, [pc, #144]	; (80017c0 <main+0x10c>)
 800172e:	f009 fc41 	bl	800afb4 <osThreadNew>
 8001732:	4603      	mov	r3, r0
 8001734:	4a23      	ldr	r2, [pc, #140]	; (80017c4 <main+0x110>)
 8001736:	6013      	str	r3, [r2, #0]

  /* creation of task_angle_sens */
  task_angle_sensHandle = osThreadNew(task_angle_sensor_function, NULL, &task_angle_sens_attributes);
 8001738:	4a23      	ldr	r2, [pc, #140]	; (80017c8 <main+0x114>)
 800173a:	2100      	movs	r1, #0
 800173c:	4823      	ldr	r0, [pc, #140]	; (80017cc <main+0x118>)
 800173e:	f009 fc39 	bl	800afb4 <osThreadNew>
 8001742:	4603      	mov	r3, r0
 8001744:	4a22      	ldr	r2, [pc, #136]	; (80017d0 <main+0x11c>)
 8001746:	6013      	str	r3, [r2, #0]

  /* creation of task_analog_inp */
  task_analog_inpHandle = osThreadNew(task_analog_input_function, NULL, &task_analog_inp_attributes);
 8001748:	4a22      	ldr	r2, [pc, #136]	; (80017d4 <main+0x120>)
 800174a:	2100      	movs	r1, #0
 800174c:	4822      	ldr	r0, [pc, #136]	; (80017d8 <main+0x124>)
 800174e:	f009 fc31 	bl	800afb4 <osThreadNew>
 8001752:	4603      	mov	r3, r0
 8001754:	4a21      	ldr	r2, [pc, #132]	; (80017dc <main+0x128>)
 8001756:	6013      	str	r3, [r2, #0]

  /* creation of task_dac */
  task_dacHandle = osThreadNew(task_dac_function, NULL, &task_dac_attributes);
 8001758:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <main+0x12c>)
 800175a:	2100      	movs	r1, #0
 800175c:	4821      	ldr	r0, [pc, #132]	; (80017e4 <main+0x130>)
 800175e:	f009 fc29 	bl	800afb4 <osThreadNew>
 8001762:	4603      	mov	r3, r0
 8001764:	4a20      	ldr	r2, [pc, #128]	; (80017e8 <main+0x134>)
 8001766:	6013      	str	r3, [r2, #0]

  /* creation of task_digital_io */
  task_digital_ioHandle = osThreadNew(task_digital_io_function, NULL, &task_digital_io_attributes);
 8001768:	4a20      	ldr	r2, [pc, #128]	; (80017ec <main+0x138>)
 800176a:	2100      	movs	r1, #0
 800176c:	4820      	ldr	r0, [pc, #128]	; (80017f0 <main+0x13c>)
 800176e:	f009 fc21 	bl	800afb4 <osThreadNew>
 8001772:	4603      	mov	r3, r0
 8001774:	4a1f      	ldr	r2, [pc, #124]	; (80017f4 <main+0x140>)
 8001776:	6013      	str	r3, [r2, #0]

  /* creation of task_main */
  task_mainHandle = osThreadNew(task_main_function, NULL, &task_main_attributes);
 8001778:	4a1f      	ldr	r2, [pc, #124]	; (80017f8 <main+0x144>)
 800177a:	2100      	movs	r1, #0
 800177c:	481f      	ldr	r0, [pc, #124]	; (80017fc <main+0x148>)
 800177e:	f009 fc19 	bl	800afb4 <osThreadNew>
 8001782:	4603      	mov	r3, r0
 8001784:	4a1e      	ldr	r2, [pc, #120]	; (8001800 <main+0x14c>)
 8001786:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001788:	f009 fbee 	bl	800af68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800178c:	e7fe      	b.n	800178c <main+0xd8>
 800178e:	bf00      	nop
 8001790:	20010e04 	.word	0x20010e04
 8001794:	200108b0 	.word	0x200108b0
 8001798:	200080d5 	.word	0x200080d5
 800179c:	200105c4 	.word	0x200105c4
 80017a0:	20010e00 	.word	0x20010e00
 80017a4:	0801eb38 	.word	0x0801eb38
 80017a8:	080022d1 	.word	0x080022d1
 80017ac:	200105bc 	.word	0x200105bc
 80017b0:	0801eb5c 	.word	0x0801eb5c
 80017b4:	080026ed 	.word	0x080026ed
 80017b8:	20010554 	.word	0x20010554
 80017bc:	0801eb80 	.word	0x0801eb80
 80017c0:	080027f1 	.word	0x080027f1
 80017c4:	20010858 	.word	0x20010858
 80017c8:	0801eba4 	.word	0x0801eba4
 80017cc:	080028c5 	.word	0x080028c5
 80017d0:	200109e8 	.word	0x200109e8
 80017d4:	0801ebc8 	.word	0x0801ebc8
 80017d8:	080028d5 	.word	0x080028d5
 80017dc:	20010e08 	.word	0x20010e08
 80017e0:	0801ebec 	.word	0x0801ebec
 80017e4:	080028e5 	.word	0x080028e5
 80017e8:	2001095c 	.word	0x2001095c
 80017ec:	0801ec10 	.word	0x0801ec10
 80017f0:	080028f5 	.word	0x080028f5
 80017f4:	20010960 	.word	0x20010960
 80017f8:	0801ec34 	.word	0x0801ec34
 80017fc:	08002939 	.word	0x08002939
 8001800:	200108f8 	.word	0x200108f8

08001804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b094      	sub	sp, #80	; 0x50
 8001808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180a:	f107 0320 	add.w	r3, r7, #32
 800180e:	2230      	movs	r2, #48	; 0x30
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f017 ffde 	bl	80197d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <SystemClock_Config+0xcc>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	4a27      	ldr	r2, [pc, #156]	; (80018d0 <SystemClock_Config+0xcc>)
 8001832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001836:	6413      	str	r3, [r2, #64]	; 0x40
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <SystemClock_Config+0xcc>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001844:	2300      	movs	r3, #0
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <SystemClock_Config+0xd0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a21      	ldr	r2, [pc, #132]	; (80018d4 <SystemClock_Config+0xd0>)
 800184e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <SystemClock_Config+0xd0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001860:	2301      	movs	r3, #1
 8001862:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800186a:	2302      	movs	r3, #2
 800186c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800186e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001872:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001874:	2308      	movs	r3, #8
 8001876:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001878:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800187c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800187e:	2302      	movs	r3, #2
 8001880:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001882:	2307      	movs	r3, #7
 8001884:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001886:	f107 0320 	add.w	r3, r7, #32
 800188a:	4618      	mov	r0, r3
 800188c:	f005 fe2c 	bl	80074e8 <HAL_RCC_OscConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001896:	f001 f869 	bl	800296c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189a:	230f      	movs	r3, #15
 800189c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800189e:	2302      	movs	r3, #2
 80018a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	2105      	movs	r1, #5
 80018b8:	4618      	mov	r0, r3
 80018ba:	f006 f88d 	bl	80079d8 <HAL_RCC_ClockConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80018c4:	f001 f852 	bl	800296c <Error_Handler>
  }
}
 80018c8:	bf00      	nop
 80018ca:	3750      	adds	r7, #80	; 0x50
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40007000 	.word	0x40007000

080018d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018de:	463b      	mov	r3, r7
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018ea:	4b28      	ldr	r3, [pc, #160]	; (800198c <MX_ADC1_Init+0xb4>)
 80018ec:	4a28      	ldr	r2, [pc, #160]	; (8001990 <MX_ADC1_Init+0xb8>)
 80018ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018f0:	4b26      	ldr	r3, [pc, #152]	; (800198c <MX_ADC1_Init+0xb4>)
 80018f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018f8:	4b24      	ldr	r3, [pc, #144]	; (800198c <MX_ADC1_Init+0xb4>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80018fe:	4b23      	ldr	r3, [pc, #140]	; (800198c <MX_ADC1_Init+0xb4>)
 8001900:	2201      	movs	r2, #1
 8001902:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001904:	4b21      	ldr	r3, [pc, #132]	; (800198c <MX_ADC1_Init+0xb4>)
 8001906:	2201      	movs	r2, #1
 8001908:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800190a:	4b20      	ldr	r3, [pc, #128]	; (800198c <MX_ADC1_Init+0xb4>)
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001912:	4b1e      	ldr	r3, [pc, #120]	; (800198c <MX_ADC1_Init+0xb4>)
 8001914:	2200      	movs	r2, #0
 8001916:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001918:	4b1c      	ldr	r3, [pc, #112]	; (800198c <MX_ADC1_Init+0xb4>)
 800191a:	4a1e      	ldr	r2, [pc, #120]	; (8001994 <MX_ADC1_Init+0xbc>)
 800191c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800191e:	4b1b      	ldr	r3, [pc, #108]	; (800198c <MX_ADC1_Init+0xb4>)
 8001920:	2200      	movs	r2, #0
 8001922:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <MX_ADC1_Init+0xb4>)
 8001926:	2202      	movs	r2, #2
 8001928:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <MX_ADC1_Init+0xb4>)
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <MX_ADC1_Init+0xb4>)
 8001934:	2201      	movs	r2, #1
 8001936:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001938:	4814      	ldr	r0, [pc, #80]	; (800198c <MX_ADC1_Init+0xb4>)
 800193a:	f002 f9f5 	bl	8003d28 <HAL_ADC_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001944:	f001 f812 	bl	800296c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001948:	230e      	movs	r3, #14
 800194a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800194c:	2301      	movs	r3, #1
 800194e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001950:	2302      	movs	r3, #2
 8001952:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001954:	463b      	mov	r3, r7
 8001956:	4619      	mov	r1, r3
 8001958:	480c      	ldr	r0, [pc, #48]	; (800198c <MX_ADC1_Init+0xb4>)
 800195a:	f002 fb57 	bl	800400c <HAL_ADC_ConfigChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001964:	f001 f802 	bl	800296c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001968:	230f      	movs	r3, #15
 800196a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800196c:	2302      	movs	r3, #2
 800196e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001970:	463b      	mov	r3, r7
 8001972:	4619      	mov	r1, r3
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_ADC1_Init+0xb4>)
 8001976:	f002 fb49 	bl	800400c <HAL_ADC_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001980:	f000 fff4 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	200108b0 	.word	0x200108b0
 8001990:	40012000 	.word	0x40012000
 8001994:	0f000001 	.word	0x0f000001

08001998 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <MX_I2C1_Init+0x50>)
 800199e:	4a13      	ldr	r2, [pc, #76]	; (80019ec <MX_I2C1_Init+0x54>)
 80019a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019a4:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <MX_I2C1_Init+0x58>)
 80019a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019be:	2200      	movs	r2, #0
 80019c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019d4:	4804      	ldr	r0, [pc, #16]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019d6:	f004 ffa3 	bl	8006920 <HAL_I2C_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019e0:	f000 ffc4 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20010628 	.word	0x20010628
 80019ec:	40005400 	.word	0x40005400
 80019f0:	000186a0 	.word	0x000186a0

080019f4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <MX_I2S3_Init+0x54>)
 80019fa:	4a14      	ldr	r2, [pc, #80]	; (8001a4c <MX_I2S3_Init+0x58>)
 80019fc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <MX_I2S3_Init+0x54>)
 8001a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a04:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <MX_I2S3_Init+0x54>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_I2S3_Init+0x54>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <MX_I2S3_Init+0x54>)
 8001a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a18:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <MX_I2S3_Init+0x54>)
 8001a1c:	4a0c      	ldr	r2, [pc, #48]	; (8001a50 <MX_I2S3_Init+0x5c>)
 8001a1e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_I2S3_Init+0x54>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <MX_I2S3_Init+0x54>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_I2S3_Init+0x54>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_I2S3_Init+0x54>)
 8001a34:	f005 f8b8 	bl	8006ba8 <HAL_I2S_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001a3e:	f000 ff95 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20010db8 	.word	0x20010db8
 8001a4c:	40003c00 	.word	0x40003c00
 8001a50:	00017700 	.word	0x00017700

08001a54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <MX_SPI1_Init+0x64>)
 8001a5a:	4a18      	ldr	r2, [pc, #96]	; (8001abc <MX_SPI1_Init+0x68>)
 8001a5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <MX_SPI1_Init+0x64>)
 8001a60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a66:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <MX_SPI1_Init+0x64>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <MX_SPI1_Init+0x64>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_SPI1_Init+0x64>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_SPI1_Init+0x64>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MX_SPI1_Init+0x64>)
 8001a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_SPI1_Init+0x64>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <MX_SPI1_Init+0x64>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_SPI1_Init+0x64>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <MX_SPI1_Init+0x64>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_SPI1_Init+0x64>)
 8001aa0:	220a      	movs	r2, #10
 8001aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aa4:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <MX_SPI1_Init+0x64>)
 8001aa6:	f006 fb05 	bl	80080b4 <HAL_SPI_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ab0:	f000 ff5c 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200109f4 	.word	0x200109f4
 8001abc:	40013000 	.word	0x40013000

08001ac0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08e      	sub	sp, #56	; 0x38
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	f107 0320 	add.w	r3, r7, #32
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
 8001aec:	615a      	str	r2, [r3, #20]
 8001aee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001af0:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <MX_TIM3_Init+0xe4>)
 8001af2:	4a2d      	ldr	r2, [pc, #180]	; (8001ba8 <MX_TIM3_Init+0xe8>)
 8001af4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001af6:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <MX_TIM3_Init+0xe4>)
 8001af8:	2253      	movs	r2, #83	; 0x53
 8001afa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afc:	4b29      	ldr	r3, [pc, #164]	; (8001ba4 <MX_TIM3_Init+0xe4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001b02:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <MX_TIM3_Init+0xe4>)
 8001b04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0a:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <MX_TIM3_Init+0xe4>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b10:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <MX_TIM3_Init+0xe4>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b16:	4823      	ldr	r0, [pc, #140]	; (8001ba4 <MX_TIM3_Init+0xe4>)
 8001b18:	f006 fb55 	bl	80081c6 <HAL_TIM_Base_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001b22:	f000 ff23 	bl	800296c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b30:	4619      	mov	r1, r3
 8001b32:	481c      	ldr	r0, [pc, #112]	; (8001ba4 <MX_TIM3_Init+0xe4>)
 8001b34:	f006 ff40 	bl	80089b8 <HAL_TIM_ConfigClockSource>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b3e:	f000 ff15 	bl	800296c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b42:	4818      	ldr	r0, [pc, #96]	; (8001ba4 <MX_TIM3_Init+0xe4>)
 8001b44:	f006 fbfe 	bl	8008344 <HAL_TIM_PWM_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b4e:	f000 ff0d 	bl	800296c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b5a:	f107 0320 	add.w	r3, r7, #32
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4810      	ldr	r0, [pc, #64]	; (8001ba4 <MX_TIM3_Init+0xe4>)
 8001b62:	f007 fb1f 	bl	80091a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b6c:	f000 fefe 	bl	800296c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b70:	2360      	movs	r3, #96	; 0x60
 8001b72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 8001b74:	23fa      	movs	r3, #250	; 0xfa
 8001b76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	2200      	movs	r2, #0
 8001b84:	4619      	mov	r1, r3
 8001b86:	4807      	ldr	r0, [pc, #28]	; (8001ba4 <MX_TIM3_Init+0xe4>)
 8001b88:	f006 fe54 	bl	8008834 <HAL_TIM_PWM_ConfigChannel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b92:	f000 feeb 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b96:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <MX_TIM3_Init+0xe4>)
 8001b98:	f001 fce2 	bl	8003560 <HAL_TIM_MspPostInit>

}
 8001b9c:	bf00      	nop
 8001b9e:	3738      	adds	r7, #56	; 0x38
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20010864 	.word	0x20010864
 8001ba8:	40000400 	.word	0x40000400

08001bac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <MX_USART2_UART_Init+0x4c>)
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <MX_USART2_UART_Init+0x50>)
 8001bb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <MX_USART2_UART_Init+0x4c>)
 8001bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <MX_USART2_UART_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <MX_USART2_UART_Init+0x4c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <MX_USART2_UART_Init+0x4c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <MX_USART2_UART_Init+0x4c>)
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <MX_USART2_UART_Init+0x4c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <MX_USART2_UART_Init+0x4c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001be2:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_USART2_UART_Init+0x4c>)
 8001be4:	f007 fb6e 	bl	80092c4 <HAL_UART_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bee:	f000 febd 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20010d50 	.word	0x20010d50
 8001bfc:	40004400 	.word	0x40004400

08001c00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <MX_USART3_UART_Init+0x4c>)
 8001c06:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <MX_USART3_UART_Init+0x50>)
 8001c08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <MX_USART3_UART_Init+0x4c>)
 8001c0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <MX_USART3_UART_Init+0x4c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <MX_USART3_UART_Init+0x4c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <MX_USART3_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <MX_USART3_UART_Init+0x4c>)
 8001c26:	220c      	movs	r2, #12
 8001c28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <MX_USART3_UART_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <MX_USART3_UART_Init+0x4c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_USART3_UART_Init+0x4c>)
 8001c38:	f007 fb44 	bl	80092c4 <HAL_UART_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c42:	f000 fe93 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200105c4 	.word	0x200105c4
 8001c50:	40004800 	.word	0x40004800

08001c54 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001c5e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c62:	2208      	movs	r2, #8
 8001c64:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c74:	2202      	movs	r2, #2
 8001c76:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8001c7e:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c80:	f003 fb39 	bl	80052f6 <HAL_HCD_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8001c8a:	f000 fe6f 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20010a4c 	.word	0x20010a4c

08001c98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <MX_DMA_Init+0x78>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a1a      	ldr	r2, [pc, #104]	; (8001d10 <MX_DMA_Init+0x78>)
 8001ca8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <MX_DMA_Init+0x78>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <MX_DMA_Init+0x78>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a13      	ldr	r2, [pc, #76]	; (8001d10 <MX_DMA_Init+0x78>)
 8001cc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_DMA_Init+0x78>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2105      	movs	r1, #5
 8001cda:	2010      	movs	r0, #16
 8001cdc:	f002 fcee 	bl	80046bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ce0:	2010      	movs	r0, #16
 8001ce2:	f002 fd07 	bl	80046f4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2105      	movs	r1, #5
 8001cea:	2011      	movs	r0, #17
 8001cec:	f002 fce6 	bl	80046bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001cf0:	2011      	movs	r0, #17
 8001cf2:	f002 fcff 	bl	80046f4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2105      	movs	r1, #5
 8001cfa:	2038      	movs	r0, #56	; 0x38
 8001cfc:	f002 fcde 	bl	80046bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d00:	2038      	movs	r0, #56	; 0x38
 8001d02:	f002 fcf7 	bl	80046f4 <HAL_NVIC_EnableIRQ>

}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800

08001d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08c      	sub	sp, #48	; 0x30
 8001d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1a:	f107 031c 	add.w	r3, r7, #28
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
 8001d28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	4b77      	ldr	r3, [pc, #476]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a76      	ldr	r2, [pc, #472]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001d34:	f043 0310 	orr.w	r3, r3, #16
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b74      	ldr	r3, [pc, #464]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	4b70      	ldr	r3, [pc, #448]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a6f      	ldr	r2, [pc, #444]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001d50:	f043 0304 	orr.w	r3, r3, #4
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b6d      	ldr	r3, [pc, #436]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	4b69      	ldr	r3, [pc, #420]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a68      	ldr	r2, [pc, #416]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b66      	ldr	r3, [pc, #408]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	4b62      	ldr	r3, [pc, #392]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a61      	ldr	r2, [pc, #388]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b5f      	ldr	r3, [pc, #380]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	4b5b      	ldr	r3, [pc, #364]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a5a      	ldr	r2, [pc, #360]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b58      	ldr	r3, [pc, #352]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	4b54      	ldr	r3, [pc, #336]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a53      	ldr	r2, [pc, #332]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001dc0:	f043 0308 	orr.w	r3, r3, #8
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b51      	ldr	r3, [pc, #324]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|STEPPER_EN_Pin|STEPPER_DIR_Pin|MS1_Pin
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 8001dd8:	484d      	ldr	r0, [pc, #308]	; (8001f10 <MX_GPIO_Init+0x1fc>)
 8001dda:	f003 fa4f 	bl	800527c <HAL_GPIO_WritePin>
                          |MS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001dde:	2201      	movs	r2, #1
 8001de0:	2101      	movs	r1, #1
 8001de2:	484c      	ldr	r0, [pc, #304]	; (8001f14 <MX_GPIO_Init+0x200>)
 8001de4:	f003 fa4a 	bl	800527c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001de8:	2200      	movs	r2, #0
 8001dea:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001dee:	484a      	ldr	r0, [pc, #296]	; (8001f18 <MX_GPIO_Init+0x204>)
 8001df0:	f003 fa44 	bl	800527c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin STEPPER_EN_Pin STEPPER_DIR_Pin MS1_Pin
                           MS2_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|STEPPER_EN_Pin|STEPPER_DIR_Pin|MS1_Pin
 8001df4:	f44f 63f1 	mov.w	r3, #1928	; 0x788
 8001df8:	61fb      	str	r3, [r7, #28]
                          |MS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e06:	f107 031c 	add.w	r3, r7, #28
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4840      	ldr	r0, [pc, #256]	; (8001f10 <MX_GPIO_Init+0x1fc>)
 8001e0e:	f003 f881 	bl	8004f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001e12:	2301      	movs	r3, #1
 8001e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e16:	2301      	movs	r3, #1
 8001e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e22:	f107 031c 	add.w	r3, r7, #28
 8001e26:	4619      	mov	r1, r3
 8001e28:	483a      	ldr	r0, [pc, #232]	; (8001f14 <MX_GPIO_Init+0x200>)
 8001e2a:	f003 f873 	bl	8004f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001e2e:	2308      	movs	r3, #8
 8001e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e3e:	2305      	movs	r3, #5
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001e42:	f107 031c 	add.w	r3, r7, #28
 8001e46:	4619      	mov	r1, r3
 8001e48:	4832      	ldr	r0, [pc, #200]	; (8001f14 <MX_GPIO_Init+0x200>)
 8001e4a:	f003 f863 	bl	8004f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0_Pin */
  GPIO_InitStruct.Pin = PB0_Pin;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PB0_GPIO_Port, &GPIO_InitStruct);
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	4619      	mov	r1, r3
 8001e62:	482e      	ldr	r0, [pc, #184]	; (8001f1c <MX_GPIO_Init+0x208>)
 8001e64:	f003 f856 	bl	8004f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001e68:	2304      	movs	r3, #4
 8001e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4829      	ldr	r0, [pc, #164]	; (8001f20 <MX_GPIO_Init+0x20c>)
 8001e7c:	f003 f84a 	bl	8004f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e92:	2305      	movs	r3, #5
 8001e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001e96:	f107 031c 	add.w	r3, r7, #28
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4820      	ldr	r0, [pc, #128]	; (8001f20 <MX_GPIO_Init+0x20c>)
 8001e9e:	f003 f839 	bl	8004f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001ea2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001ea6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4817      	ldr	r0, [pc, #92]	; (8001f18 <MX_GPIO_Init+0x204>)
 8001ebc:	f003 f82a 	bl	8004f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4811      	ldr	r0, [pc, #68]	; (8001f18 <MX_GPIO_Init+0x204>)
 8001ed4:	f003 f81e 	bl	8004f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001edc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	4619      	mov	r1, r3
 8001eec:	4808      	ldr	r0, [pc, #32]	; (8001f10 <MX_GPIO_Init+0x1fc>)
 8001eee:	f003 f811 	bl	8004f14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2105      	movs	r1, #5
 8001ef6:	2006      	movs	r0, #6
 8001ef8:	f002 fbe0 	bl	80046bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001efc:	2006      	movs	r0, #6
 8001efe:	f002 fbf9 	bl	80046f4 <HAL_NVIC_EnableIRQ>

}
 8001f02:	bf00      	nop
 8001f04:	3730      	adds	r7, #48	; 0x30
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020c00 	.word	0x40020c00
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40020400 	.word	0x40020400
 8001f24:	00000000 	.word	0x00000000

08001f28 <convertDegMinToDecDeg>:
 * Convert NMEA absolute position to decimal degrees
 * "ddmm.mmmm" or "dddmm.mmmm" really is D+M/60,
 * then negated if quadrant is 'W' or 'S'
 */
double convertDegMinToDecDeg (float degMin)
{
 8001f28:	b5b0      	push	{r4, r5, r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	ed87 0a01 	vstr	s0, [r7, #4]
  double min = 0.0;
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double decDeg = 0.0;
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	e9c7 2302 	strd	r2, r3, [r7, #8]

  //get the minutes, fmod() requires double
  min = fmod((double)degMin, 100.0);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe fb0c 	bl	8000568 <__aeabi_f2d>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001fc0 <convertDegMinToDecDeg+0x98>
 8001f58:	ec43 2b10 	vmov	d0, r2, r3
 8001f5c:	f01b fc66 	bl	801d82c <fmod>
 8001f60:	ed87 0b04 	vstr	d0, [r7, #16]

  //rebuild coordinates in decimal degrees
  degMin = (int) ( degMin / 100 );
 8001f64:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f68:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001fc8 <convertDegMinToDecDeg+0xa0>
 8001f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f78:	edc7 7a01 	vstr	s15, [r7, #4]
  decDeg = degMin + ( min / 60 );
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7fe faf3 	bl	8000568 <__aeabi_f2d>
 8001f82:	4604      	mov	r4, r0
 8001f84:	460d      	mov	r5, r1
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <convertDegMinToDecDeg+0xa4>)
 8001f8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f90:	f7fe fc6c 	bl	800086c <__aeabi_ddiv>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4620      	mov	r0, r4
 8001f9a:	4629      	mov	r1, r5
 8001f9c:	f7fe f986 	bl	80002ac <__adddf3>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	e9c7 2302 	strd	r2, r3, [r7, #8]

  return decDeg;
 8001fa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fac:	ec43 2b17 	vmov	d7, r2, r3
}
 8001fb0:	eeb0 0a47 	vmov.f32	s0, s14
 8001fb4:	eef0 0a67 	vmov.f32	s1, s15
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	40590000 	.word	0x40590000
 8001fc8:	42c80000 	.word	0x42c80000
 8001fcc:	404e0000 	.word	0x404e0000

08001fd0 <ros2_gpio_input_timer_callback>:

void ros2_gpio_input_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	e9c7 2300 	strd	r2, r3, [r7]


		//sprintf(joint_state_msg.header.frame_id.data, "%ld", seq_no);
		//joint_state_msg.header.frame_id.size = strlen(joint_state_msg.header.frame_id.data);

		ros2_gpio_input_msg.data= gpio_input;
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <ros2_gpio_input_timer_callback+0x38>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	; (800200c <ros2_gpio_input_timer_callback+0x3c>)
 8001fe2:	6013      	str	r3, [r2, #0]

		// Publish the message
		rcl_ret_t ret = rcl_publish(&ros2_gpio_input_pub, &ros2_gpio_input_msg, NULL);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	4909      	ldr	r1, [pc, #36]	; (800200c <ros2_gpio_input_timer_callback+0x3c>)
 8001fe8:	4809      	ldr	r0, [pc, #36]	; (8002010 <ros2_gpio_input_timer_callback+0x40>)
 8001fea:	f00c fa4f 	bl	800e48c <rcl_publish>
 8001fee:	6178      	str	r0, [r7, #20]
		if (ret != RCL_RET_OK)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d004      	beq.n	8002000 <ros2_gpio_input_timer_callback+0x30>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 8001ff6:	f44f 715c 	mov.w	r1, #880	; 0x370
 8001ffa:	4806      	ldr	r0, [pc, #24]	; (8002014 <ros2_gpio_input_timer_callback+0x44>)
 8001ffc:	f017 febc 	bl	8019d78 <iprintf>
		}
}
 8002000:	bf00      	nop
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20010860 	.word	0x20010860
 800200c:	200108ac 	.word	0x200108ac
 8002010:	200109e4 	.word	0x200109e4
 8002014:	0801dd20 	.word	0x0801dd20

08002018 <ros2_gps_timer_callback>:

void ros2_gps_timer_callback(rcl_timer_t * timer, int64_t last_call_time) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b08c      	sub	sp, #48	; 0x30
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d03e      	beq.n	80020a8 <ros2_gps_timer_callback+0x90>
// Fill the message timestamp
		struct timespec ts;
		int64_t time_ns;
		time_ns = rmw_uros_epoch_nanos();
 800202a:	f00e faa7 	bl	801057c <rmw_uros_epoch_nanos>
 800202e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		UTILS_NanosecondsToTimespec(time_ns, &ts);
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	461a      	mov	r2, r3
 8002038:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800203c:	f000 fd38 	bl	8002ab0 <UTILS_NanosecondsToTimespec>


	// Create the Header
		ros2_gps_msg.header.stamp.sec = ts.tv_sec;
 8002040:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002044:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <ros2_gps_timer_callback+0x98>)
 8002046:	601a      	str	r2, [r3, #0]
		ros2_gps_msg.header.stamp.nanosec = ts.tv_nsec;
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	461a      	mov	r2, r3
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <ros2_gps_timer_callback+0x98>)
 800204e:	605a      	str	r2, [r3, #4]

		ros2_gps_msg.latitude = gps_latitude;
 8002050:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <ros2_gps_timer_callback+0x9c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fa87 	bl	8000568 <__aeabi_f2d>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4914      	ldr	r1, [pc, #80]	; (80020b0 <ros2_gps_timer_callback+0x98>)
 8002060:	e9c1 2306 	strd	r2, r3, [r1, #24]
		ros2_gps_msg.longitude = gps_longitude;
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <ros2_gps_timer_callback+0xa0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fa7d 	bl	8000568 <__aeabi_f2d>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	490f      	ldr	r1, [pc, #60]	; (80020b0 <ros2_gps_timer_callback+0x98>)
 8002074:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ros2_gps_msg.altitude = gps_alt;
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <ros2_gps_timer_callback+0xa4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa73 	bl	8000568 <__aeabi_f2d>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	490a      	ldr	r1, [pc, #40]	; (80020b0 <ros2_gps_timer_callback+0x98>)
 8002088:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		// Publish the message
				rcl_ret_t ret = rcl_publish(&ros2_gps_pub, &ros2_gps_msg, NULL);
 800208c:	2200      	movs	r2, #0
 800208e:	4908      	ldr	r1, [pc, #32]	; (80020b0 <ros2_gps_timer_callback+0x98>)
 8002090:	480b      	ldr	r0, [pc, #44]	; (80020c0 <ros2_gps_timer_callback+0xa8>)
 8002092:	f00c f9fb 	bl	800e48c <rcl_publish>
 8002096:	6278      	str	r0, [r7, #36]	; 0x24
				if (ret != RCL_RET_OK)
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <ros2_gps_timer_callback+0x90>
				{
				  printf("Error publishing gps (line %d)\n", __LINE__);
 800209e:	f44f 7162 	mov.w	r1, #904	; 0x388
 80020a2:	4808      	ldr	r0, [pc, #32]	; (80020c4 <ros2_gps_timer_callback+0xac>)
 80020a4:	f017 fe68 	bl	8019d78 <iprintf>
				}
			}


}
 80020a8:	bf00      	nop
 80020aa:	3730      	adds	r7, #48	; 0x30
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	200107d0 	.word	0x200107d0
 80020b4:	200080dc 	.word	0x200080dc
 80020b8:	200080e0 	.word	0x200080e0
 80020bc:	200080e8 	.word	0x200080e8
 80020c0:	20010db4 	.word	0x20010db4
 80020c4:	0801dd48 	.word	0x0801dd48

080020c8 <ros2_analog_input_timer_callback>:

void ros2_analog_input_timer_callback(rcl_timer_t * timer, int64_t last_call_time){
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d018      	beq.n	800210c <ros2_analog_input_timer_callback+0x44>
	ros2_analog_input_msg.data.data[0] = adc_values[0];
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <ros2_analog_input_timer_callback+0x4c>)
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <ros2_analog_input_timer_callback+0x50>)
 80020e0:	8812      	ldrh	r2, [r2, #0]
 80020e2:	801a      	strh	r2, [r3, #0]
	ros2_analog_input_msg.data.data[1] = adc_values[1];
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <ros2_analog_input_timer_callback+0x4c>)
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	3302      	adds	r3, #2
 80020ea:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <ros2_analog_input_timer_callback+0x50>)
 80020ec:	8852      	ldrh	r2, [r2, #2]
 80020ee:	801a      	strh	r2, [r3, #0]
	// Publish the message
					rcl_ret_t ret = rcl_publish(&ros2_analog_input_pub, &ros2_analog_input_msg, NULL);
 80020f0:	2200      	movs	r2, #0
 80020f2:	4908      	ldr	r1, [pc, #32]	; (8002114 <ros2_analog_input_timer_callback+0x4c>)
 80020f4:	4809      	ldr	r0, [pc, #36]	; (800211c <ros2_analog_input_timer_callback+0x54>)
 80020f6:	f00c f9c9 	bl	800e48c <rcl_publish>
 80020fa:	6178      	str	r0, [r7, #20]
					if (ret != RCL_RET_OK)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d004      	beq.n	800210c <ros2_analog_input_timer_callback+0x44>
					{
					  printf("Error publishing analog input (line %d)\n", __LINE__);
 8002102:	f240 3197 	movw	r1, #919	; 0x397
 8002106:	4806      	ldr	r0, [pc, #24]	; (8002120 <ros2_analog_input_timer_callback+0x58>)
 8002108:	f017 fe36 	bl	8019d78 <iprintf>
					}
	}

}
 800210c:	bf00      	nop
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	200109c4 	.word	0x200109c4
 8002118:	20010e04 	.word	0x20010e04
 800211c:	200105c0 	.word	0x200105c0
 8002120:	0801dd68 	.word	0x0801dd68

08002124 <ros2_stepper_current_position_timer_callback>:

void ros2_stepper_current_position_timer_callback(rcl_timer_t * timer, int64_t last_call_time){
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d012      	beq.n	800215c <ros2_stepper_current_position_timer_callback+0x38>
	ros2_stepper_current_position_msg.data = stepper1.currentPos;
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <ros2_stepper_current_position_timer_callback+0x40>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <ros2_stepper_current_position_timer_callback+0x44>)
 800213e:	601a      	str	r2, [r3, #0]
	// Publish the message
					rcl_ret_t ret = rcl_publish(&ros2_stepper_current_position_pub, &ros2_stepper_current_position_msg, NULL);
 8002140:	2200      	movs	r2, #0
 8002142:	4909      	ldr	r1, [pc, #36]	; (8002168 <ros2_stepper_current_position_timer_callback+0x44>)
 8002144:	4809      	ldr	r0, [pc, #36]	; (800216c <ros2_stepper_current_position_timer_callback+0x48>)
 8002146:	f00c f9a1 	bl	800e48c <rcl_publish>
 800214a:	6178      	str	r0, [r7, #20]
					if (ret != RCL_RET_OK)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d004      	beq.n	800215c <ros2_stepper_current_position_timer_callback+0x38>
					{
					  printf("Error publishing stepper current position (line %d)\n", __LINE__);
 8002152:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8002156:	4806      	ldr	r0, [pc, #24]	; (8002170 <ros2_stepper_current_position_timer_callback+0x4c>)
 8002158:	f017 fe0e 	bl	8019d78 <iprintf>
					}
	}
}
 800215c:	bf00      	nop
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	2001067c 	.word	0x2001067c
 8002168:	200109e0 	.word	0x200109e0
 800216c:	2001085c 	.word	0x2001085c
 8002170:	0801dd94 	.word	0x0801dd94

08002174 <ros2_stepper_target_position_callback>:


void ros2_stepper_target_position_callback(const void * msgin){
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__UInt32 *stepper_target_position_msg;

		if (msgin != NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00c      	beq.n	800219c <ros2_stepper_target_position_callback+0x28>
		{



			stepper_target_position_msg = (const std_msgs__msg__UInt32 *)msgin;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	60fb      	str	r3, [r7, #12]
			stepper1.targetPos = stepper_target_position_msg->data;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <ros2_stepper_target_position_callback+0x30>)
 800218e:	605a      	str	r2, [r3, #4]
			osThreadFlagsSet(task_stepperHandle, TF_STEPPER_DATA);
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <ros2_stepper_target_position_callback+0x34>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2102      	movs	r1, #2
 8002196:	4618      	mov	r0, r3
 8002198:	f008 ff9e 	bl	800b0d8 <osThreadFlagsSet>

		}
}
 800219c:	bf00      	nop
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	2001067c 	.word	0x2001067c
 80021a8:	20010858 	.word	0x20010858

080021ac <ros2_gpio_output_callback>:

void ros2_gpio_output_callback(const void * msgin)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

	const std_msgs__msg__UInt32 *gpio_output_msg;
	int32_t data = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
	if (msgin != NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00f      	beq.n	80021de <ros2_gpio_output_callback+0x32>
	{



		gpio_output_msg = (const std_msgs__msg__UInt32 *)msgin;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	60bb      	str	r3, [r7, #8]
		data = gpio_output_msg->data;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, (data & 0x00000001));
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021d8:	4803      	ldr	r0, [pc, #12]	; (80021e8 <ros2_gpio_output_callback+0x3c>)
 80021da:	f003 f84f 	bl	800527c <HAL_GPIO_WritePin>


	}
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40020c00 	.word	0x40020c00

080021ec <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
if (huart->Instance == USART3){
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a12      	ldr	r2, [pc, #72]	; (8002244 <HAL_UART_RxCpltCallback+0x58>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d11e      	bne.n	800223c <HAL_UART_RxCpltCallback+0x50>
	if ((uart_gps_rx != '\n') && gps_buffer_index < sizeof(gps_buffer)){
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_UART_RxCpltCallback+0x5c>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b0a      	cmp	r3, #10
 8002204:	d00b      	beq.n	800221e <HAL_UART_RxCpltCallback+0x32>
		gps_buffer[gps_buffer_index++] = uart_gps_rx;
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <HAL_UART_RxCpltCallback+0x60>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	b2d1      	uxtb	r1, r2
 800220e:	4a0f      	ldr	r2, [pc, #60]	; (800224c <HAL_UART_RxCpltCallback+0x60>)
 8002210:	7011      	strb	r1, [r2, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <HAL_UART_RxCpltCallback+0x5c>)
 8002216:	7819      	ldrb	r1, [r3, #0]
 8002218:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HAL_UART_RxCpltCallback+0x64>)
 800221a:	5499      	strb	r1, [r3, r2]
 800221c:	e005      	b.n	800222a <HAL_UART_RxCpltCallback+0x3e>
	} else {
		osThreadFlagsSet(task_gpsHandle, TF_GPS_DATA);
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <HAL_UART_RxCpltCallback+0x68>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2101      	movs	r1, #1
 8002224:	4618      	mov	r0, r3
 8002226:	f008 ff57 	bl	800b0d8 <osThreadFlagsSet>
	}

	status = HAL_UART_Receive_IT(&huart3, &uart_gps_rx, 1);
 800222a:	2201      	movs	r2, #1
 800222c:	4906      	ldr	r1, [pc, #24]	; (8002248 <HAL_UART_RxCpltCallback+0x5c>)
 800222e:	480a      	ldr	r0, [pc, #40]	; (8002258 <HAL_UART_RxCpltCallback+0x6c>)
 8002230:	f007 f895 	bl	800935e <HAL_UART_Receive_IT>
 8002234:	4603      	mov	r3, r0
 8002236:	461a      	mov	r2, r3
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <HAL_UART_RxCpltCallback+0x70>)
 800223a:	701a      	strb	r2, [r3, #0]

}
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40004800 	.word	0x40004800
 8002248:	200080d5 	.word	0x200080d5
 800224c:	200080d4 	.word	0x200080d4
 8002250:	200106ac 	.word	0x200106ac
 8002254:	20010554 	.word	0x20010554
 8002258:	200105c4 	.word	0x200105c4
 800225c:	20010e00 	.word	0x20010e00

08002260 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d121      	bne.n	80022b6 <HAL_TIM_PWM_PulseFinishedCallback+0x56>
		if (stepper1.direction == DIRECTION_CW) {
 8002272:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8002274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002278:	2b01      	cmp	r3, #1
 800227a:	d10b      	bne.n	8002294 <HAL_TIM_PWM_PulseFinishedCallback+0x34>
			stepper1.currentPos++;
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3301      	adds	r3, #1
 8002282:	4a10      	ldr	r2, [pc, #64]	; (80022c4 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8002284:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(STEPPER_DIR_GPIO_Port, STEPPER_DIR_Pin, GPIO_PIN_SET);
 8002286:	2201      	movs	r2, #1
 8002288:	f44f 7180 	mov.w	r1, #256	; 0x100
 800228c:	480e      	ldr	r0, [pc, #56]	; (80022c8 <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 800228e:	f002 fff5 	bl	800527c <HAL_GPIO_WritePin>
 8002292:	e00a      	b.n	80022aa <HAL_TIM_PWM_PulseFinishedCallback+0x4a>
		} else {
			stepper1.currentPos--;
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	3b01      	subs	r3, #1
 800229a:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 800229c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(STEPPER_DIR_GPIO_Port, STEPPER_DIR_Pin, GPIO_PIN_RESET);
 800229e:	2200      	movs	r2, #0
 80022a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022a4:	4808      	ldr	r0, [pc, #32]	; (80022c8 <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 80022a6:	f002 ffe9 	bl	800527c <HAL_GPIO_WritePin>
		}
		osThreadFlagsSet(task_stepperHandle, TF_STEPPER_INT);
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2101      	movs	r1, #1
 80022b0:	4618      	mov	r0, r3
 80022b2:	f008 ff11 	bl	800b0d8 <osThreadFlagsSet>

	}
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40000400 	.word	0x40000400
 80022c4:	2001067c 	.word	0x2001067c
 80022c8:	40021000 	.word	0x40021000
 80022cc:	20010858 	.word	0x20010858

080022d0 <task_ros2_function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_ros2_function */
void task_ros2_function(void *argument)
{
 80022d0:	b5b0      	push	{r4, r5, r7, lr}
 80022d2:	b0d2      	sub	sp, #328	; 0x148
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	f107 031c 	add.w	r3, r7, #28
 80022da:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	// micro-ROS configuration
	  rmw_uros_set_custom_transport(
 80022dc:	4b78      	ldr	r3, [pc, #480]	; (80024c0 <task_ros2_function+0x1f0>)
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	4b78      	ldr	r3, [pc, #480]	; (80024c4 <task_ros2_function+0x1f4>)
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	4b78      	ldr	r3, [pc, #480]	; (80024c8 <task_ros2_function+0x1f8>)
 80022e6:	4a79      	ldr	r2, [pc, #484]	; (80024cc <task_ros2_function+0x1fc>)
 80022e8:	4979      	ldr	r1, [pc, #484]	; (80024d0 <task_ros2_function+0x200>)
 80022ea:	2001      	movs	r0, #1
 80022ec:	f00d fa9e 	bl	800f82c <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80022f0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80022f4:	4618      	mov	r0, r3
 80022f6:	f00c ff1b 	bl	800f130 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 80022fa:	4b76      	ldr	r3, [pc, #472]	; (80024d4 <task_ros2_function+0x204>)
 80022fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8002300:	4b75      	ldr	r3, [pc, #468]	; (80024d8 <task_ros2_function+0x208>)
 8002302:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8002306:	4b75      	ldr	r3, [pc, #468]	; (80024dc <task_ros2_function+0x20c>)
 8002308:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800230c:	4b74      	ldr	r3, [pc, #464]	; (80024e0 <task_ros2_function+0x210>)
 800230e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002312:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002316:	4618      	mov	r0, r3
 8002318:	f00c ff18 	bl	800f14c <rcutils_set_default_allocator>
 800231c:	4603      	mov	r3, r0
 800231e:	f083 0301 	eor.w	r3, r3, #1
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d004      	beq.n	8002332 <task_ros2_function+0x62>
		  printf("Error on default allocators (line %d)\n", __LINE__);
 8002328:	f240 4103 	movw	r1, #1027	; 0x403
 800232c:	486d      	ldr	r0, [pc, #436]	; (80024e4 <task_ros2_function+0x214>)
 800232e:	f017 fd23 	bl	8019d78 <iprintf>
	  rcl_allocator_t allocator;
	  rcl_node_t node;
	  rclc_executor_t executor;
	  rcl_init_options_t init_options;

	  allocator = rcl_get_default_allocator();
 8002332:	463b      	mov	r3, r7
 8002334:	4618      	mov	r0, r3
 8002336:	f00c ff29 	bl	800f18c <rcutils_get_default_allocator>
 800233a:	463b      	mov	r3, r7
 800233c:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 8002340:	461d      	mov	r5, r3
 8002342:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002346:	682b      	ldr	r3, [r5, #0]
 8002348:	6023      	str	r3, [r4, #0]
	  init_options = rcl_get_zero_initialized_init_options();
 800234a:	f00b fe1f 	bl	800df8c <rcl_get_zero_initialized_init_options>
 800234e:	4602      	mov	r2, r0
 8002350:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002354:	601a      	str	r2, [r3, #0]
	  rcl_init_options_init(&init_options, allocator);
 8002356:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800235a:	466a      	mov	r2, sp
 800235c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002360:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002364:	e882 0003 	stmia.w	r2, {r0, r1}
 8002368:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800236c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800236e:	4620      	mov	r0, r4
 8002370:	f00b fe0e 	bl	800df90 <rcl_init_options_init>

	  // create init_options
	  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8002374:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002378:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 800237c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	4613      	mov	r3, r2
 8002384:	2200      	movs	r2, #0
 8002386:	2100      	movs	r1, #0
 8002388:	f00c fdc8 	bl	800ef1c <rclc_support_init_with_options>

	  // create node
	  rcl_node_options_t node_ops = rcl_node_get_default_options();
 800238c:	f107 0320 	add.w	r3, r7, #32
 8002390:	4618      	mov	r0, r3
 8002392:	f00b ff23 	bl	800e1dc <rcl_node_get_default_options>
	  node_ops.domain_id = 25;
 8002396:	f107 0320 	add.w	r3, r7, #32
 800239a:	2219      	movs	r2, #25
 800239c:	601a      	str	r2, [r3, #0]
	  rclc_node_init_with_options(&node, "acquisition_system", "", &support, &node_ops);
 800239e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80023a2:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 80023a6:	f107 0320 	add.w	r3, r7, #32
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	4a4e      	ldr	r2, [pc, #312]	; (80024e8 <task_ros2_function+0x218>)
 80023b0:	494e      	ldr	r1, [pc, #312]	; (80024ec <task_ros2_function+0x21c>)
 80023b2:	f00c fdf1 	bl	800ef98 <rclc_node_init_with_options>


	  //time sync
	  if( rmw_uros_sync_session(1000) != RMW_RET_OK)
 80023b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ba:	f00e f8ed 	bl	8010598 <rmw_uros_sync_session>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d004      	beq.n	80023ce <task_ros2_function+0xfe>
		  printf("Error on time sync (line %d)\n", __LINE__);
 80023c4:	f240 4147 	movw	r1, #1095	; 0x447
 80023c8:	4849      	ldr	r0, [pc, #292]	; (80024f0 <task_ros2_function+0x220>)
 80023ca:	f017 fcd5 	bl	8019d78 <iprintf>




	  //create gpio_output_sub
	  ros2_gpio_output_sub = rcl_get_zero_initialized_subscription();
 80023ce:	f00c f881 	bl	800e4d4 <rcl_get_zero_initialized_subscription>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4a47      	ldr	r2, [pc, #284]	; (80024f4 <task_ros2_function+0x224>)
 80023d6:	6013      	str	r3, [r2, #0]
	  rclc_subscription_init_best_effort(
 80023d8:	f00e fd9c 	bl	8010f14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt32>
 80023dc:	4602      	mov	r2, r0
 80023de:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80023e2:	4b45      	ldr	r3, [pc, #276]	; (80024f8 <task_ros2_function+0x228>)
 80023e4:	4843      	ldr	r0, [pc, #268]	; (80024f4 <task_ros2_function+0x224>)
 80023e6:	f00c fe39 	bl	800f05c <rclc_subscription_init_best_effort>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt32),
			  "/gpio_output");

	  //create stepper_target_positoin_sub
	  ros2_stepper_target_position_sub = rcl_get_zero_initialized_subscription();
 80023ea:	f00c f873 	bl	800e4d4 <rcl_get_zero_initialized_subscription>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4a42      	ldr	r2, [pc, #264]	; (80024fc <task_ros2_function+0x22c>)
 80023f2:	6013      	str	r3, [r2, #0]
	 	  rclc_subscription_init_best_effort(
 80023f4:	f00e fd8e 	bl	8010f14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt32>
 80023f8:	4602      	mov	r2, r0
 80023fa:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80023fe:	4b40      	ldr	r3, [pc, #256]	; (8002500 <task_ros2_function+0x230>)
 8002400:	483e      	ldr	r0, [pc, #248]	; (80024fc <task_ros2_function+0x22c>)
 8002402:	f00c fe2b 	bl	800f05c <rclc_subscription_init_best_effort>
	 			  "/stepper_target_position");



	  // gpio_input pub
	  rclc_publisher_init_default(
 8002406:	f00e fd85 	bl	8010f14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt32>
 800240a:	4602      	mov	r2, r0
 800240c:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002410:	4b3c      	ldr	r3, [pc, #240]	; (8002504 <task_ros2_function+0x234>)
 8002412:	483d      	ldr	r0, [pc, #244]	; (8002508 <task_ros2_function+0x238>)
 8002414:	f00c fdee 	bl	800eff4 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt32),
			  "/gpio_input");

	  // gps_pub
	  rclc_publisher_init_default(
 8002418:	f00e fbe2 	bl	8010be0 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>
 800241c:	4602      	mov	r2, r0
 800241e:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002422:	4b3a      	ldr	r3, [pc, #232]	; (800250c <task_ros2_function+0x23c>)
 8002424:	483a      	ldr	r0, [pc, #232]	; (8002510 <task_ros2_function+0x240>)
 8002426:	f00c fde5 	bl	800eff4 <rclc_publisher_init_default>
	  			  &ros2_gps_pub,
	  			  &node,
	  			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, NavSatFix),
	  			  "/gps");

	  rclc_publisher_init_default(
 800242a:	f00e fd71 	bl	8010f10 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>
 800242e:	4602      	mov	r2, r0
 8002430:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002434:	4b37      	ldr	r3, [pc, #220]	; (8002514 <task_ros2_function+0x244>)
 8002436:	4838      	ldr	r0, [pc, #224]	; (8002518 <task_ros2_function+0x248>)
 8002438:	f00c fddc 	bl	800eff4 <rclc_publisher_init_default>
	  			  &node,
	  			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt16MultiArray),
	  			  "/analog_input");


	  rclc_publisher_init_default(
 800243c:	f00e fd6a 	bl	8010f14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt32>
 8002440:	4602      	mov	r2, r0
 8002442:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002446:	4b35      	ldr	r3, [pc, #212]	; (800251c <task_ros2_function+0x24c>)
 8002448:	4835      	ldr	r0, [pc, #212]	; (8002520 <task_ros2_function+0x250>)
 800244a:	f00c fdd3 	bl	800eff4 <rclc_publisher_init_default>
	  	  			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt32),
	  	  			  "/stepper_current_position");


	  // gps memmory allocation
	  ros2_gps_msg.header.frame_id.capacity = 20;
 800244e:	4b35      	ldr	r3, [pc, #212]	; (8002524 <task_ros2_function+0x254>)
 8002450:	2214      	movs	r2, #20
 8002452:	611a      	str	r2, [r3, #16]
	  ros2_gps_msg.header.frame_id.data = (char*) pvPortMalloc(ros2_gps_msg.header.frame_id.capacity  * sizeof(char));
 8002454:	4b33      	ldr	r3, [pc, #204]	; (8002524 <task_ros2_function+0x254>)
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	4618      	mov	r0, r3
 800245a:	f00b fbad 	bl	800dbb8 <pvPortMalloc>
 800245e:	4603      	mov	r3, r0
 8002460:	4a30      	ldr	r2, [pc, #192]	; (8002524 <task_ros2_function+0x254>)
 8002462:	6093      	str	r3, [r2, #8]
	  ros2_gps_msg.header.frame_id.size = strlen(ros2_gps_msg.header.frame_id.data);
 8002464:	4b2f      	ldr	r3, [pc, #188]	; (8002524 <task_ros2_function+0x254>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4618      	mov	r0, r3
 800246a:	f7fd febb 	bl	80001e4 <strlen>
 800246e:	4603      	mov	r3, r0
 8002470:	4a2c      	ldr	r2, [pc, #176]	; (8002524 <task_ros2_function+0x254>)
 8002472:	60d3      	str	r3, [r2, #12]


	  // analog input allocation
	  ros2_analog_input_msg.data.capacity = 2;
 8002474:	4b2c      	ldr	r3, [pc, #176]	; (8002528 <task_ros2_function+0x258>)
 8002476:	2202      	movs	r2, #2
 8002478:	619a      	str	r2, [r3, #24]
	  ros2_analog_input_msg.data.size = 2;
 800247a:	4b2b      	ldr	r3, [pc, #172]	; (8002528 <task_ros2_function+0x258>)
 800247c:	2202      	movs	r2, #2
 800247e:	615a      	str	r2, [r3, #20]
	  ros2_analog_input_msg.data.data = (uint16_t*) pvPortMalloc(ros2_analog_input_msg.data.capacity * sizeof(uint16_t));
 8002480:	4b29      	ldr	r3, [pc, #164]	; (8002528 <task_ros2_function+0x258>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4618      	mov	r0, r3
 8002488:	f00b fb96 	bl	800dbb8 <pvPortMalloc>
 800248c:	4603      	mov	r3, r0
 800248e:	4a26      	ldr	r2, [pc, #152]	; (8002528 <task_ros2_function+0x258>)
 8002490:	6113      	str	r3, [r2, #16]
	  ros2_analog_input_msg.layout.dim.capacity = 2;
 8002492:	4b25      	ldr	r3, [pc, #148]	; (8002528 <task_ros2_function+0x258>)
 8002494:	2202      	movs	r2, #2
 8002496:	609a      	str	r2, [r3, #8]
	  ros2_analog_input_msg.layout.dim.size = 2;
 8002498:	4b23      	ldr	r3, [pc, #140]	; (8002528 <task_ros2_function+0x258>)
 800249a:	2202      	movs	r2, #2
 800249c:	605a      	str	r2, [r3, #4]
	  ros2_analog_input_msg.layout.dim.data = (std_msgs__msg__MultiArrayDimension*) pvPortMalloc(ros2_analog_input_msg.layout.dim.capacity * sizeof(std_msgs__msg__MultiArrayDimension));
 800249e:	4b22      	ldr	r3, [pc, #136]	; (8002528 <task_ros2_function+0x258>)
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f00b fb84 	bl	800dbb8 <pvPortMalloc>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4a1d      	ldr	r2, [pc, #116]	; (8002528 <task_ros2_function+0x258>)
 80024b4:	6013      	str	r3, [r2, #0]
	  for (size_t i =0; i< ros2_analog_input_msg.layout.dim.capacity; i++){
 80024b6:	2300      	movs	r3, #0
 80024b8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80024bc:	e068      	b.n	8002590 <task_ros2_function+0x2c0>
 80024be:	bf00      	nop
 80024c0:	0800160d 	.word	0x0800160d
 80024c4:	080015a5 	.word	0x080015a5
 80024c8:	08001585 	.word	0x08001585
 80024cc:	08001559 	.word	0x08001559
 80024d0:	20010d50 	.word	0x20010d50
 80024d4:	08002979 	.word	0x08002979
 80024d8:	080029bd 	.word	0x080029bd
 80024dc:	080029f5 	.word	0x080029f5
 80024e0:	08002a61 	.word	0x08002a61
 80024e4:	0801ddcc 	.word	0x0801ddcc
 80024e8:	0801ddf4 	.word	0x0801ddf4
 80024ec:	0801ddf8 	.word	0x0801ddf8
 80024f0:	0801de0c 	.word	0x0801de0c
 80024f4:	20010558 	.word	0x20010558
 80024f8:	0801de2c 	.word	0x0801de2c
 80024fc:	20010550 	.word	0x20010550
 8002500:	0801de3c 	.word	0x0801de3c
 8002504:	0801de58 	.word	0x0801de58
 8002508:	200109e4 	.word	0x200109e4
 800250c:	0801de64 	.word	0x0801de64
 8002510:	20010db4 	.word	0x20010db4
 8002514:	0801de6c 	.word	0x0801de6c
 8002518:	200105c0 	.word	0x200105c0
 800251c:	0801de7c 	.word	0x0801de7c
 8002520:	2001085c 	.word	0x2001085c
 8002524:	200107d0 	.word	0x200107d0
 8002528:	200109c4 	.word	0x200109c4
		  ros2_analog_input_msg.layout.dim.data[i].label.capacity = 20;
 800252c:	4b5e      	ldr	r3, [pc, #376]	; (80026a8 <task_ros2_function+0x3d8>)
 800252e:	6819      	ldr	r1, [r3, #0]
 8002530:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	2214      	movs	r2, #20
 8002540:	609a      	str	r2, [r3, #8]
		  ros2_analog_input_msg.layout.dim.data[i].label.size = 10;
 8002542:	4b59      	ldr	r3, [pc, #356]	; (80026a8 <task_ros2_function+0x3d8>)
 8002544:	6819      	ldr	r1, [r3, #0]
 8002546:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	220a      	movs	r2, #10
 8002556:	605a      	str	r2, [r3, #4]
		  ros2_analog_input_msg.layout.dim.data[i].label.data = (char*) pvPortMalloc(ros2_analog_input_msg.layout.dim.data[i].label.capacity * sizeof(char));
 8002558:	4b53      	ldr	r3, [pc, #332]	; (80026a8 <task_ros2_function+0x3d8>)
 800255a:	6819      	ldr	r1, [r3, #0]
 800255c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	6898      	ldr	r0, [r3, #8]
 800256c:	4b4e      	ldr	r3, [pc, #312]	; (80026a8 <task_ros2_function+0x3d8>)
 800256e:	6819      	ldr	r1, [r3, #0]
 8002570:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	18cc      	adds	r4, r1, r3
 800257e:	f00b fb1b 	bl	800dbb8 <pvPortMalloc>
 8002582:	4603      	mov	r3, r0
 8002584:	6023      	str	r3, [r4, #0]
	  for (size_t i =0; i< ros2_analog_input_msg.layout.dim.capacity; i++){
 8002586:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800258a:	3301      	adds	r3, #1
 800258c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002590:	4b45      	ldr	r3, [pc, #276]	; (80026a8 <task_ros2_function+0x3d8>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002598:	429a      	cmp	r2, r3
 800259a:	d3c7      	bcc.n	800252c <task_ros2_function+0x25c>

	  }
	  strcpy(ros2_analog_input_msg.layout.dim.data[0].label.data, "Analog 1");
 800259c:	4b42      	ldr	r3, [pc, #264]	; (80026a8 <task_ros2_function+0x3d8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4942      	ldr	r1, [pc, #264]	; (80026ac <task_ros2_function+0x3dc>)
 80025a4:	461a      	mov	r2, r3
 80025a6:	460b      	mov	r3, r1
 80025a8:	cb03      	ldmia	r3!, {r0, r1}
 80025aa:	6010      	str	r0, [r2, #0]
 80025ac:	6051      	str	r1, [r2, #4]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	7213      	strb	r3, [r2, #8]
	  strcpy(ros2_analog_input_msg.layout.dim.data[1].label.data, "Analog 2");
 80025b2:	4b3d      	ldr	r3, [pc, #244]	; (80026a8 <task_ros2_function+0x3d8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	3314      	adds	r3, #20
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	493d      	ldr	r1, [pc, #244]	; (80026b0 <task_ros2_function+0x3e0>)
 80025bc:	461a      	mov	r2, r3
 80025be:	460b      	mov	r3, r1
 80025c0:	cb03      	ldmia	r3!, {r0, r1}
 80025c2:	6010      	str	r0, [r2, #0]
 80025c4:	6051      	str	r1, [r2, #4]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	7213      	strb	r3, [r2, #8]


	  // Create a timer
	  rclc_timer_init_default(&ros2_gpio_input_timer, &support, RCL_MS_TO_NS(1000), ros2_gpio_input_timer_callback);
 80025ca:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80025ce:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <task_ros2_function+0x3e4>)
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	a331      	add	r3, pc, #196	; (adr r3, 8002698 <task_ros2_function+0x3c8>)
 80025d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d8:	4837      	ldr	r0, [pc, #220]	; (80026b8 <task_ros2_function+0x3e8>)
 80025da:	f00c fd73 	bl	800f0c4 <rclc_timer_init_default>
	  rclc_timer_init_default(&ros2_gps_timer, &support, RCL_MS_TO_NS(1000), ros2_gps_timer_callback);
 80025de:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80025e2:	4b36      	ldr	r3, [pc, #216]	; (80026bc <task_ros2_function+0x3ec>)
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	a32c      	add	r3, pc, #176	; (adr r3, 8002698 <task_ros2_function+0x3c8>)
 80025e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ec:	4834      	ldr	r0, [pc, #208]	; (80026c0 <task_ros2_function+0x3f0>)
 80025ee:	f00c fd69 	bl	800f0c4 <rclc_timer_init_default>
	  rclc_timer_init_default(&ros2_analog_input_timer, &support, RCL_MS_TO_NS(50), ros2_analog_input_timer_callback);
 80025f2:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80025f6:	4b33      	ldr	r3, [pc, #204]	; (80026c4 <task_ros2_function+0x3f4>)
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	a329      	add	r3, pc, #164	; (adr r3, 80026a0 <task_ros2_function+0x3d0>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	4831      	ldr	r0, [pc, #196]	; (80026c8 <task_ros2_function+0x3f8>)
 8002602:	f00c fd5f 	bl	800f0c4 <rclc_timer_init_default>
	  rclc_timer_init_default(&ros2_stepper_current_position_timer, &support, RCL_MS_TO_NS(50), ros2_stepper_current_position_timer_callback);
 8002606:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800260a:	4b30      	ldr	r3, [pc, #192]	; (80026cc <task_ros2_function+0x3fc>)
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	a324      	add	r3, pc, #144	; (adr r3, 80026a0 <task_ros2_function+0x3d0>)
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	482e      	ldr	r0, [pc, #184]	; (80026d0 <task_ros2_function+0x400>)
 8002616:	f00c fd55 	bl	800f0c4 <rclc_timer_init_default>

	  // Create executor
	  rclc_executor_init(&executor, &support.context, 6, &allocator);
 800261a:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800261e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002622:	f103 0108 	add.w	r1, r3, #8
 8002626:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800262a:	4613      	mov	r3, r2
 800262c:	2206      	movs	r2, #6
 800262e:	f00c fa03 	bl	800ea38 <rclc_executor_init>

	  rclc_executor_add_subscription(&executor, &ros2_gpio_output_sub, &ros2_gpio_output_msg,
 8002632:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002636:	2300      	movs	r3, #0
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	4b26      	ldr	r3, [pc, #152]	; (80026d4 <task_ros2_function+0x404>)
 800263c:	4a26      	ldr	r2, [pc, #152]	; (80026d8 <task_ros2_function+0x408>)
 800263e:	4927      	ldr	r1, [pc, #156]	; (80026dc <task_ros2_function+0x40c>)
 8002640:	f00c fa6e 	bl	800eb20 <rclc_executor_add_subscription>
	  			  &ros2_gpio_output_callback, ON_NEW_DATA); // ON_NEW_DATA does not work properly
	  rclc_executor_add_subscription(&executor, &ros2_stepper_target_position_sub, &ros2_stepper_target_position_msg,
 8002644:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002648:	2300      	movs	r3, #0
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <task_ros2_function+0x410>)
 800264e:	4a25      	ldr	r2, [pc, #148]	; (80026e4 <task_ros2_function+0x414>)
 8002650:	4925      	ldr	r1, [pc, #148]	; (80026e8 <task_ros2_function+0x418>)
 8002652:	f00c fa65 	bl	800eb20 <rclc_executor_add_subscription>
	 	  			  &ros2_stepper_target_position_callback, ON_NEW_DATA); // ON_NEW_DATA does not work properly

	  rclc_executor_add_timer(&executor, &ros2_gpio_input_timer);
 8002656:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800265a:	4917      	ldr	r1, [pc, #92]	; (80026b8 <task_ros2_function+0x3e8>)
 800265c:	4618      	mov	r0, r3
 800265e:	f00c fa99 	bl	800eb94 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &ros2_gps_timer);
 8002662:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002666:	4916      	ldr	r1, [pc, #88]	; (80026c0 <task_ros2_function+0x3f0>)
 8002668:	4618      	mov	r0, r3
 800266a:	f00c fa93 	bl	800eb94 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &ros2_analog_input_timer);
 800266e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002672:	4915      	ldr	r1, [pc, #84]	; (80026c8 <task_ros2_function+0x3f8>)
 8002674:	4618      	mov	r0, r3
 8002676:	f00c fa8d 	bl	800eb94 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &ros2_stepper_current_position_timer);
 800267a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800267e:	4914      	ldr	r1, [pc, #80]	; (80026d0 <task_ros2_function+0x400>)
 8002680:	4618      	mov	r0, r3
 8002682:	f00c fa87 	bl	800eb94 <rclc_executor_add_timer>



	  // Run executor
	  rclc_executor_spin(&executor);
 8002686:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800268a:	4618      	mov	r0, r3
 800268c:	f00c fc0c 	bl	800eea8 <rclc_executor_spin>

	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 8002690:	2001      	movs	r0, #1
 8002692:	f008 fdf0 	bl	800b276 <osDelay>
 8002696:	e7fb      	b.n	8002690 <task_ros2_function+0x3c0>
 8002698:	3b9aca00 	.word	0x3b9aca00
 800269c:	00000000 	.word	0x00000000
 80026a0:	02faf080 	.word	0x02faf080
 80026a4:	00000000 	.word	0x00000000
 80026a8:	200109c4 	.word	0x200109c4
 80026ac:	0801de98 	.word	0x0801de98
 80026b0:	0801dea4 	.word	0x0801dea4
 80026b4:	08001fd1 	.word	0x08001fd1
 80026b8:	200109f0 	.word	0x200109f0
 80026bc:	08002019 	.word	0x08002019
 80026c0:	20010854 	.word	0x20010854
 80026c4:	080020c9 	.word	0x080020c9
 80026c8:	200109ec 	.word	0x200109ec
 80026cc:	08002125 	.word	0x08002125
 80026d0:	200106a8 	.word	0x200106a8
 80026d4:	080021ad 	.word	0x080021ad
 80026d8:	20010850 	.word	0x20010850
 80026dc:	20010558 	.word	0x20010558
 80026e0:	08002175 	.word	0x08002175
 80026e4:	20010e0c 	.word	0x20010e0c
 80026e8:	20010550 	.word	0x20010550

080026ec <task_gps_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_gps_function */
void task_gps_function(void *argument)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08c      	sub	sp, #48	; 0x30
 80026f0:	af0a      	add	r7, sp, #40	; 0x28
 80026f2:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
    osThreadFlagsWait(TF_GPS_DATA, osFlagsWaitAny, osWaitForever);
 80026f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026f8:	2100      	movs	r1, #0
 80026fa:	2001      	movs	r0, #1
 80026fc:	f008 fd3a 	bl	800b174 <osThreadFlagsWait>
    if(sscanf(gps_buffer, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c,%f", &gps_time, &gps_latitude, &ns, &gps_longitude, &ew, &lock, &sats, &gps_hdop, &gps_alt, &unit, &gps_geoid) >= 1){
 8002700:	4b2d      	ldr	r3, [pc, #180]	; (80027b8 <task_gps_function+0xcc>)
 8002702:	9308      	str	r3, [sp, #32]
 8002704:	4b2d      	ldr	r3, [pc, #180]	; (80027bc <task_gps_function+0xd0>)
 8002706:	9307      	str	r3, [sp, #28]
 8002708:	4b2d      	ldr	r3, [pc, #180]	; (80027c0 <task_gps_function+0xd4>)
 800270a:	9306      	str	r3, [sp, #24]
 800270c:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <task_gps_function+0xd8>)
 800270e:	9305      	str	r3, [sp, #20]
 8002710:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <task_gps_function+0xdc>)
 8002712:	9304      	str	r3, [sp, #16]
 8002714:	4b2d      	ldr	r3, [pc, #180]	; (80027cc <task_gps_function+0xe0>)
 8002716:	9303      	str	r3, [sp, #12]
 8002718:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <task_gps_function+0xe4>)
 800271a:	9302      	str	r3, [sp, #8]
 800271c:	4b2d      	ldr	r3, [pc, #180]	; (80027d4 <task_gps_function+0xe8>)
 800271e:	9301      	str	r3, [sp, #4]
 8002720:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <task_gps_function+0xec>)
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	4b2d      	ldr	r3, [pc, #180]	; (80027dc <task_gps_function+0xf0>)
 8002726:	4a2e      	ldr	r2, [pc, #184]	; (80027e0 <task_gps_function+0xf4>)
 8002728:	492e      	ldr	r1, [pc, #184]	; (80027e4 <task_gps_function+0xf8>)
 800272a:	482f      	ldr	r0, [pc, #188]	; (80027e8 <task_gps_function+0xfc>)
 800272c:	f017 fc1c 	bl	8019f68 <siscanf>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	dd36      	ble.n	80027a4 <task_gps_function+0xb8>
    	gps_latitude = (float) convertDegMinToDecDeg(gps_latitude);
 8002736:	4b29      	ldr	r3, [pc, #164]	; (80027dc <task_gps_function+0xf0>)
 8002738:	edd3 7a00 	vldr	s15, [r3]
 800273c:	eeb0 0a67 	vmov.f32	s0, s15
 8002740:	f7ff fbf2 	bl	8001f28 <convertDegMinToDecDeg>
 8002744:	ec53 2b10 	vmov	r2, r3, d0
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	f7fe fa5c 	bl	8000c08 <__aeabi_d2f>
 8002750:	4603      	mov	r3, r0
 8002752:	4a22      	ldr	r2, [pc, #136]	; (80027dc <task_gps_function+0xf0>)
 8002754:	6013      	str	r3, [r2, #0]
    	gps_longitude = (float) convertDegMinToDecDeg(gps_longitude);
 8002756:	4b1f      	ldr	r3, [pc, #124]	; (80027d4 <task_gps_function+0xe8>)
 8002758:	edd3 7a00 	vldr	s15, [r3]
 800275c:	eeb0 0a67 	vmov.f32	s0, s15
 8002760:	f7ff fbe2 	bl	8001f28 <convertDegMinToDecDeg>
 8002764:	ec53 2b10 	vmov	r2, r3, d0
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	f7fe fa4c 	bl	8000c08 <__aeabi_d2f>
 8002770:	4603      	mov	r3, r0
 8002772:	4a18      	ldr	r2, [pc, #96]	; (80027d4 <task_gps_function+0xe8>)
 8002774:	6013      	str	r3, [r2, #0]
    	if (ns == 'S') {
 8002776:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <task_gps_function+0xec>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b53      	cmp	r3, #83	; 0x53
 800277c:	d107      	bne.n	800278e <task_gps_function+0xa2>
    		gps_latitude = - gps_latitude;
 800277e:	4b17      	ldr	r3, [pc, #92]	; (80027dc <task_gps_function+0xf0>)
 8002780:	edd3 7a00 	vldr	s15, [r3]
 8002784:	eef1 7a67 	vneg.f32	s15, s15
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <task_gps_function+0xf0>)
 800278a:	edc3 7a00 	vstr	s15, [r3]
    	}
    	if (ew = 'W'){
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <task_gps_function+0xe4>)
 8002790:	2257      	movs	r2, #87	; 0x57
 8002792:	701a      	strb	r2, [r3, #0]
    		gps_longitude = - gps_longitude;
 8002794:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <task_gps_function+0xe8>)
 8002796:	edd3 7a00 	vldr	s15, [r3]
 800279a:	eef1 7a67 	vneg.f32	s15, s15
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <task_gps_function+0xe8>)
 80027a0:	edc3 7a00 	vstr	s15, [r3]
    	}
    }
    gps_buffer_index = 0;
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <task_gps_function+0x100>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
    memset(gps_buffer, 0, sizeof(gps_buffer));
 80027aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ae:	2100      	movs	r1, #0
 80027b0:	480d      	ldr	r0, [pc, #52]	; (80027e8 <task_gps_function+0xfc>)
 80027b2:	f017 f80f 	bl	80197d4 <memset>
    osThreadFlagsWait(TF_GPS_DATA, osFlagsWaitAny, osWaitForever);
 80027b6:	e79d      	b.n	80026f4 <task_gps_function+0x8>
 80027b8:	200080ec 	.word	0x200080ec
 80027bc:	20000002 	.word	0x20000002
 80027c0:	200080e8 	.word	0x200080e8
 80027c4:	200080e4 	.word	0x200080e4
 80027c8:	200080f4 	.word	0x200080f4
 80027cc:	200080f0 	.word	0x200080f0
 80027d0:	20000001 	.word	0x20000001
 80027d4:	200080e0 	.word	0x200080e0
 80027d8:	20000000 	.word	0x20000000
 80027dc:	200080dc 	.word	0x200080dc
 80027e0:	200080d8 	.word	0x200080d8
 80027e4:	0801deb0 	.word	0x0801deb0
 80027e8:	200106ac 	.word	0x200106ac
 80027ec:	200080d4 	.word	0x200080d4

080027f0 <task_stepper_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_stepper_function */
void task_stepper_function(void *argument)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_stepper_function */
	uint32_t flags;
	stepperInit(&stepper1);
 80027f8:	482e      	ldr	r0, [pc, #184]	; (80028b4 <task_stepper_function+0xc4>)
 80027fa:	f000 fa0f 	bl	8002c1c <stepperInit>

	stepperSetSpeed(&stepper1, 1);
 80027fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002802:	482c      	ldr	r0, [pc, #176]	; (80028b4 <task_stepper_function+0xc4>)
 8002804:	f000 fa4c 	bl	8002ca0 <stepperSetSpeed>
	__HAL_TIM_SET_AUTORELOAD(&htim3, stepper1.stepInverval);
 8002808:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <task_stepper_function+0xc4>)
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <task_stepper_function+0xc8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	62da      	str	r2, [r3, #44]	; 0x2c
 8002812:	4b28      	ldr	r3, [pc, #160]	; (80028b4 <task_stepper_function+0xc4>)
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	461a      	mov	r2, r3
 8002818:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <task_stepper_function+0xc8>)
 800281a:	60da      	str	r2, [r3, #12]
	stepperSetAcceleration(&stepper1, 250);
 800281c:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80028bc <task_stepper_function+0xcc>
 8002820:	4824      	ldr	r0, [pc, #144]	; (80028b4 <task_stepper_function+0xc4>)
 8002822:	f000 fb05 	bl	8002e30 <stepperSetAcceleration>
	stepperSetMaxSpeed(&stepper1, 500);
 8002826:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80028c0 <task_stepper_function+0xd0>
 800282a:	4822      	ldr	r0, [pc, #136]	; (80028b4 <task_stepper_function+0xc4>)
 800282c:	f000 faa4 	bl	8002d78 <stepperSetMaxSpeed>
	stepperSetAbsoluteTartePosition(&stepper1, 0);
 8002830:	2100      	movs	r1, #0
 8002832:	4820      	ldr	r0, [pc, #128]	; (80028b4 <task_stepper_function+0xc4>)
 8002834:	f000 fb87 	bl	8002f46 <stepperSetAbsoluteTartePosition>
	__HAL_TIM_SET_AUTORELOAD(&htim3, stepper1.stepInverval);
 8002838:	4b1e      	ldr	r3, [pc, #120]	; (80028b4 <task_stepper_function+0xc4>)
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <task_stepper_function+0xc8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	62da      	str	r2, [r3, #44]	; 0x2c
 8002842:	4b1c      	ldr	r3, [pc, #112]	; (80028b4 <task_stepper_function+0xc4>)
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	461a      	mov	r2, r3
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <task_stepper_function+0xc8>)
 800284a:	60da      	str	r2, [r3, #12]
	 HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 800284c:	2100      	movs	r1, #0
 800284e:	481a      	ldr	r0, [pc, #104]	; (80028b8 <task_stepper_function+0xc8>)
 8002850:	f005 fdd2 	bl	80083f8 <HAL_TIM_PWM_Start_IT>
  /* Infinite loop */
  for(;;)
  {

	  flags = osThreadFlagsWait((TF_STEPPER_INT | TF_STEPPER_DATA), osFlagsWaitAny, osWaitForever);
 8002854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002858:	2100      	movs	r1, #0
 800285a:	2003      	movs	r0, #3
 800285c:	f008 fc8a 	bl	800b174 <osThreadFlagsWait>
 8002860:	60f8      	str	r0, [r7, #12]
	  if ((flags & TF_STEPPER_INT) == TF_STEPPER_INT){
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00c      	beq.n	8002886 <task_stepper_function+0x96>
		  stepperComputeNewSpeed(&stepper1);
 800286c:	4811      	ldr	r0, [pc, #68]	; (80028b4 <task_stepper_function+0xc4>)
 800286e:	f000 fb79 	bl	8002f64 <stepperComputeNewSpeed>
		  __HAL_TIM_SET_AUTORELOAD(&htim3, stepper1.stepInverval);
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <task_stepper_function+0xc4>)
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <task_stepper_function+0xc8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	62da      	str	r2, [r3, #44]	; 0x2c
 800287c:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <task_stepper_function+0xc4>)
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	461a      	mov	r2, r3
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <task_stepper_function+0xc8>)
 8002884:	60da      	str	r2, [r3, #12]
	  }

	  if ((flags & TF_STEPPER_DATA) == TF_STEPPER_DATA){
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00c      	beq.n	80028aa <task_stepper_function+0xba>
		  stepperComputeNewSpeed(&stepper1);
 8002890:	4808      	ldr	r0, [pc, #32]	; (80028b4 <task_stepper_function+0xc4>)
 8002892:	f000 fb67 	bl	8002f64 <stepperComputeNewSpeed>
		  __HAL_TIM_SET_AUTORELOAD(&htim3, stepper1.stepInverval);
 8002896:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <task_stepper_function+0xc4>)
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <task_stepper_function+0xc8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	62da      	str	r2, [r3, #44]	; 0x2c
 80028a0:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <task_stepper_function+0xc4>)
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <task_stepper_function+0xc8>)
 80028a8:	60da      	str	r2, [r3, #12]
	  }



    osDelay(1);
 80028aa:	2001      	movs	r0, #1
 80028ac:	f008 fce3 	bl	800b276 <osDelay>
	  flags = osThreadFlagsWait((TF_STEPPER_INT | TF_STEPPER_DATA), osFlagsWaitAny, osWaitForever);
 80028b0:	e7d0      	b.n	8002854 <task_stepper_function+0x64>
 80028b2:	bf00      	nop
 80028b4:	2001067c 	.word	0x2001067c
 80028b8:	20010864 	.word	0x20010864
 80028bc:	437a0000 	.word	0x437a0000
 80028c0:	43fa0000 	.word	0x43fa0000

080028c4 <task_angle_sensor_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_angle_sensor_function */
void task_angle_sensor_function(void *argument)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_angle_sensor_function */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80028cc:	2001      	movs	r0, #1
 80028ce:	f008 fcd2 	bl	800b276 <osDelay>
 80028d2:	e7fb      	b.n	80028cc <task_angle_sensor_function+0x8>

080028d4 <task_analog_input_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_analog_input_function */
void task_analog_input_function(void *argument)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_analog_input_function */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80028dc:	2001      	movs	r0, #1
 80028de:	f008 fcca 	bl	800b276 <osDelay>
 80028e2:	e7fb      	b.n	80028dc <task_analog_input_function+0x8>

080028e4 <task_dac_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_dac_function */
void task_dac_function(void *argument)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_dac_function */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80028ec:	2001      	movs	r0, #1
 80028ee:	f008 fcc2 	bl	800b276 <osDelay>
 80028f2:	e7fb      	b.n	80028ec <task_dac_function+0x8>

080028f4 <task_digital_io_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_digital_io_function */
void task_digital_io_function(void *argument)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_digital_io_function */
	uint16_t button_input = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	  button_input = HAL_GPIO_ReadPin(PB0_GPIO_Port, PB0_Pin);
 8002900:	2101      	movs	r1, #1
 8002902:	480b      	ldr	r0, [pc, #44]	; (8002930 <task_digital_io_function+0x3c>)
 8002904:	f002 fca2 	bl	800524c <HAL_GPIO_ReadPin>
 8002908:	4603      	mov	r3, r0
 800290a:	81fb      	strh	r3, [r7, #14]

	  if (button_input == GPIO_PIN_RESET){
 800290c:	89fb      	ldrh	r3, [r7, #14]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d103      	bne.n	800291a <task_digital_io_function+0x26>
		  gpio_input &= !(1<<0);
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <task_digital_io_function+0x40>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e005      	b.n	8002926 <task_digital_io_function+0x32>
	  }
	  else {
		  gpio_input |= (1<<0);
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <task_digital_io_function+0x40>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	4a04      	ldr	r2, [pc, #16]	; (8002934 <task_digital_io_function+0x40>)
 8002924:	6013      	str	r3, [r2, #0]
	  }
    osDelay(50);
 8002926:	2032      	movs	r0, #50	; 0x32
 8002928:	f008 fca5 	bl	800b276 <osDelay>
	  button_input = HAL_GPIO_ReadPin(PB0_GPIO_Port, PB0_Pin);
 800292c:	e7e8      	b.n	8002900 <task_digital_io_function+0xc>
 800292e:	bf00      	nop
 8002930:	40020000 	.word	0x40020000
 8002934:	20010860 	.word	0x20010860

08002938 <task_main_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_main_function */
void task_main_function(void *argument)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_main_function */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002940:	2001      	movs	r0, #1
 8002942:	f008 fc98 	bl	800b276 <osDelay>
 8002946:	e7fb      	b.n	8002940 <task_main_function+0x8>

08002948 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a04      	ldr	r2, [pc, #16]	; (8002968 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d101      	bne.n	800295e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800295a:	f001 f9a1 	bl	8003ca0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40001400 	.word	0x40001400

0800296c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002970:	b672      	cpsid	i
}
 8002972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002974:	e7fe      	b.n	8002974 <Error_Handler+0x8>
	...

08002978 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002982:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <microros_allocate+0x3c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	461a      	mov	r2, r3
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <microros_allocate+0x3c>)
 8002990:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <microros_allocate+0x40>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4413      	add	r3, r2
 800299c:	461a      	mov	r2, r3
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <microros_allocate+0x40>)
 80029a0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fe fb82 	bl	80010ac <pvPortMallocMicroROS>
 80029a8:	4603      	mov	r3, r0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200080f8 	.word	0x200080f8
 80029b8:	200080fc 	.word	0x200080fc

080029bc <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00c      	beq.n	80029e6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7fe fc8b 	bl	80012e8 <getBlockSize>
 80029d2:	4603      	mov	r3, r0
 80029d4:	4a06      	ldr	r2, [pc, #24]	; (80029f0 <microros_deallocate+0x34>)
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <microros_deallocate+0x34>)
 80029de:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7fe fc27 	bl	8001234 <vPortFreeMicroROS>
  }
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	200080fc 	.word	0x200080fc

080029f4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002a00:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <microros_reallocate+0x64>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	4413      	add	r3, r2
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <microros_reallocate+0x64>)
 8002a0e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <microros_reallocate+0x68>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	4413      	add	r3, r2
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <microros_reallocate+0x68>)
 8002a1e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d104      	bne.n	8002a30 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002a26:	68b8      	ldr	r0, [r7, #8]
 8002a28:	f7fe fb40 	bl	80010ac <pvPortMallocMicroROS>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	e00e      	b.n	8002a4e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f7fe fc59 	bl	80012e8 <getBlockSize>
 8002a36:	4603      	mov	r3, r0
 8002a38:	4a08      	ldr	r2, [pc, #32]	; (8002a5c <microros_reallocate+0x68>)
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <microros_reallocate+0x68>)
 8002a42:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f7fe fc6c 	bl	8001324 <pvPortReallocMicroROS>
 8002a4c:	4603      	mov	r3, r0
  }
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200080f8 	.word	0x200080f8
 8002a5c:	200080fc 	.word	0x200080fc

08002a60 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	fb02 f303 	mul.w	r3, r2, r3
 8002a74:	4a0c      	ldr	r2, [pc, #48]	; (8002aa8 <microros_zero_allocate+0x48>)
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	4413      	add	r3, r2
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <microros_zero_allocate+0x48>)
 8002a7e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	fb02 f303 	mul.w	r3, r2, r3
 8002a88:	4a08      	ldr	r2, [pc, #32]	; (8002aac <microros_zero_allocate+0x4c>)
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	461a      	mov	r2, r3
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <microros_zero_allocate+0x4c>)
 8002a92:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f7fe fc7e 	bl	8001398 <pvPortCallocMicroROS>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	200080f8 	.word	0x200080f8
 8002aac:	200080fc 	.word	0x200080fc

08002ab0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002ab0:	b5b0      	push	{r4, r5, r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002ac0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ac4:	a320      	add	r3, pc, #128	; (adr r3, 8002b48 <UTILS_NanosecondsToTimespec+0x98>)
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	f7fe f8ed 	bl	8000ca8 <__aeabi_ldivmod>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002ad8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002adc:	a31a      	add	r3, pc, #104	; (adr r3, 8002b48 <UTILS_NanosecondsToTimespec+0x98>)
 8002ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae2:	f7fe f8e1 	bl	8000ca8 <__aeabi_ldivmod>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	da1f      	bge.n	8002b32 <UTILS_NanosecondsToTimespec+0x82>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <UTILS_NanosecondsToTimespec+0x90>)
 8002af8:	fb82 1203 	smull	r1, r2, r2, r3
 8002afc:	1712      	asrs	r2, r2, #28
 8002afe:	17db      	asrs	r3, r3, #31
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	3301      	adds	r3, #1
 8002b04:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002b14:	1a84      	subs	r4, r0, r2
 8002b16:	eb61 0503 	sbc.w	r5, r1, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	e9c3 4500 	strd	r4, r5, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	4907      	ldr	r1, [pc, #28]	; (8002b44 <UTILS_NanosecondsToTimespec+0x94>)
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	441a      	add	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	609a      	str	r2, [r3, #8]
    }
}
 8002b32:	bf00      	nop
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	f3af 8000 	nop.w
 8002b40:	44b82fa1 	.word	0x44b82fa1
 8002b44:	3b9aca00 	.word	0x3b9aca00
 8002b48:	3b9aca00 	.word	0x3b9aca00
 8002b4c:	00000000 	.word	0x00000000

08002b50 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002b50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
    TimeOut_t xCurrentTime = { 0 };
 8002b5c:	f107 0308 	add.w	r3, r7, #8
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002b72:	f107 0308 	add.w	r3, r7, #8
 8002b76:	4618      	mov	r0, r3
 8002b78:	f009 fe30 	bl	800c7dc <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	2200      	movs	r2, #0
 8002b90:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	461a      	mov	r2, r3
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ba0:	1884      	adds	r4, r0, r2
 8002ba2:	eb41 0503 	adc.w	r5, r1, r3
 8002ba6:	e9c7 4504 	strd	r4, r5, [r7, #16]

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002baa:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002bae:	4622      	mov	r2, r4
 8002bb0:	462b      	mov	r3, r5
 8002bb2:	f04f 0000 	mov.w	r0, #0
 8002bb6:	f04f 0100 	mov.w	r1, #0
 8002bba:	0159      	lsls	r1, r3, #5
 8002bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc0:	0150      	lsls	r0, r2, #5
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	1b12      	subs	r2, r2, r4
 8002bc8:	eb63 0305 	sbc.w	r3, r3, r5
 8002bcc:	f04f 0000 	mov.w	r0, #0
 8002bd0:	f04f 0100 	mov.w	r1, #0
 8002bd4:	0259      	lsls	r1, r3, #9
 8002bd6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002bda:	0250      	lsls	r0, r2, #9
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	1912      	adds	r2, r2, r4
 8002be2:	eb45 0303 	adc.w	r3, r5, r3
 8002be6:	f04f 0000 	mov.w	r0, #0
 8002bea:	f04f 0100 	mov.w	r1, #0
 8002bee:	0199      	lsls	r1, r3, #6
 8002bf0:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8002bf4:	0190      	lsls	r0, r2, #6
 8002bf6:	1a80      	subs	r0, r0, r2
 8002bf8:	eb61 0103 	sbc.w	r1, r1, r3
 8002bfc:	eb10 0804 	adds.w	r8, r0, r4
 8002c00:	eb41 0905 	adc.w	r9, r1, r5
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	4640      	mov	r0, r8
 8002c08:	4649      	mov	r1, r9
 8002c0a:	f7ff ff51 	bl	8002ab0 <UTILS_NanosecondsToTimespec>

    return 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002c1c <stepperInit>:
#include "stepper.h"


void stepperInit(stepper_t* stepper){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	stepper->currentPos = 0;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
	stepper->targetPos = 0;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	605a      	str	r2, [r3, #4]
	stepper->speed = 0.0;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
	stepper->max_speed = 2000.0;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a16      	ldr	r2, [pc, #88]	; (8002c94 <stepperInit+0x78>)
 8002c3c:	60da      	str	r2, [r3, #12]
	stepper->acceleration = 0.0;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	611a      	str	r2, [r3, #16]
	stepper->stepInverval = 0;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	615a      	str	r2, [r3, #20]
	stepper->n = 0;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	619a      	str	r2, [r3, #24]
	stepper->c0 = 0.0;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	61da      	str	r2, [r3, #28]
	stepper->cn = 0.0;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	621a      	str	r2, [r3, #32]
	stepper->cmin = 1.0;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(STEPPER_EN_GPIO_Port, STEPPER_EN_Pin, GPIO_PIN_RESET);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2180      	movs	r1, #128	; 0x80
 8002c6e:	480a      	ldr	r0, [pc, #40]	; (8002c98 <stepperInit+0x7c>)
 8002c70:	f002 fb04 	bl	800527c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_SET);
 8002c74:	2201      	movs	r2, #1
 8002c76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c7a:	4807      	ldr	r0, [pc, #28]	; (8002c98 <stepperInit+0x7c>)
 8002c7c:	f002 fafe 	bl	800527c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_SET);
 8002c80:	2201      	movs	r2, #1
 8002c82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c86:	4804      	ldr	r0, [pc, #16]	; (8002c98 <stepperInit+0x7c>)
 8002c88:	f002 faf8 	bl	800527c <HAL_GPIO_WritePin>
}
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	44fa0000 	.word	0x44fa0000
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	00000000 	.word	0x00000000

08002ca0 <stepperSetSpeed>:

void stepperSetSpeed(stepper_t* stepper, float speed){
 8002ca0:	b5b0      	push	{r4, r5, r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	ed87 0a00 	vstr	s0, [r7]
	if (speed == stepper->speed) {
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cb2:	ed97 7a00 	vldr	s14, [r7]
 8002cb6:	eeb4 7a67 	vcmp.f32	s14, s15
 8002cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cbe:	d053      	beq.n	8002d68 <stepperSetSpeed+0xc8>
		return;
	}
	if (speed < -stepper->max_speed){
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cc6:	eef1 7a67 	vneg.f32	s15, s15
 8002cca:	ed97 7a00 	vldr	s14, [r7]
 8002cce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd6:	d507      	bpl.n	8002ce8 <stepperSetSpeed+0x48>
		speed = -stepper->max_speed;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cde:	eef1 7a67 	vneg.f32	s15, s15
 8002ce2:	edc7 7a00 	vstr	s15, [r7]
 8002ce6:	e00c      	b.n	8002d02 <stepperSetSpeed+0x62>
	}
	else if (speed > stepper->max_speed) {
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cee:	ed97 7a00 	vldr	s14, [r7]
 8002cf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfa:	dd02      	ble.n	8002d02 <stepperSetSpeed+0x62>
		speed = stepper->max_speed;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	603b      	str	r3, [r7, #0]
	}

	if (speed == 0.0){
 8002d02:	edd7 7a00 	vldr	s15, [r7]
 8002d06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d0e:	d103      	bne.n	8002d18 <stepperSetSpeed+0x78>
		stepper->stepInverval = 0;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	615a      	str	r2, [r3, #20]
 8002d16:	e023      	b.n	8002d60 <stepperSetSpeed+0xc0>
	}
	else {
		stepper->stepInverval = fabs(1000000.0/speed);
 8002d18:	6838      	ldr	r0, [r7, #0]
 8002d1a:	f7fd fc25 	bl	8000568 <__aeabi_f2d>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	a113      	add	r1, pc, #76	; (adr r1, 8002d70 <stepperSetSpeed+0xd0>)
 8002d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d28:	f7fd fda0 	bl	800086c <__aeabi_ddiv>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4614      	mov	r4, r2
 8002d32:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002d36:	4620      	mov	r0, r4
 8002d38:	4629      	mov	r1, r5
 8002d3a:	f7fd ff1d 	bl	8000b78 <__aeabi_d2iz>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	615a      	str	r2, [r3, #20]
		stepper->direction = (speed>0.0)? DIRECTION_CW : DIRECTION_CCW;
 8002d44:	edd7 7a00 	vldr	s15, [r7]
 8002d48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d50:	bfcc      	ite	gt
 8002d52:	2301      	movgt	r3, #1
 8002d54:	2300      	movle	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
	stepper->speed = speed;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	609a      	str	r2, [r3, #8]
 8002d66:	e000      	b.n	8002d6a <stepperSetSpeed+0xca>
		return;
 8002d68:	bf00      	nop
}
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d70:	00000000 	.word	0x00000000
 8002d74:	412e8480 	.word	0x412e8480

08002d78 <stepperSetMaxSpeed>:
float stepperGetSpeed(stepper_t* stepper){
	return stepper->speed;
}


void stepperSetMaxSpeed(stepper_t* stepper, float speed){
 8002d78:	b5b0      	push	{r4, r5, r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	ed87 0a00 	vstr	s0, [r7]
	if (speed < 0.0){
 8002d84:	edd7 7a00 	vldr	s15, [r7]
 8002d88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d90:	d505      	bpl.n	8002d9e <stepperSetMaxSpeed+0x26>
		speed = -speed;
 8002d92:	edd7 7a00 	vldr	s15, [r7]
 8002d96:	eef1 7a67 	vneg.f32	s15, s15
 8002d9a:	edc7 7a00 	vstr	s15, [r7]
	}
	if (stepper->max_speed != speed){
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002da4:	ed97 7a00 	vldr	s14, [r7]
 8002da8:	eeb4 7a67 	vcmp.f32	s14, s15
 8002dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db0:	d038      	beq.n	8002e24 <stepperSetMaxSpeed+0xac>
		stepper->max_speed = speed;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	60da      	str	r2, [r3, #12]
		stepper->cmin = 1000000.0/speed;
 8002db8:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002e2c <stepperSetMaxSpeed+0xb4>
 8002dbc:	ed97 7a00 	vldr	s14, [r7]
 8002dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		if (stepper->n > 0){
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	dd28      	ble.n	8002e24 <stepperSetMaxSpeed+0xac>
			stepper->n = (long)((stepper->speed * stepper->speed)/ (2.0 * stepper->acceleration));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	ed93 7a02 	vldr	s14, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de2:	ee17 0a90 	vmov	r0, s15
 8002de6:	f7fd fbbf 	bl	8000568 <__aeabi_f2d>
 8002dea:	4604      	mov	r4, r0
 8002dec:	460d      	mov	r5, r1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd fbb8 	bl	8000568 <__aeabi_f2d>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	f7fd fa56 	bl	80002ac <__adddf3>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4620      	mov	r0, r4
 8002e06:	4629      	mov	r1, r5
 8002e08:	f7fd fd30 	bl	800086c <__aeabi_ddiv>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4610      	mov	r0, r2
 8002e12:	4619      	mov	r1, r3
 8002e14:	f7fd feb0 	bl	8000b78 <__aeabi_d2iz>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	619a      	str	r2, [r3, #24]
			stepperComputeNewSpeed(stepper);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f8a0 	bl	8002f64 <stepperComputeNewSpeed>
		}
	}

}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e2c:	49742400 	.word	0x49742400

08002e30 <stepperSetAcceleration>:

float stepperGetMaxSpeed(stepper_t* stepper){
	return stepper->max_speed;
}

void stepperSetAcceleration(stepper_t* stepper, float acceleration){
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	ed87 0a00 	vstr	s0, [r7]
	if (acceleration == 0.0)
 8002e3c:	edd7 7a00 	vldr	s15, [r7]
 8002e40:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e48:	d060      	beq.n	8002f0c <stepperSetAcceleration+0xdc>
		return;
	if (acceleration < 0.0){
 8002e4a:	edd7 7a00 	vldr	s15, [r7]
 8002e4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e56:	d505      	bpl.n	8002e64 <stepperSetAcceleration+0x34>
		acceleration = - acceleration;
 8002e58:	edd7 7a00 	vldr	s15, [r7]
 8002e5c:	eef1 7a67 	vneg.f32	s15, s15
 8002e60:	edc7 7a00 	vstr	s15, [r7]
	}
	if (stepper->acceleration != acceleration){
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e6a:	ed97 7a00 	vldr	s14, [r7]
 8002e6e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e76:	d04a      	beq.n	8002f0e <stepperSetAcceleration+0xde>
		stepper->n = stepper->n * (stepper->acceleration/acceleration);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	ee07 3a90 	vmov	s15, r3
 8002e80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	ed93 6a04 	vldr	s12, [r3, #16]
 8002e8a:	edd7 6a00 	vldr	s13, [r7]
 8002e8e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e9a:	ee17 2a90 	vmov	r2, s15
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	619a      	str	r2, [r3, #24]
		stepper->c0 = 0.676* sqrt(2.0 / acceleration) * 1000000.0;
 8002ea2:	6838      	ldr	r0, [r7, #0]
 8002ea4:	f7fd fb60 	bl	8000568 <__aeabi_f2d>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	f04f 0000 	mov.w	r0, #0
 8002eb0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002eb4:	f7fd fcda 	bl	800086c <__aeabi_ddiv>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	ec43 2b17 	vmov	d7, r2, r3
 8002ec0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ec4:	eef0 0a67 	vmov.f32	s1, s15
 8002ec8:	f01a fcec 	bl	801d8a4 <sqrt>
 8002ecc:	ec51 0b10 	vmov	r0, r1, d0
 8002ed0:	a311      	add	r3, pc, #68	; (adr r3, 8002f18 <stepperSetAcceleration+0xe8>)
 8002ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed6:	f7fd fb9f 	bl	8000618 <__aeabi_dmul>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4610      	mov	r0, r2
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	a30f      	add	r3, pc, #60	; (adr r3, 8002f20 <stepperSetAcceleration+0xf0>)
 8002ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee8:	f7fd fb96 	bl	8000618 <__aeabi_dmul>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f7fd fe88 	bl	8000c08 <__aeabi_d2f>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	61da      	str	r2, [r3, #28]
		stepper->acceleration = acceleration;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	611a      	str	r2, [r3, #16]
		stepperComputeNewSpeed(stepper);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f82d 	bl	8002f64 <stepperComputeNewSpeed>
 8002f0a:	e000      	b.n	8002f0e <stepperSetAcceleration+0xde>
		return;
 8002f0c:	bf00      	nop
	}

}
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	f3af 8000 	nop.w
 8002f18:	c083126f 	.word	0xc083126f
 8002f1c:	3fe5a1ca 	.word	0x3fe5a1ca
 8002f20:	00000000 	.word	0x00000000
 8002f24:	412e8480 	.word	0x412e8480

08002f28 <stepperGetDistanceToGo>:

long stepperGetDistanceToGo(stepper_t* stepper){
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	return stepper->targetPos - stepper->currentPos;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	1ad3      	subs	r3, r2, r3
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <stepperSetAbsoluteTartePosition>:

long stepperGetTargetPosition(stepper_t* stepper){
	return stepper->targetPos;
}

void stepperSetAbsoluteTartePosition(stepper_t* stepper, long absolutePosition){
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
	stepper->targetPos = absolutePosition;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	605a      	str	r2, [r3, #4]
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <stepperComputeNewSpeed>:

void stepperSetRelativeTargetPosition(stepper_t* stepper, long relativePosition){
	stepper->targetPos = stepperGetTargetPosition(stepper) + relativePosition;
}

void stepperComputeNewSpeed(stepper_t* stepper){
 8002f64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
	long distanceTo = stepperGetDistanceToGo(stepper);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ffda 	bl	8002f28 <stepperGetDistanceToGo>
 8002f74:	60f8      	str	r0, [r7, #12]
	long stepsToStop = (long)((stepper->speed * stepper->speed) / (2.0 * stepper->acceleration));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f86:	ee17 0a90 	vmov	r0, s15
 8002f8a:	f7fd faed 	bl	8000568 <__aeabi_f2d>
 8002f8e:	4604      	mov	r4, r0
 8002f90:	460d      	mov	r5, r1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd fae6 	bl	8000568 <__aeabi_f2d>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	f7fd f984 	bl	80002ac <__adddf3>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4620      	mov	r0, r4
 8002faa:	4629      	mov	r1, r5
 8002fac:	f7fd fc5e 	bl	800086c <__aeabi_ddiv>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	f7fd fdde 	bl	8000b78 <__aeabi_d2iz>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	60bb      	str	r3, [r7, #8]

	if (distanceTo == 0 && stepsToStop <=1)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10d      	bne.n	8002fe2 <stepperComputeNewSpeed+0x7e>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	dc0a      	bgt.n	8002fe2 <stepperComputeNewSpeed+0x7e>
	{
		stepper->stepInverval = 0;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	615a      	str	r2, [r3, #20]
		stepper->speed = 0.0;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
		stepper->n = 0;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	619a      	str	r2, [r3, #24]
		return;
 8002fe0:	e0d8      	b.n	8003194 <stepperComputeNewSpeed+0x230>
	}
	if (distanceTo > 0) {
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	dd24      	ble.n	8003032 <stepperComputeNewSpeed+0xce>
		if (stepper->n > 0){
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	dd0d      	ble.n	800300c <stepperComputeNewSpeed+0xa8>
			if ((stepsToStop >= distanceTo) || (stepper->direction == DIRECTION_CCW)){
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	da04      	bge.n	8003002 <stepperComputeNewSpeed+0x9e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d140      	bne.n	8003084 <stepperComputeNewSpeed+0x120>
				stepper->n = -stepsToStop;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	425a      	negs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	619a      	str	r2, [r3, #24]
 800300a:	e03b      	b.n	8003084 <stepperComputeNewSpeed+0x120>
			}

		}
		else if (stepper->n < 0 ){
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	2b00      	cmp	r3, #0
 8003012:	da37      	bge.n	8003084 <stepperComputeNewSpeed+0x120>
			if ((stepsToStop < distanceTo) && stepper->direction == DIRECTION_CW){
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	429a      	cmp	r2, r3
 800301a:	da33      	bge.n	8003084 <stepperComputeNewSpeed+0x120>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003022:	2b01      	cmp	r3, #1
 8003024:	d12e      	bne.n	8003084 <stepperComputeNewSpeed+0x120>
				stepper->n = - stepper->n;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	425a      	negs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	619a      	str	r2, [r3, #24]
 8003030:	e028      	b.n	8003084 <stepperComputeNewSpeed+0x120>
			}
		}
	}
	else if (distanceTo < 0) {
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	da25      	bge.n	8003084 <stepperComputeNewSpeed+0x120>
		if (stepper->n > 0){
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	dd0e      	ble.n	800305e <stepperComputeNewSpeed+0xfa>
			if ((stepsToStop >= -distanceTo) || stepper->direction == DIRECTION_CW){
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	425b      	negs	r3, r3
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	429a      	cmp	r2, r3
 8003048:	da04      	bge.n	8003054 <stepperComputeNewSpeed+0xf0>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003050:	2b01      	cmp	r3, #1
 8003052:	d117      	bne.n	8003084 <stepperComputeNewSpeed+0x120>
				stepper->n = -stepsToStop;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	425a      	negs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	619a      	str	r2, [r3, #24]
 800305c:	e012      	b.n	8003084 <stepperComputeNewSpeed+0x120>
			}
		}
		else if (stepper->n < 0){
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	da0e      	bge.n	8003084 <stepperComputeNewSpeed+0x120>
			if ((stepsToStop < - distanceTo) && stepper->direction == DIRECTION_CCW){
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	425b      	negs	r3, r3
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	429a      	cmp	r2, r3
 800306e:	da09      	bge.n	8003084 <stepperComputeNewSpeed+0x120>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003076:	2b00      	cmp	r3, #0
 8003078:	d104      	bne.n	8003084 <stepperComputeNewSpeed+0x120>
				stepper->n = -stepper->n;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	425a      	negs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	619a      	str	r2, [r3, #24]
			}
		}
	}
	if (stepper->n == 0){
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10e      	bne.n	80030aa <stepperComputeNewSpeed+0x146>
		stepper->cn = stepper->c0;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69da      	ldr	r2, [r3, #28]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	621a      	str	r2, [r3, #32]
		stepper->direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	bfcc      	ite	gt
 800309a:	2301      	movgt	r3, #1
 800309c:	2300      	movle	r3, #0
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80030a8:	e04f      	b.n	800314a <stepperComputeNewSpeed+0x1e6>
	}
	else {
		stepper->cn = stepper->cn - ((2.0 * stepper->cn)/((4.0* stepper->n)+1));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd fa5a 	bl	8000568 <__aeabi_f2d>
 80030b4:	4604      	mov	r4, r0
 80030b6:	460d      	mov	r5, r1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fd fa53 	bl	8000568 <__aeabi_f2d>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	f7fd f8f1 	bl	80002ac <__adddf3>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4690      	mov	r8, r2
 80030d0:	4699      	mov	r9, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd fa34 	bl	8000544 <__aeabi_i2d>
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	4b2e      	ldr	r3, [pc, #184]	; (800319c <stepperComputeNewSpeed+0x238>)
 80030e2:	f7fd fa99 	bl	8000618 <__aeabi_dmul>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4610      	mov	r0, r2
 80030ec:	4619      	mov	r1, r3
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <stepperComputeNewSpeed+0x23c>)
 80030f4:	f7fd f8da 	bl	80002ac <__adddf3>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4640      	mov	r0, r8
 80030fe:	4649      	mov	r1, r9
 8003100:	f7fd fbb4 	bl	800086c <__aeabi_ddiv>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4620      	mov	r0, r4
 800310a:	4629      	mov	r1, r5
 800310c:	f7fd f8cc 	bl	80002a8 <__aeabi_dsub>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4610      	mov	r0, r2
 8003116:	4619      	mov	r1, r3
 8003118:	f7fd fd76 	bl	8000c08 <__aeabi_d2f>
 800311c:	4602      	mov	r2, r0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	621a      	str	r2, [r3, #32]
		if (stepper->cn > stepper->cmin){
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	ed93 7a08 	vldr	s14, [r3, #32]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800312e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003136:	dd04      	ble.n	8003142 <stepperComputeNewSpeed+0x1de>
			stepper->cn = stepper->cn;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a1a      	ldr	r2, [r3, #32]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	621a      	str	r2, [r3, #32]
 8003140:	e003      	b.n	800314a <stepperComputeNewSpeed+0x1e6>
		}
		else {
			stepper->cn = stepper->cmin;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	621a      	str	r2, [r3, #32]
		}

	}
	stepper->n++;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	619a      	str	r2, [r3, #24]
	stepper->stepInverval = stepper->cn;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	edd3 7a08 	vldr	s15, [r3, #32]
 800315a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800315e:	ee17 2a90 	vmov	r2, s15
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	615a      	str	r2, [r3, #20]
	stepper->speed = 1000000.0/stepper->cn;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	ed93 7a08 	vldr	s14, [r3, #32]
 800316c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80031a4 <stepperComputeNewSpeed+0x240>
 8003170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	edc3 7a02 	vstr	s15, [r3, #8]
	if (stepper->direction == DIRECTION_CCW){
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003180:	2b00      	cmp	r3, #0
 8003182:	d107      	bne.n	8003194 <stepperComputeNewSpeed+0x230>
		stepper->speed = -stepper->speed;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	edd3 7a02 	vldr	s15, [r3, #8]
 800318a:	eef1 7a67 	vneg.f32	s15, s15
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	edc3 7a02 	vstr	s15, [r3, #8]
	}
}
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800319c:	40100000 	.word	0x40100000
 80031a0:	3ff00000 	.word	0x3ff00000
 80031a4:	49742400 	.word	0x49742400

080031a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	607b      	str	r3, [r7, #4]
 80031b2:	4b12      	ldr	r3, [pc, #72]	; (80031fc <HAL_MspInit+0x54>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	4a11      	ldr	r2, [pc, #68]	; (80031fc <HAL_MspInit+0x54>)
 80031b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031bc:	6453      	str	r3, [r2, #68]	; 0x44
 80031be:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <HAL_MspInit+0x54>)
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_MspInit+0x54>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <HAL_MspInit+0x54>)
 80031d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d8:	6413      	str	r3, [r2, #64]	; 0x40
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <HAL_MspInit+0x54>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031e6:	2200      	movs	r2, #0
 80031e8:	210f      	movs	r1, #15
 80031ea:	f06f 0001 	mvn.w	r0, #1
 80031ee:	f001 fa65 	bl	80046bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800

08003200 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08a      	sub	sp, #40	; 0x28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	60da      	str	r2, [r3, #12]
 8003216:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a2f      	ldr	r2, [pc, #188]	; (80032dc <HAL_ADC_MspInit+0xdc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d157      	bne.n	80032d2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	4b2e      	ldr	r3, [pc, #184]	; (80032e0 <HAL_ADC_MspInit+0xe0>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	4a2d      	ldr	r2, [pc, #180]	; (80032e0 <HAL_ADC_MspInit+0xe0>)
 800322c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003230:	6453      	str	r3, [r2, #68]	; 0x44
 8003232:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <HAL_ADC_MspInit+0xe0>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	4b27      	ldr	r3, [pc, #156]	; (80032e0 <HAL_ADC_MspInit+0xe0>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	4a26      	ldr	r2, [pc, #152]	; (80032e0 <HAL_ADC_MspInit+0xe0>)
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	6313      	str	r3, [r2, #48]	; 0x30
 800324e:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <HAL_ADC_MspInit+0xe0>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800325a:	2330      	movs	r3, #48	; 0x30
 800325c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800325e:	2303      	movs	r3, #3
 8003260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003266:	f107 0314 	add.w	r3, r7, #20
 800326a:	4619      	mov	r1, r3
 800326c:	481d      	ldr	r0, [pc, #116]	; (80032e4 <HAL_ADC_MspInit+0xe4>)
 800326e:	f001 fe51 	bl	8004f14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003272:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <HAL_ADC_MspInit+0xe8>)
 8003274:	4a1d      	ldr	r2, [pc, #116]	; (80032ec <HAL_ADC_MspInit+0xec>)
 8003276:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003278:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <HAL_ADC_MspInit+0xe8>)
 800327a:	2200      	movs	r2, #0
 800327c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800327e:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <HAL_ADC_MspInit+0xe8>)
 8003280:	2200      	movs	r2, #0
 8003282:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003284:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <HAL_ADC_MspInit+0xe8>)
 8003286:	2200      	movs	r2, #0
 8003288:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800328a:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <HAL_ADC_MspInit+0xe8>)
 800328c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003290:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_ADC_MspInit+0xe8>)
 8003294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003298:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800329a:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <HAL_ADC_MspInit+0xe8>)
 800329c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <HAL_ADC_MspInit+0xe8>)
 80032a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80032aa:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <HAL_ADC_MspInit+0xe8>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032b0:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <HAL_ADC_MspInit+0xe8>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80032b6:	480c      	ldr	r0, [pc, #48]	; (80032e8 <HAL_ADC_MspInit+0xe8>)
 80032b8:	f001 fa2a 	bl	8004710 <HAL_DMA_Init>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80032c2:	f7ff fb53 	bl	800296c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a07      	ldr	r2, [pc, #28]	; (80032e8 <HAL_ADC_MspInit+0xe8>)
 80032ca:	639a      	str	r2, [r3, #56]	; 0x38
 80032cc:	4a06      	ldr	r2, [pc, #24]	; (80032e8 <HAL_ADC_MspInit+0xe8>)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032d2:	bf00      	nop
 80032d4:	3728      	adds	r7, #40	; 0x28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40012000 	.word	0x40012000
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40020800 	.word	0x40020800
 80032e8:	20010964 	.word	0x20010964
 80032ec:	40026410 	.word	0x40026410

080032f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	; 0x28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a19      	ldr	r2, [pc, #100]	; (8003374 <HAL_I2C_MspInit+0x84>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d12c      	bne.n	800336c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	4b18      	ldr	r3, [pc, #96]	; (8003378 <HAL_I2C_MspInit+0x88>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	4a17      	ldr	r2, [pc, #92]	; (8003378 <HAL_I2C_MspInit+0x88>)
 800331c:	f043 0302 	orr.w	r3, r3, #2
 8003320:	6313      	str	r3, [r2, #48]	; 0x30
 8003322:	4b15      	ldr	r3, [pc, #84]	; (8003378 <HAL_I2C_MspInit+0x88>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800332e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003334:	2312      	movs	r3, #18
 8003336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003338:	2301      	movs	r3, #1
 800333a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333c:	2300      	movs	r3, #0
 800333e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003340:	2304      	movs	r3, #4
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003344:	f107 0314 	add.w	r3, r7, #20
 8003348:	4619      	mov	r1, r3
 800334a:	480c      	ldr	r0, [pc, #48]	; (800337c <HAL_I2C_MspInit+0x8c>)
 800334c:	f001 fde2 	bl	8004f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003350:	2300      	movs	r3, #0
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	4b08      	ldr	r3, [pc, #32]	; (8003378 <HAL_I2C_MspInit+0x88>)
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	4a07      	ldr	r2, [pc, #28]	; (8003378 <HAL_I2C_MspInit+0x88>)
 800335a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800335e:	6413      	str	r3, [r2, #64]	; 0x40
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_I2C_MspInit+0x88>)
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800336c:	bf00      	nop
 800336e:	3728      	adds	r7, #40	; 0x28
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40005400 	.word	0x40005400
 8003378:	40023800 	.word	0x40023800
 800337c:	40020400 	.word	0x40020400

08003380 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08e      	sub	sp, #56	; 0x38
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	60da      	str	r2, [r3, #12]
 8003396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003398:	f107 0314 	add.w	r3, r7, #20
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a31      	ldr	r2, [pc, #196]	; (8003470 <HAL_I2S_MspInit+0xf0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d15a      	bne.n	8003466 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80033b0:	2301      	movs	r3, #1
 80033b2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80033b4:	23c0      	movs	r3, #192	; 0xc0
 80033b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80033b8:	2302      	movs	r3, #2
 80033ba:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033bc:	f107 0314 	add.w	r3, r7, #20
 80033c0:	4618      	mov	r0, r3
 80033c2:	f004 fd37 	bl	8007e34 <HAL_RCCEx_PeriphCLKConfig>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80033cc:	f7ff face 	bl	800296c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80033d0:	2300      	movs	r3, #0
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	4b27      	ldr	r3, [pc, #156]	; (8003474 <HAL_I2S_MspInit+0xf4>)
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	4a26      	ldr	r2, [pc, #152]	; (8003474 <HAL_I2S_MspInit+0xf4>)
 80033da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033de:	6413      	str	r3, [r2, #64]	; 0x40
 80033e0:	4b24      	ldr	r3, [pc, #144]	; (8003474 <HAL_I2S_MspInit+0xf4>)
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	4b20      	ldr	r3, [pc, #128]	; (8003474 <HAL_I2S_MspInit+0xf4>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	4a1f      	ldr	r2, [pc, #124]	; (8003474 <HAL_I2S_MspInit+0xf4>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	6313      	str	r3, [r2, #48]	; 0x30
 80033fc:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <HAL_I2S_MspInit+0xf4>)
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003408:	2300      	movs	r3, #0
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	4b19      	ldr	r3, [pc, #100]	; (8003474 <HAL_I2S_MspInit+0xf4>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	4a18      	ldr	r2, [pc, #96]	; (8003474 <HAL_I2S_MspInit+0xf4>)
 8003412:	f043 0304 	orr.w	r3, r3, #4
 8003416:	6313      	str	r3, [r2, #48]	; 0x30
 8003418:	4b16      	ldr	r3, [pc, #88]	; (8003474 <HAL_I2S_MspInit+0xf4>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003424:	2310      	movs	r3, #16
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003428:	2302      	movs	r3, #2
 800342a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003430:	2300      	movs	r3, #0
 8003432:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003434:	2306      	movs	r3, #6
 8003436:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800343c:	4619      	mov	r1, r3
 800343e:	480e      	ldr	r0, [pc, #56]	; (8003478 <HAL_I2S_MspInit+0xf8>)
 8003440:	f001 fd68 	bl	8004f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003444:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344a:	2302      	movs	r3, #2
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	2300      	movs	r3, #0
 8003450:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003452:	2300      	movs	r3, #0
 8003454:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003456:	2306      	movs	r3, #6
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800345a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800345e:	4619      	mov	r1, r3
 8003460:	4806      	ldr	r0, [pc, #24]	; (800347c <HAL_I2S_MspInit+0xfc>)
 8003462:	f001 fd57 	bl	8004f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003466:	bf00      	nop
 8003468:	3738      	adds	r7, #56	; 0x38
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40003c00 	.word	0x40003c00
 8003474:	40023800 	.word	0x40023800
 8003478:	40020000 	.word	0x40020000
 800347c:	40020800 	.word	0x40020800

08003480 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08a      	sub	sp, #40	; 0x28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003488:	f107 0314 	add.w	r3, r7, #20
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a19      	ldr	r2, [pc, #100]	; (8003504 <HAL_SPI_MspInit+0x84>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d12b      	bne.n	80034fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	4b18      	ldr	r3, [pc, #96]	; (8003508 <HAL_SPI_MspInit+0x88>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	4a17      	ldr	r2, [pc, #92]	; (8003508 <HAL_SPI_MspInit+0x88>)
 80034ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034b0:	6453      	str	r3, [r2, #68]	; 0x44
 80034b2:	4b15      	ldr	r3, [pc, #84]	; (8003508 <HAL_SPI_MspInit+0x88>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <HAL_SPI_MspInit+0x88>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a10      	ldr	r2, [pc, #64]	; (8003508 <HAL_SPI_MspInit+0x88>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <HAL_SPI_MspInit+0x88>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80034da:	23e0      	movs	r3, #224	; 0xe0
 80034dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034de:	2302      	movs	r3, #2
 80034e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e6:	2300      	movs	r3, #0
 80034e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034ea:	2305      	movs	r3, #5
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ee:	f107 0314 	add.w	r3, r7, #20
 80034f2:	4619      	mov	r1, r3
 80034f4:	4805      	ldr	r0, [pc, #20]	; (800350c <HAL_SPI_MspInit+0x8c>)
 80034f6:	f001 fd0d 	bl	8004f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80034fa:	bf00      	nop
 80034fc:	3728      	adds	r7, #40	; 0x28
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40013000 	.word	0x40013000
 8003508:	40023800 	.word	0x40023800
 800350c:	40020000 	.word	0x40020000

08003510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a0e      	ldr	r2, [pc, #56]	; (8003558 <HAL_TIM_Base_MspInit+0x48>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d115      	bne.n	800354e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <HAL_TIM_Base_MspInit+0x4c>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	4a0c      	ldr	r2, [pc, #48]	; (800355c <HAL_TIM_Base_MspInit+0x4c>)
 800352c:	f043 0302 	orr.w	r3, r3, #2
 8003530:	6413      	str	r3, [r2, #64]	; 0x40
 8003532:	4b0a      	ldr	r3, [pc, #40]	; (800355c <HAL_TIM_Base_MspInit+0x4c>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 800353e:	2200      	movs	r2, #0
 8003540:	2106      	movs	r1, #6
 8003542:	201d      	movs	r0, #29
 8003544:	f001 f8ba 	bl	80046bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003548:	201d      	movs	r0, #29
 800354a:	f001 f8d3 	bl	80046f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800354e:	bf00      	nop
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40000400 	.word	0x40000400
 800355c:	40023800 	.word	0x40023800

08003560 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003568:	f107 030c 	add.w	r3, r7, #12
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a12      	ldr	r2, [pc, #72]	; (80035c8 <HAL_TIM_MspPostInit+0x68>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d11d      	bne.n	80035be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	4b11      	ldr	r3, [pc, #68]	; (80035cc <HAL_TIM_MspPostInit+0x6c>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	4a10      	ldr	r2, [pc, #64]	; (80035cc <HAL_TIM_MspPostInit+0x6c>)
 800358c:	f043 0304 	orr.w	r3, r3, #4
 8003590:	6313      	str	r3, [r2, #48]	; 0x30
 8003592:	4b0e      	ldr	r3, [pc, #56]	; (80035cc <HAL_TIM_MspPostInit+0x6c>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800359e:	2340      	movs	r3, #64	; 0x40
 80035a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035ae:	2302      	movs	r3, #2
 80035b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b2:	f107 030c 	add.w	r3, r7, #12
 80035b6:	4619      	mov	r1, r3
 80035b8:	4805      	ldr	r0, [pc, #20]	; (80035d0 <HAL_TIM_MspPostInit+0x70>)
 80035ba:	f001 fcab 	bl	8004f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80035be:	bf00      	nop
 80035c0:	3720      	adds	r7, #32
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40023800 	.word	0x40023800
 80035d0:	40020800 	.word	0x40020800

080035d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08c      	sub	sp, #48	; 0x30
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035dc:	f107 031c 	add.w	r3, r7, #28
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a7a      	ldr	r2, [pc, #488]	; (80037dc <HAL_UART_MspInit+0x208>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	f040 8094 	bne.w	8003720 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035f8:	2300      	movs	r3, #0
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	4b78      	ldr	r3, [pc, #480]	; (80037e0 <HAL_UART_MspInit+0x20c>)
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	4a77      	ldr	r2, [pc, #476]	; (80037e0 <HAL_UART_MspInit+0x20c>)
 8003602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003606:	6413      	str	r3, [r2, #64]	; 0x40
 8003608:	4b75      	ldr	r3, [pc, #468]	; (80037e0 <HAL_UART_MspInit+0x20c>)
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003610:	61bb      	str	r3, [r7, #24]
 8003612:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	4b71      	ldr	r3, [pc, #452]	; (80037e0 <HAL_UART_MspInit+0x20c>)
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	4a70      	ldr	r2, [pc, #448]	; (80037e0 <HAL_UART_MspInit+0x20c>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6313      	str	r3, [r2, #48]	; 0x30
 8003624:	4b6e      	ldr	r3, [pc, #440]	; (80037e0 <HAL_UART_MspInit+0x20c>)
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = ROS_USART_TX_Pin|ROS_USART_RX_Pin;
 8003630:	230c      	movs	r3, #12
 8003632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003634:	2302      	movs	r3, #2
 8003636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003638:	2300      	movs	r3, #0
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800363c:	2303      	movs	r3, #3
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003640:	2307      	movs	r3, #7
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003644:	f107 031c 	add.w	r3, r7, #28
 8003648:	4619      	mov	r1, r3
 800364a:	4866      	ldr	r0, [pc, #408]	; (80037e4 <HAL_UART_MspInit+0x210>)
 800364c:	f001 fc62 	bl	8004f14 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003650:	4b65      	ldr	r3, [pc, #404]	; (80037e8 <HAL_UART_MspInit+0x214>)
 8003652:	4a66      	ldr	r2, [pc, #408]	; (80037ec <HAL_UART_MspInit+0x218>)
 8003654:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003656:	4b64      	ldr	r3, [pc, #400]	; (80037e8 <HAL_UART_MspInit+0x214>)
 8003658:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800365c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800365e:	4b62      	ldr	r3, [pc, #392]	; (80037e8 <HAL_UART_MspInit+0x214>)
 8003660:	2200      	movs	r2, #0
 8003662:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003664:	4b60      	ldr	r3, [pc, #384]	; (80037e8 <HAL_UART_MspInit+0x214>)
 8003666:	2200      	movs	r2, #0
 8003668:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800366a:	4b5f      	ldr	r3, [pc, #380]	; (80037e8 <HAL_UART_MspInit+0x214>)
 800366c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003670:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003672:	4b5d      	ldr	r3, [pc, #372]	; (80037e8 <HAL_UART_MspInit+0x214>)
 8003674:	2200      	movs	r2, #0
 8003676:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003678:	4b5b      	ldr	r3, [pc, #364]	; (80037e8 <HAL_UART_MspInit+0x214>)
 800367a:	2200      	movs	r2, #0
 800367c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800367e:	4b5a      	ldr	r3, [pc, #360]	; (80037e8 <HAL_UART_MspInit+0x214>)
 8003680:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003684:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003686:	4b58      	ldr	r3, [pc, #352]	; (80037e8 <HAL_UART_MspInit+0x214>)
 8003688:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800368c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800368e:	4b56      	ldr	r3, [pc, #344]	; (80037e8 <HAL_UART_MspInit+0x214>)
 8003690:	2200      	movs	r2, #0
 8003692:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003694:	4854      	ldr	r0, [pc, #336]	; (80037e8 <HAL_UART_MspInit+0x214>)
 8003696:	f001 f83b 	bl	8004710 <HAL_DMA_Init>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80036a0:	f7ff f964 	bl	800296c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a50      	ldr	r2, [pc, #320]	; (80037e8 <HAL_UART_MspInit+0x214>)
 80036a8:	639a      	str	r2, [r3, #56]	; 0x38
 80036aa:	4a4f      	ldr	r2, [pc, #316]	; (80037e8 <HAL_UART_MspInit+0x214>)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80036b0:	4b4f      	ldr	r3, [pc, #316]	; (80037f0 <HAL_UART_MspInit+0x21c>)
 80036b2:	4a50      	ldr	r2, [pc, #320]	; (80037f4 <HAL_UART_MspInit+0x220>)
 80036b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80036b6:	4b4e      	ldr	r3, [pc, #312]	; (80037f0 <HAL_UART_MspInit+0x21c>)
 80036b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036be:	4b4c      	ldr	r3, [pc, #304]	; (80037f0 <HAL_UART_MspInit+0x21c>)
 80036c0:	2240      	movs	r2, #64	; 0x40
 80036c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036c4:	4b4a      	ldr	r3, [pc, #296]	; (80037f0 <HAL_UART_MspInit+0x21c>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036ca:	4b49      	ldr	r3, [pc, #292]	; (80037f0 <HAL_UART_MspInit+0x21c>)
 80036cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036d2:	4b47      	ldr	r3, [pc, #284]	; (80037f0 <HAL_UART_MspInit+0x21c>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036d8:	4b45      	ldr	r3, [pc, #276]	; (80037f0 <HAL_UART_MspInit+0x21c>)
 80036da:	2200      	movs	r2, #0
 80036dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80036de:	4b44      	ldr	r3, [pc, #272]	; (80037f0 <HAL_UART_MspInit+0x21c>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036e4:	4b42      	ldr	r3, [pc, #264]	; (80037f0 <HAL_UART_MspInit+0x21c>)
 80036e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80036ea:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036ec:	4b40      	ldr	r3, [pc, #256]	; (80037f0 <HAL_UART_MspInit+0x21c>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80036f2:	483f      	ldr	r0, [pc, #252]	; (80037f0 <HAL_UART_MspInit+0x21c>)
 80036f4:	f001 f80c 	bl	8004710 <HAL_DMA_Init>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80036fe:	f7ff f935 	bl	800296c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a3a      	ldr	r2, [pc, #232]	; (80037f0 <HAL_UART_MspInit+0x21c>)
 8003706:	635a      	str	r2, [r3, #52]	; 0x34
 8003708:	4a39      	ldr	r2, [pc, #228]	; (80037f0 <HAL_UART_MspInit+0x21c>)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800370e:	2200      	movs	r2, #0
 8003710:	2105      	movs	r1, #5
 8003712:	2026      	movs	r0, #38	; 0x26
 8003714:	f000 ffd2 	bl	80046bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003718:	2026      	movs	r0, #38	; 0x26
 800371a:	f000 ffeb 	bl	80046f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800371e:	e058      	b.n	80037d2 <HAL_UART_MspInit+0x1fe>
  else if(huart->Instance==USART3)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a34      	ldr	r2, [pc, #208]	; (80037f8 <HAL_UART_MspInit+0x224>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d153      	bne.n	80037d2 <HAL_UART_MspInit+0x1fe>
    __HAL_RCC_USART3_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	4b2c      	ldr	r3, [pc, #176]	; (80037e0 <HAL_UART_MspInit+0x20c>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	4a2b      	ldr	r2, [pc, #172]	; (80037e0 <HAL_UART_MspInit+0x20c>)
 8003734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003738:	6413      	str	r3, [r2, #64]	; 0x40
 800373a:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <HAL_UART_MspInit+0x20c>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	4b25      	ldr	r3, [pc, #148]	; (80037e0 <HAL_UART_MspInit+0x20c>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	4a24      	ldr	r2, [pc, #144]	; (80037e0 <HAL_UART_MspInit+0x20c>)
 8003750:	f043 0302 	orr.w	r3, r3, #2
 8003754:	6313      	str	r3, [r2, #48]	; 0x30
 8003756:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <HAL_UART_MspInit+0x20c>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	4b1e      	ldr	r3, [pc, #120]	; (80037e0 <HAL_UART_MspInit+0x20c>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <HAL_UART_MspInit+0x20c>)
 800376c:	f043 0308 	orr.w	r3, r3, #8
 8003770:	6313      	str	r3, [r2, #48]	; 0x30
 8003772:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <HAL_UART_MspInit+0x20c>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_USART_RX_Pin;
 800377e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003784:	2302      	movs	r3, #2
 8003786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003788:	2300      	movs	r3, #0
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800378c:	2303      	movs	r3, #3
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003790:	2307      	movs	r3, #7
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPS_USART_RX_GPIO_Port, &GPIO_InitStruct);
 8003794:	f107 031c 	add.w	r3, r7, #28
 8003798:	4619      	mov	r1, r3
 800379a:	4818      	ldr	r0, [pc, #96]	; (80037fc <HAL_UART_MspInit+0x228>)
 800379c:	f001 fbba 	bl	8004f14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPS_USART_TX_Pin;
 80037a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a6:	2302      	movs	r3, #2
 80037a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ae:	2303      	movs	r3, #3
 80037b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80037b2:	2307      	movs	r3, #7
 80037b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPS_USART_TX_GPIO_Port, &GPIO_InitStruct);
 80037b6:	f107 031c 	add.w	r3, r7, #28
 80037ba:	4619      	mov	r1, r3
 80037bc:	4810      	ldr	r0, [pc, #64]	; (8003800 <HAL_UART_MspInit+0x22c>)
 80037be:	f001 fba9 	bl	8004f14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80037c2:	2200      	movs	r2, #0
 80037c4:	2105      	movs	r1, #5
 80037c6:	2027      	movs	r0, #39	; 0x27
 80037c8:	f000 ff78 	bl	80046bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80037cc:	2027      	movs	r0, #39	; 0x27
 80037ce:	f000 ff91 	bl	80046f4 <HAL_NVIC_EnableIRQ>
}
 80037d2:	bf00      	nop
 80037d4:	3730      	adds	r7, #48	; 0x30
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40004400 	.word	0x40004400
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40020000 	.word	0x40020000
 80037e8:	2001055c 	.word	0x2001055c
 80037ec:	40026088 	.word	0x40026088
 80037f0:	200108fc 	.word	0x200108fc
 80037f4:	400260a0 	.word	0x400260a0
 80037f8:	40004800 	.word	0x40004800
 80037fc:	40020400 	.word	0x40020400
 8003800:	40020c00 	.word	0x40020c00

08003804 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08a      	sub	sp, #40	; 0x28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800380c:	f107 0314 	add.w	r3, r7, #20
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	60da      	str	r2, [r3, #12]
 800381a:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003824:	d147      	bne.n	80038b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	4b25      	ldr	r3, [pc, #148]	; (80038c0 <HAL_HCD_MspInit+0xbc>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	4a24      	ldr	r2, [pc, #144]	; (80038c0 <HAL_HCD_MspInit+0xbc>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6313      	str	r3, [r2, #48]	; 0x30
 8003836:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <HAL_HCD_MspInit+0xbc>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8003842:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003848:	2300      	movs	r3, #0
 800384a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384c:	2300      	movs	r3, #0
 800384e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003850:	f107 0314 	add.w	r3, r7, #20
 8003854:	4619      	mov	r1, r3
 8003856:	481b      	ldr	r0, [pc, #108]	; (80038c4 <HAL_HCD_MspInit+0xc0>)
 8003858:	f001 fb5c 	bl	8004f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800385c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003862:	2302      	movs	r3, #2
 8003864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800386a:	2300      	movs	r3, #0
 800386c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800386e:	230a      	movs	r3, #10
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003872:	f107 0314 	add.w	r3, r7, #20
 8003876:	4619      	mov	r1, r3
 8003878:	4812      	ldr	r0, [pc, #72]	; (80038c4 <HAL_HCD_MspInit+0xc0>)
 800387a:	f001 fb4b 	bl	8004f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800387e:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <HAL_HCD_MspInit+0xbc>)
 8003880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003882:	4a0f      	ldr	r2, [pc, #60]	; (80038c0 <HAL_HCD_MspInit+0xbc>)
 8003884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003888:	6353      	str	r3, [r2, #52]	; 0x34
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <HAL_HCD_MspInit+0xbc>)
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	4a0b      	ldr	r2, [pc, #44]	; (80038c0 <HAL_HCD_MspInit+0xbc>)
 8003894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003898:	6453      	str	r3, [r2, #68]	; 0x44
 800389a:	4b09      	ldr	r3, [pc, #36]	; (80038c0 <HAL_HCD_MspInit+0xbc>)
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80038a6:	2200      	movs	r2, #0
 80038a8:	2105      	movs	r1, #5
 80038aa:	2043      	movs	r0, #67	; 0x43
 80038ac:	f000 ff06 	bl	80046bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80038b0:	2043      	movs	r0, #67	; 0x43
 80038b2:	f000 ff1f 	bl	80046f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80038b6:	bf00      	nop
 80038b8:	3728      	adds	r7, #40	; 0x28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40023800 	.word	0x40023800
 80038c4:	40020000 	.word	0x40020000

080038c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08c      	sub	sp, #48	; 0x30
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80038d8:	2200      	movs	r2, #0
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	2037      	movs	r0, #55	; 0x37
 80038de:	f000 feed 	bl	80046bc <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80038e2:	2037      	movs	r0, #55	; 0x37
 80038e4:	f000 ff06 	bl	80046f4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	4b1f      	ldr	r3, [pc, #124]	; (800396c <HAL_InitTick+0xa4>)
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	4a1e      	ldr	r2, [pc, #120]	; (800396c <HAL_InitTick+0xa4>)
 80038f2:	f043 0320 	orr.w	r3, r3, #32
 80038f6:	6413      	str	r3, [r2, #64]	; 0x40
 80038f8:	4b1c      	ldr	r3, [pc, #112]	; (800396c <HAL_InitTick+0xa4>)
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003904:	f107 0210 	add.w	r2, r7, #16
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f004 fa5e 	bl	8007dd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003914:	f004 fa34 	bl	8007d80 <HAL_RCC_GetPCLK1Freq>
 8003918:	4603      	mov	r3, r0
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003920:	4a13      	ldr	r2, [pc, #76]	; (8003970 <HAL_InitTick+0xa8>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	0c9b      	lsrs	r3, r3, #18
 8003928:	3b01      	subs	r3, #1
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <HAL_InitTick+0xac>)
 800392e:	4a12      	ldr	r2, [pc, #72]	; (8003978 <HAL_InitTick+0xb0>)
 8003930:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8003932:	4b10      	ldr	r3, [pc, #64]	; (8003974 <HAL_InitTick+0xac>)
 8003934:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003938:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800393a:	4a0e      	ldr	r2, [pc, #56]	; (8003974 <HAL_InitTick+0xac>)
 800393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003940:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <HAL_InitTick+0xac>)
 8003942:	2200      	movs	r2, #0
 8003944:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003946:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_InitTick+0xac>)
 8003948:	2200      	movs	r2, #0
 800394a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800394c:	4809      	ldr	r0, [pc, #36]	; (8003974 <HAL_InitTick+0xac>)
 800394e:	f004 fc3a 	bl	80081c6 <HAL_TIM_Base_Init>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d104      	bne.n	8003962 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8003958:	4806      	ldr	r0, [pc, #24]	; (8003974 <HAL_InitTick+0xac>)
 800395a:	f004 fc83 	bl	8008264 <HAL_TIM_Base_Start_IT>
 800395e:	4603      	mov	r3, r0
 8003960:	e000      	b.n	8003964 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
}
 8003964:	4618      	mov	r0, r3
 8003966:	3730      	adds	r7, #48	; 0x30
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40023800 	.word	0x40023800
 8003970:	431bde83 	.word	0x431bde83
 8003974:	20010e10 	.word	0x20010e10
 8003978:	40001400 	.word	0x40001400

0800397c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003980:	e7fe      	b.n	8003980 <NMI_Handler+0x4>

08003982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003982:	b480      	push	{r7}
 8003984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003986:	e7fe      	b.n	8003986 <HardFault_Handler+0x4>

08003988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800398c:	e7fe      	b.n	800398c <MemManage_Handler+0x4>

0800398e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800398e:	b480      	push	{r7}
 8003990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003992:	e7fe      	b.n	8003992 <BusFault_Handler+0x4>

08003994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003998:	e7fe      	b.n	8003998 <UsageFault_Handler+0x4>

0800399a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800399a:	b480      	push	{r7}
 800399c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80039ac:	2001      	movs	r0, #1
 80039ae:	f001 fc7f 	bl	80052b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80039bc:	4802      	ldr	r0, [pc, #8]	; (80039c8 <DMA1_Stream5_IRQHandler+0x10>)
 80039be:	f001 f83f 	bl	8004a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80039c2:	bf00      	nop
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	2001055c 	.word	0x2001055c

080039cc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80039d0:	4802      	ldr	r0, [pc, #8]	; (80039dc <DMA1_Stream6_IRQHandler+0x10>)
 80039d2:	f001 f835 	bl	8004a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200108fc 	.word	0x200108fc

080039e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039e4:	4802      	ldr	r0, [pc, #8]	; (80039f0 <TIM3_IRQHandler+0x10>)
 80039e6:	f004 fe1d 	bl	8008624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20010864 	.word	0x20010864

080039f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039f8:	4802      	ldr	r0, [pc, #8]	; (8003a04 <USART2_IRQHandler+0x10>)
 80039fa:	f005 fe0f 	bl	800961c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20010d50 	.word	0x20010d50

08003a08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003a0c:	4802      	ldr	r0, [pc, #8]	; (8003a18 <USART3_IRQHandler+0x10>)
 8003a0e:	f005 fe05 	bl	800961c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	200105c4 	.word	0x200105c4

08003a1c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003a20:	4802      	ldr	r0, [pc, #8]	; (8003a2c <TIM7_IRQHandler+0x10>)
 8003a22:	f004 fdff 	bl	8008624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20010e10 	.word	0x20010e10

08003a30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a34:	4802      	ldr	r0, [pc, #8]	; (8003a40 <DMA2_Stream0_IRQHandler+0x10>)
 8003a36:	f001 f803 	bl	8004a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20010964 	.word	0x20010964

08003a44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003a48:	4802      	ldr	r0, [pc, #8]	; (8003a54 <OTG_FS_IRQHandler+0x10>)
 8003a4a:	f001 fcb6 	bl	80053ba <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20010a4c 	.word	0x20010a4c

08003a58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
	return 1;
 8003a5c:	2301      	movs	r3, #1
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <_kill>:

int _kill(int pid, int sig)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a72:	f015 fd95 	bl	80195a0 <__errno>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2216      	movs	r2, #22
 8003a7a:	601a      	str	r2, [r3, #0]
	return -1;
 8003a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <_exit>:

void _exit (int status)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff ffe7 	bl	8003a68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a9a:	e7fe      	b.n	8003a9a <_exit+0x12>

08003a9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	e00a      	b.n	8003ac4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003aae:	f3af 8000 	nop.w
 8003ab2:	4601      	mov	r1, r0
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	60ba      	str	r2, [r7, #8]
 8003aba:	b2ca      	uxtb	r2, r1
 8003abc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	dbf0      	blt.n	8003aae <_read+0x12>
	}

return len;
 8003acc:	687b      	ldr	r3, [r7, #4]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b086      	sub	sp, #24
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	60f8      	str	r0, [r7, #12]
 8003ade:	60b9      	str	r1, [r7, #8]
 8003ae0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	e009      	b.n	8003afc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	60ba      	str	r2, [r7, #8]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	3301      	adds	r3, #1
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	dbf1      	blt.n	8003ae8 <_write+0x12>
	}
	return len;
 8003b04:	687b      	ldr	r3, [r7, #4]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <_close>:

int _close(int file)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
	return -1;
 8003b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b36:	605a      	str	r2, [r3, #4]
	return 0;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <_isatty>:

int _isatty(int file)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
	return 1;
 8003b4e:	2301      	movs	r3, #1
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
	return 0;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b80:	4a14      	ldr	r2, [pc, #80]	; (8003bd4 <_sbrk+0x5c>)
 8003b82:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <_sbrk+0x60>)
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b8c:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <_sbrk+0x64>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d102      	bne.n	8003b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <_sbrk+0x64>)
 8003b96:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <_sbrk+0x68>)
 8003b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b9a:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <_sbrk+0x64>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d207      	bcs.n	8003bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ba8:	f015 fcfa 	bl	80195a0 <__errno>
 8003bac:	4603      	mov	r3, r0
 8003bae:	220c      	movs	r2, #12
 8003bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bb6:	e009      	b.n	8003bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <_sbrk+0x64>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bbe:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <_sbrk+0x64>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	4a05      	ldr	r2, [pc, #20]	; (8003bdc <_sbrk+0x64>)
 8003bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bca:	68fb      	ldr	r3, [r7, #12]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20020000 	.word	0x20020000
 8003bd8:	00000400 	.word	0x00000400
 8003bdc:	20008104 	.word	0x20008104
 8003be0:	20016050 	.word	0x20016050

08003be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <SystemInit+0x20>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	4a05      	ldr	r2, [pc, #20]	; (8003c04 <SystemInit+0x20>)
 8003bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c0c:	480d      	ldr	r0, [pc, #52]	; (8003c44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c0e:	490e      	ldr	r1, [pc, #56]	; (8003c48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c10:	4a0e      	ldr	r2, [pc, #56]	; (8003c4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c14:	e002      	b.n	8003c1c <LoopCopyDataInit>

08003c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c1a:	3304      	adds	r3, #4

08003c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c20:	d3f9      	bcc.n	8003c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c22:	4a0b      	ldr	r2, [pc, #44]	; (8003c50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c24:	4c0b      	ldr	r4, [pc, #44]	; (8003c54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c28:	e001      	b.n	8003c2e <LoopFillZerobss>

08003c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c2c:	3204      	adds	r2, #4

08003c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c30:	d3fb      	bcc.n	8003c2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c32:	f7ff ffd7 	bl	8003be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c36:	f015 fd6d 	bl	8019714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c3a:	f7fd fd3b 	bl	80016b4 <main>
  bx  lr    
 8003c3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003c40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c48:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 8003c4c:	0801fb80 	.word	0x0801fb80
  ldr r2, =_sbss
 8003c50:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8003c54:	20016050 	.word	0x20016050

08003c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c58:	e7fe      	b.n	8003c58 <ADC_IRQHandler>
	...

08003c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c60:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <HAL_Init+0x40>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a0d      	ldr	r2, [pc, #52]	; (8003c9c <HAL_Init+0x40>)
 8003c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_Init+0x40>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a0a      	ldr	r2, [pc, #40]	; (8003c9c <HAL_Init+0x40>)
 8003c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c78:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <HAL_Init+0x40>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a07      	ldr	r2, [pc, #28]	; (8003c9c <HAL_Init+0x40>)
 8003c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c84:	2003      	movs	r0, #3
 8003c86:	f000 fd0e 	bl	80046a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c8a:	200f      	movs	r0, #15
 8003c8c:	f7ff fe1c 	bl	80038c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c90:	f7ff fa8a 	bl	80031a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40023c00 	.word	0x40023c00

08003ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ca4:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <HAL_IncTick+0x20>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <HAL_IncTick+0x24>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4413      	add	r3, r2
 8003cb0:	4a04      	ldr	r2, [pc, #16]	; (8003cc4 <HAL_IncTick+0x24>)
 8003cb2:	6013      	str	r3, [r2, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000010 	.word	0x20000010
 8003cc4:	20010e58 	.word	0x20010e58

08003cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  return uwTick;
 8003ccc:	4b03      	ldr	r3, [pc, #12]	; (8003cdc <HAL_GetTick+0x14>)
 8003cce:	681b      	ldr	r3, [r3, #0]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20010e58 	.word	0x20010e58

08003ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ce8:	f7ff ffee 	bl	8003cc8 <HAL_GetTick>
 8003cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cf8:	d005      	beq.n	8003d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <HAL_Delay+0x44>)
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4413      	add	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d06:	bf00      	nop
 8003d08:	f7ff ffde 	bl	8003cc8 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d8f7      	bhi.n	8003d08 <HAL_Delay+0x28>
  {
  }
}
 8003d18:	bf00      	nop
 8003d1a:	bf00      	nop
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20000010 	.word	0x20000010

08003d28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e033      	b.n	8003da6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff fa5a 	bl	8003200 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d118      	bne.n	8003d98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d6e:	f023 0302 	bic.w	r3, r3, #2
 8003d72:	f043 0202 	orr.w	r2, r3, #2
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fa68 	bl	8004250 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f023 0303 	bic.w	r3, r3, #3
 8003d8e:	f043 0201 	orr.w	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40
 8003d96:	e001      	b.n	8003d9c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_ADC_Start_DMA+0x1e>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e0e9      	b.n	8003fa2 <HAL_ADC_Start_DMA+0x1f2>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d018      	beq.n	8003e16 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003df4:	4b6d      	ldr	r3, [pc, #436]	; (8003fac <HAL_ADC_Start_DMA+0x1fc>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a6d      	ldr	r2, [pc, #436]	; (8003fb0 <HAL_ADC_Start_DMA+0x200>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	0c9a      	lsrs	r2, r3, #18
 8003e00:	4613      	mov	r3, r2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	4413      	add	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e08:	e002      	b.n	8003e10 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f9      	bne.n	8003e0a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e24:	d107      	bne.n	8003e36 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e34:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	f040 80a1 	bne.w	8003f88 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e4e:	f023 0301 	bic.w	r3, r3, #1
 8003e52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d007      	beq.n	8003e78 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e84:	d106      	bne.n	8003e94 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	f023 0206 	bic.w	r2, r3, #6
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	645a      	str	r2, [r3, #68]	; 0x44
 8003e92:	e002      	b.n	8003e9a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ea2:	4b44      	ldr	r3, [pc, #272]	; (8003fb4 <HAL_ADC_Start_DMA+0x204>)
 8003ea4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	4a43      	ldr	r2, [pc, #268]	; (8003fb8 <HAL_ADC_Start_DMA+0x208>)
 8003eac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	4a42      	ldr	r2, [pc, #264]	; (8003fbc <HAL_ADC_Start_DMA+0x20c>)
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	4a41      	ldr	r2, [pc, #260]	; (8003fc0 <HAL_ADC_Start_DMA+0x210>)
 8003ebc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ec6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003ed6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	334c      	adds	r3, #76	; 0x4c
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f000 fcb8 	bl	800486c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d12a      	bne.n	8003f5e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a2d      	ldr	r2, [pc, #180]	; (8003fc4 <HAL_ADC_Start_DMA+0x214>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d015      	beq.n	8003f3e <HAL_ADC_Start_DMA+0x18e>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a2c      	ldr	r2, [pc, #176]	; (8003fc8 <HAL_ADC_Start_DMA+0x218>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d105      	bne.n	8003f28 <HAL_ADC_Start_DMA+0x178>
 8003f1c:	4b25      	ldr	r3, [pc, #148]	; (8003fb4 <HAL_ADC_Start_DMA+0x204>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 031f 	and.w	r3, r3, #31
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a27      	ldr	r2, [pc, #156]	; (8003fcc <HAL_ADC_Start_DMA+0x21c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d136      	bne.n	8003fa0 <HAL_ADC_Start_DMA+0x1f0>
 8003f32:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <HAL_ADC_Start_DMA+0x204>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d130      	bne.n	8003fa0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d129      	bne.n	8003fa0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	e020      	b.n	8003fa0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a18      	ldr	r2, [pc, #96]	; (8003fc4 <HAL_ADC_Start_DMA+0x214>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d11b      	bne.n	8003fa0 <HAL_ADC_Start_DMA+0x1f0>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d114      	bne.n	8003fa0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f84:	609a      	str	r2, [r3, #8]
 8003f86:	e00b      	b.n	8003fa0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	f043 0210 	orr.w	r2, r3, #16
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f98:	f043 0201 	orr.w	r2, r3, #1
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000008 	.word	0x20000008
 8003fb0:	431bde83 	.word	0x431bde83
 8003fb4:	40012300 	.word	0x40012300
 8003fb8:	08004449 	.word	0x08004449
 8003fbc:	08004503 	.word	0x08004503
 8003fc0:	0800451f 	.word	0x0800451f
 8003fc4:	40012000 	.word	0x40012000
 8003fc8:	40012100 	.word	0x40012100
 8003fcc:	40012200 	.word	0x40012200

08003fd0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x1c>
 8004024:	2302      	movs	r3, #2
 8004026:	e105      	b.n	8004234 <HAL_ADC_ConfigChannel+0x228>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b09      	cmp	r3, #9
 8004036:	d925      	bls.n	8004084 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68d9      	ldr	r1, [r3, #12]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	b29b      	uxth	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	4613      	mov	r3, r2
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	4413      	add	r3, r2
 800404c:	3b1e      	subs	r3, #30
 800404e:	2207      	movs	r2, #7
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43da      	mvns	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	400a      	ands	r2, r1
 800405c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68d9      	ldr	r1, [r3, #12]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	b29b      	uxth	r3, r3
 800406e:	4618      	mov	r0, r3
 8004070:	4603      	mov	r3, r0
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	4403      	add	r3, r0
 8004076:	3b1e      	subs	r3, #30
 8004078:	409a      	lsls	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	e022      	b.n	80040ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6919      	ldr	r1, [r3, #16]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	b29b      	uxth	r3, r3
 8004090:	461a      	mov	r2, r3
 8004092:	4613      	mov	r3, r2
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	4413      	add	r3, r2
 8004098:	2207      	movs	r2, #7
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	43da      	mvns	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	400a      	ands	r2, r1
 80040a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6919      	ldr	r1, [r3, #16]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	4618      	mov	r0, r3
 80040ba:	4603      	mov	r3, r0
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	4403      	add	r3, r0
 80040c0:	409a      	lsls	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b06      	cmp	r3, #6
 80040d0:	d824      	bhi.n	800411c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	3b05      	subs	r3, #5
 80040e4:	221f      	movs	r2, #31
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43da      	mvns	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	400a      	ands	r2, r1
 80040f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	4618      	mov	r0, r3
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	3b05      	subs	r3, #5
 800410e:	fa00 f203 	lsl.w	r2, r0, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	635a      	str	r2, [r3, #52]	; 0x34
 800411a:	e04c      	b.n	80041b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b0c      	cmp	r3, #12
 8004122:	d824      	bhi.n	800416e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	3b23      	subs	r3, #35	; 0x23
 8004136:	221f      	movs	r2, #31
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	43da      	mvns	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	400a      	ands	r2, r1
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	b29b      	uxth	r3, r3
 8004152:	4618      	mov	r0, r3
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	3b23      	subs	r3, #35	; 0x23
 8004160:	fa00 f203 	lsl.w	r2, r0, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	631a      	str	r2, [r3, #48]	; 0x30
 800416c:	e023      	b.n	80041b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	3b41      	subs	r3, #65	; 0x41
 8004180:	221f      	movs	r2, #31
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	43da      	mvns	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	400a      	ands	r2, r1
 800418e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	b29b      	uxth	r3, r3
 800419c:	4618      	mov	r0, r3
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	3b41      	subs	r3, #65	; 0x41
 80041aa:	fa00 f203 	lsl.w	r2, r0, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041b6:	4b22      	ldr	r3, [pc, #136]	; (8004240 <HAL_ADC_ConfigChannel+0x234>)
 80041b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a21      	ldr	r2, [pc, #132]	; (8004244 <HAL_ADC_ConfigChannel+0x238>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d109      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x1cc>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b12      	cmp	r3, #18
 80041ca:	d105      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a19      	ldr	r2, [pc, #100]	; (8004244 <HAL_ADC_ConfigChannel+0x238>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d123      	bne.n	800422a <HAL_ADC_ConfigChannel+0x21e>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b10      	cmp	r3, #16
 80041e8:	d003      	beq.n	80041f2 <HAL_ADC_ConfigChannel+0x1e6>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b11      	cmp	r3, #17
 80041f0:	d11b      	bne.n	800422a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b10      	cmp	r3, #16
 8004204:	d111      	bne.n	800422a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004206:	4b10      	ldr	r3, [pc, #64]	; (8004248 <HAL_ADC_ConfigChannel+0x23c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a10      	ldr	r2, [pc, #64]	; (800424c <HAL_ADC_ConfigChannel+0x240>)
 800420c:	fba2 2303 	umull	r2, r3, r2, r3
 8004210:	0c9a      	lsrs	r2, r3, #18
 8004212:	4613      	mov	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800421c:	e002      	b.n	8004224 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	3b01      	subs	r3, #1
 8004222:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f9      	bne.n	800421e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	40012300 	.word	0x40012300
 8004244:	40012000 	.word	0x40012000
 8004248:	20000008 	.word	0x20000008
 800424c:	431bde83 	.word	0x431bde83

08004250 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004258:	4b79      	ldr	r3, [pc, #484]	; (8004440 <ADC_Init+0x1f0>)
 800425a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	431a      	orrs	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004284:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6859      	ldr	r1, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	021a      	lsls	r2, r3, #8
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6859      	ldr	r1, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6899      	ldr	r1, [r3, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	4a58      	ldr	r2, [pc, #352]	; (8004444 <ADC_Init+0x1f4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d022      	beq.n	800432e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6899      	ldr	r1, [r3, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004318:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6899      	ldr	r1, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	609a      	str	r2, [r3, #8]
 800432c:	e00f      	b.n	800434e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800433c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800434c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0202 	bic.w	r2, r2, #2
 800435c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6899      	ldr	r1, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	7e1b      	ldrb	r3, [r3, #24]
 8004368:	005a      	lsls	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d01b      	beq.n	80043b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800438a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800439a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6859      	ldr	r1, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	3b01      	subs	r3, #1
 80043a8:	035a      	lsls	r2, r3, #13
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
 80043b2:	e007      	b.n	80043c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80043d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	3b01      	subs	r3, #1
 80043e0:	051a      	lsls	r2, r3, #20
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6899      	ldr	r1, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004406:	025a      	lsls	r2, r3, #9
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800441e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6899      	ldr	r1, [r3, #8]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	029a      	lsls	r2, r3, #10
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	609a      	str	r2, [r3, #8]
}
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	40012300 	.word	0x40012300
 8004444:	0f000001 	.word	0x0f000001

08004448 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800445e:	2b00      	cmp	r3, #0
 8004460:	d13c      	bne.n	80044dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d12b      	bne.n	80044d4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004480:	2b00      	cmp	r3, #0
 8004482:	d127      	bne.n	80044d4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800448e:	2b00      	cmp	r3, #0
 8004490:	d006      	beq.n	80044a0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800449c:	2b00      	cmp	r3, #0
 800449e:	d119      	bne.n	80044d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0220 	bic.w	r2, r2, #32
 80044ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d105      	bne.n	80044d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	f043 0201 	orr.w	r2, r3, #1
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f7ff fd7b 	bl	8003fd0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80044da:	e00e      	b.n	80044fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	f003 0310 	and.w	r3, r3, #16
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f7ff fd85 	bl	8003ff8 <HAL_ADC_ErrorCallback>
}
 80044ee:	e004      	b.n	80044fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	4798      	blx	r3
}
 80044fa:	bf00      	nop
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f7ff fd67 	bl	8003fe4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2240      	movs	r2, #64	; 0x40
 8004530:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004536:	f043 0204 	orr.w	r2, r3, #4
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f7ff fd5a 	bl	8003ff8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004544:	bf00      	nop
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <__NVIC_SetPriorityGrouping+0x44>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004568:	4013      	ands	r3, r2
 800456a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800457c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800457e:	4a04      	ldr	r2, [pc, #16]	; (8004590 <__NVIC_SetPriorityGrouping+0x44>)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	60d3      	str	r3, [r2, #12]
}
 8004584:	bf00      	nop
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	e000ed00 	.word	0xe000ed00

08004594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004598:	4b04      	ldr	r3, [pc, #16]	; (80045ac <__NVIC_GetPriorityGrouping+0x18>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	0a1b      	lsrs	r3, r3, #8
 800459e:	f003 0307 	and.w	r3, r3, #7
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	e000ed00 	.word	0xe000ed00

080045b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	db0b      	blt.n	80045da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	f003 021f 	and.w	r2, r3, #31
 80045c8:	4907      	ldr	r1, [pc, #28]	; (80045e8 <__NVIC_EnableIRQ+0x38>)
 80045ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	2001      	movs	r0, #1
 80045d2:	fa00 f202 	lsl.w	r2, r0, r2
 80045d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	e000e100 	.word	0xe000e100

080045ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4603      	mov	r3, r0
 80045f4:	6039      	str	r1, [r7, #0]
 80045f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	db0a      	blt.n	8004616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	b2da      	uxtb	r2, r3
 8004604:	490c      	ldr	r1, [pc, #48]	; (8004638 <__NVIC_SetPriority+0x4c>)
 8004606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460a:	0112      	lsls	r2, r2, #4
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	440b      	add	r3, r1
 8004610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004614:	e00a      	b.n	800462c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	b2da      	uxtb	r2, r3
 800461a:	4908      	ldr	r1, [pc, #32]	; (800463c <__NVIC_SetPriority+0x50>)
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	3b04      	subs	r3, #4
 8004624:	0112      	lsls	r2, r2, #4
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	440b      	add	r3, r1
 800462a:	761a      	strb	r2, [r3, #24]
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	e000e100 	.word	0xe000e100
 800463c:	e000ed00 	.word	0xe000ed00

08004640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004640:	b480      	push	{r7}
 8004642:	b089      	sub	sp, #36	; 0x24
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f1c3 0307 	rsb	r3, r3, #7
 800465a:	2b04      	cmp	r3, #4
 800465c:	bf28      	it	cs
 800465e:	2304      	movcs	r3, #4
 8004660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	3304      	adds	r3, #4
 8004666:	2b06      	cmp	r3, #6
 8004668:	d902      	bls.n	8004670 <NVIC_EncodePriority+0x30>
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	3b03      	subs	r3, #3
 800466e:	e000      	b.n	8004672 <NVIC_EncodePriority+0x32>
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	43da      	mvns	r2, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	401a      	ands	r2, r3
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004688:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	fa01 f303 	lsl.w	r3, r1, r3
 8004692:	43d9      	mvns	r1, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004698:	4313      	orrs	r3, r2
         );
}
 800469a:	4618      	mov	r0, r3
 800469c:	3724      	adds	r7, #36	; 0x24
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff ff4c 	bl	800454c <__NVIC_SetPriorityGrouping>
}
 80046b4:	bf00      	nop
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046ce:	f7ff ff61 	bl	8004594 <__NVIC_GetPriorityGrouping>
 80046d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	6978      	ldr	r0, [r7, #20]
 80046da:	f7ff ffb1 	bl	8004640 <NVIC_EncodePriority>
 80046de:	4602      	mov	r2, r0
 80046e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046e4:	4611      	mov	r1, r2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff ff80 	bl	80045ec <__NVIC_SetPriority>
}
 80046ec:	bf00      	nop
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff ff54 	bl	80045b0 <__NVIC_EnableIRQ>
}
 8004708:	bf00      	nop
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800471c:	f7ff fad4 	bl	8003cc8 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e099      	b.n	8004860 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800474c:	e00f      	b.n	800476e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800474e:	f7ff fabb 	bl	8003cc8 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b05      	cmp	r3, #5
 800475a:	d908      	bls.n	800476e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2203      	movs	r2, #3
 8004766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e078      	b.n	8004860 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1e8      	bne.n	800474e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4b38      	ldr	r3, [pc, #224]	; (8004868 <HAL_DMA_Init+0x158>)
 8004788:	4013      	ands	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800479a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d107      	bne.n	80047d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	4313      	orrs	r3, r2
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f023 0307 	bic.w	r3, r3, #7
 80047ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d117      	bne.n	8004832 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00e      	beq.n	8004832 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fb01 	bl	8004e1c <DMA_CheckFifoParam>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d008      	beq.n	8004832 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2240      	movs	r2, #64	; 0x40
 8004824:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800482e:	2301      	movs	r3, #1
 8004830:	e016      	b.n	8004860 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fab8 	bl	8004db0 <DMA_CalcBaseAndBitshift>
 8004840:	4603      	mov	r3, r0
 8004842:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004848:	223f      	movs	r2, #63	; 0x3f
 800484a:	409a      	lsls	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	f010803f 	.word	0xf010803f

0800486c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004882:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_DMA_Start_IT+0x26>
 800488e:	2302      	movs	r3, #2
 8004890:	e040      	b.n	8004914 <HAL_DMA_Start_IT+0xa8>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d12f      	bne.n	8004906 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2202      	movs	r2, #2
 80048aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 fa4a 	bl	8004d54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c4:	223f      	movs	r2, #63	; 0x3f
 80048c6:	409a      	lsls	r2, r3
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0216 	orr.w	r2, r2, #22
 80048da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d007      	beq.n	80048f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0208 	orr.w	r2, r2, #8
 80048f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	e005      	b.n	8004912 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800490e:	2302      	movs	r3, #2
 8004910:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004912:	7dfb      	ldrb	r3, [r7, #23]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004928:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800492a:	f7ff f9cd 	bl	8003cc8 <HAL_GetTick>
 800492e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d008      	beq.n	800494e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2280      	movs	r2, #128	; 0x80
 8004940:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e052      	b.n	80049f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0216 	bic.w	r2, r2, #22
 800495c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695a      	ldr	r2, [r3, #20]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800496c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	d103      	bne.n	800497e <HAL_DMA_Abort+0x62>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497a:	2b00      	cmp	r3, #0
 800497c:	d007      	beq.n	800498e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0208 	bic.w	r2, r2, #8
 800498c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0201 	bic.w	r2, r2, #1
 800499c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800499e:	e013      	b.n	80049c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049a0:	f7ff f992 	bl	8003cc8 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b05      	cmp	r3, #5
 80049ac:	d90c      	bls.n	80049c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2203      	movs	r2, #3
 80049b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e015      	b.n	80049f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1e4      	bne.n	80049a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049da:	223f      	movs	r2, #63	; 0x3f
 80049dc:	409a      	lsls	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d004      	beq.n	8004a1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2280      	movs	r2, #128	; 0x80
 8004a14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e00c      	b.n	8004a34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2205      	movs	r2, #5
 8004a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0201 	bic.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a4c:	4b92      	ldr	r3, [pc, #584]	; (8004c98 <HAL_DMA_IRQHandler+0x258>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a92      	ldr	r2, [pc, #584]	; (8004c9c <HAL_DMA_IRQHandler+0x25c>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	0a9b      	lsrs	r3, r3, #10
 8004a58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6a:	2208      	movs	r2, #8
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4013      	ands	r3, r2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d01a      	beq.n	8004aac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d013      	beq.n	8004aac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0204 	bic.w	r2, r2, #4
 8004a92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a98:	2208      	movs	r2, #8
 8004a9a:	409a      	lsls	r2, r3
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa4:	f043 0201 	orr.w	r2, r3, #1
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	409a      	lsls	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d012      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00b      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ace:	2201      	movs	r2, #1
 8004ad0:	409a      	lsls	r2, r3
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ada:	f043 0202 	orr.w	r2, r3, #2
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae6:	2204      	movs	r2, #4
 8004ae8:	409a      	lsls	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4013      	ands	r3, r2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d012      	beq.n	8004b18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00b      	beq.n	8004b18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b04:	2204      	movs	r2, #4
 8004b06:	409a      	lsls	r2, r3
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b10:	f043 0204 	orr.w	r2, r3, #4
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d043      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d03c      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3a:	2210      	movs	r2, #16
 8004b3c:	409a      	lsls	r2, r3
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d018      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d108      	bne.n	8004b70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d024      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	4798      	blx	r3
 8004b6e:	e01f      	b.n	8004bb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01b      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	4798      	blx	r3
 8004b80:	e016      	b.n	8004bb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d107      	bne.n	8004ba0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0208 	bic.w	r2, r2, #8
 8004b9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	409a      	lsls	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 808e 	beq.w	8004cde <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 8086 	beq.w	8004cde <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	409a      	lsls	r2, r3
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b05      	cmp	r3, #5
 8004be8:	d136      	bne.n	8004c58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0216 	bic.w	r2, r2, #22
 8004bf8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695a      	ldr	r2, [r3, #20]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d103      	bne.n	8004c1a <HAL_DMA_IRQHandler+0x1da>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0208 	bic.w	r2, r2, #8
 8004c28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2e:	223f      	movs	r2, #63	; 0x3f
 8004c30:	409a      	lsls	r2, r3
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d07d      	beq.n	8004d4a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	4798      	blx	r3
        }
        return;
 8004c56:	e078      	b.n	8004d4a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d01c      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d108      	bne.n	8004c86 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d030      	beq.n	8004cde <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4798      	blx	r3
 8004c84:	e02b      	b.n	8004cde <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d027      	beq.n	8004cde <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	4798      	blx	r3
 8004c96:	e022      	b.n	8004cde <HAL_DMA_IRQHandler+0x29e>
 8004c98:	20000008 	.word	0x20000008
 8004c9c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10f      	bne.n	8004cce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0210 	bic.w	r2, r2, #16
 8004cbc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d032      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d022      	beq.n	8004d38 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2205      	movs	r2, #5
 8004cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0201 	bic.w	r2, r2, #1
 8004d08:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d307      	bcc.n	8004d26 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1f2      	bne.n	8004d0a <HAL_DMA_IRQHandler+0x2ca>
 8004d24:	e000      	b.n	8004d28 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004d26:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4798      	blx	r3
 8004d48:	e000      	b.n	8004d4c <HAL_DMA_IRQHandler+0x30c>
        return;
 8004d4a:	bf00      	nop
    }
  }
}
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop

08004d54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b40      	cmp	r3, #64	; 0x40
 8004d80:	d108      	bne.n	8004d94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d92:	e007      	b.n	8004da4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	60da      	str	r2, [r3, #12]
}
 8004da4:	bf00      	nop
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	3b10      	subs	r3, #16
 8004dc0:	4a14      	ldr	r2, [pc, #80]	; (8004e14 <DMA_CalcBaseAndBitshift+0x64>)
 8004dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc6:	091b      	lsrs	r3, r3, #4
 8004dc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004dca:	4a13      	ldr	r2, [pc, #76]	; (8004e18 <DMA_CalcBaseAndBitshift+0x68>)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d909      	bls.n	8004df2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004de6:	f023 0303 	bic.w	r3, r3, #3
 8004dea:	1d1a      	adds	r2, r3, #4
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	659a      	str	r2, [r3, #88]	; 0x58
 8004df0:	e007      	b.n	8004e02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004dfa:	f023 0303 	bic.w	r3, r3, #3
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	aaaaaaab 	.word	0xaaaaaaab
 8004e18:	0801ec70 	.word	0x0801ec70

08004e1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d11f      	bne.n	8004e76 <DMA_CheckFifoParam+0x5a>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d856      	bhi.n	8004eea <DMA_CheckFifoParam+0xce>
 8004e3c:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <DMA_CheckFifoParam+0x28>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004e55 	.word	0x08004e55
 8004e48:	08004e67 	.word	0x08004e67
 8004e4c:	08004e55 	.word	0x08004e55
 8004e50:	08004eeb 	.word	0x08004eeb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d046      	beq.n	8004eee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e64:	e043      	b.n	8004eee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e6e:	d140      	bne.n	8004ef2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e74:	e03d      	b.n	8004ef2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e7e:	d121      	bne.n	8004ec4 <DMA_CheckFifoParam+0xa8>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d837      	bhi.n	8004ef6 <DMA_CheckFifoParam+0xda>
 8004e86:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <DMA_CheckFifoParam+0x70>)
 8004e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8c:	08004e9d 	.word	0x08004e9d
 8004e90:	08004ea3 	.word	0x08004ea3
 8004e94:	08004e9d 	.word	0x08004e9d
 8004e98:	08004eb5 	.word	0x08004eb5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea0:	e030      	b.n	8004f04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d025      	beq.n	8004efa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eb2:	e022      	b.n	8004efa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ebc:	d11f      	bne.n	8004efe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ec2:	e01c      	b.n	8004efe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d903      	bls.n	8004ed2 <DMA_CheckFifoParam+0xb6>
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d003      	beq.n	8004ed8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ed0:	e018      	b.n	8004f04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed6:	e015      	b.n	8004f04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00e      	beq.n	8004f02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee8:	e00b      	b.n	8004f02 <DMA_CheckFifoParam+0xe6>
      break;
 8004eea:	bf00      	nop
 8004eec:	e00a      	b.n	8004f04 <DMA_CheckFifoParam+0xe8>
      break;
 8004eee:	bf00      	nop
 8004ef0:	e008      	b.n	8004f04 <DMA_CheckFifoParam+0xe8>
      break;
 8004ef2:	bf00      	nop
 8004ef4:	e006      	b.n	8004f04 <DMA_CheckFifoParam+0xe8>
      break;
 8004ef6:	bf00      	nop
 8004ef8:	e004      	b.n	8004f04 <DMA_CheckFifoParam+0xe8>
      break;
 8004efa:	bf00      	nop
 8004efc:	e002      	b.n	8004f04 <DMA_CheckFifoParam+0xe8>
      break;   
 8004efe:	bf00      	nop
 8004f00:	e000      	b.n	8004f04 <DMA_CheckFifoParam+0xe8>
      break;
 8004f02:	bf00      	nop
    }
  } 
  
  return status; 
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop

08004f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b089      	sub	sp, #36	; 0x24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61fb      	str	r3, [r7, #28]
 8004f2e:	e16b      	b.n	8005208 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f30:	2201      	movs	r2, #1
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4013      	ands	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	f040 815a 	bne.w	8005202 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d005      	beq.n	8004f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d130      	bne.n	8004fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	2203      	movs	r2, #3
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	43db      	mvns	r3, r3
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	091b      	lsrs	r3, r3, #4
 8004fb2:	f003 0201 	and.w	r2, r3, #1
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f003 0303 	and.w	r3, r3, #3
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	d017      	beq.n	8005004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	2203      	movs	r2, #3
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f003 0303 	and.w	r3, r3, #3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d123      	bne.n	8005058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	08da      	lsrs	r2, r3, #3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3208      	adds	r2, #8
 8005018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800501c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	220f      	movs	r2, #15
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	43db      	mvns	r3, r3
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4013      	ands	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4313      	orrs	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	08da      	lsrs	r2, r3, #3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3208      	adds	r2, #8
 8005052:	69b9      	ldr	r1, [r7, #24]
 8005054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	2203      	movs	r2, #3
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	43db      	mvns	r3, r3
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	4013      	ands	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f003 0203 	and.w	r2, r3, #3
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4313      	orrs	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 80b4 	beq.w	8005202 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	4b60      	ldr	r3, [pc, #384]	; (8005220 <HAL_GPIO_Init+0x30c>)
 80050a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a2:	4a5f      	ldr	r2, [pc, #380]	; (8005220 <HAL_GPIO_Init+0x30c>)
 80050a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050a8:	6453      	str	r3, [r2, #68]	; 0x44
 80050aa:	4b5d      	ldr	r3, [pc, #372]	; (8005220 <HAL_GPIO_Init+0x30c>)
 80050ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050b6:	4a5b      	ldr	r2, [pc, #364]	; (8005224 <HAL_GPIO_Init+0x310>)
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	089b      	lsrs	r3, r3, #2
 80050bc:	3302      	adds	r3, #2
 80050be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	220f      	movs	r2, #15
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	43db      	mvns	r3, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	4013      	ands	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a52      	ldr	r2, [pc, #328]	; (8005228 <HAL_GPIO_Init+0x314>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d02b      	beq.n	800513a <HAL_GPIO_Init+0x226>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a51      	ldr	r2, [pc, #324]	; (800522c <HAL_GPIO_Init+0x318>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d025      	beq.n	8005136 <HAL_GPIO_Init+0x222>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a50      	ldr	r2, [pc, #320]	; (8005230 <HAL_GPIO_Init+0x31c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d01f      	beq.n	8005132 <HAL_GPIO_Init+0x21e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a4f      	ldr	r2, [pc, #316]	; (8005234 <HAL_GPIO_Init+0x320>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d019      	beq.n	800512e <HAL_GPIO_Init+0x21a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a4e      	ldr	r2, [pc, #312]	; (8005238 <HAL_GPIO_Init+0x324>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d013      	beq.n	800512a <HAL_GPIO_Init+0x216>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a4d      	ldr	r2, [pc, #308]	; (800523c <HAL_GPIO_Init+0x328>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00d      	beq.n	8005126 <HAL_GPIO_Init+0x212>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a4c      	ldr	r2, [pc, #304]	; (8005240 <HAL_GPIO_Init+0x32c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d007      	beq.n	8005122 <HAL_GPIO_Init+0x20e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a4b      	ldr	r2, [pc, #300]	; (8005244 <HAL_GPIO_Init+0x330>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d101      	bne.n	800511e <HAL_GPIO_Init+0x20a>
 800511a:	2307      	movs	r3, #7
 800511c:	e00e      	b.n	800513c <HAL_GPIO_Init+0x228>
 800511e:	2308      	movs	r3, #8
 8005120:	e00c      	b.n	800513c <HAL_GPIO_Init+0x228>
 8005122:	2306      	movs	r3, #6
 8005124:	e00a      	b.n	800513c <HAL_GPIO_Init+0x228>
 8005126:	2305      	movs	r3, #5
 8005128:	e008      	b.n	800513c <HAL_GPIO_Init+0x228>
 800512a:	2304      	movs	r3, #4
 800512c:	e006      	b.n	800513c <HAL_GPIO_Init+0x228>
 800512e:	2303      	movs	r3, #3
 8005130:	e004      	b.n	800513c <HAL_GPIO_Init+0x228>
 8005132:	2302      	movs	r3, #2
 8005134:	e002      	b.n	800513c <HAL_GPIO_Init+0x228>
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <HAL_GPIO_Init+0x228>
 800513a:	2300      	movs	r3, #0
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	f002 0203 	and.w	r2, r2, #3
 8005142:	0092      	lsls	r2, r2, #2
 8005144:	4093      	lsls	r3, r2
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	4313      	orrs	r3, r2
 800514a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800514c:	4935      	ldr	r1, [pc, #212]	; (8005224 <HAL_GPIO_Init+0x310>)
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	089b      	lsrs	r3, r3, #2
 8005152:	3302      	adds	r3, #2
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800515a:	4b3b      	ldr	r3, [pc, #236]	; (8005248 <HAL_GPIO_Init+0x334>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	43db      	mvns	r3, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4013      	ands	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800517e:	4a32      	ldr	r2, [pc, #200]	; (8005248 <HAL_GPIO_Init+0x334>)
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005184:	4b30      	ldr	r3, [pc, #192]	; (8005248 <HAL_GPIO_Init+0x334>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	43db      	mvns	r3, r3
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	4013      	ands	r3, r2
 8005192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051a8:	4a27      	ldr	r2, [pc, #156]	; (8005248 <HAL_GPIO_Init+0x334>)
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051ae:	4b26      	ldr	r3, [pc, #152]	; (8005248 <HAL_GPIO_Init+0x334>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	43db      	mvns	r3, r3
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	4013      	ands	r3, r2
 80051bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051d2:	4a1d      	ldr	r2, [pc, #116]	; (8005248 <HAL_GPIO_Init+0x334>)
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051d8:	4b1b      	ldr	r3, [pc, #108]	; (8005248 <HAL_GPIO_Init+0x334>)
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	43db      	mvns	r3, r3
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	4013      	ands	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051fc:	4a12      	ldr	r2, [pc, #72]	; (8005248 <HAL_GPIO_Init+0x334>)
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	3301      	adds	r3, #1
 8005206:	61fb      	str	r3, [r7, #28]
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	2b0f      	cmp	r3, #15
 800520c:	f67f ae90 	bls.w	8004f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005210:	bf00      	nop
 8005212:	bf00      	nop
 8005214:	3724      	adds	r7, #36	; 0x24
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40023800 	.word	0x40023800
 8005224:	40013800 	.word	0x40013800
 8005228:	40020000 	.word	0x40020000
 800522c:	40020400 	.word	0x40020400
 8005230:	40020800 	.word	0x40020800
 8005234:	40020c00 	.word	0x40020c00
 8005238:	40021000 	.word	0x40021000
 800523c:	40021400 	.word	0x40021400
 8005240:	40021800 	.word	0x40021800
 8005244:	40021c00 	.word	0x40021c00
 8005248:	40013c00 	.word	0x40013c00

0800524c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	887b      	ldrh	r3, [r7, #2]
 800525e:	4013      	ands	r3, r2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005264:	2301      	movs	r3, #1
 8005266:	73fb      	strb	r3, [r7, #15]
 8005268:	e001      	b.n	800526e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800526a:	2300      	movs	r3, #0
 800526c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800526e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	807b      	strh	r3, [r7, #2]
 8005288:	4613      	mov	r3, r2
 800528a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800528c:	787b      	ldrb	r3, [r7, #1]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005292:	887a      	ldrh	r2, [r7, #2]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005298:	e003      	b.n	80052a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800529a:	887b      	ldrh	r3, [r7, #2]
 800529c:	041a      	lsls	r2, r3, #16
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	619a      	str	r2, [r3, #24]
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
	...

080052b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80052ba:	4b08      	ldr	r3, [pc, #32]	; (80052dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052bc:	695a      	ldr	r2, [r3, #20]
 80052be:	88fb      	ldrh	r3, [r7, #6]
 80052c0:	4013      	ands	r3, r2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d006      	beq.n	80052d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052c6:	4a05      	ldr	r2, [pc, #20]	; (80052dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052c8:	88fb      	ldrh	r3, [r7, #6]
 80052ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052cc:	88fb      	ldrh	r3, [r7, #6]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 f806 	bl	80052e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80052d4:	bf00      	nop
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40013c00 	.word	0x40013c00

080052e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	4603      	mov	r3, r0
 80052e8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80052f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f8:	b08f      	sub	sp, #60	; 0x3c
 80052fa:	af0a      	add	r7, sp, #40	; 0x28
 80052fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e054      	b.n	80053b2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fe fa6e 	bl	8003804 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2203      	movs	r2, #3
 800532c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005338:	2b00      	cmp	r3, #0
 800533a:	d102      	bne.n	8005342 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4618      	mov	r0, r3
 8005348:	f005 fa3d 	bl	800a7c6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	603b      	str	r3, [r7, #0]
 8005352:	687e      	ldr	r6, [r7, #4]
 8005354:	466d      	mov	r5, sp
 8005356:	f106 0410 	add.w	r4, r6, #16
 800535a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800535c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800535e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005362:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005366:	e885 0003 	stmia.w	r5, {r0, r1}
 800536a:	1d33      	adds	r3, r6, #4
 800536c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800536e:	6838      	ldr	r0, [r7, #0]
 8005370:	f005 f9c8 	bl	800a704 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2101      	movs	r1, #1
 800537a:	4618      	mov	r0, r3
 800537c:	f005 fa34 	bl	800a7e8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	603b      	str	r3, [r7, #0]
 8005386:	687e      	ldr	r6, [r7, #4]
 8005388:	466d      	mov	r5, sp
 800538a:	f106 0410 	add.w	r4, r6, #16
 800538e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005396:	e894 0003 	ldmia.w	r4, {r0, r1}
 800539a:	e885 0003 	stmia.w	r5, {r0, r1}
 800539e:	1d33      	adds	r3, r6, #4
 80053a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053a2:	6838      	ldr	r0, [r7, #0]
 80053a4:	f005 fb5c 	bl	800aa60 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053ba <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b086      	sub	sp, #24
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f005 fb04 	bl	800a9de <USB_GetMode>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b01      	cmp	r3, #1
 80053da:	f040 80f6 	bne.w	80055ca <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f005 fae8 	bl	800a9b8 <USB_ReadInterrupts>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 80ec 	beq.w	80055c8 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f005 fadf 	bl	800a9b8 <USB_ReadInterrupts>
 80053fa:	4603      	mov	r3, r0
 80053fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005400:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005404:	d104      	bne.n	8005410 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800540e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f005 facf 	bl	800a9b8 <USB_ReadInterrupts>
 800541a:	4603      	mov	r3, r0
 800541c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005424:	d104      	bne.n	8005430 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800542e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f005 fabf 	bl	800a9b8 <USB_ReadInterrupts>
 800543a:	4603      	mov	r3, r0
 800543c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005440:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005444:	d104      	bne.n	8005450 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800544e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f005 faaf 	bl	800a9b8 <USB_ReadInterrupts>
 800545a:	4603      	mov	r3, r0
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b02      	cmp	r3, #2
 8005462:	d103      	bne.n	800546c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2202      	movs	r2, #2
 800546a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4618      	mov	r0, r3
 8005472:	f005 faa1 	bl	800a9b8 <USB_ReadInterrupts>
 8005476:	4603      	mov	r3, r0
 8005478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800547c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005480:	d11c      	bne.n	80054bc <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800548a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10f      	bne.n	80054bc <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800549c:	2110      	movs	r1, #16
 800549e:	6938      	ldr	r0, [r7, #16]
 80054a0:	f005 f9ee 	bl	800a880 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80054a4:	6938      	ldr	r0, [r7, #16]
 80054a6:	f005 fa0f 	bl	800a8c8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2101      	movs	r1, #1
 80054b0:	4618      	mov	r0, r3
 80054b2:	f005 fb89 	bl	800abc8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f89e 	bl	80055f8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f005 fa79 	bl	800a9b8 <USB_ReadInterrupts>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054d0:	d102      	bne.n	80054d8 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f001 f9b1 	bl	800683a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4618      	mov	r0, r3
 80054de:	f005 fa6b 	bl	800a9b8 <USB_ReadInterrupts>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f003 0308 	and.w	r3, r3, #8
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d106      	bne.n	80054fa <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f86f 	bl	80055d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2208      	movs	r2, #8
 80054f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f005 fa5a 	bl	800a9b8 <USB_ReadInterrupts>
 8005504:	4603      	mov	r3, r0
 8005506:	f003 0310 	and.w	r3, r3, #16
 800550a:	2b10      	cmp	r3, #16
 800550c:	d101      	bne.n	8005512 <HAL_HCD_IRQHandler+0x158>
 800550e:	2301      	movs	r3, #1
 8005510:	e000      	b.n	8005514 <HAL_HCD_IRQHandler+0x15a>
 8005512:	2300      	movs	r3, #0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d012      	beq.n	800553e <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0210 	bic.w	r2, r2, #16
 8005526:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f001 f8b4 	bl	8006696 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699a      	ldr	r2, [r3, #24]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f042 0210 	orr.w	r2, r2, #16
 800553c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f005 fa38 	bl	800a9b8 <USB_ReadInterrupts>
 8005548:	4603      	mov	r3, r0
 800554a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005552:	d13a      	bne.n	80055ca <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4618      	mov	r0, r3
 800555a:	f005 fb6f 	bl	800ac3c <USB_HC_ReadInterrupt>
 800555e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005560:	2300      	movs	r3, #0
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	e025      	b.n	80055b2 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f003 030f 	and.w	r3, r3, #15
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	fa22 f303 	lsr.w	r3, r2, r3
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d018      	beq.n	80055ac <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4413      	add	r3, r2
 8005582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800558c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005590:	d106      	bne.n	80055a0 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	4619      	mov	r1, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f859 	bl	8005650 <HCD_HC_IN_IRQHandler>
 800559e:	e005      	b.n	80055ac <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	4619      	mov	r1, r3
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fc74 	bl	8005e94 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	3301      	adds	r3, #1
 80055b0:	617b      	str	r3, [r7, #20]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d3d4      	bcc.n	8005566 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055c4:	615a      	str	r2, [r3, #20]
 80055c6:	e000      	b.n	80055ca <HAL_HCD_IRQHandler+0x210>
      return;
 80055c8:	bf00      	nop
    }
  }
}
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	70fb      	strb	r3, [r7, #3]
 8005640:	4613      	mov	r3, r2
 8005642:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005666:	78fb      	ldrb	r3, [r7, #3]
 8005668:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	4413      	add	r3, r2
 8005672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b04      	cmp	r3, #4
 800567e:	d119      	bne.n	80056b4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4413      	add	r3, r2
 8005688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800568c:	461a      	mov	r2, r3
 800568e:	2304      	movs	r3, #4
 8005690:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	4413      	add	r3, r2
 800569a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ac:	f043 0302 	orr.w	r3, r3, #2
 80056b0:	60d3      	str	r3, [r2, #12]
 80056b2:	e101      	b.n	80058b8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ca:	d12b      	bne.n	8005724 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d8:	461a      	mov	r2, r3
 80056da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	212c      	movs	r1, #44	; 0x2c
 80056e6:	fb01 f303 	mul.w	r3, r1, r3
 80056ea:	4413      	add	r3, r2
 80056ec:	3361      	adds	r3, #97	; 0x61
 80056ee:	2207      	movs	r2, #7
 80056f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	0151      	lsls	r1, r2, #5
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	440a      	add	r2, r1
 8005708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800570c:	f043 0302 	orr.w	r3, r3, #2
 8005710:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	4611      	mov	r1, r2
 800571c:	4618      	mov	r0, r3
 800571e:	f005 fa9e 	bl	800ac5e <USB_HC_Halt>
 8005722:	e0c9      	b.n	80058b8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	4413      	add	r3, r2
 800572c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b20      	cmp	r3, #32
 8005738:	d109      	bne.n	800574e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4413      	add	r3, r2
 8005742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005746:	461a      	mov	r2, r3
 8005748:	2320      	movs	r3, #32
 800574a:	6093      	str	r3, [r2, #8]
 800574c:	e0b4      	b.n	80058b8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4413      	add	r3, r2
 8005756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b08      	cmp	r3, #8
 8005762:	d133      	bne.n	80057cc <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	4413      	add	r3, r2
 800576c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	0151      	lsls	r1, r2, #5
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	440a      	add	r2, r1
 800577a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800577e:	f043 0302 	orr.w	r3, r3, #2
 8005782:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	212c      	movs	r1, #44	; 0x2c
 800578a:	fb01 f303 	mul.w	r3, r1, r3
 800578e:	4413      	add	r3, r2
 8005790:	3361      	adds	r3, #97	; 0x61
 8005792:	2205      	movs	r2, #5
 8005794:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	4413      	add	r3, r2
 800579e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a2:	461a      	mov	r2, r3
 80057a4:	2310      	movs	r3, #16
 80057a6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b4:	461a      	mov	r2, r3
 80057b6:	2308      	movs	r3, #8
 80057b8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	4611      	mov	r1, r2
 80057c4:	4618      	mov	r0, r3
 80057c6:	f005 fa4a 	bl	800ac5e <USB_HC_Halt>
 80057ca:	e075      	b.n	80058b8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e2:	d134      	bne.n	800584e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	0151      	lsls	r1, r2, #5
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	440a      	add	r2, r1
 80057fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057fe:	f043 0302 	orr.w	r3, r3, #2
 8005802:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	212c      	movs	r1, #44	; 0x2c
 800580a:	fb01 f303 	mul.w	r3, r1, r3
 800580e:	4413      	add	r3, r2
 8005810:	3361      	adds	r3, #97	; 0x61
 8005812:	2208      	movs	r2, #8
 8005814:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	4413      	add	r3, r2
 800581e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005822:	461a      	mov	r2, r3
 8005824:	2310      	movs	r3, #16
 8005826:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	4413      	add	r3, r2
 8005830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005834:	461a      	mov	r2, r3
 8005836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800583a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	b2d2      	uxtb	r2, r2
 8005844:	4611      	mov	r1, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f005 fa09 	bl	800ac5e <USB_HC_Halt>
 800584c:	e034      	b.n	80058b8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	4413      	add	r3, r2
 8005856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005860:	2b80      	cmp	r3, #128	; 0x80
 8005862:	d129      	bne.n	80058b8 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	0151      	lsls	r1, r2, #5
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	440a      	add	r2, r1
 800587a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800587e:	f043 0302 	orr.w	r3, r3, #2
 8005882:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	212c      	movs	r1, #44	; 0x2c
 800588a:	fb01 f303 	mul.w	r3, r1, r3
 800588e:	4413      	add	r3, r2
 8005890:	3361      	adds	r3, #97	; 0x61
 8005892:	2206      	movs	r2, #6
 8005894:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	4611      	mov	r1, r2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f005 f9dc 	bl	800ac5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b2:	461a      	mov	r2, r3
 80058b4:	2380      	movs	r3, #128	; 0x80
 80058b6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ce:	d122      	bne.n	8005916 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058ea:	f043 0302 	orr.w	r3, r3, #2
 80058ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	4611      	mov	r1, r2
 80058fa:	4618      	mov	r0, r3
 80058fc:	f005 f9af 	bl	800ac5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	4413      	add	r3, r2
 8005908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590c:	461a      	mov	r2, r3
 800590e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005912:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005914:	e2ba      	b.n	8005e8c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	4413      	add	r3, r2
 800591e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b01      	cmp	r3, #1
 800592a:	f040 811b 	bne.w	8005b64 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d019      	beq.n	800596a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	212c      	movs	r1, #44	; 0x2c
 800593c:	fb01 f303 	mul.w	r3, r1, r3
 8005940:	4413      	add	r3, r2
 8005942:	3348      	adds	r3, #72	; 0x48
 8005944:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	0159      	lsls	r1, r3, #5
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	440b      	add	r3, r1
 800594e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005958:	1ad2      	subs	r2, r2, r3
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	202c      	movs	r0, #44	; 0x2c
 8005960:	fb00 f303 	mul.w	r3, r0, r3
 8005964:	440b      	add	r3, r1
 8005966:	3350      	adds	r3, #80	; 0x50
 8005968:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	212c      	movs	r1, #44	; 0x2c
 8005970:	fb01 f303 	mul.w	r3, r1, r3
 8005974:	4413      	add	r3, r2
 8005976:	3361      	adds	r3, #97	; 0x61
 8005978:	2201      	movs	r2, #1
 800597a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	212c      	movs	r1, #44	; 0x2c
 8005982:	fb01 f303 	mul.w	r3, r1, r3
 8005986:	4413      	add	r3, r2
 8005988:	335c      	adds	r3, #92	; 0x5c
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	4413      	add	r3, r2
 8005996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599a:	461a      	mov	r2, r3
 800599c:	2301      	movs	r3, #1
 800599e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	212c      	movs	r1, #44	; 0x2c
 80059a6:	fb01 f303 	mul.w	r3, r1, r3
 80059aa:	4413      	add	r3, r2
 80059ac:	333f      	adds	r3, #63	; 0x3f
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d009      	beq.n	80059c8 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	212c      	movs	r1, #44	; 0x2c
 80059ba:	fb01 f303 	mul.w	r3, r1, r3
 80059be:	4413      	add	r3, r2
 80059c0:	333f      	adds	r3, #63	; 0x3f
 80059c2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d121      	bne.n	8005a0c <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059e2:	f043 0302 	orr.w	r3, r3, #2
 80059e6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	4611      	mov	r1, r2
 80059f2:	4618      	mov	r0, r3
 80059f4:	f005 f933 	bl	800ac5e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a04:	461a      	mov	r2, r3
 8005a06:	2310      	movs	r3, #16
 8005a08:	6093      	str	r3, [r2, #8]
 8005a0a:	e066      	b.n	8005ada <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	212c      	movs	r1, #44	; 0x2c
 8005a12:	fb01 f303 	mul.w	r3, r1, r3
 8005a16:	4413      	add	r3, r2
 8005a18:	333f      	adds	r3, #63	; 0x3f
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d127      	bne.n	8005a70 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a3e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	212c      	movs	r1, #44	; 0x2c
 8005a46:	fb01 f303 	mul.w	r3, r1, r3
 8005a4a:	4413      	add	r3, r2
 8005a4c:	3360      	adds	r3, #96	; 0x60
 8005a4e:	2201      	movs	r2, #1
 8005a50:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	b2d9      	uxtb	r1, r3
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	202c      	movs	r0, #44	; 0x2c
 8005a5c:	fb00 f303 	mul.w	r3, r0, r3
 8005a60:	4413      	add	r3, r2
 8005a62:	3360      	adds	r3, #96	; 0x60
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff fde3 	bl	8005634 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005a6e:	e034      	b.n	8005ada <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	212c      	movs	r1, #44	; 0x2c
 8005a76:	fb01 f303 	mul.w	r3, r1, r3
 8005a7a:	4413      	add	r3, r2
 8005a7c:	333f      	adds	r3, #63	; 0x3f
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d12a      	bne.n	8005ada <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	212c      	movs	r1, #44	; 0x2c
 8005a8a:	fb01 f303 	mul.w	r3, r1, r3
 8005a8e:	4413      	add	r3, r2
 8005a90:	3360      	adds	r3, #96	; 0x60
 8005a92:	2201      	movs	r2, #1
 8005a94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	212c      	movs	r1, #44	; 0x2c
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	3354      	adds	r3, #84	; 0x54
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	f083 0301 	eor.w	r3, r3, #1
 8005aaa:	b2d8      	uxtb	r0, r3
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	212c      	movs	r1, #44	; 0x2c
 8005ab2:	fb01 f303 	mul.w	r3, r1, r3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	3354      	adds	r3, #84	; 0x54
 8005aba:	4602      	mov	r2, r0
 8005abc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	b2d9      	uxtb	r1, r3
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	202c      	movs	r0, #44	; 0x2c
 8005ac8:	fb00 f303 	mul.w	r3, r0, r3
 8005acc:	4413      	add	r3, r2
 8005ace:	3360      	adds	r3, #96	; 0x60
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff fdad 	bl	8005634 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d12b      	bne.n	8005b3a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	212c      	movs	r1, #44	; 0x2c
 8005ae8:	fb01 f303 	mul.w	r3, r1, r3
 8005aec:	4413      	add	r3, r2
 8005aee:	3348      	adds	r3, #72	; 0x48
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	202c      	movs	r0, #44	; 0x2c
 8005af8:	fb00 f202 	mul.w	r2, r0, r2
 8005afc:	440a      	add	r2, r1
 8005afe:	3240      	adds	r2, #64	; 0x40
 8005b00:	8812      	ldrh	r2, [r2, #0]
 8005b02:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 81be 	beq.w	8005e8c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	212c      	movs	r1, #44	; 0x2c
 8005b16:	fb01 f303 	mul.w	r3, r1, r3
 8005b1a:	4413      	add	r3, r2
 8005b1c:	3354      	adds	r3, #84	; 0x54
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	f083 0301 	eor.w	r3, r3, #1
 8005b24:	b2d8      	uxtb	r0, r3
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	212c      	movs	r1, #44	; 0x2c
 8005b2c:	fb01 f303 	mul.w	r3, r1, r3
 8005b30:	4413      	add	r3, r2
 8005b32:	3354      	adds	r3, #84	; 0x54
 8005b34:	4602      	mov	r2, r0
 8005b36:	701a      	strb	r2, [r3, #0]
}
 8005b38:	e1a8      	b.n	8005e8c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	212c      	movs	r1, #44	; 0x2c
 8005b40:	fb01 f303 	mul.w	r3, r1, r3
 8005b44:	4413      	add	r3, r2
 8005b46:	3354      	adds	r3, #84	; 0x54
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	f083 0301 	eor.w	r3, r3, #1
 8005b4e:	b2d8      	uxtb	r0, r3
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	212c      	movs	r1, #44	; 0x2c
 8005b56:	fb01 f303 	mul.w	r3, r1, r3
 8005b5a:	4413      	add	r3, r2
 8005b5c:	3354      	adds	r3, #84	; 0x54
 8005b5e:	4602      	mov	r2, r0
 8005b60:	701a      	strb	r2, [r3, #0]
}
 8005b62:	e193      	b.n	8005e8c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	f040 8106 	bne.w	8005d88 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	0151      	lsls	r1, r2, #5
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	440a      	add	r2, r1
 8005b92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b96:	f023 0302 	bic.w	r3, r3, #2
 8005b9a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	212c      	movs	r1, #44	; 0x2c
 8005ba2:	fb01 f303 	mul.w	r3, r1, r3
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3361      	adds	r3, #97	; 0x61
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d109      	bne.n	8005bc4 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	212c      	movs	r1, #44	; 0x2c
 8005bb6:	fb01 f303 	mul.w	r3, r1, r3
 8005bba:	4413      	add	r3, r2
 8005bbc:	3360      	adds	r3, #96	; 0x60
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	701a      	strb	r2, [r3, #0]
 8005bc2:	e0c9      	b.n	8005d58 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	212c      	movs	r1, #44	; 0x2c
 8005bca:	fb01 f303 	mul.w	r3, r1, r3
 8005bce:	4413      	add	r3, r2
 8005bd0:	3361      	adds	r3, #97	; 0x61
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b05      	cmp	r3, #5
 8005bd6:	d109      	bne.n	8005bec <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	212c      	movs	r1, #44	; 0x2c
 8005bde:	fb01 f303 	mul.w	r3, r1, r3
 8005be2:	4413      	add	r3, r2
 8005be4:	3360      	adds	r3, #96	; 0x60
 8005be6:	2205      	movs	r2, #5
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	e0b5      	b.n	8005d58 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	212c      	movs	r1, #44	; 0x2c
 8005bf2:	fb01 f303 	mul.w	r3, r1, r3
 8005bf6:	4413      	add	r3, r2
 8005bf8:	3361      	adds	r3, #97	; 0x61
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b06      	cmp	r3, #6
 8005bfe:	d009      	beq.n	8005c14 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	212c      	movs	r1, #44	; 0x2c
 8005c06:	fb01 f303 	mul.w	r3, r1, r3
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3361      	adds	r3, #97	; 0x61
 8005c0e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d150      	bne.n	8005cb6 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	212c      	movs	r1, #44	; 0x2c
 8005c1a:	fb01 f303 	mul.w	r3, r1, r3
 8005c1e:	4413      	add	r3, r2
 8005c20:	335c      	adds	r3, #92	; 0x5c
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	6879      	ldr	r1, [r7, #4]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	202c      	movs	r0, #44	; 0x2c
 8005c2c:	fb00 f303 	mul.w	r3, r0, r3
 8005c30:	440b      	add	r3, r1
 8005c32:	335c      	adds	r3, #92	; 0x5c
 8005c34:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	212c      	movs	r1, #44	; 0x2c
 8005c3c:	fb01 f303 	mul.w	r3, r1, r3
 8005c40:	4413      	add	r3, r2
 8005c42:	335c      	adds	r3, #92	; 0x5c
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d912      	bls.n	8005c70 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	212c      	movs	r1, #44	; 0x2c
 8005c50:	fb01 f303 	mul.w	r3, r1, r3
 8005c54:	4413      	add	r3, r2
 8005c56:	335c      	adds	r3, #92	; 0x5c
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	212c      	movs	r1, #44	; 0x2c
 8005c62:	fb01 f303 	mul.w	r3, r1, r3
 8005c66:	4413      	add	r3, r2
 8005c68:	3360      	adds	r3, #96	; 0x60
 8005c6a:	2204      	movs	r2, #4
 8005c6c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005c6e:	e073      	b.n	8005d58 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	212c      	movs	r1, #44	; 0x2c
 8005c76:	fb01 f303 	mul.w	r3, r1, r3
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3360      	adds	r3, #96	; 0x60
 8005c7e:	2202      	movs	r2, #2
 8005c80:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c98:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ca0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cae:	461a      	mov	r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005cb4:	e050      	b.n	8005d58 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	212c      	movs	r1, #44	; 0x2c
 8005cbc:	fb01 f303 	mul.w	r3, r1, r3
 8005cc0:	4413      	add	r3, r2
 8005cc2:	3361      	adds	r3, #97	; 0x61
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d122      	bne.n	8005d10 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	212c      	movs	r1, #44	; 0x2c
 8005cd0:	fb01 f303 	mul.w	r3, r1, r3
 8005cd4:	4413      	add	r3, r2
 8005cd6:	3360      	adds	r3, #96	; 0x60
 8005cd8:	2202      	movs	r2, #2
 8005cda:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cf2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cfa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d08:	461a      	mov	r2, r3
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	e023      	b.n	8005d58 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	212c      	movs	r1, #44	; 0x2c
 8005d16:	fb01 f303 	mul.w	r3, r1, r3
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3361      	adds	r3, #97	; 0x61
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b07      	cmp	r3, #7
 8005d22:	d119      	bne.n	8005d58 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	212c      	movs	r1, #44	; 0x2c
 8005d2a:	fb01 f303 	mul.w	r3, r1, r3
 8005d2e:	4413      	add	r3, r2
 8005d30:	335c      	adds	r3, #92	; 0x5c
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	202c      	movs	r0, #44	; 0x2c
 8005d3c:	fb00 f303 	mul.w	r3, r0, r3
 8005d40:	440b      	add	r3, r1
 8005d42:	335c      	adds	r3, #92	; 0x5c
 8005d44:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	212c      	movs	r1, #44	; 0x2c
 8005d4c:	fb01 f303 	mul.w	r3, r1, r3
 8005d50:	4413      	add	r3, r2
 8005d52:	3360      	adds	r3, #96	; 0x60
 8005d54:	2204      	movs	r2, #4
 8005d56:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d64:	461a      	mov	r2, r3
 8005d66:	2302      	movs	r3, #2
 8005d68:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	b2d9      	uxtb	r1, r3
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	202c      	movs	r0, #44	; 0x2c
 8005d74:	fb00 f303 	mul.w	r3, r0, r3
 8005d78:	4413      	add	r3, r2
 8005d7a:	3360      	adds	r3, #96	; 0x60
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff fc57 	bl	8005634 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005d86:	e081      	b.n	8005e8c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f003 0310 	and.w	r3, r3, #16
 8005d9a:	2b10      	cmp	r3, #16
 8005d9c:	d176      	bne.n	8005e8c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	212c      	movs	r1, #44	; 0x2c
 8005da4:	fb01 f303 	mul.w	r3, r1, r3
 8005da8:	4413      	add	r3, r2
 8005daa:	333f      	adds	r3, #63	; 0x3f
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	2b03      	cmp	r3, #3
 8005db0:	d121      	bne.n	8005df6 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	212c      	movs	r1, #44	; 0x2c
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	335c      	adds	r3, #92	; 0x5c
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	0151      	lsls	r1, r2, #5
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	440a      	add	r2, r1
 8005dda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dde:	f043 0302 	orr.w	r3, r3, #2
 8005de2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	4611      	mov	r1, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f004 ff35 	bl	800ac5e <USB_HC_Halt>
 8005df4:	e041      	b.n	8005e7a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	212c      	movs	r1, #44	; 0x2c
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	4413      	add	r3, r2
 8005e02:	333f      	adds	r3, #63	; 0x3f
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d009      	beq.n	8005e1e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	212c      	movs	r1, #44	; 0x2c
 8005e10:	fb01 f303 	mul.w	r3, r1, r3
 8005e14:	4413      	add	r3, r2
 8005e16:	333f      	adds	r3, #63	; 0x3f
 8005e18:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d12d      	bne.n	8005e7a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	212c      	movs	r1, #44	; 0x2c
 8005e24:	fb01 f303 	mul.w	r3, r1, r3
 8005e28:	4413      	add	r3, r2
 8005e2a:	335c      	adds	r3, #92	; 0x5c
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d120      	bne.n	8005e7a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	212c      	movs	r1, #44	; 0x2c
 8005e3e:	fb01 f303 	mul.w	r3, r1, r3
 8005e42:	4413      	add	r3, r2
 8005e44:	3361      	adds	r3, #97	; 0x61
 8005e46:	2203      	movs	r2, #3
 8005e48:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e64:	f043 0302 	orr.w	r3, r3, #2
 8005e68:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	4611      	mov	r1, r2
 8005e74:	4618      	mov	r0, r3
 8005e76:	f004 fef2 	bl	800ac5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e86:	461a      	mov	r2, r3
 8005e88:	2310      	movs	r3, #16
 8005e8a:	6093      	str	r3, [r2, #8]
}
 8005e8c:	bf00      	nop
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d119      	bne.n	8005ef8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	2304      	movs	r3, #4
 8005ed4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	0151      	lsls	r1, r2, #5
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	440a      	add	r2, r1
 8005eec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ef0:	f043 0302 	orr.w	r3, r3, #2
 8005ef4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005ef6:	e3ca      	b.n	800668e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d13e      	bne.n	8005f8c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	2320      	movs	r3, #32
 8005f1e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	212c      	movs	r1, #44	; 0x2c
 8005f26:	fb01 f303 	mul.w	r3, r1, r3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	333d      	adds	r3, #61	; 0x3d
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	f040 83ac 	bne.w	800668e <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	212c      	movs	r1, #44	; 0x2c
 8005f3c:	fb01 f303 	mul.w	r3, r1, r3
 8005f40:	4413      	add	r3, r2
 8005f42:	333d      	adds	r3, #61	; 0x3d
 8005f44:	2200      	movs	r2, #0
 8005f46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	212c      	movs	r1, #44	; 0x2c
 8005f4e:	fb01 f303 	mul.w	r3, r1, r3
 8005f52:	4413      	add	r3, r2
 8005f54:	3360      	adds	r3, #96	; 0x60
 8005f56:	2202      	movs	r2, #2
 8005f58:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	0151      	lsls	r1, r2, #5
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	440a      	add	r2, r1
 8005f70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f74:	f043 0302 	orr.w	r3, r3, #2
 8005f78:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	4611      	mov	r1, r2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f004 fe6a 	bl	800ac5e <USB_HC_Halt>
}
 8005f8a:	e380      	b.n	800668e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa2:	d122      	bne.n	8005fea <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	0151      	lsls	r1, r2, #5
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	440a      	add	r2, r1
 8005fba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fbe:	f043 0302 	orr.w	r3, r3, #2
 8005fc2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	4611      	mov	r1, r2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f004 fe45 	bl	800ac5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fe6:	6093      	str	r3, [r2, #8]
}
 8005fe8:	e351      	b.n	800668e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d150      	bne.n	80060a2 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	212c      	movs	r1, #44	; 0x2c
 8006006:	fb01 f303 	mul.w	r3, r1, r3
 800600a:	4413      	add	r3, r2
 800600c:	335c      	adds	r3, #92	; 0x5c
 800600e:	2200      	movs	r2, #0
 8006010:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	4413      	add	r3, r2
 800601a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006024:	2b40      	cmp	r3, #64	; 0x40
 8006026:	d111      	bne.n	800604c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	212c      	movs	r1, #44	; 0x2c
 800602e:	fb01 f303 	mul.w	r3, r1, r3
 8006032:	4413      	add	r3, r2
 8006034:	333d      	adds	r3, #61	; 0x3d
 8006036:	2201      	movs	r2, #1
 8006038:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	4413      	add	r3, r2
 8006042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006046:	461a      	mov	r2, r3
 8006048:	2340      	movs	r3, #64	; 0x40
 800604a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	4413      	add	r3, r2
 8006054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	0151      	lsls	r1, r2, #5
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	440a      	add	r2, r1
 8006062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006066:	f043 0302 	orr.w	r3, r3, #2
 800606a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	b2d2      	uxtb	r2, r2
 8006074:	4611      	mov	r1, r2
 8006076:	4618      	mov	r0, r3
 8006078:	f004 fdf1 	bl	800ac5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	4413      	add	r3, r2
 8006084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006088:	461a      	mov	r2, r3
 800608a:	2301      	movs	r3, #1
 800608c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	212c      	movs	r1, #44	; 0x2c
 8006094:	fb01 f303 	mul.w	r3, r1, r3
 8006098:	4413      	add	r3, r2
 800609a:	3361      	adds	r3, #97	; 0x61
 800609c:	2201      	movs	r2, #1
 800609e:	701a      	strb	r2, [r3, #0]
}
 80060a0:	e2f5      	b.n	800668e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b4:	2b40      	cmp	r3, #64	; 0x40
 80060b6:	d13c      	bne.n	8006132 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	212c      	movs	r1, #44	; 0x2c
 80060be:	fb01 f303 	mul.w	r3, r1, r3
 80060c2:	4413      	add	r3, r2
 80060c4:	3361      	adds	r3, #97	; 0x61
 80060c6:	2204      	movs	r2, #4
 80060c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	212c      	movs	r1, #44	; 0x2c
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	4413      	add	r3, r2
 80060d6:	333d      	adds	r3, #61	; 0x3d
 80060d8:	2201      	movs	r2, #1
 80060da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	212c      	movs	r1, #44	; 0x2c
 80060e2:	fb01 f303 	mul.w	r3, r1, r3
 80060e6:	4413      	add	r3, r2
 80060e8:	335c      	adds	r3, #92	; 0x5c
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	0151      	lsls	r1, r2, #5
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	440a      	add	r2, r1
 8006104:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006108:	f043 0302 	orr.w	r3, r3, #2
 800610c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	4611      	mov	r1, r2
 8006118:	4618      	mov	r0, r3
 800611a:	f004 fda0 	bl	800ac5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	4413      	add	r3, r2
 8006126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612a:	461a      	mov	r2, r3
 800612c:	2340      	movs	r3, #64	; 0x40
 800612e:	6093      	str	r3, [r2, #8]
}
 8006130:	e2ad      	b.n	800668e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	4413      	add	r3, r2
 800613a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f003 0308 	and.w	r3, r3, #8
 8006144:	2b08      	cmp	r3, #8
 8006146:	d12a      	bne.n	800619e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	4413      	add	r3, r2
 8006150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006154:	461a      	mov	r2, r3
 8006156:	2308      	movs	r3, #8
 8006158:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	4413      	add	r3, r2
 8006162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	0151      	lsls	r1, r2, #5
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	440a      	add	r2, r1
 8006170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006174:	f043 0302 	orr.w	r3, r3, #2
 8006178:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	b2d2      	uxtb	r2, r2
 8006182:	4611      	mov	r1, r2
 8006184:	4618      	mov	r0, r3
 8006186:	f004 fd6a 	bl	800ac5e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	212c      	movs	r1, #44	; 0x2c
 8006190:	fb01 f303 	mul.w	r3, r1, r3
 8006194:	4413      	add	r3, r2
 8006196:	3361      	adds	r3, #97	; 0x61
 8006198:	2205      	movs	r2, #5
 800619a:	701a      	strb	r2, [r3, #0]
}
 800619c:	e277      	b.n	800668e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f003 0310 	and.w	r3, r3, #16
 80061b0:	2b10      	cmp	r3, #16
 80061b2:	d150      	bne.n	8006256 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	212c      	movs	r1, #44	; 0x2c
 80061ba:	fb01 f303 	mul.w	r3, r1, r3
 80061be:	4413      	add	r3, r2
 80061c0:	335c      	adds	r3, #92	; 0x5c
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	212c      	movs	r1, #44	; 0x2c
 80061cc:	fb01 f303 	mul.w	r3, r1, r3
 80061d0:	4413      	add	r3, r2
 80061d2:	3361      	adds	r3, #97	; 0x61
 80061d4:	2203      	movs	r2, #3
 80061d6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	212c      	movs	r1, #44	; 0x2c
 80061de:	fb01 f303 	mul.w	r3, r1, r3
 80061e2:	4413      	add	r3, r2
 80061e4:	333d      	adds	r3, #61	; 0x3d
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d112      	bne.n	8006212 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	212c      	movs	r1, #44	; 0x2c
 80061f2:	fb01 f303 	mul.w	r3, r1, r3
 80061f6:	4413      	add	r3, r2
 80061f8:	333c      	adds	r3, #60	; 0x3c
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d108      	bne.n	8006212 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	212c      	movs	r1, #44	; 0x2c
 8006206:	fb01 f303 	mul.w	r3, r1, r3
 800620a:	4413      	add	r3, r2
 800620c:	333d      	adds	r3, #61	; 0x3d
 800620e:	2201      	movs	r2, #1
 8006210:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	4413      	add	r3, r2
 800621a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	0151      	lsls	r1, r2, #5
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	440a      	add	r2, r1
 8006228:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800622c:	f043 0302 	orr.w	r3, r3, #2
 8006230:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	4611      	mov	r1, r2
 800623c:	4618      	mov	r0, r3
 800623e:	f004 fd0e 	bl	800ac5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	4413      	add	r3, r2
 800624a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624e:	461a      	mov	r2, r3
 8006250:	2310      	movs	r3, #16
 8006252:	6093      	str	r3, [r2, #8]
}
 8006254:	e21b      	b.n	800668e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	4413      	add	r3, r2
 800625e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006268:	2b80      	cmp	r3, #128	; 0x80
 800626a:	d174      	bne.n	8006356 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d121      	bne.n	80062b8 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	212c      	movs	r1, #44	; 0x2c
 800627a:	fb01 f303 	mul.w	r3, r1, r3
 800627e:	4413      	add	r3, r2
 8006280:	3361      	adds	r3, #97	; 0x61
 8006282:	2206      	movs	r2, #6
 8006284:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	4413      	add	r3, r2
 800628e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	440a      	add	r2, r1
 800629c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a0:	f043 0302 	orr.w	r3, r3, #2
 80062a4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	4611      	mov	r1, r2
 80062b0:	4618      	mov	r0, r3
 80062b2:	f004 fcd4 	bl	800ac5e <USB_HC_Halt>
 80062b6:	e044      	b.n	8006342 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	212c      	movs	r1, #44	; 0x2c
 80062be:	fb01 f303 	mul.w	r3, r1, r3
 80062c2:	4413      	add	r3, r2
 80062c4:	335c      	adds	r3, #92	; 0x5c
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	202c      	movs	r0, #44	; 0x2c
 80062d0:	fb00 f303 	mul.w	r3, r0, r3
 80062d4:	440b      	add	r3, r1
 80062d6:	335c      	adds	r3, #92	; 0x5c
 80062d8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	212c      	movs	r1, #44	; 0x2c
 80062e0:	fb01 f303 	mul.w	r3, r1, r3
 80062e4:	4413      	add	r3, r2
 80062e6:	335c      	adds	r3, #92	; 0x5c
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d920      	bls.n	8006330 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	212c      	movs	r1, #44	; 0x2c
 80062f4:	fb01 f303 	mul.w	r3, r1, r3
 80062f8:	4413      	add	r3, r2
 80062fa:	335c      	adds	r3, #92	; 0x5c
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	212c      	movs	r1, #44	; 0x2c
 8006306:	fb01 f303 	mul.w	r3, r1, r3
 800630a:	4413      	add	r3, r2
 800630c:	3360      	adds	r3, #96	; 0x60
 800630e:	2204      	movs	r2, #4
 8006310:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	b2d9      	uxtb	r1, r3
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	202c      	movs	r0, #44	; 0x2c
 800631c:	fb00 f303 	mul.w	r3, r0, r3
 8006320:	4413      	add	r3, r2
 8006322:	3360      	adds	r3, #96	; 0x60
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff f983 	bl	8005634 <HAL_HCD_HC_NotifyURBChange_Callback>
 800632e:	e008      	b.n	8006342 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	212c      	movs	r1, #44	; 0x2c
 8006336:	fb01 f303 	mul.w	r3, r1, r3
 800633a:	4413      	add	r3, r2
 800633c:	3360      	adds	r3, #96	; 0x60
 800633e:	2202      	movs	r2, #2
 8006340:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	4413      	add	r3, r2
 800634a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634e:	461a      	mov	r2, r3
 8006350:	2380      	movs	r3, #128	; 0x80
 8006352:	6093      	str	r3, [r2, #8]
}
 8006354:	e19b      	b.n	800668e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	4413      	add	r3, r2
 800635e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636c:	d134      	bne.n	80063d8 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	4413      	add	r3, r2
 8006376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	0151      	lsls	r1, r2, #5
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	440a      	add	r2, r1
 8006384:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006388:	f043 0302 	orr.w	r3, r3, #2
 800638c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	b2d2      	uxtb	r2, r2
 8006396:	4611      	mov	r1, r2
 8006398:	4618      	mov	r0, r3
 800639a:	f004 fc60 	bl	800ac5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063aa:	461a      	mov	r2, r3
 80063ac:	2310      	movs	r3, #16
 80063ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063bc:	461a      	mov	r2, r3
 80063be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	212c      	movs	r1, #44	; 0x2c
 80063ca:	fb01 f303 	mul.w	r3, r1, r3
 80063ce:	4413      	add	r3, r2
 80063d0:	3361      	adds	r3, #97	; 0x61
 80063d2:	2208      	movs	r2, #8
 80063d4:	701a      	strb	r2, [r3, #0]
}
 80063d6:	e15a      	b.n	800668e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	f040 814f 	bne.w	800668e <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	440a      	add	r2, r1
 8006406:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800640a:	f023 0302 	bic.w	r3, r3, #2
 800640e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	212c      	movs	r1, #44	; 0x2c
 8006416:	fb01 f303 	mul.w	r3, r1, r3
 800641a:	4413      	add	r3, r2
 800641c:	3361      	adds	r3, #97	; 0x61
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d17d      	bne.n	8006520 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	212c      	movs	r1, #44	; 0x2c
 800642a:	fb01 f303 	mul.w	r3, r1, r3
 800642e:	4413      	add	r3, r2
 8006430:	3360      	adds	r3, #96	; 0x60
 8006432:	2201      	movs	r2, #1
 8006434:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	212c      	movs	r1, #44	; 0x2c
 800643c:	fb01 f303 	mul.w	r3, r1, r3
 8006440:	4413      	add	r3, r2
 8006442:	333f      	adds	r3, #63	; 0x3f
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b02      	cmp	r3, #2
 8006448:	d00a      	beq.n	8006460 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	212c      	movs	r1, #44	; 0x2c
 8006450:	fb01 f303 	mul.w	r3, r1, r3
 8006454:	4413      	add	r3, r2
 8006456:	333f      	adds	r3, #63	; 0x3f
 8006458:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800645a:	2b03      	cmp	r3, #3
 800645c:	f040 8100 	bne.w	8006660 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d113      	bne.n	8006490 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	212c      	movs	r1, #44	; 0x2c
 800646e:	fb01 f303 	mul.w	r3, r1, r3
 8006472:	4413      	add	r3, r2
 8006474:	3355      	adds	r3, #85	; 0x55
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	f083 0301 	eor.w	r3, r3, #1
 800647c:	b2d8      	uxtb	r0, r3
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	212c      	movs	r1, #44	; 0x2c
 8006484:	fb01 f303 	mul.w	r3, r1, r3
 8006488:	4413      	add	r3, r2
 800648a:	3355      	adds	r3, #85	; 0x55
 800648c:	4602      	mov	r2, r0
 800648e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b01      	cmp	r3, #1
 8006496:	f040 80e3 	bne.w	8006660 <HCD_HC_OUT_IRQHandler+0x7cc>
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	212c      	movs	r1, #44	; 0x2c
 80064a0:	fb01 f303 	mul.w	r3, r1, r3
 80064a4:	4413      	add	r3, r2
 80064a6:	334c      	adds	r3, #76	; 0x4c
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 80d8 	beq.w	8006660 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	212c      	movs	r1, #44	; 0x2c
 80064b6:	fb01 f303 	mul.w	r3, r1, r3
 80064ba:	4413      	add	r3, r2
 80064bc:	334c      	adds	r3, #76	; 0x4c
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6879      	ldr	r1, [r7, #4]
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	202c      	movs	r0, #44	; 0x2c
 80064c6:	fb00 f202 	mul.w	r2, r0, r2
 80064ca:	440a      	add	r2, r1
 80064cc:	3240      	adds	r2, #64	; 0x40
 80064ce:	8812      	ldrh	r2, [r2, #0]
 80064d0:	4413      	add	r3, r2
 80064d2:	3b01      	subs	r3, #1
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	202c      	movs	r0, #44	; 0x2c
 80064da:	fb00 f202 	mul.w	r2, r0, r2
 80064de:	440a      	add	r2, r1
 80064e0:	3240      	adds	r2, #64	; 0x40
 80064e2:	8812      	ldrh	r2, [r2, #0]
 80064e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 80b5 	beq.w	8006660 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	212c      	movs	r1, #44	; 0x2c
 80064fc:	fb01 f303 	mul.w	r3, r1, r3
 8006500:	4413      	add	r3, r2
 8006502:	3355      	adds	r3, #85	; 0x55
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	f083 0301 	eor.w	r3, r3, #1
 800650a:	b2d8      	uxtb	r0, r3
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	212c      	movs	r1, #44	; 0x2c
 8006512:	fb01 f303 	mul.w	r3, r1, r3
 8006516:	4413      	add	r3, r2
 8006518:	3355      	adds	r3, #85	; 0x55
 800651a:	4602      	mov	r2, r0
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	e09f      	b.n	8006660 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	212c      	movs	r1, #44	; 0x2c
 8006526:	fb01 f303 	mul.w	r3, r1, r3
 800652a:	4413      	add	r3, r2
 800652c:	3361      	adds	r3, #97	; 0x61
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	2b03      	cmp	r3, #3
 8006532:	d109      	bne.n	8006548 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	212c      	movs	r1, #44	; 0x2c
 800653a:	fb01 f303 	mul.w	r3, r1, r3
 800653e:	4413      	add	r3, r2
 8006540:	3360      	adds	r3, #96	; 0x60
 8006542:	2202      	movs	r2, #2
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	e08b      	b.n	8006660 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	212c      	movs	r1, #44	; 0x2c
 800654e:	fb01 f303 	mul.w	r3, r1, r3
 8006552:	4413      	add	r3, r2
 8006554:	3361      	adds	r3, #97	; 0x61
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b04      	cmp	r3, #4
 800655a:	d109      	bne.n	8006570 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	212c      	movs	r1, #44	; 0x2c
 8006562:	fb01 f303 	mul.w	r3, r1, r3
 8006566:	4413      	add	r3, r2
 8006568:	3360      	adds	r3, #96	; 0x60
 800656a:	2202      	movs	r2, #2
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	e077      	b.n	8006660 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	212c      	movs	r1, #44	; 0x2c
 8006576:	fb01 f303 	mul.w	r3, r1, r3
 800657a:	4413      	add	r3, r2
 800657c:	3361      	adds	r3, #97	; 0x61
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b05      	cmp	r3, #5
 8006582:	d109      	bne.n	8006598 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	212c      	movs	r1, #44	; 0x2c
 800658a:	fb01 f303 	mul.w	r3, r1, r3
 800658e:	4413      	add	r3, r2
 8006590:	3360      	adds	r3, #96	; 0x60
 8006592:	2205      	movs	r2, #5
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	e063      	b.n	8006660 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	212c      	movs	r1, #44	; 0x2c
 800659e:	fb01 f303 	mul.w	r3, r1, r3
 80065a2:	4413      	add	r3, r2
 80065a4:	3361      	adds	r3, #97	; 0x61
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	2b06      	cmp	r3, #6
 80065aa:	d009      	beq.n	80065c0 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	212c      	movs	r1, #44	; 0x2c
 80065b2:	fb01 f303 	mul.w	r3, r1, r3
 80065b6:	4413      	add	r3, r2
 80065b8:	3361      	adds	r3, #97	; 0x61
 80065ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d14f      	bne.n	8006660 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	212c      	movs	r1, #44	; 0x2c
 80065c6:	fb01 f303 	mul.w	r3, r1, r3
 80065ca:	4413      	add	r3, r2
 80065cc:	335c      	adds	r3, #92	; 0x5c
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	202c      	movs	r0, #44	; 0x2c
 80065d8:	fb00 f303 	mul.w	r3, r0, r3
 80065dc:	440b      	add	r3, r1
 80065de:	335c      	adds	r3, #92	; 0x5c
 80065e0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	212c      	movs	r1, #44	; 0x2c
 80065e8:	fb01 f303 	mul.w	r3, r1, r3
 80065ec:	4413      	add	r3, r2
 80065ee:	335c      	adds	r3, #92	; 0x5c
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d912      	bls.n	800661c <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	212c      	movs	r1, #44	; 0x2c
 80065fc:	fb01 f303 	mul.w	r3, r1, r3
 8006600:	4413      	add	r3, r2
 8006602:	335c      	adds	r3, #92	; 0x5c
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	212c      	movs	r1, #44	; 0x2c
 800660e:	fb01 f303 	mul.w	r3, r1, r3
 8006612:	4413      	add	r3, r2
 8006614:	3360      	adds	r3, #96	; 0x60
 8006616:	2204      	movs	r2, #4
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	e021      	b.n	8006660 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	212c      	movs	r1, #44	; 0x2c
 8006622:	fb01 f303 	mul.w	r3, r1, r3
 8006626:	4413      	add	r3, r2
 8006628:	3360      	adds	r3, #96	; 0x60
 800662a:	2202      	movs	r2, #2
 800662c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	4413      	add	r3, r2
 8006636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006644:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800664c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	4413      	add	r3, r2
 8006656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665a:	461a      	mov	r2, r3
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	4413      	add	r3, r2
 8006668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666c:	461a      	mov	r2, r3
 800666e:	2302      	movs	r3, #2
 8006670:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	b2d9      	uxtb	r1, r3
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	202c      	movs	r0, #44	; 0x2c
 800667c:	fb00 f303 	mul.w	r3, r0, r3
 8006680:	4413      	add	r3, r2
 8006682:	3360      	adds	r3, #96	; 0x60
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7fe ffd3 	bl	8005634 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800668e:	bf00      	nop
 8006690:	3720      	adds	r7, #32
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b08a      	sub	sp, #40	; 0x28
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	f003 030f 	and.w	r3, r3, #15
 80066b6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	0c5b      	lsrs	r3, r3, #17
 80066bc:	f003 030f 	and.w	r3, r3, #15
 80066c0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	091b      	lsrs	r3, r3, #4
 80066c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066ca:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d004      	beq.n	80066dc <HCD_RXQLVL_IRQHandler+0x46>
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2b05      	cmp	r3, #5
 80066d6:	f000 80a9 	beq.w	800682c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80066da:	e0aa      	b.n	8006832 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 80a6 	beq.w	8006830 <HCD_RXQLVL_IRQHandler+0x19a>
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	212c      	movs	r1, #44	; 0x2c
 80066ea:	fb01 f303 	mul.w	r3, r1, r3
 80066ee:	4413      	add	r3, r2
 80066f0:	3344      	adds	r3, #68	; 0x44
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 809b 	beq.w	8006830 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	212c      	movs	r1, #44	; 0x2c
 8006700:	fb01 f303 	mul.w	r3, r1, r3
 8006704:	4413      	add	r3, r2
 8006706:	3350      	adds	r3, #80	; 0x50
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	441a      	add	r2, r3
 800670e:	6879      	ldr	r1, [r7, #4]
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	202c      	movs	r0, #44	; 0x2c
 8006714:	fb00 f303 	mul.w	r3, r0, r3
 8006718:	440b      	add	r3, r1
 800671a:	334c      	adds	r3, #76	; 0x4c
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	429a      	cmp	r2, r3
 8006720:	d87a      	bhi.n	8006818 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6818      	ldr	r0, [r3, #0]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	212c      	movs	r1, #44	; 0x2c
 800672c:	fb01 f303 	mul.w	r3, r1, r3
 8006730:	4413      	add	r3, r2
 8006732:	3344      	adds	r3, #68	; 0x44
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	b292      	uxth	r2, r2
 800673a:	4619      	mov	r1, r3
 800673c:	f004 f8e4 	bl	800a908 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	212c      	movs	r1, #44	; 0x2c
 8006746:	fb01 f303 	mul.w	r3, r1, r3
 800674a:	4413      	add	r3, r2
 800674c:	3344      	adds	r3, #68	; 0x44
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	441a      	add	r2, r3
 8006754:	6879      	ldr	r1, [r7, #4]
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	202c      	movs	r0, #44	; 0x2c
 800675a:	fb00 f303 	mul.w	r3, r0, r3
 800675e:	440b      	add	r3, r1
 8006760:	3344      	adds	r3, #68	; 0x44
 8006762:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	212c      	movs	r1, #44	; 0x2c
 800676a:	fb01 f303 	mul.w	r3, r1, r3
 800676e:	4413      	add	r3, r2
 8006770:	3350      	adds	r3, #80	; 0x50
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	441a      	add	r2, r3
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	202c      	movs	r0, #44	; 0x2c
 800677e:	fb00 f303 	mul.w	r3, r0, r3
 8006782:	440b      	add	r3, r1
 8006784:	3350      	adds	r3, #80	; 0x50
 8006786:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	4413      	add	r3, r2
 8006790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	0cdb      	lsrs	r3, r3, #19
 8006798:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800679c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	212c      	movs	r1, #44	; 0x2c
 80067a4:	fb01 f303 	mul.w	r3, r1, r3
 80067a8:	4413      	add	r3, r2
 80067aa:	3340      	adds	r3, #64	; 0x40
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d13c      	bne.n	8006830 <HCD_RXQLVL_IRQHandler+0x19a>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d039      	beq.n	8006830 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067d2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067da:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e8:	461a      	mov	r2, r3
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	212c      	movs	r1, #44	; 0x2c
 80067f4:	fb01 f303 	mul.w	r3, r1, r3
 80067f8:	4413      	add	r3, r2
 80067fa:	3354      	adds	r3, #84	; 0x54
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	f083 0301 	eor.w	r3, r3, #1
 8006802:	b2d8      	uxtb	r0, r3
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	212c      	movs	r1, #44	; 0x2c
 800680a:	fb01 f303 	mul.w	r3, r1, r3
 800680e:	4413      	add	r3, r2
 8006810:	3354      	adds	r3, #84	; 0x54
 8006812:	4602      	mov	r2, r0
 8006814:	701a      	strb	r2, [r3, #0]
      break;
 8006816:	e00b      	b.n	8006830 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	212c      	movs	r1, #44	; 0x2c
 800681e:	fb01 f303 	mul.w	r3, r1, r3
 8006822:	4413      	add	r3, r2
 8006824:	3360      	adds	r3, #96	; 0x60
 8006826:	2204      	movs	r2, #4
 8006828:	701a      	strb	r2, [r3, #0]
      break;
 800682a:	e001      	b.n	8006830 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800682c:	bf00      	nop
 800682e:	e000      	b.n	8006832 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006830:	bf00      	nop
  }
}
 8006832:	bf00      	nop
 8006834:	3728      	adds	r7, #40	; 0x28
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b086      	sub	sp, #24
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006866:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b02      	cmp	r3, #2
 8006870:	d10b      	bne.n	800688a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b01      	cmp	r3, #1
 800687a:	d102      	bne.n	8006882 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7fe feb1 	bl	80055e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	f043 0302 	orr.w	r3, r3, #2
 8006888:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f003 0308 	and.w	r3, r3, #8
 8006890:	2b08      	cmp	r3, #8
 8006892:	d132      	bne.n	80068fa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f043 0308 	orr.w	r3, r3, #8
 800689a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f003 0304 	and.w	r3, r3, #4
 80068a2:	2b04      	cmp	r3, #4
 80068a4:	d126      	bne.n	80068f4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d113      	bne.n	80068d6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80068b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068b8:	d106      	bne.n	80068c8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2102      	movs	r1, #2
 80068c0:	4618      	mov	r0, r3
 80068c2:	f004 f981 	bl	800abc8 <USB_InitFSLSPClkSel>
 80068c6:	e011      	b.n	80068ec <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2101      	movs	r1, #1
 80068ce:	4618      	mov	r0, r3
 80068d0:	f004 f97a 	bl	800abc8 <USB_InitFSLSPClkSel>
 80068d4:	e00a      	b.n	80068ec <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d106      	bne.n	80068ec <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068e4:	461a      	mov	r2, r3
 80068e6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80068ea:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7fe fe8d 	bl	800560c <HAL_HCD_PortEnabled_Callback>
 80068f2:	e002      	b.n	80068fa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7fe fe93 	bl	8005620 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f003 0320 	and.w	r3, r3, #32
 8006900:	2b20      	cmp	r3, #32
 8006902:	d103      	bne.n	800690c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f043 0320 	orr.w	r3, r3, #32
 800690a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006912:	461a      	mov	r2, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	6013      	str	r3, [r2, #0]
}
 8006918:	bf00      	nop
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e12b      	b.n	8006b8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d106      	bne.n	800694c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7fc fcd2 	bl	80032f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2224      	movs	r2, #36	; 0x24
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 0201 	bic.w	r2, r2, #1
 8006962:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006972:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006982:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006984:	f001 f9fc 	bl	8007d80 <HAL_RCC_GetPCLK1Freq>
 8006988:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	4a81      	ldr	r2, [pc, #516]	; (8006b94 <HAL_I2C_Init+0x274>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d807      	bhi.n	80069a4 <HAL_I2C_Init+0x84>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4a80      	ldr	r2, [pc, #512]	; (8006b98 <HAL_I2C_Init+0x278>)
 8006998:	4293      	cmp	r3, r2
 800699a:	bf94      	ite	ls
 800699c:	2301      	movls	r3, #1
 800699e:	2300      	movhi	r3, #0
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	e006      	b.n	80069b2 <HAL_I2C_Init+0x92>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4a7d      	ldr	r2, [pc, #500]	; (8006b9c <HAL_I2C_Init+0x27c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	bf94      	ite	ls
 80069ac:	2301      	movls	r3, #1
 80069ae:	2300      	movhi	r3, #0
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e0e7      	b.n	8006b8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4a78      	ldr	r2, [pc, #480]	; (8006ba0 <HAL_I2C_Init+0x280>)
 80069be:	fba2 2303 	umull	r2, r3, r2, r3
 80069c2:	0c9b      	lsrs	r3, r3, #18
 80069c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	4a6a      	ldr	r2, [pc, #424]	; (8006b94 <HAL_I2C_Init+0x274>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d802      	bhi.n	80069f4 <HAL_I2C_Init+0xd4>
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	3301      	adds	r3, #1
 80069f2:	e009      	b.n	8006a08 <HAL_I2C_Init+0xe8>
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80069fa:	fb02 f303 	mul.w	r3, r2, r3
 80069fe:	4a69      	ldr	r2, [pc, #420]	; (8006ba4 <HAL_I2C_Init+0x284>)
 8006a00:	fba2 2303 	umull	r2, r3, r2, r3
 8006a04:	099b      	lsrs	r3, r3, #6
 8006a06:	3301      	adds	r3, #1
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	6812      	ldr	r2, [r2, #0]
 8006a0c:	430b      	orrs	r3, r1
 8006a0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006a1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	495c      	ldr	r1, [pc, #368]	; (8006b94 <HAL_I2C_Init+0x274>)
 8006a24:	428b      	cmp	r3, r1
 8006a26:	d819      	bhi.n	8006a5c <HAL_I2C_Init+0x13c>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	1e59      	subs	r1, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a36:	1c59      	adds	r1, r3, #1
 8006a38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006a3c:	400b      	ands	r3, r1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <HAL_I2C_Init+0x138>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	1e59      	subs	r1, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a50:	3301      	adds	r3, #1
 8006a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a56:	e051      	b.n	8006afc <HAL_I2C_Init+0x1dc>
 8006a58:	2304      	movs	r3, #4
 8006a5a:	e04f      	b.n	8006afc <HAL_I2C_Init+0x1dc>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d111      	bne.n	8006a88 <HAL_I2C_Init+0x168>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	1e58      	subs	r0, r3, #1
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6859      	ldr	r1, [r3, #4]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	440b      	add	r3, r1
 8006a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a76:	3301      	adds	r3, #1
 8006a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	bf0c      	ite	eq
 8006a80:	2301      	moveq	r3, #1
 8006a82:	2300      	movne	r3, #0
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	e012      	b.n	8006aae <HAL_I2C_Init+0x18e>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	1e58      	subs	r0, r3, #1
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6859      	ldr	r1, [r3, #4]
 8006a90:	460b      	mov	r3, r1
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	0099      	lsls	r1, r3, #2
 8006a98:	440b      	add	r3, r1
 8006a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	bf0c      	ite	eq
 8006aa8:	2301      	moveq	r3, #1
 8006aaa:	2300      	movne	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <HAL_I2C_Init+0x196>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e022      	b.n	8006afc <HAL_I2C_Init+0x1dc>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10e      	bne.n	8006adc <HAL_I2C_Init+0x1bc>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	1e58      	subs	r0, r3, #1
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6859      	ldr	r1, [r3, #4]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	440b      	add	r3, r1
 8006acc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ada:	e00f      	b.n	8006afc <HAL_I2C_Init+0x1dc>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	1e58      	subs	r0, r3, #1
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6859      	ldr	r1, [r3, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	440b      	add	r3, r1
 8006aea:	0099      	lsls	r1, r3, #2
 8006aec:	440b      	add	r3, r1
 8006aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8006af2:	3301      	adds	r3, #1
 8006af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006af8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006afc:	6879      	ldr	r1, [r7, #4]
 8006afe:	6809      	ldr	r1, [r1, #0]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69da      	ldr	r2, [r3, #28]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	431a      	orrs	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006b2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6911      	ldr	r1, [r2, #16]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	68d2      	ldr	r2, [r2, #12]
 8006b36:	4311      	orrs	r1, r2
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	6812      	ldr	r2, [r2, #0]
 8006b3c:	430b      	orrs	r3, r1
 8006b3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	695a      	ldr	r2, [r3, #20]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	431a      	orrs	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0201 	orr.w	r2, r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	000186a0 	.word	0x000186a0
 8006b98:	001e847f 	.word	0x001e847f
 8006b9c:	003d08ff 	.word	0x003d08ff
 8006ba0:	431bde83 	.word	0x431bde83
 8006ba4:	10624dd3 	.word	0x10624dd3

08006ba8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e128      	b.n	8006e0c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d109      	bne.n	8006bda <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a90      	ldr	r2, [pc, #576]	; (8006e14 <HAL_I2S_Init+0x26c>)
 8006bd2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7fc fbd3 	bl	8003380 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2202      	movs	r2, #2
 8006bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	6812      	ldr	r2, [r2, #0]
 8006bec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006bf0:	f023 030f 	bic.w	r3, r3, #15
 8006bf4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d060      	beq.n	8006cc8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d102      	bne.n	8006c14 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006c0e:	2310      	movs	r3, #16
 8006c10:	617b      	str	r3, [r7, #20]
 8006c12:	e001      	b.n	8006c18 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006c14:	2320      	movs	r3, #32
 8006c16:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	2b20      	cmp	r3, #32
 8006c1e:	d802      	bhi.n	8006c26 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006c26:	2001      	movs	r0, #1
 8006c28:	f001 f9e6 	bl	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c2c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c36:	d125      	bne.n	8006c84 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d010      	beq.n	8006c62 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	461a      	mov	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5c:	3305      	adds	r3, #5
 8006c5e:	613b      	str	r3, [r7, #16]
 8006c60:	e01f      	b.n	8006ca2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	461a      	mov	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7e:	3305      	adds	r3, #5
 8006c80:	613b      	str	r3, [r7, #16]
 8006c82:	e00e      	b.n	8006ca2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	461a      	mov	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c9e:	3305      	adds	r3, #5
 8006ca0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	4a5c      	ldr	r2, [pc, #368]	; (8006e18 <HAL_I2S_Init+0x270>)
 8006ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8006caa:	08db      	lsrs	r3, r3, #3
 8006cac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	085b      	lsrs	r3, r3, #1
 8006cbe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	021b      	lsls	r3, r3, #8
 8006cc4:	61bb      	str	r3, [r7, #24]
 8006cc6:	e003      	b.n	8006cd0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006cc8:	2302      	movs	r3, #2
 8006cca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d902      	bls.n	8006cdc <HAL_I2S_Init+0x134>
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	2bff      	cmp	r3, #255	; 0xff
 8006cda:	d907      	bls.n	8006cec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce0:	f043 0210 	orr.w	r2, r3, #16
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e08f      	b.n	8006e0c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	691a      	ldr	r2, [r3, #16]
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	ea42 0103 	orr.w	r1, r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69fa      	ldr	r2, [r7, #28]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006d0a:	f023 030f 	bic.w	r3, r3, #15
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	6851      	ldr	r1, [r2, #4]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	6892      	ldr	r2, [r2, #8]
 8006d16:	4311      	orrs	r1, r2
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	68d2      	ldr	r2, [r2, #12]
 8006d1c:	4311      	orrs	r1, r2
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	6992      	ldr	r2, [r2, #24]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	431a      	orrs	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d2e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d161      	bne.n	8006dfc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a38      	ldr	r2, [pc, #224]	; (8006e1c <HAL_I2S_Init+0x274>)
 8006d3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a37      	ldr	r2, [pc, #220]	; (8006e20 <HAL_I2S_Init+0x278>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d101      	bne.n	8006d4c <HAL_I2S_Init+0x1a4>
 8006d48:	4b36      	ldr	r3, [pc, #216]	; (8006e24 <HAL_I2S_Init+0x27c>)
 8006d4a:	e001      	b.n	8006d50 <HAL_I2S_Init+0x1a8>
 8006d4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	6812      	ldr	r2, [r2, #0]
 8006d56:	4932      	ldr	r1, [pc, #200]	; (8006e20 <HAL_I2S_Init+0x278>)
 8006d58:	428a      	cmp	r2, r1
 8006d5a:	d101      	bne.n	8006d60 <HAL_I2S_Init+0x1b8>
 8006d5c:	4a31      	ldr	r2, [pc, #196]	; (8006e24 <HAL_I2S_Init+0x27c>)
 8006d5e:	e001      	b.n	8006d64 <HAL_I2S_Init+0x1bc>
 8006d60:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006d64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006d68:	f023 030f 	bic.w	r3, r3, #15
 8006d6c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a2b      	ldr	r2, [pc, #172]	; (8006e20 <HAL_I2S_Init+0x278>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d101      	bne.n	8006d7c <HAL_I2S_Init+0x1d4>
 8006d78:	4b2a      	ldr	r3, [pc, #168]	; (8006e24 <HAL_I2S_Init+0x27c>)
 8006d7a:	e001      	b.n	8006d80 <HAL_I2S_Init+0x1d8>
 8006d7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d80:	2202      	movs	r2, #2
 8006d82:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a25      	ldr	r2, [pc, #148]	; (8006e20 <HAL_I2S_Init+0x278>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d101      	bne.n	8006d92 <HAL_I2S_Init+0x1ea>
 8006d8e:	4b25      	ldr	r3, [pc, #148]	; (8006e24 <HAL_I2S_Init+0x27c>)
 8006d90:	e001      	b.n	8006d96 <HAL_I2S_Init+0x1ee>
 8006d92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006da2:	d003      	beq.n	8006dac <HAL_I2S_Init+0x204>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d103      	bne.n	8006db4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006db0:	613b      	str	r3, [r7, #16]
 8006db2:	e001      	b.n	8006db8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006db4:	2300      	movs	r3, #0
 8006db6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	897b      	ldrh	r3, [r7, #10]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006de4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a0d      	ldr	r2, [pc, #52]	; (8006e20 <HAL_I2S_Init+0x278>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d101      	bne.n	8006df4 <HAL_I2S_Init+0x24c>
 8006df0:	4b0c      	ldr	r3, [pc, #48]	; (8006e24 <HAL_I2S_Init+0x27c>)
 8006df2:	e001      	b.n	8006df8 <HAL_I2S_Init+0x250>
 8006df4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006df8:	897a      	ldrh	r2, [r7, #10]
 8006dfa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3720      	adds	r7, #32
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	08006f1f 	.word	0x08006f1f
 8006e18:	cccccccd 	.word	0xcccccccd
 8006e1c:	08007035 	.word	0x08007035
 8006e20:	40003800 	.word	0x40003800
 8006e24:	40003400 	.word	0x40003400

08006e28 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	881a      	ldrh	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7c:	1c9a      	adds	r2, r3, #2
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10e      	bne.n	8006eb8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ea8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7ff ffb8 	bl	8006e28 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006eb8:	bf00      	nop
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68da      	ldr	r2, [r3, #12]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed2:	b292      	uxth	r2, r2
 8006ed4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eda:	1c9a      	adds	r2, r3, #2
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10e      	bne.n	8006f16 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f06:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7ff ff93 	bl	8006e3c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006f16:	bf00      	nop
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b086      	sub	sp, #24
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d13a      	bne.n	8006fb0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d109      	bne.n	8006f58 <I2S_IRQHandler+0x3a>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4e:	2b40      	cmp	r3, #64	; 0x40
 8006f50:	d102      	bne.n	8006f58 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff ffb4 	bl	8006ec0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5e:	2b40      	cmp	r3, #64	; 0x40
 8006f60:	d126      	bne.n	8006fb0 <I2S_IRQHandler+0x92>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f003 0320 	and.w	r3, r3, #32
 8006f6c:	2b20      	cmp	r3, #32
 8006f6e:	d11f      	bne.n	8006fb0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f7e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006f80:	2300      	movs	r3, #0
 8006f82:	613b      	str	r3, [r7, #16]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	613b      	str	r3, [r7, #16]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	613b      	str	r3, [r7, #16]
 8006f94:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa2:	f043 0202 	orr.w	r2, r3, #2
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7ff ff50 	bl	8006e50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d136      	bne.n	800702a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d109      	bne.n	8006fda <I2S_IRQHandler+0xbc>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd0:	2b80      	cmp	r3, #128	; 0x80
 8006fd2:	d102      	bne.n	8006fda <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff ff45 	bl	8006e64 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f003 0308 	and.w	r3, r3, #8
 8006fe0:	2b08      	cmp	r3, #8
 8006fe2:	d122      	bne.n	800702a <I2S_IRQHandler+0x10c>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f003 0320 	and.w	r3, r3, #32
 8006fee:	2b20      	cmp	r3, #32
 8006ff0:	d11b      	bne.n	800702a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007000:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007002:	2300      	movs	r3, #0
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701c:	f043 0204 	orr.w	r2, r3, #4
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff ff13 	bl	8006e50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800702a:	bf00      	nop
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4aa2      	ldr	r2, [pc, #648]	; (80072d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d101      	bne.n	8007052 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800704e:	4ba2      	ldr	r3, [pc, #648]	; (80072d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007050:	e001      	b.n	8007056 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007052:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a9b      	ldr	r2, [pc, #620]	; (80072d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d101      	bne.n	8007070 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800706c:	4b9a      	ldr	r3, [pc, #616]	; (80072d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800706e:	e001      	b.n	8007074 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007070:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007080:	d004      	beq.n	800708c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	f040 8099 	bne.w	80071be <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b02      	cmp	r3, #2
 8007094:	d107      	bne.n	80070a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f925 	bl	80072f0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d107      	bne.n	80070c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d002      	beq.n	80070c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f9c8 	bl	8007450 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c6:	2b40      	cmp	r3, #64	; 0x40
 80070c8:	d13a      	bne.n	8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f003 0320 	and.w	r3, r3, #32
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d035      	beq.n	8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a7e      	ldr	r2, [pc, #504]	; (80072d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d101      	bne.n	80070e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80070de:	4b7e      	ldr	r3, [pc, #504]	; (80072d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80070e0:	e001      	b.n	80070e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80070e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4979      	ldr	r1, [pc, #484]	; (80072d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80070ee:	428b      	cmp	r3, r1
 80070f0:	d101      	bne.n	80070f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80070f2:	4b79      	ldr	r3, [pc, #484]	; (80072d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80070f4:	e001      	b.n	80070fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80070f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80070fe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800710e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007132:	f043 0202 	orr.w	r2, r3, #2
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff fe88 	bl	8006e50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b08      	cmp	r3, #8
 8007148:	f040 80be 	bne.w	80072c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 80b8 	beq.w	80072c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007166:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a59      	ldr	r2, [pc, #356]	; (80072d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d101      	bne.n	8007176 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007172:	4b59      	ldr	r3, [pc, #356]	; (80072d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007174:	e001      	b.n	800717a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007176:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4954      	ldr	r1, [pc, #336]	; (80072d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007182:	428b      	cmp	r3, r1
 8007184:	d101      	bne.n	800718a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007186:	4b54      	ldr	r3, [pc, #336]	; (80072d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007188:	e001      	b.n	800718e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800718a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800718e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007192:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007194:	2300      	movs	r3, #0
 8007196:	60bb      	str	r3, [r7, #8]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	60bb      	str	r3, [r7, #8]
 80071a0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ae:	f043 0204 	orr.w	r2, r3, #4
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7ff fe4a 	bl	8006e50 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80071bc:	e084      	b.n	80072c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d107      	bne.n	80071d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f8be 	bl	8007354 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d107      	bne.n	80071f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f8fd 	bl	80073ec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f8:	2b40      	cmp	r3, #64	; 0x40
 80071fa:	d12f      	bne.n	800725c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b00      	cmp	r3, #0
 8007204:	d02a      	beq.n	800725c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007214:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a2e      	ldr	r2, [pc, #184]	; (80072d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d101      	bne.n	8007224 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007220:	4b2d      	ldr	r3, [pc, #180]	; (80072d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007222:	e001      	b.n	8007228 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007224:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4929      	ldr	r1, [pc, #164]	; (80072d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007230:	428b      	cmp	r3, r1
 8007232:	d101      	bne.n	8007238 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007234:	4b28      	ldr	r3, [pc, #160]	; (80072d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007236:	e001      	b.n	800723c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007238:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800723c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007240:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724e:	f043 0202 	orr.w	r2, r3, #2
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7ff fdfa 	bl	8006e50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	f003 0308 	and.w	r3, r3, #8
 8007262:	2b08      	cmp	r3, #8
 8007264:	d131      	bne.n	80072ca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f003 0320 	and.w	r3, r3, #32
 800726c:	2b00      	cmp	r3, #0
 800726e:	d02c      	beq.n	80072ca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a17      	ldr	r2, [pc, #92]	; (80072d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d101      	bne.n	800727e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800727a:	4b17      	ldr	r3, [pc, #92]	; (80072d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800727c:	e001      	b.n	8007282 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800727e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4912      	ldr	r1, [pc, #72]	; (80072d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800728a:	428b      	cmp	r3, r1
 800728c:	d101      	bne.n	8007292 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800728e:	4b12      	ldr	r3, [pc, #72]	; (80072d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007290:	e001      	b.n	8007296 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8007292:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007296:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800729a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80072aa:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b8:	f043 0204 	orr.w	r2, r3, #4
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff fdc5 	bl	8006e50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80072c6:	e000      	b.n	80072ca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80072c8:	bf00      	nop
}
 80072ca:	bf00      	nop
 80072cc:	3720      	adds	r7, #32
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	40003800 	.word	0x40003800
 80072d8:	40003400 	.word	0x40003400

080072dc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	1c99      	adds	r1, r3, #2
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	6251      	str	r1, [r2, #36]	; 0x24
 8007302:	881a      	ldrh	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800730e:	b29b      	uxth	r3, r3
 8007310:	3b01      	subs	r3, #1
 8007312:	b29a      	uxth	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800731c:	b29b      	uxth	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d113      	bne.n	800734a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007330:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007336:	b29b      	uxth	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d106      	bne.n	800734a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7ff ffc9 	bl	80072dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007360:	1c99      	adds	r1, r3, #2
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	6251      	str	r1, [r2, #36]	; 0x24
 8007366:	8819      	ldrh	r1, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a1d      	ldr	r2, [pc, #116]	; (80073e4 <I2SEx_TxISR_I2SExt+0x90>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d101      	bne.n	8007376 <I2SEx_TxISR_I2SExt+0x22>
 8007372:	4b1d      	ldr	r3, [pc, #116]	; (80073e8 <I2SEx_TxISR_I2SExt+0x94>)
 8007374:	e001      	b.n	800737a <I2SEx_TxISR_I2SExt+0x26>
 8007376:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800737a:	460a      	mov	r2, r1
 800737c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007382:	b29b      	uxth	r3, r3
 8007384:	3b01      	subs	r3, #1
 8007386:	b29a      	uxth	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007390:	b29b      	uxth	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d121      	bne.n	80073da <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a12      	ldr	r2, [pc, #72]	; (80073e4 <I2SEx_TxISR_I2SExt+0x90>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d101      	bne.n	80073a4 <I2SEx_TxISR_I2SExt+0x50>
 80073a0:	4b11      	ldr	r3, [pc, #68]	; (80073e8 <I2SEx_TxISR_I2SExt+0x94>)
 80073a2:	e001      	b.n	80073a8 <I2SEx_TxISR_I2SExt+0x54>
 80073a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073a8:	685a      	ldr	r2, [r3, #4]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	490d      	ldr	r1, [pc, #52]	; (80073e4 <I2SEx_TxISR_I2SExt+0x90>)
 80073b0:	428b      	cmp	r3, r1
 80073b2:	d101      	bne.n	80073b8 <I2SEx_TxISR_I2SExt+0x64>
 80073b4:	4b0c      	ldr	r3, [pc, #48]	; (80073e8 <I2SEx_TxISR_I2SExt+0x94>)
 80073b6:	e001      	b.n	80073bc <I2SEx_TxISR_I2SExt+0x68>
 80073b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80073c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d106      	bne.n	80073da <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7ff ff81 	bl	80072dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80073da:	bf00      	nop
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	40003800 	.word	0x40003800
 80073e8:	40003400 	.word	0x40003400

080073ec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68d8      	ldr	r0, [r3, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fe:	1c99      	adds	r1, r3, #2
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007404:	b282      	uxth	r2, r0
 8007406:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800740c:	b29b      	uxth	r3, r3
 800740e:	3b01      	subs	r3, #1
 8007410:	b29a      	uxth	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800741a:	b29b      	uxth	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d113      	bne.n	8007448 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800742e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007434:	b29b      	uxth	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d106      	bne.n	8007448 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff ff4a 	bl	80072dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007448:	bf00      	nop
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a20      	ldr	r2, [pc, #128]	; (80074e0 <I2SEx_RxISR_I2SExt+0x90>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d101      	bne.n	8007466 <I2SEx_RxISR_I2SExt+0x16>
 8007462:	4b20      	ldr	r3, [pc, #128]	; (80074e4 <I2SEx_RxISR_I2SExt+0x94>)
 8007464:	e001      	b.n	800746a <I2SEx_RxISR_I2SExt+0x1a>
 8007466:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800746a:	68d8      	ldr	r0, [r3, #12]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007470:	1c99      	adds	r1, r3, #2
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007476:	b282      	uxth	r2, r0
 8007478:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800747e:	b29b      	uxth	r3, r3
 8007480:	3b01      	subs	r3, #1
 8007482:	b29a      	uxth	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800748c:	b29b      	uxth	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d121      	bne.n	80074d6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a12      	ldr	r2, [pc, #72]	; (80074e0 <I2SEx_RxISR_I2SExt+0x90>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d101      	bne.n	80074a0 <I2SEx_RxISR_I2SExt+0x50>
 800749c:	4b11      	ldr	r3, [pc, #68]	; (80074e4 <I2SEx_RxISR_I2SExt+0x94>)
 800749e:	e001      	b.n	80074a4 <I2SEx_RxISR_I2SExt+0x54>
 80074a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	490d      	ldr	r1, [pc, #52]	; (80074e0 <I2SEx_RxISR_I2SExt+0x90>)
 80074ac:	428b      	cmp	r3, r1
 80074ae:	d101      	bne.n	80074b4 <I2SEx_RxISR_I2SExt+0x64>
 80074b0:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <I2SEx_RxISR_I2SExt+0x94>)
 80074b2:	e001      	b.n	80074b8 <I2SEx_RxISR_I2SExt+0x68>
 80074b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80074bc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d106      	bne.n	80074d6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7ff ff03 	bl	80072dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80074d6:	bf00      	nop
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	40003800 	.word	0x40003800
 80074e4:	40003400 	.word	0x40003400

080074e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e264      	b.n	80079c4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d075      	beq.n	80075f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007506:	4ba3      	ldr	r3, [pc, #652]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f003 030c 	and.w	r3, r3, #12
 800750e:	2b04      	cmp	r3, #4
 8007510:	d00c      	beq.n	800752c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007512:	4ba0      	ldr	r3, [pc, #640]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800751a:	2b08      	cmp	r3, #8
 800751c:	d112      	bne.n	8007544 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800751e:	4b9d      	ldr	r3, [pc, #628]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800752a:	d10b      	bne.n	8007544 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800752c:	4b99      	ldr	r3, [pc, #612]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d05b      	beq.n	80075f0 <HAL_RCC_OscConfig+0x108>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d157      	bne.n	80075f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e23f      	b.n	80079c4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800754c:	d106      	bne.n	800755c <HAL_RCC_OscConfig+0x74>
 800754e:	4b91      	ldr	r3, [pc, #580]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a90      	ldr	r2, [pc, #576]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 8007554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007558:	6013      	str	r3, [r2, #0]
 800755a:	e01d      	b.n	8007598 <HAL_RCC_OscConfig+0xb0>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007564:	d10c      	bne.n	8007580 <HAL_RCC_OscConfig+0x98>
 8007566:	4b8b      	ldr	r3, [pc, #556]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a8a      	ldr	r2, [pc, #552]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 800756c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007570:	6013      	str	r3, [r2, #0]
 8007572:	4b88      	ldr	r3, [pc, #544]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a87      	ldr	r2, [pc, #540]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 8007578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	e00b      	b.n	8007598 <HAL_RCC_OscConfig+0xb0>
 8007580:	4b84      	ldr	r3, [pc, #528]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a83      	ldr	r2, [pc, #524]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 8007586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	4b81      	ldr	r3, [pc, #516]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a80      	ldr	r2, [pc, #512]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 8007592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d013      	beq.n	80075c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075a0:	f7fc fb92 	bl	8003cc8 <HAL_GetTick>
 80075a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075a6:	e008      	b.n	80075ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075a8:	f7fc fb8e 	bl	8003cc8 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b64      	cmp	r3, #100	; 0x64
 80075b4:	d901      	bls.n	80075ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e204      	b.n	80079c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075ba:	4b76      	ldr	r3, [pc, #472]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0f0      	beq.n	80075a8 <HAL_RCC_OscConfig+0xc0>
 80075c6:	e014      	b.n	80075f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075c8:	f7fc fb7e 	bl	8003cc8 <HAL_GetTick>
 80075cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075ce:	e008      	b.n	80075e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075d0:	f7fc fb7a 	bl	8003cc8 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	2b64      	cmp	r3, #100	; 0x64
 80075dc:	d901      	bls.n	80075e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e1f0      	b.n	80079c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075e2:	4b6c      	ldr	r3, [pc, #432]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1f0      	bne.n	80075d0 <HAL_RCC_OscConfig+0xe8>
 80075ee:	e000      	b.n	80075f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0302 	and.w	r3, r3, #2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d063      	beq.n	80076c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075fe:	4b65      	ldr	r3, [pc, #404]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f003 030c 	and.w	r3, r3, #12
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00b      	beq.n	8007622 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800760a:	4b62      	ldr	r3, [pc, #392]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007612:	2b08      	cmp	r3, #8
 8007614:	d11c      	bne.n	8007650 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007616:	4b5f      	ldr	r3, [pc, #380]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d116      	bne.n	8007650 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007622:	4b5c      	ldr	r3, [pc, #368]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d005      	beq.n	800763a <HAL_RCC_OscConfig+0x152>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d001      	beq.n	800763a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e1c4      	b.n	80079c4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800763a:	4b56      	ldr	r3, [pc, #344]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	4952      	ldr	r1, [pc, #328]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 800764a:	4313      	orrs	r3, r2
 800764c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800764e:	e03a      	b.n	80076c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d020      	beq.n	800769a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007658:	4b4f      	ldr	r3, [pc, #316]	; (8007798 <HAL_RCC_OscConfig+0x2b0>)
 800765a:	2201      	movs	r2, #1
 800765c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800765e:	f7fc fb33 	bl	8003cc8 <HAL_GetTick>
 8007662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007664:	e008      	b.n	8007678 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007666:	f7fc fb2f 	bl	8003cc8 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	2b02      	cmp	r3, #2
 8007672:	d901      	bls.n	8007678 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e1a5      	b.n	80079c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007678:	4b46      	ldr	r3, [pc, #280]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d0f0      	beq.n	8007666 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007684:	4b43      	ldr	r3, [pc, #268]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	00db      	lsls	r3, r3, #3
 8007692:	4940      	ldr	r1, [pc, #256]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 8007694:	4313      	orrs	r3, r2
 8007696:	600b      	str	r3, [r1, #0]
 8007698:	e015      	b.n	80076c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800769a:	4b3f      	ldr	r3, [pc, #252]	; (8007798 <HAL_RCC_OscConfig+0x2b0>)
 800769c:	2200      	movs	r2, #0
 800769e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a0:	f7fc fb12 	bl	8003cc8 <HAL_GetTick>
 80076a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076a6:	e008      	b.n	80076ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076a8:	f7fc fb0e 	bl	8003cc8 <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d901      	bls.n	80076ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e184      	b.n	80079c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076ba:	4b36      	ldr	r3, [pc, #216]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1f0      	bne.n	80076a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0308 	and.w	r3, r3, #8
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d030      	beq.n	8007734 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d016      	beq.n	8007708 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076da:	4b30      	ldr	r3, [pc, #192]	; (800779c <HAL_RCC_OscConfig+0x2b4>)
 80076dc:	2201      	movs	r2, #1
 80076de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076e0:	f7fc faf2 	bl	8003cc8 <HAL_GetTick>
 80076e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076e6:	e008      	b.n	80076fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076e8:	f7fc faee 	bl	8003cc8 <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d901      	bls.n	80076fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e164      	b.n	80079c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076fa:	4b26      	ldr	r3, [pc, #152]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 80076fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	2b00      	cmp	r3, #0
 8007704:	d0f0      	beq.n	80076e8 <HAL_RCC_OscConfig+0x200>
 8007706:	e015      	b.n	8007734 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007708:	4b24      	ldr	r3, [pc, #144]	; (800779c <HAL_RCC_OscConfig+0x2b4>)
 800770a:	2200      	movs	r2, #0
 800770c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800770e:	f7fc fadb 	bl	8003cc8 <HAL_GetTick>
 8007712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007714:	e008      	b.n	8007728 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007716:	f7fc fad7 	bl	8003cc8 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	2b02      	cmp	r3, #2
 8007722:	d901      	bls.n	8007728 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e14d      	b.n	80079c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007728:	4b1a      	ldr	r3, [pc, #104]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 800772a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800772c:	f003 0302 	and.w	r3, r3, #2
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1f0      	bne.n	8007716 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 80a0 	beq.w	8007882 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007742:	2300      	movs	r3, #0
 8007744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007746:	4b13      	ldr	r3, [pc, #76]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10f      	bne.n	8007772 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007752:	2300      	movs	r3, #0
 8007754:	60bb      	str	r3, [r7, #8]
 8007756:	4b0f      	ldr	r3, [pc, #60]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775a:	4a0e      	ldr	r2, [pc, #56]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 800775c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007760:	6413      	str	r3, [r2, #64]	; 0x40
 8007762:	4b0c      	ldr	r3, [pc, #48]	; (8007794 <HAL_RCC_OscConfig+0x2ac>)
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800776a:	60bb      	str	r3, [r7, #8]
 800776c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800776e:	2301      	movs	r3, #1
 8007770:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007772:	4b0b      	ldr	r3, [pc, #44]	; (80077a0 <HAL_RCC_OscConfig+0x2b8>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800777a:	2b00      	cmp	r3, #0
 800777c:	d121      	bne.n	80077c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800777e:	4b08      	ldr	r3, [pc, #32]	; (80077a0 <HAL_RCC_OscConfig+0x2b8>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a07      	ldr	r2, [pc, #28]	; (80077a0 <HAL_RCC_OscConfig+0x2b8>)
 8007784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800778a:	f7fc fa9d 	bl	8003cc8 <HAL_GetTick>
 800778e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007790:	e011      	b.n	80077b6 <HAL_RCC_OscConfig+0x2ce>
 8007792:	bf00      	nop
 8007794:	40023800 	.word	0x40023800
 8007798:	42470000 	.word	0x42470000
 800779c:	42470e80 	.word	0x42470e80
 80077a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077a4:	f7fc fa90 	bl	8003cc8 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d901      	bls.n	80077b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e106      	b.n	80079c4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077b6:	4b85      	ldr	r3, [pc, #532]	; (80079cc <HAL_RCC_OscConfig+0x4e4>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d0f0      	beq.n	80077a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d106      	bne.n	80077d8 <HAL_RCC_OscConfig+0x2f0>
 80077ca:	4b81      	ldr	r3, [pc, #516]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 80077cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ce:	4a80      	ldr	r2, [pc, #512]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 80077d0:	f043 0301 	orr.w	r3, r3, #1
 80077d4:	6713      	str	r3, [r2, #112]	; 0x70
 80077d6:	e01c      	b.n	8007812 <HAL_RCC_OscConfig+0x32a>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	2b05      	cmp	r3, #5
 80077de:	d10c      	bne.n	80077fa <HAL_RCC_OscConfig+0x312>
 80077e0:	4b7b      	ldr	r3, [pc, #492]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 80077e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e4:	4a7a      	ldr	r2, [pc, #488]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 80077e6:	f043 0304 	orr.w	r3, r3, #4
 80077ea:	6713      	str	r3, [r2, #112]	; 0x70
 80077ec:	4b78      	ldr	r3, [pc, #480]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 80077ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f0:	4a77      	ldr	r2, [pc, #476]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 80077f2:	f043 0301 	orr.w	r3, r3, #1
 80077f6:	6713      	str	r3, [r2, #112]	; 0x70
 80077f8:	e00b      	b.n	8007812 <HAL_RCC_OscConfig+0x32a>
 80077fa:	4b75      	ldr	r3, [pc, #468]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 80077fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fe:	4a74      	ldr	r2, [pc, #464]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 8007800:	f023 0301 	bic.w	r3, r3, #1
 8007804:	6713      	str	r3, [r2, #112]	; 0x70
 8007806:	4b72      	ldr	r3, [pc, #456]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 8007808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780a:	4a71      	ldr	r2, [pc, #452]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 800780c:	f023 0304 	bic.w	r3, r3, #4
 8007810:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d015      	beq.n	8007846 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800781a:	f7fc fa55 	bl	8003cc8 <HAL_GetTick>
 800781e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007820:	e00a      	b.n	8007838 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007822:	f7fc fa51 	bl	8003cc8 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007830:	4293      	cmp	r3, r2
 8007832:	d901      	bls.n	8007838 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e0c5      	b.n	80079c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007838:	4b65      	ldr	r3, [pc, #404]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 800783a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783c:	f003 0302 	and.w	r3, r3, #2
 8007840:	2b00      	cmp	r3, #0
 8007842:	d0ee      	beq.n	8007822 <HAL_RCC_OscConfig+0x33a>
 8007844:	e014      	b.n	8007870 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007846:	f7fc fa3f 	bl	8003cc8 <HAL_GetTick>
 800784a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800784c:	e00a      	b.n	8007864 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800784e:	f7fc fa3b 	bl	8003cc8 <HAL_GetTick>
 8007852:	4602      	mov	r2, r0
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	f241 3288 	movw	r2, #5000	; 0x1388
 800785c:	4293      	cmp	r3, r2
 800785e:	d901      	bls.n	8007864 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e0af      	b.n	80079c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007864:	4b5a      	ldr	r3, [pc, #360]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 8007866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007868:	f003 0302 	and.w	r3, r3, #2
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1ee      	bne.n	800784e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007870:	7dfb      	ldrb	r3, [r7, #23]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d105      	bne.n	8007882 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007876:	4b56      	ldr	r3, [pc, #344]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	4a55      	ldr	r2, [pc, #340]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 800787c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007880:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 809b 	beq.w	80079c2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800788c:	4b50      	ldr	r3, [pc, #320]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f003 030c 	and.w	r3, r3, #12
 8007894:	2b08      	cmp	r3, #8
 8007896:	d05c      	beq.n	8007952 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	2b02      	cmp	r3, #2
 800789e:	d141      	bne.n	8007924 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078a0:	4b4c      	ldr	r3, [pc, #304]	; (80079d4 <HAL_RCC_OscConfig+0x4ec>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078a6:	f7fc fa0f 	bl	8003cc8 <HAL_GetTick>
 80078aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078ac:	e008      	b.n	80078c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078ae:	f7fc fa0b 	bl	8003cc8 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d901      	bls.n	80078c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e081      	b.n	80079c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078c0:	4b43      	ldr	r3, [pc, #268]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1f0      	bne.n	80078ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	69da      	ldr	r2, [r3, #28]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	431a      	orrs	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	019b      	lsls	r3, r3, #6
 80078dc:	431a      	orrs	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e2:	085b      	lsrs	r3, r3, #1
 80078e4:	3b01      	subs	r3, #1
 80078e6:	041b      	lsls	r3, r3, #16
 80078e8:	431a      	orrs	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ee:	061b      	lsls	r3, r3, #24
 80078f0:	4937      	ldr	r1, [pc, #220]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078f6:	4b37      	ldr	r3, [pc, #220]	; (80079d4 <HAL_RCC_OscConfig+0x4ec>)
 80078f8:	2201      	movs	r2, #1
 80078fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078fc:	f7fc f9e4 	bl	8003cc8 <HAL_GetTick>
 8007900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007902:	e008      	b.n	8007916 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007904:	f7fc f9e0 	bl	8003cc8 <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	2b02      	cmp	r3, #2
 8007910:	d901      	bls.n	8007916 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e056      	b.n	80079c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007916:	4b2e      	ldr	r3, [pc, #184]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0f0      	beq.n	8007904 <HAL_RCC_OscConfig+0x41c>
 8007922:	e04e      	b.n	80079c2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007924:	4b2b      	ldr	r3, [pc, #172]	; (80079d4 <HAL_RCC_OscConfig+0x4ec>)
 8007926:	2200      	movs	r2, #0
 8007928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800792a:	f7fc f9cd 	bl	8003cc8 <HAL_GetTick>
 800792e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007930:	e008      	b.n	8007944 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007932:	f7fc f9c9 	bl	8003cc8 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	2b02      	cmp	r3, #2
 800793e:	d901      	bls.n	8007944 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e03f      	b.n	80079c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007944:	4b22      	ldr	r3, [pc, #136]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1f0      	bne.n	8007932 <HAL_RCC_OscConfig+0x44a>
 8007950:	e037      	b.n	80079c2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d101      	bne.n	800795e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e032      	b.n	80079c4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800795e:	4b1c      	ldr	r3, [pc, #112]	; (80079d0 <HAL_RCC_OscConfig+0x4e8>)
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d028      	beq.n	80079be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007976:	429a      	cmp	r2, r3
 8007978:	d121      	bne.n	80079be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007984:	429a      	cmp	r2, r3
 8007986:	d11a      	bne.n	80079be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800798e:	4013      	ands	r3, r2
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007994:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007996:	4293      	cmp	r3, r2
 8007998:	d111      	bne.n	80079be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a4:	085b      	lsrs	r3, r3, #1
 80079a6:	3b01      	subs	r3, #1
 80079a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d107      	bne.n	80079be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d001      	beq.n	80079c2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e000      	b.n	80079c4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	40007000 	.word	0x40007000
 80079d0:	40023800 	.word	0x40023800
 80079d4:	42470060 	.word	0x42470060

080079d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e0cc      	b.n	8007b86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80079ec:	4b68      	ldr	r3, [pc, #416]	; (8007b90 <HAL_RCC_ClockConfig+0x1b8>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0307 	and.w	r3, r3, #7
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d90c      	bls.n	8007a14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079fa:	4b65      	ldr	r3, [pc, #404]	; (8007b90 <HAL_RCC_ClockConfig+0x1b8>)
 80079fc:	683a      	ldr	r2, [r7, #0]
 80079fe:	b2d2      	uxtb	r2, r2
 8007a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a02:	4b63      	ldr	r3, [pc, #396]	; (8007b90 <HAL_RCC_ClockConfig+0x1b8>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0307 	and.w	r3, r3, #7
 8007a0a:	683a      	ldr	r2, [r7, #0]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d001      	beq.n	8007a14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e0b8      	b.n	8007b86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 0302 	and.w	r3, r3, #2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d020      	beq.n	8007a62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0304 	and.w	r3, r3, #4
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d005      	beq.n	8007a38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a2c:	4b59      	ldr	r3, [pc, #356]	; (8007b94 <HAL_RCC_ClockConfig+0x1bc>)
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	4a58      	ldr	r2, [pc, #352]	; (8007b94 <HAL_RCC_ClockConfig+0x1bc>)
 8007a32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0308 	and.w	r3, r3, #8
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d005      	beq.n	8007a50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a44:	4b53      	ldr	r3, [pc, #332]	; (8007b94 <HAL_RCC_ClockConfig+0x1bc>)
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	4a52      	ldr	r2, [pc, #328]	; (8007b94 <HAL_RCC_ClockConfig+0x1bc>)
 8007a4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a50:	4b50      	ldr	r3, [pc, #320]	; (8007b94 <HAL_RCC_ClockConfig+0x1bc>)
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	494d      	ldr	r1, [pc, #308]	; (8007b94 <HAL_RCC_ClockConfig+0x1bc>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d044      	beq.n	8007af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d107      	bne.n	8007a86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a76:	4b47      	ldr	r3, [pc, #284]	; (8007b94 <HAL_RCC_ClockConfig+0x1bc>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d119      	bne.n	8007ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e07f      	b.n	8007b86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d003      	beq.n	8007a96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d107      	bne.n	8007aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a96:	4b3f      	ldr	r3, [pc, #252]	; (8007b94 <HAL_RCC_ClockConfig+0x1bc>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d109      	bne.n	8007ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e06f      	b.n	8007b86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007aa6:	4b3b      	ldr	r3, [pc, #236]	; (8007b94 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0302 	and.w	r3, r3, #2
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e067      	b.n	8007b86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ab6:	4b37      	ldr	r3, [pc, #220]	; (8007b94 <HAL_RCC_ClockConfig+0x1bc>)
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f023 0203 	bic.w	r2, r3, #3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	4934      	ldr	r1, [pc, #208]	; (8007b94 <HAL_RCC_ClockConfig+0x1bc>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ac8:	f7fc f8fe 	bl	8003cc8 <HAL_GetTick>
 8007acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ace:	e00a      	b.n	8007ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ad0:	f7fc f8fa 	bl	8003cc8 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d901      	bls.n	8007ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e04f      	b.n	8007b86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ae6:	4b2b      	ldr	r3, [pc, #172]	; (8007b94 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f003 020c 	and.w	r2, r3, #12
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d1eb      	bne.n	8007ad0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007af8:	4b25      	ldr	r3, [pc, #148]	; (8007b90 <HAL_RCC_ClockConfig+0x1b8>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0307 	and.w	r3, r3, #7
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d20c      	bcs.n	8007b20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b06:	4b22      	ldr	r3, [pc, #136]	; (8007b90 <HAL_RCC_ClockConfig+0x1b8>)
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	b2d2      	uxtb	r2, r2
 8007b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b0e:	4b20      	ldr	r3, [pc, #128]	; (8007b90 <HAL_RCC_ClockConfig+0x1b8>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0307 	and.w	r3, r3, #7
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d001      	beq.n	8007b20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e032      	b.n	8007b86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d008      	beq.n	8007b3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b2c:	4b19      	ldr	r3, [pc, #100]	; (8007b94 <HAL_RCC_ClockConfig+0x1bc>)
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	4916      	ldr	r1, [pc, #88]	; (8007b94 <HAL_RCC_ClockConfig+0x1bc>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0308 	and.w	r3, r3, #8
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d009      	beq.n	8007b5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b4a:	4b12      	ldr	r3, [pc, #72]	; (8007b94 <HAL_RCC_ClockConfig+0x1bc>)
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	00db      	lsls	r3, r3, #3
 8007b58:	490e      	ldr	r1, [pc, #56]	; (8007b94 <HAL_RCC_ClockConfig+0x1bc>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b5e:	f000 f821 	bl	8007ba4 <HAL_RCC_GetSysClockFreq>
 8007b62:	4602      	mov	r2, r0
 8007b64:	4b0b      	ldr	r3, [pc, #44]	; (8007b94 <HAL_RCC_ClockConfig+0x1bc>)
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	091b      	lsrs	r3, r3, #4
 8007b6a:	f003 030f 	and.w	r3, r3, #15
 8007b6e:	490a      	ldr	r1, [pc, #40]	; (8007b98 <HAL_RCC_ClockConfig+0x1c0>)
 8007b70:	5ccb      	ldrb	r3, [r1, r3]
 8007b72:	fa22 f303 	lsr.w	r3, r2, r3
 8007b76:	4a09      	ldr	r2, [pc, #36]	; (8007b9c <HAL_RCC_ClockConfig+0x1c4>)
 8007b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007b7a:	4b09      	ldr	r3, [pc, #36]	; (8007ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fb fea2 	bl	80038c8 <HAL_InitTick>

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	40023c00 	.word	0x40023c00
 8007b94:	40023800 	.word	0x40023800
 8007b98:	0801ec58 	.word	0x0801ec58
 8007b9c:	20000008 	.word	0x20000008
 8007ba0:	2000000c 	.word	0x2000000c

08007ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ba4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	607b      	str	r3, [r7, #4]
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bbc:	4b67      	ldr	r3, [pc, #412]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f003 030c 	and.w	r3, r3, #12
 8007bc4:	2b08      	cmp	r3, #8
 8007bc6:	d00d      	beq.n	8007be4 <HAL_RCC_GetSysClockFreq+0x40>
 8007bc8:	2b08      	cmp	r3, #8
 8007bca:	f200 80bd 	bhi.w	8007d48 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d002      	beq.n	8007bd8 <HAL_RCC_GetSysClockFreq+0x34>
 8007bd2:	2b04      	cmp	r3, #4
 8007bd4:	d003      	beq.n	8007bde <HAL_RCC_GetSysClockFreq+0x3a>
 8007bd6:	e0b7      	b.n	8007d48 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007bd8:	4b61      	ldr	r3, [pc, #388]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007bda:	60bb      	str	r3, [r7, #8]
       break;
 8007bdc:	e0b7      	b.n	8007d4e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007bde:	4b61      	ldr	r3, [pc, #388]	; (8007d64 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007be0:	60bb      	str	r3, [r7, #8]
      break;
 8007be2:	e0b4      	b.n	8007d4e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007be4:	4b5d      	ldr	r3, [pc, #372]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007bee:	4b5b      	ldr	r3, [pc, #364]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d04d      	beq.n	8007c96 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bfa:	4b58      	ldr	r3, [pc, #352]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	099b      	lsrs	r3, r3, #6
 8007c00:	461a      	mov	r2, r3
 8007c02:	f04f 0300 	mov.w	r3, #0
 8007c06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007c0a:	f04f 0100 	mov.w	r1, #0
 8007c0e:	ea02 0800 	and.w	r8, r2, r0
 8007c12:	ea03 0901 	and.w	r9, r3, r1
 8007c16:	4640      	mov	r0, r8
 8007c18:	4649      	mov	r1, r9
 8007c1a:	f04f 0200 	mov.w	r2, #0
 8007c1e:	f04f 0300 	mov.w	r3, #0
 8007c22:	014b      	lsls	r3, r1, #5
 8007c24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007c28:	0142      	lsls	r2, r0, #5
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	ebb0 0008 	subs.w	r0, r0, r8
 8007c32:	eb61 0109 	sbc.w	r1, r1, r9
 8007c36:	f04f 0200 	mov.w	r2, #0
 8007c3a:	f04f 0300 	mov.w	r3, #0
 8007c3e:	018b      	lsls	r3, r1, #6
 8007c40:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007c44:	0182      	lsls	r2, r0, #6
 8007c46:	1a12      	subs	r2, r2, r0
 8007c48:	eb63 0301 	sbc.w	r3, r3, r1
 8007c4c:	f04f 0000 	mov.w	r0, #0
 8007c50:	f04f 0100 	mov.w	r1, #0
 8007c54:	00d9      	lsls	r1, r3, #3
 8007c56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c5a:	00d0      	lsls	r0, r2, #3
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	eb12 0208 	adds.w	r2, r2, r8
 8007c64:	eb43 0309 	adc.w	r3, r3, r9
 8007c68:	f04f 0000 	mov.w	r0, #0
 8007c6c:	f04f 0100 	mov.w	r1, #0
 8007c70:	0259      	lsls	r1, r3, #9
 8007c72:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007c76:	0250      	lsls	r0, r2, #9
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4619      	mov	r1, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	461a      	mov	r2, r3
 8007c84:	f04f 0300 	mov.w	r3, #0
 8007c88:	f7f9 f85e 	bl	8000d48 <__aeabi_uldivmod>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	460b      	mov	r3, r1
 8007c90:	4613      	mov	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
 8007c94:	e04a      	b.n	8007d2c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c96:	4b31      	ldr	r3, [pc, #196]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	099b      	lsrs	r3, r3, #6
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	f04f 0300 	mov.w	r3, #0
 8007ca2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007ca6:	f04f 0100 	mov.w	r1, #0
 8007caa:	ea02 0400 	and.w	r4, r2, r0
 8007cae:	ea03 0501 	and.w	r5, r3, r1
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	f04f 0200 	mov.w	r2, #0
 8007cba:	f04f 0300 	mov.w	r3, #0
 8007cbe:	014b      	lsls	r3, r1, #5
 8007cc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007cc4:	0142      	lsls	r2, r0, #5
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	4619      	mov	r1, r3
 8007cca:	1b00      	subs	r0, r0, r4
 8007ccc:	eb61 0105 	sbc.w	r1, r1, r5
 8007cd0:	f04f 0200 	mov.w	r2, #0
 8007cd4:	f04f 0300 	mov.w	r3, #0
 8007cd8:	018b      	lsls	r3, r1, #6
 8007cda:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007cde:	0182      	lsls	r2, r0, #6
 8007ce0:	1a12      	subs	r2, r2, r0
 8007ce2:	eb63 0301 	sbc.w	r3, r3, r1
 8007ce6:	f04f 0000 	mov.w	r0, #0
 8007cea:	f04f 0100 	mov.w	r1, #0
 8007cee:	00d9      	lsls	r1, r3, #3
 8007cf0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007cf4:	00d0      	lsls	r0, r2, #3
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	1912      	adds	r2, r2, r4
 8007cfc:	eb45 0303 	adc.w	r3, r5, r3
 8007d00:	f04f 0000 	mov.w	r0, #0
 8007d04:	f04f 0100 	mov.w	r1, #0
 8007d08:	0299      	lsls	r1, r3, #10
 8007d0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007d0e:	0290      	lsls	r0, r2, #10
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	4610      	mov	r0, r2
 8007d16:	4619      	mov	r1, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	f04f 0300 	mov.w	r3, #0
 8007d20:	f7f9 f812 	bl	8000d48 <__aeabi_uldivmod>
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	4613      	mov	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d2c:	4b0b      	ldr	r3, [pc, #44]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	0c1b      	lsrs	r3, r3, #16
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	3301      	adds	r3, #1
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d44:	60bb      	str	r3, [r7, #8]
      break;
 8007d46:	e002      	b.n	8007d4e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d48:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007d4a:	60bb      	str	r3, [r7, #8]
      break;
 8007d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007d5a:	bf00      	nop
 8007d5c:	40023800 	.word	0x40023800
 8007d60:	00f42400 	.word	0x00f42400
 8007d64:	007a1200 	.word	0x007a1200

08007d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d6c:	4b03      	ldr	r3, [pc, #12]	; (8007d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	20000008 	.word	0x20000008

08007d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007d84:	f7ff fff0 	bl	8007d68 <HAL_RCC_GetHCLKFreq>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	0a9b      	lsrs	r3, r3, #10
 8007d90:	f003 0307 	and.w	r3, r3, #7
 8007d94:	4903      	ldr	r1, [pc, #12]	; (8007da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d96:	5ccb      	ldrb	r3, [r1, r3]
 8007d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	40023800 	.word	0x40023800
 8007da4:	0801ec68 	.word	0x0801ec68

08007da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007dac:	f7ff ffdc 	bl	8007d68 <HAL_RCC_GetHCLKFreq>
 8007db0:	4602      	mov	r2, r0
 8007db2:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	0b5b      	lsrs	r3, r3, #13
 8007db8:	f003 0307 	and.w	r3, r3, #7
 8007dbc:	4903      	ldr	r1, [pc, #12]	; (8007dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dbe:	5ccb      	ldrb	r3, [r1, r3]
 8007dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	40023800 	.word	0x40023800
 8007dcc:	0801ec68 	.word	0x0801ec68

08007dd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	220f      	movs	r2, #15
 8007dde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007de0:	4b12      	ldr	r3, [pc, #72]	; (8007e2c <HAL_RCC_GetClockConfig+0x5c>)
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f003 0203 	and.w	r2, r3, #3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007dec:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <HAL_RCC_GetClockConfig+0x5c>)
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007df8:	4b0c      	ldr	r3, [pc, #48]	; (8007e2c <HAL_RCC_GetClockConfig+0x5c>)
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007e04:	4b09      	ldr	r3, [pc, #36]	; (8007e2c <HAL_RCC_GetClockConfig+0x5c>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	08db      	lsrs	r3, r3, #3
 8007e0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007e12:	4b07      	ldr	r3, [pc, #28]	; (8007e30 <HAL_RCC_GetClockConfig+0x60>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0207 	and.w	r2, r3, #7
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	601a      	str	r2, [r3, #0]
}
 8007e1e:	bf00      	nop
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	40023800 	.word	0x40023800
 8007e30:	40023c00 	.word	0x40023c00

08007e34 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d105      	bne.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d035      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e5c:	4b62      	ldr	r3, [pc, #392]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007e62:	f7fb ff31 	bl	8003cc8 <HAL_GetTick>
 8007e66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e68:	e008      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007e6a:	f7fb ff2d 	bl	8003cc8 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d901      	bls.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e0b0      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e7c:	4b5b      	ldr	r3, [pc, #364]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1f0      	bne.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	019a      	lsls	r2, r3, #6
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	071b      	lsls	r3, r3, #28
 8007e94:	4955      	ldr	r1, [pc, #340]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e9c:	4b52      	ldr	r3, [pc, #328]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ea2:	f7fb ff11 	bl	8003cc8 <HAL_GetTick>
 8007ea6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ea8:	e008      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007eaa:	f7fb ff0d 	bl	8003cc8 <HAL_GetTick>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d901      	bls.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e090      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ebc:	4b4b      	ldr	r3, [pc, #300]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d0f0      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0302 	and.w	r3, r3, #2
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f000 8083 	beq.w	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60fb      	str	r3, [r7, #12]
 8007eda:	4b44      	ldr	r3, [pc, #272]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ede:	4a43      	ldr	r2, [pc, #268]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ee6:	4b41      	ldr	r3, [pc, #260]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007ef2:	4b3f      	ldr	r3, [pc, #252]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a3e      	ldr	r2, [pc, #248]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007efc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007efe:	f7fb fee3 	bl	8003cc8 <HAL_GetTick>
 8007f02:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007f04:	e008      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007f06:	f7fb fedf 	bl	8003cc8 <HAL_GetTick>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d901      	bls.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e062      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007f18:	4b35      	ldr	r3, [pc, #212]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d0f0      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007f24:	4b31      	ldr	r3, [pc, #196]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f2c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d02f      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d028      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f42:	4b2a      	ldr	r3, [pc, #168]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f4a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007f4c:	4b29      	ldr	r3, [pc, #164]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007f4e:	2201      	movs	r2, #1
 8007f50:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007f52:	4b28      	ldr	r3, [pc, #160]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007f58:	4a24      	ldr	r2, [pc, #144]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007f5e:	4b23      	ldr	r3, [pc, #140]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d114      	bne.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007f6a:	f7fb fead 	bl	8003cc8 <HAL_GetTick>
 8007f6e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f70:	e00a      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f72:	f7fb fea9 	bl	8003cc8 <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d901      	bls.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e02a      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f88:	4b18      	ldr	r3, [pc, #96]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d0ee      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fa0:	d10d      	bne.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007fa2:	4b12      	ldr	r3, [pc, #72]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fb6:	490d      	ldr	r1, [pc, #52]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	608b      	str	r3, [r1, #8]
 8007fbc:	e005      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007fbe:	4b0b      	ldr	r3, [pc, #44]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	4a0a      	ldr	r2, [pc, #40]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007fc4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007fc8:	6093      	str	r3, [r2, #8]
 8007fca:	4b08      	ldr	r3, [pc, #32]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007fcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fd6:	4905      	ldr	r1, [pc, #20]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	42470068 	.word	0x42470068
 8007fec:	40023800 	.word	0x40023800
 8007ff0:	40007000 	.word	0x40007000
 8007ff4:	42470e40 	.word	0x42470e40

08007ff8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b087      	sub	sp, #28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800800c:	2300      	movs	r3, #0
 800800e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d13e      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008016:	4b23      	ldr	r3, [pc, #140]	; (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800801e:	60fb      	str	r3, [r7, #12]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d005      	beq.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d12f      	bne.n	800808c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800802c:	4b1e      	ldr	r3, [pc, #120]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800802e:	617b      	str	r3, [r7, #20]
          break;
 8008030:	e02f      	b.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008032:	4b1c      	ldr	r3, [pc, #112]	; (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800803a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800803e:	d108      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008040:	4b18      	ldr	r3, [pc, #96]	; (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008048:	4a18      	ldr	r2, [pc, #96]	; (80080ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800804a:	fbb2 f3f3 	udiv	r3, r2, r3
 800804e:	613b      	str	r3, [r7, #16]
 8008050:	e007      	b.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008052:	4b14      	ldr	r3, [pc, #80]	; (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800805a:	4a15      	ldr	r2, [pc, #84]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800805c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008060:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008062:	4b10      	ldr	r3, [pc, #64]	; (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008068:	099b      	lsrs	r3, r3, #6
 800806a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	fb02 f303 	mul.w	r3, r2, r3
 8008074:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008076:	4b0b      	ldr	r3, [pc, #44]	; (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800807c:	0f1b      	lsrs	r3, r3, #28
 800807e:	f003 0307 	and.w	r3, r3, #7
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	fbb2 f3f3 	udiv	r3, r2, r3
 8008088:	617b      	str	r3, [r7, #20]
          break;
 800808a:	e002      	b.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800808c:	2300      	movs	r3, #0
 800808e:	617b      	str	r3, [r7, #20]
          break;
 8008090:	bf00      	nop
        }
      }
      break;
 8008092:	bf00      	nop
    }
  }
  return frequency;
 8008094:	697b      	ldr	r3, [r7, #20]
}
 8008096:	4618      	mov	r0, r3
 8008098:	371c      	adds	r7, #28
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	40023800 	.word	0x40023800
 80080a8:	00bb8000 	.word	0x00bb8000
 80080ac:	007a1200 	.word	0x007a1200
 80080b0:	00f42400 	.word	0x00f42400

080080b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e07b      	b.n	80081be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d108      	bne.n	80080e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080d6:	d009      	beq.n	80080ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	61da      	str	r2, [r3, #28]
 80080de:	e005      	b.n	80080ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d106      	bne.n	800810c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7fb f9ba 	bl	8003480 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2202      	movs	r2, #2
 8008110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008122:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008134:	431a      	orrs	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800813e:	431a      	orrs	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	f003 0302 	and.w	r3, r3, #2
 8008148:	431a      	orrs	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	431a      	orrs	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800815c:	431a      	orrs	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008166:	431a      	orrs	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008170:	ea42 0103 	orr.w	r1, r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008178:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	430a      	orrs	r2, r1
 8008182:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	0c1b      	lsrs	r3, r3, #16
 800818a:	f003 0104 	and.w	r1, r3, #4
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	f003 0210 	and.w	r2, r3, #16
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	430a      	orrs	r2, r1
 800819c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	69da      	ldr	r2, [r3, #28]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b082      	sub	sp, #8
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e041      	b.n	800825c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d106      	bne.n	80081f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7fb f98f 	bl	8003510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2202      	movs	r2, #2
 80081f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	3304      	adds	r3, #4
 8008202:	4619      	mov	r1, r3
 8008204:	4610      	mov	r0, r2
 8008206:	f000 fcbd 	bl	8008b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b01      	cmp	r3, #1
 8008276:	d001      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e04e      	b.n	800831a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2202      	movs	r2, #2
 8008280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68da      	ldr	r2, [r3, #12]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0201 	orr.w	r2, r2, #1
 8008292:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a23      	ldr	r2, [pc, #140]	; (8008328 <HAL_TIM_Base_Start_IT+0xc4>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d022      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a6:	d01d      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a1f      	ldr	r2, [pc, #124]	; (800832c <HAL_TIM_Base_Start_IT+0xc8>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d018      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a1e      	ldr	r2, [pc, #120]	; (8008330 <HAL_TIM_Base_Start_IT+0xcc>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d013      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a1c      	ldr	r2, [pc, #112]	; (8008334 <HAL_TIM_Base_Start_IT+0xd0>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d00e      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a1b      	ldr	r2, [pc, #108]	; (8008338 <HAL_TIM_Base_Start_IT+0xd4>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d009      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a19      	ldr	r2, [pc, #100]	; (800833c <HAL_TIM_Base_Start_IT+0xd8>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d004      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a18      	ldr	r2, [pc, #96]	; (8008340 <HAL_TIM_Base_Start_IT+0xdc>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d111      	bne.n	8008308 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f003 0307 	and.w	r3, r3, #7
 80082ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2b06      	cmp	r3, #6
 80082f4:	d010      	beq.n	8008318 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f042 0201 	orr.w	r2, r2, #1
 8008304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008306:	e007      	b.n	8008318 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f042 0201 	orr.w	r2, r2, #1
 8008316:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	40010000 	.word	0x40010000
 800832c:	40000400 	.word	0x40000400
 8008330:	40000800 	.word	0x40000800
 8008334:	40000c00 	.word	0x40000c00
 8008338:	40010400 	.word	0x40010400
 800833c:	40014000 	.word	0x40014000
 8008340:	40001800 	.word	0x40001800

08008344 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e041      	b.n	80083da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d106      	bne.n	8008370 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f839 	bl	80083e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2202      	movs	r2, #2
 8008374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	3304      	adds	r3, #4
 8008380:	4619      	mov	r1, r3
 8008382:	4610      	mov	r0, r2
 8008384:	f000 fbfe 	bl	8008b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80083ea:	bf00      	nop
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
	...

080083f8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d109      	bne.n	8008420 <HAL_TIM_PWM_Start_IT+0x28>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b01      	cmp	r3, #1
 8008416:	bf14      	ite	ne
 8008418:	2301      	movne	r3, #1
 800841a:	2300      	moveq	r3, #0
 800841c:	b2db      	uxtb	r3, r3
 800841e:	e022      	b.n	8008466 <HAL_TIM_PWM_Start_IT+0x6e>
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2b04      	cmp	r3, #4
 8008424:	d109      	bne.n	800843a <HAL_TIM_PWM_Start_IT+0x42>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b01      	cmp	r3, #1
 8008430:	bf14      	ite	ne
 8008432:	2301      	movne	r3, #1
 8008434:	2300      	moveq	r3, #0
 8008436:	b2db      	uxtb	r3, r3
 8008438:	e015      	b.n	8008466 <HAL_TIM_PWM_Start_IT+0x6e>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b08      	cmp	r3, #8
 800843e:	d109      	bne.n	8008454 <HAL_TIM_PWM_Start_IT+0x5c>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b01      	cmp	r3, #1
 800844a:	bf14      	ite	ne
 800844c:	2301      	movne	r3, #1
 800844e:	2300      	moveq	r3, #0
 8008450:	b2db      	uxtb	r3, r3
 8008452:	e008      	b.n	8008466 <HAL_TIM_PWM_Start_IT+0x6e>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b01      	cmp	r3, #1
 800845e:	bf14      	ite	ne
 8008460:	2301      	movne	r3, #1
 8008462:	2300      	moveq	r3, #0
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e0c7      	b.n	80085fe <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d104      	bne.n	800847e <HAL_TIM_PWM_Start_IT+0x86>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2202      	movs	r2, #2
 8008478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800847c:	e013      	b.n	80084a6 <HAL_TIM_PWM_Start_IT+0xae>
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2b04      	cmp	r3, #4
 8008482:	d104      	bne.n	800848e <HAL_TIM_PWM_Start_IT+0x96>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2202      	movs	r2, #2
 8008488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800848c:	e00b      	b.n	80084a6 <HAL_TIM_PWM_Start_IT+0xae>
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b08      	cmp	r3, #8
 8008492:	d104      	bne.n	800849e <HAL_TIM_PWM_Start_IT+0xa6>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2202      	movs	r2, #2
 8008498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800849c:	e003      	b.n	80084a6 <HAL_TIM_PWM_Start_IT+0xae>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2202      	movs	r2, #2
 80084a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b0c      	cmp	r3, #12
 80084aa:	d841      	bhi.n	8008530 <HAL_TIM_PWM_Start_IT+0x138>
 80084ac:	a201      	add	r2, pc, #4	; (adr r2, 80084b4 <HAL_TIM_PWM_Start_IT+0xbc>)
 80084ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b2:	bf00      	nop
 80084b4:	080084e9 	.word	0x080084e9
 80084b8:	08008531 	.word	0x08008531
 80084bc:	08008531 	.word	0x08008531
 80084c0:	08008531 	.word	0x08008531
 80084c4:	080084fb 	.word	0x080084fb
 80084c8:	08008531 	.word	0x08008531
 80084cc:	08008531 	.word	0x08008531
 80084d0:	08008531 	.word	0x08008531
 80084d4:	0800850d 	.word	0x0800850d
 80084d8:	08008531 	.word	0x08008531
 80084dc:	08008531 	.word	0x08008531
 80084e0:	08008531 	.word	0x08008531
 80084e4:	0800851f 	.word	0x0800851f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68da      	ldr	r2, [r3, #12]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0202 	orr.w	r2, r2, #2
 80084f6:	60da      	str	r2, [r3, #12]
      break;
 80084f8:	e01d      	b.n	8008536 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68da      	ldr	r2, [r3, #12]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f042 0204 	orr.w	r2, r2, #4
 8008508:	60da      	str	r2, [r3, #12]
      break;
 800850a:	e014      	b.n	8008536 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68da      	ldr	r2, [r3, #12]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f042 0208 	orr.w	r2, r2, #8
 800851a:	60da      	str	r2, [r3, #12]
      break;
 800851c:	e00b      	b.n	8008536 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68da      	ldr	r2, [r3, #12]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f042 0210 	orr.w	r2, r2, #16
 800852c:	60da      	str	r2, [r3, #12]
      break;
 800852e:	e002      	b.n	8008536 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	73fb      	strb	r3, [r7, #15]
      break;
 8008534:	bf00      	nop
  }

  if (status == HAL_OK)
 8008536:	7bfb      	ldrb	r3, [r7, #15]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d15f      	bne.n	80085fc <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2201      	movs	r2, #1
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	4618      	mov	r0, r3
 8008546:	f000 fe07 	bl	8009158 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a2e      	ldr	r2, [pc, #184]	; (8008608 <HAL_TIM_PWM_Start_IT+0x210>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d004      	beq.n	800855e <HAL_TIM_PWM_Start_IT+0x166>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a2c      	ldr	r2, [pc, #176]	; (800860c <HAL_TIM_PWM_Start_IT+0x214>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d101      	bne.n	8008562 <HAL_TIM_PWM_Start_IT+0x16a>
 800855e:	2301      	movs	r3, #1
 8008560:	e000      	b.n	8008564 <HAL_TIM_PWM_Start_IT+0x16c>
 8008562:	2300      	movs	r3, #0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d007      	beq.n	8008578 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008576:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a22      	ldr	r2, [pc, #136]	; (8008608 <HAL_TIM_PWM_Start_IT+0x210>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d022      	beq.n	80085c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800858a:	d01d      	beq.n	80085c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a1f      	ldr	r2, [pc, #124]	; (8008610 <HAL_TIM_PWM_Start_IT+0x218>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d018      	beq.n	80085c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a1e      	ldr	r2, [pc, #120]	; (8008614 <HAL_TIM_PWM_Start_IT+0x21c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d013      	beq.n	80085c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a1c      	ldr	r2, [pc, #112]	; (8008618 <HAL_TIM_PWM_Start_IT+0x220>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d00e      	beq.n	80085c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a17      	ldr	r2, [pc, #92]	; (800860c <HAL_TIM_PWM_Start_IT+0x214>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d009      	beq.n	80085c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a18      	ldr	r2, [pc, #96]	; (800861c <HAL_TIM_PWM_Start_IT+0x224>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d004      	beq.n	80085c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a17      	ldr	r2, [pc, #92]	; (8008620 <HAL_TIM_PWM_Start_IT+0x228>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d111      	bne.n	80085ec <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2b06      	cmp	r3, #6
 80085d8:	d010      	beq.n	80085fc <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f042 0201 	orr.w	r2, r2, #1
 80085e8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085ea:	e007      	b.n	80085fc <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f042 0201 	orr.w	r2, r2, #1
 80085fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	40010000 	.word	0x40010000
 800860c:	40010400 	.word	0x40010400
 8008610:	40000400 	.word	0x40000400
 8008614:	40000800 	.word	0x40000800
 8008618:	40000c00 	.word	0x40000c00
 800861c:	40014000 	.word	0x40014000
 8008620:	40001800 	.word	0x40001800

08008624 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	f003 0302 	and.w	r3, r3, #2
 8008636:	2b02      	cmp	r3, #2
 8008638:	d122      	bne.n	8008680 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	2b02      	cmp	r3, #2
 8008646:	d11b      	bne.n	8008680 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f06f 0202 	mvn.w	r2, #2
 8008650:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	f003 0303 	and.w	r3, r3, #3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d003      	beq.n	800866e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fa77 	bl	8008b5a <HAL_TIM_IC_CaptureCallback>
 800866c:	e005      	b.n	800867a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fa69 	bl	8008b46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7f9 fdf3 	bl	8002260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	f003 0304 	and.w	r3, r3, #4
 800868a:	2b04      	cmp	r3, #4
 800868c:	d122      	bne.n	80086d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	f003 0304 	and.w	r3, r3, #4
 8008698:	2b04      	cmp	r3, #4
 800869a:	d11b      	bne.n	80086d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f06f 0204 	mvn.w	r2, #4
 80086a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2202      	movs	r2, #2
 80086aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fa4d 	bl	8008b5a <HAL_TIM_IC_CaptureCallback>
 80086c0:	e005      	b.n	80086ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fa3f 	bl	8008b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7f9 fdc9 	bl	8002260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	f003 0308 	and.w	r3, r3, #8
 80086de:	2b08      	cmp	r3, #8
 80086e0:	d122      	bne.n	8008728 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	f003 0308 	and.w	r3, r3, #8
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d11b      	bne.n	8008728 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f06f 0208 	mvn.w	r2, #8
 80086f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2204      	movs	r2, #4
 80086fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	f003 0303 	and.w	r3, r3, #3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d003      	beq.n	8008716 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fa23 	bl	8008b5a <HAL_TIM_IC_CaptureCallback>
 8008714:	e005      	b.n	8008722 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fa15 	bl	8008b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7f9 fd9f 	bl	8002260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	f003 0310 	and.w	r3, r3, #16
 8008732:	2b10      	cmp	r3, #16
 8008734:	d122      	bne.n	800877c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f003 0310 	and.w	r3, r3, #16
 8008740:	2b10      	cmp	r3, #16
 8008742:	d11b      	bne.n	800877c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f06f 0210 	mvn.w	r2, #16
 800874c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2208      	movs	r2, #8
 8008752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f9f9 	bl	8008b5a <HAL_TIM_IC_CaptureCallback>
 8008768:	e005      	b.n	8008776 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f9eb 	bl	8008b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7f9 fd75 	bl	8002260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	2b01      	cmp	r3, #1
 8008788:	d10e      	bne.n	80087a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	f003 0301 	and.w	r3, r3, #1
 8008794:	2b01      	cmp	r3, #1
 8008796:	d107      	bne.n	80087a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f06f 0201 	mvn.w	r2, #1
 80087a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7fa f8d0 	bl	8002948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087b2:	2b80      	cmp	r3, #128	; 0x80
 80087b4:	d10e      	bne.n	80087d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087c0:	2b80      	cmp	r3, #128	; 0x80
 80087c2:	d107      	bne.n	80087d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80087cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fd6e 	bl	80092b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087de:	2b40      	cmp	r3, #64	; 0x40
 80087e0:	d10e      	bne.n	8008800 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ec:	2b40      	cmp	r3, #64	; 0x40
 80087ee:	d107      	bne.n	8008800 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f9b7 	bl	8008b6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	f003 0320 	and.w	r3, r3, #32
 800880a:	2b20      	cmp	r3, #32
 800880c:	d10e      	bne.n	800882c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f003 0320 	and.w	r3, r3, #32
 8008818:	2b20      	cmp	r3, #32
 800881a:	d107      	bne.n	800882c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f06f 0220 	mvn.w	r2, #32
 8008824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fd38 	bl	800929c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800882c:	bf00      	nop
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008840:	2300      	movs	r3, #0
 8008842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800884a:	2b01      	cmp	r3, #1
 800884c:	d101      	bne.n	8008852 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800884e:	2302      	movs	r3, #2
 8008850:	e0ae      	b.n	80089b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2201      	movs	r2, #1
 8008856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b0c      	cmp	r3, #12
 800885e:	f200 809f 	bhi.w	80089a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008862:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008868:	0800889d 	.word	0x0800889d
 800886c:	080089a1 	.word	0x080089a1
 8008870:	080089a1 	.word	0x080089a1
 8008874:	080089a1 	.word	0x080089a1
 8008878:	080088dd 	.word	0x080088dd
 800887c:	080089a1 	.word	0x080089a1
 8008880:	080089a1 	.word	0x080089a1
 8008884:	080089a1 	.word	0x080089a1
 8008888:	0800891f 	.word	0x0800891f
 800888c:	080089a1 	.word	0x080089a1
 8008890:	080089a1 	.word	0x080089a1
 8008894:	080089a1 	.word	0x080089a1
 8008898:	0800895f 	.word	0x0800895f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68b9      	ldr	r1, [r7, #8]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 fa0e 	bl	8008cc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	699a      	ldr	r2, [r3, #24]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f042 0208 	orr.w	r2, r2, #8
 80088b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	699a      	ldr	r2, [r3, #24]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f022 0204 	bic.w	r2, r2, #4
 80088c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6999      	ldr	r1, [r3, #24]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	691a      	ldr	r2, [r3, #16]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	619a      	str	r2, [r3, #24]
      break;
 80088da:	e064      	b.n	80089a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68b9      	ldr	r1, [r7, #8]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 fa5e 	bl	8008da4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	699a      	ldr	r2, [r3, #24]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	699a      	ldr	r2, [r3, #24]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6999      	ldr	r1, [r3, #24]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	021a      	lsls	r2, r3, #8
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	430a      	orrs	r2, r1
 800891a:	619a      	str	r2, [r3, #24]
      break;
 800891c:	e043      	b.n	80089a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68b9      	ldr	r1, [r7, #8]
 8008924:	4618      	mov	r0, r3
 8008926:	f000 fab3 	bl	8008e90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	69da      	ldr	r2, [r3, #28]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f042 0208 	orr.w	r2, r2, #8
 8008938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	69da      	ldr	r2, [r3, #28]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f022 0204 	bic.w	r2, r2, #4
 8008948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	69d9      	ldr	r1, [r3, #28]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	691a      	ldr	r2, [r3, #16]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	430a      	orrs	r2, r1
 800895a:	61da      	str	r2, [r3, #28]
      break;
 800895c:	e023      	b.n	80089a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68b9      	ldr	r1, [r7, #8]
 8008964:	4618      	mov	r0, r3
 8008966:	f000 fb07 	bl	8008f78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	69da      	ldr	r2, [r3, #28]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	69da      	ldr	r2, [r3, #28]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	69d9      	ldr	r1, [r3, #28]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	021a      	lsls	r2, r3, #8
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	61da      	str	r2, [r3, #28]
      break;
 800899e:	e002      	b.n	80089a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	75fb      	strb	r3, [r7, #23]
      break;
 80089a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3718      	adds	r7, #24
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089c2:	2300      	movs	r3, #0
 80089c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d101      	bne.n	80089d4 <HAL_TIM_ConfigClockSource+0x1c>
 80089d0:	2302      	movs	r3, #2
 80089d2:	e0b4      	b.n	8008b3e <HAL_TIM_ConfigClockSource+0x186>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2202      	movs	r2, #2
 80089e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80089f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68ba      	ldr	r2, [r7, #8]
 8008a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a0c:	d03e      	beq.n	8008a8c <HAL_TIM_ConfigClockSource+0xd4>
 8008a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a12:	f200 8087 	bhi.w	8008b24 <HAL_TIM_ConfigClockSource+0x16c>
 8008a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a1a:	f000 8086 	beq.w	8008b2a <HAL_TIM_ConfigClockSource+0x172>
 8008a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a22:	d87f      	bhi.n	8008b24 <HAL_TIM_ConfigClockSource+0x16c>
 8008a24:	2b70      	cmp	r3, #112	; 0x70
 8008a26:	d01a      	beq.n	8008a5e <HAL_TIM_ConfigClockSource+0xa6>
 8008a28:	2b70      	cmp	r3, #112	; 0x70
 8008a2a:	d87b      	bhi.n	8008b24 <HAL_TIM_ConfigClockSource+0x16c>
 8008a2c:	2b60      	cmp	r3, #96	; 0x60
 8008a2e:	d050      	beq.n	8008ad2 <HAL_TIM_ConfigClockSource+0x11a>
 8008a30:	2b60      	cmp	r3, #96	; 0x60
 8008a32:	d877      	bhi.n	8008b24 <HAL_TIM_ConfigClockSource+0x16c>
 8008a34:	2b50      	cmp	r3, #80	; 0x50
 8008a36:	d03c      	beq.n	8008ab2 <HAL_TIM_ConfigClockSource+0xfa>
 8008a38:	2b50      	cmp	r3, #80	; 0x50
 8008a3a:	d873      	bhi.n	8008b24 <HAL_TIM_ConfigClockSource+0x16c>
 8008a3c:	2b40      	cmp	r3, #64	; 0x40
 8008a3e:	d058      	beq.n	8008af2 <HAL_TIM_ConfigClockSource+0x13a>
 8008a40:	2b40      	cmp	r3, #64	; 0x40
 8008a42:	d86f      	bhi.n	8008b24 <HAL_TIM_ConfigClockSource+0x16c>
 8008a44:	2b30      	cmp	r3, #48	; 0x30
 8008a46:	d064      	beq.n	8008b12 <HAL_TIM_ConfigClockSource+0x15a>
 8008a48:	2b30      	cmp	r3, #48	; 0x30
 8008a4a:	d86b      	bhi.n	8008b24 <HAL_TIM_ConfigClockSource+0x16c>
 8008a4c:	2b20      	cmp	r3, #32
 8008a4e:	d060      	beq.n	8008b12 <HAL_TIM_ConfigClockSource+0x15a>
 8008a50:	2b20      	cmp	r3, #32
 8008a52:	d867      	bhi.n	8008b24 <HAL_TIM_ConfigClockSource+0x16c>
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d05c      	beq.n	8008b12 <HAL_TIM_ConfigClockSource+0x15a>
 8008a58:	2b10      	cmp	r3, #16
 8008a5a:	d05a      	beq.n	8008b12 <HAL_TIM_ConfigClockSource+0x15a>
 8008a5c:	e062      	b.n	8008b24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6818      	ldr	r0, [r3, #0]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	6899      	ldr	r1, [r3, #8]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	685a      	ldr	r2, [r3, #4]
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	f000 fb53 	bl	8009118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	609a      	str	r2, [r3, #8]
      break;
 8008a8a:	e04f      	b.n	8008b2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6818      	ldr	r0, [r3, #0]
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	6899      	ldr	r1, [r3, #8]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	685a      	ldr	r2, [r3, #4]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	f000 fb3c 	bl	8009118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	689a      	ldr	r2, [r3, #8]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008aae:	609a      	str	r2, [r3, #8]
      break;
 8008ab0:	e03c      	b.n	8008b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6818      	ldr	r0, [r3, #0]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	6859      	ldr	r1, [r3, #4]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f000 fab0 	bl	8009024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2150      	movs	r1, #80	; 0x50
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 fb09 	bl	80090e2 <TIM_ITRx_SetConfig>
      break;
 8008ad0:	e02c      	b.n	8008b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6818      	ldr	r0, [r3, #0]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	6859      	ldr	r1, [r3, #4]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f000 facf 	bl	8009082 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2160      	movs	r1, #96	; 0x60
 8008aea:	4618      	mov	r0, r3
 8008aec:	f000 faf9 	bl	80090e2 <TIM_ITRx_SetConfig>
      break;
 8008af0:	e01c      	b.n	8008b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6818      	ldr	r0, [r3, #0]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	6859      	ldr	r1, [r3, #4]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	461a      	mov	r2, r3
 8008b00:	f000 fa90 	bl	8009024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2140      	movs	r1, #64	; 0x40
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 fae9 	bl	80090e2 <TIM_ITRx_SetConfig>
      break;
 8008b10:	e00c      	b.n	8008b2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	f000 fae0 	bl	80090e2 <TIM_ITRx_SetConfig>
      break;
 8008b22:	e003      	b.n	8008b2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	73fb      	strb	r3, [r7, #15]
      break;
 8008b28:	e000      	b.n	8008b2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b46:	b480      	push	{r7}
 8008b48:	b083      	sub	sp, #12
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b4e:	bf00      	nop
 8008b50:	370c      	adds	r7, #12
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b62:	bf00      	nop
 8008b64:	370c      	adds	r7, #12
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b083      	sub	sp, #12
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b76:	bf00      	nop
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
	...

08008b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a40      	ldr	r2, [pc, #256]	; (8008c98 <TIM_Base_SetConfig+0x114>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d013      	beq.n	8008bc4 <TIM_Base_SetConfig+0x40>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ba2:	d00f      	beq.n	8008bc4 <TIM_Base_SetConfig+0x40>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a3d      	ldr	r2, [pc, #244]	; (8008c9c <TIM_Base_SetConfig+0x118>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d00b      	beq.n	8008bc4 <TIM_Base_SetConfig+0x40>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a3c      	ldr	r2, [pc, #240]	; (8008ca0 <TIM_Base_SetConfig+0x11c>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d007      	beq.n	8008bc4 <TIM_Base_SetConfig+0x40>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a3b      	ldr	r2, [pc, #236]	; (8008ca4 <TIM_Base_SetConfig+0x120>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d003      	beq.n	8008bc4 <TIM_Base_SetConfig+0x40>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a3a      	ldr	r2, [pc, #232]	; (8008ca8 <TIM_Base_SetConfig+0x124>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d108      	bne.n	8008bd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a2f      	ldr	r2, [pc, #188]	; (8008c98 <TIM_Base_SetConfig+0x114>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d02b      	beq.n	8008c36 <TIM_Base_SetConfig+0xb2>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008be4:	d027      	beq.n	8008c36 <TIM_Base_SetConfig+0xb2>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a2c      	ldr	r2, [pc, #176]	; (8008c9c <TIM_Base_SetConfig+0x118>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d023      	beq.n	8008c36 <TIM_Base_SetConfig+0xb2>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a2b      	ldr	r2, [pc, #172]	; (8008ca0 <TIM_Base_SetConfig+0x11c>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d01f      	beq.n	8008c36 <TIM_Base_SetConfig+0xb2>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a2a      	ldr	r2, [pc, #168]	; (8008ca4 <TIM_Base_SetConfig+0x120>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d01b      	beq.n	8008c36 <TIM_Base_SetConfig+0xb2>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a29      	ldr	r2, [pc, #164]	; (8008ca8 <TIM_Base_SetConfig+0x124>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d017      	beq.n	8008c36 <TIM_Base_SetConfig+0xb2>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a28      	ldr	r2, [pc, #160]	; (8008cac <TIM_Base_SetConfig+0x128>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d013      	beq.n	8008c36 <TIM_Base_SetConfig+0xb2>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a27      	ldr	r2, [pc, #156]	; (8008cb0 <TIM_Base_SetConfig+0x12c>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d00f      	beq.n	8008c36 <TIM_Base_SetConfig+0xb2>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a26      	ldr	r2, [pc, #152]	; (8008cb4 <TIM_Base_SetConfig+0x130>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d00b      	beq.n	8008c36 <TIM_Base_SetConfig+0xb2>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a25      	ldr	r2, [pc, #148]	; (8008cb8 <TIM_Base_SetConfig+0x134>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d007      	beq.n	8008c36 <TIM_Base_SetConfig+0xb2>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a24      	ldr	r2, [pc, #144]	; (8008cbc <TIM_Base_SetConfig+0x138>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d003      	beq.n	8008c36 <TIM_Base_SetConfig+0xb2>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a23      	ldr	r2, [pc, #140]	; (8008cc0 <TIM_Base_SetConfig+0x13c>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d108      	bne.n	8008c48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	695b      	ldr	r3, [r3, #20]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	689a      	ldr	r2, [r3, #8]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a0a      	ldr	r2, [pc, #40]	; (8008c98 <TIM_Base_SetConfig+0x114>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d003      	beq.n	8008c7c <TIM_Base_SetConfig+0xf8>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a0c      	ldr	r2, [pc, #48]	; (8008ca8 <TIM_Base_SetConfig+0x124>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d103      	bne.n	8008c84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	691a      	ldr	r2, [r3, #16]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	615a      	str	r2, [r3, #20]
}
 8008c8a:	bf00      	nop
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	40010000 	.word	0x40010000
 8008c9c:	40000400 	.word	0x40000400
 8008ca0:	40000800 	.word	0x40000800
 8008ca4:	40000c00 	.word	0x40000c00
 8008ca8:	40010400 	.word	0x40010400
 8008cac:	40014000 	.word	0x40014000
 8008cb0:	40014400 	.word	0x40014400
 8008cb4:	40014800 	.word	0x40014800
 8008cb8:	40001800 	.word	0x40001800
 8008cbc:	40001c00 	.word	0x40001c00
 8008cc0:	40002000 	.word	0x40002000

08008cc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b087      	sub	sp, #28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	f023 0201 	bic.w	r2, r3, #1
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f023 0303 	bic.w	r3, r3, #3
 8008cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	f023 0302 	bic.w	r3, r3, #2
 8008d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a20      	ldr	r2, [pc, #128]	; (8008d9c <TIM_OC1_SetConfig+0xd8>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d003      	beq.n	8008d28 <TIM_OC1_SetConfig+0x64>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a1f      	ldr	r2, [pc, #124]	; (8008da0 <TIM_OC1_SetConfig+0xdc>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d10c      	bne.n	8008d42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	f023 0308 	bic.w	r3, r3, #8
 8008d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	697a      	ldr	r2, [r7, #20]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f023 0304 	bic.w	r3, r3, #4
 8008d40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a15      	ldr	r2, [pc, #84]	; (8008d9c <TIM_OC1_SetConfig+0xd8>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d003      	beq.n	8008d52 <TIM_OC1_SetConfig+0x8e>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a14      	ldr	r2, [pc, #80]	; (8008da0 <TIM_OC1_SetConfig+0xdc>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d111      	bne.n	8008d76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	621a      	str	r2, [r3, #32]
}
 8008d90:	bf00      	nop
 8008d92:	371c      	adds	r7, #28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	40010000 	.word	0x40010000
 8008da0:	40010400 	.word	0x40010400

08008da4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	f023 0210 	bic.w	r2, r3, #16
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	021b      	lsls	r3, r3, #8
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	f023 0320 	bic.w	r3, r3, #32
 8008dee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	011b      	lsls	r3, r3, #4
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a22      	ldr	r2, [pc, #136]	; (8008e88 <TIM_OC2_SetConfig+0xe4>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d003      	beq.n	8008e0c <TIM_OC2_SetConfig+0x68>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a21      	ldr	r2, [pc, #132]	; (8008e8c <TIM_OC2_SetConfig+0xe8>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d10d      	bne.n	8008e28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	011b      	lsls	r3, r3, #4
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a17      	ldr	r2, [pc, #92]	; (8008e88 <TIM_OC2_SetConfig+0xe4>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d003      	beq.n	8008e38 <TIM_OC2_SetConfig+0x94>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a16      	ldr	r2, [pc, #88]	; (8008e8c <TIM_OC2_SetConfig+0xe8>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d113      	bne.n	8008e60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	695b      	ldr	r3, [r3, #20]
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	693a      	ldr	r2, [r7, #16]
 8008e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	685a      	ldr	r2, [r3, #4]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	621a      	str	r2, [r3, #32]
}
 8008e7a:	bf00      	nop
 8008e7c:	371c      	adds	r7, #28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	40010000 	.word	0x40010000
 8008e8c:	40010400 	.word	0x40010400

08008e90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b087      	sub	sp, #28
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
 8008eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	69db      	ldr	r3, [r3, #28]
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f023 0303 	bic.w	r3, r3, #3
 8008ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	021b      	lsls	r3, r3, #8
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a21      	ldr	r2, [pc, #132]	; (8008f70 <TIM_OC3_SetConfig+0xe0>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d003      	beq.n	8008ef6 <TIM_OC3_SetConfig+0x66>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a20      	ldr	r2, [pc, #128]	; (8008f74 <TIM_OC3_SetConfig+0xe4>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d10d      	bne.n	8008f12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	021b      	lsls	r3, r3, #8
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a16      	ldr	r2, [pc, #88]	; (8008f70 <TIM_OC3_SetConfig+0xe0>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d003      	beq.n	8008f22 <TIM_OC3_SetConfig+0x92>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a15      	ldr	r2, [pc, #84]	; (8008f74 <TIM_OC3_SetConfig+0xe4>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d113      	bne.n	8008f4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	011b      	lsls	r3, r3, #4
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	699b      	ldr	r3, [r3, #24]
 8008f42:	011b      	lsls	r3, r3, #4
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	685a      	ldr	r2, [r3, #4]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	621a      	str	r2, [r3, #32]
}
 8008f64:	bf00      	nop
 8008f66:	371c      	adds	r7, #28
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	40010000 	.word	0x40010000
 8008f74:	40010400 	.word	0x40010400

08008f78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b087      	sub	sp, #28
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a1b      	ldr	r3, [r3, #32]
 8008f86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a1b      	ldr	r3, [r3, #32]
 8008f92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	021b      	lsls	r3, r3, #8
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008fc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	031b      	lsls	r3, r3, #12
 8008fca:	693a      	ldr	r2, [r7, #16]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a12      	ldr	r2, [pc, #72]	; (800901c <TIM_OC4_SetConfig+0xa4>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d003      	beq.n	8008fe0 <TIM_OC4_SetConfig+0x68>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a11      	ldr	r2, [pc, #68]	; (8009020 <TIM_OC4_SetConfig+0xa8>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d109      	bne.n	8008ff4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fe6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	019b      	lsls	r3, r3, #6
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	685a      	ldr	r2, [r3, #4]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	621a      	str	r2, [r3, #32]
}
 800900e:	bf00      	nop
 8009010:	371c      	adds	r7, #28
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	40010000 	.word	0x40010000
 8009020:	40010400 	.word	0x40010400

08009024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009024:	b480      	push	{r7}
 8009026:	b087      	sub	sp, #28
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6a1b      	ldr	r3, [r3, #32]
 8009034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6a1b      	ldr	r3, [r3, #32]
 800903a:	f023 0201 	bic.w	r2, r3, #1
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800904e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	011b      	lsls	r3, r3, #4
 8009054:	693a      	ldr	r2, [r7, #16]
 8009056:	4313      	orrs	r3, r2
 8009058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f023 030a 	bic.w	r3, r3, #10
 8009060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	4313      	orrs	r3, r2
 8009068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	697a      	ldr	r2, [r7, #20]
 8009074:	621a      	str	r2, [r3, #32]
}
 8009076:	bf00      	nop
 8009078:	371c      	adds	r7, #28
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr

08009082 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009082:	b480      	push	{r7}
 8009084:	b087      	sub	sp, #28
 8009086:	af00      	add	r7, sp, #0
 8009088:	60f8      	str	r0, [r7, #12]
 800908a:	60b9      	str	r1, [r7, #8]
 800908c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6a1b      	ldr	r3, [r3, #32]
 8009092:	f023 0210 	bic.w	r2, r3, #16
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	699b      	ldr	r3, [r3, #24]
 800909e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6a1b      	ldr	r3, [r3, #32]
 80090a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	031b      	lsls	r3, r3, #12
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	4313      	orrs	r3, r2
 80090b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	011b      	lsls	r3, r3, #4
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	621a      	str	r2, [r3, #32]
}
 80090d6:	bf00      	nop
 80090d8:	371c      	adds	r7, #28
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b085      	sub	sp, #20
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090fa:	683a      	ldr	r2, [r7, #0]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	4313      	orrs	r3, r2
 8009100:	f043 0307 	orr.w	r3, r3, #7
 8009104:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	609a      	str	r2, [r3, #8]
}
 800910c:	bf00      	nop
 800910e:	3714      	adds	r7, #20
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009118:	b480      	push	{r7}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	021a      	lsls	r2, r3, #8
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	431a      	orrs	r2, r3
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	4313      	orrs	r3, r2
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	4313      	orrs	r3, r2
 8009144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	609a      	str	r2, [r3, #8]
}
 800914c:	bf00      	nop
 800914e:	371c      	adds	r7, #28
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009158:	b480      	push	{r7}
 800915a:	b087      	sub	sp, #28
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f003 031f 	and.w	r3, r3, #31
 800916a:	2201      	movs	r2, #1
 800916c:	fa02 f303 	lsl.w	r3, r2, r3
 8009170:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6a1a      	ldr	r2, [r3, #32]
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	43db      	mvns	r3, r3
 800917a:	401a      	ands	r2, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6a1a      	ldr	r2, [r3, #32]
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	f003 031f 	and.w	r3, r3, #31
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	fa01 f303 	lsl.w	r3, r1, r3
 8009190:	431a      	orrs	r2, r3
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	621a      	str	r2, [r3, #32]
}
 8009196:	bf00      	nop
 8009198:	371c      	adds	r7, #28
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
	...

080091a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d101      	bne.n	80091bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091b8:	2302      	movs	r3, #2
 80091ba:	e05a      	b.n	8009272 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2202      	movs	r2, #2
 80091c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a21      	ldr	r2, [pc, #132]	; (8009280 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d022      	beq.n	8009246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009208:	d01d      	beq.n	8009246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a1d      	ldr	r2, [pc, #116]	; (8009284 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d018      	beq.n	8009246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a1b      	ldr	r2, [pc, #108]	; (8009288 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d013      	beq.n	8009246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a1a      	ldr	r2, [pc, #104]	; (800928c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d00e      	beq.n	8009246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a18      	ldr	r2, [pc, #96]	; (8009290 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d009      	beq.n	8009246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a17      	ldr	r2, [pc, #92]	; (8009294 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d004      	beq.n	8009246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a15      	ldr	r2, [pc, #84]	; (8009298 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d10c      	bne.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800924c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	4313      	orrs	r3, r2
 8009256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	40010000 	.word	0x40010000
 8009284:	40000400 	.word	0x40000400
 8009288:	40000800 	.word	0x40000800
 800928c:	40000c00 	.word	0x40000c00
 8009290:	40010400 	.word	0x40010400
 8009294:	40014000 	.word	0x40014000
 8009298:	40001800 	.word	0x40001800

0800929c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092b8:	bf00      	nop
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d101      	bne.n	80092d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e03f      	b.n	8009356 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d106      	bne.n	80092f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f7fa f972 	bl	80035d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2224      	movs	r2, #36	; 0x24
 80092f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68da      	ldr	r2, [r3, #12]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f001 f833 	bl	800a374 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	691a      	ldr	r2, [r3, #16]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800931c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	695a      	ldr	r2, [r3, #20]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800932c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68da      	ldr	r2, [r3, #12]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800933c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2220      	movs	r2, #32
 8009348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2220      	movs	r2, #32
 8009350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b084      	sub	sp, #16
 8009362:	af00      	add	r7, sp, #0
 8009364:	60f8      	str	r0, [r7, #12]
 8009366:	60b9      	str	r1, [r7, #8]
 8009368:	4613      	mov	r3, r2
 800936a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009372:	b2db      	uxtb	r3, r3
 8009374:	2b20      	cmp	r3, #32
 8009376:	d11d      	bne.n	80093b4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <HAL_UART_Receive_IT+0x26>
 800937e:	88fb      	ldrh	r3, [r7, #6]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d101      	bne.n	8009388 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	e016      	b.n	80093b6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800938e:	2b01      	cmp	r3, #1
 8009390:	d101      	bne.n	8009396 <HAL_UART_Receive_IT+0x38>
 8009392:	2302      	movs	r3, #2
 8009394:	e00f      	b.n	80093b6 <HAL_UART_Receive_IT+0x58>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80093a4:	88fb      	ldrh	r3, [r7, #6]
 80093a6:	461a      	mov	r2, r3
 80093a8:	68b9      	ldr	r1, [r7, #8]
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f000 fd4b 	bl	8009e46 <UART_Start_Receive_IT>
 80093b0:	4603      	mov	r3, r0
 80093b2:	e000      	b.n	80093b6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80093b4:	2302      	movs	r3, #2
  }
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
	...

080093c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08c      	sub	sp, #48	; 0x30
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	4613      	mov	r3, r2
 80093cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b20      	cmp	r3, #32
 80093d8:	d165      	bne.n	80094a6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d002      	beq.n	80093e6 <HAL_UART_Transmit_DMA+0x26>
 80093e0:	88fb      	ldrh	r3, [r7, #6]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d101      	bne.n	80093ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e05e      	b.n	80094a8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d101      	bne.n	80093f8 <HAL_UART_Transmit_DMA+0x38>
 80093f4:	2302      	movs	r3, #2
 80093f6:	e057      	b.n	80094a8 <HAL_UART_Transmit_DMA+0xe8>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	88fa      	ldrh	r2, [r7, #6]
 800940a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	88fa      	ldrh	r2, [r7, #6]
 8009410:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2221      	movs	r2, #33	; 0x21
 800941c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009424:	4a22      	ldr	r2, [pc, #136]	; (80094b0 <HAL_UART_Transmit_DMA+0xf0>)
 8009426:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942c:	4a21      	ldr	r2, [pc, #132]	; (80094b4 <HAL_UART_Transmit_DMA+0xf4>)
 800942e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009434:	4a20      	ldr	r2, [pc, #128]	; (80094b8 <HAL_UART_Transmit_DMA+0xf8>)
 8009436:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800943c:	2200      	movs	r2, #0
 800943e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8009440:	f107 0308 	add.w	r3, r7, #8
 8009444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800944a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944c:	6819      	ldr	r1, [r3, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3304      	adds	r3, #4
 8009454:	461a      	mov	r2, r3
 8009456:	88fb      	ldrh	r3, [r7, #6]
 8009458:	f7fb fa08 	bl	800486c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009464:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3314      	adds	r3, #20
 8009474:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	e853 3f00 	ldrex	r3, [r3]
 800947c:	617b      	str	r3, [r7, #20]
   return(result);
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009484:	62bb      	str	r3, [r7, #40]	; 0x28
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3314      	adds	r3, #20
 800948c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800948e:	627a      	str	r2, [r7, #36]	; 0x24
 8009490:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009492:	6a39      	ldr	r1, [r7, #32]
 8009494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009496:	e841 2300 	strex	r3, r2, [r1]
 800949a:	61fb      	str	r3, [r7, #28]
   return(result);
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1e5      	bne.n	800946e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80094a2:	2300      	movs	r3, #0
 80094a4:	e000      	b.n	80094a8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80094a6:	2302      	movs	r3, #2
  }
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3730      	adds	r7, #48	; 0x30
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	08009ba1 	.word	0x08009ba1
 80094b4:	08009c3b 	.word	0x08009c3b
 80094b8:	08009db3 	.word	0x08009db3

080094bc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	4613      	mov	r3, r2
 80094c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b20      	cmp	r3, #32
 80094d4:	d11d      	bne.n	8009512 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d002      	beq.n	80094e2 <HAL_UART_Receive_DMA+0x26>
 80094dc:	88fb      	ldrh	r3, [r7, #6]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d101      	bne.n	80094e6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e016      	b.n	8009514 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d101      	bne.n	80094f4 <HAL_UART_Receive_DMA+0x38>
 80094f0:	2302      	movs	r3, #2
 80094f2:	e00f      	b.n	8009514 <HAL_UART_Receive_DMA+0x58>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2200      	movs	r2, #0
 8009500:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009502:	88fb      	ldrh	r3, [r7, #6]
 8009504:	461a      	mov	r2, r3
 8009506:	68b9      	ldr	r1, [r7, #8]
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f000 fcd7 	bl	8009ebc <UART_Start_Receive_DMA>
 800950e:	4603      	mov	r3, r0
 8009510:	e000      	b.n	8009514 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009512:	2302      	movs	r3, #2
  }
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b090      	sub	sp, #64	; 0x40
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009524:	2300      	movs	r3, #0
 8009526:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009532:	2b80      	cmp	r3, #128	; 0x80
 8009534:	bf0c      	ite	eq
 8009536:	2301      	moveq	r3, #1
 8009538:	2300      	movne	r3, #0
 800953a:	b2db      	uxtb	r3, r3
 800953c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b21      	cmp	r3, #33	; 0x21
 8009548:	d128      	bne.n	800959c <HAL_UART_DMAStop+0x80>
 800954a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800954c:	2b00      	cmp	r3, #0
 800954e:	d025      	beq.n	800959c <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	3314      	adds	r3, #20
 8009556:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955a:	e853 3f00 	ldrex	r3, [r3]
 800955e:	623b      	str	r3, [r7, #32]
   return(result);
 8009560:	6a3b      	ldr	r3, [r7, #32]
 8009562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009566:	63bb      	str	r3, [r7, #56]	; 0x38
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3314      	adds	r3, #20
 800956e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009570:	633a      	str	r2, [r7, #48]	; 0x30
 8009572:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009574:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009578:	e841 2300 	strex	r3, r2, [r1]
 800957c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800957e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1e5      	bne.n	8009550 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009588:	2b00      	cmp	r3, #0
 800958a:	d004      	beq.n	8009596 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009590:	4618      	mov	r0, r3
 8009592:	f7fb f9c3 	bl	800491c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 fd2a 	bl	8009ff0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a6:	2b40      	cmp	r3, #64	; 0x40
 80095a8:	bf0c      	ite	eq
 80095aa:	2301      	moveq	r3, #1
 80095ac:	2300      	movne	r3, #0
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b22      	cmp	r3, #34	; 0x22
 80095bc:	d128      	bne.n	8009610 <HAL_UART_DMAStop+0xf4>
 80095be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d025      	beq.n	8009610 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	3314      	adds	r3, #20
 80095ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	e853 3f00 	ldrex	r3, [r3]
 80095d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095da:	637b      	str	r3, [r7, #52]	; 0x34
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	3314      	adds	r3, #20
 80095e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095e4:	61fa      	str	r2, [r7, #28]
 80095e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e8:	69b9      	ldr	r1, [r7, #24]
 80095ea:	69fa      	ldr	r2, [r7, #28]
 80095ec:	e841 2300 	strex	r3, r2, [r1]
 80095f0:	617b      	str	r3, [r7, #20]
   return(result);
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1e5      	bne.n	80095c4 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d004      	beq.n	800960a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009604:	4618      	mov	r0, r3
 8009606:	f7fb f989 	bl	800491c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fd18 	bl	800a040 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3740      	adds	r7, #64	; 0x40
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
	...

0800961c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b0ba      	sub	sp, #232	; 0xe8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	695b      	ldr	r3, [r3, #20]
 800963e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009642:	2300      	movs	r3, #0
 8009644:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009648:	2300      	movs	r3, #0
 800964a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800964e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009652:	f003 030f 	and.w	r3, r3, #15
 8009656:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800965a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10f      	bne.n	8009682 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009666:	f003 0320 	and.w	r3, r3, #32
 800966a:	2b00      	cmp	r3, #0
 800966c:	d009      	beq.n	8009682 <HAL_UART_IRQHandler+0x66>
 800966e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009672:	f003 0320 	and.w	r3, r3, #32
 8009676:	2b00      	cmp	r3, #0
 8009678:	d003      	beq.n	8009682 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fdbf 	bl	800a1fe <UART_Receive_IT>
      return;
 8009680:	e256      	b.n	8009b30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009686:	2b00      	cmp	r3, #0
 8009688:	f000 80de 	beq.w	8009848 <HAL_UART_IRQHandler+0x22c>
 800968c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b00      	cmp	r3, #0
 8009696:	d106      	bne.n	80096a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800969c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f000 80d1 	beq.w	8009848 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80096a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096aa:	f003 0301 	and.w	r3, r3, #1
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00b      	beq.n	80096ca <HAL_UART_IRQHandler+0xae>
 80096b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d005      	beq.n	80096ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c2:	f043 0201 	orr.w	r2, r3, #1
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ce:	f003 0304 	and.w	r3, r3, #4
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00b      	beq.n	80096ee <HAL_UART_IRQHandler+0xd2>
 80096d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096da:	f003 0301 	and.w	r3, r3, #1
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d005      	beq.n	80096ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e6:	f043 0202 	orr.w	r2, r3, #2
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096f2:	f003 0302 	and.w	r3, r3, #2
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00b      	beq.n	8009712 <HAL_UART_IRQHandler+0xf6>
 80096fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096fe:	f003 0301 	and.w	r3, r3, #1
 8009702:	2b00      	cmp	r3, #0
 8009704:	d005      	beq.n	8009712 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970a:	f043 0204 	orr.w	r2, r3, #4
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009716:	f003 0308 	and.w	r3, r3, #8
 800971a:	2b00      	cmp	r3, #0
 800971c:	d011      	beq.n	8009742 <HAL_UART_IRQHandler+0x126>
 800971e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009722:	f003 0320 	and.w	r3, r3, #32
 8009726:	2b00      	cmp	r3, #0
 8009728:	d105      	bne.n	8009736 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800972a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800972e:	f003 0301 	and.w	r3, r3, #1
 8009732:	2b00      	cmp	r3, #0
 8009734:	d005      	beq.n	8009742 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973a:	f043 0208 	orr.w	r2, r3, #8
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009746:	2b00      	cmp	r3, #0
 8009748:	f000 81ed 	beq.w	8009b26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800974c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009750:	f003 0320 	and.w	r3, r3, #32
 8009754:	2b00      	cmp	r3, #0
 8009756:	d008      	beq.n	800976a <HAL_UART_IRQHandler+0x14e>
 8009758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800975c:	f003 0320 	and.w	r3, r3, #32
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fd4a 	bl	800a1fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	695b      	ldr	r3, [r3, #20]
 8009770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009774:	2b40      	cmp	r3, #64	; 0x40
 8009776:	bf0c      	ite	eq
 8009778:	2301      	moveq	r3, #1
 800977a:	2300      	movne	r3, #0
 800977c:	b2db      	uxtb	r3, r3
 800977e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009786:	f003 0308 	and.w	r3, r3, #8
 800978a:	2b00      	cmp	r3, #0
 800978c:	d103      	bne.n	8009796 <HAL_UART_IRQHandler+0x17a>
 800978e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009792:	2b00      	cmp	r3, #0
 8009794:	d04f      	beq.n	8009836 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fc52 	bl	800a040 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a6:	2b40      	cmp	r3, #64	; 0x40
 80097a8:	d141      	bne.n	800982e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	3314      	adds	r3, #20
 80097b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80097c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	3314      	adds	r3, #20
 80097d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80097d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80097da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80097e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80097e6:	e841 2300 	strex	r3, r2, [r1]
 80097ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80097ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1d9      	bne.n	80097aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d013      	beq.n	8009826 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009802:	4a7d      	ldr	r2, [pc, #500]	; (80099f8 <HAL_UART_IRQHandler+0x3dc>)
 8009804:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980a:	4618      	mov	r0, r3
 800980c:	f7fb f8f6 	bl	80049fc <HAL_DMA_Abort_IT>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d016      	beq.n	8009844 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009820:	4610      	mov	r0, r2
 8009822:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009824:	e00e      	b.n	8009844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f9a4 	bl	8009b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800982c:	e00a      	b.n	8009844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 f9a0 	bl	8009b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009834:	e006      	b.n	8009844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f99c 	bl	8009b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009842:	e170      	b.n	8009b26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009844:	bf00      	nop
    return;
 8009846:	e16e      	b.n	8009b26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984c:	2b01      	cmp	r3, #1
 800984e:	f040 814a 	bne.w	8009ae6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009856:	f003 0310 	and.w	r3, r3, #16
 800985a:	2b00      	cmp	r3, #0
 800985c:	f000 8143 	beq.w	8009ae6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009864:	f003 0310 	and.w	r3, r3, #16
 8009868:	2b00      	cmp	r3, #0
 800986a:	f000 813c 	beq.w	8009ae6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800986e:	2300      	movs	r3, #0
 8009870:	60bb      	str	r3, [r7, #8]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	60bb      	str	r3, [r7, #8]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	60bb      	str	r3, [r7, #8]
 8009882:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800988e:	2b40      	cmp	r3, #64	; 0x40
 8009890:	f040 80b4 	bne.w	80099fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80098a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 8140 	beq.w	8009b2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80098b2:	429a      	cmp	r2, r3
 80098b4:	f080 8139 	bcs.w	8009b2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80098be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c4:	69db      	ldr	r3, [r3, #28]
 80098c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098ca:	f000 8088 	beq.w	80099de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	330c      	adds	r3, #12
 80098d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098dc:	e853 3f00 	ldrex	r3, [r3]
 80098e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80098e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	330c      	adds	r3, #12
 80098f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80098fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80098fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009902:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009906:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800990a:	e841 2300 	strex	r3, r2, [r1]
 800990e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009912:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1d9      	bne.n	80098ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	3314      	adds	r3, #20
 8009920:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009924:	e853 3f00 	ldrex	r3, [r3]
 8009928:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800992a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800992c:	f023 0301 	bic.w	r3, r3, #1
 8009930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3314      	adds	r3, #20
 800993a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800993e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009942:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009944:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009946:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800994a:	e841 2300 	strex	r3, r2, [r1]
 800994e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1e1      	bne.n	800991a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	3314      	adds	r3, #20
 800995c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009960:	e853 3f00 	ldrex	r3, [r3]
 8009964:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800996c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3314      	adds	r3, #20
 8009976:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800997a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800997c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009980:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009982:	e841 2300 	strex	r3, r2, [r1]
 8009986:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1e3      	bne.n	8009956 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2220      	movs	r2, #32
 8009992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	330c      	adds	r3, #12
 80099a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099a6:	e853 3f00 	ldrex	r3, [r3]
 80099aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80099ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099ae:	f023 0310 	bic.w	r3, r3, #16
 80099b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	330c      	adds	r3, #12
 80099bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80099c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80099c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80099c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099c8:	e841 2300 	strex	r3, r2, [r1]
 80099cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80099ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1e3      	bne.n	800999c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d8:	4618      	mov	r0, r3
 80099da:	f7fa ff9f 	bl	800491c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	4619      	mov	r1, r3
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f8ca 	bl	8009b88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80099f4:	e099      	b.n	8009b2a <HAL_UART_IRQHandler+0x50e>
 80099f6:	bf00      	nop
 80099f8:	0800a107 	.word	0x0800a107
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	1ad3      	subs	r3, r2, r3
 8009a08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	f000 808b 	beq.w	8009b2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f000 8086 	beq.w	8009b2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	330c      	adds	r3, #12
 8009a28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2c:	e853 3f00 	ldrex	r3, [r3]
 8009a30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	330c      	adds	r3, #12
 8009a42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009a46:	647a      	str	r2, [r7, #68]	; 0x44
 8009a48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a4e:	e841 2300 	strex	r3, r2, [r1]
 8009a52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1e3      	bne.n	8009a22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	3314      	adds	r3, #20
 8009a60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a64:	e853 3f00 	ldrex	r3, [r3]
 8009a68:	623b      	str	r3, [r7, #32]
   return(result);
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	f023 0301 	bic.w	r3, r3, #1
 8009a70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	3314      	adds	r3, #20
 8009a7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009a7e:	633a      	str	r2, [r7, #48]	; 0x30
 8009a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a86:	e841 2300 	strex	r3, r2, [r1]
 8009a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e3      	bne.n	8009a5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2220      	movs	r2, #32
 8009a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	330c      	adds	r3, #12
 8009aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	e853 3f00 	ldrex	r3, [r3]
 8009aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f023 0310 	bic.w	r3, r3, #16
 8009ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	330c      	adds	r3, #12
 8009ac0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009ac4:	61fa      	str	r2, [r7, #28]
 8009ac6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac8:	69b9      	ldr	r1, [r7, #24]
 8009aca:	69fa      	ldr	r2, [r7, #28]
 8009acc:	e841 2300 	strex	r3, r2, [r1]
 8009ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1e3      	bne.n	8009aa0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ad8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009adc:	4619      	mov	r1, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f852 	bl	8009b88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009ae4:	e023      	b.n	8009b2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d009      	beq.n	8009b06 <HAL_UART_IRQHandler+0x4ea>
 8009af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d003      	beq.n	8009b06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fb15 	bl	800a12e <UART_Transmit_IT>
    return;
 8009b04:	e014      	b.n	8009b30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00e      	beq.n	8009b30 <HAL_UART_IRQHandler+0x514>
 8009b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d008      	beq.n	8009b30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fb55 	bl	800a1ce <UART_EndTransmit_IT>
    return;
 8009b24:	e004      	b.n	8009b30 <HAL_UART_IRQHandler+0x514>
    return;
 8009b26:	bf00      	nop
 8009b28:	e002      	b.n	8009b30 <HAL_UART_IRQHandler+0x514>
      return;
 8009b2a:	bf00      	nop
 8009b2c:	e000      	b.n	8009b30 <HAL_UART_IRQHandler+0x514>
      return;
 8009b2e:	bf00      	nop
  }
}
 8009b30:	37e8      	adds	r7, #232	; 0xe8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop

08009b38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009b68:	bf00      	nop
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	460b      	mov	r3, r1
 8009b92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b090      	sub	sp, #64	; 0x40
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bac:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d137      	bne.n	8009c2c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	3314      	adds	r3, #20
 8009bc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	e853 3f00 	ldrex	r3, [r3]
 8009bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8009bd2:	6a3b      	ldr	r3, [r7, #32]
 8009bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	3314      	adds	r3, #20
 8009be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009be2:	633a      	str	r2, [r7, #48]	; 0x30
 8009be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bea:	e841 2300 	strex	r3, r2, [r1]
 8009bee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1e5      	bne.n	8009bc2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	330c      	adds	r3, #12
 8009bfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	e853 3f00 	ldrex	r3, [r3]
 8009c04:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8009c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	330c      	adds	r3, #12
 8009c14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c16:	61fa      	str	r2, [r7, #28]
 8009c18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1a:	69b9      	ldr	r1, [r7, #24]
 8009c1c:	69fa      	ldr	r2, [r7, #28]
 8009c1e:	e841 2300 	strex	r3, r2, [r1]
 8009c22:	617b      	str	r3, [r7, #20]
   return(result);
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1e5      	bne.n	8009bf6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c2a:	e002      	b.n	8009c32 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009c2c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009c2e:	f7ff ff83 	bl	8009b38 <HAL_UART_TxCpltCallback>
}
 8009c32:	bf00      	nop
 8009c34:	3740      	adds	r7, #64	; 0x40
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b084      	sub	sp, #16
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c46:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f7ff ff7f 	bl	8009b4c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c4e:	bf00      	nop
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b09c      	sub	sp, #112	; 0x70
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c62:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d172      	bne.n	8009d58 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c74:	2200      	movs	r2, #0
 8009c76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	330c      	adds	r3, #12
 8009c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c82:	e853 3f00 	ldrex	r3, [r3]
 8009c86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	330c      	adds	r3, #12
 8009c96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c98:	65ba      	str	r2, [r7, #88]	; 0x58
 8009c9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ca0:	e841 2300 	strex	r3, r2, [r1]
 8009ca4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1e5      	bne.n	8009c78 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	3314      	adds	r3, #20
 8009cb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb6:	e853 3f00 	ldrex	r3, [r3]
 8009cba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cbe:	f023 0301 	bic.w	r3, r3, #1
 8009cc2:	667b      	str	r3, [r7, #100]	; 0x64
 8009cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3314      	adds	r3, #20
 8009cca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009ccc:	647a      	str	r2, [r7, #68]	; 0x44
 8009cce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009cd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cd4:	e841 2300 	strex	r3, r2, [r1]
 8009cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1e5      	bne.n	8009cac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	3314      	adds	r3, #20
 8009ce6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	e853 3f00 	ldrex	r3, [r3]
 8009cee:	623b      	str	r3, [r7, #32]
   return(result);
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cf6:	663b      	str	r3, [r7, #96]	; 0x60
 8009cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	3314      	adds	r3, #20
 8009cfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009d00:	633a      	str	r2, [r7, #48]	; 0x30
 8009d02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d08:	e841 2300 	strex	r3, r2, [r1]
 8009d0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1e5      	bne.n	8009ce0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d16:	2220      	movs	r2, #32
 8009d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d119      	bne.n	8009d58 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	330c      	adds	r3, #12
 8009d2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	e853 3f00 	ldrex	r3, [r3]
 8009d32:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f023 0310 	bic.w	r3, r3, #16
 8009d3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	330c      	adds	r3, #12
 8009d42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009d44:	61fa      	str	r2, [r7, #28]
 8009d46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d48:	69b9      	ldr	r1, [r7, #24]
 8009d4a:	69fa      	ldr	r2, [r7, #28]
 8009d4c:	e841 2300 	strex	r3, r2, [r1]
 8009d50:	617b      	str	r3, [r7, #20]
   return(result);
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d1e5      	bne.n	8009d24 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d106      	bne.n	8009d6e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009d64:	4619      	mov	r1, r3
 8009d66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009d68:	f7ff ff0e 	bl	8009b88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d6c:	e002      	b.n	8009d74 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009d6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009d70:	f7f8 fa3c 	bl	80021ec <HAL_UART_RxCpltCallback>
}
 8009d74:	bf00      	nop
 8009d76:	3770      	adds	r7, #112	; 0x70
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d88:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d108      	bne.n	8009da4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009d96:	085b      	lsrs	r3, r3, #1
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f7ff fef3 	bl	8009b88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009da2:	e002      	b.n	8009daa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f7ff fedb 	bl	8009b60 <HAL_UART_RxHalfCpltCallback>
}
 8009daa:	bf00      	nop
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b084      	sub	sp, #16
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	695b      	ldr	r3, [r3, #20]
 8009dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dce:	2b80      	cmp	r3, #128	; 0x80
 8009dd0:	bf0c      	ite	eq
 8009dd2:	2301      	moveq	r3, #1
 8009dd4:	2300      	movne	r3, #0
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	2b21      	cmp	r3, #33	; 0x21
 8009de4:	d108      	bne.n	8009df8 <UART_DMAError+0x46>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d005      	beq.n	8009df8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	2200      	movs	r2, #0
 8009df0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009df2:	68b8      	ldr	r0, [r7, #8]
 8009df4:	f000 f8fc 	bl	8009ff0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e02:	2b40      	cmp	r3, #64	; 0x40
 8009e04:	bf0c      	ite	eq
 8009e06:	2301      	moveq	r3, #1
 8009e08:	2300      	movne	r3, #0
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	2b22      	cmp	r3, #34	; 0x22
 8009e18:	d108      	bne.n	8009e2c <UART_DMAError+0x7a>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d005      	beq.n	8009e2c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	2200      	movs	r2, #0
 8009e24:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009e26:	68b8      	ldr	r0, [r7, #8]
 8009e28:	f000 f90a 	bl	800a040 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e30:	f043 0210 	orr.w	r2, r3, #16
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e38:	68b8      	ldr	r0, [r7, #8]
 8009e3a:	f7ff fe9b 	bl	8009b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e3e:	bf00      	nop
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e46:	b480      	push	{r7}
 8009e48:	b085      	sub	sp, #20
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	60f8      	str	r0, [r7, #12]
 8009e4e:	60b9      	str	r1, [r7, #8]
 8009e50:	4613      	mov	r3, r2
 8009e52:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	88fa      	ldrh	r2, [r7, #6]
 8009e5e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	88fa      	ldrh	r2, [r7, #6]
 8009e64:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2222      	movs	r2, #34	; 0x22
 8009e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68da      	ldr	r2, [r3, #12]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e8a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	695a      	ldr	r2, [r3, #20]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f042 0201 	orr.w	r2, r2, #1
 8009e9a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68da      	ldr	r2, [r3, #12]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f042 0220 	orr.w	r2, r2, #32
 8009eaa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
	...

08009ebc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b098      	sub	sp, #96	; 0x60
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	88fa      	ldrh	r2, [r7, #6]
 8009ed4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2222      	movs	r2, #34	; 0x22
 8009ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee8:	4a3e      	ldr	r2, [pc, #248]	; (8009fe4 <UART_Start_Receive_DMA+0x128>)
 8009eea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef0:	4a3d      	ldr	r2, [pc, #244]	; (8009fe8 <UART_Start_Receive_DMA+0x12c>)
 8009ef2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef8:	4a3c      	ldr	r2, [pc, #240]	; (8009fec <UART_Start_Receive_DMA+0x130>)
 8009efa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f00:	2200      	movs	r2, #0
 8009f02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009f04:	f107 0308 	add.w	r3, r7, #8
 8009f08:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3304      	adds	r3, #4
 8009f14:	4619      	mov	r1, r3
 8009f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	88fb      	ldrh	r3, [r7, #6]
 8009f1c:	f7fa fca6 	bl	800486c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009f20:	2300      	movs	r3, #0
 8009f22:	613b      	str	r3, [r7, #16]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	613b      	str	r3, [r7, #16]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	613b      	str	r3, [r7, #16]
 8009f34:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	330c      	adds	r3, #12
 8009f44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f48:	e853 3f00 	ldrex	r3, [r3]
 8009f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f54:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	330c      	adds	r3, #12
 8009f5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f5e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009f60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f62:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009f64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f66:	e841 2300 	strex	r3, r2, [r1]
 8009f6a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1e5      	bne.n	8009f3e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	3314      	adds	r3, #20
 8009f78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7c:	e853 3f00 	ldrex	r3, [r3]
 8009f80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f84:	f043 0301 	orr.w	r3, r3, #1
 8009f88:	657b      	str	r3, [r7, #84]	; 0x54
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	3314      	adds	r3, #20
 8009f90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f92:	63ba      	str	r2, [r7, #56]	; 0x38
 8009f94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f9a:	e841 2300 	strex	r3, r2, [r1]
 8009f9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1e5      	bne.n	8009f72 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3314      	adds	r3, #20
 8009fac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	e853 3f00 	ldrex	r3, [r3]
 8009fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fbc:	653b      	str	r3, [r7, #80]	; 0x50
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	3314      	adds	r3, #20
 8009fc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fc6:	627a      	str	r2, [r7, #36]	; 0x24
 8009fc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fca:	6a39      	ldr	r1, [r7, #32]
 8009fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fce:	e841 2300 	strex	r3, r2, [r1]
 8009fd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1e5      	bne.n	8009fa6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3760      	adds	r7, #96	; 0x60
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	08009c57 	.word	0x08009c57
 8009fe8:	08009d7d 	.word	0x08009d7d
 8009fec:	08009db3 	.word	0x08009db3

08009ff0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b089      	sub	sp, #36	; 0x24
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	330c      	adds	r3, #12
 8009ffe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	e853 3f00 	ldrex	r3, [r3]
 800a006:	60bb      	str	r3, [r7, #8]
   return(result);
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a00e:	61fb      	str	r3, [r7, #28]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	330c      	adds	r3, #12
 800a016:	69fa      	ldr	r2, [r7, #28]
 800a018:	61ba      	str	r2, [r7, #24]
 800a01a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01c:	6979      	ldr	r1, [r7, #20]
 800a01e:	69ba      	ldr	r2, [r7, #24]
 800a020:	e841 2300 	strex	r3, r2, [r1]
 800a024:	613b      	str	r3, [r7, #16]
   return(result);
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1e5      	bne.n	8009ff8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2220      	movs	r2, #32
 800a030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a034:	bf00      	nop
 800a036:	3724      	adds	r7, #36	; 0x24
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a040:	b480      	push	{r7}
 800a042:	b095      	sub	sp, #84	; 0x54
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	330c      	adds	r3, #12
 800a04e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a052:	e853 3f00 	ldrex	r3, [r3]
 800a056:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a05e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	330c      	adds	r3, #12
 800a066:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a068:	643a      	str	r2, [r7, #64]	; 0x40
 800a06a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a06e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a070:	e841 2300 	strex	r3, r2, [r1]
 800a074:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1e5      	bne.n	800a048 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3314      	adds	r3, #20
 800a082:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a084:	6a3b      	ldr	r3, [r7, #32]
 800a086:	e853 3f00 	ldrex	r3, [r3]
 800a08a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	f023 0301 	bic.w	r3, r3, #1
 800a092:	64bb      	str	r3, [r7, #72]	; 0x48
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	3314      	adds	r3, #20
 800a09a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a09c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a09e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0a4:	e841 2300 	strex	r3, r2, [r1]
 800a0a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1e5      	bne.n	800a07c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d119      	bne.n	800a0ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	330c      	adds	r3, #12
 800a0be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	e853 3f00 	ldrex	r3, [r3]
 800a0c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	f023 0310 	bic.w	r3, r3, #16
 800a0ce:	647b      	str	r3, [r7, #68]	; 0x44
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	330c      	adds	r3, #12
 800a0d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0d8:	61ba      	str	r2, [r7, #24]
 800a0da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0dc:	6979      	ldr	r1, [r7, #20]
 800a0de:	69ba      	ldr	r2, [r7, #24]
 800a0e0:	e841 2300 	strex	r3, r2, [r1]
 800a0e4:	613b      	str	r3, [r7, #16]
   return(result);
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d1e5      	bne.n	800a0b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a0fa:	bf00      	nop
 800a0fc:	3754      	adds	r7, #84	; 0x54
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b084      	sub	sp, #16
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a112:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2200      	movs	r2, #0
 800a118:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f7ff fd27 	bl	8009b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a126:	bf00      	nop
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a12e:	b480      	push	{r7}
 800a130:	b085      	sub	sp, #20
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	2b21      	cmp	r3, #33	; 0x21
 800a140:	d13e      	bne.n	800a1c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a14a:	d114      	bne.n	800a176 <UART_Transmit_IT+0x48>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d110      	bne.n	800a176 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6a1b      	ldr	r3, [r3, #32]
 800a158:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	881b      	ldrh	r3, [r3, #0]
 800a15e:	461a      	mov	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a168:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a1b      	ldr	r3, [r3, #32]
 800a16e:	1c9a      	adds	r2, r3, #2
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	621a      	str	r2, [r3, #32]
 800a174:	e008      	b.n	800a188 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a1b      	ldr	r3, [r3, #32]
 800a17a:	1c59      	adds	r1, r3, #1
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	6211      	str	r1, [r2, #32]
 800a180:	781a      	ldrb	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	3b01      	subs	r3, #1
 800a190:	b29b      	uxth	r3, r3
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	4619      	mov	r1, r3
 800a196:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d10f      	bne.n	800a1bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68da      	ldr	r2, [r3, #12]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	68da      	ldr	r2, [r3, #12]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	e000      	b.n	800a1c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a1c0:	2302      	movs	r3, #2
  }
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3714      	adds	r7, #20
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr

0800a1ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b082      	sub	sp, #8
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68da      	ldr	r2, [r3, #12]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2220      	movs	r2, #32
 800a1ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7ff fca2 	bl	8009b38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b08c      	sub	sp, #48	; 0x30
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	2b22      	cmp	r3, #34	; 0x22
 800a210:	f040 80ab 	bne.w	800a36a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a21c:	d117      	bne.n	800a24e <UART_Receive_IT+0x50>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d113      	bne.n	800a24e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a226:	2300      	movs	r3, #0
 800a228:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	b29b      	uxth	r3, r3
 800a238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a240:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a246:	1c9a      	adds	r2, r3, #2
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	629a      	str	r2, [r3, #40]	; 0x28
 800a24c:	e026      	b.n	800a29c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a252:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a254:	2300      	movs	r3, #0
 800a256:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a260:	d007      	beq.n	800a272 <UART_Receive_IT+0x74>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10a      	bne.n	800a280 <UART_Receive_IT+0x82>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d106      	bne.n	800a280 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	b2da      	uxtb	r2, r3
 800a27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27c:	701a      	strb	r2, [r3, #0]
 800a27e:	e008      	b.n	800a292 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	b2db      	uxtb	r3, r3
 800a288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a28c:	b2da      	uxtb	r2, r3
 800a28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a290:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a296:	1c5a      	adds	r2, r3, #1
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d15a      	bne.n	800a366 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68da      	ldr	r2, [r3, #12]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f022 0220 	bic.w	r2, r2, #32
 800a2be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68da      	ldr	r2, [r3, #12]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	695a      	ldr	r2, [r3, #20]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f022 0201 	bic.w	r2, r2, #1
 800a2de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2220      	movs	r2, #32
 800a2e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d135      	bne.n	800a35c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	330c      	adds	r3, #12
 800a2fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	e853 3f00 	ldrex	r3, [r3]
 800a304:	613b      	str	r3, [r7, #16]
   return(result);
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	f023 0310 	bic.w	r3, r3, #16
 800a30c:	627b      	str	r3, [r7, #36]	; 0x24
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	330c      	adds	r3, #12
 800a314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a316:	623a      	str	r2, [r7, #32]
 800a318:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31a:	69f9      	ldr	r1, [r7, #28]
 800a31c:	6a3a      	ldr	r2, [r7, #32]
 800a31e:	e841 2300 	strex	r3, r2, [r1]
 800a322:	61bb      	str	r3, [r7, #24]
   return(result);
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1e5      	bne.n	800a2f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0310 	and.w	r3, r3, #16
 800a334:	2b10      	cmp	r3, #16
 800a336:	d10a      	bne.n	800a34e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a338:	2300      	movs	r3, #0
 800a33a:	60fb      	str	r3, [r7, #12]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	60fb      	str	r3, [r7, #12]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	60fb      	str	r3, [r7, #12]
 800a34c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a352:	4619      	mov	r1, r3
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7ff fc17 	bl	8009b88 <HAL_UARTEx_RxEventCallback>
 800a35a:	e002      	b.n	800a362 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7f7 ff45 	bl	80021ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a362:	2300      	movs	r3, #0
 800a364:	e002      	b.n	800a36c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a366:	2300      	movs	r3, #0
 800a368:	e000      	b.n	800a36c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a36a:	2302      	movs	r3, #2
  }
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3730      	adds	r7, #48	; 0x30
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a378:	b09f      	sub	sp, #124	; 0x7c
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a37e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a38a:	68d9      	ldr	r1, [r3, #12]
 800a38c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	ea40 0301 	orr.w	r3, r0, r1
 800a394:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a398:	689a      	ldr	r2, [r3, #8]
 800a39a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	431a      	orrs	r2, r3
 800a3a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3a2:	695b      	ldr	r3, [r3, #20]
 800a3a4:	431a      	orrs	r2, r3
 800a3a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3a8:	69db      	ldr	r3, [r3, #28]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a3ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a3b8:	f021 010c 	bic.w	r1, r1, #12
 800a3bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3c2:	430b      	orrs	r3, r1
 800a3c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a3c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	695b      	ldr	r3, [r3, #20]
 800a3cc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a3d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3d2:	6999      	ldr	r1, [r3, #24]
 800a3d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	ea40 0301 	orr.w	r3, r0, r1
 800a3dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a3de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	4bc5      	ldr	r3, [pc, #788]	; (800a6f8 <UART_SetConfig+0x384>)
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d004      	beq.n	800a3f2 <UART_SetConfig+0x7e>
 800a3e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	4bc3      	ldr	r3, [pc, #780]	; (800a6fc <UART_SetConfig+0x388>)
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d103      	bne.n	800a3fa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a3f2:	f7fd fcd9 	bl	8007da8 <HAL_RCC_GetPCLK2Freq>
 800a3f6:	6778      	str	r0, [r7, #116]	; 0x74
 800a3f8:	e002      	b.n	800a400 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a3fa:	f7fd fcc1 	bl	8007d80 <HAL_RCC_GetPCLK1Freq>
 800a3fe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a402:	69db      	ldr	r3, [r3, #28]
 800a404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a408:	f040 80b6 	bne.w	800a578 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a40c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a40e:	461c      	mov	r4, r3
 800a410:	f04f 0500 	mov.w	r5, #0
 800a414:	4622      	mov	r2, r4
 800a416:	462b      	mov	r3, r5
 800a418:	1891      	adds	r1, r2, r2
 800a41a:	6439      	str	r1, [r7, #64]	; 0x40
 800a41c:	415b      	adcs	r3, r3
 800a41e:	647b      	str	r3, [r7, #68]	; 0x44
 800a420:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a424:	1912      	adds	r2, r2, r4
 800a426:	eb45 0303 	adc.w	r3, r5, r3
 800a42a:	f04f 0000 	mov.w	r0, #0
 800a42e:	f04f 0100 	mov.w	r1, #0
 800a432:	00d9      	lsls	r1, r3, #3
 800a434:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a438:	00d0      	lsls	r0, r2, #3
 800a43a:	4602      	mov	r2, r0
 800a43c:	460b      	mov	r3, r1
 800a43e:	1911      	adds	r1, r2, r4
 800a440:	6639      	str	r1, [r7, #96]	; 0x60
 800a442:	416b      	adcs	r3, r5
 800a444:	667b      	str	r3, [r7, #100]	; 0x64
 800a446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	461a      	mov	r2, r3
 800a44c:	f04f 0300 	mov.w	r3, #0
 800a450:	1891      	adds	r1, r2, r2
 800a452:	63b9      	str	r1, [r7, #56]	; 0x38
 800a454:	415b      	adcs	r3, r3
 800a456:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a458:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a45c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a460:	f7f6 fc72 	bl	8000d48 <__aeabi_uldivmod>
 800a464:	4602      	mov	r2, r0
 800a466:	460b      	mov	r3, r1
 800a468:	4ba5      	ldr	r3, [pc, #660]	; (800a700 <UART_SetConfig+0x38c>)
 800a46a:	fba3 2302 	umull	r2, r3, r3, r2
 800a46e:	095b      	lsrs	r3, r3, #5
 800a470:	011e      	lsls	r6, r3, #4
 800a472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a474:	461c      	mov	r4, r3
 800a476:	f04f 0500 	mov.w	r5, #0
 800a47a:	4622      	mov	r2, r4
 800a47c:	462b      	mov	r3, r5
 800a47e:	1891      	adds	r1, r2, r2
 800a480:	6339      	str	r1, [r7, #48]	; 0x30
 800a482:	415b      	adcs	r3, r3
 800a484:	637b      	str	r3, [r7, #52]	; 0x34
 800a486:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a48a:	1912      	adds	r2, r2, r4
 800a48c:	eb45 0303 	adc.w	r3, r5, r3
 800a490:	f04f 0000 	mov.w	r0, #0
 800a494:	f04f 0100 	mov.w	r1, #0
 800a498:	00d9      	lsls	r1, r3, #3
 800a49a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a49e:	00d0      	lsls	r0, r2, #3
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	1911      	adds	r1, r2, r4
 800a4a6:	65b9      	str	r1, [r7, #88]	; 0x58
 800a4a8:	416b      	adcs	r3, r5
 800a4aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	f04f 0300 	mov.w	r3, #0
 800a4b6:	1891      	adds	r1, r2, r2
 800a4b8:	62b9      	str	r1, [r7, #40]	; 0x28
 800a4ba:	415b      	adcs	r3, r3
 800a4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a4c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a4c6:	f7f6 fc3f 	bl	8000d48 <__aeabi_uldivmod>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	4b8c      	ldr	r3, [pc, #560]	; (800a700 <UART_SetConfig+0x38c>)
 800a4d0:	fba3 1302 	umull	r1, r3, r3, r2
 800a4d4:	095b      	lsrs	r3, r3, #5
 800a4d6:	2164      	movs	r1, #100	; 0x64
 800a4d8:	fb01 f303 	mul.w	r3, r1, r3
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	00db      	lsls	r3, r3, #3
 800a4e0:	3332      	adds	r3, #50	; 0x32
 800a4e2:	4a87      	ldr	r2, [pc, #540]	; (800a700 <UART_SetConfig+0x38c>)
 800a4e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a4e8:	095b      	lsrs	r3, r3, #5
 800a4ea:	005b      	lsls	r3, r3, #1
 800a4ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a4f0:	441e      	add	r6, r3
 800a4f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f04f 0100 	mov.w	r1, #0
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	1894      	adds	r4, r2, r2
 800a500:	623c      	str	r4, [r7, #32]
 800a502:	415b      	adcs	r3, r3
 800a504:	627b      	str	r3, [r7, #36]	; 0x24
 800a506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a50a:	1812      	adds	r2, r2, r0
 800a50c:	eb41 0303 	adc.w	r3, r1, r3
 800a510:	f04f 0400 	mov.w	r4, #0
 800a514:	f04f 0500 	mov.w	r5, #0
 800a518:	00dd      	lsls	r5, r3, #3
 800a51a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a51e:	00d4      	lsls	r4, r2, #3
 800a520:	4622      	mov	r2, r4
 800a522:	462b      	mov	r3, r5
 800a524:	1814      	adds	r4, r2, r0
 800a526:	653c      	str	r4, [r7, #80]	; 0x50
 800a528:	414b      	adcs	r3, r1
 800a52a:	657b      	str	r3, [r7, #84]	; 0x54
 800a52c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	461a      	mov	r2, r3
 800a532:	f04f 0300 	mov.w	r3, #0
 800a536:	1891      	adds	r1, r2, r2
 800a538:	61b9      	str	r1, [r7, #24]
 800a53a:	415b      	adcs	r3, r3
 800a53c:	61fb      	str	r3, [r7, #28]
 800a53e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a542:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a546:	f7f6 fbff 	bl	8000d48 <__aeabi_uldivmod>
 800a54a:	4602      	mov	r2, r0
 800a54c:	460b      	mov	r3, r1
 800a54e:	4b6c      	ldr	r3, [pc, #432]	; (800a700 <UART_SetConfig+0x38c>)
 800a550:	fba3 1302 	umull	r1, r3, r3, r2
 800a554:	095b      	lsrs	r3, r3, #5
 800a556:	2164      	movs	r1, #100	; 0x64
 800a558:	fb01 f303 	mul.w	r3, r1, r3
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	00db      	lsls	r3, r3, #3
 800a560:	3332      	adds	r3, #50	; 0x32
 800a562:	4a67      	ldr	r2, [pc, #412]	; (800a700 <UART_SetConfig+0x38c>)
 800a564:	fba2 2303 	umull	r2, r3, r2, r3
 800a568:	095b      	lsrs	r3, r3, #5
 800a56a:	f003 0207 	and.w	r2, r3, #7
 800a56e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4432      	add	r2, r6
 800a574:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a576:	e0b9      	b.n	800a6ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a57a:	461c      	mov	r4, r3
 800a57c:	f04f 0500 	mov.w	r5, #0
 800a580:	4622      	mov	r2, r4
 800a582:	462b      	mov	r3, r5
 800a584:	1891      	adds	r1, r2, r2
 800a586:	6139      	str	r1, [r7, #16]
 800a588:	415b      	adcs	r3, r3
 800a58a:	617b      	str	r3, [r7, #20]
 800a58c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a590:	1912      	adds	r2, r2, r4
 800a592:	eb45 0303 	adc.w	r3, r5, r3
 800a596:	f04f 0000 	mov.w	r0, #0
 800a59a:	f04f 0100 	mov.w	r1, #0
 800a59e:	00d9      	lsls	r1, r3, #3
 800a5a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a5a4:	00d0      	lsls	r0, r2, #3
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	eb12 0804 	adds.w	r8, r2, r4
 800a5ae:	eb43 0905 	adc.w	r9, r3, r5
 800a5b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f04f 0100 	mov.w	r1, #0
 800a5bc:	f04f 0200 	mov.w	r2, #0
 800a5c0:	f04f 0300 	mov.w	r3, #0
 800a5c4:	008b      	lsls	r3, r1, #2
 800a5c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a5ca:	0082      	lsls	r2, r0, #2
 800a5cc:	4640      	mov	r0, r8
 800a5ce:	4649      	mov	r1, r9
 800a5d0:	f7f6 fbba 	bl	8000d48 <__aeabi_uldivmod>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	4b49      	ldr	r3, [pc, #292]	; (800a700 <UART_SetConfig+0x38c>)
 800a5da:	fba3 2302 	umull	r2, r3, r3, r2
 800a5de:	095b      	lsrs	r3, r3, #5
 800a5e0:	011e      	lsls	r6, r3, #4
 800a5e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f04f 0100 	mov.w	r1, #0
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	1894      	adds	r4, r2, r2
 800a5f0:	60bc      	str	r4, [r7, #8]
 800a5f2:	415b      	adcs	r3, r3
 800a5f4:	60fb      	str	r3, [r7, #12]
 800a5f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a5fa:	1812      	adds	r2, r2, r0
 800a5fc:	eb41 0303 	adc.w	r3, r1, r3
 800a600:	f04f 0400 	mov.w	r4, #0
 800a604:	f04f 0500 	mov.w	r5, #0
 800a608:	00dd      	lsls	r5, r3, #3
 800a60a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a60e:	00d4      	lsls	r4, r2, #3
 800a610:	4622      	mov	r2, r4
 800a612:	462b      	mov	r3, r5
 800a614:	1814      	adds	r4, r2, r0
 800a616:	64bc      	str	r4, [r7, #72]	; 0x48
 800a618:	414b      	adcs	r3, r1
 800a61a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a61c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	4618      	mov	r0, r3
 800a622:	f04f 0100 	mov.w	r1, #0
 800a626:	f04f 0200 	mov.w	r2, #0
 800a62a:	f04f 0300 	mov.w	r3, #0
 800a62e:	008b      	lsls	r3, r1, #2
 800a630:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a634:	0082      	lsls	r2, r0, #2
 800a636:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a63a:	f7f6 fb85 	bl	8000d48 <__aeabi_uldivmod>
 800a63e:	4602      	mov	r2, r0
 800a640:	460b      	mov	r3, r1
 800a642:	4b2f      	ldr	r3, [pc, #188]	; (800a700 <UART_SetConfig+0x38c>)
 800a644:	fba3 1302 	umull	r1, r3, r3, r2
 800a648:	095b      	lsrs	r3, r3, #5
 800a64a:	2164      	movs	r1, #100	; 0x64
 800a64c:	fb01 f303 	mul.w	r3, r1, r3
 800a650:	1ad3      	subs	r3, r2, r3
 800a652:	011b      	lsls	r3, r3, #4
 800a654:	3332      	adds	r3, #50	; 0x32
 800a656:	4a2a      	ldr	r2, [pc, #168]	; (800a700 <UART_SetConfig+0x38c>)
 800a658:	fba2 2303 	umull	r2, r3, r2, r3
 800a65c:	095b      	lsrs	r3, r3, #5
 800a65e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a662:	441e      	add	r6, r3
 800a664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a666:	4618      	mov	r0, r3
 800a668:	f04f 0100 	mov.w	r1, #0
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	1894      	adds	r4, r2, r2
 800a672:	603c      	str	r4, [r7, #0]
 800a674:	415b      	adcs	r3, r3
 800a676:	607b      	str	r3, [r7, #4]
 800a678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a67c:	1812      	adds	r2, r2, r0
 800a67e:	eb41 0303 	adc.w	r3, r1, r3
 800a682:	f04f 0400 	mov.w	r4, #0
 800a686:	f04f 0500 	mov.w	r5, #0
 800a68a:	00dd      	lsls	r5, r3, #3
 800a68c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a690:	00d4      	lsls	r4, r2, #3
 800a692:	4622      	mov	r2, r4
 800a694:	462b      	mov	r3, r5
 800a696:	eb12 0a00 	adds.w	sl, r2, r0
 800a69a:	eb43 0b01 	adc.w	fp, r3, r1
 800a69e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f04f 0100 	mov.w	r1, #0
 800a6a8:	f04f 0200 	mov.w	r2, #0
 800a6ac:	f04f 0300 	mov.w	r3, #0
 800a6b0:	008b      	lsls	r3, r1, #2
 800a6b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a6b6:	0082      	lsls	r2, r0, #2
 800a6b8:	4650      	mov	r0, sl
 800a6ba:	4659      	mov	r1, fp
 800a6bc:	f7f6 fb44 	bl	8000d48 <__aeabi_uldivmod>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4b0e      	ldr	r3, [pc, #56]	; (800a700 <UART_SetConfig+0x38c>)
 800a6c6:	fba3 1302 	umull	r1, r3, r3, r2
 800a6ca:	095b      	lsrs	r3, r3, #5
 800a6cc:	2164      	movs	r1, #100	; 0x64
 800a6ce:	fb01 f303 	mul.w	r3, r1, r3
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	011b      	lsls	r3, r3, #4
 800a6d6:	3332      	adds	r3, #50	; 0x32
 800a6d8:	4a09      	ldr	r2, [pc, #36]	; (800a700 <UART_SetConfig+0x38c>)
 800a6da:	fba2 2303 	umull	r2, r3, r2, r3
 800a6de:	095b      	lsrs	r3, r3, #5
 800a6e0:	f003 020f 	and.w	r2, r3, #15
 800a6e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4432      	add	r2, r6
 800a6ea:	609a      	str	r2, [r3, #8]
}
 800a6ec:	bf00      	nop
 800a6ee:	377c      	adds	r7, #124	; 0x7c
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f6:	bf00      	nop
 800a6f8:	40011000 	.word	0x40011000
 800a6fc:	40011400 	.word	0x40011400
 800a700:	51eb851f 	.word	0x51eb851f

0800a704 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a704:	b084      	sub	sp, #16
 800a706:	b580      	push	{r7, lr}
 800a708:	b084      	sub	sp, #16
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
 800a70e:	f107 001c 	add.w	r0, r7, #28
 800a712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d122      	bne.n	800a762 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a720:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a746:	2b01      	cmp	r3, #1
 800a748:	d105      	bne.n	800a756 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f950 	bl	800a9fc <USB_CoreReset>
 800a75c:	4603      	mov	r3, r0
 800a75e:	73fb      	strb	r3, [r7, #15]
 800a760:	e01a      	b.n	800a798 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 f944 	bl	800a9fc <USB_CoreReset>
 800a774:	4603      	mov	r3, r0
 800a776:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d106      	bne.n	800a78c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a782:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	639a      	str	r2, [r3, #56]	; 0x38
 800a78a:	e005      	b.n	800a798 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a790:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d10b      	bne.n	800a7b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	f043 0206 	orr.w	r2, r3, #6
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	f043 0220 	orr.w	r2, r3, #32
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7c2:	b004      	add	sp, #16
 800a7c4:	4770      	bx	lr

0800a7c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b083      	sub	sp, #12
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f023 0201 	bic.w	r2, r3, #1
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a804:	78fb      	ldrb	r3, [r7, #3]
 800a806:	2b01      	cmp	r3, #1
 800a808:	d115      	bne.n	800a836 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a816:	2001      	movs	r0, #1
 800a818:	f7f9 fa62 	bl	8003ce0 <HAL_Delay>
      ms++;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	3301      	adds	r3, #1
 800a820:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 f8db 	bl	800a9de <USB_GetMode>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d01e      	beq.n	800a86c <USB_SetCurrentMode+0x84>
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2b31      	cmp	r3, #49	; 0x31
 800a832:	d9f0      	bls.n	800a816 <USB_SetCurrentMode+0x2e>
 800a834:	e01a      	b.n	800a86c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a836:	78fb      	ldrb	r3, [r7, #3]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d115      	bne.n	800a868 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a848:	2001      	movs	r0, #1
 800a84a:	f7f9 fa49 	bl	8003ce0 <HAL_Delay>
      ms++;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	3301      	adds	r3, #1
 800a852:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f8c2 	bl	800a9de <USB_GetMode>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d005      	beq.n	800a86c <USB_SetCurrentMode+0x84>
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2b31      	cmp	r3, #49	; 0x31
 800a864:	d9f0      	bls.n	800a848 <USB_SetCurrentMode+0x60>
 800a866:	e001      	b.n	800a86c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	e005      	b.n	800a878 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2b32      	cmp	r3, #50	; 0x32
 800a870:	d101      	bne.n	800a876 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	e000      	b.n	800a878 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a88a:	2300      	movs	r3, #0
 800a88c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	019b      	lsls	r3, r3, #6
 800a892:	f043 0220 	orr.w	r2, r3, #32
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	3301      	adds	r3, #1
 800a89e:	60fb      	str	r3, [r7, #12]
 800a8a0:	4a08      	ldr	r2, [pc, #32]	; (800a8c4 <USB_FlushTxFifo+0x44>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d901      	bls.n	800a8aa <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	e006      	b.n	800a8b8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	f003 0320 	and.w	r3, r3, #32
 800a8b2:	2b20      	cmp	r3, #32
 800a8b4:	d0f1      	beq.n	800a89a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr
 800a8c4:	00030d40 	.word	0x00030d40

0800a8c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2210      	movs	r2, #16
 800a8d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	60fb      	str	r3, [r7, #12]
 800a8e0:	4a08      	ldr	r2, [pc, #32]	; (800a904 <USB_FlushRxFifo+0x3c>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d901      	bls.n	800a8ea <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800a8e6:	2303      	movs	r3, #3
 800a8e8:	e006      	b.n	800a8f8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	f003 0310 	and.w	r3, r3, #16
 800a8f2:	2b10      	cmp	r3, #16
 800a8f4:	d0f1      	beq.n	800a8da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3714      	adds	r7, #20
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr
 800a904:	00030d40 	.word	0x00030d40

0800a908 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a908:	b480      	push	{r7}
 800a90a:	b08b      	sub	sp, #44	; 0x2c
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	4613      	mov	r3, r2
 800a914:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a91e:	88fb      	ldrh	r3, [r7, #6]
 800a920:	089b      	lsrs	r3, r3, #2
 800a922:	b29b      	uxth	r3, r3
 800a924:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a926:	88fb      	ldrh	r3, [r7, #6]
 800a928:	f003 0303 	and.w	r3, r3, #3
 800a92c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a92e:	2300      	movs	r3, #0
 800a930:	623b      	str	r3, [r7, #32]
 800a932:	e014      	b.n	800a95e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a942:	3301      	adds	r3, #1
 800a944:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a948:	3301      	adds	r3, #1
 800a94a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94e:	3301      	adds	r3, #1
 800a950:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a954:	3301      	adds	r3, #1
 800a956:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a958:	6a3b      	ldr	r3, [r7, #32]
 800a95a:	3301      	adds	r3, #1
 800a95c:	623b      	str	r3, [r7, #32]
 800a95e:	6a3a      	ldr	r2, [r7, #32]
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	429a      	cmp	r2, r3
 800a964:	d3e6      	bcc.n	800a934 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a966:	8bfb      	ldrh	r3, [r7, #30]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d01e      	beq.n	800a9aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a96c:	2300      	movs	r3, #0
 800a96e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a976:	461a      	mov	r2, r3
 800a978:	f107 0310 	add.w	r3, r7, #16
 800a97c:	6812      	ldr	r2, [r2, #0]
 800a97e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a980:	693a      	ldr	r2, [r7, #16]
 800a982:	6a3b      	ldr	r3, [r7, #32]
 800a984:	b2db      	uxtb	r3, r3
 800a986:	00db      	lsls	r3, r3, #3
 800a988:	fa22 f303 	lsr.w	r3, r2, r3
 800a98c:	b2da      	uxtb	r2, r3
 800a98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a990:	701a      	strb	r2, [r3, #0]
      i++;
 800a992:	6a3b      	ldr	r3, [r7, #32]
 800a994:	3301      	adds	r3, #1
 800a996:	623b      	str	r3, [r7, #32]
      pDest++;
 800a998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99a:	3301      	adds	r3, #1
 800a99c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a99e:	8bfb      	ldrh	r3, [r7, #30]
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a9a4:	8bfb      	ldrh	r3, [r7, #30]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d1ea      	bne.n	800a980 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	372c      	adds	r7, #44	; 0x2c
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	695b      	ldr	r3, [r3, #20]
 800a9c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	699b      	ldr	r3, [r3, #24]
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b083      	sub	sp, #12
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	695b      	ldr	r3, [r3, #20]
 800a9ea:	f003 0301 	and.w	r3, r3, #1
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	370c      	adds	r7, #12
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
	...

0800a9fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b085      	sub	sp, #20
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa04:	2300      	movs	r3, #0
 800aa06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	60fb      	str	r3, [r7, #12]
 800aa0e:	4a13      	ldr	r2, [pc, #76]	; (800aa5c <USB_CoreReset+0x60>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d901      	bls.n	800aa18 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800aa14:	2303      	movs	r3, #3
 800aa16:	e01a      	b.n	800aa4e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	daf3      	bge.n	800aa08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa20:	2300      	movs	r3, #0
 800aa22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	f043 0201 	orr.w	r2, r3, #1
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	3301      	adds	r3, #1
 800aa34:	60fb      	str	r3, [r7, #12]
 800aa36:	4a09      	ldr	r2, [pc, #36]	; (800aa5c <USB_CoreReset+0x60>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d901      	bls.n	800aa40 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	e006      	b.n	800aa4e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	f003 0301 	and.w	r3, r3, #1
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d0f1      	beq.n	800aa30 <USB_CoreReset+0x34>

  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	00030d40 	.word	0x00030d40

0800aa60 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa60:	b084      	sub	sp, #16
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	f107 001c 	add.w	r0, r7, #28
 800aa6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	2300      	movs	r3, #0
 800aa80:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa92:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d018      	beq.n	800aae4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800aab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d10a      	bne.n	800aace <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aac6:	f043 0304 	orr.w	r3, r3, #4
 800aaca:	6013      	str	r3, [r2, #0]
 800aacc:	e014      	b.n	800aaf8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68ba      	ldr	r2, [r7, #8]
 800aad8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aadc:	f023 0304 	bic.w	r3, r3, #4
 800aae0:	6013      	str	r3, [r2, #0]
 800aae2:	e009      	b.n	800aaf8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aaf2:	f023 0304 	bic.w	r3, r3, #4
 800aaf6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800aaf8:	2110      	movs	r1, #16
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f7ff fec0 	bl	800a880 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f7ff fee1 	bl	800a8c8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ab06:	2300      	movs	r3, #0
 800ab08:	60fb      	str	r3, [r7, #12]
 800ab0a:	e015      	b.n	800ab38 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	015a      	lsls	r2, r3, #5
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	4413      	add	r3, r2
 800ab14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab18:	461a      	mov	r2, r3
 800ab1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab1e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	015a      	lsls	r2, r3, #5
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	4413      	add	r3, r2
 800ab28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	2300      	movs	r3, #0
 800ab30:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	3301      	adds	r3, #1
 800ab36:	60fb      	str	r3, [r7, #12]
 800ab38:	6a3b      	ldr	r3, [r7, #32]
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d3e5      	bcc.n	800ab0c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab4c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00b      	beq.n	800ab72 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab60:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a13      	ldr	r2, [pc, #76]	; (800abb4 <USB_HostInit+0x154>)
 800ab66:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a13      	ldr	r2, [pc, #76]	; (800abb8 <USB_HostInit+0x158>)
 800ab6c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800ab70:	e009      	b.n	800ab86 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2280      	movs	r2, #128	; 0x80
 800ab76:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a10      	ldr	r2, [pc, #64]	; (800abbc <USB_HostInit+0x15c>)
 800ab7c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a0f      	ldr	r2, [pc, #60]	; (800abc0 <USB_HostInit+0x160>)
 800ab82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d105      	bne.n	800ab98 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	699b      	ldr	r3, [r3, #24]
 800ab90:	f043 0210 	orr.w	r2, r3, #16
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	699a      	ldr	r2, [r3, #24]
 800ab9c:	4b09      	ldr	r3, [pc, #36]	; (800abc4 <USB_HostInit+0x164>)
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800abb0:	b004      	add	sp, #16
 800abb2:	4770      	bx	lr
 800abb4:	01000200 	.word	0x01000200
 800abb8:	00e00300 	.word	0x00e00300
 800abbc:	00600080 	.word	0x00600080
 800abc0:	004000e0 	.word	0x004000e0
 800abc4:	a3200008 	.word	0xa3200008

0800abc8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	460b      	mov	r3, r1
 800abd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800abe6:	f023 0303 	bic.w	r3, r3, #3
 800abea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	78fb      	ldrb	r3, [r7, #3]
 800abf6:	f003 0303 	and.w	r3, r3, #3
 800abfa:	68f9      	ldr	r1, [r7, #12]
 800abfc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ac00:	4313      	orrs	r3, r2
 800ac02:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ac04:	78fb      	ldrb	r3, [r7, #3]
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d107      	bne.n	800ac1a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac10:	461a      	mov	r2, r3
 800ac12:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ac16:	6053      	str	r3, [r2, #4]
 800ac18:	e009      	b.n	800ac2e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ac1a:	78fb      	ldrb	r3, [r7, #3]
 800ac1c:	2b02      	cmp	r3, #2
 800ac1e:	d106      	bne.n	800ac2e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac26:	461a      	mov	r2, r3
 800ac28:	f241 7370 	movw	r3, #6000	; 0x1770
 800ac2c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3714      	adds	r7, #20
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac4e:	695b      	ldr	r3, [r3, #20]
 800ac50:	b29b      	uxth	r3, r3
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3714      	adds	r7, #20
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr

0800ac5e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ac5e:	b480      	push	{r7}
 800ac60:	b089      	sub	sp, #36	; 0x24
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	460b      	mov	r3, r1
 800ac68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800ac6e:	78fb      	ldrb	r3, [r7, #3]
 800ac70:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800ac72:	2300      	movs	r3, #0
 800ac74:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	015a      	lsls	r2, r3, #5
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	0c9b      	lsrs	r3, r3, #18
 800ac86:	f003 0303 	and.w	r3, r3, #3
 800ac8a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	015a      	lsls	r2, r3, #5
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	4413      	add	r3, r2
 800ac94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	0fdb      	lsrs	r3, r3, #31
 800ac9c:	f003 0301 	and.w	r3, r3, #1
 800aca0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	f003 0320 	and.w	r3, r3, #32
 800acaa:	2b20      	cmp	r3, #32
 800acac:	d104      	bne.n	800acb8 <USB_HC_Halt+0x5a>
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800acb4:	2300      	movs	r3, #0
 800acb6:	e0e8      	b.n	800ae8a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d002      	beq.n	800acc4 <USB_HC_Halt+0x66>
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	2b02      	cmp	r3, #2
 800acc2:	d173      	bne.n	800adac <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	4413      	add	r3, r2
 800accc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	697a      	ldr	r2, [r7, #20]
 800acd4:	0151      	lsls	r1, r2, #5
 800acd6:	69ba      	ldr	r2, [r7, #24]
 800acd8:	440a      	add	r2, r1
 800acda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ace2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	f003 0320 	and.w	r3, r3, #32
 800acec:	2b00      	cmp	r3, #0
 800acee:	f040 80cb 	bne.w	800ae88 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d143      	bne.n	800ad86 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	015a      	lsls	r2, r3, #5
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	4413      	add	r3, r2
 800ad06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	697a      	ldr	r2, [r7, #20]
 800ad0e:	0151      	lsls	r1, r2, #5
 800ad10:	69ba      	ldr	r2, [r7, #24]
 800ad12:	440a      	add	r2, r1
 800ad14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad1c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	015a      	lsls	r2, r3, #5
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	4413      	add	r3, r2
 800ad26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	697a      	ldr	r2, [r7, #20]
 800ad2e:	0151      	lsls	r1, r2, #5
 800ad30:	69ba      	ldr	r2, [r7, #24]
 800ad32:	440a      	add	r2, r1
 800ad34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad3c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	015a      	lsls	r2, r3, #5
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	4413      	add	r3, r2
 800ad46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	697a      	ldr	r2, [r7, #20]
 800ad4e:	0151      	lsls	r1, r2, #5
 800ad50:	69ba      	ldr	r2, [r7, #24]
 800ad52:	440a      	add	r2, r1
 800ad54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad5c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	3301      	adds	r3, #1
 800ad62:	61fb      	str	r3, [r7, #28]
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad6a:	d81d      	bhi.n	800ada8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	015a      	lsls	r2, r3, #5
 800ad70:	69bb      	ldr	r3, [r7, #24]
 800ad72:	4413      	add	r3, r2
 800ad74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad82:	d0ec      	beq.n	800ad5e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ad84:	e080      	b.n	800ae88 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	015a      	lsls	r2, r3, #5
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	697a      	ldr	r2, [r7, #20]
 800ad96:	0151      	lsls	r1, r2, #5
 800ad98:	69ba      	ldr	r2, [r7, #24]
 800ad9a:	440a      	add	r2, r1
 800ad9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ada0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ada4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ada6:	e06f      	b.n	800ae88 <USB_HC_Halt+0x22a>
            break;
 800ada8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800adaa:	e06d      	b.n	800ae88 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	015a      	lsls	r2, r3, #5
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	4413      	add	r3, r2
 800adb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	697a      	ldr	r2, [r7, #20]
 800adbc:	0151      	lsls	r1, r2, #5
 800adbe:	69ba      	ldr	r2, [r7, #24]
 800adc0:	440a      	add	r2, r1
 800adc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800adca:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800adcc:	69bb      	ldr	r3, [r7, #24]
 800adce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800add8:	2b00      	cmp	r3, #0
 800adda:	d143      	bne.n	800ae64 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	015a      	lsls	r2, r3, #5
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	4413      	add	r3, r2
 800ade4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	697a      	ldr	r2, [r7, #20]
 800adec:	0151      	lsls	r1, r2, #5
 800adee:	69ba      	ldr	r2, [r7, #24]
 800adf0:	440a      	add	r2, r1
 800adf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800adfa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	015a      	lsls	r2, r3, #5
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	4413      	add	r3, r2
 800ae04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	697a      	ldr	r2, [r7, #20]
 800ae0c:	0151      	lsls	r1, r2, #5
 800ae0e:	69ba      	ldr	r2, [r7, #24]
 800ae10:	440a      	add	r2, r1
 800ae12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae1a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	015a      	lsls	r2, r3, #5
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	4413      	add	r3, r2
 800ae24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	697a      	ldr	r2, [r7, #20]
 800ae2c:	0151      	lsls	r1, r2, #5
 800ae2e:	69ba      	ldr	r2, [r7, #24]
 800ae30:	440a      	add	r2, r1
 800ae32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae3a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	61fb      	str	r3, [r7, #28]
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae48:	d81d      	bhi.n	800ae86 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	015a      	lsls	r2, r3, #5
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	4413      	add	r3, r2
 800ae52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae60:	d0ec      	beq.n	800ae3c <USB_HC_Halt+0x1de>
 800ae62:	e011      	b.n	800ae88 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	015a      	lsls	r2, r3, #5
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	4413      	add	r3, r2
 800ae6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	697a      	ldr	r2, [r7, #20]
 800ae74:	0151      	lsls	r1, r2, #5
 800ae76:	69ba      	ldr	r2, [r7, #24]
 800ae78:	440a      	add	r2, r1
 800ae7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae82:	6013      	str	r3, [r2, #0]
 800ae84:	e000      	b.n	800ae88 <USB_HC_Halt+0x22a>
          break;
 800ae86:	bf00      	nop
    }
  }

  return HAL_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3724      	adds	r7, #36	; 0x24
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
	...

0800ae98 <__NVIC_SetPriority>:
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	4603      	mov	r3, r0
 800aea0:	6039      	str	r1, [r7, #0]
 800aea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	db0a      	blt.n	800aec2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	b2da      	uxtb	r2, r3
 800aeb0:	490c      	ldr	r1, [pc, #48]	; (800aee4 <__NVIC_SetPriority+0x4c>)
 800aeb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeb6:	0112      	lsls	r2, r2, #4
 800aeb8:	b2d2      	uxtb	r2, r2
 800aeba:	440b      	add	r3, r1
 800aebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800aec0:	e00a      	b.n	800aed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	b2da      	uxtb	r2, r3
 800aec6:	4908      	ldr	r1, [pc, #32]	; (800aee8 <__NVIC_SetPriority+0x50>)
 800aec8:	79fb      	ldrb	r3, [r7, #7]
 800aeca:	f003 030f 	and.w	r3, r3, #15
 800aece:	3b04      	subs	r3, #4
 800aed0:	0112      	lsls	r2, r2, #4
 800aed2:	b2d2      	uxtb	r2, r2
 800aed4:	440b      	add	r3, r1
 800aed6:	761a      	strb	r2, [r3, #24]
}
 800aed8:	bf00      	nop
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr
 800aee4:	e000e100 	.word	0xe000e100
 800aee8:	e000ed00 	.word	0xe000ed00

0800aeec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800aeec:	b580      	push	{r7, lr}
 800aeee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800aef0:	4b05      	ldr	r3, [pc, #20]	; (800af08 <SysTick_Handler+0x1c>)
 800aef2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800aef4:	f001 fdf2 	bl	800cadc <xTaskGetSchedulerState>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d001      	beq.n	800af02 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800aefe:	f002 fdcb 	bl	800da98 <xPortSysTickHandler>
  }
}
 800af02:	bf00      	nop
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	e000e010 	.word	0xe000e010

0800af0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800af0c:	b580      	push	{r7, lr}
 800af0e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800af10:	2100      	movs	r1, #0
 800af12:	f06f 0004 	mvn.w	r0, #4
 800af16:	f7ff ffbf 	bl	800ae98 <__NVIC_SetPriority>
#endif
}
 800af1a:	bf00      	nop
 800af1c:	bd80      	pop	{r7, pc}
	...

0800af20 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af26:	f3ef 8305 	mrs	r3, IPSR
 800af2a:	603b      	str	r3, [r7, #0]
  return(result);
 800af2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d003      	beq.n	800af3a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800af32:	f06f 0305 	mvn.w	r3, #5
 800af36:	607b      	str	r3, [r7, #4]
 800af38:	e00c      	b.n	800af54 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800af3a:	4b0a      	ldr	r3, [pc, #40]	; (800af64 <osKernelInitialize+0x44>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d105      	bne.n	800af4e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800af42:	4b08      	ldr	r3, [pc, #32]	; (800af64 <osKernelInitialize+0x44>)
 800af44:	2201      	movs	r2, #1
 800af46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800af48:	2300      	movs	r3, #0
 800af4a:	607b      	str	r3, [r7, #4]
 800af4c:	e002      	b.n	800af54 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800af4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800af54:	687b      	ldr	r3, [r7, #4]
}
 800af56:	4618      	mov	r0, r3
 800af58:	370c      	adds	r7, #12
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	20008108 	.word	0x20008108

0800af68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af6e:	f3ef 8305 	mrs	r3, IPSR
 800af72:	603b      	str	r3, [r7, #0]
  return(result);
 800af74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af76:	2b00      	cmp	r3, #0
 800af78:	d003      	beq.n	800af82 <osKernelStart+0x1a>
    stat = osErrorISR;
 800af7a:	f06f 0305 	mvn.w	r3, #5
 800af7e:	607b      	str	r3, [r7, #4]
 800af80:	e010      	b.n	800afa4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800af82:	4b0b      	ldr	r3, [pc, #44]	; (800afb0 <osKernelStart+0x48>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2b01      	cmp	r3, #1
 800af88:	d109      	bne.n	800af9e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800af8a:	f7ff ffbf 	bl	800af0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800af8e:	4b08      	ldr	r3, [pc, #32]	; (800afb0 <osKernelStart+0x48>)
 800af90:	2202      	movs	r2, #2
 800af92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800af94:	f001 f934 	bl	800c200 <vTaskStartScheduler>
      stat = osOK;
 800af98:	2300      	movs	r3, #0
 800af9a:	607b      	str	r3, [r7, #4]
 800af9c:	e002      	b.n	800afa4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800af9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afa2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800afa4:	687b      	ldr	r3, [r7, #4]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	20008108 	.word	0x20008108

0800afb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b08e      	sub	sp, #56	; 0x38
 800afb8:	af04      	add	r7, sp, #16
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800afc0:	2300      	movs	r3, #0
 800afc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afc4:	f3ef 8305 	mrs	r3, IPSR
 800afc8:	617b      	str	r3, [r7, #20]
  return(result);
 800afca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d17e      	bne.n	800b0ce <osThreadNew+0x11a>
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d07b      	beq.n	800b0ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800afd6:	2380      	movs	r3, #128	; 0x80
 800afd8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800afda:	2318      	movs	r3, #24
 800afdc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800afde:	2300      	movs	r3, #0
 800afe0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800afe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afe6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d045      	beq.n	800b07a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d002      	beq.n	800affc <osThreadNew+0x48>
        name = attr->name;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	699b      	ldr	r3, [r3, #24]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d002      	beq.n	800b00a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d008      	beq.n	800b022 <osThreadNew+0x6e>
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	2b38      	cmp	r3, #56	; 0x38
 800b014:	d805      	bhi.n	800b022 <osThreadNew+0x6e>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	f003 0301 	and.w	r3, r3, #1
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <osThreadNew+0x72>
        return (NULL);
 800b022:	2300      	movs	r3, #0
 800b024:	e054      	b.n	800b0d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	695b      	ldr	r3, [r3, #20]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d003      	beq.n	800b036 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	695b      	ldr	r3, [r3, #20]
 800b032:	089b      	lsrs	r3, r3, #2
 800b034:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00e      	beq.n	800b05c <osThreadNew+0xa8>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	2b5b      	cmp	r3, #91	; 0x5b
 800b044:	d90a      	bls.n	800b05c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d006      	beq.n	800b05c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	695b      	ldr	r3, [r3, #20]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d002      	beq.n	800b05c <osThreadNew+0xa8>
        mem = 1;
 800b056:	2301      	movs	r3, #1
 800b058:	61bb      	str	r3, [r7, #24]
 800b05a:	e010      	b.n	800b07e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10c      	bne.n	800b07e <osThreadNew+0xca>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d108      	bne.n	800b07e <osThreadNew+0xca>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d104      	bne.n	800b07e <osThreadNew+0xca>
          mem = 0;
 800b074:	2300      	movs	r3, #0
 800b076:	61bb      	str	r3, [r7, #24]
 800b078:	e001      	b.n	800b07e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b07a:	2300      	movs	r3, #0
 800b07c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	2b01      	cmp	r3, #1
 800b082:	d110      	bne.n	800b0a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b08c:	9202      	str	r2, [sp, #8]
 800b08e:	9301      	str	r3, [sp, #4]
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	6a3a      	ldr	r2, [r7, #32]
 800b098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	f000 feda 	bl	800be54 <xTaskCreateStatic>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	613b      	str	r3, [r7, #16]
 800b0a4:	e013      	b.n	800b0ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d110      	bne.n	800b0ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b0ac:	6a3b      	ldr	r3, [r7, #32]
 800b0ae:	b29a      	uxth	r2, r3
 800b0b0:	f107 0310 	add.w	r3, r7, #16
 800b0b4:	9301      	str	r3, [sp, #4]
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	9300      	str	r3, [sp, #0]
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	f000 ff25 	bl	800bf0e <xTaskCreate>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d001      	beq.n	800b0ce <osThreadNew+0x11a>
            hTask = NULL;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b0ce:	693b      	ldr	r3, [r7, #16]
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3728      	adds	r7, #40	; 0x28
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b088      	sub	sp, #32
 800b0dc:	af02      	add	r7, sp, #8
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d002      	beq.n	800b0f2 <osThreadFlagsSet+0x1a>
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	da03      	bge.n	800b0fa <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800b0f2:	f06f 0303 	mvn.w	r3, #3
 800b0f6:	60fb      	str	r3, [r7, #12]
 800b0f8:	e035      	b.n	800b166 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800b0fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b100:	f3ef 8305 	mrs	r3, IPSR
 800b104:	613b      	str	r3, [r7, #16]
  return(result);
 800b106:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d01f      	beq.n	800b14c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800b10c:	2300      	movs	r3, #0
 800b10e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800b110:	f107 0308 	add.w	r3, r7, #8
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	2300      	movs	r3, #0
 800b118:	2201      	movs	r2, #1
 800b11a:	6839      	ldr	r1, [r7, #0]
 800b11c:	6978      	ldr	r0, [r7, #20]
 800b11e:	f001 fe7b 	bl	800ce18 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800b122:	f107 030c 	add.w	r3, r7, #12
 800b126:	2200      	movs	r2, #0
 800b128:	9200      	str	r2, [sp, #0]
 800b12a:	2200      	movs	r2, #0
 800b12c:	2100      	movs	r1, #0
 800b12e:	6978      	ldr	r0, [r7, #20]
 800b130:	f001 fe72 	bl	800ce18 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d015      	beq.n	800b166 <osThreadFlagsSet+0x8e>
 800b13a:	4b0d      	ldr	r3, [pc, #52]	; (800b170 <osThreadFlagsSet+0x98>)
 800b13c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b140:	601a      	str	r2, [r3, #0]
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	e00c      	b.n	800b166 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800b14c:	2300      	movs	r3, #0
 800b14e:	2201      	movs	r2, #1
 800b150:	6839      	ldr	r1, [r7, #0]
 800b152:	6978      	ldr	r0, [r7, #20]
 800b154:	f001 fda8 	bl	800cca8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800b158:	f107 030c 	add.w	r3, r7, #12
 800b15c:	2200      	movs	r2, #0
 800b15e:	2100      	movs	r1, #0
 800b160:	6978      	ldr	r0, [r7, #20]
 800b162:	f001 fda1 	bl	800cca8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800b166:	68fb      	ldr	r3, [r7, #12]
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3718      	adds	r7, #24
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	e000ed04 	.word	0xe000ed04

0800b174 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800b174:	b580      	push	{r7, lr}
 800b176:	b08c      	sub	sp, #48	; 0x30
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b180:	f3ef 8305 	mrs	r3, IPSR
 800b184:	617b      	str	r3, [r7, #20]
  return(result);
 800b186:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d003      	beq.n	800b194 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800b18c:	f06f 0305 	mvn.w	r3, #5
 800b190:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b192:	e06b      	b.n	800b26c <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2b00      	cmp	r3, #0
 800b198:	da03      	bge.n	800b1a2 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800b19a:	f06f 0303 	mvn.w	r3, #3
 800b19e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1a0:	e064      	b.n	800b26c <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	f003 0302 	and.w	r3, r3, #2
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d002      	beq.n	800b1b2 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1b0:	e001      	b.n	800b1b6 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800b1be:	f001 f931 	bl	800c424 <xTaskGetTickCount>
 800b1c2:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800b1c4:	f107 0210 	add.w	r2, r7, #16
 800b1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	f001 fd11 	bl	800cbf4 <xTaskNotifyWait>
 800b1d2:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d137      	bne.n	800b24a <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800b1da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	4013      	ands	r3, r2
 800b1e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	f003 0301 	and.w	r3, r3, #1
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00c      	beq.n	800b20e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d032      	beq.n	800b266 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d10f      	bne.n	800b226 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800b206:	f06f 0302 	mvn.w	r3, #2
 800b20a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800b20c:	e02e      	b.n	800b26c <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b212:	4013      	ands	r3, r2
 800b214:	2b00      	cmp	r3, #0
 800b216:	d128      	bne.n	800b26a <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d103      	bne.n	800b226 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800b21e:	f06f 0302 	mvn.w	r3, #2
 800b222:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800b224:	e022      	b.n	800b26c <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800b226:	f001 f8fd 	bl	800c424 <xTaskGetTickCount>
 800b22a:	4602      	mov	r2, r0
 800b22c:	6a3b      	ldr	r3, [r7, #32]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800b232:	69ba      	ldr	r2, [r7, #24]
 800b234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b236:	429a      	cmp	r2, r3
 800b238:	d902      	bls.n	800b240 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800b23a:	2300      	movs	r3, #0
 800b23c:	627b      	str	r3, [r7, #36]	; 0x24
 800b23e:	e00e      	b.n	800b25e <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800b240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	1ad3      	subs	r3, r2, r3
 800b246:	627b      	str	r3, [r7, #36]	; 0x24
 800b248:	e009      	b.n	800b25e <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d103      	bne.n	800b258 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800b250:	f06f 0302 	mvn.w	r3, #2
 800b254:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b256:	e002      	b.n	800b25e <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800b258:	f06f 0301 	mvn.w	r3, #1
 800b25c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d1af      	bne.n	800b1c4 <osThreadFlagsWait+0x50>
 800b264:	e002      	b.n	800b26c <osThreadFlagsWait+0xf8>
            break;
 800b266:	bf00      	nop
 800b268:	e000      	b.n	800b26c <osThreadFlagsWait+0xf8>
            break;
 800b26a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800b26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3730      	adds	r7, #48	; 0x30
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}

0800b276 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b276:	b580      	push	{r7, lr}
 800b278:	b084      	sub	sp, #16
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b27e:	f3ef 8305 	mrs	r3, IPSR
 800b282:	60bb      	str	r3, [r7, #8]
  return(result);
 800b284:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b286:	2b00      	cmp	r3, #0
 800b288:	d003      	beq.n	800b292 <osDelay+0x1c>
    stat = osErrorISR;
 800b28a:	f06f 0305 	mvn.w	r3, #5
 800b28e:	60fb      	str	r3, [r7, #12]
 800b290:	e007      	b.n	800b2a2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b292:	2300      	movs	r3, #0
 800b294:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 ff7b 	bl	800c198 <vTaskDelay>
    }
  }

  return (stat);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3710      	adds	r7, #16
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b2ac:	b480      	push	{r7}
 800b2ae:	b085      	sub	sp, #20
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	4a07      	ldr	r2, [pc, #28]	; (800b2d8 <vApplicationGetIdleTaskMemory+0x2c>)
 800b2bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	4a06      	ldr	r2, [pc, #24]	; (800b2dc <vApplicationGetIdleTaskMemory+0x30>)
 800b2c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2280      	movs	r2, #128	; 0x80
 800b2c8:	601a      	str	r2, [r3, #0]
}
 800b2ca:	bf00      	nop
 800b2cc:	3714      	adds	r7, #20
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	2000810c 	.word	0x2000810c
 800b2dc:	20008168 	.word	0x20008168

0800b2e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b2e0:	b480      	push	{r7}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	4a07      	ldr	r2, [pc, #28]	; (800b30c <vApplicationGetTimerTaskMemory+0x2c>)
 800b2f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	4a06      	ldr	r2, [pc, #24]	; (800b310 <vApplicationGetTimerTaskMemory+0x30>)
 800b2f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2fe:	601a      	str	r2, [r3, #0]
}
 800b300:	bf00      	nop
 800b302:	3714      	adds	r7, #20
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr
 800b30c:	20008368 	.word	0x20008368
 800b310:	200083c4 	.word	0x200083c4

0800b314 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f103 0208 	add.w	r2, r3, #8
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b32c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f103 0208 	add.w	r2, r3, #8
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f103 0208 	add.w	r2, r3, #8
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b348:	bf00      	nop
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b362:	bf00      	nop
 800b364:	370c      	adds	r7, #12
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr

0800b36e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b36e:	b480      	push	{r7}
 800b370:	b085      	sub	sp, #20
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
 800b376:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	689a      	ldr	r2, [r3, #8]
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	683a      	ldr	r2, [r7, #0]
 800b392:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	683a      	ldr	r2, [r7, #0]
 800b398:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	1c5a      	adds	r2, r3, #1
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	601a      	str	r2, [r3, #0]
}
 800b3aa:	bf00      	nop
 800b3ac:	3714      	adds	r7, #20
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b085      	sub	sp, #20
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
 800b3be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3cc:	d103      	bne.n	800b3d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	60fb      	str	r3, [r7, #12]
 800b3d4:	e00c      	b.n	800b3f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	3308      	adds	r3, #8
 800b3da:	60fb      	str	r3, [r7, #12]
 800b3dc:	e002      	b.n	800b3e4 <vListInsert+0x2e>
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	60fb      	str	r3, [r7, #12]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	68ba      	ldr	r2, [r7, #8]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d2f6      	bcs.n	800b3de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	685a      	ldr	r2, [r3, #4]
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	683a      	ldr	r2, [r7, #0]
 800b3fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	683a      	ldr	r2, [r7, #0]
 800b40a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	1c5a      	adds	r2, r3, #1
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	601a      	str	r2, [r3, #0]
}
 800b41c:	bf00      	nop
 800b41e:	3714      	adds	r7, #20
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b428:	b480      	push	{r7}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	6892      	ldr	r2, [r2, #8]
 800b43e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	6852      	ldr	r2, [r2, #4]
 800b448:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	429a      	cmp	r2, r3
 800b452:	d103      	bne.n	800b45c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	689a      	ldr	r2, [r3, #8]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	1e5a      	subs	r2, r3, #1
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
}
 800b470:	4618      	mov	r0, r3
 800b472:	3714      	adds	r7, #20
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10a      	bne.n	800b4a6 <xQueueGenericReset+0x2a>
	__asm volatile
 800b490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b494:	f383 8811 	msr	BASEPRI, r3
 800b498:	f3bf 8f6f 	isb	sy
 800b49c:	f3bf 8f4f 	dsb	sy
 800b4a0:	60bb      	str	r3, [r7, #8]
}
 800b4a2:	bf00      	nop
 800b4a4:	e7fe      	b.n	800b4a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b4a6:	f002 fa65 	bl	800d974 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4b2:	68f9      	ldr	r1, [r7, #12]
 800b4b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b4b6:	fb01 f303 	mul.w	r3, r1, r3
 800b4ba:	441a      	add	r2, r3
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	68f9      	ldr	r1, [r7, #12]
 800b4da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b4dc:	fb01 f303 	mul.w	r3, r1, r3
 800b4e0:	441a      	add	r2, r3
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	22ff      	movs	r2, #255	; 0xff
 800b4ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	22ff      	movs	r2, #255	; 0xff
 800b4f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d114      	bne.n	800b526 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d01a      	beq.n	800b53a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	3310      	adds	r3, #16
 800b508:	4618      	mov	r0, r3
 800b50a:	f001 f903 	bl	800c714 <xTaskRemoveFromEventList>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d012      	beq.n	800b53a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b514:	4b0c      	ldr	r3, [pc, #48]	; (800b548 <xQueueGenericReset+0xcc>)
 800b516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b51a:	601a      	str	r2, [r3, #0]
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	f3bf 8f6f 	isb	sy
 800b524:	e009      	b.n	800b53a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	3310      	adds	r3, #16
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7ff fef2 	bl	800b314 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	3324      	adds	r3, #36	; 0x24
 800b534:	4618      	mov	r0, r3
 800b536:	f7ff feed 	bl	800b314 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b53a:	f002 fa4b 	bl	800d9d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b53e:	2301      	movs	r3, #1
}
 800b540:	4618      	mov	r0, r3
 800b542:	3710      	adds	r7, #16
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	e000ed04 	.word	0xe000ed04

0800b54c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b08e      	sub	sp, #56	; 0x38
 800b550:	af02      	add	r7, sp, #8
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
 800b558:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10a      	bne.n	800b576 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b564:	f383 8811 	msr	BASEPRI, r3
 800b568:	f3bf 8f6f 	isb	sy
 800b56c:	f3bf 8f4f 	dsb	sy
 800b570:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b572:	bf00      	nop
 800b574:	e7fe      	b.n	800b574 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d10a      	bne.n	800b592 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b580:	f383 8811 	msr	BASEPRI, r3
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	f3bf 8f4f 	dsb	sy
 800b58c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b58e:	bf00      	nop
 800b590:	e7fe      	b.n	800b590 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <xQueueGenericCreateStatic+0x52>
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d001      	beq.n	800b5a2 <xQueueGenericCreateStatic+0x56>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e000      	b.n	800b5a4 <xQueueGenericCreateStatic+0x58>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10a      	bne.n	800b5be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ac:	f383 8811 	msr	BASEPRI, r3
 800b5b0:	f3bf 8f6f 	isb	sy
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	623b      	str	r3, [r7, #32]
}
 800b5ba:	bf00      	nop
 800b5bc:	e7fe      	b.n	800b5bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d102      	bne.n	800b5ca <xQueueGenericCreateStatic+0x7e>
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d101      	bne.n	800b5ce <xQueueGenericCreateStatic+0x82>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e000      	b.n	800b5d0 <xQueueGenericCreateStatic+0x84>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d10a      	bne.n	800b5ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d8:	f383 8811 	msr	BASEPRI, r3
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	61fb      	str	r3, [r7, #28]
}
 800b5e6:	bf00      	nop
 800b5e8:	e7fe      	b.n	800b5e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b5ea:	2350      	movs	r3, #80	; 0x50
 800b5ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	2b50      	cmp	r3, #80	; 0x50
 800b5f2:	d00a      	beq.n	800b60a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f8:	f383 8811 	msr	BASEPRI, r3
 800b5fc:	f3bf 8f6f 	isb	sy
 800b600:	f3bf 8f4f 	dsb	sy
 800b604:	61bb      	str	r3, [r7, #24]
}
 800b606:	bf00      	nop
 800b608:	e7fe      	b.n	800b608 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b60a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b612:	2b00      	cmp	r3, #0
 800b614:	d00d      	beq.n	800b632 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b618:	2201      	movs	r2, #1
 800b61a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b61e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	4613      	mov	r3, r2
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	68b9      	ldr	r1, [r7, #8]
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f000 f805 	bl	800b63c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b634:	4618      	mov	r0, r3
 800b636:	3730      	adds	r7, #48	; 0x30
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
 800b648:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d103      	bne.n	800b658 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b650:	69bb      	ldr	r3, [r7, #24]
 800b652:	69ba      	ldr	r2, [r7, #24]
 800b654:	601a      	str	r2, [r3, #0]
 800b656:	e002      	b.n	800b65e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b65e:	69bb      	ldr	r3, [r7, #24]
 800b660:	68fa      	ldr	r2, [r7, #12]
 800b662:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	68ba      	ldr	r2, [r7, #8]
 800b668:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b66a:	2101      	movs	r1, #1
 800b66c:	69b8      	ldr	r0, [r7, #24]
 800b66e:	f7ff ff05 	bl	800b47c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	78fa      	ldrb	r2, [r7, #3]
 800b676:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b67a:	bf00      	nop
 800b67c:	3710      	adds	r7, #16
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
	...

0800b684 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b08e      	sub	sp, #56	; 0x38
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	607a      	str	r2, [r7, #4]
 800b690:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b692:	2300      	movs	r3, #0
 800b694:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d10a      	bne.n	800b6b6 <xQueueGenericSend+0x32>
	__asm volatile
 800b6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a4:	f383 8811 	msr	BASEPRI, r3
 800b6a8:	f3bf 8f6f 	isb	sy
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b6b2:	bf00      	nop
 800b6b4:	e7fe      	b.n	800b6b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d103      	bne.n	800b6c4 <xQueueGenericSend+0x40>
 800b6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d101      	bne.n	800b6c8 <xQueueGenericSend+0x44>
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e000      	b.n	800b6ca <xQueueGenericSend+0x46>
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d10a      	bne.n	800b6e4 <xQueueGenericSend+0x60>
	__asm volatile
 800b6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b6e0:	bf00      	nop
 800b6e2:	e7fe      	b.n	800b6e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	d103      	bne.n	800b6f2 <xQueueGenericSend+0x6e>
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d101      	bne.n	800b6f6 <xQueueGenericSend+0x72>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e000      	b.n	800b6f8 <xQueueGenericSend+0x74>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10a      	bne.n	800b712 <xQueueGenericSend+0x8e>
	__asm volatile
 800b6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b700:	f383 8811 	msr	BASEPRI, r3
 800b704:	f3bf 8f6f 	isb	sy
 800b708:	f3bf 8f4f 	dsb	sy
 800b70c:	623b      	str	r3, [r7, #32]
}
 800b70e:	bf00      	nop
 800b710:	e7fe      	b.n	800b710 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b712:	f001 f9e3 	bl	800cadc <xTaskGetSchedulerState>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d102      	bne.n	800b722 <xQueueGenericSend+0x9e>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d101      	bne.n	800b726 <xQueueGenericSend+0xa2>
 800b722:	2301      	movs	r3, #1
 800b724:	e000      	b.n	800b728 <xQueueGenericSend+0xa4>
 800b726:	2300      	movs	r3, #0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10a      	bne.n	800b742 <xQueueGenericSend+0xbe>
	__asm volatile
 800b72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b730:	f383 8811 	msr	BASEPRI, r3
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	61fb      	str	r3, [r7, #28]
}
 800b73e:	bf00      	nop
 800b740:	e7fe      	b.n	800b740 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b742:	f002 f917 	bl	800d974 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b74e:	429a      	cmp	r2, r3
 800b750:	d302      	bcc.n	800b758 <xQueueGenericSend+0xd4>
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	2b02      	cmp	r3, #2
 800b756:	d129      	bne.n	800b7ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b758:	683a      	ldr	r2, [r7, #0]
 800b75a:	68b9      	ldr	r1, [r7, #8]
 800b75c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b75e:	f000 fa0b 	bl	800bb78 <prvCopyDataToQueue>
 800b762:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d010      	beq.n	800b78e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76e:	3324      	adds	r3, #36	; 0x24
 800b770:	4618      	mov	r0, r3
 800b772:	f000 ffcf 	bl	800c714 <xTaskRemoveFromEventList>
 800b776:	4603      	mov	r3, r0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d013      	beq.n	800b7a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b77c:	4b3f      	ldr	r3, [pc, #252]	; (800b87c <xQueueGenericSend+0x1f8>)
 800b77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b782:	601a      	str	r2, [r3, #0]
 800b784:	f3bf 8f4f 	dsb	sy
 800b788:	f3bf 8f6f 	isb	sy
 800b78c:	e00a      	b.n	800b7a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b790:	2b00      	cmp	r3, #0
 800b792:	d007      	beq.n	800b7a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b794:	4b39      	ldr	r3, [pc, #228]	; (800b87c <xQueueGenericSend+0x1f8>)
 800b796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b79a:	601a      	str	r2, [r3, #0]
 800b79c:	f3bf 8f4f 	dsb	sy
 800b7a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b7a4:	f002 f916 	bl	800d9d4 <vPortExitCritical>
				return pdPASS;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	e063      	b.n	800b874 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d103      	bne.n	800b7ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b7b2:	f002 f90f 	bl	800d9d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	e05c      	b.n	800b874 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d106      	bne.n	800b7ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7c0:	f107 0314 	add.w	r3, r7, #20
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f001 f82f 	bl	800c828 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b7ce:	f002 f901 	bl	800d9d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b7d2:	f000 fd7b 	bl	800c2cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b7d6:	f002 f8cd 	bl	800d974 <vPortEnterCritical>
 800b7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7e0:	b25b      	sxtb	r3, r3
 800b7e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7e6:	d103      	bne.n	800b7f0 <xQueueGenericSend+0x16c>
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7f6:	b25b      	sxtb	r3, r3
 800b7f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7fc:	d103      	bne.n	800b806 <xQueueGenericSend+0x182>
 800b7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b800:	2200      	movs	r2, #0
 800b802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b806:	f002 f8e5 	bl	800d9d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b80a:	1d3a      	adds	r2, r7, #4
 800b80c:	f107 0314 	add.w	r3, r7, #20
 800b810:	4611      	mov	r1, r2
 800b812:	4618      	mov	r0, r3
 800b814:	f001 f81e 	bl	800c854 <xTaskCheckForTimeOut>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d124      	bne.n	800b868 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b81e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b820:	f000 faa2 	bl	800bd68 <prvIsQueueFull>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d018      	beq.n	800b85c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82c:	3310      	adds	r3, #16
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	4611      	mov	r1, r2
 800b832:	4618      	mov	r0, r3
 800b834:	f000 ff1e 	bl	800c674 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b83a:	f000 fa2d 	bl	800bc98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b83e:	f000 fd53 	bl	800c2e8 <xTaskResumeAll>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	f47f af7c 	bne.w	800b742 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b84a:	4b0c      	ldr	r3, [pc, #48]	; (800b87c <xQueueGenericSend+0x1f8>)
 800b84c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b850:	601a      	str	r2, [r3, #0]
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	e772      	b.n	800b742 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b85c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b85e:	f000 fa1b 	bl	800bc98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b862:	f000 fd41 	bl	800c2e8 <xTaskResumeAll>
 800b866:	e76c      	b.n	800b742 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b86a:	f000 fa15 	bl	800bc98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b86e:	f000 fd3b 	bl	800c2e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b872:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b874:	4618      	mov	r0, r3
 800b876:	3738      	adds	r7, #56	; 0x38
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	e000ed04 	.word	0xe000ed04

0800b880 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b090      	sub	sp, #64	; 0x40
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
 800b88c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b894:	2b00      	cmp	r3, #0
 800b896:	d10a      	bne.n	800b8ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89c:	f383 8811 	msr	BASEPRI, r3
 800b8a0:	f3bf 8f6f 	isb	sy
 800b8a4:	f3bf 8f4f 	dsb	sy
 800b8a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b8aa:	bf00      	nop
 800b8ac:	e7fe      	b.n	800b8ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d103      	bne.n	800b8bc <xQueueGenericSendFromISR+0x3c>
 800b8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d101      	bne.n	800b8c0 <xQueueGenericSendFromISR+0x40>
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e000      	b.n	800b8c2 <xQueueGenericSendFromISR+0x42>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d10a      	bne.n	800b8dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ca:	f383 8811 	msr	BASEPRI, r3
 800b8ce:	f3bf 8f6f 	isb	sy
 800b8d2:	f3bf 8f4f 	dsb	sy
 800b8d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b8d8:	bf00      	nop
 800b8da:	e7fe      	b.n	800b8da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d103      	bne.n	800b8ea <xQueueGenericSendFromISR+0x6a>
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d101      	bne.n	800b8ee <xQueueGenericSendFromISR+0x6e>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e000      	b.n	800b8f0 <xQueueGenericSendFromISR+0x70>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10a      	bne.n	800b90a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	623b      	str	r3, [r7, #32]
}
 800b906:	bf00      	nop
 800b908:	e7fe      	b.n	800b908 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b90a:	f002 f915 	bl	800db38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b90e:	f3ef 8211 	mrs	r2, BASEPRI
 800b912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b916:	f383 8811 	msr	BASEPRI, r3
 800b91a:	f3bf 8f6f 	isb	sy
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	61fa      	str	r2, [r7, #28]
 800b924:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b926:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b928:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b932:	429a      	cmp	r2, r3
 800b934:	d302      	bcc.n	800b93c <xQueueGenericSendFromISR+0xbc>
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	2b02      	cmp	r3, #2
 800b93a:	d12f      	bne.n	800b99c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b94a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b94c:	683a      	ldr	r2, [r7, #0]
 800b94e:	68b9      	ldr	r1, [r7, #8]
 800b950:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b952:	f000 f911 	bl	800bb78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b956:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b95a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b95e:	d112      	bne.n	800b986 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b964:	2b00      	cmp	r3, #0
 800b966:	d016      	beq.n	800b996 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96a:	3324      	adds	r3, #36	; 0x24
 800b96c:	4618      	mov	r0, r3
 800b96e:	f000 fed1 	bl	800c714 <xTaskRemoveFromEventList>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d00e      	beq.n	800b996 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00b      	beq.n	800b996 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2201      	movs	r2, #1
 800b982:	601a      	str	r2, [r3, #0]
 800b984:	e007      	b.n	800b996 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b986:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b98a:	3301      	adds	r3, #1
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	b25a      	sxtb	r2, r3
 800b990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b996:	2301      	movs	r3, #1
 800b998:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b99a:	e001      	b.n	800b9a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b99c:	2300      	movs	r3, #0
 800b99e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b9aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3740      	adds	r7, #64	; 0x40
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
	...

0800b9b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b08c      	sub	sp, #48	; 0x30
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10a      	bne.n	800b9e8 <xQueueReceive+0x30>
	__asm volatile
 800b9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d6:	f383 8811 	msr	BASEPRI, r3
 800b9da:	f3bf 8f6f 	isb	sy
 800b9de:	f3bf 8f4f 	dsb	sy
 800b9e2:	623b      	str	r3, [r7, #32]
}
 800b9e4:	bf00      	nop
 800b9e6:	e7fe      	b.n	800b9e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d103      	bne.n	800b9f6 <xQueueReceive+0x3e>
 800b9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d101      	bne.n	800b9fa <xQueueReceive+0x42>
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e000      	b.n	800b9fc <xQueueReceive+0x44>
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10a      	bne.n	800ba16 <xQueueReceive+0x5e>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	61fb      	str	r3, [r7, #28]
}
 800ba12:	bf00      	nop
 800ba14:	e7fe      	b.n	800ba14 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba16:	f001 f861 	bl	800cadc <xTaskGetSchedulerState>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d102      	bne.n	800ba26 <xQueueReceive+0x6e>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d101      	bne.n	800ba2a <xQueueReceive+0x72>
 800ba26:	2301      	movs	r3, #1
 800ba28:	e000      	b.n	800ba2c <xQueueReceive+0x74>
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d10a      	bne.n	800ba46 <xQueueReceive+0x8e>
	__asm volatile
 800ba30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba34:	f383 8811 	msr	BASEPRI, r3
 800ba38:	f3bf 8f6f 	isb	sy
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	61bb      	str	r3, [r7, #24]
}
 800ba42:	bf00      	nop
 800ba44:	e7fe      	b.n	800ba44 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba46:	f001 ff95 	bl	800d974 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d01f      	beq.n	800ba96 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ba56:	68b9      	ldr	r1, [r7, #8]
 800ba58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba5a:	f000 f8f7 	bl	800bc4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ba5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba60:	1e5a      	subs	r2, r3, #1
 800ba62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba68:	691b      	ldr	r3, [r3, #16]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00f      	beq.n	800ba8e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba70:	3310      	adds	r3, #16
 800ba72:	4618      	mov	r0, r3
 800ba74:	f000 fe4e 	bl	800c714 <xTaskRemoveFromEventList>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d007      	beq.n	800ba8e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ba7e:	4b3d      	ldr	r3, [pc, #244]	; (800bb74 <xQueueReceive+0x1bc>)
 800ba80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba84:	601a      	str	r2, [r3, #0]
 800ba86:	f3bf 8f4f 	dsb	sy
 800ba8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba8e:	f001 ffa1 	bl	800d9d4 <vPortExitCritical>
				return pdPASS;
 800ba92:	2301      	movs	r3, #1
 800ba94:	e069      	b.n	800bb6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d103      	bne.n	800baa4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba9c:	f001 ff9a 	bl	800d9d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800baa0:	2300      	movs	r3, #0
 800baa2:	e062      	b.n	800bb6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800baa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d106      	bne.n	800bab8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800baaa:	f107 0310 	add.w	r3, r7, #16
 800baae:	4618      	mov	r0, r3
 800bab0:	f000 feba 	bl	800c828 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bab4:	2301      	movs	r3, #1
 800bab6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bab8:	f001 ff8c 	bl	800d9d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800babc:	f000 fc06 	bl	800c2cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bac0:	f001 ff58 	bl	800d974 <vPortEnterCritical>
 800bac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800baca:	b25b      	sxtb	r3, r3
 800bacc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bad0:	d103      	bne.n	800bada <xQueueReceive+0x122>
 800bad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad4:	2200      	movs	r2, #0
 800bad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800badc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bae0:	b25b      	sxtb	r3, r3
 800bae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bae6:	d103      	bne.n	800baf0 <xQueueReceive+0x138>
 800bae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baea:	2200      	movs	r2, #0
 800baec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800baf0:	f001 ff70 	bl	800d9d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800baf4:	1d3a      	adds	r2, r7, #4
 800baf6:	f107 0310 	add.w	r3, r7, #16
 800bafa:	4611      	mov	r1, r2
 800bafc:	4618      	mov	r0, r3
 800bafe:	f000 fea9 	bl	800c854 <xTaskCheckForTimeOut>
 800bb02:	4603      	mov	r3, r0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d123      	bne.n	800bb50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb0a:	f000 f917 	bl	800bd3c <prvIsQueueEmpty>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d017      	beq.n	800bb44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb16:	3324      	adds	r3, #36	; 0x24
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	4611      	mov	r1, r2
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f000 fda9 	bl	800c674 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bb22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb24:	f000 f8b8 	bl	800bc98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bb28:	f000 fbde 	bl	800c2e8 <xTaskResumeAll>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d189      	bne.n	800ba46 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bb32:	4b10      	ldr	r3, [pc, #64]	; (800bb74 <xQueueReceive+0x1bc>)
 800bb34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb38:	601a      	str	r2, [r3, #0]
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	f3bf 8f6f 	isb	sy
 800bb42:	e780      	b.n	800ba46 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bb44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb46:	f000 f8a7 	bl	800bc98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb4a:	f000 fbcd 	bl	800c2e8 <xTaskResumeAll>
 800bb4e:	e77a      	b.n	800ba46 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bb50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb52:	f000 f8a1 	bl	800bc98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb56:	f000 fbc7 	bl	800c2e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb5c:	f000 f8ee 	bl	800bd3c <prvIsQueueEmpty>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	f43f af6f 	beq.w	800ba46 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3730      	adds	r7, #48	; 0x30
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	e000ed04 	.word	0xe000ed04

0800bb78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b086      	sub	sp, #24
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bb84:	2300      	movs	r3, #0
 800bb86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d10d      	bne.n	800bbb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d14d      	bne.n	800bc3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f000 ffb8 	bl	800cb18 <xTaskPriorityDisinherit>
 800bba8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2200      	movs	r2, #0
 800bbae:	609a      	str	r2, [r3, #8]
 800bbb0:	e043      	b.n	800bc3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d119      	bne.n	800bbec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6858      	ldr	r0, [r3, #4]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	68b9      	ldr	r1, [r7, #8]
 800bbc4:	f00d fdde 	bl	8019784 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	685a      	ldr	r2, [r3, #4]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd0:	441a      	add	r2, r3
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	685a      	ldr	r2, [r3, #4]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d32b      	bcc.n	800bc3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	605a      	str	r2, [r3, #4]
 800bbea:	e026      	b.n	800bc3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	68d8      	ldr	r0, [r3, #12]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	68b9      	ldr	r1, [r7, #8]
 800bbf8:	f00d fdc4 	bl	8019784 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	68da      	ldr	r2, [r3, #12]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc04:	425b      	negs	r3, r3
 800bc06:	441a      	add	r2, r3
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	68da      	ldr	r2, [r3, #12]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d207      	bcs.n	800bc28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	689a      	ldr	r2, [r3, #8]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc20:	425b      	negs	r3, r3
 800bc22:	441a      	add	r2, r3
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	d105      	bne.n	800bc3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d002      	beq.n	800bc3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	3b01      	subs	r3, #1
 800bc38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	1c5a      	adds	r2, r3, #1
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bc42:	697b      	ldr	r3, [r7, #20]
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3718      	adds	r7, #24
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d018      	beq.n	800bc90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	68da      	ldr	r2, [r3, #12]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc66:	441a      	add	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	68da      	ldr	r2, [r3, #12]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d303      	bcc.n	800bc80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	68d9      	ldr	r1, [r3, #12]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc88:	461a      	mov	r2, r3
 800bc8a:	6838      	ldr	r0, [r7, #0]
 800bc8c:	f00d fd7a 	bl	8019784 <memcpy>
	}
}
 800bc90:	bf00      	nop
 800bc92:	3708      	adds	r7, #8
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bca0:	f001 fe68 	bl	800d974 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bcac:	e011      	b.n	800bcd2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d012      	beq.n	800bcdc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	3324      	adds	r3, #36	; 0x24
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f000 fd2a 	bl	800c714 <xTaskRemoveFromEventList>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d001      	beq.n	800bcca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bcc6:	f000 fe27 	bl	800c918 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bcca:	7bfb      	ldrb	r3, [r7, #15]
 800bccc:	3b01      	subs	r3, #1
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bcd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	dce9      	bgt.n	800bcae <prvUnlockQueue+0x16>
 800bcda:	e000      	b.n	800bcde <prvUnlockQueue+0x46>
					break;
 800bcdc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	22ff      	movs	r2, #255	; 0xff
 800bce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bce6:	f001 fe75 	bl	800d9d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bcea:	f001 fe43 	bl	800d974 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcf4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bcf6:	e011      	b.n	800bd1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	691b      	ldr	r3, [r3, #16]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d012      	beq.n	800bd26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	3310      	adds	r3, #16
 800bd04:	4618      	mov	r0, r3
 800bd06:	f000 fd05 	bl	800c714 <xTaskRemoveFromEventList>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d001      	beq.n	800bd14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bd10:	f000 fe02 	bl	800c918 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bd14:	7bbb      	ldrb	r3, [r7, #14]
 800bd16:	3b01      	subs	r3, #1
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	dce9      	bgt.n	800bcf8 <prvUnlockQueue+0x60>
 800bd24:	e000      	b.n	800bd28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bd26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	22ff      	movs	r2, #255	; 0xff
 800bd2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bd30:	f001 fe50 	bl	800d9d4 <vPortExitCritical>
}
 800bd34:	bf00      	nop
 800bd36:	3710      	adds	r7, #16
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd44:	f001 fe16 	bl	800d974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d102      	bne.n	800bd56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bd50:	2301      	movs	r3, #1
 800bd52:	60fb      	str	r3, [r7, #12]
 800bd54:	e001      	b.n	800bd5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bd56:	2300      	movs	r3, #0
 800bd58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd5a:	f001 fe3b 	bl	800d9d4 <vPortExitCritical>

	return xReturn;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3710      	adds	r7, #16
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd70:	f001 fe00 	bl	800d974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d102      	bne.n	800bd86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bd80:	2301      	movs	r3, #1
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	e001      	b.n	800bd8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bd86:	2300      	movs	r3, #0
 800bd88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd8a:	f001 fe23 	bl	800d9d4 <vPortExitCritical>

	return xReturn;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bd98:	b480      	push	{r7}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bda2:	2300      	movs	r3, #0
 800bda4:	60fb      	str	r3, [r7, #12]
 800bda6:	e014      	b.n	800bdd2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bda8:	4a0f      	ldr	r2, [pc, #60]	; (800bde8 <vQueueAddToRegistry+0x50>)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d10b      	bne.n	800bdcc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bdb4:	490c      	ldr	r1, [pc, #48]	; (800bde8 <vQueueAddToRegistry+0x50>)
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	683a      	ldr	r2, [r7, #0]
 800bdba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bdbe:	4a0a      	ldr	r2, [pc, #40]	; (800bde8 <vQueueAddToRegistry+0x50>)
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	00db      	lsls	r3, r3, #3
 800bdc4:	4413      	add	r3, r2
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bdca:	e006      	b.n	800bdda <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	60fb      	str	r3, [r7, #12]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2b07      	cmp	r3, #7
 800bdd6:	d9e7      	bls.n	800bda8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bdd8:	bf00      	nop
 800bdda:	bf00      	nop
 800bddc:	3714      	adds	r7, #20
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
 800bde6:	bf00      	nop
 800bde8:	20010e5c 	.word	0x20010e5c

0800bdec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b086      	sub	sp, #24
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	60b9      	str	r1, [r7, #8]
 800bdf6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bdfc:	f001 fdba 	bl	800d974 <vPortEnterCritical>
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be06:	b25b      	sxtb	r3, r3
 800be08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be0c:	d103      	bne.n	800be16 <vQueueWaitForMessageRestricted+0x2a>
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	2200      	movs	r2, #0
 800be12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be1c:	b25b      	sxtb	r3, r3
 800be1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be22:	d103      	bne.n	800be2c <vQueueWaitForMessageRestricted+0x40>
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	2200      	movs	r2, #0
 800be28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be2c:	f001 fdd2 	bl	800d9d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be34:	2b00      	cmp	r3, #0
 800be36:	d106      	bne.n	800be46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	3324      	adds	r3, #36	; 0x24
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	68b9      	ldr	r1, [r7, #8]
 800be40:	4618      	mov	r0, r3
 800be42:	f000 fc3b 	bl	800c6bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800be46:	6978      	ldr	r0, [r7, #20]
 800be48:	f7ff ff26 	bl	800bc98 <prvUnlockQueue>
	}
 800be4c:	bf00      	nop
 800be4e:	3718      	adds	r7, #24
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be54:	b580      	push	{r7, lr}
 800be56:	b08e      	sub	sp, #56	; 0x38
 800be58:	af04      	add	r7, sp, #16
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	607a      	str	r2, [r7, #4]
 800be60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800be62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be64:	2b00      	cmp	r3, #0
 800be66:	d10a      	bne.n	800be7e <xTaskCreateStatic+0x2a>
	__asm volatile
 800be68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6c:	f383 8811 	msr	BASEPRI, r3
 800be70:	f3bf 8f6f 	isb	sy
 800be74:	f3bf 8f4f 	dsb	sy
 800be78:	623b      	str	r3, [r7, #32]
}
 800be7a:	bf00      	nop
 800be7c:	e7fe      	b.n	800be7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800be7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10a      	bne.n	800be9a <xTaskCreateStatic+0x46>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	61fb      	str	r3, [r7, #28]
}
 800be96:	bf00      	nop
 800be98:	e7fe      	b.n	800be98 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800be9a:	235c      	movs	r3, #92	; 0x5c
 800be9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	2b5c      	cmp	r3, #92	; 0x5c
 800bea2:	d00a      	beq.n	800beba <xTaskCreateStatic+0x66>
	__asm volatile
 800bea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea8:	f383 8811 	msr	BASEPRI, r3
 800beac:	f3bf 8f6f 	isb	sy
 800beb0:	f3bf 8f4f 	dsb	sy
 800beb4:	61bb      	str	r3, [r7, #24]
}
 800beb6:	bf00      	nop
 800beb8:	e7fe      	b.n	800beb8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800beba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d01e      	beq.n	800bf00 <xTaskCreateStatic+0xac>
 800bec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d01b      	beq.n	800bf00 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800becc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bece:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bed0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed4:	2202      	movs	r2, #2
 800bed6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800beda:	2300      	movs	r3, #0
 800bedc:	9303      	str	r3, [sp, #12]
 800bede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee0:	9302      	str	r3, [sp, #8]
 800bee2:	f107 0314 	add.w	r3, r7, #20
 800bee6:	9301      	str	r3, [sp, #4]
 800bee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beea:	9300      	str	r3, [sp, #0]
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	68b9      	ldr	r1, [r7, #8]
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f000 f850 	bl	800bf98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bef8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800befa:	f000 f8dd 	bl	800c0b8 <prvAddNewTaskToReadyList>
 800befe:	e001      	b.n	800bf04 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bf00:	2300      	movs	r3, #0
 800bf02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bf04:	697b      	ldr	r3, [r7, #20]
	}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3728      	adds	r7, #40	; 0x28
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b08c      	sub	sp, #48	; 0x30
 800bf12:	af04      	add	r7, sp, #16
 800bf14:	60f8      	str	r0, [r7, #12]
 800bf16:	60b9      	str	r1, [r7, #8]
 800bf18:	603b      	str	r3, [r7, #0]
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bf1e:	88fb      	ldrh	r3, [r7, #6]
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	4618      	mov	r0, r3
 800bf24:	f001 fe48 	bl	800dbb8 <pvPortMalloc>
 800bf28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d00e      	beq.n	800bf4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bf30:	205c      	movs	r0, #92	; 0x5c
 800bf32:	f001 fe41 	bl	800dbb8 <pvPortMalloc>
 800bf36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bf38:	69fb      	ldr	r3, [r7, #28]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d003      	beq.n	800bf46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf3e:	69fb      	ldr	r3, [r7, #28]
 800bf40:	697a      	ldr	r2, [r7, #20]
 800bf42:	631a      	str	r2, [r3, #48]	; 0x30
 800bf44:	e005      	b.n	800bf52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf46:	6978      	ldr	r0, [r7, #20]
 800bf48:	f001 ff02 	bl	800dd50 <vPortFree>
 800bf4c:	e001      	b.n	800bf52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d017      	beq.n	800bf88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bf60:	88fa      	ldrh	r2, [r7, #6]
 800bf62:	2300      	movs	r3, #0
 800bf64:	9303      	str	r3, [sp, #12]
 800bf66:	69fb      	ldr	r3, [r7, #28]
 800bf68:	9302      	str	r3, [sp, #8]
 800bf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6c:	9301      	str	r3, [sp, #4]
 800bf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf70:	9300      	str	r3, [sp, #0]
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	68b9      	ldr	r1, [r7, #8]
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f000 f80e 	bl	800bf98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf7c:	69f8      	ldr	r0, [r7, #28]
 800bf7e:	f000 f89b 	bl	800c0b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bf82:	2301      	movs	r3, #1
 800bf84:	61bb      	str	r3, [r7, #24]
 800bf86:	e002      	b.n	800bf8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bf8e:	69bb      	ldr	r3, [r7, #24]
	}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3720      	adds	r7, #32
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b088      	sub	sp, #32
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	607a      	str	r2, [r7, #4]
 800bfa4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	461a      	mov	r2, r3
 800bfb0:	21a5      	movs	r1, #165	; 0xa5
 800bfb2:	f00d fc0f 	bl	80197d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	4413      	add	r3, r2
 800bfc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	f023 0307 	bic.w	r3, r3, #7
 800bfce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bfd0:	69bb      	ldr	r3, [r7, #24]
 800bfd2:	f003 0307 	and.w	r3, r3, #7
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d00a      	beq.n	800bff0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfde:	f383 8811 	msr	BASEPRI, r3
 800bfe2:	f3bf 8f6f 	isb	sy
 800bfe6:	f3bf 8f4f 	dsb	sy
 800bfea:	617b      	str	r3, [r7, #20]
}
 800bfec:	bf00      	nop
 800bfee:	e7fe      	b.n	800bfee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d01f      	beq.n	800c036 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bff6:	2300      	movs	r3, #0
 800bff8:	61fb      	str	r3, [r7, #28]
 800bffa:	e012      	b.n	800c022 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bffc:	68ba      	ldr	r2, [r7, #8]
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	4413      	add	r3, r2
 800c002:	7819      	ldrb	r1, [r3, #0]
 800c004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c006:	69fb      	ldr	r3, [r7, #28]
 800c008:	4413      	add	r3, r2
 800c00a:	3334      	adds	r3, #52	; 0x34
 800c00c:	460a      	mov	r2, r1
 800c00e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c010:	68ba      	ldr	r2, [r7, #8]
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	4413      	add	r3, r2
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d006      	beq.n	800c02a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	3301      	adds	r3, #1
 800c020:	61fb      	str	r3, [r7, #28]
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	2b0f      	cmp	r3, #15
 800c026:	d9e9      	bls.n	800bffc <prvInitialiseNewTask+0x64>
 800c028:	e000      	b.n	800c02c <prvInitialiseNewTask+0x94>
			{
				break;
 800c02a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02e:	2200      	movs	r2, #0
 800c030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c034:	e003      	b.n	800c03e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c038:	2200      	movs	r2, #0
 800c03a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c040:	2b37      	cmp	r3, #55	; 0x37
 800c042:	d901      	bls.n	800c048 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c044:	2337      	movs	r3, #55	; 0x37
 800c046:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c04c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c052:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c056:	2200      	movs	r2, #0
 800c058:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05c:	3304      	adds	r3, #4
 800c05e:	4618      	mov	r0, r3
 800c060:	f7ff f978 	bl	800b354 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c066:	3318      	adds	r3, #24
 800c068:	4618      	mov	r0, r3
 800c06a:	f7ff f973 	bl	800b354 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c072:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c076:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c082:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	2200      	movs	r2, #0
 800c088:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08c:	2200      	movs	r2, #0
 800c08e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c092:	683a      	ldr	r2, [r7, #0]
 800c094:	68f9      	ldr	r1, [r7, #12]
 800c096:	69b8      	ldr	r0, [r7, #24]
 800c098:	f001 fb3c 	bl	800d714 <pxPortInitialiseStack>
 800c09c:	4602      	mov	r2, r0
 800c09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d002      	beq.n	800c0ae <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0ae:	bf00      	nop
 800c0b0:	3720      	adds	r7, #32
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
	...

0800c0b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c0c0:	f001 fc58 	bl	800d974 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c0c4:	4b2d      	ldr	r3, [pc, #180]	; (800c17c <prvAddNewTaskToReadyList+0xc4>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	4a2c      	ldr	r2, [pc, #176]	; (800c17c <prvAddNewTaskToReadyList+0xc4>)
 800c0cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c0ce:	4b2c      	ldr	r3, [pc, #176]	; (800c180 <prvAddNewTaskToReadyList+0xc8>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d109      	bne.n	800c0ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c0d6:	4a2a      	ldr	r2, [pc, #168]	; (800c180 <prvAddNewTaskToReadyList+0xc8>)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c0dc:	4b27      	ldr	r3, [pc, #156]	; (800c17c <prvAddNewTaskToReadyList+0xc4>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d110      	bne.n	800c106 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c0e4:	f000 fc3c 	bl	800c960 <prvInitialiseTaskLists>
 800c0e8:	e00d      	b.n	800c106 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c0ea:	4b26      	ldr	r3, [pc, #152]	; (800c184 <prvAddNewTaskToReadyList+0xcc>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d109      	bne.n	800c106 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c0f2:	4b23      	ldr	r3, [pc, #140]	; (800c180 <prvAddNewTaskToReadyList+0xc8>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d802      	bhi.n	800c106 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c100:	4a1f      	ldr	r2, [pc, #124]	; (800c180 <prvAddNewTaskToReadyList+0xc8>)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c106:	4b20      	ldr	r3, [pc, #128]	; (800c188 <prvAddNewTaskToReadyList+0xd0>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	3301      	adds	r3, #1
 800c10c:	4a1e      	ldr	r2, [pc, #120]	; (800c188 <prvAddNewTaskToReadyList+0xd0>)
 800c10e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c110:	4b1d      	ldr	r3, [pc, #116]	; (800c188 <prvAddNewTaskToReadyList+0xd0>)
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c11c:	4b1b      	ldr	r3, [pc, #108]	; (800c18c <prvAddNewTaskToReadyList+0xd4>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	429a      	cmp	r2, r3
 800c122:	d903      	bls.n	800c12c <prvAddNewTaskToReadyList+0x74>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c128:	4a18      	ldr	r2, [pc, #96]	; (800c18c <prvAddNewTaskToReadyList+0xd4>)
 800c12a:	6013      	str	r3, [r2, #0]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c130:	4613      	mov	r3, r2
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	4413      	add	r3, r2
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	4a15      	ldr	r2, [pc, #84]	; (800c190 <prvAddNewTaskToReadyList+0xd8>)
 800c13a:	441a      	add	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	3304      	adds	r3, #4
 800c140:	4619      	mov	r1, r3
 800c142:	4610      	mov	r0, r2
 800c144:	f7ff f913 	bl	800b36e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c148:	f001 fc44 	bl	800d9d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c14c:	4b0d      	ldr	r3, [pc, #52]	; (800c184 <prvAddNewTaskToReadyList+0xcc>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00e      	beq.n	800c172 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c154:	4b0a      	ldr	r3, [pc, #40]	; (800c180 <prvAddNewTaskToReadyList+0xc8>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c15e:	429a      	cmp	r2, r3
 800c160:	d207      	bcs.n	800c172 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c162:	4b0c      	ldr	r3, [pc, #48]	; (800c194 <prvAddNewTaskToReadyList+0xdc>)
 800c164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c168:	601a      	str	r2, [r3, #0]
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c172:	bf00      	nop
 800c174:	3708      	adds	r7, #8
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	20008c98 	.word	0x20008c98
 800c180:	200087c4 	.word	0x200087c4
 800c184:	20008ca4 	.word	0x20008ca4
 800c188:	20008cb4 	.word	0x20008cb4
 800c18c:	20008ca0 	.word	0x20008ca0
 800c190:	200087c8 	.word	0x200087c8
 800c194:	e000ed04 	.word	0xe000ed04

0800c198 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d017      	beq.n	800c1da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c1aa:	4b13      	ldr	r3, [pc, #76]	; (800c1f8 <vTaskDelay+0x60>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00a      	beq.n	800c1c8 <vTaskDelay+0x30>
	__asm volatile
 800c1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b6:	f383 8811 	msr	BASEPRI, r3
 800c1ba:	f3bf 8f6f 	isb	sy
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	60bb      	str	r3, [r7, #8]
}
 800c1c4:	bf00      	nop
 800c1c6:	e7fe      	b.n	800c1c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c1c8:	f000 f880 	bl	800c2cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 fefe 	bl	800cfd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c1d4:	f000 f888 	bl	800c2e8 <xTaskResumeAll>
 800c1d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d107      	bne.n	800c1f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c1e0:	4b06      	ldr	r3, [pc, #24]	; (800c1fc <vTaskDelay+0x64>)
 800c1e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1e6:	601a      	str	r2, [r3, #0]
 800c1e8:	f3bf 8f4f 	dsb	sy
 800c1ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1f0:	bf00      	nop
 800c1f2:	3710      	adds	r7, #16
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	20008cc0 	.word	0x20008cc0
 800c1fc:	e000ed04 	.word	0xe000ed04

0800c200 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b08a      	sub	sp, #40	; 0x28
 800c204:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c206:	2300      	movs	r3, #0
 800c208:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c20a:	2300      	movs	r3, #0
 800c20c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c20e:	463a      	mov	r2, r7
 800c210:	1d39      	adds	r1, r7, #4
 800c212:	f107 0308 	add.w	r3, r7, #8
 800c216:	4618      	mov	r0, r3
 800c218:	f7ff f848 	bl	800b2ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c21c:	6839      	ldr	r1, [r7, #0]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	68ba      	ldr	r2, [r7, #8]
 800c222:	9202      	str	r2, [sp, #8]
 800c224:	9301      	str	r3, [sp, #4]
 800c226:	2300      	movs	r3, #0
 800c228:	9300      	str	r3, [sp, #0]
 800c22a:	2300      	movs	r3, #0
 800c22c:	460a      	mov	r2, r1
 800c22e:	4921      	ldr	r1, [pc, #132]	; (800c2b4 <vTaskStartScheduler+0xb4>)
 800c230:	4821      	ldr	r0, [pc, #132]	; (800c2b8 <vTaskStartScheduler+0xb8>)
 800c232:	f7ff fe0f 	bl	800be54 <xTaskCreateStatic>
 800c236:	4603      	mov	r3, r0
 800c238:	4a20      	ldr	r2, [pc, #128]	; (800c2bc <vTaskStartScheduler+0xbc>)
 800c23a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c23c:	4b1f      	ldr	r3, [pc, #124]	; (800c2bc <vTaskStartScheduler+0xbc>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d002      	beq.n	800c24a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c244:	2301      	movs	r3, #1
 800c246:	617b      	str	r3, [r7, #20]
 800c248:	e001      	b.n	800c24e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c24a:	2300      	movs	r3, #0
 800c24c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	2b01      	cmp	r3, #1
 800c252:	d102      	bne.n	800c25a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c254:	f000 ff10 	bl	800d078 <xTimerCreateTimerTask>
 800c258:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d116      	bne.n	800c28e <vTaskStartScheduler+0x8e>
	__asm volatile
 800c260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	613b      	str	r3, [r7, #16]
}
 800c272:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c274:	4b12      	ldr	r3, [pc, #72]	; (800c2c0 <vTaskStartScheduler+0xc0>)
 800c276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c27a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c27c:	4b11      	ldr	r3, [pc, #68]	; (800c2c4 <vTaskStartScheduler+0xc4>)
 800c27e:	2201      	movs	r2, #1
 800c280:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c282:	4b11      	ldr	r3, [pc, #68]	; (800c2c8 <vTaskStartScheduler+0xc8>)
 800c284:	2200      	movs	r2, #0
 800c286:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c288:	f001 fad2 	bl	800d830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c28c:	e00e      	b.n	800c2ac <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c294:	d10a      	bne.n	800c2ac <vTaskStartScheduler+0xac>
	__asm volatile
 800c296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29a:	f383 8811 	msr	BASEPRI, r3
 800c29e:	f3bf 8f6f 	isb	sy
 800c2a2:	f3bf 8f4f 	dsb	sy
 800c2a6:	60fb      	str	r3, [r7, #12]
}
 800c2a8:	bf00      	nop
 800c2aa:	e7fe      	b.n	800c2aa <vTaskStartScheduler+0xaa>
}
 800c2ac:	bf00      	nop
 800c2ae:	3718      	adds	r7, #24
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	0801ded8 	.word	0x0801ded8
 800c2b8:	0800c931 	.word	0x0800c931
 800c2bc:	20008cbc 	.word	0x20008cbc
 800c2c0:	20008cb8 	.word	0x20008cb8
 800c2c4:	20008ca4 	.word	0x20008ca4
 800c2c8:	20008c9c 	.word	0x20008c9c

0800c2cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c2d0:	4b04      	ldr	r3, [pc, #16]	; (800c2e4 <vTaskSuspendAll+0x18>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	4a03      	ldr	r2, [pc, #12]	; (800c2e4 <vTaskSuspendAll+0x18>)
 800c2d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c2da:	bf00      	nop
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr
 800c2e4:	20008cc0 	.word	0x20008cc0

0800c2e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c2f6:	4b42      	ldr	r3, [pc, #264]	; (800c400 <xTaskResumeAll+0x118>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d10a      	bne.n	800c314 <xTaskResumeAll+0x2c>
	__asm volatile
 800c2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c302:	f383 8811 	msr	BASEPRI, r3
 800c306:	f3bf 8f6f 	isb	sy
 800c30a:	f3bf 8f4f 	dsb	sy
 800c30e:	603b      	str	r3, [r7, #0]
}
 800c310:	bf00      	nop
 800c312:	e7fe      	b.n	800c312 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c314:	f001 fb2e 	bl	800d974 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c318:	4b39      	ldr	r3, [pc, #228]	; (800c400 <xTaskResumeAll+0x118>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	3b01      	subs	r3, #1
 800c31e:	4a38      	ldr	r2, [pc, #224]	; (800c400 <xTaskResumeAll+0x118>)
 800c320:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c322:	4b37      	ldr	r3, [pc, #220]	; (800c400 <xTaskResumeAll+0x118>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d162      	bne.n	800c3f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c32a:	4b36      	ldr	r3, [pc, #216]	; (800c404 <xTaskResumeAll+0x11c>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d05e      	beq.n	800c3f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c332:	e02f      	b.n	800c394 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c334:	4b34      	ldr	r3, [pc, #208]	; (800c408 <xTaskResumeAll+0x120>)
 800c336:	68db      	ldr	r3, [r3, #12]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	3318      	adds	r3, #24
 800c340:	4618      	mov	r0, r3
 800c342:	f7ff f871 	bl	800b428 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	3304      	adds	r3, #4
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7ff f86c 	bl	800b428 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c354:	4b2d      	ldr	r3, [pc, #180]	; (800c40c <xTaskResumeAll+0x124>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d903      	bls.n	800c364 <xTaskResumeAll+0x7c>
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c360:	4a2a      	ldr	r2, [pc, #168]	; (800c40c <xTaskResumeAll+0x124>)
 800c362:	6013      	str	r3, [r2, #0]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c368:	4613      	mov	r3, r2
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	4413      	add	r3, r2
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	4a27      	ldr	r2, [pc, #156]	; (800c410 <xTaskResumeAll+0x128>)
 800c372:	441a      	add	r2, r3
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	3304      	adds	r3, #4
 800c378:	4619      	mov	r1, r3
 800c37a:	4610      	mov	r0, r2
 800c37c:	f7fe fff7 	bl	800b36e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c384:	4b23      	ldr	r3, [pc, #140]	; (800c414 <xTaskResumeAll+0x12c>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d302      	bcc.n	800c394 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c38e:	4b22      	ldr	r3, [pc, #136]	; (800c418 <xTaskResumeAll+0x130>)
 800c390:	2201      	movs	r2, #1
 800c392:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c394:	4b1c      	ldr	r3, [pc, #112]	; (800c408 <xTaskResumeAll+0x120>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d1cb      	bne.n	800c334 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d001      	beq.n	800c3a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c3a2:	f000 fb7b 	bl	800ca9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c3a6:	4b1d      	ldr	r3, [pc, #116]	; (800c41c <xTaskResumeAll+0x134>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d010      	beq.n	800c3d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c3b2:	f000 f847 	bl	800c444 <xTaskIncrementTick>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d002      	beq.n	800c3c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c3bc:	4b16      	ldr	r3, [pc, #88]	; (800c418 <xTaskResumeAll+0x130>)
 800c3be:	2201      	movs	r2, #1
 800c3c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	3b01      	subs	r3, #1
 800c3c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1f1      	bne.n	800c3b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c3ce:	4b13      	ldr	r3, [pc, #76]	; (800c41c <xTaskResumeAll+0x134>)
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c3d4:	4b10      	ldr	r3, [pc, #64]	; (800c418 <xTaskResumeAll+0x130>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d009      	beq.n	800c3f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c3e0:	4b0f      	ldr	r3, [pc, #60]	; (800c420 <xTaskResumeAll+0x138>)
 800c3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3e6:	601a      	str	r2, [r3, #0]
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3f0:	f001 faf0 	bl	800d9d4 <vPortExitCritical>

	return xAlreadyYielded;
 800c3f4:	68bb      	ldr	r3, [r7, #8]
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	20008cc0 	.word	0x20008cc0
 800c404:	20008c98 	.word	0x20008c98
 800c408:	20008c58 	.word	0x20008c58
 800c40c:	20008ca0 	.word	0x20008ca0
 800c410:	200087c8 	.word	0x200087c8
 800c414:	200087c4 	.word	0x200087c4
 800c418:	20008cac 	.word	0x20008cac
 800c41c:	20008ca8 	.word	0x20008ca8
 800c420:	e000ed04 	.word	0xe000ed04

0800c424 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c42a:	4b05      	ldr	r3, [pc, #20]	; (800c440 <xTaskGetTickCount+0x1c>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c430:	687b      	ldr	r3, [r7, #4]
}
 800c432:	4618      	mov	r0, r3
 800c434:	370c      	adds	r7, #12
 800c436:	46bd      	mov	sp, r7
 800c438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop
 800c440:	20008c9c 	.word	0x20008c9c

0800c444 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b086      	sub	sp, #24
 800c448:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c44a:	2300      	movs	r3, #0
 800c44c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c44e:	4b4f      	ldr	r3, [pc, #316]	; (800c58c <xTaskIncrementTick+0x148>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	f040 808f 	bne.w	800c576 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c458:	4b4d      	ldr	r3, [pc, #308]	; (800c590 <xTaskIncrementTick+0x14c>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	3301      	adds	r3, #1
 800c45e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c460:	4a4b      	ldr	r2, [pc, #300]	; (800c590 <xTaskIncrementTick+0x14c>)
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d120      	bne.n	800c4ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c46c:	4b49      	ldr	r3, [pc, #292]	; (800c594 <xTaskIncrementTick+0x150>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d00a      	beq.n	800c48c <xTaskIncrementTick+0x48>
	__asm volatile
 800c476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47a:	f383 8811 	msr	BASEPRI, r3
 800c47e:	f3bf 8f6f 	isb	sy
 800c482:	f3bf 8f4f 	dsb	sy
 800c486:	603b      	str	r3, [r7, #0]
}
 800c488:	bf00      	nop
 800c48a:	e7fe      	b.n	800c48a <xTaskIncrementTick+0x46>
 800c48c:	4b41      	ldr	r3, [pc, #260]	; (800c594 <xTaskIncrementTick+0x150>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	60fb      	str	r3, [r7, #12]
 800c492:	4b41      	ldr	r3, [pc, #260]	; (800c598 <xTaskIncrementTick+0x154>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a3f      	ldr	r2, [pc, #252]	; (800c594 <xTaskIncrementTick+0x150>)
 800c498:	6013      	str	r3, [r2, #0]
 800c49a:	4a3f      	ldr	r2, [pc, #252]	; (800c598 <xTaskIncrementTick+0x154>)
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	6013      	str	r3, [r2, #0]
 800c4a0:	4b3e      	ldr	r3, [pc, #248]	; (800c59c <xTaskIncrementTick+0x158>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	4a3d      	ldr	r2, [pc, #244]	; (800c59c <xTaskIncrementTick+0x158>)
 800c4a8:	6013      	str	r3, [r2, #0]
 800c4aa:	f000 faf7 	bl	800ca9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c4ae:	4b3c      	ldr	r3, [pc, #240]	; (800c5a0 <xTaskIncrementTick+0x15c>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	693a      	ldr	r2, [r7, #16]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d349      	bcc.n	800c54c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4b8:	4b36      	ldr	r3, [pc, #216]	; (800c594 <xTaskIncrementTick+0x150>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d104      	bne.n	800c4cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4c2:	4b37      	ldr	r3, [pc, #220]	; (800c5a0 <xTaskIncrementTick+0x15c>)
 800c4c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4c8:	601a      	str	r2, [r3, #0]
					break;
 800c4ca:	e03f      	b.n	800c54c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4cc:	4b31      	ldr	r3, [pc, #196]	; (800c594 <xTaskIncrementTick+0x150>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c4dc:	693a      	ldr	r2, [r7, #16]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d203      	bcs.n	800c4ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c4e4:	4a2e      	ldr	r2, [pc, #184]	; (800c5a0 <xTaskIncrementTick+0x15c>)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c4ea:	e02f      	b.n	800c54c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	3304      	adds	r3, #4
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7fe ff99 	bl	800b428 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d004      	beq.n	800c508 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	3318      	adds	r3, #24
 800c502:	4618      	mov	r0, r3
 800c504:	f7fe ff90 	bl	800b428 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c50c:	4b25      	ldr	r3, [pc, #148]	; (800c5a4 <xTaskIncrementTick+0x160>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	429a      	cmp	r2, r3
 800c512:	d903      	bls.n	800c51c <xTaskIncrementTick+0xd8>
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c518:	4a22      	ldr	r2, [pc, #136]	; (800c5a4 <xTaskIncrementTick+0x160>)
 800c51a:	6013      	str	r3, [r2, #0]
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c520:	4613      	mov	r3, r2
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	4413      	add	r3, r2
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	4a1f      	ldr	r2, [pc, #124]	; (800c5a8 <xTaskIncrementTick+0x164>)
 800c52a:	441a      	add	r2, r3
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	3304      	adds	r3, #4
 800c530:	4619      	mov	r1, r3
 800c532:	4610      	mov	r0, r2
 800c534:	f7fe ff1b 	bl	800b36e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c53c:	4b1b      	ldr	r3, [pc, #108]	; (800c5ac <xTaskIncrementTick+0x168>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c542:	429a      	cmp	r2, r3
 800c544:	d3b8      	bcc.n	800c4b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c546:	2301      	movs	r3, #1
 800c548:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c54a:	e7b5      	b.n	800c4b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c54c:	4b17      	ldr	r3, [pc, #92]	; (800c5ac <xTaskIncrementTick+0x168>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c552:	4915      	ldr	r1, [pc, #84]	; (800c5a8 <xTaskIncrementTick+0x164>)
 800c554:	4613      	mov	r3, r2
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	4413      	add	r3, r2
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	440b      	add	r3, r1
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2b01      	cmp	r3, #1
 800c562:	d901      	bls.n	800c568 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c564:	2301      	movs	r3, #1
 800c566:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c568:	4b11      	ldr	r3, [pc, #68]	; (800c5b0 <xTaskIncrementTick+0x16c>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d007      	beq.n	800c580 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c570:	2301      	movs	r3, #1
 800c572:	617b      	str	r3, [r7, #20]
 800c574:	e004      	b.n	800c580 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c576:	4b0f      	ldr	r3, [pc, #60]	; (800c5b4 <xTaskIncrementTick+0x170>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	3301      	adds	r3, #1
 800c57c:	4a0d      	ldr	r2, [pc, #52]	; (800c5b4 <xTaskIncrementTick+0x170>)
 800c57e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c580:	697b      	ldr	r3, [r7, #20]
}
 800c582:	4618      	mov	r0, r3
 800c584:	3718      	adds	r7, #24
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	20008cc0 	.word	0x20008cc0
 800c590:	20008c9c 	.word	0x20008c9c
 800c594:	20008c50 	.word	0x20008c50
 800c598:	20008c54 	.word	0x20008c54
 800c59c:	20008cb0 	.word	0x20008cb0
 800c5a0:	20008cb8 	.word	0x20008cb8
 800c5a4:	20008ca0 	.word	0x20008ca0
 800c5a8:	200087c8 	.word	0x200087c8
 800c5ac:	200087c4 	.word	0x200087c4
 800c5b0:	20008cac 	.word	0x20008cac
 800c5b4:	20008ca8 	.word	0x20008ca8

0800c5b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c5be:	4b28      	ldr	r3, [pc, #160]	; (800c660 <vTaskSwitchContext+0xa8>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d003      	beq.n	800c5ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c5c6:	4b27      	ldr	r3, [pc, #156]	; (800c664 <vTaskSwitchContext+0xac>)
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c5cc:	e041      	b.n	800c652 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c5ce:	4b25      	ldr	r3, [pc, #148]	; (800c664 <vTaskSwitchContext+0xac>)
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5d4:	4b24      	ldr	r3, [pc, #144]	; (800c668 <vTaskSwitchContext+0xb0>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	60fb      	str	r3, [r7, #12]
 800c5da:	e010      	b.n	800c5fe <vTaskSwitchContext+0x46>
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d10a      	bne.n	800c5f8 <vTaskSwitchContext+0x40>
	__asm volatile
 800c5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e6:	f383 8811 	msr	BASEPRI, r3
 800c5ea:	f3bf 8f6f 	isb	sy
 800c5ee:	f3bf 8f4f 	dsb	sy
 800c5f2:	607b      	str	r3, [r7, #4]
}
 800c5f4:	bf00      	nop
 800c5f6:	e7fe      	b.n	800c5f6 <vTaskSwitchContext+0x3e>
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	3b01      	subs	r3, #1
 800c5fc:	60fb      	str	r3, [r7, #12]
 800c5fe:	491b      	ldr	r1, [pc, #108]	; (800c66c <vTaskSwitchContext+0xb4>)
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	4613      	mov	r3, r2
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	4413      	add	r3, r2
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	440b      	add	r3, r1
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d0e4      	beq.n	800c5dc <vTaskSwitchContext+0x24>
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	4613      	mov	r3, r2
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	4413      	add	r3, r2
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	4a13      	ldr	r2, [pc, #76]	; (800c66c <vTaskSwitchContext+0xb4>)
 800c61e:	4413      	add	r3, r2
 800c620:	60bb      	str	r3, [r7, #8]
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	685a      	ldr	r2, [r3, #4]
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	605a      	str	r2, [r3, #4]
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	685a      	ldr	r2, [r3, #4]
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	3308      	adds	r3, #8
 800c634:	429a      	cmp	r2, r3
 800c636:	d104      	bne.n	800c642 <vTaskSwitchContext+0x8a>
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	685a      	ldr	r2, [r3, #4]
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	605a      	str	r2, [r3, #4]
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	4a09      	ldr	r2, [pc, #36]	; (800c670 <vTaskSwitchContext+0xb8>)
 800c64a:	6013      	str	r3, [r2, #0]
 800c64c:	4a06      	ldr	r2, [pc, #24]	; (800c668 <vTaskSwitchContext+0xb0>)
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	6013      	str	r3, [r2, #0]
}
 800c652:	bf00      	nop
 800c654:	3714      	adds	r7, #20
 800c656:	46bd      	mov	sp, r7
 800c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65c:	4770      	bx	lr
 800c65e:	bf00      	nop
 800c660:	20008cc0 	.word	0x20008cc0
 800c664:	20008cac 	.word	0x20008cac
 800c668:	20008ca0 	.word	0x20008ca0
 800c66c:	200087c8 	.word	0x200087c8
 800c670:	200087c4 	.word	0x200087c4

0800c674 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10a      	bne.n	800c69a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	60fb      	str	r3, [r7, #12]
}
 800c696:	bf00      	nop
 800c698:	e7fe      	b.n	800c698 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c69a:	4b07      	ldr	r3, [pc, #28]	; (800c6b8 <vTaskPlaceOnEventList+0x44>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	3318      	adds	r3, #24
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f7fe fe87 	bl	800b3b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c6a8:	2101      	movs	r1, #1
 800c6aa:	6838      	ldr	r0, [r7, #0]
 800c6ac:	f000 fc90 	bl	800cfd0 <prvAddCurrentTaskToDelayedList>
}
 800c6b0:	bf00      	nop
 800c6b2:	3710      	adds	r7, #16
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	200087c4 	.word	0x200087c4

0800c6bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b086      	sub	sp, #24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d10a      	bne.n	800c6e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d2:	f383 8811 	msr	BASEPRI, r3
 800c6d6:	f3bf 8f6f 	isb	sy
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	617b      	str	r3, [r7, #20]
}
 800c6e0:	bf00      	nop
 800c6e2:	e7fe      	b.n	800c6e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c6e4:	4b0a      	ldr	r3, [pc, #40]	; (800c710 <vTaskPlaceOnEventListRestricted+0x54>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	3318      	adds	r3, #24
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	68f8      	ldr	r0, [r7, #12]
 800c6ee:	f7fe fe3e 	bl	800b36e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d002      	beq.n	800c6fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c6f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c6fe:	6879      	ldr	r1, [r7, #4]
 800c700:	68b8      	ldr	r0, [r7, #8]
 800c702:	f000 fc65 	bl	800cfd0 <prvAddCurrentTaskToDelayedList>
	}
 800c706:	bf00      	nop
 800c708:	3718      	adds	r7, #24
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	200087c4 	.word	0x200087c4

0800c714 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b086      	sub	sp, #24
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10a      	bne.n	800c740 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72e:	f383 8811 	msr	BASEPRI, r3
 800c732:	f3bf 8f6f 	isb	sy
 800c736:	f3bf 8f4f 	dsb	sy
 800c73a:	60fb      	str	r3, [r7, #12]
}
 800c73c:	bf00      	nop
 800c73e:	e7fe      	b.n	800c73e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	3318      	adds	r3, #24
 800c744:	4618      	mov	r0, r3
 800c746:	f7fe fe6f 	bl	800b428 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c74a:	4b1e      	ldr	r3, [pc, #120]	; (800c7c4 <xTaskRemoveFromEventList+0xb0>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d11d      	bne.n	800c78e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	3304      	adds	r3, #4
 800c756:	4618      	mov	r0, r3
 800c758:	f7fe fe66 	bl	800b428 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c760:	4b19      	ldr	r3, [pc, #100]	; (800c7c8 <xTaskRemoveFromEventList+0xb4>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	429a      	cmp	r2, r3
 800c766:	d903      	bls.n	800c770 <xTaskRemoveFromEventList+0x5c>
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c76c:	4a16      	ldr	r2, [pc, #88]	; (800c7c8 <xTaskRemoveFromEventList+0xb4>)
 800c76e:	6013      	str	r3, [r2, #0]
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c774:	4613      	mov	r3, r2
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	4413      	add	r3, r2
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	4a13      	ldr	r2, [pc, #76]	; (800c7cc <xTaskRemoveFromEventList+0xb8>)
 800c77e:	441a      	add	r2, r3
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	3304      	adds	r3, #4
 800c784:	4619      	mov	r1, r3
 800c786:	4610      	mov	r0, r2
 800c788:	f7fe fdf1 	bl	800b36e <vListInsertEnd>
 800c78c:	e005      	b.n	800c79a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	3318      	adds	r3, #24
 800c792:	4619      	mov	r1, r3
 800c794:	480e      	ldr	r0, [pc, #56]	; (800c7d0 <xTaskRemoveFromEventList+0xbc>)
 800c796:	f7fe fdea 	bl	800b36e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c79e:	4b0d      	ldr	r3, [pc, #52]	; (800c7d4 <xTaskRemoveFromEventList+0xc0>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d905      	bls.n	800c7b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c7ac:	4b0a      	ldr	r3, [pc, #40]	; (800c7d8 <xTaskRemoveFromEventList+0xc4>)
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	601a      	str	r2, [r3, #0]
 800c7b2:	e001      	b.n	800c7b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c7b8:	697b      	ldr	r3, [r7, #20]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3718      	adds	r7, #24
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	20008cc0 	.word	0x20008cc0
 800c7c8:	20008ca0 	.word	0x20008ca0
 800c7cc:	200087c8 	.word	0x200087c8
 800c7d0:	20008c58 	.word	0x20008c58
 800c7d4:	200087c4 	.word	0x200087c4
 800c7d8:	20008cac 	.word	0x20008cac

0800c7dc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b084      	sub	sp, #16
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d10a      	bne.n	800c800 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800c7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ee:	f383 8811 	msr	BASEPRI, r3
 800c7f2:	f3bf 8f6f 	isb	sy
 800c7f6:	f3bf 8f4f 	dsb	sy
 800c7fa:	60fb      	str	r3, [r7, #12]
}
 800c7fc:	bf00      	nop
 800c7fe:	e7fe      	b.n	800c7fe <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800c800:	f001 f8b8 	bl	800d974 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c804:	4b06      	ldr	r3, [pc, #24]	; (800c820 <vTaskSetTimeOutState+0x44>)
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800c80c:	4b05      	ldr	r3, [pc, #20]	; (800c824 <vTaskSetTimeOutState+0x48>)
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800c814:	f001 f8de 	bl	800d9d4 <vPortExitCritical>
}
 800c818:	bf00      	nop
 800c81a:	3710      	adds	r7, #16
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}
 800c820:	20008cb0 	.word	0x20008cb0
 800c824:	20008c9c 	.word	0x20008c9c

0800c828 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c828:	b480      	push	{r7}
 800c82a:	b083      	sub	sp, #12
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c830:	4b06      	ldr	r3, [pc, #24]	; (800c84c <vTaskInternalSetTimeOutState+0x24>)
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c838:	4b05      	ldr	r3, [pc, #20]	; (800c850 <vTaskInternalSetTimeOutState+0x28>)
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	605a      	str	r2, [r3, #4]
}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr
 800c84c:	20008cb0 	.word	0x20008cb0
 800c850:	20008c9c 	.word	0x20008c9c

0800c854 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b088      	sub	sp, #32
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d10a      	bne.n	800c87a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c868:	f383 8811 	msr	BASEPRI, r3
 800c86c:	f3bf 8f6f 	isb	sy
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	613b      	str	r3, [r7, #16]
}
 800c876:	bf00      	nop
 800c878:	e7fe      	b.n	800c878 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d10a      	bne.n	800c896 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c884:	f383 8811 	msr	BASEPRI, r3
 800c888:	f3bf 8f6f 	isb	sy
 800c88c:	f3bf 8f4f 	dsb	sy
 800c890:	60fb      	str	r3, [r7, #12]
}
 800c892:	bf00      	nop
 800c894:	e7fe      	b.n	800c894 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c896:	f001 f86d 	bl	800d974 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c89a:	4b1d      	ldr	r3, [pc, #116]	; (800c910 <xTaskCheckForTimeOut+0xbc>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	69ba      	ldr	r2, [r7, #24]
 800c8a6:	1ad3      	subs	r3, r2, r3
 800c8a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8b2:	d102      	bne.n	800c8ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	61fb      	str	r3, [r7, #28]
 800c8b8:	e023      	b.n	800c902 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	4b15      	ldr	r3, [pc, #84]	; (800c914 <xTaskCheckForTimeOut+0xc0>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	d007      	beq.n	800c8d6 <xTaskCheckForTimeOut+0x82>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	69ba      	ldr	r2, [r7, #24]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d302      	bcc.n	800c8d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	61fb      	str	r3, [r7, #28]
 800c8d4:	e015      	b.n	800c902 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	697a      	ldr	r2, [r7, #20]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d20b      	bcs.n	800c8f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	1ad2      	subs	r2, r2, r3
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7ff ff9b 	bl	800c828 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	61fb      	str	r3, [r7, #28]
 800c8f6:	e004      	b.n	800c902 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c8fe:	2301      	movs	r3, #1
 800c900:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c902:	f001 f867 	bl	800d9d4 <vPortExitCritical>

	return xReturn;
 800c906:	69fb      	ldr	r3, [r7, #28]
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3720      	adds	r7, #32
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	20008c9c 	.word	0x20008c9c
 800c914:	20008cb0 	.word	0x20008cb0

0800c918 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c918:	b480      	push	{r7}
 800c91a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c91c:	4b03      	ldr	r3, [pc, #12]	; (800c92c <vTaskMissedYield+0x14>)
 800c91e:	2201      	movs	r2, #1
 800c920:	601a      	str	r2, [r3, #0]
}
 800c922:	bf00      	nop
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr
 800c92c:	20008cac 	.word	0x20008cac

0800c930 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c938:	f000 f852 	bl	800c9e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c93c:	4b06      	ldr	r3, [pc, #24]	; (800c958 <prvIdleTask+0x28>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b01      	cmp	r3, #1
 800c942:	d9f9      	bls.n	800c938 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c944:	4b05      	ldr	r3, [pc, #20]	; (800c95c <prvIdleTask+0x2c>)
 800c946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c94a:	601a      	str	r2, [r3, #0]
 800c94c:	f3bf 8f4f 	dsb	sy
 800c950:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c954:	e7f0      	b.n	800c938 <prvIdleTask+0x8>
 800c956:	bf00      	nop
 800c958:	200087c8 	.word	0x200087c8
 800c95c:	e000ed04 	.word	0xe000ed04

0800c960 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c966:	2300      	movs	r3, #0
 800c968:	607b      	str	r3, [r7, #4]
 800c96a:	e00c      	b.n	800c986 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	4613      	mov	r3, r2
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	4413      	add	r3, r2
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	4a12      	ldr	r2, [pc, #72]	; (800c9c0 <prvInitialiseTaskLists+0x60>)
 800c978:	4413      	add	r3, r2
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7fe fcca 	bl	800b314 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	3301      	adds	r3, #1
 800c984:	607b      	str	r3, [r7, #4]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2b37      	cmp	r3, #55	; 0x37
 800c98a:	d9ef      	bls.n	800c96c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c98c:	480d      	ldr	r0, [pc, #52]	; (800c9c4 <prvInitialiseTaskLists+0x64>)
 800c98e:	f7fe fcc1 	bl	800b314 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c992:	480d      	ldr	r0, [pc, #52]	; (800c9c8 <prvInitialiseTaskLists+0x68>)
 800c994:	f7fe fcbe 	bl	800b314 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c998:	480c      	ldr	r0, [pc, #48]	; (800c9cc <prvInitialiseTaskLists+0x6c>)
 800c99a:	f7fe fcbb 	bl	800b314 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c99e:	480c      	ldr	r0, [pc, #48]	; (800c9d0 <prvInitialiseTaskLists+0x70>)
 800c9a0:	f7fe fcb8 	bl	800b314 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c9a4:	480b      	ldr	r0, [pc, #44]	; (800c9d4 <prvInitialiseTaskLists+0x74>)
 800c9a6:	f7fe fcb5 	bl	800b314 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c9aa:	4b0b      	ldr	r3, [pc, #44]	; (800c9d8 <prvInitialiseTaskLists+0x78>)
 800c9ac:	4a05      	ldr	r2, [pc, #20]	; (800c9c4 <prvInitialiseTaskLists+0x64>)
 800c9ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c9b0:	4b0a      	ldr	r3, [pc, #40]	; (800c9dc <prvInitialiseTaskLists+0x7c>)
 800c9b2:	4a05      	ldr	r2, [pc, #20]	; (800c9c8 <prvInitialiseTaskLists+0x68>)
 800c9b4:	601a      	str	r2, [r3, #0]
}
 800c9b6:	bf00      	nop
 800c9b8:	3708      	adds	r7, #8
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	200087c8 	.word	0x200087c8
 800c9c4:	20008c28 	.word	0x20008c28
 800c9c8:	20008c3c 	.word	0x20008c3c
 800c9cc:	20008c58 	.word	0x20008c58
 800c9d0:	20008c6c 	.word	0x20008c6c
 800c9d4:	20008c84 	.word	0x20008c84
 800c9d8:	20008c50 	.word	0x20008c50
 800c9dc:	20008c54 	.word	0x20008c54

0800c9e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c9e6:	e019      	b.n	800ca1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c9e8:	f000 ffc4 	bl	800d974 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9ec:	4b10      	ldr	r3, [pc, #64]	; (800ca30 <prvCheckTasksWaitingTermination+0x50>)
 800c9ee:	68db      	ldr	r3, [r3, #12]
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	3304      	adds	r3, #4
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7fe fd15 	bl	800b428 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c9fe:	4b0d      	ldr	r3, [pc, #52]	; (800ca34 <prvCheckTasksWaitingTermination+0x54>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	3b01      	subs	r3, #1
 800ca04:	4a0b      	ldr	r2, [pc, #44]	; (800ca34 <prvCheckTasksWaitingTermination+0x54>)
 800ca06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ca08:	4b0b      	ldr	r3, [pc, #44]	; (800ca38 <prvCheckTasksWaitingTermination+0x58>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	4a0a      	ldr	r2, [pc, #40]	; (800ca38 <prvCheckTasksWaitingTermination+0x58>)
 800ca10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ca12:	f000 ffdf 	bl	800d9d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 f810 	bl	800ca3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca1c:	4b06      	ldr	r3, [pc, #24]	; (800ca38 <prvCheckTasksWaitingTermination+0x58>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d1e1      	bne.n	800c9e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ca24:	bf00      	nop
 800ca26:	bf00      	nop
 800ca28:	3708      	adds	r7, #8
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	20008c6c 	.word	0x20008c6c
 800ca34:	20008c98 	.word	0x20008c98
 800ca38:	20008c80 	.word	0x20008c80

0800ca3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d108      	bne.n	800ca60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca52:	4618      	mov	r0, r3
 800ca54:	f001 f97c 	bl	800dd50 <vPortFree>
				vPortFree( pxTCB );
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f001 f979 	bl	800dd50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ca5e:	e018      	b.n	800ca92 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d103      	bne.n	800ca72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f001 f970 	bl	800dd50 <vPortFree>
	}
 800ca70:	e00f      	b.n	800ca92 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ca78:	2b02      	cmp	r3, #2
 800ca7a:	d00a      	beq.n	800ca92 <prvDeleteTCB+0x56>
	__asm volatile
 800ca7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca80:	f383 8811 	msr	BASEPRI, r3
 800ca84:	f3bf 8f6f 	isb	sy
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	60fb      	str	r3, [r7, #12]
}
 800ca8e:	bf00      	nop
 800ca90:	e7fe      	b.n	800ca90 <prvDeleteTCB+0x54>
	}
 800ca92:	bf00      	nop
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
	...

0800ca9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800caa2:	4b0c      	ldr	r3, [pc, #48]	; (800cad4 <prvResetNextTaskUnblockTime+0x38>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d104      	bne.n	800cab6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800caac:	4b0a      	ldr	r3, [pc, #40]	; (800cad8 <prvResetNextTaskUnblockTime+0x3c>)
 800caae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cab2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cab4:	e008      	b.n	800cac8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cab6:	4b07      	ldr	r3, [pc, #28]	; (800cad4 <prvResetNextTaskUnblockTime+0x38>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	68db      	ldr	r3, [r3, #12]
 800cabc:	68db      	ldr	r3, [r3, #12]
 800cabe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	4a04      	ldr	r2, [pc, #16]	; (800cad8 <prvResetNextTaskUnblockTime+0x3c>)
 800cac6:	6013      	str	r3, [r2, #0]
}
 800cac8:	bf00      	nop
 800caca:	370c      	adds	r7, #12
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr
 800cad4:	20008c50 	.word	0x20008c50
 800cad8:	20008cb8 	.word	0x20008cb8

0800cadc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cadc:	b480      	push	{r7}
 800cade:	b083      	sub	sp, #12
 800cae0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cae2:	4b0b      	ldr	r3, [pc, #44]	; (800cb10 <xTaskGetSchedulerState+0x34>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d102      	bne.n	800caf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800caea:	2301      	movs	r3, #1
 800caec:	607b      	str	r3, [r7, #4]
 800caee:	e008      	b.n	800cb02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800caf0:	4b08      	ldr	r3, [pc, #32]	; (800cb14 <xTaskGetSchedulerState+0x38>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d102      	bne.n	800cafe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800caf8:	2302      	movs	r3, #2
 800cafa:	607b      	str	r3, [r7, #4]
 800cafc:	e001      	b.n	800cb02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cafe:	2300      	movs	r3, #0
 800cb00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cb02:	687b      	ldr	r3, [r7, #4]
	}
 800cb04:	4618      	mov	r0, r3
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr
 800cb10:	20008ca4 	.word	0x20008ca4
 800cb14:	20008cc0 	.word	0x20008cc0

0800cb18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b086      	sub	sp, #24
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cb24:	2300      	movs	r3, #0
 800cb26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d056      	beq.n	800cbdc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cb2e:	4b2e      	ldr	r3, [pc, #184]	; (800cbe8 <xTaskPriorityDisinherit+0xd0>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	693a      	ldr	r2, [r7, #16]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d00a      	beq.n	800cb4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3c:	f383 8811 	msr	BASEPRI, r3
 800cb40:	f3bf 8f6f 	isb	sy
 800cb44:	f3bf 8f4f 	dsb	sy
 800cb48:	60fb      	str	r3, [r7, #12]
}
 800cb4a:	bf00      	nop
 800cb4c:	e7fe      	b.n	800cb4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d10a      	bne.n	800cb6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5a:	f383 8811 	msr	BASEPRI, r3
 800cb5e:	f3bf 8f6f 	isb	sy
 800cb62:	f3bf 8f4f 	dsb	sy
 800cb66:	60bb      	str	r3, [r7, #8]
}
 800cb68:	bf00      	nop
 800cb6a:	e7fe      	b.n	800cb6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb70:	1e5a      	subs	r2, r3, #1
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d02c      	beq.n	800cbdc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d128      	bne.n	800cbdc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	3304      	adds	r3, #4
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7fe fc4a 	bl	800b428 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbac:	4b0f      	ldr	r3, [pc, #60]	; (800cbec <xTaskPriorityDisinherit+0xd4>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d903      	bls.n	800cbbc <xTaskPriorityDisinherit+0xa4>
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb8:	4a0c      	ldr	r2, [pc, #48]	; (800cbec <xTaskPriorityDisinherit+0xd4>)
 800cbba:	6013      	str	r3, [r2, #0]
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbc0:	4613      	mov	r3, r2
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	4413      	add	r3, r2
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	4a09      	ldr	r2, [pc, #36]	; (800cbf0 <xTaskPriorityDisinherit+0xd8>)
 800cbca:	441a      	add	r2, r3
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	3304      	adds	r3, #4
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	4610      	mov	r0, r2
 800cbd4:	f7fe fbcb 	bl	800b36e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cbdc:	697b      	ldr	r3, [r7, #20]
	}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3718      	adds	r7, #24
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	200087c4 	.word	0x200087c4
 800cbec:	20008ca0 	.word	0x20008ca0
 800cbf0:	200087c8 	.word	0x200087c8

0800cbf4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b086      	sub	sp, #24
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	60b9      	str	r1, [r7, #8]
 800cbfe:	607a      	str	r2, [r7, #4]
 800cc00:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800cc02:	f000 feb7 	bl	800d974 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800cc06:	4b26      	ldr	r3, [pc, #152]	; (800cca0 <xTaskNotifyWait+0xac>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	2b02      	cmp	r3, #2
 800cc12:	d01a      	beq.n	800cc4a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800cc14:	4b22      	ldr	r3, [pc, #136]	; (800cca0 <xTaskNotifyWait+0xac>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	43d2      	mvns	r2, r2
 800cc1e:	400a      	ands	r2, r1
 800cc20:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800cc22:	4b1f      	ldr	r3, [pc, #124]	; (800cca0 <xTaskNotifyWait+0xac>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2201      	movs	r2, #1
 800cc28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d00b      	beq.n	800cc4a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cc32:	2101      	movs	r1, #1
 800cc34:	6838      	ldr	r0, [r7, #0]
 800cc36:	f000 f9cb 	bl	800cfd0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800cc3a:	4b1a      	ldr	r3, [pc, #104]	; (800cca4 <xTaskNotifyWait+0xb0>)
 800cc3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc40:	601a      	str	r2, [r3, #0]
 800cc42:	f3bf 8f4f 	dsb	sy
 800cc46:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cc4a:	f000 fec3 	bl	800d9d4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800cc4e:	f000 fe91 	bl	800d974 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d004      	beq.n	800cc62 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800cc58:	4b11      	ldr	r3, [pc, #68]	; (800cca0 <xTaskNotifyWait+0xac>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800cc62:	4b0f      	ldr	r3, [pc, #60]	; (800cca0 <xTaskNotifyWait+0xac>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	d002      	beq.n	800cc76 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800cc70:	2300      	movs	r3, #0
 800cc72:	617b      	str	r3, [r7, #20]
 800cc74:	e008      	b.n	800cc88 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800cc76:	4b0a      	ldr	r3, [pc, #40]	; (800cca0 <xTaskNotifyWait+0xac>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	43d2      	mvns	r2, r2
 800cc80:	400a      	ands	r2, r1
 800cc82:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800cc84:	2301      	movs	r3, #1
 800cc86:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc88:	4b05      	ldr	r3, [pc, #20]	; (800cca0 <xTaskNotifyWait+0xac>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800cc92:	f000 fe9f 	bl	800d9d4 <vPortExitCritical>

		return xReturn;
 800cc96:	697b      	ldr	r3, [r7, #20]
	}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3718      	adds	r7, #24
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	200087c4 	.word	0x200087c4
 800cca4:	e000ed04 	.word	0xe000ed04

0800cca8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b08a      	sub	sp, #40	; 0x28
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	603b      	str	r3, [r7, #0]
 800ccb4:	4613      	mov	r3, r2
 800ccb6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10a      	bne.n	800ccd8 <xTaskGenericNotify+0x30>
	__asm volatile
 800ccc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc6:	f383 8811 	msr	BASEPRI, r3
 800ccca:	f3bf 8f6f 	isb	sy
 800ccce:	f3bf 8f4f 	dsb	sy
 800ccd2:	61bb      	str	r3, [r7, #24]
}
 800ccd4:	bf00      	nop
 800ccd6:	e7fe      	b.n	800ccd6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ccdc:	f000 fe4a 	bl	800d974 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d003      	beq.n	800ccee <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cce6:	6a3b      	ldr	r3, [r7, #32]
 800cce8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ccee:	6a3b      	ldr	r3, [r7, #32]
 800ccf0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ccf4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ccf6:	6a3b      	ldr	r3, [r7, #32]
 800ccf8:	2202      	movs	r2, #2
 800ccfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800ccfe:	79fb      	ldrb	r3, [r7, #7]
 800cd00:	2b04      	cmp	r3, #4
 800cd02:	d828      	bhi.n	800cd56 <xTaskGenericNotify+0xae>
 800cd04:	a201      	add	r2, pc, #4	; (adr r2, 800cd0c <xTaskGenericNotify+0x64>)
 800cd06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd0a:	bf00      	nop
 800cd0c:	0800cd77 	.word	0x0800cd77
 800cd10:	0800cd21 	.word	0x0800cd21
 800cd14:	0800cd2f 	.word	0x0800cd2f
 800cd18:	0800cd3b 	.word	0x0800cd3b
 800cd1c:	0800cd43 	.word	0x0800cd43
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cd20:	6a3b      	ldr	r3, [r7, #32]
 800cd22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	431a      	orrs	r2, r3
 800cd28:	6a3b      	ldr	r3, [r7, #32]
 800cd2a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800cd2c:	e026      	b.n	800cd7c <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800cd2e:	6a3b      	ldr	r3, [r7, #32]
 800cd30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd32:	1c5a      	adds	r2, r3, #1
 800cd34:	6a3b      	ldr	r3, [r7, #32]
 800cd36:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800cd38:	e020      	b.n	800cd7c <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800cd3a:	6a3b      	ldr	r3, [r7, #32]
 800cd3c:	68ba      	ldr	r2, [r7, #8]
 800cd3e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800cd40:	e01c      	b.n	800cd7c <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cd42:	7ffb      	ldrb	r3, [r7, #31]
 800cd44:	2b02      	cmp	r3, #2
 800cd46:	d003      	beq.n	800cd50 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800cd48:	6a3b      	ldr	r3, [r7, #32]
 800cd4a:	68ba      	ldr	r2, [r7, #8]
 800cd4c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cd4e:	e015      	b.n	800cd7c <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800cd50:	2300      	movs	r3, #0
 800cd52:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800cd54:	e012      	b.n	800cd7c <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800cd56:	6a3b      	ldr	r3, [r7, #32]
 800cd58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd5e:	d00c      	beq.n	800cd7a <xTaskGenericNotify+0xd2>
	__asm volatile
 800cd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd64:	f383 8811 	msr	BASEPRI, r3
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	617b      	str	r3, [r7, #20]
}
 800cd72:	bf00      	nop
 800cd74:	e7fe      	b.n	800cd74 <xTaskGenericNotify+0xcc>
					break;
 800cd76:	bf00      	nop
 800cd78:	e000      	b.n	800cd7c <xTaskGenericNotify+0xd4>

					break;
 800cd7a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cd7c:	7ffb      	ldrb	r3, [r7, #31]
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d13a      	bne.n	800cdf8 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd82:	6a3b      	ldr	r3, [r7, #32]
 800cd84:	3304      	adds	r3, #4
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fe fb4e 	bl	800b428 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800cd8c:	6a3b      	ldr	r3, [r7, #32]
 800cd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd90:	4b1d      	ldr	r3, [pc, #116]	; (800ce08 <xTaskGenericNotify+0x160>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d903      	bls.n	800cda0 <xTaskGenericNotify+0xf8>
 800cd98:	6a3b      	ldr	r3, [r7, #32]
 800cd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd9c:	4a1a      	ldr	r2, [pc, #104]	; (800ce08 <xTaskGenericNotify+0x160>)
 800cd9e:	6013      	str	r3, [r2, #0]
 800cda0:	6a3b      	ldr	r3, [r7, #32]
 800cda2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda4:	4613      	mov	r3, r2
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	4413      	add	r3, r2
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	4a17      	ldr	r2, [pc, #92]	; (800ce0c <xTaskGenericNotify+0x164>)
 800cdae:	441a      	add	r2, r3
 800cdb0:	6a3b      	ldr	r3, [r7, #32]
 800cdb2:	3304      	adds	r3, #4
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	4610      	mov	r0, r2
 800cdb8:	f7fe fad9 	bl	800b36e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cdbc:	6a3b      	ldr	r3, [r7, #32]
 800cdbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d00a      	beq.n	800cdda <xTaskGenericNotify+0x132>
	__asm volatile
 800cdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc8:	f383 8811 	msr	BASEPRI, r3
 800cdcc:	f3bf 8f6f 	isb	sy
 800cdd0:	f3bf 8f4f 	dsb	sy
 800cdd4:	613b      	str	r3, [r7, #16]
}
 800cdd6:	bf00      	nop
 800cdd8:	e7fe      	b.n	800cdd8 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cdda:	6a3b      	ldr	r3, [r7, #32]
 800cddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdde:	4b0c      	ldr	r3, [pc, #48]	; (800ce10 <xTaskGenericNotify+0x168>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d907      	bls.n	800cdf8 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800cde8:	4b0a      	ldr	r3, [pc, #40]	; (800ce14 <xTaskGenericNotify+0x16c>)
 800cdea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdee:	601a      	str	r2, [r3, #0]
 800cdf0:	f3bf 8f4f 	dsb	sy
 800cdf4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cdf8:	f000 fdec 	bl	800d9d4 <vPortExitCritical>

		return xReturn;
 800cdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3728      	adds	r7, #40	; 0x28
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	20008ca0 	.word	0x20008ca0
 800ce0c:	200087c8 	.word	0x200087c8
 800ce10:	200087c4 	.word	0x200087c4
 800ce14:	e000ed04 	.word	0xe000ed04

0800ce18 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b08e      	sub	sp, #56	; 0x38
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	603b      	str	r3, [r7, #0]
 800ce24:	4613      	mov	r3, r2
 800ce26:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d10a      	bne.n	800ce48 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800ce32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce36:	f383 8811 	msr	BASEPRI, r3
 800ce3a:	f3bf 8f6f 	isb	sy
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce44:	bf00      	nop
 800ce46:	e7fe      	b.n	800ce46 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce48:	f000 fe76 	bl	800db38 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800ce50:	f3ef 8211 	mrs	r2, BASEPRI
 800ce54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce58:	f383 8811 	msr	BASEPRI, r3
 800ce5c:	f3bf 8f6f 	isb	sy
 800ce60:	f3bf 8f4f 	dsb	sy
 800ce64:	623a      	str	r2, [r7, #32]
 800ce66:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800ce68:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce6a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d003      	beq.n	800ce7a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ce72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ce7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce7c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ce80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ce84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce86:	2202      	movs	r2, #2
 800ce88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800ce8c:	79fb      	ldrb	r3, [r7, #7]
 800ce8e:	2b04      	cmp	r3, #4
 800ce90:	d828      	bhi.n	800cee4 <xTaskGenericNotifyFromISR+0xcc>
 800ce92:	a201      	add	r2, pc, #4	; (adr r2, 800ce98 <xTaskGenericNotifyFromISR+0x80>)
 800ce94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce98:	0800cf05 	.word	0x0800cf05
 800ce9c:	0800cead 	.word	0x0800cead
 800cea0:	0800cebb 	.word	0x0800cebb
 800cea4:	0800cec7 	.word	0x0800cec7
 800cea8:	0800cecf 	.word	0x0800cecf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ceac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	431a      	orrs	r2, r3
 800ceb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ceb8:	e027      	b.n	800cf0a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ceba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cebe:	1c5a      	adds	r2, r3, #1
 800cec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800cec4:	e021      	b.n	800cf0a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800cec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec8:	68ba      	ldr	r2, [r7, #8]
 800ceca:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800cecc:	e01d      	b.n	800cf0a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cece:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ced2:	2b02      	cmp	r3, #2
 800ced4:	d003      	beq.n	800cede <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ced6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced8:	68ba      	ldr	r2, [r7, #8]
 800ceda:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cedc:	e015      	b.n	800cf0a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800cede:	2300      	movs	r3, #0
 800cee0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800cee2:	e012      	b.n	800cf0a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800cee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ceec:	d00c      	beq.n	800cf08 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800ceee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef2:	f383 8811 	msr	BASEPRI, r3
 800cef6:	f3bf 8f6f 	isb	sy
 800cefa:	f3bf 8f4f 	dsb	sy
 800cefe:	61bb      	str	r3, [r7, #24]
}
 800cf00:	bf00      	nop
 800cf02:	e7fe      	b.n	800cf02 <xTaskGenericNotifyFromISR+0xea>
					break;
 800cf04:	bf00      	nop
 800cf06:	e000      	b.n	800cf0a <xTaskGenericNotifyFromISR+0xf2>
					break;
 800cf08:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cf0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d146      	bne.n	800cfa0 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d00a      	beq.n	800cf30 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800cf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1e:	f383 8811 	msr	BASEPRI, r3
 800cf22:	f3bf 8f6f 	isb	sy
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	617b      	str	r3, [r7, #20]
}
 800cf2c:	bf00      	nop
 800cf2e:	e7fe      	b.n	800cf2e <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf30:	4b21      	ldr	r3, [pc, #132]	; (800cfb8 <xTaskGenericNotifyFromISR+0x1a0>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d11d      	bne.n	800cf74 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3a:	3304      	adds	r3, #4
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7fe fa73 	bl	800b428 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf46:	4b1d      	ldr	r3, [pc, #116]	; (800cfbc <xTaskGenericNotifyFromISR+0x1a4>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d903      	bls.n	800cf56 <xTaskGenericNotifyFromISR+0x13e>
 800cf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf52:	4a1a      	ldr	r2, [pc, #104]	; (800cfbc <xTaskGenericNotifyFromISR+0x1a4>)
 800cf54:	6013      	str	r3, [r2, #0]
 800cf56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf5a:	4613      	mov	r3, r2
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	4413      	add	r3, r2
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	4a17      	ldr	r2, [pc, #92]	; (800cfc0 <xTaskGenericNotifyFromISR+0x1a8>)
 800cf64:	441a      	add	r2, r3
 800cf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf68:	3304      	adds	r3, #4
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	4610      	mov	r0, r2
 800cf6e:	f7fe f9fe 	bl	800b36e <vListInsertEnd>
 800cf72:	e005      	b.n	800cf80 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800cf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf76:	3318      	adds	r3, #24
 800cf78:	4619      	mov	r1, r3
 800cf7a:	4812      	ldr	r0, [pc, #72]	; (800cfc4 <xTaskGenericNotifyFromISR+0x1ac>)
 800cf7c:	f7fe f9f7 	bl	800b36e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf84:	4b10      	ldr	r3, [pc, #64]	; (800cfc8 <xTaskGenericNotifyFromISR+0x1b0>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d908      	bls.n	800cfa0 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800cf8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d002      	beq.n	800cf9a <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800cf94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf96:	2201      	movs	r2, #1
 800cf98:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800cf9a:	4b0c      	ldr	r3, [pc, #48]	; (800cfcc <xTaskGenericNotifyFromISR+0x1b4>)
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	601a      	str	r2, [r3, #0]
 800cfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa2:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	f383 8811 	msr	BASEPRI, r3
}
 800cfaa:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800cfac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3738      	adds	r7, #56	; 0x38
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	20008cc0 	.word	0x20008cc0
 800cfbc:	20008ca0 	.word	0x20008ca0
 800cfc0:	200087c8 	.word	0x200087c8
 800cfc4:	20008c58 	.word	0x20008c58
 800cfc8:	200087c4 	.word	0x200087c4
 800cfcc:	20008cac 	.word	0x20008cac

0800cfd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cfda:	4b21      	ldr	r3, [pc, #132]	; (800d060 <prvAddCurrentTaskToDelayedList+0x90>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfe0:	4b20      	ldr	r3, [pc, #128]	; (800d064 <prvAddCurrentTaskToDelayedList+0x94>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	3304      	adds	r3, #4
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7fe fa1e 	bl	800b428 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cff2:	d10a      	bne.n	800d00a <prvAddCurrentTaskToDelayedList+0x3a>
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d007      	beq.n	800d00a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cffa:	4b1a      	ldr	r3, [pc, #104]	; (800d064 <prvAddCurrentTaskToDelayedList+0x94>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	3304      	adds	r3, #4
 800d000:	4619      	mov	r1, r3
 800d002:	4819      	ldr	r0, [pc, #100]	; (800d068 <prvAddCurrentTaskToDelayedList+0x98>)
 800d004:	f7fe f9b3 	bl	800b36e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d008:	e026      	b.n	800d058 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d00a:	68fa      	ldr	r2, [r7, #12]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	4413      	add	r3, r2
 800d010:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d012:	4b14      	ldr	r3, [pc, #80]	; (800d064 <prvAddCurrentTaskToDelayedList+0x94>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	68ba      	ldr	r2, [r7, #8]
 800d018:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d01a:	68ba      	ldr	r2, [r7, #8]
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d209      	bcs.n	800d036 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d022:	4b12      	ldr	r3, [pc, #72]	; (800d06c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	4b0f      	ldr	r3, [pc, #60]	; (800d064 <prvAddCurrentTaskToDelayedList+0x94>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	3304      	adds	r3, #4
 800d02c:	4619      	mov	r1, r3
 800d02e:	4610      	mov	r0, r2
 800d030:	f7fe f9c1 	bl	800b3b6 <vListInsert>
}
 800d034:	e010      	b.n	800d058 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d036:	4b0e      	ldr	r3, [pc, #56]	; (800d070 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	4b0a      	ldr	r3, [pc, #40]	; (800d064 <prvAddCurrentTaskToDelayedList+0x94>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	3304      	adds	r3, #4
 800d040:	4619      	mov	r1, r3
 800d042:	4610      	mov	r0, r2
 800d044:	f7fe f9b7 	bl	800b3b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d048:	4b0a      	ldr	r3, [pc, #40]	; (800d074 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d202      	bcs.n	800d058 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d052:	4a08      	ldr	r2, [pc, #32]	; (800d074 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	6013      	str	r3, [r2, #0]
}
 800d058:	bf00      	nop
 800d05a:	3710      	adds	r7, #16
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}
 800d060:	20008c9c 	.word	0x20008c9c
 800d064:	200087c4 	.word	0x200087c4
 800d068:	20008c84 	.word	0x20008c84
 800d06c:	20008c54 	.word	0x20008c54
 800d070:	20008c50 	.word	0x20008c50
 800d074:	20008cb8 	.word	0x20008cb8

0800d078 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b08a      	sub	sp, #40	; 0x28
 800d07c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d07e:	2300      	movs	r3, #0
 800d080:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d082:	f000 fb07 	bl	800d694 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d086:	4b1c      	ldr	r3, [pc, #112]	; (800d0f8 <xTimerCreateTimerTask+0x80>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d021      	beq.n	800d0d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d08e:	2300      	movs	r3, #0
 800d090:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d092:	2300      	movs	r3, #0
 800d094:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d096:	1d3a      	adds	r2, r7, #4
 800d098:	f107 0108 	add.w	r1, r7, #8
 800d09c:	f107 030c 	add.w	r3, r7, #12
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7fe f91d 	bl	800b2e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d0a6:	6879      	ldr	r1, [r7, #4]
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	68fa      	ldr	r2, [r7, #12]
 800d0ac:	9202      	str	r2, [sp, #8]
 800d0ae:	9301      	str	r3, [sp, #4]
 800d0b0:	2302      	movs	r3, #2
 800d0b2:	9300      	str	r3, [sp, #0]
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	460a      	mov	r2, r1
 800d0b8:	4910      	ldr	r1, [pc, #64]	; (800d0fc <xTimerCreateTimerTask+0x84>)
 800d0ba:	4811      	ldr	r0, [pc, #68]	; (800d100 <xTimerCreateTimerTask+0x88>)
 800d0bc:	f7fe feca 	bl	800be54 <xTaskCreateStatic>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	4a10      	ldr	r2, [pc, #64]	; (800d104 <xTimerCreateTimerTask+0x8c>)
 800d0c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d0c6:	4b0f      	ldr	r3, [pc, #60]	; (800d104 <xTimerCreateTimerTask+0x8c>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d001      	beq.n	800d0d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d10a      	bne.n	800d0ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0dc:	f383 8811 	msr	BASEPRI, r3
 800d0e0:	f3bf 8f6f 	isb	sy
 800d0e4:	f3bf 8f4f 	dsb	sy
 800d0e8:	613b      	str	r3, [r7, #16]
}
 800d0ea:	bf00      	nop
 800d0ec:	e7fe      	b.n	800d0ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d0ee:	697b      	ldr	r3, [r7, #20]
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3718      	adds	r7, #24
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	20008cf4 	.word	0x20008cf4
 800d0fc:	0801dee0 	.word	0x0801dee0
 800d100:	0800d23d 	.word	0x0800d23d
 800d104:	20008cf8 	.word	0x20008cf8

0800d108 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b08a      	sub	sp, #40	; 0x28
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	607a      	str	r2, [r7, #4]
 800d114:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d116:	2300      	movs	r3, #0
 800d118:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d10a      	bne.n	800d136 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d124:	f383 8811 	msr	BASEPRI, r3
 800d128:	f3bf 8f6f 	isb	sy
 800d12c:	f3bf 8f4f 	dsb	sy
 800d130:	623b      	str	r3, [r7, #32]
}
 800d132:	bf00      	nop
 800d134:	e7fe      	b.n	800d134 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d136:	4b1a      	ldr	r3, [pc, #104]	; (800d1a0 <xTimerGenericCommand+0x98>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d02a      	beq.n	800d194 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	2b05      	cmp	r3, #5
 800d14e:	dc18      	bgt.n	800d182 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d150:	f7ff fcc4 	bl	800cadc <xTaskGetSchedulerState>
 800d154:	4603      	mov	r3, r0
 800d156:	2b02      	cmp	r3, #2
 800d158:	d109      	bne.n	800d16e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d15a:	4b11      	ldr	r3, [pc, #68]	; (800d1a0 <xTimerGenericCommand+0x98>)
 800d15c:	6818      	ldr	r0, [r3, #0]
 800d15e:	f107 0110 	add.w	r1, r7, #16
 800d162:	2300      	movs	r3, #0
 800d164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d166:	f7fe fa8d 	bl	800b684 <xQueueGenericSend>
 800d16a:	6278      	str	r0, [r7, #36]	; 0x24
 800d16c:	e012      	b.n	800d194 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d16e:	4b0c      	ldr	r3, [pc, #48]	; (800d1a0 <xTimerGenericCommand+0x98>)
 800d170:	6818      	ldr	r0, [r3, #0]
 800d172:	f107 0110 	add.w	r1, r7, #16
 800d176:	2300      	movs	r3, #0
 800d178:	2200      	movs	r2, #0
 800d17a:	f7fe fa83 	bl	800b684 <xQueueGenericSend>
 800d17e:	6278      	str	r0, [r7, #36]	; 0x24
 800d180:	e008      	b.n	800d194 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d182:	4b07      	ldr	r3, [pc, #28]	; (800d1a0 <xTimerGenericCommand+0x98>)
 800d184:	6818      	ldr	r0, [r3, #0]
 800d186:	f107 0110 	add.w	r1, r7, #16
 800d18a:	2300      	movs	r3, #0
 800d18c:	683a      	ldr	r2, [r7, #0]
 800d18e:	f7fe fb77 	bl	800b880 <xQueueGenericSendFromISR>
 800d192:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d196:	4618      	mov	r0, r3
 800d198:	3728      	adds	r7, #40	; 0x28
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	20008cf4 	.word	0x20008cf4

0800d1a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b088      	sub	sp, #32
 800d1a8:	af02      	add	r7, sp, #8
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1ae:	4b22      	ldr	r3, [pc, #136]	; (800d238 <prvProcessExpiredTimer+0x94>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	68db      	ldr	r3, [r3, #12]
 800d1b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	3304      	adds	r3, #4
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7fe f933 	bl	800b428 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1c8:	f003 0304 	and.w	r3, r3, #4
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d022      	beq.n	800d216 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	699a      	ldr	r2, [r3, #24]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	18d1      	adds	r1, r2, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	683a      	ldr	r2, [r7, #0]
 800d1dc:	6978      	ldr	r0, [r7, #20]
 800d1de:	f000 f8d1 	bl	800d384 <prvInsertTimerInActiveList>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d01f      	beq.n	800d228 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	9300      	str	r3, [sp, #0]
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	2100      	movs	r1, #0
 800d1f2:	6978      	ldr	r0, [r7, #20]
 800d1f4:	f7ff ff88 	bl	800d108 <xTimerGenericCommand>
 800d1f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d113      	bne.n	800d228 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d204:	f383 8811 	msr	BASEPRI, r3
 800d208:	f3bf 8f6f 	isb	sy
 800d20c:	f3bf 8f4f 	dsb	sy
 800d210:	60fb      	str	r3, [r7, #12]
}
 800d212:	bf00      	nop
 800d214:	e7fe      	b.n	800d214 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d21c:	f023 0301 	bic.w	r3, r3, #1
 800d220:	b2da      	uxtb	r2, r3
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	6a1b      	ldr	r3, [r3, #32]
 800d22c:	6978      	ldr	r0, [r7, #20]
 800d22e:	4798      	blx	r3
}
 800d230:	bf00      	nop
 800d232:	3718      	adds	r7, #24
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	20008cec 	.word	0x20008cec

0800d23c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d244:	f107 0308 	add.w	r3, r7, #8
 800d248:	4618      	mov	r0, r3
 800d24a:	f000 f857 	bl	800d2fc <prvGetNextExpireTime>
 800d24e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	4619      	mov	r1, r3
 800d254:	68f8      	ldr	r0, [r7, #12]
 800d256:	f000 f803 	bl	800d260 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d25a:	f000 f8d5 	bl	800d408 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d25e:	e7f1      	b.n	800d244 <prvTimerTask+0x8>

0800d260 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d26a:	f7ff f82f 	bl	800c2cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d26e:	f107 0308 	add.w	r3, r7, #8
 800d272:	4618      	mov	r0, r3
 800d274:	f000 f866 	bl	800d344 <prvSampleTimeNow>
 800d278:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d130      	bne.n	800d2e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d10a      	bne.n	800d29c <prvProcessTimerOrBlockTask+0x3c>
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d806      	bhi.n	800d29c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d28e:	f7ff f82b 	bl	800c2e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d292:	68f9      	ldr	r1, [r7, #12]
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f7ff ff85 	bl	800d1a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d29a:	e024      	b.n	800d2e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d008      	beq.n	800d2b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d2a2:	4b13      	ldr	r3, [pc, #76]	; (800d2f0 <prvProcessTimerOrBlockTask+0x90>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d101      	bne.n	800d2b0 <prvProcessTimerOrBlockTask+0x50>
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	e000      	b.n	800d2b2 <prvProcessTimerOrBlockTask+0x52>
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d2b4:	4b0f      	ldr	r3, [pc, #60]	; (800d2f4 <prvProcessTimerOrBlockTask+0x94>)
 800d2b6:	6818      	ldr	r0, [r3, #0]
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	1ad3      	subs	r3, r2, r3
 800d2be:	683a      	ldr	r2, [r7, #0]
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	f7fe fd93 	bl	800bdec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d2c6:	f7ff f80f 	bl	800c2e8 <xTaskResumeAll>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d10a      	bne.n	800d2e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d2d0:	4b09      	ldr	r3, [pc, #36]	; (800d2f8 <prvProcessTimerOrBlockTask+0x98>)
 800d2d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2d6:	601a      	str	r2, [r3, #0]
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	f3bf 8f6f 	isb	sy
}
 800d2e0:	e001      	b.n	800d2e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d2e2:	f7ff f801 	bl	800c2e8 <xTaskResumeAll>
}
 800d2e6:	bf00      	nop
 800d2e8:	3710      	adds	r7, #16
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	20008cf0 	.word	0x20008cf0
 800d2f4:	20008cf4 	.word	0x20008cf4
 800d2f8:	e000ed04 	.word	0xe000ed04

0800d2fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b085      	sub	sp, #20
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d304:	4b0e      	ldr	r3, [pc, #56]	; (800d340 <prvGetNextExpireTime+0x44>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d101      	bne.n	800d312 <prvGetNextExpireTime+0x16>
 800d30e:	2201      	movs	r2, #1
 800d310:	e000      	b.n	800d314 <prvGetNextExpireTime+0x18>
 800d312:	2200      	movs	r2, #0
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d105      	bne.n	800d32c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d320:	4b07      	ldr	r3, [pc, #28]	; (800d340 <prvGetNextExpireTime+0x44>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	60fb      	str	r3, [r7, #12]
 800d32a:	e001      	b.n	800d330 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d32c:	2300      	movs	r3, #0
 800d32e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d330:	68fb      	ldr	r3, [r7, #12]
}
 800d332:	4618      	mov	r0, r3
 800d334:	3714      	adds	r7, #20
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop
 800d340:	20008cec 	.word	0x20008cec

0800d344 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d34c:	f7ff f86a 	bl	800c424 <xTaskGetTickCount>
 800d350:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d352:	4b0b      	ldr	r3, [pc, #44]	; (800d380 <prvSampleTimeNow+0x3c>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	68fa      	ldr	r2, [r7, #12]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d205      	bcs.n	800d368 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d35c:	f000 f936 	bl	800d5cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2201      	movs	r2, #1
 800d364:	601a      	str	r2, [r3, #0]
 800d366:	e002      	b.n	800d36e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2200      	movs	r2, #0
 800d36c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d36e:	4a04      	ldr	r2, [pc, #16]	; (800d380 <prvSampleTimeNow+0x3c>)
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d374:	68fb      	ldr	r3, [r7, #12]
}
 800d376:	4618      	mov	r0, r3
 800d378:	3710      	adds	r7, #16
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	20008cfc 	.word	0x20008cfc

0800d384 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
 800d390:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d392:	2300      	movs	r3, #0
 800d394:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	68ba      	ldr	r2, [r7, #8]
 800d39a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	68fa      	ldr	r2, [r7, #12]
 800d3a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d3a2:	68ba      	ldr	r2, [r7, #8]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d812      	bhi.n	800d3d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	1ad2      	subs	r2, r2, r3
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	699b      	ldr	r3, [r3, #24]
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d302      	bcc.n	800d3be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	617b      	str	r3, [r7, #20]
 800d3bc:	e01b      	b.n	800d3f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d3be:	4b10      	ldr	r3, [pc, #64]	; (800d400 <prvInsertTimerInActiveList+0x7c>)
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	3304      	adds	r3, #4
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	4610      	mov	r0, r2
 800d3ca:	f7fd fff4 	bl	800b3b6 <vListInsert>
 800d3ce:	e012      	b.n	800d3f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d206      	bcs.n	800d3e6 <prvInsertTimerInActiveList+0x62>
 800d3d8:	68ba      	ldr	r2, [r7, #8]
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d302      	bcc.n	800d3e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	617b      	str	r3, [r7, #20]
 800d3e4:	e007      	b.n	800d3f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d3e6:	4b07      	ldr	r3, [pc, #28]	; (800d404 <prvInsertTimerInActiveList+0x80>)
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	3304      	adds	r3, #4
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	4610      	mov	r0, r2
 800d3f2:	f7fd ffe0 	bl	800b3b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d3f6:	697b      	ldr	r3, [r7, #20]
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3718      	adds	r7, #24
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	20008cf0 	.word	0x20008cf0
 800d404:	20008cec 	.word	0x20008cec

0800d408 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b08e      	sub	sp, #56	; 0x38
 800d40c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d40e:	e0ca      	b.n	800d5a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2b00      	cmp	r3, #0
 800d414:	da18      	bge.n	800d448 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d416:	1d3b      	adds	r3, r7, #4
 800d418:	3304      	adds	r3, #4
 800d41a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d10a      	bne.n	800d438 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d426:	f383 8811 	msr	BASEPRI, r3
 800d42a:	f3bf 8f6f 	isb	sy
 800d42e:	f3bf 8f4f 	dsb	sy
 800d432:	61fb      	str	r3, [r7, #28]
}
 800d434:	bf00      	nop
 800d436:	e7fe      	b.n	800d436 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d43e:	6850      	ldr	r0, [r2, #4]
 800d440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d442:	6892      	ldr	r2, [r2, #8]
 800d444:	4611      	mov	r1, r2
 800d446:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	f2c0 80aa 	blt.w	800d5a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d456:	695b      	ldr	r3, [r3, #20]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d004      	beq.n	800d466 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45e:	3304      	adds	r3, #4
 800d460:	4618      	mov	r0, r3
 800d462:	f7fd ffe1 	bl	800b428 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d466:	463b      	mov	r3, r7
 800d468:	4618      	mov	r0, r3
 800d46a:	f7ff ff6b 	bl	800d344 <prvSampleTimeNow>
 800d46e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2b09      	cmp	r3, #9
 800d474:	f200 8097 	bhi.w	800d5a6 <prvProcessReceivedCommands+0x19e>
 800d478:	a201      	add	r2, pc, #4	; (adr r2, 800d480 <prvProcessReceivedCommands+0x78>)
 800d47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d47e:	bf00      	nop
 800d480:	0800d4a9 	.word	0x0800d4a9
 800d484:	0800d4a9 	.word	0x0800d4a9
 800d488:	0800d4a9 	.word	0x0800d4a9
 800d48c:	0800d51d 	.word	0x0800d51d
 800d490:	0800d531 	.word	0x0800d531
 800d494:	0800d57b 	.word	0x0800d57b
 800d498:	0800d4a9 	.word	0x0800d4a9
 800d49c:	0800d4a9 	.word	0x0800d4a9
 800d4a0:	0800d51d 	.word	0x0800d51d
 800d4a4:	0800d531 	.word	0x0800d531
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4ae:	f043 0301 	orr.w	r3, r3, #1
 800d4b2:	b2da      	uxtb	r2, r3
 800d4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d4ba:	68ba      	ldr	r2, [r7, #8]
 800d4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4be:	699b      	ldr	r3, [r3, #24]
 800d4c0:	18d1      	adds	r1, r2, r3
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4c8:	f7ff ff5c 	bl	800d384 <prvInsertTimerInActiveList>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d069      	beq.n	800d5a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d4:	6a1b      	ldr	r3, [r3, #32]
 800d4d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4e0:	f003 0304 	and.w	r3, r3, #4
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d05e      	beq.n	800d5a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d4e8:	68ba      	ldr	r2, [r7, #8]
 800d4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ec:	699b      	ldr	r3, [r3, #24]
 800d4ee:	441a      	add	r2, r3
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	9300      	str	r3, [sp, #0]
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	2100      	movs	r1, #0
 800d4f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4fa:	f7ff fe05 	bl	800d108 <xTimerGenericCommand>
 800d4fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d500:	6a3b      	ldr	r3, [r7, #32]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d14f      	bne.n	800d5a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50a:	f383 8811 	msr	BASEPRI, r3
 800d50e:	f3bf 8f6f 	isb	sy
 800d512:	f3bf 8f4f 	dsb	sy
 800d516:	61bb      	str	r3, [r7, #24]
}
 800d518:	bf00      	nop
 800d51a:	e7fe      	b.n	800d51a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d522:	f023 0301 	bic.w	r3, r3, #1
 800d526:	b2da      	uxtb	r2, r3
 800d528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d52e:	e03a      	b.n	800d5a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d536:	f043 0301 	orr.w	r3, r3, #1
 800d53a:	b2da      	uxtb	r2, r3
 800d53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d542:	68ba      	ldr	r2, [r7, #8]
 800d544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d546:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d54a:	699b      	ldr	r3, [r3, #24]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d10a      	bne.n	800d566 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d554:	f383 8811 	msr	BASEPRI, r3
 800d558:	f3bf 8f6f 	isb	sy
 800d55c:	f3bf 8f4f 	dsb	sy
 800d560:	617b      	str	r3, [r7, #20]
}
 800d562:	bf00      	nop
 800d564:	e7fe      	b.n	800d564 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d568:	699a      	ldr	r2, [r3, #24]
 800d56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56c:	18d1      	adds	r1, r2, r3
 800d56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d574:	f7ff ff06 	bl	800d384 <prvInsertTimerInActiveList>
					break;
 800d578:	e015      	b.n	800d5a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d580:	f003 0302 	and.w	r3, r3, #2
 800d584:	2b00      	cmp	r3, #0
 800d586:	d103      	bne.n	800d590 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d58a:	f000 fbe1 	bl	800dd50 <vPortFree>
 800d58e:	e00a      	b.n	800d5a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d596:	f023 0301 	bic.w	r3, r3, #1
 800d59a:	b2da      	uxtb	r2, r3
 800d59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d5a2:	e000      	b.n	800d5a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d5a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d5a6:	4b08      	ldr	r3, [pc, #32]	; (800d5c8 <prvProcessReceivedCommands+0x1c0>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	1d39      	adds	r1, r7, #4
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fe fa02 	bl	800b9b8 <xQueueReceive>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	f47f af2a 	bne.w	800d410 <prvProcessReceivedCommands+0x8>
	}
}
 800d5bc:	bf00      	nop
 800d5be:	bf00      	nop
 800d5c0:	3730      	adds	r7, #48	; 0x30
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	20008cf4 	.word	0x20008cf4

0800d5cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b088      	sub	sp, #32
 800d5d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d5d2:	e048      	b.n	800d666 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d5d4:	4b2d      	ldr	r3, [pc, #180]	; (800d68c <prvSwitchTimerLists+0xc0>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	68db      	ldr	r3, [r3, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5de:	4b2b      	ldr	r3, [pc, #172]	; (800d68c <prvSwitchTimerLists+0xc0>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	68db      	ldr	r3, [r3, #12]
 800d5e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	3304      	adds	r3, #4
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fd ff1b 	bl	800b428 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	6a1b      	ldr	r3, [r3, #32]
 800d5f6:	68f8      	ldr	r0, [r7, #12]
 800d5f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d600:	f003 0304 	and.w	r3, r3, #4
 800d604:	2b00      	cmp	r3, #0
 800d606:	d02e      	beq.n	800d666 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	699b      	ldr	r3, [r3, #24]
 800d60c:	693a      	ldr	r2, [r7, #16]
 800d60e:	4413      	add	r3, r2
 800d610:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d612:	68ba      	ldr	r2, [r7, #8]
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	429a      	cmp	r2, r3
 800d618:	d90e      	bls.n	800d638 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	68ba      	ldr	r2, [r7, #8]
 800d61e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	68fa      	ldr	r2, [r7, #12]
 800d624:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d626:	4b19      	ldr	r3, [pc, #100]	; (800d68c <prvSwitchTimerLists+0xc0>)
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	3304      	adds	r3, #4
 800d62e:	4619      	mov	r1, r3
 800d630:	4610      	mov	r0, r2
 800d632:	f7fd fec0 	bl	800b3b6 <vListInsert>
 800d636:	e016      	b.n	800d666 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d638:	2300      	movs	r3, #0
 800d63a:	9300      	str	r3, [sp, #0]
 800d63c:	2300      	movs	r3, #0
 800d63e:	693a      	ldr	r2, [r7, #16]
 800d640:	2100      	movs	r1, #0
 800d642:	68f8      	ldr	r0, [r7, #12]
 800d644:	f7ff fd60 	bl	800d108 <xTimerGenericCommand>
 800d648:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d10a      	bne.n	800d666 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d654:	f383 8811 	msr	BASEPRI, r3
 800d658:	f3bf 8f6f 	isb	sy
 800d65c:	f3bf 8f4f 	dsb	sy
 800d660:	603b      	str	r3, [r7, #0]
}
 800d662:	bf00      	nop
 800d664:	e7fe      	b.n	800d664 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d666:	4b09      	ldr	r3, [pc, #36]	; (800d68c <prvSwitchTimerLists+0xc0>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d1b1      	bne.n	800d5d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d670:	4b06      	ldr	r3, [pc, #24]	; (800d68c <prvSwitchTimerLists+0xc0>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d676:	4b06      	ldr	r3, [pc, #24]	; (800d690 <prvSwitchTimerLists+0xc4>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4a04      	ldr	r2, [pc, #16]	; (800d68c <prvSwitchTimerLists+0xc0>)
 800d67c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d67e:	4a04      	ldr	r2, [pc, #16]	; (800d690 <prvSwitchTimerLists+0xc4>)
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	6013      	str	r3, [r2, #0]
}
 800d684:	bf00      	nop
 800d686:	3718      	adds	r7, #24
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}
 800d68c:	20008cec 	.word	0x20008cec
 800d690:	20008cf0 	.word	0x20008cf0

0800d694 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b082      	sub	sp, #8
 800d698:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d69a:	f000 f96b 	bl	800d974 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d69e:	4b15      	ldr	r3, [pc, #84]	; (800d6f4 <prvCheckForValidListAndQueue+0x60>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d120      	bne.n	800d6e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d6a6:	4814      	ldr	r0, [pc, #80]	; (800d6f8 <prvCheckForValidListAndQueue+0x64>)
 800d6a8:	f7fd fe34 	bl	800b314 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d6ac:	4813      	ldr	r0, [pc, #76]	; (800d6fc <prvCheckForValidListAndQueue+0x68>)
 800d6ae:	f7fd fe31 	bl	800b314 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d6b2:	4b13      	ldr	r3, [pc, #76]	; (800d700 <prvCheckForValidListAndQueue+0x6c>)
 800d6b4:	4a10      	ldr	r2, [pc, #64]	; (800d6f8 <prvCheckForValidListAndQueue+0x64>)
 800d6b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d6b8:	4b12      	ldr	r3, [pc, #72]	; (800d704 <prvCheckForValidListAndQueue+0x70>)
 800d6ba:	4a10      	ldr	r2, [pc, #64]	; (800d6fc <prvCheckForValidListAndQueue+0x68>)
 800d6bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d6be:	2300      	movs	r3, #0
 800d6c0:	9300      	str	r3, [sp, #0]
 800d6c2:	4b11      	ldr	r3, [pc, #68]	; (800d708 <prvCheckForValidListAndQueue+0x74>)
 800d6c4:	4a11      	ldr	r2, [pc, #68]	; (800d70c <prvCheckForValidListAndQueue+0x78>)
 800d6c6:	2110      	movs	r1, #16
 800d6c8:	200a      	movs	r0, #10
 800d6ca:	f7fd ff3f 	bl	800b54c <xQueueGenericCreateStatic>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	4a08      	ldr	r2, [pc, #32]	; (800d6f4 <prvCheckForValidListAndQueue+0x60>)
 800d6d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d6d4:	4b07      	ldr	r3, [pc, #28]	; (800d6f4 <prvCheckForValidListAndQueue+0x60>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d005      	beq.n	800d6e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d6dc:	4b05      	ldr	r3, [pc, #20]	; (800d6f4 <prvCheckForValidListAndQueue+0x60>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	490b      	ldr	r1, [pc, #44]	; (800d710 <prvCheckForValidListAndQueue+0x7c>)
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7fe fb58 	bl	800bd98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d6e8:	f000 f974 	bl	800d9d4 <vPortExitCritical>
}
 800d6ec:	bf00      	nop
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	20008cf4 	.word	0x20008cf4
 800d6f8:	20008cc4 	.word	0x20008cc4
 800d6fc:	20008cd8 	.word	0x20008cd8
 800d700:	20008cec 	.word	0x20008cec
 800d704:	20008cf0 	.word	0x20008cf0
 800d708:	20008da0 	.word	0x20008da0
 800d70c:	20008d00 	.word	0x20008d00
 800d710:	0801dee8 	.word	0x0801dee8

0800d714 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d714:	b480      	push	{r7}
 800d716:	b085      	sub	sp, #20
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	3b04      	subs	r3, #4
 800d724:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d72c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	3b04      	subs	r3, #4
 800d732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	f023 0201 	bic.w	r2, r3, #1
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	3b04      	subs	r3, #4
 800d742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d744:	4a0c      	ldr	r2, [pc, #48]	; (800d778 <pxPortInitialiseStack+0x64>)
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	3b14      	subs	r3, #20
 800d74e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	3b04      	subs	r3, #4
 800d75a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f06f 0202 	mvn.w	r2, #2
 800d762:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	3b20      	subs	r3, #32
 800d768:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d76a:	68fb      	ldr	r3, [r7, #12]
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3714      	adds	r7, #20
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr
 800d778:	0800d77d 	.word	0x0800d77d

0800d77c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d77c:	b480      	push	{r7}
 800d77e:	b085      	sub	sp, #20
 800d780:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d782:	2300      	movs	r3, #0
 800d784:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d786:	4b12      	ldr	r3, [pc, #72]	; (800d7d0 <prvTaskExitError+0x54>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d78e:	d00a      	beq.n	800d7a6 <prvTaskExitError+0x2a>
	__asm volatile
 800d790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d794:	f383 8811 	msr	BASEPRI, r3
 800d798:	f3bf 8f6f 	isb	sy
 800d79c:	f3bf 8f4f 	dsb	sy
 800d7a0:	60fb      	str	r3, [r7, #12]
}
 800d7a2:	bf00      	nop
 800d7a4:	e7fe      	b.n	800d7a4 <prvTaskExitError+0x28>
	__asm volatile
 800d7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7aa:	f383 8811 	msr	BASEPRI, r3
 800d7ae:	f3bf 8f6f 	isb	sy
 800d7b2:	f3bf 8f4f 	dsb	sy
 800d7b6:	60bb      	str	r3, [r7, #8]
}
 800d7b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d7ba:	bf00      	nop
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d0fc      	beq.n	800d7bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d7c2:	bf00      	nop
 800d7c4:	bf00      	nop
 800d7c6:	3714      	adds	r7, #20
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr
 800d7d0:	20000014 	.word	0x20000014
	...

0800d7e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d7e0:	4b07      	ldr	r3, [pc, #28]	; (800d800 <pxCurrentTCBConst2>)
 800d7e2:	6819      	ldr	r1, [r3, #0]
 800d7e4:	6808      	ldr	r0, [r1, #0]
 800d7e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ea:	f380 8809 	msr	PSP, r0
 800d7ee:	f3bf 8f6f 	isb	sy
 800d7f2:	f04f 0000 	mov.w	r0, #0
 800d7f6:	f380 8811 	msr	BASEPRI, r0
 800d7fa:	4770      	bx	lr
 800d7fc:	f3af 8000 	nop.w

0800d800 <pxCurrentTCBConst2>:
 800d800:	200087c4 	.word	0x200087c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d804:	bf00      	nop
 800d806:	bf00      	nop

0800d808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d808:	4808      	ldr	r0, [pc, #32]	; (800d82c <prvPortStartFirstTask+0x24>)
 800d80a:	6800      	ldr	r0, [r0, #0]
 800d80c:	6800      	ldr	r0, [r0, #0]
 800d80e:	f380 8808 	msr	MSP, r0
 800d812:	f04f 0000 	mov.w	r0, #0
 800d816:	f380 8814 	msr	CONTROL, r0
 800d81a:	b662      	cpsie	i
 800d81c:	b661      	cpsie	f
 800d81e:	f3bf 8f4f 	dsb	sy
 800d822:	f3bf 8f6f 	isb	sy
 800d826:	df00      	svc	0
 800d828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d82a:	bf00      	nop
 800d82c:	e000ed08 	.word	0xe000ed08

0800d830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b086      	sub	sp, #24
 800d834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d836:	4b46      	ldr	r3, [pc, #280]	; (800d950 <xPortStartScheduler+0x120>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	4a46      	ldr	r2, [pc, #280]	; (800d954 <xPortStartScheduler+0x124>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d10a      	bne.n	800d856 <xPortStartScheduler+0x26>
	__asm volatile
 800d840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d844:	f383 8811 	msr	BASEPRI, r3
 800d848:	f3bf 8f6f 	isb	sy
 800d84c:	f3bf 8f4f 	dsb	sy
 800d850:	613b      	str	r3, [r7, #16]
}
 800d852:	bf00      	nop
 800d854:	e7fe      	b.n	800d854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d856:	4b3e      	ldr	r3, [pc, #248]	; (800d950 <xPortStartScheduler+0x120>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a3f      	ldr	r2, [pc, #252]	; (800d958 <xPortStartScheduler+0x128>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d10a      	bne.n	800d876 <xPortStartScheduler+0x46>
	__asm volatile
 800d860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d864:	f383 8811 	msr	BASEPRI, r3
 800d868:	f3bf 8f6f 	isb	sy
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	60fb      	str	r3, [r7, #12]
}
 800d872:	bf00      	nop
 800d874:	e7fe      	b.n	800d874 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d876:	4b39      	ldr	r3, [pc, #228]	; (800d95c <xPortStartScheduler+0x12c>)
 800d878:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	22ff      	movs	r2, #255	; 0xff
 800d886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d890:	78fb      	ldrb	r3, [r7, #3]
 800d892:	b2db      	uxtb	r3, r3
 800d894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d898:	b2da      	uxtb	r2, r3
 800d89a:	4b31      	ldr	r3, [pc, #196]	; (800d960 <xPortStartScheduler+0x130>)
 800d89c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d89e:	4b31      	ldr	r3, [pc, #196]	; (800d964 <xPortStartScheduler+0x134>)
 800d8a0:	2207      	movs	r2, #7
 800d8a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8a4:	e009      	b.n	800d8ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d8a6:	4b2f      	ldr	r3, [pc, #188]	; (800d964 <xPortStartScheduler+0x134>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	3b01      	subs	r3, #1
 800d8ac:	4a2d      	ldr	r2, [pc, #180]	; (800d964 <xPortStartScheduler+0x134>)
 800d8ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d8b0:	78fb      	ldrb	r3, [r7, #3]
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	005b      	lsls	r3, r3, #1
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8ba:	78fb      	ldrb	r3, [r7, #3]
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8c2:	2b80      	cmp	r3, #128	; 0x80
 800d8c4:	d0ef      	beq.n	800d8a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d8c6:	4b27      	ldr	r3, [pc, #156]	; (800d964 <xPortStartScheduler+0x134>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f1c3 0307 	rsb	r3, r3, #7
 800d8ce:	2b04      	cmp	r3, #4
 800d8d0:	d00a      	beq.n	800d8e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d6:	f383 8811 	msr	BASEPRI, r3
 800d8da:	f3bf 8f6f 	isb	sy
 800d8de:	f3bf 8f4f 	dsb	sy
 800d8e2:	60bb      	str	r3, [r7, #8]
}
 800d8e4:	bf00      	nop
 800d8e6:	e7fe      	b.n	800d8e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d8e8:	4b1e      	ldr	r3, [pc, #120]	; (800d964 <xPortStartScheduler+0x134>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	021b      	lsls	r3, r3, #8
 800d8ee:	4a1d      	ldr	r2, [pc, #116]	; (800d964 <xPortStartScheduler+0x134>)
 800d8f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d8f2:	4b1c      	ldr	r3, [pc, #112]	; (800d964 <xPortStartScheduler+0x134>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d8fa:	4a1a      	ldr	r2, [pc, #104]	; (800d964 <xPortStartScheduler+0x134>)
 800d8fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	b2da      	uxtb	r2, r3
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d906:	4b18      	ldr	r3, [pc, #96]	; (800d968 <xPortStartScheduler+0x138>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4a17      	ldr	r2, [pc, #92]	; (800d968 <xPortStartScheduler+0x138>)
 800d90c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d910:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d912:	4b15      	ldr	r3, [pc, #84]	; (800d968 <xPortStartScheduler+0x138>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4a14      	ldr	r2, [pc, #80]	; (800d968 <xPortStartScheduler+0x138>)
 800d918:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d91c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d91e:	f000 f8dd 	bl	800dadc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d922:	4b12      	ldr	r3, [pc, #72]	; (800d96c <xPortStartScheduler+0x13c>)
 800d924:	2200      	movs	r2, #0
 800d926:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d928:	f000 f8fc 	bl	800db24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d92c:	4b10      	ldr	r3, [pc, #64]	; (800d970 <xPortStartScheduler+0x140>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4a0f      	ldr	r2, [pc, #60]	; (800d970 <xPortStartScheduler+0x140>)
 800d932:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d936:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d938:	f7ff ff66 	bl	800d808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d93c:	f7fe fe3c 	bl	800c5b8 <vTaskSwitchContext>
	prvTaskExitError();
 800d940:	f7ff ff1c 	bl	800d77c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d944:	2300      	movs	r3, #0
}
 800d946:	4618      	mov	r0, r3
 800d948:	3718      	adds	r7, #24
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	e000ed00 	.word	0xe000ed00
 800d954:	410fc271 	.word	0x410fc271
 800d958:	410fc270 	.word	0x410fc270
 800d95c:	e000e400 	.word	0xe000e400
 800d960:	20008df0 	.word	0x20008df0
 800d964:	20008df4 	.word	0x20008df4
 800d968:	e000ed20 	.word	0xe000ed20
 800d96c:	20000014 	.word	0x20000014
 800d970:	e000ef34 	.word	0xe000ef34

0800d974 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d974:	b480      	push	{r7}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
	__asm volatile
 800d97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97e:	f383 8811 	msr	BASEPRI, r3
 800d982:	f3bf 8f6f 	isb	sy
 800d986:	f3bf 8f4f 	dsb	sy
 800d98a:	607b      	str	r3, [r7, #4]
}
 800d98c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d98e:	4b0f      	ldr	r3, [pc, #60]	; (800d9cc <vPortEnterCritical+0x58>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	3301      	adds	r3, #1
 800d994:	4a0d      	ldr	r2, [pc, #52]	; (800d9cc <vPortEnterCritical+0x58>)
 800d996:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d998:	4b0c      	ldr	r3, [pc, #48]	; (800d9cc <vPortEnterCritical+0x58>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	d10f      	bne.n	800d9c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d9a0:	4b0b      	ldr	r3, [pc, #44]	; (800d9d0 <vPortEnterCritical+0x5c>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d00a      	beq.n	800d9c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ae:	f383 8811 	msr	BASEPRI, r3
 800d9b2:	f3bf 8f6f 	isb	sy
 800d9b6:	f3bf 8f4f 	dsb	sy
 800d9ba:	603b      	str	r3, [r7, #0]
}
 800d9bc:	bf00      	nop
 800d9be:	e7fe      	b.n	800d9be <vPortEnterCritical+0x4a>
	}
}
 800d9c0:	bf00      	nop
 800d9c2:	370c      	adds	r7, #12
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr
 800d9cc:	20000014 	.word	0x20000014
 800d9d0:	e000ed04 	.word	0xe000ed04

0800d9d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d9da:	4b12      	ldr	r3, [pc, #72]	; (800da24 <vPortExitCritical+0x50>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d10a      	bne.n	800d9f8 <vPortExitCritical+0x24>
	__asm volatile
 800d9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e6:	f383 8811 	msr	BASEPRI, r3
 800d9ea:	f3bf 8f6f 	isb	sy
 800d9ee:	f3bf 8f4f 	dsb	sy
 800d9f2:	607b      	str	r3, [r7, #4]
}
 800d9f4:	bf00      	nop
 800d9f6:	e7fe      	b.n	800d9f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d9f8:	4b0a      	ldr	r3, [pc, #40]	; (800da24 <vPortExitCritical+0x50>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	3b01      	subs	r3, #1
 800d9fe:	4a09      	ldr	r2, [pc, #36]	; (800da24 <vPortExitCritical+0x50>)
 800da00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800da02:	4b08      	ldr	r3, [pc, #32]	; (800da24 <vPortExitCritical+0x50>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d105      	bne.n	800da16 <vPortExitCritical+0x42>
 800da0a:	2300      	movs	r3, #0
 800da0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	f383 8811 	msr	BASEPRI, r3
}
 800da14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800da16:	bf00      	nop
 800da18:	370c      	adds	r7, #12
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr
 800da22:	bf00      	nop
 800da24:	20000014 	.word	0x20000014
	...

0800da30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800da30:	f3ef 8009 	mrs	r0, PSP
 800da34:	f3bf 8f6f 	isb	sy
 800da38:	4b15      	ldr	r3, [pc, #84]	; (800da90 <pxCurrentTCBConst>)
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	f01e 0f10 	tst.w	lr, #16
 800da40:	bf08      	it	eq
 800da42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800da46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da4a:	6010      	str	r0, [r2, #0]
 800da4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800da50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800da54:	f380 8811 	msr	BASEPRI, r0
 800da58:	f3bf 8f4f 	dsb	sy
 800da5c:	f3bf 8f6f 	isb	sy
 800da60:	f7fe fdaa 	bl	800c5b8 <vTaskSwitchContext>
 800da64:	f04f 0000 	mov.w	r0, #0
 800da68:	f380 8811 	msr	BASEPRI, r0
 800da6c:	bc09      	pop	{r0, r3}
 800da6e:	6819      	ldr	r1, [r3, #0]
 800da70:	6808      	ldr	r0, [r1, #0]
 800da72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da76:	f01e 0f10 	tst.w	lr, #16
 800da7a:	bf08      	it	eq
 800da7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800da80:	f380 8809 	msr	PSP, r0
 800da84:	f3bf 8f6f 	isb	sy
 800da88:	4770      	bx	lr
 800da8a:	bf00      	nop
 800da8c:	f3af 8000 	nop.w

0800da90 <pxCurrentTCBConst>:
 800da90:	200087c4 	.word	0x200087c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800da94:	bf00      	nop
 800da96:	bf00      	nop

0800da98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
	__asm volatile
 800da9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa2:	f383 8811 	msr	BASEPRI, r3
 800daa6:	f3bf 8f6f 	isb	sy
 800daaa:	f3bf 8f4f 	dsb	sy
 800daae:	607b      	str	r3, [r7, #4]
}
 800dab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dab2:	f7fe fcc7 	bl	800c444 <xTaskIncrementTick>
 800dab6:	4603      	mov	r3, r0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d003      	beq.n	800dac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dabc:	4b06      	ldr	r3, [pc, #24]	; (800dad8 <xPortSysTickHandler+0x40>)
 800dabe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dac2:	601a      	str	r2, [r3, #0]
 800dac4:	2300      	movs	r3, #0
 800dac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	f383 8811 	msr	BASEPRI, r3
}
 800dace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dad0:	bf00      	nop
 800dad2:	3708      	adds	r7, #8
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}
 800dad8:	e000ed04 	.word	0xe000ed04

0800dadc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dadc:	b480      	push	{r7}
 800dade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dae0:	4b0b      	ldr	r3, [pc, #44]	; (800db10 <vPortSetupTimerInterrupt+0x34>)
 800dae2:	2200      	movs	r2, #0
 800dae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dae6:	4b0b      	ldr	r3, [pc, #44]	; (800db14 <vPortSetupTimerInterrupt+0x38>)
 800dae8:	2200      	movs	r2, #0
 800daea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800daec:	4b0a      	ldr	r3, [pc, #40]	; (800db18 <vPortSetupTimerInterrupt+0x3c>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4a0a      	ldr	r2, [pc, #40]	; (800db1c <vPortSetupTimerInterrupt+0x40>)
 800daf2:	fba2 2303 	umull	r2, r3, r2, r3
 800daf6:	099b      	lsrs	r3, r3, #6
 800daf8:	4a09      	ldr	r2, [pc, #36]	; (800db20 <vPortSetupTimerInterrupt+0x44>)
 800dafa:	3b01      	subs	r3, #1
 800dafc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dafe:	4b04      	ldr	r3, [pc, #16]	; (800db10 <vPortSetupTimerInterrupt+0x34>)
 800db00:	2207      	movs	r2, #7
 800db02:	601a      	str	r2, [r3, #0]
}
 800db04:	bf00      	nop
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr
 800db0e:	bf00      	nop
 800db10:	e000e010 	.word	0xe000e010
 800db14:	e000e018 	.word	0xe000e018
 800db18:	20000008 	.word	0x20000008
 800db1c:	10624dd3 	.word	0x10624dd3
 800db20:	e000e014 	.word	0xe000e014

0800db24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800db24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800db34 <vPortEnableVFP+0x10>
 800db28:	6801      	ldr	r1, [r0, #0]
 800db2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800db2e:	6001      	str	r1, [r0, #0]
 800db30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800db32:	bf00      	nop
 800db34:	e000ed88 	.word	0xe000ed88

0800db38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800db38:	b480      	push	{r7}
 800db3a:	b085      	sub	sp, #20
 800db3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800db3e:	f3ef 8305 	mrs	r3, IPSR
 800db42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2b0f      	cmp	r3, #15
 800db48:	d914      	bls.n	800db74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800db4a:	4a17      	ldr	r2, [pc, #92]	; (800dba8 <vPortValidateInterruptPriority+0x70>)
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	4413      	add	r3, r2
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800db54:	4b15      	ldr	r3, [pc, #84]	; (800dbac <vPortValidateInterruptPriority+0x74>)
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	7afa      	ldrb	r2, [r7, #11]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d20a      	bcs.n	800db74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800db5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db62:	f383 8811 	msr	BASEPRI, r3
 800db66:	f3bf 8f6f 	isb	sy
 800db6a:	f3bf 8f4f 	dsb	sy
 800db6e:	607b      	str	r3, [r7, #4]
}
 800db70:	bf00      	nop
 800db72:	e7fe      	b.n	800db72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800db74:	4b0e      	ldr	r3, [pc, #56]	; (800dbb0 <vPortValidateInterruptPriority+0x78>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800db7c:	4b0d      	ldr	r3, [pc, #52]	; (800dbb4 <vPortValidateInterruptPriority+0x7c>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	429a      	cmp	r2, r3
 800db82:	d90a      	bls.n	800db9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800db84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db88:	f383 8811 	msr	BASEPRI, r3
 800db8c:	f3bf 8f6f 	isb	sy
 800db90:	f3bf 8f4f 	dsb	sy
 800db94:	603b      	str	r3, [r7, #0]
}
 800db96:	bf00      	nop
 800db98:	e7fe      	b.n	800db98 <vPortValidateInterruptPriority+0x60>
	}
 800db9a:	bf00      	nop
 800db9c:	3714      	adds	r7, #20
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop
 800dba8:	e000e3f0 	.word	0xe000e3f0
 800dbac:	20008df0 	.word	0x20008df0
 800dbb0:	e000ed0c 	.word	0xe000ed0c
 800dbb4:	20008df4 	.word	0x20008df4

0800dbb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b08a      	sub	sp, #40	; 0x28
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dbc4:	f7fe fb82 	bl	800c2cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dbc8:	4b5b      	ldr	r3, [pc, #364]	; (800dd38 <pvPortMalloc+0x180>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d101      	bne.n	800dbd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dbd0:	f000 f920 	bl	800de14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dbd4:	4b59      	ldr	r3, [pc, #356]	; (800dd3c <pvPortMalloc+0x184>)
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	4013      	ands	r3, r2
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	f040 8093 	bne.w	800dd08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d01d      	beq.n	800dc24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dbe8:	2208      	movs	r2, #8
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	4413      	add	r3, r2
 800dbee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f003 0307 	and.w	r3, r3, #7
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d014      	beq.n	800dc24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f023 0307 	bic.w	r3, r3, #7
 800dc00:	3308      	adds	r3, #8
 800dc02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f003 0307 	and.w	r3, r3, #7
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d00a      	beq.n	800dc24 <pvPortMalloc+0x6c>
	__asm volatile
 800dc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc12:	f383 8811 	msr	BASEPRI, r3
 800dc16:	f3bf 8f6f 	isb	sy
 800dc1a:	f3bf 8f4f 	dsb	sy
 800dc1e:	617b      	str	r3, [r7, #20]
}
 800dc20:	bf00      	nop
 800dc22:	e7fe      	b.n	800dc22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d06e      	beq.n	800dd08 <pvPortMalloc+0x150>
 800dc2a:	4b45      	ldr	r3, [pc, #276]	; (800dd40 <pvPortMalloc+0x188>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	687a      	ldr	r2, [r7, #4]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d869      	bhi.n	800dd08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dc34:	4b43      	ldr	r3, [pc, #268]	; (800dd44 <pvPortMalloc+0x18c>)
 800dc36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dc38:	4b42      	ldr	r3, [pc, #264]	; (800dd44 <pvPortMalloc+0x18c>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc3e:	e004      	b.n	800dc4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	687a      	ldr	r2, [r7, #4]
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d903      	bls.n	800dc5c <pvPortMalloc+0xa4>
 800dc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d1f1      	bne.n	800dc40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dc5c:	4b36      	ldr	r3, [pc, #216]	; (800dd38 <pvPortMalloc+0x180>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d050      	beq.n	800dd08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dc66:	6a3b      	ldr	r3, [r7, #32]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2208      	movs	r2, #8
 800dc6c:	4413      	add	r3, r2
 800dc6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc72:	681a      	ldr	r2, [r3, #0]
 800dc74:	6a3b      	ldr	r3, [r7, #32]
 800dc76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7a:	685a      	ldr	r2, [r3, #4]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	1ad2      	subs	r2, r2, r3
 800dc80:	2308      	movs	r3, #8
 800dc82:	005b      	lsls	r3, r3, #1
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d91f      	bls.n	800dcc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dc88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	4413      	add	r3, r2
 800dc8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc90:	69bb      	ldr	r3, [r7, #24]
 800dc92:	f003 0307 	and.w	r3, r3, #7
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d00a      	beq.n	800dcb0 <pvPortMalloc+0xf8>
	__asm volatile
 800dc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc9e:	f383 8811 	msr	BASEPRI, r3
 800dca2:	f3bf 8f6f 	isb	sy
 800dca6:	f3bf 8f4f 	dsb	sy
 800dcaa:	613b      	str	r3, [r7, #16]
}
 800dcac:	bf00      	nop
 800dcae:	e7fe      	b.n	800dcae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb2:	685a      	ldr	r2, [r3, #4]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	1ad2      	subs	r2, r2, r3
 800dcb8:	69bb      	ldr	r3, [r7, #24]
 800dcba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbe:	687a      	ldr	r2, [r7, #4]
 800dcc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dcc2:	69b8      	ldr	r0, [r7, #24]
 800dcc4:	f000 f908 	bl	800ded8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dcc8:	4b1d      	ldr	r3, [pc, #116]	; (800dd40 <pvPortMalloc+0x188>)
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	1ad3      	subs	r3, r2, r3
 800dcd2:	4a1b      	ldr	r2, [pc, #108]	; (800dd40 <pvPortMalloc+0x188>)
 800dcd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dcd6:	4b1a      	ldr	r3, [pc, #104]	; (800dd40 <pvPortMalloc+0x188>)
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	4b1b      	ldr	r3, [pc, #108]	; (800dd48 <pvPortMalloc+0x190>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d203      	bcs.n	800dcea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dce2:	4b17      	ldr	r3, [pc, #92]	; (800dd40 <pvPortMalloc+0x188>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4a18      	ldr	r2, [pc, #96]	; (800dd48 <pvPortMalloc+0x190>)
 800dce8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcec:	685a      	ldr	r2, [r3, #4]
 800dcee:	4b13      	ldr	r3, [pc, #76]	; (800dd3c <pvPortMalloc+0x184>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	431a      	orrs	r2, r3
 800dcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dcfe:	4b13      	ldr	r3, [pc, #76]	; (800dd4c <pvPortMalloc+0x194>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	3301      	adds	r3, #1
 800dd04:	4a11      	ldr	r2, [pc, #68]	; (800dd4c <pvPortMalloc+0x194>)
 800dd06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dd08:	f7fe faee 	bl	800c2e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	f003 0307 	and.w	r3, r3, #7
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d00a      	beq.n	800dd2c <pvPortMalloc+0x174>
	__asm volatile
 800dd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd1a:	f383 8811 	msr	BASEPRI, r3
 800dd1e:	f3bf 8f6f 	isb	sy
 800dd22:	f3bf 8f4f 	dsb	sy
 800dd26:	60fb      	str	r3, [r7, #12]
}
 800dd28:	bf00      	nop
 800dd2a:	e7fe      	b.n	800dd2a <pvPortMalloc+0x172>
	return pvReturn;
 800dd2c:	69fb      	ldr	r3, [r7, #28]
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3728      	adds	r7, #40	; 0x28
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
 800dd36:	bf00      	nop
 800dd38:	20010330 	.word	0x20010330
 800dd3c:	20010344 	.word	0x20010344
 800dd40:	20010334 	.word	0x20010334
 800dd44:	20010328 	.word	0x20010328
 800dd48:	20010338 	.word	0x20010338
 800dd4c:	2001033c 	.word	0x2001033c

0800dd50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b086      	sub	sp, #24
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d04d      	beq.n	800ddfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dd62:	2308      	movs	r3, #8
 800dd64:	425b      	negs	r3, r3
 800dd66:	697a      	ldr	r2, [r7, #20]
 800dd68:	4413      	add	r3, r2
 800dd6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	685a      	ldr	r2, [r3, #4]
 800dd74:	4b24      	ldr	r3, [pc, #144]	; (800de08 <vPortFree+0xb8>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4013      	ands	r3, r2
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d10a      	bne.n	800dd94 <vPortFree+0x44>
	__asm volatile
 800dd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd82:	f383 8811 	msr	BASEPRI, r3
 800dd86:	f3bf 8f6f 	isb	sy
 800dd8a:	f3bf 8f4f 	dsb	sy
 800dd8e:	60fb      	str	r3, [r7, #12]
}
 800dd90:	bf00      	nop
 800dd92:	e7fe      	b.n	800dd92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d00a      	beq.n	800ddb2 <vPortFree+0x62>
	__asm volatile
 800dd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda0:	f383 8811 	msr	BASEPRI, r3
 800dda4:	f3bf 8f6f 	isb	sy
 800dda8:	f3bf 8f4f 	dsb	sy
 800ddac:	60bb      	str	r3, [r7, #8]
}
 800ddae:	bf00      	nop
 800ddb0:	e7fe      	b.n	800ddb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	685a      	ldr	r2, [r3, #4]
 800ddb6:	4b14      	ldr	r3, [pc, #80]	; (800de08 <vPortFree+0xb8>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4013      	ands	r3, r2
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d01e      	beq.n	800ddfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d11a      	bne.n	800ddfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	685a      	ldr	r2, [r3, #4]
 800ddcc:	4b0e      	ldr	r3, [pc, #56]	; (800de08 <vPortFree+0xb8>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	43db      	mvns	r3, r3
 800ddd2:	401a      	ands	r2, r3
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ddd8:	f7fe fa78 	bl	800c2cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	685a      	ldr	r2, [r3, #4]
 800dde0:	4b0a      	ldr	r3, [pc, #40]	; (800de0c <vPortFree+0xbc>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4413      	add	r3, r2
 800dde6:	4a09      	ldr	r2, [pc, #36]	; (800de0c <vPortFree+0xbc>)
 800dde8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ddea:	6938      	ldr	r0, [r7, #16]
 800ddec:	f000 f874 	bl	800ded8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ddf0:	4b07      	ldr	r3, [pc, #28]	; (800de10 <vPortFree+0xc0>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	4a06      	ldr	r2, [pc, #24]	; (800de10 <vPortFree+0xc0>)
 800ddf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ddfa:	f7fe fa75 	bl	800c2e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ddfe:	bf00      	nop
 800de00:	3718      	adds	r7, #24
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	20010344 	.word	0x20010344
 800de0c:	20010334 	.word	0x20010334
 800de10:	20010340 	.word	0x20010340

0800de14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800de14:	b480      	push	{r7}
 800de16:	b085      	sub	sp, #20
 800de18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800de1a:	f247 5330 	movw	r3, #30000	; 0x7530
 800de1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800de20:	4b27      	ldr	r3, [pc, #156]	; (800dec0 <prvHeapInit+0xac>)
 800de22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f003 0307 	and.w	r3, r3, #7
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00c      	beq.n	800de48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	3307      	adds	r3, #7
 800de32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f023 0307 	bic.w	r3, r3, #7
 800de3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800de3c:	68ba      	ldr	r2, [r7, #8]
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	1ad3      	subs	r3, r2, r3
 800de42:	4a1f      	ldr	r2, [pc, #124]	; (800dec0 <prvHeapInit+0xac>)
 800de44:	4413      	add	r3, r2
 800de46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800de4c:	4a1d      	ldr	r2, [pc, #116]	; (800dec4 <prvHeapInit+0xb0>)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800de52:	4b1c      	ldr	r3, [pc, #112]	; (800dec4 <prvHeapInit+0xb0>)
 800de54:	2200      	movs	r2, #0
 800de56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	68ba      	ldr	r2, [r7, #8]
 800de5c:	4413      	add	r3, r2
 800de5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800de60:	2208      	movs	r2, #8
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	1a9b      	subs	r3, r3, r2
 800de66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f023 0307 	bic.w	r3, r3, #7
 800de6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	4a15      	ldr	r2, [pc, #84]	; (800dec8 <prvHeapInit+0xb4>)
 800de74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800de76:	4b14      	ldr	r3, [pc, #80]	; (800dec8 <prvHeapInit+0xb4>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2200      	movs	r2, #0
 800de7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800de7e:	4b12      	ldr	r3, [pc, #72]	; (800dec8 <prvHeapInit+0xb4>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2200      	movs	r2, #0
 800de84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	1ad2      	subs	r2, r2, r3
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800de94:	4b0c      	ldr	r3, [pc, #48]	; (800dec8 <prvHeapInit+0xb4>)
 800de96:	681a      	ldr	r2, [r3, #0]
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	4a0a      	ldr	r2, [pc, #40]	; (800decc <prvHeapInit+0xb8>)
 800dea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	685b      	ldr	r3, [r3, #4]
 800dea8:	4a09      	ldr	r2, [pc, #36]	; (800ded0 <prvHeapInit+0xbc>)
 800deaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800deac:	4b09      	ldr	r3, [pc, #36]	; (800ded4 <prvHeapInit+0xc0>)
 800deae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800deb2:	601a      	str	r2, [r3, #0]
}
 800deb4:	bf00      	nop
 800deb6:	3714      	adds	r7, #20
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr
 800dec0:	20008df8 	.word	0x20008df8
 800dec4:	20010328 	.word	0x20010328
 800dec8:	20010330 	.word	0x20010330
 800decc:	20010338 	.word	0x20010338
 800ded0:	20010334 	.word	0x20010334
 800ded4:	20010344 	.word	0x20010344

0800ded8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ded8:	b480      	push	{r7}
 800deda:	b085      	sub	sp, #20
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dee0:	4b28      	ldr	r3, [pc, #160]	; (800df84 <prvInsertBlockIntoFreeList+0xac>)
 800dee2:	60fb      	str	r3, [r7, #12]
 800dee4:	e002      	b.n	800deec <prvInsertBlockIntoFreeList+0x14>
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	60fb      	str	r3, [r7, #12]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	687a      	ldr	r2, [r7, #4]
 800def2:	429a      	cmp	r2, r3
 800def4:	d8f7      	bhi.n	800dee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	68ba      	ldr	r2, [r7, #8]
 800df00:	4413      	add	r3, r2
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	429a      	cmp	r2, r3
 800df06:	d108      	bne.n	800df1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	685a      	ldr	r2, [r3, #4]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	441a      	add	r2, r3
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	68ba      	ldr	r2, [r7, #8]
 800df24:	441a      	add	r2, r3
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d118      	bne.n	800df60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	4b15      	ldr	r3, [pc, #84]	; (800df88 <prvInsertBlockIntoFreeList+0xb0>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	429a      	cmp	r2, r3
 800df38:	d00d      	beq.n	800df56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	685a      	ldr	r2, [r3, #4]
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	441a      	add	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	681a      	ldr	r2, [r3, #0]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	601a      	str	r2, [r3, #0]
 800df54:	e008      	b.n	800df68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800df56:	4b0c      	ldr	r3, [pc, #48]	; (800df88 <prvInsertBlockIntoFreeList+0xb0>)
 800df58:	681a      	ldr	r2, [r3, #0]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	601a      	str	r2, [r3, #0]
 800df5e:	e003      	b.n	800df68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800df68:	68fa      	ldr	r2, [r7, #12]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d002      	beq.n	800df76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df76:	bf00      	nop
 800df78:	3714      	adds	r7, #20
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	20010328 	.word	0x20010328
 800df88:	20010330 	.word	0x20010330

0800df8c <rcl_get_zero_initialized_init_options>:
 800df8c:	2000      	movs	r0, #0
 800df8e:	4770      	bx	lr

0800df90 <rcl_init_options_init>:
 800df90:	b084      	sub	sp, #16
 800df92:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df94:	b091      	sub	sp, #68	; 0x44
 800df96:	af17      	add	r7, sp, #92	; 0x5c
 800df98:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800df9c:	2800      	cmp	r0, #0
 800df9e:	d044      	beq.n	800e02a <rcl_init_options_init+0x9a>
 800dfa0:	6803      	ldr	r3, [r0, #0]
 800dfa2:	4606      	mov	r6, r0
 800dfa4:	b133      	cbz	r3, 800dfb4 <rcl_init_options_init+0x24>
 800dfa6:	2464      	movs	r4, #100	; 0x64
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	b011      	add	sp, #68	; 0x44
 800dfac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dfb0:	b004      	add	sp, #16
 800dfb2:	4770      	bx	lr
 800dfb4:	4638      	mov	r0, r7
 800dfb6:	f001 f8f7 	bl	800f1a8 <rcutils_allocator_is_valid>
 800dfba:	2800      	cmp	r0, #0
 800dfbc:	d035      	beq.n	800e02a <rcl_init_options_init+0x9a>
 800dfbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dfc0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800dfc2:	2050      	movs	r0, #80	; 0x50
 800dfc4:	4798      	blx	r3
 800dfc6:	4604      	mov	r4, r0
 800dfc8:	6030      	str	r0, [r6, #0]
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	d02f      	beq.n	800e02e <rcl_init_options_init+0x9e>
 800dfce:	46bc      	mov	ip, r7
 800dfd0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dfd4:	4625      	mov	r5, r4
 800dfd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dfd8:	f8dc 3000 	ldr.w	r3, [ip]
 800dfdc:	602b      	str	r3, [r5, #0]
 800dfde:	a802      	add	r0, sp, #8
 800dfe0:	ad02      	add	r5, sp, #8
 800dfe2:	f001 fb71 	bl	800f6c8 <rmw_get_zero_initialized_init_options>
 800dfe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfe8:	3418      	adds	r4, #24
 800dfea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dfec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dff4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dff8:	6833      	ldr	r3, [r6, #0]
 800dffa:	e884 0003 	stmia.w	r4, {r0, r1}
 800dffe:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800e002:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e006:	f103 0018 	add.w	r0, r3, #24
 800e00a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800e00e:	f001 fc23 	bl	800f858 <rmw_init_options_init>
 800e012:	4604      	mov	r4, r0
 800e014:	2800      	cmp	r0, #0
 800e016:	d0c7      	beq.n	800dfa8 <rcl_init_options_init+0x18>
 800e018:	6830      	ldr	r0, [r6, #0]
 800e01a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e01c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e01e:	4798      	blx	r3
 800e020:	4620      	mov	r0, r4
 800e022:	f007 f9b9 	bl	8015398 <rcl_convert_rmw_ret_to_rcl_ret>
 800e026:	4604      	mov	r4, r0
 800e028:	e7be      	b.n	800dfa8 <rcl_init_options_init+0x18>
 800e02a:	240b      	movs	r4, #11
 800e02c:	e7bc      	b.n	800dfa8 <rcl_init_options_init+0x18>
 800e02e:	240a      	movs	r4, #10
 800e030:	e7ba      	b.n	800dfa8 <rcl_init_options_init+0x18>
 800e032:	bf00      	nop

0800e034 <rcl_init_options_fini>:
 800e034:	b570      	push	{r4, r5, r6, lr}
 800e036:	b086      	sub	sp, #24
 800e038:	b1c0      	cbz	r0, 800e06c <rcl_init_options_fini+0x38>
 800e03a:	6804      	ldr	r4, [r0, #0]
 800e03c:	4606      	mov	r6, r0
 800e03e:	b1ac      	cbz	r4, 800e06c <rcl_init_options_fini+0x38>
 800e040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e042:	ad01      	add	r5, sp, #4
 800e044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e046:	6823      	ldr	r3, [r4, #0]
 800e048:	602b      	str	r3, [r5, #0]
 800e04a:	a801      	add	r0, sp, #4
 800e04c:	f001 f8ac 	bl	800f1a8 <rcutils_allocator_is_valid>
 800e050:	b160      	cbz	r0, 800e06c <rcl_init_options_fini+0x38>
 800e052:	6830      	ldr	r0, [r6, #0]
 800e054:	3018      	adds	r0, #24
 800e056:	f001 fc9b 	bl	800f990 <rmw_init_options_fini>
 800e05a:	4604      	mov	r4, r0
 800e05c:	b950      	cbnz	r0, 800e074 <rcl_init_options_fini+0x40>
 800e05e:	6830      	ldr	r0, [r6, #0]
 800e060:	9b02      	ldr	r3, [sp, #8]
 800e062:	9905      	ldr	r1, [sp, #20]
 800e064:	4798      	blx	r3
 800e066:	4620      	mov	r0, r4
 800e068:	b006      	add	sp, #24
 800e06a:	bd70      	pop	{r4, r5, r6, pc}
 800e06c:	240b      	movs	r4, #11
 800e06e:	4620      	mov	r0, r4
 800e070:	b006      	add	sp, #24
 800e072:	bd70      	pop	{r4, r5, r6, pc}
 800e074:	f007 f990 	bl	8015398 <rcl_convert_rmw_ret_to_rcl_ret>
 800e078:	4604      	mov	r4, r0
 800e07a:	e7f8      	b.n	800e06e <rcl_init_options_fini+0x3a>

0800e07c <rcl_init_options_copy>:
 800e07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e080:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 800e084:	2800      	cmp	r0, #0
 800e086:	d067      	beq.n	800e158 <rcl_init_options_copy+0xdc>
 800e088:	6806      	ldr	r6, [r0, #0]
 800e08a:	4605      	mov	r5, r0
 800e08c:	2e00      	cmp	r6, #0
 800e08e:	d063      	beq.n	800e158 <rcl_init_options_copy+0xdc>
 800e090:	460c      	mov	r4, r1
 800e092:	2900      	cmp	r1, #0
 800e094:	d060      	beq.n	800e158 <rcl_init_options_copy+0xdc>
 800e096:	680b      	ldr	r3, [r1, #0]
 800e098:	b12b      	cbz	r3, 800e0a6 <rcl_init_options_copy+0x2a>
 800e09a:	2664      	movs	r6, #100	; 0x64
 800e09c:	4630      	mov	r0, r6
 800e09e:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 800e0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e0a8:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800e0ac:	4647      	mov	r7, r8
 800e0ae:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e0b0:	4640      	mov	r0, r8
 800e0b2:	6833      	ldr	r3, [r6, #0]
 800e0b4:	603b      	str	r3, [r7, #0]
 800e0b6:	f001 f877 	bl	800f1a8 <rcutils_allocator_is_valid>
 800e0ba:	2800      	cmp	r0, #0
 800e0bc:	d04c      	beq.n	800e158 <rcl_init_options_copy+0xdc>
 800e0be:	f8d8 3000 	ldr.w	r3, [r8]
 800e0c2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e0c6:	2050      	movs	r0, #80	; 0x50
 800e0c8:	4798      	blx	r3
 800e0ca:	4606      	mov	r6, r0
 800e0cc:	6020      	str	r0, [r4, #0]
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	d07c      	beq.n	800e1cc <rcl_init_options_copy+0x150>
 800e0d2:	46c4      	mov	ip, r8
 800e0d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e0d8:	4637      	mov	r7, r6
 800e0da:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e0dc:	f8dc 3000 	ldr.w	r3, [ip]
 800e0e0:	603b      	str	r3, [r7, #0]
 800e0e2:	a802      	add	r0, sp, #8
 800e0e4:	af02      	add	r7, sp, #8
 800e0e6:	f001 faef 	bl	800f6c8 <rmw_get_zero_initialized_init_options>
 800e0ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e0ec:	3618      	adds	r6, #24
 800e0ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e0f0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e0f2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e0f4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e0f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e0f8:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e0fc:	e886 0003 	stmia.w	r6, {r0, r1}
 800e100:	ab13      	add	r3, sp, #76	; 0x4c
 800e102:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e106:	6823      	ldr	r3, [r4, #0]
 800e108:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e10c:	f103 0018 	add.w	r0, r3, #24
 800e110:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800e114:	f001 fba0 	bl	800f858 <rmw_init_options_init>
 800e118:	4606      	mov	r6, r0
 800e11a:	bb18      	cbnz	r0, 800e164 <rcl_init_options_copy+0xe8>
 800e11c:	682f      	ldr	r7, [r5, #0]
 800e11e:	f8d4 c000 	ldr.w	ip, [r4]
 800e122:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e124:	4666      	mov	r6, ip
 800e126:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	6033      	str	r3, [r6, #0]
 800e12c:	f10c 0018 	add.w	r0, ip, #24
 800e130:	f001 fc2e 	bl	800f990 <rmw_init_options_fini>
 800e134:	4607      	mov	r7, r0
 800e136:	b310      	cbz	r0, 800e17e <rcl_init_options_copy+0x102>
 800e138:	4640      	mov	r0, r8
 800e13a:	f001 f8ff 	bl	800f33c <rcutils_get_error_string>
 800e13e:	f001 f925 	bl	800f38c <rcutils_reset_error>
 800e142:	4620      	mov	r0, r4
 800e144:	f7ff ff76 	bl	800e034 <rcl_init_options_fini>
 800e148:	4606      	mov	r6, r0
 800e14a:	2800      	cmp	r0, #0
 800e14c:	d1a6      	bne.n	800e09c <rcl_init_options_copy+0x20>
 800e14e:	4638      	mov	r0, r7
 800e150:	f007 f922 	bl	8015398 <rcl_convert_rmw_ret_to_rcl_ret>
 800e154:	4606      	mov	r6, r0
 800e156:	e7a1      	b.n	800e09c <rcl_init_options_copy+0x20>
 800e158:	260b      	movs	r6, #11
 800e15a:	4630      	mov	r0, r6
 800e15c:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 800e160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e164:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e168:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e16c:	6820      	ldr	r0, [r4, #0]
 800e16e:	4798      	blx	r3
 800e170:	4630      	mov	r0, r6
 800e172:	f007 f911 	bl	8015398 <rcl_convert_rmw_ret_to_rcl_ret>
 800e176:	4606      	mov	r6, r0
 800e178:	2800      	cmp	r0, #0
 800e17a:	d0cf      	beq.n	800e11c <rcl_init_options_copy+0xa0>
 800e17c:	e78e      	b.n	800e09c <rcl_init_options_copy+0x20>
 800e17e:	a802      	add	r0, sp, #8
 800e180:	ae02      	add	r6, sp, #8
 800e182:	6827      	ldr	r7, [r4, #0]
 800e184:	f001 faa0 	bl	800f6c8 <rmw_get_zero_initialized_init_options>
 800e188:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e18a:	3718      	adds	r7, #24
 800e18c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e18e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e190:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e192:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e194:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e196:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e19a:	682a      	ldr	r2, [r5, #0]
 800e19c:	6823      	ldr	r3, [r4, #0]
 800e19e:	e887 0003 	stmia.w	r7, {r0, r1}
 800e1a2:	f102 0018 	add.w	r0, r2, #24
 800e1a6:	f103 0118 	add.w	r1, r3, #24
 800e1aa:	f001 fbad 	bl	800f908 <rmw_init_options_copy>
 800e1ae:	4606      	mov	r6, r0
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	f43f af73 	beq.w	800e09c <rcl_init_options_copy+0x20>
 800e1b6:	4640      	mov	r0, r8
 800e1b8:	f001 f8c0 	bl	800f33c <rcutils_get_error_string>
 800e1bc:	f001 f8e6 	bl	800f38c <rcutils_reset_error>
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f7ff ff37 	bl	800e034 <rcl_init_options_fini>
 800e1c6:	b118      	cbz	r0, 800e1d0 <rcl_init_options_copy+0x154>
 800e1c8:	4606      	mov	r6, r0
 800e1ca:	e767      	b.n	800e09c <rcl_init_options_copy+0x20>
 800e1cc:	260a      	movs	r6, #10
 800e1ce:	e765      	b.n	800e09c <rcl_init_options_copy+0x20>
 800e1d0:	4630      	mov	r0, r6
 800e1d2:	f007 f8e1 	bl	8015398 <rcl_convert_rmw_ret_to_rcl_ret>
 800e1d6:	4606      	mov	r6, r0
 800e1d8:	e760      	b.n	800e09c <rcl_init_options_copy+0x20>
 800e1da:	bf00      	nop

0800e1dc <rcl_node_get_default_options>:
 800e1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1de:	b087      	sub	sp, #28
 800e1e0:	4607      	mov	r7, r0
 800e1e2:	466d      	mov	r5, sp
 800e1e4:	4668      	mov	r0, sp
 800e1e6:	f000 ffd1 	bl	800f18c <rcutils_get_default_allocator>
 800e1ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1ec:	4c08      	ldr	r4, [pc, #32]	; (800e210 <rcl_node_get_default_options+0x34>)
 800e1ee:	f8d5 c000 	ldr.w	ip, [r5]
 800e1f2:	1d26      	adds	r6, r4, #4
 800e1f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e1f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e1f8:	463d      	mov	r5, r7
 800e1fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e1fc:	f8c6 c000 	str.w	ip, [r6]
 800e200:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e204:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800e208:	4638      	mov	r0, r7
 800e20a:	b007      	add	sp, #28
 800e20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e20e:	bf00      	nop
 800e210:	20000018 	.word	0x20000018

0800e214 <rcl_node_options_copy>:
 800e214:	b1c8      	cbz	r0, 800e24a <rcl_node_options_copy+0x36>
 800e216:	b4f0      	push	{r4, r5, r6, r7}
 800e218:	460f      	mov	r7, r1
 800e21a:	b199      	cbz	r1, 800e244 <rcl_node_options_copy+0x30>
 800e21c:	4288      	cmp	r0, r1
 800e21e:	4606      	mov	r6, r0
 800e220:	d010      	beq.n	800e244 <rcl_node_options_copy+0x30>
 800e222:	4605      	mov	r5, r0
 800e224:	460c      	mov	r4, r1
 800e226:	f855 3b04 	ldr.w	r3, [r5], #4
 800e22a:	f844 3b04 	str.w	r3, [r4], #4
 800e22e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e232:	7e32      	ldrb	r2, [r6, #24]
 800e234:	6829      	ldr	r1, [r5, #0]
 800e236:	7e73      	ldrb	r3, [r6, #25]
 800e238:	6021      	str	r1, [r4, #0]
 800e23a:	2000      	movs	r0, #0
 800e23c:	763a      	strb	r2, [r7, #24]
 800e23e:	767b      	strb	r3, [r7, #25]
 800e240:	bcf0      	pop	{r4, r5, r6, r7}
 800e242:	4770      	bx	lr
 800e244:	200b      	movs	r0, #11
 800e246:	bcf0      	pop	{r4, r5, r6, r7}
 800e248:	4770      	bx	lr
 800e24a:	200b      	movs	r0, #11
 800e24c:	4770      	bx	lr
 800e24e:	bf00      	nop

0800e250 <rcl_get_zero_initialized_publisher>:
 800e250:	4b01      	ldr	r3, [pc, #4]	; (800e258 <rcl_get_zero_initialized_publisher+0x8>)
 800e252:	6818      	ldr	r0, [r3, #0]
 800e254:	4770      	bx	lr
 800e256:	bf00      	nop
 800e258:	0801ec78 	.word	0x0801ec78

0800e25c <rcl_publisher_init>:
 800e25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e260:	b091      	sub	sp, #68	; 0x44
 800e262:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e264:	b3d7      	cbz	r7, 800e2dc <rcl_publisher_init+0x80>
 800e266:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800e26a:	4604      	mov	r4, r0
 800e26c:	4648      	mov	r0, r9
 800e26e:	4688      	mov	r8, r1
 800e270:	4616      	mov	r6, r2
 800e272:	461d      	mov	r5, r3
 800e274:	f000 ff98 	bl	800f1a8 <rcutils_allocator_is_valid>
 800e278:	b380      	cbz	r0, 800e2dc <rcl_publisher_init+0x80>
 800e27a:	b37c      	cbz	r4, 800e2dc <rcl_publisher_init+0x80>
 800e27c:	f8d4 a000 	ldr.w	sl, [r4]
 800e280:	f1ba 0f00 	cmp.w	sl, #0
 800e284:	d004      	beq.n	800e290 <rcl_publisher_init+0x34>
 800e286:	2564      	movs	r5, #100	; 0x64
 800e288:	4628      	mov	r0, r5
 800e28a:	b011      	add	sp, #68	; 0x44
 800e28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e290:	4640      	mov	r0, r8
 800e292:	f007 fd41 	bl	8015d18 <rcl_node_is_valid>
 800e296:	b330      	cbz	r0, 800e2e6 <rcl_publisher_init+0x8a>
 800e298:	b306      	cbz	r6, 800e2dc <rcl_publisher_init+0x80>
 800e29a:	b1fd      	cbz	r5, 800e2dc <rcl_publisher_init+0x80>
 800e29c:	46ce      	mov	lr, r9
 800e29e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e2a2:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800e2a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e2aa:	f8de 3000 	ldr.w	r3, [lr]
 800e2ae:	f8cc 3000 	str.w	r3, [ip]
 800e2b2:	f001 f889 	bl	800f3c8 <rcutils_get_zero_initialized_string_map>
 800e2b6:	ab10      	add	r3, sp, #64	; 0x40
 800e2b8:	4684      	mov	ip, r0
 800e2ba:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800e2be:	f8cd c020 	str.w	ip, [sp, #32]
 800e2c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e2c6:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800e2ca:	4651      	mov	r1, sl
 800e2cc:	a808      	add	r0, sp, #32
 800e2ce:	f001 f8f5 	bl	800f4bc <rcutils_string_map_init>
 800e2d2:	b150      	cbz	r0, 800e2ea <rcl_publisher_init+0x8e>
 800e2d4:	280a      	cmp	r0, #10
 800e2d6:	d013      	beq.n	800e300 <rcl_publisher_init+0xa4>
 800e2d8:	2501      	movs	r5, #1
 800e2da:	e7d5      	b.n	800e288 <rcl_publisher_init+0x2c>
 800e2dc:	250b      	movs	r5, #11
 800e2de:	4628      	mov	r0, r5
 800e2e0:	b011      	add	sp, #68	; 0x44
 800e2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e6:	25c8      	movs	r5, #200	; 0xc8
 800e2e8:	e7ce      	b.n	800e288 <rcl_publisher_init+0x2c>
 800e2ea:	a808      	add	r0, sp, #32
 800e2ec:	f007 fa5c 	bl	80157a8 <rcl_get_default_topic_name_substitutions>
 800e2f0:	4682      	mov	sl, r0
 800e2f2:	b138      	cbz	r0, 800e304 <rcl_publisher_init+0xa8>
 800e2f4:	a808      	add	r0, sp, #32
 800e2f6:	f001 f921 	bl	800f53c <rcutils_string_map_fini>
 800e2fa:	f1ba 0f0a 	cmp.w	sl, #10
 800e2fe:	d1eb      	bne.n	800e2d8 <rcl_publisher_init+0x7c>
 800e300:	250a      	movs	r5, #10
 800e302:	e7c1      	b.n	800e288 <rcl_publisher_init+0x2c>
 800e304:	4640      	mov	r0, r8
 800e306:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e30a:	f007 fd0f 	bl	8015d2c <rcl_node_get_name>
 800e30e:	4682      	mov	sl, r0
 800e310:	4640      	mov	r0, r8
 800e312:	f007 fd13 	bl	8015d3c <rcl_node_get_namespace>
 800e316:	4686      	mov	lr, r0
 800e318:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800e31c:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800e320:	46ec      	mov	ip, sp
 800e322:	f8cd b014 	str.w	fp, [sp, #20]
 800e326:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e32a:	f8d9 3000 	ldr.w	r3, [r9]
 800e32e:	f8cc 3000 	str.w	r3, [ip]
 800e332:	4628      	mov	r0, r5
 800e334:	4651      	mov	r1, sl
 800e336:	4672      	mov	r2, lr
 800e338:	ab08      	add	r3, sp, #32
 800e33a:	f007 f8cf 	bl	80154dc <rcl_expand_topic_name>
 800e33e:	4605      	mov	r5, r0
 800e340:	a808      	add	r0, sp, #32
 800e342:	f001 f8fb 	bl	800f53c <rcutils_string_map_fini>
 800e346:	b920      	cbnz	r0, 800e352 <rcl_publisher_init+0xf6>
 800e348:	b15d      	cbz	r5, 800e362 <rcl_publisher_init+0x106>
 800e34a:	2d67      	cmp	r5, #103	; 0x67
 800e34c:	d002      	beq.n	800e354 <rcl_publisher_init+0xf8>
 800e34e:	2d69      	cmp	r5, #105	; 0x69
 800e350:	d05f      	beq.n	800e412 <rcl_publisher_init+0x1b6>
 800e352:	2501      	movs	r5, #1
 800e354:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e356:	2800      	cmp	r0, #0
 800e358:	d096      	beq.n	800e288 <rcl_publisher_init+0x2c>
 800e35a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e35c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e35e:	4798      	blx	r3
 800e360:	e792      	b.n	800e288 <rcl_publisher_init+0x2c>
 800e362:	4640      	mov	r0, r8
 800e364:	f007 fcf2 	bl	8015d4c <rcl_node_get_options>
 800e368:	2800      	cmp	r0, #0
 800e36a:	d0f2      	beq.n	800e352 <rcl_publisher_init+0xf6>
 800e36c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e36e:	f7f1 ff39 	bl	80001e4 <strlen>
 800e372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e374:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e376:	3001      	adds	r0, #1
 800e378:	4798      	blx	r3
 800e37a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e37c:	9107      	str	r1, [sp, #28]
 800e37e:	4681      	mov	r9, r0
 800e380:	4608      	mov	r0, r1
 800e382:	f7f1 ff2f 	bl	80001e4 <strlen>
 800e386:	9907      	ldr	r1, [sp, #28]
 800e388:	1c42      	adds	r2, r0, #1
 800e38a:	4648      	mov	r0, r9
 800e38c:	f00b f9fa 	bl	8019784 <memcpy>
 800e390:	462a      	mov	r2, r5
 800e392:	4648      	mov	r0, r9
 800e394:	a90a      	add	r1, sp, #40	; 0x28
 800e396:	f001 f9c3 	bl	800f720 <rmw_validate_full_topic_name>
 800e39a:	2800      	cmp	r0, #0
 800e39c:	d137      	bne.n	800e40e <rcl_publisher_init+0x1b2>
 800e39e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d138      	bne.n	800e416 <rcl_publisher_init+0x1ba>
 800e3a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e3a8:	20c0      	movs	r0, #192	; 0xc0
 800e3aa:	4798      	blx	r3
 800e3ac:	6020      	str	r0, [r4, #0]
 800e3ae:	b3a0      	cbz	r0, 800e41a <rcl_publisher_init+0x1be>
 800e3b0:	4640      	mov	r0, r8
 800e3b2:	f007 fcd3 	bl	8015d5c <rcl_node_get_rmw_handle>
 800e3b6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e3ba:	9300      	str	r3, [sp, #0]
 800e3bc:	4631      	mov	r1, r6
 800e3be:	463b      	mov	r3, r7
 800e3c0:	464a      	mov	r2, r9
 800e3c2:	6825      	ldr	r5, [r4, #0]
 800e3c4:	f001 fdea 	bl	800ff9c <rmw_create_publisher>
 800e3c8:	6821      	ldr	r1, [r4, #0]
 800e3ca:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800e3ce:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800e3d2:	b388      	cbz	r0, 800e438 <rcl_publisher_init+0x1dc>
 800e3d4:	3168      	adds	r1, #104	; 0x68
 800e3d6:	f001 fec7 	bl	8010168 <rmw_publisher_get_actual_qos>
 800e3da:	6823      	ldr	r3, [r4, #0]
 800e3dc:	4605      	mov	r5, r0
 800e3de:	b9f0      	cbnz	r0, 800e41e <rcl_publisher_init+0x1c2>
 800e3e0:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800e3e4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	2268      	movs	r2, #104	; 0x68
 800e3ec:	4639      	mov	r1, r7
 800e3ee:	f00b f9c9 	bl	8019784 <memcpy>
 800e3f2:	f8d8 2000 	ldr.w	r2, [r8]
 800e3f6:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800e3fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3fc:	b110      	cbz	r0, 800e404 <rcl_publisher_init+0x1a8>
 800e3fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e400:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e402:	4798      	blx	r3
 800e404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e406:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e408:	4648      	mov	r0, r9
 800e40a:	4798      	blx	r3
 800e40c:	e73c      	b.n	800e288 <rcl_publisher_init+0x2c>
 800e40e:	2501      	movs	r5, #1
 800e410:	e7f3      	b.n	800e3fa <rcl_publisher_init+0x19e>
 800e412:	2567      	movs	r5, #103	; 0x67
 800e414:	e79e      	b.n	800e354 <rcl_publisher_init+0xf8>
 800e416:	2567      	movs	r5, #103	; 0x67
 800e418:	e7ef      	b.n	800e3fa <rcl_publisher_init+0x19e>
 800e41a:	250a      	movs	r5, #10
 800e41c:	e7ed      	b.n	800e3fa <rcl_publisher_init+0x19e>
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d0f5      	beq.n	800e40e <rcl_publisher_init+0x1b2>
 800e422:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e426:	b13b      	cbz	r3, 800e438 <rcl_publisher_init+0x1dc>
 800e428:	4640      	mov	r0, r8
 800e42a:	f007 fc97 	bl	8015d5c <rcl_node_get_rmw_handle>
 800e42e:	6823      	ldr	r3, [r4, #0]
 800e430:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800e434:	f001 fe9a 	bl	801016c <rmw_destroy_publisher>
 800e438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e43a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e43c:	6820      	ldr	r0, [r4, #0]
 800e43e:	4798      	blx	r3
 800e440:	2300      	movs	r3, #0
 800e442:	6023      	str	r3, [r4, #0]
 800e444:	2501      	movs	r5, #1
 800e446:	e7d8      	b.n	800e3fa <rcl_publisher_init+0x19e>

0800e448 <rcl_publisher_get_default_options>:
 800e448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e44a:	4f0e      	ldr	r7, [pc, #56]	; (800e484 <rcl_publisher_get_default_options+0x3c>)
 800e44c:	490e      	ldr	r1, [pc, #56]	; (800e488 <rcl_publisher_get_default_options+0x40>)
 800e44e:	b087      	sub	sp, #28
 800e450:	4606      	mov	r6, r0
 800e452:	2250      	movs	r2, #80	; 0x50
 800e454:	4638      	mov	r0, r7
 800e456:	f00b f995 	bl	8019784 <memcpy>
 800e45a:	466c      	mov	r4, sp
 800e45c:	4668      	mov	r0, sp
 800e45e:	f000 fe95 	bl	800f18c <rcutils_get_default_allocator>
 800e462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e464:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800e468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e46a:	6823      	ldr	r3, [r4, #0]
 800e46c:	602b      	str	r3, [r5, #0]
 800e46e:	f001 f93b 	bl	800f6e8 <rmw_get_default_publisher_options>
 800e472:	4639      	mov	r1, r7
 800e474:	6678      	str	r0, [r7, #100]	; 0x64
 800e476:	2268      	movs	r2, #104	; 0x68
 800e478:	4630      	mov	r0, r6
 800e47a:	f00b f983 	bl	8019784 <memcpy>
 800e47e:	4630      	mov	r0, r6
 800e480:	b007      	add	sp, #28
 800e482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e484:	20010348 	.word	0x20010348
 800e488:	0801ec80 	.word	0x0801ec80

0800e48c <rcl_publish>:
 800e48c:	b1f8      	cbz	r0, 800e4ce <rcl_publish+0x42>
 800e48e:	6803      	ldr	r3, [r0, #0]
 800e490:	b570      	push	{r4, r5, r6, lr}
 800e492:	4604      	mov	r4, r0
 800e494:	b1b3      	cbz	r3, 800e4c4 <rcl_publish+0x38>
 800e496:	4616      	mov	r6, r2
 800e498:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800e49c:	b192      	cbz	r2, 800e4c4 <rcl_publish+0x38>
 800e49e:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800e4a2:	460d      	mov	r5, r1
 800e4a4:	f006 ff9c 	bl	80153e0 <rcl_context_is_valid>
 800e4a8:	b160      	cbz	r0, 800e4c4 <rcl_publish+0x38>
 800e4aa:	6823      	ldr	r3, [r4, #0]
 800e4ac:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800e4b0:	b140      	cbz	r0, 800e4c4 <rcl_publish+0x38>
 800e4b2:	b155      	cbz	r5, 800e4ca <rcl_publish+0x3e>
 800e4b4:	4632      	mov	r2, r6
 800e4b6:	4629      	mov	r1, r5
 800e4b8:	f001 fd10 	bl	800fedc <rmw_publish>
 800e4bc:	3800      	subs	r0, #0
 800e4be:	bf18      	it	ne
 800e4c0:	2001      	movne	r0, #1
 800e4c2:	bd70      	pop	{r4, r5, r6, pc}
 800e4c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800e4c8:	bd70      	pop	{r4, r5, r6, pc}
 800e4ca:	200b      	movs	r0, #11
 800e4cc:	bd70      	pop	{r4, r5, r6, pc}
 800e4ce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800e4d2:	4770      	bx	lr

0800e4d4 <rcl_get_zero_initialized_subscription>:
 800e4d4:	4b01      	ldr	r3, [pc, #4]	; (800e4dc <rcl_get_zero_initialized_subscription+0x8>)
 800e4d6:	6818      	ldr	r0, [r3, #0]
 800e4d8:	4770      	bx	lr
 800e4da:	bf00      	nop
 800e4dc:	0801ecd0 	.word	0x0801ecd0

0800e4e0 <rcl_subscription_init>:
 800e4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e4:	b091      	sub	sp, #68	; 0x44
 800e4e6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e4e8:	b1d7      	cbz	r7, 800e520 <rcl_subscription_init+0x40>
 800e4ea:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800e4ee:	4604      	mov	r4, r0
 800e4f0:	4648      	mov	r0, r9
 800e4f2:	4688      	mov	r8, r1
 800e4f4:	4616      	mov	r6, r2
 800e4f6:	461d      	mov	r5, r3
 800e4f8:	f000 fe56 	bl	800f1a8 <rcutils_allocator_is_valid>
 800e4fc:	b180      	cbz	r0, 800e520 <rcl_subscription_init+0x40>
 800e4fe:	b17c      	cbz	r4, 800e520 <rcl_subscription_init+0x40>
 800e500:	4640      	mov	r0, r8
 800e502:	f007 fc09 	bl	8015d18 <rcl_node_is_valid>
 800e506:	b380      	cbz	r0, 800e56a <rcl_subscription_init+0x8a>
 800e508:	b156      	cbz	r6, 800e520 <rcl_subscription_init+0x40>
 800e50a:	b14d      	cbz	r5, 800e520 <rcl_subscription_init+0x40>
 800e50c:	f8d4 a000 	ldr.w	sl, [r4]
 800e510:	f1ba 0f00 	cmp.w	sl, #0
 800e514:	d009      	beq.n	800e52a <rcl_subscription_init+0x4a>
 800e516:	2564      	movs	r5, #100	; 0x64
 800e518:	4628      	mov	r0, r5
 800e51a:	b011      	add	sp, #68	; 0x44
 800e51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e520:	250b      	movs	r5, #11
 800e522:	4628      	mov	r0, r5
 800e524:	b011      	add	sp, #68	; 0x44
 800e526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e52a:	46ce      	mov	lr, r9
 800e52c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e530:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800e534:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e538:	f8de 3000 	ldr.w	r3, [lr]
 800e53c:	f8cc 3000 	str.w	r3, [ip]
 800e540:	f000 ff42 	bl	800f3c8 <rcutils_get_zero_initialized_string_map>
 800e544:	ab10      	add	r3, sp, #64	; 0x40
 800e546:	4684      	mov	ip, r0
 800e548:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800e54c:	f8cd c020 	str.w	ip, [sp, #32]
 800e550:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e554:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800e558:	4651      	mov	r1, sl
 800e55a:	a808      	add	r0, sp, #32
 800e55c:	f000 ffae 	bl	800f4bc <rcutils_string_map_init>
 800e560:	b140      	cbz	r0, 800e574 <rcl_subscription_init+0x94>
 800e562:	280a      	cmp	r0, #10
 800e564:	d011      	beq.n	800e58a <rcl_subscription_init+0xaa>
 800e566:	2501      	movs	r5, #1
 800e568:	e7db      	b.n	800e522 <rcl_subscription_init+0x42>
 800e56a:	25c8      	movs	r5, #200	; 0xc8
 800e56c:	4628      	mov	r0, r5
 800e56e:	b011      	add	sp, #68	; 0x44
 800e570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e574:	a808      	add	r0, sp, #32
 800e576:	f007 f917 	bl	80157a8 <rcl_get_default_topic_name_substitutions>
 800e57a:	4682      	mov	sl, r0
 800e57c:	b138      	cbz	r0, 800e58e <rcl_subscription_init+0xae>
 800e57e:	a808      	add	r0, sp, #32
 800e580:	f000 ffdc 	bl	800f53c <rcutils_string_map_fini>
 800e584:	f1ba 0f0a 	cmp.w	sl, #10
 800e588:	d1ed      	bne.n	800e566 <rcl_subscription_init+0x86>
 800e58a:	250a      	movs	r5, #10
 800e58c:	e7c9      	b.n	800e522 <rcl_subscription_init+0x42>
 800e58e:	4640      	mov	r0, r8
 800e590:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e594:	f007 fbca 	bl	8015d2c <rcl_node_get_name>
 800e598:	4682      	mov	sl, r0
 800e59a:	4640      	mov	r0, r8
 800e59c:	f007 fbce 	bl	8015d3c <rcl_node_get_namespace>
 800e5a0:	4686      	mov	lr, r0
 800e5a2:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800e5a6:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800e5aa:	46ec      	mov	ip, sp
 800e5ac:	f8cd b014 	str.w	fp, [sp, #20]
 800e5b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5b4:	f8d9 3000 	ldr.w	r3, [r9]
 800e5b8:	f8cc 3000 	str.w	r3, [ip]
 800e5bc:	4628      	mov	r0, r5
 800e5be:	4651      	mov	r1, sl
 800e5c0:	4672      	mov	r2, lr
 800e5c2:	ab08      	add	r3, sp, #32
 800e5c4:	f006 ff8a 	bl	80154dc <rcl_expand_topic_name>
 800e5c8:	4605      	mov	r5, r0
 800e5ca:	a808      	add	r0, sp, #32
 800e5cc:	f000 ffb6 	bl	800f53c <rcutils_string_map_fini>
 800e5d0:	b920      	cbnz	r0, 800e5dc <rcl_subscription_init+0xfc>
 800e5d2:	b15d      	cbz	r5, 800e5ec <rcl_subscription_init+0x10c>
 800e5d4:	2d67      	cmp	r5, #103	; 0x67
 800e5d6:	d002      	beq.n	800e5de <rcl_subscription_init+0xfe>
 800e5d8:	2d69      	cmp	r5, #105	; 0x69
 800e5da:	d05a      	beq.n	800e692 <rcl_subscription_init+0x1b2>
 800e5dc:	2501      	movs	r5, #1
 800e5de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	d09e      	beq.n	800e522 <rcl_subscription_init+0x42>
 800e5e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5e6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e5e8:	4798      	blx	r3
 800e5ea:	e79a      	b.n	800e522 <rcl_subscription_init+0x42>
 800e5ec:	4640      	mov	r0, r8
 800e5ee:	f007 fbad 	bl	8015d4c <rcl_node_get_options>
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	d0f2      	beq.n	800e5dc <rcl_subscription_init+0xfc>
 800e5f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5f8:	f7f1 fdf4 	bl	80001e4 <strlen>
 800e5fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5fe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e600:	3001      	adds	r0, #1
 800e602:	4798      	blx	r3
 800e604:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e606:	9107      	str	r1, [sp, #28]
 800e608:	4681      	mov	r9, r0
 800e60a:	4608      	mov	r0, r1
 800e60c:	f7f1 fdea 	bl	80001e4 <strlen>
 800e610:	9907      	ldr	r1, [sp, #28]
 800e612:	1c42      	adds	r2, r0, #1
 800e614:	4648      	mov	r0, r9
 800e616:	f00b f8b5 	bl	8019784 <memcpy>
 800e61a:	462a      	mov	r2, r5
 800e61c:	4648      	mov	r0, r9
 800e61e:	a90a      	add	r1, sp, #40	; 0x28
 800e620:	f001 f87e 	bl	800f720 <rmw_validate_full_topic_name>
 800e624:	2800      	cmp	r0, #0
 800e626:	d132      	bne.n	800e68e <rcl_subscription_init+0x1ae>
 800e628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d133      	bne.n	800e696 <rcl_subscription_init+0x1b6>
 800e62e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e630:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e632:	20c8      	movs	r0, #200	; 0xc8
 800e634:	4798      	blx	r3
 800e636:	6020      	str	r0, [r4, #0]
 800e638:	b378      	cbz	r0, 800e69a <rcl_subscription_init+0x1ba>
 800e63a:	4640      	mov	r0, r8
 800e63c:	f007 fb8e 	bl	8015d5c <rcl_node_get_rmw_handle>
 800e640:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e644:	9300      	str	r3, [sp, #0]
 800e646:	4631      	mov	r1, r6
 800e648:	463b      	mov	r3, r7
 800e64a:	464a      	mov	r2, r9
 800e64c:	6825      	ldr	r5, [r4, #0]
 800e64e:	f001 fe0f 	bl	8010270 <rmw_create_subscription>
 800e652:	6821      	ldr	r1, [r4, #0]
 800e654:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800e658:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800e65c:	b368      	cbz	r0, 800e6ba <rcl_subscription_init+0x1da>
 800e65e:	3170      	adds	r1, #112	; 0x70
 800e660:	f001 fef2 	bl	8010448 <rmw_subscription_get_actual_qos>
 800e664:	4605      	mov	r5, r0
 800e666:	b9d0      	cbnz	r0, 800e69e <rcl_subscription_init+0x1be>
 800e668:	6820      	ldr	r0, [r4, #0]
 800e66a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800e66e:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800e672:	2270      	movs	r2, #112	; 0x70
 800e674:	4639      	mov	r1, r7
 800e676:	f00b f885 	bl	8019784 <memcpy>
 800e67a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e67c:	b110      	cbz	r0, 800e684 <rcl_subscription_init+0x1a4>
 800e67e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e680:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e682:	4798      	blx	r3
 800e684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e686:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e688:	4648      	mov	r0, r9
 800e68a:	4798      	blx	r3
 800e68c:	e749      	b.n	800e522 <rcl_subscription_init+0x42>
 800e68e:	2501      	movs	r5, #1
 800e690:	e7f3      	b.n	800e67a <rcl_subscription_init+0x19a>
 800e692:	2567      	movs	r5, #103	; 0x67
 800e694:	e7a3      	b.n	800e5de <rcl_subscription_init+0xfe>
 800e696:	2567      	movs	r5, #103	; 0x67
 800e698:	e7ef      	b.n	800e67a <rcl_subscription_init+0x19a>
 800e69a:	250a      	movs	r5, #10
 800e69c:	e7ed      	b.n	800e67a <rcl_subscription_init+0x19a>
 800e69e:	6823      	ldr	r3, [r4, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d0f4      	beq.n	800e68e <rcl_subscription_init+0x1ae>
 800e6a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e6a8:	b13b      	cbz	r3, 800e6ba <rcl_subscription_init+0x1da>
 800e6aa:	4640      	mov	r0, r8
 800e6ac:	f007 fb56 	bl	8015d5c <rcl_node_get_rmw_handle>
 800e6b0:	6823      	ldr	r3, [r4, #0]
 800e6b2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800e6b6:	f001 fec9 	bl	801044c <rmw_destroy_subscription>
 800e6ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6bc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e6be:	6820      	ldr	r0, [r4, #0]
 800e6c0:	4798      	blx	r3
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	6023      	str	r3, [r4, #0]
 800e6c6:	2501      	movs	r5, #1
 800e6c8:	e7d7      	b.n	800e67a <rcl_subscription_init+0x19a>
 800e6ca:	bf00      	nop

0800e6cc <rcl_subscription_get_default_options>:
 800e6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6d0:	4f12      	ldr	r7, [pc, #72]	; (800e71c <rcl_subscription_get_default_options+0x50>)
 800e6d2:	4913      	ldr	r1, [pc, #76]	; (800e720 <rcl_subscription_get_default_options+0x54>)
 800e6d4:	b088      	sub	sp, #32
 800e6d6:	4606      	mov	r6, r0
 800e6d8:	2250      	movs	r2, #80	; 0x50
 800e6da:	4638      	mov	r0, r7
 800e6dc:	f00b f852 	bl	8019784 <memcpy>
 800e6e0:	ac02      	add	r4, sp, #8
 800e6e2:	a802      	add	r0, sp, #8
 800e6e4:	f000 fd52 	bl	800f18c <rcutils_get_default_allocator>
 800e6e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e6ea:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800e6ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e6f0:	46e8      	mov	r8, sp
 800e6f2:	6823      	ldr	r3, [r4, #0]
 800e6f4:	602b      	str	r3, [r5, #0]
 800e6f6:	4640      	mov	r0, r8
 800e6f8:	f000 fffc 	bl	800f6f4 <rmw_get_default_subscription_options>
 800e6fc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e700:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e704:	e883 0003 	stmia.w	r3, {r0, r1}
 800e708:	2270      	movs	r2, #112	; 0x70
 800e70a:	4639      	mov	r1, r7
 800e70c:	4630      	mov	r0, r6
 800e70e:	f00b f839 	bl	8019784 <memcpy>
 800e712:	4630      	mov	r0, r6
 800e714:	b008      	add	sp, #32
 800e716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e71a:	bf00      	nop
 800e71c:	200103b0 	.word	0x200103b0
 800e720:	0801ecd8 	.word	0x0801ecd8

0800e724 <rcl_take>:
 800e724:	2800      	cmp	r0, #0
 800e726:	d03f      	beq.n	800e7a8 <rcl_take+0x84>
 800e728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e72c:	4617      	mov	r7, r2
 800e72e:	6802      	ldr	r2, [r0, #0]
 800e730:	b09d      	sub	sp, #116	; 0x74
 800e732:	4606      	mov	r6, r0
 800e734:	b382      	cbz	r2, 800e798 <rcl_take+0x74>
 800e736:	4699      	mov	r9, r3
 800e738:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800e73c:	b363      	cbz	r3, 800e798 <rcl_take+0x74>
 800e73e:	4688      	mov	r8, r1
 800e740:	b381      	cbz	r1, 800e7a4 <rcl_take+0x80>
 800e742:	2f00      	cmp	r7, #0
 800e744:	d034      	beq.n	800e7b0 <rcl_take+0x8c>
 800e746:	a802      	add	r0, sp, #8
 800e748:	ac02      	add	r4, sp, #8
 800e74a:	f000 ffd7 	bl	800f6fc <rmw_get_zero_initialized_message_info>
 800e74e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e750:	463d      	mov	r5, r7
 800e752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e758:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e75c:	6834      	ldr	r4, [r6, #0]
 800e75e:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 800e762:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800e766:	2400      	movs	r4, #0
 800e768:	463b      	mov	r3, r7
 800e76a:	4630      	mov	r0, r6
 800e76c:	f8cd 9000 	str.w	r9, [sp]
 800e770:	4641      	mov	r1, r8
 800e772:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800e776:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 800e77a:	f001 feb5 	bl	80104e8 <rmw_take_with_info>
 800e77e:	4603      	mov	r3, r0
 800e780:	b9c0      	cbnz	r0, 800e7b4 <rcl_take+0x90>
 800e782:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800e786:	f240 1291 	movw	r2, #401	; 0x191
 800e78a:	2900      	cmp	r1, #0
 800e78c:	bf08      	it	eq
 800e78e:	4613      	moveq	r3, r2
 800e790:	4618      	mov	r0, r3
 800e792:	b01d      	add	sp, #116	; 0x74
 800e794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e798:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800e79c:	4618      	mov	r0, r3
 800e79e:	b01d      	add	sp, #116	; 0x74
 800e7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7a4:	230b      	movs	r3, #11
 800e7a6:	e7f3      	b.n	800e790 <rcl_take+0x6c>
 800e7a8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	4770      	bx	lr
 800e7b0:	af10      	add	r7, sp, #64	; 0x40
 800e7b2:	e7c8      	b.n	800e746 <rcl_take+0x22>
 800e7b4:	f006 fdf0 	bl	8015398 <rcl_convert_rmw_ret_to_rcl_ret>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	e7e9      	b.n	800e790 <rcl_take+0x6c>

0800e7bc <rcl_subscription_get_rmw_handle>:
 800e7bc:	b118      	cbz	r0, 800e7c6 <rcl_subscription_get_rmw_handle+0xa>
 800e7be:	6800      	ldr	r0, [r0, #0]
 800e7c0:	b108      	cbz	r0, 800e7c6 <rcl_subscription_get_rmw_handle+0xa>
 800e7c2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800e7c6:	4770      	bx	lr

0800e7c8 <_rclc_check_for_new_data>:
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d042      	beq.n	800e852 <_rclc_check_for_new_data+0x8a>
 800e7cc:	b510      	push	{r4, lr}
 800e7ce:	7803      	ldrb	r3, [r0, #0]
 800e7d0:	b084      	sub	sp, #16
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	2b08      	cmp	r3, #8
 800e7d6:	d847      	bhi.n	800e868 <_rclc_check_for_new_data+0xa0>
 800e7d8:	e8df f003 	tbb	[pc, r3]
 800e7dc:	17251010 	.word	0x17251010
 800e7e0:	05050517 	.word	0x05050517
 800e7e4:	1e          	.byte	0x1e
 800e7e5:	00          	.byte	0x00
 800e7e6:	6a0b      	ldr	r3, [r1, #32]
 800e7e8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e7ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e7ee:	b118      	cbz	r0, 800e7f8 <_rclc_check_for_new_data+0x30>
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800e7f6:	2000      	movs	r0, #0
 800e7f8:	b004      	add	sp, #16
 800e7fa:	bd10      	pop	{r4, pc}
 800e7fc:	680b      	ldr	r3, [r1, #0]
 800e7fe:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e800:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e804:	2800      	cmp	r0, #0
 800e806:	d1f3      	bne.n	800e7f0 <_rclc_check_for_new_data+0x28>
 800e808:	e7f6      	b.n	800e7f8 <_rclc_check_for_new_data+0x30>
 800e80a:	698b      	ldr	r3, [r1, #24]
 800e80c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e80e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e812:	2800      	cmp	r0, #0
 800e814:	d1ec      	bne.n	800e7f0 <_rclc_check_for_new_data+0x28>
 800e816:	e7ef      	b.n	800e7f8 <_rclc_check_for_new_data+0x30>
 800e818:	688b      	ldr	r3, [r1, #8]
 800e81a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e81c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e820:	2800      	cmp	r0, #0
 800e822:	d1e5      	bne.n	800e7f0 <_rclc_check_for_new_data+0x28>
 800e824:	e7e8      	b.n	800e7f8 <_rclc_check_for_new_data+0x30>
 800e826:	690b      	ldr	r3, [r1, #16]
 800e828:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e82a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e82e:	2800      	cmp	r0, #0
 800e830:	d0e2      	beq.n	800e7f8 <_rclc_check_for_new_data+0x30>
 800e832:	2300      	movs	r3, #0
 800e834:	6860      	ldr	r0, [r4, #4]
 800e836:	f88d 300f 	strb.w	r3, [sp, #15]
 800e83a:	f10d 010f 	add.w	r1, sp, #15
 800e83e:	f007 ff2d 	bl	801669c <rcl_timer_is_ready>
 800e842:	b960      	cbnz	r0, 800e85e <_rclc_check_for_new_data+0x96>
 800e844:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800e848:	b12b      	cbz	r3, 800e856 <_rclc_check_for_new_data+0x8e>
 800e84a:	2301      	movs	r3, #1
 800e84c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800e850:	e7d2      	b.n	800e7f8 <_rclc_check_for_new_data+0x30>
 800e852:	200b      	movs	r0, #11
 800e854:	4770      	bx	lr
 800e856:	f000 fd99 	bl	800f38c <rcutils_reset_error>
 800e85a:	2001      	movs	r0, #1
 800e85c:	e7cc      	b.n	800e7f8 <_rclc_check_for_new_data+0x30>
 800e85e:	9001      	str	r0, [sp, #4]
 800e860:	f000 fd94 	bl	800f38c <rcutils_reset_error>
 800e864:	9801      	ldr	r0, [sp, #4]
 800e866:	e7c7      	b.n	800e7f8 <_rclc_check_for_new_data+0x30>
 800e868:	2001      	movs	r0, #1
 800e86a:	e7c5      	b.n	800e7f8 <_rclc_check_for_new_data+0x30>

0800e86c <_rclc_take_new_data>:
 800e86c:	2800      	cmp	r0, #0
 800e86e:	d049      	beq.n	800e904 <_rclc_take_new_data+0x98>
 800e870:	b510      	push	{r4, lr}
 800e872:	7803      	ldrb	r3, [r0, #0]
 800e874:	b08e      	sub	sp, #56	; 0x38
 800e876:	4604      	mov	r4, r0
 800e878:	2b08      	cmp	r3, #8
 800e87a:	d84a      	bhi.n	800e912 <_rclc_take_new_data+0xa6>
 800e87c:	e8df f003 	tbb	[pc, r3]
 800e880:	2b121515 	.word	0x2b121515
 800e884:	0505052b 	.word	0x0505052b
 800e888:	12          	.byte	0x12
 800e889:	00          	.byte	0x00
 800e88a:	6a0b      	ldr	r3, [r1, #32]
 800e88c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e88e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e892:	b13b      	cbz	r3, 800e8a4 <_rclc_take_new_data+0x38>
 800e894:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800e898:	f104 0110 	add.w	r1, r4, #16
 800e89c:	f007 fb5e 	bl	8015f5c <rcl_take_request>
 800e8a0:	2800      	cmp	r0, #0
 800e8a2:	d131      	bne.n	800e908 <_rclc_take_new_data+0x9c>
 800e8a4:	2000      	movs	r0, #0
 800e8a6:	b00e      	add	sp, #56	; 0x38
 800e8a8:	bd10      	pop	{r4, pc}
 800e8aa:	680b      	ldr	r3, [r1, #0]
 800e8ac:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e8ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d0f6      	beq.n	800e8a4 <_rclc_take_new_data+0x38>
 800e8b6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	aa02      	add	r2, sp, #8
 800e8be:	f7ff ff31 	bl	800e724 <rcl_take>
 800e8c2:	2800      	cmp	r0, #0
 800e8c4:	d0ef      	beq.n	800e8a6 <_rclc_take_new_data+0x3a>
 800e8c6:	f240 1391 	movw	r3, #401	; 0x191
 800e8ca:	4298      	cmp	r0, r3
 800e8cc:	d115      	bne.n	800e8fa <_rclc_take_new_data+0x8e>
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800e8d4:	e7e7      	b.n	800e8a6 <_rclc_take_new_data+0x3a>
 800e8d6:	698b      	ldr	r3, [r1, #24]
 800e8d8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e8da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d0e0      	beq.n	800e8a4 <_rclc_take_new_data+0x38>
 800e8e2:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800e8e6:	f104 0110 	add.w	r1, r4, #16
 800e8ea:	f006 fd19 	bl	8015320 <rcl_take_response>
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	d0d8      	beq.n	800e8a4 <_rclc_take_new_data+0x38>
 800e8f2:	f240 13f5 	movw	r3, #501	; 0x1f5
 800e8f6:	4298      	cmp	r0, r3
 800e8f8:	d0d5      	beq.n	800e8a6 <_rclc_take_new_data+0x3a>
 800e8fa:	9001      	str	r0, [sp, #4]
 800e8fc:	f000 fd46 	bl	800f38c <rcutils_reset_error>
 800e900:	9801      	ldr	r0, [sp, #4]
 800e902:	e7d0      	b.n	800e8a6 <_rclc_take_new_data+0x3a>
 800e904:	200b      	movs	r0, #11
 800e906:	4770      	bx	lr
 800e908:	f240 2359 	movw	r3, #601	; 0x259
 800e90c:	4298      	cmp	r0, r3
 800e90e:	d0de      	beq.n	800e8ce <_rclc_take_new_data+0x62>
 800e910:	e7f3      	b.n	800e8fa <_rclc_take_new_data+0x8e>
 800e912:	2001      	movs	r0, #1
 800e914:	e7c7      	b.n	800e8a6 <_rclc_take_new_data+0x3a>
 800e916:	bf00      	nop

0800e918 <_rclc_execute>:
 800e918:	2800      	cmp	r0, #0
 800e91a:	d058      	beq.n	800e9ce <_rclc_execute+0xb6>
 800e91c:	b510      	push	{r4, lr}
 800e91e:	7843      	ldrb	r3, [r0, #1]
 800e920:	b082      	sub	sp, #8
 800e922:	4604      	mov	r4, r0
 800e924:	b14b      	cbz	r3, 800e93a <_rclc_execute+0x22>
 800e926:	2b01      	cmp	r3, #1
 800e928:	d017      	beq.n	800e95a <_rclc_execute+0x42>
 800e92a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800e92e:	b18b      	cbz	r3, 800e954 <_rclc_execute+0x3c>
 800e930:	2000      	movs	r0, #0
 800e932:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 800e936:	b002      	add	sp, #8
 800e938:	bd10      	pop	{r4, pc}
 800e93a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800e93e:	b14b      	cbz	r3, 800e954 <_rclc_execute+0x3c>
 800e940:	7803      	ldrb	r3, [r0, #0]
 800e942:	2b08      	cmp	r3, #8
 800e944:	d860      	bhi.n	800ea08 <_rclc_execute+0xf0>
 800e946:	e8df f003 	tbb	[pc, r3]
 800e94a:	5128      	.short	0x5128
 800e94c:	122c2832 	.word	0x122c2832
 800e950:	1212      	.short	0x1212
 800e952:	38          	.byte	0x38
 800e953:	00          	.byte	0x00
 800e954:	2000      	movs	r0, #0
 800e956:	b002      	add	sp, #8
 800e958:	bd10      	pop	{r4, pc}
 800e95a:	7803      	ldrb	r3, [r0, #0]
 800e95c:	2b08      	cmp	r3, #8
 800e95e:	d853      	bhi.n	800ea08 <_rclc_execute+0xf0>
 800e960:	e8df f003 	tbb	[pc, r3]
 800e964:	1b252e37 	.word	0x1b252e37
 800e968:	0505051f 	.word	0x0505051f
 800e96c:	2b          	.byte	0x2b
 800e96d:	00          	.byte	0x00
 800e96e:	2b06      	cmp	r3, #6
 800e970:	d041      	beq.n	800e9f6 <_rclc_execute+0xde>
 800e972:	2b07      	cmp	r3, #7
 800e974:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e976:	d133      	bne.n	800e9e0 <_rclc_execute+0xc8>
 800e978:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 800e97c:	68a0      	ldr	r0, [r4, #8]
 800e97e:	4798      	blx	r3
 800e980:	f104 0110 	add.w	r1, r4, #16
 800e984:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e986:	6860      	ldr	r0, [r4, #4]
 800e988:	f007 fb20 	bl	8015fcc <rcl_send_response>
 800e98c:	2800      	cmp	r0, #0
 800e98e:	d0cc      	beq.n	800e92a <_rclc_execute+0x12>
 800e990:	9001      	str	r0, [sp, #4]
 800e992:	f000 fcfb 	bl	800f38c <rcutils_reset_error>
 800e996:	9801      	ldr	r0, [sp, #4]
 800e998:	e7cd      	b.n	800e936 <_rclc_execute+0x1e>
 800e99a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e99c:	68a0      	ldr	r0, [r4, #8]
 800e99e:	4798      	blx	r3
 800e9a0:	e7c3      	b.n	800e92a <_rclc_execute+0x12>
 800e9a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e9a4:	68a0      	ldr	r0, [r4, #8]
 800e9a6:	f104 0110 	add.w	r1, r4, #16
 800e9aa:	4798      	blx	r3
 800e9ac:	e7bd      	b.n	800e92a <_rclc_execute+0x12>
 800e9ae:	6860      	ldr	r0, [r4, #4]
 800e9b0:	f007 fde0 	bl	8016574 <rcl_timer_call>
 800e9b4:	2800      	cmp	r0, #0
 800e9b6:	d0b8      	beq.n	800e92a <_rclc_execute+0x12>
 800e9b8:	e7ea      	b.n	800e990 <_rclc_execute+0x78>
 800e9ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e9bc:	4798      	blx	r3
 800e9be:	e7b4      	b.n	800e92a <_rclc_execute+0x12>
 800e9c0:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800e9c4:	b990      	cbnz	r0, 800e9ec <_rclc_execute+0xd4>
 800e9c6:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800e9ca:	4798      	blx	r3
 800e9cc:	e7ad      	b.n	800e92a <_rclc_execute+0x12>
 800e9ce:	200b      	movs	r0, #11
 800e9d0:	4770      	bx	lr
 800e9d2:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800e9d6:	2800      	cmp	r0, #0
 800e9d8:	d1df      	bne.n	800e99a <_rclc_execute+0x82>
 800e9da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e9dc:	4798      	blx	r3
 800e9de:	e7a4      	b.n	800e92a <_rclc_execute+0x12>
 800e9e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e9e2:	68a0      	ldr	r0, [r4, #8]
 800e9e4:	4798      	blx	r3
 800e9e6:	f104 0110 	add.w	r1, r4, #16
 800e9ea:	e7cb      	b.n	800e984 <_rclc_execute+0x6c>
 800e9ec:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800e9f0:	68a0      	ldr	r0, [r4, #8]
 800e9f2:	4798      	blx	r3
 800e9f4:	e799      	b.n	800e92a <_rclc_execute+0x12>
 800e9f6:	f104 0110 	add.w	r1, r4, #16
 800e9fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e9fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e9fe:	68a0      	ldr	r0, [r4, #8]
 800ea00:	9101      	str	r1, [sp, #4]
 800ea02:	4798      	blx	r3
 800ea04:	9901      	ldr	r1, [sp, #4]
 800ea06:	e7bd      	b.n	800e984 <_rclc_execute+0x6c>
 800ea08:	2001      	movs	r0, #1
 800ea0a:	e794      	b.n	800e936 <_rclc_execute+0x1e>

0800ea0c <rclc_executor_trigger_any>:
 800ea0c:	b170      	cbz	r0, 800ea2c <rclc_executor_trigger_any+0x20>
 800ea0e:	b179      	cbz	r1, 800ea30 <rclc_executor_trigger_any+0x24>
 800ea10:	4603      	mov	r3, r0
 800ea12:	2200      	movs	r2, #0
 800ea14:	e005      	b.n	800ea22 <rclc_executor_trigger_any+0x16>
 800ea16:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800ea1a:	3340      	adds	r3, #64	; 0x40
 800ea1c:	b930      	cbnz	r0, 800ea2c <rclc_executor_trigger_any+0x20>
 800ea1e:	4291      	cmp	r1, r2
 800ea20:	d005      	beq.n	800ea2e <rclc_executor_trigger_any+0x22>
 800ea22:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800ea26:	3201      	adds	r2, #1
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	d1f4      	bne.n	800ea16 <rclc_executor_trigger_any+0xa>
 800ea2c:	4770      	bx	lr
 800ea2e:	4770      	bx	lr
 800ea30:	4608      	mov	r0, r1
 800ea32:	e7fb      	b.n	800ea2c <rclc_executor_trigger_any+0x20>
 800ea34:	0000      	movs	r0, r0
	...

0800ea38 <rclc_executor_init>:
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	d063      	beq.n	800eb04 <rclc_executor_init+0xcc>
 800ea3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea40:	460f      	mov	r7, r1
 800ea42:	b0ae      	sub	sp, #184	; 0xb8
 800ea44:	2900      	cmp	r1, #0
 800ea46:	d055      	beq.n	800eaf4 <rclc_executor_init+0xbc>
 800ea48:	4605      	mov	r5, r0
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	4616      	mov	r6, r2
 800ea4e:	4698      	mov	r8, r3
 800ea50:	f000 fbaa 	bl	800f1a8 <rcutils_allocator_is_valid>
 800ea54:	2800      	cmp	r0, #0
 800ea56:	d04d      	beq.n	800eaf4 <rclc_executor_init+0xbc>
 800ea58:	2e00      	cmp	r6, #0
 800ea5a:	d04b      	beq.n	800eaf4 <rclc_executor_init+0xbc>
 800ea5c:	492e      	ldr	r1, [pc, #184]	; (800eb18 <rclc_executor_init+0xe0>)
 800ea5e:	2280      	movs	r2, #128	; 0x80
 800ea60:	a80e      	add	r0, sp, #56	; 0x38
 800ea62:	f00a fe8f 	bl	8019784 <memcpy>
 800ea66:	2400      	movs	r4, #0
 800ea68:	a90e      	add	r1, sp, #56	; 0x38
 800ea6a:	2280      	movs	r2, #128	; 0x80
 800ea6c:	4628      	mov	r0, r5
 800ea6e:	f00a fe89 	bl	8019784 <memcpy>
 800ea72:	602f      	str	r7, [r5, #0]
 800ea74:	4668      	mov	r0, sp
 800ea76:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800ea7a:	466f      	mov	r7, sp
 800ea7c:	f007 ffd4 	bl	8016a28 <rcl_get_zero_initialized_wait_set>
 800ea80:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ea82:	f105 0c14 	add.w	ip, r5, #20
 800ea86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ea8a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ea8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ea90:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ea92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ea96:	a31e      	add	r3, pc, #120	; (adr r3, 800eb10 <rclc_executor_init+0xd8>)
 800ea98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9c:	6839      	ldr	r1, [r7, #0]
 800ea9e:	f8cc 1000 	str.w	r1, [ip]
 800eaa2:	f8d8 7000 	ldr.w	r7, [r8]
 800eaa6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800eaaa:	f8c5 8010 	str.w	r8, [r5, #16]
 800eaae:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800eab2:	01b0      	lsls	r0, r6, #6
 800eab4:	47b8      	blx	r7
 800eab6:	6068      	str	r0, [r5, #4]
 800eab8:	b908      	cbnz	r0, 800eabe <rclc_executor_init+0x86>
 800eaba:	e025      	b.n	800eb08 <rclc_executor_init+0xd0>
 800eabc:	6868      	ldr	r0, [r5, #4]
 800eabe:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800eac2:	4631      	mov	r1, r6
 800eac4:	3401      	adds	r4, #1
 800eac6:	f000 fa15 	bl	800eef4 <rclc_executor_handle_init>
 800eaca:	42a6      	cmp	r6, r4
 800eacc:	d1f6      	bne.n	800eabc <rclc_executor_init+0x84>
 800eace:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800ead2:	f000 fa03 	bl	800eedc <rclc_executor_handle_counters_zero_init>
 800ead6:	686b      	ldr	r3, [r5, #4]
 800ead8:	4a10      	ldr	r2, [pc, #64]	; (800eb1c <rclc_executor_init+0xe4>)
 800eada:	672a      	str	r2, [r5, #112]	; 0x70
 800eadc:	2000      	movs	r0, #0
 800eade:	6768      	str	r0, [r5, #116]	; 0x74
 800eae0:	b163      	cbz	r3, 800eafc <rclc_executor_init+0xc4>
 800eae2:	692b      	ldr	r3, [r5, #16]
 800eae4:	b153      	cbz	r3, 800eafc <rclc_executor_init+0xc4>
 800eae6:	68ab      	ldr	r3, [r5, #8]
 800eae8:	b143      	cbz	r3, 800eafc <rclc_executor_init+0xc4>
 800eaea:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800eaee:	b02e      	add	sp, #184	; 0xb8
 800eaf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaf4:	200b      	movs	r0, #11
 800eaf6:	b02e      	add	sp, #184	; 0xb8
 800eaf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eafc:	4618      	mov	r0, r3
 800eafe:	b02e      	add	sp, #184	; 0xb8
 800eb00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb04:	200b      	movs	r0, #11
 800eb06:	4770      	bx	lr
 800eb08:	200a      	movs	r0, #10
 800eb0a:	e7f4      	b.n	800eaf6 <rclc_executor_init+0xbe>
 800eb0c:	f3af 8000 	nop.w
 800eb10:	3b9aca00 	.word	0x3b9aca00
 800eb14:	00000000 	.word	0x00000000
 800eb18:	0801ed28 	.word	0x0801ed28
 800eb1c:	0800ea0d 	.word	0x0800ea0d

0800eb20 <rclc_executor_add_subscription>:
 800eb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb24:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800eb28:	b358      	cbz	r0, 800eb82 <rclc_executor_add_subscription+0x62>
 800eb2a:	b351      	cbz	r1, 800eb82 <rclc_executor_add_subscription+0x62>
 800eb2c:	b34a      	cbz	r2, 800eb82 <rclc_executor_add_subscription+0x62>
 800eb2e:	b343      	cbz	r3, 800eb82 <rclc_executor_add_subscription+0x62>
 800eb30:	4604      	mov	r4, r0
 800eb32:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800eb36:	4285      	cmp	r5, r0
 800eb38:	d302      	bcc.n	800eb40 <rclc_executor_add_subscription+0x20>
 800eb3a:	2001      	movs	r0, #1
 800eb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb40:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800eb44:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800eb48:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800eb4c:	f04f 0c00 	mov.w	ip, #0
 800eb50:	f80e c008 	strb.w	ip, [lr, r8]
 800eb54:	2001      	movs	r0, #1
 800eb56:	3501      	adds	r5, #1
 800eb58:	f104 0814 	add.w	r8, r4, #20
 800eb5c:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
 800eb60:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800eb64:	6333      	str	r3, [r6, #48]	; 0x30
 800eb66:	7077      	strb	r7, [r6, #1]
 800eb68:	f8c6 c02c 	str.w	ip, [r6, #44]	; 0x2c
 800eb6c:	4640      	mov	r0, r8
 800eb6e:	60e5      	str	r5, [r4, #12]
 800eb70:	f007 ff6c 	bl	8016a4c <rcl_wait_set_is_valid>
 800eb74:	b940      	cbnz	r0, 800eb88 <rclc_executor_add_subscription+0x68>
 800eb76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eb78:	3301      	adds	r3, #1
 800eb7a:	64a3      	str	r3, [r4, #72]	; 0x48
 800eb7c:	2000      	movs	r0, #0
 800eb7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb82:	200b      	movs	r0, #11
 800eb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb88:	4640      	mov	r0, r8
 800eb8a:	f007 ff65 	bl	8016a58 <rcl_wait_set_fini>
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	d0f1      	beq.n	800eb76 <rclc_executor_add_subscription+0x56>
 800eb92:	e7d3      	b.n	800eb3c <rclc_executor_add_subscription+0x1c>

0800eb94 <rclc_executor_add_timer>:
 800eb94:	b308      	cbz	r0, 800ebda <rclc_executor_add_timer+0x46>
 800eb96:	b301      	cbz	r1, 800ebda <rclc_executor_add_timer+0x46>
 800eb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb9a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	4604      	mov	r4, r0
 800eba2:	d301      	bcc.n	800eba8 <rclc_executor_add_timer+0x14>
 800eba4:	2001      	movs	r0, #1
 800eba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eba8:	6840      	ldr	r0, [r0, #4]
 800ebaa:	019d      	lsls	r5, r3, #6
 800ebac:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800ebb0:	2702      	movs	r7, #2
 800ebb2:	6051      	str	r1, [r2, #4]
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	5347      	strh	r7, [r0, r5]
 800ebb8:	2601      	movs	r6, #1
 800ebba:	2100      	movs	r1, #0
 800ebbc:	f104 0514 	add.w	r5, r4, #20
 800ebc0:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
 800ebc4:	62d1      	str	r1, [r2, #44]	; 0x2c
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	60e3      	str	r3, [r4, #12]
 800ebca:	f007 ff3f 	bl	8016a4c <rcl_wait_set_is_valid>
 800ebce:	b930      	cbnz	r0, 800ebde <rclc_executor_add_timer+0x4a>
 800ebd0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ebd6:	2000      	movs	r0, #0
 800ebd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebda:	200b      	movs	r0, #11
 800ebdc:	4770      	bx	lr
 800ebde:	4628      	mov	r0, r5
 800ebe0:	f007 ff3a 	bl	8016a58 <rcl_wait_set_fini>
 800ebe4:	2800      	cmp	r0, #0
 800ebe6:	d0f3      	beq.n	800ebd0 <rclc_executor_add_timer+0x3c>
 800ebe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebea:	bf00      	nop

0800ebec <rclc_executor_prepare>:
 800ebec:	2800      	cmp	r0, #0
 800ebee:	d03d      	beq.n	800ec6c <rclc_executor_prepare+0x80>
 800ebf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebf4:	f100 0814 	add.w	r8, r0, #20
 800ebf8:	b09a      	sub	sp, #104	; 0x68
 800ebfa:	4604      	mov	r4, r0
 800ebfc:	4640      	mov	r0, r8
 800ebfe:	f007 ff25 	bl	8016a4c <rcl_wait_set_is_valid>
 800ec02:	b118      	cbz	r0, 800ec0c <rclc_executor_prepare+0x20>
 800ec04:	2000      	movs	r0, #0
 800ec06:	b01a      	add	sp, #104	; 0x68
 800ec08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec0c:	4640      	mov	r0, r8
 800ec0e:	f007 ff23 	bl	8016a58 <rcl_wait_set_fini>
 800ec12:	2800      	cmp	r0, #0
 800ec14:	d127      	bne.n	800ec66 <rclc_executor_prepare+0x7a>
 800ec16:	a80c      	add	r0, sp, #48	; 0x30
 800ec18:	ad0c      	add	r5, sp, #48	; 0x30
 800ec1a:	f007 ff05 	bl	8016a28 <rcl_get_zero_initialized_wait_set>
 800ec1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec20:	4646      	mov	r6, r8
 800ec22:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ec24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec26:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ec28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec2a:	6927      	ldr	r7, [r4, #16]
 800ec2c:	682d      	ldr	r5, [r5, #0]
 800ec2e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ec30:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ec32:	6035      	str	r5, [r6, #0]
 800ec34:	ad04      	add	r5, sp, #16
 800ec36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ec38:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800ec3c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ec3e:	6826      	ldr	r6, [r4, #0]
 800ec40:	6838      	ldr	r0, [r7, #0]
 800ec42:	6028      	str	r0, [r5, #0]
 800ec44:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800ec48:	e9cd 3200 	strd	r3, r2, [sp]
 800ec4c:	4640      	mov	r0, r8
 800ec4e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ec50:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800ec52:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ec54:	f008 fa1e 	bl	8017094 <rcl_wait_set_init>
 800ec58:	2800      	cmp	r0, #0
 800ec5a:	d0d4      	beq.n	800ec06 <rclc_executor_prepare+0x1a>
 800ec5c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ec5e:	f000 fb95 	bl	800f38c <rcutils_reset_error>
 800ec62:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ec64:	e7cf      	b.n	800ec06 <rclc_executor_prepare+0x1a>
 800ec66:	f000 fb91 	bl	800f38c <rcutils_reset_error>
 800ec6a:	e7d4      	b.n	800ec16 <rclc_executor_prepare+0x2a>
 800ec6c:	200b      	movs	r0, #11
 800ec6e:	4770      	bx	lr

0800ec70 <rclc_executor_spin_some.part.0>:
 800ec70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec74:	f100 0814 	add.w	r8, r0, #20
 800ec78:	b083      	sub	sp, #12
 800ec7a:	4692      	mov	sl, r2
 800ec7c:	4699      	mov	r9, r3
 800ec7e:	4605      	mov	r5, r0
 800ec80:	f7ff ffb4 	bl	800ebec <rclc_executor_prepare>
 800ec84:	4640      	mov	r0, r8
 800ec86:	f007 ffb3 	bl	8016bf0 <rcl_wait_set_clear>
 800ec8a:	4607      	mov	r7, r0
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	f040 80ad 	bne.w	800edec <rclc_executor_spin_some.part.0+0x17c>
 800ec92:	68ab      	ldr	r3, [r5, #8]
 800ec94:	4604      	mov	r4, r0
 800ec96:	b1eb      	cbz	r3, 800ecd4 <rclc_executor_spin_some.part.0+0x64>
 800ec98:	686e      	ldr	r6, [r5, #4]
 800ec9a:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800ec9e:	01a2      	lsls	r2, r4, #6
 800eca0:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800eca4:	b1b3      	cbz	r3, 800ecd4 <rclc_executor_spin_some.part.0+0x64>
 800eca6:	5cb3      	ldrb	r3, [r6, r2]
 800eca8:	2b08      	cmp	r3, #8
 800ecaa:	f200 8098 	bhi.w	800edde <rclc_executor_spin_some.part.0+0x16e>
 800ecae:	e8df f003 	tbb	[pc, r3]
 800ecb2:	7a7a      	.short	0x7a7a
 800ecb4:	056c6c83 	.word	0x056c6c83
 800ecb8:	0505      	.short	0x0505
 800ecba:	8c          	.byte	0x8c
 800ecbb:	00          	.byte	0x00
 800ecbc:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800ecc0:	4640      	mov	r0, r8
 800ecc2:	6849      	ldr	r1, [r1, #4]
 800ecc4:	f008 fafc 	bl	80172c0 <rcl_wait_set_add_service>
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	d166      	bne.n	800ed9a <rclc_executor_spin_some.part.0+0x12a>
 800eccc:	68ab      	ldr	r3, [r5, #8]
 800ecce:	3401      	adds	r4, #1
 800ecd0:	429c      	cmp	r4, r3
 800ecd2:	d3e1      	bcc.n	800ec98 <rclc_executor_spin_some.part.0+0x28>
 800ecd4:	464b      	mov	r3, r9
 800ecd6:	4652      	mov	r2, sl
 800ecd8:	4640      	mov	r0, r8
 800ecda:	f008 fb1d 	bl	8017318 <rcl_wait>
 800ecde:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	f000 8088 	beq.w	800edf8 <rclc_executor_spin_some.part.0+0x188>
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	d178      	bne.n	800edde <rclc_executor_spin_some.part.0+0x16e>
 800ecec:	68ab      	ldr	r3, [r5, #8]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	f000 80cd 	beq.w	800ee8e <rclc_executor_spin_some.part.0+0x21e>
 800ecf4:	2400      	movs	r4, #0
 800ecf6:	4626      	mov	r6, r4
 800ecf8:	f240 1991 	movw	r9, #401	; 0x191
 800ecfc:	e009      	b.n	800ed12 <rclc_executor_spin_some.part.0+0xa2>
 800ecfe:	f7ff fd63 	bl	800e7c8 <_rclc_check_for_new_data>
 800ed02:	4604      	mov	r4, r0
 800ed04:	b108      	cbz	r0, 800ed0a <rclc_executor_spin_some.part.0+0x9a>
 800ed06:	4548      	cmp	r0, r9
 800ed08:	d13d      	bne.n	800ed86 <rclc_executor_spin_some.part.0+0x116>
 800ed0a:	68ab      	ldr	r3, [r5, #8]
 800ed0c:	429e      	cmp	r6, r3
 800ed0e:	f080 80c3 	bcs.w	800ee98 <rclc_executor_spin_some.part.0+0x228>
 800ed12:	686a      	ldr	r2, [r5, #4]
 800ed14:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800ed18:	4641      	mov	r1, r8
 800ed1a:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800ed1e:	3601      	adds	r6, #1
 800ed20:	f1bc 0f00 	cmp.w	ip, #0
 800ed24:	d1eb      	bne.n	800ecfe <rclc_executor_spin_some.part.0+0x8e>
 800ed26:	4619      	mov	r1, r3
 800ed28:	4610      	mov	r0, r2
 800ed2a:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800ed2e:	4798      	blx	r3
 800ed30:	b348      	cbz	r0, 800ed86 <rclc_executor_spin_some.part.0+0x116>
 800ed32:	68ab      	ldr	r3, [r5, #8]
 800ed34:	b33b      	cbz	r3, 800ed86 <rclc_executor_spin_some.part.0+0x116>
 800ed36:	2600      	movs	r6, #0
 800ed38:	f240 1991 	movw	r9, #401	; 0x191
 800ed3c:	e008      	b.n	800ed50 <rclc_executor_spin_some.part.0+0xe0>
 800ed3e:	f7ff fd95 	bl	800e86c <_rclc_take_new_data>
 800ed42:	4604      	mov	r4, r0
 800ed44:	b108      	cbz	r0, 800ed4a <rclc_executor_spin_some.part.0+0xda>
 800ed46:	4548      	cmp	r0, r9
 800ed48:	d11d      	bne.n	800ed86 <rclc_executor_spin_some.part.0+0x116>
 800ed4a:	68ab      	ldr	r3, [r5, #8]
 800ed4c:	429e      	cmp	r6, r3
 800ed4e:	d208      	bcs.n	800ed62 <rclc_executor_spin_some.part.0+0xf2>
 800ed50:	6868      	ldr	r0, [r5, #4]
 800ed52:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800ed56:	4641      	mov	r1, r8
 800ed58:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800ed5c:	3601      	adds	r6, #1
 800ed5e:	2a00      	cmp	r2, #0
 800ed60:	d1ed      	bne.n	800ed3e <rclc_executor_spin_some.part.0+0xce>
 800ed62:	2600      	movs	r6, #0
 800ed64:	b93b      	cbnz	r3, 800ed76 <rclc_executor_spin_some.part.0+0x106>
 800ed66:	e00e      	b.n	800ed86 <rclc_executor_spin_some.part.0+0x116>
 800ed68:	f7ff fdd6 	bl	800e918 <_rclc_execute>
 800ed6c:	4604      	mov	r4, r0
 800ed6e:	b950      	cbnz	r0, 800ed86 <rclc_executor_spin_some.part.0+0x116>
 800ed70:	68ab      	ldr	r3, [r5, #8]
 800ed72:	429e      	cmp	r6, r3
 800ed74:	d236      	bcs.n	800ede4 <rclc_executor_spin_some.part.0+0x174>
 800ed76:	6868      	ldr	r0, [r5, #4]
 800ed78:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800ed7c:	3601      	adds	r6, #1
 800ed7e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d1f0      	bne.n	800ed68 <rclc_executor_spin_some.part.0+0xf8>
 800ed86:	4627      	mov	r7, r4
 800ed88:	e02c      	b.n	800ede4 <rclc_executor_spin_some.part.0+0x174>
 800ed8a:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800ed8e:	4640      	mov	r0, r8
 800ed90:	6849      	ldr	r1, [r1, #4]
 800ed92:	f008 fa69 	bl	8017268 <rcl_wait_set_add_client>
 800ed96:	2800      	cmp	r0, #0
 800ed98:	d098      	beq.n	800eccc <rclc_executor_spin_some.part.0+0x5c>
 800ed9a:	9001      	str	r0, [sp, #4]
 800ed9c:	f000 faf6 	bl	800f38c <rcutils_reset_error>
 800eda0:	9801      	ldr	r0, [sp, #4]
 800eda2:	4607      	mov	r7, r0
 800eda4:	e01e      	b.n	800ede4 <rclc_executor_spin_some.part.0+0x174>
 800eda6:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800edaa:	4640      	mov	r0, r8
 800edac:	6849      	ldr	r1, [r1, #4]
 800edae:	f007 fef3 	bl	8016b98 <rcl_wait_set_add_subscription>
 800edb2:	2800      	cmp	r0, #0
 800edb4:	d08a      	beq.n	800eccc <rclc_executor_spin_some.part.0+0x5c>
 800edb6:	e7f0      	b.n	800ed9a <rclc_executor_spin_some.part.0+0x12a>
 800edb8:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800edbc:	4640      	mov	r0, r8
 800edbe:	6849      	ldr	r1, [r1, #4]
 800edc0:	f008 fa22 	bl	8017208 <rcl_wait_set_add_timer>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	d081      	beq.n	800eccc <rclc_executor_spin_some.part.0+0x5c>
 800edc8:	e7e7      	b.n	800ed9a <rclc_executor_spin_some.part.0+0x12a>
 800edca:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800edce:	4640      	mov	r0, r8
 800edd0:	6849      	ldr	r1, [r1, #4]
 800edd2:	f008 f9ed 	bl	80171b0 <rcl_wait_set_add_guard_condition>
 800edd6:	2800      	cmp	r0, #0
 800edd8:	f43f af78 	beq.w	800eccc <rclc_executor_spin_some.part.0+0x5c>
 800eddc:	e7dd      	b.n	800ed9a <rclc_executor_spin_some.part.0+0x12a>
 800edde:	f000 fad5 	bl	800f38c <rcutils_reset_error>
 800ede2:	2701      	movs	r7, #1
 800ede4:	4638      	mov	r0, r7
 800ede6:	b003      	add	sp, #12
 800ede8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edec:	f000 face 	bl	800f38c <rcutils_reset_error>
 800edf0:	4638      	mov	r0, r7
 800edf2:	b003      	add	sp, #12
 800edf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edf8:	68ab      	ldr	r3, [r5, #8]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d04e      	beq.n	800ee9c <rclc_executor_spin_some.part.0+0x22c>
 800edfe:	2400      	movs	r4, #0
 800ee00:	4626      	mov	r6, r4
 800ee02:	f240 1991 	movw	r9, #401	; 0x191
 800ee06:	e008      	b.n	800ee1a <rclc_executor_spin_some.part.0+0x1aa>
 800ee08:	f7ff fcde 	bl	800e7c8 <_rclc_check_for_new_data>
 800ee0c:	4604      	mov	r4, r0
 800ee0e:	b108      	cbz	r0, 800ee14 <rclc_executor_spin_some.part.0+0x1a4>
 800ee10:	4548      	cmp	r0, r9
 800ee12:	d1b8      	bne.n	800ed86 <rclc_executor_spin_some.part.0+0x116>
 800ee14:	68ab      	ldr	r3, [r5, #8]
 800ee16:	429e      	cmp	r6, r3
 800ee18:	d23c      	bcs.n	800ee94 <rclc_executor_spin_some.part.0+0x224>
 800ee1a:	686a      	ldr	r2, [r5, #4]
 800ee1c:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800ee20:	4641      	mov	r1, r8
 800ee22:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800ee26:	3601      	adds	r6, #1
 800ee28:	f1bc 0f00 	cmp.w	ip, #0
 800ee2c:	d1ec      	bne.n	800ee08 <rclc_executor_spin_some.part.0+0x198>
 800ee2e:	4619      	mov	r1, r3
 800ee30:	4610      	mov	r0, r2
 800ee32:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800ee36:	4798      	blx	r3
 800ee38:	2800      	cmp	r0, #0
 800ee3a:	d0a4      	beq.n	800ed86 <rclc_executor_spin_some.part.0+0x116>
 800ee3c:	68ab      	ldr	r3, [r5, #8]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d0a1      	beq.n	800ed86 <rclc_executor_spin_some.part.0+0x116>
 800ee42:	f04f 0a00 	mov.w	sl, #0
 800ee46:	f240 1691 	movw	r6, #401	; 0x191
 800ee4a:	f240 2959 	movw	r9, #601	; 0x259
 800ee4e:	e010      	b.n	800ee72 <rclc_executor_spin_some.part.0+0x202>
 800ee50:	f7ff fd0c 	bl	800e86c <_rclc_take_new_data>
 800ee54:	b118      	cbz	r0, 800ee5e <rclc_executor_spin_some.part.0+0x1ee>
 800ee56:	42b0      	cmp	r0, r6
 800ee58:	d001      	beq.n	800ee5e <rclc_executor_spin_some.part.0+0x1ee>
 800ee5a:	4548      	cmp	r0, r9
 800ee5c:	d121      	bne.n	800eea2 <rclc_executor_spin_some.part.0+0x232>
 800ee5e:	6868      	ldr	r0, [r5, #4]
 800ee60:	4458      	add	r0, fp
 800ee62:	f7ff fd59 	bl	800e918 <_rclc_execute>
 800ee66:	4604      	mov	r4, r0
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	d18c      	bne.n	800ed86 <rclc_executor_spin_some.part.0+0x116>
 800ee6c:	68ab      	ldr	r3, [r5, #8]
 800ee6e:	459a      	cmp	sl, r3
 800ee70:	d2b8      	bcs.n	800ede4 <rclc_executor_spin_some.part.0+0x174>
 800ee72:	6868      	ldr	r0, [r5, #4]
 800ee74:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800ee78:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800ee7c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800ee80:	4641      	mov	r1, r8
 800ee82:	f10a 0a01 	add.w	sl, sl, #1
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d1e2      	bne.n	800ee50 <rclc_executor_spin_some.part.0+0x1e0>
 800ee8a:	4627      	mov	r7, r4
 800ee8c:	e7aa      	b.n	800ede4 <rclc_executor_spin_some.part.0+0x174>
 800ee8e:	686a      	ldr	r2, [r5, #4]
 800ee90:	461c      	mov	r4, r3
 800ee92:	e748      	b.n	800ed26 <rclc_executor_spin_some.part.0+0xb6>
 800ee94:	686a      	ldr	r2, [r5, #4]
 800ee96:	e7ca      	b.n	800ee2e <rclc_executor_spin_some.part.0+0x1be>
 800ee98:	686a      	ldr	r2, [r5, #4]
 800ee9a:	e744      	b.n	800ed26 <rclc_executor_spin_some.part.0+0xb6>
 800ee9c:	686a      	ldr	r2, [r5, #4]
 800ee9e:	461c      	mov	r4, r3
 800eea0:	e7c5      	b.n	800ee2e <rclc_executor_spin_some.part.0+0x1be>
 800eea2:	4607      	mov	r7, r0
 800eea4:	e79e      	b.n	800ede4 <rclc_executor_spin_some.part.0+0x174>
 800eea6:	bf00      	nop

0800eea8 <rclc_executor_spin>:
 800eea8:	b1a8      	cbz	r0, 800eed6 <rclc_executor_spin+0x2e>
 800eeaa:	b5d0      	push	{r4, r6, r7, lr}
 800eeac:	4604      	mov	r4, r0
 800eeae:	6820      	ldr	r0, [r4, #0]
 800eeb0:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 800eeb4:	f006 fa94 	bl	80153e0 <rcl_context_is_valid>
 800eeb8:	4601      	mov	r1, r0
 800eeba:	4632      	mov	r2, r6
 800eebc:	463b      	mov	r3, r7
 800eebe:	4620      	mov	r0, r4
 800eec0:	b129      	cbz	r1, 800eece <rclc_executor_spin+0x26>
 800eec2:	f7ff fed5 	bl	800ec70 <rclc_executor_spin_some.part.0>
 800eec6:	f030 0302 	bics.w	r3, r0, #2
 800eeca:	d0f0      	beq.n	800eeae <rclc_executor_spin+0x6>
 800eecc:	bdd0      	pop	{r4, r6, r7, pc}
 800eece:	f000 fa5d 	bl	800f38c <rcutils_reset_error>
 800eed2:	2001      	movs	r0, #1
 800eed4:	bdd0      	pop	{r4, r6, r7, pc}
 800eed6:	200b      	movs	r0, #11
 800eed8:	4770      	bx	lr
 800eeda:	bf00      	nop

0800eedc <rclc_executor_handle_counters_zero_init>:
 800eedc:	b140      	cbz	r0, 800eef0 <rclc_executor_handle_counters_zero_init+0x14>
 800eede:	2300      	movs	r3, #0
 800eee0:	6003      	str	r3, [r0, #0]
 800eee2:	6043      	str	r3, [r0, #4]
 800eee4:	6083      	str	r3, [r0, #8]
 800eee6:	60c3      	str	r3, [r0, #12]
 800eee8:	6103      	str	r3, [r0, #16]
 800eeea:	6143      	str	r3, [r0, #20]
 800eeec:	4618      	mov	r0, r3
 800eeee:	4770      	bx	lr
 800eef0:	200b      	movs	r0, #11
 800eef2:	4770      	bx	lr

0800eef4 <rclc_executor_handle_init>:
 800eef4:	b178      	cbz	r0, 800ef16 <rclc_executor_handle_init+0x22>
 800eef6:	b430      	push	{r4, r5}
 800eef8:	4603      	mov	r3, r0
 800eefa:	2209      	movs	r2, #9
 800eefc:	2000      	movs	r0, #0
 800eefe:	2400      	movs	r4, #0
 800ef00:	2500      	movs	r5, #0
 800ef02:	801a      	strh	r2, [r3, #0]
 800ef04:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800ef08:	bc30      	pop	{r4, r5}
 800ef0a:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800ef0e:	6359      	str	r1, [r3, #52]	; 0x34
 800ef10:	6318      	str	r0, [r3, #48]	; 0x30
 800ef12:	8718      	strh	r0, [r3, #56]	; 0x38
 800ef14:	4770      	bx	lr
 800ef16:	200b      	movs	r0, #11
 800ef18:	4770      	bx	lr
 800ef1a:	bf00      	nop

0800ef1c <rclc_support_init_with_options>:
 800ef1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef20:	b084      	sub	sp, #16
 800ef22:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800ef26:	b390      	cbz	r0, 800ef8e <rclc_support_init_with_options+0x72>
 800ef28:	461c      	mov	r4, r3
 800ef2a:	b383      	cbz	r3, 800ef8e <rclc_support_init_with_options+0x72>
 800ef2c:	f1b8 0f00 	cmp.w	r8, #0
 800ef30:	d02d      	beq.n	800ef8e <rclc_support_init_with_options+0x72>
 800ef32:	4605      	mov	r5, r0
 800ef34:	460e      	mov	r6, r1
 800ef36:	4617      	mov	r7, r2
 800ef38:	f7ff f828 	bl	800df8c <rcl_get_zero_initialized_init_options>
 800ef3c:	4629      	mov	r1, r5
 800ef3e:	6028      	str	r0, [r5, #0]
 800ef40:	4620      	mov	r0, r4
 800ef42:	f7ff f89b 	bl	800e07c <rcl_init_options_copy>
 800ef46:	4604      	mov	r4, r0
 800ef48:	b9d8      	cbnz	r0, 800ef82 <rclc_support_init_with_options+0x66>
 800ef4a:	466c      	mov	r4, sp
 800ef4c:	4620      	mov	r0, r4
 800ef4e:	f006 fa37 	bl	80153c0 <rcl_get_zero_initialized_context>
 800ef52:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ef56:	f105 0408 	add.w	r4, r5, #8
 800ef5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ef5e:	4623      	mov	r3, r4
 800ef60:	4639      	mov	r1, r7
 800ef62:	4630      	mov	r0, r6
 800ef64:	462a      	mov	r2, r5
 800ef66:	f006 fc25 	bl	80157b4 <rcl_init>
 800ef6a:	4604      	mov	r4, r0
 800ef6c:	b948      	cbnz	r0, 800ef82 <rclc_support_init_with_options+0x66>
 800ef6e:	f8c5 8018 	str.w	r8, [r5, #24]
 800ef72:	4642      	mov	r2, r8
 800ef74:	f105 011c 	add.w	r1, r5, #28
 800ef78:	2003      	movs	r0, #3
 800ef7a:	f007 f855 	bl	8016028 <rcl_clock_init>
 800ef7e:	4604      	mov	r4, r0
 800ef80:	b108      	cbz	r0, 800ef86 <rclc_support_init_with_options+0x6a>
 800ef82:	f000 fa03 	bl	800f38c <rcutils_reset_error>
 800ef86:	4620      	mov	r0, r4
 800ef88:	b004      	add	sp, #16
 800ef8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef8e:	240b      	movs	r4, #11
 800ef90:	4620      	mov	r0, r4
 800ef92:	b004      	add	sp, #16
 800ef94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ef98 <rclc_node_init_with_options>:
 800ef98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef9c:	b087      	sub	sp, #28
 800ef9e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800efa0:	b1e0      	cbz	r0, 800efdc <rclc_node_init_with_options+0x44>
 800efa2:	460d      	mov	r5, r1
 800efa4:	b1d1      	cbz	r1, 800efdc <rclc_node_init_with_options+0x44>
 800efa6:	4616      	mov	r6, r2
 800efa8:	b1c2      	cbz	r2, 800efdc <rclc_node_init_with_options+0x44>
 800efaa:	4698      	mov	r8, r3
 800efac:	b1b3      	cbz	r3, 800efdc <rclc_node_init_with_options+0x44>
 800efae:	b1af      	cbz	r7, 800efdc <rclc_node_init_with_options+0x44>
 800efb0:	f10d 0910 	add.w	r9, sp, #16
 800efb4:	4604      	mov	r4, r0
 800efb6:	4648      	mov	r0, r9
 800efb8:	f006 fd34 	bl	8015a24 <rcl_get_zero_initialized_node>
 800efbc:	e899 0003 	ldmia.w	r9, {r0, r1}
 800efc0:	f108 0308 	add.w	r3, r8, #8
 800efc4:	9700      	str	r7, [sp, #0]
 800efc6:	4632      	mov	r2, r6
 800efc8:	e884 0003 	stmia.w	r4, {r0, r1}
 800efcc:	4629      	mov	r1, r5
 800efce:	4620      	mov	r0, r4
 800efd0:	f006 fd32 	bl	8015a38 <rcl_node_init>
 800efd4:	b930      	cbnz	r0, 800efe4 <rclc_node_init_with_options+0x4c>
 800efd6:	b007      	add	sp, #28
 800efd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efdc:	200b      	movs	r0, #11
 800efde:	b007      	add	sp, #28
 800efe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efe4:	9003      	str	r0, [sp, #12]
 800efe6:	f000 f9d1 	bl	800f38c <rcutils_reset_error>
 800efea:	9803      	ldr	r0, [sp, #12]
 800efec:	b007      	add	sp, #28
 800efee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eff2:	bf00      	nop

0800eff4 <rclc_publisher_init_default>:
 800eff4:	b368      	cbz	r0, 800f052 <rclc_publisher_init_default+0x5e>
 800eff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800effa:	460d      	mov	r5, r1
 800effc:	b09e      	sub	sp, #120	; 0x78
 800effe:	b321      	cbz	r1, 800f04a <rclc_publisher_init_default+0x56>
 800f000:	4616      	mov	r6, r2
 800f002:	b312      	cbz	r2, 800f04a <rclc_publisher_init_default+0x56>
 800f004:	461f      	mov	r7, r3
 800f006:	b303      	cbz	r3, 800f04a <rclc_publisher_init_default+0x56>
 800f008:	4604      	mov	r4, r0
 800f00a:	f7ff f921 	bl	800e250 <rcl_get_zero_initialized_publisher>
 800f00e:	f10d 0810 	add.w	r8, sp, #16
 800f012:	6020      	str	r0, [r4, #0]
 800f014:	4640      	mov	r0, r8
 800f016:	f7ff fa17 	bl	800e448 <rcl_publisher_get_default_options>
 800f01a:	490f      	ldr	r1, [pc, #60]	; (800f058 <rclc_publisher_init_default+0x64>)
 800f01c:	2250      	movs	r2, #80	; 0x50
 800f01e:	4640      	mov	r0, r8
 800f020:	f00a fbb0 	bl	8019784 <memcpy>
 800f024:	f8cd 8000 	str.w	r8, [sp]
 800f028:	463b      	mov	r3, r7
 800f02a:	4632      	mov	r2, r6
 800f02c:	4629      	mov	r1, r5
 800f02e:	4620      	mov	r0, r4
 800f030:	f7ff f914 	bl	800e25c <rcl_publisher_init>
 800f034:	b910      	cbnz	r0, 800f03c <rclc_publisher_init_default+0x48>
 800f036:	b01e      	add	sp, #120	; 0x78
 800f038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f03c:	9003      	str	r0, [sp, #12]
 800f03e:	f000 f9a5 	bl	800f38c <rcutils_reset_error>
 800f042:	9803      	ldr	r0, [sp, #12]
 800f044:	b01e      	add	sp, #120	; 0x78
 800f046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f04a:	200b      	movs	r0, #11
 800f04c:	b01e      	add	sp, #120	; 0x78
 800f04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f052:	200b      	movs	r0, #11
 800f054:	4770      	bx	lr
 800f056:	bf00      	nop
 800f058:	0801eda8 	.word	0x0801eda8

0800f05c <rclc_subscription_init_best_effort>:
 800f05c:	b368      	cbz	r0, 800f0ba <rclc_subscription_init_best_effort+0x5e>
 800f05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f062:	460d      	mov	r5, r1
 800f064:	b0a0      	sub	sp, #128	; 0x80
 800f066:	b321      	cbz	r1, 800f0b2 <rclc_subscription_init_best_effort+0x56>
 800f068:	4616      	mov	r6, r2
 800f06a:	b312      	cbz	r2, 800f0b2 <rclc_subscription_init_best_effort+0x56>
 800f06c:	461f      	mov	r7, r3
 800f06e:	b303      	cbz	r3, 800f0b2 <rclc_subscription_init_best_effort+0x56>
 800f070:	4604      	mov	r4, r0
 800f072:	f7ff fa2f 	bl	800e4d4 <rcl_get_zero_initialized_subscription>
 800f076:	f10d 0810 	add.w	r8, sp, #16
 800f07a:	6020      	str	r0, [r4, #0]
 800f07c:	4640      	mov	r0, r8
 800f07e:	f7ff fb25 	bl	800e6cc <rcl_subscription_get_default_options>
 800f082:	490f      	ldr	r1, [pc, #60]	; (800f0c0 <rclc_subscription_init_best_effort+0x64>)
 800f084:	2250      	movs	r2, #80	; 0x50
 800f086:	4640      	mov	r0, r8
 800f088:	f00a fb7c 	bl	8019784 <memcpy>
 800f08c:	f8cd 8000 	str.w	r8, [sp]
 800f090:	463b      	mov	r3, r7
 800f092:	4632      	mov	r2, r6
 800f094:	4629      	mov	r1, r5
 800f096:	4620      	mov	r0, r4
 800f098:	f7ff fa22 	bl	800e4e0 <rcl_subscription_init>
 800f09c:	b910      	cbnz	r0, 800f0a4 <rclc_subscription_init_best_effort+0x48>
 800f09e:	b020      	add	sp, #128	; 0x80
 800f0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a4:	9003      	str	r0, [sp, #12]
 800f0a6:	f000 f971 	bl	800f38c <rcutils_reset_error>
 800f0aa:	9803      	ldr	r0, [sp, #12]
 800f0ac:	b020      	add	sp, #128	; 0x80
 800f0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0b2:	200b      	movs	r0, #11
 800f0b4:	b020      	add	sp, #128	; 0x80
 800f0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ba:	200b      	movs	r0, #11
 800f0bc:	4770      	bx	lr
 800f0be:	bf00      	nop
 800f0c0:	0801edf8 	.word	0x0801edf8

0800f0c4 <rclc_timer_init_default>:
 800f0c4:	b350      	cbz	r0, 800f11c <rclc_timer_init_default+0x58>
 800f0c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0ca:	460c      	mov	r4, r1
 800f0cc:	b08b      	sub	sp, #44	; 0x2c
 800f0ce:	b309      	cbz	r1, 800f114 <rclc_timer_init_default+0x50>
 800f0d0:	4691      	mov	r9, r2
 800f0d2:	4698      	mov	r8, r3
 800f0d4:	4607      	mov	r7, r0
 800f0d6:	f007 f993 	bl	8016400 <rcl_get_zero_initialized_timer>
 800f0da:	69a6      	ldr	r6, [r4, #24]
 800f0dc:	6038      	str	r0, [r7, #0]
 800f0de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f0e0:	ad03      	add	r5, sp, #12
 800f0e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f0e4:	6833      	ldr	r3, [r6, #0]
 800f0e6:	602b      	str	r3, [r5, #0]
 800f0e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f0ea:	9302      	str	r3, [sp, #8]
 800f0ec:	e9cd 9800 	strd	r9, r8, [sp]
 800f0f0:	4638      	mov	r0, r7
 800f0f2:	f104 0208 	add.w	r2, r4, #8
 800f0f6:	f104 011c 	add.w	r1, r4, #28
 800f0fa:	f007 f987 	bl	801640c <rcl_timer_init>
 800f0fe:	b910      	cbnz	r0, 800f106 <rclc_timer_init_default+0x42>
 800f100:	b00b      	add	sp, #44	; 0x2c
 800f102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f106:	9009      	str	r0, [sp, #36]	; 0x24
 800f108:	f000 f940 	bl	800f38c <rcutils_reset_error>
 800f10c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f10e:	b00b      	add	sp, #44	; 0x2c
 800f110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f114:	200b      	movs	r0, #11
 800f116:	b00b      	add	sp, #44	; 0x2c
 800f118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f11c:	200b      	movs	r0, #11
 800f11e:	4770      	bx	lr

0800f120 <__default_zero_allocate>:
 800f120:	f00a ba36 	b.w	8019590 <calloc>

0800f124 <__default_reallocate>:
 800f124:	f00a beae 	b.w	8019e84 <realloc>

0800f128 <__default_deallocate>:
 800f128:	f00a bb24 	b.w	8019774 <free>

0800f12c <__default_allocate>:
 800f12c:	f00a bb1a 	b.w	8019764 <malloc>

0800f130 <rcutils_get_zero_initialized_allocator>:
 800f130:	b470      	push	{r4, r5, r6}
 800f132:	4d05      	ldr	r5, [pc, #20]	; (800f148 <rcutils_get_zero_initialized_allocator+0x18>)
 800f134:	4606      	mov	r6, r0
 800f136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f138:	4634      	mov	r4, r6
 800f13a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f13c:	682b      	ldr	r3, [r5, #0]
 800f13e:	6023      	str	r3, [r4, #0]
 800f140:	4630      	mov	r0, r6
 800f142:	bc70      	pop	{r4, r5, r6}
 800f144:	4770      	bx	lr
 800f146:	bf00      	nop
 800f148:	0801ee48 	.word	0x0801ee48

0800f14c <rcutils_set_default_allocator>:
 800f14c:	b1a0      	cbz	r0, 800f178 <rcutils_set_default_allocator+0x2c>
 800f14e:	6801      	ldr	r1, [r0, #0]
 800f150:	b199      	cbz	r1, 800f17a <rcutils_set_default_allocator+0x2e>
 800f152:	b430      	push	{r4, r5}
 800f154:	6844      	ldr	r4, [r0, #4]
 800f156:	b194      	cbz	r4, 800f17e <rcutils_set_default_allocator+0x32>
 800f158:	68c5      	ldr	r5, [r0, #12]
 800f15a:	b15d      	cbz	r5, 800f174 <rcutils_set_default_allocator+0x28>
 800f15c:	6883      	ldr	r3, [r0, #8]
 800f15e:	b18b      	cbz	r3, 800f184 <rcutils_set_default_allocator+0x38>
 800f160:	4a09      	ldr	r2, [pc, #36]	; (800f188 <rcutils_set_default_allocator+0x3c>)
 800f162:	e9c2 1400 	strd	r1, r4, [r2]
 800f166:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800f16a:	2000      	movs	r0, #0
 800f16c:	6110      	str	r0, [r2, #16]
 800f16e:	2001      	movs	r0, #1
 800f170:	bc30      	pop	{r4, r5}
 800f172:	4770      	bx	lr
 800f174:	4628      	mov	r0, r5
 800f176:	e7fb      	b.n	800f170 <rcutils_set_default_allocator+0x24>
 800f178:	4770      	bx	lr
 800f17a:	4608      	mov	r0, r1
 800f17c:	4770      	bx	lr
 800f17e:	4620      	mov	r0, r4
 800f180:	bc30      	pop	{r4, r5}
 800f182:	4770      	bx	lr
 800f184:	4618      	mov	r0, r3
 800f186:	e7f3      	b.n	800f170 <rcutils_set_default_allocator+0x24>
 800f188:	20000034 	.word	0x20000034

0800f18c <rcutils_get_default_allocator>:
 800f18c:	b470      	push	{r4, r5, r6}
 800f18e:	4d05      	ldr	r5, [pc, #20]	; (800f1a4 <rcutils_get_default_allocator+0x18>)
 800f190:	4606      	mov	r6, r0
 800f192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f194:	4634      	mov	r4, r6
 800f196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f198:	682b      	ldr	r3, [r5, #0]
 800f19a:	6023      	str	r3, [r4, #0]
 800f19c:	4630      	mov	r0, r6
 800f19e:	bc70      	pop	{r4, r5, r6}
 800f1a0:	4770      	bx	lr
 800f1a2:	bf00      	nop
 800f1a4:	20000034 	.word	0x20000034

0800f1a8 <rcutils_allocator_is_valid>:
 800f1a8:	b158      	cbz	r0, 800f1c2 <rcutils_allocator_is_valid+0x1a>
 800f1aa:	6803      	ldr	r3, [r0, #0]
 800f1ac:	b143      	cbz	r3, 800f1c0 <rcutils_allocator_is_valid+0x18>
 800f1ae:	6843      	ldr	r3, [r0, #4]
 800f1b0:	b133      	cbz	r3, 800f1c0 <rcutils_allocator_is_valid+0x18>
 800f1b2:	68c3      	ldr	r3, [r0, #12]
 800f1b4:	b123      	cbz	r3, 800f1c0 <rcutils_allocator_is_valid+0x18>
 800f1b6:	6880      	ldr	r0, [r0, #8]
 800f1b8:	3800      	subs	r0, #0
 800f1ba:	bf18      	it	ne
 800f1bc:	2001      	movne	r0, #1
 800f1be:	4770      	bx	lr
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	4770      	bx	lr

0800f1c4 <__rcutils_format_error_string>:
 800f1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1c8:	460e      	mov	r6, r1
 800f1ca:	b086      	sub	sp, #24
 800f1cc:	4607      	mov	r7, r0
 800f1ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f1d2:	4630      	mov	r0, r6
 800f1d4:	f00a ff60 	bl	801a098 <strnlen>
 800f1d8:	f240 38ff 	movw	r8, #1023	; 0x3ff
 800f1dc:	4540      	cmp	r0, r8
 800f1de:	bf28      	it	cs
 800f1e0:	4640      	movcs	r0, r8
 800f1e2:	4605      	mov	r5, r0
 800f1e4:	f5c5 6480 	rsb	r4, r5, #1024	; 0x400
 800f1e8:	462a      	mov	r2, r5
 800f1ea:	4631      	mov	r1, r6
 800f1ec:	4638      	mov	r0, r7
 800f1ee:	f00a fad7 	bl	80197a0 <memmove>
 800f1f2:	2c05      	cmp	r4, #5
 800f1f4:	46a1      	mov	r9, r4
 800f1f6:	bf28      	it	cs
 800f1f8:	f04f 0905 	movcs.w	r9, #5
 800f1fc:	454c      	cmp	r4, r9
 800f1fe:	f04f 0300 	mov.w	r3, #0
 800f202:	bf98      	it	ls
 800f204:	eba8 0905 	subls.w	r9, r8, r5
 800f208:	557b      	strb	r3, [r7, r5]
 800f20a:	442f      	add	r7, r5
 800f20c:	4949      	ldr	r1, [pc, #292]	; (800f334 <__rcutils_format_error_string+0x170>)
 800f20e:	eba4 0409 	sub.w	r4, r4, r9
 800f212:	464a      	mov	r2, r9
 800f214:	4638      	mov	r0, r7
 800f216:	f04f 0800 	mov.w	r8, #0
 800f21a:	f506 7540 	add.w	r5, r6, #768	; 0x300
 800f21e:	f00a fab1 	bl	8019784 <memcpy>
 800f222:	f807 8009 	strb.w	r8, [r7, r9]
 800f226:	4621      	mov	r1, r4
 800f228:	4628      	mov	r0, r5
 800f22a:	f00a ff35 	bl	801a098 <strnlen>
 800f22e:	4284      	cmp	r4, r0
 800f230:	4682      	mov	sl, r0
 800f232:	444f      	add	r7, r9
 800f234:	d96b      	bls.n	800f30e <__rcutils_format_error_string+0x14a>
 800f236:	1a24      	subs	r4, r4, r0
 800f238:	2c01      	cmp	r4, #1
 800f23a:	4629      	mov	r1, r5
 800f23c:	4602      	mov	r2, r0
 800f23e:	4625      	mov	r5, r4
 800f240:	4638      	mov	r0, r7
 800f242:	bf28      	it	cs
 800f244:	2501      	movcs	r5, #1
 800f246:	f00a faab 	bl	80197a0 <memmove>
 800f24a:	42ac      	cmp	r4, r5
 800f24c:	f807 800a 	strb.w	r8, [r7, sl]
 800f250:	eb07 030a 	add.w	r3, r7, sl
 800f254:	bf88      	it	hi
 800f256:	1b64      	subhi	r4, r4, r5
 800f258:	d963      	bls.n	800f322 <__rcutils_format_error_string+0x15e>
 800f25a:	4618      	mov	r0, r3
 800f25c:	4936      	ldr	r1, [pc, #216]	; (800f338 <__rcutils_format_error_string+0x174>)
 800f25e:	462a      	mov	r2, r5
 800f260:	f00a fa90 	bl	8019784 <memcpy>
 800f264:	f04f 0800 	mov.w	r8, #0
 800f268:	f800 8005 	strb.w	r8, [r0, r5]
 800f26c:	e9d6 67fa 	ldrd	r6, r7, [r6, #1000]	; 0x3e8
 800f270:	ea56 0307 	orrs.w	r3, r6, r7
 800f274:	eb00 0a05 	add.w	sl, r0, r5
 800f278:	d056      	beq.n	800f328 <__rcutils_format_error_string+0x164>
 800f27a:	46e9      	mov	r9, sp
 800f27c:	464d      	mov	r5, r9
 800f27e:	4630      	mov	r0, r6
 800f280:	4639      	mov	r1, r7
 800f282:	220a      	movs	r2, #10
 800f284:	2300      	movs	r3, #0
 800f286:	f7f1 fd5f 	bl	8000d48 <__aeabi_uldivmod>
 800f28a:	3230      	adds	r2, #48	; 0x30
 800f28c:	f805 2b01 	strb.w	r2, [r5], #1
 800f290:	2300      	movs	r3, #0
 800f292:	220a      	movs	r2, #10
 800f294:	4630      	mov	r0, r6
 800f296:	4639      	mov	r1, r7
 800f298:	f7f1 fd56 	bl	8000d48 <__aeabi_uldivmod>
 800f29c:	463b      	mov	r3, r7
 800f29e:	4632      	mov	r2, r6
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	bf08      	it	eq
 800f2a4:	2a0a      	cmpeq	r2, #10
 800f2a6:	f108 0801 	add.w	r8, r8, #1
 800f2aa:	4606      	mov	r6, r0
 800f2ac:	460f      	mov	r7, r1
 800f2ae:	d2e6      	bcs.n	800f27e <__rcutils_format_error_string+0xba>
 800f2b0:	ab06      	add	r3, sp, #24
 800f2b2:	4498      	add	r8, r3
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	2115      	movs	r1, #21
 800f2b8:	f808 3c18 	strb.w	r3, [r8, #-24]
 800f2bc:	4648      	mov	r0, r9
 800f2be:	f00a feeb 	bl	801a098 <strnlen>
 800f2c2:	2801      	cmp	r0, #1
 800f2c4:	d90f      	bls.n	800f2e6 <__rcutils_format_error_string+0x122>
 800f2c6:	1e43      	subs	r3, r0, #1
 800f2c8:	f10d 32ff 	add.w	r2, sp, #4294967295	; 0xffffffff
 800f2cc:	4410      	add	r0, r2
 800f2ce:	444b      	add	r3, r9
 800f2d0:	464a      	mov	r2, r9
 800f2d2:	7811      	ldrb	r1, [r2, #0]
 800f2d4:	781d      	ldrb	r5, [r3, #0]
 800f2d6:	f802 5b01 	strb.w	r5, [r2], #1
 800f2da:	f803 1901 	strb.w	r1, [r3], #-1
 800f2de:	1a81      	subs	r1, r0, r2
 800f2e0:	1ac5      	subs	r5, r0, r3
 800f2e2:	428d      	cmp	r5, r1
 800f2e4:	d3f5      	bcc.n	800f2d2 <__rcutils_format_error_string+0x10e>
 800f2e6:	4621      	mov	r1, r4
 800f2e8:	4648      	mov	r0, r9
 800f2ea:	f00a fed5 	bl	801a098 <strnlen>
 800f2ee:	42a0      	cmp	r0, r4
 800f2f0:	4605      	mov	r5, r0
 800f2f2:	bf28      	it	cs
 800f2f4:	f104 35ff 	addcs.w	r5, r4, #4294967295	; 0xffffffff
 800f2f8:	4649      	mov	r1, r9
 800f2fa:	462a      	mov	r2, r5
 800f2fc:	4650      	mov	r0, sl
 800f2fe:	f00a fa41 	bl	8019784 <memcpy>
 800f302:	2300      	movs	r3, #0
 800f304:	f80a 3005 	strb.w	r3, [sl, r5]
 800f308:	b006      	add	sp, #24
 800f30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f30e:	3c01      	subs	r4, #1
 800f310:	4622      	mov	r2, r4
 800f312:	4629      	mov	r1, r5
 800f314:	4638      	mov	r0, r7
 800f316:	f00a fa43 	bl	80197a0 <memmove>
 800f31a:	f807 8004 	strb.w	r8, [r7, r4]
 800f31e:	193b      	adds	r3, r7, r4
 800f320:	2401      	movs	r4, #1
 800f322:	1e65      	subs	r5, r4, #1
 800f324:	2401      	movs	r4, #1
 800f326:	e798      	b.n	800f25a <__rcutils_format_error_string+0x96>
 800f328:	2330      	movs	r3, #48	; 0x30
 800f32a:	f8ad 3000 	strh.w	r3, [sp]
 800f32e:	46e9      	mov	r9, sp
 800f330:	e7d9      	b.n	800f2e6 <__rcutils_format_error_string+0x122>
 800f332:	bf00      	nop
 800f334:	0801ee5c 	.word	0x0801ee5c
 800f338:	0801ee64 	.word	0x0801ee64

0800f33c <rcutils_get_error_string>:
 800f33c:	b538      	push	{r3, r4, r5, lr}
 800f33e:	4b0e      	ldr	r3, [pc, #56]	; (800f378 <rcutils_get_error_string+0x3c>)
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	4604      	mov	r4, r0
 800f344:	b18b      	cbz	r3, 800f36a <rcutils_get_error_string+0x2e>
 800f346:	4d0d      	ldr	r5, [pc, #52]	; (800f37c <rcutils_get_error_string+0x40>)
 800f348:	782b      	ldrb	r3, [r5, #0]
 800f34a:	b13b      	cbz	r3, 800f35c <rcutils_get_error_string+0x20>
 800f34c:	490c      	ldr	r1, [pc, #48]	; (800f380 <rcutils_get_error_string+0x44>)
 800f34e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f352:	4620      	mov	r0, r4
 800f354:	f00a fa16 	bl	8019784 <memcpy>
 800f358:	4620      	mov	r0, r4
 800f35a:	bd38      	pop	{r3, r4, r5, pc}
 800f35c:	4909      	ldr	r1, [pc, #36]	; (800f384 <rcutils_get_error_string+0x48>)
 800f35e:	4808      	ldr	r0, [pc, #32]	; (800f380 <rcutils_get_error_string+0x44>)
 800f360:	f7ff ff30 	bl	800f1c4 <__rcutils_format_error_string>
 800f364:	2301      	movs	r3, #1
 800f366:	702b      	strb	r3, [r5, #0]
 800f368:	e7f0      	b.n	800f34c <rcutils_get_error_string+0x10>
 800f36a:	4907      	ldr	r1, [pc, #28]	; (800f388 <rcutils_get_error_string+0x4c>)
 800f36c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f370:	f00a fa08 	bl	8019784 <memcpy>
 800f374:	4620      	mov	r0, r4
 800f376:	bd38      	pop	{r3, r4, r5, pc}
 800f378:	20010420 	.word	0x20010420
 800f37c:	20010421 	.word	0x20010421
 800f380:	20010ea0 	.word	0x20010ea0
 800f384:	200112a0 	.word	0x200112a0
 800f388:	0801e6f0 	.word	0x0801e6f0

0800f38c <rcutils_reset_error>:
 800f38c:	b510      	push	{r4, lr}
 800f38e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800f392:	2100      	movs	r1, #0
 800f394:	4807      	ldr	r0, [pc, #28]	; (800f3b4 <rcutils_reset_error+0x28>)
 800f396:	f00a fa1d 	bl	80197d4 <memset>
 800f39a:	4b07      	ldr	r3, [pc, #28]	; (800f3b8 <rcutils_reset_error+0x2c>)
 800f39c:	4907      	ldr	r1, [pc, #28]	; (800f3bc <rcutils_reset_error+0x30>)
 800f39e:	4808      	ldr	r0, [pc, #32]	; (800f3c0 <rcutils_reset_error+0x34>)
 800f3a0:	2400      	movs	r4, #0
 800f3a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f3a6:	701c      	strb	r4, [r3, #0]
 800f3a8:	f00a f9ec 	bl	8019784 <memcpy>
 800f3ac:	4b05      	ldr	r3, [pc, #20]	; (800f3c4 <rcutils_reset_error+0x38>)
 800f3ae:	701c      	strb	r4, [r3, #0]
 800f3b0:	bd10      	pop	{r4, pc}
 800f3b2:	bf00      	nop
 800f3b4:	200112a0 	.word	0x200112a0
 800f3b8:	20010421 	.word	0x20010421
 800f3bc:	0801def0 	.word	0x0801def0
 800f3c0:	20010ea0 	.word	0x20010ea0
 800f3c4:	20010420 	.word	0x20010420

0800f3c8 <rcutils_get_zero_initialized_string_map>:
 800f3c8:	4b01      	ldr	r3, [pc, #4]	; (800f3d0 <rcutils_get_zero_initialized_string_map+0x8>)
 800f3ca:	2000      	movs	r0, #0
 800f3cc:	6018      	str	r0, [r3, #0]
 800f3ce:	4770      	bx	lr
 800f3d0:	20010424 	.word	0x20010424

0800f3d4 <rcutils_string_map_reserve>:
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	d061      	beq.n	800f49c <rcutils_string_map_reserve+0xc8>
 800f3d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f3dc:	6805      	ldr	r5, [r0, #0]
 800f3de:	b083      	sub	sp, #12
 800f3e0:	460c      	mov	r4, r1
 800f3e2:	4606      	mov	r6, r0
 800f3e4:	b12d      	cbz	r5, 800f3f2 <rcutils_string_map_reserve+0x1e>
 800f3e6:	68eb      	ldr	r3, [r5, #12]
 800f3e8:	42a3      	cmp	r3, r4
 800f3ea:	d906      	bls.n	800f3fa <rcutils_string_map_reserve+0x26>
 800f3ec:	461c      	mov	r4, r3
 800f3ee:	2d00      	cmp	r5, #0
 800f3f0:	d1f9      	bne.n	800f3e6 <rcutils_string_map_reserve+0x12>
 800f3f2:	201f      	movs	r0, #31
 800f3f4:	b003      	add	sp, #12
 800f3f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3fa:	68ab      	ldr	r3, [r5, #8]
 800f3fc:	42a3      	cmp	r3, r4
 800f3fe:	d049      	beq.n	800f494 <rcutils_string_map_reserve+0xc0>
 800f400:	6a2f      	ldr	r7, [r5, #32]
 800f402:	2c00      	cmp	r4, #0
 800f404:	d035      	beq.n	800f472 <rcutils_string_map_reserve+0x9e>
 800f406:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800f40a:	d245      	bcs.n	800f498 <rcutils_string_map_reserve+0xc4>
 800f40c:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800f410:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800f414:	6828      	ldr	r0, [r5, #0]
 800f416:	4641      	mov	r1, r8
 800f418:	463a      	mov	r2, r7
 800f41a:	47c8      	blx	r9
 800f41c:	2800      	cmp	r0, #0
 800f41e:	d03b      	beq.n	800f498 <rcutils_string_map_reserve+0xc4>
 800f420:	6833      	ldr	r3, [r6, #0]
 800f422:	463a      	mov	r2, r7
 800f424:	6018      	str	r0, [r3, #0]
 800f426:	4641      	mov	r1, r8
 800f428:	6858      	ldr	r0, [r3, #4]
 800f42a:	47c8      	blx	r9
 800f42c:	2800      	cmp	r0, #0
 800f42e:	d033      	beq.n	800f498 <rcutils_string_map_reserve+0xc4>
 800f430:	6835      	ldr	r5, [r6, #0]
 800f432:	68ab      	ldr	r3, [r5, #8]
 800f434:	6068      	str	r0, [r5, #4]
 800f436:	42a3      	cmp	r3, r4
 800f438:	d227      	bcs.n	800f48a <rcutils_string_map_reserve+0xb6>
 800f43a:	682a      	ldr	r2, [r5, #0]
 800f43c:	eb00 0108 	add.w	r1, r0, r8
 800f440:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800f444:	428f      	cmp	r7, r1
 800f446:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800f44a:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800f44e:	d203      	bcs.n	800f458 <rcutils_string_map_reserve+0x84>
 800f450:	eb02 0108 	add.w	r1, r2, r8
 800f454:	428e      	cmp	r6, r1
 800f456:	d323      	bcc.n	800f4a0 <rcutils_string_map_reserve+0xcc>
 800f458:	1ae3      	subs	r3, r4, r3
 800f45a:	009a      	lsls	r2, r3, #2
 800f45c:	4638      	mov	r0, r7
 800f45e:	2100      	movs	r1, #0
 800f460:	9201      	str	r2, [sp, #4]
 800f462:	f00a f9b7 	bl	80197d4 <memset>
 800f466:	9a01      	ldr	r2, [sp, #4]
 800f468:	4630      	mov	r0, r6
 800f46a:	2100      	movs	r1, #0
 800f46c:	f00a f9b2 	bl	80197d4 <memset>
 800f470:	e00b      	b.n	800f48a <rcutils_string_map_reserve+0xb6>
 800f472:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800f476:	6828      	ldr	r0, [r5, #0]
 800f478:	4639      	mov	r1, r7
 800f47a:	47c0      	blx	r8
 800f47c:	6833      	ldr	r3, [r6, #0]
 800f47e:	4639      	mov	r1, r7
 800f480:	6858      	ldr	r0, [r3, #4]
 800f482:	601c      	str	r4, [r3, #0]
 800f484:	47c0      	blx	r8
 800f486:	6835      	ldr	r5, [r6, #0]
 800f488:	606c      	str	r4, [r5, #4]
 800f48a:	2000      	movs	r0, #0
 800f48c:	60ac      	str	r4, [r5, #8]
 800f48e:	b003      	add	sp, #12
 800f490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f494:	2000      	movs	r0, #0
 800f496:	e7ad      	b.n	800f3f4 <rcutils_string_map_reserve+0x20>
 800f498:	200a      	movs	r0, #10
 800f49a:	e7ab      	b.n	800f3f4 <rcutils_string_map_reserve+0x20>
 800f49c:	200b      	movs	r0, #11
 800f49e:	4770      	bx	lr
 800f4a0:	1f13      	subs	r3, r2, #4
 800f4a2:	f1ac 0c04 	sub.w	ip, ip, #4
 800f4a6:	4498      	add	r8, r3
 800f4a8:	4460      	add	r0, ip
 800f4aa:	4462      	add	r2, ip
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	f842 3f04 	str.w	r3, [r2, #4]!
 800f4b2:	4542      	cmp	r2, r8
 800f4b4:	f840 3f04 	str.w	r3, [r0, #4]!
 800f4b8:	d1f9      	bne.n	800f4ae <rcutils_string_map_reserve+0xda>
 800f4ba:	e7e6      	b.n	800f48a <rcutils_string_map_reserve+0xb6>

0800f4bc <rcutils_string_map_init>:
 800f4bc:	b082      	sub	sp, #8
 800f4be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4c0:	460e      	mov	r6, r1
 800f4c2:	a906      	add	r1, sp, #24
 800f4c4:	e881 000c 	stmia.w	r1, {r2, r3}
 800f4c8:	b380      	cbz	r0, 800f52c <rcutils_string_map_init+0x70>
 800f4ca:	6807      	ldr	r7, [r0, #0]
 800f4cc:	4604      	mov	r4, r0
 800f4ce:	b12f      	cbz	r7, 800f4dc <rcutils_string_map_init+0x20>
 800f4d0:	251e      	movs	r5, #30
 800f4d2:	4628      	mov	r0, r5
 800f4d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f4d8:	b002      	add	sp, #8
 800f4da:	4770      	bx	lr
 800f4dc:	a806      	add	r0, sp, #24
 800f4de:	f7ff fe63 	bl	800f1a8 <rcutils_allocator_is_valid>
 800f4e2:	b318      	cbz	r0, 800f52c <rcutils_string_map_init+0x70>
 800f4e4:	9b06      	ldr	r3, [sp, #24]
 800f4e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f4e8:	2024      	movs	r0, #36	; 0x24
 800f4ea:	4798      	blx	r3
 800f4ec:	4605      	mov	r5, r0
 800f4ee:	6020      	str	r0, [r4, #0]
 800f4f0:	b310      	cbz	r0, 800f538 <rcutils_string_map_init+0x7c>
 800f4f2:	f10d 0e18 	add.w	lr, sp, #24
 800f4f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f4fa:	f105 0c10 	add.w	ip, r5, #16
 800f4fe:	e9c5 7700 	strd	r7, r7, [r5]
 800f502:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800f506:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f50a:	f8de 3000 	ldr.w	r3, [lr]
 800f50e:	f8cc 3000 	str.w	r3, [ip]
 800f512:	4631      	mov	r1, r6
 800f514:	4620      	mov	r0, r4
 800f516:	f7ff ff5d 	bl	800f3d4 <rcutils_string_map_reserve>
 800f51a:	4605      	mov	r5, r0
 800f51c:	2800      	cmp	r0, #0
 800f51e:	d0d8      	beq.n	800f4d2 <rcutils_string_map_init+0x16>
 800f520:	9b07      	ldr	r3, [sp, #28]
 800f522:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f524:	6820      	ldr	r0, [r4, #0]
 800f526:	4798      	blx	r3
 800f528:	6027      	str	r7, [r4, #0]
 800f52a:	e7d2      	b.n	800f4d2 <rcutils_string_map_init+0x16>
 800f52c:	250b      	movs	r5, #11
 800f52e:	4628      	mov	r0, r5
 800f530:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f534:	b002      	add	sp, #8
 800f536:	4770      	bx	lr
 800f538:	250a      	movs	r5, #10
 800f53a:	e7ca      	b.n	800f4d2 <rcutils_string_map_init+0x16>

0800f53c <rcutils_string_map_fini>:
 800f53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f540:	b082      	sub	sp, #8
 800f542:	2800      	cmp	r0, #0
 800f544:	d039      	beq.n	800f5ba <rcutils_string_map_fini+0x7e>
 800f546:	6804      	ldr	r4, [r0, #0]
 800f548:	4606      	mov	r6, r0
 800f54a:	2c00      	cmp	r4, #0
 800f54c:	d031      	beq.n	800f5b2 <rcutils_string_map_fini+0x76>
 800f54e:	68a3      	ldr	r3, [r4, #8]
 800f550:	b323      	cbz	r3, 800f59c <rcutils_string_map_fini+0x60>
 800f552:	2500      	movs	r5, #0
 800f554:	6822      	ldr	r2, [r4, #0]
 800f556:	46a8      	mov	r8, r5
 800f558:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800f55c:	b1d8      	cbz	r0, 800f596 <rcutils_string_map_fini+0x5a>
 800f55e:	6a21      	ldr	r1, [r4, #32]
 800f560:	6967      	ldr	r7, [r4, #20]
 800f562:	9101      	str	r1, [sp, #4]
 800f564:	47b8      	blx	r7
 800f566:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f56a:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800f56e:	9901      	ldr	r1, [sp, #4]
 800f570:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f574:	47b8      	blx	r7
 800f576:	68e3      	ldr	r3, [r4, #12]
 800f578:	6862      	ldr	r2, [r4, #4]
 800f57a:	3b01      	subs	r3, #1
 800f57c:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800f580:	60e3      	str	r3, [r4, #12]
 800f582:	6834      	ldr	r4, [r6, #0]
 800f584:	68a3      	ldr	r3, [r4, #8]
 800f586:	3501      	adds	r5, #1
 800f588:	429d      	cmp	r5, r3
 800f58a:	d207      	bcs.n	800f59c <rcutils_string_map_fini+0x60>
 800f58c:	6822      	ldr	r2, [r4, #0]
 800f58e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800f592:	2800      	cmp	r0, #0
 800f594:	d1e3      	bne.n	800f55e <rcutils_string_map_fini+0x22>
 800f596:	3501      	adds	r5, #1
 800f598:	429d      	cmp	r5, r3
 800f59a:	d3dd      	bcc.n	800f558 <rcutils_string_map_fini+0x1c>
 800f59c:	2100      	movs	r1, #0
 800f59e:	4630      	mov	r0, r6
 800f5a0:	f7ff ff18 	bl	800f3d4 <rcutils_string_map_reserve>
 800f5a4:	4604      	mov	r4, r0
 800f5a6:	b920      	cbnz	r0, 800f5b2 <rcutils_string_map_fini+0x76>
 800f5a8:	6830      	ldr	r0, [r6, #0]
 800f5aa:	6943      	ldr	r3, [r0, #20]
 800f5ac:	6a01      	ldr	r1, [r0, #32]
 800f5ae:	4798      	blx	r3
 800f5b0:	6034      	str	r4, [r6, #0]
 800f5b2:	4620      	mov	r0, r4
 800f5b4:	b002      	add	sp, #8
 800f5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ba:	240b      	movs	r4, #11
 800f5bc:	4620      	mov	r0, r4
 800f5be:	b002      	add	sp, #8
 800f5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f5c4 <rcutils_string_map_getn>:
 800f5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5c8:	b082      	sub	sp, #8
 800f5ca:	b308      	cbz	r0, 800f610 <rcutils_string_map_getn+0x4c>
 800f5cc:	6804      	ldr	r4, [r0, #0]
 800f5ce:	b304      	cbz	r4, 800f612 <rcutils_string_map_getn+0x4e>
 800f5d0:	460d      	mov	r5, r1
 800f5d2:	b1e9      	cbz	r1, 800f610 <rcutils_string_map_getn+0x4c>
 800f5d4:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800f5d8:	6827      	ldr	r7, [r4, #0]
 800f5da:	f1b9 0f00 	cmp.w	r9, #0
 800f5de:	d017      	beq.n	800f610 <rcutils_string_map_getn+0x4c>
 800f5e0:	4690      	mov	r8, r2
 800f5e2:	3f04      	subs	r7, #4
 800f5e4:	2600      	movs	r6, #0
 800f5e6:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800f5ea:	9101      	str	r1, [sp, #4]
 800f5ec:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800f5f0:	4608      	mov	r0, r1
 800f5f2:	3601      	adds	r6, #1
 800f5f4:	b151      	cbz	r1, 800f60c <rcutils_string_map_getn+0x48>
 800f5f6:	f7f0 fdf5 	bl	80001e4 <strlen>
 800f5fa:	4540      	cmp	r0, r8
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	9901      	ldr	r1, [sp, #4]
 800f600:	bf38      	it	cc
 800f602:	4642      	movcc	r2, r8
 800f604:	4628      	mov	r0, r5
 800f606:	f00a fd35 	bl	801a074 <strncmp>
 800f60a:	b130      	cbz	r0, 800f61a <rcutils_string_map_getn+0x56>
 800f60c:	45b1      	cmp	r9, r6
 800f60e:	d1ea      	bne.n	800f5e6 <rcutils_string_map_getn+0x22>
 800f610:	2400      	movs	r4, #0
 800f612:	4620      	mov	r0, r4
 800f614:	b002      	add	sp, #8
 800f616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f61a:	6863      	ldr	r3, [r4, #4]
 800f61c:	f853 400a 	ldr.w	r4, [r3, sl]
 800f620:	4620      	mov	r0, r4
 800f622:	b002      	add	sp, #8
 800f624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f628 <rcutils_system_time_now>:
 800f628:	b310      	cbz	r0, 800f670 <rcutils_system_time_now+0x48>
 800f62a:	b570      	push	{r4, r5, r6, lr}
 800f62c:	b084      	sub	sp, #16
 800f62e:	4669      	mov	r1, sp
 800f630:	4604      	mov	r4, r0
 800f632:	2001      	movs	r0, #1
 800f634:	f7f3 fa8c 	bl	8002b50 <clock_gettime>
 800f638:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f63c:	2800      	cmp	r0, #0
 800f63e:	f171 0300 	sbcs.w	r3, r1, #0
 800f642:	db12      	blt.n	800f66a <rcutils_system_time_now+0x42>
 800f644:	9d02      	ldr	r5, [sp, #8]
 800f646:	2d00      	cmp	r5, #0
 800f648:	db0c      	blt.n	800f664 <rcutils_system_time_now+0x3c>
 800f64a:	4e0a      	ldr	r6, [pc, #40]	; (800f674 <rcutils_system_time_now+0x4c>)
 800f64c:	fba0 2306 	umull	r2, r3, r0, r6
 800f650:	1952      	adds	r2, r2, r5
 800f652:	fb06 3301 	mla	r3, r6, r1, r3
 800f656:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800f65a:	2000      	movs	r0, #0
 800f65c:	e9c4 2300 	strd	r2, r3, [r4]
 800f660:	b004      	add	sp, #16
 800f662:	bd70      	pop	{r4, r5, r6, pc}
 800f664:	ea50 0301 	orrs.w	r3, r0, r1
 800f668:	d1ef      	bne.n	800f64a <rcutils_system_time_now+0x22>
 800f66a:	2002      	movs	r0, #2
 800f66c:	b004      	add	sp, #16
 800f66e:	bd70      	pop	{r4, r5, r6, pc}
 800f670:	200b      	movs	r0, #11
 800f672:	4770      	bx	lr
 800f674:	3b9aca00 	.word	0x3b9aca00

0800f678 <rcutils_steady_time_now>:
 800f678:	b310      	cbz	r0, 800f6c0 <rcutils_steady_time_now+0x48>
 800f67a:	b570      	push	{r4, r5, r6, lr}
 800f67c:	b084      	sub	sp, #16
 800f67e:	4669      	mov	r1, sp
 800f680:	4604      	mov	r4, r0
 800f682:	2000      	movs	r0, #0
 800f684:	f7f3 fa64 	bl	8002b50 <clock_gettime>
 800f688:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f68c:	2800      	cmp	r0, #0
 800f68e:	f171 0300 	sbcs.w	r3, r1, #0
 800f692:	db12      	blt.n	800f6ba <rcutils_steady_time_now+0x42>
 800f694:	9d02      	ldr	r5, [sp, #8]
 800f696:	2d00      	cmp	r5, #0
 800f698:	db0c      	blt.n	800f6b4 <rcutils_steady_time_now+0x3c>
 800f69a:	4e0a      	ldr	r6, [pc, #40]	; (800f6c4 <rcutils_steady_time_now+0x4c>)
 800f69c:	fba0 2306 	umull	r2, r3, r0, r6
 800f6a0:	1952      	adds	r2, r2, r5
 800f6a2:	fb06 3301 	mla	r3, r6, r1, r3
 800f6a6:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800f6aa:	2000      	movs	r0, #0
 800f6ac:	e9c4 2300 	strd	r2, r3, [r4]
 800f6b0:	b004      	add	sp, #16
 800f6b2:	bd70      	pop	{r4, r5, r6, pc}
 800f6b4:	ea50 0301 	orrs.w	r3, r0, r1
 800f6b8:	d1ef      	bne.n	800f69a <rcutils_steady_time_now+0x22>
 800f6ba:	2002      	movs	r0, #2
 800f6bc:	b004      	add	sp, #16
 800f6be:	bd70      	pop	{r4, r5, r6, pc}
 800f6c0:	200b      	movs	r0, #11
 800f6c2:	4770      	bx	lr
 800f6c4:	3b9aca00 	.word	0x3b9aca00

0800f6c8 <rmw_get_zero_initialized_init_options>:
 800f6c8:	b510      	push	{r4, lr}
 800f6ca:	2238      	movs	r2, #56	; 0x38
 800f6cc:	4604      	mov	r4, r0
 800f6ce:	2100      	movs	r1, #0
 800f6d0:	f00a f880 	bl	80197d4 <memset>
 800f6d4:	f104 0010 	add.w	r0, r4, #16
 800f6d8:	f000 f808 	bl	800f6ec <rmw_get_default_security_options>
 800f6dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6e0:	60e3      	str	r3, [r4, #12]
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	bd10      	pop	{r4, pc}
 800f6e6:	bf00      	nop

0800f6e8 <rmw_get_default_publisher_options>:
 800f6e8:	2000      	movs	r0, #0
 800f6ea:	4770      	bx	lr

0800f6ec <rmw_get_default_security_options>:
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	7002      	strb	r2, [r0, #0]
 800f6f0:	6042      	str	r2, [r0, #4]
 800f6f2:	4770      	bx	lr

0800f6f4 <rmw_get_default_subscription_options>:
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	6002      	str	r2, [r0, #0]
 800f6f8:	7102      	strb	r2, [r0, #4]
 800f6fa:	4770      	bx	lr

0800f6fc <rmw_get_zero_initialized_message_info>:
 800f6fc:	b470      	push	{r4, r5, r6}
 800f6fe:	4d07      	ldr	r5, [pc, #28]	; (800f71c <rmw_get_zero_initialized_message_info+0x20>)
 800f700:	4606      	mov	r6, r0
 800f702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f704:	4634      	mov	r4, r6
 800f706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f70a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f70c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f710:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f714:	4630      	mov	r0, r6
 800f716:	bc70      	pop	{r4, r5, r6}
 800f718:	4770      	bx	lr
 800f71a:	bf00      	nop
 800f71c:	0801eaf0 	.word	0x0801eaf0

0800f720 <rmw_validate_full_topic_name>:
 800f720:	2800      	cmp	r0, #0
 800f722:	d062      	beq.n	800f7ea <rmw_validate_full_topic_name+0xca>
 800f724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f728:	460d      	mov	r5, r1
 800f72a:	2900      	cmp	r1, #0
 800f72c:	d05f      	beq.n	800f7ee <rmw_validate_full_topic_name+0xce>
 800f72e:	4616      	mov	r6, r2
 800f730:	4604      	mov	r4, r0
 800f732:	f7f0 fd57 	bl	80001e4 <strlen>
 800f736:	b148      	cbz	r0, 800f74c <rmw_validate_full_topic_name+0x2c>
 800f738:	7823      	ldrb	r3, [r4, #0]
 800f73a:	2b2f      	cmp	r3, #47	; 0x2f
 800f73c:	d00d      	beq.n	800f75a <rmw_validate_full_topic_name+0x3a>
 800f73e:	2302      	movs	r3, #2
 800f740:	602b      	str	r3, [r5, #0]
 800f742:	b13e      	cbz	r6, 800f754 <rmw_validate_full_topic_name+0x34>
 800f744:	2000      	movs	r0, #0
 800f746:	6030      	str	r0, [r6, #0]
 800f748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f74c:	2301      	movs	r3, #1
 800f74e:	602b      	str	r3, [r5, #0]
 800f750:	2e00      	cmp	r6, #0
 800f752:	d1f7      	bne.n	800f744 <rmw_validate_full_topic_name+0x24>
 800f754:	2000      	movs	r0, #0
 800f756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f75a:	1e47      	subs	r7, r0, #1
 800f75c:	5de3      	ldrb	r3, [r4, r7]
 800f75e:	2b2f      	cmp	r3, #47	; 0x2f
 800f760:	d047      	beq.n	800f7f2 <rmw_validate_full_topic_name+0xd2>
 800f762:	1e63      	subs	r3, r4, #1
 800f764:	eb03 0900 	add.w	r9, r3, r0
 800f768:	f1c4 0e01 	rsb	lr, r4, #1
 800f76c:	eb0e 0803 	add.w	r8, lr, r3
 800f770:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f774:	f021 0220 	bic.w	r2, r1, #32
 800f778:	3a41      	subs	r2, #65	; 0x41
 800f77a:	2a19      	cmp	r2, #25
 800f77c:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800f780:	d90c      	bls.n	800f79c <rmw_validate_full_topic_name+0x7c>
 800f782:	295f      	cmp	r1, #95	; 0x5f
 800f784:	d00a      	beq.n	800f79c <rmw_validate_full_topic_name+0x7c>
 800f786:	f1bc 0f0a 	cmp.w	ip, #10
 800f78a:	d907      	bls.n	800f79c <rmw_validate_full_topic_name+0x7c>
 800f78c:	2304      	movs	r3, #4
 800f78e:	602b      	str	r3, [r5, #0]
 800f790:	2e00      	cmp	r6, #0
 800f792:	d0df      	beq.n	800f754 <rmw_validate_full_topic_name+0x34>
 800f794:	f8c6 8000 	str.w	r8, [r6]
 800f798:	2000      	movs	r0, #0
 800f79a:	e7d5      	b.n	800f748 <rmw_validate_full_topic_name+0x28>
 800f79c:	454b      	cmp	r3, r9
 800f79e:	d1e5      	bne.n	800f76c <rmw_validate_full_topic_name+0x4c>
 800f7a0:	f8df e084 	ldr.w	lr, [pc, #132]	; 800f828 <rmw_validate_full_topic_name+0x108>
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	f107 0801 	add.w	r8, r7, #1
 800f7aa:	e005      	b.n	800f7b8 <rmw_validate_full_topic_name+0x98>
 800f7ac:	4611      	mov	r1, r2
 800f7ae:	4288      	cmp	r0, r1
 800f7b0:	4613      	mov	r3, r2
 800f7b2:	f104 0401 	add.w	r4, r4, #1
 800f7b6:	d925      	bls.n	800f804 <rmw_validate_full_topic_name+0xe4>
 800f7b8:	429f      	cmp	r7, r3
 800f7ba:	f103 0201 	add.w	r2, r3, #1
 800f7be:	d01e      	beq.n	800f7fe <rmw_validate_full_topic_name+0xde>
 800f7c0:	7821      	ldrb	r1, [r4, #0]
 800f7c2:	292f      	cmp	r1, #47	; 0x2f
 800f7c4:	d1f2      	bne.n	800f7ac <rmw_validate_full_topic_name+0x8c>
 800f7c6:	f894 c001 	ldrb.w	ip, [r4, #1]
 800f7ca:	1c5a      	adds	r2, r3, #1
 800f7cc:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800f7d0:	4611      	mov	r1, r2
 800f7d2:	d024      	beq.n	800f81e <rmw_validate_full_topic_name+0xfe>
 800f7d4:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800f7d8:	075b      	lsls	r3, r3, #29
 800f7da:	d5e8      	bpl.n	800f7ae <rmw_validate_full_topic_name+0x8e>
 800f7dc:	2306      	movs	r3, #6
 800f7de:	602b      	str	r3, [r5, #0]
 800f7e0:	2e00      	cmp	r6, #0
 800f7e2:	d0b7      	beq.n	800f754 <rmw_validate_full_topic_name+0x34>
 800f7e4:	6032      	str	r2, [r6, #0]
 800f7e6:	2000      	movs	r0, #0
 800f7e8:	e7ae      	b.n	800f748 <rmw_validate_full_topic_name+0x28>
 800f7ea:	200b      	movs	r0, #11
 800f7ec:	4770      	bx	lr
 800f7ee:	200b      	movs	r0, #11
 800f7f0:	e7aa      	b.n	800f748 <rmw_validate_full_topic_name+0x28>
 800f7f2:	2303      	movs	r3, #3
 800f7f4:	602b      	str	r3, [r5, #0]
 800f7f6:	2e00      	cmp	r6, #0
 800f7f8:	d0ac      	beq.n	800f754 <rmw_validate_full_topic_name+0x34>
 800f7fa:	6037      	str	r7, [r6, #0]
 800f7fc:	e7aa      	b.n	800f754 <rmw_validate_full_topic_name+0x34>
 800f7fe:	4641      	mov	r1, r8
 800f800:	1c7a      	adds	r2, r7, #1
 800f802:	e7d4      	b.n	800f7ae <rmw_validate_full_topic_name+0x8e>
 800f804:	28f7      	cmp	r0, #247	; 0xf7
 800f806:	d802      	bhi.n	800f80e <rmw_validate_full_topic_name+0xee>
 800f808:	2000      	movs	r0, #0
 800f80a:	6028      	str	r0, [r5, #0]
 800f80c:	e79c      	b.n	800f748 <rmw_validate_full_topic_name+0x28>
 800f80e:	2307      	movs	r3, #7
 800f810:	602b      	str	r3, [r5, #0]
 800f812:	2e00      	cmp	r6, #0
 800f814:	d09e      	beq.n	800f754 <rmw_validate_full_topic_name+0x34>
 800f816:	23f6      	movs	r3, #246	; 0xf6
 800f818:	6033      	str	r3, [r6, #0]
 800f81a:	2000      	movs	r0, #0
 800f81c:	e794      	b.n	800f748 <rmw_validate_full_topic_name+0x28>
 800f81e:	2305      	movs	r3, #5
 800f820:	602b      	str	r3, [r5, #0]
 800f822:	2e00      	cmp	r6, #0
 800f824:	d1de      	bne.n	800f7e4 <rmw_validate_full_topic_name+0xc4>
 800f826:	e795      	b.n	800f754 <rmw_validate_full_topic_name+0x34>
 800f828:	0801f6a1 	.word	0x0801f6a1

0800f82c <rmw_uros_set_custom_transport>:
 800f82c:	b470      	push	{r4, r5, r6}
 800f82e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800f832:	b162      	cbz	r2, 800f84e <rmw_uros_set_custom_transport+0x22>
 800f834:	b15b      	cbz	r3, 800f84e <rmw_uros_set_custom_transport+0x22>
 800f836:	b155      	cbz	r5, 800f84e <rmw_uros_set_custom_transport+0x22>
 800f838:	b14e      	cbz	r6, 800f84e <rmw_uros_set_custom_transport+0x22>
 800f83a:	4c06      	ldr	r4, [pc, #24]	; (800f854 <rmw_uros_set_custom_transport+0x28>)
 800f83c:	7020      	strb	r0, [r4, #0]
 800f83e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800f842:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f846:	6166      	str	r6, [r4, #20]
 800f848:	2000      	movs	r0, #0
 800f84a:	bc70      	pop	{r4, r5, r6}
 800f84c:	4770      	bx	lr
 800f84e:	200b      	movs	r0, #11
 800f850:	bc70      	pop	{r4, r5, r6}
 800f852:	4770      	bx	lr
 800f854:	20011690 	.word	0x20011690

0800f858 <rmw_init_options_init>:
 800f858:	b084      	sub	sp, #16
 800f85a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f85e:	ad09      	add	r5, sp, #36	; 0x24
 800f860:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800f864:	b130      	cbz	r0, 800f874 <rmw_init_options_init+0x1c>
 800f866:	4604      	mov	r4, r0
 800f868:	4628      	mov	r0, r5
 800f86a:	f7ff fc9d 	bl	800f1a8 <rcutils_allocator_is_valid>
 800f86e:	b108      	cbz	r0, 800f874 <rmw_init_options_init+0x1c>
 800f870:	68a3      	ldr	r3, [r4, #8]
 800f872:	b123      	cbz	r3, 800f87e <rmw_init_options_init+0x26>
 800f874:	200b      	movs	r0, #11
 800f876:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f87a:	b004      	add	sp, #16
 800f87c:	4770      	bx	lr
 800f87e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f880:	4f1c      	ldr	r7, [pc, #112]	; (800f8f4 <rmw_init_options_init+0x9c>)
 800f882:	682e      	ldr	r6, [r5, #0]
 800f884:	683d      	ldr	r5, [r7, #0]
 800f886:	60a5      	str	r5, [r4, #8]
 800f888:	f04f 0800 	mov.w	r8, #0
 800f88c:	f04f 0900 	mov.w	r9, #0
 800f890:	f104 0520 	add.w	r5, r4, #32
 800f894:	e9c4 8900 	strd	r8, r9, [r4]
 800f898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f89a:	4b17      	ldr	r3, [pc, #92]	; (800f8f8 <rmw_init_options_init+0xa0>)
 800f89c:	4817      	ldr	r0, [pc, #92]	; (800f8fc <rmw_init_options_init+0xa4>)
 800f89e:	602e      	str	r6, [r5, #0]
 800f8a0:	4917      	ldr	r1, [pc, #92]	; (800f900 <rmw_init_options_init+0xa8>)
 800f8a2:	61e3      	str	r3, [r4, #28]
 800f8a4:	2203      	movs	r2, #3
 800f8a6:	f000 ff63 	bl	8010770 <rmw_uxrce_init_init_options_impl_memory>
 800f8aa:	4814      	ldr	r0, [pc, #80]	; (800f8fc <rmw_init_options_init+0xa4>)
 800f8ac:	f008 faba 	bl	8017e24 <get_memory>
 800f8b0:	b1e8      	cbz	r0, 800f8ee <rmw_init_options_init+0x96>
 800f8b2:	4a14      	ldr	r2, [pc, #80]	; (800f904 <rmw_init_options_init+0xac>)
 800f8b4:	68c3      	ldr	r3, [r0, #12]
 800f8b6:	6851      	ldr	r1, [r2, #4]
 800f8b8:	7810      	ldrb	r0, [r2, #0]
 800f8ba:	6363      	str	r3, [r4, #52]	; 0x34
 800f8bc:	7418      	strb	r0, [r3, #16]
 800f8be:	6159      	str	r1, [r3, #20]
 800f8c0:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800f8c4:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800f8c8:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800f8cc:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800f8d0:	f004 fdd4 	bl	801447c <uxr_nanos>
 800f8d4:	f00a fa68 	bl	8019da8 <srand>
 800f8d8:	f00a fa94 	bl	8019e04 <rand>
 800f8dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8de:	6298      	str	r0, [r3, #40]	; 0x28
 800f8e0:	2800      	cmp	r0, #0
 800f8e2:	d0f9      	beq.n	800f8d8 <rmw_init_options_init+0x80>
 800f8e4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8e8:	2000      	movs	r0, #0
 800f8ea:	b004      	add	sp, #16
 800f8ec:	4770      	bx	lr
 800f8ee:	2001      	movs	r0, #1
 800f8f0:	e7c1      	b.n	800f876 <rmw_init_options_init+0x1e>
 800f8f2:	bf00      	nop
 800f8f4:	0801f628 	.word	0x0801f628
 800f8f8:	0801ee68 	.word	0x0801ee68
 800f8fc:	200149ac 	.word	0x200149ac
 800f900:	20014600 	.word	0x20014600
 800f904:	20011690 	.word	0x20011690

0800f908 <rmw_init_options_copy>:
 800f908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f90a:	b158      	cbz	r0, 800f924 <rmw_init_options_copy+0x1c>
 800f90c:	460e      	mov	r6, r1
 800f90e:	b149      	cbz	r1, 800f924 <rmw_init_options_copy+0x1c>
 800f910:	4b1d      	ldr	r3, [pc, #116]	; (800f988 <rmw_init_options_copy+0x80>)
 800f912:	4604      	mov	r4, r0
 800f914:	6819      	ldr	r1, [r3, #0]
 800f916:	6880      	ldr	r0, [r0, #8]
 800f918:	f7f0 fc5a 	bl	80001d0 <strcmp>
 800f91c:	4607      	mov	r7, r0
 800f91e:	bb68      	cbnz	r0, 800f97c <rmw_init_options_copy+0x74>
 800f920:	68b3      	ldr	r3, [r6, #8]
 800f922:	b113      	cbz	r3, 800f92a <rmw_init_options_copy+0x22>
 800f924:	270b      	movs	r7, #11
 800f926:	4638      	mov	r0, r7
 800f928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f92a:	4623      	mov	r3, r4
 800f92c:	4632      	mov	r2, r6
 800f92e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800f932:	681d      	ldr	r5, [r3, #0]
 800f934:	6858      	ldr	r0, [r3, #4]
 800f936:	6899      	ldr	r1, [r3, #8]
 800f938:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800f93c:	f8c2 c00c 	str.w	ip, [r2, #12]
 800f940:	3310      	adds	r3, #16
 800f942:	4573      	cmp	r3, lr
 800f944:	6015      	str	r5, [r2, #0]
 800f946:	6050      	str	r0, [r2, #4]
 800f948:	6091      	str	r1, [r2, #8]
 800f94a:	f102 0210 	add.w	r2, r2, #16
 800f94e:	d1f0      	bne.n	800f932 <rmw_init_options_copy+0x2a>
 800f950:	6819      	ldr	r1, [r3, #0]
 800f952:	685b      	ldr	r3, [r3, #4]
 800f954:	480d      	ldr	r0, [pc, #52]	; (800f98c <rmw_init_options_copy+0x84>)
 800f956:	6053      	str	r3, [r2, #4]
 800f958:	6011      	str	r1, [r2, #0]
 800f95a:	f008 fa63 	bl	8017e24 <get_memory>
 800f95e:	b180      	cbz	r0, 800f982 <rmw_init_options_copy+0x7a>
 800f960:	68c5      	ldr	r5, [r0, #12]
 800f962:	6375      	str	r5, [r6, #52]	; 0x34
 800f964:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800f966:	3610      	adds	r6, #16
 800f968:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f96a:	f105 0410 	add.w	r4, r5, #16
 800f96e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f970:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800f974:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f978:	4638      	mov	r0, r7
 800f97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f97c:	270c      	movs	r7, #12
 800f97e:	4638      	mov	r0, r7
 800f980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f982:	2701      	movs	r7, #1
 800f984:	e7cf      	b.n	800f926 <rmw_init_options_copy+0x1e>
 800f986:	bf00      	nop
 800f988:	0801f628 	.word	0x0801f628
 800f98c:	200149ac 	.word	0x200149ac

0800f990 <rmw_init_options_fini>:
 800f990:	b570      	push	{r4, r5, r6, lr}
 800f992:	b08e      	sub	sp, #56	; 0x38
 800f994:	b348      	cbz	r0, 800f9ea <rmw_init_options_fini+0x5a>
 800f996:	4604      	mov	r4, r0
 800f998:	3020      	adds	r0, #32
 800f99a:	f7ff fc05 	bl	800f1a8 <rcutils_allocator_is_valid>
 800f99e:	b320      	cbz	r0, 800f9ea <rmw_init_options_fini+0x5a>
 800f9a0:	4b18      	ldr	r3, [pc, #96]	; (800fa04 <rmw_init_options_fini+0x74>)
 800f9a2:	68a0      	ldr	r0, [r4, #8]
 800f9a4:	6819      	ldr	r1, [r3, #0]
 800f9a6:	f7f0 fc13 	bl	80001d0 <strcmp>
 800f9aa:	4606      	mov	r6, r0
 800f9ac:	bb28      	cbnz	r0, 800f9fa <rmw_init_options_fini+0x6a>
 800f9ae:	4b16      	ldr	r3, [pc, #88]	; (800fa08 <rmw_init_options_fini+0x78>)
 800f9b0:	6819      	ldr	r1, [r3, #0]
 800f9b2:	b1f1      	cbz	r1, 800f9f2 <rmw_init_options_fini+0x62>
 800f9b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f9b6:	e001      	b.n	800f9bc <rmw_init_options_fini+0x2c>
 800f9b8:	6889      	ldr	r1, [r1, #8]
 800f9ba:	b1d1      	cbz	r1, 800f9f2 <rmw_init_options_fini+0x62>
 800f9bc:	68cb      	ldr	r3, [r1, #12]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d1fa      	bne.n	800f9b8 <rmw_init_options_fini+0x28>
 800f9c2:	4811      	ldr	r0, [pc, #68]	; (800fa08 <rmw_init_options_fini+0x78>)
 800f9c4:	f008 fa3e 	bl	8017e44 <put_memory>
 800f9c8:	466d      	mov	r5, sp
 800f9ca:	4668      	mov	r0, sp
 800f9cc:	f7ff fe7c 	bl	800f6c8 <rmw_get_zero_initialized_init_options>
 800f9d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f9d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f9d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f9d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f9d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f9da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f9dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f9e0:	e884 0003 	stmia.w	r4, {r0, r1}
 800f9e4:	4630      	mov	r0, r6
 800f9e6:	b00e      	add	sp, #56	; 0x38
 800f9e8:	bd70      	pop	{r4, r5, r6, pc}
 800f9ea:	260b      	movs	r6, #11
 800f9ec:	4630      	mov	r0, r6
 800f9ee:	b00e      	add	sp, #56	; 0x38
 800f9f0:	bd70      	pop	{r4, r5, r6, pc}
 800f9f2:	2601      	movs	r6, #1
 800f9f4:	4630      	mov	r0, r6
 800f9f6:	b00e      	add	sp, #56	; 0x38
 800f9f8:	bd70      	pop	{r4, r5, r6, pc}
 800f9fa:	260c      	movs	r6, #12
 800f9fc:	4630      	mov	r0, r6
 800f9fe:	b00e      	add	sp, #56	; 0x38
 800fa00:	bd70      	pop	{r4, r5, r6, pc}
 800fa02:	bf00      	nop
 800fa04:	0801f628 	.word	0x0801f628
 800fa08:	200149ac 	.word	0x200149ac

0800fa0c <rmw_init>:
 800fa0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa10:	b083      	sub	sp, #12
 800fa12:	2800      	cmp	r0, #0
 800fa14:	f000 80e0 	beq.w	800fbd8 <rmw_init+0x1cc>
 800fa18:	460e      	mov	r6, r1
 800fa1a:	2900      	cmp	r1, #0
 800fa1c:	f000 80dc 	beq.w	800fbd8 <rmw_init+0x1cc>
 800fa20:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fa22:	4604      	mov	r4, r0
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	f000 80d7 	beq.w	800fbd8 <rmw_init+0x1cc>
 800fa2a:	4b70      	ldr	r3, [pc, #448]	; (800fbec <rmw_init+0x1e0>)
 800fa2c:	6880      	ldr	r0, [r0, #8]
 800fa2e:	f8d3 8000 	ldr.w	r8, [r3]
 800fa32:	4641      	mov	r1, r8
 800fa34:	f7f0 fbcc 	bl	80001d0 <strcmp>
 800fa38:	4607      	mov	r7, r0
 800fa3a:	2800      	cmp	r0, #0
 800fa3c:	f040 80c7 	bne.w	800fbce <rmw_init+0x1c2>
 800fa40:	e9d4 0100 	ldrd	r0, r1, [r4]
 800fa44:	68e3      	ldr	r3, [r4, #12]
 800fa46:	61f3      	str	r3, [r6, #28]
 800fa48:	e9c6 0100 	strd	r0, r1, [r6]
 800fa4c:	2201      	movs	r2, #1
 800fa4e:	4968      	ldr	r1, [pc, #416]	; (800fbf0 <rmw_init+0x1e4>)
 800fa50:	4868      	ldr	r0, [pc, #416]	; (800fbf4 <rmw_init+0x1e8>)
 800fa52:	f8c6 8008 	str.w	r8, [r6, #8]
 800fa56:	f000 fe33 	bl	80106c0 <rmw_uxrce_init_session_memory>
 800fa5a:	4867      	ldr	r0, [pc, #412]	; (800fbf8 <rmw_init+0x1ec>)
 800fa5c:	4967      	ldr	r1, [pc, #412]	; (800fbfc <rmw_init+0x1f0>)
 800fa5e:	2204      	movs	r2, #4
 800fa60:	f000 fe68 	bl	8010734 <rmw_uxrce_init_static_input_buffer_memory>
 800fa64:	4863      	ldr	r0, [pc, #396]	; (800fbf4 <rmw_init+0x1e8>)
 800fa66:	f008 f9dd 	bl	8017e24 <get_memory>
 800fa6a:	2800      	cmp	r0, #0
 800fa6c:	f000 80b9 	beq.w	800fbe2 <rmw_init+0x1d6>
 800fa70:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
 800fa74:	68c5      	ldr	r5, [r0, #12]
 800fa76:	f8dc 0024 	ldr.w	r0, [ip, #36]	; 0x24
 800fa7a:	f89c 1010 	ldrb.w	r1, [ip, #16]
 800fa7e:	e9dc 2306 	ldrd	r2, r3, [ip, #24]
 800fa82:	9001      	str	r0, [sp, #4]
 800fa84:	f8dc 0020 	ldr.w	r0, [ip, #32]
 800fa88:	9000      	str	r0, [sp, #0]
 800fa8a:	f105 0910 	add.w	r9, r5, #16
 800fa8e:	4648      	mov	r0, r9
 800fa90:	f002 fe92 	bl	80127b8 <uxr_set_custom_transport_callbacks>
 800fa94:	f241 5394 	movw	r3, #5524	; 0x1594
 800fa98:	f241 5c98 	movw	ip, #5528	; 0x1598
 800fa9c:	f241 509c 	movw	r0, #5532	; 0x159c
 800faa0:	f505 51ad 	add.w	r1, r5, #5536	; 0x15a0
 800faa4:	50ef      	str	r7, [r5, r3]
 800faa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800faaa:	f505 735e 	add.w	r3, r5, #888	; 0x378
 800faae:	f845 700c 	str.w	r7, [r5, ip]
 800fab2:	502f      	str	r7, [r5, r0]
 800fab4:	e9c5 33e1 	strd	r3, r3, [r5, #900]	; 0x384
 800fab8:	e9c5 22e3 	strd	r2, r2, [r5, #908]	; 0x38c
 800fabc:	4850      	ldr	r0, [pc, #320]	; (800fc00 <rmw_init+0x1f4>)
 800fabe:	600f      	str	r7, [r1, #0]
 800fac0:	2201      	movs	r2, #1
 800fac2:	e9c5 87da 	strd	r8, r7, [r5, #872]	; 0x368
 800fac6:	494f      	ldr	r1, [pc, #316]	; (800fc04 <rmw_init+0x1f8>)
 800fac8:	64b5      	str	r5, [r6, #72]	; 0x48
 800faca:	f000 fddf 	bl	801068c <rmw_uxrce_init_node_memory>
 800face:	494e      	ldr	r1, [pc, #312]	; (800fc08 <rmw_init+0x1fc>)
 800fad0:	484e      	ldr	r0, [pc, #312]	; (800fc0c <rmw_init+0x200>)
 800fad2:	2205      	movs	r2, #5
 800fad4:	f000 fdc0 	bl	8010658 <rmw_uxrce_init_subscription_memory>
 800fad8:	494d      	ldr	r1, [pc, #308]	; (800fc10 <rmw_init+0x204>)
 800fada:	484e      	ldr	r0, [pc, #312]	; (800fc14 <rmw_init+0x208>)
 800fadc:	220a      	movs	r2, #10
 800fade:	f000 fda1 	bl	8010624 <rmw_uxrce_init_publisher_memory>
 800fae2:	494d      	ldr	r1, [pc, #308]	; (800fc18 <rmw_init+0x20c>)
 800fae4:	484d      	ldr	r0, [pc, #308]	; (800fc1c <rmw_init+0x210>)
 800fae6:	2201      	movs	r2, #1
 800fae8:	f000 fd68 	bl	80105bc <rmw_uxrce_init_service_memory>
 800faec:	494c      	ldr	r1, [pc, #304]	; (800fc20 <rmw_init+0x214>)
 800faee:	484d      	ldr	r0, [pc, #308]	; (800fc24 <rmw_init+0x218>)
 800faf0:	2201      	movs	r2, #1
 800faf2:	f000 fd7d 	bl	80105f0 <rmw_uxrce_init_client_memory>
 800faf6:	494c      	ldr	r1, [pc, #304]	; (800fc28 <rmw_init+0x21c>)
 800faf8:	484c      	ldr	r0, [pc, #304]	; (800fc2c <rmw_init+0x220>)
 800fafa:	220f      	movs	r2, #15
 800fafc:	f000 fdfe 	bl	80106fc <rmw_uxrce_init_topic_memory>
 800fb00:	494b      	ldr	r1, [pc, #300]	; (800fc30 <rmw_init+0x224>)
 800fb02:	484c      	ldr	r0, [pc, #304]	; (800fc34 <rmw_init+0x228>)
 800fb04:	2203      	movs	r2, #3
 800fb06:	f000 fe33 	bl	8010770 <rmw_uxrce_init_init_options_impl_memory>
 800fb0a:	494b      	ldr	r1, [pc, #300]	; (800fc38 <rmw_init+0x22c>)
 800fb0c:	484b      	ldr	r0, [pc, #300]	; (800fc3c <rmw_init+0x230>)
 800fb0e:	2204      	movs	r2, #4
 800fb10:	f000 fe48 	bl	80107a4 <rmw_uxrce_init_wait_set_memory>
 800fb14:	494a      	ldr	r1, [pc, #296]	; (800fc40 <rmw_init+0x234>)
 800fb16:	484b      	ldr	r0, [pc, #300]	; (800fc44 <rmw_init+0x238>)
 800fb18:	2204      	movs	r2, #4
 800fb1a:	f000 fe5f 	bl	80107dc <rmw_uxrce_init_guard_condition_memory>
 800fb1e:	463a      	mov	r2, r7
 800fb20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb22:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 800fb24:	f000 fd12 	bl	801054c <rmw_uxrce_transport_init>
 800fb28:	4607      	mov	r7, r0
 800fb2a:	2800      	cmp	r0, #0
 800fb2c:	d150      	bne.n	800fbd0 <rmw_init+0x1c4>
 800fb2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fb30:	f505 7428 	add.w	r4, r5, #672	; 0x2a0
 800fb34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fb36:	4620      	mov	r0, r4
 800fb38:	f505 7122 	add.w	r1, r5, #648	; 0x288
 800fb3c:	f003 fab6 	bl	80130ac <uxr_init_session>
 800fb40:	4941      	ldr	r1, [pc, #260]	; (800fc48 <rmw_init+0x23c>)
 800fb42:	462a      	mov	r2, r5
 800fb44:	4620      	mov	r0, r4
 800fb46:	f003 fad3 	bl	80130f0 <uxr_set_topic_callback>
 800fb4a:	4940      	ldr	r1, [pc, #256]	; (800fc4c <rmw_init+0x240>)
 800fb4c:	463a      	mov	r2, r7
 800fb4e:	4620      	mov	r0, r4
 800fb50:	f003 faca 	bl	80130e8 <uxr_set_status_callback>
 800fb54:	493e      	ldr	r1, [pc, #248]	; (800fc50 <rmw_init+0x244>)
 800fb56:	463a      	mov	r2, r7
 800fb58:	4620      	mov	r0, r4
 800fb5a:	f003 facd 	bl	80130f8 <uxr_set_request_callback>
 800fb5e:	493d      	ldr	r1, [pc, #244]	; (800fc54 <rmw_init+0x248>)
 800fb60:	463a      	mov	r2, r7
 800fb62:	4620      	mov	r0, r4
 800fb64:	f003 facc 	bl	8013100 <uxr_set_reply_callback>
 800fb68:	f8b5 2298 	ldrh.w	r2, [r5, #664]	; 0x298
 800fb6c:	2304      	movs	r3, #4
 800fb6e:	0092      	lsls	r2, r2, #2
 800fb70:	f505 7165 	add.w	r1, r5, #916	; 0x394
 800fb74:	4620      	mov	r0, r4
 800fb76:	f003 fb83 	bl	8013280 <uxr_create_input_reliable_stream>
 800fb7a:	f8b5 2298 	ldrh.w	r2, [r5, #664]	; 0x298
 800fb7e:	f8c5 0374 	str.w	r0, [r5, #884]	; 0x374
 800fb82:	0092      	lsls	r2, r2, #2
 800fb84:	2304      	movs	r3, #4
 800fb86:	f605 3194 	addw	r1, r5, #2964	; 0xb94
 800fb8a:	4620      	mov	r0, r4
 800fb8c:	f003 fb4e 	bl	801322c <uxr_create_output_reliable_stream>
 800fb90:	f8c5 0378 	str.w	r0, [r5, #888]	; 0x378
 800fb94:	4620      	mov	r0, r4
 800fb96:	f003 fb6d 	bl	8013274 <uxr_create_input_best_effort_stream>
 800fb9a:	f505 519c 	add.w	r1, r5, #4992	; 0x1380
 800fb9e:	f8c5 0380 	str.w	r0, [r5, #896]	; 0x380
 800fba2:	f8b5 2298 	ldrh.w	r2, [r5, #664]	; 0x298
 800fba6:	4620      	mov	r0, r4
 800fba8:	3114      	adds	r1, #20
 800fbaa:	f003 fb2d 	bl	8013208 <uxr_create_output_best_effort_stream>
 800fbae:	f8c5 037c 	str.w	r0, [r5, #892]	; 0x37c
 800fbb2:	4620      	mov	r0, r4
 800fbb4:	f003 faa8 	bl	8013108 <uxr_create_session>
 800fbb8:	b950      	cbnz	r0, 800fbd0 <rmw_init+0x1c4>
 800fbba:	4648      	mov	r0, r9
 800fbbc:	f002 fe3c 	bl	8012838 <uxr_close_custom_transport>
 800fbc0:	480c      	ldr	r0, [pc, #48]	; (800fbf4 <rmw_init+0x1e8>)
 800fbc2:	4629      	mov	r1, r5
 800fbc4:	f008 f93e 	bl	8017e44 <put_memory>
 800fbc8:	64b7      	str	r7, [r6, #72]	; 0x48
 800fbca:	2701      	movs	r7, #1
 800fbcc:	e000      	b.n	800fbd0 <rmw_init+0x1c4>
 800fbce:	270c      	movs	r7, #12
 800fbd0:	4638      	mov	r0, r7
 800fbd2:	b003      	add	sp, #12
 800fbd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbd8:	270b      	movs	r7, #11
 800fbda:	4638      	mov	r0, r7
 800fbdc:	b003      	add	sp, #12
 800fbde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbe2:	2701      	movs	r7, #1
 800fbe4:	4638      	mov	r0, r7
 800fbe6:	b003      	add	sp, #12
 800fbe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbec:	0801f628 	.word	0x0801f628
 800fbf0:	20014a88 	.word	0x20014a88
 800fbf4:	20014858 	.word	0x20014858
 800fbf8:	200116b0 	.word	0x200116b0
 800fbfc:	20012490 	.word	0x20012490
 800fc00:	20014684 	.word	0x20014684
 800fc04:	20014868 	.word	0x20014868
 800fc08:	20011fb8 	.word	0x20011fb8
 800fc0c:	2001491c 	.word	0x2001491c
 800fc10:	200116d0 	.word	0x200116d0
 800fc14:	200116c0 	.word	0x200116c0
 800fc18:	200149c0 	.word	0x200149c0
 800fc1c:	2001490c 	.word	0x2001490c
 800fc20:	200123c8 	.word	0x200123c8
 800fc24:	20011f40 	.word	0x20011f40
 800fc28:	20014694 	.word	0x20014694
 800fc2c:	20014848 	.word	0x20014848
 800fc30:	20014600 	.word	0x20014600
 800fc34:	200149ac 	.word	0x200149ac
 800fc38:	20014590 	.word	0x20014590
 800fc3c:	20016030 	.word	0x20016030
 800fc40:	2001492c 	.word	0x2001492c
 800fc44:	20014838 	.word	0x20014838
 800fc48:	08017c65 	.word	0x08017c65
 800fc4c:	08017c5d 	.word	0x08017c5d
 800fc50:	08017cf9 	.word	0x08017cf9
 800fc54:	08017d91 	.word	0x08017d91

0800fc58 <rmw_context_fini>:
 800fc58:	4b17      	ldr	r3, [pc, #92]	; (800fcb8 <rmw_context_fini+0x60>)
 800fc5a:	b570      	push	{r4, r5, r6, lr}
 800fc5c:	681c      	ldr	r4, [r3, #0]
 800fc5e:	4605      	mov	r5, r0
 800fc60:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800fc62:	b33c      	cbz	r4, 800fcb4 <rmw_context_fini+0x5c>
 800fc64:	2600      	movs	r6, #0
 800fc66:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 800fc6a:	691a      	ldr	r2, [r3, #16]
 800fc6c:	4282      	cmp	r2, r0
 800fc6e:	d018      	beq.n	800fca2 <rmw_context_fini+0x4a>
 800fc70:	2c00      	cmp	r4, #0
 800fc72:	d1f8      	bne.n	800fc66 <rmw_context_fini+0xe>
 800fc74:	b188      	cbz	r0, 800fc9a <rmw_context_fini+0x42>
 800fc76:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800fc7a:	789b      	ldrb	r3, [r3, #2]
 800fc7c:	2b01      	cmp	r3, #1
 800fc7e:	bf14      	ite	ne
 800fc80:	210a      	movne	r1, #10
 800fc82:	2100      	moveq	r1, #0
 800fc84:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fc88:	f003 fa78 	bl	801317c <uxr_delete_session_retries>
 800fc8c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800fc8e:	f000 fdbf 	bl	8010810 <rmw_uxrce_fini_session_memory>
 800fc92:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800fc94:	3010      	adds	r0, #16
 800fc96:	f002 fdcf 	bl	8012838 <uxr_close_custom_transport>
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	4630      	mov	r0, r6
 800fc9e:	64ab      	str	r3, [r5, #72]	; 0x48
 800fca0:	bd70      	pop	{r4, r5, r6, pc}
 800fca2:	f103 0018 	add.w	r0, r3, #24
 800fca6:	f000 f89b 	bl	800fde0 <rmw_destroy_node>
 800fcaa:	4606      	mov	r6, r0
 800fcac:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800fcae:	2c00      	cmp	r4, #0
 800fcb0:	d1d9      	bne.n	800fc66 <rmw_context_fini+0xe>
 800fcb2:	e7df      	b.n	800fc74 <rmw_context_fini+0x1c>
 800fcb4:	4626      	mov	r6, r4
 800fcb6:	e7dd      	b.n	800fc74 <rmw_context_fini+0x1c>
 800fcb8:	20014684 	.word	0x20014684

0800fcbc <create_node>:
 800fcbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fcc0:	b083      	sub	sp, #12
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d05f      	beq.n	800fd86 <create_node+0xca>
 800fcc6:	4606      	mov	r6, r0
 800fcc8:	4835      	ldr	r0, [pc, #212]	; (800fda0 <create_node+0xe4>)
 800fcca:	460f      	mov	r7, r1
 800fccc:	4690      	mov	r8, r2
 800fcce:	461d      	mov	r5, r3
 800fcd0:	f008 f8a8 	bl	8017e24 <get_memory>
 800fcd4:	2800      	cmp	r0, #0
 800fcd6:	d056      	beq.n	800fd86 <create_node+0xca>
 800fcd8:	68c4      	ldr	r4, [r0, #12]
 800fcda:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800fcdc:	6123      	str	r3, [r4, #16]
 800fcde:	f008 f8f7 	bl	8017ed0 <rmw_get_implementation_identifier>
 800fce2:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800fce6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800fcea:	f8c4 9020 	str.w	r9, [r4, #32]
 800fcee:	4630      	mov	r0, r6
 800fcf0:	f7f0 fa78 	bl	80001e4 <strlen>
 800fcf4:	1c42      	adds	r2, r0, #1
 800fcf6:	2a3c      	cmp	r2, #60	; 0x3c
 800fcf8:	f104 0518 	add.w	r5, r4, #24
 800fcfc:	d840      	bhi.n	800fd80 <create_node+0xc4>
 800fcfe:	4648      	mov	r0, r9
 800fd00:	4631      	mov	r1, r6
 800fd02:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800fd06:	f009 fd3d 	bl	8019784 <memcpy>
 800fd0a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800fd0e:	4638      	mov	r0, r7
 800fd10:	f7f0 fa68 	bl	80001e4 <strlen>
 800fd14:	1c42      	adds	r2, r0, #1
 800fd16:	2a3c      	cmp	r2, #60	; 0x3c
 800fd18:	d832      	bhi.n	800fd80 <create_node+0xc4>
 800fd1a:	4639      	mov	r1, r7
 800fd1c:	4648      	mov	r0, r9
 800fd1e:	f009 fd31 	bl	8019784 <memcpy>
 800fd22:	f241 5394 	movw	r3, #5524	; 0x1594
 800fd26:	6922      	ldr	r2, [r4, #16]
 800fd28:	5ad0      	ldrh	r0, [r2, r3]
 800fd2a:	2101      	movs	r1, #1
 800fd2c:	eb00 0c01 	add.w	ip, r0, r1
 800fd30:	f822 c003 	strh.w	ip, [r2, r3]
 800fd34:	f002 fd84 	bl	8012840 <uxr_object_id>
 800fd38:	6160      	str	r0, [r4, #20]
 800fd3a:	783b      	ldrb	r3, [r7, #0]
 800fd3c:	2b2f      	cmp	r3, #47	; 0x2f
 800fd3e:	d127      	bne.n	800fd90 <create_node+0xd4>
 800fd40:	787b      	ldrb	r3, [r7, #1]
 800fd42:	bb2b      	cbnz	r3, 800fd90 <create_node+0xd4>
 800fd44:	4a17      	ldr	r2, [pc, #92]	; (800fda4 <create_node+0xe8>)
 800fd46:	4818      	ldr	r0, [pc, #96]	; (800fda8 <create_node+0xec>)
 800fd48:	4633      	mov	r3, r6
 800fd4a:	213c      	movs	r1, #60	; 0x3c
 800fd4c:	f00a f8b8 	bl	8019ec0 <sniprintf>
 800fd50:	6920      	ldr	r0, [r4, #16]
 800fd52:	4b15      	ldr	r3, [pc, #84]	; (800fda8 <create_node+0xec>)
 800fd54:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800fd58:	9300      	str	r3, [sp, #0]
 800fd5a:	2306      	movs	r3, #6
 800fd5c:	9301      	str	r3, [sp, #4]
 800fd5e:	6811      	ldr	r1, [r2, #0]
 800fd60:	6962      	ldr	r2, [r4, #20]
 800fd62:	fa1f f388 	uxth.w	r3, r8
 800fd66:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fd6a:	f002 fae7 	bl	801233c <uxr_buffer_create_participant_bin>
 800fd6e:	4602      	mov	r2, r0
 800fd70:	6920      	ldr	r0, [r4, #16]
 800fd72:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800fd76:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800fd7a:	f000 fead 	bl	8010ad8 <run_xrce_session>
 800fd7e:	b918      	cbnz	r0, 800fd88 <create_node+0xcc>
 800fd80:	4628      	mov	r0, r5
 800fd82:	f000 fd4b 	bl	801081c <rmw_uxrce_fini_node_memory>
 800fd86:	2500      	movs	r5, #0
 800fd88:	4628      	mov	r0, r5
 800fd8a:	b003      	add	sp, #12
 800fd8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd90:	4a06      	ldr	r2, [pc, #24]	; (800fdac <create_node+0xf0>)
 800fd92:	9600      	str	r6, [sp, #0]
 800fd94:	463b      	mov	r3, r7
 800fd96:	213c      	movs	r1, #60	; 0x3c
 800fd98:	4803      	ldr	r0, [pc, #12]	; (800fda8 <create_node+0xec>)
 800fd9a:	f00a f891 	bl	8019ec0 <sniprintf>
 800fd9e:	e7d7      	b.n	800fd50 <create_node+0x94>
 800fda0:	20014684 	.word	0x20014684
 800fda4:	0801eea8 	.word	0x0801eea8
 800fda8:	20010428 	.word	0x20010428
 800fdac:	0801ee6c 	.word	0x0801ee6c

0800fdb0 <rmw_create_node>:
 800fdb0:	b199      	cbz	r1, 800fdda <rmw_create_node+0x2a>
 800fdb2:	b430      	push	{r4, r5}
 800fdb4:	4615      	mov	r5, r2
 800fdb6:	461a      	mov	r2, r3
 800fdb8:	780b      	ldrb	r3, [r1, #0]
 800fdba:	460c      	mov	r4, r1
 800fdbc:	b153      	cbz	r3, 800fdd4 <rmw_create_node+0x24>
 800fdbe:	b14d      	cbz	r5, 800fdd4 <rmw_create_node+0x24>
 800fdc0:	782b      	ldrb	r3, [r5, #0]
 800fdc2:	b13b      	cbz	r3, 800fdd4 <rmw_create_node+0x24>
 800fdc4:	b902      	cbnz	r2, 800fdc8 <rmw_create_node+0x18>
 800fdc6:	69c2      	ldr	r2, [r0, #28]
 800fdc8:	4603      	mov	r3, r0
 800fdca:	4629      	mov	r1, r5
 800fdcc:	4620      	mov	r0, r4
 800fdce:	bc30      	pop	{r4, r5}
 800fdd0:	f7ff bf74 	b.w	800fcbc <create_node>
 800fdd4:	2000      	movs	r0, #0
 800fdd6:	bc30      	pop	{r4, r5}
 800fdd8:	4770      	bx	lr
 800fdda:	2000      	movs	r0, #0
 800fddc:	4770      	bx	lr
 800fdde:	bf00      	nop

0800fde0 <rmw_destroy_node>:
 800fde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fde2:	2800      	cmp	r0, #0
 800fde4:	d05b      	beq.n	800fe9e <rmw_destroy_node+0xbe>
 800fde6:	4607      	mov	r7, r0
 800fde8:	6800      	ldr	r0, [r0, #0]
 800fdea:	f000 fedf 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 800fdee:	2800      	cmp	r0, #0
 800fdf0:	d055      	beq.n	800fe9e <rmw_destroy_node+0xbe>
 800fdf2:	687c      	ldr	r4, [r7, #4]
 800fdf4:	2c00      	cmp	r4, #0
 800fdf6:	d052      	beq.n	800fe9e <rmw_destroy_node+0xbe>
 800fdf8:	4b2f      	ldr	r3, [pc, #188]	; (800feb8 <rmw_destroy_node+0xd8>)
 800fdfa:	681d      	ldr	r5, [r3, #0]
 800fdfc:	2d00      	cmp	r5, #0
 800fdfe:	d059      	beq.n	800feb4 <rmw_destroy_node+0xd4>
 800fe00:	2600      	movs	r6, #0
 800fe02:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800fe06:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800fe0a:	429c      	cmp	r4, r3
 800fe0c:	d04a      	beq.n	800fea4 <rmw_destroy_node+0xc4>
 800fe0e:	2d00      	cmp	r5, #0
 800fe10:	d1f7      	bne.n	800fe02 <rmw_destroy_node+0x22>
 800fe12:	4b2a      	ldr	r3, [pc, #168]	; (800febc <rmw_destroy_node+0xdc>)
 800fe14:	681d      	ldr	r5, [r3, #0]
 800fe16:	b15d      	cbz	r5, 800fe30 <rmw_destroy_node+0x50>
 800fe18:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800fe1c:	6a0b      	ldr	r3, [r1, #32]
 800fe1e:	429c      	cmp	r4, r3
 800fe20:	d1f9      	bne.n	800fe16 <rmw_destroy_node+0x36>
 800fe22:	317c      	adds	r1, #124	; 0x7c
 800fe24:	4638      	mov	r0, r7
 800fe26:	f000 fb11 	bl	801044c <rmw_destroy_subscription>
 800fe2a:	4606      	mov	r6, r0
 800fe2c:	2d00      	cmp	r5, #0
 800fe2e:	d1f3      	bne.n	800fe18 <rmw_destroy_node+0x38>
 800fe30:	4b23      	ldr	r3, [pc, #140]	; (800fec0 <rmw_destroy_node+0xe0>)
 800fe32:	681d      	ldr	r5, [r3, #0]
 800fe34:	b15d      	cbz	r5, 800fe4e <rmw_destroy_node+0x6e>
 800fe36:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800fe3a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800fe3c:	429c      	cmp	r4, r3
 800fe3e:	d1f9      	bne.n	800fe34 <rmw_destroy_node+0x54>
 800fe40:	317c      	adds	r1, #124	; 0x7c
 800fe42:	4638      	mov	r0, r7
 800fe44:	f000 f9e2 	bl	801020c <rmw_destroy_service>
 800fe48:	4606      	mov	r6, r0
 800fe4a:	2d00      	cmp	r5, #0
 800fe4c:	d1f3      	bne.n	800fe36 <rmw_destroy_node+0x56>
 800fe4e:	4b1d      	ldr	r3, [pc, #116]	; (800fec4 <rmw_destroy_node+0xe4>)
 800fe50:	681d      	ldr	r5, [r3, #0]
 800fe52:	b15d      	cbz	r5, 800fe6c <rmw_destroy_node+0x8c>
 800fe54:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800fe58:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800fe5a:	429c      	cmp	r4, r3
 800fe5c:	d1f9      	bne.n	800fe52 <rmw_destroy_node+0x72>
 800fe5e:	317c      	adds	r1, #124	; 0x7c
 800fe60:	4638      	mov	r0, r7
 800fe62:	f008 f803 	bl	8017e6c <rmw_destroy_client>
 800fe66:	4606      	mov	r6, r0
 800fe68:	2d00      	cmp	r5, #0
 800fe6a:	d1f3      	bne.n	800fe54 <rmw_destroy_node+0x74>
 800fe6c:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800fe70:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800fe74:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fe78:	6819      	ldr	r1, [r3, #0]
 800fe7a:	f002 fa13 	bl	80122a4 <uxr_buffer_delete_entity>
 800fe7e:	4602      	mov	r2, r0
 800fe80:	6920      	ldr	r0, [r4, #16]
 800fe82:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800fe86:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800fe8a:	f000 fe25 	bl	8010ad8 <run_xrce_session>
 800fe8e:	2800      	cmp	r0, #0
 800fe90:	bf08      	it	eq
 800fe92:	2602      	moveq	r6, #2
 800fe94:	4638      	mov	r0, r7
 800fe96:	f000 fcc1 	bl	801081c <rmw_uxrce_fini_node_memory>
 800fe9a:	4630      	mov	r0, r6
 800fe9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe9e:	2601      	movs	r6, #1
 800fea0:	4630      	mov	r0, r6
 800fea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fea4:	3184      	adds	r1, #132	; 0x84
 800fea6:	4638      	mov	r0, r7
 800fea8:	f000 f960 	bl	801016c <rmw_destroy_publisher>
 800feac:	4606      	mov	r6, r0
 800feae:	2d00      	cmp	r5, #0
 800feb0:	d1a7      	bne.n	800fe02 <rmw_destroy_node+0x22>
 800feb2:	e7ae      	b.n	800fe12 <rmw_destroy_node+0x32>
 800feb4:	462e      	mov	r6, r5
 800feb6:	e7ac      	b.n	800fe12 <rmw_destroy_node+0x32>
 800feb8:	200116c0 	.word	0x200116c0
 800febc:	2001491c 	.word	0x2001491c
 800fec0:	2001490c 	.word	0x2001490c
 800fec4:	20011f40 	.word	0x20011f40

0800fec8 <rmw_node_get_graph_guard_condition>:
 800fec8:	6843      	ldr	r3, [r0, #4]
 800feca:	6918      	ldr	r0, [r3, #16]
 800fecc:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800fed0:	4770      	bx	lr
 800fed2:	bf00      	nop

0800fed4 <flush_session>:
 800fed4:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800fed6:	f003 badd 	b.w	8013494 <uxr_run_session_until_confirm_delivery>
 800feda:	bf00      	nop

0800fedc <rmw_publish>:
 800fedc:	2800      	cmp	r0, #0
 800fede:	d053      	beq.n	800ff88 <rmw_publish+0xac>
 800fee0:	b570      	push	{r4, r5, r6, lr}
 800fee2:	460d      	mov	r5, r1
 800fee4:	b08e      	sub	sp, #56	; 0x38
 800fee6:	2900      	cmp	r1, #0
 800fee8:	d04b      	beq.n	800ff82 <rmw_publish+0xa6>
 800feea:	4604      	mov	r4, r0
 800feec:	6800      	ldr	r0, [r0, #0]
 800feee:	f000 fe5d 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 800fef2:	2800      	cmp	r0, #0
 800fef4:	d045      	beq.n	800ff82 <rmw_publish+0xa6>
 800fef6:	6866      	ldr	r6, [r4, #4]
 800fef8:	2e00      	cmp	r6, #0
 800fefa:	d042      	beq.n	800ff82 <rmw_publish+0xa6>
 800fefc:	69b4      	ldr	r4, [r6, #24]
 800fefe:	4628      	mov	r0, r5
 800ff00:	6923      	ldr	r3, [r4, #16]
 800ff02:	4798      	blx	r3
 800ff04:	69f3      	ldr	r3, [r6, #28]
 800ff06:	9005      	str	r0, [sp, #20]
 800ff08:	b113      	cbz	r3, 800ff10 <rmw_publish+0x34>
 800ff0a:	a805      	add	r0, sp, #20
 800ff0c:	4798      	blx	r3
 800ff0e:	9805      	ldr	r0, [sp, #20]
 800ff10:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ff14:	691b      	ldr	r3, [r3, #16]
 800ff16:	9000      	str	r0, [sp, #0]
 800ff18:	6972      	ldr	r2, [r6, #20]
 800ff1a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800ff1c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800ff20:	ab06      	add	r3, sp, #24
 800ff22:	f004 fb49 	bl	80145b8 <uxr_prepare_output_stream>
 800ff26:	b1d8      	cbz	r0, 800ff60 <rmw_publish+0x84>
 800ff28:	68a3      	ldr	r3, [r4, #8]
 800ff2a:	4628      	mov	r0, r5
 800ff2c:	a906      	add	r1, sp, #24
 800ff2e:	4798      	blx	r3
 800ff30:	6a33      	ldr	r3, [r6, #32]
 800ff32:	4604      	mov	r4, r0
 800ff34:	b10b      	cbz	r3, 800ff3a <rmw_publish+0x5e>
 800ff36:	a806      	add	r0, sp, #24
 800ff38:	4798      	blx	r3
 800ff3a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800ff3e:	2b01      	cmp	r3, #1
 800ff40:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ff44:	d022      	beq.n	800ff8c <rmw_publish+0xb0>
 800ff46:	6918      	ldr	r0, [r3, #16]
 800ff48:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800ff4a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ff4e:	f003 faa1 	bl	8013494 <uxr_run_session_until_confirm_delivery>
 800ff52:	4020      	ands	r0, r4
 800ff54:	b2c4      	uxtb	r4, r0
 800ff56:	f084 0001 	eor.w	r0, r4, #1
 800ff5a:	b2c0      	uxtb	r0, r0
 800ff5c:	b00e      	add	sp, #56	; 0x38
 800ff5e:	bd70      	pop	{r4, r5, r6, pc}
 800ff60:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ff64:	4a0c      	ldr	r2, [pc, #48]	; (800ff98 <rmw_publish+0xbc>)
 800ff66:	6918      	ldr	r0, [r3, #16]
 800ff68:	9b05      	ldr	r3, [sp, #20]
 800ff6a:	9300      	str	r3, [sp, #0]
 800ff6c:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800ff70:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ff74:	6972      	ldr	r2, [r6, #20]
 800ff76:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800ff78:	ab06      	add	r3, sp, #24
 800ff7a:	f004 fb4d 	bl	8014618 <uxr_prepare_output_stream_fragmented>
 800ff7e:	2800      	cmp	r0, #0
 800ff80:	d1d2      	bne.n	800ff28 <rmw_publish+0x4c>
 800ff82:	2001      	movs	r0, #1
 800ff84:	b00e      	add	sp, #56	; 0x38
 800ff86:	bd70      	pop	{r4, r5, r6, pc}
 800ff88:	2001      	movs	r0, #1
 800ff8a:	4770      	bx	lr
 800ff8c:	6918      	ldr	r0, [r3, #16]
 800ff8e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ff92:	f003 f9eb 	bl	801336c <uxr_flash_output_streams>
 800ff96:	e7de      	b.n	800ff56 <rmw_publish+0x7a>
 800ff98:	0800fed5 	.word	0x0800fed5

0800ff9c <rmw_create_publisher>:
 800ff9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffa0:	b086      	sub	sp, #24
 800ffa2:	2800      	cmp	r0, #0
 800ffa4:	f000 80d5 	beq.w	8010152 <rmw_create_publisher+0x1b6>
 800ffa8:	460e      	mov	r6, r1
 800ffaa:	2900      	cmp	r1, #0
 800ffac:	f000 80d1 	beq.w	8010152 <rmw_create_publisher+0x1b6>
 800ffb0:	4604      	mov	r4, r0
 800ffb2:	6800      	ldr	r0, [r0, #0]
 800ffb4:	4615      	mov	r5, r2
 800ffb6:	4698      	mov	r8, r3
 800ffb8:	f000 fdf8 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 800ffbc:	2800      	cmp	r0, #0
 800ffbe:	f000 80c8 	beq.w	8010152 <rmw_create_publisher+0x1b6>
 800ffc2:	2d00      	cmp	r5, #0
 800ffc4:	f000 80c5 	beq.w	8010152 <rmw_create_publisher+0x1b6>
 800ffc8:	782b      	ldrb	r3, [r5, #0]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	f000 80c1 	beq.w	8010152 <rmw_create_publisher+0x1b6>
 800ffd0:	f1b8 0f00 	cmp.w	r8, #0
 800ffd4:	f000 80bd 	beq.w	8010152 <rmw_create_publisher+0x1b6>
 800ffd8:	4860      	ldr	r0, [pc, #384]	; (801015c <rmw_create_publisher+0x1c0>)
 800ffda:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ffde:	f007 ff21 	bl	8017e24 <get_memory>
 800ffe2:	2800      	cmp	r0, #0
 800ffe4:	f000 80b5 	beq.w	8010152 <rmw_create_publisher+0x1b6>
 800ffe8:	68c4      	ldr	r4, [r0, #12]
 800ffea:	2300      	movs	r3, #0
 800ffec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800fff0:	f007 ff6e 	bl	8017ed0 <rmw_get_implementation_identifier>
 800fff4:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800fff8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800fffc:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8010000:	4628      	mov	r0, r5
 8010002:	f7f0 f8ef 	bl	80001e4 <strlen>
 8010006:	3001      	adds	r0, #1
 8010008:	283c      	cmp	r0, #60	; 0x3c
 801000a:	f104 0784 	add.w	r7, r4, #132	; 0x84
 801000e:	f200 809d 	bhi.w	801014c <rmw_create_publisher+0x1b0>
 8010012:	4a53      	ldr	r2, [pc, #332]	; (8010160 <rmw_create_publisher+0x1c4>)
 8010014:	462b      	mov	r3, r5
 8010016:	213c      	movs	r1, #60	; 0x3c
 8010018:	4650      	mov	r0, sl
 801001a:	f009 ff51 	bl	8019ec0 <sniprintf>
 801001e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010022:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 8010026:	4641      	mov	r1, r8
 8010028:	2250      	movs	r2, #80	; 0x50
 801002a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801002e:	f009 fba9 	bl	8019784 <memcpy>
 8010032:	f898 3008 	ldrb.w	r3, [r8, #8]
 8010036:	494b      	ldr	r1, [pc, #300]	; (8010164 <rmw_create_publisher+0x1c8>)
 8010038:	2b02      	cmp	r3, #2
 801003a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801003e:	bf0c      	ite	eq
 8010040:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8010044:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8010048:	67a3      	str	r3, [r4, #120]	; 0x78
 801004a:	2300      	movs	r3, #0
 801004c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8010050:	4630      	mov	r0, r6
 8010052:	f000 fdb9 	bl	8010bc8 <get_message_typesupport_handle>
 8010056:	2800      	cmp	r0, #0
 8010058:	d078      	beq.n	801014c <rmw_create_publisher+0x1b0>
 801005a:	6842      	ldr	r2, [r0, #4]
 801005c:	61a2      	str	r2, [r4, #24]
 801005e:	2a00      	cmp	r2, #0
 8010060:	d074      	beq.n	801014c <rmw_create_publisher+0x1b0>
 8010062:	4629      	mov	r1, r5
 8010064:	4643      	mov	r3, r8
 8010066:	4648      	mov	r0, r9
 8010068:	f007 ff38 	bl	8017edc <create_topic>
 801006c:	6260      	str	r0, [r4, #36]	; 0x24
 801006e:	2800      	cmp	r0, #0
 8010070:	d06c      	beq.n	801014c <rmw_create_publisher+0x1b0>
 8010072:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010076:	f241 5398 	movw	r3, #5528	; 0x1598
 801007a:	2103      	movs	r1, #3
 801007c:	5ad0      	ldrh	r0, [r2, r3]
 801007e:	1c45      	adds	r5, r0, #1
 8010080:	52d5      	strh	r5, [r2, r3]
 8010082:	f002 fbdd 	bl	8012840 <uxr_object_id>
 8010086:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801008a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 801008e:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8010092:	6912      	ldr	r2, [r2, #16]
 8010094:	6120      	str	r0, [r4, #16]
 8010096:	2606      	movs	r6, #6
 8010098:	9600      	str	r6, [sp, #0]
 801009a:	6819      	ldr	r1, [r3, #0]
 801009c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80100a0:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 80100a4:	6922      	ldr	r2, [r4, #16]
 80100a6:	f002 f9af 	bl	8012408 <uxr_buffer_create_publisher_bin>
 80100aa:	4602      	mov	r2, r0
 80100ac:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80100b0:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80100b4:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80100b8:	f000 fd0e 	bl	8010ad8 <run_xrce_session>
 80100bc:	2800      	cmp	r0, #0
 80100be:	d041      	beq.n	8010144 <rmw_create_publisher+0x1a8>
 80100c0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80100c4:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 80100c8:	f241 539a 	movw	r3, #5530	; 0x159a
 80100cc:	2105      	movs	r1, #5
 80100ce:	5ad0      	ldrh	r0, [r2, r3]
 80100d0:	1c45      	adds	r5, r0, #1
 80100d2:	52d5      	strh	r5, [r2, r3]
 80100d4:	f002 fbb4 	bl	8012840 <uxr_object_id>
 80100d8:	6160      	str	r0, [r4, #20]
 80100da:	f898 1009 	ldrb.w	r1, [r8, #9]
 80100de:	f898 2000 	ldrb.w	r2, [r8]
 80100e2:	f898 3008 	ldrb.w	r3, [r8, #8]
 80100e6:	f8d9 5010 	ldr.w	r5, [r9, #16]
 80100ea:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80100ee:	f8d5 5384 	ldr.w	r5, [r5, #900]	; 0x384
 80100f2:	6900      	ldr	r0, [r0, #16]
 80100f4:	f8b8 c004 	ldrh.w	ip, [r8, #4]
 80100f8:	f8cd c00c 	str.w	ip, [sp, #12]
 80100fc:	3902      	subs	r1, #2
 80100fe:	f1a2 0201 	sub.w	r2, r2, #1
 8010102:	bf18      	it	ne
 8010104:	2101      	movne	r1, #1
 8010106:	fab2 f282 	clz	r2, r2
 801010a:	2b01      	cmp	r3, #1
 801010c:	bf8c      	ite	hi
 801010e:	2300      	movhi	r3, #0
 8010110:	2301      	movls	r3, #1
 8010112:	0952      	lsrs	r2, r2, #5
 8010114:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010118:	9605      	str	r6, [sp, #20]
 801011a:	9104      	str	r1, [sp, #16]
 801011c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801011e:	691b      	ldr	r3, [r3, #16]
 8010120:	9300      	str	r3, [sp, #0]
 8010122:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8010126:	6829      	ldr	r1, [r5, #0]
 8010128:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801012c:	f002 f9ca 	bl	80124c4 <uxr_buffer_create_datawriter_bin>
 8010130:	4602      	mov	r2, r0
 8010132:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010136:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801013a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801013e:	f000 fccb 	bl	8010ad8 <run_xrce_session>
 8010142:	b938      	cbnz	r0, 8010154 <rmw_create_publisher+0x1b8>
 8010144:	4805      	ldr	r0, [pc, #20]	; (801015c <rmw_create_publisher+0x1c0>)
 8010146:	4621      	mov	r1, r4
 8010148:	f007 fe7c 	bl	8017e44 <put_memory>
 801014c:	4638      	mov	r0, r7
 801014e:	f000 fb7b 	bl	8010848 <rmw_uxrce_fini_publisher_memory>
 8010152:	2700      	movs	r7, #0
 8010154:	4638      	mov	r0, r7
 8010156:	b006      	add	sp, #24
 8010158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801015c:	200116c0 	.word	0x200116c0
 8010160:	0801eea8 	.word	0x0801eea8
 8010164:	0801ee74 	.word	0x0801ee74

08010168 <rmw_publisher_get_actual_qos>:
 8010168:	2000      	movs	r0, #0
 801016a:	4770      	bx	lr

0801016c <rmw_destroy_publisher>:
 801016c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801016e:	b128      	cbz	r0, 801017c <rmw_destroy_publisher+0x10>
 8010170:	4604      	mov	r4, r0
 8010172:	6800      	ldr	r0, [r0, #0]
 8010174:	460d      	mov	r5, r1
 8010176:	f000 fd19 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 801017a:	b910      	cbnz	r0, 8010182 <rmw_destroy_publisher+0x16>
 801017c:	2401      	movs	r4, #1
 801017e:	4620      	mov	r0, r4
 8010180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010182:	6863      	ldr	r3, [r4, #4]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d0f9      	beq.n	801017c <rmw_destroy_publisher+0x10>
 8010188:	2d00      	cmp	r5, #0
 801018a:	d0f7      	beq.n	801017c <rmw_destroy_publisher+0x10>
 801018c:	6828      	ldr	r0, [r5, #0]
 801018e:	f000 fd0d 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 8010192:	2800      	cmp	r0, #0
 8010194:	d0f2      	beq.n	801017c <rmw_destroy_publisher+0x10>
 8010196:	686c      	ldr	r4, [r5, #4]
 8010198:	2c00      	cmp	r4, #0
 801019a:	d0ef      	beq.n	801017c <rmw_destroy_publisher+0x10>
 801019c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801019e:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 80101a2:	f007 feeb 	bl	8017f7c <destroy_topic>
 80101a6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80101aa:	6962      	ldr	r2, [r4, #20]
 80101ac:	6918      	ldr	r0, [r3, #16]
 80101ae:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80101b2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80101b6:	6819      	ldr	r1, [r3, #0]
 80101b8:	f002 f874 	bl	80122a4 <uxr_buffer_delete_entity>
 80101bc:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80101c0:	6922      	ldr	r2, [r4, #16]
 80101c2:	4603      	mov	r3, r0
 80101c4:	6908      	ldr	r0, [r1, #16]
 80101c6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80101ca:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80101ce:	6809      	ldr	r1, [r1, #0]
 80101d0:	461c      	mov	r4, r3
 80101d2:	f002 f867 	bl	80122a4 <uxr_buffer_delete_entity>
 80101d6:	4606      	mov	r6, r0
 80101d8:	6938      	ldr	r0, [r7, #16]
 80101da:	4622      	mov	r2, r4
 80101dc:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80101e0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80101e4:	f000 fc78 	bl	8010ad8 <run_xrce_session>
 80101e8:	4604      	mov	r4, r0
 80101ea:	6938      	ldr	r0, [r7, #16]
 80101ec:	4632      	mov	r2, r6
 80101ee:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80101f2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80101f6:	f000 fc6f 	bl	8010ad8 <run_xrce_session>
 80101fa:	b12c      	cbz	r4, 8010208 <rmw_destroy_publisher+0x9c>
 80101fc:	b120      	cbz	r0, 8010208 <rmw_destroy_publisher+0x9c>
 80101fe:	2400      	movs	r4, #0
 8010200:	4628      	mov	r0, r5
 8010202:	f000 fb21 	bl	8010848 <rmw_uxrce_fini_publisher_memory>
 8010206:	e7ba      	b.n	801017e <rmw_destroy_publisher+0x12>
 8010208:	2402      	movs	r4, #2
 801020a:	e7f9      	b.n	8010200 <rmw_destroy_publisher+0x94>

0801020c <rmw_destroy_service>:
 801020c:	b538      	push	{r3, r4, r5, lr}
 801020e:	b128      	cbz	r0, 801021c <rmw_destroy_service+0x10>
 8010210:	4604      	mov	r4, r0
 8010212:	6800      	ldr	r0, [r0, #0]
 8010214:	460d      	mov	r5, r1
 8010216:	f000 fcc9 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 801021a:	b910      	cbnz	r0, 8010222 <rmw_destroy_service+0x16>
 801021c:	2401      	movs	r4, #1
 801021e:	4620      	mov	r0, r4
 8010220:	bd38      	pop	{r3, r4, r5, pc}
 8010222:	6863      	ldr	r3, [r4, #4]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d0f9      	beq.n	801021c <rmw_destroy_service+0x10>
 8010228:	2d00      	cmp	r5, #0
 801022a:	d0f7      	beq.n	801021c <rmw_destroy_service+0x10>
 801022c:	6828      	ldr	r0, [r5, #0]
 801022e:	f000 fcbd 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 8010232:	2800      	cmp	r0, #0
 8010234:	d0f2      	beq.n	801021c <rmw_destroy_service+0x10>
 8010236:	686b      	ldr	r3, [r5, #4]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d0ef      	beq.n	801021c <rmw_destroy_service+0x10>
 801023c:	6864      	ldr	r4, [r4, #4]
 801023e:	691a      	ldr	r2, [r3, #16]
 8010240:	6920      	ldr	r0, [r4, #16]
 8010242:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010246:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801024a:	6819      	ldr	r1, [r3, #0]
 801024c:	f002 f82a 	bl	80122a4 <uxr_buffer_delete_entity>
 8010250:	4602      	mov	r2, r0
 8010252:	6920      	ldr	r0, [r4, #16]
 8010254:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010258:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801025c:	f000 fc3c 	bl	8010ad8 <run_xrce_session>
 8010260:	2800      	cmp	r0, #0
 8010262:	4628      	mov	r0, r5
 8010264:	bf14      	ite	ne
 8010266:	2400      	movne	r4, #0
 8010268:	2402      	moveq	r4, #2
 801026a:	f000 fb15 	bl	8010898 <rmw_uxrce_fini_service_memory>
 801026e:	e7d6      	b.n	801021e <rmw_destroy_service+0x12>

08010270 <rmw_create_subscription>:
 8010270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010274:	b08a      	sub	sp, #40	; 0x28
 8010276:	2800      	cmp	r0, #0
 8010278:	f000 80db 	beq.w	8010432 <rmw_create_subscription+0x1c2>
 801027c:	4688      	mov	r8, r1
 801027e:	2900      	cmp	r1, #0
 8010280:	f000 80d7 	beq.w	8010432 <rmw_create_subscription+0x1c2>
 8010284:	4604      	mov	r4, r0
 8010286:	6800      	ldr	r0, [r0, #0]
 8010288:	4615      	mov	r5, r2
 801028a:	461e      	mov	r6, r3
 801028c:	f000 fc8e 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 8010290:	2800      	cmp	r0, #0
 8010292:	f000 80ce 	beq.w	8010432 <rmw_create_subscription+0x1c2>
 8010296:	2d00      	cmp	r5, #0
 8010298:	f000 80cb 	beq.w	8010432 <rmw_create_subscription+0x1c2>
 801029c:	782b      	ldrb	r3, [r5, #0]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	f000 80c7 	beq.w	8010432 <rmw_create_subscription+0x1c2>
 80102a4:	2e00      	cmp	r6, #0
 80102a6:	f000 80c4 	beq.w	8010432 <rmw_create_subscription+0x1c2>
 80102aa:	4864      	ldr	r0, [pc, #400]	; (801043c <rmw_create_subscription+0x1cc>)
 80102ac:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80102b0:	f007 fdb8 	bl	8017e24 <get_memory>
 80102b4:	4604      	mov	r4, r0
 80102b6:	2800      	cmp	r0, #0
 80102b8:	f000 80bc 	beq.w	8010434 <rmw_create_subscription+0x1c4>
 80102bc:	68c7      	ldr	r7, [r0, #12]
 80102be:	2300      	movs	r3, #0
 80102c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80102c4:	f007 fe04 	bl	8017ed0 <rmw_get_implementation_identifier>
 80102c8:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 80102cc:	67f8      	str	r0, [r7, #124]	; 0x7c
 80102ce:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 80102d2:	4628      	mov	r0, r5
 80102d4:	f7ef ff86 	bl	80001e4 <strlen>
 80102d8:	3001      	adds	r0, #1
 80102da:	283c      	cmp	r0, #60	; 0x3c
 80102dc:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80102e0:	f200 80a4 	bhi.w	801042c <rmw_create_subscription+0x1bc>
 80102e4:	4a56      	ldr	r2, [pc, #344]	; (8010440 <rmw_create_subscription+0x1d0>)
 80102e6:	462b      	mov	r3, r5
 80102e8:	213c      	movs	r1, #60	; 0x3c
 80102ea:	4650      	mov	r0, sl
 80102ec:	f009 fde8 	bl	8019ec0 <sniprintf>
 80102f0:	4631      	mov	r1, r6
 80102f2:	f8c7 9020 	str.w	r9, [r7, #32]
 80102f6:	2250      	movs	r2, #80	; 0x50
 80102f8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80102fc:	f009 fa42 	bl	8019784 <memcpy>
 8010300:	4950      	ldr	r1, [pc, #320]	; (8010444 <rmw_create_subscription+0x1d4>)
 8010302:	4640      	mov	r0, r8
 8010304:	f000 fc60 	bl	8010bc8 <get_message_typesupport_handle>
 8010308:	2800      	cmp	r0, #0
 801030a:	f000 808f 	beq.w	801042c <rmw_create_subscription+0x1bc>
 801030e:	6842      	ldr	r2, [r0, #4]
 8010310:	61ba      	str	r2, [r7, #24]
 8010312:	2a00      	cmp	r2, #0
 8010314:	f000 808a 	beq.w	801042c <rmw_create_subscription+0x1bc>
 8010318:	4629      	mov	r1, r5
 801031a:	4633      	mov	r3, r6
 801031c:	4648      	mov	r0, r9
 801031e:	f007 fddd 	bl	8017edc <create_topic>
 8010322:	61f8      	str	r0, [r7, #28]
 8010324:	2800      	cmp	r0, #0
 8010326:	f000 8081 	beq.w	801042c <rmw_create_subscription+0x1bc>
 801032a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801032e:	f241 539c 	movw	r3, #5532	; 0x159c
 8010332:	2104      	movs	r1, #4
 8010334:	5ad0      	ldrh	r0, [r2, r3]
 8010336:	1c45      	adds	r5, r0, #1
 8010338:	52d5      	strh	r5, [r2, r3]
 801033a:	f002 fa81 	bl	8012840 <uxr_object_id>
 801033e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010342:	6138      	str	r0, [r7, #16]
 8010344:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8010348:	f04f 0806 	mov.w	r8, #6
 801034c:	f8cd 8000 	str.w	r8, [sp]
 8010350:	6811      	ldr	r1, [r2, #0]
 8010352:	693a      	ldr	r2, [r7, #16]
 8010354:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8010358:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801035c:	f002 f882 	bl	8012464 <uxr_buffer_create_subscriber_bin>
 8010360:	4602      	mov	r2, r0
 8010362:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010366:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801036a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801036e:	f000 fbb3 	bl	8010ad8 <run_xrce_session>
 8010372:	2800      	cmp	r0, #0
 8010374:	d056      	beq.n	8010424 <rmw_create_subscription+0x1b4>
 8010376:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801037a:	f241 539e 	movw	r3, #5534	; 0x159e
 801037e:	4641      	mov	r1, r8
 8010380:	5ad0      	ldrh	r0, [r2, r3]
 8010382:	1c45      	adds	r5, r0, #1
 8010384:	52d5      	strh	r5, [r2, r3]
 8010386:	f002 fa5b 	bl	8012840 <uxr_object_id>
 801038a:	6178      	str	r0, [r7, #20]
 801038c:	7a71      	ldrb	r1, [r6, #9]
 801038e:	7832      	ldrb	r2, [r6, #0]
 8010390:	7a33      	ldrb	r3, [r6, #8]
 8010392:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010396:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 801039a:	f8d0 5384 	ldr.w	r5, [r0, #900]	; 0x384
 801039e:	f8cd 8014 	str.w	r8, [sp, #20]
 80103a2:	3902      	subs	r1, #2
 80103a4:	f1a2 0201 	sub.w	r2, r2, #1
 80103a8:	bf18      	it	ne
 80103aa:	2101      	movne	r1, #1
 80103ac:	fab2 f282 	clz	r2, r2
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	bf8c      	ite	hi
 80103b4:	2300      	movhi	r3, #0
 80103b6:	2301      	movls	r3, #1
 80103b8:	0952      	lsrs	r2, r2, #5
 80103ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80103be:	9104      	str	r1, [sp, #16]
 80103c0:	f8cd c00c 	str.w	ip, [sp, #12]
 80103c4:	69fb      	ldr	r3, [r7, #28]
 80103c6:	691b      	ldr	r3, [r3, #16]
 80103c8:	9300      	str	r3, [sp, #0]
 80103ca:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 80103ce:	6829      	ldr	r1, [r5, #0]
 80103d0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80103d4:	f002 f8f4 	bl	80125c0 <uxr_buffer_create_datareader_bin>
 80103d8:	4602      	mov	r2, r0
 80103da:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80103de:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80103e2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80103e6:	f000 fb77 	bl	8010ad8 <run_xrce_session>
 80103ea:	b1d8      	cbz	r0, 8010424 <rmw_create_subscription+0x1b4>
 80103ec:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 80103f0:	7a33      	ldrb	r3, [r6, #8]
 80103f2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80103f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80103fa:	2200      	movs	r2, #0
 80103fc:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8010400:	2b02      	cmp	r3, #2
 8010402:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010406:	bf0c      	ite	eq
 8010408:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 801040c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 8010410:	9307      	str	r3, [sp, #28]
 8010412:	aa08      	add	r2, sp, #32
 8010414:	9200      	str	r2, [sp, #0]
 8010416:	697a      	ldr	r2, [r7, #20]
 8010418:	6809      	ldr	r1, [r1, #0]
 801041a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801041e:	f002 fa3d 	bl	801289c <uxr_buffer_request_data>
 8010422:	e007      	b.n	8010434 <rmw_create_subscription+0x1c4>
 8010424:	4805      	ldr	r0, [pc, #20]	; (801043c <rmw_create_subscription+0x1cc>)
 8010426:	4639      	mov	r1, r7
 8010428:	f007 fd0c 	bl	8017e44 <put_memory>
 801042c:	4620      	mov	r0, r4
 801042e:	f000 fa1f 	bl	8010870 <rmw_uxrce_fini_subscription_memory>
 8010432:	2400      	movs	r4, #0
 8010434:	4620      	mov	r0, r4
 8010436:	b00a      	add	sp, #40	; 0x28
 8010438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801043c:	2001491c 	.word	0x2001491c
 8010440:	0801eea8 	.word	0x0801eea8
 8010444:	0801ee74 	.word	0x0801ee74

08010448 <rmw_subscription_get_actual_qos>:
 8010448:	2000      	movs	r0, #0
 801044a:	4770      	bx	lr

0801044c <rmw_destroy_subscription>:
 801044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801044e:	b128      	cbz	r0, 801045c <rmw_destroy_subscription+0x10>
 8010450:	4604      	mov	r4, r0
 8010452:	6800      	ldr	r0, [r0, #0]
 8010454:	460d      	mov	r5, r1
 8010456:	f000 fba9 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 801045a:	b910      	cbnz	r0, 8010462 <rmw_destroy_subscription+0x16>
 801045c:	2401      	movs	r4, #1
 801045e:	4620      	mov	r0, r4
 8010460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010462:	6863      	ldr	r3, [r4, #4]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d0f9      	beq.n	801045c <rmw_destroy_subscription+0x10>
 8010468:	2d00      	cmp	r5, #0
 801046a:	d0f7      	beq.n	801045c <rmw_destroy_subscription+0x10>
 801046c:	6828      	ldr	r0, [r5, #0]
 801046e:	f000 fb9d 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 8010472:	2800      	cmp	r0, #0
 8010474:	d0f2      	beq.n	801045c <rmw_destroy_subscription+0x10>
 8010476:	686c      	ldr	r4, [r5, #4]
 8010478:	2c00      	cmp	r4, #0
 801047a:	d0ef      	beq.n	801045c <rmw_destroy_subscription+0x10>
 801047c:	e9d4 0707 	ldrd	r0, r7, [r4, #28]
 8010480:	f007 fd7c 	bl	8017f7c <destroy_topic>
 8010484:	6a23      	ldr	r3, [r4, #32]
 8010486:	6962      	ldr	r2, [r4, #20]
 8010488:	6918      	ldr	r0, [r3, #16]
 801048a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801048e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010492:	6819      	ldr	r1, [r3, #0]
 8010494:	f001 ff06 	bl	80122a4 <uxr_buffer_delete_entity>
 8010498:	6a21      	ldr	r1, [r4, #32]
 801049a:	6922      	ldr	r2, [r4, #16]
 801049c:	4603      	mov	r3, r0
 801049e:	6908      	ldr	r0, [r1, #16]
 80104a0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80104a4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80104a8:	6809      	ldr	r1, [r1, #0]
 80104aa:	461c      	mov	r4, r3
 80104ac:	f001 fefa 	bl	80122a4 <uxr_buffer_delete_entity>
 80104b0:	4606      	mov	r6, r0
 80104b2:	6938      	ldr	r0, [r7, #16]
 80104b4:	4622      	mov	r2, r4
 80104b6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80104ba:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80104be:	f000 fb0b 	bl	8010ad8 <run_xrce_session>
 80104c2:	4604      	mov	r4, r0
 80104c4:	6938      	ldr	r0, [r7, #16]
 80104c6:	4632      	mov	r2, r6
 80104c8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80104cc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80104d0:	f000 fb02 	bl	8010ad8 <run_xrce_session>
 80104d4:	b12c      	cbz	r4, 80104e2 <rmw_destroy_subscription+0x96>
 80104d6:	b120      	cbz	r0, 80104e2 <rmw_destroy_subscription+0x96>
 80104d8:	2400      	movs	r4, #0
 80104da:	4628      	mov	r0, r5
 80104dc:	f000 f9c8 	bl	8010870 <rmw_uxrce_fini_subscription_memory>
 80104e0:	e7bd      	b.n	801045e <rmw_destroy_subscription+0x12>
 80104e2:	2402      	movs	r4, #2
 80104e4:	e7f9      	b.n	80104da <rmw_destroy_subscription+0x8e>
 80104e6:	bf00      	nop

080104e8 <rmw_take_with_info>:
 80104e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104ea:	4605      	mov	r5, r0
 80104ec:	b089      	sub	sp, #36	; 0x24
 80104ee:	460f      	mov	r7, r1
 80104f0:	4614      	mov	r4, r2
 80104f2:	b10a      	cbz	r2, 80104f8 <rmw_take_with_info+0x10>
 80104f4:	2300      	movs	r3, #0
 80104f6:	7013      	strb	r3, [r2, #0]
 80104f8:	6828      	ldr	r0, [r5, #0]
 80104fa:	f000 fb57 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 80104fe:	b910      	cbnz	r0, 8010506 <rmw_take_with_info+0x1e>
 8010500:	2001      	movs	r0, #1
 8010502:	b009      	add	sp, #36	; 0x24
 8010504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010506:	686d      	ldr	r5, [r5, #4]
 8010508:	f000 fa6e 	bl	80109e8 <rmw_uxrce_clean_expired_static_input_buffer>
 801050c:	4628      	mov	r0, r5
 801050e:	f000 fa43 	bl	8010998 <rmw_uxrce_find_static_input_buffer_by_owner>
 8010512:	4606      	mov	r6, r0
 8010514:	2800      	cmp	r0, #0
 8010516:	d0f3      	beq.n	8010500 <rmw_take_with_info+0x18>
 8010518:	68c1      	ldr	r1, [r0, #12]
 801051a:	4668      	mov	r0, sp
 801051c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8010520:	3110      	adds	r1, #16
 8010522:	f001 fde1 	bl	80120e8 <ucdr_init_buffer>
 8010526:	69ab      	ldr	r3, [r5, #24]
 8010528:	4639      	mov	r1, r7
 801052a:	68db      	ldr	r3, [r3, #12]
 801052c:	4668      	mov	r0, sp
 801052e:	4798      	blx	r3
 8010530:	4631      	mov	r1, r6
 8010532:	4605      	mov	r5, r0
 8010534:	4804      	ldr	r0, [pc, #16]	; (8010548 <rmw_take_with_info+0x60>)
 8010536:	f007 fc85 	bl	8017e44 <put_memory>
 801053a:	b104      	cbz	r4, 801053e <rmw_take_with_info+0x56>
 801053c:	7025      	strb	r5, [r4, #0]
 801053e:	f085 0001 	eor.w	r0, r5, #1
 8010542:	b2c0      	uxtb	r0, r0
 8010544:	b009      	add	sp, #36	; 0x24
 8010546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010548:	200116b0 	.word	0x200116b0

0801054c <rmw_uxrce_transport_init>:
 801054c:	b508      	push	{r3, lr}
 801054e:	b108      	cbz	r0, 8010554 <rmw_uxrce_transport_init+0x8>
 8010550:	f100 0210 	add.w	r2, r0, #16
 8010554:	b139      	cbz	r1, 8010566 <rmw_uxrce_transport_init+0x1a>
 8010556:	6949      	ldr	r1, [r1, #20]
 8010558:	4610      	mov	r0, r2
 801055a:	f002 f939 	bl	80127d0 <uxr_init_custom_transport>
 801055e:	f080 0001 	eor.w	r0, r0, #1
 8010562:	b2c0      	uxtb	r0, r0
 8010564:	bd08      	pop	{r3, pc}
 8010566:	4b04      	ldr	r3, [pc, #16]	; (8010578 <rmw_uxrce_transport_init+0x2c>)
 8010568:	4610      	mov	r0, r2
 801056a:	6859      	ldr	r1, [r3, #4]
 801056c:	f002 f930 	bl	80127d0 <uxr_init_custom_transport>
 8010570:	f080 0001 	eor.w	r0, r0, #1
 8010574:	b2c0      	uxtb	r0, r0
 8010576:	bd08      	pop	{r3, pc}
 8010578:	20011690 	.word	0x20011690

0801057c <rmw_uros_epoch_nanos>:
 801057c:	4b05      	ldr	r3, [pc, #20]	; (8010594 <rmw_uros_epoch_nanos+0x18>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	b123      	cbz	r3, 801058c <rmw_uros_epoch_nanos+0x10>
 8010582:	68d8      	ldr	r0, [r3, #12]
 8010584:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010588:	f002 bee6 	b.w	8013358 <uxr_epoch_nanos>
 801058c:	2000      	movs	r0, #0
 801058e:	2100      	movs	r1, #0
 8010590:	4770      	bx	lr
 8010592:	bf00      	nop
 8010594:	20014858 	.word	0x20014858

08010598 <rmw_uros_sync_session>:
 8010598:	b508      	push	{r3, lr}
 801059a:	4b07      	ldr	r3, [pc, #28]	; (80105b8 <rmw_uros_sync_session+0x20>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	b14b      	cbz	r3, 80105b4 <rmw_uros_sync_session+0x1c>
 80105a0:	4601      	mov	r1, r0
 80105a2:	68d8      	ldr	r0, [r3, #12]
 80105a4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80105a8:	f002 fe86 	bl	80132b8 <uxr_sync_session>
 80105ac:	f080 0001 	eor.w	r0, r0, #1
 80105b0:	b2c0      	uxtb	r0, r0
 80105b2:	bd08      	pop	{r3, pc}
 80105b4:	2001      	movs	r0, #1
 80105b6:	bd08      	pop	{r3, pc}
 80105b8:	20014858 	.word	0x20014858

080105bc <rmw_uxrce_init_service_memory>:
 80105bc:	b1b2      	cbz	r2, 80105ec <rmw_uxrce_init_service_memory+0x30>
 80105be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105c0:	7a07      	ldrb	r7, [r0, #8]
 80105c2:	4605      	mov	r5, r0
 80105c4:	b98f      	cbnz	r7, 80105ea <rmw_uxrce_init_service_memory+0x2e>
 80105c6:	e9c0 7700 	strd	r7, r7, [r0]
 80105ca:	460c      	mov	r4, r1
 80105cc:	23c8      	movs	r3, #200	; 0xc8
 80105ce:	2101      	movs	r1, #1
 80105d0:	fb03 4602 	mla	r6, r3, r2, r4
 80105d4:	60c3      	str	r3, [r0, #12]
 80105d6:	7201      	strb	r1, [r0, #8]
 80105d8:	4621      	mov	r1, r4
 80105da:	4628      	mov	r0, r5
 80105dc:	f007 fc32 	bl	8017e44 <put_memory>
 80105e0:	60e4      	str	r4, [r4, #12]
 80105e2:	f804 7bc8 	strb.w	r7, [r4], #200
 80105e6:	42a6      	cmp	r6, r4
 80105e8:	d1f6      	bne.n	80105d8 <rmw_uxrce_init_service_memory+0x1c>
 80105ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105ec:	4770      	bx	lr
 80105ee:	bf00      	nop

080105f0 <rmw_uxrce_init_client_memory>:
 80105f0:	b1b2      	cbz	r2, 8010620 <rmw_uxrce_init_client_memory+0x30>
 80105f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105f4:	7a07      	ldrb	r7, [r0, #8]
 80105f6:	4605      	mov	r5, r0
 80105f8:	b98f      	cbnz	r7, 801061e <rmw_uxrce_init_client_memory+0x2e>
 80105fa:	e9c0 7700 	strd	r7, r7, [r0]
 80105fe:	460c      	mov	r4, r1
 8010600:	23c8      	movs	r3, #200	; 0xc8
 8010602:	2101      	movs	r1, #1
 8010604:	fb03 4602 	mla	r6, r3, r2, r4
 8010608:	60c3      	str	r3, [r0, #12]
 801060a:	7201      	strb	r1, [r0, #8]
 801060c:	4621      	mov	r1, r4
 801060e:	4628      	mov	r0, r5
 8010610:	f007 fc18 	bl	8017e44 <put_memory>
 8010614:	60e4      	str	r4, [r4, #12]
 8010616:	f804 7bc8 	strb.w	r7, [r4], #200
 801061a:	42a6      	cmp	r6, r4
 801061c:	d1f6      	bne.n	801060c <rmw_uxrce_init_client_memory+0x1c>
 801061e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010620:	4770      	bx	lr
 8010622:	bf00      	nop

08010624 <rmw_uxrce_init_publisher_memory>:
 8010624:	b1b2      	cbz	r2, 8010654 <rmw_uxrce_init_publisher_memory+0x30>
 8010626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010628:	7a07      	ldrb	r7, [r0, #8]
 801062a:	4605      	mov	r5, r0
 801062c:	b98f      	cbnz	r7, 8010652 <rmw_uxrce_init_publisher_memory+0x2e>
 801062e:	e9c0 7700 	strd	r7, r7, [r0]
 8010632:	460c      	mov	r4, r1
 8010634:	23d8      	movs	r3, #216	; 0xd8
 8010636:	2101      	movs	r1, #1
 8010638:	fb03 4602 	mla	r6, r3, r2, r4
 801063c:	60c3      	str	r3, [r0, #12]
 801063e:	7201      	strb	r1, [r0, #8]
 8010640:	4621      	mov	r1, r4
 8010642:	4628      	mov	r0, r5
 8010644:	f007 fbfe 	bl	8017e44 <put_memory>
 8010648:	60e4      	str	r4, [r4, #12]
 801064a:	f804 7bd8 	strb.w	r7, [r4], #216
 801064e:	42a6      	cmp	r6, r4
 8010650:	d1f6      	bne.n	8010640 <rmw_uxrce_init_publisher_memory+0x1c>
 8010652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010654:	4770      	bx	lr
 8010656:	bf00      	nop

08010658 <rmw_uxrce_init_subscription_memory>:
 8010658:	b1b2      	cbz	r2, 8010688 <rmw_uxrce_init_subscription_memory+0x30>
 801065a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801065c:	7a07      	ldrb	r7, [r0, #8]
 801065e:	4605      	mov	r5, r0
 8010660:	b98f      	cbnz	r7, 8010686 <rmw_uxrce_init_subscription_memory+0x2e>
 8010662:	e9c0 7700 	strd	r7, r7, [r0]
 8010666:	460c      	mov	r4, r1
 8010668:	23d0      	movs	r3, #208	; 0xd0
 801066a:	2101      	movs	r1, #1
 801066c:	fb03 4602 	mla	r6, r3, r2, r4
 8010670:	60c3      	str	r3, [r0, #12]
 8010672:	7201      	strb	r1, [r0, #8]
 8010674:	4621      	mov	r1, r4
 8010676:	4628      	mov	r0, r5
 8010678:	f007 fbe4 	bl	8017e44 <put_memory>
 801067c:	60e4      	str	r4, [r4, #12]
 801067e:	f804 7bd0 	strb.w	r7, [r4], #208
 8010682:	42a6      	cmp	r6, r4
 8010684:	d1f6      	bne.n	8010674 <rmw_uxrce_init_subscription_memory+0x1c>
 8010686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010688:	4770      	bx	lr
 801068a:	bf00      	nop

0801068c <rmw_uxrce_init_node_memory>:
 801068c:	b1b2      	cbz	r2, 80106bc <rmw_uxrce_init_node_memory+0x30>
 801068e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010690:	7a07      	ldrb	r7, [r0, #8]
 8010692:	4605      	mov	r5, r0
 8010694:	b98f      	cbnz	r7, 80106ba <rmw_uxrce_init_node_memory+0x2e>
 8010696:	e9c0 7700 	strd	r7, r7, [r0]
 801069a:	460c      	mov	r4, r1
 801069c:	23a4      	movs	r3, #164	; 0xa4
 801069e:	2101      	movs	r1, #1
 80106a0:	fb03 4602 	mla	r6, r3, r2, r4
 80106a4:	60c3      	str	r3, [r0, #12]
 80106a6:	7201      	strb	r1, [r0, #8]
 80106a8:	4621      	mov	r1, r4
 80106aa:	4628      	mov	r0, r5
 80106ac:	f007 fbca 	bl	8017e44 <put_memory>
 80106b0:	60e4      	str	r4, [r4, #12]
 80106b2:	f804 7ba4 	strb.w	r7, [r4], #164
 80106b6:	42a6      	cmp	r6, r4
 80106b8:	d1f6      	bne.n	80106a8 <rmw_uxrce_init_node_memory+0x1c>
 80106ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106bc:	4770      	bx	lr
 80106be:	bf00      	nop

080106c0 <rmw_uxrce_init_session_memory>:
 80106c0:	b1d2      	cbz	r2, 80106f8 <rmw_uxrce_init_session_memory+0x38>
 80106c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106c6:	7a07      	ldrb	r7, [r0, #8]
 80106c8:	4605      	mov	r5, r0
 80106ca:	b99f      	cbnz	r7, 80106f4 <rmw_uxrce_init_session_memory+0x34>
 80106cc:	e9c0 7700 	strd	r7, r7, [r0]
 80106d0:	f241 53a8 	movw	r3, #5544	; 0x15a8
 80106d4:	460c      	mov	r4, r1
 80106d6:	2101      	movs	r1, #1
 80106d8:	fb03 4602 	mla	r6, r3, r2, r4
 80106dc:	60c3      	str	r3, [r0, #12]
 80106de:	4698      	mov	r8, r3
 80106e0:	7201      	strb	r1, [r0, #8]
 80106e2:	4621      	mov	r1, r4
 80106e4:	4628      	mov	r0, r5
 80106e6:	f007 fbad 	bl	8017e44 <put_memory>
 80106ea:	60e4      	str	r4, [r4, #12]
 80106ec:	7027      	strb	r7, [r4, #0]
 80106ee:	4444      	add	r4, r8
 80106f0:	42a6      	cmp	r6, r4
 80106f2:	d1f6      	bne.n	80106e2 <rmw_uxrce_init_session_memory+0x22>
 80106f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106f8:	4770      	bx	lr
 80106fa:	bf00      	nop

080106fc <rmw_uxrce_init_topic_memory>:
 80106fc:	b1c2      	cbz	r2, 8010730 <rmw_uxrce_init_topic_memory+0x34>
 80106fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010700:	7a07      	ldrb	r7, [r0, #8]
 8010702:	4606      	mov	r6, r0
 8010704:	b99f      	cbnz	r7, 801072e <rmw_uxrce_init_topic_memory+0x32>
 8010706:	e9c0 7700 	strd	r7, r7, [r0]
 801070a:	460c      	mov	r4, r1
 801070c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8010710:	2101      	movs	r1, #1
 8010712:	231c      	movs	r3, #28
 8010714:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010718:	7201      	strb	r1, [r0, #8]
 801071a:	60c3      	str	r3, [r0, #12]
 801071c:	4621      	mov	r1, r4
 801071e:	4630      	mov	r0, r6
 8010720:	f007 fb90 	bl	8017e44 <put_memory>
 8010724:	60e4      	str	r4, [r4, #12]
 8010726:	f804 7b1c 	strb.w	r7, [r4], #28
 801072a:	42a5      	cmp	r5, r4
 801072c:	d1f6      	bne.n	801071c <rmw_uxrce_init_topic_memory+0x20>
 801072e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010730:	4770      	bx	lr
 8010732:	bf00      	nop

08010734 <rmw_uxrce_init_static_input_buffer_memory>:
 8010734:	b1d2      	cbz	r2, 801076c <rmw_uxrce_init_static_input_buffer_memory+0x38>
 8010736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010738:	7a07      	ldrb	r7, [r0, #8]
 801073a:	4606      	mov	r6, r0
 801073c:	b9af      	cbnz	r7, 801076a <rmw_uxrce_init_static_input_buffer_memory+0x36>
 801073e:	e9c0 7700 	strd	r7, r7, [r0]
 8010742:	460c      	mov	r4, r1
 8010744:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 8010748:	2101      	movs	r1, #1
 801074a:	f44f 6304 	mov.w	r3, #2112	; 0x840
 801074e:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 8010752:	7201      	strb	r1, [r0, #8]
 8010754:	60c3      	str	r3, [r0, #12]
 8010756:	4621      	mov	r1, r4
 8010758:	4630      	mov	r0, r6
 801075a:	f007 fb73 	bl	8017e44 <put_memory>
 801075e:	60e4      	str	r4, [r4, #12]
 8010760:	7027      	strb	r7, [r4, #0]
 8010762:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8010766:	42a5      	cmp	r5, r4
 8010768:	d1f5      	bne.n	8010756 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 801076a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801076c:	4770      	bx	lr
 801076e:	bf00      	nop

08010770 <rmw_uxrce_init_init_options_impl_memory>:
 8010770:	b1b2      	cbz	r2, 80107a0 <rmw_uxrce_init_init_options_impl_memory+0x30>
 8010772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010774:	7a07      	ldrb	r7, [r0, #8]
 8010776:	4605      	mov	r5, r0
 8010778:	b98f      	cbnz	r7, 801079e <rmw_uxrce_init_init_options_impl_memory+0x2e>
 801077a:	e9c0 7700 	strd	r7, r7, [r0]
 801077e:	460c      	mov	r4, r1
 8010780:	232c      	movs	r3, #44	; 0x2c
 8010782:	2101      	movs	r1, #1
 8010784:	fb03 4602 	mla	r6, r3, r2, r4
 8010788:	60c3      	str	r3, [r0, #12]
 801078a:	7201      	strb	r1, [r0, #8]
 801078c:	4621      	mov	r1, r4
 801078e:	4628      	mov	r0, r5
 8010790:	f007 fb58 	bl	8017e44 <put_memory>
 8010794:	60e4      	str	r4, [r4, #12]
 8010796:	f804 7b2c 	strb.w	r7, [r4], #44
 801079a:	42a6      	cmp	r6, r4
 801079c:	d1f6      	bne.n	801078c <rmw_uxrce_init_init_options_impl_memory+0x1c>
 801079e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107a0:	4770      	bx	lr
 80107a2:	bf00      	nop

080107a4 <rmw_uxrce_init_wait_set_memory>:
 80107a4:	b1c2      	cbz	r2, 80107d8 <rmw_uxrce_init_wait_set_memory+0x34>
 80107a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107a8:	7a07      	ldrb	r7, [r0, #8]
 80107aa:	4606      	mov	r6, r0
 80107ac:	b99f      	cbnz	r7, 80107d6 <rmw_uxrce_init_wait_set_memory+0x32>
 80107ae:	e9c0 7700 	strd	r7, r7, [r0]
 80107b2:	460c      	mov	r4, r1
 80107b4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80107b8:	2101      	movs	r1, #1
 80107ba:	231c      	movs	r3, #28
 80107bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80107c0:	7201      	strb	r1, [r0, #8]
 80107c2:	60c3      	str	r3, [r0, #12]
 80107c4:	4621      	mov	r1, r4
 80107c6:	4630      	mov	r0, r6
 80107c8:	f007 fb3c 	bl	8017e44 <put_memory>
 80107cc:	60e4      	str	r4, [r4, #12]
 80107ce:	f804 7b1c 	strb.w	r7, [r4], #28
 80107d2:	42a5      	cmp	r5, r4
 80107d4:	d1f6      	bne.n	80107c4 <rmw_uxrce_init_wait_set_memory+0x20>
 80107d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107d8:	4770      	bx	lr
 80107da:	bf00      	nop

080107dc <rmw_uxrce_init_guard_condition_memory>:
 80107dc:	b1b2      	cbz	r2, 801080c <rmw_uxrce_init_guard_condition_memory+0x30>
 80107de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107e0:	7a07      	ldrb	r7, [r0, #8]
 80107e2:	4605      	mov	r5, r0
 80107e4:	b98f      	cbnz	r7, 801080a <rmw_uxrce_init_guard_condition_memory+0x2e>
 80107e6:	e9c0 7700 	strd	r7, r7, [r0]
 80107ea:	460c      	mov	r4, r1
 80107ec:	2320      	movs	r3, #32
 80107ee:	2101      	movs	r1, #1
 80107f0:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 80107f4:	7201      	strb	r1, [r0, #8]
 80107f6:	60c3      	str	r3, [r0, #12]
 80107f8:	4621      	mov	r1, r4
 80107fa:	4628      	mov	r0, r5
 80107fc:	f007 fb22 	bl	8017e44 <put_memory>
 8010800:	60e4      	str	r4, [r4, #12]
 8010802:	f804 7b20 	strb.w	r7, [r4], #32
 8010806:	42a6      	cmp	r6, r4
 8010808:	d1f6      	bne.n	80107f8 <rmw_uxrce_init_guard_condition_memory+0x1c>
 801080a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801080c:	4770      	bx	lr
 801080e:	bf00      	nop

08010810 <rmw_uxrce_fini_session_memory>:
 8010810:	4601      	mov	r1, r0
 8010812:	4801      	ldr	r0, [pc, #4]	; (8010818 <rmw_uxrce_fini_session_memory+0x8>)
 8010814:	f007 bb16 	b.w	8017e44 <put_memory>
 8010818:	20014858 	.word	0x20014858

0801081c <rmw_uxrce_fini_node_memory>:
 801081c:	b538      	push	{r3, r4, r5, lr}
 801081e:	4604      	mov	r4, r0
 8010820:	6800      	ldr	r0, [r0, #0]
 8010822:	f000 f9c3 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 8010826:	b158      	cbz	r0, 8010840 <rmw_uxrce_fini_node_memory+0x24>
 8010828:	6823      	ldr	r3, [r4, #0]
 801082a:	b10b      	cbz	r3, 8010830 <rmw_uxrce_fini_node_memory+0x14>
 801082c:	2300      	movs	r3, #0
 801082e:	6023      	str	r3, [r4, #0]
 8010830:	6861      	ldr	r1, [r4, #4]
 8010832:	b129      	cbz	r1, 8010840 <rmw_uxrce_fini_node_memory+0x24>
 8010834:	2500      	movs	r5, #0
 8010836:	4803      	ldr	r0, [pc, #12]	; (8010844 <rmw_uxrce_fini_node_memory+0x28>)
 8010838:	610d      	str	r5, [r1, #16]
 801083a:	f007 fb03 	bl	8017e44 <put_memory>
 801083e:	6065      	str	r5, [r4, #4]
 8010840:	bd38      	pop	{r3, r4, r5, pc}
 8010842:	bf00      	nop
 8010844:	20014684 	.word	0x20014684

08010848 <rmw_uxrce_fini_publisher_memory>:
 8010848:	b510      	push	{r4, lr}
 801084a:	4604      	mov	r4, r0
 801084c:	6800      	ldr	r0, [r0, #0]
 801084e:	f000 f9ad 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 8010852:	b150      	cbz	r0, 801086a <rmw_uxrce_fini_publisher_memory+0x22>
 8010854:	6823      	ldr	r3, [r4, #0]
 8010856:	b10b      	cbz	r3, 801085c <rmw_uxrce_fini_publisher_memory+0x14>
 8010858:	2300      	movs	r3, #0
 801085a:	6023      	str	r3, [r4, #0]
 801085c:	6861      	ldr	r1, [r4, #4]
 801085e:	b121      	cbz	r1, 801086a <rmw_uxrce_fini_publisher_memory+0x22>
 8010860:	4802      	ldr	r0, [pc, #8]	; (801086c <rmw_uxrce_fini_publisher_memory+0x24>)
 8010862:	f007 faef 	bl	8017e44 <put_memory>
 8010866:	2300      	movs	r3, #0
 8010868:	6063      	str	r3, [r4, #4]
 801086a:	bd10      	pop	{r4, pc}
 801086c:	200116c0 	.word	0x200116c0

08010870 <rmw_uxrce_fini_subscription_memory>:
 8010870:	b510      	push	{r4, lr}
 8010872:	4604      	mov	r4, r0
 8010874:	6800      	ldr	r0, [r0, #0]
 8010876:	f000 f999 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 801087a:	b150      	cbz	r0, 8010892 <rmw_uxrce_fini_subscription_memory+0x22>
 801087c:	6823      	ldr	r3, [r4, #0]
 801087e:	b10b      	cbz	r3, 8010884 <rmw_uxrce_fini_subscription_memory+0x14>
 8010880:	2300      	movs	r3, #0
 8010882:	6023      	str	r3, [r4, #0]
 8010884:	6861      	ldr	r1, [r4, #4]
 8010886:	b121      	cbz	r1, 8010892 <rmw_uxrce_fini_subscription_memory+0x22>
 8010888:	4802      	ldr	r0, [pc, #8]	; (8010894 <rmw_uxrce_fini_subscription_memory+0x24>)
 801088a:	f007 fadb 	bl	8017e44 <put_memory>
 801088e:	2300      	movs	r3, #0
 8010890:	6063      	str	r3, [r4, #4]
 8010892:	bd10      	pop	{r4, pc}
 8010894:	2001491c 	.word	0x2001491c

08010898 <rmw_uxrce_fini_service_memory>:
 8010898:	b510      	push	{r4, lr}
 801089a:	4604      	mov	r4, r0
 801089c:	6800      	ldr	r0, [r0, #0]
 801089e:	f000 f985 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 80108a2:	b150      	cbz	r0, 80108ba <rmw_uxrce_fini_service_memory+0x22>
 80108a4:	6823      	ldr	r3, [r4, #0]
 80108a6:	b10b      	cbz	r3, 80108ac <rmw_uxrce_fini_service_memory+0x14>
 80108a8:	2300      	movs	r3, #0
 80108aa:	6023      	str	r3, [r4, #0]
 80108ac:	6861      	ldr	r1, [r4, #4]
 80108ae:	b121      	cbz	r1, 80108ba <rmw_uxrce_fini_service_memory+0x22>
 80108b0:	4802      	ldr	r0, [pc, #8]	; (80108bc <rmw_uxrce_fini_service_memory+0x24>)
 80108b2:	f007 fac7 	bl	8017e44 <put_memory>
 80108b6:	2300      	movs	r3, #0
 80108b8:	6063      	str	r3, [r4, #4]
 80108ba:	bd10      	pop	{r4, pc}
 80108bc:	2001490c 	.word	0x2001490c

080108c0 <rmw_uxrce_fini_client_memory>:
 80108c0:	b510      	push	{r4, lr}
 80108c2:	4604      	mov	r4, r0
 80108c4:	6800      	ldr	r0, [r0, #0]
 80108c6:	f000 f971 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 80108ca:	b150      	cbz	r0, 80108e2 <rmw_uxrce_fini_client_memory+0x22>
 80108cc:	6823      	ldr	r3, [r4, #0]
 80108ce:	b10b      	cbz	r3, 80108d4 <rmw_uxrce_fini_client_memory+0x14>
 80108d0:	2300      	movs	r3, #0
 80108d2:	6023      	str	r3, [r4, #0]
 80108d4:	6861      	ldr	r1, [r4, #4]
 80108d6:	b121      	cbz	r1, 80108e2 <rmw_uxrce_fini_client_memory+0x22>
 80108d8:	4802      	ldr	r0, [pc, #8]	; (80108e4 <rmw_uxrce_fini_client_memory+0x24>)
 80108da:	f007 fab3 	bl	8017e44 <put_memory>
 80108de:	2300      	movs	r3, #0
 80108e0:	6063      	str	r3, [r4, #4]
 80108e2:	bd10      	pop	{r4, pc}
 80108e4:	20011f40 	.word	0x20011f40

080108e8 <rmw_uxrce_fini_topic_memory>:
 80108e8:	b510      	push	{r4, lr}
 80108ea:	4601      	mov	r1, r0
 80108ec:	4604      	mov	r4, r0
 80108ee:	4803      	ldr	r0, [pc, #12]	; (80108fc <rmw_uxrce_fini_topic_memory+0x14>)
 80108f0:	f007 faa8 	bl	8017e44 <put_memory>
 80108f4:	2300      	movs	r3, #0
 80108f6:	61a3      	str	r3, [r4, #24]
 80108f8:	bd10      	pop	{r4, pc}
 80108fa:	bf00      	nop
 80108fc:	20014848 	.word	0x20014848

08010900 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8010900:	b082      	sub	sp, #8
 8010902:	b4f0      	push	{r4, r5, r6, r7}
 8010904:	4923      	ldr	r1, [pc, #140]	; (8010994 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 8010906:	ac04      	add	r4, sp, #16
 8010908:	e884 000c 	stmia.w	r4, {r2, r3}
 801090c:	680d      	ldr	r5, [r1, #0]
 801090e:	9c05      	ldr	r4, [sp, #20]
 8010910:	2d00      	cmp	r5, #0
 8010912:	d03d      	beq.n	8010990 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 8010914:	462b      	mov	r3, r5
 8010916:	2100      	movs	r1, #0
 8010918:	68da      	ldr	r2, [r3, #12]
 801091a:	689b      	ldr	r3, [r3, #8]
 801091c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8010920:	4290      	cmp	r0, r2
 8010922:	bf08      	it	eq
 8010924:	3101      	addeq	r1, #1
 8010926:	2b00      	cmp	r3, #0
 8010928:	d1f6      	bne.n	8010918 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 801092a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801092e:	2b02      	cmp	r3, #2
 8010930:	d026      	beq.n	8010980 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 8010932:	d906      	bls.n	8010942 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 8010934:	2b03      	cmp	r3, #3
 8010936:	d004      	beq.n	8010942 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 8010938:	2100      	movs	r1, #0
 801093a:	bcf0      	pop	{r4, r5, r6, r7}
 801093c:	4608      	mov	r0, r1
 801093e:	b002      	add	sp, #8
 8010940:	4770      	bx	lr
 8010942:	b304      	cbz	r4, 8010986 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010944:	428c      	cmp	r4, r1
 8010946:	d81e      	bhi.n	8010986 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010948:	2d00      	cmp	r5, #0
 801094a:	d0f5      	beq.n	8010938 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 801094c:	2100      	movs	r1, #0
 801094e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8010952:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8010956:	e002      	b.n	801095e <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 8010958:	68ad      	ldr	r5, [r5, #8]
 801095a:	2d00      	cmp	r5, #0
 801095c:	d0ed      	beq.n	801093a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 801095e:	68eb      	ldr	r3, [r5, #12]
 8010960:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8010964:	4290      	cmp	r0, r2
 8010966:	d1f7      	bne.n	8010958 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8010968:	f603 0318 	addw	r3, r3, #2072	; 0x818
 801096c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010970:	42b2      	cmp	r2, r6
 8010972:	eb73 0407 	sbcs.w	r4, r3, r7
 8010976:	daef      	bge.n	8010958 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8010978:	4616      	mov	r6, r2
 801097a:	461f      	mov	r7, r3
 801097c:	4629      	mov	r1, r5
 801097e:	e7eb      	b.n	8010958 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8010980:	b10c      	cbz	r4, 8010986 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010982:	428c      	cmp	r4, r1
 8010984:	d9d8      	bls.n	8010938 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010986:	bcf0      	pop	{r4, r5, r6, r7}
 8010988:	4802      	ldr	r0, [pc, #8]	; (8010994 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 801098a:	b002      	add	sp, #8
 801098c:	f007 ba4a 	b.w	8017e24 <get_memory>
 8010990:	4629      	mov	r1, r5
 8010992:	e7ca      	b.n	801092a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8010994:	200116b0 	.word	0x200116b0

08010998 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010998:	4b12      	ldr	r3, [pc, #72]	; (80109e4 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	b1fb      	cbz	r3, 80109de <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 801099e:	b4f0      	push	{r4, r5, r6, r7}
 80109a0:	f04f 0c00 	mov.w	ip, #0
 80109a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80109a8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80109ac:	e001      	b.n	80109b2 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 80109ae:	689b      	ldr	r3, [r3, #8]
 80109b0:	b193      	cbz	r3, 80109d8 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 80109b2:	68da      	ldr	r2, [r3, #12]
 80109b4:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 80109b8:	4288      	cmp	r0, r1
 80109ba:	d1f8      	bne.n	80109ae <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 80109bc:	f602 0218 	addw	r2, r2, #2072	; 0x818
 80109c0:	e9d2 6700 	ldrd	r6, r7, [r2]
 80109c4:	42a6      	cmp	r6, r4
 80109c6:	eb77 0205 	sbcs.w	r2, r7, r5
 80109ca:	daf0      	bge.n	80109ae <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 80109cc:	469c      	mov	ip, r3
 80109ce:	689b      	ldr	r3, [r3, #8]
 80109d0:	4634      	mov	r4, r6
 80109d2:	463d      	mov	r5, r7
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d1ec      	bne.n	80109b2 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 80109d8:	4660      	mov	r0, ip
 80109da:	bcf0      	pop	{r4, r5, r6, r7}
 80109dc:	4770      	bx	lr
 80109de:	4618      	mov	r0, r3
 80109e0:	4770      	bx	lr
 80109e2:	bf00      	nop
 80109e4:	200116b0 	.word	0x200116b0

080109e8 <rmw_uxrce_clean_expired_static_input_buffer>:
 80109e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109ec:	4e38      	ldr	r6, [pc, #224]	; (8010ad0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 80109ee:	f8d6 8000 	ldr.w	r8, [r6]
 80109f2:	b083      	sub	sp, #12
 80109f4:	f7ff fdc2 	bl	801057c <rmw_uros_epoch_nanos>
 80109f8:	f1b8 0f00 	cmp.w	r8, #0
 80109fc:	d05f      	beq.n	8010abe <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 80109fe:	46b1      	mov	r9, r6
 8010a00:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8010a04:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 8010a08:	2b04      	cmp	r3, #4
 8010a0a:	4682      	mov	sl, r0
 8010a0c:	468b      	mov	fp, r1
 8010a0e:	d02d      	beq.n	8010a6c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8010a10:	2b05      	cmp	r3, #5
 8010a12:	d041      	beq.n	8010a98 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 8010a14:	2b03      	cmp	r3, #3
 8010a16:	d029      	beq.n	8010a6c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8010a18:	2200      	movs	r2, #0
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	e9cd 2300 	strd	r2, r3, [sp]
 8010a20:	2001      	movs	r0, #1
 8010a22:	2100      	movs	r1, #0
 8010a24:	9b00      	ldr	r3, [sp, #0]
 8010a26:	f606 0618 	addw	r6, r6, #2072	; 0x818
 8010a2a:	e9d6 6700 	ldrd	r6, r7, [r6]
 8010a2e:	18c2      	adds	r2, r0, r3
 8010a30:	9b01      	ldr	r3, [sp, #4]
 8010a32:	eb41 0303 	adc.w	r3, r1, r3
 8010a36:	1994      	adds	r4, r2, r6
 8010a38:	eb43 0507 	adc.w	r5, r3, r7
 8010a3c:	4554      	cmp	r4, sl
 8010a3e:	eb75 020b 	sbcs.w	r2, r5, fp
 8010a42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010a46:	db03      	blt.n	8010a50 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8010a48:	45b2      	cmp	sl, r6
 8010a4a:	eb7b 0207 	sbcs.w	r2, fp, r7
 8010a4e:	da05      	bge.n	8010a5c <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 8010a50:	4641      	mov	r1, r8
 8010a52:	4648      	mov	r0, r9
 8010a54:	9300      	str	r3, [sp, #0]
 8010a56:	f007 f9f5 	bl	8017e44 <put_memory>
 8010a5a:	9b00      	ldr	r3, [sp, #0]
 8010a5c:	b37b      	cbz	r3, 8010abe <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 8010a5e:	4698      	mov	r8, r3
 8010a60:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8010a64:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 8010a68:	2b04      	cmp	r3, #4
 8010a6a:	d1d1      	bne.n	8010a10 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 8010a6c:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 8010a70:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 8010a74:	e9cd 2300 	strd	r2, r3, [sp]
 8010a78:	4313      	orrs	r3, r2
 8010a7a:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 8010a7e:	d015      	beq.n	8010aac <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8010a80:	9a01      	ldr	r2, [sp, #4]
 8010a82:	4b14      	ldr	r3, [pc, #80]	; (8010ad4 <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 8010a84:	fb03 f702 	mul.w	r7, r3, r2
 8010a88:	9a00      	ldr	r2, [sp, #0]
 8010a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8010a8e:	e9cd 2300 	strd	r2, r3, [sp]
 8010a92:	443b      	add	r3, r7
 8010a94:	9301      	str	r3, [sp, #4]
 8010a96:	e7c5      	b.n	8010a24 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 8010a98:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 8010a9c:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 8010aa0:	e9cd 2300 	strd	r2, r3, [sp]
 8010aa4:	4313      	orrs	r3, r2
 8010aa6:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 8010aaa:	d1e9      	bne.n	8010a80 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 8010aac:	ea50 0301 	orrs.w	r3, r0, r1
 8010ab0:	bf02      	ittt	eq
 8010ab2:	a305      	addeq	r3, pc, #20	; (adr r3, 8010ac8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 8010ab4:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 8010ab8:	e9cd 2300 	strdeq	r2, r3, [sp]
 8010abc:	e7b2      	b.n	8010a24 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 8010abe:	b003      	add	sp, #12
 8010ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ac4:	f3af 8000 	nop.w
 8010ac8:	fc23ac00 	.word	0xfc23ac00
 8010acc:	00000006 	.word	0x00000006
 8010ad0:	200116b0 	.word	0x200116b0
 8010ad4:	3b9aca00 	.word	0x3b9aca00

08010ad8 <run_xrce_session>:
 8010ad8:	b510      	push	{r4, lr}
 8010ada:	788c      	ldrb	r4, [r1, #2]
 8010adc:	b086      	sub	sp, #24
 8010ade:	2c01      	cmp	r4, #1
 8010ae0:	f8ad 200e 	strh.w	r2, [sp, #14]
 8010ae4:	d00c      	beq.n	8010b00 <run_xrce_session+0x28>
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	2301      	movs	r3, #1
 8010aea:	9300      	str	r3, [sp, #0]
 8010aec:	f10d 020e 	add.w	r2, sp, #14
 8010af0:	f10d 0317 	add.w	r3, sp, #23
 8010af4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010af8:	f002 fce8 	bl	80134cc <uxr_run_session_until_all_status>
 8010afc:	b006      	add	sp, #24
 8010afe:	bd10      	pop	{r4, pc}
 8010b00:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010b04:	f002 fc32 	bl	801336c <uxr_flash_output_streams>
 8010b08:	4620      	mov	r0, r4
 8010b0a:	b006      	add	sp, #24
 8010b0c:	bd10      	pop	{r4, pc}
 8010b0e:	bf00      	nop

08010b10 <generate_type_name>:
 8010b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b14:	4606      	mov	r6, r0
 8010b16:	b086      	sub	sp, #24
 8010b18:	6840      	ldr	r0, [r0, #4]
 8010b1a:	460f      	mov	r7, r1
 8010b1c:	4690      	mov	r8, r2
 8010b1e:	f7ef fb61 	bl	80001e4 <strlen>
 8010b22:	6834      	ldr	r4, [r6, #0]
 8010b24:	4605      	mov	r5, r0
 8010b26:	b11c      	cbz	r4, 8010b30 <generate_type_name+0x20>
 8010b28:	4620      	mov	r0, r4
 8010b2a:	f7ef fb5b 	bl	80001e4 <strlen>
 8010b2e:	4604      	mov	r4, r0
 8010b30:	2300      	movs	r3, #0
 8010b32:	703b      	strb	r3, [r7, #0]
 8010b34:	6833      	ldr	r3, [r6, #0]
 8010b36:	3508      	adds	r5, #8
 8010b38:	442c      	add	r4, r5
 8010b3a:	b19b      	cbz	r3, 8010b64 <generate_type_name+0x54>
 8010b3c:	490b      	ldr	r1, [pc, #44]	; (8010b6c <generate_type_name+0x5c>)
 8010b3e:	4608      	mov	r0, r1
 8010b40:	6875      	ldr	r5, [r6, #4]
 8010b42:	4a0b      	ldr	r2, [pc, #44]	; (8010b70 <generate_type_name+0x60>)
 8010b44:	9504      	str	r5, [sp, #16]
 8010b46:	4d0b      	ldr	r5, [pc, #44]	; (8010b74 <generate_type_name+0x64>)
 8010b48:	9103      	str	r1, [sp, #12]
 8010b4a:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8010b4e:	9000      	str	r0, [sp, #0]
 8010b50:	9205      	str	r2, [sp, #20]
 8010b52:	4641      	mov	r1, r8
 8010b54:	4a08      	ldr	r2, [pc, #32]	; (8010b78 <generate_type_name+0x68>)
 8010b56:	4638      	mov	r0, r7
 8010b58:	f009 f9b2 	bl	8019ec0 <sniprintf>
 8010b5c:	4620      	mov	r0, r4
 8010b5e:	b006      	add	sp, #24
 8010b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b64:	4b05      	ldr	r3, [pc, #20]	; (8010b7c <generate_type_name+0x6c>)
 8010b66:	4901      	ldr	r1, [pc, #4]	; (8010b6c <generate_type_name+0x5c>)
 8010b68:	4618      	mov	r0, r3
 8010b6a:	e7e9      	b.n	8010b40 <generate_type_name+0x30>
 8010b6c:	0801ee98 	.word	0x0801ee98
 8010b70:	0801eeac 	.word	0x0801eeac
 8010b74:	0801eeb0 	.word	0x0801eeb0
 8010b78:	0801ee9c 	.word	0x0801ee9c
 8010b7c:	0801f400 	.word	0x0801f400

08010b80 <generate_topic_name>:
 8010b80:	b510      	push	{r4, lr}
 8010b82:	b082      	sub	sp, #8
 8010b84:	4b07      	ldr	r3, [pc, #28]	; (8010ba4 <generate_topic_name+0x24>)
 8010b86:	9000      	str	r0, [sp, #0]
 8010b88:	4614      	mov	r4, r2
 8010b8a:	4608      	mov	r0, r1
 8010b8c:	4611      	mov	r1, r2
 8010b8e:	4a06      	ldr	r2, [pc, #24]	; (8010ba8 <generate_topic_name+0x28>)
 8010b90:	f009 f996 	bl	8019ec0 <sniprintf>
 8010b94:	2800      	cmp	r0, #0
 8010b96:	da02      	bge.n	8010b9e <generate_topic_name+0x1e>
 8010b98:	4284      	cmp	r4, r0
 8010b9a:	bfd8      	it	le
 8010b9c:	2000      	movle	r0, #0
 8010b9e:	b002      	add	sp, #8
 8010ba0:	bd10      	pop	{r4, pc}
 8010ba2:	bf00      	nop
 8010ba4:	0801eebc 	.word	0x0801eebc
 8010ba8:	0801eeb4 	.word	0x0801eeb4

08010bac <is_uxrce_rmw_identifier_valid>:
 8010bac:	b510      	push	{r4, lr}
 8010bae:	4604      	mov	r4, r0
 8010bb0:	b140      	cbz	r0, 8010bc4 <is_uxrce_rmw_identifier_valid+0x18>
 8010bb2:	f007 f98d 	bl	8017ed0 <rmw_get_implementation_identifier>
 8010bb6:	4601      	mov	r1, r0
 8010bb8:	4620      	mov	r0, r4
 8010bba:	f7ef fb09 	bl	80001d0 <strcmp>
 8010bbe:	fab0 f080 	clz	r0, r0
 8010bc2:	0940      	lsrs	r0, r0, #5
 8010bc4:	bd10      	pop	{r4, pc}
 8010bc6:	bf00      	nop

08010bc8 <get_message_typesupport_handle>:
 8010bc8:	6883      	ldr	r3, [r0, #8]
 8010bca:	4718      	bx	r3

08010bcc <get_message_typesupport_handle_function>:
 8010bcc:	b510      	push	{r4, lr}
 8010bce:	4604      	mov	r4, r0
 8010bd0:	6800      	ldr	r0, [r0, #0]
 8010bd2:	f7ef fafd 	bl	80001d0 <strcmp>
 8010bd6:	2800      	cmp	r0, #0
 8010bd8:	bf0c      	ite	eq
 8010bda:	4620      	moveq	r0, r4
 8010bdc:	2000      	movne	r0, #0
 8010bde:	bd10      	pop	{r4, pc}

08010be0 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>:
 8010be0:	f000 b8f6 	b.w	8010dd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>

08010be4 <get_serialized_size_sensor_msgs__msg__NavSatFix>:
 8010be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010be6:	4604      	mov	r4, r0
 8010be8:	b358      	cbz	r0, 8010c42 <get_serialized_size_sensor_msgs__msg__NavSatFix+0x5e>
 8010bea:	460e      	mov	r6, r1
 8010bec:	f000 f9a2 	bl	8010f34 <get_serialized_size_std_msgs__msg__Header>
 8010bf0:	1837      	adds	r7, r6, r0
 8010bf2:	4639      	mov	r1, r7
 8010bf4:	f104 0014 	add.w	r0, r4, #20
 8010bf8:	f000 f8ee 	bl	8010dd8 <get_serialized_size_sensor_msgs__msg__NavSatStatus>
 8010bfc:	183c      	adds	r4, r7, r0
 8010bfe:	4620      	mov	r0, r4
 8010c00:	2108      	movs	r1, #8
 8010c02:	f001 fa75 	bl	80120f0 <ucdr_alignment>
 8010c06:	3008      	adds	r0, #8
 8010c08:	4404      	add	r4, r0
 8010c0a:	4620      	mov	r0, r4
 8010c0c:	2108      	movs	r1, #8
 8010c0e:	f001 fa6f 	bl	80120f0 <ucdr_alignment>
 8010c12:	f100 0508 	add.w	r5, r0, #8
 8010c16:	4425      	add	r5, r4
 8010c18:	4628      	mov	r0, r5
 8010c1a:	2108      	movs	r1, #8
 8010c1c:	f001 fa68 	bl	80120f0 <ucdr_alignment>
 8010c20:	3008      	adds	r0, #8
 8010c22:	4405      	add	r5, r0
 8010c24:	4628      	mov	r0, r5
 8010c26:	2108      	movs	r1, #8
 8010c28:	f001 fa62 	bl	80120f0 <ucdr_alignment>
 8010c2c:	3048      	adds	r0, #72	; 0x48
 8010c2e:	4405      	add	r5, r0
 8010c30:	4628      	mov	r0, r5
 8010c32:	2101      	movs	r1, #1
 8010c34:	f001 fa5c 	bl	80120f0 <ucdr_alignment>
 8010c38:	f1c6 0601 	rsb	r6, r6, #1
 8010c3c:	4430      	add	r0, r6
 8010c3e:	4428      	add	r0, r5
 8010c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c42:	4b05      	ldr	r3, [pc, #20]	; (8010c58 <get_serialized_size_sensor_msgs__msg__NavSatFix+0x74>)
 8010c44:	4805      	ldr	r0, [pc, #20]	; (8010c5c <get_serialized_size_sensor_msgs__msg__NavSatFix+0x78>)
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	221b      	movs	r2, #27
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	2101      	movs	r1, #1
 8010c4e:	f008 fd0d 	bl	801966c <fwrite>
 8010c52:	4620      	mov	r0, r4
 8010c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c56:	bf00      	nop
 8010c58:	20000190 	.word	0x20000190
 8010c5c:	0801eec0 	.word	0x0801eec0

08010c60 <_NavSatFix__get_serialized_size>:
 8010c60:	2100      	movs	r1, #0
 8010c62:	f7ff bfbf 	b.w	8010be4 <get_serialized_size_sensor_msgs__msg__NavSatFix>
 8010c66:	bf00      	nop

08010c68 <_NavSatFix__cdr_deserialize>:
 8010c68:	b538      	push	{r3, r4, r5, lr}
 8010c6a:	460c      	mov	r4, r1
 8010c6c:	b359      	cbz	r1, 8010cc6 <_NavSatFix__cdr_deserialize+0x5e>
 8010c6e:	4605      	mov	r5, r0
 8010c70:	f000 fa12 	bl	8011098 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010c74:	6843      	ldr	r3, [r0, #4]
 8010c76:	4621      	mov	r1, r4
 8010c78:	68db      	ldr	r3, [r3, #12]
 8010c7a:	4628      	mov	r0, r5
 8010c7c:	4798      	blx	r3
 8010c7e:	f000 f943 	bl	8010f08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>
 8010c82:	6843      	ldr	r3, [r0, #4]
 8010c84:	f104 0114 	add.w	r1, r4, #20
 8010c88:	68db      	ldr	r3, [r3, #12]
 8010c8a:	4628      	mov	r0, r5
 8010c8c:	4798      	blx	r3
 8010c8e:	f104 0118 	add.w	r1, r4, #24
 8010c92:	4628      	mov	r0, r5
 8010c94:	f001 f95a 	bl	8011f4c <ucdr_deserialize_double>
 8010c98:	f104 0120 	add.w	r1, r4, #32
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	f001 f955 	bl	8011f4c <ucdr_deserialize_double>
 8010ca2:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8010ca6:	4628      	mov	r0, r5
 8010ca8:	f001 f950 	bl	8011f4c <ucdr_deserialize_double>
 8010cac:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8010cb0:	4628      	mov	r0, r5
 8010cb2:	2209      	movs	r2, #9
 8010cb4:	f000 fda4 	bl	8011800 <ucdr_deserialize_array_double>
 8010cb8:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cc2:	f000 be37 	b.w	8011934 <ucdr_deserialize_uint8_t>
 8010cc6:	4b05      	ldr	r3, [pc, #20]	; (8010cdc <_NavSatFix__cdr_deserialize+0x74>)
 8010cc8:	4805      	ldr	r0, [pc, #20]	; (8010ce0 <_NavSatFix__cdr_deserialize+0x78>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	221b      	movs	r2, #27
 8010cce:	68db      	ldr	r3, [r3, #12]
 8010cd0:	2101      	movs	r1, #1
 8010cd2:	f008 fccb 	bl	801966c <fwrite>
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	bd38      	pop	{r3, r4, r5, pc}
 8010cda:	bf00      	nop
 8010cdc:	20000190 	.word	0x20000190
 8010ce0:	0801eec0 	.word	0x0801eec0

08010ce4 <_NavSatFix__cdr_serialize>:
 8010ce4:	b538      	push	{r3, r4, r5, lr}
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	b358      	cbz	r0, 8010d42 <_NavSatFix__cdr_serialize+0x5e>
 8010cea:	460d      	mov	r5, r1
 8010cec:	f000 f9d4 	bl	8011098 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010cf0:	6843      	ldr	r3, [r0, #4]
 8010cf2:	4629      	mov	r1, r5
 8010cf4:	689b      	ldr	r3, [r3, #8]
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	4798      	blx	r3
 8010cfa:	f000 f905 	bl	8010f08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>
 8010cfe:	6843      	ldr	r3, [r0, #4]
 8010d00:	4629      	mov	r1, r5
 8010d02:	689b      	ldr	r3, [r3, #8]
 8010d04:	f104 0014 	add.w	r0, r4, #20
 8010d08:	4798      	blx	r3
 8010d0a:	ed94 0b06 	vldr	d0, [r4, #24]
 8010d0e:	4628      	mov	r0, r5
 8010d10:	f001 f888 	bl	8011e24 <ucdr_serialize_double>
 8010d14:	ed94 0b08 	vldr	d0, [r4, #32]
 8010d18:	4628      	mov	r0, r5
 8010d1a:	f001 f883 	bl	8011e24 <ucdr_serialize_double>
 8010d1e:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 8010d22:	4628      	mov	r0, r5
 8010d24:	f001 f87e 	bl	8011e24 <ucdr_serialize_double>
 8010d28:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8010d2c:	4628      	mov	r0, r5
 8010d2e:	2209      	movs	r2, #9
 8010d30:	f000 fd12 	bl	8011758 <ucdr_serialize_array_double>
 8010d34:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8010d38:	4628      	mov	r0, r5
 8010d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d3e:	f000 bde3 	b.w	8011908 <ucdr_serialize_uint8_t>
 8010d42:	4b05      	ldr	r3, [pc, #20]	; (8010d58 <_NavSatFix__cdr_serialize+0x74>)
 8010d44:	4805      	ldr	r0, [pc, #20]	; (8010d5c <_NavSatFix__cdr_serialize+0x78>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	221b      	movs	r2, #27
 8010d4a:	68db      	ldr	r3, [r3, #12]
 8010d4c:	2101      	movs	r1, #1
 8010d4e:	f008 fc8d 	bl	801966c <fwrite>
 8010d52:	4620      	mov	r0, r4
 8010d54:	bd38      	pop	{r3, r4, r5, pc}
 8010d56:	bf00      	nop
 8010d58:	20000190 	.word	0x20000190
 8010d5c:	0801eec0 	.word	0x0801eec0

08010d60 <max_serialized_size_sensor_msgs__msg__NavSatFix>:
 8010d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d62:	2701      	movs	r7, #1
 8010d64:	7007      	strb	r7, [r0, #0]
 8010d66:	460c      	mov	r4, r1
 8010d68:	4605      	mov	r5, r0
 8010d6a:	f000 f98b 	bl	8011084 <max_serialized_size_std_msgs__msg__Header>
 8010d6e:	1826      	adds	r6, r4, r0
 8010d70:	4631      	mov	r1, r6
 8010d72:	4628      	mov	r0, r5
 8010d74:	f000 f8b6 	bl	8010ee4 <max_serialized_size_sensor_msgs__msg__NavSatStatus>
 8010d78:	1835      	adds	r5, r6, r0
 8010d7a:	4628      	mov	r0, r5
 8010d7c:	2108      	movs	r1, #8
 8010d7e:	f001 f9b7 	bl	80120f0 <ucdr_alignment>
 8010d82:	3008      	adds	r0, #8
 8010d84:	4405      	add	r5, r0
 8010d86:	4628      	mov	r0, r5
 8010d88:	2108      	movs	r1, #8
 8010d8a:	f001 f9b1 	bl	80120f0 <ucdr_alignment>
 8010d8e:	3008      	adds	r0, #8
 8010d90:	1946      	adds	r6, r0, r5
 8010d92:	4630      	mov	r0, r6
 8010d94:	2108      	movs	r1, #8
 8010d96:	f001 f9ab 	bl	80120f0 <ucdr_alignment>
 8010d9a:	f100 0508 	add.w	r5, r0, #8
 8010d9e:	4435      	add	r5, r6
 8010da0:	4628      	mov	r0, r5
 8010da2:	2108      	movs	r1, #8
 8010da4:	f001 f9a4 	bl	80120f0 <ucdr_alignment>
 8010da8:	3048      	adds	r0, #72	; 0x48
 8010daa:	4405      	add	r5, r0
 8010dac:	4639      	mov	r1, r7
 8010dae:	4628      	mov	r0, r5
 8010db0:	f001 f99e 	bl	80120f0 <ucdr_alignment>
 8010db4:	1b3c      	subs	r4, r7, r4
 8010db6:	4420      	add	r0, r4
 8010db8:	4428      	add	r0, r5
 8010dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010dbc <_NavSatFix__max_serialized_size>:
 8010dbc:	b500      	push	{lr}
 8010dbe:	b083      	sub	sp, #12
 8010dc0:	2100      	movs	r1, #0
 8010dc2:	f10d 0007 	add.w	r0, sp, #7
 8010dc6:	f7ff ffcb 	bl	8010d60 <max_serialized_size_sensor_msgs__msg__NavSatFix>
 8010dca:	b003      	add	sp, #12
 8010dcc:	f85d fb04 	ldr.w	pc, [sp], #4

08010dd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>:
 8010dd0:	4800      	ldr	r0, [pc, #0]	; (8010dd4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix+0x4>)
 8010dd2:	4770      	bx	lr
 8010dd4:	20000048 	.word	0x20000048

08010dd8 <get_serialized_size_sensor_msgs__msg__NavSatStatus>:
 8010dd8:	b538      	push	{r3, r4, r5, lr}
 8010dda:	b178      	cbz	r0, 8010dfc <get_serialized_size_sensor_msgs__msg__NavSatStatus+0x24>
 8010ddc:	460d      	mov	r5, r1
 8010dde:	4628      	mov	r0, r5
 8010de0:	2101      	movs	r1, #1
 8010de2:	f001 f985 	bl	80120f0 <ucdr_alignment>
 8010de6:	1c6c      	adds	r4, r5, #1
 8010de8:	4404      	add	r4, r0
 8010dea:	4620      	mov	r0, r4
 8010dec:	2102      	movs	r1, #2
 8010dee:	f001 f97f 	bl	80120f0 <ucdr_alignment>
 8010df2:	f1c5 0502 	rsb	r5, r5, #2
 8010df6:	4428      	add	r0, r5
 8010df8:	4420      	add	r0, r4
 8010dfa:	bd38      	pop	{r3, r4, r5, pc}
 8010dfc:	4b05      	ldr	r3, [pc, #20]	; (8010e14 <get_serialized_size_sensor_msgs__msg__NavSatStatus+0x3c>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	4604      	mov	r4, r0
 8010e02:	68db      	ldr	r3, [r3, #12]
 8010e04:	4804      	ldr	r0, [pc, #16]	; (8010e18 <get_serialized_size_sensor_msgs__msg__NavSatStatus+0x40>)
 8010e06:	221b      	movs	r2, #27
 8010e08:	2101      	movs	r1, #1
 8010e0a:	f008 fc2f 	bl	801966c <fwrite>
 8010e0e:	4620      	mov	r0, r4
 8010e10:	bd38      	pop	{r3, r4, r5, pc}
 8010e12:	bf00      	nop
 8010e14:	20000190 	.word	0x20000190
 8010e18:	0801eec0 	.word	0x0801eec0

08010e1c <_NavSatStatus__cdr_serialize>:
 8010e1c:	b538      	push	{r3, r4, r5, lr}
 8010e1e:	4604      	mov	r4, r0
 8010e20:	b158      	cbz	r0, 8010e3a <_NavSatStatus__cdr_serialize+0x1e>
 8010e22:	460d      	mov	r5, r1
 8010e24:	f990 1000 	ldrsb.w	r1, [r0]
 8010e28:	4628      	mov	r0, r5
 8010e2a:	f000 ff47 	bl	8011cbc <ucdr_serialize_int8_t>
 8010e2e:	8861      	ldrh	r1, [r4, #2]
 8010e30:	4628      	mov	r0, r5
 8010e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e36:	f000 bd93 	b.w	8011960 <ucdr_serialize_uint16_t>
 8010e3a:	4b05      	ldr	r3, [pc, #20]	; (8010e50 <_NavSatStatus__cdr_serialize+0x34>)
 8010e3c:	4805      	ldr	r0, [pc, #20]	; (8010e54 <_NavSatStatus__cdr_serialize+0x38>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	221b      	movs	r2, #27
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	2101      	movs	r1, #1
 8010e46:	f008 fc11 	bl	801966c <fwrite>
 8010e4a:	4620      	mov	r0, r4
 8010e4c:	bd38      	pop	{r3, r4, r5, pc}
 8010e4e:	bf00      	nop
 8010e50:	20000190 	.word	0x20000190
 8010e54:	0801eec0 	.word	0x0801eec0

08010e58 <_NavSatStatus__cdr_deserialize>:
 8010e58:	b538      	push	{r3, r4, r5, lr}
 8010e5a:	460c      	mov	r4, r1
 8010e5c:	b141      	cbz	r1, 8010e70 <_NavSatStatus__cdr_deserialize+0x18>
 8010e5e:	4605      	mov	r5, r0
 8010e60:	f000 ff42 	bl	8011ce8 <ucdr_deserialize_int8_t>
 8010e64:	1ca1      	adds	r1, r4, #2
 8010e66:	4628      	mov	r0, r5
 8010e68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e6c:	f000 bdc8 	b.w	8011a00 <ucdr_deserialize_uint16_t>
 8010e70:	4b04      	ldr	r3, [pc, #16]	; (8010e84 <_NavSatStatus__cdr_deserialize+0x2c>)
 8010e72:	4805      	ldr	r0, [pc, #20]	; (8010e88 <_NavSatStatus__cdr_deserialize+0x30>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	221b      	movs	r2, #27
 8010e78:	68db      	ldr	r3, [r3, #12]
 8010e7a:	2101      	movs	r1, #1
 8010e7c:	f008 fbf6 	bl	801966c <fwrite>
 8010e80:	4620      	mov	r0, r4
 8010e82:	bd38      	pop	{r3, r4, r5, pc}
 8010e84:	20000190 	.word	0x20000190
 8010e88:	0801eec0 	.word	0x0801eec0

08010e8c <_NavSatStatus__max_serialized_size>:
 8010e8c:	b510      	push	{r4, lr}
 8010e8e:	2101      	movs	r1, #1
 8010e90:	2000      	movs	r0, #0
 8010e92:	f001 f92d 	bl	80120f0 <ucdr_alignment>
 8010e96:	1c44      	adds	r4, r0, #1
 8010e98:	4620      	mov	r0, r4
 8010e9a:	2102      	movs	r1, #2
 8010e9c:	f001 f928 	bl	80120f0 <ucdr_alignment>
 8010ea0:	3002      	adds	r0, #2
 8010ea2:	4420      	add	r0, r4
 8010ea4:	bd10      	pop	{r4, pc}
 8010ea6:	bf00      	nop

08010ea8 <_NavSatStatus__get_serialized_size>:
 8010ea8:	b510      	push	{r4, lr}
 8010eaa:	b158      	cbz	r0, 8010ec4 <_NavSatStatus__get_serialized_size+0x1c>
 8010eac:	2101      	movs	r1, #1
 8010eae:	2000      	movs	r0, #0
 8010eb0:	f001 f91e 	bl	80120f0 <ucdr_alignment>
 8010eb4:	1c44      	adds	r4, r0, #1
 8010eb6:	4620      	mov	r0, r4
 8010eb8:	2102      	movs	r1, #2
 8010eba:	f001 f919 	bl	80120f0 <ucdr_alignment>
 8010ebe:	3002      	adds	r0, #2
 8010ec0:	4420      	add	r0, r4
 8010ec2:	bd10      	pop	{r4, pc}
 8010ec4:	4b05      	ldr	r3, [pc, #20]	; (8010edc <_NavSatStatus__get_serialized_size+0x34>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	4604      	mov	r4, r0
 8010eca:	68db      	ldr	r3, [r3, #12]
 8010ecc:	4804      	ldr	r0, [pc, #16]	; (8010ee0 <_NavSatStatus__get_serialized_size+0x38>)
 8010ece:	221b      	movs	r2, #27
 8010ed0:	2101      	movs	r1, #1
 8010ed2:	f008 fbcb 	bl	801966c <fwrite>
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	bd10      	pop	{r4, pc}
 8010eda:	bf00      	nop
 8010edc:	20000190 	.word	0x20000190
 8010ee0:	0801eec0 	.word	0x0801eec0

08010ee4 <max_serialized_size_sensor_msgs__msg__NavSatStatus>:
 8010ee4:	b538      	push	{r3, r4, r5, lr}
 8010ee6:	460c      	mov	r4, r1
 8010ee8:	2101      	movs	r1, #1
 8010eea:	7001      	strb	r1, [r0, #0]
 8010eec:	4620      	mov	r0, r4
 8010eee:	f001 f8ff 	bl	80120f0 <ucdr_alignment>
 8010ef2:	1c65      	adds	r5, r4, #1
 8010ef4:	4405      	add	r5, r0
 8010ef6:	4628      	mov	r0, r5
 8010ef8:	2102      	movs	r1, #2
 8010efa:	f001 f8f9 	bl	80120f0 <ucdr_alignment>
 8010efe:	f1c4 0402 	rsb	r4, r4, #2
 8010f02:	4420      	add	r0, r4
 8010f04:	4428      	add	r0, r5
 8010f06:	bd38      	pop	{r3, r4, r5, pc}

08010f08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>:
 8010f08:	4800      	ldr	r0, [pc, #0]	; (8010f0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus+0x4>)
 8010f0a:	4770      	bx	lr
 8010f0c:	20000070 	.word	0x20000070

08010f10 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>:
 8010f10:	f000 b978 	b.w	8011204 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>

08010f14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt32>:
 8010f14:	f000 b9de 	b.w	80112d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt32>

08010f18 <_Header__max_serialized_size>:
 8010f18:	b500      	push	{lr}
 8010f1a:	b083      	sub	sp, #12
 8010f1c:	2301      	movs	r3, #1
 8010f1e:	2100      	movs	r1, #0
 8010f20:	f10d 0007 	add.w	r0, sp, #7
 8010f24:	f88d 3007 	strb.w	r3, [sp, #7]
 8010f28:	f000 fa5c 	bl	80113e4 <max_serialized_size_builtin_interfaces__msg__Time>
 8010f2c:	b003      	add	sp, #12
 8010f2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f32:	bf00      	nop

08010f34 <get_serialized_size_std_msgs__msg__Header>:
 8010f34:	b570      	push	{r4, r5, r6, lr}
 8010f36:	4605      	mov	r5, r0
 8010f38:	b170      	cbz	r0, 8010f58 <get_serialized_size_std_msgs__msg__Header+0x24>
 8010f3a:	460c      	mov	r4, r1
 8010f3c:	f000 f9ce 	bl	80112dc <get_serialized_size_builtin_interfaces__msg__Time>
 8010f40:	1826      	adds	r6, r4, r0
 8010f42:	4630      	mov	r0, r6
 8010f44:	2104      	movs	r1, #4
 8010f46:	f001 f8d3 	bl	80120f0 <ucdr_alignment>
 8010f4a:	68e9      	ldr	r1, [r5, #12]
 8010f4c:	f1c4 0405 	rsb	r4, r4, #5
 8010f50:	440c      	add	r4, r1
 8010f52:	4404      	add	r4, r0
 8010f54:	19a0      	adds	r0, r4, r6
 8010f56:	bd70      	pop	{r4, r5, r6, pc}
 8010f58:	4b04      	ldr	r3, [pc, #16]	; (8010f6c <get_serialized_size_std_msgs__msg__Header+0x38>)
 8010f5a:	4805      	ldr	r0, [pc, #20]	; (8010f70 <get_serialized_size_std_msgs__msg__Header+0x3c>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	221b      	movs	r2, #27
 8010f60:	68db      	ldr	r3, [r3, #12]
 8010f62:	2101      	movs	r1, #1
 8010f64:	f008 fb82 	bl	801966c <fwrite>
 8010f68:	4628      	mov	r0, r5
 8010f6a:	bd70      	pop	{r4, r5, r6, pc}
 8010f6c:	20000190 	.word	0x20000190
 8010f70:	0801eec0 	.word	0x0801eec0

08010f74 <_Header__cdr_deserialize>:
 8010f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f76:	460c      	mov	r4, r1
 8010f78:	b083      	sub	sp, #12
 8010f7a:	b1e9      	cbz	r1, 8010fb8 <_Header__cdr_deserialize+0x44>
 8010f7c:	4607      	mov	r7, r0
 8010f7e:	f000 fa45 	bl	801140c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010f82:	6843      	ldr	r3, [r0, #4]
 8010f84:	4621      	mov	r1, r4
 8010f86:	68db      	ldr	r3, [r3, #12]
 8010f88:	4638      	mov	r0, r7
 8010f8a:	4798      	blx	r3
 8010f8c:	6926      	ldr	r6, [r4, #16]
 8010f8e:	68a1      	ldr	r1, [r4, #8]
 8010f90:	4632      	mov	r2, r6
 8010f92:	ab01      	add	r3, sp, #4
 8010f94:	4638      	mov	r0, r7
 8010f96:	f001 f92d 	bl	80121f4 <ucdr_deserialize_sequence_char>
 8010f9a:	4605      	mov	r5, r0
 8010f9c:	b130      	cbz	r0, 8010fac <_Header__cdr_deserialize+0x38>
 8010f9e:	9b01      	ldr	r3, [sp, #4]
 8010fa0:	b103      	cbz	r3, 8010fa4 <_Header__cdr_deserialize+0x30>
 8010fa2:	3b01      	subs	r3, #1
 8010fa4:	4628      	mov	r0, r5
 8010fa6:	60e3      	str	r3, [r4, #12]
 8010fa8:	b003      	add	sp, #12
 8010faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fac:	9901      	ldr	r1, [sp, #4]
 8010fae:	42b1      	cmp	r1, r6
 8010fb0:	d80e      	bhi.n	8010fd0 <_Header__cdr_deserialize+0x5c>
 8010fb2:	4628      	mov	r0, r5
 8010fb4:	b003      	add	sp, #12
 8010fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fb8:	4b09      	ldr	r3, [pc, #36]	; (8010fe0 <_Header__cdr_deserialize+0x6c>)
 8010fba:	480a      	ldr	r0, [pc, #40]	; (8010fe4 <_Header__cdr_deserialize+0x70>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	221b      	movs	r2, #27
 8010fc0:	68db      	ldr	r3, [r3, #12]
 8010fc2:	2101      	movs	r1, #1
 8010fc4:	f008 fb52 	bl	801966c <fwrite>
 8010fc8:	4625      	mov	r5, r4
 8010fca:	4628      	mov	r0, r5
 8010fcc:	b003      	add	sp, #12
 8010fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fd0:	75b8      	strb	r0, [r7, #22]
 8010fd2:	60e0      	str	r0, [r4, #12]
 8010fd4:	4638      	mov	r0, r7
 8010fd6:	f001 f8db 	bl	8012190 <ucdr_advance_buffer>
 8010fda:	4628      	mov	r0, r5
 8010fdc:	b003      	add	sp, #12
 8010fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fe0:	20000190 	.word	0x20000190
 8010fe4:	0801eec0 	.word	0x0801eec0

08010fe8 <_Header__cdr_serialize>:
 8010fe8:	b570      	push	{r4, r5, r6, lr}
 8010fea:	4604      	mov	r4, r0
 8010fec:	b1e8      	cbz	r0, 801102a <_Header__cdr_serialize+0x42>
 8010fee:	460e      	mov	r6, r1
 8010ff0:	f000 fa0c 	bl	801140c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010ff4:	6843      	ldr	r3, [r0, #4]
 8010ff6:	4631      	mov	r1, r6
 8010ff8:	689b      	ldr	r3, [r3, #8]
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	4798      	blx	r3
 8010ffe:	68a5      	ldr	r5, [r4, #8]
 8011000:	b155      	cbz	r5, 8011018 <_Header__cdr_serialize+0x30>
 8011002:	4628      	mov	r0, r5
 8011004:	f7ef f8ee 	bl	80001e4 <strlen>
 8011008:	4629      	mov	r1, r5
 801100a:	60e0      	str	r0, [r4, #12]
 801100c:	1c42      	adds	r2, r0, #1
 801100e:	4630      	mov	r0, r6
 8011010:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011014:	f001 b8dc 	b.w	80121d0 <ucdr_serialize_sequence_char>
 8011018:	4628      	mov	r0, r5
 801101a:	60e0      	str	r0, [r4, #12]
 801101c:	462a      	mov	r2, r5
 801101e:	4629      	mov	r1, r5
 8011020:	4630      	mov	r0, r6
 8011022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011026:	f001 b8d3 	b.w	80121d0 <ucdr_serialize_sequence_char>
 801102a:	4b05      	ldr	r3, [pc, #20]	; (8011040 <_Header__cdr_serialize+0x58>)
 801102c:	4805      	ldr	r0, [pc, #20]	; (8011044 <_Header__cdr_serialize+0x5c>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	221b      	movs	r2, #27
 8011032:	68db      	ldr	r3, [r3, #12]
 8011034:	2101      	movs	r1, #1
 8011036:	f008 fb19 	bl	801966c <fwrite>
 801103a:	4620      	mov	r0, r4
 801103c:	bd70      	pop	{r4, r5, r6, pc}
 801103e:	bf00      	nop
 8011040:	20000190 	.word	0x20000190
 8011044:	0801eec0 	.word	0x0801eec0

08011048 <_Header__get_serialized_size>:
 8011048:	b538      	push	{r3, r4, r5, lr}
 801104a:	4604      	mov	r4, r0
 801104c:	b158      	cbz	r0, 8011066 <_Header__get_serialized_size+0x1e>
 801104e:	2100      	movs	r1, #0
 8011050:	f000 f944 	bl	80112dc <get_serialized_size_builtin_interfaces__msg__Time>
 8011054:	2104      	movs	r1, #4
 8011056:	4605      	mov	r5, r0
 8011058:	f001 f84a 	bl	80120f0 <ucdr_alignment>
 801105c:	68e2      	ldr	r2, [r4, #12]
 801105e:	3205      	adds	r2, #5
 8011060:	1953      	adds	r3, r2, r5
 8011062:	4418      	add	r0, r3
 8011064:	bd38      	pop	{r3, r4, r5, pc}
 8011066:	4b05      	ldr	r3, [pc, #20]	; (801107c <_Header__get_serialized_size+0x34>)
 8011068:	4805      	ldr	r0, [pc, #20]	; (8011080 <_Header__get_serialized_size+0x38>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	221b      	movs	r2, #27
 801106e:	68db      	ldr	r3, [r3, #12]
 8011070:	2101      	movs	r1, #1
 8011072:	f008 fafb 	bl	801966c <fwrite>
 8011076:	4620      	mov	r0, r4
 8011078:	bd38      	pop	{r3, r4, r5, pc}
 801107a:	bf00      	nop
 801107c:	20000190 	.word	0x20000190
 8011080:	0801eec0 	.word	0x0801eec0

08011084 <max_serialized_size_std_msgs__msg__Header>:
 8011084:	b510      	push	{r4, lr}
 8011086:	2301      	movs	r3, #1
 8011088:	4604      	mov	r4, r0
 801108a:	7003      	strb	r3, [r0, #0]
 801108c:	f000 f9aa 	bl	80113e4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011090:	2300      	movs	r3, #0
 8011092:	7023      	strb	r3, [r4, #0]
 8011094:	bd10      	pop	{r4, pc}
 8011096:	bf00      	nop

08011098 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011098:	4800      	ldr	r0, [pc, #0]	; (801109c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 801109a:	4770      	bx	lr
 801109c:	20000098 	.word	0x20000098

080110a0 <_UInt16MultiArray__max_serialized_size>:
 80110a0:	b500      	push	{lr}
 80110a2:	b083      	sub	sp, #12
 80110a4:	2301      	movs	r3, #1
 80110a6:	2100      	movs	r1, #0
 80110a8:	f10d 0007 	add.w	r0, sp, #7
 80110ac:	f88d 3007 	strb.w	r3, [sp, #7]
 80110b0:	f007 fad4 	bl	801865c <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 80110b4:	b003      	add	sp, #12
 80110b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80110ba:	bf00      	nop

080110bc <get_serialized_size_std_msgs__msg__UInt16MultiArray>:
 80110bc:	b570      	push	{r4, r5, r6, lr}
 80110be:	4604      	mov	r4, r0
 80110c0:	b198      	cbz	r0, 80110ea <get_serialized_size_std_msgs__msg__UInt16MultiArray+0x2e>
 80110c2:	460e      	mov	r6, r1
 80110c4:	f007 fa0c 	bl	80184e0 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 80110c8:	1835      	adds	r5, r6, r0
 80110ca:	4628      	mov	r0, r5
 80110cc:	2104      	movs	r1, #4
 80110ce:	6964      	ldr	r4, [r4, #20]
 80110d0:	f001 f80e 	bl	80120f0 <ucdr_alignment>
 80110d4:	3004      	adds	r0, #4
 80110d6:	4405      	add	r5, r0
 80110d8:	4628      	mov	r0, r5
 80110da:	2102      	movs	r1, #2
 80110dc:	f001 f808 	bl	80120f0 <ucdr_alignment>
 80110e0:	ebc6 0644 	rsb	r6, r6, r4, lsl #1
 80110e4:	4430      	add	r0, r6
 80110e6:	4428      	add	r0, r5
 80110e8:	bd70      	pop	{r4, r5, r6, pc}
 80110ea:	4b05      	ldr	r3, [pc, #20]	; (8011100 <get_serialized_size_std_msgs__msg__UInt16MultiArray+0x44>)
 80110ec:	4805      	ldr	r0, [pc, #20]	; (8011104 <get_serialized_size_std_msgs__msg__UInt16MultiArray+0x48>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	221b      	movs	r2, #27
 80110f2:	68db      	ldr	r3, [r3, #12]
 80110f4:	2101      	movs	r1, #1
 80110f6:	f008 fab9 	bl	801966c <fwrite>
 80110fa:	4620      	mov	r0, r4
 80110fc:	bd70      	pop	{r4, r5, r6, pc}
 80110fe:	bf00      	nop
 8011100:	20000190 	.word	0x20000190
 8011104:	0801eec0 	.word	0x0801eec0

08011108 <_UInt16MultiArray__cdr_deserialize>:
 8011108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801110a:	460c      	mov	r4, r1
 801110c:	b083      	sub	sp, #12
 801110e:	b1d9      	cbz	r1, 8011148 <_UInt16MultiArray__cdr_deserialize+0x40>
 8011110:	4607      	mov	r7, r0
 8011112:	f007 faad 	bl	8018670 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8011116:	6843      	ldr	r3, [r0, #4]
 8011118:	4621      	mov	r1, r4
 801111a:	68db      	ldr	r3, [r3, #12]
 801111c:	4638      	mov	r0, r7
 801111e:	4798      	blx	r3
 8011120:	69a6      	ldr	r6, [r4, #24]
 8011122:	6921      	ldr	r1, [r4, #16]
 8011124:	4632      	mov	r2, r6
 8011126:	ab01      	add	r3, sp, #4
 8011128:	4638      	mov	r0, r7
 801112a:	f001 f8a1 	bl	8012270 <ucdr_deserialize_sequence_uint16_t>
 801112e:	4605      	mov	r5, r0
 8011130:	b928      	cbnz	r0, 801113e <_UInt16MultiArray__cdr_deserialize+0x36>
 8011132:	9901      	ldr	r1, [sp, #4]
 8011134:	42b1      	cmp	r1, r6
 8011136:	d813      	bhi.n	8011160 <_UInt16MultiArray__cdr_deserialize+0x58>
 8011138:	4628      	mov	r0, r5
 801113a:	b003      	add	sp, #12
 801113c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801113e:	9b01      	ldr	r3, [sp, #4]
 8011140:	6163      	str	r3, [r4, #20]
 8011142:	4628      	mov	r0, r5
 8011144:	b003      	add	sp, #12
 8011146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011148:	4b0a      	ldr	r3, [pc, #40]	; (8011174 <_UInt16MultiArray__cdr_deserialize+0x6c>)
 801114a:	480b      	ldr	r0, [pc, #44]	; (8011178 <_UInt16MultiArray__cdr_deserialize+0x70>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	221b      	movs	r2, #27
 8011150:	68db      	ldr	r3, [r3, #12]
 8011152:	2101      	movs	r1, #1
 8011154:	f008 fa8a 	bl	801966c <fwrite>
 8011158:	4625      	mov	r5, r4
 801115a:	4628      	mov	r0, r5
 801115c:	b003      	add	sp, #12
 801115e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011160:	75b8      	strb	r0, [r7, #22]
 8011162:	0049      	lsls	r1, r1, #1
 8011164:	6160      	str	r0, [r4, #20]
 8011166:	4638      	mov	r0, r7
 8011168:	f001 f812 	bl	8012190 <ucdr_advance_buffer>
 801116c:	4628      	mov	r0, r5
 801116e:	b003      	add	sp, #12
 8011170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011172:	bf00      	nop
 8011174:	20000190 	.word	0x20000190
 8011178:	0801eec0 	.word	0x0801eec0

0801117c <_UInt16MultiArray__cdr_serialize>:
 801117c:	b538      	push	{r3, r4, r5, lr}
 801117e:	4604      	mov	r4, r0
 8011180:	b170      	cbz	r0, 80111a0 <_UInt16MultiArray__cdr_serialize+0x24>
 8011182:	460d      	mov	r5, r1
 8011184:	f007 fa74 	bl	8018670 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8011188:	6843      	ldr	r3, [r0, #4]
 801118a:	4629      	mov	r1, r5
 801118c:	689b      	ldr	r3, [r3, #8]
 801118e:	4620      	mov	r0, r4
 8011190:	4798      	blx	r3
 8011192:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8011196:	4628      	mov	r0, r5
 8011198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801119c:	f001 b856 	b.w	801224c <ucdr_serialize_sequence_uint16_t>
 80111a0:	4b04      	ldr	r3, [pc, #16]	; (80111b4 <_UInt16MultiArray__cdr_serialize+0x38>)
 80111a2:	4805      	ldr	r0, [pc, #20]	; (80111b8 <_UInt16MultiArray__cdr_serialize+0x3c>)
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	221b      	movs	r2, #27
 80111a8:	68db      	ldr	r3, [r3, #12]
 80111aa:	2101      	movs	r1, #1
 80111ac:	f008 fa5e 	bl	801966c <fwrite>
 80111b0:	4620      	mov	r0, r4
 80111b2:	bd38      	pop	{r3, r4, r5, pc}
 80111b4:	20000190 	.word	0x20000190
 80111b8:	0801eec0 	.word	0x0801eec0

080111bc <_UInt16MultiArray__get_serialized_size>:
 80111bc:	b538      	push	{r3, r4, r5, lr}
 80111be:	4604      	mov	r4, r0
 80111c0:	b188      	cbz	r0, 80111e6 <_UInt16MultiArray__get_serialized_size+0x2a>
 80111c2:	2100      	movs	r1, #0
 80111c4:	f007 f98c 	bl	80184e0 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 80111c8:	2104      	movs	r1, #4
 80111ca:	6965      	ldr	r5, [r4, #20]
 80111cc:	4604      	mov	r4, r0
 80111ce:	f000 ff8f 	bl	80120f0 <ucdr_alignment>
 80111d2:	4420      	add	r0, r4
 80111d4:	1d04      	adds	r4, r0, #4
 80111d6:	4620      	mov	r0, r4
 80111d8:	2102      	movs	r1, #2
 80111da:	f000 ff89 	bl	80120f0 <ucdr_alignment>
 80111de:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 80111e2:	4420      	add	r0, r4
 80111e4:	bd38      	pop	{r3, r4, r5, pc}
 80111e6:	4b05      	ldr	r3, [pc, #20]	; (80111fc <_UInt16MultiArray__get_serialized_size+0x40>)
 80111e8:	4805      	ldr	r0, [pc, #20]	; (8011200 <_UInt16MultiArray__get_serialized_size+0x44>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	221b      	movs	r2, #27
 80111ee:	68db      	ldr	r3, [r3, #12]
 80111f0:	2101      	movs	r1, #1
 80111f2:	f008 fa3b 	bl	801966c <fwrite>
 80111f6:	4620      	mov	r0, r4
 80111f8:	bd38      	pop	{r3, r4, r5, pc}
 80111fa:	bf00      	nop
 80111fc:	20000190 	.word	0x20000190
 8011200:	0801eec0 	.word	0x0801eec0

08011204 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>:
 8011204:	4800      	ldr	r0, [pc, #0]	; (8011208 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0x4>)
 8011206:	4770      	bx	lr
 8011208:	200000c0 	.word	0x200000c0

0801120c <_UInt32__max_serialized_size>:
 801120c:	b508      	push	{r3, lr}
 801120e:	2104      	movs	r1, #4
 8011210:	2000      	movs	r0, #0
 8011212:	f000 ff6d 	bl	80120f0 <ucdr_alignment>
 8011216:	3004      	adds	r0, #4
 8011218:	bd08      	pop	{r3, pc}
 801121a:	bf00      	nop

0801121c <get_serialized_size_std_msgs__msg__UInt32>:
 801121c:	b510      	push	{r4, lr}
 801121e:	b128      	cbz	r0, 801122c <get_serialized_size_std_msgs__msg__UInt32+0x10>
 8011220:	4608      	mov	r0, r1
 8011222:	2104      	movs	r1, #4
 8011224:	f000 ff64 	bl	80120f0 <ucdr_alignment>
 8011228:	3004      	adds	r0, #4
 801122a:	bd10      	pop	{r4, pc}
 801122c:	4b05      	ldr	r3, [pc, #20]	; (8011244 <get_serialized_size_std_msgs__msg__UInt32+0x28>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	4604      	mov	r4, r0
 8011232:	68db      	ldr	r3, [r3, #12]
 8011234:	4804      	ldr	r0, [pc, #16]	; (8011248 <get_serialized_size_std_msgs__msg__UInt32+0x2c>)
 8011236:	221b      	movs	r2, #27
 8011238:	2101      	movs	r1, #1
 801123a:	f008 fa17 	bl	801966c <fwrite>
 801123e:	4620      	mov	r0, r4
 8011240:	bd10      	pop	{r4, pc}
 8011242:	bf00      	nop
 8011244:	20000190 	.word	0x20000190
 8011248:	0801eec0 	.word	0x0801eec0

0801124c <_UInt32__cdr_serialize>:
 801124c:	b510      	push	{r4, lr}
 801124e:	4604      	mov	r4, r0
 8011250:	b130      	cbz	r0, 8011260 <_UInt32__cdr_serialize+0x14>
 8011252:	460b      	mov	r3, r1
 8011254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011258:	6801      	ldr	r1, [r0, #0]
 801125a:	4618      	mov	r0, r3
 801125c:	f000 bc24 	b.w	8011aa8 <ucdr_serialize_uint32_t>
 8011260:	4b04      	ldr	r3, [pc, #16]	; (8011274 <_UInt32__cdr_serialize+0x28>)
 8011262:	4805      	ldr	r0, [pc, #20]	; (8011278 <_UInt32__cdr_serialize+0x2c>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	221b      	movs	r2, #27
 8011268:	68db      	ldr	r3, [r3, #12]
 801126a:	2101      	movs	r1, #1
 801126c:	f008 f9fe 	bl	801966c <fwrite>
 8011270:	4620      	mov	r0, r4
 8011272:	bd10      	pop	{r4, pc}
 8011274:	20000190 	.word	0x20000190
 8011278:	0801eec0 	.word	0x0801eec0

0801127c <_UInt32__cdr_deserialize>:
 801127c:	b109      	cbz	r1, 8011282 <_UInt32__cdr_deserialize+0x6>
 801127e:	f000 bc73 	b.w	8011b68 <ucdr_deserialize_uint32_t>
 8011282:	b510      	push	{r4, lr}
 8011284:	4b05      	ldr	r3, [pc, #20]	; (801129c <_UInt32__cdr_deserialize+0x20>)
 8011286:	4806      	ldr	r0, [pc, #24]	; (80112a0 <_UInt32__cdr_deserialize+0x24>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	460c      	mov	r4, r1
 801128c:	68db      	ldr	r3, [r3, #12]
 801128e:	221b      	movs	r2, #27
 8011290:	2101      	movs	r1, #1
 8011292:	f008 f9eb 	bl	801966c <fwrite>
 8011296:	4620      	mov	r0, r4
 8011298:	bd10      	pop	{r4, pc}
 801129a:	bf00      	nop
 801129c:	20000190 	.word	0x20000190
 80112a0:	0801eec0 	.word	0x0801eec0

080112a4 <_UInt32__get_serialized_size>:
 80112a4:	b510      	push	{r4, lr}
 80112a6:	b128      	cbz	r0, 80112b4 <_UInt32__get_serialized_size+0x10>
 80112a8:	2104      	movs	r1, #4
 80112aa:	2000      	movs	r0, #0
 80112ac:	f000 ff20 	bl	80120f0 <ucdr_alignment>
 80112b0:	3004      	adds	r0, #4
 80112b2:	bd10      	pop	{r4, pc}
 80112b4:	4b05      	ldr	r3, [pc, #20]	; (80112cc <_UInt32__get_serialized_size+0x28>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	4604      	mov	r4, r0
 80112ba:	68db      	ldr	r3, [r3, #12]
 80112bc:	4804      	ldr	r0, [pc, #16]	; (80112d0 <_UInt32__get_serialized_size+0x2c>)
 80112be:	221b      	movs	r2, #27
 80112c0:	2101      	movs	r1, #1
 80112c2:	f008 f9d3 	bl	801966c <fwrite>
 80112c6:	4620      	mov	r0, r4
 80112c8:	bd10      	pop	{r4, pc}
 80112ca:	bf00      	nop
 80112cc:	20000190 	.word	0x20000190
 80112d0:	0801eec0 	.word	0x0801eec0

080112d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt32>:
 80112d4:	4800      	ldr	r0, [pc, #0]	; (80112d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt32+0x4>)
 80112d6:	4770      	bx	lr
 80112d8:	200000e8 	.word	0x200000e8

080112dc <get_serialized_size_builtin_interfaces__msg__Time>:
 80112dc:	b538      	push	{r3, r4, r5, lr}
 80112de:	b178      	cbz	r0, 8011300 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 80112e0:	460d      	mov	r5, r1
 80112e2:	4628      	mov	r0, r5
 80112e4:	2104      	movs	r1, #4
 80112e6:	f000 ff03 	bl	80120f0 <ucdr_alignment>
 80112ea:	1d2c      	adds	r4, r5, #4
 80112ec:	4404      	add	r4, r0
 80112ee:	4620      	mov	r0, r4
 80112f0:	2104      	movs	r1, #4
 80112f2:	f000 fefd 	bl	80120f0 <ucdr_alignment>
 80112f6:	f1c5 0504 	rsb	r5, r5, #4
 80112fa:	4428      	add	r0, r5
 80112fc:	4420      	add	r0, r4
 80112fe:	bd38      	pop	{r3, r4, r5, pc}
 8011300:	4b05      	ldr	r3, [pc, #20]	; (8011318 <get_serialized_size_builtin_interfaces__msg__Time+0x3c>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	4604      	mov	r4, r0
 8011306:	68db      	ldr	r3, [r3, #12]
 8011308:	4804      	ldr	r0, [pc, #16]	; (801131c <get_serialized_size_builtin_interfaces__msg__Time+0x40>)
 801130a:	221b      	movs	r2, #27
 801130c:	2101      	movs	r1, #1
 801130e:	f008 f9ad 	bl	801966c <fwrite>
 8011312:	4620      	mov	r0, r4
 8011314:	bd38      	pop	{r3, r4, r5, pc}
 8011316:	bf00      	nop
 8011318:	20000190 	.word	0x20000190
 801131c:	0801eec0 	.word	0x0801eec0

08011320 <_Time__cdr_serialize>:
 8011320:	b538      	push	{r3, r4, r5, lr}
 8011322:	4604      	mov	r4, r0
 8011324:	b150      	cbz	r0, 801133c <_Time__cdr_serialize+0x1c>
 8011326:	460d      	mov	r5, r1
 8011328:	6801      	ldr	r1, [r0, #0]
 801132a:	4628      	mov	r0, r5
 801132c:	f000 fd1a 	bl	8011d64 <ucdr_serialize_int32_t>
 8011330:	6861      	ldr	r1, [r4, #4]
 8011332:	4628      	mov	r0, r5
 8011334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011338:	f000 bbb6 	b.w	8011aa8 <ucdr_serialize_uint32_t>
 801133c:	4b04      	ldr	r3, [pc, #16]	; (8011350 <_Time__cdr_serialize+0x30>)
 801133e:	4805      	ldr	r0, [pc, #20]	; (8011354 <_Time__cdr_serialize+0x34>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	221b      	movs	r2, #27
 8011344:	68db      	ldr	r3, [r3, #12]
 8011346:	2101      	movs	r1, #1
 8011348:	f008 f990 	bl	801966c <fwrite>
 801134c:	4620      	mov	r0, r4
 801134e:	bd38      	pop	{r3, r4, r5, pc}
 8011350:	20000190 	.word	0x20000190
 8011354:	0801eec0 	.word	0x0801eec0

08011358 <_Time__cdr_deserialize>:
 8011358:	b538      	push	{r3, r4, r5, lr}
 801135a:	460c      	mov	r4, r1
 801135c:	b141      	cbz	r1, 8011370 <_Time__cdr_deserialize+0x18>
 801135e:	4605      	mov	r5, r0
 8011360:	f000 fd30 	bl	8011dc4 <ucdr_deserialize_int32_t>
 8011364:	1d21      	adds	r1, r4, #4
 8011366:	4628      	mov	r0, r5
 8011368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801136c:	f000 bbfc 	b.w	8011b68 <ucdr_deserialize_uint32_t>
 8011370:	4b04      	ldr	r3, [pc, #16]	; (8011384 <_Time__cdr_deserialize+0x2c>)
 8011372:	4805      	ldr	r0, [pc, #20]	; (8011388 <_Time__cdr_deserialize+0x30>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	221b      	movs	r2, #27
 8011378:	68db      	ldr	r3, [r3, #12]
 801137a:	2101      	movs	r1, #1
 801137c:	f008 f976 	bl	801966c <fwrite>
 8011380:	4620      	mov	r0, r4
 8011382:	bd38      	pop	{r3, r4, r5, pc}
 8011384:	20000190 	.word	0x20000190
 8011388:	0801eec0 	.word	0x0801eec0

0801138c <_Time__max_serialized_size>:
 801138c:	b510      	push	{r4, lr}
 801138e:	2104      	movs	r1, #4
 8011390:	2000      	movs	r0, #0
 8011392:	f000 fead 	bl	80120f0 <ucdr_alignment>
 8011396:	1d04      	adds	r4, r0, #4
 8011398:	4620      	mov	r0, r4
 801139a:	2104      	movs	r1, #4
 801139c:	f000 fea8 	bl	80120f0 <ucdr_alignment>
 80113a0:	3004      	adds	r0, #4
 80113a2:	4420      	add	r0, r4
 80113a4:	bd10      	pop	{r4, pc}
 80113a6:	bf00      	nop

080113a8 <_Time__get_serialized_size>:
 80113a8:	b510      	push	{r4, lr}
 80113aa:	b158      	cbz	r0, 80113c4 <_Time__get_serialized_size+0x1c>
 80113ac:	2104      	movs	r1, #4
 80113ae:	2000      	movs	r0, #0
 80113b0:	f000 fe9e 	bl	80120f0 <ucdr_alignment>
 80113b4:	1d04      	adds	r4, r0, #4
 80113b6:	4620      	mov	r0, r4
 80113b8:	2104      	movs	r1, #4
 80113ba:	f000 fe99 	bl	80120f0 <ucdr_alignment>
 80113be:	3004      	adds	r0, #4
 80113c0:	4420      	add	r0, r4
 80113c2:	bd10      	pop	{r4, pc}
 80113c4:	4b05      	ldr	r3, [pc, #20]	; (80113dc <_Time__get_serialized_size+0x34>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	4604      	mov	r4, r0
 80113ca:	68db      	ldr	r3, [r3, #12]
 80113cc:	4804      	ldr	r0, [pc, #16]	; (80113e0 <_Time__get_serialized_size+0x38>)
 80113ce:	221b      	movs	r2, #27
 80113d0:	2101      	movs	r1, #1
 80113d2:	f008 f94b 	bl	801966c <fwrite>
 80113d6:	4620      	mov	r0, r4
 80113d8:	bd10      	pop	{r4, pc}
 80113da:	bf00      	nop
 80113dc:	20000190 	.word	0x20000190
 80113e0:	0801eec0 	.word	0x0801eec0

080113e4 <max_serialized_size_builtin_interfaces__msg__Time>:
 80113e4:	b538      	push	{r3, r4, r5, lr}
 80113e6:	2301      	movs	r3, #1
 80113e8:	7003      	strb	r3, [r0, #0]
 80113ea:	460c      	mov	r4, r1
 80113ec:	4608      	mov	r0, r1
 80113ee:	2104      	movs	r1, #4
 80113f0:	f000 fe7e 	bl	80120f0 <ucdr_alignment>
 80113f4:	1d25      	adds	r5, r4, #4
 80113f6:	4405      	add	r5, r0
 80113f8:	4628      	mov	r0, r5
 80113fa:	2104      	movs	r1, #4
 80113fc:	f000 fe78 	bl	80120f0 <ucdr_alignment>
 8011400:	f1c4 0404 	rsb	r4, r4, #4
 8011404:	4420      	add	r0, r4
 8011406:	4428      	add	r0, r5
 8011408:	bd38      	pop	{r3, r4, r5, pc}
 801140a:	bf00      	nop

0801140c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 801140c:	4800      	ldr	r0, [pc, #0]	; (8011410 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 801140e:	4770      	bx	lr
 8011410:	20000110 	.word	0x20000110

08011414 <ucdr_serialize_endian_array_char>:
 8011414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011418:	4619      	mov	r1, r3
 801141a:	461e      	mov	r6, r3
 801141c:	4690      	mov	r8, r2
 801141e:	4604      	mov	r4, r0
 8011420:	f000 fe10 	bl	8012044 <ucdr_check_buffer_available_for>
 8011424:	b9e0      	cbnz	r0, 8011460 <ucdr_serialize_endian_array_char+0x4c>
 8011426:	4637      	mov	r7, r6
 8011428:	e009      	b.n	801143e <ucdr_serialize_endian_array_char+0x2a>
 801142a:	68a0      	ldr	r0, [r4, #8]
 801142c:	f008 f9aa 	bl	8019784 <memcpy>
 8011430:	68a2      	ldr	r2, [r4, #8]
 8011432:	6923      	ldr	r3, [r4, #16]
 8011434:	442a      	add	r2, r5
 8011436:	442b      	add	r3, r5
 8011438:	1b7f      	subs	r7, r7, r5
 801143a:	60a2      	str	r2, [r4, #8]
 801143c:	6123      	str	r3, [r4, #16]
 801143e:	2201      	movs	r2, #1
 8011440:	4639      	mov	r1, r7
 8011442:	4620      	mov	r0, r4
 8011444:	f000 fe86 	bl	8012154 <ucdr_check_final_buffer_behavior_array>
 8011448:	1bf1      	subs	r1, r6, r7
 801144a:	4441      	add	r1, r8
 801144c:	4605      	mov	r5, r0
 801144e:	4602      	mov	r2, r0
 8011450:	2800      	cmp	r0, #0
 8011452:	d1ea      	bne.n	801142a <ucdr_serialize_endian_array_char+0x16>
 8011454:	2301      	movs	r3, #1
 8011456:	7da0      	ldrb	r0, [r4, #22]
 8011458:	7563      	strb	r3, [r4, #21]
 801145a:	4058      	eors	r0, r3
 801145c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011460:	4632      	mov	r2, r6
 8011462:	68a0      	ldr	r0, [r4, #8]
 8011464:	4641      	mov	r1, r8
 8011466:	f008 f98d 	bl	8019784 <memcpy>
 801146a:	68a2      	ldr	r2, [r4, #8]
 801146c:	6923      	ldr	r3, [r4, #16]
 801146e:	4432      	add	r2, r6
 8011470:	4433      	add	r3, r6
 8011472:	60a2      	str	r2, [r4, #8]
 8011474:	6123      	str	r3, [r4, #16]
 8011476:	e7ed      	b.n	8011454 <ucdr_serialize_endian_array_char+0x40>

08011478 <ucdr_deserialize_endian_array_char>:
 8011478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801147c:	4619      	mov	r1, r3
 801147e:	461e      	mov	r6, r3
 8011480:	4690      	mov	r8, r2
 8011482:	4604      	mov	r4, r0
 8011484:	f000 fdde 	bl	8012044 <ucdr_check_buffer_available_for>
 8011488:	b9e0      	cbnz	r0, 80114c4 <ucdr_deserialize_endian_array_char+0x4c>
 801148a:	4637      	mov	r7, r6
 801148c:	e009      	b.n	80114a2 <ucdr_deserialize_endian_array_char+0x2a>
 801148e:	68a1      	ldr	r1, [r4, #8]
 8011490:	f008 f978 	bl	8019784 <memcpy>
 8011494:	68a2      	ldr	r2, [r4, #8]
 8011496:	6923      	ldr	r3, [r4, #16]
 8011498:	442a      	add	r2, r5
 801149a:	442b      	add	r3, r5
 801149c:	1b7f      	subs	r7, r7, r5
 801149e:	60a2      	str	r2, [r4, #8]
 80114a0:	6123      	str	r3, [r4, #16]
 80114a2:	2201      	movs	r2, #1
 80114a4:	4639      	mov	r1, r7
 80114a6:	4620      	mov	r0, r4
 80114a8:	f000 fe54 	bl	8012154 <ucdr_check_final_buffer_behavior_array>
 80114ac:	4605      	mov	r5, r0
 80114ae:	1bf0      	subs	r0, r6, r7
 80114b0:	4440      	add	r0, r8
 80114b2:	462a      	mov	r2, r5
 80114b4:	2d00      	cmp	r5, #0
 80114b6:	d1ea      	bne.n	801148e <ucdr_deserialize_endian_array_char+0x16>
 80114b8:	2301      	movs	r3, #1
 80114ba:	7da0      	ldrb	r0, [r4, #22]
 80114bc:	7563      	strb	r3, [r4, #21]
 80114be:	4058      	eors	r0, r3
 80114c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114c4:	4632      	mov	r2, r6
 80114c6:	68a1      	ldr	r1, [r4, #8]
 80114c8:	4640      	mov	r0, r8
 80114ca:	f008 f95b 	bl	8019784 <memcpy>
 80114ce:	68a2      	ldr	r2, [r4, #8]
 80114d0:	6923      	ldr	r3, [r4, #16]
 80114d2:	4432      	add	r2, r6
 80114d4:	4433      	add	r3, r6
 80114d6:	60a2      	str	r2, [r4, #8]
 80114d8:	6123      	str	r3, [r4, #16]
 80114da:	e7ed      	b.n	80114b8 <ucdr_deserialize_endian_array_char+0x40>

080114dc <ucdr_serialize_array_uint8_t>:
 80114dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114e0:	4688      	mov	r8, r1
 80114e2:	4611      	mov	r1, r2
 80114e4:	4616      	mov	r6, r2
 80114e6:	4604      	mov	r4, r0
 80114e8:	f000 fdac 	bl	8012044 <ucdr_check_buffer_available_for>
 80114ec:	b9e0      	cbnz	r0, 8011528 <ucdr_serialize_array_uint8_t+0x4c>
 80114ee:	4637      	mov	r7, r6
 80114f0:	e009      	b.n	8011506 <ucdr_serialize_array_uint8_t+0x2a>
 80114f2:	68a0      	ldr	r0, [r4, #8]
 80114f4:	f008 f946 	bl	8019784 <memcpy>
 80114f8:	68a2      	ldr	r2, [r4, #8]
 80114fa:	6923      	ldr	r3, [r4, #16]
 80114fc:	442a      	add	r2, r5
 80114fe:	442b      	add	r3, r5
 8011500:	1b7f      	subs	r7, r7, r5
 8011502:	60a2      	str	r2, [r4, #8]
 8011504:	6123      	str	r3, [r4, #16]
 8011506:	2201      	movs	r2, #1
 8011508:	4639      	mov	r1, r7
 801150a:	4620      	mov	r0, r4
 801150c:	f000 fe22 	bl	8012154 <ucdr_check_final_buffer_behavior_array>
 8011510:	1bf1      	subs	r1, r6, r7
 8011512:	4441      	add	r1, r8
 8011514:	4605      	mov	r5, r0
 8011516:	4602      	mov	r2, r0
 8011518:	2800      	cmp	r0, #0
 801151a:	d1ea      	bne.n	80114f2 <ucdr_serialize_array_uint8_t+0x16>
 801151c:	2301      	movs	r3, #1
 801151e:	7da0      	ldrb	r0, [r4, #22]
 8011520:	7563      	strb	r3, [r4, #21]
 8011522:	4058      	eors	r0, r3
 8011524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011528:	4632      	mov	r2, r6
 801152a:	68a0      	ldr	r0, [r4, #8]
 801152c:	4641      	mov	r1, r8
 801152e:	f008 f929 	bl	8019784 <memcpy>
 8011532:	68a3      	ldr	r3, [r4, #8]
 8011534:	6922      	ldr	r2, [r4, #16]
 8011536:	4433      	add	r3, r6
 8011538:	4432      	add	r2, r6
 801153a:	60a3      	str	r3, [r4, #8]
 801153c:	6122      	str	r2, [r4, #16]
 801153e:	e7ed      	b.n	801151c <ucdr_serialize_array_uint8_t+0x40>

08011540 <ucdr_serialize_endian_array_uint8_t>:
 8011540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011544:	4619      	mov	r1, r3
 8011546:	461e      	mov	r6, r3
 8011548:	4690      	mov	r8, r2
 801154a:	4604      	mov	r4, r0
 801154c:	f000 fd7a 	bl	8012044 <ucdr_check_buffer_available_for>
 8011550:	b9e0      	cbnz	r0, 801158c <ucdr_serialize_endian_array_uint8_t+0x4c>
 8011552:	4637      	mov	r7, r6
 8011554:	e009      	b.n	801156a <ucdr_serialize_endian_array_uint8_t+0x2a>
 8011556:	68a0      	ldr	r0, [r4, #8]
 8011558:	f008 f914 	bl	8019784 <memcpy>
 801155c:	68a2      	ldr	r2, [r4, #8]
 801155e:	6923      	ldr	r3, [r4, #16]
 8011560:	442a      	add	r2, r5
 8011562:	442b      	add	r3, r5
 8011564:	1b7f      	subs	r7, r7, r5
 8011566:	60a2      	str	r2, [r4, #8]
 8011568:	6123      	str	r3, [r4, #16]
 801156a:	2201      	movs	r2, #1
 801156c:	4639      	mov	r1, r7
 801156e:	4620      	mov	r0, r4
 8011570:	f000 fdf0 	bl	8012154 <ucdr_check_final_buffer_behavior_array>
 8011574:	1bf1      	subs	r1, r6, r7
 8011576:	4441      	add	r1, r8
 8011578:	4605      	mov	r5, r0
 801157a:	4602      	mov	r2, r0
 801157c:	2800      	cmp	r0, #0
 801157e:	d1ea      	bne.n	8011556 <ucdr_serialize_endian_array_uint8_t+0x16>
 8011580:	2301      	movs	r3, #1
 8011582:	7da0      	ldrb	r0, [r4, #22]
 8011584:	7563      	strb	r3, [r4, #21]
 8011586:	4058      	eors	r0, r3
 8011588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801158c:	4632      	mov	r2, r6
 801158e:	68a0      	ldr	r0, [r4, #8]
 8011590:	4641      	mov	r1, r8
 8011592:	f008 f8f7 	bl	8019784 <memcpy>
 8011596:	68a2      	ldr	r2, [r4, #8]
 8011598:	6923      	ldr	r3, [r4, #16]
 801159a:	4432      	add	r2, r6
 801159c:	4433      	add	r3, r6
 801159e:	60a2      	str	r2, [r4, #8]
 80115a0:	6123      	str	r3, [r4, #16]
 80115a2:	e7ed      	b.n	8011580 <ucdr_serialize_endian_array_uint8_t+0x40>

080115a4 <ucdr_deserialize_array_uint8_t>:
 80115a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115a8:	4688      	mov	r8, r1
 80115aa:	4611      	mov	r1, r2
 80115ac:	4616      	mov	r6, r2
 80115ae:	4604      	mov	r4, r0
 80115b0:	f000 fd48 	bl	8012044 <ucdr_check_buffer_available_for>
 80115b4:	b9e0      	cbnz	r0, 80115f0 <ucdr_deserialize_array_uint8_t+0x4c>
 80115b6:	4637      	mov	r7, r6
 80115b8:	e009      	b.n	80115ce <ucdr_deserialize_array_uint8_t+0x2a>
 80115ba:	68a1      	ldr	r1, [r4, #8]
 80115bc:	f008 f8e2 	bl	8019784 <memcpy>
 80115c0:	68a2      	ldr	r2, [r4, #8]
 80115c2:	6923      	ldr	r3, [r4, #16]
 80115c4:	442a      	add	r2, r5
 80115c6:	442b      	add	r3, r5
 80115c8:	1b7f      	subs	r7, r7, r5
 80115ca:	60a2      	str	r2, [r4, #8]
 80115cc:	6123      	str	r3, [r4, #16]
 80115ce:	2201      	movs	r2, #1
 80115d0:	4639      	mov	r1, r7
 80115d2:	4620      	mov	r0, r4
 80115d4:	f000 fdbe 	bl	8012154 <ucdr_check_final_buffer_behavior_array>
 80115d8:	4605      	mov	r5, r0
 80115da:	1bf0      	subs	r0, r6, r7
 80115dc:	4440      	add	r0, r8
 80115de:	462a      	mov	r2, r5
 80115e0:	2d00      	cmp	r5, #0
 80115e2:	d1ea      	bne.n	80115ba <ucdr_deserialize_array_uint8_t+0x16>
 80115e4:	2301      	movs	r3, #1
 80115e6:	7da0      	ldrb	r0, [r4, #22]
 80115e8:	7563      	strb	r3, [r4, #21]
 80115ea:	4058      	eors	r0, r3
 80115ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115f0:	4632      	mov	r2, r6
 80115f2:	68a1      	ldr	r1, [r4, #8]
 80115f4:	4640      	mov	r0, r8
 80115f6:	f008 f8c5 	bl	8019784 <memcpy>
 80115fa:	68a3      	ldr	r3, [r4, #8]
 80115fc:	6922      	ldr	r2, [r4, #16]
 80115fe:	4433      	add	r3, r6
 8011600:	4432      	add	r2, r6
 8011602:	60a3      	str	r3, [r4, #8]
 8011604:	6122      	str	r2, [r4, #16]
 8011606:	e7ed      	b.n	80115e4 <ucdr_deserialize_array_uint8_t+0x40>

08011608 <ucdr_serialize_endian_array_uint16_t>:
 8011608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801160c:	4605      	mov	r5, r0
 801160e:	460f      	mov	r7, r1
 8011610:	2102      	movs	r1, #2
 8011612:	4614      	mov	r4, r2
 8011614:	461e      	mov	r6, r3
 8011616:	f000 fd73 	bl	8012100 <ucdr_buffer_alignment>
 801161a:	68aa      	ldr	r2, [r5, #8]
 801161c:	692b      	ldr	r3, [r5, #16]
 801161e:	4402      	add	r2, r0
 8011620:	2f01      	cmp	r7, #1
 8011622:	4418      	add	r0, r3
 8011624:	60aa      	str	r2, [r5, #8]
 8011626:	6128      	str	r0, [r5, #16]
 8011628:	d010      	beq.n	801164c <ucdr_serialize_endian_array_uint16_t+0x44>
 801162a:	b156      	cbz	r6, 8011642 <ucdr_serialize_endian_array_uint16_t+0x3a>
 801162c:	3c02      	subs	r4, #2
 801162e:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 8011632:	f834 2f02 	ldrh.w	r2, [r4, #2]!
 8011636:	4639      	mov	r1, r7
 8011638:	4628      	mov	r0, r5
 801163a:	f000 f9b9 	bl	80119b0 <ucdr_serialize_endian_uint16_t>
 801163e:	42b4      	cmp	r4, r6
 8011640:	d1f7      	bne.n	8011632 <ucdr_serialize_endian_array_uint16_t+0x2a>
 8011642:	7da8      	ldrb	r0, [r5, #22]
 8011644:	f080 0001 	eor.w	r0, r0, #1
 8011648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801164c:	0076      	lsls	r6, r6, #1
 801164e:	4631      	mov	r1, r6
 8011650:	4628      	mov	r0, r5
 8011652:	f000 fcf7 	bl	8012044 <ucdr_check_buffer_available_for>
 8011656:	b9f8      	cbnz	r0, 8011698 <ucdr_serialize_endian_array_uint16_t+0x90>
 8011658:	46b0      	mov	r8, r6
 801165a:	e00a      	b.n	8011672 <ucdr_serialize_endian_array_uint16_t+0x6a>
 801165c:	68a8      	ldr	r0, [r5, #8]
 801165e:	f008 f891 	bl	8019784 <memcpy>
 8011662:	68aa      	ldr	r2, [r5, #8]
 8011664:	692b      	ldr	r3, [r5, #16]
 8011666:	443a      	add	r2, r7
 8011668:	443b      	add	r3, r7
 801166a:	eba8 0807 	sub.w	r8, r8, r7
 801166e:	60aa      	str	r2, [r5, #8]
 8011670:	612b      	str	r3, [r5, #16]
 8011672:	2202      	movs	r2, #2
 8011674:	4641      	mov	r1, r8
 8011676:	4628      	mov	r0, r5
 8011678:	f000 fd6c 	bl	8012154 <ucdr_check_final_buffer_behavior_array>
 801167c:	eba6 0108 	sub.w	r1, r6, r8
 8011680:	4421      	add	r1, r4
 8011682:	4607      	mov	r7, r0
 8011684:	4602      	mov	r2, r0
 8011686:	2800      	cmp	r0, #0
 8011688:	d1e8      	bne.n	801165c <ucdr_serialize_endian_array_uint16_t+0x54>
 801168a:	7da8      	ldrb	r0, [r5, #22]
 801168c:	2302      	movs	r3, #2
 801168e:	756b      	strb	r3, [r5, #21]
 8011690:	f080 0001 	eor.w	r0, r0, #1
 8011694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011698:	4632      	mov	r2, r6
 801169a:	68a8      	ldr	r0, [r5, #8]
 801169c:	4621      	mov	r1, r4
 801169e:	f008 f871 	bl	8019784 <memcpy>
 80116a2:	68aa      	ldr	r2, [r5, #8]
 80116a4:	692b      	ldr	r3, [r5, #16]
 80116a6:	4432      	add	r2, r6
 80116a8:	441e      	add	r6, r3
 80116aa:	60aa      	str	r2, [r5, #8]
 80116ac:	612e      	str	r6, [r5, #16]
 80116ae:	e7ec      	b.n	801168a <ucdr_serialize_endian_array_uint16_t+0x82>

080116b0 <ucdr_deserialize_endian_array_uint16_t>:
 80116b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116b4:	4605      	mov	r5, r0
 80116b6:	460f      	mov	r7, r1
 80116b8:	2102      	movs	r1, #2
 80116ba:	4614      	mov	r4, r2
 80116bc:	461e      	mov	r6, r3
 80116be:	f000 fd1f 	bl	8012100 <ucdr_buffer_alignment>
 80116c2:	68aa      	ldr	r2, [r5, #8]
 80116c4:	692b      	ldr	r3, [r5, #16]
 80116c6:	4402      	add	r2, r0
 80116c8:	2f01      	cmp	r7, #1
 80116ca:	4418      	add	r0, r3
 80116cc:	60aa      	str	r2, [r5, #8]
 80116ce:	6128      	str	r0, [r5, #16]
 80116d0:	d00f      	beq.n	80116f2 <ucdr_deserialize_endian_array_uint16_t+0x42>
 80116d2:	b14e      	cbz	r6, 80116e8 <ucdr_deserialize_endian_array_uint16_t+0x38>
 80116d4:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 80116d8:	4622      	mov	r2, r4
 80116da:	4639      	mov	r1, r7
 80116dc:	3402      	adds	r4, #2
 80116de:	4628      	mov	r0, r5
 80116e0:	f000 f9b8 	bl	8011a54 <ucdr_deserialize_endian_uint16_t>
 80116e4:	42a6      	cmp	r6, r4
 80116e6:	d1f7      	bne.n	80116d8 <ucdr_deserialize_endian_array_uint16_t+0x28>
 80116e8:	7da8      	ldrb	r0, [r5, #22]
 80116ea:	f080 0001 	eor.w	r0, r0, #1
 80116ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116f2:	0076      	lsls	r6, r6, #1
 80116f4:	4631      	mov	r1, r6
 80116f6:	4628      	mov	r0, r5
 80116f8:	f000 fca4 	bl	8012044 <ucdr_check_buffer_available_for>
 80116fc:	b9f8      	cbnz	r0, 801173e <ucdr_deserialize_endian_array_uint16_t+0x8e>
 80116fe:	46b0      	mov	r8, r6
 8011700:	e00a      	b.n	8011718 <ucdr_deserialize_endian_array_uint16_t+0x68>
 8011702:	68a9      	ldr	r1, [r5, #8]
 8011704:	f008 f83e 	bl	8019784 <memcpy>
 8011708:	68aa      	ldr	r2, [r5, #8]
 801170a:	692b      	ldr	r3, [r5, #16]
 801170c:	443a      	add	r2, r7
 801170e:	443b      	add	r3, r7
 8011710:	eba8 0807 	sub.w	r8, r8, r7
 8011714:	60aa      	str	r2, [r5, #8]
 8011716:	612b      	str	r3, [r5, #16]
 8011718:	2202      	movs	r2, #2
 801171a:	4641      	mov	r1, r8
 801171c:	4628      	mov	r0, r5
 801171e:	f000 fd19 	bl	8012154 <ucdr_check_final_buffer_behavior_array>
 8011722:	4607      	mov	r7, r0
 8011724:	eba6 0008 	sub.w	r0, r6, r8
 8011728:	4420      	add	r0, r4
 801172a:	463a      	mov	r2, r7
 801172c:	2f00      	cmp	r7, #0
 801172e:	d1e8      	bne.n	8011702 <ucdr_deserialize_endian_array_uint16_t+0x52>
 8011730:	7da8      	ldrb	r0, [r5, #22]
 8011732:	2302      	movs	r3, #2
 8011734:	756b      	strb	r3, [r5, #21]
 8011736:	f080 0001 	eor.w	r0, r0, #1
 801173a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801173e:	4632      	mov	r2, r6
 8011740:	68a9      	ldr	r1, [r5, #8]
 8011742:	4620      	mov	r0, r4
 8011744:	f008 f81e 	bl	8019784 <memcpy>
 8011748:	68aa      	ldr	r2, [r5, #8]
 801174a:	692b      	ldr	r3, [r5, #16]
 801174c:	4432      	add	r2, r6
 801174e:	441e      	add	r6, r3
 8011750:	60aa      	str	r2, [r5, #8]
 8011752:	612e      	str	r6, [r5, #16]
 8011754:	e7ec      	b.n	8011730 <ucdr_deserialize_endian_array_uint16_t+0x80>
 8011756:	bf00      	nop

08011758 <ucdr_serialize_array_double>:
 8011758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801175c:	4604      	mov	r4, r0
 801175e:	460d      	mov	r5, r1
 8011760:	2108      	movs	r1, #8
 8011762:	4616      	mov	r6, r2
 8011764:	f000 fccc 	bl	8012100 <ucdr_buffer_alignment>
 8011768:	68a2      	ldr	r2, [r4, #8]
 801176a:	6923      	ldr	r3, [r4, #16]
 801176c:	7d21      	ldrb	r1, [r4, #20]
 801176e:	4402      	add	r2, r0
 8011770:	2901      	cmp	r1, #1
 8011772:	4418      	add	r0, r3
 8011774:	60a2      	str	r2, [r4, #8]
 8011776:	6120      	str	r0, [r4, #16]
 8011778:	d010      	beq.n	801179c <ucdr_serialize_array_double+0x44>
 801177a:	b156      	cbz	r6, 8011792 <ucdr_serialize_array_double+0x3a>
 801177c:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8011780:	e000      	b.n	8011784 <ucdr_serialize_array_double+0x2c>
 8011782:	7d21      	ldrb	r1, [r4, #20]
 8011784:	ecb5 0b02 	vldmia	r5!, {d0}
 8011788:	4620      	mov	r0, r4
 801178a:	f000 fb95 	bl	8011eb8 <ucdr_serialize_endian_double>
 801178e:	42ae      	cmp	r6, r5
 8011790:	d1f7      	bne.n	8011782 <ucdr_serialize_array_double+0x2a>
 8011792:	7da0      	ldrb	r0, [r4, #22]
 8011794:	f080 0001 	eor.w	r0, r0, #1
 8011798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801179c:	00f7      	lsls	r7, r6, #3
 801179e:	4639      	mov	r1, r7
 80117a0:	4620      	mov	r0, r4
 80117a2:	f000 fc4f 	bl	8012044 <ucdr_check_buffer_available_for>
 80117a6:	b9f8      	cbnz	r0, 80117e8 <ucdr_serialize_array_double+0x90>
 80117a8:	46b8      	mov	r8, r7
 80117aa:	e00a      	b.n	80117c2 <ucdr_serialize_array_double+0x6a>
 80117ac:	68a0      	ldr	r0, [r4, #8]
 80117ae:	f007 ffe9 	bl	8019784 <memcpy>
 80117b2:	68a2      	ldr	r2, [r4, #8]
 80117b4:	6923      	ldr	r3, [r4, #16]
 80117b6:	4432      	add	r2, r6
 80117b8:	4433      	add	r3, r6
 80117ba:	eba8 0806 	sub.w	r8, r8, r6
 80117be:	60a2      	str	r2, [r4, #8]
 80117c0:	6123      	str	r3, [r4, #16]
 80117c2:	2208      	movs	r2, #8
 80117c4:	4641      	mov	r1, r8
 80117c6:	4620      	mov	r0, r4
 80117c8:	f000 fcc4 	bl	8012154 <ucdr_check_final_buffer_behavior_array>
 80117cc:	eba7 0108 	sub.w	r1, r7, r8
 80117d0:	4429      	add	r1, r5
 80117d2:	4606      	mov	r6, r0
 80117d4:	4602      	mov	r2, r0
 80117d6:	2800      	cmp	r0, #0
 80117d8:	d1e8      	bne.n	80117ac <ucdr_serialize_array_double+0x54>
 80117da:	7da0      	ldrb	r0, [r4, #22]
 80117dc:	2308      	movs	r3, #8
 80117de:	7563      	strb	r3, [r4, #21]
 80117e0:	f080 0001 	eor.w	r0, r0, #1
 80117e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117e8:	463a      	mov	r2, r7
 80117ea:	68a0      	ldr	r0, [r4, #8]
 80117ec:	4629      	mov	r1, r5
 80117ee:	f007 ffc9 	bl	8019784 <memcpy>
 80117f2:	68a2      	ldr	r2, [r4, #8]
 80117f4:	6923      	ldr	r3, [r4, #16]
 80117f6:	443a      	add	r2, r7
 80117f8:	443b      	add	r3, r7
 80117fa:	60a2      	str	r2, [r4, #8]
 80117fc:	6123      	str	r3, [r4, #16]
 80117fe:	e7ec      	b.n	80117da <ucdr_serialize_array_double+0x82>

08011800 <ucdr_deserialize_array_double>:
 8011800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011804:	4605      	mov	r5, r0
 8011806:	460c      	mov	r4, r1
 8011808:	2108      	movs	r1, #8
 801180a:	4616      	mov	r6, r2
 801180c:	f000 fc78 	bl	8012100 <ucdr_buffer_alignment>
 8011810:	68aa      	ldr	r2, [r5, #8]
 8011812:	692b      	ldr	r3, [r5, #16]
 8011814:	7d29      	ldrb	r1, [r5, #20]
 8011816:	4402      	add	r2, r0
 8011818:	2901      	cmp	r1, #1
 801181a:	4418      	add	r0, r3
 801181c:	60aa      	str	r2, [r5, #8]
 801181e:	6128      	str	r0, [r5, #16]
 8011820:	d010      	beq.n	8011844 <ucdr_deserialize_array_double+0x44>
 8011822:	b156      	cbz	r6, 801183a <ucdr_deserialize_array_double+0x3a>
 8011824:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8011828:	e000      	b.n	801182c <ucdr_deserialize_array_double+0x2c>
 801182a:	7d29      	ldrb	r1, [r5, #20]
 801182c:	4622      	mov	r2, r4
 801182e:	4628      	mov	r0, r5
 8011830:	3408      	adds	r4, #8
 8011832:	f000 fbc9 	bl	8011fc8 <ucdr_deserialize_endian_double>
 8011836:	42a6      	cmp	r6, r4
 8011838:	d1f7      	bne.n	801182a <ucdr_deserialize_array_double+0x2a>
 801183a:	7da8      	ldrb	r0, [r5, #22]
 801183c:	f080 0001 	eor.w	r0, r0, #1
 8011840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011844:	00f7      	lsls	r7, r6, #3
 8011846:	4639      	mov	r1, r7
 8011848:	4628      	mov	r0, r5
 801184a:	f000 fbfb 	bl	8012044 <ucdr_check_buffer_available_for>
 801184e:	b9f8      	cbnz	r0, 8011890 <ucdr_deserialize_array_double+0x90>
 8011850:	46b8      	mov	r8, r7
 8011852:	e00a      	b.n	801186a <ucdr_deserialize_array_double+0x6a>
 8011854:	68a9      	ldr	r1, [r5, #8]
 8011856:	f007 ff95 	bl	8019784 <memcpy>
 801185a:	68aa      	ldr	r2, [r5, #8]
 801185c:	692b      	ldr	r3, [r5, #16]
 801185e:	4432      	add	r2, r6
 8011860:	4433      	add	r3, r6
 8011862:	eba8 0806 	sub.w	r8, r8, r6
 8011866:	60aa      	str	r2, [r5, #8]
 8011868:	612b      	str	r3, [r5, #16]
 801186a:	2208      	movs	r2, #8
 801186c:	4641      	mov	r1, r8
 801186e:	4628      	mov	r0, r5
 8011870:	f000 fc70 	bl	8012154 <ucdr_check_final_buffer_behavior_array>
 8011874:	4606      	mov	r6, r0
 8011876:	eba7 0008 	sub.w	r0, r7, r8
 801187a:	4420      	add	r0, r4
 801187c:	4632      	mov	r2, r6
 801187e:	2e00      	cmp	r6, #0
 8011880:	d1e8      	bne.n	8011854 <ucdr_deserialize_array_double+0x54>
 8011882:	7da8      	ldrb	r0, [r5, #22]
 8011884:	2308      	movs	r3, #8
 8011886:	756b      	strb	r3, [r5, #21]
 8011888:	f080 0001 	eor.w	r0, r0, #1
 801188c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011890:	463a      	mov	r2, r7
 8011892:	68a9      	ldr	r1, [r5, #8]
 8011894:	4620      	mov	r0, r4
 8011896:	f007 ff75 	bl	8019784 <memcpy>
 801189a:	68aa      	ldr	r2, [r5, #8]
 801189c:	692b      	ldr	r3, [r5, #16]
 801189e:	443a      	add	r2, r7
 80118a0:	443b      	add	r3, r7
 80118a2:	60aa      	str	r2, [r5, #8]
 80118a4:	612b      	str	r3, [r5, #16]
 80118a6:	e7ec      	b.n	8011882 <ucdr_deserialize_array_double+0x82>

080118a8 <ucdr_serialize_bool>:
 80118a8:	b538      	push	{r3, r4, r5, lr}
 80118aa:	460d      	mov	r5, r1
 80118ac:	2101      	movs	r1, #1
 80118ae:	4604      	mov	r4, r0
 80118b0:	f000 fbd4 	bl	801205c <ucdr_check_final_buffer_behavior>
 80118b4:	b148      	cbz	r0, 80118ca <ucdr_serialize_bool+0x22>
 80118b6:	68a3      	ldr	r3, [r4, #8]
 80118b8:	701d      	strb	r5, [r3, #0]
 80118ba:	68a2      	ldr	r2, [r4, #8]
 80118bc:	6923      	ldr	r3, [r4, #16]
 80118be:	3201      	adds	r2, #1
 80118c0:	3301      	adds	r3, #1
 80118c2:	2101      	movs	r1, #1
 80118c4:	60a2      	str	r2, [r4, #8]
 80118c6:	6123      	str	r3, [r4, #16]
 80118c8:	7561      	strb	r1, [r4, #21]
 80118ca:	7da0      	ldrb	r0, [r4, #22]
 80118cc:	f080 0001 	eor.w	r0, r0, #1
 80118d0:	bd38      	pop	{r3, r4, r5, pc}
 80118d2:	bf00      	nop

080118d4 <ucdr_deserialize_bool>:
 80118d4:	b538      	push	{r3, r4, r5, lr}
 80118d6:	460d      	mov	r5, r1
 80118d8:	2101      	movs	r1, #1
 80118da:	4604      	mov	r4, r0
 80118dc:	f000 fbbe 	bl	801205c <ucdr_check_final_buffer_behavior>
 80118e0:	b168      	cbz	r0, 80118fe <ucdr_deserialize_bool+0x2a>
 80118e2:	68a2      	ldr	r2, [r4, #8]
 80118e4:	6923      	ldr	r3, [r4, #16]
 80118e6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80118ea:	3900      	subs	r1, #0
 80118ec:	f103 0301 	add.w	r3, r3, #1
 80118f0:	bf18      	it	ne
 80118f2:	2101      	movne	r1, #1
 80118f4:	2001      	movs	r0, #1
 80118f6:	7029      	strb	r1, [r5, #0]
 80118f8:	60a2      	str	r2, [r4, #8]
 80118fa:	6123      	str	r3, [r4, #16]
 80118fc:	7560      	strb	r0, [r4, #21]
 80118fe:	7da0      	ldrb	r0, [r4, #22]
 8011900:	f080 0001 	eor.w	r0, r0, #1
 8011904:	bd38      	pop	{r3, r4, r5, pc}
 8011906:	bf00      	nop

08011908 <ucdr_serialize_uint8_t>:
 8011908:	b538      	push	{r3, r4, r5, lr}
 801190a:	460d      	mov	r5, r1
 801190c:	2101      	movs	r1, #1
 801190e:	4604      	mov	r4, r0
 8011910:	f000 fba4 	bl	801205c <ucdr_check_final_buffer_behavior>
 8011914:	b148      	cbz	r0, 801192a <ucdr_serialize_uint8_t+0x22>
 8011916:	68a3      	ldr	r3, [r4, #8]
 8011918:	701d      	strb	r5, [r3, #0]
 801191a:	68a2      	ldr	r2, [r4, #8]
 801191c:	6923      	ldr	r3, [r4, #16]
 801191e:	3201      	adds	r2, #1
 8011920:	3301      	adds	r3, #1
 8011922:	2101      	movs	r1, #1
 8011924:	60a2      	str	r2, [r4, #8]
 8011926:	6123      	str	r3, [r4, #16]
 8011928:	7561      	strb	r1, [r4, #21]
 801192a:	7da0      	ldrb	r0, [r4, #22]
 801192c:	f080 0001 	eor.w	r0, r0, #1
 8011930:	bd38      	pop	{r3, r4, r5, pc}
 8011932:	bf00      	nop

08011934 <ucdr_deserialize_uint8_t>:
 8011934:	b538      	push	{r3, r4, r5, lr}
 8011936:	460d      	mov	r5, r1
 8011938:	2101      	movs	r1, #1
 801193a:	4604      	mov	r4, r0
 801193c:	f000 fb8e 	bl	801205c <ucdr_check_final_buffer_behavior>
 8011940:	b150      	cbz	r0, 8011958 <ucdr_deserialize_uint8_t+0x24>
 8011942:	68a3      	ldr	r3, [r4, #8]
 8011944:	781b      	ldrb	r3, [r3, #0]
 8011946:	702b      	strb	r3, [r5, #0]
 8011948:	68a2      	ldr	r2, [r4, #8]
 801194a:	6923      	ldr	r3, [r4, #16]
 801194c:	3201      	adds	r2, #1
 801194e:	3301      	adds	r3, #1
 8011950:	2101      	movs	r1, #1
 8011952:	60a2      	str	r2, [r4, #8]
 8011954:	6123      	str	r3, [r4, #16]
 8011956:	7561      	strb	r1, [r4, #21]
 8011958:	7da0      	ldrb	r0, [r4, #22]
 801195a:	f080 0001 	eor.w	r0, r0, #1
 801195e:	bd38      	pop	{r3, r4, r5, pc}

08011960 <ucdr_serialize_uint16_t>:
 8011960:	b538      	push	{r3, r4, r5, lr}
 8011962:	4604      	mov	r4, r0
 8011964:	460d      	mov	r5, r1
 8011966:	2102      	movs	r1, #2
 8011968:	f000 fbca 	bl	8012100 <ucdr_buffer_alignment>
 801196c:	68a2      	ldr	r2, [r4, #8]
 801196e:	6923      	ldr	r3, [r4, #16]
 8011970:	4402      	add	r2, r0
 8011972:	4418      	add	r0, r3
 8011974:	6120      	str	r0, [r4, #16]
 8011976:	60a2      	str	r2, [r4, #8]
 8011978:	4620      	mov	r0, r4
 801197a:	2102      	movs	r1, #2
 801197c:	f000 fb6e 	bl	801205c <ucdr_check_final_buffer_behavior>
 8011980:	b180      	cbz	r0, 80119a4 <ucdr_serialize_uint16_t+0x44>
 8011982:	7d23      	ldrb	r3, [r4, #20]
 8011984:	2b01      	cmp	r3, #1
 8011986:	68a3      	ldr	r3, [r4, #8]
 8011988:	d010      	beq.n	80119ac <ucdr_serialize_uint16_t+0x4c>
 801198a:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801198e:	701a      	strb	r2, [r3, #0]
 8011990:	68a3      	ldr	r3, [r4, #8]
 8011992:	705d      	strb	r5, [r3, #1]
 8011994:	68a2      	ldr	r2, [r4, #8]
 8011996:	6923      	ldr	r3, [r4, #16]
 8011998:	3202      	adds	r2, #2
 801199a:	3302      	adds	r3, #2
 801199c:	2102      	movs	r1, #2
 801199e:	60a2      	str	r2, [r4, #8]
 80119a0:	6123      	str	r3, [r4, #16]
 80119a2:	7561      	strb	r1, [r4, #21]
 80119a4:	7da0      	ldrb	r0, [r4, #22]
 80119a6:	f080 0001 	eor.w	r0, r0, #1
 80119aa:	bd38      	pop	{r3, r4, r5, pc}
 80119ac:	801d      	strh	r5, [r3, #0]
 80119ae:	e7f1      	b.n	8011994 <ucdr_serialize_uint16_t+0x34>

080119b0 <ucdr_serialize_endian_uint16_t>:
 80119b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119b2:	4604      	mov	r4, r0
 80119b4:	460f      	mov	r7, r1
 80119b6:	2102      	movs	r1, #2
 80119b8:	4616      	mov	r6, r2
 80119ba:	f000 fba1 	bl	8012100 <ucdr_buffer_alignment>
 80119be:	68a5      	ldr	r5, [r4, #8]
 80119c0:	6923      	ldr	r3, [r4, #16]
 80119c2:	4405      	add	r5, r0
 80119c4:	4418      	add	r0, r3
 80119c6:	6120      	str	r0, [r4, #16]
 80119c8:	60a5      	str	r5, [r4, #8]
 80119ca:	4620      	mov	r0, r4
 80119cc:	2102      	movs	r1, #2
 80119ce:	f000 fb45 	bl	801205c <ucdr_check_final_buffer_behavior>
 80119d2:	b178      	cbz	r0, 80119f4 <ucdr_serialize_endian_uint16_t+0x44>
 80119d4:	2f01      	cmp	r7, #1
 80119d6:	68a3      	ldr	r3, [r4, #8]
 80119d8:	d010      	beq.n	80119fc <ucdr_serialize_endian_uint16_t+0x4c>
 80119da:	f3c6 2207 	ubfx	r2, r6, #8, #8
 80119de:	701a      	strb	r2, [r3, #0]
 80119e0:	68a3      	ldr	r3, [r4, #8]
 80119e2:	705e      	strb	r6, [r3, #1]
 80119e4:	68a2      	ldr	r2, [r4, #8]
 80119e6:	6923      	ldr	r3, [r4, #16]
 80119e8:	3202      	adds	r2, #2
 80119ea:	3302      	adds	r3, #2
 80119ec:	2102      	movs	r1, #2
 80119ee:	60a2      	str	r2, [r4, #8]
 80119f0:	6123      	str	r3, [r4, #16]
 80119f2:	7561      	strb	r1, [r4, #21]
 80119f4:	7da0      	ldrb	r0, [r4, #22]
 80119f6:	f080 0001 	eor.w	r0, r0, #1
 80119fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119fc:	801e      	strh	r6, [r3, #0]
 80119fe:	e7f1      	b.n	80119e4 <ucdr_serialize_endian_uint16_t+0x34>

08011a00 <ucdr_deserialize_uint16_t>:
 8011a00:	b538      	push	{r3, r4, r5, lr}
 8011a02:	4604      	mov	r4, r0
 8011a04:	460d      	mov	r5, r1
 8011a06:	2102      	movs	r1, #2
 8011a08:	f000 fb7a 	bl	8012100 <ucdr_buffer_alignment>
 8011a0c:	68a2      	ldr	r2, [r4, #8]
 8011a0e:	6923      	ldr	r3, [r4, #16]
 8011a10:	4402      	add	r2, r0
 8011a12:	4418      	add	r0, r3
 8011a14:	6120      	str	r0, [r4, #16]
 8011a16:	60a2      	str	r2, [r4, #8]
 8011a18:	4620      	mov	r0, r4
 8011a1a:	2102      	movs	r1, #2
 8011a1c:	f000 fb1e 	bl	801205c <ucdr_check_final_buffer_behavior>
 8011a20:	b180      	cbz	r0, 8011a44 <ucdr_deserialize_uint16_t+0x44>
 8011a22:	7d23      	ldrb	r3, [r4, #20]
 8011a24:	2b01      	cmp	r3, #1
 8011a26:	68a3      	ldr	r3, [r4, #8]
 8011a28:	d010      	beq.n	8011a4c <ucdr_deserialize_uint16_t+0x4c>
 8011a2a:	785b      	ldrb	r3, [r3, #1]
 8011a2c:	702b      	strb	r3, [r5, #0]
 8011a2e:	68a3      	ldr	r3, [r4, #8]
 8011a30:	781b      	ldrb	r3, [r3, #0]
 8011a32:	706b      	strb	r3, [r5, #1]
 8011a34:	68a2      	ldr	r2, [r4, #8]
 8011a36:	6923      	ldr	r3, [r4, #16]
 8011a38:	3202      	adds	r2, #2
 8011a3a:	3302      	adds	r3, #2
 8011a3c:	2102      	movs	r1, #2
 8011a3e:	60a2      	str	r2, [r4, #8]
 8011a40:	6123      	str	r3, [r4, #16]
 8011a42:	7561      	strb	r1, [r4, #21]
 8011a44:	7da0      	ldrb	r0, [r4, #22]
 8011a46:	f080 0001 	eor.w	r0, r0, #1
 8011a4a:	bd38      	pop	{r3, r4, r5, pc}
 8011a4c:	881b      	ldrh	r3, [r3, #0]
 8011a4e:	802b      	strh	r3, [r5, #0]
 8011a50:	e7f0      	b.n	8011a34 <ucdr_deserialize_uint16_t+0x34>
 8011a52:	bf00      	nop

08011a54 <ucdr_deserialize_endian_uint16_t>:
 8011a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a56:	4604      	mov	r4, r0
 8011a58:	460f      	mov	r7, r1
 8011a5a:	2102      	movs	r1, #2
 8011a5c:	4616      	mov	r6, r2
 8011a5e:	f000 fb4f 	bl	8012100 <ucdr_buffer_alignment>
 8011a62:	68a5      	ldr	r5, [r4, #8]
 8011a64:	6923      	ldr	r3, [r4, #16]
 8011a66:	4405      	add	r5, r0
 8011a68:	4418      	add	r0, r3
 8011a6a:	6120      	str	r0, [r4, #16]
 8011a6c:	60a5      	str	r5, [r4, #8]
 8011a6e:	4620      	mov	r0, r4
 8011a70:	2102      	movs	r1, #2
 8011a72:	f000 faf3 	bl	801205c <ucdr_check_final_buffer_behavior>
 8011a76:	b178      	cbz	r0, 8011a98 <ucdr_deserialize_endian_uint16_t+0x44>
 8011a78:	2f01      	cmp	r7, #1
 8011a7a:	68a3      	ldr	r3, [r4, #8]
 8011a7c:	d010      	beq.n	8011aa0 <ucdr_deserialize_endian_uint16_t+0x4c>
 8011a7e:	785b      	ldrb	r3, [r3, #1]
 8011a80:	7033      	strb	r3, [r6, #0]
 8011a82:	68a3      	ldr	r3, [r4, #8]
 8011a84:	781b      	ldrb	r3, [r3, #0]
 8011a86:	7073      	strb	r3, [r6, #1]
 8011a88:	68a2      	ldr	r2, [r4, #8]
 8011a8a:	6923      	ldr	r3, [r4, #16]
 8011a8c:	3202      	adds	r2, #2
 8011a8e:	3302      	adds	r3, #2
 8011a90:	2102      	movs	r1, #2
 8011a92:	60a2      	str	r2, [r4, #8]
 8011a94:	6123      	str	r3, [r4, #16]
 8011a96:	7561      	strb	r1, [r4, #21]
 8011a98:	7da0      	ldrb	r0, [r4, #22]
 8011a9a:	f080 0001 	eor.w	r0, r0, #1
 8011a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011aa0:	881b      	ldrh	r3, [r3, #0]
 8011aa2:	8033      	strh	r3, [r6, #0]
 8011aa4:	e7f0      	b.n	8011a88 <ucdr_deserialize_endian_uint16_t+0x34>
 8011aa6:	bf00      	nop

08011aa8 <ucdr_serialize_uint32_t>:
 8011aa8:	b538      	push	{r3, r4, r5, lr}
 8011aaa:	4604      	mov	r4, r0
 8011aac:	460d      	mov	r5, r1
 8011aae:	2104      	movs	r1, #4
 8011ab0:	f000 fb26 	bl	8012100 <ucdr_buffer_alignment>
 8011ab4:	68a2      	ldr	r2, [r4, #8]
 8011ab6:	6923      	ldr	r3, [r4, #16]
 8011ab8:	4402      	add	r2, r0
 8011aba:	4418      	add	r0, r3
 8011abc:	6120      	str	r0, [r4, #16]
 8011abe:	60a2      	str	r2, [r4, #8]
 8011ac0:	4620      	mov	r0, r4
 8011ac2:	2104      	movs	r1, #4
 8011ac4:	f000 faca 	bl	801205c <ucdr_check_final_buffer_behavior>
 8011ac8:	b1c0      	cbz	r0, 8011afc <ucdr_serialize_uint32_t+0x54>
 8011aca:	7d23      	ldrb	r3, [r4, #20]
 8011acc:	2b01      	cmp	r3, #1
 8011ace:	68a3      	ldr	r3, [r4, #8]
 8011ad0:	d018      	beq.n	8011b04 <ucdr_serialize_uint32_t+0x5c>
 8011ad2:	f3c5 6207 	ubfx	r2, r5, #24, #8
 8011ad6:	701a      	strb	r2, [r3, #0]
 8011ad8:	68a3      	ldr	r3, [r4, #8]
 8011ada:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8011ade:	705a      	strb	r2, [r3, #1]
 8011ae0:	68a3      	ldr	r3, [r4, #8]
 8011ae2:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8011ae6:	709a      	strb	r2, [r3, #2]
 8011ae8:	68a3      	ldr	r3, [r4, #8]
 8011aea:	70dd      	strb	r5, [r3, #3]
 8011aec:	68a2      	ldr	r2, [r4, #8]
 8011aee:	6923      	ldr	r3, [r4, #16]
 8011af0:	3204      	adds	r2, #4
 8011af2:	3304      	adds	r3, #4
 8011af4:	2104      	movs	r1, #4
 8011af6:	60a2      	str	r2, [r4, #8]
 8011af8:	6123      	str	r3, [r4, #16]
 8011afa:	7561      	strb	r1, [r4, #21]
 8011afc:	7da0      	ldrb	r0, [r4, #22]
 8011afe:	f080 0001 	eor.w	r0, r0, #1
 8011b02:	bd38      	pop	{r3, r4, r5, pc}
 8011b04:	601d      	str	r5, [r3, #0]
 8011b06:	e7f1      	b.n	8011aec <ucdr_serialize_uint32_t+0x44>

08011b08 <ucdr_serialize_endian_uint32_t>:
 8011b08:	b570      	push	{r4, r5, r6, lr}
 8011b0a:	4604      	mov	r4, r0
 8011b0c:	460e      	mov	r6, r1
 8011b0e:	2104      	movs	r1, #4
 8011b10:	4615      	mov	r5, r2
 8011b12:	f000 faf5 	bl	8012100 <ucdr_buffer_alignment>
 8011b16:	68a2      	ldr	r2, [r4, #8]
 8011b18:	6923      	ldr	r3, [r4, #16]
 8011b1a:	4402      	add	r2, r0
 8011b1c:	4418      	add	r0, r3
 8011b1e:	6120      	str	r0, [r4, #16]
 8011b20:	60a2      	str	r2, [r4, #8]
 8011b22:	4620      	mov	r0, r4
 8011b24:	2104      	movs	r1, #4
 8011b26:	f000 fa99 	bl	801205c <ucdr_check_final_buffer_behavior>
 8011b2a:	b1b8      	cbz	r0, 8011b5c <ucdr_serialize_endian_uint32_t+0x54>
 8011b2c:	2e01      	cmp	r6, #1
 8011b2e:	68a3      	ldr	r3, [r4, #8]
 8011b30:	d018      	beq.n	8011b64 <ucdr_serialize_endian_uint32_t+0x5c>
 8011b32:	f3c5 6207 	ubfx	r2, r5, #24, #8
 8011b36:	701a      	strb	r2, [r3, #0]
 8011b38:	68a3      	ldr	r3, [r4, #8]
 8011b3a:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8011b3e:	705a      	strb	r2, [r3, #1]
 8011b40:	68a3      	ldr	r3, [r4, #8]
 8011b42:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8011b46:	709a      	strb	r2, [r3, #2]
 8011b48:	68a3      	ldr	r3, [r4, #8]
 8011b4a:	70dd      	strb	r5, [r3, #3]
 8011b4c:	68a2      	ldr	r2, [r4, #8]
 8011b4e:	6923      	ldr	r3, [r4, #16]
 8011b50:	3204      	adds	r2, #4
 8011b52:	3304      	adds	r3, #4
 8011b54:	2104      	movs	r1, #4
 8011b56:	60a2      	str	r2, [r4, #8]
 8011b58:	6123      	str	r3, [r4, #16]
 8011b5a:	7561      	strb	r1, [r4, #21]
 8011b5c:	7da0      	ldrb	r0, [r4, #22]
 8011b5e:	f080 0001 	eor.w	r0, r0, #1
 8011b62:	bd70      	pop	{r4, r5, r6, pc}
 8011b64:	601d      	str	r5, [r3, #0]
 8011b66:	e7f1      	b.n	8011b4c <ucdr_serialize_endian_uint32_t+0x44>

08011b68 <ucdr_deserialize_uint32_t>:
 8011b68:	b538      	push	{r3, r4, r5, lr}
 8011b6a:	4604      	mov	r4, r0
 8011b6c:	460d      	mov	r5, r1
 8011b6e:	2104      	movs	r1, #4
 8011b70:	f000 fac6 	bl	8012100 <ucdr_buffer_alignment>
 8011b74:	68a2      	ldr	r2, [r4, #8]
 8011b76:	6923      	ldr	r3, [r4, #16]
 8011b78:	4402      	add	r2, r0
 8011b7a:	4418      	add	r0, r3
 8011b7c:	6120      	str	r0, [r4, #16]
 8011b7e:	60a2      	str	r2, [r4, #8]
 8011b80:	4620      	mov	r0, r4
 8011b82:	2104      	movs	r1, #4
 8011b84:	f000 fa6a 	bl	801205c <ucdr_check_final_buffer_behavior>
 8011b88:	b1b0      	cbz	r0, 8011bb8 <ucdr_deserialize_uint32_t+0x50>
 8011b8a:	7d23      	ldrb	r3, [r4, #20]
 8011b8c:	2b01      	cmp	r3, #1
 8011b8e:	68a3      	ldr	r3, [r4, #8]
 8011b90:	d016      	beq.n	8011bc0 <ucdr_deserialize_uint32_t+0x58>
 8011b92:	78db      	ldrb	r3, [r3, #3]
 8011b94:	702b      	strb	r3, [r5, #0]
 8011b96:	68a3      	ldr	r3, [r4, #8]
 8011b98:	789b      	ldrb	r3, [r3, #2]
 8011b9a:	706b      	strb	r3, [r5, #1]
 8011b9c:	68a3      	ldr	r3, [r4, #8]
 8011b9e:	785b      	ldrb	r3, [r3, #1]
 8011ba0:	70ab      	strb	r3, [r5, #2]
 8011ba2:	68a3      	ldr	r3, [r4, #8]
 8011ba4:	781b      	ldrb	r3, [r3, #0]
 8011ba6:	70eb      	strb	r3, [r5, #3]
 8011ba8:	68a2      	ldr	r2, [r4, #8]
 8011baa:	6923      	ldr	r3, [r4, #16]
 8011bac:	3204      	adds	r2, #4
 8011bae:	3304      	adds	r3, #4
 8011bb0:	2104      	movs	r1, #4
 8011bb2:	60a2      	str	r2, [r4, #8]
 8011bb4:	6123      	str	r3, [r4, #16]
 8011bb6:	7561      	strb	r1, [r4, #21]
 8011bb8:	7da0      	ldrb	r0, [r4, #22]
 8011bba:	f080 0001 	eor.w	r0, r0, #1
 8011bbe:	bd38      	pop	{r3, r4, r5, pc}
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	602b      	str	r3, [r5, #0]
 8011bc4:	e7f0      	b.n	8011ba8 <ucdr_deserialize_uint32_t+0x40>
 8011bc6:	bf00      	nop

08011bc8 <ucdr_deserialize_endian_uint32_t>:
 8011bc8:	b570      	push	{r4, r5, r6, lr}
 8011bca:	4604      	mov	r4, r0
 8011bcc:	460e      	mov	r6, r1
 8011bce:	2104      	movs	r1, #4
 8011bd0:	4615      	mov	r5, r2
 8011bd2:	f000 fa95 	bl	8012100 <ucdr_buffer_alignment>
 8011bd6:	68a2      	ldr	r2, [r4, #8]
 8011bd8:	6923      	ldr	r3, [r4, #16]
 8011bda:	4402      	add	r2, r0
 8011bdc:	4418      	add	r0, r3
 8011bde:	6120      	str	r0, [r4, #16]
 8011be0:	60a2      	str	r2, [r4, #8]
 8011be2:	4620      	mov	r0, r4
 8011be4:	2104      	movs	r1, #4
 8011be6:	f000 fa39 	bl	801205c <ucdr_check_final_buffer_behavior>
 8011bea:	b1a8      	cbz	r0, 8011c18 <ucdr_deserialize_endian_uint32_t+0x50>
 8011bec:	2e01      	cmp	r6, #1
 8011bee:	68a3      	ldr	r3, [r4, #8]
 8011bf0:	d016      	beq.n	8011c20 <ucdr_deserialize_endian_uint32_t+0x58>
 8011bf2:	78db      	ldrb	r3, [r3, #3]
 8011bf4:	702b      	strb	r3, [r5, #0]
 8011bf6:	68a3      	ldr	r3, [r4, #8]
 8011bf8:	789b      	ldrb	r3, [r3, #2]
 8011bfa:	706b      	strb	r3, [r5, #1]
 8011bfc:	68a3      	ldr	r3, [r4, #8]
 8011bfe:	785b      	ldrb	r3, [r3, #1]
 8011c00:	70ab      	strb	r3, [r5, #2]
 8011c02:	68a3      	ldr	r3, [r4, #8]
 8011c04:	781b      	ldrb	r3, [r3, #0]
 8011c06:	70eb      	strb	r3, [r5, #3]
 8011c08:	68a2      	ldr	r2, [r4, #8]
 8011c0a:	6923      	ldr	r3, [r4, #16]
 8011c0c:	3204      	adds	r2, #4
 8011c0e:	3304      	adds	r3, #4
 8011c10:	2104      	movs	r1, #4
 8011c12:	60a2      	str	r2, [r4, #8]
 8011c14:	6123      	str	r3, [r4, #16]
 8011c16:	7561      	strb	r1, [r4, #21]
 8011c18:	7da0      	ldrb	r0, [r4, #22]
 8011c1a:	f080 0001 	eor.w	r0, r0, #1
 8011c1e:	bd70      	pop	{r4, r5, r6, pc}
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	602b      	str	r3, [r5, #0]
 8011c24:	e7f0      	b.n	8011c08 <ucdr_deserialize_endian_uint32_t+0x40>
 8011c26:	bf00      	nop

08011c28 <ucdr_serialize_uint64_t>:
 8011c28:	b510      	push	{r4, lr}
 8011c2a:	2108      	movs	r1, #8
 8011c2c:	4604      	mov	r4, r0
 8011c2e:	b082      	sub	sp, #8
 8011c30:	e9cd 2300 	strd	r2, r3, [sp]
 8011c34:	f000 fa64 	bl	8012100 <ucdr_buffer_alignment>
 8011c38:	68a2      	ldr	r2, [r4, #8]
 8011c3a:	6923      	ldr	r3, [r4, #16]
 8011c3c:	4402      	add	r2, r0
 8011c3e:	4418      	add	r0, r3
 8011c40:	6120      	str	r0, [r4, #16]
 8011c42:	60a2      	str	r2, [r4, #8]
 8011c44:	4620      	mov	r0, r4
 8011c46:	2108      	movs	r1, #8
 8011c48:	f000 fa08 	bl	801205c <ucdr_check_final_buffer_behavior>
 8011c4c:	b350      	cbz	r0, 8011ca4 <ucdr_serialize_uint64_t+0x7c>
 8011c4e:	7d23      	ldrb	r3, [r4, #20]
 8011c50:	2b01      	cmp	r3, #1
 8011c52:	d02c      	beq.n	8011cae <ucdr_serialize_uint64_t+0x86>
 8011c54:	68a3      	ldr	r3, [r4, #8]
 8011c56:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011c5a:	701a      	strb	r2, [r3, #0]
 8011c5c:	68a3      	ldr	r3, [r4, #8]
 8011c5e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011c62:	705a      	strb	r2, [r3, #1]
 8011c64:	68a3      	ldr	r3, [r4, #8]
 8011c66:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011c6a:	709a      	strb	r2, [r3, #2]
 8011c6c:	68a3      	ldr	r3, [r4, #8]
 8011c6e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011c72:	70da      	strb	r2, [r3, #3]
 8011c74:	68a3      	ldr	r3, [r4, #8]
 8011c76:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011c7a:	711a      	strb	r2, [r3, #4]
 8011c7c:	68a3      	ldr	r3, [r4, #8]
 8011c7e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011c82:	715a      	strb	r2, [r3, #5]
 8011c84:	68a3      	ldr	r3, [r4, #8]
 8011c86:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011c8a:	719a      	strb	r2, [r3, #6]
 8011c8c:	68a3      	ldr	r3, [r4, #8]
 8011c8e:	f89d 2000 	ldrb.w	r2, [sp]
 8011c92:	71da      	strb	r2, [r3, #7]
 8011c94:	68a2      	ldr	r2, [r4, #8]
 8011c96:	6923      	ldr	r3, [r4, #16]
 8011c98:	3208      	adds	r2, #8
 8011c9a:	3308      	adds	r3, #8
 8011c9c:	2108      	movs	r1, #8
 8011c9e:	60a2      	str	r2, [r4, #8]
 8011ca0:	6123      	str	r3, [r4, #16]
 8011ca2:	7561      	strb	r1, [r4, #21]
 8011ca4:	7da0      	ldrb	r0, [r4, #22]
 8011ca6:	f080 0001 	eor.w	r0, r0, #1
 8011caa:	b002      	add	sp, #8
 8011cac:	bd10      	pop	{r4, pc}
 8011cae:	466b      	mov	r3, sp
 8011cb0:	cb03      	ldmia	r3!, {r0, r1}
 8011cb2:	68a3      	ldr	r3, [r4, #8]
 8011cb4:	6018      	str	r0, [r3, #0]
 8011cb6:	6059      	str	r1, [r3, #4]
 8011cb8:	e7ec      	b.n	8011c94 <ucdr_serialize_uint64_t+0x6c>
 8011cba:	bf00      	nop

08011cbc <ucdr_serialize_int8_t>:
 8011cbc:	b538      	push	{r3, r4, r5, lr}
 8011cbe:	460d      	mov	r5, r1
 8011cc0:	2101      	movs	r1, #1
 8011cc2:	4604      	mov	r4, r0
 8011cc4:	f000 f9ca 	bl	801205c <ucdr_check_final_buffer_behavior>
 8011cc8:	b148      	cbz	r0, 8011cde <ucdr_serialize_int8_t+0x22>
 8011cca:	68a3      	ldr	r3, [r4, #8]
 8011ccc:	701d      	strb	r5, [r3, #0]
 8011cce:	68a2      	ldr	r2, [r4, #8]
 8011cd0:	6923      	ldr	r3, [r4, #16]
 8011cd2:	3201      	adds	r2, #1
 8011cd4:	3301      	adds	r3, #1
 8011cd6:	2101      	movs	r1, #1
 8011cd8:	60a2      	str	r2, [r4, #8]
 8011cda:	6123      	str	r3, [r4, #16]
 8011cdc:	7561      	strb	r1, [r4, #21]
 8011cde:	7da0      	ldrb	r0, [r4, #22]
 8011ce0:	f080 0001 	eor.w	r0, r0, #1
 8011ce4:	bd38      	pop	{r3, r4, r5, pc}
 8011ce6:	bf00      	nop

08011ce8 <ucdr_deserialize_int8_t>:
 8011ce8:	b538      	push	{r3, r4, r5, lr}
 8011cea:	460d      	mov	r5, r1
 8011cec:	2101      	movs	r1, #1
 8011cee:	4604      	mov	r4, r0
 8011cf0:	f000 f9b4 	bl	801205c <ucdr_check_final_buffer_behavior>
 8011cf4:	b150      	cbz	r0, 8011d0c <ucdr_deserialize_int8_t+0x24>
 8011cf6:	68a3      	ldr	r3, [r4, #8]
 8011cf8:	781b      	ldrb	r3, [r3, #0]
 8011cfa:	702b      	strb	r3, [r5, #0]
 8011cfc:	68a2      	ldr	r2, [r4, #8]
 8011cfe:	6923      	ldr	r3, [r4, #16]
 8011d00:	3201      	adds	r2, #1
 8011d02:	3301      	adds	r3, #1
 8011d04:	2101      	movs	r1, #1
 8011d06:	60a2      	str	r2, [r4, #8]
 8011d08:	6123      	str	r3, [r4, #16]
 8011d0a:	7561      	strb	r1, [r4, #21]
 8011d0c:	7da0      	ldrb	r0, [r4, #22]
 8011d0e:	f080 0001 	eor.w	r0, r0, #1
 8011d12:	bd38      	pop	{r3, r4, r5, pc}

08011d14 <ucdr_serialize_int16_t>:
 8011d14:	b538      	push	{r3, r4, r5, lr}
 8011d16:	4604      	mov	r4, r0
 8011d18:	460d      	mov	r5, r1
 8011d1a:	2102      	movs	r1, #2
 8011d1c:	f000 f9f0 	bl	8012100 <ucdr_buffer_alignment>
 8011d20:	68a2      	ldr	r2, [r4, #8]
 8011d22:	6923      	ldr	r3, [r4, #16]
 8011d24:	4402      	add	r2, r0
 8011d26:	4418      	add	r0, r3
 8011d28:	6120      	str	r0, [r4, #16]
 8011d2a:	60a2      	str	r2, [r4, #8]
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	2102      	movs	r1, #2
 8011d30:	f000 f994 	bl	801205c <ucdr_check_final_buffer_behavior>
 8011d34:	b180      	cbz	r0, 8011d58 <ucdr_serialize_int16_t+0x44>
 8011d36:	7d23      	ldrb	r3, [r4, #20]
 8011d38:	2b01      	cmp	r3, #1
 8011d3a:	68a3      	ldr	r3, [r4, #8]
 8011d3c:	d010      	beq.n	8011d60 <ucdr_serialize_int16_t+0x4c>
 8011d3e:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8011d42:	701a      	strb	r2, [r3, #0]
 8011d44:	68a3      	ldr	r3, [r4, #8]
 8011d46:	705d      	strb	r5, [r3, #1]
 8011d48:	68a2      	ldr	r2, [r4, #8]
 8011d4a:	6923      	ldr	r3, [r4, #16]
 8011d4c:	3202      	adds	r2, #2
 8011d4e:	3302      	adds	r3, #2
 8011d50:	2102      	movs	r1, #2
 8011d52:	60a2      	str	r2, [r4, #8]
 8011d54:	6123      	str	r3, [r4, #16]
 8011d56:	7561      	strb	r1, [r4, #21]
 8011d58:	7da0      	ldrb	r0, [r4, #22]
 8011d5a:	f080 0001 	eor.w	r0, r0, #1
 8011d5e:	bd38      	pop	{r3, r4, r5, pc}
 8011d60:	801d      	strh	r5, [r3, #0]
 8011d62:	e7f1      	b.n	8011d48 <ucdr_serialize_int16_t+0x34>

08011d64 <ucdr_serialize_int32_t>:
 8011d64:	b538      	push	{r3, r4, r5, lr}
 8011d66:	4604      	mov	r4, r0
 8011d68:	460d      	mov	r5, r1
 8011d6a:	2104      	movs	r1, #4
 8011d6c:	f000 f9c8 	bl	8012100 <ucdr_buffer_alignment>
 8011d70:	68a2      	ldr	r2, [r4, #8]
 8011d72:	6923      	ldr	r3, [r4, #16]
 8011d74:	4402      	add	r2, r0
 8011d76:	4418      	add	r0, r3
 8011d78:	6120      	str	r0, [r4, #16]
 8011d7a:	60a2      	str	r2, [r4, #8]
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	2104      	movs	r1, #4
 8011d80:	f000 f96c 	bl	801205c <ucdr_check_final_buffer_behavior>
 8011d84:	b1c0      	cbz	r0, 8011db8 <ucdr_serialize_int32_t+0x54>
 8011d86:	7d23      	ldrb	r3, [r4, #20]
 8011d88:	2b01      	cmp	r3, #1
 8011d8a:	68a3      	ldr	r3, [r4, #8]
 8011d8c:	d018      	beq.n	8011dc0 <ucdr_serialize_int32_t+0x5c>
 8011d8e:	f3c5 6207 	ubfx	r2, r5, #24, #8
 8011d92:	701a      	strb	r2, [r3, #0]
 8011d94:	68a3      	ldr	r3, [r4, #8]
 8011d96:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8011d9a:	705a      	strb	r2, [r3, #1]
 8011d9c:	68a3      	ldr	r3, [r4, #8]
 8011d9e:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8011da2:	709a      	strb	r2, [r3, #2]
 8011da4:	68a3      	ldr	r3, [r4, #8]
 8011da6:	70dd      	strb	r5, [r3, #3]
 8011da8:	68a2      	ldr	r2, [r4, #8]
 8011daa:	6923      	ldr	r3, [r4, #16]
 8011dac:	3204      	adds	r2, #4
 8011dae:	3304      	adds	r3, #4
 8011db0:	2104      	movs	r1, #4
 8011db2:	60a2      	str	r2, [r4, #8]
 8011db4:	6123      	str	r3, [r4, #16]
 8011db6:	7561      	strb	r1, [r4, #21]
 8011db8:	7da0      	ldrb	r0, [r4, #22]
 8011dba:	f080 0001 	eor.w	r0, r0, #1
 8011dbe:	bd38      	pop	{r3, r4, r5, pc}
 8011dc0:	601d      	str	r5, [r3, #0]
 8011dc2:	e7f1      	b.n	8011da8 <ucdr_serialize_int32_t+0x44>

08011dc4 <ucdr_deserialize_int32_t>:
 8011dc4:	b538      	push	{r3, r4, r5, lr}
 8011dc6:	4604      	mov	r4, r0
 8011dc8:	460d      	mov	r5, r1
 8011dca:	2104      	movs	r1, #4
 8011dcc:	f000 f998 	bl	8012100 <ucdr_buffer_alignment>
 8011dd0:	68a2      	ldr	r2, [r4, #8]
 8011dd2:	6923      	ldr	r3, [r4, #16]
 8011dd4:	4402      	add	r2, r0
 8011dd6:	4418      	add	r0, r3
 8011dd8:	6120      	str	r0, [r4, #16]
 8011dda:	60a2      	str	r2, [r4, #8]
 8011ddc:	4620      	mov	r0, r4
 8011dde:	2104      	movs	r1, #4
 8011de0:	f000 f93c 	bl	801205c <ucdr_check_final_buffer_behavior>
 8011de4:	b1b0      	cbz	r0, 8011e14 <ucdr_deserialize_int32_t+0x50>
 8011de6:	7d23      	ldrb	r3, [r4, #20]
 8011de8:	2b01      	cmp	r3, #1
 8011dea:	68a3      	ldr	r3, [r4, #8]
 8011dec:	d016      	beq.n	8011e1c <ucdr_deserialize_int32_t+0x58>
 8011dee:	78db      	ldrb	r3, [r3, #3]
 8011df0:	702b      	strb	r3, [r5, #0]
 8011df2:	68a3      	ldr	r3, [r4, #8]
 8011df4:	789b      	ldrb	r3, [r3, #2]
 8011df6:	706b      	strb	r3, [r5, #1]
 8011df8:	68a3      	ldr	r3, [r4, #8]
 8011dfa:	785b      	ldrb	r3, [r3, #1]
 8011dfc:	70ab      	strb	r3, [r5, #2]
 8011dfe:	68a3      	ldr	r3, [r4, #8]
 8011e00:	781b      	ldrb	r3, [r3, #0]
 8011e02:	70eb      	strb	r3, [r5, #3]
 8011e04:	68a2      	ldr	r2, [r4, #8]
 8011e06:	6923      	ldr	r3, [r4, #16]
 8011e08:	3204      	adds	r2, #4
 8011e0a:	3304      	adds	r3, #4
 8011e0c:	2104      	movs	r1, #4
 8011e0e:	60a2      	str	r2, [r4, #8]
 8011e10:	6123      	str	r3, [r4, #16]
 8011e12:	7561      	strb	r1, [r4, #21]
 8011e14:	7da0      	ldrb	r0, [r4, #22]
 8011e16:	f080 0001 	eor.w	r0, r0, #1
 8011e1a:	bd38      	pop	{r3, r4, r5, pc}
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	602b      	str	r3, [r5, #0]
 8011e20:	e7f0      	b.n	8011e04 <ucdr_deserialize_int32_t+0x40>
 8011e22:	bf00      	nop

08011e24 <ucdr_serialize_double>:
 8011e24:	b510      	push	{r4, lr}
 8011e26:	2108      	movs	r1, #8
 8011e28:	4604      	mov	r4, r0
 8011e2a:	b082      	sub	sp, #8
 8011e2c:	ed8d 0b00 	vstr	d0, [sp]
 8011e30:	f000 f966 	bl	8012100 <ucdr_buffer_alignment>
 8011e34:	68a2      	ldr	r2, [r4, #8]
 8011e36:	6923      	ldr	r3, [r4, #16]
 8011e38:	4402      	add	r2, r0
 8011e3a:	4418      	add	r0, r3
 8011e3c:	6120      	str	r0, [r4, #16]
 8011e3e:	60a2      	str	r2, [r4, #8]
 8011e40:	4620      	mov	r0, r4
 8011e42:	2108      	movs	r1, #8
 8011e44:	f000 f90a 	bl	801205c <ucdr_check_final_buffer_behavior>
 8011e48:	b350      	cbz	r0, 8011ea0 <ucdr_serialize_double+0x7c>
 8011e4a:	7d23      	ldrb	r3, [r4, #20]
 8011e4c:	2b01      	cmp	r3, #1
 8011e4e:	d02c      	beq.n	8011eaa <ucdr_serialize_double+0x86>
 8011e50:	68a3      	ldr	r3, [r4, #8]
 8011e52:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011e56:	701a      	strb	r2, [r3, #0]
 8011e58:	68a3      	ldr	r3, [r4, #8]
 8011e5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011e5e:	705a      	strb	r2, [r3, #1]
 8011e60:	68a3      	ldr	r3, [r4, #8]
 8011e62:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011e66:	709a      	strb	r2, [r3, #2]
 8011e68:	68a3      	ldr	r3, [r4, #8]
 8011e6a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011e6e:	70da      	strb	r2, [r3, #3]
 8011e70:	68a3      	ldr	r3, [r4, #8]
 8011e72:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011e76:	711a      	strb	r2, [r3, #4]
 8011e78:	68a3      	ldr	r3, [r4, #8]
 8011e7a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011e7e:	715a      	strb	r2, [r3, #5]
 8011e80:	68a3      	ldr	r3, [r4, #8]
 8011e82:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011e86:	719a      	strb	r2, [r3, #6]
 8011e88:	68a3      	ldr	r3, [r4, #8]
 8011e8a:	f89d 2000 	ldrb.w	r2, [sp]
 8011e8e:	71da      	strb	r2, [r3, #7]
 8011e90:	68a2      	ldr	r2, [r4, #8]
 8011e92:	6923      	ldr	r3, [r4, #16]
 8011e94:	3208      	adds	r2, #8
 8011e96:	3308      	adds	r3, #8
 8011e98:	2108      	movs	r1, #8
 8011e9a:	60a2      	str	r2, [r4, #8]
 8011e9c:	6123      	str	r3, [r4, #16]
 8011e9e:	7561      	strb	r1, [r4, #21]
 8011ea0:	7da0      	ldrb	r0, [r4, #22]
 8011ea2:	f080 0001 	eor.w	r0, r0, #1
 8011ea6:	b002      	add	sp, #8
 8011ea8:	bd10      	pop	{r4, pc}
 8011eaa:	466b      	mov	r3, sp
 8011eac:	cb03      	ldmia	r3!, {r0, r1}
 8011eae:	68a3      	ldr	r3, [r4, #8]
 8011eb0:	6018      	str	r0, [r3, #0]
 8011eb2:	6059      	str	r1, [r3, #4]
 8011eb4:	e7ec      	b.n	8011e90 <ucdr_serialize_double+0x6c>
 8011eb6:	bf00      	nop

08011eb8 <ucdr_serialize_endian_double>:
 8011eb8:	b530      	push	{r4, r5, lr}
 8011eba:	4604      	mov	r4, r0
 8011ebc:	b083      	sub	sp, #12
 8011ebe:	460d      	mov	r5, r1
 8011ec0:	2108      	movs	r1, #8
 8011ec2:	ed8d 0b00 	vstr	d0, [sp]
 8011ec6:	f000 f91b 	bl	8012100 <ucdr_buffer_alignment>
 8011eca:	68a2      	ldr	r2, [r4, #8]
 8011ecc:	6923      	ldr	r3, [r4, #16]
 8011ece:	4402      	add	r2, r0
 8011ed0:	4418      	add	r0, r3
 8011ed2:	6120      	str	r0, [r4, #16]
 8011ed4:	60a2      	str	r2, [r4, #8]
 8011ed6:	4620      	mov	r0, r4
 8011ed8:	2108      	movs	r1, #8
 8011eda:	f000 f8bf 	bl	801205c <ucdr_check_final_buffer_behavior>
 8011ede:	b348      	cbz	r0, 8011f34 <ucdr_serialize_endian_double+0x7c>
 8011ee0:	2d01      	cmp	r5, #1
 8011ee2:	d02c      	beq.n	8011f3e <ucdr_serialize_endian_double+0x86>
 8011ee4:	68a3      	ldr	r3, [r4, #8]
 8011ee6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011eea:	701a      	strb	r2, [r3, #0]
 8011eec:	68a3      	ldr	r3, [r4, #8]
 8011eee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011ef2:	705a      	strb	r2, [r3, #1]
 8011ef4:	68a3      	ldr	r3, [r4, #8]
 8011ef6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011efa:	709a      	strb	r2, [r3, #2]
 8011efc:	68a3      	ldr	r3, [r4, #8]
 8011efe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011f02:	70da      	strb	r2, [r3, #3]
 8011f04:	68a3      	ldr	r3, [r4, #8]
 8011f06:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011f0a:	711a      	strb	r2, [r3, #4]
 8011f0c:	68a3      	ldr	r3, [r4, #8]
 8011f0e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011f12:	715a      	strb	r2, [r3, #5]
 8011f14:	68a3      	ldr	r3, [r4, #8]
 8011f16:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011f1a:	719a      	strb	r2, [r3, #6]
 8011f1c:	68a3      	ldr	r3, [r4, #8]
 8011f1e:	f89d 2000 	ldrb.w	r2, [sp]
 8011f22:	71da      	strb	r2, [r3, #7]
 8011f24:	68a2      	ldr	r2, [r4, #8]
 8011f26:	6923      	ldr	r3, [r4, #16]
 8011f28:	3208      	adds	r2, #8
 8011f2a:	3308      	adds	r3, #8
 8011f2c:	2108      	movs	r1, #8
 8011f2e:	60a2      	str	r2, [r4, #8]
 8011f30:	6123      	str	r3, [r4, #16]
 8011f32:	7561      	strb	r1, [r4, #21]
 8011f34:	7da0      	ldrb	r0, [r4, #22]
 8011f36:	f080 0001 	eor.w	r0, r0, #1
 8011f3a:	b003      	add	sp, #12
 8011f3c:	bd30      	pop	{r4, r5, pc}
 8011f3e:	466b      	mov	r3, sp
 8011f40:	cb03      	ldmia	r3!, {r0, r1}
 8011f42:	68a3      	ldr	r3, [r4, #8]
 8011f44:	6018      	str	r0, [r3, #0]
 8011f46:	6059      	str	r1, [r3, #4]
 8011f48:	e7ec      	b.n	8011f24 <ucdr_serialize_endian_double+0x6c>
 8011f4a:	bf00      	nop

08011f4c <ucdr_deserialize_double>:
 8011f4c:	b538      	push	{r3, r4, r5, lr}
 8011f4e:	4604      	mov	r4, r0
 8011f50:	460d      	mov	r5, r1
 8011f52:	2108      	movs	r1, #8
 8011f54:	f000 f8d4 	bl	8012100 <ucdr_buffer_alignment>
 8011f58:	68a2      	ldr	r2, [r4, #8]
 8011f5a:	6923      	ldr	r3, [r4, #16]
 8011f5c:	4402      	add	r2, r0
 8011f5e:	4418      	add	r0, r3
 8011f60:	6120      	str	r0, [r4, #16]
 8011f62:	60a2      	str	r2, [r4, #8]
 8011f64:	4620      	mov	r0, r4
 8011f66:	2108      	movs	r1, #8
 8011f68:	f000 f878 	bl	801205c <ucdr_check_final_buffer_behavior>
 8011f6c:	b310      	cbz	r0, 8011fb4 <ucdr_deserialize_double+0x68>
 8011f6e:	7d23      	ldrb	r3, [r4, #20]
 8011f70:	2b01      	cmp	r3, #1
 8011f72:	68a3      	ldr	r3, [r4, #8]
 8011f74:	d022      	beq.n	8011fbc <ucdr_deserialize_double+0x70>
 8011f76:	79db      	ldrb	r3, [r3, #7]
 8011f78:	702b      	strb	r3, [r5, #0]
 8011f7a:	68a3      	ldr	r3, [r4, #8]
 8011f7c:	799b      	ldrb	r3, [r3, #6]
 8011f7e:	706b      	strb	r3, [r5, #1]
 8011f80:	68a3      	ldr	r3, [r4, #8]
 8011f82:	795b      	ldrb	r3, [r3, #5]
 8011f84:	70ab      	strb	r3, [r5, #2]
 8011f86:	68a3      	ldr	r3, [r4, #8]
 8011f88:	791b      	ldrb	r3, [r3, #4]
 8011f8a:	70eb      	strb	r3, [r5, #3]
 8011f8c:	68a3      	ldr	r3, [r4, #8]
 8011f8e:	78db      	ldrb	r3, [r3, #3]
 8011f90:	712b      	strb	r3, [r5, #4]
 8011f92:	68a3      	ldr	r3, [r4, #8]
 8011f94:	789b      	ldrb	r3, [r3, #2]
 8011f96:	716b      	strb	r3, [r5, #5]
 8011f98:	68a3      	ldr	r3, [r4, #8]
 8011f9a:	785b      	ldrb	r3, [r3, #1]
 8011f9c:	71ab      	strb	r3, [r5, #6]
 8011f9e:	68a3      	ldr	r3, [r4, #8]
 8011fa0:	781b      	ldrb	r3, [r3, #0]
 8011fa2:	71eb      	strb	r3, [r5, #7]
 8011fa4:	68a2      	ldr	r2, [r4, #8]
 8011fa6:	6923      	ldr	r3, [r4, #16]
 8011fa8:	3208      	adds	r2, #8
 8011faa:	3308      	adds	r3, #8
 8011fac:	2108      	movs	r1, #8
 8011fae:	60a2      	str	r2, [r4, #8]
 8011fb0:	6123      	str	r3, [r4, #16]
 8011fb2:	7561      	strb	r1, [r4, #21]
 8011fb4:	7da0      	ldrb	r0, [r4, #22]
 8011fb6:	f080 0001 	eor.w	r0, r0, #1
 8011fba:	bd38      	pop	{r3, r4, r5, pc}
 8011fbc:	681a      	ldr	r2, [r3, #0]
 8011fbe:	685b      	ldr	r3, [r3, #4]
 8011fc0:	606b      	str	r3, [r5, #4]
 8011fc2:	602a      	str	r2, [r5, #0]
 8011fc4:	e7ee      	b.n	8011fa4 <ucdr_deserialize_double+0x58>
 8011fc6:	bf00      	nop

08011fc8 <ucdr_deserialize_endian_double>:
 8011fc8:	b570      	push	{r4, r5, r6, lr}
 8011fca:	4604      	mov	r4, r0
 8011fcc:	460e      	mov	r6, r1
 8011fce:	2108      	movs	r1, #8
 8011fd0:	4615      	mov	r5, r2
 8011fd2:	f000 f895 	bl	8012100 <ucdr_buffer_alignment>
 8011fd6:	68a2      	ldr	r2, [r4, #8]
 8011fd8:	6923      	ldr	r3, [r4, #16]
 8011fda:	4402      	add	r2, r0
 8011fdc:	4418      	add	r0, r3
 8011fde:	6120      	str	r0, [r4, #16]
 8011fe0:	60a2      	str	r2, [r4, #8]
 8011fe2:	4620      	mov	r0, r4
 8011fe4:	2108      	movs	r1, #8
 8011fe6:	f000 f839 	bl	801205c <ucdr_check_final_buffer_behavior>
 8011fea:	b308      	cbz	r0, 8012030 <ucdr_deserialize_endian_double+0x68>
 8011fec:	2e01      	cmp	r6, #1
 8011fee:	68a3      	ldr	r3, [r4, #8]
 8011ff0:	d022      	beq.n	8012038 <ucdr_deserialize_endian_double+0x70>
 8011ff2:	79db      	ldrb	r3, [r3, #7]
 8011ff4:	702b      	strb	r3, [r5, #0]
 8011ff6:	68a3      	ldr	r3, [r4, #8]
 8011ff8:	799b      	ldrb	r3, [r3, #6]
 8011ffa:	706b      	strb	r3, [r5, #1]
 8011ffc:	68a3      	ldr	r3, [r4, #8]
 8011ffe:	795b      	ldrb	r3, [r3, #5]
 8012000:	70ab      	strb	r3, [r5, #2]
 8012002:	68a3      	ldr	r3, [r4, #8]
 8012004:	791b      	ldrb	r3, [r3, #4]
 8012006:	70eb      	strb	r3, [r5, #3]
 8012008:	68a3      	ldr	r3, [r4, #8]
 801200a:	78db      	ldrb	r3, [r3, #3]
 801200c:	712b      	strb	r3, [r5, #4]
 801200e:	68a3      	ldr	r3, [r4, #8]
 8012010:	789b      	ldrb	r3, [r3, #2]
 8012012:	716b      	strb	r3, [r5, #5]
 8012014:	68a3      	ldr	r3, [r4, #8]
 8012016:	785b      	ldrb	r3, [r3, #1]
 8012018:	71ab      	strb	r3, [r5, #6]
 801201a:	68a3      	ldr	r3, [r4, #8]
 801201c:	781b      	ldrb	r3, [r3, #0]
 801201e:	71eb      	strb	r3, [r5, #7]
 8012020:	68a2      	ldr	r2, [r4, #8]
 8012022:	6923      	ldr	r3, [r4, #16]
 8012024:	3208      	adds	r2, #8
 8012026:	3308      	adds	r3, #8
 8012028:	2108      	movs	r1, #8
 801202a:	60a2      	str	r2, [r4, #8]
 801202c:	6123      	str	r3, [r4, #16]
 801202e:	7561      	strb	r1, [r4, #21]
 8012030:	7da0      	ldrb	r0, [r4, #22]
 8012032:	f080 0001 	eor.w	r0, r0, #1
 8012036:	bd70      	pop	{r4, r5, r6, pc}
 8012038:	681a      	ldr	r2, [r3, #0]
 801203a:	685b      	ldr	r3, [r3, #4]
 801203c:	606b      	str	r3, [r5, #4]
 801203e:	602a      	str	r2, [r5, #0]
 8012040:	e7ee      	b.n	8012020 <ucdr_deserialize_endian_double+0x58>
 8012042:	bf00      	nop

08012044 <ucdr_check_buffer_available_for>:
 8012044:	7d83      	ldrb	r3, [r0, #22]
 8012046:	b93b      	cbnz	r3, 8012058 <ucdr_check_buffer_available_for+0x14>
 8012048:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 801204c:	4419      	add	r1, r3
 801204e:	4288      	cmp	r0, r1
 8012050:	bf34      	ite	cc
 8012052:	2000      	movcc	r0, #0
 8012054:	2001      	movcs	r0, #1
 8012056:	4770      	bx	lr
 8012058:	2000      	movs	r0, #0
 801205a:	4770      	bx	lr

0801205c <ucdr_check_final_buffer_behavior>:
 801205c:	b538      	push	{r3, r4, r5, lr}
 801205e:	7d83      	ldrb	r3, [r0, #22]
 8012060:	b97b      	cbnz	r3, 8012082 <ucdr_check_final_buffer_behavior+0x26>
 8012062:	e9d0 5201 	ldrd	r5, r2, [r0, #4]
 8012066:	4411      	add	r1, r2
 8012068:	428d      	cmp	r5, r1
 801206a:	4604      	mov	r4, r0
 801206c:	d20c      	bcs.n	8012088 <ucdr_check_final_buffer_behavior+0x2c>
 801206e:	6982      	ldr	r2, [r0, #24]
 8012070:	b16a      	cbz	r2, 801208e <ucdr_check_final_buffer_behavior+0x32>
 8012072:	69c1      	ldr	r1, [r0, #28]
 8012074:	4790      	blx	r2
 8012076:	f080 0301 	eor.w	r3, r0, #1
 801207a:	b2db      	uxtb	r3, r3
 801207c:	75a0      	strb	r0, [r4, #22]
 801207e:	4618      	mov	r0, r3
 8012080:	bd38      	pop	{r3, r4, r5, pc}
 8012082:	2300      	movs	r3, #0
 8012084:	4618      	mov	r0, r3
 8012086:	bd38      	pop	{r3, r4, r5, pc}
 8012088:	2301      	movs	r3, #1
 801208a:	4618      	mov	r0, r3
 801208c:	bd38      	pop	{r3, r4, r5, pc}
 801208e:	2001      	movs	r0, #1
 8012090:	75a0      	strb	r0, [r4, #22]
 8012092:	e7f4      	b.n	801207e <ucdr_check_final_buffer_behavior+0x22>

08012094 <ucdr_set_on_full_buffer_callback>:
 8012094:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8012098:	4770      	bx	lr
 801209a:	bf00      	nop

0801209c <ucdr_init_buffer_origin_offset_endian>:
 801209c:	b430      	push	{r4, r5}
 801209e:	9c02      	ldr	r4, [sp, #8]
 80120a0:	f89d 500c 	ldrb.w	r5, [sp, #12]
 80120a4:	6001      	str	r1, [r0, #0]
 80120a6:	440a      	add	r2, r1
 80120a8:	60c3      	str	r3, [r0, #12]
 80120aa:	4421      	add	r1, r4
 80120ac:	441c      	add	r4, r3
 80120ae:	2300      	movs	r3, #0
 80120b0:	6104      	str	r4, [r0, #16]
 80120b2:	7505      	strb	r5, [r0, #20]
 80120b4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80120b8:	bc30      	pop	{r4, r5}
 80120ba:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80120be:	7543      	strb	r3, [r0, #21]
 80120c0:	7583      	strb	r3, [r0, #22]
 80120c2:	4770      	bx	lr

080120c4 <ucdr_init_buffer_origin_offset>:
 80120c4:	b510      	push	{r4, lr}
 80120c6:	b082      	sub	sp, #8
 80120c8:	9c04      	ldr	r4, [sp, #16]
 80120ca:	9400      	str	r4, [sp, #0]
 80120cc:	2401      	movs	r4, #1
 80120ce:	9401      	str	r4, [sp, #4]
 80120d0:	f7ff ffe4 	bl	801209c <ucdr_init_buffer_origin_offset_endian>
 80120d4:	b002      	add	sp, #8
 80120d6:	bd10      	pop	{r4, pc}

080120d8 <ucdr_init_buffer_origin>:
 80120d8:	b510      	push	{r4, lr}
 80120da:	b082      	sub	sp, #8
 80120dc:	2400      	movs	r4, #0
 80120de:	9400      	str	r4, [sp, #0]
 80120e0:	f7ff fff0 	bl	80120c4 <ucdr_init_buffer_origin_offset>
 80120e4:	b002      	add	sp, #8
 80120e6:	bd10      	pop	{r4, pc}

080120e8 <ucdr_init_buffer>:
 80120e8:	2300      	movs	r3, #0
 80120ea:	f7ff bff5 	b.w	80120d8 <ucdr_init_buffer_origin>
 80120ee:	bf00      	nop

080120f0 <ucdr_alignment>:
 80120f0:	fbb0 f3f1 	udiv	r3, r0, r1
 80120f4:	fb03 0011 	mls	r0, r3, r1, r0
 80120f8:	1a08      	subs	r0, r1, r0
 80120fa:	3901      	subs	r1, #1
 80120fc:	4008      	ands	r0, r1
 80120fe:	4770      	bx	lr

08012100 <ucdr_buffer_alignment>:
 8012100:	7d43      	ldrb	r3, [r0, #21]
 8012102:	428b      	cmp	r3, r1
 8012104:	d20a      	bcs.n	801211c <ucdr_buffer_alignment+0x1c>
 8012106:	e9d0 0303 	ldrd	r0, r3, [r0, #12]
 801210a:	1a1b      	subs	r3, r3, r0
 801210c:	fbb3 f0f1 	udiv	r0, r3, r1
 8012110:	fb01 3010 	mls	r0, r1, r0, r3
 8012114:	1a08      	subs	r0, r1, r0
 8012116:	3901      	subs	r1, #1
 8012118:	4008      	ands	r0, r1
 801211a:	4770      	bx	lr
 801211c:	2000      	movs	r0, #0
 801211e:	4770      	bx	lr

08012120 <ucdr_align_to>:
 8012120:	b570      	push	{r4, r5, r6, lr}
 8012122:	4604      	mov	r4, r0
 8012124:	460e      	mov	r6, r1
 8012126:	f7ff ffeb 	bl	8012100 <ucdr_buffer_alignment>
 801212a:	68a5      	ldr	r5, [r4, #8]
 801212c:	6863      	ldr	r3, [r4, #4]
 801212e:	6922      	ldr	r2, [r4, #16]
 8012130:	7566      	strb	r6, [r4, #21]
 8012132:	4405      	add	r5, r0
 8012134:	42ab      	cmp	r3, r5
 8012136:	4410      	add	r0, r2
 8012138:	bf28      	it	cs
 801213a:	462b      	movcs	r3, r5
 801213c:	6120      	str	r0, [r4, #16]
 801213e:	60a3      	str	r3, [r4, #8]
 8012140:	bd70      	pop	{r4, r5, r6, pc}
 8012142:	bf00      	nop

08012144 <ucdr_buffer_length>:
 8012144:	6882      	ldr	r2, [r0, #8]
 8012146:	6800      	ldr	r0, [r0, #0]
 8012148:	1a10      	subs	r0, r2, r0
 801214a:	4770      	bx	lr

0801214c <ucdr_buffer_remaining>:
 801214c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8012150:	1a10      	subs	r0, r2, r0
 8012152:	4770      	bx	lr

08012154 <ucdr_check_final_buffer_behavior_array>:
 8012154:	b538      	push	{r3, r4, r5, lr}
 8012156:	7d83      	ldrb	r3, [r0, #22]
 8012158:	b96b      	cbnz	r3, 8012176 <ucdr_check_final_buffer_behavior_array+0x22>
 801215a:	460d      	mov	r5, r1
 801215c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8012160:	441a      	add	r2, r3
 8012162:	4291      	cmp	r1, r2
 8012164:	4604      	mov	r4, r0
 8012166:	d208      	bcs.n	801217a <ucdr_check_final_buffer_behavior_array+0x26>
 8012168:	b13d      	cbz	r5, 801217a <ucdr_check_final_buffer_behavior_array+0x26>
 801216a:	6983      	ldr	r3, [r0, #24]
 801216c:	b163      	cbz	r3, 8012188 <ucdr_check_final_buffer_behavior_array+0x34>
 801216e:	69c1      	ldr	r1, [r0, #28]
 8012170:	4798      	blx	r3
 8012172:	75a0      	strb	r0, [r4, #22]
 8012174:	b108      	cbz	r0, 801217a <ucdr_check_final_buffer_behavior_array+0x26>
 8012176:	2000      	movs	r0, #0
 8012178:	bd38      	pop	{r3, r4, r5, pc}
 801217a:	4620      	mov	r0, r4
 801217c:	f7ff ffe6 	bl	801214c <ucdr_buffer_remaining>
 8012180:	42a8      	cmp	r0, r5
 8012182:	bf28      	it	cs
 8012184:	4628      	movcs	r0, r5
 8012186:	bd38      	pop	{r3, r4, r5, pc}
 8012188:	2301      	movs	r3, #1
 801218a:	7583      	strb	r3, [r0, #22]
 801218c:	e7f3      	b.n	8012176 <ucdr_check_final_buffer_behavior_array+0x22>
 801218e:	bf00      	nop

08012190 <ucdr_advance_buffer>:
 8012190:	b538      	push	{r3, r4, r5, lr}
 8012192:	4604      	mov	r4, r0
 8012194:	460d      	mov	r5, r1
 8012196:	f7ff ff55 	bl	8012044 <ucdr_check_buffer_available_for>
 801219a:	b178      	cbz	r0, 80121bc <ucdr_advance_buffer+0x2c>
 801219c:	68a3      	ldr	r3, [r4, #8]
 801219e:	6921      	ldr	r1, [r4, #16]
 80121a0:	442b      	add	r3, r5
 80121a2:	60a3      	str	r3, [r4, #8]
 80121a4:	2301      	movs	r3, #1
 80121a6:	4429      	add	r1, r5
 80121a8:	7563      	strb	r3, [r4, #21]
 80121aa:	6121      	str	r1, [r4, #16]
 80121ac:	bd38      	pop	{r3, r4, r5, pc}
 80121ae:	68a2      	ldr	r2, [r4, #8]
 80121b0:	6923      	ldr	r3, [r4, #16]
 80121b2:	4402      	add	r2, r0
 80121b4:	4403      	add	r3, r0
 80121b6:	1a2d      	subs	r5, r5, r0
 80121b8:	60a2      	str	r2, [r4, #8]
 80121ba:	6123      	str	r3, [r4, #16]
 80121bc:	2201      	movs	r2, #1
 80121be:	4629      	mov	r1, r5
 80121c0:	4620      	mov	r0, r4
 80121c2:	f7ff ffc7 	bl	8012154 <ucdr_check_final_buffer_behavior_array>
 80121c6:	2800      	cmp	r0, #0
 80121c8:	d1f1      	bne.n	80121ae <ucdr_advance_buffer+0x1e>
 80121ca:	2301      	movs	r3, #1
 80121cc:	7563      	strb	r3, [r4, #21]
 80121ce:	bd38      	pop	{r3, r4, r5, pc}

080121d0 <ucdr_serialize_sequence_char>:
 80121d0:	b570      	push	{r4, r5, r6, lr}
 80121d2:	460e      	mov	r6, r1
 80121d4:	4615      	mov	r5, r2
 80121d6:	7d01      	ldrb	r1, [r0, #20]
 80121d8:	4604      	mov	r4, r0
 80121da:	f7ff fc95 	bl	8011b08 <ucdr_serialize_endian_uint32_t>
 80121de:	b90d      	cbnz	r5, 80121e4 <ucdr_serialize_sequence_char+0x14>
 80121e0:	2001      	movs	r0, #1
 80121e2:	bd70      	pop	{r4, r5, r6, pc}
 80121e4:	7d21      	ldrb	r1, [r4, #20]
 80121e6:	462b      	mov	r3, r5
 80121e8:	4632      	mov	r2, r6
 80121ea:	4620      	mov	r0, r4
 80121ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121f0:	f7ff b910 	b.w	8011414 <ucdr_serialize_endian_array_char>

080121f4 <ucdr_deserialize_sequence_char>:
 80121f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121f8:	461d      	mov	r5, r3
 80121fa:	4616      	mov	r6, r2
 80121fc:	460f      	mov	r7, r1
 80121fe:	461a      	mov	r2, r3
 8012200:	7d01      	ldrb	r1, [r0, #20]
 8012202:	4604      	mov	r4, r0
 8012204:	f7ff fce0 	bl	8011bc8 <ucdr_deserialize_endian_uint32_t>
 8012208:	682b      	ldr	r3, [r5, #0]
 801220a:	429e      	cmp	r6, r3
 801220c:	bf3c      	itt	cc
 801220e:	2201      	movcc	r2, #1
 8012210:	75a2      	strbcc	r2, [r4, #22]
 8012212:	b913      	cbnz	r3, 801221a <ucdr_deserialize_sequence_char+0x26>
 8012214:	2001      	movs	r0, #1
 8012216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801221a:	7d21      	ldrb	r1, [r4, #20]
 801221c:	463a      	mov	r2, r7
 801221e:	4620      	mov	r0, r4
 8012220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012224:	f7ff b928 	b.w	8011478 <ucdr_deserialize_endian_array_char>

08012228 <ucdr_serialize_sequence_uint8_t>:
 8012228:	b570      	push	{r4, r5, r6, lr}
 801222a:	460e      	mov	r6, r1
 801222c:	4615      	mov	r5, r2
 801222e:	7d01      	ldrb	r1, [r0, #20]
 8012230:	4604      	mov	r4, r0
 8012232:	f7ff fc69 	bl	8011b08 <ucdr_serialize_endian_uint32_t>
 8012236:	b90d      	cbnz	r5, 801223c <ucdr_serialize_sequence_uint8_t+0x14>
 8012238:	2001      	movs	r0, #1
 801223a:	bd70      	pop	{r4, r5, r6, pc}
 801223c:	7d21      	ldrb	r1, [r4, #20]
 801223e:	462b      	mov	r3, r5
 8012240:	4632      	mov	r2, r6
 8012242:	4620      	mov	r0, r4
 8012244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012248:	f7ff b97a 	b.w	8011540 <ucdr_serialize_endian_array_uint8_t>

0801224c <ucdr_serialize_sequence_uint16_t>:
 801224c:	b570      	push	{r4, r5, r6, lr}
 801224e:	460e      	mov	r6, r1
 8012250:	4615      	mov	r5, r2
 8012252:	7d01      	ldrb	r1, [r0, #20]
 8012254:	4604      	mov	r4, r0
 8012256:	f7ff fc57 	bl	8011b08 <ucdr_serialize_endian_uint32_t>
 801225a:	b90d      	cbnz	r5, 8012260 <ucdr_serialize_sequence_uint16_t+0x14>
 801225c:	2001      	movs	r0, #1
 801225e:	bd70      	pop	{r4, r5, r6, pc}
 8012260:	7d21      	ldrb	r1, [r4, #20]
 8012262:	462b      	mov	r3, r5
 8012264:	4632      	mov	r2, r6
 8012266:	4620      	mov	r0, r4
 8012268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801226c:	f7ff b9cc 	b.w	8011608 <ucdr_serialize_endian_array_uint16_t>

08012270 <ucdr_deserialize_sequence_uint16_t>:
 8012270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012274:	461d      	mov	r5, r3
 8012276:	4616      	mov	r6, r2
 8012278:	460f      	mov	r7, r1
 801227a:	461a      	mov	r2, r3
 801227c:	7d01      	ldrb	r1, [r0, #20]
 801227e:	4604      	mov	r4, r0
 8012280:	f7ff fca2 	bl	8011bc8 <ucdr_deserialize_endian_uint32_t>
 8012284:	682b      	ldr	r3, [r5, #0]
 8012286:	429e      	cmp	r6, r3
 8012288:	bf3c      	itt	cc
 801228a:	2201      	movcc	r2, #1
 801228c:	75a2      	strbcc	r2, [r4, #22]
 801228e:	b913      	cbnz	r3, 8012296 <ucdr_deserialize_sequence_uint16_t+0x26>
 8012290:	2001      	movs	r0, #1
 8012292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012296:	7d21      	ldrb	r1, [r4, #20]
 8012298:	463a      	mov	r2, r7
 801229a:	4620      	mov	r0, r4
 801229c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122a0:	f7ff ba06 	b.w	80116b0 <ucdr_deserialize_endian_array_uint16_t>

080122a4 <uxr_buffer_delete_entity>:
 80122a4:	b530      	push	{r4, r5, lr}
 80122a6:	b08f      	sub	sp, #60	; 0x3c
 80122a8:	2403      	movs	r4, #3
 80122aa:	2500      	movs	r5, #0
 80122ac:	e9cd 4500 	strd	r4, r5, [sp]
 80122b0:	9202      	str	r2, [sp, #8]
 80122b2:	ab06      	add	r3, sp, #24
 80122b4:	2204      	movs	r2, #4
 80122b6:	9103      	str	r1, [sp, #12]
 80122b8:	4604      	mov	r4, r0
 80122ba:	f001 f959 	bl	8013570 <uxr_prepare_stream_to_write_submessage>
 80122be:	b918      	cbnz	r0, 80122c8 <uxr_buffer_delete_entity+0x24>
 80122c0:	4604      	mov	r4, r0
 80122c2:	4620      	mov	r0, r4
 80122c4:	b00f      	add	sp, #60	; 0x3c
 80122c6:	bd30      	pop	{r4, r5, pc}
 80122c8:	9902      	ldr	r1, [sp, #8]
 80122ca:	aa05      	add	r2, sp, #20
 80122cc:	4620      	mov	r0, r4
 80122ce:	f001 fa85 	bl	80137dc <uxr_init_base_object_request>
 80122d2:	a905      	add	r1, sp, #20
 80122d4:	4604      	mov	r4, r0
 80122d6:	a806      	add	r0, sp, #24
 80122d8:	f002 fec0 	bl	801505c <uxr_serialize_DELETE_Payload>
 80122dc:	4620      	mov	r0, r4
 80122de:	b00f      	add	sp, #60	; 0x3c
 80122e0:	bd30      	pop	{r4, r5, pc}
 80122e2:	bf00      	nop

080122e4 <uxr_common_create_entity>:
 80122e4:	b530      	push	{r4, r5, lr}
 80122e6:	f3c2 4507 	ubfx	r5, r2, #16, #8
 80122ea:	b08d      	sub	sp, #52	; 0x34
 80122ec:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80122f0:	2d01      	cmp	r5, #1
 80122f2:	bf0c      	ite	eq
 80122f4:	f003 0201 	andeq.w	r2, r3, #1
 80122f8:	2200      	movne	r2, #0
 80122fa:	330e      	adds	r3, #14
 80122fc:	4604      	mov	r4, r0
 80122fe:	441a      	add	r2, r3
 8012300:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8012304:	9001      	str	r0, [sp, #4]
 8012306:	2101      	movs	r1, #1
 8012308:	9100      	str	r1, [sp, #0]
 801230a:	b292      	uxth	r2, r2
 801230c:	9903      	ldr	r1, [sp, #12]
 801230e:	ab04      	add	r3, sp, #16
 8012310:	4620      	mov	r0, r4
 8012312:	f001 f92d 	bl	8013570 <uxr_prepare_stream_to_write_submessage>
 8012316:	b918      	cbnz	r0, 8012320 <uxr_common_create_entity+0x3c>
 8012318:	4604      	mov	r4, r0
 801231a:	4620      	mov	r0, r4
 801231c:	b00d      	add	sp, #52	; 0x34
 801231e:	bd30      	pop	{r4, r5, pc}
 8012320:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012322:	9902      	ldr	r1, [sp, #8]
 8012324:	4620      	mov	r0, r4
 8012326:	f001 fa59 	bl	80137dc <uxr_init_base_object_request>
 801232a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801232c:	4604      	mov	r4, r0
 801232e:	a804      	add	r0, sp, #16
 8012330:	f002 fdfc 	bl	8014f2c <uxr_serialize_CREATE_Payload>
 8012334:	4620      	mov	r0, r4
 8012336:	b00d      	add	sp, #52	; 0x34
 8012338:	bd30      	pop	{r4, r5, pc}
 801233a:	bf00      	nop

0801233c <uxr_buffer_create_participant_bin>:
 801233c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801233e:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8012342:	ac11      	add	r4, sp, #68	; 0x44
 8012344:	9103      	str	r1, [sp, #12]
 8012346:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 8012348:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 801234c:	2103      	movs	r1, #3
 801234e:	7221      	strb	r1, [r4, #8]
 8012350:	2301      	movs	r3, #1
 8012352:	2100      	movs	r1, #0
 8012354:	7123      	strb	r3, [r4, #4]
 8012356:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 801235a:	9202      	str	r2, [sp, #8]
 801235c:	4605      	mov	r5, r0
 801235e:	f88d 1014 	strb.w	r1, [sp, #20]
 8012362:	b1ce      	cbz	r6, 8012398 <uxr_buffer_create_participant_bin+0x5c>
 8012364:	f88d 301c 	strb.w	r3, [sp, #28]
 8012368:	9608      	str	r6, [sp, #32]
 801236a:	a809      	add	r0, sp, #36	; 0x24
 801236c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012370:	a915      	add	r1, sp, #84	; 0x54
 8012372:	f7ff feb9 	bl	80120e8 <ucdr_init_buffer>
 8012376:	a905      	add	r1, sp, #20
 8012378:	a809      	add	r0, sp, #36	; 0x24
 801237a:	f002 fb1f 	bl	80149bc <uxr_serialize_OBJK_DomainParticipant_Binary>
 801237e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8012380:	9401      	str	r4, [sp, #4]
 8012382:	b283      	uxth	r3, r0
 8012384:	9700      	str	r7, [sp, #0]
 8012386:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801238a:	60e0      	str	r0, [r4, #12]
 801238c:	4628      	mov	r0, r5
 801238e:	f7ff ffa9 	bl	80122e4 <uxr_common_create_entity>
 8012392:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 8012396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012398:	f88d 601c 	strb.w	r6, [sp, #28]
 801239c:	e7e5      	b.n	801236a <uxr_buffer_create_participant_bin+0x2e>
 801239e:	bf00      	nop

080123a0 <uxr_buffer_create_topic_bin>:
 80123a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123a2:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80123a6:	ac13      	add	r4, sp, #76	; 0x4c
 80123a8:	4605      	mov	r5, r0
 80123aa:	9105      	str	r1, [sp, #20]
 80123ac:	4618      	mov	r0, r3
 80123ae:	a997      	add	r1, sp, #604	; 0x25c
 80123b0:	2602      	movs	r6, #2
 80123b2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80123b6:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 80123ba:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 80123be:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 80123c0:	f000 fa60 	bl	8012884 <uxr_object_id_to_raw>
 80123c4:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 80123c6:	9206      	str	r2, [sp, #24]
 80123c8:	2303      	movs	r3, #3
 80123ca:	2101      	movs	r1, #1
 80123cc:	7223      	strb	r3, [r4, #8]
 80123ce:	a80b      	add	r0, sp, #44	; 0x2c
 80123d0:	2300      	movs	r3, #0
 80123d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80123d6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80123da:	a917      	add	r1, sp, #92	; 0x5c
 80123dc:	f88d 301c 	strb.w	r3, [sp, #28]
 80123e0:	960a      	str	r6, [sp, #40]	; 0x28
 80123e2:	f7ff fe81 	bl	80120e8 <ucdr_init_buffer>
 80123e6:	a906      	add	r1, sp, #24
 80123e8:	a80b      	add	r0, sp, #44	; 0x2c
 80123ea:	f002 fb09 	bl	8014a00 <uxr_serialize_OBJK_Topic_Binary>
 80123ee:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80123f0:	9401      	str	r4, [sp, #4]
 80123f2:	9700      	str	r7, [sp, #0]
 80123f4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80123f8:	4628      	mov	r0, r5
 80123fa:	b2b3      	uxth	r3, r6
 80123fc:	60e6      	str	r6, [r4, #12]
 80123fe:	f7ff ff71 	bl	80122e4 <uxr_common_create_entity>
 8012402:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8012406:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012408 <uxr_buffer_create_publisher_bin>:
 8012408:	b5f0      	push	{r4, r5, r6, r7, lr}
 801240a:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 801240e:	ac0e      	add	r4, sp, #56	; 0x38
 8012410:	4605      	mov	r5, r0
 8012412:	9105      	str	r1, [sp, #20]
 8012414:	4618      	mov	r0, r3
 8012416:	2603      	movs	r6, #3
 8012418:	a992      	add	r1, sp, #584	; 0x248
 801241a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801241e:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8012422:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8012426:	f000 fa2d 	bl	8012884 <uxr_object_id_to_raw>
 801242a:	2300      	movs	r3, #0
 801242c:	a806      	add	r0, sp, #24
 801242e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012432:	a912      	add	r1, sp, #72	; 0x48
 8012434:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8012438:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 801243c:	7226      	strb	r6, [r4, #8]
 801243e:	f7ff fe53 	bl	80120e8 <ucdr_init_buffer>
 8012442:	a993      	add	r1, sp, #588	; 0x24c
 8012444:	a806      	add	r0, sp, #24
 8012446:	f002 fb8f 	bl	8014b68 <uxr_serialize_OBJK_Publisher_Binary>
 801244a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801244c:	9700      	str	r7, [sp, #0]
 801244e:	9401      	str	r4, [sp, #4]
 8012450:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012454:	4628      	mov	r0, r5
 8012456:	b2b3      	uxth	r3, r6
 8012458:	60e6      	str	r6, [r4, #12]
 801245a:	f7ff ff43 	bl	80122e4 <uxr_common_create_entity>
 801245e:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8012462:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012464 <uxr_buffer_create_subscriber_bin>:
 8012464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012466:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 801246a:	ac0e      	add	r4, sp, #56	; 0x38
 801246c:	4605      	mov	r5, r0
 801246e:	9105      	str	r1, [sp, #20]
 8012470:	4618      	mov	r0, r3
 8012472:	a992      	add	r1, sp, #584	; 0x248
 8012474:	2604      	movs	r6, #4
 8012476:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801247a:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 801247e:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8012482:	f000 f9ff 	bl	8012884 <uxr_object_id_to_raw>
 8012486:	2103      	movs	r1, #3
 8012488:	2300      	movs	r3, #0
 801248a:	a806      	add	r0, sp, #24
 801248c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012490:	7221      	strb	r1, [r4, #8]
 8012492:	a912      	add	r1, sp, #72	; 0x48
 8012494:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8012498:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 801249c:	f7ff fe24 	bl	80120e8 <ucdr_init_buffer>
 80124a0:	a993      	add	r1, sp, #588	; 0x24c
 80124a2:	a806      	add	r0, sp, #24
 80124a4:	f002 fc10 	bl	8014cc8 <uxr_serialize_OBJK_Subscriber_Binary>
 80124a8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80124aa:	9700      	str	r7, [sp, #0]
 80124ac:	9401      	str	r4, [sp, #4]
 80124ae:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80124b2:	4628      	mov	r0, r5
 80124b4:	b2b3      	uxth	r3, r6
 80124b6:	60e6      	str	r6, [r4, #12]
 80124b8:	f7ff ff14 	bl	80122e4 <uxr_common_create_entity>
 80124bc:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 80124c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124c2:	bf00      	nop

080124c4 <uxr_buffer_create_datawriter_bin>:
 80124c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124c8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80124cc:	ac1d      	add	r4, sp, #116	; 0x74
 80124ce:	f8bd 92bc 	ldrh.w	r9, [sp, #700]	; 0x2bc
 80124d2:	9105      	str	r1, [sp, #20]
 80124d4:	2605      	movs	r6, #5
 80124d6:	a9a1      	add	r1, sp, #644	; 0x284
 80124d8:	4605      	mov	r5, r0
 80124da:	4618      	mov	r0, r3
 80124dc:	9204      	str	r2, [sp, #16]
 80124de:	9303      	str	r3, [sp, #12]
 80124e0:	f89d b2b4 	ldrb.w	fp, [sp, #692]	; 0x2b4
 80124e4:	7126      	strb	r6, [r4, #4]
 80124e6:	f89d a2b8 	ldrb.w	sl, [sp, #696]	; 0x2b8
 80124ea:	f89d 62c0 	ldrb.w	r6, [sp, #704]	; 0x2c0
 80124ee:	f89d 82c4 	ldrb.w	r8, [sp, #708]	; 0x2c4
 80124f2:	2703      	movs	r7, #3
 80124f4:	f000 f9c6 	bl	8012884 <uxr_object_id_to_raw>
 80124f8:	a90e      	add	r1, sp, #56	; 0x38
 80124fa:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
 80124fc:	7227      	strb	r7, [r4, #8]
 80124fe:	f000 f9c1 	bl	8012884 <uxr_object_id_to_raw>
 8012502:	f1b9 0100 	subs.w	r1, r9, #0
 8012506:	f04f 0300 	mov.w	r3, #0
 801250a:	bf18      	it	ne
 801250c:	2101      	movne	r1, #1
 801250e:	2201      	movs	r2, #1
 8012510:	f8ad 9044 	strh.w	r9, [sp, #68]	; 0x44
 8012514:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
 8012518:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 801251c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8012520:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8012524:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8012528:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 801252c:	f1bb 0f00 	cmp.w	fp, #0
 8012530:	d131      	bne.n	8012596 <uxr_buffer_create_datawriter_bin+0xd2>
 8012532:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
 8012536:	f04f 0e22 	mov.w	lr, #34	; 0x22
 801253a:	f04f 0c12 	mov.w	ip, #18
 801253e:	200a      	movs	r0, #10
 8012540:	2320      	movs	r3, #32
 8012542:	2210      	movs	r2, #16
 8012544:	2108      	movs	r1, #8
 8012546:	2702      	movs	r7, #2
 8012548:	f1ba 0f00 	cmp.w	sl, #0
 801254c:	d004      	beq.n	8012558 <uxr_buffer_create_datawriter_bin+0x94>
 801254e:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8012552:	4673      	mov	r3, lr
 8012554:	4662      	mov	r2, ip
 8012556:	4601      	mov	r1, r0
 8012558:	2e02      	cmp	r6, #2
 801255a:	d027      	beq.n	80125ac <uxr_buffer_create_datawriter_bin+0xe8>
 801255c:	2e03      	cmp	r6, #3
 801255e:	d02b      	beq.n	80125b8 <uxr_buffer_create_datawriter_bin+0xf4>
 8012560:	2e01      	cmp	r6, #1
 8012562:	d026      	beq.n	80125b2 <uxr_buffer_create_datawriter_bin+0xee>
 8012564:	a806      	add	r0, sp, #24
 8012566:	f44f 7200 	mov.w	r2, #512	; 0x200
 801256a:	a921      	add	r1, sp, #132	; 0x84
 801256c:	f7ff fdbc 	bl	80120e8 <ucdr_init_buffer>
 8012570:	a90e      	add	r1, sp, #56	; 0x38
 8012572:	a806      	add	r0, sp, #24
 8012574:	f002 fc5a 	bl	8014e2c <uxr_serialize_OBJK_DataWriter_Binary>
 8012578:	980a      	ldr	r0, [sp, #40]	; 0x28
 801257a:	9401      	str	r4, [sp, #4]
 801257c:	b283      	uxth	r3, r0
 801257e:	f8cd 8000 	str.w	r8, [sp]
 8012582:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012586:	60e0      	str	r0, [r4, #12]
 8012588:	4628      	mov	r0, r5
 801258a:	f7ff feab 	bl	80122e4 <uxr_common_create_entity>
 801258e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8012592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012596:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801259a:	f04f 0e23 	mov.w	lr, #35	; 0x23
 801259e:	f04f 0c13 	mov.w	ip, #19
 80125a2:	200b      	movs	r0, #11
 80125a4:	2321      	movs	r3, #33	; 0x21
 80125a6:	2211      	movs	r2, #17
 80125a8:	2109      	movs	r1, #9
 80125aa:	e7cd      	b.n	8012548 <uxr_buffer_create_datawriter_bin+0x84>
 80125ac:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80125b0:	e7d8      	b.n	8012564 <uxr_buffer_create_datawriter_bin+0xa0>
 80125b2:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 80125b6:	e7d5      	b.n	8012564 <uxr_buffer_create_datawriter_bin+0xa0>
 80125b8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80125bc:	e7d2      	b.n	8012564 <uxr_buffer_create_datawriter_bin+0xa0>
 80125be:	bf00      	nop

080125c0 <uxr_buffer_create_datareader_bin>:
 80125c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125c4:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 80125c8:	ac1f      	add	r4, sp, #124	; 0x7c
 80125ca:	f8bd 92c4 	ldrh.w	r9, [sp, #708]	; 0x2c4
 80125ce:	9105      	str	r1, [sp, #20]
 80125d0:	2606      	movs	r6, #6
 80125d2:	a9a3      	add	r1, sp, #652	; 0x28c
 80125d4:	4605      	mov	r5, r0
 80125d6:	4618      	mov	r0, r3
 80125d8:	9204      	str	r2, [sp, #16]
 80125da:	9303      	str	r3, [sp, #12]
 80125dc:	f89d b2bc 	ldrb.w	fp, [sp, #700]	; 0x2bc
 80125e0:	7126      	strb	r6, [r4, #4]
 80125e2:	f89d a2c0 	ldrb.w	sl, [sp, #704]	; 0x2c0
 80125e6:	f89d 62c8 	ldrb.w	r6, [sp, #712]	; 0x2c8
 80125ea:	f89d 82cc 	ldrb.w	r8, [sp, #716]	; 0x2cc
 80125ee:	2703      	movs	r7, #3
 80125f0:	f000 f948 	bl	8012884 <uxr_object_id_to_raw>
 80125f4:	a90e      	add	r1, sp, #56	; 0x38
 80125f6:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
 80125f8:	7227      	strb	r7, [r4, #8]
 80125fa:	f000 f943 	bl	8012884 <uxr_object_id_to_raw>
 80125fe:	f1b9 0100 	subs.w	r1, r9, #0
 8012602:	f04f 0300 	mov.w	r3, #0
 8012606:	bf18      	it	ne
 8012608:	2101      	movne	r1, #1
 801260a:	2201      	movs	r2, #1
 801260c:	f8ad 9044 	strh.w	r9, [sp, #68]	; 0x44
 8012610:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
 8012614:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8012618:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 801261c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8012620:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8012624:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8012628:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 801262c:	f1bb 0f00 	cmp.w	fp, #0
 8012630:	d131      	bne.n	8012696 <uxr_buffer_create_datareader_bin+0xd6>
 8012632:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
 8012636:	f04f 0e22 	mov.w	lr, #34	; 0x22
 801263a:	f04f 0c12 	mov.w	ip, #18
 801263e:	200a      	movs	r0, #10
 8012640:	2320      	movs	r3, #32
 8012642:	2210      	movs	r2, #16
 8012644:	2108      	movs	r1, #8
 8012646:	2702      	movs	r7, #2
 8012648:	f1ba 0f00 	cmp.w	sl, #0
 801264c:	d004      	beq.n	8012658 <uxr_buffer_create_datareader_bin+0x98>
 801264e:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8012652:	4673      	mov	r3, lr
 8012654:	4662      	mov	r2, ip
 8012656:	4601      	mov	r1, r0
 8012658:	2e02      	cmp	r6, #2
 801265a:	d027      	beq.n	80126ac <uxr_buffer_create_datareader_bin+0xec>
 801265c:	2e03      	cmp	r6, #3
 801265e:	d02b      	beq.n	80126b8 <uxr_buffer_create_datareader_bin+0xf8>
 8012660:	2e01      	cmp	r6, #1
 8012662:	d026      	beq.n	80126b2 <uxr_buffer_create_datareader_bin+0xf2>
 8012664:	a806      	add	r0, sp, #24
 8012666:	f44f 7200 	mov.w	r2, #512	; 0x200
 801266a:	a923      	add	r1, sp, #140	; 0x8c
 801266c:	f7ff fd3c 	bl	80120e8 <ucdr_init_buffer>
 8012670:	a90e      	add	r1, sp, #56	; 0x38
 8012672:	a806      	add	r0, sp, #24
 8012674:	f002 fb9e 	bl	8014db4 <uxr_serialize_OBJK_DataReader_Binary>
 8012678:	980a      	ldr	r0, [sp, #40]	; 0x28
 801267a:	9401      	str	r4, [sp, #4]
 801267c:	b283      	uxth	r3, r0
 801267e:	f8cd 8000 	str.w	r8, [sp]
 8012682:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012686:	60e0      	str	r0, [r4, #12]
 8012688:	4628      	mov	r0, r5
 801268a:	f7ff fe2b 	bl	80122e4 <uxr_common_create_entity>
 801268e:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8012692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012696:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801269a:	f04f 0e23 	mov.w	lr, #35	; 0x23
 801269e:	f04f 0c13 	mov.w	ip, #19
 80126a2:	200b      	movs	r0, #11
 80126a4:	2321      	movs	r3, #33	; 0x21
 80126a6:	2211      	movs	r2, #17
 80126a8:	2109      	movs	r1, #9
 80126aa:	e7cd      	b.n	8012648 <uxr_buffer_create_datareader_bin+0x88>
 80126ac:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80126b0:	e7d8      	b.n	8012664 <uxr_buffer_create_datareader_bin+0xa4>
 80126b2:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 80126b6:	e7d5      	b.n	8012664 <uxr_buffer_create_datareader_bin+0xa4>
 80126b8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80126bc:	e7d2      	b.n	8012664 <uxr_buffer_create_datareader_bin+0xa4>
 80126be:	bf00      	nop

080126c0 <get_custom_error>:
 80126c0:	4b01      	ldr	r3, [pc, #4]	; (80126c8 <get_custom_error+0x8>)
 80126c2:	7818      	ldrb	r0, [r3, #0]
 80126c4:	4770      	bx	lr
 80126c6:	bf00      	nop
 80126c8:	20010464 	.word	0x20010464

080126cc <recv_custom_msg>:
 80126cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126d0:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80126d4:	b089      	sub	sp, #36	; 0x24
 80126d6:	2600      	movs	r6, #0
 80126d8:	4604      	mov	r4, r0
 80126da:	9305      	str	r3, [sp, #20]
 80126dc:	468a      	mov	sl, r1
 80126de:	4693      	mov	fp, r2
 80126e0:	f88d 601e 	strb.w	r6, [sp, #30]
 80126e4:	b325      	cbz	r5, 8012730 <recv_custom_msg+0x64>
 80126e6:	f200 2902 	addw	r9, r0, #514	; 0x202
 80126ea:	f10d 081f 	add.w	r8, sp, #31
 80126ee:	af05      	add	r7, sp, #20
 80126f0:	f10d 061e 	add.w	r6, sp, #30
 80126f4:	f44f 7500 	mov.w	r5, #512	; 0x200
 80126f8:	e002      	b.n	8012700 <recv_custom_msg+0x34>
 80126fa:	9b05      	ldr	r3, [sp, #20]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	dd0f      	ble.n	8012720 <recv_custom_msg+0x54>
 8012700:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8012704:	e9cd 5600 	strd	r5, r6, [sp]
 8012708:	4623      	mov	r3, r4
 801270a:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 801270e:	4622      	mov	r2, r4
 8012710:	4648      	mov	r0, r9
 8012712:	f001 fa87 	bl	8013c24 <uxr_read_framed_msg>
 8012716:	2800      	cmp	r0, #0
 8012718:	d0ef      	beq.n	80126fa <recv_custom_msg+0x2e>
 801271a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801271e:	b1b3      	cbz	r3, 801274e <recv_custom_msg+0x82>
 8012720:	4b0f      	ldr	r3, [pc, #60]	; (8012760 <recv_custom_msg+0x94>)
 8012722:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8012726:	701a      	strb	r2, [r3, #0]
 8012728:	2000      	movs	r0, #0
 801272a:	b009      	add	sp, #36	; 0x24
 801272c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012730:	f10d 021f 	add.w	r2, sp, #31
 8012734:	9200      	str	r2, [sp, #0]
 8012736:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 801273a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801273e:	4601      	mov	r1, r0
 8012740:	47a8      	blx	r5
 8012742:	2800      	cmp	r0, #0
 8012744:	d0ec      	beq.n	8012720 <recv_custom_msg+0x54>
 8012746:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d1e8      	bne.n	8012720 <recv_custom_msg+0x54>
 801274e:	f8cb 0000 	str.w	r0, [fp]
 8012752:	2001      	movs	r0, #1
 8012754:	f8ca 4000 	str.w	r4, [sl]
 8012758:	b009      	add	sp, #36	; 0x24
 801275a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801275e:	bf00      	nop
 8012760:	20010464 	.word	0x20010464

08012764 <send_custom_msg>:
 8012764:	b570      	push	{r4, r5, r6, lr}
 8012766:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801276a:	b086      	sub	sp, #24
 801276c:	4616      	mov	r6, r2
 801276e:	b975      	cbnz	r5, 801278e <send_custom_msg+0x2a>
 8012770:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8012774:	f10d 0317 	add.w	r3, sp, #23
 8012778:	47a0      	blx	r4
 801277a:	b108      	cbz	r0, 8012780 <send_custom_msg+0x1c>
 801277c:	42b0      	cmp	r0, r6
 801277e:	d015      	beq.n	80127ac <send_custom_msg+0x48>
 8012780:	4b0c      	ldr	r3, [pc, #48]	; (80127b4 <send_custom_msg+0x50>)
 8012782:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8012786:	701a      	strb	r2, [r3, #0]
 8012788:	2000      	movs	r0, #0
 801278a:	b006      	add	sp, #24
 801278c:	bd70      	pop	{r4, r5, r6, pc}
 801278e:	460b      	mov	r3, r1
 8012790:	2200      	movs	r2, #0
 8012792:	f10d 0117 	add.w	r1, sp, #23
 8012796:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801279a:	9600      	str	r6, [sp, #0]
 801279c:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 80127a0:	4602      	mov	r2, r0
 80127a2:	f200 2002 	addw	r0, r0, #514	; 0x202
 80127a6:	f001 f84f 	bl	8013848 <uxr_write_framed_msg>
 80127aa:	e7e6      	b.n	801277a <send_custom_msg+0x16>
 80127ac:	2001      	movs	r0, #1
 80127ae:	b006      	add	sp, #24
 80127b0:	bd70      	pop	{r4, r5, r6, pc}
 80127b2:	bf00      	nop
 80127b4:	20010464 	.word	0x20010464

080127b8 <uxr_set_custom_transport_callbacks>:
 80127b8:	b430      	push	{r4, r5}
 80127ba:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 80127be:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 80127c2:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 80127c6:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 80127ca:	bc30      	pop	{r4, r5}
 80127cc:	4770      	bx	lr
 80127ce:	bf00      	nop

080127d0 <uxr_init_custom_transport>:
 80127d0:	b538      	push	{r3, r4, r5, lr}
 80127d2:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 80127d6:	b303      	cbz	r3, 801281a <uxr_init_custom_transport+0x4a>
 80127d8:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80127dc:	4604      	mov	r4, r0
 80127de:	b1e2      	cbz	r2, 801281a <uxr_init_custom_transport+0x4a>
 80127e0:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80127e4:	b1ca      	cbz	r2, 801281a <uxr_init_custom_transport+0x4a>
 80127e6:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 80127ea:	b1b2      	cbz	r2, 801281a <uxr_init_custom_transport+0x4a>
 80127ec:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 80127f0:	4798      	blx	r3
 80127f2:	4605      	mov	r5, r0
 80127f4:	b188      	cbz	r0, 801281a <uxr_init_custom_transport+0x4a>
 80127f6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80127fa:	b98b      	cbnz	r3, 8012820 <uxr_init_custom_transport+0x50>
 80127fc:	480b      	ldr	r0, [pc, #44]	; (801282c <uxr_init_custom_transport+0x5c>)
 80127fe:	490c      	ldr	r1, [pc, #48]	; (8012830 <uxr_init_custom_transport+0x60>)
 8012800:	4a0c      	ldr	r2, [pc, #48]	; (8012834 <uxr_init_custom_transport+0x64>)
 8012802:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 8012806:	f44f 7300 	mov.w	r3, #512	; 0x200
 801280a:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 801280e:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8012812:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8012816:	4628      	mov	r0, r5
 8012818:	bd38      	pop	{r3, r4, r5, pc}
 801281a:	2500      	movs	r5, #0
 801281c:	4628      	mov	r0, r5
 801281e:	bd38      	pop	{r3, r4, r5, pc}
 8012820:	2100      	movs	r1, #0
 8012822:	f204 2002 	addw	r0, r4, #514	; 0x202
 8012826:	f001 f809 	bl	801383c <uxr_init_framing_io>
 801282a:	e7e7      	b.n	80127fc <uxr_init_custom_transport+0x2c>
 801282c:	08012765 	.word	0x08012765
 8012830:	080126cd 	.word	0x080126cd
 8012834:	080126c1 	.word	0x080126c1

08012838 <uxr_close_custom_transport>:
 8012838:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 801283c:	4718      	bx	r3
 801283e:	bf00      	nop

08012840 <uxr_object_id>:
 8012840:	b082      	sub	sp, #8
 8012842:	2300      	movs	r3, #0
 8012844:	f88d 1006 	strb.w	r1, [sp, #6]
 8012848:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801284c:	f360 030f 	bfi	r3, r0, #0, #16
 8012850:	f362 431f 	bfi	r3, r2, #16, #16
 8012854:	4618      	mov	r0, r3
 8012856:	b002      	add	sp, #8
 8012858:	4770      	bx	lr
 801285a:	bf00      	nop

0801285c <uxr_object_id_from_raw>:
 801285c:	7843      	ldrb	r3, [r0, #1]
 801285e:	7801      	ldrb	r1, [r0, #0]
 8012860:	b082      	sub	sp, #8
 8012862:	f003 000f 	and.w	r0, r3, #15
 8012866:	f88d 0006 	strb.w	r0, [sp, #6]
 801286a:	091b      	lsrs	r3, r3, #4
 801286c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8012870:	2200      	movs	r2, #0
 8012872:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8012876:	f363 020f 	bfi	r2, r3, #0, #16
 801287a:	f361 421f 	bfi	r2, r1, #16, #16
 801287e:	4610      	mov	r0, r2
 8012880:	b002      	add	sp, #8
 8012882:	4770      	bx	lr

08012884 <uxr_object_id_to_raw>:
 8012884:	4602      	mov	r2, r0
 8012886:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801288a:	b082      	sub	sp, #8
 801288c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8012890:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8012894:	700a      	strb	r2, [r1, #0]
 8012896:	704b      	strb	r3, [r1, #1]
 8012898:	b002      	add	sp, #8
 801289a:	4770      	bx	lr

0801289c <uxr_buffer_request_data>:
 801289c:	b530      	push	{r4, r5, lr}
 801289e:	b095      	sub	sp, #84	; 0x54
 80128a0:	4604      	mov	r4, r0
 80128a2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80128a4:	9105      	str	r1, [sp, #20]
 80128a6:	2d00      	cmp	r5, #0
 80128a8:	bf14      	ite	ne
 80128aa:	2101      	movne	r1, #1
 80128ac:	2100      	moveq	r1, #0
 80128ae:	9204      	str	r2, [sp, #16]
 80128b0:	f04f 0200 	mov.w	r2, #0
 80128b4:	9303      	str	r3, [sp, #12]
 80128b6:	f88d 301c 	strb.w	r3, [sp, #28]
 80128ba:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80128be:	f88d 201d 	strb.w	r2, [sp, #29]
 80128c2:	f88d 201e 	strb.w	r2, [sp, #30]
 80128c6:	d021      	beq.n	801290c <uxr_buffer_request_data+0x70>
 80128c8:	686a      	ldr	r2, [r5, #4]
 80128ca:	682b      	ldr	r3, [r5, #0]
 80128cc:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 80128d0:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 80128d4:	2210      	movs	r2, #16
 80128d6:	2000      	movs	r0, #0
 80128d8:	2108      	movs	r1, #8
 80128da:	e9cd 1000 	strd	r1, r0, [sp]
 80128de:	ab0c      	add	r3, sp, #48	; 0x30
 80128e0:	9905      	ldr	r1, [sp, #20]
 80128e2:	4620      	mov	r0, r4
 80128e4:	f000 fe44 	bl	8013570 <uxr_prepare_stream_to_write_submessage>
 80128e8:	b918      	cbnz	r0, 80128f2 <uxr_buffer_request_data+0x56>
 80128ea:	4604      	mov	r4, r0
 80128ec:	4620      	mov	r0, r4
 80128ee:	b015      	add	sp, #84	; 0x54
 80128f0:	bd30      	pop	{r4, r5, pc}
 80128f2:	9904      	ldr	r1, [sp, #16]
 80128f4:	aa06      	add	r2, sp, #24
 80128f6:	4620      	mov	r0, r4
 80128f8:	f000 ff70 	bl	80137dc <uxr_init_base_object_request>
 80128fc:	a906      	add	r1, sp, #24
 80128fe:	4604      	mov	r4, r0
 8012900:	a80c      	add	r0, sp, #48	; 0x30
 8012902:	f002 fc09 	bl	8015118 <uxr_serialize_READ_DATA_Payload>
 8012906:	4620      	mov	r0, r4
 8012908:	b015      	add	sp, #84	; 0x54
 801290a:	bd30      	pop	{r4, r5, pc}
 801290c:	2208      	movs	r2, #8
 801290e:	e7e2      	b.n	80128d6 <uxr_buffer_request_data+0x3a>

08012910 <read_submessage_format>:
 8012910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012914:	b095      	sub	sp, #84	; 0x54
 8012916:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 801291a:	b113      	cbz	r3, 8012922 <read_submessage_format+0x12>
 801291c:	b015      	add	sp, #84	; 0x54
 801291e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012922:	460c      	mov	r4, r1
 8012924:	4616      	mov	r6, r2
 8012926:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801292a:	461d      	mov	r5, r3
 801292c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801292e:	9304      	str	r3, [sp, #16]
 8012930:	1a52      	subs	r2, r2, r1
 8012932:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012934:	9305      	str	r3, [sp, #20]
 8012936:	4607      	mov	r7, r0
 8012938:	a80c      	add	r0, sp, #48	; 0x30
 801293a:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 801293e:	f7ff fbd3 	bl	80120e8 <ucdr_init_buffer>
 8012942:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012946:	a80c      	add	r0, sp, #48	; 0x30
 8012948:	f7ff fba4 	bl	8012094 <ucdr_set_on_full_buffer_callback>
 801294c:	69e3      	ldr	r3, [r4, #28]
 801294e:	b193      	cbz	r3, 8012976 <read_submessage_format+0x66>
 8012950:	f1b8 0f07 	cmp.w	r8, #7
 8012954:	751d      	strb	r5, [r3, #20]
 8012956:	d03e      	beq.n	80129d6 <read_submessage_format+0xc6>
 8012958:	f1b8 0f08 	cmp.w	r8, #8
 801295c:	d02c      	beq.n	80129b8 <read_submessage_format+0xa8>
 801295e:	f1b8 0f06 	cmp.w	r8, #6
 8012962:	d011      	beq.n	8012988 <read_submessage_format+0x78>
 8012964:	2201      	movs	r2, #1
 8012966:	751a      	strb	r2, [r3, #20]
 8012968:	4631      	mov	r1, r6
 801296a:	4620      	mov	r0, r4
 801296c:	f7ff fc10 	bl	8012190 <ucdr_advance_buffer>
 8012970:	b015      	add	sp, #84	; 0x54
 8012972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012976:	f1b8 0f07 	cmp.w	r8, #7
 801297a:	d02c      	beq.n	80129d6 <read_submessage_format+0xc6>
 801297c:	f1b8 0f08 	cmp.w	r8, #8
 8012980:	d01a      	beq.n	80129b8 <read_submessage_format+0xa8>
 8012982:	f1b8 0f06 	cmp.w	r8, #6
 8012986:	d1ef      	bne.n	8012968 <read_submessage_format+0x58>
 8012988:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 801298c:	b18d      	cbz	r5, 80129b2 <read_submessage_format+0xa2>
 801298e:	2306      	movs	r3, #6
 8012990:	f88d 3016 	strb.w	r3, [sp, #22]
 8012994:	aa0c      	add	r2, sp, #48	; 0x30
 8012996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801299a:	9302      	str	r3, [sp, #8]
 801299c:	9200      	str	r2, [sp, #0]
 801299e:	9b04      	ldr	r3, [sp, #16]
 80129a0:	9905      	ldr	r1, [sp, #20]
 80129a2:	9601      	str	r6, [sp, #4]
 80129a4:	464a      	mov	r2, r9
 80129a6:	4638      	mov	r0, r7
 80129a8:	47a8      	blx	r5
 80129aa:	2301      	movs	r3, #1
 80129ac:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80129b0:	69e3      	ldr	r3, [r4, #28]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d1d6      	bne.n	8012964 <read_submessage_format+0x54>
 80129b6:	e7d7      	b.n	8012968 <read_submessage_format+0x58>
 80129b8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80129bc:	2a00      	cmp	r2, #0
 80129be:	d0f8      	beq.n	80129b2 <read_submessage_format+0xa2>
 80129c0:	a906      	add	r1, sp, #24
 80129c2:	a80c      	add	r0, sp, #48	; 0x30
 80129c4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80129c6:	f002 fc7b 	bl	80152c0 <uxr_deserialize_SampleIdentity>
 80129ca:	2800      	cmp	r0, #0
 80129cc:	d13c      	bne.n	8012a48 <read_submessage_format+0x138>
 80129ce:	69e3      	ldr	r3, [r4, #28]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d1c7      	bne.n	8012964 <read_submessage_format+0x54>
 80129d4:	e7c8      	b.n	8012968 <read_submessage_format+0x58>
 80129d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80129da:	b132      	cbz	r2, 80129ea <read_submessage_format+0xda>
 80129dc:	a906      	add	r1, sp, #24
 80129de:	a80c      	add	r0, sp, #48	; 0x30
 80129e0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80129e2:	f002 fa4f 	bl	8014e84 <uxr_deserialize_BaseObjectRequest>
 80129e6:	b930      	cbnz	r0, 80129f6 <read_submessage_format+0xe6>
 80129e8:	69e3      	ldr	r3, [r4, #28]
 80129ea:	68a2      	ldr	r2, [r4, #8]
 80129ec:	4432      	add	r2, r6
 80129ee:	60a2      	str	r2, [r4, #8]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d1b7      	bne.n	8012964 <read_submessage_format+0x54>
 80129f4:	e7b8      	b.n	8012968 <read_submessage_format+0x58>
 80129f6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80129fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80129fc:	1a52      	subs	r2, r2, r1
 80129fe:	a80c      	add	r0, sp, #48	; 0x30
 8012a00:	1aed      	subs	r5, r5, r3
 8012a02:	f7ff fb71 	bl	80120e8 <ucdr_init_buffer>
 8012a06:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012a0a:	a80c      	add	r0, sp, #48	; 0x30
 8012a0c:	f7ff fb42 	bl	8012094 <ucdr_set_on_full_buffer_callback>
 8012a10:	4435      	add	r5, r6
 8012a12:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8012a16:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012a1a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8012a1e:	9002      	str	r0, [sp, #8]
 8012a20:	2207      	movs	r2, #7
 8012a22:	f88d 2016 	strb.w	r2, [sp, #22]
 8012a26:	b2ad      	uxth	r5, r5
 8012a28:	aa0c      	add	r2, sp, #48	; 0x30
 8012a2a:	9200      	str	r2, [sp, #0]
 8012a2c:	9501      	str	r5, [sp, #4]
 8012a2e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012a32:	b29b      	uxth	r3, r3
 8012a34:	9905      	ldr	r1, [sp, #20]
 8012a36:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 8012a3a:	464a      	mov	r2, r9
 8012a3c:	4638      	mov	r0, r7
 8012a3e:	47a8      	blx	r5
 8012a40:	2301      	movs	r3, #1
 8012a42:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8012a46:	e7cf      	b.n	80129e8 <read_submessage_format+0xd8>
 8012a48:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8012a4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012a4e:	1a52      	subs	r2, r2, r1
 8012a50:	a80c      	add	r0, sp, #48	; 0x30
 8012a52:	1aed      	subs	r5, r5, r3
 8012a54:	f7ff fb48 	bl	80120e8 <ucdr_init_buffer>
 8012a58:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012a5c:	a80c      	add	r0, sp, #48	; 0x30
 8012a5e:	f7ff fb19 	bl	8012094 <ucdr_set_on_full_buffer_callback>
 8012a62:	4435      	add	r5, r6
 8012a64:	2308      	movs	r3, #8
 8012a66:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8012a6a:	f88d 3016 	strb.w	r3, [sp, #22]
 8012a6e:	b2ad      	uxth	r5, r5
 8012a70:	ab0c      	add	r3, sp, #48	; 0x30
 8012a72:	9300      	str	r3, [sp, #0]
 8012a74:	9002      	str	r0, [sp, #8]
 8012a76:	9501      	str	r5, [sp, #4]
 8012a78:	ab06      	add	r3, sp, #24
 8012a7a:	9905      	ldr	r1, [sp, #20]
 8012a7c:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 8012a80:	464a      	mov	r2, r9
 8012a82:	4638      	mov	r0, r7
 8012a84:	47a8      	blx	r5
 8012a86:	2301      	movs	r3, #1
 8012a88:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8012a8c:	e79f      	b.n	80129ce <read_submessage_format+0xbe>
 8012a8e:	bf00      	nop

08012a90 <on_get_fragmentation_info>:
 8012a90:	b500      	push	{lr}
 8012a92:	b08b      	sub	sp, #44	; 0x2c
 8012a94:	4601      	mov	r1, r0
 8012a96:	2204      	movs	r2, #4
 8012a98:	a802      	add	r0, sp, #8
 8012a9a:	f7ff fb25 	bl	80120e8 <ucdr_init_buffer>
 8012a9e:	f10d 0305 	add.w	r3, sp, #5
 8012aa2:	a802      	add	r0, sp, #8
 8012aa4:	f10d 0206 	add.w	r2, sp, #6
 8012aa8:	a901      	add	r1, sp, #4
 8012aaa:	f001 fc9f 	bl	80143ec <uxr_read_submessage_header>
 8012aae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012ab2:	2b0d      	cmp	r3, #13
 8012ab4:	d003      	beq.n	8012abe <on_get_fragmentation_info+0x2e>
 8012ab6:	2000      	movs	r0, #0
 8012ab8:	b00b      	add	sp, #44	; 0x2c
 8012aba:	f85d fb04 	ldr.w	pc, [sp], #4
 8012abe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012ac2:	f013 0f02 	tst.w	r3, #2
 8012ac6:	bf14      	ite	ne
 8012ac8:	2002      	movne	r0, #2
 8012aca:	2001      	moveq	r0, #1
 8012acc:	b00b      	add	sp, #44	; 0x2c
 8012ace:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ad2:	bf00      	nop

08012ad4 <write_submessage_acknack.isra.0>:
 8012ad4:	b570      	push	{r4, r5, r6, lr}
 8012ad6:	b092      	sub	sp, #72	; 0x48
 8012ad8:	4605      	mov	r5, r0
 8012ada:	460e      	mov	r6, r1
 8012adc:	4614      	mov	r4, r2
 8012ade:	f000 fe75 	bl	80137cc <uxr_session_header_offset>
 8012ae2:	a905      	add	r1, sp, #20
 8012ae4:	9000      	str	r0, [sp, #0]
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	a80a      	add	r0, sp, #40	; 0x28
 8012aea:	2211      	movs	r2, #17
 8012aec:	f7ff faea 	bl	80120c4 <ucdr_init_buffer_origin_offset>
 8012af0:	2218      	movs	r2, #24
 8012af2:	fb02 5404 	mla	r4, r2, r4, r5
 8012af6:	2300      	movs	r3, #0
 8012af8:	2205      	movs	r2, #5
 8012afa:	3450      	adds	r4, #80	; 0x50
 8012afc:	a80a      	add	r0, sp, #40	; 0x28
 8012afe:	210a      	movs	r1, #10
 8012b00:	f001 fc5a 	bl	80143b8 <uxr_buffer_submessage_header>
 8012b04:	a903      	add	r1, sp, #12
 8012b06:	4620      	mov	r0, r4
 8012b08:	f005 ff5c 	bl	80189c4 <uxr_compute_acknack>
 8012b0c:	a903      	add	r1, sp, #12
 8012b0e:	ba43      	rev16	r3, r0
 8012b10:	a80a      	add	r0, sp, #40	; 0x28
 8012b12:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012b16:	f88d 6010 	strb.w	r6, [sp, #16]
 8012b1a:	f002 fb21 	bl	8015160 <uxr_serialize_ACKNACK_Payload>
 8012b1e:	2200      	movs	r2, #0
 8012b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b22:	4611      	mov	r1, r2
 8012b24:	4628      	mov	r0, r5
 8012b26:	f000 fdf9 	bl	801371c <uxr_stamp_session_header>
 8012b2a:	a80a      	add	r0, sp, #40	; 0x28
 8012b2c:	f7ff fb0a 	bl	8012144 <ucdr_buffer_length>
 8012b30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8012b32:	4602      	mov	r2, r0
 8012b34:	a905      	add	r1, sp, #20
 8012b36:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012b3a:	47a0      	blx	r4
 8012b3c:	b012      	add	sp, #72	; 0x48
 8012b3e:	bd70      	pop	{r4, r5, r6, pc}

08012b40 <read_submessage_list>:
 8012b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b44:	b098      	sub	sp, #96	; 0x60
 8012b46:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 8012e2c <read_submessage_list+0x2ec>
 8012b4a:	920b      	str	r2, [sp, #44]	; 0x2c
 8012b4c:	4604      	mov	r4, r0
 8012b4e:	4688      	mov	r8, r1
 8012b50:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 8012b54:	aa0e      	add	r2, sp, #56	; 0x38
 8012b56:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8012b5a:	4640      	mov	r0, r8
 8012b5c:	f001 fc46 	bl	80143ec <uxr_read_submessage_header>
 8012b60:	2800      	cmp	r0, #0
 8012b62:	f000 8107 	beq.w	8012d74 <read_submessage_list+0x234>
 8012b66:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8012b6a:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8012b6e:	3b04      	subs	r3, #4
 8012b70:	2b0b      	cmp	r3, #11
 8012b72:	d8ed      	bhi.n	8012b50 <read_submessage_list+0x10>
 8012b74:	a101      	add	r1, pc, #4	; (adr r1, 8012b7c <read_submessage_list+0x3c>)
 8012b76:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012b7a:	bf00      	nop
 8012b7c:	08012d65 	.word	0x08012d65
 8012b80:	08012d59 	.word	0x08012d59
 8012b84:	08012b51 	.word	0x08012b51
 8012b88:	08012b51 	.word	0x08012b51
 8012b8c:	08012b51 	.word	0x08012b51
 8012b90:	08012cbb 	.word	0x08012cbb
 8012b94:	08012c4d 	.word	0x08012c4d
 8012b98:	08012c0b 	.word	0x08012c0b
 8012b9c:	08012b51 	.word	0x08012b51
 8012ba0:	08012b51 	.word	0x08012b51
 8012ba4:	08012b51 	.word	0x08012b51
 8012ba8:	08012bad 	.word	0x08012bad
 8012bac:	a912      	add	r1, sp, #72	; 0x48
 8012bae:	4640      	mov	r0, r8
 8012bb0:	f002 fb34 	bl	801521c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8012bb4:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8012bb8:	2d00      	cmp	r5, #0
 8012bba:	f000 810a 	beq.w	8012dd2 <read_submessage_list+0x292>
 8012bbe:	f001 fc5d 	bl	801447c <uxr_nanos>
 8012bc2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012bc4:	460b      	mov	r3, r1
 8012bc6:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012bc8:	2700      	movs	r7, #0
 8012bca:	fbc9 6701 	smlal	r6, r7, r9, r1
 8012bce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012bd2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012bd4:	4602      	mov	r2, r0
 8012bd6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012bd8:	460e      	mov	r6, r1
 8012bda:	2700      	movs	r7, #0
 8012bdc:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8012be0:	9106      	str	r1, [sp, #24]
 8012be2:	fbc9 6700 	smlal	r6, r7, r9, r0
 8012be6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012be8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012bec:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8012bee:	2700      	movs	r7, #0
 8012bf0:	4608      	mov	r0, r1
 8012bf2:	4639      	mov	r1, r7
 8012bf4:	fbc9 0106 	smlal	r0, r1, r9, r6
 8012bf8:	e9cd 0100 	strd	r0, r1, [sp]
 8012bfc:	4620      	mov	r0, r4
 8012bfe:	47a8      	blx	r5
 8012c00:	f04f 0301 	mov.w	r3, #1
 8012c04:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8012c08:	e7a2      	b.n	8012b50 <read_submessage_list+0x10>
 8012c0a:	a912      	add	r1, sp, #72	; 0x48
 8012c0c:	4640      	mov	r0, r8
 8012c0e:	f002 fae5 	bl	80151dc <uxr_deserialize_HEARTBEAT_Payload>
 8012c12:	2100      	movs	r1, #0
 8012c14:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8012c18:	f001 fabe 	bl	8014198 <uxr_stream_id_from_raw>
 8012c1c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8012c20:	4603      	mov	r3, r0
 8012c22:	4629      	mov	r1, r5
 8012c24:	f104 0008 	add.w	r0, r4, #8
 8012c28:	9311      	str	r3, [sp, #68]	; 0x44
 8012c2a:	f001 fba3 	bl	8014374 <uxr_get_input_reliable_stream>
 8012c2e:	2800      	cmp	r0, #0
 8012c30:	d08e      	beq.n	8012b50 <read_submessage_list+0x10>
 8012c32:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 8012c36:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 8012c3a:	f005 feb7 	bl	80189ac <uxr_process_heartbeat>
 8012c3e:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8012c42:	462a      	mov	r2, r5
 8012c44:	4620      	mov	r0, r4
 8012c46:	f7ff ff45 	bl	8012ad4 <write_submessage_acknack.isra.0>
 8012c4a:	e781      	b.n	8012b50 <read_submessage_list+0x10>
 8012c4c:	a912      	add	r1, sp, #72	; 0x48
 8012c4e:	4640      	mov	r0, r8
 8012c50:	f002 fa9c 	bl	801518c <uxr_deserialize_ACKNACK_Payload>
 8012c54:	2100      	movs	r1, #0
 8012c56:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8012c5a:	f001 fa9d 	bl	8014198 <uxr_stream_id_from_raw>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8012c64:	f104 0008 	add.w	r0, r4, #8
 8012c68:	930f      	str	r3, [sp, #60]	; 0x3c
 8012c6a:	f001 fb6d 	bl	8014348 <uxr_get_output_reliable_stream>
 8012c6e:	4605      	mov	r5, r0
 8012c70:	2800      	cmp	r0, #0
 8012c72:	f43f af6d 	beq.w	8012b50 <read_submessage_list+0x10>
 8012c76:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8012c7a:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 8012c7e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8012c82:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8012c86:	b289      	uxth	r1, r1
 8012c88:	f006 f9ca 	bl	8019020 <uxr_process_acknack>
 8012c8c:	4628      	mov	r0, r5
 8012c8e:	f006 f98d 	bl	8018fac <uxr_begin_output_nack_buffer_it>
 8012c92:	af10      	add	r7, sp, #64	; 0x40
 8012c94:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8012c98:	e005      	b.n	8012ca6 <read_submessage_list+0x166>
 8012c9a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012c9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012c9e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012ca0:	e9d3 0600 	ldrd	r0, r6, [r3]
 8012ca4:	47b0      	blx	r6
 8012ca6:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 8012caa:	aa11      	add	r2, sp, #68	; 0x44
 8012cac:	4639      	mov	r1, r7
 8012cae:	4628      	mov	r0, r5
 8012cb0:	f006 f97e 	bl	8018fb0 <uxr_next_reliable_nack_buffer_to_send>
 8012cb4:	2800      	cmp	r0, #0
 8012cb6:	d1f0      	bne.n	8012c9a <read_submessage_list+0x15a>
 8012cb8:	e74a      	b.n	8012b50 <read_submessage_list+0x10>
 8012cba:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8012cbe:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 8012cc2:	af10      	add	r7, sp, #64	; 0x40
 8012cc4:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8012cc8:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 8012ccc:	4639      	mov	r1, r7
 8012cce:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8012cd2:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 8012cd6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8012cda:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 8012cde:	4640      	mov	r0, r8
 8012ce0:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8012ce4:	f002 f8ce 	bl	8014e84 <uxr_deserialize_BaseObjectRequest>
 8012ce8:	4638      	mov	r0, r7
 8012cea:	a911      	add	r1, sp, #68	; 0x44
 8012cec:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8012cf0:	f000 fd92 	bl	8013818 <uxr_parse_base_object_request>
 8012cf4:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8012cf8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012cfa:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 8012cfe:	9112      	str	r1, [sp, #72]	; 0x48
 8012d00:	3d04      	subs	r5, #4
 8012d02:	f006 060e 	and.w	r6, r6, #14
 8012d06:	b2ad      	uxth	r5, r5
 8012d08:	f1ba 0f00 	cmp.w	sl, #0
 8012d0c:	d006      	beq.n	8012d1c <read_submessage_list+0x1dc>
 8012d0e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8012d12:	9300      	str	r3, [sp, #0]
 8012d14:	463a      	mov	r2, r7
 8012d16:	2300      	movs	r3, #0
 8012d18:	4620      	mov	r0, r4
 8012d1a:	47d0      	blx	sl
 8012d1c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8012d1e:	b168      	cbz	r0, 8012d3c <read_submessage_list+0x1fc>
 8012d20:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8012d22:	2300      	movs	r3, #0
 8012d24:	3902      	subs	r1, #2
 8012d26:	e002      	b.n	8012d2e <read_submessage_list+0x1ee>
 8012d28:	3301      	adds	r3, #1
 8012d2a:	4283      	cmp	r3, r0
 8012d2c:	d006      	beq.n	8012d3c <read_submessage_list+0x1fc>
 8012d2e:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8012d32:	42ba      	cmp	r2, r7
 8012d34:	d1f8      	bne.n	8012d28 <read_submessage_list+0x1e8>
 8012d36:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8012d38:	2100      	movs	r1, #0
 8012d3a:	54d1      	strb	r1, [r2, r3]
 8012d3c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012d3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012d40:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8012d44:	9302      	str	r3, [sp, #8]
 8012d46:	e9cd 1000 	strd	r1, r0, [sp]
 8012d4a:	4633      	mov	r3, r6
 8012d4c:	462a      	mov	r2, r5
 8012d4e:	4641      	mov	r1, r8
 8012d50:	4620      	mov	r0, r4
 8012d52:	f7ff fddd 	bl	8012910 <read_submessage_format>
 8012d56:	e6fb      	b.n	8012b50 <read_submessage_list+0x10>
 8012d58:	b97a      	cbnz	r2, 8012d7a <read_submessage_list+0x23a>
 8012d5a:	4641      	mov	r1, r8
 8012d5c:	4620      	mov	r0, r4
 8012d5e:	f000 fcab 	bl	80136b8 <uxr_read_delete_session_status>
 8012d62:	e6f5      	b.n	8012b50 <read_submessage_list+0x10>
 8012d64:	2a00      	cmp	r2, #0
 8012d66:	f47f aef3 	bne.w	8012b50 <read_submessage_list+0x10>
 8012d6a:	4641      	mov	r1, r8
 8012d6c:	4620      	mov	r0, r4
 8012d6e:	f000 fc97 	bl	80136a0 <uxr_read_create_session_status>
 8012d72:	e6ed      	b.n	8012b50 <read_submessage_list+0x10>
 8012d74:	b018      	add	sp, #96	; 0x60
 8012d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d7a:	a912      	add	r1, sp, #72	; 0x48
 8012d7c:	4640      	mov	r0, r8
 8012d7e:	f002 f9ad 	bl	80150dc <uxr_deserialize_STATUS_Payload>
 8012d82:	a910      	add	r1, sp, #64	; 0x40
 8012d84:	aa0f      	add	r2, sp, #60	; 0x3c
 8012d86:	a812      	add	r0, sp, #72	; 0x48
 8012d88:	f000 fd46 	bl	8013818 <uxr_parse_base_object_request>
 8012d8c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8012d90:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012d92:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8012d96:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8012d9a:	9111      	str	r1, [sp, #68]	; 0x44
 8012d9c:	b135      	cbz	r5, 8012dac <read_submessage_list+0x26c>
 8012d9e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8012da2:	9300      	str	r3, [sp, #0]
 8012da4:	4632      	mov	r2, r6
 8012da6:	463b      	mov	r3, r7
 8012da8:	4620      	mov	r0, r4
 8012daa:	47a8      	blx	r5
 8012dac:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	f43f aece 	beq.w	8012b50 <read_submessage_list+0x10>
 8012db4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8012db6:	2100      	movs	r1, #0
 8012db8:	3802      	subs	r0, #2
 8012dba:	e003      	b.n	8012dc4 <read_submessage_list+0x284>
 8012dbc:	3101      	adds	r1, #1
 8012dbe:	4299      	cmp	r1, r3
 8012dc0:	f43f aec6 	beq.w	8012b50 <read_submessage_list+0x10>
 8012dc4:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8012dc8:	42b2      	cmp	r2, r6
 8012dca:	d1f7      	bne.n	8012dbc <read_submessage_list+0x27c>
 8012dcc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8012dce:	545f      	strb	r7, [r3, r1]
 8012dd0:	e6be      	b.n	8012b50 <read_submessage_list+0x10>
 8012dd2:	f001 fb53 	bl	801447c <uxr_nanos>
 8012dd6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012dd8:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012dda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012ddc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012dde:	2700      	movs	r7, #0
 8012de0:	fbc9 6703 	smlal	r6, r7, r9, r3
 8012de4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012de6:	eb16 0c00 	adds.w	ip, r6, r0
 8012dea:	4618      	mov	r0, r3
 8012dec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012dee:	eb47 0e01 	adc.w	lr, r7, r1
 8012df2:	461e      	mov	r6, r3
 8012df4:	2100      	movs	r1, #0
 8012df6:	2700      	movs	r7, #0
 8012df8:	fbc9 0105 	smlal	r0, r1, r9, r5
 8012dfc:	fbc9 6702 	smlal	r6, r7, r9, r2
 8012e00:	1983      	adds	r3, r0, r6
 8012e02:	eb41 0207 	adc.w	r2, r1, r7
 8012e06:	ebbc 0303 	subs.w	r3, ip, r3
 8012e0a:	9308      	str	r3, [sp, #32]
 8012e0c:	eb6e 0302 	sbc.w	r3, lr, r2
 8012e10:	9309      	str	r3, [sp, #36]	; 0x24
 8012e12:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8012e16:	0fd3      	lsrs	r3, r2, #31
 8012e18:	18c9      	adds	r1, r1, r3
 8012e1a:	f142 0200 	adc.w	r2, r2, #0
 8012e1e:	084b      	lsrs	r3, r1, #1
 8012e20:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8012e24:	1052      	asrs	r2, r2, #1
 8012e26:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 8012e2a:	e6e9      	b.n	8012c00 <read_submessage_list+0xc0>
 8012e2c:	3b9aca00 	.word	0x3b9aca00

08012e30 <listen_message>:
 8012e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e34:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8012e36:	b09a      	sub	sp, #104	; 0x68
 8012e38:	6894      	ldr	r4, [r2, #8]
 8012e3a:	460b      	mov	r3, r1
 8012e3c:	4605      	mov	r5, r0
 8012e3e:	a906      	add	r1, sp, #24
 8012e40:	6810      	ldr	r0, [r2, #0]
 8012e42:	aa07      	add	r2, sp, #28
 8012e44:	47a0      	blx	r4
 8012e46:	4604      	mov	r4, r0
 8012e48:	b918      	cbnz	r0, 8012e52 <listen_message+0x22>
 8012e4a:	4620      	mov	r0, r4
 8012e4c:	b01a      	add	sp, #104	; 0x68
 8012e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e52:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8012e56:	a80a      	add	r0, sp, #40	; 0x28
 8012e58:	f7ff f946 	bl	80120e8 <ucdr_init_buffer>
 8012e5c:	a90a      	add	r1, sp, #40	; 0x28
 8012e5e:	f10d 0316 	add.w	r3, sp, #22
 8012e62:	aa05      	add	r2, sp, #20
 8012e64:	4628      	mov	r0, r5
 8012e66:	f000 fc6f 	bl	8013748 <uxr_read_session_header>
 8012e6a:	2800      	cmp	r0, #0
 8012e6c:	d0ed      	beq.n	8012e4a <listen_message+0x1a>
 8012e6e:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8012e72:	2100      	movs	r1, #0
 8012e74:	f001 f990 	bl	8014198 <uxr_stream_id_from_raw>
 8012e78:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012e7c:	2f01      	cmp	r7, #1
 8012e7e:	f8bd a016 	ldrh.w	sl, [sp, #22]
 8012e82:	9009      	str	r0, [sp, #36]	; 0x24
 8012e84:	fa5f f880 	uxtb.w	r8, r0
 8012e88:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012e8c:	d041      	beq.n	8012f12 <listen_message+0xe2>
 8012e8e:	2f02      	cmp	r7, #2
 8012e90:	d00b      	beq.n	8012eaa <listen_message+0x7a>
 8012e92:	2f00      	cmp	r7, #0
 8012e94:	d1d9      	bne.n	8012e4a <listen_message+0x1a>
 8012e96:	4639      	mov	r1, r7
 8012e98:	4638      	mov	r0, r7
 8012e9a:	f001 f97d 	bl	8014198 <uxr_stream_id_from_raw>
 8012e9e:	a90a      	add	r1, sp, #40	; 0x28
 8012ea0:	4602      	mov	r2, r0
 8012ea2:	4628      	mov	r0, r5
 8012ea4:	f7ff fe4c 	bl	8012b40 <read_submessage_list>
 8012ea8:	e7cf      	b.n	8012e4a <listen_message+0x1a>
 8012eaa:	4631      	mov	r1, r6
 8012eac:	f105 0008 	add.w	r0, r5, #8
 8012eb0:	f001 fa60 	bl	8014374 <uxr_get_input_reliable_stream>
 8012eb4:	4681      	mov	r9, r0
 8012eb6:	b330      	cbz	r0, 8012f06 <listen_message+0xd6>
 8012eb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012eba:	9203      	str	r2, [sp, #12]
 8012ebc:	a80a      	add	r0, sp, #40	; 0x28
 8012ebe:	f7ff f945 	bl	801214c <ucdr_buffer_remaining>
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	f10d 0015 	add.w	r0, sp, #21
 8012ec8:	9000      	str	r0, [sp, #0]
 8012eca:	9a03      	ldr	r2, [sp, #12]
 8012ecc:	4651      	mov	r1, sl
 8012ece:	4648      	mov	r0, r9
 8012ed0:	f005 fc6e 	bl	80187b0 <uxr_receive_reliable_message>
 8012ed4:	b1b8      	cbz	r0, 8012f06 <listen_message+0xd6>
 8012ed6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8012eda:	b393      	cbz	r3, 8012f42 <listen_message+0x112>
 8012edc:	2702      	movs	r7, #2
 8012ede:	e008      	b.n	8012ef2 <listen_message+0xc2>
 8012ee0:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
 8012ee4:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8012ee8:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8012eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012eee:	f7ff fe27 	bl	8012b40 <read_submessage_list>
 8012ef2:	a912      	add	r1, sp, #72	; 0x48
 8012ef4:	2204      	movs	r2, #4
 8012ef6:	4648      	mov	r0, r9
 8012ef8:	f005 fcda 	bl	80188b0 <uxr_next_input_reliable_buffer_available>
 8012efc:	4603      	mov	r3, r0
 8012efe:	a912      	add	r1, sp, #72	; 0x48
 8012f00:	4628      	mov	r0, r5
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d1ec      	bne.n	8012ee0 <listen_message+0xb0>
 8012f06:	4632      	mov	r2, r6
 8012f08:	4641      	mov	r1, r8
 8012f0a:	4628      	mov	r0, r5
 8012f0c:	f7ff fde2 	bl	8012ad4 <write_submessage_acknack.isra.0>
 8012f10:	e79b      	b.n	8012e4a <listen_message+0x1a>
 8012f12:	4631      	mov	r1, r6
 8012f14:	f105 0008 	add.w	r0, r5, #8
 8012f18:	f001 fa22 	bl	8014360 <uxr_get_input_best_effort_stream>
 8012f1c:	2800      	cmp	r0, #0
 8012f1e:	d094      	beq.n	8012e4a <listen_message+0x1a>
 8012f20:	4651      	mov	r1, sl
 8012f22:	f005 fbc1 	bl	80186a8 <uxr_receive_best_effort_message>
 8012f26:	2800      	cmp	r0, #0
 8012f28:	d08f      	beq.n	8012e4a <listen_message+0x1a>
 8012f2a:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
 8012f2e:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8012f32:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8012f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f38:	a90a      	add	r1, sp, #40	; 0x28
 8012f3a:	4628      	mov	r0, r5
 8012f3c:	f7ff fe00 	bl	8012b40 <read_submessage_list>
 8012f40:	e783      	b.n	8012e4a <listen_message+0x1a>
 8012f42:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
 8012f46:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8012f4a:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8012f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f50:	a90a      	add	r1, sp, #40	; 0x28
 8012f52:	4628      	mov	r0, r5
 8012f54:	f7ff fdf4 	bl	8012b40 <read_submessage_list>
 8012f58:	e7c0      	b.n	8012edc <listen_message+0xac>
 8012f5a:	bf00      	nop

08012f5c <listen_message_reliably>:
 8012f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f60:	1e0b      	subs	r3, r1, #0
 8012f62:	b095      	sub	sp, #84	; 0x54
 8012f64:	bfb8      	it	lt
 8012f66:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8012f6a:	4683      	mov	fp, r0
 8012f6c:	9303      	str	r3, [sp, #12]
 8012f6e:	f001 fa69 	bl	8014444 <uxr_millis>
 8012f72:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8012f76:	4688      	mov	r8, r1
 8012f78:	4607      	mov	r7, r0
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	f000 8093 	beq.w	80130a6 <listen_message_reliably+0x14a>
 8012f80:	2600      	movs	r6, #0
 8012f82:	4630      	mov	r0, r6
 8012f84:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8012f88:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8012f8c:	e00f      	b.n	8012fae <listen_message_reliably+0x52>
 8012f8e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8012f92:	454a      	cmp	r2, r9
 8012f94:	eb73 010a 	sbcs.w	r1, r3, sl
 8012f98:	bfb8      	it	lt
 8012f9a:	469a      	movlt	sl, r3
 8012f9c:	f106 0601 	add.w	r6, r6, #1
 8012fa0:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8012fa4:	b2f0      	uxtb	r0, r6
 8012fa6:	bfb8      	it	lt
 8012fa8:	4691      	movlt	r9, r2
 8012faa:	4283      	cmp	r3, r0
 8012fac:	d953      	bls.n	8013056 <listen_message_reliably+0xfa>
 8012fae:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8012fb2:	2201      	movs	r2, #1
 8012fb4:	2102      	movs	r1, #2
 8012fb6:	f001 f8c5 	bl	8014144 <uxr_stream_id>
 8012fba:	00e4      	lsls	r4, r4, #3
 8012fbc:	f104 0520 	add.w	r5, r4, #32
 8012fc0:	445d      	add	r5, fp
 8012fc2:	4601      	mov	r1, r0
 8012fc4:	4643      	mov	r3, r8
 8012fc6:	463a      	mov	r2, r7
 8012fc8:	4628      	mov	r0, r5
 8012fca:	9104      	str	r1, [sp, #16]
 8012fcc:	f005 ffc2 	bl	8018f54 <uxr_update_output_stream_heartbeat_timestamp>
 8012fd0:	eb0b 0304 	add.w	r3, fp, r4
 8012fd4:	2800      	cmp	r0, #0
 8012fd6:	d0da      	beq.n	8012f8e <listen_message_reliably+0x32>
 8012fd8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8012fdc:	f89d 5011 	ldrb.w	r5, [sp, #17]
 8012fe0:	9302      	str	r3, [sp, #8]
 8012fe2:	4658      	mov	r0, fp
 8012fe4:	f000 fbf2 	bl	80137cc <uxr_session_header_offset>
 8012fe8:	3501      	adds	r5, #1
 8012fea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8012fee:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8012ff2:	9000      	str	r0, [sp, #0]
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	a80c      	add	r0, sp, #48	; 0x30
 8012ff8:	2211      	movs	r2, #17
 8012ffa:	a907      	add	r1, sp, #28
 8012ffc:	f7ff f862 	bl	80120c4 <ucdr_init_buffer_origin_offset>
 8013000:	2300      	movs	r3, #0
 8013002:	2205      	movs	r2, #5
 8013004:	210b      	movs	r1, #11
 8013006:	a80c      	add	r0, sp, #48	; 0x30
 8013008:	f001 f9d6 	bl	80143b8 <uxr_buffer_submessage_header>
 801300c:	8968      	ldrh	r0, [r5, #10]
 801300e:	2101      	movs	r1, #1
 8013010:	f006 f85e 	bl	80190d0 <uxr_seq_num_add>
 8013014:	9902      	ldr	r1, [sp, #8]
 8013016:	892a      	ldrh	r2, [r5, #8]
 8013018:	f88d 1018 	strb.w	r1, [sp, #24]
 801301c:	4603      	mov	r3, r0
 801301e:	a905      	add	r1, sp, #20
 8013020:	a80c      	add	r0, sp, #48	; 0x30
 8013022:	f8ad 2016 	strh.w	r2, [sp, #22]
 8013026:	f8ad 3014 	strh.w	r3, [sp, #20]
 801302a:	f002 f8c3 	bl	80151b4 <uxr_serialize_HEARTBEAT_Payload>
 801302e:	2200      	movs	r2, #0
 8013030:	4611      	mov	r1, r2
 8013032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013034:	4658      	mov	r0, fp
 8013036:	f000 fb71 	bl	801371c <uxr_stamp_session_header>
 801303a:	a80c      	add	r0, sp, #48	; 0x30
 801303c:	f7ff f882 	bl	8012144 <ucdr_buffer_length>
 8013040:	f8db 3070 	ldr.w	r3, [fp, #112]	; 0x70
 8013044:	4602      	mov	r2, r0
 8013046:	a907      	add	r1, sp, #28
 8013048:	e9d3 0500 	ldrd	r0, r5, [r3]
 801304c:	445c      	add	r4, fp
 801304e:	47a8      	blx	r5
 8013050:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8013054:	e79d      	b.n	8012f92 <listen_message_reliably+0x36>
 8013056:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 801305a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801305e:	45a2      	cmp	sl, r4
 8013060:	bf08      	it	eq
 8013062:	4599      	cmpeq	r9, r3
 8013064:	d01f      	beq.n	80130a6 <listen_message_reliably+0x14a>
 8013066:	eba9 0107 	sub.w	r1, r9, r7
 801306a:	2900      	cmp	r1, #0
 801306c:	9c03      	ldr	r4, [sp, #12]
 801306e:	bf08      	it	eq
 8013070:	2101      	moveq	r1, #1
 8013072:	428c      	cmp	r4, r1
 8013074:	4623      	mov	r3, r4
 8013076:	bfa8      	it	ge
 8013078:	460b      	movge	r3, r1
 801307a:	4619      	mov	r1, r3
 801307c:	4658      	mov	r0, fp
 801307e:	461f      	mov	r7, r3
 8013080:	f7ff fed6 	bl	8012e30 <listen_message>
 8013084:	b110      	cbz	r0, 801308c <listen_message_reliably+0x130>
 8013086:	b015      	add	sp, #84	; 0x54
 8013088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801308c:	1be3      	subs	r3, r4, r7
 801308e:	2b00      	cmp	r3, #0
 8013090:	9303      	str	r3, [sp, #12]
 8013092:	ddf8      	ble.n	8013086 <listen_message_reliably+0x12a>
 8013094:	f001 f9d6 	bl	8014444 <uxr_millis>
 8013098:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 801309c:	4688      	mov	r8, r1
 801309e:	4607      	mov	r7, r0
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	f47f af6d 	bne.w	8012f80 <listen_message_reliably+0x24>
 80130a6:	9903      	ldr	r1, [sp, #12]
 80130a8:	e7df      	b.n	801306a <listen_message_reliably+0x10e>
 80130aa:	bf00      	nop

080130ac <uxr_init_session>:
 80130ac:	b5d0      	push	{r4, r6, r7, lr}
 80130ae:	2300      	movs	r3, #0
 80130b0:	2600      	movs	r6, #0
 80130b2:	2700      	movs	r7, #0
 80130b4:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 80130b8:	4604      	mov	r4, r0
 80130ba:	6701      	str	r1, [r0, #112]	; 0x70
 80130bc:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 80130c0:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 80130c4:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 80130c8:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 80130cc:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 80130d0:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 80130d4:	2181      	movs	r1, #129	; 0x81
 80130d6:	f000 fa8f 	bl	80135f8 <uxr_init_session_info>
 80130da:	f104 0008 	add.w	r0, r4, #8
 80130de:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 80130e2:	f001 b885 	b.w	80141f0 <uxr_init_stream_storage>
 80130e6:	bf00      	nop

080130e8 <uxr_set_status_callback>:
 80130e8:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 80130ec:	4770      	bx	lr
 80130ee:	bf00      	nop

080130f0 <uxr_set_topic_callback>:
 80130f0:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 80130f4:	4770      	bx	lr
 80130f6:	bf00      	nop

080130f8 <uxr_set_request_callback>:
 80130f8:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 80130fc:	4770      	bx	lr
 80130fe:	bf00      	nop

08013100 <uxr_set_reply_callback>:
 8013100:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8013104:	4770      	bx	lr
 8013106:	bf00      	nop

08013108 <uxr_create_session>:
 8013108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801310a:	4604      	mov	r4, r0
 801310c:	b093      	sub	sp, #76	; 0x4c
 801310e:	3008      	adds	r0, #8
 8013110:	f001 f878 	bl	8014204 <uxr_reset_stream_storage>
 8013114:	4620      	mov	r0, r4
 8013116:	f000 fb59 	bl	80137cc <uxr_session_header_offset>
 801311a:	a903      	add	r1, sp, #12
 801311c:	9000      	str	r0, [sp, #0]
 801311e:	2300      	movs	r3, #0
 8013120:	a80a      	add	r0, sp, #40	; 0x28
 8013122:	221c      	movs	r2, #28
 8013124:	f7fe ffce 	bl	80120c4 <ucdr_init_buffer_origin_offset>
 8013128:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801312a:	8a1a      	ldrh	r2, [r3, #16]
 801312c:	3a04      	subs	r2, #4
 801312e:	b292      	uxth	r2, r2
 8013130:	4620      	mov	r0, r4
 8013132:	a90a      	add	r1, sp, #40	; 0x28
 8013134:	f000 fa72 	bl	801361c <uxr_buffer_create_session>
 8013138:	990a      	ldr	r1, [sp, #40]	; 0x28
 801313a:	4620      	mov	r0, r4
 801313c:	f000 fada 	bl	80136f4 <uxr_stamp_create_session_header>
 8013140:	a80a      	add	r0, sp, #40	; 0x28
 8013142:	f7fe ffff 	bl	8012144 <ucdr_buffer_length>
 8013146:	23ff      	movs	r3, #255	; 0xff
 8013148:	4606      	mov	r6, r0
 801314a:	7163      	strb	r3, [r4, #5]
 801314c:	250a      	movs	r5, #10
 801314e:	e001      	b.n	8013154 <uxr_create_session+0x4c>
 8013150:	28ff      	cmp	r0, #255	; 0xff
 8013152:	d10d      	bne.n	8013170 <uxr_create_session+0x68>
 8013154:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013156:	4632      	mov	r2, r6
 8013158:	e9d3 0700 	ldrd	r0, r7, [r3]
 801315c:	a903      	add	r1, sp, #12
 801315e:	47b8      	blx	r7
 8013160:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013164:	4620      	mov	r0, r4
 8013166:	f7ff fe63 	bl	8012e30 <listen_message>
 801316a:	3d01      	subs	r5, #1
 801316c:	7960      	ldrb	r0, [r4, #5]
 801316e:	d1ef      	bne.n	8013150 <uxr_create_session+0x48>
 8013170:	fab0 f080 	clz	r0, r0
 8013174:	0940      	lsrs	r0, r0, #5
 8013176:	b013      	add	sp, #76	; 0x4c
 8013178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801317a:	bf00      	nop

0801317c <uxr_delete_session_retries>:
 801317c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801317e:	b091      	sub	sp, #68	; 0x44
 8013180:	4604      	mov	r4, r0
 8013182:	460d      	mov	r5, r1
 8013184:	f000 fb22 	bl	80137cc <uxr_session_header_offset>
 8013188:	2300      	movs	r3, #0
 801318a:	2210      	movs	r2, #16
 801318c:	9000      	str	r0, [sp, #0]
 801318e:	a904      	add	r1, sp, #16
 8013190:	a808      	add	r0, sp, #32
 8013192:	f7fe ff97 	bl	80120c4 <ucdr_init_buffer_origin_offset>
 8013196:	a908      	add	r1, sp, #32
 8013198:	4620      	mov	r0, r4
 801319a:	f000 fa65 	bl	8013668 <uxr_buffer_delete_session>
 801319e:	2200      	movs	r2, #0
 80131a0:	9b08      	ldr	r3, [sp, #32]
 80131a2:	4611      	mov	r1, r2
 80131a4:	4620      	mov	r0, r4
 80131a6:	f000 fab9 	bl	801371c <uxr_stamp_session_header>
 80131aa:	a808      	add	r0, sp, #32
 80131ac:	f7fe ffca 	bl	8012144 <ucdr_buffer_length>
 80131b0:	23ff      	movs	r3, #255	; 0xff
 80131b2:	4602      	mov	r2, r0
 80131b4:	7163      	strb	r3, [r4, #5]
 80131b6:	b1ed      	cbz	r5, 80131f4 <uxr_delete_session_retries+0x78>
 80131b8:	2600      	movs	r6, #0
 80131ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80131bc:	9203      	str	r2, [sp, #12]
 80131be:	e9d3 0700 	ldrd	r0, r7, [r3]
 80131c2:	a904      	add	r1, sp, #16
 80131c4:	47b8      	blx	r7
 80131c6:	3601      	adds	r6, #1
 80131c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80131cc:	4620      	mov	r0, r4
 80131ce:	f7ff fe2f 	bl	8012e30 <listen_message>
 80131d2:	42b5      	cmp	r5, r6
 80131d4:	7963      	ldrb	r3, [r4, #5]
 80131d6:	d007      	beq.n	80131e8 <uxr_delete_session_retries+0x6c>
 80131d8:	2bff      	cmp	r3, #255	; 0xff
 80131da:	9a03      	ldr	r2, [sp, #12]
 80131dc:	d0ed      	beq.n	80131ba <uxr_delete_session_retries+0x3e>
 80131de:	fab3 f083 	clz	r0, r3
 80131e2:	0940      	lsrs	r0, r0, #5
 80131e4:	b011      	add	sp, #68	; 0x44
 80131e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131e8:	2bff      	cmp	r3, #255	; 0xff
 80131ea:	bf08      	it	eq
 80131ec:	2000      	moveq	r0, #0
 80131ee:	d1f6      	bne.n	80131de <uxr_delete_session_retries+0x62>
 80131f0:	b011      	add	sp, #68	; 0x44
 80131f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80131f6:	a904      	add	r1, sp, #16
 80131f8:	e9d3 0500 	ldrd	r0, r5, [r3]
 80131fc:	47a8      	blx	r5
 80131fe:	7963      	ldrb	r3, [r4, #5]
 8013200:	fab3 f083 	clz	r0, r3
 8013204:	0940      	lsrs	r0, r0, #5
 8013206:	e7ed      	b.n	80131e4 <uxr_delete_session_retries+0x68>

08013208 <uxr_create_output_best_effort_stream>:
 8013208:	b510      	push	{r4, lr}
 801320a:	b084      	sub	sp, #16
 801320c:	e9cd 2100 	strd	r2, r1, [sp]
 8013210:	4604      	mov	r4, r0
 8013212:	f000 fadb 	bl	80137cc <uxr_session_header_offset>
 8013216:	e9dd 2100 	ldrd	r2, r1, [sp]
 801321a:	4603      	mov	r3, r0
 801321c:	f104 0008 	add.w	r0, r4, #8
 8013220:	b004      	add	sp, #16
 8013222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013226:	f001 b82d 	b.w	8014284 <uxr_add_output_best_effort_buffer>
 801322a:	bf00      	nop

0801322c <uxr_create_output_reliable_stream>:
 801322c:	b530      	push	{r4, r5, lr}
 801322e:	b089      	sub	sp, #36	; 0x24
 8013230:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013234:	9303      	str	r3, [sp, #12]
 8013236:	4604      	mov	r4, r0
 8013238:	f000 fac8 	bl	80137cc <uxr_session_header_offset>
 801323c:	4605      	mov	r5, r0
 801323e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8013242:	9905      	ldr	r1, [sp, #20]
 8013244:	9500      	str	r5, [sp, #0]
 8013246:	f104 0008 	add.w	r0, r4, #8
 801324a:	f001 f82d 	bl	80142a8 <uxr_add_output_reliable_buffer>
 801324e:	2200      	movs	r2, #0
 8013250:	b2c3      	uxtb	r3, r0
 8013252:	f363 0207 	bfi	r2, r3, #0, #8
 8013256:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801325a:	f363 220f 	bfi	r2, r3, #8, #8
 801325e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013262:	f363 4217 	bfi	r2, r3, #16, #8
 8013266:	0e03      	lsrs	r3, r0, #24
 8013268:	f363 621f 	bfi	r2, r3, #24, #8
 801326c:	4610      	mov	r0, r2
 801326e:	b009      	add	sp, #36	; 0x24
 8013270:	bd30      	pop	{r4, r5, pc}
 8013272:	bf00      	nop

08013274 <uxr_create_input_best_effort_stream>:
 8013274:	b082      	sub	sp, #8
 8013276:	3008      	adds	r0, #8
 8013278:	b002      	add	sp, #8
 801327a:	f001 b82f 	b.w	80142dc <uxr_add_input_best_effort_buffer>
 801327e:	bf00      	nop

08013280 <uxr_create_input_reliable_stream>:
 8013280:	b510      	push	{r4, lr}
 8013282:	b084      	sub	sp, #16
 8013284:	4c0b      	ldr	r4, [pc, #44]	; (80132b4 <uxr_create_input_reliable_stream+0x34>)
 8013286:	9400      	str	r4, [sp, #0]
 8013288:	3008      	adds	r0, #8
 801328a:	f001 f83d 	bl	8014308 <uxr_add_input_reliable_buffer>
 801328e:	2200      	movs	r2, #0
 8013290:	b2c3      	uxtb	r3, r0
 8013292:	f363 0207 	bfi	r2, r3, #0, #8
 8013296:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801329a:	f363 220f 	bfi	r2, r3, #8, #8
 801329e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80132a2:	f363 4217 	bfi	r2, r3, #16, #8
 80132a6:	0e03      	lsrs	r3, r0, #24
 80132a8:	f363 621f 	bfi	r2, r3, #24, #8
 80132ac:	4610      	mov	r0, r2
 80132ae:	b004      	add	sp, #16
 80132b0:	bd10      	pop	{r4, pc}
 80132b2:	bf00      	nop
 80132b4:	08012a91 	.word	0x08012a91

080132b8 <uxr_sync_session>:
 80132b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132ba:	b093      	sub	sp, #76	; 0x4c
 80132bc:	4604      	mov	r4, r0
 80132be:	460d      	mov	r5, r1
 80132c0:	f000 fa84 	bl	80137cc <uxr_session_header_offset>
 80132c4:	a905      	add	r1, sp, #20
 80132c6:	9000      	str	r0, [sp, #0]
 80132c8:	2300      	movs	r3, #0
 80132ca:	a80a      	add	r0, sp, #40	; 0x28
 80132cc:	2214      	movs	r2, #20
 80132ce:	f7fe fef9 	bl	80120c4 <ucdr_init_buffer_origin_offset>
 80132d2:	2300      	movs	r3, #0
 80132d4:	2208      	movs	r2, #8
 80132d6:	210e      	movs	r1, #14
 80132d8:	a80a      	add	r0, sp, #40	; 0x28
 80132da:	f001 f86d 	bl	80143b8 <uxr_buffer_submessage_header>
 80132de:	f001 f8cd 	bl	801447c <uxr_nanos>
 80132e2:	a31b      	add	r3, pc, #108	; (adr r3, 8013350 <uxr_sync_session+0x98>)
 80132e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e8:	4606      	mov	r6, r0
 80132ea:	460f      	mov	r7, r1
 80132ec:	f7ed fcdc 	bl	8000ca8 <__aeabi_ldivmod>
 80132f0:	a317      	add	r3, pc, #92	; (adr r3, 8013350 <uxr_sync_session+0x98>)
 80132f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f6:	4684      	mov	ip, r0
 80132f8:	4639      	mov	r1, r7
 80132fa:	4630      	mov	r0, r6
 80132fc:	f8cd c00c 	str.w	ip, [sp, #12]
 8013300:	f7ed fcd2 	bl	8000ca8 <__aeabi_ldivmod>
 8013304:	a903      	add	r1, sp, #12
 8013306:	a80a      	add	r0, sp, #40	; 0x28
 8013308:	9204      	str	r2, [sp, #16]
 801330a:	f001 ff79 	bl	8015200 <uxr_serialize_TIMESTAMP_Payload>
 801330e:	2200      	movs	r2, #0
 8013310:	4611      	mov	r1, r2
 8013312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013314:	4620      	mov	r0, r4
 8013316:	f000 fa01 	bl	801371c <uxr_stamp_session_header>
 801331a:	a80a      	add	r0, sp, #40	; 0x28
 801331c:	f7fe ff12 	bl	8012144 <ucdr_buffer_length>
 8013320:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013322:	4602      	mov	r2, r0
 8013324:	a905      	add	r1, sp, #20
 8013326:	e9d3 0600 	ldrd	r0, r6, [r3]
 801332a:	47b0      	blx	r6
 801332c:	2300      	movs	r3, #0
 801332e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8013332:	e002      	b.n	801333a <uxr_sync_session+0x82>
 8013334:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
 8013338:	b938      	cbnz	r0, 801334a <uxr_sync_session+0x92>
 801333a:	4629      	mov	r1, r5
 801333c:	4620      	mov	r0, r4
 801333e:	f7ff fe0d 	bl	8012f5c <listen_message_reliably>
 8013342:	2800      	cmp	r0, #0
 8013344:	d1f6      	bne.n	8013334 <uxr_sync_session+0x7c>
 8013346:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
 801334a:	b013      	add	sp, #76	; 0x4c
 801334c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801334e:	bf00      	nop
 8013350:	3b9aca00 	.word	0x3b9aca00
 8013354:	00000000 	.word	0x00000000

08013358 <uxr_epoch_nanos>:
 8013358:	b510      	push	{r4, lr}
 801335a:	4604      	mov	r4, r0
 801335c:	f001 f88e 	bl	801447c <uxr_nanos>
 8013360:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8013364:	1ac0      	subs	r0, r0, r3
 8013366:	eb61 0102 	sbc.w	r1, r1, r2
 801336a:	bd10      	pop	{r4, pc}

0801336c <uxr_flash_output_streams>:
 801336c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013370:	7e03      	ldrb	r3, [r0, #24]
 8013372:	b084      	sub	sp, #16
 8013374:	4604      	mov	r4, r0
 8013376:	b1fb      	cbz	r3, 80133b8 <uxr_flash_output_streams+0x4c>
 8013378:	f04f 0900 	mov.w	r9, #0
 801337c:	4648      	mov	r0, r9
 801337e:	f10d 0802 	add.w	r8, sp, #2
 8013382:	af03      	add	r7, sp, #12
 8013384:	ae02      	add	r6, sp, #8
 8013386:	2201      	movs	r2, #1
 8013388:	4611      	mov	r1, r2
 801338a:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801338e:	f000 fed9 	bl	8014144 <uxr_stream_id>
 8013392:	3508      	adds	r5, #8
 8013394:	4684      	mov	ip, r0
 8013396:	4643      	mov	r3, r8
 8013398:	4628      	mov	r0, r5
 801339a:	463a      	mov	r2, r7
 801339c:	4631      	mov	r1, r6
 801339e:	f8cd c004 	str.w	ip, [sp, #4]
 80133a2:	f005 fb97 	bl	8018ad4 <uxr_prepare_best_effort_buffer_to_send>
 80133a6:	2800      	cmp	r0, #0
 80133a8:	d13d      	bne.n	8013426 <uxr_flash_output_streams+0xba>
 80133aa:	7e23      	ldrb	r3, [r4, #24]
 80133ac:	f109 0901 	add.w	r9, r9, #1
 80133b0:	fa5f f089 	uxtb.w	r0, r9
 80133b4:	4283      	cmp	r3, r0
 80133b6:	d8e6      	bhi.n	8013386 <uxr_flash_output_streams+0x1a>
 80133b8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80133bc:	b383      	cbz	r3, 8013420 <uxr_flash_output_streams+0xb4>
 80133be:	f04f 0900 	mov.w	r9, #0
 80133c2:	4648      	mov	r0, r9
 80133c4:	f10d 0802 	add.w	r8, sp, #2
 80133c8:	af03      	add	r7, sp, #12
 80133ca:	ae02      	add	r6, sp, #8
 80133cc:	2201      	movs	r2, #1
 80133ce:	2102      	movs	r1, #2
 80133d0:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80133d4:	f000 feb6 	bl	8014144 <uxr_stream_id>
 80133d8:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80133dc:	3520      	adds	r5, #32
 80133de:	9001      	str	r0, [sp, #4]
 80133e0:	e00c      	b.n	80133fc <uxr_flash_output_streams+0x90>
 80133e2:	9b02      	ldr	r3, [sp, #8]
 80133e4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80133e8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80133ec:	f000 f996 	bl	801371c <uxr_stamp_session_header>
 80133f0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80133f2:	9a03      	ldr	r2, [sp, #12]
 80133f4:	9902      	ldr	r1, [sp, #8]
 80133f6:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80133fa:	47d0      	blx	sl
 80133fc:	4643      	mov	r3, r8
 80133fe:	463a      	mov	r2, r7
 8013400:	4631      	mov	r1, r6
 8013402:	4628      	mov	r0, r5
 8013404:	f005 fd64 	bl	8018ed0 <uxr_prepare_next_reliable_buffer_to_send>
 8013408:	4603      	mov	r3, r0
 801340a:	4620      	mov	r0, r4
 801340c:	2b00      	cmp	r3, #0
 801340e:	d1e8      	bne.n	80133e2 <uxr_flash_output_streams+0x76>
 8013410:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8013414:	f109 0901 	add.w	r9, r9, #1
 8013418:	fa5f f089 	uxtb.w	r0, r9
 801341c:	4283      	cmp	r3, r0
 801341e:	d8d5      	bhi.n	80133cc <uxr_flash_output_streams+0x60>
 8013420:	b004      	add	sp, #16
 8013422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013426:	9b02      	ldr	r3, [sp, #8]
 8013428:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801342c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013430:	4620      	mov	r0, r4
 8013432:	f000 f973 	bl	801371c <uxr_stamp_session_header>
 8013436:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013438:	9a03      	ldr	r2, [sp, #12]
 801343a:	9902      	ldr	r1, [sp, #8]
 801343c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013440:	47a8      	blx	r5
 8013442:	f109 0901 	add.w	r9, r9, #1
 8013446:	7e23      	ldrb	r3, [r4, #24]
 8013448:	fa5f f089 	uxtb.w	r0, r9
 801344c:	4283      	cmp	r3, r0
 801344e:	d89a      	bhi.n	8013386 <uxr_flash_output_streams+0x1a>
 8013450:	e7b2      	b.n	80133b8 <uxr_flash_output_streams+0x4c>
 8013452:	bf00      	nop

08013454 <uxr_run_session_until_data>:
 8013454:	b570      	push	{r4, r5, r6, lr}
 8013456:	4604      	mov	r4, r0
 8013458:	460d      	mov	r5, r1
 801345a:	f000 fff3 	bl	8014444 <uxr_millis>
 801345e:	4606      	mov	r6, r0
 8013460:	4620      	mov	r0, r4
 8013462:	f7ff ff83 	bl	801336c <uxr_flash_output_streams>
 8013466:	2300      	movs	r3, #0
 8013468:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 801346c:	4629      	mov	r1, r5
 801346e:	e005      	b.n	801347c <uxr_run_session_until_data+0x28>
 8013470:	f000 ffe8 	bl	8014444 <uxr_millis>
 8013474:	1b83      	subs	r3, r0, r6
 8013476:	1ae9      	subs	r1, r5, r3
 8013478:	2900      	cmp	r1, #0
 801347a:	dd07      	ble.n	801348c <uxr_run_session_until_data+0x38>
 801347c:	4620      	mov	r0, r4
 801347e:	f7ff fd6d 	bl	8012f5c <listen_message_reliably>
 8013482:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8013486:	2800      	cmp	r0, #0
 8013488:	d0f2      	beq.n	8013470 <uxr_run_session_until_data+0x1c>
 801348a:	bd70      	pop	{r4, r5, r6, pc}
 801348c:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8013490:	bd70      	pop	{r4, r5, r6, pc}
 8013492:	bf00      	nop

08013494 <uxr_run_session_until_confirm_delivery>:
 8013494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013496:	4605      	mov	r5, r0
 8013498:	460e      	mov	r6, r1
 801349a:	f100 0708 	add.w	r7, r0, #8
 801349e:	2400      	movs	r4, #0
 80134a0:	f7ff ff64 	bl	801336c <uxr_flash_output_streams>
 80134a4:	e005      	b.n	80134b2 <uxr_run_session_until_confirm_delivery+0x1e>
 80134a6:	b964      	cbnz	r4, 80134c2 <uxr_run_session_until_confirm_delivery+0x2e>
 80134a8:	f7ff fd58 	bl	8012f5c <listen_message_reliably>
 80134ac:	f080 0001 	eor.w	r0, r0, #1
 80134b0:	b2c4      	uxtb	r4, r0
 80134b2:	4638      	mov	r0, r7
 80134b4:	f000 ff6a 	bl	801438c <uxr_output_streams_confirmed>
 80134b8:	4603      	mov	r3, r0
 80134ba:	4631      	mov	r1, r6
 80134bc:	4628      	mov	r0, r5
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d0f1      	beq.n	80134a6 <uxr_run_session_until_confirm_delivery+0x12>
 80134c2:	4638      	mov	r0, r7
 80134c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80134c8:	f000 bf60 	b.w	801438c <uxr_output_streams_confirmed>

080134cc <uxr_run_session_until_all_status>:
 80134cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134d0:	9d08      	ldr	r5, [sp, #32]
 80134d2:	460f      	mov	r7, r1
 80134d4:	4692      	mov	sl, r2
 80134d6:	461c      	mov	r4, r3
 80134d8:	4606      	mov	r6, r0
 80134da:	f7ff ff47 	bl	801336c <uxr_flash_output_streams>
 80134de:	b125      	cbz	r5, 80134ea <uxr_run_session_until_all_status+0x1e>
 80134e0:	462a      	mov	r2, r5
 80134e2:	21ff      	movs	r1, #255	; 0xff
 80134e4:	4620      	mov	r0, r4
 80134e6:	f006 f975 	bl	80197d4 <memset>
 80134ea:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 80134ee:	67f5      	str	r5, [r6, #124]	; 0x7c
 80134f0:	f000 ffa8 	bl	8014444 <uxr_millis>
 80134f4:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 80134f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80134fc:	4680      	mov	r8, r0
 80134fe:	4639      	mov	r1, r7
 8013500:	4630      	mov	r0, r6
 8013502:	f7ff fd2b 	bl	8012f5c <listen_message_reliably>
 8013506:	f000 ff9d 	bl	8014444 <uxr_millis>
 801350a:	eba0 0008 	sub.w	r0, r0, r8
 801350e:	1a39      	subs	r1, r7, r0
 8013510:	b33d      	cbz	r5, 8013562 <uxr_run_session_until_all_status+0x96>
 8013512:	46cc      	mov	ip, r9
 8013514:	464a      	mov	r2, r9
 8013516:	2301      	movs	r3, #1
 8013518:	e002      	b.n	8013520 <uxr_run_session_until_all_status+0x54>
 801351a:	42ab      	cmp	r3, r5
 801351c:	d20c      	bcs.n	8013538 <uxr_run_session_until_all_status+0x6c>
 801351e:	3301      	adds	r3, #1
 8013520:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8013524:	2cff      	cmp	r4, #255	; 0xff
 8013526:	d1f8      	bne.n	801351a <uxr_run_session_until_all_status+0x4e>
 8013528:	42ab      	cmp	r3, r5
 801352a:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 801352e:	d213      	bcs.n	8013558 <uxr_run_session_until_all_status+0x8c>
 8013530:	2800      	cmp	r0, #0
 8013532:	d0f4      	beq.n	801351e <uxr_run_session_until_all_status+0x52>
 8013534:	2900      	cmp	r1, #0
 8013536:	dce3      	bgt.n	8013500 <uxr_run_session_until_all_status+0x34>
 8013538:	2300      	movs	r3, #0
 801353a:	444d      	add	r5, r9
 801353c:	67f3      	str	r3, [r6, #124]	; 0x7c
 801353e:	e001      	b.n	8013544 <uxr_run_session_until_all_status+0x78>
 8013540:	2b01      	cmp	r3, #1
 8013542:	d812      	bhi.n	801356a <uxr_run_session_until_all_status+0x9e>
 8013544:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8013548:	4565      	cmp	r5, ip
 801354a:	d1f9      	bne.n	8013540 <uxr_run_session_until_all_status+0x74>
 801354c:	2b01      	cmp	r3, #1
 801354e:	bf8c      	ite	hi
 8013550:	2000      	movhi	r0, #0
 8013552:	2001      	movls	r0, #1
 8013554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013558:	2900      	cmp	r1, #0
 801355a:	dded      	ble.n	8013538 <uxr_run_session_until_all_status+0x6c>
 801355c:	2800      	cmp	r0, #0
 801355e:	d1cf      	bne.n	8013500 <uxr_run_session_until_all_status+0x34>
 8013560:	e7ea      	b.n	8013538 <uxr_run_session_until_all_status+0x6c>
 8013562:	67f5      	str	r5, [r6, #124]	; 0x7c
 8013564:	2001      	movs	r0, #1
 8013566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801356a:	2000      	movs	r0, #0
 801356c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013570 <uxr_prepare_stream_to_write_submessage>:
 8013570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013574:	b082      	sub	sp, #8
 8013576:	4682      	mov	sl, r0
 8013578:	4610      	mov	r0, r2
 801357a:	4615      	mov	r5, r2
 801357c:	461e      	mov	r6, r3
 801357e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8013582:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8013586:	9101      	str	r1, [sp, #4]
 8013588:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801358c:	f000 ff54 	bl	8014438 <uxr_submessage_padding>
 8013590:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013594:	f105 0904 	add.w	r9, r5, #4
 8013598:	2b01      	cmp	r3, #1
 801359a:	4481      	add	r9, r0
 801359c:	d01d      	beq.n	80135da <uxr_prepare_stream_to_write_submessage+0x6a>
 801359e:	2b02      	cmp	r3, #2
 80135a0:	d116      	bne.n	80135d0 <uxr_prepare_stream_to_write_submessage+0x60>
 80135a2:	4621      	mov	r1, r4
 80135a4:	f10a 0008 	add.w	r0, sl, #8
 80135a8:	f000 fece 	bl	8014348 <uxr_get_output_reliable_stream>
 80135ac:	4604      	mov	r4, r0
 80135ae:	b158      	cbz	r0, 80135c8 <uxr_prepare_stream_to_write_submessage+0x58>
 80135b0:	4649      	mov	r1, r9
 80135b2:	4632      	mov	r2, r6
 80135b4:	f005 fb32 	bl	8018c1c <uxr_prepare_reliable_buffer_to_write>
 80135b8:	4604      	mov	r4, r0
 80135ba:	b12c      	cbz	r4, 80135c8 <uxr_prepare_stream_to_write_submessage+0x58>
 80135bc:	4643      	mov	r3, r8
 80135be:	b2aa      	uxth	r2, r5
 80135c0:	4639      	mov	r1, r7
 80135c2:	4630      	mov	r0, r6
 80135c4:	f000 fef8 	bl	80143b8 <uxr_buffer_submessage_header>
 80135c8:	4620      	mov	r0, r4
 80135ca:	b002      	add	sp, #8
 80135cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135d0:	2400      	movs	r4, #0
 80135d2:	4620      	mov	r0, r4
 80135d4:	b002      	add	sp, #8
 80135d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135da:	4621      	mov	r1, r4
 80135dc:	f10a 0008 	add.w	r0, sl, #8
 80135e0:	f000 feaa 	bl	8014338 <uxr_get_output_best_effort_stream>
 80135e4:	4604      	mov	r4, r0
 80135e6:	2800      	cmp	r0, #0
 80135e8:	d0ee      	beq.n	80135c8 <uxr_prepare_stream_to_write_submessage+0x58>
 80135ea:	4649      	mov	r1, r9
 80135ec:	4632      	mov	r2, r6
 80135ee:	f005 fa51 	bl	8018a94 <uxr_prepare_best_effort_buffer_to_write>
 80135f2:	4604      	mov	r4, r0
 80135f4:	e7e1      	b.n	80135ba <uxr_prepare_stream_to_write_submessage+0x4a>
 80135f6:	bf00      	nop

080135f8 <uxr_init_session_info>:
 80135f8:	b470      	push	{r4, r5, r6}
 80135fa:	7102      	strb	r2, [r0, #4]
 80135fc:	0e16      	lsrs	r6, r2, #24
 80135fe:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8013602:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8013606:	23ff      	movs	r3, #255	; 0xff
 8013608:	2209      	movs	r2, #9
 801360a:	7046      	strb	r6, [r0, #1]
 801360c:	7085      	strb	r5, [r0, #2]
 801360e:	70c4      	strb	r4, [r0, #3]
 8013610:	7001      	strb	r1, [r0, #0]
 8013612:	bc70      	pop	{r4, r5, r6}
 8013614:	80c2      	strh	r2, [r0, #6]
 8013616:	7143      	strb	r3, [r0, #5]
 8013618:	4770      	bx	lr
 801361a:	bf00      	nop

0801361c <uxr_buffer_create_session>:
 801361c:	b570      	push	{r4, r5, r6, lr}
 801361e:	4d11      	ldr	r5, [pc, #68]	; (8013664 <uxr_buffer_create_session+0x48>)
 8013620:	f8d0 3001 	ldr.w	r3, [r0, #1]
 8013624:	7806      	ldrb	r6, [r0, #0]
 8013626:	b088      	sub	sp, #32
 8013628:	460c      	mov	r4, r1
 801362a:	9302      	str	r3, [sp, #8]
 801362c:	2101      	movs	r1, #1
 801362e:	2300      	movs	r3, #0
 8013630:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013634:	88aa      	ldrh	r2, [r5, #4]
 8013636:	80c1      	strh	r1, [r0, #6]
 8013638:	f88d 600c 	strb.w	r6, [sp, #12]
 801363c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013640:	682e      	ldr	r6, [r5, #0]
 8013642:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013646:	4619      	mov	r1, r3
 8013648:	2210      	movs	r2, #16
 801364a:	4620      	mov	r0, r4
 801364c:	f88d 300d 	strb.w	r3, [sp, #13]
 8013650:	9600      	str	r6, [sp, #0]
 8013652:	f000 feb1 	bl	80143b8 <uxr_buffer_submessage_header>
 8013656:	4620      	mov	r0, r4
 8013658:	4669      	mov	r1, sp
 801365a:	f001 fc65 	bl	8014f28 <uxr_serialize_CREATE_CLIENT_Payload>
 801365e:	b008      	add	sp, #32
 8013660:	bd70      	pop	{r4, r5, r6, pc}
 8013662:	bf00      	nop
 8013664:	0801eb20 	.word	0x0801eb20

08013668 <uxr_buffer_delete_session>:
 8013668:	b530      	push	{r4, r5, lr}
 801366a:	4b0c      	ldr	r3, [pc, #48]	; (801369c <uxr_buffer_delete_session+0x34>)
 801366c:	b083      	sub	sp, #12
 801366e:	891b      	ldrh	r3, [r3, #8]
 8013670:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013674:	2202      	movs	r2, #2
 8013676:	460c      	mov	r4, r1
 8013678:	80c2      	strh	r2, [r0, #6]
 801367a:	2300      	movs	r3, #0
 801367c:	2204      	movs	r2, #4
 801367e:	4608      	mov	r0, r1
 8013680:	f44f 7500 	mov.w	r5, #512	; 0x200
 8013684:	2103      	movs	r1, #3
 8013686:	f8ad 5004 	strh.w	r5, [sp, #4]
 801368a:	f000 fe95 	bl	80143b8 <uxr_buffer_submessage_header>
 801368e:	4620      	mov	r0, r4
 8013690:	a901      	add	r1, sp, #4
 8013692:	f001 fce3 	bl	801505c <uxr_serialize_DELETE_Payload>
 8013696:	b003      	add	sp, #12
 8013698:	bd30      	pop	{r4, r5, pc}
 801369a:	bf00      	nop
 801369c:	0801eb20 	.word	0x0801eb20

080136a0 <uxr_read_create_session_status>:
 80136a0:	b510      	push	{r4, lr}
 80136a2:	b088      	sub	sp, #32
 80136a4:	4604      	mov	r4, r0
 80136a6:	4608      	mov	r0, r1
 80136a8:	a901      	add	r1, sp, #4
 80136aa:	f001 fce7 	bl	801507c <uxr_deserialize_STATUS_AGENT_Payload>
 80136ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80136b2:	7163      	strb	r3, [r4, #5]
 80136b4:	b008      	add	sp, #32
 80136b6:	bd10      	pop	{r4, pc}

080136b8 <uxr_read_delete_session_status>:
 80136b8:	b510      	push	{r4, lr}
 80136ba:	4604      	mov	r4, r0
 80136bc:	b084      	sub	sp, #16
 80136be:	4608      	mov	r0, r1
 80136c0:	a902      	add	r1, sp, #8
 80136c2:	f001 fd0b 	bl	80150dc <uxr_deserialize_STATUS_Payload>
 80136c6:	88e3      	ldrh	r3, [r4, #6]
 80136c8:	2b02      	cmp	r3, #2
 80136ca:	d001      	beq.n	80136d0 <uxr_read_delete_session_status+0x18>
 80136cc:	b004      	add	sp, #16
 80136ce:	bd10      	pop	{r4, pc}
 80136d0:	f10d 000a 	add.w	r0, sp, #10
 80136d4:	f7ff f8c2 	bl	801285c <uxr_object_id_from_raw>
 80136d8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80136dc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80136e0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80136e4:	b29b      	uxth	r3, r3
 80136e6:	2b02      	cmp	r3, #2
 80136e8:	bf04      	itt	eq
 80136ea:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80136ee:	7163      	strbeq	r3, [r4, #5]
 80136f0:	b004      	add	sp, #16
 80136f2:	bd10      	pop	{r4, pc}

080136f4 <uxr_stamp_create_session_header>:
 80136f4:	b510      	push	{r4, lr}
 80136f6:	4604      	mov	r4, r0
 80136f8:	b08a      	sub	sp, #40	; 0x28
 80136fa:	a802      	add	r0, sp, #8
 80136fc:	2208      	movs	r2, #8
 80136fe:	f7fe fcf3 	bl	80120e8 <ucdr_init_buffer>
 8013702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013706:	9400      	str	r4, [sp, #0]
 8013708:	2300      	movs	r3, #0
 801370a:	a802      	add	r0, sp, #8
 801370c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8013710:	461a      	mov	r2, r3
 8013712:	f001 f845 	bl	80147a0 <uxr_serialize_message_header>
 8013716:	b00a      	add	sp, #40	; 0x28
 8013718:	bd10      	pop	{r4, pc}
 801371a:	bf00      	nop

0801371c <uxr_stamp_session_header>:
 801371c:	b570      	push	{r4, r5, r6, lr}
 801371e:	4604      	mov	r4, r0
 8013720:	b08c      	sub	sp, #48	; 0x30
 8013722:	460d      	mov	r5, r1
 8013724:	4616      	mov	r6, r2
 8013726:	4619      	mov	r1, r3
 8013728:	a804      	add	r0, sp, #16
 801372a:	2208      	movs	r2, #8
 801372c:	9603      	str	r6, [sp, #12]
 801372e:	f7fe fcdb 	bl	80120e8 <ucdr_init_buffer>
 8013732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013736:	9b03      	ldr	r3, [sp, #12]
 8013738:	9400      	str	r4, [sp, #0]
 801373a:	462a      	mov	r2, r5
 801373c:	a804      	add	r0, sp, #16
 801373e:	f001 f82f 	bl	80147a0 <uxr_serialize_message_header>
 8013742:	b00c      	add	sp, #48	; 0x30
 8013744:	bd70      	pop	{r4, r5, r6, pc}
 8013746:	bf00      	nop

08013748 <uxr_read_session_header>:
 8013748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801374c:	4607      	mov	r7, r0
 801374e:	b084      	sub	sp, #16
 8013750:	4608      	mov	r0, r1
 8013752:	460c      	mov	r4, r1
 8013754:	4615      	mov	r5, r2
 8013756:	461e      	mov	r6, r3
 8013758:	f7fe fcf8 	bl	801214c <ucdr_buffer_remaining>
 801375c:	2808      	cmp	r0, #8
 801375e:	d803      	bhi.n	8013768 <uxr_read_session_header+0x20>
 8013760:	2000      	movs	r0, #0
 8013762:	b004      	add	sp, #16
 8013764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013768:	f10d 080c 	add.w	r8, sp, #12
 801376c:	4633      	mov	r3, r6
 801376e:	462a      	mov	r2, r5
 8013770:	4620      	mov	r0, r4
 8013772:	f8cd 8000 	str.w	r8, [sp]
 8013776:	f10d 010b 	add.w	r1, sp, #11
 801377a:	f001 f82f 	bl	80147dc <uxr_deserialize_message_header>
 801377e:	783a      	ldrb	r2, [r7, #0]
 8013780:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8013784:	4293      	cmp	r3, r2
 8013786:	d1eb      	bne.n	8013760 <uxr_read_session_header+0x18>
 8013788:	061b      	lsls	r3, r3, #24
 801378a:	d41c      	bmi.n	80137c6 <uxr_read_session_header+0x7e>
 801378c:	f898 2000 	ldrb.w	r2, [r8]
 8013790:	787b      	ldrb	r3, [r7, #1]
 8013792:	429a      	cmp	r2, r3
 8013794:	d003      	beq.n	801379e <uxr_read_session_header+0x56>
 8013796:	2001      	movs	r0, #1
 8013798:	f080 0001 	eor.w	r0, r0, #1
 801379c:	e7e1      	b.n	8013762 <uxr_read_session_header+0x1a>
 801379e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80137a2:	78bb      	ldrb	r3, [r7, #2]
 80137a4:	429a      	cmp	r2, r3
 80137a6:	f107 0102 	add.w	r1, r7, #2
 80137aa:	d1f4      	bne.n	8013796 <uxr_read_session_header+0x4e>
 80137ac:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80137b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80137b4:	429a      	cmp	r2, r3
 80137b6:	d1ee      	bne.n	8013796 <uxr_read_session_header+0x4e>
 80137b8:	784b      	ldrb	r3, [r1, #1]
 80137ba:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80137be:	429a      	cmp	r2, r3
 80137c0:	d1e9      	bne.n	8013796 <uxr_read_session_header+0x4e>
 80137c2:	2000      	movs	r0, #0
 80137c4:	e7e8      	b.n	8013798 <uxr_read_session_header+0x50>
 80137c6:	2001      	movs	r0, #1
 80137c8:	e7cb      	b.n	8013762 <uxr_read_session_header+0x1a>
 80137ca:	bf00      	nop

080137cc <uxr_session_header_offset>:
 80137cc:	f990 3000 	ldrsb.w	r3, [r0]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	bfac      	ite	ge
 80137d4:	2008      	movge	r0, #8
 80137d6:	2004      	movlt	r0, #4
 80137d8:	4770      	bx	lr
 80137da:	bf00      	nop

080137dc <uxr_init_base_object_request>:
 80137dc:	b530      	push	{r4, r5, lr}
 80137de:	88c3      	ldrh	r3, [r0, #6]
 80137e0:	b083      	sub	sp, #12
 80137e2:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 80137e6:	9101      	str	r1, [sp, #4]
 80137e8:	f1a3 010a 	sub.w	r1, r3, #10
 80137ec:	b289      	uxth	r1, r1
 80137ee:	42a1      	cmp	r1, r4
 80137f0:	d80e      	bhi.n	8013810 <uxr_init_base_object_request+0x34>
 80137f2:	3301      	adds	r3, #1
 80137f4:	b29c      	uxth	r4, r3
 80137f6:	f3c3 2507 	ubfx	r5, r3, #8, #8
 80137fa:	b2db      	uxtb	r3, r3
 80137fc:	80c4      	strh	r4, [r0, #6]
 80137fe:	1c91      	adds	r1, r2, #2
 8013800:	9801      	ldr	r0, [sp, #4]
 8013802:	7015      	strb	r5, [r2, #0]
 8013804:	7053      	strb	r3, [r2, #1]
 8013806:	f7ff f83d 	bl	8012884 <uxr_object_id_to_raw>
 801380a:	4620      	mov	r0, r4
 801380c:	b003      	add	sp, #12
 801380e:	bd30      	pop	{r4, r5, pc}
 8013810:	230a      	movs	r3, #10
 8013812:	461c      	mov	r4, r3
 8013814:	2500      	movs	r5, #0
 8013816:	e7f1      	b.n	80137fc <uxr_init_base_object_request+0x20>

08013818 <uxr_parse_base_object_request>:
 8013818:	b570      	push	{r4, r5, r6, lr}
 801381a:	4604      	mov	r4, r0
 801381c:	3002      	adds	r0, #2
 801381e:	460d      	mov	r5, r1
 8013820:	4616      	mov	r6, r2
 8013822:	f7ff f81b 	bl	801285c <uxr_object_id_from_raw>
 8013826:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801382a:	8028      	strh	r0, [r5, #0]
 801382c:	806b      	strh	r3, [r5, #2]
 801382e:	7822      	ldrb	r2, [r4, #0]
 8013830:	7863      	ldrb	r3, [r4, #1]
 8013832:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013836:	8033      	strh	r3, [r6, #0]
 8013838:	bd70      	pop	{r4, r5, r6, pc}
 801383a:	bf00      	nop

0801383c <uxr_init_framing_io>:
 801383c:	2300      	movs	r3, #0
 801383e:	7041      	strb	r1, [r0, #1]
 8013840:	7003      	strb	r3, [r0, #0]
 8013842:	8583      	strh	r3, [r0, #44]	; 0x2c
 8013844:	4770      	bx	lr
 8013846:	bf00      	nop

08013848 <uxr_write_framed_msg>:
 8013848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801384c:	7845      	ldrb	r5, [r0, #1]
 801384e:	b085      	sub	sp, #20
 8013850:	4604      	mov	r4, r0
 8013852:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 8013856:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 801385a:	f1bc 0f01 	cmp.w	ip, #1
 801385e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8013862:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8013866:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 801386a:	460e      	mov	r6, r1
 801386c:	4617      	mov	r7, r2
 801386e:	469b      	mov	fp, r3
 8013870:	f240 811c 	bls.w	8013aac <uxr_write_framed_msg+0x264>
 8013874:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8013878:	2302      	movs	r3, #2
 801387a:	2a01      	cmp	r2, #1
 801387c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8013880:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013884:	f240 8096 	bls.w	80139b4 <uxr_write_framed_msg+0x16c>
 8013888:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801388a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801388e:	b2d9      	uxtb	r1, r3
 8013890:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8013894:	2203      	movs	r2, #3
 8013896:	2b01      	cmp	r3, #1
 8013898:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801389c:	f240 809f 	bls.w	80139de <uxr_write_framed_msg+0x196>
 80138a0:	18a3      	adds	r3, r4, r2
 80138a2:	3201      	adds	r2, #1
 80138a4:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 80138a8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80138ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80138ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80138b2:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80138b6:	2901      	cmp	r1, #1
 80138b8:	eb04 0102 	add.w	r1, r4, r2
 80138bc:	f240 8107 	bls.w	8013ace <uxr_write_framed_msg+0x286>
 80138c0:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 80138c4:	3201      	adds	r2, #1
 80138c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80138c8:	b2d2      	uxtb	r2, r2
 80138ca:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	f000 810c 	beq.w	8013aec <uxr_write_framed_msg+0x2a4>
 80138d4:	f04f 0a00 	mov.w	sl, #0
 80138d8:	46d1      	mov	r9, sl
 80138da:	4653      	mov	r3, sl
 80138dc:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80138e0:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80138e4:	2901      	cmp	r1, #1
 80138e6:	f240 80a8 	bls.w	8013a3a <uxr_write_framed_msg+0x1f2>
 80138ea:	2a29      	cmp	r2, #41	; 0x29
 80138ec:	f200 8083 	bhi.w	80139f6 <uxr_write_framed_msg+0x1ae>
 80138f0:	18a1      	adds	r1, r4, r2
 80138f2:	3201      	adds	r2, #1
 80138f4:	b2d2      	uxtb	r2, r2
 80138f6:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 80138fa:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80138fe:	ea8a 0303 	eor.w	r3, sl, r3
 8013902:	4986      	ldr	r1, [pc, #536]	; (8013b1c <uxr_write_framed_msg+0x2d4>)
 8013904:	b2db      	uxtb	r3, r3
 8013906:	f109 0901 	add.w	r9, r9, #1
 801390a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801390e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013910:	fa1f f989 	uxth.w	r9, r9
 8013914:	4549      	cmp	r1, r9
 8013916:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 801391a:	464b      	mov	r3, r9
 801391c:	d8de      	bhi.n	80138dc <uxr_write_framed_msg+0x94>
 801391e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8013922:	fa5f f98a 	uxtb.w	r9, sl
 8013926:	9301      	str	r3, [sp, #4]
 8013928:	f04f 0b00 	mov.w	fp, #0
 801392c:	f88d 900c 	strb.w	r9, [sp, #12]
 8013930:	f88d 300d 	strb.w	r3, [sp, #13]
 8013934:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 8013938:	fa5f f18a 	uxtb.w	r1, sl
 801393c:	2901      	cmp	r1, #1
 801393e:	d920      	bls.n	8013982 <uxr_write_framed_msg+0x13a>
 8013940:	2a29      	cmp	r2, #41	; 0x29
 8013942:	f240 808c 	bls.w	8013a5e <uxr_write_framed_msg+0x216>
 8013946:	2500      	movs	r5, #0
 8013948:	e000      	b.n	801394c <uxr_write_framed_msg+0x104>
 801394a:	b160      	cbz	r0, 8013966 <uxr_write_framed_msg+0x11e>
 801394c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8013950:	1b52      	subs	r2, r2, r5
 8013952:	4421      	add	r1, r4
 8013954:	4643      	mov	r3, r8
 8013956:	4638      	mov	r0, r7
 8013958:	47b0      	blx	r6
 801395a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801395e:	4405      	add	r5, r0
 8013960:	4295      	cmp	r5, r2
 8013962:	d3f2      	bcc.n	801394a <uxr_write_framed_msg+0x102>
 8013964:	d003      	beq.n	801396e <uxr_write_framed_msg+0x126>
 8013966:	2000      	movs	r0, #0
 8013968:	b005      	add	sp, #20
 801396a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801396e:	fa5f f18a 	uxtb.w	r1, sl
 8013972:	f04f 0300 	mov.w	r3, #0
 8013976:	2901      	cmp	r1, #1
 8013978:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801397c:	f04f 0200 	mov.w	r2, #0
 8013980:	d86d      	bhi.n	8013a5e <uxr_write_framed_msg+0x216>
 8013982:	1c51      	adds	r1, r2, #1
 8013984:	b2c9      	uxtb	r1, r1
 8013986:	2929      	cmp	r1, #41	; 0x29
 8013988:	d8dd      	bhi.n	8013946 <uxr_write_framed_msg+0xfe>
 801398a:	18a0      	adds	r0, r4, r2
 801398c:	3202      	adds	r2, #2
 801398e:	f089 0920 	eor.w	r9, r9, #32
 8013992:	b2d2      	uxtb	r2, r2
 8013994:	4659      	mov	r1, fp
 8013996:	f04f 037d 	mov.w	r3, #125	; 0x7d
 801399a:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 801399e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80139a2:	f04f 0b01 	mov.w	fp, #1
 80139a6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80139aa:	2900      	cmp	r1, #0
 80139ac:	d163      	bne.n	8013a76 <uxr_write_framed_msg+0x22e>
 80139ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80139b2:	e7bf      	b.n	8013934 <uxr_write_framed_msg+0xec>
 80139b4:	2204      	movs	r2, #4
 80139b6:	2503      	movs	r5, #3
 80139b8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80139ba:	4423      	add	r3, r4
 80139bc:	b2c9      	uxtb	r1, r1
 80139be:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80139c2:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 80139c6:	4425      	add	r5, r4
 80139c8:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 80139cc:	f080 0020 	eor.w	r0, r0, #32
 80139d0:	2b01      	cmp	r3, #1
 80139d2:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 80139d6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80139da:	f63f af61 	bhi.w	80138a0 <uxr_write_framed_msg+0x58>
 80139de:	18a3      	adds	r3, r4, r2
 80139e0:	f081 0120 	eor.w	r1, r1, #32
 80139e4:	3202      	adds	r2, #2
 80139e6:	207d      	movs	r0, #125	; 0x7d
 80139e8:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 80139ec:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 80139f0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80139f4:	e75a      	b.n	80138ac <uxr_write_framed_msg+0x64>
 80139f6:	2500      	movs	r5, #0
 80139f8:	e001      	b.n	80139fe <uxr_write_framed_msg+0x1b6>
 80139fa:	2800      	cmp	r0, #0
 80139fc:	d0b3      	beq.n	8013966 <uxr_write_framed_msg+0x11e>
 80139fe:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8013a02:	1b52      	subs	r2, r2, r5
 8013a04:	4421      	add	r1, r4
 8013a06:	4643      	mov	r3, r8
 8013a08:	4638      	mov	r0, r7
 8013a0a:	47b0      	blx	r6
 8013a0c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8013a10:	4405      	add	r5, r0
 8013a12:	4295      	cmp	r5, r2
 8013a14:	d3f1      	bcc.n	80139fa <uxr_write_framed_msg+0x1b2>
 8013a16:	d1a6      	bne.n	8013966 <uxr_write_framed_msg+0x11e>
 8013a18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013a1a:	f04f 0300 	mov.w	r3, #0
 8013a1e:	454a      	cmp	r2, r9
 8013a20:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013a24:	464b      	mov	r3, r9
 8013a26:	d971      	bls.n	8013b0c <uxr_write_framed_msg+0x2c4>
 8013a28:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8013a2c:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8013a30:	2901      	cmp	r1, #1
 8013a32:	f04f 0200 	mov.w	r2, #0
 8013a36:	f63f af58 	bhi.w	80138ea <uxr_write_framed_msg+0xa2>
 8013a3a:	1c51      	adds	r1, r2, #1
 8013a3c:	b2c9      	uxtb	r1, r1
 8013a3e:	2929      	cmp	r1, #41	; 0x29
 8013a40:	d8d9      	bhi.n	80139f6 <uxr_write_framed_msg+0x1ae>
 8013a42:	18a0      	adds	r0, r4, r2
 8013a44:	3202      	adds	r2, #2
 8013a46:	b2d2      	uxtb	r2, r2
 8013a48:	f083 0120 	eor.w	r1, r3, #32
 8013a4c:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8013a50:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8013a54:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8013a58:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013a5c:	e74f      	b.n	80138fe <uxr_write_framed_msg+0xb6>
 8013a5e:	18a0      	adds	r0, r4, r2
 8013a60:	3201      	adds	r2, #1
 8013a62:	b2d2      	uxtb	r2, r2
 8013a64:	4659      	mov	r1, fp
 8013a66:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 8013a6a:	f04f 0b01 	mov.w	fp, #1
 8013a6e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013a72:	2900      	cmp	r1, #0
 8013a74:	d09b      	beq.n	80139ae <uxr_write_framed_msg+0x166>
 8013a76:	2500      	movs	r5, #0
 8013a78:	e002      	b.n	8013a80 <uxr_write_framed_msg+0x238>
 8013a7a:	2800      	cmp	r0, #0
 8013a7c:	f43f af73 	beq.w	8013966 <uxr_write_framed_msg+0x11e>
 8013a80:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8013a84:	1b52      	subs	r2, r2, r5
 8013a86:	4421      	add	r1, r4
 8013a88:	4643      	mov	r3, r8
 8013a8a:	4638      	mov	r0, r7
 8013a8c:	47b0      	blx	r6
 8013a8e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8013a92:	4405      	add	r5, r0
 8013a94:	4295      	cmp	r5, r2
 8013a96:	d3f0      	bcc.n	8013a7a <uxr_write_framed_msg+0x232>
 8013a98:	f47f af65 	bne.w	8013966 <uxr_write_framed_msg+0x11e>
 8013a9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	b290      	uxth	r0, r2
 8013aa2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013aa6:	b005      	add	sp, #20
 8013aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aac:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8013ab0:	f085 0520 	eor.w	r5, r5, #32
 8013ab4:	2303      	movs	r3, #3
 8013ab6:	217d      	movs	r1, #125	; 0x7d
 8013ab8:	2a01      	cmp	r2, #1
 8013aba:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 8013abe:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013ac2:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8013ac6:	d814      	bhi.n	8013af2 <uxr_write_framed_msg+0x2aa>
 8013ac8:	2205      	movs	r2, #5
 8013aca:	2504      	movs	r5, #4
 8013acc:	e774      	b.n	80139b8 <uxr_write_framed_msg+0x170>
 8013ace:	f083 0320 	eor.w	r3, r3, #32
 8013ad2:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 8013ad6:	3202      	adds	r2, #2
 8013ad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ada:	b2d2      	uxtb	r2, r2
 8013adc:	207d      	movs	r0, #125	; 0x7d
 8013ade:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8013ae2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	f47f aef4 	bne.w	80138d4 <uxr_write_framed_msg+0x8c>
 8013aec:	9301      	str	r3, [sp, #4]
 8013aee:	4699      	mov	r9, r3
 8013af0:	e71a      	b.n	8013928 <uxr_write_framed_msg+0xe0>
 8013af2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013af4:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8013af8:	b2d9      	uxtb	r1, r3
 8013afa:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8013afe:	2204      	movs	r2, #4
 8013b00:	2b01      	cmp	r3, #1
 8013b02:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013b06:	f63f aecb 	bhi.w	80138a0 <uxr_write_framed_msg+0x58>
 8013b0a:	e768      	b.n	80139de <uxr_write_framed_msg+0x196>
 8013b0c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8013b10:	fa5f f98a 	uxtb.w	r9, sl
 8013b14:	9301      	str	r3, [sp, #4]
 8013b16:	2200      	movs	r2, #0
 8013b18:	e706      	b.n	8013928 <uxr_write_framed_msg+0xe0>
 8013b1a:	bf00      	nop
 8013b1c:	0801ef60 	.word	0x0801ef60

08013b20 <uxr_framing_read_transport>:
 8013b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b24:	4604      	mov	r4, r0
 8013b26:	b083      	sub	sp, #12
 8013b28:	461f      	mov	r7, r3
 8013b2a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8013b2e:	4689      	mov	r9, r1
 8013b30:	4692      	mov	sl, r2
 8013b32:	f000 fc87 	bl	8014444 <uxr_millis>
 8013b36:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013b3a:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8013b3e:	42b3      	cmp	r3, r6
 8013b40:	4680      	mov	r8, r0
 8013b42:	d05f      	beq.n	8013c04 <uxr_framing_read_transport+0xe4>
 8013b44:	d81b      	bhi.n	8013b7e <uxr_framing_read_transport+0x5e>
 8013b46:	1e75      	subs	r5, r6, #1
 8013b48:	1aed      	subs	r5, r5, r3
 8013b4a:	b2ed      	uxtb	r5, r5
 8013b4c:	2600      	movs	r6, #0
 8013b4e:	455d      	cmp	r5, fp
 8013b50:	d81e      	bhi.n	8013b90 <uxr_framing_read_transport+0x70>
 8013b52:	19ab      	adds	r3, r5, r6
 8013b54:	455b      	cmp	r3, fp
 8013b56:	bf84      	itt	hi
 8013b58:	ebab 0605 	subhi.w	r6, fp, r5
 8013b5c:	b2f6      	uxtbhi	r6, r6
 8013b5e:	b9e5      	cbnz	r5, 8013b9a <uxr_framing_read_transport+0x7a>
 8013b60:	f04f 0b00 	mov.w	fp, #0
 8013b64:	f000 fc6e 	bl	8014444 <uxr_millis>
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	eba0 0008 	sub.w	r0, r0, r8
 8013b6e:	1a1b      	subs	r3, r3, r0
 8013b70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013b74:	4658      	mov	r0, fp
 8013b76:	603b      	str	r3, [r7, #0]
 8013b78:	b003      	add	sp, #12
 8013b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b7e:	2e00      	cmp	r6, #0
 8013b80:	d048      	beq.n	8013c14 <uxr_framing_read_transport+0xf4>
 8013b82:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8013b86:	b2ed      	uxtb	r5, r5
 8013b88:	3e01      	subs	r6, #1
 8013b8a:	455d      	cmp	r5, fp
 8013b8c:	b2f6      	uxtb	r6, r6
 8013b8e:	d9e0      	bls.n	8013b52 <uxr_framing_read_transport+0x32>
 8013b90:	fa5f f58b 	uxtb.w	r5, fp
 8013b94:	2600      	movs	r6, #0
 8013b96:	2d00      	cmp	r5, #0
 8013b98:	d0e2      	beq.n	8013b60 <uxr_framing_read_transport+0x40>
 8013b9a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013b9e:	3102      	adds	r1, #2
 8013ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ba2:	9300      	str	r3, [sp, #0]
 8013ba4:	683b      	ldr	r3, [r7, #0]
 8013ba6:	4421      	add	r1, r4
 8013ba8:	462a      	mov	r2, r5
 8013baa:	4650      	mov	r0, sl
 8013bac:	47c8      	blx	r9
 8013bae:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013bb2:	4a1b      	ldr	r2, [pc, #108]	; (8013c20 <uxr_framing_read_transport+0x100>)
 8013bb4:	4403      	add	r3, r0
 8013bb6:	0859      	lsrs	r1, r3, #1
 8013bb8:	fba2 2101 	umull	r2, r1, r2, r1
 8013bbc:	0889      	lsrs	r1, r1, #2
 8013bbe:	222a      	movs	r2, #42	; 0x2a
 8013bc0:	fb02 3111 	mls	r1, r2, r1, r3
 8013bc4:	4683      	mov	fp, r0
 8013bc6:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8013bca:	2800      	cmp	r0, #0
 8013bcc:	d0c8      	beq.n	8013b60 <uxr_framing_read_transport+0x40>
 8013bce:	42a8      	cmp	r0, r5
 8013bd0:	d1c8      	bne.n	8013b64 <uxr_framing_read_transport+0x44>
 8013bd2:	b31e      	cbz	r6, 8013c1c <uxr_framing_read_transport+0xfc>
 8013bd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013bd6:	9300      	str	r3, [sp, #0]
 8013bd8:	3102      	adds	r1, #2
 8013bda:	4421      	add	r1, r4
 8013bdc:	4632      	mov	r2, r6
 8013bde:	2300      	movs	r3, #0
 8013be0:	4650      	mov	r0, sl
 8013be2:	47c8      	blx	r9
 8013be4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013be8:	490d      	ldr	r1, [pc, #52]	; (8013c20 <uxr_framing_read_transport+0x100>)
 8013bea:	181a      	adds	r2, r3, r0
 8013bec:	0853      	lsrs	r3, r2, #1
 8013bee:	fba1 1303 	umull	r1, r3, r1, r3
 8013bf2:	089b      	lsrs	r3, r3, #2
 8013bf4:	212a      	movs	r1, #42	; 0x2a
 8013bf6:	fb01 2313 	mls	r3, r1, r3, r2
 8013bfa:	eb00 0b05 	add.w	fp, r0, r5
 8013bfe:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8013c02:	e7af      	b.n	8013b64 <uxr_framing_read_transport+0x44>
 8013c04:	2600      	movs	r6, #0
 8013c06:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8013c0a:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8013c0c:	d9c0      	bls.n	8013b90 <uxr_framing_read_transport+0x70>
 8013c0e:	2102      	movs	r1, #2
 8013c10:	2529      	movs	r5, #41	; 0x29
 8013c12:	e7c5      	b.n	8013ba0 <uxr_framing_read_transport+0x80>
 8013c14:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8013c18:	b2ed      	uxtb	r5, r5
 8013c1a:	e798      	b.n	8013b4e <uxr_framing_read_transport+0x2e>
 8013c1c:	46ab      	mov	fp, r5
 8013c1e:	e7a1      	b.n	8013b64 <uxr_framing_read_transport+0x44>
 8013c20:	30c30c31 	.word	0x30c30c31

08013c24 <uxr_read_framed_msg>:
 8013c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c28:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8013c2c:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 8013c30:	42ae      	cmp	r6, r5
 8013c32:	b083      	sub	sp, #12
 8013c34:	4604      	mov	r4, r0
 8013c36:	461f      	mov	r7, r3
 8013c38:	4689      	mov	r9, r1
 8013c3a:	4692      	mov	sl, r2
 8013c3c:	f000 817d 	beq.w	8013f3a <uxr_read_framed_msg+0x316>
 8013c40:	7823      	ldrb	r3, [r4, #0]
 8013c42:	4ecc      	ldr	r6, [pc, #816]	; (8013f74 <uxr_read_framed_msg+0x350>)
 8013c44:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8013f78 <uxr_read_framed_msg+0x354>
 8013c48:	2b07      	cmp	r3, #7
 8013c4a:	d8fd      	bhi.n	8013c48 <uxr_read_framed_msg+0x24>
 8013c4c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013c50:	00f40113 	.word	0x00f40113
 8013c54:	00b700d4 	.word	0x00b700d4
 8013c58:	004d008e 	.word	0x004d008e
 8013c5c:	00080030 	.word	0x00080030
 8013c60:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013c64:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013c68:	4298      	cmp	r0, r3
 8013c6a:	f000 8141 	beq.w	8013ef0 <uxr_read_framed_msg+0x2cc>
 8013c6e:	18e2      	adds	r2, r4, r3
 8013c70:	7891      	ldrb	r1, [r2, #2]
 8013c72:	297d      	cmp	r1, #125	; 0x7d
 8013c74:	f000 81a2 	beq.w	8013fbc <uxr_read_framed_msg+0x398>
 8013c78:	3301      	adds	r3, #1
 8013c7a:	085a      	lsrs	r2, r3, #1
 8013c7c:	fba6 0202 	umull	r0, r2, r6, r2
 8013c80:	0892      	lsrs	r2, r2, #2
 8013c82:	202a      	movs	r0, #42	; 0x2a
 8013c84:	fb00 3312 	mls	r3, r0, r2, r3
 8013c88:	297e      	cmp	r1, #126	; 0x7e
 8013c8a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013c8e:	f000 8251 	beq.w	8014134 <uxr_read_framed_msg+0x510>
 8013c92:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8013c94:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8013c96:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013c9a:	b29b      	uxth	r3, r3
 8013c9c:	2100      	movs	r1, #0
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	86a3      	strh	r3, [r4, #52]	; 0x34
 8013ca2:	7021      	strb	r1, [r4, #0]
 8013ca4:	f000 8182 	beq.w	8013fac <uxr_read_framed_msg+0x388>
 8013ca8:	2000      	movs	r0, #0
 8013caa:	b003      	add	sp, #12
 8013cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cb0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013cb4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013cb8:	4298      	cmp	r0, r3
 8013cba:	f000 8128 	beq.w	8013f0e <uxr_read_framed_msg+0x2ea>
 8013cbe:	18e2      	adds	r2, r4, r3
 8013cc0:	7891      	ldrb	r1, [r2, #2]
 8013cc2:	297d      	cmp	r1, #125	; 0x7d
 8013cc4:	f000 8196 	beq.w	8013ff4 <uxr_read_framed_msg+0x3d0>
 8013cc8:	3301      	adds	r3, #1
 8013cca:	085a      	lsrs	r2, r3, #1
 8013ccc:	fba6 0202 	umull	r0, r2, r6, r2
 8013cd0:	0892      	lsrs	r2, r2, #2
 8013cd2:	202a      	movs	r0, #42	; 0x2a
 8013cd4:	fb00 3312 	mls	r3, r0, r2, r3
 8013cd8:	297e      	cmp	r1, #126	; 0x7e
 8013cda:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013cde:	f000 8219 	beq.w	8014114 <uxr_read_framed_msg+0x4f0>
 8013ce2:	2307      	movs	r3, #7
 8013ce4:	86a1      	strh	r1, [r4, #52]	; 0x34
 8013ce6:	7023      	strb	r3, [r4, #0]
 8013ce8:	e7ae      	b.n	8013c48 <uxr_read_framed_msg+0x24>
 8013cea:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8013cec:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8013cee:	429d      	cmp	r5, r3
 8013cf0:	d937      	bls.n	8013d62 <uxr_read_framed_msg+0x13e>
 8013cf2:	ee07 9a90 	vmov	s15, r9
 8013cf6:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8013cfa:	e01e      	b.n	8013d3a <uxr_read_framed_msg+0x116>
 8013cfc:	f89e e002 	ldrb.w	lr, [lr, #2]
 8013d00:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 8013d04:	f000 80d2 	beq.w	8013eac <uxr_read_framed_msg+0x288>
 8013d08:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8013d0c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013d10:	f000 8214 	beq.w	801413c <uxr_read_framed_msg+0x518>
 8013d14:	f807 e003 	strb.w	lr, [r7, r3]
 8013d18:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8013d1a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8013d1c:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8013d1e:	ea80 010e 	eor.w	r1, r0, lr
 8013d22:	b2c9      	uxtb	r1, r1
 8013d24:	3301      	adds	r3, #1
 8013d26:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 8013d2a:	b29b      	uxth	r3, r3
 8013d2c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8013d30:	42ab      	cmp	r3, r5
 8013d32:	86e2      	strh	r2, [r4, #54]	; 0x36
 8013d34:	8663      	strh	r3, [r4, #50]	; 0x32
 8013d36:	f080 8121 	bcs.w	8013f7c <uxr_read_framed_msg+0x358>
 8013d3a:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8013d3e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013d42:	f101 0b01 	add.w	fp, r1, #1
 8013d46:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8013d4a:	fba6 9202 	umull	r9, r2, r6, r2
 8013d4e:	0892      	lsrs	r2, r2, #2
 8013d50:	4288      	cmp	r0, r1
 8013d52:	eb04 0e01 	add.w	lr, r4, r1
 8013d56:	fb0c b212 	mls	r2, ip, r2, fp
 8013d5a:	d1cf      	bne.n	8013cfc <uxr_read_framed_msg+0xd8>
 8013d5c:	ee17 9a90 	vmov	r9, s15
 8013d60:	429d      	cmp	r5, r3
 8013d62:	f040 8112 	bne.w	8013f8a <uxr_read_framed_msg+0x366>
 8013d66:	2306      	movs	r3, #6
 8013d68:	7023      	strb	r3, [r4, #0]
 8013d6a:	e76d      	b.n	8013c48 <uxr_read_framed_msg+0x24>
 8013d6c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013d70:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013d74:	4298      	cmp	r0, r3
 8013d76:	f000 80bb 	beq.w	8013ef0 <uxr_read_framed_msg+0x2cc>
 8013d7a:	18e2      	adds	r2, r4, r3
 8013d7c:	7891      	ldrb	r1, [r2, #2]
 8013d7e:	297d      	cmp	r1, #125	; 0x7d
 8013d80:	f000 8153 	beq.w	801402a <uxr_read_framed_msg+0x406>
 8013d84:	3301      	adds	r3, #1
 8013d86:	085a      	lsrs	r2, r3, #1
 8013d88:	fba6 0202 	umull	r0, r2, r6, r2
 8013d8c:	0892      	lsrs	r2, r2, #2
 8013d8e:	202a      	movs	r0, #42	; 0x2a
 8013d90:	fb00 3212 	mls	r2, r0, r2, r3
 8013d94:	297e      	cmp	r1, #126	; 0x7e
 8013d96:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013d9a:	f000 81cb 	beq.w	8014134 <uxr_read_framed_msg+0x510>
 8013d9e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013da0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013da4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013da6:	b29b      	uxth	r3, r3
 8013da8:	2000      	movs	r0, #0
 8013daa:	428b      	cmp	r3, r1
 8013dac:	8623      	strh	r3, [r4, #48]	; 0x30
 8013dae:	8660      	strh	r0, [r4, #50]	; 0x32
 8013db0:	86e0      	strh	r0, [r4, #54]	; 0x36
 8013db2:	f240 80db 	bls.w	8013f6c <uxr_read_framed_msg+0x348>
 8013db6:	7020      	strb	r0, [r4, #0]
 8013db8:	b003      	add	sp, #12
 8013dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dbe:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013dc2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013dc6:	4298      	cmp	r0, r3
 8013dc8:	f000 80a1 	beq.w	8013f0e <uxr_read_framed_msg+0x2ea>
 8013dcc:	18e2      	adds	r2, r4, r3
 8013dce:	7891      	ldrb	r1, [r2, #2]
 8013dd0:	297d      	cmp	r1, #125	; 0x7d
 8013dd2:	f000 8167 	beq.w	80140a4 <uxr_read_framed_msg+0x480>
 8013dd6:	3301      	adds	r3, #1
 8013dd8:	085a      	lsrs	r2, r3, #1
 8013dda:	fba6 0202 	umull	r0, r2, r6, r2
 8013dde:	0892      	lsrs	r2, r2, #2
 8013de0:	202a      	movs	r0, #42	; 0x2a
 8013de2:	fb00 3312 	mls	r3, r0, r2, r3
 8013de6:	297e      	cmp	r1, #126	; 0x7e
 8013de8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013dec:	f000 8192 	beq.w	8014114 <uxr_read_framed_msg+0x4f0>
 8013df0:	2304      	movs	r3, #4
 8013df2:	8621      	strh	r1, [r4, #48]	; 0x30
 8013df4:	7023      	strb	r3, [r4, #0]
 8013df6:	e727      	b.n	8013c48 <uxr_read_framed_msg+0x24>
 8013df8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013dfc:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8013e00:	4290      	cmp	r0, r2
 8013e02:	f000 80b1 	beq.w	8013f68 <uxr_read_framed_msg+0x344>
 8013e06:	18a3      	adds	r3, r4, r2
 8013e08:	7899      	ldrb	r1, [r3, #2]
 8013e0a:	297d      	cmp	r1, #125	; 0x7d
 8013e0c:	f000 8166 	beq.w	80140dc <uxr_read_framed_msg+0x4b8>
 8013e10:	3201      	adds	r2, #1
 8013e12:	0850      	lsrs	r0, r2, #1
 8013e14:	fba6 3000 	umull	r3, r0, r6, r0
 8013e18:	0880      	lsrs	r0, r0, #2
 8013e1a:	232a      	movs	r3, #42	; 0x2a
 8013e1c:	fb03 2210 	mls	r2, r3, r0, r2
 8013e20:	297e      	cmp	r1, #126	; 0x7e
 8013e22:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013e26:	f000 8187 	beq.w	8014138 <uxr_read_framed_msg+0x514>
 8013e2a:	7863      	ldrb	r3, [r4, #1]
 8013e2c:	428b      	cmp	r3, r1
 8013e2e:	bf0c      	ite	eq
 8013e30:	2303      	moveq	r3, #3
 8013e32:	2300      	movne	r3, #0
 8013e34:	7023      	strb	r3, [r4, #0]
 8013e36:	e707      	b.n	8013c48 <uxr_read_framed_msg+0x24>
 8013e38:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013e3c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013e40:	2200      	movs	r2, #0
 8013e42:	4299      	cmp	r1, r3
 8013e44:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8013e48:	d063      	beq.n	8013f12 <uxr_read_framed_msg+0x2ee>
 8013e4a:	18e2      	adds	r2, r4, r3
 8013e4c:	7892      	ldrb	r2, [r2, #2]
 8013e4e:	2a7d      	cmp	r2, #125	; 0x7d
 8013e50:	f000 8107 	beq.w	8014062 <uxr_read_framed_msg+0x43e>
 8013e54:	1c59      	adds	r1, r3, #1
 8013e56:	084b      	lsrs	r3, r1, #1
 8013e58:	fba6 0303 	umull	r0, r3, r6, r3
 8013e5c:	089b      	lsrs	r3, r3, #2
 8013e5e:	202a      	movs	r0, #42	; 0x2a
 8013e60:	fb00 1313 	mls	r3, r0, r3, r1
 8013e64:	2a7e      	cmp	r2, #126	; 0x7e
 8013e66:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8013e6a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013e6e:	d050      	beq.n	8013f12 <uxr_read_framed_msg+0x2ee>
 8013e70:	2302      	movs	r3, #2
 8013e72:	7023      	strb	r3, [r4, #0]
 8013e74:	e6e8      	b.n	8013c48 <uxr_read_framed_msg+0x24>
 8013e76:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 8013e7a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8013e7e:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8013e82:	1c51      	adds	r1, r2, #1
 8013e84:	084b      	lsrs	r3, r1, #1
 8013e86:	fba6 5303 	umull	r5, r3, r6, r3
 8013e8a:	089b      	lsrs	r3, r3, #2
 8013e8c:	fb0c 1313 	mls	r3, ip, r3, r1
 8013e90:	4596      	cmp	lr, r2
 8013e92:	eb04 0002 	add.w	r0, r4, r2
 8013e96:	b2da      	uxtb	r2, r3
 8013e98:	f43f af06 	beq.w	8013ca8 <uxr_read_framed_msg+0x84>
 8013e9c:	7883      	ldrb	r3, [r0, #2]
 8013e9e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013ea2:	2b7e      	cmp	r3, #126	; 0x7e
 8013ea4:	d1ed      	bne.n	8013e82 <uxr_read_framed_msg+0x25e>
 8013ea6:	2301      	movs	r3, #1
 8013ea8:	7023      	strb	r3, [r4, #0]
 8013eaa:	e6cd      	b.n	8013c48 <uxr_read_framed_msg+0x24>
 8013eac:	f101 0b01 	add.w	fp, r1, #1
 8013eb0:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8013eb4:	fba6 e202 	umull	lr, r2, r6, r2
 8013eb8:	3102      	adds	r1, #2
 8013eba:	0892      	lsrs	r2, r2, #2
 8013ebc:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8013ec0:	fb0c b212 	mls	r2, ip, r2, fp
 8013ec4:	fba6 9e0e 	umull	r9, lr, r6, lr
 8013ec8:	eb04 0b02 	add.w	fp, r4, r2
 8013ecc:	b2d2      	uxtb	r2, r2
 8013ece:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8013ed2:	4290      	cmp	r0, r2
 8013ed4:	fb0c 111e 	mls	r1, ip, lr, r1
 8013ed8:	f43f af40 	beq.w	8013d5c <uxr_read_framed_msg+0x138>
 8013edc:	f89b e002 	ldrb.w	lr, [fp, #2]
 8013ee0:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8013ee4:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8013ee8:	d036      	beq.n	8013f58 <uxr_read_framed_msg+0x334>
 8013eea:	f08e 0e20 	eor.w	lr, lr, #32
 8013eee:	e711      	b.n	8013d14 <uxr_read_framed_msg+0xf0>
 8013ef0:	2301      	movs	r3, #1
 8013ef2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013ef4:	4649      	mov	r1, r9
 8013ef6:	e9cd 2300 	strd	r2, r3, [sp]
 8013efa:	4620      	mov	r0, r4
 8013efc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013efe:	4652      	mov	r2, sl
 8013f00:	f7ff fe0e 	bl	8013b20 <uxr_framing_read_transport>
 8013f04:	2800      	cmp	r0, #0
 8013f06:	f43f aecf 	beq.w	8013ca8 <uxr_read_framed_msg+0x84>
 8013f0a:	7823      	ldrb	r3, [r4, #0]
 8013f0c:	e69c      	b.n	8013c48 <uxr_read_framed_msg+0x24>
 8013f0e:	2302      	movs	r3, #2
 8013f10:	e7ef      	b.n	8013ef2 <uxr_read_framed_msg+0x2ce>
 8013f12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013f14:	2304      	movs	r3, #4
 8013f16:	e9cd 2300 	strd	r2, r3, [sp]
 8013f1a:	4649      	mov	r1, r9
 8013f1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f1e:	4652      	mov	r2, sl
 8013f20:	4620      	mov	r0, r4
 8013f22:	f7ff fdfd 	bl	8013b20 <uxr_framing_read_transport>
 8013f26:	2800      	cmp	r0, #0
 8013f28:	d1ef      	bne.n	8013f0a <uxr_read_framed_msg+0x2e6>
 8013f2a:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8013f2e:	387e      	subs	r0, #126	; 0x7e
 8013f30:	bf18      	it	ne
 8013f32:	2001      	movne	r0, #1
 8013f34:	2800      	cmp	r0, #0
 8013f36:	d0e8      	beq.n	8013f0a <uxr_read_framed_msg+0x2e6>
 8013f38:	e6b6      	b.n	8013ca8 <uxr_read_framed_msg+0x84>
 8013f3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013f3c:	2305      	movs	r3, #5
 8013f3e:	e9cd 5300 	strd	r5, r3, [sp]
 8013f42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f44:	f7ff fdec 	bl	8013b20 <uxr_framing_read_transport>
 8013f48:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8013f4c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013f50:	429a      	cmp	r2, r3
 8013f52:	f43f aea9 	beq.w	8013ca8 <uxr_read_framed_msg+0x84>
 8013f56:	e673      	b.n	8013c40 <uxr_read_framed_msg+0x1c>
 8013f58:	429d      	cmp	r5, r3
 8013f5a:	ee17 9a90 	vmov	r9, s15
 8013f5e:	f43f af02 	beq.w	8013d66 <uxr_read_framed_msg+0x142>
 8013f62:	2301      	movs	r3, #1
 8013f64:	7023      	strb	r3, [r4, #0]
 8013f66:	e66f      	b.n	8013c48 <uxr_read_framed_msg+0x24>
 8013f68:	2303      	movs	r3, #3
 8013f6a:	e7c2      	b.n	8013ef2 <uxr_read_framed_msg+0x2ce>
 8013f6c:	2305      	movs	r3, #5
 8013f6e:	7023      	strb	r3, [r4, #0]
 8013f70:	e66a      	b.n	8013c48 <uxr_read_framed_msg+0x24>
 8013f72:	bf00      	nop
 8013f74:	30c30c31 	.word	0x30c30c31
 8013f78:	0801ef60 	.word	0x0801ef60
 8013f7c:	ee17 9a90 	vmov	r9, s15
 8013f80:	f43f aef1 	beq.w	8013d66 <uxr_read_framed_msg+0x142>
 8013f84:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8013f88:	d08d      	beq.n	8013ea6 <uxr_read_framed_msg+0x282>
 8013f8a:	1aeb      	subs	r3, r5, r3
 8013f8c:	3302      	adds	r3, #2
 8013f8e:	9301      	str	r3, [sp, #4]
 8013f90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f92:	9300      	str	r3, [sp, #0]
 8013f94:	4652      	mov	r2, sl
 8013f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f98:	4649      	mov	r1, r9
 8013f9a:	4620      	mov	r0, r4
 8013f9c:	f7ff fdc0 	bl	8013b20 <uxr_framing_read_transport>
 8013fa0:	fab0 f080 	clz	r0, r0
 8013fa4:	0940      	lsrs	r0, r0, #5
 8013fa6:	2800      	cmp	r0, #0
 8013fa8:	d0af      	beq.n	8013f0a <uxr_read_framed_msg+0x2e6>
 8013faa:	e67d      	b.n	8013ca8 <uxr_read_framed_msg+0x84>
 8013fac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013fae:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8013fb2:	7013      	strb	r3, [r2, #0]
 8013fb4:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8013fb6:	b003      	add	sp, #12
 8013fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fbc:	1c59      	adds	r1, r3, #1
 8013fbe:	084a      	lsrs	r2, r1, #1
 8013fc0:	fba6 5202 	umull	r5, r2, r6, r2
 8013fc4:	0892      	lsrs	r2, r2, #2
 8013fc6:	252a      	movs	r5, #42	; 0x2a
 8013fc8:	fb05 1212 	mls	r2, r5, r2, r1
 8013fcc:	b2d1      	uxtb	r1, r2
 8013fce:	4288      	cmp	r0, r1
 8013fd0:	d08e      	beq.n	8013ef0 <uxr_read_framed_msg+0x2cc>
 8013fd2:	3302      	adds	r3, #2
 8013fd4:	4422      	add	r2, r4
 8013fd6:	0858      	lsrs	r0, r3, #1
 8013fd8:	fba6 1000 	umull	r1, r0, r6, r0
 8013fdc:	7891      	ldrb	r1, [r2, #2]
 8013fde:	0882      	lsrs	r2, r0, #2
 8013fe0:	fb05 3312 	mls	r3, r5, r2, r3
 8013fe4:	297e      	cmp	r1, #126	; 0x7e
 8013fe6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013fea:	f000 80a3 	beq.w	8014134 <uxr_read_framed_msg+0x510>
 8013fee:	f081 0120 	eor.w	r1, r1, #32
 8013ff2:	e64e      	b.n	8013c92 <uxr_read_framed_msg+0x6e>
 8013ff4:	1c59      	adds	r1, r3, #1
 8013ff6:	084a      	lsrs	r2, r1, #1
 8013ff8:	fba6 5202 	umull	r5, r2, r6, r2
 8013ffc:	0892      	lsrs	r2, r2, #2
 8013ffe:	252a      	movs	r5, #42	; 0x2a
 8014000:	fb05 1212 	mls	r2, r5, r2, r1
 8014004:	b2d1      	uxtb	r1, r2
 8014006:	4288      	cmp	r0, r1
 8014008:	d081      	beq.n	8013f0e <uxr_read_framed_msg+0x2ea>
 801400a:	3302      	adds	r3, #2
 801400c:	4422      	add	r2, r4
 801400e:	0858      	lsrs	r0, r3, #1
 8014010:	fba6 1000 	umull	r1, r0, r6, r0
 8014014:	7891      	ldrb	r1, [r2, #2]
 8014016:	0882      	lsrs	r2, r0, #2
 8014018:	fb05 3312 	mls	r3, r5, r2, r3
 801401c:	297e      	cmp	r1, #126	; 0x7e
 801401e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014022:	d077      	beq.n	8014114 <uxr_read_framed_msg+0x4f0>
 8014024:	f081 0120 	eor.w	r1, r1, #32
 8014028:	e65b      	b.n	8013ce2 <uxr_read_framed_msg+0xbe>
 801402a:	1c59      	adds	r1, r3, #1
 801402c:	084a      	lsrs	r2, r1, #1
 801402e:	fba6 5202 	umull	r5, r2, r6, r2
 8014032:	0892      	lsrs	r2, r2, #2
 8014034:	252a      	movs	r5, #42	; 0x2a
 8014036:	fb05 1212 	mls	r2, r5, r2, r1
 801403a:	b2d1      	uxtb	r1, r2
 801403c:	4288      	cmp	r0, r1
 801403e:	f43f af57 	beq.w	8013ef0 <uxr_read_framed_msg+0x2cc>
 8014042:	3302      	adds	r3, #2
 8014044:	4422      	add	r2, r4
 8014046:	0858      	lsrs	r0, r3, #1
 8014048:	fba6 1000 	umull	r1, r0, r6, r0
 801404c:	7891      	ldrb	r1, [r2, #2]
 801404e:	0882      	lsrs	r2, r0, #2
 8014050:	fb05 3312 	mls	r3, r5, r2, r3
 8014054:	297e      	cmp	r1, #126	; 0x7e
 8014056:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801405a:	d06b      	beq.n	8014134 <uxr_read_framed_msg+0x510>
 801405c:	f081 0120 	eor.w	r1, r1, #32
 8014060:	e69d      	b.n	8013d9e <uxr_read_framed_msg+0x17a>
 8014062:	1c5d      	adds	r5, r3, #1
 8014064:	086a      	lsrs	r2, r5, #1
 8014066:	fba6 0202 	umull	r0, r2, r6, r2
 801406a:	0892      	lsrs	r2, r2, #2
 801406c:	202a      	movs	r0, #42	; 0x2a
 801406e:	fb00 5212 	mls	r2, r0, r2, r5
 8014072:	b2d5      	uxtb	r5, r2
 8014074:	42a9      	cmp	r1, r5
 8014076:	f43f af4c 	beq.w	8013f12 <uxr_read_framed_msg+0x2ee>
 801407a:	3302      	adds	r3, #2
 801407c:	4422      	add	r2, r4
 801407e:	0859      	lsrs	r1, r3, #1
 8014080:	fba6 5101 	umull	r5, r1, r6, r1
 8014084:	7895      	ldrb	r5, [r2, #2]
 8014086:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 801408a:	088a      	lsrs	r2, r1, #2
 801408c:	fb00 3312 	mls	r3, r0, r2, r3
 8014090:	2d7e      	cmp	r5, #126	; 0x7e
 8014092:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014096:	f43f af3c 	beq.w	8013f12 <uxr_read_framed_msg+0x2ee>
 801409a:	f085 0520 	eor.w	r5, r5, #32
 801409e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 80140a2:	e6e5      	b.n	8013e70 <uxr_read_framed_msg+0x24c>
 80140a4:	1c59      	adds	r1, r3, #1
 80140a6:	084a      	lsrs	r2, r1, #1
 80140a8:	fba6 5202 	umull	r5, r2, r6, r2
 80140ac:	0892      	lsrs	r2, r2, #2
 80140ae:	252a      	movs	r5, #42	; 0x2a
 80140b0:	fb05 1212 	mls	r2, r5, r2, r1
 80140b4:	b2d1      	uxtb	r1, r2
 80140b6:	4288      	cmp	r0, r1
 80140b8:	f43f af29 	beq.w	8013f0e <uxr_read_framed_msg+0x2ea>
 80140bc:	3302      	adds	r3, #2
 80140be:	4422      	add	r2, r4
 80140c0:	0858      	lsrs	r0, r3, #1
 80140c2:	fba6 1000 	umull	r1, r0, r6, r0
 80140c6:	7891      	ldrb	r1, [r2, #2]
 80140c8:	0882      	lsrs	r2, r0, #2
 80140ca:	fb05 3312 	mls	r3, r5, r2, r3
 80140ce:	297e      	cmp	r1, #126	; 0x7e
 80140d0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80140d4:	d01e      	beq.n	8014114 <uxr_read_framed_msg+0x4f0>
 80140d6:	f081 0120 	eor.w	r1, r1, #32
 80140da:	e689      	b.n	8013df0 <uxr_read_framed_msg+0x1cc>
 80140dc:	1c51      	adds	r1, r2, #1
 80140de:	084b      	lsrs	r3, r1, #1
 80140e0:	fba6 5303 	umull	r5, r3, r6, r3
 80140e4:	089b      	lsrs	r3, r3, #2
 80140e6:	252a      	movs	r5, #42	; 0x2a
 80140e8:	fb05 1313 	mls	r3, r5, r3, r1
 80140ec:	b2d9      	uxtb	r1, r3
 80140ee:	4288      	cmp	r0, r1
 80140f0:	f43f af3a 	beq.w	8013f68 <uxr_read_framed_msg+0x344>
 80140f4:	3202      	adds	r2, #2
 80140f6:	4423      	add	r3, r4
 80140f8:	0850      	lsrs	r0, r2, #1
 80140fa:	789b      	ldrb	r3, [r3, #2]
 80140fc:	fba6 1000 	umull	r1, r0, r6, r0
 8014100:	0880      	lsrs	r0, r0, #2
 8014102:	fb05 2210 	mls	r2, r5, r0, r2
 8014106:	2b7e      	cmp	r3, #126	; 0x7e
 8014108:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801410c:	d014      	beq.n	8014138 <uxr_read_framed_msg+0x514>
 801410e:	f083 0120 	eor.w	r1, r3, #32
 8014112:	e68a      	b.n	8013e2a <uxr_read_framed_msg+0x206>
 8014114:	2302      	movs	r3, #2
 8014116:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014118:	4649      	mov	r1, r9
 801411a:	e9cd 2300 	strd	r2, r3, [sp]
 801411e:	4620      	mov	r0, r4
 8014120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014122:	4652      	mov	r2, sl
 8014124:	f7ff fcfc 	bl	8013b20 <uxr_framing_read_transport>
 8014128:	2800      	cmp	r0, #0
 801412a:	f47f aeee 	bne.w	8013f0a <uxr_read_framed_msg+0x2e6>
 801412e:	2301      	movs	r3, #1
 8014130:	7023      	strb	r3, [r4, #0]
 8014132:	e589      	b.n	8013c48 <uxr_read_framed_msg+0x24>
 8014134:	2301      	movs	r3, #1
 8014136:	e7ee      	b.n	8014116 <uxr_read_framed_msg+0x4f2>
 8014138:	2303      	movs	r3, #3
 801413a:	e7ec      	b.n	8014116 <uxr_read_framed_msg+0x4f2>
 801413c:	ee17 9a90 	vmov	r9, s15
 8014140:	e6b1      	b.n	8013ea6 <uxr_read_framed_msg+0x282>
 8014142:	bf00      	nop

08014144 <uxr_stream_id>:
 8014144:	b410      	push	{r4}
 8014146:	2901      	cmp	r1, #1
 8014148:	b083      	sub	sp, #12
 801414a:	d01f      	beq.n	801418c <uxr_stream_id+0x48>
 801414c:	2902      	cmp	r1, #2
 801414e:	f04f 0400 	mov.w	r4, #0
 8014152:	d01e      	beq.n	8014192 <uxr_stream_id+0x4e>
 8014154:	2300      	movs	r3, #0
 8014156:	f364 0307 	bfi	r3, r4, #0, #8
 801415a:	f360 230f 	bfi	r3, r0, #8, #8
 801415e:	f361 4317 	bfi	r3, r1, #16, #8
 8014162:	f362 631f 	bfi	r3, r2, #24, #8
 8014166:	b2da      	uxtb	r2, r3
 8014168:	2000      	movs	r0, #0
 801416a:	f362 0007 	bfi	r0, r2, #0, #8
 801416e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014172:	f362 200f 	bfi	r0, r2, #8, #8
 8014176:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801417a:	f362 4017 	bfi	r0, r2, #16, #8
 801417e:	0e1b      	lsrs	r3, r3, #24
 8014180:	f363 601f 	bfi	r0, r3, #24, #8
 8014184:	b003      	add	sp, #12
 8014186:	f85d 4b04 	ldr.w	r4, [sp], #4
 801418a:	4770      	bx	lr
 801418c:	1c44      	adds	r4, r0, #1
 801418e:	b2e4      	uxtb	r4, r4
 8014190:	e7e0      	b.n	8014154 <uxr_stream_id+0x10>
 8014192:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 8014196:	e7dd      	b.n	8014154 <uxr_stream_id+0x10>

08014198 <uxr_stream_id_from_raw>:
 8014198:	b410      	push	{r4}
 801419a:	b083      	sub	sp, #12
 801419c:	b128      	cbz	r0, 80141aa <uxr_stream_id_from_raw+0x12>
 801419e:	0603      	lsls	r3, r0, #24
 80141a0:	d421      	bmi.n	80141e6 <uxr_stream_id_from_raw+0x4e>
 80141a2:	1e42      	subs	r2, r0, #1
 80141a4:	b2d2      	uxtb	r2, r2
 80141a6:	2401      	movs	r4, #1
 80141a8:	e001      	b.n	80141ae <uxr_stream_id_from_raw+0x16>
 80141aa:	4604      	mov	r4, r0
 80141ac:	4602      	mov	r2, r0
 80141ae:	2300      	movs	r3, #0
 80141b0:	f360 0307 	bfi	r3, r0, #0, #8
 80141b4:	f362 230f 	bfi	r3, r2, #8, #8
 80141b8:	f364 4317 	bfi	r3, r4, #16, #8
 80141bc:	f361 631f 	bfi	r3, r1, #24, #8
 80141c0:	b2da      	uxtb	r2, r3
 80141c2:	2000      	movs	r0, #0
 80141c4:	f362 0007 	bfi	r0, r2, #0, #8
 80141c8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80141cc:	f362 200f 	bfi	r0, r2, #8, #8
 80141d0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80141d4:	f362 4017 	bfi	r0, r2, #16, #8
 80141d8:	0e1b      	lsrs	r3, r3, #24
 80141da:	f363 601f 	bfi	r0, r3, #24, #8
 80141de:	b003      	add	sp, #12
 80141e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141e4:	4770      	bx	lr
 80141e6:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 80141ea:	2402      	movs	r4, #2
 80141ec:	e7df      	b.n	80141ae <uxr_stream_id_from_raw+0x16>
 80141ee:	bf00      	nop

080141f0 <uxr_init_stream_storage>:
 80141f0:	2300      	movs	r3, #0
 80141f2:	7403      	strb	r3, [r0, #16]
 80141f4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80141f8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80141fc:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8014200:	4770      	bx	lr
 8014202:	bf00      	nop

08014204 <uxr_reset_stream_storage>:
 8014204:	b570      	push	{r4, r5, r6, lr}
 8014206:	7c03      	ldrb	r3, [r0, #16]
 8014208:	4604      	mov	r4, r0
 801420a:	b153      	cbz	r3, 8014222 <uxr_reset_stream_storage+0x1e>
 801420c:	4606      	mov	r6, r0
 801420e:	2500      	movs	r5, #0
 8014210:	4630      	mov	r0, r6
 8014212:	f004 fc39 	bl	8018a88 <uxr_reset_output_best_effort_stream>
 8014216:	7c23      	ldrb	r3, [r4, #16]
 8014218:	3501      	adds	r5, #1
 801421a:	42ab      	cmp	r3, r5
 801421c:	f106 0610 	add.w	r6, r6, #16
 8014220:	d8f6      	bhi.n	8014210 <uxr_reset_stream_storage+0xc>
 8014222:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014226:	b163      	cbz	r3, 8014242 <uxr_reset_stream_storage+0x3e>
 8014228:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801422c:	2500      	movs	r5, #0
 801422e:	4630      	mov	r0, r6
 8014230:	f004 fa36 	bl	80186a0 <uxr_reset_input_best_effort_stream>
 8014234:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014238:	3501      	adds	r5, #1
 801423a:	42ab      	cmp	r3, r5
 801423c:	f106 0602 	add.w	r6, r6, #2
 8014240:	d8f5      	bhi.n	801422e <uxr_reset_stream_storage+0x2a>
 8014242:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8014246:	b163      	cbz	r3, 8014262 <uxr_reset_stream_storage+0x5e>
 8014248:	f104 0618 	add.w	r6, r4, #24
 801424c:	2500      	movs	r5, #0
 801424e:	4630      	mov	r0, r6
 8014250:	f004 fcba 	bl	8018bc8 <uxr_reset_output_reliable_stream>
 8014254:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8014258:	3501      	adds	r5, #1
 801425a:	42ab      	cmp	r3, r5
 801425c:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8014260:	d8f5      	bhi.n	801424e <uxr_reset_stream_storage+0x4a>
 8014262:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8014266:	b163      	cbz	r3, 8014282 <uxr_reset_stream_storage+0x7e>
 8014268:	f104 0648 	add.w	r6, r4, #72	; 0x48
 801426c:	2500      	movs	r5, #0
 801426e:	4630      	mov	r0, r6
 8014270:	f004 fa7e 	bl	8018770 <uxr_reset_input_reliable_stream>
 8014274:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8014278:	3501      	adds	r5, #1
 801427a:	42ab      	cmp	r3, r5
 801427c:	f106 0618 	add.w	r6, r6, #24
 8014280:	d8f5      	bhi.n	801426e <uxr_reset_stream_storage+0x6a>
 8014282:	bd70      	pop	{r4, r5, r6, pc}

08014284 <uxr_add_output_best_effort_buffer>:
 8014284:	b530      	push	{r4, r5, lr}
 8014286:	7c04      	ldrb	r4, [r0, #16]
 8014288:	1c65      	adds	r5, r4, #1
 801428a:	b083      	sub	sp, #12
 801428c:	7405      	strb	r5, [r0, #16]
 801428e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8014292:	f004 fbed 	bl	8018a70 <uxr_init_output_best_effort_stream>
 8014296:	2201      	movs	r2, #1
 8014298:	4620      	mov	r0, r4
 801429a:	4611      	mov	r1, r2
 801429c:	b003      	add	sp, #12
 801429e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80142a2:	f7ff bf4f 	b.w	8014144 <uxr_stream_id>
 80142a6:	bf00      	nop

080142a8 <uxr_add_output_reliable_buffer>:
 80142a8:	b570      	push	{r4, r5, r6, lr}
 80142aa:	b084      	sub	sp, #16
 80142ac:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80142b0:	f89d 6020 	ldrb.w	r6, [sp, #32]
 80142b4:	9600      	str	r6, [sp, #0]
 80142b6:	2528      	movs	r5, #40	; 0x28
 80142b8:	1c66      	adds	r6, r4, #1
 80142ba:	fb05 0504 	mla	r5, r5, r4, r0
 80142be:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 80142c2:	f105 0018 	add.w	r0, r5, #24
 80142c6:	f004 fc4d 	bl	8018b64 <uxr_init_output_reliable_stream>
 80142ca:	4620      	mov	r0, r4
 80142cc:	2201      	movs	r2, #1
 80142ce:	2102      	movs	r1, #2
 80142d0:	b004      	add	sp, #16
 80142d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80142d6:	f7ff bf35 	b.w	8014144 <uxr_stream_id>
 80142da:	bf00      	nop

080142dc <uxr_add_input_best_effort_buffer>:
 80142dc:	b510      	push	{r4, lr}
 80142de:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 80142e2:	1c62      	adds	r2, r4, #1
 80142e4:	f104 0321 	add.w	r3, r4, #33	; 0x21
 80142e8:	b082      	sub	sp, #8
 80142ea:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80142ee:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80142f2:	f004 f9d1 	bl	8018698 <uxr_init_input_best_effort_stream>
 80142f6:	4620      	mov	r0, r4
 80142f8:	2200      	movs	r2, #0
 80142fa:	2101      	movs	r1, #1
 80142fc:	b002      	add	sp, #8
 80142fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014302:	f7ff bf1f 	b.w	8014144 <uxr_stream_id>
 8014306:	bf00      	nop

08014308 <uxr_add_input_reliable_buffer>:
 8014308:	b570      	push	{r4, r5, r6, lr}
 801430a:	b084      	sub	sp, #16
 801430c:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 8014310:	9e08      	ldr	r6, [sp, #32]
 8014312:	9600      	str	r6, [sp, #0]
 8014314:	2518      	movs	r5, #24
 8014316:	1c66      	adds	r6, r4, #1
 8014318:	fb05 0504 	mla	r5, r5, r4, r0
 801431c:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 8014320:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8014324:	f004 fa00 	bl	8018728 <uxr_init_input_reliable_stream>
 8014328:	4620      	mov	r0, r4
 801432a:	2200      	movs	r2, #0
 801432c:	2102      	movs	r1, #2
 801432e:	b004      	add	sp, #16
 8014330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014334:	f7ff bf06 	b.w	8014144 <uxr_stream_id>

08014338 <uxr_get_output_best_effort_stream>:
 8014338:	7c03      	ldrb	r3, [r0, #16]
 801433a:	428b      	cmp	r3, r1
 801433c:	bf8c      	ite	hi
 801433e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8014342:	2000      	movls	r0, #0
 8014344:	4770      	bx	lr
 8014346:	bf00      	nop

08014348 <uxr_get_output_reliable_stream>:
 8014348:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801434c:	428b      	cmp	r3, r1
 801434e:	bf83      	ittte	hi
 8014350:	2328      	movhi	r3, #40	; 0x28
 8014352:	fb03 0101 	mlahi	r1, r3, r1, r0
 8014356:	f101 0018 	addhi.w	r0, r1, #24
 801435a:	2000      	movls	r0, #0
 801435c:	4770      	bx	lr
 801435e:	bf00      	nop

08014360 <uxr_get_input_best_effort_stream>:
 8014360:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8014364:	428b      	cmp	r3, r1
 8014366:	bf86      	itte	hi
 8014368:	3121      	addhi	r1, #33	; 0x21
 801436a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801436e:	2000      	movls	r0, #0
 8014370:	4770      	bx	lr
 8014372:	bf00      	nop

08014374 <uxr_get_input_reliable_stream>:
 8014374:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8014378:	428b      	cmp	r3, r1
 801437a:	bf83      	ittte	hi
 801437c:	2318      	movhi	r3, #24
 801437e:	fb03 0101 	mlahi	r1, r3, r1, r0
 8014382:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 8014386:	2000      	movls	r0, #0
 8014388:	4770      	bx	lr
 801438a:	bf00      	nop

0801438c <uxr_output_streams_confirmed>:
 801438c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8014390:	b183      	cbz	r3, 80143b4 <uxr_output_streams_confirmed+0x28>
 8014392:	b570      	push	{r4, r5, r6, lr}
 8014394:	4606      	mov	r6, r0
 8014396:	f100 0518 	add.w	r5, r0, #24
 801439a:	2400      	movs	r4, #0
 801439c:	e001      	b.n	80143a2 <uxr_output_streams_confirmed+0x16>
 801439e:	3528      	adds	r5, #40	; 0x28
 80143a0:	b138      	cbz	r0, 80143b2 <uxr_output_streams_confirmed+0x26>
 80143a2:	4628      	mov	r0, r5
 80143a4:	f004 fe6a 	bl	801907c <uxr_is_output_up_to_date>
 80143a8:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80143ac:	3401      	adds	r4, #1
 80143ae:	42a3      	cmp	r3, r4
 80143b0:	d8f5      	bhi.n	801439e <uxr_output_streams_confirmed+0x12>
 80143b2:	bd70      	pop	{r4, r5, r6, pc}
 80143b4:	2001      	movs	r0, #1
 80143b6:	4770      	bx	lr

080143b8 <uxr_buffer_submessage_header>:
 80143b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ba:	4604      	mov	r4, r0
 80143bc:	460e      	mov	r6, r1
 80143be:	2104      	movs	r1, #4
 80143c0:	4615      	mov	r5, r2
 80143c2:	461f      	mov	r7, r3
 80143c4:	f7fd feac 	bl	8012120 <ucdr_align_to>
 80143c8:	2301      	movs	r3, #1
 80143ca:	ea47 0203 	orr.w	r2, r7, r3
 80143ce:	4631      	mov	r1, r6
 80143d0:	7523      	strb	r3, [r4, #20]
 80143d2:	4620      	mov	r0, r4
 80143d4:	462b      	mov	r3, r5
 80143d6:	f000 fa21 	bl	801481c <uxr_serialize_submessage_header>
 80143da:	4620      	mov	r0, r4
 80143dc:	f7fd feb6 	bl	801214c <ucdr_buffer_remaining>
 80143e0:	42a8      	cmp	r0, r5
 80143e2:	bf34      	ite	cc
 80143e4:	2000      	movcc	r0, #0
 80143e6:	2001      	movcs	r0, #1
 80143e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143ea:	bf00      	nop

080143ec <uxr_read_submessage_header>:
 80143ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143f0:	4604      	mov	r4, r0
 80143f2:	460d      	mov	r5, r1
 80143f4:	2104      	movs	r1, #4
 80143f6:	4616      	mov	r6, r2
 80143f8:	4698      	mov	r8, r3
 80143fa:	f7fd fe91 	bl	8012120 <ucdr_align_to>
 80143fe:	4620      	mov	r0, r4
 8014400:	f7fd fea4 	bl	801214c <ucdr_buffer_remaining>
 8014404:	2803      	cmp	r0, #3
 8014406:	bf8c      	ite	hi
 8014408:	2701      	movhi	r7, #1
 801440a:	2700      	movls	r7, #0
 801440c:	d802      	bhi.n	8014414 <uxr_read_submessage_header+0x28>
 801440e:	4638      	mov	r0, r7
 8014410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014414:	4633      	mov	r3, r6
 8014416:	4642      	mov	r2, r8
 8014418:	4620      	mov	r0, r4
 801441a:	4629      	mov	r1, r5
 801441c:	f000 fa12 	bl	8014844 <uxr_deserialize_submessage_header>
 8014420:	f898 3000 	ldrb.w	r3, [r8]
 8014424:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8014428:	f003 0301 	and.w	r3, r3, #1
 801442c:	f888 2000 	strb.w	r2, [r8]
 8014430:	7523      	strb	r3, [r4, #20]
 8014432:	4638      	mov	r0, r7
 8014434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014438 <uxr_submessage_padding>:
 8014438:	f010 0003 	ands.w	r0, r0, #3
 801443c:	bf18      	it	ne
 801443e:	f1c0 0004 	rsbne	r0, r0, #4
 8014442:	4770      	bx	lr

08014444 <uxr_millis>:
 8014444:	b510      	push	{r4, lr}
 8014446:	b084      	sub	sp, #16
 8014448:	4669      	mov	r1, sp
 801444a:	2001      	movs	r0, #1
 801444c:	f7ee fb80 	bl	8002b50 <clock_gettime>
 8014450:	e9dd 2400 	ldrd	r2, r4, [sp]
 8014454:	4907      	ldr	r1, [pc, #28]	; (8014474 <uxr_millis+0x30>)
 8014456:	9802      	ldr	r0, [sp, #8]
 8014458:	fba2 2301 	umull	r2, r3, r2, r1
 801445c:	fb01 3304 	mla	r3, r1, r4, r3
 8014460:	4604      	mov	r4, r0
 8014462:	1810      	adds	r0, r2, r0
 8014464:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8014468:	4a03      	ldr	r2, [pc, #12]	; (8014478 <uxr_millis+0x34>)
 801446a:	2300      	movs	r3, #0
 801446c:	f7ec fc1c 	bl	8000ca8 <__aeabi_ldivmod>
 8014470:	b004      	add	sp, #16
 8014472:	bd10      	pop	{r4, pc}
 8014474:	3b9aca00 	.word	0x3b9aca00
 8014478:	000f4240 	.word	0x000f4240

0801447c <uxr_nanos>:
 801447c:	b510      	push	{r4, lr}
 801447e:	b084      	sub	sp, #16
 8014480:	4669      	mov	r1, sp
 8014482:	2001      	movs	r0, #1
 8014484:	f7ee fb64 	bl	8002b50 <clock_gettime>
 8014488:	e9dd 2400 	ldrd	r2, r4, [sp]
 801448c:	4905      	ldr	r1, [pc, #20]	; (80144a4 <uxr_nanos+0x28>)
 801448e:	9802      	ldr	r0, [sp, #8]
 8014490:	fba2 2301 	umull	r2, r3, r2, r1
 8014494:	fb01 3304 	mla	r3, r1, r4, r3
 8014498:	4604      	mov	r4, r0
 801449a:	1810      	adds	r0, r2, r0
 801449c:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 80144a0:	b004      	add	sp, #16
 80144a2:	bd10      	pop	{r4, pc}
 80144a4:	3b9aca00 	.word	0x3b9aca00

080144a8 <on_full_output_buffer_fragmented>:
 80144a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144ac:	460c      	mov	r4, r1
 80144ae:	b08a      	sub	sp, #40	; 0x28
 80144b0:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 80144b4:	4606      	mov	r6, r0
 80144b6:	f104 0008 	add.w	r0, r4, #8
 80144ba:	f7ff ff45 	bl	8014348 <uxr_get_output_reliable_stream>
 80144be:	4605      	mov	r5, r0
 80144c0:	f004 fde6 	bl	8019090 <get_available_free_slots>
 80144c4:	b968      	cbnz	r0, 80144e2 <on_full_output_buffer_fragmented+0x3a>
 80144c6:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 80144ca:	4620      	mov	r0, r4
 80144cc:	4798      	blx	r3
 80144ce:	b918      	cbnz	r0, 80144d8 <on_full_output_buffer_fragmented+0x30>
 80144d0:	2001      	movs	r0, #1
 80144d2:	b00a      	add	sp, #40	; 0x28
 80144d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144d8:	4628      	mov	r0, r5
 80144da:	f004 fdd9 	bl	8019090 <get_available_free_slots>
 80144de:	2800      	cmp	r0, #0
 80144e0:	d0f6      	beq.n	80144d0 <on_full_output_buffer_fragmented+0x28>
 80144e2:	8928      	ldrh	r0, [r5, #8]
 80144e4:	89eb      	ldrh	r3, [r5, #14]
 80144e6:	7b2a      	ldrb	r2, [r5, #12]
 80144e8:	fbb3 f1f0 	udiv	r1, r3, r0
 80144ec:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 80144f0:	fb00 3111 	mls	r1, r0, r1, r3
 80144f4:	b28b      	uxth	r3, r1
 80144f6:	32fc      	adds	r2, #252	; 0xfc
 80144f8:	6869      	ldr	r1, [r5, #4]
 80144fa:	fbb1 f1f0 	udiv	r1, r1, r0
 80144fe:	1f0f      	subs	r7, r1, #4
 8014500:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8014504:	fb01 f103 	mul.w	r1, r1, r3
 8014508:	443a      	add	r2, r7
 801450a:	682b      	ldr	r3, [r5, #0]
 801450c:	fa1f f882 	uxth.w	r8, r2
 8014510:	3104      	adds	r1, #4
 8014512:	4419      	add	r1, r3
 8014514:	eba0 0008 	sub.w	r0, r0, r8
 8014518:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 801451c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014520:	9300      	str	r3, [sp, #0]
 8014522:	463a      	mov	r2, r7
 8014524:	a802      	add	r0, sp, #8
 8014526:	2300      	movs	r3, #0
 8014528:	f7fd fdcc 	bl	80120c4 <ucdr_init_buffer_origin_offset>
 801452c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8014530:	42ba      	cmp	r2, r7
 8014532:	d927      	bls.n	8014584 <on_full_output_buffer_fragmented+0xdc>
 8014534:	4642      	mov	r2, r8
 8014536:	2300      	movs	r3, #0
 8014538:	210d      	movs	r1, #13
 801453a:	a802      	add	r0, sp, #8
 801453c:	f7ff ff3c 	bl	80143b8 <uxr_buffer_submessage_header>
 8014540:	8928      	ldrh	r0, [r5, #8]
 8014542:	89eb      	ldrh	r3, [r5, #14]
 8014544:	fbb3 f1f0 	udiv	r1, r3, r0
 8014548:	fb00 3111 	mls	r1, r0, r1, r3
 801454c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014550:	b289      	uxth	r1, r1
 8014552:	fbb3 f3f0 	udiv	r3, r3, r0
 8014556:	fb03 f301 	mul.w	r3, r3, r1
 801455a:	50d7      	str	r7, [r2, r3]
 801455c:	89e8      	ldrh	r0, [r5, #14]
 801455e:	2101      	movs	r1, #1
 8014560:	f004 fdb6 	bl	80190d0 <uxr_seq_num_add>
 8014564:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8014568:	81e8      	strh	r0, [r5, #14]
 801456a:	1a52      	subs	r2, r2, r1
 801456c:	4630      	mov	r0, r6
 801456e:	f7fd fdbb 	bl	80120e8 <ucdr_init_buffer>
 8014572:	4630      	mov	r0, r6
 8014574:	490f      	ldr	r1, [pc, #60]	; (80145b4 <on_full_output_buffer_fragmented+0x10c>)
 8014576:	4622      	mov	r2, r4
 8014578:	f7fd fd8c 	bl	8012094 <ucdr_set_on_full_buffer_callback>
 801457c:	2000      	movs	r0, #0
 801457e:	b00a      	add	sp, #40	; 0x28
 8014580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014584:	b292      	uxth	r2, r2
 8014586:	2302      	movs	r3, #2
 8014588:	210d      	movs	r1, #13
 801458a:	a802      	add	r0, sp, #8
 801458c:	f7ff ff14 	bl	80143b8 <uxr_buffer_submessage_header>
 8014590:	8928      	ldrh	r0, [r5, #8]
 8014592:	89eb      	ldrh	r3, [r5, #14]
 8014594:	fbb3 f2f0 	udiv	r2, r3, r0
 8014598:	fb00 3212 	mls	r2, r0, r2, r3
 801459c:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 80145a0:	686b      	ldr	r3, [r5, #4]
 80145a2:	fbb3 f3f0 	udiv	r3, r3, r0
 80145a6:	b292      	uxth	r2, r2
 80145a8:	6828      	ldr	r0, [r5, #0]
 80145aa:	fb03 f302 	mul.w	r3, r3, r2
 80145ae:	3108      	adds	r1, #8
 80145b0:	50c1      	str	r1, [r0, r3]
 80145b2:	e7d3      	b.n	801455c <on_full_output_buffer_fragmented+0xb4>
 80145b4:	080144a9 	.word	0x080144a9

080145b8 <uxr_prepare_output_stream>:
 80145b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145ba:	b087      	sub	sp, #28
 80145bc:	2407      	movs	r4, #7
 80145be:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80145c0:	9202      	str	r2, [sp, #8]
 80145c2:	2500      	movs	r5, #0
 80145c4:	1d32      	adds	r2, r6, #4
 80145c6:	e9cd 4500 	strd	r4, r5, [sp]
 80145ca:	9103      	str	r1, [sp, #12]
 80145cc:	461c      	mov	r4, r3
 80145ce:	4606      	mov	r6, r0
 80145d0:	f7fe ffce 	bl	8013570 <uxr_prepare_stream_to_write_submessage>
 80145d4:	f080 0201 	eor.w	r2, r0, #1
 80145d8:	b2d2      	uxtb	r2, r2
 80145da:	75a2      	strb	r2, [r4, #22]
 80145dc:	b112      	cbz	r2, 80145e4 <uxr_prepare_output_stream+0x2c>
 80145de:	4628      	mov	r0, r5
 80145e0:	b007      	add	sp, #28
 80145e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145e4:	aa05      	add	r2, sp, #20
 80145e6:	9902      	ldr	r1, [sp, #8]
 80145e8:	4630      	mov	r0, r6
 80145ea:	f7ff f8f7 	bl	80137dc <uxr_init_base_object_request>
 80145ee:	a905      	add	r1, sp, #20
 80145f0:	4605      	mov	r5, r0
 80145f2:	4620      	mov	r0, r4
 80145f4:	f000 fda4 	bl	8015140 <uxr_serialize_WRITE_DATA_Payload_Data>
 80145f8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80145fc:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8014600:	1a52      	subs	r2, r2, r1
 8014602:	4620      	mov	r0, r4
 8014604:	f7fd fd70 	bl	80120e8 <ucdr_init_buffer>
 8014608:	4620      	mov	r0, r4
 801460a:	463a      	mov	r2, r7
 801460c:	4631      	mov	r1, r6
 801460e:	f7fd fd41 	bl	8012094 <ucdr_set_on_full_buffer_callback>
 8014612:	4628      	mov	r0, r5
 8014614:	b007      	add	sp, #28
 8014616:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014618 <uxr_prepare_output_stream_fragmented>:
 8014618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801461c:	b091      	sub	sp, #68	; 0x44
 801461e:	4605      	mov	r5, r0
 8014620:	9105      	str	r1, [sp, #20]
 8014622:	3008      	adds	r0, #8
 8014624:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8014628:	9302      	str	r3, [sp, #8]
 801462a:	9204      	str	r2, [sp, #16]
 801462c:	f7ff fe8c 	bl	8014348 <uxr_get_output_reliable_stream>
 8014630:	2800      	cmp	r0, #0
 8014632:	f000 808d 	beq.w	8014750 <uxr_prepare_output_stream_fragmented+0x138>
 8014636:	4604      	mov	r4, r0
 8014638:	f004 fd2a 	bl	8019090 <get_available_free_slots>
 801463c:	2800      	cmp	r0, #0
 801463e:	f000 8082 	beq.w	8014746 <uxr_prepare_output_stream_fragmented+0x12e>
 8014642:	8922      	ldrh	r2, [r4, #8]
 8014644:	89e7      	ldrh	r7, [r4, #14]
 8014646:	fbb7 f8f2 	udiv	r8, r7, r2
 801464a:	e9d4 3100 	ldrd	r3, r1, [r4]
 801464e:	fb02 7818 	mls	r8, r2, r8, r7
 8014652:	fa1f f888 	uxth.w	r8, r8
 8014656:	fbb1 f2f2 	udiv	r2, r1, r2
 801465a:	fb02 f808 	mul.w	r8, r2, r8
 801465e:	f108 0804 	add.w	r8, r8, #4
 8014662:	4498      	add	r8, r3
 8014664:	7b23      	ldrb	r3, [r4, #12]
 8014666:	f858 ac04 	ldr.w	sl, [r8, #-4]
 801466a:	9203      	str	r2, [sp, #12]
 801466c:	4553      	cmp	r3, sl
 801466e:	f1a2 0b04 	sub.w	fp, r2, #4
 8014672:	d379      	bcc.n	8014768 <uxr_prepare_output_stream_fragmented+0x150>
 8014674:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8014676:	f8cd a000 	str.w	sl, [sp]
 801467a:	f1ab 0904 	sub.w	r9, fp, #4
 801467e:	eba9 0903 	sub.w	r9, r9, r3
 8014682:	a808      	add	r0, sp, #32
 8014684:	465a      	mov	r2, fp
 8014686:	4641      	mov	r1, r8
 8014688:	3608      	adds	r6, #8
 801468a:	fa1f f989 	uxth.w	r9, r9
 801468e:	2300      	movs	r3, #0
 8014690:	f7fd fd18 	bl	80120c4 <ucdr_init_buffer_origin_offset>
 8014694:	455e      	cmp	r6, fp
 8014696:	bf34      	ite	cc
 8014698:	2302      	movcc	r3, #2
 801469a:	2300      	movcs	r3, #0
 801469c:	464a      	mov	r2, r9
 801469e:	a808      	add	r0, sp, #32
 80146a0:	210d      	movs	r1, #13
 80146a2:	f7ff fe89 	bl	80143b8 <uxr_buffer_submessage_header>
 80146a6:	8920      	ldrh	r0, [r4, #8]
 80146a8:	fbb7 f3f0 	udiv	r3, r7, r0
 80146ac:	e9d4 2100 	ldrd	r2, r1, [r4]
 80146b0:	fb00 7313 	mls	r3, r0, r3, r7
 80146b4:	b29b      	uxth	r3, r3
 80146b6:	fbb1 f1f0 	udiv	r1, r1, r0
 80146ba:	fb03 f301 	mul.w	r3, r3, r1
 80146be:	4638      	mov	r0, r7
 80146c0:	f842 b003 	str.w	fp, [r2, r3]
 80146c4:	2101      	movs	r1, #1
 80146c6:	f004 fd03 	bl	80190d0 <uxr_seq_num_add>
 80146ca:	9a03      	ldr	r2, [sp, #12]
 80146cc:	f10a 0104 	add.w	r1, sl, #4
 80146d0:	4441      	add	r1, r8
 80146d2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80146d6:	3a08      	subs	r2, #8
 80146d8:	4607      	mov	r7, r0
 80146da:	eba2 020a 	sub.w	r2, r2, sl
 80146de:	4640      	mov	r0, r8
 80146e0:	f7fd fd02 	bl	80120e8 <ucdr_init_buffer>
 80146e4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80146e6:	81e7      	strh	r7, [r4, #14]
 80146e8:	3204      	adds	r2, #4
 80146ea:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80146ee:	bf28      	it	cs
 80146f0:	2200      	movcs	r2, #0
 80146f2:	2300      	movs	r3, #0
 80146f4:	b292      	uxth	r2, r2
 80146f6:	2107      	movs	r1, #7
 80146f8:	4640      	mov	r0, r8
 80146fa:	f7ff fe5d 	bl	80143b8 <uxr_buffer_submessage_header>
 80146fe:	aa07      	add	r2, sp, #28
 8014700:	9904      	ldr	r1, [sp, #16]
 8014702:	4628      	mov	r0, r5
 8014704:	f7ff f86a 	bl	80137dc <uxr_init_base_object_request>
 8014708:	a907      	add	r1, sp, #28
 801470a:	4604      	mov	r4, r0
 801470c:	4640      	mov	r0, r8
 801470e:	f000 fd17 	bl	8015140 <uxr_serialize_WRITE_DATA_Payload_Data>
 8014712:	e9d8 2101 	ldrd	r2, r1, [r8, #4]
 8014716:	4640      	mov	r0, r8
 8014718:	1a52      	subs	r2, r2, r1
 801471a:	f7fd fce5 	bl	80120e8 <ucdr_init_buffer>
 801471e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014720:	9b05      	ldr	r3, [sp, #20]
 8014722:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 8014726:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014728:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 801472c:	4640      	mov	r0, r8
 801472e:	491b      	ldr	r1, [pc, #108]	; (801479c <uxr_prepare_output_stream_fragmented+0x184>)
 8014730:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
 8014734:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8014738:	462a      	mov	r2, r5
 801473a:	f7fd fcab 	bl	8012094 <ucdr_set_on_full_buffer_callback>
 801473e:	4620      	mov	r0, r4
 8014740:	b011      	add	sp, #68	; 0x44
 8014742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014746:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014748:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801474a:	4628      	mov	r0, r5
 801474c:	4798      	blx	r3
 801474e:	b920      	cbnz	r0, 801475a <uxr_prepare_output_stream_fragmented+0x142>
 8014750:	2400      	movs	r4, #0
 8014752:	4620      	mov	r0, r4
 8014754:	b011      	add	sp, #68	; 0x44
 8014756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801475a:	4620      	mov	r0, r4
 801475c:	f004 fc98 	bl	8019090 <get_available_free_slots>
 8014760:	2800      	cmp	r0, #0
 8014762:	f47f af6e 	bne.w	8014642 <uxr_prepare_output_stream_fragmented+0x2a>
 8014766:	e7f3      	b.n	8014750 <uxr_prepare_output_stream_fragmented+0x138>
 8014768:	4638      	mov	r0, r7
 801476a:	2101      	movs	r1, #1
 801476c:	f004 fcb0 	bl	80190d0 <uxr_seq_num_add>
 8014770:	8922      	ldrh	r2, [r4, #8]
 8014772:	fbb0 f8f2 	udiv	r8, r0, r2
 8014776:	fb02 0818 	mls	r8, r2, r8, r0
 801477a:	fa1f f888 	uxth.w	r8, r8
 801477e:	6863      	ldr	r3, [r4, #4]
 8014780:	fbb3 f3f2 	udiv	r3, r3, r2
 8014784:	6822      	ldr	r2, [r4, #0]
 8014786:	fb08 f803 	mul.w	r8, r8, r3
 801478a:	f108 0804 	add.w	r8, r8, #4
 801478e:	4490      	add	r8, r2
 8014790:	7b23      	ldrb	r3, [r4, #12]
 8014792:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8014796:	4607      	mov	r7, r0
 8014798:	e76c      	b.n	8014674 <uxr_prepare_output_stream_fragmented+0x5c>
 801479a:	bf00      	nop
 801479c:	080144a9 	.word	0x080144a9

080147a0 <uxr_serialize_message_header>:
 80147a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147a2:	b083      	sub	sp, #12
 80147a4:	4616      	mov	r6, r2
 80147a6:	4604      	mov	r4, r0
 80147a8:	9301      	str	r3, [sp, #4]
 80147aa:	460d      	mov	r5, r1
 80147ac:	9f08      	ldr	r7, [sp, #32]
 80147ae:	f7fd f8ab 	bl	8011908 <ucdr_serialize_uint8_t>
 80147b2:	4631      	mov	r1, r6
 80147b4:	4620      	mov	r0, r4
 80147b6:	f7fd f8a7 	bl	8011908 <ucdr_serialize_uint8_t>
 80147ba:	9a01      	ldr	r2, [sp, #4]
 80147bc:	4620      	mov	r0, r4
 80147be:	2101      	movs	r1, #1
 80147c0:	f7fd f8f6 	bl	80119b0 <ucdr_serialize_endian_uint16_t>
 80147c4:	062b      	lsls	r3, r5, #24
 80147c6:	d501      	bpl.n	80147cc <uxr_serialize_message_header+0x2c>
 80147c8:	b003      	add	sp, #12
 80147ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147cc:	4639      	mov	r1, r7
 80147ce:	4620      	mov	r0, r4
 80147d0:	2204      	movs	r2, #4
 80147d2:	b003      	add	sp, #12
 80147d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80147d8:	f7fc be80 	b.w	80114dc <ucdr_serialize_array_uint8_t>

080147dc <uxr_deserialize_message_header>:
 80147dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147de:	b083      	sub	sp, #12
 80147e0:	4616      	mov	r6, r2
 80147e2:	4604      	mov	r4, r0
 80147e4:	9301      	str	r3, [sp, #4]
 80147e6:	460d      	mov	r5, r1
 80147e8:	9f08      	ldr	r7, [sp, #32]
 80147ea:	f7fd f8a3 	bl	8011934 <ucdr_deserialize_uint8_t>
 80147ee:	4631      	mov	r1, r6
 80147f0:	4620      	mov	r0, r4
 80147f2:	f7fd f89f 	bl	8011934 <ucdr_deserialize_uint8_t>
 80147f6:	9a01      	ldr	r2, [sp, #4]
 80147f8:	4620      	mov	r0, r4
 80147fa:	2101      	movs	r1, #1
 80147fc:	f7fd f92a 	bl	8011a54 <ucdr_deserialize_endian_uint16_t>
 8014800:	f995 3000 	ldrsb.w	r3, [r5]
 8014804:	2b00      	cmp	r3, #0
 8014806:	da01      	bge.n	801480c <uxr_deserialize_message_header+0x30>
 8014808:	b003      	add	sp, #12
 801480a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801480c:	4639      	mov	r1, r7
 801480e:	4620      	mov	r0, r4
 8014810:	2204      	movs	r2, #4
 8014812:	b003      	add	sp, #12
 8014814:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014818:	f7fc bec4 	b.w	80115a4 <ucdr_deserialize_array_uint8_t>

0801481c <uxr_serialize_submessage_header>:
 801481c:	b530      	push	{r4, r5, lr}
 801481e:	b083      	sub	sp, #12
 8014820:	4615      	mov	r5, r2
 8014822:	4604      	mov	r4, r0
 8014824:	9301      	str	r3, [sp, #4]
 8014826:	f7fd f86f 	bl	8011908 <ucdr_serialize_uint8_t>
 801482a:	4629      	mov	r1, r5
 801482c:	4620      	mov	r0, r4
 801482e:	f7fd f86b 	bl	8011908 <ucdr_serialize_uint8_t>
 8014832:	9a01      	ldr	r2, [sp, #4]
 8014834:	4620      	mov	r0, r4
 8014836:	2101      	movs	r1, #1
 8014838:	b003      	add	sp, #12
 801483a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801483e:	f7fd b8b7 	b.w	80119b0 <ucdr_serialize_endian_uint16_t>
 8014842:	bf00      	nop

08014844 <uxr_deserialize_submessage_header>:
 8014844:	b530      	push	{r4, r5, lr}
 8014846:	b083      	sub	sp, #12
 8014848:	4615      	mov	r5, r2
 801484a:	4604      	mov	r4, r0
 801484c:	9301      	str	r3, [sp, #4]
 801484e:	f7fd f871 	bl	8011934 <ucdr_deserialize_uint8_t>
 8014852:	4629      	mov	r1, r5
 8014854:	4620      	mov	r0, r4
 8014856:	f7fd f86d 	bl	8011934 <ucdr_deserialize_uint8_t>
 801485a:	9a01      	ldr	r2, [sp, #4]
 801485c:	4620      	mov	r0, r4
 801485e:	2101      	movs	r1, #1
 8014860:	b003      	add	sp, #12
 8014862:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014866:	f7fd b8f5 	b.w	8011a54 <ucdr_deserialize_endian_uint16_t>
 801486a:	bf00      	nop

0801486c <uxr_serialize_CLIENT_Representation>:
 801486c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014870:	2204      	movs	r2, #4
 8014872:	460c      	mov	r4, r1
 8014874:	4605      	mov	r5, r0
 8014876:	f7fc fe31 	bl	80114dc <ucdr_serialize_array_uint8_t>
 801487a:	1d21      	adds	r1, r4, #4
 801487c:	4607      	mov	r7, r0
 801487e:	2202      	movs	r2, #2
 8014880:	4628      	mov	r0, r5
 8014882:	f7fc fe2b 	bl	80114dc <ucdr_serialize_array_uint8_t>
 8014886:	1da1      	adds	r1, r4, #6
 8014888:	4007      	ands	r7, r0
 801488a:	2202      	movs	r2, #2
 801488c:	4628      	mov	r0, r5
 801488e:	f7fc fe25 	bl	80114dc <ucdr_serialize_array_uint8_t>
 8014892:	fa5f f887 	uxtb.w	r8, r7
 8014896:	2204      	movs	r2, #4
 8014898:	4607      	mov	r7, r0
 801489a:	f104 0108 	add.w	r1, r4, #8
 801489e:	4628      	mov	r0, r5
 80148a0:	f7fc fe1c 	bl	80114dc <ucdr_serialize_array_uint8_t>
 80148a4:	ea08 0707 	and.w	r7, r8, r7
 80148a8:	7b21      	ldrb	r1, [r4, #12]
 80148aa:	4680      	mov	r8, r0
 80148ac:	4628      	mov	r0, r5
 80148ae:	f7fd f82b 	bl	8011908 <ucdr_serialize_uint8_t>
 80148b2:	ea08 0807 	and.w	r8, r8, r7
 80148b6:	7b61      	ldrb	r1, [r4, #13]
 80148b8:	4607      	mov	r7, r0
 80148ba:	4628      	mov	r0, r5
 80148bc:	f7fc fff4 	bl	80118a8 <ucdr_serialize_bool>
 80148c0:	7b63      	ldrb	r3, [r4, #13]
 80148c2:	ea08 0707 	and.w	r7, r8, r7
 80148c6:	ea07 0600 	and.w	r6, r7, r0
 80148ca:	b933      	cbnz	r3, 80148da <uxr_serialize_CLIENT_Representation+0x6e>
 80148cc:	8ba1      	ldrh	r1, [r4, #28]
 80148ce:	4628      	mov	r0, r5
 80148d0:	f7fd f846 	bl	8011960 <ucdr_serialize_uint16_t>
 80148d4:	4030      	ands	r0, r6
 80148d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148da:	6921      	ldr	r1, [r4, #16]
 80148dc:	4628      	mov	r0, r5
 80148de:	f7fd f8e3 	bl	8011aa8 <ucdr_serialize_uint32_t>
 80148e2:	6923      	ldr	r3, [r4, #16]
 80148e4:	b1cb      	cbz	r3, 801491a <uxr_serialize_CLIENT_Representation+0xae>
 80148e6:	b1d0      	cbz	r0, 801491e <uxr_serialize_CLIENT_Representation+0xb2>
 80148e8:	46a0      	mov	r8, r4
 80148ea:	f04f 0900 	mov.w	r9, #0
 80148ee:	e002      	b.n	80148f6 <uxr_serialize_CLIENT_Representation+0x8a>
 80148f0:	f108 0808 	add.w	r8, r8, #8
 80148f4:	b198      	cbz	r0, 801491e <uxr_serialize_CLIENT_Representation+0xb2>
 80148f6:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80148fa:	4628      	mov	r0, r5
 80148fc:	f003 febc 	bl	8018678 <ucdr_serialize_string>
 8014900:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8014904:	4607      	mov	r7, r0
 8014906:	4628      	mov	r0, r5
 8014908:	f003 feb6 	bl	8018678 <ucdr_serialize_string>
 801490c:	6923      	ldr	r3, [r4, #16]
 801490e:	f109 0901 	add.w	r9, r9, #1
 8014912:	4038      	ands	r0, r7
 8014914:	4599      	cmp	r9, r3
 8014916:	b2c0      	uxtb	r0, r0
 8014918:	d3ea      	bcc.n	80148f0 <uxr_serialize_CLIENT_Representation+0x84>
 801491a:	4006      	ands	r6, r0
 801491c:	e7d6      	b.n	80148cc <uxr_serialize_CLIENT_Representation+0x60>
 801491e:	2600      	movs	r6, #0
 8014920:	e7d4      	b.n	80148cc <uxr_serialize_CLIENT_Representation+0x60>
 8014922:	bf00      	nop

08014924 <uxr_serialize_AGENT_Representation>:
 8014924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014928:	2204      	movs	r2, #4
 801492a:	460c      	mov	r4, r1
 801492c:	4605      	mov	r5, r0
 801492e:	f7fc fdd5 	bl	80114dc <ucdr_serialize_array_uint8_t>
 8014932:	1d21      	adds	r1, r4, #4
 8014934:	4606      	mov	r6, r0
 8014936:	2202      	movs	r2, #2
 8014938:	4628      	mov	r0, r5
 801493a:	f7fc fdcf 	bl	80114dc <ucdr_serialize_array_uint8_t>
 801493e:	1da1      	adds	r1, r4, #6
 8014940:	4006      	ands	r6, r0
 8014942:	2202      	movs	r2, #2
 8014944:	4628      	mov	r0, r5
 8014946:	f7fc fdc9 	bl	80114dc <ucdr_serialize_array_uint8_t>
 801494a:	b2f6      	uxtb	r6, r6
 801494c:	4603      	mov	r3, r0
 801494e:	7a21      	ldrb	r1, [r4, #8]
 8014950:	4628      	mov	r0, r5
 8014952:	401e      	ands	r6, r3
 8014954:	f7fc ffa8 	bl	80118a8 <ucdr_serialize_bool>
 8014958:	7a23      	ldrb	r3, [r4, #8]
 801495a:	ea00 0706 	and.w	r7, r0, r6
 801495e:	b913      	cbnz	r3, 8014966 <uxr_serialize_AGENT_Representation+0x42>
 8014960:	4638      	mov	r0, r7
 8014962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014966:	68e1      	ldr	r1, [r4, #12]
 8014968:	4628      	mov	r0, r5
 801496a:	f7fd f89d 	bl	8011aa8 <ucdr_serialize_uint32_t>
 801496e:	68e3      	ldr	r3, [r4, #12]
 8014970:	b313      	cbz	r3, 80149b8 <uxr_serialize_AGENT_Representation+0x94>
 8014972:	b1e8      	cbz	r0, 80149b0 <uxr_serialize_AGENT_Representation+0x8c>
 8014974:	46a0      	mov	r8, r4
 8014976:	f04f 0900 	mov.w	r9, #0
 801497a:	e002      	b.n	8014982 <uxr_serialize_AGENT_Representation+0x5e>
 801497c:	f108 0808 	add.w	r8, r8, #8
 8014980:	b1b3      	cbz	r3, 80149b0 <uxr_serialize_AGENT_Representation+0x8c>
 8014982:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014986:	4628      	mov	r0, r5
 8014988:	f003 fe76 	bl	8018678 <ucdr_serialize_string>
 801498c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014990:	4606      	mov	r6, r0
 8014992:	4628      	mov	r0, r5
 8014994:	f003 fe70 	bl	8018678 <ucdr_serialize_string>
 8014998:	68e2      	ldr	r2, [r4, #12]
 801499a:	f109 0901 	add.w	r9, r9, #1
 801499e:	ea06 0300 	and.w	r3, r6, r0
 80149a2:	4591      	cmp	r9, r2
 80149a4:	b2db      	uxtb	r3, r3
 80149a6:	d3e9      	bcc.n	801497c <uxr_serialize_AGENT_Representation+0x58>
 80149a8:	401f      	ands	r7, r3
 80149aa:	4638      	mov	r0, r7
 80149ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149b0:	2700      	movs	r7, #0
 80149b2:	4638      	mov	r0, r7
 80149b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149b8:	4007      	ands	r7, r0
 80149ba:	e7d1      	b.n	8014960 <uxr_serialize_AGENT_Representation+0x3c>

080149bc <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80149bc:	b570      	push	{r4, r5, r6, lr}
 80149be:	460d      	mov	r5, r1
 80149c0:	7809      	ldrb	r1, [r1, #0]
 80149c2:	4606      	mov	r6, r0
 80149c4:	f7fc ff70 	bl	80118a8 <ucdr_serialize_bool>
 80149c8:	782b      	ldrb	r3, [r5, #0]
 80149ca:	4604      	mov	r4, r0
 80149cc:	b94b      	cbnz	r3, 80149e2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80149ce:	7a29      	ldrb	r1, [r5, #8]
 80149d0:	4630      	mov	r0, r6
 80149d2:	f7fc ff69 	bl	80118a8 <ucdr_serialize_bool>
 80149d6:	7a2b      	ldrb	r3, [r5, #8]
 80149d8:	4004      	ands	r4, r0
 80149da:	b2e4      	uxtb	r4, r4
 80149dc:	b943      	cbnz	r3, 80149f0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80149de:	4620      	mov	r0, r4
 80149e0:	bd70      	pop	{r4, r5, r6, pc}
 80149e2:	6869      	ldr	r1, [r5, #4]
 80149e4:	4630      	mov	r0, r6
 80149e6:	f003 fe47 	bl	8018678 <ucdr_serialize_string>
 80149ea:	4004      	ands	r4, r0
 80149ec:	b2e4      	uxtb	r4, r4
 80149ee:	e7ee      	b.n	80149ce <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80149f0:	68e9      	ldr	r1, [r5, #12]
 80149f2:	4630      	mov	r0, r6
 80149f4:	f003 fe40 	bl	8018678 <ucdr_serialize_string>
 80149f8:	4004      	ands	r4, r0
 80149fa:	4620      	mov	r0, r4
 80149fc:	bd70      	pop	{r4, r5, r6, pc}
 80149fe:	bf00      	nop

08014a00 <uxr_serialize_OBJK_Topic_Binary>:
 8014a00:	b570      	push	{r4, r5, r6, lr}
 8014a02:	460d      	mov	r5, r1
 8014a04:	6809      	ldr	r1, [r1, #0]
 8014a06:	4606      	mov	r6, r0
 8014a08:	f003 fe36 	bl	8018678 <ucdr_serialize_string>
 8014a0c:	7929      	ldrb	r1, [r5, #4]
 8014a0e:	4604      	mov	r4, r0
 8014a10:	4630      	mov	r0, r6
 8014a12:	f7fc ff49 	bl	80118a8 <ucdr_serialize_bool>
 8014a16:	792b      	ldrb	r3, [r5, #4]
 8014a18:	4004      	ands	r4, r0
 8014a1a:	b2e4      	uxtb	r4, r4
 8014a1c:	b943      	cbnz	r3, 8014a30 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8014a1e:	7b29      	ldrb	r1, [r5, #12]
 8014a20:	4630      	mov	r0, r6
 8014a22:	f7fc ff41 	bl	80118a8 <ucdr_serialize_bool>
 8014a26:	7b2b      	ldrb	r3, [r5, #12]
 8014a28:	4004      	ands	r4, r0
 8014a2a:	b93b      	cbnz	r3, 8014a3c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8014a2c:	4620      	mov	r0, r4
 8014a2e:	bd70      	pop	{r4, r5, r6, pc}
 8014a30:	68a9      	ldr	r1, [r5, #8]
 8014a32:	4630      	mov	r0, r6
 8014a34:	f003 fe20 	bl	8018678 <ucdr_serialize_string>
 8014a38:	4004      	ands	r4, r0
 8014a3a:	e7f0      	b.n	8014a1e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8014a3c:	6929      	ldr	r1, [r5, #16]
 8014a3e:	4630      	mov	r0, r6
 8014a40:	f003 fe1a 	bl	8018678 <ucdr_serialize_string>
 8014a44:	4004      	ands	r4, r0
 8014a46:	b2e4      	uxtb	r4, r4
 8014a48:	4620      	mov	r0, r4
 8014a4a:	bd70      	pop	{r4, r5, r6, pc}

08014a4c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8014a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a50:	460c      	mov	r4, r1
 8014a52:	7809      	ldrb	r1, [r1, #0]
 8014a54:	4606      	mov	r6, r0
 8014a56:	f7fc ff27 	bl	80118a8 <ucdr_serialize_bool>
 8014a5a:	7823      	ldrb	r3, [r4, #0]
 8014a5c:	4605      	mov	r5, r0
 8014a5e:	b96b      	cbnz	r3, 8014a7c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8014a60:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8014a64:	4630      	mov	r0, r6
 8014a66:	f7fc ff1f 	bl	80118a8 <ucdr_serialize_bool>
 8014a6a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8014a6e:	4005      	ands	r5, r0
 8014a70:	b2ed      	uxtb	r5, r5
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d169      	bne.n	8014b4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8014a76:	4628      	mov	r0, r5
 8014a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a7c:	6861      	ldr	r1, [r4, #4]
 8014a7e:	4630      	mov	r0, r6
 8014a80:	f7fd f812 	bl	8011aa8 <ucdr_serialize_uint32_t>
 8014a84:	6863      	ldr	r3, [r4, #4]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d06b      	beq.n	8014b62 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8014a8a:	2800      	cmp	r0, #0
 8014a8c:	d067      	beq.n	8014b5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014a8e:	68a1      	ldr	r1, [r4, #8]
 8014a90:	4630      	mov	r0, r6
 8014a92:	f003 fdf1 	bl	8018678 <ucdr_serialize_string>
 8014a96:	6863      	ldr	r3, [r4, #4]
 8014a98:	2b01      	cmp	r3, #1
 8014a9a:	d953      	bls.n	8014b44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014a9c:	2800      	cmp	r0, #0
 8014a9e:	d05e      	beq.n	8014b5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014aa0:	68e1      	ldr	r1, [r4, #12]
 8014aa2:	4630      	mov	r0, r6
 8014aa4:	f003 fde8 	bl	8018678 <ucdr_serialize_string>
 8014aa8:	6863      	ldr	r3, [r4, #4]
 8014aaa:	2b02      	cmp	r3, #2
 8014aac:	d94a      	bls.n	8014b44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014aae:	2800      	cmp	r0, #0
 8014ab0:	d055      	beq.n	8014b5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014ab2:	6921      	ldr	r1, [r4, #16]
 8014ab4:	4630      	mov	r0, r6
 8014ab6:	f003 fddf 	bl	8018678 <ucdr_serialize_string>
 8014aba:	6863      	ldr	r3, [r4, #4]
 8014abc:	2b03      	cmp	r3, #3
 8014abe:	d941      	bls.n	8014b44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014ac0:	2800      	cmp	r0, #0
 8014ac2:	d04c      	beq.n	8014b5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014ac4:	6961      	ldr	r1, [r4, #20]
 8014ac6:	4630      	mov	r0, r6
 8014ac8:	f003 fdd6 	bl	8018678 <ucdr_serialize_string>
 8014acc:	6863      	ldr	r3, [r4, #4]
 8014ace:	2b04      	cmp	r3, #4
 8014ad0:	d938      	bls.n	8014b44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014ad2:	2800      	cmp	r0, #0
 8014ad4:	d043      	beq.n	8014b5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014ad6:	69a1      	ldr	r1, [r4, #24]
 8014ad8:	4630      	mov	r0, r6
 8014ada:	f003 fdcd 	bl	8018678 <ucdr_serialize_string>
 8014ade:	6863      	ldr	r3, [r4, #4]
 8014ae0:	2b05      	cmp	r3, #5
 8014ae2:	d92f      	bls.n	8014b44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014ae4:	2800      	cmp	r0, #0
 8014ae6:	d03a      	beq.n	8014b5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014ae8:	69e1      	ldr	r1, [r4, #28]
 8014aea:	4630      	mov	r0, r6
 8014aec:	f003 fdc4 	bl	8018678 <ucdr_serialize_string>
 8014af0:	6863      	ldr	r3, [r4, #4]
 8014af2:	2b06      	cmp	r3, #6
 8014af4:	d926      	bls.n	8014b44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014af6:	b390      	cbz	r0, 8014b5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014af8:	6a21      	ldr	r1, [r4, #32]
 8014afa:	4630      	mov	r0, r6
 8014afc:	f003 fdbc 	bl	8018678 <ucdr_serialize_string>
 8014b00:	6863      	ldr	r3, [r4, #4]
 8014b02:	2b07      	cmp	r3, #7
 8014b04:	d91e      	bls.n	8014b44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014b06:	b350      	cbz	r0, 8014b5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014b08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014b0a:	4630      	mov	r0, r6
 8014b0c:	f003 fdb4 	bl	8018678 <ucdr_serialize_string>
 8014b10:	6863      	ldr	r3, [r4, #4]
 8014b12:	2b08      	cmp	r3, #8
 8014b14:	d916      	bls.n	8014b44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014b16:	b310      	cbz	r0, 8014b5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014b18:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8014b1a:	4630      	mov	r0, r6
 8014b1c:	f003 fdac 	bl	8018678 <ucdr_serialize_string>
 8014b20:	6863      	ldr	r3, [r4, #4]
 8014b22:	2b09      	cmp	r3, #9
 8014b24:	d90e      	bls.n	8014b44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014b26:	b1d0      	cbz	r0, 8014b5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014b28:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8014b2c:	2709      	movs	r7, #9
 8014b2e:	e000      	b.n	8014b32 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8014b30:	b1a8      	cbz	r0, 8014b5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014b32:	f858 1b04 	ldr.w	r1, [r8], #4
 8014b36:	4630      	mov	r0, r6
 8014b38:	f003 fd9e 	bl	8018678 <ucdr_serialize_string>
 8014b3c:	6862      	ldr	r2, [r4, #4]
 8014b3e:	3701      	adds	r7, #1
 8014b40:	4297      	cmp	r7, r2
 8014b42:	d3f5      	bcc.n	8014b30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8014b44:	4005      	ands	r5, r0
 8014b46:	b2ed      	uxtb	r5, r5
 8014b48:	e78a      	b.n	8014a60 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8014b4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014b4c:	4630      	mov	r0, r6
 8014b4e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014b52:	f7fd fb69 	bl	8012228 <ucdr_serialize_sequence_uint8_t>
 8014b56:	4005      	ands	r5, r0
 8014b58:	4628      	mov	r0, r5
 8014b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b5e:	2500      	movs	r5, #0
 8014b60:	e77e      	b.n	8014a60 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8014b62:	4028      	ands	r0, r5
 8014b64:	b2c5      	uxtb	r5, r0
 8014b66:	e77b      	b.n	8014a60 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08014b68 <uxr_serialize_OBJK_Publisher_Binary>:
 8014b68:	b570      	push	{r4, r5, r6, lr}
 8014b6a:	460d      	mov	r5, r1
 8014b6c:	7809      	ldrb	r1, [r1, #0]
 8014b6e:	4606      	mov	r6, r0
 8014b70:	f7fc fe9a 	bl	80118a8 <ucdr_serialize_bool>
 8014b74:	782b      	ldrb	r3, [r5, #0]
 8014b76:	4604      	mov	r4, r0
 8014b78:	b94b      	cbnz	r3, 8014b8e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8014b7a:	7a29      	ldrb	r1, [r5, #8]
 8014b7c:	4630      	mov	r0, r6
 8014b7e:	f7fc fe93 	bl	80118a8 <ucdr_serialize_bool>
 8014b82:	7a2b      	ldrb	r3, [r5, #8]
 8014b84:	4004      	ands	r4, r0
 8014b86:	b2e4      	uxtb	r4, r4
 8014b88:	b943      	cbnz	r3, 8014b9c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8014b8a:	4620      	mov	r0, r4
 8014b8c:	bd70      	pop	{r4, r5, r6, pc}
 8014b8e:	6869      	ldr	r1, [r5, #4]
 8014b90:	4630      	mov	r0, r6
 8014b92:	f003 fd71 	bl	8018678 <ucdr_serialize_string>
 8014b96:	4004      	ands	r4, r0
 8014b98:	b2e4      	uxtb	r4, r4
 8014b9a:	e7ee      	b.n	8014b7a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8014b9c:	f105 010c 	add.w	r1, r5, #12
 8014ba0:	4630      	mov	r0, r6
 8014ba2:	f7ff ff53 	bl	8014a4c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8014ba6:	4004      	ands	r4, r0
 8014ba8:	4620      	mov	r0, r4
 8014baa:	bd70      	pop	{r4, r5, r6, pc}

08014bac <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8014bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bb0:	460c      	mov	r4, r1
 8014bb2:	7809      	ldrb	r1, [r1, #0]
 8014bb4:	4606      	mov	r6, r0
 8014bb6:	f7fc fe77 	bl	80118a8 <ucdr_serialize_bool>
 8014bba:	7823      	ldrb	r3, [r4, #0]
 8014bbc:	4605      	mov	r5, r0
 8014bbe:	b96b      	cbnz	r3, 8014bdc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8014bc0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8014bc4:	4630      	mov	r0, r6
 8014bc6:	f7fc fe6f 	bl	80118a8 <ucdr_serialize_bool>
 8014bca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8014bce:	4005      	ands	r5, r0
 8014bd0:	b2ed      	uxtb	r5, r5
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d169      	bne.n	8014caa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8014bd6:	4628      	mov	r0, r5
 8014bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bdc:	6861      	ldr	r1, [r4, #4]
 8014bde:	4630      	mov	r0, r6
 8014be0:	f7fc ff62 	bl	8011aa8 <ucdr_serialize_uint32_t>
 8014be4:	6863      	ldr	r3, [r4, #4]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d06b      	beq.n	8014cc2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8014bea:	2800      	cmp	r0, #0
 8014bec:	d067      	beq.n	8014cbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014bee:	68a1      	ldr	r1, [r4, #8]
 8014bf0:	4630      	mov	r0, r6
 8014bf2:	f003 fd41 	bl	8018678 <ucdr_serialize_string>
 8014bf6:	6863      	ldr	r3, [r4, #4]
 8014bf8:	2b01      	cmp	r3, #1
 8014bfa:	d953      	bls.n	8014ca4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014bfc:	2800      	cmp	r0, #0
 8014bfe:	d05e      	beq.n	8014cbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014c00:	68e1      	ldr	r1, [r4, #12]
 8014c02:	4630      	mov	r0, r6
 8014c04:	f003 fd38 	bl	8018678 <ucdr_serialize_string>
 8014c08:	6863      	ldr	r3, [r4, #4]
 8014c0a:	2b02      	cmp	r3, #2
 8014c0c:	d94a      	bls.n	8014ca4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014c0e:	2800      	cmp	r0, #0
 8014c10:	d055      	beq.n	8014cbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014c12:	6921      	ldr	r1, [r4, #16]
 8014c14:	4630      	mov	r0, r6
 8014c16:	f003 fd2f 	bl	8018678 <ucdr_serialize_string>
 8014c1a:	6863      	ldr	r3, [r4, #4]
 8014c1c:	2b03      	cmp	r3, #3
 8014c1e:	d941      	bls.n	8014ca4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014c20:	2800      	cmp	r0, #0
 8014c22:	d04c      	beq.n	8014cbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014c24:	6961      	ldr	r1, [r4, #20]
 8014c26:	4630      	mov	r0, r6
 8014c28:	f003 fd26 	bl	8018678 <ucdr_serialize_string>
 8014c2c:	6863      	ldr	r3, [r4, #4]
 8014c2e:	2b04      	cmp	r3, #4
 8014c30:	d938      	bls.n	8014ca4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014c32:	2800      	cmp	r0, #0
 8014c34:	d043      	beq.n	8014cbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014c36:	69a1      	ldr	r1, [r4, #24]
 8014c38:	4630      	mov	r0, r6
 8014c3a:	f003 fd1d 	bl	8018678 <ucdr_serialize_string>
 8014c3e:	6863      	ldr	r3, [r4, #4]
 8014c40:	2b05      	cmp	r3, #5
 8014c42:	d92f      	bls.n	8014ca4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014c44:	2800      	cmp	r0, #0
 8014c46:	d03a      	beq.n	8014cbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014c48:	69e1      	ldr	r1, [r4, #28]
 8014c4a:	4630      	mov	r0, r6
 8014c4c:	f003 fd14 	bl	8018678 <ucdr_serialize_string>
 8014c50:	6863      	ldr	r3, [r4, #4]
 8014c52:	2b06      	cmp	r3, #6
 8014c54:	d926      	bls.n	8014ca4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014c56:	b390      	cbz	r0, 8014cbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014c58:	6a21      	ldr	r1, [r4, #32]
 8014c5a:	4630      	mov	r0, r6
 8014c5c:	f003 fd0c 	bl	8018678 <ucdr_serialize_string>
 8014c60:	6863      	ldr	r3, [r4, #4]
 8014c62:	2b07      	cmp	r3, #7
 8014c64:	d91e      	bls.n	8014ca4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014c66:	b350      	cbz	r0, 8014cbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014c68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014c6a:	4630      	mov	r0, r6
 8014c6c:	f003 fd04 	bl	8018678 <ucdr_serialize_string>
 8014c70:	6863      	ldr	r3, [r4, #4]
 8014c72:	2b08      	cmp	r3, #8
 8014c74:	d916      	bls.n	8014ca4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014c76:	b310      	cbz	r0, 8014cbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014c78:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8014c7a:	4630      	mov	r0, r6
 8014c7c:	f003 fcfc 	bl	8018678 <ucdr_serialize_string>
 8014c80:	6863      	ldr	r3, [r4, #4]
 8014c82:	2b09      	cmp	r3, #9
 8014c84:	d90e      	bls.n	8014ca4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014c86:	b1d0      	cbz	r0, 8014cbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014c88:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8014c8c:	2709      	movs	r7, #9
 8014c8e:	e000      	b.n	8014c92 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8014c90:	b1a8      	cbz	r0, 8014cbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014c92:	f858 1b04 	ldr.w	r1, [r8], #4
 8014c96:	4630      	mov	r0, r6
 8014c98:	f003 fcee 	bl	8018678 <ucdr_serialize_string>
 8014c9c:	6862      	ldr	r2, [r4, #4]
 8014c9e:	3701      	adds	r7, #1
 8014ca0:	4297      	cmp	r7, r2
 8014ca2:	d3f5      	bcc.n	8014c90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8014ca4:	4005      	ands	r5, r0
 8014ca6:	b2ed      	uxtb	r5, r5
 8014ca8:	e78a      	b.n	8014bc0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8014caa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014cac:	4630      	mov	r0, r6
 8014cae:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014cb2:	f7fd fab9 	bl	8012228 <ucdr_serialize_sequence_uint8_t>
 8014cb6:	4005      	ands	r5, r0
 8014cb8:	4628      	mov	r0, r5
 8014cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cbe:	2500      	movs	r5, #0
 8014cc0:	e77e      	b.n	8014bc0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8014cc2:	4028      	ands	r0, r5
 8014cc4:	b2c5      	uxtb	r5, r0
 8014cc6:	e77b      	b.n	8014bc0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08014cc8 <uxr_serialize_OBJK_Subscriber_Binary>:
 8014cc8:	b570      	push	{r4, r5, r6, lr}
 8014cca:	460d      	mov	r5, r1
 8014ccc:	7809      	ldrb	r1, [r1, #0]
 8014cce:	4606      	mov	r6, r0
 8014cd0:	f7fc fdea 	bl	80118a8 <ucdr_serialize_bool>
 8014cd4:	782b      	ldrb	r3, [r5, #0]
 8014cd6:	4604      	mov	r4, r0
 8014cd8:	b94b      	cbnz	r3, 8014cee <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8014cda:	7a29      	ldrb	r1, [r5, #8]
 8014cdc:	4630      	mov	r0, r6
 8014cde:	f7fc fde3 	bl	80118a8 <ucdr_serialize_bool>
 8014ce2:	7a2b      	ldrb	r3, [r5, #8]
 8014ce4:	4004      	ands	r4, r0
 8014ce6:	b2e4      	uxtb	r4, r4
 8014ce8:	b943      	cbnz	r3, 8014cfc <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8014cea:	4620      	mov	r0, r4
 8014cec:	bd70      	pop	{r4, r5, r6, pc}
 8014cee:	6869      	ldr	r1, [r5, #4]
 8014cf0:	4630      	mov	r0, r6
 8014cf2:	f003 fcc1 	bl	8018678 <ucdr_serialize_string>
 8014cf6:	4004      	ands	r4, r0
 8014cf8:	b2e4      	uxtb	r4, r4
 8014cfa:	e7ee      	b.n	8014cda <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8014cfc:	f105 010c 	add.w	r1, r5, #12
 8014d00:	4630      	mov	r0, r6
 8014d02:	f7ff ff53 	bl	8014bac <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8014d06:	4004      	ands	r4, r0
 8014d08:	4620      	mov	r0, r4
 8014d0a:	bd70      	pop	{r4, r5, r6, pc}

08014d0c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8014d0c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8014d10:	4688      	mov	r8, r1
 8014d12:	8809      	ldrh	r1, [r1, #0]
 8014d14:	4681      	mov	r9, r0
 8014d16:	f7fc fe23 	bl	8011960 <ucdr_serialize_uint16_t>
 8014d1a:	f898 1002 	ldrb.w	r1, [r8, #2]
 8014d1e:	4606      	mov	r6, r0
 8014d20:	4648      	mov	r0, r9
 8014d22:	f7fc fdc1 	bl	80118a8 <ucdr_serialize_bool>
 8014d26:	f898 3002 	ldrb.w	r3, [r8, #2]
 8014d2a:	4030      	ands	r0, r6
 8014d2c:	b2c5      	uxtb	r5, r0
 8014d2e:	b9eb      	cbnz	r3, 8014d6c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8014d30:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014d34:	4648      	mov	r0, r9
 8014d36:	f7fc fdb7 	bl	80118a8 <ucdr_serialize_bool>
 8014d3a:	f898 3006 	ldrb.w	r3, [r8, #6]
 8014d3e:	4005      	ands	r5, r0
 8014d40:	bb7b      	cbnz	r3, 8014da2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8014d42:	f898 100c 	ldrb.w	r1, [r8, #12]
 8014d46:	4648      	mov	r0, r9
 8014d48:	f7fc fdae 	bl	80118a8 <ucdr_serialize_bool>
 8014d4c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8014d50:	4005      	ands	r5, r0
 8014d52:	b9f3      	cbnz	r3, 8014d92 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8014d54:	f898 1014 	ldrb.w	r1, [r8, #20]
 8014d58:	4648      	mov	r0, r9
 8014d5a:	f7fc fda5 	bl	80118a8 <ucdr_serialize_bool>
 8014d5e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8014d62:	4005      	ands	r5, r0
 8014d64:	b94b      	cbnz	r3, 8014d7a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8014d66:	4628      	mov	r0, r5
 8014d68:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8014d6c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8014d70:	4648      	mov	r0, r9
 8014d72:	f7fc fdf5 	bl	8011960 <ucdr_serialize_uint16_t>
 8014d76:	4005      	ands	r5, r0
 8014d78:	e7da      	b.n	8014d30 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8014d7a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8014d7e:	4648      	mov	r0, r9
 8014d80:	f108 011c 	add.w	r1, r8, #28
 8014d84:	f7fd fa50 	bl	8012228 <ucdr_serialize_sequence_uint8_t>
 8014d88:	4028      	ands	r0, r5
 8014d8a:	b2c5      	uxtb	r5, r0
 8014d8c:	4628      	mov	r0, r5
 8014d8e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8014d92:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014d96:	4648      	mov	r0, r9
 8014d98:	f7fc fe86 	bl	8011aa8 <ucdr_serialize_uint32_t>
 8014d9c:	4028      	ands	r0, r5
 8014d9e:	b2c5      	uxtb	r5, r0
 8014da0:	e7d8      	b.n	8014d54 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8014da2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8014da6:	4648      	mov	r0, r9
 8014da8:	f7fc fe7e 	bl	8011aa8 <ucdr_serialize_uint32_t>
 8014dac:	4028      	ands	r0, r5
 8014dae:	b2c5      	uxtb	r5, r0
 8014db0:	e7c7      	b.n	8014d42 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8014db2:	bf00      	nop

08014db4 <uxr_serialize_OBJK_DataReader_Binary>:
 8014db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014db6:	2202      	movs	r2, #2
 8014db8:	460c      	mov	r4, r1
 8014dba:	4606      	mov	r6, r0
 8014dbc:	f7fc fb8e 	bl	80114dc <ucdr_serialize_array_uint8_t>
 8014dc0:	78a1      	ldrb	r1, [r4, #2]
 8014dc2:	4605      	mov	r5, r0
 8014dc4:	4630      	mov	r0, r6
 8014dc6:	f7fc fd6f 	bl	80118a8 <ucdr_serialize_bool>
 8014dca:	78a3      	ldrb	r3, [r4, #2]
 8014dcc:	4005      	ands	r5, r0
 8014dce:	b2ed      	uxtb	r5, r5
 8014dd0:	b90b      	cbnz	r3, 8014dd6 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8014dd2:	4628      	mov	r0, r5
 8014dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dd6:	f104 0108 	add.w	r1, r4, #8
 8014dda:	4630      	mov	r0, r6
 8014ddc:	f7ff ff96 	bl	8014d0c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014de0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014de4:	4607      	mov	r7, r0
 8014de6:	4630      	mov	r0, r6
 8014de8:	f7fc fd5e 	bl	80118a8 <ucdr_serialize_bool>
 8014dec:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014df0:	4038      	ands	r0, r7
 8014df2:	b2c7      	uxtb	r7, r0
 8014df4:	b95b      	cbnz	r3, 8014e0e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8014df6:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8014dfa:	4630      	mov	r0, r6
 8014dfc:	f7fc fd54 	bl	80118a8 <ucdr_serialize_bool>
 8014e00:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014e04:	4007      	ands	r7, r0
 8014e06:	b94b      	cbnz	r3, 8014e1c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8014e08:	403d      	ands	r5, r7
 8014e0a:	4628      	mov	r0, r5
 8014e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e0e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8014e12:	4630      	mov	r0, r6
 8014e14:	f7fc ff08 	bl	8011c28 <ucdr_serialize_uint64_t>
 8014e18:	4007      	ands	r7, r0
 8014e1a:	e7ec      	b.n	8014df6 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8014e1c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014e1e:	4630      	mov	r0, r6
 8014e20:	f003 fc2a 	bl	8018678 <ucdr_serialize_string>
 8014e24:	4007      	ands	r7, r0
 8014e26:	b2ff      	uxtb	r7, r7
 8014e28:	e7ee      	b.n	8014e08 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8014e2a:	bf00      	nop

08014e2c <uxr_serialize_OBJK_DataWriter_Binary>:
 8014e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e2e:	2202      	movs	r2, #2
 8014e30:	460d      	mov	r5, r1
 8014e32:	4606      	mov	r6, r0
 8014e34:	f7fc fb52 	bl	80114dc <ucdr_serialize_array_uint8_t>
 8014e38:	78a9      	ldrb	r1, [r5, #2]
 8014e3a:	4604      	mov	r4, r0
 8014e3c:	4630      	mov	r0, r6
 8014e3e:	f7fc fd33 	bl	80118a8 <ucdr_serialize_bool>
 8014e42:	78ab      	ldrb	r3, [r5, #2]
 8014e44:	4004      	ands	r4, r0
 8014e46:	b2e4      	uxtb	r4, r4
 8014e48:	b90b      	cbnz	r3, 8014e4e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8014e4a:	4620      	mov	r0, r4
 8014e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e4e:	f105 0108 	add.w	r1, r5, #8
 8014e52:	4630      	mov	r0, r6
 8014e54:	f7ff ff5a 	bl	8014d0c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014e58:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8014e5c:	4607      	mov	r7, r0
 8014e5e:	4630      	mov	r0, r6
 8014e60:	f7fc fd22 	bl	80118a8 <ucdr_serialize_bool>
 8014e64:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8014e68:	4007      	ands	r7, r0
 8014e6a:	b2ff      	uxtb	r7, r7
 8014e6c:	b913      	cbnz	r3, 8014e74 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8014e6e:	403c      	ands	r4, r7
 8014e70:	4620      	mov	r0, r4
 8014e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e74:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8014e78:	4630      	mov	r0, r6
 8014e7a:	f7fc fed5 	bl	8011c28 <ucdr_serialize_uint64_t>
 8014e7e:	4007      	ands	r7, r0
 8014e80:	e7f5      	b.n	8014e6e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8014e82:	bf00      	nop

08014e84 <uxr_deserialize_BaseObjectRequest>:
 8014e84:	b570      	push	{r4, r5, r6, lr}
 8014e86:	2202      	movs	r2, #2
 8014e88:	4605      	mov	r5, r0
 8014e8a:	460e      	mov	r6, r1
 8014e8c:	f7fc fb8a 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 8014e90:	1cb1      	adds	r1, r6, #2
 8014e92:	4604      	mov	r4, r0
 8014e94:	2202      	movs	r2, #2
 8014e96:	4628      	mov	r0, r5
 8014e98:	f7fc fb84 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 8014e9c:	4020      	ands	r0, r4
 8014e9e:	b2c0      	uxtb	r0, r0
 8014ea0:	bd70      	pop	{r4, r5, r6, pc}
 8014ea2:	bf00      	nop

08014ea4 <uxr_serialize_ReadSpecification>:
 8014ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ea8:	460e      	mov	r6, r1
 8014eaa:	7809      	ldrb	r1, [r1, #0]
 8014eac:	4607      	mov	r7, r0
 8014eae:	f7fc fd2b 	bl	8011908 <ucdr_serialize_uint8_t>
 8014eb2:	7871      	ldrb	r1, [r6, #1]
 8014eb4:	4604      	mov	r4, r0
 8014eb6:	4638      	mov	r0, r7
 8014eb8:	f7fc fd26 	bl	8011908 <ucdr_serialize_uint8_t>
 8014ebc:	78b1      	ldrb	r1, [r6, #2]
 8014ebe:	4004      	ands	r4, r0
 8014ec0:	4638      	mov	r0, r7
 8014ec2:	f7fc fcf1 	bl	80118a8 <ucdr_serialize_bool>
 8014ec6:	78b3      	ldrb	r3, [r6, #2]
 8014ec8:	b2e4      	uxtb	r4, r4
 8014eca:	4004      	ands	r4, r0
 8014ecc:	b94b      	cbnz	r3, 8014ee2 <uxr_serialize_ReadSpecification+0x3e>
 8014ece:	7a31      	ldrb	r1, [r6, #8]
 8014ed0:	4638      	mov	r0, r7
 8014ed2:	f7fc fce9 	bl	80118a8 <ucdr_serialize_bool>
 8014ed6:	7a33      	ldrb	r3, [r6, #8]
 8014ed8:	4004      	ands	r4, r0
 8014eda:	b943      	cbnz	r3, 8014eee <uxr_serialize_ReadSpecification+0x4a>
 8014edc:	4620      	mov	r0, r4
 8014ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ee2:	6871      	ldr	r1, [r6, #4]
 8014ee4:	4638      	mov	r0, r7
 8014ee6:	f003 fbc7 	bl	8018678 <ucdr_serialize_string>
 8014eea:	4004      	ands	r4, r0
 8014eec:	e7ef      	b.n	8014ece <uxr_serialize_ReadSpecification+0x2a>
 8014eee:	8971      	ldrh	r1, [r6, #10]
 8014ef0:	4638      	mov	r0, r7
 8014ef2:	f7fc fd35 	bl	8011960 <ucdr_serialize_uint16_t>
 8014ef6:	89b1      	ldrh	r1, [r6, #12]
 8014ef8:	4605      	mov	r5, r0
 8014efa:	4638      	mov	r0, r7
 8014efc:	f7fc fd30 	bl	8011960 <ucdr_serialize_uint16_t>
 8014f00:	89f1      	ldrh	r1, [r6, #14]
 8014f02:	4005      	ands	r5, r0
 8014f04:	4638      	mov	r0, r7
 8014f06:	f7fc fd2b 	bl	8011960 <ucdr_serialize_uint16_t>
 8014f0a:	8a31      	ldrh	r1, [r6, #16]
 8014f0c:	4680      	mov	r8, r0
 8014f0e:	4638      	mov	r0, r7
 8014f10:	f7fc fd26 	bl	8011960 <ucdr_serialize_uint16_t>
 8014f14:	b2ed      	uxtb	r5, r5
 8014f16:	4025      	ands	r5, r4
 8014f18:	ea08 0505 	and.w	r5, r8, r5
 8014f1c:	ea00 0405 	and.w	r4, r0, r5
 8014f20:	4620      	mov	r0, r4
 8014f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f26:	bf00      	nop

08014f28 <uxr_serialize_CREATE_CLIENT_Payload>:
 8014f28:	f7ff bca0 	b.w	801486c <uxr_serialize_CLIENT_Representation>

08014f2c <uxr_serialize_CREATE_Payload>:
 8014f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f2e:	2202      	movs	r2, #2
 8014f30:	4606      	mov	r6, r0
 8014f32:	460d      	mov	r5, r1
 8014f34:	f7fc fad2 	bl	80114dc <ucdr_serialize_array_uint8_t>
 8014f38:	1ca9      	adds	r1, r5, #2
 8014f3a:	4604      	mov	r4, r0
 8014f3c:	2202      	movs	r2, #2
 8014f3e:	4630      	mov	r0, r6
 8014f40:	f7fc facc 	bl	80114dc <ucdr_serialize_array_uint8_t>
 8014f44:	7929      	ldrb	r1, [r5, #4]
 8014f46:	4607      	mov	r7, r0
 8014f48:	4630      	mov	r0, r6
 8014f4a:	f7fc fcdd 	bl	8011908 <ucdr_serialize_uint8_t>
 8014f4e:	b328      	cbz	r0, 8014f9c <uxr_serialize_CREATE_Payload+0x70>
 8014f50:	792b      	ldrb	r3, [r5, #4]
 8014f52:	403c      	ands	r4, r7
 8014f54:	3b01      	subs	r3, #1
 8014f56:	b2e4      	uxtb	r4, r4
 8014f58:	2b0d      	cmp	r3, #13
 8014f5a:	d81d      	bhi.n	8014f98 <uxr_serialize_CREATE_Payload+0x6c>
 8014f5c:	e8df f003 	tbb	[pc, r3]
 8014f60:	32320753 	.word	0x32320753
 8014f64:	07070707 	.word	0x07070707
 8014f68:	2121211c 	.word	0x2121211c
 8014f6c:	684c      	.short	0x684c
 8014f6e:	7a29      	ldrb	r1, [r5, #8]
 8014f70:	4630      	mov	r0, r6
 8014f72:	f7fc fcc9 	bl	8011908 <ucdr_serialize_uint8_t>
 8014f76:	4607      	mov	r7, r0
 8014f78:	b130      	cbz	r0, 8014f88 <uxr_serialize_CREATE_Payload+0x5c>
 8014f7a:	7a2b      	ldrb	r3, [r5, #8]
 8014f7c:	2b02      	cmp	r3, #2
 8014f7e:	d035      	beq.n	8014fec <uxr_serialize_CREATE_Payload+0xc0>
 8014f80:	2b03      	cmp	r3, #3
 8014f82:	d02b      	beq.n	8014fdc <uxr_serialize_CREATE_Payload+0xb0>
 8014f84:	2b01      	cmp	r3, #1
 8014f86:	d031      	beq.n	8014fec <uxr_serialize_CREATE_Payload+0xc0>
 8014f88:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8014f8c:	4630      	mov	r0, r6
 8014f8e:	2202      	movs	r2, #2
 8014f90:	f7fc faa4 	bl	80114dc <ucdr_serialize_array_uint8_t>
 8014f94:	4038      	ands	r0, r7
 8014f96:	4004      	ands	r4, r0
 8014f98:	4620      	mov	r0, r4
 8014f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f9c:	2400      	movs	r4, #0
 8014f9e:	4620      	mov	r0, r4
 8014fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fa2:	7a29      	ldrb	r1, [r5, #8]
 8014fa4:	4630      	mov	r0, r6
 8014fa6:	f7fc fcaf 	bl	8011908 <ucdr_serialize_uint8_t>
 8014faa:	2800      	cmp	r0, #0
 8014fac:	d0f6      	beq.n	8014f9c <uxr_serialize_CREATE_Payload+0x70>
 8014fae:	7a2b      	ldrb	r3, [r5, #8]
 8014fb0:	2b01      	cmp	r3, #1
 8014fb2:	d001      	beq.n	8014fb8 <uxr_serialize_CREATE_Payload+0x8c>
 8014fb4:	2b02      	cmp	r3, #2
 8014fb6:	d1ef      	bne.n	8014f98 <uxr_serialize_CREATE_Payload+0x6c>
 8014fb8:	68e9      	ldr	r1, [r5, #12]
 8014fba:	4630      	mov	r0, r6
 8014fbc:	f003 fb5c 	bl	8018678 <ucdr_serialize_string>
 8014fc0:	4004      	ands	r4, r0
 8014fc2:	e7e9      	b.n	8014f98 <uxr_serialize_CREATE_Payload+0x6c>
 8014fc4:	7a29      	ldrb	r1, [r5, #8]
 8014fc6:	4630      	mov	r0, r6
 8014fc8:	f7fc fc9e 	bl	8011908 <ucdr_serialize_uint8_t>
 8014fcc:	4607      	mov	r7, r0
 8014fce:	2800      	cmp	r0, #0
 8014fd0:	d0da      	beq.n	8014f88 <uxr_serialize_CREATE_Payload+0x5c>
 8014fd2:	7a2b      	ldrb	r3, [r5, #8]
 8014fd4:	2b02      	cmp	r3, #2
 8014fd6:	d009      	beq.n	8014fec <uxr_serialize_CREATE_Payload+0xc0>
 8014fd8:	2b03      	cmp	r3, #3
 8014fda:	d1d5      	bne.n	8014f88 <uxr_serialize_CREATE_Payload+0x5c>
 8014fdc:	68ea      	ldr	r2, [r5, #12]
 8014fde:	f105 0110 	add.w	r1, r5, #16
 8014fe2:	4630      	mov	r0, r6
 8014fe4:	f7fd f920 	bl	8012228 <ucdr_serialize_sequence_uint8_t>
 8014fe8:	4607      	mov	r7, r0
 8014fea:	e7cd      	b.n	8014f88 <uxr_serialize_CREATE_Payload+0x5c>
 8014fec:	68e9      	ldr	r1, [r5, #12]
 8014fee:	4630      	mov	r0, r6
 8014ff0:	f003 fb42 	bl	8018678 <ucdr_serialize_string>
 8014ff4:	4607      	mov	r7, r0
 8014ff6:	e7c7      	b.n	8014f88 <uxr_serialize_CREATE_Payload+0x5c>
 8014ff8:	f105 0108 	add.w	r1, r5, #8
 8014ffc:	4630      	mov	r0, r6
 8014ffe:	f7ff fc91 	bl	8014924 <uxr_serialize_AGENT_Representation>
 8015002:	4004      	ands	r4, r0
 8015004:	e7c8      	b.n	8014f98 <uxr_serialize_CREATE_Payload+0x6c>
 8015006:	7a29      	ldrb	r1, [r5, #8]
 8015008:	4630      	mov	r0, r6
 801500a:	f7fc fc7d 	bl	8011908 <ucdr_serialize_uint8_t>
 801500e:	4607      	mov	r7, r0
 8015010:	b130      	cbz	r0, 8015020 <uxr_serialize_CREATE_Payload+0xf4>
 8015012:	7a2b      	ldrb	r3, [r5, #8]
 8015014:	2b02      	cmp	r3, #2
 8015016:	d012      	beq.n	801503e <uxr_serialize_CREATE_Payload+0x112>
 8015018:	2b03      	cmp	r3, #3
 801501a:	d016      	beq.n	801504a <uxr_serialize_CREATE_Payload+0x11e>
 801501c:	2b01      	cmp	r3, #1
 801501e:	d00e      	beq.n	801503e <uxr_serialize_CREATE_Payload+0x112>
 8015020:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 8015024:	4630      	mov	r0, r6
 8015026:	f7fc fe75 	bl	8011d14 <ucdr_serialize_int16_t>
 801502a:	4038      	ands	r0, r7
 801502c:	4004      	ands	r4, r0
 801502e:	e7b3      	b.n	8014f98 <uxr_serialize_CREATE_Payload+0x6c>
 8015030:	f105 0108 	add.w	r1, r5, #8
 8015034:	4630      	mov	r0, r6
 8015036:	f7ff fc19 	bl	801486c <uxr_serialize_CLIENT_Representation>
 801503a:	4004      	ands	r4, r0
 801503c:	e7ac      	b.n	8014f98 <uxr_serialize_CREATE_Payload+0x6c>
 801503e:	68e9      	ldr	r1, [r5, #12]
 8015040:	4630      	mov	r0, r6
 8015042:	f003 fb19 	bl	8018678 <ucdr_serialize_string>
 8015046:	4607      	mov	r7, r0
 8015048:	e7ea      	b.n	8015020 <uxr_serialize_CREATE_Payload+0xf4>
 801504a:	68ea      	ldr	r2, [r5, #12]
 801504c:	f105 0110 	add.w	r1, r5, #16
 8015050:	4630      	mov	r0, r6
 8015052:	f7fd f8e9 	bl	8012228 <ucdr_serialize_sequence_uint8_t>
 8015056:	4607      	mov	r7, r0
 8015058:	e7e2      	b.n	8015020 <uxr_serialize_CREATE_Payload+0xf4>
 801505a:	bf00      	nop

0801505c <uxr_serialize_DELETE_Payload>:
 801505c:	b570      	push	{r4, r5, r6, lr}
 801505e:	2202      	movs	r2, #2
 8015060:	4605      	mov	r5, r0
 8015062:	460e      	mov	r6, r1
 8015064:	f7fc fa3a 	bl	80114dc <ucdr_serialize_array_uint8_t>
 8015068:	1cb1      	adds	r1, r6, #2
 801506a:	4604      	mov	r4, r0
 801506c:	2202      	movs	r2, #2
 801506e:	4628      	mov	r0, r5
 8015070:	f7fc fa34 	bl	80114dc <ucdr_serialize_array_uint8_t>
 8015074:	4020      	ands	r0, r4
 8015076:	b2c0      	uxtb	r0, r0
 8015078:	bd70      	pop	{r4, r5, r6, pc}
 801507a:	bf00      	nop

0801507c <uxr_deserialize_STATUS_AGENT_Payload>:
 801507c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015080:	4606      	mov	r6, r0
 8015082:	460f      	mov	r7, r1
 8015084:	f7fc fc56 	bl	8011934 <ucdr_deserialize_uint8_t>
 8015088:	1c79      	adds	r1, r7, #1
 801508a:	4605      	mov	r5, r0
 801508c:	4630      	mov	r0, r6
 801508e:	f7fc fc51 	bl	8011934 <ucdr_deserialize_uint8_t>
 8015092:	1d39      	adds	r1, r7, #4
 8015094:	4681      	mov	r9, r0
 8015096:	2204      	movs	r2, #4
 8015098:	4630      	mov	r0, r6
 801509a:	f7fc fa83 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 801509e:	f107 0108 	add.w	r1, r7, #8
 80150a2:	4604      	mov	r4, r0
 80150a4:	2202      	movs	r2, #2
 80150a6:	4630      	mov	r0, r6
 80150a8:	f7fc fa7c 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 80150ac:	f107 010a 	add.w	r1, r7, #10
 80150b0:	4680      	mov	r8, r0
 80150b2:	2202      	movs	r2, #2
 80150b4:	4630      	mov	r0, r6
 80150b6:	f7fc fa75 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 80150ba:	ea05 0509 	and.w	r5, r5, r9
 80150be:	b2ed      	uxtb	r5, r5
 80150c0:	402c      	ands	r4, r5
 80150c2:	f107 010c 	add.w	r1, r7, #12
 80150c6:	4605      	mov	r5, r0
 80150c8:	4630      	mov	r0, r6
 80150ca:	f7fc fc03 	bl	80118d4 <ucdr_deserialize_bool>
 80150ce:	ea08 0404 	and.w	r4, r8, r4
 80150d2:	4025      	ands	r5, r4
 80150d4:	4028      	ands	r0, r5
 80150d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150da:	bf00      	nop

080150dc <uxr_deserialize_STATUS_Payload>:
 80150dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150e0:	2202      	movs	r2, #2
 80150e2:	4606      	mov	r6, r0
 80150e4:	460f      	mov	r7, r1
 80150e6:	f7fc fa5d 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 80150ea:	2202      	movs	r2, #2
 80150ec:	1cb9      	adds	r1, r7, #2
 80150ee:	4605      	mov	r5, r0
 80150f0:	4630      	mov	r0, r6
 80150f2:	f7fc fa57 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 80150f6:	1d39      	adds	r1, r7, #4
 80150f8:	4680      	mov	r8, r0
 80150fa:	4630      	mov	r0, r6
 80150fc:	f7fc fc1a 	bl	8011934 <ucdr_deserialize_uint8_t>
 8015100:	1d79      	adds	r1, r7, #5
 8015102:	4604      	mov	r4, r0
 8015104:	4630      	mov	r0, r6
 8015106:	f7fc fc15 	bl	8011934 <ucdr_deserialize_uint8_t>
 801510a:	ea05 0508 	and.w	r5, r5, r8
 801510e:	402c      	ands	r4, r5
 8015110:	4020      	ands	r0, r4
 8015112:	b2c0      	uxtb	r0, r0
 8015114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015118 <uxr_serialize_READ_DATA_Payload>:
 8015118:	b570      	push	{r4, r5, r6, lr}
 801511a:	2202      	movs	r2, #2
 801511c:	4605      	mov	r5, r0
 801511e:	460e      	mov	r6, r1
 8015120:	f7fc f9dc 	bl	80114dc <ucdr_serialize_array_uint8_t>
 8015124:	1cb1      	adds	r1, r6, #2
 8015126:	2202      	movs	r2, #2
 8015128:	4604      	mov	r4, r0
 801512a:	4628      	mov	r0, r5
 801512c:	f7fc f9d6 	bl	80114dc <ucdr_serialize_array_uint8_t>
 8015130:	1d31      	adds	r1, r6, #4
 8015132:	4004      	ands	r4, r0
 8015134:	4628      	mov	r0, r5
 8015136:	f7ff feb5 	bl	8014ea4 <uxr_serialize_ReadSpecification>
 801513a:	b2e4      	uxtb	r4, r4
 801513c:	4020      	ands	r0, r4
 801513e:	bd70      	pop	{r4, r5, r6, pc}

08015140 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8015140:	b570      	push	{r4, r5, r6, lr}
 8015142:	2202      	movs	r2, #2
 8015144:	4605      	mov	r5, r0
 8015146:	460e      	mov	r6, r1
 8015148:	f7fc f9c8 	bl	80114dc <ucdr_serialize_array_uint8_t>
 801514c:	1cb1      	adds	r1, r6, #2
 801514e:	4604      	mov	r4, r0
 8015150:	2202      	movs	r2, #2
 8015152:	4628      	mov	r0, r5
 8015154:	f7fc f9c2 	bl	80114dc <ucdr_serialize_array_uint8_t>
 8015158:	4020      	ands	r0, r4
 801515a:	b2c0      	uxtb	r0, r0
 801515c:	bd70      	pop	{r4, r5, r6, pc}
 801515e:	bf00      	nop

08015160 <uxr_serialize_ACKNACK_Payload>:
 8015160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015162:	460f      	mov	r7, r1
 8015164:	460e      	mov	r6, r1
 8015166:	f837 1b02 	ldrh.w	r1, [r7], #2
 801516a:	4605      	mov	r5, r0
 801516c:	f7fc fbf8 	bl	8011960 <ucdr_serialize_uint16_t>
 8015170:	4639      	mov	r1, r7
 8015172:	2202      	movs	r2, #2
 8015174:	4604      	mov	r4, r0
 8015176:	4628      	mov	r0, r5
 8015178:	f7fc f9b0 	bl	80114dc <ucdr_serialize_array_uint8_t>
 801517c:	7931      	ldrb	r1, [r6, #4]
 801517e:	4004      	ands	r4, r0
 8015180:	4628      	mov	r0, r5
 8015182:	f7fc fbc1 	bl	8011908 <ucdr_serialize_uint8_t>
 8015186:	b2e4      	uxtb	r4, r4
 8015188:	4020      	ands	r0, r4
 801518a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801518c <uxr_deserialize_ACKNACK_Payload>:
 801518c:	b570      	push	{r4, r5, r6, lr}
 801518e:	4605      	mov	r5, r0
 8015190:	460e      	mov	r6, r1
 8015192:	f7fc fc35 	bl	8011a00 <ucdr_deserialize_uint16_t>
 8015196:	1cb1      	adds	r1, r6, #2
 8015198:	2202      	movs	r2, #2
 801519a:	4604      	mov	r4, r0
 801519c:	4628      	mov	r0, r5
 801519e:	f7fc fa01 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 80151a2:	1d31      	adds	r1, r6, #4
 80151a4:	4004      	ands	r4, r0
 80151a6:	4628      	mov	r0, r5
 80151a8:	f7fc fbc4 	bl	8011934 <ucdr_deserialize_uint8_t>
 80151ac:	b2e4      	uxtb	r4, r4
 80151ae:	4020      	ands	r0, r4
 80151b0:	bd70      	pop	{r4, r5, r6, pc}
 80151b2:	bf00      	nop

080151b4 <uxr_serialize_HEARTBEAT_Payload>:
 80151b4:	b570      	push	{r4, r5, r6, lr}
 80151b6:	460d      	mov	r5, r1
 80151b8:	8809      	ldrh	r1, [r1, #0]
 80151ba:	4606      	mov	r6, r0
 80151bc:	f7fc fbd0 	bl	8011960 <ucdr_serialize_uint16_t>
 80151c0:	8869      	ldrh	r1, [r5, #2]
 80151c2:	4604      	mov	r4, r0
 80151c4:	4630      	mov	r0, r6
 80151c6:	f7fc fbcb 	bl	8011960 <ucdr_serialize_uint16_t>
 80151ca:	7929      	ldrb	r1, [r5, #4]
 80151cc:	4004      	ands	r4, r0
 80151ce:	4630      	mov	r0, r6
 80151d0:	f7fc fb9a 	bl	8011908 <ucdr_serialize_uint8_t>
 80151d4:	b2e4      	uxtb	r4, r4
 80151d6:	4020      	ands	r0, r4
 80151d8:	bd70      	pop	{r4, r5, r6, pc}
 80151da:	bf00      	nop

080151dc <uxr_deserialize_HEARTBEAT_Payload>:
 80151dc:	b570      	push	{r4, r5, r6, lr}
 80151de:	4605      	mov	r5, r0
 80151e0:	460e      	mov	r6, r1
 80151e2:	f7fc fc0d 	bl	8011a00 <ucdr_deserialize_uint16_t>
 80151e6:	1cb1      	adds	r1, r6, #2
 80151e8:	4604      	mov	r4, r0
 80151ea:	4628      	mov	r0, r5
 80151ec:	f7fc fc08 	bl	8011a00 <ucdr_deserialize_uint16_t>
 80151f0:	1d31      	adds	r1, r6, #4
 80151f2:	4004      	ands	r4, r0
 80151f4:	4628      	mov	r0, r5
 80151f6:	f7fc fb9d 	bl	8011934 <ucdr_deserialize_uint8_t>
 80151fa:	b2e4      	uxtb	r4, r4
 80151fc:	4020      	ands	r0, r4
 80151fe:	bd70      	pop	{r4, r5, r6, pc}

08015200 <uxr_serialize_TIMESTAMP_Payload>:
 8015200:	b570      	push	{r4, r5, r6, lr}
 8015202:	460d      	mov	r5, r1
 8015204:	6809      	ldr	r1, [r1, #0]
 8015206:	4606      	mov	r6, r0
 8015208:	f7fc fdac 	bl	8011d64 <ucdr_serialize_int32_t>
 801520c:	6869      	ldr	r1, [r5, #4]
 801520e:	4604      	mov	r4, r0
 8015210:	4630      	mov	r0, r6
 8015212:	f7fc fc49 	bl	8011aa8 <ucdr_serialize_uint32_t>
 8015216:	4020      	ands	r0, r4
 8015218:	b2c0      	uxtb	r0, r0
 801521a:	bd70      	pop	{r4, r5, r6, pc}

0801521c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801521c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015220:	4605      	mov	r5, r0
 8015222:	460e      	mov	r6, r1
 8015224:	f7fc fdce 	bl	8011dc4 <ucdr_deserialize_int32_t>
 8015228:	1d31      	adds	r1, r6, #4
 801522a:	4607      	mov	r7, r0
 801522c:	4628      	mov	r0, r5
 801522e:	f7fc fc9b 	bl	8011b68 <ucdr_deserialize_uint32_t>
 8015232:	f106 0108 	add.w	r1, r6, #8
 8015236:	4680      	mov	r8, r0
 8015238:	4628      	mov	r0, r5
 801523a:	f7fc fdc3 	bl	8011dc4 <ucdr_deserialize_int32_t>
 801523e:	f106 010c 	add.w	r1, r6, #12
 8015242:	4604      	mov	r4, r0
 8015244:	4628      	mov	r0, r5
 8015246:	f7fc fc8f 	bl	8011b68 <ucdr_deserialize_uint32_t>
 801524a:	ea07 0708 	and.w	r7, r7, r8
 801524e:	403c      	ands	r4, r7
 8015250:	f106 0110 	add.w	r1, r6, #16
 8015254:	4004      	ands	r4, r0
 8015256:	4628      	mov	r0, r5
 8015258:	f7fc fdb4 	bl	8011dc4 <ucdr_deserialize_int32_t>
 801525c:	f106 0114 	add.w	r1, r6, #20
 8015260:	4603      	mov	r3, r0
 8015262:	4628      	mov	r0, r5
 8015264:	461d      	mov	r5, r3
 8015266:	f7fc fc7f 	bl	8011b68 <ucdr_deserialize_uint32_t>
 801526a:	b2e4      	uxtb	r4, r4
 801526c:	402c      	ands	r4, r5
 801526e:	4020      	ands	r0, r4
 8015270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015274 <uxr_serialize_SampleIdentity>:
 8015274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015278:	220c      	movs	r2, #12
 801527a:	4604      	mov	r4, r0
 801527c:	460d      	mov	r5, r1
 801527e:	f7fc f92d 	bl	80114dc <ucdr_serialize_array_uint8_t>
 8015282:	2203      	movs	r2, #3
 8015284:	f105 010c 	add.w	r1, r5, #12
 8015288:	4607      	mov	r7, r0
 801528a:	4620      	mov	r0, r4
 801528c:	f7fc f926 	bl	80114dc <ucdr_serialize_array_uint8_t>
 8015290:	7be9      	ldrb	r1, [r5, #15]
 8015292:	4680      	mov	r8, r0
 8015294:	4620      	mov	r0, r4
 8015296:	f7fc fb37 	bl	8011908 <ucdr_serialize_uint8_t>
 801529a:	6929      	ldr	r1, [r5, #16]
 801529c:	4606      	mov	r6, r0
 801529e:	4620      	mov	r0, r4
 80152a0:	f7fc fd60 	bl	8011d64 <ucdr_serialize_int32_t>
 80152a4:	6969      	ldr	r1, [r5, #20]
 80152a6:	4603      	mov	r3, r0
 80152a8:	4620      	mov	r0, r4
 80152aa:	ea07 0708 	and.w	r7, r7, r8
 80152ae:	461c      	mov	r4, r3
 80152b0:	f7fc fbfa 	bl	8011aa8 <ucdr_serialize_uint32_t>
 80152b4:	403e      	ands	r6, r7
 80152b6:	4034      	ands	r4, r6
 80152b8:	4020      	ands	r0, r4
 80152ba:	b2c0      	uxtb	r0, r0
 80152bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080152c0 <uxr_deserialize_SampleIdentity>:
 80152c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152c4:	220c      	movs	r2, #12
 80152c6:	4604      	mov	r4, r0
 80152c8:	460d      	mov	r5, r1
 80152ca:	f7fc f96b 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 80152ce:	2203      	movs	r2, #3
 80152d0:	f105 010c 	add.w	r1, r5, #12
 80152d4:	4607      	mov	r7, r0
 80152d6:	4620      	mov	r0, r4
 80152d8:	f7fc f964 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 80152dc:	f105 010f 	add.w	r1, r5, #15
 80152e0:	4680      	mov	r8, r0
 80152e2:	4620      	mov	r0, r4
 80152e4:	f7fc fb26 	bl	8011934 <ucdr_deserialize_uint8_t>
 80152e8:	f105 0110 	add.w	r1, r5, #16
 80152ec:	4606      	mov	r6, r0
 80152ee:	4620      	mov	r0, r4
 80152f0:	f7fc fd68 	bl	8011dc4 <ucdr_deserialize_int32_t>
 80152f4:	f105 0114 	add.w	r1, r5, #20
 80152f8:	4603      	mov	r3, r0
 80152fa:	4620      	mov	r0, r4
 80152fc:	ea07 0708 	and.w	r7, r7, r8
 8015300:	461c      	mov	r4, r3
 8015302:	f7fc fc31 	bl	8011b68 <ucdr_deserialize_uint32_t>
 8015306:	403e      	ands	r6, r7
 8015308:	4034      	ands	r4, r6
 801530a:	4020      	ands	r0, r4
 801530c:	b2c0      	uxtb	r0, r0
 801530e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015312:	bf00      	nop

08015314 <rcl_client_get_rmw_handle>:
 8015314:	b110      	cbz	r0, 801531c <rcl_client_get_rmw_handle+0x8>
 8015316:	6800      	ldr	r0, [r0, #0]
 8015318:	b100      	cbz	r0, 801531c <rcl_client_get_rmw_handle+0x8>
 801531a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801531c:	4770      	bx	lr
 801531e:	bf00      	nop

08015320 <rcl_take_response>:
 8015320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015322:	460e      	mov	r6, r1
 8015324:	460c      	mov	r4, r1
 8015326:	4607      	mov	r7, r0
 8015328:	4694      	mov	ip, r2
 801532a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801532c:	b08d      	sub	sp, #52	; 0x34
 801532e:	ad06      	add	r5, sp, #24
 8015330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015332:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015336:	e885 0003 	stmia.w	r5, {r0, r1}
 801533a:	b337      	cbz	r7, 801538a <rcl_take_response+0x6a>
 801533c:	683b      	ldr	r3, [r7, #0]
 801533e:	b323      	cbz	r3, 801538a <rcl_take_response+0x6a>
 8015340:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8015342:	b310      	cbz	r0, 801538a <rcl_take_response+0x6a>
 8015344:	4662      	mov	r2, ip
 8015346:	b31a      	cbz	r2, 8015390 <rcl_take_response+0x70>
 8015348:	2300      	movs	r3, #0
 801534a:	2600      	movs	r6, #0
 801534c:	2700      	movs	r7, #0
 801534e:	f88d 3007 	strb.w	r3, [sp, #7]
 8015352:	a902      	add	r1, sp, #8
 8015354:	f10d 0307 	add.w	r3, sp, #7
 8015358:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801535c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015360:	f002 fee0 	bl	8018124 <rmw_take_response>
 8015364:	4606      	mov	r6, r0
 8015366:	b9a8      	cbnz	r0, 8015394 <rcl_take_response+0x74>
 8015368:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801536c:	f240 13f5 	movw	r3, #501	; 0x1f5
 8015370:	2a00      	cmp	r2, #0
 8015372:	bf08      	it	eq
 8015374:	461e      	moveq	r6, r3
 8015376:	ad06      	add	r5, sp, #24
 8015378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801537a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801537c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015380:	e884 0003 	stmia.w	r4, {r0, r1}
 8015384:	4630      	mov	r0, r6
 8015386:	b00d      	add	sp, #52	; 0x34
 8015388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801538a:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801538e:	e7f2      	b.n	8015376 <rcl_take_response+0x56>
 8015390:	260b      	movs	r6, #11
 8015392:	e7f0      	b.n	8015376 <rcl_take_response+0x56>
 8015394:	2601      	movs	r6, #1
 8015396:	e7ee      	b.n	8015376 <rcl_take_response+0x56>

08015398 <rcl_convert_rmw_ret_to_rcl_ret>:
 8015398:	280b      	cmp	r0, #11
 801539a:	dc0d      	bgt.n	80153b8 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801539c:	2800      	cmp	r0, #0
 801539e:	db09      	blt.n	80153b4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80153a0:	280b      	cmp	r0, #11
 80153a2:	d807      	bhi.n	80153b4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80153a4:	e8df f000 	tbb	[pc, r0]
 80153a8:	07060607 	.word	0x07060607
 80153ac:	06060606 	.word	0x06060606
 80153b0:	07070606 	.word	0x07070606
 80153b4:	2001      	movs	r0, #1
 80153b6:	4770      	bx	lr
 80153b8:	28cb      	cmp	r0, #203	; 0xcb
 80153ba:	bf18      	it	ne
 80153bc:	2001      	movne	r0, #1
 80153be:	4770      	bx	lr

080153c0 <rcl_get_zero_initialized_context>:
 80153c0:	4b06      	ldr	r3, [pc, #24]	; (80153dc <rcl_get_zero_initialized_context+0x1c>)
 80153c2:	b430      	push	{r4, r5}
 80153c4:	2400      	movs	r4, #0
 80153c6:	2500      	movs	r5, #0
 80153c8:	e9c3 4502 	strd	r4, r5, [r3, #8]
 80153cc:	4604      	mov	r4, r0
 80153ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80153d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80153d4:	4620      	mov	r0, r4
 80153d6:	bc30      	pop	{r4, r5}
 80153d8:	4770      	bx	lr
 80153da:	bf00      	nop
 80153dc:	20010468 	.word	0x20010468

080153e0 <rcl_context_is_valid>:
 80153e0:	b150      	cbz	r0, 80153f8 <rcl_context_is_valid+0x18>
 80153e2:	b508      	push	{r3, lr}
 80153e4:	3008      	adds	r0, #8
 80153e6:	2105      	movs	r1, #5
 80153e8:	f002 f912 	bl	8017610 <__atomic_load_8>
 80153ec:	ea51 0300 	orrs.w	r3, r1, r0
 80153f0:	bf14      	ite	ne
 80153f2:	2001      	movne	r0, #1
 80153f4:	2000      	moveq	r0, #0
 80153f6:	bd08      	pop	{r3, pc}
 80153f8:	4770      	bx	lr
 80153fa:	bf00      	nop

080153fc <__cleanup_context>:
 80153fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015400:	b087      	sub	sp, #28
 8015402:	4606      	mov	r6, r0
 8015404:	2305      	movs	r3, #5
 8015406:	3008      	adds	r0, #8
 8015408:	9300      	str	r3, [sp, #0]
 801540a:	2200      	movs	r2, #0
 801540c:	2300      	movs	r3, #0
 801540e:	f002 f933 	bl	8017678 <__atomic_store_8>
 8015412:	6830      	ldr	r0, [r6, #0]
 8015414:	2800      	cmp	r0, #0
 8015416:	d056      	beq.n	80154c6 <__cleanup_context+0xca>
 8015418:	6947      	ldr	r7, [r0, #20]
 801541a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801541e:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8015422:	b137      	cbz	r7, 8015432 <__cleanup_context+0x36>
 8015424:	3014      	adds	r0, #20
 8015426:	f7f8 fe05 	bl	800e034 <rcl_init_options_fini>
 801542a:	4607      	mov	r7, r0
 801542c:	2800      	cmp	r0, #0
 801542e:	d14c      	bne.n	80154ca <__cleanup_context+0xce>
 8015430:	6830      	ldr	r0, [r6, #0]
 8015432:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015434:	b143      	cbz	r3, 8015448 <__cleanup_context+0x4c>
 8015436:	3028      	adds	r0, #40	; 0x28
 8015438:	f7fa fc0e 	bl	800fc58 <rmw_context_fini>
 801543c:	b118      	cbz	r0, 8015446 <__cleanup_context+0x4a>
 801543e:	2f00      	cmp	r7, #0
 8015440:	d046      	beq.n	80154d0 <__cleanup_context+0xd4>
 8015442:	f7f9 ffa3 	bl	800f38c <rcutils_reset_error>
 8015446:	6830      	ldr	r0, [r6, #0]
 8015448:	f8d0 c020 	ldr.w	ip, [r0, #32]
 801544c:	f1bc 0f00 	cmp.w	ip, #0
 8015450:	d01c      	beq.n	801548c <__cleanup_context+0x90>
 8015452:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8015456:	2a01      	cmp	r2, #1
 8015458:	f173 0100 	sbcs.w	r1, r3, #0
 801545c:	db12      	blt.n	8015484 <__cleanup_context+0x88>
 801545e:	2400      	movs	r4, #0
 8015460:	2500      	movs	r5, #0
 8015462:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 8015466:	4649      	mov	r1, r9
 8015468:	b308      	cbz	r0, 80154ae <__cleanup_context+0xb2>
 801546a:	47c0      	blx	r8
 801546c:	6831      	ldr	r1, [r6, #0]
 801546e:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8015472:	3401      	adds	r4, #1
 8015474:	f145 0500 	adc.w	r5, r5, #0
 8015478:	4294      	cmp	r4, r2
 801547a:	f8d1 c020 	ldr.w	ip, [r1, #32]
 801547e:	eb75 0103 	sbcs.w	r1, r5, r3
 8015482:	dbee      	blt.n	8015462 <__cleanup_context+0x66>
 8015484:	4660      	mov	r0, ip
 8015486:	4649      	mov	r1, r9
 8015488:	47c0      	blx	r8
 801548a:	6830      	ldr	r0, [r6, #0]
 801548c:	4649      	mov	r1, r9
 801548e:	47c0      	blx	r8
 8015490:	4b11      	ldr	r3, [pc, #68]	; (80154d8 <__cleanup_context+0xdc>)
 8015492:	2000      	movs	r0, #0
 8015494:	2100      	movs	r1, #0
 8015496:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801549a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801549c:	ac02      	add	r4, sp, #8
 801549e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80154a2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80154a6:	4638      	mov	r0, r7
 80154a8:	b007      	add	sp, #28
 80154aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154ae:	3401      	adds	r4, #1
 80154b0:	f145 0500 	adc.w	r5, r5, #0
 80154b4:	4294      	cmp	r4, r2
 80154b6:	eb75 0103 	sbcs.w	r1, r5, r3
 80154ba:	dbd2      	blt.n	8015462 <__cleanup_context+0x66>
 80154bc:	4660      	mov	r0, ip
 80154be:	4649      	mov	r1, r9
 80154c0:	47c0      	blx	r8
 80154c2:	6830      	ldr	r0, [r6, #0]
 80154c4:	e7e2      	b.n	801548c <__cleanup_context+0x90>
 80154c6:	4607      	mov	r7, r0
 80154c8:	e7e2      	b.n	8015490 <__cleanup_context+0x94>
 80154ca:	f7f9 ff5f 	bl	800f38c <rcutils_reset_error>
 80154ce:	e7af      	b.n	8015430 <__cleanup_context+0x34>
 80154d0:	f7ff ff62 	bl	8015398 <rcl_convert_rmw_ret_to_rcl_ret>
 80154d4:	4607      	mov	r7, r0
 80154d6:	e7b4      	b.n	8015442 <__cleanup_context+0x46>
 80154d8:	20010468 	.word	0x20010468

080154dc <rcl_expand_topic_name>:
 80154dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154e0:	b08b      	sub	sp, #44	; 0x2c
 80154e2:	9306      	str	r3, [sp, #24]
 80154e4:	2800      	cmp	r0, #0
 80154e6:	f000 80d2 	beq.w	801568e <rcl_expand_topic_name+0x1b2>
 80154ea:	460e      	mov	r6, r1
 80154ec:	2900      	cmp	r1, #0
 80154ee:	f000 80ce 	beq.w	801568e <rcl_expand_topic_name+0x1b2>
 80154f2:	4617      	mov	r7, r2
 80154f4:	2a00      	cmp	r2, #0
 80154f6:	f000 80ca 	beq.w	801568e <rcl_expand_topic_name+0x1b2>
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	f000 80c7 	beq.w	801568e <rcl_expand_topic_name+0x1b2>
 8015500:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015502:	2b00      	cmp	r3, #0
 8015504:	f000 80c3 	beq.w	801568e <rcl_expand_topic_name+0x1b2>
 8015508:	a909      	add	r1, sp, #36	; 0x24
 801550a:	2200      	movs	r2, #0
 801550c:	4680      	mov	r8, r0
 801550e:	f001 f9a1 	bl	8016854 <rcl_validate_topic_name>
 8015512:	4604      	mov	r4, r0
 8015514:	2800      	cmp	r0, #0
 8015516:	f040 80b6 	bne.w	8015686 <rcl_expand_topic_name+0x1aa>
 801551a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801551c:	2b00      	cmp	r3, #0
 801551e:	f040 80bf 	bne.w	80156a0 <rcl_expand_topic_name+0x1c4>
 8015522:	4602      	mov	r2, r0
 8015524:	a909      	add	r1, sp, #36	; 0x24
 8015526:	4630      	mov	r0, r6
 8015528:	f002 fb3a 	bl	8017ba0 <rmw_validate_node_name>
 801552c:	2800      	cmp	r0, #0
 801552e:	f040 80b3 	bne.w	8015698 <rcl_expand_topic_name+0x1bc>
 8015532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015534:	2a00      	cmp	r2, #0
 8015536:	f040 80b8 	bne.w	80156aa <rcl_expand_topic_name+0x1ce>
 801553a:	a909      	add	r1, sp, #36	; 0x24
 801553c:	4638      	mov	r0, r7
 801553e:	f002 fb11 	bl	8017b64 <rmw_validate_namespace>
 8015542:	2800      	cmp	r0, #0
 8015544:	f040 80a8 	bne.w	8015698 <rcl_expand_topic_name+0x1bc>
 8015548:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801554a:	2c00      	cmp	r4, #0
 801554c:	f040 80f6 	bne.w	801573c <rcl_expand_topic_name+0x260>
 8015550:	217b      	movs	r1, #123	; 0x7b
 8015552:	4640      	mov	r0, r8
 8015554:	f004 fd79 	bl	801a04a <strchr>
 8015558:	f898 3000 	ldrb.w	r3, [r8]
 801555c:	2b2f      	cmp	r3, #47	; 0x2f
 801555e:	4605      	mov	r5, r0
 8015560:	f000 80c4 	beq.w	80156ec <rcl_expand_topic_name+0x210>
 8015564:	2b7e      	cmp	r3, #126	; 0x7e
 8015566:	d16f      	bne.n	8015648 <rcl_expand_topic_name+0x16c>
 8015568:	4638      	mov	r0, r7
 801556a:	f7ea fe3b 	bl	80001e4 <strlen>
 801556e:	4b87      	ldr	r3, [pc, #540]	; (801578c <rcl_expand_topic_name+0x2b0>)
 8015570:	4987      	ldr	r1, [pc, #540]	; (8015790 <rcl_expand_topic_name+0x2b4>)
 8015572:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015574:	9604      	str	r6, [sp, #16]
 8015576:	2801      	cmp	r0, #1
 8015578:	bf0c      	ite	eq
 801557a:	4618      	moveq	r0, r3
 801557c:	4608      	movne	r0, r1
 801557e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015582:	e9cd 2300 	strd	r2, r3, [sp]
 8015586:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801558a:	f108 0101 	add.w	r1, r8, #1
 801558e:	9105      	str	r1, [sp, #20]
 8015590:	ab14      	add	r3, sp, #80	; 0x50
 8015592:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015594:	f002 f928 	bl	80177e8 <rcutils_format_string_limit>
 8015598:	4682      	mov	sl, r0
 801559a:	2800      	cmp	r0, #0
 801559c:	f000 80d0 	beq.w	8015740 <rcl_expand_topic_name+0x264>
 80155a0:	2d00      	cmp	r5, #0
 80155a2:	f000 80aa 	beq.w	80156fa <rcl_expand_topic_name+0x21e>
 80155a6:	217b      	movs	r1, #123	; 0x7b
 80155a8:	f004 fd4f 	bl	801a04a <strchr>
 80155ac:	46d1      	mov	r9, sl
 80155ae:	4605      	mov	r5, r0
 80155b0:	9407      	str	r4, [sp, #28]
 80155b2:	46d3      	mov	fp, sl
 80155b4:	464c      	mov	r4, r9
 80155b6:	2d00      	cmp	r5, #0
 80155b8:	f000 80c7 	beq.w	801574a <rcl_expand_topic_name+0x26e>
 80155bc:	217d      	movs	r1, #125	; 0x7d
 80155be:	4620      	mov	r0, r4
 80155c0:	f004 fd43 	bl	801a04a <strchr>
 80155c4:	eba0 0905 	sub.w	r9, r0, r5
 80155c8:	f109 0a01 	add.w	sl, r9, #1
 80155cc:	4871      	ldr	r0, [pc, #452]	; (8015794 <rcl_expand_topic_name+0x2b8>)
 80155ce:	4652      	mov	r2, sl
 80155d0:	4629      	mov	r1, r5
 80155d2:	f004 fd4f 	bl	801a074 <strncmp>
 80155d6:	2800      	cmp	r0, #0
 80155d8:	f000 808d 	beq.w	80156f6 <rcl_expand_topic_name+0x21a>
 80155dc:	486e      	ldr	r0, [pc, #440]	; (8015798 <rcl_expand_topic_name+0x2bc>)
 80155de:	4652      	mov	r2, sl
 80155e0:	4629      	mov	r1, r5
 80155e2:	f004 fd47 	bl	801a074 <strncmp>
 80155e6:	b130      	cbz	r0, 80155f6 <rcl_expand_topic_name+0x11a>
 80155e8:	486c      	ldr	r0, [pc, #432]	; (801579c <rcl_expand_topic_name+0x2c0>)
 80155ea:	4652      	mov	r2, sl
 80155ec:	4629      	mov	r1, r5
 80155ee:	f004 fd41 	bl	801a074 <strncmp>
 80155f2:	2800      	cmp	r0, #0
 80155f4:	d15b      	bne.n	80156ae <rcl_expand_topic_name+0x1d2>
 80155f6:	46b9      	mov	r9, r7
 80155f8:	ab16      	add	r3, sp, #88	; 0x58
 80155fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80155fe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015602:	ab14      	add	r3, sp, #80	; 0x50
 8015604:	4628      	mov	r0, r5
 8015606:	cb0c      	ldmia	r3, {r2, r3}
 8015608:	4651      	mov	r1, sl
 801560a:	f002 fa39 	bl	8017a80 <rcutils_strndup>
 801560e:	4605      	mov	r5, r0
 8015610:	2800      	cmp	r0, #0
 8015612:	f000 80a4 	beq.w	801575e <rcl_expand_topic_name+0x282>
 8015616:	464a      	mov	r2, r9
 8015618:	4620      	mov	r0, r4
 801561a:	ab14      	add	r3, sp, #80	; 0x50
 801561c:	4629      	mov	r1, r5
 801561e:	f002 f935 	bl	801788c <rcutils_repl_str>
 8015622:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015624:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015626:	4604      	mov	r4, r0
 8015628:	4628      	mov	r0, r5
 801562a:	4798      	blx	r3
 801562c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801562e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015630:	4658      	mov	r0, fp
 8015632:	4798      	blx	r3
 8015634:	2c00      	cmp	r4, #0
 8015636:	f000 8083 	beq.w	8015740 <rcl_expand_topic_name+0x264>
 801563a:	217b      	movs	r1, #123	; 0x7b
 801563c:	4620      	mov	r0, r4
 801563e:	f004 fd04 	bl	801a04a <strchr>
 8015642:	46a3      	mov	fp, r4
 8015644:	4605      	mov	r5, r0
 8015646:	e7b6      	b.n	80155b6 <rcl_expand_topic_name+0xda>
 8015648:	2800      	cmp	r0, #0
 801564a:	d151      	bne.n	80156f0 <rcl_expand_topic_name+0x214>
 801564c:	4638      	mov	r0, r7
 801564e:	f7ea fdc9 	bl	80001e4 <strlen>
 8015652:	4b53      	ldr	r3, [pc, #332]	; (80157a0 <rcl_expand_topic_name+0x2c4>)
 8015654:	4a53      	ldr	r2, [pc, #332]	; (80157a4 <rcl_expand_topic_name+0x2c8>)
 8015656:	f8cd 8010 	str.w	r8, [sp, #16]
 801565a:	2801      	cmp	r0, #1
 801565c:	bf0c      	ite	eq
 801565e:	4618      	moveq	r0, r3
 8015660:	4610      	movne	r0, r2
 8015662:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015668:	e9cd 3200 	strd	r3, r2, [sp]
 801566c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8015670:	ab14      	add	r3, sp, #80	; 0x50
 8015672:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015674:	f002 f8b8 	bl	80177e8 <rcutils_format_string_limit>
 8015678:	4682      	mov	sl, r0
 801567a:	4653      	mov	r3, sl
 801567c:	2b00      	cmp	r3, #0
 801567e:	d05f      	beq.n	8015740 <rcl_expand_topic_name+0x264>
 8015680:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015682:	f8c3 a000 	str.w	sl, [r3]
 8015686:	4620      	mov	r0, r4
 8015688:	b00b      	add	sp, #44	; 0x2c
 801568a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801568e:	240b      	movs	r4, #11
 8015690:	4620      	mov	r0, r4
 8015692:	b00b      	add	sp, #44	; 0x2c
 8015694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015698:	f7ff fe7e 	bl	8015398 <rcl_convert_rmw_ret_to_rcl_ret>
 801569c:	4604      	mov	r4, r0
 801569e:	e7f2      	b.n	8015686 <rcl_expand_topic_name+0x1aa>
 80156a0:	2467      	movs	r4, #103	; 0x67
 80156a2:	4620      	mov	r0, r4
 80156a4:	b00b      	add	sp, #44	; 0x2c
 80156a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156aa:	24c9      	movs	r4, #201	; 0xc9
 80156ac:	e7eb      	b.n	8015686 <rcl_expand_topic_name+0x1aa>
 80156ae:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80156b2:	9806      	ldr	r0, [sp, #24]
 80156b4:	1c69      	adds	r1, r5, #1
 80156b6:	f7f9 ff85 	bl	800f5c4 <rcutils_string_map_getn>
 80156ba:	4681      	mov	r9, r0
 80156bc:	2800      	cmp	r0, #0
 80156be:	d19b      	bne.n	80155f8 <rcl_expand_topic_name+0x11c>
 80156c0:	aa16      	add	r2, sp, #88	; 0x58
 80156c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80156c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80156c6:	f8c3 9000 	str.w	r9, [r3]
 80156ca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80156ce:	ab14      	add	r3, sp, #80	; 0x50
 80156d0:	cb0c      	ldmia	r3, {r2, r3}
 80156d2:	4651      	mov	r1, sl
 80156d4:	4628      	mov	r0, r5
 80156d6:	f002 f9d3 	bl	8017a80 <rcutils_strndup>
 80156da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80156dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80156de:	4798      	blx	r3
 80156e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80156e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80156e4:	4658      	mov	r0, fp
 80156e6:	4798      	blx	r3
 80156e8:	2469      	movs	r4, #105	; 0x69
 80156ea:	e7cc      	b.n	8015686 <rcl_expand_topic_name+0x1aa>
 80156ec:	2800      	cmp	r0, #0
 80156ee:	d03e      	beq.n	801576e <rcl_expand_topic_name+0x292>
 80156f0:	46c1      	mov	r9, r8
 80156f2:	46a2      	mov	sl, r4
 80156f4:	e75c      	b.n	80155b0 <rcl_expand_topic_name+0xd4>
 80156f6:	46b1      	mov	r9, r6
 80156f8:	e77e      	b.n	80155f8 <rcl_expand_topic_name+0x11c>
 80156fa:	f89a 3000 	ldrb.w	r3, [sl]
 80156fe:	2b2f      	cmp	r3, #47	; 0x2f
 8015700:	d0be      	beq.n	8015680 <rcl_expand_topic_name+0x1a4>
 8015702:	4638      	mov	r0, r7
 8015704:	f7ea fd6e 	bl	80001e4 <strlen>
 8015708:	4b25      	ldr	r3, [pc, #148]	; (80157a0 <rcl_expand_topic_name+0x2c4>)
 801570a:	4926      	ldr	r1, [pc, #152]	; (80157a4 <rcl_expand_topic_name+0x2c8>)
 801570c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801570e:	f8cd a010 	str.w	sl, [sp, #16]
 8015712:	2801      	cmp	r0, #1
 8015714:	bf0c      	ite	eq
 8015716:	4618      	moveq	r0, r3
 8015718:	4608      	movne	r0, r1
 801571a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801571e:	e9cd 2300 	strd	r2, r3, [sp]
 8015722:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8015726:	ab14      	add	r3, sp, #80	; 0x50
 8015728:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801572a:	f002 f85d 	bl	80177e8 <rcutils_format_string_limit>
 801572e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015730:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015732:	4603      	mov	r3, r0
 8015734:	4650      	mov	r0, sl
 8015736:	469a      	mov	sl, r3
 8015738:	4790      	blx	r2
 801573a:	e79e      	b.n	801567a <rcl_expand_topic_name+0x19e>
 801573c:	24ca      	movs	r4, #202	; 0xca
 801573e:	e7a2      	b.n	8015686 <rcl_expand_topic_name+0x1aa>
 8015740:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015742:	2300      	movs	r3, #0
 8015744:	6013      	str	r3, [r2, #0]
 8015746:	240a      	movs	r4, #10
 8015748:	e79d      	b.n	8015686 <rcl_expand_topic_name+0x1aa>
 801574a:	465b      	mov	r3, fp
 801574c:	9c07      	ldr	r4, [sp, #28]
 801574e:	46da      	mov	sl, fp
 8015750:	2b00      	cmp	r3, #0
 8015752:	d1d2      	bne.n	80156fa <rcl_expand_topic_name+0x21e>
 8015754:	f898 3000 	ldrb.w	r3, [r8]
 8015758:	2b2f      	cmp	r3, #47	; 0x2f
 801575a:	d091      	beq.n	8015680 <rcl_expand_topic_name+0x1a4>
 801575c:	e776      	b.n	801564c <rcl_expand_topic_name+0x170>
 801575e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015760:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015762:	601d      	str	r5, [r3, #0]
 8015764:	4658      	mov	r0, fp
 8015766:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015768:	4798      	blx	r3
 801576a:	240a      	movs	r4, #10
 801576c:	e78b      	b.n	8015686 <rcl_expand_topic_name+0x1aa>
 801576e:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8015772:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015776:	ab14      	add	r3, sp, #80	; 0x50
 8015778:	cb0e      	ldmia	r3, {r1, r2, r3}
 801577a:	4640      	mov	r0, r8
 801577c:	f002 f95e 	bl	8017a3c <rcutils_strdup>
 8015780:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015782:	2800      	cmp	r0, #0
 8015784:	bf08      	it	eq
 8015786:	240a      	moveq	r4, #10
 8015788:	6018      	str	r0, [r3, #0]
 801578a:	e77c      	b.n	8015686 <rcl_expand_topic_name+0x1aa>
 801578c:	0801eea4 	.word	0x0801eea4
 8015790:	0801f160 	.word	0x0801f160
 8015794:	0801f168 	.word	0x0801f168
 8015798:	0801f170 	.word	0x0801f170
 801579c:	0801f178 	.word	0x0801f178
 80157a0:	0801eeb4 	.word	0x0801eeb4
 80157a4:	0801ee6c 	.word	0x0801ee6c

080157a8 <rcl_get_default_topic_name_substitutions>:
 80157a8:	2800      	cmp	r0, #0
 80157aa:	bf0c      	ite	eq
 80157ac:	200b      	moveq	r0, #11
 80157ae:	2000      	movne	r0, #0
 80157b0:	4770      	bx	lr
 80157b2:	bf00      	nop

080157b4 <rcl_init>:
 80157b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157b8:	1e07      	subs	r7, r0, #0
 80157ba:	b0a1      	sub	sp, #132	; 0x84
 80157bc:	4688      	mov	r8, r1
 80157be:	4692      	mov	sl, r2
 80157c0:	4699      	mov	r9, r3
 80157c2:	f340 8096 	ble.w	80158f2 <rcl_init+0x13e>
 80157c6:	2900      	cmp	r1, #0
 80157c8:	f000 8096 	beq.w	80158f8 <rcl_init+0x144>
 80157cc:	1f0d      	subs	r5, r1, #4
 80157ce:	2400      	movs	r4, #0
 80157d0:	f855 6f04 	ldr.w	r6, [r5, #4]!
 80157d4:	3401      	adds	r4, #1
 80157d6:	2e00      	cmp	r6, #0
 80157d8:	f000 808e 	beq.w	80158f8 <rcl_init+0x144>
 80157dc:	42a7      	cmp	r7, r4
 80157de:	d1f7      	bne.n	80157d0 <rcl_init+0x1c>
 80157e0:	f1ba 0f00 	cmp.w	sl, #0
 80157e4:	f000 8088 	beq.w	80158f8 <rcl_init+0x144>
 80157e8:	f8da 4000 	ldr.w	r4, [sl]
 80157ec:	2c00      	cmp	r4, #0
 80157ee:	f000 8083 	beq.w	80158f8 <rcl_init+0x144>
 80157f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80157f4:	ad1b      	add	r5, sp, #108	; 0x6c
 80157f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80157f8:	6823      	ldr	r3, [r4, #0]
 80157fa:	602b      	str	r3, [r5, #0]
 80157fc:	a81b      	add	r0, sp, #108	; 0x6c
 80157fe:	f7f9 fcd3 	bl	800f1a8 <rcutils_allocator_is_valid>
 8015802:	2800      	cmp	r0, #0
 8015804:	d078      	beq.n	80158f8 <rcl_init+0x144>
 8015806:	f1b9 0f00 	cmp.w	r9, #0
 801580a:	d075      	beq.n	80158f8 <rcl_init+0x144>
 801580c:	f8d9 3000 	ldr.w	r3, [r9]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d176      	bne.n	8015902 <rcl_init+0x14e>
 8015814:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8015818:	2178      	movs	r1, #120	; 0x78
 801581a:	2001      	movs	r0, #1
 801581c:	4798      	blx	r3
 801581e:	4604      	mov	r4, r0
 8015820:	f8c9 0000 	str.w	r0, [r9]
 8015824:	2800      	cmp	r0, #0
 8015826:	f000 80c6 	beq.w	80159b6 <rcl_init+0x202>
 801582a:	a804      	add	r0, sp, #16
 801582c:	f002 f944 	bl	8017ab8 <rmw_get_zero_initialized_context>
 8015830:	a904      	add	r1, sp, #16
 8015832:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015836:	2250      	movs	r2, #80	; 0x50
 8015838:	ac1b      	add	r4, sp, #108	; 0x6c
 801583a:	f003 ffa3 	bl	8019784 <memcpy>
 801583e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015840:	f8d9 5000 	ldr.w	r5, [r9]
 8015844:	6826      	ldr	r6, [r4, #0]
 8015846:	462c      	mov	r4, r5
 8015848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801584a:	f105 0114 	add.w	r1, r5, #20
 801584e:	6026      	str	r6, [r4, #0]
 8015850:	4650      	mov	r0, sl
 8015852:	f7f8 fc13 	bl	800e07c <rcl_init_options_copy>
 8015856:	4606      	mov	r6, r0
 8015858:	2800      	cmp	r0, #0
 801585a:	d143      	bne.n	80158e4 <rcl_init+0x130>
 801585c:	f8d9 b000 	ldr.w	fp, [r9]
 8015860:	463c      	mov	r4, r7
 8015862:	17fd      	asrs	r5, r7, #31
 8015864:	e9cb 4506 	strd	r4, r5, [fp, #24]
 8015868:	f8cb 0020 	str.w	r0, [fp, #32]
 801586c:	2f00      	cmp	r7, #0
 801586e:	d04d      	beq.n	801590c <rcl_init+0x158>
 8015870:	f1b8 0f00 	cmp.w	r8, #0
 8015874:	d04a      	beq.n	801590c <rcl_init+0x158>
 8015876:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 801587a:	4638      	mov	r0, r7
 801587c:	2104      	movs	r1, #4
 801587e:	4798      	blx	r3
 8015880:	f8d9 a000 	ldr.w	sl, [r9]
 8015884:	f8cb 0020 	str.w	r0, [fp, #32]
 8015888:	f8da 3020 	ldr.w	r3, [sl, #32]
 801588c:	b34b      	cbz	r3, 80158e2 <rcl_init+0x12e>
 801588e:	2f01      	cmp	r7, #1
 8015890:	f175 0300 	sbcs.w	r3, r5, #0
 8015894:	db3a      	blt.n	801590c <rcl_init+0x158>
 8015896:	f1a8 0804 	sub.w	r8, r8, #4
 801589a:	2600      	movs	r6, #0
 801589c:	2700      	movs	r7, #0
 801589e:	e00c      	b.n	80158ba <rcl_init+0x106>
 80158a0:	f8d8 1000 	ldr.w	r1, [r8]
 80158a4:	f003 ff6e 	bl	8019784 <memcpy>
 80158a8:	3601      	adds	r6, #1
 80158aa:	f147 0700 	adc.w	r7, r7, #0
 80158ae:	42bd      	cmp	r5, r7
 80158b0:	bf08      	it	eq
 80158b2:	42b4      	cmpeq	r4, r6
 80158b4:	d02a      	beq.n	801590c <rcl_init+0x158>
 80158b6:	f8d9 a000 	ldr.w	sl, [r9]
 80158ba:	f858 0f04 	ldr.w	r0, [r8, #4]!
 80158be:	f7ea fc91 	bl	80001e4 <strlen>
 80158c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80158c4:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80158c6:	f8da a020 	ldr.w	sl, [sl, #32]
 80158ca:	9003      	str	r0, [sp, #12]
 80158cc:	4798      	blx	r3
 80158ce:	f8d9 1000 	ldr.w	r1, [r9]
 80158d2:	9a03      	ldr	r2, [sp, #12]
 80158d4:	6a09      	ldr	r1, [r1, #32]
 80158d6:	00b3      	lsls	r3, r6, #2
 80158d8:	f84a 0003 	str.w	r0, [sl, r3]
 80158dc:	58c8      	ldr	r0, [r1, r3]
 80158de:	2800      	cmp	r0, #0
 80158e0:	d1de      	bne.n	80158a0 <rcl_init+0xec>
 80158e2:	260a      	movs	r6, #10
 80158e4:	4648      	mov	r0, r9
 80158e6:	f7ff fd89 	bl	80153fc <__cleanup_context>
 80158ea:	4630      	mov	r0, r6
 80158ec:	b021      	add	sp, #132	; 0x84
 80158ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158f2:	2900      	cmp	r1, #0
 80158f4:	f43f af74 	beq.w	80157e0 <rcl_init+0x2c>
 80158f8:	260b      	movs	r6, #11
 80158fa:	4630      	mov	r0, r6
 80158fc:	b021      	add	sp, #132	; 0x84
 80158fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015902:	2664      	movs	r6, #100	; 0x64
 8015904:	4630      	mov	r0, r6
 8015906:	b021      	add	sp, #132	; 0x84
 8015908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801590c:	2605      	movs	r6, #5
 801590e:	2300      	movs	r3, #0
 8015910:	4832      	ldr	r0, [pc, #200]	; (80159dc <rcl_init+0x228>)
 8015912:	9600      	str	r6, [sp, #0]
 8015914:	2201      	movs	r2, #1
 8015916:	f001 ff1d 	bl	8017754 <__atomic_fetch_add_8>
 801591a:	4604      	mov	r4, r0
 801591c:	460d      	mov	r5, r1
 801591e:	ea54 0305 	orrs.w	r3, r4, r5
 8015922:	d03e      	beq.n	80159a2 <rcl_init+0x1ee>
 8015924:	4602      	mov	r2, r0
 8015926:	460b      	mov	r3, r1
 8015928:	9600      	str	r6, [sp, #0]
 801592a:	f109 0008 	add.w	r0, r9, #8
 801592e:	f001 fea3 	bl	8017678 <__atomic_store_8>
 8015932:	f8d9 3000 	ldr.w	r3, [r9]
 8015936:	695f      	ldr	r7, [r3, #20]
 8015938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801593a:	3301      	adds	r3, #1
 801593c:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8015940:	d03d      	beq.n	80159be <rcl_init+0x20a>
 8015942:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8015946:	b94b      	cbnz	r3, 801595c <rcl_init+0x1a8>
 8015948:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801594c:	f000 f848 	bl	80159e0 <rcl_get_localhost_only>
 8015950:	4606      	mov	r6, r0
 8015952:	2800      	cmp	r0, #0
 8015954:	d1c6      	bne.n	80158e4 <rcl_init+0x130>
 8015956:	f8d9 3000 	ldr.w	r3, [r9]
 801595a:	695f      	ldr	r7, [r3, #20]
 801595c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801595e:	aa1a      	add	r2, sp, #104	; 0x68
 8015960:	a919      	add	r1, sp, #100	; 0x64
 8015962:	f000 ff65 	bl	8016830 <rcl_validate_enclave_name>
 8015966:	4606      	mov	r6, r0
 8015968:	2800      	cmp	r0, #0
 801596a:	d1bb      	bne.n	80158e4 <rcl_init+0x130>
 801596c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801596e:	bb23      	cbnz	r3, 80159ba <rcl_init+0x206>
 8015970:	f8d9 1000 	ldr.w	r1, [r9]
 8015974:	694b      	ldr	r3, [r1, #20]
 8015976:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015978:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801597c:	f000 fa9e 	bl	8015ebc <rcl_get_security_options_from_environment>
 8015980:	4606      	mov	r6, r0
 8015982:	2800      	cmp	r0, #0
 8015984:	d1ae      	bne.n	80158e4 <rcl_init+0x130>
 8015986:	f8d9 1000 	ldr.w	r1, [r9]
 801598a:	6948      	ldr	r0, [r1, #20]
 801598c:	3128      	adds	r1, #40	; 0x28
 801598e:	3018      	adds	r0, #24
 8015990:	f7fa f83c 	bl	800fa0c <rmw_init>
 8015994:	4606      	mov	r6, r0
 8015996:	2800      	cmp	r0, #0
 8015998:	d0af      	beq.n	80158fa <rcl_init+0x146>
 801599a:	f7ff fcfd 	bl	8015398 <rcl_convert_rmw_ret_to_rcl_ret>
 801599e:	4606      	mov	r6, r0
 80159a0:	e7a0      	b.n	80158e4 <rcl_init+0x130>
 80159a2:	9600      	str	r6, [sp, #0]
 80159a4:	480d      	ldr	r0, [pc, #52]	; (80159dc <rcl_init+0x228>)
 80159a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80159aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80159ae:	f001 fe63 	bl	8017678 <__atomic_store_8>
 80159b2:	2601      	movs	r6, #1
 80159b4:	e796      	b.n	80158e4 <rcl_init+0x130>
 80159b6:	260a      	movs	r6, #10
 80159b8:	e79f      	b.n	80158fa <rcl_init+0x146>
 80159ba:	2601      	movs	r6, #1
 80159bc:	e792      	b.n	80158e4 <rcl_init+0x130>
 80159be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80159c2:	f003 fba5 	bl	8019110 <rcl_get_default_domain_id>
 80159c6:	4606      	mov	r6, r0
 80159c8:	2800      	cmp	r0, #0
 80159ca:	d18b      	bne.n	80158e4 <rcl_init+0x130>
 80159cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159ce:	3301      	adds	r3, #1
 80159d0:	f8d9 3000 	ldr.w	r3, [r9]
 80159d4:	bf08      	it	eq
 80159d6:	6278      	streq	r0, [r7, #36]	; 0x24
 80159d8:	695f      	ldr	r7, [r3, #20]
 80159da:	e7b2      	b.n	8015942 <rcl_init+0x18e>
 80159dc:	20000138 	.word	0x20000138

080159e0 <rcl_get_localhost_only>:
 80159e0:	b510      	push	{r4, lr}
 80159e2:	b082      	sub	sp, #8
 80159e4:	2300      	movs	r3, #0
 80159e6:	9301      	str	r3, [sp, #4]
 80159e8:	b1b8      	cbz	r0, 8015a1a <rcl_get_localhost_only+0x3a>
 80159ea:	4604      	mov	r4, r0
 80159ec:	a901      	add	r1, sp, #4
 80159ee:	480c      	ldr	r0, [pc, #48]	; (8015a20 <rcl_get_localhost_only+0x40>)
 80159f0:	f001 ff34 	bl	801785c <rcutils_get_env>
 80159f4:	b110      	cbz	r0, 80159fc <rcl_get_localhost_only+0x1c>
 80159f6:	2001      	movs	r0, #1
 80159f8:	b002      	add	sp, #8
 80159fa:	bd10      	pop	{r4, pc}
 80159fc:	9b01      	ldr	r3, [sp, #4]
 80159fe:	b113      	cbz	r3, 8015a06 <rcl_get_localhost_only+0x26>
 8015a00:	781a      	ldrb	r2, [r3, #0]
 8015a02:	2a31      	cmp	r2, #49	; 0x31
 8015a04:	d004      	beq.n	8015a10 <rcl_get_localhost_only+0x30>
 8015a06:	2302      	movs	r3, #2
 8015a08:	2000      	movs	r0, #0
 8015a0a:	7023      	strb	r3, [r4, #0]
 8015a0c:	b002      	add	sp, #8
 8015a0e:	bd10      	pop	{r4, pc}
 8015a10:	785b      	ldrb	r3, [r3, #1]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d1f7      	bne.n	8015a06 <rcl_get_localhost_only+0x26>
 8015a16:	2301      	movs	r3, #1
 8015a18:	e7f6      	b.n	8015a08 <rcl_get_localhost_only+0x28>
 8015a1a:	200b      	movs	r0, #11
 8015a1c:	b002      	add	sp, #8
 8015a1e:	bd10      	pop	{r4, pc}
 8015a20:	0801f184 	.word	0x0801f184

08015a24 <rcl_get_zero_initialized_node>:
 8015a24:	4a03      	ldr	r2, [pc, #12]	; (8015a34 <rcl_get_zero_initialized_node+0x10>)
 8015a26:	4603      	mov	r3, r0
 8015a28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015a2c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015a30:	4618      	mov	r0, r3
 8015a32:	4770      	bx	lr
 8015a34:	0801f1a0 	.word	0x0801f1a0

08015a38 <rcl_node_init>:
 8015a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a3c:	b09b      	sub	sp, #108	; 0x6c
 8015a3e:	4604      	mov	r4, r0
 8015a40:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 8015a44:	f04f 0c00 	mov.w	ip, #0
 8015a48:	a815      	add	r0, sp, #84	; 0x54
 8015a4a:	460e      	mov	r6, r1
 8015a4c:	4615      	mov	r5, r2
 8015a4e:	461f      	mov	r7, r3
 8015a50:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 8015a54:	f003 fc72 	bl	801933c <rcl_guard_condition_get_default_options>
 8015a58:	f1b8 0f00 	cmp.w	r8, #0
 8015a5c:	f000 80fd 	beq.w	8015c5a <rcl_node_init+0x222>
 8015a60:	f108 0b04 	add.w	fp, r8, #4
 8015a64:	4658      	mov	r0, fp
 8015a66:	f7f9 fb9f 	bl	800f1a8 <rcutils_allocator_is_valid>
 8015a6a:	2800      	cmp	r0, #0
 8015a6c:	f000 80f5 	beq.w	8015c5a <rcl_node_init+0x222>
 8015a70:	2e00      	cmp	r6, #0
 8015a72:	f000 80f2 	beq.w	8015c5a <rcl_node_init+0x222>
 8015a76:	2d00      	cmp	r5, #0
 8015a78:	f000 80ef 	beq.w	8015c5a <rcl_node_init+0x222>
 8015a7c:	2c00      	cmp	r4, #0
 8015a7e:	f000 80ec 	beq.w	8015c5a <rcl_node_init+0x222>
 8015a82:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015a86:	f1b9 0f00 	cmp.w	r9, #0
 8015a8a:	f040 8112 	bne.w	8015cb2 <rcl_node_init+0x27a>
 8015a8e:	2f00      	cmp	r7, #0
 8015a90:	f000 80e3 	beq.w	8015c5a <rcl_node_init+0x222>
 8015a94:	4638      	mov	r0, r7
 8015a96:	f7ff fca3 	bl	80153e0 <rcl_context_is_valid>
 8015a9a:	4682      	mov	sl, r0
 8015a9c:	2800      	cmp	r0, #0
 8015a9e:	f000 80e2 	beq.w	8015c66 <rcl_node_init+0x22e>
 8015aa2:	464a      	mov	r2, r9
 8015aa4:	a914      	add	r1, sp, #80	; 0x50
 8015aa6:	4630      	mov	r0, r6
 8015aa8:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8015aac:	f002 f878 	bl	8017ba0 <rmw_validate_node_name>
 8015ab0:	4681      	mov	r9, r0
 8015ab2:	2800      	cmp	r0, #0
 8015ab4:	f040 80d3 	bne.w	8015c5e <rcl_node_init+0x226>
 8015ab8:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015aba:	2800      	cmp	r0, #0
 8015abc:	f040 8105 	bne.w	8015cca <rcl_node_init+0x292>
 8015ac0:	4628      	mov	r0, r5
 8015ac2:	f7ea fb8f 	bl	80001e4 <strlen>
 8015ac6:	2800      	cmp	r0, #0
 8015ac8:	f040 80d0 	bne.w	8015c6c <rcl_node_init+0x234>
 8015acc:	4d8e      	ldr	r5, [pc, #568]	; (8015d08 <rcl_node_init+0x2d0>)
 8015ace:	a914      	add	r1, sp, #80	; 0x50
 8015ad0:	2200      	movs	r2, #0
 8015ad2:	4628      	mov	r0, r5
 8015ad4:	f002 f846 	bl	8017b64 <rmw_validate_namespace>
 8015ad8:	4681      	mov	r9, r0
 8015ada:	2800      	cmp	r0, #0
 8015adc:	f040 80bf 	bne.w	8015c5e <rcl_node_init+0x226>
 8015ae0:	4682      	mov	sl, r0
 8015ae2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	f040 80f5 	bne.w	8015cd4 <rcl_node_init+0x29c>
 8015aea:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8015aee:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015af2:	9307      	str	r3, [sp, #28]
 8015af4:	2030      	movs	r0, #48	; 0x30
 8015af6:	4790      	blx	r2
 8015af8:	4681      	mov	r9, r0
 8015afa:	6060      	str	r0, [r4, #4]
 8015afc:	2800      	cmp	r0, #0
 8015afe:	f000 80de 	beq.w	8015cbe <rcl_node_init+0x286>
 8015b02:	9b07      	ldr	r3, [sp, #28]
 8015b04:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8015b08:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8015b0c:	a80a      	add	r0, sp, #40	; 0x28
 8015b0e:	f7f8 fb65 	bl	800e1dc <rcl_node_get_default_options>
 8015b12:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8015b16:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015b1a:	46cc      	mov	ip, r9
 8015b1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b20:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8015b24:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8015b28:	6861      	ldr	r1, [r4, #4]
 8015b2a:	6027      	str	r7, [r4, #0]
 8015b2c:	4640      	mov	r0, r8
 8015b2e:	f7f8 fb71 	bl	800e214 <rcl_node_options_copy>
 8015b32:	2800      	cmp	r0, #0
 8015b34:	d167      	bne.n	8015c06 <rcl_node_init+0x1ce>
 8015b36:	4628      	mov	r0, r5
 8015b38:	f7ea fb54 	bl	80001e4 <strlen>
 8015b3c:	4428      	add	r0, r5
 8015b3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015b42:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8015b46:	2b2f      	cmp	r3, #47	; 0x2f
 8015b48:	bf08      	it	eq
 8015b4a:	4970      	ldreq	r1, [pc, #448]	; (8015d0c <rcl_node_init+0x2d4>)
 8015b4c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8015b50:	bf18      	it	ne
 8015b52:	496f      	ldrne	r1, [pc, #444]	; (8015d10 <rcl_node_init+0x2d8>)
 8015b54:	9604      	str	r6, [sp, #16]
 8015b56:	e9cd 1502 	strd	r1, r5, [sp, #8]
 8015b5a:	e9cd 3200 	strd	r3, r2, [sp]
 8015b5e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8015b62:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015b66:	f001 fe3f 	bl	80177e8 <rcutils_format_string_limit>
 8015b6a:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 8015b6e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015b72:	f8d9 3000 	ldr.w	r3, [r9]
 8015b76:	9313      	str	r3, [sp, #76]	; 0x4c
 8015b78:	1c59      	adds	r1, r3, #1
 8015b7a:	f000 80b7 	beq.w	8015cec <rcl_node_init+0x2b4>
 8015b7e:	683a      	ldr	r2, [r7, #0]
 8015b80:	f8c9 301c 	str.w	r3, [r9, #28]
 8015b84:	6952      	ldr	r2, [r2, #20]
 8015b86:	6821      	ldr	r1, [r4, #0]
 8015b88:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8015b8c:	6808      	ldr	r0, [r1, #0]
 8015b8e:	f1a2 0201 	sub.w	r2, r2, #1
 8015b92:	fab2 f282 	clz	r2, r2
 8015b96:	0952      	lsrs	r2, r2, #5
 8015b98:	9200      	str	r2, [sp, #0]
 8015b9a:	4631      	mov	r1, r6
 8015b9c:	3028      	adds	r0, #40	; 0x28
 8015b9e:	462a      	mov	r2, r5
 8015ba0:	f7fa f906 	bl	800fdb0 <rmw_create_node>
 8015ba4:	6863      	ldr	r3, [r4, #4]
 8015ba6:	f8c9 0020 	str.w	r0, [r9, #32]
 8015baa:	6a18      	ldr	r0, [r3, #32]
 8015bac:	b368      	cbz	r0, 8015c0a <rcl_node_init+0x1d2>
 8015bae:	f7fa f98b 	bl	800fec8 <rmw_node_get_graph_guard_condition>
 8015bb2:	4681      	mov	r9, r0
 8015bb4:	b338      	cbz	r0, 8015c06 <rcl_node_init+0x1ce>
 8015bb6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015bba:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015bbe:	6866      	ldr	r6, [r4, #4]
 8015bc0:	2008      	movs	r0, #8
 8015bc2:	4798      	blx	r3
 8015bc4:	6863      	ldr	r3, [r4, #4]
 8015bc6:	6270      	str	r0, [r6, #36]	; 0x24
 8015bc8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8015bca:	b1f6      	cbz	r6, 8015c0a <rcl_node_init+0x1d2>
 8015bcc:	a808      	add	r0, sp, #32
 8015bce:	f003 fad3 	bl	8019178 <rcl_get_zero_initialized_guard_condition>
 8015bd2:	a808      	add	r0, sp, #32
 8015bd4:	c803      	ldmia	r0, {r0, r1}
 8015bd6:	e886 0003 	stmia.w	r6, {r0, r1}
 8015bda:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8015bde:	ae15      	add	r6, sp, #84	; 0x54
 8015be0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015be2:	f8db 3000 	ldr.w	r3, [fp]
 8015be6:	6033      	str	r3, [r6, #0]
 8015be8:	ab1a      	add	r3, sp, #104	; 0x68
 8015bea:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8015bee:	6866      	ldr	r6, [r4, #4]
 8015bf0:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8015bf2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015bf6:	4649      	mov	r1, r9
 8015bf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015bfa:	4630      	mov	r0, r6
 8015bfc:	463a      	mov	r2, r7
 8015bfe:	f003 fb1f 	bl	8019240 <rcl_guard_condition_init_from_rmw>
 8015c02:	4681      	mov	r9, r0
 8015c04:	b328      	cbz	r0, 8015c52 <rcl_node_init+0x21a>
 8015c06:	6863      	ldr	r3, [r4, #4]
 8015c08:	b1f3      	cbz	r3, 8015c48 <rcl_node_init+0x210>
 8015c0a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8015c0c:	b128      	cbz	r0, 8015c1a <rcl_node_init+0x1e2>
 8015c0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015c12:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015c16:	4798      	blx	r3
 8015c18:	6863      	ldr	r3, [r4, #4]
 8015c1a:	6a18      	ldr	r0, [r3, #32]
 8015c1c:	b110      	cbz	r0, 8015c24 <rcl_node_init+0x1ec>
 8015c1e:	f7fa f8df 	bl	800fde0 <rmw_destroy_node>
 8015c22:	6863      	ldr	r3, [r4, #4]
 8015c24:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015c26:	b148      	cbz	r0, 8015c3c <rcl_node_init+0x204>
 8015c28:	f003 fb62 	bl	80192f0 <rcl_guard_condition_fini>
 8015c2c:	6862      	ldr	r2, [r4, #4]
 8015c2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015c32:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8015c34:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015c38:	4798      	blx	r3
 8015c3a:	6863      	ldr	r3, [r4, #4]
 8015c3c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8015c40:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015c44:	4618      	mov	r0, r3
 8015c46:	4790      	blx	r2
 8015c48:	2300      	movs	r3, #0
 8015c4a:	e9c4 3300 	strd	r3, r3, [r4]
 8015c4e:	f04f 0901 	mov.w	r9, #1
 8015c52:	f1ba 0f00 	cmp.w	sl, #0
 8015c56:	d125      	bne.n	8015ca4 <rcl_node_init+0x26c>
 8015c58:	e001      	b.n	8015c5e <rcl_node_init+0x226>
 8015c5a:	f04f 090b 	mov.w	r9, #11
 8015c5e:	4648      	mov	r0, r9
 8015c60:	b01b      	add	sp, #108	; 0x6c
 8015c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c66:	f04f 0965 	mov.w	r9, #101	; 0x65
 8015c6a:	e7f8      	b.n	8015c5e <rcl_node_init+0x226>
 8015c6c:	782b      	ldrb	r3, [r5, #0]
 8015c6e:	2b2f      	cmp	r3, #47	; 0x2f
 8015c70:	f43f af2d 	beq.w	8015ace <rcl_node_init+0x96>
 8015c74:	4927      	ldr	r1, [pc, #156]	; (8015d14 <rcl_node_init+0x2dc>)
 8015c76:	f8db 3010 	ldr.w	r3, [fp, #16]
 8015c7a:	9300      	str	r3, [sp, #0]
 8015c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015c80:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8015c84:	9503      	str	r5, [sp, #12]
 8015c86:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8015c8a:	f001 fdad 	bl	80177e8 <rcutils_format_string_limit>
 8015c8e:	4605      	mov	r5, r0
 8015c90:	b348      	cbz	r0, 8015ce6 <rcl_node_init+0x2ae>
 8015c92:	2200      	movs	r2, #0
 8015c94:	a914      	add	r1, sp, #80	; 0x50
 8015c96:	9214      	str	r2, [sp, #80]	; 0x50
 8015c98:	f001 ff64 	bl	8017b64 <rmw_validate_namespace>
 8015c9c:	4681      	mov	r9, r0
 8015c9e:	2800      	cmp	r0, #0
 8015ca0:	f43f af1f 	beq.w	8015ae2 <rcl_node_init+0xaa>
 8015ca4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015ca8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015cac:	4628      	mov	r0, r5
 8015cae:	4798      	blx	r3
 8015cb0:	e7d5      	b.n	8015c5e <rcl_node_init+0x226>
 8015cb2:	f04f 0964 	mov.w	r9, #100	; 0x64
 8015cb6:	4648      	mov	r0, r9
 8015cb8:	b01b      	add	sp, #108	; 0x6c
 8015cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cbe:	f04f 090a 	mov.w	r9, #10
 8015cc2:	f1ba 0f00 	cmp.w	sl, #0
 8015cc6:	d1ed      	bne.n	8015ca4 <rcl_node_init+0x26c>
 8015cc8:	e7c9      	b.n	8015c5e <rcl_node_init+0x226>
 8015cca:	f001 ffbb 	bl	8017c44 <rmw_node_name_validation_result_string>
 8015cce:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 8015cd2:	e7c4      	b.n	8015c5e <rcl_node_init+0x226>
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f001 ff57 	bl	8017b88 <rmw_namespace_validation_result_string>
 8015cda:	f04f 09ca 	mov.w	r9, #202	; 0xca
 8015cde:	f1ba 0f00 	cmp.w	sl, #0
 8015ce2:	d1df      	bne.n	8015ca4 <rcl_node_init+0x26c>
 8015ce4:	e7bb      	b.n	8015c5e <rcl_node_init+0x226>
 8015ce6:	f04f 090a 	mov.w	r9, #10
 8015cea:	e7b8      	b.n	8015c5e <rcl_node_init+0x226>
 8015cec:	a813      	add	r0, sp, #76	; 0x4c
 8015cee:	f003 fa0f 	bl	8019110 <rcl_get_default_domain_id>
 8015cf2:	2800      	cmp	r0, #0
 8015cf4:	d187      	bne.n	8015c06 <rcl_node_init+0x1ce>
 8015cf6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015cf8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015cfc:	1c5a      	adds	r2, r3, #1
 8015cfe:	bf04      	itt	eq
 8015d00:	9013      	streq	r0, [sp, #76]	; 0x4c
 8015d02:	4603      	moveq	r3, r0
 8015d04:	e73b      	b.n	8015b7e <rcl_node_init+0x146>
 8015d06:	bf00      	nop
 8015d08:	0801ee68 	.word	0x0801ee68
 8015d0c:	0801eeb4 	.word	0x0801eeb4
 8015d10:	0801ee6c 	.word	0x0801ee6c
 8015d14:	0801f19c 	.word	0x0801f19c

08015d18 <rcl_node_is_valid>:
 8015d18:	b130      	cbz	r0, 8015d28 <rcl_node_is_valid+0x10>
 8015d1a:	6843      	ldr	r3, [r0, #4]
 8015d1c:	b123      	cbz	r3, 8015d28 <rcl_node_is_valid+0x10>
 8015d1e:	6a1b      	ldr	r3, [r3, #32]
 8015d20:	b113      	cbz	r3, 8015d28 <rcl_node_is_valid+0x10>
 8015d22:	6800      	ldr	r0, [r0, #0]
 8015d24:	f7ff bb5c 	b.w	80153e0 <rcl_context_is_valid>
 8015d28:	2000      	movs	r0, #0
 8015d2a:	4770      	bx	lr

08015d2c <rcl_node_get_name>:
 8015d2c:	b120      	cbz	r0, 8015d38 <rcl_node_get_name+0xc>
 8015d2e:	6840      	ldr	r0, [r0, #4]
 8015d30:	b110      	cbz	r0, 8015d38 <rcl_node_get_name+0xc>
 8015d32:	6a00      	ldr	r0, [r0, #32]
 8015d34:	b100      	cbz	r0, 8015d38 <rcl_node_get_name+0xc>
 8015d36:	6880      	ldr	r0, [r0, #8]
 8015d38:	4770      	bx	lr
 8015d3a:	bf00      	nop

08015d3c <rcl_node_get_namespace>:
 8015d3c:	b120      	cbz	r0, 8015d48 <rcl_node_get_namespace+0xc>
 8015d3e:	6840      	ldr	r0, [r0, #4]
 8015d40:	b110      	cbz	r0, 8015d48 <rcl_node_get_namespace+0xc>
 8015d42:	6a00      	ldr	r0, [r0, #32]
 8015d44:	b100      	cbz	r0, 8015d48 <rcl_node_get_namespace+0xc>
 8015d46:	68c0      	ldr	r0, [r0, #12]
 8015d48:	4770      	bx	lr
 8015d4a:	bf00      	nop

08015d4c <rcl_node_get_options>:
 8015d4c:	b128      	cbz	r0, 8015d5a <rcl_node_get_options+0xe>
 8015d4e:	6840      	ldr	r0, [r0, #4]
 8015d50:	b118      	cbz	r0, 8015d5a <rcl_node_get_options+0xe>
 8015d52:	6a03      	ldr	r3, [r0, #32]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	bf08      	it	eq
 8015d58:	2000      	moveq	r0, #0
 8015d5a:	4770      	bx	lr

08015d5c <rcl_node_get_rmw_handle>:
 8015d5c:	b110      	cbz	r0, 8015d64 <rcl_node_get_rmw_handle+0x8>
 8015d5e:	6840      	ldr	r0, [r0, #4]
 8015d60:	b100      	cbz	r0, 8015d64 <rcl_node_get_rmw_handle+0x8>
 8015d62:	6a00      	ldr	r0, [r0, #32]
 8015d64:	4770      	bx	lr
 8015d66:	bf00      	nop

08015d68 <exact_match_lookup>:
 8015d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d6a:	f102 0708 	add.w	r7, r2, #8
 8015d6e:	460b      	mov	r3, r1
 8015d70:	4614      	mov	r4, r2
 8015d72:	4606      	mov	r6, r0
 8015d74:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015d78:	b085      	sub	sp, #20
 8015d7a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	4918      	ldr	r1, [pc, #96]	; (8015de4 <exact_match_lookup+0x7c>)
 8015d82:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015d86:	f001 fd21 	bl	80177cc <rcutils_join_path>
 8015d8a:	7833      	ldrb	r3, [r6, #0]
 8015d8c:	2b2f      	cmp	r3, #47	; 0x2f
 8015d8e:	4605      	mov	r5, r0
 8015d90:	d021      	beq.n	8015dd6 <exact_match_lookup+0x6e>
 8015d92:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8015d96:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015d9a:	1c70      	adds	r0, r6, #1
 8015d9c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015da0:	f001 fd1a 	bl	80177d8 <rcutils_to_native_path>
 8015da4:	4606      	mov	r6, r0
 8015da6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015daa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015dae:	4631      	mov	r1, r6
 8015db0:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015db4:	4628      	mov	r0, r5
 8015db6:	f001 fd09 	bl	80177cc <rcutils_join_path>
 8015dba:	6862      	ldr	r2, [r4, #4]
 8015dbc:	6921      	ldr	r1, [r4, #16]
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	4630      	mov	r0, r6
 8015dc2:	461e      	mov	r6, r3
 8015dc4:	4790      	blx	r2
 8015dc6:	4628      	mov	r0, r5
 8015dc8:	6863      	ldr	r3, [r4, #4]
 8015dca:	6921      	ldr	r1, [r4, #16]
 8015dcc:	4798      	blx	r3
 8015dce:	4635      	mov	r5, r6
 8015dd0:	4628      	mov	r0, r5
 8015dd2:	b005      	add	sp, #20
 8015dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dd6:	7873      	ldrb	r3, [r6, #1]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d1da      	bne.n	8015d92 <exact_match_lookup+0x2a>
 8015ddc:	4628      	mov	r0, r5
 8015dde:	b005      	add	sp, #20
 8015de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015de2:	bf00      	nop
 8015de4:	0801f1e4 	.word	0x0801f1e4

08015de8 <rcl_get_secure_root>:
 8015de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015dec:	b085      	sub	sp, #20
 8015dee:	b168      	cbz	r0, 8015e0c <rcl_get_secure_root+0x24>
 8015df0:	4607      	mov	r7, r0
 8015df2:	4608      	mov	r0, r1
 8015df4:	460c      	mov	r4, r1
 8015df6:	f7f9 f9d7 	bl	800f1a8 <rcutils_allocator_is_valid>
 8015dfa:	b138      	cbz	r0, 8015e0c <rcl_get_secure_root+0x24>
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	482d      	ldr	r0, [pc, #180]	; (8015eb4 <rcl_get_secure_root+0xcc>)
 8015e00:	9303      	str	r3, [sp, #12]
 8015e02:	a903      	add	r1, sp, #12
 8015e04:	f001 fd2a 	bl	801785c <rcutils_get_env>
 8015e08:	4605      	mov	r5, r0
 8015e0a:	b120      	cbz	r0, 8015e16 <rcl_get_secure_root+0x2e>
 8015e0c:	2500      	movs	r5, #0
 8015e0e:	4628      	mov	r0, r5
 8015e10:	b005      	add	sp, #20
 8015e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e16:	9b03      	ldr	r3, [sp, #12]
 8015e18:	781a      	ldrb	r2, [r3, #0]
 8015e1a:	2a00      	cmp	r2, #0
 8015e1c:	d0f6      	beq.n	8015e0c <rcl_get_secure_root+0x24>
 8015e1e:	f104 090c 	add.w	r9, r4, #12
 8015e22:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015e26:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015e30:	f001 fe04 	bl	8017a3c <rcutils_strdup>
 8015e34:	4680      	mov	r8, r0
 8015e36:	2800      	cmp	r0, #0
 8015e38:	d0e8      	beq.n	8015e0c <rcl_get_secure_root+0x24>
 8015e3a:	481f      	ldr	r0, [pc, #124]	; (8015eb8 <rcl_get_secure_root+0xd0>)
 8015e3c:	9503      	str	r5, [sp, #12]
 8015e3e:	a903      	add	r1, sp, #12
 8015e40:	f001 fd0c 	bl	801785c <rcutils_get_env>
 8015e44:	b160      	cbz	r0, 8015e60 <rcl_get_secure_root+0x78>
 8015e46:	2600      	movs	r6, #0
 8015e48:	6863      	ldr	r3, [r4, #4]
 8015e4a:	6921      	ldr	r1, [r4, #16]
 8015e4c:	4630      	mov	r0, r6
 8015e4e:	4798      	blx	r3
 8015e50:	4640      	mov	r0, r8
 8015e52:	6863      	ldr	r3, [r4, #4]
 8015e54:	6921      	ldr	r1, [r4, #16]
 8015e56:	4798      	blx	r3
 8015e58:	4628      	mov	r0, r5
 8015e5a:	b005      	add	sp, #20
 8015e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e60:	9b03      	ldr	r3, [sp, #12]
 8015e62:	781e      	ldrb	r6, [r3, #0]
 8015e64:	b1f6      	cbz	r6, 8015ea4 <rcl_get_secure_root+0xbc>
 8015e66:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015e6a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015e6e:	4618      	mov	r0, r3
 8015e70:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015e74:	f001 fde2 	bl	8017a3c <rcutils_strdup>
 8015e78:	4606      	mov	r6, r0
 8015e7a:	2800      	cmp	r0, #0
 8015e7c:	d0e3      	beq.n	8015e46 <rcl_get_secure_root+0x5e>
 8015e7e:	4622      	mov	r2, r4
 8015e80:	4641      	mov	r1, r8
 8015e82:	f7ff ff71 	bl	8015d68 <exact_match_lookup>
 8015e86:	4605      	mov	r5, r0
 8015e88:	2d00      	cmp	r5, #0
 8015e8a:	d0dd      	beq.n	8015e48 <rcl_get_secure_root+0x60>
 8015e8c:	4628      	mov	r0, r5
 8015e8e:	f001 fc9b 	bl	80177c8 <rcutils_is_directory>
 8015e92:	4607      	mov	r7, r0
 8015e94:	2800      	cmp	r0, #0
 8015e96:	d1d7      	bne.n	8015e48 <rcl_get_secure_root+0x60>
 8015e98:	4628      	mov	r0, r5
 8015e9a:	6863      	ldr	r3, [r4, #4]
 8015e9c:	6921      	ldr	r1, [r4, #16]
 8015e9e:	4798      	blx	r3
 8015ea0:	463d      	mov	r5, r7
 8015ea2:	e7d1      	b.n	8015e48 <rcl_get_secure_root+0x60>
 8015ea4:	4638      	mov	r0, r7
 8015ea6:	4622      	mov	r2, r4
 8015ea8:	4641      	mov	r1, r8
 8015eaa:	f7ff ff5d 	bl	8015d68 <exact_match_lookup>
 8015eae:	4605      	mov	r5, r0
 8015eb0:	e7ea      	b.n	8015e88 <rcl_get_secure_root+0xa0>
 8015eb2:	bf00      	nop
 8015eb4:	0801f1f0 	.word	0x0801f1f0
 8015eb8:	0801f208 	.word	0x0801f208

08015ebc <rcl_get_security_options_from_environment>:
 8015ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ec0:	b082      	sub	sp, #8
 8015ec2:	4607      	mov	r7, r0
 8015ec4:	4688      	mov	r8, r1
 8015ec6:	2400      	movs	r4, #0
 8015ec8:	481d      	ldr	r0, [pc, #116]	; (8015f40 <rcl_get_security_options_from_environment+0x84>)
 8015eca:	9401      	str	r4, [sp, #4]
 8015ecc:	a901      	add	r1, sp, #4
 8015ece:	4616      	mov	r6, r2
 8015ed0:	f001 fcc4 	bl	801785c <rcutils_get_env>
 8015ed4:	b120      	cbz	r0, 8015ee0 <rcl_get_security_options_from_environment+0x24>
 8015ed6:	2501      	movs	r5, #1
 8015ed8:	4628      	mov	r0, r5
 8015eda:	b002      	add	sp, #8
 8015edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ee0:	4918      	ldr	r1, [pc, #96]	; (8015f44 <rcl_get_security_options_from_environment+0x88>)
 8015ee2:	4604      	mov	r4, r0
 8015ee4:	9801      	ldr	r0, [sp, #4]
 8015ee6:	f7ea f973 	bl	80001d0 <strcmp>
 8015eea:	4605      	mov	r5, r0
 8015eec:	b9c8      	cbnz	r0, 8015f22 <rcl_get_security_options_from_environment+0x66>
 8015eee:	9001      	str	r0, [sp, #4]
 8015ef0:	b1ee      	cbz	r6, 8015f2e <rcl_get_security_options_from_environment+0x72>
 8015ef2:	4815      	ldr	r0, [pc, #84]	; (8015f48 <rcl_get_security_options_from_environment+0x8c>)
 8015ef4:	a901      	add	r1, sp, #4
 8015ef6:	f001 fcb1 	bl	801785c <rcutils_get_env>
 8015efa:	2800      	cmp	r0, #0
 8015efc:	d1eb      	bne.n	8015ed6 <rcl_get_security_options_from_environment+0x1a>
 8015efe:	4913      	ldr	r1, [pc, #76]	; (8015f4c <rcl_get_security_options_from_environment+0x90>)
 8015f00:	9801      	ldr	r0, [sp, #4]
 8015f02:	f7ea f965 	bl	80001d0 <strcmp>
 8015f06:	fab0 f080 	clz	r0, r0
 8015f0a:	0940      	lsrs	r0, r0, #5
 8015f0c:	7030      	strb	r0, [r6, #0]
 8015f0e:	4641      	mov	r1, r8
 8015f10:	4638      	mov	r0, r7
 8015f12:	f7ff ff69 	bl	8015de8 <rcl_get_secure_root>
 8015f16:	b160      	cbz	r0, 8015f32 <rcl_get_security_options_from_environment+0x76>
 8015f18:	6070      	str	r0, [r6, #4]
 8015f1a:	4628      	mov	r0, r5
 8015f1c:	b002      	add	sp, #8
 8015f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f22:	4625      	mov	r5, r4
 8015f24:	4628      	mov	r0, r5
 8015f26:	7034      	strb	r4, [r6, #0]
 8015f28:	b002      	add	sp, #8
 8015f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f2e:	250b      	movs	r5, #11
 8015f30:	e7d2      	b.n	8015ed8 <rcl_get_security_options_from_environment+0x1c>
 8015f32:	7835      	ldrb	r5, [r6, #0]
 8015f34:	f1a5 0501 	sub.w	r5, r5, #1
 8015f38:	fab5 f585 	clz	r5, r5
 8015f3c:	096d      	lsrs	r5, r5, #5
 8015f3e:	e7cb      	b.n	8015ed8 <rcl_get_security_options_from_environment+0x1c>
 8015f40:	0801f1a8 	.word	0x0801f1a8
 8015f44:	0801f1bc 	.word	0x0801f1bc
 8015f48:	0801f1c4 	.word	0x0801f1c4
 8015f4c:	0801f1dc 	.word	0x0801f1dc

08015f50 <rcl_service_get_rmw_handle>:
 8015f50:	b110      	cbz	r0, 8015f58 <rcl_service_get_rmw_handle+0x8>
 8015f52:	6800      	ldr	r0, [r0, #0]
 8015f54:	b100      	cbz	r0, 8015f58 <rcl_service_get_rmw_handle+0x8>
 8015f56:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8015f58:	4770      	bx	lr
 8015f5a:	bf00      	nop

08015f5c <rcl_take_request>:
 8015f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f5e:	460e      	mov	r6, r1
 8015f60:	460c      	mov	r4, r1
 8015f62:	4607      	mov	r7, r0
 8015f64:	4694      	mov	ip, r2
 8015f66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015f68:	b08d      	sub	sp, #52	; 0x34
 8015f6a:	ad06      	add	r5, sp, #24
 8015f6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015f6e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015f72:	e885 0003 	stmia.w	r5, {r0, r1}
 8015f76:	b1e7      	cbz	r7, 8015fb2 <rcl_take_request+0x56>
 8015f78:	683b      	ldr	r3, [r7, #0]
 8015f7a:	b1d3      	cbz	r3, 8015fb2 <rcl_take_request+0x56>
 8015f7c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8015f7e:	b1c0      	cbz	r0, 8015fb2 <rcl_take_request+0x56>
 8015f80:	4662      	mov	r2, ip
 8015f82:	b30a      	cbz	r2, 8015fc8 <rcl_take_request+0x6c>
 8015f84:	2500      	movs	r5, #0
 8015f86:	f10d 0307 	add.w	r3, sp, #7
 8015f8a:	a902      	add	r1, sp, #8
 8015f8c:	f88d 5007 	strb.w	r5, [sp, #7]
 8015f90:	f002 f816 	bl	8017fc0 <rmw_take_request>
 8015f94:	4606      	mov	r6, r0
 8015f96:	b178      	cbz	r0, 8015fb8 <rcl_take_request+0x5c>
 8015f98:	280a      	cmp	r0, #10
 8015f9a:	bf18      	it	ne
 8015f9c:	2601      	movne	r6, #1
 8015f9e:	ad06      	add	r5, sp, #24
 8015fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015fa4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015fa8:	e884 0003 	stmia.w	r4, {r0, r1}
 8015fac:	4630      	mov	r0, r6
 8015fae:	b00d      	add	sp, #52	; 0x34
 8015fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fb2:	f44f 7616 	mov.w	r6, #600	; 0x258
 8015fb6:	e7f2      	b.n	8015f9e <rcl_take_request+0x42>
 8015fb8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8015fbc:	f240 2359 	movw	r3, #601	; 0x259
 8015fc0:	2a00      	cmp	r2, #0
 8015fc2:	bf08      	it	eq
 8015fc4:	461e      	moveq	r6, r3
 8015fc6:	e7ea      	b.n	8015f9e <rcl_take_request+0x42>
 8015fc8:	260b      	movs	r6, #11
 8015fca:	e7e8      	b.n	8015f9e <rcl_take_request+0x42>

08015fcc <rcl_send_response>:
 8015fcc:	b160      	cbz	r0, 8015fe8 <rcl_send_response+0x1c>
 8015fce:	6800      	ldr	r0, [r0, #0]
 8015fd0:	b150      	cbz	r0, 8015fe8 <rcl_send_response+0x1c>
 8015fd2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8015fd4:	b140      	cbz	r0, 8015fe8 <rcl_send_response+0x1c>
 8015fd6:	b151      	cbz	r1, 8015fee <rcl_send_response+0x22>
 8015fd8:	b510      	push	{r4, lr}
 8015fda:	b152      	cbz	r2, 8015ff2 <rcl_send_response+0x26>
 8015fdc:	f002 f84a 	bl	8018074 <rmw_send_response>
 8015fe0:	3800      	subs	r0, #0
 8015fe2:	bf18      	it	ne
 8015fe4:	2001      	movne	r0, #1
 8015fe6:	bd10      	pop	{r4, pc}
 8015fe8:	f44f 7016 	mov.w	r0, #600	; 0x258
 8015fec:	4770      	bx	lr
 8015fee:	200b      	movs	r0, #11
 8015ff0:	4770      	bx	lr
 8015ff2:	200b      	movs	r0, #11
 8015ff4:	bd10      	pop	{r4, pc}
 8015ff6:	bf00      	nop

08015ff8 <rcl_get_system_time>:
 8015ff8:	4608      	mov	r0, r1
 8015ffa:	f7f9 bb15 	b.w	800f628 <rcutils_system_time_now>
 8015ffe:	bf00      	nop

08016000 <rcl_get_steady_time>:
 8016000:	4608      	mov	r0, r1
 8016002:	f7f9 bb39 	b.w	800f678 <rcutils_steady_time_now>
 8016006:	bf00      	nop

08016008 <rcl_get_ros_time>:
 8016008:	7a03      	ldrb	r3, [r0, #8]
 801600a:	b510      	push	{r4, lr}
 801600c:	460c      	mov	r4, r1
 801600e:	b133      	cbz	r3, 801601e <rcl_get_ros_time+0x16>
 8016010:	2105      	movs	r1, #5
 8016012:	f001 fafd 	bl	8017610 <__atomic_load_8>
 8016016:	e9c4 0100 	strd	r0, r1, [r4]
 801601a:	2000      	movs	r0, #0
 801601c:	bd10      	pop	{r4, pc}
 801601e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016022:	4608      	mov	r0, r1
 8016024:	f7f9 bb00 	b.w	800f628 <rcutils_system_time_now>

08016028 <rcl_clock_init>:
 8016028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801602c:	4606      	mov	r6, r0
 801602e:	4610      	mov	r0, r2
 8016030:	4614      	mov	r4, r2
 8016032:	460d      	mov	r5, r1
 8016034:	f7f9 f8b8 	bl	800f1a8 <rcutils_allocator_is_valid>
 8016038:	b128      	cbz	r0, 8016046 <rcl_clock_init+0x1e>
 801603a:	2e03      	cmp	r6, #3
 801603c:	d803      	bhi.n	8016046 <rcl_clock_init+0x1e>
 801603e:	e8df f006 	tbb	[pc, r6]
 8016042:	2c1b      	.short	0x2c1b
 8016044:	0554      	.short	0x0554
 8016046:	200b      	movs	r0, #11
 8016048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801604c:	2d00      	cmp	r5, #0
 801604e:	d0fa      	beq.n	8016046 <rcl_clock_init+0x1e>
 8016050:	2c00      	cmp	r4, #0
 8016052:	d0f8      	beq.n	8016046 <rcl_clock_init+0x1e>
 8016054:	2600      	movs	r6, #0
 8016056:	702e      	strb	r6, [r5, #0]
 8016058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801605a:	f105 0714 	add.w	r7, r5, #20
 801605e:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8016062:	612e      	str	r6, [r5, #16]
 8016064:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016066:	6823      	ldr	r3, [r4, #0]
 8016068:	603b      	str	r3, [r7, #0]
 801606a:	2303      	movs	r3, #3
 801606c:	4a2b      	ldr	r2, [pc, #172]	; (801611c <rcl_clock_init+0xf4>)
 801606e:	702b      	strb	r3, [r5, #0]
 8016070:	4630      	mov	r0, r6
 8016072:	60ea      	str	r2, [r5, #12]
 8016074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016078:	2d00      	cmp	r5, #0
 801607a:	d0e4      	beq.n	8016046 <rcl_clock_init+0x1e>
 801607c:	2600      	movs	r6, #0
 801607e:	702e      	strb	r6, [r5, #0]
 8016080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016082:	f105 0714 	add.w	r7, r5, #20
 8016086:	e9c5 6601 	strd	r6, r6, [r5, #4]
 801608a:	e9c5 6603 	strd	r6, r6, [r5, #12]
 801608e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016090:	6823      	ldr	r3, [r4, #0]
 8016092:	603b      	str	r3, [r7, #0]
 8016094:	4630      	mov	r0, r6
 8016096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801609a:	2d00      	cmp	r5, #0
 801609c:	d0d3      	beq.n	8016046 <rcl_clock_init+0x1e>
 801609e:	2c00      	cmp	r4, #0
 80160a0:	d0d1      	beq.n	8016046 <rcl_clock_init+0x1e>
 80160a2:	2600      	movs	r6, #0
 80160a4:	702e      	strb	r6, [r5, #0]
 80160a6:	46a4      	mov	ip, r4
 80160a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80160ac:	f105 0714 	add.w	r7, r5, #20
 80160b0:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80160b4:	e9c5 6603 	strd	r6, r6, [r5, #12]
 80160b8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80160ba:	f8dc 3000 	ldr.w	r3, [ip]
 80160be:	603b      	str	r3, [r7, #0]
 80160c0:	6921      	ldr	r1, [r4, #16]
 80160c2:	6823      	ldr	r3, [r4, #0]
 80160c4:	2010      	movs	r0, #16
 80160c6:	4798      	blx	r3
 80160c8:	4603      	mov	r3, r0
 80160ca:	6128      	str	r0, [r5, #16]
 80160cc:	b318      	cbz	r0, 8016116 <rcl_clock_init+0xee>
 80160ce:	f04f 0800 	mov.w	r8, #0
 80160d2:	f04f 0900 	mov.w	r9, #0
 80160d6:	7206      	strb	r6, [r0, #8]
 80160d8:	e9c3 8900 	strd	r8, r9, [r3]
 80160dc:	2301      	movs	r3, #1
 80160de:	4a10      	ldr	r2, [pc, #64]	; (8016120 <rcl_clock_init+0xf8>)
 80160e0:	702b      	strb	r3, [r5, #0]
 80160e2:	4630      	mov	r0, r6
 80160e4:	60ea      	str	r2, [r5, #12]
 80160e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160ea:	2d00      	cmp	r5, #0
 80160ec:	d0ab      	beq.n	8016046 <rcl_clock_init+0x1e>
 80160ee:	2c00      	cmp	r4, #0
 80160f0:	d0a9      	beq.n	8016046 <rcl_clock_init+0x1e>
 80160f2:	2600      	movs	r6, #0
 80160f4:	702e      	strb	r6, [r5, #0]
 80160f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80160f8:	f105 0714 	add.w	r7, r5, #20
 80160fc:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8016100:	612e      	str	r6, [r5, #16]
 8016102:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016104:	6823      	ldr	r3, [r4, #0]
 8016106:	603b      	str	r3, [r7, #0]
 8016108:	2302      	movs	r3, #2
 801610a:	4a06      	ldr	r2, [pc, #24]	; (8016124 <rcl_clock_init+0xfc>)
 801610c:	702b      	strb	r3, [r5, #0]
 801610e:	4630      	mov	r0, r6
 8016110:	60ea      	str	r2, [r5, #12]
 8016112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016116:	200a      	movs	r0, #10
 8016118:	e796      	b.n	8016048 <rcl_clock_init+0x20>
 801611a:	bf00      	nop
 801611c:	08016001 	.word	0x08016001
 8016120:	08016009 	.word	0x08016009
 8016124:	08015ff9 	.word	0x08015ff9

08016128 <rcl_clock_get_now>:
 8016128:	b140      	cbz	r0, 801613c <rcl_clock_get_now+0x14>
 801612a:	b139      	cbz	r1, 801613c <rcl_clock_get_now+0x14>
 801612c:	7803      	ldrb	r3, [r0, #0]
 801612e:	b11b      	cbz	r3, 8016138 <rcl_clock_get_now+0x10>
 8016130:	68c3      	ldr	r3, [r0, #12]
 8016132:	b10b      	cbz	r3, 8016138 <rcl_clock_get_now+0x10>
 8016134:	6900      	ldr	r0, [r0, #16]
 8016136:	4718      	bx	r3
 8016138:	2001      	movs	r0, #1
 801613a:	4770      	bx	lr
 801613c:	200b      	movs	r0, #11
 801613e:	4770      	bx	lr

08016140 <rcl_clock_add_jump_callback>:
 8016140:	b082      	sub	sp, #8
 8016142:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016146:	a908      	add	r1, sp, #32
 8016148:	e881 000c 	stmia.w	r1, {r2, r3}
 801614c:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	; 0x38
 8016150:	b340      	cbz	r0, 80161a4 <rcl_clock_add_jump_callback+0x64>
 8016152:	4604      	mov	r4, r0
 8016154:	3014      	adds	r0, #20
 8016156:	f7f9 f827 	bl	800f1a8 <rcutils_allocator_is_valid>
 801615a:	b318      	cbz	r0, 80161a4 <rcl_clock_add_jump_callback+0x64>
 801615c:	b315      	cbz	r5, 80161a4 <rcl_clock_add_jump_callback+0x64>
 801615e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016162:	2a00      	cmp	r2, #0
 8016164:	f173 0300 	sbcs.w	r3, r3, #0
 8016168:	db1c      	blt.n	80161a4 <rcl_clock_add_jump_callback+0x64>
 801616a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801616e:	2a01      	cmp	r2, #1
 8016170:	f173 0300 	sbcs.w	r3, r3, #0
 8016174:	da16      	bge.n	80161a4 <rcl_clock_add_jump_callback+0x64>
 8016176:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 801617a:	2f00      	cmp	r7, #0
 801617c:	d03e      	beq.n	80161fc <rcl_clock_add_jump_callback+0xbc>
 801617e:	2300      	movs	r3, #0
 8016180:	f100 0220 	add.w	r2, r0, #32
 8016184:	e003      	b.n	801618e <rcl_clock_add_jump_callback+0x4e>
 8016186:	42bb      	cmp	r3, r7
 8016188:	f102 0228 	add.w	r2, r2, #40	; 0x28
 801618c:	d00f      	beq.n	80161ae <rcl_clock_add_jump_callback+0x6e>
 801618e:	f852 1c20 	ldr.w	r1, [r2, #-32]
 8016192:	42a9      	cmp	r1, r5
 8016194:	f103 0301 	add.w	r3, r3, #1
 8016198:	d1f5      	bne.n	8016186 <rcl_clock_add_jump_callback+0x46>
 801619a:	6811      	ldr	r1, [r2, #0]
 801619c:	42b1      	cmp	r1, r6
 801619e:	d1f2      	bne.n	8016186 <rcl_clock_add_jump_callback+0x46>
 80161a0:	2001      	movs	r0, #1
 80161a2:	e000      	b.n	80161a6 <rcl_clock_add_jump_callback+0x66>
 80161a4:	200b      	movs	r0, #11
 80161a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161aa:	b002      	add	sp, #8
 80161ac:	4770      	bx	lr
 80161ae:	3301      	adds	r3, #1
 80161b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80161b4:	00d9      	lsls	r1, r3, #3
 80161b6:	69e3      	ldr	r3, [r4, #28]
 80161b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80161ba:	4798      	blx	r3
 80161bc:	4684      	mov	ip, r0
 80161be:	b1d8      	cbz	r0, 80161f8 <rcl_clock_add_jump_callback+0xb8>
 80161c0:	af08      	add	r7, sp, #32
 80161c2:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80161c6:	6060      	str	r0, [r4, #4]
 80161c8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80161ca:	eb0e 098e 	add.w	r9, lr, lr, lsl #2
 80161ce:	eb0c 08c9 	add.w	r8, ip, r9, lsl #3
 80161d2:	f84c 5039 	str.w	r5, [ip, r9, lsl #3]
 80161d6:	f108 0508 	add.w	r5, r8, #8
 80161da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80161dc:	e897 0003 	ldmia.w	r7, {r0, r1}
 80161e0:	f10e 0301 	add.w	r3, lr, #1
 80161e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80161e8:	f8c8 6020 	str.w	r6, [r8, #32]
 80161ec:	60a3      	str	r3, [r4, #8]
 80161ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161f2:	2000      	movs	r0, #0
 80161f4:	b002      	add	sp, #8
 80161f6:	4770      	bx	lr
 80161f8:	200a      	movs	r0, #10
 80161fa:	e7d4      	b.n	80161a6 <rcl_clock_add_jump_callback+0x66>
 80161fc:	2128      	movs	r1, #40	; 0x28
 80161fe:	e7da      	b.n	80161b6 <rcl_clock_add_jump_callback+0x76>

08016200 <rcl_clock_remove_jump_callback>:
 8016200:	2800      	cmp	r0, #0
 8016202:	d057      	beq.n	80162b4 <rcl_clock_remove_jump_callback+0xb4>
 8016204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016208:	4607      	mov	r7, r0
 801620a:	3014      	adds	r0, #20
 801620c:	460c      	mov	r4, r1
 801620e:	4615      	mov	r5, r2
 8016210:	f7f8 ffca 	bl	800f1a8 <rcutils_allocator_is_valid>
 8016214:	2800      	cmp	r0, #0
 8016216:	d03a      	beq.n	801628e <rcl_clock_remove_jump_callback+0x8e>
 8016218:	2c00      	cmp	r4, #0
 801621a:	d038      	beq.n	801628e <rcl_clock_remove_jump_callback+0x8e>
 801621c:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8016220:	f1b8 0f00 	cmp.w	r8, #0
 8016224:	d00c      	beq.n	8016240 <rcl_clock_remove_jump_callback+0x40>
 8016226:	f8d7 e004 	ldr.w	lr, [r7, #4]
 801622a:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
 801622e:	4676      	mov	r6, lr
 8016230:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
 8016234:	6833      	ldr	r3, [r6, #0]
 8016236:	42a3      	cmp	r3, r4
 8016238:	d005      	beq.n	8016246 <rcl_clock_remove_jump_callback+0x46>
 801623a:	3628      	adds	r6, #40	; 0x28
 801623c:	45b4      	cmp	ip, r6
 801623e:	d1f9      	bne.n	8016234 <rcl_clock_remove_jump_callback+0x34>
 8016240:	2001      	movs	r0, #1
 8016242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016246:	6a33      	ldr	r3, [r6, #32]
 8016248:	3628      	adds	r6, #40	; 0x28
 801624a:	4566      	cmp	r6, ip
 801624c:	d02a      	beq.n	80162a4 <rcl_clock_remove_jump_callback+0xa4>
 801624e:	42ab      	cmp	r3, r5
 8016250:	d1f0      	bne.n	8016234 <rcl_clock_remove_jump_callback+0x34>
 8016252:	4635      	mov	r5, r6
 8016254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016256:	f1a6 0428 	sub.w	r4, r6, #40	; 0x28
 801625a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801625c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801625e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016260:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016264:	3628      	adds	r6, #40	; 0x28
 8016266:	4566      	cmp	r6, ip
 8016268:	e884 0003 	stmia.w	r4, {r0, r1}
 801626c:	d1f1      	bne.n	8016252 <rcl_clock_remove_jump_callback+0x52>
 801626e:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8016272:	60bc      	str	r4, [r7, #8]
 8016274:	b174      	cbz	r4, 8016294 <rcl_clock_remove_jump_callback+0x94>
 8016276:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801627a:	69fb      	ldr	r3, [r7, #28]
 801627c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801627e:	00e1      	lsls	r1, r4, #3
 8016280:	4670      	mov	r0, lr
 8016282:	4798      	blx	r3
 8016284:	b1c0      	cbz	r0, 80162b8 <rcl_clock_remove_jump_callback+0xb8>
 8016286:	6078      	str	r0, [r7, #4]
 8016288:	2000      	movs	r0, #0
 801628a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801628e:	200b      	movs	r0, #11
 8016290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016294:	4670      	mov	r0, lr
 8016296:	69bb      	ldr	r3, [r7, #24]
 8016298:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801629a:	4798      	blx	r3
 801629c:	607c      	str	r4, [r7, #4]
 801629e:	4620      	mov	r0, r4
 80162a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162a4:	42ab      	cmp	r3, r5
 80162a6:	d1cb      	bne.n	8016240 <rcl_clock_remove_jump_callback+0x40>
 80162a8:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 80162ac:	60bc      	str	r4, [r7, #8]
 80162ae:	2c00      	cmp	r4, #0
 80162b0:	d1e1      	bne.n	8016276 <rcl_clock_remove_jump_callback+0x76>
 80162b2:	e7ef      	b.n	8016294 <rcl_clock_remove_jump_callback+0x94>
 80162b4:	200b      	movs	r0, #11
 80162b6:	4770      	bx	lr
 80162b8:	200a      	movs	r0, #10
 80162ba:	e7e9      	b.n	8016290 <rcl_clock_remove_jump_callback+0x90>

080162bc <_rcl_timer_time_jump>:
 80162bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162c0:	4682      	mov	sl, r0
 80162c2:	b087      	sub	sp, #28
 80162c4:	4614      	mov	r4, r2
 80162c6:	b131      	cbz	r1, 80162d6 <_rcl_timer_time_jump+0x1a>
 80162c8:	7803      	ldrb	r3, [r0, #0]
 80162ca:	3b02      	subs	r3, #2
 80162cc:	2b01      	cmp	r3, #1
 80162ce:	d944      	bls.n	801635a <_rcl_timer_time_jump+0x9e>
 80162d0:	b007      	add	sp, #28
 80162d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162d6:	6813      	ldr	r3, [r2, #0]
 80162d8:	a904      	add	r1, sp, #16
 80162da:	6818      	ldr	r0, [r3, #0]
 80162dc:	f7ff ff24 	bl	8016128 <rcl_clock_get_now>
 80162e0:	2800      	cmp	r0, #0
 80162e2:	d1f5      	bne.n	80162d0 <_rcl_timer_time_jump+0x14>
 80162e4:	6820      	ldr	r0, [r4, #0]
 80162e6:	2105      	movs	r1, #5
 80162e8:	3020      	adds	r0, #32
 80162ea:	f001 f991 	bl	8017610 <__atomic_load_8>
 80162ee:	4602      	mov	r2, r0
 80162f0:	6820      	ldr	r0, [r4, #0]
 80162f2:	460b      	mov	r3, r1
 80162f4:	3028      	adds	r0, #40	; 0x28
 80162f6:	2105      	movs	r1, #5
 80162f8:	4690      	mov	r8, r2
 80162fa:	4699      	mov	r9, r3
 80162fc:	f001 f988 	bl	8017610 <__atomic_load_8>
 8016300:	4602      	mov	r2, r0
 8016302:	6820      	ldr	r0, [r4, #0]
 8016304:	460b      	mov	r3, r1
 8016306:	3018      	adds	r0, #24
 8016308:	2105      	movs	r1, #5
 801630a:	461f      	mov	r7, r3
 801630c:	4616      	mov	r6, r2
 801630e:	f001 f97f 	bl	8017610 <__atomic_load_8>
 8016312:	f89a 3000 	ldrb.w	r3, [sl]
 8016316:	9103      	str	r1, [sp, #12]
 8016318:	3b02      	subs	r3, #2
 801631a:	2b01      	cmp	r3, #1
 801631c:	4605      	mov	r5, r0
 801631e:	d93a      	bls.n	8016396 <_rcl_timer_time_jump+0xda>
 8016320:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016324:	45b2      	cmp	sl, r6
 8016326:	eb7b 0307 	sbcs.w	r3, fp, r7
 801632a:	da64      	bge.n	80163f6 <_rcl_timer_time_jump+0x13a>
 801632c:	45c2      	cmp	sl, r8
 801632e:	eb7b 0309 	sbcs.w	r3, fp, r9
 8016332:	dacd      	bge.n	80162d0 <_rcl_timer_time_jump+0x14>
 8016334:	6820      	ldr	r0, [r4, #0]
 8016336:	eb15 020a 	adds.w	r2, r5, sl
 801633a:	f04f 0505 	mov.w	r5, #5
 801633e:	eb41 030b 	adc.w	r3, r1, fp
 8016342:	3028      	adds	r0, #40	; 0x28
 8016344:	9500      	str	r5, [sp, #0]
 8016346:	f001 f997 	bl	8017678 <__atomic_store_8>
 801634a:	6820      	ldr	r0, [r4, #0]
 801634c:	9500      	str	r5, [sp, #0]
 801634e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016352:	3020      	adds	r0, #32
 8016354:	f001 f990 	bl	8017678 <__atomic_store_8>
 8016358:	e7ba      	b.n	80162d0 <_rcl_timer_time_jump+0x14>
 801635a:	6813      	ldr	r3, [r2, #0]
 801635c:	a904      	add	r1, sp, #16
 801635e:	6818      	ldr	r0, [r3, #0]
 8016360:	f7ff fee2 	bl	8016128 <rcl_clock_get_now>
 8016364:	2800      	cmp	r0, #0
 8016366:	d1b3      	bne.n	80162d0 <_rcl_timer_time_jump+0x14>
 8016368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801636c:	4313      	orrs	r3, r2
 801636e:	d0af      	beq.n	80162d0 <_rcl_timer_time_jump+0x14>
 8016370:	6820      	ldr	r0, [r4, #0]
 8016372:	2105      	movs	r1, #5
 8016374:	3028      	adds	r0, #40	; 0x28
 8016376:	f001 f94b 	bl	8017610 <__atomic_load_8>
 801637a:	9a04      	ldr	r2, [sp, #16]
 801637c:	6823      	ldr	r3, [r4, #0]
 801637e:	9e05      	ldr	r6, [sp, #20]
 8016380:	1a82      	subs	r2, r0, r2
 8016382:	f04f 0405 	mov.w	r4, #5
 8016386:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801638a:	9400      	str	r4, [sp, #0]
 801638c:	eb61 0306 	sbc.w	r3, r1, r6
 8016390:	f001 f972 	bl	8017678 <__atomic_store_8>
 8016394:	e79c      	b.n	80162d0 <_rcl_timer_time_jump+0x14>
 8016396:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801639a:	4313      	orrs	r3, r2
 801639c:	d098      	beq.n	80162d0 <_rcl_timer_time_jump+0x14>
 801639e:	6820      	ldr	r0, [r4, #0]
 80163a0:	f04f 0805 	mov.w	r8, #5
 80163a4:	2300      	movs	r3, #0
 80163a6:	3030      	adds	r0, #48	; 0x30
 80163a8:	f8cd 8000 	str.w	r8, [sp]
 80163ac:	2200      	movs	r2, #0
 80163ae:	f001 f997 	bl	80176e0 <__atomic_exchange_8>
 80163b2:	4606      	mov	r6, r0
 80163b4:	460f      	mov	r7, r1
 80163b6:	ea56 0307 	orrs.w	r3, r6, r7
 80163ba:	d089      	beq.n	80162d0 <_rcl_timer_time_jump+0x14>
 80163bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80163c0:	1b92      	subs	r2, r2, r6
 80163c2:	eb63 0301 	sbc.w	r3, r3, r1
 80163c6:	9903      	ldr	r1, [sp, #12]
 80163c8:	6820      	ldr	r0, [r4, #0]
 80163ca:	f8cd 8000 	str.w	r8, [sp]
 80163ce:	1952      	adds	r2, r2, r5
 80163d0:	eb43 0101 	adc.w	r1, r3, r1
 80163d4:	460b      	mov	r3, r1
 80163d6:	3028      	adds	r0, #40	; 0x28
 80163d8:	f001 f94e 	bl	8017678 <__atomic_store_8>
 80163dc:	9a04      	ldr	r2, [sp, #16]
 80163de:	6820      	ldr	r0, [r4, #0]
 80163e0:	9b05      	ldr	r3, [sp, #20]
 80163e2:	f8cd 8000 	str.w	r8, [sp]
 80163e6:	1b92      	subs	r2, r2, r6
 80163e8:	f100 0020 	add.w	r0, r0, #32
 80163ec:	eb63 0307 	sbc.w	r3, r3, r7
 80163f0:	f001 f942 	bl	8017678 <__atomic_store_8>
 80163f4:	e76c      	b.n	80162d0 <_rcl_timer_time_jump+0x14>
 80163f6:	6820      	ldr	r0, [r4, #0]
 80163f8:	3008      	adds	r0, #8
 80163fa:	f002 ffb9 	bl	8019370 <rcl_trigger_guard_condition>
 80163fe:	e767      	b.n	80162d0 <_rcl_timer_time_jump+0x14>

08016400 <rcl_get_zero_initialized_timer>:
 8016400:	4b01      	ldr	r3, [pc, #4]	; (8016408 <rcl_get_zero_initialized_timer+0x8>)
 8016402:	6818      	ldr	r0, [r3, #0]
 8016404:	4770      	bx	lr
 8016406:	bf00      	nop
 8016408:	0801f228 	.word	0x0801f228

0801640c <rcl_timer_init>:
 801640c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016410:	b0ad      	sub	sp, #180	; 0xb4
 8016412:	4604      	mov	r4, r0
 8016414:	a839      	add	r0, sp, #228	; 0xe4
 8016416:	460d      	mov	r5, r1
 8016418:	4690      	mov	r8, r2
 801641a:	f7f8 fec5 	bl	800f1a8 <rcutils_allocator_is_valid>
 801641e:	2800      	cmp	r0, #0
 8016420:	d072      	beq.n	8016508 <rcl_timer_init+0xfc>
 8016422:	2c00      	cmp	r4, #0
 8016424:	d070      	beq.n	8016508 <rcl_timer_init+0xfc>
 8016426:	2d00      	cmp	r5, #0
 8016428:	d06e      	beq.n	8016508 <rcl_timer_init+0xfc>
 801642a:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 801642e:	2a00      	cmp	r2, #0
 8016430:	f173 0300 	sbcs.w	r3, r3, #0
 8016434:	db68      	blt.n	8016508 <rcl_timer_init+0xfc>
 8016436:	6823      	ldr	r3, [r4, #0]
 8016438:	b12b      	cbz	r3, 8016446 <rcl_timer_init+0x3a>
 801643a:	f04f 0a64 	mov.w	sl, #100	; 0x64
 801643e:	4650      	mov	r0, sl
 8016440:	b02d      	add	sp, #180	; 0xb4
 8016442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016446:	a90a      	add	r1, sp, #40	; 0x28
 8016448:	4628      	mov	r0, r5
 801644a:	f7ff fe6d 	bl	8016128 <rcl_clock_get_now>
 801644e:	4682      	mov	sl, r0
 8016450:	2800      	cmp	r0, #0
 8016452:	d1f4      	bne.n	801643e <rcl_timer_init+0x32>
 8016454:	f10d 0920 	add.w	r9, sp, #32
 8016458:	4648      	mov	r0, r9
 801645a:	e9cd 5818 	strd	r5, r8, [sp, #96]	; 0x60
 801645e:	f002 fe8b 	bl	8019178 <rcl_get_zero_initialized_guard_condition>
 8016462:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016466:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 801646a:	f10d 0934 	add.w	r9, sp, #52	; 0x34
 801646e:	e88b 0003 	stmia.w	fp, {r0, r1}
 8016472:	4648      	mov	r0, r9
 8016474:	f002 ff62 	bl	801933c <rcl_guard_condition_get_default_options>
 8016478:	ab0f      	add	r3, sp, #60	; 0x3c
 801647a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801647e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016482:	4641      	mov	r1, r8
 8016484:	e899 000c 	ldmia.w	r9, {r2, r3}
 8016488:	4658      	mov	r0, fp
 801648a:	f002 fe7f 	bl	801918c <rcl_guard_condition_init>
 801648e:	4682      	mov	sl, r0
 8016490:	2800      	cmp	r0, #0
 8016492:	d1d4      	bne.n	801643e <rcl_timer_init+0x32>
 8016494:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016496:	f893 c000 	ldrb.w	ip, [r3]
 801649a:	f1bc 0f01 	cmp.w	ip, #1
 801649e:	d039      	beq.n	8016514 <rcl_timer_init+0x108>
 80164a0:	f10d 0ce4 	add.w	ip, sp, #228	; 0xe4
 80164a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80164a8:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 80164ac:	9e36      	ldr	r6, [sp, #216]	; 0xd8
 80164ae:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 80164b2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80164b6:	eb18 0606 	adds.w	r6, r8, r6
 80164ba:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80164bc:	9606      	str	r6, [sp, #24]
 80164be:	e9dd 6736 	ldrd	r6, r7, [sp, #216]	; 0xd8
 80164c2:	eb49 0303 	adc.w	r3, r9, r3
 80164c6:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 80164c8:	9307      	str	r3, [sp, #28]
 80164ca:	921c      	str	r2, [sp, #112]	; 0x70
 80164cc:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
 80164d0:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80164d4:	f8dc 3000 	ldr.w	r3, [ip]
 80164d8:	f8ce 3000 	str.w	r3, [lr]
 80164dc:	2000      	movs	r0, #0
 80164de:	2100      	movs	r1, #0
 80164e0:	2200      	movs	r2, #0
 80164e2:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
 80164e6:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80164e8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80164ea:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
 80164ee:	2050      	movs	r0, #80	; 0x50
 80164f0:	e9cd 6722 	strd	r6, r7, [sp, #136]	; 0x88
 80164f4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 80164f8:	4798      	blx	r3
 80164fa:	6020      	str	r0, [r4, #0]
 80164fc:	b360      	cbz	r0, 8016558 <rcl_timer_init+0x14c>
 80164fe:	2250      	movs	r2, #80	; 0x50
 8016500:	a918      	add	r1, sp, #96	; 0x60
 8016502:	f003 f93f 	bl	8019784 <memcpy>
 8016506:	e79a      	b.n	801643e <rcl_timer_init+0x32>
 8016508:	f04f 0a0b 	mov.w	sl, #11
 801650c:	4650      	mov	r0, sl
 801650e:	b02d      	add	sp, #180	; 0xb4
 8016510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016514:	2201      	movs	r2, #1
 8016516:	2300      	movs	r3, #0
 8016518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801651c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016520:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016524:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8016528:	ab14      	add	r3, sp, #80	; 0x50
 801652a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801652c:	f88d c048 	strb.w	ip, [sp, #72]	; 0x48
 8016530:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8016570 <rcl_timer_init+0x164>
 8016534:	9405      	str	r4, [sp, #20]
 8016536:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801653a:	f8cd c010 	str.w	ip, [sp, #16]
 801653e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016542:	4628      	mov	r0, r5
 8016544:	f7ff fdfc 	bl	8016140 <rcl_clock_add_jump_callback>
 8016548:	4680      	mov	r8, r0
 801654a:	2800      	cmp	r0, #0
 801654c:	d0a8      	beq.n	80164a0 <rcl_timer_init+0x94>
 801654e:	4658      	mov	r0, fp
 8016550:	f002 fece 	bl	80192f0 <rcl_guard_condition_fini>
 8016554:	46c2      	mov	sl, r8
 8016556:	e772      	b.n	801643e <rcl_timer_init+0x32>
 8016558:	4658      	mov	r0, fp
 801655a:	f002 fec9 	bl	80192f0 <rcl_guard_condition_fini>
 801655e:	4904      	ldr	r1, [pc, #16]	; (8016570 <rcl_timer_init+0x164>)
 8016560:	4622      	mov	r2, r4
 8016562:	4628      	mov	r0, r5
 8016564:	f7ff fe4c 	bl	8016200 <rcl_clock_remove_jump_callback>
 8016568:	f04f 0a0a 	mov.w	sl, #10
 801656c:	e767      	b.n	801643e <rcl_timer_init+0x32>
 801656e:	bf00      	nop
 8016570:	080162bd 	.word	0x080162bd

08016574 <rcl_timer_call>:
 8016574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016578:	b08b      	sub	sp, #44	; 0x2c
 801657a:	2800      	cmp	r0, #0
 801657c:	d06e      	beq.n	801665c <rcl_timer_call+0xe8>
 801657e:	6803      	ldr	r3, [r0, #0]
 8016580:	f3bf 8f5b 	dmb	ish
 8016584:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016588:	f3bf 8f5b 	dmb	ish
 801658c:	4604      	mov	r4, r0
 801658e:	2b00      	cmp	r3, #0
 8016590:	d159      	bne.n	8016646 <rcl_timer_call+0xd2>
 8016592:	6803      	ldr	r3, [r0, #0]
 8016594:	a908      	add	r1, sp, #32
 8016596:	6818      	ldr	r0, [r3, #0]
 8016598:	f7ff fdc6 	bl	8016128 <rcl_clock_get_now>
 801659c:	4605      	mov	r5, r0
 801659e:	2800      	cmp	r0, #0
 80165a0:	d14d      	bne.n	801663e <rcl_timer_call+0xca>
 80165a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80165a6:	2a00      	cmp	r2, #0
 80165a8:	f173 0100 	sbcs.w	r1, r3, #0
 80165ac:	db51      	blt.n	8016652 <rcl_timer_call+0xde>
 80165ae:	6820      	ldr	r0, [r4, #0]
 80165b0:	2605      	movs	r6, #5
 80165b2:	9600      	str	r6, [sp, #0]
 80165b4:	3020      	adds	r0, #32
 80165b6:	f001 f893 	bl	80176e0 <__atomic_exchange_8>
 80165ba:	6822      	ldr	r2, [r4, #0]
 80165bc:	f3bf 8f5b 	dmb	ish
 80165c0:	4682      	mov	sl, r0
 80165c2:	f8d2 b010 	ldr.w	fp, [r2, #16]
 80165c6:	f3bf 8f5b 	dmb	ish
 80165ca:	6820      	ldr	r0, [r4, #0]
 80165cc:	460b      	mov	r3, r1
 80165ce:	3028      	adds	r0, #40	; 0x28
 80165d0:	4631      	mov	r1, r6
 80165d2:	9305      	str	r3, [sp, #20]
 80165d4:	f001 f81c 	bl	8017610 <__atomic_load_8>
 80165d8:	4603      	mov	r3, r0
 80165da:	6820      	ldr	r0, [r4, #0]
 80165dc:	460a      	mov	r2, r1
 80165de:	3018      	adds	r0, #24
 80165e0:	4631      	mov	r1, r6
 80165e2:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80165e6:	f001 f813 	bl	8017610 <__atomic_load_8>
 80165ea:	9b04      	ldr	r3, [sp, #16]
 80165ec:	9a03      	ldr	r2, [sp, #12]
 80165ee:	4606      	mov	r6, r0
 80165f0:	460f      	mov	r7, r1
 80165f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80165f6:	eb13 0806 	adds.w	r8, r3, r6
 80165fa:	eb42 0907 	adc.w	r9, r2, r7
 80165fe:	4580      	cmp	r8, r0
 8016600:	eb79 0301 	sbcs.w	r3, r9, r1
 8016604:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016608:	460a      	mov	r2, r1
 801660a:	da04      	bge.n	8016616 <rcl_timer_call+0xa2>
 801660c:	ea56 0307 	orrs.w	r3, r6, r7
 8016610:	d129      	bne.n	8016666 <rcl_timer_call+0xf2>
 8016612:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8016616:	6820      	ldr	r0, [r4, #0]
 8016618:	2105      	movs	r1, #5
 801661a:	4642      	mov	r2, r8
 801661c:	464b      	mov	r3, r9
 801661e:	3028      	adds	r0, #40	; 0x28
 8016620:	9100      	str	r1, [sp, #0]
 8016622:	f001 f829 	bl	8017678 <__atomic_store_8>
 8016626:	f1bb 0f00 	cmp.w	fp, #0
 801662a:	d008      	beq.n	801663e <rcl_timer_call+0xca>
 801662c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016630:	9905      	ldr	r1, [sp, #20]
 8016632:	ebb2 020a 	subs.w	r2, r2, sl
 8016636:	4620      	mov	r0, r4
 8016638:	eb63 0301 	sbc.w	r3, r3, r1
 801663c:	47d8      	blx	fp
 801663e:	4628      	mov	r0, r5
 8016640:	b00b      	add	sp, #44	; 0x2c
 8016642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016646:	f240 3521 	movw	r5, #801	; 0x321
 801664a:	4628      	mov	r0, r5
 801664c:	b00b      	add	sp, #44	; 0x2c
 801664e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016652:	2501      	movs	r5, #1
 8016654:	4628      	mov	r0, r5
 8016656:	b00b      	add	sp, #44	; 0x2c
 8016658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801665c:	250b      	movs	r5, #11
 801665e:	4628      	mov	r0, r5
 8016660:	b00b      	add	sp, #44	; 0x2c
 8016662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016666:	ebb0 0008 	subs.w	r0, r0, r8
 801666a:	eb62 0109 	sbc.w	r1, r2, r9
 801666e:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8016672:	463b      	mov	r3, r7
 8016674:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8016678:	4632      	mov	r2, r6
 801667a:	f7ea fb15 	bl	8000ca8 <__aeabi_ldivmod>
 801667e:	1c43      	adds	r3, r0, #1
 8016680:	f141 0100 	adc.w	r1, r1, #0
 8016684:	fb00 7007 	mla	r0, r0, r7, r7
 8016688:	fb06 0001 	mla	r0, r6, r1, r0
 801668c:	fba3 6706 	umull	r6, r7, r3, r6
 8016690:	4407      	add	r7, r0
 8016692:	eb18 0806 	adds.w	r8, r8, r6
 8016696:	eb49 0907 	adc.w	r9, r9, r7
 801669a:	e7bc      	b.n	8016616 <rcl_timer_call+0xa2>

0801669c <rcl_timer_is_ready>:
 801669c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166a0:	b082      	sub	sp, #8
 80166a2:	b310      	cbz	r0, 80166ea <rcl_timer_is_ready+0x4e>
 80166a4:	4688      	mov	r8, r1
 80166a6:	b301      	cbz	r1, 80166ea <rcl_timer_is_ready+0x4e>
 80166a8:	6803      	ldr	r3, [r0, #0]
 80166aa:	4604      	mov	r4, r0
 80166ac:	4669      	mov	r1, sp
 80166ae:	6818      	ldr	r0, [r3, #0]
 80166b0:	f7ff fd3a 	bl	8016128 <rcl_clock_get_now>
 80166b4:	4605      	mov	r5, r0
 80166b6:	b118      	cbz	r0, 80166c0 <rcl_timer_is_ready+0x24>
 80166b8:	4628      	mov	r0, r5
 80166ba:	b002      	add	sp, #8
 80166bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166c0:	6820      	ldr	r0, [r4, #0]
 80166c2:	2105      	movs	r1, #5
 80166c4:	3028      	adds	r0, #40	; 0x28
 80166c6:	f000 ffa3 	bl	8017610 <__atomic_load_8>
 80166ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 80166ce:	1ac6      	subs	r6, r0, r3
 80166d0:	eb61 0702 	sbc.w	r7, r1, r2
 80166d4:	2e01      	cmp	r6, #1
 80166d6:	f177 0300 	sbcs.w	r3, r7, #0
 80166da:	db0b      	blt.n	80166f4 <rcl_timer_is_ready+0x58>
 80166dc:	462b      	mov	r3, r5
 80166de:	4628      	mov	r0, r5
 80166e0:	f888 3000 	strb.w	r3, [r8]
 80166e4:	b002      	add	sp, #8
 80166e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166ea:	250b      	movs	r5, #11
 80166ec:	4628      	mov	r0, r5
 80166ee:	b002      	add	sp, #8
 80166f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166f4:	6823      	ldr	r3, [r4, #0]
 80166f6:	f3bf 8f5b 	dmb	ish
 80166fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80166fe:	f3bf 8f5b 	dmb	ish
 8016702:	fab3 f383 	clz	r3, r3
 8016706:	095b      	lsrs	r3, r3, #5
 8016708:	e7e9      	b.n	80166de <rcl_timer_is_ready+0x42>
 801670a:	bf00      	nop

0801670c <rcl_timer_get_time_until_next_call>:
 801670c:	b570      	push	{r4, r5, r6, lr}
 801670e:	b082      	sub	sp, #8
 8016710:	b1d8      	cbz	r0, 801674a <rcl_timer_get_time_until_next_call+0x3e>
 8016712:	460d      	mov	r5, r1
 8016714:	b1c9      	cbz	r1, 801674a <rcl_timer_get_time_until_next_call+0x3e>
 8016716:	6803      	ldr	r3, [r0, #0]
 8016718:	4604      	mov	r4, r0
 801671a:	4669      	mov	r1, sp
 801671c:	6818      	ldr	r0, [r3, #0]
 801671e:	f7ff fd03 	bl	8016128 <rcl_clock_get_now>
 8016722:	4606      	mov	r6, r0
 8016724:	b110      	cbz	r0, 801672c <rcl_timer_get_time_until_next_call+0x20>
 8016726:	4630      	mov	r0, r6
 8016728:	b002      	add	sp, #8
 801672a:	bd70      	pop	{r4, r5, r6, pc}
 801672c:	6820      	ldr	r0, [r4, #0]
 801672e:	2105      	movs	r1, #5
 8016730:	3028      	adds	r0, #40	; 0x28
 8016732:	f000 ff6d 	bl	8017610 <__atomic_load_8>
 8016736:	e9dd 3200 	ldrd	r3, r2, [sp]
 801673a:	1ac0      	subs	r0, r0, r3
 801673c:	eb61 0102 	sbc.w	r1, r1, r2
 8016740:	e9c5 0100 	strd	r0, r1, [r5]
 8016744:	4630      	mov	r0, r6
 8016746:	b002      	add	sp, #8
 8016748:	bd70      	pop	{r4, r5, r6, pc}
 801674a:	260b      	movs	r6, #11
 801674c:	4630      	mov	r0, r6
 801674e:	b002      	add	sp, #8
 8016750:	bd70      	pop	{r4, r5, r6, pc}
 8016752:	bf00      	nop

08016754 <rcl_timer_is_canceled>:
 8016754:	b168      	cbz	r0, 8016772 <rcl_timer_is_canceled+0x1e>
 8016756:	b161      	cbz	r1, 8016772 <rcl_timer_is_canceled+0x1e>
 8016758:	6803      	ldr	r3, [r0, #0]
 801675a:	f3bf 8f5b 	dmb	ish
 801675e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016762:	f3bf 8f5b 	dmb	ish
 8016766:	3b00      	subs	r3, #0
 8016768:	bf18      	it	ne
 801676a:	2301      	movne	r3, #1
 801676c:	700b      	strb	r3, [r1, #0]
 801676e:	2000      	movs	r0, #0
 8016770:	4770      	bx	lr
 8016772:	200b      	movs	r0, #11
 8016774:	4770      	bx	lr
 8016776:	bf00      	nop

08016778 <rcl_timer_get_guard_condition>:
 8016778:	b130      	cbz	r0, 8016788 <rcl_timer_get_guard_condition+0x10>
 801677a:	6800      	ldr	r0, [r0, #0]
 801677c:	b120      	cbz	r0, 8016788 <rcl_timer_get_guard_condition+0x10>
 801677e:	68c3      	ldr	r3, [r0, #12]
 8016780:	b10b      	cbz	r3, 8016786 <rcl_timer_get_guard_condition+0xe>
 8016782:	3008      	adds	r0, #8
 8016784:	4770      	bx	lr
 8016786:	4618      	mov	r0, r3
 8016788:	4770      	bx	lr
 801678a:	bf00      	nop

0801678c <rcl_validate_enclave_name_with_size>:
 801678c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801678e:	b0c3      	sub	sp, #268	; 0x10c
 8016790:	b1d0      	cbz	r0, 80167c8 <rcl_validate_enclave_name_with_size+0x3c>
 8016792:	4615      	mov	r5, r2
 8016794:	b1c2      	cbz	r2, 80167c8 <rcl_validate_enclave_name_with_size+0x3c>
 8016796:	461f      	mov	r7, r3
 8016798:	466a      	mov	r2, sp
 801679a:	ab01      	add	r3, sp, #4
 801679c:	460e      	mov	r6, r1
 801679e:	f001 f993 	bl	8017ac8 <rmw_validate_namespace_with_size>
 80167a2:	4604      	mov	r4, r0
 80167a4:	b9e0      	cbnz	r0, 80167e0 <rcl_validate_enclave_name_with_size+0x54>
 80167a6:	9b00      	ldr	r3, [sp, #0]
 80167a8:	b923      	cbnz	r3, 80167b4 <rcl_validate_enclave_name_with_size+0x28>
 80167aa:	2300      	movs	r3, #0
 80167ac:	602b      	str	r3, [r5, #0]
 80167ae:	4620      	mov	r0, r4
 80167b0:	b043      	add	sp, #268	; 0x10c
 80167b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167b4:	2b07      	cmp	r3, #7
 80167b6:	d00b      	beq.n	80167d0 <rcl_validate_enclave_name_with_size+0x44>
 80167b8:	1e5a      	subs	r2, r3, #1
 80167ba:	2a05      	cmp	r2, #5
 80167bc:	d82e      	bhi.n	801681c <rcl_validate_enclave_name_with_size+0x90>
 80167be:	e8df f002 	tbb	[pc, r2]
 80167c2:	211e      	.short	0x211e
 80167c4:	152a2724 	.word	0x152a2724
 80167c8:	240b      	movs	r4, #11
 80167ca:	4620      	mov	r0, r4
 80167cc:	b043      	add	sp, #268	; 0x10c
 80167ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167d0:	2eff      	cmp	r6, #255	; 0xff
 80167d2:	d9ea      	bls.n	80167aa <rcl_validate_enclave_name_with_size+0x1e>
 80167d4:	602b      	str	r3, [r5, #0]
 80167d6:	2f00      	cmp	r7, #0
 80167d8:	d0e9      	beq.n	80167ae <rcl_validate_enclave_name_with_size+0x22>
 80167da:	23fe      	movs	r3, #254	; 0xfe
 80167dc:	603b      	str	r3, [r7, #0]
 80167de:	e7e6      	b.n	80167ae <rcl_validate_enclave_name_with_size+0x22>
 80167e0:	f7fe fdda 	bl	8015398 <rcl_convert_rmw_ret_to_rcl_ret>
 80167e4:	4604      	mov	r4, r0
 80167e6:	4620      	mov	r0, r4
 80167e8:	b043      	add	sp, #268	; 0x10c
 80167ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167ec:	2306      	movs	r3, #6
 80167ee:	602b      	str	r3, [r5, #0]
 80167f0:	2f00      	cmp	r7, #0
 80167f2:	d0dc      	beq.n	80167ae <rcl_validate_enclave_name_with_size+0x22>
 80167f4:	9b01      	ldr	r3, [sp, #4]
 80167f6:	603b      	str	r3, [r7, #0]
 80167f8:	4620      	mov	r0, r4
 80167fa:	b043      	add	sp, #268	; 0x10c
 80167fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167fe:	2301      	movs	r3, #1
 8016800:	602b      	str	r3, [r5, #0]
 8016802:	e7f5      	b.n	80167f0 <rcl_validate_enclave_name_with_size+0x64>
 8016804:	2302      	movs	r3, #2
 8016806:	602b      	str	r3, [r5, #0]
 8016808:	e7f2      	b.n	80167f0 <rcl_validate_enclave_name_with_size+0x64>
 801680a:	2303      	movs	r3, #3
 801680c:	602b      	str	r3, [r5, #0]
 801680e:	e7ef      	b.n	80167f0 <rcl_validate_enclave_name_with_size+0x64>
 8016810:	2304      	movs	r3, #4
 8016812:	602b      	str	r3, [r5, #0]
 8016814:	e7ec      	b.n	80167f0 <rcl_validate_enclave_name_with_size+0x64>
 8016816:	2305      	movs	r3, #5
 8016818:	602b      	str	r3, [r5, #0]
 801681a:	e7e9      	b.n	80167f0 <rcl_validate_enclave_name_with_size+0x64>
 801681c:	4a03      	ldr	r2, [pc, #12]	; (801682c <rcl_validate_enclave_name_with_size+0xa0>)
 801681e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016822:	a802      	add	r0, sp, #8
 8016824:	f001 f8de 	bl	80179e4 <rcutils_snprintf>
 8016828:	2401      	movs	r4, #1
 801682a:	e7c0      	b.n	80167ae <rcl_validate_enclave_name_with_size+0x22>
 801682c:	0801f22c 	.word	0x0801f22c

08016830 <rcl_validate_enclave_name>:
 8016830:	b168      	cbz	r0, 801684e <rcl_validate_enclave_name+0x1e>
 8016832:	b570      	push	{r4, r5, r6, lr}
 8016834:	460d      	mov	r5, r1
 8016836:	4616      	mov	r6, r2
 8016838:	4604      	mov	r4, r0
 801683a:	f7e9 fcd3 	bl	80001e4 <strlen>
 801683e:	4633      	mov	r3, r6
 8016840:	4601      	mov	r1, r0
 8016842:	462a      	mov	r2, r5
 8016844:	4620      	mov	r0, r4
 8016846:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801684a:	f7ff bf9f 	b.w	801678c <rcl_validate_enclave_name_with_size>
 801684e:	200b      	movs	r0, #11
 8016850:	4770      	bx	lr
 8016852:	bf00      	nop

08016854 <rcl_validate_topic_name>:
 8016854:	2800      	cmp	r0, #0
 8016856:	f000 808b 	beq.w	8016970 <rcl_validate_topic_name+0x11c>
 801685a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801685e:	460e      	mov	r6, r1
 8016860:	2900      	cmp	r1, #0
 8016862:	f000 808c 	beq.w	801697e <rcl_validate_topic_name+0x12a>
 8016866:	4617      	mov	r7, r2
 8016868:	4605      	mov	r5, r0
 801686a:	f7e9 fcbb 	bl	80001e4 <strlen>
 801686e:	b1b0      	cbz	r0, 801689e <rcl_validate_topic_name+0x4a>
 8016870:	f895 9000 	ldrb.w	r9, [r5]
 8016874:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8016a24 <rcl_validate_topic_name+0x1d0>
 8016878:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801687c:	f013 0304 	ands.w	r3, r3, #4
 8016880:	d178      	bne.n	8016974 <rcl_validate_topic_name+0x120>
 8016882:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8016886:	f815 2008 	ldrb.w	r2, [r5, r8]
 801688a:	2a2f      	cmp	r2, #47	; 0x2f
 801688c:	d10e      	bne.n	80168ac <rcl_validate_topic_name+0x58>
 801688e:	2202      	movs	r2, #2
 8016890:	6032      	str	r2, [r6, #0]
 8016892:	b36f      	cbz	r7, 80168f0 <rcl_validate_topic_name+0x9c>
 8016894:	f8c7 8000 	str.w	r8, [r7]
 8016898:	4618      	mov	r0, r3
 801689a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801689e:	2301      	movs	r3, #1
 80168a0:	6033      	str	r3, [r6, #0]
 80168a2:	b32f      	cbz	r7, 80168f0 <rcl_validate_topic_name+0x9c>
 80168a4:	2000      	movs	r0, #0
 80168a6:	6038      	str	r0, [r7, #0]
 80168a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168ac:	461c      	mov	r4, r3
 80168ae:	4619      	mov	r1, r3
 80168b0:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 80168b4:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80168b8:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80168bc:	f1be 0f09 	cmp.w	lr, #9
 80168c0:	d946      	bls.n	8016950 <rcl_validate_topic_name+0xfc>
 80168c2:	f022 0e20 	bic.w	lr, r2, #32
 80168c6:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 80168ca:	f1be 0f19 	cmp.w	lr, #25
 80168ce:	d93f      	bls.n	8016950 <rcl_validate_topic_name+0xfc>
 80168d0:	2a5f      	cmp	r2, #95	; 0x5f
 80168d2:	d014      	beq.n	80168fe <rcl_validate_topic_name+0xaa>
 80168d4:	2a2f      	cmp	r2, #47	; 0x2f
 80168d6:	d05b      	beq.n	8016990 <rcl_validate_topic_name+0x13c>
 80168d8:	2a7e      	cmp	r2, #126	; 0x7e
 80168da:	d052      	beq.n	8016982 <rcl_validate_topic_name+0x12e>
 80168dc:	2a7b      	cmp	r2, #123	; 0x7b
 80168de:	d00a      	beq.n	80168f6 <rcl_validate_topic_name+0xa2>
 80168e0:	2a7d      	cmp	r2, #125	; 0x7d
 80168e2:	d16f      	bne.n	80169c4 <rcl_validate_topic_name+0x170>
 80168e4:	2c00      	cmp	r4, #0
 80168e6:	d15e      	bne.n	80169a6 <rcl_validate_topic_name+0x152>
 80168e8:	2305      	movs	r3, #5
 80168ea:	6033      	str	r3, [r6, #0]
 80168ec:	b107      	cbz	r7, 80168f0 <rcl_validate_topic_name+0x9c>
 80168ee:	6039      	str	r1, [r7, #0]
 80168f0:	2000      	movs	r0, #0
 80168f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168f6:	2c00      	cmp	r4, #0
 80168f8:	d14c      	bne.n	8016994 <rcl_validate_topic_name+0x140>
 80168fa:	460b      	mov	r3, r1
 80168fc:	2401      	movs	r4, #1
 80168fe:	3101      	adds	r1, #1
 8016900:	4288      	cmp	r0, r1
 8016902:	d1d7      	bne.n	80168b4 <rcl_validate_topic_name+0x60>
 8016904:	2c00      	cmp	r4, #0
 8016906:	d156      	bne.n	80169b6 <rcl_validate_topic_name+0x162>
 8016908:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 801690c:	4620      	mov	r0, r4
 801690e:	d061      	beq.n	80169d4 <rcl_validate_topic_name+0x180>
 8016910:	f108 0e01 	add.w	lr, r8, #1
 8016914:	e007      	b.n	8016926 <rcl_validate_topic_name+0xd2>
 8016916:	2801      	cmp	r0, #1
 8016918:	d047      	beq.n	80169aa <rcl_validate_topic_name+0x156>
 801691a:	461a      	mov	r2, r3
 801691c:	4291      	cmp	r1, r2
 801691e:	4618      	mov	r0, r3
 8016920:	f105 0501 	add.w	r5, r5, #1
 8016924:	d944      	bls.n	80169b0 <rcl_validate_topic_name+0x15c>
 8016926:	4580      	cmp	r8, r0
 8016928:	f100 0301 	add.w	r3, r0, #1
 801692c:	d037      	beq.n	801699e <rcl_validate_topic_name+0x14a>
 801692e:	782a      	ldrb	r2, [r5, #0]
 8016930:	2a2f      	cmp	r2, #47	; 0x2f
 8016932:	d1f0      	bne.n	8016916 <rcl_validate_topic_name+0xc2>
 8016934:	786b      	ldrb	r3, [r5, #1]
 8016936:	f81c 4003 	ldrb.w	r4, [ip, r3]
 801693a:	1c43      	adds	r3, r0, #1
 801693c:	0760      	lsls	r0, r4, #29
 801693e:	461a      	mov	r2, r3
 8016940:	d5ec      	bpl.n	801691c <rcl_validate_topic_name+0xc8>
 8016942:	2304      	movs	r3, #4
 8016944:	6033      	str	r3, [r6, #0]
 8016946:	2f00      	cmp	r7, #0
 8016948:	d0d2      	beq.n	80168f0 <rcl_validate_topic_name+0x9c>
 801694a:	603a      	str	r2, [r7, #0]
 801694c:	2000      	movs	r0, #0
 801694e:	e7ab      	b.n	80168a8 <rcl_validate_topic_name+0x54>
 8016950:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016954:	0752      	lsls	r2, r2, #29
 8016956:	d5d2      	bpl.n	80168fe <rcl_validate_topic_name+0xaa>
 8016958:	2c00      	cmp	r4, #0
 801695a:	d0d0      	beq.n	80168fe <rcl_validate_topic_name+0xaa>
 801695c:	2900      	cmp	r1, #0
 801695e:	d0ce      	beq.n	80168fe <rcl_validate_topic_name+0xaa>
 8016960:	1e4a      	subs	r2, r1, #1
 8016962:	429a      	cmp	r2, r3
 8016964:	d1cb      	bne.n	80168fe <rcl_validate_topic_name+0xaa>
 8016966:	2309      	movs	r3, #9
 8016968:	6033      	str	r3, [r6, #0]
 801696a:	2f00      	cmp	r7, #0
 801696c:	d1bf      	bne.n	80168ee <rcl_validate_topic_name+0x9a>
 801696e:	e7bf      	b.n	80168f0 <rcl_validate_topic_name+0x9c>
 8016970:	200b      	movs	r0, #11
 8016972:	4770      	bx	lr
 8016974:	2304      	movs	r3, #4
 8016976:	6033      	str	r3, [r6, #0]
 8016978:	2f00      	cmp	r7, #0
 801697a:	d193      	bne.n	80168a4 <rcl_validate_topic_name+0x50>
 801697c:	e7b8      	b.n	80168f0 <rcl_validate_topic_name+0x9c>
 801697e:	200b      	movs	r0, #11
 8016980:	e792      	b.n	80168a8 <rcl_validate_topic_name+0x54>
 8016982:	2900      	cmp	r1, #0
 8016984:	d0bb      	beq.n	80168fe <rcl_validate_topic_name+0xaa>
 8016986:	2306      	movs	r3, #6
 8016988:	6033      	str	r3, [r6, #0]
 801698a:	2f00      	cmp	r7, #0
 801698c:	d1af      	bne.n	80168ee <rcl_validate_topic_name+0x9a>
 801698e:	e7af      	b.n	80168f0 <rcl_validate_topic_name+0x9c>
 8016990:	2c00      	cmp	r4, #0
 8016992:	d0b4      	beq.n	80168fe <rcl_validate_topic_name+0xaa>
 8016994:	2308      	movs	r3, #8
 8016996:	6033      	str	r3, [r6, #0]
 8016998:	2f00      	cmp	r7, #0
 801699a:	d1a8      	bne.n	80168ee <rcl_validate_topic_name+0x9a>
 801699c:	e7a8      	b.n	80168f0 <rcl_validate_topic_name+0x9c>
 801699e:	4672      	mov	r2, lr
 80169a0:	f108 0301 	add.w	r3, r8, #1
 80169a4:	e7ba      	b.n	801691c <rcl_validate_topic_name+0xc8>
 80169a6:	2400      	movs	r4, #0
 80169a8:	e7a9      	b.n	80168fe <rcl_validate_topic_name+0xaa>
 80169aa:	2202      	movs	r2, #2
 80169ac:	4613      	mov	r3, r2
 80169ae:	e7b5      	b.n	801691c <rcl_validate_topic_name+0xc8>
 80169b0:	2000      	movs	r0, #0
 80169b2:	6030      	str	r0, [r6, #0]
 80169b4:	e778      	b.n	80168a8 <rcl_validate_topic_name+0x54>
 80169b6:	2205      	movs	r2, #5
 80169b8:	6032      	str	r2, [r6, #0]
 80169ba:	2f00      	cmp	r7, #0
 80169bc:	d098      	beq.n	80168f0 <rcl_validate_topic_name+0x9c>
 80169be:	603b      	str	r3, [r7, #0]
 80169c0:	2000      	movs	r0, #0
 80169c2:	e771      	b.n	80168a8 <rcl_validate_topic_name+0x54>
 80169c4:	2c00      	cmp	r4, #0
 80169c6:	bf14      	ite	ne
 80169c8:	2308      	movne	r3, #8
 80169ca:	2303      	moveq	r3, #3
 80169cc:	6033      	str	r3, [r6, #0]
 80169ce:	2f00      	cmp	r7, #0
 80169d0:	d18d      	bne.n	80168ee <rcl_validate_topic_name+0x9a>
 80169d2:	e78d      	b.n	80168f0 <rcl_validate_topic_name+0x9c>
 80169d4:	f108 0401 	add.w	r4, r8, #1
 80169d8:	e007      	b.n	80169ea <rcl_validate_topic_name+0x196>
 80169da:	2801      	cmp	r0, #1
 80169dc:	d019      	beq.n	8016a12 <rcl_validate_topic_name+0x1be>
 80169de:	461a      	mov	r2, r3
 80169e0:	4291      	cmp	r1, r2
 80169e2:	4618      	mov	r0, r3
 80169e4:	f105 0501 	add.w	r5, r5, #1
 80169e8:	d9e2      	bls.n	80169b0 <rcl_validate_topic_name+0x15c>
 80169ea:	4580      	cmp	r8, r0
 80169ec:	f100 0301 	add.w	r3, r0, #1
 80169f0:	d00b      	beq.n	8016a0a <rcl_validate_topic_name+0x1b6>
 80169f2:	782a      	ldrb	r2, [r5, #0]
 80169f4:	2a2f      	cmp	r2, #47	; 0x2f
 80169f6:	d1f0      	bne.n	80169da <rcl_validate_topic_name+0x186>
 80169f8:	786b      	ldrb	r3, [r5, #1]
 80169fa:	f81c e003 	ldrb.w	lr, [ip, r3]
 80169fe:	1c43      	adds	r3, r0, #1
 8016a00:	f01e 0f04 	tst.w	lr, #4
 8016a04:	461a      	mov	r2, r3
 8016a06:	d0eb      	beq.n	80169e0 <rcl_validate_topic_name+0x18c>
 8016a08:	e79b      	b.n	8016942 <rcl_validate_topic_name+0xee>
 8016a0a:	4622      	mov	r2, r4
 8016a0c:	f108 0301 	add.w	r3, r8, #1
 8016a10:	e7e6      	b.n	80169e0 <rcl_validate_topic_name+0x18c>
 8016a12:	2307      	movs	r3, #7
 8016a14:	6033      	str	r3, [r6, #0]
 8016a16:	2f00      	cmp	r7, #0
 8016a18:	f43f af6a 	beq.w	80168f0 <rcl_validate_topic_name+0x9c>
 8016a1c:	6038      	str	r0, [r7, #0]
 8016a1e:	2000      	movs	r0, #0
 8016a20:	e742      	b.n	80168a8 <rcl_validate_topic_name+0x54>
 8016a22:	bf00      	nop
 8016a24:	0801f6a1 	.word	0x0801f6a1

08016a28 <rcl_get_zero_initialized_wait_set>:
 8016a28:	b470      	push	{r4, r5, r6}
 8016a2a:	4d07      	ldr	r5, [pc, #28]	; (8016a48 <rcl_get_zero_initialized_wait_set+0x20>)
 8016a2c:	4606      	mov	r6, r0
 8016a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a30:	4634      	mov	r4, r6
 8016a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016a3c:	682b      	ldr	r3, [r5, #0]
 8016a3e:	6023      	str	r3, [r4, #0]
 8016a40:	4630      	mov	r0, r6
 8016a42:	bc70      	pop	{r4, r5, r6}
 8016a44:	4770      	bx	lr
 8016a46:	bf00      	nop
 8016a48:	0801f28c 	.word	0x0801f28c

08016a4c <rcl_wait_set_is_valid>:
 8016a4c:	b118      	cbz	r0, 8016a56 <rcl_wait_set_is_valid+0xa>
 8016a4e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8016a50:	3800      	subs	r0, #0
 8016a52:	bf18      	it	ne
 8016a54:	2001      	movne	r0, #1
 8016a56:	4770      	bx	lr

08016a58 <rcl_wait_set_fini>:
 8016a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a5c:	b082      	sub	sp, #8
 8016a5e:	2800      	cmp	r0, #0
 8016a60:	f000 8095 	beq.w	8016b8e <rcl_wait_set_fini+0x136>
 8016a64:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8016a66:	4604      	mov	r4, r0
 8016a68:	2e00      	cmp	r6, #0
 8016a6a:	f000 808c 	beq.w	8016b86 <rcl_wait_set_fini+0x12e>
 8016a6e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8016a70:	f001 fd1a 	bl	80184a8 <rmw_destroy_wait_set>
 8016a74:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016a76:	1e06      	subs	r6, r0, #0
 8016a78:	bf18      	it	ne
 8016a7a:	f44f 7661 	movne.w	r6, #900	; 0x384
 8016a7e:	2d00      	cmp	r5, #0
 8016a80:	f000 8081 	beq.w	8016b86 <rcl_wait_set_fini+0x12e>
 8016a84:	6820      	ldr	r0, [r4, #0]
 8016a86:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8016a8a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016a8c:	2700      	movs	r7, #0
 8016a8e:	6067      	str	r7, [r4, #4]
 8016a90:	602f      	str	r7, [r5, #0]
 8016a92:	b120      	cbz	r0, 8016a9e <rcl_wait_set_fini+0x46>
 8016a94:	9101      	str	r1, [sp, #4]
 8016a96:	47c0      	blx	r8
 8016a98:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016a9a:	9901      	ldr	r1, [sp, #4]
 8016a9c:	6027      	str	r7, [r4, #0]
 8016a9e:	68a8      	ldr	r0, [r5, #8]
 8016aa0:	b120      	cbz	r0, 8016aac <rcl_wait_set_fini+0x54>
 8016aa2:	47c0      	blx	r8
 8016aa4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8016aac:	68a0      	ldr	r0, [r4, #8]
 8016aae:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8016ab0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016ab2:	f04f 0800 	mov.w	r8, #0
 8016ab6:	f8c4 800c 	str.w	r8, [r4, #12]
 8016aba:	f8c5 800c 	str.w	r8, [r5, #12]
 8016abe:	b128      	cbz	r0, 8016acc <rcl_wait_set_fini+0x74>
 8016ac0:	47b8      	blx	r7
 8016ac2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016ac4:	f8c4 8008 	str.w	r8, [r4, #8]
 8016ac8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8016aca:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016acc:	6968      	ldr	r0, [r5, #20]
 8016ace:	f04f 0800 	mov.w	r8, #0
 8016ad2:	f8c5 8010 	str.w	r8, [r5, #16]
 8016ad6:	b128      	cbz	r0, 8016ae4 <rcl_wait_set_fini+0x8c>
 8016ad8:	47b8      	blx	r7
 8016ada:	f8c5 8014 	str.w	r8, [r5, #20]
 8016ade:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016ae0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8016ae2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016ae4:	6920      	ldr	r0, [r4, #16]
 8016ae6:	f04f 0800 	mov.w	r8, #0
 8016aea:	f8c4 8014 	str.w	r8, [r4, #20]
 8016aee:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8016af2:	b128      	cbz	r0, 8016b00 <rcl_wait_set_fini+0xa8>
 8016af4:	47b8      	blx	r7
 8016af6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016af8:	f8c4 8010 	str.w	r8, [r4, #16]
 8016afc:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8016afe:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016b00:	69a0      	ldr	r0, [r4, #24]
 8016b02:	f04f 0800 	mov.w	r8, #0
 8016b06:	f8c4 801c 	str.w	r8, [r4, #28]
 8016b0a:	f8c5 8018 	str.w	r8, [r5, #24]
 8016b0e:	b128      	cbz	r0, 8016b1c <rcl_wait_set_fini+0xc4>
 8016b10:	9101      	str	r1, [sp, #4]
 8016b12:	47b8      	blx	r7
 8016b14:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016b16:	9901      	ldr	r1, [sp, #4]
 8016b18:	f8c4 8018 	str.w	r8, [r4, #24]
 8016b1c:	6a28      	ldr	r0, [r5, #32]
 8016b1e:	b120      	cbz	r0, 8016b2a <rcl_wait_set_fini+0xd2>
 8016b20:	47b8      	blx	r7
 8016b22:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016b24:	2300      	movs	r3, #0
 8016b26:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8016b2a:	6a20      	ldr	r0, [r4, #32]
 8016b2c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8016b30:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016b32:	2700      	movs	r7, #0
 8016b34:	6267      	str	r7, [r4, #36]	; 0x24
 8016b36:	626f      	str	r7, [r5, #36]	; 0x24
 8016b38:	b120      	cbz	r0, 8016b44 <rcl_wait_set_fini+0xec>
 8016b3a:	9101      	str	r1, [sp, #4]
 8016b3c:	47c0      	blx	r8
 8016b3e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016b40:	9901      	ldr	r1, [sp, #4]
 8016b42:	6227      	str	r7, [r4, #32]
 8016b44:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8016b46:	b120      	cbz	r0, 8016b52 <rcl_wait_set_fini+0xfa>
 8016b48:	47c0      	blx	r8
 8016b4a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016b4c:	2300      	movs	r3, #0
 8016b4e:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8016b52:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016b54:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8016b58:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016b5a:	2700      	movs	r7, #0
 8016b5c:	62e7      	str	r7, [r4, #44]	; 0x2c
 8016b5e:	632f      	str	r7, [r5, #48]	; 0x30
 8016b60:	b120      	cbz	r0, 8016b6c <rcl_wait_set_fini+0x114>
 8016b62:	9101      	str	r1, [sp, #4]
 8016b64:	47c0      	blx	r8
 8016b66:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016b68:	9901      	ldr	r1, [sp, #4]
 8016b6a:	62a7      	str	r7, [r4, #40]	; 0x28
 8016b6c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8016b6e:	b120      	cbz	r0, 8016b7a <rcl_wait_set_fini+0x122>
 8016b70:	47c0      	blx	r8
 8016b72:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016b74:	2300      	movs	r3, #0
 8016b76:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8016b7a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8016b7c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016b7e:	4628      	mov	r0, r5
 8016b80:	4798      	blx	r3
 8016b82:	2300      	movs	r3, #0
 8016b84:	6323      	str	r3, [r4, #48]	; 0x30
 8016b86:	4630      	mov	r0, r6
 8016b88:	b002      	add	sp, #8
 8016b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b8e:	260b      	movs	r6, #11
 8016b90:	4630      	mov	r0, r6
 8016b92:	b002      	add	sp, #8
 8016b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016b98 <rcl_wait_set_add_subscription>:
 8016b98:	b320      	cbz	r0, 8016be4 <rcl_wait_set_add_subscription+0x4c>
 8016b9a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016b9c:	b570      	push	{r4, r5, r6, lr}
 8016b9e:	4604      	mov	r4, r0
 8016ba0:	b1d3      	cbz	r3, 8016bd8 <rcl_wait_set_add_subscription+0x40>
 8016ba2:	b319      	cbz	r1, 8016bec <rcl_wait_set_add_subscription+0x54>
 8016ba4:	681d      	ldr	r5, [r3, #0]
 8016ba6:	6860      	ldr	r0, [r4, #4]
 8016ba8:	4285      	cmp	r5, r0
 8016baa:	d218      	bcs.n	8016bde <rcl_wait_set_add_subscription+0x46>
 8016bac:	6820      	ldr	r0, [r4, #0]
 8016bae:	1c6e      	adds	r6, r5, #1
 8016bb0:	601e      	str	r6, [r3, #0]
 8016bb2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016bb6:	b102      	cbz	r2, 8016bba <rcl_wait_set_add_subscription+0x22>
 8016bb8:	6015      	str	r5, [r2, #0]
 8016bba:	4608      	mov	r0, r1
 8016bbc:	f7f7 fdfe 	bl	800e7bc <rcl_subscription_get_rmw_handle>
 8016bc0:	b190      	cbz	r0, 8016be8 <rcl_wait_set_add_subscription+0x50>
 8016bc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016bc4:	6842      	ldr	r2, [r0, #4]
 8016bc6:	689b      	ldr	r3, [r3, #8]
 8016bc8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016bcc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016bce:	6853      	ldr	r3, [r2, #4]
 8016bd0:	3301      	adds	r3, #1
 8016bd2:	6053      	str	r3, [r2, #4]
 8016bd4:	2000      	movs	r0, #0
 8016bd6:	bd70      	pop	{r4, r5, r6, pc}
 8016bd8:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016bdc:	bd70      	pop	{r4, r5, r6, pc}
 8016bde:	f240 3086 	movw	r0, #902	; 0x386
 8016be2:	bd70      	pop	{r4, r5, r6, pc}
 8016be4:	200b      	movs	r0, #11
 8016be6:	4770      	bx	lr
 8016be8:	2001      	movs	r0, #1
 8016bea:	bd70      	pop	{r4, r5, r6, pc}
 8016bec:	200b      	movs	r0, #11
 8016bee:	bd70      	pop	{r4, r5, r6, pc}

08016bf0 <rcl_wait_set_clear>:
 8016bf0:	2800      	cmp	r0, #0
 8016bf2:	d073      	beq.n	8016cdc <rcl_wait_set_clear+0xec>
 8016bf4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016bf6:	b510      	push	{r4, lr}
 8016bf8:	4604      	mov	r4, r0
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d070      	beq.n	8016ce0 <rcl_wait_set_clear+0xf0>
 8016bfe:	6800      	ldr	r0, [r0, #0]
 8016c00:	b138      	cbz	r0, 8016c12 <rcl_wait_set_clear+0x22>
 8016c02:	6862      	ldr	r2, [r4, #4]
 8016c04:	2100      	movs	r1, #0
 8016c06:	0092      	lsls	r2, r2, #2
 8016c08:	f002 fde4 	bl	80197d4 <memset>
 8016c0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016c0e:	2200      	movs	r2, #0
 8016c10:	601a      	str	r2, [r3, #0]
 8016c12:	68a0      	ldr	r0, [r4, #8]
 8016c14:	b138      	cbz	r0, 8016c26 <rcl_wait_set_clear+0x36>
 8016c16:	68e2      	ldr	r2, [r4, #12]
 8016c18:	2100      	movs	r1, #0
 8016c1a:	0092      	lsls	r2, r2, #2
 8016c1c:	f002 fdda 	bl	80197d4 <memset>
 8016c20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016c22:	2200      	movs	r2, #0
 8016c24:	60da      	str	r2, [r3, #12]
 8016c26:	69a0      	ldr	r0, [r4, #24]
 8016c28:	b138      	cbz	r0, 8016c3a <rcl_wait_set_clear+0x4a>
 8016c2a:	69e2      	ldr	r2, [r4, #28]
 8016c2c:	2100      	movs	r1, #0
 8016c2e:	0092      	lsls	r2, r2, #2
 8016c30:	f002 fdd0 	bl	80197d4 <memset>
 8016c34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016c36:	2200      	movs	r2, #0
 8016c38:	619a      	str	r2, [r3, #24]
 8016c3a:	6a20      	ldr	r0, [r4, #32]
 8016c3c:	b138      	cbz	r0, 8016c4e <rcl_wait_set_clear+0x5e>
 8016c3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016c40:	2100      	movs	r1, #0
 8016c42:	0092      	lsls	r2, r2, #2
 8016c44:	f002 fdc6 	bl	80197d4 <memset>
 8016c48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016c4a:	2200      	movs	r2, #0
 8016c4c:	625a      	str	r2, [r3, #36]	; 0x24
 8016c4e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016c50:	b138      	cbz	r0, 8016c62 <rcl_wait_set_clear+0x72>
 8016c52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016c54:	2100      	movs	r1, #0
 8016c56:	0092      	lsls	r2, r2, #2
 8016c58:	f002 fdbc 	bl	80197d4 <memset>
 8016c5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016c5e:	2200      	movs	r2, #0
 8016c60:	631a      	str	r2, [r3, #48]	; 0x30
 8016c62:	6920      	ldr	r0, [r4, #16]
 8016c64:	b138      	cbz	r0, 8016c76 <rcl_wait_set_clear+0x86>
 8016c66:	6962      	ldr	r2, [r4, #20]
 8016c68:	2100      	movs	r1, #0
 8016c6a:	0092      	lsls	r2, r2, #2
 8016c6c:	f002 fdb2 	bl	80197d4 <memset>
 8016c70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016c72:	2200      	movs	r2, #0
 8016c74:	641a      	str	r2, [r3, #64]	; 0x40
 8016c76:	6898      	ldr	r0, [r3, #8]
 8016c78:	b138      	cbz	r0, 8016c8a <rcl_wait_set_clear+0x9a>
 8016c7a:	685a      	ldr	r2, [r3, #4]
 8016c7c:	2100      	movs	r1, #0
 8016c7e:	0092      	lsls	r2, r2, #2
 8016c80:	f002 fda8 	bl	80197d4 <memset>
 8016c84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016c86:	2200      	movs	r2, #0
 8016c88:	605a      	str	r2, [r3, #4]
 8016c8a:	6958      	ldr	r0, [r3, #20]
 8016c8c:	b138      	cbz	r0, 8016c9e <rcl_wait_set_clear+0xae>
 8016c8e:	691a      	ldr	r2, [r3, #16]
 8016c90:	2100      	movs	r1, #0
 8016c92:	0092      	lsls	r2, r2, #2
 8016c94:	f002 fd9e 	bl	80197d4 <memset>
 8016c98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016c9a:	2200      	movs	r2, #0
 8016c9c:	611a      	str	r2, [r3, #16]
 8016c9e:	6a18      	ldr	r0, [r3, #32]
 8016ca0:	b138      	cbz	r0, 8016cb2 <rcl_wait_set_clear+0xc2>
 8016ca2:	69da      	ldr	r2, [r3, #28]
 8016ca4:	2100      	movs	r1, #0
 8016ca6:	0092      	lsls	r2, r2, #2
 8016ca8:	f002 fd94 	bl	80197d4 <memset>
 8016cac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016cae:	2200      	movs	r2, #0
 8016cb0:	61da      	str	r2, [r3, #28]
 8016cb2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8016cb4:	b138      	cbz	r0, 8016cc6 <rcl_wait_set_clear+0xd6>
 8016cb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016cb8:	2100      	movs	r1, #0
 8016cba:	0092      	lsls	r2, r2, #2
 8016cbc:	f002 fd8a 	bl	80197d4 <memset>
 8016cc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	629a      	str	r2, [r3, #40]	; 0x28
 8016cc6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016cc8:	b138      	cbz	r0, 8016cda <rcl_wait_set_clear+0xea>
 8016cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016ccc:	2100      	movs	r1, #0
 8016cce:	0092      	lsls	r2, r2, #2
 8016cd0:	f002 fd80 	bl	80197d4 <memset>
 8016cd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016cd6:	2000      	movs	r0, #0
 8016cd8:	6358      	str	r0, [r3, #52]	; 0x34
 8016cda:	bd10      	pop	{r4, pc}
 8016cdc:	200b      	movs	r0, #11
 8016cde:	4770      	bx	lr
 8016ce0:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016ce4:	bd10      	pop	{r4, pc}
 8016ce6:	bf00      	nop

08016ce8 <rcl_wait_set_resize>:
 8016ce8:	2800      	cmp	r0, #0
 8016cea:	f000 81a6 	beq.w	801703a <rcl_wait_set_resize+0x352>
 8016cee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cf2:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 8016cf6:	b083      	sub	sp, #12
 8016cf8:	4604      	mov	r4, r0
 8016cfa:	f1ba 0f00 	cmp.w	sl, #0
 8016cfe:	f000 819e 	beq.w	801703e <rcl_wait_set_resize+0x356>
 8016d02:	461e      	mov	r6, r3
 8016d04:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 8016d08:	f04f 0800 	mov.w	r8, #0
 8016d0c:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 8016d10:	9300      	str	r3, [sp, #0]
 8016d12:	f8c0 8004 	str.w	r8, [r0, #4]
 8016d16:	460f      	mov	r7, r1
 8016d18:	4615      	mov	r5, r2
 8016d1a:	f8ca 8000 	str.w	r8, [sl]
 8016d1e:	2900      	cmp	r1, #0
 8016d20:	f000 80c9 	beq.w	8016eb6 <rcl_wait_set_resize+0x1ce>
 8016d24:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8016d28:	6800      	ldr	r0, [r0, #0]
 8016d2a:	4651      	mov	r1, sl
 8016d2c:	464a      	mov	r2, r9
 8016d2e:	4798      	blx	r3
 8016d30:	6020      	str	r0, [r4, #0]
 8016d32:	2800      	cmp	r0, #0
 8016d34:	f000 80d8 	beq.w	8016ee8 <rcl_wait_set_resize+0x200>
 8016d38:	4652      	mov	r2, sl
 8016d3a:	4641      	mov	r1, r8
 8016d3c:	f002 fd4a 	bl	80197d4 <memset>
 8016d40:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016d42:	6067      	str	r7, [r4, #4]
 8016d44:	6898      	ldr	r0, [r3, #8]
 8016d46:	f8c3 8004 	str.w	r8, [r3, #4]
 8016d4a:	9301      	str	r3, [sp, #4]
 8016d4c:	464a      	mov	r2, r9
 8016d4e:	9b00      	ldr	r3, [sp, #0]
 8016d50:	4651      	mov	r1, sl
 8016d52:	4798      	blx	r3
 8016d54:	9b01      	ldr	r3, [sp, #4]
 8016d56:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016d58:	6098      	str	r0, [r3, #8]
 8016d5a:	6897      	ldr	r7, [r2, #8]
 8016d5c:	2f00      	cmp	r7, #0
 8016d5e:	f000 80be 	beq.w	8016ede <rcl_wait_set_resize+0x1f6>
 8016d62:	4652      	mov	r2, sl
 8016d64:	4641      	mov	r1, r8
 8016d66:	4638      	mov	r0, r7
 8016d68:	f002 fd34 	bl	80197d4 <memset>
 8016d6c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016d70:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016d74:	2700      	movs	r7, #0
 8016d76:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 8016d7a:	60e7      	str	r7, [r4, #12]
 8016d7c:	f8ca 700c 	str.w	r7, [sl, #12]
 8016d80:	2d00      	cmp	r5, #0
 8016d82:	f040 80b5 	bne.w	8016ef0 <rcl_wait_set_resize+0x208>
 8016d86:	68a0      	ldr	r0, [r4, #8]
 8016d88:	b130      	cbz	r0, 8016d98 <rcl_wait_set_resize+0xb0>
 8016d8a:	4641      	mov	r1, r8
 8016d8c:	4790      	blx	r2
 8016d8e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016d92:	60a5      	str	r5, [r4, #8]
 8016d94:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016d98:	2700      	movs	r7, #0
 8016d9a:	19ad      	adds	r5, r5, r6
 8016d9c:	f8ca 7010 	str.w	r7, [sl, #16]
 8016da0:	f040 80be 	bne.w	8016f20 <rcl_wait_set_resize+0x238>
 8016da4:	f8da 0014 	ldr.w	r0, [sl, #20]
 8016da8:	b148      	cbz	r0, 8016dbe <rcl_wait_set_resize+0xd6>
 8016daa:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8016dae:	4641      	mov	r1, r8
 8016db0:	4798      	blx	r3
 8016db2:	f8ca 5014 	str.w	r5, [sl, #20]
 8016db6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016dba:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016dbe:	2500      	movs	r5, #0
 8016dc0:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8016dc4:	6165      	str	r5, [r4, #20]
 8016dc6:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8016dca:	2e00      	cmp	r6, #0
 8016dcc:	f040 80bf 	bne.w	8016f4e <rcl_wait_set_resize+0x266>
 8016dd0:	6920      	ldr	r0, [r4, #16]
 8016dd2:	b140      	cbz	r0, 8016de6 <rcl_wait_set_resize+0xfe>
 8016dd4:	4641      	mov	r1, r8
 8016dd6:	47c8      	blx	r9
 8016dd8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016ddc:	6126      	str	r6, [r4, #16]
 8016dde:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8016de2:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016de6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016de8:	2500      	movs	r5, #0
 8016dea:	61e5      	str	r5, [r4, #28]
 8016dec:	f8ca 5018 	str.w	r5, [sl, #24]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	f040 80c1 	bne.w	8016f78 <rcl_wait_set_resize+0x290>
 8016df6:	69a0      	ldr	r0, [r4, #24]
 8016df8:	b128      	cbz	r0, 8016e06 <rcl_wait_set_resize+0x11e>
 8016dfa:	4641      	mov	r1, r8
 8016dfc:	47c8      	blx	r9
 8016dfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e00:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016e04:	61a3      	str	r3, [r4, #24]
 8016e06:	f8da 0020 	ldr.w	r0, [sl, #32]
 8016e0a:	b130      	cbz	r0, 8016e1a <rcl_wait_set_resize+0x132>
 8016e0c:	4641      	mov	r1, r8
 8016e0e:	47c8      	blx	r9
 8016e10:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016e14:	2300      	movs	r3, #0
 8016e16:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8016e1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e1c:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 8016e20:	2600      	movs	r6, #0
 8016e22:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 8016e26:	6266      	str	r6, [r4, #36]	; 0x24
 8016e28:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	f000 80c8 	beq.w	8016fc2 <rcl_wait_set_resize+0x2da>
 8016e32:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8016e36:	6a20      	ldr	r0, [r4, #32]
 8016e38:	4651      	mov	r1, sl
 8016e3a:	463a      	mov	r2, r7
 8016e3c:	47c8      	blx	r9
 8016e3e:	6220      	str	r0, [r4, #32]
 8016e40:	2800      	cmp	r0, #0
 8016e42:	d051      	beq.n	8016ee8 <rcl_wait_set_resize+0x200>
 8016e44:	4652      	mov	r2, sl
 8016e46:	4631      	mov	r1, r6
 8016e48:	f002 fcc4 	bl	80197d4 <memset>
 8016e4c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e50:	6263      	str	r3, [r4, #36]	; 0x24
 8016e52:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8016e54:	62ae      	str	r6, [r5, #40]	; 0x28
 8016e56:	463a      	mov	r2, r7
 8016e58:	4651      	mov	r1, sl
 8016e5a:	47c8      	blx	r9
 8016e5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016e5e:	62e8      	str	r0, [r5, #44]	; 0x2c
 8016e60:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8016e62:	2d00      	cmp	r5, #0
 8016e64:	f000 8105 	beq.w	8017072 <rcl_wait_set_resize+0x38a>
 8016e68:	4652      	mov	r2, sl
 8016e6a:	4631      	mov	r1, r6
 8016e6c:	4628      	mov	r0, r5
 8016e6e:	f002 fcb1 	bl	80197d4 <memset>
 8016e72:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e78:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 8016e7c:	2500      	movs	r5, #0
 8016e7e:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 8016e82:	62e5      	str	r5, [r4, #44]	; 0x2c
 8016e84:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	f040 80af 	bne.w	8016fec <rcl_wait_set_resize+0x304>
 8016e8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016e90:	b128      	cbz	r0, 8016e9e <rcl_wait_set_resize+0x1b6>
 8016e92:	4631      	mov	r1, r6
 8016e94:	47b8      	blx	r7
 8016e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e98:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016e9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016e9e:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8016ea2:	b310      	cbz	r0, 8016eea <rcl_wait_set_resize+0x202>
 8016ea4:	4631      	mov	r1, r6
 8016ea6:	47b8      	blx	r7
 8016ea8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016eaa:	2000      	movs	r0, #0
 8016eac:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 8016eb0:	b003      	add	sp, #12
 8016eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016eb6:	6800      	ldr	r0, [r0, #0]
 8016eb8:	b120      	cbz	r0, 8016ec4 <rcl_wait_set_resize+0x1dc>
 8016eba:	4649      	mov	r1, r9
 8016ebc:	47d8      	blx	fp
 8016ebe:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016ec2:	6027      	str	r7, [r4, #0]
 8016ec4:	f8da 0008 	ldr.w	r0, [sl, #8]
 8016ec8:	2800      	cmp	r0, #0
 8016eca:	f43f af51 	beq.w	8016d70 <rcl_wait_set_resize+0x88>
 8016ece:	4649      	mov	r1, r9
 8016ed0:	47d8      	blx	fp
 8016ed2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8016edc:	e748      	b.n	8016d70 <rcl_wait_set_resize+0x88>
 8016ede:	6820      	ldr	r0, [r4, #0]
 8016ee0:	4649      	mov	r1, r9
 8016ee2:	47d8      	blx	fp
 8016ee4:	e9c4 7700 	strd	r7, r7, [r4]
 8016ee8:	200a      	movs	r0, #10
 8016eea:	b003      	add	sp, #12
 8016eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ef0:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8016ef4:	68a0      	ldr	r0, [r4, #8]
 8016ef6:	4642      	mov	r2, r8
 8016ef8:	4649      	mov	r1, r9
 8016efa:	4798      	blx	r3
 8016efc:	60a0      	str	r0, [r4, #8]
 8016efe:	2800      	cmp	r0, #0
 8016f00:	d0f2      	beq.n	8016ee8 <rcl_wait_set_resize+0x200>
 8016f02:	4639      	mov	r1, r7
 8016f04:	464a      	mov	r2, r9
 8016f06:	f002 fc65 	bl	80197d4 <memset>
 8016f0a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016f0e:	60e5      	str	r5, [r4, #12]
 8016f10:	2700      	movs	r7, #0
 8016f12:	19ad      	adds	r5, r5, r6
 8016f14:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016f18:	f8ca 7010 	str.w	r7, [sl, #16]
 8016f1c:	f43f af42 	beq.w	8016da4 <rcl_wait_set_resize+0xbc>
 8016f20:	00ad      	lsls	r5, r5, #2
 8016f22:	4642      	mov	r2, r8
 8016f24:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8016f28:	f8da 0014 	ldr.w	r0, [sl, #20]
 8016f2c:	4629      	mov	r1, r5
 8016f2e:	4798      	blx	r3
 8016f30:	4680      	mov	r8, r0
 8016f32:	f8ca 0014 	str.w	r0, [sl, #20]
 8016f36:	2800      	cmp	r0, #0
 8016f38:	f000 8084 	beq.w	8017044 <rcl_wait_set_resize+0x35c>
 8016f3c:	462a      	mov	r2, r5
 8016f3e:	4639      	mov	r1, r7
 8016f40:	f002 fc48 	bl	80197d4 <memset>
 8016f44:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016f48:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016f4c:	e737      	b.n	8016dbe <rcl_wait_set_resize+0xd6>
 8016f4e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8016f52:	6920      	ldr	r0, [r4, #16]
 8016f54:	4642      	mov	r2, r8
 8016f56:	4649      	mov	r1, r9
 8016f58:	47b8      	blx	r7
 8016f5a:	6120      	str	r0, [r4, #16]
 8016f5c:	2800      	cmp	r0, #0
 8016f5e:	d0c3      	beq.n	8016ee8 <rcl_wait_set_resize+0x200>
 8016f60:	464a      	mov	r2, r9
 8016f62:	4629      	mov	r1, r5
 8016f64:	f002 fc36 	bl	80197d4 <memset>
 8016f68:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016f6c:	6166      	str	r6, [r4, #20]
 8016f6e:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8016f72:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016f76:	e736      	b.n	8016de6 <rcl_wait_set_resize+0xfe>
 8016f78:	009e      	lsls	r6, r3, #2
 8016f7a:	69a0      	ldr	r0, [r4, #24]
 8016f7c:	4631      	mov	r1, r6
 8016f7e:	4642      	mov	r2, r8
 8016f80:	47b8      	blx	r7
 8016f82:	61a0      	str	r0, [r4, #24]
 8016f84:	2800      	cmp	r0, #0
 8016f86:	d0af      	beq.n	8016ee8 <rcl_wait_set_resize+0x200>
 8016f88:	4632      	mov	r2, r6
 8016f8a:	4629      	mov	r1, r5
 8016f8c:	f002 fc22 	bl	80197d4 <memset>
 8016f90:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016f94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f96:	61e3      	str	r3, [r4, #28]
 8016f98:	f8da 0020 	ldr.w	r0, [sl, #32]
 8016f9c:	f8ca 501c 	str.w	r5, [sl, #28]
 8016fa0:	4642      	mov	r2, r8
 8016fa2:	4631      	mov	r1, r6
 8016fa4:	47b8      	blx	r7
 8016fa6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016fa8:	f8ca 0020 	str.w	r0, [sl, #32]
 8016fac:	6a1f      	ldr	r7, [r3, #32]
 8016fae:	2f00      	cmp	r7, #0
 8016fb0:	d058      	beq.n	8017064 <rcl_wait_set_resize+0x37c>
 8016fb2:	4632      	mov	r2, r6
 8016fb4:	4629      	mov	r1, r5
 8016fb6:	4638      	mov	r0, r7
 8016fb8:	f002 fc0c 	bl	80197d4 <memset>
 8016fbc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016fc0:	e72b      	b.n	8016e1a <rcl_wait_set_resize+0x132>
 8016fc2:	6a20      	ldr	r0, [r4, #32]
 8016fc4:	b128      	cbz	r0, 8016fd2 <rcl_wait_set_resize+0x2ea>
 8016fc6:	4639      	mov	r1, r7
 8016fc8:	47c0      	blx	r8
 8016fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016fcc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016fd0:	6223      	str	r3, [r4, #32]
 8016fd2:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 8016fd6:	2800      	cmp	r0, #0
 8016fd8:	f43f af4d 	beq.w	8016e76 <rcl_wait_set_resize+0x18e>
 8016fdc:	4639      	mov	r1, r7
 8016fde:	47c0      	blx	r8
 8016fe0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 8016fea:	e744      	b.n	8016e76 <rcl_wait_set_resize+0x18e>
 8016fec:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8016ff0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016ff2:	4641      	mov	r1, r8
 8016ff4:	4632      	mov	r2, r6
 8016ff6:	47c8      	blx	r9
 8016ff8:	62a0      	str	r0, [r4, #40]	; 0x28
 8016ffa:	2800      	cmp	r0, #0
 8016ffc:	f43f af74 	beq.w	8016ee8 <rcl_wait_set_resize+0x200>
 8017000:	4642      	mov	r2, r8
 8017002:	4629      	mov	r1, r5
 8017004:	f002 fbe6 	bl	80197d4 <memset>
 8017008:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801700c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801700e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017010:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8017014:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 8017018:	4632      	mov	r2, r6
 801701a:	4641      	mov	r1, r8
 801701c:	47c8      	blx	r9
 801701e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017020:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8017024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017026:	b35b      	cbz	r3, 8017080 <rcl_wait_set_resize+0x398>
 8017028:	4642      	mov	r2, r8
 801702a:	4618      	mov	r0, r3
 801702c:	4629      	mov	r1, r5
 801702e:	f002 fbd1 	bl	80197d4 <memset>
 8017032:	4628      	mov	r0, r5
 8017034:	b003      	add	sp, #12
 8017036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801703a:	200b      	movs	r0, #11
 801703c:	4770      	bx	lr
 801703e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017042:	e752      	b.n	8016eea <rcl_wait_set_resize+0x202>
 8017044:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017046:	68a0      	ldr	r0, [r4, #8]
 8017048:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801704a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801704c:	4790      	blx	r2
 801704e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017050:	6920      	ldr	r0, [r4, #16]
 8017052:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017054:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8017056:	e9c4 8802 	strd	r8, r8, [r4, #8]
 801705a:	4790      	blx	r2
 801705c:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8017060:	200a      	movs	r0, #10
 8017062:	e742      	b.n	8016eea <rcl_wait_set_resize+0x202>
 8017064:	69a0      	ldr	r0, [r4, #24]
 8017066:	4641      	mov	r1, r8
 8017068:	47c8      	blx	r9
 801706a:	e9c4 7706 	strd	r7, r7, [r4, #24]
 801706e:	200a      	movs	r0, #10
 8017070:	e73b      	b.n	8016eea <rcl_wait_set_resize+0x202>
 8017072:	6a20      	ldr	r0, [r4, #32]
 8017074:	4639      	mov	r1, r7
 8017076:	47c0      	blx	r8
 8017078:	e9c4 5508 	strd	r5, r5, [r4, #32]
 801707c:	200a      	movs	r0, #10
 801707e:	e734      	b.n	8016eea <rcl_wait_set_resize+0x202>
 8017080:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017082:	9300      	str	r3, [sp, #0]
 8017084:	4631      	mov	r1, r6
 8017086:	47b8      	blx	r7
 8017088:	9b00      	ldr	r3, [sp, #0]
 801708a:	200a      	movs	r0, #10
 801708c:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8017090:	e72b      	b.n	8016eea <rcl_wait_set_resize+0x202>
 8017092:	bf00      	nop

08017094 <rcl_wait_set_init>:
 8017094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017098:	b084      	sub	sp, #16
 801709a:	4604      	mov	r4, r0
 801709c:	a810      	add	r0, sp, #64	; 0x40
 801709e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80170a2:	460f      	mov	r7, r1
 80170a4:	4690      	mov	r8, r2
 80170a6:	4699      	mov	r9, r3
 80170a8:	f7f8 f87e 	bl	800f1a8 <rcutils_allocator_is_valid>
 80170ac:	2800      	cmp	r0, #0
 80170ae:	d06b      	beq.n	8017188 <rcl_wait_set_init+0xf4>
 80170b0:	2c00      	cmp	r4, #0
 80170b2:	d069      	beq.n	8017188 <rcl_wait_set_init+0xf4>
 80170b4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80170b6:	b125      	cbz	r5, 80170c2 <rcl_wait_set_init+0x2e>
 80170b8:	2564      	movs	r5, #100	; 0x64
 80170ba:	4628      	mov	r0, r5
 80170bc:	b004      	add	sp, #16
 80170be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170c2:	f1ba 0f00 	cmp.w	sl, #0
 80170c6:	d05f      	beq.n	8017188 <rcl_wait_set_init+0xf4>
 80170c8:	4650      	mov	r0, sl
 80170ca:	f7fe f989 	bl	80153e0 <rcl_context_is_valid>
 80170ce:	2800      	cmp	r0, #0
 80170d0:	d067      	beq.n	80171a2 <rcl_wait_set_init+0x10e>
 80170d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80170d4:	9914      	ldr	r1, [sp, #80]	; 0x50
 80170d6:	205c      	movs	r0, #92	; 0x5c
 80170d8:	4798      	blx	r3
 80170da:	6320      	str	r0, [r4, #48]	; 0x30
 80170dc:	2800      	cmp	r0, #0
 80170de:	d062      	beq.n	80171a6 <rcl_wait_set_init+0x112>
 80170e0:	225c      	movs	r2, #92	; 0x5c
 80170e2:	4629      	mov	r1, r5
 80170e4:	f002 fb76 	bl	80197d4 <memset>
 80170e8:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80170ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80170f0:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80170f2:	f8dc e000 	ldr.w	lr, [ip]
 80170f6:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 80170fa:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 80170fe:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8017102:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8017106:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 801710a:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 801710e:	60b5      	str	r5, [r6, #8]
 8017110:	6075      	str	r5, [r6, #4]
 8017112:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017116:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801711a:	1899      	adds	r1, r3, r2
 801711c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801711e:	f8da 0000 	ldr.w	r0, [sl]
 8017122:	f8cc e000 	str.w	lr, [ip]
 8017126:	4419      	add	r1, r3
 8017128:	4441      	add	r1, r8
 801712a:	3028      	adds	r0, #40	; 0x28
 801712c:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8017130:	f001 f9b0 	bl	8018494 <rmw_create_wait_set>
 8017134:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017136:	63f0      	str	r0, [r6, #60]	; 0x3c
 8017138:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801713a:	b350      	cbz	r0, 8017192 <rcl_wait_set_init+0xfe>
 801713c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801713e:	9302      	str	r3, [sp, #8]
 8017140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017142:	9301      	str	r3, [sp, #4]
 8017144:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017146:	9300      	str	r3, [sp, #0]
 8017148:	4642      	mov	r2, r8
 801714a:	464b      	mov	r3, r9
 801714c:	4639      	mov	r1, r7
 801714e:	4620      	mov	r0, r4
 8017150:	f7ff fdca 	bl	8016ce8 <rcl_wait_set_resize>
 8017154:	4605      	mov	r5, r0
 8017156:	2800      	cmp	r0, #0
 8017158:	d0af      	beq.n	80170ba <rcl_wait_set_init+0x26>
 801715a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801715c:	bb2b      	cbnz	r3, 80171aa <rcl_wait_set_init+0x116>
 801715e:	2600      	movs	r6, #0
 8017160:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8017164:	9600      	str	r6, [sp, #0]
 8017166:	4633      	mov	r3, r6
 8017168:	4632      	mov	r2, r6
 801716a:	4631      	mov	r1, r6
 801716c:	4620      	mov	r0, r4
 801716e:	f7ff fdbb 	bl	8016ce8 <rcl_wait_set_resize>
 8017172:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8017174:	2800      	cmp	r0, #0
 8017176:	d0a0      	beq.n	80170ba <rcl_wait_set_init+0x26>
 8017178:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801717a:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801717c:	4798      	blx	r3
 801717e:	4628      	mov	r0, r5
 8017180:	6326      	str	r6, [r4, #48]	; 0x30
 8017182:	b004      	add	sp, #16
 8017184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017188:	250b      	movs	r5, #11
 801718a:	4628      	mov	r0, r5
 801718c:	b004      	add	sp, #16
 801718e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017192:	2501      	movs	r5, #1
 8017194:	f001 f988 	bl	80184a8 <rmw_destroy_wait_set>
 8017198:	2800      	cmp	r0, #0
 801719a:	bf18      	it	ne
 801719c:	f44f 7561 	movne.w	r5, #900	; 0x384
 80171a0:	e7dd      	b.n	801715e <rcl_wait_set_init+0xca>
 80171a2:	2565      	movs	r5, #101	; 0x65
 80171a4:	e789      	b.n	80170ba <rcl_wait_set_init+0x26>
 80171a6:	250a      	movs	r5, #10
 80171a8:	e787      	b.n	80170ba <rcl_wait_set_init+0x26>
 80171aa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80171ac:	e7f2      	b.n	8017194 <rcl_wait_set_init+0x100>
 80171ae:	bf00      	nop

080171b0 <rcl_wait_set_add_guard_condition>:
 80171b0:	b320      	cbz	r0, 80171fc <rcl_wait_set_add_guard_condition+0x4c>
 80171b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80171b4:	b570      	push	{r4, r5, r6, lr}
 80171b6:	4604      	mov	r4, r0
 80171b8:	b1d3      	cbz	r3, 80171f0 <rcl_wait_set_add_guard_condition+0x40>
 80171ba:	b319      	cbz	r1, 8017204 <rcl_wait_set_add_guard_condition+0x54>
 80171bc:	68dd      	ldr	r5, [r3, #12]
 80171be:	68e0      	ldr	r0, [r4, #12]
 80171c0:	4285      	cmp	r5, r0
 80171c2:	d218      	bcs.n	80171f6 <rcl_wait_set_add_guard_condition+0x46>
 80171c4:	68a0      	ldr	r0, [r4, #8]
 80171c6:	1c6e      	adds	r6, r5, #1
 80171c8:	60de      	str	r6, [r3, #12]
 80171ca:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80171ce:	b102      	cbz	r2, 80171d2 <rcl_wait_set_add_guard_condition+0x22>
 80171d0:	6015      	str	r5, [r2, #0]
 80171d2:	4608      	mov	r0, r1
 80171d4:	f002 f8dc 	bl	8019390 <rcl_guard_condition_get_rmw_handle>
 80171d8:	b190      	cbz	r0, 8017200 <rcl_wait_set_add_guard_condition+0x50>
 80171da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80171dc:	6842      	ldr	r2, [r0, #4]
 80171de:	695b      	ldr	r3, [r3, #20]
 80171e0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80171e4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80171e6:	6913      	ldr	r3, [r2, #16]
 80171e8:	3301      	adds	r3, #1
 80171ea:	6113      	str	r3, [r2, #16]
 80171ec:	2000      	movs	r0, #0
 80171ee:	bd70      	pop	{r4, r5, r6, pc}
 80171f0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80171f4:	bd70      	pop	{r4, r5, r6, pc}
 80171f6:	f240 3086 	movw	r0, #902	; 0x386
 80171fa:	bd70      	pop	{r4, r5, r6, pc}
 80171fc:	200b      	movs	r0, #11
 80171fe:	4770      	bx	lr
 8017200:	2001      	movs	r0, #1
 8017202:	bd70      	pop	{r4, r5, r6, pc}
 8017204:	200b      	movs	r0, #11
 8017206:	bd70      	pop	{r4, r5, r6, pc}

08017208 <rcl_wait_set_add_timer>:
 8017208:	b340      	cbz	r0, 801725c <rcl_wait_set_add_timer+0x54>
 801720a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801720c:	b570      	push	{r4, r5, r6, lr}
 801720e:	4604      	mov	r4, r0
 8017210:	b1f3      	cbz	r3, 8017250 <rcl_wait_set_add_timer+0x48>
 8017212:	b329      	cbz	r1, 8017260 <rcl_wait_set_add_timer+0x58>
 8017214:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8017216:	6965      	ldr	r5, [r4, #20]
 8017218:	42a8      	cmp	r0, r5
 801721a:	d21c      	bcs.n	8017256 <rcl_wait_set_add_timer+0x4e>
 801721c:	6925      	ldr	r5, [r4, #16]
 801721e:	1c46      	adds	r6, r0, #1
 8017220:	641e      	str	r6, [r3, #64]	; 0x40
 8017222:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8017226:	b102      	cbz	r2, 801722a <rcl_wait_set_add_timer+0x22>
 8017228:	6010      	str	r0, [r2, #0]
 801722a:	4608      	mov	r0, r1
 801722c:	f7ff faa4 	bl	8016778 <rcl_timer_get_guard_condition>
 8017230:	b168      	cbz	r0, 801724e <rcl_wait_set_add_timer+0x46>
 8017232:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017234:	68e3      	ldr	r3, [r4, #12]
 8017236:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8017238:	3b01      	subs	r3, #1
 801723a:	441d      	add	r5, r3
 801723c:	f002 f8a8 	bl	8019390 <rcl_guard_condition_get_rmw_handle>
 8017240:	b180      	cbz	r0, 8017264 <rcl_wait_set_add_timer+0x5c>
 8017242:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017244:	6842      	ldr	r2, [r0, #4]
 8017246:	695b      	ldr	r3, [r3, #20]
 8017248:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801724c:	2000      	movs	r0, #0
 801724e:	bd70      	pop	{r4, r5, r6, pc}
 8017250:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017254:	bd70      	pop	{r4, r5, r6, pc}
 8017256:	f240 3086 	movw	r0, #902	; 0x386
 801725a:	bd70      	pop	{r4, r5, r6, pc}
 801725c:	200b      	movs	r0, #11
 801725e:	4770      	bx	lr
 8017260:	200b      	movs	r0, #11
 8017262:	bd70      	pop	{r4, r5, r6, pc}
 8017264:	2001      	movs	r0, #1
 8017266:	bd70      	pop	{r4, r5, r6, pc}

08017268 <rcl_wait_set_add_client>:
 8017268:	b320      	cbz	r0, 80172b4 <rcl_wait_set_add_client+0x4c>
 801726a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801726c:	b570      	push	{r4, r5, r6, lr}
 801726e:	4604      	mov	r4, r0
 8017270:	b1d3      	cbz	r3, 80172a8 <rcl_wait_set_add_client+0x40>
 8017272:	b319      	cbz	r1, 80172bc <rcl_wait_set_add_client+0x54>
 8017274:	699d      	ldr	r5, [r3, #24]
 8017276:	69e0      	ldr	r0, [r4, #28]
 8017278:	4285      	cmp	r5, r0
 801727a:	d218      	bcs.n	80172ae <rcl_wait_set_add_client+0x46>
 801727c:	69a0      	ldr	r0, [r4, #24]
 801727e:	1c6e      	adds	r6, r5, #1
 8017280:	619e      	str	r6, [r3, #24]
 8017282:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017286:	b102      	cbz	r2, 801728a <rcl_wait_set_add_client+0x22>
 8017288:	6015      	str	r5, [r2, #0]
 801728a:	4608      	mov	r0, r1
 801728c:	f7fe f842 	bl	8015314 <rcl_client_get_rmw_handle>
 8017290:	b190      	cbz	r0, 80172b8 <rcl_wait_set_add_client+0x50>
 8017292:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017294:	6842      	ldr	r2, [r0, #4]
 8017296:	6a1b      	ldr	r3, [r3, #32]
 8017298:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801729c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801729e:	69d3      	ldr	r3, [r2, #28]
 80172a0:	3301      	adds	r3, #1
 80172a2:	61d3      	str	r3, [r2, #28]
 80172a4:	2000      	movs	r0, #0
 80172a6:	bd70      	pop	{r4, r5, r6, pc}
 80172a8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80172ac:	bd70      	pop	{r4, r5, r6, pc}
 80172ae:	f240 3086 	movw	r0, #902	; 0x386
 80172b2:	bd70      	pop	{r4, r5, r6, pc}
 80172b4:	200b      	movs	r0, #11
 80172b6:	4770      	bx	lr
 80172b8:	2001      	movs	r0, #1
 80172ba:	bd70      	pop	{r4, r5, r6, pc}
 80172bc:	200b      	movs	r0, #11
 80172be:	bd70      	pop	{r4, r5, r6, pc}

080172c0 <rcl_wait_set_add_service>:
 80172c0:	b320      	cbz	r0, 801730c <rcl_wait_set_add_service+0x4c>
 80172c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80172c4:	b570      	push	{r4, r5, r6, lr}
 80172c6:	4604      	mov	r4, r0
 80172c8:	b1d3      	cbz	r3, 8017300 <rcl_wait_set_add_service+0x40>
 80172ca:	b319      	cbz	r1, 8017314 <rcl_wait_set_add_service+0x54>
 80172cc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80172ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80172d0:	4285      	cmp	r5, r0
 80172d2:	d218      	bcs.n	8017306 <rcl_wait_set_add_service+0x46>
 80172d4:	6a20      	ldr	r0, [r4, #32]
 80172d6:	1c6e      	adds	r6, r5, #1
 80172d8:	625e      	str	r6, [r3, #36]	; 0x24
 80172da:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80172de:	b102      	cbz	r2, 80172e2 <rcl_wait_set_add_service+0x22>
 80172e0:	6015      	str	r5, [r2, #0]
 80172e2:	4608      	mov	r0, r1
 80172e4:	f7fe fe34 	bl	8015f50 <rcl_service_get_rmw_handle>
 80172e8:	b190      	cbz	r0, 8017310 <rcl_wait_set_add_service+0x50>
 80172ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80172ec:	6842      	ldr	r2, [r0, #4]
 80172ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172f0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80172f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80172f6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80172f8:	3301      	adds	r3, #1
 80172fa:	6293      	str	r3, [r2, #40]	; 0x28
 80172fc:	2000      	movs	r0, #0
 80172fe:	bd70      	pop	{r4, r5, r6, pc}
 8017300:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017304:	bd70      	pop	{r4, r5, r6, pc}
 8017306:	f240 3086 	movw	r0, #902	; 0x386
 801730a:	bd70      	pop	{r4, r5, r6, pc}
 801730c:	200b      	movs	r0, #11
 801730e:	4770      	bx	lr
 8017310:	2001      	movs	r0, #1
 8017312:	bd70      	pop	{r4, r5, r6, pc}
 8017314:	200b      	movs	r0, #11
 8017316:	bd70      	pop	{r4, r5, r6, pc}

08017318 <rcl_wait>:
 8017318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801731c:	b08f      	sub	sp, #60	; 0x3c
 801731e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017322:	2800      	cmp	r0, #0
 8017324:	f000 814c 	beq.w	80175c0 <rcl_wait+0x2a8>
 8017328:	6b05      	ldr	r5, [r0, #48]	; 0x30
 801732a:	4604      	mov	r4, r0
 801732c:	2d00      	cmp	r5, #0
 801732e:	f000 80bc 	beq.w	80174aa <rcl_wait+0x192>
 8017332:	6843      	ldr	r3, [r0, #4]
 8017334:	b973      	cbnz	r3, 8017354 <rcl_wait+0x3c>
 8017336:	68e3      	ldr	r3, [r4, #12]
 8017338:	b963      	cbnz	r3, 8017354 <rcl_wait+0x3c>
 801733a:	6963      	ldr	r3, [r4, #20]
 801733c:	b953      	cbnz	r3, 8017354 <rcl_wait+0x3c>
 801733e:	69e3      	ldr	r3, [r4, #28]
 8017340:	b943      	cbnz	r3, 8017354 <rcl_wait+0x3c>
 8017342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017344:	b933      	cbnz	r3, 8017354 <rcl_wait+0x3c>
 8017346:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017348:	b923      	cbnz	r3, 8017354 <rcl_wait+0x3c>
 801734a:	f240 3085 	movw	r0, #901	; 0x385
 801734e:	b00f      	add	sp, #60	; 0x3c
 8017350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017354:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017358:	2a01      	cmp	r2, #1
 801735a:	f173 0300 	sbcs.w	r3, r3, #0
 801735e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8017360:	db56      	blt.n	8017410 <rcl_wait+0xf8>
 8017362:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8017366:	2900      	cmp	r1, #0
 8017368:	f000 8149 	beq.w	80175fe <rcl_wait+0x2e6>
 801736c:	2300      	movs	r3, #0
 801736e:	9307      	str	r3, [sp, #28]
 8017370:	469b      	mov	fp, r3
 8017372:	f04f 0800 	mov.w	r8, #0
 8017376:	f04f 0900 	mov.w	r9, #0
 801737a:	e00d      	b.n	8017398 <rcl_wait+0x80>
 801737c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801737e:	6922      	ldr	r2, [r4, #16]
 8017380:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8017382:	f842 000a 	str.w	r0, [r2, sl]
 8017386:	f118 0801 	adds.w	r8, r8, #1
 801738a:	f149 0900 	adc.w	r9, r9, #0
 801738e:	2300      	movs	r3, #0
 8017390:	4599      	cmp	r9, r3
 8017392:	bf08      	it	eq
 8017394:	4588      	cmpeq	r8, r1
 8017396:	d243      	bcs.n	8017420 <rcl_wait+0x108>
 8017398:	6922      	ldr	r2, [r4, #16]
 801739a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 801739e:	f852 000a 	ldr.w	r0, [r2, sl]
 80173a2:	2800      	cmp	r0, #0
 80173a4:	d0ef      	beq.n	8017386 <rcl_wait+0x6e>
 80173a6:	68e2      	ldr	r2, [r4, #12]
 80173a8:	6969      	ldr	r1, [r5, #20]
 80173aa:	4442      	add	r2, r8
 80173ac:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80173b0:	b13b      	cbz	r3, 80173c2 <rcl_wait+0xaa>
 80173b2:	692a      	ldr	r2, [r5, #16]
 80173b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80173b8:	6921      	ldr	r1, [r4, #16]
 80173ba:	3201      	adds	r2, #1
 80173bc:	f851 000a 	ldr.w	r0, [r1, sl]
 80173c0:	612a      	str	r2, [r5, #16]
 80173c2:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 80173c6:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 80173ca:	f7ff f9c3 	bl	8016754 <rcl_timer_is_canceled>
 80173ce:	2800      	cmp	r0, #0
 80173d0:	d1bd      	bne.n	801734e <rcl_wait+0x36>
 80173d2:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80173d6:	2a00      	cmp	r2, #0
 80173d8:	d1d0      	bne.n	801737c <rcl_wait+0x64>
 80173da:	6922      	ldr	r2, [r4, #16]
 80173dc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80173e0:	f852 000a 	ldr.w	r0, [r2, sl]
 80173e4:	a90a      	add	r1, sp, #40	; 0x28
 80173e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80173ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80173ee:	f7ff f98d 	bl	801670c <rcl_timer_get_time_until_next_call>
 80173f2:	2800      	cmp	r0, #0
 80173f4:	d1ab      	bne.n	801734e <rcl_wait+0x36>
 80173f6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80173fa:	42b2      	cmp	r2, r6
 80173fc:	eb73 0107 	sbcs.w	r1, r3, r7
 8017400:	da03      	bge.n	801740a <rcl_wait+0xf2>
 8017402:	461f      	mov	r7, r3
 8017404:	2301      	movs	r3, #1
 8017406:	4616      	mov	r6, r2
 8017408:	9307      	str	r3, [sp, #28]
 801740a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801740c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801740e:	e7ba      	b.n	8017386 <rcl_wait+0x6e>
 8017410:	2900      	cmp	r1, #0
 8017412:	f000 80de 	beq.w	80175d2 <rcl_wait+0x2ba>
 8017416:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801741a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801741e:	e7a5      	b.n	801736c <rcl_wait+0x54>
 8017420:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017424:	4313      	orrs	r3, r2
 8017426:	d145      	bne.n	80174b4 <rcl_wait+0x19c>
 8017428:	2300      	movs	r3, #0
 801742a:	2200      	movs	r2, #0
 801742c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017430:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017434:	ab0a      	add	r3, sp, #40	; 0x28
 8017436:	9302      	str	r3, [sp, #8]
 8017438:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801743a:	9301      	str	r3, [sp, #4]
 801743c:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8017440:	9300      	str	r3, [sp, #0]
 8017442:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8017446:	f105 031c 	add.w	r3, r5, #28
 801744a:	f105 0110 	add.w	r1, r5, #16
 801744e:	1d28      	adds	r0, r5, #4
 8017450:	f000 feae 	bl	80181b0 <rmw_wait>
 8017454:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017458:	4680      	mov	r8, r0
 801745a:	b30a      	cbz	r2, 80174a0 <rcl_wait+0x188>
 801745c:	2500      	movs	r5, #0
 801745e:	462f      	mov	r7, r5
 8017460:	e004      	b.n	801746c <rcl_wait+0x154>
 8017462:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017466:	3501      	adds	r5, #1
 8017468:	42aa      	cmp	r2, r5
 801746a:	d919      	bls.n	80174a0 <rcl_wait+0x188>
 801746c:	6922      	ldr	r2, [r4, #16]
 801746e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017472:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8017476:	00ae      	lsls	r6, r5, #2
 8017478:	2800      	cmp	r0, #0
 801747a:	d0f3      	beq.n	8017464 <rcl_wait+0x14c>
 801747c:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 8017480:	f7ff f90c 	bl	801669c <rcl_timer_is_ready>
 8017484:	2800      	cmp	r0, #0
 8017486:	f47f af62 	bne.w	801734e <rcl_wait+0x36>
 801748a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 801748e:	2a00      	cmp	r2, #0
 8017490:	d1e7      	bne.n	8017462 <rcl_wait+0x14a>
 8017492:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017494:	6921      	ldr	r1, [r4, #16]
 8017496:	518a      	str	r2, [r1, r6]
 8017498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801749a:	3501      	adds	r5, #1
 801749c:	42aa      	cmp	r2, r5
 801749e:	d8e5      	bhi.n	801746c <rcl_wait+0x154>
 80174a0:	f038 0002 	bics.w	r0, r8, #2
 80174a4:	d029      	beq.n	80174fa <rcl_wait+0x1e2>
 80174a6:	2001      	movs	r0, #1
 80174a8:	e751      	b.n	801734e <rcl_wait+0x36>
 80174aa:	f44f 7061 	mov.w	r0, #900	; 0x384
 80174ae:	b00f      	add	sp, #60	; 0x3c
 80174b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80174b8:	2a01      	cmp	r2, #1
 80174ba:	f173 0300 	sbcs.w	r3, r3, #0
 80174be:	f2c0 8083 	blt.w	80175c8 <rcl_wait+0x2b0>
 80174c2:	2e00      	cmp	r6, #0
 80174c4:	f177 0300 	sbcs.w	r3, r7, #0
 80174c8:	bfbc      	itt	lt
 80174ca:	2600      	movlt	r6, #0
 80174cc:	2700      	movlt	r7, #0
 80174ce:	a34e      	add	r3, pc, #312	; (adr r3, 8017608 <rcl_wait+0x2f0>)
 80174d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174d4:	4630      	mov	r0, r6
 80174d6:	4639      	mov	r1, r7
 80174d8:	f7e9 fbe6 	bl	8000ca8 <__aeabi_ldivmod>
 80174dc:	a34a      	add	r3, pc, #296	; (adr r3, 8017608 <rcl_wait+0x2f0>)
 80174de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174e2:	4680      	mov	r8, r0
 80174e4:	4689      	mov	r9, r1
 80174e6:	4630      	mov	r0, r6
 80174e8:	4639      	mov	r1, r7
 80174ea:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80174ee:	f7e9 fbdb 	bl	8000ca8 <__aeabi_ldivmod>
 80174f2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80174f6:	ab0a      	add	r3, sp, #40	; 0x28
 80174f8:	e79d      	b.n	8017436 <rcl_wait+0x11e>
 80174fa:	6866      	ldr	r6, [r4, #4]
 80174fc:	4602      	mov	r2, r0
 80174fe:	b91e      	cbnz	r6, 8017508 <rcl_wait+0x1f0>
 8017500:	e00d      	b.n	801751e <rcl_wait+0x206>
 8017502:	3201      	adds	r2, #1
 8017504:	42b2      	cmp	r2, r6
 8017506:	d00a      	beq.n	801751e <rcl_wait+0x206>
 8017508:	6899      	ldr	r1, [r3, #8]
 801750a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801750e:	2900      	cmp	r1, #0
 8017510:	d1f7      	bne.n	8017502 <rcl_wait+0x1ea>
 8017512:	6825      	ldr	r5, [r4, #0]
 8017514:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8017518:	3201      	adds	r2, #1
 801751a:	42b2      	cmp	r2, r6
 801751c:	d1f4      	bne.n	8017508 <rcl_wait+0x1f0>
 801751e:	68e6      	ldr	r6, [r4, #12]
 8017520:	2200      	movs	r2, #0
 8017522:	b91e      	cbnz	r6, 801752c <rcl_wait+0x214>
 8017524:	e00d      	b.n	8017542 <rcl_wait+0x22a>
 8017526:	3201      	adds	r2, #1
 8017528:	42b2      	cmp	r2, r6
 801752a:	d00a      	beq.n	8017542 <rcl_wait+0x22a>
 801752c:	6959      	ldr	r1, [r3, #20]
 801752e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017532:	2900      	cmp	r1, #0
 8017534:	d1f7      	bne.n	8017526 <rcl_wait+0x20e>
 8017536:	68a5      	ldr	r5, [r4, #8]
 8017538:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801753c:	3201      	adds	r2, #1
 801753e:	42b2      	cmp	r2, r6
 8017540:	d1f4      	bne.n	801752c <rcl_wait+0x214>
 8017542:	69e6      	ldr	r6, [r4, #28]
 8017544:	2200      	movs	r2, #0
 8017546:	b91e      	cbnz	r6, 8017550 <rcl_wait+0x238>
 8017548:	e00d      	b.n	8017566 <rcl_wait+0x24e>
 801754a:	3201      	adds	r2, #1
 801754c:	42b2      	cmp	r2, r6
 801754e:	d00a      	beq.n	8017566 <rcl_wait+0x24e>
 8017550:	6a19      	ldr	r1, [r3, #32]
 8017552:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017556:	2900      	cmp	r1, #0
 8017558:	d1f7      	bne.n	801754a <rcl_wait+0x232>
 801755a:	69a5      	ldr	r5, [r4, #24]
 801755c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8017560:	3201      	adds	r2, #1
 8017562:	42b2      	cmp	r2, r6
 8017564:	d1f4      	bne.n	8017550 <rcl_wait+0x238>
 8017566:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017568:	2200      	movs	r2, #0
 801756a:	b91e      	cbnz	r6, 8017574 <rcl_wait+0x25c>
 801756c:	e00d      	b.n	801758a <rcl_wait+0x272>
 801756e:	3201      	adds	r2, #1
 8017570:	4296      	cmp	r6, r2
 8017572:	d00a      	beq.n	801758a <rcl_wait+0x272>
 8017574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8017576:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801757a:	2900      	cmp	r1, #0
 801757c:	d1f7      	bne.n	801756e <rcl_wait+0x256>
 801757e:	6a25      	ldr	r5, [r4, #32]
 8017580:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8017584:	3201      	adds	r2, #1
 8017586:	4296      	cmp	r6, r2
 8017588:	d1f4      	bne.n	8017574 <rcl_wait+0x25c>
 801758a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801758c:	2200      	movs	r2, #0
 801758e:	b91e      	cbnz	r6, 8017598 <rcl_wait+0x280>
 8017590:	e00d      	b.n	80175ae <rcl_wait+0x296>
 8017592:	3201      	adds	r2, #1
 8017594:	42b2      	cmp	r2, r6
 8017596:	d00a      	beq.n	80175ae <rcl_wait+0x296>
 8017598:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801759a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801759e:	2900      	cmp	r1, #0
 80175a0:	d1f7      	bne.n	8017592 <rcl_wait+0x27a>
 80175a2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80175a4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80175a8:	3201      	adds	r2, #1
 80175aa:	42b2      	cmp	r2, r6
 80175ac:	d1f4      	bne.n	8017598 <rcl_wait+0x280>
 80175ae:	f1b8 0f02 	cmp.w	r8, #2
 80175b2:	f47f aecc 	bne.w	801734e <rcl_wait+0x36>
 80175b6:	9b07      	ldr	r3, [sp, #28]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	bf08      	it	eq
 80175bc:	2002      	moveq	r0, #2
 80175be:	e6c6      	b.n	801734e <rcl_wait+0x36>
 80175c0:	200b      	movs	r0, #11
 80175c2:	b00f      	add	sp, #60	; 0x3c
 80175c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175c8:	9b07      	ldr	r3, [sp, #28]
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	f47f af79 	bne.w	80174c2 <rcl_wait+0x1aa>
 80175d0:	e731      	b.n	8017436 <rcl_wait+0x11e>
 80175d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80175d6:	4313      	orrs	r3, r2
 80175d8:	bf08      	it	eq
 80175da:	9107      	streq	r1, [sp, #28]
 80175dc:	f43f af24 	beq.w	8017428 <rcl_wait+0x110>
 80175e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80175e4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80175e8:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80175ec:	2a01      	cmp	r2, #1
 80175ee:	f173 0300 	sbcs.w	r3, r3, #0
 80175f2:	f04f 0300 	mov.w	r3, #0
 80175f6:	9307      	str	r3, [sp, #28]
 80175f8:	f6bf af63 	bge.w	80174c2 <rcl_wait+0x1aa>
 80175fc:	e71b      	b.n	8017436 <rcl_wait+0x11e>
 80175fe:	4632      	mov	r2, r6
 8017600:	463b      	mov	r3, r7
 8017602:	e7f3      	b.n	80175ec <rcl_wait+0x2d4>
 8017604:	f3af 8000 	nop.w
 8017608:	3b9aca00 	.word	0x3b9aca00
 801760c:	00000000 	.word	0x00000000

08017610 <__atomic_load_8>:
 8017610:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8017614:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8017618:	4b14      	ldr	r3, [pc, #80]	; (801766c <__atomic_load_8+0x5c>)
 801761a:	4a15      	ldr	r2, [pc, #84]	; (8017670 <__atomic_load_8+0x60>)
 801761c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8017620:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017624:	fb03 f301 	mul.w	r3, r3, r1
 8017628:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 801762c:	fba2 1203 	umull	r1, r2, r2, r3
 8017630:	0912      	lsrs	r2, r2, #4
 8017632:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8017636:	b430      	push	{r4, r5}
 8017638:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 801763c:	4c0d      	ldr	r4, [pc, #52]	; (8017674 <__atomic_load_8+0x64>)
 801763e:	1a9b      	subs	r3, r3, r2
 8017640:	18e1      	adds	r1, r4, r3
 8017642:	f04f 0501 	mov.w	r5, #1
 8017646:	e8d1 2f4f 	ldrexb	r2, [r1]
 801764a:	e8c1 5f4c 	strexb	ip, r5, [r1]
 801764e:	f1bc 0f00 	cmp.w	ip, #0
 8017652:	d1f8      	bne.n	8017646 <__atomic_load_8+0x36>
 8017654:	f3bf 8f5b 	dmb	ish
 8017658:	b2d2      	uxtb	r2, r2
 801765a:	2a00      	cmp	r2, #0
 801765c:	d1f3      	bne.n	8017646 <__atomic_load_8+0x36>
 801765e:	e9d0 0100 	ldrd	r0, r1, [r0]
 8017662:	f3bf 8f5b 	dmb	ish
 8017666:	54e2      	strb	r2, [r4, r3]
 8017668:	bc30      	pop	{r4, r5}
 801766a:	4770      	bx	lr
 801766c:	27d4eb2d 	.word	0x27d4eb2d
 8017670:	b21642c9 	.word	0xb21642c9
 8017674:	20010478 	.word	0x20010478

08017678 <__atomic_store_8>:
 8017678:	b4f0      	push	{r4, r5, r6, r7}
 801767a:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 801767e:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8017682:	4914      	ldr	r1, [pc, #80]	; (80176d4 <__atomic_store_8+0x5c>)
 8017684:	4c14      	ldr	r4, [pc, #80]	; (80176d8 <__atomic_store_8+0x60>)
 8017686:	4e15      	ldr	r6, [pc, #84]	; (80176dc <__atomic_store_8+0x64>)
 8017688:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 801768c:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8017690:	fb01 f105 	mul.w	r1, r1, r5
 8017694:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8017698:	fba4 5401 	umull	r5, r4, r4, r1
 801769c:	0924      	lsrs	r4, r4, #4
 801769e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80176a2:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 80176a6:	1b09      	subs	r1, r1, r4
 80176a8:	1875      	adds	r5, r6, r1
 80176aa:	f04f 0701 	mov.w	r7, #1
 80176ae:	e8d5 4f4f 	ldrexb	r4, [r5]
 80176b2:	e8c5 7f4c 	strexb	ip, r7, [r5]
 80176b6:	f1bc 0f00 	cmp.w	ip, #0
 80176ba:	d1f8      	bne.n	80176ae <__atomic_store_8+0x36>
 80176bc:	f3bf 8f5b 	dmb	ish
 80176c0:	b2e4      	uxtb	r4, r4
 80176c2:	2c00      	cmp	r4, #0
 80176c4:	d1f3      	bne.n	80176ae <__atomic_store_8+0x36>
 80176c6:	e9c0 2300 	strd	r2, r3, [r0]
 80176ca:	f3bf 8f5b 	dmb	ish
 80176ce:	5474      	strb	r4, [r6, r1]
 80176d0:	bcf0      	pop	{r4, r5, r6, r7}
 80176d2:	4770      	bx	lr
 80176d4:	27d4eb2d 	.word	0x27d4eb2d
 80176d8:	b21642c9 	.word	0xb21642c9
 80176dc:	20010478 	.word	0x20010478

080176e0 <__atomic_exchange_8>:
 80176e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80176e4:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 80176e8:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 80176ec:	4c16      	ldr	r4, [pc, #88]	; (8017748 <__atomic_exchange_8+0x68>)
 80176ee:	4917      	ldr	r1, [pc, #92]	; (801774c <__atomic_exchange_8+0x6c>)
 80176f0:	4e17      	ldr	r6, [pc, #92]	; (8017750 <__atomic_exchange_8+0x70>)
 80176f2:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 80176f6:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 80176fa:	fb04 f505 	mul.w	r5, r4, r5
 80176fe:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8017702:	fba1 4105 	umull	r4, r1, r1, r5
 8017706:	0909      	lsrs	r1, r1, #4
 8017708:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801770c:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8017710:	1a6c      	subs	r4, r5, r1
 8017712:	1931      	adds	r1, r6, r4
 8017714:	f04f 0701 	mov.w	r7, #1
 8017718:	e8d1 5f4f 	ldrexb	r5, [r1]
 801771c:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8017720:	f1bc 0f00 	cmp.w	ip, #0
 8017724:	d1f8      	bne.n	8017718 <__atomic_exchange_8+0x38>
 8017726:	f3bf 8f5b 	dmb	ish
 801772a:	b2ed      	uxtb	r5, r5
 801772c:	2d00      	cmp	r5, #0
 801772e:	d1f3      	bne.n	8017718 <__atomic_exchange_8+0x38>
 8017730:	e9d0 8900 	ldrd	r8, r9, [r0]
 8017734:	e9c0 2300 	strd	r2, r3, [r0]
 8017738:	f3bf 8f5b 	dmb	ish
 801773c:	5535      	strb	r5, [r6, r4]
 801773e:	4640      	mov	r0, r8
 8017740:	4649      	mov	r1, r9
 8017742:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8017746:	4770      	bx	lr
 8017748:	27d4eb2d 	.word	0x27d4eb2d
 801774c:	b21642c9 	.word	0xb21642c9
 8017750:	20010478 	.word	0x20010478

08017754 <__atomic_fetch_add_8>:
 8017754:	b4f0      	push	{r4, r5, r6, r7}
 8017756:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 801775a:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 801775e:	4c17      	ldr	r4, [pc, #92]	; (80177bc <__atomic_fetch_add_8+0x68>)
 8017760:	4917      	ldr	r1, [pc, #92]	; (80177c0 <__atomic_fetch_add_8+0x6c>)
 8017762:	4e18      	ldr	r6, [pc, #96]	; (80177c4 <__atomic_fetch_add_8+0x70>)
 8017764:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8017768:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 801776c:	fb04 f505 	mul.w	r5, r4, r5
 8017770:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8017774:	fba1 4105 	umull	r4, r1, r1, r5
 8017778:	0909      	lsrs	r1, r1, #4
 801777a:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801777e:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8017782:	1a6c      	subs	r4, r5, r1
 8017784:	1931      	adds	r1, r6, r4
 8017786:	f04f 0701 	mov.w	r7, #1
 801778a:	e8d1 5f4f 	ldrexb	r5, [r1]
 801778e:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8017792:	f1bc 0f00 	cmp.w	ip, #0
 8017796:	d1f8      	bne.n	801778a <__atomic_fetch_add_8+0x36>
 8017798:	f3bf 8f5b 	dmb	ish
 801779c:	b2ed      	uxtb	r5, r5
 801779e:	2d00      	cmp	r5, #0
 80177a0:	d1f3      	bne.n	801778a <__atomic_fetch_add_8+0x36>
 80177a2:	e9d0 7100 	ldrd	r7, r1, [r0]
 80177a6:	18ba      	adds	r2, r7, r2
 80177a8:	eb41 0303 	adc.w	r3, r1, r3
 80177ac:	e9c0 2300 	strd	r2, r3, [r0]
 80177b0:	f3bf 8f5b 	dmb	ish
 80177b4:	5535      	strb	r5, [r6, r4]
 80177b6:	4638      	mov	r0, r7
 80177b8:	bcf0      	pop	{r4, r5, r6, r7}
 80177ba:	4770      	bx	lr
 80177bc:	27d4eb2d 	.word	0x27d4eb2d
 80177c0:	b21642c9 	.word	0xb21642c9
 80177c4:	20010478 	.word	0x20010478

080177c8 <rcutils_is_directory>:
 80177c8:	2000      	movs	r0, #0
 80177ca:	4770      	bx	lr

080177cc <rcutils_join_path>:
 80177cc:	b082      	sub	sp, #8
 80177ce:	e88d 000c 	stmia.w	sp, {r2, r3}
 80177d2:	2000      	movs	r0, #0
 80177d4:	b002      	add	sp, #8
 80177d6:	4770      	bx	lr

080177d8 <rcutils_to_native_path>:
 80177d8:	b084      	sub	sp, #16
 80177da:	a801      	add	r0, sp, #4
 80177dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80177e0:	b004      	add	sp, #16
 80177e2:	2000      	movs	r0, #0
 80177e4:	4770      	bx	lr
 80177e6:	bf00      	nop

080177e8 <rcutils_format_string_limit>:
 80177e8:	b40f      	push	{r0, r1, r2, r3}
 80177ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80177ec:	b083      	sub	sp, #12
 80177ee:	ac08      	add	r4, sp, #32
 80177f0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80177f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80177f6:	b34e      	cbz	r6, 801784c <rcutils_format_string_limit+0x64>
 80177f8:	a808      	add	r0, sp, #32
 80177fa:	f7f7 fcd5 	bl	800f1a8 <rcutils_allocator_is_valid>
 80177fe:	b328      	cbz	r0, 801784c <rcutils_format_string_limit+0x64>
 8017800:	2100      	movs	r1, #0
 8017802:	ab0f      	add	r3, sp, #60	; 0x3c
 8017804:	4608      	mov	r0, r1
 8017806:	4632      	mov	r2, r6
 8017808:	e9cd 3300 	strd	r3, r3, [sp]
 801780c:	f000 f904 	bl	8017a18 <rcutils_vsnprintf>
 8017810:	1c43      	adds	r3, r0, #1
 8017812:	4605      	mov	r5, r0
 8017814:	d01a      	beq.n	801784c <rcutils_format_string_limit+0x64>
 8017816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017818:	990c      	ldr	r1, [sp, #48]	; 0x30
 801781a:	1c47      	adds	r7, r0, #1
 801781c:	429f      	cmp	r7, r3
 801781e:	bf84      	itt	hi
 8017820:	461f      	movhi	r7, r3
 8017822:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8017826:	4638      	mov	r0, r7
 8017828:	9b08      	ldr	r3, [sp, #32]
 801782a:	4798      	blx	r3
 801782c:	4604      	mov	r4, r0
 801782e:	b168      	cbz	r0, 801784c <rcutils_format_string_limit+0x64>
 8017830:	9b01      	ldr	r3, [sp, #4]
 8017832:	4632      	mov	r2, r6
 8017834:	4639      	mov	r1, r7
 8017836:	f000 f8ef 	bl	8017a18 <rcutils_vsnprintf>
 801783a:	2800      	cmp	r0, #0
 801783c:	db02      	blt.n	8017844 <rcutils_format_string_limit+0x5c>
 801783e:	2300      	movs	r3, #0
 8017840:	5563      	strb	r3, [r4, r5]
 8017842:	e004      	b.n	801784e <rcutils_format_string_limit+0x66>
 8017844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017846:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017848:	4620      	mov	r0, r4
 801784a:	4798      	blx	r3
 801784c:	2400      	movs	r4, #0
 801784e:	4620      	mov	r0, r4
 8017850:	b003      	add	sp, #12
 8017852:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017856:	b004      	add	sp, #16
 8017858:	4770      	bx	lr
 801785a:	bf00      	nop

0801785c <rcutils_get_env>:
 801785c:	b168      	cbz	r0, 801787a <rcutils_get_env+0x1e>
 801785e:	b510      	push	{r4, lr}
 8017860:	460c      	mov	r4, r1
 8017862:	b129      	cbz	r1, 8017870 <rcutils_get_env+0x14>
 8017864:	f001 ff10 	bl	8019688 <getenv>
 8017868:	b120      	cbz	r0, 8017874 <rcutils_get_env+0x18>
 801786a:	6020      	str	r0, [r4, #0]
 801786c:	2000      	movs	r0, #0
 801786e:	bd10      	pop	{r4, pc}
 8017870:	4803      	ldr	r0, [pc, #12]	; (8017880 <rcutils_get_env+0x24>)
 8017872:	bd10      	pop	{r4, pc}
 8017874:	4b03      	ldr	r3, [pc, #12]	; (8017884 <rcutils_get_env+0x28>)
 8017876:	6023      	str	r3, [r4, #0]
 8017878:	bd10      	pop	{r4, pc}
 801787a:	4803      	ldr	r0, [pc, #12]	; (8017888 <rcutils_get_env+0x2c>)
 801787c:	4770      	bx	lr
 801787e:	bf00      	nop
 8017880:	0801f2dc 	.word	0x0801f2dc
 8017884:	0801f400 	.word	0x0801f400
 8017888:	0801f2c0 	.word	0x0801f2c0

0801788c <rcutils_repl_str>:
 801788c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017890:	ed2d 8b02 	vpush	{d8}
 8017894:	b087      	sub	sp, #28
 8017896:	4680      	mov	r8, r0
 8017898:	4608      	mov	r0, r1
 801789a:	f8cd 8000 	str.w	r8, [sp]
 801789e:	ee08 2a10 	vmov	s16, r2
 80178a2:	468a      	mov	sl, r1
 80178a4:	4699      	mov	r9, r3
 80178a6:	f7e8 fc9d 	bl	80001e4 <strlen>
 80178aa:	2600      	movs	r6, #0
 80178ac:	4647      	mov	r7, r8
 80178ae:	9001      	str	r0, [sp, #4]
 80178b0:	46b3      	mov	fp, r6
 80178b2:	2510      	movs	r5, #16
 80178b4:	46b0      	mov	r8, r6
 80178b6:	e01d      	b.n	80178f4 <rcutils_repl_str+0x68>
 80178b8:	f10b 0b01 	add.w	fp, fp, #1
 80178bc:	455e      	cmp	r6, fp
 80178be:	d211      	bcs.n	80178e4 <rcutils_repl_str+0x58>
 80178c0:	442e      	add	r6, r5
 80178c2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80178c6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80178ca:	00b1      	lsls	r1, r6, #2
 80178cc:	4798      	blx	r3
 80178ce:	2800      	cmp	r0, #0
 80178d0:	f000 8084 	beq.w	80179dc <rcutils_repl_str+0x150>
 80178d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80178d8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80178dc:	bf28      	it	cs
 80178de:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 80178e2:	4680      	mov	r8, r0
 80178e4:	9a00      	ldr	r2, [sp, #0]
 80178e6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80178ea:	1aa2      	subs	r2, r4, r2
 80178ec:	f843 2c04 	str.w	r2, [r3, #-4]
 80178f0:	9b01      	ldr	r3, [sp, #4]
 80178f2:	18e7      	adds	r7, r4, r3
 80178f4:	4651      	mov	r1, sl
 80178f6:	4638      	mov	r0, r7
 80178f8:	f002 fbdb 	bl	801a0b2 <strstr>
 80178fc:	4604      	mov	r4, r0
 80178fe:	4640      	mov	r0, r8
 8017900:	2c00      	cmp	r4, #0
 8017902:	d1d9      	bne.n	80178b8 <rcutils_repl_str+0x2c>
 8017904:	46b8      	mov	r8, r7
 8017906:	4607      	mov	r7, r0
 8017908:	4640      	mov	r0, r8
 801790a:	f7e8 fc6b 	bl	80001e4 <strlen>
 801790e:	9b00      	ldr	r3, [sp, #0]
 8017910:	eba8 0303 	sub.w	r3, r8, r3
 8017914:	181d      	adds	r5, r3, r0
 8017916:	9504      	str	r5, [sp, #16]
 8017918:	f1bb 0f00 	cmp.w	fp, #0
 801791c:	d03d      	beq.n	801799a <rcutils_repl_str+0x10e>
 801791e:	ee18 0a10 	vmov	r0, s16
 8017922:	f7e8 fc5f 	bl	80001e4 <strlen>
 8017926:	9b01      	ldr	r3, [sp, #4]
 8017928:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801792c:	1ac3      	subs	r3, r0, r3
 801792e:	fb0b 5303 	mla	r3, fp, r3, r5
 8017932:	9305      	str	r3, [sp, #20]
 8017934:	4606      	mov	r6, r0
 8017936:	1c58      	adds	r0, r3, #1
 8017938:	f8d9 3000 	ldr.w	r3, [r9]
 801793c:	4798      	blx	r3
 801793e:	9003      	str	r0, [sp, #12]
 8017940:	2800      	cmp	r0, #0
 8017942:	d04c      	beq.n	80179de <rcutils_repl_str+0x152>
 8017944:	683a      	ldr	r2, [r7, #0]
 8017946:	9900      	ldr	r1, [sp, #0]
 8017948:	f001 ff1c 	bl	8019784 <memcpy>
 801794c:	9b03      	ldr	r3, [sp, #12]
 801794e:	683d      	ldr	r5, [r7, #0]
 8017950:	ee18 8a10 	vmov	r8, s16
 8017954:	441d      	add	r5, r3
 8017956:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801795a:	9302      	str	r3, [sp, #8]
 801795c:	46ba      	mov	sl, r7
 801795e:	4632      	mov	r2, r6
 8017960:	4641      	mov	r1, r8
 8017962:	4628      	mov	r0, r5
 8017964:	f001 ff0e 	bl	8019784 <memcpy>
 8017968:	9b01      	ldr	r3, [sp, #4]
 801796a:	f85a 2b04 	ldr.w	r2, [sl], #4
 801796e:	441a      	add	r2, r3
 8017970:	9b00      	ldr	r3, [sp, #0]
 8017972:	1899      	adds	r1, r3, r2
 8017974:	9b02      	ldr	r3, [sp, #8]
 8017976:	4435      	add	r5, r6
 8017978:	429c      	cmp	r4, r3
 801797a:	4628      	mov	r0, r5
 801797c:	d025      	beq.n	80179ca <rcutils_repl_str+0x13e>
 801797e:	f8da 3000 	ldr.w	r3, [sl]
 8017982:	3401      	adds	r4, #1
 8017984:	1a9a      	subs	r2, r3, r2
 8017986:	4415      	add	r5, r2
 8017988:	f001 fefc 	bl	8019784 <memcpy>
 801798c:	455c      	cmp	r4, fp
 801798e:	d3e6      	bcc.n	801795e <rcutils_repl_str+0xd2>
 8017990:	9a03      	ldr	r2, [sp, #12]
 8017992:	9905      	ldr	r1, [sp, #20]
 8017994:	2300      	movs	r3, #0
 8017996:	5453      	strb	r3, [r2, r1]
 8017998:	e00b      	b.n	80179b2 <rcutils_repl_str+0x126>
 801799a:	4628      	mov	r0, r5
 801799c:	f8d9 3000 	ldr.w	r3, [r9]
 80179a0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80179a4:	3001      	adds	r0, #1
 80179a6:	4798      	blx	r3
 80179a8:	9003      	str	r0, [sp, #12]
 80179aa:	b110      	cbz	r0, 80179b2 <rcutils_repl_str+0x126>
 80179ac:	9900      	ldr	r1, [sp, #0]
 80179ae:	f002 fb59 	bl	801a064 <strcpy>
 80179b2:	4638      	mov	r0, r7
 80179b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80179b8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80179bc:	4798      	blx	r3
 80179be:	9803      	ldr	r0, [sp, #12]
 80179c0:	b007      	add	sp, #28
 80179c2:	ecbd 8b02 	vpop	{d8}
 80179c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179ca:	9b04      	ldr	r3, [sp, #16]
 80179cc:	3401      	adds	r4, #1
 80179ce:	1a9a      	subs	r2, r3, r2
 80179d0:	4415      	add	r5, r2
 80179d2:	f001 fed7 	bl	8019784 <memcpy>
 80179d6:	455c      	cmp	r4, fp
 80179d8:	d3c1      	bcc.n	801795e <rcutils_repl_str+0xd2>
 80179da:	e7d9      	b.n	8017990 <rcutils_repl_str+0x104>
 80179dc:	4647      	mov	r7, r8
 80179de:	2300      	movs	r3, #0
 80179e0:	9303      	str	r3, [sp, #12]
 80179e2:	e7e6      	b.n	80179b2 <rcutils_repl_str+0x126>

080179e4 <rcutils_snprintf>:
 80179e4:	b40c      	push	{r2, r3}
 80179e6:	b530      	push	{r4, r5, lr}
 80179e8:	b083      	sub	sp, #12
 80179ea:	ab06      	add	r3, sp, #24
 80179ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80179f0:	9301      	str	r3, [sp, #4]
 80179f2:	b152      	cbz	r2, 8017a0a <rcutils_snprintf+0x26>
 80179f4:	b138      	cbz	r0, 8017a06 <rcutils_snprintf+0x22>
 80179f6:	b141      	cbz	r1, 8017a0a <rcutils_snprintf+0x26>
 80179f8:	f003 fad8 	bl	801afac <vsniprintf>
 80179fc:	b003      	add	sp, #12
 80179fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a02:	b002      	add	sp, #8
 8017a04:	4770      	bx	lr
 8017a06:	2900      	cmp	r1, #0
 8017a08:	d0f6      	beq.n	80179f8 <rcutils_snprintf+0x14>
 8017a0a:	f001 fdc9 	bl	80195a0 <__errno>
 8017a0e:	2316      	movs	r3, #22
 8017a10:	6003      	str	r3, [r0, #0]
 8017a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017a16:	e7f1      	b.n	80179fc <rcutils_snprintf+0x18>

08017a18 <rcutils_vsnprintf>:
 8017a18:	b570      	push	{r4, r5, r6, lr}
 8017a1a:	b13a      	cbz	r2, 8017a2c <rcutils_vsnprintf+0x14>
 8017a1c:	b120      	cbz	r0, 8017a28 <rcutils_vsnprintf+0x10>
 8017a1e:	b129      	cbz	r1, 8017a2c <rcutils_vsnprintf+0x14>
 8017a20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a24:	f003 bac2 	b.w	801afac <vsniprintf>
 8017a28:	2900      	cmp	r1, #0
 8017a2a:	d0f9      	beq.n	8017a20 <rcutils_vsnprintf+0x8>
 8017a2c:	f001 fdb8 	bl	80195a0 <__errno>
 8017a30:	2316      	movs	r3, #22
 8017a32:	6003      	str	r3, [r0, #0]
 8017a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017a38:	bd70      	pop	{r4, r5, r6, pc}
 8017a3a:	bf00      	nop

08017a3c <rcutils_strdup>:
 8017a3c:	b084      	sub	sp, #16
 8017a3e:	b570      	push	{r4, r5, r6, lr}
 8017a40:	b082      	sub	sp, #8
 8017a42:	ac07      	add	r4, sp, #28
 8017a44:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8017a48:	4605      	mov	r5, r0
 8017a4a:	b1b0      	cbz	r0, 8017a7a <rcutils_strdup+0x3e>
 8017a4c:	f7e8 fbca 	bl	80001e4 <strlen>
 8017a50:	1c42      	adds	r2, r0, #1
 8017a52:	9b07      	ldr	r3, [sp, #28]
 8017a54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017a56:	9201      	str	r2, [sp, #4]
 8017a58:	4606      	mov	r6, r0
 8017a5a:	4610      	mov	r0, r2
 8017a5c:	4798      	blx	r3
 8017a5e:	4604      	mov	r4, r0
 8017a60:	b128      	cbz	r0, 8017a6e <rcutils_strdup+0x32>
 8017a62:	9a01      	ldr	r2, [sp, #4]
 8017a64:	4629      	mov	r1, r5
 8017a66:	f001 fe8d 	bl	8019784 <memcpy>
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	55a3      	strb	r3, [r4, r6]
 8017a6e:	4620      	mov	r0, r4
 8017a70:	b002      	add	sp, #8
 8017a72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a76:	b004      	add	sp, #16
 8017a78:	4770      	bx	lr
 8017a7a:	4604      	mov	r4, r0
 8017a7c:	e7f7      	b.n	8017a6e <rcutils_strdup+0x32>
 8017a7e:	bf00      	nop

08017a80 <rcutils_strndup>:
 8017a80:	b082      	sub	sp, #8
 8017a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a84:	460e      	mov	r6, r1
 8017a86:	a906      	add	r1, sp, #24
 8017a88:	e881 000c 	stmia.w	r1, {r2, r3}
 8017a8c:	4605      	mov	r5, r0
 8017a8e:	b180      	cbz	r0, 8017ab2 <rcutils_strndup+0x32>
 8017a90:	1c77      	adds	r7, r6, #1
 8017a92:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017a94:	4638      	mov	r0, r7
 8017a96:	4790      	blx	r2
 8017a98:	4604      	mov	r4, r0
 8017a9a:	b128      	cbz	r0, 8017aa8 <rcutils_strndup+0x28>
 8017a9c:	463a      	mov	r2, r7
 8017a9e:	4629      	mov	r1, r5
 8017aa0:	f001 fe70 	bl	8019784 <memcpy>
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	55a3      	strb	r3, [r4, r6]
 8017aa8:	4620      	mov	r0, r4
 8017aaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017aae:	b002      	add	sp, #8
 8017ab0:	4770      	bx	lr
 8017ab2:	4604      	mov	r4, r0
 8017ab4:	e7f8      	b.n	8017aa8 <rcutils_strndup+0x28>
 8017ab6:	bf00      	nop

08017ab8 <rmw_get_zero_initialized_context>:
 8017ab8:	b510      	push	{r4, lr}
 8017aba:	2250      	movs	r2, #80	; 0x50
 8017abc:	4604      	mov	r4, r0
 8017abe:	2100      	movs	r1, #0
 8017ac0:	f001 fe88 	bl	80197d4 <memset>
 8017ac4:	4620      	mov	r0, r4
 8017ac6:	bd10      	pop	{r4, pc}

08017ac8 <rmw_validate_namespace_with_size>:
 8017ac8:	b340      	cbz	r0, 8017b1c <rmw_validate_namespace_with_size+0x54>
 8017aca:	b5d0      	push	{r4, r6, r7, lr}
 8017acc:	4614      	mov	r4, r2
 8017ace:	b0c2      	sub	sp, #264	; 0x108
 8017ad0:	b332      	cbz	r2, 8017b20 <rmw_validate_namespace_with_size+0x58>
 8017ad2:	2901      	cmp	r1, #1
 8017ad4:	460f      	mov	r7, r1
 8017ad6:	461e      	mov	r6, r3
 8017ad8:	d102      	bne.n	8017ae0 <rmw_validate_namespace_with_size+0x18>
 8017ada:	7803      	ldrb	r3, [r0, #0]
 8017adc:	2b2f      	cmp	r3, #47	; 0x2f
 8017ade:	d019      	beq.n	8017b14 <rmw_validate_namespace_with_size+0x4c>
 8017ae0:	aa01      	add	r2, sp, #4
 8017ae2:	4669      	mov	r1, sp
 8017ae4:	f7f7 fe1c 	bl	800f720 <rmw_validate_full_topic_name>
 8017ae8:	b990      	cbnz	r0, 8017b10 <rmw_validate_namespace_with_size+0x48>
 8017aea:	9b00      	ldr	r3, [sp, #0]
 8017aec:	b14b      	cbz	r3, 8017b02 <rmw_validate_namespace_with_size+0x3a>
 8017aee:	2b07      	cmp	r3, #7
 8017af0:	d007      	beq.n	8017b02 <rmw_validate_namespace_with_size+0x3a>
 8017af2:	1e5a      	subs	r2, r3, #1
 8017af4:	2a05      	cmp	r2, #5
 8017af6:	d82b      	bhi.n	8017b50 <rmw_validate_namespace_with_size+0x88>
 8017af8:	e8df f002 	tbb	[pc, r2]
 8017afc:	24211e1b 	.word	0x24211e1b
 8017b00:	1427      	.short	0x1427
 8017b02:	2ff5      	cmp	r7, #245	; 0xf5
 8017b04:	d906      	bls.n	8017b14 <rmw_validate_namespace_with_size+0x4c>
 8017b06:	2307      	movs	r3, #7
 8017b08:	6023      	str	r3, [r4, #0]
 8017b0a:	b10e      	cbz	r6, 8017b10 <rmw_validate_namespace_with_size+0x48>
 8017b0c:	23f4      	movs	r3, #244	; 0xf4
 8017b0e:	6033      	str	r3, [r6, #0]
 8017b10:	b042      	add	sp, #264	; 0x108
 8017b12:	bdd0      	pop	{r4, r6, r7, pc}
 8017b14:	2000      	movs	r0, #0
 8017b16:	6020      	str	r0, [r4, #0]
 8017b18:	b042      	add	sp, #264	; 0x108
 8017b1a:	bdd0      	pop	{r4, r6, r7, pc}
 8017b1c:	200b      	movs	r0, #11
 8017b1e:	4770      	bx	lr
 8017b20:	200b      	movs	r0, #11
 8017b22:	e7f5      	b.n	8017b10 <rmw_validate_namespace_with_size+0x48>
 8017b24:	2306      	movs	r3, #6
 8017b26:	6023      	str	r3, [r4, #0]
 8017b28:	2e00      	cmp	r6, #0
 8017b2a:	d0f1      	beq.n	8017b10 <rmw_validate_namespace_with_size+0x48>
 8017b2c:	9b01      	ldr	r3, [sp, #4]
 8017b2e:	6033      	str	r3, [r6, #0]
 8017b30:	e7ee      	b.n	8017b10 <rmw_validate_namespace_with_size+0x48>
 8017b32:	2301      	movs	r3, #1
 8017b34:	6023      	str	r3, [r4, #0]
 8017b36:	e7f7      	b.n	8017b28 <rmw_validate_namespace_with_size+0x60>
 8017b38:	2302      	movs	r3, #2
 8017b3a:	6023      	str	r3, [r4, #0]
 8017b3c:	e7f4      	b.n	8017b28 <rmw_validate_namespace_with_size+0x60>
 8017b3e:	2303      	movs	r3, #3
 8017b40:	6023      	str	r3, [r4, #0]
 8017b42:	e7f1      	b.n	8017b28 <rmw_validate_namespace_with_size+0x60>
 8017b44:	2304      	movs	r3, #4
 8017b46:	6023      	str	r3, [r4, #0]
 8017b48:	e7ee      	b.n	8017b28 <rmw_validate_namespace_with_size+0x60>
 8017b4a:	2305      	movs	r3, #5
 8017b4c:	6023      	str	r3, [r4, #0]
 8017b4e:	e7eb      	b.n	8017b28 <rmw_validate_namespace_with_size+0x60>
 8017b50:	4a03      	ldr	r2, [pc, #12]	; (8017b60 <rmw_validate_namespace_with_size+0x98>)
 8017b52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017b56:	a802      	add	r0, sp, #8
 8017b58:	f7ff ff44 	bl	80179e4 <rcutils_snprintf>
 8017b5c:	2001      	movs	r0, #1
 8017b5e:	e7d7      	b.n	8017b10 <rmw_validate_namespace_with_size+0x48>
 8017b60:	0801f2f8 	.word	0x0801f2f8

08017b64 <rmw_validate_namespace>:
 8017b64:	b168      	cbz	r0, 8017b82 <rmw_validate_namespace+0x1e>
 8017b66:	b570      	push	{r4, r5, r6, lr}
 8017b68:	460d      	mov	r5, r1
 8017b6a:	4616      	mov	r6, r2
 8017b6c:	4604      	mov	r4, r0
 8017b6e:	f7e8 fb39 	bl	80001e4 <strlen>
 8017b72:	4633      	mov	r3, r6
 8017b74:	4601      	mov	r1, r0
 8017b76:	462a      	mov	r2, r5
 8017b78:	4620      	mov	r0, r4
 8017b7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b7e:	f7ff bfa3 	b.w	8017ac8 <rmw_validate_namespace_with_size>
 8017b82:	200b      	movs	r0, #11
 8017b84:	4770      	bx	lr
 8017b86:	bf00      	nop

08017b88 <rmw_namespace_validation_result_string>:
 8017b88:	2807      	cmp	r0, #7
 8017b8a:	bf9a      	itte	ls
 8017b8c:	4b02      	ldrls	r3, [pc, #8]	; (8017b98 <rmw_namespace_validation_result_string+0x10>)
 8017b8e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017b92:	4802      	ldrhi	r0, [pc, #8]	; (8017b9c <rmw_namespace_validation_result_string+0x14>)
 8017b94:	4770      	bx	lr
 8017b96:	bf00      	nop
 8017b98:	0801f4f0 	.word	0x0801f4f0
 8017b9c:	0801f348 	.word	0x0801f348

08017ba0 <rmw_validate_node_name>:
 8017ba0:	2800      	cmp	r0, #0
 8017ba2:	d03b      	beq.n	8017c1c <rmw_validate_node_name+0x7c>
 8017ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ba8:	460f      	mov	r7, r1
 8017baa:	2900      	cmp	r1, #0
 8017bac:	d038      	beq.n	8017c20 <rmw_validate_node_name+0x80>
 8017bae:	4615      	mov	r5, r2
 8017bb0:	4604      	mov	r4, r0
 8017bb2:	f7e8 fb17 	bl	80001e4 <strlen>
 8017bb6:	b1e0      	cbz	r0, 8017bf2 <rmw_validate_node_name+0x52>
 8017bb8:	1e63      	subs	r3, r4, #1
 8017bba:	eb03 0e00 	add.w	lr, r3, r0
 8017bbe:	f1c4 0c01 	rsb	ip, r4, #1
 8017bc2:	eb0c 0803 	add.w	r8, ip, r3
 8017bc6:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8017bca:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8017bce:	f026 0220 	bic.w	r2, r6, #32
 8017bd2:	2909      	cmp	r1, #9
 8017bd4:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 8017bd8:	d913      	bls.n	8017c02 <rmw_validate_node_name+0x62>
 8017bda:	2a19      	cmp	r2, #25
 8017bdc:	d911      	bls.n	8017c02 <rmw_validate_node_name+0x62>
 8017bde:	2e5f      	cmp	r6, #95	; 0x5f
 8017be0:	d00f      	beq.n	8017c02 <rmw_validate_node_name+0x62>
 8017be2:	2302      	movs	r3, #2
 8017be4:	603b      	str	r3, [r7, #0]
 8017be6:	b10d      	cbz	r5, 8017bec <rmw_validate_node_name+0x4c>
 8017be8:	f8c5 8000 	str.w	r8, [r5]
 8017bec:	2000      	movs	r0, #0
 8017bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bf2:	2301      	movs	r3, #1
 8017bf4:	603b      	str	r3, [r7, #0]
 8017bf6:	2d00      	cmp	r5, #0
 8017bf8:	d0f8      	beq.n	8017bec <rmw_validate_node_name+0x4c>
 8017bfa:	2000      	movs	r0, #0
 8017bfc:	6028      	str	r0, [r5, #0]
 8017bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c02:	4573      	cmp	r3, lr
 8017c04:	d1dd      	bne.n	8017bc2 <rmw_validate_node_name+0x22>
 8017c06:	7822      	ldrb	r2, [r4, #0]
 8017c08:	4b0d      	ldr	r3, [pc, #52]	; (8017c40 <rmw_validate_node_name+0xa0>)
 8017c0a:	5cd3      	ldrb	r3, [r2, r3]
 8017c0c:	f013 0304 	ands.w	r3, r3, #4
 8017c10:	d110      	bne.n	8017c34 <rmw_validate_node_name+0x94>
 8017c12:	28ff      	cmp	r0, #255	; 0xff
 8017c14:	d806      	bhi.n	8017c24 <rmw_validate_node_name+0x84>
 8017c16:	603b      	str	r3, [r7, #0]
 8017c18:	4618      	mov	r0, r3
 8017c1a:	e7e8      	b.n	8017bee <rmw_validate_node_name+0x4e>
 8017c1c:	200b      	movs	r0, #11
 8017c1e:	4770      	bx	lr
 8017c20:	200b      	movs	r0, #11
 8017c22:	e7e4      	b.n	8017bee <rmw_validate_node_name+0x4e>
 8017c24:	2204      	movs	r2, #4
 8017c26:	603a      	str	r2, [r7, #0]
 8017c28:	2d00      	cmp	r5, #0
 8017c2a:	d0df      	beq.n	8017bec <rmw_validate_node_name+0x4c>
 8017c2c:	22fe      	movs	r2, #254	; 0xfe
 8017c2e:	4618      	mov	r0, r3
 8017c30:	602a      	str	r2, [r5, #0]
 8017c32:	e7dc      	b.n	8017bee <rmw_validate_node_name+0x4e>
 8017c34:	2303      	movs	r3, #3
 8017c36:	603b      	str	r3, [r7, #0]
 8017c38:	2d00      	cmp	r5, #0
 8017c3a:	d1de      	bne.n	8017bfa <rmw_validate_node_name+0x5a>
 8017c3c:	e7d6      	b.n	8017bec <rmw_validate_node_name+0x4c>
 8017c3e:	bf00      	nop
 8017c40:	0801f6a1 	.word	0x0801f6a1

08017c44 <rmw_node_name_validation_result_string>:
 8017c44:	2804      	cmp	r0, #4
 8017c46:	bf9a      	itte	ls
 8017c48:	4b02      	ldrls	r3, [pc, #8]	; (8017c54 <rmw_node_name_validation_result_string+0x10>)
 8017c4a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017c4e:	4802      	ldrhi	r0, [pc, #8]	; (8017c58 <rmw_node_name_validation_result_string+0x14>)
 8017c50:	4770      	bx	lr
 8017c52:	bf00      	nop
 8017c54:	0801f5fc 	.word	0x0801f5fc
 8017c58:	0801f510 	.word	0x0801f510

08017c5c <on_status>:
 8017c5c:	b082      	sub	sp, #8
 8017c5e:	b002      	add	sp, #8
 8017c60:	4770      	bx	lr
 8017c62:	bf00      	nop

08017c64 <on_topic>:
 8017c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c68:	4a21      	ldr	r2, [pc, #132]	; (8017cf0 <on_topic+0x8c>)
 8017c6a:	b094      	sub	sp, #80	; 0x50
 8017c6c:	6812      	ldr	r2, [r2, #0]
 8017c6e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8017c70:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8017c74:	9113      	str	r1, [sp, #76]	; 0x4c
 8017c76:	9312      	str	r3, [sp, #72]	; 0x48
 8017c78:	b3ba      	cbz	r2, 8017cea <on_topic+0x86>
 8017c7a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8017c7e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8017c82:	e001      	b.n	8017c88 <on_topic+0x24>
 8017c84:	6892      	ldr	r2, [r2, #8]
 8017c86:	b382      	cbz	r2, 8017cea <on_topic+0x86>
 8017c88:	68d4      	ldr	r4, [r2, #12]
 8017c8a:	8aa3      	ldrh	r3, [r4, #20]
 8017c8c:	428b      	cmp	r3, r1
 8017c8e:	d1f9      	bne.n	8017c84 <on_topic+0x20>
 8017c90:	7da3      	ldrb	r3, [r4, #22]
 8017c92:	4283      	cmp	r3, r0
 8017c94:	d1f6      	bne.n	8017c84 <on_topic+0x20>
 8017c96:	2248      	movs	r2, #72	; 0x48
 8017c98:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8017c9c:	4668      	mov	r0, sp
 8017c9e:	f001 fd71 	bl	8019784 <memcpy>
 8017ca2:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8017ca6:	4620      	mov	r0, r4
 8017ca8:	f7f8 fe2a 	bl	8010900 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017cac:	4607      	mov	r7, r0
 8017cae:	b1e0      	cbz	r0, 8017cea <on_topic+0x86>
 8017cb0:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8017cb4:	462a      	mov	r2, r5
 8017cb6:	4630      	mov	r0, r6
 8017cb8:	f108 0110 	add.w	r1, r8, #16
 8017cbc:	f7f9 fc72 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 8017cc0:	b930      	cbnz	r0, 8017cd0 <on_topic+0x6c>
 8017cc2:	480c      	ldr	r0, [pc, #48]	; (8017cf4 <on_topic+0x90>)
 8017cc4:	4639      	mov	r1, r7
 8017cc6:	b014      	add	sp, #80	; 0x50
 8017cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ccc:	f000 b8ba 	b.w	8017e44 <put_memory>
 8017cd0:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8017cd4:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8017cd8:	f7f8 fc50 	bl	801057c <rmw_uros_epoch_nanos>
 8017cdc:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8017ce0:	2305      	movs	r3, #5
 8017ce2:	e9c2 0100 	strd	r0, r1, [r2]
 8017ce6:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8017cea:	b014      	add	sp, #80	; 0x50
 8017cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cf0:	2001491c 	.word	0x2001491c
 8017cf4:	200116b0 	.word	0x200116b0

08017cf8 <on_request>:
 8017cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017cfc:	4822      	ldr	r0, [pc, #136]	; (8017d88 <on_request+0x90>)
 8017cfe:	b095      	sub	sp, #84	; 0x54
 8017d00:	9113      	str	r1, [sp, #76]	; 0x4c
 8017d02:	6801      	ldr	r1, [r0, #0]
 8017d04:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8017d06:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8017d0a:	2900      	cmp	r1, #0
 8017d0c:	d039      	beq.n	8017d82 <on_request+0x8a>
 8017d0e:	461d      	mov	r5, r3
 8017d10:	e001      	b.n	8017d16 <on_request+0x1e>
 8017d12:	6889      	ldr	r1, [r1, #8]
 8017d14:	b3a9      	cbz	r1, 8017d82 <on_request+0x8a>
 8017d16:	68cc      	ldr	r4, [r1, #12]
 8017d18:	8b20      	ldrh	r0, [r4, #24]
 8017d1a:	4290      	cmp	r0, r2
 8017d1c:	d1f9      	bne.n	8017d12 <on_request+0x1a>
 8017d1e:	2248      	movs	r2, #72	; 0x48
 8017d20:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8017d24:	4668      	mov	r0, sp
 8017d26:	f001 fd2d 	bl	8019784 <memcpy>
 8017d2a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8017d2e:	4620      	mov	r0, r4
 8017d30:	f7f8 fde6 	bl	8010900 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017d34:	4680      	mov	r8, r0
 8017d36:	b320      	cbz	r0, 8017d82 <on_request+0x8a>
 8017d38:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8017d3c:	4632      	mov	r2, r6
 8017d3e:	4638      	mov	r0, r7
 8017d40:	f109 0110 	add.w	r1, r9, #16
 8017d44:	f7f9 fc2e 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 8017d48:	b930      	cbnz	r0, 8017d58 <on_request+0x60>
 8017d4a:	4810      	ldr	r0, [pc, #64]	; (8017d8c <on_request+0x94>)
 8017d4c:	4641      	mov	r1, r8
 8017d4e:	b015      	add	sp, #84	; 0x54
 8017d50:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d54:	f000 b876 	b.w	8017e44 <put_memory>
 8017d58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017d5a:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8017d5e:	f609 0428 	addw	r4, r9, #2088	; 0x828
 8017d62:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8017d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017d68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017d6c:	e884 0003 	stmia.w	r4, {r0, r1}
 8017d70:	f7f8 fc04 	bl	801057c <rmw_uros_epoch_nanos>
 8017d74:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8017d78:	2303      	movs	r3, #3
 8017d7a:	e9c2 0100 	strd	r0, r1, [r2]
 8017d7e:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8017d82:	b015      	add	sp, #84	; 0x54
 8017d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d88:	2001490c 	.word	0x2001490c
 8017d8c:	200116b0 	.word	0x200116b0

08017d90 <on_reply>:
 8017d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d94:	4821      	ldr	r0, [pc, #132]	; (8017e1c <on_reply+0x8c>)
 8017d96:	b095      	sub	sp, #84	; 0x54
 8017d98:	9113      	str	r1, [sp, #76]	; 0x4c
 8017d9a:	6801      	ldr	r1, [r0, #0]
 8017d9c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8017d9e:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8017da2:	b3b9      	cbz	r1, 8017e14 <on_reply+0x84>
 8017da4:	461d      	mov	r5, r3
 8017da6:	e001      	b.n	8017dac <on_reply+0x1c>
 8017da8:	6889      	ldr	r1, [r1, #8]
 8017daa:	b399      	cbz	r1, 8017e14 <on_reply+0x84>
 8017dac:	68cc      	ldr	r4, [r1, #12]
 8017dae:	8b20      	ldrh	r0, [r4, #24]
 8017db0:	4290      	cmp	r0, r2
 8017db2:	d1f9      	bne.n	8017da8 <on_reply+0x18>
 8017db4:	2248      	movs	r2, #72	; 0x48
 8017db6:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8017dba:	4668      	mov	r0, sp
 8017dbc:	f001 fce2 	bl	8019784 <memcpy>
 8017dc0:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8017dc4:	4620      	mov	r0, r4
 8017dc6:	f7f8 fd9b 	bl	8010900 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017dca:	4680      	mov	r8, r0
 8017dcc:	b310      	cbz	r0, 8017e14 <on_reply+0x84>
 8017dce:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8017dd2:	4632      	mov	r2, r6
 8017dd4:	4638      	mov	r0, r7
 8017dd6:	f109 0110 	add.w	r1, r9, #16
 8017dda:	f7f9 fbe3 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 8017dde:	b930      	cbnz	r0, 8017dee <on_reply+0x5e>
 8017de0:	480f      	ldr	r0, [pc, #60]	; (8017e20 <on_reply+0x90>)
 8017de2:	4641      	mov	r1, r8
 8017de4:	b015      	add	sp, #84	; 0x54
 8017de6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017dea:	f000 b82b 	b.w	8017e44 <put_memory>
 8017dee:	b2aa      	uxth	r2, r5
 8017df0:	2300      	movs	r3, #0
 8017df2:	f609 0128 	addw	r1, r9, #2088	; 0x828
 8017df6:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8017dfa:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8017dfe:	e9c1 2300 	strd	r2, r3, [r1]
 8017e02:	f7f8 fbbb 	bl	801057c <rmw_uros_epoch_nanos>
 8017e06:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8017e0a:	2304      	movs	r3, #4
 8017e0c:	e9c2 0100 	strd	r0, r1, [r2]
 8017e10:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8017e14:	b015      	add	sp, #84	; 0x54
 8017e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e1a:	bf00      	nop
 8017e1c:	20011f40 	.word	0x20011f40
 8017e20:	200116b0 	.word	0x200116b0

08017e24 <get_memory>:
 8017e24:	4603      	mov	r3, r0
 8017e26:	6840      	ldr	r0, [r0, #4]
 8017e28:	b158      	cbz	r0, 8017e42 <get_memory+0x1e>
 8017e2a:	6882      	ldr	r2, [r0, #8]
 8017e2c:	605a      	str	r2, [r3, #4]
 8017e2e:	b10a      	cbz	r2, 8017e34 <get_memory+0x10>
 8017e30:	2100      	movs	r1, #0
 8017e32:	6051      	str	r1, [r2, #4]
 8017e34:	681a      	ldr	r2, [r3, #0]
 8017e36:	6082      	str	r2, [r0, #8]
 8017e38:	b102      	cbz	r2, 8017e3c <get_memory+0x18>
 8017e3a:	6050      	str	r0, [r2, #4]
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	6042      	str	r2, [r0, #4]
 8017e40:	6018      	str	r0, [r3, #0]
 8017e42:	4770      	bx	lr

08017e44 <put_memory>:
 8017e44:	684b      	ldr	r3, [r1, #4]
 8017e46:	b10b      	cbz	r3, 8017e4c <put_memory+0x8>
 8017e48:	688a      	ldr	r2, [r1, #8]
 8017e4a:	609a      	str	r2, [r3, #8]
 8017e4c:	688a      	ldr	r2, [r1, #8]
 8017e4e:	b102      	cbz	r2, 8017e52 <put_memory+0xe>
 8017e50:	6053      	str	r3, [r2, #4]
 8017e52:	6803      	ldr	r3, [r0, #0]
 8017e54:	428b      	cmp	r3, r1
 8017e56:	6843      	ldr	r3, [r0, #4]
 8017e58:	bf08      	it	eq
 8017e5a:	6002      	streq	r2, [r0, #0]
 8017e5c:	608b      	str	r3, [r1, #8]
 8017e5e:	b103      	cbz	r3, 8017e62 <put_memory+0x1e>
 8017e60:	6059      	str	r1, [r3, #4]
 8017e62:	2300      	movs	r3, #0
 8017e64:	604b      	str	r3, [r1, #4]
 8017e66:	6041      	str	r1, [r0, #4]
 8017e68:	4770      	bx	lr
 8017e6a:	bf00      	nop

08017e6c <rmw_destroy_client>:
 8017e6c:	b538      	push	{r3, r4, r5, lr}
 8017e6e:	b128      	cbz	r0, 8017e7c <rmw_destroy_client+0x10>
 8017e70:	4604      	mov	r4, r0
 8017e72:	6800      	ldr	r0, [r0, #0]
 8017e74:	460d      	mov	r5, r1
 8017e76:	f7f8 fe99 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 8017e7a:	b910      	cbnz	r0, 8017e82 <rmw_destroy_client+0x16>
 8017e7c:	2401      	movs	r4, #1
 8017e7e:	4620      	mov	r0, r4
 8017e80:	bd38      	pop	{r3, r4, r5, pc}
 8017e82:	6863      	ldr	r3, [r4, #4]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d0f9      	beq.n	8017e7c <rmw_destroy_client+0x10>
 8017e88:	2d00      	cmp	r5, #0
 8017e8a:	d0f7      	beq.n	8017e7c <rmw_destroy_client+0x10>
 8017e8c:	6828      	ldr	r0, [r5, #0]
 8017e8e:	f7f8 fe8d 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 8017e92:	2800      	cmp	r0, #0
 8017e94:	d0f2      	beq.n	8017e7c <rmw_destroy_client+0x10>
 8017e96:	686b      	ldr	r3, [r5, #4]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d0ef      	beq.n	8017e7c <rmw_destroy_client+0x10>
 8017e9c:	6864      	ldr	r4, [r4, #4]
 8017e9e:	691a      	ldr	r2, [r3, #16]
 8017ea0:	6920      	ldr	r0, [r4, #16]
 8017ea2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017ea6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017eaa:	6819      	ldr	r1, [r3, #0]
 8017eac:	f7fa f9fa 	bl	80122a4 <uxr_buffer_delete_entity>
 8017eb0:	4602      	mov	r2, r0
 8017eb2:	6920      	ldr	r0, [r4, #16]
 8017eb4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017eb8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017ebc:	f7f8 fe0c 	bl	8010ad8 <run_xrce_session>
 8017ec0:	2800      	cmp	r0, #0
 8017ec2:	4628      	mov	r0, r5
 8017ec4:	bf14      	ite	ne
 8017ec6:	2400      	movne	r4, #0
 8017ec8:	2402      	moveq	r4, #2
 8017eca:	f7f8 fcf9 	bl	80108c0 <rmw_uxrce_fini_client_memory>
 8017ece:	e7d6      	b.n	8017e7e <rmw_destroy_client+0x12>

08017ed0 <rmw_get_implementation_identifier>:
 8017ed0:	4b01      	ldr	r3, [pc, #4]	; (8017ed8 <rmw_get_implementation_identifier+0x8>)
 8017ed2:	6818      	ldr	r0, [r3, #0]
 8017ed4:	4770      	bx	lr
 8017ed6:	bf00      	nop
 8017ed8:	0801f628 	.word	0x0801f628

08017edc <create_topic>:
 8017edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ee0:	4605      	mov	r5, r0
 8017ee2:	b085      	sub	sp, #20
 8017ee4:	4822      	ldr	r0, [pc, #136]	; (8017f70 <create_topic+0x94>)
 8017ee6:	460f      	mov	r7, r1
 8017ee8:	4616      	mov	r6, r2
 8017eea:	f7ff ff9b 	bl	8017e24 <get_memory>
 8017eee:	4604      	mov	r4, r0
 8017ef0:	b3a0      	cbz	r0, 8017f5c <create_topic+0x80>
 8017ef2:	692a      	ldr	r2, [r5, #16]
 8017ef4:	68c4      	ldr	r4, [r0, #12]
 8017ef6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8017f74 <create_topic+0x98>
 8017efa:	61a5      	str	r5, [r4, #24]
 8017efc:	f241 5396 	movw	r3, #5526	; 0x1596
 8017f00:	6166      	str	r6, [r4, #20]
 8017f02:	5ad0      	ldrh	r0, [r2, r3]
 8017f04:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8017f78 <create_topic+0x9c>
 8017f08:	1c41      	adds	r1, r0, #1
 8017f0a:	52d1      	strh	r1, [r2, r3]
 8017f0c:	2102      	movs	r1, #2
 8017f0e:	f7fa fc97 	bl	8012840 <uxr_object_id>
 8017f12:	4641      	mov	r1, r8
 8017f14:	6120      	str	r0, [r4, #16]
 8017f16:	223c      	movs	r2, #60	; 0x3c
 8017f18:	4638      	mov	r0, r7
 8017f1a:	f7f8 fe31 	bl	8010b80 <generate_topic_name>
 8017f1e:	4649      	mov	r1, r9
 8017f20:	2264      	movs	r2, #100	; 0x64
 8017f22:	4630      	mov	r0, r6
 8017f24:	f7f8 fdf4 	bl	8010b10 <generate_type_name>
 8017f28:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 8017f2c:	2106      	movs	r1, #6
 8017f2e:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8017f32:	f8cd 9004 	str.w	r9, [sp, #4]
 8017f36:	f8cd 8000 	str.w	r8, [sp]
 8017f3a:	9102      	str	r1, [sp, #8]
 8017f3c:	6811      	ldr	r1, [r2, #0]
 8017f3e:	6922      	ldr	r2, [r4, #16]
 8017f40:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017f44:	f7fa fa2c 	bl	80123a0 <uxr_buffer_create_topic_bin>
 8017f48:	4602      	mov	r2, r0
 8017f4a:	6928      	ldr	r0, [r5, #16]
 8017f4c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8017f50:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8017f54:	f7f8 fdc0 	bl	8010ad8 <run_xrce_session>
 8017f58:	4605      	mov	r5, r0
 8017f5a:	b118      	cbz	r0, 8017f64 <create_topic+0x88>
 8017f5c:	4620      	mov	r0, r4
 8017f5e:	b005      	add	sp, #20
 8017f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f64:	4620      	mov	r0, r4
 8017f66:	f7f8 fcbf 	bl	80108e8 <rmw_uxrce_fini_topic_memory>
 8017f6a:	462c      	mov	r4, r5
 8017f6c:	e7f6      	b.n	8017f5c <create_topic+0x80>
 8017f6e:	bf00      	nop
 8017f70:	20014848 	.word	0x20014848
 8017f74:	20010490 	.word	0x20010490
 8017f78:	200104cc 	.word	0x200104cc

08017f7c <destroy_topic>:
 8017f7c:	b538      	push	{r3, r4, r5, lr}
 8017f7e:	6985      	ldr	r5, [r0, #24]
 8017f80:	b1d5      	cbz	r5, 8017fb8 <destroy_topic+0x3c>
 8017f82:	4604      	mov	r4, r0
 8017f84:	6928      	ldr	r0, [r5, #16]
 8017f86:	6922      	ldr	r2, [r4, #16]
 8017f88:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017f8c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017f90:	6819      	ldr	r1, [r3, #0]
 8017f92:	f7fa f987 	bl	80122a4 <uxr_buffer_delete_entity>
 8017f96:	4602      	mov	r2, r0
 8017f98:	6928      	ldr	r0, [r5, #16]
 8017f9a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017f9e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017fa2:	f7f8 fd99 	bl	8010ad8 <run_xrce_session>
 8017fa6:	2800      	cmp	r0, #0
 8017fa8:	4620      	mov	r0, r4
 8017faa:	bf14      	ite	ne
 8017fac:	2400      	movne	r4, #0
 8017fae:	2402      	moveq	r4, #2
 8017fb0:	f7f8 fc9a 	bl	80108e8 <rmw_uxrce_fini_topic_memory>
 8017fb4:	4620      	mov	r0, r4
 8017fb6:	bd38      	pop	{r3, r4, r5, pc}
 8017fb8:	2401      	movs	r4, #1
 8017fba:	4620      	mov	r0, r4
 8017fbc:	bd38      	pop	{r3, r4, r5, pc}
 8017fbe:	bf00      	nop

08017fc0 <rmw_take_request>:
 8017fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017fc4:	4605      	mov	r5, r0
 8017fc6:	b089      	sub	sp, #36	; 0x24
 8017fc8:	460c      	mov	r4, r1
 8017fca:	4690      	mov	r8, r2
 8017fcc:	461f      	mov	r7, r3
 8017fce:	b10b      	cbz	r3, 8017fd4 <rmw_take_request+0x14>
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	703b      	strb	r3, [r7, #0]
 8017fd4:	6828      	ldr	r0, [r5, #0]
 8017fd6:	f7f8 fde9 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 8017fda:	2800      	cmp	r0, #0
 8017fdc:	d040      	beq.n	8018060 <rmw_take_request+0xa0>
 8017fde:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017fe2:	f7f8 fd01 	bl	80109e8 <rmw_uxrce_clean_expired_static_input_buffer>
 8017fe6:	4648      	mov	r0, r9
 8017fe8:	f7f8 fcd6 	bl	8010998 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017fec:	4606      	mov	r6, r0
 8017fee:	2800      	cmp	r0, #0
 8017ff0:	d03a      	beq.n	8018068 <rmw_take_request+0xa8>
 8017ff2:	68c5      	ldr	r5, [r0, #12]
 8017ff4:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8017ff8:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 8017ffc:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8018000:	7423      	strb	r3, [r4, #16]
 8018002:	e9c4 1208 	strd	r1, r2, [r4, #32]
 8018006:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 801800a:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 801800e:	74e2      	strb	r2, [r4, #19]
 8018010:	f8a4 3011 	strh.w	r3, [r4, #17]
 8018014:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 8018018:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 801801c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 8018020:	61e1      	str	r1, [r4, #28]
 8018022:	6162      	str	r2, [r4, #20]
 8018024:	61a3      	str	r3, [r4, #24]
 8018026:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801802a:	689b      	ldr	r3, [r3, #8]
 801802c:	4798      	blx	r3
 801802e:	6844      	ldr	r4, [r0, #4]
 8018030:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8018034:	f105 0110 	add.w	r1, r5, #16
 8018038:	4668      	mov	r0, sp
 801803a:	f7fa f855 	bl	80120e8 <ucdr_init_buffer>
 801803e:	68e3      	ldr	r3, [r4, #12]
 8018040:	4641      	mov	r1, r8
 8018042:	4668      	mov	r0, sp
 8018044:	4798      	blx	r3
 8018046:	4631      	mov	r1, r6
 8018048:	4604      	mov	r4, r0
 801804a:	4809      	ldr	r0, [pc, #36]	; (8018070 <rmw_take_request+0xb0>)
 801804c:	f7ff fefa 	bl	8017e44 <put_memory>
 8018050:	b107      	cbz	r7, 8018054 <rmw_take_request+0x94>
 8018052:	703c      	strb	r4, [r7, #0]
 8018054:	f084 0001 	eor.w	r0, r4, #1
 8018058:	b2c0      	uxtb	r0, r0
 801805a:	b009      	add	sp, #36	; 0x24
 801805c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018060:	200c      	movs	r0, #12
 8018062:	b009      	add	sp, #36	; 0x24
 8018064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018068:	2001      	movs	r0, #1
 801806a:	b009      	add	sp, #36	; 0x24
 801806c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018070:	200116b0 	.word	0x200116b0

08018074 <rmw_send_response>:
 8018074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018076:	4605      	mov	r5, r0
 8018078:	b091      	sub	sp, #68	; 0x44
 801807a:	6800      	ldr	r0, [r0, #0]
 801807c:	460c      	mov	r4, r1
 801807e:	4616      	mov	r6, r2
 8018080:	f7f8 fd94 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 8018084:	2800      	cmp	r0, #0
 8018086:	d043      	beq.n	8018110 <rmw_send_response+0x9c>
 8018088:	4623      	mov	r3, r4
 801808a:	4627      	mov	r7, r4
 801808c:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8018090:	f837 ef01 	ldrh.w	lr, [r7, #1]!
 8018094:	6859      	ldr	r1, [r3, #4]
 8018096:	686d      	ldr	r5, [r5, #4]
 8018098:	689a      	ldr	r2, [r3, #8]
 801809a:	78bb      	ldrb	r3, [r7, #2]
 801809c:	f894 c000 	ldrb.w	ip, [r4]
 80180a0:	6967      	ldr	r7, [r4, #20]
 80180a2:	f88d 3016 	strb.w	r3, [sp, #22]
 80180a6:	ab02      	add	r3, sp, #8
 80180a8:	f8ad e014 	strh.w	lr, [sp, #20]
 80180ac:	f88d c017 	strb.w	ip, [sp, #23]
 80180b0:	9706      	str	r7, [sp, #24]
 80180b2:	c307      	stmia	r3!, {r0, r1, r2}
 80180b4:	696b      	ldr	r3, [r5, #20]
 80180b6:	6922      	ldr	r2, [r4, #16]
 80180b8:	9207      	str	r2, [sp, #28]
 80180ba:	68db      	ldr	r3, [r3, #12]
 80180bc:	6fac      	ldr	r4, [r5, #120]	; 0x78
 80180be:	4798      	blx	r3
 80180c0:	4603      	mov	r3, r0
 80180c2:	4630      	mov	r0, r6
 80180c4:	685f      	ldr	r7, [r3, #4]
 80180c6:	693b      	ldr	r3, [r7, #16]
 80180c8:	4798      	blx	r3
 80180ca:	6923      	ldr	r3, [r4, #16]
 80180cc:	3018      	adds	r0, #24
 80180ce:	9000      	str	r0, [sp, #0]
 80180d0:	692a      	ldr	r2, [r5, #16]
 80180d2:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80180d4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80180d8:	ab08      	add	r3, sp, #32
 80180da:	f7fc fa6d 	bl	80145b8 <uxr_prepare_output_stream>
 80180de:	b910      	cbnz	r0, 80180e6 <rmw_send_response+0x72>
 80180e0:	2001      	movs	r0, #1
 80180e2:	b011      	add	sp, #68	; 0x44
 80180e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180e6:	a902      	add	r1, sp, #8
 80180e8:	a808      	add	r0, sp, #32
 80180ea:	f7fd f8c3 	bl	8015274 <uxr_serialize_SampleIdentity>
 80180ee:	68bb      	ldr	r3, [r7, #8]
 80180f0:	a908      	add	r1, sp, #32
 80180f2:	4630      	mov	r0, r6
 80180f4:	4798      	blx	r3
 80180f6:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 80180fa:	6920      	ldr	r0, [r4, #16]
 80180fc:	2b01      	cmp	r3, #1
 80180fe:	d00a      	beq.n	8018116 <rmw_send_response+0xa2>
 8018100:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8018102:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018106:	f7fb f9c5 	bl	8013494 <uxr_run_session_until_confirm_delivery>
 801810a:	2000      	movs	r0, #0
 801810c:	b011      	add	sp, #68	; 0x44
 801810e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018110:	200c      	movs	r0, #12
 8018112:	b011      	add	sp, #68	; 0x44
 8018114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018116:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801811a:	f7fb f927 	bl	801336c <uxr_flash_output_streams>
 801811e:	2000      	movs	r0, #0
 8018120:	b011      	add	sp, #68	; 0x44
 8018122:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018124 <rmw_take_response>:
 8018124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018128:	4605      	mov	r5, r0
 801812a:	b089      	sub	sp, #36	; 0x24
 801812c:	460f      	mov	r7, r1
 801812e:	4690      	mov	r8, r2
 8018130:	461c      	mov	r4, r3
 8018132:	b10b      	cbz	r3, 8018138 <rmw_take_response+0x14>
 8018134:	2300      	movs	r3, #0
 8018136:	7023      	strb	r3, [r4, #0]
 8018138:	6828      	ldr	r0, [r5, #0]
 801813a:	f7f8 fd37 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 801813e:	b360      	cbz	r0, 801819a <rmw_take_response+0x76>
 8018140:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8018144:	f7f8 fc50 	bl	80109e8 <rmw_uxrce_clean_expired_static_input_buffer>
 8018148:	4648      	mov	r0, r9
 801814a:	f7f8 fc25 	bl	8010998 <rmw_uxrce_find_static_input_buffer_by_owner>
 801814e:	4606      	mov	r6, r0
 8018150:	b338      	cbz	r0, 80181a2 <rmw_take_response+0x7e>
 8018152:	68c5      	ldr	r5, [r0, #12]
 8018154:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8018158:	f605 0328 	addw	r3, r5, #2088	; 0x828
 801815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018160:	68c9      	ldr	r1, [r1, #12]
 8018162:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8018166:	4788      	blx	r1
 8018168:	6847      	ldr	r7, [r0, #4]
 801816a:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 801816e:	f105 0110 	add.w	r1, r5, #16
 8018172:	4668      	mov	r0, sp
 8018174:	f7f9 ffb8 	bl	80120e8 <ucdr_init_buffer>
 8018178:	4641      	mov	r1, r8
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	4668      	mov	r0, sp
 801817e:	4798      	blx	r3
 8018180:	4631      	mov	r1, r6
 8018182:	4605      	mov	r5, r0
 8018184:	4809      	ldr	r0, [pc, #36]	; (80181ac <rmw_take_response+0x88>)
 8018186:	f7ff fe5d 	bl	8017e44 <put_memory>
 801818a:	b104      	cbz	r4, 801818e <rmw_take_response+0x6a>
 801818c:	7025      	strb	r5, [r4, #0]
 801818e:	f085 0001 	eor.w	r0, r5, #1
 8018192:	b2c0      	uxtb	r0, r0
 8018194:	b009      	add	sp, #36	; 0x24
 8018196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801819a:	200c      	movs	r0, #12
 801819c:	b009      	add	sp, #36	; 0x24
 801819e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181a2:	2001      	movs	r0, #1
 80181a4:	b009      	add	sp, #36	; 0x24
 80181a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181aa:	bf00      	nop
 80181ac:	200116b0 	.word	0x200116b0

080181b0 <rmw_wait>:
 80181b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181b4:	4688      	mov	r8, r1
 80181b6:	4606      	mov	r6, r0
 80181b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80181ba:	461d      	mov	r5, r3
 80181bc:	4691      	mov	r9, r2
 80181be:	2a00      	cmp	r2, #0
 80181c0:	f000 811d 	beq.w	80183fe <rmw_wait+0x24e>
 80181c4:	2900      	cmp	r1, #0
 80181c6:	f000 8126 	beq.w	8018416 <rmw_wait+0x266>
 80181ca:	e9d1 2300 	ldrd	r2, r3, [r1]
 80181ce:	0157      	lsls	r7, r2, #5
 80181d0:	015c      	lsls	r4, r3, #5
 80181d2:	1abf      	subs	r7, r7, r2
 80181d4:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 80181d8:	eb64 0403 	sbc.w	r4, r4, r3
 80181dc:	00b8      	lsls	r0, r7, #2
 80181de:	00a4      	lsls	r4, r4, #2
 80181e0:	ea44 7497 	orr.w	r4, r4, r7, lsr #30
 80181e4:	1887      	adds	r7, r0, r2
 80181e6:	eb43 0404 	adc.w	r4, r3, r4
 80181ea:	4aa8      	ldr	r2, [pc, #672]	; (801848c <rmw_wait+0x2dc>)
 80181ec:	2300      	movs	r3, #0
 80181ee:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80181f2:	f7e8 fda9 	bl	8000d48 <__aeabi_uldivmod>
 80181f6:	00e4      	lsls	r4, r4, #3
 80181f8:	ea44 7457 	orr.w	r4, r4, r7, lsr #29
 80181fc:	00ff      	lsls	r7, r7, #3
 80181fe:	eb17 0a00 	adds.w	sl, r7, r0
 8018202:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8018206:	eb44 0b01 	adc.w	fp, r4, r1
 801820a:	2300      	movs	r3, #0
 801820c:	4552      	cmp	r2, sl
 801820e:	eb73 010b 	sbcs.w	r1, r3, fp
 8018212:	f2c0 80f2 	blt.w	80183fa <rmw_wait+0x24a>
 8018216:	4f9e      	ldr	r7, [pc, #632]	; (8018490 <rmw_wait+0x2e0>)
 8018218:	f7f8 fbe6 	bl	80109e8 <rmw_uxrce_clean_expired_static_input_buffer>
 801821c:	683b      	ldr	r3, [r7, #0]
 801821e:	b143      	cbz	r3, 8018232 <rmw_wait+0x82>
 8018220:	461a      	mov	r2, r3
 8018222:	f241 54a4 	movw	r4, #5540	; 0x15a4
 8018226:	2000      	movs	r0, #0
 8018228:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 801822c:	5508      	strb	r0, [r1, r4]
 801822e:	2a00      	cmp	r2, #0
 8018230:	d1fa      	bne.n	8018228 <rmw_wait+0x78>
 8018232:	f1b9 0f00 	cmp.w	r9, #0
 8018236:	d011      	beq.n	801825c <rmw_wait+0xac>
 8018238:	f8d9 0000 	ldr.w	r0, [r9]
 801823c:	b170      	cbz	r0, 801825c <rmw_wait+0xac>
 801823e:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8018242:	2200      	movs	r2, #0
 8018244:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8018248:	2401      	movs	r4, #1
 801824a:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 801824e:	6f89      	ldr	r1, [r1, #120]	; 0x78
 8018250:	3201      	adds	r2, #1
 8018252:	6909      	ldr	r1, [r1, #16]
 8018254:	4290      	cmp	r0, r2
 8018256:	f801 400c 	strb.w	r4, [r1, ip]
 801825a:	d1f6      	bne.n	801824a <rmw_wait+0x9a>
 801825c:	b185      	cbz	r5, 8018280 <rmw_wait+0xd0>
 801825e:	6828      	ldr	r0, [r5, #0]
 8018260:	b170      	cbz	r0, 8018280 <rmw_wait+0xd0>
 8018262:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8018266:	2200      	movs	r2, #0
 8018268:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 801826c:	2401      	movs	r4, #1
 801826e:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8018272:	6f89      	ldr	r1, [r1, #120]	; 0x78
 8018274:	3201      	adds	r2, #1
 8018276:	6909      	ldr	r1, [r1, #16]
 8018278:	4290      	cmp	r0, r2
 801827a:	f801 400c 	strb.w	r4, [r1, ip]
 801827e:	d1f6      	bne.n	801826e <rmw_wait+0xbe>
 8018280:	b186      	cbz	r6, 80182a4 <rmw_wait+0xf4>
 8018282:	6830      	ldr	r0, [r6, #0]
 8018284:	b170      	cbz	r0, 80182a4 <rmw_wait+0xf4>
 8018286:	f8d6 e004 	ldr.w	lr, [r6, #4]
 801828a:	2200      	movs	r2, #0
 801828c:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8018290:	2401      	movs	r4, #1
 8018292:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8018296:	6a09      	ldr	r1, [r1, #32]
 8018298:	3201      	adds	r2, #1
 801829a:	6909      	ldr	r1, [r1, #16]
 801829c:	4290      	cmp	r0, r2
 801829e:	f801 400c 	strb.w	r4, [r1, ip]
 80182a2:	d1f6      	bne.n	8018292 <rmw_wait+0xe2>
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	f000 80ce 	beq.w	8018446 <rmw_wait+0x296>
 80182aa:	2400      	movs	r4, #0
 80182ac:	f241 51a4 	movw	r1, #5540	; 0x15a4
 80182b0:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80182b4:	5c52      	ldrb	r2, [r2, r1]
 80182b6:	4414      	add	r4, r2
 80182b8:	b2e4      	uxtb	r4, r4
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d1f8      	bne.n	80182b0 <rmw_wait+0x100>
 80182be:	f7f8 fb93 	bl	80109e8 <rmw_uxrce_clean_expired_static_input_buffer>
 80182c2:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80182c6:	d00d      	beq.n	80182e4 <rmw_wait+0x134>
 80182c8:	ee07 aa90 	vmov	s15, sl
 80182cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80182d0:	ee07 4a90 	vmov	s15, r4
 80182d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80182d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80182dc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80182e0:	ee17 aa90 	vmov	sl, s15
 80182e4:	683c      	ldr	r4, [r7, #0]
 80182e6:	b144      	cbz	r4, 80182fa <rmw_wait+0x14a>
 80182e8:	f241 57a4 	movw	r7, #5540	; 0x15a4
 80182ec:	68e0      	ldr	r0, [r4, #12]
 80182ee:	5dc3      	ldrb	r3, [r0, r7]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d169      	bne.n	80183c8 <rmw_wait+0x218>
 80182f4:	68a4      	ldr	r4, [r4, #8]
 80182f6:	2c00      	cmp	r4, #0
 80182f8:	d1f8      	bne.n	80182ec <rmw_wait+0x13c>
 80182fa:	f1b9 0f00 	cmp.w	r9, #0
 80182fe:	f000 80a4 	beq.w	801844a <rmw_wait+0x29a>
 8018302:	f8d9 7000 	ldr.w	r7, [r9]
 8018306:	2f00      	cmp	r7, #0
 8018308:	f000 8088 	beq.w	801841c <rmw_wait+0x26c>
 801830c:	2400      	movs	r4, #0
 801830e:	4627      	mov	r7, r4
 8018310:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018314:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018318:	f7f8 fb3e 	bl	8010998 <rmw_uxrce_find_static_input_buffer_by_owner>
 801831c:	2800      	cmp	r0, #0
 801831e:	d064      	beq.n	80183ea <rmw_wait+0x23a>
 8018320:	f8d9 3000 	ldr.w	r3, [r9]
 8018324:	3401      	adds	r4, #1
 8018326:	42a3      	cmp	r3, r4
 8018328:	f04f 0701 	mov.w	r7, #1
 801832c:	d8f0      	bhi.n	8018310 <rmw_wait+0x160>
 801832e:	b17d      	cbz	r5, 8018350 <rmw_wait+0x1a0>
 8018330:	682b      	ldr	r3, [r5, #0]
 8018332:	b16b      	cbz	r3, 8018350 <rmw_wait+0x1a0>
 8018334:	2400      	movs	r4, #0
 8018336:	686b      	ldr	r3, [r5, #4]
 8018338:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801833c:	f7f8 fb2c 	bl	8010998 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018340:	2800      	cmp	r0, #0
 8018342:	d04a      	beq.n	80183da <rmw_wait+0x22a>
 8018344:	682b      	ldr	r3, [r5, #0]
 8018346:	3401      	adds	r4, #1
 8018348:	42a3      	cmp	r3, r4
 801834a:	f04f 0701 	mov.w	r7, #1
 801834e:	d8f2      	bhi.n	8018336 <rmw_wait+0x186>
 8018350:	b1de      	cbz	r6, 801838a <rmw_wait+0x1da>
 8018352:	6833      	ldr	r3, [r6, #0]
 8018354:	b1cb      	cbz	r3, 801838a <rmw_wait+0x1da>
 8018356:	2400      	movs	r4, #0
 8018358:	6873      	ldr	r3, [r6, #4]
 801835a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801835e:	f7f8 fb1b 	bl	8010998 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018362:	b158      	cbz	r0, 801837c <rmw_wait+0x1cc>
 8018364:	6833      	ldr	r3, [r6, #0]
 8018366:	3401      	adds	r4, #1
 8018368:	42a3      	cmp	r3, r4
 801836a:	d963      	bls.n	8018434 <rmw_wait+0x284>
 801836c:	6873      	ldr	r3, [r6, #4]
 801836e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018372:	2701      	movs	r7, #1
 8018374:	f7f8 fb10 	bl	8010998 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018378:	2800      	cmp	r0, #0
 801837a:	d1f3      	bne.n	8018364 <rmw_wait+0x1b4>
 801837c:	e9d6 3200 	ldrd	r3, r2, [r6]
 8018380:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018384:	3401      	adds	r4, #1
 8018386:	42a3      	cmp	r3, r4
 8018388:	d8e6      	bhi.n	8018358 <rmw_wait+0x1a8>
 801838a:	f1b8 0f00 	cmp.w	r8, #0
 801838e:	d016      	beq.n	80183be <rmw_wait+0x20e>
 8018390:	f8d8 4000 	ldr.w	r4, [r8]
 8018394:	b19c      	cbz	r4, 80183be <rmw_wait+0x20e>
 8018396:	2300      	movs	r3, #0
 8018398:	461d      	mov	r5, r3
 801839a:	e004      	b.n	80183a6 <rmw_wait+0x1f6>
 801839c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80183a0:	3301      	adds	r3, #1
 80183a2:	42a3      	cmp	r3, r4
 80183a4:	d00b      	beq.n	80183be <rmw_wait+0x20e>
 80183a6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80183aa:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80183ae:	780a      	ldrb	r2, [r1, #0]
 80183b0:	2a00      	cmp	r2, #0
 80183b2:	d0f3      	beq.n	801839c <rmw_wait+0x1ec>
 80183b4:	3301      	adds	r3, #1
 80183b6:	42a3      	cmp	r3, r4
 80183b8:	700d      	strb	r5, [r1, #0]
 80183ba:	4617      	mov	r7, r2
 80183bc:	d1f3      	bne.n	80183a6 <rmw_wait+0x1f6>
 80183be:	2f00      	cmp	r7, #0
 80183c0:	d035      	beq.n	801842e <rmw_wait+0x27e>
 80183c2:	2000      	movs	r0, #0
 80183c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183c8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80183cc:	4651      	mov	r1, sl
 80183ce:	f7fb f841 	bl	8013454 <uxr_run_session_until_data>
 80183d2:	68a4      	ldr	r4, [r4, #8]
 80183d4:	2c00      	cmp	r4, #0
 80183d6:	d189      	bne.n	80182ec <rmw_wait+0x13c>
 80183d8:	e78f      	b.n	80182fa <rmw_wait+0x14a>
 80183da:	e9d5 3200 	ldrd	r3, r2, [r5]
 80183de:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80183e2:	3401      	adds	r4, #1
 80183e4:	429c      	cmp	r4, r3
 80183e6:	d3a6      	bcc.n	8018336 <rmw_wait+0x186>
 80183e8:	e7b2      	b.n	8018350 <rmw_wait+0x1a0>
 80183ea:	e9d9 3200 	ldrd	r3, r2, [r9]
 80183ee:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80183f2:	3401      	adds	r4, #1
 80183f4:	42a3      	cmp	r3, r4
 80183f6:	d88b      	bhi.n	8018310 <rmw_wait+0x160>
 80183f8:	e799      	b.n	801832e <rmw_wait+0x17e>
 80183fa:	4692      	mov	sl, r2
 80183fc:	e70b      	b.n	8018216 <rmw_wait+0x66>
 80183fe:	2b00      	cmp	r3, #0
 8018400:	f47f aee0 	bne.w	80181c4 <rmw_wait+0x14>
 8018404:	2800      	cmp	r0, #0
 8018406:	f47f aedd 	bne.w	80181c4 <rmw_wait+0x14>
 801840a:	f1b8 0f00 	cmp.w	r8, #0
 801840e:	d0d8      	beq.n	80183c2 <rmw_wait+0x212>
 8018410:	2900      	cmp	r1, #0
 8018412:	f47f aeda 	bne.w	80181ca <rmw_wait+0x1a>
 8018416:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801841a:	e6fc      	b.n	8018216 <rmw_wait+0x66>
 801841c:	bb05      	cbnz	r5, 8018460 <rmw_wait+0x2b0>
 801841e:	b366      	cbz	r6, 801847a <rmw_wait+0x2ca>
 8018420:	6833      	ldr	r3, [r6, #0]
 8018422:	462f      	mov	r7, r5
 8018424:	2b00      	cmp	r3, #0
 8018426:	d196      	bne.n	8018356 <rmw_wait+0x1a6>
 8018428:	f1b8 0f00 	cmp.w	r8, #0
 801842c:	d1b0      	bne.n	8018390 <rmw_wait+0x1e0>
 801842e:	2002      	movs	r0, #2
 8018430:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018434:	f1b8 0f00 	cmp.w	r8, #0
 8018438:	d0c3      	beq.n	80183c2 <rmw_wait+0x212>
 801843a:	f8d8 4000 	ldr.w	r4, [r8]
 801843e:	2701      	movs	r7, #1
 8018440:	2c00      	cmp	r4, #0
 8018442:	d1a8      	bne.n	8018396 <rmw_wait+0x1e6>
 8018444:	e7bd      	b.n	80183c2 <rmw_wait+0x212>
 8018446:	461c      	mov	r4, r3
 8018448:	e739      	b.n	80182be <rmw_wait+0x10e>
 801844a:	2d00      	cmp	r5, #0
 801844c:	d0e7      	beq.n	801841e <rmw_wait+0x26e>
 801844e:	682b      	ldr	r3, [r5, #0]
 8018450:	464f      	mov	r7, r9
 8018452:	2b00      	cmp	r3, #0
 8018454:	f47f af6e 	bne.w	8018334 <rmw_wait+0x184>
 8018458:	2e00      	cmp	r6, #0
 801845a:	f47f af7a 	bne.w	8018352 <rmw_wait+0x1a2>
 801845e:	e007      	b.n	8018470 <rmw_wait+0x2c0>
 8018460:	682b      	ldr	r3, [r5, #0]
 8018462:	2b00      	cmp	r3, #0
 8018464:	f47f af66 	bne.w	8018334 <rmw_wait+0x184>
 8018468:	461f      	mov	r7, r3
 801846a:	2e00      	cmp	r6, #0
 801846c:	f47f af71 	bne.w	8018352 <rmw_wait+0x1a2>
 8018470:	4637      	mov	r7, r6
 8018472:	f1b8 0f00 	cmp.w	r8, #0
 8018476:	d18b      	bne.n	8018390 <rmw_wait+0x1e0>
 8018478:	e7d9      	b.n	801842e <rmw_wait+0x27e>
 801847a:	f1b8 0f00 	cmp.w	r8, #0
 801847e:	d0d6      	beq.n	801842e <rmw_wait+0x27e>
 8018480:	f8d8 4000 	ldr.w	r4, [r8]
 8018484:	4637      	mov	r7, r6
 8018486:	2c00      	cmp	r4, #0
 8018488:	d185      	bne.n	8018396 <rmw_wait+0x1e6>
 801848a:	e7d0      	b.n	801842e <rmw_wait+0x27e>
 801848c:	000f4240 	.word	0x000f4240
 8018490:	20014858 	.word	0x20014858

08018494 <rmw_create_wait_set>:
 8018494:	b508      	push	{r3, lr}
 8018496:	4803      	ldr	r0, [pc, #12]	; (80184a4 <rmw_create_wait_set+0x10>)
 8018498:	f7ff fcc4 	bl	8017e24 <get_memory>
 801849c:	b108      	cbz	r0, 80184a2 <rmw_create_wait_set+0xe>
 801849e:	68c0      	ldr	r0, [r0, #12]
 80184a0:	3010      	adds	r0, #16
 80184a2:	bd08      	pop	{r3, pc}
 80184a4:	20016030 	.word	0x20016030

080184a8 <rmw_destroy_wait_set>:
 80184a8:	b508      	push	{r3, lr}
 80184aa:	4b08      	ldr	r3, [pc, #32]	; (80184cc <rmw_destroy_wait_set+0x24>)
 80184ac:	6819      	ldr	r1, [r3, #0]
 80184ae:	b911      	cbnz	r1, 80184b6 <rmw_destroy_wait_set+0xe>
 80184b0:	e00a      	b.n	80184c8 <rmw_destroy_wait_set+0x20>
 80184b2:	6889      	ldr	r1, [r1, #8]
 80184b4:	b141      	cbz	r1, 80184c8 <rmw_destroy_wait_set+0x20>
 80184b6:	68cb      	ldr	r3, [r1, #12]
 80184b8:	3310      	adds	r3, #16
 80184ba:	4298      	cmp	r0, r3
 80184bc:	d1f9      	bne.n	80184b2 <rmw_destroy_wait_set+0xa>
 80184be:	4803      	ldr	r0, [pc, #12]	; (80184cc <rmw_destroy_wait_set+0x24>)
 80184c0:	f7ff fcc0 	bl	8017e44 <put_memory>
 80184c4:	2000      	movs	r0, #0
 80184c6:	bd08      	pop	{r3, pc}
 80184c8:	2001      	movs	r0, #1
 80184ca:	bd08      	pop	{r3, pc}
 80184cc:	20016030 	.word	0x20016030

080184d0 <_MultiArrayLayout__max_serialized_size>:
 80184d0:	b508      	push	{r3, lr}
 80184d2:	2104      	movs	r1, #4
 80184d4:	2000      	movs	r0, #0
 80184d6:	f7f9 fe0b 	bl	80120f0 <ucdr_alignment>
 80184da:	3004      	adds	r0, #4
 80184dc:	bd08      	pop	{r3, pc}
 80184de:	bf00      	nop

080184e0 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 80184e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184e4:	4607      	mov	r7, r0
 80184e6:	b378      	cbz	r0, 8018548 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x68>
 80184e8:	4688      	mov	r8, r1
 80184ea:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80184ee:	2104      	movs	r1, #4
 80184f0:	4640      	mov	r0, r8
 80184f2:	f7f9 fdfd 	bl	80120f0 <ucdr_alignment>
 80184f6:	f108 0304 	add.w	r3, r8, #4
 80184fa:	18c6      	adds	r6, r0, r3
 80184fc:	f1b9 0f00 	cmp.w	r9, #0
 8018500:	d018      	beq.n	8018534 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x54>
 8018502:	2400      	movs	r4, #0
 8018504:	f001 f840 	bl	8019588 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8018508:	683a      	ldr	r2, [r7, #0]
 801850a:	6843      	ldr	r3, [r0, #4]
 801850c:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8018510:	4631      	mov	r1, r6
 8018512:	695b      	ldr	r3, [r3, #20]
 8018514:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8018518:	4798      	blx	r3
 801851a:	2804      	cmp	r0, #4
 801851c:	4601      	mov	r1, r0
 801851e:	4605      	mov	r5, r0
 8018520:	bf28      	it	cs
 8018522:	2104      	movcs	r1, #4
 8018524:	4630      	mov	r0, r6
 8018526:	f7f9 fde3 	bl	80120f0 <ucdr_alignment>
 801852a:	3401      	adds	r4, #1
 801852c:	4405      	add	r5, r0
 801852e:	45a1      	cmp	r9, r4
 8018530:	442e      	add	r6, r5
 8018532:	d1e7      	bne.n	8018504 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x24>
 8018534:	2104      	movs	r1, #4
 8018536:	4630      	mov	r0, r6
 8018538:	f7f9 fdda 	bl	80120f0 <ucdr_alignment>
 801853c:	f1c8 0804 	rsb	r8, r8, #4
 8018540:	4446      	add	r6, r8
 8018542:	4430      	add	r0, r6
 8018544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018548:	4b05      	ldr	r3, [pc, #20]	; (8018560 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x80>)
 801854a:	4806      	ldr	r0, [pc, #24]	; (8018564 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x84>)
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	221b      	movs	r2, #27
 8018550:	68db      	ldr	r3, [r3, #12]
 8018552:	2101      	movs	r1, #1
 8018554:	f001 f88a 	bl	801966c <fwrite>
 8018558:	4638      	mov	r0, r7
 801855a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801855e:	bf00      	nop
 8018560:	20000190 	.word	0x20000190
 8018564:	0801eec0 	.word	0x0801eec0

08018568 <_MultiArrayLayout__get_serialized_size>:
 8018568:	2100      	movs	r1, #0
 801856a:	f7ff bfb9 	b.w	80184e0 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 801856e:	bf00      	nop

08018570 <_MultiArrayLayout__cdr_deserialize>:
 8018570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018572:	460e      	mov	r6, r1
 8018574:	b083      	sub	sp, #12
 8018576:	b311      	cbz	r1, 80185be <_MultiArrayLayout__cdr_deserialize+0x4e>
 8018578:	a901      	add	r1, sp, #4
 801857a:	4607      	mov	r7, r0
 801857c:	f7f9 faf4 	bl	8011b68 <ucdr_deserialize_uint32_t>
 8018580:	9b01      	ldr	r3, [sp, #4]
 8018582:	68b2      	ldr	r2, [r6, #8]
 8018584:	429a      	cmp	r2, r3
 8018586:	d325      	bcc.n	80185d4 <_MultiArrayLayout__cdr_deserialize+0x64>
 8018588:	6073      	str	r3, [r6, #4]
 801858a:	b18b      	cbz	r3, 80185b0 <_MultiArrayLayout__cdr_deserialize+0x40>
 801858c:	2400      	movs	r4, #0
 801858e:	4625      	mov	r5, r4
 8018590:	e002      	b.n	8018598 <_MultiArrayLayout__cdr_deserialize+0x28>
 8018592:	9b01      	ldr	r3, [sp, #4]
 8018594:	42ab      	cmp	r3, r5
 8018596:	d90b      	bls.n	80185b0 <_MultiArrayLayout__cdr_deserialize+0x40>
 8018598:	f000 fff6 	bl	8019588 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 801859c:	6831      	ldr	r1, [r6, #0]
 801859e:	6843      	ldr	r3, [r0, #4]
 80185a0:	4421      	add	r1, r4
 80185a2:	68db      	ldr	r3, [r3, #12]
 80185a4:	4638      	mov	r0, r7
 80185a6:	4798      	blx	r3
 80185a8:	3501      	adds	r5, #1
 80185aa:	3414      	adds	r4, #20
 80185ac:	2800      	cmp	r0, #0
 80185ae:	d1f0      	bne.n	8018592 <_MultiArrayLayout__cdr_deserialize+0x22>
 80185b0:	f106 010c 	add.w	r1, r6, #12
 80185b4:	4638      	mov	r0, r7
 80185b6:	f7f9 fad7 	bl	8011b68 <ucdr_deserialize_uint32_t>
 80185ba:	b003      	add	sp, #12
 80185bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185be:	4b0b      	ldr	r3, [pc, #44]	; (80185ec <_MultiArrayLayout__cdr_deserialize+0x7c>)
 80185c0:	480b      	ldr	r0, [pc, #44]	; (80185f0 <_MultiArrayLayout__cdr_deserialize+0x80>)
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	221b      	movs	r2, #27
 80185c6:	68db      	ldr	r3, [r3, #12]
 80185c8:	2101      	movs	r1, #1
 80185ca:	f001 f84f 	bl	801966c <fwrite>
 80185ce:	4630      	mov	r0, r6
 80185d0:	b003      	add	sp, #12
 80185d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185d4:	4b05      	ldr	r3, [pc, #20]	; (80185ec <_MultiArrayLayout__cdr_deserialize+0x7c>)
 80185d6:	4807      	ldr	r0, [pc, #28]	; (80185f4 <_MultiArrayLayout__cdr_deserialize+0x84>)
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	2231      	movs	r2, #49	; 0x31
 80185dc:	68db      	ldr	r3, [r3, #12]
 80185de:	2101      	movs	r1, #1
 80185e0:	f001 f844 	bl	801966c <fwrite>
 80185e4:	2000      	movs	r0, #0
 80185e6:	b003      	add	sp, #12
 80185e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185ea:	bf00      	nop
 80185ec:	20000190 	.word	0x20000190
 80185f0:	0801eec0 	.word	0x0801eec0
 80185f4:	0801f62c 	.word	0x0801f62c

080185f8 <_MultiArrayLayout__cdr_serialize>:
 80185f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185fa:	4605      	mov	r5, r0
 80185fc:	b1f8      	cbz	r0, 801863e <_MultiArrayLayout__cdr_serialize+0x46>
 80185fe:	6847      	ldr	r7, [r0, #4]
 8018600:	460e      	mov	r6, r1
 8018602:	4608      	mov	r0, r1
 8018604:	4639      	mov	r1, r7
 8018606:	f7f9 fa4f 	bl	8011aa8 <ucdr_serialize_uint32_t>
 801860a:	b190      	cbz	r0, 8018632 <_MultiArrayLayout__cdr_serialize+0x3a>
 801860c:	b18f      	cbz	r7, 8018632 <_MultiArrayLayout__cdr_serialize+0x3a>
 801860e:	2400      	movs	r4, #0
 8018610:	e001      	b.n	8018616 <_MultiArrayLayout__cdr_serialize+0x1e>
 8018612:	42a7      	cmp	r7, r4
 8018614:	d00d      	beq.n	8018632 <_MultiArrayLayout__cdr_serialize+0x3a>
 8018616:	f000 ffb7 	bl	8019588 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 801861a:	682a      	ldr	r2, [r5, #0]
 801861c:	6843      	ldr	r3, [r0, #4]
 801861e:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8018622:	689b      	ldr	r3, [r3, #8]
 8018624:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8018628:	4631      	mov	r1, r6
 801862a:	3401      	adds	r4, #1
 801862c:	4798      	blx	r3
 801862e:	2800      	cmp	r0, #0
 8018630:	d1ef      	bne.n	8018612 <_MultiArrayLayout__cdr_serialize+0x1a>
 8018632:	68e9      	ldr	r1, [r5, #12]
 8018634:	4630      	mov	r0, r6
 8018636:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801863a:	f7f9 ba35 	b.w	8011aa8 <ucdr_serialize_uint32_t>
 801863e:	4b05      	ldr	r3, [pc, #20]	; (8018654 <_MultiArrayLayout__cdr_serialize+0x5c>)
 8018640:	4805      	ldr	r0, [pc, #20]	; (8018658 <_MultiArrayLayout__cdr_serialize+0x60>)
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	221b      	movs	r2, #27
 8018646:	68db      	ldr	r3, [r3, #12]
 8018648:	2101      	movs	r1, #1
 801864a:	f001 f80f 	bl	801966c <fwrite>
 801864e:	4628      	mov	r0, r5
 8018650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018652:	bf00      	nop
 8018654:	20000190 	.word	0x20000190
 8018658:	0801eec0 	.word	0x0801eec0

0801865c <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 801865c:	b508      	push	{r3, lr}
 801865e:	4603      	mov	r3, r0
 8018660:	2200      	movs	r2, #0
 8018662:	4608      	mov	r0, r1
 8018664:	701a      	strb	r2, [r3, #0]
 8018666:	2104      	movs	r1, #4
 8018668:	f7f9 fd42 	bl	80120f0 <ucdr_alignment>
 801866c:	3004      	adds	r0, #4
 801866e:	bd08      	pop	{r3, pc}

08018670 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8018670:	4800      	ldr	r0, [pc, #0]	; (8018674 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 8018672:	4770      	bx	lr
 8018674:	20000140 	.word	0x20000140

08018678 <ucdr_serialize_string>:
 8018678:	b510      	push	{r4, lr}
 801867a:	b082      	sub	sp, #8
 801867c:	4604      	mov	r4, r0
 801867e:	4608      	mov	r0, r1
 8018680:	9101      	str	r1, [sp, #4]
 8018682:	f7e7 fdaf 	bl	80001e4 <strlen>
 8018686:	9901      	ldr	r1, [sp, #4]
 8018688:	4602      	mov	r2, r0
 801868a:	3201      	adds	r2, #1
 801868c:	4620      	mov	r0, r4
 801868e:	b002      	add	sp, #8
 8018690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018694:	f7f9 bd9c 	b.w	80121d0 <ucdr_serialize_sequence_char>

08018698 <uxr_init_input_best_effort_stream>:
 8018698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801869c:	8003      	strh	r3, [r0, #0]
 801869e:	4770      	bx	lr

080186a0 <uxr_reset_input_best_effort_stream>:
 80186a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80186a4:	8003      	strh	r3, [r0, #0]
 80186a6:	4770      	bx	lr

080186a8 <uxr_receive_best_effort_message>:
 80186a8:	b538      	push	{r3, r4, r5, lr}
 80186aa:	4604      	mov	r4, r0
 80186ac:	8800      	ldrh	r0, [r0, #0]
 80186ae:	460d      	mov	r5, r1
 80186b0:	f000 fd16 	bl	80190e0 <uxr_seq_num_cmp>
 80186b4:	4603      	mov	r3, r0
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80186bc:	bfb8      	it	lt
 80186be:	8025      	strhlt	r5, [r4, #0]
 80186c0:	bd38      	pop	{r3, r4, r5, pc}
 80186c2:	bf00      	nop

080186c4 <on_full_input_buffer>:
 80186c4:	b570      	push	{r4, r5, r6, lr}
 80186c6:	6802      	ldr	r2, [r0, #0]
 80186c8:	460d      	mov	r5, r1
 80186ca:	6809      	ldr	r1, [r1, #0]
 80186cc:	686c      	ldr	r4, [r5, #4]
 80186ce:	1a53      	subs	r3, r2, r1
 80186d0:	4606      	mov	r6, r0
 80186d2:	8928      	ldrh	r0, [r5, #8]
 80186d4:	fbb4 f4f0 	udiv	r4, r4, r0
 80186d8:	fbb3 f3f4 	udiv	r3, r3, r4
 80186dc:	3301      	adds	r3, #1
 80186de:	b29b      	uxth	r3, r3
 80186e0:	fbb3 f2f0 	udiv	r2, r3, r0
 80186e4:	fb00 3312 	mls	r3, r0, r2, r3
 80186e8:	b29b      	uxth	r3, r3
 80186ea:	fb04 f403 	mul.w	r4, r4, r3
 80186ee:	1d23      	adds	r3, r4, #4
 80186f0:	440b      	add	r3, r1
 80186f2:	7d28      	ldrb	r0, [r5, #20]
 80186f4:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80186f8:	b110      	cbz	r0, 8018700 <on_full_input_buffer+0x3c>
 80186fa:	2000      	movs	r0, #0
 80186fc:	f843 0c04 	str.w	r0, [r3, #-4]
 8018700:	2a03      	cmp	r2, #3
 8018702:	d801      	bhi.n	8018708 <on_full_input_buffer+0x44>
 8018704:	2001      	movs	r0, #1
 8018706:	bd70      	pop	{r4, r5, r6, pc}
 8018708:	3408      	adds	r4, #8
 801870a:	6933      	ldr	r3, [r6, #16]
 801870c:	4421      	add	r1, r4
 801870e:	4630      	mov	r0, r6
 8018710:	3a04      	subs	r2, #4
 8018712:	f7f9 fce1 	bl	80120d8 <ucdr_init_buffer_origin>
 8018716:	4630      	mov	r0, r6
 8018718:	4902      	ldr	r1, [pc, #8]	; (8018724 <on_full_input_buffer+0x60>)
 801871a:	462a      	mov	r2, r5
 801871c:	f7f9 fcba 	bl	8012094 <ucdr_set_on_full_buffer_callback>
 8018720:	2000      	movs	r0, #0
 8018722:	bd70      	pop	{r4, r5, r6, pc}
 8018724:	080186c5 	.word	0x080186c5

08018728 <uxr_init_input_reliable_stream>:
 8018728:	b470      	push	{r4, r5, r6}
 801872a:	9c03      	ldr	r4, [sp, #12]
 801872c:	6001      	str	r1, [r0, #0]
 801872e:	2600      	movs	r6, #0
 8018730:	8103      	strh	r3, [r0, #8]
 8018732:	6042      	str	r2, [r0, #4]
 8018734:	6104      	str	r4, [r0, #16]
 8018736:	7506      	strb	r6, [r0, #20]
 8018738:	b1ab      	cbz	r3, 8018766 <uxr_init_input_reliable_stream+0x3e>
 801873a:	600e      	str	r6, [r1, #0]
 801873c:	8901      	ldrh	r1, [r0, #8]
 801873e:	2901      	cmp	r1, #1
 8018740:	d911      	bls.n	8018766 <uxr_init_input_reliable_stream+0x3e>
 8018742:	2201      	movs	r2, #1
 8018744:	e9d0 5400 	ldrd	r5, r4, [r0]
 8018748:	fbb2 f3f1 	udiv	r3, r2, r1
 801874c:	fb01 2313 	mls	r3, r1, r3, r2
 8018750:	b29b      	uxth	r3, r3
 8018752:	fbb4 f1f1 	udiv	r1, r4, r1
 8018756:	fb03 f301 	mul.w	r3, r3, r1
 801875a:	3201      	adds	r2, #1
 801875c:	50ee      	str	r6, [r5, r3]
 801875e:	8901      	ldrh	r1, [r0, #8]
 8018760:	b292      	uxth	r2, r2
 8018762:	4291      	cmp	r1, r2
 8018764:	d8ee      	bhi.n	8018744 <uxr_init_input_reliable_stream+0x1c>
 8018766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801876a:	bc70      	pop	{r4, r5, r6}
 801876c:	60c3      	str	r3, [r0, #12]
 801876e:	4770      	bx	lr

08018770 <uxr_reset_input_reliable_stream>:
 8018770:	8902      	ldrh	r2, [r0, #8]
 8018772:	b1ca      	cbz	r2, 80187a8 <uxr_reset_input_reliable_stream+0x38>
 8018774:	b470      	push	{r4, r5, r6}
 8018776:	2400      	movs	r4, #0
 8018778:	4621      	mov	r1, r4
 801877a:	4626      	mov	r6, r4
 801877c:	fbb1 f3f2 	udiv	r3, r1, r2
 8018780:	fb02 1313 	mls	r3, r2, r3, r1
 8018784:	e9d0 5100 	ldrd	r5, r1, [r0]
 8018788:	b29b      	uxth	r3, r3
 801878a:	fbb1 f2f2 	udiv	r2, r1, r2
 801878e:	fb03 f302 	mul.w	r3, r3, r2
 8018792:	3401      	adds	r4, #1
 8018794:	50ee      	str	r6, [r5, r3]
 8018796:	8902      	ldrh	r2, [r0, #8]
 8018798:	b2a1      	uxth	r1, r4
 801879a:	428a      	cmp	r2, r1
 801879c:	d8ee      	bhi.n	801877c <uxr_reset_input_reliable_stream+0xc>
 801879e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80187a2:	bc70      	pop	{r4, r5, r6}
 80187a4:	60c3      	str	r3, [r0, #12]
 80187a6:	4770      	bx	lr
 80187a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80187ac:	60c3      	str	r3, [r0, #12]
 80187ae:	4770      	bx	lr

080187b0 <uxr_receive_reliable_message>:
 80187b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187b4:	4604      	mov	r4, r0
 80187b6:	460d      	mov	r5, r1
 80187b8:	8901      	ldrh	r1, [r0, #8]
 80187ba:	8980      	ldrh	r0, [r0, #12]
 80187bc:	4690      	mov	r8, r2
 80187be:	461f      	mov	r7, r3
 80187c0:	f000 fc86 	bl	80190d0 <uxr_seq_num_add>
 80187c4:	4629      	mov	r1, r5
 80187c6:	4606      	mov	r6, r0
 80187c8:	89a0      	ldrh	r0, [r4, #12]
 80187ca:	f000 fc89 	bl	80190e0 <uxr_seq_num_cmp>
 80187ce:	2800      	cmp	r0, #0
 80187d0:	db0a      	blt.n	80187e8 <uxr_receive_reliable_message+0x38>
 80187d2:	2600      	movs	r6, #0
 80187d4:	89e0      	ldrh	r0, [r4, #14]
 80187d6:	4629      	mov	r1, r5
 80187d8:	f000 fc82 	bl	80190e0 <uxr_seq_num_cmp>
 80187dc:	2800      	cmp	r0, #0
 80187de:	bfb8      	it	lt
 80187e0:	81e5      	strhlt	r5, [r4, #14]
 80187e2:	4630      	mov	r0, r6
 80187e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187e8:	4630      	mov	r0, r6
 80187ea:	4629      	mov	r1, r5
 80187ec:	f000 fc78 	bl	80190e0 <uxr_seq_num_cmp>
 80187f0:	2800      	cmp	r0, #0
 80187f2:	dbee      	blt.n	80187d2 <uxr_receive_reliable_message+0x22>
 80187f4:	6923      	ldr	r3, [r4, #16]
 80187f6:	4640      	mov	r0, r8
 80187f8:	4798      	blx	r3
 80187fa:	2101      	movs	r1, #1
 80187fc:	4681      	mov	r9, r0
 80187fe:	89a0      	ldrh	r0, [r4, #12]
 8018800:	f000 fc66 	bl	80190d0 <uxr_seq_num_add>
 8018804:	f1b9 0f00 	cmp.w	r9, #0
 8018808:	d101      	bne.n	801880e <uxr_receive_reliable_message+0x5e>
 801880a:	4285      	cmp	r5, r0
 801880c:	d049      	beq.n	80188a2 <uxr_receive_reliable_message+0xf2>
 801880e:	8921      	ldrh	r1, [r4, #8]
 8018810:	fbb5 f3f1 	udiv	r3, r5, r1
 8018814:	fb01 5313 	mls	r3, r1, r3, r5
 8018818:	b29b      	uxth	r3, r3
 801881a:	6862      	ldr	r2, [r4, #4]
 801881c:	6820      	ldr	r0, [r4, #0]
 801881e:	fbb2 f2f1 	udiv	r2, r2, r1
 8018822:	fb03 f302 	mul.w	r3, r3, r2
 8018826:	3304      	adds	r3, #4
 8018828:	4418      	add	r0, r3
 801882a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801882e:	2b00      	cmp	r3, #0
 8018830:	d1cf      	bne.n	80187d2 <uxr_receive_reliable_message+0x22>
 8018832:	4641      	mov	r1, r8
 8018834:	463a      	mov	r2, r7
 8018836:	f000 ffa5 	bl	8019784 <memcpy>
 801883a:	8921      	ldrh	r1, [r4, #8]
 801883c:	fbb5 f3f1 	udiv	r3, r5, r1
 8018840:	fb01 5313 	mls	r3, r1, r3, r5
 8018844:	b29b      	uxth	r3, r3
 8018846:	6862      	ldr	r2, [r4, #4]
 8018848:	fbb2 f2f1 	udiv	r2, r2, r1
 801884c:	6821      	ldr	r1, [r4, #0]
 801884e:	fb03 f302 	mul.w	r3, r3, r2
 8018852:	2201      	movs	r2, #1
 8018854:	50cf      	str	r7, [r1, r3]
 8018856:	9b08      	ldr	r3, [sp, #32]
 8018858:	701a      	strb	r2, [r3, #0]
 801885a:	f1b9 0f00 	cmp.w	r9, #0
 801885e:	d0b8      	beq.n	80187d2 <uxr_receive_reliable_message+0x22>
 8018860:	89a6      	ldrh	r6, [r4, #12]
 8018862:	e001      	b.n	8018868 <uxr_receive_reliable_message+0xb8>
 8018864:	2801      	cmp	r0, #1
 8018866:	d1b4      	bne.n	80187d2 <uxr_receive_reliable_message+0x22>
 8018868:	4630      	mov	r0, r6
 801886a:	2101      	movs	r1, #1
 801886c:	f000 fc30 	bl	80190d0 <uxr_seq_num_add>
 8018870:	8921      	ldrh	r1, [r4, #8]
 8018872:	fbb0 f3f1 	udiv	r3, r0, r1
 8018876:	fb01 0313 	mls	r3, r1, r3, r0
 801887a:	b29b      	uxth	r3, r3
 801887c:	6862      	ldr	r2, [r4, #4]
 801887e:	fbb2 f2f1 	udiv	r2, r2, r1
 8018882:	4606      	mov	r6, r0
 8018884:	fb03 f302 	mul.w	r3, r3, r2
 8018888:	6820      	ldr	r0, [r4, #0]
 801888a:	3304      	adds	r3, #4
 801888c:	4418      	add	r0, r3
 801888e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018892:	2b00      	cmp	r3, #0
 8018894:	d09d      	beq.n	80187d2 <uxr_receive_reliable_message+0x22>
 8018896:	6923      	ldr	r3, [r4, #16]
 8018898:	4798      	blx	r3
 801889a:	2802      	cmp	r0, #2
 801889c:	d1e2      	bne.n	8018864 <uxr_receive_reliable_message+0xb4>
 801889e:	2601      	movs	r6, #1
 80188a0:	e798      	b.n	80187d4 <uxr_receive_reliable_message+0x24>
 80188a2:	9b08      	ldr	r3, [sp, #32]
 80188a4:	81a5      	strh	r5, [r4, #12]
 80188a6:	2601      	movs	r6, #1
 80188a8:	f883 9000 	strb.w	r9, [r3]
 80188ac:	e792      	b.n	80187d4 <uxr_receive_reliable_message+0x24>
 80188ae:	bf00      	nop

080188b0 <uxr_next_input_reliable_buffer_available>:
 80188b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80188b4:	4604      	mov	r4, r0
 80188b6:	460e      	mov	r6, r1
 80188b8:	8980      	ldrh	r0, [r0, #12]
 80188ba:	2101      	movs	r1, #1
 80188bc:	4617      	mov	r7, r2
 80188be:	f000 fc07 	bl	80190d0 <uxr_seq_num_add>
 80188c2:	8921      	ldrh	r1, [r4, #8]
 80188c4:	fbb0 f3f1 	udiv	r3, r0, r1
 80188c8:	fb01 0313 	mls	r3, r1, r3, r0
 80188cc:	b29b      	uxth	r3, r3
 80188ce:	6862      	ldr	r2, [r4, #4]
 80188d0:	fbb2 f2f1 	udiv	r2, r2, r1
 80188d4:	fb03 f302 	mul.w	r3, r3, r2
 80188d8:	6822      	ldr	r2, [r4, #0]
 80188da:	3304      	adds	r3, #4
 80188dc:	eb02 0803 	add.w	r8, r2, r3
 80188e0:	f858 9c04 	ldr.w	r9, [r8, #-4]
 80188e4:	f1b9 0f00 	cmp.w	r9, #0
 80188e8:	d025      	beq.n	8018936 <uxr_next_input_reliable_buffer_available+0x86>
 80188ea:	6923      	ldr	r3, [r4, #16]
 80188ec:	4605      	mov	r5, r0
 80188ee:	4640      	mov	r0, r8
 80188f0:	4798      	blx	r3
 80188f2:	4682      	mov	sl, r0
 80188f4:	b310      	cbz	r0, 801893c <uxr_next_input_reliable_buffer_available+0x8c>
 80188f6:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80188fa:	e005      	b.n	8018908 <uxr_next_input_reliable_buffer_available+0x58>
 80188fc:	6923      	ldr	r3, [r4, #16]
 80188fe:	4798      	blx	r3
 8018900:	2802      	cmp	r0, #2
 8018902:	d032      	beq.n	801896a <uxr_next_input_reliable_buffer_available+0xba>
 8018904:	2801      	cmp	r0, #1
 8018906:	d116      	bne.n	8018936 <uxr_next_input_reliable_buffer_available+0x86>
 8018908:	4650      	mov	r0, sl
 801890a:	2101      	movs	r1, #1
 801890c:	f000 fbe0 	bl	80190d0 <uxr_seq_num_add>
 8018910:	8921      	ldrh	r1, [r4, #8]
 8018912:	fbb0 f3f1 	udiv	r3, r0, r1
 8018916:	fb01 0313 	mls	r3, r1, r3, r0
 801891a:	b29b      	uxth	r3, r3
 801891c:	6862      	ldr	r2, [r4, #4]
 801891e:	fbb2 f2f1 	udiv	r2, r2, r1
 8018922:	4682      	mov	sl, r0
 8018924:	fb03 f302 	mul.w	r3, r3, r2
 8018928:	6820      	ldr	r0, [r4, #0]
 801892a:	3304      	adds	r3, #4
 801892c:	4418      	add	r0, r3
 801892e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018932:	2b00      	cmp	r3, #0
 8018934:	d1e2      	bne.n	80188fc <uxr_next_input_reliable_buffer_available+0x4c>
 8018936:	2000      	movs	r0, #0
 8018938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801893c:	464a      	mov	r2, r9
 801893e:	4641      	mov	r1, r8
 8018940:	4630      	mov	r0, r6
 8018942:	f7f9 fbd1 	bl	80120e8 <ucdr_init_buffer>
 8018946:	8921      	ldrh	r1, [r4, #8]
 8018948:	fbb5 f3f1 	udiv	r3, r5, r1
 801894c:	fb01 5313 	mls	r3, r1, r3, r5
 8018950:	b29b      	uxth	r3, r3
 8018952:	6862      	ldr	r2, [r4, #4]
 8018954:	fbb2 f2f1 	udiv	r2, r2, r1
 8018958:	6821      	ldr	r1, [r4, #0]
 801895a:	fb03 f302 	mul.w	r3, r3, r2
 801895e:	2001      	movs	r0, #1
 8018960:	f841 a003 	str.w	sl, [r1, r3]
 8018964:	81a5      	strh	r5, [r4, #12]
 8018966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801896a:	8922      	ldrh	r2, [r4, #8]
 801896c:	fbb5 f0f2 	udiv	r0, r5, r2
 8018970:	fb02 5510 	mls	r5, r2, r0, r5
 8018974:	b2ad      	uxth	r5, r5
 8018976:	6863      	ldr	r3, [r4, #4]
 8018978:	fbb3 f3f2 	udiv	r3, r3, r2
 801897c:	fb05 f503 	mul.w	r5, r5, r3
 8018980:	6823      	ldr	r3, [r4, #0]
 8018982:	2000      	movs	r0, #0
 8018984:	5158      	str	r0, [r3, r5]
 8018986:	eba9 0207 	sub.w	r2, r9, r7
 801898a:	eb08 0107 	add.w	r1, r8, r7
 801898e:	4630      	mov	r0, r6
 8018990:	f7f9 fbaa 	bl	80120e8 <ucdr_init_buffer>
 8018994:	4630      	mov	r0, r6
 8018996:	4904      	ldr	r1, [pc, #16]	; (80189a8 <uxr_next_input_reliable_buffer_available+0xf8>)
 8018998:	4622      	mov	r2, r4
 801899a:	f7f9 fb7b 	bl	8012094 <ucdr_set_on_full_buffer_callback>
 801899e:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80189a2:	2001      	movs	r0, #1
 80189a4:	e7c8      	b.n	8018938 <uxr_next_input_reliable_buffer_available+0x88>
 80189a6:	bf00      	nop
 80189a8:	080186c5 	.word	0x080186c5

080189ac <uxr_process_heartbeat>:
 80189ac:	b538      	push	{r3, r4, r5, lr}
 80189ae:	4611      	mov	r1, r2
 80189b0:	4604      	mov	r4, r0
 80189b2:	89c0      	ldrh	r0, [r0, #14]
 80189b4:	4615      	mov	r5, r2
 80189b6:	f000 fb93 	bl	80190e0 <uxr_seq_num_cmp>
 80189ba:	2800      	cmp	r0, #0
 80189bc:	bfb8      	it	lt
 80189be:	81e5      	strhlt	r5, [r4, #14]
 80189c0:	bd38      	pop	{r3, r4, r5, pc}
 80189c2:	bf00      	nop

080189c4 <uxr_compute_acknack>:
 80189c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189c8:	8903      	ldrh	r3, [r0, #8]
 80189ca:	8986      	ldrh	r6, [r0, #12]
 80189cc:	4604      	mov	r4, r0
 80189ce:	460d      	mov	r5, r1
 80189d0:	b1d3      	cbz	r3, 8018a08 <uxr_compute_acknack+0x44>
 80189d2:	4630      	mov	r0, r6
 80189d4:	2701      	movs	r7, #1
 80189d6:	e003      	b.n	80189e0 <uxr_compute_acknack+0x1c>
 80189d8:	4567      	cmp	r7, ip
 80189da:	d215      	bcs.n	8018a08 <uxr_compute_acknack+0x44>
 80189dc:	89a0      	ldrh	r0, [r4, #12]
 80189de:	3701      	adds	r7, #1
 80189e0:	b2b9      	uxth	r1, r7
 80189e2:	f000 fb75 	bl	80190d0 <uxr_seq_num_add>
 80189e6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80189ea:	fbb0 f2fc 	udiv	r2, r0, ip
 80189ee:	e9d4 1300 	ldrd	r1, r3, [r4]
 80189f2:	fb0c 0212 	mls	r2, ip, r2, r0
 80189f6:	b292      	uxth	r2, r2
 80189f8:	fbb3 f3fc 	udiv	r3, r3, ip
 80189fc:	fb02 1303 	mla	r3, r2, r3, r1
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d1e8      	bne.n	80189d8 <uxr_compute_acknack+0x14>
 8018a06:	4606      	mov	r6, r0
 8018a08:	802e      	strh	r6, [r5, #0]
 8018a0a:	4630      	mov	r0, r6
 8018a0c:	2101      	movs	r1, #1
 8018a0e:	89e6      	ldrh	r6, [r4, #14]
 8018a10:	f000 fb62 	bl	80190d8 <uxr_seq_num_sub>
 8018a14:	4601      	mov	r1, r0
 8018a16:	4630      	mov	r0, r6
 8018a18:	f000 fb5e 	bl	80190d8 <uxr_seq_num_sub>
 8018a1c:	4606      	mov	r6, r0
 8018a1e:	b318      	cbz	r0, 8018a68 <uxr_compute_acknack+0xa4>
 8018a20:	f04f 0900 	mov.w	r9, #0
 8018a24:	464f      	mov	r7, r9
 8018a26:	f04f 0801 	mov.w	r8, #1
 8018a2a:	fa1f f189 	uxth.w	r1, r9
 8018a2e:	8828      	ldrh	r0, [r5, #0]
 8018a30:	f000 fb4e 	bl	80190d0 <uxr_seq_num_add>
 8018a34:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018a38:	6822      	ldr	r2, [r4, #0]
 8018a3a:	fbb0 f1fc 	udiv	r1, r0, ip
 8018a3e:	fb01 011c 	mls	r1, r1, ip, r0
 8018a42:	b289      	uxth	r1, r1
 8018a44:	6863      	ldr	r3, [r4, #4]
 8018a46:	fbb3 f3fc 	udiv	r3, r3, ip
 8018a4a:	fb01 2303 	mla	r3, r1, r3, r2
 8018a4e:	fa08 f209 	lsl.w	r2, r8, r9
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	f109 0901 	add.w	r9, r9, #1
 8018a58:	b90b      	cbnz	r3, 8018a5e <uxr_compute_acknack+0x9a>
 8018a5a:	4317      	orrs	r7, r2
 8018a5c:	b2bf      	uxth	r7, r7
 8018a5e:	454e      	cmp	r6, r9
 8018a60:	d1e3      	bne.n	8018a2a <uxr_compute_acknack+0x66>
 8018a62:	4638      	mov	r0, r7
 8018a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a68:	4607      	mov	r7, r0
 8018a6a:	4638      	mov	r0, r7
 8018a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018a70 <uxr_init_output_best_effort_stream>:
 8018a70:	b410      	push	{r4}
 8018a72:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8018a76:	81c4      	strh	r4, [r0, #14]
 8018a78:	e9c0 1300 	strd	r1, r3, [r0]
 8018a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a80:	7303      	strb	r3, [r0, #12]
 8018a82:	6082      	str	r2, [r0, #8]
 8018a84:	4770      	bx	lr
 8018a86:	bf00      	nop

08018a88 <uxr_reset_output_best_effort_stream>:
 8018a88:	7b02      	ldrb	r2, [r0, #12]
 8018a8a:	6042      	str	r2, [r0, #4]
 8018a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a90:	81c3      	strh	r3, [r0, #14]
 8018a92:	4770      	bx	lr

08018a94 <uxr_prepare_best_effort_buffer_to_write>:
 8018a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a96:	4604      	mov	r4, r0
 8018a98:	b083      	sub	sp, #12
 8018a9a:	6840      	ldr	r0, [r0, #4]
 8018a9c:	460d      	mov	r5, r1
 8018a9e:	4616      	mov	r6, r2
 8018aa0:	f7fb fcca 	bl	8014438 <uxr_submessage_padding>
 8018aa4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8018aa8:	4410      	add	r0, r2
 8018aaa:	1942      	adds	r2, r0, r5
 8018aac:	4293      	cmp	r3, r2
 8018aae:	bf2c      	ite	cs
 8018ab0:	2701      	movcs	r7, #1
 8018ab2:	2700      	movcc	r7, #0
 8018ab4:	d202      	bcs.n	8018abc <uxr_prepare_best_effort_buffer_to_write+0x28>
 8018ab6:	4638      	mov	r0, r7
 8018ab8:	b003      	add	sp, #12
 8018aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018abc:	9000      	str	r0, [sp, #0]
 8018abe:	6821      	ldr	r1, [r4, #0]
 8018ac0:	4630      	mov	r0, r6
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	f7f9 fafe 	bl	80120c4 <ucdr_init_buffer_origin_offset>
 8018ac8:	6861      	ldr	r1, [r4, #4]
 8018aca:	4638      	mov	r0, r7
 8018acc:	4429      	add	r1, r5
 8018ace:	6061      	str	r1, [r4, #4]
 8018ad0:	b003      	add	sp, #12
 8018ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018ad4 <uxr_prepare_best_effort_buffer_to_send>:
 8018ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ad8:	6845      	ldr	r5, [r0, #4]
 8018ada:	4604      	mov	r4, r0
 8018adc:	7b00      	ldrb	r0, [r0, #12]
 8018ade:	4285      	cmp	r5, r0
 8018ae0:	bf8c      	ite	hi
 8018ae2:	2701      	movhi	r7, #1
 8018ae4:	2700      	movls	r7, #0
 8018ae6:	d802      	bhi.n	8018aee <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8018ae8:	4638      	mov	r0, r7
 8018aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018aee:	4688      	mov	r8, r1
 8018af0:	89e0      	ldrh	r0, [r4, #14]
 8018af2:	2101      	movs	r1, #1
 8018af4:	4615      	mov	r5, r2
 8018af6:	461e      	mov	r6, r3
 8018af8:	f000 faea 	bl	80190d0 <uxr_seq_num_add>
 8018afc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018b00:	81e0      	strh	r0, [r4, #14]
 8018b02:	8030      	strh	r0, [r6, #0]
 8018b04:	f8c8 2000 	str.w	r2, [r8]
 8018b08:	602b      	str	r3, [r5, #0]
 8018b0a:	7b23      	ldrb	r3, [r4, #12]
 8018b0c:	6063      	str	r3, [r4, #4]
 8018b0e:	4638      	mov	r0, r7
 8018b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018b14 <on_full_output_buffer>:
 8018b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b16:	6802      	ldr	r2, [r0, #0]
 8018b18:	460d      	mov	r5, r1
 8018b1a:	6809      	ldr	r1, [r1, #0]
 8018b1c:	892f      	ldrh	r7, [r5, #8]
 8018b1e:	686c      	ldr	r4, [r5, #4]
 8018b20:	fbb4 f4f7 	udiv	r4, r4, r7
 8018b24:	1a53      	subs	r3, r2, r1
 8018b26:	fbb3 f3f4 	udiv	r3, r3, r4
 8018b2a:	3301      	adds	r3, #1
 8018b2c:	b29b      	uxth	r3, r3
 8018b2e:	fbb3 f2f7 	udiv	r2, r3, r7
 8018b32:	fb07 3312 	mls	r3, r7, r2, r3
 8018b36:	b29b      	uxth	r3, r3
 8018b38:	fb04 f403 	mul.w	r4, r4, r3
 8018b3c:	7b2f      	ldrb	r7, [r5, #12]
 8018b3e:	590a      	ldr	r2, [r1, r4]
 8018b40:	6903      	ldr	r3, [r0, #16]
 8018b42:	443c      	add	r4, r7
 8018b44:	3408      	adds	r4, #8
 8018b46:	1bd2      	subs	r2, r2, r7
 8018b48:	4606      	mov	r6, r0
 8018b4a:	4421      	add	r1, r4
 8018b4c:	3a04      	subs	r2, #4
 8018b4e:	f7f9 fac3 	bl	80120d8 <ucdr_init_buffer_origin>
 8018b52:	4630      	mov	r0, r6
 8018b54:	4902      	ldr	r1, [pc, #8]	; (8018b60 <on_full_output_buffer+0x4c>)
 8018b56:	462a      	mov	r2, r5
 8018b58:	f7f9 fa9c 	bl	8012094 <ucdr_set_on_full_buffer_callback>
 8018b5c:	2000      	movs	r0, #0
 8018b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b60:	08018b15 	.word	0x08018b15

08018b64 <uxr_init_output_reliable_stream>:
 8018b64:	b430      	push	{r4, r5}
 8018b66:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8018b6a:	6001      	str	r1, [r0, #0]
 8018b6c:	8103      	strh	r3, [r0, #8]
 8018b6e:	6042      	str	r2, [r0, #4]
 8018b70:	7304      	strb	r4, [r0, #12]
 8018b72:	b1b3      	cbz	r3, 8018ba2 <uxr_init_output_reliable_stream+0x3e>
 8018b74:	600c      	str	r4, [r1, #0]
 8018b76:	8901      	ldrh	r1, [r0, #8]
 8018b78:	2901      	cmp	r1, #1
 8018b7a:	d912      	bls.n	8018ba2 <uxr_init_output_reliable_stream+0x3e>
 8018b7c:	2201      	movs	r2, #1
 8018b7e:	e9d0 5400 	ldrd	r5, r4, [r0]
 8018b82:	fbb2 f3f1 	udiv	r3, r2, r1
 8018b86:	fb01 2313 	mls	r3, r1, r3, r2
 8018b8a:	b29b      	uxth	r3, r3
 8018b8c:	fbb4 f1f1 	udiv	r1, r4, r1
 8018b90:	fb03 f301 	mul.w	r3, r3, r1
 8018b94:	7b01      	ldrb	r1, [r0, #12]
 8018b96:	50e9      	str	r1, [r5, r3]
 8018b98:	3201      	adds	r2, #1
 8018b9a:	8901      	ldrh	r1, [r0, #8]
 8018b9c:	b292      	uxth	r2, r2
 8018b9e:	4291      	cmp	r1, r2
 8018ba0:	d8ed      	bhi.n	8018b7e <uxr_init_output_reliable_stream+0x1a>
 8018ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018ba6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018baa:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018bae:	4b05      	ldr	r3, [pc, #20]	; (8018bc4 <uxr_init_output_reliable_stream+0x60>)
 8018bb0:	f8c0 300e 	str.w	r3, [r0, #14]
 8018bb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018bb8:	2300      	movs	r3, #0
 8018bba:	bc30      	pop	{r4, r5}
 8018bbc:	8242      	strh	r2, [r0, #18]
 8018bbe:	8403      	strh	r3, [r0, #32]
 8018bc0:	4770      	bx	lr
 8018bc2:	bf00      	nop
 8018bc4:	ffff0000 	.word	0xffff0000

08018bc8 <uxr_reset_output_reliable_stream>:
 8018bc8:	8902      	ldrh	r2, [r0, #8]
 8018bca:	b430      	push	{r4, r5}
 8018bcc:	b19a      	cbz	r2, 8018bf6 <uxr_reset_output_reliable_stream+0x2e>
 8018bce:	2400      	movs	r4, #0
 8018bd0:	4621      	mov	r1, r4
 8018bd2:	fbb1 f3f2 	udiv	r3, r1, r2
 8018bd6:	fb02 1313 	mls	r3, r2, r3, r1
 8018bda:	e9d0 5100 	ldrd	r5, r1, [r0]
 8018bde:	b29b      	uxth	r3, r3
 8018be0:	fbb1 f2f2 	udiv	r2, r1, r2
 8018be4:	fb03 f302 	mul.w	r3, r3, r2
 8018be8:	7b02      	ldrb	r2, [r0, #12]
 8018bea:	50ea      	str	r2, [r5, r3]
 8018bec:	3401      	adds	r4, #1
 8018bee:	8902      	ldrh	r2, [r0, #8]
 8018bf0:	b2a1      	uxth	r1, r4
 8018bf2:	428a      	cmp	r2, r1
 8018bf4:	d8ed      	bhi.n	8018bd2 <uxr_reset_output_reliable_stream+0xa>
 8018bf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018bfa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018bfe:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018c02:	4b05      	ldr	r3, [pc, #20]	; (8018c18 <uxr_reset_output_reliable_stream+0x50>)
 8018c04:	f8c0 300e 	str.w	r3, [r0, #14]
 8018c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018c0c:	2300      	movs	r3, #0
 8018c0e:	bc30      	pop	{r4, r5}
 8018c10:	8242      	strh	r2, [r0, #18]
 8018c12:	8403      	strh	r3, [r0, #32]
 8018c14:	4770      	bx	lr
 8018c16:	bf00      	nop
 8018c18:	ffff0000 	.word	0xffff0000

08018c1c <uxr_prepare_reliable_buffer_to_write>:
 8018c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c20:	8903      	ldrh	r3, [r0, #8]
 8018c22:	89c5      	ldrh	r5, [r0, #14]
 8018c24:	fbb5 fef3 	udiv	lr, r5, r3
 8018c28:	4604      	mov	r4, r0
 8018c2a:	fb03 571e 	mls	r7, r3, lr, r5
 8018c2e:	6800      	ldr	r0, [r0, #0]
 8018c30:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8018c34:	fbbc fcf3 	udiv	ip, ip, r3
 8018c38:	b2bf      	uxth	r7, r7
 8018c3a:	fb0c 0707 	mla	r7, ip, r7, r0
 8018c3e:	4688      	mov	r8, r1
 8018c40:	6839      	ldr	r1, [r7, #0]
 8018c42:	b091      	sub	sp, #68	; 0x44
 8018c44:	eb01 0908 	add.w	r9, r1, r8
 8018c48:	f1ac 0604 	sub.w	r6, ip, #4
 8018c4c:	9204      	str	r2, [sp, #16]
 8018c4e:	45b1      	cmp	r9, r6
 8018c50:	f107 0204 	add.w	r2, r7, #4
 8018c54:	9102      	str	r1, [sp, #8]
 8018c56:	9203      	str	r2, [sp, #12]
 8018c58:	f8cd c014 	str.w	ip, [sp, #20]
 8018c5c:	f240 80d7 	bls.w	8018e0e <uxr_prepare_reliable_buffer_to_write+0x1f2>
 8018c60:	f894 b00c 	ldrb.w	fp, [r4, #12]
 8018c64:	eb0b 0208 	add.w	r2, fp, r8
 8018c68:	42b2      	cmp	r2, r6
 8018c6a:	f240 80bd 	bls.w	8018de8 <uxr_prepare_reliable_buffer_to_write+0x1cc>
 8018c6e:	460a      	mov	r2, r1
 8018c70:	3204      	adds	r2, #4
 8018c72:	42b2      	cmp	r2, r6
 8018c74:	f080 810e 	bcs.w	8018e94 <uxr_prepare_reliable_buffer_to_write+0x278>
 8018c78:	f8cd c01c 	str.w	ip, [sp, #28]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	f000 8123 	beq.w	8018ec8 <uxr_prepare_reliable_buffer_to_write+0x2ac>
 8018c82:	f04f 0a00 	mov.w	sl, #0
 8018c86:	4652      	mov	r2, sl
 8018c88:	4657      	mov	r7, sl
 8018c8a:	fbb7 f1f3 	udiv	r1, r7, r3
 8018c8e:	fb03 7111 	mls	r1, r3, r1, r7
 8018c92:	b289      	uxth	r1, r1
 8018c94:	fb0c 0101 	mla	r1, ip, r1, r0
 8018c98:	f10a 0a01 	add.w	sl, sl, #1
 8018c9c:	6809      	ldr	r1, [r1, #0]
 8018c9e:	458b      	cmp	fp, r1
 8018ca0:	bf08      	it	eq
 8018ca2:	3201      	addeq	r2, #1
 8018ca4:	fa1f f78a 	uxth.w	r7, sl
 8018ca8:	bf08      	it	eq
 8018caa:	b292      	uxtheq	r2, r2
 8018cac:	429f      	cmp	r7, r3
 8018cae:	d3ec      	bcc.n	8018c8a <uxr_prepare_reliable_buffer_to_write+0x6e>
 8018cb0:	9902      	ldr	r1, [sp, #8]
 8018cb2:	1f37      	subs	r7, r6, #4
 8018cb4:	b2bf      	uxth	r7, r7
 8018cb6:	eba7 0901 	sub.w	r9, r7, r1
 8018cba:	fa1f f989 	uxth.w	r9, r9
 8018cbe:	eba7 070b 	sub.w	r7, r7, fp
 8018cc2:	b2bf      	uxth	r7, r7
 8018cc4:	eba8 0109 	sub.w	r1, r8, r9
 8018cc8:	fbb1 faf7 	udiv	sl, r1, r7
 8018ccc:	fb07 111a 	mls	r1, r7, sl, r1
 8018cd0:	9706      	str	r7, [sp, #24]
 8018cd2:	2900      	cmp	r1, #0
 8018cd4:	f040 80bd 	bne.w	8018e52 <uxr_prepare_reliable_buffer_to_write+0x236>
 8018cd8:	fa1f fa8a 	uxth.w	sl, sl
 8018cdc:	4592      	cmp	sl, r2
 8018cde:	f200 8092 	bhi.w	8018e06 <uxr_prepare_reliable_buffer_to_write+0x1ea>
 8018ce2:	f10d 0b20 	add.w	fp, sp, #32
 8018ce6:	f1ba 0f00 	cmp.w	sl, #0
 8018cea:	d03e      	beq.n	8018d6a <uxr_prepare_reliable_buffer_to_write+0x14e>
 8018cec:	f04f 0800 	mov.w	r8, #0
 8018cf0:	f10d 0b20 	add.w	fp, sp, #32
 8018cf4:	e006      	b.n	8018d04 <uxr_prepare_reliable_buffer_to_write+0xe8>
 8018cf6:	6860      	ldr	r0, [r4, #4]
 8018cf8:	fbb0 fcf3 	udiv	ip, r0, r3
 8018cfc:	6820      	ldr	r0, [r4, #0]
 8018cfe:	fbb5 fef3 	udiv	lr, r5, r3
 8018d02:	46b9      	mov	r9, r7
 8018d04:	fb03 531e 	mls	r3, r3, lr, r5
 8018d08:	b29b      	uxth	r3, r3
 8018d0a:	fb0c 0003 	mla	r0, ip, r3, r0
 8018d0e:	1d01      	adds	r1, r0, #4
 8018d10:	6803      	ldr	r3, [r0, #0]
 8018d12:	9300      	str	r3, [sp, #0]
 8018d14:	4632      	mov	r2, r6
 8018d16:	2300      	movs	r3, #0
 8018d18:	4658      	mov	r0, fp
 8018d1a:	f7f9 f9d3 	bl	80120c4 <ucdr_init_buffer_origin_offset>
 8018d1e:	464a      	mov	r2, r9
 8018d20:	2300      	movs	r3, #0
 8018d22:	210d      	movs	r1, #13
 8018d24:	4658      	mov	r0, fp
 8018d26:	f7fb fb47 	bl	80143b8 <uxr_buffer_submessage_header>
 8018d2a:	8920      	ldrh	r0, [r4, #8]
 8018d2c:	fbb5 f3f0 	udiv	r3, r5, r0
 8018d30:	e9d4 2100 	ldrd	r2, r1, [r4]
 8018d34:	fb00 5313 	mls	r3, r0, r3, r5
 8018d38:	b29b      	uxth	r3, r3
 8018d3a:	fbb1 f1f0 	udiv	r1, r1, r0
 8018d3e:	fb03 f301 	mul.w	r3, r3, r1
 8018d42:	4628      	mov	r0, r5
 8018d44:	50d6      	str	r6, [r2, r3]
 8018d46:	2101      	movs	r1, #1
 8018d48:	f000 f9c2 	bl	80190d0 <uxr_seq_num_add>
 8018d4c:	f108 0801 	add.w	r8, r8, #1
 8018d50:	fa1f f388 	uxth.w	r3, r8
 8018d54:	459a      	cmp	sl, r3
 8018d56:	4605      	mov	r5, r0
 8018d58:	8923      	ldrh	r3, [r4, #8]
 8018d5a:	d8cc      	bhi.n	8018cf6 <uxr_prepare_reliable_buffer_to_write+0xda>
 8018d5c:	fbb0 fef3 	udiv	lr, r0, r3
 8018d60:	6820      	ldr	r0, [r4, #0]
 8018d62:	6861      	ldr	r1, [r4, #4]
 8018d64:	fbb1 f2f3 	udiv	r2, r1, r3
 8018d68:	9207      	str	r2, [sp, #28]
 8018d6a:	fb03 511e 	mls	r1, r3, lr, r5
 8018d6e:	9b07      	ldr	r3, [sp, #28]
 8018d70:	b289      	uxth	r1, r1
 8018d72:	fb03 0101 	mla	r1, r3, r1, r0
 8018d76:	4632      	mov	r2, r6
 8018d78:	680b      	ldr	r3, [r1, #0]
 8018d7a:	9300      	str	r3, [sp, #0]
 8018d7c:	4658      	mov	r0, fp
 8018d7e:	3104      	adds	r1, #4
 8018d80:	2300      	movs	r3, #0
 8018d82:	f7f9 f99f 	bl	80120c4 <ucdr_init_buffer_origin_offset>
 8018d86:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8018d8a:	4658      	mov	r0, fp
 8018d8c:	fa1f f288 	uxth.w	r2, r8
 8018d90:	2302      	movs	r3, #2
 8018d92:	210d      	movs	r1, #13
 8018d94:	f7fb fb10 	bl	80143b8 <uxr_buffer_submessage_header>
 8018d98:	e9d4 0200 	ldrd	r0, r2, [r4]
 8018d9c:	8921      	ldrh	r1, [r4, #8]
 8018d9e:	9f02      	ldr	r7, [sp, #8]
 8018da0:	9006      	str	r0, [sp, #24]
 8018da2:	9803      	ldr	r0, [sp, #12]
 8018da4:	7b26      	ldrb	r6, [r4, #12]
 8018da6:	fbb5 f3f1 	udiv	r3, r5, r1
 8018daa:	fbb2 f2f1 	udiv	r2, r2, r1
 8018dae:	fb01 5313 	mls	r3, r1, r3, r5
 8018db2:	1d39      	adds	r1, r7, #4
 8018db4:	4408      	add	r0, r1
 8018db6:	b29b      	uxth	r3, r3
 8018db8:	fb03 f302 	mul.w	r3, r3, r2
 8018dbc:	4601      	mov	r1, r0
 8018dbe:	3604      	adds	r6, #4
 8018dc0:	9806      	ldr	r0, [sp, #24]
 8018dc2:	9a05      	ldr	r2, [sp, #20]
 8018dc4:	4446      	add	r6, r8
 8018dc6:	50c6      	str	r6, [r0, r3]
 8018dc8:	9e04      	ldr	r6, [sp, #16]
 8018dca:	3a08      	subs	r2, #8
 8018dcc:	1bd2      	subs	r2, r2, r7
 8018dce:	4630      	mov	r0, r6
 8018dd0:	f7f9 f98a 	bl	80120e8 <ucdr_init_buffer>
 8018dd4:	4630      	mov	r0, r6
 8018dd6:	493d      	ldr	r1, [pc, #244]	; (8018ecc <uxr_prepare_reliable_buffer_to_write+0x2b0>)
 8018dd8:	4622      	mov	r2, r4
 8018dda:	f7f9 f95b 	bl	8012094 <ucdr_set_on_full_buffer_callback>
 8018dde:	2001      	movs	r0, #1
 8018de0:	81e5      	strh	r5, [r4, #14]
 8018de2:	b011      	add	sp, #68	; 0x44
 8018de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018de8:	4628      	mov	r0, r5
 8018dea:	2101      	movs	r1, #1
 8018dec:	f000 f970 	bl	80190d0 <uxr_seq_num_add>
 8018df0:	8921      	ldrh	r1, [r4, #8]
 8018df2:	4605      	mov	r5, r0
 8018df4:	8a60      	ldrh	r0, [r4, #18]
 8018df6:	f000 f96b 	bl	80190d0 <uxr_seq_num_add>
 8018dfa:	4601      	mov	r1, r0
 8018dfc:	4628      	mov	r0, r5
 8018dfe:	f000 f96f 	bl	80190e0 <uxr_seq_num_cmp>
 8018e02:	2800      	cmp	r0, #0
 8018e04:	dd2b      	ble.n	8018e5e <uxr_prepare_reliable_buffer_to_write+0x242>
 8018e06:	2000      	movs	r0, #0
 8018e08:	b011      	add	sp, #68	; 0x44
 8018e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e0e:	4619      	mov	r1, r3
 8018e10:	8a60      	ldrh	r0, [r4, #18]
 8018e12:	f000 f95d 	bl	80190d0 <uxr_seq_num_add>
 8018e16:	4601      	mov	r1, r0
 8018e18:	4628      	mov	r0, r5
 8018e1a:	f000 f961 	bl	80190e0 <uxr_seq_num_cmp>
 8018e1e:	2800      	cmp	r0, #0
 8018e20:	dcf1      	bgt.n	8018e06 <uxr_prepare_reliable_buffer_to_write+0x1ea>
 8018e22:	8921      	ldrh	r1, [r4, #8]
 8018e24:	fbb5 f3f1 	udiv	r3, r5, r1
 8018e28:	e9d4 4200 	ldrd	r4, r2, [r4]
 8018e2c:	fb01 5313 	mls	r3, r1, r3, r5
 8018e30:	b29b      	uxth	r3, r3
 8018e32:	fbb2 f2f1 	udiv	r2, r2, r1
 8018e36:	fb03 f302 	mul.w	r3, r3, r2
 8018e3a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8018e3e:	f844 9003 	str.w	r9, [r4, r3]
 8018e42:	9b02      	ldr	r3, [sp, #8]
 8018e44:	9300      	str	r3, [sp, #0]
 8018e46:	464a      	mov	r2, r9
 8018e48:	2300      	movs	r3, #0
 8018e4a:	f7f9 f93b 	bl	80120c4 <ucdr_init_buffer_origin_offset>
 8018e4e:	2001      	movs	r0, #1
 8018e50:	e7da      	b.n	8018e08 <uxr_prepare_reliable_buffer_to_write+0x1ec>
 8018e52:	f10a 0a01 	add.w	sl, sl, #1
 8018e56:	fa1f fa8a 	uxth.w	sl, sl
 8018e5a:	9106      	str	r1, [sp, #24]
 8018e5c:	e73e      	b.n	8018cdc <uxr_prepare_reliable_buffer_to_write+0xc0>
 8018e5e:	8920      	ldrh	r0, [r4, #8]
 8018e60:	fbb5 f3f0 	udiv	r3, r5, r0
 8018e64:	fb00 5313 	mls	r3, r0, r3, r5
 8018e68:	b29b      	uxth	r3, r3
 8018e6a:	6862      	ldr	r2, [r4, #4]
 8018e6c:	6821      	ldr	r1, [r4, #0]
 8018e6e:	fbb2 f0f0 	udiv	r0, r2, r0
 8018e72:	fb03 f300 	mul.w	r3, r3, r0
 8018e76:	7b22      	ldrb	r2, [r4, #12]
 8018e78:	9804      	ldr	r0, [sp, #16]
 8018e7a:	3304      	adds	r3, #4
 8018e7c:	4419      	add	r1, r3
 8018e7e:	4442      	add	r2, r8
 8018e80:	f841 2c04 	str.w	r2, [r1, #-4]
 8018e84:	7b23      	ldrb	r3, [r4, #12]
 8018e86:	9300      	str	r3, [sp, #0]
 8018e88:	2300      	movs	r3, #0
 8018e8a:	f7f9 f91b 	bl	80120c4 <ucdr_init_buffer_origin_offset>
 8018e8e:	81e5      	strh	r5, [r4, #14]
 8018e90:	2001      	movs	r0, #1
 8018e92:	e7b9      	b.n	8018e08 <uxr_prepare_reliable_buffer_to_write+0x1ec>
 8018e94:	4628      	mov	r0, r5
 8018e96:	2101      	movs	r1, #1
 8018e98:	f000 f91a 	bl	80190d0 <uxr_seq_num_add>
 8018e9c:	8923      	ldrh	r3, [r4, #8]
 8018e9e:	f894 b00c 	ldrb.w	fp, [r4, #12]
 8018ea2:	4605      	mov	r5, r0
 8018ea4:	e9d4 0c00 	ldrd	r0, ip, [r4]
 8018ea8:	fbb5 fef3 	udiv	lr, r5, r3
 8018eac:	fb03 521e 	mls	r2, r3, lr, r5
 8018eb0:	b292      	uxth	r2, r2
 8018eb2:	fbbc fcf3 	udiv	ip, ip, r3
 8018eb6:	fb0c 0202 	mla	r2, ip, r2, r0
 8018eba:	1d11      	adds	r1, r2, #4
 8018ebc:	6812      	ldr	r2, [r2, #0]
 8018ebe:	9103      	str	r1, [sp, #12]
 8018ec0:	9202      	str	r2, [sp, #8]
 8018ec2:	f8cd c01c 	str.w	ip, [sp, #28]
 8018ec6:	e6d9      	b.n	8018c7c <uxr_prepare_reliable_buffer_to_write+0x60>
 8018ec8:	461a      	mov	r2, r3
 8018eca:	e6f1      	b.n	8018cb0 <uxr_prepare_reliable_buffer_to_write+0x94>
 8018ecc:	08018b15 	.word	0x08018b15

08018ed0 <uxr_prepare_next_reliable_buffer_to_send>:
 8018ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ed4:	4605      	mov	r5, r0
 8018ed6:	4688      	mov	r8, r1
 8018ed8:	8a00      	ldrh	r0, [r0, #16]
 8018eda:	2101      	movs	r1, #1
 8018edc:	4617      	mov	r7, r2
 8018ede:	461e      	mov	r6, r3
 8018ee0:	f000 f8f6 	bl	80190d0 <uxr_seq_num_add>
 8018ee4:	8030      	strh	r0, [r6, #0]
 8018ee6:	892a      	ldrh	r2, [r5, #8]
 8018ee8:	fbb0 f3f2 	udiv	r3, r0, r2
 8018eec:	fb02 0413 	mls	r4, r2, r3, r0
 8018ef0:	b2a4      	uxth	r4, r4
 8018ef2:	686b      	ldr	r3, [r5, #4]
 8018ef4:	fbb3 f2f2 	udiv	r2, r3, r2
 8018ef8:	682b      	ldr	r3, [r5, #0]
 8018efa:	89e9      	ldrh	r1, [r5, #14]
 8018efc:	fb04 f402 	mul.w	r4, r4, r2
 8018f00:	3404      	adds	r4, #4
 8018f02:	4423      	add	r3, r4
 8018f04:	f8c8 3000 	str.w	r3, [r8]
 8018f08:	682b      	ldr	r3, [r5, #0]
 8018f0a:	441c      	add	r4, r3
 8018f0c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018f10:	603b      	str	r3, [r7, #0]
 8018f12:	f000 f8e5 	bl	80190e0 <uxr_seq_num_cmp>
 8018f16:	2800      	cmp	r0, #0
 8018f18:	dd02      	ble.n	8018f20 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 8018f1a:	2000      	movs	r0, #0
 8018f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f20:	683a      	ldr	r2, [r7, #0]
 8018f22:	7b2b      	ldrb	r3, [r5, #12]
 8018f24:	429a      	cmp	r2, r3
 8018f26:	d9f8      	bls.n	8018f1a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018f28:	8a69      	ldrh	r1, [r5, #18]
 8018f2a:	8a28      	ldrh	r0, [r5, #16]
 8018f2c:	f000 f8d4 	bl	80190d8 <uxr_seq_num_sub>
 8018f30:	892b      	ldrh	r3, [r5, #8]
 8018f32:	4283      	cmp	r3, r0
 8018f34:	d0f1      	beq.n	8018f1a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018f36:	8830      	ldrh	r0, [r6, #0]
 8018f38:	89eb      	ldrh	r3, [r5, #14]
 8018f3a:	8228      	strh	r0, [r5, #16]
 8018f3c:	4298      	cmp	r0, r3
 8018f3e:	d002      	beq.n	8018f46 <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8018f40:	2001      	movs	r0, #1
 8018f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f46:	2101      	movs	r1, #1
 8018f48:	f000 f8c2 	bl	80190d0 <uxr_seq_num_add>
 8018f4c:	81e8      	strh	r0, [r5, #14]
 8018f4e:	2001      	movs	r0, #1
 8018f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018f54 <uxr_update_output_stream_heartbeat_timestamp>:
 8018f54:	b5d0      	push	{r4, r6, r7, lr}
 8018f56:	8a01      	ldrh	r1, [r0, #16]
 8018f58:	4604      	mov	r4, r0
 8018f5a:	8a40      	ldrh	r0, [r0, #18]
 8018f5c:	4616      	mov	r6, r2
 8018f5e:	461f      	mov	r7, r3
 8018f60:	f000 f8be 	bl	80190e0 <uxr_seq_num_cmp>
 8018f64:	2800      	cmp	r0, #0
 8018f66:	db07      	blt.n	8018f78 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018f6c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018f70:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018f74:	2000      	movs	r0, #0
 8018f76:	bdd0      	pop	{r4, r6, r7, pc}
 8018f78:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018f7c:	b948      	cbnz	r0, 8018f92 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8018f7e:	2301      	movs	r3, #1
 8018f80:	f884 3020 	strb.w	r3, [r4, #32]
 8018f84:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8018f88:	f147 0200 	adc.w	r2, r7, #0
 8018f8c:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8018f90:	bdd0      	pop	{r4, r6, r7, pc}
 8018f92:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8018f96:	4296      	cmp	r6, r2
 8018f98:	eb77 0303 	sbcs.w	r3, r7, r3
 8018f9c:	bfa5      	ittet	ge
 8018f9e:	3001      	addge	r0, #1
 8018fa0:	f884 0020 	strbge.w	r0, [r4, #32]
 8018fa4:	2000      	movlt	r0, #0
 8018fa6:	2001      	movge	r0, #1
 8018fa8:	e7ec      	b.n	8018f84 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8018faa:	bf00      	nop

08018fac <uxr_begin_output_nack_buffer_it>:
 8018fac:	8a40      	ldrh	r0, [r0, #18]
 8018fae:	4770      	bx	lr

08018fb0 <uxr_next_reliable_nack_buffer_to_send>:
 8018fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018fb4:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8018fb8:	f1b9 0f00 	cmp.w	r9, #0
 8018fbc:	d011      	beq.n	8018fe2 <uxr_next_reliable_nack_buffer_to_send+0x32>
 8018fbe:	4605      	mov	r5, r0
 8018fc0:	8818      	ldrh	r0, [r3, #0]
 8018fc2:	460f      	mov	r7, r1
 8018fc4:	4690      	mov	r8, r2
 8018fc6:	461e      	mov	r6, r3
 8018fc8:	2101      	movs	r1, #1
 8018fca:	f000 f881 	bl	80190d0 <uxr_seq_num_add>
 8018fce:	8030      	strh	r0, [r6, #0]
 8018fd0:	8a29      	ldrh	r1, [r5, #16]
 8018fd2:	f000 f885 	bl	80190e0 <uxr_seq_num_cmp>
 8018fd6:	2800      	cmp	r0, #0
 8018fd8:	dd06      	ble.n	8018fe8 <uxr_next_reliable_nack_buffer_to_send+0x38>
 8018fda:	f04f 0900 	mov.w	r9, #0
 8018fde:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 8018fe2:	4648      	mov	r0, r9
 8018fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018fe8:	892a      	ldrh	r2, [r5, #8]
 8018fea:	8830      	ldrh	r0, [r6, #0]
 8018fec:	fbb0 f4f2 	udiv	r4, r0, r2
 8018ff0:	fb02 0414 	mls	r4, r2, r4, r0
 8018ff4:	b2a4      	uxth	r4, r4
 8018ff6:	686b      	ldr	r3, [r5, #4]
 8018ff8:	fbb3 f2f2 	udiv	r2, r3, r2
 8018ffc:	682b      	ldr	r3, [r5, #0]
 8018ffe:	fb04 f402 	mul.w	r4, r4, r2
 8019002:	3404      	adds	r4, #4
 8019004:	4423      	add	r3, r4
 8019006:	603b      	str	r3, [r7, #0]
 8019008:	682b      	ldr	r3, [r5, #0]
 801900a:	441c      	add	r4, r3
 801900c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019010:	f8c8 3000 	str.w	r3, [r8]
 8019014:	7b2a      	ldrb	r2, [r5, #12]
 8019016:	429a      	cmp	r2, r3
 8019018:	d0d6      	beq.n	8018fc8 <uxr_next_reliable_nack_buffer_to_send+0x18>
 801901a:	4648      	mov	r0, r9
 801901c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08019020 <uxr_process_acknack>:
 8019020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019022:	4604      	mov	r4, r0
 8019024:	460e      	mov	r6, r1
 8019026:	4610      	mov	r0, r2
 8019028:	2101      	movs	r1, #1
 801902a:	f000 f855 	bl	80190d8 <uxr_seq_num_sub>
 801902e:	8a61      	ldrh	r1, [r4, #18]
 8019030:	f000 f852 	bl	80190d8 <uxr_seq_num_sub>
 8019034:	b1c0      	cbz	r0, 8019068 <uxr_process_acknack+0x48>
 8019036:	4605      	mov	r5, r0
 8019038:	2700      	movs	r7, #0
 801903a:	2101      	movs	r1, #1
 801903c:	8a60      	ldrh	r0, [r4, #18]
 801903e:	f000 f847 	bl	80190d0 <uxr_seq_num_add>
 8019042:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019046:	fbb0 f3fc 	udiv	r3, r0, ip
 801904a:	e9d4 2100 	ldrd	r2, r1, [r4]
 801904e:	fb0c 0313 	mls	r3, ip, r3, r0
 8019052:	b29b      	uxth	r3, r3
 8019054:	fbb1 f1fc 	udiv	r1, r1, ip
 8019058:	3701      	adds	r7, #1
 801905a:	fb03 f301 	mul.w	r3, r3, r1
 801905e:	42bd      	cmp	r5, r7
 8019060:	7b21      	ldrb	r1, [r4, #12]
 8019062:	8260      	strh	r0, [r4, #18]
 8019064:	50d1      	str	r1, [r2, r3]
 8019066:	d1e8      	bne.n	801903a <uxr_process_acknack+0x1a>
 8019068:	3e00      	subs	r6, #0
 801906a:	f04f 0300 	mov.w	r3, #0
 801906e:	bf18      	it	ne
 8019070:	2601      	movne	r6, #1
 8019072:	f884 3020 	strb.w	r3, [r4, #32]
 8019076:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801907a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801907c <uxr_is_output_up_to_date>:
 801907c:	8a01      	ldrh	r1, [r0, #16]
 801907e:	8a40      	ldrh	r0, [r0, #18]
 8019080:	b508      	push	{r3, lr}
 8019082:	f000 f82d 	bl	80190e0 <uxr_seq_num_cmp>
 8019086:	fab0 f080 	clz	r0, r0
 801908a:	0940      	lsrs	r0, r0, #5
 801908c:	bd08      	pop	{r3, pc}
 801908e:	bf00      	nop

08019090 <get_available_free_slots>:
 8019090:	8901      	ldrh	r1, [r0, #8]
 8019092:	b1d9      	cbz	r1, 80190cc <get_available_free_slots+0x3c>
 8019094:	b4f0      	push	{r4, r5, r6, r7}
 8019096:	2400      	movs	r4, #0
 8019098:	6845      	ldr	r5, [r0, #4]
 801909a:	6807      	ldr	r7, [r0, #0]
 801909c:	7b06      	ldrb	r6, [r0, #12]
 801909e:	fbb5 f5f1 	udiv	r5, r5, r1
 80190a2:	4620      	mov	r0, r4
 80190a4:	4622      	mov	r2, r4
 80190a6:	fbb2 f3f1 	udiv	r3, r2, r1
 80190aa:	fb01 2313 	mls	r3, r1, r3, r2
 80190ae:	b29b      	uxth	r3, r3
 80190b0:	fb05 7303 	mla	r3, r5, r3, r7
 80190b4:	3401      	adds	r4, #1
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	429e      	cmp	r6, r3
 80190ba:	bf08      	it	eq
 80190bc:	3001      	addeq	r0, #1
 80190be:	b2a2      	uxth	r2, r4
 80190c0:	bf08      	it	eq
 80190c2:	b280      	uxtheq	r0, r0
 80190c4:	428a      	cmp	r2, r1
 80190c6:	d3ee      	bcc.n	80190a6 <get_available_free_slots+0x16>
 80190c8:	bcf0      	pop	{r4, r5, r6, r7}
 80190ca:	4770      	bx	lr
 80190cc:	4608      	mov	r0, r1
 80190ce:	4770      	bx	lr

080190d0 <uxr_seq_num_add>:
 80190d0:	4408      	add	r0, r1
 80190d2:	b280      	uxth	r0, r0
 80190d4:	4770      	bx	lr
 80190d6:	bf00      	nop

080190d8 <uxr_seq_num_sub>:
 80190d8:	1a40      	subs	r0, r0, r1
 80190da:	b280      	uxth	r0, r0
 80190dc:	4770      	bx	lr
 80190de:	bf00      	nop

080190e0 <uxr_seq_num_cmp>:
 80190e0:	4288      	cmp	r0, r1
 80190e2:	d011      	beq.n	8019108 <uxr_seq_num_cmp+0x28>
 80190e4:	d309      	bcc.n	80190fa <uxr_seq_num_cmp+0x1a>
 80190e6:	4288      	cmp	r0, r1
 80190e8:	d910      	bls.n	801910c <uxr_seq_num_cmp+0x2c>
 80190ea:	1a40      	subs	r0, r0, r1
 80190ec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80190f0:	bfd4      	ite	le
 80190f2:	2001      	movle	r0, #1
 80190f4:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 80190f8:	4770      	bx	lr
 80190fa:	1a0b      	subs	r3, r1, r0
 80190fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019100:	daf1      	bge.n	80190e6 <uxr_seq_num_cmp+0x6>
 8019102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019106:	4770      	bx	lr
 8019108:	2000      	movs	r0, #0
 801910a:	4770      	bx	lr
 801910c:	2001      	movs	r0, #1
 801910e:	4770      	bx	lr

08019110 <rcl_get_default_domain_id>:
 8019110:	b530      	push	{r4, r5, lr}
 8019112:	b083      	sub	sp, #12
 8019114:	2300      	movs	r3, #0
 8019116:	9300      	str	r3, [sp, #0]
 8019118:	b1d0      	cbz	r0, 8019150 <rcl_get_default_domain_id+0x40>
 801911a:	4604      	mov	r4, r0
 801911c:	4669      	mov	r1, sp
 801911e:	4815      	ldr	r0, [pc, #84]	; (8019174 <rcl_get_default_domain_id+0x64>)
 8019120:	f7fe fb9c 	bl	801785c <rcutils_get_env>
 8019124:	4602      	mov	r2, r0
 8019126:	b110      	cbz	r0, 801912e <rcl_get_default_domain_id+0x1e>
 8019128:	2001      	movs	r0, #1
 801912a:	b003      	add	sp, #12
 801912c:	bd30      	pop	{r4, r5, pc}
 801912e:	9b00      	ldr	r3, [sp, #0]
 8019130:	b18b      	cbz	r3, 8019156 <rcl_get_default_domain_id+0x46>
 8019132:	7818      	ldrb	r0, [r3, #0]
 8019134:	2800      	cmp	r0, #0
 8019136:	d0f8      	beq.n	801912a <rcl_get_default_domain_id+0x1a>
 8019138:	4618      	mov	r0, r3
 801913a:	a901      	add	r1, sp, #4
 801913c:	9201      	str	r2, [sp, #4]
 801913e:	f001 feff 	bl	801af40 <strtoul>
 8019142:	4605      	mov	r5, r0
 8019144:	b150      	cbz	r0, 801915c <rcl_get_default_domain_id+0x4c>
 8019146:	1c43      	adds	r3, r0, #1
 8019148:	d00d      	beq.n	8019166 <rcl_get_default_domain_id+0x56>
 801914a:	6025      	str	r5, [r4, #0]
 801914c:	2000      	movs	r0, #0
 801914e:	e7ec      	b.n	801912a <rcl_get_default_domain_id+0x1a>
 8019150:	200b      	movs	r0, #11
 8019152:	b003      	add	sp, #12
 8019154:	bd30      	pop	{r4, r5, pc}
 8019156:	4618      	mov	r0, r3
 8019158:	b003      	add	sp, #12
 801915a:	bd30      	pop	{r4, r5, pc}
 801915c:	9b01      	ldr	r3, [sp, #4]
 801915e:	781b      	ldrb	r3, [r3, #0]
 8019160:	2b00      	cmp	r3, #0
 8019162:	d0f2      	beq.n	801914a <rcl_get_default_domain_id+0x3a>
 8019164:	e7e0      	b.n	8019128 <rcl_get_default_domain_id+0x18>
 8019166:	f000 fa1b 	bl	80195a0 <__errno>
 801916a:	6803      	ldr	r3, [r0, #0]
 801916c:	2b22      	cmp	r3, #34	; 0x22
 801916e:	d1ec      	bne.n	801914a <rcl_get_default_domain_id+0x3a>
 8019170:	e7da      	b.n	8019128 <rcl_get_default_domain_id+0x18>
 8019172:	bf00      	nop
 8019174:	0801f674 	.word	0x0801f674

08019178 <rcl_get_zero_initialized_guard_condition>:
 8019178:	4a03      	ldr	r2, [pc, #12]	; (8019188 <rcl_get_zero_initialized_guard_condition+0x10>)
 801917a:	4603      	mov	r3, r0
 801917c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019180:	e883 0003 	stmia.w	r3, {r0, r1}
 8019184:	4618      	mov	r0, r3
 8019186:	4770      	bx	lr
 8019188:	0801f684 	.word	0x0801f684

0801918c <rcl_guard_condition_init>:
 801918c:	b082      	sub	sp, #8
 801918e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019190:	b087      	sub	sp, #28
 8019192:	ac0c      	add	r4, sp, #48	; 0x30
 8019194:	e884 000c 	stmia.w	r4, {r2, r3}
 8019198:	4625      	mov	r5, r4
 801919a:	4607      	mov	r7, r0
 801919c:	460e      	mov	r6, r1
 801919e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80191a0:	ac01      	add	r4, sp, #4
 80191a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80191a4:	682b      	ldr	r3, [r5, #0]
 80191a6:	6023      	str	r3, [r4, #0]
 80191a8:	a801      	add	r0, sp, #4
 80191aa:	f7f5 fffd 	bl	800f1a8 <rcutils_allocator_is_valid>
 80191ae:	2800      	cmp	r0, #0
 80191b0:	d034      	beq.n	801921c <rcl_guard_condition_init+0x90>
 80191b2:	463c      	mov	r4, r7
 80191b4:	2f00      	cmp	r7, #0
 80191b6:	d031      	beq.n	801921c <rcl_guard_condition_init+0x90>
 80191b8:	4635      	mov	r5, r6
 80191ba:	687e      	ldr	r6, [r7, #4]
 80191bc:	bb46      	cbnz	r6, 8019210 <rcl_guard_condition_init+0x84>
 80191be:	2d00      	cmp	r5, #0
 80191c0:	d02c      	beq.n	801921c <rcl_guard_condition_init+0x90>
 80191c2:	4628      	mov	r0, r5
 80191c4:	f7fc f90c 	bl	80153e0 <rcl_context_is_valid>
 80191c8:	2800      	cmp	r0, #0
 80191ca:	d02d      	beq.n	8019228 <rcl_guard_condition_init+0x9c>
 80191cc:	9b01      	ldr	r3, [sp, #4]
 80191ce:	9905      	ldr	r1, [sp, #20]
 80191d0:	201c      	movs	r0, #28
 80191d2:	4798      	blx	r3
 80191d4:	4607      	mov	r7, r0
 80191d6:	6060      	str	r0, [r4, #4]
 80191d8:	2800      	cmp	r0, #0
 80191da:	d02e      	beq.n	801923a <rcl_guard_condition_init+0xae>
 80191dc:	6828      	ldr	r0, [r5, #0]
 80191de:	3028      	adds	r0, #40	; 0x28
 80191e0:	f000 f8dc 	bl	801939c <rmw_create_guard_condition>
 80191e4:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80191e8:	6038      	str	r0, [r7, #0]
 80191ea:	f8dc 5000 	ldr.w	r5, [ip]
 80191ee:	b1ed      	cbz	r5, 801922c <rcl_guard_condition_init+0xa0>
 80191f0:	ac01      	add	r4, sp, #4
 80191f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80191f4:	2701      	movs	r7, #1
 80191f6:	f10c 0508 	add.w	r5, ip, #8
 80191fa:	f88c 7004 	strb.w	r7, [ip, #4]
 80191fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019200:	6823      	ldr	r3, [r4, #0]
 8019202:	602b      	str	r3, [r5, #0]
 8019204:	4630      	mov	r0, r6
 8019206:	b007      	add	sp, #28
 8019208:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801920c:	b002      	add	sp, #8
 801920e:	4770      	bx	lr
 8019210:	2064      	movs	r0, #100	; 0x64
 8019212:	b007      	add	sp, #28
 8019214:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019218:	b002      	add	sp, #8
 801921a:	4770      	bx	lr
 801921c:	200b      	movs	r0, #11
 801921e:	b007      	add	sp, #28
 8019220:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019224:	b002      	add	sp, #8
 8019226:	4770      	bx	lr
 8019228:	2065      	movs	r0, #101	; 0x65
 801922a:	e7f2      	b.n	8019212 <rcl_guard_condition_init+0x86>
 801922c:	4660      	mov	r0, ip
 801922e:	9b02      	ldr	r3, [sp, #8]
 8019230:	9905      	ldr	r1, [sp, #20]
 8019232:	4798      	blx	r3
 8019234:	6065      	str	r5, [r4, #4]
 8019236:	2001      	movs	r0, #1
 8019238:	e7eb      	b.n	8019212 <rcl_guard_condition_init+0x86>
 801923a:	200a      	movs	r0, #10
 801923c:	e7e9      	b.n	8019212 <rcl_guard_condition_init+0x86>
 801923e:	bf00      	nop

08019240 <rcl_guard_condition_init_from_rmw>:
 8019240:	b082      	sub	sp, #8
 8019242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019246:	b086      	sub	sp, #24
 8019248:	ac0c      	add	r4, sp, #48	; 0x30
 801924a:	4684      	mov	ip, r0
 801924c:	f844 3f04 	str.w	r3, [r4, #4]!
 8019250:	460f      	mov	r7, r1
 8019252:	4690      	mov	r8, r2
 8019254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019256:	ad01      	add	r5, sp, #4
 8019258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801925a:	6823      	ldr	r3, [r4, #0]
 801925c:	602b      	str	r3, [r5, #0]
 801925e:	a801      	add	r0, sp, #4
 8019260:	4664      	mov	r4, ip
 8019262:	f7f5 ffa1 	bl	800f1a8 <rcutils_allocator_is_valid>
 8019266:	b328      	cbz	r0, 80192b4 <rcl_guard_condition_init_from_rmw+0x74>
 8019268:	b324      	cbz	r4, 80192b4 <rcl_guard_condition_init_from_rmw+0x74>
 801926a:	6866      	ldr	r6, [r4, #4]
 801926c:	b9e6      	cbnz	r6, 80192a8 <rcl_guard_condition_init_from_rmw+0x68>
 801926e:	f1b8 0f00 	cmp.w	r8, #0
 8019272:	d01f      	beq.n	80192b4 <rcl_guard_condition_init_from_rmw+0x74>
 8019274:	4640      	mov	r0, r8
 8019276:	f7fc f8b3 	bl	80153e0 <rcl_context_is_valid>
 801927a:	b308      	cbz	r0, 80192c0 <rcl_guard_condition_init_from_rmw+0x80>
 801927c:	9b01      	ldr	r3, [sp, #4]
 801927e:	9905      	ldr	r1, [sp, #20]
 8019280:	201c      	movs	r0, #28
 8019282:	4798      	blx	r3
 8019284:	4605      	mov	r5, r0
 8019286:	6060      	str	r0, [r4, #4]
 8019288:	b340      	cbz	r0, 80192dc <rcl_guard_condition_init_from_rmw+0x9c>
 801928a:	b1df      	cbz	r7, 80192c4 <rcl_guard_condition_init_from_rmw+0x84>
 801928c:	6007      	str	r7, [r0, #0]
 801928e:	7106      	strb	r6, [r0, #4]
 8019290:	ac01      	add	r4, sp, #4
 8019292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019294:	3508      	adds	r5, #8
 8019296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019298:	6823      	ldr	r3, [r4, #0]
 801929a:	602b      	str	r3, [r5, #0]
 801929c:	2000      	movs	r0, #0
 801929e:	b006      	add	sp, #24
 80192a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80192a4:	b002      	add	sp, #8
 80192a6:	4770      	bx	lr
 80192a8:	2064      	movs	r0, #100	; 0x64
 80192aa:	b006      	add	sp, #24
 80192ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80192b0:	b002      	add	sp, #8
 80192b2:	4770      	bx	lr
 80192b4:	200b      	movs	r0, #11
 80192b6:	b006      	add	sp, #24
 80192b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80192bc:	b002      	add	sp, #8
 80192be:	4770      	bx	lr
 80192c0:	2065      	movs	r0, #101	; 0x65
 80192c2:	e7f2      	b.n	80192aa <rcl_guard_condition_init_from_rmw+0x6a>
 80192c4:	f8d8 0000 	ldr.w	r0, [r8]
 80192c8:	3028      	adds	r0, #40	; 0x28
 80192ca:	f000 f867 	bl	801939c <rmw_create_guard_condition>
 80192ce:	6028      	str	r0, [r5, #0]
 80192d0:	6865      	ldr	r5, [r4, #4]
 80192d2:	682e      	ldr	r6, [r5, #0]
 80192d4:	b126      	cbz	r6, 80192e0 <rcl_guard_condition_init_from_rmw+0xa0>
 80192d6:	2301      	movs	r3, #1
 80192d8:	712b      	strb	r3, [r5, #4]
 80192da:	e7d9      	b.n	8019290 <rcl_guard_condition_init_from_rmw+0x50>
 80192dc:	200a      	movs	r0, #10
 80192de:	e7e4      	b.n	80192aa <rcl_guard_condition_init_from_rmw+0x6a>
 80192e0:	4628      	mov	r0, r5
 80192e2:	9b02      	ldr	r3, [sp, #8]
 80192e4:	9905      	ldr	r1, [sp, #20]
 80192e6:	4798      	blx	r3
 80192e8:	6066      	str	r6, [r4, #4]
 80192ea:	2001      	movs	r0, #1
 80192ec:	e7dd      	b.n	80192aa <rcl_guard_condition_init_from_rmw+0x6a>
 80192ee:	bf00      	nop

080192f0 <rcl_guard_condition_fini>:
 80192f0:	b570      	push	{r4, r5, r6, lr}
 80192f2:	b082      	sub	sp, #8
 80192f4:	b1f0      	cbz	r0, 8019334 <rcl_guard_condition_fini+0x44>
 80192f6:	4604      	mov	r4, r0
 80192f8:	6840      	ldr	r0, [r0, #4]
 80192fa:	b158      	cbz	r0, 8019314 <rcl_guard_condition_fini+0x24>
 80192fc:	6803      	ldr	r3, [r0, #0]
 80192fe:	68c6      	ldr	r6, [r0, #12]
 8019300:	6981      	ldr	r1, [r0, #24]
 8019302:	b15b      	cbz	r3, 801931c <rcl_guard_condition_fini+0x2c>
 8019304:	7905      	ldrb	r5, [r0, #4]
 8019306:	b95d      	cbnz	r5, 8019320 <rcl_guard_condition_fini+0x30>
 8019308:	47b0      	blx	r6
 801930a:	2300      	movs	r3, #0
 801930c:	4628      	mov	r0, r5
 801930e:	6063      	str	r3, [r4, #4]
 8019310:	b002      	add	sp, #8
 8019312:	bd70      	pop	{r4, r5, r6, pc}
 8019314:	4605      	mov	r5, r0
 8019316:	4628      	mov	r0, r5
 8019318:	b002      	add	sp, #8
 801931a:	bd70      	pop	{r4, r5, r6, pc}
 801931c:	461d      	mov	r5, r3
 801931e:	e7f3      	b.n	8019308 <rcl_guard_condition_fini+0x18>
 8019320:	4618      	mov	r0, r3
 8019322:	9101      	str	r1, [sp, #4]
 8019324:	f000 f84e 	bl	80193c4 <rmw_destroy_guard_condition>
 8019328:	1e05      	subs	r5, r0, #0
 801932a:	9901      	ldr	r1, [sp, #4]
 801932c:	6860      	ldr	r0, [r4, #4]
 801932e:	bf18      	it	ne
 8019330:	2501      	movne	r5, #1
 8019332:	e7e9      	b.n	8019308 <rcl_guard_condition_fini+0x18>
 8019334:	250b      	movs	r5, #11
 8019336:	4628      	mov	r0, r5
 8019338:	b002      	add	sp, #8
 801933a:	bd70      	pop	{r4, r5, r6, pc}

0801933c <rcl_guard_condition_get_default_options>:
 801933c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801933e:	b087      	sub	sp, #28
 8019340:	4607      	mov	r7, r0
 8019342:	466c      	mov	r4, sp
 8019344:	4668      	mov	r0, sp
 8019346:	f7f5 ff21 	bl	800f18c <rcutils_get_default_allocator>
 801934a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801934c:	4d07      	ldr	r5, [pc, #28]	; (801936c <rcl_guard_condition_get_default_options+0x30>)
 801934e:	f8d4 c000 	ldr.w	ip, [r4]
 8019352:	462e      	mov	r6, r5
 8019354:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019356:	462c      	mov	r4, r5
 8019358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801935a:	463c      	mov	r4, r7
 801935c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801935e:	4638      	mov	r0, r7
 8019360:	f8c6 c000 	str.w	ip, [r6]
 8019364:	f8c4 c000 	str.w	ip, [r4]
 8019368:	b007      	add	sp, #28
 801936a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801936c:	20010530 	.word	0x20010530

08019370 <rcl_trigger_guard_condition>:
 8019370:	b148      	cbz	r0, 8019386 <rcl_trigger_guard_condition+0x16>
 8019372:	b508      	push	{r3, lr}
 8019374:	6843      	ldr	r3, [r0, #4]
 8019376:	b143      	cbz	r3, 801938a <rcl_trigger_guard_condition+0x1a>
 8019378:	6818      	ldr	r0, [r3, #0]
 801937a:	f000 f837 	bl	80193ec <rmw_trigger_guard_condition>
 801937e:	3800      	subs	r0, #0
 8019380:	bf18      	it	ne
 8019382:	2001      	movne	r0, #1
 8019384:	bd08      	pop	{r3, pc}
 8019386:	200b      	movs	r0, #11
 8019388:	4770      	bx	lr
 801938a:	200b      	movs	r0, #11
 801938c:	bd08      	pop	{r3, pc}
 801938e:	bf00      	nop

08019390 <rcl_guard_condition_get_rmw_handle>:
 8019390:	b110      	cbz	r0, 8019398 <rcl_guard_condition_get_rmw_handle+0x8>
 8019392:	6840      	ldr	r0, [r0, #4]
 8019394:	b100      	cbz	r0, 8019398 <rcl_guard_condition_get_rmw_handle+0x8>
 8019396:	6800      	ldr	r0, [r0, #0]
 8019398:	4770      	bx	lr
 801939a:	bf00      	nop

0801939c <rmw_create_guard_condition>:
 801939c:	b538      	push	{r3, r4, r5, lr}
 801939e:	4605      	mov	r5, r0
 80193a0:	4807      	ldr	r0, [pc, #28]	; (80193c0 <rmw_create_guard_condition+0x24>)
 80193a2:	f7fe fd3f 	bl	8017e24 <get_memory>
 80193a6:	4604      	mov	r4, r0
 80193a8:	b138      	cbz	r0, 80193ba <rmw_create_guard_condition+0x1e>
 80193aa:	68c4      	ldr	r4, [r0, #12]
 80193ac:	2300      	movs	r3, #0
 80193ae:	61e5      	str	r5, [r4, #28]
 80193b0:	7423      	strb	r3, [r4, #16]
 80193b2:	f7fe fd8d 	bl	8017ed0 <rmw_get_implementation_identifier>
 80193b6:	f844 0f14 	str.w	r0, [r4, #20]!
 80193ba:	4620      	mov	r0, r4
 80193bc:	bd38      	pop	{r3, r4, r5, pc}
 80193be:	bf00      	nop
 80193c0:	20014838 	.word	0x20014838

080193c4 <rmw_destroy_guard_condition>:
 80193c4:	b508      	push	{r3, lr}
 80193c6:	4b08      	ldr	r3, [pc, #32]	; (80193e8 <rmw_destroy_guard_condition+0x24>)
 80193c8:	6819      	ldr	r1, [r3, #0]
 80193ca:	b911      	cbnz	r1, 80193d2 <rmw_destroy_guard_condition+0xe>
 80193cc:	e00a      	b.n	80193e4 <rmw_destroy_guard_condition+0x20>
 80193ce:	6889      	ldr	r1, [r1, #8]
 80193d0:	b141      	cbz	r1, 80193e4 <rmw_destroy_guard_condition+0x20>
 80193d2:	68cb      	ldr	r3, [r1, #12]
 80193d4:	3314      	adds	r3, #20
 80193d6:	4298      	cmp	r0, r3
 80193d8:	d1f9      	bne.n	80193ce <rmw_destroy_guard_condition+0xa>
 80193da:	4803      	ldr	r0, [pc, #12]	; (80193e8 <rmw_destroy_guard_condition+0x24>)
 80193dc:	f7fe fd32 	bl	8017e44 <put_memory>
 80193e0:	2000      	movs	r0, #0
 80193e2:	bd08      	pop	{r3, pc}
 80193e4:	2001      	movs	r0, #1
 80193e6:	bd08      	pop	{r3, pc}
 80193e8:	20014838 	.word	0x20014838

080193ec <rmw_trigger_guard_condition>:
 80193ec:	b160      	cbz	r0, 8019408 <rmw_trigger_guard_condition+0x1c>
 80193ee:	b510      	push	{r4, lr}
 80193f0:	4604      	mov	r4, r0
 80193f2:	6800      	ldr	r0, [r0, #0]
 80193f4:	f7f7 fbda 	bl	8010bac <is_uxrce_rmw_identifier_valid>
 80193f8:	b908      	cbnz	r0, 80193fe <rmw_trigger_guard_condition+0x12>
 80193fa:	2001      	movs	r0, #1
 80193fc:	bd10      	pop	{r4, pc}
 80193fe:	6863      	ldr	r3, [r4, #4]
 8019400:	2201      	movs	r2, #1
 8019402:	701a      	strb	r2, [r3, #0]
 8019404:	2000      	movs	r0, #0
 8019406:	bd10      	pop	{r4, pc}
 8019408:	2001      	movs	r0, #1
 801940a:	4770      	bx	lr

0801940c <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 801940c:	b570      	push	{r4, r5, r6, lr}
 801940e:	4604      	mov	r4, r0
 8019410:	b1b8      	cbz	r0, 8019442 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x36>
 8019412:	460e      	mov	r6, r1
 8019414:	4630      	mov	r0, r6
 8019416:	2104      	movs	r1, #4
 8019418:	f7f8 fe6a 	bl	80120f0 <ucdr_alignment>
 801941c:	6864      	ldr	r4, [r4, #4]
 801941e:	1d75      	adds	r5, r6, #5
 8019420:	4425      	add	r5, r4
 8019422:	4405      	add	r5, r0
 8019424:	4628      	mov	r0, r5
 8019426:	2104      	movs	r1, #4
 8019428:	f7f8 fe62 	bl	80120f0 <ucdr_alignment>
 801942c:	3004      	adds	r0, #4
 801942e:	4405      	add	r5, r0
 8019430:	4628      	mov	r0, r5
 8019432:	2104      	movs	r1, #4
 8019434:	f7f8 fe5c 	bl	80120f0 <ucdr_alignment>
 8019438:	f1c6 0604 	rsb	r6, r6, #4
 801943c:	4430      	add	r0, r6
 801943e:	4428      	add	r0, r5
 8019440:	bd70      	pop	{r4, r5, r6, pc}
 8019442:	4b05      	ldr	r3, [pc, #20]	; (8019458 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x4c>)
 8019444:	4805      	ldr	r0, [pc, #20]	; (801945c <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x50>)
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	221b      	movs	r2, #27
 801944a:	68db      	ldr	r3, [r3, #12]
 801944c:	2101      	movs	r1, #1
 801944e:	f000 f90d 	bl	801966c <fwrite>
 8019452:	4620      	mov	r0, r4
 8019454:	bd70      	pop	{r4, r5, r6, pc}
 8019456:	bf00      	nop
 8019458:	20000190 	.word	0x20000190
 801945c:	0801eec0 	.word	0x0801eec0

08019460 <_MultiArrayDimension__cdr_serialize>:
 8019460:	b570      	push	{r4, r5, r6, lr}
 8019462:	4604      	mov	r4, r0
 8019464:	b1c0      	cbz	r0, 8019498 <_MultiArrayDimension__cdr_serialize+0x38>
 8019466:	6806      	ldr	r6, [r0, #0]
 8019468:	460d      	mov	r5, r1
 801946a:	b196      	cbz	r6, 8019492 <_MultiArrayDimension__cdr_serialize+0x32>
 801946c:	4630      	mov	r0, r6
 801946e:	f7e6 feb9 	bl	80001e4 <strlen>
 8019472:	1c42      	adds	r2, r0, #1
 8019474:	6060      	str	r0, [r4, #4]
 8019476:	4631      	mov	r1, r6
 8019478:	4628      	mov	r0, r5
 801947a:	f7f8 fea9 	bl	80121d0 <ucdr_serialize_sequence_char>
 801947e:	68e1      	ldr	r1, [r4, #12]
 8019480:	4628      	mov	r0, r5
 8019482:	f7f8 fb11 	bl	8011aa8 <ucdr_serialize_uint32_t>
 8019486:	6921      	ldr	r1, [r4, #16]
 8019488:	4628      	mov	r0, r5
 801948a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801948e:	f7f8 bb0b 	b.w	8011aa8 <ucdr_serialize_uint32_t>
 8019492:	4632      	mov	r2, r6
 8019494:	4630      	mov	r0, r6
 8019496:	e7ed      	b.n	8019474 <_MultiArrayDimension__cdr_serialize+0x14>
 8019498:	4b04      	ldr	r3, [pc, #16]	; (80194ac <_MultiArrayDimension__cdr_serialize+0x4c>)
 801949a:	4805      	ldr	r0, [pc, #20]	; (80194b0 <_MultiArrayDimension__cdr_serialize+0x50>)
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	221b      	movs	r2, #27
 80194a0:	68db      	ldr	r3, [r3, #12]
 80194a2:	2101      	movs	r1, #1
 80194a4:	f000 f8e2 	bl	801966c <fwrite>
 80194a8:	4620      	mov	r0, r4
 80194aa:	bd70      	pop	{r4, r5, r6, pc}
 80194ac:	20000190 	.word	0x20000190
 80194b0:	0801eec0 	.word	0x0801eec0

080194b4 <_MultiArrayDimension__cdr_deserialize>:
 80194b4:	b570      	push	{r4, r5, r6, lr}
 80194b6:	460c      	mov	r4, r1
 80194b8:	b082      	sub	sp, #8
 80194ba:	b1d9      	cbz	r1, 80194f4 <_MultiArrayDimension__cdr_deserialize+0x40>
 80194bc:	688e      	ldr	r6, [r1, #8]
 80194be:	6809      	ldr	r1, [r1, #0]
 80194c0:	4632      	mov	r2, r6
 80194c2:	ab01      	add	r3, sp, #4
 80194c4:	4605      	mov	r5, r0
 80194c6:	f7f8 fe95 	bl	80121f4 <ucdr_deserialize_sequence_char>
 80194ca:	b120      	cbz	r0, 80194d6 <_MultiArrayDimension__cdr_deserialize+0x22>
 80194cc:	9b01      	ldr	r3, [sp, #4]
 80194ce:	b103      	cbz	r3, 80194d2 <_MultiArrayDimension__cdr_deserialize+0x1e>
 80194d0:	3b01      	subs	r3, #1
 80194d2:	6063      	str	r3, [r4, #4]
 80194d4:	e002      	b.n	80194dc <_MultiArrayDimension__cdr_deserialize+0x28>
 80194d6:	9901      	ldr	r1, [sp, #4]
 80194d8:	42b1      	cmp	r1, r6
 80194da:	d816      	bhi.n	801950a <_MultiArrayDimension__cdr_deserialize+0x56>
 80194dc:	f104 010c 	add.w	r1, r4, #12
 80194e0:	4628      	mov	r0, r5
 80194e2:	f7f8 fb41 	bl	8011b68 <ucdr_deserialize_uint32_t>
 80194e6:	f104 0110 	add.w	r1, r4, #16
 80194ea:	4628      	mov	r0, r5
 80194ec:	f7f8 fb3c 	bl	8011b68 <ucdr_deserialize_uint32_t>
 80194f0:	b002      	add	sp, #8
 80194f2:	bd70      	pop	{r4, r5, r6, pc}
 80194f4:	4b08      	ldr	r3, [pc, #32]	; (8019518 <_MultiArrayDimension__cdr_deserialize+0x64>)
 80194f6:	4809      	ldr	r0, [pc, #36]	; (801951c <_MultiArrayDimension__cdr_deserialize+0x68>)
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	221b      	movs	r2, #27
 80194fc:	68db      	ldr	r3, [r3, #12]
 80194fe:	2101      	movs	r1, #1
 8019500:	f000 f8b4 	bl	801966c <fwrite>
 8019504:	4620      	mov	r0, r4
 8019506:	b002      	add	sp, #8
 8019508:	bd70      	pop	{r4, r5, r6, pc}
 801950a:	75a8      	strb	r0, [r5, #22]
 801950c:	6060      	str	r0, [r4, #4]
 801950e:	4628      	mov	r0, r5
 8019510:	f7f8 fe3e 	bl	8012190 <ucdr_advance_buffer>
 8019514:	e7e2      	b.n	80194dc <_MultiArrayDimension__cdr_deserialize+0x28>
 8019516:	bf00      	nop
 8019518:	20000190 	.word	0x20000190
 801951c:	0801eec0 	.word	0x0801eec0

08019520 <_MultiArrayDimension__max_serialized_size>:
 8019520:	b510      	push	{r4, lr}
 8019522:	2104      	movs	r1, #4
 8019524:	2000      	movs	r0, #0
 8019526:	f7f8 fde3 	bl	80120f0 <ucdr_alignment>
 801952a:	1d04      	adds	r4, r0, #4
 801952c:	4620      	mov	r0, r4
 801952e:	2104      	movs	r1, #4
 8019530:	f7f8 fdde 	bl	80120f0 <ucdr_alignment>
 8019534:	3004      	adds	r0, #4
 8019536:	4420      	add	r0, r4
 8019538:	bd10      	pop	{r4, pc}
 801953a:	bf00      	nop

0801953c <_MultiArrayDimension__get_serialized_size>:
 801953c:	b510      	push	{r4, lr}
 801953e:	4604      	mov	r4, r0
 8019540:	b198      	cbz	r0, 801956a <_MultiArrayDimension__get_serialized_size+0x2e>
 8019542:	2104      	movs	r1, #4
 8019544:	2000      	movs	r0, #0
 8019546:	f7f8 fdd3 	bl	80120f0 <ucdr_alignment>
 801954a:	6863      	ldr	r3, [r4, #4]
 801954c:	3305      	adds	r3, #5
 801954e:	181c      	adds	r4, r3, r0
 8019550:	4620      	mov	r0, r4
 8019552:	2104      	movs	r1, #4
 8019554:	f7f8 fdcc 	bl	80120f0 <ucdr_alignment>
 8019558:	3004      	adds	r0, #4
 801955a:	4404      	add	r4, r0
 801955c:	4620      	mov	r0, r4
 801955e:	2104      	movs	r1, #4
 8019560:	f7f8 fdc6 	bl	80120f0 <ucdr_alignment>
 8019564:	3004      	adds	r0, #4
 8019566:	4420      	add	r0, r4
 8019568:	bd10      	pop	{r4, pc}
 801956a:	4b05      	ldr	r3, [pc, #20]	; (8019580 <_MultiArrayDimension__get_serialized_size+0x44>)
 801956c:	4805      	ldr	r0, [pc, #20]	; (8019584 <_MultiArrayDimension__get_serialized_size+0x48>)
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	221b      	movs	r2, #27
 8019572:	68db      	ldr	r3, [r3, #12]
 8019574:	2101      	movs	r1, #1
 8019576:	f000 f879 	bl	801966c <fwrite>
 801957a:	4620      	mov	r0, r4
 801957c:	bd10      	pop	{r4, pc}
 801957e:	bf00      	nop
 8019580:	20000190 	.word	0x20000190
 8019584:	0801eec0 	.word	0x0801eec0

08019588 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8019588:	4800      	ldr	r0, [pc, #0]	; (801958c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 801958a:	4770      	bx	lr
 801958c:	20000168 	.word	0x20000168

08019590 <calloc>:
 8019590:	4b02      	ldr	r3, [pc, #8]	; (801959c <calloc+0xc>)
 8019592:	460a      	mov	r2, r1
 8019594:	4601      	mov	r1, r0
 8019596:	6818      	ldr	r0, [r3, #0]
 8019598:	f000 b924 	b.w	80197e4 <_calloc_r>
 801959c:	20000190 	.word	0x20000190

080195a0 <__errno>:
 80195a0:	4b01      	ldr	r3, [pc, #4]	; (80195a8 <__errno+0x8>)
 80195a2:	6818      	ldr	r0, [r3, #0]
 80195a4:	4770      	bx	lr
 80195a6:	bf00      	nop
 80195a8:	20000190 	.word	0x20000190

080195ac <_fwrite_r>:
 80195ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195b0:	9c08      	ldr	r4, [sp, #32]
 80195b2:	4689      	mov	r9, r1
 80195b4:	4617      	mov	r7, r2
 80195b6:	fb02 f803 	mul.w	r8, r2, r3
 80195ba:	4605      	mov	r5, r0
 80195bc:	b118      	cbz	r0, 80195c6 <_fwrite_r+0x1a>
 80195be:	6983      	ldr	r3, [r0, #24]
 80195c0:	b90b      	cbnz	r3, 80195c6 <_fwrite_r+0x1a>
 80195c2:	f001 ff27 	bl	801b414 <__sinit>
 80195c6:	4b26      	ldr	r3, [pc, #152]	; (8019660 <_fwrite_r+0xb4>)
 80195c8:	429c      	cmp	r4, r3
 80195ca:	d123      	bne.n	8019614 <_fwrite_r+0x68>
 80195cc:	686c      	ldr	r4, [r5, #4]
 80195ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80195d0:	07de      	lsls	r6, r3, #31
 80195d2:	d405      	bmi.n	80195e0 <_fwrite_r+0x34>
 80195d4:	89a3      	ldrh	r3, [r4, #12]
 80195d6:	0598      	lsls	r0, r3, #22
 80195d8:	d402      	bmi.n	80195e0 <_fwrite_r+0x34>
 80195da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80195dc:	f000 f8bf 	bl	801975e <__retarget_lock_acquire_recursive>
 80195e0:	89a3      	ldrh	r3, [r4, #12]
 80195e2:	0719      	lsls	r1, r3, #28
 80195e4:	d520      	bpl.n	8019628 <_fwrite_r+0x7c>
 80195e6:	6923      	ldr	r3, [r4, #16]
 80195e8:	b1f3      	cbz	r3, 8019628 <_fwrite_r+0x7c>
 80195ea:	2600      	movs	r6, #0
 80195ec:	4546      	cmp	r6, r8
 80195ee:	d029      	beq.n	8019644 <_fwrite_r+0x98>
 80195f0:	68a0      	ldr	r0, [r4, #8]
 80195f2:	f819 1006 	ldrb.w	r1, [r9, r6]
 80195f6:	3801      	subs	r0, #1
 80195f8:	2800      	cmp	r0, #0
 80195fa:	60a0      	str	r0, [r4, #8]
 80195fc:	da04      	bge.n	8019608 <_fwrite_r+0x5c>
 80195fe:	69a3      	ldr	r3, [r4, #24]
 8019600:	4298      	cmp	r0, r3
 8019602:	db19      	blt.n	8019638 <_fwrite_r+0x8c>
 8019604:	290a      	cmp	r1, #10
 8019606:	d017      	beq.n	8019638 <_fwrite_r+0x8c>
 8019608:	6823      	ldr	r3, [r4, #0]
 801960a:	1c5a      	adds	r2, r3, #1
 801960c:	6022      	str	r2, [r4, #0]
 801960e:	7019      	strb	r1, [r3, #0]
 8019610:	3601      	adds	r6, #1
 8019612:	e7eb      	b.n	80195ec <_fwrite_r+0x40>
 8019614:	4b13      	ldr	r3, [pc, #76]	; (8019664 <_fwrite_r+0xb8>)
 8019616:	429c      	cmp	r4, r3
 8019618:	d101      	bne.n	801961e <_fwrite_r+0x72>
 801961a:	68ac      	ldr	r4, [r5, #8]
 801961c:	e7d7      	b.n	80195ce <_fwrite_r+0x22>
 801961e:	4b12      	ldr	r3, [pc, #72]	; (8019668 <_fwrite_r+0xbc>)
 8019620:	429c      	cmp	r4, r3
 8019622:	bf08      	it	eq
 8019624:	68ec      	ldreq	r4, [r5, #12]
 8019626:	e7d2      	b.n	80195ce <_fwrite_r+0x22>
 8019628:	4621      	mov	r1, r4
 801962a:	4628      	mov	r0, r5
 801962c:	f001 fd30 	bl	801b090 <__swsetup_r>
 8019630:	2800      	cmp	r0, #0
 8019632:	d0da      	beq.n	80195ea <_fwrite_r+0x3e>
 8019634:	2600      	movs	r6, #0
 8019636:	e005      	b.n	8019644 <_fwrite_r+0x98>
 8019638:	4622      	mov	r2, r4
 801963a:	4628      	mov	r0, r5
 801963c:	f001 fcc4 	bl	801afc8 <__swbuf_r>
 8019640:	3001      	adds	r0, #1
 8019642:	d1e5      	bne.n	8019610 <_fwrite_r+0x64>
 8019644:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019646:	07da      	lsls	r2, r3, #31
 8019648:	d405      	bmi.n	8019656 <_fwrite_r+0xaa>
 801964a:	89a3      	ldrh	r3, [r4, #12]
 801964c:	059b      	lsls	r3, r3, #22
 801964e:	d402      	bmi.n	8019656 <_fwrite_r+0xaa>
 8019650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019652:	f000 f885 	bl	8019760 <__retarget_lock_release_recursive>
 8019656:	fbb6 f0f7 	udiv	r0, r6, r7
 801965a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801965e:	bf00      	nop
 8019660:	0801f8dc 	.word	0x0801f8dc
 8019664:	0801f8fc 	.word	0x0801f8fc
 8019668:	0801f8bc 	.word	0x0801f8bc

0801966c <fwrite>:
 801966c:	b507      	push	{r0, r1, r2, lr}
 801966e:	9300      	str	r3, [sp, #0]
 8019670:	4613      	mov	r3, r2
 8019672:	460a      	mov	r2, r1
 8019674:	4601      	mov	r1, r0
 8019676:	4803      	ldr	r0, [pc, #12]	; (8019684 <fwrite+0x18>)
 8019678:	6800      	ldr	r0, [r0, #0]
 801967a:	f7ff ff97 	bl	80195ac <_fwrite_r>
 801967e:	b003      	add	sp, #12
 8019680:	f85d fb04 	ldr.w	pc, [sp], #4
 8019684:	20000190 	.word	0x20000190

08019688 <getenv>:
 8019688:	b507      	push	{r0, r1, r2, lr}
 801968a:	4b04      	ldr	r3, [pc, #16]	; (801969c <getenv+0x14>)
 801968c:	4601      	mov	r1, r0
 801968e:	aa01      	add	r2, sp, #4
 8019690:	6818      	ldr	r0, [r3, #0]
 8019692:	f000 f805 	bl	80196a0 <_findenv_r>
 8019696:	b003      	add	sp, #12
 8019698:	f85d fb04 	ldr.w	pc, [sp], #4
 801969c:	20000190 	.word	0x20000190

080196a0 <_findenv_r>:
 80196a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196a4:	4607      	mov	r7, r0
 80196a6:	4689      	mov	r9, r1
 80196a8:	4616      	mov	r6, r2
 80196aa:	f001 fd8d 	bl	801b1c8 <__env_lock>
 80196ae:	4b18      	ldr	r3, [pc, #96]	; (8019710 <_findenv_r+0x70>)
 80196b0:	681c      	ldr	r4, [r3, #0]
 80196b2:	469a      	mov	sl, r3
 80196b4:	b134      	cbz	r4, 80196c4 <_findenv_r+0x24>
 80196b6:	464b      	mov	r3, r9
 80196b8:	4698      	mov	r8, r3
 80196ba:	f813 1b01 	ldrb.w	r1, [r3], #1
 80196be:	b139      	cbz	r1, 80196d0 <_findenv_r+0x30>
 80196c0:	293d      	cmp	r1, #61	; 0x3d
 80196c2:	d1f9      	bne.n	80196b8 <_findenv_r+0x18>
 80196c4:	4638      	mov	r0, r7
 80196c6:	f001 fd85 	bl	801b1d4 <__env_unlock>
 80196ca:	2000      	movs	r0, #0
 80196cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196d0:	eba8 0809 	sub.w	r8, r8, r9
 80196d4:	46a3      	mov	fp, r4
 80196d6:	f854 0b04 	ldr.w	r0, [r4], #4
 80196da:	2800      	cmp	r0, #0
 80196dc:	d0f2      	beq.n	80196c4 <_findenv_r+0x24>
 80196de:	4642      	mov	r2, r8
 80196e0:	4649      	mov	r1, r9
 80196e2:	f000 fcc7 	bl	801a074 <strncmp>
 80196e6:	2800      	cmp	r0, #0
 80196e8:	d1f4      	bne.n	80196d4 <_findenv_r+0x34>
 80196ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80196ee:	eb03 0508 	add.w	r5, r3, r8
 80196f2:	f813 3008 	ldrb.w	r3, [r3, r8]
 80196f6:	2b3d      	cmp	r3, #61	; 0x3d
 80196f8:	d1ec      	bne.n	80196d4 <_findenv_r+0x34>
 80196fa:	f8da 3000 	ldr.w	r3, [sl]
 80196fe:	ebab 0303 	sub.w	r3, fp, r3
 8019702:	109b      	asrs	r3, r3, #2
 8019704:	4638      	mov	r0, r7
 8019706:	6033      	str	r3, [r6, #0]
 8019708:	f001 fd64 	bl	801b1d4 <__env_unlock>
 801970c:	1c68      	adds	r0, r5, #1
 801970e:	e7dd      	b.n	80196cc <_findenv_r+0x2c>
 8019710:	20000004 	.word	0x20000004

08019714 <__libc_init_array>:
 8019714:	b570      	push	{r4, r5, r6, lr}
 8019716:	4d0d      	ldr	r5, [pc, #52]	; (801974c <__libc_init_array+0x38>)
 8019718:	4c0d      	ldr	r4, [pc, #52]	; (8019750 <__libc_init_array+0x3c>)
 801971a:	1b64      	subs	r4, r4, r5
 801971c:	10a4      	asrs	r4, r4, #2
 801971e:	2600      	movs	r6, #0
 8019720:	42a6      	cmp	r6, r4
 8019722:	d109      	bne.n	8019738 <__libc_init_array+0x24>
 8019724:	4d0b      	ldr	r5, [pc, #44]	; (8019754 <__libc_init_array+0x40>)
 8019726:	4c0c      	ldr	r4, [pc, #48]	; (8019758 <__libc_init_array+0x44>)
 8019728:	f004 fab6 	bl	801dc98 <_init>
 801972c:	1b64      	subs	r4, r4, r5
 801972e:	10a4      	asrs	r4, r4, #2
 8019730:	2600      	movs	r6, #0
 8019732:	42a6      	cmp	r6, r4
 8019734:	d105      	bne.n	8019742 <__libc_init_array+0x2e>
 8019736:	bd70      	pop	{r4, r5, r6, pc}
 8019738:	f855 3b04 	ldr.w	r3, [r5], #4
 801973c:	4798      	blx	r3
 801973e:	3601      	adds	r6, #1
 8019740:	e7ee      	b.n	8019720 <__libc_init_array+0xc>
 8019742:	f855 3b04 	ldr.w	r3, [r5], #4
 8019746:	4798      	blx	r3
 8019748:	3601      	adds	r6, #1
 801974a:	e7f2      	b.n	8019732 <__libc_init_array+0x1e>
 801974c:	0801fb78 	.word	0x0801fb78
 8019750:	0801fb78 	.word	0x0801fb78
 8019754:	0801fb78 	.word	0x0801fb78
 8019758:	0801fb7c 	.word	0x0801fb7c

0801975c <__retarget_lock_init_recursive>:
 801975c:	4770      	bx	lr

0801975e <__retarget_lock_acquire_recursive>:
 801975e:	4770      	bx	lr

08019760 <__retarget_lock_release_recursive>:
 8019760:	4770      	bx	lr
	...

08019764 <malloc>:
 8019764:	4b02      	ldr	r3, [pc, #8]	; (8019770 <malloc+0xc>)
 8019766:	4601      	mov	r1, r0
 8019768:	6818      	ldr	r0, [r3, #0]
 801976a:	f000 b89b 	b.w	80198a4 <_malloc_r>
 801976e:	bf00      	nop
 8019770:	20000190 	.word	0x20000190

08019774 <free>:
 8019774:	4b02      	ldr	r3, [pc, #8]	; (8019780 <free+0xc>)
 8019776:	4601      	mov	r1, r0
 8019778:	6818      	ldr	r0, [r3, #0]
 801977a:	f000 b843 	b.w	8019804 <_free_r>
 801977e:	bf00      	nop
 8019780:	20000190 	.word	0x20000190

08019784 <memcpy>:
 8019784:	440a      	add	r2, r1
 8019786:	4291      	cmp	r1, r2
 8019788:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801978c:	d100      	bne.n	8019790 <memcpy+0xc>
 801978e:	4770      	bx	lr
 8019790:	b510      	push	{r4, lr}
 8019792:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019796:	f803 4f01 	strb.w	r4, [r3, #1]!
 801979a:	4291      	cmp	r1, r2
 801979c:	d1f9      	bne.n	8019792 <memcpy+0xe>
 801979e:	bd10      	pop	{r4, pc}

080197a0 <memmove>:
 80197a0:	4288      	cmp	r0, r1
 80197a2:	b510      	push	{r4, lr}
 80197a4:	eb01 0402 	add.w	r4, r1, r2
 80197a8:	d902      	bls.n	80197b0 <memmove+0x10>
 80197aa:	4284      	cmp	r4, r0
 80197ac:	4623      	mov	r3, r4
 80197ae:	d807      	bhi.n	80197c0 <memmove+0x20>
 80197b0:	1e43      	subs	r3, r0, #1
 80197b2:	42a1      	cmp	r1, r4
 80197b4:	d008      	beq.n	80197c8 <memmove+0x28>
 80197b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80197ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80197be:	e7f8      	b.n	80197b2 <memmove+0x12>
 80197c0:	4402      	add	r2, r0
 80197c2:	4601      	mov	r1, r0
 80197c4:	428a      	cmp	r2, r1
 80197c6:	d100      	bne.n	80197ca <memmove+0x2a>
 80197c8:	bd10      	pop	{r4, pc}
 80197ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80197ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80197d2:	e7f7      	b.n	80197c4 <memmove+0x24>

080197d4 <memset>:
 80197d4:	4402      	add	r2, r0
 80197d6:	4603      	mov	r3, r0
 80197d8:	4293      	cmp	r3, r2
 80197da:	d100      	bne.n	80197de <memset+0xa>
 80197dc:	4770      	bx	lr
 80197de:	f803 1b01 	strb.w	r1, [r3], #1
 80197e2:	e7f9      	b.n	80197d8 <memset+0x4>

080197e4 <_calloc_r>:
 80197e4:	b513      	push	{r0, r1, r4, lr}
 80197e6:	434a      	muls	r2, r1
 80197e8:	4611      	mov	r1, r2
 80197ea:	9201      	str	r2, [sp, #4]
 80197ec:	f000 f85a 	bl	80198a4 <_malloc_r>
 80197f0:	4604      	mov	r4, r0
 80197f2:	b118      	cbz	r0, 80197fc <_calloc_r+0x18>
 80197f4:	9a01      	ldr	r2, [sp, #4]
 80197f6:	2100      	movs	r1, #0
 80197f8:	f7ff ffec 	bl	80197d4 <memset>
 80197fc:	4620      	mov	r0, r4
 80197fe:	b002      	add	sp, #8
 8019800:	bd10      	pop	{r4, pc}
	...

08019804 <_free_r>:
 8019804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019806:	2900      	cmp	r1, #0
 8019808:	d048      	beq.n	801989c <_free_r+0x98>
 801980a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801980e:	9001      	str	r0, [sp, #4]
 8019810:	2b00      	cmp	r3, #0
 8019812:	f1a1 0404 	sub.w	r4, r1, #4
 8019816:	bfb8      	it	lt
 8019818:	18e4      	addlt	r4, r4, r3
 801981a:	f002 faa1 	bl	801bd60 <__malloc_lock>
 801981e:	4a20      	ldr	r2, [pc, #128]	; (80198a0 <_free_r+0x9c>)
 8019820:	9801      	ldr	r0, [sp, #4]
 8019822:	6813      	ldr	r3, [r2, #0]
 8019824:	4615      	mov	r5, r2
 8019826:	b933      	cbnz	r3, 8019836 <_free_r+0x32>
 8019828:	6063      	str	r3, [r4, #4]
 801982a:	6014      	str	r4, [r2, #0]
 801982c:	b003      	add	sp, #12
 801982e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019832:	f002 ba9b 	b.w	801bd6c <__malloc_unlock>
 8019836:	42a3      	cmp	r3, r4
 8019838:	d90b      	bls.n	8019852 <_free_r+0x4e>
 801983a:	6821      	ldr	r1, [r4, #0]
 801983c:	1862      	adds	r2, r4, r1
 801983e:	4293      	cmp	r3, r2
 8019840:	bf04      	itt	eq
 8019842:	681a      	ldreq	r2, [r3, #0]
 8019844:	685b      	ldreq	r3, [r3, #4]
 8019846:	6063      	str	r3, [r4, #4]
 8019848:	bf04      	itt	eq
 801984a:	1852      	addeq	r2, r2, r1
 801984c:	6022      	streq	r2, [r4, #0]
 801984e:	602c      	str	r4, [r5, #0]
 8019850:	e7ec      	b.n	801982c <_free_r+0x28>
 8019852:	461a      	mov	r2, r3
 8019854:	685b      	ldr	r3, [r3, #4]
 8019856:	b10b      	cbz	r3, 801985c <_free_r+0x58>
 8019858:	42a3      	cmp	r3, r4
 801985a:	d9fa      	bls.n	8019852 <_free_r+0x4e>
 801985c:	6811      	ldr	r1, [r2, #0]
 801985e:	1855      	adds	r5, r2, r1
 8019860:	42a5      	cmp	r5, r4
 8019862:	d10b      	bne.n	801987c <_free_r+0x78>
 8019864:	6824      	ldr	r4, [r4, #0]
 8019866:	4421      	add	r1, r4
 8019868:	1854      	adds	r4, r2, r1
 801986a:	42a3      	cmp	r3, r4
 801986c:	6011      	str	r1, [r2, #0]
 801986e:	d1dd      	bne.n	801982c <_free_r+0x28>
 8019870:	681c      	ldr	r4, [r3, #0]
 8019872:	685b      	ldr	r3, [r3, #4]
 8019874:	6053      	str	r3, [r2, #4]
 8019876:	4421      	add	r1, r4
 8019878:	6011      	str	r1, [r2, #0]
 801987a:	e7d7      	b.n	801982c <_free_r+0x28>
 801987c:	d902      	bls.n	8019884 <_free_r+0x80>
 801987e:	230c      	movs	r3, #12
 8019880:	6003      	str	r3, [r0, #0]
 8019882:	e7d3      	b.n	801982c <_free_r+0x28>
 8019884:	6825      	ldr	r5, [r4, #0]
 8019886:	1961      	adds	r1, r4, r5
 8019888:	428b      	cmp	r3, r1
 801988a:	bf04      	itt	eq
 801988c:	6819      	ldreq	r1, [r3, #0]
 801988e:	685b      	ldreq	r3, [r3, #4]
 8019890:	6063      	str	r3, [r4, #4]
 8019892:	bf04      	itt	eq
 8019894:	1949      	addeq	r1, r1, r5
 8019896:	6021      	streq	r1, [r4, #0]
 8019898:	6054      	str	r4, [r2, #4]
 801989a:	e7c7      	b.n	801982c <_free_r+0x28>
 801989c:	b003      	add	sp, #12
 801989e:	bd30      	pop	{r4, r5, pc}
 80198a0:	20010544 	.word	0x20010544

080198a4 <_malloc_r>:
 80198a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198a6:	1ccd      	adds	r5, r1, #3
 80198a8:	f025 0503 	bic.w	r5, r5, #3
 80198ac:	3508      	adds	r5, #8
 80198ae:	2d0c      	cmp	r5, #12
 80198b0:	bf38      	it	cc
 80198b2:	250c      	movcc	r5, #12
 80198b4:	2d00      	cmp	r5, #0
 80198b6:	4606      	mov	r6, r0
 80198b8:	db01      	blt.n	80198be <_malloc_r+0x1a>
 80198ba:	42a9      	cmp	r1, r5
 80198bc:	d903      	bls.n	80198c6 <_malloc_r+0x22>
 80198be:	230c      	movs	r3, #12
 80198c0:	6033      	str	r3, [r6, #0]
 80198c2:	2000      	movs	r0, #0
 80198c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198c6:	f002 fa4b 	bl	801bd60 <__malloc_lock>
 80198ca:	4921      	ldr	r1, [pc, #132]	; (8019950 <_malloc_r+0xac>)
 80198cc:	680a      	ldr	r2, [r1, #0]
 80198ce:	4614      	mov	r4, r2
 80198d0:	b99c      	cbnz	r4, 80198fa <_malloc_r+0x56>
 80198d2:	4f20      	ldr	r7, [pc, #128]	; (8019954 <_malloc_r+0xb0>)
 80198d4:	683b      	ldr	r3, [r7, #0]
 80198d6:	b923      	cbnz	r3, 80198e2 <_malloc_r+0x3e>
 80198d8:	4621      	mov	r1, r4
 80198da:	4630      	mov	r0, r6
 80198dc:	f000 fada 	bl	8019e94 <_sbrk_r>
 80198e0:	6038      	str	r0, [r7, #0]
 80198e2:	4629      	mov	r1, r5
 80198e4:	4630      	mov	r0, r6
 80198e6:	f000 fad5 	bl	8019e94 <_sbrk_r>
 80198ea:	1c43      	adds	r3, r0, #1
 80198ec:	d123      	bne.n	8019936 <_malloc_r+0x92>
 80198ee:	230c      	movs	r3, #12
 80198f0:	6033      	str	r3, [r6, #0]
 80198f2:	4630      	mov	r0, r6
 80198f4:	f002 fa3a 	bl	801bd6c <__malloc_unlock>
 80198f8:	e7e3      	b.n	80198c2 <_malloc_r+0x1e>
 80198fa:	6823      	ldr	r3, [r4, #0]
 80198fc:	1b5b      	subs	r3, r3, r5
 80198fe:	d417      	bmi.n	8019930 <_malloc_r+0x8c>
 8019900:	2b0b      	cmp	r3, #11
 8019902:	d903      	bls.n	801990c <_malloc_r+0x68>
 8019904:	6023      	str	r3, [r4, #0]
 8019906:	441c      	add	r4, r3
 8019908:	6025      	str	r5, [r4, #0]
 801990a:	e004      	b.n	8019916 <_malloc_r+0x72>
 801990c:	6863      	ldr	r3, [r4, #4]
 801990e:	42a2      	cmp	r2, r4
 8019910:	bf0c      	ite	eq
 8019912:	600b      	streq	r3, [r1, #0]
 8019914:	6053      	strne	r3, [r2, #4]
 8019916:	4630      	mov	r0, r6
 8019918:	f002 fa28 	bl	801bd6c <__malloc_unlock>
 801991c:	f104 000b 	add.w	r0, r4, #11
 8019920:	1d23      	adds	r3, r4, #4
 8019922:	f020 0007 	bic.w	r0, r0, #7
 8019926:	1ac2      	subs	r2, r0, r3
 8019928:	d0cc      	beq.n	80198c4 <_malloc_r+0x20>
 801992a:	1a1b      	subs	r3, r3, r0
 801992c:	50a3      	str	r3, [r4, r2]
 801992e:	e7c9      	b.n	80198c4 <_malloc_r+0x20>
 8019930:	4622      	mov	r2, r4
 8019932:	6864      	ldr	r4, [r4, #4]
 8019934:	e7cc      	b.n	80198d0 <_malloc_r+0x2c>
 8019936:	1cc4      	adds	r4, r0, #3
 8019938:	f024 0403 	bic.w	r4, r4, #3
 801993c:	42a0      	cmp	r0, r4
 801993e:	d0e3      	beq.n	8019908 <_malloc_r+0x64>
 8019940:	1a21      	subs	r1, r4, r0
 8019942:	4630      	mov	r0, r6
 8019944:	f000 faa6 	bl	8019e94 <_sbrk_r>
 8019948:	3001      	adds	r0, #1
 801994a:	d1dd      	bne.n	8019908 <_malloc_r+0x64>
 801994c:	e7cf      	b.n	80198ee <_malloc_r+0x4a>
 801994e:	bf00      	nop
 8019950:	20010544 	.word	0x20010544
 8019954:	20010548 	.word	0x20010548

08019958 <_scanf_float>:
 8019958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801995c:	b087      	sub	sp, #28
 801995e:	4617      	mov	r7, r2
 8019960:	9303      	str	r3, [sp, #12]
 8019962:	688b      	ldr	r3, [r1, #8]
 8019964:	1e5a      	subs	r2, r3, #1
 8019966:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801996a:	bf83      	ittte	hi
 801996c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019970:	195b      	addhi	r3, r3, r5
 8019972:	9302      	strhi	r3, [sp, #8]
 8019974:	2300      	movls	r3, #0
 8019976:	bf86      	itte	hi
 8019978:	f240 135d 	movwhi	r3, #349	; 0x15d
 801997c:	608b      	strhi	r3, [r1, #8]
 801997e:	9302      	strls	r3, [sp, #8]
 8019980:	680b      	ldr	r3, [r1, #0]
 8019982:	468b      	mov	fp, r1
 8019984:	2500      	movs	r5, #0
 8019986:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801998a:	f84b 3b1c 	str.w	r3, [fp], #28
 801998e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019992:	4680      	mov	r8, r0
 8019994:	460c      	mov	r4, r1
 8019996:	465e      	mov	r6, fp
 8019998:	46aa      	mov	sl, r5
 801999a:	46a9      	mov	r9, r5
 801999c:	9501      	str	r5, [sp, #4]
 801999e:	68a2      	ldr	r2, [r4, #8]
 80199a0:	b152      	cbz	r2, 80199b8 <_scanf_float+0x60>
 80199a2:	683b      	ldr	r3, [r7, #0]
 80199a4:	781b      	ldrb	r3, [r3, #0]
 80199a6:	2b4e      	cmp	r3, #78	; 0x4e
 80199a8:	d864      	bhi.n	8019a74 <_scanf_float+0x11c>
 80199aa:	2b40      	cmp	r3, #64	; 0x40
 80199ac:	d83c      	bhi.n	8019a28 <_scanf_float+0xd0>
 80199ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80199b2:	b2c8      	uxtb	r0, r1
 80199b4:	280e      	cmp	r0, #14
 80199b6:	d93a      	bls.n	8019a2e <_scanf_float+0xd6>
 80199b8:	f1b9 0f00 	cmp.w	r9, #0
 80199bc:	d003      	beq.n	80199c6 <_scanf_float+0x6e>
 80199be:	6823      	ldr	r3, [r4, #0]
 80199c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80199c4:	6023      	str	r3, [r4, #0]
 80199c6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80199ca:	f1ba 0f01 	cmp.w	sl, #1
 80199ce:	f200 8113 	bhi.w	8019bf8 <_scanf_float+0x2a0>
 80199d2:	455e      	cmp	r6, fp
 80199d4:	f200 8105 	bhi.w	8019be2 <_scanf_float+0x28a>
 80199d8:	2501      	movs	r5, #1
 80199da:	4628      	mov	r0, r5
 80199dc:	b007      	add	sp, #28
 80199de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80199e6:	2a0d      	cmp	r2, #13
 80199e8:	d8e6      	bhi.n	80199b8 <_scanf_float+0x60>
 80199ea:	a101      	add	r1, pc, #4	; (adr r1, 80199f0 <_scanf_float+0x98>)
 80199ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80199f0:	08019b2f 	.word	0x08019b2f
 80199f4:	080199b9 	.word	0x080199b9
 80199f8:	080199b9 	.word	0x080199b9
 80199fc:	080199b9 	.word	0x080199b9
 8019a00:	08019b8f 	.word	0x08019b8f
 8019a04:	08019b67 	.word	0x08019b67
 8019a08:	080199b9 	.word	0x080199b9
 8019a0c:	080199b9 	.word	0x080199b9
 8019a10:	08019b3d 	.word	0x08019b3d
 8019a14:	080199b9 	.word	0x080199b9
 8019a18:	080199b9 	.word	0x080199b9
 8019a1c:	080199b9 	.word	0x080199b9
 8019a20:	080199b9 	.word	0x080199b9
 8019a24:	08019af5 	.word	0x08019af5
 8019a28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8019a2c:	e7db      	b.n	80199e6 <_scanf_float+0x8e>
 8019a2e:	290e      	cmp	r1, #14
 8019a30:	d8c2      	bhi.n	80199b8 <_scanf_float+0x60>
 8019a32:	a001      	add	r0, pc, #4	; (adr r0, 8019a38 <_scanf_float+0xe0>)
 8019a34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019a38:	08019ae7 	.word	0x08019ae7
 8019a3c:	080199b9 	.word	0x080199b9
 8019a40:	08019ae7 	.word	0x08019ae7
 8019a44:	08019b7b 	.word	0x08019b7b
 8019a48:	080199b9 	.word	0x080199b9
 8019a4c:	08019a95 	.word	0x08019a95
 8019a50:	08019ad1 	.word	0x08019ad1
 8019a54:	08019ad1 	.word	0x08019ad1
 8019a58:	08019ad1 	.word	0x08019ad1
 8019a5c:	08019ad1 	.word	0x08019ad1
 8019a60:	08019ad1 	.word	0x08019ad1
 8019a64:	08019ad1 	.word	0x08019ad1
 8019a68:	08019ad1 	.word	0x08019ad1
 8019a6c:	08019ad1 	.word	0x08019ad1
 8019a70:	08019ad1 	.word	0x08019ad1
 8019a74:	2b6e      	cmp	r3, #110	; 0x6e
 8019a76:	d809      	bhi.n	8019a8c <_scanf_float+0x134>
 8019a78:	2b60      	cmp	r3, #96	; 0x60
 8019a7a:	d8b2      	bhi.n	80199e2 <_scanf_float+0x8a>
 8019a7c:	2b54      	cmp	r3, #84	; 0x54
 8019a7e:	d077      	beq.n	8019b70 <_scanf_float+0x218>
 8019a80:	2b59      	cmp	r3, #89	; 0x59
 8019a82:	d199      	bne.n	80199b8 <_scanf_float+0x60>
 8019a84:	2d07      	cmp	r5, #7
 8019a86:	d197      	bne.n	80199b8 <_scanf_float+0x60>
 8019a88:	2508      	movs	r5, #8
 8019a8a:	e029      	b.n	8019ae0 <_scanf_float+0x188>
 8019a8c:	2b74      	cmp	r3, #116	; 0x74
 8019a8e:	d06f      	beq.n	8019b70 <_scanf_float+0x218>
 8019a90:	2b79      	cmp	r3, #121	; 0x79
 8019a92:	e7f6      	b.n	8019a82 <_scanf_float+0x12a>
 8019a94:	6821      	ldr	r1, [r4, #0]
 8019a96:	05c8      	lsls	r0, r1, #23
 8019a98:	d51a      	bpl.n	8019ad0 <_scanf_float+0x178>
 8019a9a:	9b02      	ldr	r3, [sp, #8]
 8019a9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8019aa0:	6021      	str	r1, [r4, #0]
 8019aa2:	f109 0901 	add.w	r9, r9, #1
 8019aa6:	b11b      	cbz	r3, 8019ab0 <_scanf_float+0x158>
 8019aa8:	3b01      	subs	r3, #1
 8019aaa:	3201      	adds	r2, #1
 8019aac:	9302      	str	r3, [sp, #8]
 8019aae:	60a2      	str	r2, [r4, #8]
 8019ab0:	68a3      	ldr	r3, [r4, #8]
 8019ab2:	3b01      	subs	r3, #1
 8019ab4:	60a3      	str	r3, [r4, #8]
 8019ab6:	6923      	ldr	r3, [r4, #16]
 8019ab8:	3301      	adds	r3, #1
 8019aba:	6123      	str	r3, [r4, #16]
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	3b01      	subs	r3, #1
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	607b      	str	r3, [r7, #4]
 8019ac4:	f340 8084 	ble.w	8019bd0 <_scanf_float+0x278>
 8019ac8:	683b      	ldr	r3, [r7, #0]
 8019aca:	3301      	adds	r3, #1
 8019acc:	603b      	str	r3, [r7, #0]
 8019ace:	e766      	b.n	801999e <_scanf_float+0x46>
 8019ad0:	eb1a 0f05 	cmn.w	sl, r5
 8019ad4:	f47f af70 	bne.w	80199b8 <_scanf_float+0x60>
 8019ad8:	6822      	ldr	r2, [r4, #0]
 8019ada:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8019ade:	6022      	str	r2, [r4, #0]
 8019ae0:	f806 3b01 	strb.w	r3, [r6], #1
 8019ae4:	e7e4      	b.n	8019ab0 <_scanf_float+0x158>
 8019ae6:	6822      	ldr	r2, [r4, #0]
 8019ae8:	0610      	lsls	r0, r2, #24
 8019aea:	f57f af65 	bpl.w	80199b8 <_scanf_float+0x60>
 8019aee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019af2:	e7f4      	b.n	8019ade <_scanf_float+0x186>
 8019af4:	f1ba 0f00 	cmp.w	sl, #0
 8019af8:	d10e      	bne.n	8019b18 <_scanf_float+0x1c0>
 8019afa:	f1b9 0f00 	cmp.w	r9, #0
 8019afe:	d10e      	bne.n	8019b1e <_scanf_float+0x1c6>
 8019b00:	6822      	ldr	r2, [r4, #0]
 8019b02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019b06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019b0a:	d108      	bne.n	8019b1e <_scanf_float+0x1c6>
 8019b0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019b10:	6022      	str	r2, [r4, #0]
 8019b12:	f04f 0a01 	mov.w	sl, #1
 8019b16:	e7e3      	b.n	8019ae0 <_scanf_float+0x188>
 8019b18:	f1ba 0f02 	cmp.w	sl, #2
 8019b1c:	d055      	beq.n	8019bca <_scanf_float+0x272>
 8019b1e:	2d01      	cmp	r5, #1
 8019b20:	d002      	beq.n	8019b28 <_scanf_float+0x1d0>
 8019b22:	2d04      	cmp	r5, #4
 8019b24:	f47f af48 	bne.w	80199b8 <_scanf_float+0x60>
 8019b28:	3501      	adds	r5, #1
 8019b2a:	b2ed      	uxtb	r5, r5
 8019b2c:	e7d8      	b.n	8019ae0 <_scanf_float+0x188>
 8019b2e:	f1ba 0f01 	cmp.w	sl, #1
 8019b32:	f47f af41 	bne.w	80199b8 <_scanf_float+0x60>
 8019b36:	f04f 0a02 	mov.w	sl, #2
 8019b3a:	e7d1      	b.n	8019ae0 <_scanf_float+0x188>
 8019b3c:	b97d      	cbnz	r5, 8019b5e <_scanf_float+0x206>
 8019b3e:	f1b9 0f00 	cmp.w	r9, #0
 8019b42:	f47f af3c 	bne.w	80199be <_scanf_float+0x66>
 8019b46:	6822      	ldr	r2, [r4, #0]
 8019b48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019b4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019b50:	f47f af39 	bne.w	80199c6 <_scanf_float+0x6e>
 8019b54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019b58:	6022      	str	r2, [r4, #0]
 8019b5a:	2501      	movs	r5, #1
 8019b5c:	e7c0      	b.n	8019ae0 <_scanf_float+0x188>
 8019b5e:	2d03      	cmp	r5, #3
 8019b60:	d0e2      	beq.n	8019b28 <_scanf_float+0x1d0>
 8019b62:	2d05      	cmp	r5, #5
 8019b64:	e7de      	b.n	8019b24 <_scanf_float+0x1cc>
 8019b66:	2d02      	cmp	r5, #2
 8019b68:	f47f af26 	bne.w	80199b8 <_scanf_float+0x60>
 8019b6c:	2503      	movs	r5, #3
 8019b6e:	e7b7      	b.n	8019ae0 <_scanf_float+0x188>
 8019b70:	2d06      	cmp	r5, #6
 8019b72:	f47f af21 	bne.w	80199b8 <_scanf_float+0x60>
 8019b76:	2507      	movs	r5, #7
 8019b78:	e7b2      	b.n	8019ae0 <_scanf_float+0x188>
 8019b7a:	6822      	ldr	r2, [r4, #0]
 8019b7c:	0591      	lsls	r1, r2, #22
 8019b7e:	f57f af1b 	bpl.w	80199b8 <_scanf_float+0x60>
 8019b82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8019b86:	6022      	str	r2, [r4, #0]
 8019b88:	f8cd 9004 	str.w	r9, [sp, #4]
 8019b8c:	e7a8      	b.n	8019ae0 <_scanf_float+0x188>
 8019b8e:	6822      	ldr	r2, [r4, #0]
 8019b90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8019b94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8019b98:	d006      	beq.n	8019ba8 <_scanf_float+0x250>
 8019b9a:	0550      	lsls	r0, r2, #21
 8019b9c:	f57f af0c 	bpl.w	80199b8 <_scanf_float+0x60>
 8019ba0:	f1b9 0f00 	cmp.w	r9, #0
 8019ba4:	f43f af0f 	beq.w	80199c6 <_scanf_float+0x6e>
 8019ba8:	0591      	lsls	r1, r2, #22
 8019baa:	bf58      	it	pl
 8019bac:	9901      	ldrpl	r1, [sp, #4]
 8019bae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019bb2:	bf58      	it	pl
 8019bb4:	eba9 0101 	subpl.w	r1, r9, r1
 8019bb8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8019bbc:	bf58      	it	pl
 8019bbe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8019bc2:	6022      	str	r2, [r4, #0]
 8019bc4:	f04f 0900 	mov.w	r9, #0
 8019bc8:	e78a      	b.n	8019ae0 <_scanf_float+0x188>
 8019bca:	f04f 0a03 	mov.w	sl, #3
 8019bce:	e787      	b.n	8019ae0 <_scanf_float+0x188>
 8019bd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019bd4:	4639      	mov	r1, r7
 8019bd6:	4640      	mov	r0, r8
 8019bd8:	4798      	blx	r3
 8019bda:	2800      	cmp	r0, #0
 8019bdc:	f43f aedf 	beq.w	801999e <_scanf_float+0x46>
 8019be0:	e6ea      	b.n	80199b8 <_scanf_float+0x60>
 8019be2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019be6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019bea:	463a      	mov	r2, r7
 8019bec:	4640      	mov	r0, r8
 8019bee:	4798      	blx	r3
 8019bf0:	6923      	ldr	r3, [r4, #16]
 8019bf2:	3b01      	subs	r3, #1
 8019bf4:	6123      	str	r3, [r4, #16]
 8019bf6:	e6ec      	b.n	80199d2 <_scanf_float+0x7a>
 8019bf8:	1e6b      	subs	r3, r5, #1
 8019bfa:	2b06      	cmp	r3, #6
 8019bfc:	d825      	bhi.n	8019c4a <_scanf_float+0x2f2>
 8019bfe:	2d02      	cmp	r5, #2
 8019c00:	d836      	bhi.n	8019c70 <_scanf_float+0x318>
 8019c02:	455e      	cmp	r6, fp
 8019c04:	f67f aee8 	bls.w	80199d8 <_scanf_float+0x80>
 8019c08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019c0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019c10:	463a      	mov	r2, r7
 8019c12:	4640      	mov	r0, r8
 8019c14:	4798      	blx	r3
 8019c16:	6923      	ldr	r3, [r4, #16]
 8019c18:	3b01      	subs	r3, #1
 8019c1a:	6123      	str	r3, [r4, #16]
 8019c1c:	e7f1      	b.n	8019c02 <_scanf_float+0x2aa>
 8019c1e:	9802      	ldr	r0, [sp, #8]
 8019c20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019c24:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8019c28:	9002      	str	r0, [sp, #8]
 8019c2a:	463a      	mov	r2, r7
 8019c2c:	4640      	mov	r0, r8
 8019c2e:	4798      	blx	r3
 8019c30:	6923      	ldr	r3, [r4, #16]
 8019c32:	3b01      	subs	r3, #1
 8019c34:	6123      	str	r3, [r4, #16]
 8019c36:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8019c3a:	fa5f fa8a 	uxtb.w	sl, sl
 8019c3e:	f1ba 0f02 	cmp.w	sl, #2
 8019c42:	d1ec      	bne.n	8019c1e <_scanf_float+0x2c6>
 8019c44:	3d03      	subs	r5, #3
 8019c46:	b2ed      	uxtb	r5, r5
 8019c48:	1b76      	subs	r6, r6, r5
 8019c4a:	6823      	ldr	r3, [r4, #0]
 8019c4c:	05da      	lsls	r2, r3, #23
 8019c4e:	d52f      	bpl.n	8019cb0 <_scanf_float+0x358>
 8019c50:	055b      	lsls	r3, r3, #21
 8019c52:	d510      	bpl.n	8019c76 <_scanf_float+0x31e>
 8019c54:	455e      	cmp	r6, fp
 8019c56:	f67f aebf 	bls.w	80199d8 <_scanf_float+0x80>
 8019c5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019c5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019c62:	463a      	mov	r2, r7
 8019c64:	4640      	mov	r0, r8
 8019c66:	4798      	blx	r3
 8019c68:	6923      	ldr	r3, [r4, #16]
 8019c6a:	3b01      	subs	r3, #1
 8019c6c:	6123      	str	r3, [r4, #16]
 8019c6e:	e7f1      	b.n	8019c54 <_scanf_float+0x2fc>
 8019c70:	46aa      	mov	sl, r5
 8019c72:	9602      	str	r6, [sp, #8]
 8019c74:	e7df      	b.n	8019c36 <_scanf_float+0x2de>
 8019c76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8019c7a:	6923      	ldr	r3, [r4, #16]
 8019c7c:	2965      	cmp	r1, #101	; 0x65
 8019c7e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8019c82:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8019c86:	6123      	str	r3, [r4, #16]
 8019c88:	d00c      	beq.n	8019ca4 <_scanf_float+0x34c>
 8019c8a:	2945      	cmp	r1, #69	; 0x45
 8019c8c:	d00a      	beq.n	8019ca4 <_scanf_float+0x34c>
 8019c8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019c92:	463a      	mov	r2, r7
 8019c94:	4640      	mov	r0, r8
 8019c96:	4798      	blx	r3
 8019c98:	6923      	ldr	r3, [r4, #16]
 8019c9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8019c9e:	3b01      	subs	r3, #1
 8019ca0:	1eb5      	subs	r5, r6, #2
 8019ca2:	6123      	str	r3, [r4, #16]
 8019ca4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019ca8:	463a      	mov	r2, r7
 8019caa:	4640      	mov	r0, r8
 8019cac:	4798      	blx	r3
 8019cae:	462e      	mov	r6, r5
 8019cb0:	6825      	ldr	r5, [r4, #0]
 8019cb2:	f015 0510 	ands.w	r5, r5, #16
 8019cb6:	d158      	bne.n	8019d6a <_scanf_float+0x412>
 8019cb8:	7035      	strb	r5, [r6, #0]
 8019cba:	6823      	ldr	r3, [r4, #0]
 8019cbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8019cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019cc4:	d11c      	bne.n	8019d00 <_scanf_float+0x3a8>
 8019cc6:	9b01      	ldr	r3, [sp, #4]
 8019cc8:	454b      	cmp	r3, r9
 8019cca:	eba3 0209 	sub.w	r2, r3, r9
 8019cce:	d124      	bne.n	8019d1a <_scanf_float+0x3c2>
 8019cd0:	2200      	movs	r2, #0
 8019cd2:	4659      	mov	r1, fp
 8019cd4:	4640      	mov	r0, r8
 8019cd6:	f001 f829 	bl	801ad2c <_strtod_r>
 8019cda:	9b03      	ldr	r3, [sp, #12]
 8019cdc:	6821      	ldr	r1, [r4, #0]
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	f011 0f02 	tst.w	r1, #2
 8019ce4:	ec57 6b10 	vmov	r6, r7, d0
 8019ce8:	f103 0204 	add.w	r2, r3, #4
 8019cec:	d020      	beq.n	8019d30 <_scanf_float+0x3d8>
 8019cee:	9903      	ldr	r1, [sp, #12]
 8019cf0:	600a      	str	r2, [r1, #0]
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	e9c3 6700 	strd	r6, r7, [r3]
 8019cf8:	68e3      	ldr	r3, [r4, #12]
 8019cfa:	3301      	adds	r3, #1
 8019cfc:	60e3      	str	r3, [r4, #12]
 8019cfe:	e66c      	b.n	80199da <_scanf_float+0x82>
 8019d00:	9b04      	ldr	r3, [sp, #16]
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d0e4      	beq.n	8019cd0 <_scanf_float+0x378>
 8019d06:	9905      	ldr	r1, [sp, #20]
 8019d08:	230a      	movs	r3, #10
 8019d0a:	462a      	mov	r2, r5
 8019d0c:	3101      	adds	r1, #1
 8019d0e:	4640      	mov	r0, r8
 8019d10:	f001 f896 	bl	801ae40 <_strtol_r>
 8019d14:	9b04      	ldr	r3, [sp, #16]
 8019d16:	9e05      	ldr	r6, [sp, #20]
 8019d18:	1ac2      	subs	r2, r0, r3
 8019d1a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8019d1e:	429e      	cmp	r6, r3
 8019d20:	bf28      	it	cs
 8019d22:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8019d26:	4912      	ldr	r1, [pc, #72]	; (8019d70 <_scanf_float+0x418>)
 8019d28:	4630      	mov	r0, r6
 8019d2a:	f000 f8fd 	bl	8019f28 <siprintf>
 8019d2e:	e7cf      	b.n	8019cd0 <_scanf_float+0x378>
 8019d30:	f011 0f04 	tst.w	r1, #4
 8019d34:	9903      	ldr	r1, [sp, #12]
 8019d36:	600a      	str	r2, [r1, #0]
 8019d38:	d1db      	bne.n	8019cf2 <_scanf_float+0x39a>
 8019d3a:	f8d3 8000 	ldr.w	r8, [r3]
 8019d3e:	ee10 2a10 	vmov	r2, s0
 8019d42:	ee10 0a10 	vmov	r0, s0
 8019d46:	463b      	mov	r3, r7
 8019d48:	4639      	mov	r1, r7
 8019d4a:	f7e6 feff 	bl	8000b4c <__aeabi_dcmpun>
 8019d4e:	b128      	cbz	r0, 8019d5c <_scanf_float+0x404>
 8019d50:	4808      	ldr	r0, [pc, #32]	; (8019d74 <_scanf_float+0x41c>)
 8019d52:	f000 f8af 	bl	8019eb4 <nanf>
 8019d56:	ed88 0a00 	vstr	s0, [r8]
 8019d5a:	e7cd      	b.n	8019cf8 <_scanf_float+0x3a0>
 8019d5c:	4630      	mov	r0, r6
 8019d5e:	4639      	mov	r1, r7
 8019d60:	f7e6 ff52 	bl	8000c08 <__aeabi_d2f>
 8019d64:	f8c8 0000 	str.w	r0, [r8]
 8019d68:	e7c6      	b.n	8019cf8 <_scanf_float+0x3a0>
 8019d6a:	2500      	movs	r5, #0
 8019d6c:	e635      	b.n	80199da <_scanf_float+0x82>
 8019d6e:	bf00      	nop
 8019d70:	0801f7a8 	.word	0x0801f7a8
 8019d74:	0801f8bb 	.word	0x0801f8bb

08019d78 <iprintf>:
 8019d78:	b40f      	push	{r0, r1, r2, r3}
 8019d7a:	4b0a      	ldr	r3, [pc, #40]	; (8019da4 <iprintf+0x2c>)
 8019d7c:	b513      	push	{r0, r1, r4, lr}
 8019d7e:	681c      	ldr	r4, [r3, #0]
 8019d80:	b124      	cbz	r4, 8019d8c <iprintf+0x14>
 8019d82:	69a3      	ldr	r3, [r4, #24]
 8019d84:	b913      	cbnz	r3, 8019d8c <iprintf+0x14>
 8019d86:	4620      	mov	r0, r4
 8019d88:	f001 fb44 	bl	801b414 <__sinit>
 8019d8c:	ab05      	add	r3, sp, #20
 8019d8e:	9a04      	ldr	r2, [sp, #16]
 8019d90:	68a1      	ldr	r1, [r4, #8]
 8019d92:	9301      	str	r3, [sp, #4]
 8019d94:	4620      	mov	r0, r4
 8019d96:	f003 f827 	bl	801cde8 <_vfiprintf_r>
 8019d9a:	b002      	add	sp, #8
 8019d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019da0:	b004      	add	sp, #16
 8019da2:	4770      	bx	lr
 8019da4:	20000190 	.word	0x20000190

08019da8 <srand>:
 8019da8:	b538      	push	{r3, r4, r5, lr}
 8019daa:	4b10      	ldr	r3, [pc, #64]	; (8019dec <srand+0x44>)
 8019dac:	681d      	ldr	r5, [r3, #0]
 8019dae:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8019db0:	4604      	mov	r4, r0
 8019db2:	b9b3      	cbnz	r3, 8019de2 <srand+0x3a>
 8019db4:	2018      	movs	r0, #24
 8019db6:	f7ff fcd5 	bl	8019764 <malloc>
 8019dba:	4602      	mov	r2, r0
 8019dbc:	63a8      	str	r0, [r5, #56]	; 0x38
 8019dbe:	b920      	cbnz	r0, 8019dca <srand+0x22>
 8019dc0:	4b0b      	ldr	r3, [pc, #44]	; (8019df0 <srand+0x48>)
 8019dc2:	480c      	ldr	r0, [pc, #48]	; (8019df4 <srand+0x4c>)
 8019dc4:	2142      	movs	r1, #66	; 0x42
 8019dc6:	f001 f9d1 	bl	801b16c <__assert_func>
 8019dca:	490b      	ldr	r1, [pc, #44]	; (8019df8 <srand+0x50>)
 8019dcc:	4b0b      	ldr	r3, [pc, #44]	; (8019dfc <srand+0x54>)
 8019dce:	e9c0 1300 	strd	r1, r3, [r0]
 8019dd2:	4b0b      	ldr	r3, [pc, #44]	; (8019e00 <srand+0x58>)
 8019dd4:	6083      	str	r3, [r0, #8]
 8019dd6:	230b      	movs	r3, #11
 8019dd8:	8183      	strh	r3, [r0, #12]
 8019dda:	2100      	movs	r1, #0
 8019ddc:	2001      	movs	r0, #1
 8019dde:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019de2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8019de4:	2200      	movs	r2, #0
 8019de6:	611c      	str	r4, [r3, #16]
 8019de8:	615a      	str	r2, [r3, #20]
 8019dea:	bd38      	pop	{r3, r4, r5, pc}
 8019dec:	20000190 	.word	0x20000190
 8019df0:	0801f7ad 	.word	0x0801f7ad
 8019df4:	0801f7c4 	.word	0x0801f7c4
 8019df8:	abcd330e 	.word	0xabcd330e
 8019dfc:	e66d1234 	.word	0xe66d1234
 8019e00:	0005deec 	.word	0x0005deec

08019e04 <rand>:
 8019e04:	4b17      	ldr	r3, [pc, #92]	; (8019e64 <rand+0x60>)
 8019e06:	b510      	push	{r4, lr}
 8019e08:	681c      	ldr	r4, [r3, #0]
 8019e0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019e0c:	b9b3      	cbnz	r3, 8019e3c <rand+0x38>
 8019e0e:	2018      	movs	r0, #24
 8019e10:	f7ff fca8 	bl	8019764 <malloc>
 8019e14:	63a0      	str	r0, [r4, #56]	; 0x38
 8019e16:	b928      	cbnz	r0, 8019e24 <rand+0x20>
 8019e18:	4602      	mov	r2, r0
 8019e1a:	4b13      	ldr	r3, [pc, #76]	; (8019e68 <rand+0x64>)
 8019e1c:	4813      	ldr	r0, [pc, #76]	; (8019e6c <rand+0x68>)
 8019e1e:	214e      	movs	r1, #78	; 0x4e
 8019e20:	f001 f9a4 	bl	801b16c <__assert_func>
 8019e24:	4a12      	ldr	r2, [pc, #72]	; (8019e70 <rand+0x6c>)
 8019e26:	4b13      	ldr	r3, [pc, #76]	; (8019e74 <rand+0x70>)
 8019e28:	e9c0 2300 	strd	r2, r3, [r0]
 8019e2c:	4b12      	ldr	r3, [pc, #72]	; (8019e78 <rand+0x74>)
 8019e2e:	6083      	str	r3, [r0, #8]
 8019e30:	230b      	movs	r3, #11
 8019e32:	8183      	strh	r3, [r0, #12]
 8019e34:	2201      	movs	r2, #1
 8019e36:	2300      	movs	r3, #0
 8019e38:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8019e3c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019e3e:	480f      	ldr	r0, [pc, #60]	; (8019e7c <rand+0x78>)
 8019e40:	690a      	ldr	r2, [r1, #16]
 8019e42:	694b      	ldr	r3, [r1, #20]
 8019e44:	4c0e      	ldr	r4, [pc, #56]	; (8019e80 <rand+0x7c>)
 8019e46:	4350      	muls	r0, r2
 8019e48:	fb04 0003 	mla	r0, r4, r3, r0
 8019e4c:	fba2 3404 	umull	r3, r4, r2, r4
 8019e50:	1c5a      	adds	r2, r3, #1
 8019e52:	4404      	add	r4, r0
 8019e54:	f144 0000 	adc.w	r0, r4, #0
 8019e58:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8019e5c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019e60:	bd10      	pop	{r4, pc}
 8019e62:	bf00      	nop
 8019e64:	20000190 	.word	0x20000190
 8019e68:	0801f7ad 	.word	0x0801f7ad
 8019e6c:	0801f7c4 	.word	0x0801f7c4
 8019e70:	abcd330e 	.word	0xabcd330e
 8019e74:	e66d1234 	.word	0xe66d1234
 8019e78:	0005deec 	.word	0x0005deec
 8019e7c:	5851f42d 	.word	0x5851f42d
 8019e80:	4c957f2d 	.word	0x4c957f2d

08019e84 <realloc>:
 8019e84:	4b02      	ldr	r3, [pc, #8]	; (8019e90 <realloc+0xc>)
 8019e86:	460a      	mov	r2, r1
 8019e88:	4601      	mov	r1, r0
 8019e8a:	6818      	ldr	r0, [r3, #0]
 8019e8c:	f002 bc2f 	b.w	801c6ee <_realloc_r>
 8019e90:	20000190 	.word	0x20000190

08019e94 <_sbrk_r>:
 8019e94:	b538      	push	{r3, r4, r5, lr}
 8019e96:	4d06      	ldr	r5, [pc, #24]	; (8019eb0 <_sbrk_r+0x1c>)
 8019e98:	2300      	movs	r3, #0
 8019e9a:	4604      	mov	r4, r0
 8019e9c:	4608      	mov	r0, r1
 8019e9e:	602b      	str	r3, [r5, #0]
 8019ea0:	f7e9 fe6a 	bl	8003b78 <_sbrk>
 8019ea4:	1c43      	adds	r3, r0, #1
 8019ea6:	d102      	bne.n	8019eae <_sbrk_r+0x1a>
 8019ea8:	682b      	ldr	r3, [r5, #0]
 8019eaa:	b103      	cbz	r3, 8019eae <_sbrk_r+0x1a>
 8019eac:	6023      	str	r3, [r4, #0]
 8019eae:	bd38      	pop	{r3, r4, r5, pc}
 8019eb0:	2001604c 	.word	0x2001604c

08019eb4 <nanf>:
 8019eb4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019ebc <nanf+0x8>
 8019eb8:	4770      	bx	lr
 8019eba:	bf00      	nop
 8019ebc:	7fc00000 	.word	0x7fc00000

08019ec0 <sniprintf>:
 8019ec0:	b40c      	push	{r2, r3}
 8019ec2:	b530      	push	{r4, r5, lr}
 8019ec4:	4b17      	ldr	r3, [pc, #92]	; (8019f24 <sniprintf+0x64>)
 8019ec6:	1e0c      	subs	r4, r1, #0
 8019ec8:	681d      	ldr	r5, [r3, #0]
 8019eca:	b09d      	sub	sp, #116	; 0x74
 8019ecc:	da08      	bge.n	8019ee0 <sniprintf+0x20>
 8019ece:	238b      	movs	r3, #139	; 0x8b
 8019ed0:	602b      	str	r3, [r5, #0]
 8019ed2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019ed6:	b01d      	add	sp, #116	; 0x74
 8019ed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019edc:	b002      	add	sp, #8
 8019ede:	4770      	bx	lr
 8019ee0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8019ee4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019ee8:	bf14      	ite	ne
 8019eea:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8019eee:	4623      	moveq	r3, r4
 8019ef0:	9304      	str	r3, [sp, #16]
 8019ef2:	9307      	str	r3, [sp, #28]
 8019ef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019ef8:	9002      	str	r0, [sp, #8]
 8019efa:	9006      	str	r0, [sp, #24]
 8019efc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019f00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019f02:	ab21      	add	r3, sp, #132	; 0x84
 8019f04:	a902      	add	r1, sp, #8
 8019f06:	4628      	mov	r0, r5
 8019f08:	9301      	str	r3, [sp, #4]
 8019f0a:	f002 fc71 	bl	801c7f0 <_svfiprintf_r>
 8019f0e:	1c43      	adds	r3, r0, #1
 8019f10:	bfbc      	itt	lt
 8019f12:	238b      	movlt	r3, #139	; 0x8b
 8019f14:	602b      	strlt	r3, [r5, #0]
 8019f16:	2c00      	cmp	r4, #0
 8019f18:	d0dd      	beq.n	8019ed6 <sniprintf+0x16>
 8019f1a:	9b02      	ldr	r3, [sp, #8]
 8019f1c:	2200      	movs	r2, #0
 8019f1e:	701a      	strb	r2, [r3, #0]
 8019f20:	e7d9      	b.n	8019ed6 <sniprintf+0x16>
 8019f22:	bf00      	nop
 8019f24:	20000190 	.word	0x20000190

08019f28 <siprintf>:
 8019f28:	b40e      	push	{r1, r2, r3}
 8019f2a:	b500      	push	{lr}
 8019f2c:	b09c      	sub	sp, #112	; 0x70
 8019f2e:	ab1d      	add	r3, sp, #116	; 0x74
 8019f30:	9002      	str	r0, [sp, #8]
 8019f32:	9006      	str	r0, [sp, #24]
 8019f34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019f38:	4809      	ldr	r0, [pc, #36]	; (8019f60 <siprintf+0x38>)
 8019f3a:	9107      	str	r1, [sp, #28]
 8019f3c:	9104      	str	r1, [sp, #16]
 8019f3e:	4909      	ldr	r1, [pc, #36]	; (8019f64 <siprintf+0x3c>)
 8019f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f44:	9105      	str	r1, [sp, #20]
 8019f46:	6800      	ldr	r0, [r0, #0]
 8019f48:	9301      	str	r3, [sp, #4]
 8019f4a:	a902      	add	r1, sp, #8
 8019f4c:	f002 fc50 	bl	801c7f0 <_svfiprintf_r>
 8019f50:	9b02      	ldr	r3, [sp, #8]
 8019f52:	2200      	movs	r2, #0
 8019f54:	701a      	strb	r2, [r3, #0]
 8019f56:	b01c      	add	sp, #112	; 0x70
 8019f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8019f5c:	b003      	add	sp, #12
 8019f5e:	4770      	bx	lr
 8019f60:	20000190 	.word	0x20000190
 8019f64:	ffff0208 	.word	0xffff0208

08019f68 <siscanf>:
 8019f68:	b40e      	push	{r1, r2, r3}
 8019f6a:	b510      	push	{r4, lr}
 8019f6c:	b09f      	sub	sp, #124	; 0x7c
 8019f6e:	ac21      	add	r4, sp, #132	; 0x84
 8019f70:	f44f 7101 	mov.w	r1, #516	; 0x204
 8019f74:	f854 2b04 	ldr.w	r2, [r4], #4
 8019f78:	9201      	str	r2, [sp, #4]
 8019f7a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019f7e:	9004      	str	r0, [sp, #16]
 8019f80:	9008      	str	r0, [sp, #32]
 8019f82:	f7e6 f92f 	bl	80001e4 <strlen>
 8019f86:	4b0c      	ldr	r3, [pc, #48]	; (8019fb8 <siscanf+0x50>)
 8019f88:	9005      	str	r0, [sp, #20]
 8019f8a:	9009      	str	r0, [sp, #36]	; 0x24
 8019f8c:	930d      	str	r3, [sp, #52]	; 0x34
 8019f8e:	480b      	ldr	r0, [pc, #44]	; (8019fbc <siscanf+0x54>)
 8019f90:	9a01      	ldr	r2, [sp, #4]
 8019f92:	6800      	ldr	r0, [r0, #0]
 8019f94:	9403      	str	r4, [sp, #12]
 8019f96:	2300      	movs	r3, #0
 8019f98:	9311      	str	r3, [sp, #68]	; 0x44
 8019f9a:	9316      	str	r3, [sp, #88]	; 0x58
 8019f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019fa0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019fa4:	a904      	add	r1, sp, #16
 8019fa6:	4623      	mov	r3, r4
 8019fa8:	f002 fd7c 	bl	801caa4 <__ssvfiscanf_r>
 8019fac:	b01f      	add	sp, #124	; 0x7c
 8019fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019fb2:	b003      	add	sp, #12
 8019fb4:	4770      	bx	lr
 8019fb6:	bf00      	nop
 8019fb8:	08019fe3 	.word	0x08019fe3
 8019fbc:	20000190 	.word	0x20000190

08019fc0 <__sread>:
 8019fc0:	b510      	push	{r4, lr}
 8019fc2:	460c      	mov	r4, r1
 8019fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019fc8:	f003 fb1e 	bl	801d608 <_read_r>
 8019fcc:	2800      	cmp	r0, #0
 8019fce:	bfab      	itete	ge
 8019fd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8019fd4:	181b      	addge	r3, r3, r0
 8019fd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019fda:	bfac      	ite	ge
 8019fdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8019fde:	81a3      	strhlt	r3, [r4, #12]
 8019fe0:	bd10      	pop	{r4, pc}

08019fe2 <__seofread>:
 8019fe2:	2000      	movs	r0, #0
 8019fe4:	4770      	bx	lr

08019fe6 <__swrite>:
 8019fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fea:	461f      	mov	r7, r3
 8019fec:	898b      	ldrh	r3, [r1, #12]
 8019fee:	05db      	lsls	r3, r3, #23
 8019ff0:	4605      	mov	r5, r0
 8019ff2:	460c      	mov	r4, r1
 8019ff4:	4616      	mov	r6, r2
 8019ff6:	d505      	bpl.n	801a004 <__swrite+0x1e>
 8019ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ffc:	2302      	movs	r3, #2
 8019ffe:	2200      	movs	r2, #0
 801a000:	f001 fe26 	bl	801bc50 <_lseek_r>
 801a004:	89a3      	ldrh	r3, [r4, #12]
 801a006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a00a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a00e:	81a3      	strh	r3, [r4, #12]
 801a010:	4632      	mov	r2, r6
 801a012:	463b      	mov	r3, r7
 801a014:	4628      	mov	r0, r5
 801a016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a01a:	f001 b827 	b.w	801b06c <_write_r>

0801a01e <__sseek>:
 801a01e:	b510      	push	{r4, lr}
 801a020:	460c      	mov	r4, r1
 801a022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a026:	f001 fe13 	bl	801bc50 <_lseek_r>
 801a02a:	1c43      	adds	r3, r0, #1
 801a02c:	89a3      	ldrh	r3, [r4, #12]
 801a02e:	bf15      	itete	ne
 801a030:	6560      	strne	r0, [r4, #84]	; 0x54
 801a032:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a036:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a03a:	81a3      	strheq	r3, [r4, #12]
 801a03c:	bf18      	it	ne
 801a03e:	81a3      	strhne	r3, [r4, #12]
 801a040:	bd10      	pop	{r4, pc}

0801a042 <__sclose>:
 801a042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a046:	f001 b8af 	b.w	801b1a8 <_close_r>

0801a04a <strchr>:
 801a04a:	b2c9      	uxtb	r1, r1
 801a04c:	4603      	mov	r3, r0
 801a04e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a052:	b11a      	cbz	r2, 801a05c <strchr+0x12>
 801a054:	428a      	cmp	r2, r1
 801a056:	d1f9      	bne.n	801a04c <strchr+0x2>
 801a058:	4618      	mov	r0, r3
 801a05a:	4770      	bx	lr
 801a05c:	2900      	cmp	r1, #0
 801a05e:	bf18      	it	ne
 801a060:	2300      	movne	r3, #0
 801a062:	e7f9      	b.n	801a058 <strchr+0xe>

0801a064 <strcpy>:
 801a064:	4603      	mov	r3, r0
 801a066:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a06a:	f803 2b01 	strb.w	r2, [r3], #1
 801a06e:	2a00      	cmp	r2, #0
 801a070:	d1f9      	bne.n	801a066 <strcpy+0x2>
 801a072:	4770      	bx	lr

0801a074 <strncmp>:
 801a074:	b510      	push	{r4, lr}
 801a076:	b16a      	cbz	r2, 801a094 <strncmp+0x20>
 801a078:	3901      	subs	r1, #1
 801a07a:	1884      	adds	r4, r0, r2
 801a07c:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a080:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a084:	4293      	cmp	r3, r2
 801a086:	d103      	bne.n	801a090 <strncmp+0x1c>
 801a088:	42a0      	cmp	r0, r4
 801a08a:	d001      	beq.n	801a090 <strncmp+0x1c>
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	d1f5      	bne.n	801a07c <strncmp+0x8>
 801a090:	1a98      	subs	r0, r3, r2
 801a092:	bd10      	pop	{r4, pc}
 801a094:	4610      	mov	r0, r2
 801a096:	e7fc      	b.n	801a092 <strncmp+0x1e>

0801a098 <strnlen>:
 801a098:	b510      	push	{r4, lr}
 801a09a:	4602      	mov	r2, r0
 801a09c:	4401      	add	r1, r0
 801a09e:	428a      	cmp	r2, r1
 801a0a0:	4613      	mov	r3, r2
 801a0a2:	d101      	bne.n	801a0a8 <strnlen+0x10>
 801a0a4:	1a18      	subs	r0, r3, r0
 801a0a6:	bd10      	pop	{r4, pc}
 801a0a8:	781c      	ldrb	r4, [r3, #0]
 801a0aa:	3201      	adds	r2, #1
 801a0ac:	2c00      	cmp	r4, #0
 801a0ae:	d1f6      	bne.n	801a09e <strnlen+0x6>
 801a0b0:	e7f8      	b.n	801a0a4 <strnlen+0xc>

0801a0b2 <strstr>:
 801a0b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0b4:	780c      	ldrb	r4, [r1, #0]
 801a0b6:	b164      	cbz	r4, 801a0d2 <strstr+0x20>
 801a0b8:	4603      	mov	r3, r0
 801a0ba:	781a      	ldrb	r2, [r3, #0]
 801a0bc:	4618      	mov	r0, r3
 801a0be:	1c5e      	adds	r6, r3, #1
 801a0c0:	b90a      	cbnz	r2, 801a0c6 <strstr+0x14>
 801a0c2:	4610      	mov	r0, r2
 801a0c4:	e005      	b.n	801a0d2 <strstr+0x20>
 801a0c6:	4294      	cmp	r4, r2
 801a0c8:	d108      	bne.n	801a0dc <strstr+0x2a>
 801a0ca:	460d      	mov	r5, r1
 801a0cc:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801a0d0:	b902      	cbnz	r2, 801a0d4 <strstr+0x22>
 801a0d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0d4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801a0d8:	4297      	cmp	r7, r2
 801a0da:	d0f7      	beq.n	801a0cc <strstr+0x1a>
 801a0dc:	4633      	mov	r3, r6
 801a0de:	e7ec      	b.n	801a0ba <strstr+0x8>

0801a0e0 <sulp>:
 801a0e0:	b570      	push	{r4, r5, r6, lr}
 801a0e2:	4604      	mov	r4, r0
 801a0e4:	460d      	mov	r5, r1
 801a0e6:	ec45 4b10 	vmov	d0, r4, r5
 801a0ea:	4616      	mov	r6, r2
 801a0ec:	f002 f9b0 	bl	801c450 <__ulp>
 801a0f0:	ec51 0b10 	vmov	r0, r1, d0
 801a0f4:	b17e      	cbz	r6, 801a116 <sulp+0x36>
 801a0f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a0fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	dd09      	ble.n	801a116 <sulp+0x36>
 801a102:	051b      	lsls	r3, r3, #20
 801a104:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a108:	2400      	movs	r4, #0
 801a10a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a10e:	4622      	mov	r2, r4
 801a110:	462b      	mov	r3, r5
 801a112:	f7e6 fa81 	bl	8000618 <__aeabi_dmul>
 801a116:	bd70      	pop	{r4, r5, r6, pc}

0801a118 <_strtod_l>:
 801a118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a11c:	b0a3      	sub	sp, #140	; 0x8c
 801a11e:	461f      	mov	r7, r3
 801a120:	2300      	movs	r3, #0
 801a122:	931e      	str	r3, [sp, #120]	; 0x78
 801a124:	4ba4      	ldr	r3, [pc, #656]	; (801a3b8 <_strtod_l+0x2a0>)
 801a126:	9219      	str	r2, [sp, #100]	; 0x64
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	9307      	str	r3, [sp, #28]
 801a12c:	4604      	mov	r4, r0
 801a12e:	4618      	mov	r0, r3
 801a130:	4688      	mov	r8, r1
 801a132:	f7e6 f857 	bl	80001e4 <strlen>
 801a136:	f04f 0a00 	mov.w	sl, #0
 801a13a:	4605      	mov	r5, r0
 801a13c:	f04f 0b00 	mov.w	fp, #0
 801a140:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801a144:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a146:	781a      	ldrb	r2, [r3, #0]
 801a148:	2a2b      	cmp	r2, #43	; 0x2b
 801a14a:	d04c      	beq.n	801a1e6 <_strtod_l+0xce>
 801a14c:	d839      	bhi.n	801a1c2 <_strtod_l+0xaa>
 801a14e:	2a0d      	cmp	r2, #13
 801a150:	d832      	bhi.n	801a1b8 <_strtod_l+0xa0>
 801a152:	2a08      	cmp	r2, #8
 801a154:	d832      	bhi.n	801a1bc <_strtod_l+0xa4>
 801a156:	2a00      	cmp	r2, #0
 801a158:	d03c      	beq.n	801a1d4 <_strtod_l+0xbc>
 801a15a:	2300      	movs	r3, #0
 801a15c:	930e      	str	r3, [sp, #56]	; 0x38
 801a15e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801a160:	7833      	ldrb	r3, [r6, #0]
 801a162:	2b30      	cmp	r3, #48	; 0x30
 801a164:	f040 80b4 	bne.w	801a2d0 <_strtod_l+0x1b8>
 801a168:	7873      	ldrb	r3, [r6, #1]
 801a16a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a16e:	2b58      	cmp	r3, #88	; 0x58
 801a170:	d16c      	bne.n	801a24c <_strtod_l+0x134>
 801a172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a174:	9301      	str	r3, [sp, #4]
 801a176:	ab1e      	add	r3, sp, #120	; 0x78
 801a178:	9702      	str	r7, [sp, #8]
 801a17a:	9300      	str	r3, [sp, #0]
 801a17c:	4a8f      	ldr	r2, [pc, #572]	; (801a3bc <_strtod_l+0x2a4>)
 801a17e:	ab1f      	add	r3, sp, #124	; 0x7c
 801a180:	a91d      	add	r1, sp, #116	; 0x74
 801a182:	4620      	mov	r0, r4
 801a184:	f001 fa5c 	bl	801b640 <__gethex>
 801a188:	f010 0707 	ands.w	r7, r0, #7
 801a18c:	4605      	mov	r5, r0
 801a18e:	d005      	beq.n	801a19c <_strtod_l+0x84>
 801a190:	2f06      	cmp	r7, #6
 801a192:	d12a      	bne.n	801a1ea <_strtod_l+0xd2>
 801a194:	3601      	adds	r6, #1
 801a196:	2300      	movs	r3, #0
 801a198:	961d      	str	r6, [sp, #116]	; 0x74
 801a19a:	930e      	str	r3, [sp, #56]	; 0x38
 801a19c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	f040 8596 	bne.w	801acd0 <_strtod_l+0xbb8>
 801a1a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a1a6:	b1db      	cbz	r3, 801a1e0 <_strtod_l+0xc8>
 801a1a8:	4652      	mov	r2, sl
 801a1aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a1ae:	ec43 2b10 	vmov	d0, r2, r3
 801a1b2:	b023      	add	sp, #140	; 0x8c
 801a1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1b8:	2a20      	cmp	r2, #32
 801a1ba:	d1ce      	bne.n	801a15a <_strtod_l+0x42>
 801a1bc:	3301      	adds	r3, #1
 801a1be:	931d      	str	r3, [sp, #116]	; 0x74
 801a1c0:	e7c0      	b.n	801a144 <_strtod_l+0x2c>
 801a1c2:	2a2d      	cmp	r2, #45	; 0x2d
 801a1c4:	d1c9      	bne.n	801a15a <_strtod_l+0x42>
 801a1c6:	2201      	movs	r2, #1
 801a1c8:	920e      	str	r2, [sp, #56]	; 0x38
 801a1ca:	1c5a      	adds	r2, r3, #1
 801a1cc:	921d      	str	r2, [sp, #116]	; 0x74
 801a1ce:	785b      	ldrb	r3, [r3, #1]
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d1c4      	bne.n	801a15e <_strtod_l+0x46>
 801a1d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a1d6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	f040 8576 	bne.w	801accc <_strtod_l+0xbb4>
 801a1e0:	4652      	mov	r2, sl
 801a1e2:	465b      	mov	r3, fp
 801a1e4:	e7e3      	b.n	801a1ae <_strtod_l+0x96>
 801a1e6:	2200      	movs	r2, #0
 801a1e8:	e7ee      	b.n	801a1c8 <_strtod_l+0xb0>
 801a1ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a1ec:	b13a      	cbz	r2, 801a1fe <_strtod_l+0xe6>
 801a1ee:	2135      	movs	r1, #53	; 0x35
 801a1f0:	a820      	add	r0, sp, #128	; 0x80
 801a1f2:	f002 fa38 	bl	801c666 <__copybits>
 801a1f6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a1f8:	4620      	mov	r0, r4
 801a1fa:	f001 fdfd 	bl	801bdf8 <_Bfree>
 801a1fe:	3f01      	subs	r7, #1
 801a200:	2f05      	cmp	r7, #5
 801a202:	d807      	bhi.n	801a214 <_strtod_l+0xfc>
 801a204:	e8df f007 	tbb	[pc, r7]
 801a208:	1d180b0e 	.word	0x1d180b0e
 801a20c:	030e      	.short	0x030e
 801a20e:	f04f 0b00 	mov.w	fp, #0
 801a212:	46da      	mov	sl, fp
 801a214:	0728      	lsls	r0, r5, #28
 801a216:	d5c1      	bpl.n	801a19c <_strtod_l+0x84>
 801a218:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a21c:	e7be      	b.n	801a19c <_strtod_l+0x84>
 801a21e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801a222:	e7f7      	b.n	801a214 <_strtod_l+0xfc>
 801a224:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801a228:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801a22a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a22e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a232:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a236:	e7ed      	b.n	801a214 <_strtod_l+0xfc>
 801a238:	f8df b184 	ldr.w	fp, [pc, #388]	; 801a3c0 <_strtod_l+0x2a8>
 801a23c:	f04f 0a00 	mov.w	sl, #0
 801a240:	e7e8      	b.n	801a214 <_strtod_l+0xfc>
 801a242:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a246:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801a24a:	e7e3      	b.n	801a214 <_strtod_l+0xfc>
 801a24c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a24e:	1c5a      	adds	r2, r3, #1
 801a250:	921d      	str	r2, [sp, #116]	; 0x74
 801a252:	785b      	ldrb	r3, [r3, #1]
 801a254:	2b30      	cmp	r3, #48	; 0x30
 801a256:	d0f9      	beq.n	801a24c <_strtod_l+0x134>
 801a258:	2b00      	cmp	r3, #0
 801a25a:	d09f      	beq.n	801a19c <_strtod_l+0x84>
 801a25c:	2301      	movs	r3, #1
 801a25e:	f04f 0900 	mov.w	r9, #0
 801a262:	9304      	str	r3, [sp, #16]
 801a264:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a266:	930a      	str	r3, [sp, #40]	; 0x28
 801a268:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801a26c:	464f      	mov	r7, r9
 801a26e:	220a      	movs	r2, #10
 801a270:	981d      	ldr	r0, [sp, #116]	; 0x74
 801a272:	7806      	ldrb	r6, [r0, #0]
 801a274:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a278:	b2d9      	uxtb	r1, r3
 801a27a:	2909      	cmp	r1, #9
 801a27c:	d92a      	bls.n	801a2d4 <_strtod_l+0x1bc>
 801a27e:	9907      	ldr	r1, [sp, #28]
 801a280:	462a      	mov	r2, r5
 801a282:	f7ff fef7 	bl	801a074 <strncmp>
 801a286:	b398      	cbz	r0, 801a2f0 <_strtod_l+0x1d8>
 801a288:	2000      	movs	r0, #0
 801a28a:	4633      	mov	r3, r6
 801a28c:	463d      	mov	r5, r7
 801a28e:	9007      	str	r0, [sp, #28]
 801a290:	4602      	mov	r2, r0
 801a292:	2b65      	cmp	r3, #101	; 0x65
 801a294:	d001      	beq.n	801a29a <_strtod_l+0x182>
 801a296:	2b45      	cmp	r3, #69	; 0x45
 801a298:	d118      	bne.n	801a2cc <_strtod_l+0x1b4>
 801a29a:	b91d      	cbnz	r5, 801a2a4 <_strtod_l+0x18c>
 801a29c:	9b04      	ldr	r3, [sp, #16]
 801a29e:	4303      	orrs	r3, r0
 801a2a0:	d098      	beq.n	801a1d4 <_strtod_l+0xbc>
 801a2a2:	2500      	movs	r5, #0
 801a2a4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801a2a8:	f108 0301 	add.w	r3, r8, #1
 801a2ac:	931d      	str	r3, [sp, #116]	; 0x74
 801a2ae:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a2b2:	2b2b      	cmp	r3, #43	; 0x2b
 801a2b4:	d075      	beq.n	801a3a2 <_strtod_l+0x28a>
 801a2b6:	2b2d      	cmp	r3, #45	; 0x2d
 801a2b8:	d07b      	beq.n	801a3b2 <_strtod_l+0x29a>
 801a2ba:	f04f 0c00 	mov.w	ip, #0
 801a2be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801a2c2:	2909      	cmp	r1, #9
 801a2c4:	f240 8082 	bls.w	801a3cc <_strtod_l+0x2b4>
 801a2c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801a2cc:	2600      	movs	r6, #0
 801a2ce:	e09d      	b.n	801a40c <_strtod_l+0x2f4>
 801a2d0:	2300      	movs	r3, #0
 801a2d2:	e7c4      	b.n	801a25e <_strtod_l+0x146>
 801a2d4:	2f08      	cmp	r7, #8
 801a2d6:	bfd8      	it	le
 801a2d8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801a2da:	f100 0001 	add.w	r0, r0, #1
 801a2de:	bfda      	itte	le
 801a2e0:	fb02 3301 	mlale	r3, r2, r1, r3
 801a2e4:	9309      	strle	r3, [sp, #36]	; 0x24
 801a2e6:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a2ea:	3701      	adds	r7, #1
 801a2ec:	901d      	str	r0, [sp, #116]	; 0x74
 801a2ee:	e7bf      	b.n	801a270 <_strtod_l+0x158>
 801a2f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a2f2:	195a      	adds	r2, r3, r5
 801a2f4:	921d      	str	r2, [sp, #116]	; 0x74
 801a2f6:	5d5b      	ldrb	r3, [r3, r5]
 801a2f8:	2f00      	cmp	r7, #0
 801a2fa:	d037      	beq.n	801a36c <_strtod_l+0x254>
 801a2fc:	9007      	str	r0, [sp, #28]
 801a2fe:	463d      	mov	r5, r7
 801a300:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801a304:	2a09      	cmp	r2, #9
 801a306:	d912      	bls.n	801a32e <_strtod_l+0x216>
 801a308:	2201      	movs	r2, #1
 801a30a:	e7c2      	b.n	801a292 <_strtod_l+0x17a>
 801a30c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a30e:	1c5a      	adds	r2, r3, #1
 801a310:	921d      	str	r2, [sp, #116]	; 0x74
 801a312:	785b      	ldrb	r3, [r3, #1]
 801a314:	3001      	adds	r0, #1
 801a316:	2b30      	cmp	r3, #48	; 0x30
 801a318:	d0f8      	beq.n	801a30c <_strtod_l+0x1f4>
 801a31a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801a31e:	2a08      	cmp	r2, #8
 801a320:	f200 84db 	bhi.w	801acda <_strtod_l+0xbc2>
 801a324:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a326:	9007      	str	r0, [sp, #28]
 801a328:	2000      	movs	r0, #0
 801a32a:	920a      	str	r2, [sp, #40]	; 0x28
 801a32c:	4605      	mov	r5, r0
 801a32e:	3b30      	subs	r3, #48	; 0x30
 801a330:	f100 0201 	add.w	r2, r0, #1
 801a334:	d014      	beq.n	801a360 <_strtod_l+0x248>
 801a336:	9907      	ldr	r1, [sp, #28]
 801a338:	4411      	add	r1, r2
 801a33a:	9107      	str	r1, [sp, #28]
 801a33c:	462a      	mov	r2, r5
 801a33e:	eb00 0e05 	add.w	lr, r0, r5
 801a342:	210a      	movs	r1, #10
 801a344:	4572      	cmp	r2, lr
 801a346:	d113      	bne.n	801a370 <_strtod_l+0x258>
 801a348:	182a      	adds	r2, r5, r0
 801a34a:	2a08      	cmp	r2, #8
 801a34c:	f105 0501 	add.w	r5, r5, #1
 801a350:	4405      	add	r5, r0
 801a352:	dc1c      	bgt.n	801a38e <_strtod_l+0x276>
 801a354:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a356:	220a      	movs	r2, #10
 801a358:	fb02 3301 	mla	r3, r2, r1, r3
 801a35c:	9309      	str	r3, [sp, #36]	; 0x24
 801a35e:	2200      	movs	r2, #0
 801a360:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a362:	1c59      	adds	r1, r3, #1
 801a364:	911d      	str	r1, [sp, #116]	; 0x74
 801a366:	785b      	ldrb	r3, [r3, #1]
 801a368:	4610      	mov	r0, r2
 801a36a:	e7c9      	b.n	801a300 <_strtod_l+0x1e8>
 801a36c:	4638      	mov	r0, r7
 801a36e:	e7d2      	b.n	801a316 <_strtod_l+0x1fe>
 801a370:	2a08      	cmp	r2, #8
 801a372:	dc04      	bgt.n	801a37e <_strtod_l+0x266>
 801a374:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801a376:	434e      	muls	r6, r1
 801a378:	9609      	str	r6, [sp, #36]	; 0x24
 801a37a:	3201      	adds	r2, #1
 801a37c:	e7e2      	b.n	801a344 <_strtod_l+0x22c>
 801a37e:	f102 0c01 	add.w	ip, r2, #1
 801a382:	f1bc 0f10 	cmp.w	ip, #16
 801a386:	bfd8      	it	le
 801a388:	fb01 f909 	mulle.w	r9, r1, r9
 801a38c:	e7f5      	b.n	801a37a <_strtod_l+0x262>
 801a38e:	2d10      	cmp	r5, #16
 801a390:	bfdc      	itt	le
 801a392:	220a      	movle	r2, #10
 801a394:	fb02 3909 	mlale	r9, r2, r9, r3
 801a398:	e7e1      	b.n	801a35e <_strtod_l+0x246>
 801a39a:	2300      	movs	r3, #0
 801a39c:	9307      	str	r3, [sp, #28]
 801a39e:	2201      	movs	r2, #1
 801a3a0:	e77c      	b.n	801a29c <_strtod_l+0x184>
 801a3a2:	f04f 0c00 	mov.w	ip, #0
 801a3a6:	f108 0302 	add.w	r3, r8, #2
 801a3aa:	931d      	str	r3, [sp, #116]	; 0x74
 801a3ac:	f898 3002 	ldrb.w	r3, [r8, #2]
 801a3b0:	e785      	b.n	801a2be <_strtod_l+0x1a6>
 801a3b2:	f04f 0c01 	mov.w	ip, #1
 801a3b6:	e7f6      	b.n	801a3a6 <_strtod_l+0x28e>
 801a3b8:	0801f998 	.word	0x0801f998
 801a3bc:	0801f830 	.word	0x0801f830
 801a3c0:	7ff00000 	.word	0x7ff00000
 801a3c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a3c6:	1c59      	adds	r1, r3, #1
 801a3c8:	911d      	str	r1, [sp, #116]	; 0x74
 801a3ca:	785b      	ldrb	r3, [r3, #1]
 801a3cc:	2b30      	cmp	r3, #48	; 0x30
 801a3ce:	d0f9      	beq.n	801a3c4 <_strtod_l+0x2ac>
 801a3d0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801a3d4:	2908      	cmp	r1, #8
 801a3d6:	f63f af79 	bhi.w	801a2cc <_strtod_l+0x1b4>
 801a3da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801a3de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a3e0:	9308      	str	r3, [sp, #32]
 801a3e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a3e4:	1c59      	adds	r1, r3, #1
 801a3e6:	911d      	str	r1, [sp, #116]	; 0x74
 801a3e8:	785b      	ldrb	r3, [r3, #1]
 801a3ea:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801a3ee:	2e09      	cmp	r6, #9
 801a3f0:	d937      	bls.n	801a462 <_strtod_l+0x34a>
 801a3f2:	9e08      	ldr	r6, [sp, #32]
 801a3f4:	1b89      	subs	r1, r1, r6
 801a3f6:	2908      	cmp	r1, #8
 801a3f8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801a3fc:	dc02      	bgt.n	801a404 <_strtod_l+0x2ec>
 801a3fe:	4576      	cmp	r6, lr
 801a400:	bfa8      	it	ge
 801a402:	4676      	movge	r6, lr
 801a404:	f1bc 0f00 	cmp.w	ip, #0
 801a408:	d000      	beq.n	801a40c <_strtod_l+0x2f4>
 801a40a:	4276      	negs	r6, r6
 801a40c:	2d00      	cmp	r5, #0
 801a40e:	d14f      	bne.n	801a4b0 <_strtod_l+0x398>
 801a410:	9904      	ldr	r1, [sp, #16]
 801a412:	4301      	orrs	r1, r0
 801a414:	f47f aec2 	bne.w	801a19c <_strtod_l+0x84>
 801a418:	2a00      	cmp	r2, #0
 801a41a:	f47f aedb 	bne.w	801a1d4 <_strtod_l+0xbc>
 801a41e:	2b69      	cmp	r3, #105	; 0x69
 801a420:	d027      	beq.n	801a472 <_strtod_l+0x35a>
 801a422:	dc24      	bgt.n	801a46e <_strtod_l+0x356>
 801a424:	2b49      	cmp	r3, #73	; 0x49
 801a426:	d024      	beq.n	801a472 <_strtod_l+0x35a>
 801a428:	2b4e      	cmp	r3, #78	; 0x4e
 801a42a:	f47f aed3 	bne.w	801a1d4 <_strtod_l+0xbc>
 801a42e:	499e      	ldr	r1, [pc, #632]	; (801a6a8 <_strtod_l+0x590>)
 801a430:	a81d      	add	r0, sp, #116	; 0x74
 801a432:	f001 fb5d 	bl	801baf0 <__match>
 801a436:	2800      	cmp	r0, #0
 801a438:	f43f aecc 	beq.w	801a1d4 <_strtod_l+0xbc>
 801a43c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a43e:	781b      	ldrb	r3, [r3, #0]
 801a440:	2b28      	cmp	r3, #40	; 0x28
 801a442:	d12d      	bne.n	801a4a0 <_strtod_l+0x388>
 801a444:	4999      	ldr	r1, [pc, #612]	; (801a6ac <_strtod_l+0x594>)
 801a446:	aa20      	add	r2, sp, #128	; 0x80
 801a448:	a81d      	add	r0, sp, #116	; 0x74
 801a44a:	f001 fb65 	bl	801bb18 <__hexnan>
 801a44e:	2805      	cmp	r0, #5
 801a450:	d126      	bne.n	801a4a0 <_strtod_l+0x388>
 801a452:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a454:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801a458:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801a45c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801a460:	e69c      	b.n	801a19c <_strtod_l+0x84>
 801a462:	210a      	movs	r1, #10
 801a464:	fb01 3e0e 	mla	lr, r1, lr, r3
 801a468:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801a46c:	e7b9      	b.n	801a3e2 <_strtod_l+0x2ca>
 801a46e:	2b6e      	cmp	r3, #110	; 0x6e
 801a470:	e7db      	b.n	801a42a <_strtod_l+0x312>
 801a472:	498f      	ldr	r1, [pc, #572]	; (801a6b0 <_strtod_l+0x598>)
 801a474:	a81d      	add	r0, sp, #116	; 0x74
 801a476:	f001 fb3b 	bl	801baf0 <__match>
 801a47a:	2800      	cmp	r0, #0
 801a47c:	f43f aeaa 	beq.w	801a1d4 <_strtod_l+0xbc>
 801a480:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a482:	498c      	ldr	r1, [pc, #560]	; (801a6b4 <_strtod_l+0x59c>)
 801a484:	3b01      	subs	r3, #1
 801a486:	a81d      	add	r0, sp, #116	; 0x74
 801a488:	931d      	str	r3, [sp, #116]	; 0x74
 801a48a:	f001 fb31 	bl	801baf0 <__match>
 801a48e:	b910      	cbnz	r0, 801a496 <_strtod_l+0x37e>
 801a490:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a492:	3301      	adds	r3, #1
 801a494:	931d      	str	r3, [sp, #116]	; 0x74
 801a496:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801a6c4 <_strtod_l+0x5ac>
 801a49a:	f04f 0a00 	mov.w	sl, #0
 801a49e:	e67d      	b.n	801a19c <_strtod_l+0x84>
 801a4a0:	4885      	ldr	r0, [pc, #532]	; (801a6b8 <_strtod_l+0x5a0>)
 801a4a2:	f003 f8c5 	bl	801d630 <nan>
 801a4a6:	ed8d 0b04 	vstr	d0, [sp, #16]
 801a4aa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801a4ae:	e675      	b.n	801a19c <_strtod_l+0x84>
 801a4b0:	9b07      	ldr	r3, [sp, #28]
 801a4b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a4b4:	1af3      	subs	r3, r6, r3
 801a4b6:	2f00      	cmp	r7, #0
 801a4b8:	bf08      	it	eq
 801a4ba:	462f      	moveq	r7, r5
 801a4bc:	2d10      	cmp	r5, #16
 801a4be:	9308      	str	r3, [sp, #32]
 801a4c0:	46a8      	mov	r8, r5
 801a4c2:	bfa8      	it	ge
 801a4c4:	f04f 0810 	movge.w	r8, #16
 801a4c8:	f7e6 f82c 	bl	8000524 <__aeabi_ui2d>
 801a4cc:	2d09      	cmp	r5, #9
 801a4ce:	4682      	mov	sl, r0
 801a4d0:	468b      	mov	fp, r1
 801a4d2:	dd13      	ble.n	801a4fc <_strtod_l+0x3e4>
 801a4d4:	4b79      	ldr	r3, [pc, #484]	; (801a6bc <_strtod_l+0x5a4>)
 801a4d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a4da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801a4de:	f7e6 f89b 	bl	8000618 <__aeabi_dmul>
 801a4e2:	4682      	mov	sl, r0
 801a4e4:	4648      	mov	r0, r9
 801a4e6:	468b      	mov	fp, r1
 801a4e8:	f7e6 f81c 	bl	8000524 <__aeabi_ui2d>
 801a4ec:	4602      	mov	r2, r0
 801a4ee:	460b      	mov	r3, r1
 801a4f0:	4650      	mov	r0, sl
 801a4f2:	4659      	mov	r1, fp
 801a4f4:	f7e5 feda 	bl	80002ac <__adddf3>
 801a4f8:	4682      	mov	sl, r0
 801a4fa:	468b      	mov	fp, r1
 801a4fc:	2d0f      	cmp	r5, #15
 801a4fe:	dc38      	bgt.n	801a572 <_strtod_l+0x45a>
 801a500:	9b08      	ldr	r3, [sp, #32]
 801a502:	2b00      	cmp	r3, #0
 801a504:	f43f ae4a 	beq.w	801a19c <_strtod_l+0x84>
 801a508:	dd24      	ble.n	801a554 <_strtod_l+0x43c>
 801a50a:	2b16      	cmp	r3, #22
 801a50c:	dc0b      	bgt.n	801a526 <_strtod_l+0x40e>
 801a50e:	4d6b      	ldr	r5, [pc, #428]	; (801a6bc <_strtod_l+0x5a4>)
 801a510:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801a514:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a518:	4652      	mov	r2, sl
 801a51a:	465b      	mov	r3, fp
 801a51c:	f7e6 f87c 	bl	8000618 <__aeabi_dmul>
 801a520:	4682      	mov	sl, r0
 801a522:	468b      	mov	fp, r1
 801a524:	e63a      	b.n	801a19c <_strtod_l+0x84>
 801a526:	9a08      	ldr	r2, [sp, #32]
 801a528:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801a52c:	4293      	cmp	r3, r2
 801a52e:	db20      	blt.n	801a572 <_strtod_l+0x45a>
 801a530:	4c62      	ldr	r4, [pc, #392]	; (801a6bc <_strtod_l+0x5a4>)
 801a532:	f1c5 050f 	rsb	r5, r5, #15
 801a536:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801a53a:	4652      	mov	r2, sl
 801a53c:	465b      	mov	r3, fp
 801a53e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a542:	f7e6 f869 	bl	8000618 <__aeabi_dmul>
 801a546:	9b08      	ldr	r3, [sp, #32]
 801a548:	1b5d      	subs	r5, r3, r5
 801a54a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801a54e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a552:	e7e3      	b.n	801a51c <_strtod_l+0x404>
 801a554:	9b08      	ldr	r3, [sp, #32]
 801a556:	3316      	adds	r3, #22
 801a558:	db0b      	blt.n	801a572 <_strtod_l+0x45a>
 801a55a:	9b07      	ldr	r3, [sp, #28]
 801a55c:	4a57      	ldr	r2, [pc, #348]	; (801a6bc <_strtod_l+0x5a4>)
 801a55e:	1b9e      	subs	r6, r3, r6
 801a560:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801a564:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a568:	4650      	mov	r0, sl
 801a56a:	4659      	mov	r1, fp
 801a56c:	f7e6 f97e 	bl	800086c <__aeabi_ddiv>
 801a570:	e7d6      	b.n	801a520 <_strtod_l+0x408>
 801a572:	9b08      	ldr	r3, [sp, #32]
 801a574:	eba5 0808 	sub.w	r8, r5, r8
 801a578:	4498      	add	r8, r3
 801a57a:	f1b8 0f00 	cmp.w	r8, #0
 801a57e:	dd71      	ble.n	801a664 <_strtod_l+0x54c>
 801a580:	f018 030f 	ands.w	r3, r8, #15
 801a584:	d00a      	beq.n	801a59c <_strtod_l+0x484>
 801a586:	494d      	ldr	r1, [pc, #308]	; (801a6bc <_strtod_l+0x5a4>)
 801a588:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a58c:	4652      	mov	r2, sl
 801a58e:	465b      	mov	r3, fp
 801a590:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a594:	f7e6 f840 	bl	8000618 <__aeabi_dmul>
 801a598:	4682      	mov	sl, r0
 801a59a:	468b      	mov	fp, r1
 801a59c:	f038 080f 	bics.w	r8, r8, #15
 801a5a0:	d04d      	beq.n	801a63e <_strtod_l+0x526>
 801a5a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801a5a6:	dd22      	ble.n	801a5ee <_strtod_l+0x4d6>
 801a5a8:	2500      	movs	r5, #0
 801a5aa:	462e      	mov	r6, r5
 801a5ac:	9509      	str	r5, [sp, #36]	; 0x24
 801a5ae:	9507      	str	r5, [sp, #28]
 801a5b0:	2322      	movs	r3, #34	; 0x22
 801a5b2:	f8df b110 	ldr.w	fp, [pc, #272]	; 801a6c4 <_strtod_l+0x5ac>
 801a5b6:	6023      	str	r3, [r4, #0]
 801a5b8:	f04f 0a00 	mov.w	sl, #0
 801a5bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	f43f adec 	beq.w	801a19c <_strtod_l+0x84>
 801a5c4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a5c6:	4620      	mov	r0, r4
 801a5c8:	f001 fc16 	bl	801bdf8 <_Bfree>
 801a5cc:	9907      	ldr	r1, [sp, #28]
 801a5ce:	4620      	mov	r0, r4
 801a5d0:	f001 fc12 	bl	801bdf8 <_Bfree>
 801a5d4:	4631      	mov	r1, r6
 801a5d6:	4620      	mov	r0, r4
 801a5d8:	f001 fc0e 	bl	801bdf8 <_Bfree>
 801a5dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a5de:	4620      	mov	r0, r4
 801a5e0:	f001 fc0a 	bl	801bdf8 <_Bfree>
 801a5e4:	4629      	mov	r1, r5
 801a5e6:	4620      	mov	r0, r4
 801a5e8:	f001 fc06 	bl	801bdf8 <_Bfree>
 801a5ec:	e5d6      	b.n	801a19c <_strtod_l+0x84>
 801a5ee:	2300      	movs	r3, #0
 801a5f0:	ea4f 1828 	mov.w	r8, r8, asr #4
 801a5f4:	4650      	mov	r0, sl
 801a5f6:	4659      	mov	r1, fp
 801a5f8:	4699      	mov	r9, r3
 801a5fa:	f1b8 0f01 	cmp.w	r8, #1
 801a5fe:	dc21      	bgt.n	801a644 <_strtod_l+0x52c>
 801a600:	b10b      	cbz	r3, 801a606 <_strtod_l+0x4ee>
 801a602:	4682      	mov	sl, r0
 801a604:	468b      	mov	fp, r1
 801a606:	4b2e      	ldr	r3, [pc, #184]	; (801a6c0 <_strtod_l+0x5a8>)
 801a608:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801a60c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801a610:	4652      	mov	r2, sl
 801a612:	465b      	mov	r3, fp
 801a614:	e9d9 0100 	ldrd	r0, r1, [r9]
 801a618:	f7e5 fffe 	bl	8000618 <__aeabi_dmul>
 801a61c:	4b29      	ldr	r3, [pc, #164]	; (801a6c4 <_strtod_l+0x5ac>)
 801a61e:	460a      	mov	r2, r1
 801a620:	400b      	ands	r3, r1
 801a622:	4929      	ldr	r1, [pc, #164]	; (801a6c8 <_strtod_l+0x5b0>)
 801a624:	428b      	cmp	r3, r1
 801a626:	4682      	mov	sl, r0
 801a628:	d8be      	bhi.n	801a5a8 <_strtod_l+0x490>
 801a62a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801a62e:	428b      	cmp	r3, r1
 801a630:	bf86      	itte	hi
 801a632:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801a6cc <_strtod_l+0x5b4>
 801a636:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801a63a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801a63e:	2300      	movs	r3, #0
 801a640:	9304      	str	r3, [sp, #16]
 801a642:	e081      	b.n	801a748 <_strtod_l+0x630>
 801a644:	f018 0f01 	tst.w	r8, #1
 801a648:	d007      	beq.n	801a65a <_strtod_l+0x542>
 801a64a:	4b1d      	ldr	r3, [pc, #116]	; (801a6c0 <_strtod_l+0x5a8>)
 801a64c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801a650:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a654:	f7e5 ffe0 	bl	8000618 <__aeabi_dmul>
 801a658:	2301      	movs	r3, #1
 801a65a:	f109 0901 	add.w	r9, r9, #1
 801a65e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801a662:	e7ca      	b.n	801a5fa <_strtod_l+0x4e2>
 801a664:	d0eb      	beq.n	801a63e <_strtod_l+0x526>
 801a666:	f1c8 0800 	rsb	r8, r8, #0
 801a66a:	f018 020f 	ands.w	r2, r8, #15
 801a66e:	d00a      	beq.n	801a686 <_strtod_l+0x56e>
 801a670:	4b12      	ldr	r3, [pc, #72]	; (801a6bc <_strtod_l+0x5a4>)
 801a672:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a676:	4650      	mov	r0, sl
 801a678:	4659      	mov	r1, fp
 801a67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a67e:	f7e6 f8f5 	bl	800086c <__aeabi_ddiv>
 801a682:	4682      	mov	sl, r0
 801a684:	468b      	mov	fp, r1
 801a686:	ea5f 1828 	movs.w	r8, r8, asr #4
 801a68a:	d0d8      	beq.n	801a63e <_strtod_l+0x526>
 801a68c:	f1b8 0f1f 	cmp.w	r8, #31
 801a690:	dd1e      	ble.n	801a6d0 <_strtod_l+0x5b8>
 801a692:	2500      	movs	r5, #0
 801a694:	462e      	mov	r6, r5
 801a696:	9509      	str	r5, [sp, #36]	; 0x24
 801a698:	9507      	str	r5, [sp, #28]
 801a69a:	2322      	movs	r3, #34	; 0x22
 801a69c:	f04f 0a00 	mov.w	sl, #0
 801a6a0:	f04f 0b00 	mov.w	fp, #0
 801a6a4:	6023      	str	r3, [r4, #0]
 801a6a6:	e789      	b.n	801a5bc <_strtod_l+0x4a4>
 801a6a8:	0801f82c 	.word	0x0801f82c
 801a6ac:	0801f844 	.word	0x0801f844
 801a6b0:	0801f823 	.word	0x0801f823
 801a6b4:	0801f826 	.word	0x0801f826
 801a6b8:	0801f8bb 	.word	0x0801f8bb
 801a6bc:	0801fa38 	.word	0x0801fa38
 801a6c0:	0801fa10 	.word	0x0801fa10
 801a6c4:	7ff00000 	.word	0x7ff00000
 801a6c8:	7ca00000 	.word	0x7ca00000
 801a6cc:	7fefffff 	.word	0x7fefffff
 801a6d0:	f018 0310 	ands.w	r3, r8, #16
 801a6d4:	bf18      	it	ne
 801a6d6:	236a      	movne	r3, #106	; 0x6a
 801a6d8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801aa90 <_strtod_l+0x978>
 801a6dc:	9304      	str	r3, [sp, #16]
 801a6de:	4650      	mov	r0, sl
 801a6e0:	4659      	mov	r1, fp
 801a6e2:	2300      	movs	r3, #0
 801a6e4:	f018 0f01 	tst.w	r8, #1
 801a6e8:	d004      	beq.n	801a6f4 <_strtod_l+0x5dc>
 801a6ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 801a6ee:	f7e5 ff93 	bl	8000618 <__aeabi_dmul>
 801a6f2:	2301      	movs	r3, #1
 801a6f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801a6f8:	f109 0908 	add.w	r9, r9, #8
 801a6fc:	d1f2      	bne.n	801a6e4 <_strtod_l+0x5cc>
 801a6fe:	b10b      	cbz	r3, 801a704 <_strtod_l+0x5ec>
 801a700:	4682      	mov	sl, r0
 801a702:	468b      	mov	fp, r1
 801a704:	9b04      	ldr	r3, [sp, #16]
 801a706:	b1bb      	cbz	r3, 801a738 <_strtod_l+0x620>
 801a708:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801a70c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a710:	2b00      	cmp	r3, #0
 801a712:	4659      	mov	r1, fp
 801a714:	dd10      	ble.n	801a738 <_strtod_l+0x620>
 801a716:	2b1f      	cmp	r3, #31
 801a718:	f340 8128 	ble.w	801a96c <_strtod_l+0x854>
 801a71c:	2b34      	cmp	r3, #52	; 0x34
 801a71e:	bfde      	ittt	le
 801a720:	3b20      	suble	r3, #32
 801a722:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 801a726:	fa02 f303 	lslle.w	r3, r2, r3
 801a72a:	f04f 0a00 	mov.w	sl, #0
 801a72e:	bfcc      	ite	gt
 801a730:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801a734:	ea03 0b01 	andle.w	fp, r3, r1
 801a738:	2200      	movs	r2, #0
 801a73a:	2300      	movs	r3, #0
 801a73c:	4650      	mov	r0, sl
 801a73e:	4659      	mov	r1, fp
 801a740:	f7e6 f9d2 	bl	8000ae8 <__aeabi_dcmpeq>
 801a744:	2800      	cmp	r0, #0
 801a746:	d1a4      	bne.n	801a692 <_strtod_l+0x57a>
 801a748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a74a:	9300      	str	r3, [sp, #0]
 801a74c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a74e:	462b      	mov	r3, r5
 801a750:	463a      	mov	r2, r7
 801a752:	4620      	mov	r0, r4
 801a754:	f001 fbbc 	bl	801bed0 <__s2b>
 801a758:	9009      	str	r0, [sp, #36]	; 0x24
 801a75a:	2800      	cmp	r0, #0
 801a75c:	f43f af24 	beq.w	801a5a8 <_strtod_l+0x490>
 801a760:	9b07      	ldr	r3, [sp, #28]
 801a762:	1b9e      	subs	r6, r3, r6
 801a764:	9b08      	ldr	r3, [sp, #32]
 801a766:	2b00      	cmp	r3, #0
 801a768:	bfb4      	ite	lt
 801a76a:	4633      	movlt	r3, r6
 801a76c:	2300      	movge	r3, #0
 801a76e:	9310      	str	r3, [sp, #64]	; 0x40
 801a770:	9b08      	ldr	r3, [sp, #32]
 801a772:	2500      	movs	r5, #0
 801a774:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a778:	9318      	str	r3, [sp, #96]	; 0x60
 801a77a:	462e      	mov	r6, r5
 801a77c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a77e:	4620      	mov	r0, r4
 801a780:	6859      	ldr	r1, [r3, #4]
 801a782:	f001 faf9 	bl	801bd78 <_Balloc>
 801a786:	9007      	str	r0, [sp, #28]
 801a788:	2800      	cmp	r0, #0
 801a78a:	f43f af11 	beq.w	801a5b0 <_strtod_l+0x498>
 801a78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a790:	691a      	ldr	r2, [r3, #16]
 801a792:	3202      	adds	r2, #2
 801a794:	f103 010c 	add.w	r1, r3, #12
 801a798:	0092      	lsls	r2, r2, #2
 801a79a:	300c      	adds	r0, #12
 801a79c:	f7fe fff2 	bl	8019784 <memcpy>
 801a7a0:	ec4b ab10 	vmov	d0, sl, fp
 801a7a4:	aa20      	add	r2, sp, #128	; 0x80
 801a7a6:	a91f      	add	r1, sp, #124	; 0x7c
 801a7a8:	4620      	mov	r0, r4
 801a7aa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801a7ae:	f001 fecb 	bl	801c548 <__d2b>
 801a7b2:	901e      	str	r0, [sp, #120]	; 0x78
 801a7b4:	2800      	cmp	r0, #0
 801a7b6:	f43f aefb 	beq.w	801a5b0 <_strtod_l+0x498>
 801a7ba:	2101      	movs	r1, #1
 801a7bc:	4620      	mov	r0, r4
 801a7be:	f001 fc21 	bl	801c004 <__i2b>
 801a7c2:	4606      	mov	r6, r0
 801a7c4:	2800      	cmp	r0, #0
 801a7c6:	f43f aef3 	beq.w	801a5b0 <_strtod_l+0x498>
 801a7ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801a7cc:	9904      	ldr	r1, [sp, #16]
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	bfab      	itete	ge
 801a7d2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801a7d4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801a7d6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801a7d8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801a7dc:	bfac      	ite	ge
 801a7de:	eb03 0902 	addge.w	r9, r3, r2
 801a7e2:	1ad7      	sublt	r7, r2, r3
 801a7e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a7e6:	eba3 0801 	sub.w	r8, r3, r1
 801a7ea:	4490      	add	r8, r2
 801a7ec:	4ba3      	ldr	r3, [pc, #652]	; (801aa7c <_strtod_l+0x964>)
 801a7ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801a7f2:	4598      	cmp	r8, r3
 801a7f4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a7f8:	f280 80cc 	bge.w	801a994 <_strtod_l+0x87c>
 801a7fc:	eba3 0308 	sub.w	r3, r3, r8
 801a800:	2b1f      	cmp	r3, #31
 801a802:	eba2 0203 	sub.w	r2, r2, r3
 801a806:	f04f 0101 	mov.w	r1, #1
 801a80a:	f300 80b6 	bgt.w	801a97a <_strtod_l+0x862>
 801a80e:	fa01 f303 	lsl.w	r3, r1, r3
 801a812:	9311      	str	r3, [sp, #68]	; 0x44
 801a814:	2300      	movs	r3, #0
 801a816:	930c      	str	r3, [sp, #48]	; 0x30
 801a818:	eb09 0802 	add.w	r8, r9, r2
 801a81c:	9b04      	ldr	r3, [sp, #16]
 801a81e:	45c1      	cmp	r9, r8
 801a820:	4417      	add	r7, r2
 801a822:	441f      	add	r7, r3
 801a824:	464b      	mov	r3, r9
 801a826:	bfa8      	it	ge
 801a828:	4643      	movge	r3, r8
 801a82a:	42bb      	cmp	r3, r7
 801a82c:	bfa8      	it	ge
 801a82e:	463b      	movge	r3, r7
 801a830:	2b00      	cmp	r3, #0
 801a832:	bfc2      	ittt	gt
 801a834:	eba8 0803 	subgt.w	r8, r8, r3
 801a838:	1aff      	subgt	r7, r7, r3
 801a83a:	eba9 0903 	subgt.w	r9, r9, r3
 801a83e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a840:	2b00      	cmp	r3, #0
 801a842:	dd17      	ble.n	801a874 <_strtod_l+0x75c>
 801a844:	4631      	mov	r1, r6
 801a846:	461a      	mov	r2, r3
 801a848:	4620      	mov	r0, r4
 801a84a:	f001 fc97 	bl	801c17c <__pow5mult>
 801a84e:	4606      	mov	r6, r0
 801a850:	2800      	cmp	r0, #0
 801a852:	f43f aead 	beq.w	801a5b0 <_strtod_l+0x498>
 801a856:	4601      	mov	r1, r0
 801a858:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a85a:	4620      	mov	r0, r4
 801a85c:	f001 fbe8 	bl	801c030 <__multiply>
 801a860:	900f      	str	r0, [sp, #60]	; 0x3c
 801a862:	2800      	cmp	r0, #0
 801a864:	f43f aea4 	beq.w	801a5b0 <_strtod_l+0x498>
 801a868:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a86a:	4620      	mov	r0, r4
 801a86c:	f001 fac4 	bl	801bdf8 <_Bfree>
 801a870:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a872:	931e      	str	r3, [sp, #120]	; 0x78
 801a874:	f1b8 0f00 	cmp.w	r8, #0
 801a878:	f300 8091 	bgt.w	801a99e <_strtod_l+0x886>
 801a87c:	9b08      	ldr	r3, [sp, #32]
 801a87e:	2b00      	cmp	r3, #0
 801a880:	dd08      	ble.n	801a894 <_strtod_l+0x77c>
 801a882:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a884:	9907      	ldr	r1, [sp, #28]
 801a886:	4620      	mov	r0, r4
 801a888:	f001 fc78 	bl	801c17c <__pow5mult>
 801a88c:	9007      	str	r0, [sp, #28]
 801a88e:	2800      	cmp	r0, #0
 801a890:	f43f ae8e 	beq.w	801a5b0 <_strtod_l+0x498>
 801a894:	2f00      	cmp	r7, #0
 801a896:	dd08      	ble.n	801a8aa <_strtod_l+0x792>
 801a898:	9907      	ldr	r1, [sp, #28]
 801a89a:	463a      	mov	r2, r7
 801a89c:	4620      	mov	r0, r4
 801a89e:	f001 fcc7 	bl	801c230 <__lshift>
 801a8a2:	9007      	str	r0, [sp, #28]
 801a8a4:	2800      	cmp	r0, #0
 801a8a6:	f43f ae83 	beq.w	801a5b0 <_strtod_l+0x498>
 801a8aa:	f1b9 0f00 	cmp.w	r9, #0
 801a8ae:	dd08      	ble.n	801a8c2 <_strtod_l+0x7aa>
 801a8b0:	4631      	mov	r1, r6
 801a8b2:	464a      	mov	r2, r9
 801a8b4:	4620      	mov	r0, r4
 801a8b6:	f001 fcbb 	bl	801c230 <__lshift>
 801a8ba:	4606      	mov	r6, r0
 801a8bc:	2800      	cmp	r0, #0
 801a8be:	f43f ae77 	beq.w	801a5b0 <_strtod_l+0x498>
 801a8c2:	9a07      	ldr	r2, [sp, #28]
 801a8c4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a8c6:	4620      	mov	r0, r4
 801a8c8:	f001 fd3a 	bl	801c340 <__mdiff>
 801a8cc:	4605      	mov	r5, r0
 801a8ce:	2800      	cmp	r0, #0
 801a8d0:	f43f ae6e 	beq.w	801a5b0 <_strtod_l+0x498>
 801a8d4:	68c3      	ldr	r3, [r0, #12]
 801a8d6:	930f      	str	r3, [sp, #60]	; 0x3c
 801a8d8:	2300      	movs	r3, #0
 801a8da:	60c3      	str	r3, [r0, #12]
 801a8dc:	4631      	mov	r1, r6
 801a8de:	f001 fd13 	bl	801c308 <__mcmp>
 801a8e2:	2800      	cmp	r0, #0
 801a8e4:	da65      	bge.n	801a9b2 <_strtod_l+0x89a>
 801a8e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a8e8:	ea53 030a 	orrs.w	r3, r3, sl
 801a8ec:	f040 8087 	bne.w	801a9fe <_strtod_l+0x8e6>
 801a8f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	f040 8082 	bne.w	801a9fe <_strtod_l+0x8e6>
 801a8fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a8fe:	0d1b      	lsrs	r3, r3, #20
 801a900:	051b      	lsls	r3, r3, #20
 801a902:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801a906:	d97a      	bls.n	801a9fe <_strtod_l+0x8e6>
 801a908:	696b      	ldr	r3, [r5, #20]
 801a90a:	b913      	cbnz	r3, 801a912 <_strtod_l+0x7fa>
 801a90c:	692b      	ldr	r3, [r5, #16]
 801a90e:	2b01      	cmp	r3, #1
 801a910:	dd75      	ble.n	801a9fe <_strtod_l+0x8e6>
 801a912:	4629      	mov	r1, r5
 801a914:	2201      	movs	r2, #1
 801a916:	4620      	mov	r0, r4
 801a918:	f001 fc8a 	bl	801c230 <__lshift>
 801a91c:	4631      	mov	r1, r6
 801a91e:	4605      	mov	r5, r0
 801a920:	f001 fcf2 	bl	801c308 <__mcmp>
 801a924:	2800      	cmp	r0, #0
 801a926:	dd6a      	ble.n	801a9fe <_strtod_l+0x8e6>
 801a928:	9904      	ldr	r1, [sp, #16]
 801a92a:	4a55      	ldr	r2, [pc, #340]	; (801aa80 <_strtod_l+0x968>)
 801a92c:	465b      	mov	r3, fp
 801a92e:	2900      	cmp	r1, #0
 801a930:	f000 8085 	beq.w	801aa3e <_strtod_l+0x926>
 801a934:	ea02 010b 	and.w	r1, r2, fp
 801a938:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801a93c:	dc7f      	bgt.n	801aa3e <_strtod_l+0x926>
 801a93e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801a942:	f77f aeaa 	ble.w	801a69a <_strtod_l+0x582>
 801a946:	4a4f      	ldr	r2, [pc, #316]	; (801aa84 <_strtod_l+0x96c>)
 801a948:	2300      	movs	r3, #0
 801a94a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801a94e:	4650      	mov	r0, sl
 801a950:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801a954:	4659      	mov	r1, fp
 801a956:	f7e5 fe5f 	bl	8000618 <__aeabi_dmul>
 801a95a:	460b      	mov	r3, r1
 801a95c:	4303      	orrs	r3, r0
 801a95e:	bf08      	it	eq
 801a960:	2322      	moveq	r3, #34	; 0x22
 801a962:	4682      	mov	sl, r0
 801a964:	468b      	mov	fp, r1
 801a966:	bf08      	it	eq
 801a968:	6023      	streq	r3, [r4, #0]
 801a96a:	e62b      	b.n	801a5c4 <_strtod_l+0x4ac>
 801a96c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a970:	fa02 f303 	lsl.w	r3, r2, r3
 801a974:	ea03 0a0a 	and.w	sl, r3, sl
 801a978:	e6de      	b.n	801a738 <_strtod_l+0x620>
 801a97a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801a97e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801a982:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801a986:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801a98a:	fa01 f308 	lsl.w	r3, r1, r8
 801a98e:	930c      	str	r3, [sp, #48]	; 0x30
 801a990:	9111      	str	r1, [sp, #68]	; 0x44
 801a992:	e741      	b.n	801a818 <_strtod_l+0x700>
 801a994:	2300      	movs	r3, #0
 801a996:	930c      	str	r3, [sp, #48]	; 0x30
 801a998:	2301      	movs	r3, #1
 801a99a:	9311      	str	r3, [sp, #68]	; 0x44
 801a99c:	e73c      	b.n	801a818 <_strtod_l+0x700>
 801a99e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a9a0:	4642      	mov	r2, r8
 801a9a2:	4620      	mov	r0, r4
 801a9a4:	f001 fc44 	bl	801c230 <__lshift>
 801a9a8:	901e      	str	r0, [sp, #120]	; 0x78
 801a9aa:	2800      	cmp	r0, #0
 801a9ac:	f47f af66 	bne.w	801a87c <_strtod_l+0x764>
 801a9b0:	e5fe      	b.n	801a5b0 <_strtod_l+0x498>
 801a9b2:	465f      	mov	r7, fp
 801a9b4:	d16e      	bne.n	801aa94 <_strtod_l+0x97c>
 801a9b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a9b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a9bc:	b342      	cbz	r2, 801aa10 <_strtod_l+0x8f8>
 801a9be:	4a32      	ldr	r2, [pc, #200]	; (801aa88 <_strtod_l+0x970>)
 801a9c0:	4293      	cmp	r3, r2
 801a9c2:	d128      	bne.n	801aa16 <_strtod_l+0x8fe>
 801a9c4:	9b04      	ldr	r3, [sp, #16]
 801a9c6:	4650      	mov	r0, sl
 801a9c8:	b1eb      	cbz	r3, 801aa06 <_strtod_l+0x8ee>
 801a9ca:	4a2d      	ldr	r2, [pc, #180]	; (801aa80 <_strtod_l+0x968>)
 801a9cc:	403a      	ands	r2, r7
 801a9ce:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801a9d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801a9d6:	d819      	bhi.n	801aa0c <_strtod_l+0x8f4>
 801a9d8:	0d12      	lsrs	r2, r2, #20
 801a9da:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801a9de:	fa01 f303 	lsl.w	r3, r1, r3
 801a9e2:	4298      	cmp	r0, r3
 801a9e4:	d117      	bne.n	801aa16 <_strtod_l+0x8fe>
 801a9e6:	4b29      	ldr	r3, [pc, #164]	; (801aa8c <_strtod_l+0x974>)
 801a9e8:	429f      	cmp	r7, r3
 801a9ea:	d102      	bne.n	801a9f2 <_strtod_l+0x8da>
 801a9ec:	3001      	adds	r0, #1
 801a9ee:	f43f addf 	beq.w	801a5b0 <_strtod_l+0x498>
 801a9f2:	4b23      	ldr	r3, [pc, #140]	; (801aa80 <_strtod_l+0x968>)
 801a9f4:	403b      	ands	r3, r7
 801a9f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801a9fa:	f04f 0a00 	mov.w	sl, #0
 801a9fe:	9b04      	ldr	r3, [sp, #16]
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	d1a0      	bne.n	801a946 <_strtod_l+0x82e>
 801aa04:	e5de      	b.n	801a5c4 <_strtod_l+0x4ac>
 801aa06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aa0a:	e7ea      	b.n	801a9e2 <_strtod_l+0x8ca>
 801aa0c:	460b      	mov	r3, r1
 801aa0e:	e7e8      	b.n	801a9e2 <_strtod_l+0x8ca>
 801aa10:	ea53 030a 	orrs.w	r3, r3, sl
 801aa14:	d088      	beq.n	801a928 <_strtod_l+0x810>
 801aa16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aa18:	b1db      	cbz	r3, 801aa52 <_strtod_l+0x93a>
 801aa1a:	423b      	tst	r3, r7
 801aa1c:	d0ef      	beq.n	801a9fe <_strtod_l+0x8e6>
 801aa1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aa20:	9a04      	ldr	r2, [sp, #16]
 801aa22:	4650      	mov	r0, sl
 801aa24:	4659      	mov	r1, fp
 801aa26:	b1c3      	cbz	r3, 801aa5a <_strtod_l+0x942>
 801aa28:	f7ff fb5a 	bl	801a0e0 <sulp>
 801aa2c:	4602      	mov	r2, r0
 801aa2e:	460b      	mov	r3, r1
 801aa30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801aa34:	f7e5 fc3a 	bl	80002ac <__adddf3>
 801aa38:	4682      	mov	sl, r0
 801aa3a:	468b      	mov	fp, r1
 801aa3c:	e7df      	b.n	801a9fe <_strtod_l+0x8e6>
 801aa3e:	4013      	ands	r3, r2
 801aa40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801aa44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801aa48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801aa4c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801aa50:	e7d5      	b.n	801a9fe <_strtod_l+0x8e6>
 801aa52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801aa54:	ea13 0f0a 	tst.w	r3, sl
 801aa58:	e7e0      	b.n	801aa1c <_strtod_l+0x904>
 801aa5a:	f7ff fb41 	bl	801a0e0 <sulp>
 801aa5e:	4602      	mov	r2, r0
 801aa60:	460b      	mov	r3, r1
 801aa62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801aa66:	f7e5 fc1f 	bl	80002a8 <__aeabi_dsub>
 801aa6a:	2200      	movs	r2, #0
 801aa6c:	2300      	movs	r3, #0
 801aa6e:	4682      	mov	sl, r0
 801aa70:	468b      	mov	fp, r1
 801aa72:	f7e6 f839 	bl	8000ae8 <__aeabi_dcmpeq>
 801aa76:	2800      	cmp	r0, #0
 801aa78:	d0c1      	beq.n	801a9fe <_strtod_l+0x8e6>
 801aa7a:	e60e      	b.n	801a69a <_strtod_l+0x582>
 801aa7c:	fffffc02 	.word	0xfffffc02
 801aa80:	7ff00000 	.word	0x7ff00000
 801aa84:	39500000 	.word	0x39500000
 801aa88:	000fffff 	.word	0x000fffff
 801aa8c:	7fefffff 	.word	0x7fefffff
 801aa90:	0801f858 	.word	0x0801f858
 801aa94:	4631      	mov	r1, r6
 801aa96:	4628      	mov	r0, r5
 801aa98:	f001 fdb2 	bl	801c600 <__ratio>
 801aa9c:	ec59 8b10 	vmov	r8, r9, d0
 801aaa0:	ee10 0a10 	vmov	r0, s0
 801aaa4:	2200      	movs	r2, #0
 801aaa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801aaaa:	4649      	mov	r1, r9
 801aaac:	f7e6 f830 	bl	8000b10 <__aeabi_dcmple>
 801aab0:	2800      	cmp	r0, #0
 801aab2:	d07c      	beq.n	801abae <_strtod_l+0xa96>
 801aab4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d04c      	beq.n	801ab54 <_strtod_l+0xa3c>
 801aaba:	4b95      	ldr	r3, [pc, #596]	; (801ad10 <_strtod_l+0xbf8>)
 801aabc:	2200      	movs	r2, #0
 801aabe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801aac2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801ad10 <_strtod_l+0xbf8>
 801aac6:	f04f 0800 	mov.w	r8, #0
 801aaca:	4b92      	ldr	r3, [pc, #584]	; (801ad14 <_strtod_l+0xbfc>)
 801aacc:	403b      	ands	r3, r7
 801aace:	9311      	str	r3, [sp, #68]	; 0x44
 801aad0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801aad2:	4b91      	ldr	r3, [pc, #580]	; (801ad18 <_strtod_l+0xc00>)
 801aad4:	429a      	cmp	r2, r3
 801aad6:	f040 80b2 	bne.w	801ac3e <_strtod_l+0xb26>
 801aada:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801aade:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801aae2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801aae6:	ec4b ab10 	vmov	d0, sl, fp
 801aaea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801aaee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801aaf2:	f001 fcad 	bl	801c450 <__ulp>
 801aaf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801aafa:	ec53 2b10 	vmov	r2, r3, d0
 801aafe:	f7e5 fd8b 	bl	8000618 <__aeabi_dmul>
 801ab02:	4652      	mov	r2, sl
 801ab04:	465b      	mov	r3, fp
 801ab06:	f7e5 fbd1 	bl	80002ac <__adddf3>
 801ab0a:	460b      	mov	r3, r1
 801ab0c:	4981      	ldr	r1, [pc, #516]	; (801ad14 <_strtod_l+0xbfc>)
 801ab0e:	4a83      	ldr	r2, [pc, #524]	; (801ad1c <_strtod_l+0xc04>)
 801ab10:	4019      	ands	r1, r3
 801ab12:	4291      	cmp	r1, r2
 801ab14:	4682      	mov	sl, r0
 801ab16:	d95e      	bls.n	801abd6 <_strtod_l+0xabe>
 801ab18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ab1a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801ab1e:	4293      	cmp	r3, r2
 801ab20:	d103      	bne.n	801ab2a <_strtod_l+0xa12>
 801ab22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab24:	3301      	adds	r3, #1
 801ab26:	f43f ad43 	beq.w	801a5b0 <_strtod_l+0x498>
 801ab2a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801ad28 <_strtod_l+0xc10>
 801ab2e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801ab32:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ab34:	4620      	mov	r0, r4
 801ab36:	f001 f95f 	bl	801bdf8 <_Bfree>
 801ab3a:	9907      	ldr	r1, [sp, #28]
 801ab3c:	4620      	mov	r0, r4
 801ab3e:	f001 f95b 	bl	801bdf8 <_Bfree>
 801ab42:	4631      	mov	r1, r6
 801ab44:	4620      	mov	r0, r4
 801ab46:	f001 f957 	bl	801bdf8 <_Bfree>
 801ab4a:	4629      	mov	r1, r5
 801ab4c:	4620      	mov	r0, r4
 801ab4e:	f001 f953 	bl	801bdf8 <_Bfree>
 801ab52:	e613      	b.n	801a77c <_strtod_l+0x664>
 801ab54:	f1ba 0f00 	cmp.w	sl, #0
 801ab58:	d11b      	bne.n	801ab92 <_strtod_l+0xa7a>
 801ab5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ab5e:	b9f3      	cbnz	r3, 801ab9e <_strtod_l+0xa86>
 801ab60:	4b6b      	ldr	r3, [pc, #428]	; (801ad10 <_strtod_l+0xbf8>)
 801ab62:	2200      	movs	r2, #0
 801ab64:	4640      	mov	r0, r8
 801ab66:	4649      	mov	r1, r9
 801ab68:	f7e5 ffc8 	bl	8000afc <__aeabi_dcmplt>
 801ab6c:	b9d0      	cbnz	r0, 801aba4 <_strtod_l+0xa8c>
 801ab6e:	4640      	mov	r0, r8
 801ab70:	4649      	mov	r1, r9
 801ab72:	4b6b      	ldr	r3, [pc, #428]	; (801ad20 <_strtod_l+0xc08>)
 801ab74:	2200      	movs	r2, #0
 801ab76:	f7e5 fd4f 	bl	8000618 <__aeabi_dmul>
 801ab7a:	4680      	mov	r8, r0
 801ab7c:	4689      	mov	r9, r1
 801ab7e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801ab82:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801ab86:	931b      	str	r3, [sp, #108]	; 0x6c
 801ab88:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801ab8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801ab90:	e79b      	b.n	801aaca <_strtod_l+0x9b2>
 801ab92:	f1ba 0f01 	cmp.w	sl, #1
 801ab96:	d102      	bne.n	801ab9e <_strtod_l+0xa86>
 801ab98:	2f00      	cmp	r7, #0
 801ab9a:	f43f ad7e 	beq.w	801a69a <_strtod_l+0x582>
 801ab9e:	4b61      	ldr	r3, [pc, #388]	; (801ad24 <_strtod_l+0xc0c>)
 801aba0:	2200      	movs	r2, #0
 801aba2:	e78c      	b.n	801aabe <_strtod_l+0x9a6>
 801aba4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801ad20 <_strtod_l+0xc08>
 801aba8:	f04f 0800 	mov.w	r8, #0
 801abac:	e7e7      	b.n	801ab7e <_strtod_l+0xa66>
 801abae:	4b5c      	ldr	r3, [pc, #368]	; (801ad20 <_strtod_l+0xc08>)
 801abb0:	4640      	mov	r0, r8
 801abb2:	4649      	mov	r1, r9
 801abb4:	2200      	movs	r2, #0
 801abb6:	f7e5 fd2f 	bl	8000618 <__aeabi_dmul>
 801abba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801abbc:	4680      	mov	r8, r0
 801abbe:	4689      	mov	r9, r1
 801abc0:	b933      	cbnz	r3, 801abd0 <_strtod_l+0xab8>
 801abc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801abc6:	9012      	str	r0, [sp, #72]	; 0x48
 801abc8:	9313      	str	r3, [sp, #76]	; 0x4c
 801abca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801abce:	e7dd      	b.n	801ab8c <_strtod_l+0xa74>
 801abd0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801abd4:	e7f9      	b.n	801abca <_strtod_l+0xab2>
 801abd6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801abda:	9b04      	ldr	r3, [sp, #16]
 801abdc:	2b00      	cmp	r3, #0
 801abde:	d1a8      	bne.n	801ab32 <_strtod_l+0xa1a>
 801abe0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801abe4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801abe6:	0d1b      	lsrs	r3, r3, #20
 801abe8:	051b      	lsls	r3, r3, #20
 801abea:	429a      	cmp	r2, r3
 801abec:	d1a1      	bne.n	801ab32 <_strtod_l+0xa1a>
 801abee:	4640      	mov	r0, r8
 801abf0:	4649      	mov	r1, r9
 801abf2:	f7e6 f8c1 	bl	8000d78 <__aeabi_d2lz>
 801abf6:	f7e5 fce1 	bl	80005bc <__aeabi_l2d>
 801abfa:	4602      	mov	r2, r0
 801abfc:	460b      	mov	r3, r1
 801abfe:	4640      	mov	r0, r8
 801ac00:	4649      	mov	r1, r9
 801ac02:	f7e5 fb51 	bl	80002a8 <__aeabi_dsub>
 801ac06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ac08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ac0c:	ea43 030a 	orr.w	r3, r3, sl
 801ac10:	4313      	orrs	r3, r2
 801ac12:	4680      	mov	r8, r0
 801ac14:	4689      	mov	r9, r1
 801ac16:	d053      	beq.n	801acc0 <_strtod_l+0xba8>
 801ac18:	a335      	add	r3, pc, #212	; (adr r3, 801acf0 <_strtod_l+0xbd8>)
 801ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac1e:	f7e5 ff6d 	bl	8000afc <__aeabi_dcmplt>
 801ac22:	2800      	cmp	r0, #0
 801ac24:	f47f acce 	bne.w	801a5c4 <_strtod_l+0x4ac>
 801ac28:	a333      	add	r3, pc, #204	; (adr r3, 801acf8 <_strtod_l+0xbe0>)
 801ac2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac2e:	4640      	mov	r0, r8
 801ac30:	4649      	mov	r1, r9
 801ac32:	f7e5 ff81 	bl	8000b38 <__aeabi_dcmpgt>
 801ac36:	2800      	cmp	r0, #0
 801ac38:	f43f af7b 	beq.w	801ab32 <_strtod_l+0xa1a>
 801ac3c:	e4c2      	b.n	801a5c4 <_strtod_l+0x4ac>
 801ac3e:	9b04      	ldr	r3, [sp, #16]
 801ac40:	b333      	cbz	r3, 801ac90 <_strtod_l+0xb78>
 801ac42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ac44:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801ac48:	d822      	bhi.n	801ac90 <_strtod_l+0xb78>
 801ac4a:	a32d      	add	r3, pc, #180	; (adr r3, 801ad00 <_strtod_l+0xbe8>)
 801ac4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac50:	4640      	mov	r0, r8
 801ac52:	4649      	mov	r1, r9
 801ac54:	f7e5 ff5c 	bl	8000b10 <__aeabi_dcmple>
 801ac58:	b1a0      	cbz	r0, 801ac84 <_strtod_l+0xb6c>
 801ac5a:	4649      	mov	r1, r9
 801ac5c:	4640      	mov	r0, r8
 801ac5e:	f7e5 ffb3 	bl	8000bc8 <__aeabi_d2uiz>
 801ac62:	2801      	cmp	r0, #1
 801ac64:	bf38      	it	cc
 801ac66:	2001      	movcc	r0, #1
 801ac68:	f7e5 fc5c 	bl	8000524 <__aeabi_ui2d>
 801ac6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ac6e:	4680      	mov	r8, r0
 801ac70:	4689      	mov	r9, r1
 801ac72:	bb13      	cbnz	r3, 801acba <_strtod_l+0xba2>
 801ac74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ac78:	9014      	str	r0, [sp, #80]	; 0x50
 801ac7a:	9315      	str	r3, [sp, #84]	; 0x54
 801ac7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801ac80:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801ac84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ac88:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801ac8c:	1a9b      	subs	r3, r3, r2
 801ac8e:	930d      	str	r3, [sp, #52]	; 0x34
 801ac90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ac94:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801ac98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801ac9c:	f001 fbd8 	bl	801c450 <__ulp>
 801aca0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801aca4:	ec53 2b10 	vmov	r2, r3, d0
 801aca8:	f7e5 fcb6 	bl	8000618 <__aeabi_dmul>
 801acac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801acb0:	f7e5 fafc 	bl	80002ac <__adddf3>
 801acb4:	4682      	mov	sl, r0
 801acb6:	468b      	mov	fp, r1
 801acb8:	e78f      	b.n	801abda <_strtod_l+0xac2>
 801acba:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801acbe:	e7dd      	b.n	801ac7c <_strtod_l+0xb64>
 801acc0:	a311      	add	r3, pc, #68	; (adr r3, 801ad08 <_strtod_l+0xbf0>)
 801acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acc6:	f7e5 ff19 	bl	8000afc <__aeabi_dcmplt>
 801acca:	e7b4      	b.n	801ac36 <_strtod_l+0xb1e>
 801accc:	2300      	movs	r3, #0
 801acce:	930e      	str	r3, [sp, #56]	; 0x38
 801acd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801acd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801acd4:	6013      	str	r3, [r2, #0]
 801acd6:	f7ff ba65 	b.w	801a1a4 <_strtod_l+0x8c>
 801acda:	2b65      	cmp	r3, #101	; 0x65
 801acdc:	f43f ab5d 	beq.w	801a39a <_strtod_l+0x282>
 801ace0:	2b45      	cmp	r3, #69	; 0x45
 801ace2:	f43f ab5a 	beq.w	801a39a <_strtod_l+0x282>
 801ace6:	2201      	movs	r2, #1
 801ace8:	f7ff bb92 	b.w	801a410 <_strtod_l+0x2f8>
 801acec:	f3af 8000 	nop.w
 801acf0:	94a03595 	.word	0x94a03595
 801acf4:	3fdfffff 	.word	0x3fdfffff
 801acf8:	35afe535 	.word	0x35afe535
 801acfc:	3fe00000 	.word	0x3fe00000
 801ad00:	ffc00000 	.word	0xffc00000
 801ad04:	41dfffff 	.word	0x41dfffff
 801ad08:	94a03595 	.word	0x94a03595
 801ad0c:	3fcfffff 	.word	0x3fcfffff
 801ad10:	3ff00000 	.word	0x3ff00000
 801ad14:	7ff00000 	.word	0x7ff00000
 801ad18:	7fe00000 	.word	0x7fe00000
 801ad1c:	7c9fffff 	.word	0x7c9fffff
 801ad20:	3fe00000 	.word	0x3fe00000
 801ad24:	bff00000 	.word	0xbff00000
 801ad28:	7fefffff 	.word	0x7fefffff

0801ad2c <_strtod_r>:
 801ad2c:	4b01      	ldr	r3, [pc, #4]	; (801ad34 <_strtod_r+0x8>)
 801ad2e:	f7ff b9f3 	b.w	801a118 <_strtod_l>
 801ad32:	bf00      	nop
 801ad34:	200001f8 	.word	0x200001f8

0801ad38 <_strtol_l.isra.0>:
 801ad38:	2b01      	cmp	r3, #1
 801ad3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad3e:	d001      	beq.n	801ad44 <_strtol_l.isra.0+0xc>
 801ad40:	2b24      	cmp	r3, #36	; 0x24
 801ad42:	d906      	bls.n	801ad52 <_strtol_l.isra.0+0x1a>
 801ad44:	f7fe fc2c 	bl	80195a0 <__errno>
 801ad48:	2316      	movs	r3, #22
 801ad4a:	6003      	str	r3, [r0, #0]
 801ad4c:	2000      	movs	r0, #0
 801ad4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad52:	4f3a      	ldr	r7, [pc, #232]	; (801ae3c <_strtol_l.isra.0+0x104>)
 801ad54:	468e      	mov	lr, r1
 801ad56:	4676      	mov	r6, lr
 801ad58:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801ad5c:	5de5      	ldrb	r5, [r4, r7]
 801ad5e:	f015 0508 	ands.w	r5, r5, #8
 801ad62:	d1f8      	bne.n	801ad56 <_strtol_l.isra.0+0x1e>
 801ad64:	2c2d      	cmp	r4, #45	; 0x2d
 801ad66:	d134      	bne.n	801add2 <_strtol_l.isra.0+0x9a>
 801ad68:	f89e 4000 	ldrb.w	r4, [lr]
 801ad6c:	f04f 0801 	mov.w	r8, #1
 801ad70:	f106 0e02 	add.w	lr, r6, #2
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d05c      	beq.n	801ae32 <_strtol_l.isra.0+0xfa>
 801ad78:	2b10      	cmp	r3, #16
 801ad7a:	d10c      	bne.n	801ad96 <_strtol_l.isra.0+0x5e>
 801ad7c:	2c30      	cmp	r4, #48	; 0x30
 801ad7e:	d10a      	bne.n	801ad96 <_strtol_l.isra.0+0x5e>
 801ad80:	f89e 4000 	ldrb.w	r4, [lr]
 801ad84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801ad88:	2c58      	cmp	r4, #88	; 0x58
 801ad8a:	d14d      	bne.n	801ae28 <_strtol_l.isra.0+0xf0>
 801ad8c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801ad90:	2310      	movs	r3, #16
 801ad92:	f10e 0e02 	add.w	lr, lr, #2
 801ad96:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801ad9a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801ad9e:	2600      	movs	r6, #0
 801ada0:	fbbc f9f3 	udiv	r9, ip, r3
 801ada4:	4635      	mov	r5, r6
 801ada6:	fb03 ca19 	mls	sl, r3, r9, ip
 801adaa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801adae:	2f09      	cmp	r7, #9
 801adb0:	d818      	bhi.n	801ade4 <_strtol_l.isra.0+0xac>
 801adb2:	463c      	mov	r4, r7
 801adb4:	42a3      	cmp	r3, r4
 801adb6:	dd24      	ble.n	801ae02 <_strtol_l.isra.0+0xca>
 801adb8:	2e00      	cmp	r6, #0
 801adba:	db1f      	blt.n	801adfc <_strtol_l.isra.0+0xc4>
 801adbc:	45a9      	cmp	r9, r5
 801adbe:	d31d      	bcc.n	801adfc <_strtol_l.isra.0+0xc4>
 801adc0:	d101      	bne.n	801adc6 <_strtol_l.isra.0+0x8e>
 801adc2:	45a2      	cmp	sl, r4
 801adc4:	db1a      	blt.n	801adfc <_strtol_l.isra.0+0xc4>
 801adc6:	fb05 4503 	mla	r5, r5, r3, r4
 801adca:	2601      	movs	r6, #1
 801adcc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801add0:	e7eb      	b.n	801adaa <_strtol_l.isra.0+0x72>
 801add2:	2c2b      	cmp	r4, #43	; 0x2b
 801add4:	bf08      	it	eq
 801add6:	f89e 4000 	ldrbeq.w	r4, [lr]
 801adda:	46a8      	mov	r8, r5
 801addc:	bf08      	it	eq
 801adde:	f106 0e02 	addeq.w	lr, r6, #2
 801ade2:	e7c7      	b.n	801ad74 <_strtol_l.isra.0+0x3c>
 801ade4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801ade8:	2f19      	cmp	r7, #25
 801adea:	d801      	bhi.n	801adf0 <_strtol_l.isra.0+0xb8>
 801adec:	3c37      	subs	r4, #55	; 0x37
 801adee:	e7e1      	b.n	801adb4 <_strtol_l.isra.0+0x7c>
 801adf0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801adf4:	2f19      	cmp	r7, #25
 801adf6:	d804      	bhi.n	801ae02 <_strtol_l.isra.0+0xca>
 801adf8:	3c57      	subs	r4, #87	; 0x57
 801adfa:	e7db      	b.n	801adb4 <_strtol_l.isra.0+0x7c>
 801adfc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801ae00:	e7e4      	b.n	801adcc <_strtol_l.isra.0+0x94>
 801ae02:	2e00      	cmp	r6, #0
 801ae04:	da05      	bge.n	801ae12 <_strtol_l.isra.0+0xda>
 801ae06:	2322      	movs	r3, #34	; 0x22
 801ae08:	6003      	str	r3, [r0, #0]
 801ae0a:	4665      	mov	r5, ip
 801ae0c:	b942      	cbnz	r2, 801ae20 <_strtol_l.isra.0+0xe8>
 801ae0e:	4628      	mov	r0, r5
 801ae10:	e79d      	b.n	801ad4e <_strtol_l.isra.0+0x16>
 801ae12:	f1b8 0f00 	cmp.w	r8, #0
 801ae16:	d000      	beq.n	801ae1a <_strtol_l.isra.0+0xe2>
 801ae18:	426d      	negs	r5, r5
 801ae1a:	2a00      	cmp	r2, #0
 801ae1c:	d0f7      	beq.n	801ae0e <_strtol_l.isra.0+0xd6>
 801ae1e:	b10e      	cbz	r6, 801ae24 <_strtol_l.isra.0+0xec>
 801ae20:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801ae24:	6011      	str	r1, [r2, #0]
 801ae26:	e7f2      	b.n	801ae0e <_strtol_l.isra.0+0xd6>
 801ae28:	2430      	movs	r4, #48	; 0x30
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	d1b3      	bne.n	801ad96 <_strtol_l.isra.0+0x5e>
 801ae2e:	2308      	movs	r3, #8
 801ae30:	e7b1      	b.n	801ad96 <_strtol_l.isra.0+0x5e>
 801ae32:	2c30      	cmp	r4, #48	; 0x30
 801ae34:	d0a4      	beq.n	801ad80 <_strtol_l.isra.0+0x48>
 801ae36:	230a      	movs	r3, #10
 801ae38:	e7ad      	b.n	801ad96 <_strtol_l.isra.0+0x5e>
 801ae3a:	bf00      	nop
 801ae3c:	0801f6a1 	.word	0x0801f6a1

0801ae40 <_strtol_r>:
 801ae40:	f7ff bf7a 	b.w	801ad38 <_strtol_l.isra.0>

0801ae44 <_strtoul_l.isra.0>:
 801ae44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ae48:	4e3b      	ldr	r6, [pc, #236]	; (801af38 <_strtoul_l.isra.0+0xf4>)
 801ae4a:	4686      	mov	lr, r0
 801ae4c:	468c      	mov	ip, r1
 801ae4e:	4660      	mov	r0, ip
 801ae50:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801ae54:	5da5      	ldrb	r5, [r4, r6]
 801ae56:	f015 0508 	ands.w	r5, r5, #8
 801ae5a:	d1f8      	bne.n	801ae4e <_strtoul_l.isra.0+0xa>
 801ae5c:	2c2d      	cmp	r4, #45	; 0x2d
 801ae5e:	d134      	bne.n	801aeca <_strtoul_l.isra.0+0x86>
 801ae60:	f89c 4000 	ldrb.w	r4, [ip]
 801ae64:	f04f 0801 	mov.w	r8, #1
 801ae68:	f100 0c02 	add.w	ip, r0, #2
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d05e      	beq.n	801af2e <_strtoul_l.isra.0+0xea>
 801ae70:	2b10      	cmp	r3, #16
 801ae72:	d10c      	bne.n	801ae8e <_strtoul_l.isra.0+0x4a>
 801ae74:	2c30      	cmp	r4, #48	; 0x30
 801ae76:	d10a      	bne.n	801ae8e <_strtoul_l.isra.0+0x4a>
 801ae78:	f89c 0000 	ldrb.w	r0, [ip]
 801ae7c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801ae80:	2858      	cmp	r0, #88	; 0x58
 801ae82:	d14f      	bne.n	801af24 <_strtoul_l.isra.0+0xe0>
 801ae84:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801ae88:	2310      	movs	r3, #16
 801ae8a:	f10c 0c02 	add.w	ip, ip, #2
 801ae8e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801ae92:	2500      	movs	r5, #0
 801ae94:	fbb7 f7f3 	udiv	r7, r7, r3
 801ae98:	fb03 f907 	mul.w	r9, r3, r7
 801ae9c:	ea6f 0909 	mvn.w	r9, r9
 801aea0:	4628      	mov	r0, r5
 801aea2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801aea6:	2e09      	cmp	r6, #9
 801aea8:	d818      	bhi.n	801aedc <_strtoul_l.isra.0+0x98>
 801aeaa:	4634      	mov	r4, r6
 801aeac:	42a3      	cmp	r3, r4
 801aeae:	dd24      	ble.n	801aefa <_strtoul_l.isra.0+0xb6>
 801aeb0:	2d00      	cmp	r5, #0
 801aeb2:	db1f      	blt.n	801aef4 <_strtoul_l.isra.0+0xb0>
 801aeb4:	4287      	cmp	r7, r0
 801aeb6:	d31d      	bcc.n	801aef4 <_strtoul_l.isra.0+0xb0>
 801aeb8:	d101      	bne.n	801aebe <_strtoul_l.isra.0+0x7a>
 801aeba:	45a1      	cmp	r9, r4
 801aebc:	db1a      	blt.n	801aef4 <_strtoul_l.isra.0+0xb0>
 801aebe:	fb00 4003 	mla	r0, r0, r3, r4
 801aec2:	2501      	movs	r5, #1
 801aec4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801aec8:	e7eb      	b.n	801aea2 <_strtoul_l.isra.0+0x5e>
 801aeca:	2c2b      	cmp	r4, #43	; 0x2b
 801aecc:	bf08      	it	eq
 801aece:	f89c 4000 	ldrbeq.w	r4, [ip]
 801aed2:	46a8      	mov	r8, r5
 801aed4:	bf08      	it	eq
 801aed6:	f100 0c02 	addeq.w	ip, r0, #2
 801aeda:	e7c7      	b.n	801ae6c <_strtoul_l.isra.0+0x28>
 801aedc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801aee0:	2e19      	cmp	r6, #25
 801aee2:	d801      	bhi.n	801aee8 <_strtoul_l.isra.0+0xa4>
 801aee4:	3c37      	subs	r4, #55	; 0x37
 801aee6:	e7e1      	b.n	801aeac <_strtoul_l.isra.0+0x68>
 801aee8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801aeec:	2e19      	cmp	r6, #25
 801aeee:	d804      	bhi.n	801aefa <_strtoul_l.isra.0+0xb6>
 801aef0:	3c57      	subs	r4, #87	; 0x57
 801aef2:	e7db      	b.n	801aeac <_strtoul_l.isra.0+0x68>
 801aef4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801aef8:	e7e4      	b.n	801aec4 <_strtoul_l.isra.0+0x80>
 801aefa:	2d00      	cmp	r5, #0
 801aefc:	da07      	bge.n	801af0e <_strtoul_l.isra.0+0xca>
 801aefe:	2322      	movs	r3, #34	; 0x22
 801af00:	f8ce 3000 	str.w	r3, [lr]
 801af04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801af08:	b942      	cbnz	r2, 801af1c <_strtoul_l.isra.0+0xd8>
 801af0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801af0e:	f1b8 0f00 	cmp.w	r8, #0
 801af12:	d000      	beq.n	801af16 <_strtoul_l.isra.0+0xd2>
 801af14:	4240      	negs	r0, r0
 801af16:	2a00      	cmp	r2, #0
 801af18:	d0f7      	beq.n	801af0a <_strtoul_l.isra.0+0xc6>
 801af1a:	b10d      	cbz	r5, 801af20 <_strtoul_l.isra.0+0xdc>
 801af1c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 801af20:	6011      	str	r1, [r2, #0]
 801af22:	e7f2      	b.n	801af0a <_strtoul_l.isra.0+0xc6>
 801af24:	2430      	movs	r4, #48	; 0x30
 801af26:	2b00      	cmp	r3, #0
 801af28:	d1b1      	bne.n	801ae8e <_strtoul_l.isra.0+0x4a>
 801af2a:	2308      	movs	r3, #8
 801af2c:	e7af      	b.n	801ae8e <_strtoul_l.isra.0+0x4a>
 801af2e:	2c30      	cmp	r4, #48	; 0x30
 801af30:	d0a2      	beq.n	801ae78 <_strtoul_l.isra.0+0x34>
 801af32:	230a      	movs	r3, #10
 801af34:	e7ab      	b.n	801ae8e <_strtoul_l.isra.0+0x4a>
 801af36:	bf00      	nop
 801af38:	0801f6a1 	.word	0x0801f6a1

0801af3c <_strtoul_r>:
 801af3c:	f7ff bf82 	b.w	801ae44 <_strtoul_l.isra.0>

0801af40 <strtoul>:
 801af40:	4613      	mov	r3, r2
 801af42:	460a      	mov	r2, r1
 801af44:	4601      	mov	r1, r0
 801af46:	4802      	ldr	r0, [pc, #8]	; (801af50 <strtoul+0x10>)
 801af48:	6800      	ldr	r0, [r0, #0]
 801af4a:	f7ff bf7b 	b.w	801ae44 <_strtoul_l.isra.0>
 801af4e:	bf00      	nop
 801af50:	20000190 	.word	0x20000190

0801af54 <_vsniprintf_r>:
 801af54:	b530      	push	{r4, r5, lr}
 801af56:	1e14      	subs	r4, r2, #0
 801af58:	4605      	mov	r5, r0
 801af5a:	b09b      	sub	sp, #108	; 0x6c
 801af5c:	4618      	mov	r0, r3
 801af5e:	da05      	bge.n	801af6c <_vsniprintf_r+0x18>
 801af60:	238b      	movs	r3, #139	; 0x8b
 801af62:	602b      	str	r3, [r5, #0]
 801af64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801af68:	b01b      	add	sp, #108	; 0x6c
 801af6a:	bd30      	pop	{r4, r5, pc}
 801af6c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801af70:	f8ad 300c 	strh.w	r3, [sp, #12]
 801af74:	bf14      	ite	ne
 801af76:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801af7a:	4623      	moveq	r3, r4
 801af7c:	9302      	str	r3, [sp, #8]
 801af7e:	9305      	str	r3, [sp, #20]
 801af80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801af84:	9100      	str	r1, [sp, #0]
 801af86:	9104      	str	r1, [sp, #16]
 801af88:	f8ad 300e 	strh.w	r3, [sp, #14]
 801af8c:	4602      	mov	r2, r0
 801af8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801af90:	4669      	mov	r1, sp
 801af92:	4628      	mov	r0, r5
 801af94:	f001 fc2c 	bl	801c7f0 <_svfiprintf_r>
 801af98:	1c43      	adds	r3, r0, #1
 801af9a:	bfbc      	itt	lt
 801af9c:	238b      	movlt	r3, #139	; 0x8b
 801af9e:	602b      	strlt	r3, [r5, #0]
 801afa0:	2c00      	cmp	r4, #0
 801afa2:	d0e1      	beq.n	801af68 <_vsniprintf_r+0x14>
 801afa4:	9b00      	ldr	r3, [sp, #0]
 801afa6:	2200      	movs	r2, #0
 801afa8:	701a      	strb	r2, [r3, #0]
 801afaa:	e7dd      	b.n	801af68 <_vsniprintf_r+0x14>

0801afac <vsniprintf>:
 801afac:	b507      	push	{r0, r1, r2, lr}
 801afae:	9300      	str	r3, [sp, #0]
 801afb0:	4613      	mov	r3, r2
 801afb2:	460a      	mov	r2, r1
 801afb4:	4601      	mov	r1, r0
 801afb6:	4803      	ldr	r0, [pc, #12]	; (801afc4 <vsniprintf+0x18>)
 801afb8:	6800      	ldr	r0, [r0, #0]
 801afba:	f7ff ffcb 	bl	801af54 <_vsniprintf_r>
 801afbe:	b003      	add	sp, #12
 801afc0:	f85d fb04 	ldr.w	pc, [sp], #4
 801afc4:	20000190 	.word	0x20000190

0801afc8 <__swbuf_r>:
 801afc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801afca:	460e      	mov	r6, r1
 801afcc:	4614      	mov	r4, r2
 801afce:	4605      	mov	r5, r0
 801afd0:	b118      	cbz	r0, 801afda <__swbuf_r+0x12>
 801afd2:	6983      	ldr	r3, [r0, #24]
 801afd4:	b90b      	cbnz	r3, 801afda <__swbuf_r+0x12>
 801afd6:	f000 fa1d 	bl	801b414 <__sinit>
 801afda:	4b21      	ldr	r3, [pc, #132]	; (801b060 <__swbuf_r+0x98>)
 801afdc:	429c      	cmp	r4, r3
 801afde:	d12b      	bne.n	801b038 <__swbuf_r+0x70>
 801afe0:	686c      	ldr	r4, [r5, #4]
 801afe2:	69a3      	ldr	r3, [r4, #24]
 801afe4:	60a3      	str	r3, [r4, #8]
 801afe6:	89a3      	ldrh	r3, [r4, #12]
 801afe8:	071a      	lsls	r2, r3, #28
 801afea:	d52f      	bpl.n	801b04c <__swbuf_r+0x84>
 801afec:	6923      	ldr	r3, [r4, #16]
 801afee:	b36b      	cbz	r3, 801b04c <__swbuf_r+0x84>
 801aff0:	6923      	ldr	r3, [r4, #16]
 801aff2:	6820      	ldr	r0, [r4, #0]
 801aff4:	1ac0      	subs	r0, r0, r3
 801aff6:	6963      	ldr	r3, [r4, #20]
 801aff8:	b2f6      	uxtb	r6, r6
 801affa:	4283      	cmp	r3, r0
 801affc:	4637      	mov	r7, r6
 801affe:	dc04      	bgt.n	801b00a <__swbuf_r+0x42>
 801b000:	4621      	mov	r1, r4
 801b002:	4628      	mov	r0, r5
 801b004:	f000 f972 	bl	801b2ec <_fflush_r>
 801b008:	bb30      	cbnz	r0, 801b058 <__swbuf_r+0x90>
 801b00a:	68a3      	ldr	r3, [r4, #8]
 801b00c:	3b01      	subs	r3, #1
 801b00e:	60a3      	str	r3, [r4, #8]
 801b010:	6823      	ldr	r3, [r4, #0]
 801b012:	1c5a      	adds	r2, r3, #1
 801b014:	6022      	str	r2, [r4, #0]
 801b016:	701e      	strb	r6, [r3, #0]
 801b018:	6963      	ldr	r3, [r4, #20]
 801b01a:	3001      	adds	r0, #1
 801b01c:	4283      	cmp	r3, r0
 801b01e:	d004      	beq.n	801b02a <__swbuf_r+0x62>
 801b020:	89a3      	ldrh	r3, [r4, #12]
 801b022:	07db      	lsls	r3, r3, #31
 801b024:	d506      	bpl.n	801b034 <__swbuf_r+0x6c>
 801b026:	2e0a      	cmp	r6, #10
 801b028:	d104      	bne.n	801b034 <__swbuf_r+0x6c>
 801b02a:	4621      	mov	r1, r4
 801b02c:	4628      	mov	r0, r5
 801b02e:	f000 f95d 	bl	801b2ec <_fflush_r>
 801b032:	b988      	cbnz	r0, 801b058 <__swbuf_r+0x90>
 801b034:	4638      	mov	r0, r7
 801b036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b038:	4b0a      	ldr	r3, [pc, #40]	; (801b064 <__swbuf_r+0x9c>)
 801b03a:	429c      	cmp	r4, r3
 801b03c:	d101      	bne.n	801b042 <__swbuf_r+0x7a>
 801b03e:	68ac      	ldr	r4, [r5, #8]
 801b040:	e7cf      	b.n	801afe2 <__swbuf_r+0x1a>
 801b042:	4b09      	ldr	r3, [pc, #36]	; (801b068 <__swbuf_r+0xa0>)
 801b044:	429c      	cmp	r4, r3
 801b046:	bf08      	it	eq
 801b048:	68ec      	ldreq	r4, [r5, #12]
 801b04a:	e7ca      	b.n	801afe2 <__swbuf_r+0x1a>
 801b04c:	4621      	mov	r1, r4
 801b04e:	4628      	mov	r0, r5
 801b050:	f000 f81e 	bl	801b090 <__swsetup_r>
 801b054:	2800      	cmp	r0, #0
 801b056:	d0cb      	beq.n	801aff0 <__swbuf_r+0x28>
 801b058:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b05c:	e7ea      	b.n	801b034 <__swbuf_r+0x6c>
 801b05e:	bf00      	nop
 801b060:	0801f8dc 	.word	0x0801f8dc
 801b064:	0801f8fc 	.word	0x0801f8fc
 801b068:	0801f8bc 	.word	0x0801f8bc

0801b06c <_write_r>:
 801b06c:	b538      	push	{r3, r4, r5, lr}
 801b06e:	4d07      	ldr	r5, [pc, #28]	; (801b08c <_write_r+0x20>)
 801b070:	4604      	mov	r4, r0
 801b072:	4608      	mov	r0, r1
 801b074:	4611      	mov	r1, r2
 801b076:	2200      	movs	r2, #0
 801b078:	602a      	str	r2, [r5, #0]
 801b07a:	461a      	mov	r2, r3
 801b07c:	f7e8 fd2b 	bl	8003ad6 <_write>
 801b080:	1c43      	adds	r3, r0, #1
 801b082:	d102      	bne.n	801b08a <_write_r+0x1e>
 801b084:	682b      	ldr	r3, [r5, #0]
 801b086:	b103      	cbz	r3, 801b08a <_write_r+0x1e>
 801b088:	6023      	str	r3, [r4, #0]
 801b08a:	bd38      	pop	{r3, r4, r5, pc}
 801b08c:	2001604c 	.word	0x2001604c

0801b090 <__swsetup_r>:
 801b090:	4b32      	ldr	r3, [pc, #200]	; (801b15c <__swsetup_r+0xcc>)
 801b092:	b570      	push	{r4, r5, r6, lr}
 801b094:	681d      	ldr	r5, [r3, #0]
 801b096:	4606      	mov	r6, r0
 801b098:	460c      	mov	r4, r1
 801b09a:	b125      	cbz	r5, 801b0a6 <__swsetup_r+0x16>
 801b09c:	69ab      	ldr	r3, [r5, #24]
 801b09e:	b913      	cbnz	r3, 801b0a6 <__swsetup_r+0x16>
 801b0a0:	4628      	mov	r0, r5
 801b0a2:	f000 f9b7 	bl	801b414 <__sinit>
 801b0a6:	4b2e      	ldr	r3, [pc, #184]	; (801b160 <__swsetup_r+0xd0>)
 801b0a8:	429c      	cmp	r4, r3
 801b0aa:	d10f      	bne.n	801b0cc <__swsetup_r+0x3c>
 801b0ac:	686c      	ldr	r4, [r5, #4]
 801b0ae:	89a3      	ldrh	r3, [r4, #12]
 801b0b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b0b4:	0719      	lsls	r1, r3, #28
 801b0b6:	d42c      	bmi.n	801b112 <__swsetup_r+0x82>
 801b0b8:	06dd      	lsls	r5, r3, #27
 801b0ba:	d411      	bmi.n	801b0e0 <__swsetup_r+0x50>
 801b0bc:	2309      	movs	r3, #9
 801b0be:	6033      	str	r3, [r6, #0]
 801b0c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b0c4:	81a3      	strh	r3, [r4, #12]
 801b0c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b0ca:	e03e      	b.n	801b14a <__swsetup_r+0xba>
 801b0cc:	4b25      	ldr	r3, [pc, #148]	; (801b164 <__swsetup_r+0xd4>)
 801b0ce:	429c      	cmp	r4, r3
 801b0d0:	d101      	bne.n	801b0d6 <__swsetup_r+0x46>
 801b0d2:	68ac      	ldr	r4, [r5, #8]
 801b0d4:	e7eb      	b.n	801b0ae <__swsetup_r+0x1e>
 801b0d6:	4b24      	ldr	r3, [pc, #144]	; (801b168 <__swsetup_r+0xd8>)
 801b0d8:	429c      	cmp	r4, r3
 801b0da:	bf08      	it	eq
 801b0dc:	68ec      	ldreq	r4, [r5, #12]
 801b0de:	e7e6      	b.n	801b0ae <__swsetup_r+0x1e>
 801b0e0:	0758      	lsls	r0, r3, #29
 801b0e2:	d512      	bpl.n	801b10a <__swsetup_r+0x7a>
 801b0e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b0e6:	b141      	cbz	r1, 801b0fa <__swsetup_r+0x6a>
 801b0e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b0ec:	4299      	cmp	r1, r3
 801b0ee:	d002      	beq.n	801b0f6 <__swsetup_r+0x66>
 801b0f0:	4630      	mov	r0, r6
 801b0f2:	f7fe fb87 	bl	8019804 <_free_r>
 801b0f6:	2300      	movs	r3, #0
 801b0f8:	6363      	str	r3, [r4, #52]	; 0x34
 801b0fa:	89a3      	ldrh	r3, [r4, #12]
 801b0fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b100:	81a3      	strh	r3, [r4, #12]
 801b102:	2300      	movs	r3, #0
 801b104:	6063      	str	r3, [r4, #4]
 801b106:	6923      	ldr	r3, [r4, #16]
 801b108:	6023      	str	r3, [r4, #0]
 801b10a:	89a3      	ldrh	r3, [r4, #12]
 801b10c:	f043 0308 	orr.w	r3, r3, #8
 801b110:	81a3      	strh	r3, [r4, #12]
 801b112:	6923      	ldr	r3, [r4, #16]
 801b114:	b94b      	cbnz	r3, 801b12a <__swsetup_r+0x9a>
 801b116:	89a3      	ldrh	r3, [r4, #12]
 801b118:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b11c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b120:	d003      	beq.n	801b12a <__swsetup_r+0x9a>
 801b122:	4621      	mov	r1, r4
 801b124:	4630      	mov	r0, r6
 801b126:	f000 fdc9 	bl	801bcbc <__smakebuf_r>
 801b12a:	89a0      	ldrh	r0, [r4, #12]
 801b12c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b130:	f010 0301 	ands.w	r3, r0, #1
 801b134:	d00a      	beq.n	801b14c <__swsetup_r+0xbc>
 801b136:	2300      	movs	r3, #0
 801b138:	60a3      	str	r3, [r4, #8]
 801b13a:	6963      	ldr	r3, [r4, #20]
 801b13c:	425b      	negs	r3, r3
 801b13e:	61a3      	str	r3, [r4, #24]
 801b140:	6923      	ldr	r3, [r4, #16]
 801b142:	b943      	cbnz	r3, 801b156 <__swsetup_r+0xc6>
 801b144:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b148:	d1ba      	bne.n	801b0c0 <__swsetup_r+0x30>
 801b14a:	bd70      	pop	{r4, r5, r6, pc}
 801b14c:	0781      	lsls	r1, r0, #30
 801b14e:	bf58      	it	pl
 801b150:	6963      	ldrpl	r3, [r4, #20]
 801b152:	60a3      	str	r3, [r4, #8]
 801b154:	e7f4      	b.n	801b140 <__swsetup_r+0xb0>
 801b156:	2000      	movs	r0, #0
 801b158:	e7f7      	b.n	801b14a <__swsetup_r+0xba>
 801b15a:	bf00      	nop
 801b15c:	20000190 	.word	0x20000190
 801b160:	0801f8dc 	.word	0x0801f8dc
 801b164:	0801f8fc 	.word	0x0801f8fc
 801b168:	0801f8bc 	.word	0x0801f8bc

0801b16c <__assert_func>:
 801b16c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b16e:	4614      	mov	r4, r2
 801b170:	461a      	mov	r2, r3
 801b172:	4b09      	ldr	r3, [pc, #36]	; (801b198 <__assert_func+0x2c>)
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	4605      	mov	r5, r0
 801b178:	68d8      	ldr	r0, [r3, #12]
 801b17a:	b14c      	cbz	r4, 801b190 <__assert_func+0x24>
 801b17c:	4b07      	ldr	r3, [pc, #28]	; (801b19c <__assert_func+0x30>)
 801b17e:	9100      	str	r1, [sp, #0]
 801b180:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b184:	4906      	ldr	r1, [pc, #24]	; (801b1a0 <__assert_func+0x34>)
 801b186:	462b      	mov	r3, r5
 801b188:	f000 f9c2 	bl	801b510 <fiprintf>
 801b18c:	f002 fad9 	bl	801d742 <abort>
 801b190:	4b04      	ldr	r3, [pc, #16]	; (801b1a4 <__assert_func+0x38>)
 801b192:	461c      	mov	r4, r3
 801b194:	e7f3      	b.n	801b17e <__assert_func+0x12>
 801b196:	bf00      	nop
 801b198:	20000190 	.word	0x20000190
 801b19c:	0801f880 	.word	0x0801f880
 801b1a0:	0801f88d 	.word	0x0801f88d
 801b1a4:	0801f8bb 	.word	0x0801f8bb

0801b1a8 <_close_r>:
 801b1a8:	b538      	push	{r3, r4, r5, lr}
 801b1aa:	4d06      	ldr	r5, [pc, #24]	; (801b1c4 <_close_r+0x1c>)
 801b1ac:	2300      	movs	r3, #0
 801b1ae:	4604      	mov	r4, r0
 801b1b0:	4608      	mov	r0, r1
 801b1b2:	602b      	str	r3, [r5, #0]
 801b1b4:	f7e8 fcab 	bl	8003b0e <_close>
 801b1b8:	1c43      	adds	r3, r0, #1
 801b1ba:	d102      	bne.n	801b1c2 <_close_r+0x1a>
 801b1bc:	682b      	ldr	r3, [r5, #0]
 801b1be:	b103      	cbz	r3, 801b1c2 <_close_r+0x1a>
 801b1c0:	6023      	str	r3, [r4, #0]
 801b1c2:	bd38      	pop	{r3, r4, r5, pc}
 801b1c4:	2001604c 	.word	0x2001604c

0801b1c8 <__env_lock>:
 801b1c8:	4801      	ldr	r0, [pc, #4]	; (801b1d0 <__env_lock+0x8>)
 801b1ca:	f7fe bac8 	b.w	801975e <__retarget_lock_acquire_recursive>
 801b1ce:	bf00      	nop
 801b1d0:	20016042 	.word	0x20016042

0801b1d4 <__env_unlock>:
 801b1d4:	4801      	ldr	r0, [pc, #4]	; (801b1dc <__env_unlock+0x8>)
 801b1d6:	f7fe bac3 	b.w	8019760 <__retarget_lock_release_recursive>
 801b1da:	bf00      	nop
 801b1dc:	20016042 	.word	0x20016042

0801b1e0 <__sflush_r>:
 801b1e0:	898a      	ldrh	r2, [r1, #12]
 801b1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1e6:	4605      	mov	r5, r0
 801b1e8:	0710      	lsls	r0, r2, #28
 801b1ea:	460c      	mov	r4, r1
 801b1ec:	d458      	bmi.n	801b2a0 <__sflush_r+0xc0>
 801b1ee:	684b      	ldr	r3, [r1, #4]
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	dc05      	bgt.n	801b200 <__sflush_r+0x20>
 801b1f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	dc02      	bgt.n	801b200 <__sflush_r+0x20>
 801b1fa:	2000      	movs	r0, #0
 801b1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b202:	2e00      	cmp	r6, #0
 801b204:	d0f9      	beq.n	801b1fa <__sflush_r+0x1a>
 801b206:	2300      	movs	r3, #0
 801b208:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b20c:	682f      	ldr	r7, [r5, #0]
 801b20e:	602b      	str	r3, [r5, #0]
 801b210:	d032      	beq.n	801b278 <__sflush_r+0x98>
 801b212:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b214:	89a3      	ldrh	r3, [r4, #12]
 801b216:	075a      	lsls	r2, r3, #29
 801b218:	d505      	bpl.n	801b226 <__sflush_r+0x46>
 801b21a:	6863      	ldr	r3, [r4, #4]
 801b21c:	1ac0      	subs	r0, r0, r3
 801b21e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b220:	b10b      	cbz	r3, 801b226 <__sflush_r+0x46>
 801b222:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b224:	1ac0      	subs	r0, r0, r3
 801b226:	2300      	movs	r3, #0
 801b228:	4602      	mov	r2, r0
 801b22a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b22c:	6a21      	ldr	r1, [r4, #32]
 801b22e:	4628      	mov	r0, r5
 801b230:	47b0      	blx	r6
 801b232:	1c43      	adds	r3, r0, #1
 801b234:	89a3      	ldrh	r3, [r4, #12]
 801b236:	d106      	bne.n	801b246 <__sflush_r+0x66>
 801b238:	6829      	ldr	r1, [r5, #0]
 801b23a:	291d      	cmp	r1, #29
 801b23c:	d82c      	bhi.n	801b298 <__sflush_r+0xb8>
 801b23e:	4a2a      	ldr	r2, [pc, #168]	; (801b2e8 <__sflush_r+0x108>)
 801b240:	40ca      	lsrs	r2, r1
 801b242:	07d6      	lsls	r6, r2, #31
 801b244:	d528      	bpl.n	801b298 <__sflush_r+0xb8>
 801b246:	2200      	movs	r2, #0
 801b248:	6062      	str	r2, [r4, #4]
 801b24a:	04d9      	lsls	r1, r3, #19
 801b24c:	6922      	ldr	r2, [r4, #16]
 801b24e:	6022      	str	r2, [r4, #0]
 801b250:	d504      	bpl.n	801b25c <__sflush_r+0x7c>
 801b252:	1c42      	adds	r2, r0, #1
 801b254:	d101      	bne.n	801b25a <__sflush_r+0x7a>
 801b256:	682b      	ldr	r3, [r5, #0]
 801b258:	b903      	cbnz	r3, 801b25c <__sflush_r+0x7c>
 801b25a:	6560      	str	r0, [r4, #84]	; 0x54
 801b25c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b25e:	602f      	str	r7, [r5, #0]
 801b260:	2900      	cmp	r1, #0
 801b262:	d0ca      	beq.n	801b1fa <__sflush_r+0x1a>
 801b264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b268:	4299      	cmp	r1, r3
 801b26a:	d002      	beq.n	801b272 <__sflush_r+0x92>
 801b26c:	4628      	mov	r0, r5
 801b26e:	f7fe fac9 	bl	8019804 <_free_r>
 801b272:	2000      	movs	r0, #0
 801b274:	6360      	str	r0, [r4, #52]	; 0x34
 801b276:	e7c1      	b.n	801b1fc <__sflush_r+0x1c>
 801b278:	6a21      	ldr	r1, [r4, #32]
 801b27a:	2301      	movs	r3, #1
 801b27c:	4628      	mov	r0, r5
 801b27e:	47b0      	blx	r6
 801b280:	1c41      	adds	r1, r0, #1
 801b282:	d1c7      	bne.n	801b214 <__sflush_r+0x34>
 801b284:	682b      	ldr	r3, [r5, #0]
 801b286:	2b00      	cmp	r3, #0
 801b288:	d0c4      	beq.n	801b214 <__sflush_r+0x34>
 801b28a:	2b1d      	cmp	r3, #29
 801b28c:	d001      	beq.n	801b292 <__sflush_r+0xb2>
 801b28e:	2b16      	cmp	r3, #22
 801b290:	d101      	bne.n	801b296 <__sflush_r+0xb6>
 801b292:	602f      	str	r7, [r5, #0]
 801b294:	e7b1      	b.n	801b1fa <__sflush_r+0x1a>
 801b296:	89a3      	ldrh	r3, [r4, #12]
 801b298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b29c:	81a3      	strh	r3, [r4, #12]
 801b29e:	e7ad      	b.n	801b1fc <__sflush_r+0x1c>
 801b2a0:	690f      	ldr	r7, [r1, #16]
 801b2a2:	2f00      	cmp	r7, #0
 801b2a4:	d0a9      	beq.n	801b1fa <__sflush_r+0x1a>
 801b2a6:	0793      	lsls	r3, r2, #30
 801b2a8:	680e      	ldr	r6, [r1, #0]
 801b2aa:	bf08      	it	eq
 801b2ac:	694b      	ldreq	r3, [r1, #20]
 801b2ae:	600f      	str	r7, [r1, #0]
 801b2b0:	bf18      	it	ne
 801b2b2:	2300      	movne	r3, #0
 801b2b4:	eba6 0807 	sub.w	r8, r6, r7
 801b2b8:	608b      	str	r3, [r1, #8]
 801b2ba:	f1b8 0f00 	cmp.w	r8, #0
 801b2be:	dd9c      	ble.n	801b1fa <__sflush_r+0x1a>
 801b2c0:	6a21      	ldr	r1, [r4, #32]
 801b2c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b2c4:	4643      	mov	r3, r8
 801b2c6:	463a      	mov	r2, r7
 801b2c8:	4628      	mov	r0, r5
 801b2ca:	47b0      	blx	r6
 801b2cc:	2800      	cmp	r0, #0
 801b2ce:	dc06      	bgt.n	801b2de <__sflush_r+0xfe>
 801b2d0:	89a3      	ldrh	r3, [r4, #12]
 801b2d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b2d6:	81a3      	strh	r3, [r4, #12]
 801b2d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b2dc:	e78e      	b.n	801b1fc <__sflush_r+0x1c>
 801b2de:	4407      	add	r7, r0
 801b2e0:	eba8 0800 	sub.w	r8, r8, r0
 801b2e4:	e7e9      	b.n	801b2ba <__sflush_r+0xda>
 801b2e6:	bf00      	nop
 801b2e8:	20400001 	.word	0x20400001

0801b2ec <_fflush_r>:
 801b2ec:	b538      	push	{r3, r4, r5, lr}
 801b2ee:	690b      	ldr	r3, [r1, #16]
 801b2f0:	4605      	mov	r5, r0
 801b2f2:	460c      	mov	r4, r1
 801b2f4:	b913      	cbnz	r3, 801b2fc <_fflush_r+0x10>
 801b2f6:	2500      	movs	r5, #0
 801b2f8:	4628      	mov	r0, r5
 801b2fa:	bd38      	pop	{r3, r4, r5, pc}
 801b2fc:	b118      	cbz	r0, 801b306 <_fflush_r+0x1a>
 801b2fe:	6983      	ldr	r3, [r0, #24]
 801b300:	b90b      	cbnz	r3, 801b306 <_fflush_r+0x1a>
 801b302:	f000 f887 	bl	801b414 <__sinit>
 801b306:	4b14      	ldr	r3, [pc, #80]	; (801b358 <_fflush_r+0x6c>)
 801b308:	429c      	cmp	r4, r3
 801b30a:	d11b      	bne.n	801b344 <_fflush_r+0x58>
 801b30c:	686c      	ldr	r4, [r5, #4]
 801b30e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b312:	2b00      	cmp	r3, #0
 801b314:	d0ef      	beq.n	801b2f6 <_fflush_r+0xa>
 801b316:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b318:	07d0      	lsls	r0, r2, #31
 801b31a:	d404      	bmi.n	801b326 <_fflush_r+0x3a>
 801b31c:	0599      	lsls	r1, r3, #22
 801b31e:	d402      	bmi.n	801b326 <_fflush_r+0x3a>
 801b320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b322:	f7fe fa1c 	bl	801975e <__retarget_lock_acquire_recursive>
 801b326:	4628      	mov	r0, r5
 801b328:	4621      	mov	r1, r4
 801b32a:	f7ff ff59 	bl	801b1e0 <__sflush_r>
 801b32e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b330:	07da      	lsls	r2, r3, #31
 801b332:	4605      	mov	r5, r0
 801b334:	d4e0      	bmi.n	801b2f8 <_fflush_r+0xc>
 801b336:	89a3      	ldrh	r3, [r4, #12]
 801b338:	059b      	lsls	r3, r3, #22
 801b33a:	d4dd      	bmi.n	801b2f8 <_fflush_r+0xc>
 801b33c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b33e:	f7fe fa0f 	bl	8019760 <__retarget_lock_release_recursive>
 801b342:	e7d9      	b.n	801b2f8 <_fflush_r+0xc>
 801b344:	4b05      	ldr	r3, [pc, #20]	; (801b35c <_fflush_r+0x70>)
 801b346:	429c      	cmp	r4, r3
 801b348:	d101      	bne.n	801b34e <_fflush_r+0x62>
 801b34a:	68ac      	ldr	r4, [r5, #8]
 801b34c:	e7df      	b.n	801b30e <_fflush_r+0x22>
 801b34e:	4b04      	ldr	r3, [pc, #16]	; (801b360 <_fflush_r+0x74>)
 801b350:	429c      	cmp	r4, r3
 801b352:	bf08      	it	eq
 801b354:	68ec      	ldreq	r4, [r5, #12]
 801b356:	e7da      	b.n	801b30e <_fflush_r+0x22>
 801b358:	0801f8dc 	.word	0x0801f8dc
 801b35c:	0801f8fc 	.word	0x0801f8fc
 801b360:	0801f8bc 	.word	0x0801f8bc

0801b364 <std>:
 801b364:	2300      	movs	r3, #0
 801b366:	b510      	push	{r4, lr}
 801b368:	4604      	mov	r4, r0
 801b36a:	e9c0 3300 	strd	r3, r3, [r0]
 801b36e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b372:	6083      	str	r3, [r0, #8]
 801b374:	8181      	strh	r1, [r0, #12]
 801b376:	6643      	str	r3, [r0, #100]	; 0x64
 801b378:	81c2      	strh	r2, [r0, #14]
 801b37a:	6183      	str	r3, [r0, #24]
 801b37c:	4619      	mov	r1, r3
 801b37e:	2208      	movs	r2, #8
 801b380:	305c      	adds	r0, #92	; 0x5c
 801b382:	f7fe fa27 	bl	80197d4 <memset>
 801b386:	4b05      	ldr	r3, [pc, #20]	; (801b39c <std+0x38>)
 801b388:	6263      	str	r3, [r4, #36]	; 0x24
 801b38a:	4b05      	ldr	r3, [pc, #20]	; (801b3a0 <std+0x3c>)
 801b38c:	62a3      	str	r3, [r4, #40]	; 0x28
 801b38e:	4b05      	ldr	r3, [pc, #20]	; (801b3a4 <std+0x40>)
 801b390:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b392:	4b05      	ldr	r3, [pc, #20]	; (801b3a8 <std+0x44>)
 801b394:	6224      	str	r4, [r4, #32]
 801b396:	6323      	str	r3, [r4, #48]	; 0x30
 801b398:	bd10      	pop	{r4, pc}
 801b39a:	bf00      	nop
 801b39c:	08019fc1 	.word	0x08019fc1
 801b3a0:	08019fe7 	.word	0x08019fe7
 801b3a4:	0801a01f 	.word	0x0801a01f
 801b3a8:	0801a043 	.word	0x0801a043

0801b3ac <_cleanup_r>:
 801b3ac:	4901      	ldr	r1, [pc, #4]	; (801b3b4 <_cleanup_r+0x8>)
 801b3ae:	f000 b8c1 	b.w	801b534 <_fwalk_reent>
 801b3b2:	bf00      	nop
 801b3b4:	0801b2ed 	.word	0x0801b2ed

0801b3b8 <__sfmoreglue>:
 801b3b8:	b570      	push	{r4, r5, r6, lr}
 801b3ba:	1e4a      	subs	r2, r1, #1
 801b3bc:	2568      	movs	r5, #104	; 0x68
 801b3be:	4355      	muls	r5, r2
 801b3c0:	460e      	mov	r6, r1
 801b3c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b3c6:	f7fe fa6d 	bl	80198a4 <_malloc_r>
 801b3ca:	4604      	mov	r4, r0
 801b3cc:	b140      	cbz	r0, 801b3e0 <__sfmoreglue+0x28>
 801b3ce:	2100      	movs	r1, #0
 801b3d0:	e9c0 1600 	strd	r1, r6, [r0]
 801b3d4:	300c      	adds	r0, #12
 801b3d6:	60a0      	str	r0, [r4, #8]
 801b3d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b3dc:	f7fe f9fa 	bl	80197d4 <memset>
 801b3e0:	4620      	mov	r0, r4
 801b3e2:	bd70      	pop	{r4, r5, r6, pc}

0801b3e4 <__sfp_lock_acquire>:
 801b3e4:	4801      	ldr	r0, [pc, #4]	; (801b3ec <__sfp_lock_acquire+0x8>)
 801b3e6:	f7fe b9ba 	b.w	801975e <__retarget_lock_acquire_recursive>
 801b3ea:	bf00      	nop
 801b3ec:	20016048 	.word	0x20016048

0801b3f0 <__sfp_lock_release>:
 801b3f0:	4801      	ldr	r0, [pc, #4]	; (801b3f8 <__sfp_lock_release+0x8>)
 801b3f2:	f7fe b9b5 	b.w	8019760 <__retarget_lock_release_recursive>
 801b3f6:	bf00      	nop
 801b3f8:	20016048 	.word	0x20016048

0801b3fc <__sinit_lock_acquire>:
 801b3fc:	4801      	ldr	r0, [pc, #4]	; (801b404 <__sinit_lock_acquire+0x8>)
 801b3fe:	f7fe b9ae 	b.w	801975e <__retarget_lock_acquire_recursive>
 801b402:	bf00      	nop
 801b404:	20016043 	.word	0x20016043

0801b408 <__sinit_lock_release>:
 801b408:	4801      	ldr	r0, [pc, #4]	; (801b410 <__sinit_lock_release+0x8>)
 801b40a:	f7fe b9a9 	b.w	8019760 <__retarget_lock_release_recursive>
 801b40e:	bf00      	nop
 801b410:	20016043 	.word	0x20016043

0801b414 <__sinit>:
 801b414:	b510      	push	{r4, lr}
 801b416:	4604      	mov	r4, r0
 801b418:	f7ff fff0 	bl	801b3fc <__sinit_lock_acquire>
 801b41c:	69a3      	ldr	r3, [r4, #24]
 801b41e:	b11b      	cbz	r3, 801b428 <__sinit+0x14>
 801b420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b424:	f7ff bff0 	b.w	801b408 <__sinit_lock_release>
 801b428:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b42c:	6523      	str	r3, [r4, #80]	; 0x50
 801b42e:	4b13      	ldr	r3, [pc, #76]	; (801b47c <__sinit+0x68>)
 801b430:	4a13      	ldr	r2, [pc, #76]	; (801b480 <__sinit+0x6c>)
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	62a2      	str	r2, [r4, #40]	; 0x28
 801b436:	42a3      	cmp	r3, r4
 801b438:	bf04      	itt	eq
 801b43a:	2301      	moveq	r3, #1
 801b43c:	61a3      	streq	r3, [r4, #24]
 801b43e:	4620      	mov	r0, r4
 801b440:	f000 f820 	bl	801b484 <__sfp>
 801b444:	6060      	str	r0, [r4, #4]
 801b446:	4620      	mov	r0, r4
 801b448:	f000 f81c 	bl	801b484 <__sfp>
 801b44c:	60a0      	str	r0, [r4, #8]
 801b44e:	4620      	mov	r0, r4
 801b450:	f000 f818 	bl	801b484 <__sfp>
 801b454:	2200      	movs	r2, #0
 801b456:	60e0      	str	r0, [r4, #12]
 801b458:	2104      	movs	r1, #4
 801b45a:	6860      	ldr	r0, [r4, #4]
 801b45c:	f7ff ff82 	bl	801b364 <std>
 801b460:	68a0      	ldr	r0, [r4, #8]
 801b462:	2201      	movs	r2, #1
 801b464:	2109      	movs	r1, #9
 801b466:	f7ff ff7d 	bl	801b364 <std>
 801b46a:	68e0      	ldr	r0, [r4, #12]
 801b46c:	2202      	movs	r2, #2
 801b46e:	2112      	movs	r1, #18
 801b470:	f7ff ff78 	bl	801b364 <std>
 801b474:	2301      	movs	r3, #1
 801b476:	61a3      	str	r3, [r4, #24]
 801b478:	e7d2      	b.n	801b420 <__sinit+0xc>
 801b47a:	bf00      	nop
 801b47c:	0801f7a4 	.word	0x0801f7a4
 801b480:	0801b3ad 	.word	0x0801b3ad

0801b484 <__sfp>:
 801b484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b486:	4607      	mov	r7, r0
 801b488:	f7ff ffac 	bl	801b3e4 <__sfp_lock_acquire>
 801b48c:	4b1e      	ldr	r3, [pc, #120]	; (801b508 <__sfp+0x84>)
 801b48e:	681e      	ldr	r6, [r3, #0]
 801b490:	69b3      	ldr	r3, [r6, #24]
 801b492:	b913      	cbnz	r3, 801b49a <__sfp+0x16>
 801b494:	4630      	mov	r0, r6
 801b496:	f7ff ffbd 	bl	801b414 <__sinit>
 801b49a:	3648      	adds	r6, #72	; 0x48
 801b49c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b4a0:	3b01      	subs	r3, #1
 801b4a2:	d503      	bpl.n	801b4ac <__sfp+0x28>
 801b4a4:	6833      	ldr	r3, [r6, #0]
 801b4a6:	b30b      	cbz	r3, 801b4ec <__sfp+0x68>
 801b4a8:	6836      	ldr	r6, [r6, #0]
 801b4aa:	e7f7      	b.n	801b49c <__sfp+0x18>
 801b4ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b4b0:	b9d5      	cbnz	r5, 801b4e8 <__sfp+0x64>
 801b4b2:	4b16      	ldr	r3, [pc, #88]	; (801b50c <__sfp+0x88>)
 801b4b4:	60e3      	str	r3, [r4, #12]
 801b4b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b4ba:	6665      	str	r5, [r4, #100]	; 0x64
 801b4bc:	f7fe f94e 	bl	801975c <__retarget_lock_init_recursive>
 801b4c0:	f7ff ff96 	bl	801b3f0 <__sfp_lock_release>
 801b4c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b4c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b4cc:	6025      	str	r5, [r4, #0]
 801b4ce:	61a5      	str	r5, [r4, #24]
 801b4d0:	2208      	movs	r2, #8
 801b4d2:	4629      	mov	r1, r5
 801b4d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b4d8:	f7fe f97c 	bl	80197d4 <memset>
 801b4dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b4e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b4e4:	4620      	mov	r0, r4
 801b4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b4e8:	3468      	adds	r4, #104	; 0x68
 801b4ea:	e7d9      	b.n	801b4a0 <__sfp+0x1c>
 801b4ec:	2104      	movs	r1, #4
 801b4ee:	4638      	mov	r0, r7
 801b4f0:	f7ff ff62 	bl	801b3b8 <__sfmoreglue>
 801b4f4:	4604      	mov	r4, r0
 801b4f6:	6030      	str	r0, [r6, #0]
 801b4f8:	2800      	cmp	r0, #0
 801b4fa:	d1d5      	bne.n	801b4a8 <__sfp+0x24>
 801b4fc:	f7ff ff78 	bl	801b3f0 <__sfp_lock_release>
 801b500:	230c      	movs	r3, #12
 801b502:	603b      	str	r3, [r7, #0]
 801b504:	e7ee      	b.n	801b4e4 <__sfp+0x60>
 801b506:	bf00      	nop
 801b508:	0801f7a4 	.word	0x0801f7a4
 801b50c:	ffff0001 	.word	0xffff0001

0801b510 <fiprintf>:
 801b510:	b40e      	push	{r1, r2, r3}
 801b512:	b503      	push	{r0, r1, lr}
 801b514:	4601      	mov	r1, r0
 801b516:	ab03      	add	r3, sp, #12
 801b518:	4805      	ldr	r0, [pc, #20]	; (801b530 <fiprintf+0x20>)
 801b51a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b51e:	6800      	ldr	r0, [r0, #0]
 801b520:	9301      	str	r3, [sp, #4]
 801b522:	f001 fc61 	bl	801cde8 <_vfiprintf_r>
 801b526:	b002      	add	sp, #8
 801b528:	f85d eb04 	ldr.w	lr, [sp], #4
 801b52c:	b003      	add	sp, #12
 801b52e:	4770      	bx	lr
 801b530:	20000190 	.word	0x20000190

0801b534 <_fwalk_reent>:
 801b534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b538:	4606      	mov	r6, r0
 801b53a:	4688      	mov	r8, r1
 801b53c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b540:	2700      	movs	r7, #0
 801b542:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b546:	f1b9 0901 	subs.w	r9, r9, #1
 801b54a:	d505      	bpl.n	801b558 <_fwalk_reent+0x24>
 801b54c:	6824      	ldr	r4, [r4, #0]
 801b54e:	2c00      	cmp	r4, #0
 801b550:	d1f7      	bne.n	801b542 <_fwalk_reent+0xe>
 801b552:	4638      	mov	r0, r7
 801b554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b558:	89ab      	ldrh	r3, [r5, #12]
 801b55a:	2b01      	cmp	r3, #1
 801b55c:	d907      	bls.n	801b56e <_fwalk_reent+0x3a>
 801b55e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b562:	3301      	adds	r3, #1
 801b564:	d003      	beq.n	801b56e <_fwalk_reent+0x3a>
 801b566:	4629      	mov	r1, r5
 801b568:	4630      	mov	r0, r6
 801b56a:	47c0      	blx	r8
 801b56c:	4307      	orrs	r7, r0
 801b56e:	3568      	adds	r5, #104	; 0x68
 801b570:	e7e9      	b.n	801b546 <_fwalk_reent+0x12>

0801b572 <rshift>:
 801b572:	6903      	ldr	r3, [r0, #16]
 801b574:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801b578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b57c:	ea4f 1261 	mov.w	r2, r1, asr #5
 801b580:	f100 0414 	add.w	r4, r0, #20
 801b584:	dd45      	ble.n	801b612 <rshift+0xa0>
 801b586:	f011 011f 	ands.w	r1, r1, #31
 801b58a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801b58e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801b592:	d10c      	bne.n	801b5ae <rshift+0x3c>
 801b594:	f100 0710 	add.w	r7, r0, #16
 801b598:	4629      	mov	r1, r5
 801b59a:	42b1      	cmp	r1, r6
 801b59c:	d334      	bcc.n	801b608 <rshift+0x96>
 801b59e:	1a9b      	subs	r3, r3, r2
 801b5a0:	009b      	lsls	r3, r3, #2
 801b5a2:	1eea      	subs	r2, r5, #3
 801b5a4:	4296      	cmp	r6, r2
 801b5a6:	bf38      	it	cc
 801b5a8:	2300      	movcc	r3, #0
 801b5aa:	4423      	add	r3, r4
 801b5ac:	e015      	b.n	801b5da <rshift+0x68>
 801b5ae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801b5b2:	f1c1 0820 	rsb	r8, r1, #32
 801b5b6:	40cf      	lsrs	r7, r1
 801b5b8:	f105 0e04 	add.w	lr, r5, #4
 801b5bc:	46a1      	mov	r9, r4
 801b5be:	4576      	cmp	r6, lr
 801b5c0:	46f4      	mov	ip, lr
 801b5c2:	d815      	bhi.n	801b5f0 <rshift+0x7e>
 801b5c4:	1a9b      	subs	r3, r3, r2
 801b5c6:	009a      	lsls	r2, r3, #2
 801b5c8:	3a04      	subs	r2, #4
 801b5ca:	3501      	adds	r5, #1
 801b5cc:	42ae      	cmp	r6, r5
 801b5ce:	bf38      	it	cc
 801b5d0:	2200      	movcc	r2, #0
 801b5d2:	18a3      	adds	r3, r4, r2
 801b5d4:	50a7      	str	r7, [r4, r2]
 801b5d6:	b107      	cbz	r7, 801b5da <rshift+0x68>
 801b5d8:	3304      	adds	r3, #4
 801b5da:	1b1a      	subs	r2, r3, r4
 801b5dc:	42a3      	cmp	r3, r4
 801b5de:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b5e2:	bf08      	it	eq
 801b5e4:	2300      	moveq	r3, #0
 801b5e6:	6102      	str	r2, [r0, #16]
 801b5e8:	bf08      	it	eq
 801b5ea:	6143      	streq	r3, [r0, #20]
 801b5ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b5f0:	f8dc c000 	ldr.w	ip, [ip]
 801b5f4:	fa0c fc08 	lsl.w	ip, ip, r8
 801b5f8:	ea4c 0707 	orr.w	r7, ip, r7
 801b5fc:	f849 7b04 	str.w	r7, [r9], #4
 801b600:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b604:	40cf      	lsrs	r7, r1
 801b606:	e7da      	b.n	801b5be <rshift+0x4c>
 801b608:	f851 cb04 	ldr.w	ip, [r1], #4
 801b60c:	f847 cf04 	str.w	ip, [r7, #4]!
 801b610:	e7c3      	b.n	801b59a <rshift+0x28>
 801b612:	4623      	mov	r3, r4
 801b614:	e7e1      	b.n	801b5da <rshift+0x68>

0801b616 <__hexdig_fun>:
 801b616:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801b61a:	2b09      	cmp	r3, #9
 801b61c:	d802      	bhi.n	801b624 <__hexdig_fun+0xe>
 801b61e:	3820      	subs	r0, #32
 801b620:	b2c0      	uxtb	r0, r0
 801b622:	4770      	bx	lr
 801b624:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801b628:	2b05      	cmp	r3, #5
 801b62a:	d801      	bhi.n	801b630 <__hexdig_fun+0x1a>
 801b62c:	3847      	subs	r0, #71	; 0x47
 801b62e:	e7f7      	b.n	801b620 <__hexdig_fun+0xa>
 801b630:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801b634:	2b05      	cmp	r3, #5
 801b636:	d801      	bhi.n	801b63c <__hexdig_fun+0x26>
 801b638:	3827      	subs	r0, #39	; 0x27
 801b63a:	e7f1      	b.n	801b620 <__hexdig_fun+0xa>
 801b63c:	2000      	movs	r0, #0
 801b63e:	4770      	bx	lr

0801b640 <__gethex>:
 801b640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b644:	ed2d 8b02 	vpush	{d8}
 801b648:	b089      	sub	sp, #36	; 0x24
 801b64a:	ee08 0a10 	vmov	s16, r0
 801b64e:	9304      	str	r3, [sp, #16]
 801b650:	4bbc      	ldr	r3, [pc, #752]	; (801b944 <__gethex+0x304>)
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	9301      	str	r3, [sp, #4]
 801b656:	4618      	mov	r0, r3
 801b658:	468b      	mov	fp, r1
 801b65a:	4690      	mov	r8, r2
 801b65c:	f7e4 fdc2 	bl	80001e4 <strlen>
 801b660:	9b01      	ldr	r3, [sp, #4]
 801b662:	f8db 2000 	ldr.w	r2, [fp]
 801b666:	4403      	add	r3, r0
 801b668:	4682      	mov	sl, r0
 801b66a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801b66e:	9305      	str	r3, [sp, #20]
 801b670:	1c93      	adds	r3, r2, #2
 801b672:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801b676:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801b67a:	32fe      	adds	r2, #254	; 0xfe
 801b67c:	18d1      	adds	r1, r2, r3
 801b67e:	461f      	mov	r7, r3
 801b680:	f813 0b01 	ldrb.w	r0, [r3], #1
 801b684:	9100      	str	r1, [sp, #0]
 801b686:	2830      	cmp	r0, #48	; 0x30
 801b688:	d0f8      	beq.n	801b67c <__gethex+0x3c>
 801b68a:	f7ff ffc4 	bl	801b616 <__hexdig_fun>
 801b68e:	4604      	mov	r4, r0
 801b690:	2800      	cmp	r0, #0
 801b692:	d13a      	bne.n	801b70a <__gethex+0xca>
 801b694:	9901      	ldr	r1, [sp, #4]
 801b696:	4652      	mov	r2, sl
 801b698:	4638      	mov	r0, r7
 801b69a:	f7fe fceb 	bl	801a074 <strncmp>
 801b69e:	4605      	mov	r5, r0
 801b6a0:	2800      	cmp	r0, #0
 801b6a2:	d168      	bne.n	801b776 <__gethex+0x136>
 801b6a4:	f817 000a 	ldrb.w	r0, [r7, sl]
 801b6a8:	eb07 060a 	add.w	r6, r7, sl
 801b6ac:	f7ff ffb3 	bl	801b616 <__hexdig_fun>
 801b6b0:	2800      	cmp	r0, #0
 801b6b2:	d062      	beq.n	801b77a <__gethex+0x13a>
 801b6b4:	4633      	mov	r3, r6
 801b6b6:	7818      	ldrb	r0, [r3, #0]
 801b6b8:	2830      	cmp	r0, #48	; 0x30
 801b6ba:	461f      	mov	r7, r3
 801b6bc:	f103 0301 	add.w	r3, r3, #1
 801b6c0:	d0f9      	beq.n	801b6b6 <__gethex+0x76>
 801b6c2:	f7ff ffa8 	bl	801b616 <__hexdig_fun>
 801b6c6:	2301      	movs	r3, #1
 801b6c8:	fab0 f480 	clz	r4, r0
 801b6cc:	0964      	lsrs	r4, r4, #5
 801b6ce:	4635      	mov	r5, r6
 801b6d0:	9300      	str	r3, [sp, #0]
 801b6d2:	463a      	mov	r2, r7
 801b6d4:	4616      	mov	r6, r2
 801b6d6:	3201      	adds	r2, #1
 801b6d8:	7830      	ldrb	r0, [r6, #0]
 801b6da:	f7ff ff9c 	bl	801b616 <__hexdig_fun>
 801b6de:	2800      	cmp	r0, #0
 801b6e0:	d1f8      	bne.n	801b6d4 <__gethex+0x94>
 801b6e2:	9901      	ldr	r1, [sp, #4]
 801b6e4:	4652      	mov	r2, sl
 801b6e6:	4630      	mov	r0, r6
 801b6e8:	f7fe fcc4 	bl	801a074 <strncmp>
 801b6ec:	b980      	cbnz	r0, 801b710 <__gethex+0xd0>
 801b6ee:	b94d      	cbnz	r5, 801b704 <__gethex+0xc4>
 801b6f0:	eb06 050a 	add.w	r5, r6, sl
 801b6f4:	462a      	mov	r2, r5
 801b6f6:	4616      	mov	r6, r2
 801b6f8:	3201      	adds	r2, #1
 801b6fa:	7830      	ldrb	r0, [r6, #0]
 801b6fc:	f7ff ff8b 	bl	801b616 <__hexdig_fun>
 801b700:	2800      	cmp	r0, #0
 801b702:	d1f8      	bne.n	801b6f6 <__gethex+0xb6>
 801b704:	1bad      	subs	r5, r5, r6
 801b706:	00ad      	lsls	r5, r5, #2
 801b708:	e004      	b.n	801b714 <__gethex+0xd4>
 801b70a:	2400      	movs	r4, #0
 801b70c:	4625      	mov	r5, r4
 801b70e:	e7e0      	b.n	801b6d2 <__gethex+0x92>
 801b710:	2d00      	cmp	r5, #0
 801b712:	d1f7      	bne.n	801b704 <__gethex+0xc4>
 801b714:	7833      	ldrb	r3, [r6, #0]
 801b716:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b71a:	2b50      	cmp	r3, #80	; 0x50
 801b71c:	d13b      	bne.n	801b796 <__gethex+0x156>
 801b71e:	7873      	ldrb	r3, [r6, #1]
 801b720:	2b2b      	cmp	r3, #43	; 0x2b
 801b722:	d02c      	beq.n	801b77e <__gethex+0x13e>
 801b724:	2b2d      	cmp	r3, #45	; 0x2d
 801b726:	d02e      	beq.n	801b786 <__gethex+0x146>
 801b728:	1c71      	adds	r1, r6, #1
 801b72a:	f04f 0900 	mov.w	r9, #0
 801b72e:	7808      	ldrb	r0, [r1, #0]
 801b730:	f7ff ff71 	bl	801b616 <__hexdig_fun>
 801b734:	1e43      	subs	r3, r0, #1
 801b736:	b2db      	uxtb	r3, r3
 801b738:	2b18      	cmp	r3, #24
 801b73a:	d82c      	bhi.n	801b796 <__gethex+0x156>
 801b73c:	f1a0 0210 	sub.w	r2, r0, #16
 801b740:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b744:	f7ff ff67 	bl	801b616 <__hexdig_fun>
 801b748:	1e43      	subs	r3, r0, #1
 801b74a:	b2db      	uxtb	r3, r3
 801b74c:	2b18      	cmp	r3, #24
 801b74e:	d91d      	bls.n	801b78c <__gethex+0x14c>
 801b750:	f1b9 0f00 	cmp.w	r9, #0
 801b754:	d000      	beq.n	801b758 <__gethex+0x118>
 801b756:	4252      	negs	r2, r2
 801b758:	4415      	add	r5, r2
 801b75a:	f8cb 1000 	str.w	r1, [fp]
 801b75e:	b1e4      	cbz	r4, 801b79a <__gethex+0x15a>
 801b760:	9b00      	ldr	r3, [sp, #0]
 801b762:	2b00      	cmp	r3, #0
 801b764:	bf14      	ite	ne
 801b766:	2700      	movne	r7, #0
 801b768:	2706      	moveq	r7, #6
 801b76a:	4638      	mov	r0, r7
 801b76c:	b009      	add	sp, #36	; 0x24
 801b76e:	ecbd 8b02 	vpop	{d8}
 801b772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b776:	463e      	mov	r6, r7
 801b778:	4625      	mov	r5, r4
 801b77a:	2401      	movs	r4, #1
 801b77c:	e7ca      	b.n	801b714 <__gethex+0xd4>
 801b77e:	f04f 0900 	mov.w	r9, #0
 801b782:	1cb1      	adds	r1, r6, #2
 801b784:	e7d3      	b.n	801b72e <__gethex+0xee>
 801b786:	f04f 0901 	mov.w	r9, #1
 801b78a:	e7fa      	b.n	801b782 <__gethex+0x142>
 801b78c:	230a      	movs	r3, #10
 801b78e:	fb03 0202 	mla	r2, r3, r2, r0
 801b792:	3a10      	subs	r2, #16
 801b794:	e7d4      	b.n	801b740 <__gethex+0x100>
 801b796:	4631      	mov	r1, r6
 801b798:	e7df      	b.n	801b75a <__gethex+0x11a>
 801b79a:	1bf3      	subs	r3, r6, r7
 801b79c:	3b01      	subs	r3, #1
 801b79e:	4621      	mov	r1, r4
 801b7a0:	2b07      	cmp	r3, #7
 801b7a2:	dc0b      	bgt.n	801b7bc <__gethex+0x17c>
 801b7a4:	ee18 0a10 	vmov	r0, s16
 801b7a8:	f000 fae6 	bl	801bd78 <_Balloc>
 801b7ac:	4604      	mov	r4, r0
 801b7ae:	b940      	cbnz	r0, 801b7c2 <__gethex+0x182>
 801b7b0:	4b65      	ldr	r3, [pc, #404]	; (801b948 <__gethex+0x308>)
 801b7b2:	4602      	mov	r2, r0
 801b7b4:	21de      	movs	r1, #222	; 0xde
 801b7b6:	4865      	ldr	r0, [pc, #404]	; (801b94c <__gethex+0x30c>)
 801b7b8:	f7ff fcd8 	bl	801b16c <__assert_func>
 801b7bc:	3101      	adds	r1, #1
 801b7be:	105b      	asrs	r3, r3, #1
 801b7c0:	e7ee      	b.n	801b7a0 <__gethex+0x160>
 801b7c2:	f100 0914 	add.w	r9, r0, #20
 801b7c6:	f04f 0b00 	mov.w	fp, #0
 801b7ca:	f1ca 0301 	rsb	r3, sl, #1
 801b7ce:	f8cd 9008 	str.w	r9, [sp, #8]
 801b7d2:	f8cd b000 	str.w	fp, [sp]
 801b7d6:	9306      	str	r3, [sp, #24]
 801b7d8:	42b7      	cmp	r7, r6
 801b7da:	d340      	bcc.n	801b85e <__gethex+0x21e>
 801b7dc:	9802      	ldr	r0, [sp, #8]
 801b7de:	9b00      	ldr	r3, [sp, #0]
 801b7e0:	f840 3b04 	str.w	r3, [r0], #4
 801b7e4:	eba0 0009 	sub.w	r0, r0, r9
 801b7e8:	1080      	asrs	r0, r0, #2
 801b7ea:	0146      	lsls	r6, r0, #5
 801b7ec:	6120      	str	r0, [r4, #16]
 801b7ee:	4618      	mov	r0, r3
 801b7f0:	f000 fbb8 	bl	801bf64 <__hi0bits>
 801b7f4:	1a30      	subs	r0, r6, r0
 801b7f6:	f8d8 6000 	ldr.w	r6, [r8]
 801b7fa:	42b0      	cmp	r0, r6
 801b7fc:	dd63      	ble.n	801b8c6 <__gethex+0x286>
 801b7fe:	1b87      	subs	r7, r0, r6
 801b800:	4639      	mov	r1, r7
 801b802:	4620      	mov	r0, r4
 801b804:	f000 ff52 	bl	801c6ac <__any_on>
 801b808:	4682      	mov	sl, r0
 801b80a:	b1a8      	cbz	r0, 801b838 <__gethex+0x1f8>
 801b80c:	1e7b      	subs	r3, r7, #1
 801b80e:	1159      	asrs	r1, r3, #5
 801b810:	f003 021f 	and.w	r2, r3, #31
 801b814:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801b818:	f04f 0a01 	mov.w	sl, #1
 801b81c:	fa0a f202 	lsl.w	r2, sl, r2
 801b820:	420a      	tst	r2, r1
 801b822:	d009      	beq.n	801b838 <__gethex+0x1f8>
 801b824:	4553      	cmp	r3, sl
 801b826:	dd05      	ble.n	801b834 <__gethex+0x1f4>
 801b828:	1eb9      	subs	r1, r7, #2
 801b82a:	4620      	mov	r0, r4
 801b82c:	f000 ff3e 	bl	801c6ac <__any_on>
 801b830:	2800      	cmp	r0, #0
 801b832:	d145      	bne.n	801b8c0 <__gethex+0x280>
 801b834:	f04f 0a02 	mov.w	sl, #2
 801b838:	4639      	mov	r1, r7
 801b83a:	4620      	mov	r0, r4
 801b83c:	f7ff fe99 	bl	801b572 <rshift>
 801b840:	443d      	add	r5, r7
 801b842:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b846:	42ab      	cmp	r3, r5
 801b848:	da4c      	bge.n	801b8e4 <__gethex+0x2a4>
 801b84a:	ee18 0a10 	vmov	r0, s16
 801b84e:	4621      	mov	r1, r4
 801b850:	f000 fad2 	bl	801bdf8 <_Bfree>
 801b854:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b856:	2300      	movs	r3, #0
 801b858:	6013      	str	r3, [r2, #0]
 801b85a:	27a3      	movs	r7, #163	; 0xa3
 801b85c:	e785      	b.n	801b76a <__gethex+0x12a>
 801b85e:	1e73      	subs	r3, r6, #1
 801b860:	9a05      	ldr	r2, [sp, #20]
 801b862:	9303      	str	r3, [sp, #12]
 801b864:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b868:	4293      	cmp	r3, r2
 801b86a:	d019      	beq.n	801b8a0 <__gethex+0x260>
 801b86c:	f1bb 0f20 	cmp.w	fp, #32
 801b870:	d107      	bne.n	801b882 <__gethex+0x242>
 801b872:	9b02      	ldr	r3, [sp, #8]
 801b874:	9a00      	ldr	r2, [sp, #0]
 801b876:	f843 2b04 	str.w	r2, [r3], #4
 801b87a:	9302      	str	r3, [sp, #8]
 801b87c:	2300      	movs	r3, #0
 801b87e:	9300      	str	r3, [sp, #0]
 801b880:	469b      	mov	fp, r3
 801b882:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801b886:	f7ff fec6 	bl	801b616 <__hexdig_fun>
 801b88a:	9b00      	ldr	r3, [sp, #0]
 801b88c:	f000 000f 	and.w	r0, r0, #15
 801b890:	fa00 f00b 	lsl.w	r0, r0, fp
 801b894:	4303      	orrs	r3, r0
 801b896:	9300      	str	r3, [sp, #0]
 801b898:	f10b 0b04 	add.w	fp, fp, #4
 801b89c:	9b03      	ldr	r3, [sp, #12]
 801b89e:	e00d      	b.n	801b8bc <__gethex+0x27c>
 801b8a0:	9b03      	ldr	r3, [sp, #12]
 801b8a2:	9a06      	ldr	r2, [sp, #24]
 801b8a4:	4413      	add	r3, r2
 801b8a6:	42bb      	cmp	r3, r7
 801b8a8:	d3e0      	bcc.n	801b86c <__gethex+0x22c>
 801b8aa:	4618      	mov	r0, r3
 801b8ac:	9901      	ldr	r1, [sp, #4]
 801b8ae:	9307      	str	r3, [sp, #28]
 801b8b0:	4652      	mov	r2, sl
 801b8b2:	f7fe fbdf 	bl	801a074 <strncmp>
 801b8b6:	9b07      	ldr	r3, [sp, #28]
 801b8b8:	2800      	cmp	r0, #0
 801b8ba:	d1d7      	bne.n	801b86c <__gethex+0x22c>
 801b8bc:	461e      	mov	r6, r3
 801b8be:	e78b      	b.n	801b7d8 <__gethex+0x198>
 801b8c0:	f04f 0a03 	mov.w	sl, #3
 801b8c4:	e7b8      	b.n	801b838 <__gethex+0x1f8>
 801b8c6:	da0a      	bge.n	801b8de <__gethex+0x29e>
 801b8c8:	1a37      	subs	r7, r6, r0
 801b8ca:	4621      	mov	r1, r4
 801b8cc:	ee18 0a10 	vmov	r0, s16
 801b8d0:	463a      	mov	r2, r7
 801b8d2:	f000 fcad 	bl	801c230 <__lshift>
 801b8d6:	1bed      	subs	r5, r5, r7
 801b8d8:	4604      	mov	r4, r0
 801b8da:	f100 0914 	add.w	r9, r0, #20
 801b8de:	f04f 0a00 	mov.w	sl, #0
 801b8e2:	e7ae      	b.n	801b842 <__gethex+0x202>
 801b8e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b8e8:	42a8      	cmp	r0, r5
 801b8ea:	dd72      	ble.n	801b9d2 <__gethex+0x392>
 801b8ec:	1b45      	subs	r5, r0, r5
 801b8ee:	42ae      	cmp	r6, r5
 801b8f0:	dc36      	bgt.n	801b960 <__gethex+0x320>
 801b8f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b8f6:	2b02      	cmp	r3, #2
 801b8f8:	d02a      	beq.n	801b950 <__gethex+0x310>
 801b8fa:	2b03      	cmp	r3, #3
 801b8fc:	d02c      	beq.n	801b958 <__gethex+0x318>
 801b8fe:	2b01      	cmp	r3, #1
 801b900:	d115      	bne.n	801b92e <__gethex+0x2ee>
 801b902:	42ae      	cmp	r6, r5
 801b904:	d113      	bne.n	801b92e <__gethex+0x2ee>
 801b906:	2e01      	cmp	r6, #1
 801b908:	d10b      	bne.n	801b922 <__gethex+0x2e2>
 801b90a:	9a04      	ldr	r2, [sp, #16]
 801b90c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b910:	6013      	str	r3, [r2, #0]
 801b912:	2301      	movs	r3, #1
 801b914:	6123      	str	r3, [r4, #16]
 801b916:	f8c9 3000 	str.w	r3, [r9]
 801b91a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b91c:	2762      	movs	r7, #98	; 0x62
 801b91e:	601c      	str	r4, [r3, #0]
 801b920:	e723      	b.n	801b76a <__gethex+0x12a>
 801b922:	1e71      	subs	r1, r6, #1
 801b924:	4620      	mov	r0, r4
 801b926:	f000 fec1 	bl	801c6ac <__any_on>
 801b92a:	2800      	cmp	r0, #0
 801b92c:	d1ed      	bne.n	801b90a <__gethex+0x2ca>
 801b92e:	ee18 0a10 	vmov	r0, s16
 801b932:	4621      	mov	r1, r4
 801b934:	f000 fa60 	bl	801bdf8 <_Bfree>
 801b938:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b93a:	2300      	movs	r3, #0
 801b93c:	6013      	str	r3, [r2, #0]
 801b93e:	2750      	movs	r7, #80	; 0x50
 801b940:	e713      	b.n	801b76a <__gethex+0x12a>
 801b942:	bf00      	nop
 801b944:	0801f998 	.word	0x0801f998
 801b948:	0801f91c 	.word	0x0801f91c
 801b94c:	0801f92d 	.word	0x0801f92d
 801b950:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b952:	2b00      	cmp	r3, #0
 801b954:	d1eb      	bne.n	801b92e <__gethex+0x2ee>
 801b956:	e7d8      	b.n	801b90a <__gethex+0x2ca>
 801b958:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d1d5      	bne.n	801b90a <__gethex+0x2ca>
 801b95e:	e7e6      	b.n	801b92e <__gethex+0x2ee>
 801b960:	1e6f      	subs	r7, r5, #1
 801b962:	f1ba 0f00 	cmp.w	sl, #0
 801b966:	d131      	bne.n	801b9cc <__gethex+0x38c>
 801b968:	b127      	cbz	r7, 801b974 <__gethex+0x334>
 801b96a:	4639      	mov	r1, r7
 801b96c:	4620      	mov	r0, r4
 801b96e:	f000 fe9d 	bl	801c6ac <__any_on>
 801b972:	4682      	mov	sl, r0
 801b974:	117b      	asrs	r3, r7, #5
 801b976:	2101      	movs	r1, #1
 801b978:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801b97c:	f007 071f 	and.w	r7, r7, #31
 801b980:	fa01 f707 	lsl.w	r7, r1, r7
 801b984:	421f      	tst	r7, r3
 801b986:	4629      	mov	r1, r5
 801b988:	4620      	mov	r0, r4
 801b98a:	bf18      	it	ne
 801b98c:	f04a 0a02 	orrne.w	sl, sl, #2
 801b990:	1b76      	subs	r6, r6, r5
 801b992:	f7ff fdee 	bl	801b572 <rshift>
 801b996:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b99a:	2702      	movs	r7, #2
 801b99c:	f1ba 0f00 	cmp.w	sl, #0
 801b9a0:	d048      	beq.n	801ba34 <__gethex+0x3f4>
 801b9a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b9a6:	2b02      	cmp	r3, #2
 801b9a8:	d015      	beq.n	801b9d6 <__gethex+0x396>
 801b9aa:	2b03      	cmp	r3, #3
 801b9ac:	d017      	beq.n	801b9de <__gethex+0x39e>
 801b9ae:	2b01      	cmp	r3, #1
 801b9b0:	d109      	bne.n	801b9c6 <__gethex+0x386>
 801b9b2:	f01a 0f02 	tst.w	sl, #2
 801b9b6:	d006      	beq.n	801b9c6 <__gethex+0x386>
 801b9b8:	f8d9 0000 	ldr.w	r0, [r9]
 801b9bc:	ea4a 0a00 	orr.w	sl, sl, r0
 801b9c0:	f01a 0f01 	tst.w	sl, #1
 801b9c4:	d10e      	bne.n	801b9e4 <__gethex+0x3a4>
 801b9c6:	f047 0710 	orr.w	r7, r7, #16
 801b9ca:	e033      	b.n	801ba34 <__gethex+0x3f4>
 801b9cc:	f04f 0a01 	mov.w	sl, #1
 801b9d0:	e7d0      	b.n	801b974 <__gethex+0x334>
 801b9d2:	2701      	movs	r7, #1
 801b9d4:	e7e2      	b.n	801b99c <__gethex+0x35c>
 801b9d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b9d8:	f1c3 0301 	rsb	r3, r3, #1
 801b9dc:	9315      	str	r3, [sp, #84]	; 0x54
 801b9de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	d0f0      	beq.n	801b9c6 <__gethex+0x386>
 801b9e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b9e8:	f104 0314 	add.w	r3, r4, #20
 801b9ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801b9f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801b9f4:	f04f 0c00 	mov.w	ip, #0
 801b9f8:	4618      	mov	r0, r3
 801b9fa:	f853 2b04 	ldr.w	r2, [r3], #4
 801b9fe:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801ba02:	d01c      	beq.n	801ba3e <__gethex+0x3fe>
 801ba04:	3201      	adds	r2, #1
 801ba06:	6002      	str	r2, [r0, #0]
 801ba08:	2f02      	cmp	r7, #2
 801ba0a:	f104 0314 	add.w	r3, r4, #20
 801ba0e:	d13f      	bne.n	801ba90 <__gethex+0x450>
 801ba10:	f8d8 2000 	ldr.w	r2, [r8]
 801ba14:	3a01      	subs	r2, #1
 801ba16:	42b2      	cmp	r2, r6
 801ba18:	d10a      	bne.n	801ba30 <__gethex+0x3f0>
 801ba1a:	1171      	asrs	r1, r6, #5
 801ba1c:	2201      	movs	r2, #1
 801ba1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ba22:	f006 061f 	and.w	r6, r6, #31
 801ba26:	fa02 f606 	lsl.w	r6, r2, r6
 801ba2a:	421e      	tst	r6, r3
 801ba2c:	bf18      	it	ne
 801ba2e:	4617      	movne	r7, r2
 801ba30:	f047 0720 	orr.w	r7, r7, #32
 801ba34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ba36:	601c      	str	r4, [r3, #0]
 801ba38:	9b04      	ldr	r3, [sp, #16]
 801ba3a:	601d      	str	r5, [r3, #0]
 801ba3c:	e695      	b.n	801b76a <__gethex+0x12a>
 801ba3e:	4299      	cmp	r1, r3
 801ba40:	f843 cc04 	str.w	ip, [r3, #-4]
 801ba44:	d8d8      	bhi.n	801b9f8 <__gethex+0x3b8>
 801ba46:	68a3      	ldr	r3, [r4, #8]
 801ba48:	459b      	cmp	fp, r3
 801ba4a:	db19      	blt.n	801ba80 <__gethex+0x440>
 801ba4c:	6861      	ldr	r1, [r4, #4]
 801ba4e:	ee18 0a10 	vmov	r0, s16
 801ba52:	3101      	adds	r1, #1
 801ba54:	f000 f990 	bl	801bd78 <_Balloc>
 801ba58:	4681      	mov	r9, r0
 801ba5a:	b918      	cbnz	r0, 801ba64 <__gethex+0x424>
 801ba5c:	4b1a      	ldr	r3, [pc, #104]	; (801bac8 <__gethex+0x488>)
 801ba5e:	4602      	mov	r2, r0
 801ba60:	2184      	movs	r1, #132	; 0x84
 801ba62:	e6a8      	b.n	801b7b6 <__gethex+0x176>
 801ba64:	6922      	ldr	r2, [r4, #16]
 801ba66:	3202      	adds	r2, #2
 801ba68:	f104 010c 	add.w	r1, r4, #12
 801ba6c:	0092      	lsls	r2, r2, #2
 801ba6e:	300c      	adds	r0, #12
 801ba70:	f7fd fe88 	bl	8019784 <memcpy>
 801ba74:	4621      	mov	r1, r4
 801ba76:	ee18 0a10 	vmov	r0, s16
 801ba7a:	f000 f9bd 	bl	801bdf8 <_Bfree>
 801ba7e:	464c      	mov	r4, r9
 801ba80:	6923      	ldr	r3, [r4, #16]
 801ba82:	1c5a      	adds	r2, r3, #1
 801ba84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ba88:	6122      	str	r2, [r4, #16]
 801ba8a:	2201      	movs	r2, #1
 801ba8c:	615a      	str	r2, [r3, #20]
 801ba8e:	e7bb      	b.n	801ba08 <__gethex+0x3c8>
 801ba90:	6922      	ldr	r2, [r4, #16]
 801ba92:	455a      	cmp	r2, fp
 801ba94:	dd0b      	ble.n	801baae <__gethex+0x46e>
 801ba96:	2101      	movs	r1, #1
 801ba98:	4620      	mov	r0, r4
 801ba9a:	f7ff fd6a 	bl	801b572 <rshift>
 801ba9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801baa2:	3501      	adds	r5, #1
 801baa4:	42ab      	cmp	r3, r5
 801baa6:	f6ff aed0 	blt.w	801b84a <__gethex+0x20a>
 801baaa:	2701      	movs	r7, #1
 801baac:	e7c0      	b.n	801ba30 <__gethex+0x3f0>
 801baae:	f016 061f 	ands.w	r6, r6, #31
 801bab2:	d0fa      	beq.n	801baaa <__gethex+0x46a>
 801bab4:	449a      	add	sl, r3
 801bab6:	f1c6 0620 	rsb	r6, r6, #32
 801baba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801babe:	f000 fa51 	bl	801bf64 <__hi0bits>
 801bac2:	42b0      	cmp	r0, r6
 801bac4:	dbe7      	blt.n	801ba96 <__gethex+0x456>
 801bac6:	e7f0      	b.n	801baaa <__gethex+0x46a>
 801bac8:	0801f91c 	.word	0x0801f91c

0801bacc <L_shift>:
 801bacc:	f1c2 0208 	rsb	r2, r2, #8
 801bad0:	0092      	lsls	r2, r2, #2
 801bad2:	b570      	push	{r4, r5, r6, lr}
 801bad4:	f1c2 0620 	rsb	r6, r2, #32
 801bad8:	6843      	ldr	r3, [r0, #4]
 801bada:	6804      	ldr	r4, [r0, #0]
 801badc:	fa03 f506 	lsl.w	r5, r3, r6
 801bae0:	432c      	orrs	r4, r5
 801bae2:	40d3      	lsrs	r3, r2
 801bae4:	6004      	str	r4, [r0, #0]
 801bae6:	f840 3f04 	str.w	r3, [r0, #4]!
 801baea:	4288      	cmp	r0, r1
 801baec:	d3f4      	bcc.n	801bad8 <L_shift+0xc>
 801baee:	bd70      	pop	{r4, r5, r6, pc}

0801baf0 <__match>:
 801baf0:	b530      	push	{r4, r5, lr}
 801baf2:	6803      	ldr	r3, [r0, #0]
 801baf4:	3301      	adds	r3, #1
 801baf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bafa:	b914      	cbnz	r4, 801bb02 <__match+0x12>
 801bafc:	6003      	str	r3, [r0, #0]
 801bafe:	2001      	movs	r0, #1
 801bb00:	bd30      	pop	{r4, r5, pc}
 801bb02:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bb06:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801bb0a:	2d19      	cmp	r5, #25
 801bb0c:	bf98      	it	ls
 801bb0e:	3220      	addls	r2, #32
 801bb10:	42a2      	cmp	r2, r4
 801bb12:	d0f0      	beq.n	801baf6 <__match+0x6>
 801bb14:	2000      	movs	r0, #0
 801bb16:	e7f3      	b.n	801bb00 <__match+0x10>

0801bb18 <__hexnan>:
 801bb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb1c:	680b      	ldr	r3, [r1, #0]
 801bb1e:	6801      	ldr	r1, [r0, #0]
 801bb20:	115e      	asrs	r6, r3, #5
 801bb22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801bb26:	f013 031f 	ands.w	r3, r3, #31
 801bb2a:	b087      	sub	sp, #28
 801bb2c:	bf18      	it	ne
 801bb2e:	3604      	addne	r6, #4
 801bb30:	2500      	movs	r5, #0
 801bb32:	1f37      	subs	r7, r6, #4
 801bb34:	4682      	mov	sl, r0
 801bb36:	4690      	mov	r8, r2
 801bb38:	9301      	str	r3, [sp, #4]
 801bb3a:	f846 5c04 	str.w	r5, [r6, #-4]
 801bb3e:	46b9      	mov	r9, r7
 801bb40:	463c      	mov	r4, r7
 801bb42:	9502      	str	r5, [sp, #8]
 801bb44:	46ab      	mov	fp, r5
 801bb46:	784a      	ldrb	r2, [r1, #1]
 801bb48:	1c4b      	adds	r3, r1, #1
 801bb4a:	9303      	str	r3, [sp, #12]
 801bb4c:	b342      	cbz	r2, 801bba0 <__hexnan+0x88>
 801bb4e:	4610      	mov	r0, r2
 801bb50:	9105      	str	r1, [sp, #20]
 801bb52:	9204      	str	r2, [sp, #16]
 801bb54:	f7ff fd5f 	bl	801b616 <__hexdig_fun>
 801bb58:	2800      	cmp	r0, #0
 801bb5a:	d14f      	bne.n	801bbfc <__hexnan+0xe4>
 801bb5c:	9a04      	ldr	r2, [sp, #16]
 801bb5e:	9905      	ldr	r1, [sp, #20]
 801bb60:	2a20      	cmp	r2, #32
 801bb62:	d818      	bhi.n	801bb96 <__hexnan+0x7e>
 801bb64:	9b02      	ldr	r3, [sp, #8]
 801bb66:	459b      	cmp	fp, r3
 801bb68:	dd13      	ble.n	801bb92 <__hexnan+0x7a>
 801bb6a:	454c      	cmp	r4, r9
 801bb6c:	d206      	bcs.n	801bb7c <__hexnan+0x64>
 801bb6e:	2d07      	cmp	r5, #7
 801bb70:	dc04      	bgt.n	801bb7c <__hexnan+0x64>
 801bb72:	462a      	mov	r2, r5
 801bb74:	4649      	mov	r1, r9
 801bb76:	4620      	mov	r0, r4
 801bb78:	f7ff ffa8 	bl	801bacc <L_shift>
 801bb7c:	4544      	cmp	r4, r8
 801bb7e:	d950      	bls.n	801bc22 <__hexnan+0x10a>
 801bb80:	2300      	movs	r3, #0
 801bb82:	f1a4 0904 	sub.w	r9, r4, #4
 801bb86:	f844 3c04 	str.w	r3, [r4, #-4]
 801bb8a:	f8cd b008 	str.w	fp, [sp, #8]
 801bb8e:	464c      	mov	r4, r9
 801bb90:	461d      	mov	r5, r3
 801bb92:	9903      	ldr	r1, [sp, #12]
 801bb94:	e7d7      	b.n	801bb46 <__hexnan+0x2e>
 801bb96:	2a29      	cmp	r2, #41	; 0x29
 801bb98:	d156      	bne.n	801bc48 <__hexnan+0x130>
 801bb9a:	3102      	adds	r1, #2
 801bb9c:	f8ca 1000 	str.w	r1, [sl]
 801bba0:	f1bb 0f00 	cmp.w	fp, #0
 801bba4:	d050      	beq.n	801bc48 <__hexnan+0x130>
 801bba6:	454c      	cmp	r4, r9
 801bba8:	d206      	bcs.n	801bbb8 <__hexnan+0xa0>
 801bbaa:	2d07      	cmp	r5, #7
 801bbac:	dc04      	bgt.n	801bbb8 <__hexnan+0xa0>
 801bbae:	462a      	mov	r2, r5
 801bbb0:	4649      	mov	r1, r9
 801bbb2:	4620      	mov	r0, r4
 801bbb4:	f7ff ff8a 	bl	801bacc <L_shift>
 801bbb8:	4544      	cmp	r4, r8
 801bbba:	d934      	bls.n	801bc26 <__hexnan+0x10e>
 801bbbc:	f1a8 0204 	sub.w	r2, r8, #4
 801bbc0:	4623      	mov	r3, r4
 801bbc2:	f853 1b04 	ldr.w	r1, [r3], #4
 801bbc6:	f842 1f04 	str.w	r1, [r2, #4]!
 801bbca:	429f      	cmp	r7, r3
 801bbcc:	d2f9      	bcs.n	801bbc2 <__hexnan+0xaa>
 801bbce:	1b3b      	subs	r3, r7, r4
 801bbd0:	f023 0303 	bic.w	r3, r3, #3
 801bbd4:	3304      	adds	r3, #4
 801bbd6:	3401      	adds	r4, #1
 801bbd8:	3e03      	subs	r6, #3
 801bbda:	42b4      	cmp	r4, r6
 801bbdc:	bf88      	it	hi
 801bbde:	2304      	movhi	r3, #4
 801bbe0:	4443      	add	r3, r8
 801bbe2:	2200      	movs	r2, #0
 801bbe4:	f843 2b04 	str.w	r2, [r3], #4
 801bbe8:	429f      	cmp	r7, r3
 801bbea:	d2fb      	bcs.n	801bbe4 <__hexnan+0xcc>
 801bbec:	683b      	ldr	r3, [r7, #0]
 801bbee:	b91b      	cbnz	r3, 801bbf8 <__hexnan+0xe0>
 801bbf0:	4547      	cmp	r7, r8
 801bbf2:	d127      	bne.n	801bc44 <__hexnan+0x12c>
 801bbf4:	2301      	movs	r3, #1
 801bbf6:	603b      	str	r3, [r7, #0]
 801bbf8:	2005      	movs	r0, #5
 801bbfa:	e026      	b.n	801bc4a <__hexnan+0x132>
 801bbfc:	3501      	adds	r5, #1
 801bbfe:	2d08      	cmp	r5, #8
 801bc00:	f10b 0b01 	add.w	fp, fp, #1
 801bc04:	dd06      	ble.n	801bc14 <__hexnan+0xfc>
 801bc06:	4544      	cmp	r4, r8
 801bc08:	d9c3      	bls.n	801bb92 <__hexnan+0x7a>
 801bc0a:	2300      	movs	r3, #0
 801bc0c:	f844 3c04 	str.w	r3, [r4, #-4]
 801bc10:	2501      	movs	r5, #1
 801bc12:	3c04      	subs	r4, #4
 801bc14:	6822      	ldr	r2, [r4, #0]
 801bc16:	f000 000f 	and.w	r0, r0, #15
 801bc1a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801bc1e:	6022      	str	r2, [r4, #0]
 801bc20:	e7b7      	b.n	801bb92 <__hexnan+0x7a>
 801bc22:	2508      	movs	r5, #8
 801bc24:	e7b5      	b.n	801bb92 <__hexnan+0x7a>
 801bc26:	9b01      	ldr	r3, [sp, #4]
 801bc28:	2b00      	cmp	r3, #0
 801bc2a:	d0df      	beq.n	801bbec <__hexnan+0xd4>
 801bc2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bc30:	f1c3 0320 	rsb	r3, r3, #32
 801bc34:	fa22 f303 	lsr.w	r3, r2, r3
 801bc38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801bc3c:	401a      	ands	r2, r3
 801bc3e:	f846 2c04 	str.w	r2, [r6, #-4]
 801bc42:	e7d3      	b.n	801bbec <__hexnan+0xd4>
 801bc44:	3f04      	subs	r7, #4
 801bc46:	e7d1      	b.n	801bbec <__hexnan+0xd4>
 801bc48:	2004      	movs	r0, #4
 801bc4a:	b007      	add	sp, #28
 801bc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bc50 <_lseek_r>:
 801bc50:	b538      	push	{r3, r4, r5, lr}
 801bc52:	4d07      	ldr	r5, [pc, #28]	; (801bc70 <_lseek_r+0x20>)
 801bc54:	4604      	mov	r4, r0
 801bc56:	4608      	mov	r0, r1
 801bc58:	4611      	mov	r1, r2
 801bc5a:	2200      	movs	r2, #0
 801bc5c:	602a      	str	r2, [r5, #0]
 801bc5e:	461a      	mov	r2, r3
 801bc60:	f7e7 ff7c 	bl	8003b5c <_lseek>
 801bc64:	1c43      	adds	r3, r0, #1
 801bc66:	d102      	bne.n	801bc6e <_lseek_r+0x1e>
 801bc68:	682b      	ldr	r3, [r5, #0]
 801bc6a:	b103      	cbz	r3, 801bc6e <_lseek_r+0x1e>
 801bc6c:	6023      	str	r3, [r4, #0]
 801bc6e:	bd38      	pop	{r3, r4, r5, pc}
 801bc70:	2001604c 	.word	0x2001604c

0801bc74 <__swhatbuf_r>:
 801bc74:	b570      	push	{r4, r5, r6, lr}
 801bc76:	460e      	mov	r6, r1
 801bc78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bc7c:	2900      	cmp	r1, #0
 801bc7e:	b096      	sub	sp, #88	; 0x58
 801bc80:	4614      	mov	r4, r2
 801bc82:	461d      	mov	r5, r3
 801bc84:	da07      	bge.n	801bc96 <__swhatbuf_r+0x22>
 801bc86:	2300      	movs	r3, #0
 801bc88:	602b      	str	r3, [r5, #0]
 801bc8a:	89b3      	ldrh	r3, [r6, #12]
 801bc8c:	061a      	lsls	r2, r3, #24
 801bc8e:	d410      	bmi.n	801bcb2 <__swhatbuf_r+0x3e>
 801bc90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bc94:	e00e      	b.n	801bcb4 <__swhatbuf_r+0x40>
 801bc96:	466a      	mov	r2, sp
 801bc98:	f001 fd5a 	bl	801d750 <_fstat_r>
 801bc9c:	2800      	cmp	r0, #0
 801bc9e:	dbf2      	blt.n	801bc86 <__swhatbuf_r+0x12>
 801bca0:	9a01      	ldr	r2, [sp, #4]
 801bca2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bca6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bcaa:	425a      	negs	r2, r3
 801bcac:	415a      	adcs	r2, r3
 801bcae:	602a      	str	r2, [r5, #0]
 801bcb0:	e7ee      	b.n	801bc90 <__swhatbuf_r+0x1c>
 801bcb2:	2340      	movs	r3, #64	; 0x40
 801bcb4:	2000      	movs	r0, #0
 801bcb6:	6023      	str	r3, [r4, #0]
 801bcb8:	b016      	add	sp, #88	; 0x58
 801bcba:	bd70      	pop	{r4, r5, r6, pc}

0801bcbc <__smakebuf_r>:
 801bcbc:	898b      	ldrh	r3, [r1, #12]
 801bcbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bcc0:	079d      	lsls	r5, r3, #30
 801bcc2:	4606      	mov	r6, r0
 801bcc4:	460c      	mov	r4, r1
 801bcc6:	d507      	bpl.n	801bcd8 <__smakebuf_r+0x1c>
 801bcc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bccc:	6023      	str	r3, [r4, #0]
 801bcce:	6123      	str	r3, [r4, #16]
 801bcd0:	2301      	movs	r3, #1
 801bcd2:	6163      	str	r3, [r4, #20]
 801bcd4:	b002      	add	sp, #8
 801bcd6:	bd70      	pop	{r4, r5, r6, pc}
 801bcd8:	ab01      	add	r3, sp, #4
 801bcda:	466a      	mov	r2, sp
 801bcdc:	f7ff ffca 	bl	801bc74 <__swhatbuf_r>
 801bce0:	9900      	ldr	r1, [sp, #0]
 801bce2:	4605      	mov	r5, r0
 801bce4:	4630      	mov	r0, r6
 801bce6:	f7fd fddd 	bl	80198a4 <_malloc_r>
 801bcea:	b948      	cbnz	r0, 801bd00 <__smakebuf_r+0x44>
 801bcec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bcf0:	059a      	lsls	r2, r3, #22
 801bcf2:	d4ef      	bmi.n	801bcd4 <__smakebuf_r+0x18>
 801bcf4:	f023 0303 	bic.w	r3, r3, #3
 801bcf8:	f043 0302 	orr.w	r3, r3, #2
 801bcfc:	81a3      	strh	r3, [r4, #12]
 801bcfe:	e7e3      	b.n	801bcc8 <__smakebuf_r+0xc>
 801bd00:	4b0d      	ldr	r3, [pc, #52]	; (801bd38 <__smakebuf_r+0x7c>)
 801bd02:	62b3      	str	r3, [r6, #40]	; 0x28
 801bd04:	89a3      	ldrh	r3, [r4, #12]
 801bd06:	6020      	str	r0, [r4, #0]
 801bd08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bd0c:	81a3      	strh	r3, [r4, #12]
 801bd0e:	9b00      	ldr	r3, [sp, #0]
 801bd10:	6163      	str	r3, [r4, #20]
 801bd12:	9b01      	ldr	r3, [sp, #4]
 801bd14:	6120      	str	r0, [r4, #16]
 801bd16:	b15b      	cbz	r3, 801bd30 <__smakebuf_r+0x74>
 801bd18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bd1c:	4630      	mov	r0, r6
 801bd1e:	f001 fd29 	bl	801d774 <_isatty_r>
 801bd22:	b128      	cbz	r0, 801bd30 <__smakebuf_r+0x74>
 801bd24:	89a3      	ldrh	r3, [r4, #12]
 801bd26:	f023 0303 	bic.w	r3, r3, #3
 801bd2a:	f043 0301 	orr.w	r3, r3, #1
 801bd2e:	81a3      	strh	r3, [r4, #12]
 801bd30:	89a0      	ldrh	r0, [r4, #12]
 801bd32:	4305      	orrs	r5, r0
 801bd34:	81a5      	strh	r5, [r4, #12]
 801bd36:	e7cd      	b.n	801bcd4 <__smakebuf_r+0x18>
 801bd38:	0801b3ad 	.word	0x0801b3ad

0801bd3c <__ascii_mbtowc>:
 801bd3c:	b082      	sub	sp, #8
 801bd3e:	b901      	cbnz	r1, 801bd42 <__ascii_mbtowc+0x6>
 801bd40:	a901      	add	r1, sp, #4
 801bd42:	b142      	cbz	r2, 801bd56 <__ascii_mbtowc+0x1a>
 801bd44:	b14b      	cbz	r3, 801bd5a <__ascii_mbtowc+0x1e>
 801bd46:	7813      	ldrb	r3, [r2, #0]
 801bd48:	600b      	str	r3, [r1, #0]
 801bd4a:	7812      	ldrb	r2, [r2, #0]
 801bd4c:	1e10      	subs	r0, r2, #0
 801bd4e:	bf18      	it	ne
 801bd50:	2001      	movne	r0, #1
 801bd52:	b002      	add	sp, #8
 801bd54:	4770      	bx	lr
 801bd56:	4610      	mov	r0, r2
 801bd58:	e7fb      	b.n	801bd52 <__ascii_mbtowc+0x16>
 801bd5a:	f06f 0001 	mvn.w	r0, #1
 801bd5e:	e7f8      	b.n	801bd52 <__ascii_mbtowc+0x16>

0801bd60 <__malloc_lock>:
 801bd60:	4801      	ldr	r0, [pc, #4]	; (801bd68 <__malloc_lock+0x8>)
 801bd62:	f7fd bcfc 	b.w	801975e <__retarget_lock_acquire_recursive>
 801bd66:	bf00      	nop
 801bd68:	20016044 	.word	0x20016044

0801bd6c <__malloc_unlock>:
 801bd6c:	4801      	ldr	r0, [pc, #4]	; (801bd74 <__malloc_unlock+0x8>)
 801bd6e:	f7fd bcf7 	b.w	8019760 <__retarget_lock_release_recursive>
 801bd72:	bf00      	nop
 801bd74:	20016044 	.word	0x20016044

0801bd78 <_Balloc>:
 801bd78:	b570      	push	{r4, r5, r6, lr}
 801bd7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801bd7c:	4604      	mov	r4, r0
 801bd7e:	460d      	mov	r5, r1
 801bd80:	b976      	cbnz	r6, 801bda0 <_Balloc+0x28>
 801bd82:	2010      	movs	r0, #16
 801bd84:	f7fd fcee 	bl	8019764 <malloc>
 801bd88:	4602      	mov	r2, r0
 801bd8a:	6260      	str	r0, [r4, #36]	; 0x24
 801bd8c:	b920      	cbnz	r0, 801bd98 <_Balloc+0x20>
 801bd8e:	4b18      	ldr	r3, [pc, #96]	; (801bdf0 <_Balloc+0x78>)
 801bd90:	4818      	ldr	r0, [pc, #96]	; (801bdf4 <_Balloc+0x7c>)
 801bd92:	2166      	movs	r1, #102	; 0x66
 801bd94:	f7ff f9ea 	bl	801b16c <__assert_func>
 801bd98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801bd9c:	6006      	str	r6, [r0, #0]
 801bd9e:	60c6      	str	r6, [r0, #12]
 801bda0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801bda2:	68f3      	ldr	r3, [r6, #12]
 801bda4:	b183      	cbz	r3, 801bdc8 <_Balloc+0x50>
 801bda6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bda8:	68db      	ldr	r3, [r3, #12]
 801bdaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801bdae:	b9b8      	cbnz	r0, 801bde0 <_Balloc+0x68>
 801bdb0:	2101      	movs	r1, #1
 801bdb2:	fa01 f605 	lsl.w	r6, r1, r5
 801bdb6:	1d72      	adds	r2, r6, #5
 801bdb8:	0092      	lsls	r2, r2, #2
 801bdba:	4620      	mov	r0, r4
 801bdbc:	f7fd fd12 	bl	80197e4 <_calloc_r>
 801bdc0:	b160      	cbz	r0, 801bddc <_Balloc+0x64>
 801bdc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801bdc6:	e00e      	b.n	801bde6 <_Balloc+0x6e>
 801bdc8:	2221      	movs	r2, #33	; 0x21
 801bdca:	2104      	movs	r1, #4
 801bdcc:	4620      	mov	r0, r4
 801bdce:	f7fd fd09 	bl	80197e4 <_calloc_r>
 801bdd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bdd4:	60f0      	str	r0, [r6, #12]
 801bdd6:	68db      	ldr	r3, [r3, #12]
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	d1e4      	bne.n	801bda6 <_Balloc+0x2e>
 801bddc:	2000      	movs	r0, #0
 801bdde:	bd70      	pop	{r4, r5, r6, pc}
 801bde0:	6802      	ldr	r2, [r0, #0]
 801bde2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801bde6:	2300      	movs	r3, #0
 801bde8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801bdec:	e7f7      	b.n	801bdde <_Balloc+0x66>
 801bdee:	bf00      	nop
 801bdf0:	0801f7ad 	.word	0x0801f7ad
 801bdf4:	0801f9ac 	.word	0x0801f9ac

0801bdf8 <_Bfree>:
 801bdf8:	b570      	push	{r4, r5, r6, lr}
 801bdfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801bdfc:	4605      	mov	r5, r0
 801bdfe:	460c      	mov	r4, r1
 801be00:	b976      	cbnz	r6, 801be20 <_Bfree+0x28>
 801be02:	2010      	movs	r0, #16
 801be04:	f7fd fcae 	bl	8019764 <malloc>
 801be08:	4602      	mov	r2, r0
 801be0a:	6268      	str	r0, [r5, #36]	; 0x24
 801be0c:	b920      	cbnz	r0, 801be18 <_Bfree+0x20>
 801be0e:	4b09      	ldr	r3, [pc, #36]	; (801be34 <_Bfree+0x3c>)
 801be10:	4809      	ldr	r0, [pc, #36]	; (801be38 <_Bfree+0x40>)
 801be12:	218a      	movs	r1, #138	; 0x8a
 801be14:	f7ff f9aa 	bl	801b16c <__assert_func>
 801be18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801be1c:	6006      	str	r6, [r0, #0]
 801be1e:	60c6      	str	r6, [r0, #12]
 801be20:	b13c      	cbz	r4, 801be32 <_Bfree+0x3a>
 801be22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801be24:	6862      	ldr	r2, [r4, #4]
 801be26:	68db      	ldr	r3, [r3, #12]
 801be28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801be2c:	6021      	str	r1, [r4, #0]
 801be2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801be32:	bd70      	pop	{r4, r5, r6, pc}
 801be34:	0801f7ad 	.word	0x0801f7ad
 801be38:	0801f9ac 	.word	0x0801f9ac

0801be3c <__multadd>:
 801be3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be40:	690e      	ldr	r6, [r1, #16]
 801be42:	4607      	mov	r7, r0
 801be44:	4698      	mov	r8, r3
 801be46:	460c      	mov	r4, r1
 801be48:	f101 0014 	add.w	r0, r1, #20
 801be4c:	2300      	movs	r3, #0
 801be4e:	6805      	ldr	r5, [r0, #0]
 801be50:	b2a9      	uxth	r1, r5
 801be52:	fb02 8101 	mla	r1, r2, r1, r8
 801be56:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801be5a:	0c2d      	lsrs	r5, r5, #16
 801be5c:	fb02 c505 	mla	r5, r2, r5, ip
 801be60:	b289      	uxth	r1, r1
 801be62:	3301      	adds	r3, #1
 801be64:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801be68:	429e      	cmp	r6, r3
 801be6a:	f840 1b04 	str.w	r1, [r0], #4
 801be6e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801be72:	dcec      	bgt.n	801be4e <__multadd+0x12>
 801be74:	f1b8 0f00 	cmp.w	r8, #0
 801be78:	d022      	beq.n	801bec0 <__multadd+0x84>
 801be7a:	68a3      	ldr	r3, [r4, #8]
 801be7c:	42b3      	cmp	r3, r6
 801be7e:	dc19      	bgt.n	801beb4 <__multadd+0x78>
 801be80:	6861      	ldr	r1, [r4, #4]
 801be82:	4638      	mov	r0, r7
 801be84:	3101      	adds	r1, #1
 801be86:	f7ff ff77 	bl	801bd78 <_Balloc>
 801be8a:	4605      	mov	r5, r0
 801be8c:	b928      	cbnz	r0, 801be9a <__multadd+0x5e>
 801be8e:	4602      	mov	r2, r0
 801be90:	4b0d      	ldr	r3, [pc, #52]	; (801bec8 <__multadd+0x8c>)
 801be92:	480e      	ldr	r0, [pc, #56]	; (801becc <__multadd+0x90>)
 801be94:	21b5      	movs	r1, #181	; 0xb5
 801be96:	f7ff f969 	bl	801b16c <__assert_func>
 801be9a:	6922      	ldr	r2, [r4, #16]
 801be9c:	3202      	adds	r2, #2
 801be9e:	f104 010c 	add.w	r1, r4, #12
 801bea2:	0092      	lsls	r2, r2, #2
 801bea4:	300c      	adds	r0, #12
 801bea6:	f7fd fc6d 	bl	8019784 <memcpy>
 801beaa:	4621      	mov	r1, r4
 801beac:	4638      	mov	r0, r7
 801beae:	f7ff ffa3 	bl	801bdf8 <_Bfree>
 801beb2:	462c      	mov	r4, r5
 801beb4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801beb8:	3601      	adds	r6, #1
 801beba:	f8c3 8014 	str.w	r8, [r3, #20]
 801bebe:	6126      	str	r6, [r4, #16]
 801bec0:	4620      	mov	r0, r4
 801bec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bec6:	bf00      	nop
 801bec8:	0801f91c 	.word	0x0801f91c
 801becc:	0801f9ac 	.word	0x0801f9ac

0801bed0 <__s2b>:
 801bed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bed4:	460c      	mov	r4, r1
 801bed6:	4615      	mov	r5, r2
 801bed8:	461f      	mov	r7, r3
 801beda:	2209      	movs	r2, #9
 801bedc:	3308      	adds	r3, #8
 801bede:	4606      	mov	r6, r0
 801bee0:	fb93 f3f2 	sdiv	r3, r3, r2
 801bee4:	2100      	movs	r1, #0
 801bee6:	2201      	movs	r2, #1
 801bee8:	429a      	cmp	r2, r3
 801beea:	db09      	blt.n	801bf00 <__s2b+0x30>
 801beec:	4630      	mov	r0, r6
 801beee:	f7ff ff43 	bl	801bd78 <_Balloc>
 801bef2:	b940      	cbnz	r0, 801bf06 <__s2b+0x36>
 801bef4:	4602      	mov	r2, r0
 801bef6:	4b19      	ldr	r3, [pc, #100]	; (801bf5c <__s2b+0x8c>)
 801bef8:	4819      	ldr	r0, [pc, #100]	; (801bf60 <__s2b+0x90>)
 801befa:	21ce      	movs	r1, #206	; 0xce
 801befc:	f7ff f936 	bl	801b16c <__assert_func>
 801bf00:	0052      	lsls	r2, r2, #1
 801bf02:	3101      	adds	r1, #1
 801bf04:	e7f0      	b.n	801bee8 <__s2b+0x18>
 801bf06:	9b08      	ldr	r3, [sp, #32]
 801bf08:	6143      	str	r3, [r0, #20]
 801bf0a:	2d09      	cmp	r5, #9
 801bf0c:	f04f 0301 	mov.w	r3, #1
 801bf10:	6103      	str	r3, [r0, #16]
 801bf12:	dd16      	ble.n	801bf42 <__s2b+0x72>
 801bf14:	f104 0909 	add.w	r9, r4, #9
 801bf18:	46c8      	mov	r8, r9
 801bf1a:	442c      	add	r4, r5
 801bf1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801bf20:	4601      	mov	r1, r0
 801bf22:	3b30      	subs	r3, #48	; 0x30
 801bf24:	220a      	movs	r2, #10
 801bf26:	4630      	mov	r0, r6
 801bf28:	f7ff ff88 	bl	801be3c <__multadd>
 801bf2c:	45a0      	cmp	r8, r4
 801bf2e:	d1f5      	bne.n	801bf1c <__s2b+0x4c>
 801bf30:	f1a5 0408 	sub.w	r4, r5, #8
 801bf34:	444c      	add	r4, r9
 801bf36:	1b2d      	subs	r5, r5, r4
 801bf38:	1963      	adds	r3, r4, r5
 801bf3a:	42bb      	cmp	r3, r7
 801bf3c:	db04      	blt.n	801bf48 <__s2b+0x78>
 801bf3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bf42:	340a      	adds	r4, #10
 801bf44:	2509      	movs	r5, #9
 801bf46:	e7f6      	b.n	801bf36 <__s2b+0x66>
 801bf48:	f814 3b01 	ldrb.w	r3, [r4], #1
 801bf4c:	4601      	mov	r1, r0
 801bf4e:	3b30      	subs	r3, #48	; 0x30
 801bf50:	220a      	movs	r2, #10
 801bf52:	4630      	mov	r0, r6
 801bf54:	f7ff ff72 	bl	801be3c <__multadd>
 801bf58:	e7ee      	b.n	801bf38 <__s2b+0x68>
 801bf5a:	bf00      	nop
 801bf5c:	0801f91c 	.word	0x0801f91c
 801bf60:	0801f9ac 	.word	0x0801f9ac

0801bf64 <__hi0bits>:
 801bf64:	0c03      	lsrs	r3, r0, #16
 801bf66:	041b      	lsls	r3, r3, #16
 801bf68:	b9d3      	cbnz	r3, 801bfa0 <__hi0bits+0x3c>
 801bf6a:	0400      	lsls	r0, r0, #16
 801bf6c:	2310      	movs	r3, #16
 801bf6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801bf72:	bf04      	itt	eq
 801bf74:	0200      	lsleq	r0, r0, #8
 801bf76:	3308      	addeq	r3, #8
 801bf78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801bf7c:	bf04      	itt	eq
 801bf7e:	0100      	lsleq	r0, r0, #4
 801bf80:	3304      	addeq	r3, #4
 801bf82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801bf86:	bf04      	itt	eq
 801bf88:	0080      	lsleq	r0, r0, #2
 801bf8a:	3302      	addeq	r3, #2
 801bf8c:	2800      	cmp	r0, #0
 801bf8e:	db05      	blt.n	801bf9c <__hi0bits+0x38>
 801bf90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801bf94:	f103 0301 	add.w	r3, r3, #1
 801bf98:	bf08      	it	eq
 801bf9a:	2320      	moveq	r3, #32
 801bf9c:	4618      	mov	r0, r3
 801bf9e:	4770      	bx	lr
 801bfa0:	2300      	movs	r3, #0
 801bfa2:	e7e4      	b.n	801bf6e <__hi0bits+0xa>

0801bfa4 <__lo0bits>:
 801bfa4:	6803      	ldr	r3, [r0, #0]
 801bfa6:	f013 0207 	ands.w	r2, r3, #7
 801bfaa:	4601      	mov	r1, r0
 801bfac:	d00b      	beq.n	801bfc6 <__lo0bits+0x22>
 801bfae:	07da      	lsls	r2, r3, #31
 801bfb0:	d424      	bmi.n	801bffc <__lo0bits+0x58>
 801bfb2:	0798      	lsls	r0, r3, #30
 801bfb4:	bf49      	itett	mi
 801bfb6:	085b      	lsrmi	r3, r3, #1
 801bfb8:	089b      	lsrpl	r3, r3, #2
 801bfba:	2001      	movmi	r0, #1
 801bfbc:	600b      	strmi	r3, [r1, #0]
 801bfbe:	bf5c      	itt	pl
 801bfc0:	600b      	strpl	r3, [r1, #0]
 801bfc2:	2002      	movpl	r0, #2
 801bfc4:	4770      	bx	lr
 801bfc6:	b298      	uxth	r0, r3
 801bfc8:	b9b0      	cbnz	r0, 801bff8 <__lo0bits+0x54>
 801bfca:	0c1b      	lsrs	r3, r3, #16
 801bfcc:	2010      	movs	r0, #16
 801bfce:	f013 0fff 	tst.w	r3, #255	; 0xff
 801bfd2:	bf04      	itt	eq
 801bfd4:	0a1b      	lsreq	r3, r3, #8
 801bfd6:	3008      	addeq	r0, #8
 801bfd8:	071a      	lsls	r2, r3, #28
 801bfda:	bf04      	itt	eq
 801bfdc:	091b      	lsreq	r3, r3, #4
 801bfde:	3004      	addeq	r0, #4
 801bfe0:	079a      	lsls	r2, r3, #30
 801bfe2:	bf04      	itt	eq
 801bfe4:	089b      	lsreq	r3, r3, #2
 801bfe6:	3002      	addeq	r0, #2
 801bfe8:	07da      	lsls	r2, r3, #31
 801bfea:	d403      	bmi.n	801bff4 <__lo0bits+0x50>
 801bfec:	085b      	lsrs	r3, r3, #1
 801bfee:	f100 0001 	add.w	r0, r0, #1
 801bff2:	d005      	beq.n	801c000 <__lo0bits+0x5c>
 801bff4:	600b      	str	r3, [r1, #0]
 801bff6:	4770      	bx	lr
 801bff8:	4610      	mov	r0, r2
 801bffa:	e7e8      	b.n	801bfce <__lo0bits+0x2a>
 801bffc:	2000      	movs	r0, #0
 801bffe:	4770      	bx	lr
 801c000:	2020      	movs	r0, #32
 801c002:	4770      	bx	lr

0801c004 <__i2b>:
 801c004:	b510      	push	{r4, lr}
 801c006:	460c      	mov	r4, r1
 801c008:	2101      	movs	r1, #1
 801c00a:	f7ff feb5 	bl	801bd78 <_Balloc>
 801c00e:	4602      	mov	r2, r0
 801c010:	b928      	cbnz	r0, 801c01e <__i2b+0x1a>
 801c012:	4b05      	ldr	r3, [pc, #20]	; (801c028 <__i2b+0x24>)
 801c014:	4805      	ldr	r0, [pc, #20]	; (801c02c <__i2b+0x28>)
 801c016:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801c01a:	f7ff f8a7 	bl	801b16c <__assert_func>
 801c01e:	2301      	movs	r3, #1
 801c020:	6144      	str	r4, [r0, #20]
 801c022:	6103      	str	r3, [r0, #16]
 801c024:	bd10      	pop	{r4, pc}
 801c026:	bf00      	nop
 801c028:	0801f91c 	.word	0x0801f91c
 801c02c:	0801f9ac 	.word	0x0801f9ac

0801c030 <__multiply>:
 801c030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c034:	4614      	mov	r4, r2
 801c036:	690a      	ldr	r2, [r1, #16]
 801c038:	6923      	ldr	r3, [r4, #16]
 801c03a:	429a      	cmp	r2, r3
 801c03c:	bfb8      	it	lt
 801c03e:	460b      	movlt	r3, r1
 801c040:	460d      	mov	r5, r1
 801c042:	bfbc      	itt	lt
 801c044:	4625      	movlt	r5, r4
 801c046:	461c      	movlt	r4, r3
 801c048:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801c04c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801c050:	68ab      	ldr	r3, [r5, #8]
 801c052:	6869      	ldr	r1, [r5, #4]
 801c054:	eb0a 0709 	add.w	r7, sl, r9
 801c058:	42bb      	cmp	r3, r7
 801c05a:	b085      	sub	sp, #20
 801c05c:	bfb8      	it	lt
 801c05e:	3101      	addlt	r1, #1
 801c060:	f7ff fe8a 	bl	801bd78 <_Balloc>
 801c064:	b930      	cbnz	r0, 801c074 <__multiply+0x44>
 801c066:	4602      	mov	r2, r0
 801c068:	4b42      	ldr	r3, [pc, #264]	; (801c174 <__multiply+0x144>)
 801c06a:	4843      	ldr	r0, [pc, #268]	; (801c178 <__multiply+0x148>)
 801c06c:	f240 115d 	movw	r1, #349	; 0x15d
 801c070:	f7ff f87c 	bl	801b16c <__assert_func>
 801c074:	f100 0614 	add.w	r6, r0, #20
 801c078:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801c07c:	4633      	mov	r3, r6
 801c07e:	2200      	movs	r2, #0
 801c080:	4543      	cmp	r3, r8
 801c082:	d31e      	bcc.n	801c0c2 <__multiply+0x92>
 801c084:	f105 0c14 	add.w	ip, r5, #20
 801c088:	f104 0314 	add.w	r3, r4, #20
 801c08c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801c090:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801c094:	9202      	str	r2, [sp, #8]
 801c096:	ebac 0205 	sub.w	r2, ip, r5
 801c09a:	3a15      	subs	r2, #21
 801c09c:	f022 0203 	bic.w	r2, r2, #3
 801c0a0:	3204      	adds	r2, #4
 801c0a2:	f105 0115 	add.w	r1, r5, #21
 801c0a6:	458c      	cmp	ip, r1
 801c0a8:	bf38      	it	cc
 801c0aa:	2204      	movcc	r2, #4
 801c0ac:	9201      	str	r2, [sp, #4]
 801c0ae:	9a02      	ldr	r2, [sp, #8]
 801c0b0:	9303      	str	r3, [sp, #12]
 801c0b2:	429a      	cmp	r2, r3
 801c0b4:	d808      	bhi.n	801c0c8 <__multiply+0x98>
 801c0b6:	2f00      	cmp	r7, #0
 801c0b8:	dc55      	bgt.n	801c166 <__multiply+0x136>
 801c0ba:	6107      	str	r7, [r0, #16]
 801c0bc:	b005      	add	sp, #20
 801c0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0c2:	f843 2b04 	str.w	r2, [r3], #4
 801c0c6:	e7db      	b.n	801c080 <__multiply+0x50>
 801c0c8:	f8b3 a000 	ldrh.w	sl, [r3]
 801c0cc:	f1ba 0f00 	cmp.w	sl, #0
 801c0d0:	d020      	beq.n	801c114 <__multiply+0xe4>
 801c0d2:	f105 0e14 	add.w	lr, r5, #20
 801c0d6:	46b1      	mov	r9, r6
 801c0d8:	2200      	movs	r2, #0
 801c0da:	f85e 4b04 	ldr.w	r4, [lr], #4
 801c0de:	f8d9 b000 	ldr.w	fp, [r9]
 801c0e2:	b2a1      	uxth	r1, r4
 801c0e4:	fa1f fb8b 	uxth.w	fp, fp
 801c0e8:	fb0a b101 	mla	r1, sl, r1, fp
 801c0ec:	4411      	add	r1, r2
 801c0ee:	f8d9 2000 	ldr.w	r2, [r9]
 801c0f2:	0c24      	lsrs	r4, r4, #16
 801c0f4:	0c12      	lsrs	r2, r2, #16
 801c0f6:	fb0a 2404 	mla	r4, sl, r4, r2
 801c0fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801c0fe:	b289      	uxth	r1, r1
 801c100:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801c104:	45f4      	cmp	ip, lr
 801c106:	f849 1b04 	str.w	r1, [r9], #4
 801c10a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801c10e:	d8e4      	bhi.n	801c0da <__multiply+0xaa>
 801c110:	9901      	ldr	r1, [sp, #4]
 801c112:	5072      	str	r2, [r6, r1]
 801c114:	9a03      	ldr	r2, [sp, #12]
 801c116:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c11a:	3304      	adds	r3, #4
 801c11c:	f1b9 0f00 	cmp.w	r9, #0
 801c120:	d01f      	beq.n	801c162 <__multiply+0x132>
 801c122:	6834      	ldr	r4, [r6, #0]
 801c124:	f105 0114 	add.w	r1, r5, #20
 801c128:	46b6      	mov	lr, r6
 801c12a:	f04f 0a00 	mov.w	sl, #0
 801c12e:	880a      	ldrh	r2, [r1, #0]
 801c130:	f8be b002 	ldrh.w	fp, [lr, #2]
 801c134:	fb09 b202 	mla	r2, r9, r2, fp
 801c138:	4492      	add	sl, r2
 801c13a:	b2a4      	uxth	r4, r4
 801c13c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801c140:	f84e 4b04 	str.w	r4, [lr], #4
 801c144:	f851 4b04 	ldr.w	r4, [r1], #4
 801c148:	f8be 2000 	ldrh.w	r2, [lr]
 801c14c:	0c24      	lsrs	r4, r4, #16
 801c14e:	fb09 2404 	mla	r4, r9, r4, r2
 801c152:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801c156:	458c      	cmp	ip, r1
 801c158:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801c15c:	d8e7      	bhi.n	801c12e <__multiply+0xfe>
 801c15e:	9a01      	ldr	r2, [sp, #4]
 801c160:	50b4      	str	r4, [r6, r2]
 801c162:	3604      	adds	r6, #4
 801c164:	e7a3      	b.n	801c0ae <__multiply+0x7e>
 801c166:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	d1a5      	bne.n	801c0ba <__multiply+0x8a>
 801c16e:	3f01      	subs	r7, #1
 801c170:	e7a1      	b.n	801c0b6 <__multiply+0x86>
 801c172:	bf00      	nop
 801c174:	0801f91c 	.word	0x0801f91c
 801c178:	0801f9ac 	.word	0x0801f9ac

0801c17c <__pow5mult>:
 801c17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c180:	4615      	mov	r5, r2
 801c182:	f012 0203 	ands.w	r2, r2, #3
 801c186:	4606      	mov	r6, r0
 801c188:	460f      	mov	r7, r1
 801c18a:	d007      	beq.n	801c19c <__pow5mult+0x20>
 801c18c:	4c25      	ldr	r4, [pc, #148]	; (801c224 <__pow5mult+0xa8>)
 801c18e:	3a01      	subs	r2, #1
 801c190:	2300      	movs	r3, #0
 801c192:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c196:	f7ff fe51 	bl	801be3c <__multadd>
 801c19a:	4607      	mov	r7, r0
 801c19c:	10ad      	asrs	r5, r5, #2
 801c19e:	d03d      	beq.n	801c21c <__pow5mult+0xa0>
 801c1a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801c1a2:	b97c      	cbnz	r4, 801c1c4 <__pow5mult+0x48>
 801c1a4:	2010      	movs	r0, #16
 801c1a6:	f7fd fadd 	bl	8019764 <malloc>
 801c1aa:	4602      	mov	r2, r0
 801c1ac:	6270      	str	r0, [r6, #36]	; 0x24
 801c1ae:	b928      	cbnz	r0, 801c1bc <__pow5mult+0x40>
 801c1b0:	4b1d      	ldr	r3, [pc, #116]	; (801c228 <__pow5mult+0xac>)
 801c1b2:	481e      	ldr	r0, [pc, #120]	; (801c22c <__pow5mult+0xb0>)
 801c1b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801c1b8:	f7fe ffd8 	bl	801b16c <__assert_func>
 801c1bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c1c0:	6004      	str	r4, [r0, #0]
 801c1c2:	60c4      	str	r4, [r0, #12]
 801c1c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801c1c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c1cc:	b94c      	cbnz	r4, 801c1e2 <__pow5mult+0x66>
 801c1ce:	f240 2171 	movw	r1, #625	; 0x271
 801c1d2:	4630      	mov	r0, r6
 801c1d4:	f7ff ff16 	bl	801c004 <__i2b>
 801c1d8:	2300      	movs	r3, #0
 801c1da:	f8c8 0008 	str.w	r0, [r8, #8]
 801c1de:	4604      	mov	r4, r0
 801c1e0:	6003      	str	r3, [r0, #0]
 801c1e2:	f04f 0900 	mov.w	r9, #0
 801c1e6:	07eb      	lsls	r3, r5, #31
 801c1e8:	d50a      	bpl.n	801c200 <__pow5mult+0x84>
 801c1ea:	4639      	mov	r1, r7
 801c1ec:	4622      	mov	r2, r4
 801c1ee:	4630      	mov	r0, r6
 801c1f0:	f7ff ff1e 	bl	801c030 <__multiply>
 801c1f4:	4639      	mov	r1, r7
 801c1f6:	4680      	mov	r8, r0
 801c1f8:	4630      	mov	r0, r6
 801c1fa:	f7ff fdfd 	bl	801bdf8 <_Bfree>
 801c1fe:	4647      	mov	r7, r8
 801c200:	106d      	asrs	r5, r5, #1
 801c202:	d00b      	beq.n	801c21c <__pow5mult+0xa0>
 801c204:	6820      	ldr	r0, [r4, #0]
 801c206:	b938      	cbnz	r0, 801c218 <__pow5mult+0x9c>
 801c208:	4622      	mov	r2, r4
 801c20a:	4621      	mov	r1, r4
 801c20c:	4630      	mov	r0, r6
 801c20e:	f7ff ff0f 	bl	801c030 <__multiply>
 801c212:	6020      	str	r0, [r4, #0]
 801c214:	f8c0 9000 	str.w	r9, [r0]
 801c218:	4604      	mov	r4, r0
 801c21a:	e7e4      	b.n	801c1e6 <__pow5mult+0x6a>
 801c21c:	4638      	mov	r0, r7
 801c21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c222:	bf00      	nop
 801c224:	0801fb00 	.word	0x0801fb00
 801c228:	0801f7ad 	.word	0x0801f7ad
 801c22c:	0801f9ac 	.word	0x0801f9ac

0801c230 <__lshift>:
 801c230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c234:	460c      	mov	r4, r1
 801c236:	6849      	ldr	r1, [r1, #4]
 801c238:	6923      	ldr	r3, [r4, #16]
 801c23a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c23e:	68a3      	ldr	r3, [r4, #8]
 801c240:	4607      	mov	r7, r0
 801c242:	4691      	mov	r9, r2
 801c244:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c248:	f108 0601 	add.w	r6, r8, #1
 801c24c:	42b3      	cmp	r3, r6
 801c24e:	db0b      	blt.n	801c268 <__lshift+0x38>
 801c250:	4638      	mov	r0, r7
 801c252:	f7ff fd91 	bl	801bd78 <_Balloc>
 801c256:	4605      	mov	r5, r0
 801c258:	b948      	cbnz	r0, 801c26e <__lshift+0x3e>
 801c25a:	4602      	mov	r2, r0
 801c25c:	4b28      	ldr	r3, [pc, #160]	; (801c300 <__lshift+0xd0>)
 801c25e:	4829      	ldr	r0, [pc, #164]	; (801c304 <__lshift+0xd4>)
 801c260:	f240 11d9 	movw	r1, #473	; 0x1d9
 801c264:	f7fe ff82 	bl	801b16c <__assert_func>
 801c268:	3101      	adds	r1, #1
 801c26a:	005b      	lsls	r3, r3, #1
 801c26c:	e7ee      	b.n	801c24c <__lshift+0x1c>
 801c26e:	2300      	movs	r3, #0
 801c270:	f100 0114 	add.w	r1, r0, #20
 801c274:	f100 0210 	add.w	r2, r0, #16
 801c278:	4618      	mov	r0, r3
 801c27a:	4553      	cmp	r3, sl
 801c27c:	db33      	blt.n	801c2e6 <__lshift+0xb6>
 801c27e:	6920      	ldr	r0, [r4, #16]
 801c280:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c284:	f104 0314 	add.w	r3, r4, #20
 801c288:	f019 091f 	ands.w	r9, r9, #31
 801c28c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c290:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c294:	d02b      	beq.n	801c2ee <__lshift+0xbe>
 801c296:	f1c9 0e20 	rsb	lr, r9, #32
 801c29a:	468a      	mov	sl, r1
 801c29c:	2200      	movs	r2, #0
 801c29e:	6818      	ldr	r0, [r3, #0]
 801c2a0:	fa00 f009 	lsl.w	r0, r0, r9
 801c2a4:	4302      	orrs	r2, r0
 801c2a6:	f84a 2b04 	str.w	r2, [sl], #4
 801c2aa:	f853 2b04 	ldr.w	r2, [r3], #4
 801c2ae:	459c      	cmp	ip, r3
 801c2b0:	fa22 f20e 	lsr.w	r2, r2, lr
 801c2b4:	d8f3      	bhi.n	801c29e <__lshift+0x6e>
 801c2b6:	ebac 0304 	sub.w	r3, ip, r4
 801c2ba:	3b15      	subs	r3, #21
 801c2bc:	f023 0303 	bic.w	r3, r3, #3
 801c2c0:	3304      	adds	r3, #4
 801c2c2:	f104 0015 	add.w	r0, r4, #21
 801c2c6:	4584      	cmp	ip, r0
 801c2c8:	bf38      	it	cc
 801c2ca:	2304      	movcc	r3, #4
 801c2cc:	50ca      	str	r2, [r1, r3]
 801c2ce:	b10a      	cbz	r2, 801c2d4 <__lshift+0xa4>
 801c2d0:	f108 0602 	add.w	r6, r8, #2
 801c2d4:	3e01      	subs	r6, #1
 801c2d6:	4638      	mov	r0, r7
 801c2d8:	612e      	str	r6, [r5, #16]
 801c2da:	4621      	mov	r1, r4
 801c2dc:	f7ff fd8c 	bl	801bdf8 <_Bfree>
 801c2e0:	4628      	mov	r0, r5
 801c2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c2e6:	f842 0f04 	str.w	r0, [r2, #4]!
 801c2ea:	3301      	adds	r3, #1
 801c2ec:	e7c5      	b.n	801c27a <__lshift+0x4a>
 801c2ee:	3904      	subs	r1, #4
 801c2f0:	f853 2b04 	ldr.w	r2, [r3], #4
 801c2f4:	f841 2f04 	str.w	r2, [r1, #4]!
 801c2f8:	459c      	cmp	ip, r3
 801c2fa:	d8f9      	bhi.n	801c2f0 <__lshift+0xc0>
 801c2fc:	e7ea      	b.n	801c2d4 <__lshift+0xa4>
 801c2fe:	bf00      	nop
 801c300:	0801f91c 	.word	0x0801f91c
 801c304:	0801f9ac 	.word	0x0801f9ac

0801c308 <__mcmp>:
 801c308:	b530      	push	{r4, r5, lr}
 801c30a:	6902      	ldr	r2, [r0, #16]
 801c30c:	690c      	ldr	r4, [r1, #16]
 801c30e:	1b12      	subs	r2, r2, r4
 801c310:	d10e      	bne.n	801c330 <__mcmp+0x28>
 801c312:	f100 0314 	add.w	r3, r0, #20
 801c316:	3114      	adds	r1, #20
 801c318:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801c31c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801c320:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801c324:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801c328:	42a5      	cmp	r5, r4
 801c32a:	d003      	beq.n	801c334 <__mcmp+0x2c>
 801c32c:	d305      	bcc.n	801c33a <__mcmp+0x32>
 801c32e:	2201      	movs	r2, #1
 801c330:	4610      	mov	r0, r2
 801c332:	bd30      	pop	{r4, r5, pc}
 801c334:	4283      	cmp	r3, r0
 801c336:	d3f3      	bcc.n	801c320 <__mcmp+0x18>
 801c338:	e7fa      	b.n	801c330 <__mcmp+0x28>
 801c33a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c33e:	e7f7      	b.n	801c330 <__mcmp+0x28>

0801c340 <__mdiff>:
 801c340:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c344:	460c      	mov	r4, r1
 801c346:	4606      	mov	r6, r0
 801c348:	4611      	mov	r1, r2
 801c34a:	4620      	mov	r0, r4
 801c34c:	4617      	mov	r7, r2
 801c34e:	f7ff ffdb 	bl	801c308 <__mcmp>
 801c352:	1e05      	subs	r5, r0, #0
 801c354:	d110      	bne.n	801c378 <__mdiff+0x38>
 801c356:	4629      	mov	r1, r5
 801c358:	4630      	mov	r0, r6
 801c35a:	f7ff fd0d 	bl	801bd78 <_Balloc>
 801c35e:	b930      	cbnz	r0, 801c36e <__mdiff+0x2e>
 801c360:	4b39      	ldr	r3, [pc, #228]	; (801c448 <__mdiff+0x108>)
 801c362:	4602      	mov	r2, r0
 801c364:	f240 2132 	movw	r1, #562	; 0x232
 801c368:	4838      	ldr	r0, [pc, #224]	; (801c44c <__mdiff+0x10c>)
 801c36a:	f7fe feff 	bl	801b16c <__assert_func>
 801c36e:	2301      	movs	r3, #1
 801c370:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c374:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c378:	bfa4      	itt	ge
 801c37a:	463b      	movge	r3, r7
 801c37c:	4627      	movge	r7, r4
 801c37e:	4630      	mov	r0, r6
 801c380:	6879      	ldr	r1, [r7, #4]
 801c382:	bfa6      	itte	ge
 801c384:	461c      	movge	r4, r3
 801c386:	2500      	movge	r5, #0
 801c388:	2501      	movlt	r5, #1
 801c38a:	f7ff fcf5 	bl	801bd78 <_Balloc>
 801c38e:	b920      	cbnz	r0, 801c39a <__mdiff+0x5a>
 801c390:	4b2d      	ldr	r3, [pc, #180]	; (801c448 <__mdiff+0x108>)
 801c392:	4602      	mov	r2, r0
 801c394:	f44f 7110 	mov.w	r1, #576	; 0x240
 801c398:	e7e6      	b.n	801c368 <__mdiff+0x28>
 801c39a:	693e      	ldr	r6, [r7, #16]
 801c39c:	60c5      	str	r5, [r0, #12]
 801c39e:	6925      	ldr	r5, [r4, #16]
 801c3a0:	f107 0114 	add.w	r1, r7, #20
 801c3a4:	f104 0914 	add.w	r9, r4, #20
 801c3a8:	f100 0e14 	add.w	lr, r0, #20
 801c3ac:	f107 0210 	add.w	r2, r7, #16
 801c3b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801c3b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801c3b8:	46f2      	mov	sl, lr
 801c3ba:	2700      	movs	r7, #0
 801c3bc:	f859 3b04 	ldr.w	r3, [r9], #4
 801c3c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801c3c4:	fa1f f883 	uxth.w	r8, r3
 801c3c8:	fa17 f78b 	uxtah	r7, r7, fp
 801c3cc:	0c1b      	lsrs	r3, r3, #16
 801c3ce:	eba7 0808 	sub.w	r8, r7, r8
 801c3d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801c3d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801c3da:	fa1f f888 	uxth.w	r8, r8
 801c3de:	141f      	asrs	r7, r3, #16
 801c3e0:	454d      	cmp	r5, r9
 801c3e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801c3e6:	f84a 3b04 	str.w	r3, [sl], #4
 801c3ea:	d8e7      	bhi.n	801c3bc <__mdiff+0x7c>
 801c3ec:	1b2b      	subs	r3, r5, r4
 801c3ee:	3b15      	subs	r3, #21
 801c3f0:	f023 0303 	bic.w	r3, r3, #3
 801c3f4:	3304      	adds	r3, #4
 801c3f6:	3415      	adds	r4, #21
 801c3f8:	42a5      	cmp	r5, r4
 801c3fa:	bf38      	it	cc
 801c3fc:	2304      	movcc	r3, #4
 801c3fe:	4419      	add	r1, r3
 801c400:	4473      	add	r3, lr
 801c402:	469e      	mov	lr, r3
 801c404:	460d      	mov	r5, r1
 801c406:	4565      	cmp	r5, ip
 801c408:	d30e      	bcc.n	801c428 <__mdiff+0xe8>
 801c40a:	f10c 0203 	add.w	r2, ip, #3
 801c40e:	1a52      	subs	r2, r2, r1
 801c410:	f022 0203 	bic.w	r2, r2, #3
 801c414:	3903      	subs	r1, #3
 801c416:	458c      	cmp	ip, r1
 801c418:	bf38      	it	cc
 801c41a:	2200      	movcc	r2, #0
 801c41c:	441a      	add	r2, r3
 801c41e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801c422:	b17b      	cbz	r3, 801c444 <__mdiff+0x104>
 801c424:	6106      	str	r6, [r0, #16]
 801c426:	e7a5      	b.n	801c374 <__mdiff+0x34>
 801c428:	f855 8b04 	ldr.w	r8, [r5], #4
 801c42c:	fa17 f488 	uxtah	r4, r7, r8
 801c430:	1422      	asrs	r2, r4, #16
 801c432:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801c436:	b2a4      	uxth	r4, r4
 801c438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801c43c:	f84e 4b04 	str.w	r4, [lr], #4
 801c440:	1417      	asrs	r7, r2, #16
 801c442:	e7e0      	b.n	801c406 <__mdiff+0xc6>
 801c444:	3e01      	subs	r6, #1
 801c446:	e7ea      	b.n	801c41e <__mdiff+0xde>
 801c448:	0801f91c 	.word	0x0801f91c
 801c44c:	0801f9ac 	.word	0x0801f9ac

0801c450 <__ulp>:
 801c450:	b082      	sub	sp, #8
 801c452:	ed8d 0b00 	vstr	d0, [sp]
 801c456:	9b01      	ldr	r3, [sp, #4]
 801c458:	4912      	ldr	r1, [pc, #72]	; (801c4a4 <__ulp+0x54>)
 801c45a:	4019      	ands	r1, r3
 801c45c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801c460:	2900      	cmp	r1, #0
 801c462:	dd05      	ble.n	801c470 <__ulp+0x20>
 801c464:	2200      	movs	r2, #0
 801c466:	460b      	mov	r3, r1
 801c468:	ec43 2b10 	vmov	d0, r2, r3
 801c46c:	b002      	add	sp, #8
 801c46e:	4770      	bx	lr
 801c470:	4249      	negs	r1, r1
 801c472:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801c476:	ea4f 5021 	mov.w	r0, r1, asr #20
 801c47a:	f04f 0200 	mov.w	r2, #0
 801c47e:	f04f 0300 	mov.w	r3, #0
 801c482:	da04      	bge.n	801c48e <__ulp+0x3e>
 801c484:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801c488:	fa41 f300 	asr.w	r3, r1, r0
 801c48c:	e7ec      	b.n	801c468 <__ulp+0x18>
 801c48e:	f1a0 0114 	sub.w	r1, r0, #20
 801c492:	291e      	cmp	r1, #30
 801c494:	bfda      	itte	le
 801c496:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801c49a:	fa20 f101 	lsrle.w	r1, r0, r1
 801c49e:	2101      	movgt	r1, #1
 801c4a0:	460a      	mov	r2, r1
 801c4a2:	e7e1      	b.n	801c468 <__ulp+0x18>
 801c4a4:	7ff00000 	.word	0x7ff00000

0801c4a8 <__b2d>:
 801c4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c4aa:	6905      	ldr	r5, [r0, #16]
 801c4ac:	f100 0714 	add.w	r7, r0, #20
 801c4b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801c4b4:	1f2e      	subs	r6, r5, #4
 801c4b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801c4ba:	4620      	mov	r0, r4
 801c4bc:	f7ff fd52 	bl	801bf64 <__hi0bits>
 801c4c0:	f1c0 0320 	rsb	r3, r0, #32
 801c4c4:	280a      	cmp	r0, #10
 801c4c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801c544 <__b2d+0x9c>
 801c4ca:	600b      	str	r3, [r1, #0]
 801c4cc:	dc14      	bgt.n	801c4f8 <__b2d+0x50>
 801c4ce:	f1c0 0e0b 	rsb	lr, r0, #11
 801c4d2:	fa24 f10e 	lsr.w	r1, r4, lr
 801c4d6:	42b7      	cmp	r7, r6
 801c4d8:	ea41 030c 	orr.w	r3, r1, ip
 801c4dc:	bf34      	ite	cc
 801c4de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801c4e2:	2100      	movcs	r1, #0
 801c4e4:	3015      	adds	r0, #21
 801c4e6:	fa04 f000 	lsl.w	r0, r4, r0
 801c4ea:	fa21 f10e 	lsr.w	r1, r1, lr
 801c4ee:	ea40 0201 	orr.w	r2, r0, r1
 801c4f2:	ec43 2b10 	vmov	d0, r2, r3
 801c4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c4f8:	42b7      	cmp	r7, r6
 801c4fa:	bf3a      	itte	cc
 801c4fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801c500:	f1a5 0608 	subcc.w	r6, r5, #8
 801c504:	2100      	movcs	r1, #0
 801c506:	380b      	subs	r0, #11
 801c508:	d017      	beq.n	801c53a <__b2d+0x92>
 801c50a:	f1c0 0c20 	rsb	ip, r0, #32
 801c50e:	fa04 f500 	lsl.w	r5, r4, r0
 801c512:	42be      	cmp	r6, r7
 801c514:	fa21 f40c 	lsr.w	r4, r1, ip
 801c518:	ea45 0504 	orr.w	r5, r5, r4
 801c51c:	bf8c      	ite	hi
 801c51e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801c522:	2400      	movls	r4, #0
 801c524:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801c528:	fa01 f000 	lsl.w	r0, r1, r0
 801c52c:	fa24 f40c 	lsr.w	r4, r4, ip
 801c530:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c534:	ea40 0204 	orr.w	r2, r0, r4
 801c538:	e7db      	b.n	801c4f2 <__b2d+0x4a>
 801c53a:	ea44 030c 	orr.w	r3, r4, ip
 801c53e:	460a      	mov	r2, r1
 801c540:	e7d7      	b.n	801c4f2 <__b2d+0x4a>
 801c542:	bf00      	nop
 801c544:	3ff00000 	.word	0x3ff00000

0801c548 <__d2b>:
 801c548:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c54c:	4689      	mov	r9, r1
 801c54e:	2101      	movs	r1, #1
 801c550:	ec57 6b10 	vmov	r6, r7, d0
 801c554:	4690      	mov	r8, r2
 801c556:	f7ff fc0f 	bl	801bd78 <_Balloc>
 801c55a:	4604      	mov	r4, r0
 801c55c:	b930      	cbnz	r0, 801c56c <__d2b+0x24>
 801c55e:	4602      	mov	r2, r0
 801c560:	4b25      	ldr	r3, [pc, #148]	; (801c5f8 <__d2b+0xb0>)
 801c562:	4826      	ldr	r0, [pc, #152]	; (801c5fc <__d2b+0xb4>)
 801c564:	f240 310a 	movw	r1, #778	; 0x30a
 801c568:	f7fe fe00 	bl	801b16c <__assert_func>
 801c56c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801c570:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801c574:	bb35      	cbnz	r5, 801c5c4 <__d2b+0x7c>
 801c576:	2e00      	cmp	r6, #0
 801c578:	9301      	str	r3, [sp, #4]
 801c57a:	d028      	beq.n	801c5ce <__d2b+0x86>
 801c57c:	4668      	mov	r0, sp
 801c57e:	9600      	str	r6, [sp, #0]
 801c580:	f7ff fd10 	bl	801bfa4 <__lo0bits>
 801c584:	9900      	ldr	r1, [sp, #0]
 801c586:	b300      	cbz	r0, 801c5ca <__d2b+0x82>
 801c588:	9a01      	ldr	r2, [sp, #4]
 801c58a:	f1c0 0320 	rsb	r3, r0, #32
 801c58e:	fa02 f303 	lsl.w	r3, r2, r3
 801c592:	430b      	orrs	r3, r1
 801c594:	40c2      	lsrs	r2, r0
 801c596:	6163      	str	r3, [r4, #20]
 801c598:	9201      	str	r2, [sp, #4]
 801c59a:	9b01      	ldr	r3, [sp, #4]
 801c59c:	61a3      	str	r3, [r4, #24]
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	bf14      	ite	ne
 801c5a2:	2202      	movne	r2, #2
 801c5a4:	2201      	moveq	r2, #1
 801c5a6:	6122      	str	r2, [r4, #16]
 801c5a8:	b1d5      	cbz	r5, 801c5e0 <__d2b+0x98>
 801c5aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801c5ae:	4405      	add	r5, r0
 801c5b0:	f8c9 5000 	str.w	r5, [r9]
 801c5b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c5b8:	f8c8 0000 	str.w	r0, [r8]
 801c5bc:	4620      	mov	r0, r4
 801c5be:	b003      	add	sp, #12
 801c5c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c5c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c5c8:	e7d5      	b.n	801c576 <__d2b+0x2e>
 801c5ca:	6161      	str	r1, [r4, #20]
 801c5cc:	e7e5      	b.n	801c59a <__d2b+0x52>
 801c5ce:	a801      	add	r0, sp, #4
 801c5d0:	f7ff fce8 	bl	801bfa4 <__lo0bits>
 801c5d4:	9b01      	ldr	r3, [sp, #4]
 801c5d6:	6163      	str	r3, [r4, #20]
 801c5d8:	2201      	movs	r2, #1
 801c5da:	6122      	str	r2, [r4, #16]
 801c5dc:	3020      	adds	r0, #32
 801c5de:	e7e3      	b.n	801c5a8 <__d2b+0x60>
 801c5e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c5e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c5e8:	f8c9 0000 	str.w	r0, [r9]
 801c5ec:	6918      	ldr	r0, [r3, #16]
 801c5ee:	f7ff fcb9 	bl	801bf64 <__hi0bits>
 801c5f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c5f6:	e7df      	b.n	801c5b8 <__d2b+0x70>
 801c5f8:	0801f91c 	.word	0x0801f91c
 801c5fc:	0801f9ac 	.word	0x0801f9ac

0801c600 <__ratio>:
 801c600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c604:	4688      	mov	r8, r1
 801c606:	4669      	mov	r1, sp
 801c608:	4681      	mov	r9, r0
 801c60a:	f7ff ff4d 	bl	801c4a8 <__b2d>
 801c60e:	a901      	add	r1, sp, #4
 801c610:	4640      	mov	r0, r8
 801c612:	ec55 4b10 	vmov	r4, r5, d0
 801c616:	f7ff ff47 	bl	801c4a8 <__b2d>
 801c61a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c61e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801c622:	eba3 0c02 	sub.w	ip, r3, r2
 801c626:	e9dd 3200 	ldrd	r3, r2, [sp]
 801c62a:	1a9b      	subs	r3, r3, r2
 801c62c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801c630:	ec51 0b10 	vmov	r0, r1, d0
 801c634:	2b00      	cmp	r3, #0
 801c636:	bfd6      	itet	le
 801c638:	460a      	movle	r2, r1
 801c63a:	462a      	movgt	r2, r5
 801c63c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c640:	468b      	mov	fp, r1
 801c642:	462f      	mov	r7, r5
 801c644:	bfd4      	ite	le
 801c646:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801c64a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801c64e:	4620      	mov	r0, r4
 801c650:	ee10 2a10 	vmov	r2, s0
 801c654:	465b      	mov	r3, fp
 801c656:	4639      	mov	r1, r7
 801c658:	f7e4 f908 	bl	800086c <__aeabi_ddiv>
 801c65c:	ec41 0b10 	vmov	d0, r0, r1
 801c660:	b003      	add	sp, #12
 801c662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c666 <__copybits>:
 801c666:	3901      	subs	r1, #1
 801c668:	b570      	push	{r4, r5, r6, lr}
 801c66a:	1149      	asrs	r1, r1, #5
 801c66c:	6914      	ldr	r4, [r2, #16]
 801c66e:	3101      	adds	r1, #1
 801c670:	f102 0314 	add.w	r3, r2, #20
 801c674:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c678:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c67c:	1f05      	subs	r5, r0, #4
 801c67e:	42a3      	cmp	r3, r4
 801c680:	d30c      	bcc.n	801c69c <__copybits+0x36>
 801c682:	1aa3      	subs	r3, r4, r2
 801c684:	3b11      	subs	r3, #17
 801c686:	f023 0303 	bic.w	r3, r3, #3
 801c68a:	3211      	adds	r2, #17
 801c68c:	42a2      	cmp	r2, r4
 801c68e:	bf88      	it	hi
 801c690:	2300      	movhi	r3, #0
 801c692:	4418      	add	r0, r3
 801c694:	2300      	movs	r3, #0
 801c696:	4288      	cmp	r0, r1
 801c698:	d305      	bcc.n	801c6a6 <__copybits+0x40>
 801c69a:	bd70      	pop	{r4, r5, r6, pc}
 801c69c:	f853 6b04 	ldr.w	r6, [r3], #4
 801c6a0:	f845 6f04 	str.w	r6, [r5, #4]!
 801c6a4:	e7eb      	b.n	801c67e <__copybits+0x18>
 801c6a6:	f840 3b04 	str.w	r3, [r0], #4
 801c6aa:	e7f4      	b.n	801c696 <__copybits+0x30>

0801c6ac <__any_on>:
 801c6ac:	f100 0214 	add.w	r2, r0, #20
 801c6b0:	6900      	ldr	r0, [r0, #16]
 801c6b2:	114b      	asrs	r3, r1, #5
 801c6b4:	4298      	cmp	r0, r3
 801c6b6:	b510      	push	{r4, lr}
 801c6b8:	db11      	blt.n	801c6de <__any_on+0x32>
 801c6ba:	dd0a      	ble.n	801c6d2 <__any_on+0x26>
 801c6bc:	f011 011f 	ands.w	r1, r1, #31
 801c6c0:	d007      	beq.n	801c6d2 <__any_on+0x26>
 801c6c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c6c6:	fa24 f001 	lsr.w	r0, r4, r1
 801c6ca:	fa00 f101 	lsl.w	r1, r0, r1
 801c6ce:	428c      	cmp	r4, r1
 801c6d0:	d10b      	bne.n	801c6ea <__any_on+0x3e>
 801c6d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c6d6:	4293      	cmp	r3, r2
 801c6d8:	d803      	bhi.n	801c6e2 <__any_on+0x36>
 801c6da:	2000      	movs	r0, #0
 801c6dc:	bd10      	pop	{r4, pc}
 801c6de:	4603      	mov	r3, r0
 801c6e0:	e7f7      	b.n	801c6d2 <__any_on+0x26>
 801c6e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c6e6:	2900      	cmp	r1, #0
 801c6e8:	d0f5      	beq.n	801c6d6 <__any_on+0x2a>
 801c6ea:	2001      	movs	r0, #1
 801c6ec:	e7f6      	b.n	801c6dc <__any_on+0x30>

0801c6ee <_realloc_r>:
 801c6ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6f0:	4607      	mov	r7, r0
 801c6f2:	4614      	mov	r4, r2
 801c6f4:	460e      	mov	r6, r1
 801c6f6:	b921      	cbnz	r1, 801c702 <_realloc_r+0x14>
 801c6f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c6fc:	4611      	mov	r1, r2
 801c6fe:	f7fd b8d1 	b.w	80198a4 <_malloc_r>
 801c702:	b922      	cbnz	r2, 801c70e <_realloc_r+0x20>
 801c704:	f7fd f87e 	bl	8019804 <_free_r>
 801c708:	4625      	mov	r5, r4
 801c70a:	4628      	mov	r0, r5
 801c70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c70e:	f001 f841 	bl	801d794 <_malloc_usable_size_r>
 801c712:	42a0      	cmp	r0, r4
 801c714:	d20f      	bcs.n	801c736 <_realloc_r+0x48>
 801c716:	4621      	mov	r1, r4
 801c718:	4638      	mov	r0, r7
 801c71a:	f7fd f8c3 	bl	80198a4 <_malloc_r>
 801c71e:	4605      	mov	r5, r0
 801c720:	2800      	cmp	r0, #0
 801c722:	d0f2      	beq.n	801c70a <_realloc_r+0x1c>
 801c724:	4631      	mov	r1, r6
 801c726:	4622      	mov	r2, r4
 801c728:	f7fd f82c 	bl	8019784 <memcpy>
 801c72c:	4631      	mov	r1, r6
 801c72e:	4638      	mov	r0, r7
 801c730:	f7fd f868 	bl	8019804 <_free_r>
 801c734:	e7e9      	b.n	801c70a <_realloc_r+0x1c>
 801c736:	4635      	mov	r5, r6
 801c738:	e7e7      	b.n	801c70a <_realloc_r+0x1c>

0801c73a <__ssputs_r>:
 801c73a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c73e:	688e      	ldr	r6, [r1, #8]
 801c740:	429e      	cmp	r6, r3
 801c742:	4682      	mov	sl, r0
 801c744:	460c      	mov	r4, r1
 801c746:	4690      	mov	r8, r2
 801c748:	461f      	mov	r7, r3
 801c74a:	d838      	bhi.n	801c7be <__ssputs_r+0x84>
 801c74c:	898a      	ldrh	r2, [r1, #12]
 801c74e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c752:	d032      	beq.n	801c7ba <__ssputs_r+0x80>
 801c754:	6825      	ldr	r5, [r4, #0]
 801c756:	6909      	ldr	r1, [r1, #16]
 801c758:	eba5 0901 	sub.w	r9, r5, r1
 801c75c:	6965      	ldr	r5, [r4, #20]
 801c75e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c762:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c766:	3301      	adds	r3, #1
 801c768:	444b      	add	r3, r9
 801c76a:	106d      	asrs	r5, r5, #1
 801c76c:	429d      	cmp	r5, r3
 801c76e:	bf38      	it	cc
 801c770:	461d      	movcc	r5, r3
 801c772:	0553      	lsls	r3, r2, #21
 801c774:	d531      	bpl.n	801c7da <__ssputs_r+0xa0>
 801c776:	4629      	mov	r1, r5
 801c778:	f7fd f894 	bl	80198a4 <_malloc_r>
 801c77c:	4606      	mov	r6, r0
 801c77e:	b950      	cbnz	r0, 801c796 <__ssputs_r+0x5c>
 801c780:	230c      	movs	r3, #12
 801c782:	f8ca 3000 	str.w	r3, [sl]
 801c786:	89a3      	ldrh	r3, [r4, #12]
 801c788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c78c:	81a3      	strh	r3, [r4, #12]
 801c78e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c796:	6921      	ldr	r1, [r4, #16]
 801c798:	464a      	mov	r2, r9
 801c79a:	f7fc fff3 	bl	8019784 <memcpy>
 801c79e:	89a3      	ldrh	r3, [r4, #12]
 801c7a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c7a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c7a8:	81a3      	strh	r3, [r4, #12]
 801c7aa:	6126      	str	r6, [r4, #16]
 801c7ac:	6165      	str	r5, [r4, #20]
 801c7ae:	444e      	add	r6, r9
 801c7b0:	eba5 0509 	sub.w	r5, r5, r9
 801c7b4:	6026      	str	r6, [r4, #0]
 801c7b6:	60a5      	str	r5, [r4, #8]
 801c7b8:	463e      	mov	r6, r7
 801c7ba:	42be      	cmp	r6, r7
 801c7bc:	d900      	bls.n	801c7c0 <__ssputs_r+0x86>
 801c7be:	463e      	mov	r6, r7
 801c7c0:	4632      	mov	r2, r6
 801c7c2:	6820      	ldr	r0, [r4, #0]
 801c7c4:	4641      	mov	r1, r8
 801c7c6:	f7fc ffeb 	bl	80197a0 <memmove>
 801c7ca:	68a3      	ldr	r3, [r4, #8]
 801c7cc:	6822      	ldr	r2, [r4, #0]
 801c7ce:	1b9b      	subs	r3, r3, r6
 801c7d0:	4432      	add	r2, r6
 801c7d2:	60a3      	str	r3, [r4, #8]
 801c7d4:	6022      	str	r2, [r4, #0]
 801c7d6:	2000      	movs	r0, #0
 801c7d8:	e7db      	b.n	801c792 <__ssputs_r+0x58>
 801c7da:	462a      	mov	r2, r5
 801c7dc:	f7ff ff87 	bl	801c6ee <_realloc_r>
 801c7e0:	4606      	mov	r6, r0
 801c7e2:	2800      	cmp	r0, #0
 801c7e4:	d1e1      	bne.n	801c7aa <__ssputs_r+0x70>
 801c7e6:	6921      	ldr	r1, [r4, #16]
 801c7e8:	4650      	mov	r0, sl
 801c7ea:	f7fd f80b 	bl	8019804 <_free_r>
 801c7ee:	e7c7      	b.n	801c780 <__ssputs_r+0x46>

0801c7f0 <_svfiprintf_r>:
 801c7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7f4:	4698      	mov	r8, r3
 801c7f6:	898b      	ldrh	r3, [r1, #12]
 801c7f8:	061b      	lsls	r3, r3, #24
 801c7fa:	b09d      	sub	sp, #116	; 0x74
 801c7fc:	4607      	mov	r7, r0
 801c7fe:	460d      	mov	r5, r1
 801c800:	4614      	mov	r4, r2
 801c802:	d50e      	bpl.n	801c822 <_svfiprintf_r+0x32>
 801c804:	690b      	ldr	r3, [r1, #16]
 801c806:	b963      	cbnz	r3, 801c822 <_svfiprintf_r+0x32>
 801c808:	2140      	movs	r1, #64	; 0x40
 801c80a:	f7fd f84b 	bl	80198a4 <_malloc_r>
 801c80e:	6028      	str	r0, [r5, #0]
 801c810:	6128      	str	r0, [r5, #16]
 801c812:	b920      	cbnz	r0, 801c81e <_svfiprintf_r+0x2e>
 801c814:	230c      	movs	r3, #12
 801c816:	603b      	str	r3, [r7, #0]
 801c818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c81c:	e0d1      	b.n	801c9c2 <_svfiprintf_r+0x1d2>
 801c81e:	2340      	movs	r3, #64	; 0x40
 801c820:	616b      	str	r3, [r5, #20]
 801c822:	2300      	movs	r3, #0
 801c824:	9309      	str	r3, [sp, #36]	; 0x24
 801c826:	2320      	movs	r3, #32
 801c828:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c82c:	f8cd 800c 	str.w	r8, [sp, #12]
 801c830:	2330      	movs	r3, #48	; 0x30
 801c832:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801c9dc <_svfiprintf_r+0x1ec>
 801c836:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c83a:	f04f 0901 	mov.w	r9, #1
 801c83e:	4623      	mov	r3, r4
 801c840:	469a      	mov	sl, r3
 801c842:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c846:	b10a      	cbz	r2, 801c84c <_svfiprintf_r+0x5c>
 801c848:	2a25      	cmp	r2, #37	; 0x25
 801c84a:	d1f9      	bne.n	801c840 <_svfiprintf_r+0x50>
 801c84c:	ebba 0b04 	subs.w	fp, sl, r4
 801c850:	d00b      	beq.n	801c86a <_svfiprintf_r+0x7a>
 801c852:	465b      	mov	r3, fp
 801c854:	4622      	mov	r2, r4
 801c856:	4629      	mov	r1, r5
 801c858:	4638      	mov	r0, r7
 801c85a:	f7ff ff6e 	bl	801c73a <__ssputs_r>
 801c85e:	3001      	adds	r0, #1
 801c860:	f000 80aa 	beq.w	801c9b8 <_svfiprintf_r+0x1c8>
 801c864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c866:	445a      	add	r2, fp
 801c868:	9209      	str	r2, [sp, #36]	; 0x24
 801c86a:	f89a 3000 	ldrb.w	r3, [sl]
 801c86e:	2b00      	cmp	r3, #0
 801c870:	f000 80a2 	beq.w	801c9b8 <_svfiprintf_r+0x1c8>
 801c874:	2300      	movs	r3, #0
 801c876:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c87a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c87e:	f10a 0a01 	add.w	sl, sl, #1
 801c882:	9304      	str	r3, [sp, #16]
 801c884:	9307      	str	r3, [sp, #28]
 801c886:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c88a:	931a      	str	r3, [sp, #104]	; 0x68
 801c88c:	4654      	mov	r4, sl
 801c88e:	2205      	movs	r2, #5
 801c890:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c894:	4851      	ldr	r0, [pc, #324]	; (801c9dc <_svfiprintf_r+0x1ec>)
 801c896:	f7e3 fcb3 	bl	8000200 <memchr>
 801c89a:	9a04      	ldr	r2, [sp, #16]
 801c89c:	b9d8      	cbnz	r0, 801c8d6 <_svfiprintf_r+0xe6>
 801c89e:	06d0      	lsls	r0, r2, #27
 801c8a0:	bf44      	itt	mi
 801c8a2:	2320      	movmi	r3, #32
 801c8a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c8a8:	0711      	lsls	r1, r2, #28
 801c8aa:	bf44      	itt	mi
 801c8ac:	232b      	movmi	r3, #43	; 0x2b
 801c8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c8b2:	f89a 3000 	ldrb.w	r3, [sl]
 801c8b6:	2b2a      	cmp	r3, #42	; 0x2a
 801c8b8:	d015      	beq.n	801c8e6 <_svfiprintf_r+0xf6>
 801c8ba:	9a07      	ldr	r2, [sp, #28]
 801c8bc:	4654      	mov	r4, sl
 801c8be:	2000      	movs	r0, #0
 801c8c0:	f04f 0c0a 	mov.w	ip, #10
 801c8c4:	4621      	mov	r1, r4
 801c8c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c8ca:	3b30      	subs	r3, #48	; 0x30
 801c8cc:	2b09      	cmp	r3, #9
 801c8ce:	d94e      	bls.n	801c96e <_svfiprintf_r+0x17e>
 801c8d0:	b1b0      	cbz	r0, 801c900 <_svfiprintf_r+0x110>
 801c8d2:	9207      	str	r2, [sp, #28]
 801c8d4:	e014      	b.n	801c900 <_svfiprintf_r+0x110>
 801c8d6:	eba0 0308 	sub.w	r3, r0, r8
 801c8da:	fa09 f303 	lsl.w	r3, r9, r3
 801c8de:	4313      	orrs	r3, r2
 801c8e0:	9304      	str	r3, [sp, #16]
 801c8e2:	46a2      	mov	sl, r4
 801c8e4:	e7d2      	b.n	801c88c <_svfiprintf_r+0x9c>
 801c8e6:	9b03      	ldr	r3, [sp, #12]
 801c8e8:	1d19      	adds	r1, r3, #4
 801c8ea:	681b      	ldr	r3, [r3, #0]
 801c8ec:	9103      	str	r1, [sp, #12]
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	bfbb      	ittet	lt
 801c8f2:	425b      	neglt	r3, r3
 801c8f4:	f042 0202 	orrlt.w	r2, r2, #2
 801c8f8:	9307      	strge	r3, [sp, #28]
 801c8fa:	9307      	strlt	r3, [sp, #28]
 801c8fc:	bfb8      	it	lt
 801c8fe:	9204      	strlt	r2, [sp, #16]
 801c900:	7823      	ldrb	r3, [r4, #0]
 801c902:	2b2e      	cmp	r3, #46	; 0x2e
 801c904:	d10c      	bne.n	801c920 <_svfiprintf_r+0x130>
 801c906:	7863      	ldrb	r3, [r4, #1]
 801c908:	2b2a      	cmp	r3, #42	; 0x2a
 801c90a:	d135      	bne.n	801c978 <_svfiprintf_r+0x188>
 801c90c:	9b03      	ldr	r3, [sp, #12]
 801c90e:	1d1a      	adds	r2, r3, #4
 801c910:	681b      	ldr	r3, [r3, #0]
 801c912:	9203      	str	r2, [sp, #12]
 801c914:	2b00      	cmp	r3, #0
 801c916:	bfb8      	it	lt
 801c918:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c91c:	3402      	adds	r4, #2
 801c91e:	9305      	str	r3, [sp, #20]
 801c920:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801c9ec <_svfiprintf_r+0x1fc>
 801c924:	7821      	ldrb	r1, [r4, #0]
 801c926:	2203      	movs	r2, #3
 801c928:	4650      	mov	r0, sl
 801c92a:	f7e3 fc69 	bl	8000200 <memchr>
 801c92e:	b140      	cbz	r0, 801c942 <_svfiprintf_r+0x152>
 801c930:	2340      	movs	r3, #64	; 0x40
 801c932:	eba0 000a 	sub.w	r0, r0, sl
 801c936:	fa03 f000 	lsl.w	r0, r3, r0
 801c93a:	9b04      	ldr	r3, [sp, #16]
 801c93c:	4303      	orrs	r3, r0
 801c93e:	3401      	adds	r4, #1
 801c940:	9304      	str	r3, [sp, #16]
 801c942:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c946:	4826      	ldr	r0, [pc, #152]	; (801c9e0 <_svfiprintf_r+0x1f0>)
 801c948:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c94c:	2206      	movs	r2, #6
 801c94e:	f7e3 fc57 	bl	8000200 <memchr>
 801c952:	2800      	cmp	r0, #0
 801c954:	d038      	beq.n	801c9c8 <_svfiprintf_r+0x1d8>
 801c956:	4b23      	ldr	r3, [pc, #140]	; (801c9e4 <_svfiprintf_r+0x1f4>)
 801c958:	bb1b      	cbnz	r3, 801c9a2 <_svfiprintf_r+0x1b2>
 801c95a:	9b03      	ldr	r3, [sp, #12]
 801c95c:	3307      	adds	r3, #7
 801c95e:	f023 0307 	bic.w	r3, r3, #7
 801c962:	3308      	adds	r3, #8
 801c964:	9303      	str	r3, [sp, #12]
 801c966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c968:	4433      	add	r3, r6
 801c96a:	9309      	str	r3, [sp, #36]	; 0x24
 801c96c:	e767      	b.n	801c83e <_svfiprintf_r+0x4e>
 801c96e:	fb0c 3202 	mla	r2, ip, r2, r3
 801c972:	460c      	mov	r4, r1
 801c974:	2001      	movs	r0, #1
 801c976:	e7a5      	b.n	801c8c4 <_svfiprintf_r+0xd4>
 801c978:	2300      	movs	r3, #0
 801c97a:	3401      	adds	r4, #1
 801c97c:	9305      	str	r3, [sp, #20]
 801c97e:	4619      	mov	r1, r3
 801c980:	f04f 0c0a 	mov.w	ip, #10
 801c984:	4620      	mov	r0, r4
 801c986:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c98a:	3a30      	subs	r2, #48	; 0x30
 801c98c:	2a09      	cmp	r2, #9
 801c98e:	d903      	bls.n	801c998 <_svfiprintf_r+0x1a8>
 801c990:	2b00      	cmp	r3, #0
 801c992:	d0c5      	beq.n	801c920 <_svfiprintf_r+0x130>
 801c994:	9105      	str	r1, [sp, #20]
 801c996:	e7c3      	b.n	801c920 <_svfiprintf_r+0x130>
 801c998:	fb0c 2101 	mla	r1, ip, r1, r2
 801c99c:	4604      	mov	r4, r0
 801c99e:	2301      	movs	r3, #1
 801c9a0:	e7f0      	b.n	801c984 <_svfiprintf_r+0x194>
 801c9a2:	ab03      	add	r3, sp, #12
 801c9a4:	9300      	str	r3, [sp, #0]
 801c9a6:	462a      	mov	r2, r5
 801c9a8:	4b0f      	ldr	r3, [pc, #60]	; (801c9e8 <_svfiprintf_r+0x1f8>)
 801c9aa:	a904      	add	r1, sp, #16
 801c9ac:	4638      	mov	r0, r7
 801c9ae:	f3af 8000 	nop.w
 801c9b2:	1c42      	adds	r2, r0, #1
 801c9b4:	4606      	mov	r6, r0
 801c9b6:	d1d6      	bne.n	801c966 <_svfiprintf_r+0x176>
 801c9b8:	89ab      	ldrh	r3, [r5, #12]
 801c9ba:	065b      	lsls	r3, r3, #25
 801c9bc:	f53f af2c 	bmi.w	801c818 <_svfiprintf_r+0x28>
 801c9c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c9c2:	b01d      	add	sp, #116	; 0x74
 801c9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9c8:	ab03      	add	r3, sp, #12
 801c9ca:	9300      	str	r3, [sp, #0]
 801c9cc:	462a      	mov	r2, r5
 801c9ce:	4b06      	ldr	r3, [pc, #24]	; (801c9e8 <_svfiprintf_r+0x1f8>)
 801c9d0:	a904      	add	r1, sp, #16
 801c9d2:	4638      	mov	r0, r7
 801c9d4:	f000 fba6 	bl	801d124 <_printf_i>
 801c9d8:	e7eb      	b.n	801c9b2 <_svfiprintf_r+0x1c2>
 801c9da:	bf00      	nop
 801c9dc:	0801fb0c 	.word	0x0801fb0c
 801c9e0:	0801fb16 	.word	0x0801fb16
 801c9e4:	00000000 	.word	0x00000000
 801c9e8:	0801c73b 	.word	0x0801c73b
 801c9ec:	0801fb12 	.word	0x0801fb12

0801c9f0 <_sungetc_r>:
 801c9f0:	b538      	push	{r3, r4, r5, lr}
 801c9f2:	1c4b      	adds	r3, r1, #1
 801c9f4:	4614      	mov	r4, r2
 801c9f6:	d103      	bne.n	801ca00 <_sungetc_r+0x10>
 801c9f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801c9fc:	4628      	mov	r0, r5
 801c9fe:	bd38      	pop	{r3, r4, r5, pc}
 801ca00:	8993      	ldrh	r3, [r2, #12]
 801ca02:	f023 0320 	bic.w	r3, r3, #32
 801ca06:	8193      	strh	r3, [r2, #12]
 801ca08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ca0a:	6852      	ldr	r2, [r2, #4]
 801ca0c:	b2cd      	uxtb	r5, r1
 801ca0e:	b18b      	cbz	r3, 801ca34 <_sungetc_r+0x44>
 801ca10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ca12:	4293      	cmp	r3, r2
 801ca14:	dd08      	ble.n	801ca28 <_sungetc_r+0x38>
 801ca16:	6823      	ldr	r3, [r4, #0]
 801ca18:	1e5a      	subs	r2, r3, #1
 801ca1a:	6022      	str	r2, [r4, #0]
 801ca1c:	f803 5c01 	strb.w	r5, [r3, #-1]
 801ca20:	6863      	ldr	r3, [r4, #4]
 801ca22:	3301      	adds	r3, #1
 801ca24:	6063      	str	r3, [r4, #4]
 801ca26:	e7e9      	b.n	801c9fc <_sungetc_r+0xc>
 801ca28:	4621      	mov	r1, r4
 801ca2a:	f000 fe43 	bl	801d6b4 <__submore>
 801ca2e:	2800      	cmp	r0, #0
 801ca30:	d0f1      	beq.n	801ca16 <_sungetc_r+0x26>
 801ca32:	e7e1      	b.n	801c9f8 <_sungetc_r+0x8>
 801ca34:	6921      	ldr	r1, [r4, #16]
 801ca36:	6823      	ldr	r3, [r4, #0]
 801ca38:	b151      	cbz	r1, 801ca50 <_sungetc_r+0x60>
 801ca3a:	4299      	cmp	r1, r3
 801ca3c:	d208      	bcs.n	801ca50 <_sungetc_r+0x60>
 801ca3e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801ca42:	42a9      	cmp	r1, r5
 801ca44:	d104      	bne.n	801ca50 <_sungetc_r+0x60>
 801ca46:	3b01      	subs	r3, #1
 801ca48:	3201      	adds	r2, #1
 801ca4a:	6023      	str	r3, [r4, #0]
 801ca4c:	6062      	str	r2, [r4, #4]
 801ca4e:	e7d5      	b.n	801c9fc <_sungetc_r+0xc>
 801ca50:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801ca54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ca58:	6363      	str	r3, [r4, #52]	; 0x34
 801ca5a:	2303      	movs	r3, #3
 801ca5c:	63a3      	str	r3, [r4, #56]	; 0x38
 801ca5e:	4623      	mov	r3, r4
 801ca60:	f803 5f46 	strb.w	r5, [r3, #70]!
 801ca64:	6023      	str	r3, [r4, #0]
 801ca66:	2301      	movs	r3, #1
 801ca68:	e7dc      	b.n	801ca24 <_sungetc_r+0x34>

0801ca6a <__ssrefill_r>:
 801ca6a:	b510      	push	{r4, lr}
 801ca6c:	460c      	mov	r4, r1
 801ca6e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ca70:	b169      	cbz	r1, 801ca8e <__ssrefill_r+0x24>
 801ca72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ca76:	4299      	cmp	r1, r3
 801ca78:	d001      	beq.n	801ca7e <__ssrefill_r+0x14>
 801ca7a:	f7fc fec3 	bl	8019804 <_free_r>
 801ca7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ca80:	6063      	str	r3, [r4, #4]
 801ca82:	2000      	movs	r0, #0
 801ca84:	6360      	str	r0, [r4, #52]	; 0x34
 801ca86:	b113      	cbz	r3, 801ca8e <__ssrefill_r+0x24>
 801ca88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ca8a:	6023      	str	r3, [r4, #0]
 801ca8c:	bd10      	pop	{r4, pc}
 801ca8e:	6923      	ldr	r3, [r4, #16]
 801ca90:	6023      	str	r3, [r4, #0]
 801ca92:	2300      	movs	r3, #0
 801ca94:	6063      	str	r3, [r4, #4]
 801ca96:	89a3      	ldrh	r3, [r4, #12]
 801ca98:	f043 0320 	orr.w	r3, r3, #32
 801ca9c:	81a3      	strh	r3, [r4, #12]
 801ca9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801caa2:	e7f3      	b.n	801ca8c <__ssrefill_r+0x22>

0801caa4 <__ssvfiscanf_r>:
 801caa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801caa8:	460c      	mov	r4, r1
 801caaa:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801caae:	2100      	movs	r1, #0
 801cab0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801cab4:	49b2      	ldr	r1, [pc, #712]	; (801cd80 <__ssvfiscanf_r+0x2dc>)
 801cab6:	91a0      	str	r1, [sp, #640]	; 0x280
 801cab8:	f10d 0804 	add.w	r8, sp, #4
 801cabc:	49b1      	ldr	r1, [pc, #708]	; (801cd84 <__ssvfiscanf_r+0x2e0>)
 801cabe:	4fb2      	ldr	r7, [pc, #712]	; (801cd88 <__ssvfiscanf_r+0x2e4>)
 801cac0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801cd8c <__ssvfiscanf_r+0x2e8>
 801cac4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801cac8:	4606      	mov	r6, r0
 801caca:	91a1      	str	r1, [sp, #644]	; 0x284
 801cacc:	9300      	str	r3, [sp, #0]
 801cace:	f892 a000 	ldrb.w	sl, [r2]
 801cad2:	f1ba 0f00 	cmp.w	sl, #0
 801cad6:	f000 8151 	beq.w	801cd7c <__ssvfiscanf_r+0x2d8>
 801cada:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801cade:	f013 0308 	ands.w	r3, r3, #8
 801cae2:	f102 0501 	add.w	r5, r2, #1
 801cae6:	d019      	beq.n	801cb1c <__ssvfiscanf_r+0x78>
 801cae8:	6863      	ldr	r3, [r4, #4]
 801caea:	2b00      	cmp	r3, #0
 801caec:	dd0f      	ble.n	801cb0e <__ssvfiscanf_r+0x6a>
 801caee:	6823      	ldr	r3, [r4, #0]
 801caf0:	781a      	ldrb	r2, [r3, #0]
 801caf2:	5cba      	ldrb	r2, [r7, r2]
 801caf4:	0712      	lsls	r2, r2, #28
 801caf6:	d401      	bmi.n	801cafc <__ssvfiscanf_r+0x58>
 801caf8:	462a      	mov	r2, r5
 801cafa:	e7e8      	b.n	801cace <__ssvfiscanf_r+0x2a>
 801cafc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801cafe:	3201      	adds	r2, #1
 801cb00:	9245      	str	r2, [sp, #276]	; 0x114
 801cb02:	6862      	ldr	r2, [r4, #4]
 801cb04:	3301      	adds	r3, #1
 801cb06:	3a01      	subs	r2, #1
 801cb08:	6062      	str	r2, [r4, #4]
 801cb0a:	6023      	str	r3, [r4, #0]
 801cb0c:	e7ec      	b.n	801cae8 <__ssvfiscanf_r+0x44>
 801cb0e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801cb10:	4621      	mov	r1, r4
 801cb12:	4630      	mov	r0, r6
 801cb14:	4798      	blx	r3
 801cb16:	2800      	cmp	r0, #0
 801cb18:	d0e9      	beq.n	801caee <__ssvfiscanf_r+0x4a>
 801cb1a:	e7ed      	b.n	801caf8 <__ssvfiscanf_r+0x54>
 801cb1c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801cb20:	f040 8083 	bne.w	801cc2a <__ssvfiscanf_r+0x186>
 801cb24:	9341      	str	r3, [sp, #260]	; 0x104
 801cb26:	9343      	str	r3, [sp, #268]	; 0x10c
 801cb28:	7853      	ldrb	r3, [r2, #1]
 801cb2a:	2b2a      	cmp	r3, #42	; 0x2a
 801cb2c:	bf02      	ittt	eq
 801cb2e:	2310      	moveq	r3, #16
 801cb30:	1c95      	addeq	r5, r2, #2
 801cb32:	9341      	streq	r3, [sp, #260]	; 0x104
 801cb34:	220a      	movs	r2, #10
 801cb36:	46ab      	mov	fp, r5
 801cb38:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801cb3c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801cb40:	2b09      	cmp	r3, #9
 801cb42:	d91d      	bls.n	801cb80 <__ssvfiscanf_r+0xdc>
 801cb44:	4891      	ldr	r0, [pc, #580]	; (801cd8c <__ssvfiscanf_r+0x2e8>)
 801cb46:	2203      	movs	r2, #3
 801cb48:	f7e3 fb5a 	bl	8000200 <memchr>
 801cb4c:	b140      	cbz	r0, 801cb60 <__ssvfiscanf_r+0xbc>
 801cb4e:	2301      	movs	r3, #1
 801cb50:	eba0 0009 	sub.w	r0, r0, r9
 801cb54:	fa03 f000 	lsl.w	r0, r3, r0
 801cb58:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801cb5a:	4318      	orrs	r0, r3
 801cb5c:	9041      	str	r0, [sp, #260]	; 0x104
 801cb5e:	465d      	mov	r5, fp
 801cb60:	f815 3b01 	ldrb.w	r3, [r5], #1
 801cb64:	2b78      	cmp	r3, #120	; 0x78
 801cb66:	d806      	bhi.n	801cb76 <__ssvfiscanf_r+0xd2>
 801cb68:	2b57      	cmp	r3, #87	; 0x57
 801cb6a:	d810      	bhi.n	801cb8e <__ssvfiscanf_r+0xea>
 801cb6c:	2b25      	cmp	r3, #37	; 0x25
 801cb6e:	d05c      	beq.n	801cc2a <__ssvfiscanf_r+0x186>
 801cb70:	d856      	bhi.n	801cc20 <__ssvfiscanf_r+0x17c>
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	d074      	beq.n	801cc60 <__ssvfiscanf_r+0x1bc>
 801cb76:	2303      	movs	r3, #3
 801cb78:	9347      	str	r3, [sp, #284]	; 0x11c
 801cb7a:	230a      	movs	r3, #10
 801cb7c:	9342      	str	r3, [sp, #264]	; 0x108
 801cb7e:	e081      	b.n	801cc84 <__ssvfiscanf_r+0x1e0>
 801cb80:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801cb82:	fb02 1303 	mla	r3, r2, r3, r1
 801cb86:	3b30      	subs	r3, #48	; 0x30
 801cb88:	9343      	str	r3, [sp, #268]	; 0x10c
 801cb8a:	465d      	mov	r5, fp
 801cb8c:	e7d3      	b.n	801cb36 <__ssvfiscanf_r+0x92>
 801cb8e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801cb92:	2a20      	cmp	r2, #32
 801cb94:	d8ef      	bhi.n	801cb76 <__ssvfiscanf_r+0xd2>
 801cb96:	a101      	add	r1, pc, #4	; (adr r1, 801cb9c <__ssvfiscanf_r+0xf8>)
 801cb98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801cb9c:	0801cc6f 	.word	0x0801cc6f
 801cba0:	0801cb77 	.word	0x0801cb77
 801cba4:	0801cb77 	.word	0x0801cb77
 801cba8:	0801cccd 	.word	0x0801cccd
 801cbac:	0801cb77 	.word	0x0801cb77
 801cbb0:	0801cb77 	.word	0x0801cb77
 801cbb4:	0801cb77 	.word	0x0801cb77
 801cbb8:	0801cb77 	.word	0x0801cb77
 801cbbc:	0801cb77 	.word	0x0801cb77
 801cbc0:	0801cb77 	.word	0x0801cb77
 801cbc4:	0801cb77 	.word	0x0801cb77
 801cbc8:	0801cce3 	.word	0x0801cce3
 801cbcc:	0801ccb9 	.word	0x0801ccb9
 801cbd0:	0801cc27 	.word	0x0801cc27
 801cbd4:	0801cc27 	.word	0x0801cc27
 801cbd8:	0801cc27 	.word	0x0801cc27
 801cbdc:	0801cb77 	.word	0x0801cb77
 801cbe0:	0801ccbd 	.word	0x0801ccbd
 801cbe4:	0801cb77 	.word	0x0801cb77
 801cbe8:	0801cb77 	.word	0x0801cb77
 801cbec:	0801cb77 	.word	0x0801cb77
 801cbf0:	0801cb77 	.word	0x0801cb77
 801cbf4:	0801ccf3 	.word	0x0801ccf3
 801cbf8:	0801ccc5 	.word	0x0801ccc5
 801cbfc:	0801cc67 	.word	0x0801cc67
 801cc00:	0801cb77 	.word	0x0801cb77
 801cc04:	0801cb77 	.word	0x0801cb77
 801cc08:	0801ccef 	.word	0x0801ccef
 801cc0c:	0801cb77 	.word	0x0801cb77
 801cc10:	0801ccb9 	.word	0x0801ccb9
 801cc14:	0801cb77 	.word	0x0801cb77
 801cc18:	0801cb77 	.word	0x0801cb77
 801cc1c:	0801cc6f 	.word	0x0801cc6f
 801cc20:	3b45      	subs	r3, #69	; 0x45
 801cc22:	2b02      	cmp	r3, #2
 801cc24:	d8a7      	bhi.n	801cb76 <__ssvfiscanf_r+0xd2>
 801cc26:	2305      	movs	r3, #5
 801cc28:	e02b      	b.n	801cc82 <__ssvfiscanf_r+0x1de>
 801cc2a:	6863      	ldr	r3, [r4, #4]
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	dd0d      	ble.n	801cc4c <__ssvfiscanf_r+0x1a8>
 801cc30:	6823      	ldr	r3, [r4, #0]
 801cc32:	781a      	ldrb	r2, [r3, #0]
 801cc34:	4552      	cmp	r2, sl
 801cc36:	f040 80a1 	bne.w	801cd7c <__ssvfiscanf_r+0x2d8>
 801cc3a:	3301      	adds	r3, #1
 801cc3c:	6862      	ldr	r2, [r4, #4]
 801cc3e:	6023      	str	r3, [r4, #0]
 801cc40:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801cc42:	3a01      	subs	r2, #1
 801cc44:	3301      	adds	r3, #1
 801cc46:	6062      	str	r2, [r4, #4]
 801cc48:	9345      	str	r3, [sp, #276]	; 0x114
 801cc4a:	e755      	b.n	801caf8 <__ssvfiscanf_r+0x54>
 801cc4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801cc4e:	4621      	mov	r1, r4
 801cc50:	4630      	mov	r0, r6
 801cc52:	4798      	blx	r3
 801cc54:	2800      	cmp	r0, #0
 801cc56:	d0eb      	beq.n	801cc30 <__ssvfiscanf_r+0x18c>
 801cc58:	9844      	ldr	r0, [sp, #272]	; 0x110
 801cc5a:	2800      	cmp	r0, #0
 801cc5c:	f040 8084 	bne.w	801cd68 <__ssvfiscanf_r+0x2c4>
 801cc60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cc64:	e086      	b.n	801cd74 <__ssvfiscanf_r+0x2d0>
 801cc66:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801cc68:	f042 0220 	orr.w	r2, r2, #32
 801cc6c:	9241      	str	r2, [sp, #260]	; 0x104
 801cc6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801cc70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801cc74:	9241      	str	r2, [sp, #260]	; 0x104
 801cc76:	2210      	movs	r2, #16
 801cc78:	2b6f      	cmp	r3, #111	; 0x6f
 801cc7a:	9242      	str	r2, [sp, #264]	; 0x108
 801cc7c:	bf34      	ite	cc
 801cc7e:	2303      	movcc	r3, #3
 801cc80:	2304      	movcs	r3, #4
 801cc82:	9347      	str	r3, [sp, #284]	; 0x11c
 801cc84:	6863      	ldr	r3, [r4, #4]
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	dd41      	ble.n	801cd0e <__ssvfiscanf_r+0x26a>
 801cc8a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801cc8c:	0659      	lsls	r1, r3, #25
 801cc8e:	d404      	bmi.n	801cc9a <__ssvfiscanf_r+0x1f6>
 801cc90:	6823      	ldr	r3, [r4, #0]
 801cc92:	781a      	ldrb	r2, [r3, #0]
 801cc94:	5cba      	ldrb	r2, [r7, r2]
 801cc96:	0712      	lsls	r2, r2, #28
 801cc98:	d440      	bmi.n	801cd1c <__ssvfiscanf_r+0x278>
 801cc9a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801cc9c:	2b02      	cmp	r3, #2
 801cc9e:	dc4f      	bgt.n	801cd40 <__ssvfiscanf_r+0x29c>
 801cca0:	466b      	mov	r3, sp
 801cca2:	4622      	mov	r2, r4
 801cca4:	a941      	add	r1, sp, #260	; 0x104
 801cca6:	4630      	mov	r0, r6
 801cca8:	f000 fb62 	bl	801d370 <_scanf_chars>
 801ccac:	2801      	cmp	r0, #1
 801ccae:	d065      	beq.n	801cd7c <__ssvfiscanf_r+0x2d8>
 801ccb0:	2802      	cmp	r0, #2
 801ccb2:	f47f af21 	bne.w	801caf8 <__ssvfiscanf_r+0x54>
 801ccb6:	e7cf      	b.n	801cc58 <__ssvfiscanf_r+0x1b4>
 801ccb8:	220a      	movs	r2, #10
 801ccba:	e7dd      	b.n	801cc78 <__ssvfiscanf_r+0x1d4>
 801ccbc:	2300      	movs	r3, #0
 801ccbe:	9342      	str	r3, [sp, #264]	; 0x108
 801ccc0:	2303      	movs	r3, #3
 801ccc2:	e7de      	b.n	801cc82 <__ssvfiscanf_r+0x1de>
 801ccc4:	2308      	movs	r3, #8
 801ccc6:	9342      	str	r3, [sp, #264]	; 0x108
 801ccc8:	2304      	movs	r3, #4
 801ccca:	e7da      	b.n	801cc82 <__ssvfiscanf_r+0x1de>
 801cccc:	4629      	mov	r1, r5
 801ccce:	4640      	mov	r0, r8
 801ccd0:	f000 fcb6 	bl	801d640 <__sccl>
 801ccd4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ccd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ccda:	9341      	str	r3, [sp, #260]	; 0x104
 801ccdc:	4605      	mov	r5, r0
 801ccde:	2301      	movs	r3, #1
 801cce0:	e7cf      	b.n	801cc82 <__ssvfiscanf_r+0x1de>
 801cce2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801cce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cce8:	9341      	str	r3, [sp, #260]	; 0x104
 801ccea:	2300      	movs	r3, #0
 801ccec:	e7c9      	b.n	801cc82 <__ssvfiscanf_r+0x1de>
 801ccee:	2302      	movs	r3, #2
 801ccf0:	e7c7      	b.n	801cc82 <__ssvfiscanf_r+0x1de>
 801ccf2:	9841      	ldr	r0, [sp, #260]	; 0x104
 801ccf4:	06c3      	lsls	r3, r0, #27
 801ccf6:	f53f aeff 	bmi.w	801caf8 <__ssvfiscanf_r+0x54>
 801ccfa:	9b00      	ldr	r3, [sp, #0]
 801ccfc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ccfe:	1d19      	adds	r1, r3, #4
 801cd00:	9100      	str	r1, [sp, #0]
 801cd02:	681b      	ldr	r3, [r3, #0]
 801cd04:	07c0      	lsls	r0, r0, #31
 801cd06:	bf4c      	ite	mi
 801cd08:	801a      	strhmi	r2, [r3, #0]
 801cd0a:	601a      	strpl	r2, [r3, #0]
 801cd0c:	e6f4      	b.n	801caf8 <__ssvfiscanf_r+0x54>
 801cd0e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801cd10:	4621      	mov	r1, r4
 801cd12:	4630      	mov	r0, r6
 801cd14:	4798      	blx	r3
 801cd16:	2800      	cmp	r0, #0
 801cd18:	d0b7      	beq.n	801cc8a <__ssvfiscanf_r+0x1e6>
 801cd1a:	e79d      	b.n	801cc58 <__ssvfiscanf_r+0x1b4>
 801cd1c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801cd1e:	3201      	adds	r2, #1
 801cd20:	9245      	str	r2, [sp, #276]	; 0x114
 801cd22:	6862      	ldr	r2, [r4, #4]
 801cd24:	3a01      	subs	r2, #1
 801cd26:	2a00      	cmp	r2, #0
 801cd28:	6062      	str	r2, [r4, #4]
 801cd2a:	dd02      	ble.n	801cd32 <__ssvfiscanf_r+0x28e>
 801cd2c:	3301      	adds	r3, #1
 801cd2e:	6023      	str	r3, [r4, #0]
 801cd30:	e7ae      	b.n	801cc90 <__ssvfiscanf_r+0x1ec>
 801cd32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801cd34:	4621      	mov	r1, r4
 801cd36:	4630      	mov	r0, r6
 801cd38:	4798      	blx	r3
 801cd3a:	2800      	cmp	r0, #0
 801cd3c:	d0a8      	beq.n	801cc90 <__ssvfiscanf_r+0x1ec>
 801cd3e:	e78b      	b.n	801cc58 <__ssvfiscanf_r+0x1b4>
 801cd40:	2b04      	cmp	r3, #4
 801cd42:	dc06      	bgt.n	801cd52 <__ssvfiscanf_r+0x2ae>
 801cd44:	466b      	mov	r3, sp
 801cd46:	4622      	mov	r2, r4
 801cd48:	a941      	add	r1, sp, #260	; 0x104
 801cd4a:	4630      	mov	r0, r6
 801cd4c:	f000 fb68 	bl	801d420 <_scanf_i>
 801cd50:	e7ac      	b.n	801ccac <__ssvfiscanf_r+0x208>
 801cd52:	4b0f      	ldr	r3, [pc, #60]	; (801cd90 <__ssvfiscanf_r+0x2ec>)
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	f43f aecf 	beq.w	801caf8 <__ssvfiscanf_r+0x54>
 801cd5a:	466b      	mov	r3, sp
 801cd5c:	4622      	mov	r2, r4
 801cd5e:	a941      	add	r1, sp, #260	; 0x104
 801cd60:	4630      	mov	r0, r6
 801cd62:	f7fc fdf9 	bl	8019958 <_scanf_float>
 801cd66:	e7a1      	b.n	801ccac <__ssvfiscanf_r+0x208>
 801cd68:	89a3      	ldrh	r3, [r4, #12]
 801cd6a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801cd6e:	bf18      	it	ne
 801cd70:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801cd74:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801cd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd7c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801cd7e:	e7f9      	b.n	801cd74 <__ssvfiscanf_r+0x2d0>
 801cd80:	0801c9f1 	.word	0x0801c9f1
 801cd84:	0801ca6b 	.word	0x0801ca6b
 801cd88:	0801f6a1 	.word	0x0801f6a1
 801cd8c:	0801fb12 	.word	0x0801fb12
 801cd90:	08019959 	.word	0x08019959

0801cd94 <__sfputc_r>:
 801cd94:	6893      	ldr	r3, [r2, #8]
 801cd96:	3b01      	subs	r3, #1
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	b410      	push	{r4}
 801cd9c:	6093      	str	r3, [r2, #8]
 801cd9e:	da08      	bge.n	801cdb2 <__sfputc_r+0x1e>
 801cda0:	6994      	ldr	r4, [r2, #24]
 801cda2:	42a3      	cmp	r3, r4
 801cda4:	db01      	blt.n	801cdaa <__sfputc_r+0x16>
 801cda6:	290a      	cmp	r1, #10
 801cda8:	d103      	bne.n	801cdb2 <__sfputc_r+0x1e>
 801cdaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cdae:	f7fe b90b 	b.w	801afc8 <__swbuf_r>
 801cdb2:	6813      	ldr	r3, [r2, #0]
 801cdb4:	1c58      	adds	r0, r3, #1
 801cdb6:	6010      	str	r0, [r2, #0]
 801cdb8:	7019      	strb	r1, [r3, #0]
 801cdba:	4608      	mov	r0, r1
 801cdbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cdc0:	4770      	bx	lr

0801cdc2 <__sfputs_r>:
 801cdc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cdc4:	4606      	mov	r6, r0
 801cdc6:	460f      	mov	r7, r1
 801cdc8:	4614      	mov	r4, r2
 801cdca:	18d5      	adds	r5, r2, r3
 801cdcc:	42ac      	cmp	r4, r5
 801cdce:	d101      	bne.n	801cdd4 <__sfputs_r+0x12>
 801cdd0:	2000      	movs	r0, #0
 801cdd2:	e007      	b.n	801cde4 <__sfputs_r+0x22>
 801cdd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cdd8:	463a      	mov	r2, r7
 801cdda:	4630      	mov	r0, r6
 801cddc:	f7ff ffda 	bl	801cd94 <__sfputc_r>
 801cde0:	1c43      	adds	r3, r0, #1
 801cde2:	d1f3      	bne.n	801cdcc <__sfputs_r+0xa>
 801cde4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cde8 <_vfiprintf_r>:
 801cde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdec:	460d      	mov	r5, r1
 801cdee:	b09d      	sub	sp, #116	; 0x74
 801cdf0:	4614      	mov	r4, r2
 801cdf2:	4698      	mov	r8, r3
 801cdf4:	4606      	mov	r6, r0
 801cdf6:	b118      	cbz	r0, 801ce00 <_vfiprintf_r+0x18>
 801cdf8:	6983      	ldr	r3, [r0, #24]
 801cdfa:	b90b      	cbnz	r3, 801ce00 <_vfiprintf_r+0x18>
 801cdfc:	f7fe fb0a 	bl	801b414 <__sinit>
 801ce00:	4b89      	ldr	r3, [pc, #548]	; (801d028 <_vfiprintf_r+0x240>)
 801ce02:	429d      	cmp	r5, r3
 801ce04:	d11b      	bne.n	801ce3e <_vfiprintf_r+0x56>
 801ce06:	6875      	ldr	r5, [r6, #4]
 801ce08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ce0a:	07d9      	lsls	r1, r3, #31
 801ce0c:	d405      	bmi.n	801ce1a <_vfiprintf_r+0x32>
 801ce0e:	89ab      	ldrh	r3, [r5, #12]
 801ce10:	059a      	lsls	r2, r3, #22
 801ce12:	d402      	bmi.n	801ce1a <_vfiprintf_r+0x32>
 801ce14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ce16:	f7fc fca2 	bl	801975e <__retarget_lock_acquire_recursive>
 801ce1a:	89ab      	ldrh	r3, [r5, #12]
 801ce1c:	071b      	lsls	r3, r3, #28
 801ce1e:	d501      	bpl.n	801ce24 <_vfiprintf_r+0x3c>
 801ce20:	692b      	ldr	r3, [r5, #16]
 801ce22:	b9eb      	cbnz	r3, 801ce60 <_vfiprintf_r+0x78>
 801ce24:	4629      	mov	r1, r5
 801ce26:	4630      	mov	r0, r6
 801ce28:	f7fe f932 	bl	801b090 <__swsetup_r>
 801ce2c:	b1c0      	cbz	r0, 801ce60 <_vfiprintf_r+0x78>
 801ce2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ce30:	07dc      	lsls	r4, r3, #31
 801ce32:	d50e      	bpl.n	801ce52 <_vfiprintf_r+0x6a>
 801ce34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ce38:	b01d      	add	sp, #116	; 0x74
 801ce3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce3e:	4b7b      	ldr	r3, [pc, #492]	; (801d02c <_vfiprintf_r+0x244>)
 801ce40:	429d      	cmp	r5, r3
 801ce42:	d101      	bne.n	801ce48 <_vfiprintf_r+0x60>
 801ce44:	68b5      	ldr	r5, [r6, #8]
 801ce46:	e7df      	b.n	801ce08 <_vfiprintf_r+0x20>
 801ce48:	4b79      	ldr	r3, [pc, #484]	; (801d030 <_vfiprintf_r+0x248>)
 801ce4a:	429d      	cmp	r5, r3
 801ce4c:	bf08      	it	eq
 801ce4e:	68f5      	ldreq	r5, [r6, #12]
 801ce50:	e7da      	b.n	801ce08 <_vfiprintf_r+0x20>
 801ce52:	89ab      	ldrh	r3, [r5, #12]
 801ce54:	0598      	lsls	r0, r3, #22
 801ce56:	d4ed      	bmi.n	801ce34 <_vfiprintf_r+0x4c>
 801ce58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ce5a:	f7fc fc81 	bl	8019760 <__retarget_lock_release_recursive>
 801ce5e:	e7e9      	b.n	801ce34 <_vfiprintf_r+0x4c>
 801ce60:	2300      	movs	r3, #0
 801ce62:	9309      	str	r3, [sp, #36]	; 0x24
 801ce64:	2320      	movs	r3, #32
 801ce66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ce6a:	f8cd 800c 	str.w	r8, [sp, #12]
 801ce6e:	2330      	movs	r3, #48	; 0x30
 801ce70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d034 <_vfiprintf_r+0x24c>
 801ce74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ce78:	f04f 0901 	mov.w	r9, #1
 801ce7c:	4623      	mov	r3, r4
 801ce7e:	469a      	mov	sl, r3
 801ce80:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ce84:	b10a      	cbz	r2, 801ce8a <_vfiprintf_r+0xa2>
 801ce86:	2a25      	cmp	r2, #37	; 0x25
 801ce88:	d1f9      	bne.n	801ce7e <_vfiprintf_r+0x96>
 801ce8a:	ebba 0b04 	subs.w	fp, sl, r4
 801ce8e:	d00b      	beq.n	801cea8 <_vfiprintf_r+0xc0>
 801ce90:	465b      	mov	r3, fp
 801ce92:	4622      	mov	r2, r4
 801ce94:	4629      	mov	r1, r5
 801ce96:	4630      	mov	r0, r6
 801ce98:	f7ff ff93 	bl	801cdc2 <__sfputs_r>
 801ce9c:	3001      	adds	r0, #1
 801ce9e:	f000 80aa 	beq.w	801cff6 <_vfiprintf_r+0x20e>
 801cea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cea4:	445a      	add	r2, fp
 801cea6:	9209      	str	r2, [sp, #36]	; 0x24
 801cea8:	f89a 3000 	ldrb.w	r3, [sl]
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	f000 80a2 	beq.w	801cff6 <_vfiprintf_r+0x20e>
 801ceb2:	2300      	movs	r3, #0
 801ceb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ceb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cebc:	f10a 0a01 	add.w	sl, sl, #1
 801cec0:	9304      	str	r3, [sp, #16]
 801cec2:	9307      	str	r3, [sp, #28]
 801cec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cec8:	931a      	str	r3, [sp, #104]	; 0x68
 801ceca:	4654      	mov	r4, sl
 801cecc:	2205      	movs	r2, #5
 801cece:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ced2:	4858      	ldr	r0, [pc, #352]	; (801d034 <_vfiprintf_r+0x24c>)
 801ced4:	f7e3 f994 	bl	8000200 <memchr>
 801ced8:	9a04      	ldr	r2, [sp, #16]
 801ceda:	b9d8      	cbnz	r0, 801cf14 <_vfiprintf_r+0x12c>
 801cedc:	06d1      	lsls	r1, r2, #27
 801cede:	bf44      	itt	mi
 801cee0:	2320      	movmi	r3, #32
 801cee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cee6:	0713      	lsls	r3, r2, #28
 801cee8:	bf44      	itt	mi
 801ceea:	232b      	movmi	r3, #43	; 0x2b
 801ceec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cef0:	f89a 3000 	ldrb.w	r3, [sl]
 801cef4:	2b2a      	cmp	r3, #42	; 0x2a
 801cef6:	d015      	beq.n	801cf24 <_vfiprintf_r+0x13c>
 801cef8:	9a07      	ldr	r2, [sp, #28]
 801cefa:	4654      	mov	r4, sl
 801cefc:	2000      	movs	r0, #0
 801cefe:	f04f 0c0a 	mov.w	ip, #10
 801cf02:	4621      	mov	r1, r4
 801cf04:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cf08:	3b30      	subs	r3, #48	; 0x30
 801cf0a:	2b09      	cmp	r3, #9
 801cf0c:	d94e      	bls.n	801cfac <_vfiprintf_r+0x1c4>
 801cf0e:	b1b0      	cbz	r0, 801cf3e <_vfiprintf_r+0x156>
 801cf10:	9207      	str	r2, [sp, #28]
 801cf12:	e014      	b.n	801cf3e <_vfiprintf_r+0x156>
 801cf14:	eba0 0308 	sub.w	r3, r0, r8
 801cf18:	fa09 f303 	lsl.w	r3, r9, r3
 801cf1c:	4313      	orrs	r3, r2
 801cf1e:	9304      	str	r3, [sp, #16]
 801cf20:	46a2      	mov	sl, r4
 801cf22:	e7d2      	b.n	801ceca <_vfiprintf_r+0xe2>
 801cf24:	9b03      	ldr	r3, [sp, #12]
 801cf26:	1d19      	adds	r1, r3, #4
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	9103      	str	r1, [sp, #12]
 801cf2c:	2b00      	cmp	r3, #0
 801cf2e:	bfbb      	ittet	lt
 801cf30:	425b      	neglt	r3, r3
 801cf32:	f042 0202 	orrlt.w	r2, r2, #2
 801cf36:	9307      	strge	r3, [sp, #28]
 801cf38:	9307      	strlt	r3, [sp, #28]
 801cf3a:	bfb8      	it	lt
 801cf3c:	9204      	strlt	r2, [sp, #16]
 801cf3e:	7823      	ldrb	r3, [r4, #0]
 801cf40:	2b2e      	cmp	r3, #46	; 0x2e
 801cf42:	d10c      	bne.n	801cf5e <_vfiprintf_r+0x176>
 801cf44:	7863      	ldrb	r3, [r4, #1]
 801cf46:	2b2a      	cmp	r3, #42	; 0x2a
 801cf48:	d135      	bne.n	801cfb6 <_vfiprintf_r+0x1ce>
 801cf4a:	9b03      	ldr	r3, [sp, #12]
 801cf4c:	1d1a      	adds	r2, r3, #4
 801cf4e:	681b      	ldr	r3, [r3, #0]
 801cf50:	9203      	str	r2, [sp, #12]
 801cf52:	2b00      	cmp	r3, #0
 801cf54:	bfb8      	it	lt
 801cf56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801cf5a:	3402      	adds	r4, #2
 801cf5c:	9305      	str	r3, [sp, #20]
 801cf5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d044 <_vfiprintf_r+0x25c>
 801cf62:	7821      	ldrb	r1, [r4, #0]
 801cf64:	2203      	movs	r2, #3
 801cf66:	4650      	mov	r0, sl
 801cf68:	f7e3 f94a 	bl	8000200 <memchr>
 801cf6c:	b140      	cbz	r0, 801cf80 <_vfiprintf_r+0x198>
 801cf6e:	2340      	movs	r3, #64	; 0x40
 801cf70:	eba0 000a 	sub.w	r0, r0, sl
 801cf74:	fa03 f000 	lsl.w	r0, r3, r0
 801cf78:	9b04      	ldr	r3, [sp, #16]
 801cf7a:	4303      	orrs	r3, r0
 801cf7c:	3401      	adds	r4, #1
 801cf7e:	9304      	str	r3, [sp, #16]
 801cf80:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf84:	482c      	ldr	r0, [pc, #176]	; (801d038 <_vfiprintf_r+0x250>)
 801cf86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cf8a:	2206      	movs	r2, #6
 801cf8c:	f7e3 f938 	bl	8000200 <memchr>
 801cf90:	2800      	cmp	r0, #0
 801cf92:	d03f      	beq.n	801d014 <_vfiprintf_r+0x22c>
 801cf94:	4b29      	ldr	r3, [pc, #164]	; (801d03c <_vfiprintf_r+0x254>)
 801cf96:	bb1b      	cbnz	r3, 801cfe0 <_vfiprintf_r+0x1f8>
 801cf98:	9b03      	ldr	r3, [sp, #12]
 801cf9a:	3307      	adds	r3, #7
 801cf9c:	f023 0307 	bic.w	r3, r3, #7
 801cfa0:	3308      	adds	r3, #8
 801cfa2:	9303      	str	r3, [sp, #12]
 801cfa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cfa6:	443b      	add	r3, r7
 801cfa8:	9309      	str	r3, [sp, #36]	; 0x24
 801cfaa:	e767      	b.n	801ce7c <_vfiprintf_r+0x94>
 801cfac:	fb0c 3202 	mla	r2, ip, r2, r3
 801cfb0:	460c      	mov	r4, r1
 801cfb2:	2001      	movs	r0, #1
 801cfb4:	e7a5      	b.n	801cf02 <_vfiprintf_r+0x11a>
 801cfb6:	2300      	movs	r3, #0
 801cfb8:	3401      	adds	r4, #1
 801cfba:	9305      	str	r3, [sp, #20]
 801cfbc:	4619      	mov	r1, r3
 801cfbe:	f04f 0c0a 	mov.w	ip, #10
 801cfc2:	4620      	mov	r0, r4
 801cfc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cfc8:	3a30      	subs	r2, #48	; 0x30
 801cfca:	2a09      	cmp	r2, #9
 801cfcc:	d903      	bls.n	801cfd6 <_vfiprintf_r+0x1ee>
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	d0c5      	beq.n	801cf5e <_vfiprintf_r+0x176>
 801cfd2:	9105      	str	r1, [sp, #20]
 801cfd4:	e7c3      	b.n	801cf5e <_vfiprintf_r+0x176>
 801cfd6:	fb0c 2101 	mla	r1, ip, r1, r2
 801cfda:	4604      	mov	r4, r0
 801cfdc:	2301      	movs	r3, #1
 801cfde:	e7f0      	b.n	801cfc2 <_vfiprintf_r+0x1da>
 801cfe0:	ab03      	add	r3, sp, #12
 801cfe2:	9300      	str	r3, [sp, #0]
 801cfe4:	462a      	mov	r2, r5
 801cfe6:	4b16      	ldr	r3, [pc, #88]	; (801d040 <_vfiprintf_r+0x258>)
 801cfe8:	a904      	add	r1, sp, #16
 801cfea:	4630      	mov	r0, r6
 801cfec:	f3af 8000 	nop.w
 801cff0:	4607      	mov	r7, r0
 801cff2:	1c78      	adds	r0, r7, #1
 801cff4:	d1d6      	bne.n	801cfa4 <_vfiprintf_r+0x1bc>
 801cff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cff8:	07d9      	lsls	r1, r3, #31
 801cffa:	d405      	bmi.n	801d008 <_vfiprintf_r+0x220>
 801cffc:	89ab      	ldrh	r3, [r5, #12]
 801cffe:	059a      	lsls	r2, r3, #22
 801d000:	d402      	bmi.n	801d008 <_vfiprintf_r+0x220>
 801d002:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d004:	f7fc fbac 	bl	8019760 <__retarget_lock_release_recursive>
 801d008:	89ab      	ldrh	r3, [r5, #12]
 801d00a:	065b      	lsls	r3, r3, #25
 801d00c:	f53f af12 	bmi.w	801ce34 <_vfiprintf_r+0x4c>
 801d010:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d012:	e711      	b.n	801ce38 <_vfiprintf_r+0x50>
 801d014:	ab03      	add	r3, sp, #12
 801d016:	9300      	str	r3, [sp, #0]
 801d018:	462a      	mov	r2, r5
 801d01a:	4b09      	ldr	r3, [pc, #36]	; (801d040 <_vfiprintf_r+0x258>)
 801d01c:	a904      	add	r1, sp, #16
 801d01e:	4630      	mov	r0, r6
 801d020:	f000 f880 	bl	801d124 <_printf_i>
 801d024:	e7e4      	b.n	801cff0 <_vfiprintf_r+0x208>
 801d026:	bf00      	nop
 801d028:	0801f8dc 	.word	0x0801f8dc
 801d02c:	0801f8fc 	.word	0x0801f8fc
 801d030:	0801f8bc 	.word	0x0801f8bc
 801d034:	0801fb0c 	.word	0x0801fb0c
 801d038:	0801fb16 	.word	0x0801fb16
 801d03c:	00000000 	.word	0x00000000
 801d040:	0801cdc3 	.word	0x0801cdc3
 801d044:	0801fb12 	.word	0x0801fb12

0801d048 <_printf_common>:
 801d048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d04c:	4616      	mov	r6, r2
 801d04e:	4699      	mov	r9, r3
 801d050:	688a      	ldr	r2, [r1, #8]
 801d052:	690b      	ldr	r3, [r1, #16]
 801d054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d058:	4293      	cmp	r3, r2
 801d05a:	bfb8      	it	lt
 801d05c:	4613      	movlt	r3, r2
 801d05e:	6033      	str	r3, [r6, #0]
 801d060:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d064:	4607      	mov	r7, r0
 801d066:	460c      	mov	r4, r1
 801d068:	b10a      	cbz	r2, 801d06e <_printf_common+0x26>
 801d06a:	3301      	adds	r3, #1
 801d06c:	6033      	str	r3, [r6, #0]
 801d06e:	6823      	ldr	r3, [r4, #0]
 801d070:	0699      	lsls	r1, r3, #26
 801d072:	bf42      	ittt	mi
 801d074:	6833      	ldrmi	r3, [r6, #0]
 801d076:	3302      	addmi	r3, #2
 801d078:	6033      	strmi	r3, [r6, #0]
 801d07a:	6825      	ldr	r5, [r4, #0]
 801d07c:	f015 0506 	ands.w	r5, r5, #6
 801d080:	d106      	bne.n	801d090 <_printf_common+0x48>
 801d082:	f104 0a19 	add.w	sl, r4, #25
 801d086:	68e3      	ldr	r3, [r4, #12]
 801d088:	6832      	ldr	r2, [r6, #0]
 801d08a:	1a9b      	subs	r3, r3, r2
 801d08c:	42ab      	cmp	r3, r5
 801d08e:	dc26      	bgt.n	801d0de <_printf_common+0x96>
 801d090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d094:	1e13      	subs	r3, r2, #0
 801d096:	6822      	ldr	r2, [r4, #0]
 801d098:	bf18      	it	ne
 801d09a:	2301      	movne	r3, #1
 801d09c:	0692      	lsls	r2, r2, #26
 801d09e:	d42b      	bmi.n	801d0f8 <_printf_common+0xb0>
 801d0a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d0a4:	4649      	mov	r1, r9
 801d0a6:	4638      	mov	r0, r7
 801d0a8:	47c0      	blx	r8
 801d0aa:	3001      	adds	r0, #1
 801d0ac:	d01e      	beq.n	801d0ec <_printf_common+0xa4>
 801d0ae:	6823      	ldr	r3, [r4, #0]
 801d0b0:	68e5      	ldr	r5, [r4, #12]
 801d0b2:	6832      	ldr	r2, [r6, #0]
 801d0b4:	f003 0306 	and.w	r3, r3, #6
 801d0b8:	2b04      	cmp	r3, #4
 801d0ba:	bf08      	it	eq
 801d0bc:	1aad      	subeq	r5, r5, r2
 801d0be:	68a3      	ldr	r3, [r4, #8]
 801d0c0:	6922      	ldr	r2, [r4, #16]
 801d0c2:	bf0c      	ite	eq
 801d0c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d0c8:	2500      	movne	r5, #0
 801d0ca:	4293      	cmp	r3, r2
 801d0cc:	bfc4      	itt	gt
 801d0ce:	1a9b      	subgt	r3, r3, r2
 801d0d0:	18ed      	addgt	r5, r5, r3
 801d0d2:	2600      	movs	r6, #0
 801d0d4:	341a      	adds	r4, #26
 801d0d6:	42b5      	cmp	r5, r6
 801d0d8:	d11a      	bne.n	801d110 <_printf_common+0xc8>
 801d0da:	2000      	movs	r0, #0
 801d0dc:	e008      	b.n	801d0f0 <_printf_common+0xa8>
 801d0de:	2301      	movs	r3, #1
 801d0e0:	4652      	mov	r2, sl
 801d0e2:	4649      	mov	r1, r9
 801d0e4:	4638      	mov	r0, r7
 801d0e6:	47c0      	blx	r8
 801d0e8:	3001      	adds	r0, #1
 801d0ea:	d103      	bne.n	801d0f4 <_printf_common+0xac>
 801d0ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d0f4:	3501      	adds	r5, #1
 801d0f6:	e7c6      	b.n	801d086 <_printf_common+0x3e>
 801d0f8:	18e1      	adds	r1, r4, r3
 801d0fa:	1c5a      	adds	r2, r3, #1
 801d0fc:	2030      	movs	r0, #48	; 0x30
 801d0fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d102:	4422      	add	r2, r4
 801d104:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d108:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d10c:	3302      	adds	r3, #2
 801d10e:	e7c7      	b.n	801d0a0 <_printf_common+0x58>
 801d110:	2301      	movs	r3, #1
 801d112:	4622      	mov	r2, r4
 801d114:	4649      	mov	r1, r9
 801d116:	4638      	mov	r0, r7
 801d118:	47c0      	blx	r8
 801d11a:	3001      	adds	r0, #1
 801d11c:	d0e6      	beq.n	801d0ec <_printf_common+0xa4>
 801d11e:	3601      	adds	r6, #1
 801d120:	e7d9      	b.n	801d0d6 <_printf_common+0x8e>
	...

0801d124 <_printf_i>:
 801d124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d128:	460c      	mov	r4, r1
 801d12a:	4691      	mov	r9, r2
 801d12c:	7e27      	ldrb	r7, [r4, #24]
 801d12e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d130:	2f78      	cmp	r7, #120	; 0x78
 801d132:	4680      	mov	r8, r0
 801d134:	469a      	mov	sl, r3
 801d136:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d13a:	d807      	bhi.n	801d14c <_printf_i+0x28>
 801d13c:	2f62      	cmp	r7, #98	; 0x62
 801d13e:	d80a      	bhi.n	801d156 <_printf_i+0x32>
 801d140:	2f00      	cmp	r7, #0
 801d142:	f000 80d8 	beq.w	801d2f6 <_printf_i+0x1d2>
 801d146:	2f58      	cmp	r7, #88	; 0x58
 801d148:	f000 80a3 	beq.w	801d292 <_printf_i+0x16e>
 801d14c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d154:	e03a      	b.n	801d1cc <_printf_i+0xa8>
 801d156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d15a:	2b15      	cmp	r3, #21
 801d15c:	d8f6      	bhi.n	801d14c <_printf_i+0x28>
 801d15e:	a001      	add	r0, pc, #4	; (adr r0, 801d164 <_printf_i+0x40>)
 801d160:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801d164:	0801d1bd 	.word	0x0801d1bd
 801d168:	0801d1d1 	.word	0x0801d1d1
 801d16c:	0801d14d 	.word	0x0801d14d
 801d170:	0801d14d 	.word	0x0801d14d
 801d174:	0801d14d 	.word	0x0801d14d
 801d178:	0801d14d 	.word	0x0801d14d
 801d17c:	0801d1d1 	.word	0x0801d1d1
 801d180:	0801d14d 	.word	0x0801d14d
 801d184:	0801d14d 	.word	0x0801d14d
 801d188:	0801d14d 	.word	0x0801d14d
 801d18c:	0801d14d 	.word	0x0801d14d
 801d190:	0801d2dd 	.word	0x0801d2dd
 801d194:	0801d201 	.word	0x0801d201
 801d198:	0801d2bf 	.word	0x0801d2bf
 801d19c:	0801d14d 	.word	0x0801d14d
 801d1a0:	0801d14d 	.word	0x0801d14d
 801d1a4:	0801d2ff 	.word	0x0801d2ff
 801d1a8:	0801d14d 	.word	0x0801d14d
 801d1ac:	0801d201 	.word	0x0801d201
 801d1b0:	0801d14d 	.word	0x0801d14d
 801d1b4:	0801d14d 	.word	0x0801d14d
 801d1b8:	0801d2c7 	.word	0x0801d2c7
 801d1bc:	680b      	ldr	r3, [r1, #0]
 801d1be:	1d1a      	adds	r2, r3, #4
 801d1c0:	681b      	ldr	r3, [r3, #0]
 801d1c2:	600a      	str	r2, [r1, #0]
 801d1c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d1c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d1cc:	2301      	movs	r3, #1
 801d1ce:	e0a3      	b.n	801d318 <_printf_i+0x1f4>
 801d1d0:	6825      	ldr	r5, [r4, #0]
 801d1d2:	6808      	ldr	r0, [r1, #0]
 801d1d4:	062e      	lsls	r6, r5, #24
 801d1d6:	f100 0304 	add.w	r3, r0, #4
 801d1da:	d50a      	bpl.n	801d1f2 <_printf_i+0xce>
 801d1dc:	6805      	ldr	r5, [r0, #0]
 801d1de:	600b      	str	r3, [r1, #0]
 801d1e0:	2d00      	cmp	r5, #0
 801d1e2:	da03      	bge.n	801d1ec <_printf_i+0xc8>
 801d1e4:	232d      	movs	r3, #45	; 0x2d
 801d1e6:	426d      	negs	r5, r5
 801d1e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d1ec:	485e      	ldr	r0, [pc, #376]	; (801d368 <_printf_i+0x244>)
 801d1ee:	230a      	movs	r3, #10
 801d1f0:	e019      	b.n	801d226 <_printf_i+0x102>
 801d1f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 801d1f6:	6805      	ldr	r5, [r0, #0]
 801d1f8:	600b      	str	r3, [r1, #0]
 801d1fa:	bf18      	it	ne
 801d1fc:	b22d      	sxthne	r5, r5
 801d1fe:	e7ef      	b.n	801d1e0 <_printf_i+0xbc>
 801d200:	680b      	ldr	r3, [r1, #0]
 801d202:	6825      	ldr	r5, [r4, #0]
 801d204:	1d18      	adds	r0, r3, #4
 801d206:	6008      	str	r0, [r1, #0]
 801d208:	0628      	lsls	r0, r5, #24
 801d20a:	d501      	bpl.n	801d210 <_printf_i+0xec>
 801d20c:	681d      	ldr	r5, [r3, #0]
 801d20e:	e002      	b.n	801d216 <_printf_i+0xf2>
 801d210:	0669      	lsls	r1, r5, #25
 801d212:	d5fb      	bpl.n	801d20c <_printf_i+0xe8>
 801d214:	881d      	ldrh	r5, [r3, #0]
 801d216:	4854      	ldr	r0, [pc, #336]	; (801d368 <_printf_i+0x244>)
 801d218:	2f6f      	cmp	r7, #111	; 0x6f
 801d21a:	bf0c      	ite	eq
 801d21c:	2308      	moveq	r3, #8
 801d21e:	230a      	movne	r3, #10
 801d220:	2100      	movs	r1, #0
 801d222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d226:	6866      	ldr	r6, [r4, #4]
 801d228:	60a6      	str	r6, [r4, #8]
 801d22a:	2e00      	cmp	r6, #0
 801d22c:	bfa2      	ittt	ge
 801d22e:	6821      	ldrge	r1, [r4, #0]
 801d230:	f021 0104 	bicge.w	r1, r1, #4
 801d234:	6021      	strge	r1, [r4, #0]
 801d236:	b90d      	cbnz	r5, 801d23c <_printf_i+0x118>
 801d238:	2e00      	cmp	r6, #0
 801d23a:	d04d      	beq.n	801d2d8 <_printf_i+0x1b4>
 801d23c:	4616      	mov	r6, r2
 801d23e:	fbb5 f1f3 	udiv	r1, r5, r3
 801d242:	fb03 5711 	mls	r7, r3, r1, r5
 801d246:	5dc7      	ldrb	r7, [r0, r7]
 801d248:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d24c:	462f      	mov	r7, r5
 801d24e:	42bb      	cmp	r3, r7
 801d250:	460d      	mov	r5, r1
 801d252:	d9f4      	bls.n	801d23e <_printf_i+0x11a>
 801d254:	2b08      	cmp	r3, #8
 801d256:	d10b      	bne.n	801d270 <_printf_i+0x14c>
 801d258:	6823      	ldr	r3, [r4, #0]
 801d25a:	07df      	lsls	r7, r3, #31
 801d25c:	d508      	bpl.n	801d270 <_printf_i+0x14c>
 801d25e:	6923      	ldr	r3, [r4, #16]
 801d260:	6861      	ldr	r1, [r4, #4]
 801d262:	4299      	cmp	r1, r3
 801d264:	bfde      	ittt	le
 801d266:	2330      	movle	r3, #48	; 0x30
 801d268:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d26c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801d270:	1b92      	subs	r2, r2, r6
 801d272:	6122      	str	r2, [r4, #16]
 801d274:	f8cd a000 	str.w	sl, [sp]
 801d278:	464b      	mov	r3, r9
 801d27a:	aa03      	add	r2, sp, #12
 801d27c:	4621      	mov	r1, r4
 801d27e:	4640      	mov	r0, r8
 801d280:	f7ff fee2 	bl	801d048 <_printf_common>
 801d284:	3001      	adds	r0, #1
 801d286:	d14c      	bne.n	801d322 <_printf_i+0x1fe>
 801d288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d28c:	b004      	add	sp, #16
 801d28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d292:	4835      	ldr	r0, [pc, #212]	; (801d368 <_printf_i+0x244>)
 801d294:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d298:	6823      	ldr	r3, [r4, #0]
 801d29a:	680e      	ldr	r6, [r1, #0]
 801d29c:	061f      	lsls	r7, r3, #24
 801d29e:	f856 5b04 	ldr.w	r5, [r6], #4
 801d2a2:	600e      	str	r6, [r1, #0]
 801d2a4:	d514      	bpl.n	801d2d0 <_printf_i+0x1ac>
 801d2a6:	07d9      	lsls	r1, r3, #31
 801d2a8:	bf44      	itt	mi
 801d2aa:	f043 0320 	orrmi.w	r3, r3, #32
 801d2ae:	6023      	strmi	r3, [r4, #0]
 801d2b0:	b91d      	cbnz	r5, 801d2ba <_printf_i+0x196>
 801d2b2:	6823      	ldr	r3, [r4, #0]
 801d2b4:	f023 0320 	bic.w	r3, r3, #32
 801d2b8:	6023      	str	r3, [r4, #0]
 801d2ba:	2310      	movs	r3, #16
 801d2bc:	e7b0      	b.n	801d220 <_printf_i+0xfc>
 801d2be:	6823      	ldr	r3, [r4, #0]
 801d2c0:	f043 0320 	orr.w	r3, r3, #32
 801d2c4:	6023      	str	r3, [r4, #0]
 801d2c6:	2378      	movs	r3, #120	; 0x78
 801d2c8:	4828      	ldr	r0, [pc, #160]	; (801d36c <_printf_i+0x248>)
 801d2ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d2ce:	e7e3      	b.n	801d298 <_printf_i+0x174>
 801d2d0:	065e      	lsls	r6, r3, #25
 801d2d2:	bf48      	it	mi
 801d2d4:	b2ad      	uxthmi	r5, r5
 801d2d6:	e7e6      	b.n	801d2a6 <_printf_i+0x182>
 801d2d8:	4616      	mov	r6, r2
 801d2da:	e7bb      	b.n	801d254 <_printf_i+0x130>
 801d2dc:	680b      	ldr	r3, [r1, #0]
 801d2de:	6826      	ldr	r6, [r4, #0]
 801d2e0:	6960      	ldr	r0, [r4, #20]
 801d2e2:	1d1d      	adds	r5, r3, #4
 801d2e4:	600d      	str	r5, [r1, #0]
 801d2e6:	0635      	lsls	r5, r6, #24
 801d2e8:	681b      	ldr	r3, [r3, #0]
 801d2ea:	d501      	bpl.n	801d2f0 <_printf_i+0x1cc>
 801d2ec:	6018      	str	r0, [r3, #0]
 801d2ee:	e002      	b.n	801d2f6 <_printf_i+0x1d2>
 801d2f0:	0671      	lsls	r1, r6, #25
 801d2f2:	d5fb      	bpl.n	801d2ec <_printf_i+0x1c8>
 801d2f4:	8018      	strh	r0, [r3, #0]
 801d2f6:	2300      	movs	r3, #0
 801d2f8:	6123      	str	r3, [r4, #16]
 801d2fa:	4616      	mov	r6, r2
 801d2fc:	e7ba      	b.n	801d274 <_printf_i+0x150>
 801d2fe:	680b      	ldr	r3, [r1, #0]
 801d300:	1d1a      	adds	r2, r3, #4
 801d302:	600a      	str	r2, [r1, #0]
 801d304:	681e      	ldr	r6, [r3, #0]
 801d306:	6862      	ldr	r2, [r4, #4]
 801d308:	2100      	movs	r1, #0
 801d30a:	4630      	mov	r0, r6
 801d30c:	f7e2 ff78 	bl	8000200 <memchr>
 801d310:	b108      	cbz	r0, 801d316 <_printf_i+0x1f2>
 801d312:	1b80      	subs	r0, r0, r6
 801d314:	6060      	str	r0, [r4, #4]
 801d316:	6863      	ldr	r3, [r4, #4]
 801d318:	6123      	str	r3, [r4, #16]
 801d31a:	2300      	movs	r3, #0
 801d31c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d320:	e7a8      	b.n	801d274 <_printf_i+0x150>
 801d322:	6923      	ldr	r3, [r4, #16]
 801d324:	4632      	mov	r2, r6
 801d326:	4649      	mov	r1, r9
 801d328:	4640      	mov	r0, r8
 801d32a:	47d0      	blx	sl
 801d32c:	3001      	adds	r0, #1
 801d32e:	d0ab      	beq.n	801d288 <_printf_i+0x164>
 801d330:	6823      	ldr	r3, [r4, #0]
 801d332:	079b      	lsls	r3, r3, #30
 801d334:	d413      	bmi.n	801d35e <_printf_i+0x23a>
 801d336:	68e0      	ldr	r0, [r4, #12]
 801d338:	9b03      	ldr	r3, [sp, #12]
 801d33a:	4298      	cmp	r0, r3
 801d33c:	bfb8      	it	lt
 801d33e:	4618      	movlt	r0, r3
 801d340:	e7a4      	b.n	801d28c <_printf_i+0x168>
 801d342:	2301      	movs	r3, #1
 801d344:	4632      	mov	r2, r6
 801d346:	4649      	mov	r1, r9
 801d348:	4640      	mov	r0, r8
 801d34a:	47d0      	blx	sl
 801d34c:	3001      	adds	r0, #1
 801d34e:	d09b      	beq.n	801d288 <_printf_i+0x164>
 801d350:	3501      	adds	r5, #1
 801d352:	68e3      	ldr	r3, [r4, #12]
 801d354:	9903      	ldr	r1, [sp, #12]
 801d356:	1a5b      	subs	r3, r3, r1
 801d358:	42ab      	cmp	r3, r5
 801d35a:	dcf2      	bgt.n	801d342 <_printf_i+0x21e>
 801d35c:	e7eb      	b.n	801d336 <_printf_i+0x212>
 801d35e:	2500      	movs	r5, #0
 801d360:	f104 0619 	add.w	r6, r4, #25
 801d364:	e7f5      	b.n	801d352 <_printf_i+0x22e>
 801d366:	bf00      	nop
 801d368:	0801fb1d 	.word	0x0801fb1d
 801d36c:	0801fb2e 	.word	0x0801fb2e

0801d370 <_scanf_chars>:
 801d370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d374:	4615      	mov	r5, r2
 801d376:	688a      	ldr	r2, [r1, #8]
 801d378:	4680      	mov	r8, r0
 801d37a:	460c      	mov	r4, r1
 801d37c:	b932      	cbnz	r2, 801d38c <_scanf_chars+0x1c>
 801d37e:	698a      	ldr	r2, [r1, #24]
 801d380:	2a00      	cmp	r2, #0
 801d382:	bf0c      	ite	eq
 801d384:	2201      	moveq	r2, #1
 801d386:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 801d38a:	608a      	str	r2, [r1, #8]
 801d38c:	6822      	ldr	r2, [r4, #0]
 801d38e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801d41c <_scanf_chars+0xac>
 801d392:	06d1      	lsls	r1, r2, #27
 801d394:	bf5f      	itttt	pl
 801d396:	681a      	ldrpl	r2, [r3, #0]
 801d398:	1d11      	addpl	r1, r2, #4
 801d39a:	6019      	strpl	r1, [r3, #0]
 801d39c:	6816      	ldrpl	r6, [r2, #0]
 801d39e:	2700      	movs	r7, #0
 801d3a0:	69a0      	ldr	r0, [r4, #24]
 801d3a2:	b188      	cbz	r0, 801d3c8 <_scanf_chars+0x58>
 801d3a4:	2801      	cmp	r0, #1
 801d3a6:	d107      	bne.n	801d3b8 <_scanf_chars+0x48>
 801d3a8:	682b      	ldr	r3, [r5, #0]
 801d3aa:	781a      	ldrb	r2, [r3, #0]
 801d3ac:	6963      	ldr	r3, [r4, #20]
 801d3ae:	5c9b      	ldrb	r3, [r3, r2]
 801d3b0:	b953      	cbnz	r3, 801d3c8 <_scanf_chars+0x58>
 801d3b2:	bb27      	cbnz	r7, 801d3fe <_scanf_chars+0x8e>
 801d3b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d3b8:	2802      	cmp	r0, #2
 801d3ba:	d120      	bne.n	801d3fe <_scanf_chars+0x8e>
 801d3bc:	682b      	ldr	r3, [r5, #0]
 801d3be:	781b      	ldrb	r3, [r3, #0]
 801d3c0:	f813 3009 	ldrb.w	r3, [r3, r9]
 801d3c4:	071b      	lsls	r3, r3, #28
 801d3c6:	d41a      	bmi.n	801d3fe <_scanf_chars+0x8e>
 801d3c8:	6823      	ldr	r3, [r4, #0]
 801d3ca:	06da      	lsls	r2, r3, #27
 801d3cc:	bf5e      	ittt	pl
 801d3ce:	682b      	ldrpl	r3, [r5, #0]
 801d3d0:	781b      	ldrbpl	r3, [r3, #0]
 801d3d2:	f806 3b01 	strbpl.w	r3, [r6], #1
 801d3d6:	682a      	ldr	r2, [r5, #0]
 801d3d8:	686b      	ldr	r3, [r5, #4]
 801d3da:	3201      	adds	r2, #1
 801d3dc:	602a      	str	r2, [r5, #0]
 801d3de:	68a2      	ldr	r2, [r4, #8]
 801d3e0:	3b01      	subs	r3, #1
 801d3e2:	3a01      	subs	r2, #1
 801d3e4:	606b      	str	r3, [r5, #4]
 801d3e6:	3701      	adds	r7, #1
 801d3e8:	60a2      	str	r2, [r4, #8]
 801d3ea:	b142      	cbz	r2, 801d3fe <_scanf_chars+0x8e>
 801d3ec:	2b00      	cmp	r3, #0
 801d3ee:	dcd7      	bgt.n	801d3a0 <_scanf_chars+0x30>
 801d3f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801d3f4:	4629      	mov	r1, r5
 801d3f6:	4640      	mov	r0, r8
 801d3f8:	4798      	blx	r3
 801d3fa:	2800      	cmp	r0, #0
 801d3fc:	d0d0      	beq.n	801d3a0 <_scanf_chars+0x30>
 801d3fe:	6823      	ldr	r3, [r4, #0]
 801d400:	f013 0310 	ands.w	r3, r3, #16
 801d404:	d105      	bne.n	801d412 <_scanf_chars+0xa2>
 801d406:	68e2      	ldr	r2, [r4, #12]
 801d408:	3201      	adds	r2, #1
 801d40a:	60e2      	str	r2, [r4, #12]
 801d40c:	69a2      	ldr	r2, [r4, #24]
 801d40e:	b102      	cbz	r2, 801d412 <_scanf_chars+0xa2>
 801d410:	7033      	strb	r3, [r6, #0]
 801d412:	6923      	ldr	r3, [r4, #16]
 801d414:	441f      	add	r7, r3
 801d416:	6127      	str	r7, [r4, #16]
 801d418:	2000      	movs	r0, #0
 801d41a:	e7cb      	b.n	801d3b4 <_scanf_chars+0x44>
 801d41c:	0801f6a1 	.word	0x0801f6a1

0801d420 <_scanf_i>:
 801d420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d424:	4698      	mov	r8, r3
 801d426:	4b74      	ldr	r3, [pc, #464]	; (801d5f8 <_scanf_i+0x1d8>)
 801d428:	460c      	mov	r4, r1
 801d42a:	4682      	mov	sl, r0
 801d42c:	4616      	mov	r6, r2
 801d42e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d432:	b087      	sub	sp, #28
 801d434:	ab03      	add	r3, sp, #12
 801d436:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801d43a:	4b70      	ldr	r3, [pc, #448]	; (801d5fc <_scanf_i+0x1dc>)
 801d43c:	69a1      	ldr	r1, [r4, #24]
 801d43e:	4a70      	ldr	r2, [pc, #448]	; (801d600 <_scanf_i+0x1e0>)
 801d440:	2903      	cmp	r1, #3
 801d442:	bf18      	it	ne
 801d444:	461a      	movne	r2, r3
 801d446:	68a3      	ldr	r3, [r4, #8]
 801d448:	9201      	str	r2, [sp, #4]
 801d44a:	1e5a      	subs	r2, r3, #1
 801d44c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801d450:	bf88      	it	hi
 801d452:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801d456:	4627      	mov	r7, r4
 801d458:	bf82      	ittt	hi
 801d45a:	eb03 0905 	addhi.w	r9, r3, r5
 801d45e:	f240 135d 	movwhi	r3, #349	; 0x15d
 801d462:	60a3      	strhi	r3, [r4, #8]
 801d464:	f857 3b1c 	ldr.w	r3, [r7], #28
 801d468:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801d46c:	bf98      	it	ls
 801d46e:	f04f 0900 	movls.w	r9, #0
 801d472:	6023      	str	r3, [r4, #0]
 801d474:	463d      	mov	r5, r7
 801d476:	f04f 0b00 	mov.w	fp, #0
 801d47a:	6831      	ldr	r1, [r6, #0]
 801d47c:	ab03      	add	r3, sp, #12
 801d47e:	7809      	ldrb	r1, [r1, #0]
 801d480:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801d484:	2202      	movs	r2, #2
 801d486:	f7e2 febb 	bl	8000200 <memchr>
 801d48a:	b328      	cbz	r0, 801d4d8 <_scanf_i+0xb8>
 801d48c:	f1bb 0f01 	cmp.w	fp, #1
 801d490:	d159      	bne.n	801d546 <_scanf_i+0x126>
 801d492:	6862      	ldr	r2, [r4, #4]
 801d494:	b92a      	cbnz	r2, 801d4a2 <_scanf_i+0x82>
 801d496:	6822      	ldr	r2, [r4, #0]
 801d498:	2308      	movs	r3, #8
 801d49a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d49e:	6063      	str	r3, [r4, #4]
 801d4a0:	6022      	str	r2, [r4, #0]
 801d4a2:	6822      	ldr	r2, [r4, #0]
 801d4a4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801d4a8:	6022      	str	r2, [r4, #0]
 801d4aa:	68a2      	ldr	r2, [r4, #8]
 801d4ac:	1e51      	subs	r1, r2, #1
 801d4ae:	60a1      	str	r1, [r4, #8]
 801d4b0:	b192      	cbz	r2, 801d4d8 <_scanf_i+0xb8>
 801d4b2:	6832      	ldr	r2, [r6, #0]
 801d4b4:	1c51      	adds	r1, r2, #1
 801d4b6:	6031      	str	r1, [r6, #0]
 801d4b8:	7812      	ldrb	r2, [r2, #0]
 801d4ba:	f805 2b01 	strb.w	r2, [r5], #1
 801d4be:	6872      	ldr	r2, [r6, #4]
 801d4c0:	3a01      	subs	r2, #1
 801d4c2:	2a00      	cmp	r2, #0
 801d4c4:	6072      	str	r2, [r6, #4]
 801d4c6:	dc07      	bgt.n	801d4d8 <_scanf_i+0xb8>
 801d4c8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801d4cc:	4631      	mov	r1, r6
 801d4ce:	4650      	mov	r0, sl
 801d4d0:	4790      	blx	r2
 801d4d2:	2800      	cmp	r0, #0
 801d4d4:	f040 8085 	bne.w	801d5e2 <_scanf_i+0x1c2>
 801d4d8:	f10b 0b01 	add.w	fp, fp, #1
 801d4dc:	f1bb 0f03 	cmp.w	fp, #3
 801d4e0:	d1cb      	bne.n	801d47a <_scanf_i+0x5a>
 801d4e2:	6863      	ldr	r3, [r4, #4]
 801d4e4:	b90b      	cbnz	r3, 801d4ea <_scanf_i+0xca>
 801d4e6:	230a      	movs	r3, #10
 801d4e8:	6063      	str	r3, [r4, #4]
 801d4ea:	6863      	ldr	r3, [r4, #4]
 801d4ec:	4945      	ldr	r1, [pc, #276]	; (801d604 <_scanf_i+0x1e4>)
 801d4ee:	6960      	ldr	r0, [r4, #20]
 801d4f0:	1ac9      	subs	r1, r1, r3
 801d4f2:	f000 f8a5 	bl	801d640 <__sccl>
 801d4f6:	f04f 0b00 	mov.w	fp, #0
 801d4fa:	68a3      	ldr	r3, [r4, #8]
 801d4fc:	6822      	ldr	r2, [r4, #0]
 801d4fe:	2b00      	cmp	r3, #0
 801d500:	d03d      	beq.n	801d57e <_scanf_i+0x15e>
 801d502:	6831      	ldr	r1, [r6, #0]
 801d504:	6960      	ldr	r0, [r4, #20]
 801d506:	f891 c000 	ldrb.w	ip, [r1]
 801d50a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801d50e:	2800      	cmp	r0, #0
 801d510:	d035      	beq.n	801d57e <_scanf_i+0x15e>
 801d512:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801d516:	d124      	bne.n	801d562 <_scanf_i+0x142>
 801d518:	0510      	lsls	r0, r2, #20
 801d51a:	d522      	bpl.n	801d562 <_scanf_i+0x142>
 801d51c:	f10b 0b01 	add.w	fp, fp, #1
 801d520:	f1b9 0f00 	cmp.w	r9, #0
 801d524:	d003      	beq.n	801d52e <_scanf_i+0x10e>
 801d526:	3301      	adds	r3, #1
 801d528:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801d52c:	60a3      	str	r3, [r4, #8]
 801d52e:	6873      	ldr	r3, [r6, #4]
 801d530:	3b01      	subs	r3, #1
 801d532:	2b00      	cmp	r3, #0
 801d534:	6073      	str	r3, [r6, #4]
 801d536:	dd1b      	ble.n	801d570 <_scanf_i+0x150>
 801d538:	6833      	ldr	r3, [r6, #0]
 801d53a:	3301      	adds	r3, #1
 801d53c:	6033      	str	r3, [r6, #0]
 801d53e:	68a3      	ldr	r3, [r4, #8]
 801d540:	3b01      	subs	r3, #1
 801d542:	60a3      	str	r3, [r4, #8]
 801d544:	e7d9      	b.n	801d4fa <_scanf_i+0xda>
 801d546:	f1bb 0f02 	cmp.w	fp, #2
 801d54a:	d1ae      	bne.n	801d4aa <_scanf_i+0x8a>
 801d54c:	6822      	ldr	r2, [r4, #0]
 801d54e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801d552:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801d556:	d1bf      	bne.n	801d4d8 <_scanf_i+0xb8>
 801d558:	2310      	movs	r3, #16
 801d55a:	6063      	str	r3, [r4, #4]
 801d55c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d560:	e7a2      	b.n	801d4a8 <_scanf_i+0x88>
 801d562:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801d566:	6022      	str	r2, [r4, #0]
 801d568:	780b      	ldrb	r3, [r1, #0]
 801d56a:	f805 3b01 	strb.w	r3, [r5], #1
 801d56e:	e7de      	b.n	801d52e <_scanf_i+0x10e>
 801d570:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801d574:	4631      	mov	r1, r6
 801d576:	4650      	mov	r0, sl
 801d578:	4798      	blx	r3
 801d57a:	2800      	cmp	r0, #0
 801d57c:	d0df      	beq.n	801d53e <_scanf_i+0x11e>
 801d57e:	6823      	ldr	r3, [r4, #0]
 801d580:	05d9      	lsls	r1, r3, #23
 801d582:	d50d      	bpl.n	801d5a0 <_scanf_i+0x180>
 801d584:	42bd      	cmp	r5, r7
 801d586:	d909      	bls.n	801d59c <_scanf_i+0x17c>
 801d588:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801d58c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d590:	4632      	mov	r2, r6
 801d592:	4650      	mov	r0, sl
 801d594:	4798      	blx	r3
 801d596:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 801d59a:	464d      	mov	r5, r9
 801d59c:	42bd      	cmp	r5, r7
 801d59e:	d028      	beq.n	801d5f2 <_scanf_i+0x1d2>
 801d5a0:	6822      	ldr	r2, [r4, #0]
 801d5a2:	f012 0210 	ands.w	r2, r2, #16
 801d5a6:	d113      	bne.n	801d5d0 <_scanf_i+0x1b0>
 801d5a8:	702a      	strb	r2, [r5, #0]
 801d5aa:	6863      	ldr	r3, [r4, #4]
 801d5ac:	9e01      	ldr	r6, [sp, #4]
 801d5ae:	4639      	mov	r1, r7
 801d5b0:	4650      	mov	r0, sl
 801d5b2:	47b0      	blx	r6
 801d5b4:	f8d8 3000 	ldr.w	r3, [r8]
 801d5b8:	6821      	ldr	r1, [r4, #0]
 801d5ba:	1d1a      	adds	r2, r3, #4
 801d5bc:	f8c8 2000 	str.w	r2, [r8]
 801d5c0:	f011 0f20 	tst.w	r1, #32
 801d5c4:	681b      	ldr	r3, [r3, #0]
 801d5c6:	d00f      	beq.n	801d5e8 <_scanf_i+0x1c8>
 801d5c8:	6018      	str	r0, [r3, #0]
 801d5ca:	68e3      	ldr	r3, [r4, #12]
 801d5cc:	3301      	adds	r3, #1
 801d5ce:	60e3      	str	r3, [r4, #12]
 801d5d0:	1bed      	subs	r5, r5, r7
 801d5d2:	44ab      	add	fp, r5
 801d5d4:	6925      	ldr	r5, [r4, #16]
 801d5d6:	445d      	add	r5, fp
 801d5d8:	6125      	str	r5, [r4, #16]
 801d5da:	2000      	movs	r0, #0
 801d5dc:	b007      	add	sp, #28
 801d5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5e2:	f04f 0b00 	mov.w	fp, #0
 801d5e6:	e7ca      	b.n	801d57e <_scanf_i+0x15e>
 801d5e8:	07ca      	lsls	r2, r1, #31
 801d5ea:	bf4c      	ite	mi
 801d5ec:	8018      	strhmi	r0, [r3, #0]
 801d5ee:	6018      	strpl	r0, [r3, #0]
 801d5f0:	e7eb      	b.n	801d5ca <_scanf_i+0x1aa>
 801d5f2:	2001      	movs	r0, #1
 801d5f4:	e7f2      	b.n	801d5dc <_scanf_i+0x1bc>
 801d5f6:	bf00      	nop
 801d5f8:	0801eb2c 	.word	0x0801eb2c
 801d5fc:	0801af3d 	.word	0x0801af3d
 801d600:	0801ae41 	.word	0x0801ae41
 801d604:	0801fb58 	.word	0x0801fb58

0801d608 <_read_r>:
 801d608:	b538      	push	{r3, r4, r5, lr}
 801d60a:	4d07      	ldr	r5, [pc, #28]	; (801d628 <_read_r+0x20>)
 801d60c:	4604      	mov	r4, r0
 801d60e:	4608      	mov	r0, r1
 801d610:	4611      	mov	r1, r2
 801d612:	2200      	movs	r2, #0
 801d614:	602a      	str	r2, [r5, #0]
 801d616:	461a      	mov	r2, r3
 801d618:	f7e6 fa40 	bl	8003a9c <_read>
 801d61c:	1c43      	adds	r3, r0, #1
 801d61e:	d102      	bne.n	801d626 <_read_r+0x1e>
 801d620:	682b      	ldr	r3, [r5, #0]
 801d622:	b103      	cbz	r3, 801d626 <_read_r+0x1e>
 801d624:	6023      	str	r3, [r4, #0]
 801d626:	bd38      	pop	{r3, r4, r5, pc}
 801d628:	2001604c 	.word	0x2001604c
 801d62c:	00000000 	.word	0x00000000

0801d630 <nan>:
 801d630:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d638 <nan+0x8>
 801d634:	4770      	bx	lr
 801d636:	bf00      	nop
 801d638:	00000000 	.word	0x00000000
 801d63c:	7ff80000 	.word	0x7ff80000

0801d640 <__sccl>:
 801d640:	b570      	push	{r4, r5, r6, lr}
 801d642:	780b      	ldrb	r3, [r1, #0]
 801d644:	4604      	mov	r4, r0
 801d646:	2b5e      	cmp	r3, #94	; 0x5e
 801d648:	bf0b      	itete	eq
 801d64a:	784b      	ldrbeq	r3, [r1, #1]
 801d64c:	1c48      	addne	r0, r1, #1
 801d64e:	1c88      	addeq	r0, r1, #2
 801d650:	2200      	movne	r2, #0
 801d652:	bf08      	it	eq
 801d654:	2201      	moveq	r2, #1
 801d656:	1e61      	subs	r1, r4, #1
 801d658:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801d65c:	f801 2f01 	strb.w	r2, [r1, #1]!
 801d660:	42a9      	cmp	r1, r5
 801d662:	d1fb      	bne.n	801d65c <__sccl+0x1c>
 801d664:	b90b      	cbnz	r3, 801d66a <__sccl+0x2a>
 801d666:	3801      	subs	r0, #1
 801d668:	bd70      	pop	{r4, r5, r6, pc}
 801d66a:	f082 0101 	eor.w	r1, r2, #1
 801d66e:	54e1      	strb	r1, [r4, r3]
 801d670:	1c42      	adds	r2, r0, #1
 801d672:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801d676:	2d2d      	cmp	r5, #45	; 0x2d
 801d678:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 801d67c:	4610      	mov	r0, r2
 801d67e:	d006      	beq.n	801d68e <__sccl+0x4e>
 801d680:	2d5d      	cmp	r5, #93	; 0x5d
 801d682:	d0f1      	beq.n	801d668 <__sccl+0x28>
 801d684:	b90d      	cbnz	r5, 801d68a <__sccl+0x4a>
 801d686:	4630      	mov	r0, r6
 801d688:	e7ee      	b.n	801d668 <__sccl+0x28>
 801d68a:	462b      	mov	r3, r5
 801d68c:	e7ef      	b.n	801d66e <__sccl+0x2e>
 801d68e:	7816      	ldrb	r6, [r2, #0]
 801d690:	2e5d      	cmp	r6, #93	; 0x5d
 801d692:	d0fa      	beq.n	801d68a <__sccl+0x4a>
 801d694:	42b3      	cmp	r3, r6
 801d696:	dcf8      	bgt.n	801d68a <__sccl+0x4a>
 801d698:	4618      	mov	r0, r3
 801d69a:	3001      	adds	r0, #1
 801d69c:	4286      	cmp	r6, r0
 801d69e:	5421      	strb	r1, [r4, r0]
 801d6a0:	dcfb      	bgt.n	801d69a <__sccl+0x5a>
 801d6a2:	43d8      	mvns	r0, r3
 801d6a4:	4430      	add	r0, r6
 801d6a6:	1c5d      	adds	r5, r3, #1
 801d6a8:	42b3      	cmp	r3, r6
 801d6aa:	bfa8      	it	ge
 801d6ac:	2000      	movge	r0, #0
 801d6ae:	182b      	adds	r3, r5, r0
 801d6b0:	3202      	adds	r2, #2
 801d6b2:	e7de      	b.n	801d672 <__sccl+0x32>

0801d6b4 <__submore>:
 801d6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d6b8:	460c      	mov	r4, r1
 801d6ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801d6bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d6c0:	4299      	cmp	r1, r3
 801d6c2:	d11d      	bne.n	801d700 <__submore+0x4c>
 801d6c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801d6c8:	f7fc f8ec 	bl	80198a4 <_malloc_r>
 801d6cc:	b918      	cbnz	r0, 801d6d6 <__submore+0x22>
 801d6ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d6da:	63a3      	str	r3, [r4, #56]	; 0x38
 801d6dc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801d6e0:	6360      	str	r0, [r4, #52]	; 0x34
 801d6e2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801d6e6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801d6ea:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801d6ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801d6f2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801d6f6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801d6fa:	6020      	str	r0, [r4, #0]
 801d6fc:	2000      	movs	r0, #0
 801d6fe:	e7e8      	b.n	801d6d2 <__submore+0x1e>
 801d700:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801d702:	0077      	lsls	r7, r6, #1
 801d704:	463a      	mov	r2, r7
 801d706:	f7fe fff2 	bl	801c6ee <_realloc_r>
 801d70a:	4605      	mov	r5, r0
 801d70c:	2800      	cmp	r0, #0
 801d70e:	d0de      	beq.n	801d6ce <__submore+0x1a>
 801d710:	eb00 0806 	add.w	r8, r0, r6
 801d714:	4601      	mov	r1, r0
 801d716:	4632      	mov	r2, r6
 801d718:	4640      	mov	r0, r8
 801d71a:	f7fc f833 	bl	8019784 <memcpy>
 801d71e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801d722:	f8c4 8000 	str.w	r8, [r4]
 801d726:	e7e9      	b.n	801d6fc <__submore+0x48>

0801d728 <__ascii_wctomb>:
 801d728:	b149      	cbz	r1, 801d73e <__ascii_wctomb+0x16>
 801d72a:	2aff      	cmp	r2, #255	; 0xff
 801d72c:	bf85      	ittet	hi
 801d72e:	238a      	movhi	r3, #138	; 0x8a
 801d730:	6003      	strhi	r3, [r0, #0]
 801d732:	700a      	strbls	r2, [r1, #0]
 801d734:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801d738:	bf98      	it	ls
 801d73a:	2001      	movls	r0, #1
 801d73c:	4770      	bx	lr
 801d73e:	4608      	mov	r0, r1
 801d740:	4770      	bx	lr

0801d742 <abort>:
 801d742:	b508      	push	{r3, lr}
 801d744:	2006      	movs	r0, #6
 801d746:	f000 f855 	bl	801d7f4 <raise>
 801d74a:	2001      	movs	r0, #1
 801d74c:	f7e6 f99c 	bl	8003a88 <_exit>

0801d750 <_fstat_r>:
 801d750:	b538      	push	{r3, r4, r5, lr}
 801d752:	4d07      	ldr	r5, [pc, #28]	; (801d770 <_fstat_r+0x20>)
 801d754:	2300      	movs	r3, #0
 801d756:	4604      	mov	r4, r0
 801d758:	4608      	mov	r0, r1
 801d75a:	4611      	mov	r1, r2
 801d75c:	602b      	str	r3, [r5, #0]
 801d75e:	f7e6 f9e2 	bl	8003b26 <_fstat>
 801d762:	1c43      	adds	r3, r0, #1
 801d764:	d102      	bne.n	801d76c <_fstat_r+0x1c>
 801d766:	682b      	ldr	r3, [r5, #0]
 801d768:	b103      	cbz	r3, 801d76c <_fstat_r+0x1c>
 801d76a:	6023      	str	r3, [r4, #0]
 801d76c:	bd38      	pop	{r3, r4, r5, pc}
 801d76e:	bf00      	nop
 801d770:	2001604c 	.word	0x2001604c

0801d774 <_isatty_r>:
 801d774:	b538      	push	{r3, r4, r5, lr}
 801d776:	4d06      	ldr	r5, [pc, #24]	; (801d790 <_isatty_r+0x1c>)
 801d778:	2300      	movs	r3, #0
 801d77a:	4604      	mov	r4, r0
 801d77c:	4608      	mov	r0, r1
 801d77e:	602b      	str	r3, [r5, #0]
 801d780:	f7e6 f9e1 	bl	8003b46 <_isatty>
 801d784:	1c43      	adds	r3, r0, #1
 801d786:	d102      	bne.n	801d78e <_isatty_r+0x1a>
 801d788:	682b      	ldr	r3, [r5, #0]
 801d78a:	b103      	cbz	r3, 801d78e <_isatty_r+0x1a>
 801d78c:	6023      	str	r3, [r4, #0]
 801d78e:	bd38      	pop	{r3, r4, r5, pc}
 801d790:	2001604c 	.word	0x2001604c

0801d794 <_malloc_usable_size_r>:
 801d794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d798:	1f18      	subs	r0, r3, #4
 801d79a:	2b00      	cmp	r3, #0
 801d79c:	bfbc      	itt	lt
 801d79e:	580b      	ldrlt	r3, [r1, r0]
 801d7a0:	18c0      	addlt	r0, r0, r3
 801d7a2:	4770      	bx	lr

0801d7a4 <_raise_r>:
 801d7a4:	291f      	cmp	r1, #31
 801d7a6:	b538      	push	{r3, r4, r5, lr}
 801d7a8:	4604      	mov	r4, r0
 801d7aa:	460d      	mov	r5, r1
 801d7ac:	d904      	bls.n	801d7b8 <_raise_r+0x14>
 801d7ae:	2316      	movs	r3, #22
 801d7b0:	6003      	str	r3, [r0, #0]
 801d7b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d7b6:	bd38      	pop	{r3, r4, r5, pc}
 801d7b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d7ba:	b112      	cbz	r2, 801d7c2 <_raise_r+0x1e>
 801d7bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d7c0:	b94b      	cbnz	r3, 801d7d6 <_raise_r+0x32>
 801d7c2:	4620      	mov	r0, r4
 801d7c4:	f000 f830 	bl	801d828 <_getpid_r>
 801d7c8:	462a      	mov	r2, r5
 801d7ca:	4601      	mov	r1, r0
 801d7cc:	4620      	mov	r0, r4
 801d7ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d7d2:	f000 b817 	b.w	801d804 <_kill_r>
 801d7d6:	2b01      	cmp	r3, #1
 801d7d8:	d00a      	beq.n	801d7f0 <_raise_r+0x4c>
 801d7da:	1c59      	adds	r1, r3, #1
 801d7dc:	d103      	bne.n	801d7e6 <_raise_r+0x42>
 801d7de:	2316      	movs	r3, #22
 801d7e0:	6003      	str	r3, [r0, #0]
 801d7e2:	2001      	movs	r0, #1
 801d7e4:	e7e7      	b.n	801d7b6 <_raise_r+0x12>
 801d7e6:	2400      	movs	r4, #0
 801d7e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d7ec:	4628      	mov	r0, r5
 801d7ee:	4798      	blx	r3
 801d7f0:	2000      	movs	r0, #0
 801d7f2:	e7e0      	b.n	801d7b6 <_raise_r+0x12>

0801d7f4 <raise>:
 801d7f4:	4b02      	ldr	r3, [pc, #8]	; (801d800 <raise+0xc>)
 801d7f6:	4601      	mov	r1, r0
 801d7f8:	6818      	ldr	r0, [r3, #0]
 801d7fa:	f7ff bfd3 	b.w	801d7a4 <_raise_r>
 801d7fe:	bf00      	nop
 801d800:	20000190 	.word	0x20000190

0801d804 <_kill_r>:
 801d804:	b538      	push	{r3, r4, r5, lr}
 801d806:	4d07      	ldr	r5, [pc, #28]	; (801d824 <_kill_r+0x20>)
 801d808:	2300      	movs	r3, #0
 801d80a:	4604      	mov	r4, r0
 801d80c:	4608      	mov	r0, r1
 801d80e:	4611      	mov	r1, r2
 801d810:	602b      	str	r3, [r5, #0]
 801d812:	f7e6 f929 	bl	8003a68 <_kill>
 801d816:	1c43      	adds	r3, r0, #1
 801d818:	d102      	bne.n	801d820 <_kill_r+0x1c>
 801d81a:	682b      	ldr	r3, [r5, #0]
 801d81c:	b103      	cbz	r3, 801d820 <_kill_r+0x1c>
 801d81e:	6023      	str	r3, [r4, #0]
 801d820:	bd38      	pop	{r3, r4, r5, pc}
 801d822:	bf00      	nop
 801d824:	2001604c 	.word	0x2001604c

0801d828 <_getpid_r>:
 801d828:	f7e6 b916 	b.w	8003a58 <_getpid>

0801d82c <fmod>:
 801d82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d82e:	ed2d 8b02 	vpush	{d8}
 801d832:	ec57 6b10 	vmov	r6, r7, d0
 801d836:	ec55 4b11 	vmov	r4, r5, d1
 801d83a:	f000 f867 	bl	801d90c <__ieee754_fmod>
 801d83e:	4b18      	ldr	r3, [pc, #96]	; (801d8a0 <fmod+0x74>)
 801d840:	eeb0 8a40 	vmov.f32	s16, s0
 801d844:	eef0 8a60 	vmov.f32	s17, s1
 801d848:	f993 3000 	ldrsb.w	r3, [r3]
 801d84c:	3301      	adds	r3, #1
 801d84e:	d020      	beq.n	801d892 <fmod+0x66>
 801d850:	4622      	mov	r2, r4
 801d852:	462b      	mov	r3, r5
 801d854:	4620      	mov	r0, r4
 801d856:	4629      	mov	r1, r5
 801d858:	f7e3 f978 	bl	8000b4c <__aeabi_dcmpun>
 801d85c:	b9c8      	cbnz	r0, 801d892 <fmod+0x66>
 801d85e:	4632      	mov	r2, r6
 801d860:	463b      	mov	r3, r7
 801d862:	4630      	mov	r0, r6
 801d864:	4639      	mov	r1, r7
 801d866:	f7e3 f971 	bl	8000b4c <__aeabi_dcmpun>
 801d86a:	b990      	cbnz	r0, 801d892 <fmod+0x66>
 801d86c:	2200      	movs	r2, #0
 801d86e:	2300      	movs	r3, #0
 801d870:	4620      	mov	r0, r4
 801d872:	4629      	mov	r1, r5
 801d874:	f7e3 f938 	bl	8000ae8 <__aeabi_dcmpeq>
 801d878:	b158      	cbz	r0, 801d892 <fmod+0x66>
 801d87a:	f7fb fe91 	bl	80195a0 <__errno>
 801d87e:	2321      	movs	r3, #33	; 0x21
 801d880:	6003      	str	r3, [r0, #0]
 801d882:	2200      	movs	r2, #0
 801d884:	2300      	movs	r3, #0
 801d886:	4610      	mov	r0, r2
 801d888:	4619      	mov	r1, r3
 801d88a:	f7e2 ffef 	bl	800086c <__aeabi_ddiv>
 801d88e:	ec41 0b18 	vmov	d8, r0, r1
 801d892:	eeb0 0a48 	vmov.f32	s0, s16
 801d896:	eef0 0a68 	vmov.f32	s1, s17
 801d89a:	ecbd 8b02 	vpop	{d8}
 801d89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d8a0:	20000364 	.word	0x20000364

0801d8a4 <sqrt>:
 801d8a4:	b538      	push	{r3, r4, r5, lr}
 801d8a6:	ed2d 8b02 	vpush	{d8}
 801d8aa:	ec55 4b10 	vmov	r4, r5, d0
 801d8ae:	f000 f93f 	bl	801db30 <__ieee754_sqrt>
 801d8b2:	4b15      	ldr	r3, [pc, #84]	; (801d908 <sqrt+0x64>)
 801d8b4:	eeb0 8a40 	vmov.f32	s16, s0
 801d8b8:	eef0 8a60 	vmov.f32	s17, s1
 801d8bc:	f993 3000 	ldrsb.w	r3, [r3]
 801d8c0:	3301      	adds	r3, #1
 801d8c2:	d019      	beq.n	801d8f8 <sqrt+0x54>
 801d8c4:	4622      	mov	r2, r4
 801d8c6:	462b      	mov	r3, r5
 801d8c8:	4620      	mov	r0, r4
 801d8ca:	4629      	mov	r1, r5
 801d8cc:	f7e3 f93e 	bl	8000b4c <__aeabi_dcmpun>
 801d8d0:	b990      	cbnz	r0, 801d8f8 <sqrt+0x54>
 801d8d2:	2200      	movs	r2, #0
 801d8d4:	2300      	movs	r3, #0
 801d8d6:	4620      	mov	r0, r4
 801d8d8:	4629      	mov	r1, r5
 801d8da:	f7e3 f90f 	bl	8000afc <__aeabi_dcmplt>
 801d8de:	b158      	cbz	r0, 801d8f8 <sqrt+0x54>
 801d8e0:	f7fb fe5e 	bl	80195a0 <__errno>
 801d8e4:	2321      	movs	r3, #33	; 0x21
 801d8e6:	6003      	str	r3, [r0, #0]
 801d8e8:	2200      	movs	r2, #0
 801d8ea:	2300      	movs	r3, #0
 801d8ec:	4610      	mov	r0, r2
 801d8ee:	4619      	mov	r1, r3
 801d8f0:	f7e2 ffbc 	bl	800086c <__aeabi_ddiv>
 801d8f4:	ec41 0b18 	vmov	d8, r0, r1
 801d8f8:	eeb0 0a48 	vmov.f32	s0, s16
 801d8fc:	eef0 0a68 	vmov.f32	s1, s17
 801d900:	ecbd 8b02 	vpop	{d8}
 801d904:	bd38      	pop	{r3, r4, r5, pc}
 801d906:	bf00      	nop
 801d908:	20000364 	.word	0x20000364

0801d90c <__ieee754_fmod>:
 801d90c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d910:	ec53 2b11 	vmov	r2, r3, d1
 801d914:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 801d918:	ea5e 0402 	orrs.w	r4, lr, r2
 801d91c:	ec51 0b10 	vmov	r0, r1, d0
 801d920:	ee11 7a10 	vmov	r7, s2
 801d924:	ee11 ca10 	vmov	ip, s2
 801d928:	461e      	mov	r6, r3
 801d92a:	d00d      	beq.n	801d948 <__ieee754_fmod+0x3c>
 801d92c:	4c7a      	ldr	r4, [pc, #488]	; (801db18 <__ieee754_fmod+0x20c>)
 801d92e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801d932:	45a0      	cmp	r8, r4
 801d934:	4689      	mov	r9, r1
 801d936:	dc07      	bgt.n	801d948 <__ieee754_fmod+0x3c>
 801d938:	4254      	negs	r4, r2
 801d93a:	4d78      	ldr	r5, [pc, #480]	; (801db1c <__ieee754_fmod+0x210>)
 801d93c:	4314      	orrs	r4, r2
 801d93e:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 801d942:	42ac      	cmp	r4, r5
 801d944:	46ab      	mov	fp, r5
 801d946:	d909      	bls.n	801d95c <__ieee754_fmod+0x50>
 801d948:	f7e2 fe66 	bl	8000618 <__aeabi_dmul>
 801d94c:	4602      	mov	r2, r0
 801d94e:	460b      	mov	r3, r1
 801d950:	f7e2 ff8c 	bl	800086c <__aeabi_ddiv>
 801d954:	ec41 0b10 	vmov	d0, r0, r1
 801d958:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d95c:	45f0      	cmp	r8, lr
 801d95e:	ee10 aa10 	vmov	sl, s0
 801d962:	ee10 4a10 	vmov	r4, s0
 801d966:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801d96a:	dc0a      	bgt.n	801d982 <__ieee754_fmod+0x76>
 801d96c:	dbf2      	blt.n	801d954 <__ieee754_fmod+0x48>
 801d96e:	4290      	cmp	r0, r2
 801d970:	d3f0      	bcc.n	801d954 <__ieee754_fmod+0x48>
 801d972:	d106      	bne.n	801d982 <__ieee754_fmod+0x76>
 801d974:	4a6a      	ldr	r2, [pc, #424]	; (801db20 <__ieee754_fmod+0x214>)
 801d976:	0fed      	lsrs	r5, r5, #31
 801d978:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801d97c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801d980:	e7e8      	b.n	801d954 <__ieee754_fmod+0x48>
 801d982:	ea19 0f0b 	tst.w	r9, fp
 801d986:	d14a      	bne.n	801da1e <__ieee754_fmod+0x112>
 801d988:	f1b8 0f00 	cmp.w	r8, #0
 801d98c:	d13f      	bne.n	801da0e <__ieee754_fmod+0x102>
 801d98e:	4965      	ldr	r1, [pc, #404]	; (801db24 <__ieee754_fmod+0x218>)
 801d990:	4653      	mov	r3, sl
 801d992:	2b00      	cmp	r3, #0
 801d994:	dc38      	bgt.n	801da08 <__ieee754_fmod+0xfc>
 801d996:	4b61      	ldr	r3, [pc, #388]	; (801db1c <__ieee754_fmod+0x210>)
 801d998:	4033      	ands	r3, r6
 801d99a:	2b00      	cmp	r3, #0
 801d99c:	d14f      	bne.n	801da3e <__ieee754_fmod+0x132>
 801d99e:	f1be 0f00 	cmp.w	lr, #0
 801d9a2:	d144      	bne.n	801da2e <__ieee754_fmod+0x122>
 801d9a4:	4a5f      	ldr	r2, [pc, #380]	; (801db24 <__ieee754_fmod+0x218>)
 801d9a6:	463b      	mov	r3, r7
 801d9a8:	2b00      	cmp	r3, #0
 801d9aa:	dc3d      	bgt.n	801da28 <__ieee754_fmod+0x11c>
 801d9ac:	4b5e      	ldr	r3, [pc, #376]	; (801db28 <__ieee754_fmod+0x21c>)
 801d9ae:	4299      	cmp	r1, r3
 801d9b0:	db4a      	blt.n	801da48 <__ieee754_fmod+0x13c>
 801d9b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d9b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d9ba:	485b      	ldr	r0, [pc, #364]	; (801db28 <__ieee754_fmod+0x21c>)
 801d9bc:	4282      	cmp	r2, r0
 801d9be:	db57      	blt.n	801da70 <__ieee754_fmod+0x164>
 801d9c0:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801d9c4:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801d9c8:	1a89      	subs	r1, r1, r2
 801d9ca:	1b98      	subs	r0, r3, r6
 801d9cc:	eba4 070c 	sub.w	r7, r4, ip
 801d9d0:	2900      	cmp	r1, #0
 801d9d2:	d164      	bne.n	801da9e <__ieee754_fmod+0x192>
 801d9d4:	4564      	cmp	r4, ip
 801d9d6:	bf38      	it	cc
 801d9d8:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 801d9dc:	2800      	cmp	r0, #0
 801d9de:	bfa4      	itt	ge
 801d9e0:	463c      	movge	r4, r7
 801d9e2:	4603      	movge	r3, r0
 801d9e4:	ea53 0104 	orrs.w	r1, r3, r4
 801d9e8:	d0c4      	beq.n	801d974 <__ieee754_fmod+0x68>
 801d9ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d9ee:	db6b      	blt.n	801dac8 <__ieee754_fmod+0x1bc>
 801d9f0:	494d      	ldr	r1, [pc, #308]	; (801db28 <__ieee754_fmod+0x21c>)
 801d9f2:	428a      	cmp	r2, r1
 801d9f4:	db6e      	blt.n	801dad4 <__ieee754_fmod+0x1c8>
 801d9f6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801d9fa:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801d9fe:	431d      	orrs	r5, r3
 801da00:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 801da04:	4620      	mov	r0, r4
 801da06:	e7a5      	b.n	801d954 <__ieee754_fmod+0x48>
 801da08:	3901      	subs	r1, #1
 801da0a:	005b      	lsls	r3, r3, #1
 801da0c:	e7c1      	b.n	801d992 <__ieee754_fmod+0x86>
 801da0e:	4946      	ldr	r1, [pc, #280]	; (801db28 <__ieee754_fmod+0x21c>)
 801da10:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801da14:	2b00      	cmp	r3, #0
 801da16:	ddbe      	ble.n	801d996 <__ieee754_fmod+0x8a>
 801da18:	3901      	subs	r1, #1
 801da1a:	005b      	lsls	r3, r3, #1
 801da1c:	e7fa      	b.n	801da14 <__ieee754_fmod+0x108>
 801da1e:	ea4f 5128 	mov.w	r1, r8, asr #20
 801da22:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801da26:	e7b6      	b.n	801d996 <__ieee754_fmod+0x8a>
 801da28:	3a01      	subs	r2, #1
 801da2a:	005b      	lsls	r3, r3, #1
 801da2c:	e7bc      	b.n	801d9a8 <__ieee754_fmod+0x9c>
 801da2e:	4a3e      	ldr	r2, [pc, #248]	; (801db28 <__ieee754_fmod+0x21c>)
 801da30:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 801da34:	2b00      	cmp	r3, #0
 801da36:	ddb9      	ble.n	801d9ac <__ieee754_fmod+0xa0>
 801da38:	3a01      	subs	r2, #1
 801da3a:	005b      	lsls	r3, r3, #1
 801da3c:	e7fa      	b.n	801da34 <__ieee754_fmod+0x128>
 801da3e:	ea4f 522e 	mov.w	r2, lr, asr #20
 801da42:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801da46:	e7b1      	b.n	801d9ac <__ieee754_fmod+0xa0>
 801da48:	1a5c      	subs	r4, r3, r1
 801da4a:	2c1f      	cmp	r4, #31
 801da4c:	dc0a      	bgt.n	801da64 <__ieee754_fmod+0x158>
 801da4e:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 801da52:	fa08 f804 	lsl.w	r8, r8, r4
 801da56:	fa2a f303 	lsr.w	r3, sl, r3
 801da5a:	ea43 0308 	orr.w	r3, r3, r8
 801da5e:	fa0a f404 	lsl.w	r4, sl, r4
 801da62:	e7aa      	b.n	801d9ba <__ieee754_fmod+0xae>
 801da64:	4b31      	ldr	r3, [pc, #196]	; (801db2c <__ieee754_fmod+0x220>)
 801da66:	1a5b      	subs	r3, r3, r1
 801da68:	fa0a f303 	lsl.w	r3, sl, r3
 801da6c:	2400      	movs	r4, #0
 801da6e:	e7a4      	b.n	801d9ba <__ieee754_fmod+0xae>
 801da70:	eba0 0c02 	sub.w	ip, r0, r2
 801da74:	f1bc 0f1f 	cmp.w	ip, #31
 801da78:	dc0a      	bgt.n	801da90 <__ieee754_fmod+0x184>
 801da7a:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 801da7e:	fa0e fe0c 	lsl.w	lr, lr, ip
 801da82:	fa27 f606 	lsr.w	r6, r7, r6
 801da86:	ea46 060e 	orr.w	r6, r6, lr
 801da8a:	fa07 fc0c 	lsl.w	ip, r7, ip
 801da8e:	e79b      	b.n	801d9c8 <__ieee754_fmod+0xbc>
 801da90:	4e26      	ldr	r6, [pc, #152]	; (801db2c <__ieee754_fmod+0x220>)
 801da92:	1ab6      	subs	r6, r6, r2
 801da94:	fa07 f606 	lsl.w	r6, r7, r6
 801da98:	f04f 0c00 	mov.w	ip, #0
 801da9c:	e794      	b.n	801d9c8 <__ieee754_fmod+0xbc>
 801da9e:	4564      	cmp	r4, ip
 801daa0:	bf38      	it	cc
 801daa2:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 801daa6:	2800      	cmp	r0, #0
 801daa8:	da05      	bge.n	801dab6 <__ieee754_fmod+0x1aa>
 801daaa:	0fe0      	lsrs	r0, r4, #31
 801daac:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801dab0:	0064      	lsls	r4, r4, #1
 801dab2:	3901      	subs	r1, #1
 801dab4:	e789      	b.n	801d9ca <__ieee754_fmod+0xbe>
 801dab6:	ea50 0307 	orrs.w	r3, r0, r7
 801daba:	f43f af5b 	beq.w	801d974 <__ieee754_fmod+0x68>
 801dabe:	0ffb      	lsrs	r3, r7, #31
 801dac0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801dac4:	007c      	lsls	r4, r7, #1
 801dac6:	e7f4      	b.n	801dab2 <__ieee754_fmod+0x1a6>
 801dac8:	0fe1      	lsrs	r1, r4, #31
 801daca:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801dace:	0064      	lsls	r4, r4, #1
 801dad0:	3a01      	subs	r2, #1
 801dad2:	e78a      	b.n	801d9ea <__ieee754_fmod+0xde>
 801dad4:	1a89      	subs	r1, r1, r2
 801dad6:	2914      	cmp	r1, #20
 801dad8:	dc0a      	bgt.n	801daf0 <__ieee754_fmod+0x1e4>
 801dada:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801dade:	fa03 f202 	lsl.w	r2, r3, r2
 801dae2:	40cc      	lsrs	r4, r1
 801dae4:	4322      	orrs	r2, r4
 801dae6:	410b      	asrs	r3, r1
 801dae8:	ea43 0105 	orr.w	r1, r3, r5
 801daec:	4610      	mov	r0, r2
 801daee:	e731      	b.n	801d954 <__ieee754_fmod+0x48>
 801daf0:	291f      	cmp	r1, #31
 801daf2:	dc07      	bgt.n	801db04 <__ieee754_fmod+0x1f8>
 801daf4:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801daf8:	40cc      	lsrs	r4, r1
 801dafa:	fa03 f202 	lsl.w	r2, r3, r2
 801dafe:	4322      	orrs	r2, r4
 801db00:	462b      	mov	r3, r5
 801db02:	e7f1      	b.n	801dae8 <__ieee754_fmod+0x1dc>
 801db04:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801db08:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801db0c:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 801db10:	32e2      	adds	r2, #226	; 0xe2
 801db12:	fa43 f202 	asr.w	r2, r3, r2
 801db16:	e7f3      	b.n	801db00 <__ieee754_fmod+0x1f4>
 801db18:	7fefffff 	.word	0x7fefffff
 801db1c:	7ff00000 	.word	0x7ff00000
 801db20:	0801fb60 	.word	0x0801fb60
 801db24:	fffffbed 	.word	0xfffffbed
 801db28:	fffffc02 	.word	0xfffffc02
 801db2c:	fffffbe2 	.word	0xfffffbe2

0801db30 <__ieee754_sqrt>:
 801db30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db34:	ec55 4b10 	vmov	r4, r5, d0
 801db38:	4e56      	ldr	r6, [pc, #344]	; (801dc94 <__ieee754_sqrt+0x164>)
 801db3a:	43ae      	bics	r6, r5
 801db3c:	ee10 0a10 	vmov	r0, s0
 801db40:	ee10 3a10 	vmov	r3, s0
 801db44:	4629      	mov	r1, r5
 801db46:	462a      	mov	r2, r5
 801db48:	d110      	bne.n	801db6c <__ieee754_sqrt+0x3c>
 801db4a:	ee10 2a10 	vmov	r2, s0
 801db4e:	462b      	mov	r3, r5
 801db50:	f7e2 fd62 	bl	8000618 <__aeabi_dmul>
 801db54:	4602      	mov	r2, r0
 801db56:	460b      	mov	r3, r1
 801db58:	4620      	mov	r0, r4
 801db5a:	4629      	mov	r1, r5
 801db5c:	f7e2 fba6 	bl	80002ac <__adddf3>
 801db60:	4604      	mov	r4, r0
 801db62:	460d      	mov	r5, r1
 801db64:	ec45 4b10 	vmov	d0, r4, r5
 801db68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db6c:	2d00      	cmp	r5, #0
 801db6e:	dc10      	bgt.n	801db92 <__ieee754_sqrt+0x62>
 801db70:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801db74:	4330      	orrs	r0, r6
 801db76:	d0f5      	beq.n	801db64 <__ieee754_sqrt+0x34>
 801db78:	b15d      	cbz	r5, 801db92 <__ieee754_sqrt+0x62>
 801db7a:	ee10 2a10 	vmov	r2, s0
 801db7e:	462b      	mov	r3, r5
 801db80:	ee10 0a10 	vmov	r0, s0
 801db84:	f7e2 fb90 	bl	80002a8 <__aeabi_dsub>
 801db88:	4602      	mov	r2, r0
 801db8a:	460b      	mov	r3, r1
 801db8c:	f7e2 fe6e 	bl	800086c <__aeabi_ddiv>
 801db90:	e7e6      	b.n	801db60 <__ieee754_sqrt+0x30>
 801db92:	1509      	asrs	r1, r1, #20
 801db94:	d076      	beq.n	801dc84 <__ieee754_sqrt+0x154>
 801db96:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801db9a:	07ce      	lsls	r6, r1, #31
 801db9c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801dba0:	bf5e      	ittt	pl
 801dba2:	0fda      	lsrpl	r2, r3, #31
 801dba4:	005b      	lslpl	r3, r3, #1
 801dba6:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801dbaa:	0fda      	lsrs	r2, r3, #31
 801dbac:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801dbb0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801dbb4:	2000      	movs	r0, #0
 801dbb6:	106d      	asrs	r5, r5, #1
 801dbb8:	005b      	lsls	r3, r3, #1
 801dbba:	f04f 0e16 	mov.w	lr, #22
 801dbbe:	4684      	mov	ip, r0
 801dbc0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801dbc4:	eb0c 0401 	add.w	r4, ip, r1
 801dbc8:	4294      	cmp	r4, r2
 801dbca:	bfde      	ittt	le
 801dbcc:	1b12      	suble	r2, r2, r4
 801dbce:	eb04 0c01 	addle.w	ip, r4, r1
 801dbd2:	1840      	addle	r0, r0, r1
 801dbd4:	0052      	lsls	r2, r2, #1
 801dbd6:	f1be 0e01 	subs.w	lr, lr, #1
 801dbda:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801dbde:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801dbe2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801dbe6:	d1ed      	bne.n	801dbc4 <__ieee754_sqrt+0x94>
 801dbe8:	4671      	mov	r1, lr
 801dbea:	2720      	movs	r7, #32
 801dbec:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801dbf0:	4562      	cmp	r2, ip
 801dbf2:	eb04 060e 	add.w	r6, r4, lr
 801dbf6:	dc02      	bgt.n	801dbfe <__ieee754_sqrt+0xce>
 801dbf8:	d113      	bne.n	801dc22 <__ieee754_sqrt+0xf2>
 801dbfa:	429e      	cmp	r6, r3
 801dbfc:	d811      	bhi.n	801dc22 <__ieee754_sqrt+0xf2>
 801dbfe:	2e00      	cmp	r6, #0
 801dc00:	eb06 0e04 	add.w	lr, r6, r4
 801dc04:	da43      	bge.n	801dc8e <__ieee754_sqrt+0x15e>
 801dc06:	f1be 0f00 	cmp.w	lr, #0
 801dc0a:	db40      	blt.n	801dc8e <__ieee754_sqrt+0x15e>
 801dc0c:	f10c 0801 	add.w	r8, ip, #1
 801dc10:	eba2 020c 	sub.w	r2, r2, ip
 801dc14:	429e      	cmp	r6, r3
 801dc16:	bf88      	it	hi
 801dc18:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 801dc1c:	1b9b      	subs	r3, r3, r6
 801dc1e:	4421      	add	r1, r4
 801dc20:	46c4      	mov	ip, r8
 801dc22:	0052      	lsls	r2, r2, #1
 801dc24:	3f01      	subs	r7, #1
 801dc26:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801dc2a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801dc2e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801dc32:	d1dd      	bne.n	801dbf0 <__ieee754_sqrt+0xc0>
 801dc34:	4313      	orrs	r3, r2
 801dc36:	d006      	beq.n	801dc46 <__ieee754_sqrt+0x116>
 801dc38:	1c4c      	adds	r4, r1, #1
 801dc3a:	bf13      	iteet	ne
 801dc3c:	3101      	addne	r1, #1
 801dc3e:	3001      	addeq	r0, #1
 801dc40:	4639      	moveq	r1, r7
 801dc42:	f021 0101 	bicne.w	r1, r1, #1
 801dc46:	1043      	asrs	r3, r0, #1
 801dc48:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801dc4c:	0849      	lsrs	r1, r1, #1
 801dc4e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801dc52:	07c2      	lsls	r2, r0, #31
 801dc54:	bf48      	it	mi
 801dc56:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801dc5a:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801dc5e:	460c      	mov	r4, r1
 801dc60:	463d      	mov	r5, r7
 801dc62:	e77f      	b.n	801db64 <__ieee754_sqrt+0x34>
 801dc64:	0ada      	lsrs	r2, r3, #11
 801dc66:	3815      	subs	r0, #21
 801dc68:	055b      	lsls	r3, r3, #21
 801dc6a:	2a00      	cmp	r2, #0
 801dc6c:	d0fa      	beq.n	801dc64 <__ieee754_sqrt+0x134>
 801dc6e:	02d7      	lsls	r7, r2, #11
 801dc70:	d50a      	bpl.n	801dc88 <__ieee754_sqrt+0x158>
 801dc72:	f1c1 0420 	rsb	r4, r1, #32
 801dc76:	fa23 f404 	lsr.w	r4, r3, r4
 801dc7a:	1e4d      	subs	r5, r1, #1
 801dc7c:	408b      	lsls	r3, r1
 801dc7e:	4322      	orrs	r2, r4
 801dc80:	1b41      	subs	r1, r0, r5
 801dc82:	e788      	b.n	801db96 <__ieee754_sqrt+0x66>
 801dc84:	4608      	mov	r0, r1
 801dc86:	e7f0      	b.n	801dc6a <__ieee754_sqrt+0x13a>
 801dc88:	0052      	lsls	r2, r2, #1
 801dc8a:	3101      	adds	r1, #1
 801dc8c:	e7ef      	b.n	801dc6e <__ieee754_sqrt+0x13e>
 801dc8e:	46e0      	mov	r8, ip
 801dc90:	e7be      	b.n	801dc10 <__ieee754_sqrt+0xe0>
 801dc92:	bf00      	nop
 801dc94:	7ff00000 	.word	0x7ff00000

0801dc98 <_init>:
 801dc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc9a:	bf00      	nop
 801dc9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dc9e:	bc08      	pop	{r3}
 801dca0:	469e      	mov	lr, r3
 801dca2:	4770      	bx	lr

0801dca4 <_fini>:
 801dca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dca6:	bf00      	nop
 801dca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dcaa:	bc08      	pop	{r3}
 801dcac:	469e      	mov	lr, r3
 801dcae:	4770      	bx	lr
