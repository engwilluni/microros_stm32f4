
exemplo_microros_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e5d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e78  0801e768  0801e768  0002e768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080205e0  080205e0  00040390  2**0
                  CONTENTS
  4 .ARM          00000008  080205e0  080205e0  000305e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080205e8  080205e8  00040390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080205e8  080205e8  000305e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080205ec  080205ec  000305ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000390  20000000  080205f0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040390  2**0
                  CONTENTS
 10 .bss          00015ca0  20000390  20000390  00040390  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20016030  20016030  00040390  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040390  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e31c  00000000  00000000  000403c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055a7  00000000  00000000  0006e6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002180  00000000  00000000  00073c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001fa0  00000000  00000000  00075e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a20d  00000000  00000000  00077da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000293da  00000000  00000000  000a1fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f53c1  00000000  00000000  000cb38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000ac  00000000  00000000  001c0750  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a9c0  00000000  00000000  001c07fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000390 	.word	0x20000390
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801e750 	.word	0x0801e750

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000394 	.word	0x20000394
 80001cc:	0801e750 	.word	0x0801e750

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cc6:	f000 b9ef 	b.w	80010a8 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f883 	bl	8000de4 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f876 	bl	8000de4 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f865 	bl	8000de4 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f857 	bl	8000de4 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d5c:	f000 b9a4 	b.w	80010a8 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff febb 	bl	8000afc <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc31 	bl	8000618 <__aeabi_dmul>
 8000db6:	f7ff ff07 	bl	8000bc8 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fbb2 	bl	8000524 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc28 	bl	8000618 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff fa6a 	bl	80002a8 <__aeabi_dsub>
 8000dd4:	f7ff fef8 	bl	8000bc8 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	4604      	mov	r4, r0
 8000dec:	468c      	mov	ip, r1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 8083 	bne.w	8000efa <__udivmoddi4+0x116>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	d947      	bls.n	8000e8a <__udivmoddi4+0xa6>
 8000dfa:	fab2 f282 	clz	r2, r2
 8000dfe:	b142      	cbz	r2, 8000e12 <__udivmoddi4+0x2e>
 8000e00:	f1c2 0020 	rsb	r0, r2, #32
 8000e04:	fa24 f000 	lsr.w	r0, r4, r0
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	4097      	lsls	r7, r2
 8000e0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e10:	4094      	lsls	r4, r2
 8000e12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e16:	0c23      	lsrs	r3, r4, #16
 8000e18:	fbbc f6f8 	udiv	r6, ip, r8
 8000e1c:	fa1f fe87 	uxth.w	lr, r7
 8000e20:	fb08 c116 	mls	r1, r8, r6, ip
 8000e24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e28:	fb06 f10e 	mul.w	r1, r6, lr
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x60>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e36:	f080 8119 	bcs.w	800106c <__udivmoddi4+0x288>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 8116 	bls.w	800106c <__udivmoddi4+0x288>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	45a6      	cmp	lr, r4
 8000e5a:	d909      	bls.n	8000e70 <__udivmoddi4+0x8c>
 8000e5c:	193c      	adds	r4, r7, r4
 8000e5e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e62:	f080 8105 	bcs.w	8001070 <__udivmoddi4+0x28c>
 8000e66:	45a6      	cmp	lr, r4
 8000e68:	f240 8102 	bls.w	8001070 <__udivmoddi4+0x28c>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	443c      	add	r4, r7
 8000e70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e74:	eba4 040e 	sub.w	r4, r4, lr
 8000e78:	2600      	movs	r6, #0
 8000e7a:	b11d      	cbz	r5, 8000e84 <__udivmoddi4+0xa0>
 8000e7c:	40d4      	lsrs	r4, r2
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e9c5 4300 	strd	r4, r3, [r5]
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	b902      	cbnz	r2, 8000e8e <__udivmoddi4+0xaa>
 8000e8c:	deff      	udf	#255	; 0xff
 8000e8e:	fab2 f282 	clz	r2, r2
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	d150      	bne.n	8000f38 <__udivmoddi4+0x154>
 8000e96:	1bcb      	subs	r3, r1, r7
 8000e98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9c:	fa1f f887 	uxth.w	r8, r7
 8000ea0:	2601      	movs	r6, #1
 8000ea2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ea6:	0c21      	lsrs	r1, r4, #16
 8000ea8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0xe4>
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0xe2>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	f200 80e9 	bhi.w	8001098 <__udivmoddi4+0x2b4>
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	1ac9      	subs	r1, r1, r3
 8000eca:	b2a3      	uxth	r3, r4
 8000ecc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed8:	fb08 f800 	mul.w	r8, r8, r0
 8000edc:	45a0      	cmp	r8, r4
 8000ede:	d907      	bls.n	8000ef0 <__udivmoddi4+0x10c>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x10a>
 8000ee8:	45a0      	cmp	r8, r4
 8000eea:	f200 80d9 	bhi.w	80010a0 <__udivmoddi4+0x2bc>
 8000eee:	4618      	mov	r0, r3
 8000ef0:	eba4 0408 	sub.w	r4, r4, r8
 8000ef4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef8:	e7bf      	b.n	8000e7a <__udivmoddi4+0x96>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d909      	bls.n	8000f12 <__udivmoddi4+0x12e>
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	f000 80b1 	beq.w	8001066 <__udivmoddi4+0x282>
 8000f04:	2600      	movs	r6, #0
 8000f06:	e9c5 0100 	strd	r0, r1, [r5]
 8000f0a:	4630      	mov	r0, r6
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	fab3 f683 	clz	r6, r3
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d14a      	bne.n	8000fb0 <__udivmoddi4+0x1cc>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d302      	bcc.n	8000f24 <__udivmoddi4+0x140>
 8000f1e:	4282      	cmp	r2, r0
 8000f20:	f200 80b8 	bhi.w	8001094 <__udivmoddi4+0x2b0>
 8000f24:	1a84      	subs	r4, r0, r2
 8000f26:	eb61 0103 	sbc.w	r1, r1, r3
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	468c      	mov	ip, r1
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d0a8      	beq.n	8000e84 <__udivmoddi4+0xa0>
 8000f32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f36:	e7a5      	b.n	8000e84 <__udivmoddi4+0xa0>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f40:	4097      	lsls	r7, r2
 8000f42:	fa01 f002 	lsl.w	r0, r1, r2
 8000f46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f4a:	40d9      	lsrs	r1, r3
 8000f4c:	4330      	orrs	r0, r6
 8000f4e:	0c03      	lsrs	r3, r0, #16
 8000f50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f54:	fa1f f887 	uxth.w	r8, r7
 8000f58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f60:	fb06 f108 	mul.w	r1, r6, r8
 8000f64:	4299      	cmp	r1, r3
 8000f66:	fa04 f402 	lsl.w	r4, r4, r2
 8000f6a:	d909      	bls.n	8000f80 <__udivmoddi4+0x19c>
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000f72:	f080 808d 	bcs.w	8001090 <__udivmoddi4+0x2ac>
 8000f76:	4299      	cmp	r1, r3
 8000f78:	f240 808a 	bls.w	8001090 <__udivmoddi4+0x2ac>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	443b      	add	r3, r7
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b281      	uxth	r1, r0
 8000f84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f90:	fb00 f308 	mul.w	r3, r0, r8
 8000f94:	428b      	cmp	r3, r1
 8000f96:	d907      	bls.n	8000fa8 <__udivmoddi4+0x1c4>
 8000f98:	1879      	adds	r1, r7, r1
 8000f9a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f9e:	d273      	bcs.n	8001088 <__udivmoddi4+0x2a4>
 8000fa0:	428b      	cmp	r3, r1
 8000fa2:	d971      	bls.n	8001088 <__udivmoddi4+0x2a4>
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	4439      	add	r1, r7
 8000fa8:	1acb      	subs	r3, r1, r3
 8000faa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fae:	e778      	b.n	8000ea2 <__udivmoddi4+0xbe>
 8000fb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fbc:	431c      	orrs	r4, r3
 8000fbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fce:	431f      	orrs	r7, r3
 8000fd0:	0c3b      	lsrs	r3, r7, #16
 8000fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd6:	fa1f f884 	uxth.w	r8, r4
 8000fda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fe2:	fb09 fa08 	mul.w	sl, r9, r8
 8000fe6:	458a      	cmp	sl, r1
 8000fe8:	fa02 f206 	lsl.w	r2, r2, r6
 8000fec:	fa00 f306 	lsl.w	r3, r0, r6
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x220>
 8000ff2:	1861      	adds	r1, r4, r1
 8000ff4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ff8:	d248      	bcs.n	800108c <__udivmoddi4+0x2a8>
 8000ffa:	458a      	cmp	sl, r1
 8000ffc:	d946      	bls.n	800108c <__udivmoddi4+0x2a8>
 8000ffe:	f1a9 0902 	sub.w	r9, r9, #2
 8001002:	4421      	add	r1, r4
 8001004:	eba1 010a 	sub.w	r1, r1, sl
 8001008:	b2bf      	uxth	r7, r7
 800100a:	fbb1 f0fe 	udiv	r0, r1, lr
 800100e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001012:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001016:	fb00 f808 	mul.w	r8, r0, r8
 800101a:	45b8      	cmp	r8, r7
 800101c:	d907      	bls.n	800102e <__udivmoddi4+0x24a>
 800101e:	19e7      	adds	r7, r4, r7
 8001020:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8001024:	d22e      	bcs.n	8001084 <__udivmoddi4+0x2a0>
 8001026:	45b8      	cmp	r8, r7
 8001028:	d92c      	bls.n	8001084 <__udivmoddi4+0x2a0>
 800102a:	3802      	subs	r0, #2
 800102c:	4427      	add	r7, r4
 800102e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001032:	eba7 0708 	sub.w	r7, r7, r8
 8001036:	fba0 8902 	umull	r8, r9, r0, r2
 800103a:	454f      	cmp	r7, r9
 800103c:	46c6      	mov	lr, r8
 800103e:	4649      	mov	r1, r9
 8001040:	d31a      	bcc.n	8001078 <__udivmoddi4+0x294>
 8001042:	d017      	beq.n	8001074 <__udivmoddi4+0x290>
 8001044:	b15d      	cbz	r5, 800105e <__udivmoddi4+0x27a>
 8001046:	ebb3 020e 	subs.w	r2, r3, lr
 800104a:	eb67 0701 	sbc.w	r7, r7, r1
 800104e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001052:	40f2      	lsrs	r2, r6
 8001054:	ea4c 0202 	orr.w	r2, ip, r2
 8001058:	40f7      	lsrs	r7, r6
 800105a:	e9c5 2700 	strd	r2, r7, [r5]
 800105e:	2600      	movs	r6, #0
 8001060:	4631      	mov	r1, r6
 8001062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e70b      	b.n	8000e84 <__udivmoddi4+0xa0>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e9      	b.n	8000e44 <__udivmoddi4+0x60>
 8001070:	4618      	mov	r0, r3
 8001072:	e6fd      	b.n	8000e70 <__udivmoddi4+0x8c>
 8001074:	4543      	cmp	r3, r8
 8001076:	d2e5      	bcs.n	8001044 <__udivmoddi4+0x260>
 8001078:	ebb8 0e02 	subs.w	lr, r8, r2
 800107c:	eb69 0104 	sbc.w	r1, r9, r4
 8001080:	3801      	subs	r0, #1
 8001082:	e7df      	b.n	8001044 <__udivmoddi4+0x260>
 8001084:	4608      	mov	r0, r1
 8001086:	e7d2      	b.n	800102e <__udivmoddi4+0x24a>
 8001088:	4660      	mov	r0, ip
 800108a:	e78d      	b.n	8000fa8 <__udivmoddi4+0x1c4>
 800108c:	4681      	mov	r9, r0
 800108e:	e7b9      	b.n	8001004 <__udivmoddi4+0x220>
 8001090:	4666      	mov	r6, ip
 8001092:	e775      	b.n	8000f80 <__udivmoddi4+0x19c>
 8001094:	4630      	mov	r0, r6
 8001096:	e74a      	b.n	8000f2e <__udivmoddi4+0x14a>
 8001098:	f1ac 0c02 	sub.w	ip, ip, #2
 800109c:	4439      	add	r1, r7
 800109e:	e713      	b.n	8000ec8 <__udivmoddi4+0xe4>
 80010a0:	3802      	subs	r0, #2
 80010a2:	443c      	add	r4, r7
 80010a4:	e724      	b.n	8000ef0 <__udivmoddi4+0x10c>
 80010a6:	bf00      	nop

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80010b8:	f00b fc8a 	bl	800c9d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80010bc:	4b58      	ldr	r3, [pc, #352]	; (8001220 <pvPortMallocMicroROS+0x174>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80010c4:	f000 f98c 	bl	80013e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80010c8:	4b56      	ldr	r3, [pc, #344]	; (8001224 <pvPortMallocMicroROS+0x178>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f040 808e 	bne.w	80011f2 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d01d      	beq.n	8001118 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80010dc:	2208      	movs	r2, #8
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d014      	beq.n	8001118 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f023 0307 	bic.w	r3, r3, #7
 80010f4:	3308      	adds	r3, #8
 80010f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00a      	beq.n	8001118 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001106:	f383 8811 	msr	BASEPRI, r3
 800110a:	f3bf 8f6f 	isb	sy
 800110e:	f3bf 8f4f 	dsb	sy
 8001112:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001114:	bf00      	nop
 8001116:	e7fe      	b.n	8001116 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d069      	beq.n	80011f2 <pvPortMallocMicroROS+0x146>
 800111e:	4b42      	ldr	r3, [pc, #264]	; (8001228 <pvPortMallocMicroROS+0x17c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	429a      	cmp	r2, r3
 8001126:	d864      	bhi.n	80011f2 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001128:	4b40      	ldr	r3, [pc, #256]	; (800122c <pvPortMallocMicroROS+0x180>)
 800112a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800112c:	4b3f      	ldr	r3, [pc, #252]	; (800122c <pvPortMallocMicroROS+0x180>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001132:	e004      	b.n	800113e <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	429a      	cmp	r2, r3
 8001146:	d903      	bls.n	8001150 <pvPortMallocMicroROS+0xa4>
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f1      	bne.n	8001134 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001150:	4b33      	ldr	r3, [pc, #204]	; (8001220 <pvPortMallocMicroROS+0x174>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001156:	429a      	cmp	r2, r3
 8001158:	d04b      	beq.n	80011f2 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800115a:	6a3b      	ldr	r3, [r7, #32]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2208      	movs	r2, #8
 8001160:	4413      	add	r3, r2
 8001162:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	6a3b      	ldr	r3, [r7, #32]
 800116a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	1ad2      	subs	r2, r2, r3
 8001174:	2308      	movs	r3, #8
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	429a      	cmp	r2, r3
 800117a:	d91f      	bls.n	80011bc <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800117c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00a      	beq.n	80011a4 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800118e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001192:	f383 8811 	msr	BASEPRI, r3
 8001196:	f3bf 8f6f 	isb	sy
 800119a:	f3bf 8f4f 	dsb	sy
 800119e:	613b      	str	r3, [r7, #16]
}
 80011a0:	bf00      	nop
 80011a2:	e7fe      	b.n	80011a2 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	1ad2      	subs	r2, r2, r3
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80011b6:	69b8      	ldr	r0, [r7, #24]
 80011b8:	f000 f974 	bl	80014a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <pvPortMallocMicroROS+0x17c>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	4a18      	ldr	r2, [pc, #96]	; (8001228 <pvPortMallocMicroROS+0x17c>)
 80011c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <pvPortMallocMicroROS+0x17c>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <pvPortMallocMicroROS+0x184>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d203      	bcs.n	80011de <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <pvPortMallocMicroROS+0x17c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a15      	ldr	r2, [pc, #84]	; (8001230 <pvPortMallocMicroROS+0x184>)
 80011dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <pvPortMallocMicroROS+0x178>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	431a      	orrs	r2, r3
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80011f2:	f00b fbfb 	bl	800c9ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00a      	beq.n	8001216 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8001200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001204:	f383 8811 	msr	BASEPRI, r3
 8001208:	f3bf 8f6f 	isb	sy
 800120c:	f3bf 8f4f 	dsb	sy
 8001210:	60fb      	str	r3, [r7, #12]
}
 8001212:	bf00      	nop
 8001214:	e7fe      	b.n	8001214 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 8001216:	69fb      	ldr	r3, [r7, #28]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3728      	adds	r7, #40	; 0x28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200078e4 	.word	0x200078e4
 8001224:	200078f0 	.word	0x200078f0
 8001228:	200078e8 	.word	0x200078e8
 800122c:	200078dc 	.word	0x200078dc
 8001230:	200078ec 	.word	0x200078ec

08001234 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d048      	beq.n	80012d8 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001246:	2308      	movs	r3, #8
 8001248:	425b      	negs	r3, r3
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	4413      	add	r3, r2
 800124e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <vPortFreeMicroROS+0xac>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4013      	ands	r3, r2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10a      	bne.n	8001278 <vPortFreeMicroROS+0x44>
	__asm volatile
 8001262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001266:	f383 8811 	msr	BASEPRI, r3
 800126a:	f3bf 8f6f 	isb	sy
 800126e:	f3bf 8f4f 	dsb	sy
 8001272:	60fb      	str	r3, [r7, #12]
}
 8001274:	bf00      	nop
 8001276:	e7fe      	b.n	8001276 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00a      	beq.n	8001296 <vPortFreeMicroROS+0x62>
	__asm volatile
 8001280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001284:	f383 8811 	msr	BASEPRI, r3
 8001288:	f3bf 8f6f 	isb	sy
 800128c:	f3bf 8f4f 	dsb	sy
 8001290:	60bb      	str	r3, [r7, #8]
}
 8001292:	bf00      	nop
 8001294:	e7fe      	b.n	8001294 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <vPortFreeMicroROS+0xac>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4013      	ands	r3, r2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d019      	beq.n	80012d8 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d115      	bne.n	80012d8 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <vPortFreeMicroROS+0xac>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	401a      	ands	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80012bc:	f00b fb88 	bl	800c9d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <vPortFreeMicroROS+0xb0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4413      	add	r3, r2
 80012ca:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <vPortFreeMicroROS+0xb0>)
 80012cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80012ce:	6938      	ldr	r0, [r7, #16]
 80012d0:	f000 f8e8 	bl	80014a4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80012d4:	f00b fb8a 	bl	800c9ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80012d8:	bf00      	nop
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200078f0 	.word	0x200078f0
 80012e4:	200078e8 	.word	0x200078e8

080012e8 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80012f4:	2308      	movs	r3, #8
 80012f6:	425b      	negs	r3, r3
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	4413      	add	r3, r2
 80012fc:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <getBlockSize+0x38>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	43db      	mvns	r3, r3
 800130c:	4013      	ands	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]

	return count;
 8001310:	68fb      	ldr	r3, [r7, #12]
}
 8001312:	4618      	mov	r0, r3
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	200078f0 	.word	0x200078f0

08001324 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800132e:	f00b fb4f 	bl	800c9d0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001332:	6838      	ldr	r0, [r7, #0]
 8001334:	f7ff feba 	bl	80010ac <pvPortMallocMicroROS>
 8001338:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800133e:	2308      	movs	r3, #8
 8001340:	425b      	negs	r3, r3
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	4413      	add	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <pvPortReallocMicroROS+0x70>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	43db      	mvns	r3, r3
 800135e:	4013      	ands	r3, r2
 8001360:	617b      	str	r3, [r7, #20]

  	while(count--)
 8001362:	e007      	b.n	8001374 <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	1c53      	adds	r3, r2, #1
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	1c59      	adds	r1, r3, #1
 800136e:	61b9      	str	r1, [r7, #24]
 8001370:	7812      	ldrb	r2, [r2, #0]
 8001372:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	1e5a      	subs	r2, r3, #1
 8001378:	617a      	str	r2, [r7, #20]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f2      	bne.n	8001364 <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ff58 	bl	8001234 <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 8001384:	f00b fb32 	bl	800c9ec <xTaskResumeAll>

	return newmem;
 8001388:	693b      	ldr	r3, [r7, #16]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3720      	adds	r7, #32
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200078f0 	.word	0x200078f0

08001398 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80013a2:	f00b fb15 	bl	800c9d0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	fb02 f303 	mul.w	r3, r2, r3
 80013ae:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80013b0:	6978      	ldr	r0, [r7, #20]
 80013b2:	f7ff fe7b 	bl	80010ac <pvPortMallocMicroROS>
 80013b6:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	613b      	str	r3, [r7, #16]

  	while(count--)
 80013bc:	e004      	b.n	80013c8 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	613a      	str	r2, [r7, #16]
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	1e5a      	subs	r2, r3, #1
 80013cc:	617a      	str	r2, [r7, #20]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f5      	bne.n	80013be <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80013d2:	f00b fb0b 	bl	800c9ec <xTaskResumeAll>
  	return mem;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80013e6:	f247 5330 	movw	r3, #30000	; 0x7530
 80013ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80013ec:	4b27      	ldr	r3, [pc, #156]	; (800148c <prvHeapInit+0xac>)
 80013ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00c      	beq.n	8001414 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	3307      	adds	r3, #7
 80013fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f023 0307 	bic.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	4a1f      	ldr	r2, [pc, #124]	; (800148c <prvHeapInit+0xac>)
 8001410:	4413      	add	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001418:	4a1d      	ldr	r2, [pc, #116]	; (8001490 <prvHeapInit+0xb0>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <prvHeapInit+0xb0>)
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	4413      	add	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800142c:	2208      	movs	r2, #8
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1a9b      	subs	r3, r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f023 0307 	bic.w	r3, r3, #7
 800143a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4a15      	ldr	r2, [pc, #84]	; (8001494 <prvHeapInit+0xb4>)
 8001440:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <prvHeapInit+0xb4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2200      	movs	r2, #0
 8001448:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <prvHeapInit+0xb4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	1ad2      	subs	r2, r2, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <prvHeapInit+0xb4>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <prvHeapInit+0xb8>)
 800146e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4a09      	ldr	r2, [pc, #36]	; (800149c <prvHeapInit+0xbc>)
 8001476:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <prvHeapInit+0xc0>)
 800147a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800147e:	601a      	str	r2, [r3, #0]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	200003ac 	.word	0x200003ac
 8001490:	200078dc 	.word	0x200078dc
 8001494:	200078e4 	.word	0x200078e4
 8001498:	200078ec 	.word	0x200078ec
 800149c:	200078e8 	.word	0x200078e8
 80014a0:	200078f0 	.word	0x200078f0

080014a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <prvInsertBlockIntoFreeList+0xac>)
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	e002      	b.n	80014b8 <prvInsertBlockIntoFreeList+0x14>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d8f7      	bhi.n	80014b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	4413      	add	r3, r2
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d108      	bne.n	80014e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	441a      	add	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	441a      	add	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d118      	bne.n	800152c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <prvInsertBlockIntoFreeList+0xb0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d00d      	beq.n	8001522 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	441a      	add	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e008      	b.n	8001534 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <prvInsertBlockIntoFreeList+0xb0>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	e003      	b.n	8001534 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	429a      	cmp	r2, r3
 800153a:	d002      	beq.n	8001542 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	200078dc 	.word	0x200078dc
 8001554:	200078e4 	.word	0x200078e4

08001558 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001566:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001568:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800156c:	4904      	ldr	r1, [pc, #16]	; (8001580 <cubemx_transport_open+0x28>)
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f008 f804 	bl	800957c <HAL_UART_Receive_DMA>
    return true;
 8001574:	2301      	movs	r3, #1
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200078f4 	.word	0x200078f4

08001584 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001592:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f008 f821 	bl	80095dc <HAL_UART_DMAStop>
    return true;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80015b8:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b20      	cmp	r3, #32
 80015c4:	d11c      	bne.n	8001600 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f007 ff56 	bl	8009480 <HAL_UART_Transmit_DMA>
 80015d4:	4603      	mov	r3, r0
 80015d6:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80015d8:	e002      	b.n	80015e0 <cubemx_transport_write+0x3c>
            osDelay(1);
 80015da:	2001      	movs	r0, #1
 80015dc:	f009 feab 	bl	800b336 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80015e0:	7cfb      	ldrb	r3, [r7, #19]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d105      	bne.n	80015f2 <cubemx_transport_write+0x4e>
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b20      	cmp	r3, #32
 80015f0:	d1f3      	bne.n	80015da <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80015f2:	7cfb      	ldrb	r3, [r7, #19]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <cubemx_transport_write+0x58>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	e002      	b.n	8001602 <cubemx_transport_write+0x5e>
 80015fc:	2300      	movs	r3, #0
 80015fe:	e000      	b.n	8001602 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001600:	2300      	movs	r3, #0
    }
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001620:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001626:	b672      	cpsid	i
}
 8001628:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001636:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <cubemx_transport_read+0x9c>)
 8001638:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800163a:	b662      	cpsie	i
}
 800163c:	bf00      	nop
        __enable_irq();
        ms_used++;
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3301      	adds	r3, #1
 8001642:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001644:	2001      	movs	r0, #1
 8001646:	f009 fe76 	bl	800b336 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <cubemx_transport_read+0xa0>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <cubemx_transport_read+0x9c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d103      	bne.n	800165e <cubemx_transport_read+0x52>
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	dbe3      	blt.n	8001626 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001662:	e011      	b.n	8001688 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <cubemx_transport_read+0xa0>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	440b      	add	r3, r1
 800166e:	4910      	ldr	r1, [pc, #64]	; (80016b0 <cubemx_transport_read+0xa4>)
 8001670:	5c8a      	ldrb	r2, [r1, r2]
 8001672:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <cubemx_transport_read+0xa0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	3301      	adds	r3, #1
 800167a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800167e:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <cubemx_transport_read+0xa0>)
 8001680:	6013      	str	r3, [r2, #0]
        wrote++;
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	3301      	adds	r3, #1
 8001686:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <cubemx_transport_read+0xa0>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <cubemx_transport_read+0x9c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d003      	beq.n	800169c <cubemx_transport_read+0x90>
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	d3e3      	bcc.n	8001664 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 800169c:	69bb      	ldr	r3, [r7, #24]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3720      	adds	r7, #32
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200080f8 	.word	0x200080f8
 80016ac:	200080f4 	.word	0x200080f4
 80016b0:	200078f4 	.word	0x200078f4

080016b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b8:	f002 fb30 	bl	8003d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016bc:	f000 f87e 	bl	80017bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c0:	f000 fb04 	bl	8001ccc <MX_GPIO_Init>
  MX_I2C1_Init();
 80016c4:	f000 f944 	bl	8001950 <MX_I2C1_Init>
  MX_I2S3_Init();
 80016c8:	f000 f970 	bl	80019ac <MX_I2S3_Init>
  MX_SPI1_Init();
 80016cc:	f000 f99e 	bl	8001a0c <MX_SPI1_Init>
  MX_DMA_Init();
 80016d0:	f000 fabe 	bl	8001c50 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016d4:	f000 fa46 	bl	8001b64 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 80016d8:	f000 fa98 	bl	8001c0c <MX_USB_OTG_FS_HCD_Init>
  MX_USART3_UART_Init();
 80016dc:	f000 fa6c 	bl	8001bb8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80016e0:	f000 f8d6 	bl	8001890 <MX_ADC1_Init>
  MX_TIM3_Init();
 80016e4:	f000 f9c8 	bl	8001a78 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc_values, 2);
 80016e8:	2202      	movs	r2, #2
 80016ea:	491f      	ldr	r1, [pc, #124]	; (8001768 <main+0xb4>)
 80016ec:	481f      	ldr	r0, [pc, #124]	; (800176c <main+0xb8>)
 80016ee:	f002 fbbf 	bl	8003e70 <HAL_ADC_Start_DMA>
  status = HAL_UART_Receive_IT(&huart3, &uart_gps_rx, 1);
 80016f2:	2201      	movs	r2, #1
 80016f4:	491e      	ldr	r1, [pc, #120]	; (8001770 <main+0xbc>)
 80016f6:	481f      	ldr	r0, [pc, #124]	; (8001774 <main+0xc0>)
 80016f8:	f007 fe91 	bl	800941e <HAL_UART_Receive_IT>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <main+0xc4>)
 8001702:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001704:	f009 fc6c 	bl	800afe0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of stepperMutex */
  stepperMutexHandle = osMutexNew(&stepperMutex_attributes);
 8001708:	481c      	ldr	r0, [pc, #112]	; (800177c <main+0xc8>)
 800170a:	f009 fe2f 	bl	800b36c <osMutexNew>
 800170e:	4603      	mov	r3, r0
 8001710:	4a1b      	ldr	r2, [pc, #108]	; (8001780 <main+0xcc>)
 8001712:	6013      	str	r3, [r2, #0]

  /* creation of sensorDataMutex */
  sensorDataMutexHandle = osMutexNew(&sensorDataMutex_attributes);
 8001714:	481b      	ldr	r0, [pc, #108]	; (8001784 <main+0xd0>)
 8001716:	f009 fe29 	bl	800b36c <osMutexNew>
 800171a:	4603      	mov	r3, r0
 800171c:	4a1a      	ldr	r2, [pc, #104]	; (8001788 <main+0xd4>)
 800171e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_ros2 */
  task_ros2Handle = osThreadNew(task_ros2_function, NULL, &task_ros2_attributes);
 8001720:	4a1a      	ldr	r2, [pc, #104]	; (800178c <main+0xd8>)
 8001722:	2100      	movs	r1, #0
 8001724:	481a      	ldr	r0, [pc, #104]	; (8001790 <main+0xdc>)
 8001726:	f009 fca5 	bl	800b074 <osThreadNew>
 800172a:	4603      	mov	r3, r0
 800172c:	4a19      	ldr	r2, [pc, #100]	; (8001794 <main+0xe0>)
 800172e:	6013      	str	r3, [r2, #0]

  /* creation of task_gps */
  task_gpsHandle = osThreadNew(task_gps_function, NULL, &task_gps_attributes);
 8001730:	4a19      	ldr	r2, [pc, #100]	; (8001798 <main+0xe4>)
 8001732:	2100      	movs	r1, #0
 8001734:	4819      	ldr	r0, [pc, #100]	; (800179c <main+0xe8>)
 8001736:	f009 fc9d 	bl	800b074 <osThreadNew>
 800173a:	4603      	mov	r3, r0
 800173c:	4a18      	ldr	r2, [pc, #96]	; (80017a0 <main+0xec>)
 800173e:	6013      	str	r3, [r2, #0]

  /* creation of task_stepper */
  task_stepperHandle = osThreadNew(task_stepper_function, NULL, &task_stepper_attributes);
 8001740:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <main+0xf0>)
 8001742:	2100      	movs	r1, #0
 8001744:	4818      	ldr	r0, [pc, #96]	; (80017a8 <main+0xf4>)
 8001746:	f009 fc95 	bl	800b074 <osThreadNew>
 800174a:	4603      	mov	r3, r0
 800174c:	4a17      	ldr	r2, [pc, #92]	; (80017ac <main+0xf8>)
 800174e:	6013      	str	r3, [r2, #0]

  /* creation of task_main */
  task_mainHandle = osThreadNew(task_main_function, NULL, &task_main_attributes);
 8001750:	4a17      	ldr	r2, [pc, #92]	; (80017b0 <main+0xfc>)
 8001752:	2100      	movs	r1, #0
 8001754:	4817      	ldr	r0, [pc, #92]	; (80017b4 <main+0x100>)
 8001756:	f009 fc8d 	bl	800b074 <osThreadNew>
 800175a:	4603      	mov	r3, r0
 800175c:	4a16      	ldr	r2, [pc, #88]	; (80017b8 <main+0x104>)
 800175e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001760:	f009 fc62 	bl	800b028 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001764:	e7fe      	b.n	8001764 <main+0xb0>
 8001766:	bf00      	nop
 8001768:	20010de8 	.word	0x20010de8
 800176c:	200108b4 	.word	0x200108b4
 8001770:	200080fd 	.word	0x200080fd
 8001774:	20010608 	.word	0x20010608
 8001778:	20010de4 	.word	0x20010de4
 800177c:	0801f6a0 	.word	0x0801f6a0
 8001780:	200109e4 	.word	0x200109e4
 8001784:	0801f6b0 	.word	0x0801f6b0
 8001788:	200108ac 	.word	0x200108ac
 800178c:	0801f610 	.word	0x0801f610
 8001790:	08002339 	.word	0x08002339
 8001794:	200105f4 	.word	0x200105f4
 8001798:	0801f634 	.word	0x0801f634
 800179c:	08002795 	.word	0x08002795
 80017a0:	2001058c 	.word	0x2001058c
 80017a4:	0801f658 	.word	0x0801f658
 80017a8:	08002899 	.word	0x08002899
 80017ac:	20010858 	.word	0x20010858
 80017b0:	0801f67c 	.word	0x0801f67c
 80017b4:	08002961 	.word	0x08002961
 80017b8:	200108fc 	.word	0x200108fc

080017bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b094      	sub	sp, #80	; 0x50
 80017c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c2:	f107 0320 	add.w	r3, r7, #32
 80017c6:	2230      	movs	r2, #48	; 0x30
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f018 fd5e 	bl	801a28c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	4b28      	ldr	r3, [pc, #160]	; (8001888 <SystemClock_Config+0xcc>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	4a27      	ldr	r2, [pc, #156]	; (8001888 <SystemClock_Config+0xcc>)
 80017ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ee:	6413      	str	r3, [r2, #64]	; 0x40
 80017f0:	4b25      	ldr	r3, [pc, #148]	; (8001888 <SystemClock_Config+0xcc>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017fc:	2300      	movs	r3, #0
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <SystemClock_Config+0xd0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a21      	ldr	r2, [pc, #132]	; (800188c <SystemClock_Config+0xd0>)
 8001806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b1f      	ldr	r3, [pc, #124]	; (800188c <SystemClock_Config+0xd0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001818:	2301      	movs	r3, #1
 800181a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800181c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001822:	2302      	movs	r3, #2
 8001824:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001826:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800182a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800182c:	2308      	movs	r3, #8
 800182e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001830:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001834:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001836:	2302      	movs	r3, #2
 8001838:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800183a:	2307      	movs	r3, #7
 800183c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800183e:	f107 0320 	add.w	r3, r7, #32
 8001842:	4618      	mov	r0, r3
 8001844:	f005 feb0 	bl	80075a8 <HAL_RCC_OscConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800184e:	f001 f8eb 	bl	8002a28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001852:	230f      	movs	r3, #15
 8001854:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001856:	2302      	movs	r3, #2
 8001858:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800185e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001862:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001868:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	2105      	movs	r1, #5
 8001870:	4618      	mov	r0, r3
 8001872:	f006 f911 	bl	8007a98 <HAL_RCC_ClockConfig>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800187c:	f001 f8d4 	bl	8002a28 <Error_Handler>
  }
}
 8001880:	bf00      	nop
 8001882:	3750      	adds	r7, #80	; 0x50
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800
 800188c:	40007000 	.word	0x40007000

08001890 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001896:	463b      	mov	r3, r7
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018a2:	4b28      	ldr	r3, [pc, #160]	; (8001944 <MX_ADC1_Init+0xb4>)
 80018a4:	4a28      	ldr	r2, [pc, #160]	; (8001948 <MX_ADC1_Init+0xb8>)
 80018a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018a8:	4b26      	ldr	r3, [pc, #152]	; (8001944 <MX_ADC1_Init+0xb4>)
 80018aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018b0:	4b24      	ldr	r3, [pc, #144]	; (8001944 <MX_ADC1_Init+0xb4>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80018b6:	4b23      	ldr	r3, [pc, #140]	; (8001944 <MX_ADC1_Init+0xb4>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018bc:	4b21      	ldr	r3, [pc, #132]	; (8001944 <MX_ADC1_Init+0xb4>)
 80018be:	2201      	movs	r2, #1
 80018c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <MX_ADC1_Init+0xb4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018ca:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <MX_ADC1_Init+0xb4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018d0:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <MX_ADC1_Init+0xb4>)
 80018d2:	4a1e      	ldr	r2, [pc, #120]	; (800194c <MX_ADC1_Init+0xbc>)
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018d6:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <MX_ADC1_Init+0xb4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <MX_ADC1_Init+0xb4>)
 80018de:	2202      	movs	r2, #2
 80018e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <MX_ADC1_Init+0xb4>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <MX_ADC1_Init+0xb4>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018f0:	4814      	ldr	r0, [pc, #80]	; (8001944 <MX_ADC1_Init+0xb4>)
 80018f2:	f002 fa79 	bl	8003de8 <HAL_ADC_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80018fc:	f001 f894 	bl	8002a28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001900:	230e      	movs	r3, #14
 8001902:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001904:	2301      	movs	r3, #1
 8001906:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001908:	2302      	movs	r3, #2
 800190a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800190c:	463b      	mov	r3, r7
 800190e:	4619      	mov	r1, r3
 8001910:	480c      	ldr	r0, [pc, #48]	; (8001944 <MX_ADC1_Init+0xb4>)
 8001912:	f002 fbdb 	bl	80040cc <HAL_ADC_ConfigChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800191c:	f001 f884 	bl	8002a28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001920:	230f      	movs	r3, #15
 8001922:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001924:	2302      	movs	r3, #2
 8001926:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001928:	463b      	mov	r3, r7
 800192a:	4619      	mov	r1, r3
 800192c:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_ADC1_Init+0xb4>)
 800192e:	f002 fbcd 	bl	80040cc <HAL_ADC_ConfigChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001938:	f001 f876 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200108b4 	.word	0x200108b4
 8001948:	40012000 	.word	0x40012000
 800194c:	0f000001 	.word	0x0f000001

08001950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001956:	4a13      	ldr	r2, [pc, #76]	; (80019a4 <MX_I2C1_Init+0x54>)
 8001958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_I2C1_Init+0x50>)
 800195c:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <MX_I2C1_Init+0x58>)
 800195e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001968:	2200      	movs	r2, #0
 800196a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_I2C1_Init+0x50>)
 800196e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001972:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001976:	2200      	movs	r2, #0
 8001978:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_I2C1_Init+0x50>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001980:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001988:	2200      	movs	r2, #0
 800198a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800198c:	4804      	ldr	r0, [pc, #16]	; (80019a0 <MX_I2C1_Init+0x50>)
 800198e:	f005 f827 	bl	80069e0 <HAL_I2C_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001998:	f001 f846 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20010678 	.word	0x20010678
 80019a4:	40005400 	.word	0x40005400
 80019a8:	000186a0 	.word	0x000186a0

080019ac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019b2:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <MX_I2S3_Init+0x58>)
 80019b4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019bc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80019c4:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80019ca:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019d4:	4a0c      	ldr	r2, [pc, #48]	; (8001a08 <MX_I2S3_Init+0x5c>)
 80019d6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019ec:	f005 f93c 	bl	8006c68 <HAL_I2S_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80019f6:	f001 f817 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20010d9c 	.word	0x20010d9c
 8001a04:	40003c00 	.word	0x40003c00
 8001a08:	00017700 	.word	0x00017700

08001a0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a10:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <MX_SPI1_Init+0x64>)
 8001a12:	4a18      	ldr	r2, [pc, #96]	; (8001a74 <MX_SPI1_Init+0x68>)
 8001a14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a16:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <MX_SPI1_Init+0x64>)
 8001a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a1e:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <MX_SPI1_Init+0x64>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <MX_SPI1_Init+0x64>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_SPI1_Init+0x64>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <MX_SPI1_Init+0x64>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_SPI1_Init+0x64>)
 8001a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_SPI1_Init+0x64>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <MX_SPI1_Init+0x64>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_SPI1_Init+0x64>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a50:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <MX_SPI1_Init+0x64>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_SPI1_Init+0x64>)
 8001a58:	220a      	movs	r2, #10
 8001a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a5c:	4804      	ldr	r0, [pc, #16]	; (8001a70 <MX_SPI1_Init+0x64>)
 8001a5e:	f006 fb89 	bl	8008174 <HAL_SPI_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a68:	f000 ffde 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200109f0 	.word	0x200109f0
 8001a74:	40013000 	.word	0x40013000

08001a78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08e      	sub	sp, #56	; 0x38
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	f107 0320 	add.w	r3, r7, #32
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
 8001aa4:	615a      	str	r2, [r3, #20]
 8001aa6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001aaa:	4a2d      	ldr	r2, [pc, #180]	; (8001b60 <MX_TIM3_Init+0xe8>)
 8001aac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001aae:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001ab0:	2253      	movs	r2, #83	; 0x53
 8001ab2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab4:	4b29      	ldr	r3, [pc, #164]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001aba:	4b28      	ldr	r3, [pc, #160]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001abc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ac0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac2:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ace:	4823      	ldr	r0, [pc, #140]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001ad0:	f006 fbd9 	bl	8008286 <HAL_TIM_Base_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ada:	f000 ffa5 	bl	8002a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ae4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	481c      	ldr	r0, [pc, #112]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001aec:	f006 ffc4 	bl	8008a78 <HAL_TIM_ConfigClockSource>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001af6:	f000 ff97 	bl	8002a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001afa:	4818      	ldr	r0, [pc, #96]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001afc:	f006 fc82 	bl	8008404 <HAL_TIM_PWM_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b06:	f000 ff8f 	bl	8002a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b12:	f107 0320 	add.w	r3, r7, #32
 8001b16:	4619      	mov	r1, r3
 8001b18:	4810      	ldr	r0, [pc, #64]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001b1a:	f007 fba3 	bl	8009264 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b24:	f000 ff80 	bl	8002a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b28:	2360      	movs	r3, #96	; 0x60
 8001b2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 8001b2c:	23fa      	movs	r3, #250	; 0xfa
 8001b2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4807      	ldr	r0, [pc, #28]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001b40:	f006 fed8 	bl	80088f4 <HAL_TIM_PWM_ConfigChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b4a:	f000 ff6d 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b4e:	4803      	ldr	r0, [pc, #12]	; (8001b5c <MX_TIM3_Init+0xe4>)
 8001b50:	f001 fd66 	bl	8003620 <HAL_TIM_MspPostInit>

}
 8001b54:	bf00      	nop
 8001b56:	3738      	adds	r7, #56	; 0x38
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20010864 	.word	0x20010864
 8001b60:	40000400 	.word	0x40000400

08001b64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <MX_USART2_UART_Init+0x50>)
 8001b6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b9c:	f007 fbf2 	bl	8009384 <HAL_UART_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ba6:	f000 ff3f 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20010d50 	.word	0x20010d50
 8001bb4:	40004400 	.word	0x40004400

08001bb8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <MX_USART3_UART_Init+0x4c>)
 8001bbe:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <MX_USART3_UART_Init+0x50>)
 8001bc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <MX_USART3_UART_Init+0x4c>)
 8001bc4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <MX_USART3_UART_Init+0x4c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <MX_USART3_UART_Init+0x4c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <MX_USART3_UART_Init+0x4c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <MX_USART3_UART_Init+0x4c>)
 8001bde:	220c      	movs	r2, #12
 8001be0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <MX_USART3_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <MX_USART3_UART_Init+0x4c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_USART3_UART_Init+0x4c>)
 8001bf0:	f007 fbc8 	bl	8009384 <HAL_UART_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001bfa:	f000 ff15 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20010608 	.word	0x20010608
 8001c08:	40004800 	.word	0x40004800

08001c0c <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c10:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001c16:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001c38:	f003 fbbd 	bl	80053b6 <HAL_HCD_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8001c42:	f000 fef1 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20010a4c 	.word	0x20010a4c

08001c50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <MX_DMA_Init+0x78>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a1a      	ldr	r2, [pc, #104]	; (8001cc8 <MX_DMA_Init+0x78>)
 8001c60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <MX_DMA_Init+0x78>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <MX_DMA_Init+0x78>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <MX_DMA_Init+0x78>)
 8001c7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <MX_DMA_Init+0x78>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2105      	movs	r1, #5
 8001c92:	2010      	movs	r0, #16
 8001c94:	f002 fd72 	bl	800477c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001c98:	2010      	movs	r0, #16
 8001c9a:	f002 fd8b 	bl	80047b4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2105      	movs	r1, #5
 8001ca2:	2011      	movs	r0, #17
 8001ca4:	f002 fd6a 	bl	800477c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001ca8:	2011      	movs	r0, #17
 8001caa:	f002 fd83 	bl	80047b4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2105      	movs	r1, #5
 8001cb2:	2038      	movs	r0, #56	; 0x38
 8001cb4:	f002 fd62 	bl	800477c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001cb8:	2038      	movs	r0, #56	; 0x38
 8001cba:	f002 fd7b 	bl	80047b4 <HAL_NVIC_EnableIRQ>

}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800

08001ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08c      	sub	sp, #48	; 0x30
 8001cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	4b77      	ldr	r3, [pc, #476]	; (8001ec4 <MX_GPIO_Init+0x1f8>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a76      	ldr	r2, [pc, #472]	; (8001ec4 <MX_GPIO_Init+0x1f8>)
 8001cec:	f043 0310 	orr.w	r3, r3, #16
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b74      	ldr	r3, [pc, #464]	; (8001ec4 <MX_GPIO_Init+0x1f8>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	4b70      	ldr	r3, [pc, #448]	; (8001ec4 <MX_GPIO_Init+0x1f8>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a6f      	ldr	r2, [pc, #444]	; (8001ec4 <MX_GPIO_Init+0x1f8>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b6d      	ldr	r3, [pc, #436]	; (8001ec4 <MX_GPIO_Init+0x1f8>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b69      	ldr	r3, [pc, #420]	; (8001ec4 <MX_GPIO_Init+0x1f8>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a68      	ldr	r2, [pc, #416]	; (8001ec4 <MX_GPIO_Init+0x1f8>)
 8001d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b66      	ldr	r3, [pc, #408]	; (8001ec4 <MX_GPIO_Init+0x1f8>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b62      	ldr	r3, [pc, #392]	; (8001ec4 <MX_GPIO_Init+0x1f8>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a61      	ldr	r2, [pc, #388]	; (8001ec4 <MX_GPIO_Init+0x1f8>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b5f      	ldr	r3, [pc, #380]	; (8001ec4 <MX_GPIO_Init+0x1f8>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	4b5b      	ldr	r3, [pc, #364]	; (8001ec4 <MX_GPIO_Init+0x1f8>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a5a      	ldr	r2, [pc, #360]	; (8001ec4 <MX_GPIO_Init+0x1f8>)
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b58      	ldr	r3, [pc, #352]	; (8001ec4 <MX_GPIO_Init+0x1f8>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	4b54      	ldr	r3, [pc, #336]	; (8001ec4 <MX_GPIO_Init+0x1f8>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a53      	ldr	r2, [pc, #332]	; (8001ec4 <MX_GPIO_Init+0x1f8>)
 8001d78:	f043 0308 	orr.w	r3, r3, #8
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b51      	ldr	r3, [pc, #324]	; (8001ec4 <MX_GPIO_Init+0x1f8>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|STEPPER_EN_Pin|STEPPER_DIR_Pin|MS1_Pin
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 8001d90:	484d      	ldr	r0, [pc, #308]	; (8001ec8 <MX_GPIO_Init+0x1fc>)
 8001d92:	f003 fad3 	bl	800533c <HAL_GPIO_WritePin>
                          |MS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001d96:	2201      	movs	r2, #1
 8001d98:	2101      	movs	r1, #1
 8001d9a:	484c      	ldr	r0, [pc, #304]	; (8001ecc <MX_GPIO_Init+0x200>)
 8001d9c:	f003 face 	bl	800533c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001da0:	2200      	movs	r2, #0
 8001da2:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001da6:	484a      	ldr	r0, [pc, #296]	; (8001ed0 <MX_GPIO_Init+0x204>)
 8001da8:	f003 fac8 	bl	800533c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin STEPPER_EN_Pin STEPPER_DIR_Pin MS1_Pin
                           MS2_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|STEPPER_EN_Pin|STEPPER_DIR_Pin|MS1_Pin
 8001dac:	f44f 63f1 	mov.w	r3, #1928	; 0x788
 8001db0:	61fb      	str	r3, [r7, #28]
                          |MS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db2:	2301      	movs	r3, #1
 8001db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dbe:	f107 031c 	add.w	r3, r7, #28
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4840      	ldr	r0, [pc, #256]	; (8001ec8 <MX_GPIO_Init+0x1fc>)
 8001dc6:	f003 f905 	bl	8004fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001dda:	f107 031c 	add.w	r3, r7, #28
 8001dde:	4619      	mov	r1, r3
 8001de0:	483a      	ldr	r0, [pc, #232]	; (8001ecc <MX_GPIO_Init+0x200>)
 8001de2:	f003 f8f7 	bl	8004fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001de6:	2308      	movs	r3, #8
 8001de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001df6:	2305      	movs	r3, #5
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001dfa:	f107 031c 	add.w	r3, r7, #28
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4832      	ldr	r0, [pc, #200]	; (8001ecc <MX_GPIO_Init+0x200>)
 8001e02:	f003 f8e7 	bl	8004fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0_Pin */
  GPIO_InitStruct.Pin = PB0_Pin;
 8001e06:	2301      	movs	r3, #1
 8001e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PB0_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	4619      	mov	r1, r3
 8001e1a:	482e      	ldr	r0, [pc, #184]	; (8001ed4 <MX_GPIO_Init+0x208>)
 8001e1c:	f003 f8da 	bl	8004fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001e20:	2304      	movs	r3, #4
 8001e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	4619      	mov	r1, r3
 8001e32:	4829      	ldr	r0, [pc, #164]	; (8001ed8 <MX_GPIO_Init+0x20c>)
 8001e34:	f003 f8ce 	bl	8004fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e4a:	2305      	movs	r3, #5
 8001e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001e4e:	f107 031c 	add.w	r3, r7, #28
 8001e52:	4619      	mov	r1, r3
 8001e54:	4820      	ldr	r0, [pc, #128]	; (8001ed8 <MX_GPIO_Init+0x20c>)
 8001e56:	f003 f8bd 	bl	8004fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001e5a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001e5e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e6c:	f107 031c 	add.w	r3, r7, #28
 8001e70:	4619      	mov	r1, r3
 8001e72:	4817      	ldr	r0, [pc, #92]	; (8001ed0 <MX_GPIO_Init+0x204>)
 8001e74:	f003 f8ae 	bl	8004fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e78:	2320      	movs	r3, #32
 8001e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4811      	ldr	r0, [pc, #68]	; (8001ed0 <MX_GPIO_Init+0x204>)
 8001e8c:	f003 f8a2 	bl	8004fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001e90:	2302      	movs	r3, #2
 8001e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e94:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001e9e:	f107 031c 	add.w	r3, r7, #28
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4808      	ldr	r0, [pc, #32]	; (8001ec8 <MX_GPIO_Init+0x1fc>)
 8001ea6:	f003 f895 	bl	8004fd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2105      	movs	r1, #5
 8001eae:	2006      	movs	r0, #6
 8001eb0:	f002 fc64 	bl	800477c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001eb4:	2006      	movs	r0, #6
 8001eb6:	f002 fc7d 	bl	80047b4 <HAL_NVIC_EnableIRQ>

}
 8001eba:	bf00      	nop
 8001ebc:	3730      	adds	r7, #48	; 0x30
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40020c00 	.word	0x40020c00
 8001ed4:	40020000 	.word	0x40020000
 8001ed8:	40020400 	.word	0x40020400
 8001edc:	00000000 	.word	0x00000000

08001ee0 <convertDegMinToDecDeg>:
 * Convert NMEA absolute position to decimal degrees
 * "ddmm.mmmm" or "dddmm.mmmm" really is D+M/60,
 * then negated if quadrant is 'W' or 'S'
 */
double convertDegMinToDecDeg (float degMin)
{
 8001ee0:	b5b0      	push	{r4, r5, r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	ed87 0a01 	vstr	s0, [r7, #4]
  double min = 0.0;
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double decDeg = 0.0;
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	e9c7 2302 	strd	r2, r3, [r7, #8]

  //get the minutes, fmod() requires double
  min = fmod((double)degMin, 100.0);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7fe fb30 	bl	8000568 <__aeabi_f2d>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001f78 <convertDegMinToDecDeg+0x98>
 8001f10:	ec43 2b10 	vmov	d0, r2, r3
 8001f14:	f01c f9e6 	bl	801e2e4 <fmod>
 8001f18:	ed87 0b04 	vstr	d0, [r7, #16]

  //rebuild coordinates in decimal degrees
  degMin = (int) ( degMin / 100 );
 8001f1c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f20:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001f80 <convertDegMinToDecDeg+0xa0>
 8001f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f30:	edc7 7a01 	vstr	s15, [r7, #4]
  decDeg = degMin + ( min / 60 );
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7fe fb17 	bl	8000568 <__aeabi_f2d>
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	460d      	mov	r5, r1
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <convertDegMinToDecDeg+0xa4>)
 8001f44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f48:	f7fe fc90 	bl	800086c <__aeabi_ddiv>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4620      	mov	r0, r4
 8001f52:	4629      	mov	r1, r5
 8001f54:	f7fe f9aa 	bl	80002ac <__adddf3>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	e9c7 2302 	strd	r2, r3, [r7, #8]

  return decDeg;
 8001f60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f64:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f68:	eeb0 0a47 	vmov.f32	s0, s14
 8001f6c:	eef0 0a67 	vmov.f32	s1, s15
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bdb0      	pop	{r4, r5, r7, pc}
 8001f76:	bf00      	nop
 8001f78:	00000000 	.word	0x00000000
 8001f7c:	40590000 	.word	0x40590000
 8001f80:	42c80000 	.word	0x42c80000
 8001f84:	404e0000 	.word	0x404e0000

08001f88 <ros2_gpio_input_timer_callback>:

void ros2_gpio_input_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	e9c7 2300 	strd	r2, r3, [r7]

		ros2_gpio_input_msg.data= sensor_data.digital_input;
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <ros2_gpio_input_timer_callback+0x38>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <ros2_gpio_input_timer_callback+0x3c>)
 8001f9a:	6013      	str	r3, [r2, #0]

		// Publish the message
		rcl_ret_t ret = rcl_publish(&ros2_gpio_input_pub, &ros2_gpio_input_msg, NULL);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	4909      	ldr	r1, [pc, #36]	; (8001fc4 <ros2_gpio_input_timer_callback+0x3c>)
 8001fa0:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <ros2_gpio_input_timer_callback+0x40>)
 8001fa2:	f00c ff03 	bl	800edac <rcl_publish>
 8001fa6:	6178      	str	r0, [r7, #20]
		if (ret != RCL_RET_OK)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d004      	beq.n	8001fb8 <ros2_gpio_input_timer_callback+0x30>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 8001fae:	f240 3161 	movw	r1, #865	; 0x361
 8001fb2:	4806      	ldr	r0, [pc, #24]	; (8001fcc <ros2_gpio_input_timer_callback+0x44>)
 8001fb4:	f018 fc3c 	bl	801a830 <iprintf>
		}
}
 8001fb8:	bf00      	nop
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20010558 	.word	0x20010558
 8001fc4:	200108b0 	.word	0x200108b0
 8001fc8:	200109e0 	.word	0x200109e0
 8001fcc:	0801e7bc 	.word	0x0801e7bc

08001fd0 <ros2_gps_timer_callback>:

void ros2_gps_timer_callback(rcl_timer_t * timer, int64_t last_call_time) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08c      	sub	sp, #48	; 0x30
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d03e      	beq.n	8002060 <ros2_gps_timer_callback+0x90>
// Fill the message timestamp
		struct timespec ts;
		int64_t time_ns;
		time_ns = rmw_uros_epoch_nanos();
 8001fe2:	f00e ff5b 	bl	8010e9c <rmw_uros_epoch_nanos>
 8001fe6:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		UTILS_NanosecondsToTimespec(time_ns, &ts);
 8001fea:	f107 0310 	add.w	r3, r7, #16
 8001fee:	461a      	mov	r2, r3
 8001ff0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ff4:	f000 fdbc 	bl	8002b70 <UTILS_NanosecondsToTimespec>


	// Create the Header
		ros2_gps_msg.header.stamp.sec = ts.tv_sec;
 8001ff8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <ros2_gps_timer_callback+0x98>)
 8001ffe:	601a      	str	r2, [r3, #0]
		ros2_gps_msg.header.stamp.nanosec = ts.tv_nsec;
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	461a      	mov	r2, r3
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <ros2_gps_timer_callback+0x98>)
 8002006:	605a      	str	r2, [r3, #4]

		ros2_gps_msg.latitude = gps.latitude;
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <ros2_gps_timer_callback+0x9c>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe faab 	bl	8000568 <__aeabi_f2d>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4914      	ldr	r1, [pc, #80]	; (8002068 <ros2_gps_timer_callback+0x98>)
 8002018:	e9c1 2306 	strd	r2, r3, [r1, #24]
		ros2_gps_msg.longitude = gps.longitude;
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <ros2_gps_timer_callback+0x9c>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe faa1 	bl	8000568 <__aeabi_f2d>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	490f      	ldr	r1, [pc, #60]	; (8002068 <ros2_gps_timer_callback+0x98>)
 800202c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ros2_gps_msg.altitude = gps.altitude;
 8002030:	4b0e      	ldr	r3, [pc, #56]	; (800206c <ros2_gps_timer_callback+0x9c>)
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fa97 	bl	8000568 <__aeabi_f2d>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	490a      	ldr	r1, [pc, #40]	; (8002068 <ros2_gps_timer_callback+0x98>)
 8002040:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		// Publish the message
				rcl_ret_t ret = rcl_publish(&ros2_gps_pub, &ros2_gps_msg, NULL);
 8002044:	2200      	movs	r2, #0
 8002046:	4908      	ldr	r1, [pc, #32]	; (8002068 <ros2_gps_timer_callback+0x98>)
 8002048:	4809      	ldr	r0, [pc, #36]	; (8002070 <ros2_gps_timer_callback+0xa0>)
 800204a:	f00c feaf 	bl	800edac <rcl_publish>
 800204e:	6278      	str	r0, [r7, #36]	; 0x24
				if (ret != RCL_RET_OK)
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	2b00      	cmp	r3, #0
 8002054:	d004      	beq.n	8002060 <ros2_gps_timer_callback+0x90>
				{
				  printf("Error publishing gps (line %d)\n", __LINE__);
 8002056:	f240 3179 	movw	r1, #889	; 0x379
 800205a:	4806      	ldr	r0, [pc, #24]	; (8002074 <ros2_gps_timer_callback+0xa4>)
 800205c:	f018 fbe8 	bl	801a830 <iprintf>
				}
			}


}
 8002060:	bf00      	nop
 8002062:	3730      	adds	r7, #48	; 0x30
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	200107d0 	.word	0x200107d0
 800206c:	20010564 	.word	0x20010564
 8002070:	20010d94 	.word	0x20010d94
 8002074:	0801e7e4 	.word	0x0801e7e4

08002078 <ros2_analog_input_timer_callback>:

void ros2_analog_input_timer_callback(rcl_timer_t * timer, int64_t last_call_time){
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d026      	beq.n	80020d8 <ros2_analog_input_timer_callback+0x60>
		osMutexAcquire(sensorDataMutexHandle, osWaitForever);
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <ros2_analog_input_timer_callback+0x68>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002092:	4618      	mov	r0, r3
 8002094:	f009 f9f0 	bl	800b478 <osMutexAcquire>
	ros2_analog_input_msg.data.data[0] = sensor_data.analog_input[0];
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <ros2_analog_input_timer_callback+0x6c>)
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <ros2_analog_input_timer_callback+0x70>)
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	b292      	uxth	r2, r2
 80020a2:	801a      	strh	r2, [r3, #0]
	ros2_analog_input_msg.data.data[1] = sensor_data.analog_input[1];
 80020a4:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <ros2_analog_input_timer_callback+0x6c>)
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <ros2_analog_input_timer_callback+0x70>)
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	3302      	adds	r3, #2
 80020ae:	b292      	uxth	r2, r2
 80020b0:	801a      	strh	r2, [r3, #0]
	osMutexRelease(sensorDataMutexHandle);
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <ros2_analog_input_timer_callback+0x68>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f009 fa29 	bl	800b50e <osMutexRelease>
	// Publish the message
					rcl_ret_t ret = rcl_publish(&ros2_analog_input_pub, &ros2_analog_input_msg, NULL);
 80020bc:	2200      	movs	r2, #0
 80020be:	490a      	ldr	r1, [pc, #40]	; (80020e8 <ros2_analog_input_timer_callback+0x70>)
 80020c0:	480a      	ldr	r0, [pc, #40]	; (80020ec <ros2_analog_input_timer_callback+0x74>)
 80020c2:	f00c fe73 	bl	800edac <rcl_publish>
 80020c6:	6178      	str	r0, [r7, #20]
					if (ret != RCL_RET_OK)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d004      	beq.n	80020d8 <ros2_analog_input_timer_callback+0x60>
					{
					  printf("Error publishing analog input (line %d)\n", __LINE__);
 80020ce:	f240 318a 	movw	r1, #906	; 0x38a
 80020d2:	4807      	ldr	r0, [pc, #28]	; (80020f0 <ros2_analog_input_timer_callback+0x78>)
 80020d4:	f018 fbac 	bl	801a830 <iprintf>
					}
	}

}
 80020d8:	bf00      	nop
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	200108ac 	.word	0x200108ac
 80020e4:	20010558 	.word	0x20010558
 80020e8:	200109c0 	.word	0x200109c0
 80020ec:	200105f8 	.word	0x200105f8
 80020f0:	0801e804 	.word	0x0801e804

080020f4 <ros2_stepper_speed_timer_callback>:

void ros2_stepper_speed_timer_callback(rcl_timer_t * timer, int64_t last_call_time){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d011      	beq.n	800212a <ros2_stepper_speed_timer_callback+0x36>

	ros2_stepper_speed_msg.data = stepper.speed;
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <ros2_stepper_speed_timer_callback+0x40>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	4a0b      	ldr	r2, [pc, #44]	; (8002138 <ros2_stepper_speed_timer_callback+0x44>)
 800210c:	6013      	str	r3, [r2, #0]

	// Publish the message
					rcl_ret_t ret = rcl_publish(&ros2_stepper_speed_pub, &ros2_stepper_speed_msg, NULL);
 800210e:	2200      	movs	r2, #0
 8002110:	4909      	ldr	r1, [pc, #36]	; (8002138 <ros2_stepper_speed_timer_callback+0x44>)
 8002112:	480a      	ldr	r0, [pc, #40]	; (800213c <ros2_stepper_speed_timer_callback+0x48>)
 8002114:	f00c fe4a 	bl	800edac <rcl_publish>
 8002118:	6178      	str	r0, [r7, #20]
					if (ret != RCL_RET_OK)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d004      	beq.n	800212a <ros2_stepper_speed_timer_callback+0x36>
					{
					  printf("Error publishing stepper speed (line %d)\n", __LINE__);
 8002120:	f240 3199 	movw	r1, #921	; 0x399
 8002124:	4806      	ldr	r0, [pc, #24]	; (8002140 <ros2_stepper_speed_timer_callback+0x4c>)
 8002126:	f018 fb83 	bl	801a830 <iprintf>
					}
	}
}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	2001064c 	.word	0x2001064c
 8002138:	20010a48 	.word	0x20010a48
 800213c:	20010d98 	.word	0x20010d98
 8002140:	0801e830 	.word	0x0801e830

08002144 <ros2_stepper_current_position_timer_callback>:

void ros2_stepper_current_position_timer_callback(rcl_timer_t * timer, int64_t last_call_time){
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d012      	beq.n	800217c <ros2_stepper_current_position_timer_callback+0x38>

	ros2_stepper_current_position_msg.data = stepper.currentPos;
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <ros2_stepper_current_position_timer_callback+0x40>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <ros2_stepper_current_position_timer_callback+0x44>)
 800215e:	601a      	str	r2, [r3, #0]

	// Publish the message
					rcl_ret_t ret = rcl_publish(&ros2_stepper_current_position_pub, &ros2_stepper_current_position_msg, NULL);
 8002160:	2200      	movs	r2, #0
 8002162:	4909      	ldr	r1, [pc, #36]	; (8002188 <ros2_stepper_current_position_timer_callback+0x44>)
 8002164:	4809      	ldr	r0, [pc, #36]	; (800218c <ros2_stepper_current_position_timer_callback+0x48>)
 8002166:	f00c fe21 	bl	800edac <rcl_publish>
 800216a:	6178      	str	r0, [r7, #20]
					if (ret != RCL_RET_OK)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d004      	beq.n	800217c <ros2_stepper_current_position_timer_callback+0x38>
					{
					  printf("Error publishing stepper current position (line %d)\n", __LINE__);
 8002172:	f240 31a7 	movw	r1, #935	; 0x3a7
 8002176:	4806      	ldr	r0, [pc, #24]	; (8002190 <ros2_stepper_current_position_timer_callback+0x4c>)
 8002178:	f018 fb5a 	bl	801a830 <iprintf>
					}
	}
}
 800217c:	bf00      	nop
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	2001064c 	.word	0x2001064c
 8002188:	200109dc 	.word	0x200109dc
 800218c:	2001085c 	.word	0x2001085c
 8002190:	0801e85c 	.word	0x0801e85c

08002194 <ros2_stepper_target_position_callback>:




void ros2_stepper_target_position_callback(const void * msgin){
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__UInt32 *stepper_target_position_msg;

		if (msgin != NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00b      	beq.n	80021ba <ros2_stepper_target_position_callback+0x26>
		{


			stepper_target_position_msg = (const std_msgs__msg__UInt32 *)msgin;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	60fb      	str	r3, [r7, #12]

			ros_cmd.stepper_target_position = stepper_target_position_msg->data;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a06      	ldr	r2, [pc, #24]	; (80021c4 <ros2_stepper_target_position_callback+0x30>)
 80021ac:	6013      	str	r3, [r2, #0]

			osThreadFlagsSet(task_mainHandle, TF_MAIN_ROS_CMD);
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <ros2_stepper_target_position_callback+0x34>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2101      	movs	r1, #1
 80021b4:	4618      	mov	r0, r3
 80021b6:	f008 ffef 	bl	800b198 <osThreadFlagsSet>

		}
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200105fc 	.word	0x200105fc
 80021c8:	200108fc 	.word	0x200108fc

080021cc <ros2_gpio_output_callback>:

void ros2_gpio_output_callback(const void * msgin)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

	const std_msgs__msg__UInt32 *gpio_output_msg;
	int32_t data = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
	if (msgin != NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <ros2_gpio_output_callback+0x2e>
	{



		gpio_output_msg = (const std_msgs__msg__UInt32 *)msgin;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	60bb      	str	r3, [r7, #8]
		data = gpio_output_msg->data;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	60fb      	str	r3, [r7, #12]

		ros_cmd.digital_output = data;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4a06      	ldr	r2, [pc, #24]	; (8002204 <ros2_gpio_output_callback+0x38>)
 80021ec:	6053      	str	r3, [r2, #4]
		osThreadFlagsSet(task_mainHandle, TF_MAIN_ROS_CMD);
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <ros2_gpio_output_callback+0x3c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2101      	movs	r1, #1
 80021f4:	4618      	mov	r0, r3
 80021f6:	f008 ffcf 	bl	800b198 <osThreadFlagsSet>




	}
}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200105fc 	.word	0x200105fc
 8002208:	200108fc 	.word	0x200108fc

0800220c <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
if (huart->Instance == USART3){
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a12      	ldr	r2, [pc, #72]	; (8002264 <HAL_UART_RxCpltCallback+0x58>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d11e      	bne.n	800225c <HAL_UART_RxCpltCallback+0x50>
	if ((uart_gps_rx != '\n') && gps_buffer_index < sizeof(gps_buffer)){
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_UART_RxCpltCallback+0x5c>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b0a      	cmp	r3, #10
 8002224:	d00b      	beq.n	800223e <HAL_UART_RxCpltCallback+0x32>
		gps_buffer[gps_buffer_index++] = uart_gps_rx;
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_UART_RxCpltCallback+0x60>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	b2d1      	uxtb	r1, r2
 800222e:	4a0f      	ldr	r2, [pc, #60]	; (800226c <HAL_UART_RxCpltCallback+0x60>)
 8002230:	7011      	strb	r1, [r2, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <HAL_UART_RxCpltCallback+0x5c>)
 8002236:	7819      	ldrb	r1, [r3, #0]
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <HAL_UART_RxCpltCallback+0x64>)
 800223a:	5499      	strb	r1, [r3, r2]
 800223c:	e005      	b.n	800224a <HAL_UART_RxCpltCallback+0x3e>
	} else {
		osThreadFlagsSet(task_gpsHandle, TF_GPS_DATA);
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_UART_RxCpltCallback+0x68>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2101      	movs	r1, #1
 8002244:	4618      	mov	r0, r3
 8002246:	f008 ffa7 	bl	800b198 <osThreadFlagsSet>
	}

	status = HAL_UART_Receive_IT(&huart3, &uart_gps_rx, 1);
 800224a:	2201      	movs	r2, #1
 800224c:	4906      	ldr	r1, [pc, #24]	; (8002268 <HAL_UART_RxCpltCallback+0x5c>)
 800224e:	480a      	ldr	r0, [pc, #40]	; (8002278 <HAL_UART_RxCpltCallback+0x6c>)
 8002250:	f007 f8e5 	bl	800941e <HAL_UART_Receive_IT>
 8002254:	4603      	mov	r3, r0
 8002256:	461a      	mov	r2, r3
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <HAL_UART_RxCpltCallback+0x70>)
 800225a:	701a      	strb	r2, [r3, #0]

}
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40004800 	.word	0x40004800
 8002268:	200080fd 	.word	0x200080fd
 800226c:	200080fc 	.word	0x200080fc
 8002270:	200106d0 	.word	0x200106d0
 8002274:	2001058c 	.word	0x2001058c
 8002278:	20010608 	.word	0x20010608
 800227c:	20010de4 	.word	0x20010de4

08002280 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a14      	ldr	r2, [pc, #80]	; (80022e0 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d121      	bne.n	80022d6 <HAL_TIM_PWM_PulseFinishedCallback+0x56>
		if (stepper.direction == DIRECTION_CW) {
 8002292:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8002294:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002298:	2b01      	cmp	r3, #1
 800229a:	d10b      	bne.n	80022b4 <HAL_TIM_PWM_PulseFinishedCallback+0x34>
			stepper.currentPos++;
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3301      	adds	r3, #1
 80022a2:	4a10      	ldr	r2, [pc, #64]	; (80022e4 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 80022a4:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(STEPPER_DIR_GPIO_Port, STEPPER_DIR_Pin, GPIO_PIN_SET);
 80022a6:	2201      	movs	r2, #1
 80022a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ac:	480e      	ldr	r0, [pc, #56]	; (80022e8 <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 80022ae:	f003 f845 	bl	800533c <HAL_GPIO_WritePin>
 80022b2:	e00a      	b.n	80022ca <HAL_TIM_PWM_PulseFinishedCallback+0x4a>
		} else {
			stepper.currentPos--;
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	3b01      	subs	r3, #1
 80022ba:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 80022bc:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(STEPPER_DIR_GPIO_Port, STEPPER_DIR_Pin, GPIO_PIN_RESET);
 80022be:	2200      	movs	r2, #0
 80022c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022c4:	4808      	ldr	r0, [pc, #32]	; (80022e8 <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 80022c6:	f003 f839 	bl	800533c <HAL_GPIO_WritePin>
		}
		osThreadFlagsSet(task_stepperHandle, TF_STEPPER_INT);
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2101      	movs	r1, #1
 80022d0:	4618      	mov	r0, r3
 80022d2:	f008 ff61 	bl	800b198 <osThreadFlagsSet>

	}
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40000400 	.word	0x40000400
 80022e4:	2001064c 	.word	0x2001064c
 80022e8:	40021000 	.word	0x40021000
 80022ec:	20010858 	.word	0x20010858

080022f0 <updateDigitalOuputs>:

void updateDigitalOuputs(uint32_t digital_output){
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, (digital_output & 0x0001)>> 0);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002308:	4809      	ldr	r0, [pc, #36]	; (8002330 <updateDigitalOuputs+0x40>)
 800230a:	f003 f817 	bl	800533c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, (digital_output & 0x0002)>> 1);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	085b      	lsrs	r3, r3, #1
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002320:	4803      	ldr	r0, [pc, #12]	; (8002330 <updateDigitalOuputs+0x40>)
 8002322:	f003 f80b 	bl	800533c <HAL_GPIO_WritePin>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40020c00 	.word	0x40020c00
 8002334:	00000000 	.word	0x00000000

08002338 <task_ros2_function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_ros2_function */
void task_ros2_function(void *argument)
{
 8002338:	b5b0      	push	{r4, r5, r7, lr}
 800233a:	b0d2      	sub	sp, #328	; 0x148
 800233c:	af02      	add	r7, sp, #8
 800233e:	f107 031c 	add.w	r3, r7, #28
 8002342:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	// micro-ROS configuration
	  rmw_uros_set_custom_transport(
 8002344:	4b7c      	ldr	r3, [pc, #496]	; (8002538 <task_ros2_function+0x200>)
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	4b7c      	ldr	r3, [pc, #496]	; (800253c <task_ros2_function+0x204>)
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	4b7c      	ldr	r3, [pc, #496]	; (8002540 <task_ros2_function+0x208>)
 800234e:	4a7d      	ldr	r2, [pc, #500]	; (8002544 <task_ros2_function+0x20c>)
 8002350:	497d      	ldr	r1, [pc, #500]	; (8002548 <task_ros2_function+0x210>)
 8002352:	2001      	movs	r0, #1
 8002354:	f00d fefa 	bl	801014c <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002358:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800235c:	4618      	mov	r0, r3
 800235e:	f00d fb77 	bl	800fa50 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8002362:	4b7a      	ldr	r3, [pc, #488]	; (800254c <task_ros2_function+0x214>)
 8002364:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8002368:	4b79      	ldr	r3, [pc, #484]	; (8002550 <task_ros2_function+0x218>)
 800236a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  freeRTOS_allocator.reallocate = microros_reallocate;
 800236e:	4b79      	ldr	r3, [pc, #484]	; (8002554 <task_ros2_function+0x21c>)
 8002370:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002374:	4b78      	ldr	r3, [pc, #480]	; (8002558 <task_ros2_function+0x220>)
 8002376:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800237a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800237e:	4618      	mov	r0, r3
 8002380:	f00d fb74 	bl	800fa6c <rcutils_set_default_allocator>
 8002384:	4603      	mov	r3, r0
 8002386:	f083 0301 	eor.w	r3, r3, #1
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d004      	beq.n	800239a <task_ros2_function+0x62>
		  printf("Error on default allocators (line %d)\n", __LINE__);
 8002390:	f240 4112 	movw	r1, #1042	; 0x412
 8002394:	4871      	ldr	r0, [pc, #452]	; (800255c <task_ros2_function+0x224>)
 8002396:	f018 fa4b 	bl	801a830 <iprintf>
	  rcl_allocator_t allocator;
	  rcl_node_t node;
	  rclc_executor_t executor;
	  rcl_init_options_t init_options;

	  allocator = rcl_get_default_allocator();
 800239a:	463b      	mov	r3, r7
 800239c:	4618      	mov	r0, r3
 800239e:	f00d fb85 	bl	800faac <rcutils_get_default_allocator>
 80023a2:	463b      	mov	r3, r7
 80023a4:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 80023a8:	461d      	mov	r5, r3
 80023aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ae:	682b      	ldr	r3, [r5, #0]
 80023b0:	6023      	str	r3, [r4, #0]
	  init_options = rcl_get_zero_initialized_init_options();
 80023b2:	f00c fa7b 	bl	800e8ac <rcl_get_zero_initialized_init_options>
 80023b6:	4602      	mov	r2, r0
 80023b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023bc:	601a      	str	r2, [r3, #0]
	  rcl_init_options_init(&init_options, allocator);
 80023be:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80023c2:	466a      	mov	r2, sp
 80023c4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80023c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023cc:	e882 0003 	stmia.w	r2, {r0, r1}
 80023d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d6:	4620      	mov	r0, r4
 80023d8:	f00c fa6a 	bl	800e8b0 <rcl_init_options_init>

	  // create init_options
	  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 80023dc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80023e0:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80023e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	4613      	mov	r3, r2
 80023ec:	2200      	movs	r2, #0
 80023ee:	2100      	movs	r1, #0
 80023f0:	f00d fa24 	bl	800f83c <rclc_support_init_with_options>

	  // create node
	  rcl_node_options_t node_ops = rcl_node_get_default_options();
 80023f4:	f107 0320 	add.w	r3, r7, #32
 80023f8:	4618      	mov	r0, r3
 80023fa:	f00c fb7f 	bl	800eafc <rcl_node_get_default_options>
	  node_ops.domain_id = 25;
 80023fe:	f107 0320 	add.w	r3, r7, #32
 8002402:	2219      	movs	r2, #25
 8002404:	601a      	str	r2, [r3, #0]
	  rclc_node_init_with_options(&node, "acquisition_system", "", &support, &node_ops);
 8002406:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800240a:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 800240e:	f107 0320 	add.w	r3, r7, #32
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	4613      	mov	r3, r2
 8002416:	4a52      	ldr	r2, [pc, #328]	; (8002560 <task_ros2_function+0x228>)
 8002418:	4952      	ldr	r1, [pc, #328]	; (8002564 <task_ros2_function+0x22c>)
 800241a:	f00d fa4d 	bl	800f8b8 <rclc_node_init_with_options>


	  //time sync
	  if( rmw_uros_sync_session(1000) != RMW_RET_OK)
 800241e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002422:	f00e fd49 	bl	8010eb8 <rmw_uros_sync_session>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <task_ros2_function+0xfe>
		  printf("Error on time sync (line %d)\n", __LINE__);
 800242c:	f240 412c 	movw	r1, #1068	; 0x42c
 8002430:	484d      	ldr	r0, [pc, #308]	; (8002568 <task_ros2_function+0x230>)
 8002432:	f018 f9fd 	bl	801a830 <iprintf>


	  //create gpio_output_sub
	  ros2_gpio_output_sub = rcl_get_zero_initialized_subscription();
 8002436:	f00c fcdd 	bl	800edf4 <rcl_get_zero_initialized_subscription>
 800243a:	4603      	mov	r3, r0
 800243c:	4a4b      	ldr	r2, [pc, #300]	; (800256c <task_ros2_function+0x234>)
 800243e:	6013      	str	r3, [r2, #0]
	  rclc_subscription_init_best_effort(
 8002440:	f00f f9fa 	bl	8011838 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt32>
 8002444:	4602      	mov	r2, r0
 8002446:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800244a:	4b49      	ldr	r3, [pc, #292]	; (8002570 <task_ros2_function+0x238>)
 800244c:	4847      	ldr	r0, [pc, #284]	; (800256c <task_ros2_function+0x234>)
 800244e:	f00d fa95 	bl	800f97c <rclc_subscription_init_best_effort>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt32),
			  "/gpio_output");

	  //create stepper_target_positoin_sub
	  ros2_stepper_target_position_sub = rcl_get_zero_initialized_subscription();
 8002452:	f00c fccf 	bl	800edf4 <rcl_get_zero_initialized_subscription>
 8002456:	4603      	mov	r3, r0
 8002458:	4a46      	ldr	r2, [pc, #280]	; (8002574 <task_ros2_function+0x23c>)
 800245a:	6013      	str	r3, [r2, #0]
	 	  rclc_subscription_init_best_effort(
 800245c:	f00f f9ec 	bl	8011838 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt32>
 8002460:	4602      	mov	r2, r0
 8002462:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002466:	4b44      	ldr	r3, [pc, #272]	; (8002578 <task_ros2_function+0x240>)
 8002468:	4842      	ldr	r0, [pc, #264]	; (8002574 <task_ros2_function+0x23c>)
 800246a:	f00d fa87 	bl	800f97c <rclc_subscription_init_best_effort>
	 			  "/stepper_target_position");



	  // gpio_input pub
	  rclc_publisher_init_default(
 800246e:	f00f f9e3 	bl	8011838 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt32>
 8002472:	4602      	mov	r2, r0
 8002474:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002478:	4b40      	ldr	r3, [pc, #256]	; (800257c <task_ros2_function+0x244>)
 800247a:	4841      	ldr	r0, [pc, #260]	; (8002580 <task_ros2_function+0x248>)
 800247c:	f00d fa4a 	bl	800f914 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt32),
			  "/gpio_input");

	  // gps_pub
	  rclc_publisher_init_default(
 8002480:	f00f f83e 	bl	8011500 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>
 8002484:	4602      	mov	r2, r0
 8002486:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800248a:	4b3e      	ldr	r3, [pc, #248]	; (8002584 <task_ros2_function+0x24c>)
 800248c:	483e      	ldr	r0, [pc, #248]	; (8002588 <task_ros2_function+0x250>)
 800248e:	f00d fa41 	bl	800f914 <rclc_publisher_init_default>
	  			  &ros2_gps_pub,
	  			  &node,
	  			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, NavSatFix),
	  			  "/gps");

	  rclc_publisher_init_default(
 8002492:	f00f f9cf 	bl	8011834 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>
 8002496:	4602      	mov	r2, r0
 8002498:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800249c:	4b3b      	ldr	r3, [pc, #236]	; (800258c <task_ros2_function+0x254>)
 800249e:	483c      	ldr	r0, [pc, #240]	; (8002590 <task_ros2_function+0x258>)
 80024a0:	f00d fa38 	bl	800f914 <rclc_publisher_init_default>
	  			  &node,
	  			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt16MultiArray),
	  			  "/analog_input");


	  rclc_publisher_init_default(
 80024a4:	f00f f9c8 	bl	8011838 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt32>
 80024a8:	4602      	mov	r2, r0
 80024aa:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80024ae:	4b39      	ldr	r3, [pc, #228]	; (8002594 <task_ros2_function+0x25c>)
 80024b0:	4839      	ldr	r0, [pc, #228]	; (8002598 <task_ros2_function+0x260>)
 80024b2:	f00d fa2f 	bl	800f914 <rclc_publisher_init_default>
	  	  			  &ros2_stepper_current_position_pub,
	  	  			  &node,
	  	  			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt32),
	  	  			  "/stepper_current_position");

	  rclc_publisher_init_default(
 80024b6:	f00f f9bb 	bl	8011830 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 80024ba:	4602      	mov	r2, r0
 80024bc:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80024c0:	4b36      	ldr	r3, [pc, #216]	; (800259c <task_ros2_function+0x264>)
 80024c2:	4837      	ldr	r0, [pc, #220]	; (80025a0 <task_ros2_function+0x268>)
 80024c4:	f00d fa26 	bl	800f914 <rclc_publisher_init_default>
		  	  			  &node,
		  	  			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
		  	  			  "/stepper_speed");

	  // gps memmory allocation
	  ros2_gps_msg.header.frame_id.capacity = 20;
 80024c8:	4b36      	ldr	r3, [pc, #216]	; (80025a4 <task_ros2_function+0x26c>)
 80024ca:	2214      	movs	r2, #20
 80024cc:	611a      	str	r2, [r3, #16]
	  ros2_gps_msg.header.frame_id.data = (char*) pvPortMalloc(ros2_gps_msg.header.frame_id.capacity  * sizeof(char));
 80024ce:	4b35      	ldr	r3, [pc, #212]	; (80025a4 <task_ros2_function+0x26c>)
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f00c f800 	bl	800e4d8 <pvPortMalloc>
 80024d8:	4603      	mov	r3, r0
 80024da:	4a32      	ldr	r2, [pc, #200]	; (80025a4 <task_ros2_function+0x26c>)
 80024dc:	6093      	str	r3, [r2, #8]
	  ros2_gps_msg.header.frame_id.size = strlen(ros2_gps_msg.header.frame_id.data);
 80024de:	4b31      	ldr	r3, [pc, #196]	; (80025a4 <task_ros2_function+0x26c>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fd fe7e 	bl	80001e4 <strlen>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4a2e      	ldr	r2, [pc, #184]	; (80025a4 <task_ros2_function+0x26c>)
 80024ec:	60d3      	str	r3, [r2, #12]


	  // analog input allocation
	  ros2_analog_input_msg.data.capacity = 2;
 80024ee:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <task_ros2_function+0x270>)
 80024f0:	2202      	movs	r2, #2
 80024f2:	619a      	str	r2, [r3, #24]
	  ros2_analog_input_msg.data.size = 2;
 80024f4:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <task_ros2_function+0x270>)
 80024f6:	2202      	movs	r2, #2
 80024f8:	615a      	str	r2, [r3, #20]
	  ros2_analog_input_msg.data.data = (uint16_t*) pvPortMalloc(ros2_analog_input_msg.data.capacity * sizeof(uint16_t));
 80024fa:	4b2b      	ldr	r3, [pc, #172]	; (80025a8 <task_ros2_function+0x270>)
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4618      	mov	r0, r3
 8002502:	f00b ffe9 	bl	800e4d8 <pvPortMalloc>
 8002506:	4603      	mov	r3, r0
 8002508:	4a27      	ldr	r2, [pc, #156]	; (80025a8 <task_ros2_function+0x270>)
 800250a:	6113      	str	r3, [r2, #16]
	  ros2_analog_input_msg.layout.dim.capacity = 2;
 800250c:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <task_ros2_function+0x270>)
 800250e:	2202      	movs	r2, #2
 8002510:	609a      	str	r2, [r3, #8]
	  ros2_analog_input_msg.layout.dim.size = 2;
 8002512:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <task_ros2_function+0x270>)
 8002514:	2202      	movs	r2, #2
 8002516:	605a      	str	r2, [r3, #4]
	  ros2_analog_input_msg.layout.dim.data = (std_msgs__msg__MultiArrayDimension*) pvPortMalloc(ros2_analog_input_msg.layout.dim.capacity * sizeof(std_msgs__msg__MultiArrayDimension));
 8002518:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <task_ros2_function+0x270>)
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4618      	mov	r0, r3
 8002526:	f00b ffd7 	bl	800e4d8 <pvPortMalloc>
 800252a:	4603      	mov	r3, r0
 800252c:	4a1e      	ldr	r2, [pc, #120]	; (80025a8 <task_ros2_function+0x270>)
 800252e:	6013      	str	r3, [r2, #0]
	  for (size_t i =0; i< ros2_analog_input_msg.layout.dim.capacity; i++){
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002536:	e06b      	b.n	8002610 <task_ros2_function+0x2d8>
 8002538:	0800160d 	.word	0x0800160d
 800253c:	080015a5 	.word	0x080015a5
 8002540:	08001585 	.word	0x08001585
 8002544:	08001559 	.word	0x08001559
 8002548:	20010d50 	.word	0x20010d50
 800254c:	08002a35 	.word	0x08002a35
 8002550:	08002a79 	.word	0x08002a79
 8002554:	08002ab1 	.word	0x08002ab1
 8002558:	08002b1d 	.word	0x08002b1d
 800255c:	0801e894 	.word	0x0801e894
 8002560:	0801e8bc 	.word	0x0801e8bc
 8002564:	0801e8c0 	.word	0x0801e8c0
 8002568:	0801e8d4 	.word	0x0801e8d4
 800256c:	20010590 	.word	0x20010590
 8002570:	0801e8f4 	.word	0x0801e8f4
 8002574:	20010588 	.word	0x20010588
 8002578:	0801e904 	.word	0x0801e904
 800257c:	0801e920 	.word	0x0801e920
 8002580:	200109e0 	.word	0x200109e0
 8002584:	0801e92c 	.word	0x0801e92c
 8002588:	20010d94 	.word	0x20010d94
 800258c:	0801e934 	.word	0x0801e934
 8002590:	200105f8 	.word	0x200105f8
 8002594:	0801e944 	.word	0x0801e944
 8002598:	2001085c 	.word	0x2001085c
 800259c:	0801e960 	.word	0x0801e960
 80025a0:	20010d98 	.word	0x20010d98
 80025a4:	200107d0 	.word	0x200107d0
 80025a8:	200109c0 	.word	0x200109c0
		  ros2_analog_input_msg.layout.dim.data[i].label.capacity = 20;
 80025ac:	4b66      	ldr	r3, [pc, #408]	; (8002748 <task_ros2_function+0x410>)
 80025ae:	6819      	ldr	r1, [r3, #0]
 80025b0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	2214      	movs	r2, #20
 80025c0:	609a      	str	r2, [r3, #8]
		  ros2_analog_input_msg.layout.dim.data[i].label.size = 10;
 80025c2:	4b61      	ldr	r3, [pc, #388]	; (8002748 <task_ros2_function+0x410>)
 80025c4:	6819      	ldr	r1, [r3, #0]
 80025c6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	220a      	movs	r2, #10
 80025d6:	605a      	str	r2, [r3, #4]
		  ros2_analog_input_msg.layout.dim.data[i].label.data = (char*) pvPortMalloc(ros2_analog_input_msg.layout.dim.data[i].label.capacity * sizeof(char));
 80025d8:	4b5b      	ldr	r3, [pc, #364]	; (8002748 <task_ros2_function+0x410>)
 80025da:	6819      	ldr	r1, [r3, #0]
 80025dc:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	6898      	ldr	r0, [r3, #8]
 80025ec:	4b56      	ldr	r3, [pc, #344]	; (8002748 <task_ros2_function+0x410>)
 80025ee:	6819      	ldr	r1, [r3, #0]
 80025f0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	18cc      	adds	r4, r1, r3
 80025fe:	f00b ff6b 	bl	800e4d8 <pvPortMalloc>
 8002602:	4603      	mov	r3, r0
 8002604:	6023      	str	r3, [r4, #0]
	  for (size_t i =0; i< ros2_analog_input_msg.layout.dim.capacity; i++){
 8002606:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800260a:	3301      	adds	r3, #1
 800260c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002610:	4b4d      	ldr	r3, [pc, #308]	; (8002748 <task_ros2_function+0x410>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002618:	429a      	cmp	r2, r3
 800261a:	d3c7      	bcc.n	80025ac <task_ros2_function+0x274>

	  }
	  strcpy(ros2_analog_input_msg.layout.dim.data[0].label.data, "Analog 1");
 800261c:	4b4a      	ldr	r3, [pc, #296]	; (8002748 <task_ros2_function+0x410>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	494a      	ldr	r1, [pc, #296]	; (800274c <task_ros2_function+0x414>)
 8002624:	461a      	mov	r2, r3
 8002626:	460b      	mov	r3, r1
 8002628:	cb03      	ldmia	r3!, {r0, r1}
 800262a:	6010      	str	r0, [r2, #0]
 800262c:	6051      	str	r1, [r2, #4]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	7213      	strb	r3, [r2, #8]
	  strcpy(ros2_analog_input_msg.layout.dim.data[1].label.data, "Analog 2");
 8002632:	4b45      	ldr	r3, [pc, #276]	; (8002748 <task_ros2_function+0x410>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	3314      	adds	r3, #20
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4945      	ldr	r1, [pc, #276]	; (8002750 <task_ros2_function+0x418>)
 800263c:	461a      	mov	r2, r3
 800263e:	460b      	mov	r3, r1
 8002640:	cb03      	ldmia	r3!, {r0, r1}
 8002642:	6010      	str	r0, [r2, #0]
 8002644:	6051      	str	r1, [r2, #4]
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	7213      	strb	r3, [r2, #8]


	  // Create a timer
	  rclc_timer_init_default(&ros2_gpio_input_timer, &support, RCL_MS_TO_NS(100), ros2_gpio_input_timer_callback);
 800264a:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800264e:	4b41      	ldr	r3, [pc, #260]	; (8002754 <task_ros2_function+0x41c>)
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	a339      	add	r3, pc, #228	; (adr r3, 8002738 <task_ros2_function+0x400>)
 8002654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002658:	483f      	ldr	r0, [pc, #252]	; (8002758 <task_ros2_function+0x420>)
 800265a:	f00d f9c3 	bl	800f9e4 <rclc_timer_init_default>
	  rclc_timer_init_default(&ros2_gps_timer, &support, RCL_MS_TO_NS(1000), ros2_gps_timer_callback);
 800265e:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8002662:	4b3e      	ldr	r3, [pc, #248]	; (800275c <task_ros2_function+0x424>)
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	a336      	add	r3, pc, #216	; (adr r3, 8002740 <task_ros2_function+0x408>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	483c      	ldr	r0, [pc, #240]	; (8002760 <task_ros2_function+0x428>)
 800266e:	f00d f9b9 	bl	800f9e4 <rclc_timer_init_default>
	  rclc_timer_init_default(&ros2_analog_input_timer, &support, RCL_MS_TO_NS(100), ros2_analog_input_timer_callback);
 8002672:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <task_ros2_function+0x42c>)
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	a32f      	add	r3, pc, #188	; (adr r3, 8002738 <task_ros2_function+0x400>)
 800267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002680:	4839      	ldr	r0, [pc, #228]	; (8002768 <task_ros2_function+0x430>)
 8002682:	f00d f9af 	bl	800f9e4 <rclc_timer_init_default>
	  rclc_timer_init_default(&ros2_stepper_current_position_timer, &support, RCL_MS_TO_NS(100), ros2_stepper_current_position_timer_callback);
 8002686:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800268a:	4b38      	ldr	r3, [pc, #224]	; (800276c <task_ros2_function+0x434>)
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	a32a      	add	r3, pc, #168	; (adr r3, 8002738 <task_ros2_function+0x400>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	4836      	ldr	r0, [pc, #216]	; (8002770 <task_ros2_function+0x438>)
 8002696:	f00d f9a5 	bl	800f9e4 <rclc_timer_init_default>
	  rclc_timer_init_default(&ros2_stepper_speed_timer, &support, RCL_MS_TO_NS(100), ros2_stepper_speed_timer_callback);
 800269a:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800269e:	4b35      	ldr	r3, [pc, #212]	; (8002774 <task_ros2_function+0x43c>)
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	a325      	add	r3, pc, #148	; (adr r3, 8002738 <task_ros2_function+0x400>)
 80026a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a8:	4833      	ldr	r0, [pc, #204]	; (8002778 <task_ros2_function+0x440>)
 80026aa:	f00d f99b 	bl	800f9e4 <rclc_timer_init_default>


	  // Create executor
	  rclc_executor_init(&executor, &support.context, 7, &allocator);
 80026ae:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80026b2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026b6:	f103 0108 	add.w	r1, r3, #8
 80026ba:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80026be:	4613      	mov	r3, r2
 80026c0:	2207      	movs	r2, #7
 80026c2:	f00c fe49 	bl	800f358 <rclc_executor_init>

	  rclc_executor_add_subscription(&executor, &ros2_gpio_output_sub, &ros2_gpio_output_msg,
 80026c6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80026ca:	2300      	movs	r3, #0
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	4b2b      	ldr	r3, [pc, #172]	; (800277c <task_ros2_function+0x444>)
 80026d0:	4a2b      	ldr	r2, [pc, #172]	; (8002780 <task_ros2_function+0x448>)
 80026d2:	492c      	ldr	r1, [pc, #176]	; (8002784 <task_ros2_function+0x44c>)
 80026d4:	f00c feb4 	bl	800f440 <rclc_executor_add_subscription>
	  			  &ros2_gpio_output_callback, ON_NEW_DATA); // ON_NEW_DATA does not work properly
	  rclc_executor_add_subscription(&executor, &ros2_stepper_target_position_sub, &ros2_stepper_target_position_msg,
 80026d8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80026dc:	2300      	movs	r3, #0
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	4b29      	ldr	r3, [pc, #164]	; (8002788 <task_ros2_function+0x450>)
 80026e2:	4a2a      	ldr	r2, [pc, #168]	; (800278c <task_ros2_function+0x454>)
 80026e4:	492a      	ldr	r1, [pc, #168]	; (8002790 <task_ros2_function+0x458>)
 80026e6:	f00c feab 	bl	800f440 <rclc_executor_add_subscription>
	 	  			  &ros2_stepper_target_position_callback, ON_NEW_DATA); // ON_NEW_DATA does not work properly

	  rclc_executor_add_timer(&executor, &ros2_gpio_input_timer);
 80026ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026ee:	491a      	ldr	r1, [pc, #104]	; (8002758 <task_ros2_function+0x420>)
 80026f0:	4618      	mov	r0, r3
 80026f2:	f00c fedf 	bl	800f4b4 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &ros2_gps_timer);
 80026f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026fa:	4919      	ldr	r1, [pc, #100]	; (8002760 <task_ros2_function+0x428>)
 80026fc:	4618      	mov	r0, r3
 80026fe:	f00c fed9 	bl	800f4b4 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &ros2_analog_input_timer);
 8002702:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002706:	4918      	ldr	r1, [pc, #96]	; (8002768 <task_ros2_function+0x430>)
 8002708:	4618      	mov	r0, r3
 800270a:	f00c fed3 	bl	800f4b4 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &ros2_stepper_speed_timer);
 800270e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002712:	4919      	ldr	r1, [pc, #100]	; (8002778 <task_ros2_function+0x440>)
 8002714:	4618      	mov	r0, r3
 8002716:	f00c fecd 	bl	800f4b4 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &ros2_stepper_current_position_timer);
 800271a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800271e:	4914      	ldr	r1, [pc, #80]	; (8002770 <task_ros2_function+0x438>)
 8002720:	4618      	mov	r0, r3
 8002722:	f00c fec7 	bl	800f4b4 <rclc_executor_add_timer>



	  // Run executor
	  rclc_executor_spin(&executor);
 8002726:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800272a:	4618      	mov	r0, r3
 800272c:	f00d f84c 	bl	800f7c8 <rclc_executor_spin>

	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 8002730:	2001      	movs	r0, #1
 8002732:	f008 fe00 	bl	800b336 <osDelay>
 8002736:	e7fb      	b.n	8002730 <task_ros2_function+0x3f8>
 8002738:	05f5e100 	.word	0x05f5e100
 800273c:	00000000 	.word	0x00000000
 8002740:	3b9aca00 	.word	0x3b9aca00
 8002744:	00000000 	.word	0x00000000
 8002748:	200109c0 	.word	0x200109c0
 800274c:	0801e970 	.word	0x0801e970
 8002750:	0801e97c 	.word	0x0801e97c
 8002754:	08001f89 	.word	0x08001f89
 8002758:	200109ec 	.word	0x200109ec
 800275c:	08001fd1 	.word	0x08001fd1
 8002760:	20010854 	.word	0x20010854
 8002764:	08002079 	.word	0x08002079
 8002768:	200109e8 	.word	0x200109e8
 800276c:	08002145 	.word	0x08002145
 8002770:	200106cc 	.word	0x200106cc
 8002774:	080020f5 	.word	0x080020f5
 8002778:	20010604 	.word	0x20010604
 800277c:	080021cd 	.word	0x080021cd
 8002780:	20010850 	.word	0x20010850
 8002784:	20010590 	.word	0x20010590
 8002788:	08002195 	.word	0x08002195
 800278c:	20010dec 	.word	0x20010dec
 8002790:	20010588 	.word	0x20010588

08002794 <task_gps_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_gps_function */
void task_gps_function(void *argument)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08c      	sub	sp, #48	; 0x30
 8002798:	af0a      	add	r7, sp, #40	; 0x28
 800279a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_gps_function */

  /* Infinite loop */
  for(;;)
  {
    osThreadFlagsWait(TF_GPS_DATA, osFlagsWaitAny, osWaitForever);
 800279c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027a0:	2100      	movs	r1, #0
 80027a2:	2001      	movs	r0, #1
 80027a4:	f008 fd46 	bl	800b234 <osThreadFlagsWait>
    if(sscanf(gps_buffer, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c,%f", &gps.time, &gps.latitude, &gps.ns, &gps.longitude, &gps.ew, &gps.lock, &gps.sats, &gps.hdop, &gps.altitude, &gps.unit, &gps.geoid) >= 1){
 80027a8:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <task_gps_function+0xcc>)
 80027aa:	9308      	str	r3, [sp, #32]
 80027ac:	4b2d      	ldr	r3, [pc, #180]	; (8002864 <task_gps_function+0xd0>)
 80027ae:	9307      	str	r3, [sp, #28]
 80027b0:	4b2d      	ldr	r3, [pc, #180]	; (8002868 <task_gps_function+0xd4>)
 80027b2:	9306      	str	r3, [sp, #24]
 80027b4:	4b2d      	ldr	r3, [pc, #180]	; (800286c <task_gps_function+0xd8>)
 80027b6:	9305      	str	r3, [sp, #20]
 80027b8:	4b2d      	ldr	r3, [pc, #180]	; (8002870 <task_gps_function+0xdc>)
 80027ba:	9304      	str	r3, [sp, #16]
 80027bc:	4b2d      	ldr	r3, [pc, #180]	; (8002874 <task_gps_function+0xe0>)
 80027be:	9303      	str	r3, [sp, #12]
 80027c0:	4b2d      	ldr	r3, [pc, #180]	; (8002878 <task_gps_function+0xe4>)
 80027c2:	9302      	str	r3, [sp, #8]
 80027c4:	4b2d      	ldr	r3, [pc, #180]	; (800287c <task_gps_function+0xe8>)
 80027c6:	9301      	str	r3, [sp, #4]
 80027c8:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <task_gps_function+0xec>)
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <task_gps_function+0xf0>)
 80027ce:	4a2e      	ldr	r2, [pc, #184]	; (8002888 <task_gps_function+0xf4>)
 80027d0:	492e      	ldr	r1, [pc, #184]	; (800288c <task_gps_function+0xf8>)
 80027d2:	482f      	ldr	r0, [pc, #188]	; (8002890 <task_gps_function+0xfc>)
 80027d4:	f018 f924 	bl	801aa20 <siscanf>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	dd36      	ble.n	800284c <task_gps_function+0xb8>
    	gps.latitude = (float) convertDegMinToDecDeg(gps.latitude);
 80027de:	4b2a      	ldr	r3, [pc, #168]	; (8002888 <task_gps_function+0xf4>)
 80027e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80027e4:	eeb0 0a67 	vmov.f32	s0, s15
 80027e8:	f7ff fb7a 	bl	8001ee0 <convertDegMinToDecDeg>
 80027ec:	ec53 2b10 	vmov	r2, r3, d0
 80027f0:	4610      	mov	r0, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	f7fe fa08 	bl	8000c08 <__aeabi_d2f>
 80027f8:	4603      	mov	r3, r0
 80027fa:	4a23      	ldr	r2, [pc, #140]	; (8002888 <task_gps_function+0xf4>)
 80027fc:	6053      	str	r3, [r2, #4]
    	gps.longitude = (float) convertDegMinToDecDeg(gps.longitude);
 80027fe:	4b22      	ldr	r3, [pc, #136]	; (8002888 <task_gps_function+0xf4>)
 8002800:	edd3 7a02 	vldr	s15, [r3, #8]
 8002804:	eeb0 0a67 	vmov.f32	s0, s15
 8002808:	f7ff fb6a 	bl	8001ee0 <convertDegMinToDecDeg>
 800280c:	ec53 2b10 	vmov	r2, r3, d0
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	f7fe f9f8 	bl	8000c08 <__aeabi_d2f>
 8002818:	4603      	mov	r3, r0
 800281a:	4a1b      	ldr	r2, [pc, #108]	; (8002888 <task_gps_function+0xf4>)
 800281c:	6093      	str	r3, [r2, #8]
    	if (gps.ns == 'S') {
 800281e:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <task_gps_function+0xf4>)
 8002820:	7e1b      	ldrb	r3, [r3, #24]
 8002822:	2b53      	cmp	r3, #83	; 0x53
 8002824:	d107      	bne.n	8002836 <task_gps_function+0xa2>
    		gps.latitude = - gps.latitude;
 8002826:	4b18      	ldr	r3, [pc, #96]	; (8002888 <task_gps_function+0xf4>)
 8002828:	edd3 7a01 	vldr	s15, [r3, #4]
 800282c:	eef1 7a67 	vneg.f32	s15, s15
 8002830:	4b15      	ldr	r3, [pc, #84]	; (8002888 <task_gps_function+0xf4>)
 8002832:	edc3 7a01 	vstr	s15, [r3, #4]
    	}
    	if (gps.ew = 'W'){
 8002836:	4b14      	ldr	r3, [pc, #80]	; (8002888 <task_gps_function+0xf4>)
 8002838:	2257      	movs	r2, #87	; 0x57
 800283a:	765a      	strb	r2, [r3, #25]
    		gps.longitude = - gps.longitude;
 800283c:	4b12      	ldr	r3, [pc, #72]	; (8002888 <task_gps_function+0xf4>)
 800283e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002842:	eef1 7a67 	vneg.f32	s15, s15
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <task_gps_function+0xf4>)
 8002848:	edc3 7a02 	vstr	s15, [r3, #8]
    	}
    }
    gps_buffer_index = 0;
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <task_gps_function+0x100>)
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
    memset(gps_buffer, 0, sizeof(gps_buffer));
 8002852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002856:	2100      	movs	r1, #0
 8002858:	480d      	ldr	r0, [pc, #52]	; (8002890 <task_gps_function+0xfc>)
 800285a:	f017 fd17 	bl	801a28c <memset>
    osThreadFlagsWait(TF_GPS_DATA, osFlagsWaitAny, osWaitForever);
 800285e:	e79d      	b.n	800279c <task_gps_function+0x8>
 8002860:	20010578 	.word	0x20010578
 8002864:	2001057e 	.word	0x2001057e
 8002868:	20010574 	.word	0x20010574
 800286c:	20010570 	.word	0x20010570
 8002870:	20010584 	.word	0x20010584
 8002874:	20010580 	.word	0x20010580
 8002878:	2001057d 	.word	0x2001057d
 800287c:	2001056c 	.word	0x2001056c
 8002880:	2001057c 	.word	0x2001057c
 8002884:	20010568 	.word	0x20010568
 8002888:	20010564 	.word	0x20010564
 800288c:	0801e988 	.word	0x0801e988
 8002890:	200106d0 	.word	0x200106d0
 8002894:	200080fc 	.word	0x200080fc

08002898 <task_stepper_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_stepper_function */
void task_stepper_function(void *argument)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_stepper_function */
	uint32_t flags;
	stepperInit(&stepper);
 80028a0:	482c      	ldr	r0, [pc, #176]	; (8002954 <task_stepper_function+0xbc>)
 80028a2:	f000 fa1b 	bl	8002cdc <stepperInit>

	stepperSetSpeed(&stepper, 1);
 80028a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80028aa:	482a      	ldr	r0, [pc, #168]	; (8002954 <task_stepper_function+0xbc>)
 80028ac:	f000 fa58 	bl	8002d60 <stepperSetSpeed>
	__HAL_TIM_SET_AUTORELOAD(&htim3, stepper.stepInverval);
 80028b0:	4b28      	ldr	r3, [pc, #160]	; (8002954 <task_stepper_function+0xbc>)
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	4b28      	ldr	r3, [pc, #160]	; (8002958 <task_stepper_function+0xc0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80028ba:	4b26      	ldr	r3, [pc, #152]	; (8002954 <task_stepper_function+0xbc>)
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	461a      	mov	r2, r3
 80028c0:	4b25      	ldr	r3, [pc, #148]	; (8002958 <task_stepper_function+0xc0>)
 80028c2:	60da      	str	r2, [r3, #12]
	stepperSetAcceleration(&stepper, 48*2*4);
 80028c4:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800295c <task_stepper_function+0xc4>
 80028c8:	4822      	ldr	r0, [pc, #136]	; (8002954 <task_stepper_function+0xbc>)
 80028ca:	f000 fb11 	bl	8002ef0 <stepperSetAcceleration>
	// Motor = 7.5°/Step, 1/4 Microstepping, speed =  2rev/s,
	stepperSetMaxSpeed(&stepper, 2*4*48);
 80028ce:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800295c <task_stepper_function+0xc4>
 80028d2:	4820      	ldr	r0, [pc, #128]	; (8002954 <task_stepper_function+0xbc>)
 80028d4:	f000 fab0 	bl	8002e38 <stepperSetMaxSpeed>
	stepperSetAbsoluteTartePosition(&stepper, 0);
 80028d8:	2100      	movs	r1, #0
 80028da:	481e      	ldr	r0, [pc, #120]	; (8002954 <task_stepper_function+0xbc>)
 80028dc:	f000 fb93 	bl	8003006 <stepperSetAbsoluteTartePosition>
	__HAL_TIM_SET_AUTORELOAD(&htim3, stepper.stepInverval);
 80028e0:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <task_stepper_function+0xbc>)
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <task_stepper_function+0xc0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80028ea:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <task_stepper_function+0xbc>)
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <task_stepper_function+0xc0>)
 80028f2:	60da      	str	r2, [r3, #12]
	 HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 80028f4:	2100      	movs	r1, #0
 80028f6:	4818      	ldr	r0, [pc, #96]	; (8002958 <task_stepper_function+0xc0>)
 80028f8:	f005 fdde 	bl	80084b8 <HAL_TIM_PWM_Start_IT>
  /* Infinite loop */
  for(;;)
  {

	  flags = osThreadFlagsWait((TF_STEPPER_INT | TF_STEPPER_DATA), osFlagsWaitAny, osWaitForever);
 80028fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002900:	2100      	movs	r1, #0
 8002902:	2003      	movs	r0, #3
 8002904:	f008 fc96 	bl	800b234 <osThreadFlagsWait>
 8002908:	60f8      	str	r0, [r7, #12]
	  if ((flags & TF_STEPPER_INT) == TF_STEPPER_INT){
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00c      	beq.n	800292e <task_stepper_function+0x96>
		  stepperComputeNewSpeed(&stepper);
 8002914:	480f      	ldr	r0, [pc, #60]	; (8002954 <task_stepper_function+0xbc>)
 8002916:	f000 fb85 	bl	8003024 <stepperComputeNewSpeed>
		  __HAL_TIM_SET_AUTORELOAD(&htim3, stepper.stepInverval);
 800291a:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <task_stepper_function+0xbc>)
 800291c:	695a      	ldr	r2, [r3, #20]
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <task_stepper_function+0xc0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	62da      	str	r2, [r3, #44]	; 0x2c
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <task_stepper_function+0xbc>)
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	461a      	mov	r2, r3
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <task_stepper_function+0xc0>)
 800292c:	60da      	str	r2, [r3, #12]
	  }

	  if ((flags & TF_STEPPER_DATA) == TF_STEPPER_DATA){
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0e1      	beq.n	80028fc <task_stepper_function+0x64>
		  stepperComputeNewSpeed(&stepper);
 8002938:	4806      	ldr	r0, [pc, #24]	; (8002954 <task_stepper_function+0xbc>)
 800293a:	f000 fb73 	bl	8003024 <stepperComputeNewSpeed>
		  __HAL_TIM_SET_AUTORELOAD(&htim3, stepper.stepInverval);
 800293e:	4b05      	ldr	r3, [pc, #20]	; (8002954 <task_stepper_function+0xbc>)
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	4b05      	ldr	r3, [pc, #20]	; (8002958 <task_stepper_function+0xc0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	62da      	str	r2, [r3, #44]	; 0x2c
 8002948:	4b02      	ldr	r3, [pc, #8]	; (8002954 <task_stepper_function+0xbc>)
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	461a      	mov	r2, r3
 800294e:	4b02      	ldr	r3, [pc, #8]	; (8002958 <task_stepper_function+0xc0>)
 8002950:	60da      	str	r2, [r3, #12]
	  flags = osThreadFlagsWait((TF_STEPPER_INT | TF_STEPPER_DATA), osFlagsWaitAny, osWaitForever);
 8002952:	e7d3      	b.n	80028fc <task_stepper_function+0x64>
 8002954:	2001064c 	.word	0x2001064c
 8002958:	20010864 	.word	0x20010864
 800295c:	43c00000 	.word	0x43c00000

08002960 <task_main_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_main_function */
void task_main_function(void *argument)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_main_function */
	uint32_t flags  = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	  flags = osThreadFlagsWait(TF_MAIN_ROS_CMD, osFlagsWaitAny, 0);
 800296c:	2200      	movs	r2, #0
 800296e:	2100      	movs	r1, #0
 8002970:	2001      	movs	r0, #1
 8002972:	f008 fc5f 	bl	800b234 <osThreadFlagsWait>
 8002976:	60f8      	str	r0, [r7, #12]
	  if ((flags & TF_MAIN_ROS_CMD) == TF_MAIN_ROS_CMD){
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00f      	beq.n	80029a2 <task_main_function+0x42>
		  stepper.targetPos = ros_cmd.stepper_target_position;
 8002982:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <task_main_function+0x88>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	4b18      	ldr	r3, [pc, #96]	; (80029ec <task_main_function+0x8c>)
 800298a:	605a      	str	r2, [r3, #4]
		  osThreadFlagsSet(task_stepperHandle, TF_STEPPER_DATA);
 800298c:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <task_main_function+0x90>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2102      	movs	r1, #2
 8002992:	4618      	mov	r0, r3
 8002994:	f008 fc00 	bl	800b198 <osThreadFlagsSet>
		  updateDigitalOuputs(ros_cmd.digital_output);
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <task_main_function+0x88>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fca7 	bl	80022f0 <updateDigitalOuputs>

	  }
	  osMutexAcquire(sensorDataMutexHandle, osWaitForever);
 80029a2:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <task_main_function+0x94>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029aa:	4618      	mov	r0, r3
 80029ac:	f008 fd64 	bl	800b478 <osMutexAcquire>
	  sensor_data.digital_input = HAL_GPIO_ReadPin(PB0_GPIO_Port, PB0_Pin);
 80029b0:	2101      	movs	r1, #1
 80029b2:	4811      	ldr	r0, [pc, #68]	; (80029f8 <task_main_function+0x98>)
 80029b4:	f002 fcaa 	bl	800530c <HAL_GPIO_ReadPin>
 80029b8:	4603      	mov	r3, r0
 80029ba:	461a      	mov	r2, r3
 80029bc:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <task_main_function+0x9c>)
 80029be:	601a      	str	r2, [r3, #0]
	  sensor_data.analog_input[0] = adc_values[0];
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <task_main_function+0xa0>)
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <task_main_function+0x9c>)
 80029c8:	605a      	str	r2, [r3, #4]
	  sensor_data.analog_input[1] = adc_values[1];
 80029ca:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <task_main_function+0xa0>)
 80029cc:	885b      	ldrh	r3, [r3, #2]
 80029ce:	461a      	mov	r2, r3
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <task_main_function+0x9c>)
 80029d2:	609a      	str	r2, [r3, #8]
	  osMutexRelease(sensorDataMutexHandle);
 80029d4:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <task_main_function+0x94>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f008 fd98 	bl	800b50e <osMutexRelease>

    osDelay(50);
 80029de:	2032      	movs	r0, #50	; 0x32
 80029e0:	f008 fca9 	bl	800b336 <osDelay>
	  flags = osThreadFlagsWait(TF_MAIN_ROS_CMD, osFlagsWaitAny, 0);
 80029e4:	e7c2      	b.n	800296c <task_main_function+0xc>
 80029e6:	bf00      	nop
 80029e8:	200105fc 	.word	0x200105fc
 80029ec:	2001064c 	.word	0x2001064c
 80029f0:	20010858 	.word	0x20010858
 80029f4:	200108ac 	.word	0x200108ac
 80029f8:	40020000 	.word	0x40020000
 80029fc:	20010558 	.word	0x20010558
 8002a00:	20010de8 	.word	0x20010de8

08002a04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a16:	f001 f9a3 	bl	8003d60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40001400 	.word	0x40001400

08002a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a2c:	b672      	cpsid	i
}
 8002a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a30:	e7fe      	b.n	8002a30 <Error_Handler+0x8>
	...

08002a34 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <microros_allocate+0x3c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4413      	add	r3, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <microros_allocate+0x3c>)
 8002a4c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <microros_allocate+0x40>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4413      	add	r3, r2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <microros_allocate+0x40>)
 8002a5c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe fb24 	bl	80010ac <pvPortMallocMicroROS>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20008100 	.word	0x20008100
 8002a74:	20008104 	.word	0x20008104

08002a78 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00c      	beq.n	8002aa2 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7fe fc2d 	bl	80012e8 <getBlockSize>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4a06      	ldr	r2, [pc, #24]	; (8002aac <microros_deallocate+0x34>)
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <microros_deallocate+0x34>)
 8002a9a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7fe fbc9 	bl	8001234 <vPortFreeMicroROS>
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20008104 	.word	0x20008104

08002ab0 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002abc:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <microros_reallocate+0x64>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <microros_reallocate+0x64>)
 8002aca:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <microros_reallocate+0x68>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <microros_reallocate+0x68>)
 8002ada:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d104      	bne.n	8002aec <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002ae2:	68b8      	ldr	r0, [r7, #8]
 8002ae4:	f7fe fae2 	bl	80010ac <pvPortMallocMicroROS>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	e00e      	b.n	8002b0a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f7fe fbfb 	bl	80012e8 <getBlockSize>
 8002af2:	4603      	mov	r3, r0
 8002af4:	4a08      	ldr	r2, [pc, #32]	; (8002b18 <microros_reallocate+0x68>)
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <microros_reallocate+0x68>)
 8002afe:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f7fe fc0e 	bl	8001324 <pvPortReallocMicroROS>
 8002b08:	4603      	mov	r3, r0
  }
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20008100 	.word	0x20008100
 8002b18:	20008104 	.word	0x20008104

08002b1c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	fb02 f303 	mul.w	r3, r2, r3
 8002b30:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <microros_zero_allocate+0x48>)
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	4413      	add	r3, r2
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <microros_zero_allocate+0x48>)
 8002b3a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	fb02 f303 	mul.w	r3, r2, r3
 8002b44:	4a08      	ldr	r2, [pc, #32]	; (8002b68 <microros_zero_allocate+0x4c>)
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	4413      	add	r3, r2
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <microros_zero_allocate+0x4c>)
 8002b4e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f7fe fc20 	bl	8001398 <pvPortCallocMicroROS>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20008100 	.word	0x20008100
 8002b68:	20008104 	.word	0x20008104
 8002b6c:	00000000 	.word	0x00000000

08002b70 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002b70:	b5b0      	push	{r4, r5, r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002b80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b84:	a320      	add	r3, pc, #128	; (adr r3, 8002c08 <UTILS_NanosecondsToTimespec+0x98>)
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	f7fe f88d 	bl	8000ca8 <__aeabi_ldivmod>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002b98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b9c:	a31a      	add	r3, pc, #104	; (adr r3, 8002c08 <UTILS_NanosecondsToTimespec+0x98>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	f7fe f881 	bl	8000ca8 <__aeabi_ldivmod>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	da1f      	bge.n	8002bf2 <UTILS_NanosecondsToTimespec+0x82>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <UTILS_NanosecondsToTimespec+0x90>)
 8002bb8:	fb82 1203 	smull	r1, r2, r2, r3
 8002bbc:	1712      	asrs	r2, r2, #28
 8002bbe:	17db      	asrs	r3, r3, #31
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002bd4:	1a84      	subs	r4, r0, r2
 8002bd6:	eb61 0503 	sbc.w	r5, r1, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	e9c3 4500 	strd	r4, r5, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	4907      	ldr	r1, [pc, #28]	; (8002c04 <UTILS_NanosecondsToTimespec+0x94>)
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	441a      	add	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	609a      	str	r2, [r3, #8]
    }
}
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	f3af 8000 	nop.w
 8002c00:	44b82fa1 	.word	0x44b82fa1
 8002c04:	3b9aca00 	.word	0x3b9aca00
 8002c08:	3b9aca00 	.word	0x3b9aca00
 8002c0c:	00000000 	.word	0x00000000

08002c10 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002c10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]
    TimeOut_t xCurrentTime = { 0 };
 8002c1c:	f107 0308 	add.w	r3, r7, #8
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002c32:	f107 0308 	add.w	r3, r7, #8
 8002c36:	4618      	mov	r0, r3
 8002c38:	f00a f952 	bl	800cee0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	2200      	movs	r2, #0
 8002c50:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	461a      	mov	r2, r3
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c60:	1884      	adds	r4, r0, r2
 8002c62:	eb41 0503 	adc.w	r5, r1, r3
 8002c66:	e9c7 4504 	strd	r4, r5, [r7, #16]

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002c6a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c6e:	4622      	mov	r2, r4
 8002c70:	462b      	mov	r3, r5
 8002c72:	f04f 0000 	mov.w	r0, #0
 8002c76:	f04f 0100 	mov.w	r1, #0
 8002c7a:	0159      	lsls	r1, r3, #5
 8002c7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c80:	0150      	lsls	r0, r2, #5
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	1b12      	subs	r2, r2, r4
 8002c88:	eb63 0305 	sbc.w	r3, r3, r5
 8002c8c:	f04f 0000 	mov.w	r0, #0
 8002c90:	f04f 0100 	mov.w	r1, #0
 8002c94:	0259      	lsls	r1, r3, #9
 8002c96:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c9a:	0250      	lsls	r0, r2, #9
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	1912      	adds	r2, r2, r4
 8002ca2:	eb45 0303 	adc.w	r3, r5, r3
 8002ca6:	f04f 0000 	mov.w	r0, #0
 8002caa:	f04f 0100 	mov.w	r1, #0
 8002cae:	0199      	lsls	r1, r3, #6
 8002cb0:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8002cb4:	0190      	lsls	r0, r2, #6
 8002cb6:	1a80      	subs	r0, r0, r2
 8002cb8:	eb61 0103 	sbc.w	r1, r1, r3
 8002cbc:	eb10 0804 	adds.w	r8, r0, r4
 8002cc0:	eb41 0905 	adc.w	r9, r1, r5
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	4640      	mov	r0, r8
 8002cc8:	4649      	mov	r1, r9
 8002cca:	f7ff ff51 	bl	8002b70 <UTILS_NanosecondsToTimespec>

    return 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002cdc <stepperInit>:
#include "stepper.h"


void stepperInit(stepper_t* stepper){
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
	stepper->currentPos = 0;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
	stepper->targetPos = 0;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	605a      	str	r2, [r3, #4]
	stepper->speed = 0.0;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
	stepper->max_speed = 2000.0;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a16      	ldr	r2, [pc, #88]	; (8002d54 <stepperInit+0x78>)
 8002cfc:	60da      	str	r2, [r3, #12]
	stepper->acceleration = 0.0;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	611a      	str	r2, [r3, #16]
	stepper->stepInverval = 0;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	615a      	str	r2, [r3, #20]
	stepper->n = 0;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	619a      	str	r2, [r3, #24]
	stepper->c0 = 0.0;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	61da      	str	r2, [r3, #28]
	stepper->cn = 0.0;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	621a      	str	r2, [r3, #32]
	stepper->cmin = 1.0;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(STEPPER_EN_GPIO_Port, STEPPER_EN_Pin, GPIO_PIN_RESET);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2180      	movs	r1, #128	; 0x80
 8002d2e:	480a      	ldr	r0, [pc, #40]	; (8002d58 <stepperInit+0x7c>)
 8002d30:	f002 fb04 	bl	800533c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_RESET);
 8002d34:	2200      	movs	r2, #0
 8002d36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d3a:	4807      	ldr	r0, [pc, #28]	; (8002d58 <stepperInit+0x7c>)
 8002d3c:	f002 fafe 	bl	800533c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_SET);
 8002d40:	2201      	movs	r2, #1
 8002d42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d46:	4804      	ldr	r0, [pc, #16]	; (8002d58 <stepperInit+0x7c>)
 8002d48:	f002 faf8 	bl	800533c <HAL_GPIO_WritePin>
}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	44fa0000 	.word	0x44fa0000
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	00000000 	.word	0x00000000

08002d60 <stepperSetSpeed>:

void stepperSetSpeed(stepper_t* stepper, float speed){
 8002d60:	b5b0      	push	{r4, r5, r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	ed87 0a00 	vstr	s0, [r7]
	if (speed == stepper->speed) {
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d72:	ed97 7a00 	vldr	s14, [r7]
 8002d76:	eeb4 7a67 	vcmp.f32	s14, s15
 8002d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7e:	d053      	beq.n	8002e28 <stepperSetSpeed+0xc8>
		return;
	}
	if (speed < -stepper->max_speed){
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d86:	eef1 7a67 	vneg.f32	s15, s15
 8002d8a:	ed97 7a00 	vldr	s14, [r7]
 8002d8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d96:	d507      	bpl.n	8002da8 <stepperSetSpeed+0x48>
		speed = -stepper->max_speed;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d9e:	eef1 7a67 	vneg.f32	s15, s15
 8002da2:	edc7 7a00 	vstr	s15, [r7]
 8002da6:	e00c      	b.n	8002dc2 <stepperSetSpeed+0x62>
	}
	else if (speed > stepper->max_speed) {
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	edd3 7a03 	vldr	s15, [r3, #12]
 8002dae:	ed97 7a00 	vldr	s14, [r7]
 8002db2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dba:	dd02      	ble.n	8002dc2 <stepperSetSpeed+0x62>
		speed = stepper->max_speed;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	603b      	str	r3, [r7, #0]
	}

	if (speed == 0.0){
 8002dc2:	edd7 7a00 	vldr	s15, [r7]
 8002dc6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dce:	d103      	bne.n	8002dd8 <stepperSetSpeed+0x78>
		stepper->stepInverval = 0;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	615a      	str	r2, [r3, #20]
 8002dd6:	e023      	b.n	8002e20 <stepperSetSpeed+0xc0>
	}
	else {
		stepper->stepInverval = fabs(1000000.0/speed);
 8002dd8:	6838      	ldr	r0, [r7, #0]
 8002dda:	f7fd fbc5 	bl	8000568 <__aeabi_f2d>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	a113      	add	r1, pc, #76	; (adr r1, 8002e30 <stepperSetSpeed+0xd0>)
 8002de4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002de8:	f7fd fd40 	bl	800086c <__aeabi_ddiv>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4614      	mov	r4, r2
 8002df2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002df6:	4620      	mov	r0, r4
 8002df8:	4629      	mov	r1, r5
 8002dfa:	f7fd febd 	bl	8000b78 <__aeabi_d2iz>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	615a      	str	r2, [r3, #20]
		stepper->direction = (speed>0.0)? DIRECTION_CW : DIRECTION_CCW;
 8002e04:	edd7 7a00 	vldr	s15, [r7]
 8002e08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e10:	bfcc      	ite	gt
 8002e12:	2301      	movgt	r3, #1
 8002e14:	2300      	movle	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	461a      	mov	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
	stepper->speed = speed;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	e000      	b.n	8002e2a <stepperSetSpeed+0xca>
		return;
 8002e28:	bf00      	nop
}
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e30:	00000000 	.word	0x00000000
 8002e34:	412e8480 	.word	0x412e8480

08002e38 <stepperSetMaxSpeed>:
float stepperGetSpeed(stepper_t* stepper){
	return stepper->speed;
}


void stepperSetMaxSpeed(stepper_t* stepper, float speed){
 8002e38:	b5b0      	push	{r4, r5, r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	ed87 0a00 	vstr	s0, [r7]
	if (speed < 0.0){
 8002e44:	edd7 7a00 	vldr	s15, [r7]
 8002e48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e50:	d505      	bpl.n	8002e5e <stepperSetMaxSpeed+0x26>
		speed = -speed;
 8002e52:	edd7 7a00 	vldr	s15, [r7]
 8002e56:	eef1 7a67 	vneg.f32	s15, s15
 8002e5a:	edc7 7a00 	vstr	s15, [r7]
	}
	if (stepper->max_speed != speed){
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e64:	ed97 7a00 	vldr	s14, [r7]
 8002e68:	eeb4 7a67 	vcmp.f32	s14, s15
 8002e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e70:	d038      	beq.n	8002ee4 <stepperSetMaxSpeed+0xac>
		stepper->max_speed = speed;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	60da      	str	r2, [r3, #12]
		stepper->cmin = 1000000.0/speed;
 8002e78:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002eec <stepperSetMaxSpeed+0xb4>
 8002e7c:	ed97 7a00 	vldr	s14, [r7]
 8002e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		if (stepper->n > 0){
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	dd28      	ble.n	8002ee4 <stepperSetMaxSpeed+0xac>
			stepper->n = (long)((stepper->speed * stepper->speed)/ (2.0 * stepper->acceleration));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea2:	ee17 0a90 	vmov	r0, s15
 8002ea6:	f7fd fb5f 	bl	8000568 <__aeabi_f2d>
 8002eaa:	4604      	mov	r4, r0
 8002eac:	460d      	mov	r5, r1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fd fb58 	bl	8000568 <__aeabi_f2d>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	f7fd f9f6 	bl	80002ac <__adddf3>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	f7fd fcd0 	bl	800086c <__aeabi_ddiv>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f7fd fe50 	bl	8000b78 <__aeabi_d2iz>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	619a      	str	r2, [r3, #24]
			stepperComputeNewSpeed(stepper);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f8a0 	bl	8003024 <stepperComputeNewSpeed>
		}
	}

}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bdb0      	pop	{r4, r5, r7, pc}
 8002eec:	49742400 	.word	0x49742400

08002ef0 <stepperSetAcceleration>:

float stepperGetMaxSpeed(stepper_t* stepper){
	return stepper->max_speed;
}

void stepperSetAcceleration(stepper_t* stepper, float acceleration){
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	ed87 0a00 	vstr	s0, [r7]
	if (acceleration == 0.0)
 8002efc:	edd7 7a00 	vldr	s15, [r7]
 8002f00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f08:	d060      	beq.n	8002fcc <stepperSetAcceleration+0xdc>
		return;
	if (acceleration < 0.0){
 8002f0a:	edd7 7a00 	vldr	s15, [r7]
 8002f0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f16:	d505      	bpl.n	8002f24 <stepperSetAcceleration+0x34>
		acceleration = - acceleration;
 8002f18:	edd7 7a00 	vldr	s15, [r7]
 8002f1c:	eef1 7a67 	vneg.f32	s15, s15
 8002f20:	edc7 7a00 	vstr	s15, [r7]
	}
	if (stepper->acceleration != acceleration){
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f2a:	ed97 7a00 	vldr	s14, [r7]
 8002f2e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f36:	d04a      	beq.n	8002fce <stepperSetAcceleration+0xde>
		stepper->n = stepper->n * (stepper->acceleration/acceleration);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	ee07 3a90 	vmov	s15, r3
 8002f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	ed93 6a04 	vldr	s12, [r3, #16]
 8002f4a:	edd7 6a00 	vldr	s13, [r7]
 8002f4e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f5a:	ee17 2a90 	vmov	r2, s15
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	619a      	str	r2, [r3, #24]
		stepper->c0 = 0.676* sqrt(2.0 / acceleration) * 1000000.0;
 8002f62:	6838      	ldr	r0, [r7, #0]
 8002f64:	f7fd fb00 	bl	8000568 <__aeabi_f2d>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	f04f 0000 	mov.w	r0, #0
 8002f70:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002f74:	f7fd fc7a 	bl	800086c <__aeabi_ddiv>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	ec43 2b17 	vmov	d7, r2, r3
 8002f80:	eeb0 0a47 	vmov.f32	s0, s14
 8002f84:	eef0 0a67 	vmov.f32	s1, s15
 8002f88:	f01b f9e8 	bl	801e35c <sqrt>
 8002f8c:	ec51 0b10 	vmov	r0, r1, d0
 8002f90:	a311      	add	r3, pc, #68	; (adr r3, 8002fd8 <stepperSetAcceleration+0xe8>)
 8002f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f96:	f7fd fb3f 	bl	8000618 <__aeabi_dmul>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	a30f      	add	r3, pc, #60	; (adr r3, 8002fe0 <stepperSetAcceleration+0xf0>)
 8002fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa8:	f7fd fb36 	bl	8000618 <__aeabi_dmul>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f7fd fe28 	bl	8000c08 <__aeabi_d2f>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	61da      	str	r2, [r3, #28]
		stepper->acceleration = acceleration;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	611a      	str	r2, [r3, #16]
		stepperComputeNewSpeed(stepper);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f82d 	bl	8003024 <stepperComputeNewSpeed>
 8002fca:	e000      	b.n	8002fce <stepperSetAcceleration+0xde>
		return;
 8002fcc:	bf00      	nop
	}

}
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	f3af 8000 	nop.w
 8002fd8:	c083126f 	.word	0xc083126f
 8002fdc:	3fe5a1ca 	.word	0x3fe5a1ca
 8002fe0:	00000000 	.word	0x00000000
 8002fe4:	412e8480 	.word	0x412e8480

08002fe8 <stepperGetDistanceToGo>:

long stepperGetDistanceToGo(stepper_t* stepper){
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
	return stepper->targetPos - stepper->currentPos;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	1ad3      	subs	r3, r2, r3
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <stepperSetAbsoluteTartePosition>:

long stepperGetTargetPosition(stepper_t* stepper){
	return stepper->targetPos;
}

void stepperSetAbsoluteTartePosition(stepper_t* stepper, long absolutePosition){
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]
	stepper->targetPos = absolutePosition;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	605a      	str	r2, [r3, #4]
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <stepperComputeNewSpeed>:

void stepperSetRelativeTargetPosition(stepper_t* stepper, long relativePosition){
	stepper->targetPos = stepperGetTargetPosition(stepper) + relativePosition;
}

void stepperComputeNewSpeed(stepper_t* stepper){
 8003024:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
	long distanceTo = stepperGetDistanceToGo(stepper);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff ffda 	bl	8002fe8 <stepperGetDistanceToGo>
 8003034:	60f8      	str	r0, [r7, #12]
	long stepsToStop = (long)((stepper->speed * stepper->speed) / (2.0 * stepper->acceleration));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	ed93 7a02 	vldr	s14, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003046:	ee17 0a90 	vmov	r0, s15
 800304a:	f7fd fa8d 	bl	8000568 <__aeabi_f2d>
 800304e:	4604      	mov	r4, r0
 8003050:	460d      	mov	r5, r1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd fa86 	bl	8000568 <__aeabi_f2d>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	f7fd f924 	bl	80002ac <__adddf3>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4620      	mov	r0, r4
 800306a:	4629      	mov	r1, r5
 800306c:	f7fd fbfe 	bl	800086c <__aeabi_ddiv>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4610      	mov	r0, r2
 8003076:	4619      	mov	r1, r3
 8003078:	f7fd fd7e 	bl	8000b78 <__aeabi_d2iz>
 800307c:	4603      	mov	r3, r0
 800307e:	60bb      	str	r3, [r7, #8]

	if (distanceTo == 0 && stepsToStop <=1)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10d      	bne.n	80030a2 <stepperComputeNewSpeed+0x7e>
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b01      	cmp	r3, #1
 800308a:	dc0a      	bgt.n	80030a2 <stepperComputeNewSpeed+0x7e>
	{
		stepper->stepInverval = 0;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	615a      	str	r2, [r3, #20]
		stepper->speed = 0.0;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
		stepper->n = 0;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	619a      	str	r2, [r3, #24]
		return;
 80030a0:	e0d8      	b.n	8003254 <stepperComputeNewSpeed+0x230>
	}
	if (distanceTo > 0) {
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	dd24      	ble.n	80030f2 <stepperComputeNewSpeed+0xce>
		if (stepper->n > 0){
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	dd0d      	ble.n	80030cc <stepperComputeNewSpeed+0xa8>
			if ((stepsToStop >= distanceTo) || (stepper->direction == DIRECTION_CCW)){
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	da04      	bge.n	80030c2 <stepperComputeNewSpeed+0x9e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d140      	bne.n	8003144 <stepperComputeNewSpeed+0x120>
				stepper->n = -stepsToStop;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	425a      	negs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	619a      	str	r2, [r3, #24]
 80030ca:	e03b      	b.n	8003144 <stepperComputeNewSpeed+0x120>
			}

		}
		else if (stepper->n < 0 ){
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	da37      	bge.n	8003144 <stepperComputeNewSpeed+0x120>
			if ((stepsToStop < distanceTo) && stepper->direction == DIRECTION_CW){
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	429a      	cmp	r2, r3
 80030da:	da33      	bge.n	8003144 <stepperComputeNewSpeed+0x120>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d12e      	bne.n	8003144 <stepperComputeNewSpeed+0x120>
				stepper->n = - stepper->n;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	425a      	negs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	619a      	str	r2, [r3, #24]
 80030f0:	e028      	b.n	8003144 <stepperComputeNewSpeed+0x120>
			}
		}
	}
	else if (distanceTo < 0) {
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	da25      	bge.n	8003144 <stepperComputeNewSpeed+0x120>
		if (stepper->n > 0){
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	dd0e      	ble.n	800311e <stepperComputeNewSpeed+0xfa>
			if ((stepsToStop >= -distanceTo) || stepper->direction == DIRECTION_CW){
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	425b      	negs	r3, r3
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	429a      	cmp	r2, r3
 8003108:	da04      	bge.n	8003114 <stepperComputeNewSpeed+0xf0>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003110:	2b01      	cmp	r3, #1
 8003112:	d117      	bne.n	8003144 <stepperComputeNewSpeed+0x120>
				stepper->n = -stepsToStop;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	425a      	negs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	619a      	str	r2, [r3, #24]
 800311c:	e012      	b.n	8003144 <stepperComputeNewSpeed+0x120>
			}
		}
		else if (stepper->n < 0){
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	da0e      	bge.n	8003144 <stepperComputeNewSpeed+0x120>
			if ((stepsToStop < - distanceTo) && stepper->direction == DIRECTION_CCW){
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	425b      	negs	r3, r3
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	429a      	cmp	r2, r3
 800312e:	da09      	bge.n	8003144 <stepperComputeNewSpeed+0x120>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003136:	2b00      	cmp	r3, #0
 8003138:	d104      	bne.n	8003144 <stepperComputeNewSpeed+0x120>
				stepper->n = -stepper->n;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	425a      	negs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	619a      	str	r2, [r3, #24]
			}
		}
	}
	if (stepper->n == 0){
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10e      	bne.n	800316a <stepperComputeNewSpeed+0x146>
		stepper->cn = stepper->c0;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69da      	ldr	r2, [r3, #28]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	621a      	str	r2, [r3, #32]
		stepper->direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	bfcc      	ite	gt
 800315a:	2301      	movgt	r3, #1
 800315c:	2300      	movle	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	461a      	mov	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003168:	e04f      	b.n	800320a <stepperComputeNewSpeed+0x1e6>
	}
	else {
		stepper->cn = stepper->cn - ((2.0 * stepper->cn)/((4.0* stepper->n)+1));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd f9fa 	bl	8000568 <__aeabi_f2d>
 8003174:	4604      	mov	r4, r0
 8003176:	460d      	mov	r5, r1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd f9f3 	bl	8000568 <__aeabi_f2d>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	f7fd f891 	bl	80002ac <__adddf3>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4690      	mov	r8, r2
 8003190:	4699      	mov	r9, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd f9d4 	bl	8000544 <__aeabi_i2d>
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	4b2e      	ldr	r3, [pc, #184]	; (800325c <stepperComputeNewSpeed+0x238>)
 80031a2:	f7fd fa39 	bl	8000618 <__aeabi_dmul>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4610      	mov	r0, r2
 80031ac:	4619      	mov	r1, r3
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <stepperComputeNewSpeed+0x23c>)
 80031b4:	f7fd f87a 	bl	80002ac <__adddf3>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4640      	mov	r0, r8
 80031be:	4649      	mov	r1, r9
 80031c0:	f7fd fb54 	bl	800086c <__aeabi_ddiv>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4620      	mov	r0, r4
 80031ca:	4629      	mov	r1, r5
 80031cc:	f7fd f86c 	bl	80002a8 <__aeabi_dsub>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4610      	mov	r0, r2
 80031d6:	4619      	mov	r1, r3
 80031d8:	f7fd fd16 	bl	8000c08 <__aeabi_d2f>
 80031dc:	4602      	mov	r2, r0
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	621a      	str	r2, [r3, #32]
		if (stepper->cn > stepper->cmin){
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	ed93 7a08 	vldr	s14, [r3, #32]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80031ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f6:	dd04      	ble.n	8003202 <stepperComputeNewSpeed+0x1de>
			stepper->cn = stepper->cn;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1a      	ldr	r2, [r3, #32]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	621a      	str	r2, [r3, #32]
 8003200:	e003      	b.n	800320a <stepperComputeNewSpeed+0x1e6>
		}
		else {
			stepper->cn = stepper->cmin;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	621a      	str	r2, [r3, #32]
		}

	}
	stepper->n++;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	619a      	str	r2, [r3, #24]
	stepper->stepInverval = stepper->cn;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	edd3 7a08 	vldr	s15, [r3, #32]
 800321a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800321e:	ee17 2a90 	vmov	r2, s15
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	615a      	str	r2, [r3, #20]
	stepper->speed = 1000000.0/stepper->cn;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	ed93 7a08 	vldr	s14, [r3, #32]
 800322c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8003264 <stepperComputeNewSpeed+0x240>
 8003230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	edc3 7a02 	vstr	s15, [r3, #8]
	if (stepper->direction == DIRECTION_CCW){
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003240:	2b00      	cmp	r3, #0
 8003242:	d107      	bne.n	8003254 <stepperComputeNewSpeed+0x230>
		stepper->speed = -stepper->speed;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	edd3 7a02 	vldr	s15, [r3, #8]
 800324a:	eef1 7a67 	vneg.f32	s15, s15
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	edc3 7a02 	vstr	s15, [r3, #8]
	}
}
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800325c:	40100000 	.word	0x40100000
 8003260:	3ff00000 	.word	0x3ff00000
 8003264:	49742400 	.word	0x49742400

08003268 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	4b12      	ldr	r3, [pc, #72]	; (80032bc <HAL_MspInit+0x54>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	4a11      	ldr	r2, [pc, #68]	; (80032bc <HAL_MspInit+0x54>)
 8003278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800327c:	6453      	str	r3, [r2, #68]	; 0x44
 800327e:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <HAL_MspInit+0x54>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003286:	607b      	str	r3, [r7, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <HAL_MspInit+0x54>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	4a0a      	ldr	r2, [pc, #40]	; (80032bc <HAL_MspInit+0x54>)
 8003294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003298:	6413      	str	r3, [r2, #64]	; 0x40
 800329a:	4b08      	ldr	r3, [pc, #32]	; (80032bc <HAL_MspInit+0x54>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032a6:	2200      	movs	r2, #0
 80032a8:	210f      	movs	r1, #15
 80032aa:	f06f 0001 	mvn.w	r0, #1
 80032ae:	f001 fa65 	bl	800477c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800

080032c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a2f      	ldr	r2, [pc, #188]	; (800339c <HAL_ADC_MspInit+0xdc>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d157      	bne.n	8003392 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	4b2e      	ldr	r3, [pc, #184]	; (80033a0 <HAL_ADC_MspInit+0xe0>)
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	4a2d      	ldr	r2, [pc, #180]	; (80033a0 <HAL_ADC_MspInit+0xe0>)
 80032ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f0:	6453      	str	r3, [r2, #68]	; 0x44
 80032f2:	4b2b      	ldr	r3, [pc, #172]	; (80033a0 <HAL_ADC_MspInit+0xe0>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <HAL_ADC_MspInit+0xe0>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	4a26      	ldr	r2, [pc, #152]	; (80033a0 <HAL_ADC_MspInit+0xe0>)
 8003308:	f043 0304 	orr.w	r3, r3, #4
 800330c:	6313      	str	r3, [r2, #48]	; 0x30
 800330e:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <HAL_ADC_MspInit+0xe0>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800331a:	2330      	movs	r3, #48	; 0x30
 800331c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800331e:	2303      	movs	r3, #3
 8003320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003326:	f107 0314 	add.w	r3, r7, #20
 800332a:	4619      	mov	r1, r3
 800332c:	481d      	ldr	r0, [pc, #116]	; (80033a4 <HAL_ADC_MspInit+0xe4>)
 800332e:	f001 fe51 	bl	8004fd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003332:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <HAL_ADC_MspInit+0xe8>)
 8003334:	4a1d      	ldr	r2, [pc, #116]	; (80033ac <HAL_ADC_MspInit+0xec>)
 8003336:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003338:	4b1b      	ldr	r3, [pc, #108]	; (80033a8 <HAL_ADC_MspInit+0xe8>)
 800333a:	2200      	movs	r2, #0
 800333c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800333e:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <HAL_ADC_MspInit+0xe8>)
 8003340:	2200      	movs	r2, #0
 8003342:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003344:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <HAL_ADC_MspInit+0xe8>)
 8003346:	2200      	movs	r2, #0
 8003348:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800334a:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <HAL_ADC_MspInit+0xe8>)
 800334c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003350:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003352:	4b15      	ldr	r3, [pc, #84]	; (80033a8 <HAL_ADC_MspInit+0xe8>)
 8003354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003358:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800335a:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <HAL_ADC_MspInit+0xe8>)
 800335c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003360:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003362:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <HAL_ADC_MspInit+0xe8>)
 8003364:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003368:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800336a:	4b0f      	ldr	r3, [pc, #60]	; (80033a8 <HAL_ADC_MspInit+0xe8>)
 800336c:	2200      	movs	r2, #0
 800336e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003370:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <HAL_ADC_MspInit+0xe8>)
 8003372:	2200      	movs	r2, #0
 8003374:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003376:	480c      	ldr	r0, [pc, #48]	; (80033a8 <HAL_ADC_MspInit+0xe8>)
 8003378:	f001 fa2a 	bl	80047d0 <HAL_DMA_Init>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003382:	f7ff fb51 	bl	8002a28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a07      	ldr	r2, [pc, #28]	; (80033a8 <HAL_ADC_MspInit+0xe8>)
 800338a:	639a      	str	r2, [r3, #56]	; 0x38
 800338c:	4a06      	ldr	r2, [pc, #24]	; (80033a8 <HAL_ADC_MspInit+0xe8>)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003392:	bf00      	nop
 8003394:	3728      	adds	r7, #40	; 0x28
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40012000 	.word	0x40012000
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40020800 	.word	0x40020800
 80033a8:	20010960 	.word	0x20010960
 80033ac:	40026410 	.word	0x40026410

080033b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08a      	sub	sp, #40	; 0x28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b8:	f107 0314 	add.w	r3, r7, #20
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a19      	ldr	r2, [pc, #100]	; (8003434 <HAL_I2C_MspInit+0x84>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d12c      	bne.n	800342c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	4b18      	ldr	r3, [pc, #96]	; (8003438 <HAL_I2C_MspInit+0x88>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	4a17      	ldr	r2, [pc, #92]	; (8003438 <HAL_I2C_MspInit+0x88>)
 80033dc:	f043 0302 	orr.w	r3, r3, #2
 80033e0:	6313      	str	r3, [r2, #48]	; 0x30
 80033e2:	4b15      	ldr	r3, [pc, #84]	; (8003438 <HAL_I2C_MspInit+0x88>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80033ee:	f44f 7310 	mov.w	r3, #576	; 0x240
 80033f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033f4:	2312      	movs	r3, #18
 80033f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033f8:	2301      	movs	r3, #1
 80033fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fc:	2300      	movs	r3, #0
 80033fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003400:	2304      	movs	r3, #4
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003404:	f107 0314 	add.w	r3, r7, #20
 8003408:	4619      	mov	r1, r3
 800340a:	480c      	ldr	r0, [pc, #48]	; (800343c <HAL_I2C_MspInit+0x8c>)
 800340c:	f001 fde2 	bl	8004fd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	4b08      	ldr	r3, [pc, #32]	; (8003438 <HAL_I2C_MspInit+0x88>)
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	4a07      	ldr	r2, [pc, #28]	; (8003438 <HAL_I2C_MspInit+0x88>)
 800341a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800341e:	6413      	str	r3, [r2, #64]	; 0x40
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <HAL_I2C_MspInit+0x88>)
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800342c:	bf00      	nop
 800342e:	3728      	adds	r7, #40	; 0x28
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40005400 	.word	0x40005400
 8003438:	40023800 	.word	0x40023800
 800343c:	40020400 	.word	0x40020400

08003440 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08e      	sub	sp, #56	; 0x38
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]
 8003456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a31      	ldr	r2, [pc, #196]	; (8003530 <HAL_I2S_MspInit+0xf0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d15a      	bne.n	8003526 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003470:	2301      	movs	r3, #1
 8003472:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8003474:	23c0      	movs	r3, #192	; 0xc0
 8003476:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003478:	2302      	movs	r3, #2
 800347a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800347c:	f107 0314 	add.w	r3, r7, #20
 8003480:	4618      	mov	r0, r3
 8003482:	f004 fd37 	bl	8007ef4 <HAL_RCCEx_PeriphCLKConfig>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800348c:	f7ff facc 	bl	8002a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003490:	2300      	movs	r3, #0
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	4b27      	ldr	r3, [pc, #156]	; (8003534 <HAL_I2S_MspInit+0xf4>)
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	4a26      	ldr	r2, [pc, #152]	; (8003534 <HAL_I2S_MspInit+0xf4>)
 800349a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800349e:	6413      	str	r3, [r2, #64]	; 0x40
 80034a0:	4b24      	ldr	r3, [pc, #144]	; (8003534 <HAL_I2S_MspInit+0xf4>)
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	4b20      	ldr	r3, [pc, #128]	; (8003534 <HAL_I2S_MspInit+0xf4>)
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	4a1f      	ldr	r2, [pc, #124]	; (8003534 <HAL_I2S_MspInit+0xf4>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6313      	str	r3, [r2, #48]	; 0x30
 80034bc:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <HAL_I2S_MspInit+0xf4>)
 80034be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034c8:	2300      	movs	r3, #0
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	4b19      	ldr	r3, [pc, #100]	; (8003534 <HAL_I2S_MspInit+0xf4>)
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	4a18      	ldr	r2, [pc, #96]	; (8003534 <HAL_I2S_MspInit+0xf4>)
 80034d2:	f043 0304 	orr.w	r3, r3, #4
 80034d6:	6313      	str	r3, [r2, #48]	; 0x30
 80034d8:	4b16      	ldr	r3, [pc, #88]	; (8003534 <HAL_I2S_MspInit+0xf4>)
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80034e4:	2310      	movs	r3, #16
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e8:	2302      	movs	r3, #2
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f0:	2300      	movs	r3, #0
 80034f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80034f4:	2306      	movs	r3, #6
 80034f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80034f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034fc:	4619      	mov	r1, r3
 80034fe:	480e      	ldr	r0, [pc, #56]	; (8003538 <HAL_I2S_MspInit+0xf8>)
 8003500:	f001 fd68 	bl	8004fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003504:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350a:	2302      	movs	r3, #2
 800350c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350e:	2300      	movs	r3, #0
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003512:	2300      	movs	r3, #0
 8003514:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003516:	2306      	movs	r3, #6
 8003518:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800351a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800351e:	4619      	mov	r1, r3
 8003520:	4806      	ldr	r0, [pc, #24]	; (800353c <HAL_I2S_MspInit+0xfc>)
 8003522:	f001 fd57 	bl	8004fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003526:	bf00      	nop
 8003528:	3738      	adds	r7, #56	; 0x38
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40003c00 	.word	0x40003c00
 8003534:	40023800 	.word	0x40023800
 8003538:	40020000 	.word	0x40020000
 800353c:	40020800 	.word	0x40020800

08003540 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	; 0x28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a19      	ldr	r2, [pc, #100]	; (80035c4 <HAL_SPI_MspInit+0x84>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d12b      	bne.n	80035ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <HAL_SPI_MspInit+0x88>)
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	4a17      	ldr	r2, [pc, #92]	; (80035c8 <HAL_SPI_MspInit+0x88>)
 800356c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003570:	6453      	str	r3, [r2, #68]	; 0x44
 8003572:	4b15      	ldr	r3, [pc, #84]	; (80035c8 <HAL_SPI_MspInit+0x88>)
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <HAL_SPI_MspInit+0x88>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	4a10      	ldr	r2, [pc, #64]	; (80035c8 <HAL_SPI_MspInit+0x88>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	6313      	str	r3, [r2, #48]	; 0x30
 800358e:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <HAL_SPI_MspInit+0x88>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800359a:	23e0      	movs	r3, #224	; 0xe0
 800359c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359e:	2302      	movs	r3, #2
 80035a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a6:	2300      	movs	r3, #0
 80035a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035aa:	2305      	movs	r3, #5
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ae:	f107 0314 	add.w	r3, r7, #20
 80035b2:	4619      	mov	r1, r3
 80035b4:	4805      	ldr	r0, [pc, #20]	; (80035cc <HAL_SPI_MspInit+0x8c>)
 80035b6:	f001 fd0d 	bl	8004fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035ba:	bf00      	nop
 80035bc:	3728      	adds	r7, #40	; 0x28
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40013000 	.word	0x40013000
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40020000 	.word	0x40020000

080035d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a0e      	ldr	r2, [pc, #56]	; (8003618 <HAL_TIM_Base_MspInit+0x48>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d115      	bne.n	800360e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	4b0d      	ldr	r3, [pc, #52]	; (800361c <HAL_TIM_Base_MspInit+0x4c>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	4a0c      	ldr	r2, [pc, #48]	; (800361c <HAL_TIM_Base_MspInit+0x4c>)
 80035ec:	f043 0302 	orr.w	r3, r3, #2
 80035f0:	6413      	str	r3, [r2, #64]	; 0x40
 80035f2:	4b0a      	ldr	r3, [pc, #40]	; (800361c <HAL_TIM_Base_MspInit+0x4c>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 80035fe:	2200      	movs	r2, #0
 8003600:	2106      	movs	r1, #6
 8003602:	201d      	movs	r0, #29
 8003604:	f001 f8ba 	bl	800477c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003608:	201d      	movs	r0, #29
 800360a:	f001 f8d3 	bl	80047b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800360e:	bf00      	nop
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40000400 	.word	0x40000400
 800361c:	40023800 	.word	0x40023800

08003620 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003628:	f107 030c 	add.w	r3, r7, #12
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	60da      	str	r2, [r3, #12]
 8003636:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a12      	ldr	r2, [pc, #72]	; (8003688 <HAL_TIM_MspPostInit+0x68>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d11d      	bne.n	800367e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	4b11      	ldr	r3, [pc, #68]	; (800368c <HAL_TIM_MspPostInit+0x6c>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	4a10      	ldr	r2, [pc, #64]	; (800368c <HAL_TIM_MspPostInit+0x6c>)
 800364c:	f043 0304 	orr.w	r3, r3, #4
 8003650:	6313      	str	r3, [r2, #48]	; 0x30
 8003652:	4b0e      	ldr	r3, [pc, #56]	; (800368c <HAL_TIM_MspPostInit+0x6c>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800365e:	2340      	movs	r3, #64	; 0x40
 8003660:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003662:	2302      	movs	r3, #2
 8003664:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366a:	2300      	movs	r3, #0
 800366c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800366e:	2302      	movs	r3, #2
 8003670:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003672:	f107 030c 	add.w	r3, r7, #12
 8003676:	4619      	mov	r1, r3
 8003678:	4805      	ldr	r0, [pc, #20]	; (8003690 <HAL_TIM_MspPostInit+0x70>)
 800367a:	f001 fcab 	bl	8004fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800367e:	bf00      	nop
 8003680:	3720      	adds	r7, #32
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40000400 	.word	0x40000400
 800368c:	40023800 	.word	0x40023800
 8003690:	40020800 	.word	0x40020800

08003694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08c      	sub	sp, #48	; 0x30
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800369c:	f107 031c 	add.w	r3, r7, #28
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a7a      	ldr	r2, [pc, #488]	; (800389c <HAL_UART_MspInit+0x208>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	f040 8094 	bne.w	80037e0 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036b8:	2300      	movs	r3, #0
 80036ba:	61bb      	str	r3, [r7, #24]
 80036bc:	4b78      	ldr	r3, [pc, #480]	; (80038a0 <HAL_UART_MspInit+0x20c>)
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	4a77      	ldr	r2, [pc, #476]	; (80038a0 <HAL_UART_MspInit+0x20c>)
 80036c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c6:	6413      	str	r3, [r2, #64]	; 0x40
 80036c8:	4b75      	ldr	r3, [pc, #468]	; (80038a0 <HAL_UART_MspInit+0x20c>)
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	4b71      	ldr	r3, [pc, #452]	; (80038a0 <HAL_UART_MspInit+0x20c>)
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	4a70      	ldr	r2, [pc, #448]	; (80038a0 <HAL_UART_MspInit+0x20c>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	6313      	str	r3, [r2, #48]	; 0x30
 80036e4:	4b6e      	ldr	r3, [pc, #440]	; (80038a0 <HAL_UART_MspInit+0x20c>)
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = ROS_USART_TX_Pin|ROS_USART_RX_Pin;
 80036f0:	230c      	movs	r3, #12
 80036f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f4:	2302      	movs	r3, #2
 80036f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f8:	2300      	movs	r3, #0
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036fc:	2303      	movs	r3, #3
 80036fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003700:	2307      	movs	r3, #7
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003704:	f107 031c 	add.w	r3, r7, #28
 8003708:	4619      	mov	r1, r3
 800370a:	4866      	ldr	r0, [pc, #408]	; (80038a4 <HAL_UART_MspInit+0x210>)
 800370c:	f001 fc62 	bl	8004fd4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003710:	4b65      	ldr	r3, [pc, #404]	; (80038a8 <HAL_UART_MspInit+0x214>)
 8003712:	4a66      	ldr	r2, [pc, #408]	; (80038ac <HAL_UART_MspInit+0x218>)
 8003714:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003716:	4b64      	ldr	r3, [pc, #400]	; (80038a8 <HAL_UART_MspInit+0x214>)
 8003718:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800371c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800371e:	4b62      	ldr	r3, [pc, #392]	; (80038a8 <HAL_UART_MspInit+0x214>)
 8003720:	2200      	movs	r2, #0
 8003722:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003724:	4b60      	ldr	r3, [pc, #384]	; (80038a8 <HAL_UART_MspInit+0x214>)
 8003726:	2200      	movs	r2, #0
 8003728:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800372a:	4b5f      	ldr	r3, [pc, #380]	; (80038a8 <HAL_UART_MspInit+0x214>)
 800372c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003730:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003732:	4b5d      	ldr	r3, [pc, #372]	; (80038a8 <HAL_UART_MspInit+0x214>)
 8003734:	2200      	movs	r2, #0
 8003736:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003738:	4b5b      	ldr	r3, [pc, #364]	; (80038a8 <HAL_UART_MspInit+0x214>)
 800373a:	2200      	movs	r2, #0
 800373c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800373e:	4b5a      	ldr	r3, [pc, #360]	; (80038a8 <HAL_UART_MspInit+0x214>)
 8003740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003744:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003746:	4b58      	ldr	r3, [pc, #352]	; (80038a8 <HAL_UART_MspInit+0x214>)
 8003748:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800374c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800374e:	4b56      	ldr	r3, [pc, #344]	; (80038a8 <HAL_UART_MspInit+0x214>)
 8003750:	2200      	movs	r2, #0
 8003752:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003754:	4854      	ldr	r0, [pc, #336]	; (80038a8 <HAL_UART_MspInit+0x214>)
 8003756:	f001 f83b 	bl	80047d0 <HAL_DMA_Init>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003760:	f7ff f962 	bl	8002a28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a50      	ldr	r2, [pc, #320]	; (80038a8 <HAL_UART_MspInit+0x214>)
 8003768:	639a      	str	r2, [r3, #56]	; 0x38
 800376a:	4a4f      	ldr	r2, [pc, #316]	; (80038a8 <HAL_UART_MspInit+0x214>)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003770:	4b4f      	ldr	r3, [pc, #316]	; (80038b0 <HAL_UART_MspInit+0x21c>)
 8003772:	4a50      	ldr	r2, [pc, #320]	; (80038b4 <HAL_UART_MspInit+0x220>)
 8003774:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003776:	4b4e      	ldr	r3, [pc, #312]	; (80038b0 <HAL_UART_MspInit+0x21c>)
 8003778:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800377c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800377e:	4b4c      	ldr	r3, [pc, #304]	; (80038b0 <HAL_UART_MspInit+0x21c>)
 8003780:	2240      	movs	r2, #64	; 0x40
 8003782:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003784:	4b4a      	ldr	r3, [pc, #296]	; (80038b0 <HAL_UART_MspInit+0x21c>)
 8003786:	2200      	movs	r2, #0
 8003788:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800378a:	4b49      	ldr	r3, [pc, #292]	; (80038b0 <HAL_UART_MspInit+0x21c>)
 800378c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003790:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003792:	4b47      	ldr	r3, [pc, #284]	; (80038b0 <HAL_UART_MspInit+0x21c>)
 8003794:	2200      	movs	r2, #0
 8003796:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003798:	4b45      	ldr	r3, [pc, #276]	; (80038b0 <HAL_UART_MspInit+0x21c>)
 800379a:	2200      	movs	r2, #0
 800379c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800379e:	4b44      	ldr	r3, [pc, #272]	; (80038b0 <HAL_UART_MspInit+0x21c>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80037a4:	4b42      	ldr	r3, [pc, #264]	; (80038b0 <HAL_UART_MspInit+0x21c>)
 80037a6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80037aa:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037ac:	4b40      	ldr	r3, [pc, #256]	; (80038b0 <HAL_UART_MspInit+0x21c>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80037b2:	483f      	ldr	r0, [pc, #252]	; (80038b0 <HAL_UART_MspInit+0x21c>)
 80037b4:	f001 f80c 	bl	80047d0 <HAL_DMA_Init>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80037be:	f7ff f933 	bl	8002a28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a3a      	ldr	r2, [pc, #232]	; (80038b0 <HAL_UART_MspInit+0x21c>)
 80037c6:	635a      	str	r2, [r3, #52]	; 0x34
 80037c8:	4a39      	ldr	r2, [pc, #228]	; (80038b0 <HAL_UART_MspInit+0x21c>)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80037ce:	2200      	movs	r2, #0
 80037d0:	2105      	movs	r1, #5
 80037d2:	2026      	movs	r0, #38	; 0x26
 80037d4:	f000 ffd2 	bl	800477c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037d8:	2026      	movs	r0, #38	; 0x26
 80037da:	f000 ffeb 	bl	80047b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80037de:	e058      	b.n	8003892 <HAL_UART_MspInit+0x1fe>
  else if(huart->Instance==USART3)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a34      	ldr	r2, [pc, #208]	; (80038b8 <HAL_UART_MspInit+0x224>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d153      	bne.n	8003892 <HAL_UART_MspInit+0x1fe>
    __HAL_RCC_USART3_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	4b2c      	ldr	r3, [pc, #176]	; (80038a0 <HAL_UART_MspInit+0x20c>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	4a2b      	ldr	r2, [pc, #172]	; (80038a0 <HAL_UART_MspInit+0x20c>)
 80037f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f8:	6413      	str	r3, [r2, #64]	; 0x40
 80037fa:	4b29      	ldr	r3, [pc, #164]	; (80038a0 <HAL_UART_MspInit+0x20c>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <HAL_UART_MspInit+0x20c>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	4a24      	ldr	r2, [pc, #144]	; (80038a0 <HAL_UART_MspInit+0x20c>)
 8003810:	f043 0302 	orr.w	r3, r3, #2
 8003814:	6313      	str	r3, [r2, #48]	; 0x30
 8003816:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <HAL_UART_MspInit+0x20c>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	4b1e      	ldr	r3, [pc, #120]	; (80038a0 <HAL_UART_MspInit+0x20c>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	4a1d      	ldr	r2, [pc, #116]	; (80038a0 <HAL_UART_MspInit+0x20c>)
 800382c:	f043 0308 	orr.w	r3, r3, #8
 8003830:	6313      	str	r3, [r2, #48]	; 0x30
 8003832:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <HAL_UART_MspInit+0x20c>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_USART_RX_Pin;
 800383e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003844:	2302      	movs	r3, #2
 8003846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003848:	2300      	movs	r3, #0
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800384c:	2303      	movs	r3, #3
 800384e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003850:	2307      	movs	r3, #7
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPS_USART_RX_GPIO_Port, &GPIO_InitStruct);
 8003854:	f107 031c 	add.w	r3, r7, #28
 8003858:	4619      	mov	r1, r3
 800385a:	4818      	ldr	r0, [pc, #96]	; (80038bc <HAL_UART_MspInit+0x228>)
 800385c:	f001 fbba 	bl	8004fd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPS_USART_TX_Pin;
 8003860:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003866:	2302      	movs	r3, #2
 8003868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386a:	2300      	movs	r3, #0
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800386e:	2303      	movs	r3, #3
 8003870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003872:	2307      	movs	r3, #7
 8003874:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPS_USART_TX_GPIO_Port, &GPIO_InitStruct);
 8003876:	f107 031c 	add.w	r3, r7, #28
 800387a:	4619      	mov	r1, r3
 800387c:	4810      	ldr	r0, [pc, #64]	; (80038c0 <HAL_UART_MspInit+0x22c>)
 800387e:	f001 fba9 	bl	8004fd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003882:	2200      	movs	r2, #0
 8003884:	2105      	movs	r1, #5
 8003886:	2027      	movs	r0, #39	; 0x27
 8003888:	f000 ff78 	bl	800477c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800388c:	2027      	movs	r0, #39	; 0x27
 800388e:	f000 ff91 	bl	80047b4 <HAL_NVIC_EnableIRQ>
}
 8003892:	bf00      	nop
 8003894:	3730      	adds	r7, #48	; 0x30
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40004400 	.word	0x40004400
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40020000 	.word	0x40020000
 80038a8:	20010594 	.word	0x20010594
 80038ac:	40026088 	.word	0x40026088
 80038b0:	20010900 	.word	0x20010900
 80038b4:	400260a0 	.word	0x400260a0
 80038b8:	40004800 	.word	0x40004800
 80038bc:	40020400 	.word	0x40020400
 80038c0:	40020c00 	.word	0x40020c00

080038c4 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08a      	sub	sp, #40	; 0x28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038cc:	f107 0314 	add.w	r3, r7, #20
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	60da      	str	r2, [r3, #12]
 80038da:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038e4:	d147      	bne.n	8003976 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	4b25      	ldr	r3, [pc, #148]	; (8003980 <HAL_HCD_MspInit+0xbc>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	4a24      	ldr	r2, [pc, #144]	; (8003980 <HAL_HCD_MspInit+0xbc>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	6313      	str	r3, [r2, #48]	; 0x30
 80038f6:	4b22      	ldr	r3, [pc, #136]	; (8003980 <HAL_HCD_MspInit+0xbc>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8003902:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003908:	2300      	movs	r3, #0
 800390a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390c:	2300      	movs	r3, #0
 800390e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003910:	f107 0314 	add.w	r3, r7, #20
 8003914:	4619      	mov	r1, r3
 8003916:	481b      	ldr	r0, [pc, #108]	; (8003984 <HAL_HCD_MspInit+0xc0>)
 8003918:	f001 fb5c 	bl	8004fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800391c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003922:	2302      	movs	r3, #2
 8003924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392a:	2300      	movs	r3, #0
 800392c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800392e:	230a      	movs	r3, #10
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003932:	f107 0314 	add.w	r3, r7, #20
 8003936:	4619      	mov	r1, r3
 8003938:	4812      	ldr	r0, [pc, #72]	; (8003984 <HAL_HCD_MspInit+0xc0>)
 800393a:	f001 fb4b 	bl	8004fd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800393e:	4b10      	ldr	r3, [pc, #64]	; (8003980 <HAL_HCD_MspInit+0xbc>)
 8003940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003942:	4a0f      	ldr	r2, [pc, #60]	; (8003980 <HAL_HCD_MspInit+0xbc>)
 8003944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003948:	6353      	str	r3, [r2, #52]	; 0x34
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <HAL_HCD_MspInit+0xbc>)
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <HAL_HCD_MspInit+0xbc>)
 8003954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003958:	6453      	str	r3, [r2, #68]	; 0x44
 800395a:	4b09      	ldr	r3, [pc, #36]	; (8003980 <HAL_HCD_MspInit+0xbc>)
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8003966:	2200      	movs	r2, #0
 8003968:	2105      	movs	r1, #5
 800396a:	2043      	movs	r0, #67	; 0x43
 800396c:	f000 ff06 	bl	800477c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003970:	2043      	movs	r0, #67	; 0x43
 8003972:	f000 ff1f 	bl	80047b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003976:	bf00      	nop
 8003978:	3728      	adds	r7, #40	; 0x28
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40023800 	.word	0x40023800
 8003984:	40020000 	.word	0x40020000

08003988 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08c      	sub	sp, #48	; 0x30
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003994:	2300      	movs	r3, #0
 8003996:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8003998:	2200      	movs	r2, #0
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	2037      	movs	r0, #55	; 0x37
 800399e:	f000 feed 	bl	800477c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80039a2:	2037      	movs	r0, #55	; 0x37
 80039a4:	f000 ff06 	bl	80047b4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	4b1f      	ldr	r3, [pc, #124]	; (8003a2c <HAL_InitTick+0xa4>)
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	4a1e      	ldr	r2, [pc, #120]	; (8003a2c <HAL_InitTick+0xa4>)
 80039b2:	f043 0320 	orr.w	r3, r3, #32
 80039b6:	6413      	str	r3, [r2, #64]	; 0x40
 80039b8:	4b1c      	ldr	r3, [pc, #112]	; (8003a2c <HAL_InitTick+0xa4>)
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80039c4:	f107 0210 	add.w	r2, r7, #16
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	4611      	mov	r1, r2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f004 fa5e 	bl	8007e90 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80039d4:	f004 fa34 	bl	8007e40 <HAL_RCC_GetPCLK1Freq>
 80039d8:	4603      	mov	r3, r0
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80039de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e0:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <HAL_InitTick+0xa8>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	0c9b      	lsrs	r3, r3, #18
 80039e8:	3b01      	subs	r3, #1
 80039ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80039ec:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <HAL_InitTick+0xac>)
 80039ee:	4a12      	ldr	r2, [pc, #72]	; (8003a38 <HAL_InitTick+0xb0>)
 80039f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80039f2:	4b10      	ldr	r3, [pc, #64]	; (8003a34 <HAL_InitTick+0xac>)
 80039f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039f8:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80039fa:	4a0e      	ldr	r2, [pc, #56]	; (8003a34 <HAL_InitTick+0xac>)
 80039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fe:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <HAL_InitTick+0xac>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a06:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <HAL_InitTick+0xac>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8003a0c:	4809      	ldr	r0, [pc, #36]	; (8003a34 <HAL_InitTick+0xac>)
 8003a0e:	f004 fc3a 	bl	8008286 <HAL_TIM_Base_Init>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d104      	bne.n	8003a22 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8003a18:	4806      	ldr	r0, [pc, #24]	; (8003a34 <HAL_InitTick+0xac>)
 8003a1a:	f004 fc83 	bl	8008324 <HAL_TIM_Base_Start_IT>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	e000      	b.n	8003a24 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3730      	adds	r7, #48	; 0x30
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	431bde83 	.word	0x431bde83
 8003a34:	20010df0 	.word	0x20010df0
 8003a38:	40001400 	.word	0x40001400

08003a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a40:	e7fe      	b.n	8003a40 <NMI_Handler+0x4>

08003a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a46:	e7fe      	b.n	8003a46 <HardFault_Handler+0x4>

08003a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a4c:	e7fe      	b.n	8003a4c <MemManage_Handler+0x4>

08003a4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a52:	e7fe      	b.n	8003a52 <BusFault_Handler+0x4>

08003a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a58:	e7fe      	b.n	8003a58 <UsageFault_Handler+0x4>

08003a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f001 fc7f 	bl	8005370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003a7c:	4802      	ldr	r0, [pc, #8]	; (8003a88 <DMA1_Stream5_IRQHandler+0x10>)
 8003a7e:	f001 f83f 	bl	8004b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20010594 	.word	0x20010594

08003a8c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003a90:	4802      	ldr	r0, [pc, #8]	; (8003a9c <DMA1_Stream6_IRQHandler+0x10>)
 8003a92:	f001 f835 	bl	8004b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20010900 	.word	0x20010900

08003aa0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003aa4:	4802      	ldr	r0, [pc, #8]	; (8003ab0 <TIM3_IRQHandler+0x10>)
 8003aa6:	f004 fe1d 	bl	80086e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20010864 	.word	0x20010864

08003ab4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ab8:	4802      	ldr	r0, [pc, #8]	; (8003ac4 <USART2_IRQHandler+0x10>)
 8003aba:	f005 fe0f 	bl	80096dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20010d50 	.word	0x20010d50

08003ac8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003acc:	4802      	ldr	r0, [pc, #8]	; (8003ad8 <USART3_IRQHandler+0x10>)
 8003ace:	f005 fe05 	bl	80096dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20010608 	.word	0x20010608

08003adc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003ae0:	4802      	ldr	r0, [pc, #8]	; (8003aec <TIM7_IRQHandler+0x10>)
 8003ae2:	f004 fdff 	bl	80086e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20010df0 	.word	0x20010df0

08003af0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003af4:	4802      	ldr	r0, [pc, #8]	; (8003b00 <DMA2_Stream0_IRQHandler+0x10>)
 8003af6:	f001 f803 	bl	8004b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20010960 	.word	0x20010960

08003b04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003b08:	4802      	ldr	r0, [pc, #8]	; (8003b14 <OTG_FS_IRQHandler+0x10>)
 8003b0a:	f001 fcb6 	bl	800547a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20010a4c 	.word	0x20010a4c

08003b18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
	return 1;
 8003b1c:	2301      	movs	r3, #1
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <_kill>:

int _kill(int pid, int sig)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b32:	f016 fa91 	bl	801a058 <__errno>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2216      	movs	r2, #22
 8003b3a:	601a      	str	r2, [r3, #0]
	return -1;
 8003b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_exit>:

void _exit (int status)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ffe7 	bl	8003b28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b5a:	e7fe      	b.n	8003b5a <_exit+0x12>

08003b5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e00a      	b.n	8003b84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b6e:	f3af 8000 	nop.w
 8003b72:	4601      	mov	r1, r0
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	60ba      	str	r2, [r7, #8]
 8003b7a:	b2ca      	uxtb	r2, r1
 8003b7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	3301      	adds	r3, #1
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	dbf0      	blt.n	8003b6e <_read+0x12>
	}

return len;
 8003b8c:	687b      	ldr	r3, [r7, #4]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b086      	sub	sp, #24
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	e009      	b.n	8003bbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	60ba      	str	r2, [r7, #8]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	dbf1      	blt.n	8003ba8 <_write+0x12>
	}
	return len;
 8003bc4:	687b      	ldr	r3, [r7, #4]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <_close>:

int _close(int file)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
	return -1;
 8003bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bf6:	605a      	str	r2, [r3, #4]
	return 0;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <_isatty>:

int _isatty(int file)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
	return 1;
 8003c0e:	2301      	movs	r3, #1
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
	return 0;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c40:	4a14      	ldr	r2, [pc, #80]	; (8003c94 <_sbrk+0x5c>)
 8003c42:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <_sbrk+0x60>)
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c4c:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <_sbrk+0x64>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d102      	bne.n	8003c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c54:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <_sbrk+0x64>)
 8003c56:	4a12      	ldr	r2, [pc, #72]	; (8003ca0 <_sbrk+0x68>)
 8003c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c5a:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <_sbrk+0x64>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4413      	add	r3, r2
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d207      	bcs.n	8003c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c68:	f016 f9f6 	bl	801a058 <__errno>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	220c      	movs	r2, #12
 8003c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c76:	e009      	b.n	8003c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c78:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <_sbrk+0x64>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c7e:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <_sbrk+0x64>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4413      	add	r3, r2
 8003c86:	4a05      	ldr	r2, [pc, #20]	; (8003c9c <_sbrk+0x64>)
 8003c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20020000 	.word	0x20020000
 8003c98:	00000400 	.word	0x00000400
 8003c9c:	2000810c 	.word	0x2000810c
 8003ca0:	20016030 	.word	0x20016030

08003ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ca8:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <SystemInit+0x20>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cae:	4a05      	ldr	r2, [pc, #20]	; (8003cc4 <SystemInit+0x20>)
 8003cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cb8:	bf00      	nop
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	e000ed00 	.word	0xe000ed00

08003cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ccc:	480d      	ldr	r0, [pc, #52]	; (8003d04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cce:	490e      	ldr	r1, [pc, #56]	; (8003d08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003cd0:	4a0e      	ldr	r2, [pc, #56]	; (8003d0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cd4:	e002      	b.n	8003cdc <LoopCopyDataInit>

08003cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cda:	3304      	adds	r3, #4

08003cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ce0:	d3f9      	bcc.n	8003cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ce2:	4a0b      	ldr	r2, [pc, #44]	; (8003d10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ce4:	4c0b      	ldr	r4, [pc, #44]	; (8003d14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ce8:	e001      	b.n	8003cee <LoopFillZerobss>

08003cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cec:	3204      	adds	r2, #4

08003cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cf0:	d3fb      	bcc.n	8003cea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003cf2:	f7ff ffd7 	bl	8003ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cf6:	f016 fa69 	bl	801a1cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cfa:	f7fd fcdb 	bl	80016b4 <main>
  bx  lr    
 8003cfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d08:	20000390 	.word	0x20000390
  ldr r2, =_sidata
 8003d0c:	080205f0 	.word	0x080205f0
  ldr r2, =_sbss
 8003d10:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 8003d14:	20016030 	.word	0x20016030

08003d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d18:	e7fe      	b.n	8003d18 <ADC_IRQHandler>
	...

08003d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d20:	4b0e      	ldr	r3, [pc, #56]	; (8003d5c <HAL_Init+0x40>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a0d      	ldr	r2, [pc, #52]	; (8003d5c <HAL_Init+0x40>)
 8003d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <HAL_Init+0x40>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <HAL_Init+0x40>)
 8003d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d38:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <HAL_Init+0x40>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a07      	ldr	r2, [pc, #28]	; (8003d5c <HAL_Init+0x40>)
 8003d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d44:	2003      	movs	r0, #3
 8003d46:	f000 fd0e 	bl	8004766 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d4a:	200f      	movs	r0, #15
 8003d4c:	f7ff fe1c 	bl	8003988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d50:	f7ff fa8a 	bl	8003268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40023c00 	.word	0x40023c00

08003d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d64:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <HAL_IncTick+0x20>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <HAL_IncTick+0x24>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4413      	add	r3, r2
 8003d70:	4a04      	ldr	r2, [pc, #16]	; (8003d84 <HAL_IncTick+0x24>)
 8003d72:	6013      	str	r3, [r2, #0]
}
 8003d74:	bf00      	nop
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	2000000c 	.word	0x2000000c
 8003d84:	20010e38 	.word	0x20010e38

08003d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d8c:	4b03      	ldr	r3, [pc, #12]	; (8003d9c <HAL_GetTick+0x14>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20010e38 	.word	0x20010e38

08003da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003da8:	f7ff ffee 	bl	8003d88 <HAL_GetTick>
 8003dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003db8:	d005      	beq.n	8003dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dba:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <HAL_Delay+0x44>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003dc6:	bf00      	nop
 8003dc8:	f7ff ffde 	bl	8003d88 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d8f7      	bhi.n	8003dc8 <HAL_Delay+0x28>
  {
  }
}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	2000000c 	.word	0x2000000c

08003de8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e033      	b.n	8003e66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d109      	bne.n	8003e1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff fa5a 	bl	80032c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d118      	bne.n	8003e58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e2e:	f023 0302 	bic.w	r3, r3, #2
 8003e32:	f043 0202 	orr.w	r2, r3, #2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fa68 	bl	8004310 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f023 0303 	bic.w	r3, r3, #3
 8003e4e:	f043 0201 	orr.w	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40
 8003e56:	e001      	b.n	8003e5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_ADC_Start_DMA+0x1e>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e0e9      	b.n	8004062 <HAL_ADC_Start_DMA+0x1f2>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d018      	beq.n	8003ed6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003eb4:	4b6d      	ldr	r3, [pc, #436]	; (800406c <HAL_ADC_Start_DMA+0x1fc>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a6d      	ldr	r2, [pc, #436]	; (8004070 <HAL_ADC_Start_DMA+0x200>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	0c9a      	lsrs	r2, r3, #18
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	4413      	add	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003ec8:	e002      	b.n	8003ed0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f9      	bne.n	8003eca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee4:	d107      	bne.n	8003ef6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ef4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	f040 80a1 	bne.w	8004048 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d007      	beq.n	8003f38 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f44:	d106      	bne.n	8003f54 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	f023 0206 	bic.w	r2, r3, #6
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	645a      	str	r2, [r3, #68]	; 0x44
 8003f52:	e002      	b.n	8003f5a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f62:	4b44      	ldr	r3, [pc, #272]	; (8004074 <HAL_ADC_Start_DMA+0x204>)
 8003f64:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	4a43      	ldr	r2, [pc, #268]	; (8004078 <HAL_ADC_Start_DMA+0x208>)
 8003f6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	4a42      	ldr	r2, [pc, #264]	; (800407c <HAL_ADC_Start_DMA+0x20c>)
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	4a41      	ldr	r2, [pc, #260]	; (8004080 <HAL_ADC_Start_DMA+0x210>)
 8003f7c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f86:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003f96:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	334c      	adds	r3, #76	; 0x4c
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f000 fcb8 	bl	800492c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d12a      	bne.n	800401e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a2d      	ldr	r2, [pc, #180]	; (8004084 <HAL_ADC_Start_DMA+0x214>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d015      	beq.n	8003ffe <HAL_ADC_Start_DMA+0x18e>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a2c      	ldr	r2, [pc, #176]	; (8004088 <HAL_ADC_Start_DMA+0x218>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d105      	bne.n	8003fe8 <HAL_ADC_Start_DMA+0x178>
 8003fdc:	4b25      	ldr	r3, [pc, #148]	; (8004074 <HAL_ADC_Start_DMA+0x204>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 031f 	and.w	r3, r3, #31
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a27      	ldr	r2, [pc, #156]	; (800408c <HAL_ADC_Start_DMA+0x21c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d136      	bne.n	8004060 <HAL_ADC_Start_DMA+0x1f0>
 8003ff2:	4b20      	ldr	r3, [pc, #128]	; (8004074 <HAL_ADC_Start_DMA+0x204>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d130      	bne.n	8004060 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d129      	bne.n	8004060 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800401a:	609a      	str	r2, [r3, #8]
 800401c:	e020      	b.n	8004060 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a18      	ldr	r2, [pc, #96]	; (8004084 <HAL_ADC_Start_DMA+0x214>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d11b      	bne.n	8004060 <HAL_ADC_Start_DMA+0x1f0>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d114      	bne.n	8004060 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004044:	609a      	str	r2, [r3, #8]
 8004046:	e00b      	b.n	8004060 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	f043 0210 	orr.w	r2, r3, #16
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004058:	f043 0201 	orr.w	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000004 	.word	0x20000004
 8004070:	431bde83 	.word	0x431bde83
 8004074:	40012300 	.word	0x40012300
 8004078:	08004509 	.word	0x08004509
 800407c:	080045c3 	.word	0x080045c3
 8004080:	080045df 	.word	0x080045df
 8004084:	40012000 	.word	0x40012000
 8004088:	40012100 	.word	0x40012100
 800408c:	40012200 	.word	0x40012200

08004090 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x1c>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e105      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x228>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b09      	cmp	r3, #9
 80040f6:	d925      	bls.n	8004144 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68d9      	ldr	r1, [r3, #12]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	461a      	mov	r2, r3
 8004106:	4613      	mov	r3, r2
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	4413      	add	r3, r2
 800410c:	3b1e      	subs	r3, #30
 800410e:	2207      	movs	r2, #7
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43da      	mvns	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	400a      	ands	r2, r1
 800411c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68d9      	ldr	r1, [r3, #12]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	b29b      	uxth	r3, r3
 800412e:	4618      	mov	r0, r3
 8004130:	4603      	mov	r3, r0
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	4403      	add	r3, r0
 8004136:	3b1e      	subs	r3, #30
 8004138:	409a      	lsls	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	60da      	str	r2, [r3, #12]
 8004142:	e022      	b.n	800418a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6919      	ldr	r1, [r3, #16]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	4613      	mov	r3, r2
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4413      	add	r3, r2
 8004158:	2207      	movs	r2, #7
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	43da      	mvns	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	400a      	ands	r2, r1
 8004166:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6919      	ldr	r1, [r3, #16]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	b29b      	uxth	r3, r3
 8004178:	4618      	mov	r0, r3
 800417a:	4603      	mov	r3, r0
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	4403      	add	r3, r0
 8004180:	409a      	lsls	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b06      	cmp	r3, #6
 8004190:	d824      	bhi.n	80041dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	3b05      	subs	r3, #5
 80041a4:	221f      	movs	r2, #31
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43da      	mvns	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	400a      	ands	r2, r1
 80041b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	4618      	mov	r0, r3
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	3b05      	subs	r3, #5
 80041ce:	fa00 f203 	lsl.w	r2, r0, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	635a      	str	r2, [r3, #52]	; 0x34
 80041da:	e04c      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b0c      	cmp	r3, #12
 80041e2:	d824      	bhi.n	800422e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	3b23      	subs	r3, #35	; 0x23
 80041f6:	221f      	movs	r2, #31
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	43da      	mvns	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	400a      	ands	r2, r1
 8004204:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	4618      	mov	r0, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	3b23      	subs	r3, #35	; 0x23
 8004220:	fa00 f203 	lsl.w	r2, r0, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	631a      	str	r2, [r3, #48]	; 0x30
 800422c:	e023      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	3b41      	subs	r3, #65	; 0x41
 8004240:	221f      	movs	r2, #31
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	43da      	mvns	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	400a      	ands	r2, r1
 800424e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	4618      	mov	r0, r3
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	3b41      	subs	r3, #65	; 0x41
 800426a:	fa00 f203 	lsl.w	r2, r0, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004276:	4b22      	ldr	r3, [pc, #136]	; (8004300 <HAL_ADC_ConfigChannel+0x234>)
 8004278:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a21      	ldr	r2, [pc, #132]	; (8004304 <HAL_ADC_ConfigChannel+0x238>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d109      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x1cc>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b12      	cmp	r3, #18
 800428a:	d105      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a19      	ldr	r2, [pc, #100]	; (8004304 <HAL_ADC_ConfigChannel+0x238>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d123      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x21e>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b10      	cmp	r3, #16
 80042a8:	d003      	beq.n	80042b2 <HAL_ADC_ConfigChannel+0x1e6>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b11      	cmp	r3, #17
 80042b0:	d11b      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b10      	cmp	r3, #16
 80042c4:	d111      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042c6:	4b10      	ldr	r3, [pc, #64]	; (8004308 <HAL_ADC_ConfigChannel+0x23c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a10      	ldr	r2, [pc, #64]	; (800430c <HAL_ADC_ConfigChannel+0x240>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	0c9a      	lsrs	r2, r3, #18
 80042d2:	4613      	mov	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042dc:	e002      	b.n	80042e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f9      	bne.n	80042de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	40012300 	.word	0x40012300
 8004304:	40012000 	.word	0x40012000
 8004308:	20000004 	.word	0x20000004
 800430c:	431bde83 	.word	0x431bde83

08004310 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004318:	4b79      	ldr	r3, [pc, #484]	; (8004500 <ADC_Init+0x1f0>)
 800431a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	431a      	orrs	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004344:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6859      	ldr	r1, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	021a      	lsls	r2, r3, #8
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004368:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6859      	ldr	r1, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800438a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6899      	ldr	r1, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	4a58      	ldr	r2, [pc, #352]	; (8004504 <ADC_Init+0x1f4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d022      	beq.n	80043ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6899      	ldr	r1, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6899      	ldr	r1, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	e00f      	b.n	800440e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800440c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0202 	bic.w	r2, r2, #2
 800441c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6899      	ldr	r1, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	7e1b      	ldrb	r3, [r3, #24]
 8004428:	005a      	lsls	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01b      	beq.n	8004474 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800444a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800445a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6859      	ldr	r1, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	3b01      	subs	r3, #1
 8004468:	035a      	lsls	r2, r3, #13
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
 8004472:	e007      	b.n	8004484 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004482:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004492:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	3b01      	subs	r3, #1
 80044a0:	051a      	lsls	r2, r3, #20
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6899      	ldr	r1, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044c6:	025a      	lsls	r2, r3, #9
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6899      	ldr	r1, [r3, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	029a      	lsls	r2, r3, #10
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	609a      	str	r2, [r3, #8]
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	40012300 	.word	0x40012300
 8004504:	0f000001 	.word	0x0f000001

08004508 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800451e:	2b00      	cmp	r3, #0
 8004520:	d13c      	bne.n	800459c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d12b      	bne.n	8004594 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004540:	2b00      	cmp	r3, #0
 8004542:	d127      	bne.n	8004594 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800454e:	2b00      	cmp	r3, #0
 8004550:	d006      	beq.n	8004560 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800455c:	2b00      	cmp	r3, #0
 800455e:	d119      	bne.n	8004594 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0220 	bic.w	r2, r2, #32
 800456e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d105      	bne.n	8004594 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	f043 0201 	orr.w	r2, r3, #1
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f7ff fd7b 	bl	8004090 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800459a:	e00e      	b.n	80045ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f7ff fd85 	bl	80040b8 <HAL_ADC_ErrorCallback>
}
 80045ae:	e004      	b.n	80045ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	4798      	blx	r3
}
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f7ff fd67 	bl	80040a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045d6:	bf00      	nop
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b084      	sub	sp, #16
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2240      	movs	r2, #64	; 0x40
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	f043 0204 	orr.w	r2, r3, #4
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f7ff fd5a 	bl	80040b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800461c:	4b0c      	ldr	r3, [pc, #48]	; (8004650 <__NVIC_SetPriorityGrouping+0x44>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004628:	4013      	ands	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800463c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800463e:	4a04      	ldr	r2, [pc, #16]	; (8004650 <__NVIC_SetPriorityGrouping+0x44>)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	60d3      	str	r3, [r2, #12]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	e000ed00 	.word	0xe000ed00

08004654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004658:	4b04      	ldr	r3, [pc, #16]	; (800466c <__NVIC_GetPriorityGrouping+0x18>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	0a1b      	lsrs	r3, r3, #8
 800465e:	f003 0307 	and.w	r3, r3, #7
}
 8004662:	4618      	mov	r0, r3
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	e000ed00 	.word	0xe000ed00

08004670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800467a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467e:	2b00      	cmp	r3, #0
 8004680:	db0b      	blt.n	800469a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	f003 021f 	and.w	r2, r3, #31
 8004688:	4907      	ldr	r1, [pc, #28]	; (80046a8 <__NVIC_EnableIRQ+0x38>)
 800468a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	2001      	movs	r0, #1
 8004692:	fa00 f202 	lsl.w	r2, r0, r2
 8004696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	e000e100 	.word	0xe000e100

080046ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	6039      	str	r1, [r7, #0]
 80046b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	db0a      	blt.n	80046d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	490c      	ldr	r1, [pc, #48]	; (80046f8 <__NVIC_SetPriority+0x4c>)
 80046c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ca:	0112      	lsls	r2, r2, #4
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	440b      	add	r3, r1
 80046d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046d4:	e00a      	b.n	80046ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	4908      	ldr	r1, [pc, #32]	; (80046fc <__NVIC_SetPriority+0x50>)
 80046dc:	79fb      	ldrb	r3, [r7, #7]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	3b04      	subs	r3, #4
 80046e4:	0112      	lsls	r2, r2, #4
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	440b      	add	r3, r1
 80046ea:	761a      	strb	r2, [r3, #24]
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	e000e100 	.word	0xe000e100
 80046fc:	e000ed00 	.word	0xe000ed00

08004700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004700:	b480      	push	{r7}
 8004702:	b089      	sub	sp, #36	; 0x24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f1c3 0307 	rsb	r3, r3, #7
 800471a:	2b04      	cmp	r3, #4
 800471c:	bf28      	it	cs
 800471e:	2304      	movcs	r3, #4
 8004720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	3304      	adds	r3, #4
 8004726:	2b06      	cmp	r3, #6
 8004728:	d902      	bls.n	8004730 <NVIC_EncodePriority+0x30>
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3b03      	subs	r3, #3
 800472e:	e000      	b.n	8004732 <NVIC_EncodePriority+0x32>
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004734:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	43da      	mvns	r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	401a      	ands	r2, r3
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004748:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	fa01 f303 	lsl.w	r3, r1, r3
 8004752:	43d9      	mvns	r1, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004758:	4313      	orrs	r3, r2
         );
}
 800475a:	4618      	mov	r0, r3
 800475c:	3724      	adds	r7, #36	; 0x24
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ff4c 	bl	800460c <__NVIC_SetPriorityGrouping>
}
 8004774:	bf00      	nop
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800478e:	f7ff ff61 	bl	8004654 <__NVIC_GetPriorityGrouping>
 8004792:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	6978      	ldr	r0, [r7, #20]
 800479a:	f7ff ffb1 	bl	8004700 <NVIC_EncodePriority>
 800479e:	4602      	mov	r2, r0
 80047a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047a4:	4611      	mov	r1, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff ff80 	bl	80046ac <__NVIC_SetPriority>
}
 80047ac:	bf00      	nop
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff ff54 	bl	8004670 <__NVIC_EnableIRQ>
}
 80047c8:	bf00      	nop
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047dc:	f7ff fad4 	bl	8003d88 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e099      	b.n	8004920 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0201 	bic.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800480c:	e00f      	b.n	800482e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800480e:	f7ff fabb 	bl	8003d88 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b05      	cmp	r3, #5
 800481a:	d908      	bls.n	800482e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2203      	movs	r2, #3
 8004826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e078      	b.n	8004920 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1e8      	bne.n	800480e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4b38      	ldr	r3, [pc, #224]	; (8004928 <HAL_DMA_Init+0x158>)
 8004848:	4013      	ands	r3, r2
 800484a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800485a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	2b04      	cmp	r3, #4
 8004886:	d107      	bne.n	8004898 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	4313      	orrs	r3, r2
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f023 0307 	bic.w	r3, r3, #7
 80048ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d117      	bne.n	80048f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00e      	beq.n	80048f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fb01 	bl	8004edc <DMA_CheckFifoParam>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2240      	movs	r2, #64	; 0x40
 80048e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048ee:	2301      	movs	r3, #1
 80048f0:	e016      	b.n	8004920 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fab8 	bl	8004e70 <DMA_CalcBaseAndBitshift>
 8004900:	4603      	mov	r3, r0
 8004902:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004908:	223f      	movs	r2, #63	; 0x3f
 800490a:	409a      	lsls	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	f010803f 	.word	0xf010803f

0800492c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004942:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_DMA_Start_IT+0x26>
 800494e:	2302      	movs	r3, #2
 8004950:	e040      	b.n	80049d4 <HAL_DMA_Start_IT+0xa8>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b01      	cmp	r3, #1
 8004964:	d12f      	bne.n	80049c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2202      	movs	r2, #2
 800496a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	68b9      	ldr	r1, [r7, #8]
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 fa4a 	bl	8004e14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004984:	223f      	movs	r2, #63	; 0x3f
 8004986:	409a      	lsls	r2, r3
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0216 	orr.w	r2, r2, #22
 800499a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0208 	orr.w	r2, r2, #8
 80049b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	e005      	b.n	80049d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80049ce:	2302      	movs	r3, #2
 80049d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049ea:	f7ff f9cd 	bl	8003d88 <HAL_GetTick>
 80049ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d008      	beq.n	8004a0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2280      	movs	r2, #128	; 0x80
 8004a00:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e052      	b.n	8004ab4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0216 	bic.w	r2, r2, #22
 8004a1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695a      	ldr	r2, [r3, #20]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d103      	bne.n	8004a3e <HAL_DMA_Abort+0x62>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d007      	beq.n	8004a4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0208 	bic.w	r2, r2, #8
 8004a4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0201 	bic.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a5e:	e013      	b.n	8004a88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a60:	f7ff f992 	bl	8003d88 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b05      	cmp	r3, #5
 8004a6c:	d90c      	bls.n	8004a88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2220      	movs	r2, #32
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2203      	movs	r2, #3
 8004a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e015      	b.n	8004ab4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e4      	bne.n	8004a60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9a:	223f      	movs	r2, #63	; 0x3f
 8004a9c:	409a      	lsls	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d004      	beq.n	8004ada <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2280      	movs	r2, #128	; 0x80
 8004ad4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e00c      	b.n	8004af4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2205      	movs	r2, #5
 8004ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0201 	bic.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b0c:	4b92      	ldr	r3, [pc, #584]	; (8004d58 <HAL_DMA_IRQHandler+0x258>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a92      	ldr	r2, [pc, #584]	; (8004d5c <HAL_DMA_IRQHandler+0x25c>)
 8004b12:	fba2 2303 	umull	r2, r3, r2, r3
 8004b16:	0a9b      	lsrs	r3, r3, #10
 8004b18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2a:	2208      	movs	r2, #8
 8004b2c:	409a      	lsls	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4013      	ands	r3, r2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d01a      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d013      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0204 	bic.w	r2, r2, #4
 8004b52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b58:	2208      	movs	r2, #8
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b64:	f043 0201 	orr.w	r2, r3, #1
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b70:	2201      	movs	r2, #1
 8004b72:	409a      	lsls	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d012      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8e:	2201      	movs	r2, #1
 8004b90:	409a      	lsls	r2, r3
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9a:	f043 0202 	orr.w	r2, r3, #2
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba6:	2204      	movs	r2, #4
 8004ba8:	409a      	lsls	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4013      	ands	r3, r2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d012      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00b      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd0:	f043 0204 	orr.w	r2, r3, #4
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bdc:	2210      	movs	r2, #16
 8004bde:	409a      	lsls	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4013      	ands	r3, r2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d043      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d03c      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfa:	2210      	movs	r2, #16
 8004bfc:	409a      	lsls	r2, r3
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d018      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d108      	bne.n	8004c30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d024      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	4798      	blx	r3
 8004c2e:	e01f      	b.n	8004c70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01b      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	4798      	blx	r3
 8004c40:	e016      	b.n	8004c70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d107      	bne.n	8004c60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0208 	bic.w	r2, r2, #8
 8004c5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c74:	2220      	movs	r2, #32
 8004c76:	409a      	lsls	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 808e 	beq.w	8004d9e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8086 	beq.w	8004d9e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c96:	2220      	movs	r2, #32
 8004c98:	409a      	lsls	r2, r3
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b05      	cmp	r3, #5
 8004ca8:	d136      	bne.n	8004d18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0216 	bic.w	r2, r2, #22
 8004cb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695a      	ldr	r2, [r3, #20]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d103      	bne.n	8004cda <HAL_DMA_IRQHandler+0x1da>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d007      	beq.n	8004cea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0208 	bic.w	r2, r2, #8
 8004ce8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cee:	223f      	movs	r2, #63	; 0x3f
 8004cf0:	409a      	lsls	r2, r3
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d07d      	beq.n	8004e0a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	4798      	blx	r3
        }
        return;
 8004d16:	e078      	b.n	8004e0a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d01c      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d108      	bne.n	8004d46 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d030      	beq.n	8004d9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	4798      	blx	r3
 8004d44:	e02b      	b.n	8004d9e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d027      	beq.n	8004d9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	4798      	blx	r3
 8004d56:	e022      	b.n	8004d9e <HAL_DMA_IRQHandler+0x29e>
 8004d58:	20000004 	.word	0x20000004
 8004d5c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10f      	bne.n	8004d8e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0210 	bic.w	r2, r2, #16
 8004d7c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d032      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d022      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2205      	movs	r2, #5
 8004db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0201 	bic.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d307      	bcc.n	8004de6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f2      	bne.n	8004dca <HAL_DMA_IRQHandler+0x2ca>
 8004de4:	e000      	b.n	8004de8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004de6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	4798      	blx	r3
 8004e08:	e000      	b.n	8004e0c <HAL_DMA_IRQHandler+0x30c>
        return;
 8004e0a:	bf00      	nop
    }
  }
}
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop

08004e14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b40      	cmp	r3, #64	; 0x40
 8004e40:	d108      	bne.n	8004e54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e52:	e007      	b.n	8004e64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	60da      	str	r2, [r3, #12]
}
 8004e64:	bf00      	nop
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	3b10      	subs	r3, #16
 8004e80:	4a14      	ldr	r2, [pc, #80]	; (8004ed4 <DMA_CalcBaseAndBitshift+0x64>)
 8004e82:	fba2 2303 	umull	r2, r3, r2, r3
 8004e86:	091b      	lsrs	r3, r3, #4
 8004e88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e8a:	4a13      	ldr	r2, [pc, #76]	; (8004ed8 <DMA_CalcBaseAndBitshift+0x68>)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d909      	bls.n	8004eb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ea6:	f023 0303 	bic.w	r3, r3, #3
 8004eaa:	1d1a      	adds	r2, r3, #4
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	659a      	str	r2, [r3, #88]	; 0x58
 8004eb0:	e007      	b.n	8004ec2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004eba:	f023 0303 	bic.w	r3, r3, #3
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	aaaaaaab 	.word	0xaaaaaaab
 8004ed8:	0801f6d8 	.word	0x0801f6d8

08004edc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d11f      	bne.n	8004f36 <DMA_CheckFifoParam+0x5a>
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d856      	bhi.n	8004faa <DMA_CheckFifoParam+0xce>
 8004efc:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <DMA_CheckFifoParam+0x28>)
 8004efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f02:	bf00      	nop
 8004f04:	08004f15 	.word	0x08004f15
 8004f08:	08004f27 	.word	0x08004f27
 8004f0c:	08004f15 	.word	0x08004f15
 8004f10:	08004fab 	.word	0x08004fab
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d046      	beq.n	8004fae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f24:	e043      	b.n	8004fae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f2e:	d140      	bne.n	8004fb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f34:	e03d      	b.n	8004fb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f3e:	d121      	bne.n	8004f84 <DMA_CheckFifoParam+0xa8>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	d837      	bhi.n	8004fb6 <DMA_CheckFifoParam+0xda>
 8004f46:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <DMA_CheckFifoParam+0x70>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004f5d 	.word	0x08004f5d
 8004f50:	08004f63 	.word	0x08004f63
 8004f54:	08004f5d 	.word	0x08004f5d
 8004f58:	08004f75 	.word	0x08004f75
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f60:	e030      	b.n	8004fc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d025      	beq.n	8004fba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f72:	e022      	b.n	8004fba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f7c:	d11f      	bne.n	8004fbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f82:	e01c      	b.n	8004fbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d903      	bls.n	8004f92 <DMA_CheckFifoParam+0xb6>
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d003      	beq.n	8004f98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f90:	e018      	b.n	8004fc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	73fb      	strb	r3, [r7, #15]
      break;
 8004f96:	e015      	b.n	8004fc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00e      	beq.n	8004fc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fa8:	e00b      	b.n	8004fc2 <DMA_CheckFifoParam+0xe6>
      break;
 8004faa:	bf00      	nop
 8004fac:	e00a      	b.n	8004fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fae:	bf00      	nop
 8004fb0:	e008      	b.n	8004fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fb2:	bf00      	nop
 8004fb4:	e006      	b.n	8004fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fb6:	bf00      	nop
 8004fb8:	e004      	b.n	8004fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fba:	bf00      	nop
 8004fbc:	e002      	b.n	8004fc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004fbe:	bf00      	nop
 8004fc0:	e000      	b.n	8004fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fc2:	bf00      	nop
    }
  } 
  
  return status; 
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop

08004fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b089      	sub	sp, #36	; 0x24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	e16b      	b.n	80052c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4013      	ands	r3, r2
 8005002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	429a      	cmp	r2, r3
 800500a:	f040 815a 	bne.w	80052c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	2b01      	cmp	r3, #1
 8005018:	d005      	beq.n	8005026 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005022:	2b02      	cmp	r3, #2
 8005024:	d130      	bne.n	8005088 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	2203      	movs	r2, #3
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	43db      	mvns	r3, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	4013      	ands	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	fa02 f303 	lsl.w	r3, r2, r3
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	4313      	orrs	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800505c:	2201      	movs	r2, #1
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	43db      	mvns	r3, r3
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	4013      	ands	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	091b      	lsrs	r3, r3, #4
 8005072:	f003 0201 	and.w	r2, r3, #1
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	fa02 f303 	lsl.w	r3, r2, r3
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	4313      	orrs	r3, r2
 8005080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f003 0303 	and.w	r3, r3, #3
 8005090:	2b03      	cmp	r3, #3
 8005092:	d017      	beq.n	80050c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	2203      	movs	r2, #3
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	43db      	mvns	r3, r3
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	4013      	ands	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f003 0303 	and.w	r3, r3, #3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d123      	bne.n	8005118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	08da      	lsrs	r2, r3, #3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3208      	adds	r2, #8
 80050d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	220f      	movs	r2, #15
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	43db      	mvns	r3, r3
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4013      	ands	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4313      	orrs	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	08da      	lsrs	r2, r3, #3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3208      	adds	r2, #8
 8005112:	69b9      	ldr	r1, [r7, #24]
 8005114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	2203      	movs	r2, #3
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	43db      	mvns	r3, r3
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	4013      	ands	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f003 0203 	and.w	r2, r3, #3
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	4313      	orrs	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 80b4 	beq.w	80052c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	4b60      	ldr	r3, [pc, #384]	; (80052e0 <HAL_GPIO_Init+0x30c>)
 8005160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005162:	4a5f      	ldr	r2, [pc, #380]	; (80052e0 <HAL_GPIO_Init+0x30c>)
 8005164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005168:	6453      	str	r3, [r2, #68]	; 0x44
 800516a:	4b5d      	ldr	r3, [pc, #372]	; (80052e0 <HAL_GPIO_Init+0x30c>)
 800516c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005176:	4a5b      	ldr	r2, [pc, #364]	; (80052e4 <HAL_GPIO_Init+0x310>)
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	089b      	lsrs	r3, r3, #2
 800517c:	3302      	adds	r3, #2
 800517e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	220f      	movs	r2, #15
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	43db      	mvns	r3, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4013      	ands	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a52      	ldr	r2, [pc, #328]	; (80052e8 <HAL_GPIO_Init+0x314>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d02b      	beq.n	80051fa <HAL_GPIO_Init+0x226>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a51      	ldr	r2, [pc, #324]	; (80052ec <HAL_GPIO_Init+0x318>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d025      	beq.n	80051f6 <HAL_GPIO_Init+0x222>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a50      	ldr	r2, [pc, #320]	; (80052f0 <HAL_GPIO_Init+0x31c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d01f      	beq.n	80051f2 <HAL_GPIO_Init+0x21e>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a4f      	ldr	r2, [pc, #316]	; (80052f4 <HAL_GPIO_Init+0x320>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d019      	beq.n	80051ee <HAL_GPIO_Init+0x21a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a4e      	ldr	r2, [pc, #312]	; (80052f8 <HAL_GPIO_Init+0x324>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <HAL_GPIO_Init+0x216>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a4d      	ldr	r2, [pc, #308]	; (80052fc <HAL_GPIO_Init+0x328>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00d      	beq.n	80051e6 <HAL_GPIO_Init+0x212>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a4c      	ldr	r2, [pc, #304]	; (8005300 <HAL_GPIO_Init+0x32c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d007      	beq.n	80051e2 <HAL_GPIO_Init+0x20e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a4b      	ldr	r2, [pc, #300]	; (8005304 <HAL_GPIO_Init+0x330>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d101      	bne.n	80051de <HAL_GPIO_Init+0x20a>
 80051da:	2307      	movs	r3, #7
 80051dc:	e00e      	b.n	80051fc <HAL_GPIO_Init+0x228>
 80051de:	2308      	movs	r3, #8
 80051e0:	e00c      	b.n	80051fc <HAL_GPIO_Init+0x228>
 80051e2:	2306      	movs	r3, #6
 80051e4:	e00a      	b.n	80051fc <HAL_GPIO_Init+0x228>
 80051e6:	2305      	movs	r3, #5
 80051e8:	e008      	b.n	80051fc <HAL_GPIO_Init+0x228>
 80051ea:	2304      	movs	r3, #4
 80051ec:	e006      	b.n	80051fc <HAL_GPIO_Init+0x228>
 80051ee:	2303      	movs	r3, #3
 80051f0:	e004      	b.n	80051fc <HAL_GPIO_Init+0x228>
 80051f2:	2302      	movs	r3, #2
 80051f4:	e002      	b.n	80051fc <HAL_GPIO_Init+0x228>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <HAL_GPIO_Init+0x228>
 80051fa:	2300      	movs	r3, #0
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	f002 0203 	and.w	r2, r2, #3
 8005202:	0092      	lsls	r2, r2, #2
 8005204:	4093      	lsls	r3, r2
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4313      	orrs	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800520c:	4935      	ldr	r1, [pc, #212]	; (80052e4 <HAL_GPIO_Init+0x310>)
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	089b      	lsrs	r3, r3, #2
 8005212:	3302      	adds	r3, #2
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800521a:	4b3b      	ldr	r3, [pc, #236]	; (8005308 <HAL_GPIO_Init+0x334>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	43db      	mvns	r3, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4013      	ands	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800523e:	4a32      	ldr	r2, [pc, #200]	; (8005308 <HAL_GPIO_Init+0x334>)
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005244:	4b30      	ldr	r3, [pc, #192]	; (8005308 <HAL_GPIO_Init+0x334>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	43db      	mvns	r3, r3
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	4013      	ands	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005268:	4a27      	ldr	r2, [pc, #156]	; (8005308 <HAL_GPIO_Init+0x334>)
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800526e:	4b26      	ldr	r3, [pc, #152]	; (8005308 <HAL_GPIO_Init+0x334>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	43db      	mvns	r3, r3
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	4013      	ands	r3, r2
 800527c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005292:	4a1d      	ldr	r2, [pc, #116]	; (8005308 <HAL_GPIO_Init+0x334>)
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005298:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <HAL_GPIO_Init+0x334>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	43db      	mvns	r3, r3
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	4013      	ands	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052bc:	4a12      	ldr	r2, [pc, #72]	; (8005308 <HAL_GPIO_Init+0x334>)
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	3301      	adds	r3, #1
 80052c6:	61fb      	str	r3, [r7, #28]
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	2b0f      	cmp	r3, #15
 80052cc:	f67f ae90 	bls.w	8004ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052d0:	bf00      	nop
 80052d2:	bf00      	nop
 80052d4:	3724      	adds	r7, #36	; 0x24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40023800 	.word	0x40023800
 80052e4:	40013800 	.word	0x40013800
 80052e8:	40020000 	.word	0x40020000
 80052ec:	40020400 	.word	0x40020400
 80052f0:	40020800 	.word	0x40020800
 80052f4:	40020c00 	.word	0x40020c00
 80052f8:	40021000 	.word	0x40021000
 80052fc:	40021400 	.word	0x40021400
 8005300:	40021800 	.word	0x40021800
 8005304:	40021c00 	.word	0x40021c00
 8005308:	40013c00 	.word	0x40013c00

0800530c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691a      	ldr	r2, [r3, #16]
 800531c:	887b      	ldrh	r3, [r7, #2]
 800531e:	4013      	ands	r3, r2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005324:	2301      	movs	r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
 8005328:	e001      	b.n	800532e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800532a:	2300      	movs	r3, #0
 800532c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800532e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	807b      	strh	r3, [r7, #2]
 8005348:	4613      	mov	r3, r2
 800534a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800534c:	787b      	ldrb	r3, [r7, #1]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005352:	887a      	ldrh	r2, [r7, #2]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005358:	e003      	b.n	8005362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800535a:	887b      	ldrh	r3, [r7, #2]
 800535c:	041a      	lsls	r2, r3, #16
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	619a      	str	r2, [r3, #24]
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800537a:	4b08      	ldr	r3, [pc, #32]	; (800539c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800537c:	695a      	ldr	r2, [r3, #20]
 800537e:	88fb      	ldrh	r3, [r7, #6]
 8005380:	4013      	ands	r3, r2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d006      	beq.n	8005394 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005386:	4a05      	ldr	r2, [pc, #20]	; (800539c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005388:	88fb      	ldrh	r3, [r7, #6]
 800538a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800538c:	88fb      	ldrh	r3, [r7, #6]
 800538e:	4618      	mov	r0, r3
 8005390:	f000 f806 	bl	80053a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005394:	bf00      	nop
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40013c00 	.word	0x40013c00

080053a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80053b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053b8:	b08f      	sub	sp, #60	; 0x3c
 80053ba:	af0a      	add	r7, sp, #40	; 0x28
 80053bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e054      	b.n	8005472 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fe fa6e 	bl	80038c4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2203      	movs	r2, #3
 80053ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d102      	bne.n	8005402 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f005 fa3d 	bl	800a886 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	603b      	str	r3, [r7, #0]
 8005412:	687e      	ldr	r6, [r7, #4]
 8005414:	466d      	mov	r5, sp
 8005416:	f106 0410 	add.w	r4, r6, #16
 800541a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800541c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800541e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005422:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005426:	e885 0003 	stmia.w	r5, {r0, r1}
 800542a:	1d33      	adds	r3, r6, #4
 800542c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800542e:	6838      	ldr	r0, [r7, #0]
 8005430:	f005 f9c8 	bl	800a7c4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2101      	movs	r1, #1
 800543a:	4618      	mov	r0, r3
 800543c:	f005 fa34 	bl	800a8a8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	603b      	str	r3, [r7, #0]
 8005446:	687e      	ldr	r6, [r7, #4]
 8005448:	466d      	mov	r5, sp
 800544a:	f106 0410 	add.w	r4, r6, #16
 800544e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005456:	e894 0003 	ldmia.w	r4, {r0, r1}
 800545a:	e885 0003 	stmia.w	r5, {r0, r1}
 800545e:	1d33      	adds	r3, r6, #4
 8005460:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005462:	6838      	ldr	r0, [r7, #0]
 8005464:	f005 fb5c 	bl	800ab20 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800547a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b086      	sub	sp, #24
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4618      	mov	r0, r3
 8005492:	f005 fb04 	bl	800aa9e <USB_GetMode>
 8005496:	4603      	mov	r3, r0
 8005498:	2b01      	cmp	r3, #1
 800549a:	f040 80f6 	bne.w	800568a <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f005 fae8 	bl	800aa78 <USB_ReadInterrupts>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 80ec 	beq.w	8005688 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f005 fadf 	bl	800aa78 <USB_ReadInterrupts>
 80054ba:	4603      	mov	r3, r0
 80054bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054c4:	d104      	bne.n	80054d0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80054ce:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f005 facf 	bl	800aa78 <USB_ReadInterrupts>
 80054da:	4603      	mov	r3, r0
 80054dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054e4:	d104      	bne.n	80054f0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80054ee:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f005 fabf 	bl	800aa78 <USB_ReadInterrupts>
 80054fa:	4603      	mov	r3, r0
 80054fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005500:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005504:	d104      	bne.n	8005510 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800550e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	f005 faaf 	bl	800aa78 <USB_ReadInterrupts>
 800551a:	4603      	mov	r3, r0
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b02      	cmp	r3, #2
 8005522:	d103      	bne.n	800552c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2202      	movs	r2, #2
 800552a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4618      	mov	r0, r3
 8005532:	f005 faa1 	bl	800aa78 <USB_ReadInterrupts>
 8005536:	4603      	mov	r3, r0
 8005538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800553c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005540:	d11c      	bne.n	800557c <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800554a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10f      	bne.n	800557c <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800555c:	2110      	movs	r1, #16
 800555e:	6938      	ldr	r0, [r7, #16]
 8005560:	f005 f9ee 	bl	800a940 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005564:	6938      	ldr	r0, [r7, #16]
 8005566:	f005 fa0f 	bl	800a988 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2101      	movs	r1, #1
 8005570:	4618      	mov	r0, r3
 8005572:	f005 fb89 	bl	800ac88 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f89e 	bl	80056b8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4618      	mov	r0, r3
 8005582:	f005 fa79 	bl	800aa78 <USB_ReadInterrupts>
 8005586:	4603      	mov	r3, r0
 8005588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800558c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005590:	d102      	bne.n	8005598 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f001 f9b1 	bl	80068fa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4618      	mov	r0, r3
 800559e:	f005 fa6b 	bl	800aa78 <USB_ReadInterrupts>
 80055a2:	4603      	mov	r3, r0
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d106      	bne.n	80055ba <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f86f 	bl	8005690 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2208      	movs	r2, #8
 80055b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f005 fa5a 	bl	800aa78 <USB_ReadInterrupts>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	2b10      	cmp	r3, #16
 80055cc:	d101      	bne.n	80055d2 <HAL_HCD_IRQHandler+0x158>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <HAL_HCD_IRQHandler+0x15a>
 80055d2:	2300      	movs	r3, #0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d012      	beq.n	80055fe <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0210 	bic.w	r2, r2, #16
 80055e6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f001 f8b4 	bl	8006756 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	699a      	ldr	r2, [r3, #24]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 0210 	orr.w	r2, r2, #16
 80055fc:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f005 fa38 	bl	800aa78 <USB_ReadInterrupts>
 8005608:	4603      	mov	r3, r0
 800560a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800560e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005612:	d13a      	bne.n	800568a <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4618      	mov	r0, r3
 800561a:	f005 fb6f 	bl	800acfc <USB_HC_ReadInterrupt>
 800561e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	e025      	b.n	8005672 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	fa22 f303 	lsr.w	r3, r2, r3
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d018      	beq.n	800566c <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4413      	add	r3, r2
 8005642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800564c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005650:	d106      	bne.n	8005660 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	4619      	mov	r1, r3
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f859 	bl	8005710 <HCD_HC_IN_IRQHandler>
 800565e:	e005      	b.n	800566c <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	4619      	mov	r1, r3
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fc74 	bl	8005f54 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	3301      	adds	r3, #1
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	429a      	cmp	r2, r3
 800567a:	d3d4      	bcc.n	8005626 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005684:	615a      	str	r2, [r3, #20]
 8005686:	e000      	b.n	800568a <HAL_HCD_IRQHandler+0x210>
      return;
 8005688:	bf00      	nop
    }
  }
}
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	70fb      	strb	r3, [r7, #3]
 8005700:	4613      	mov	r3, r2
 8005702:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	4413      	add	r3, r2
 8005732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b04      	cmp	r3, #4
 800573e:	d119      	bne.n	8005774 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4413      	add	r3, r2
 8005748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574c:	461a      	mov	r2, r3
 800574e:	2304      	movs	r3, #4
 8005750:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	4413      	add	r3, r2
 800575a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	0151      	lsls	r1, r2, #5
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	440a      	add	r2, r1
 8005768:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800576c:	f043 0302 	orr.w	r3, r3, #2
 8005770:	60d3      	str	r3, [r2, #12]
 8005772:	e101      	b.n	8005978 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4413      	add	r3, r2
 800577c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800578a:	d12b      	bne.n	80057e4 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	4413      	add	r3, r2
 8005794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005798:	461a      	mov	r2, r3
 800579a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800579e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	212c      	movs	r1, #44	; 0x2c
 80057a6:	fb01 f303 	mul.w	r3, r1, r3
 80057aa:	4413      	add	r3, r2
 80057ac:	3361      	adds	r3, #97	; 0x61
 80057ae:	2207      	movs	r2, #7
 80057b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057cc:	f043 0302 	orr.w	r3, r3, #2
 80057d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	4611      	mov	r1, r2
 80057dc:	4618      	mov	r0, r3
 80057de:	f005 fa9e 	bl	800ad1e <USB_HC_Halt>
 80057e2:	e0c9      	b.n	8005978 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	d109      	bne.n	800580e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	4413      	add	r3, r2
 8005802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005806:	461a      	mov	r2, r3
 8005808:	2320      	movs	r3, #32
 800580a:	6093      	str	r3, [r2, #8]
 800580c:	e0b4      	b.n	8005978 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	4413      	add	r3, r2
 8005816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b08      	cmp	r3, #8
 8005822:	d133      	bne.n	800588c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4413      	add	r3, r2
 800582c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	0151      	lsls	r1, r2, #5
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	440a      	add	r2, r1
 800583a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800583e:	f043 0302 	orr.w	r3, r3, #2
 8005842:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	212c      	movs	r1, #44	; 0x2c
 800584a:	fb01 f303 	mul.w	r3, r1, r3
 800584e:	4413      	add	r3, r2
 8005850:	3361      	adds	r3, #97	; 0x61
 8005852:	2205      	movs	r2, #5
 8005854:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	4413      	add	r3, r2
 800585e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005862:	461a      	mov	r2, r3
 8005864:	2310      	movs	r3, #16
 8005866:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	4413      	add	r3, r2
 8005870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005874:	461a      	mov	r2, r3
 8005876:	2308      	movs	r3, #8
 8005878:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	4611      	mov	r1, r2
 8005884:	4618      	mov	r0, r3
 8005886:	f005 fa4a 	bl	800ad1e <USB_HC_Halt>
 800588a:	e075      	b.n	8005978 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	4413      	add	r3, r2
 8005894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800589e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a2:	d134      	bne.n	800590e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	0151      	lsls	r1, r2, #5
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	440a      	add	r2, r1
 80058ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058be:	f043 0302 	orr.w	r3, r3, #2
 80058c2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	212c      	movs	r1, #44	; 0x2c
 80058ca:	fb01 f303 	mul.w	r3, r1, r3
 80058ce:	4413      	add	r3, r2
 80058d0:	3361      	adds	r3, #97	; 0x61
 80058d2:	2208      	movs	r2, #8
 80058d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e2:	461a      	mov	r2, r3
 80058e4:	2310      	movs	r3, #16
 80058e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f4:	461a      	mov	r2, r3
 80058f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058fa:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	4611      	mov	r1, r2
 8005906:	4618      	mov	r0, r3
 8005908:	f005 fa09 	bl	800ad1e <USB_HC_Halt>
 800590c:	e034      	b.n	8005978 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4413      	add	r3, r2
 8005916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005920:	2b80      	cmp	r3, #128	; 0x80
 8005922:	d129      	bne.n	8005978 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	4413      	add	r3, r2
 800592c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	0151      	lsls	r1, r2, #5
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	440a      	add	r2, r1
 800593a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800593e:	f043 0302 	orr.w	r3, r3, #2
 8005942:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	212c      	movs	r1, #44	; 0x2c
 800594a:	fb01 f303 	mul.w	r3, r1, r3
 800594e:	4413      	add	r3, r2
 8005950:	3361      	adds	r3, #97	; 0x61
 8005952:	2206      	movs	r2, #6
 8005954:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	4611      	mov	r1, r2
 8005960:	4618      	mov	r0, r3
 8005962:	f005 f9dc 	bl	800ad1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	4413      	add	r3, r2
 800596e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005972:	461a      	mov	r2, r3
 8005974:	2380      	movs	r3, #128	; 0x80
 8005976:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	4413      	add	r3, r2
 8005980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800598a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800598e:	d122      	bne.n	80059d6 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	4413      	add	r3, r2
 8005998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	0151      	lsls	r1, r2, #5
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	440a      	add	r2, r1
 80059a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059aa:	f043 0302 	orr.w	r3, r3, #2
 80059ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	4611      	mov	r1, r2
 80059ba:	4618      	mov	r0, r3
 80059bc:	f005 f9af 	bl	800ad1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059cc:	461a      	mov	r2, r3
 80059ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059d2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80059d4:	e2ba      	b.n	8005f4c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	f040 811b 	bne.w	8005c24 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d019      	beq.n	8005a2a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	212c      	movs	r1, #44	; 0x2c
 80059fc:	fb01 f303 	mul.w	r3, r1, r3
 8005a00:	4413      	add	r3, r2
 8005a02:	3348      	adds	r3, #72	; 0x48
 8005a04:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	0159      	lsls	r1, r3, #5
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	440b      	add	r3, r1
 8005a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005a18:	1ad2      	subs	r2, r2, r3
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	202c      	movs	r0, #44	; 0x2c
 8005a20:	fb00 f303 	mul.w	r3, r0, r3
 8005a24:	440b      	add	r3, r1
 8005a26:	3350      	adds	r3, #80	; 0x50
 8005a28:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	212c      	movs	r1, #44	; 0x2c
 8005a30:	fb01 f303 	mul.w	r3, r1, r3
 8005a34:	4413      	add	r3, r2
 8005a36:	3361      	adds	r3, #97	; 0x61
 8005a38:	2201      	movs	r2, #1
 8005a3a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	212c      	movs	r1, #44	; 0x2c
 8005a42:	fb01 f303 	mul.w	r3, r1, r3
 8005a46:	4413      	add	r3, r2
 8005a48:	335c      	adds	r3, #92	; 0x5c
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	212c      	movs	r1, #44	; 0x2c
 8005a66:	fb01 f303 	mul.w	r3, r1, r3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	333f      	adds	r3, #63	; 0x3f
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d009      	beq.n	8005a88 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	212c      	movs	r1, #44	; 0x2c
 8005a7a:	fb01 f303 	mul.w	r3, r1, r3
 8005a7e:	4413      	add	r3, r2
 8005a80:	333f      	adds	r3, #63	; 0x3f
 8005a82:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d121      	bne.n	8005acc <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	0151      	lsls	r1, r2, #5
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	440a      	add	r2, r1
 8005a9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aa2:	f043 0302 	orr.w	r3, r3, #2
 8005aa6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f005 f933 	bl	800ad1e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2310      	movs	r3, #16
 8005ac8:	6093      	str	r3, [r2, #8]
 8005aca:	e066      	b.n	8005b9a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	212c      	movs	r1, #44	; 0x2c
 8005ad2:	fb01 f303 	mul.w	r3, r1, r3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	333f      	adds	r3, #63	; 0x3f
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d127      	bne.n	8005b30 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	0151      	lsls	r1, r2, #5
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	440a      	add	r2, r1
 8005af6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005afa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005afe:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	212c      	movs	r1, #44	; 0x2c
 8005b06:	fb01 f303 	mul.w	r3, r1, r3
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3360      	adds	r3, #96	; 0x60
 8005b0e:	2201      	movs	r2, #1
 8005b10:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	b2d9      	uxtb	r1, r3
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	202c      	movs	r0, #44	; 0x2c
 8005b1c:	fb00 f303 	mul.w	r3, r0, r3
 8005b20:	4413      	add	r3, r2
 8005b22:	3360      	adds	r3, #96	; 0x60
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff fde3 	bl	80056f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005b2e:	e034      	b.n	8005b9a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	212c      	movs	r1, #44	; 0x2c
 8005b36:	fb01 f303 	mul.w	r3, r1, r3
 8005b3a:	4413      	add	r3, r2
 8005b3c:	333f      	adds	r3, #63	; 0x3f
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d12a      	bne.n	8005b9a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	212c      	movs	r1, #44	; 0x2c
 8005b4a:	fb01 f303 	mul.w	r3, r1, r3
 8005b4e:	4413      	add	r3, r2
 8005b50:	3360      	adds	r3, #96	; 0x60
 8005b52:	2201      	movs	r2, #1
 8005b54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	212c      	movs	r1, #44	; 0x2c
 8005b5c:	fb01 f303 	mul.w	r3, r1, r3
 8005b60:	4413      	add	r3, r2
 8005b62:	3354      	adds	r3, #84	; 0x54
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	f083 0301 	eor.w	r3, r3, #1
 8005b6a:	b2d8      	uxtb	r0, r3
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	212c      	movs	r1, #44	; 0x2c
 8005b72:	fb01 f303 	mul.w	r3, r1, r3
 8005b76:	4413      	add	r3, r2
 8005b78:	3354      	adds	r3, #84	; 0x54
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	b2d9      	uxtb	r1, r3
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	202c      	movs	r0, #44	; 0x2c
 8005b88:	fb00 f303 	mul.w	r3, r0, r3
 8005b8c:	4413      	add	r3, r2
 8005b8e:	3360      	adds	r3, #96	; 0x60
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff fdad 	bl	80056f4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d12b      	bne.n	8005bfa <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	212c      	movs	r1, #44	; 0x2c
 8005ba8:	fb01 f303 	mul.w	r3, r1, r3
 8005bac:	4413      	add	r3, r2
 8005bae:	3348      	adds	r3, #72	; 0x48
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	202c      	movs	r0, #44	; 0x2c
 8005bb8:	fb00 f202 	mul.w	r2, r0, r2
 8005bbc:	440a      	add	r2, r1
 8005bbe:	3240      	adds	r2, #64	; 0x40
 8005bc0:	8812      	ldrh	r2, [r2, #0]
 8005bc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 81be 	beq.w	8005f4c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	212c      	movs	r1, #44	; 0x2c
 8005bd6:	fb01 f303 	mul.w	r3, r1, r3
 8005bda:	4413      	add	r3, r2
 8005bdc:	3354      	adds	r3, #84	; 0x54
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	f083 0301 	eor.w	r3, r3, #1
 8005be4:	b2d8      	uxtb	r0, r3
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	212c      	movs	r1, #44	; 0x2c
 8005bec:	fb01 f303 	mul.w	r3, r1, r3
 8005bf0:	4413      	add	r3, r2
 8005bf2:	3354      	adds	r3, #84	; 0x54
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	701a      	strb	r2, [r3, #0]
}
 8005bf8:	e1a8      	b.n	8005f4c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	212c      	movs	r1, #44	; 0x2c
 8005c00:	fb01 f303 	mul.w	r3, r1, r3
 8005c04:	4413      	add	r3, r2
 8005c06:	3354      	adds	r3, #84	; 0x54
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	f083 0301 	eor.w	r3, r3, #1
 8005c0e:	b2d8      	uxtb	r0, r3
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	212c      	movs	r1, #44	; 0x2c
 8005c16:	fb01 f303 	mul.w	r3, r1, r3
 8005c1a:	4413      	add	r3, r2
 8005c1c:	3354      	adds	r3, #84	; 0x54
 8005c1e:	4602      	mov	r2, r0
 8005c20:	701a      	strb	r2, [r3, #0]
}
 8005c22:	e193      	b.n	8005f4c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	f040 8106 	bne.w	8005e48 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	0151      	lsls	r1, r2, #5
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	440a      	add	r2, r1
 8005c52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c56:	f023 0302 	bic.w	r3, r3, #2
 8005c5a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	212c      	movs	r1, #44	; 0x2c
 8005c62:	fb01 f303 	mul.w	r3, r1, r3
 8005c66:	4413      	add	r3, r2
 8005c68:	3361      	adds	r3, #97	; 0x61
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d109      	bne.n	8005c84 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	212c      	movs	r1, #44	; 0x2c
 8005c76:	fb01 f303 	mul.w	r3, r1, r3
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3360      	adds	r3, #96	; 0x60
 8005c7e:	2201      	movs	r2, #1
 8005c80:	701a      	strb	r2, [r3, #0]
 8005c82:	e0c9      	b.n	8005e18 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	212c      	movs	r1, #44	; 0x2c
 8005c8a:	fb01 f303 	mul.w	r3, r1, r3
 8005c8e:	4413      	add	r3, r2
 8005c90:	3361      	adds	r3, #97	; 0x61
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b05      	cmp	r3, #5
 8005c96:	d109      	bne.n	8005cac <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	212c      	movs	r1, #44	; 0x2c
 8005c9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ca2:	4413      	add	r3, r2
 8005ca4:	3360      	adds	r3, #96	; 0x60
 8005ca6:	2205      	movs	r2, #5
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	e0b5      	b.n	8005e18 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	212c      	movs	r1, #44	; 0x2c
 8005cb2:	fb01 f303 	mul.w	r3, r1, r3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	3361      	adds	r3, #97	; 0x61
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b06      	cmp	r3, #6
 8005cbe:	d009      	beq.n	8005cd4 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	212c      	movs	r1, #44	; 0x2c
 8005cc6:	fb01 f303 	mul.w	r3, r1, r3
 8005cca:	4413      	add	r3, r2
 8005ccc:	3361      	adds	r3, #97	; 0x61
 8005cce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d150      	bne.n	8005d76 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	212c      	movs	r1, #44	; 0x2c
 8005cda:	fb01 f303 	mul.w	r3, r1, r3
 8005cde:	4413      	add	r3, r2
 8005ce0:	335c      	adds	r3, #92	; 0x5c
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	202c      	movs	r0, #44	; 0x2c
 8005cec:	fb00 f303 	mul.w	r3, r0, r3
 8005cf0:	440b      	add	r3, r1
 8005cf2:	335c      	adds	r3, #92	; 0x5c
 8005cf4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	212c      	movs	r1, #44	; 0x2c
 8005cfc:	fb01 f303 	mul.w	r3, r1, r3
 8005d00:	4413      	add	r3, r2
 8005d02:	335c      	adds	r3, #92	; 0x5c
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d912      	bls.n	8005d30 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	212c      	movs	r1, #44	; 0x2c
 8005d10:	fb01 f303 	mul.w	r3, r1, r3
 8005d14:	4413      	add	r3, r2
 8005d16:	335c      	adds	r3, #92	; 0x5c
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	212c      	movs	r1, #44	; 0x2c
 8005d22:	fb01 f303 	mul.w	r3, r1, r3
 8005d26:	4413      	add	r3, r2
 8005d28:	3360      	adds	r3, #96	; 0x60
 8005d2a:	2204      	movs	r2, #4
 8005d2c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005d2e:	e073      	b.n	8005e18 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	212c      	movs	r1, #44	; 0x2c
 8005d36:	fb01 f303 	mul.w	r3, r1, r3
 8005d3a:	4413      	add	r3, r2
 8005d3c:	3360      	adds	r3, #96	; 0x60
 8005d3e:	2202      	movs	r2, #2
 8005d40:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d58:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d60:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6e:	461a      	mov	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005d74:	e050      	b.n	8005e18 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	212c      	movs	r1, #44	; 0x2c
 8005d7c:	fb01 f303 	mul.w	r3, r1, r3
 8005d80:	4413      	add	r3, r2
 8005d82:	3361      	adds	r3, #97	; 0x61
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d122      	bne.n	8005dd0 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	212c      	movs	r1, #44	; 0x2c
 8005d90:	fb01 f303 	mul.w	r3, r1, r3
 8005d94:	4413      	add	r3, r2
 8005d96:	3360      	adds	r3, #96	; 0x60
 8005d98:	2202      	movs	r2, #2
 8005d9a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005db2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dba:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc8:	461a      	mov	r2, r3
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	e023      	b.n	8005e18 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	212c      	movs	r1, #44	; 0x2c
 8005dd6:	fb01 f303 	mul.w	r3, r1, r3
 8005dda:	4413      	add	r3, r2
 8005ddc:	3361      	adds	r3, #97	; 0x61
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b07      	cmp	r3, #7
 8005de2:	d119      	bne.n	8005e18 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	212c      	movs	r1, #44	; 0x2c
 8005dea:	fb01 f303 	mul.w	r3, r1, r3
 8005dee:	4413      	add	r3, r2
 8005df0:	335c      	adds	r3, #92	; 0x5c
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	202c      	movs	r0, #44	; 0x2c
 8005dfc:	fb00 f303 	mul.w	r3, r0, r3
 8005e00:	440b      	add	r3, r1
 8005e02:	335c      	adds	r3, #92	; 0x5c
 8005e04:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	212c      	movs	r1, #44	; 0x2c
 8005e0c:	fb01 f303 	mul.w	r3, r1, r3
 8005e10:	4413      	add	r3, r2
 8005e12:	3360      	adds	r3, #96	; 0x60
 8005e14:	2204      	movs	r2, #4
 8005e16:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e24:	461a      	mov	r2, r3
 8005e26:	2302      	movs	r3, #2
 8005e28:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	b2d9      	uxtb	r1, r3
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	202c      	movs	r0, #44	; 0x2c
 8005e34:	fb00 f303 	mul.w	r3, r0, r3
 8005e38:	4413      	add	r3, r2
 8005e3a:	3360      	adds	r3, #96	; 0x60
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7ff fc57 	bl	80056f4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005e46:	e081      	b.n	8005f4c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 0310 	and.w	r3, r3, #16
 8005e5a:	2b10      	cmp	r3, #16
 8005e5c:	d176      	bne.n	8005f4c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	212c      	movs	r1, #44	; 0x2c
 8005e64:	fb01 f303 	mul.w	r3, r1, r3
 8005e68:	4413      	add	r3, r2
 8005e6a:	333f      	adds	r3, #63	; 0x3f
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d121      	bne.n	8005eb6 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	212c      	movs	r1, #44	; 0x2c
 8005e78:	fb01 f303 	mul.w	r3, r1, r3
 8005e7c:	4413      	add	r3, r2
 8005e7e:	335c      	adds	r3, #92	; 0x5c
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e9e:	f043 0302 	orr.w	r3, r3, #2
 8005ea2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	4611      	mov	r1, r2
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f004 ff35 	bl	800ad1e <USB_HC_Halt>
 8005eb4:	e041      	b.n	8005f3a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	212c      	movs	r1, #44	; 0x2c
 8005ebc:	fb01 f303 	mul.w	r3, r1, r3
 8005ec0:	4413      	add	r3, r2
 8005ec2:	333f      	adds	r3, #63	; 0x3f
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d009      	beq.n	8005ede <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	212c      	movs	r1, #44	; 0x2c
 8005ed0:	fb01 f303 	mul.w	r3, r1, r3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	333f      	adds	r3, #63	; 0x3f
 8005ed8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d12d      	bne.n	8005f3a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	212c      	movs	r1, #44	; 0x2c
 8005ee4:	fb01 f303 	mul.w	r3, r1, r3
 8005ee8:	4413      	add	r3, r2
 8005eea:	335c      	adds	r3, #92	; 0x5c
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d120      	bne.n	8005f3a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	212c      	movs	r1, #44	; 0x2c
 8005efe:	fb01 f303 	mul.w	r3, r1, r3
 8005f02:	4413      	add	r3, r2
 8005f04:	3361      	adds	r3, #97	; 0x61
 8005f06:	2203      	movs	r2, #3
 8005f08:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	0151      	lsls	r1, r2, #5
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	440a      	add	r2, r1
 8005f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f24:	f043 0302 	orr.w	r3, r3, #2
 8005f28:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	b2d2      	uxtb	r2, r2
 8005f32:	4611      	mov	r1, r2
 8005f34:	4618      	mov	r0, r3
 8005f36:	f004 fef2 	bl	800ad1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f46:	461a      	mov	r2, r3
 8005f48:	2310      	movs	r3, #16
 8005f4a:	6093      	str	r3, [r2, #8]
}
 8005f4c:	bf00      	nop
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d119      	bne.n	8005fb8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f90:	461a      	mov	r2, r3
 8005f92:	2304      	movs	r3, #4
 8005f94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb0:	f043 0302 	orr.w	r3, r3, #2
 8005fb4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005fb6:	e3ca      	b.n	800674e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	d13e      	bne.n	800604c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fda:	461a      	mov	r2, r3
 8005fdc:	2320      	movs	r3, #32
 8005fde:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	212c      	movs	r1, #44	; 0x2c
 8005fe6:	fb01 f303 	mul.w	r3, r1, r3
 8005fea:	4413      	add	r3, r2
 8005fec:	333d      	adds	r3, #61	; 0x3d
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	f040 83ac 	bne.w	800674e <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	212c      	movs	r1, #44	; 0x2c
 8005ffc:	fb01 f303 	mul.w	r3, r1, r3
 8006000:	4413      	add	r3, r2
 8006002:	333d      	adds	r3, #61	; 0x3d
 8006004:	2200      	movs	r2, #0
 8006006:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	212c      	movs	r1, #44	; 0x2c
 800600e:	fb01 f303 	mul.w	r3, r1, r3
 8006012:	4413      	add	r3, r2
 8006014:	3360      	adds	r3, #96	; 0x60
 8006016:	2202      	movs	r2, #2
 8006018:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	4413      	add	r3, r2
 8006022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	0151      	lsls	r1, r2, #5
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	440a      	add	r2, r1
 8006030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006034:	f043 0302 	orr.w	r3, r3, #2
 8006038:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	4611      	mov	r1, r2
 8006044:	4618      	mov	r0, r3
 8006046:	f004 fe6a 	bl	800ad1e <USB_HC_Halt>
}
 800604a:	e380      	b.n	800674e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	4413      	add	r3, r2
 8006054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800605e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006062:	d122      	bne.n	80060aa <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	4413      	add	r3, r2
 800606c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	0151      	lsls	r1, r2, #5
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	440a      	add	r2, r1
 800607a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800607e:	f043 0302 	orr.w	r3, r3, #2
 8006082:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	4611      	mov	r1, r2
 800608e:	4618      	mov	r0, r3
 8006090:	f004 fe45 	bl	800ad1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	4413      	add	r3, r2
 800609c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a0:	461a      	mov	r2, r3
 80060a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060a6:	6093      	str	r3, [r2, #8]
}
 80060a8:	e351      	b.n	800674e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d150      	bne.n	8006162 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	212c      	movs	r1, #44	; 0x2c
 80060c6:	fb01 f303 	mul.w	r3, r1, r3
 80060ca:	4413      	add	r3, r2
 80060cc:	335c      	adds	r3, #92	; 0x5c
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e4:	2b40      	cmp	r3, #64	; 0x40
 80060e6:	d111      	bne.n	800610c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	212c      	movs	r1, #44	; 0x2c
 80060ee:	fb01 f303 	mul.w	r3, r1, r3
 80060f2:	4413      	add	r3, r2
 80060f4:	333d      	adds	r3, #61	; 0x3d
 80060f6:	2201      	movs	r2, #1
 80060f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	4413      	add	r3, r2
 8006102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006106:	461a      	mov	r2, r3
 8006108:	2340      	movs	r3, #64	; 0x40
 800610a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	4413      	add	r3, r2
 8006114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	0151      	lsls	r1, r2, #5
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	440a      	add	r2, r1
 8006122:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006126:	f043 0302 	orr.w	r3, r3, #2
 800612a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	4611      	mov	r1, r2
 8006136:	4618      	mov	r0, r3
 8006138:	f004 fdf1 	bl	800ad1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	4413      	add	r3, r2
 8006144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006148:	461a      	mov	r2, r3
 800614a:	2301      	movs	r3, #1
 800614c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	212c      	movs	r1, #44	; 0x2c
 8006154:	fb01 f303 	mul.w	r3, r1, r3
 8006158:	4413      	add	r3, r2
 800615a:	3361      	adds	r3, #97	; 0x61
 800615c:	2201      	movs	r2, #1
 800615e:	701a      	strb	r2, [r3, #0]
}
 8006160:	e2f5      	b.n	800674e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	4413      	add	r3, r2
 800616a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006174:	2b40      	cmp	r3, #64	; 0x40
 8006176:	d13c      	bne.n	80061f2 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	212c      	movs	r1, #44	; 0x2c
 800617e:	fb01 f303 	mul.w	r3, r1, r3
 8006182:	4413      	add	r3, r2
 8006184:	3361      	adds	r3, #97	; 0x61
 8006186:	2204      	movs	r2, #4
 8006188:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	212c      	movs	r1, #44	; 0x2c
 8006190:	fb01 f303 	mul.w	r3, r1, r3
 8006194:	4413      	add	r3, r2
 8006196:	333d      	adds	r3, #61	; 0x3d
 8006198:	2201      	movs	r2, #1
 800619a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	212c      	movs	r1, #44	; 0x2c
 80061a2:	fb01 f303 	mul.w	r3, r1, r3
 80061a6:	4413      	add	r3, r2
 80061a8:	335c      	adds	r3, #92	; 0x5c
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	0151      	lsls	r1, r2, #5
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	440a      	add	r2, r1
 80061c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061c8:	f043 0302 	orr.w	r3, r3, #2
 80061cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	4611      	mov	r1, r2
 80061d8:	4618      	mov	r0, r3
 80061da:	f004 fda0 	bl	800ad1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ea:	461a      	mov	r2, r3
 80061ec:	2340      	movs	r3, #64	; 0x40
 80061ee:	6093      	str	r3, [r2, #8]
}
 80061f0:	e2ad      	b.n	800674e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f003 0308 	and.w	r3, r3, #8
 8006204:	2b08      	cmp	r3, #8
 8006206:	d12a      	bne.n	800625e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	4413      	add	r3, r2
 8006210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006214:	461a      	mov	r2, r3
 8006216:	2308      	movs	r3, #8
 8006218:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	4413      	add	r3, r2
 8006222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	0151      	lsls	r1, r2, #5
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	440a      	add	r2, r1
 8006230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006234:	f043 0302 	orr.w	r3, r3, #2
 8006238:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	4611      	mov	r1, r2
 8006244:	4618      	mov	r0, r3
 8006246:	f004 fd6a 	bl	800ad1e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	212c      	movs	r1, #44	; 0x2c
 8006250:	fb01 f303 	mul.w	r3, r1, r3
 8006254:	4413      	add	r3, r2
 8006256:	3361      	adds	r3, #97	; 0x61
 8006258:	2205      	movs	r2, #5
 800625a:	701a      	strb	r2, [r3, #0]
}
 800625c:	e277      	b.n	800674e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	4413      	add	r3, r2
 8006266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f003 0310 	and.w	r3, r3, #16
 8006270:	2b10      	cmp	r3, #16
 8006272:	d150      	bne.n	8006316 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	212c      	movs	r1, #44	; 0x2c
 800627a:	fb01 f303 	mul.w	r3, r1, r3
 800627e:	4413      	add	r3, r2
 8006280:	335c      	adds	r3, #92	; 0x5c
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	212c      	movs	r1, #44	; 0x2c
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	4413      	add	r3, r2
 8006292:	3361      	adds	r3, #97	; 0x61
 8006294:	2203      	movs	r2, #3
 8006296:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	212c      	movs	r1, #44	; 0x2c
 800629e:	fb01 f303 	mul.w	r3, r1, r3
 80062a2:	4413      	add	r3, r2
 80062a4:	333d      	adds	r3, #61	; 0x3d
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d112      	bne.n	80062d2 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	212c      	movs	r1, #44	; 0x2c
 80062b2:	fb01 f303 	mul.w	r3, r1, r3
 80062b6:	4413      	add	r3, r2
 80062b8:	333c      	adds	r3, #60	; 0x3c
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d108      	bne.n	80062d2 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	212c      	movs	r1, #44	; 0x2c
 80062c6:	fb01 f303 	mul.w	r3, r1, r3
 80062ca:	4413      	add	r3, r2
 80062cc:	333d      	adds	r3, #61	; 0x3d
 80062ce:	2201      	movs	r2, #1
 80062d0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ec:	f043 0302 	orr.w	r3, r3, #2
 80062f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	4611      	mov	r1, r2
 80062fc:	4618      	mov	r0, r3
 80062fe:	f004 fd0e 	bl	800ad1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	4413      	add	r3, r2
 800630a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630e:	461a      	mov	r2, r3
 8006310:	2310      	movs	r3, #16
 8006312:	6093      	str	r3, [r2, #8]
}
 8006314:	e21b      	b.n	800674e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	4413      	add	r3, r2
 800631e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006328:	2b80      	cmp	r3, #128	; 0x80
 800632a:	d174      	bne.n	8006416 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d121      	bne.n	8006378 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	212c      	movs	r1, #44	; 0x2c
 800633a:	fb01 f303 	mul.w	r3, r1, r3
 800633e:	4413      	add	r3, r2
 8006340:	3361      	adds	r3, #97	; 0x61
 8006342:	2206      	movs	r2, #6
 8006344:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	4413      	add	r3, r2
 800634e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	0151      	lsls	r1, r2, #5
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	440a      	add	r2, r1
 800635c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006360:	f043 0302 	orr.w	r3, r3, #2
 8006364:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	b2d2      	uxtb	r2, r2
 800636e:	4611      	mov	r1, r2
 8006370:	4618      	mov	r0, r3
 8006372:	f004 fcd4 	bl	800ad1e <USB_HC_Halt>
 8006376:	e044      	b.n	8006402 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	212c      	movs	r1, #44	; 0x2c
 800637e:	fb01 f303 	mul.w	r3, r1, r3
 8006382:	4413      	add	r3, r2
 8006384:	335c      	adds	r3, #92	; 0x5c
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	202c      	movs	r0, #44	; 0x2c
 8006390:	fb00 f303 	mul.w	r3, r0, r3
 8006394:	440b      	add	r3, r1
 8006396:	335c      	adds	r3, #92	; 0x5c
 8006398:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	212c      	movs	r1, #44	; 0x2c
 80063a0:	fb01 f303 	mul.w	r3, r1, r3
 80063a4:	4413      	add	r3, r2
 80063a6:	335c      	adds	r3, #92	; 0x5c
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d920      	bls.n	80063f0 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	212c      	movs	r1, #44	; 0x2c
 80063b4:	fb01 f303 	mul.w	r3, r1, r3
 80063b8:	4413      	add	r3, r2
 80063ba:	335c      	adds	r3, #92	; 0x5c
 80063bc:	2200      	movs	r2, #0
 80063be:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	212c      	movs	r1, #44	; 0x2c
 80063c6:	fb01 f303 	mul.w	r3, r1, r3
 80063ca:	4413      	add	r3, r2
 80063cc:	3360      	adds	r3, #96	; 0x60
 80063ce:	2204      	movs	r2, #4
 80063d0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	b2d9      	uxtb	r1, r3
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	202c      	movs	r0, #44	; 0x2c
 80063dc:	fb00 f303 	mul.w	r3, r0, r3
 80063e0:	4413      	add	r3, r2
 80063e2:	3360      	adds	r3, #96	; 0x60
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7ff f983 	bl	80056f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80063ee:	e008      	b.n	8006402 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	212c      	movs	r1, #44	; 0x2c
 80063f6:	fb01 f303 	mul.w	r3, r1, r3
 80063fa:	4413      	add	r3, r2
 80063fc:	3360      	adds	r3, #96	; 0x60
 80063fe:	2202      	movs	r2, #2
 8006400:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	4413      	add	r3, r2
 800640a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640e:	461a      	mov	r2, r3
 8006410:	2380      	movs	r3, #128	; 0x80
 8006412:	6093      	str	r3, [r2, #8]
}
 8006414:	e19b      	b.n	800674e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	4413      	add	r3, r2
 800641e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800642c:	d134      	bne.n	8006498 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	4413      	add	r3, r2
 8006436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	0151      	lsls	r1, r2, #5
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	440a      	add	r2, r1
 8006444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006448:	f043 0302 	orr.w	r3, r3, #2
 800644c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	4611      	mov	r1, r2
 8006458:	4618      	mov	r0, r3
 800645a:	f004 fc60 	bl	800ad1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	4413      	add	r3, r2
 8006466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646a:	461a      	mov	r2, r3
 800646c:	2310      	movs	r3, #16
 800646e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	4413      	add	r3, r2
 8006478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647c:	461a      	mov	r2, r3
 800647e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006482:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	212c      	movs	r1, #44	; 0x2c
 800648a:	fb01 f303 	mul.w	r3, r1, r3
 800648e:	4413      	add	r3, r2
 8006490:	3361      	adds	r3, #97	; 0x61
 8006492:	2208      	movs	r2, #8
 8006494:	701a      	strb	r2, [r3, #0]
}
 8006496:	e15a      	b.n	800674e <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	f040 814f 	bne.w	800674e <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	0151      	lsls	r1, r2, #5
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	440a      	add	r2, r1
 80064c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ca:	f023 0302 	bic.w	r3, r3, #2
 80064ce:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	212c      	movs	r1, #44	; 0x2c
 80064d6:	fb01 f303 	mul.w	r3, r1, r3
 80064da:	4413      	add	r3, r2
 80064dc:	3361      	adds	r3, #97	; 0x61
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d17d      	bne.n	80065e0 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	212c      	movs	r1, #44	; 0x2c
 80064ea:	fb01 f303 	mul.w	r3, r1, r3
 80064ee:	4413      	add	r3, r2
 80064f0:	3360      	adds	r3, #96	; 0x60
 80064f2:	2201      	movs	r2, #1
 80064f4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	212c      	movs	r1, #44	; 0x2c
 80064fc:	fb01 f303 	mul.w	r3, r1, r3
 8006500:	4413      	add	r3, r2
 8006502:	333f      	adds	r3, #63	; 0x3f
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b02      	cmp	r3, #2
 8006508:	d00a      	beq.n	8006520 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	212c      	movs	r1, #44	; 0x2c
 8006510:	fb01 f303 	mul.w	r3, r1, r3
 8006514:	4413      	add	r3, r2
 8006516:	333f      	adds	r3, #63	; 0x3f
 8006518:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800651a:	2b03      	cmp	r3, #3
 800651c:	f040 8100 	bne.w	8006720 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d113      	bne.n	8006550 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	212c      	movs	r1, #44	; 0x2c
 800652e:	fb01 f303 	mul.w	r3, r1, r3
 8006532:	4413      	add	r3, r2
 8006534:	3355      	adds	r3, #85	; 0x55
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	f083 0301 	eor.w	r3, r3, #1
 800653c:	b2d8      	uxtb	r0, r3
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	212c      	movs	r1, #44	; 0x2c
 8006544:	fb01 f303 	mul.w	r3, r1, r3
 8006548:	4413      	add	r3, r2
 800654a:	3355      	adds	r3, #85	; 0x55
 800654c:	4602      	mov	r2, r0
 800654e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	2b01      	cmp	r3, #1
 8006556:	f040 80e3 	bne.w	8006720 <HCD_HC_OUT_IRQHandler+0x7cc>
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	212c      	movs	r1, #44	; 0x2c
 8006560:	fb01 f303 	mul.w	r3, r1, r3
 8006564:	4413      	add	r3, r2
 8006566:	334c      	adds	r3, #76	; 0x4c
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 80d8 	beq.w	8006720 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	212c      	movs	r1, #44	; 0x2c
 8006576:	fb01 f303 	mul.w	r3, r1, r3
 800657a:	4413      	add	r3, r2
 800657c:	334c      	adds	r3, #76	; 0x4c
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	202c      	movs	r0, #44	; 0x2c
 8006586:	fb00 f202 	mul.w	r2, r0, r2
 800658a:	440a      	add	r2, r1
 800658c:	3240      	adds	r2, #64	; 0x40
 800658e:	8812      	ldrh	r2, [r2, #0]
 8006590:	4413      	add	r3, r2
 8006592:	3b01      	subs	r3, #1
 8006594:	6879      	ldr	r1, [r7, #4]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	202c      	movs	r0, #44	; 0x2c
 800659a:	fb00 f202 	mul.w	r2, r0, r2
 800659e:	440a      	add	r2, r1
 80065a0:	3240      	adds	r2, #64	; 0x40
 80065a2:	8812      	ldrh	r2, [r2, #0]
 80065a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 80b5 	beq.w	8006720 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	212c      	movs	r1, #44	; 0x2c
 80065bc:	fb01 f303 	mul.w	r3, r1, r3
 80065c0:	4413      	add	r3, r2
 80065c2:	3355      	adds	r3, #85	; 0x55
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	f083 0301 	eor.w	r3, r3, #1
 80065ca:	b2d8      	uxtb	r0, r3
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	212c      	movs	r1, #44	; 0x2c
 80065d2:	fb01 f303 	mul.w	r3, r1, r3
 80065d6:	4413      	add	r3, r2
 80065d8:	3355      	adds	r3, #85	; 0x55
 80065da:	4602      	mov	r2, r0
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	e09f      	b.n	8006720 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	212c      	movs	r1, #44	; 0x2c
 80065e6:	fb01 f303 	mul.w	r3, r1, r3
 80065ea:	4413      	add	r3, r2
 80065ec:	3361      	adds	r3, #97	; 0x61
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d109      	bne.n	8006608 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	212c      	movs	r1, #44	; 0x2c
 80065fa:	fb01 f303 	mul.w	r3, r1, r3
 80065fe:	4413      	add	r3, r2
 8006600:	3360      	adds	r3, #96	; 0x60
 8006602:	2202      	movs	r2, #2
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	e08b      	b.n	8006720 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	212c      	movs	r1, #44	; 0x2c
 800660e:	fb01 f303 	mul.w	r3, r1, r3
 8006612:	4413      	add	r3, r2
 8006614:	3361      	adds	r3, #97	; 0x61
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b04      	cmp	r3, #4
 800661a:	d109      	bne.n	8006630 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	212c      	movs	r1, #44	; 0x2c
 8006622:	fb01 f303 	mul.w	r3, r1, r3
 8006626:	4413      	add	r3, r2
 8006628:	3360      	adds	r3, #96	; 0x60
 800662a:	2202      	movs	r2, #2
 800662c:	701a      	strb	r2, [r3, #0]
 800662e:	e077      	b.n	8006720 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	212c      	movs	r1, #44	; 0x2c
 8006636:	fb01 f303 	mul.w	r3, r1, r3
 800663a:	4413      	add	r3, r2
 800663c:	3361      	adds	r3, #97	; 0x61
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b05      	cmp	r3, #5
 8006642:	d109      	bne.n	8006658 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	212c      	movs	r1, #44	; 0x2c
 800664a:	fb01 f303 	mul.w	r3, r1, r3
 800664e:	4413      	add	r3, r2
 8006650:	3360      	adds	r3, #96	; 0x60
 8006652:	2205      	movs	r2, #5
 8006654:	701a      	strb	r2, [r3, #0]
 8006656:	e063      	b.n	8006720 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	212c      	movs	r1, #44	; 0x2c
 800665e:	fb01 f303 	mul.w	r3, r1, r3
 8006662:	4413      	add	r3, r2
 8006664:	3361      	adds	r3, #97	; 0x61
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b06      	cmp	r3, #6
 800666a:	d009      	beq.n	8006680 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	212c      	movs	r1, #44	; 0x2c
 8006672:	fb01 f303 	mul.w	r3, r1, r3
 8006676:	4413      	add	r3, r2
 8006678:	3361      	adds	r3, #97	; 0x61
 800667a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800667c:	2b08      	cmp	r3, #8
 800667e:	d14f      	bne.n	8006720 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	212c      	movs	r1, #44	; 0x2c
 8006686:	fb01 f303 	mul.w	r3, r1, r3
 800668a:	4413      	add	r3, r2
 800668c:	335c      	adds	r3, #92	; 0x5c
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	6879      	ldr	r1, [r7, #4]
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	202c      	movs	r0, #44	; 0x2c
 8006698:	fb00 f303 	mul.w	r3, r0, r3
 800669c:	440b      	add	r3, r1
 800669e:	335c      	adds	r3, #92	; 0x5c
 80066a0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	212c      	movs	r1, #44	; 0x2c
 80066a8:	fb01 f303 	mul.w	r3, r1, r3
 80066ac:	4413      	add	r3, r2
 80066ae:	335c      	adds	r3, #92	; 0x5c
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d912      	bls.n	80066dc <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	212c      	movs	r1, #44	; 0x2c
 80066bc:	fb01 f303 	mul.w	r3, r1, r3
 80066c0:	4413      	add	r3, r2
 80066c2:	335c      	adds	r3, #92	; 0x5c
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	212c      	movs	r1, #44	; 0x2c
 80066ce:	fb01 f303 	mul.w	r3, r1, r3
 80066d2:	4413      	add	r3, r2
 80066d4:	3360      	adds	r3, #96	; 0x60
 80066d6:	2204      	movs	r2, #4
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	e021      	b.n	8006720 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	212c      	movs	r1, #44	; 0x2c
 80066e2:	fb01 f303 	mul.w	r3, r1, r3
 80066e6:	4413      	add	r3, r2
 80066e8:	3360      	adds	r3, #96	; 0x60
 80066ea:	2202      	movs	r2, #2
 80066ec:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006704:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800670c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	4413      	add	r3, r2
 8006716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671a:	461a      	mov	r2, r3
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	4413      	add	r3, r2
 8006728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800672c:	461a      	mov	r2, r3
 800672e:	2302      	movs	r3, #2
 8006730:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	b2d9      	uxtb	r1, r3
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	202c      	movs	r0, #44	; 0x2c
 800673c:	fb00 f303 	mul.w	r3, r0, r3
 8006740:	4413      	add	r3, r2
 8006742:	3360      	adds	r3, #96	; 0x60
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	461a      	mov	r2, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7fe ffd3 	bl	80056f4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800674e:	bf00      	nop
 8006750:	3720      	adds	r7, #32
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b08a      	sub	sp, #40	; 0x28
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	f003 030f 	and.w	r3, r3, #15
 8006776:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	0c5b      	lsrs	r3, r3, #17
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	091b      	lsrs	r3, r3, #4
 8006786:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800678a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	2b02      	cmp	r3, #2
 8006790:	d004      	beq.n	800679c <HCD_RXQLVL_IRQHandler+0x46>
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b05      	cmp	r3, #5
 8006796:	f000 80a9 	beq.w	80068ec <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800679a:	e0aa      	b.n	80068f2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 80a6 	beq.w	80068f0 <HCD_RXQLVL_IRQHandler+0x19a>
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	212c      	movs	r1, #44	; 0x2c
 80067aa:	fb01 f303 	mul.w	r3, r1, r3
 80067ae:	4413      	add	r3, r2
 80067b0:	3344      	adds	r3, #68	; 0x44
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 809b 	beq.w	80068f0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	212c      	movs	r1, #44	; 0x2c
 80067c0:	fb01 f303 	mul.w	r3, r1, r3
 80067c4:	4413      	add	r3, r2
 80067c6:	3350      	adds	r3, #80	; 0x50
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	441a      	add	r2, r3
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	202c      	movs	r0, #44	; 0x2c
 80067d4:	fb00 f303 	mul.w	r3, r0, r3
 80067d8:	440b      	add	r3, r1
 80067da:	334c      	adds	r3, #76	; 0x4c
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d87a      	bhi.n	80068d8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6818      	ldr	r0, [r3, #0]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	212c      	movs	r1, #44	; 0x2c
 80067ec:	fb01 f303 	mul.w	r3, r1, r3
 80067f0:	4413      	add	r3, r2
 80067f2:	3344      	adds	r3, #68	; 0x44
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	b292      	uxth	r2, r2
 80067fa:	4619      	mov	r1, r3
 80067fc:	f004 f8e4 	bl	800a9c8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	212c      	movs	r1, #44	; 0x2c
 8006806:	fb01 f303 	mul.w	r3, r1, r3
 800680a:	4413      	add	r3, r2
 800680c:	3344      	adds	r3, #68	; 0x44
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	441a      	add	r2, r3
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	202c      	movs	r0, #44	; 0x2c
 800681a:	fb00 f303 	mul.w	r3, r0, r3
 800681e:	440b      	add	r3, r1
 8006820:	3344      	adds	r3, #68	; 0x44
 8006822:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	212c      	movs	r1, #44	; 0x2c
 800682a:	fb01 f303 	mul.w	r3, r1, r3
 800682e:	4413      	add	r3, r2
 8006830:	3350      	adds	r3, #80	; 0x50
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	441a      	add	r2, r3
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	202c      	movs	r0, #44	; 0x2c
 800683e:	fb00 f303 	mul.w	r3, r0, r3
 8006842:	440b      	add	r3, r1
 8006844:	3350      	adds	r3, #80	; 0x50
 8006846:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	4413      	add	r3, r2
 8006850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	0cdb      	lsrs	r3, r3, #19
 8006858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800685c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	212c      	movs	r1, #44	; 0x2c
 8006864:	fb01 f303 	mul.w	r3, r1, r3
 8006868:	4413      	add	r3, r2
 800686a:	3340      	adds	r3, #64	; 0x40
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	4293      	cmp	r3, r2
 8006874:	d13c      	bne.n	80068f0 <HCD_RXQLVL_IRQHandler+0x19a>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d039      	beq.n	80068f0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	4413      	add	r3, r2
 8006884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006892:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800689a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a8:	461a      	mov	r2, r3
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	212c      	movs	r1, #44	; 0x2c
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
 80068b8:	4413      	add	r3, r2
 80068ba:	3354      	adds	r3, #84	; 0x54
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	f083 0301 	eor.w	r3, r3, #1
 80068c2:	b2d8      	uxtb	r0, r3
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	212c      	movs	r1, #44	; 0x2c
 80068ca:	fb01 f303 	mul.w	r3, r1, r3
 80068ce:	4413      	add	r3, r2
 80068d0:	3354      	adds	r3, #84	; 0x54
 80068d2:	4602      	mov	r2, r0
 80068d4:	701a      	strb	r2, [r3, #0]
      break;
 80068d6:	e00b      	b.n	80068f0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	212c      	movs	r1, #44	; 0x2c
 80068de:	fb01 f303 	mul.w	r3, r1, r3
 80068e2:	4413      	add	r3, r2
 80068e4:	3360      	adds	r3, #96	; 0x60
 80068e6:	2204      	movs	r2, #4
 80068e8:	701a      	strb	r2, [r3, #0]
      break;
 80068ea:	e001      	b.n	80068f0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80068ec:	bf00      	nop
 80068ee:	e000      	b.n	80068f2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80068f0:	bf00      	nop
  }
}
 80068f2:	bf00      	nop
 80068f4:	3728      	adds	r7, #40	; 0x28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b086      	sub	sp, #24
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006926:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b02      	cmp	r3, #2
 8006930:	d10b      	bne.n	800694a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b01      	cmp	r3, #1
 800693a:	d102      	bne.n	8006942 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7fe feb1 	bl	80056a4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f043 0302 	orr.w	r3, r3, #2
 8006948:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f003 0308 	and.w	r3, r3, #8
 8006950:	2b08      	cmp	r3, #8
 8006952:	d132      	bne.n	80069ba <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f043 0308 	orr.w	r3, r3, #8
 800695a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f003 0304 	and.w	r3, r3, #4
 8006962:	2b04      	cmp	r3, #4
 8006964:	d126      	bne.n	80069b4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	2b02      	cmp	r3, #2
 800696c:	d113      	bne.n	8006996 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006974:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006978:	d106      	bne.n	8006988 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2102      	movs	r1, #2
 8006980:	4618      	mov	r0, r3
 8006982:	f004 f981 	bl	800ac88 <USB_InitFSLSPClkSel>
 8006986:	e011      	b.n	80069ac <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2101      	movs	r1, #1
 800698e:	4618      	mov	r0, r3
 8006990:	f004 f97a 	bl	800ac88 <USB_InitFSLSPClkSel>
 8006994:	e00a      	b.n	80069ac <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d106      	bne.n	80069ac <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069a4:	461a      	mov	r2, r3
 80069a6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80069aa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7fe fe8d 	bl	80056cc <HAL_HCD_PortEnabled_Callback>
 80069b2:	e002      	b.n	80069ba <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7fe fe93 	bl	80056e0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f003 0320 	and.w	r3, r3, #32
 80069c0:	2b20      	cmp	r3, #32
 80069c2:	d103      	bne.n	80069cc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f043 0320 	orr.w	r3, r3, #32
 80069ca:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80069d2:	461a      	mov	r2, r3
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	6013      	str	r3, [r2, #0]
}
 80069d8:	bf00      	nop
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e12b      	b.n	8006c4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d106      	bne.n	8006a0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7fc fcd2 	bl	80033b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2224      	movs	r2, #36	; 0x24
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0201 	bic.w	r2, r2, #1
 8006a22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006a44:	f001 f9fc 	bl	8007e40 <HAL_RCC_GetPCLK1Freq>
 8006a48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	4a81      	ldr	r2, [pc, #516]	; (8006c54 <HAL_I2C_Init+0x274>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d807      	bhi.n	8006a64 <HAL_I2C_Init+0x84>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4a80      	ldr	r2, [pc, #512]	; (8006c58 <HAL_I2C_Init+0x278>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	bf94      	ite	ls
 8006a5c:	2301      	movls	r3, #1
 8006a5e:	2300      	movhi	r3, #0
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	e006      	b.n	8006a72 <HAL_I2C_Init+0x92>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4a7d      	ldr	r2, [pc, #500]	; (8006c5c <HAL_I2C_Init+0x27c>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	bf94      	ite	ls
 8006a6c:	2301      	movls	r3, #1
 8006a6e:	2300      	movhi	r3, #0
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e0e7      	b.n	8006c4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4a78      	ldr	r2, [pc, #480]	; (8006c60 <HAL_I2C_Init+0x280>)
 8006a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a82:	0c9b      	lsrs	r3, r3, #18
 8006a84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	4a6a      	ldr	r2, [pc, #424]	; (8006c54 <HAL_I2C_Init+0x274>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d802      	bhi.n	8006ab4 <HAL_I2C_Init+0xd4>
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	e009      	b.n	8006ac8 <HAL_I2C_Init+0xe8>
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006aba:	fb02 f303 	mul.w	r3, r2, r3
 8006abe:	4a69      	ldr	r2, [pc, #420]	; (8006c64 <HAL_I2C_Init+0x284>)
 8006ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac4:	099b      	lsrs	r3, r3, #6
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	6812      	ldr	r2, [r2, #0]
 8006acc:	430b      	orrs	r3, r1
 8006ace:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006ada:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	495c      	ldr	r1, [pc, #368]	; (8006c54 <HAL_I2C_Init+0x274>)
 8006ae4:	428b      	cmp	r3, r1
 8006ae6:	d819      	bhi.n	8006b1c <HAL_I2C_Init+0x13c>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	1e59      	subs	r1, r3, #1
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	005b      	lsls	r3, r3, #1
 8006af2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006af6:	1c59      	adds	r1, r3, #1
 8006af8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006afc:	400b      	ands	r3, r1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <HAL_I2C_Init+0x138>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	1e59      	subs	r1, r3, #1
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b10:	3301      	adds	r3, #1
 8006b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b16:	e051      	b.n	8006bbc <HAL_I2C_Init+0x1dc>
 8006b18:	2304      	movs	r3, #4
 8006b1a:	e04f      	b.n	8006bbc <HAL_I2C_Init+0x1dc>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d111      	bne.n	8006b48 <HAL_I2C_Init+0x168>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	1e58      	subs	r0, r3, #1
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6859      	ldr	r1, [r3, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	005b      	lsls	r3, r3, #1
 8006b30:	440b      	add	r3, r1
 8006b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b36:	3301      	adds	r3, #1
 8006b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	bf0c      	ite	eq
 8006b40:	2301      	moveq	r3, #1
 8006b42:	2300      	movne	r3, #0
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	e012      	b.n	8006b6e <HAL_I2C_Init+0x18e>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	1e58      	subs	r0, r3, #1
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6859      	ldr	r1, [r3, #4]
 8006b50:	460b      	mov	r3, r1
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	440b      	add	r3, r1
 8006b56:	0099      	lsls	r1, r3, #2
 8006b58:	440b      	add	r3, r1
 8006b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b5e:	3301      	adds	r3, #1
 8006b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	bf0c      	ite	eq
 8006b68:	2301      	moveq	r3, #1
 8006b6a:	2300      	movne	r3, #0
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <HAL_I2C_Init+0x196>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e022      	b.n	8006bbc <HAL_I2C_Init+0x1dc>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10e      	bne.n	8006b9c <HAL_I2C_Init+0x1bc>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	1e58      	subs	r0, r3, #1
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6859      	ldr	r1, [r3, #4]
 8006b86:	460b      	mov	r3, r1
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	440b      	add	r3, r1
 8006b8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b90:	3301      	adds	r3, #1
 8006b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b9a:	e00f      	b.n	8006bbc <HAL_I2C_Init+0x1dc>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	1e58      	subs	r0, r3, #1
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6859      	ldr	r1, [r3, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	440b      	add	r3, r1
 8006baa:	0099      	lsls	r1, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bbc:	6879      	ldr	r1, [r7, #4]
 8006bbe:	6809      	ldr	r1, [r1, #0]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	69da      	ldr	r2, [r3, #28]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006bea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	6911      	ldr	r1, [r2, #16]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	68d2      	ldr	r2, [r2, #12]
 8006bf6:	4311      	orrs	r1, r2
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6812      	ldr	r2, [r2, #0]
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	695a      	ldr	r2, [r3, #20]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0201 	orr.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	000186a0 	.word	0x000186a0
 8006c58:	001e847f 	.word	0x001e847f
 8006c5c:	003d08ff 	.word	0x003d08ff
 8006c60:	431bde83 	.word	0x431bde83
 8006c64:	10624dd3 	.word	0x10624dd3

08006c68 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e128      	b.n	8006ecc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d109      	bne.n	8006c9a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a90      	ldr	r2, [pc, #576]	; (8006ed4 <HAL_I2S_Init+0x26c>)
 8006c92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7fc fbd3 	bl	8003440 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	6812      	ldr	r2, [r2, #0]
 8006cac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006cb0:	f023 030f 	bic.w	r3, r3, #15
 8006cb4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d060      	beq.n	8006d88 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d102      	bne.n	8006cd4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006cce:	2310      	movs	r3, #16
 8006cd0:	617b      	str	r3, [r7, #20]
 8006cd2:	e001      	b.n	8006cd8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006cd4:	2320      	movs	r3, #32
 8006cd6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	2b20      	cmp	r3, #32
 8006cde:	d802      	bhi.n	8006ce6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006ce6:	2001      	movs	r0, #1
 8006ce8:	f001 f9e6 	bl	80080b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006cec:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cf6:	d125      	bne.n	8006d44 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d010      	beq.n	8006d22 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	461a      	mov	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1c:	3305      	adds	r3, #5
 8006d1e:	613b      	str	r3, [r7, #16]
 8006d20:	e01f      	b.n	8006d62 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	461a      	mov	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3e:	3305      	adds	r3, #5
 8006d40:	613b      	str	r3, [r7, #16]
 8006d42:	e00e      	b.n	8006d62 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	461a      	mov	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5e:	3305      	adds	r3, #5
 8006d60:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	4a5c      	ldr	r2, [pc, #368]	; (8006ed8 <HAL_I2S_Init+0x270>)
 8006d66:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6a:	08db      	lsrs	r3, r3, #3
 8006d6c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	085b      	lsrs	r3, r3, #1
 8006d7e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	021b      	lsls	r3, r3, #8
 8006d84:	61bb      	str	r3, [r7, #24]
 8006d86:	e003      	b.n	8006d90 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006d88:	2302      	movs	r3, #2
 8006d8a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d902      	bls.n	8006d9c <HAL_I2S_Init+0x134>
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	2bff      	cmp	r3, #255	; 0xff
 8006d9a:	d907      	bls.n	8006dac <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da0:	f043 0210 	orr.w	r2, r3, #16
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e08f      	b.n	8006ecc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	691a      	ldr	r2, [r3, #16]
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	ea42 0103 	orr.w	r1, r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006dca:	f023 030f 	bic.w	r3, r3, #15
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6851      	ldr	r1, [r2, #4]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	6892      	ldr	r2, [r2, #8]
 8006dd6:	4311      	orrs	r1, r2
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	68d2      	ldr	r2, [r2, #12]
 8006ddc:	4311      	orrs	r1, r2
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	6992      	ldr	r2, [r2, #24]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d161      	bne.n	8006ebc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a38      	ldr	r2, [pc, #224]	; (8006edc <HAL_I2S_Init+0x274>)
 8006dfc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a37      	ldr	r2, [pc, #220]	; (8006ee0 <HAL_I2S_Init+0x278>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d101      	bne.n	8006e0c <HAL_I2S_Init+0x1a4>
 8006e08:	4b36      	ldr	r3, [pc, #216]	; (8006ee4 <HAL_I2S_Init+0x27c>)
 8006e0a:	e001      	b.n	8006e10 <HAL_I2S_Init+0x1a8>
 8006e0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	6812      	ldr	r2, [r2, #0]
 8006e16:	4932      	ldr	r1, [pc, #200]	; (8006ee0 <HAL_I2S_Init+0x278>)
 8006e18:	428a      	cmp	r2, r1
 8006e1a:	d101      	bne.n	8006e20 <HAL_I2S_Init+0x1b8>
 8006e1c:	4a31      	ldr	r2, [pc, #196]	; (8006ee4 <HAL_I2S_Init+0x27c>)
 8006e1e:	e001      	b.n	8006e24 <HAL_I2S_Init+0x1bc>
 8006e20:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006e24:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006e28:	f023 030f 	bic.w	r3, r3, #15
 8006e2c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a2b      	ldr	r2, [pc, #172]	; (8006ee0 <HAL_I2S_Init+0x278>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d101      	bne.n	8006e3c <HAL_I2S_Init+0x1d4>
 8006e38:	4b2a      	ldr	r3, [pc, #168]	; (8006ee4 <HAL_I2S_Init+0x27c>)
 8006e3a:	e001      	b.n	8006e40 <HAL_I2S_Init+0x1d8>
 8006e3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e40:	2202      	movs	r2, #2
 8006e42:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a25      	ldr	r2, [pc, #148]	; (8006ee0 <HAL_I2S_Init+0x278>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d101      	bne.n	8006e52 <HAL_I2S_Init+0x1ea>
 8006e4e:	4b25      	ldr	r3, [pc, #148]	; (8006ee4 <HAL_I2S_Init+0x27c>)
 8006e50:	e001      	b.n	8006e56 <HAL_I2S_Init+0x1ee>
 8006e52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e62:	d003      	beq.n	8006e6c <HAL_I2S_Init+0x204>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d103      	bne.n	8006e74 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e70:	613b      	str	r3, [r7, #16]
 8006e72:	e001      	b.n	8006e78 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006e74:	2300      	movs	r3, #0
 8006e76:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006e82:	4313      	orrs	r3, r2
 8006e84:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006e96:	4313      	orrs	r3, r2
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	897b      	ldrh	r3, [r7, #10]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ea4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a0d      	ldr	r2, [pc, #52]	; (8006ee0 <HAL_I2S_Init+0x278>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d101      	bne.n	8006eb4 <HAL_I2S_Init+0x24c>
 8006eb0:	4b0c      	ldr	r3, [pc, #48]	; (8006ee4 <HAL_I2S_Init+0x27c>)
 8006eb2:	e001      	b.n	8006eb8 <HAL_I2S_Init+0x250>
 8006eb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006eb8:	897a      	ldrh	r2, [r7, #10]
 8006eba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3720      	adds	r7, #32
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	08006fdf 	.word	0x08006fdf
 8006ed8:	cccccccd 	.word	0xcccccccd
 8006edc:	080070f5 	.word	0x080070f5
 8006ee0:	40003800 	.word	0x40003800
 8006ee4:	40003400 	.word	0x40003400

08006ee8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	881a      	ldrh	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3c:	1c9a      	adds	r2, r3, #2
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10e      	bne.n	8006f78 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f68:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff ffb8 	bl	8006ee8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006f78:	bf00      	nop
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68da      	ldr	r2, [r3, #12]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f92:	b292      	uxth	r2, r2
 8006f94:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9a:	1c9a      	adds	r2, r3, #2
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10e      	bne.n	8006fd6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006fc6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7ff ff93 	bl	8006efc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006fd6:	bf00      	nop
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b086      	sub	sp, #24
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b04      	cmp	r3, #4
 8006ff8:	d13a      	bne.n	8007070 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b01      	cmp	r3, #1
 8007002:	d109      	bne.n	8007018 <I2S_IRQHandler+0x3a>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700e:	2b40      	cmp	r3, #64	; 0x40
 8007010:	d102      	bne.n	8007018 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7ff ffb4 	bl	8006f80 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701e:	2b40      	cmp	r3, #64	; 0x40
 8007020:	d126      	bne.n	8007070 <I2S_IRQHandler+0x92>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f003 0320 	and.w	r3, r3, #32
 800702c:	2b20      	cmp	r3, #32
 800702e:	d11f      	bne.n	8007070 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800703e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007040:	2300      	movs	r3, #0
 8007042:	613b      	str	r3, [r7, #16]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	613b      	str	r3, [r7, #16]
 8007054:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007062:	f043 0202 	orr.w	r2, r3, #2
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff ff50 	bl	8006f10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b03      	cmp	r3, #3
 800707a:	d136      	bne.n	80070ea <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b02      	cmp	r3, #2
 8007084:	d109      	bne.n	800709a <I2S_IRQHandler+0xbc>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007090:	2b80      	cmp	r3, #128	; 0x80
 8007092:	d102      	bne.n	800709a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7ff ff45 	bl	8006f24 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f003 0308 	and.w	r3, r3, #8
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d122      	bne.n	80070ea <I2S_IRQHandler+0x10c>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f003 0320 	and.w	r3, r3, #32
 80070ae:	2b20      	cmp	r3, #32
 80070b0:	d11b      	bne.n	80070ea <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80070c0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80070c2:	2300      	movs	r3, #0
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070dc:	f043 0204 	orr.w	r2, r3, #4
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff ff13 	bl	8006f10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80070ea:	bf00      	nop
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4aa2      	ldr	r2, [pc, #648]	; (8007394 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d101      	bne.n	8007112 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800710e:	4ba2      	ldr	r3, [pc, #648]	; (8007398 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007110:	e001      	b.n	8007116 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007112:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a9b      	ldr	r2, [pc, #620]	; (8007394 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d101      	bne.n	8007130 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800712c:	4b9a      	ldr	r3, [pc, #616]	; (8007398 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800712e:	e001      	b.n	8007134 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007130:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007140:	d004      	beq.n	800714c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	f040 8099 	bne.w	800727e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b02      	cmp	r3, #2
 8007154:	d107      	bne.n	8007166 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f925 	bl	80073b0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b01      	cmp	r3, #1
 800716e:	d107      	bne.n	8007180 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f9c8 	bl	8007510 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007186:	2b40      	cmp	r3, #64	; 0x40
 8007188:	d13a      	bne.n	8007200 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f003 0320 	and.w	r3, r3, #32
 8007190:	2b00      	cmp	r3, #0
 8007192:	d035      	beq.n	8007200 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a7e      	ldr	r2, [pc, #504]	; (8007394 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d101      	bne.n	80071a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800719e:	4b7e      	ldr	r3, [pc, #504]	; (8007398 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80071a0:	e001      	b.n	80071a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80071a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4979      	ldr	r1, [pc, #484]	; (8007394 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80071ae:	428b      	cmp	r3, r1
 80071b0:	d101      	bne.n	80071b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80071b2:	4b79      	ldr	r3, [pc, #484]	; (8007398 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80071b4:	e001      	b.n	80071ba <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80071b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80071be:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685a      	ldr	r2, [r3, #4]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80071ce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80071d0:	2300      	movs	r3, #0
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f2:	f043 0202 	orr.w	r2, r3, #2
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7ff fe88 	bl	8006f10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	f003 0308 	and.w	r3, r3, #8
 8007206:	2b08      	cmp	r3, #8
 8007208:	f040 80be 	bne.w	8007388 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 80b8 	beq.w	8007388 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007226:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a59      	ldr	r2, [pc, #356]	; (8007394 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d101      	bne.n	8007236 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007232:	4b59      	ldr	r3, [pc, #356]	; (8007398 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007234:	e001      	b.n	800723a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007236:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4954      	ldr	r1, [pc, #336]	; (8007394 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007242:	428b      	cmp	r3, r1
 8007244:	d101      	bne.n	800724a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007246:	4b54      	ldr	r3, [pc, #336]	; (8007398 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007248:	e001      	b.n	800724e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800724a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800724e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007252:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007254:	2300      	movs	r3, #0
 8007256:	60bb      	str	r3, [r7, #8]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	60bb      	str	r3, [r7, #8]
 8007260:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726e:	f043 0204 	orr.w	r2, r3, #4
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7ff fe4a 	bl	8006f10 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800727c:	e084      	b.n	8007388 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	f003 0302 	and.w	r3, r3, #2
 8007284:	2b02      	cmp	r3, #2
 8007286:	d107      	bne.n	8007298 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800728e:	2b00      	cmp	r3, #0
 8007290:	d002      	beq.n	8007298 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f8be 	bl	8007414 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d107      	bne.n	80072b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f8fd 	bl	80074ac <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b8:	2b40      	cmp	r3, #64	; 0x40
 80072ba:	d12f      	bne.n	800731c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	f003 0320 	and.w	r3, r3, #32
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d02a      	beq.n	800731c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80072d4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a2e      	ldr	r2, [pc, #184]	; (8007394 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d101      	bne.n	80072e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80072e0:	4b2d      	ldr	r3, [pc, #180]	; (8007398 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80072e2:	e001      	b.n	80072e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80072e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4929      	ldr	r1, [pc, #164]	; (8007394 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80072f0:	428b      	cmp	r3, r1
 80072f2:	d101      	bne.n	80072f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80072f4:	4b28      	ldr	r3, [pc, #160]	; (8007398 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80072f6:	e001      	b.n	80072fc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80072f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007300:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730e:	f043 0202 	orr.w	r2, r3, #2
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff fdfa 	bl	8006f10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	f003 0308 	and.w	r3, r3, #8
 8007322:	2b08      	cmp	r3, #8
 8007324:	d131      	bne.n	800738a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f003 0320 	and.w	r3, r3, #32
 800732c:	2b00      	cmp	r3, #0
 800732e:	d02c      	beq.n	800738a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a17      	ldr	r2, [pc, #92]	; (8007394 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d101      	bne.n	800733e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800733a:	4b17      	ldr	r3, [pc, #92]	; (8007398 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800733c:	e001      	b.n	8007342 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800733e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4912      	ldr	r1, [pc, #72]	; (8007394 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800734a:	428b      	cmp	r3, r1
 800734c:	d101      	bne.n	8007352 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800734e:	4b12      	ldr	r3, [pc, #72]	; (8007398 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007350:	e001      	b.n	8007356 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8007352:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007356:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800735a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800736a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007378:	f043 0204 	orr.w	r2, r3, #4
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff fdc5 	bl	8006f10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007386:	e000      	b.n	800738a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007388:	bf00      	nop
}
 800738a:	bf00      	nop
 800738c:	3720      	adds	r7, #32
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	40003800 	.word	0x40003800
 8007398:	40003400 	.word	0x40003400

0800739c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073bc:	1c99      	adds	r1, r3, #2
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6251      	str	r1, [r2, #36]	; 0x24
 80073c2:	881a      	ldrh	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d113      	bne.n	800740a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80073f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d106      	bne.n	800740a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7ff ffc9 	bl	800739c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800740a:	bf00      	nop
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
	...

08007414 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	1c99      	adds	r1, r3, #2
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	6251      	str	r1, [r2, #36]	; 0x24
 8007426:	8819      	ldrh	r1, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a1d      	ldr	r2, [pc, #116]	; (80074a4 <I2SEx_TxISR_I2SExt+0x90>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d101      	bne.n	8007436 <I2SEx_TxISR_I2SExt+0x22>
 8007432:	4b1d      	ldr	r3, [pc, #116]	; (80074a8 <I2SEx_TxISR_I2SExt+0x94>)
 8007434:	e001      	b.n	800743a <I2SEx_TxISR_I2SExt+0x26>
 8007436:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800743a:	460a      	mov	r2, r1
 800743c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007442:	b29b      	uxth	r3, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007450:	b29b      	uxth	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d121      	bne.n	800749a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a12      	ldr	r2, [pc, #72]	; (80074a4 <I2SEx_TxISR_I2SExt+0x90>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d101      	bne.n	8007464 <I2SEx_TxISR_I2SExt+0x50>
 8007460:	4b11      	ldr	r3, [pc, #68]	; (80074a8 <I2SEx_TxISR_I2SExt+0x94>)
 8007462:	e001      	b.n	8007468 <I2SEx_TxISR_I2SExt+0x54>
 8007464:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	490d      	ldr	r1, [pc, #52]	; (80074a4 <I2SEx_TxISR_I2SExt+0x90>)
 8007470:	428b      	cmp	r3, r1
 8007472:	d101      	bne.n	8007478 <I2SEx_TxISR_I2SExt+0x64>
 8007474:	4b0c      	ldr	r3, [pc, #48]	; (80074a8 <I2SEx_TxISR_I2SExt+0x94>)
 8007476:	e001      	b.n	800747c <I2SEx_TxISR_I2SExt+0x68>
 8007478:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800747c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007480:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007486:	b29b      	uxth	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	d106      	bne.n	800749a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff ff81 	bl	800739c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800749a:	bf00      	nop
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	40003800 	.word	0x40003800
 80074a8:	40003400 	.word	0x40003400

080074ac <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68d8      	ldr	r0, [r3, #12]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074be:	1c99      	adds	r1, r3, #2
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80074c4:	b282      	uxth	r2, r0
 80074c6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	3b01      	subs	r3, #1
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074da:	b29b      	uxth	r3, r3
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d113      	bne.n	8007508 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80074ee:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d106      	bne.n	8007508 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7ff ff4a 	bl	800739c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007508:	bf00      	nop
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a20      	ldr	r2, [pc, #128]	; (80075a0 <I2SEx_RxISR_I2SExt+0x90>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d101      	bne.n	8007526 <I2SEx_RxISR_I2SExt+0x16>
 8007522:	4b20      	ldr	r3, [pc, #128]	; (80075a4 <I2SEx_RxISR_I2SExt+0x94>)
 8007524:	e001      	b.n	800752a <I2SEx_RxISR_I2SExt+0x1a>
 8007526:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800752a:	68d8      	ldr	r0, [r3, #12]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007530:	1c99      	adds	r1, r3, #2
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007536:	b282      	uxth	r2, r0
 8007538:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800753e:	b29b      	uxth	r3, r3
 8007540:	3b01      	subs	r3, #1
 8007542:	b29a      	uxth	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800754c:	b29b      	uxth	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d121      	bne.n	8007596 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a12      	ldr	r2, [pc, #72]	; (80075a0 <I2SEx_RxISR_I2SExt+0x90>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d101      	bne.n	8007560 <I2SEx_RxISR_I2SExt+0x50>
 800755c:	4b11      	ldr	r3, [pc, #68]	; (80075a4 <I2SEx_RxISR_I2SExt+0x94>)
 800755e:	e001      	b.n	8007564 <I2SEx_RxISR_I2SExt+0x54>
 8007560:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	490d      	ldr	r1, [pc, #52]	; (80075a0 <I2SEx_RxISR_I2SExt+0x90>)
 800756c:	428b      	cmp	r3, r1
 800756e:	d101      	bne.n	8007574 <I2SEx_RxISR_I2SExt+0x64>
 8007570:	4b0c      	ldr	r3, [pc, #48]	; (80075a4 <I2SEx_RxISR_I2SExt+0x94>)
 8007572:	e001      	b.n	8007578 <I2SEx_RxISR_I2SExt+0x68>
 8007574:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007578:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800757c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007582:	b29b      	uxth	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	d106      	bne.n	8007596 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7ff ff03 	bl	800739c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007596:	bf00      	nop
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	40003800 	.word	0x40003800
 80075a4:	40003400 	.word	0x40003400

080075a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e264      	b.n	8007a84 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d075      	beq.n	80076b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075c6:	4ba3      	ldr	r3, [pc, #652]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f003 030c 	and.w	r3, r3, #12
 80075ce:	2b04      	cmp	r3, #4
 80075d0:	d00c      	beq.n	80075ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075d2:	4ba0      	ldr	r3, [pc, #640]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075da:	2b08      	cmp	r3, #8
 80075dc:	d112      	bne.n	8007604 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075de:	4b9d      	ldr	r3, [pc, #628]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075ea:	d10b      	bne.n	8007604 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075ec:	4b99      	ldr	r3, [pc, #612]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d05b      	beq.n	80076b0 <HAL_RCC_OscConfig+0x108>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d157      	bne.n	80076b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e23f      	b.n	8007a84 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800760c:	d106      	bne.n	800761c <HAL_RCC_OscConfig+0x74>
 800760e:	4b91      	ldr	r3, [pc, #580]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a90      	ldr	r2, [pc, #576]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 8007614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007618:	6013      	str	r3, [r2, #0]
 800761a:	e01d      	b.n	8007658 <HAL_RCC_OscConfig+0xb0>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007624:	d10c      	bne.n	8007640 <HAL_RCC_OscConfig+0x98>
 8007626:	4b8b      	ldr	r3, [pc, #556]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a8a      	ldr	r2, [pc, #552]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 800762c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007630:	6013      	str	r3, [r2, #0]
 8007632:	4b88      	ldr	r3, [pc, #544]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a87      	ldr	r2, [pc, #540]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 8007638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	e00b      	b.n	8007658 <HAL_RCC_OscConfig+0xb0>
 8007640:	4b84      	ldr	r3, [pc, #528]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a83      	ldr	r2, [pc, #524]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 8007646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800764a:	6013      	str	r3, [r2, #0]
 800764c:	4b81      	ldr	r3, [pc, #516]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a80      	ldr	r2, [pc, #512]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 8007652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d013      	beq.n	8007688 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007660:	f7fc fb92 	bl	8003d88 <HAL_GetTick>
 8007664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007666:	e008      	b.n	800767a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007668:	f7fc fb8e 	bl	8003d88 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b64      	cmp	r3, #100	; 0x64
 8007674:	d901      	bls.n	800767a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e204      	b.n	8007a84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800767a:	4b76      	ldr	r3, [pc, #472]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0f0      	beq.n	8007668 <HAL_RCC_OscConfig+0xc0>
 8007686:	e014      	b.n	80076b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007688:	f7fc fb7e 	bl	8003d88 <HAL_GetTick>
 800768c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800768e:	e008      	b.n	80076a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007690:	f7fc fb7a 	bl	8003d88 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	2b64      	cmp	r3, #100	; 0x64
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e1f0      	b.n	8007a84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076a2:	4b6c      	ldr	r3, [pc, #432]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1f0      	bne.n	8007690 <HAL_RCC_OscConfig+0xe8>
 80076ae:	e000      	b.n	80076b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d063      	beq.n	8007786 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076be:	4b65      	ldr	r3, [pc, #404]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f003 030c 	and.w	r3, r3, #12
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00b      	beq.n	80076e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076ca:	4b62      	ldr	r3, [pc, #392]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076d2:	2b08      	cmp	r3, #8
 80076d4:	d11c      	bne.n	8007710 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076d6:	4b5f      	ldr	r3, [pc, #380]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d116      	bne.n	8007710 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076e2:	4b5c      	ldr	r3, [pc, #368]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0302 	and.w	r3, r3, #2
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d005      	beq.n	80076fa <HAL_RCC_OscConfig+0x152>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d001      	beq.n	80076fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e1c4      	b.n	8007a84 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076fa:	4b56      	ldr	r3, [pc, #344]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	4952      	ldr	r1, [pc, #328]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 800770a:	4313      	orrs	r3, r2
 800770c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800770e:	e03a      	b.n	8007786 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d020      	beq.n	800775a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007718:	4b4f      	ldr	r3, [pc, #316]	; (8007858 <HAL_RCC_OscConfig+0x2b0>)
 800771a:	2201      	movs	r2, #1
 800771c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800771e:	f7fc fb33 	bl	8003d88 <HAL_GetTick>
 8007722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007724:	e008      	b.n	8007738 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007726:	f7fc fb2f 	bl	8003d88 <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	2b02      	cmp	r3, #2
 8007732:	d901      	bls.n	8007738 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e1a5      	b.n	8007a84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007738:	4b46      	ldr	r3, [pc, #280]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d0f0      	beq.n	8007726 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007744:	4b43      	ldr	r3, [pc, #268]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	00db      	lsls	r3, r3, #3
 8007752:	4940      	ldr	r1, [pc, #256]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 8007754:	4313      	orrs	r3, r2
 8007756:	600b      	str	r3, [r1, #0]
 8007758:	e015      	b.n	8007786 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800775a:	4b3f      	ldr	r3, [pc, #252]	; (8007858 <HAL_RCC_OscConfig+0x2b0>)
 800775c:	2200      	movs	r2, #0
 800775e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007760:	f7fc fb12 	bl	8003d88 <HAL_GetTick>
 8007764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007766:	e008      	b.n	800777a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007768:	f7fc fb0e 	bl	8003d88 <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	2b02      	cmp	r3, #2
 8007774:	d901      	bls.n	800777a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e184      	b.n	8007a84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800777a:	4b36      	ldr	r3, [pc, #216]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0302 	and.w	r3, r3, #2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1f0      	bne.n	8007768 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0308 	and.w	r3, r3, #8
 800778e:	2b00      	cmp	r3, #0
 8007790:	d030      	beq.n	80077f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d016      	beq.n	80077c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800779a:	4b30      	ldr	r3, [pc, #192]	; (800785c <HAL_RCC_OscConfig+0x2b4>)
 800779c:	2201      	movs	r2, #1
 800779e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077a0:	f7fc faf2 	bl	8003d88 <HAL_GetTick>
 80077a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077a6:	e008      	b.n	80077ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077a8:	f7fc faee 	bl	8003d88 <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d901      	bls.n	80077ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e164      	b.n	8007a84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077ba:	4b26      	ldr	r3, [pc, #152]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 80077bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d0f0      	beq.n	80077a8 <HAL_RCC_OscConfig+0x200>
 80077c6:	e015      	b.n	80077f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077c8:	4b24      	ldr	r3, [pc, #144]	; (800785c <HAL_RCC_OscConfig+0x2b4>)
 80077ca:	2200      	movs	r2, #0
 80077cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077ce:	f7fc fadb 	bl	8003d88 <HAL_GetTick>
 80077d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077d4:	e008      	b.n	80077e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077d6:	f7fc fad7 	bl	8003d88 <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d901      	bls.n	80077e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e14d      	b.n	8007a84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077e8:	4b1a      	ldr	r3, [pc, #104]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 80077ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077ec:	f003 0302 	and.w	r3, r3, #2
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1f0      	bne.n	80077d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0304 	and.w	r3, r3, #4
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 80a0 	beq.w	8007942 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007802:	2300      	movs	r3, #0
 8007804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007806:	4b13      	ldr	r3, [pc, #76]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10f      	bne.n	8007832 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007812:	2300      	movs	r3, #0
 8007814:	60bb      	str	r3, [r7, #8]
 8007816:	4b0f      	ldr	r3, [pc, #60]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 8007818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781a:	4a0e      	ldr	r2, [pc, #56]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 800781c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007820:	6413      	str	r3, [r2, #64]	; 0x40
 8007822:	4b0c      	ldr	r3, [pc, #48]	; (8007854 <HAL_RCC_OscConfig+0x2ac>)
 8007824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800782a:	60bb      	str	r3, [r7, #8]
 800782c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800782e:	2301      	movs	r3, #1
 8007830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007832:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <HAL_RCC_OscConfig+0x2b8>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783a:	2b00      	cmp	r3, #0
 800783c:	d121      	bne.n	8007882 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800783e:	4b08      	ldr	r3, [pc, #32]	; (8007860 <HAL_RCC_OscConfig+0x2b8>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a07      	ldr	r2, [pc, #28]	; (8007860 <HAL_RCC_OscConfig+0x2b8>)
 8007844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800784a:	f7fc fa9d 	bl	8003d88 <HAL_GetTick>
 800784e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007850:	e011      	b.n	8007876 <HAL_RCC_OscConfig+0x2ce>
 8007852:	bf00      	nop
 8007854:	40023800 	.word	0x40023800
 8007858:	42470000 	.word	0x42470000
 800785c:	42470e80 	.word	0x42470e80
 8007860:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007864:	f7fc fa90 	bl	8003d88 <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	2b02      	cmp	r3, #2
 8007870:	d901      	bls.n	8007876 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e106      	b.n	8007a84 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007876:	4b85      	ldr	r3, [pc, #532]	; (8007a8c <HAL_RCC_OscConfig+0x4e4>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787e:	2b00      	cmp	r3, #0
 8007880:	d0f0      	beq.n	8007864 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d106      	bne.n	8007898 <HAL_RCC_OscConfig+0x2f0>
 800788a:	4b81      	ldr	r3, [pc, #516]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 800788c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788e:	4a80      	ldr	r2, [pc, #512]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 8007890:	f043 0301 	orr.w	r3, r3, #1
 8007894:	6713      	str	r3, [r2, #112]	; 0x70
 8007896:	e01c      	b.n	80078d2 <HAL_RCC_OscConfig+0x32a>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	2b05      	cmp	r3, #5
 800789e:	d10c      	bne.n	80078ba <HAL_RCC_OscConfig+0x312>
 80078a0:	4b7b      	ldr	r3, [pc, #492]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 80078a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a4:	4a7a      	ldr	r2, [pc, #488]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 80078a6:	f043 0304 	orr.w	r3, r3, #4
 80078aa:	6713      	str	r3, [r2, #112]	; 0x70
 80078ac:	4b78      	ldr	r3, [pc, #480]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 80078ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b0:	4a77      	ldr	r2, [pc, #476]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 80078b2:	f043 0301 	orr.w	r3, r3, #1
 80078b6:	6713      	str	r3, [r2, #112]	; 0x70
 80078b8:	e00b      	b.n	80078d2 <HAL_RCC_OscConfig+0x32a>
 80078ba:	4b75      	ldr	r3, [pc, #468]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 80078bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078be:	4a74      	ldr	r2, [pc, #464]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 80078c0:	f023 0301 	bic.w	r3, r3, #1
 80078c4:	6713      	str	r3, [r2, #112]	; 0x70
 80078c6:	4b72      	ldr	r3, [pc, #456]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 80078c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ca:	4a71      	ldr	r2, [pc, #452]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 80078cc:	f023 0304 	bic.w	r3, r3, #4
 80078d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d015      	beq.n	8007906 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078da:	f7fc fa55 	bl	8003d88 <HAL_GetTick>
 80078de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078e0:	e00a      	b.n	80078f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078e2:	f7fc fa51 	bl	8003d88 <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d901      	bls.n	80078f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e0c5      	b.n	8007a84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078f8:	4b65      	ldr	r3, [pc, #404]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 80078fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	2b00      	cmp	r3, #0
 8007902:	d0ee      	beq.n	80078e2 <HAL_RCC_OscConfig+0x33a>
 8007904:	e014      	b.n	8007930 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007906:	f7fc fa3f 	bl	8003d88 <HAL_GetTick>
 800790a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800790c:	e00a      	b.n	8007924 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800790e:	f7fc fa3b 	bl	8003d88 <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	f241 3288 	movw	r2, #5000	; 0x1388
 800791c:	4293      	cmp	r3, r2
 800791e:	d901      	bls.n	8007924 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e0af      	b.n	8007a84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007924:	4b5a      	ldr	r3, [pc, #360]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 8007926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007928:	f003 0302 	and.w	r3, r3, #2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1ee      	bne.n	800790e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007930:	7dfb      	ldrb	r3, [r7, #23]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d105      	bne.n	8007942 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007936:	4b56      	ldr	r3, [pc, #344]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 8007938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793a:	4a55      	ldr	r2, [pc, #340]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 800793c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007940:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	2b00      	cmp	r3, #0
 8007948:	f000 809b 	beq.w	8007a82 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800794c:	4b50      	ldr	r3, [pc, #320]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f003 030c 	and.w	r3, r3, #12
 8007954:	2b08      	cmp	r3, #8
 8007956:	d05c      	beq.n	8007a12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	2b02      	cmp	r3, #2
 800795e:	d141      	bne.n	80079e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007960:	4b4c      	ldr	r3, [pc, #304]	; (8007a94 <HAL_RCC_OscConfig+0x4ec>)
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007966:	f7fc fa0f 	bl	8003d88 <HAL_GetTick>
 800796a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800796c:	e008      	b.n	8007980 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800796e:	f7fc fa0b 	bl	8003d88 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	2b02      	cmp	r3, #2
 800797a:	d901      	bls.n	8007980 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e081      	b.n	8007a84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007980:	4b43      	ldr	r3, [pc, #268]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1f0      	bne.n	800796e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	69da      	ldr	r2, [r3, #28]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a1b      	ldr	r3, [r3, #32]
 8007994:	431a      	orrs	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	019b      	lsls	r3, r3, #6
 800799c:	431a      	orrs	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a2:	085b      	lsrs	r3, r3, #1
 80079a4:	3b01      	subs	r3, #1
 80079a6:	041b      	lsls	r3, r3, #16
 80079a8:	431a      	orrs	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ae:	061b      	lsls	r3, r3, #24
 80079b0:	4937      	ldr	r1, [pc, #220]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079b6:	4b37      	ldr	r3, [pc, #220]	; (8007a94 <HAL_RCC_OscConfig+0x4ec>)
 80079b8:	2201      	movs	r2, #1
 80079ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079bc:	f7fc f9e4 	bl	8003d88 <HAL_GetTick>
 80079c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079c2:	e008      	b.n	80079d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079c4:	f7fc f9e0 	bl	8003d88 <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d901      	bls.n	80079d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e056      	b.n	8007a84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079d6:	4b2e      	ldr	r3, [pc, #184]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d0f0      	beq.n	80079c4 <HAL_RCC_OscConfig+0x41c>
 80079e2:	e04e      	b.n	8007a82 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079e4:	4b2b      	ldr	r3, [pc, #172]	; (8007a94 <HAL_RCC_OscConfig+0x4ec>)
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079ea:	f7fc f9cd 	bl	8003d88 <HAL_GetTick>
 80079ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079f0:	e008      	b.n	8007a04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079f2:	f7fc f9c9 	bl	8003d88 <HAL_GetTick>
 80079f6:	4602      	mov	r2, r0
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d901      	bls.n	8007a04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e03f      	b.n	8007a84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a04:	4b22      	ldr	r3, [pc, #136]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1f0      	bne.n	80079f2 <HAL_RCC_OscConfig+0x44a>
 8007a10:	e037      	b.n	8007a82 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d101      	bne.n	8007a1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e032      	b.n	8007a84 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a1e:	4b1c      	ldr	r3, [pc, #112]	; (8007a90 <HAL_RCC_OscConfig+0x4e8>)
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d028      	beq.n	8007a7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d121      	bne.n	8007a7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d11a      	bne.n	8007a7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a4e:	4013      	ands	r3, r2
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a54:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d111      	bne.n	8007a7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a64:	085b      	lsrs	r3, r3, #1
 8007a66:	3b01      	subs	r3, #1
 8007a68:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d107      	bne.n	8007a7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a78:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d001      	beq.n	8007a82 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e000      	b.n	8007a84 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	40007000 	.word	0x40007000
 8007a90:	40023800 	.word	0x40023800
 8007a94:	42470060 	.word	0x42470060

08007a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e0cc      	b.n	8007c46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007aac:	4b68      	ldr	r3, [pc, #416]	; (8007c50 <HAL_RCC_ClockConfig+0x1b8>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0307 	and.w	r3, r3, #7
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d90c      	bls.n	8007ad4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aba:	4b65      	ldr	r3, [pc, #404]	; (8007c50 <HAL_RCC_ClockConfig+0x1b8>)
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	b2d2      	uxtb	r2, r2
 8007ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ac2:	4b63      	ldr	r3, [pc, #396]	; (8007c50 <HAL_RCC_ClockConfig+0x1b8>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0307 	and.w	r3, r3, #7
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d001      	beq.n	8007ad4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e0b8      	b.n	8007c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d020      	beq.n	8007b22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0304 	and.w	r3, r3, #4
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d005      	beq.n	8007af8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007aec:	4b59      	ldr	r3, [pc, #356]	; (8007c54 <HAL_RCC_ClockConfig+0x1bc>)
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	4a58      	ldr	r2, [pc, #352]	; (8007c54 <HAL_RCC_ClockConfig+0x1bc>)
 8007af2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007af6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0308 	and.w	r3, r3, #8
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d005      	beq.n	8007b10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b04:	4b53      	ldr	r3, [pc, #332]	; (8007c54 <HAL_RCC_ClockConfig+0x1bc>)
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	4a52      	ldr	r2, [pc, #328]	; (8007c54 <HAL_RCC_ClockConfig+0x1bc>)
 8007b0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b10:	4b50      	ldr	r3, [pc, #320]	; (8007c54 <HAL_RCC_ClockConfig+0x1bc>)
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	494d      	ldr	r1, [pc, #308]	; (8007c54 <HAL_RCC_ClockConfig+0x1bc>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d044      	beq.n	8007bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d107      	bne.n	8007b46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b36:	4b47      	ldr	r3, [pc, #284]	; (8007c54 <HAL_RCC_ClockConfig+0x1bc>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d119      	bne.n	8007b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e07f      	b.n	8007c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d003      	beq.n	8007b56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b52:	2b03      	cmp	r3, #3
 8007b54:	d107      	bne.n	8007b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b56:	4b3f      	ldr	r3, [pc, #252]	; (8007c54 <HAL_RCC_ClockConfig+0x1bc>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d109      	bne.n	8007b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e06f      	b.n	8007c46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b66:	4b3b      	ldr	r3, [pc, #236]	; (8007c54 <HAL_RCC_ClockConfig+0x1bc>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0302 	and.w	r3, r3, #2
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e067      	b.n	8007c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b76:	4b37      	ldr	r3, [pc, #220]	; (8007c54 <HAL_RCC_ClockConfig+0x1bc>)
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f023 0203 	bic.w	r2, r3, #3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	4934      	ldr	r1, [pc, #208]	; (8007c54 <HAL_RCC_ClockConfig+0x1bc>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b88:	f7fc f8fe 	bl	8003d88 <HAL_GetTick>
 8007b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b8e:	e00a      	b.n	8007ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b90:	f7fc f8fa 	bl	8003d88 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d901      	bls.n	8007ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e04f      	b.n	8007c46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ba6:	4b2b      	ldr	r3, [pc, #172]	; (8007c54 <HAL_RCC_ClockConfig+0x1bc>)
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f003 020c 	and.w	r2, r3, #12
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d1eb      	bne.n	8007b90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007bb8:	4b25      	ldr	r3, [pc, #148]	; (8007c50 <HAL_RCC_ClockConfig+0x1b8>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0307 	and.w	r3, r3, #7
 8007bc0:	683a      	ldr	r2, [r7, #0]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d20c      	bcs.n	8007be0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bc6:	4b22      	ldr	r3, [pc, #136]	; (8007c50 <HAL_RCC_ClockConfig+0x1b8>)
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	b2d2      	uxtb	r2, r2
 8007bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bce:	4b20      	ldr	r3, [pc, #128]	; (8007c50 <HAL_RCC_ClockConfig+0x1b8>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d001      	beq.n	8007be0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e032      	b.n	8007c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0304 	and.w	r3, r3, #4
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d008      	beq.n	8007bfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bec:	4b19      	ldr	r3, [pc, #100]	; (8007c54 <HAL_RCC_ClockConfig+0x1bc>)
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	4916      	ldr	r1, [pc, #88]	; (8007c54 <HAL_RCC_ClockConfig+0x1bc>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0308 	and.w	r3, r3, #8
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d009      	beq.n	8007c1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c0a:	4b12      	ldr	r3, [pc, #72]	; (8007c54 <HAL_RCC_ClockConfig+0x1bc>)
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	490e      	ldr	r1, [pc, #56]	; (8007c54 <HAL_RCC_ClockConfig+0x1bc>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c1e:	f000 f821 	bl	8007c64 <HAL_RCC_GetSysClockFreq>
 8007c22:	4602      	mov	r2, r0
 8007c24:	4b0b      	ldr	r3, [pc, #44]	; (8007c54 <HAL_RCC_ClockConfig+0x1bc>)
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	091b      	lsrs	r3, r3, #4
 8007c2a:	f003 030f 	and.w	r3, r3, #15
 8007c2e:	490a      	ldr	r1, [pc, #40]	; (8007c58 <HAL_RCC_ClockConfig+0x1c0>)
 8007c30:	5ccb      	ldrb	r3, [r1, r3]
 8007c32:	fa22 f303 	lsr.w	r3, r2, r3
 8007c36:	4a09      	ldr	r2, [pc, #36]	; (8007c5c <HAL_RCC_ClockConfig+0x1c4>)
 8007c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c3a:	4b09      	ldr	r3, [pc, #36]	; (8007c60 <HAL_RCC_ClockConfig+0x1c8>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fb fea2 	bl	8003988 <HAL_InitTick>

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	40023c00 	.word	0x40023c00
 8007c54:	40023800 	.word	0x40023800
 8007c58:	0801f6c0 	.word	0x0801f6c0
 8007c5c:	20000004 	.word	0x20000004
 8007c60:	20000008 	.word	0x20000008

08007c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	607b      	str	r3, [r7, #4]
 8007c70:	2300      	movs	r3, #0
 8007c72:	60fb      	str	r3, [r7, #12]
 8007c74:	2300      	movs	r3, #0
 8007c76:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c7c:	4b67      	ldr	r3, [pc, #412]	; (8007e1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f003 030c 	and.w	r3, r3, #12
 8007c84:	2b08      	cmp	r3, #8
 8007c86:	d00d      	beq.n	8007ca4 <HAL_RCC_GetSysClockFreq+0x40>
 8007c88:	2b08      	cmp	r3, #8
 8007c8a:	f200 80bd 	bhi.w	8007e08 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <HAL_RCC_GetSysClockFreq+0x34>
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d003      	beq.n	8007c9e <HAL_RCC_GetSysClockFreq+0x3a>
 8007c96:	e0b7      	b.n	8007e08 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c98:	4b61      	ldr	r3, [pc, #388]	; (8007e20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007c9a:	60bb      	str	r3, [r7, #8]
       break;
 8007c9c:	e0b7      	b.n	8007e0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c9e:	4b61      	ldr	r3, [pc, #388]	; (8007e24 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007ca0:	60bb      	str	r3, [r7, #8]
      break;
 8007ca2:	e0b4      	b.n	8007e0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ca4:	4b5d      	ldr	r3, [pc, #372]	; (8007e1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007cae:	4b5b      	ldr	r3, [pc, #364]	; (8007e1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d04d      	beq.n	8007d56 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cba:	4b58      	ldr	r3, [pc, #352]	; (8007e1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	099b      	lsrs	r3, r3, #6
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	f04f 0300 	mov.w	r3, #0
 8007cc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007cca:	f04f 0100 	mov.w	r1, #0
 8007cce:	ea02 0800 	and.w	r8, r2, r0
 8007cd2:	ea03 0901 	and.w	r9, r3, r1
 8007cd6:	4640      	mov	r0, r8
 8007cd8:	4649      	mov	r1, r9
 8007cda:	f04f 0200 	mov.w	r2, #0
 8007cde:	f04f 0300 	mov.w	r3, #0
 8007ce2:	014b      	lsls	r3, r1, #5
 8007ce4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007ce8:	0142      	lsls	r2, r0, #5
 8007cea:	4610      	mov	r0, r2
 8007cec:	4619      	mov	r1, r3
 8007cee:	ebb0 0008 	subs.w	r0, r0, r8
 8007cf2:	eb61 0109 	sbc.w	r1, r1, r9
 8007cf6:	f04f 0200 	mov.w	r2, #0
 8007cfa:	f04f 0300 	mov.w	r3, #0
 8007cfe:	018b      	lsls	r3, r1, #6
 8007d00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007d04:	0182      	lsls	r2, r0, #6
 8007d06:	1a12      	subs	r2, r2, r0
 8007d08:	eb63 0301 	sbc.w	r3, r3, r1
 8007d0c:	f04f 0000 	mov.w	r0, #0
 8007d10:	f04f 0100 	mov.w	r1, #0
 8007d14:	00d9      	lsls	r1, r3, #3
 8007d16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d1a:	00d0      	lsls	r0, r2, #3
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	eb12 0208 	adds.w	r2, r2, r8
 8007d24:	eb43 0309 	adc.w	r3, r3, r9
 8007d28:	f04f 0000 	mov.w	r0, #0
 8007d2c:	f04f 0100 	mov.w	r1, #0
 8007d30:	0259      	lsls	r1, r3, #9
 8007d32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007d36:	0250      	lsls	r0, r2, #9
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	4619      	mov	r1, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	461a      	mov	r2, r3
 8007d44:	f04f 0300 	mov.w	r3, #0
 8007d48:	f7f8 fffe 	bl	8000d48 <__aeabi_uldivmod>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4613      	mov	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	e04a      	b.n	8007dec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d56:	4b31      	ldr	r3, [pc, #196]	; (8007e1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	099b      	lsrs	r3, r3, #6
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	f04f 0300 	mov.w	r3, #0
 8007d62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007d66:	f04f 0100 	mov.w	r1, #0
 8007d6a:	ea02 0400 	and.w	r4, r2, r0
 8007d6e:	ea03 0501 	and.w	r5, r3, r1
 8007d72:	4620      	mov	r0, r4
 8007d74:	4629      	mov	r1, r5
 8007d76:	f04f 0200 	mov.w	r2, #0
 8007d7a:	f04f 0300 	mov.w	r3, #0
 8007d7e:	014b      	lsls	r3, r1, #5
 8007d80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007d84:	0142      	lsls	r2, r0, #5
 8007d86:	4610      	mov	r0, r2
 8007d88:	4619      	mov	r1, r3
 8007d8a:	1b00      	subs	r0, r0, r4
 8007d8c:	eb61 0105 	sbc.w	r1, r1, r5
 8007d90:	f04f 0200 	mov.w	r2, #0
 8007d94:	f04f 0300 	mov.w	r3, #0
 8007d98:	018b      	lsls	r3, r1, #6
 8007d9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007d9e:	0182      	lsls	r2, r0, #6
 8007da0:	1a12      	subs	r2, r2, r0
 8007da2:	eb63 0301 	sbc.w	r3, r3, r1
 8007da6:	f04f 0000 	mov.w	r0, #0
 8007daa:	f04f 0100 	mov.w	r1, #0
 8007dae:	00d9      	lsls	r1, r3, #3
 8007db0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007db4:	00d0      	lsls	r0, r2, #3
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	1912      	adds	r2, r2, r4
 8007dbc:	eb45 0303 	adc.w	r3, r5, r3
 8007dc0:	f04f 0000 	mov.w	r0, #0
 8007dc4:	f04f 0100 	mov.w	r1, #0
 8007dc8:	0299      	lsls	r1, r3, #10
 8007dca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007dce:	0290      	lsls	r0, r2, #10
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	f04f 0300 	mov.w	r3, #0
 8007de0:	f7f8 ffb2 	bl	8000d48 <__aeabi_uldivmod>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4613      	mov	r3, r2
 8007dea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007dec:	4b0b      	ldr	r3, [pc, #44]	; (8007e1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	0c1b      	lsrs	r3, r3, #16
 8007df2:	f003 0303 	and.w	r3, r3, #3
 8007df6:	3301      	adds	r3, #1
 8007df8:	005b      	lsls	r3, r3, #1
 8007dfa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e04:	60bb      	str	r3, [r7, #8]
      break;
 8007e06:	e002      	b.n	8007e0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e08:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007e0a:	60bb      	str	r3, [r7, #8]
      break;
 8007e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e0e:	68bb      	ldr	r3, [r7, #8]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007e1a:	bf00      	nop
 8007e1c:	40023800 	.word	0x40023800
 8007e20:	00f42400 	.word	0x00f42400
 8007e24:	007a1200 	.word	0x007a1200

08007e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e2c:	4b03      	ldr	r3, [pc, #12]	; (8007e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	20000004 	.word	0x20000004

08007e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e44:	f7ff fff0 	bl	8007e28 <HAL_RCC_GetHCLKFreq>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	0a9b      	lsrs	r3, r3, #10
 8007e50:	f003 0307 	and.w	r3, r3, #7
 8007e54:	4903      	ldr	r1, [pc, #12]	; (8007e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e56:	5ccb      	ldrb	r3, [r1, r3]
 8007e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	40023800 	.word	0x40023800
 8007e64:	0801f6d0 	.word	0x0801f6d0

08007e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007e6c:	f7ff ffdc 	bl	8007e28 <HAL_RCC_GetHCLKFreq>
 8007e70:	4602      	mov	r2, r0
 8007e72:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	0b5b      	lsrs	r3, r3, #13
 8007e78:	f003 0307 	and.w	r3, r3, #7
 8007e7c:	4903      	ldr	r1, [pc, #12]	; (8007e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e7e:	5ccb      	ldrb	r3, [r1, r3]
 8007e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	40023800 	.word	0x40023800
 8007e8c:	0801f6d0 	.word	0x0801f6d0

08007e90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	220f      	movs	r2, #15
 8007e9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ea0:	4b12      	ldr	r3, [pc, #72]	; (8007eec <HAL_RCC_GetClockConfig+0x5c>)
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f003 0203 	and.w	r2, r3, #3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007eac:	4b0f      	ldr	r3, [pc, #60]	; (8007eec <HAL_RCC_GetClockConfig+0x5c>)
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007eb8:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <HAL_RCC_GetClockConfig+0x5c>)
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007ec4:	4b09      	ldr	r3, [pc, #36]	; (8007eec <HAL_RCC_GetClockConfig+0x5c>)
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	08db      	lsrs	r3, r3, #3
 8007eca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ed2:	4b07      	ldr	r3, [pc, #28]	; (8007ef0 <HAL_RCC_GetClockConfig+0x60>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0207 	and.w	r2, r3, #7
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	601a      	str	r2, [r3, #0]
}
 8007ede:	bf00      	nop
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	40023800 	.word	0x40023800
 8007ef0:	40023c00 	.word	0x40023c00

08007ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007efc:	2300      	movs	r3, #0
 8007efe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007f00:	2300      	movs	r3, #0
 8007f02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0301 	and.w	r3, r3, #1
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d105      	bne.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d035      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007f1c:	4b62      	ldr	r3, [pc, #392]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007f22:	f7fb ff31 	bl	8003d88 <HAL_GetTick>
 8007f26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f28:	e008      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007f2a:	f7fb ff2d 	bl	8003d88 <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d901      	bls.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e0b0      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f3c:	4b5b      	ldr	r3, [pc, #364]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1f0      	bne.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	019a      	lsls	r2, r3, #6
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	071b      	lsls	r3, r3, #28
 8007f54:	4955      	ldr	r1, [pc, #340]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007f5c:	4b52      	ldr	r3, [pc, #328]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007f5e:	2201      	movs	r2, #1
 8007f60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007f62:	f7fb ff11 	bl	8003d88 <HAL_GetTick>
 8007f66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f68:	e008      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007f6a:	f7fb ff0d 	bl	8003d88 <HAL_GetTick>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d901      	bls.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e090      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f7c:	4b4b      	ldr	r3, [pc, #300]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d0f0      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 8083 	beq.w	800809c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f96:	2300      	movs	r3, #0
 8007f98:	60fb      	str	r3, [r7, #12]
 8007f9a:	4b44      	ldr	r3, [pc, #272]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	4a43      	ldr	r2, [pc, #268]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8007fa6:	4b41      	ldr	r3, [pc, #260]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fae:	60fb      	str	r3, [r7, #12]
 8007fb0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007fb2:	4b3f      	ldr	r3, [pc, #252]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a3e      	ldr	r2, [pc, #248]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fbc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007fbe:	f7fb fee3 	bl	8003d88 <HAL_GetTick>
 8007fc2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007fc4:	e008      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007fc6:	f7fb fedf 	bl	8003d88 <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d901      	bls.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e062      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007fd8:	4b35      	ldr	r3, [pc, #212]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d0f0      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007fe4:	4b31      	ldr	r3, [pc, #196]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d02f      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d028      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008002:	4b2a      	ldr	r3, [pc, #168]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800800a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800800c:	4b29      	ldr	r3, [pc, #164]	; (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800800e:	2201      	movs	r2, #1
 8008010:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008012:	4b28      	ldr	r3, [pc, #160]	; (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008014:	2200      	movs	r2, #0
 8008016:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008018:	4a24      	ldr	r2, [pc, #144]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800801e:	4b23      	ldr	r3, [pc, #140]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b01      	cmp	r3, #1
 8008028:	d114      	bne.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800802a:	f7fb fead 	bl	8003d88 <HAL_GetTick>
 800802e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008030:	e00a      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008032:	f7fb fea9 	bl	8003d88 <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008040:	4293      	cmp	r3, r2
 8008042:	d901      	bls.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	e02a      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008048:	4b18      	ldr	r3, [pc, #96]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800804a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804c:	f003 0302 	and.w	r3, r3, #2
 8008050:	2b00      	cmp	r3, #0
 8008052:	d0ee      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800805c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008060:	d10d      	bne.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008062:	4b12      	ldr	r3, [pc, #72]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008076:	490d      	ldr	r1, [pc, #52]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008078:	4313      	orrs	r3, r2
 800807a:	608b      	str	r3, [r1, #8]
 800807c:	e005      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800807e:	4b0b      	ldr	r3, [pc, #44]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	4a0a      	ldr	r2, [pc, #40]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008084:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008088:	6093      	str	r3, [r2, #8]
 800808a:	4b08      	ldr	r3, [pc, #32]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800808c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008096:	4905      	ldr	r1, [pc, #20]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008098:	4313      	orrs	r3, r2
 800809a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	42470068 	.word	0x42470068
 80080ac:	40023800 	.word	0x40023800
 80080b0:	40007000 	.word	0x40007000
 80080b4:	42470e40 	.word	0x42470e40

080080b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b087      	sub	sp, #28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80080cc:	2300      	movs	r3, #0
 80080ce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d13e      	bne.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80080d6:	4b23      	ldr	r3, [pc, #140]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d005      	beq.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d12f      	bne.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80080ec:	4b1e      	ldr	r3, [pc, #120]	; (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80080ee:	617b      	str	r3, [r7, #20]
          break;
 80080f0:	e02f      	b.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80080f2:	4b1c      	ldr	r3, [pc, #112]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080fe:	d108      	bne.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008100:	4b18      	ldr	r3, [pc, #96]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008108:	4a18      	ldr	r2, [pc, #96]	; (800816c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800810a:	fbb2 f3f3 	udiv	r3, r2, r3
 800810e:	613b      	str	r3, [r7, #16]
 8008110:	e007      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008112:	4b14      	ldr	r3, [pc, #80]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800811a:	4a15      	ldr	r2, [pc, #84]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800811c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008120:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008122:	4b10      	ldr	r3, [pc, #64]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008128:	099b      	lsrs	r3, r3, #6
 800812a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	fb02 f303 	mul.w	r3, r2, r3
 8008134:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008136:	4b0b      	ldr	r3, [pc, #44]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800813c:	0f1b      	lsrs	r3, r3, #28
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	fbb2 f3f3 	udiv	r3, r2, r3
 8008148:	617b      	str	r3, [r7, #20]
          break;
 800814a:	e002      	b.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800814c:	2300      	movs	r3, #0
 800814e:	617b      	str	r3, [r7, #20]
          break;
 8008150:	bf00      	nop
        }
      }
      break;
 8008152:	bf00      	nop
    }
  }
  return frequency;
 8008154:	697b      	ldr	r3, [r7, #20]
}
 8008156:	4618      	mov	r0, r3
 8008158:	371c      	adds	r7, #28
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	40023800 	.word	0x40023800
 8008168:	00bb8000 	.word	0x00bb8000
 800816c:	007a1200 	.word	0x007a1200
 8008170:	00f42400 	.word	0x00f42400

08008174 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e07b      	b.n	800827e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818a:	2b00      	cmp	r3, #0
 800818c:	d108      	bne.n	80081a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008196:	d009      	beq.n	80081ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	61da      	str	r2, [r3, #28]
 800819e:	e005      	b.n	80081ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d106      	bne.n	80081cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7fb f9ba 	bl	8003540 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2202      	movs	r2, #2
 80081d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80081f4:	431a      	orrs	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081fe:	431a      	orrs	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	f003 0302 	and.w	r3, r3, #2
 8008208:	431a      	orrs	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	f003 0301 	and.w	r3, r3, #1
 8008212:	431a      	orrs	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800821c:	431a      	orrs	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008226:	431a      	orrs	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a1b      	ldr	r3, [r3, #32]
 800822c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008230:	ea42 0103 	orr.w	r1, r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008238:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	430a      	orrs	r2, r1
 8008242:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	0c1b      	lsrs	r3, r3, #16
 800824a:	f003 0104 	and.w	r1, r3, #4
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008252:	f003 0210 	and.w	r2, r3, #16
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	430a      	orrs	r2, r1
 800825c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	69da      	ldr	r2, [r3, #28]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800826c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b082      	sub	sp, #8
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e041      	b.n	800831c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d106      	bne.n	80082b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f7fb f98f 	bl	80035d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2202      	movs	r2, #2
 80082b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	3304      	adds	r3, #4
 80082c2:	4619      	mov	r1, r3
 80082c4:	4610      	mov	r0, r2
 80082c6:	f000 fcbd 	bl	8008c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b01      	cmp	r3, #1
 8008336:	d001      	beq.n	800833c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e04e      	b.n	80083da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68da      	ldr	r2, [r3, #12]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f042 0201 	orr.w	r2, r2, #1
 8008352:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a23      	ldr	r2, [pc, #140]	; (80083e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d022      	beq.n	80083a4 <HAL_TIM_Base_Start_IT+0x80>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008366:	d01d      	beq.n	80083a4 <HAL_TIM_Base_Start_IT+0x80>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a1f      	ldr	r2, [pc, #124]	; (80083ec <HAL_TIM_Base_Start_IT+0xc8>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d018      	beq.n	80083a4 <HAL_TIM_Base_Start_IT+0x80>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a1e      	ldr	r2, [pc, #120]	; (80083f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d013      	beq.n	80083a4 <HAL_TIM_Base_Start_IT+0x80>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a1c      	ldr	r2, [pc, #112]	; (80083f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d00e      	beq.n	80083a4 <HAL_TIM_Base_Start_IT+0x80>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a1b      	ldr	r2, [pc, #108]	; (80083f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d009      	beq.n	80083a4 <HAL_TIM_Base_Start_IT+0x80>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a19      	ldr	r2, [pc, #100]	; (80083fc <HAL_TIM_Base_Start_IT+0xd8>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d004      	beq.n	80083a4 <HAL_TIM_Base_Start_IT+0x80>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a18      	ldr	r2, [pc, #96]	; (8008400 <HAL_TIM_Base_Start_IT+0xdc>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d111      	bne.n	80083c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f003 0307 	and.w	r3, r3, #7
 80083ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b06      	cmp	r3, #6
 80083b4:	d010      	beq.n	80083d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f042 0201 	orr.w	r2, r2, #1
 80083c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083c6:	e007      	b.n	80083d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f042 0201 	orr.w	r2, r2, #1
 80083d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	40010000 	.word	0x40010000
 80083ec:	40000400 	.word	0x40000400
 80083f0:	40000800 	.word	0x40000800
 80083f4:	40000c00 	.word	0x40000c00
 80083f8:	40010400 	.word	0x40010400
 80083fc:	40014000 	.word	0x40014000
 8008400:	40001800 	.word	0x40001800

08008404 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d101      	bne.n	8008416 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	e041      	b.n	800849a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	d106      	bne.n	8008430 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f839 	bl	80084a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2202      	movs	r2, #2
 8008434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	3304      	adds	r3, #4
 8008440:	4619      	mov	r1, r3
 8008442:	4610      	mov	r0, r2
 8008444:	f000 fbfe 	bl	8008c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80084aa:	bf00      	nop
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
	...

080084b8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d109      	bne.n	80084e0 <HAL_TIM_PWM_Start_IT+0x28>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	bf14      	ite	ne
 80084d8:	2301      	movne	r3, #1
 80084da:	2300      	moveq	r3, #0
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	e022      	b.n	8008526 <HAL_TIM_PWM_Start_IT+0x6e>
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	d109      	bne.n	80084fa <HAL_TIM_PWM_Start_IT+0x42>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	bf14      	ite	ne
 80084f2:	2301      	movne	r3, #1
 80084f4:	2300      	moveq	r3, #0
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	e015      	b.n	8008526 <HAL_TIM_PWM_Start_IT+0x6e>
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	2b08      	cmp	r3, #8
 80084fe:	d109      	bne.n	8008514 <HAL_TIM_PWM_Start_IT+0x5c>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008506:	b2db      	uxtb	r3, r3
 8008508:	2b01      	cmp	r3, #1
 800850a:	bf14      	ite	ne
 800850c:	2301      	movne	r3, #1
 800850e:	2300      	moveq	r3, #0
 8008510:	b2db      	uxtb	r3, r3
 8008512:	e008      	b.n	8008526 <HAL_TIM_PWM_Start_IT+0x6e>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b01      	cmp	r3, #1
 800851e:	bf14      	ite	ne
 8008520:	2301      	movne	r3, #1
 8008522:	2300      	moveq	r3, #0
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e0c7      	b.n	80086be <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d104      	bne.n	800853e <HAL_TIM_PWM_Start_IT+0x86>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2202      	movs	r2, #2
 8008538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800853c:	e013      	b.n	8008566 <HAL_TIM_PWM_Start_IT+0xae>
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	2b04      	cmp	r3, #4
 8008542:	d104      	bne.n	800854e <HAL_TIM_PWM_Start_IT+0x96>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2202      	movs	r2, #2
 8008548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800854c:	e00b      	b.n	8008566 <HAL_TIM_PWM_Start_IT+0xae>
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b08      	cmp	r3, #8
 8008552:	d104      	bne.n	800855e <HAL_TIM_PWM_Start_IT+0xa6>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2202      	movs	r2, #2
 8008558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800855c:	e003      	b.n	8008566 <HAL_TIM_PWM_Start_IT+0xae>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2202      	movs	r2, #2
 8008562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	2b0c      	cmp	r3, #12
 800856a:	d841      	bhi.n	80085f0 <HAL_TIM_PWM_Start_IT+0x138>
 800856c:	a201      	add	r2, pc, #4	; (adr r2, 8008574 <HAL_TIM_PWM_Start_IT+0xbc>)
 800856e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008572:	bf00      	nop
 8008574:	080085a9 	.word	0x080085a9
 8008578:	080085f1 	.word	0x080085f1
 800857c:	080085f1 	.word	0x080085f1
 8008580:	080085f1 	.word	0x080085f1
 8008584:	080085bb 	.word	0x080085bb
 8008588:	080085f1 	.word	0x080085f1
 800858c:	080085f1 	.word	0x080085f1
 8008590:	080085f1 	.word	0x080085f1
 8008594:	080085cd 	.word	0x080085cd
 8008598:	080085f1 	.word	0x080085f1
 800859c:	080085f1 	.word	0x080085f1
 80085a0:	080085f1 	.word	0x080085f1
 80085a4:	080085df 	.word	0x080085df
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68da      	ldr	r2, [r3, #12]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f042 0202 	orr.w	r2, r2, #2
 80085b6:	60da      	str	r2, [r3, #12]
      break;
 80085b8:	e01d      	b.n	80085f6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68da      	ldr	r2, [r3, #12]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f042 0204 	orr.w	r2, r2, #4
 80085c8:	60da      	str	r2, [r3, #12]
      break;
 80085ca:	e014      	b.n	80085f6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f042 0208 	orr.w	r2, r2, #8
 80085da:	60da      	str	r2, [r3, #12]
      break;
 80085dc:	e00b      	b.n	80085f6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68da      	ldr	r2, [r3, #12]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f042 0210 	orr.w	r2, r2, #16
 80085ec:	60da      	str	r2, [r3, #12]
      break;
 80085ee:	e002      	b.n	80085f6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	73fb      	strb	r3, [r7, #15]
      break;
 80085f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d15f      	bne.n	80086bc <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2201      	movs	r2, #1
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	4618      	mov	r0, r3
 8008606:	f000 fe07 	bl	8009218 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a2e      	ldr	r2, [pc, #184]	; (80086c8 <HAL_TIM_PWM_Start_IT+0x210>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d004      	beq.n	800861e <HAL_TIM_PWM_Start_IT+0x166>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a2c      	ldr	r2, [pc, #176]	; (80086cc <HAL_TIM_PWM_Start_IT+0x214>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d101      	bne.n	8008622 <HAL_TIM_PWM_Start_IT+0x16a>
 800861e:	2301      	movs	r3, #1
 8008620:	e000      	b.n	8008624 <HAL_TIM_PWM_Start_IT+0x16c>
 8008622:	2300      	movs	r3, #0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d007      	beq.n	8008638 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008636:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a22      	ldr	r2, [pc, #136]	; (80086c8 <HAL_TIM_PWM_Start_IT+0x210>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d022      	beq.n	8008688 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800864a:	d01d      	beq.n	8008688 <HAL_TIM_PWM_Start_IT+0x1d0>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a1f      	ldr	r2, [pc, #124]	; (80086d0 <HAL_TIM_PWM_Start_IT+0x218>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d018      	beq.n	8008688 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a1e      	ldr	r2, [pc, #120]	; (80086d4 <HAL_TIM_PWM_Start_IT+0x21c>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d013      	beq.n	8008688 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a1c      	ldr	r2, [pc, #112]	; (80086d8 <HAL_TIM_PWM_Start_IT+0x220>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d00e      	beq.n	8008688 <HAL_TIM_PWM_Start_IT+0x1d0>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a17      	ldr	r2, [pc, #92]	; (80086cc <HAL_TIM_PWM_Start_IT+0x214>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d009      	beq.n	8008688 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a18      	ldr	r2, [pc, #96]	; (80086dc <HAL_TIM_PWM_Start_IT+0x224>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d004      	beq.n	8008688 <HAL_TIM_PWM_Start_IT+0x1d0>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a17      	ldr	r2, [pc, #92]	; (80086e0 <HAL_TIM_PWM_Start_IT+0x228>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d111      	bne.n	80086ac <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	2b06      	cmp	r3, #6
 8008698:	d010      	beq.n	80086bc <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f042 0201 	orr.w	r2, r2, #1
 80086a8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086aa:	e007      	b.n	80086bc <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f042 0201 	orr.w	r2, r2, #1
 80086ba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	40010000 	.word	0x40010000
 80086cc:	40010400 	.word	0x40010400
 80086d0:	40000400 	.word	0x40000400
 80086d4:	40000800 	.word	0x40000800
 80086d8:	40000c00 	.word	0x40000c00
 80086dc:	40014000 	.word	0x40014000
 80086e0:	40001800 	.word	0x40001800

080086e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d122      	bne.n	8008740 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f003 0302 	and.w	r3, r3, #2
 8008704:	2b02      	cmp	r3, #2
 8008706:	d11b      	bne.n	8008740 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f06f 0202 	mvn.w	r2, #2
 8008710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	f003 0303 	and.w	r3, r3, #3
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fa77 	bl	8008c1a <HAL_TIM_IC_CaptureCallback>
 800872c:	e005      	b.n	800873a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fa69 	bl	8008c06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7f9 fda3 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	f003 0304 	and.w	r3, r3, #4
 800874a:	2b04      	cmp	r3, #4
 800874c:	d122      	bne.n	8008794 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b04      	cmp	r3, #4
 800875a:	d11b      	bne.n	8008794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f06f 0204 	mvn.w	r2, #4
 8008764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2202      	movs	r2, #2
 800876a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fa4d 	bl	8008c1a <HAL_TIM_IC_CaptureCallback>
 8008780:	e005      	b.n	800878e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fa3f 	bl	8008c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7f9 fd79 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	f003 0308 	and.w	r3, r3, #8
 800879e:	2b08      	cmp	r3, #8
 80087a0:	d122      	bne.n	80087e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	f003 0308 	and.w	r3, r3, #8
 80087ac:	2b08      	cmp	r3, #8
 80087ae:	d11b      	bne.n	80087e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f06f 0208 	mvn.w	r2, #8
 80087b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2204      	movs	r2, #4
 80087be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	f003 0303 	and.w	r3, r3, #3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fa23 	bl	8008c1a <HAL_TIM_IC_CaptureCallback>
 80087d4:	e005      	b.n	80087e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fa15 	bl	8008c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7f9 fd4f 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	f003 0310 	and.w	r3, r3, #16
 80087f2:	2b10      	cmp	r3, #16
 80087f4:	d122      	bne.n	800883c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f003 0310 	and.w	r3, r3, #16
 8008800:	2b10      	cmp	r3, #16
 8008802:	d11b      	bne.n	800883c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f06f 0210 	mvn.w	r2, #16
 800880c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2208      	movs	r2, #8
 8008812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	69db      	ldr	r3, [r3, #28]
 800881a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f9f9 	bl	8008c1a <HAL_TIM_IC_CaptureCallback>
 8008828:	e005      	b.n	8008836 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f9eb 	bl	8008c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7f9 fd25 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	2b01      	cmp	r3, #1
 8008848:	d10e      	bne.n	8008868 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	2b01      	cmp	r3, #1
 8008856:	d107      	bne.n	8008868 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f06f 0201 	mvn.w	r2, #1
 8008860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7fa f8ce 	bl	8002a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008872:	2b80      	cmp	r3, #128	; 0x80
 8008874:	d10e      	bne.n	8008894 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008880:	2b80      	cmp	r3, #128	; 0x80
 8008882:	d107      	bne.n	8008894 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800888c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fd6e 	bl	8009370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889e:	2b40      	cmp	r3, #64	; 0x40
 80088a0:	d10e      	bne.n	80088c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ac:	2b40      	cmp	r3, #64	; 0x40
 80088ae:	d107      	bne.n	80088c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f9b7 	bl	8008c2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	f003 0320 	and.w	r3, r3, #32
 80088ca:	2b20      	cmp	r3, #32
 80088cc:	d10e      	bne.n	80088ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	f003 0320 	and.w	r3, r3, #32
 80088d8:	2b20      	cmp	r3, #32
 80088da:	d107      	bne.n	80088ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f06f 0220 	mvn.w	r2, #32
 80088e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fd38 	bl	800935c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088ec:	bf00      	nop
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008900:	2300      	movs	r3, #0
 8008902:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800890a:	2b01      	cmp	r3, #1
 800890c:	d101      	bne.n	8008912 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800890e:	2302      	movs	r3, #2
 8008910:	e0ae      	b.n	8008a70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2b0c      	cmp	r3, #12
 800891e:	f200 809f 	bhi.w	8008a60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008922:	a201      	add	r2, pc, #4	; (adr r2, 8008928 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008928:	0800895d 	.word	0x0800895d
 800892c:	08008a61 	.word	0x08008a61
 8008930:	08008a61 	.word	0x08008a61
 8008934:	08008a61 	.word	0x08008a61
 8008938:	0800899d 	.word	0x0800899d
 800893c:	08008a61 	.word	0x08008a61
 8008940:	08008a61 	.word	0x08008a61
 8008944:	08008a61 	.word	0x08008a61
 8008948:	080089df 	.word	0x080089df
 800894c:	08008a61 	.word	0x08008a61
 8008950:	08008a61 	.word	0x08008a61
 8008954:	08008a61 	.word	0x08008a61
 8008958:	08008a1f 	.word	0x08008a1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68b9      	ldr	r1, [r7, #8]
 8008962:	4618      	mov	r0, r3
 8008964:	f000 fa0e 	bl	8008d84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699a      	ldr	r2, [r3, #24]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f042 0208 	orr.w	r2, r2, #8
 8008976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	699a      	ldr	r2, [r3, #24]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f022 0204 	bic.w	r2, r2, #4
 8008986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6999      	ldr	r1, [r3, #24]
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	691a      	ldr	r2, [r3, #16]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	430a      	orrs	r2, r1
 8008998:	619a      	str	r2, [r3, #24]
      break;
 800899a:	e064      	b.n	8008a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68b9      	ldr	r1, [r7, #8]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 fa5e 	bl	8008e64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	699a      	ldr	r2, [r3, #24]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	699a      	ldr	r2, [r3, #24]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6999      	ldr	r1, [r3, #24]
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	021a      	lsls	r2, r3, #8
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	430a      	orrs	r2, r1
 80089da:	619a      	str	r2, [r3, #24]
      break;
 80089dc:	e043      	b.n	8008a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68b9      	ldr	r1, [r7, #8]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f000 fab3 	bl	8008f50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	69da      	ldr	r2, [r3, #28]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f042 0208 	orr.w	r2, r2, #8
 80089f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	69da      	ldr	r2, [r3, #28]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f022 0204 	bic.w	r2, r2, #4
 8008a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	69d9      	ldr	r1, [r3, #28]
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	691a      	ldr	r2, [r3, #16]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	61da      	str	r2, [r3, #28]
      break;
 8008a1c:	e023      	b.n	8008a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68b9      	ldr	r1, [r7, #8]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 fb07 	bl	8009038 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	69da      	ldr	r2, [r3, #28]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	69da      	ldr	r2, [r3, #28]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	69d9      	ldr	r1, [r3, #28]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	021a      	lsls	r2, r3, #8
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	61da      	str	r2, [r3, #28]
      break;
 8008a5e:	e002      	b.n	8008a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	75fb      	strb	r3, [r7, #23]
      break;
 8008a64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3718      	adds	r7, #24
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d101      	bne.n	8008a94 <HAL_TIM_ConfigClockSource+0x1c>
 8008a90:	2302      	movs	r3, #2
 8008a92:	e0b4      	b.n	8008bfe <HAL_TIM_ConfigClockSource+0x186>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008aba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008acc:	d03e      	beq.n	8008b4c <HAL_TIM_ConfigClockSource+0xd4>
 8008ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ad2:	f200 8087 	bhi.w	8008be4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ada:	f000 8086 	beq.w	8008bea <HAL_TIM_ConfigClockSource+0x172>
 8008ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ae2:	d87f      	bhi.n	8008be4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ae4:	2b70      	cmp	r3, #112	; 0x70
 8008ae6:	d01a      	beq.n	8008b1e <HAL_TIM_ConfigClockSource+0xa6>
 8008ae8:	2b70      	cmp	r3, #112	; 0x70
 8008aea:	d87b      	bhi.n	8008be4 <HAL_TIM_ConfigClockSource+0x16c>
 8008aec:	2b60      	cmp	r3, #96	; 0x60
 8008aee:	d050      	beq.n	8008b92 <HAL_TIM_ConfigClockSource+0x11a>
 8008af0:	2b60      	cmp	r3, #96	; 0x60
 8008af2:	d877      	bhi.n	8008be4 <HAL_TIM_ConfigClockSource+0x16c>
 8008af4:	2b50      	cmp	r3, #80	; 0x50
 8008af6:	d03c      	beq.n	8008b72 <HAL_TIM_ConfigClockSource+0xfa>
 8008af8:	2b50      	cmp	r3, #80	; 0x50
 8008afa:	d873      	bhi.n	8008be4 <HAL_TIM_ConfigClockSource+0x16c>
 8008afc:	2b40      	cmp	r3, #64	; 0x40
 8008afe:	d058      	beq.n	8008bb2 <HAL_TIM_ConfigClockSource+0x13a>
 8008b00:	2b40      	cmp	r3, #64	; 0x40
 8008b02:	d86f      	bhi.n	8008be4 <HAL_TIM_ConfigClockSource+0x16c>
 8008b04:	2b30      	cmp	r3, #48	; 0x30
 8008b06:	d064      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8008b08:	2b30      	cmp	r3, #48	; 0x30
 8008b0a:	d86b      	bhi.n	8008be4 <HAL_TIM_ConfigClockSource+0x16c>
 8008b0c:	2b20      	cmp	r3, #32
 8008b0e:	d060      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8008b10:	2b20      	cmp	r3, #32
 8008b12:	d867      	bhi.n	8008be4 <HAL_TIM_ConfigClockSource+0x16c>
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d05c      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8008b18:	2b10      	cmp	r3, #16
 8008b1a:	d05a      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8008b1c:	e062      	b.n	8008be4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6818      	ldr	r0, [r3, #0]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	6899      	ldr	r1, [r3, #8]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	f000 fb53 	bl	80091d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68ba      	ldr	r2, [r7, #8]
 8008b48:	609a      	str	r2, [r3, #8]
      break;
 8008b4a:	e04f      	b.n	8008bec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6818      	ldr	r0, [r3, #0]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	6899      	ldr	r1, [r3, #8]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	685a      	ldr	r2, [r3, #4]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f000 fb3c 	bl	80091d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	689a      	ldr	r2, [r3, #8]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b6e:	609a      	str	r2, [r3, #8]
      break;
 8008b70:	e03c      	b.n	8008bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6818      	ldr	r0, [r3, #0]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	6859      	ldr	r1, [r3, #4]
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	f000 fab0 	bl	80090e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2150      	movs	r1, #80	; 0x50
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 fb09 	bl	80091a2 <TIM_ITRx_SetConfig>
      break;
 8008b90:	e02c      	b.n	8008bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6818      	ldr	r0, [r3, #0]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	6859      	ldr	r1, [r3, #4]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	f000 facf 	bl	8009142 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2160      	movs	r1, #96	; 0x60
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 faf9 	bl	80091a2 <TIM_ITRx_SetConfig>
      break;
 8008bb0:	e01c      	b.n	8008bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6818      	ldr	r0, [r3, #0]
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	6859      	ldr	r1, [r3, #4]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	f000 fa90 	bl	80090e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2140      	movs	r1, #64	; 0x40
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 fae9 	bl	80091a2 <TIM_ITRx_SetConfig>
      break;
 8008bd0:	e00c      	b.n	8008bec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	4610      	mov	r0, r2
 8008bde:	f000 fae0 	bl	80091a2 <TIM_ITRx_SetConfig>
      break;
 8008be2:	e003      	b.n	8008bec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	73fb      	strb	r3, [r7, #15]
      break;
 8008be8:	e000      	b.n	8008bec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008bea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b083      	sub	sp, #12
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c0e:	bf00      	nop
 8008c10:	370c      	adds	r7, #12
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b083      	sub	sp, #12
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c22:	bf00      	nop
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b083      	sub	sp, #12
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c36:	bf00      	nop
 8008c38:	370c      	adds	r7, #12
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
	...

08008c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a40      	ldr	r2, [pc, #256]	; (8008d58 <TIM_Base_SetConfig+0x114>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d013      	beq.n	8008c84 <TIM_Base_SetConfig+0x40>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c62:	d00f      	beq.n	8008c84 <TIM_Base_SetConfig+0x40>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a3d      	ldr	r2, [pc, #244]	; (8008d5c <TIM_Base_SetConfig+0x118>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d00b      	beq.n	8008c84 <TIM_Base_SetConfig+0x40>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a3c      	ldr	r2, [pc, #240]	; (8008d60 <TIM_Base_SetConfig+0x11c>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d007      	beq.n	8008c84 <TIM_Base_SetConfig+0x40>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a3b      	ldr	r2, [pc, #236]	; (8008d64 <TIM_Base_SetConfig+0x120>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d003      	beq.n	8008c84 <TIM_Base_SetConfig+0x40>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a3a      	ldr	r2, [pc, #232]	; (8008d68 <TIM_Base_SetConfig+0x124>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d108      	bne.n	8008c96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a2f      	ldr	r2, [pc, #188]	; (8008d58 <TIM_Base_SetConfig+0x114>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d02b      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ca4:	d027      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a2c      	ldr	r2, [pc, #176]	; (8008d5c <TIM_Base_SetConfig+0x118>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d023      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a2b      	ldr	r2, [pc, #172]	; (8008d60 <TIM_Base_SetConfig+0x11c>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d01f      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a2a      	ldr	r2, [pc, #168]	; (8008d64 <TIM_Base_SetConfig+0x120>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d01b      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a29      	ldr	r2, [pc, #164]	; (8008d68 <TIM_Base_SetConfig+0x124>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d017      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a28      	ldr	r2, [pc, #160]	; (8008d6c <TIM_Base_SetConfig+0x128>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d013      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a27      	ldr	r2, [pc, #156]	; (8008d70 <TIM_Base_SetConfig+0x12c>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d00f      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a26      	ldr	r2, [pc, #152]	; (8008d74 <TIM_Base_SetConfig+0x130>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d00b      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a25      	ldr	r2, [pc, #148]	; (8008d78 <TIM_Base_SetConfig+0x134>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d007      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a24      	ldr	r2, [pc, #144]	; (8008d7c <TIM_Base_SetConfig+0x138>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d003      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a23      	ldr	r2, [pc, #140]	; (8008d80 <TIM_Base_SetConfig+0x13c>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d108      	bne.n	8008d08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	689a      	ldr	r2, [r3, #8]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a0a      	ldr	r2, [pc, #40]	; (8008d58 <TIM_Base_SetConfig+0x114>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d003      	beq.n	8008d3c <TIM_Base_SetConfig+0xf8>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a0c      	ldr	r2, [pc, #48]	; (8008d68 <TIM_Base_SetConfig+0x124>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d103      	bne.n	8008d44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	691a      	ldr	r2, [r3, #16]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	615a      	str	r2, [r3, #20]
}
 8008d4a:	bf00      	nop
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	40010000 	.word	0x40010000
 8008d5c:	40000400 	.word	0x40000400
 8008d60:	40000800 	.word	0x40000800
 8008d64:	40000c00 	.word	0x40000c00
 8008d68:	40010400 	.word	0x40010400
 8008d6c:	40014000 	.word	0x40014000
 8008d70:	40014400 	.word	0x40014400
 8008d74:	40014800 	.word	0x40014800
 8008d78:	40001800 	.word	0x40001800
 8008d7c:	40001c00 	.word	0x40001c00
 8008d80:	40002000 	.word	0x40002000

08008d84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b087      	sub	sp, #28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	f023 0201 	bic.w	r2, r3, #1
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f023 0303 	bic.w	r3, r3, #3
 8008dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	f023 0302 	bic.w	r3, r3, #2
 8008dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	697a      	ldr	r2, [r7, #20]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a20      	ldr	r2, [pc, #128]	; (8008e5c <TIM_OC1_SetConfig+0xd8>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d003      	beq.n	8008de8 <TIM_OC1_SetConfig+0x64>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a1f      	ldr	r2, [pc, #124]	; (8008e60 <TIM_OC1_SetConfig+0xdc>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d10c      	bne.n	8008e02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	f023 0308 	bic.w	r3, r3, #8
 8008dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f023 0304 	bic.w	r3, r3, #4
 8008e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a15      	ldr	r2, [pc, #84]	; (8008e5c <TIM_OC1_SetConfig+0xd8>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d003      	beq.n	8008e12 <TIM_OC1_SetConfig+0x8e>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a14      	ldr	r2, [pc, #80]	; (8008e60 <TIM_OC1_SetConfig+0xdc>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d111      	bne.n	8008e36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	697a      	ldr	r2, [r7, #20]
 8008e4e:	621a      	str	r2, [r3, #32]
}
 8008e50:	bf00      	nop
 8008e52:	371c      	adds	r7, #28
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	40010000 	.word	0x40010000
 8008e60:	40010400 	.word	0x40010400

08008e64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b087      	sub	sp, #28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a1b      	ldr	r3, [r3, #32]
 8008e72:	f023 0210 	bic.w	r2, r3, #16
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	021b      	lsls	r3, r3, #8
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f023 0320 	bic.w	r3, r3, #32
 8008eae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	011b      	lsls	r3, r3, #4
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a22      	ldr	r2, [pc, #136]	; (8008f48 <TIM_OC2_SetConfig+0xe4>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d003      	beq.n	8008ecc <TIM_OC2_SetConfig+0x68>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a21      	ldr	r2, [pc, #132]	; (8008f4c <TIM_OC2_SetConfig+0xe8>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d10d      	bne.n	8008ee8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	011b      	lsls	r3, r3, #4
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ee6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a17      	ldr	r2, [pc, #92]	; (8008f48 <TIM_OC2_SetConfig+0xe4>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d003      	beq.n	8008ef8 <TIM_OC2_SetConfig+0x94>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a16      	ldr	r2, [pc, #88]	; (8008f4c <TIM_OC2_SetConfig+0xe8>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d113      	bne.n	8008f20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008efe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	695b      	ldr	r3, [r3, #20]
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	693a      	ldr	r2, [r7, #16]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	685a      	ldr	r2, [r3, #4]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	621a      	str	r2, [r3, #32]
}
 8008f3a:	bf00      	nop
 8008f3c:	371c      	adds	r7, #28
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	40010000 	.word	0x40010000
 8008f4c:	40010400 	.word	0x40010400

08008f50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b087      	sub	sp, #28
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a1b      	ldr	r3, [r3, #32]
 8008f5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	69db      	ldr	r3, [r3, #28]
 8008f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f023 0303 	bic.w	r3, r3, #3
 8008f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	021b      	lsls	r3, r3, #8
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a21      	ldr	r2, [pc, #132]	; (8009030 <TIM_OC3_SetConfig+0xe0>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d003      	beq.n	8008fb6 <TIM_OC3_SetConfig+0x66>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a20      	ldr	r2, [pc, #128]	; (8009034 <TIM_OC3_SetConfig+0xe4>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d10d      	bne.n	8008fd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	021b      	lsls	r3, r3, #8
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a16      	ldr	r2, [pc, #88]	; (8009030 <TIM_OC3_SetConfig+0xe0>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d003      	beq.n	8008fe2 <TIM_OC3_SetConfig+0x92>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a15      	ldr	r2, [pc, #84]	; (8009034 <TIM_OC3_SetConfig+0xe4>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d113      	bne.n	800900a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	011b      	lsls	r3, r3, #4
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	011b      	lsls	r3, r3, #4
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	4313      	orrs	r3, r2
 8009008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	685a      	ldr	r2, [r3, #4]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	621a      	str	r2, [r3, #32]
}
 8009024:	bf00      	nop
 8009026:	371c      	adds	r7, #28
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	40010000 	.word	0x40010000
 8009034:	40010400 	.word	0x40010400

08009038 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009038:	b480      	push	{r7}
 800903a:	b087      	sub	sp, #28
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800906e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	021b      	lsls	r3, r3, #8
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	4313      	orrs	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009082:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	031b      	lsls	r3, r3, #12
 800908a:	693a      	ldr	r2, [r7, #16]
 800908c:	4313      	orrs	r3, r2
 800908e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a12      	ldr	r2, [pc, #72]	; (80090dc <TIM_OC4_SetConfig+0xa4>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d003      	beq.n	80090a0 <TIM_OC4_SetConfig+0x68>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a11      	ldr	r2, [pc, #68]	; (80090e0 <TIM_OC4_SetConfig+0xa8>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d109      	bne.n	80090b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	695b      	ldr	r3, [r3, #20]
 80090ac:	019b      	lsls	r3, r3, #6
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	697a      	ldr	r2, [r7, #20]
 80090b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	68fa      	ldr	r2, [r7, #12]
 80090be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	685a      	ldr	r2, [r3, #4]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	693a      	ldr	r2, [r7, #16]
 80090cc:	621a      	str	r2, [r3, #32]
}
 80090ce:	bf00      	nop
 80090d0:	371c      	adds	r7, #28
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	40010000 	.word	0x40010000
 80090e0:	40010400 	.word	0x40010400

080090e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b087      	sub	sp, #28
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6a1b      	ldr	r3, [r3, #32]
 80090f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	f023 0201 	bic.w	r2, r3, #1
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800910e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	011b      	lsls	r3, r3, #4
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	4313      	orrs	r3, r2
 8009118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f023 030a 	bic.w	r3, r3, #10
 8009120:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	4313      	orrs	r3, r2
 8009128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	621a      	str	r2, [r3, #32]
}
 8009136:	bf00      	nop
 8009138:	371c      	adds	r7, #28
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009142:	b480      	push	{r7}
 8009144:	b087      	sub	sp, #28
 8009146:	af00      	add	r7, sp, #0
 8009148:	60f8      	str	r0, [r7, #12]
 800914a:	60b9      	str	r1, [r7, #8]
 800914c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6a1b      	ldr	r3, [r3, #32]
 8009152:	f023 0210 	bic.w	r2, r3, #16
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6a1b      	ldr	r3, [r3, #32]
 8009164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800916c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	031b      	lsls	r3, r3, #12
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	4313      	orrs	r3, r2
 8009176:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800917e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	011b      	lsls	r3, r3, #4
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	4313      	orrs	r3, r2
 8009188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	693a      	ldr	r2, [r7, #16]
 8009194:	621a      	str	r2, [r3, #32]
}
 8009196:	bf00      	nop
 8009198:	371c      	adds	r7, #28
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091a2:	b480      	push	{r7}
 80091a4:	b085      	sub	sp, #20
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
 80091aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	4313      	orrs	r3, r2
 80091c0:	f043 0307 	orr.w	r3, r3, #7
 80091c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	609a      	str	r2, [r3, #8]
}
 80091cc:	bf00      	nop
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80091d8:	b480      	push	{r7}
 80091da:	b087      	sub	sp, #28
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
 80091e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	021a      	lsls	r2, r3, #8
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	431a      	orrs	r2, r3
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	4313      	orrs	r3, r2
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	4313      	orrs	r3, r2
 8009204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	697a      	ldr	r2, [r7, #20]
 800920a:	609a      	str	r2, [r3, #8]
}
 800920c:	bf00      	nop
 800920e:	371c      	adds	r7, #28
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009218:	b480      	push	{r7}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	f003 031f 	and.w	r3, r3, #31
 800922a:	2201      	movs	r2, #1
 800922c:	fa02 f303 	lsl.w	r3, r2, r3
 8009230:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6a1a      	ldr	r2, [r3, #32]
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	43db      	mvns	r3, r3
 800923a:	401a      	ands	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6a1a      	ldr	r2, [r3, #32]
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f003 031f 	and.w	r3, r3, #31
 800924a:	6879      	ldr	r1, [r7, #4]
 800924c:	fa01 f303 	lsl.w	r3, r1, r3
 8009250:	431a      	orrs	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	621a      	str	r2, [r3, #32]
}
 8009256:	bf00      	nop
 8009258:	371c      	adds	r7, #28
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
	...

08009264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009274:	2b01      	cmp	r3, #1
 8009276:	d101      	bne.n	800927c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009278:	2302      	movs	r3, #2
 800927a:	e05a      	b.n	8009332 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2202      	movs	r2, #2
 8009288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a21      	ldr	r2, [pc, #132]	; (8009340 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d022      	beq.n	8009306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092c8:	d01d      	beq.n	8009306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a1d      	ldr	r2, [pc, #116]	; (8009344 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d018      	beq.n	8009306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a1b      	ldr	r2, [pc, #108]	; (8009348 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d013      	beq.n	8009306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a1a      	ldr	r2, [pc, #104]	; (800934c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d00e      	beq.n	8009306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a18      	ldr	r2, [pc, #96]	; (8009350 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d009      	beq.n	8009306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a17      	ldr	r2, [pc, #92]	; (8009354 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d004      	beq.n	8009306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a15      	ldr	r2, [pc, #84]	; (8009358 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d10c      	bne.n	8009320 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800930c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	4313      	orrs	r3, r2
 8009316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3714      	adds	r7, #20
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	40010000 	.word	0x40010000
 8009344:	40000400 	.word	0x40000400
 8009348:	40000800 	.word	0x40000800
 800934c:	40000c00 	.word	0x40000c00
 8009350:	40010400 	.word	0x40010400
 8009354:	40014000 	.word	0x40014000
 8009358:	40001800 	.word	0x40001800

0800935c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d101      	bne.n	8009396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e03f      	b.n	8009416 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800939c:	b2db      	uxtb	r3, r3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d106      	bne.n	80093b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7fa f972 	bl	8003694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2224      	movs	r2, #36	; 0x24
 80093b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68da      	ldr	r2, [r3, #12]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f001 f833 	bl	800a434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	691a      	ldr	r2, [r3, #16]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	695a      	ldr	r2, [r3, #20]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80093ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68da      	ldr	r2, [r3, #12]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2220      	movs	r2, #32
 8009408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2220      	movs	r2, #32
 8009410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b084      	sub	sp, #16
 8009422:	af00      	add	r7, sp, #0
 8009424:	60f8      	str	r0, [r7, #12]
 8009426:	60b9      	str	r1, [r7, #8]
 8009428:	4613      	mov	r3, r2
 800942a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009432:	b2db      	uxtb	r3, r3
 8009434:	2b20      	cmp	r3, #32
 8009436:	d11d      	bne.n	8009474 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d002      	beq.n	8009444 <HAL_UART_Receive_IT+0x26>
 800943e:	88fb      	ldrh	r3, [r7, #6]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d101      	bne.n	8009448 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e016      	b.n	8009476 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800944e:	2b01      	cmp	r3, #1
 8009450:	d101      	bne.n	8009456 <HAL_UART_Receive_IT+0x38>
 8009452:	2302      	movs	r3, #2
 8009454:	e00f      	b.n	8009476 <HAL_UART_Receive_IT+0x58>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009464:	88fb      	ldrh	r3, [r7, #6]
 8009466:	461a      	mov	r2, r3
 8009468:	68b9      	ldr	r1, [r7, #8]
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f000 fd4b 	bl	8009f06 <UART_Start_Receive_IT>
 8009470:	4603      	mov	r3, r0
 8009472:	e000      	b.n	8009476 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009474:	2302      	movs	r3, #2
  }
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
	...

08009480 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b08c      	sub	sp, #48	; 0x30
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	4613      	mov	r3, r2
 800948c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b20      	cmp	r3, #32
 8009498:	d165      	bne.n	8009566 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <HAL_UART_Transmit_DMA+0x26>
 80094a0:	88fb      	ldrh	r3, [r7, #6]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e05e      	b.n	8009568 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d101      	bne.n	80094b8 <HAL_UART_Transmit_DMA+0x38>
 80094b4:	2302      	movs	r3, #2
 80094b6:	e057      	b.n	8009568 <HAL_UART_Transmit_DMA+0xe8>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80094c0:	68ba      	ldr	r2, [r7, #8]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	88fa      	ldrh	r2, [r7, #6]
 80094ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	88fa      	ldrh	r2, [r7, #6]
 80094d0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2221      	movs	r2, #33	; 0x21
 80094dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e4:	4a22      	ldr	r2, [pc, #136]	; (8009570 <HAL_UART_Transmit_DMA+0xf0>)
 80094e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ec:	4a21      	ldr	r2, [pc, #132]	; (8009574 <HAL_UART_Transmit_DMA+0xf4>)
 80094ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f4:	4a20      	ldr	r2, [pc, #128]	; (8009578 <HAL_UART_Transmit_DMA+0xf8>)
 80094f6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094fc:	2200      	movs	r2, #0
 80094fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8009500:	f107 0308 	add.w	r3, r7, #8
 8009504:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800950a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950c:	6819      	ldr	r1, [r3, #0]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3304      	adds	r3, #4
 8009514:	461a      	mov	r2, r3
 8009516:	88fb      	ldrh	r3, [r7, #6]
 8009518:	f7fb fa08 	bl	800492c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009524:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	3314      	adds	r3, #20
 8009534:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	e853 3f00 	ldrex	r3, [r3]
 800953c:	617b      	str	r3, [r7, #20]
   return(result);
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009544:	62bb      	str	r3, [r7, #40]	; 0x28
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	3314      	adds	r3, #20
 800954c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800954e:	627a      	str	r2, [r7, #36]	; 0x24
 8009550:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009552:	6a39      	ldr	r1, [r7, #32]
 8009554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009556:	e841 2300 	strex	r3, r2, [r1]
 800955a:	61fb      	str	r3, [r7, #28]
   return(result);
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1e5      	bne.n	800952e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	e000      	b.n	8009568 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009566:	2302      	movs	r3, #2
  }
}
 8009568:	4618      	mov	r0, r3
 800956a:	3730      	adds	r7, #48	; 0x30
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	08009c61 	.word	0x08009c61
 8009574:	08009cfb 	.word	0x08009cfb
 8009578:	08009e73 	.word	0x08009e73

0800957c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	4613      	mov	r3, r2
 8009588:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b20      	cmp	r3, #32
 8009594:	d11d      	bne.n	80095d2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d002      	beq.n	80095a2 <HAL_UART_Receive_DMA+0x26>
 800959c:	88fb      	ldrh	r3, [r7, #6]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d101      	bne.n	80095a6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e016      	b.n	80095d4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d101      	bne.n	80095b4 <HAL_UART_Receive_DMA+0x38>
 80095b0:	2302      	movs	r3, #2
 80095b2:	e00f      	b.n	80095d4 <HAL_UART_Receive_DMA+0x58>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2200      	movs	r2, #0
 80095c0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80095c2:	88fb      	ldrh	r3, [r7, #6]
 80095c4:	461a      	mov	r2, r3
 80095c6:	68b9      	ldr	r1, [r7, #8]
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f000 fcd7 	bl	8009f7c <UART_Start_Receive_DMA>
 80095ce:	4603      	mov	r3, r0
 80095d0:	e000      	b.n	80095d4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80095d2:	2302      	movs	r3, #2
  }
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b090      	sub	sp, #64	; 0x40
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80095e4:	2300      	movs	r3, #0
 80095e6:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095f2:	2b80      	cmp	r3, #128	; 0x80
 80095f4:	bf0c      	ite	eq
 80095f6:	2301      	moveq	r3, #1
 80095f8:	2300      	movne	r3, #0
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009604:	b2db      	uxtb	r3, r3
 8009606:	2b21      	cmp	r3, #33	; 0x21
 8009608:	d128      	bne.n	800965c <HAL_UART_DMAStop+0x80>
 800960a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800960c:	2b00      	cmp	r3, #0
 800960e:	d025      	beq.n	800965c <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3314      	adds	r3, #20
 8009616:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	e853 3f00 	ldrex	r3, [r3]
 800961e:	623b      	str	r3, [r7, #32]
   return(result);
 8009620:	6a3b      	ldr	r3, [r7, #32]
 8009622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009626:	63bb      	str	r3, [r7, #56]	; 0x38
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3314      	adds	r3, #20
 800962e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009630:	633a      	str	r2, [r7, #48]	; 0x30
 8009632:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009634:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009638:	e841 2300 	strex	r3, r2, [r1]
 800963c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800963e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1e5      	bne.n	8009610 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009648:	2b00      	cmp	r3, #0
 800964a:	d004      	beq.n	8009656 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009650:	4618      	mov	r0, r3
 8009652:	f7fb f9c3 	bl	80049dc <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fd2a 	bl	800a0b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009666:	2b40      	cmp	r3, #64	; 0x40
 8009668:	bf0c      	ite	eq
 800966a:	2301      	moveq	r3, #1
 800966c:	2300      	movne	r3, #0
 800966e:	b2db      	uxtb	r3, r3
 8009670:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b22      	cmp	r3, #34	; 0x22
 800967c:	d128      	bne.n	80096d0 <HAL_UART_DMAStop+0xf4>
 800967e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009680:	2b00      	cmp	r3, #0
 8009682:	d025      	beq.n	80096d0 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3314      	adds	r3, #20
 800968a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	e853 3f00 	ldrex	r3, [r3]
 8009692:	60fb      	str	r3, [r7, #12]
   return(result);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800969a:	637b      	str	r3, [r7, #52]	; 0x34
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	3314      	adds	r3, #20
 80096a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096a4:	61fa      	str	r2, [r7, #28]
 80096a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a8:	69b9      	ldr	r1, [r7, #24]
 80096aa:	69fa      	ldr	r2, [r7, #28]
 80096ac:	e841 2300 	strex	r3, r2, [r1]
 80096b0:	617b      	str	r3, [r7, #20]
   return(result);
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1e5      	bne.n	8009684 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d004      	beq.n	80096ca <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7fb f989 	bl	80049dc <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fd18 	bl	800a100 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3740      	adds	r7, #64	; 0x40
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
	...

080096dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b0ba      	sub	sp, #232	; 0xe8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	695b      	ldr	r3, [r3, #20]
 80096fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009702:	2300      	movs	r3, #0
 8009704:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009708:	2300      	movs	r3, #0
 800970a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800970e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009712:	f003 030f 	and.w	r3, r3, #15
 8009716:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800971a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10f      	bne.n	8009742 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009726:	f003 0320 	and.w	r3, r3, #32
 800972a:	2b00      	cmp	r3, #0
 800972c:	d009      	beq.n	8009742 <HAL_UART_IRQHandler+0x66>
 800972e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009732:	f003 0320 	and.w	r3, r3, #32
 8009736:	2b00      	cmp	r3, #0
 8009738:	d003      	beq.n	8009742 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fdbf 	bl	800a2be <UART_Receive_IT>
      return;
 8009740:	e256      	b.n	8009bf0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009742:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009746:	2b00      	cmp	r3, #0
 8009748:	f000 80de 	beq.w	8009908 <HAL_UART_IRQHandler+0x22c>
 800974c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009750:	f003 0301 	and.w	r3, r3, #1
 8009754:	2b00      	cmp	r3, #0
 8009756:	d106      	bne.n	8009766 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800975c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009760:	2b00      	cmp	r3, #0
 8009762:	f000 80d1 	beq.w	8009908 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00b      	beq.n	800978a <HAL_UART_IRQHandler+0xae>
 8009772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800977a:	2b00      	cmp	r3, #0
 800977c:	d005      	beq.n	800978a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009782:	f043 0201 	orr.w	r2, r3, #1
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800978a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800978e:	f003 0304 	and.w	r3, r3, #4
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00b      	beq.n	80097ae <HAL_UART_IRQHandler+0xd2>
 8009796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d005      	beq.n	80097ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a6:	f043 0202 	orr.w	r2, r3, #2
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097b2:	f003 0302 	and.w	r3, r3, #2
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00b      	beq.n	80097d2 <HAL_UART_IRQHandler+0xf6>
 80097ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097be:	f003 0301 	and.w	r3, r3, #1
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d005      	beq.n	80097d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ca:	f043 0204 	orr.w	r2, r3, #4
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80097d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097d6:	f003 0308 	and.w	r3, r3, #8
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d011      	beq.n	8009802 <HAL_UART_IRQHandler+0x126>
 80097de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097e2:	f003 0320 	and.w	r3, r3, #32
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d105      	bne.n	80097f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80097ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d005      	beq.n	8009802 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097fa:	f043 0208 	orr.w	r2, r3, #8
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009806:	2b00      	cmp	r3, #0
 8009808:	f000 81ed 	beq.w	8009be6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800980c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009810:	f003 0320 	and.w	r3, r3, #32
 8009814:	2b00      	cmp	r3, #0
 8009816:	d008      	beq.n	800982a <HAL_UART_IRQHandler+0x14e>
 8009818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800981c:	f003 0320 	and.w	r3, r3, #32
 8009820:	2b00      	cmp	r3, #0
 8009822:	d002      	beq.n	800982a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fd4a 	bl	800a2be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	695b      	ldr	r3, [r3, #20]
 8009830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009834:	2b40      	cmp	r3, #64	; 0x40
 8009836:	bf0c      	ite	eq
 8009838:	2301      	moveq	r3, #1
 800983a:	2300      	movne	r3, #0
 800983c:	b2db      	uxtb	r3, r3
 800983e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009846:	f003 0308 	and.w	r3, r3, #8
 800984a:	2b00      	cmp	r3, #0
 800984c:	d103      	bne.n	8009856 <HAL_UART_IRQHandler+0x17a>
 800984e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009852:	2b00      	cmp	r3, #0
 8009854:	d04f      	beq.n	80098f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fc52 	bl	800a100 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	695b      	ldr	r3, [r3, #20]
 8009862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009866:	2b40      	cmp	r3, #64	; 0x40
 8009868:	d141      	bne.n	80098ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	3314      	adds	r3, #20
 8009870:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009874:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009878:	e853 3f00 	ldrex	r3, [r3]
 800987c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009880:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009888:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3314      	adds	r3, #20
 8009892:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009896:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800989a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80098a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80098a6:	e841 2300 	strex	r3, r2, [r1]
 80098aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80098ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1d9      	bne.n	800986a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d013      	beq.n	80098e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c2:	4a7d      	ldr	r2, [pc, #500]	; (8009ab8 <HAL_UART_IRQHandler+0x3dc>)
 80098c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fb f8f6 	bl	8004abc <HAL_DMA_Abort_IT>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d016      	beq.n	8009904 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80098e0:	4610      	mov	r0, r2
 80098e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098e4:	e00e      	b.n	8009904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f9a4 	bl	8009c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098ec:	e00a      	b.n	8009904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f9a0 	bl	8009c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098f4:	e006      	b.n	8009904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f99c 	bl	8009c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009902:	e170      	b.n	8009be6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009904:	bf00      	nop
    return;
 8009906:	e16e      	b.n	8009be6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800990c:	2b01      	cmp	r3, #1
 800990e:	f040 814a 	bne.w	8009ba6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009916:	f003 0310 	and.w	r3, r3, #16
 800991a:	2b00      	cmp	r3, #0
 800991c:	f000 8143 	beq.w	8009ba6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009924:	f003 0310 	and.w	r3, r3, #16
 8009928:	2b00      	cmp	r3, #0
 800992a:	f000 813c 	beq.w	8009ba6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800992e:	2300      	movs	r3, #0
 8009930:	60bb      	str	r3, [r7, #8]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	60bb      	str	r3, [r7, #8]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	60bb      	str	r3, [r7, #8]
 8009942:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	695b      	ldr	r3, [r3, #20]
 800994a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800994e:	2b40      	cmp	r3, #64	; 0x40
 8009950:	f040 80b4 	bne.w	8009abc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009960:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009964:	2b00      	cmp	r3, #0
 8009966:	f000 8140 	beq.w	8009bea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800996e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009972:	429a      	cmp	r2, r3
 8009974:	f080 8139 	bcs.w	8009bea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800997e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009984:	69db      	ldr	r3, [r3, #28]
 8009986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800998a:	f000 8088 	beq.w	8009a9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	330c      	adds	r3, #12
 8009994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009998:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800999c:	e853 3f00 	ldrex	r3, [r3]
 80099a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80099a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	330c      	adds	r3, #12
 80099b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80099ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80099be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80099c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80099ca:	e841 2300 	strex	r3, r2, [r1]
 80099ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80099d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1d9      	bne.n	800998e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3314      	adds	r3, #20
 80099e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099e4:	e853 3f00 	ldrex	r3, [r3]
 80099e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80099ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80099ec:	f023 0301 	bic.w	r3, r3, #1
 80099f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3314      	adds	r3, #20
 80099fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80099fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a0a:	e841 2300 	strex	r3, r2, [r1]
 8009a0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009a10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1e1      	bne.n	80099da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3314      	adds	r3, #20
 8009a1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a20:	e853 3f00 	ldrex	r3, [r3]
 8009a24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	3314      	adds	r3, #20
 8009a36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009a3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009a3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009a40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009a42:	e841 2300 	strex	r3, r2, [r1]
 8009a46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009a48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1e3      	bne.n	8009a16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2220      	movs	r2, #32
 8009a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	330c      	adds	r3, #12
 8009a62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a66:	e853 3f00 	ldrex	r3, [r3]
 8009a6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a6e:	f023 0310 	bic.w	r3, r3, #16
 8009a72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	330c      	adds	r3, #12
 8009a7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009a80:	65ba      	str	r2, [r7, #88]	; 0x58
 8009a82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a88:	e841 2300 	strex	r3, r2, [r1]
 8009a8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1e3      	bne.n	8009a5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7fa ff9f 	bl	80049dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	4619      	mov	r1, r3
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f8ca 	bl	8009c48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009ab4:	e099      	b.n	8009bea <HAL_UART_IRQHandler+0x50e>
 8009ab6:	bf00      	nop
 8009ab8:	0800a1c7 	.word	0x0800a1c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f000 808b 	beq.w	8009bee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009ad8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 8086 	beq.w	8009bee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	330c      	adds	r3, #12
 8009ae8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aec:	e853 3f00 	ldrex	r3, [r3]
 8009af0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009af8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	330c      	adds	r3, #12
 8009b02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009b06:	647a      	str	r2, [r7, #68]	; 0x44
 8009b08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b0e:	e841 2300 	strex	r3, r2, [r1]
 8009b12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1e3      	bne.n	8009ae2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	3314      	adds	r3, #20
 8009b20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b24:	e853 3f00 	ldrex	r3, [r3]
 8009b28:	623b      	str	r3, [r7, #32]
   return(result);
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	f023 0301 	bic.w	r3, r3, #1
 8009b30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	3314      	adds	r3, #20
 8009b3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009b3e:	633a      	str	r2, [r7, #48]	; 0x30
 8009b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b46:	e841 2300 	strex	r3, r2, [r1]
 8009b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1e3      	bne.n	8009b1a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2220      	movs	r2, #32
 8009b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	330c      	adds	r3, #12
 8009b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	e853 3f00 	ldrex	r3, [r3]
 8009b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f023 0310 	bic.w	r3, r3, #16
 8009b76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	330c      	adds	r3, #12
 8009b80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009b84:	61fa      	str	r2, [r7, #28]
 8009b86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b88:	69b9      	ldr	r1, [r7, #24]
 8009b8a:	69fa      	ldr	r2, [r7, #28]
 8009b8c:	e841 2300 	strex	r3, r2, [r1]
 8009b90:	617b      	str	r3, [r7, #20]
   return(result);
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1e3      	bne.n	8009b60 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f852 	bl	8009c48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009ba4:	e023      	b.n	8009bee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d009      	beq.n	8009bc6 <HAL_UART_IRQHandler+0x4ea>
 8009bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d003      	beq.n	8009bc6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fb15 	bl	800a1ee <UART_Transmit_IT>
    return;
 8009bc4:	e014      	b.n	8009bf0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00e      	beq.n	8009bf0 <HAL_UART_IRQHandler+0x514>
 8009bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d008      	beq.n	8009bf0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fb55 	bl	800a28e <UART_EndTransmit_IT>
    return;
 8009be4:	e004      	b.n	8009bf0 <HAL_UART_IRQHandler+0x514>
    return;
 8009be6:	bf00      	nop
 8009be8:	e002      	b.n	8009bf0 <HAL_UART_IRQHandler+0x514>
      return;
 8009bea:	bf00      	nop
 8009bec:	e000      	b.n	8009bf0 <HAL_UART_IRQHandler+0x514>
      return;
 8009bee:	bf00      	nop
  }
}
 8009bf0:	37e8      	adds	r7, #232	; 0xe8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop

08009bf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	460b      	mov	r3, r1
 8009c52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b090      	sub	sp, #64	; 0x40
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d137      	bne.n	8009cec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c7e:	2200      	movs	r2, #0
 8009c80:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	3314      	adds	r3, #20
 8009c88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8c:	e853 3f00 	ldrex	r3, [r3]
 8009c90:	623b      	str	r3, [r7, #32]
   return(result);
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c98:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	3314      	adds	r3, #20
 8009ca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ca2:	633a      	str	r2, [r7, #48]	; 0x30
 8009ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009caa:	e841 2300 	strex	r3, r2, [r1]
 8009cae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1e5      	bne.n	8009c82 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	330c      	adds	r3, #12
 8009cbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	e853 3f00 	ldrex	r3, [r3]
 8009cc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8009cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	330c      	adds	r3, #12
 8009cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cd6:	61fa      	str	r2, [r7, #28]
 8009cd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cda:	69b9      	ldr	r1, [r7, #24]
 8009cdc:	69fa      	ldr	r2, [r7, #28]
 8009cde:	e841 2300 	strex	r3, r2, [r1]
 8009ce2:	617b      	str	r3, [r7, #20]
   return(result);
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1e5      	bne.n	8009cb6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009cea:	e002      	b.n	8009cf2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009cec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009cee:	f7ff ff83 	bl	8009bf8 <HAL_UART_TxCpltCallback>
}
 8009cf2:	bf00      	nop
 8009cf4:	3740      	adds	r7, #64	; 0x40
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b084      	sub	sp, #16
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d06:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f7ff ff7f 	bl	8009c0c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d0e:	bf00      	nop
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b09c      	sub	sp, #112	; 0x70
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d22:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d172      	bne.n	8009e18 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d34:	2200      	movs	r2, #0
 8009d36:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	330c      	adds	r3, #12
 8009d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d42:	e853 3f00 	ldrex	r3, [r3]
 8009d46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	330c      	adds	r3, #12
 8009d56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d58:	65ba      	str	r2, [r7, #88]	; 0x58
 8009d5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d60:	e841 2300 	strex	r3, r2, [r1]
 8009d64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1e5      	bne.n	8009d38 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	3314      	adds	r3, #20
 8009d72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d76:	e853 3f00 	ldrex	r3, [r3]
 8009d7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d7e:	f023 0301 	bic.w	r3, r3, #1
 8009d82:	667b      	str	r3, [r7, #100]	; 0x64
 8009d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3314      	adds	r3, #20
 8009d8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009d8c:	647a      	str	r2, [r7, #68]	; 0x44
 8009d8e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d94:	e841 2300 	strex	r3, r2, [r1]
 8009d98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d1e5      	bne.n	8009d6c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3314      	adds	r3, #20
 8009da6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	e853 3f00 	ldrex	r3, [r3]
 8009dae:	623b      	str	r3, [r7, #32]
   return(result);
 8009db0:	6a3b      	ldr	r3, [r7, #32]
 8009db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009db6:	663b      	str	r3, [r7, #96]	; 0x60
 8009db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	3314      	adds	r3, #20
 8009dbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009dc0:	633a      	str	r2, [r7, #48]	; 0x30
 8009dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dc8:	e841 2300 	strex	r3, r2, [r1]
 8009dcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1e5      	bne.n	8009da0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dd6:	2220      	movs	r2, #32
 8009dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d119      	bne.n	8009e18 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	330c      	adds	r3, #12
 8009dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	e853 3f00 	ldrex	r3, [r3]
 8009df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f023 0310 	bic.w	r3, r3, #16
 8009dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	330c      	adds	r3, #12
 8009e02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e04:	61fa      	str	r2, [r7, #28]
 8009e06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e08:	69b9      	ldr	r1, [r7, #24]
 8009e0a:	69fa      	ldr	r2, [r7, #28]
 8009e0c:	e841 2300 	strex	r3, r2, [r1]
 8009e10:	617b      	str	r3, [r7, #20]
   return(result);
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1e5      	bne.n	8009de4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d106      	bne.n	8009e2e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e24:	4619      	mov	r1, r3
 8009e26:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009e28:	f7ff ff0e 	bl	8009c48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e2c:	e002      	b.n	8009e34 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009e2e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009e30:	f7f8 f9ec 	bl	800220c <HAL_UART_RxCpltCallback>
}
 8009e34:	bf00      	nop
 8009e36:	3770      	adds	r7, #112	; 0x70
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e48:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d108      	bne.n	8009e64 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e56:	085b      	lsrs	r3, r3, #1
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f7ff fef3 	bl	8009c48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e62:	e002      	b.n	8009e6a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f7ff fedb 	bl	8009c20 <HAL_UART_RxHalfCpltCallback>
}
 8009e6a:	bf00      	nop
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b084      	sub	sp, #16
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e82:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e8e:	2b80      	cmp	r3, #128	; 0x80
 8009e90:	bf0c      	ite	eq
 8009e92:	2301      	moveq	r3, #1
 8009e94:	2300      	movne	r3, #0
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	2b21      	cmp	r3, #33	; 0x21
 8009ea4:	d108      	bne.n	8009eb8 <UART_DMAError+0x46>
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d005      	beq.n	8009eb8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009eb2:	68b8      	ldr	r0, [r7, #8]
 8009eb4:	f000 f8fc 	bl	800a0b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec2:	2b40      	cmp	r3, #64	; 0x40
 8009ec4:	bf0c      	ite	eq
 8009ec6:	2301      	moveq	r3, #1
 8009ec8:	2300      	movne	r3, #0
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b22      	cmp	r3, #34	; 0x22
 8009ed8:	d108      	bne.n	8009eec <UART_DMAError+0x7a>
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d005      	beq.n	8009eec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009ee6:	68b8      	ldr	r0, [r7, #8]
 8009ee8:	f000 f90a 	bl	800a100 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef0:	f043 0210 	orr.w	r2, r3, #16
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ef8:	68b8      	ldr	r0, [r7, #8]
 8009efa:	f7ff fe9b 	bl	8009c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009efe:	bf00      	nop
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b085      	sub	sp, #20
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	60f8      	str	r0, [r7, #12]
 8009f0e:	60b9      	str	r1, [r7, #8]
 8009f10:	4613      	mov	r3, r2
 8009f12:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	68ba      	ldr	r2, [r7, #8]
 8009f18:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	88fa      	ldrh	r2, [r7, #6]
 8009f1e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	88fa      	ldrh	r2, [r7, #6]
 8009f24:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2222      	movs	r2, #34	; 0x22
 8009f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	68da      	ldr	r2, [r3, #12]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f4a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	695a      	ldr	r2, [r3, #20]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f042 0201 	orr.w	r2, r2, #1
 8009f5a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68da      	ldr	r2, [r3, #12]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f042 0220 	orr.w	r2, r2, #32
 8009f6a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009f6c:	2300      	movs	r3, #0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3714      	adds	r7, #20
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
	...

08009f7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b098      	sub	sp, #96	; 0x60
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	4613      	mov	r3, r2
 8009f88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	88fa      	ldrh	r2, [r7, #6]
 8009f94:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2222      	movs	r2, #34	; 0x22
 8009fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa8:	4a3e      	ldr	r2, [pc, #248]	; (800a0a4 <UART_Start_Receive_DMA+0x128>)
 8009faa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb0:	4a3d      	ldr	r2, [pc, #244]	; (800a0a8 <UART_Start_Receive_DMA+0x12c>)
 8009fb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb8:	4a3c      	ldr	r2, [pc, #240]	; (800a0ac <UART_Start_Receive_DMA+0x130>)
 8009fba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009fc4:	f107 0308 	add.w	r3, r7, #8
 8009fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	3304      	adds	r3, #4
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	88fb      	ldrh	r3, [r7, #6]
 8009fdc:	f7fa fca6 	bl	800492c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	613b      	str	r3, [r7, #16]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	613b      	str	r3, [r7, #16]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	613b      	str	r3, [r7, #16]
 8009ff4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	330c      	adds	r3, #12
 800a004:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a008:	e853 3f00 	ldrex	r3, [r3]
 800a00c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a00e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a014:	65bb      	str	r3, [r7, #88]	; 0x58
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	330c      	adds	r3, #12
 800a01c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a01e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a020:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a022:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a024:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a026:	e841 2300 	strex	r3, r2, [r1]
 800a02a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a02c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1e5      	bne.n	8009ffe <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	3314      	adds	r3, #20
 800a038:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03c:	e853 3f00 	ldrex	r3, [r3]
 800a040:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a044:	f043 0301 	orr.w	r3, r3, #1
 800a048:	657b      	str	r3, [r7, #84]	; 0x54
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3314      	adds	r3, #20
 800a050:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a052:	63ba      	str	r2, [r7, #56]	; 0x38
 800a054:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a056:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a05a:	e841 2300 	strex	r3, r2, [r1]
 800a05e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1e5      	bne.n	800a032 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3314      	adds	r3, #20
 800a06c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	e853 3f00 	ldrex	r3, [r3]
 800a074:	617b      	str	r3, [r7, #20]
   return(result);
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a07c:	653b      	str	r3, [r7, #80]	; 0x50
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	3314      	adds	r3, #20
 800a084:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a086:	627a      	str	r2, [r7, #36]	; 0x24
 800a088:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08a:	6a39      	ldr	r1, [r7, #32]
 800a08c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a08e:	e841 2300 	strex	r3, r2, [r1]
 800a092:	61fb      	str	r3, [r7, #28]
   return(result);
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1e5      	bne.n	800a066 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3760      	adds	r7, #96	; 0x60
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	08009d17 	.word	0x08009d17
 800a0a8:	08009e3d 	.word	0x08009e3d
 800a0ac:	08009e73 	.word	0x08009e73

0800a0b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b089      	sub	sp, #36	; 0x24
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	330c      	adds	r3, #12
 800a0be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	e853 3f00 	ldrex	r3, [r3]
 800a0c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a0ce:	61fb      	str	r3, [r7, #28]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	330c      	adds	r3, #12
 800a0d6:	69fa      	ldr	r2, [r7, #28]
 800a0d8:	61ba      	str	r2, [r7, #24]
 800a0da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0dc:	6979      	ldr	r1, [r7, #20]
 800a0de:	69ba      	ldr	r2, [r7, #24]
 800a0e0:	e841 2300 	strex	r3, r2, [r1]
 800a0e4:	613b      	str	r3, [r7, #16]
   return(result);
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d1e5      	bne.n	800a0b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a0f4:	bf00      	nop
 800a0f6:	3724      	adds	r7, #36	; 0x24
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a100:	b480      	push	{r7}
 800a102:	b095      	sub	sp, #84	; 0x54
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	330c      	adds	r3, #12
 800a10e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a112:	e853 3f00 	ldrex	r3, [r3]
 800a116:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a11e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	330c      	adds	r3, #12
 800a126:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a128:	643a      	str	r2, [r7, #64]	; 0x40
 800a12a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a12e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a130:	e841 2300 	strex	r3, r2, [r1]
 800a134:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1e5      	bne.n	800a108 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	3314      	adds	r3, #20
 800a142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a144:	6a3b      	ldr	r3, [r7, #32]
 800a146:	e853 3f00 	ldrex	r3, [r3]
 800a14a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	f023 0301 	bic.w	r3, r3, #1
 800a152:	64bb      	str	r3, [r7, #72]	; 0x48
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	3314      	adds	r3, #20
 800a15a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a15c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a15e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a164:	e841 2300 	strex	r3, r2, [r1]
 800a168:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1e5      	bne.n	800a13c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a174:	2b01      	cmp	r3, #1
 800a176:	d119      	bne.n	800a1ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	330c      	adds	r3, #12
 800a17e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	e853 3f00 	ldrex	r3, [r3]
 800a186:	60bb      	str	r3, [r7, #8]
   return(result);
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	f023 0310 	bic.w	r3, r3, #16
 800a18e:	647b      	str	r3, [r7, #68]	; 0x44
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	330c      	adds	r3, #12
 800a196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a198:	61ba      	str	r2, [r7, #24]
 800a19a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19c:	6979      	ldr	r1, [r7, #20]
 800a19e:	69ba      	ldr	r2, [r7, #24]
 800a1a0:	e841 2300 	strex	r3, r2, [r1]
 800a1a4:	613b      	str	r3, [r7, #16]
   return(result);
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1e5      	bne.n	800a178 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2220      	movs	r2, #32
 800a1b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a1ba:	bf00      	nop
 800a1bc:	3754      	adds	r7, #84	; 0x54
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b084      	sub	sp, #16
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f7ff fd27 	bl	8009c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1e6:	bf00      	nop
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	b085      	sub	sp, #20
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	2b21      	cmp	r3, #33	; 0x21
 800a200:	d13e      	bne.n	800a280 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a20a:	d114      	bne.n	800a236 <UART_Transmit_IT+0x48>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d110      	bne.n	800a236 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a1b      	ldr	r3, [r3, #32]
 800a218:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	881b      	ldrh	r3, [r3, #0]
 800a21e:	461a      	mov	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a228:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a1b      	ldr	r3, [r3, #32]
 800a22e:	1c9a      	adds	r2, r3, #2
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	621a      	str	r2, [r3, #32]
 800a234:	e008      	b.n	800a248 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	1c59      	adds	r1, r3, #1
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	6211      	str	r1, [r2, #32]
 800a240:	781a      	ldrb	r2, [r3, #0]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	3b01      	subs	r3, #1
 800a250:	b29b      	uxth	r3, r3
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	4619      	mov	r1, r3
 800a256:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10f      	bne.n	800a27c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	68da      	ldr	r2, [r3, #12]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a26a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68da      	ldr	r2, [r3, #12]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a27a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	e000      	b.n	800a282 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a280:	2302      	movs	r3, #2
  }
}
 800a282:	4618      	mov	r0, r3
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a28e:	b580      	push	{r7, lr}
 800a290:	b082      	sub	sp, #8
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68da      	ldr	r2, [r3, #12]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2220      	movs	r2, #32
 800a2aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f7ff fca2 	bl	8009bf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b08c      	sub	sp, #48	; 0x30
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	2b22      	cmp	r3, #34	; 0x22
 800a2d0:	f040 80ab 	bne.w	800a42a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2dc:	d117      	bne.n	800a30e <UART_Receive_IT+0x50>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d113      	bne.n	800a30e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a300:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a306:	1c9a      	adds	r2, r3, #2
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	629a      	str	r2, [r3, #40]	; 0x28
 800a30c:	e026      	b.n	800a35c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a312:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a314:	2300      	movs	r3, #0
 800a316:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a320:	d007      	beq.n	800a332 <UART_Receive_IT+0x74>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10a      	bne.n	800a340 <UART_Receive_IT+0x82>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d106      	bne.n	800a340 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33c:	701a      	strb	r2, [r3, #0]
 800a33e:	e008      	b.n	800a352 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	b2db      	uxtb	r3, r3
 800a348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a34c:	b2da      	uxtb	r2, r3
 800a34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a350:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a356:	1c5a      	adds	r2, r3, #1
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a360:	b29b      	uxth	r3, r3
 800a362:	3b01      	subs	r3, #1
 800a364:	b29b      	uxth	r3, r3
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	4619      	mov	r1, r3
 800a36a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d15a      	bne.n	800a426 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68da      	ldr	r2, [r3, #12]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f022 0220 	bic.w	r2, r2, #32
 800a37e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	68da      	ldr	r2, [r3, #12]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a38e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	695a      	ldr	r2, [r3, #20]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f022 0201 	bic.w	r2, r2, #1
 800a39e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d135      	bne.n	800a41c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	330c      	adds	r3, #12
 800a3bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	e853 3f00 	ldrex	r3, [r3]
 800a3c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	f023 0310 	bic.w	r3, r3, #16
 800a3cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	330c      	adds	r3, #12
 800a3d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3d6:	623a      	str	r2, [r7, #32]
 800a3d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3da:	69f9      	ldr	r1, [r7, #28]
 800a3dc:	6a3a      	ldr	r2, [r7, #32]
 800a3de:	e841 2300 	strex	r3, r2, [r1]
 800a3e2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1e5      	bne.n	800a3b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0310 	and.w	r3, r3, #16
 800a3f4:	2b10      	cmp	r3, #16
 800a3f6:	d10a      	bne.n	800a40e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	60fb      	str	r3, [r7, #12]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	60fb      	str	r3, [r7, #12]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	60fb      	str	r3, [r7, #12]
 800a40c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a412:	4619      	mov	r1, r3
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f7ff fc17 	bl	8009c48 <HAL_UARTEx_RxEventCallback>
 800a41a:	e002      	b.n	800a422 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f7f7 fef5 	bl	800220c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	e002      	b.n	800a42c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	e000      	b.n	800a42c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a42a:	2302      	movs	r3, #2
  }
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3730      	adds	r7, #48	; 0x30
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a438:	b09f      	sub	sp, #124	; 0x7c
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a43e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a44a:	68d9      	ldr	r1, [r3, #12]
 800a44c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	ea40 0301 	orr.w	r3, r0, r1
 800a454:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a458:	689a      	ldr	r2, [r3, #8]
 800a45a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	431a      	orrs	r2, r3
 800a460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	431a      	orrs	r2, r3
 800a466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a468:	69db      	ldr	r3, [r3, #28]
 800a46a:	4313      	orrs	r3, r2
 800a46c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a46e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a478:	f021 010c 	bic.w	r1, r1, #12
 800a47c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a482:	430b      	orrs	r3, r1
 800a484:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	695b      	ldr	r3, [r3, #20]
 800a48c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a492:	6999      	ldr	r1, [r3, #24]
 800a494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	ea40 0301 	orr.w	r3, r0, r1
 800a49c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a49e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	4bc5      	ldr	r3, [pc, #788]	; (800a7b8 <UART_SetConfig+0x384>)
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d004      	beq.n	800a4b2 <UART_SetConfig+0x7e>
 800a4a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	4bc3      	ldr	r3, [pc, #780]	; (800a7bc <UART_SetConfig+0x388>)
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d103      	bne.n	800a4ba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a4b2:	f7fd fcd9 	bl	8007e68 <HAL_RCC_GetPCLK2Freq>
 800a4b6:	6778      	str	r0, [r7, #116]	; 0x74
 800a4b8:	e002      	b.n	800a4c0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a4ba:	f7fd fcc1 	bl	8007e40 <HAL_RCC_GetPCLK1Freq>
 800a4be:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4c2:	69db      	ldr	r3, [r3, #28]
 800a4c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4c8:	f040 80b6 	bne.w	800a638 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a4cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4ce:	461c      	mov	r4, r3
 800a4d0:	f04f 0500 	mov.w	r5, #0
 800a4d4:	4622      	mov	r2, r4
 800a4d6:	462b      	mov	r3, r5
 800a4d8:	1891      	adds	r1, r2, r2
 800a4da:	6439      	str	r1, [r7, #64]	; 0x40
 800a4dc:	415b      	adcs	r3, r3
 800a4de:	647b      	str	r3, [r7, #68]	; 0x44
 800a4e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a4e4:	1912      	adds	r2, r2, r4
 800a4e6:	eb45 0303 	adc.w	r3, r5, r3
 800a4ea:	f04f 0000 	mov.w	r0, #0
 800a4ee:	f04f 0100 	mov.w	r1, #0
 800a4f2:	00d9      	lsls	r1, r3, #3
 800a4f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a4f8:	00d0      	lsls	r0, r2, #3
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	1911      	adds	r1, r2, r4
 800a500:	6639      	str	r1, [r7, #96]	; 0x60
 800a502:	416b      	adcs	r3, r5
 800a504:	667b      	str	r3, [r7, #100]	; 0x64
 800a506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	461a      	mov	r2, r3
 800a50c:	f04f 0300 	mov.w	r3, #0
 800a510:	1891      	adds	r1, r2, r2
 800a512:	63b9      	str	r1, [r7, #56]	; 0x38
 800a514:	415b      	adcs	r3, r3
 800a516:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a518:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a51c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a520:	f7f6 fc12 	bl	8000d48 <__aeabi_uldivmod>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	4ba5      	ldr	r3, [pc, #660]	; (800a7c0 <UART_SetConfig+0x38c>)
 800a52a:	fba3 2302 	umull	r2, r3, r3, r2
 800a52e:	095b      	lsrs	r3, r3, #5
 800a530:	011e      	lsls	r6, r3, #4
 800a532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a534:	461c      	mov	r4, r3
 800a536:	f04f 0500 	mov.w	r5, #0
 800a53a:	4622      	mov	r2, r4
 800a53c:	462b      	mov	r3, r5
 800a53e:	1891      	adds	r1, r2, r2
 800a540:	6339      	str	r1, [r7, #48]	; 0x30
 800a542:	415b      	adcs	r3, r3
 800a544:	637b      	str	r3, [r7, #52]	; 0x34
 800a546:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a54a:	1912      	adds	r2, r2, r4
 800a54c:	eb45 0303 	adc.w	r3, r5, r3
 800a550:	f04f 0000 	mov.w	r0, #0
 800a554:	f04f 0100 	mov.w	r1, #0
 800a558:	00d9      	lsls	r1, r3, #3
 800a55a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a55e:	00d0      	lsls	r0, r2, #3
 800a560:	4602      	mov	r2, r0
 800a562:	460b      	mov	r3, r1
 800a564:	1911      	adds	r1, r2, r4
 800a566:	65b9      	str	r1, [r7, #88]	; 0x58
 800a568:	416b      	adcs	r3, r5
 800a56a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a56c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	461a      	mov	r2, r3
 800a572:	f04f 0300 	mov.w	r3, #0
 800a576:	1891      	adds	r1, r2, r2
 800a578:	62b9      	str	r1, [r7, #40]	; 0x28
 800a57a:	415b      	adcs	r3, r3
 800a57c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a57e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a582:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a586:	f7f6 fbdf 	bl	8000d48 <__aeabi_uldivmod>
 800a58a:	4602      	mov	r2, r0
 800a58c:	460b      	mov	r3, r1
 800a58e:	4b8c      	ldr	r3, [pc, #560]	; (800a7c0 <UART_SetConfig+0x38c>)
 800a590:	fba3 1302 	umull	r1, r3, r3, r2
 800a594:	095b      	lsrs	r3, r3, #5
 800a596:	2164      	movs	r1, #100	; 0x64
 800a598:	fb01 f303 	mul.w	r3, r1, r3
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	00db      	lsls	r3, r3, #3
 800a5a0:	3332      	adds	r3, #50	; 0x32
 800a5a2:	4a87      	ldr	r2, [pc, #540]	; (800a7c0 <UART_SetConfig+0x38c>)
 800a5a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a5a8:	095b      	lsrs	r3, r3, #5
 800a5aa:	005b      	lsls	r3, r3, #1
 800a5ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a5b0:	441e      	add	r6, r3
 800a5b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f04f 0100 	mov.w	r1, #0
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	460b      	mov	r3, r1
 800a5be:	1894      	adds	r4, r2, r2
 800a5c0:	623c      	str	r4, [r7, #32]
 800a5c2:	415b      	adcs	r3, r3
 800a5c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a5c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a5ca:	1812      	adds	r2, r2, r0
 800a5cc:	eb41 0303 	adc.w	r3, r1, r3
 800a5d0:	f04f 0400 	mov.w	r4, #0
 800a5d4:	f04f 0500 	mov.w	r5, #0
 800a5d8:	00dd      	lsls	r5, r3, #3
 800a5da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a5de:	00d4      	lsls	r4, r2, #3
 800a5e0:	4622      	mov	r2, r4
 800a5e2:	462b      	mov	r3, r5
 800a5e4:	1814      	adds	r4, r2, r0
 800a5e6:	653c      	str	r4, [r7, #80]	; 0x50
 800a5e8:	414b      	adcs	r3, r1
 800a5ea:	657b      	str	r3, [r7, #84]	; 0x54
 800a5ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	f04f 0300 	mov.w	r3, #0
 800a5f6:	1891      	adds	r1, r2, r2
 800a5f8:	61b9      	str	r1, [r7, #24]
 800a5fa:	415b      	adcs	r3, r3
 800a5fc:	61fb      	str	r3, [r7, #28]
 800a5fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a602:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a606:	f7f6 fb9f 	bl	8000d48 <__aeabi_uldivmod>
 800a60a:	4602      	mov	r2, r0
 800a60c:	460b      	mov	r3, r1
 800a60e:	4b6c      	ldr	r3, [pc, #432]	; (800a7c0 <UART_SetConfig+0x38c>)
 800a610:	fba3 1302 	umull	r1, r3, r3, r2
 800a614:	095b      	lsrs	r3, r3, #5
 800a616:	2164      	movs	r1, #100	; 0x64
 800a618:	fb01 f303 	mul.w	r3, r1, r3
 800a61c:	1ad3      	subs	r3, r2, r3
 800a61e:	00db      	lsls	r3, r3, #3
 800a620:	3332      	adds	r3, #50	; 0x32
 800a622:	4a67      	ldr	r2, [pc, #412]	; (800a7c0 <UART_SetConfig+0x38c>)
 800a624:	fba2 2303 	umull	r2, r3, r2, r3
 800a628:	095b      	lsrs	r3, r3, #5
 800a62a:	f003 0207 	and.w	r2, r3, #7
 800a62e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4432      	add	r2, r6
 800a634:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a636:	e0b9      	b.n	800a7ac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a638:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a63a:	461c      	mov	r4, r3
 800a63c:	f04f 0500 	mov.w	r5, #0
 800a640:	4622      	mov	r2, r4
 800a642:	462b      	mov	r3, r5
 800a644:	1891      	adds	r1, r2, r2
 800a646:	6139      	str	r1, [r7, #16]
 800a648:	415b      	adcs	r3, r3
 800a64a:	617b      	str	r3, [r7, #20]
 800a64c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a650:	1912      	adds	r2, r2, r4
 800a652:	eb45 0303 	adc.w	r3, r5, r3
 800a656:	f04f 0000 	mov.w	r0, #0
 800a65a:	f04f 0100 	mov.w	r1, #0
 800a65e:	00d9      	lsls	r1, r3, #3
 800a660:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a664:	00d0      	lsls	r0, r2, #3
 800a666:	4602      	mov	r2, r0
 800a668:	460b      	mov	r3, r1
 800a66a:	eb12 0804 	adds.w	r8, r2, r4
 800a66e:	eb43 0905 	adc.w	r9, r3, r5
 800a672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	4618      	mov	r0, r3
 800a678:	f04f 0100 	mov.w	r1, #0
 800a67c:	f04f 0200 	mov.w	r2, #0
 800a680:	f04f 0300 	mov.w	r3, #0
 800a684:	008b      	lsls	r3, r1, #2
 800a686:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a68a:	0082      	lsls	r2, r0, #2
 800a68c:	4640      	mov	r0, r8
 800a68e:	4649      	mov	r1, r9
 800a690:	f7f6 fb5a 	bl	8000d48 <__aeabi_uldivmod>
 800a694:	4602      	mov	r2, r0
 800a696:	460b      	mov	r3, r1
 800a698:	4b49      	ldr	r3, [pc, #292]	; (800a7c0 <UART_SetConfig+0x38c>)
 800a69a:	fba3 2302 	umull	r2, r3, r3, r2
 800a69e:	095b      	lsrs	r3, r3, #5
 800a6a0:	011e      	lsls	r6, r3, #4
 800a6a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f04f 0100 	mov.w	r1, #0
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	1894      	adds	r4, r2, r2
 800a6b0:	60bc      	str	r4, [r7, #8]
 800a6b2:	415b      	adcs	r3, r3
 800a6b4:	60fb      	str	r3, [r7, #12]
 800a6b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a6ba:	1812      	adds	r2, r2, r0
 800a6bc:	eb41 0303 	adc.w	r3, r1, r3
 800a6c0:	f04f 0400 	mov.w	r4, #0
 800a6c4:	f04f 0500 	mov.w	r5, #0
 800a6c8:	00dd      	lsls	r5, r3, #3
 800a6ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a6ce:	00d4      	lsls	r4, r2, #3
 800a6d0:	4622      	mov	r2, r4
 800a6d2:	462b      	mov	r3, r5
 800a6d4:	1814      	adds	r4, r2, r0
 800a6d6:	64bc      	str	r4, [r7, #72]	; 0x48
 800a6d8:	414b      	adcs	r3, r1
 800a6da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f04f 0100 	mov.w	r1, #0
 800a6e6:	f04f 0200 	mov.w	r2, #0
 800a6ea:	f04f 0300 	mov.w	r3, #0
 800a6ee:	008b      	lsls	r3, r1, #2
 800a6f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a6f4:	0082      	lsls	r2, r0, #2
 800a6f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a6fa:	f7f6 fb25 	bl	8000d48 <__aeabi_uldivmod>
 800a6fe:	4602      	mov	r2, r0
 800a700:	460b      	mov	r3, r1
 800a702:	4b2f      	ldr	r3, [pc, #188]	; (800a7c0 <UART_SetConfig+0x38c>)
 800a704:	fba3 1302 	umull	r1, r3, r3, r2
 800a708:	095b      	lsrs	r3, r3, #5
 800a70a:	2164      	movs	r1, #100	; 0x64
 800a70c:	fb01 f303 	mul.w	r3, r1, r3
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	011b      	lsls	r3, r3, #4
 800a714:	3332      	adds	r3, #50	; 0x32
 800a716:	4a2a      	ldr	r2, [pc, #168]	; (800a7c0 <UART_SetConfig+0x38c>)
 800a718:	fba2 2303 	umull	r2, r3, r2, r3
 800a71c:	095b      	lsrs	r3, r3, #5
 800a71e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a722:	441e      	add	r6, r3
 800a724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a726:	4618      	mov	r0, r3
 800a728:	f04f 0100 	mov.w	r1, #0
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	1894      	adds	r4, r2, r2
 800a732:	603c      	str	r4, [r7, #0]
 800a734:	415b      	adcs	r3, r3
 800a736:	607b      	str	r3, [r7, #4]
 800a738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a73c:	1812      	adds	r2, r2, r0
 800a73e:	eb41 0303 	adc.w	r3, r1, r3
 800a742:	f04f 0400 	mov.w	r4, #0
 800a746:	f04f 0500 	mov.w	r5, #0
 800a74a:	00dd      	lsls	r5, r3, #3
 800a74c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a750:	00d4      	lsls	r4, r2, #3
 800a752:	4622      	mov	r2, r4
 800a754:	462b      	mov	r3, r5
 800a756:	eb12 0a00 	adds.w	sl, r2, r0
 800a75a:	eb43 0b01 	adc.w	fp, r3, r1
 800a75e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	4618      	mov	r0, r3
 800a764:	f04f 0100 	mov.w	r1, #0
 800a768:	f04f 0200 	mov.w	r2, #0
 800a76c:	f04f 0300 	mov.w	r3, #0
 800a770:	008b      	lsls	r3, r1, #2
 800a772:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a776:	0082      	lsls	r2, r0, #2
 800a778:	4650      	mov	r0, sl
 800a77a:	4659      	mov	r1, fp
 800a77c:	f7f6 fae4 	bl	8000d48 <__aeabi_uldivmod>
 800a780:	4602      	mov	r2, r0
 800a782:	460b      	mov	r3, r1
 800a784:	4b0e      	ldr	r3, [pc, #56]	; (800a7c0 <UART_SetConfig+0x38c>)
 800a786:	fba3 1302 	umull	r1, r3, r3, r2
 800a78a:	095b      	lsrs	r3, r3, #5
 800a78c:	2164      	movs	r1, #100	; 0x64
 800a78e:	fb01 f303 	mul.w	r3, r1, r3
 800a792:	1ad3      	subs	r3, r2, r3
 800a794:	011b      	lsls	r3, r3, #4
 800a796:	3332      	adds	r3, #50	; 0x32
 800a798:	4a09      	ldr	r2, [pc, #36]	; (800a7c0 <UART_SetConfig+0x38c>)
 800a79a:	fba2 2303 	umull	r2, r3, r2, r3
 800a79e:	095b      	lsrs	r3, r3, #5
 800a7a0:	f003 020f 	and.w	r2, r3, #15
 800a7a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4432      	add	r2, r6
 800a7aa:	609a      	str	r2, [r3, #8]
}
 800a7ac:	bf00      	nop
 800a7ae:	377c      	adds	r7, #124	; 0x7c
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b6:	bf00      	nop
 800a7b8:	40011000 	.word	0x40011000
 800a7bc:	40011400 	.word	0x40011400
 800a7c0:	51eb851f 	.word	0x51eb851f

0800a7c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a7c4:	b084      	sub	sp, #16
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b084      	sub	sp, #16
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	f107 001c 	add.w	r0, r7, #28
 800a7d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d122      	bne.n	800a822 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a7f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a806:	2b01      	cmp	r3, #1
 800a808:	d105      	bne.n	800a816 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f950 	bl	800aabc <USB_CoreReset>
 800a81c:	4603      	mov	r3, r0
 800a81e:	73fb      	strb	r3, [r7, #15]
 800a820:	e01a      	b.n	800a858 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 f944 	bl	800aabc <USB_CoreReset>
 800a834:	4603      	mov	r3, r0
 800a836:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d106      	bne.n	800a84c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a842:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	639a      	str	r2, [r3, #56]	; 0x38
 800a84a:	e005      	b.n	800a858 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a850:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d10b      	bne.n	800a876 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f043 0206 	orr.w	r2, r3, #6
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	f043 0220 	orr.w	r2, r3, #32
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a876:	7bfb      	ldrb	r3, [r7, #15]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a882:	b004      	add	sp, #16
 800a884:	4770      	bx	lr

0800a886 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a886:	b480      	push	{r7}
 800a888:	b083      	sub	sp, #12
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	f023 0201 	bic.w	r2, r3, #1
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a8c4:	78fb      	ldrb	r3, [r7, #3]
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d115      	bne.n	800a8f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a8d6:	2001      	movs	r0, #1
 800a8d8:	f7f9 fa62 	bl	8003da0 <HAL_Delay>
      ms++;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f8db 	bl	800aa9e <USB_GetMode>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d01e      	beq.n	800a92c <USB_SetCurrentMode+0x84>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2b31      	cmp	r3, #49	; 0x31
 800a8f2:	d9f0      	bls.n	800a8d6 <USB_SetCurrentMode+0x2e>
 800a8f4:	e01a      	b.n	800a92c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a8f6:	78fb      	ldrb	r3, [r7, #3]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d115      	bne.n	800a928 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a908:	2001      	movs	r0, #1
 800a90a:	f7f9 fa49 	bl	8003da0 <HAL_Delay>
      ms++;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3301      	adds	r3, #1
 800a912:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 f8c2 	bl	800aa9e <USB_GetMode>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d005      	beq.n	800a92c <USB_SetCurrentMode+0x84>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2b31      	cmp	r3, #49	; 0x31
 800a924:	d9f0      	bls.n	800a908 <USB_SetCurrentMode+0x60>
 800a926:	e001      	b.n	800a92c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a928:	2301      	movs	r3, #1
 800a92a:	e005      	b.n	800a938 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2b32      	cmp	r3, #50	; 0x32
 800a930:	d101      	bne.n	800a936 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	e000      	b.n	800a938 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a94a:	2300      	movs	r3, #0
 800a94c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	019b      	lsls	r3, r3, #6
 800a952:	f043 0220 	orr.w	r2, r3, #32
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	3301      	adds	r3, #1
 800a95e:	60fb      	str	r3, [r7, #12]
 800a960:	4a08      	ldr	r2, [pc, #32]	; (800a984 <USB_FlushTxFifo+0x44>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d901      	bls.n	800a96a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800a966:	2303      	movs	r3, #3
 800a968:	e006      	b.n	800a978 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	f003 0320 	and.w	r3, r3, #32
 800a972:	2b20      	cmp	r3, #32
 800a974:	d0f1      	beq.n	800a95a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3714      	adds	r7, #20
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr
 800a984:	00030d40 	.word	0x00030d40

0800a988 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a988:	b480      	push	{r7}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a990:	2300      	movs	r3, #0
 800a992:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2210      	movs	r2, #16
 800a998:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	3301      	adds	r3, #1
 800a99e:	60fb      	str	r3, [r7, #12]
 800a9a0:	4a08      	ldr	r2, [pc, #32]	; (800a9c4 <USB_FlushRxFifo+0x3c>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d901      	bls.n	800a9aa <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	e006      	b.n	800a9b8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	f003 0310 	and.w	r3, r3, #16
 800a9b2:	2b10      	cmp	r3, #16
 800a9b4:	d0f1      	beq.n	800a99a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3714      	adds	r7, #20
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr
 800a9c4:	00030d40 	.word	0x00030d40

0800a9c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b08b      	sub	sp, #44	; 0x2c
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a9de:	88fb      	ldrh	r3, [r7, #6]
 800a9e0:	089b      	lsrs	r3, r3, #2
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a9e6:	88fb      	ldrh	r3, [r7, #6]
 800a9e8:	f003 0303 	and.w	r3, r3, #3
 800a9ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	623b      	str	r3, [r7, #32]
 800a9f2:	e014      	b.n	800aa1e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fe:	601a      	str	r2, [r3, #0]
    pDest++;
 800aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa02:	3301      	adds	r3, #1
 800aa04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	3301      	adds	r3, #1
 800aa0a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0e:	3301      	adds	r3, #1
 800aa10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	3301      	adds	r3, #1
 800aa16:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800aa18:	6a3b      	ldr	r3, [r7, #32]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	623b      	str	r3, [r7, #32]
 800aa1e:	6a3a      	ldr	r2, [r7, #32]
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d3e6      	bcc.n	800a9f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa26:	8bfb      	ldrh	r3, [r7, #30]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d01e      	beq.n	800aa6a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa36:	461a      	mov	r2, r3
 800aa38:	f107 0310 	add.w	r3, r7, #16
 800aa3c:	6812      	ldr	r2, [r2, #0]
 800aa3e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	6a3b      	ldr	r3, [r7, #32]
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	00db      	lsls	r3, r3, #3
 800aa48:	fa22 f303 	lsr.w	r3, r2, r3
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa50:	701a      	strb	r2, [r3, #0]
      i++;
 800aa52:	6a3b      	ldr	r3, [r7, #32]
 800aa54:	3301      	adds	r3, #1
 800aa56:	623b      	str	r3, [r7, #32]
      pDest++;
 800aa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800aa5e:	8bfb      	ldrh	r3, [r7, #30]
 800aa60:	3b01      	subs	r3, #1
 800aa62:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aa64:	8bfb      	ldrh	r3, [r7, #30]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1ea      	bne.n	800aa40 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	372c      	adds	r7, #44	; 0x2c
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	695b      	ldr	r3, [r3, #20]
 800aa84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	699b      	ldr	r3, [r3, #24]
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	4013      	ands	r3, r2
 800aa8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aa90:	68fb      	ldr	r3, [r7, #12]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3714      	adds	r7, #20
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr

0800aa9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	b083      	sub	sp, #12
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	695b      	ldr	r3, [r3, #20]
 800aaaa:	f003 0301 	and.w	r3, r3, #1
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
	...

0800aabc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aac4:	2300      	movs	r3, #0
 800aac6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	3301      	adds	r3, #1
 800aacc:	60fb      	str	r3, [r7, #12]
 800aace:	4a13      	ldr	r2, [pc, #76]	; (800ab1c <USB_CoreReset+0x60>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d901      	bls.n	800aad8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800aad4:	2303      	movs	r3, #3
 800aad6:	e01a      	b.n	800ab0e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	daf3      	bge.n	800aac8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aae0:	2300      	movs	r3, #0
 800aae2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	f043 0201 	orr.w	r2, r3, #1
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	60fb      	str	r3, [r7, #12]
 800aaf6:	4a09      	ldr	r2, [pc, #36]	; (800ab1c <USB_CoreReset+0x60>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d901      	bls.n	800ab00 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800aafc:	2303      	movs	r3, #3
 800aafe:	e006      	b.n	800ab0e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	f003 0301 	and.w	r3, r3, #1
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d0f1      	beq.n	800aaf0 <USB_CoreReset+0x34>

  return HAL_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3714      	adds	r7, #20
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	00030d40 	.word	0x00030d40

0800ab20 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ab20:	b084      	sub	sp, #16
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b084      	sub	sp, #16
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
 800ab2a:	f107 001c 	add.w	r0, r7, #28
 800ab2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	2300      	movs	r3, #0
 800ab40:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab52:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab5e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d018      	beq.n	800aba4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ab72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d10a      	bne.n	800ab8e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	68ba      	ldr	r2, [r7, #8]
 800ab82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab86:	f043 0304 	orr.w	r3, r3, #4
 800ab8a:	6013      	str	r3, [r2, #0]
 800ab8c:	e014      	b.n	800abb8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68ba      	ldr	r2, [r7, #8]
 800ab98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab9c:	f023 0304 	bic.w	r3, r3, #4
 800aba0:	6013      	str	r3, [r2, #0]
 800aba2:	e009      	b.n	800abb8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68ba      	ldr	r2, [r7, #8]
 800abae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800abb2:	f023 0304 	bic.w	r3, r3, #4
 800abb6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800abb8:	2110      	movs	r1, #16
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f7ff fec0 	bl	800a940 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f7ff fee1 	bl	800a988 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800abc6:	2300      	movs	r3, #0
 800abc8:	60fb      	str	r3, [r7, #12]
 800abca:	e015      	b.n	800abf8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	015a      	lsls	r2, r3, #5
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	4413      	add	r3, r2
 800abd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abd8:	461a      	mov	r2, r3
 800abda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abde:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	015a      	lsls	r2, r3, #5
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	4413      	add	r3, r2
 800abe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abec:	461a      	mov	r2, r3
 800abee:	2300      	movs	r3, #0
 800abf0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	3301      	adds	r3, #1
 800abf6:	60fb      	str	r3, [r7, #12]
 800abf8:	6a3b      	ldr	r3, [r7, #32]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d3e5      	bcc.n	800abcc <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac0c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00b      	beq.n	800ac32 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac20:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a13      	ldr	r2, [pc, #76]	; (800ac74 <USB_HostInit+0x154>)
 800ac26:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4a13      	ldr	r2, [pc, #76]	; (800ac78 <USB_HostInit+0x158>)
 800ac2c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800ac30:	e009      	b.n	800ac46 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2280      	movs	r2, #128	; 0x80
 800ac36:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a10      	ldr	r2, [pc, #64]	; (800ac7c <USB_HostInit+0x15c>)
 800ac3c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a0f      	ldr	r2, [pc, #60]	; (800ac80 <USB_HostInit+0x160>)
 800ac42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ac46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d105      	bne.n	800ac58 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	699b      	ldr	r3, [r3, #24]
 800ac50:	f043 0210 	orr.w	r2, r3, #16
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	699a      	ldr	r2, [r3, #24]
 800ac5c:	4b09      	ldr	r3, [pc, #36]	; (800ac84 <USB_HostInit+0x164>)
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac70:	b004      	add	sp, #16
 800ac72:	4770      	bx	lr
 800ac74:	01000200 	.word	0x01000200
 800ac78:	00e00300 	.word	0x00e00300
 800ac7c:	00600080 	.word	0x00600080
 800ac80:	004000e0 	.word	0x004000e0
 800ac84:	a3200008 	.word	0xa3200008

0800ac88 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	460b      	mov	r3, r1
 800ac92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aca6:	f023 0303 	bic.w	r3, r3, #3
 800acaa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	78fb      	ldrb	r3, [r7, #3]
 800acb6:	f003 0303 	and.w	r3, r3, #3
 800acba:	68f9      	ldr	r1, [r7, #12]
 800acbc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800acc0:	4313      	orrs	r3, r2
 800acc2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800acc4:	78fb      	ldrb	r3, [r7, #3]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d107      	bne.n	800acda <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acd0:	461a      	mov	r2, r3
 800acd2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800acd6:	6053      	str	r3, [r2, #4]
 800acd8:	e009      	b.n	800acee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800acda:	78fb      	ldrb	r3, [r7, #3]
 800acdc:	2b02      	cmp	r3, #2
 800acde:	d106      	bne.n	800acee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ace6:	461a      	mov	r2, r3
 800ace8:	f241 7370 	movw	r3, #6000	; 0x1770
 800acec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3714      	adds	r7, #20
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b085      	sub	sp, #20
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad0e:	695b      	ldr	r3, [r3, #20]
 800ad10:	b29b      	uxth	r3, r3
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr

0800ad1e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b089      	sub	sp, #36	; 0x24
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
 800ad26:	460b      	mov	r3, r1
 800ad28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800ad2e:	78fb      	ldrb	r3, [r7, #3]
 800ad30:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800ad32:	2300      	movs	r3, #0
 800ad34:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	015a      	lsls	r2, r3, #5
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	0c9b      	lsrs	r3, r3, #18
 800ad46:	f003 0303 	and.w	r3, r3, #3
 800ad4a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	015a      	lsls	r2, r3, #5
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	4413      	add	r3, r2
 800ad54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	0fdb      	lsrs	r3, r3, #31
 800ad5c:	f003 0301 	and.w	r3, r3, #1
 800ad60:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	f003 0320 	and.w	r3, r3, #32
 800ad6a:	2b20      	cmp	r3, #32
 800ad6c:	d104      	bne.n	800ad78 <USB_HC_Halt+0x5a>
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d101      	bne.n	800ad78 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800ad74:	2300      	movs	r3, #0
 800ad76:	e0e8      	b.n	800af4a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d002      	beq.n	800ad84 <USB_HC_Halt+0x66>
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	2b02      	cmp	r3, #2
 800ad82:	d173      	bne.n	800ae6c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	015a      	lsls	r2, r3, #5
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	697a      	ldr	r2, [r7, #20]
 800ad94:	0151      	lsls	r1, r2, #5
 800ad96:	69ba      	ldr	r2, [r7, #24]
 800ad98:	440a      	add	r2, r1
 800ad9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ada2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	f003 0320 	and.w	r3, r3, #32
 800adac:	2b00      	cmp	r3, #0
 800adae:	f040 80cb 	bne.w	800af48 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d143      	bne.n	800ae46 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	015a      	lsls	r2, r3, #5
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	4413      	add	r3, r2
 800adc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	697a      	ldr	r2, [r7, #20]
 800adce:	0151      	lsls	r1, r2, #5
 800add0:	69ba      	ldr	r2, [r7, #24]
 800add2:	440a      	add	r2, r1
 800add4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800add8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800addc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	015a      	lsls	r2, r3, #5
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	4413      	add	r3, r2
 800ade6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	697a      	ldr	r2, [r7, #20]
 800adee:	0151      	lsls	r1, r2, #5
 800adf0:	69ba      	ldr	r2, [r7, #24]
 800adf2:	440a      	add	r2, r1
 800adf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800adfc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	015a      	lsls	r2, r3, #5
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	4413      	add	r3, r2
 800ae06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	697a      	ldr	r2, [r7, #20]
 800ae0e:	0151      	lsls	r1, r2, #5
 800ae10:	69ba      	ldr	r2, [r7, #24]
 800ae12:	440a      	add	r2, r1
 800ae14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae1c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	3301      	adds	r3, #1
 800ae22:	61fb      	str	r3, [r7, #28]
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae2a:	d81d      	bhi.n	800ae68 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	015a      	lsls	r2, r3, #5
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	4413      	add	r3, r2
 800ae34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae42:	d0ec      	beq.n	800ae1e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae44:	e080      	b.n	800af48 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	015a      	lsls	r2, r3, #5
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	697a      	ldr	r2, [r7, #20]
 800ae56:	0151      	lsls	r1, r2, #5
 800ae58:	69ba      	ldr	r2, [r7, #24]
 800ae5a:	440a      	add	r2, r1
 800ae5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae64:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae66:	e06f      	b.n	800af48 <USB_HC_Halt+0x22a>
            break;
 800ae68:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae6a:	e06d      	b.n	800af48 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	015a      	lsls	r2, r3, #5
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	4413      	add	r3, r2
 800ae74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	697a      	ldr	r2, [r7, #20]
 800ae7c:	0151      	lsls	r1, r2, #5
 800ae7e:	69ba      	ldr	r2, [r7, #24]
 800ae80:	440a      	add	r2, r1
 800ae82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae8a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d143      	bne.n	800af24 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	015a      	lsls	r2, r3, #5
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	4413      	add	r3, r2
 800aea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	0151      	lsls	r1, r2, #5
 800aeae:	69ba      	ldr	r2, [r7, #24]
 800aeb0:	440a      	add	r2, r1
 800aeb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aeb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aeba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	015a      	lsls	r2, r3, #5
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	4413      	add	r3, r2
 800aec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	697a      	ldr	r2, [r7, #20]
 800aecc:	0151      	lsls	r1, r2, #5
 800aece:	69ba      	ldr	r2, [r7, #24]
 800aed0:	440a      	add	r2, r1
 800aed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aed6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aeda:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	015a      	lsls	r2, r3, #5
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	4413      	add	r3, r2
 800aee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	0151      	lsls	r1, r2, #5
 800aeee:	69ba      	ldr	r2, [r7, #24]
 800aef0:	440a      	add	r2, r1
 800aef2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aef6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aefa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800aefc:	69fb      	ldr	r3, [r7, #28]
 800aefe:	3301      	adds	r3, #1
 800af00:	61fb      	str	r3, [r7, #28]
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af08:	d81d      	bhi.n	800af46 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	015a      	lsls	r2, r3, #5
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	4413      	add	r3, r2
 800af12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af20:	d0ec      	beq.n	800aefc <USB_HC_Halt+0x1de>
 800af22:	e011      	b.n	800af48 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	015a      	lsls	r2, r3, #5
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	4413      	add	r3, r2
 800af2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	697a      	ldr	r2, [r7, #20]
 800af34:	0151      	lsls	r1, r2, #5
 800af36:	69ba      	ldr	r2, [r7, #24]
 800af38:	440a      	add	r2, r1
 800af3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af42:	6013      	str	r3, [r2, #0]
 800af44:	e000      	b.n	800af48 <USB_HC_Halt+0x22a>
          break;
 800af46:	bf00      	nop
    }
  }

  return HAL_OK;
 800af48:	2300      	movs	r3, #0
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3724      	adds	r7, #36	; 0x24
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
	...

0800af58 <__NVIC_SetPriority>:
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	4603      	mov	r3, r0
 800af60:	6039      	str	r1, [r7, #0]
 800af62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	db0a      	blt.n	800af82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	b2da      	uxtb	r2, r3
 800af70:	490c      	ldr	r1, [pc, #48]	; (800afa4 <__NVIC_SetPriority+0x4c>)
 800af72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af76:	0112      	lsls	r2, r2, #4
 800af78:	b2d2      	uxtb	r2, r2
 800af7a:	440b      	add	r3, r1
 800af7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800af80:	e00a      	b.n	800af98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	b2da      	uxtb	r2, r3
 800af86:	4908      	ldr	r1, [pc, #32]	; (800afa8 <__NVIC_SetPriority+0x50>)
 800af88:	79fb      	ldrb	r3, [r7, #7]
 800af8a:	f003 030f 	and.w	r3, r3, #15
 800af8e:	3b04      	subs	r3, #4
 800af90:	0112      	lsls	r2, r2, #4
 800af92:	b2d2      	uxtb	r2, r2
 800af94:	440b      	add	r3, r1
 800af96:	761a      	strb	r2, [r3, #24]
}
 800af98:	bf00      	nop
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr
 800afa4:	e000e100 	.word	0xe000e100
 800afa8:	e000ed00 	.word	0xe000ed00

0800afac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800afac:	b580      	push	{r7, lr}
 800afae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800afb0:	4b05      	ldr	r3, [pc, #20]	; (800afc8 <SysTick_Handler+0x1c>)
 800afb2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800afb4:	f002 f924 	bl	800d200 <xTaskGetSchedulerState>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d001      	beq.n	800afc2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800afbe:	f003 f9fb 	bl	800e3b8 <xPortSysTickHandler>
  }
}
 800afc2:	bf00      	nop
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	e000e010 	.word	0xe000e010

0800afcc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800afcc:	b580      	push	{r7, lr}
 800afce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800afd0:	2100      	movs	r1, #0
 800afd2:	f06f 0004 	mvn.w	r0, #4
 800afd6:	f7ff ffbf 	bl	800af58 <__NVIC_SetPriority>
#endif
}
 800afda:	bf00      	nop
 800afdc:	bd80      	pop	{r7, pc}
	...

0800afe0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800afe0:	b480      	push	{r7}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afe6:	f3ef 8305 	mrs	r3, IPSR
 800afea:	603b      	str	r3, [r7, #0]
  return(result);
 800afec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d003      	beq.n	800affa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800aff2:	f06f 0305 	mvn.w	r3, #5
 800aff6:	607b      	str	r3, [r7, #4]
 800aff8:	e00c      	b.n	800b014 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800affa:	4b0a      	ldr	r3, [pc, #40]	; (800b024 <osKernelInitialize+0x44>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d105      	bne.n	800b00e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b002:	4b08      	ldr	r3, [pc, #32]	; (800b024 <osKernelInitialize+0x44>)
 800b004:	2201      	movs	r2, #1
 800b006:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b008:	2300      	movs	r3, #0
 800b00a:	607b      	str	r3, [r7, #4]
 800b00c:	e002      	b.n	800b014 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b00e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b012:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b014:	687b      	ldr	r3, [r7, #4]
}
 800b016:	4618      	mov	r0, r3
 800b018:	370c      	adds	r7, #12
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	20008110 	.word	0x20008110

0800b028 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b02e:	f3ef 8305 	mrs	r3, IPSR
 800b032:	603b      	str	r3, [r7, #0]
  return(result);
 800b034:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b036:	2b00      	cmp	r3, #0
 800b038:	d003      	beq.n	800b042 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b03a:	f06f 0305 	mvn.w	r3, #5
 800b03e:	607b      	str	r3, [r7, #4]
 800b040:	e010      	b.n	800b064 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b042:	4b0b      	ldr	r3, [pc, #44]	; (800b070 <osKernelStart+0x48>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b01      	cmp	r3, #1
 800b048:	d109      	bne.n	800b05e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b04a:	f7ff ffbf 	bl	800afcc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b04e:	4b08      	ldr	r3, [pc, #32]	; (800b070 <osKernelStart+0x48>)
 800b050:	2202      	movs	r2, #2
 800b052:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b054:	f001 fc56 	bl	800c904 <vTaskStartScheduler>
      stat = osOK;
 800b058:	2300      	movs	r3, #0
 800b05a:	607b      	str	r3, [r7, #4]
 800b05c:	e002      	b.n	800b064 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b05e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b062:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b064:	687b      	ldr	r3, [r7, #4]
}
 800b066:	4618      	mov	r0, r3
 800b068:	3708      	adds	r7, #8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	20008110 	.word	0x20008110

0800b074 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b074:	b580      	push	{r7, lr}
 800b076:	b08e      	sub	sp, #56	; 0x38
 800b078:	af04      	add	r7, sp, #16
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b080:	2300      	movs	r3, #0
 800b082:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b084:	f3ef 8305 	mrs	r3, IPSR
 800b088:	617b      	str	r3, [r7, #20]
  return(result);
 800b08a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d17e      	bne.n	800b18e <osThreadNew+0x11a>
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d07b      	beq.n	800b18e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b096:	2380      	movs	r3, #128	; 0x80
 800b098:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b09a:	2318      	movs	r3, #24
 800b09c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b0a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d045      	beq.n	800b13a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d002      	beq.n	800b0bc <osThreadNew+0x48>
        name = attr->name;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	699b      	ldr	r3, [r3, #24]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d002      	beq.n	800b0ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d008      	beq.n	800b0e2 <osThreadNew+0x6e>
 800b0d0:	69fb      	ldr	r3, [r7, #28]
 800b0d2:	2b38      	cmp	r3, #56	; 0x38
 800b0d4:	d805      	bhi.n	800b0e2 <osThreadNew+0x6e>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	f003 0301 	and.w	r3, r3, #1
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d001      	beq.n	800b0e6 <osThreadNew+0x72>
        return (NULL);
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	e054      	b.n	800b190 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	695b      	ldr	r3, [r3, #20]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d003      	beq.n	800b0f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	695b      	ldr	r3, [r3, #20]
 800b0f2:	089b      	lsrs	r3, r3, #2
 800b0f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00e      	beq.n	800b11c <osThreadNew+0xa8>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	2b5b      	cmp	r3, #91	; 0x5b
 800b104:	d90a      	bls.n	800b11c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d006      	beq.n	800b11c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	695b      	ldr	r3, [r3, #20]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d002      	beq.n	800b11c <osThreadNew+0xa8>
        mem = 1;
 800b116:	2301      	movs	r3, #1
 800b118:	61bb      	str	r3, [r7, #24]
 800b11a:	e010      	b.n	800b13e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d10c      	bne.n	800b13e <osThreadNew+0xca>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d108      	bne.n	800b13e <osThreadNew+0xca>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d104      	bne.n	800b13e <osThreadNew+0xca>
          mem = 0;
 800b134:	2300      	movs	r3, #0
 800b136:	61bb      	str	r3, [r7, #24]
 800b138:	e001      	b.n	800b13e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b13a:	2300      	movs	r3, #0
 800b13c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	2b01      	cmp	r3, #1
 800b142:	d110      	bne.n	800b166 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b14c:	9202      	str	r2, [sp, #8]
 800b14e:	9301      	str	r3, [sp, #4]
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	9300      	str	r3, [sp, #0]
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	6a3a      	ldr	r2, [r7, #32]
 800b158:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b15a:	68f8      	ldr	r0, [r7, #12]
 800b15c:	f001 f9fc 	bl	800c558 <xTaskCreateStatic>
 800b160:	4603      	mov	r3, r0
 800b162:	613b      	str	r3, [r7, #16]
 800b164:	e013      	b.n	800b18e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d110      	bne.n	800b18e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b16c:	6a3b      	ldr	r3, [r7, #32]
 800b16e:	b29a      	uxth	r2, r3
 800b170:	f107 0310 	add.w	r3, r7, #16
 800b174:	9301      	str	r3, [sp, #4]
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	9300      	str	r3, [sp, #0]
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b17e:	68f8      	ldr	r0, [r7, #12]
 800b180:	f001 fa47 	bl	800c612 <xTaskCreate>
 800b184:	4603      	mov	r3, r0
 800b186:	2b01      	cmp	r3, #1
 800b188:	d001      	beq.n	800b18e <osThreadNew+0x11a>
            hTask = NULL;
 800b18a:	2300      	movs	r3, #0
 800b18c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b18e:	693b      	ldr	r3, [r7, #16]
}
 800b190:	4618      	mov	r0, r3
 800b192:	3728      	adds	r7, #40	; 0x28
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800b198:	b580      	push	{r7, lr}
 800b19a:	b088      	sub	sp, #32
 800b19c:	af02      	add	r7, sp, #8
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d002      	beq.n	800b1b2 <osThreadFlagsSet+0x1a>
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	da03      	bge.n	800b1ba <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800b1b2:	f06f 0303 	mvn.w	r3, #3
 800b1b6:	60fb      	str	r3, [r7, #12]
 800b1b8:	e035      	b.n	800b226 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800b1ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1c0:	f3ef 8305 	mrs	r3, IPSR
 800b1c4:	613b      	str	r3, [r7, #16]
  return(result);
 800b1c6:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d01f      	beq.n	800b20c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800b1d0:	f107 0308 	add.w	r3, r7, #8
 800b1d4:	9300      	str	r3, [sp, #0]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	2201      	movs	r2, #1
 800b1da:	6839      	ldr	r1, [r7, #0]
 800b1dc:	6978      	ldr	r0, [r7, #20]
 800b1de:	f002 faab 	bl	800d738 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800b1e2:	f107 030c 	add.w	r3, r7, #12
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	9200      	str	r2, [sp, #0]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	6978      	ldr	r0, [r7, #20]
 800b1f0:	f002 faa2 	bl	800d738 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d015      	beq.n	800b226 <osThreadFlagsSet+0x8e>
 800b1fa:	4b0d      	ldr	r3, [pc, #52]	; (800b230 <osThreadFlagsSet+0x98>)
 800b1fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b200:	601a      	str	r2, [r3, #0]
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	f3bf 8f6f 	isb	sy
 800b20a:	e00c      	b.n	800b226 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800b20c:	2300      	movs	r3, #0
 800b20e:	2201      	movs	r2, #1
 800b210:	6839      	ldr	r1, [r7, #0]
 800b212:	6978      	ldr	r0, [r7, #20]
 800b214:	f002 f9d8 	bl	800d5c8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800b218:	f107 030c 	add.w	r3, r7, #12
 800b21c:	2200      	movs	r2, #0
 800b21e:	2100      	movs	r1, #0
 800b220:	6978      	ldr	r0, [r7, #20]
 800b222:	f002 f9d1 	bl	800d5c8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800b226:	68fb      	ldr	r3, [r7, #12]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3718      	adds	r7, #24
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	e000ed04 	.word	0xe000ed04

0800b234 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800b234:	b580      	push	{r7, lr}
 800b236:	b08c      	sub	sp, #48	; 0x30
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b240:	f3ef 8305 	mrs	r3, IPSR
 800b244:	617b      	str	r3, [r7, #20]
  return(result);
 800b246:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d003      	beq.n	800b254 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800b24c:	f06f 0305 	mvn.w	r3, #5
 800b250:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b252:	e06b      	b.n	800b32c <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2b00      	cmp	r3, #0
 800b258:	da03      	bge.n	800b262 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800b25a:	f06f 0303 	mvn.w	r3, #3
 800b25e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b260:	e064      	b.n	800b32c <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	f003 0302 	and.w	r3, r3, #2
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800b26c:	2300      	movs	r3, #0
 800b26e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b270:	e001      	b.n	800b276 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800b276:	2300      	movs	r3, #0
 800b278:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800b27e:	f001 fc53 	bl	800cb28 <xTaskGetTickCount>
 800b282:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800b284:	f107 0210 	add.w	r2, r7, #16
 800b288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b28c:	2000      	movs	r0, #0
 800b28e:	f002 f941 	bl	800d514 <xTaskNotifyWait>
 800b292:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d137      	bne.n	800b30a <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800b29a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	4013      	ands	r3, r2
 800b2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	f003 0301 	and.w	r3, r3, #1
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00c      	beq.n	800b2ce <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800b2b4:	68fa      	ldr	r2, [r7, #12]
 800b2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	68fa      	ldr	r2, [r7, #12]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d032      	beq.n	800b326 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d10f      	bne.n	800b2e6 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800b2c6:	f06f 0302 	mvn.w	r3, #2
 800b2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800b2cc:	e02e      	b.n	800b32c <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d2:	4013      	ands	r3, r2
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d128      	bne.n	800b32a <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d103      	bne.n	800b2e6 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800b2de:	f06f 0302 	mvn.w	r3, #2
 800b2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800b2e4:	e022      	b.n	800b32c <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800b2e6:	f001 fc1f 	bl	800cb28 <xTaskGetTickCount>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	6a3b      	ldr	r3, [r7, #32]
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800b2f2:	69ba      	ldr	r2, [r7, #24]
 800b2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d902      	bls.n	800b300 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b2fe:	e00e      	b.n	800b31e <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800b300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	1ad3      	subs	r3, r2, r3
 800b306:	627b      	str	r3, [r7, #36]	; 0x24
 800b308:	e009      	b.n	800b31e <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d103      	bne.n	800b318 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800b310:	f06f 0302 	mvn.w	r3, #2
 800b314:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b316:	e002      	b.n	800b31e <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800b318:	f06f 0301 	mvn.w	r3, #1
 800b31c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800b31e:	69fb      	ldr	r3, [r7, #28]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d1af      	bne.n	800b284 <osThreadFlagsWait+0x50>
 800b324:	e002      	b.n	800b32c <osThreadFlagsWait+0xf8>
            break;
 800b326:	bf00      	nop
 800b328:	e000      	b.n	800b32c <osThreadFlagsWait+0xf8>
            break;
 800b32a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800b32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3730      	adds	r7, #48	; 0x30
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b336:	b580      	push	{r7, lr}
 800b338:	b084      	sub	sp, #16
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b33e:	f3ef 8305 	mrs	r3, IPSR
 800b342:	60bb      	str	r3, [r7, #8]
  return(result);
 800b344:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b346:	2b00      	cmp	r3, #0
 800b348:	d003      	beq.n	800b352 <osDelay+0x1c>
    stat = osErrorISR;
 800b34a:	f06f 0305 	mvn.w	r3, #5
 800b34e:	60fb      	str	r3, [r7, #12]
 800b350:	e007      	b.n	800b362 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b352:	2300      	movs	r3, #0
 800b354:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d002      	beq.n	800b362 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f001 fa9d 	bl	800c89c <vTaskDelay>
    }
  }

  return (stat);
 800b362:	68fb      	ldr	r3, [r7, #12]
}
 800b364:	4618      	mov	r0, r3
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b088      	sub	sp, #32
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b374:	2300      	movs	r3, #0
 800b376:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b378:	f3ef 8305 	mrs	r3, IPSR
 800b37c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b37e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b380:	2b00      	cmp	r3, #0
 800b382:	d174      	bne.n	800b46e <osMutexNew+0x102>
    if (attr != NULL) {
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d003      	beq.n	800b392 <osMutexNew+0x26>
      type = attr->attr_bits;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	61bb      	str	r3, [r7, #24]
 800b390:	e001      	b.n	800b396 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b392:	2300      	movs	r3, #0
 800b394:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	f003 0301 	and.w	r3, r3, #1
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d002      	beq.n	800b3a6 <osMutexNew+0x3a>
      rmtx = 1U;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	617b      	str	r3, [r7, #20]
 800b3a4:	e001      	b.n	800b3aa <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	f003 0308 	and.w	r3, r3, #8
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d15c      	bne.n	800b46e <osMutexNew+0x102>
      mem = -1;
 800b3b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3b8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d015      	beq.n	800b3ec <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d006      	beq.n	800b3d6 <osMutexNew+0x6a>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	2b4f      	cmp	r3, #79	; 0x4f
 800b3ce:	d902      	bls.n	800b3d6 <osMutexNew+0x6a>
          mem = 1;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	613b      	str	r3, [r7, #16]
 800b3d4:	e00c      	b.n	800b3f0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d108      	bne.n	800b3f0 <osMutexNew+0x84>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d104      	bne.n	800b3f0 <osMutexNew+0x84>
            mem = 0;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	613b      	str	r3, [r7, #16]
 800b3ea:	e001      	b.n	800b3f0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d112      	bne.n	800b41c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d007      	beq.n	800b40c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	4619      	mov	r1, r3
 800b402:	2004      	movs	r0, #4
 800b404:	f000 fb17 	bl	800ba36 <xQueueCreateMutexStatic>
 800b408:	61f8      	str	r0, [r7, #28]
 800b40a:	e016      	b.n	800b43a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	4619      	mov	r1, r3
 800b412:	2001      	movs	r0, #1
 800b414:	f000 fb0f 	bl	800ba36 <xQueueCreateMutexStatic>
 800b418:	61f8      	str	r0, [r7, #28]
 800b41a:	e00e      	b.n	800b43a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d10b      	bne.n	800b43a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d004      	beq.n	800b432 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b428:	2004      	movs	r0, #4
 800b42a:	f000 faec 	bl	800ba06 <xQueueCreateMutex>
 800b42e:	61f8      	str	r0, [r7, #28]
 800b430:	e003      	b.n	800b43a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b432:	2001      	movs	r0, #1
 800b434:	f000 fae7 	bl	800ba06 <xQueueCreateMutex>
 800b438:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d00c      	beq.n	800b45a <osMutexNew+0xee>
        if (attr != NULL) {
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d003      	beq.n	800b44e <osMutexNew+0xe2>
          name = attr->name;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	60fb      	str	r3, [r7, #12]
 800b44c:	e001      	b.n	800b452 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b44e:	2300      	movs	r3, #0
 800b450:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b452:	68f9      	ldr	r1, [r7, #12]
 800b454:	69f8      	ldr	r0, [r7, #28]
 800b456:	f001 f821 	bl	800c49c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d006      	beq.n	800b46e <osMutexNew+0x102>
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d003      	beq.n	800b46e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	f043 0301 	orr.w	r3, r3, #1
 800b46c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b46e:	69fb      	ldr	r3, [r7, #28]
}
 800b470:	4618      	mov	r0, r3
 800b472:	3720      	adds	r7, #32
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b478:	b580      	push	{r7, lr}
 800b47a:	b086      	sub	sp, #24
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f023 0301 	bic.w	r3, r3, #1
 800b488:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f003 0301 	and.w	r3, r3, #1
 800b490:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b492:	2300      	movs	r3, #0
 800b494:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b496:	f3ef 8305 	mrs	r3, IPSR
 800b49a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b49c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d003      	beq.n	800b4aa <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b4a2:	f06f 0305 	mvn.w	r3, #5
 800b4a6:	617b      	str	r3, [r7, #20]
 800b4a8:	e02c      	b.n	800b504 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d103      	bne.n	800b4b8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b4b0:	f06f 0303 	mvn.w	r3, #3
 800b4b4:	617b      	str	r3, [r7, #20]
 800b4b6:	e025      	b.n	800b504 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d011      	beq.n	800b4e2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b4be:	6839      	ldr	r1, [r7, #0]
 800b4c0:	6938      	ldr	r0, [r7, #16]
 800b4c2:	f000 fb07 	bl	800bad4 <xQueueTakeMutexRecursive>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d01b      	beq.n	800b504 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d003      	beq.n	800b4da <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b4d2:	f06f 0301 	mvn.w	r3, #1
 800b4d6:	617b      	str	r3, [r7, #20]
 800b4d8:	e014      	b.n	800b504 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b4da:	f06f 0302 	mvn.w	r3, #2
 800b4de:	617b      	str	r3, [r7, #20]
 800b4e0:	e010      	b.n	800b504 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b4e2:	6839      	ldr	r1, [r7, #0]
 800b4e4:	6938      	ldr	r0, [r7, #16]
 800b4e6:	f000 fda5 	bl	800c034 <xQueueSemaphoreTake>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d009      	beq.n	800b504 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d003      	beq.n	800b4fe <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b4f6:	f06f 0301 	mvn.w	r3, #1
 800b4fa:	617b      	str	r3, [r7, #20]
 800b4fc:	e002      	b.n	800b504 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b4fe:	f06f 0302 	mvn.w	r3, #2
 800b502:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b504:	697b      	ldr	r3, [r7, #20]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3718      	adds	r7, #24
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b50e:	b580      	push	{r7, lr}
 800b510:	b086      	sub	sp, #24
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f023 0301 	bic.w	r3, r3, #1
 800b51c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f003 0301 	and.w	r3, r3, #1
 800b524:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b526:	2300      	movs	r3, #0
 800b528:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b52a:	f3ef 8305 	mrs	r3, IPSR
 800b52e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b530:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b532:	2b00      	cmp	r3, #0
 800b534:	d003      	beq.n	800b53e <osMutexRelease+0x30>
    stat = osErrorISR;
 800b536:	f06f 0305 	mvn.w	r3, #5
 800b53a:	617b      	str	r3, [r7, #20]
 800b53c:	e01f      	b.n	800b57e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d103      	bne.n	800b54c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b544:	f06f 0303 	mvn.w	r3, #3
 800b548:	617b      	str	r3, [r7, #20]
 800b54a:	e018      	b.n	800b57e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d009      	beq.n	800b566 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b552:	6938      	ldr	r0, [r7, #16]
 800b554:	f000 fa8a 	bl	800ba6c <xQueueGiveMutexRecursive>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d00f      	beq.n	800b57e <osMutexRelease+0x70>
        stat = osErrorResource;
 800b55e:	f06f 0302 	mvn.w	r3, #2
 800b562:	617b      	str	r3, [r7, #20]
 800b564:	e00b      	b.n	800b57e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b566:	2300      	movs	r3, #0
 800b568:	2200      	movs	r2, #0
 800b56a:	2100      	movs	r1, #0
 800b56c:	6938      	ldr	r0, [r7, #16]
 800b56e:	f000 fae7 	bl	800bb40 <xQueueGenericSend>
 800b572:	4603      	mov	r3, r0
 800b574:	2b01      	cmp	r3, #1
 800b576:	d002      	beq.n	800b57e <osMutexRelease+0x70>
        stat = osErrorResource;
 800b578:	f06f 0302 	mvn.w	r3, #2
 800b57c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b57e:	697b      	ldr	r3, [r7, #20]
}
 800b580:	4618      	mov	r0, r3
 800b582:	3718      	adds	r7, #24
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	4a07      	ldr	r2, [pc, #28]	; (800b5b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800b598:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	4a06      	ldr	r2, [pc, #24]	; (800b5b8 <vApplicationGetIdleTaskMemory+0x30>)
 800b59e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2280      	movs	r2, #128	; 0x80
 800b5a4:	601a      	str	r2, [r3, #0]
}
 800b5a6:	bf00      	nop
 800b5a8:	3714      	adds	r7, #20
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	20008114 	.word	0x20008114
 800b5b8:	20008170 	.word	0x20008170

0800b5bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b5bc:	b480      	push	{r7}
 800b5be:	b085      	sub	sp, #20
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	4a07      	ldr	r2, [pc, #28]	; (800b5e8 <vApplicationGetTimerTaskMemory+0x2c>)
 800b5cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	4a06      	ldr	r2, [pc, #24]	; (800b5ec <vApplicationGetTimerTaskMemory+0x30>)
 800b5d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5da:	601a      	str	r2, [r3, #0]
}
 800b5dc:	bf00      	nop
 800b5de:	3714      	adds	r7, #20
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr
 800b5e8:	20008370 	.word	0x20008370
 800b5ec:	200083cc 	.word	0x200083cc

0800b5f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f103 0208 	add.w	r2, r3, #8
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b608:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f103 0208 	add.w	r2, r3, #8
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f103 0208 	add.w	r2, r3, #8
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b624:	bf00      	nop
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b63e:	bf00      	nop
 800b640:	370c      	adds	r7, #12
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr

0800b64a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b64a:	b480      	push	{r7}
 800b64c:	b085      	sub	sp, #20
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
 800b652:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	689a      	ldr	r2, [r3, #8]
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	683a      	ldr	r2, [r7, #0]
 800b66e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	1c5a      	adds	r2, r3, #1
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	601a      	str	r2, [r3, #0]
}
 800b686:	bf00      	nop
 800b688:	3714      	adds	r7, #20
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b692:	b480      	push	{r7}
 800b694:	b085      	sub	sp, #20
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6a8:	d103      	bne.n	800b6b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	691b      	ldr	r3, [r3, #16]
 800b6ae:	60fb      	str	r3, [r7, #12]
 800b6b0:	e00c      	b.n	800b6cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	3308      	adds	r3, #8
 800b6b6:	60fb      	str	r3, [r7, #12]
 800b6b8:	e002      	b.n	800b6c0 <vListInsert+0x2e>
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	60fb      	str	r3, [r7, #12]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	68ba      	ldr	r2, [r7, #8]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d2f6      	bcs.n	800b6ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	685a      	ldr	r2, [r3, #4]
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	683a      	ldr	r2, [r7, #0]
 800b6da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	683a      	ldr	r2, [r7, #0]
 800b6e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	1c5a      	adds	r2, r3, #1
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	601a      	str	r2, [r3, #0]
}
 800b6f8:	bf00      	nop
 800b6fa:	3714      	adds	r7, #20
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b704:	b480      	push	{r7}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	6892      	ldr	r2, [r2, #8]
 800b71a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	6852      	ldr	r2, [r2, #4]
 800b724:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d103      	bne.n	800b738 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	689a      	ldr	r2, [r3, #8]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	1e5a      	subs	r2, r3, #1
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3714      	adds	r7, #20
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d10a      	bne.n	800b782 <xQueueGenericReset+0x2a>
	__asm volatile
 800b76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b770:	f383 8811 	msr	BASEPRI, r3
 800b774:	f3bf 8f6f 	isb	sy
 800b778:	f3bf 8f4f 	dsb	sy
 800b77c:	60bb      	str	r3, [r7, #8]
}
 800b77e:	bf00      	nop
 800b780:	e7fe      	b.n	800b780 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b782:	f002 fd87 	bl	800e294 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b78e:	68f9      	ldr	r1, [r7, #12]
 800b790:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b792:	fb01 f303 	mul.w	r3, r1, r3
 800b796:	441a      	add	r2, r3
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	68f9      	ldr	r1, [r7, #12]
 800b7b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b7b8:	fb01 f303 	mul.w	r3, r1, r3
 800b7bc:	441a      	add	r2, r3
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	22ff      	movs	r2, #255	; 0xff
 800b7c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	22ff      	movs	r2, #255	; 0xff
 800b7ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d114      	bne.n	800b802 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	691b      	ldr	r3, [r3, #16]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d01a      	beq.n	800b816 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	3310      	adds	r3, #16
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f001 fb17 	bl	800ce18 <xTaskRemoveFromEventList>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d012      	beq.n	800b816 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b7f0:	4b0c      	ldr	r3, [pc, #48]	; (800b824 <xQueueGenericReset+0xcc>)
 800b7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7f6:	601a      	str	r2, [r3, #0]
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	e009      	b.n	800b816 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	3310      	adds	r3, #16
 800b806:	4618      	mov	r0, r3
 800b808:	f7ff fef2 	bl	800b5f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	3324      	adds	r3, #36	; 0x24
 800b810:	4618      	mov	r0, r3
 800b812:	f7ff feed 	bl	800b5f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b816:	f002 fd6d 	bl	800e2f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b81a:	2301      	movs	r3, #1
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3710      	adds	r7, #16
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	e000ed04 	.word	0xe000ed04

0800b828 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b08e      	sub	sp, #56	; 0x38
 800b82c:	af02      	add	r7, sp, #8
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	607a      	str	r2, [r7, #4]
 800b834:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d10a      	bne.n	800b852 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b84e:	bf00      	nop
 800b850:	e7fe      	b.n	800b850 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d10a      	bne.n	800b86e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85c:	f383 8811 	msr	BASEPRI, r3
 800b860:	f3bf 8f6f 	isb	sy
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b86a:	bf00      	nop
 800b86c:	e7fe      	b.n	800b86c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d002      	beq.n	800b87a <xQueueGenericCreateStatic+0x52>
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d001      	beq.n	800b87e <xQueueGenericCreateStatic+0x56>
 800b87a:	2301      	movs	r3, #1
 800b87c:	e000      	b.n	800b880 <xQueueGenericCreateStatic+0x58>
 800b87e:	2300      	movs	r3, #0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d10a      	bne.n	800b89a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b888:	f383 8811 	msr	BASEPRI, r3
 800b88c:	f3bf 8f6f 	isb	sy
 800b890:	f3bf 8f4f 	dsb	sy
 800b894:	623b      	str	r3, [r7, #32]
}
 800b896:	bf00      	nop
 800b898:	e7fe      	b.n	800b898 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d102      	bne.n	800b8a6 <xQueueGenericCreateStatic+0x7e>
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d101      	bne.n	800b8aa <xQueueGenericCreateStatic+0x82>
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	e000      	b.n	800b8ac <xQueueGenericCreateStatic+0x84>
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d10a      	bne.n	800b8c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b4:	f383 8811 	msr	BASEPRI, r3
 800b8b8:	f3bf 8f6f 	isb	sy
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	61fb      	str	r3, [r7, #28]
}
 800b8c2:	bf00      	nop
 800b8c4:	e7fe      	b.n	800b8c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b8c6:	2350      	movs	r3, #80	; 0x50
 800b8c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	2b50      	cmp	r3, #80	; 0x50
 800b8ce:	d00a      	beq.n	800b8e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d4:	f383 8811 	msr	BASEPRI, r3
 800b8d8:	f3bf 8f6f 	isb	sy
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	61bb      	str	r3, [r7, #24]
}
 800b8e2:	bf00      	nop
 800b8e4:	e7fe      	b.n	800b8e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b8e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00d      	beq.n	800b90e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b8fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b900:	9300      	str	r3, [sp, #0]
 800b902:	4613      	mov	r3, r2
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	68b9      	ldr	r1, [r7, #8]
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f000 f83f 	bl	800b98c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b910:	4618      	mov	r0, r3
 800b912:	3730      	adds	r7, #48	; 0x30
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b08a      	sub	sp, #40	; 0x28
 800b91c:	af02      	add	r7, sp, #8
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	4613      	mov	r3, r2
 800b924:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10a      	bne.n	800b942 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b930:	f383 8811 	msr	BASEPRI, r3
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	613b      	str	r3, [r7, #16]
}
 800b93e:	bf00      	nop
 800b940:	e7fe      	b.n	800b940 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	68ba      	ldr	r2, [r7, #8]
 800b946:	fb02 f303 	mul.w	r3, r2, r3
 800b94a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	3350      	adds	r3, #80	; 0x50
 800b950:	4618      	mov	r0, r3
 800b952:	f002 fdc1 	bl	800e4d8 <pvPortMalloc>
 800b956:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d011      	beq.n	800b982 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	3350      	adds	r3, #80	; 0x50
 800b966:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	2200      	movs	r2, #0
 800b96c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b970:	79fa      	ldrb	r2, [r7, #7]
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	4613      	mov	r3, r2
 800b978:	697a      	ldr	r2, [r7, #20]
 800b97a:	68b9      	ldr	r1, [r7, #8]
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	f000 f805 	bl	800b98c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b982:	69bb      	ldr	r3, [r7, #24]
	}
 800b984:	4618      	mov	r0, r3
 800b986:	3720      	adds	r7, #32
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
 800b998:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d103      	bne.n	800b9a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	69ba      	ldr	r2, [r7, #24]
 800b9a4:	601a      	str	r2, [r3, #0]
 800b9a6:	e002      	b.n	800b9ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b9a8:	69bb      	ldr	r3, [r7, #24]
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	68fa      	ldr	r2, [r7, #12]
 800b9b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	68ba      	ldr	r2, [r7, #8]
 800b9b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b9ba:	2101      	movs	r1, #1
 800b9bc:	69b8      	ldr	r0, [r7, #24]
 800b9be:	f7ff fecb 	bl	800b758 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	78fa      	ldrb	r2, [r7, #3]
 800b9c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b9ca:	bf00      	nop
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b082      	sub	sp, #8
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00e      	beq.n	800b9fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 f8a1 	bl	800bb40 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b9fe:	bf00      	nop
 800ba00:	3708      	adds	r7, #8
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b086      	sub	sp, #24
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba10:	2301      	movs	r3, #1
 800ba12:	617b      	str	r3, [r7, #20]
 800ba14:	2300      	movs	r3, #0
 800ba16:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ba18:	79fb      	ldrb	r3, [r7, #7]
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	6939      	ldr	r1, [r7, #16]
 800ba1e:	6978      	ldr	r0, [r7, #20]
 800ba20:	f7ff ff7a 	bl	800b918 <xQueueGenericCreate>
 800ba24:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f7ff ffd3 	bl	800b9d2 <prvInitialiseMutex>

		return xNewQueue;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
	}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3718      	adds	r7, #24
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b088      	sub	sp, #32
 800ba3a:	af02      	add	r7, sp, #8
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	6039      	str	r1, [r7, #0]
 800ba40:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba42:	2301      	movs	r3, #1
 800ba44:	617b      	str	r3, [r7, #20]
 800ba46:	2300      	movs	r3, #0
 800ba48:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ba4a:	79fb      	ldrb	r3, [r7, #7]
 800ba4c:	9300      	str	r3, [sp, #0]
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	2200      	movs	r2, #0
 800ba52:	6939      	ldr	r1, [r7, #16]
 800ba54:	6978      	ldr	r0, [r7, #20]
 800ba56:	f7ff fee7 	bl	800b828 <xQueueGenericCreateStatic>
 800ba5a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ba5c:	68f8      	ldr	r0, [r7, #12]
 800ba5e:	f7ff ffb8 	bl	800b9d2 <prvInitialiseMutex>

		return xNewQueue;
 800ba62:	68fb      	ldr	r3, [r7, #12]
	}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3718      	adds	r7, #24
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ba6c:	b590      	push	{r4, r7, lr}
 800ba6e:	b087      	sub	sp, #28
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d10a      	bne.n	800ba94 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800ba7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	60fb      	str	r3, [r7, #12]
}
 800ba90:	bf00      	nop
 800ba92:	e7fe      	b.n	800ba92 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	689c      	ldr	r4, [r3, #8]
 800ba98:	f001 fba2 	bl	800d1e0 <xTaskGetCurrentTaskHandle>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	429c      	cmp	r4, r3
 800baa0:	d111      	bne.n	800bac6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	68db      	ldr	r3, [r3, #12]
 800baa6:	1e5a      	subs	r2, r3, #1
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	68db      	ldr	r3, [r3, #12]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d105      	bne.n	800bac0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800bab4:	2300      	movs	r3, #0
 800bab6:	2200      	movs	r2, #0
 800bab8:	2100      	movs	r1, #0
 800baba:	6938      	ldr	r0, [r7, #16]
 800babc:	f000 f840 	bl	800bb40 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800bac0:	2301      	movs	r3, #1
 800bac2:	617b      	str	r3, [r7, #20]
 800bac4:	e001      	b.n	800baca <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800bac6:	2300      	movs	r3, #0
 800bac8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800baca:	697b      	ldr	r3, [r7, #20]
	}
 800bacc:	4618      	mov	r0, r3
 800bace:	371c      	adds	r7, #28
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd90      	pop	{r4, r7, pc}

0800bad4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800bad4:	b590      	push	{r4, r7, lr}
 800bad6:	b087      	sub	sp, #28
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d10a      	bne.n	800bafe <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800bae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baec:	f383 8811 	msr	BASEPRI, r3
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	60fb      	str	r3, [r7, #12]
}
 800bafa:	bf00      	nop
 800bafc:	e7fe      	b.n	800bafc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	689c      	ldr	r4, [r3, #8]
 800bb02:	f001 fb6d 	bl	800d1e0 <xTaskGetCurrentTaskHandle>
 800bb06:	4603      	mov	r3, r0
 800bb08:	429c      	cmp	r4, r3
 800bb0a:	d107      	bne.n	800bb1c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	1c5a      	adds	r2, r3, #1
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800bb16:	2301      	movs	r3, #1
 800bb18:	617b      	str	r3, [r7, #20]
 800bb1a:	e00c      	b.n	800bb36 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800bb1c:	6839      	ldr	r1, [r7, #0]
 800bb1e:	6938      	ldr	r0, [r7, #16]
 800bb20:	f000 fa88 	bl	800c034 <xQueueSemaphoreTake>
 800bb24:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d004      	beq.n	800bb36 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	1c5a      	adds	r2, r3, #1
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800bb36:	697b      	ldr	r3, [r7, #20]
	}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	371c      	adds	r7, #28
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd90      	pop	{r4, r7, pc}

0800bb40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b08e      	sub	sp, #56	; 0x38
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	607a      	str	r2, [r7, #4]
 800bb4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10a      	bne.n	800bb72 <xQueueGenericSend+0x32>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb6e:	bf00      	nop
 800bb70:	e7fe      	b.n	800bb70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d103      	bne.n	800bb80 <xQueueGenericSend+0x40>
 800bb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d101      	bne.n	800bb84 <xQueueGenericSend+0x44>
 800bb80:	2301      	movs	r3, #1
 800bb82:	e000      	b.n	800bb86 <xQueueGenericSend+0x46>
 800bb84:	2300      	movs	r3, #0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d10a      	bne.n	800bba0 <xQueueGenericSend+0x60>
	__asm volatile
 800bb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8e:	f383 8811 	msr	BASEPRI, r3
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	f3bf 8f4f 	dsb	sy
 800bb9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb9c:	bf00      	nop
 800bb9e:	e7fe      	b.n	800bb9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	2b02      	cmp	r3, #2
 800bba4:	d103      	bne.n	800bbae <xQueueGenericSend+0x6e>
 800bba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d101      	bne.n	800bbb2 <xQueueGenericSend+0x72>
 800bbae:	2301      	movs	r3, #1
 800bbb0:	e000      	b.n	800bbb4 <xQueueGenericSend+0x74>
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d10a      	bne.n	800bbce <xQueueGenericSend+0x8e>
	__asm volatile
 800bbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbbc:	f383 8811 	msr	BASEPRI, r3
 800bbc0:	f3bf 8f6f 	isb	sy
 800bbc4:	f3bf 8f4f 	dsb	sy
 800bbc8:	623b      	str	r3, [r7, #32]
}
 800bbca:	bf00      	nop
 800bbcc:	e7fe      	b.n	800bbcc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbce:	f001 fb17 	bl	800d200 <xTaskGetSchedulerState>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d102      	bne.n	800bbde <xQueueGenericSend+0x9e>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d101      	bne.n	800bbe2 <xQueueGenericSend+0xa2>
 800bbde:	2301      	movs	r3, #1
 800bbe0:	e000      	b.n	800bbe4 <xQueueGenericSend+0xa4>
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d10a      	bne.n	800bbfe <xQueueGenericSend+0xbe>
	__asm volatile
 800bbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbec:	f383 8811 	msr	BASEPRI, r3
 800bbf0:	f3bf 8f6f 	isb	sy
 800bbf4:	f3bf 8f4f 	dsb	sy
 800bbf8:	61fb      	str	r3, [r7, #28]
}
 800bbfa:	bf00      	nop
 800bbfc:	e7fe      	b.n	800bbfc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bbfe:	f002 fb49 	bl	800e294 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d302      	bcc.n	800bc14 <xQueueGenericSend+0xd4>
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	2b02      	cmp	r3, #2
 800bc12:	d129      	bne.n	800bc68 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc14:	683a      	ldr	r2, [r7, #0]
 800bc16:	68b9      	ldr	r1, [r7, #8]
 800bc18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc1a:	f000 fb2f 	bl	800c27c <prvCopyDataToQueue>
 800bc1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d010      	beq.n	800bc4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2a:	3324      	adds	r3, #36	; 0x24
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f001 f8f3 	bl	800ce18 <xTaskRemoveFromEventList>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d013      	beq.n	800bc60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bc38:	4b3f      	ldr	r3, [pc, #252]	; (800bd38 <xQueueGenericSend+0x1f8>)
 800bc3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc3e:	601a      	str	r2, [r3, #0]
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	e00a      	b.n	800bc60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d007      	beq.n	800bc60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bc50:	4b39      	ldr	r3, [pc, #228]	; (800bd38 <xQueueGenericSend+0x1f8>)
 800bc52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc56:	601a      	str	r2, [r3, #0]
 800bc58:	f3bf 8f4f 	dsb	sy
 800bc5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bc60:	f002 fb48 	bl	800e2f4 <vPortExitCritical>
				return pdPASS;
 800bc64:	2301      	movs	r3, #1
 800bc66:	e063      	b.n	800bd30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d103      	bne.n	800bc76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc6e:	f002 fb41 	bl	800e2f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bc72:	2300      	movs	r3, #0
 800bc74:	e05c      	b.n	800bd30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d106      	bne.n	800bc8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc7c:	f107 0314 	add.w	r3, r7, #20
 800bc80:	4618      	mov	r0, r3
 800bc82:	f001 f953 	bl	800cf2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc86:	2301      	movs	r3, #1
 800bc88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc8a:	f002 fb33 	bl	800e2f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc8e:	f000 fe9f 	bl	800c9d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc92:	f002 faff 	bl	800e294 <vPortEnterCritical>
 800bc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc9c:	b25b      	sxtb	r3, r3
 800bc9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bca2:	d103      	bne.n	800bcac <xQueueGenericSend+0x16c>
 800bca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca6:	2200      	movs	r2, #0
 800bca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcb2:	b25b      	sxtb	r3, r3
 800bcb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcb8:	d103      	bne.n	800bcc2 <xQueueGenericSend+0x182>
 800bcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcc2:	f002 fb17 	bl	800e2f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bcc6:	1d3a      	adds	r2, r7, #4
 800bcc8:	f107 0314 	add.w	r3, r7, #20
 800bccc:	4611      	mov	r1, r2
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f001 f942 	bl	800cf58 <xTaskCheckForTimeOut>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d124      	bne.n	800bd24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bcda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcdc:	f000 fbc6 	bl	800c46c <prvIsQueueFull>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d018      	beq.n	800bd18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce8:	3310      	adds	r3, #16
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	4611      	mov	r1, r2
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f001 f842 	bl	800cd78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bcf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcf6:	f000 fb51 	bl	800c39c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bcfa:	f000 fe77 	bl	800c9ec <xTaskResumeAll>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f47f af7c 	bne.w	800bbfe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bd06:	4b0c      	ldr	r3, [pc, #48]	; (800bd38 <xQueueGenericSend+0x1f8>)
 800bd08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd0c:	601a      	str	r2, [r3, #0]
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	e772      	b.n	800bbfe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bd18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd1a:	f000 fb3f 	bl	800c39c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd1e:	f000 fe65 	bl	800c9ec <xTaskResumeAll>
 800bd22:	e76c      	b.n	800bbfe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bd24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd26:	f000 fb39 	bl	800c39c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd2a:	f000 fe5f 	bl	800c9ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bd2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3738      	adds	r7, #56	; 0x38
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	e000ed04 	.word	0xe000ed04

0800bd3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b090      	sub	sp, #64	; 0x40
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]
 800bd48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d10a      	bne.n	800bd6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd58:	f383 8811 	msr	BASEPRI, r3
 800bd5c:	f3bf 8f6f 	isb	sy
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd66:	bf00      	nop
 800bd68:	e7fe      	b.n	800bd68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d103      	bne.n	800bd78 <xQueueGenericSendFromISR+0x3c>
 800bd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d101      	bne.n	800bd7c <xQueueGenericSendFromISR+0x40>
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e000      	b.n	800bd7e <xQueueGenericSendFromISR+0x42>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d10a      	bne.n	800bd98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd86:	f383 8811 	msr	BASEPRI, r3
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd94:	bf00      	nop
 800bd96:	e7fe      	b.n	800bd96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	d103      	bne.n	800bda6 <xQueueGenericSendFromISR+0x6a>
 800bd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d101      	bne.n	800bdaa <xQueueGenericSendFromISR+0x6e>
 800bda6:	2301      	movs	r3, #1
 800bda8:	e000      	b.n	800bdac <xQueueGenericSendFromISR+0x70>
 800bdaa:	2300      	movs	r3, #0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d10a      	bne.n	800bdc6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb4:	f383 8811 	msr	BASEPRI, r3
 800bdb8:	f3bf 8f6f 	isb	sy
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	623b      	str	r3, [r7, #32]
}
 800bdc2:	bf00      	nop
 800bdc4:	e7fe      	b.n	800bdc4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bdc6:	f002 fb47 	bl	800e458 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bdca:	f3ef 8211 	mrs	r2, BASEPRI
 800bdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd2:	f383 8811 	msr	BASEPRI, r3
 800bdd6:	f3bf 8f6f 	isb	sy
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	61fa      	str	r2, [r7, #28]
 800bde0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bde2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bde4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d302      	bcc.n	800bdf8 <xQueueGenericSendFromISR+0xbc>
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	2b02      	cmp	r3, #2
 800bdf6:	d12f      	bne.n	800be58 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be06:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be08:	683a      	ldr	r2, [r7, #0]
 800be0a:	68b9      	ldr	r1, [r7, #8]
 800be0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be0e:	f000 fa35 	bl	800c27c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800be12:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800be16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be1a:	d112      	bne.n	800be42 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be20:	2b00      	cmp	r3, #0
 800be22:	d016      	beq.n	800be52 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be26:	3324      	adds	r3, #36	; 0x24
 800be28:	4618      	mov	r0, r3
 800be2a:	f000 fff5 	bl	800ce18 <xTaskRemoveFromEventList>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00e      	beq.n	800be52 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00b      	beq.n	800be52 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2201      	movs	r2, #1
 800be3e:	601a      	str	r2, [r3, #0]
 800be40:	e007      	b.n	800be52 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800be42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800be46:	3301      	adds	r3, #1
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	b25a      	sxtb	r2, r3
 800be4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800be52:	2301      	movs	r3, #1
 800be54:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800be56:	e001      	b.n	800be5c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800be58:	2300      	movs	r3, #0
 800be5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be5e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800be66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3740      	adds	r7, #64	; 0x40
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
	...

0800be74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b08c      	sub	sp, #48	; 0x30
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800be80:	2300      	movs	r3, #0
 800be82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800be88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d10a      	bne.n	800bea4 <xQueueReceive+0x30>
	__asm volatile
 800be8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	623b      	str	r3, [r7, #32]
}
 800bea0:	bf00      	nop
 800bea2:	e7fe      	b.n	800bea2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d103      	bne.n	800beb2 <xQueueReceive+0x3e>
 800beaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d101      	bne.n	800beb6 <xQueueReceive+0x42>
 800beb2:	2301      	movs	r3, #1
 800beb4:	e000      	b.n	800beb8 <xQueueReceive+0x44>
 800beb6:	2300      	movs	r3, #0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d10a      	bne.n	800bed2 <xQueueReceive+0x5e>
	__asm volatile
 800bebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec0:	f383 8811 	msr	BASEPRI, r3
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	61fb      	str	r3, [r7, #28]
}
 800bece:	bf00      	nop
 800bed0:	e7fe      	b.n	800bed0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bed2:	f001 f995 	bl	800d200 <xTaskGetSchedulerState>
 800bed6:	4603      	mov	r3, r0
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d102      	bne.n	800bee2 <xQueueReceive+0x6e>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d101      	bne.n	800bee6 <xQueueReceive+0x72>
 800bee2:	2301      	movs	r3, #1
 800bee4:	e000      	b.n	800bee8 <xQueueReceive+0x74>
 800bee6:	2300      	movs	r3, #0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d10a      	bne.n	800bf02 <xQueueReceive+0x8e>
	__asm volatile
 800beec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef0:	f383 8811 	msr	BASEPRI, r3
 800bef4:	f3bf 8f6f 	isb	sy
 800bef8:	f3bf 8f4f 	dsb	sy
 800befc:	61bb      	str	r3, [r7, #24]
}
 800befe:	bf00      	nop
 800bf00:	e7fe      	b.n	800bf00 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf02:	f002 f9c7 	bl	800e294 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d01f      	beq.n	800bf52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf12:	68b9      	ldr	r1, [r7, #8]
 800bf14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf16:	f000 fa1b 	bl	800c350 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1c:	1e5a      	subs	r2, r3, #1
 800bf1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00f      	beq.n	800bf4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2c:	3310      	adds	r3, #16
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f000 ff72 	bl	800ce18 <xTaskRemoveFromEventList>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d007      	beq.n	800bf4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bf3a:	4b3d      	ldr	r3, [pc, #244]	; (800c030 <xQueueReceive+0x1bc>)
 800bf3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf40:	601a      	str	r2, [r3, #0]
 800bf42:	f3bf 8f4f 	dsb	sy
 800bf46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bf4a:	f002 f9d3 	bl	800e2f4 <vPortExitCritical>
				return pdPASS;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e069      	b.n	800c026 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d103      	bne.n	800bf60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf58:	f002 f9cc 	bl	800e2f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	e062      	b.n	800c026 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d106      	bne.n	800bf74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf66:	f107 0310 	add.w	r3, r7, #16
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f000 ffde 	bl	800cf2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf70:	2301      	movs	r3, #1
 800bf72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf74:	f002 f9be 	bl	800e2f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf78:	f000 fd2a 	bl	800c9d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf7c:	f002 f98a 	bl	800e294 <vPortEnterCritical>
 800bf80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf86:	b25b      	sxtb	r3, r3
 800bf88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf8c:	d103      	bne.n	800bf96 <xQueueReceive+0x122>
 800bf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf90:	2200      	movs	r2, #0
 800bf92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf9c:	b25b      	sxtb	r3, r3
 800bf9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfa2:	d103      	bne.n	800bfac <xQueueReceive+0x138>
 800bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfac:	f002 f9a2 	bl	800e2f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bfb0:	1d3a      	adds	r2, r7, #4
 800bfb2:	f107 0310 	add.w	r3, r7, #16
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f000 ffcd 	bl	800cf58 <xTaskCheckForTimeOut>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d123      	bne.n	800c00c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bfc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfc6:	f000 fa3b 	bl	800c440 <prvIsQueueEmpty>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d017      	beq.n	800c000 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd2:	3324      	adds	r3, #36	; 0x24
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	4611      	mov	r1, r2
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f000 fecd 	bl	800cd78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bfde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfe0:	f000 f9dc 	bl	800c39c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bfe4:	f000 fd02 	bl	800c9ec <xTaskResumeAll>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d189      	bne.n	800bf02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bfee:	4b10      	ldr	r3, [pc, #64]	; (800c030 <xQueueReceive+0x1bc>)
 800bff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bff4:	601a      	str	r2, [r3, #0]
 800bff6:	f3bf 8f4f 	dsb	sy
 800bffa:	f3bf 8f6f 	isb	sy
 800bffe:	e780      	b.n	800bf02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c002:	f000 f9cb 	bl	800c39c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c006:	f000 fcf1 	bl	800c9ec <xTaskResumeAll>
 800c00a:	e77a      	b.n	800bf02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c00c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c00e:	f000 f9c5 	bl	800c39c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c012:	f000 fceb 	bl	800c9ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c018:	f000 fa12 	bl	800c440 <prvIsQueueEmpty>
 800c01c:	4603      	mov	r3, r0
 800c01e:	2b00      	cmp	r3, #0
 800c020:	f43f af6f 	beq.w	800bf02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c024:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c026:	4618      	mov	r0, r3
 800c028:	3730      	adds	r7, #48	; 0x30
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	e000ed04 	.word	0xe000ed04

0800c034 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b08e      	sub	sp, #56	; 0x38
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c03e:	2300      	movs	r3, #0
 800c040:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c046:	2300      	movs	r3, #0
 800c048:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d10a      	bne.n	800c066 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c054:	f383 8811 	msr	BASEPRI, r3
 800c058:	f3bf 8f6f 	isb	sy
 800c05c:	f3bf 8f4f 	dsb	sy
 800c060:	623b      	str	r3, [r7, #32]
}
 800c062:	bf00      	nop
 800c064:	e7fe      	b.n	800c064 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00a      	beq.n	800c084 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c072:	f383 8811 	msr	BASEPRI, r3
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	61fb      	str	r3, [r7, #28]
}
 800c080:	bf00      	nop
 800c082:	e7fe      	b.n	800c082 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c084:	f001 f8bc 	bl	800d200 <xTaskGetSchedulerState>
 800c088:	4603      	mov	r3, r0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d102      	bne.n	800c094 <xQueueSemaphoreTake+0x60>
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d101      	bne.n	800c098 <xQueueSemaphoreTake+0x64>
 800c094:	2301      	movs	r3, #1
 800c096:	e000      	b.n	800c09a <xQueueSemaphoreTake+0x66>
 800c098:	2300      	movs	r3, #0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d10a      	bne.n	800c0b4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a2:	f383 8811 	msr	BASEPRI, r3
 800c0a6:	f3bf 8f6f 	isb	sy
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	61bb      	str	r3, [r7, #24]
}
 800c0b0:	bf00      	nop
 800c0b2:	e7fe      	b.n	800c0b2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c0b4:	f002 f8ee 	bl	800e294 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d024      	beq.n	800c10e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c6:	1e5a      	subs	r2, r3, #1
 800c0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d104      	bne.n	800c0de <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c0d4:	f001 fa0a 	bl	800d4ec <pvTaskIncrementMutexHeldCount>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0dc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e0:	691b      	ldr	r3, [r3, #16]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00f      	beq.n	800c106 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e8:	3310      	adds	r3, #16
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f000 fe94 	bl	800ce18 <xTaskRemoveFromEventList>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d007      	beq.n	800c106 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c0f6:	4b54      	ldr	r3, [pc, #336]	; (800c248 <xQueueSemaphoreTake+0x214>)
 800c0f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0fc:	601a      	str	r2, [r3, #0]
 800c0fe:	f3bf 8f4f 	dsb	sy
 800c102:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c106:	f002 f8f5 	bl	800e2f4 <vPortExitCritical>
				return pdPASS;
 800c10a:	2301      	movs	r3, #1
 800c10c:	e097      	b.n	800c23e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d111      	bne.n	800c138 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c116:	2b00      	cmp	r3, #0
 800c118:	d00a      	beq.n	800c130 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11e:	f383 8811 	msr	BASEPRI, r3
 800c122:	f3bf 8f6f 	isb	sy
 800c126:	f3bf 8f4f 	dsb	sy
 800c12a:	617b      	str	r3, [r7, #20]
}
 800c12c:	bf00      	nop
 800c12e:	e7fe      	b.n	800c12e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c130:	f002 f8e0 	bl	800e2f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c134:	2300      	movs	r3, #0
 800c136:	e082      	b.n	800c23e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d106      	bne.n	800c14c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c13e:	f107 030c 	add.w	r3, r7, #12
 800c142:	4618      	mov	r0, r3
 800c144:	f000 fef2 	bl	800cf2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c148:	2301      	movs	r3, #1
 800c14a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c14c:	f002 f8d2 	bl	800e2f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c150:	f000 fc3e 	bl	800c9d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c154:	f002 f89e 	bl	800e294 <vPortEnterCritical>
 800c158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c15e:	b25b      	sxtb	r3, r3
 800c160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c164:	d103      	bne.n	800c16e <xQueueSemaphoreTake+0x13a>
 800c166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c168:	2200      	movs	r2, #0
 800c16a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c174:	b25b      	sxtb	r3, r3
 800c176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c17a:	d103      	bne.n	800c184 <xQueueSemaphoreTake+0x150>
 800c17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17e:	2200      	movs	r2, #0
 800c180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c184:	f002 f8b6 	bl	800e2f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c188:	463a      	mov	r2, r7
 800c18a:	f107 030c 	add.w	r3, r7, #12
 800c18e:	4611      	mov	r1, r2
 800c190:	4618      	mov	r0, r3
 800c192:	f000 fee1 	bl	800cf58 <xTaskCheckForTimeOut>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d132      	bne.n	800c202 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c19c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c19e:	f000 f94f 	bl	800c440 <prvIsQueueEmpty>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d026      	beq.n	800c1f6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d109      	bne.n	800c1c4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c1b0:	f002 f870 	bl	800e294 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b6:	689b      	ldr	r3, [r3, #8]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f001 f83f 	bl	800d23c <xTaskPriorityInherit>
 800c1be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c1c0:	f002 f898 	bl	800e2f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c6:	3324      	adds	r3, #36	; 0x24
 800c1c8:	683a      	ldr	r2, [r7, #0]
 800c1ca:	4611      	mov	r1, r2
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f000 fdd3 	bl	800cd78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c1d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1d4:	f000 f8e2 	bl	800c39c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c1d8:	f000 fc08 	bl	800c9ec <xTaskResumeAll>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f47f af68 	bne.w	800c0b4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c1e4:	4b18      	ldr	r3, [pc, #96]	; (800c248 <xQueueSemaphoreTake+0x214>)
 800c1e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1ea:	601a      	str	r2, [r3, #0]
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	f3bf 8f6f 	isb	sy
 800c1f4:	e75e      	b.n	800c0b4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c1f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1f8:	f000 f8d0 	bl	800c39c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c1fc:	f000 fbf6 	bl	800c9ec <xTaskResumeAll>
 800c200:	e758      	b.n	800c0b4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c204:	f000 f8ca 	bl	800c39c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c208:	f000 fbf0 	bl	800c9ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c20c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c20e:	f000 f917 	bl	800c440 <prvIsQueueEmpty>
 800c212:	4603      	mov	r3, r0
 800c214:	2b00      	cmp	r3, #0
 800c216:	f43f af4d 	beq.w	800c0b4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d00d      	beq.n	800c23c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c220:	f002 f838 	bl	800e294 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c224:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c226:	f000 f811 	bl	800c24c <prvGetDisinheritPriorityAfterTimeout>
 800c22a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22e:	689b      	ldr	r3, [r3, #8]
 800c230:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c232:	4618      	mov	r0, r3
 800c234:	f001 f8d8 	bl	800d3e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c238:	f002 f85c 	bl	800e2f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c23c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3738      	adds	r7, #56	; 0x38
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	e000ed04 	.word	0xe000ed04

0800c24c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c24c:	b480      	push	{r7}
 800c24e:	b085      	sub	sp, #20
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d006      	beq.n	800c26a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c266:	60fb      	str	r3, [r7, #12]
 800c268:	e001      	b.n	800c26e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c26a:	2300      	movs	r3, #0
 800c26c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c26e:	68fb      	ldr	r3, [r7, #12]
	}
 800c270:	4618      	mov	r0, r3
 800c272:	3714      	adds	r7, #20
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b086      	sub	sp, #24
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c288:	2300      	movs	r3, #0
 800c28a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c290:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c296:	2b00      	cmp	r3, #0
 800c298:	d10d      	bne.n	800c2b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d14d      	bne.n	800c33e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f001 f830 	bl	800d30c <xTaskPriorityDisinherit>
 800c2ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	609a      	str	r2, [r3, #8]
 800c2b4:	e043      	b.n	800c33e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d119      	bne.n	800c2f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6858      	ldr	r0, [r3, #4]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	68b9      	ldr	r1, [r7, #8]
 800c2c8:	f00d ffb8 	bl	801a23c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	685a      	ldr	r2, [r3, #4]
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d4:	441a      	add	r2, r3
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	685a      	ldr	r2, [r3, #4]
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	689b      	ldr	r3, [r3, #8]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d32b      	bcc.n	800c33e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	605a      	str	r2, [r3, #4]
 800c2ee:	e026      	b.n	800c33e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	68d8      	ldr	r0, [r3, #12]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	68b9      	ldr	r1, [r7, #8]
 800c2fc:	f00d ff9e 	bl	801a23c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	68da      	ldr	r2, [r3, #12]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c308:	425b      	negs	r3, r3
 800c30a:	441a      	add	r2, r3
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	68da      	ldr	r2, [r3, #12]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d207      	bcs.n	800c32c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	689a      	ldr	r2, [r3, #8]
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c324:	425b      	negs	r3, r3
 800c326:	441a      	add	r2, r3
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2b02      	cmp	r3, #2
 800c330:	d105      	bne.n	800c33e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d002      	beq.n	800c33e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	3b01      	subs	r3, #1
 800c33c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	1c5a      	adds	r2, r3, #1
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c346:	697b      	ldr	r3, [r7, #20]
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3718      	adds	r7, #24
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d018      	beq.n	800c394 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	68da      	ldr	r2, [r3, #12]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c36a:	441a      	add	r2, r3
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	68da      	ldr	r2, [r3, #12]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	429a      	cmp	r2, r3
 800c37a:	d303      	bcc.n	800c384 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681a      	ldr	r2, [r3, #0]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	68d9      	ldr	r1, [r3, #12]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38c:	461a      	mov	r2, r3
 800c38e:	6838      	ldr	r0, [r7, #0]
 800c390:	f00d ff54 	bl	801a23c <memcpy>
	}
}
 800c394:	bf00      	nop
 800c396:	3708      	adds	r7, #8
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c3a4:	f001 ff76 	bl	800e294 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c3b0:	e011      	b.n	800c3d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d012      	beq.n	800c3e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	3324      	adds	r3, #36	; 0x24
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f000 fd2a 	bl	800ce18 <xTaskRemoveFromEventList>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d001      	beq.n	800c3ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c3ca:	f000 fe27 	bl	800d01c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c3ce:	7bfb      	ldrb	r3, [r7, #15]
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c3d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	dce9      	bgt.n	800c3b2 <prvUnlockQueue+0x16>
 800c3de:	e000      	b.n	800c3e2 <prvUnlockQueue+0x46>
					break;
 800c3e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	22ff      	movs	r2, #255	; 0xff
 800c3e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c3ea:	f001 ff83 	bl	800e2f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c3ee:	f001 ff51 	bl	800e294 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c3fa:	e011      	b.n	800c420 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	691b      	ldr	r3, [r3, #16]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d012      	beq.n	800c42a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	3310      	adds	r3, #16
 800c408:	4618      	mov	r0, r3
 800c40a:	f000 fd05 	bl	800ce18 <xTaskRemoveFromEventList>
 800c40e:	4603      	mov	r3, r0
 800c410:	2b00      	cmp	r3, #0
 800c412:	d001      	beq.n	800c418 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c414:	f000 fe02 	bl	800d01c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c418:	7bbb      	ldrb	r3, [r7, #14]
 800c41a:	3b01      	subs	r3, #1
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c424:	2b00      	cmp	r3, #0
 800c426:	dce9      	bgt.n	800c3fc <prvUnlockQueue+0x60>
 800c428:	e000      	b.n	800c42c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c42a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	22ff      	movs	r2, #255	; 0xff
 800c430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c434:	f001 ff5e 	bl	800e2f4 <vPortExitCritical>
}
 800c438:	bf00      	nop
 800c43a:	3710      	adds	r7, #16
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c448:	f001 ff24 	bl	800e294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c450:	2b00      	cmp	r3, #0
 800c452:	d102      	bne.n	800c45a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c454:	2301      	movs	r3, #1
 800c456:	60fb      	str	r3, [r7, #12]
 800c458:	e001      	b.n	800c45e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c45a:	2300      	movs	r3, #0
 800c45c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c45e:	f001 ff49 	bl	800e2f4 <vPortExitCritical>

	return xReturn;
 800c462:	68fb      	ldr	r3, [r7, #12]
}
 800c464:	4618      	mov	r0, r3
 800c466:	3710      	adds	r7, #16
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c474:	f001 ff0e 	bl	800e294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c480:	429a      	cmp	r2, r3
 800c482:	d102      	bne.n	800c48a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c484:	2301      	movs	r3, #1
 800c486:	60fb      	str	r3, [r7, #12]
 800c488:	e001      	b.n	800c48e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c48a:	2300      	movs	r3, #0
 800c48c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c48e:	f001 ff31 	bl	800e2f4 <vPortExitCritical>

	return xReturn;
 800c492:	68fb      	ldr	r3, [r7, #12]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c49c:	b480      	push	{r7}
 800c49e:	b085      	sub	sp, #20
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	60fb      	str	r3, [r7, #12]
 800c4aa:	e014      	b.n	800c4d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c4ac:	4a0f      	ldr	r2, [pc, #60]	; (800c4ec <vQueueAddToRegistry+0x50>)
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d10b      	bne.n	800c4d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c4b8:	490c      	ldr	r1, [pc, #48]	; (800c4ec <vQueueAddToRegistry+0x50>)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	683a      	ldr	r2, [r7, #0]
 800c4be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c4c2:	4a0a      	ldr	r2, [pc, #40]	; (800c4ec <vQueueAddToRegistry+0x50>)
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	00db      	lsls	r3, r3, #3
 800c4c8:	4413      	add	r3, r2
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c4ce:	e006      	b.n	800c4de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	60fb      	str	r3, [r7, #12]
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2b07      	cmp	r3, #7
 800c4da:	d9e7      	bls.n	800c4ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c4dc:	bf00      	nop
 800c4de:	bf00      	nop
 800c4e0:	3714      	adds	r7, #20
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	20010e3c 	.word	0x20010e3c

0800c4f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b086      	sub	sp, #24
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	60f8      	str	r0, [r7, #12]
 800c4f8:	60b9      	str	r1, [r7, #8]
 800c4fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c500:	f001 fec8 	bl	800e294 <vPortEnterCritical>
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c50a:	b25b      	sxtb	r3, r3
 800c50c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c510:	d103      	bne.n	800c51a <vQueueWaitForMessageRestricted+0x2a>
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	2200      	movs	r2, #0
 800c516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c520:	b25b      	sxtb	r3, r3
 800c522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c526:	d103      	bne.n	800c530 <vQueueWaitForMessageRestricted+0x40>
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	2200      	movs	r2, #0
 800c52c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c530:	f001 fee0 	bl	800e2f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d106      	bne.n	800c54a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	3324      	adds	r3, #36	; 0x24
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	68b9      	ldr	r1, [r7, #8]
 800c544:	4618      	mov	r0, r3
 800c546:	f000 fc3b 	bl	800cdc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c54a:	6978      	ldr	r0, [r7, #20]
 800c54c:	f7ff ff26 	bl	800c39c <prvUnlockQueue>
	}
 800c550:	bf00      	nop
 800c552:	3718      	adds	r7, #24
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b08e      	sub	sp, #56	; 0x38
 800c55c:	af04      	add	r7, sp, #16
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]
 800c564:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d10a      	bne.n	800c582 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c570:	f383 8811 	msr	BASEPRI, r3
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	623b      	str	r3, [r7, #32]
}
 800c57e:	bf00      	nop
 800c580:	e7fe      	b.n	800c580 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c584:	2b00      	cmp	r3, #0
 800c586:	d10a      	bne.n	800c59e <xTaskCreateStatic+0x46>
	__asm volatile
 800c588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58c:	f383 8811 	msr	BASEPRI, r3
 800c590:	f3bf 8f6f 	isb	sy
 800c594:	f3bf 8f4f 	dsb	sy
 800c598:	61fb      	str	r3, [r7, #28]
}
 800c59a:	bf00      	nop
 800c59c:	e7fe      	b.n	800c59c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c59e:	235c      	movs	r3, #92	; 0x5c
 800c5a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	2b5c      	cmp	r3, #92	; 0x5c
 800c5a6:	d00a      	beq.n	800c5be <xTaskCreateStatic+0x66>
	__asm volatile
 800c5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ac:	f383 8811 	msr	BASEPRI, r3
 800c5b0:	f3bf 8f6f 	isb	sy
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	61bb      	str	r3, [r7, #24]
}
 800c5ba:	bf00      	nop
 800c5bc:	e7fe      	b.n	800c5bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c5be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d01e      	beq.n	800c604 <xTaskCreateStatic+0xac>
 800c5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d01b      	beq.n	800c604 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d8:	2202      	movs	r2, #2
 800c5da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c5de:	2300      	movs	r3, #0
 800c5e0:	9303      	str	r3, [sp, #12]
 800c5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e4:	9302      	str	r3, [sp, #8]
 800c5e6:	f107 0314 	add.w	r3, r7, #20
 800c5ea:	9301      	str	r3, [sp, #4]
 800c5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	68b9      	ldr	r1, [r7, #8]
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	f000 f850 	bl	800c69c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c5fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c5fe:	f000 f8dd 	bl	800c7bc <prvAddNewTaskToReadyList>
 800c602:	e001      	b.n	800c608 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c604:	2300      	movs	r3, #0
 800c606:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c608:	697b      	ldr	r3, [r7, #20]
	}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3728      	adds	r7, #40	; 0x28
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c612:	b580      	push	{r7, lr}
 800c614:	b08c      	sub	sp, #48	; 0x30
 800c616:	af04      	add	r7, sp, #16
 800c618:	60f8      	str	r0, [r7, #12]
 800c61a:	60b9      	str	r1, [r7, #8]
 800c61c:	603b      	str	r3, [r7, #0]
 800c61e:	4613      	mov	r3, r2
 800c620:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c622:	88fb      	ldrh	r3, [r7, #6]
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	4618      	mov	r0, r3
 800c628:	f001 ff56 	bl	800e4d8 <pvPortMalloc>
 800c62c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d00e      	beq.n	800c652 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c634:	205c      	movs	r0, #92	; 0x5c
 800c636:	f001 ff4f 	bl	800e4d8 <pvPortMalloc>
 800c63a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d003      	beq.n	800c64a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	697a      	ldr	r2, [r7, #20]
 800c646:	631a      	str	r2, [r3, #48]	; 0x30
 800c648:	e005      	b.n	800c656 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c64a:	6978      	ldr	r0, [r7, #20]
 800c64c:	f002 f810 	bl	800e670 <vPortFree>
 800c650:	e001      	b.n	800c656 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c652:	2300      	movs	r3, #0
 800c654:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d017      	beq.n	800c68c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	2200      	movs	r2, #0
 800c660:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c664:	88fa      	ldrh	r2, [r7, #6]
 800c666:	2300      	movs	r3, #0
 800c668:	9303      	str	r3, [sp, #12]
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	9302      	str	r3, [sp, #8]
 800c66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c670:	9301      	str	r3, [sp, #4]
 800c672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c674:	9300      	str	r3, [sp, #0]
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	68b9      	ldr	r1, [r7, #8]
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	f000 f80e 	bl	800c69c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c680:	69f8      	ldr	r0, [r7, #28]
 800c682:	f000 f89b 	bl	800c7bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c686:	2301      	movs	r3, #1
 800c688:	61bb      	str	r3, [r7, #24]
 800c68a:	e002      	b.n	800c692 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c68c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c690:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c692:	69bb      	ldr	r3, [r7, #24]
	}
 800c694:	4618      	mov	r0, r3
 800c696:	3720      	adds	r7, #32
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b088      	sub	sp, #32
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	607a      	str	r2, [r7, #4]
 800c6a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	009b      	lsls	r3, r3, #2
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	21a5      	movs	r1, #165	; 0xa5
 800c6b6:	f00d fde9 	bl	801a28c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	4413      	add	r3, r2
 800c6ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c6cc:	69bb      	ldr	r3, [r7, #24]
 800c6ce:	f023 0307 	bic.w	r3, r3, #7
 800c6d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c6d4:	69bb      	ldr	r3, [r7, #24]
 800c6d6:	f003 0307 	and.w	r3, r3, #7
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00a      	beq.n	800c6f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e2:	f383 8811 	msr	BASEPRI, r3
 800c6e6:	f3bf 8f6f 	isb	sy
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	617b      	str	r3, [r7, #20]
}
 800c6f0:	bf00      	nop
 800c6f2:	e7fe      	b.n	800c6f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d01f      	beq.n	800c73a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	61fb      	str	r3, [r7, #28]
 800c6fe:	e012      	b.n	800c726 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c700:	68ba      	ldr	r2, [r7, #8]
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	4413      	add	r3, r2
 800c706:	7819      	ldrb	r1, [r3, #0]
 800c708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c70a:	69fb      	ldr	r3, [r7, #28]
 800c70c:	4413      	add	r3, r2
 800c70e:	3334      	adds	r3, #52	; 0x34
 800c710:	460a      	mov	r2, r1
 800c712:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c714:	68ba      	ldr	r2, [r7, #8]
 800c716:	69fb      	ldr	r3, [r7, #28]
 800c718:	4413      	add	r3, r2
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d006      	beq.n	800c72e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c720:	69fb      	ldr	r3, [r7, #28]
 800c722:	3301      	adds	r3, #1
 800c724:	61fb      	str	r3, [r7, #28]
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	2b0f      	cmp	r3, #15
 800c72a:	d9e9      	bls.n	800c700 <prvInitialiseNewTask+0x64>
 800c72c:	e000      	b.n	800c730 <prvInitialiseNewTask+0x94>
			{
				break;
 800c72e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c732:	2200      	movs	r2, #0
 800c734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c738:	e003      	b.n	800c742 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73c:	2200      	movs	r2, #0
 800c73e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c744:	2b37      	cmp	r3, #55	; 0x37
 800c746:	d901      	bls.n	800c74c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c748:	2337      	movs	r3, #55	; 0x37
 800c74a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c750:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c756:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75a:	2200      	movs	r2, #0
 800c75c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c760:	3304      	adds	r3, #4
 800c762:	4618      	mov	r0, r3
 800c764:	f7fe ff64 	bl	800b630 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76a:	3318      	adds	r3, #24
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7fe ff5f 	bl	800b630 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c776:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c780:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c786:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78a:	2200      	movs	r2, #0
 800c78c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c790:	2200      	movs	r2, #0
 800c792:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c796:	683a      	ldr	r2, [r7, #0]
 800c798:	68f9      	ldr	r1, [r7, #12]
 800c79a:	69b8      	ldr	r0, [r7, #24]
 800c79c:	f001 fc4a 	bl	800e034 <pxPortInitialiseStack>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d002      	beq.n	800c7b2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7b2:	bf00      	nop
 800c7b4:	3720      	adds	r7, #32
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
	...

0800c7bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c7c4:	f001 fd66 	bl	800e294 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c7c8:	4b2d      	ldr	r3, [pc, #180]	; (800c880 <prvAddNewTaskToReadyList+0xc4>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	4a2c      	ldr	r2, [pc, #176]	; (800c880 <prvAddNewTaskToReadyList+0xc4>)
 800c7d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c7d2:	4b2c      	ldr	r3, [pc, #176]	; (800c884 <prvAddNewTaskToReadyList+0xc8>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d109      	bne.n	800c7ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c7da:	4a2a      	ldr	r2, [pc, #168]	; (800c884 <prvAddNewTaskToReadyList+0xc8>)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c7e0:	4b27      	ldr	r3, [pc, #156]	; (800c880 <prvAddNewTaskToReadyList+0xc4>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d110      	bne.n	800c80a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c7e8:	f000 fc3c 	bl	800d064 <prvInitialiseTaskLists>
 800c7ec:	e00d      	b.n	800c80a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c7ee:	4b26      	ldr	r3, [pc, #152]	; (800c888 <prvAddNewTaskToReadyList+0xcc>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d109      	bne.n	800c80a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c7f6:	4b23      	ldr	r3, [pc, #140]	; (800c884 <prvAddNewTaskToReadyList+0xc8>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c800:	429a      	cmp	r2, r3
 800c802:	d802      	bhi.n	800c80a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c804:	4a1f      	ldr	r2, [pc, #124]	; (800c884 <prvAddNewTaskToReadyList+0xc8>)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c80a:	4b20      	ldr	r3, [pc, #128]	; (800c88c <prvAddNewTaskToReadyList+0xd0>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	3301      	adds	r3, #1
 800c810:	4a1e      	ldr	r2, [pc, #120]	; (800c88c <prvAddNewTaskToReadyList+0xd0>)
 800c812:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c814:	4b1d      	ldr	r3, [pc, #116]	; (800c88c <prvAddNewTaskToReadyList+0xd0>)
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c820:	4b1b      	ldr	r3, [pc, #108]	; (800c890 <prvAddNewTaskToReadyList+0xd4>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	429a      	cmp	r2, r3
 800c826:	d903      	bls.n	800c830 <prvAddNewTaskToReadyList+0x74>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c82c:	4a18      	ldr	r2, [pc, #96]	; (800c890 <prvAddNewTaskToReadyList+0xd4>)
 800c82e:	6013      	str	r3, [r2, #0]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c834:	4613      	mov	r3, r2
 800c836:	009b      	lsls	r3, r3, #2
 800c838:	4413      	add	r3, r2
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	4a15      	ldr	r2, [pc, #84]	; (800c894 <prvAddNewTaskToReadyList+0xd8>)
 800c83e:	441a      	add	r2, r3
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	3304      	adds	r3, #4
 800c844:	4619      	mov	r1, r3
 800c846:	4610      	mov	r0, r2
 800c848:	f7fe feff 	bl	800b64a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c84c:	f001 fd52 	bl	800e2f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c850:	4b0d      	ldr	r3, [pc, #52]	; (800c888 <prvAddNewTaskToReadyList+0xcc>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00e      	beq.n	800c876 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c858:	4b0a      	ldr	r3, [pc, #40]	; (800c884 <prvAddNewTaskToReadyList+0xc8>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c862:	429a      	cmp	r2, r3
 800c864:	d207      	bcs.n	800c876 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c866:	4b0c      	ldr	r3, [pc, #48]	; (800c898 <prvAddNewTaskToReadyList+0xdc>)
 800c868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c86c:	601a      	str	r2, [r3, #0]
 800c86e:	f3bf 8f4f 	dsb	sy
 800c872:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c876:	bf00      	nop
 800c878:	3708      	adds	r7, #8
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	20008ca0 	.word	0x20008ca0
 800c884:	200087cc 	.word	0x200087cc
 800c888:	20008cac 	.word	0x20008cac
 800c88c:	20008cbc 	.word	0x20008cbc
 800c890:	20008ca8 	.word	0x20008ca8
 800c894:	200087d0 	.word	0x200087d0
 800c898:	e000ed04 	.word	0xe000ed04

0800c89c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d017      	beq.n	800c8de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c8ae:	4b13      	ldr	r3, [pc, #76]	; (800c8fc <vTaskDelay+0x60>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d00a      	beq.n	800c8cc <vTaskDelay+0x30>
	__asm volatile
 800c8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ba:	f383 8811 	msr	BASEPRI, r3
 800c8be:	f3bf 8f6f 	isb	sy
 800c8c2:	f3bf 8f4f 	dsb	sy
 800c8c6:	60bb      	str	r3, [r7, #8]
}
 800c8c8:	bf00      	nop
 800c8ca:	e7fe      	b.n	800c8ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c8cc:	f000 f880 	bl	800c9d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c8d0:	2100      	movs	r1, #0
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f001 f80c 	bl	800d8f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c8d8:	f000 f888 	bl	800c9ec <xTaskResumeAll>
 800c8dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d107      	bne.n	800c8f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c8e4:	4b06      	ldr	r3, [pc, #24]	; (800c900 <vTaskDelay+0x64>)
 800c8e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8ea:	601a      	str	r2, [r3, #0]
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c8f4:	bf00      	nop
 800c8f6:	3710      	adds	r7, #16
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	20008cc8 	.word	0x20008cc8
 800c900:	e000ed04 	.word	0xe000ed04

0800c904 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b08a      	sub	sp, #40	; 0x28
 800c908:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c90a:	2300      	movs	r3, #0
 800c90c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c90e:	2300      	movs	r3, #0
 800c910:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c912:	463a      	mov	r2, r7
 800c914:	1d39      	adds	r1, r7, #4
 800c916:	f107 0308 	add.w	r3, r7, #8
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fe fe34 	bl	800b588 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c920:	6839      	ldr	r1, [r7, #0]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	68ba      	ldr	r2, [r7, #8]
 800c926:	9202      	str	r2, [sp, #8]
 800c928:	9301      	str	r3, [sp, #4]
 800c92a:	2300      	movs	r3, #0
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	2300      	movs	r3, #0
 800c930:	460a      	mov	r2, r1
 800c932:	4921      	ldr	r1, [pc, #132]	; (800c9b8 <vTaskStartScheduler+0xb4>)
 800c934:	4821      	ldr	r0, [pc, #132]	; (800c9bc <vTaskStartScheduler+0xb8>)
 800c936:	f7ff fe0f 	bl	800c558 <xTaskCreateStatic>
 800c93a:	4603      	mov	r3, r0
 800c93c:	4a20      	ldr	r2, [pc, #128]	; (800c9c0 <vTaskStartScheduler+0xbc>)
 800c93e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c940:	4b1f      	ldr	r3, [pc, #124]	; (800c9c0 <vTaskStartScheduler+0xbc>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d002      	beq.n	800c94e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c948:	2301      	movs	r3, #1
 800c94a:	617b      	str	r3, [r7, #20]
 800c94c:	e001      	b.n	800c952 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c94e:	2300      	movs	r3, #0
 800c950:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	2b01      	cmp	r3, #1
 800c956:	d102      	bne.n	800c95e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c958:	f001 f81e 	bl	800d998 <xTimerCreateTimerTask>
 800c95c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d116      	bne.n	800c992 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c968:	f383 8811 	msr	BASEPRI, r3
 800c96c:	f3bf 8f6f 	isb	sy
 800c970:	f3bf 8f4f 	dsb	sy
 800c974:	613b      	str	r3, [r7, #16]
}
 800c976:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c978:	4b12      	ldr	r3, [pc, #72]	; (800c9c4 <vTaskStartScheduler+0xc0>)
 800c97a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c97e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c980:	4b11      	ldr	r3, [pc, #68]	; (800c9c8 <vTaskStartScheduler+0xc4>)
 800c982:	2201      	movs	r2, #1
 800c984:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c986:	4b11      	ldr	r3, [pc, #68]	; (800c9cc <vTaskStartScheduler+0xc8>)
 800c988:	2200      	movs	r2, #0
 800c98a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c98c:	f001 fbe0 	bl	800e150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c990:	e00e      	b.n	800c9b0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c998:	d10a      	bne.n	800c9b0 <vTaskStartScheduler+0xac>
	__asm volatile
 800c99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	60fb      	str	r3, [r7, #12]
}
 800c9ac:	bf00      	nop
 800c9ae:	e7fe      	b.n	800c9ae <vTaskStartScheduler+0xaa>
}
 800c9b0:	bf00      	nop
 800c9b2:	3718      	adds	r7, #24
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	0801e9b0 	.word	0x0801e9b0
 800c9bc:	0800d035 	.word	0x0800d035
 800c9c0:	20008cc4 	.word	0x20008cc4
 800c9c4:	20008cc0 	.word	0x20008cc0
 800c9c8:	20008cac 	.word	0x20008cac
 800c9cc:	20008ca4 	.word	0x20008ca4

0800c9d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c9d4:	4b04      	ldr	r3, [pc, #16]	; (800c9e8 <vTaskSuspendAll+0x18>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	4a03      	ldr	r2, [pc, #12]	; (800c9e8 <vTaskSuspendAll+0x18>)
 800c9dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c9de:	bf00      	nop
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr
 800c9e8:	20008cc8 	.word	0x20008cc8

0800c9ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c9fa:	4b42      	ldr	r3, [pc, #264]	; (800cb04 <xTaskResumeAll+0x118>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d10a      	bne.n	800ca18 <xTaskResumeAll+0x2c>
	__asm volatile
 800ca02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca06:	f383 8811 	msr	BASEPRI, r3
 800ca0a:	f3bf 8f6f 	isb	sy
 800ca0e:	f3bf 8f4f 	dsb	sy
 800ca12:	603b      	str	r3, [r7, #0]
}
 800ca14:	bf00      	nop
 800ca16:	e7fe      	b.n	800ca16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ca18:	f001 fc3c 	bl	800e294 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ca1c:	4b39      	ldr	r3, [pc, #228]	; (800cb04 <xTaskResumeAll+0x118>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	3b01      	subs	r3, #1
 800ca22:	4a38      	ldr	r2, [pc, #224]	; (800cb04 <xTaskResumeAll+0x118>)
 800ca24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca26:	4b37      	ldr	r3, [pc, #220]	; (800cb04 <xTaskResumeAll+0x118>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d162      	bne.n	800caf4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca2e:	4b36      	ldr	r3, [pc, #216]	; (800cb08 <xTaskResumeAll+0x11c>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d05e      	beq.n	800caf4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca36:	e02f      	b.n	800ca98 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca38:	4b34      	ldr	r3, [pc, #208]	; (800cb0c <xTaskResumeAll+0x120>)
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	3318      	adds	r3, #24
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7fe fe5d 	bl	800b704 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7fe fe58 	bl	800b704 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca58:	4b2d      	ldr	r3, [pc, #180]	; (800cb10 <xTaskResumeAll+0x124>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d903      	bls.n	800ca68 <xTaskResumeAll+0x7c>
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca64:	4a2a      	ldr	r2, [pc, #168]	; (800cb10 <xTaskResumeAll+0x124>)
 800ca66:	6013      	str	r3, [r2, #0]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	4413      	add	r3, r2
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	4a27      	ldr	r2, [pc, #156]	; (800cb14 <xTaskResumeAll+0x128>)
 800ca76:	441a      	add	r2, r3
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	3304      	adds	r3, #4
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	4610      	mov	r0, r2
 800ca80:	f7fe fde3 	bl	800b64a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca88:	4b23      	ldr	r3, [pc, #140]	; (800cb18 <xTaskResumeAll+0x12c>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d302      	bcc.n	800ca98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ca92:	4b22      	ldr	r3, [pc, #136]	; (800cb1c <xTaskResumeAll+0x130>)
 800ca94:	2201      	movs	r2, #1
 800ca96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca98:	4b1c      	ldr	r3, [pc, #112]	; (800cb0c <xTaskResumeAll+0x120>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d1cb      	bne.n	800ca38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d001      	beq.n	800caaa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800caa6:	f000 fb7b 	bl	800d1a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800caaa:	4b1d      	ldr	r3, [pc, #116]	; (800cb20 <xTaskResumeAll+0x134>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d010      	beq.n	800cad8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cab6:	f000 f847 	bl	800cb48 <xTaskIncrementTick>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d002      	beq.n	800cac6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cac0:	4b16      	ldr	r3, [pc, #88]	; (800cb1c <xTaskResumeAll+0x130>)
 800cac2:	2201      	movs	r2, #1
 800cac4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	3b01      	subs	r3, #1
 800caca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d1f1      	bne.n	800cab6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cad2:	4b13      	ldr	r3, [pc, #76]	; (800cb20 <xTaskResumeAll+0x134>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cad8:	4b10      	ldr	r3, [pc, #64]	; (800cb1c <xTaskResumeAll+0x130>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d009      	beq.n	800caf4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cae0:	2301      	movs	r3, #1
 800cae2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cae4:	4b0f      	ldr	r3, [pc, #60]	; (800cb24 <xTaskResumeAll+0x138>)
 800cae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caea:	601a      	str	r2, [r3, #0]
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800caf4:	f001 fbfe 	bl	800e2f4 <vPortExitCritical>

	return xAlreadyYielded;
 800caf8:	68bb      	ldr	r3, [r7, #8]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	20008cc8 	.word	0x20008cc8
 800cb08:	20008ca0 	.word	0x20008ca0
 800cb0c:	20008c60 	.word	0x20008c60
 800cb10:	20008ca8 	.word	0x20008ca8
 800cb14:	200087d0 	.word	0x200087d0
 800cb18:	200087cc 	.word	0x200087cc
 800cb1c:	20008cb4 	.word	0x20008cb4
 800cb20:	20008cb0 	.word	0x20008cb0
 800cb24:	e000ed04 	.word	0xe000ed04

0800cb28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cb2e:	4b05      	ldr	r3, [pc, #20]	; (800cb44 <xTaskGetTickCount+0x1c>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cb34:	687b      	ldr	r3, [r7, #4]
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	370c      	adds	r7, #12
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr
 800cb42:	bf00      	nop
 800cb44:	20008ca4 	.word	0x20008ca4

0800cb48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b086      	sub	sp, #24
 800cb4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb52:	4b4f      	ldr	r3, [pc, #316]	; (800cc90 <xTaskIncrementTick+0x148>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	f040 808f 	bne.w	800cc7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cb5c:	4b4d      	ldr	r3, [pc, #308]	; (800cc94 <xTaskIncrementTick+0x14c>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	3301      	adds	r3, #1
 800cb62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb64:	4a4b      	ldr	r2, [pc, #300]	; (800cc94 <xTaskIncrementTick+0x14c>)
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d120      	bne.n	800cbb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cb70:	4b49      	ldr	r3, [pc, #292]	; (800cc98 <xTaskIncrementTick+0x150>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d00a      	beq.n	800cb90 <xTaskIncrementTick+0x48>
	__asm volatile
 800cb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7e:	f383 8811 	msr	BASEPRI, r3
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	603b      	str	r3, [r7, #0]
}
 800cb8c:	bf00      	nop
 800cb8e:	e7fe      	b.n	800cb8e <xTaskIncrementTick+0x46>
 800cb90:	4b41      	ldr	r3, [pc, #260]	; (800cc98 <xTaskIncrementTick+0x150>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	60fb      	str	r3, [r7, #12]
 800cb96:	4b41      	ldr	r3, [pc, #260]	; (800cc9c <xTaskIncrementTick+0x154>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4a3f      	ldr	r2, [pc, #252]	; (800cc98 <xTaskIncrementTick+0x150>)
 800cb9c:	6013      	str	r3, [r2, #0]
 800cb9e:	4a3f      	ldr	r2, [pc, #252]	; (800cc9c <xTaskIncrementTick+0x154>)
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	6013      	str	r3, [r2, #0]
 800cba4:	4b3e      	ldr	r3, [pc, #248]	; (800cca0 <xTaskIncrementTick+0x158>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	3301      	adds	r3, #1
 800cbaa:	4a3d      	ldr	r2, [pc, #244]	; (800cca0 <xTaskIncrementTick+0x158>)
 800cbac:	6013      	str	r3, [r2, #0]
 800cbae:	f000 faf7 	bl	800d1a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cbb2:	4b3c      	ldr	r3, [pc, #240]	; (800cca4 <xTaskIncrementTick+0x15c>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	693a      	ldr	r2, [r7, #16]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d349      	bcc.n	800cc50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbbc:	4b36      	ldr	r3, [pc, #216]	; (800cc98 <xTaskIncrementTick+0x150>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d104      	bne.n	800cbd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbc6:	4b37      	ldr	r3, [pc, #220]	; (800cca4 <xTaskIncrementTick+0x15c>)
 800cbc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbcc:	601a      	str	r2, [r3, #0]
					break;
 800cbce:	e03f      	b.n	800cc50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbd0:	4b31      	ldr	r3, [pc, #196]	; (800cc98 <xTaskIncrementTick+0x150>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cbe0:	693a      	ldr	r2, [r7, #16]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d203      	bcs.n	800cbf0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cbe8:	4a2e      	ldr	r2, [pc, #184]	; (800cca4 <xTaskIncrementTick+0x15c>)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cbee:	e02f      	b.n	800cc50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	3304      	adds	r3, #4
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7fe fd85 	bl	800b704 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d004      	beq.n	800cc0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	3318      	adds	r3, #24
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7fe fd7c 	bl	800b704 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc10:	4b25      	ldr	r3, [pc, #148]	; (800cca8 <xTaskIncrementTick+0x160>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d903      	bls.n	800cc20 <xTaskIncrementTick+0xd8>
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc1c:	4a22      	ldr	r2, [pc, #136]	; (800cca8 <xTaskIncrementTick+0x160>)
 800cc1e:	6013      	str	r3, [r2, #0]
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc24:	4613      	mov	r3, r2
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	4413      	add	r3, r2
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	4a1f      	ldr	r2, [pc, #124]	; (800ccac <xTaskIncrementTick+0x164>)
 800cc2e:	441a      	add	r2, r3
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	3304      	adds	r3, #4
 800cc34:	4619      	mov	r1, r3
 800cc36:	4610      	mov	r0, r2
 800cc38:	f7fe fd07 	bl	800b64a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc40:	4b1b      	ldr	r3, [pc, #108]	; (800ccb0 <xTaskIncrementTick+0x168>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d3b8      	bcc.n	800cbbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc4e:	e7b5      	b.n	800cbbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cc50:	4b17      	ldr	r3, [pc, #92]	; (800ccb0 <xTaskIncrementTick+0x168>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc56:	4915      	ldr	r1, [pc, #84]	; (800ccac <xTaskIncrementTick+0x164>)
 800cc58:	4613      	mov	r3, r2
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	4413      	add	r3, r2
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	440b      	add	r3, r1
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d901      	bls.n	800cc6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cc6c:	4b11      	ldr	r3, [pc, #68]	; (800ccb4 <xTaskIncrementTick+0x16c>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d007      	beq.n	800cc84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cc74:	2301      	movs	r3, #1
 800cc76:	617b      	str	r3, [r7, #20]
 800cc78:	e004      	b.n	800cc84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cc7a:	4b0f      	ldr	r3, [pc, #60]	; (800ccb8 <xTaskIncrementTick+0x170>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	4a0d      	ldr	r2, [pc, #52]	; (800ccb8 <xTaskIncrementTick+0x170>)
 800cc82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cc84:	697b      	ldr	r3, [r7, #20]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3718      	adds	r7, #24
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	20008cc8 	.word	0x20008cc8
 800cc94:	20008ca4 	.word	0x20008ca4
 800cc98:	20008c58 	.word	0x20008c58
 800cc9c:	20008c5c 	.word	0x20008c5c
 800cca0:	20008cb8 	.word	0x20008cb8
 800cca4:	20008cc0 	.word	0x20008cc0
 800cca8:	20008ca8 	.word	0x20008ca8
 800ccac:	200087d0 	.word	0x200087d0
 800ccb0:	200087cc 	.word	0x200087cc
 800ccb4:	20008cb4 	.word	0x20008cb4
 800ccb8:	20008cb0 	.word	0x20008cb0

0800ccbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ccc2:	4b28      	ldr	r3, [pc, #160]	; (800cd64 <vTaskSwitchContext+0xa8>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d003      	beq.n	800ccd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ccca:	4b27      	ldr	r3, [pc, #156]	; (800cd68 <vTaskSwitchContext+0xac>)
 800cccc:	2201      	movs	r2, #1
 800ccce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ccd0:	e041      	b.n	800cd56 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ccd2:	4b25      	ldr	r3, [pc, #148]	; (800cd68 <vTaskSwitchContext+0xac>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccd8:	4b24      	ldr	r3, [pc, #144]	; (800cd6c <vTaskSwitchContext+0xb0>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	60fb      	str	r3, [r7, #12]
 800ccde:	e010      	b.n	800cd02 <vTaskSwitchContext+0x46>
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d10a      	bne.n	800ccfc <vTaskSwitchContext+0x40>
	__asm volatile
 800cce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccea:	f383 8811 	msr	BASEPRI, r3
 800ccee:	f3bf 8f6f 	isb	sy
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	607b      	str	r3, [r7, #4]
}
 800ccf8:	bf00      	nop
 800ccfa:	e7fe      	b.n	800ccfa <vTaskSwitchContext+0x3e>
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	3b01      	subs	r3, #1
 800cd00:	60fb      	str	r3, [r7, #12]
 800cd02:	491b      	ldr	r1, [pc, #108]	; (800cd70 <vTaskSwitchContext+0xb4>)
 800cd04:	68fa      	ldr	r2, [r7, #12]
 800cd06:	4613      	mov	r3, r2
 800cd08:	009b      	lsls	r3, r3, #2
 800cd0a:	4413      	add	r3, r2
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	440b      	add	r3, r1
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d0e4      	beq.n	800cce0 <vTaskSwitchContext+0x24>
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	4613      	mov	r3, r2
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	4413      	add	r3, r2
 800cd1e:	009b      	lsls	r3, r3, #2
 800cd20:	4a13      	ldr	r2, [pc, #76]	; (800cd70 <vTaskSwitchContext+0xb4>)
 800cd22:	4413      	add	r3, r2
 800cd24:	60bb      	str	r3, [r7, #8]
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	685a      	ldr	r2, [r3, #4]
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	605a      	str	r2, [r3, #4]
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	685a      	ldr	r2, [r3, #4]
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	3308      	adds	r3, #8
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d104      	bne.n	800cd46 <vTaskSwitchContext+0x8a>
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	685a      	ldr	r2, [r3, #4]
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	605a      	str	r2, [r3, #4]
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	68db      	ldr	r3, [r3, #12]
 800cd4c:	4a09      	ldr	r2, [pc, #36]	; (800cd74 <vTaskSwitchContext+0xb8>)
 800cd4e:	6013      	str	r3, [r2, #0]
 800cd50:	4a06      	ldr	r2, [pc, #24]	; (800cd6c <vTaskSwitchContext+0xb0>)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	6013      	str	r3, [r2, #0]
}
 800cd56:	bf00      	nop
 800cd58:	3714      	adds	r7, #20
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr
 800cd62:	bf00      	nop
 800cd64:	20008cc8 	.word	0x20008cc8
 800cd68:	20008cb4 	.word	0x20008cb4
 800cd6c:	20008ca8 	.word	0x20008ca8
 800cd70:	200087d0 	.word	0x200087d0
 800cd74:	200087cc 	.word	0x200087cc

0800cd78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10a      	bne.n	800cd9e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8c:	f383 8811 	msr	BASEPRI, r3
 800cd90:	f3bf 8f6f 	isb	sy
 800cd94:	f3bf 8f4f 	dsb	sy
 800cd98:	60fb      	str	r3, [r7, #12]
}
 800cd9a:	bf00      	nop
 800cd9c:	e7fe      	b.n	800cd9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd9e:	4b07      	ldr	r3, [pc, #28]	; (800cdbc <vTaskPlaceOnEventList+0x44>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	3318      	adds	r3, #24
 800cda4:	4619      	mov	r1, r3
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f7fe fc73 	bl	800b692 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cdac:	2101      	movs	r1, #1
 800cdae:	6838      	ldr	r0, [r7, #0]
 800cdb0:	f000 fd9e 	bl	800d8f0 <prvAddCurrentTaskToDelayedList>
}
 800cdb4:	bf00      	nop
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	200087cc 	.word	0x200087cc

0800cdc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b086      	sub	sp, #24
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10a      	bne.n	800cde8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd6:	f383 8811 	msr	BASEPRI, r3
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	617b      	str	r3, [r7, #20]
}
 800cde4:	bf00      	nop
 800cde6:	e7fe      	b.n	800cde6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cde8:	4b0a      	ldr	r3, [pc, #40]	; (800ce14 <vTaskPlaceOnEventListRestricted+0x54>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	3318      	adds	r3, #24
 800cdee:	4619      	mov	r1, r3
 800cdf0:	68f8      	ldr	r0, [r7, #12]
 800cdf2:	f7fe fc2a 	bl	800b64a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d002      	beq.n	800ce02 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cdfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce00:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ce02:	6879      	ldr	r1, [r7, #4]
 800ce04:	68b8      	ldr	r0, [r7, #8]
 800ce06:	f000 fd73 	bl	800d8f0 <prvAddCurrentTaskToDelayedList>
	}
 800ce0a:	bf00      	nop
 800ce0c:	3718      	adds	r7, #24
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	200087cc 	.word	0x200087cc

0800ce18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b086      	sub	sp, #24
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	68db      	ldr	r3, [r3, #12]
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d10a      	bne.n	800ce44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ce2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce32:	f383 8811 	msr	BASEPRI, r3
 800ce36:	f3bf 8f6f 	isb	sy
 800ce3a:	f3bf 8f4f 	dsb	sy
 800ce3e:	60fb      	str	r3, [r7, #12]
}
 800ce40:	bf00      	nop
 800ce42:	e7fe      	b.n	800ce42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	3318      	adds	r3, #24
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7fe fc5b 	bl	800b704 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce4e:	4b1e      	ldr	r3, [pc, #120]	; (800cec8 <xTaskRemoveFromEventList+0xb0>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d11d      	bne.n	800ce92 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	3304      	adds	r3, #4
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7fe fc52 	bl	800b704 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce64:	4b19      	ldr	r3, [pc, #100]	; (800cecc <xTaskRemoveFromEventList+0xb4>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d903      	bls.n	800ce74 <xTaskRemoveFromEventList+0x5c>
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce70:	4a16      	ldr	r2, [pc, #88]	; (800cecc <xTaskRemoveFromEventList+0xb4>)
 800ce72:	6013      	str	r3, [r2, #0]
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce78:	4613      	mov	r3, r2
 800ce7a:	009b      	lsls	r3, r3, #2
 800ce7c:	4413      	add	r3, r2
 800ce7e:	009b      	lsls	r3, r3, #2
 800ce80:	4a13      	ldr	r2, [pc, #76]	; (800ced0 <xTaskRemoveFromEventList+0xb8>)
 800ce82:	441a      	add	r2, r3
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	3304      	adds	r3, #4
 800ce88:	4619      	mov	r1, r3
 800ce8a:	4610      	mov	r0, r2
 800ce8c:	f7fe fbdd 	bl	800b64a <vListInsertEnd>
 800ce90:	e005      	b.n	800ce9e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	3318      	adds	r3, #24
 800ce96:	4619      	mov	r1, r3
 800ce98:	480e      	ldr	r0, [pc, #56]	; (800ced4 <xTaskRemoveFromEventList+0xbc>)
 800ce9a:	f7fe fbd6 	bl	800b64a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea2:	4b0d      	ldr	r3, [pc, #52]	; (800ced8 <xTaskRemoveFromEventList+0xc0>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d905      	bls.n	800ceb8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ceac:	2301      	movs	r3, #1
 800ceae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ceb0:	4b0a      	ldr	r3, [pc, #40]	; (800cedc <xTaskRemoveFromEventList+0xc4>)
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	601a      	str	r2, [r3, #0]
 800ceb6:	e001      	b.n	800cebc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cebc:	697b      	ldr	r3, [r7, #20]
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3718      	adds	r7, #24
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	20008cc8 	.word	0x20008cc8
 800cecc:	20008ca8 	.word	0x20008ca8
 800ced0:	200087d0 	.word	0x200087d0
 800ced4:	20008c60 	.word	0x20008c60
 800ced8:	200087cc 	.word	0x200087cc
 800cedc:	20008cb4 	.word	0x20008cb4

0800cee0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d10a      	bne.n	800cf04 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800ceee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef2:	f383 8811 	msr	BASEPRI, r3
 800cef6:	f3bf 8f6f 	isb	sy
 800cefa:	f3bf 8f4f 	dsb	sy
 800cefe:	60fb      	str	r3, [r7, #12]
}
 800cf00:	bf00      	nop
 800cf02:	e7fe      	b.n	800cf02 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800cf04:	f001 f9c6 	bl	800e294 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf08:	4b06      	ldr	r3, [pc, #24]	; (800cf24 <vTaskSetTimeOutState+0x44>)
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800cf10:	4b05      	ldr	r3, [pc, #20]	; (800cf28 <vTaskSetTimeOutState+0x48>)
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800cf18:	f001 f9ec 	bl	800e2f4 <vPortExitCritical>
}
 800cf1c:	bf00      	nop
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	20008cb8 	.word	0x20008cb8
 800cf28:	20008ca4 	.word	0x20008ca4

0800cf2c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b083      	sub	sp, #12
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf34:	4b06      	ldr	r3, [pc, #24]	; (800cf50 <vTaskInternalSetTimeOutState+0x24>)
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf3c:	4b05      	ldr	r3, [pc, #20]	; (800cf54 <vTaskInternalSetTimeOutState+0x28>)
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	605a      	str	r2, [r3, #4]
}
 800cf44:	bf00      	nop
 800cf46:	370c      	adds	r7, #12
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr
 800cf50:	20008cb8 	.word	0x20008cb8
 800cf54:	20008ca4 	.word	0x20008ca4

0800cf58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b088      	sub	sp, #32
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d10a      	bne.n	800cf7e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cf68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf6c:	f383 8811 	msr	BASEPRI, r3
 800cf70:	f3bf 8f6f 	isb	sy
 800cf74:	f3bf 8f4f 	dsb	sy
 800cf78:	613b      	str	r3, [r7, #16]
}
 800cf7a:	bf00      	nop
 800cf7c:	e7fe      	b.n	800cf7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d10a      	bne.n	800cf9a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cf84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf88:	f383 8811 	msr	BASEPRI, r3
 800cf8c:	f3bf 8f6f 	isb	sy
 800cf90:	f3bf 8f4f 	dsb	sy
 800cf94:	60fb      	str	r3, [r7, #12]
}
 800cf96:	bf00      	nop
 800cf98:	e7fe      	b.n	800cf98 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cf9a:	f001 f97b 	bl	800e294 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cf9e:	4b1d      	ldr	r3, [pc, #116]	; (800d014 <xTaskCheckForTimeOut+0xbc>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	685b      	ldr	r3, [r3, #4]
 800cfa8:	69ba      	ldr	r2, [r7, #24]
 800cfaa:	1ad3      	subs	r3, r2, r3
 800cfac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfb6:	d102      	bne.n	800cfbe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	61fb      	str	r3, [r7, #28]
 800cfbc:	e023      	b.n	800d006 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	4b15      	ldr	r3, [pc, #84]	; (800d018 <xTaskCheckForTimeOut+0xc0>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d007      	beq.n	800cfda <xTaskCheckForTimeOut+0x82>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	69ba      	ldr	r2, [r7, #24]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d302      	bcc.n	800cfda <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	61fb      	str	r3, [r7, #28]
 800cfd8:	e015      	b.n	800d006 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	697a      	ldr	r2, [r7, #20]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d20b      	bcs.n	800cffc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	1ad2      	subs	r2, r2, r3
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f7ff ff9b 	bl	800cf2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cff6:	2300      	movs	r3, #0
 800cff8:	61fb      	str	r3, [r7, #28]
 800cffa:	e004      	b.n	800d006 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	2200      	movs	r2, #0
 800d000:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d002:	2301      	movs	r3, #1
 800d004:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d006:	f001 f975 	bl	800e2f4 <vPortExitCritical>

	return xReturn;
 800d00a:	69fb      	ldr	r3, [r7, #28]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3720      	adds	r7, #32
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	20008ca4 	.word	0x20008ca4
 800d018:	20008cb8 	.word	0x20008cb8

0800d01c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d01c:	b480      	push	{r7}
 800d01e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d020:	4b03      	ldr	r3, [pc, #12]	; (800d030 <vTaskMissedYield+0x14>)
 800d022:	2201      	movs	r2, #1
 800d024:	601a      	str	r2, [r3, #0]
}
 800d026:	bf00      	nop
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr
 800d030:	20008cb4 	.word	0x20008cb4

0800d034 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b082      	sub	sp, #8
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d03c:	f000 f852 	bl	800d0e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d040:	4b06      	ldr	r3, [pc, #24]	; (800d05c <prvIdleTask+0x28>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	2b01      	cmp	r3, #1
 800d046:	d9f9      	bls.n	800d03c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d048:	4b05      	ldr	r3, [pc, #20]	; (800d060 <prvIdleTask+0x2c>)
 800d04a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d04e:	601a      	str	r2, [r3, #0]
 800d050:	f3bf 8f4f 	dsb	sy
 800d054:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d058:	e7f0      	b.n	800d03c <prvIdleTask+0x8>
 800d05a:	bf00      	nop
 800d05c:	200087d0 	.word	0x200087d0
 800d060:	e000ed04 	.word	0xe000ed04

0800d064 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d06a:	2300      	movs	r3, #0
 800d06c:	607b      	str	r3, [r7, #4]
 800d06e:	e00c      	b.n	800d08a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	4613      	mov	r3, r2
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	4413      	add	r3, r2
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	4a12      	ldr	r2, [pc, #72]	; (800d0c4 <prvInitialiseTaskLists+0x60>)
 800d07c:	4413      	add	r3, r2
 800d07e:	4618      	mov	r0, r3
 800d080:	f7fe fab6 	bl	800b5f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	3301      	adds	r3, #1
 800d088:	607b      	str	r3, [r7, #4]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2b37      	cmp	r3, #55	; 0x37
 800d08e:	d9ef      	bls.n	800d070 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d090:	480d      	ldr	r0, [pc, #52]	; (800d0c8 <prvInitialiseTaskLists+0x64>)
 800d092:	f7fe faad 	bl	800b5f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d096:	480d      	ldr	r0, [pc, #52]	; (800d0cc <prvInitialiseTaskLists+0x68>)
 800d098:	f7fe faaa 	bl	800b5f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d09c:	480c      	ldr	r0, [pc, #48]	; (800d0d0 <prvInitialiseTaskLists+0x6c>)
 800d09e:	f7fe faa7 	bl	800b5f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d0a2:	480c      	ldr	r0, [pc, #48]	; (800d0d4 <prvInitialiseTaskLists+0x70>)
 800d0a4:	f7fe faa4 	bl	800b5f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d0a8:	480b      	ldr	r0, [pc, #44]	; (800d0d8 <prvInitialiseTaskLists+0x74>)
 800d0aa:	f7fe faa1 	bl	800b5f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d0ae:	4b0b      	ldr	r3, [pc, #44]	; (800d0dc <prvInitialiseTaskLists+0x78>)
 800d0b0:	4a05      	ldr	r2, [pc, #20]	; (800d0c8 <prvInitialiseTaskLists+0x64>)
 800d0b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d0b4:	4b0a      	ldr	r3, [pc, #40]	; (800d0e0 <prvInitialiseTaskLists+0x7c>)
 800d0b6:	4a05      	ldr	r2, [pc, #20]	; (800d0cc <prvInitialiseTaskLists+0x68>)
 800d0b8:	601a      	str	r2, [r3, #0]
}
 800d0ba:	bf00      	nop
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	200087d0 	.word	0x200087d0
 800d0c8:	20008c30 	.word	0x20008c30
 800d0cc:	20008c44 	.word	0x20008c44
 800d0d0:	20008c60 	.word	0x20008c60
 800d0d4:	20008c74 	.word	0x20008c74
 800d0d8:	20008c8c 	.word	0x20008c8c
 800d0dc:	20008c58 	.word	0x20008c58
 800d0e0:	20008c5c 	.word	0x20008c5c

0800d0e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0ea:	e019      	b.n	800d120 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d0ec:	f001 f8d2 	bl	800e294 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0f0:	4b10      	ldr	r3, [pc, #64]	; (800d134 <prvCheckTasksWaitingTermination+0x50>)
 800d0f2:	68db      	ldr	r3, [r3, #12]
 800d0f4:	68db      	ldr	r3, [r3, #12]
 800d0f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	3304      	adds	r3, #4
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7fe fb01 	bl	800b704 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d102:	4b0d      	ldr	r3, [pc, #52]	; (800d138 <prvCheckTasksWaitingTermination+0x54>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	3b01      	subs	r3, #1
 800d108:	4a0b      	ldr	r2, [pc, #44]	; (800d138 <prvCheckTasksWaitingTermination+0x54>)
 800d10a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d10c:	4b0b      	ldr	r3, [pc, #44]	; (800d13c <prvCheckTasksWaitingTermination+0x58>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	3b01      	subs	r3, #1
 800d112:	4a0a      	ldr	r2, [pc, #40]	; (800d13c <prvCheckTasksWaitingTermination+0x58>)
 800d114:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d116:	f001 f8ed 	bl	800e2f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 f810 	bl	800d140 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d120:	4b06      	ldr	r3, [pc, #24]	; (800d13c <prvCheckTasksWaitingTermination+0x58>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d1e1      	bne.n	800d0ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d128:	bf00      	nop
 800d12a:	bf00      	nop
 800d12c:	3708      	adds	r7, #8
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	20008c74 	.word	0x20008c74
 800d138:	20008ca0 	.word	0x20008ca0
 800d13c:	20008c88 	.word	0x20008c88

0800d140 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d108      	bne.n	800d164 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d156:	4618      	mov	r0, r3
 800d158:	f001 fa8a 	bl	800e670 <vPortFree>
				vPortFree( pxTCB );
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f001 fa87 	bl	800e670 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d162:	e018      	b.n	800d196 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d103      	bne.n	800d176 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f001 fa7e 	bl	800e670 <vPortFree>
	}
 800d174:	e00f      	b.n	800d196 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d17c:	2b02      	cmp	r3, #2
 800d17e:	d00a      	beq.n	800d196 <prvDeleteTCB+0x56>
	__asm volatile
 800d180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d184:	f383 8811 	msr	BASEPRI, r3
 800d188:	f3bf 8f6f 	isb	sy
 800d18c:	f3bf 8f4f 	dsb	sy
 800d190:	60fb      	str	r3, [r7, #12]
}
 800d192:	bf00      	nop
 800d194:	e7fe      	b.n	800d194 <prvDeleteTCB+0x54>
	}
 800d196:	bf00      	nop
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
	...

0800d1a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b083      	sub	sp, #12
 800d1a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1a6:	4b0c      	ldr	r3, [pc, #48]	; (800d1d8 <prvResetNextTaskUnblockTime+0x38>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d104      	bne.n	800d1ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1b0:	4b0a      	ldr	r3, [pc, #40]	; (800d1dc <prvResetNextTaskUnblockTime+0x3c>)
 800d1b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d1b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d1b8:	e008      	b.n	800d1cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1ba:	4b07      	ldr	r3, [pc, #28]	; (800d1d8 <prvResetNextTaskUnblockTime+0x38>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	68db      	ldr	r3, [r3, #12]
 800d1c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	4a04      	ldr	r2, [pc, #16]	; (800d1dc <prvResetNextTaskUnblockTime+0x3c>)
 800d1ca:	6013      	str	r3, [r2, #0]
}
 800d1cc:	bf00      	nop
 800d1ce:	370c      	adds	r7, #12
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr
 800d1d8:	20008c58 	.word	0x20008c58
 800d1dc:	20008cc0 	.word	0x20008cc0

0800d1e0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b083      	sub	sp, #12
 800d1e4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d1e6:	4b05      	ldr	r3, [pc, #20]	; (800d1fc <xTaskGetCurrentTaskHandle+0x1c>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d1ec:	687b      	ldr	r3, [r7, #4]
	}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	370c      	adds	r7, #12
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr
 800d1fa:	bf00      	nop
 800d1fc:	200087cc 	.word	0x200087cc

0800d200 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d200:	b480      	push	{r7}
 800d202:	b083      	sub	sp, #12
 800d204:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d206:	4b0b      	ldr	r3, [pc, #44]	; (800d234 <xTaskGetSchedulerState+0x34>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d102      	bne.n	800d214 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d20e:	2301      	movs	r3, #1
 800d210:	607b      	str	r3, [r7, #4]
 800d212:	e008      	b.n	800d226 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d214:	4b08      	ldr	r3, [pc, #32]	; (800d238 <xTaskGetSchedulerState+0x38>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d102      	bne.n	800d222 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d21c:	2302      	movs	r3, #2
 800d21e:	607b      	str	r3, [r7, #4]
 800d220:	e001      	b.n	800d226 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d222:	2300      	movs	r3, #0
 800d224:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d226:	687b      	ldr	r3, [r7, #4]
	}
 800d228:	4618      	mov	r0, r3
 800d22a:	370c      	adds	r7, #12
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr
 800d234:	20008cac 	.word	0x20008cac
 800d238:	20008cc8 	.word	0x20008cc8

0800d23c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d248:	2300      	movs	r3, #0
 800d24a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d051      	beq.n	800d2f6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d256:	4b2a      	ldr	r3, [pc, #168]	; (800d300 <xTaskPriorityInherit+0xc4>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d241      	bcs.n	800d2e4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	699b      	ldr	r3, [r3, #24]
 800d264:	2b00      	cmp	r3, #0
 800d266:	db06      	blt.n	800d276 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d268:	4b25      	ldr	r3, [pc, #148]	; (800d300 <xTaskPriorityInherit+0xc4>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d26e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	6959      	ldr	r1, [r3, #20]
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d27e:	4613      	mov	r3, r2
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	4413      	add	r3, r2
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	4a1f      	ldr	r2, [pc, #124]	; (800d304 <xTaskPriorityInherit+0xc8>)
 800d288:	4413      	add	r3, r2
 800d28a:	4299      	cmp	r1, r3
 800d28c:	d122      	bne.n	800d2d4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	3304      	adds	r3, #4
 800d292:	4618      	mov	r0, r3
 800d294:	f7fe fa36 	bl	800b704 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d298:	4b19      	ldr	r3, [pc, #100]	; (800d300 <xTaskPriorityInherit+0xc4>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2a6:	4b18      	ldr	r3, [pc, #96]	; (800d308 <xTaskPriorityInherit+0xcc>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d903      	bls.n	800d2b6 <xTaskPriorityInherit+0x7a>
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b2:	4a15      	ldr	r2, [pc, #84]	; (800d308 <xTaskPriorityInherit+0xcc>)
 800d2b4:	6013      	str	r3, [r2, #0]
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ba:	4613      	mov	r3, r2
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	4413      	add	r3, r2
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	4a10      	ldr	r2, [pc, #64]	; (800d304 <xTaskPriorityInherit+0xc8>)
 800d2c4:	441a      	add	r2, r3
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	3304      	adds	r3, #4
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	4610      	mov	r0, r2
 800d2ce:	f7fe f9bc 	bl	800b64a <vListInsertEnd>
 800d2d2:	e004      	b.n	800d2de <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2d4:	4b0a      	ldr	r3, [pc, #40]	; (800d300 <xTaskPriorityInherit+0xc4>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	60fb      	str	r3, [r7, #12]
 800d2e2:	e008      	b.n	800d2f6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2e8:	4b05      	ldr	r3, [pc, #20]	; (800d300 <xTaskPriorityInherit+0xc4>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d201      	bcs.n	800d2f6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
	}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3710      	adds	r7, #16
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	200087cc 	.word	0x200087cc
 800d304:	200087d0 	.word	0x200087d0
 800d308:	20008ca8 	.word	0x20008ca8

0800d30c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b086      	sub	sp, #24
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d318:	2300      	movs	r3, #0
 800d31a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d056      	beq.n	800d3d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d322:	4b2e      	ldr	r3, [pc, #184]	; (800d3dc <xTaskPriorityDisinherit+0xd0>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	693a      	ldr	r2, [r7, #16]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d00a      	beq.n	800d342 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d330:	f383 8811 	msr	BASEPRI, r3
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	60fb      	str	r3, [r7, #12]
}
 800d33e:	bf00      	nop
 800d340:	e7fe      	b.n	800d340 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d346:	2b00      	cmp	r3, #0
 800d348:	d10a      	bne.n	800d360 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d34e:	f383 8811 	msr	BASEPRI, r3
 800d352:	f3bf 8f6f 	isb	sy
 800d356:	f3bf 8f4f 	dsb	sy
 800d35a:	60bb      	str	r3, [r7, #8]
}
 800d35c:	bf00      	nop
 800d35e:	e7fe      	b.n	800d35e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d364:	1e5a      	subs	r2, r3, #1
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d372:	429a      	cmp	r2, r3
 800d374:	d02c      	beq.n	800d3d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d128      	bne.n	800d3d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	3304      	adds	r3, #4
 800d382:	4618      	mov	r0, r3
 800d384:	f7fe f9be 	bl	800b704 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d394:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3a0:	4b0f      	ldr	r3, [pc, #60]	; (800d3e0 <xTaskPriorityDisinherit+0xd4>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d903      	bls.n	800d3b0 <xTaskPriorityDisinherit+0xa4>
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ac:	4a0c      	ldr	r2, [pc, #48]	; (800d3e0 <xTaskPriorityDisinherit+0xd4>)
 800d3ae:	6013      	str	r3, [r2, #0]
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3b4:	4613      	mov	r3, r2
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	4413      	add	r3, r2
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	4a09      	ldr	r2, [pc, #36]	; (800d3e4 <xTaskPriorityDisinherit+0xd8>)
 800d3be:	441a      	add	r2, r3
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	3304      	adds	r3, #4
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	4610      	mov	r0, r2
 800d3c8:	f7fe f93f 	bl	800b64a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3d0:	697b      	ldr	r3, [r7, #20]
	}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3718      	adds	r7, #24
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	200087cc 	.word	0x200087cc
 800d3e0:	20008ca8 	.word	0x20008ca8
 800d3e4:	200087d0 	.word	0x200087d0

0800d3e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b088      	sub	sp, #32
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d06a      	beq.n	800d4d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d400:	69bb      	ldr	r3, [r7, #24]
 800d402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d404:	2b00      	cmp	r3, #0
 800d406:	d10a      	bne.n	800d41e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d40c:	f383 8811 	msr	BASEPRI, r3
 800d410:	f3bf 8f6f 	isb	sy
 800d414:	f3bf 8f4f 	dsb	sy
 800d418:	60fb      	str	r3, [r7, #12]
}
 800d41a:	bf00      	nop
 800d41c:	e7fe      	b.n	800d41c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d422:	683a      	ldr	r2, [r7, #0]
 800d424:	429a      	cmp	r2, r3
 800d426:	d902      	bls.n	800d42e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	61fb      	str	r3, [r7, #28]
 800d42c:	e002      	b.n	800d434 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d42e:	69bb      	ldr	r3, [r7, #24]
 800d430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d432:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d434:	69bb      	ldr	r3, [r7, #24]
 800d436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d438:	69fa      	ldr	r2, [r7, #28]
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d04b      	beq.n	800d4d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d43e:	69bb      	ldr	r3, [r7, #24]
 800d440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d442:	697a      	ldr	r2, [r7, #20]
 800d444:	429a      	cmp	r2, r3
 800d446:	d146      	bne.n	800d4d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d448:	4b25      	ldr	r3, [pc, #148]	; (800d4e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	69ba      	ldr	r2, [r7, #24]
 800d44e:	429a      	cmp	r2, r3
 800d450:	d10a      	bne.n	800d468 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d456:	f383 8811 	msr	BASEPRI, r3
 800d45a:	f3bf 8f6f 	isb	sy
 800d45e:	f3bf 8f4f 	dsb	sy
 800d462:	60bb      	str	r3, [r7, #8]
}
 800d464:	bf00      	nop
 800d466:	e7fe      	b.n	800d466 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d468:	69bb      	ldr	r3, [r7, #24]
 800d46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d46c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d46e:	69bb      	ldr	r3, [r7, #24]
 800d470:	69fa      	ldr	r2, [r7, #28]
 800d472:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d474:	69bb      	ldr	r3, [r7, #24]
 800d476:	699b      	ldr	r3, [r3, #24]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	db04      	blt.n	800d486 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d47c:	69fb      	ldr	r3, [r7, #28]
 800d47e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d482:	69bb      	ldr	r3, [r7, #24]
 800d484:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d486:	69bb      	ldr	r3, [r7, #24]
 800d488:	6959      	ldr	r1, [r3, #20]
 800d48a:	693a      	ldr	r2, [r7, #16]
 800d48c:	4613      	mov	r3, r2
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	4413      	add	r3, r2
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	4a13      	ldr	r2, [pc, #76]	; (800d4e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d496:	4413      	add	r3, r2
 800d498:	4299      	cmp	r1, r3
 800d49a:	d11c      	bne.n	800d4d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d49c:	69bb      	ldr	r3, [r7, #24]
 800d49e:	3304      	adds	r3, #4
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7fe f92f 	bl	800b704 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4aa:	4b0f      	ldr	r3, [pc, #60]	; (800d4e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d903      	bls.n	800d4ba <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b6:	4a0c      	ldr	r2, [pc, #48]	; (800d4e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d4b8:	6013      	str	r3, [r2, #0]
 800d4ba:	69bb      	ldr	r3, [r7, #24]
 800d4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4be:	4613      	mov	r3, r2
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	4413      	add	r3, r2
 800d4c4:	009b      	lsls	r3, r3, #2
 800d4c6:	4a07      	ldr	r2, [pc, #28]	; (800d4e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d4c8:	441a      	add	r2, r3
 800d4ca:	69bb      	ldr	r3, [r7, #24]
 800d4cc:	3304      	adds	r3, #4
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	4610      	mov	r0, r2
 800d4d2:	f7fe f8ba 	bl	800b64a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d4d6:	bf00      	nop
 800d4d8:	3720      	adds	r7, #32
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	200087cc 	.word	0x200087cc
 800d4e4:	200087d0 	.word	0x200087d0
 800d4e8:	20008ca8 	.word	0x20008ca8

0800d4ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d4ec:	b480      	push	{r7}
 800d4ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d4f0:	4b07      	ldr	r3, [pc, #28]	; (800d510 <pvTaskIncrementMutexHeldCount+0x24>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d004      	beq.n	800d502 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d4f8:	4b05      	ldr	r3, [pc, #20]	; (800d510 <pvTaskIncrementMutexHeldCount+0x24>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4fe:	3201      	adds	r2, #1
 800d500:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d502:	4b03      	ldr	r3, [pc, #12]	; (800d510 <pvTaskIncrementMutexHeldCount+0x24>)
 800d504:	681b      	ldr	r3, [r3, #0]
	}
 800d506:	4618      	mov	r0, r3
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr
 800d510:	200087cc 	.word	0x200087cc

0800d514 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d514:	b580      	push	{r7, lr}
 800d516:	b086      	sub	sp, #24
 800d518:	af00      	add	r7, sp, #0
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	607a      	str	r2, [r7, #4]
 800d520:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d522:	f000 feb7 	bl	800e294 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d526:	4b26      	ldr	r3, [pc, #152]	; (800d5c0 <xTaskNotifyWait+0xac>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	2b02      	cmp	r3, #2
 800d532:	d01a      	beq.n	800d56a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d534:	4b22      	ldr	r3, [pc, #136]	; (800d5c0 <xTaskNotifyWait+0xac>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d53a:	68fa      	ldr	r2, [r7, #12]
 800d53c:	43d2      	mvns	r2, r2
 800d53e:	400a      	ands	r2, r1
 800d540:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d542:	4b1f      	ldr	r3, [pc, #124]	; (800d5c0 <xTaskNotifyWait+0xac>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	2201      	movs	r2, #1
 800d548:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d00b      	beq.n	800d56a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d552:	2101      	movs	r1, #1
 800d554:	6838      	ldr	r0, [r7, #0]
 800d556:	f000 f9cb 	bl	800d8f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d55a:	4b1a      	ldr	r3, [pc, #104]	; (800d5c4 <xTaskNotifyWait+0xb0>)
 800d55c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d560:	601a      	str	r2, [r3, #0]
 800d562:	f3bf 8f4f 	dsb	sy
 800d566:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d56a:	f000 fec3 	bl	800e2f4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d56e:	f000 fe91 	bl	800e294 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d004      	beq.n	800d582 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d578:	4b11      	ldr	r3, [pc, #68]	; (800d5c0 <xTaskNotifyWait+0xac>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d582:	4b0f      	ldr	r3, [pc, #60]	; (800d5c0 <xTaskNotifyWait+0xac>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	2b02      	cmp	r3, #2
 800d58e:	d002      	beq.n	800d596 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d590:	2300      	movs	r3, #0
 800d592:	617b      	str	r3, [r7, #20]
 800d594:	e008      	b.n	800d5a8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d596:	4b0a      	ldr	r3, [pc, #40]	; (800d5c0 <xTaskNotifyWait+0xac>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d59c:	68ba      	ldr	r2, [r7, #8]
 800d59e:	43d2      	mvns	r2, r2
 800d5a0:	400a      	ands	r2, r1
 800d5a2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d5a8:	4b05      	ldr	r3, [pc, #20]	; (800d5c0 <xTaskNotifyWait+0xac>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800d5b2:	f000 fe9f 	bl	800e2f4 <vPortExitCritical>

		return xReturn;
 800d5b6:	697b      	ldr	r3, [r7, #20]
	}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3718      	adds	r7, #24
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	200087cc 	.word	0x200087cc
 800d5c4:	e000ed04 	.word	0xe000ed04

0800d5c8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b08a      	sub	sp, #40	; 0x28
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	603b      	str	r3, [r7, #0]
 800d5d4:	4613      	mov	r3, r2
 800d5d6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d10a      	bne.n	800d5f8 <xTaskGenericNotify+0x30>
	__asm volatile
 800d5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e6:	f383 8811 	msr	BASEPRI, r3
 800d5ea:	f3bf 8f6f 	isb	sy
 800d5ee:	f3bf 8f4f 	dsb	sy
 800d5f2:	61bb      	str	r3, [r7, #24]
}
 800d5f4:	bf00      	nop
 800d5f6:	e7fe      	b.n	800d5f6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d5fc:	f000 fe4a 	bl	800e294 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d003      	beq.n	800d60e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d606:	6a3b      	ldr	r3, [r7, #32]
 800d608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d60e:	6a3b      	ldr	r3, [r7, #32]
 800d610:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d614:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d616:	6a3b      	ldr	r3, [r7, #32]
 800d618:	2202      	movs	r2, #2
 800d61a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800d61e:	79fb      	ldrb	r3, [r7, #7]
 800d620:	2b04      	cmp	r3, #4
 800d622:	d828      	bhi.n	800d676 <xTaskGenericNotify+0xae>
 800d624:	a201      	add	r2, pc, #4	; (adr r2, 800d62c <xTaskGenericNotify+0x64>)
 800d626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d62a:	bf00      	nop
 800d62c:	0800d697 	.word	0x0800d697
 800d630:	0800d641 	.word	0x0800d641
 800d634:	0800d64f 	.word	0x0800d64f
 800d638:	0800d65b 	.word	0x0800d65b
 800d63c:	0800d663 	.word	0x0800d663
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d640:	6a3b      	ldr	r3, [r7, #32]
 800d642:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	431a      	orrs	r2, r3
 800d648:	6a3b      	ldr	r3, [r7, #32]
 800d64a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d64c:	e026      	b.n	800d69c <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d64e:	6a3b      	ldr	r3, [r7, #32]
 800d650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d652:	1c5a      	adds	r2, r3, #1
 800d654:	6a3b      	ldr	r3, [r7, #32]
 800d656:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d658:	e020      	b.n	800d69c <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d65a:	6a3b      	ldr	r3, [r7, #32]
 800d65c:	68ba      	ldr	r2, [r7, #8]
 800d65e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d660:	e01c      	b.n	800d69c <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d662:	7ffb      	ldrb	r3, [r7, #31]
 800d664:	2b02      	cmp	r3, #2
 800d666:	d003      	beq.n	800d670 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d668:	6a3b      	ldr	r3, [r7, #32]
 800d66a:	68ba      	ldr	r2, [r7, #8]
 800d66c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d66e:	e015      	b.n	800d69c <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800d670:	2300      	movs	r3, #0
 800d672:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800d674:	e012      	b.n	800d69c <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d676:	6a3b      	ldr	r3, [r7, #32]
 800d678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d67a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d67e:	d00c      	beq.n	800d69a <xTaskGenericNotify+0xd2>
	__asm volatile
 800d680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	617b      	str	r3, [r7, #20]
}
 800d692:	bf00      	nop
 800d694:	e7fe      	b.n	800d694 <xTaskGenericNotify+0xcc>
					break;
 800d696:	bf00      	nop
 800d698:	e000      	b.n	800d69c <xTaskGenericNotify+0xd4>

					break;
 800d69a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d69c:	7ffb      	ldrb	r3, [r7, #31]
 800d69e:	2b01      	cmp	r3, #1
 800d6a0:	d13a      	bne.n	800d718 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6a2:	6a3b      	ldr	r3, [r7, #32]
 800d6a4:	3304      	adds	r3, #4
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7fe f82c 	bl	800b704 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800d6ac:	6a3b      	ldr	r3, [r7, #32]
 800d6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b0:	4b1d      	ldr	r3, [pc, #116]	; (800d728 <xTaskGenericNotify+0x160>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d903      	bls.n	800d6c0 <xTaskGenericNotify+0xf8>
 800d6b8:	6a3b      	ldr	r3, [r7, #32]
 800d6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6bc:	4a1a      	ldr	r2, [pc, #104]	; (800d728 <xTaskGenericNotify+0x160>)
 800d6be:	6013      	str	r3, [r2, #0]
 800d6c0:	6a3b      	ldr	r3, [r7, #32]
 800d6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6c4:	4613      	mov	r3, r2
 800d6c6:	009b      	lsls	r3, r3, #2
 800d6c8:	4413      	add	r3, r2
 800d6ca:	009b      	lsls	r3, r3, #2
 800d6cc:	4a17      	ldr	r2, [pc, #92]	; (800d72c <xTaskGenericNotify+0x164>)
 800d6ce:	441a      	add	r2, r3
 800d6d0:	6a3b      	ldr	r3, [r7, #32]
 800d6d2:	3304      	adds	r3, #4
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	4610      	mov	r0, r2
 800d6d8:	f7fd ffb7 	bl	800b64a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d6dc:	6a3b      	ldr	r3, [r7, #32]
 800d6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d00a      	beq.n	800d6fa <xTaskGenericNotify+0x132>
	__asm volatile
 800d6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e8:	f383 8811 	msr	BASEPRI, r3
 800d6ec:	f3bf 8f6f 	isb	sy
 800d6f0:	f3bf 8f4f 	dsb	sy
 800d6f4:	613b      	str	r3, [r7, #16]
}
 800d6f6:	bf00      	nop
 800d6f8:	e7fe      	b.n	800d6f8 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d6fa:	6a3b      	ldr	r3, [r7, #32]
 800d6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6fe:	4b0c      	ldr	r3, [pc, #48]	; (800d730 <xTaskGenericNotify+0x168>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d704:	429a      	cmp	r2, r3
 800d706:	d907      	bls.n	800d718 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800d708:	4b0a      	ldr	r3, [pc, #40]	; (800d734 <xTaskGenericNotify+0x16c>)
 800d70a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d70e:	601a      	str	r2, [r3, #0]
 800d710:	f3bf 8f4f 	dsb	sy
 800d714:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d718:	f000 fdec 	bl	800e2f4 <vPortExitCritical>

		return xReturn;
 800d71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d71e:	4618      	mov	r0, r3
 800d720:	3728      	adds	r7, #40	; 0x28
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	20008ca8 	.word	0x20008ca8
 800d72c:	200087d0 	.word	0x200087d0
 800d730:	200087cc 	.word	0x200087cc
 800d734:	e000ed04 	.word	0xe000ed04

0800d738 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b08e      	sub	sp, #56	; 0x38
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	603b      	str	r3, [r7, #0]
 800d744:	4613      	mov	r3, r2
 800d746:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800d748:	2301      	movs	r3, #1
 800d74a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d10a      	bne.n	800d768 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800d752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d756:	f383 8811 	msr	BASEPRI, r3
 800d75a:	f3bf 8f6f 	isb	sy
 800d75e:	f3bf 8f4f 	dsb	sy
 800d762:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d764:	bf00      	nop
 800d766:	e7fe      	b.n	800d766 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d768:	f000 fe76 	bl	800e458 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800d770:	f3ef 8211 	mrs	r2, BASEPRI
 800d774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d778:	f383 8811 	msr	BASEPRI, r3
 800d77c:	f3bf 8f6f 	isb	sy
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	623a      	str	r2, [r7, #32]
 800d786:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800d788:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d78a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d003      	beq.n	800d79a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d7a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a6:	2202      	movs	r2, #2
 800d7a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800d7ac:	79fb      	ldrb	r3, [r7, #7]
 800d7ae:	2b04      	cmp	r3, #4
 800d7b0:	d828      	bhi.n	800d804 <xTaskGenericNotifyFromISR+0xcc>
 800d7b2:	a201      	add	r2, pc, #4	; (adr r2, 800d7b8 <xTaskGenericNotifyFromISR+0x80>)
 800d7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7b8:	0800d825 	.word	0x0800d825
 800d7bc:	0800d7cd 	.word	0x0800d7cd
 800d7c0:	0800d7db 	.word	0x0800d7db
 800d7c4:	0800d7e7 	.word	0x0800d7e7
 800d7c8:	0800d7ef 	.word	0x0800d7ef
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	431a      	orrs	r2, r3
 800d7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d7d8:	e027      	b.n	800d82a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7de:	1c5a      	adds	r2, r3, #1
 800d7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d7e4:	e021      	b.n	800d82a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e8:	68ba      	ldr	r2, [r7, #8]
 800d7ea:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d7ec:	e01d      	b.n	800d82a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d7ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d7f2:	2b02      	cmp	r3, #2
 800d7f4:	d003      	beq.n	800d7fe <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f8:	68ba      	ldr	r2, [r7, #8]
 800d7fa:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d7fc:	e015      	b.n	800d82a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800d7fe:	2300      	movs	r3, #0
 800d800:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800d802:	e012      	b.n	800d82a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d80c:	d00c      	beq.n	800d828 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800d80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d812:	f383 8811 	msr	BASEPRI, r3
 800d816:	f3bf 8f6f 	isb	sy
 800d81a:	f3bf 8f4f 	dsb	sy
 800d81e:	61bb      	str	r3, [r7, #24]
}
 800d820:	bf00      	nop
 800d822:	e7fe      	b.n	800d822 <xTaskGenericNotifyFromISR+0xea>
					break;
 800d824:	bf00      	nop
 800d826:	e000      	b.n	800d82a <xTaskGenericNotifyFromISR+0xf2>
					break;
 800d828:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d82a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d146      	bne.n	800d8c0 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d836:	2b00      	cmp	r3, #0
 800d838:	d00a      	beq.n	800d850 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800d83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d83e:	f383 8811 	msr	BASEPRI, r3
 800d842:	f3bf 8f6f 	isb	sy
 800d846:	f3bf 8f4f 	dsb	sy
 800d84a:	617b      	str	r3, [r7, #20]
}
 800d84c:	bf00      	nop
 800d84e:	e7fe      	b.n	800d84e <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d850:	4b21      	ldr	r3, [pc, #132]	; (800d8d8 <xTaskGenericNotifyFromISR+0x1a0>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d11d      	bne.n	800d894 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d85a:	3304      	adds	r3, #4
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7fd ff51 	bl	800b704 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d866:	4b1d      	ldr	r3, [pc, #116]	; (800d8dc <xTaskGenericNotifyFromISR+0x1a4>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d903      	bls.n	800d876 <xTaskGenericNotifyFromISR+0x13e>
 800d86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d872:	4a1a      	ldr	r2, [pc, #104]	; (800d8dc <xTaskGenericNotifyFromISR+0x1a4>)
 800d874:	6013      	str	r3, [r2, #0]
 800d876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d87a:	4613      	mov	r3, r2
 800d87c:	009b      	lsls	r3, r3, #2
 800d87e:	4413      	add	r3, r2
 800d880:	009b      	lsls	r3, r3, #2
 800d882:	4a17      	ldr	r2, [pc, #92]	; (800d8e0 <xTaskGenericNotifyFromISR+0x1a8>)
 800d884:	441a      	add	r2, r3
 800d886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d888:	3304      	adds	r3, #4
 800d88a:	4619      	mov	r1, r3
 800d88c:	4610      	mov	r0, r2
 800d88e:	f7fd fedc 	bl	800b64a <vListInsertEnd>
 800d892:	e005      	b.n	800d8a0 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d896:	3318      	adds	r3, #24
 800d898:	4619      	mov	r1, r3
 800d89a:	4812      	ldr	r0, [pc, #72]	; (800d8e4 <xTaskGenericNotifyFromISR+0x1ac>)
 800d89c:	f7fd fed5 	bl	800b64a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8a4:	4b10      	ldr	r3, [pc, #64]	; (800d8e8 <xTaskGenericNotifyFromISR+0x1b0>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d908      	bls.n	800d8c0 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d8ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d002      	beq.n	800d8ba <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d8b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d8ba:	4b0c      	ldr	r3, [pc, #48]	; (800d8ec <xTaskGenericNotifyFromISR+0x1b4>)
 800d8bc:	2201      	movs	r2, #1
 800d8be:	601a      	str	r2, [r3, #0]
 800d8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c2:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	f383 8811 	msr	BASEPRI, r3
}
 800d8ca:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d8cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3738      	adds	r7, #56	; 0x38
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	20008cc8 	.word	0x20008cc8
 800d8dc:	20008ca8 	.word	0x20008ca8
 800d8e0:	200087d0 	.word	0x200087d0
 800d8e4:	20008c60 	.word	0x20008c60
 800d8e8:	200087cc 	.word	0x200087cc
 800d8ec:	20008cb4 	.word	0x20008cb4

0800d8f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d8fa:	4b21      	ldr	r3, [pc, #132]	; (800d980 <prvAddCurrentTaskToDelayedList+0x90>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d900:	4b20      	ldr	r3, [pc, #128]	; (800d984 <prvAddCurrentTaskToDelayedList+0x94>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	3304      	adds	r3, #4
 800d906:	4618      	mov	r0, r3
 800d908:	f7fd fefc 	bl	800b704 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d912:	d10a      	bne.n	800d92a <prvAddCurrentTaskToDelayedList+0x3a>
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d007      	beq.n	800d92a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d91a:	4b1a      	ldr	r3, [pc, #104]	; (800d984 <prvAddCurrentTaskToDelayedList+0x94>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	3304      	adds	r3, #4
 800d920:	4619      	mov	r1, r3
 800d922:	4819      	ldr	r0, [pc, #100]	; (800d988 <prvAddCurrentTaskToDelayedList+0x98>)
 800d924:	f7fd fe91 	bl	800b64a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d928:	e026      	b.n	800d978 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d92a:	68fa      	ldr	r2, [r7, #12]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	4413      	add	r3, r2
 800d930:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d932:	4b14      	ldr	r3, [pc, #80]	; (800d984 <prvAddCurrentTaskToDelayedList+0x94>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	68ba      	ldr	r2, [r7, #8]
 800d938:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d93a:	68ba      	ldr	r2, [r7, #8]
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	429a      	cmp	r2, r3
 800d940:	d209      	bcs.n	800d956 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d942:	4b12      	ldr	r3, [pc, #72]	; (800d98c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	4b0f      	ldr	r3, [pc, #60]	; (800d984 <prvAddCurrentTaskToDelayedList+0x94>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	3304      	adds	r3, #4
 800d94c:	4619      	mov	r1, r3
 800d94e:	4610      	mov	r0, r2
 800d950:	f7fd fe9f 	bl	800b692 <vListInsert>
}
 800d954:	e010      	b.n	800d978 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d956:	4b0e      	ldr	r3, [pc, #56]	; (800d990 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	4b0a      	ldr	r3, [pc, #40]	; (800d984 <prvAddCurrentTaskToDelayedList+0x94>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	3304      	adds	r3, #4
 800d960:	4619      	mov	r1, r3
 800d962:	4610      	mov	r0, r2
 800d964:	f7fd fe95 	bl	800b692 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d968:	4b0a      	ldr	r3, [pc, #40]	; (800d994 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	68ba      	ldr	r2, [r7, #8]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d202      	bcs.n	800d978 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d972:	4a08      	ldr	r2, [pc, #32]	; (800d994 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	6013      	str	r3, [r2, #0]
}
 800d978:	bf00      	nop
 800d97a:	3710      	adds	r7, #16
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	20008ca4 	.word	0x20008ca4
 800d984:	200087cc 	.word	0x200087cc
 800d988:	20008c8c 	.word	0x20008c8c
 800d98c:	20008c5c 	.word	0x20008c5c
 800d990:	20008c58 	.word	0x20008c58
 800d994:	20008cc0 	.word	0x20008cc0

0800d998 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b08a      	sub	sp, #40	; 0x28
 800d99c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d9a2:	f000 fb07 	bl	800dfb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d9a6:	4b1c      	ldr	r3, [pc, #112]	; (800da18 <xTimerCreateTimerTask+0x80>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d021      	beq.n	800d9f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d9b6:	1d3a      	adds	r2, r7, #4
 800d9b8:	f107 0108 	add.w	r1, r7, #8
 800d9bc:	f107 030c 	add.w	r3, r7, #12
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7fd fdfb 	bl	800b5bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d9c6:	6879      	ldr	r1, [r7, #4]
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	9202      	str	r2, [sp, #8]
 800d9ce:	9301      	str	r3, [sp, #4]
 800d9d0:	2302      	movs	r3, #2
 800d9d2:	9300      	str	r3, [sp, #0]
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	460a      	mov	r2, r1
 800d9d8:	4910      	ldr	r1, [pc, #64]	; (800da1c <xTimerCreateTimerTask+0x84>)
 800d9da:	4811      	ldr	r0, [pc, #68]	; (800da20 <xTimerCreateTimerTask+0x88>)
 800d9dc:	f7fe fdbc 	bl	800c558 <xTaskCreateStatic>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	4a10      	ldr	r2, [pc, #64]	; (800da24 <xTimerCreateTimerTask+0x8c>)
 800d9e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d9e6:	4b0f      	ldr	r3, [pc, #60]	; (800da24 <xTimerCreateTimerTask+0x8c>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d001      	beq.n	800d9f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d10a      	bne.n	800da0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9fc:	f383 8811 	msr	BASEPRI, r3
 800da00:	f3bf 8f6f 	isb	sy
 800da04:	f3bf 8f4f 	dsb	sy
 800da08:	613b      	str	r3, [r7, #16]
}
 800da0a:	bf00      	nop
 800da0c:	e7fe      	b.n	800da0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800da0e:	697b      	ldr	r3, [r7, #20]
}
 800da10:	4618      	mov	r0, r3
 800da12:	3718      	adds	r7, #24
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	20008cfc 	.word	0x20008cfc
 800da1c:	0801e9b8 	.word	0x0801e9b8
 800da20:	0800db5d 	.word	0x0800db5d
 800da24:	20008d00 	.word	0x20008d00

0800da28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b08a      	sub	sp, #40	; 0x28
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	607a      	str	r2, [r7, #4]
 800da34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800da36:	2300      	movs	r3, #0
 800da38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d10a      	bne.n	800da56 <xTimerGenericCommand+0x2e>
	__asm volatile
 800da40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da44:	f383 8811 	msr	BASEPRI, r3
 800da48:	f3bf 8f6f 	isb	sy
 800da4c:	f3bf 8f4f 	dsb	sy
 800da50:	623b      	str	r3, [r7, #32]
}
 800da52:	bf00      	nop
 800da54:	e7fe      	b.n	800da54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800da56:	4b1a      	ldr	r3, [pc, #104]	; (800dac0 <xTimerGenericCommand+0x98>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d02a      	beq.n	800dab4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	2b05      	cmp	r3, #5
 800da6e:	dc18      	bgt.n	800daa2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800da70:	f7ff fbc6 	bl	800d200 <xTaskGetSchedulerState>
 800da74:	4603      	mov	r3, r0
 800da76:	2b02      	cmp	r3, #2
 800da78:	d109      	bne.n	800da8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800da7a:	4b11      	ldr	r3, [pc, #68]	; (800dac0 <xTimerGenericCommand+0x98>)
 800da7c:	6818      	ldr	r0, [r3, #0]
 800da7e:	f107 0110 	add.w	r1, r7, #16
 800da82:	2300      	movs	r3, #0
 800da84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da86:	f7fe f85b 	bl	800bb40 <xQueueGenericSend>
 800da8a:	6278      	str	r0, [r7, #36]	; 0x24
 800da8c:	e012      	b.n	800dab4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800da8e:	4b0c      	ldr	r3, [pc, #48]	; (800dac0 <xTimerGenericCommand+0x98>)
 800da90:	6818      	ldr	r0, [r3, #0]
 800da92:	f107 0110 	add.w	r1, r7, #16
 800da96:	2300      	movs	r3, #0
 800da98:	2200      	movs	r2, #0
 800da9a:	f7fe f851 	bl	800bb40 <xQueueGenericSend>
 800da9e:	6278      	str	r0, [r7, #36]	; 0x24
 800daa0:	e008      	b.n	800dab4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800daa2:	4b07      	ldr	r3, [pc, #28]	; (800dac0 <xTimerGenericCommand+0x98>)
 800daa4:	6818      	ldr	r0, [r3, #0]
 800daa6:	f107 0110 	add.w	r1, r7, #16
 800daaa:	2300      	movs	r3, #0
 800daac:	683a      	ldr	r2, [r7, #0]
 800daae:	f7fe f945 	bl	800bd3c <xQueueGenericSendFromISR>
 800dab2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3728      	adds	r7, #40	; 0x28
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	20008cfc 	.word	0x20008cfc

0800dac4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b088      	sub	sp, #32
 800dac8:	af02      	add	r7, sp, #8
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dace:	4b22      	ldr	r3, [pc, #136]	; (800db58 <prvProcessExpiredTimer+0x94>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	68db      	ldr	r3, [r3, #12]
 800dad4:	68db      	ldr	r3, [r3, #12]
 800dad6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	3304      	adds	r3, #4
 800dadc:	4618      	mov	r0, r3
 800dade:	f7fd fe11 	bl	800b704 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dae8:	f003 0304 	and.w	r3, r3, #4
 800daec:	2b00      	cmp	r3, #0
 800daee:	d022      	beq.n	800db36 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	699a      	ldr	r2, [r3, #24]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	18d1      	adds	r1, r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	683a      	ldr	r2, [r7, #0]
 800dafc:	6978      	ldr	r0, [r7, #20]
 800dafe:	f000 f8d1 	bl	800dca4 <prvInsertTimerInActiveList>
 800db02:	4603      	mov	r3, r0
 800db04:	2b00      	cmp	r3, #0
 800db06:	d01f      	beq.n	800db48 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db08:	2300      	movs	r3, #0
 800db0a:	9300      	str	r3, [sp, #0]
 800db0c:	2300      	movs	r3, #0
 800db0e:	687a      	ldr	r2, [r7, #4]
 800db10:	2100      	movs	r1, #0
 800db12:	6978      	ldr	r0, [r7, #20]
 800db14:	f7ff ff88 	bl	800da28 <xTimerGenericCommand>
 800db18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d113      	bne.n	800db48 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800db20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db24:	f383 8811 	msr	BASEPRI, r3
 800db28:	f3bf 8f6f 	isb	sy
 800db2c:	f3bf 8f4f 	dsb	sy
 800db30:	60fb      	str	r3, [r7, #12]
}
 800db32:	bf00      	nop
 800db34:	e7fe      	b.n	800db34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db3c:	f023 0301 	bic.w	r3, r3, #1
 800db40:	b2da      	uxtb	r2, r3
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	6a1b      	ldr	r3, [r3, #32]
 800db4c:	6978      	ldr	r0, [r7, #20]
 800db4e:	4798      	blx	r3
}
 800db50:	bf00      	nop
 800db52:	3718      	adds	r7, #24
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	20008cf4 	.word	0x20008cf4

0800db5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db64:	f107 0308 	add.w	r3, r7, #8
 800db68:	4618      	mov	r0, r3
 800db6a:	f000 f857 	bl	800dc1c <prvGetNextExpireTime>
 800db6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	4619      	mov	r1, r3
 800db74:	68f8      	ldr	r0, [r7, #12]
 800db76:	f000 f803 	bl	800db80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800db7a:	f000 f8d5 	bl	800dd28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db7e:	e7f1      	b.n	800db64 <prvTimerTask+0x8>

0800db80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b084      	sub	sp, #16
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800db8a:	f7fe ff21 	bl	800c9d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db8e:	f107 0308 	add.w	r3, r7, #8
 800db92:	4618      	mov	r0, r3
 800db94:	f000 f866 	bl	800dc64 <prvSampleTimeNow>
 800db98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d130      	bne.n	800dc02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d10a      	bne.n	800dbbc <prvProcessTimerOrBlockTask+0x3c>
 800dba6:	687a      	ldr	r2, [r7, #4]
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d806      	bhi.n	800dbbc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dbae:	f7fe ff1d 	bl	800c9ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dbb2:	68f9      	ldr	r1, [r7, #12]
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f7ff ff85 	bl	800dac4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dbba:	e024      	b.n	800dc06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d008      	beq.n	800dbd4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dbc2:	4b13      	ldr	r3, [pc, #76]	; (800dc10 <prvProcessTimerOrBlockTask+0x90>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d101      	bne.n	800dbd0 <prvProcessTimerOrBlockTask+0x50>
 800dbcc:	2301      	movs	r3, #1
 800dbce:	e000      	b.n	800dbd2 <prvProcessTimerOrBlockTask+0x52>
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dbd4:	4b0f      	ldr	r3, [pc, #60]	; (800dc14 <prvProcessTimerOrBlockTask+0x94>)
 800dbd6:	6818      	ldr	r0, [r3, #0]
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	1ad3      	subs	r3, r2, r3
 800dbde:	683a      	ldr	r2, [r7, #0]
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	f7fe fc85 	bl	800c4f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dbe6:	f7fe ff01 	bl	800c9ec <xTaskResumeAll>
 800dbea:	4603      	mov	r3, r0
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d10a      	bne.n	800dc06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dbf0:	4b09      	ldr	r3, [pc, #36]	; (800dc18 <prvProcessTimerOrBlockTask+0x98>)
 800dbf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbf6:	601a      	str	r2, [r3, #0]
 800dbf8:	f3bf 8f4f 	dsb	sy
 800dbfc:	f3bf 8f6f 	isb	sy
}
 800dc00:	e001      	b.n	800dc06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dc02:	f7fe fef3 	bl	800c9ec <xTaskResumeAll>
}
 800dc06:	bf00      	nop
 800dc08:	3710      	adds	r7, #16
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	20008cf8 	.word	0x20008cf8
 800dc14:	20008cfc 	.word	0x20008cfc
 800dc18:	e000ed04 	.word	0xe000ed04

0800dc1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	b085      	sub	sp, #20
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dc24:	4b0e      	ldr	r3, [pc, #56]	; (800dc60 <prvGetNextExpireTime+0x44>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d101      	bne.n	800dc32 <prvGetNextExpireTime+0x16>
 800dc2e:	2201      	movs	r2, #1
 800dc30:	e000      	b.n	800dc34 <prvGetNextExpireTime+0x18>
 800dc32:	2200      	movs	r2, #0
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d105      	bne.n	800dc4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc40:	4b07      	ldr	r3, [pc, #28]	; (800dc60 <prvGetNextExpireTime+0x44>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	68db      	ldr	r3, [r3, #12]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	60fb      	str	r3, [r7, #12]
 800dc4a:	e001      	b.n	800dc50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dc50:	68fb      	ldr	r3, [r7, #12]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3714      	adds	r7, #20
 800dc56:	46bd      	mov	sp, r7
 800dc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5c:	4770      	bx	lr
 800dc5e:	bf00      	nop
 800dc60:	20008cf4 	.word	0x20008cf4

0800dc64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dc6c:	f7fe ff5c 	bl	800cb28 <xTaskGetTickCount>
 800dc70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dc72:	4b0b      	ldr	r3, [pc, #44]	; (800dca0 <prvSampleTimeNow+0x3c>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	68fa      	ldr	r2, [r7, #12]
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d205      	bcs.n	800dc88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dc7c:	f000 f936 	bl	800deec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2201      	movs	r2, #1
 800dc84:	601a      	str	r2, [r3, #0]
 800dc86:	e002      	b.n	800dc8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dc8e:	4a04      	ldr	r2, [pc, #16]	; (800dca0 <prvSampleTimeNow+0x3c>)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dc94:	68fb      	ldr	r3, [r7, #12]
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3710      	adds	r7, #16
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	20008d04 	.word	0x20008d04

0800dca4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b086      	sub	sp, #24
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	60b9      	str	r1, [r7, #8]
 800dcae:	607a      	str	r2, [r7, #4]
 800dcb0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	68ba      	ldr	r2, [r7, #8]
 800dcba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	68fa      	ldr	r2, [r7, #12]
 800dcc0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dcc2:	68ba      	ldr	r2, [r7, #8]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d812      	bhi.n	800dcf0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	1ad2      	subs	r2, r2, r3
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	699b      	ldr	r3, [r3, #24]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d302      	bcc.n	800dcde <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	617b      	str	r3, [r7, #20]
 800dcdc:	e01b      	b.n	800dd16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dcde:	4b10      	ldr	r3, [pc, #64]	; (800dd20 <prvInsertTimerInActiveList+0x7c>)
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	3304      	adds	r3, #4
 800dce6:	4619      	mov	r1, r3
 800dce8:	4610      	mov	r0, r2
 800dcea:	f7fd fcd2 	bl	800b692 <vListInsert>
 800dcee:	e012      	b.n	800dd16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d206      	bcs.n	800dd06 <prvInsertTimerInActiveList+0x62>
 800dcf8:	68ba      	ldr	r2, [r7, #8]
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d302      	bcc.n	800dd06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dd00:	2301      	movs	r3, #1
 800dd02:	617b      	str	r3, [r7, #20]
 800dd04:	e007      	b.n	800dd16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd06:	4b07      	ldr	r3, [pc, #28]	; (800dd24 <prvInsertTimerInActiveList+0x80>)
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	3304      	adds	r3, #4
 800dd0e:	4619      	mov	r1, r3
 800dd10:	4610      	mov	r0, r2
 800dd12:	f7fd fcbe 	bl	800b692 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dd16:	697b      	ldr	r3, [r7, #20]
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3718      	adds	r7, #24
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}
 800dd20:	20008cf8 	.word	0x20008cf8
 800dd24:	20008cf4 	.word	0x20008cf4

0800dd28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b08e      	sub	sp, #56	; 0x38
 800dd2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd2e:	e0ca      	b.n	800dec6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	da18      	bge.n	800dd68 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dd36:	1d3b      	adds	r3, r7, #4
 800dd38:	3304      	adds	r3, #4
 800dd3a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d10a      	bne.n	800dd58 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd46:	f383 8811 	msr	BASEPRI, r3
 800dd4a:	f3bf 8f6f 	isb	sy
 800dd4e:	f3bf 8f4f 	dsb	sy
 800dd52:	61fb      	str	r3, [r7, #28]
}
 800dd54:	bf00      	nop
 800dd56:	e7fe      	b.n	800dd56 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd5e:	6850      	ldr	r0, [r2, #4]
 800dd60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd62:	6892      	ldr	r2, [r2, #8]
 800dd64:	4611      	mov	r1, r2
 800dd66:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	f2c0 80aa 	blt.w	800dec4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd76:	695b      	ldr	r3, [r3, #20]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d004      	beq.n	800dd86 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7e:	3304      	adds	r3, #4
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fd fcbf 	bl	800b704 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd86:	463b      	mov	r3, r7
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7ff ff6b 	bl	800dc64 <prvSampleTimeNow>
 800dd8e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2b09      	cmp	r3, #9
 800dd94:	f200 8097 	bhi.w	800dec6 <prvProcessReceivedCommands+0x19e>
 800dd98:	a201      	add	r2, pc, #4	; (adr r2, 800dda0 <prvProcessReceivedCommands+0x78>)
 800dd9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd9e:	bf00      	nop
 800dda0:	0800ddc9 	.word	0x0800ddc9
 800dda4:	0800ddc9 	.word	0x0800ddc9
 800dda8:	0800ddc9 	.word	0x0800ddc9
 800ddac:	0800de3d 	.word	0x0800de3d
 800ddb0:	0800de51 	.word	0x0800de51
 800ddb4:	0800de9b 	.word	0x0800de9b
 800ddb8:	0800ddc9 	.word	0x0800ddc9
 800ddbc:	0800ddc9 	.word	0x0800ddc9
 800ddc0:	0800de3d 	.word	0x0800de3d
 800ddc4:	0800de51 	.word	0x0800de51
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ddc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddce:	f043 0301 	orr.w	r3, r3, #1
 800ddd2:	b2da      	uxtb	r2, r3
 800ddd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ddda:	68ba      	ldr	r2, [r7, #8]
 800dddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddde:	699b      	ldr	r3, [r3, #24]
 800dde0:	18d1      	adds	r1, r2, r3
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dde6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dde8:	f7ff ff5c 	bl	800dca4 <prvInsertTimerInActiveList>
 800ddec:	4603      	mov	r3, r0
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d069      	beq.n	800dec6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ddf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf4:	6a1b      	ldr	r3, [r3, #32]
 800ddf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddf8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ddfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de00:	f003 0304 	and.w	r3, r3, #4
 800de04:	2b00      	cmp	r3, #0
 800de06:	d05e      	beq.n	800dec6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800de08:	68ba      	ldr	r2, [r7, #8]
 800de0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0c:	699b      	ldr	r3, [r3, #24]
 800de0e:	441a      	add	r2, r3
 800de10:	2300      	movs	r3, #0
 800de12:	9300      	str	r3, [sp, #0]
 800de14:	2300      	movs	r3, #0
 800de16:	2100      	movs	r1, #0
 800de18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de1a:	f7ff fe05 	bl	800da28 <xTimerGenericCommand>
 800de1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800de20:	6a3b      	ldr	r3, [r7, #32]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d14f      	bne.n	800dec6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800de26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2a:	f383 8811 	msr	BASEPRI, r3
 800de2e:	f3bf 8f6f 	isb	sy
 800de32:	f3bf 8f4f 	dsb	sy
 800de36:	61bb      	str	r3, [r7, #24]
}
 800de38:	bf00      	nop
 800de3a:	e7fe      	b.n	800de3a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de42:	f023 0301 	bic.w	r3, r3, #1
 800de46:	b2da      	uxtb	r2, r3
 800de48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800de4e:	e03a      	b.n	800dec6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de56:	f043 0301 	orr.w	r3, r3, #1
 800de5a:	b2da      	uxtb	r2, r3
 800de5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800de62:	68ba      	ldr	r2, [r7, #8]
 800de64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de66:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800de68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6a:	699b      	ldr	r3, [r3, #24]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d10a      	bne.n	800de86 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800de70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de74:	f383 8811 	msr	BASEPRI, r3
 800de78:	f3bf 8f6f 	isb	sy
 800de7c:	f3bf 8f4f 	dsb	sy
 800de80:	617b      	str	r3, [r7, #20]
}
 800de82:	bf00      	nop
 800de84:	e7fe      	b.n	800de84 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800de86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de88:	699a      	ldr	r2, [r3, #24]
 800de8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8c:	18d1      	adds	r1, r2, r3
 800de8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de94:	f7ff ff06 	bl	800dca4 <prvInsertTimerInActiveList>
					break;
 800de98:	e015      	b.n	800dec6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800de9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dea0:	f003 0302 	and.w	r3, r3, #2
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d103      	bne.n	800deb0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800deaa:	f000 fbe1 	bl	800e670 <vPortFree>
 800deae:	e00a      	b.n	800dec6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800deb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800deb6:	f023 0301 	bic.w	r3, r3, #1
 800deba:	b2da      	uxtb	r2, r3
 800debc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800debe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dec2:	e000      	b.n	800dec6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dec4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dec6:	4b08      	ldr	r3, [pc, #32]	; (800dee8 <prvProcessReceivedCommands+0x1c0>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	1d39      	adds	r1, r7, #4
 800decc:	2200      	movs	r2, #0
 800dece:	4618      	mov	r0, r3
 800ded0:	f7fd ffd0 	bl	800be74 <xQueueReceive>
 800ded4:	4603      	mov	r3, r0
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	f47f af2a 	bne.w	800dd30 <prvProcessReceivedCommands+0x8>
	}
}
 800dedc:	bf00      	nop
 800dede:	bf00      	nop
 800dee0:	3730      	adds	r7, #48	; 0x30
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	20008cfc 	.word	0x20008cfc

0800deec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b088      	sub	sp, #32
 800def0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800def2:	e048      	b.n	800df86 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800def4:	4b2d      	ldr	r3, [pc, #180]	; (800dfac <prvSwitchTimerLists+0xc0>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800defe:	4b2b      	ldr	r3, [pc, #172]	; (800dfac <prvSwitchTimerLists+0xc0>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	68db      	ldr	r3, [r3, #12]
 800df04:	68db      	ldr	r3, [r3, #12]
 800df06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	3304      	adds	r3, #4
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7fd fbf9 	bl	800b704 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	6a1b      	ldr	r3, [r3, #32]
 800df16:	68f8      	ldr	r0, [r7, #12]
 800df18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df20:	f003 0304 	and.w	r3, r3, #4
 800df24:	2b00      	cmp	r3, #0
 800df26:	d02e      	beq.n	800df86 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	699b      	ldr	r3, [r3, #24]
 800df2c:	693a      	ldr	r2, [r7, #16]
 800df2e:	4413      	add	r3, r2
 800df30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	429a      	cmp	r2, r3
 800df38:	d90e      	bls.n	800df58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	68ba      	ldr	r2, [r7, #8]
 800df3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df46:	4b19      	ldr	r3, [pc, #100]	; (800dfac <prvSwitchTimerLists+0xc0>)
 800df48:	681a      	ldr	r2, [r3, #0]
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	3304      	adds	r3, #4
 800df4e:	4619      	mov	r1, r3
 800df50:	4610      	mov	r0, r2
 800df52:	f7fd fb9e 	bl	800b692 <vListInsert>
 800df56:	e016      	b.n	800df86 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df58:	2300      	movs	r3, #0
 800df5a:	9300      	str	r3, [sp, #0]
 800df5c:	2300      	movs	r3, #0
 800df5e:	693a      	ldr	r2, [r7, #16]
 800df60:	2100      	movs	r1, #0
 800df62:	68f8      	ldr	r0, [r7, #12]
 800df64:	f7ff fd60 	bl	800da28 <xTimerGenericCommand>
 800df68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d10a      	bne.n	800df86 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800df70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df74:	f383 8811 	msr	BASEPRI, r3
 800df78:	f3bf 8f6f 	isb	sy
 800df7c:	f3bf 8f4f 	dsb	sy
 800df80:	603b      	str	r3, [r7, #0]
}
 800df82:	bf00      	nop
 800df84:	e7fe      	b.n	800df84 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800df86:	4b09      	ldr	r3, [pc, #36]	; (800dfac <prvSwitchTimerLists+0xc0>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d1b1      	bne.n	800def4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800df90:	4b06      	ldr	r3, [pc, #24]	; (800dfac <prvSwitchTimerLists+0xc0>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800df96:	4b06      	ldr	r3, [pc, #24]	; (800dfb0 <prvSwitchTimerLists+0xc4>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4a04      	ldr	r2, [pc, #16]	; (800dfac <prvSwitchTimerLists+0xc0>)
 800df9c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800df9e:	4a04      	ldr	r2, [pc, #16]	; (800dfb0 <prvSwitchTimerLists+0xc4>)
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	6013      	str	r3, [r2, #0]
}
 800dfa4:	bf00      	nop
 800dfa6:	3718      	adds	r7, #24
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	20008cf4 	.word	0x20008cf4
 800dfb0:	20008cf8 	.word	0x20008cf8

0800dfb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dfba:	f000 f96b 	bl	800e294 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dfbe:	4b15      	ldr	r3, [pc, #84]	; (800e014 <prvCheckForValidListAndQueue+0x60>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d120      	bne.n	800e008 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dfc6:	4814      	ldr	r0, [pc, #80]	; (800e018 <prvCheckForValidListAndQueue+0x64>)
 800dfc8:	f7fd fb12 	bl	800b5f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dfcc:	4813      	ldr	r0, [pc, #76]	; (800e01c <prvCheckForValidListAndQueue+0x68>)
 800dfce:	f7fd fb0f 	bl	800b5f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dfd2:	4b13      	ldr	r3, [pc, #76]	; (800e020 <prvCheckForValidListAndQueue+0x6c>)
 800dfd4:	4a10      	ldr	r2, [pc, #64]	; (800e018 <prvCheckForValidListAndQueue+0x64>)
 800dfd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dfd8:	4b12      	ldr	r3, [pc, #72]	; (800e024 <prvCheckForValidListAndQueue+0x70>)
 800dfda:	4a10      	ldr	r2, [pc, #64]	; (800e01c <prvCheckForValidListAndQueue+0x68>)
 800dfdc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dfde:	2300      	movs	r3, #0
 800dfe0:	9300      	str	r3, [sp, #0]
 800dfe2:	4b11      	ldr	r3, [pc, #68]	; (800e028 <prvCheckForValidListAndQueue+0x74>)
 800dfe4:	4a11      	ldr	r2, [pc, #68]	; (800e02c <prvCheckForValidListAndQueue+0x78>)
 800dfe6:	2110      	movs	r1, #16
 800dfe8:	200a      	movs	r0, #10
 800dfea:	f7fd fc1d 	bl	800b828 <xQueueGenericCreateStatic>
 800dfee:	4603      	mov	r3, r0
 800dff0:	4a08      	ldr	r2, [pc, #32]	; (800e014 <prvCheckForValidListAndQueue+0x60>)
 800dff2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dff4:	4b07      	ldr	r3, [pc, #28]	; (800e014 <prvCheckForValidListAndQueue+0x60>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d005      	beq.n	800e008 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dffc:	4b05      	ldr	r3, [pc, #20]	; (800e014 <prvCheckForValidListAndQueue+0x60>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	490b      	ldr	r1, [pc, #44]	; (800e030 <prvCheckForValidListAndQueue+0x7c>)
 800e002:	4618      	mov	r0, r3
 800e004:	f7fe fa4a 	bl	800c49c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e008:	f000 f974 	bl	800e2f4 <vPortExitCritical>
}
 800e00c:	bf00      	nop
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
 800e012:	bf00      	nop
 800e014:	20008cfc 	.word	0x20008cfc
 800e018:	20008ccc 	.word	0x20008ccc
 800e01c:	20008ce0 	.word	0x20008ce0
 800e020:	20008cf4 	.word	0x20008cf4
 800e024:	20008cf8 	.word	0x20008cf8
 800e028:	20008da8 	.word	0x20008da8
 800e02c:	20008d08 	.word	0x20008d08
 800e030:	0801e9c0 	.word	0x0801e9c0

0800e034 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e034:	b480      	push	{r7}
 800e036:	b085      	sub	sp, #20
 800e038:	af00      	add	r7, sp, #0
 800e03a:	60f8      	str	r0, [r7, #12]
 800e03c:	60b9      	str	r1, [r7, #8]
 800e03e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	3b04      	subs	r3, #4
 800e044:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e04c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	3b04      	subs	r3, #4
 800e052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	f023 0201 	bic.w	r2, r3, #1
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	3b04      	subs	r3, #4
 800e062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e064:	4a0c      	ldr	r2, [pc, #48]	; (800e098 <pxPortInitialiseStack+0x64>)
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	3b14      	subs	r3, #20
 800e06e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	3b04      	subs	r3, #4
 800e07a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f06f 0202 	mvn.w	r2, #2
 800e082:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	3b20      	subs	r3, #32
 800e088:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e08a:	68fb      	ldr	r3, [r7, #12]
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3714      	adds	r7, #20
 800e090:	46bd      	mov	sp, r7
 800e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e096:	4770      	bx	lr
 800e098:	0800e09d 	.word	0x0800e09d

0800e09c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e09c:	b480      	push	{r7}
 800e09e:	b085      	sub	sp, #20
 800e0a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e0a6:	4b12      	ldr	r3, [pc, #72]	; (800e0f0 <prvTaskExitError+0x54>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0ae:	d00a      	beq.n	800e0c6 <prvTaskExitError+0x2a>
	__asm volatile
 800e0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b4:	f383 8811 	msr	BASEPRI, r3
 800e0b8:	f3bf 8f6f 	isb	sy
 800e0bc:	f3bf 8f4f 	dsb	sy
 800e0c0:	60fb      	str	r3, [r7, #12]
}
 800e0c2:	bf00      	nop
 800e0c4:	e7fe      	b.n	800e0c4 <prvTaskExitError+0x28>
	__asm volatile
 800e0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ca:	f383 8811 	msr	BASEPRI, r3
 800e0ce:	f3bf 8f6f 	isb	sy
 800e0d2:	f3bf 8f4f 	dsb	sy
 800e0d6:	60bb      	str	r3, [r7, #8]
}
 800e0d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e0da:	bf00      	nop
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d0fc      	beq.n	800e0dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e0e2:	bf00      	nop
 800e0e4:	bf00      	nop
 800e0e6:	3714      	adds	r7, #20
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr
 800e0f0:	20000010 	.word	0x20000010
	...

0800e100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e100:	4b07      	ldr	r3, [pc, #28]	; (800e120 <pxCurrentTCBConst2>)
 800e102:	6819      	ldr	r1, [r3, #0]
 800e104:	6808      	ldr	r0, [r1, #0]
 800e106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e10a:	f380 8809 	msr	PSP, r0
 800e10e:	f3bf 8f6f 	isb	sy
 800e112:	f04f 0000 	mov.w	r0, #0
 800e116:	f380 8811 	msr	BASEPRI, r0
 800e11a:	4770      	bx	lr
 800e11c:	f3af 8000 	nop.w

0800e120 <pxCurrentTCBConst2>:
 800e120:	200087cc 	.word	0x200087cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e124:	bf00      	nop
 800e126:	bf00      	nop

0800e128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e128:	4808      	ldr	r0, [pc, #32]	; (800e14c <prvPortStartFirstTask+0x24>)
 800e12a:	6800      	ldr	r0, [r0, #0]
 800e12c:	6800      	ldr	r0, [r0, #0]
 800e12e:	f380 8808 	msr	MSP, r0
 800e132:	f04f 0000 	mov.w	r0, #0
 800e136:	f380 8814 	msr	CONTROL, r0
 800e13a:	b662      	cpsie	i
 800e13c:	b661      	cpsie	f
 800e13e:	f3bf 8f4f 	dsb	sy
 800e142:	f3bf 8f6f 	isb	sy
 800e146:	df00      	svc	0
 800e148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e14a:	bf00      	nop
 800e14c:	e000ed08 	.word	0xe000ed08

0800e150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b086      	sub	sp, #24
 800e154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e156:	4b46      	ldr	r3, [pc, #280]	; (800e270 <xPortStartScheduler+0x120>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4a46      	ldr	r2, [pc, #280]	; (800e274 <xPortStartScheduler+0x124>)
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d10a      	bne.n	800e176 <xPortStartScheduler+0x26>
	__asm volatile
 800e160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e164:	f383 8811 	msr	BASEPRI, r3
 800e168:	f3bf 8f6f 	isb	sy
 800e16c:	f3bf 8f4f 	dsb	sy
 800e170:	613b      	str	r3, [r7, #16]
}
 800e172:	bf00      	nop
 800e174:	e7fe      	b.n	800e174 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e176:	4b3e      	ldr	r3, [pc, #248]	; (800e270 <xPortStartScheduler+0x120>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4a3f      	ldr	r2, [pc, #252]	; (800e278 <xPortStartScheduler+0x128>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d10a      	bne.n	800e196 <xPortStartScheduler+0x46>
	__asm volatile
 800e180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e184:	f383 8811 	msr	BASEPRI, r3
 800e188:	f3bf 8f6f 	isb	sy
 800e18c:	f3bf 8f4f 	dsb	sy
 800e190:	60fb      	str	r3, [r7, #12]
}
 800e192:	bf00      	nop
 800e194:	e7fe      	b.n	800e194 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e196:	4b39      	ldr	r3, [pc, #228]	; (800e27c <xPortStartScheduler+0x12c>)
 800e198:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	b2db      	uxtb	r3, r3
 800e1a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	22ff      	movs	r2, #255	; 0xff
 800e1a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e1b0:	78fb      	ldrb	r3, [r7, #3]
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e1b8:	b2da      	uxtb	r2, r3
 800e1ba:	4b31      	ldr	r3, [pc, #196]	; (800e280 <xPortStartScheduler+0x130>)
 800e1bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e1be:	4b31      	ldr	r3, [pc, #196]	; (800e284 <xPortStartScheduler+0x134>)
 800e1c0:	2207      	movs	r2, #7
 800e1c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1c4:	e009      	b.n	800e1da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e1c6:	4b2f      	ldr	r3, [pc, #188]	; (800e284 <xPortStartScheduler+0x134>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	3b01      	subs	r3, #1
 800e1cc:	4a2d      	ldr	r2, [pc, #180]	; (800e284 <xPortStartScheduler+0x134>)
 800e1ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e1d0:	78fb      	ldrb	r3, [r7, #3]
 800e1d2:	b2db      	uxtb	r3, r3
 800e1d4:	005b      	lsls	r3, r3, #1
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1da:	78fb      	ldrb	r3, [r7, #3]
 800e1dc:	b2db      	uxtb	r3, r3
 800e1de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1e2:	2b80      	cmp	r3, #128	; 0x80
 800e1e4:	d0ef      	beq.n	800e1c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e1e6:	4b27      	ldr	r3, [pc, #156]	; (800e284 <xPortStartScheduler+0x134>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f1c3 0307 	rsb	r3, r3, #7
 800e1ee:	2b04      	cmp	r3, #4
 800e1f0:	d00a      	beq.n	800e208 <xPortStartScheduler+0xb8>
	__asm volatile
 800e1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f6:	f383 8811 	msr	BASEPRI, r3
 800e1fa:	f3bf 8f6f 	isb	sy
 800e1fe:	f3bf 8f4f 	dsb	sy
 800e202:	60bb      	str	r3, [r7, #8]
}
 800e204:	bf00      	nop
 800e206:	e7fe      	b.n	800e206 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e208:	4b1e      	ldr	r3, [pc, #120]	; (800e284 <xPortStartScheduler+0x134>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	021b      	lsls	r3, r3, #8
 800e20e:	4a1d      	ldr	r2, [pc, #116]	; (800e284 <xPortStartScheduler+0x134>)
 800e210:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e212:	4b1c      	ldr	r3, [pc, #112]	; (800e284 <xPortStartScheduler+0x134>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e21a:	4a1a      	ldr	r2, [pc, #104]	; (800e284 <xPortStartScheduler+0x134>)
 800e21c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	b2da      	uxtb	r2, r3
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e226:	4b18      	ldr	r3, [pc, #96]	; (800e288 <xPortStartScheduler+0x138>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a17      	ldr	r2, [pc, #92]	; (800e288 <xPortStartScheduler+0x138>)
 800e22c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e230:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e232:	4b15      	ldr	r3, [pc, #84]	; (800e288 <xPortStartScheduler+0x138>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4a14      	ldr	r2, [pc, #80]	; (800e288 <xPortStartScheduler+0x138>)
 800e238:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e23c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e23e:	f000 f8dd 	bl	800e3fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e242:	4b12      	ldr	r3, [pc, #72]	; (800e28c <xPortStartScheduler+0x13c>)
 800e244:	2200      	movs	r2, #0
 800e246:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e248:	f000 f8fc 	bl	800e444 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e24c:	4b10      	ldr	r3, [pc, #64]	; (800e290 <xPortStartScheduler+0x140>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a0f      	ldr	r2, [pc, #60]	; (800e290 <xPortStartScheduler+0x140>)
 800e252:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e256:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e258:	f7ff ff66 	bl	800e128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e25c:	f7fe fd2e 	bl	800ccbc <vTaskSwitchContext>
	prvTaskExitError();
 800e260:	f7ff ff1c 	bl	800e09c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e264:	2300      	movs	r3, #0
}
 800e266:	4618      	mov	r0, r3
 800e268:	3718      	adds	r7, #24
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	e000ed00 	.word	0xe000ed00
 800e274:	410fc271 	.word	0x410fc271
 800e278:	410fc270 	.word	0x410fc270
 800e27c:	e000e400 	.word	0xe000e400
 800e280:	20008df8 	.word	0x20008df8
 800e284:	20008dfc 	.word	0x20008dfc
 800e288:	e000ed20 	.word	0xe000ed20
 800e28c:	20000010 	.word	0x20000010
 800e290:	e000ef34 	.word	0xe000ef34

0800e294 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
	__asm volatile
 800e29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29e:	f383 8811 	msr	BASEPRI, r3
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	607b      	str	r3, [r7, #4]
}
 800e2ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e2ae:	4b0f      	ldr	r3, [pc, #60]	; (800e2ec <vPortEnterCritical+0x58>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	4a0d      	ldr	r2, [pc, #52]	; (800e2ec <vPortEnterCritical+0x58>)
 800e2b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e2b8:	4b0c      	ldr	r3, [pc, #48]	; (800e2ec <vPortEnterCritical+0x58>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d10f      	bne.n	800e2e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e2c0:	4b0b      	ldr	r3, [pc, #44]	; (800e2f0 <vPortEnterCritical+0x5c>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d00a      	beq.n	800e2e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ce:	f383 8811 	msr	BASEPRI, r3
 800e2d2:	f3bf 8f6f 	isb	sy
 800e2d6:	f3bf 8f4f 	dsb	sy
 800e2da:	603b      	str	r3, [r7, #0]
}
 800e2dc:	bf00      	nop
 800e2de:	e7fe      	b.n	800e2de <vPortEnterCritical+0x4a>
	}
}
 800e2e0:	bf00      	nop
 800e2e2:	370c      	adds	r7, #12
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr
 800e2ec:	20000010 	.word	0x20000010
 800e2f0:	e000ed04 	.word	0xe000ed04

0800e2f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e2fa:	4b12      	ldr	r3, [pc, #72]	; (800e344 <vPortExitCritical+0x50>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d10a      	bne.n	800e318 <vPortExitCritical+0x24>
	__asm volatile
 800e302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e306:	f383 8811 	msr	BASEPRI, r3
 800e30a:	f3bf 8f6f 	isb	sy
 800e30e:	f3bf 8f4f 	dsb	sy
 800e312:	607b      	str	r3, [r7, #4]
}
 800e314:	bf00      	nop
 800e316:	e7fe      	b.n	800e316 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e318:	4b0a      	ldr	r3, [pc, #40]	; (800e344 <vPortExitCritical+0x50>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	3b01      	subs	r3, #1
 800e31e:	4a09      	ldr	r2, [pc, #36]	; (800e344 <vPortExitCritical+0x50>)
 800e320:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e322:	4b08      	ldr	r3, [pc, #32]	; (800e344 <vPortExitCritical+0x50>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d105      	bne.n	800e336 <vPortExitCritical+0x42>
 800e32a:	2300      	movs	r3, #0
 800e32c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	f383 8811 	msr	BASEPRI, r3
}
 800e334:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e336:	bf00      	nop
 800e338:	370c      	adds	r7, #12
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr
 800e342:	bf00      	nop
 800e344:	20000010 	.word	0x20000010
	...

0800e350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e350:	f3ef 8009 	mrs	r0, PSP
 800e354:	f3bf 8f6f 	isb	sy
 800e358:	4b15      	ldr	r3, [pc, #84]	; (800e3b0 <pxCurrentTCBConst>)
 800e35a:	681a      	ldr	r2, [r3, #0]
 800e35c:	f01e 0f10 	tst.w	lr, #16
 800e360:	bf08      	it	eq
 800e362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e36a:	6010      	str	r0, [r2, #0]
 800e36c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e370:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e374:	f380 8811 	msr	BASEPRI, r0
 800e378:	f3bf 8f4f 	dsb	sy
 800e37c:	f3bf 8f6f 	isb	sy
 800e380:	f7fe fc9c 	bl	800ccbc <vTaskSwitchContext>
 800e384:	f04f 0000 	mov.w	r0, #0
 800e388:	f380 8811 	msr	BASEPRI, r0
 800e38c:	bc09      	pop	{r0, r3}
 800e38e:	6819      	ldr	r1, [r3, #0]
 800e390:	6808      	ldr	r0, [r1, #0]
 800e392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e396:	f01e 0f10 	tst.w	lr, #16
 800e39a:	bf08      	it	eq
 800e39c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e3a0:	f380 8809 	msr	PSP, r0
 800e3a4:	f3bf 8f6f 	isb	sy
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	f3af 8000 	nop.w

0800e3b0 <pxCurrentTCBConst>:
 800e3b0:	200087cc 	.word	0x200087cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e3b4:	bf00      	nop
 800e3b6:	bf00      	nop

0800e3b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b082      	sub	sp, #8
 800e3bc:	af00      	add	r7, sp, #0
	__asm volatile
 800e3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c2:	f383 8811 	msr	BASEPRI, r3
 800e3c6:	f3bf 8f6f 	isb	sy
 800e3ca:	f3bf 8f4f 	dsb	sy
 800e3ce:	607b      	str	r3, [r7, #4]
}
 800e3d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e3d2:	f7fe fbb9 	bl	800cb48 <xTaskIncrementTick>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d003      	beq.n	800e3e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e3dc:	4b06      	ldr	r3, [pc, #24]	; (800e3f8 <xPortSysTickHandler+0x40>)
 800e3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3e2:	601a      	str	r2, [r3, #0]
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	f383 8811 	msr	BASEPRI, r3
}
 800e3ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e3f0:	bf00      	nop
 800e3f2:	3708      	adds	r7, #8
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	e000ed04 	.word	0xe000ed04

0800e3fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e400:	4b0b      	ldr	r3, [pc, #44]	; (800e430 <vPortSetupTimerInterrupt+0x34>)
 800e402:	2200      	movs	r2, #0
 800e404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e406:	4b0b      	ldr	r3, [pc, #44]	; (800e434 <vPortSetupTimerInterrupt+0x38>)
 800e408:	2200      	movs	r2, #0
 800e40a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e40c:	4b0a      	ldr	r3, [pc, #40]	; (800e438 <vPortSetupTimerInterrupt+0x3c>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	4a0a      	ldr	r2, [pc, #40]	; (800e43c <vPortSetupTimerInterrupt+0x40>)
 800e412:	fba2 2303 	umull	r2, r3, r2, r3
 800e416:	099b      	lsrs	r3, r3, #6
 800e418:	4a09      	ldr	r2, [pc, #36]	; (800e440 <vPortSetupTimerInterrupt+0x44>)
 800e41a:	3b01      	subs	r3, #1
 800e41c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e41e:	4b04      	ldr	r3, [pc, #16]	; (800e430 <vPortSetupTimerInterrupt+0x34>)
 800e420:	2207      	movs	r2, #7
 800e422:	601a      	str	r2, [r3, #0]
}
 800e424:	bf00      	nop
 800e426:	46bd      	mov	sp, r7
 800e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42c:	4770      	bx	lr
 800e42e:	bf00      	nop
 800e430:	e000e010 	.word	0xe000e010
 800e434:	e000e018 	.word	0xe000e018
 800e438:	20000004 	.word	0x20000004
 800e43c:	10624dd3 	.word	0x10624dd3
 800e440:	e000e014 	.word	0xe000e014

0800e444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e444:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e454 <vPortEnableVFP+0x10>
 800e448:	6801      	ldr	r1, [r0, #0]
 800e44a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e44e:	6001      	str	r1, [r0, #0]
 800e450:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e452:	bf00      	nop
 800e454:	e000ed88 	.word	0xe000ed88

0800e458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e458:	b480      	push	{r7}
 800e45a:	b085      	sub	sp, #20
 800e45c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e45e:	f3ef 8305 	mrs	r3, IPSR
 800e462:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2b0f      	cmp	r3, #15
 800e468:	d914      	bls.n	800e494 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e46a:	4a17      	ldr	r2, [pc, #92]	; (800e4c8 <vPortValidateInterruptPriority+0x70>)
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	4413      	add	r3, r2
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e474:	4b15      	ldr	r3, [pc, #84]	; (800e4cc <vPortValidateInterruptPriority+0x74>)
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	7afa      	ldrb	r2, [r7, #11]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d20a      	bcs.n	800e494 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e482:	f383 8811 	msr	BASEPRI, r3
 800e486:	f3bf 8f6f 	isb	sy
 800e48a:	f3bf 8f4f 	dsb	sy
 800e48e:	607b      	str	r3, [r7, #4]
}
 800e490:	bf00      	nop
 800e492:	e7fe      	b.n	800e492 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e494:	4b0e      	ldr	r3, [pc, #56]	; (800e4d0 <vPortValidateInterruptPriority+0x78>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e49c:	4b0d      	ldr	r3, [pc, #52]	; (800e4d4 <vPortValidateInterruptPriority+0x7c>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d90a      	bls.n	800e4ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a8:	f383 8811 	msr	BASEPRI, r3
 800e4ac:	f3bf 8f6f 	isb	sy
 800e4b0:	f3bf 8f4f 	dsb	sy
 800e4b4:	603b      	str	r3, [r7, #0]
}
 800e4b6:	bf00      	nop
 800e4b8:	e7fe      	b.n	800e4b8 <vPortValidateInterruptPriority+0x60>
	}
 800e4ba:	bf00      	nop
 800e4bc:	3714      	adds	r7, #20
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c4:	4770      	bx	lr
 800e4c6:	bf00      	nop
 800e4c8:	e000e3f0 	.word	0xe000e3f0
 800e4cc:	20008df8 	.word	0x20008df8
 800e4d0:	e000ed0c 	.word	0xe000ed0c
 800e4d4:	20008dfc 	.word	0x20008dfc

0800e4d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b08a      	sub	sp, #40	; 0x28
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e4e4:	f7fe fa74 	bl	800c9d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e4e8:	4b5b      	ldr	r3, [pc, #364]	; (800e658 <pvPortMalloc+0x180>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d101      	bne.n	800e4f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e4f0:	f000 f920 	bl	800e734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e4f4:	4b59      	ldr	r3, [pc, #356]	; (800e65c <pvPortMalloc+0x184>)
 800e4f6:	681a      	ldr	r2, [r3, #0]
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	4013      	ands	r3, r2
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	f040 8093 	bne.w	800e628 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d01d      	beq.n	800e544 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e508:	2208      	movs	r2, #8
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	4413      	add	r3, r2
 800e50e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f003 0307 	and.w	r3, r3, #7
 800e516:	2b00      	cmp	r3, #0
 800e518:	d014      	beq.n	800e544 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f023 0307 	bic.w	r3, r3, #7
 800e520:	3308      	adds	r3, #8
 800e522:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f003 0307 	and.w	r3, r3, #7
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d00a      	beq.n	800e544 <pvPortMalloc+0x6c>
	__asm volatile
 800e52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e532:	f383 8811 	msr	BASEPRI, r3
 800e536:	f3bf 8f6f 	isb	sy
 800e53a:	f3bf 8f4f 	dsb	sy
 800e53e:	617b      	str	r3, [r7, #20]
}
 800e540:	bf00      	nop
 800e542:	e7fe      	b.n	800e542 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d06e      	beq.n	800e628 <pvPortMalloc+0x150>
 800e54a:	4b45      	ldr	r3, [pc, #276]	; (800e660 <pvPortMalloc+0x188>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	687a      	ldr	r2, [r7, #4]
 800e550:	429a      	cmp	r2, r3
 800e552:	d869      	bhi.n	800e628 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e554:	4b43      	ldr	r3, [pc, #268]	; (800e664 <pvPortMalloc+0x18c>)
 800e556:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e558:	4b42      	ldr	r3, [pc, #264]	; (800e664 <pvPortMalloc+0x18c>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e55e:	e004      	b.n	800e56a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e562:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	687a      	ldr	r2, [r7, #4]
 800e570:	429a      	cmp	r2, r3
 800e572:	d903      	bls.n	800e57c <pvPortMalloc+0xa4>
 800e574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d1f1      	bne.n	800e560 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e57c:	4b36      	ldr	r3, [pc, #216]	; (800e658 <pvPortMalloc+0x180>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e582:	429a      	cmp	r2, r3
 800e584:	d050      	beq.n	800e628 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e586:	6a3b      	ldr	r3, [r7, #32]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	2208      	movs	r2, #8
 800e58c:	4413      	add	r3, r2
 800e58e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	6a3b      	ldr	r3, [r7, #32]
 800e596:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59a:	685a      	ldr	r2, [r3, #4]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	1ad2      	subs	r2, r2, r3
 800e5a0:	2308      	movs	r3, #8
 800e5a2:	005b      	lsls	r3, r3, #1
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d91f      	bls.n	800e5e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	4413      	add	r3, r2
 800e5ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5b0:	69bb      	ldr	r3, [r7, #24]
 800e5b2:	f003 0307 	and.w	r3, r3, #7
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d00a      	beq.n	800e5d0 <pvPortMalloc+0xf8>
	__asm volatile
 800e5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5be:	f383 8811 	msr	BASEPRI, r3
 800e5c2:	f3bf 8f6f 	isb	sy
 800e5c6:	f3bf 8f4f 	dsb	sy
 800e5ca:	613b      	str	r3, [r7, #16]
}
 800e5cc:	bf00      	nop
 800e5ce:	e7fe      	b.n	800e5ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d2:	685a      	ldr	r2, [r3, #4]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	1ad2      	subs	r2, r2, r3
 800e5d8:	69bb      	ldr	r3, [r7, #24]
 800e5da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5de:	687a      	ldr	r2, [r7, #4]
 800e5e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e5e2:	69b8      	ldr	r0, [r7, #24]
 800e5e4:	f000 f908 	bl	800e7f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e5e8:	4b1d      	ldr	r3, [pc, #116]	; (800e660 <pvPortMalloc+0x188>)
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	1ad3      	subs	r3, r2, r3
 800e5f2:	4a1b      	ldr	r2, [pc, #108]	; (800e660 <pvPortMalloc+0x188>)
 800e5f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e5f6:	4b1a      	ldr	r3, [pc, #104]	; (800e660 <pvPortMalloc+0x188>)
 800e5f8:	681a      	ldr	r2, [r3, #0]
 800e5fa:	4b1b      	ldr	r3, [pc, #108]	; (800e668 <pvPortMalloc+0x190>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d203      	bcs.n	800e60a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e602:	4b17      	ldr	r3, [pc, #92]	; (800e660 <pvPortMalloc+0x188>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	4a18      	ldr	r2, [pc, #96]	; (800e668 <pvPortMalloc+0x190>)
 800e608:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60c:	685a      	ldr	r2, [r3, #4]
 800e60e:	4b13      	ldr	r3, [pc, #76]	; (800e65c <pvPortMalloc+0x184>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	431a      	orrs	r2, r3
 800e614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e616:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61a:	2200      	movs	r2, #0
 800e61c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e61e:	4b13      	ldr	r3, [pc, #76]	; (800e66c <pvPortMalloc+0x194>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	3301      	adds	r3, #1
 800e624:	4a11      	ldr	r2, [pc, #68]	; (800e66c <pvPortMalloc+0x194>)
 800e626:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e628:	f7fe f9e0 	bl	800c9ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e62c:	69fb      	ldr	r3, [r7, #28]
 800e62e:	f003 0307 	and.w	r3, r3, #7
 800e632:	2b00      	cmp	r3, #0
 800e634:	d00a      	beq.n	800e64c <pvPortMalloc+0x174>
	__asm volatile
 800e636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e63a:	f383 8811 	msr	BASEPRI, r3
 800e63e:	f3bf 8f6f 	isb	sy
 800e642:	f3bf 8f4f 	dsb	sy
 800e646:	60fb      	str	r3, [r7, #12]
}
 800e648:	bf00      	nop
 800e64a:	e7fe      	b.n	800e64a <pvPortMalloc+0x172>
	return pvReturn;
 800e64c:	69fb      	ldr	r3, [r7, #28]
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3728      	adds	r7, #40	; 0x28
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	20010338 	.word	0x20010338
 800e65c:	2001034c 	.word	0x2001034c
 800e660:	2001033c 	.word	0x2001033c
 800e664:	20010330 	.word	0x20010330
 800e668:	20010340 	.word	0x20010340
 800e66c:	20010344 	.word	0x20010344

0800e670 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b086      	sub	sp, #24
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d04d      	beq.n	800e71e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e682:	2308      	movs	r3, #8
 800e684:	425b      	negs	r3, r3
 800e686:	697a      	ldr	r2, [r7, #20]
 800e688:	4413      	add	r3, r2
 800e68a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	685a      	ldr	r2, [r3, #4]
 800e694:	4b24      	ldr	r3, [pc, #144]	; (800e728 <vPortFree+0xb8>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	4013      	ands	r3, r2
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d10a      	bne.n	800e6b4 <vPortFree+0x44>
	__asm volatile
 800e69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a2:	f383 8811 	msr	BASEPRI, r3
 800e6a6:	f3bf 8f6f 	isb	sy
 800e6aa:	f3bf 8f4f 	dsb	sy
 800e6ae:	60fb      	str	r3, [r7, #12]
}
 800e6b0:	bf00      	nop
 800e6b2:	e7fe      	b.n	800e6b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d00a      	beq.n	800e6d2 <vPortFree+0x62>
	__asm volatile
 800e6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c0:	f383 8811 	msr	BASEPRI, r3
 800e6c4:	f3bf 8f6f 	isb	sy
 800e6c8:	f3bf 8f4f 	dsb	sy
 800e6cc:	60bb      	str	r3, [r7, #8]
}
 800e6ce:	bf00      	nop
 800e6d0:	e7fe      	b.n	800e6d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	685a      	ldr	r2, [r3, #4]
 800e6d6:	4b14      	ldr	r3, [pc, #80]	; (800e728 <vPortFree+0xb8>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4013      	ands	r3, r2
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d01e      	beq.n	800e71e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d11a      	bne.n	800e71e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	685a      	ldr	r2, [r3, #4]
 800e6ec:	4b0e      	ldr	r3, [pc, #56]	; (800e728 <vPortFree+0xb8>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	43db      	mvns	r3, r3
 800e6f2:	401a      	ands	r2, r3
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e6f8:	f7fe f96a 	bl	800c9d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	685a      	ldr	r2, [r3, #4]
 800e700:	4b0a      	ldr	r3, [pc, #40]	; (800e72c <vPortFree+0xbc>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	4413      	add	r3, r2
 800e706:	4a09      	ldr	r2, [pc, #36]	; (800e72c <vPortFree+0xbc>)
 800e708:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e70a:	6938      	ldr	r0, [r7, #16]
 800e70c:	f000 f874 	bl	800e7f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e710:	4b07      	ldr	r3, [pc, #28]	; (800e730 <vPortFree+0xc0>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	3301      	adds	r3, #1
 800e716:	4a06      	ldr	r2, [pc, #24]	; (800e730 <vPortFree+0xc0>)
 800e718:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e71a:	f7fe f967 	bl	800c9ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e71e:	bf00      	nop
 800e720:	3718      	adds	r7, #24
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	2001034c 	.word	0x2001034c
 800e72c:	2001033c 	.word	0x2001033c
 800e730:	20010348 	.word	0x20010348

0800e734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e734:	b480      	push	{r7}
 800e736:	b085      	sub	sp, #20
 800e738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e73a:	f247 5330 	movw	r3, #30000	; 0x7530
 800e73e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e740:	4b27      	ldr	r3, [pc, #156]	; (800e7e0 <prvHeapInit+0xac>)
 800e742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	f003 0307 	and.w	r3, r3, #7
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d00c      	beq.n	800e768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	3307      	adds	r3, #7
 800e752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	f023 0307 	bic.w	r3, r3, #7
 800e75a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e75c:	68ba      	ldr	r2, [r7, #8]
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	1ad3      	subs	r3, r2, r3
 800e762:	4a1f      	ldr	r2, [pc, #124]	; (800e7e0 <prvHeapInit+0xac>)
 800e764:	4413      	add	r3, r2
 800e766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e76c:	4a1d      	ldr	r2, [pc, #116]	; (800e7e4 <prvHeapInit+0xb0>)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e772:	4b1c      	ldr	r3, [pc, #112]	; (800e7e4 <prvHeapInit+0xb0>)
 800e774:	2200      	movs	r2, #0
 800e776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	68ba      	ldr	r2, [r7, #8]
 800e77c:	4413      	add	r3, r2
 800e77e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e780:	2208      	movs	r2, #8
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	1a9b      	subs	r3, r3, r2
 800e786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	f023 0307 	bic.w	r3, r3, #7
 800e78e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	4a15      	ldr	r2, [pc, #84]	; (800e7e8 <prvHeapInit+0xb4>)
 800e794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e796:	4b14      	ldr	r3, [pc, #80]	; (800e7e8 <prvHeapInit+0xb4>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	2200      	movs	r2, #0
 800e79c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e79e:	4b12      	ldr	r3, [pc, #72]	; (800e7e8 <prvHeapInit+0xb4>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	68fa      	ldr	r2, [r7, #12]
 800e7ae:	1ad2      	subs	r2, r2, r3
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e7b4:	4b0c      	ldr	r3, [pc, #48]	; (800e7e8 <prvHeapInit+0xb4>)
 800e7b6:	681a      	ldr	r2, [r3, #0]
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	4a0a      	ldr	r2, [pc, #40]	; (800e7ec <prvHeapInit+0xb8>)
 800e7c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	685b      	ldr	r3, [r3, #4]
 800e7c8:	4a09      	ldr	r2, [pc, #36]	; (800e7f0 <prvHeapInit+0xbc>)
 800e7ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e7cc:	4b09      	ldr	r3, [pc, #36]	; (800e7f4 <prvHeapInit+0xc0>)
 800e7ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e7d2:	601a      	str	r2, [r3, #0]
}
 800e7d4:	bf00      	nop
 800e7d6:	3714      	adds	r7, #20
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr
 800e7e0:	20008e00 	.word	0x20008e00
 800e7e4:	20010330 	.word	0x20010330
 800e7e8:	20010338 	.word	0x20010338
 800e7ec:	20010340 	.word	0x20010340
 800e7f0:	2001033c 	.word	0x2001033c
 800e7f4:	2001034c 	.word	0x2001034c

0800e7f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b085      	sub	sp, #20
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e800:	4b28      	ldr	r3, [pc, #160]	; (800e8a4 <prvInsertBlockIntoFreeList+0xac>)
 800e802:	60fb      	str	r3, [r7, #12]
 800e804:	e002      	b.n	800e80c <prvInsertBlockIntoFreeList+0x14>
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	60fb      	str	r3, [r7, #12]
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	687a      	ldr	r2, [r7, #4]
 800e812:	429a      	cmp	r2, r3
 800e814:	d8f7      	bhi.n	800e806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	68ba      	ldr	r2, [r7, #8]
 800e820:	4413      	add	r3, r2
 800e822:	687a      	ldr	r2, [r7, #4]
 800e824:	429a      	cmp	r2, r3
 800e826:	d108      	bne.n	800e83a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	685a      	ldr	r2, [r3, #4]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	441a      	add	r2, r3
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	685b      	ldr	r3, [r3, #4]
 800e842:	68ba      	ldr	r2, [r7, #8]
 800e844:	441a      	add	r2, r3
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d118      	bne.n	800e880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	681a      	ldr	r2, [r3, #0]
 800e852:	4b15      	ldr	r3, [pc, #84]	; (800e8a8 <prvInsertBlockIntoFreeList+0xb0>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	429a      	cmp	r2, r3
 800e858:	d00d      	beq.n	800e876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	685a      	ldr	r2, [r3, #4]
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	685b      	ldr	r3, [r3, #4]
 800e864:	441a      	add	r2, r3
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	681a      	ldr	r2, [r3, #0]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	601a      	str	r2, [r3, #0]
 800e874:	e008      	b.n	800e888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e876:	4b0c      	ldr	r3, [pc, #48]	; (800e8a8 <prvInsertBlockIntoFreeList+0xb0>)
 800e878:	681a      	ldr	r2, [r3, #0]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	601a      	str	r2, [r3, #0]
 800e87e:	e003      	b.n	800e888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681a      	ldr	r2, [r3, #0]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e888:	68fa      	ldr	r2, [r7, #12]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d002      	beq.n	800e896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e896:	bf00      	nop
 800e898:	3714      	adds	r7, #20
 800e89a:	46bd      	mov	sp, r7
 800e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a0:	4770      	bx	lr
 800e8a2:	bf00      	nop
 800e8a4:	20010330 	.word	0x20010330
 800e8a8:	20010338 	.word	0x20010338

0800e8ac <rcl_get_zero_initialized_init_options>:
 800e8ac:	2000      	movs	r0, #0
 800e8ae:	4770      	bx	lr

0800e8b0 <rcl_init_options_init>:
 800e8b0:	b084      	sub	sp, #16
 800e8b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8b4:	b091      	sub	sp, #68	; 0x44
 800e8b6:	af17      	add	r7, sp, #92	; 0x5c
 800e8b8:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	d044      	beq.n	800e94a <rcl_init_options_init+0x9a>
 800e8c0:	6803      	ldr	r3, [r0, #0]
 800e8c2:	4606      	mov	r6, r0
 800e8c4:	b133      	cbz	r3, 800e8d4 <rcl_init_options_init+0x24>
 800e8c6:	2464      	movs	r4, #100	; 0x64
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	b011      	add	sp, #68	; 0x44
 800e8cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e8d0:	b004      	add	sp, #16
 800e8d2:	4770      	bx	lr
 800e8d4:	4638      	mov	r0, r7
 800e8d6:	f001 f8f7 	bl	800fac8 <rcutils_allocator_is_valid>
 800e8da:	2800      	cmp	r0, #0
 800e8dc:	d035      	beq.n	800e94a <rcl_init_options_init+0x9a>
 800e8de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e8e0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e8e2:	2050      	movs	r0, #80	; 0x50
 800e8e4:	4798      	blx	r3
 800e8e6:	4604      	mov	r4, r0
 800e8e8:	6030      	str	r0, [r6, #0]
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	d02f      	beq.n	800e94e <rcl_init_options_init+0x9e>
 800e8ee:	46bc      	mov	ip, r7
 800e8f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e8f4:	4625      	mov	r5, r4
 800e8f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e8f8:	f8dc 3000 	ldr.w	r3, [ip]
 800e8fc:	602b      	str	r3, [r5, #0]
 800e8fe:	a802      	add	r0, sp, #8
 800e900:	ad02      	add	r5, sp, #8
 800e902:	f001 fb71 	bl	800ffe8 <rmw_get_zero_initialized_init_options>
 800e906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e908:	3418      	adds	r4, #24
 800e90a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e90c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e90e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e914:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e918:	6833      	ldr	r3, [r6, #0]
 800e91a:	e884 0003 	stmia.w	r4, {r0, r1}
 800e91e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800e922:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e926:	f103 0018 	add.w	r0, r3, #24
 800e92a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800e92e:	f001 fc23 	bl	8010178 <rmw_init_options_init>
 800e932:	4604      	mov	r4, r0
 800e934:	2800      	cmp	r0, #0
 800e936:	d0c7      	beq.n	800e8c8 <rcl_init_options_init+0x18>
 800e938:	6830      	ldr	r0, [r6, #0]
 800e93a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e93c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e93e:	4798      	blx	r3
 800e940:	4620      	mov	r0, r4
 800e942:	f007 fa85 	bl	8015e50 <rcl_convert_rmw_ret_to_rcl_ret>
 800e946:	4604      	mov	r4, r0
 800e948:	e7be      	b.n	800e8c8 <rcl_init_options_init+0x18>
 800e94a:	240b      	movs	r4, #11
 800e94c:	e7bc      	b.n	800e8c8 <rcl_init_options_init+0x18>
 800e94e:	240a      	movs	r4, #10
 800e950:	e7ba      	b.n	800e8c8 <rcl_init_options_init+0x18>
 800e952:	bf00      	nop

0800e954 <rcl_init_options_fini>:
 800e954:	b570      	push	{r4, r5, r6, lr}
 800e956:	b086      	sub	sp, #24
 800e958:	b1c0      	cbz	r0, 800e98c <rcl_init_options_fini+0x38>
 800e95a:	6804      	ldr	r4, [r0, #0]
 800e95c:	4606      	mov	r6, r0
 800e95e:	b1ac      	cbz	r4, 800e98c <rcl_init_options_fini+0x38>
 800e960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e962:	ad01      	add	r5, sp, #4
 800e964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e966:	6823      	ldr	r3, [r4, #0]
 800e968:	602b      	str	r3, [r5, #0]
 800e96a:	a801      	add	r0, sp, #4
 800e96c:	f001 f8ac 	bl	800fac8 <rcutils_allocator_is_valid>
 800e970:	b160      	cbz	r0, 800e98c <rcl_init_options_fini+0x38>
 800e972:	6830      	ldr	r0, [r6, #0]
 800e974:	3018      	adds	r0, #24
 800e976:	f001 fc9b 	bl	80102b0 <rmw_init_options_fini>
 800e97a:	4604      	mov	r4, r0
 800e97c:	b950      	cbnz	r0, 800e994 <rcl_init_options_fini+0x40>
 800e97e:	6830      	ldr	r0, [r6, #0]
 800e980:	9b02      	ldr	r3, [sp, #8]
 800e982:	9905      	ldr	r1, [sp, #20]
 800e984:	4798      	blx	r3
 800e986:	4620      	mov	r0, r4
 800e988:	b006      	add	sp, #24
 800e98a:	bd70      	pop	{r4, r5, r6, pc}
 800e98c:	240b      	movs	r4, #11
 800e98e:	4620      	mov	r0, r4
 800e990:	b006      	add	sp, #24
 800e992:	bd70      	pop	{r4, r5, r6, pc}
 800e994:	f007 fa5c 	bl	8015e50 <rcl_convert_rmw_ret_to_rcl_ret>
 800e998:	4604      	mov	r4, r0
 800e99a:	e7f8      	b.n	800e98e <rcl_init_options_fini+0x3a>

0800e99c <rcl_init_options_copy>:
 800e99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a0:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	d067      	beq.n	800ea78 <rcl_init_options_copy+0xdc>
 800e9a8:	6806      	ldr	r6, [r0, #0]
 800e9aa:	4605      	mov	r5, r0
 800e9ac:	2e00      	cmp	r6, #0
 800e9ae:	d063      	beq.n	800ea78 <rcl_init_options_copy+0xdc>
 800e9b0:	460c      	mov	r4, r1
 800e9b2:	2900      	cmp	r1, #0
 800e9b4:	d060      	beq.n	800ea78 <rcl_init_options_copy+0xdc>
 800e9b6:	680b      	ldr	r3, [r1, #0]
 800e9b8:	b12b      	cbz	r3, 800e9c6 <rcl_init_options_copy+0x2a>
 800e9ba:	2664      	movs	r6, #100	; 0x64
 800e9bc:	4630      	mov	r0, r6
 800e9be:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 800e9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e9c8:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800e9cc:	4647      	mov	r7, r8
 800e9ce:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e9d0:	4640      	mov	r0, r8
 800e9d2:	6833      	ldr	r3, [r6, #0]
 800e9d4:	603b      	str	r3, [r7, #0]
 800e9d6:	f001 f877 	bl	800fac8 <rcutils_allocator_is_valid>
 800e9da:	2800      	cmp	r0, #0
 800e9dc:	d04c      	beq.n	800ea78 <rcl_init_options_copy+0xdc>
 800e9de:	f8d8 3000 	ldr.w	r3, [r8]
 800e9e2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e9e6:	2050      	movs	r0, #80	; 0x50
 800e9e8:	4798      	blx	r3
 800e9ea:	4606      	mov	r6, r0
 800e9ec:	6020      	str	r0, [r4, #0]
 800e9ee:	2800      	cmp	r0, #0
 800e9f0:	d07c      	beq.n	800eaec <rcl_init_options_copy+0x150>
 800e9f2:	46c4      	mov	ip, r8
 800e9f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e9f8:	4637      	mov	r7, r6
 800e9fa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e9fc:	f8dc 3000 	ldr.w	r3, [ip]
 800ea00:	603b      	str	r3, [r7, #0]
 800ea02:	a802      	add	r0, sp, #8
 800ea04:	af02      	add	r7, sp, #8
 800ea06:	f001 faef 	bl	800ffe8 <rmw_get_zero_initialized_init_options>
 800ea0a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ea0c:	3618      	adds	r6, #24
 800ea0e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ea10:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ea12:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ea14:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ea16:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ea18:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ea1c:	e886 0003 	stmia.w	r6, {r0, r1}
 800ea20:	ab13      	add	r3, sp, #76	; 0x4c
 800ea22:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ea26:	6823      	ldr	r3, [r4, #0]
 800ea28:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ea2c:	f103 0018 	add.w	r0, r3, #24
 800ea30:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800ea34:	f001 fba0 	bl	8010178 <rmw_init_options_init>
 800ea38:	4606      	mov	r6, r0
 800ea3a:	bb18      	cbnz	r0, 800ea84 <rcl_init_options_copy+0xe8>
 800ea3c:	682f      	ldr	r7, [r5, #0]
 800ea3e:	f8d4 c000 	ldr.w	ip, [r4]
 800ea42:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ea44:	4666      	mov	r6, ip
 800ea46:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	6033      	str	r3, [r6, #0]
 800ea4c:	f10c 0018 	add.w	r0, ip, #24
 800ea50:	f001 fc2e 	bl	80102b0 <rmw_init_options_fini>
 800ea54:	4607      	mov	r7, r0
 800ea56:	b310      	cbz	r0, 800ea9e <rcl_init_options_copy+0x102>
 800ea58:	4640      	mov	r0, r8
 800ea5a:	f001 f8ff 	bl	800fc5c <rcutils_get_error_string>
 800ea5e:	f001 f925 	bl	800fcac <rcutils_reset_error>
 800ea62:	4620      	mov	r0, r4
 800ea64:	f7ff ff76 	bl	800e954 <rcl_init_options_fini>
 800ea68:	4606      	mov	r6, r0
 800ea6a:	2800      	cmp	r0, #0
 800ea6c:	d1a6      	bne.n	800e9bc <rcl_init_options_copy+0x20>
 800ea6e:	4638      	mov	r0, r7
 800ea70:	f007 f9ee 	bl	8015e50 <rcl_convert_rmw_ret_to_rcl_ret>
 800ea74:	4606      	mov	r6, r0
 800ea76:	e7a1      	b.n	800e9bc <rcl_init_options_copy+0x20>
 800ea78:	260b      	movs	r6, #11
 800ea7a:	4630      	mov	r0, r6
 800ea7c:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 800ea80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea84:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ea88:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ea8c:	6820      	ldr	r0, [r4, #0]
 800ea8e:	4798      	blx	r3
 800ea90:	4630      	mov	r0, r6
 800ea92:	f007 f9dd 	bl	8015e50 <rcl_convert_rmw_ret_to_rcl_ret>
 800ea96:	4606      	mov	r6, r0
 800ea98:	2800      	cmp	r0, #0
 800ea9a:	d0cf      	beq.n	800ea3c <rcl_init_options_copy+0xa0>
 800ea9c:	e78e      	b.n	800e9bc <rcl_init_options_copy+0x20>
 800ea9e:	a802      	add	r0, sp, #8
 800eaa0:	ae02      	add	r6, sp, #8
 800eaa2:	6827      	ldr	r7, [r4, #0]
 800eaa4:	f001 faa0 	bl	800ffe8 <rmw_get_zero_initialized_init_options>
 800eaa8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800eaaa:	3718      	adds	r7, #24
 800eaac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800eaae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800eab0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800eab2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800eab4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800eab6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800eaba:	682a      	ldr	r2, [r5, #0]
 800eabc:	6823      	ldr	r3, [r4, #0]
 800eabe:	e887 0003 	stmia.w	r7, {r0, r1}
 800eac2:	f102 0018 	add.w	r0, r2, #24
 800eac6:	f103 0118 	add.w	r1, r3, #24
 800eaca:	f001 fbad 	bl	8010228 <rmw_init_options_copy>
 800eace:	4606      	mov	r6, r0
 800ead0:	2800      	cmp	r0, #0
 800ead2:	f43f af73 	beq.w	800e9bc <rcl_init_options_copy+0x20>
 800ead6:	4640      	mov	r0, r8
 800ead8:	f001 f8c0 	bl	800fc5c <rcutils_get_error_string>
 800eadc:	f001 f8e6 	bl	800fcac <rcutils_reset_error>
 800eae0:	4620      	mov	r0, r4
 800eae2:	f7ff ff37 	bl	800e954 <rcl_init_options_fini>
 800eae6:	b118      	cbz	r0, 800eaf0 <rcl_init_options_copy+0x154>
 800eae8:	4606      	mov	r6, r0
 800eaea:	e767      	b.n	800e9bc <rcl_init_options_copy+0x20>
 800eaec:	260a      	movs	r6, #10
 800eaee:	e765      	b.n	800e9bc <rcl_init_options_copy+0x20>
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	f007 f9ad 	bl	8015e50 <rcl_convert_rmw_ret_to_rcl_ret>
 800eaf6:	4606      	mov	r6, r0
 800eaf8:	e760      	b.n	800e9bc <rcl_init_options_copy+0x20>
 800eafa:	bf00      	nop

0800eafc <rcl_node_get_default_options>:
 800eafc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eafe:	b087      	sub	sp, #28
 800eb00:	4607      	mov	r7, r0
 800eb02:	466d      	mov	r5, sp
 800eb04:	4668      	mov	r0, sp
 800eb06:	f000 ffd1 	bl	800faac <rcutils_get_default_allocator>
 800eb0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb0c:	4c08      	ldr	r4, [pc, #32]	; (800eb30 <rcl_node_get_default_options+0x34>)
 800eb0e:	f8d5 c000 	ldr.w	ip, [r5]
 800eb12:	1d26      	adds	r6, r4, #4
 800eb14:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800eb16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb18:	463d      	mov	r5, r7
 800eb1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb1c:	f8c6 c000 	str.w	ip, [r6]
 800eb20:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800eb24:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800eb28:	4638      	mov	r0, r7
 800eb2a:	b007      	add	sp, #28
 800eb2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	20000014 	.word	0x20000014

0800eb34 <rcl_node_options_copy>:
 800eb34:	b1c8      	cbz	r0, 800eb6a <rcl_node_options_copy+0x36>
 800eb36:	b4f0      	push	{r4, r5, r6, r7}
 800eb38:	460f      	mov	r7, r1
 800eb3a:	b199      	cbz	r1, 800eb64 <rcl_node_options_copy+0x30>
 800eb3c:	4288      	cmp	r0, r1
 800eb3e:	4606      	mov	r6, r0
 800eb40:	d010      	beq.n	800eb64 <rcl_node_options_copy+0x30>
 800eb42:	4605      	mov	r5, r0
 800eb44:	460c      	mov	r4, r1
 800eb46:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb4a:	f844 3b04 	str.w	r3, [r4], #4
 800eb4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb52:	7e32      	ldrb	r2, [r6, #24]
 800eb54:	6829      	ldr	r1, [r5, #0]
 800eb56:	7e73      	ldrb	r3, [r6, #25]
 800eb58:	6021      	str	r1, [r4, #0]
 800eb5a:	2000      	movs	r0, #0
 800eb5c:	763a      	strb	r2, [r7, #24]
 800eb5e:	767b      	strb	r3, [r7, #25]
 800eb60:	bcf0      	pop	{r4, r5, r6, r7}
 800eb62:	4770      	bx	lr
 800eb64:	200b      	movs	r0, #11
 800eb66:	bcf0      	pop	{r4, r5, r6, r7}
 800eb68:	4770      	bx	lr
 800eb6a:	200b      	movs	r0, #11
 800eb6c:	4770      	bx	lr
 800eb6e:	bf00      	nop

0800eb70 <rcl_get_zero_initialized_publisher>:
 800eb70:	4b01      	ldr	r3, [pc, #4]	; (800eb78 <rcl_get_zero_initialized_publisher+0x8>)
 800eb72:	6818      	ldr	r0, [r3, #0]
 800eb74:	4770      	bx	lr
 800eb76:	bf00      	nop
 800eb78:	0801f6e0 	.word	0x0801f6e0

0800eb7c <rcl_publisher_init>:
 800eb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb80:	b091      	sub	sp, #68	; 0x44
 800eb82:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800eb84:	b3d7      	cbz	r7, 800ebfc <rcl_publisher_init+0x80>
 800eb86:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800eb8a:	4604      	mov	r4, r0
 800eb8c:	4648      	mov	r0, r9
 800eb8e:	4688      	mov	r8, r1
 800eb90:	4616      	mov	r6, r2
 800eb92:	461d      	mov	r5, r3
 800eb94:	f000 ff98 	bl	800fac8 <rcutils_allocator_is_valid>
 800eb98:	b380      	cbz	r0, 800ebfc <rcl_publisher_init+0x80>
 800eb9a:	b37c      	cbz	r4, 800ebfc <rcl_publisher_init+0x80>
 800eb9c:	f8d4 a000 	ldr.w	sl, [r4]
 800eba0:	f1ba 0f00 	cmp.w	sl, #0
 800eba4:	d004      	beq.n	800ebb0 <rcl_publisher_init+0x34>
 800eba6:	2564      	movs	r5, #100	; 0x64
 800eba8:	4628      	mov	r0, r5
 800ebaa:	b011      	add	sp, #68	; 0x44
 800ebac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebb0:	4640      	mov	r0, r8
 800ebb2:	f007 fe0d 	bl	80167d0 <rcl_node_is_valid>
 800ebb6:	b330      	cbz	r0, 800ec06 <rcl_publisher_init+0x8a>
 800ebb8:	b306      	cbz	r6, 800ebfc <rcl_publisher_init+0x80>
 800ebba:	b1fd      	cbz	r5, 800ebfc <rcl_publisher_init+0x80>
 800ebbc:	46ce      	mov	lr, r9
 800ebbe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ebc2:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800ebc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ebca:	f8de 3000 	ldr.w	r3, [lr]
 800ebce:	f8cc 3000 	str.w	r3, [ip]
 800ebd2:	f001 f889 	bl	800fce8 <rcutils_get_zero_initialized_string_map>
 800ebd6:	ab10      	add	r3, sp, #64	; 0x40
 800ebd8:	4684      	mov	ip, r0
 800ebda:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800ebde:	f8cd c020 	str.w	ip, [sp, #32]
 800ebe2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ebe6:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800ebea:	4651      	mov	r1, sl
 800ebec:	a808      	add	r0, sp, #32
 800ebee:	f001 f8f5 	bl	800fddc <rcutils_string_map_init>
 800ebf2:	b150      	cbz	r0, 800ec0a <rcl_publisher_init+0x8e>
 800ebf4:	280a      	cmp	r0, #10
 800ebf6:	d013      	beq.n	800ec20 <rcl_publisher_init+0xa4>
 800ebf8:	2501      	movs	r5, #1
 800ebfa:	e7d5      	b.n	800eba8 <rcl_publisher_init+0x2c>
 800ebfc:	250b      	movs	r5, #11
 800ebfe:	4628      	mov	r0, r5
 800ec00:	b011      	add	sp, #68	; 0x44
 800ec02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec06:	25c8      	movs	r5, #200	; 0xc8
 800ec08:	e7ce      	b.n	800eba8 <rcl_publisher_init+0x2c>
 800ec0a:	a808      	add	r0, sp, #32
 800ec0c:	f007 fb28 	bl	8016260 <rcl_get_default_topic_name_substitutions>
 800ec10:	4682      	mov	sl, r0
 800ec12:	b138      	cbz	r0, 800ec24 <rcl_publisher_init+0xa8>
 800ec14:	a808      	add	r0, sp, #32
 800ec16:	f001 f921 	bl	800fe5c <rcutils_string_map_fini>
 800ec1a:	f1ba 0f0a 	cmp.w	sl, #10
 800ec1e:	d1eb      	bne.n	800ebf8 <rcl_publisher_init+0x7c>
 800ec20:	250a      	movs	r5, #10
 800ec22:	e7c1      	b.n	800eba8 <rcl_publisher_init+0x2c>
 800ec24:	4640      	mov	r0, r8
 800ec26:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ec2a:	f007 fddb 	bl	80167e4 <rcl_node_get_name>
 800ec2e:	4682      	mov	sl, r0
 800ec30:	4640      	mov	r0, r8
 800ec32:	f007 fddf 	bl	80167f4 <rcl_node_get_namespace>
 800ec36:	4686      	mov	lr, r0
 800ec38:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800ec3c:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800ec40:	46ec      	mov	ip, sp
 800ec42:	f8cd b014 	str.w	fp, [sp, #20]
 800ec46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec4a:	f8d9 3000 	ldr.w	r3, [r9]
 800ec4e:	f8cc 3000 	str.w	r3, [ip]
 800ec52:	4628      	mov	r0, r5
 800ec54:	4651      	mov	r1, sl
 800ec56:	4672      	mov	r2, lr
 800ec58:	ab08      	add	r3, sp, #32
 800ec5a:	f007 f99b 	bl	8015f94 <rcl_expand_topic_name>
 800ec5e:	4605      	mov	r5, r0
 800ec60:	a808      	add	r0, sp, #32
 800ec62:	f001 f8fb 	bl	800fe5c <rcutils_string_map_fini>
 800ec66:	b920      	cbnz	r0, 800ec72 <rcl_publisher_init+0xf6>
 800ec68:	b15d      	cbz	r5, 800ec82 <rcl_publisher_init+0x106>
 800ec6a:	2d67      	cmp	r5, #103	; 0x67
 800ec6c:	d002      	beq.n	800ec74 <rcl_publisher_init+0xf8>
 800ec6e:	2d69      	cmp	r5, #105	; 0x69
 800ec70:	d05f      	beq.n	800ed32 <rcl_publisher_init+0x1b6>
 800ec72:	2501      	movs	r5, #1
 800ec74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec76:	2800      	cmp	r0, #0
 800ec78:	d096      	beq.n	800eba8 <rcl_publisher_init+0x2c>
 800ec7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec7c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec7e:	4798      	blx	r3
 800ec80:	e792      	b.n	800eba8 <rcl_publisher_init+0x2c>
 800ec82:	4640      	mov	r0, r8
 800ec84:	f007 fdbe 	bl	8016804 <rcl_node_get_options>
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	d0f2      	beq.n	800ec72 <rcl_publisher_init+0xf6>
 800ec8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec8e:	f7f1 faa9 	bl	80001e4 <strlen>
 800ec92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec94:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec96:	3001      	adds	r0, #1
 800ec98:	4798      	blx	r3
 800ec9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec9c:	9107      	str	r1, [sp, #28]
 800ec9e:	4681      	mov	r9, r0
 800eca0:	4608      	mov	r0, r1
 800eca2:	f7f1 fa9f 	bl	80001e4 <strlen>
 800eca6:	9907      	ldr	r1, [sp, #28]
 800eca8:	1c42      	adds	r2, r0, #1
 800ecaa:	4648      	mov	r0, r9
 800ecac:	f00b fac6 	bl	801a23c <memcpy>
 800ecb0:	462a      	mov	r2, r5
 800ecb2:	4648      	mov	r0, r9
 800ecb4:	a90a      	add	r1, sp, #40	; 0x28
 800ecb6:	f001 f9c3 	bl	8010040 <rmw_validate_full_topic_name>
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	d137      	bne.n	800ed2e <rcl_publisher_init+0x1b2>
 800ecbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d138      	bne.n	800ed36 <rcl_publisher_init+0x1ba>
 800ecc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecc6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ecc8:	20c0      	movs	r0, #192	; 0xc0
 800ecca:	4798      	blx	r3
 800eccc:	6020      	str	r0, [r4, #0]
 800ecce:	b3a0      	cbz	r0, 800ed3a <rcl_publisher_init+0x1be>
 800ecd0:	4640      	mov	r0, r8
 800ecd2:	f007 fd9f 	bl	8016814 <rcl_node_get_rmw_handle>
 800ecd6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ecda:	9300      	str	r3, [sp, #0]
 800ecdc:	4631      	mov	r1, r6
 800ecde:	463b      	mov	r3, r7
 800ece0:	464a      	mov	r2, r9
 800ece2:	6825      	ldr	r5, [r4, #0]
 800ece4:	f001 fdea 	bl	80108bc <rmw_create_publisher>
 800ece8:	6821      	ldr	r1, [r4, #0]
 800ecea:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800ecee:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800ecf2:	b388      	cbz	r0, 800ed58 <rcl_publisher_init+0x1dc>
 800ecf4:	3168      	adds	r1, #104	; 0x68
 800ecf6:	f001 fec7 	bl	8010a88 <rmw_publisher_get_actual_qos>
 800ecfa:	6823      	ldr	r3, [r4, #0]
 800ecfc:	4605      	mov	r5, r0
 800ecfe:	b9f0      	cbnz	r0, 800ed3e <rcl_publisher_init+0x1c2>
 800ed00:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800ed04:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800ed08:	4618      	mov	r0, r3
 800ed0a:	2268      	movs	r2, #104	; 0x68
 800ed0c:	4639      	mov	r1, r7
 800ed0e:	f00b fa95 	bl	801a23c <memcpy>
 800ed12:	f8d8 2000 	ldr.w	r2, [r8]
 800ed16:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800ed1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed1c:	b110      	cbz	r0, 800ed24 <rcl_publisher_init+0x1a8>
 800ed1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed20:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ed22:	4798      	blx	r3
 800ed24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed26:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ed28:	4648      	mov	r0, r9
 800ed2a:	4798      	blx	r3
 800ed2c:	e73c      	b.n	800eba8 <rcl_publisher_init+0x2c>
 800ed2e:	2501      	movs	r5, #1
 800ed30:	e7f3      	b.n	800ed1a <rcl_publisher_init+0x19e>
 800ed32:	2567      	movs	r5, #103	; 0x67
 800ed34:	e79e      	b.n	800ec74 <rcl_publisher_init+0xf8>
 800ed36:	2567      	movs	r5, #103	; 0x67
 800ed38:	e7ef      	b.n	800ed1a <rcl_publisher_init+0x19e>
 800ed3a:	250a      	movs	r5, #10
 800ed3c:	e7ed      	b.n	800ed1a <rcl_publisher_init+0x19e>
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d0f5      	beq.n	800ed2e <rcl_publisher_init+0x1b2>
 800ed42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ed46:	b13b      	cbz	r3, 800ed58 <rcl_publisher_init+0x1dc>
 800ed48:	4640      	mov	r0, r8
 800ed4a:	f007 fd63 	bl	8016814 <rcl_node_get_rmw_handle>
 800ed4e:	6823      	ldr	r3, [r4, #0]
 800ed50:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800ed54:	f001 fe9a 	bl	8010a8c <rmw_destroy_publisher>
 800ed58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed5a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ed5c:	6820      	ldr	r0, [r4, #0]
 800ed5e:	4798      	blx	r3
 800ed60:	2300      	movs	r3, #0
 800ed62:	6023      	str	r3, [r4, #0]
 800ed64:	2501      	movs	r5, #1
 800ed66:	e7d8      	b.n	800ed1a <rcl_publisher_init+0x19e>

0800ed68 <rcl_publisher_get_default_options>:
 800ed68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed6a:	4f0e      	ldr	r7, [pc, #56]	; (800eda4 <rcl_publisher_get_default_options+0x3c>)
 800ed6c:	490e      	ldr	r1, [pc, #56]	; (800eda8 <rcl_publisher_get_default_options+0x40>)
 800ed6e:	b087      	sub	sp, #28
 800ed70:	4606      	mov	r6, r0
 800ed72:	2250      	movs	r2, #80	; 0x50
 800ed74:	4638      	mov	r0, r7
 800ed76:	f00b fa61 	bl	801a23c <memcpy>
 800ed7a:	466c      	mov	r4, sp
 800ed7c:	4668      	mov	r0, sp
 800ed7e:	f000 fe95 	bl	800faac <rcutils_get_default_allocator>
 800ed82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed84:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800ed88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed8a:	6823      	ldr	r3, [r4, #0]
 800ed8c:	602b      	str	r3, [r5, #0]
 800ed8e:	f001 f93b 	bl	8010008 <rmw_get_default_publisher_options>
 800ed92:	4639      	mov	r1, r7
 800ed94:	6678      	str	r0, [r7, #100]	; 0x64
 800ed96:	2268      	movs	r2, #104	; 0x68
 800ed98:	4630      	mov	r0, r6
 800ed9a:	f00b fa4f 	bl	801a23c <memcpy>
 800ed9e:	4630      	mov	r0, r6
 800eda0:	b007      	add	sp, #28
 800eda2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eda4:	20010350 	.word	0x20010350
 800eda8:	0801f6e8 	.word	0x0801f6e8

0800edac <rcl_publish>:
 800edac:	b1f8      	cbz	r0, 800edee <rcl_publish+0x42>
 800edae:	6803      	ldr	r3, [r0, #0]
 800edb0:	b570      	push	{r4, r5, r6, lr}
 800edb2:	4604      	mov	r4, r0
 800edb4:	b1b3      	cbz	r3, 800ede4 <rcl_publish+0x38>
 800edb6:	4616      	mov	r6, r2
 800edb8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800edbc:	b192      	cbz	r2, 800ede4 <rcl_publish+0x38>
 800edbe:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800edc2:	460d      	mov	r5, r1
 800edc4:	f007 f868 	bl	8015e98 <rcl_context_is_valid>
 800edc8:	b160      	cbz	r0, 800ede4 <rcl_publish+0x38>
 800edca:	6823      	ldr	r3, [r4, #0]
 800edcc:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800edd0:	b140      	cbz	r0, 800ede4 <rcl_publish+0x38>
 800edd2:	b155      	cbz	r5, 800edea <rcl_publish+0x3e>
 800edd4:	4632      	mov	r2, r6
 800edd6:	4629      	mov	r1, r5
 800edd8:	f001 fd10 	bl	80107fc <rmw_publish>
 800eddc:	3800      	subs	r0, #0
 800edde:	bf18      	it	ne
 800ede0:	2001      	movne	r0, #1
 800ede2:	bd70      	pop	{r4, r5, r6, pc}
 800ede4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ede8:	bd70      	pop	{r4, r5, r6, pc}
 800edea:	200b      	movs	r0, #11
 800edec:	bd70      	pop	{r4, r5, r6, pc}
 800edee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800edf2:	4770      	bx	lr

0800edf4 <rcl_get_zero_initialized_subscription>:
 800edf4:	4b01      	ldr	r3, [pc, #4]	; (800edfc <rcl_get_zero_initialized_subscription+0x8>)
 800edf6:	6818      	ldr	r0, [r3, #0]
 800edf8:	4770      	bx	lr
 800edfa:	bf00      	nop
 800edfc:	0801f738 	.word	0x0801f738

0800ee00 <rcl_subscription_init>:
 800ee00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee04:	b091      	sub	sp, #68	; 0x44
 800ee06:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ee08:	b1d7      	cbz	r7, 800ee40 <rcl_subscription_init+0x40>
 800ee0a:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800ee0e:	4604      	mov	r4, r0
 800ee10:	4648      	mov	r0, r9
 800ee12:	4688      	mov	r8, r1
 800ee14:	4616      	mov	r6, r2
 800ee16:	461d      	mov	r5, r3
 800ee18:	f000 fe56 	bl	800fac8 <rcutils_allocator_is_valid>
 800ee1c:	b180      	cbz	r0, 800ee40 <rcl_subscription_init+0x40>
 800ee1e:	b17c      	cbz	r4, 800ee40 <rcl_subscription_init+0x40>
 800ee20:	4640      	mov	r0, r8
 800ee22:	f007 fcd5 	bl	80167d0 <rcl_node_is_valid>
 800ee26:	b380      	cbz	r0, 800ee8a <rcl_subscription_init+0x8a>
 800ee28:	b156      	cbz	r6, 800ee40 <rcl_subscription_init+0x40>
 800ee2a:	b14d      	cbz	r5, 800ee40 <rcl_subscription_init+0x40>
 800ee2c:	f8d4 a000 	ldr.w	sl, [r4]
 800ee30:	f1ba 0f00 	cmp.w	sl, #0
 800ee34:	d009      	beq.n	800ee4a <rcl_subscription_init+0x4a>
 800ee36:	2564      	movs	r5, #100	; 0x64
 800ee38:	4628      	mov	r0, r5
 800ee3a:	b011      	add	sp, #68	; 0x44
 800ee3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee40:	250b      	movs	r5, #11
 800ee42:	4628      	mov	r0, r5
 800ee44:	b011      	add	sp, #68	; 0x44
 800ee46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee4a:	46ce      	mov	lr, r9
 800ee4c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee50:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800ee54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee58:	f8de 3000 	ldr.w	r3, [lr]
 800ee5c:	f8cc 3000 	str.w	r3, [ip]
 800ee60:	f000 ff42 	bl	800fce8 <rcutils_get_zero_initialized_string_map>
 800ee64:	ab10      	add	r3, sp, #64	; 0x40
 800ee66:	4684      	mov	ip, r0
 800ee68:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800ee6c:	f8cd c020 	str.w	ip, [sp, #32]
 800ee70:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ee74:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800ee78:	4651      	mov	r1, sl
 800ee7a:	a808      	add	r0, sp, #32
 800ee7c:	f000 ffae 	bl	800fddc <rcutils_string_map_init>
 800ee80:	b140      	cbz	r0, 800ee94 <rcl_subscription_init+0x94>
 800ee82:	280a      	cmp	r0, #10
 800ee84:	d011      	beq.n	800eeaa <rcl_subscription_init+0xaa>
 800ee86:	2501      	movs	r5, #1
 800ee88:	e7db      	b.n	800ee42 <rcl_subscription_init+0x42>
 800ee8a:	25c8      	movs	r5, #200	; 0xc8
 800ee8c:	4628      	mov	r0, r5
 800ee8e:	b011      	add	sp, #68	; 0x44
 800ee90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee94:	a808      	add	r0, sp, #32
 800ee96:	f007 f9e3 	bl	8016260 <rcl_get_default_topic_name_substitutions>
 800ee9a:	4682      	mov	sl, r0
 800ee9c:	b138      	cbz	r0, 800eeae <rcl_subscription_init+0xae>
 800ee9e:	a808      	add	r0, sp, #32
 800eea0:	f000 ffdc 	bl	800fe5c <rcutils_string_map_fini>
 800eea4:	f1ba 0f0a 	cmp.w	sl, #10
 800eea8:	d1ed      	bne.n	800ee86 <rcl_subscription_init+0x86>
 800eeaa:	250a      	movs	r5, #10
 800eeac:	e7c9      	b.n	800ee42 <rcl_subscription_init+0x42>
 800eeae:	4640      	mov	r0, r8
 800eeb0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800eeb4:	f007 fc96 	bl	80167e4 <rcl_node_get_name>
 800eeb8:	4682      	mov	sl, r0
 800eeba:	4640      	mov	r0, r8
 800eebc:	f007 fc9a 	bl	80167f4 <rcl_node_get_namespace>
 800eec0:	4686      	mov	lr, r0
 800eec2:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800eec6:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800eeca:	46ec      	mov	ip, sp
 800eecc:	f8cd b014 	str.w	fp, [sp, #20]
 800eed0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eed4:	f8d9 3000 	ldr.w	r3, [r9]
 800eed8:	f8cc 3000 	str.w	r3, [ip]
 800eedc:	4628      	mov	r0, r5
 800eede:	4651      	mov	r1, sl
 800eee0:	4672      	mov	r2, lr
 800eee2:	ab08      	add	r3, sp, #32
 800eee4:	f007 f856 	bl	8015f94 <rcl_expand_topic_name>
 800eee8:	4605      	mov	r5, r0
 800eeea:	a808      	add	r0, sp, #32
 800eeec:	f000 ffb6 	bl	800fe5c <rcutils_string_map_fini>
 800eef0:	b920      	cbnz	r0, 800eefc <rcl_subscription_init+0xfc>
 800eef2:	b15d      	cbz	r5, 800ef0c <rcl_subscription_init+0x10c>
 800eef4:	2d67      	cmp	r5, #103	; 0x67
 800eef6:	d002      	beq.n	800eefe <rcl_subscription_init+0xfe>
 800eef8:	2d69      	cmp	r5, #105	; 0x69
 800eefa:	d05a      	beq.n	800efb2 <rcl_subscription_init+0x1b2>
 800eefc:	2501      	movs	r5, #1
 800eefe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef00:	2800      	cmp	r0, #0
 800ef02:	d09e      	beq.n	800ee42 <rcl_subscription_init+0x42>
 800ef04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef06:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ef08:	4798      	blx	r3
 800ef0a:	e79a      	b.n	800ee42 <rcl_subscription_init+0x42>
 800ef0c:	4640      	mov	r0, r8
 800ef0e:	f007 fc79 	bl	8016804 <rcl_node_get_options>
 800ef12:	2800      	cmp	r0, #0
 800ef14:	d0f2      	beq.n	800eefc <rcl_subscription_init+0xfc>
 800ef16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef18:	f7f1 f964 	bl	80001e4 <strlen>
 800ef1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef1e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ef20:	3001      	adds	r0, #1
 800ef22:	4798      	blx	r3
 800ef24:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef26:	9107      	str	r1, [sp, #28]
 800ef28:	4681      	mov	r9, r0
 800ef2a:	4608      	mov	r0, r1
 800ef2c:	f7f1 f95a 	bl	80001e4 <strlen>
 800ef30:	9907      	ldr	r1, [sp, #28]
 800ef32:	1c42      	adds	r2, r0, #1
 800ef34:	4648      	mov	r0, r9
 800ef36:	f00b f981 	bl	801a23c <memcpy>
 800ef3a:	462a      	mov	r2, r5
 800ef3c:	4648      	mov	r0, r9
 800ef3e:	a90a      	add	r1, sp, #40	; 0x28
 800ef40:	f001 f87e 	bl	8010040 <rmw_validate_full_topic_name>
 800ef44:	2800      	cmp	r0, #0
 800ef46:	d132      	bne.n	800efae <rcl_subscription_init+0x1ae>
 800ef48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d133      	bne.n	800efb6 <rcl_subscription_init+0x1b6>
 800ef4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef50:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ef52:	20c8      	movs	r0, #200	; 0xc8
 800ef54:	4798      	blx	r3
 800ef56:	6020      	str	r0, [r4, #0]
 800ef58:	b378      	cbz	r0, 800efba <rcl_subscription_init+0x1ba>
 800ef5a:	4640      	mov	r0, r8
 800ef5c:	f007 fc5a 	bl	8016814 <rcl_node_get_rmw_handle>
 800ef60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	4631      	mov	r1, r6
 800ef68:	463b      	mov	r3, r7
 800ef6a:	464a      	mov	r2, r9
 800ef6c:	6825      	ldr	r5, [r4, #0]
 800ef6e:	f001 fe0f 	bl	8010b90 <rmw_create_subscription>
 800ef72:	6821      	ldr	r1, [r4, #0]
 800ef74:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800ef78:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800ef7c:	b368      	cbz	r0, 800efda <rcl_subscription_init+0x1da>
 800ef7e:	3170      	adds	r1, #112	; 0x70
 800ef80:	f001 fef2 	bl	8010d68 <rmw_subscription_get_actual_qos>
 800ef84:	4605      	mov	r5, r0
 800ef86:	b9d0      	cbnz	r0, 800efbe <rcl_subscription_init+0x1be>
 800ef88:	6820      	ldr	r0, [r4, #0]
 800ef8a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ef8e:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800ef92:	2270      	movs	r2, #112	; 0x70
 800ef94:	4639      	mov	r1, r7
 800ef96:	f00b f951 	bl	801a23c <memcpy>
 800ef9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef9c:	b110      	cbz	r0, 800efa4 <rcl_subscription_init+0x1a4>
 800ef9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efa0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800efa2:	4798      	blx	r3
 800efa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efa6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800efa8:	4648      	mov	r0, r9
 800efaa:	4798      	blx	r3
 800efac:	e749      	b.n	800ee42 <rcl_subscription_init+0x42>
 800efae:	2501      	movs	r5, #1
 800efb0:	e7f3      	b.n	800ef9a <rcl_subscription_init+0x19a>
 800efb2:	2567      	movs	r5, #103	; 0x67
 800efb4:	e7a3      	b.n	800eefe <rcl_subscription_init+0xfe>
 800efb6:	2567      	movs	r5, #103	; 0x67
 800efb8:	e7ef      	b.n	800ef9a <rcl_subscription_init+0x19a>
 800efba:	250a      	movs	r5, #10
 800efbc:	e7ed      	b.n	800ef9a <rcl_subscription_init+0x19a>
 800efbe:	6823      	ldr	r3, [r4, #0]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d0f4      	beq.n	800efae <rcl_subscription_init+0x1ae>
 800efc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800efc8:	b13b      	cbz	r3, 800efda <rcl_subscription_init+0x1da>
 800efca:	4640      	mov	r0, r8
 800efcc:	f007 fc22 	bl	8016814 <rcl_node_get_rmw_handle>
 800efd0:	6823      	ldr	r3, [r4, #0]
 800efd2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800efd6:	f001 fec9 	bl	8010d6c <rmw_destroy_subscription>
 800efda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efdc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800efde:	6820      	ldr	r0, [r4, #0]
 800efe0:	4798      	blx	r3
 800efe2:	2300      	movs	r3, #0
 800efe4:	6023      	str	r3, [r4, #0]
 800efe6:	2501      	movs	r5, #1
 800efe8:	e7d7      	b.n	800ef9a <rcl_subscription_init+0x19a>
 800efea:	bf00      	nop

0800efec <rcl_subscription_get_default_options>:
 800efec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff0:	4f12      	ldr	r7, [pc, #72]	; (800f03c <rcl_subscription_get_default_options+0x50>)
 800eff2:	4913      	ldr	r1, [pc, #76]	; (800f040 <rcl_subscription_get_default_options+0x54>)
 800eff4:	b088      	sub	sp, #32
 800eff6:	4606      	mov	r6, r0
 800eff8:	2250      	movs	r2, #80	; 0x50
 800effa:	4638      	mov	r0, r7
 800effc:	f00b f91e 	bl	801a23c <memcpy>
 800f000:	ac02      	add	r4, sp, #8
 800f002:	a802      	add	r0, sp, #8
 800f004:	f000 fd52 	bl	800faac <rcutils_get_default_allocator>
 800f008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f00a:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800f00e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f010:	46e8      	mov	r8, sp
 800f012:	6823      	ldr	r3, [r4, #0]
 800f014:	602b      	str	r3, [r5, #0]
 800f016:	4640      	mov	r0, r8
 800f018:	f000 fffc 	bl	8010014 <rmw_get_default_subscription_options>
 800f01c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f020:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f024:	e883 0003 	stmia.w	r3, {r0, r1}
 800f028:	2270      	movs	r2, #112	; 0x70
 800f02a:	4639      	mov	r1, r7
 800f02c:	4630      	mov	r0, r6
 800f02e:	f00b f905 	bl	801a23c <memcpy>
 800f032:	4630      	mov	r0, r6
 800f034:	b008      	add	sp, #32
 800f036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f03a:	bf00      	nop
 800f03c:	200103b8 	.word	0x200103b8
 800f040:	0801f740 	.word	0x0801f740

0800f044 <rcl_take>:
 800f044:	2800      	cmp	r0, #0
 800f046:	d03f      	beq.n	800f0c8 <rcl_take+0x84>
 800f048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f04c:	4617      	mov	r7, r2
 800f04e:	6802      	ldr	r2, [r0, #0]
 800f050:	b09d      	sub	sp, #116	; 0x74
 800f052:	4606      	mov	r6, r0
 800f054:	b382      	cbz	r2, 800f0b8 <rcl_take+0x74>
 800f056:	4699      	mov	r9, r3
 800f058:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800f05c:	b363      	cbz	r3, 800f0b8 <rcl_take+0x74>
 800f05e:	4688      	mov	r8, r1
 800f060:	b381      	cbz	r1, 800f0c4 <rcl_take+0x80>
 800f062:	2f00      	cmp	r7, #0
 800f064:	d034      	beq.n	800f0d0 <rcl_take+0x8c>
 800f066:	a802      	add	r0, sp, #8
 800f068:	ac02      	add	r4, sp, #8
 800f06a:	f000 ffd7 	bl	801001c <rmw_get_zero_initialized_message_info>
 800f06e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f070:	463d      	mov	r5, r7
 800f072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f078:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f07c:	6834      	ldr	r4, [r6, #0]
 800f07e:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 800f082:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800f086:	2400      	movs	r4, #0
 800f088:	463b      	mov	r3, r7
 800f08a:	4630      	mov	r0, r6
 800f08c:	f8cd 9000 	str.w	r9, [sp]
 800f090:	4641      	mov	r1, r8
 800f092:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800f096:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 800f09a:	f001 feb5 	bl	8010e08 <rmw_take_with_info>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	b9c0      	cbnz	r0, 800f0d4 <rcl_take+0x90>
 800f0a2:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800f0a6:	f240 1291 	movw	r2, #401	; 0x191
 800f0aa:	2900      	cmp	r1, #0
 800f0ac:	bf08      	it	eq
 800f0ae:	4613      	moveq	r3, r2
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	b01d      	add	sp, #116	; 0x74
 800f0b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0b8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f0bc:	4618      	mov	r0, r3
 800f0be:	b01d      	add	sp, #116	; 0x74
 800f0c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0c4:	230b      	movs	r3, #11
 800f0c6:	e7f3      	b.n	800f0b0 <rcl_take+0x6c>
 800f0c8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	4770      	bx	lr
 800f0d0:	af10      	add	r7, sp, #64	; 0x40
 800f0d2:	e7c8      	b.n	800f066 <rcl_take+0x22>
 800f0d4:	f006 febc 	bl	8015e50 <rcl_convert_rmw_ret_to_rcl_ret>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	e7e9      	b.n	800f0b0 <rcl_take+0x6c>

0800f0dc <rcl_subscription_get_rmw_handle>:
 800f0dc:	b118      	cbz	r0, 800f0e6 <rcl_subscription_get_rmw_handle+0xa>
 800f0de:	6800      	ldr	r0, [r0, #0]
 800f0e0:	b108      	cbz	r0, 800f0e6 <rcl_subscription_get_rmw_handle+0xa>
 800f0e2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800f0e6:	4770      	bx	lr

0800f0e8 <_rclc_check_for_new_data>:
 800f0e8:	2800      	cmp	r0, #0
 800f0ea:	d042      	beq.n	800f172 <_rclc_check_for_new_data+0x8a>
 800f0ec:	b510      	push	{r4, lr}
 800f0ee:	7803      	ldrb	r3, [r0, #0]
 800f0f0:	b084      	sub	sp, #16
 800f0f2:	4604      	mov	r4, r0
 800f0f4:	2b08      	cmp	r3, #8
 800f0f6:	d847      	bhi.n	800f188 <_rclc_check_for_new_data+0xa0>
 800f0f8:	e8df f003 	tbb	[pc, r3]
 800f0fc:	17251010 	.word	0x17251010
 800f100:	05050517 	.word	0x05050517
 800f104:	1e          	.byte	0x1e
 800f105:	00          	.byte	0x00
 800f106:	6a0b      	ldr	r3, [r1, #32]
 800f108:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f10a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f10e:	b118      	cbz	r0, 800f118 <_rclc_check_for_new_data+0x30>
 800f110:	2301      	movs	r3, #1
 800f112:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800f116:	2000      	movs	r0, #0
 800f118:	b004      	add	sp, #16
 800f11a:	bd10      	pop	{r4, pc}
 800f11c:	680b      	ldr	r3, [r1, #0]
 800f11e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f120:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f124:	2800      	cmp	r0, #0
 800f126:	d1f3      	bne.n	800f110 <_rclc_check_for_new_data+0x28>
 800f128:	e7f6      	b.n	800f118 <_rclc_check_for_new_data+0x30>
 800f12a:	698b      	ldr	r3, [r1, #24]
 800f12c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f12e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f132:	2800      	cmp	r0, #0
 800f134:	d1ec      	bne.n	800f110 <_rclc_check_for_new_data+0x28>
 800f136:	e7ef      	b.n	800f118 <_rclc_check_for_new_data+0x30>
 800f138:	688b      	ldr	r3, [r1, #8]
 800f13a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f13c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f140:	2800      	cmp	r0, #0
 800f142:	d1e5      	bne.n	800f110 <_rclc_check_for_new_data+0x28>
 800f144:	e7e8      	b.n	800f118 <_rclc_check_for_new_data+0x30>
 800f146:	690b      	ldr	r3, [r1, #16]
 800f148:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f14a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f14e:	2800      	cmp	r0, #0
 800f150:	d0e2      	beq.n	800f118 <_rclc_check_for_new_data+0x30>
 800f152:	2300      	movs	r3, #0
 800f154:	6860      	ldr	r0, [r4, #4]
 800f156:	f88d 300f 	strb.w	r3, [sp, #15]
 800f15a:	f10d 010f 	add.w	r1, sp, #15
 800f15e:	f007 fff9 	bl	8017154 <rcl_timer_is_ready>
 800f162:	b960      	cbnz	r0, 800f17e <_rclc_check_for_new_data+0x96>
 800f164:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800f168:	b12b      	cbz	r3, 800f176 <_rclc_check_for_new_data+0x8e>
 800f16a:	2301      	movs	r3, #1
 800f16c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800f170:	e7d2      	b.n	800f118 <_rclc_check_for_new_data+0x30>
 800f172:	200b      	movs	r0, #11
 800f174:	4770      	bx	lr
 800f176:	f000 fd99 	bl	800fcac <rcutils_reset_error>
 800f17a:	2001      	movs	r0, #1
 800f17c:	e7cc      	b.n	800f118 <_rclc_check_for_new_data+0x30>
 800f17e:	9001      	str	r0, [sp, #4]
 800f180:	f000 fd94 	bl	800fcac <rcutils_reset_error>
 800f184:	9801      	ldr	r0, [sp, #4]
 800f186:	e7c7      	b.n	800f118 <_rclc_check_for_new_data+0x30>
 800f188:	2001      	movs	r0, #1
 800f18a:	e7c5      	b.n	800f118 <_rclc_check_for_new_data+0x30>

0800f18c <_rclc_take_new_data>:
 800f18c:	2800      	cmp	r0, #0
 800f18e:	d049      	beq.n	800f224 <_rclc_take_new_data+0x98>
 800f190:	b510      	push	{r4, lr}
 800f192:	7803      	ldrb	r3, [r0, #0]
 800f194:	b08e      	sub	sp, #56	; 0x38
 800f196:	4604      	mov	r4, r0
 800f198:	2b08      	cmp	r3, #8
 800f19a:	d84a      	bhi.n	800f232 <_rclc_take_new_data+0xa6>
 800f19c:	e8df f003 	tbb	[pc, r3]
 800f1a0:	2b121515 	.word	0x2b121515
 800f1a4:	0505052b 	.word	0x0505052b
 800f1a8:	12          	.byte	0x12
 800f1a9:	00          	.byte	0x00
 800f1aa:	6a0b      	ldr	r3, [r1, #32]
 800f1ac:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1b2:	b13b      	cbz	r3, 800f1c4 <_rclc_take_new_data+0x38>
 800f1b4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800f1b8:	f104 0110 	add.w	r1, r4, #16
 800f1bc:	f007 fc2a 	bl	8016a14 <rcl_take_request>
 800f1c0:	2800      	cmp	r0, #0
 800f1c2:	d131      	bne.n	800f228 <_rclc_take_new_data+0x9c>
 800f1c4:	2000      	movs	r0, #0
 800f1c6:	b00e      	add	sp, #56	; 0x38
 800f1c8:	bd10      	pop	{r4, pc}
 800f1ca:	680b      	ldr	r3, [r1, #0]
 800f1cc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f1ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d0f6      	beq.n	800f1c4 <_rclc_take_new_data+0x38>
 800f1d6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800f1da:	2300      	movs	r3, #0
 800f1dc:	aa02      	add	r2, sp, #8
 800f1de:	f7ff ff31 	bl	800f044 <rcl_take>
 800f1e2:	2800      	cmp	r0, #0
 800f1e4:	d0ef      	beq.n	800f1c6 <_rclc_take_new_data+0x3a>
 800f1e6:	f240 1391 	movw	r3, #401	; 0x191
 800f1ea:	4298      	cmp	r0, r3
 800f1ec:	d115      	bne.n	800f21a <_rclc_take_new_data+0x8e>
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800f1f4:	e7e7      	b.n	800f1c6 <_rclc_take_new_data+0x3a>
 800f1f6:	698b      	ldr	r3, [r1, #24]
 800f1f8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f1fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d0e0      	beq.n	800f1c4 <_rclc_take_new_data+0x38>
 800f202:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800f206:	f104 0110 	add.w	r1, r4, #16
 800f20a:	f006 fde5 	bl	8015dd8 <rcl_take_response>
 800f20e:	2800      	cmp	r0, #0
 800f210:	d0d8      	beq.n	800f1c4 <_rclc_take_new_data+0x38>
 800f212:	f240 13f5 	movw	r3, #501	; 0x1f5
 800f216:	4298      	cmp	r0, r3
 800f218:	d0d5      	beq.n	800f1c6 <_rclc_take_new_data+0x3a>
 800f21a:	9001      	str	r0, [sp, #4]
 800f21c:	f000 fd46 	bl	800fcac <rcutils_reset_error>
 800f220:	9801      	ldr	r0, [sp, #4]
 800f222:	e7d0      	b.n	800f1c6 <_rclc_take_new_data+0x3a>
 800f224:	200b      	movs	r0, #11
 800f226:	4770      	bx	lr
 800f228:	f240 2359 	movw	r3, #601	; 0x259
 800f22c:	4298      	cmp	r0, r3
 800f22e:	d0de      	beq.n	800f1ee <_rclc_take_new_data+0x62>
 800f230:	e7f3      	b.n	800f21a <_rclc_take_new_data+0x8e>
 800f232:	2001      	movs	r0, #1
 800f234:	e7c7      	b.n	800f1c6 <_rclc_take_new_data+0x3a>
 800f236:	bf00      	nop

0800f238 <_rclc_execute>:
 800f238:	2800      	cmp	r0, #0
 800f23a:	d058      	beq.n	800f2ee <_rclc_execute+0xb6>
 800f23c:	b510      	push	{r4, lr}
 800f23e:	7843      	ldrb	r3, [r0, #1]
 800f240:	b082      	sub	sp, #8
 800f242:	4604      	mov	r4, r0
 800f244:	b14b      	cbz	r3, 800f25a <_rclc_execute+0x22>
 800f246:	2b01      	cmp	r3, #1
 800f248:	d017      	beq.n	800f27a <_rclc_execute+0x42>
 800f24a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800f24e:	b18b      	cbz	r3, 800f274 <_rclc_execute+0x3c>
 800f250:	2000      	movs	r0, #0
 800f252:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 800f256:	b002      	add	sp, #8
 800f258:	bd10      	pop	{r4, pc}
 800f25a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800f25e:	b14b      	cbz	r3, 800f274 <_rclc_execute+0x3c>
 800f260:	7803      	ldrb	r3, [r0, #0]
 800f262:	2b08      	cmp	r3, #8
 800f264:	d860      	bhi.n	800f328 <_rclc_execute+0xf0>
 800f266:	e8df f003 	tbb	[pc, r3]
 800f26a:	5128      	.short	0x5128
 800f26c:	122c2832 	.word	0x122c2832
 800f270:	1212      	.short	0x1212
 800f272:	38          	.byte	0x38
 800f273:	00          	.byte	0x00
 800f274:	2000      	movs	r0, #0
 800f276:	b002      	add	sp, #8
 800f278:	bd10      	pop	{r4, pc}
 800f27a:	7803      	ldrb	r3, [r0, #0]
 800f27c:	2b08      	cmp	r3, #8
 800f27e:	d853      	bhi.n	800f328 <_rclc_execute+0xf0>
 800f280:	e8df f003 	tbb	[pc, r3]
 800f284:	1b252e37 	.word	0x1b252e37
 800f288:	0505051f 	.word	0x0505051f
 800f28c:	2b          	.byte	0x2b
 800f28d:	00          	.byte	0x00
 800f28e:	2b06      	cmp	r3, #6
 800f290:	d041      	beq.n	800f316 <_rclc_execute+0xde>
 800f292:	2b07      	cmp	r3, #7
 800f294:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f296:	d133      	bne.n	800f300 <_rclc_execute+0xc8>
 800f298:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 800f29c:	68a0      	ldr	r0, [r4, #8]
 800f29e:	4798      	blx	r3
 800f2a0:	f104 0110 	add.w	r1, r4, #16
 800f2a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800f2a6:	6860      	ldr	r0, [r4, #4]
 800f2a8:	f007 fbec 	bl	8016a84 <rcl_send_response>
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	d0cc      	beq.n	800f24a <_rclc_execute+0x12>
 800f2b0:	9001      	str	r0, [sp, #4]
 800f2b2:	f000 fcfb 	bl	800fcac <rcutils_reset_error>
 800f2b6:	9801      	ldr	r0, [sp, #4]
 800f2b8:	e7cd      	b.n	800f256 <_rclc_execute+0x1e>
 800f2ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f2bc:	68a0      	ldr	r0, [r4, #8]
 800f2be:	4798      	blx	r3
 800f2c0:	e7c3      	b.n	800f24a <_rclc_execute+0x12>
 800f2c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f2c4:	68a0      	ldr	r0, [r4, #8]
 800f2c6:	f104 0110 	add.w	r1, r4, #16
 800f2ca:	4798      	blx	r3
 800f2cc:	e7bd      	b.n	800f24a <_rclc_execute+0x12>
 800f2ce:	6860      	ldr	r0, [r4, #4]
 800f2d0:	f007 feac 	bl	801702c <rcl_timer_call>
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	d0b8      	beq.n	800f24a <_rclc_execute+0x12>
 800f2d8:	e7ea      	b.n	800f2b0 <_rclc_execute+0x78>
 800f2da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f2dc:	4798      	blx	r3
 800f2de:	e7b4      	b.n	800f24a <_rclc_execute+0x12>
 800f2e0:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800f2e4:	b990      	cbnz	r0, 800f30c <_rclc_execute+0xd4>
 800f2e6:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800f2ea:	4798      	blx	r3
 800f2ec:	e7ad      	b.n	800f24a <_rclc_execute+0x12>
 800f2ee:	200b      	movs	r0, #11
 800f2f0:	4770      	bx	lr
 800f2f2:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	d1df      	bne.n	800f2ba <_rclc_execute+0x82>
 800f2fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f2fc:	4798      	blx	r3
 800f2fe:	e7a4      	b.n	800f24a <_rclc_execute+0x12>
 800f300:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f302:	68a0      	ldr	r0, [r4, #8]
 800f304:	4798      	blx	r3
 800f306:	f104 0110 	add.w	r1, r4, #16
 800f30a:	e7cb      	b.n	800f2a4 <_rclc_execute+0x6c>
 800f30c:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800f310:	68a0      	ldr	r0, [r4, #8]
 800f312:	4798      	blx	r3
 800f314:	e799      	b.n	800f24a <_rclc_execute+0x12>
 800f316:	f104 0110 	add.w	r1, r4, #16
 800f31a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f31c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800f31e:	68a0      	ldr	r0, [r4, #8]
 800f320:	9101      	str	r1, [sp, #4]
 800f322:	4798      	blx	r3
 800f324:	9901      	ldr	r1, [sp, #4]
 800f326:	e7bd      	b.n	800f2a4 <_rclc_execute+0x6c>
 800f328:	2001      	movs	r0, #1
 800f32a:	e794      	b.n	800f256 <_rclc_execute+0x1e>

0800f32c <rclc_executor_trigger_any>:
 800f32c:	b170      	cbz	r0, 800f34c <rclc_executor_trigger_any+0x20>
 800f32e:	b179      	cbz	r1, 800f350 <rclc_executor_trigger_any+0x24>
 800f330:	4603      	mov	r3, r0
 800f332:	2200      	movs	r2, #0
 800f334:	e005      	b.n	800f342 <rclc_executor_trigger_any+0x16>
 800f336:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800f33a:	3340      	adds	r3, #64	; 0x40
 800f33c:	b930      	cbnz	r0, 800f34c <rclc_executor_trigger_any+0x20>
 800f33e:	4291      	cmp	r1, r2
 800f340:	d005      	beq.n	800f34e <rclc_executor_trigger_any+0x22>
 800f342:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800f346:	3201      	adds	r2, #1
 800f348:	2800      	cmp	r0, #0
 800f34a:	d1f4      	bne.n	800f336 <rclc_executor_trigger_any+0xa>
 800f34c:	4770      	bx	lr
 800f34e:	4770      	bx	lr
 800f350:	4608      	mov	r0, r1
 800f352:	e7fb      	b.n	800f34c <rclc_executor_trigger_any+0x20>
 800f354:	0000      	movs	r0, r0
	...

0800f358 <rclc_executor_init>:
 800f358:	2800      	cmp	r0, #0
 800f35a:	d063      	beq.n	800f424 <rclc_executor_init+0xcc>
 800f35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f360:	460f      	mov	r7, r1
 800f362:	b0ae      	sub	sp, #184	; 0xb8
 800f364:	2900      	cmp	r1, #0
 800f366:	d055      	beq.n	800f414 <rclc_executor_init+0xbc>
 800f368:	4605      	mov	r5, r0
 800f36a:	4618      	mov	r0, r3
 800f36c:	4616      	mov	r6, r2
 800f36e:	4698      	mov	r8, r3
 800f370:	f000 fbaa 	bl	800fac8 <rcutils_allocator_is_valid>
 800f374:	2800      	cmp	r0, #0
 800f376:	d04d      	beq.n	800f414 <rclc_executor_init+0xbc>
 800f378:	2e00      	cmp	r6, #0
 800f37a:	d04b      	beq.n	800f414 <rclc_executor_init+0xbc>
 800f37c:	492e      	ldr	r1, [pc, #184]	; (800f438 <rclc_executor_init+0xe0>)
 800f37e:	2280      	movs	r2, #128	; 0x80
 800f380:	a80e      	add	r0, sp, #56	; 0x38
 800f382:	f00a ff5b 	bl	801a23c <memcpy>
 800f386:	2400      	movs	r4, #0
 800f388:	a90e      	add	r1, sp, #56	; 0x38
 800f38a:	2280      	movs	r2, #128	; 0x80
 800f38c:	4628      	mov	r0, r5
 800f38e:	f00a ff55 	bl	801a23c <memcpy>
 800f392:	602f      	str	r7, [r5, #0]
 800f394:	4668      	mov	r0, sp
 800f396:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800f39a:	466f      	mov	r7, sp
 800f39c:	f008 f8a0 	bl	80174e0 <rcl_get_zero_initialized_wait_set>
 800f3a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f3a2:	f105 0c14 	add.w	ip, r5, #20
 800f3a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f3aa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f3ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f3b0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f3b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f3b6:	a31e      	add	r3, pc, #120	; (adr r3, 800f430 <rclc_executor_init+0xd8>)
 800f3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3bc:	6839      	ldr	r1, [r7, #0]
 800f3be:	f8cc 1000 	str.w	r1, [ip]
 800f3c2:	f8d8 7000 	ldr.w	r7, [r8]
 800f3c6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f3ca:	f8c5 8010 	str.w	r8, [r5, #16]
 800f3ce:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800f3d2:	01b0      	lsls	r0, r6, #6
 800f3d4:	47b8      	blx	r7
 800f3d6:	6068      	str	r0, [r5, #4]
 800f3d8:	b908      	cbnz	r0, 800f3de <rclc_executor_init+0x86>
 800f3da:	e025      	b.n	800f428 <rclc_executor_init+0xd0>
 800f3dc:	6868      	ldr	r0, [r5, #4]
 800f3de:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800f3e2:	4631      	mov	r1, r6
 800f3e4:	3401      	adds	r4, #1
 800f3e6:	f000 fa15 	bl	800f814 <rclc_executor_handle_init>
 800f3ea:	42a6      	cmp	r6, r4
 800f3ec:	d1f6      	bne.n	800f3dc <rclc_executor_init+0x84>
 800f3ee:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800f3f2:	f000 fa03 	bl	800f7fc <rclc_executor_handle_counters_zero_init>
 800f3f6:	686b      	ldr	r3, [r5, #4]
 800f3f8:	4a10      	ldr	r2, [pc, #64]	; (800f43c <rclc_executor_init+0xe4>)
 800f3fa:	672a      	str	r2, [r5, #112]	; 0x70
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	6768      	str	r0, [r5, #116]	; 0x74
 800f400:	b163      	cbz	r3, 800f41c <rclc_executor_init+0xc4>
 800f402:	692b      	ldr	r3, [r5, #16]
 800f404:	b153      	cbz	r3, 800f41c <rclc_executor_init+0xc4>
 800f406:	68ab      	ldr	r3, [r5, #8]
 800f408:	b143      	cbz	r3, 800f41c <rclc_executor_init+0xc4>
 800f40a:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800f40e:	b02e      	add	sp, #184	; 0xb8
 800f410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f414:	200b      	movs	r0, #11
 800f416:	b02e      	add	sp, #184	; 0xb8
 800f418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f41c:	4618      	mov	r0, r3
 800f41e:	b02e      	add	sp, #184	; 0xb8
 800f420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f424:	200b      	movs	r0, #11
 800f426:	4770      	bx	lr
 800f428:	200a      	movs	r0, #10
 800f42a:	e7f4      	b.n	800f416 <rclc_executor_init+0xbe>
 800f42c:	f3af 8000 	nop.w
 800f430:	3b9aca00 	.word	0x3b9aca00
 800f434:	00000000 	.word	0x00000000
 800f438:	0801f790 	.word	0x0801f790
 800f43c:	0800f32d 	.word	0x0800f32d

0800f440 <rclc_executor_add_subscription>:
 800f440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f444:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800f448:	b358      	cbz	r0, 800f4a2 <rclc_executor_add_subscription+0x62>
 800f44a:	b351      	cbz	r1, 800f4a2 <rclc_executor_add_subscription+0x62>
 800f44c:	b34a      	cbz	r2, 800f4a2 <rclc_executor_add_subscription+0x62>
 800f44e:	b343      	cbz	r3, 800f4a2 <rclc_executor_add_subscription+0x62>
 800f450:	4604      	mov	r4, r0
 800f452:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800f456:	4285      	cmp	r5, r0
 800f458:	d302      	bcc.n	800f460 <rclc_executor_add_subscription+0x20>
 800f45a:	2001      	movs	r0, #1
 800f45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f460:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800f464:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800f468:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800f46c:	f04f 0c00 	mov.w	ip, #0
 800f470:	f80e c008 	strb.w	ip, [lr, r8]
 800f474:	2001      	movs	r0, #1
 800f476:	3501      	adds	r5, #1
 800f478:	f104 0814 	add.w	r8, r4, #20
 800f47c:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
 800f480:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800f484:	6333      	str	r3, [r6, #48]	; 0x30
 800f486:	7077      	strb	r7, [r6, #1]
 800f488:	f8c6 c02c 	str.w	ip, [r6, #44]	; 0x2c
 800f48c:	4640      	mov	r0, r8
 800f48e:	60e5      	str	r5, [r4, #12]
 800f490:	f008 f838 	bl	8017504 <rcl_wait_set_is_valid>
 800f494:	b940      	cbnz	r0, 800f4a8 <rclc_executor_add_subscription+0x68>
 800f496:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f498:	3301      	adds	r3, #1
 800f49a:	64a3      	str	r3, [r4, #72]	; 0x48
 800f49c:	2000      	movs	r0, #0
 800f49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4a2:	200b      	movs	r0, #11
 800f4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4a8:	4640      	mov	r0, r8
 800f4aa:	f008 f831 	bl	8017510 <rcl_wait_set_fini>
 800f4ae:	2800      	cmp	r0, #0
 800f4b0:	d0f1      	beq.n	800f496 <rclc_executor_add_subscription+0x56>
 800f4b2:	e7d3      	b.n	800f45c <rclc_executor_add_subscription+0x1c>

0800f4b4 <rclc_executor_add_timer>:
 800f4b4:	b308      	cbz	r0, 800f4fa <rclc_executor_add_timer+0x46>
 800f4b6:	b301      	cbz	r1, 800f4fa <rclc_executor_add_timer+0x46>
 800f4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ba:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	4604      	mov	r4, r0
 800f4c2:	d301      	bcc.n	800f4c8 <rclc_executor_add_timer+0x14>
 800f4c4:	2001      	movs	r0, #1
 800f4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4c8:	6840      	ldr	r0, [r0, #4]
 800f4ca:	019d      	lsls	r5, r3, #6
 800f4cc:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800f4d0:	2702      	movs	r7, #2
 800f4d2:	6051      	str	r1, [r2, #4]
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	5347      	strh	r7, [r0, r5]
 800f4d8:	2601      	movs	r6, #1
 800f4da:	2100      	movs	r1, #0
 800f4dc:	f104 0514 	add.w	r5, r4, #20
 800f4e0:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
 800f4e4:	62d1      	str	r1, [r2, #44]	; 0x2c
 800f4e6:	4628      	mov	r0, r5
 800f4e8:	60e3      	str	r3, [r4, #12]
 800f4ea:	f008 f80b 	bl	8017504 <rcl_wait_set_is_valid>
 800f4ee:	b930      	cbnz	r0, 800f4fe <rclc_executor_add_timer+0x4a>
 800f4f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	64e3      	str	r3, [r4, #76]	; 0x4c
 800f4f6:	2000      	movs	r0, #0
 800f4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4fa:	200b      	movs	r0, #11
 800f4fc:	4770      	bx	lr
 800f4fe:	4628      	mov	r0, r5
 800f500:	f008 f806 	bl	8017510 <rcl_wait_set_fini>
 800f504:	2800      	cmp	r0, #0
 800f506:	d0f3      	beq.n	800f4f0 <rclc_executor_add_timer+0x3c>
 800f508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f50a:	bf00      	nop

0800f50c <rclc_executor_prepare>:
 800f50c:	2800      	cmp	r0, #0
 800f50e:	d03d      	beq.n	800f58c <rclc_executor_prepare+0x80>
 800f510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f514:	f100 0814 	add.w	r8, r0, #20
 800f518:	b09a      	sub	sp, #104	; 0x68
 800f51a:	4604      	mov	r4, r0
 800f51c:	4640      	mov	r0, r8
 800f51e:	f007 fff1 	bl	8017504 <rcl_wait_set_is_valid>
 800f522:	b118      	cbz	r0, 800f52c <rclc_executor_prepare+0x20>
 800f524:	2000      	movs	r0, #0
 800f526:	b01a      	add	sp, #104	; 0x68
 800f528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f52c:	4640      	mov	r0, r8
 800f52e:	f007 ffef 	bl	8017510 <rcl_wait_set_fini>
 800f532:	2800      	cmp	r0, #0
 800f534:	d127      	bne.n	800f586 <rclc_executor_prepare+0x7a>
 800f536:	a80c      	add	r0, sp, #48	; 0x30
 800f538:	ad0c      	add	r5, sp, #48	; 0x30
 800f53a:	f007 ffd1 	bl	80174e0 <rcl_get_zero_initialized_wait_set>
 800f53e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f540:	4646      	mov	r6, r8
 800f542:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f546:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f54a:	6927      	ldr	r7, [r4, #16]
 800f54c:	682d      	ldr	r5, [r5, #0]
 800f54e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f550:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f552:	6035      	str	r5, [r6, #0]
 800f554:	ad04      	add	r5, sp, #16
 800f556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f558:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800f55c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f55e:	6826      	ldr	r6, [r4, #0]
 800f560:	6838      	ldr	r0, [r7, #0]
 800f562:	6028      	str	r0, [r5, #0]
 800f564:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800f568:	e9cd 3200 	strd	r3, r2, [sp]
 800f56c:	4640      	mov	r0, r8
 800f56e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f570:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f572:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f574:	f008 faea 	bl	8017b4c <rcl_wait_set_init>
 800f578:	2800      	cmp	r0, #0
 800f57a:	d0d4      	beq.n	800f526 <rclc_executor_prepare+0x1a>
 800f57c:	900b      	str	r0, [sp, #44]	; 0x2c
 800f57e:	f000 fb95 	bl	800fcac <rcutils_reset_error>
 800f582:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f584:	e7cf      	b.n	800f526 <rclc_executor_prepare+0x1a>
 800f586:	f000 fb91 	bl	800fcac <rcutils_reset_error>
 800f58a:	e7d4      	b.n	800f536 <rclc_executor_prepare+0x2a>
 800f58c:	200b      	movs	r0, #11
 800f58e:	4770      	bx	lr

0800f590 <rclc_executor_spin_some.part.0>:
 800f590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f594:	f100 0814 	add.w	r8, r0, #20
 800f598:	b083      	sub	sp, #12
 800f59a:	4692      	mov	sl, r2
 800f59c:	4699      	mov	r9, r3
 800f59e:	4605      	mov	r5, r0
 800f5a0:	f7ff ffb4 	bl	800f50c <rclc_executor_prepare>
 800f5a4:	4640      	mov	r0, r8
 800f5a6:	f008 f87f 	bl	80176a8 <rcl_wait_set_clear>
 800f5aa:	4607      	mov	r7, r0
 800f5ac:	2800      	cmp	r0, #0
 800f5ae:	f040 80ad 	bne.w	800f70c <rclc_executor_spin_some.part.0+0x17c>
 800f5b2:	68ab      	ldr	r3, [r5, #8]
 800f5b4:	4604      	mov	r4, r0
 800f5b6:	b1eb      	cbz	r3, 800f5f4 <rclc_executor_spin_some.part.0+0x64>
 800f5b8:	686e      	ldr	r6, [r5, #4]
 800f5ba:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800f5be:	01a2      	lsls	r2, r4, #6
 800f5c0:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800f5c4:	b1b3      	cbz	r3, 800f5f4 <rclc_executor_spin_some.part.0+0x64>
 800f5c6:	5cb3      	ldrb	r3, [r6, r2]
 800f5c8:	2b08      	cmp	r3, #8
 800f5ca:	f200 8098 	bhi.w	800f6fe <rclc_executor_spin_some.part.0+0x16e>
 800f5ce:	e8df f003 	tbb	[pc, r3]
 800f5d2:	7a7a      	.short	0x7a7a
 800f5d4:	056c6c83 	.word	0x056c6c83
 800f5d8:	0505      	.short	0x0505
 800f5da:	8c          	.byte	0x8c
 800f5db:	00          	.byte	0x00
 800f5dc:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f5e0:	4640      	mov	r0, r8
 800f5e2:	6849      	ldr	r1, [r1, #4]
 800f5e4:	f008 fbc8 	bl	8017d78 <rcl_wait_set_add_service>
 800f5e8:	2800      	cmp	r0, #0
 800f5ea:	d166      	bne.n	800f6ba <rclc_executor_spin_some.part.0+0x12a>
 800f5ec:	68ab      	ldr	r3, [r5, #8]
 800f5ee:	3401      	adds	r4, #1
 800f5f0:	429c      	cmp	r4, r3
 800f5f2:	d3e1      	bcc.n	800f5b8 <rclc_executor_spin_some.part.0+0x28>
 800f5f4:	464b      	mov	r3, r9
 800f5f6:	4652      	mov	r2, sl
 800f5f8:	4640      	mov	r0, r8
 800f5fa:	f008 fbe9 	bl	8017dd0 <rcl_wait>
 800f5fe:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800f602:	2b00      	cmp	r3, #0
 800f604:	f000 8088 	beq.w	800f718 <rclc_executor_spin_some.part.0+0x188>
 800f608:	2b01      	cmp	r3, #1
 800f60a:	d178      	bne.n	800f6fe <rclc_executor_spin_some.part.0+0x16e>
 800f60c:	68ab      	ldr	r3, [r5, #8]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	f000 80cd 	beq.w	800f7ae <rclc_executor_spin_some.part.0+0x21e>
 800f614:	2400      	movs	r4, #0
 800f616:	4626      	mov	r6, r4
 800f618:	f240 1991 	movw	r9, #401	; 0x191
 800f61c:	e009      	b.n	800f632 <rclc_executor_spin_some.part.0+0xa2>
 800f61e:	f7ff fd63 	bl	800f0e8 <_rclc_check_for_new_data>
 800f622:	4604      	mov	r4, r0
 800f624:	b108      	cbz	r0, 800f62a <rclc_executor_spin_some.part.0+0x9a>
 800f626:	4548      	cmp	r0, r9
 800f628:	d13d      	bne.n	800f6a6 <rclc_executor_spin_some.part.0+0x116>
 800f62a:	68ab      	ldr	r3, [r5, #8]
 800f62c:	429e      	cmp	r6, r3
 800f62e:	f080 80c3 	bcs.w	800f7b8 <rclc_executor_spin_some.part.0+0x228>
 800f632:	686a      	ldr	r2, [r5, #4]
 800f634:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f638:	4641      	mov	r1, r8
 800f63a:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800f63e:	3601      	adds	r6, #1
 800f640:	f1bc 0f00 	cmp.w	ip, #0
 800f644:	d1eb      	bne.n	800f61e <rclc_executor_spin_some.part.0+0x8e>
 800f646:	4619      	mov	r1, r3
 800f648:	4610      	mov	r0, r2
 800f64a:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800f64e:	4798      	blx	r3
 800f650:	b348      	cbz	r0, 800f6a6 <rclc_executor_spin_some.part.0+0x116>
 800f652:	68ab      	ldr	r3, [r5, #8]
 800f654:	b33b      	cbz	r3, 800f6a6 <rclc_executor_spin_some.part.0+0x116>
 800f656:	2600      	movs	r6, #0
 800f658:	f240 1991 	movw	r9, #401	; 0x191
 800f65c:	e008      	b.n	800f670 <rclc_executor_spin_some.part.0+0xe0>
 800f65e:	f7ff fd95 	bl	800f18c <_rclc_take_new_data>
 800f662:	4604      	mov	r4, r0
 800f664:	b108      	cbz	r0, 800f66a <rclc_executor_spin_some.part.0+0xda>
 800f666:	4548      	cmp	r0, r9
 800f668:	d11d      	bne.n	800f6a6 <rclc_executor_spin_some.part.0+0x116>
 800f66a:	68ab      	ldr	r3, [r5, #8]
 800f66c:	429e      	cmp	r6, r3
 800f66e:	d208      	bcs.n	800f682 <rclc_executor_spin_some.part.0+0xf2>
 800f670:	6868      	ldr	r0, [r5, #4]
 800f672:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800f676:	4641      	mov	r1, r8
 800f678:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800f67c:	3601      	adds	r6, #1
 800f67e:	2a00      	cmp	r2, #0
 800f680:	d1ed      	bne.n	800f65e <rclc_executor_spin_some.part.0+0xce>
 800f682:	2600      	movs	r6, #0
 800f684:	b93b      	cbnz	r3, 800f696 <rclc_executor_spin_some.part.0+0x106>
 800f686:	e00e      	b.n	800f6a6 <rclc_executor_spin_some.part.0+0x116>
 800f688:	f7ff fdd6 	bl	800f238 <_rclc_execute>
 800f68c:	4604      	mov	r4, r0
 800f68e:	b950      	cbnz	r0, 800f6a6 <rclc_executor_spin_some.part.0+0x116>
 800f690:	68ab      	ldr	r3, [r5, #8]
 800f692:	429e      	cmp	r6, r3
 800f694:	d236      	bcs.n	800f704 <rclc_executor_spin_some.part.0+0x174>
 800f696:	6868      	ldr	r0, [r5, #4]
 800f698:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800f69c:	3601      	adds	r6, #1
 800f69e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d1f0      	bne.n	800f688 <rclc_executor_spin_some.part.0+0xf8>
 800f6a6:	4627      	mov	r7, r4
 800f6a8:	e02c      	b.n	800f704 <rclc_executor_spin_some.part.0+0x174>
 800f6aa:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f6ae:	4640      	mov	r0, r8
 800f6b0:	6849      	ldr	r1, [r1, #4]
 800f6b2:	f008 fb35 	bl	8017d20 <rcl_wait_set_add_client>
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	d098      	beq.n	800f5ec <rclc_executor_spin_some.part.0+0x5c>
 800f6ba:	9001      	str	r0, [sp, #4]
 800f6bc:	f000 faf6 	bl	800fcac <rcutils_reset_error>
 800f6c0:	9801      	ldr	r0, [sp, #4]
 800f6c2:	4607      	mov	r7, r0
 800f6c4:	e01e      	b.n	800f704 <rclc_executor_spin_some.part.0+0x174>
 800f6c6:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f6ca:	4640      	mov	r0, r8
 800f6cc:	6849      	ldr	r1, [r1, #4]
 800f6ce:	f007 ffbf 	bl	8017650 <rcl_wait_set_add_subscription>
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	d08a      	beq.n	800f5ec <rclc_executor_spin_some.part.0+0x5c>
 800f6d6:	e7f0      	b.n	800f6ba <rclc_executor_spin_some.part.0+0x12a>
 800f6d8:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f6dc:	4640      	mov	r0, r8
 800f6de:	6849      	ldr	r1, [r1, #4]
 800f6e0:	f008 faee 	bl	8017cc0 <rcl_wait_set_add_timer>
 800f6e4:	2800      	cmp	r0, #0
 800f6e6:	d081      	beq.n	800f5ec <rclc_executor_spin_some.part.0+0x5c>
 800f6e8:	e7e7      	b.n	800f6ba <rclc_executor_spin_some.part.0+0x12a>
 800f6ea:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f6ee:	4640      	mov	r0, r8
 800f6f0:	6849      	ldr	r1, [r1, #4]
 800f6f2:	f008 fab9 	bl	8017c68 <rcl_wait_set_add_guard_condition>
 800f6f6:	2800      	cmp	r0, #0
 800f6f8:	f43f af78 	beq.w	800f5ec <rclc_executor_spin_some.part.0+0x5c>
 800f6fc:	e7dd      	b.n	800f6ba <rclc_executor_spin_some.part.0+0x12a>
 800f6fe:	f000 fad5 	bl	800fcac <rcutils_reset_error>
 800f702:	2701      	movs	r7, #1
 800f704:	4638      	mov	r0, r7
 800f706:	b003      	add	sp, #12
 800f708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f70c:	f000 face 	bl	800fcac <rcutils_reset_error>
 800f710:	4638      	mov	r0, r7
 800f712:	b003      	add	sp, #12
 800f714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f718:	68ab      	ldr	r3, [r5, #8]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d04e      	beq.n	800f7bc <rclc_executor_spin_some.part.0+0x22c>
 800f71e:	2400      	movs	r4, #0
 800f720:	4626      	mov	r6, r4
 800f722:	f240 1991 	movw	r9, #401	; 0x191
 800f726:	e008      	b.n	800f73a <rclc_executor_spin_some.part.0+0x1aa>
 800f728:	f7ff fcde 	bl	800f0e8 <_rclc_check_for_new_data>
 800f72c:	4604      	mov	r4, r0
 800f72e:	b108      	cbz	r0, 800f734 <rclc_executor_spin_some.part.0+0x1a4>
 800f730:	4548      	cmp	r0, r9
 800f732:	d1b8      	bne.n	800f6a6 <rclc_executor_spin_some.part.0+0x116>
 800f734:	68ab      	ldr	r3, [r5, #8]
 800f736:	429e      	cmp	r6, r3
 800f738:	d23c      	bcs.n	800f7b4 <rclc_executor_spin_some.part.0+0x224>
 800f73a:	686a      	ldr	r2, [r5, #4]
 800f73c:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f740:	4641      	mov	r1, r8
 800f742:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800f746:	3601      	adds	r6, #1
 800f748:	f1bc 0f00 	cmp.w	ip, #0
 800f74c:	d1ec      	bne.n	800f728 <rclc_executor_spin_some.part.0+0x198>
 800f74e:	4619      	mov	r1, r3
 800f750:	4610      	mov	r0, r2
 800f752:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800f756:	4798      	blx	r3
 800f758:	2800      	cmp	r0, #0
 800f75a:	d0a4      	beq.n	800f6a6 <rclc_executor_spin_some.part.0+0x116>
 800f75c:	68ab      	ldr	r3, [r5, #8]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d0a1      	beq.n	800f6a6 <rclc_executor_spin_some.part.0+0x116>
 800f762:	f04f 0a00 	mov.w	sl, #0
 800f766:	f240 1691 	movw	r6, #401	; 0x191
 800f76a:	f240 2959 	movw	r9, #601	; 0x259
 800f76e:	e010      	b.n	800f792 <rclc_executor_spin_some.part.0+0x202>
 800f770:	f7ff fd0c 	bl	800f18c <_rclc_take_new_data>
 800f774:	b118      	cbz	r0, 800f77e <rclc_executor_spin_some.part.0+0x1ee>
 800f776:	42b0      	cmp	r0, r6
 800f778:	d001      	beq.n	800f77e <rclc_executor_spin_some.part.0+0x1ee>
 800f77a:	4548      	cmp	r0, r9
 800f77c:	d121      	bne.n	800f7c2 <rclc_executor_spin_some.part.0+0x232>
 800f77e:	6868      	ldr	r0, [r5, #4]
 800f780:	4458      	add	r0, fp
 800f782:	f7ff fd59 	bl	800f238 <_rclc_execute>
 800f786:	4604      	mov	r4, r0
 800f788:	2800      	cmp	r0, #0
 800f78a:	d18c      	bne.n	800f6a6 <rclc_executor_spin_some.part.0+0x116>
 800f78c:	68ab      	ldr	r3, [r5, #8]
 800f78e:	459a      	cmp	sl, r3
 800f790:	d2b8      	bcs.n	800f704 <rclc_executor_spin_some.part.0+0x174>
 800f792:	6868      	ldr	r0, [r5, #4]
 800f794:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800f798:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800f79c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f7a0:	4641      	mov	r1, r8
 800f7a2:	f10a 0a01 	add.w	sl, sl, #1
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d1e2      	bne.n	800f770 <rclc_executor_spin_some.part.0+0x1e0>
 800f7aa:	4627      	mov	r7, r4
 800f7ac:	e7aa      	b.n	800f704 <rclc_executor_spin_some.part.0+0x174>
 800f7ae:	686a      	ldr	r2, [r5, #4]
 800f7b0:	461c      	mov	r4, r3
 800f7b2:	e748      	b.n	800f646 <rclc_executor_spin_some.part.0+0xb6>
 800f7b4:	686a      	ldr	r2, [r5, #4]
 800f7b6:	e7ca      	b.n	800f74e <rclc_executor_spin_some.part.0+0x1be>
 800f7b8:	686a      	ldr	r2, [r5, #4]
 800f7ba:	e744      	b.n	800f646 <rclc_executor_spin_some.part.0+0xb6>
 800f7bc:	686a      	ldr	r2, [r5, #4]
 800f7be:	461c      	mov	r4, r3
 800f7c0:	e7c5      	b.n	800f74e <rclc_executor_spin_some.part.0+0x1be>
 800f7c2:	4607      	mov	r7, r0
 800f7c4:	e79e      	b.n	800f704 <rclc_executor_spin_some.part.0+0x174>
 800f7c6:	bf00      	nop

0800f7c8 <rclc_executor_spin>:
 800f7c8:	b1a8      	cbz	r0, 800f7f6 <rclc_executor_spin+0x2e>
 800f7ca:	b5d0      	push	{r4, r6, r7, lr}
 800f7cc:	4604      	mov	r4, r0
 800f7ce:	6820      	ldr	r0, [r4, #0]
 800f7d0:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 800f7d4:	f006 fb60 	bl	8015e98 <rcl_context_is_valid>
 800f7d8:	4601      	mov	r1, r0
 800f7da:	4632      	mov	r2, r6
 800f7dc:	463b      	mov	r3, r7
 800f7de:	4620      	mov	r0, r4
 800f7e0:	b129      	cbz	r1, 800f7ee <rclc_executor_spin+0x26>
 800f7e2:	f7ff fed5 	bl	800f590 <rclc_executor_spin_some.part.0>
 800f7e6:	f030 0302 	bics.w	r3, r0, #2
 800f7ea:	d0f0      	beq.n	800f7ce <rclc_executor_spin+0x6>
 800f7ec:	bdd0      	pop	{r4, r6, r7, pc}
 800f7ee:	f000 fa5d 	bl	800fcac <rcutils_reset_error>
 800f7f2:	2001      	movs	r0, #1
 800f7f4:	bdd0      	pop	{r4, r6, r7, pc}
 800f7f6:	200b      	movs	r0, #11
 800f7f8:	4770      	bx	lr
 800f7fa:	bf00      	nop

0800f7fc <rclc_executor_handle_counters_zero_init>:
 800f7fc:	b140      	cbz	r0, 800f810 <rclc_executor_handle_counters_zero_init+0x14>
 800f7fe:	2300      	movs	r3, #0
 800f800:	6003      	str	r3, [r0, #0]
 800f802:	6043      	str	r3, [r0, #4]
 800f804:	6083      	str	r3, [r0, #8]
 800f806:	60c3      	str	r3, [r0, #12]
 800f808:	6103      	str	r3, [r0, #16]
 800f80a:	6143      	str	r3, [r0, #20]
 800f80c:	4618      	mov	r0, r3
 800f80e:	4770      	bx	lr
 800f810:	200b      	movs	r0, #11
 800f812:	4770      	bx	lr

0800f814 <rclc_executor_handle_init>:
 800f814:	b178      	cbz	r0, 800f836 <rclc_executor_handle_init+0x22>
 800f816:	b430      	push	{r4, r5}
 800f818:	4603      	mov	r3, r0
 800f81a:	2209      	movs	r2, #9
 800f81c:	2000      	movs	r0, #0
 800f81e:	2400      	movs	r4, #0
 800f820:	2500      	movs	r5, #0
 800f822:	801a      	strh	r2, [r3, #0]
 800f824:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800f828:	bc30      	pop	{r4, r5}
 800f82a:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800f82e:	6359      	str	r1, [r3, #52]	; 0x34
 800f830:	6318      	str	r0, [r3, #48]	; 0x30
 800f832:	8718      	strh	r0, [r3, #56]	; 0x38
 800f834:	4770      	bx	lr
 800f836:	200b      	movs	r0, #11
 800f838:	4770      	bx	lr
 800f83a:	bf00      	nop

0800f83c <rclc_support_init_with_options>:
 800f83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f840:	b084      	sub	sp, #16
 800f842:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800f846:	b390      	cbz	r0, 800f8ae <rclc_support_init_with_options+0x72>
 800f848:	461c      	mov	r4, r3
 800f84a:	b383      	cbz	r3, 800f8ae <rclc_support_init_with_options+0x72>
 800f84c:	f1b8 0f00 	cmp.w	r8, #0
 800f850:	d02d      	beq.n	800f8ae <rclc_support_init_with_options+0x72>
 800f852:	4605      	mov	r5, r0
 800f854:	460e      	mov	r6, r1
 800f856:	4617      	mov	r7, r2
 800f858:	f7ff f828 	bl	800e8ac <rcl_get_zero_initialized_init_options>
 800f85c:	4629      	mov	r1, r5
 800f85e:	6028      	str	r0, [r5, #0]
 800f860:	4620      	mov	r0, r4
 800f862:	f7ff f89b 	bl	800e99c <rcl_init_options_copy>
 800f866:	4604      	mov	r4, r0
 800f868:	b9d8      	cbnz	r0, 800f8a2 <rclc_support_init_with_options+0x66>
 800f86a:	466c      	mov	r4, sp
 800f86c:	4620      	mov	r0, r4
 800f86e:	f006 fb03 	bl	8015e78 <rcl_get_zero_initialized_context>
 800f872:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f876:	f105 0408 	add.w	r4, r5, #8
 800f87a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f87e:	4623      	mov	r3, r4
 800f880:	4639      	mov	r1, r7
 800f882:	4630      	mov	r0, r6
 800f884:	462a      	mov	r2, r5
 800f886:	f006 fcf1 	bl	801626c <rcl_init>
 800f88a:	4604      	mov	r4, r0
 800f88c:	b948      	cbnz	r0, 800f8a2 <rclc_support_init_with_options+0x66>
 800f88e:	f8c5 8018 	str.w	r8, [r5, #24]
 800f892:	4642      	mov	r2, r8
 800f894:	f105 011c 	add.w	r1, r5, #28
 800f898:	2003      	movs	r0, #3
 800f89a:	f007 f921 	bl	8016ae0 <rcl_clock_init>
 800f89e:	4604      	mov	r4, r0
 800f8a0:	b108      	cbz	r0, 800f8a6 <rclc_support_init_with_options+0x6a>
 800f8a2:	f000 fa03 	bl	800fcac <rcutils_reset_error>
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	b004      	add	sp, #16
 800f8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8ae:	240b      	movs	r4, #11
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	b004      	add	sp, #16
 800f8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f8b8 <rclc_node_init_with_options>:
 800f8b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8bc:	b087      	sub	sp, #28
 800f8be:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800f8c0:	b1e0      	cbz	r0, 800f8fc <rclc_node_init_with_options+0x44>
 800f8c2:	460d      	mov	r5, r1
 800f8c4:	b1d1      	cbz	r1, 800f8fc <rclc_node_init_with_options+0x44>
 800f8c6:	4616      	mov	r6, r2
 800f8c8:	b1c2      	cbz	r2, 800f8fc <rclc_node_init_with_options+0x44>
 800f8ca:	4698      	mov	r8, r3
 800f8cc:	b1b3      	cbz	r3, 800f8fc <rclc_node_init_with_options+0x44>
 800f8ce:	b1af      	cbz	r7, 800f8fc <rclc_node_init_with_options+0x44>
 800f8d0:	f10d 0910 	add.w	r9, sp, #16
 800f8d4:	4604      	mov	r4, r0
 800f8d6:	4648      	mov	r0, r9
 800f8d8:	f006 fe00 	bl	80164dc <rcl_get_zero_initialized_node>
 800f8dc:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f8e0:	f108 0308 	add.w	r3, r8, #8
 800f8e4:	9700      	str	r7, [sp, #0]
 800f8e6:	4632      	mov	r2, r6
 800f8e8:	e884 0003 	stmia.w	r4, {r0, r1}
 800f8ec:	4629      	mov	r1, r5
 800f8ee:	4620      	mov	r0, r4
 800f8f0:	f006 fdfe 	bl	80164f0 <rcl_node_init>
 800f8f4:	b930      	cbnz	r0, 800f904 <rclc_node_init_with_options+0x4c>
 800f8f6:	b007      	add	sp, #28
 800f8f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8fc:	200b      	movs	r0, #11
 800f8fe:	b007      	add	sp, #28
 800f900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f904:	9003      	str	r0, [sp, #12]
 800f906:	f000 f9d1 	bl	800fcac <rcutils_reset_error>
 800f90a:	9803      	ldr	r0, [sp, #12]
 800f90c:	b007      	add	sp, #28
 800f90e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f912:	bf00      	nop

0800f914 <rclc_publisher_init_default>:
 800f914:	b368      	cbz	r0, 800f972 <rclc_publisher_init_default+0x5e>
 800f916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f91a:	460d      	mov	r5, r1
 800f91c:	b09e      	sub	sp, #120	; 0x78
 800f91e:	b321      	cbz	r1, 800f96a <rclc_publisher_init_default+0x56>
 800f920:	4616      	mov	r6, r2
 800f922:	b312      	cbz	r2, 800f96a <rclc_publisher_init_default+0x56>
 800f924:	461f      	mov	r7, r3
 800f926:	b303      	cbz	r3, 800f96a <rclc_publisher_init_default+0x56>
 800f928:	4604      	mov	r4, r0
 800f92a:	f7ff f921 	bl	800eb70 <rcl_get_zero_initialized_publisher>
 800f92e:	f10d 0810 	add.w	r8, sp, #16
 800f932:	6020      	str	r0, [r4, #0]
 800f934:	4640      	mov	r0, r8
 800f936:	f7ff fa17 	bl	800ed68 <rcl_publisher_get_default_options>
 800f93a:	490f      	ldr	r1, [pc, #60]	; (800f978 <rclc_publisher_init_default+0x64>)
 800f93c:	2250      	movs	r2, #80	; 0x50
 800f93e:	4640      	mov	r0, r8
 800f940:	f00a fc7c 	bl	801a23c <memcpy>
 800f944:	f8cd 8000 	str.w	r8, [sp]
 800f948:	463b      	mov	r3, r7
 800f94a:	4632      	mov	r2, r6
 800f94c:	4629      	mov	r1, r5
 800f94e:	4620      	mov	r0, r4
 800f950:	f7ff f914 	bl	800eb7c <rcl_publisher_init>
 800f954:	b910      	cbnz	r0, 800f95c <rclc_publisher_init_default+0x48>
 800f956:	b01e      	add	sp, #120	; 0x78
 800f958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f95c:	9003      	str	r0, [sp, #12]
 800f95e:	f000 f9a5 	bl	800fcac <rcutils_reset_error>
 800f962:	9803      	ldr	r0, [sp, #12]
 800f964:	b01e      	add	sp, #120	; 0x78
 800f966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f96a:	200b      	movs	r0, #11
 800f96c:	b01e      	add	sp, #120	; 0x78
 800f96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f972:	200b      	movs	r0, #11
 800f974:	4770      	bx	lr
 800f976:	bf00      	nop
 800f978:	0801f810 	.word	0x0801f810

0800f97c <rclc_subscription_init_best_effort>:
 800f97c:	b368      	cbz	r0, 800f9da <rclc_subscription_init_best_effort+0x5e>
 800f97e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f982:	460d      	mov	r5, r1
 800f984:	b0a0      	sub	sp, #128	; 0x80
 800f986:	b321      	cbz	r1, 800f9d2 <rclc_subscription_init_best_effort+0x56>
 800f988:	4616      	mov	r6, r2
 800f98a:	b312      	cbz	r2, 800f9d2 <rclc_subscription_init_best_effort+0x56>
 800f98c:	461f      	mov	r7, r3
 800f98e:	b303      	cbz	r3, 800f9d2 <rclc_subscription_init_best_effort+0x56>
 800f990:	4604      	mov	r4, r0
 800f992:	f7ff fa2f 	bl	800edf4 <rcl_get_zero_initialized_subscription>
 800f996:	f10d 0810 	add.w	r8, sp, #16
 800f99a:	6020      	str	r0, [r4, #0]
 800f99c:	4640      	mov	r0, r8
 800f99e:	f7ff fb25 	bl	800efec <rcl_subscription_get_default_options>
 800f9a2:	490f      	ldr	r1, [pc, #60]	; (800f9e0 <rclc_subscription_init_best_effort+0x64>)
 800f9a4:	2250      	movs	r2, #80	; 0x50
 800f9a6:	4640      	mov	r0, r8
 800f9a8:	f00a fc48 	bl	801a23c <memcpy>
 800f9ac:	f8cd 8000 	str.w	r8, [sp]
 800f9b0:	463b      	mov	r3, r7
 800f9b2:	4632      	mov	r2, r6
 800f9b4:	4629      	mov	r1, r5
 800f9b6:	4620      	mov	r0, r4
 800f9b8:	f7ff fa22 	bl	800ee00 <rcl_subscription_init>
 800f9bc:	b910      	cbnz	r0, 800f9c4 <rclc_subscription_init_best_effort+0x48>
 800f9be:	b020      	add	sp, #128	; 0x80
 800f9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9c4:	9003      	str	r0, [sp, #12]
 800f9c6:	f000 f971 	bl	800fcac <rcutils_reset_error>
 800f9ca:	9803      	ldr	r0, [sp, #12]
 800f9cc:	b020      	add	sp, #128	; 0x80
 800f9ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9d2:	200b      	movs	r0, #11
 800f9d4:	b020      	add	sp, #128	; 0x80
 800f9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9da:	200b      	movs	r0, #11
 800f9dc:	4770      	bx	lr
 800f9de:	bf00      	nop
 800f9e0:	0801f860 	.word	0x0801f860

0800f9e4 <rclc_timer_init_default>:
 800f9e4:	b350      	cbz	r0, 800fa3c <rclc_timer_init_default+0x58>
 800f9e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f9ea:	460c      	mov	r4, r1
 800f9ec:	b08b      	sub	sp, #44	; 0x2c
 800f9ee:	b309      	cbz	r1, 800fa34 <rclc_timer_init_default+0x50>
 800f9f0:	4691      	mov	r9, r2
 800f9f2:	4698      	mov	r8, r3
 800f9f4:	4607      	mov	r7, r0
 800f9f6:	f007 fa5f 	bl	8016eb8 <rcl_get_zero_initialized_timer>
 800f9fa:	69a6      	ldr	r6, [r4, #24]
 800f9fc:	6038      	str	r0, [r7, #0]
 800f9fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800fa00:	ad03      	add	r5, sp, #12
 800fa02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fa04:	6833      	ldr	r3, [r6, #0]
 800fa06:	602b      	str	r3, [r5, #0]
 800fa08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fa0a:	9302      	str	r3, [sp, #8]
 800fa0c:	e9cd 9800 	strd	r9, r8, [sp]
 800fa10:	4638      	mov	r0, r7
 800fa12:	f104 0208 	add.w	r2, r4, #8
 800fa16:	f104 011c 	add.w	r1, r4, #28
 800fa1a:	f007 fa53 	bl	8016ec4 <rcl_timer_init>
 800fa1e:	b910      	cbnz	r0, 800fa26 <rclc_timer_init_default+0x42>
 800fa20:	b00b      	add	sp, #44	; 0x2c
 800fa22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa26:	9009      	str	r0, [sp, #36]	; 0x24
 800fa28:	f000 f940 	bl	800fcac <rcutils_reset_error>
 800fa2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa2e:	b00b      	add	sp, #44	; 0x2c
 800fa30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa34:	200b      	movs	r0, #11
 800fa36:	b00b      	add	sp, #44	; 0x2c
 800fa38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa3c:	200b      	movs	r0, #11
 800fa3e:	4770      	bx	lr

0800fa40 <__default_zero_allocate>:
 800fa40:	f00a bb02 	b.w	801a048 <calloc>

0800fa44 <__default_reallocate>:
 800fa44:	f00a bf7a 	b.w	801a93c <realloc>

0800fa48 <__default_deallocate>:
 800fa48:	f00a bbf0 	b.w	801a22c <free>

0800fa4c <__default_allocate>:
 800fa4c:	f00a bbe6 	b.w	801a21c <malloc>

0800fa50 <rcutils_get_zero_initialized_allocator>:
 800fa50:	b470      	push	{r4, r5, r6}
 800fa52:	4d05      	ldr	r5, [pc, #20]	; (800fa68 <rcutils_get_zero_initialized_allocator+0x18>)
 800fa54:	4606      	mov	r6, r0
 800fa56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa58:	4634      	mov	r4, r6
 800fa5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa5c:	682b      	ldr	r3, [r5, #0]
 800fa5e:	6023      	str	r3, [r4, #0]
 800fa60:	4630      	mov	r0, r6
 800fa62:	bc70      	pop	{r4, r5, r6}
 800fa64:	4770      	bx	lr
 800fa66:	bf00      	nop
 800fa68:	0801f8b0 	.word	0x0801f8b0

0800fa6c <rcutils_set_default_allocator>:
 800fa6c:	b1a0      	cbz	r0, 800fa98 <rcutils_set_default_allocator+0x2c>
 800fa6e:	6801      	ldr	r1, [r0, #0]
 800fa70:	b199      	cbz	r1, 800fa9a <rcutils_set_default_allocator+0x2e>
 800fa72:	b430      	push	{r4, r5}
 800fa74:	6844      	ldr	r4, [r0, #4]
 800fa76:	b194      	cbz	r4, 800fa9e <rcutils_set_default_allocator+0x32>
 800fa78:	68c5      	ldr	r5, [r0, #12]
 800fa7a:	b15d      	cbz	r5, 800fa94 <rcutils_set_default_allocator+0x28>
 800fa7c:	6883      	ldr	r3, [r0, #8]
 800fa7e:	b18b      	cbz	r3, 800faa4 <rcutils_set_default_allocator+0x38>
 800fa80:	4a09      	ldr	r2, [pc, #36]	; (800faa8 <rcutils_set_default_allocator+0x3c>)
 800fa82:	e9c2 1400 	strd	r1, r4, [r2]
 800fa86:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	6110      	str	r0, [r2, #16]
 800fa8e:	2001      	movs	r0, #1
 800fa90:	bc30      	pop	{r4, r5}
 800fa92:	4770      	bx	lr
 800fa94:	4628      	mov	r0, r5
 800fa96:	e7fb      	b.n	800fa90 <rcutils_set_default_allocator+0x24>
 800fa98:	4770      	bx	lr
 800fa9a:	4608      	mov	r0, r1
 800fa9c:	4770      	bx	lr
 800fa9e:	4620      	mov	r0, r4
 800faa0:	bc30      	pop	{r4, r5}
 800faa2:	4770      	bx	lr
 800faa4:	4618      	mov	r0, r3
 800faa6:	e7f3      	b.n	800fa90 <rcutils_set_default_allocator+0x24>
 800faa8:	20000030 	.word	0x20000030

0800faac <rcutils_get_default_allocator>:
 800faac:	b470      	push	{r4, r5, r6}
 800faae:	4d05      	ldr	r5, [pc, #20]	; (800fac4 <rcutils_get_default_allocator+0x18>)
 800fab0:	4606      	mov	r6, r0
 800fab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fab4:	4634      	mov	r4, r6
 800fab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fab8:	682b      	ldr	r3, [r5, #0]
 800faba:	6023      	str	r3, [r4, #0]
 800fabc:	4630      	mov	r0, r6
 800fabe:	bc70      	pop	{r4, r5, r6}
 800fac0:	4770      	bx	lr
 800fac2:	bf00      	nop
 800fac4:	20000030 	.word	0x20000030

0800fac8 <rcutils_allocator_is_valid>:
 800fac8:	b158      	cbz	r0, 800fae2 <rcutils_allocator_is_valid+0x1a>
 800faca:	6803      	ldr	r3, [r0, #0]
 800facc:	b143      	cbz	r3, 800fae0 <rcutils_allocator_is_valid+0x18>
 800face:	6843      	ldr	r3, [r0, #4]
 800fad0:	b133      	cbz	r3, 800fae0 <rcutils_allocator_is_valid+0x18>
 800fad2:	68c3      	ldr	r3, [r0, #12]
 800fad4:	b123      	cbz	r3, 800fae0 <rcutils_allocator_is_valid+0x18>
 800fad6:	6880      	ldr	r0, [r0, #8]
 800fad8:	3800      	subs	r0, #0
 800fada:	bf18      	it	ne
 800fadc:	2001      	movne	r0, #1
 800fade:	4770      	bx	lr
 800fae0:	4618      	mov	r0, r3
 800fae2:	4770      	bx	lr

0800fae4 <__rcutils_format_error_string>:
 800fae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fae8:	460e      	mov	r6, r1
 800faea:	b086      	sub	sp, #24
 800faec:	4607      	mov	r7, r0
 800faee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800faf2:	4630      	mov	r0, r6
 800faf4:	f00b f82c 	bl	801ab50 <strnlen>
 800faf8:	f240 38ff 	movw	r8, #1023	; 0x3ff
 800fafc:	4540      	cmp	r0, r8
 800fafe:	bf28      	it	cs
 800fb00:	4640      	movcs	r0, r8
 800fb02:	4605      	mov	r5, r0
 800fb04:	f5c5 6480 	rsb	r4, r5, #1024	; 0x400
 800fb08:	462a      	mov	r2, r5
 800fb0a:	4631      	mov	r1, r6
 800fb0c:	4638      	mov	r0, r7
 800fb0e:	f00a fba3 	bl	801a258 <memmove>
 800fb12:	2c05      	cmp	r4, #5
 800fb14:	46a1      	mov	r9, r4
 800fb16:	bf28      	it	cs
 800fb18:	f04f 0905 	movcs.w	r9, #5
 800fb1c:	454c      	cmp	r4, r9
 800fb1e:	f04f 0300 	mov.w	r3, #0
 800fb22:	bf98      	it	ls
 800fb24:	eba8 0905 	subls.w	r9, r8, r5
 800fb28:	557b      	strb	r3, [r7, r5]
 800fb2a:	442f      	add	r7, r5
 800fb2c:	4949      	ldr	r1, [pc, #292]	; (800fc54 <__rcutils_format_error_string+0x170>)
 800fb2e:	eba4 0409 	sub.w	r4, r4, r9
 800fb32:	464a      	mov	r2, r9
 800fb34:	4638      	mov	r0, r7
 800fb36:	f04f 0800 	mov.w	r8, #0
 800fb3a:	f506 7540 	add.w	r5, r6, #768	; 0x300
 800fb3e:	f00a fb7d 	bl	801a23c <memcpy>
 800fb42:	f807 8009 	strb.w	r8, [r7, r9]
 800fb46:	4621      	mov	r1, r4
 800fb48:	4628      	mov	r0, r5
 800fb4a:	f00b f801 	bl	801ab50 <strnlen>
 800fb4e:	4284      	cmp	r4, r0
 800fb50:	4682      	mov	sl, r0
 800fb52:	444f      	add	r7, r9
 800fb54:	d96b      	bls.n	800fc2e <__rcutils_format_error_string+0x14a>
 800fb56:	1a24      	subs	r4, r4, r0
 800fb58:	2c01      	cmp	r4, #1
 800fb5a:	4629      	mov	r1, r5
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	4625      	mov	r5, r4
 800fb60:	4638      	mov	r0, r7
 800fb62:	bf28      	it	cs
 800fb64:	2501      	movcs	r5, #1
 800fb66:	f00a fb77 	bl	801a258 <memmove>
 800fb6a:	42ac      	cmp	r4, r5
 800fb6c:	f807 800a 	strb.w	r8, [r7, sl]
 800fb70:	eb07 030a 	add.w	r3, r7, sl
 800fb74:	bf88      	it	hi
 800fb76:	1b64      	subhi	r4, r4, r5
 800fb78:	d963      	bls.n	800fc42 <__rcutils_format_error_string+0x15e>
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	4936      	ldr	r1, [pc, #216]	; (800fc58 <__rcutils_format_error_string+0x174>)
 800fb7e:	462a      	mov	r2, r5
 800fb80:	f00a fb5c 	bl	801a23c <memcpy>
 800fb84:	f04f 0800 	mov.w	r8, #0
 800fb88:	f800 8005 	strb.w	r8, [r0, r5]
 800fb8c:	e9d6 67fa 	ldrd	r6, r7, [r6, #1000]	; 0x3e8
 800fb90:	ea56 0307 	orrs.w	r3, r6, r7
 800fb94:	eb00 0a05 	add.w	sl, r0, r5
 800fb98:	d056      	beq.n	800fc48 <__rcutils_format_error_string+0x164>
 800fb9a:	46e9      	mov	r9, sp
 800fb9c:	464d      	mov	r5, r9
 800fb9e:	4630      	mov	r0, r6
 800fba0:	4639      	mov	r1, r7
 800fba2:	220a      	movs	r2, #10
 800fba4:	2300      	movs	r3, #0
 800fba6:	f7f1 f8cf 	bl	8000d48 <__aeabi_uldivmod>
 800fbaa:	3230      	adds	r2, #48	; 0x30
 800fbac:	f805 2b01 	strb.w	r2, [r5], #1
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	220a      	movs	r2, #10
 800fbb4:	4630      	mov	r0, r6
 800fbb6:	4639      	mov	r1, r7
 800fbb8:	f7f1 f8c6 	bl	8000d48 <__aeabi_uldivmod>
 800fbbc:	463b      	mov	r3, r7
 800fbbe:	4632      	mov	r2, r6
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	bf08      	it	eq
 800fbc4:	2a0a      	cmpeq	r2, #10
 800fbc6:	f108 0801 	add.w	r8, r8, #1
 800fbca:	4606      	mov	r6, r0
 800fbcc:	460f      	mov	r7, r1
 800fbce:	d2e6      	bcs.n	800fb9e <__rcutils_format_error_string+0xba>
 800fbd0:	ab06      	add	r3, sp, #24
 800fbd2:	4498      	add	r8, r3
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	2115      	movs	r1, #21
 800fbd8:	f808 3c18 	strb.w	r3, [r8, #-24]
 800fbdc:	4648      	mov	r0, r9
 800fbde:	f00a ffb7 	bl	801ab50 <strnlen>
 800fbe2:	2801      	cmp	r0, #1
 800fbe4:	d90f      	bls.n	800fc06 <__rcutils_format_error_string+0x122>
 800fbe6:	1e43      	subs	r3, r0, #1
 800fbe8:	f10d 32ff 	add.w	r2, sp, #4294967295	; 0xffffffff
 800fbec:	4410      	add	r0, r2
 800fbee:	444b      	add	r3, r9
 800fbf0:	464a      	mov	r2, r9
 800fbf2:	7811      	ldrb	r1, [r2, #0]
 800fbf4:	781d      	ldrb	r5, [r3, #0]
 800fbf6:	f802 5b01 	strb.w	r5, [r2], #1
 800fbfa:	f803 1901 	strb.w	r1, [r3], #-1
 800fbfe:	1a81      	subs	r1, r0, r2
 800fc00:	1ac5      	subs	r5, r0, r3
 800fc02:	428d      	cmp	r5, r1
 800fc04:	d3f5      	bcc.n	800fbf2 <__rcutils_format_error_string+0x10e>
 800fc06:	4621      	mov	r1, r4
 800fc08:	4648      	mov	r0, r9
 800fc0a:	f00a ffa1 	bl	801ab50 <strnlen>
 800fc0e:	42a0      	cmp	r0, r4
 800fc10:	4605      	mov	r5, r0
 800fc12:	bf28      	it	cs
 800fc14:	f104 35ff 	addcs.w	r5, r4, #4294967295	; 0xffffffff
 800fc18:	4649      	mov	r1, r9
 800fc1a:	462a      	mov	r2, r5
 800fc1c:	4650      	mov	r0, sl
 800fc1e:	f00a fb0d 	bl	801a23c <memcpy>
 800fc22:	2300      	movs	r3, #0
 800fc24:	f80a 3005 	strb.w	r3, [sl, r5]
 800fc28:	b006      	add	sp, #24
 800fc2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc2e:	3c01      	subs	r4, #1
 800fc30:	4622      	mov	r2, r4
 800fc32:	4629      	mov	r1, r5
 800fc34:	4638      	mov	r0, r7
 800fc36:	f00a fb0f 	bl	801a258 <memmove>
 800fc3a:	f807 8004 	strb.w	r8, [r7, r4]
 800fc3e:	193b      	adds	r3, r7, r4
 800fc40:	2401      	movs	r4, #1
 800fc42:	1e65      	subs	r5, r4, #1
 800fc44:	2401      	movs	r4, #1
 800fc46:	e798      	b.n	800fb7a <__rcutils_format_error_string+0x96>
 800fc48:	2330      	movs	r3, #48	; 0x30
 800fc4a:	f8ad 3000 	strh.w	r3, [sp]
 800fc4e:	46e9      	mov	r9, sp
 800fc50:	e7d9      	b.n	800fc06 <__rcutils_format_error_string+0x122>
 800fc52:	bf00      	nop
 800fc54:	0801f8c4 	.word	0x0801f8c4
 800fc58:	0801f8cc 	.word	0x0801f8cc

0800fc5c <rcutils_get_error_string>:
 800fc5c:	b538      	push	{r3, r4, r5, lr}
 800fc5e:	4b0e      	ldr	r3, [pc, #56]	; (800fc98 <rcutils_get_error_string+0x3c>)
 800fc60:	781b      	ldrb	r3, [r3, #0]
 800fc62:	4604      	mov	r4, r0
 800fc64:	b18b      	cbz	r3, 800fc8a <rcutils_get_error_string+0x2e>
 800fc66:	4d0d      	ldr	r5, [pc, #52]	; (800fc9c <rcutils_get_error_string+0x40>)
 800fc68:	782b      	ldrb	r3, [r5, #0]
 800fc6a:	b13b      	cbz	r3, 800fc7c <rcutils_get_error_string+0x20>
 800fc6c:	490c      	ldr	r1, [pc, #48]	; (800fca0 <rcutils_get_error_string+0x44>)
 800fc6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fc72:	4620      	mov	r0, r4
 800fc74:	f00a fae2 	bl	801a23c <memcpy>
 800fc78:	4620      	mov	r0, r4
 800fc7a:	bd38      	pop	{r3, r4, r5, pc}
 800fc7c:	4909      	ldr	r1, [pc, #36]	; (800fca4 <rcutils_get_error_string+0x48>)
 800fc7e:	4808      	ldr	r0, [pc, #32]	; (800fca0 <rcutils_get_error_string+0x44>)
 800fc80:	f7ff ff30 	bl	800fae4 <__rcutils_format_error_string>
 800fc84:	2301      	movs	r3, #1
 800fc86:	702b      	strb	r3, [r5, #0]
 800fc88:	e7f0      	b.n	800fc6c <rcutils_get_error_string+0x10>
 800fc8a:	4907      	ldr	r1, [pc, #28]	; (800fca8 <rcutils_get_error_string+0x4c>)
 800fc8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fc90:	f00a fad4 	bl	801a23c <memcpy>
 800fc94:	4620      	mov	r0, r4
 800fc96:	bd38      	pop	{r3, r4, r5, pc}
 800fc98:	20010428 	.word	0x20010428
 800fc9c:	20010429 	.word	0x20010429
 800fca0:	20010e80 	.word	0x20010e80
 800fca4:	20011280 	.word	0x20011280
 800fca8:	0801f1c8 	.word	0x0801f1c8

0800fcac <rcutils_reset_error>:
 800fcac:	b510      	push	{r4, lr}
 800fcae:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800fcb2:	2100      	movs	r1, #0
 800fcb4:	4807      	ldr	r0, [pc, #28]	; (800fcd4 <rcutils_reset_error+0x28>)
 800fcb6:	f00a fae9 	bl	801a28c <memset>
 800fcba:	4b07      	ldr	r3, [pc, #28]	; (800fcd8 <rcutils_reset_error+0x2c>)
 800fcbc:	4907      	ldr	r1, [pc, #28]	; (800fcdc <rcutils_reset_error+0x30>)
 800fcbe:	4808      	ldr	r0, [pc, #32]	; (800fce0 <rcutils_reset_error+0x34>)
 800fcc0:	2400      	movs	r4, #0
 800fcc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fcc6:	701c      	strb	r4, [r3, #0]
 800fcc8:	f00a fab8 	bl	801a23c <memcpy>
 800fccc:	4b05      	ldr	r3, [pc, #20]	; (800fce4 <rcutils_reset_error+0x38>)
 800fcce:	701c      	strb	r4, [r3, #0]
 800fcd0:	bd10      	pop	{r4, pc}
 800fcd2:	bf00      	nop
 800fcd4:	20011280 	.word	0x20011280
 800fcd8:	20010429 	.word	0x20010429
 800fcdc:	0801e9c8 	.word	0x0801e9c8
 800fce0:	20010e80 	.word	0x20010e80
 800fce4:	20010428 	.word	0x20010428

0800fce8 <rcutils_get_zero_initialized_string_map>:
 800fce8:	4b01      	ldr	r3, [pc, #4]	; (800fcf0 <rcutils_get_zero_initialized_string_map+0x8>)
 800fcea:	2000      	movs	r0, #0
 800fcec:	6018      	str	r0, [r3, #0]
 800fcee:	4770      	bx	lr
 800fcf0:	2001042c 	.word	0x2001042c

0800fcf4 <rcutils_string_map_reserve>:
 800fcf4:	2800      	cmp	r0, #0
 800fcf6:	d061      	beq.n	800fdbc <rcutils_string_map_reserve+0xc8>
 800fcf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fcfc:	6805      	ldr	r5, [r0, #0]
 800fcfe:	b083      	sub	sp, #12
 800fd00:	460c      	mov	r4, r1
 800fd02:	4606      	mov	r6, r0
 800fd04:	b12d      	cbz	r5, 800fd12 <rcutils_string_map_reserve+0x1e>
 800fd06:	68eb      	ldr	r3, [r5, #12]
 800fd08:	42a3      	cmp	r3, r4
 800fd0a:	d906      	bls.n	800fd1a <rcutils_string_map_reserve+0x26>
 800fd0c:	461c      	mov	r4, r3
 800fd0e:	2d00      	cmp	r5, #0
 800fd10:	d1f9      	bne.n	800fd06 <rcutils_string_map_reserve+0x12>
 800fd12:	201f      	movs	r0, #31
 800fd14:	b003      	add	sp, #12
 800fd16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd1a:	68ab      	ldr	r3, [r5, #8]
 800fd1c:	42a3      	cmp	r3, r4
 800fd1e:	d049      	beq.n	800fdb4 <rcutils_string_map_reserve+0xc0>
 800fd20:	6a2f      	ldr	r7, [r5, #32]
 800fd22:	2c00      	cmp	r4, #0
 800fd24:	d035      	beq.n	800fd92 <rcutils_string_map_reserve+0x9e>
 800fd26:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800fd2a:	d245      	bcs.n	800fdb8 <rcutils_string_map_reserve+0xc4>
 800fd2c:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800fd30:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800fd34:	6828      	ldr	r0, [r5, #0]
 800fd36:	4641      	mov	r1, r8
 800fd38:	463a      	mov	r2, r7
 800fd3a:	47c8      	blx	r9
 800fd3c:	2800      	cmp	r0, #0
 800fd3e:	d03b      	beq.n	800fdb8 <rcutils_string_map_reserve+0xc4>
 800fd40:	6833      	ldr	r3, [r6, #0]
 800fd42:	463a      	mov	r2, r7
 800fd44:	6018      	str	r0, [r3, #0]
 800fd46:	4641      	mov	r1, r8
 800fd48:	6858      	ldr	r0, [r3, #4]
 800fd4a:	47c8      	blx	r9
 800fd4c:	2800      	cmp	r0, #0
 800fd4e:	d033      	beq.n	800fdb8 <rcutils_string_map_reserve+0xc4>
 800fd50:	6835      	ldr	r5, [r6, #0]
 800fd52:	68ab      	ldr	r3, [r5, #8]
 800fd54:	6068      	str	r0, [r5, #4]
 800fd56:	42a3      	cmp	r3, r4
 800fd58:	d227      	bcs.n	800fdaa <rcutils_string_map_reserve+0xb6>
 800fd5a:	682a      	ldr	r2, [r5, #0]
 800fd5c:	eb00 0108 	add.w	r1, r0, r8
 800fd60:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800fd64:	428f      	cmp	r7, r1
 800fd66:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800fd6a:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800fd6e:	d203      	bcs.n	800fd78 <rcutils_string_map_reserve+0x84>
 800fd70:	eb02 0108 	add.w	r1, r2, r8
 800fd74:	428e      	cmp	r6, r1
 800fd76:	d323      	bcc.n	800fdc0 <rcutils_string_map_reserve+0xcc>
 800fd78:	1ae3      	subs	r3, r4, r3
 800fd7a:	009a      	lsls	r2, r3, #2
 800fd7c:	4638      	mov	r0, r7
 800fd7e:	2100      	movs	r1, #0
 800fd80:	9201      	str	r2, [sp, #4]
 800fd82:	f00a fa83 	bl	801a28c <memset>
 800fd86:	9a01      	ldr	r2, [sp, #4]
 800fd88:	4630      	mov	r0, r6
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	f00a fa7e 	bl	801a28c <memset>
 800fd90:	e00b      	b.n	800fdaa <rcutils_string_map_reserve+0xb6>
 800fd92:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800fd96:	6828      	ldr	r0, [r5, #0]
 800fd98:	4639      	mov	r1, r7
 800fd9a:	47c0      	blx	r8
 800fd9c:	6833      	ldr	r3, [r6, #0]
 800fd9e:	4639      	mov	r1, r7
 800fda0:	6858      	ldr	r0, [r3, #4]
 800fda2:	601c      	str	r4, [r3, #0]
 800fda4:	47c0      	blx	r8
 800fda6:	6835      	ldr	r5, [r6, #0]
 800fda8:	606c      	str	r4, [r5, #4]
 800fdaa:	2000      	movs	r0, #0
 800fdac:	60ac      	str	r4, [r5, #8]
 800fdae:	b003      	add	sp, #12
 800fdb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdb4:	2000      	movs	r0, #0
 800fdb6:	e7ad      	b.n	800fd14 <rcutils_string_map_reserve+0x20>
 800fdb8:	200a      	movs	r0, #10
 800fdba:	e7ab      	b.n	800fd14 <rcutils_string_map_reserve+0x20>
 800fdbc:	200b      	movs	r0, #11
 800fdbe:	4770      	bx	lr
 800fdc0:	1f13      	subs	r3, r2, #4
 800fdc2:	f1ac 0c04 	sub.w	ip, ip, #4
 800fdc6:	4498      	add	r8, r3
 800fdc8:	4460      	add	r0, ip
 800fdca:	4462      	add	r2, ip
 800fdcc:	2300      	movs	r3, #0
 800fdce:	f842 3f04 	str.w	r3, [r2, #4]!
 800fdd2:	4542      	cmp	r2, r8
 800fdd4:	f840 3f04 	str.w	r3, [r0, #4]!
 800fdd8:	d1f9      	bne.n	800fdce <rcutils_string_map_reserve+0xda>
 800fdda:	e7e6      	b.n	800fdaa <rcutils_string_map_reserve+0xb6>

0800fddc <rcutils_string_map_init>:
 800fddc:	b082      	sub	sp, #8
 800fdde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fde0:	460e      	mov	r6, r1
 800fde2:	a906      	add	r1, sp, #24
 800fde4:	e881 000c 	stmia.w	r1, {r2, r3}
 800fde8:	b380      	cbz	r0, 800fe4c <rcutils_string_map_init+0x70>
 800fdea:	6807      	ldr	r7, [r0, #0]
 800fdec:	4604      	mov	r4, r0
 800fdee:	b12f      	cbz	r7, 800fdfc <rcutils_string_map_init+0x20>
 800fdf0:	251e      	movs	r5, #30
 800fdf2:	4628      	mov	r0, r5
 800fdf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fdf8:	b002      	add	sp, #8
 800fdfa:	4770      	bx	lr
 800fdfc:	a806      	add	r0, sp, #24
 800fdfe:	f7ff fe63 	bl	800fac8 <rcutils_allocator_is_valid>
 800fe02:	b318      	cbz	r0, 800fe4c <rcutils_string_map_init+0x70>
 800fe04:	9b06      	ldr	r3, [sp, #24]
 800fe06:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fe08:	2024      	movs	r0, #36	; 0x24
 800fe0a:	4798      	blx	r3
 800fe0c:	4605      	mov	r5, r0
 800fe0e:	6020      	str	r0, [r4, #0]
 800fe10:	b310      	cbz	r0, 800fe58 <rcutils_string_map_init+0x7c>
 800fe12:	f10d 0e18 	add.w	lr, sp, #24
 800fe16:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fe1a:	f105 0c10 	add.w	ip, r5, #16
 800fe1e:	e9c5 7700 	strd	r7, r7, [r5]
 800fe22:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800fe26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe2a:	f8de 3000 	ldr.w	r3, [lr]
 800fe2e:	f8cc 3000 	str.w	r3, [ip]
 800fe32:	4631      	mov	r1, r6
 800fe34:	4620      	mov	r0, r4
 800fe36:	f7ff ff5d 	bl	800fcf4 <rcutils_string_map_reserve>
 800fe3a:	4605      	mov	r5, r0
 800fe3c:	2800      	cmp	r0, #0
 800fe3e:	d0d8      	beq.n	800fdf2 <rcutils_string_map_init+0x16>
 800fe40:	9b07      	ldr	r3, [sp, #28]
 800fe42:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fe44:	6820      	ldr	r0, [r4, #0]
 800fe46:	4798      	blx	r3
 800fe48:	6027      	str	r7, [r4, #0]
 800fe4a:	e7d2      	b.n	800fdf2 <rcutils_string_map_init+0x16>
 800fe4c:	250b      	movs	r5, #11
 800fe4e:	4628      	mov	r0, r5
 800fe50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fe54:	b002      	add	sp, #8
 800fe56:	4770      	bx	lr
 800fe58:	250a      	movs	r5, #10
 800fe5a:	e7ca      	b.n	800fdf2 <rcutils_string_map_init+0x16>

0800fe5c <rcutils_string_map_fini>:
 800fe5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe60:	b082      	sub	sp, #8
 800fe62:	2800      	cmp	r0, #0
 800fe64:	d039      	beq.n	800feda <rcutils_string_map_fini+0x7e>
 800fe66:	6804      	ldr	r4, [r0, #0]
 800fe68:	4606      	mov	r6, r0
 800fe6a:	2c00      	cmp	r4, #0
 800fe6c:	d031      	beq.n	800fed2 <rcutils_string_map_fini+0x76>
 800fe6e:	68a3      	ldr	r3, [r4, #8]
 800fe70:	b323      	cbz	r3, 800febc <rcutils_string_map_fini+0x60>
 800fe72:	2500      	movs	r5, #0
 800fe74:	6822      	ldr	r2, [r4, #0]
 800fe76:	46a8      	mov	r8, r5
 800fe78:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800fe7c:	b1d8      	cbz	r0, 800feb6 <rcutils_string_map_fini+0x5a>
 800fe7e:	6a21      	ldr	r1, [r4, #32]
 800fe80:	6967      	ldr	r7, [r4, #20]
 800fe82:	9101      	str	r1, [sp, #4]
 800fe84:	47b8      	blx	r7
 800fe86:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fe8a:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800fe8e:	9901      	ldr	r1, [sp, #4]
 800fe90:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fe94:	47b8      	blx	r7
 800fe96:	68e3      	ldr	r3, [r4, #12]
 800fe98:	6862      	ldr	r2, [r4, #4]
 800fe9a:	3b01      	subs	r3, #1
 800fe9c:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800fea0:	60e3      	str	r3, [r4, #12]
 800fea2:	6834      	ldr	r4, [r6, #0]
 800fea4:	68a3      	ldr	r3, [r4, #8]
 800fea6:	3501      	adds	r5, #1
 800fea8:	429d      	cmp	r5, r3
 800feaa:	d207      	bcs.n	800febc <rcutils_string_map_fini+0x60>
 800feac:	6822      	ldr	r2, [r4, #0]
 800feae:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800feb2:	2800      	cmp	r0, #0
 800feb4:	d1e3      	bne.n	800fe7e <rcutils_string_map_fini+0x22>
 800feb6:	3501      	adds	r5, #1
 800feb8:	429d      	cmp	r5, r3
 800feba:	d3dd      	bcc.n	800fe78 <rcutils_string_map_fini+0x1c>
 800febc:	2100      	movs	r1, #0
 800febe:	4630      	mov	r0, r6
 800fec0:	f7ff ff18 	bl	800fcf4 <rcutils_string_map_reserve>
 800fec4:	4604      	mov	r4, r0
 800fec6:	b920      	cbnz	r0, 800fed2 <rcutils_string_map_fini+0x76>
 800fec8:	6830      	ldr	r0, [r6, #0]
 800feca:	6943      	ldr	r3, [r0, #20]
 800fecc:	6a01      	ldr	r1, [r0, #32]
 800fece:	4798      	blx	r3
 800fed0:	6034      	str	r4, [r6, #0]
 800fed2:	4620      	mov	r0, r4
 800fed4:	b002      	add	sp, #8
 800fed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feda:	240b      	movs	r4, #11
 800fedc:	4620      	mov	r0, r4
 800fede:	b002      	add	sp, #8
 800fee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fee4 <rcutils_string_map_getn>:
 800fee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fee8:	b082      	sub	sp, #8
 800feea:	b308      	cbz	r0, 800ff30 <rcutils_string_map_getn+0x4c>
 800feec:	6804      	ldr	r4, [r0, #0]
 800feee:	b304      	cbz	r4, 800ff32 <rcutils_string_map_getn+0x4e>
 800fef0:	460d      	mov	r5, r1
 800fef2:	b1e9      	cbz	r1, 800ff30 <rcutils_string_map_getn+0x4c>
 800fef4:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800fef8:	6827      	ldr	r7, [r4, #0]
 800fefa:	f1b9 0f00 	cmp.w	r9, #0
 800fefe:	d017      	beq.n	800ff30 <rcutils_string_map_getn+0x4c>
 800ff00:	4690      	mov	r8, r2
 800ff02:	3f04      	subs	r7, #4
 800ff04:	2600      	movs	r6, #0
 800ff06:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800ff0a:	9101      	str	r1, [sp, #4]
 800ff0c:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800ff10:	4608      	mov	r0, r1
 800ff12:	3601      	adds	r6, #1
 800ff14:	b151      	cbz	r1, 800ff2c <rcutils_string_map_getn+0x48>
 800ff16:	f7f0 f965 	bl	80001e4 <strlen>
 800ff1a:	4540      	cmp	r0, r8
 800ff1c:	4602      	mov	r2, r0
 800ff1e:	9901      	ldr	r1, [sp, #4]
 800ff20:	bf38      	it	cc
 800ff22:	4642      	movcc	r2, r8
 800ff24:	4628      	mov	r0, r5
 800ff26:	f00a fe01 	bl	801ab2c <strncmp>
 800ff2a:	b130      	cbz	r0, 800ff3a <rcutils_string_map_getn+0x56>
 800ff2c:	45b1      	cmp	r9, r6
 800ff2e:	d1ea      	bne.n	800ff06 <rcutils_string_map_getn+0x22>
 800ff30:	2400      	movs	r4, #0
 800ff32:	4620      	mov	r0, r4
 800ff34:	b002      	add	sp, #8
 800ff36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff3a:	6863      	ldr	r3, [r4, #4]
 800ff3c:	f853 400a 	ldr.w	r4, [r3, sl]
 800ff40:	4620      	mov	r0, r4
 800ff42:	b002      	add	sp, #8
 800ff44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ff48 <rcutils_system_time_now>:
 800ff48:	b310      	cbz	r0, 800ff90 <rcutils_system_time_now+0x48>
 800ff4a:	b570      	push	{r4, r5, r6, lr}
 800ff4c:	b084      	sub	sp, #16
 800ff4e:	4669      	mov	r1, sp
 800ff50:	4604      	mov	r4, r0
 800ff52:	2001      	movs	r0, #1
 800ff54:	f7f2 fe5c 	bl	8002c10 <clock_gettime>
 800ff58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff5c:	2800      	cmp	r0, #0
 800ff5e:	f171 0300 	sbcs.w	r3, r1, #0
 800ff62:	db12      	blt.n	800ff8a <rcutils_system_time_now+0x42>
 800ff64:	9d02      	ldr	r5, [sp, #8]
 800ff66:	2d00      	cmp	r5, #0
 800ff68:	db0c      	blt.n	800ff84 <rcutils_system_time_now+0x3c>
 800ff6a:	4e0a      	ldr	r6, [pc, #40]	; (800ff94 <rcutils_system_time_now+0x4c>)
 800ff6c:	fba0 2306 	umull	r2, r3, r0, r6
 800ff70:	1952      	adds	r2, r2, r5
 800ff72:	fb06 3301 	mla	r3, r6, r1, r3
 800ff76:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800ff7a:	2000      	movs	r0, #0
 800ff7c:	e9c4 2300 	strd	r2, r3, [r4]
 800ff80:	b004      	add	sp, #16
 800ff82:	bd70      	pop	{r4, r5, r6, pc}
 800ff84:	ea50 0301 	orrs.w	r3, r0, r1
 800ff88:	d1ef      	bne.n	800ff6a <rcutils_system_time_now+0x22>
 800ff8a:	2002      	movs	r0, #2
 800ff8c:	b004      	add	sp, #16
 800ff8e:	bd70      	pop	{r4, r5, r6, pc}
 800ff90:	200b      	movs	r0, #11
 800ff92:	4770      	bx	lr
 800ff94:	3b9aca00 	.word	0x3b9aca00

0800ff98 <rcutils_steady_time_now>:
 800ff98:	b310      	cbz	r0, 800ffe0 <rcutils_steady_time_now+0x48>
 800ff9a:	b570      	push	{r4, r5, r6, lr}
 800ff9c:	b084      	sub	sp, #16
 800ff9e:	4669      	mov	r1, sp
 800ffa0:	4604      	mov	r4, r0
 800ffa2:	2000      	movs	r0, #0
 800ffa4:	f7f2 fe34 	bl	8002c10 <clock_gettime>
 800ffa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffac:	2800      	cmp	r0, #0
 800ffae:	f171 0300 	sbcs.w	r3, r1, #0
 800ffb2:	db12      	blt.n	800ffda <rcutils_steady_time_now+0x42>
 800ffb4:	9d02      	ldr	r5, [sp, #8]
 800ffb6:	2d00      	cmp	r5, #0
 800ffb8:	db0c      	blt.n	800ffd4 <rcutils_steady_time_now+0x3c>
 800ffba:	4e0a      	ldr	r6, [pc, #40]	; (800ffe4 <rcutils_steady_time_now+0x4c>)
 800ffbc:	fba0 2306 	umull	r2, r3, r0, r6
 800ffc0:	1952      	adds	r2, r2, r5
 800ffc2:	fb06 3301 	mla	r3, r6, r1, r3
 800ffc6:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800ffca:	2000      	movs	r0, #0
 800ffcc:	e9c4 2300 	strd	r2, r3, [r4]
 800ffd0:	b004      	add	sp, #16
 800ffd2:	bd70      	pop	{r4, r5, r6, pc}
 800ffd4:	ea50 0301 	orrs.w	r3, r0, r1
 800ffd8:	d1ef      	bne.n	800ffba <rcutils_steady_time_now+0x22>
 800ffda:	2002      	movs	r0, #2
 800ffdc:	b004      	add	sp, #16
 800ffde:	bd70      	pop	{r4, r5, r6, pc}
 800ffe0:	200b      	movs	r0, #11
 800ffe2:	4770      	bx	lr
 800ffe4:	3b9aca00 	.word	0x3b9aca00

0800ffe8 <rmw_get_zero_initialized_init_options>:
 800ffe8:	b510      	push	{r4, lr}
 800ffea:	2238      	movs	r2, #56	; 0x38
 800ffec:	4604      	mov	r4, r0
 800ffee:	2100      	movs	r1, #0
 800fff0:	f00a f94c 	bl	801a28c <memset>
 800fff4:	f104 0010 	add.w	r0, r4, #16
 800fff8:	f000 f808 	bl	801000c <rmw_get_default_security_options>
 800fffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010000:	60e3      	str	r3, [r4, #12]
 8010002:	4620      	mov	r0, r4
 8010004:	bd10      	pop	{r4, pc}
 8010006:	bf00      	nop

08010008 <rmw_get_default_publisher_options>:
 8010008:	2000      	movs	r0, #0
 801000a:	4770      	bx	lr

0801000c <rmw_get_default_security_options>:
 801000c:	2200      	movs	r2, #0
 801000e:	7002      	strb	r2, [r0, #0]
 8010010:	6042      	str	r2, [r0, #4]
 8010012:	4770      	bx	lr

08010014 <rmw_get_default_subscription_options>:
 8010014:	2200      	movs	r2, #0
 8010016:	6002      	str	r2, [r0, #0]
 8010018:	7102      	strb	r2, [r0, #4]
 801001a:	4770      	bx	lr

0801001c <rmw_get_zero_initialized_message_info>:
 801001c:	b470      	push	{r4, r5, r6}
 801001e:	4d07      	ldr	r5, [pc, #28]	; (801003c <rmw_get_zero_initialized_message_info+0x20>)
 8010020:	4606      	mov	r6, r0
 8010022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010024:	4634      	mov	r4, r6
 8010026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801002a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801002c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010030:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010034:	4630      	mov	r0, r6
 8010036:	bc70      	pop	{r4, r5, r6}
 8010038:	4770      	bx	lr
 801003a:	bf00      	nop
 801003c:	0801f5c8 	.word	0x0801f5c8

08010040 <rmw_validate_full_topic_name>:
 8010040:	2800      	cmp	r0, #0
 8010042:	d062      	beq.n	801010a <rmw_validate_full_topic_name+0xca>
 8010044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010048:	460d      	mov	r5, r1
 801004a:	2900      	cmp	r1, #0
 801004c:	d05f      	beq.n	801010e <rmw_validate_full_topic_name+0xce>
 801004e:	4616      	mov	r6, r2
 8010050:	4604      	mov	r4, r0
 8010052:	f7f0 f8c7 	bl	80001e4 <strlen>
 8010056:	b148      	cbz	r0, 801006c <rmw_validate_full_topic_name+0x2c>
 8010058:	7823      	ldrb	r3, [r4, #0]
 801005a:	2b2f      	cmp	r3, #47	; 0x2f
 801005c:	d00d      	beq.n	801007a <rmw_validate_full_topic_name+0x3a>
 801005e:	2302      	movs	r3, #2
 8010060:	602b      	str	r3, [r5, #0]
 8010062:	b13e      	cbz	r6, 8010074 <rmw_validate_full_topic_name+0x34>
 8010064:	2000      	movs	r0, #0
 8010066:	6030      	str	r0, [r6, #0]
 8010068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801006c:	2301      	movs	r3, #1
 801006e:	602b      	str	r3, [r5, #0]
 8010070:	2e00      	cmp	r6, #0
 8010072:	d1f7      	bne.n	8010064 <rmw_validate_full_topic_name+0x24>
 8010074:	2000      	movs	r0, #0
 8010076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801007a:	1e47      	subs	r7, r0, #1
 801007c:	5de3      	ldrb	r3, [r4, r7]
 801007e:	2b2f      	cmp	r3, #47	; 0x2f
 8010080:	d047      	beq.n	8010112 <rmw_validate_full_topic_name+0xd2>
 8010082:	1e63      	subs	r3, r4, #1
 8010084:	eb03 0900 	add.w	r9, r3, r0
 8010088:	f1c4 0e01 	rsb	lr, r4, #1
 801008c:	eb0e 0803 	add.w	r8, lr, r3
 8010090:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010094:	f021 0220 	bic.w	r2, r1, #32
 8010098:	3a41      	subs	r2, #65	; 0x41
 801009a:	2a19      	cmp	r2, #25
 801009c:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 80100a0:	d90c      	bls.n	80100bc <rmw_validate_full_topic_name+0x7c>
 80100a2:	295f      	cmp	r1, #95	; 0x5f
 80100a4:	d00a      	beq.n	80100bc <rmw_validate_full_topic_name+0x7c>
 80100a6:	f1bc 0f0a 	cmp.w	ip, #10
 80100aa:	d907      	bls.n	80100bc <rmw_validate_full_topic_name+0x7c>
 80100ac:	2304      	movs	r3, #4
 80100ae:	602b      	str	r3, [r5, #0]
 80100b0:	2e00      	cmp	r6, #0
 80100b2:	d0df      	beq.n	8010074 <rmw_validate_full_topic_name+0x34>
 80100b4:	f8c6 8000 	str.w	r8, [r6]
 80100b8:	2000      	movs	r0, #0
 80100ba:	e7d5      	b.n	8010068 <rmw_validate_full_topic_name+0x28>
 80100bc:	454b      	cmp	r3, r9
 80100be:	d1e5      	bne.n	801008c <rmw_validate_full_topic_name+0x4c>
 80100c0:	f8df e084 	ldr.w	lr, [pc, #132]	; 8010148 <rmw_validate_full_topic_name+0x108>
 80100c4:	2300      	movs	r3, #0
 80100c6:	f107 0801 	add.w	r8, r7, #1
 80100ca:	e005      	b.n	80100d8 <rmw_validate_full_topic_name+0x98>
 80100cc:	4611      	mov	r1, r2
 80100ce:	4288      	cmp	r0, r1
 80100d0:	4613      	mov	r3, r2
 80100d2:	f104 0401 	add.w	r4, r4, #1
 80100d6:	d925      	bls.n	8010124 <rmw_validate_full_topic_name+0xe4>
 80100d8:	429f      	cmp	r7, r3
 80100da:	f103 0201 	add.w	r2, r3, #1
 80100de:	d01e      	beq.n	801011e <rmw_validate_full_topic_name+0xde>
 80100e0:	7821      	ldrb	r1, [r4, #0]
 80100e2:	292f      	cmp	r1, #47	; 0x2f
 80100e4:	d1f2      	bne.n	80100cc <rmw_validate_full_topic_name+0x8c>
 80100e6:	f894 c001 	ldrb.w	ip, [r4, #1]
 80100ea:	1c5a      	adds	r2, r3, #1
 80100ec:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 80100f0:	4611      	mov	r1, r2
 80100f2:	d024      	beq.n	801013e <rmw_validate_full_topic_name+0xfe>
 80100f4:	f81c 300e 	ldrb.w	r3, [ip, lr]
 80100f8:	075b      	lsls	r3, r3, #29
 80100fa:	d5e8      	bpl.n	80100ce <rmw_validate_full_topic_name+0x8e>
 80100fc:	2306      	movs	r3, #6
 80100fe:	602b      	str	r3, [r5, #0]
 8010100:	2e00      	cmp	r6, #0
 8010102:	d0b7      	beq.n	8010074 <rmw_validate_full_topic_name+0x34>
 8010104:	6032      	str	r2, [r6, #0]
 8010106:	2000      	movs	r0, #0
 8010108:	e7ae      	b.n	8010068 <rmw_validate_full_topic_name+0x28>
 801010a:	200b      	movs	r0, #11
 801010c:	4770      	bx	lr
 801010e:	200b      	movs	r0, #11
 8010110:	e7aa      	b.n	8010068 <rmw_validate_full_topic_name+0x28>
 8010112:	2303      	movs	r3, #3
 8010114:	602b      	str	r3, [r5, #0]
 8010116:	2e00      	cmp	r6, #0
 8010118:	d0ac      	beq.n	8010074 <rmw_validate_full_topic_name+0x34>
 801011a:	6037      	str	r7, [r6, #0]
 801011c:	e7aa      	b.n	8010074 <rmw_validate_full_topic_name+0x34>
 801011e:	4641      	mov	r1, r8
 8010120:	1c7a      	adds	r2, r7, #1
 8010122:	e7d4      	b.n	80100ce <rmw_validate_full_topic_name+0x8e>
 8010124:	28f7      	cmp	r0, #247	; 0xf7
 8010126:	d802      	bhi.n	801012e <rmw_validate_full_topic_name+0xee>
 8010128:	2000      	movs	r0, #0
 801012a:	6028      	str	r0, [r5, #0]
 801012c:	e79c      	b.n	8010068 <rmw_validate_full_topic_name+0x28>
 801012e:	2307      	movs	r3, #7
 8010130:	602b      	str	r3, [r5, #0]
 8010132:	2e00      	cmp	r6, #0
 8010134:	d09e      	beq.n	8010074 <rmw_validate_full_topic_name+0x34>
 8010136:	23f6      	movs	r3, #246	; 0xf6
 8010138:	6033      	str	r3, [r6, #0]
 801013a:	2000      	movs	r0, #0
 801013c:	e794      	b.n	8010068 <rmw_validate_full_topic_name+0x28>
 801013e:	2305      	movs	r3, #5
 8010140:	602b      	str	r3, [r5, #0]
 8010142:	2e00      	cmp	r6, #0
 8010144:	d1de      	bne.n	8010104 <rmw_validate_full_topic_name+0xc4>
 8010146:	e795      	b.n	8010074 <rmw_validate_full_topic_name+0x34>
 8010148:	08020111 	.word	0x08020111

0801014c <rmw_uros_set_custom_transport>:
 801014c:	b470      	push	{r4, r5, r6}
 801014e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8010152:	b162      	cbz	r2, 801016e <rmw_uros_set_custom_transport+0x22>
 8010154:	b15b      	cbz	r3, 801016e <rmw_uros_set_custom_transport+0x22>
 8010156:	b155      	cbz	r5, 801016e <rmw_uros_set_custom_transport+0x22>
 8010158:	b14e      	cbz	r6, 801016e <rmw_uros_set_custom_transport+0x22>
 801015a:	4c06      	ldr	r4, [pc, #24]	; (8010174 <rmw_uros_set_custom_transport+0x28>)
 801015c:	7020      	strb	r0, [r4, #0]
 801015e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8010162:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010166:	6166      	str	r6, [r4, #20]
 8010168:	2000      	movs	r0, #0
 801016a:	bc70      	pop	{r4, r5, r6}
 801016c:	4770      	bx	lr
 801016e:	200b      	movs	r0, #11
 8010170:	bc70      	pop	{r4, r5, r6}
 8010172:	4770      	bx	lr
 8010174:	20011670 	.word	0x20011670

08010178 <rmw_init_options_init>:
 8010178:	b084      	sub	sp, #16
 801017a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801017e:	ad09      	add	r5, sp, #36	; 0x24
 8010180:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8010184:	b130      	cbz	r0, 8010194 <rmw_init_options_init+0x1c>
 8010186:	4604      	mov	r4, r0
 8010188:	4628      	mov	r0, r5
 801018a:	f7ff fc9d 	bl	800fac8 <rcutils_allocator_is_valid>
 801018e:	b108      	cbz	r0, 8010194 <rmw_init_options_init+0x1c>
 8010190:	68a3      	ldr	r3, [r4, #8]
 8010192:	b123      	cbz	r3, 801019e <rmw_init_options_init+0x26>
 8010194:	200b      	movs	r0, #11
 8010196:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801019a:	b004      	add	sp, #16
 801019c:	4770      	bx	lr
 801019e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80101a0:	4f1c      	ldr	r7, [pc, #112]	; (8010214 <rmw_init_options_init+0x9c>)
 80101a2:	682e      	ldr	r6, [r5, #0]
 80101a4:	683d      	ldr	r5, [r7, #0]
 80101a6:	60a5      	str	r5, [r4, #8]
 80101a8:	f04f 0800 	mov.w	r8, #0
 80101ac:	f04f 0900 	mov.w	r9, #0
 80101b0:	f104 0520 	add.w	r5, r4, #32
 80101b4:	e9c4 8900 	strd	r8, r9, [r4]
 80101b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80101ba:	4b17      	ldr	r3, [pc, #92]	; (8010218 <rmw_init_options_init+0xa0>)
 80101bc:	4817      	ldr	r0, [pc, #92]	; (801021c <rmw_init_options_init+0xa4>)
 80101be:	602e      	str	r6, [r5, #0]
 80101c0:	4917      	ldr	r1, [pc, #92]	; (8010220 <rmw_init_options_init+0xa8>)
 80101c2:	61e3      	str	r3, [r4, #28]
 80101c4:	2203      	movs	r2, #3
 80101c6:	f000 ff63 	bl	8011090 <rmw_uxrce_init_init_options_impl_memory>
 80101ca:	4814      	ldr	r0, [pc, #80]	; (801021c <rmw_init_options_init+0xa4>)
 80101cc:	f008 fb86 	bl	80188dc <get_memory>
 80101d0:	b1e8      	cbz	r0, 801020e <rmw_init_options_init+0x96>
 80101d2:	4a14      	ldr	r2, [pc, #80]	; (8010224 <rmw_init_options_init+0xac>)
 80101d4:	68c3      	ldr	r3, [r0, #12]
 80101d6:	6851      	ldr	r1, [r2, #4]
 80101d8:	7810      	ldrb	r0, [r2, #0]
 80101da:	6363      	str	r3, [r4, #52]	; 0x34
 80101dc:	7418      	strb	r0, [r3, #16]
 80101de:	6159      	str	r1, [r3, #20]
 80101e0:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 80101e4:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 80101e8:	e9c3 5006 	strd	r5, r0, [r3, #24]
 80101ec:	e9c3 1208 	strd	r1, r2, [r3, #32]
 80101f0:	f004 fea0 	bl	8014f34 <uxr_nanos>
 80101f4:	f00a fb34 	bl	801a860 <srand>
 80101f8:	f00a fb60 	bl	801a8bc <rand>
 80101fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80101fe:	6298      	str	r0, [r3, #40]	; 0x28
 8010200:	2800      	cmp	r0, #0
 8010202:	d0f9      	beq.n	80101f8 <rmw_init_options_init+0x80>
 8010204:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010208:	2000      	movs	r0, #0
 801020a:	b004      	add	sp, #16
 801020c:	4770      	bx	lr
 801020e:	2001      	movs	r0, #1
 8010210:	e7c1      	b.n	8010196 <rmw_init_options_init+0x1e>
 8010212:	bf00      	nop
 8010214:	08020098 	.word	0x08020098
 8010218:	0801f8d0 	.word	0x0801f8d0
 801021c:	2001498c 	.word	0x2001498c
 8010220:	200145e0 	.word	0x200145e0
 8010224:	20011670 	.word	0x20011670

08010228 <rmw_init_options_copy>:
 8010228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801022a:	b158      	cbz	r0, 8010244 <rmw_init_options_copy+0x1c>
 801022c:	460e      	mov	r6, r1
 801022e:	b149      	cbz	r1, 8010244 <rmw_init_options_copy+0x1c>
 8010230:	4b1d      	ldr	r3, [pc, #116]	; (80102a8 <rmw_init_options_copy+0x80>)
 8010232:	4604      	mov	r4, r0
 8010234:	6819      	ldr	r1, [r3, #0]
 8010236:	6880      	ldr	r0, [r0, #8]
 8010238:	f7ef ffca 	bl	80001d0 <strcmp>
 801023c:	4607      	mov	r7, r0
 801023e:	bb68      	cbnz	r0, 801029c <rmw_init_options_copy+0x74>
 8010240:	68b3      	ldr	r3, [r6, #8]
 8010242:	b113      	cbz	r3, 801024a <rmw_init_options_copy+0x22>
 8010244:	270b      	movs	r7, #11
 8010246:	4638      	mov	r0, r7
 8010248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801024a:	4623      	mov	r3, r4
 801024c:	4632      	mov	r2, r6
 801024e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8010252:	681d      	ldr	r5, [r3, #0]
 8010254:	6858      	ldr	r0, [r3, #4]
 8010256:	6899      	ldr	r1, [r3, #8]
 8010258:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801025c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8010260:	3310      	adds	r3, #16
 8010262:	4573      	cmp	r3, lr
 8010264:	6015      	str	r5, [r2, #0]
 8010266:	6050      	str	r0, [r2, #4]
 8010268:	6091      	str	r1, [r2, #8]
 801026a:	f102 0210 	add.w	r2, r2, #16
 801026e:	d1f0      	bne.n	8010252 <rmw_init_options_copy+0x2a>
 8010270:	6819      	ldr	r1, [r3, #0]
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	480d      	ldr	r0, [pc, #52]	; (80102ac <rmw_init_options_copy+0x84>)
 8010276:	6053      	str	r3, [r2, #4]
 8010278:	6011      	str	r1, [r2, #0]
 801027a:	f008 fb2f 	bl	80188dc <get_memory>
 801027e:	b180      	cbz	r0, 80102a2 <rmw_init_options_copy+0x7a>
 8010280:	68c5      	ldr	r5, [r0, #12]
 8010282:	6375      	str	r5, [r6, #52]	; 0x34
 8010284:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8010286:	3610      	adds	r6, #16
 8010288:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801028a:	f105 0410 	add.w	r4, r5, #16
 801028e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010290:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8010294:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010298:	4638      	mov	r0, r7
 801029a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801029c:	270c      	movs	r7, #12
 801029e:	4638      	mov	r0, r7
 80102a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102a2:	2701      	movs	r7, #1
 80102a4:	e7cf      	b.n	8010246 <rmw_init_options_copy+0x1e>
 80102a6:	bf00      	nop
 80102a8:	08020098 	.word	0x08020098
 80102ac:	2001498c 	.word	0x2001498c

080102b0 <rmw_init_options_fini>:
 80102b0:	b570      	push	{r4, r5, r6, lr}
 80102b2:	b08e      	sub	sp, #56	; 0x38
 80102b4:	b348      	cbz	r0, 801030a <rmw_init_options_fini+0x5a>
 80102b6:	4604      	mov	r4, r0
 80102b8:	3020      	adds	r0, #32
 80102ba:	f7ff fc05 	bl	800fac8 <rcutils_allocator_is_valid>
 80102be:	b320      	cbz	r0, 801030a <rmw_init_options_fini+0x5a>
 80102c0:	4b18      	ldr	r3, [pc, #96]	; (8010324 <rmw_init_options_fini+0x74>)
 80102c2:	68a0      	ldr	r0, [r4, #8]
 80102c4:	6819      	ldr	r1, [r3, #0]
 80102c6:	f7ef ff83 	bl	80001d0 <strcmp>
 80102ca:	4606      	mov	r6, r0
 80102cc:	bb28      	cbnz	r0, 801031a <rmw_init_options_fini+0x6a>
 80102ce:	4b16      	ldr	r3, [pc, #88]	; (8010328 <rmw_init_options_fini+0x78>)
 80102d0:	6819      	ldr	r1, [r3, #0]
 80102d2:	b1f1      	cbz	r1, 8010312 <rmw_init_options_fini+0x62>
 80102d4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80102d6:	e001      	b.n	80102dc <rmw_init_options_fini+0x2c>
 80102d8:	6889      	ldr	r1, [r1, #8]
 80102da:	b1d1      	cbz	r1, 8010312 <rmw_init_options_fini+0x62>
 80102dc:	68cb      	ldr	r3, [r1, #12]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d1fa      	bne.n	80102d8 <rmw_init_options_fini+0x28>
 80102e2:	4811      	ldr	r0, [pc, #68]	; (8010328 <rmw_init_options_fini+0x78>)
 80102e4:	f008 fb0a 	bl	80188fc <put_memory>
 80102e8:	466d      	mov	r5, sp
 80102ea:	4668      	mov	r0, sp
 80102ec:	f7ff fe7c 	bl	800ffe8 <rmw_get_zero_initialized_init_options>
 80102f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80102f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80102f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80102fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010300:	e884 0003 	stmia.w	r4, {r0, r1}
 8010304:	4630      	mov	r0, r6
 8010306:	b00e      	add	sp, #56	; 0x38
 8010308:	bd70      	pop	{r4, r5, r6, pc}
 801030a:	260b      	movs	r6, #11
 801030c:	4630      	mov	r0, r6
 801030e:	b00e      	add	sp, #56	; 0x38
 8010310:	bd70      	pop	{r4, r5, r6, pc}
 8010312:	2601      	movs	r6, #1
 8010314:	4630      	mov	r0, r6
 8010316:	b00e      	add	sp, #56	; 0x38
 8010318:	bd70      	pop	{r4, r5, r6, pc}
 801031a:	260c      	movs	r6, #12
 801031c:	4630      	mov	r0, r6
 801031e:	b00e      	add	sp, #56	; 0x38
 8010320:	bd70      	pop	{r4, r5, r6, pc}
 8010322:	bf00      	nop
 8010324:	08020098 	.word	0x08020098
 8010328:	2001498c 	.word	0x2001498c

0801032c <rmw_init>:
 801032c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010330:	b083      	sub	sp, #12
 8010332:	2800      	cmp	r0, #0
 8010334:	f000 80e0 	beq.w	80104f8 <rmw_init+0x1cc>
 8010338:	460e      	mov	r6, r1
 801033a:	2900      	cmp	r1, #0
 801033c:	f000 80dc 	beq.w	80104f8 <rmw_init+0x1cc>
 8010340:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010342:	4604      	mov	r4, r0
 8010344:	2b00      	cmp	r3, #0
 8010346:	f000 80d7 	beq.w	80104f8 <rmw_init+0x1cc>
 801034a:	4b70      	ldr	r3, [pc, #448]	; (801050c <rmw_init+0x1e0>)
 801034c:	6880      	ldr	r0, [r0, #8]
 801034e:	f8d3 8000 	ldr.w	r8, [r3]
 8010352:	4641      	mov	r1, r8
 8010354:	f7ef ff3c 	bl	80001d0 <strcmp>
 8010358:	4607      	mov	r7, r0
 801035a:	2800      	cmp	r0, #0
 801035c:	f040 80c7 	bne.w	80104ee <rmw_init+0x1c2>
 8010360:	e9d4 0100 	ldrd	r0, r1, [r4]
 8010364:	68e3      	ldr	r3, [r4, #12]
 8010366:	61f3      	str	r3, [r6, #28]
 8010368:	e9c6 0100 	strd	r0, r1, [r6]
 801036c:	2201      	movs	r2, #1
 801036e:	4968      	ldr	r1, [pc, #416]	; (8010510 <rmw_init+0x1e4>)
 8010370:	4868      	ldr	r0, [pc, #416]	; (8010514 <rmw_init+0x1e8>)
 8010372:	f8c6 8008 	str.w	r8, [r6, #8]
 8010376:	f000 fe33 	bl	8010fe0 <rmw_uxrce_init_session_memory>
 801037a:	4867      	ldr	r0, [pc, #412]	; (8010518 <rmw_init+0x1ec>)
 801037c:	4967      	ldr	r1, [pc, #412]	; (801051c <rmw_init+0x1f0>)
 801037e:	2204      	movs	r2, #4
 8010380:	f000 fe68 	bl	8011054 <rmw_uxrce_init_static_input_buffer_memory>
 8010384:	4863      	ldr	r0, [pc, #396]	; (8010514 <rmw_init+0x1e8>)
 8010386:	f008 faa9 	bl	80188dc <get_memory>
 801038a:	2800      	cmp	r0, #0
 801038c:	f000 80b9 	beq.w	8010502 <rmw_init+0x1d6>
 8010390:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
 8010394:	68c5      	ldr	r5, [r0, #12]
 8010396:	f8dc 0024 	ldr.w	r0, [ip, #36]	; 0x24
 801039a:	f89c 1010 	ldrb.w	r1, [ip, #16]
 801039e:	e9dc 2306 	ldrd	r2, r3, [ip, #24]
 80103a2:	9001      	str	r0, [sp, #4]
 80103a4:	f8dc 0020 	ldr.w	r0, [ip, #32]
 80103a8:	9000      	str	r0, [sp, #0]
 80103aa:	f105 0910 	add.w	r9, r5, #16
 80103ae:	4648      	mov	r0, r9
 80103b0:	f002 ff5e 	bl	8013270 <uxr_set_custom_transport_callbacks>
 80103b4:	f241 5394 	movw	r3, #5524	; 0x1594
 80103b8:	f241 5c98 	movw	ip, #5528	; 0x1598
 80103bc:	f241 509c 	movw	r0, #5532	; 0x159c
 80103c0:	f505 51ad 	add.w	r1, r5, #5536	; 0x15a0
 80103c4:	50ef      	str	r7, [r5, r3]
 80103c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80103ca:	f505 735e 	add.w	r3, r5, #888	; 0x378
 80103ce:	f845 700c 	str.w	r7, [r5, ip]
 80103d2:	502f      	str	r7, [r5, r0]
 80103d4:	e9c5 33e1 	strd	r3, r3, [r5, #900]	; 0x384
 80103d8:	e9c5 22e3 	strd	r2, r2, [r5, #908]	; 0x38c
 80103dc:	4850      	ldr	r0, [pc, #320]	; (8010520 <rmw_init+0x1f4>)
 80103de:	600f      	str	r7, [r1, #0]
 80103e0:	2201      	movs	r2, #1
 80103e2:	e9c5 87da 	strd	r8, r7, [r5, #872]	; 0x368
 80103e6:	494f      	ldr	r1, [pc, #316]	; (8010524 <rmw_init+0x1f8>)
 80103e8:	64b5      	str	r5, [r6, #72]	; 0x48
 80103ea:	f000 fddf 	bl	8010fac <rmw_uxrce_init_node_memory>
 80103ee:	494e      	ldr	r1, [pc, #312]	; (8010528 <rmw_init+0x1fc>)
 80103f0:	484e      	ldr	r0, [pc, #312]	; (801052c <rmw_init+0x200>)
 80103f2:	2205      	movs	r2, #5
 80103f4:	f000 fdc0 	bl	8010f78 <rmw_uxrce_init_subscription_memory>
 80103f8:	494d      	ldr	r1, [pc, #308]	; (8010530 <rmw_init+0x204>)
 80103fa:	484e      	ldr	r0, [pc, #312]	; (8010534 <rmw_init+0x208>)
 80103fc:	220a      	movs	r2, #10
 80103fe:	f000 fda1 	bl	8010f44 <rmw_uxrce_init_publisher_memory>
 8010402:	494d      	ldr	r1, [pc, #308]	; (8010538 <rmw_init+0x20c>)
 8010404:	484d      	ldr	r0, [pc, #308]	; (801053c <rmw_init+0x210>)
 8010406:	2201      	movs	r2, #1
 8010408:	f000 fd68 	bl	8010edc <rmw_uxrce_init_service_memory>
 801040c:	494c      	ldr	r1, [pc, #304]	; (8010540 <rmw_init+0x214>)
 801040e:	484d      	ldr	r0, [pc, #308]	; (8010544 <rmw_init+0x218>)
 8010410:	2201      	movs	r2, #1
 8010412:	f000 fd7d 	bl	8010f10 <rmw_uxrce_init_client_memory>
 8010416:	494c      	ldr	r1, [pc, #304]	; (8010548 <rmw_init+0x21c>)
 8010418:	484c      	ldr	r0, [pc, #304]	; (801054c <rmw_init+0x220>)
 801041a:	220f      	movs	r2, #15
 801041c:	f000 fdfe 	bl	801101c <rmw_uxrce_init_topic_memory>
 8010420:	494b      	ldr	r1, [pc, #300]	; (8010550 <rmw_init+0x224>)
 8010422:	484c      	ldr	r0, [pc, #304]	; (8010554 <rmw_init+0x228>)
 8010424:	2203      	movs	r2, #3
 8010426:	f000 fe33 	bl	8011090 <rmw_uxrce_init_init_options_impl_memory>
 801042a:	494b      	ldr	r1, [pc, #300]	; (8010558 <rmw_init+0x22c>)
 801042c:	484b      	ldr	r0, [pc, #300]	; (801055c <rmw_init+0x230>)
 801042e:	2204      	movs	r2, #4
 8010430:	f000 fe48 	bl	80110c4 <rmw_uxrce_init_wait_set_memory>
 8010434:	494a      	ldr	r1, [pc, #296]	; (8010560 <rmw_init+0x234>)
 8010436:	484b      	ldr	r0, [pc, #300]	; (8010564 <rmw_init+0x238>)
 8010438:	2204      	movs	r2, #4
 801043a:	f000 fe5f 	bl	80110fc <rmw_uxrce_init_guard_condition_memory>
 801043e:	463a      	mov	r2, r7
 8010440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010442:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8010444:	f000 fd12 	bl	8010e6c <rmw_uxrce_transport_init>
 8010448:	4607      	mov	r7, r0
 801044a:	2800      	cmp	r0, #0
 801044c:	d150      	bne.n	80104f0 <rmw_init+0x1c4>
 801044e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010450:	f505 7428 	add.w	r4, r5, #672	; 0x2a0
 8010454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010456:	4620      	mov	r0, r4
 8010458:	f505 7122 	add.w	r1, r5, #648	; 0x288
 801045c:	f003 fb82 	bl	8013b64 <uxr_init_session>
 8010460:	4941      	ldr	r1, [pc, #260]	; (8010568 <rmw_init+0x23c>)
 8010462:	462a      	mov	r2, r5
 8010464:	4620      	mov	r0, r4
 8010466:	f003 fb9f 	bl	8013ba8 <uxr_set_topic_callback>
 801046a:	4940      	ldr	r1, [pc, #256]	; (801056c <rmw_init+0x240>)
 801046c:	463a      	mov	r2, r7
 801046e:	4620      	mov	r0, r4
 8010470:	f003 fb96 	bl	8013ba0 <uxr_set_status_callback>
 8010474:	493e      	ldr	r1, [pc, #248]	; (8010570 <rmw_init+0x244>)
 8010476:	463a      	mov	r2, r7
 8010478:	4620      	mov	r0, r4
 801047a:	f003 fb99 	bl	8013bb0 <uxr_set_request_callback>
 801047e:	493d      	ldr	r1, [pc, #244]	; (8010574 <rmw_init+0x248>)
 8010480:	463a      	mov	r2, r7
 8010482:	4620      	mov	r0, r4
 8010484:	f003 fb98 	bl	8013bb8 <uxr_set_reply_callback>
 8010488:	f8b5 2298 	ldrh.w	r2, [r5, #664]	; 0x298
 801048c:	2304      	movs	r3, #4
 801048e:	0092      	lsls	r2, r2, #2
 8010490:	f505 7165 	add.w	r1, r5, #916	; 0x394
 8010494:	4620      	mov	r0, r4
 8010496:	f003 fc4f 	bl	8013d38 <uxr_create_input_reliable_stream>
 801049a:	f8b5 2298 	ldrh.w	r2, [r5, #664]	; 0x298
 801049e:	f8c5 0374 	str.w	r0, [r5, #884]	; 0x374
 80104a2:	0092      	lsls	r2, r2, #2
 80104a4:	2304      	movs	r3, #4
 80104a6:	f605 3194 	addw	r1, r5, #2964	; 0xb94
 80104aa:	4620      	mov	r0, r4
 80104ac:	f003 fc1a 	bl	8013ce4 <uxr_create_output_reliable_stream>
 80104b0:	f8c5 0378 	str.w	r0, [r5, #888]	; 0x378
 80104b4:	4620      	mov	r0, r4
 80104b6:	f003 fc39 	bl	8013d2c <uxr_create_input_best_effort_stream>
 80104ba:	f505 519c 	add.w	r1, r5, #4992	; 0x1380
 80104be:	f8c5 0380 	str.w	r0, [r5, #896]	; 0x380
 80104c2:	f8b5 2298 	ldrh.w	r2, [r5, #664]	; 0x298
 80104c6:	4620      	mov	r0, r4
 80104c8:	3114      	adds	r1, #20
 80104ca:	f003 fbf9 	bl	8013cc0 <uxr_create_output_best_effort_stream>
 80104ce:	f8c5 037c 	str.w	r0, [r5, #892]	; 0x37c
 80104d2:	4620      	mov	r0, r4
 80104d4:	f003 fb74 	bl	8013bc0 <uxr_create_session>
 80104d8:	b950      	cbnz	r0, 80104f0 <rmw_init+0x1c4>
 80104da:	4648      	mov	r0, r9
 80104dc:	f002 ff08 	bl	80132f0 <uxr_close_custom_transport>
 80104e0:	480c      	ldr	r0, [pc, #48]	; (8010514 <rmw_init+0x1e8>)
 80104e2:	4629      	mov	r1, r5
 80104e4:	f008 fa0a 	bl	80188fc <put_memory>
 80104e8:	64b7      	str	r7, [r6, #72]	; 0x48
 80104ea:	2701      	movs	r7, #1
 80104ec:	e000      	b.n	80104f0 <rmw_init+0x1c4>
 80104ee:	270c      	movs	r7, #12
 80104f0:	4638      	mov	r0, r7
 80104f2:	b003      	add	sp, #12
 80104f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104f8:	270b      	movs	r7, #11
 80104fa:	4638      	mov	r0, r7
 80104fc:	b003      	add	sp, #12
 80104fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010502:	2701      	movs	r7, #1
 8010504:	4638      	mov	r0, r7
 8010506:	b003      	add	sp, #12
 8010508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801050c:	08020098 	.word	0x08020098
 8010510:	20014a68 	.word	0x20014a68
 8010514:	20014838 	.word	0x20014838
 8010518:	20011690 	.word	0x20011690
 801051c:	20012470 	.word	0x20012470
 8010520:	20014664 	.word	0x20014664
 8010524:	20014848 	.word	0x20014848
 8010528:	20011f98 	.word	0x20011f98
 801052c:	200148fc 	.word	0x200148fc
 8010530:	200116b0 	.word	0x200116b0
 8010534:	200116a0 	.word	0x200116a0
 8010538:	200149a0 	.word	0x200149a0
 801053c:	200148ec 	.word	0x200148ec
 8010540:	200123a8 	.word	0x200123a8
 8010544:	20011f20 	.word	0x20011f20
 8010548:	20014674 	.word	0x20014674
 801054c:	20014828 	.word	0x20014828
 8010550:	200145e0 	.word	0x200145e0
 8010554:	2001498c 	.word	0x2001498c
 8010558:	20014570 	.word	0x20014570
 801055c:	20016010 	.word	0x20016010
 8010560:	2001490c 	.word	0x2001490c
 8010564:	20014818 	.word	0x20014818
 8010568:	0801871d 	.word	0x0801871d
 801056c:	08018715 	.word	0x08018715
 8010570:	080187b1 	.word	0x080187b1
 8010574:	08018849 	.word	0x08018849

08010578 <rmw_context_fini>:
 8010578:	4b17      	ldr	r3, [pc, #92]	; (80105d8 <rmw_context_fini+0x60>)
 801057a:	b570      	push	{r4, r5, r6, lr}
 801057c:	681c      	ldr	r4, [r3, #0]
 801057e:	4605      	mov	r5, r0
 8010580:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8010582:	b33c      	cbz	r4, 80105d4 <rmw_context_fini+0x5c>
 8010584:	2600      	movs	r6, #0
 8010586:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 801058a:	691a      	ldr	r2, [r3, #16]
 801058c:	4282      	cmp	r2, r0
 801058e:	d018      	beq.n	80105c2 <rmw_context_fini+0x4a>
 8010590:	2c00      	cmp	r4, #0
 8010592:	d1f8      	bne.n	8010586 <rmw_context_fini+0xe>
 8010594:	b188      	cbz	r0, 80105ba <rmw_context_fini+0x42>
 8010596:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801059a:	789b      	ldrb	r3, [r3, #2]
 801059c:	2b01      	cmp	r3, #1
 801059e:	bf14      	ite	ne
 80105a0:	210a      	movne	r1, #10
 80105a2:	2100      	moveq	r1, #0
 80105a4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80105a8:	f003 fb44 	bl	8013c34 <uxr_delete_session_retries>
 80105ac:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80105ae:	f000 fdbf 	bl	8011130 <rmw_uxrce_fini_session_memory>
 80105b2:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80105b4:	3010      	adds	r0, #16
 80105b6:	f002 fe9b 	bl	80132f0 <uxr_close_custom_transport>
 80105ba:	2300      	movs	r3, #0
 80105bc:	4630      	mov	r0, r6
 80105be:	64ab      	str	r3, [r5, #72]	; 0x48
 80105c0:	bd70      	pop	{r4, r5, r6, pc}
 80105c2:	f103 0018 	add.w	r0, r3, #24
 80105c6:	f000 f89b 	bl	8010700 <rmw_destroy_node>
 80105ca:	4606      	mov	r6, r0
 80105cc:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80105ce:	2c00      	cmp	r4, #0
 80105d0:	d1d9      	bne.n	8010586 <rmw_context_fini+0xe>
 80105d2:	e7df      	b.n	8010594 <rmw_context_fini+0x1c>
 80105d4:	4626      	mov	r6, r4
 80105d6:	e7dd      	b.n	8010594 <rmw_context_fini+0x1c>
 80105d8:	20014664 	.word	0x20014664

080105dc <create_node>:
 80105dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105e0:	b083      	sub	sp, #12
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d05f      	beq.n	80106a6 <create_node+0xca>
 80105e6:	4606      	mov	r6, r0
 80105e8:	4835      	ldr	r0, [pc, #212]	; (80106c0 <create_node+0xe4>)
 80105ea:	460f      	mov	r7, r1
 80105ec:	4690      	mov	r8, r2
 80105ee:	461d      	mov	r5, r3
 80105f0:	f008 f974 	bl	80188dc <get_memory>
 80105f4:	2800      	cmp	r0, #0
 80105f6:	d056      	beq.n	80106a6 <create_node+0xca>
 80105f8:	68c4      	ldr	r4, [r0, #12]
 80105fa:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80105fc:	6123      	str	r3, [r4, #16]
 80105fe:	f008 f9c3 	bl	8018988 <rmw_get_implementation_identifier>
 8010602:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8010606:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801060a:	f8c4 9020 	str.w	r9, [r4, #32]
 801060e:	4630      	mov	r0, r6
 8010610:	f7ef fde8 	bl	80001e4 <strlen>
 8010614:	1c42      	adds	r2, r0, #1
 8010616:	2a3c      	cmp	r2, #60	; 0x3c
 8010618:	f104 0518 	add.w	r5, r4, #24
 801061c:	d840      	bhi.n	80106a0 <create_node+0xc4>
 801061e:	4648      	mov	r0, r9
 8010620:	4631      	mov	r1, r6
 8010622:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8010626:	f009 fe09 	bl	801a23c <memcpy>
 801062a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 801062e:	4638      	mov	r0, r7
 8010630:	f7ef fdd8 	bl	80001e4 <strlen>
 8010634:	1c42      	adds	r2, r0, #1
 8010636:	2a3c      	cmp	r2, #60	; 0x3c
 8010638:	d832      	bhi.n	80106a0 <create_node+0xc4>
 801063a:	4639      	mov	r1, r7
 801063c:	4648      	mov	r0, r9
 801063e:	f009 fdfd 	bl	801a23c <memcpy>
 8010642:	f241 5394 	movw	r3, #5524	; 0x1594
 8010646:	6922      	ldr	r2, [r4, #16]
 8010648:	5ad0      	ldrh	r0, [r2, r3]
 801064a:	2101      	movs	r1, #1
 801064c:	eb00 0c01 	add.w	ip, r0, r1
 8010650:	f822 c003 	strh.w	ip, [r2, r3]
 8010654:	f002 fe50 	bl	80132f8 <uxr_object_id>
 8010658:	6160      	str	r0, [r4, #20]
 801065a:	783b      	ldrb	r3, [r7, #0]
 801065c:	2b2f      	cmp	r3, #47	; 0x2f
 801065e:	d127      	bne.n	80106b0 <create_node+0xd4>
 8010660:	787b      	ldrb	r3, [r7, #1]
 8010662:	bb2b      	cbnz	r3, 80106b0 <create_node+0xd4>
 8010664:	4a17      	ldr	r2, [pc, #92]	; (80106c4 <create_node+0xe8>)
 8010666:	4818      	ldr	r0, [pc, #96]	; (80106c8 <create_node+0xec>)
 8010668:	4633      	mov	r3, r6
 801066a:	213c      	movs	r1, #60	; 0x3c
 801066c:	f00a f984 	bl	801a978 <sniprintf>
 8010670:	6920      	ldr	r0, [r4, #16]
 8010672:	4b15      	ldr	r3, [pc, #84]	; (80106c8 <create_node+0xec>)
 8010674:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8010678:	9300      	str	r3, [sp, #0]
 801067a:	2306      	movs	r3, #6
 801067c:	9301      	str	r3, [sp, #4]
 801067e:	6811      	ldr	r1, [r2, #0]
 8010680:	6962      	ldr	r2, [r4, #20]
 8010682:	fa1f f388 	uxth.w	r3, r8
 8010686:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801068a:	f002 fbb3 	bl	8012df4 <uxr_buffer_create_participant_bin>
 801068e:	4602      	mov	r2, r0
 8010690:	6920      	ldr	r0, [r4, #16]
 8010692:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010696:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801069a:	f000 fead 	bl	80113f8 <run_xrce_session>
 801069e:	b918      	cbnz	r0, 80106a8 <create_node+0xcc>
 80106a0:	4628      	mov	r0, r5
 80106a2:	f000 fd4b 	bl	801113c <rmw_uxrce_fini_node_memory>
 80106a6:	2500      	movs	r5, #0
 80106a8:	4628      	mov	r0, r5
 80106aa:	b003      	add	sp, #12
 80106ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106b0:	4a06      	ldr	r2, [pc, #24]	; (80106cc <create_node+0xf0>)
 80106b2:	9600      	str	r6, [sp, #0]
 80106b4:	463b      	mov	r3, r7
 80106b6:	213c      	movs	r1, #60	; 0x3c
 80106b8:	4803      	ldr	r0, [pc, #12]	; (80106c8 <create_node+0xec>)
 80106ba:	f00a f95d 	bl	801a978 <sniprintf>
 80106be:	e7d7      	b.n	8010670 <create_node+0x94>
 80106c0:	20014664 	.word	0x20014664
 80106c4:	0801f910 	.word	0x0801f910
 80106c8:	20010430 	.word	0x20010430
 80106cc:	0801f8d4 	.word	0x0801f8d4

080106d0 <rmw_create_node>:
 80106d0:	b199      	cbz	r1, 80106fa <rmw_create_node+0x2a>
 80106d2:	b430      	push	{r4, r5}
 80106d4:	4615      	mov	r5, r2
 80106d6:	461a      	mov	r2, r3
 80106d8:	780b      	ldrb	r3, [r1, #0]
 80106da:	460c      	mov	r4, r1
 80106dc:	b153      	cbz	r3, 80106f4 <rmw_create_node+0x24>
 80106de:	b14d      	cbz	r5, 80106f4 <rmw_create_node+0x24>
 80106e0:	782b      	ldrb	r3, [r5, #0]
 80106e2:	b13b      	cbz	r3, 80106f4 <rmw_create_node+0x24>
 80106e4:	b902      	cbnz	r2, 80106e8 <rmw_create_node+0x18>
 80106e6:	69c2      	ldr	r2, [r0, #28]
 80106e8:	4603      	mov	r3, r0
 80106ea:	4629      	mov	r1, r5
 80106ec:	4620      	mov	r0, r4
 80106ee:	bc30      	pop	{r4, r5}
 80106f0:	f7ff bf74 	b.w	80105dc <create_node>
 80106f4:	2000      	movs	r0, #0
 80106f6:	bc30      	pop	{r4, r5}
 80106f8:	4770      	bx	lr
 80106fa:	2000      	movs	r0, #0
 80106fc:	4770      	bx	lr
 80106fe:	bf00      	nop

08010700 <rmw_destroy_node>:
 8010700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010702:	2800      	cmp	r0, #0
 8010704:	d05b      	beq.n	80107be <rmw_destroy_node+0xbe>
 8010706:	4607      	mov	r7, r0
 8010708:	6800      	ldr	r0, [r0, #0]
 801070a:	f000 fedf 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 801070e:	2800      	cmp	r0, #0
 8010710:	d055      	beq.n	80107be <rmw_destroy_node+0xbe>
 8010712:	687c      	ldr	r4, [r7, #4]
 8010714:	2c00      	cmp	r4, #0
 8010716:	d052      	beq.n	80107be <rmw_destroy_node+0xbe>
 8010718:	4b2f      	ldr	r3, [pc, #188]	; (80107d8 <rmw_destroy_node+0xd8>)
 801071a:	681d      	ldr	r5, [r3, #0]
 801071c:	2d00      	cmp	r5, #0
 801071e:	d059      	beq.n	80107d4 <rmw_destroy_node+0xd4>
 8010720:	2600      	movs	r6, #0
 8010722:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8010726:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 801072a:	429c      	cmp	r4, r3
 801072c:	d04a      	beq.n	80107c4 <rmw_destroy_node+0xc4>
 801072e:	2d00      	cmp	r5, #0
 8010730:	d1f7      	bne.n	8010722 <rmw_destroy_node+0x22>
 8010732:	4b2a      	ldr	r3, [pc, #168]	; (80107dc <rmw_destroy_node+0xdc>)
 8010734:	681d      	ldr	r5, [r3, #0]
 8010736:	b15d      	cbz	r5, 8010750 <rmw_destroy_node+0x50>
 8010738:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 801073c:	6a0b      	ldr	r3, [r1, #32]
 801073e:	429c      	cmp	r4, r3
 8010740:	d1f9      	bne.n	8010736 <rmw_destroy_node+0x36>
 8010742:	317c      	adds	r1, #124	; 0x7c
 8010744:	4638      	mov	r0, r7
 8010746:	f000 fb11 	bl	8010d6c <rmw_destroy_subscription>
 801074a:	4606      	mov	r6, r0
 801074c:	2d00      	cmp	r5, #0
 801074e:	d1f3      	bne.n	8010738 <rmw_destroy_node+0x38>
 8010750:	4b23      	ldr	r3, [pc, #140]	; (80107e0 <rmw_destroy_node+0xe0>)
 8010752:	681d      	ldr	r5, [r3, #0]
 8010754:	b15d      	cbz	r5, 801076e <rmw_destroy_node+0x6e>
 8010756:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 801075a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801075c:	429c      	cmp	r4, r3
 801075e:	d1f9      	bne.n	8010754 <rmw_destroy_node+0x54>
 8010760:	317c      	adds	r1, #124	; 0x7c
 8010762:	4638      	mov	r0, r7
 8010764:	f000 f9e2 	bl	8010b2c <rmw_destroy_service>
 8010768:	4606      	mov	r6, r0
 801076a:	2d00      	cmp	r5, #0
 801076c:	d1f3      	bne.n	8010756 <rmw_destroy_node+0x56>
 801076e:	4b1d      	ldr	r3, [pc, #116]	; (80107e4 <rmw_destroy_node+0xe4>)
 8010770:	681d      	ldr	r5, [r3, #0]
 8010772:	b15d      	cbz	r5, 801078c <rmw_destroy_node+0x8c>
 8010774:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8010778:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801077a:	429c      	cmp	r4, r3
 801077c:	d1f9      	bne.n	8010772 <rmw_destroy_node+0x72>
 801077e:	317c      	adds	r1, #124	; 0x7c
 8010780:	4638      	mov	r0, r7
 8010782:	f008 f8cf 	bl	8018924 <rmw_destroy_client>
 8010786:	4606      	mov	r6, r0
 8010788:	2d00      	cmp	r5, #0
 801078a:	d1f3      	bne.n	8010774 <rmw_destroy_node+0x74>
 801078c:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8010790:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010794:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010798:	6819      	ldr	r1, [r3, #0]
 801079a:	f002 fadf 	bl	8012d5c <uxr_buffer_delete_entity>
 801079e:	4602      	mov	r2, r0
 80107a0:	6920      	ldr	r0, [r4, #16]
 80107a2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80107a6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80107aa:	f000 fe25 	bl	80113f8 <run_xrce_session>
 80107ae:	2800      	cmp	r0, #0
 80107b0:	bf08      	it	eq
 80107b2:	2602      	moveq	r6, #2
 80107b4:	4638      	mov	r0, r7
 80107b6:	f000 fcc1 	bl	801113c <rmw_uxrce_fini_node_memory>
 80107ba:	4630      	mov	r0, r6
 80107bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107be:	2601      	movs	r6, #1
 80107c0:	4630      	mov	r0, r6
 80107c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107c4:	3184      	adds	r1, #132	; 0x84
 80107c6:	4638      	mov	r0, r7
 80107c8:	f000 f960 	bl	8010a8c <rmw_destroy_publisher>
 80107cc:	4606      	mov	r6, r0
 80107ce:	2d00      	cmp	r5, #0
 80107d0:	d1a7      	bne.n	8010722 <rmw_destroy_node+0x22>
 80107d2:	e7ae      	b.n	8010732 <rmw_destroy_node+0x32>
 80107d4:	462e      	mov	r6, r5
 80107d6:	e7ac      	b.n	8010732 <rmw_destroy_node+0x32>
 80107d8:	200116a0 	.word	0x200116a0
 80107dc:	200148fc 	.word	0x200148fc
 80107e0:	200148ec 	.word	0x200148ec
 80107e4:	20011f20 	.word	0x20011f20

080107e8 <rmw_node_get_graph_guard_condition>:
 80107e8:	6843      	ldr	r3, [r0, #4]
 80107ea:	6918      	ldr	r0, [r3, #16]
 80107ec:	f500 705a 	add.w	r0, r0, #872	; 0x368
 80107f0:	4770      	bx	lr
 80107f2:	bf00      	nop

080107f4 <flush_session>:
 80107f4:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 80107f6:	f003 bba9 	b.w	8013f4c <uxr_run_session_until_confirm_delivery>
 80107fa:	bf00      	nop

080107fc <rmw_publish>:
 80107fc:	2800      	cmp	r0, #0
 80107fe:	d053      	beq.n	80108a8 <rmw_publish+0xac>
 8010800:	b570      	push	{r4, r5, r6, lr}
 8010802:	460d      	mov	r5, r1
 8010804:	b08e      	sub	sp, #56	; 0x38
 8010806:	2900      	cmp	r1, #0
 8010808:	d04b      	beq.n	80108a2 <rmw_publish+0xa6>
 801080a:	4604      	mov	r4, r0
 801080c:	6800      	ldr	r0, [r0, #0]
 801080e:	f000 fe5d 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 8010812:	2800      	cmp	r0, #0
 8010814:	d045      	beq.n	80108a2 <rmw_publish+0xa6>
 8010816:	6866      	ldr	r6, [r4, #4]
 8010818:	2e00      	cmp	r6, #0
 801081a:	d042      	beq.n	80108a2 <rmw_publish+0xa6>
 801081c:	69b4      	ldr	r4, [r6, #24]
 801081e:	4628      	mov	r0, r5
 8010820:	6923      	ldr	r3, [r4, #16]
 8010822:	4798      	blx	r3
 8010824:	69f3      	ldr	r3, [r6, #28]
 8010826:	9005      	str	r0, [sp, #20]
 8010828:	b113      	cbz	r3, 8010830 <rmw_publish+0x34>
 801082a:	a805      	add	r0, sp, #20
 801082c:	4798      	blx	r3
 801082e:	9805      	ldr	r0, [sp, #20]
 8010830:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8010834:	691b      	ldr	r3, [r3, #16]
 8010836:	9000      	str	r0, [sp, #0]
 8010838:	6972      	ldr	r2, [r6, #20]
 801083a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 801083c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8010840:	ab06      	add	r3, sp, #24
 8010842:	f004 fc15 	bl	8015070 <uxr_prepare_output_stream>
 8010846:	b1d8      	cbz	r0, 8010880 <rmw_publish+0x84>
 8010848:	68a3      	ldr	r3, [r4, #8]
 801084a:	4628      	mov	r0, r5
 801084c:	a906      	add	r1, sp, #24
 801084e:	4798      	blx	r3
 8010850:	6a33      	ldr	r3, [r6, #32]
 8010852:	4604      	mov	r4, r0
 8010854:	b10b      	cbz	r3, 801085a <rmw_publish+0x5e>
 8010856:	a806      	add	r0, sp, #24
 8010858:	4798      	blx	r3
 801085a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 801085e:	2b01      	cmp	r3, #1
 8010860:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8010864:	d022      	beq.n	80108ac <rmw_publish+0xb0>
 8010866:	6918      	ldr	r0, [r3, #16]
 8010868:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 801086a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801086e:	f003 fb6d 	bl	8013f4c <uxr_run_session_until_confirm_delivery>
 8010872:	4020      	ands	r0, r4
 8010874:	b2c4      	uxtb	r4, r0
 8010876:	f084 0001 	eor.w	r0, r4, #1
 801087a:	b2c0      	uxtb	r0, r0
 801087c:	b00e      	add	sp, #56	; 0x38
 801087e:	bd70      	pop	{r4, r5, r6, pc}
 8010880:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8010884:	4a0c      	ldr	r2, [pc, #48]	; (80108b8 <rmw_publish+0xbc>)
 8010886:	6918      	ldr	r0, [r3, #16]
 8010888:	9b05      	ldr	r3, [sp, #20]
 801088a:	9300      	str	r3, [sp, #0]
 801088c:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8010890:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010894:	6972      	ldr	r2, [r6, #20]
 8010896:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8010898:	ab06      	add	r3, sp, #24
 801089a:	f004 fc19 	bl	80150d0 <uxr_prepare_output_stream_fragmented>
 801089e:	2800      	cmp	r0, #0
 80108a0:	d1d2      	bne.n	8010848 <rmw_publish+0x4c>
 80108a2:	2001      	movs	r0, #1
 80108a4:	b00e      	add	sp, #56	; 0x38
 80108a6:	bd70      	pop	{r4, r5, r6, pc}
 80108a8:	2001      	movs	r0, #1
 80108aa:	4770      	bx	lr
 80108ac:	6918      	ldr	r0, [r3, #16]
 80108ae:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80108b2:	f003 fab7 	bl	8013e24 <uxr_flash_output_streams>
 80108b6:	e7de      	b.n	8010876 <rmw_publish+0x7a>
 80108b8:	080107f5 	.word	0x080107f5

080108bc <rmw_create_publisher>:
 80108bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108c0:	b086      	sub	sp, #24
 80108c2:	2800      	cmp	r0, #0
 80108c4:	f000 80d5 	beq.w	8010a72 <rmw_create_publisher+0x1b6>
 80108c8:	460e      	mov	r6, r1
 80108ca:	2900      	cmp	r1, #0
 80108cc:	f000 80d1 	beq.w	8010a72 <rmw_create_publisher+0x1b6>
 80108d0:	4604      	mov	r4, r0
 80108d2:	6800      	ldr	r0, [r0, #0]
 80108d4:	4615      	mov	r5, r2
 80108d6:	4698      	mov	r8, r3
 80108d8:	f000 fdf8 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 80108dc:	2800      	cmp	r0, #0
 80108de:	f000 80c8 	beq.w	8010a72 <rmw_create_publisher+0x1b6>
 80108e2:	2d00      	cmp	r5, #0
 80108e4:	f000 80c5 	beq.w	8010a72 <rmw_create_publisher+0x1b6>
 80108e8:	782b      	ldrb	r3, [r5, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	f000 80c1 	beq.w	8010a72 <rmw_create_publisher+0x1b6>
 80108f0:	f1b8 0f00 	cmp.w	r8, #0
 80108f4:	f000 80bd 	beq.w	8010a72 <rmw_create_publisher+0x1b6>
 80108f8:	4860      	ldr	r0, [pc, #384]	; (8010a7c <rmw_create_publisher+0x1c0>)
 80108fa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80108fe:	f007 ffed 	bl	80188dc <get_memory>
 8010902:	2800      	cmp	r0, #0
 8010904:	f000 80b5 	beq.w	8010a72 <rmw_create_publisher+0x1b6>
 8010908:	68c4      	ldr	r4, [r0, #12]
 801090a:	2300      	movs	r3, #0
 801090c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8010910:	f008 f83a 	bl	8018988 <rmw_get_implementation_identifier>
 8010914:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 8010918:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 801091c:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8010920:	4628      	mov	r0, r5
 8010922:	f7ef fc5f 	bl	80001e4 <strlen>
 8010926:	3001      	adds	r0, #1
 8010928:	283c      	cmp	r0, #60	; 0x3c
 801092a:	f104 0784 	add.w	r7, r4, #132	; 0x84
 801092e:	f200 809d 	bhi.w	8010a6c <rmw_create_publisher+0x1b0>
 8010932:	4a53      	ldr	r2, [pc, #332]	; (8010a80 <rmw_create_publisher+0x1c4>)
 8010934:	462b      	mov	r3, r5
 8010936:	213c      	movs	r1, #60	; 0x3c
 8010938:	4650      	mov	r0, sl
 801093a:	f00a f81d 	bl	801a978 <sniprintf>
 801093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010942:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 8010946:	4641      	mov	r1, r8
 8010948:	2250      	movs	r2, #80	; 0x50
 801094a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801094e:	f009 fc75 	bl	801a23c <memcpy>
 8010952:	f898 3008 	ldrb.w	r3, [r8, #8]
 8010956:	494b      	ldr	r1, [pc, #300]	; (8010a84 <rmw_create_publisher+0x1c8>)
 8010958:	2b02      	cmp	r3, #2
 801095a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801095e:	bf0c      	ite	eq
 8010960:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8010964:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8010968:	67a3      	str	r3, [r4, #120]	; 0x78
 801096a:	2300      	movs	r3, #0
 801096c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8010970:	4630      	mov	r0, r6
 8010972:	f000 fdb9 	bl	80114e8 <get_message_typesupport_handle>
 8010976:	2800      	cmp	r0, #0
 8010978:	d078      	beq.n	8010a6c <rmw_create_publisher+0x1b0>
 801097a:	6842      	ldr	r2, [r0, #4]
 801097c:	61a2      	str	r2, [r4, #24]
 801097e:	2a00      	cmp	r2, #0
 8010980:	d074      	beq.n	8010a6c <rmw_create_publisher+0x1b0>
 8010982:	4629      	mov	r1, r5
 8010984:	4643      	mov	r3, r8
 8010986:	4648      	mov	r0, r9
 8010988:	f008 f804 	bl	8018994 <create_topic>
 801098c:	6260      	str	r0, [r4, #36]	; 0x24
 801098e:	2800      	cmp	r0, #0
 8010990:	d06c      	beq.n	8010a6c <rmw_create_publisher+0x1b0>
 8010992:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010996:	f241 5398 	movw	r3, #5528	; 0x1598
 801099a:	2103      	movs	r1, #3
 801099c:	5ad0      	ldrh	r0, [r2, r3]
 801099e:	1c45      	adds	r5, r0, #1
 80109a0:	52d5      	strh	r5, [r2, r3]
 80109a2:	f002 fca9 	bl	80132f8 <uxr_object_id>
 80109a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80109aa:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80109ae:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 80109b2:	6912      	ldr	r2, [r2, #16]
 80109b4:	6120      	str	r0, [r4, #16]
 80109b6:	2606      	movs	r6, #6
 80109b8:	9600      	str	r6, [sp, #0]
 80109ba:	6819      	ldr	r1, [r3, #0]
 80109bc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80109c0:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 80109c4:	6922      	ldr	r2, [r4, #16]
 80109c6:	f002 fa7b 	bl	8012ec0 <uxr_buffer_create_publisher_bin>
 80109ca:	4602      	mov	r2, r0
 80109cc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80109d0:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80109d4:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80109d8:	f000 fd0e 	bl	80113f8 <run_xrce_session>
 80109dc:	2800      	cmp	r0, #0
 80109de:	d041      	beq.n	8010a64 <rmw_create_publisher+0x1a8>
 80109e0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80109e4:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 80109e8:	f241 539a 	movw	r3, #5530	; 0x159a
 80109ec:	2105      	movs	r1, #5
 80109ee:	5ad0      	ldrh	r0, [r2, r3]
 80109f0:	1c45      	adds	r5, r0, #1
 80109f2:	52d5      	strh	r5, [r2, r3]
 80109f4:	f002 fc80 	bl	80132f8 <uxr_object_id>
 80109f8:	6160      	str	r0, [r4, #20]
 80109fa:	f898 1009 	ldrb.w	r1, [r8, #9]
 80109fe:	f898 2000 	ldrb.w	r2, [r8]
 8010a02:	f898 3008 	ldrb.w	r3, [r8, #8]
 8010a06:	f8d9 5010 	ldr.w	r5, [r9, #16]
 8010a0a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8010a0e:	f8d5 5384 	ldr.w	r5, [r5, #900]	; 0x384
 8010a12:	6900      	ldr	r0, [r0, #16]
 8010a14:	f8b8 c004 	ldrh.w	ip, [r8, #4]
 8010a18:	f8cd c00c 	str.w	ip, [sp, #12]
 8010a1c:	3902      	subs	r1, #2
 8010a1e:	f1a2 0201 	sub.w	r2, r2, #1
 8010a22:	bf18      	it	ne
 8010a24:	2101      	movne	r1, #1
 8010a26:	fab2 f282 	clz	r2, r2
 8010a2a:	2b01      	cmp	r3, #1
 8010a2c:	bf8c      	ite	hi
 8010a2e:	2300      	movhi	r3, #0
 8010a30:	2301      	movls	r3, #1
 8010a32:	0952      	lsrs	r2, r2, #5
 8010a34:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010a38:	9605      	str	r6, [sp, #20]
 8010a3a:	9104      	str	r1, [sp, #16]
 8010a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a3e:	691b      	ldr	r3, [r3, #16]
 8010a40:	9300      	str	r3, [sp, #0]
 8010a42:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8010a46:	6829      	ldr	r1, [r5, #0]
 8010a48:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010a4c:	f002 fa96 	bl	8012f7c <uxr_buffer_create_datawriter_bin>
 8010a50:	4602      	mov	r2, r0
 8010a52:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010a56:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010a5a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010a5e:	f000 fccb 	bl	80113f8 <run_xrce_session>
 8010a62:	b938      	cbnz	r0, 8010a74 <rmw_create_publisher+0x1b8>
 8010a64:	4805      	ldr	r0, [pc, #20]	; (8010a7c <rmw_create_publisher+0x1c0>)
 8010a66:	4621      	mov	r1, r4
 8010a68:	f007 ff48 	bl	80188fc <put_memory>
 8010a6c:	4638      	mov	r0, r7
 8010a6e:	f000 fb7b 	bl	8011168 <rmw_uxrce_fini_publisher_memory>
 8010a72:	2700      	movs	r7, #0
 8010a74:	4638      	mov	r0, r7
 8010a76:	b006      	add	sp, #24
 8010a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a7c:	200116a0 	.word	0x200116a0
 8010a80:	0801f910 	.word	0x0801f910
 8010a84:	0801f8dc 	.word	0x0801f8dc

08010a88 <rmw_publisher_get_actual_qos>:
 8010a88:	2000      	movs	r0, #0
 8010a8a:	4770      	bx	lr

08010a8c <rmw_destroy_publisher>:
 8010a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a8e:	b128      	cbz	r0, 8010a9c <rmw_destroy_publisher+0x10>
 8010a90:	4604      	mov	r4, r0
 8010a92:	6800      	ldr	r0, [r0, #0]
 8010a94:	460d      	mov	r5, r1
 8010a96:	f000 fd19 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 8010a9a:	b910      	cbnz	r0, 8010aa2 <rmw_destroy_publisher+0x16>
 8010a9c:	2401      	movs	r4, #1
 8010a9e:	4620      	mov	r0, r4
 8010aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010aa2:	6863      	ldr	r3, [r4, #4]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d0f9      	beq.n	8010a9c <rmw_destroy_publisher+0x10>
 8010aa8:	2d00      	cmp	r5, #0
 8010aaa:	d0f7      	beq.n	8010a9c <rmw_destroy_publisher+0x10>
 8010aac:	6828      	ldr	r0, [r5, #0]
 8010aae:	f000 fd0d 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 8010ab2:	2800      	cmp	r0, #0
 8010ab4:	d0f2      	beq.n	8010a9c <rmw_destroy_publisher+0x10>
 8010ab6:	686c      	ldr	r4, [r5, #4]
 8010ab8:	2c00      	cmp	r4, #0
 8010aba:	d0ef      	beq.n	8010a9c <rmw_destroy_publisher+0x10>
 8010abc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010abe:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 8010ac2:	f007 ffb7 	bl	8018a34 <destroy_topic>
 8010ac6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010aca:	6962      	ldr	r2, [r4, #20]
 8010acc:	6918      	ldr	r0, [r3, #16]
 8010ace:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010ad2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010ad6:	6819      	ldr	r1, [r3, #0]
 8010ad8:	f002 f940 	bl	8012d5c <uxr_buffer_delete_entity>
 8010adc:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8010ae0:	6922      	ldr	r2, [r4, #16]
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	6908      	ldr	r0, [r1, #16]
 8010ae6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010aea:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010aee:	6809      	ldr	r1, [r1, #0]
 8010af0:	461c      	mov	r4, r3
 8010af2:	f002 f933 	bl	8012d5c <uxr_buffer_delete_entity>
 8010af6:	4606      	mov	r6, r0
 8010af8:	6938      	ldr	r0, [r7, #16]
 8010afa:	4622      	mov	r2, r4
 8010afc:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010b00:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010b04:	f000 fc78 	bl	80113f8 <run_xrce_session>
 8010b08:	4604      	mov	r4, r0
 8010b0a:	6938      	ldr	r0, [r7, #16]
 8010b0c:	4632      	mov	r2, r6
 8010b0e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010b12:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010b16:	f000 fc6f 	bl	80113f8 <run_xrce_session>
 8010b1a:	b12c      	cbz	r4, 8010b28 <rmw_destroy_publisher+0x9c>
 8010b1c:	b120      	cbz	r0, 8010b28 <rmw_destroy_publisher+0x9c>
 8010b1e:	2400      	movs	r4, #0
 8010b20:	4628      	mov	r0, r5
 8010b22:	f000 fb21 	bl	8011168 <rmw_uxrce_fini_publisher_memory>
 8010b26:	e7ba      	b.n	8010a9e <rmw_destroy_publisher+0x12>
 8010b28:	2402      	movs	r4, #2
 8010b2a:	e7f9      	b.n	8010b20 <rmw_destroy_publisher+0x94>

08010b2c <rmw_destroy_service>:
 8010b2c:	b538      	push	{r3, r4, r5, lr}
 8010b2e:	b128      	cbz	r0, 8010b3c <rmw_destroy_service+0x10>
 8010b30:	4604      	mov	r4, r0
 8010b32:	6800      	ldr	r0, [r0, #0]
 8010b34:	460d      	mov	r5, r1
 8010b36:	f000 fcc9 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 8010b3a:	b910      	cbnz	r0, 8010b42 <rmw_destroy_service+0x16>
 8010b3c:	2401      	movs	r4, #1
 8010b3e:	4620      	mov	r0, r4
 8010b40:	bd38      	pop	{r3, r4, r5, pc}
 8010b42:	6863      	ldr	r3, [r4, #4]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d0f9      	beq.n	8010b3c <rmw_destroy_service+0x10>
 8010b48:	2d00      	cmp	r5, #0
 8010b4a:	d0f7      	beq.n	8010b3c <rmw_destroy_service+0x10>
 8010b4c:	6828      	ldr	r0, [r5, #0]
 8010b4e:	f000 fcbd 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 8010b52:	2800      	cmp	r0, #0
 8010b54:	d0f2      	beq.n	8010b3c <rmw_destroy_service+0x10>
 8010b56:	686b      	ldr	r3, [r5, #4]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d0ef      	beq.n	8010b3c <rmw_destroy_service+0x10>
 8010b5c:	6864      	ldr	r4, [r4, #4]
 8010b5e:	691a      	ldr	r2, [r3, #16]
 8010b60:	6920      	ldr	r0, [r4, #16]
 8010b62:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010b66:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010b6a:	6819      	ldr	r1, [r3, #0]
 8010b6c:	f002 f8f6 	bl	8012d5c <uxr_buffer_delete_entity>
 8010b70:	4602      	mov	r2, r0
 8010b72:	6920      	ldr	r0, [r4, #16]
 8010b74:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010b78:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010b7c:	f000 fc3c 	bl	80113f8 <run_xrce_session>
 8010b80:	2800      	cmp	r0, #0
 8010b82:	4628      	mov	r0, r5
 8010b84:	bf14      	ite	ne
 8010b86:	2400      	movne	r4, #0
 8010b88:	2402      	moveq	r4, #2
 8010b8a:	f000 fb15 	bl	80111b8 <rmw_uxrce_fini_service_memory>
 8010b8e:	e7d6      	b.n	8010b3e <rmw_destroy_service+0x12>

08010b90 <rmw_create_subscription>:
 8010b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b94:	b08a      	sub	sp, #40	; 0x28
 8010b96:	2800      	cmp	r0, #0
 8010b98:	f000 80db 	beq.w	8010d52 <rmw_create_subscription+0x1c2>
 8010b9c:	4688      	mov	r8, r1
 8010b9e:	2900      	cmp	r1, #0
 8010ba0:	f000 80d7 	beq.w	8010d52 <rmw_create_subscription+0x1c2>
 8010ba4:	4604      	mov	r4, r0
 8010ba6:	6800      	ldr	r0, [r0, #0]
 8010ba8:	4615      	mov	r5, r2
 8010baa:	461e      	mov	r6, r3
 8010bac:	f000 fc8e 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 8010bb0:	2800      	cmp	r0, #0
 8010bb2:	f000 80ce 	beq.w	8010d52 <rmw_create_subscription+0x1c2>
 8010bb6:	2d00      	cmp	r5, #0
 8010bb8:	f000 80cb 	beq.w	8010d52 <rmw_create_subscription+0x1c2>
 8010bbc:	782b      	ldrb	r3, [r5, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	f000 80c7 	beq.w	8010d52 <rmw_create_subscription+0x1c2>
 8010bc4:	2e00      	cmp	r6, #0
 8010bc6:	f000 80c4 	beq.w	8010d52 <rmw_create_subscription+0x1c2>
 8010bca:	4864      	ldr	r0, [pc, #400]	; (8010d5c <rmw_create_subscription+0x1cc>)
 8010bcc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010bd0:	f007 fe84 	bl	80188dc <get_memory>
 8010bd4:	4604      	mov	r4, r0
 8010bd6:	2800      	cmp	r0, #0
 8010bd8:	f000 80bc 	beq.w	8010d54 <rmw_create_subscription+0x1c4>
 8010bdc:	68c7      	ldr	r7, [r0, #12]
 8010bde:	2300      	movs	r3, #0
 8010be0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010be4:	f007 fed0 	bl	8018988 <rmw_get_implementation_identifier>
 8010be8:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 8010bec:	67f8      	str	r0, [r7, #124]	; 0x7c
 8010bee:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8010bf2:	4628      	mov	r0, r5
 8010bf4:	f7ef faf6 	bl	80001e4 <strlen>
 8010bf8:	3001      	adds	r0, #1
 8010bfa:	283c      	cmp	r0, #60	; 0x3c
 8010bfc:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8010c00:	f200 80a4 	bhi.w	8010d4c <rmw_create_subscription+0x1bc>
 8010c04:	4a56      	ldr	r2, [pc, #344]	; (8010d60 <rmw_create_subscription+0x1d0>)
 8010c06:	462b      	mov	r3, r5
 8010c08:	213c      	movs	r1, #60	; 0x3c
 8010c0a:	4650      	mov	r0, sl
 8010c0c:	f009 feb4 	bl	801a978 <sniprintf>
 8010c10:	4631      	mov	r1, r6
 8010c12:	f8c7 9020 	str.w	r9, [r7, #32]
 8010c16:	2250      	movs	r2, #80	; 0x50
 8010c18:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8010c1c:	f009 fb0e 	bl	801a23c <memcpy>
 8010c20:	4950      	ldr	r1, [pc, #320]	; (8010d64 <rmw_create_subscription+0x1d4>)
 8010c22:	4640      	mov	r0, r8
 8010c24:	f000 fc60 	bl	80114e8 <get_message_typesupport_handle>
 8010c28:	2800      	cmp	r0, #0
 8010c2a:	f000 808f 	beq.w	8010d4c <rmw_create_subscription+0x1bc>
 8010c2e:	6842      	ldr	r2, [r0, #4]
 8010c30:	61ba      	str	r2, [r7, #24]
 8010c32:	2a00      	cmp	r2, #0
 8010c34:	f000 808a 	beq.w	8010d4c <rmw_create_subscription+0x1bc>
 8010c38:	4629      	mov	r1, r5
 8010c3a:	4633      	mov	r3, r6
 8010c3c:	4648      	mov	r0, r9
 8010c3e:	f007 fea9 	bl	8018994 <create_topic>
 8010c42:	61f8      	str	r0, [r7, #28]
 8010c44:	2800      	cmp	r0, #0
 8010c46:	f000 8081 	beq.w	8010d4c <rmw_create_subscription+0x1bc>
 8010c4a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010c4e:	f241 539c 	movw	r3, #5532	; 0x159c
 8010c52:	2104      	movs	r1, #4
 8010c54:	5ad0      	ldrh	r0, [r2, r3]
 8010c56:	1c45      	adds	r5, r0, #1
 8010c58:	52d5      	strh	r5, [r2, r3]
 8010c5a:	f002 fb4d 	bl	80132f8 <uxr_object_id>
 8010c5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010c62:	6138      	str	r0, [r7, #16]
 8010c64:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8010c68:	f04f 0806 	mov.w	r8, #6
 8010c6c:	f8cd 8000 	str.w	r8, [sp]
 8010c70:	6811      	ldr	r1, [r2, #0]
 8010c72:	693a      	ldr	r2, [r7, #16]
 8010c74:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8010c78:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010c7c:	f002 f94e 	bl	8012f1c <uxr_buffer_create_subscriber_bin>
 8010c80:	4602      	mov	r2, r0
 8010c82:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010c86:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010c8a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010c8e:	f000 fbb3 	bl	80113f8 <run_xrce_session>
 8010c92:	2800      	cmp	r0, #0
 8010c94:	d056      	beq.n	8010d44 <rmw_create_subscription+0x1b4>
 8010c96:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010c9a:	f241 539e 	movw	r3, #5534	; 0x159e
 8010c9e:	4641      	mov	r1, r8
 8010ca0:	5ad0      	ldrh	r0, [r2, r3]
 8010ca2:	1c45      	adds	r5, r0, #1
 8010ca4:	52d5      	strh	r5, [r2, r3]
 8010ca6:	f002 fb27 	bl	80132f8 <uxr_object_id>
 8010caa:	6178      	str	r0, [r7, #20]
 8010cac:	7a71      	ldrb	r1, [r6, #9]
 8010cae:	7832      	ldrb	r2, [r6, #0]
 8010cb0:	7a33      	ldrb	r3, [r6, #8]
 8010cb2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010cb6:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 8010cba:	f8d0 5384 	ldr.w	r5, [r0, #900]	; 0x384
 8010cbe:	f8cd 8014 	str.w	r8, [sp, #20]
 8010cc2:	3902      	subs	r1, #2
 8010cc4:	f1a2 0201 	sub.w	r2, r2, #1
 8010cc8:	bf18      	it	ne
 8010cca:	2101      	movne	r1, #1
 8010ccc:	fab2 f282 	clz	r2, r2
 8010cd0:	2b01      	cmp	r3, #1
 8010cd2:	bf8c      	ite	hi
 8010cd4:	2300      	movhi	r3, #0
 8010cd6:	2301      	movls	r3, #1
 8010cd8:	0952      	lsrs	r2, r2, #5
 8010cda:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010cde:	9104      	str	r1, [sp, #16]
 8010ce0:	f8cd c00c 	str.w	ip, [sp, #12]
 8010ce4:	69fb      	ldr	r3, [r7, #28]
 8010ce6:	691b      	ldr	r3, [r3, #16]
 8010ce8:	9300      	str	r3, [sp, #0]
 8010cea:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8010cee:	6829      	ldr	r1, [r5, #0]
 8010cf0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010cf4:	f002 f9c0 	bl	8013078 <uxr_buffer_create_datareader_bin>
 8010cf8:	4602      	mov	r2, r0
 8010cfa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010cfe:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010d02:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010d06:	f000 fb77 	bl	80113f8 <run_xrce_session>
 8010d0a:	b1d8      	cbz	r0, 8010d44 <rmw_create_subscription+0x1b4>
 8010d0c:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8010d10:	7a33      	ldrb	r3, [r6, #8]
 8010d12:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010d16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8010d20:	2b02      	cmp	r3, #2
 8010d22:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010d26:	bf0c      	ite	eq
 8010d28:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 8010d2c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 8010d30:	9307      	str	r3, [sp, #28]
 8010d32:	aa08      	add	r2, sp, #32
 8010d34:	9200      	str	r2, [sp, #0]
 8010d36:	697a      	ldr	r2, [r7, #20]
 8010d38:	6809      	ldr	r1, [r1, #0]
 8010d3a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010d3e:	f002 fb09 	bl	8013354 <uxr_buffer_request_data>
 8010d42:	e007      	b.n	8010d54 <rmw_create_subscription+0x1c4>
 8010d44:	4805      	ldr	r0, [pc, #20]	; (8010d5c <rmw_create_subscription+0x1cc>)
 8010d46:	4639      	mov	r1, r7
 8010d48:	f007 fdd8 	bl	80188fc <put_memory>
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	f000 fa1f 	bl	8011190 <rmw_uxrce_fini_subscription_memory>
 8010d52:	2400      	movs	r4, #0
 8010d54:	4620      	mov	r0, r4
 8010d56:	b00a      	add	sp, #40	; 0x28
 8010d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d5c:	200148fc 	.word	0x200148fc
 8010d60:	0801f910 	.word	0x0801f910
 8010d64:	0801f8dc 	.word	0x0801f8dc

08010d68 <rmw_subscription_get_actual_qos>:
 8010d68:	2000      	movs	r0, #0
 8010d6a:	4770      	bx	lr

08010d6c <rmw_destroy_subscription>:
 8010d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d6e:	b128      	cbz	r0, 8010d7c <rmw_destroy_subscription+0x10>
 8010d70:	4604      	mov	r4, r0
 8010d72:	6800      	ldr	r0, [r0, #0]
 8010d74:	460d      	mov	r5, r1
 8010d76:	f000 fba9 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 8010d7a:	b910      	cbnz	r0, 8010d82 <rmw_destroy_subscription+0x16>
 8010d7c:	2401      	movs	r4, #1
 8010d7e:	4620      	mov	r0, r4
 8010d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d82:	6863      	ldr	r3, [r4, #4]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d0f9      	beq.n	8010d7c <rmw_destroy_subscription+0x10>
 8010d88:	2d00      	cmp	r5, #0
 8010d8a:	d0f7      	beq.n	8010d7c <rmw_destroy_subscription+0x10>
 8010d8c:	6828      	ldr	r0, [r5, #0]
 8010d8e:	f000 fb9d 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 8010d92:	2800      	cmp	r0, #0
 8010d94:	d0f2      	beq.n	8010d7c <rmw_destroy_subscription+0x10>
 8010d96:	686c      	ldr	r4, [r5, #4]
 8010d98:	2c00      	cmp	r4, #0
 8010d9a:	d0ef      	beq.n	8010d7c <rmw_destroy_subscription+0x10>
 8010d9c:	e9d4 0707 	ldrd	r0, r7, [r4, #28]
 8010da0:	f007 fe48 	bl	8018a34 <destroy_topic>
 8010da4:	6a23      	ldr	r3, [r4, #32]
 8010da6:	6962      	ldr	r2, [r4, #20]
 8010da8:	6918      	ldr	r0, [r3, #16]
 8010daa:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010dae:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010db2:	6819      	ldr	r1, [r3, #0]
 8010db4:	f001 ffd2 	bl	8012d5c <uxr_buffer_delete_entity>
 8010db8:	6a21      	ldr	r1, [r4, #32]
 8010dba:	6922      	ldr	r2, [r4, #16]
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	6908      	ldr	r0, [r1, #16]
 8010dc0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010dc4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010dc8:	6809      	ldr	r1, [r1, #0]
 8010dca:	461c      	mov	r4, r3
 8010dcc:	f001 ffc6 	bl	8012d5c <uxr_buffer_delete_entity>
 8010dd0:	4606      	mov	r6, r0
 8010dd2:	6938      	ldr	r0, [r7, #16]
 8010dd4:	4622      	mov	r2, r4
 8010dd6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010dda:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010dde:	f000 fb0b 	bl	80113f8 <run_xrce_session>
 8010de2:	4604      	mov	r4, r0
 8010de4:	6938      	ldr	r0, [r7, #16]
 8010de6:	4632      	mov	r2, r6
 8010de8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010dec:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010df0:	f000 fb02 	bl	80113f8 <run_xrce_session>
 8010df4:	b12c      	cbz	r4, 8010e02 <rmw_destroy_subscription+0x96>
 8010df6:	b120      	cbz	r0, 8010e02 <rmw_destroy_subscription+0x96>
 8010df8:	2400      	movs	r4, #0
 8010dfa:	4628      	mov	r0, r5
 8010dfc:	f000 f9c8 	bl	8011190 <rmw_uxrce_fini_subscription_memory>
 8010e00:	e7bd      	b.n	8010d7e <rmw_destroy_subscription+0x12>
 8010e02:	2402      	movs	r4, #2
 8010e04:	e7f9      	b.n	8010dfa <rmw_destroy_subscription+0x8e>
 8010e06:	bf00      	nop

08010e08 <rmw_take_with_info>:
 8010e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e0a:	4605      	mov	r5, r0
 8010e0c:	b089      	sub	sp, #36	; 0x24
 8010e0e:	460f      	mov	r7, r1
 8010e10:	4614      	mov	r4, r2
 8010e12:	b10a      	cbz	r2, 8010e18 <rmw_take_with_info+0x10>
 8010e14:	2300      	movs	r3, #0
 8010e16:	7013      	strb	r3, [r2, #0]
 8010e18:	6828      	ldr	r0, [r5, #0]
 8010e1a:	f000 fb57 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 8010e1e:	b910      	cbnz	r0, 8010e26 <rmw_take_with_info+0x1e>
 8010e20:	2001      	movs	r0, #1
 8010e22:	b009      	add	sp, #36	; 0x24
 8010e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e26:	686d      	ldr	r5, [r5, #4]
 8010e28:	f000 fa6e 	bl	8011308 <rmw_uxrce_clean_expired_static_input_buffer>
 8010e2c:	4628      	mov	r0, r5
 8010e2e:	f000 fa43 	bl	80112b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8010e32:	4606      	mov	r6, r0
 8010e34:	2800      	cmp	r0, #0
 8010e36:	d0f3      	beq.n	8010e20 <rmw_take_with_info+0x18>
 8010e38:	68c1      	ldr	r1, [r0, #12]
 8010e3a:	4668      	mov	r0, sp
 8010e3c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8010e40:	3110      	adds	r1, #16
 8010e42:	f001 fead 	bl	8012ba0 <ucdr_init_buffer>
 8010e46:	69ab      	ldr	r3, [r5, #24]
 8010e48:	4639      	mov	r1, r7
 8010e4a:	68db      	ldr	r3, [r3, #12]
 8010e4c:	4668      	mov	r0, sp
 8010e4e:	4798      	blx	r3
 8010e50:	4631      	mov	r1, r6
 8010e52:	4605      	mov	r5, r0
 8010e54:	4804      	ldr	r0, [pc, #16]	; (8010e68 <rmw_take_with_info+0x60>)
 8010e56:	f007 fd51 	bl	80188fc <put_memory>
 8010e5a:	b104      	cbz	r4, 8010e5e <rmw_take_with_info+0x56>
 8010e5c:	7025      	strb	r5, [r4, #0]
 8010e5e:	f085 0001 	eor.w	r0, r5, #1
 8010e62:	b2c0      	uxtb	r0, r0
 8010e64:	b009      	add	sp, #36	; 0x24
 8010e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e68:	20011690 	.word	0x20011690

08010e6c <rmw_uxrce_transport_init>:
 8010e6c:	b508      	push	{r3, lr}
 8010e6e:	b108      	cbz	r0, 8010e74 <rmw_uxrce_transport_init+0x8>
 8010e70:	f100 0210 	add.w	r2, r0, #16
 8010e74:	b139      	cbz	r1, 8010e86 <rmw_uxrce_transport_init+0x1a>
 8010e76:	6949      	ldr	r1, [r1, #20]
 8010e78:	4610      	mov	r0, r2
 8010e7a:	f002 fa05 	bl	8013288 <uxr_init_custom_transport>
 8010e7e:	f080 0001 	eor.w	r0, r0, #1
 8010e82:	b2c0      	uxtb	r0, r0
 8010e84:	bd08      	pop	{r3, pc}
 8010e86:	4b04      	ldr	r3, [pc, #16]	; (8010e98 <rmw_uxrce_transport_init+0x2c>)
 8010e88:	4610      	mov	r0, r2
 8010e8a:	6859      	ldr	r1, [r3, #4]
 8010e8c:	f002 f9fc 	bl	8013288 <uxr_init_custom_transport>
 8010e90:	f080 0001 	eor.w	r0, r0, #1
 8010e94:	b2c0      	uxtb	r0, r0
 8010e96:	bd08      	pop	{r3, pc}
 8010e98:	20011670 	.word	0x20011670

08010e9c <rmw_uros_epoch_nanos>:
 8010e9c:	4b05      	ldr	r3, [pc, #20]	; (8010eb4 <rmw_uros_epoch_nanos+0x18>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	b123      	cbz	r3, 8010eac <rmw_uros_epoch_nanos+0x10>
 8010ea2:	68d8      	ldr	r0, [r3, #12]
 8010ea4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010ea8:	f002 bfb2 	b.w	8013e10 <uxr_epoch_nanos>
 8010eac:	2000      	movs	r0, #0
 8010eae:	2100      	movs	r1, #0
 8010eb0:	4770      	bx	lr
 8010eb2:	bf00      	nop
 8010eb4:	20014838 	.word	0x20014838

08010eb8 <rmw_uros_sync_session>:
 8010eb8:	b508      	push	{r3, lr}
 8010eba:	4b07      	ldr	r3, [pc, #28]	; (8010ed8 <rmw_uros_sync_session+0x20>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	b14b      	cbz	r3, 8010ed4 <rmw_uros_sync_session+0x1c>
 8010ec0:	4601      	mov	r1, r0
 8010ec2:	68d8      	ldr	r0, [r3, #12]
 8010ec4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010ec8:	f002 ff52 	bl	8013d70 <uxr_sync_session>
 8010ecc:	f080 0001 	eor.w	r0, r0, #1
 8010ed0:	b2c0      	uxtb	r0, r0
 8010ed2:	bd08      	pop	{r3, pc}
 8010ed4:	2001      	movs	r0, #1
 8010ed6:	bd08      	pop	{r3, pc}
 8010ed8:	20014838 	.word	0x20014838

08010edc <rmw_uxrce_init_service_memory>:
 8010edc:	b1b2      	cbz	r2, 8010f0c <rmw_uxrce_init_service_memory+0x30>
 8010ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ee0:	7a07      	ldrb	r7, [r0, #8]
 8010ee2:	4605      	mov	r5, r0
 8010ee4:	b98f      	cbnz	r7, 8010f0a <rmw_uxrce_init_service_memory+0x2e>
 8010ee6:	e9c0 7700 	strd	r7, r7, [r0]
 8010eea:	460c      	mov	r4, r1
 8010eec:	23c8      	movs	r3, #200	; 0xc8
 8010eee:	2101      	movs	r1, #1
 8010ef0:	fb03 4602 	mla	r6, r3, r2, r4
 8010ef4:	60c3      	str	r3, [r0, #12]
 8010ef6:	7201      	strb	r1, [r0, #8]
 8010ef8:	4621      	mov	r1, r4
 8010efa:	4628      	mov	r0, r5
 8010efc:	f007 fcfe 	bl	80188fc <put_memory>
 8010f00:	60e4      	str	r4, [r4, #12]
 8010f02:	f804 7bc8 	strb.w	r7, [r4], #200
 8010f06:	42a6      	cmp	r6, r4
 8010f08:	d1f6      	bne.n	8010ef8 <rmw_uxrce_init_service_memory+0x1c>
 8010f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f0c:	4770      	bx	lr
 8010f0e:	bf00      	nop

08010f10 <rmw_uxrce_init_client_memory>:
 8010f10:	b1b2      	cbz	r2, 8010f40 <rmw_uxrce_init_client_memory+0x30>
 8010f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f14:	7a07      	ldrb	r7, [r0, #8]
 8010f16:	4605      	mov	r5, r0
 8010f18:	b98f      	cbnz	r7, 8010f3e <rmw_uxrce_init_client_memory+0x2e>
 8010f1a:	e9c0 7700 	strd	r7, r7, [r0]
 8010f1e:	460c      	mov	r4, r1
 8010f20:	23c8      	movs	r3, #200	; 0xc8
 8010f22:	2101      	movs	r1, #1
 8010f24:	fb03 4602 	mla	r6, r3, r2, r4
 8010f28:	60c3      	str	r3, [r0, #12]
 8010f2a:	7201      	strb	r1, [r0, #8]
 8010f2c:	4621      	mov	r1, r4
 8010f2e:	4628      	mov	r0, r5
 8010f30:	f007 fce4 	bl	80188fc <put_memory>
 8010f34:	60e4      	str	r4, [r4, #12]
 8010f36:	f804 7bc8 	strb.w	r7, [r4], #200
 8010f3a:	42a6      	cmp	r6, r4
 8010f3c:	d1f6      	bne.n	8010f2c <rmw_uxrce_init_client_memory+0x1c>
 8010f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f40:	4770      	bx	lr
 8010f42:	bf00      	nop

08010f44 <rmw_uxrce_init_publisher_memory>:
 8010f44:	b1b2      	cbz	r2, 8010f74 <rmw_uxrce_init_publisher_memory+0x30>
 8010f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f48:	7a07      	ldrb	r7, [r0, #8]
 8010f4a:	4605      	mov	r5, r0
 8010f4c:	b98f      	cbnz	r7, 8010f72 <rmw_uxrce_init_publisher_memory+0x2e>
 8010f4e:	e9c0 7700 	strd	r7, r7, [r0]
 8010f52:	460c      	mov	r4, r1
 8010f54:	23d8      	movs	r3, #216	; 0xd8
 8010f56:	2101      	movs	r1, #1
 8010f58:	fb03 4602 	mla	r6, r3, r2, r4
 8010f5c:	60c3      	str	r3, [r0, #12]
 8010f5e:	7201      	strb	r1, [r0, #8]
 8010f60:	4621      	mov	r1, r4
 8010f62:	4628      	mov	r0, r5
 8010f64:	f007 fcca 	bl	80188fc <put_memory>
 8010f68:	60e4      	str	r4, [r4, #12]
 8010f6a:	f804 7bd8 	strb.w	r7, [r4], #216
 8010f6e:	42a6      	cmp	r6, r4
 8010f70:	d1f6      	bne.n	8010f60 <rmw_uxrce_init_publisher_memory+0x1c>
 8010f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f74:	4770      	bx	lr
 8010f76:	bf00      	nop

08010f78 <rmw_uxrce_init_subscription_memory>:
 8010f78:	b1b2      	cbz	r2, 8010fa8 <rmw_uxrce_init_subscription_memory+0x30>
 8010f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f7c:	7a07      	ldrb	r7, [r0, #8]
 8010f7e:	4605      	mov	r5, r0
 8010f80:	b98f      	cbnz	r7, 8010fa6 <rmw_uxrce_init_subscription_memory+0x2e>
 8010f82:	e9c0 7700 	strd	r7, r7, [r0]
 8010f86:	460c      	mov	r4, r1
 8010f88:	23d0      	movs	r3, #208	; 0xd0
 8010f8a:	2101      	movs	r1, #1
 8010f8c:	fb03 4602 	mla	r6, r3, r2, r4
 8010f90:	60c3      	str	r3, [r0, #12]
 8010f92:	7201      	strb	r1, [r0, #8]
 8010f94:	4621      	mov	r1, r4
 8010f96:	4628      	mov	r0, r5
 8010f98:	f007 fcb0 	bl	80188fc <put_memory>
 8010f9c:	60e4      	str	r4, [r4, #12]
 8010f9e:	f804 7bd0 	strb.w	r7, [r4], #208
 8010fa2:	42a6      	cmp	r6, r4
 8010fa4:	d1f6      	bne.n	8010f94 <rmw_uxrce_init_subscription_memory+0x1c>
 8010fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fa8:	4770      	bx	lr
 8010faa:	bf00      	nop

08010fac <rmw_uxrce_init_node_memory>:
 8010fac:	b1b2      	cbz	r2, 8010fdc <rmw_uxrce_init_node_memory+0x30>
 8010fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fb0:	7a07      	ldrb	r7, [r0, #8]
 8010fb2:	4605      	mov	r5, r0
 8010fb4:	b98f      	cbnz	r7, 8010fda <rmw_uxrce_init_node_memory+0x2e>
 8010fb6:	e9c0 7700 	strd	r7, r7, [r0]
 8010fba:	460c      	mov	r4, r1
 8010fbc:	23a4      	movs	r3, #164	; 0xa4
 8010fbe:	2101      	movs	r1, #1
 8010fc0:	fb03 4602 	mla	r6, r3, r2, r4
 8010fc4:	60c3      	str	r3, [r0, #12]
 8010fc6:	7201      	strb	r1, [r0, #8]
 8010fc8:	4621      	mov	r1, r4
 8010fca:	4628      	mov	r0, r5
 8010fcc:	f007 fc96 	bl	80188fc <put_memory>
 8010fd0:	60e4      	str	r4, [r4, #12]
 8010fd2:	f804 7ba4 	strb.w	r7, [r4], #164
 8010fd6:	42a6      	cmp	r6, r4
 8010fd8:	d1f6      	bne.n	8010fc8 <rmw_uxrce_init_node_memory+0x1c>
 8010fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fdc:	4770      	bx	lr
 8010fde:	bf00      	nop

08010fe0 <rmw_uxrce_init_session_memory>:
 8010fe0:	b1d2      	cbz	r2, 8011018 <rmw_uxrce_init_session_memory+0x38>
 8010fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fe6:	7a07      	ldrb	r7, [r0, #8]
 8010fe8:	4605      	mov	r5, r0
 8010fea:	b99f      	cbnz	r7, 8011014 <rmw_uxrce_init_session_memory+0x34>
 8010fec:	e9c0 7700 	strd	r7, r7, [r0]
 8010ff0:	f241 53a8 	movw	r3, #5544	; 0x15a8
 8010ff4:	460c      	mov	r4, r1
 8010ff6:	2101      	movs	r1, #1
 8010ff8:	fb03 4602 	mla	r6, r3, r2, r4
 8010ffc:	60c3      	str	r3, [r0, #12]
 8010ffe:	4698      	mov	r8, r3
 8011000:	7201      	strb	r1, [r0, #8]
 8011002:	4621      	mov	r1, r4
 8011004:	4628      	mov	r0, r5
 8011006:	f007 fc79 	bl	80188fc <put_memory>
 801100a:	60e4      	str	r4, [r4, #12]
 801100c:	7027      	strb	r7, [r4, #0]
 801100e:	4444      	add	r4, r8
 8011010:	42a6      	cmp	r6, r4
 8011012:	d1f6      	bne.n	8011002 <rmw_uxrce_init_session_memory+0x22>
 8011014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011018:	4770      	bx	lr
 801101a:	bf00      	nop

0801101c <rmw_uxrce_init_topic_memory>:
 801101c:	b1c2      	cbz	r2, 8011050 <rmw_uxrce_init_topic_memory+0x34>
 801101e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011020:	7a07      	ldrb	r7, [r0, #8]
 8011022:	4606      	mov	r6, r0
 8011024:	b99f      	cbnz	r7, 801104e <rmw_uxrce_init_topic_memory+0x32>
 8011026:	e9c0 7700 	strd	r7, r7, [r0]
 801102a:	460c      	mov	r4, r1
 801102c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8011030:	2101      	movs	r1, #1
 8011032:	231c      	movs	r3, #28
 8011034:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011038:	7201      	strb	r1, [r0, #8]
 801103a:	60c3      	str	r3, [r0, #12]
 801103c:	4621      	mov	r1, r4
 801103e:	4630      	mov	r0, r6
 8011040:	f007 fc5c 	bl	80188fc <put_memory>
 8011044:	60e4      	str	r4, [r4, #12]
 8011046:	f804 7b1c 	strb.w	r7, [r4], #28
 801104a:	42a5      	cmp	r5, r4
 801104c:	d1f6      	bne.n	801103c <rmw_uxrce_init_topic_memory+0x20>
 801104e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011050:	4770      	bx	lr
 8011052:	bf00      	nop

08011054 <rmw_uxrce_init_static_input_buffer_memory>:
 8011054:	b1d2      	cbz	r2, 801108c <rmw_uxrce_init_static_input_buffer_memory+0x38>
 8011056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011058:	7a07      	ldrb	r7, [r0, #8]
 801105a:	4606      	mov	r6, r0
 801105c:	b9af      	cbnz	r7, 801108a <rmw_uxrce_init_static_input_buffer_memory+0x36>
 801105e:	e9c0 7700 	strd	r7, r7, [r0]
 8011062:	460c      	mov	r4, r1
 8011064:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 8011068:	2101      	movs	r1, #1
 801106a:	f44f 6304 	mov.w	r3, #2112	; 0x840
 801106e:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 8011072:	7201      	strb	r1, [r0, #8]
 8011074:	60c3      	str	r3, [r0, #12]
 8011076:	4621      	mov	r1, r4
 8011078:	4630      	mov	r0, r6
 801107a:	f007 fc3f 	bl	80188fc <put_memory>
 801107e:	60e4      	str	r4, [r4, #12]
 8011080:	7027      	strb	r7, [r4, #0]
 8011082:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8011086:	42a5      	cmp	r5, r4
 8011088:	d1f5      	bne.n	8011076 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 801108a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801108c:	4770      	bx	lr
 801108e:	bf00      	nop

08011090 <rmw_uxrce_init_init_options_impl_memory>:
 8011090:	b1b2      	cbz	r2, 80110c0 <rmw_uxrce_init_init_options_impl_memory+0x30>
 8011092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011094:	7a07      	ldrb	r7, [r0, #8]
 8011096:	4605      	mov	r5, r0
 8011098:	b98f      	cbnz	r7, 80110be <rmw_uxrce_init_init_options_impl_memory+0x2e>
 801109a:	e9c0 7700 	strd	r7, r7, [r0]
 801109e:	460c      	mov	r4, r1
 80110a0:	232c      	movs	r3, #44	; 0x2c
 80110a2:	2101      	movs	r1, #1
 80110a4:	fb03 4602 	mla	r6, r3, r2, r4
 80110a8:	60c3      	str	r3, [r0, #12]
 80110aa:	7201      	strb	r1, [r0, #8]
 80110ac:	4621      	mov	r1, r4
 80110ae:	4628      	mov	r0, r5
 80110b0:	f007 fc24 	bl	80188fc <put_memory>
 80110b4:	60e4      	str	r4, [r4, #12]
 80110b6:	f804 7b2c 	strb.w	r7, [r4], #44
 80110ba:	42a6      	cmp	r6, r4
 80110bc:	d1f6      	bne.n	80110ac <rmw_uxrce_init_init_options_impl_memory+0x1c>
 80110be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110c0:	4770      	bx	lr
 80110c2:	bf00      	nop

080110c4 <rmw_uxrce_init_wait_set_memory>:
 80110c4:	b1c2      	cbz	r2, 80110f8 <rmw_uxrce_init_wait_set_memory+0x34>
 80110c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110c8:	7a07      	ldrb	r7, [r0, #8]
 80110ca:	4606      	mov	r6, r0
 80110cc:	b99f      	cbnz	r7, 80110f6 <rmw_uxrce_init_wait_set_memory+0x32>
 80110ce:	e9c0 7700 	strd	r7, r7, [r0]
 80110d2:	460c      	mov	r4, r1
 80110d4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80110d8:	2101      	movs	r1, #1
 80110da:	231c      	movs	r3, #28
 80110dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80110e0:	7201      	strb	r1, [r0, #8]
 80110e2:	60c3      	str	r3, [r0, #12]
 80110e4:	4621      	mov	r1, r4
 80110e6:	4630      	mov	r0, r6
 80110e8:	f007 fc08 	bl	80188fc <put_memory>
 80110ec:	60e4      	str	r4, [r4, #12]
 80110ee:	f804 7b1c 	strb.w	r7, [r4], #28
 80110f2:	42a5      	cmp	r5, r4
 80110f4:	d1f6      	bne.n	80110e4 <rmw_uxrce_init_wait_set_memory+0x20>
 80110f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110f8:	4770      	bx	lr
 80110fa:	bf00      	nop

080110fc <rmw_uxrce_init_guard_condition_memory>:
 80110fc:	b1b2      	cbz	r2, 801112c <rmw_uxrce_init_guard_condition_memory+0x30>
 80110fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011100:	7a07      	ldrb	r7, [r0, #8]
 8011102:	4605      	mov	r5, r0
 8011104:	b98f      	cbnz	r7, 801112a <rmw_uxrce_init_guard_condition_memory+0x2e>
 8011106:	e9c0 7700 	strd	r7, r7, [r0]
 801110a:	460c      	mov	r4, r1
 801110c:	2320      	movs	r3, #32
 801110e:	2101      	movs	r1, #1
 8011110:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 8011114:	7201      	strb	r1, [r0, #8]
 8011116:	60c3      	str	r3, [r0, #12]
 8011118:	4621      	mov	r1, r4
 801111a:	4628      	mov	r0, r5
 801111c:	f007 fbee 	bl	80188fc <put_memory>
 8011120:	60e4      	str	r4, [r4, #12]
 8011122:	f804 7b20 	strb.w	r7, [r4], #32
 8011126:	42a6      	cmp	r6, r4
 8011128:	d1f6      	bne.n	8011118 <rmw_uxrce_init_guard_condition_memory+0x1c>
 801112a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801112c:	4770      	bx	lr
 801112e:	bf00      	nop

08011130 <rmw_uxrce_fini_session_memory>:
 8011130:	4601      	mov	r1, r0
 8011132:	4801      	ldr	r0, [pc, #4]	; (8011138 <rmw_uxrce_fini_session_memory+0x8>)
 8011134:	f007 bbe2 	b.w	80188fc <put_memory>
 8011138:	20014838 	.word	0x20014838

0801113c <rmw_uxrce_fini_node_memory>:
 801113c:	b538      	push	{r3, r4, r5, lr}
 801113e:	4604      	mov	r4, r0
 8011140:	6800      	ldr	r0, [r0, #0]
 8011142:	f000 f9c3 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 8011146:	b158      	cbz	r0, 8011160 <rmw_uxrce_fini_node_memory+0x24>
 8011148:	6823      	ldr	r3, [r4, #0]
 801114a:	b10b      	cbz	r3, 8011150 <rmw_uxrce_fini_node_memory+0x14>
 801114c:	2300      	movs	r3, #0
 801114e:	6023      	str	r3, [r4, #0]
 8011150:	6861      	ldr	r1, [r4, #4]
 8011152:	b129      	cbz	r1, 8011160 <rmw_uxrce_fini_node_memory+0x24>
 8011154:	2500      	movs	r5, #0
 8011156:	4803      	ldr	r0, [pc, #12]	; (8011164 <rmw_uxrce_fini_node_memory+0x28>)
 8011158:	610d      	str	r5, [r1, #16]
 801115a:	f007 fbcf 	bl	80188fc <put_memory>
 801115e:	6065      	str	r5, [r4, #4]
 8011160:	bd38      	pop	{r3, r4, r5, pc}
 8011162:	bf00      	nop
 8011164:	20014664 	.word	0x20014664

08011168 <rmw_uxrce_fini_publisher_memory>:
 8011168:	b510      	push	{r4, lr}
 801116a:	4604      	mov	r4, r0
 801116c:	6800      	ldr	r0, [r0, #0]
 801116e:	f000 f9ad 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 8011172:	b150      	cbz	r0, 801118a <rmw_uxrce_fini_publisher_memory+0x22>
 8011174:	6823      	ldr	r3, [r4, #0]
 8011176:	b10b      	cbz	r3, 801117c <rmw_uxrce_fini_publisher_memory+0x14>
 8011178:	2300      	movs	r3, #0
 801117a:	6023      	str	r3, [r4, #0]
 801117c:	6861      	ldr	r1, [r4, #4]
 801117e:	b121      	cbz	r1, 801118a <rmw_uxrce_fini_publisher_memory+0x22>
 8011180:	4802      	ldr	r0, [pc, #8]	; (801118c <rmw_uxrce_fini_publisher_memory+0x24>)
 8011182:	f007 fbbb 	bl	80188fc <put_memory>
 8011186:	2300      	movs	r3, #0
 8011188:	6063      	str	r3, [r4, #4]
 801118a:	bd10      	pop	{r4, pc}
 801118c:	200116a0 	.word	0x200116a0

08011190 <rmw_uxrce_fini_subscription_memory>:
 8011190:	b510      	push	{r4, lr}
 8011192:	4604      	mov	r4, r0
 8011194:	6800      	ldr	r0, [r0, #0]
 8011196:	f000 f999 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 801119a:	b150      	cbz	r0, 80111b2 <rmw_uxrce_fini_subscription_memory+0x22>
 801119c:	6823      	ldr	r3, [r4, #0]
 801119e:	b10b      	cbz	r3, 80111a4 <rmw_uxrce_fini_subscription_memory+0x14>
 80111a0:	2300      	movs	r3, #0
 80111a2:	6023      	str	r3, [r4, #0]
 80111a4:	6861      	ldr	r1, [r4, #4]
 80111a6:	b121      	cbz	r1, 80111b2 <rmw_uxrce_fini_subscription_memory+0x22>
 80111a8:	4802      	ldr	r0, [pc, #8]	; (80111b4 <rmw_uxrce_fini_subscription_memory+0x24>)
 80111aa:	f007 fba7 	bl	80188fc <put_memory>
 80111ae:	2300      	movs	r3, #0
 80111b0:	6063      	str	r3, [r4, #4]
 80111b2:	bd10      	pop	{r4, pc}
 80111b4:	200148fc 	.word	0x200148fc

080111b8 <rmw_uxrce_fini_service_memory>:
 80111b8:	b510      	push	{r4, lr}
 80111ba:	4604      	mov	r4, r0
 80111bc:	6800      	ldr	r0, [r0, #0]
 80111be:	f000 f985 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 80111c2:	b150      	cbz	r0, 80111da <rmw_uxrce_fini_service_memory+0x22>
 80111c4:	6823      	ldr	r3, [r4, #0]
 80111c6:	b10b      	cbz	r3, 80111cc <rmw_uxrce_fini_service_memory+0x14>
 80111c8:	2300      	movs	r3, #0
 80111ca:	6023      	str	r3, [r4, #0]
 80111cc:	6861      	ldr	r1, [r4, #4]
 80111ce:	b121      	cbz	r1, 80111da <rmw_uxrce_fini_service_memory+0x22>
 80111d0:	4802      	ldr	r0, [pc, #8]	; (80111dc <rmw_uxrce_fini_service_memory+0x24>)
 80111d2:	f007 fb93 	bl	80188fc <put_memory>
 80111d6:	2300      	movs	r3, #0
 80111d8:	6063      	str	r3, [r4, #4]
 80111da:	bd10      	pop	{r4, pc}
 80111dc:	200148ec 	.word	0x200148ec

080111e0 <rmw_uxrce_fini_client_memory>:
 80111e0:	b510      	push	{r4, lr}
 80111e2:	4604      	mov	r4, r0
 80111e4:	6800      	ldr	r0, [r0, #0]
 80111e6:	f000 f971 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 80111ea:	b150      	cbz	r0, 8011202 <rmw_uxrce_fini_client_memory+0x22>
 80111ec:	6823      	ldr	r3, [r4, #0]
 80111ee:	b10b      	cbz	r3, 80111f4 <rmw_uxrce_fini_client_memory+0x14>
 80111f0:	2300      	movs	r3, #0
 80111f2:	6023      	str	r3, [r4, #0]
 80111f4:	6861      	ldr	r1, [r4, #4]
 80111f6:	b121      	cbz	r1, 8011202 <rmw_uxrce_fini_client_memory+0x22>
 80111f8:	4802      	ldr	r0, [pc, #8]	; (8011204 <rmw_uxrce_fini_client_memory+0x24>)
 80111fa:	f007 fb7f 	bl	80188fc <put_memory>
 80111fe:	2300      	movs	r3, #0
 8011200:	6063      	str	r3, [r4, #4]
 8011202:	bd10      	pop	{r4, pc}
 8011204:	20011f20 	.word	0x20011f20

08011208 <rmw_uxrce_fini_topic_memory>:
 8011208:	b510      	push	{r4, lr}
 801120a:	4601      	mov	r1, r0
 801120c:	4604      	mov	r4, r0
 801120e:	4803      	ldr	r0, [pc, #12]	; (801121c <rmw_uxrce_fini_topic_memory+0x14>)
 8011210:	f007 fb74 	bl	80188fc <put_memory>
 8011214:	2300      	movs	r3, #0
 8011216:	61a3      	str	r3, [r4, #24]
 8011218:	bd10      	pop	{r4, pc}
 801121a:	bf00      	nop
 801121c:	20014828 	.word	0x20014828

08011220 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8011220:	b082      	sub	sp, #8
 8011222:	b4f0      	push	{r4, r5, r6, r7}
 8011224:	4923      	ldr	r1, [pc, #140]	; (80112b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 8011226:	ac04      	add	r4, sp, #16
 8011228:	e884 000c 	stmia.w	r4, {r2, r3}
 801122c:	680d      	ldr	r5, [r1, #0]
 801122e:	9c05      	ldr	r4, [sp, #20]
 8011230:	2d00      	cmp	r5, #0
 8011232:	d03d      	beq.n	80112b0 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 8011234:	462b      	mov	r3, r5
 8011236:	2100      	movs	r1, #0
 8011238:	68da      	ldr	r2, [r3, #12]
 801123a:	689b      	ldr	r3, [r3, #8]
 801123c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8011240:	4290      	cmp	r0, r2
 8011242:	bf08      	it	eq
 8011244:	3101      	addeq	r1, #1
 8011246:	2b00      	cmp	r3, #0
 8011248:	d1f6      	bne.n	8011238 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 801124a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801124e:	2b02      	cmp	r3, #2
 8011250:	d026      	beq.n	80112a0 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 8011252:	d906      	bls.n	8011262 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 8011254:	2b03      	cmp	r3, #3
 8011256:	d004      	beq.n	8011262 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 8011258:	2100      	movs	r1, #0
 801125a:	bcf0      	pop	{r4, r5, r6, r7}
 801125c:	4608      	mov	r0, r1
 801125e:	b002      	add	sp, #8
 8011260:	4770      	bx	lr
 8011262:	b304      	cbz	r4, 80112a6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8011264:	428c      	cmp	r4, r1
 8011266:	d81e      	bhi.n	80112a6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8011268:	2d00      	cmp	r5, #0
 801126a:	d0f5      	beq.n	8011258 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 801126c:	2100      	movs	r1, #0
 801126e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8011272:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8011276:	e002      	b.n	801127e <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 8011278:	68ad      	ldr	r5, [r5, #8]
 801127a:	2d00      	cmp	r5, #0
 801127c:	d0ed      	beq.n	801125a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 801127e:	68eb      	ldr	r3, [r5, #12]
 8011280:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8011284:	4290      	cmp	r0, r2
 8011286:	d1f7      	bne.n	8011278 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8011288:	f603 0318 	addw	r3, r3, #2072	; 0x818
 801128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011290:	42b2      	cmp	r2, r6
 8011292:	eb73 0407 	sbcs.w	r4, r3, r7
 8011296:	daef      	bge.n	8011278 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8011298:	4616      	mov	r6, r2
 801129a:	461f      	mov	r7, r3
 801129c:	4629      	mov	r1, r5
 801129e:	e7eb      	b.n	8011278 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 80112a0:	b10c      	cbz	r4, 80112a6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80112a2:	428c      	cmp	r4, r1
 80112a4:	d9d8      	bls.n	8011258 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80112a6:	bcf0      	pop	{r4, r5, r6, r7}
 80112a8:	4802      	ldr	r0, [pc, #8]	; (80112b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 80112aa:	b002      	add	sp, #8
 80112ac:	f007 bb16 	b.w	80188dc <get_memory>
 80112b0:	4629      	mov	r1, r5
 80112b2:	e7ca      	b.n	801124a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80112b4:	20011690 	.word	0x20011690

080112b8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 80112b8:	4b12      	ldr	r3, [pc, #72]	; (8011304 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	b1fb      	cbz	r3, 80112fe <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 80112be:	b4f0      	push	{r4, r5, r6, r7}
 80112c0:	f04f 0c00 	mov.w	ip, #0
 80112c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80112c8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80112cc:	e001      	b.n	80112d2 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 80112ce:	689b      	ldr	r3, [r3, #8]
 80112d0:	b193      	cbz	r3, 80112f8 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 80112d2:	68da      	ldr	r2, [r3, #12]
 80112d4:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 80112d8:	4288      	cmp	r0, r1
 80112da:	d1f8      	bne.n	80112ce <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 80112dc:	f602 0218 	addw	r2, r2, #2072	; 0x818
 80112e0:	e9d2 6700 	ldrd	r6, r7, [r2]
 80112e4:	42a6      	cmp	r6, r4
 80112e6:	eb77 0205 	sbcs.w	r2, r7, r5
 80112ea:	daf0      	bge.n	80112ce <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 80112ec:	469c      	mov	ip, r3
 80112ee:	689b      	ldr	r3, [r3, #8]
 80112f0:	4634      	mov	r4, r6
 80112f2:	463d      	mov	r5, r7
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d1ec      	bne.n	80112d2 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 80112f8:	4660      	mov	r0, ip
 80112fa:	bcf0      	pop	{r4, r5, r6, r7}
 80112fc:	4770      	bx	lr
 80112fe:	4618      	mov	r0, r3
 8011300:	4770      	bx	lr
 8011302:	bf00      	nop
 8011304:	20011690 	.word	0x20011690

08011308 <rmw_uxrce_clean_expired_static_input_buffer>:
 8011308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801130c:	4e38      	ldr	r6, [pc, #224]	; (80113f0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 801130e:	f8d6 8000 	ldr.w	r8, [r6]
 8011312:	b083      	sub	sp, #12
 8011314:	f7ff fdc2 	bl	8010e9c <rmw_uros_epoch_nanos>
 8011318:	f1b8 0f00 	cmp.w	r8, #0
 801131c:	d05f      	beq.n	80113de <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 801131e:	46b1      	mov	r9, r6
 8011320:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8011324:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 8011328:	2b04      	cmp	r3, #4
 801132a:	4682      	mov	sl, r0
 801132c:	468b      	mov	fp, r1
 801132e:	d02d      	beq.n	801138c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8011330:	2b05      	cmp	r3, #5
 8011332:	d041      	beq.n	80113b8 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 8011334:	2b03      	cmp	r3, #3
 8011336:	d029      	beq.n	801138c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8011338:	2200      	movs	r2, #0
 801133a:	2300      	movs	r3, #0
 801133c:	e9cd 2300 	strd	r2, r3, [sp]
 8011340:	2001      	movs	r0, #1
 8011342:	2100      	movs	r1, #0
 8011344:	9b00      	ldr	r3, [sp, #0]
 8011346:	f606 0618 	addw	r6, r6, #2072	; 0x818
 801134a:	e9d6 6700 	ldrd	r6, r7, [r6]
 801134e:	18c2      	adds	r2, r0, r3
 8011350:	9b01      	ldr	r3, [sp, #4]
 8011352:	eb41 0303 	adc.w	r3, r1, r3
 8011356:	1994      	adds	r4, r2, r6
 8011358:	eb43 0507 	adc.w	r5, r3, r7
 801135c:	4554      	cmp	r4, sl
 801135e:	eb75 020b 	sbcs.w	r2, r5, fp
 8011362:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011366:	db03      	blt.n	8011370 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8011368:	45b2      	cmp	sl, r6
 801136a:	eb7b 0207 	sbcs.w	r2, fp, r7
 801136e:	da05      	bge.n	801137c <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 8011370:	4641      	mov	r1, r8
 8011372:	4648      	mov	r0, r9
 8011374:	9300      	str	r3, [sp, #0]
 8011376:	f007 fac1 	bl	80188fc <put_memory>
 801137a:	9b00      	ldr	r3, [sp, #0]
 801137c:	b37b      	cbz	r3, 80113de <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 801137e:	4698      	mov	r8, r3
 8011380:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8011384:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 8011388:	2b04      	cmp	r3, #4
 801138a:	d1d1      	bne.n	8011330 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 801138c:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 8011390:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 8011394:	e9cd 2300 	strd	r2, r3, [sp]
 8011398:	4313      	orrs	r3, r2
 801139a:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 801139e:	d015      	beq.n	80113cc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 80113a0:	9a01      	ldr	r2, [sp, #4]
 80113a2:	4b14      	ldr	r3, [pc, #80]	; (80113f4 <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 80113a4:	fb03 f702 	mul.w	r7, r3, r2
 80113a8:	9a00      	ldr	r2, [sp, #0]
 80113aa:	fba2 2303 	umull	r2, r3, r2, r3
 80113ae:	e9cd 2300 	strd	r2, r3, [sp]
 80113b2:	443b      	add	r3, r7
 80113b4:	9301      	str	r3, [sp, #4]
 80113b6:	e7c5      	b.n	8011344 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 80113b8:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 80113bc:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 80113c0:	e9cd 2300 	strd	r2, r3, [sp]
 80113c4:	4313      	orrs	r3, r2
 80113c6:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 80113ca:	d1e9      	bne.n	80113a0 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 80113cc:	ea50 0301 	orrs.w	r3, r0, r1
 80113d0:	bf02      	ittt	eq
 80113d2:	a305      	addeq	r3, pc, #20	; (adr r3, 80113e8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 80113d4:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 80113d8:	e9cd 2300 	strdeq	r2, r3, [sp]
 80113dc:	e7b2      	b.n	8011344 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 80113de:	b003      	add	sp, #12
 80113e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113e4:	f3af 8000 	nop.w
 80113e8:	fc23ac00 	.word	0xfc23ac00
 80113ec:	00000006 	.word	0x00000006
 80113f0:	20011690 	.word	0x20011690
 80113f4:	3b9aca00 	.word	0x3b9aca00

080113f8 <run_xrce_session>:
 80113f8:	b510      	push	{r4, lr}
 80113fa:	788c      	ldrb	r4, [r1, #2]
 80113fc:	b086      	sub	sp, #24
 80113fe:	2c01      	cmp	r4, #1
 8011400:	f8ad 200e 	strh.w	r2, [sp, #14]
 8011404:	d00c      	beq.n	8011420 <run_xrce_session+0x28>
 8011406:	4619      	mov	r1, r3
 8011408:	2301      	movs	r3, #1
 801140a:	9300      	str	r3, [sp, #0]
 801140c:	f10d 020e 	add.w	r2, sp, #14
 8011410:	f10d 0317 	add.w	r3, sp, #23
 8011414:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011418:	f002 fdb4 	bl	8013f84 <uxr_run_session_until_all_status>
 801141c:	b006      	add	sp, #24
 801141e:	bd10      	pop	{r4, pc}
 8011420:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011424:	f002 fcfe 	bl	8013e24 <uxr_flash_output_streams>
 8011428:	4620      	mov	r0, r4
 801142a:	b006      	add	sp, #24
 801142c:	bd10      	pop	{r4, pc}
 801142e:	bf00      	nop

08011430 <generate_type_name>:
 8011430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011434:	4606      	mov	r6, r0
 8011436:	b086      	sub	sp, #24
 8011438:	6840      	ldr	r0, [r0, #4]
 801143a:	460f      	mov	r7, r1
 801143c:	4690      	mov	r8, r2
 801143e:	f7ee fed1 	bl	80001e4 <strlen>
 8011442:	6834      	ldr	r4, [r6, #0]
 8011444:	4605      	mov	r5, r0
 8011446:	b11c      	cbz	r4, 8011450 <generate_type_name+0x20>
 8011448:	4620      	mov	r0, r4
 801144a:	f7ee fecb 	bl	80001e4 <strlen>
 801144e:	4604      	mov	r4, r0
 8011450:	2300      	movs	r3, #0
 8011452:	703b      	strb	r3, [r7, #0]
 8011454:	6833      	ldr	r3, [r6, #0]
 8011456:	3508      	adds	r5, #8
 8011458:	442c      	add	r4, r5
 801145a:	b19b      	cbz	r3, 8011484 <generate_type_name+0x54>
 801145c:	490b      	ldr	r1, [pc, #44]	; (801148c <generate_type_name+0x5c>)
 801145e:	4608      	mov	r0, r1
 8011460:	6875      	ldr	r5, [r6, #4]
 8011462:	4a0b      	ldr	r2, [pc, #44]	; (8011490 <generate_type_name+0x60>)
 8011464:	9504      	str	r5, [sp, #16]
 8011466:	4d0b      	ldr	r5, [pc, #44]	; (8011494 <generate_type_name+0x64>)
 8011468:	9103      	str	r1, [sp, #12]
 801146a:	e9cd 5201 	strd	r5, r2, [sp, #4]
 801146e:	9000      	str	r0, [sp, #0]
 8011470:	9205      	str	r2, [sp, #20]
 8011472:	4641      	mov	r1, r8
 8011474:	4a08      	ldr	r2, [pc, #32]	; (8011498 <generate_type_name+0x68>)
 8011476:	4638      	mov	r0, r7
 8011478:	f009 fa7e 	bl	801a978 <sniprintf>
 801147c:	4620      	mov	r0, r4
 801147e:	b006      	add	sp, #24
 8011480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011484:	4b05      	ldr	r3, [pc, #20]	; (801149c <generate_type_name+0x6c>)
 8011486:	4901      	ldr	r1, [pc, #4]	; (801148c <generate_type_name+0x5c>)
 8011488:	4618      	mov	r0, r3
 801148a:	e7e9      	b.n	8011460 <generate_type_name+0x30>
 801148c:	0801f900 	.word	0x0801f900
 8011490:	0801f914 	.word	0x0801f914
 8011494:	0801f918 	.word	0x0801f918
 8011498:	0801f904 	.word	0x0801f904
 801149c:	0801fe70 	.word	0x0801fe70

080114a0 <generate_topic_name>:
 80114a0:	b510      	push	{r4, lr}
 80114a2:	b082      	sub	sp, #8
 80114a4:	4b07      	ldr	r3, [pc, #28]	; (80114c4 <generate_topic_name+0x24>)
 80114a6:	9000      	str	r0, [sp, #0]
 80114a8:	4614      	mov	r4, r2
 80114aa:	4608      	mov	r0, r1
 80114ac:	4611      	mov	r1, r2
 80114ae:	4a06      	ldr	r2, [pc, #24]	; (80114c8 <generate_topic_name+0x28>)
 80114b0:	f009 fa62 	bl	801a978 <sniprintf>
 80114b4:	2800      	cmp	r0, #0
 80114b6:	da02      	bge.n	80114be <generate_topic_name+0x1e>
 80114b8:	4284      	cmp	r4, r0
 80114ba:	bfd8      	it	le
 80114bc:	2000      	movle	r0, #0
 80114be:	b002      	add	sp, #8
 80114c0:	bd10      	pop	{r4, pc}
 80114c2:	bf00      	nop
 80114c4:	0801f924 	.word	0x0801f924
 80114c8:	0801f91c 	.word	0x0801f91c

080114cc <is_uxrce_rmw_identifier_valid>:
 80114cc:	b510      	push	{r4, lr}
 80114ce:	4604      	mov	r4, r0
 80114d0:	b140      	cbz	r0, 80114e4 <is_uxrce_rmw_identifier_valid+0x18>
 80114d2:	f007 fa59 	bl	8018988 <rmw_get_implementation_identifier>
 80114d6:	4601      	mov	r1, r0
 80114d8:	4620      	mov	r0, r4
 80114da:	f7ee fe79 	bl	80001d0 <strcmp>
 80114de:	fab0 f080 	clz	r0, r0
 80114e2:	0940      	lsrs	r0, r0, #5
 80114e4:	bd10      	pop	{r4, pc}
 80114e6:	bf00      	nop

080114e8 <get_message_typesupport_handle>:
 80114e8:	6883      	ldr	r3, [r0, #8]
 80114ea:	4718      	bx	r3

080114ec <get_message_typesupport_handle_function>:
 80114ec:	b510      	push	{r4, lr}
 80114ee:	4604      	mov	r4, r0
 80114f0:	6800      	ldr	r0, [r0, #0]
 80114f2:	f7ee fe6d 	bl	80001d0 <strcmp>
 80114f6:	2800      	cmp	r0, #0
 80114f8:	bf0c      	ite	eq
 80114fa:	4620      	moveq	r0, r4
 80114fc:	2000      	movne	r0, #0
 80114fe:	bd10      	pop	{r4, pc}

08011500 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>:
 8011500:	f000 b8f6 	b.w	80116f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>

08011504 <get_serialized_size_sensor_msgs__msg__NavSatFix>:
 8011504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011506:	4604      	mov	r4, r0
 8011508:	b358      	cbz	r0, 8011562 <get_serialized_size_sensor_msgs__msg__NavSatFix+0x5e>
 801150a:	460e      	mov	r6, r1
 801150c:	f000 fa0c 	bl	8011928 <get_serialized_size_std_msgs__msg__Header>
 8011510:	1837      	adds	r7, r6, r0
 8011512:	4639      	mov	r1, r7
 8011514:	f104 0014 	add.w	r0, r4, #20
 8011518:	f000 f8ee 	bl	80116f8 <get_serialized_size_sensor_msgs__msg__NavSatStatus>
 801151c:	183c      	adds	r4, r7, r0
 801151e:	4620      	mov	r0, r4
 8011520:	2108      	movs	r1, #8
 8011522:	f001 fb41 	bl	8012ba8 <ucdr_alignment>
 8011526:	3008      	adds	r0, #8
 8011528:	4404      	add	r4, r0
 801152a:	4620      	mov	r0, r4
 801152c:	2108      	movs	r1, #8
 801152e:	f001 fb3b 	bl	8012ba8 <ucdr_alignment>
 8011532:	f100 0508 	add.w	r5, r0, #8
 8011536:	4425      	add	r5, r4
 8011538:	4628      	mov	r0, r5
 801153a:	2108      	movs	r1, #8
 801153c:	f001 fb34 	bl	8012ba8 <ucdr_alignment>
 8011540:	3008      	adds	r0, #8
 8011542:	4405      	add	r5, r0
 8011544:	4628      	mov	r0, r5
 8011546:	2108      	movs	r1, #8
 8011548:	f001 fb2e 	bl	8012ba8 <ucdr_alignment>
 801154c:	3048      	adds	r0, #72	; 0x48
 801154e:	4405      	add	r5, r0
 8011550:	4628      	mov	r0, r5
 8011552:	2101      	movs	r1, #1
 8011554:	f001 fb28 	bl	8012ba8 <ucdr_alignment>
 8011558:	f1c6 0601 	rsb	r6, r6, #1
 801155c:	4430      	add	r0, r6
 801155e:	4428      	add	r0, r5
 8011560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011562:	4b05      	ldr	r3, [pc, #20]	; (8011578 <get_serialized_size_sensor_msgs__msg__NavSatFix+0x74>)
 8011564:	4805      	ldr	r0, [pc, #20]	; (801157c <get_serialized_size_sensor_msgs__msg__NavSatFix+0x78>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	221b      	movs	r2, #27
 801156a:	68db      	ldr	r3, [r3, #12]
 801156c:	2101      	movs	r1, #1
 801156e:	f008 fdd9 	bl	801a124 <fwrite>
 8011572:	4620      	mov	r0, r4
 8011574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011576:	bf00      	nop
 8011578:	200001b8 	.word	0x200001b8
 801157c:	0801f928 	.word	0x0801f928

08011580 <_NavSatFix__get_serialized_size>:
 8011580:	2100      	movs	r1, #0
 8011582:	f7ff bfbf 	b.w	8011504 <get_serialized_size_sensor_msgs__msg__NavSatFix>
 8011586:	bf00      	nop

08011588 <_NavSatFix__cdr_deserialize>:
 8011588:	b538      	push	{r3, r4, r5, lr}
 801158a:	460c      	mov	r4, r1
 801158c:	b359      	cbz	r1, 80115e6 <_NavSatFix__cdr_deserialize+0x5e>
 801158e:	4605      	mov	r5, r0
 8011590:	f000 fa7c 	bl	8011a8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011594:	6843      	ldr	r3, [r0, #4]
 8011596:	4621      	mov	r1, r4
 8011598:	68db      	ldr	r3, [r3, #12]
 801159a:	4628      	mov	r0, r5
 801159c:	4798      	blx	r3
 801159e:	f000 f943 	bl	8011828 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>
 80115a2:	6843      	ldr	r3, [r0, #4]
 80115a4:	f104 0114 	add.w	r1, r4, #20
 80115a8:	68db      	ldr	r3, [r3, #12]
 80115aa:	4628      	mov	r0, r5
 80115ac:	4798      	blx	r3
 80115ae:	f104 0118 	add.w	r1, r4, #24
 80115b2:	4628      	mov	r0, r5
 80115b4:	f001 fa26 	bl	8012a04 <ucdr_deserialize_double>
 80115b8:	f104 0120 	add.w	r1, r4, #32
 80115bc:	4628      	mov	r0, r5
 80115be:	f001 fa21 	bl	8012a04 <ucdr_deserialize_double>
 80115c2:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80115c6:	4628      	mov	r0, r5
 80115c8:	f001 fa1c 	bl	8012a04 <ucdr_deserialize_double>
 80115cc:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80115d0:	4628      	mov	r0, r5
 80115d2:	2209      	movs	r2, #9
 80115d4:	f000 fe0e 	bl	80121f4 <ucdr_deserialize_array_double>
 80115d8:	f104 0178 	add.w	r1, r4, #120	; 0x78
 80115dc:	4628      	mov	r0, r5
 80115de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115e2:	f000 bea1 	b.w	8012328 <ucdr_deserialize_uint8_t>
 80115e6:	4b05      	ldr	r3, [pc, #20]	; (80115fc <_NavSatFix__cdr_deserialize+0x74>)
 80115e8:	4805      	ldr	r0, [pc, #20]	; (8011600 <_NavSatFix__cdr_deserialize+0x78>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	221b      	movs	r2, #27
 80115ee:	68db      	ldr	r3, [r3, #12]
 80115f0:	2101      	movs	r1, #1
 80115f2:	f008 fd97 	bl	801a124 <fwrite>
 80115f6:	4620      	mov	r0, r4
 80115f8:	bd38      	pop	{r3, r4, r5, pc}
 80115fa:	bf00      	nop
 80115fc:	200001b8 	.word	0x200001b8
 8011600:	0801f928 	.word	0x0801f928

08011604 <_NavSatFix__cdr_serialize>:
 8011604:	b538      	push	{r3, r4, r5, lr}
 8011606:	4604      	mov	r4, r0
 8011608:	b358      	cbz	r0, 8011662 <_NavSatFix__cdr_serialize+0x5e>
 801160a:	460d      	mov	r5, r1
 801160c:	f000 fa3e 	bl	8011a8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011610:	6843      	ldr	r3, [r0, #4]
 8011612:	4629      	mov	r1, r5
 8011614:	689b      	ldr	r3, [r3, #8]
 8011616:	4620      	mov	r0, r4
 8011618:	4798      	blx	r3
 801161a:	f000 f905 	bl	8011828 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>
 801161e:	6843      	ldr	r3, [r0, #4]
 8011620:	4629      	mov	r1, r5
 8011622:	689b      	ldr	r3, [r3, #8]
 8011624:	f104 0014 	add.w	r0, r4, #20
 8011628:	4798      	blx	r3
 801162a:	ed94 0b06 	vldr	d0, [r4, #24]
 801162e:	4628      	mov	r0, r5
 8011630:	f001 f954 	bl	80128dc <ucdr_serialize_double>
 8011634:	ed94 0b08 	vldr	d0, [r4, #32]
 8011638:	4628      	mov	r0, r5
 801163a:	f001 f94f 	bl	80128dc <ucdr_serialize_double>
 801163e:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 8011642:	4628      	mov	r0, r5
 8011644:	f001 f94a 	bl	80128dc <ucdr_serialize_double>
 8011648:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801164c:	4628      	mov	r0, r5
 801164e:	2209      	movs	r2, #9
 8011650:	f000 fd7c 	bl	801214c <ucdr_serialize_array_double>
 8011654:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8011658:	4628      	mov	r0, r5
 801165a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801165e:	f000 be4d 	b.w	80122fc <ucdr_serialize_uint8_t>
 8011662:	4b05      	ldr	r3, [pc, #20]	; (8011678 <_NavSatFix__cdr_serialize+0x74>)
 8011664:	4805      	ldr	r0, [pc, #20]	; (801167c <_NavSatFix__cdr_serialize+0x78>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	221b      	movs	r2, #27
 801166a:	68db      	ldr	r3, [r3, #12]
 801166c:	2101      	movs	r1, #1
 801166e:	f008 fd59 	bl	801a124 <fwrite>
 8011672:	4620      	mov	r0, r4
 8011674:	bd38      	pop	{r3, r4, r5, pc}
 8011676:	bf00      	nop
 8011678:	200001b8 	.word	0x200001b8
 801167c:	0801f928 	.word	0x0801f928

08011680 <max_serialized_size_sensor_msgs__msg__NavSatFix>:
 8011680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011682:	2701      	movs	r7, #1
 8011684:	7007      	strb	r7, [r0, #0]
 8011686:	460c      	mov	r4, r1
 8011688:	4605      	mov	r5, r0
 801168a:	f000 f9f5 	bl	8011a78 <max_serialized_size_std_msgs__msg__Header>
 801168e:	1826      	adds	r6, r4, r0
 8011690:	4631      	mov	r1, r6
 8011692:	4628      	mov	r0, r5
 8011694:	f000 f8b6 	bl	8011804 <max_serialized_size_sensor_msgs__msg__NavSatStatus>
 8011698:	1835      	adds	r5, r6, r0
 801169a:	4628      	mov	r0, r5
 801169c:	2108      	movs	r1, #8
 801169e:	f001 fa83 	bl	8012ba8 <ucdr_alignment>
 80116a2:	3008      	adds	r0, #8
 80116a4:	4405      	add	r5, r0
 80116a6:	4628      	mov	r0, r5
 80116a8:	2108      	movs	r1, #8
 80116aa:	f001 fa7d 	bl	8012ba8 <ucdr_alignment>
 80116ae:	3008      	adds	r0, #8
 80116b0:	1946      	adds	r6, r0, r5
 80116b2:	4630      	mov	r0, r6
 80116b4:	2108      	movs	r1, #8
 80116b6:	f001 fa77 	bl	8012ba8 <ucdr_alignment>
 80116ba:	f100 0508 	add.w	r5, r0, #8
 80116be:	4435      	add	r5, r6
 80116c0:	4628      	mov	r0, r5
 80116c2:	2108      	movs	r1, #8
 80116c4:	f001 fa70 	bl	8012ba8 <ucdr_alignment>
 80116c8:	3048      	adds	r0, #72	; 0x48
 80116ca:	4405      	add	r5, r0
 80116cc:	4639      	mov	r1, r7
 80116ce:	4628      	mov	r0, r5
 80116d0:	f001 fa6a 	bl	8012ba8 <ucdr_alignment>
 80116d4:	1b3c      	subs	r4, r7, r4
 80116d6:	4420      	add	r0, r4
 80116d8:	4428      	add	r0, r5
 80116da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080116dc <_NavSatFix__max_serialized_size>:
 80116dc:	b500      	push	{lr}
 80116de:	b083      	sub	sp, #12
 80116e0:	2100      	movs	r1, #0
 80116e2:	f10d 0007 	add.w	r0, sp, #7
 80116e6:	f7ff ffcb 	bl	8011680 <max_serialized_size_sensor_msgs__msg__NavSatFix>
 80116ea:	b003      	add	sp, #12
 80116ec:	f85d fb04 	ldr.w	pc, [sp], #4

080116f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>:
 80116f0:	4800      	ldr	r0, [pc, #0]	; (80116f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix+0x4>)
 80116f2:	4770      	bx	lr
 80116f4:	20000044 	.word	0x20000044

080116f8 <get_serialized_size_sensor_msgs__msg__NavSatStatus>:
 80116f8:	b538      	push	{r3, r4, r5, lr}
 80116fa:	b178      	cbz	r0, 801171c <get_serialized_size_sensor_msgs__msg__NavSatStatus+0x24>
 80116fc:	460d      	mov	r5, r1
 80116fe:	4628      	mov	r0, r5
 8011700:	2101      	movs	r1, #1
 8011702:	f001 fa51 	bl	8012ba8 <ucdr_alignment>
 8011706:	1c6c      	adds	r4, r5, #1
 8011708:	4404      	add	r4, r0
 801170a:	4620      	mov	r0, r4
 801170c:	2102      	movs	r1, #2
 801170e:	f001 fa4b 	bl	8012ba8 <ucdr_alignment>
 8011712:	f1c5 0502 	rsb	r5, r5, #2
 8011716:	4428      	add	r0, r5
 8011718:	4420      	add	r0, r4
 801171a:	bd38      	pop	{r3, r4, r5, pc}
 801171c:	4b05      	ldr	r3, [pc, #20]	; (8011734 <get_serialized_size_sensor_msgs__msg__NavSatStatus+0x3c>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	4604      	mov	r4, r0
 8011722:	68db      	ldr	r3, [r3, #12]
 8011724:	4804      	ldr	r0, [pc, #16]	; (8011738 <get_serialized_size_sensor_msgs__msg__NavSatStatus+0x40>)
 8011726:	221b      	movs	r2, #27
 8011728:	2101      	movs	r1, #1
 801172a:	f008 fcfb 	bl	801a124 <fwrite>
 801172e:	4620      	mov	r0, r4
 8011730:	bd38      	pop	{r3, r4, r5, pc}
 8011732:	bf00      	nop
 8011734:	200001b8 	.word	0x200001b8
 8011738:	0801f928 	.word	0x0801f928

0801173c <_NavSatStatus__cdr_serialize>:
 801173c:	b538      	push	{r3, r4, r5, lr}
 801173e:	4604      	mov	r4, r0
 8011740:	b158      	cbz	r0, 801175a <_NavSatStatus__cdr_serialize+0x1e>
 8011742:	460d      	mov	r5, r1
 8011744:	f990 1000 	ldrsb.w	r1, [r0]
 8011748:	4628      	mov	r0, r5
 801174a:	f000 ffb1 	bl	80126b0 <ucdr_serialize_int8_t>
 801174e:	8861      	ldrh	r1, [r4, #2]
 8011750:	4628      	mov	r0, r5
 8011752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011756:	f000 bdfd 	b.w	8012354 <ucdr_serialize_uint16_t>
 801175a:	4b05      	ldr	r3, [pc, #20]	; (8011770 <_NavSatStatus__cdr_serialize+0x34>)
 801175c:	4805      	ldr	r0, [pc, #20]	; (8011774 <_NavSatStatus__cdr_serialize+0x38>)
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	221b      	movs	r2, #27
 8011762:	68db      	ldr	r3, [r3, #12]
 8011764:	2101      	movs	r1, #1
 8011766:	f008 fcdd 	bl	801a124 <fwrite>
 801176a:	4620      	mov	r0, r4
 801176c:	bd38      	pop	{r3, r4, r5, pc}
 801176e:	bf00      	nop
 8011770:	200001b8 	.word	0x200001b8
 8011774:	0801f928 	.word	0x0801f928

08011778 <_NavSatStatus__cdr_deserialize>:
 8011778:	b538      	push	{r3, r4, r5, lr}
 801177a:	460c      	mov	r4, r1
 801177c:	b141      	cbz	r1, 8011790 <_NavSatStatus__cdr_deserialize+0x18>
 801177e:	4605      	mov	r5, r0
 8011780:	f000 ffac 	bl	80126dc <ucdr_deserialize_int8_t>
 8011784:	1ca1      	adds	r1, r4, #2
 8011786:	4628      	mov	r0, r5
 8011788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801178c:	f000 be32 	b.w	80123f4 <ucdr_deserialize_uint16_t>
 8011790:	4b04      	ldr	r3, [pc, #16]	; (80117a4 <_NavSatStatus__cdr_deserialize+0x2c>)
 8011792:	4805      	ldr	r0, [pc, #20]	; (80117a8 <_NavSatStatus__cdr_deserialize+0x30>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	221b      	movs	r2, #27
 8011798:	68db      	ldr	r3, [r3, #12]
 801179a:	2101      	movs	r1, #1
 801179c:	f008 fcc2 	bl	801a124 <fwrite>
 80117a0:	4620      	mov	r0, r4
 80117a2:	bd38      	pop	{r3, r4, r5, pc}
 80117a4:	200001b8 	.word	0x200001b8
 80117a8:	0801f928 	.word	0x0801f928

080117ac <_NavSatStatus__max_serialized_size>:
 80117ac:	b510      	push	{r4, lr}
 80117ae:	2101      	movs	r1, #1
 80117b0:	2000      	movs	r0, #0
 80117b2:	f001 f9f9 	bl	8012ba8 <ucdr_alignment>
 80117b6:	1c44      	adds	r4, r0, #1
 80117b8:	4620      	mov	r0, r4
 80117ba:	2102      	movs	r1, #2
 80117bc:	f001 f9f4 	bl	8012ba8 <ucdr_alignment>
 80117c0:	3002      	adds	r0, #2
 80117c2:	4420      	add	r0, r4
 80117c4:	bd10      	pop	{r4, pc}
 80117c6:	bf00      	nop

080117c8 <_NavSatStatus__get_serialized_size>:
 80117c8:	b510      	push	{r4, lr}
 80117ca:	b158      	cbz	r0, 80117e4 <_NavSatStatus__get_serialized_size+0x1c>
 80117cc:	2101      	movs	r1, #1
 80117ce:	2000      	movs	r0, #0
 80117d0:	f001 f9ea 	bl	8012ba8 <ucdr_alignment>
 80117d4:	1c44      	adds	r4, r0, #1
 80117d6:	4620      	mov	r0, r4
 80117d8:	2102      	movs	r1, #2
 80117da:	f001 f9e5 	bl	8012ba8 <ucdr_alignment>
 80117de:	3002      	adds	r0, #2
 80117e0:	4420      	add	r0, r4
 80117e2:	bd10      	pop	{r4, pc}
 80117e4:	4b05      	ldr	r3, [pc, #20]	; (80117fc <_NavSatStatus__get_serialized_size+0x34>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	4604      	mov	r4, r0
 80117ea:	68db      	ldr	r3, [r3, #12]
 80117ec:	4804      	ldr	r0, [pc, #16]	; (8011800 <_NavSatStatus__get_serialized_size+0x38>)
 80117ee:	221b      	movs	r2, #27
 80117f0:	2101      	movs	r1, #1
 80117f2:	f008 fc97 	bl	801a124 <fwrite>
 80117f6:	4620      	mov	r0, r4
 80117f8:	bd10      	pop	{r4, pc}
 80117fa:	bf00      	nop
 80117fc:	200001b8 	.word	0x200001b8
 8011800:	0801f928 	.word	0x0801f928

08011804 <max_serialized_size_sensor_msgs__msg__NavSatStatus>:
 8011804:	b538      	push	{r3, r4, r5, lr}
 8011806:	460c      	mov	r4, r1
 8011808:	2101      	movs	r1, #1
 801180a:	7001      	strb	r1, [r0, #0]
 801180c:	4620      	mov	r0, r4
 801180e:	f001 f9cb 	bl	8012ba8 <ucdr_alignment>
 8011812:	1c65      	adds	r5, r4, #1
 8011814:	4405      	add	r5, r0
 8011816:	4628      	mov	r0, r5
 8011818:	2102      	movs	r1, #2
 801181a:	f001 f9c5 	bl	8012ba8 <ucdr_alignment>
 801181e:	f1c4 0402 	rsb	r4, r4, #2
 8011822:	4420      	add	r0, r4
 8011824:	4428      	add	r0, r5
 8011826:	bd38      	pop	{r3, r4, r5, pc}

08011828 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>:
 8011828:	4800      	ldr	r0, [pc, #0]	; (801182c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus+0x4>)
 801182a:	4770      	bx	lr
 801182c:	2000006c 	.word	0x2000006c

08011830 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 8011830:	f000 b868 	b.w	8011904 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32>

08011834 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>:
 8011834:	f000 b9e0 	b.w	8011bf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>

08011838 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt32>:
 8011838:	f000 ba46 	b.w	8011cc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt32>

0801183c <_Float32__max_serialized_size>:
 801183c:	b508      	push	{r3, lr}
 801183e:	2104      	movs	r1, #4
 8011840:	2000      	movs	r0, #0
 8011842:	f001 f9b1 	bl	8012ba8 <ucdr_alignment>
 8011846:	3004      	adds	r0, #4
 8011848:	bd08      	pop	{r3, pc}
 801184a:	bf00      	nop

0801184c <get_serialized_size_std_msgs__msg__Float32>:
 801184c:	b510      	push	{r4, lr}
 801184e:	b128      	cbz	r0, 801185c <get_serialized_size_std_msgs__msg__Float32+0x10>
 8011850:	4608      	mov	r0, r1
 8011852:	2104      	movs	r1, #4
 8011854:	f001 f9a8 	bl	8012ba8 <ucdr_alignment>
 8011858:	3004      	adds	r0, #4
 801185a:	bd10      	pop	{r4, pc}
 801185c:	4b05      	ldr	r3, [pc, #20]	; (8011874 <get_serialized_size_std_msgs__msg__Float32+0x28>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	4604      	mov	r4, r0
 8011862:	68db      	ldr	r3, [r3, #12]
 8011864:	4804      	ldr	r0, [pc, #16]	; (8011878 <get_serialized_size_std_msgs__msg__Float32+0x2c>)
 8011866:	221b      	movs	r2, #27
 8011868:	2101      	movs	r1, #1
 801186a:	f008 fc5b 	bl	801a124 <fwrite>
 801186e:	4620      	mov	r0, r4
 8011870:	bd10      	pop	{r4, pc}
 8011872:	bf00      	nop
 8011874:	200001b8 	.word	0x200001b8
 8011878:	0801f928 	.word	0x0801f928

0801187c <_Float32__cdr_serialize>:
 801187c:	b510      	push	{r4, lr}
 801187e:	4604      	mov	r4, r0
 8011880:	b130      	cbz	r0, 8011890 <_Float32__cdr_serialize+0x14>
 8011882:	ed94 0a00 	vldr	s0, [r4]
 8011886:	4608      	mov	r0, r1
 8011888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801188c:	f000 bfc4 	b.w	8012818 <ucdr_serialize_float>
 8011890:	4b04      	ldr	r3, [pc, #16]	; (80118a4 <_Float32__cdr_serialize+0x28>)
 8011892:	4805      	ldr	r0, [pc, #20]	; (80118a8 <_Float32__cdr_serialize+0x2c>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	221b      	movs	r2, #27
 8011898:	68db      	ldr	r3, [r3, #12]
 801189a:	2101      	movs	r1, #1
 801189c:	f008 fc42 	bl	801a124 <fwrite>
 80118a0:	4620      	mov	r0, r4
 80118a2:	bd10      	pop	{r4, pc}
 80118a4:	200001b8 	.word	0x200001b8
 80118a8:	0801f928 	.word	0x0801f928

080118ac <_Float32__cdr_deserialize>:
 80118ac:	b109      	cbz	r1, 80118b2 <_Float32__cdr_deserialize+0x6>
 80118ae:	f000 bfe5 	b.w	801287c <ucdr_deserialize_float>
 80118b2:	b510      	push	{r4, lr}
 80118b4:	4b05      	ldr	r3, [pc, #20]	; (80118cc <_Float32__cdr_deserialize+0x20>)
 80118b6:	4806      	ldr	r0, [pc, #24]	; (80118d0 <_Float32__cdr_deserialize+0x24>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	460c      	mov	r4, r1
 80118bc:	68db      	ldr	r3, [r3, #12]
 80118be:	221b      	movs	r2, #27
 80118c0:	2101      	movs	r1, #1
 80118c2:	f008 fc2f 	bl	801a124 <fwrite>
 80118c6:	4620      	mov	r0, r4
 80118c8:	bd10      	pop	{r4, pc}
 80118ca:	bf00      	nop
 80118cc:	200001b8 	.word	0x200001b8
 80118d0:	0801f928 	.word	0x0801f928

080118d4 <_Float32__get_serialized_size>:
 80118d4:	b510      	push	{r4, lr}
 80118d6:	b128      	cbz	r0, 80118e4 <_Float32__get_serialized_size+0x10>
 80118d8:	2104      	movs	r1, #4
 80118da:	2000      	movs	r0, #0
 80118dc:	f001 f964 	bl	8012ba8 <ucdr_alignment>
 80118e0:	3004      	adds	r0, #4
 80118e2:	bd10      	pop	{r4, pc}
 80118e4:	4b05      	ldr	r3, [pc, #20]	; (80118fc <_Float32__get_serialized_size+0x28>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	4604      	mov	r4, r0
 80118ea:	68db      	ldr	r3, [r3, #12]
 80118ec:	4804      	ldr	r0, [pc, #16]	; (8011900 <_Float32__get_serialized_size+0x2c>)
 80118ee:	221b      	movs	r2, #27
 80118f0:	2101      	movs	r1, #1
 80118f2:	f008 fc17 	bl	801a124 <fwrite>
 80118f6:	4620      	mov	r0, r4
 80118f8:	bd10      	pop	{r4, pc}
 80118fa:	bf00      	nop
 80118fc:	200001b8 	.word	0x200001b8
 8011900:	0801f928 	.word	0x0801f928

08011904 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 8011904:	4800      	ldr	r0, [pc, #0]	; (8011908 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32+0x4>)
 8011906:	4770      	bx	lr
 8011908:	20000094 	.word	0x20000094

0801190c <_Header__max_serialized_size>:
 801190c:	b500      	push	{lr}
 801190e:	b083      	sub	sp, #12
 8011910:	2301      	movs	r3, #1
 8011912:	2100      	movs	r1, #0
 8011914:	f10d 0007 	add.w	r0, sp, #7
 8011918:	f88d 3007 	strb.w	r3, [sp, #7]
 801191c:	f000 fa5c 	bl	8011dd8 <max_serialized_size_builtin_interfaces__msg__Time>
 8011920:	b003      	add	sp, #12
 8011922:	f85d fb04 	ldr.w	pc, [sp], #4
 8011926:	bf00      	nop

08011928 <get_serialized_size_std_msgs__msg__Header>:
 8011928:	b570      	push	{r4, r5, r6, lr}
 801192a:	4605      	mov	r5, r0
 801192c:	b170      	cbz	r0, 801194c <get_serialized_size_std_msgs__msg__Header+0x24>
 801192e:	460c      	mov	r4, r1
 8011930:	f000 f9ce 	bl	8011cd0 <get_serialized_size_builtin_interfaces__msg__Time>
 8011934:	1826      	adds	r6, r4, r0
 8011936:	4630      	mov	r0, r6
 8011938:	2104      	movs	r1, #4
 801193a:	f001 f935 	bl	8012ba8 <ucdr_alignment>
 801193e:	68e9      	ldr	r1, [r5, #12]
 8011940:	f1c4 0405 	rsb	r4, r4, #5
 8011944:	440c      	add	r4, r1
 8011946:	4404      	add	r4, r0
 8011948:	19a0      	adds	r0, r4, r6
 801194a:	bd70      	pop	{r4, r5, r6, pc}
 801194c:	4b04      	ldr	r3, [pc, #16]	; (8011960 <get_serialized_size_std_msgs__msg__Header+0x38>)
 801194e:	4805      	ldr	r0, [pc, #20]	; (8011964 <get_serialized_size_std_msgs__msg__Header+0x3c>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	221b      	movs	r2, #27
 8011954:	68db      	ldr	r3, [r3, #12]
 8011956:	2101      	movs	r1, #1
 8011958:	f008 fbe4 	bl	801a124 <fwrite>
 801195c:	4628      	mov	r0, r5
 801195e:	bd70      	pop	{r4, r5, r6, pc}
 8011960:	200001b8 	.word	0x200001b8
 8011964:	0801f928 	.word	0x0801f928

08011968 <_Header__cdr_deserialize>:
 8011968:	b5f0      	push	{r4, r5, r6, r7, lr}
 801196a:	460c      	mov	r4, r1
 801196c:	b083      	sub	sp, #12
 801196e:	b1e9      	cbz	r1, 80119ac <_Header__cdr_deserialize+0x44>
 8011970:	4607      	mov	r7, r0
 8011972:	f000 fa45 	bl	8011e00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011976:	6843      	ldr	r3, [r0, #4]
 8011978:	4621      	mov	r1, r4
 801197a:	68db      	ldr	r3, [r3, #12]
 801197c:	4638      	mov	r0, r7
 801197e:	4798      	blx	r3
 8011980:	6926      	ldr	r6, [r4, #16]
 8011982:	68a1      	ldr	r1, [r4, #8]
 8011984:	4632      	mov	r2, r6
 8011986:	ab01      	add	r3, sp, #4
 8011988:	4638      	mov	r0, r7
 801198a:	f001 f98f 	bl	8012cac <ucdr_deserialize_sequence_char>
 801198e:	4605      	mov	r5, r0
 8011990:	b130      	cbz	r0, 80119a0 <_Header__cdr_deserialize+0x38>
 8011992:	9b01      	ldr	r3, [sp, #4]
 8011994:	b103      	cbz	r3, 8011998 <_Header__cdr_deserialize+0x30>
 8011996:	3b01      	subs	r3, #1
 8011998:	4628      	mov	r0, r5
 801199a:	60e3      	str	r3, [r4, #12]
 801199c:	b003      	add	sp, #12
 801199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119a0:	9901      	ldr	r1, [sp, #4]
 80119a2:	42b1      	cmp	r1, r6
 80119a4:	d80e      	bhi.n	80119c4 <_Header__cdr_deserialize+0x5c>
 80119a6:	4628      	mov	r0, r5
 80119a8:	b003      	add	sp, #12
 80119aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119ac:	4b09      	ldr	r3, [pc, #36]	; (80119d4 <_Header__cdr_deserialize+0x6c>)
 80119ae:	480a      	ldr	r0, [pc, #40]	; (80119d8 <_Header__cdr_deserialize+0x70>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	221b      	movs	r2, #27
 80119b4:	68db      	ldr	r3, [r3, #12]
 80119b6:	2101      	movs	r1, #1
 80119b8:	f008 fbb4 	bl	801a124 <fwrite>
 80119bc:	4625      	mov	r5, r4
 80119be:	4628      	mov	r0, r5
 80119c0:	b003      	add	sp, #12
 80119c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119c4:	75b8      	strb	r0, [r7, #22]
 80119c6:	60e0      	str	r0, [r4, #12]
 80119c8:	4638      	mov	r0, r7
 80119ca:	f001 f93d 	bl	8012c48 <ucdr_advance_buffer>
 80119ce:	4628      	mov	r0, r5
 80119d0:	b003      	add	sp, #12
 80119d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119d4:	200001b8 	.word	0x200001b8
 80119d8:	0801f928 	.word	0x0801f928

080119dc <_Header__cdr_serialize>:
 80119dc:	b570      	push	{r4, r5, r6, lr}
 80119de:	4604      	mov	r4, r0
 80119e0:	b1e8      	cbz	r0, 8011a1e <_Header__cdr_serialize+0x42>
 80119e2:	460e      	mov	r6, r1
 80119e4:	f000 fa0c 	bl	8011e00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80119e8:	6843      	ldr	r3, [r0, #4]
 80119ea:	4631      	mov	r1, r6
 80119ec:	689b      	ldr	r3, [r3, #8]
 80119ee:	4620      	mov	r0, r4
 80119f0:	4798      	blx	r3
 80119f2:	68a5      	ldr	r5, [r4, #8]
 80119f4:	b155      	cbz	r5, 8011a0c <_Header__cdr_serialize+0x30>
 80119f6:	4628      	mov	r0, r5
 80119f8:	f7ee fbf4 	bl	80001e4 <strlen>
 80119fc:	4629      	mov	r1, r5
 80119fe:	60e0      	str	r0, [r4, #12]
 8011a00:	1c42      	adds	r2, r0, #1
 8011a02:	4630      	mov	r0, r6
 8011a04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a08:	f001 b93e 	b.w	8012c88 <ucdr_serialize_sequence_char>
 8011a0c:	4628      	mov	r0, r5
 8011a0e:	60e0      	str	r0, [r4, #12]
 8011a10:	462a      	mov	r2, r5
 8011a12:	4629      	mov	r1, r5
 8011a14:	4630      	mov	r0, r6
 8011a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a1a:	f001 b935 	b.w	8012c88 <ucdr_serialize_sequence_char>
 8011a1e:	4b05      	ldr	r3, [pc, #20]	; (8011a34 <_Header__cdr_serialize+0x58>)
 8011a20:	4805      	ldr	r0, [pc, #20]	; (8011a38 <_Header__cdr_serialize+0x5c>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	221b      	movs	r2, #27
 8011a26:	68db      	ldr	r3, [r3, #12]
 8011a28:	2101      	movs	r1, #1
 8011a2a:	f008 fb7b 	bl	801a124 <fwrite>
 8011a2e:	4620      	mov	r0, r4
 8011a30:	bd70      	pop	{r4, r5, r6, pc}
 8011a32:	bf00      	nop
 8011a34:	200001b8 	.word	0x200001b8
 8011a38:	0801f928 	.word	0x0801f928

08011a3c <_Header__get_serialized_size>:
 8011a3c:	b538      	push	{r3, r4, r5, lr}
 8011a3e:	4604      	mov	r4, r0
 8011a40:	b158      	cbz	r0, 8011a5a <_Header__get_serialized_size+0x1e>
 8011a42:	2100      	movs	r1, #0
 8011a44:	f000 f944 	bl	8011cd0 <get_serialized_size_builtin_interfaces__msg__Time>
 8011a48:	2104      	movs	r1, #4
 8011a4a:	4605      	mov	r5, r0
 8011a4c:	f001 f8ac 	bl	8012ba8 <ucdr_alignment>
 8011a50:	68e2      	ldr	r2, [r4, #12]
 8011a52:	3205      	adds	r2, #5
 8011a54:	1953      	adds	r3, r2, r5
 8011a56:	4418      	add	r0, r3
 8011a58:	bd38      	pop	{r3, r4, r5, pc}
 8011a5a:	4b05      	ldr	r3, [pc, #20]	; (8011a70 <_Header__get_serialized_size+0x34>)
 8011a5c:	4805      	ldr	r0, [pc, #20]	; (8011a74 <_Header__get_serialized_size+0x38>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	221b      	movs	r2, #27
 8011a62:	68db      	ldr	r3, [r3, #12]
 8011a64:	2101      	movs	r1, #1
 8011a66:	f008 fb5d 	bl	801a124 <fwrite>
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	bd38      	pop	{r3, r4, r5, pc}
 8011a6e:	bf00      	nop
 8011a70:	200001b8 	.word	0x200001b8
 8011a74:	0801f928 	.word	0x0801f928

08011a78 <max_serialized_size_std_msgs__msg__Header>:
 8011a78:	b510      	push	{r4, lr}
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	4604      	mov	r4, r0
 8011a7e:	7003      	strb	r3, [r0, #0]
 8011a80:	f000 f9aa 	bl	8011dd8 <max_serialized_size_builtin_interfaces__msg__Time>
 8011a84:	2300      	movs	r3, #0
 8011a86:	7023      	strb	r3, [r4, #0]
 8011a88:	bd10      	pop	{r4, pc}
 8011a8a:	bf00      	nop

08011a8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011a8c:	4800      	ldr	r0, [pc, #0]	; (8011a90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8011a8e:	4770      	bx	lr
 8011a90:	200000bc 	.word	0x200000bc

08011a94 <_UInt16MultiArray__max_serialized_size>:
 8011a94:	b500      	push	{lr}
 8011a96:	b083      	sub	sp, #12
 8011a98:	2301      	movs	r3, #1
 8011a9a:	2100      	movs	r1, #0
 8011a9c:	f10d 0007 	add.w	r0, sp, #7
 8011aa0:	f88d 3007 	strb.w	r3, [sp, #7]
 8011aa4:	f007 fb36 	bl	8019114 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 8011aa8:	b003      	add	sp, #12
 8011aaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8011aae:	bf00      	nop

08011ab0 <get_serialized_size_std_msgs__msg__UInt16MultiArray>:
 8011ab0:	b570      	push	{r4, r5, r6, lr}
 8011ab2:	4604      	mov	r4, r0
 8011ab4:	b198      	cbz	r0, 8011ade <get_serialized_size_std_msgs__msg__UInt16MultiArray+0x2e>
 8011ab6:	460e      	mov	r6, r1
 8011ab8:	f007 fa6e 	bl	8018f98 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 8011abc:	1835      	adds	r5, r6, r0
 8011abe:	4628      	mov	r0, r5
 8011ac0:	2104      	movs	r1, #4
 8011ac2:	6964      	ldr	r4, [r4, #20]
 8011ac4:	f001 f870 	bl	8012ba8 <ucdr_alignment>
 8011ac8:	3004      	adds	r0, #4
 8011aca:	4405      	add	r5, r0
 8011acc:	4628      	mov	r0, r5
 8011ace:	2102      	movs	r1, #2
 8011ad0:	f001 f86a 	bl	8012ba8 <ucdr_alignment>
 8011ad4:	ebc6 0644 	rsb	r6, r6, r4, lsl #1
 8011ad8:	4430      	add	r0, r6
 8011ada:	4428      	add	r0, r5
 8011adc:	bd70      	pop	{r4, r5, r6, pc}
 8011ade:	4b05      	ldr	r3, [pc, #20]	; (8011af4 <get_serialized_size_std_msgs__msg__UInt16MultiArray+0x44>)
 8011ae0:	4805      	ldr	r0, [pc, #20]	; (8011af8 <get_serialized_size_std_msgs__msg__UInt16MultiArray+0x48>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	221b      	movs	r2, #27
 8011ae6:	68db      	ldr	r3, [r3, #12]
 8011ae8:	2101      	movs	r1, #1
 8011aea:	f008 fb1b 	bl	801a124 <fwrite>
 8011aee:	4620      	mov	r0, r4
 8011af0:	bd70      	pop	{r4, r5, r6, pc}
 8011af2:	bf00      	nop
 8011af4:	200001b8 	.word	0x200001b8
 8011af8:	0801f928 	.word	0x0801f928

08011afc <_UInt16MultiArray__cdr_deserialize>:
 8011afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011afe:	460c      	mov	r4, r1
 8011b00:	b083      	sub	sp, #12
 8011b02:	b1d9      	cbz	r1, 8011b3c <_UInt16MultiArray__cdr_deserialize+0x40>
 8011b04:	4607      	mov	r7, r0
 8011b06:	f007 fb0f 	bl	8019128 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8011b0a:	6843      	ldr	r3, [r0, #4]
 8011b0c:	4621      	mov	r1, r4
 8011b0e:	68db      	ldr	r3, [r3, #12]
 8011b10:	4638      	mov	r0, r7
 8011b12:	4798      	blx	r3
 8011b14:	69a6      	ldr	r6, [r4, #24]
 8011b16:	6921      	ldr	r1, [r4, #16]
 8011b18:	4632      	mov	r2, r6
 8011b1a:	ab01      	add	r3, sp, #4
 8011b1c:	4638      	mov	r0, r7
 8011b1e:	f001 f903 	bl	8012d28 <ucdr_deserialize_sequence_uint16_t>
 8011b22:	4605      	mov	r5, r0
 8011b24:	b928      	cbnz	r0, 8011b32 <_UInt16MultiArray__cdr_deserialize+0x36>
 8011b26:	9901      	ldr	r1, [sp, #4]
 8011b28:	42b1      	cmp	r1, r6
 8011b2a:	d813      	bhi.n	8011b54 <_UInt16MultiArray__cdr_deserialize+0x58>
 8011b2c:	4628      	mov	r0, r5
 8011b2e:	b003      	add	sp, #12
 8011b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b32:	9b01      	ldr	r3, [sp, #4]
 8011b34:	6163      	str	r3, [r4, #20]
 8011b36:	4628      	mov	r0, r5
 8011b38:	b003      	add	sp, #12
 8011b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b3c:	4b0a      	ldr	r3, [pc, #40]	; (8011b68 <_UInt16MultiArray__cdr_deserialize+0x6c>)
 8011b3e:	480b      	ldr	r0, [pc, #44]	; (8011b6c <_UInt16MultiArray__cdr_deserialize+0x70>)
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	221b      	movs	r2, #27
 8011b44:	68db      	ldr	r3, [r3, #12]
 8011b46:	2101      	movs	r1, #1
 8011b48:	f008 faec 	bl	801a124 <fwrite>
 8011b4c:	4625      	mov	r5, r4
 8011b4e:	4628      	mov	r0, r5
 8011b50:	b003      	add	sp, #12
 8011b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b54:	75b8      	strb	r0, [r7, #22]
 8011b56:	0049      	lsls	r1, r1, #1
 8011b58:	6160      	str	r0, [r4, #20]
 8011b5a:	4638      	mov	r0, r7
 8011b5c:	f001 f874 	bl	8012c48 <ucdr_advance_buffer>
 8011b60:	4628      	mov	r0, r5
 8011b62:	b003      	add	sp, #12
 8011b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b66:	bf00      	nop
 8011b68:	200001b8 	.word	0x200001b8
 8011b6c:	0801f928 	.word	0x0801f928

08011b70 <_UInt16MultiArray__cdr_serialize>:
 8011b70:	b538      	push	{r3, r4, r5, lr}
 8011b72:	4604      	mov	r4, r0
 8011b74:	b170      	cbz	r0, 8011b94 <_UInt16MultiArray__cdr_serialize+0x24>
 8011b76:	460d      	mov	r5, r1
 8011b78:	f007 fad6 	bl	8019128 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8011b7c:	6843      	ldr	r3, [r0, #4]
 8011b7e:	4629      	mov	r1, r5
 8011b80:	689b      	ldr	r3, [r3, #8]
 8011b82:	4620      	mov	r0, r4
 8011b84:	4798      	blx	r3
 8011b86:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b90:	f001 b8b8 	b.w	8012d04 <ucdr_serialize_sequence_uint16_t>
 8011b94:	4b04      	ldr	r3, [pc, #16]	; (8011ba8 <_UInt16MultiArray__cdr_serialize+0x38>)
 8011b96:	4805      	ldr	r0, [pc, #20]	; (8011bac <_UInt16MultiArray__cdr_serialize+0x3c>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	221b      	movs	r2, #27
 8011b9c:	68db      	ldr	r3, [r3, #12]
 8011b9e:	2101      	movs	r1, #1
 8011ba0:	f008 fac0 	bl	801a124 <fwrite>
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	bd38      	pop	{r3, r4, r5, pc}
 8011ba8:	200001b8 	.word	0x200001b8
 8011bac:	0801f928 	.word	0x0801f928

08011bb0 <_UInt16MultiArray__get_serialized_size>:
 8011bb0:	b538      	push	{r3, r4, r5, lr}
 8011bb2:	4604      	mov	r4, r0
 8011bb4:	b188      	cbz	r0, 8011bda <_UInt16MultiArray__get_serialized_size+0x2a>
 8011bb6:	2100      	movs	r1, #0
 8011bb8:	f007 f9ee 	bl	8018f98 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 8011bbc:	2104      	movs	r1, #4
 8011bbe:	6965      	ldr	r5, [r4, #20]
 8011bc0:	4604      	mov	r4, r0
 8011bc2:	f000 fff1 	bl	8012ba8 <ucdr_alignment>
 8011bc6:	4420      	add	r0, r4
 8011bc8:	1d04      	adds	r4, r0, #4
 8011bca:	4620      	mov	r0, r4
 8011bcc:	2102      	movs	r1, #2
 8011bce:	f000 ffeb 	bl	8012ba8 <ucdr_alignment>
 8011bd2:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 8011bd6:	4420      	add	r0, r4
 8011bd8:	bd38      	pop	{r3, r4, r5, pc}
 8011bda:	4b05      	ldr	r3, [pc, #20]	; (8011bf0 <_UInt16MultiArray__get_serialized_size+0x40>)
 8011bdc:	4805      	ldr	r0, [pc, #20]	; (8011bf4 <_UInt16MultiArray__get_serialized_size+0x44>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	221b      	movs	r2, #27
 8011be2:	68db      	ldr	r3, [r3, #12]
 8011be4:	2101      	movs	r1, #1
 8011be6:	f008 fa9d 	bl	801a124 <fwrite>
 8011bea:	4620      	mov	r0, r4
 8011bec:	bd38      	pop	{r3, r4, r5, pc}
 8011bee:	bf00      	nop
 8011bf0:	200001b8 	.word	0x200001b8
 8011bf4:	0801f928 	.word	0x0801f928

08011bf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>:
 8011bf8:	4800      	ldr	r0, [pc, #0]	; (8011bfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0x4>)
 8011bfa:	4770      	bx	lr
 8011bfc:	200000e4 	.word	0x200000e4

08011c00 <_UInt32__max_serialized_size>:
 8011c00:	b508      	push	{r3, lr}
 8011c02:	2104      	movs	r1, #4
 8011c04:	2000      	movs	r0, #0
 8011c06:	f000 ffcf 	bl	8012ba8 <ucdr_alignment>
 8011c0a:	3004      	adds	r0, #4
 8011c0c:	bd08      	pop	{r3, pc}
 8011c0e:	bf00      	nop

08011c10 <get_serialized_size_std_msgs__msg__UInt32>:
 8011c10:	b510      	push	{r4, lr}
 8011c12:	b128      	cbz	r0, 8011c20 <get_serialized_size_std_msgs__msg__UInt32+0x10>
 8011c14:	4608      	mov	r0, r1
 8011c16:	2104      	movs	r1, #4
 8011c18:	f000 ffc6 	bl	8012ba8 <ucdr_alignment>
 8011c1c:	3004      	adds	r0, #4
 8011c1e:	bd10      	pop	{r4, pc}
 8011c20:	4b05      	ldr	r3, [pc, #20]	; (8011c38 <get_serialized_size_std_msgs__msg__UInt32+0x28>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	4604      	mov	r4, r0
 8011c26:	68db      	ldr	r3, [r3, #12]
 8011c28:	4804      	ldr	r0, [pc, #16]	; (8011c3c <get_serialized_size_std_msgs__msg__UInt32+0x2c>)
 8011c2a:	221b      	movs	r2, #27
 8011c2c:	2101      	movs	r1, #1
 8011c2e:	f008 fa79 	bl	801a124 <fwrite>
 8011c32:	4620      	mov	r0, r4
 8011c34:	bd10      	pop	{r4, pc}
 8011c36:	bf00      	nop
 8011c38:	200001b8 	.word	0x200001b8
 8011c3c:	0801f928 	.word	0x0801f928

08011c40 <_UInt32__cdr_serialize>:
 8011c40:	b510      	push	{r4, lr}
 8011c42:	4604      	mov	r4, r0
 8011c44:	b130      	cbz	r0, 8011c54 <_UInt32__cdr_serialize+0x14>
 8011c46:	460b      	mov	r3, r1
 8011c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c4c:	6801      	ldr	r1, [r0, #0]
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f000 bc24 	b.w	801249c <ucdr_serialize_uint32_t>
 8011c54:	4b04      	ldr	r3, [pc, #16]	; (8011c68 <_UInt32__cdr_serialize+0x28>)
 8011c56:	4805      	ldr	r0, [pc, #20]	; (8011c6c <_UInt32__cdr_serialize+0x2c>)
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	221b      	movs	r2, #27
 8011c5c:	68db      	ldr	r3, [r3, #12]
 8011c5e:	2101      	movs	r1, #1
 8011c60:	f008 fa60 	bl	801a124 <fwrite>
 8011c64:	4620      	mov	r0, r4
 8011c66:	bd10      	pop	{r4, pc}
 8011c68:	200001b8 	.word	0x200001b8
 8011c6c:	0801f928 	.word	0x0801f928

08011c70 <_UInt32__cdr_deserialize>:
 8011c70:	b109      	cbz	r1, 8011c76 <_UInt32__cdr_deserialize+0x6>
 8011c72:	f000 bc73 	b.w	801255c <ucdr_deserialize_uint32_t>
 8011c76:	b510      	push	{r4, lr}
 8011c78:	4b05      	ldr	r3, [pc, #20]	; (8011c90 <_UInt32__cdr_deserialize+0x20>)
 8011c7a:	4806      	ldr	r0, [pc, #24]	; (8011c94 <_UInt32__cdr_deserialize+0x24>)
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	460c      	mov	r4, r1
 8011c80:	68db      	ldr	r3, [r3, #12]
 8011c82:	221b      	movs	r2, #27
 8011c84:	2101      	movs	r1, #1
 8011c86:	f008 fa4d 	bl	801a124 <fwrite>
 8011c8a:	4620      	mov	r0, r4
 8011c8c:	bd10      	pop	{r4, pc}
 8011c8e:	bf00      	nop
 8011c90:	200001b8 	.word	0x200001b8
 8011c94:	0801f928 	.word	0x0801f928

08011c98 <_UInt32__get_serialized_size>:
 8011c98:	b510      	push	{r4, lr}
 8011c9a:	b128      	cbz	r0, 8011ca8 <_UInt32__get_serialized_size+0x10>
 8011c9c:	2104      	movs	r1, #4
 8011c9e:	2000      	movs	r0, #0
 8011ca0:	f000 ff82 	bl	8012ba8 <ucdr_alignment>
 8011ca4:	3004      	adds	r0, #4
 8011ca6:	bd10      	pop	{r4, pc}
 8011ca8:	4b05      	ldr	r3, [pc, #20]	; (8011cc0 <_UInt32__get_serialized_size+0x28>)
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	4604      	mov	r4, r0
 8011cae:	68db      	ldr	r3, [r3, #12]
 8011cb0:	4804      	ldr	r0, [pc, #16]	; (8011cc4 <_UInt32__get_serialized_size+0x2c>)
 8011cb2:	221b      	movs	r2, #27
 8011cb4:	2101      	movs	r1, #1
 8011cb6:	f008 fa35 	bl	801a124 <fwrite>
 8011cba:	4620      	mov	r0, r4
 8011cbc:	bd10      	pop	{r4, pc}
 8011cbe:	bf00      	nop
 8011cc0:	200001b8 	.word	0x200001b8
 8011cc4:	0801f928 	.word	0x0801f928

08011cc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt32>:
 8011cc8:	4800      	ldr	r0, [pc, #0]	; (8011ccc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt32+0x4>)
 8011cca:	4770      	bx	lr
 8011ccc:	2000010c 	.word	0x2000010c

08011cd0 <get_serialized_size_builtin_interfaces__msg__Time>:
 8011cd0:	b538      	push	{r3, r4, r5, lr}
 8011cd2:	b178      	cbz	r0, 8011cf4 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8011cd4:	460d      	mov	r5, r1
 8011cd6:	4628      	mov	r0, r5
 8011cd8:	2104      	movs	r1, #4
 8011cda:	f000 ff65 	bl	8012ba8 <ucdr_alignment>
 8011cde:	1d2c      	adds	r4, r5, #4
 8011ce0:	4404      	add	r4, r0
 8011ce2:	4620      	mov	r0, r4
 8011ce4:	2104      	movs	r1, #4
 8011ce6:	f000 ff5f 	bl	8012ba8 <ucdr_alignment>
 8011cea:	f1c5 0504 	rsb	r5, r5, #4
 8011cee:	4428      	add	r0, r5
 8011cf0:	4420      	add	r0, r4
 8011cf2:	bd38      	pop	{r3, r4, r5, pc}
 8011cf4:	4b05      	ldr	r3, [pc, #20]	; (8011d0c <get_serialized_size_builtin_interfaces__msg__Time+0x3c>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	4604      	mov	r4, r0
 8011cfa:	68db      	ldr	r3, [r3, #12]
 8011cfc:	4804      	ldr	r0, [pc, #16]	; (8011d10 <get_serialized_size_builtin_interfaces__msg__Time+0x40>)
 8011cfe:	221b      	movs	r2, #27
 8011d00:	2101      	movs	r1, #1
 8011d02:	f008 fa0f 	bl	801a124 <fwrite>
 8011d06:	4620      	mov	r0, r4
 8011d08:	bd38      	pop	{r3, r4, r5, pc}
 8011d0a:	bf00      	nop
 8011d0c:	200001b8 	.word	0x200001b8
 8011d10:	0801f928 	.word	0x0801f928

08011d14 <_Time__cdr_serialize>:
 8011d14:	b538      	push	{r3, r4, r5, lr}
 8011d16:	4604      	mov	r4, r0
 8011d18:	b150      	cbz	r0, 8011d30 <_Time__cdr_serialize+0x1c>
 8011d1a:	460d      	mov	r5, r1
 8011d1c:	6801      	ldr	r1, [r0, #0]
 8011d1e:	4628      	mov	r0, r5
 8011d20:	f000 fd1a 	bl	8012758 <ucdr_serialize_int32_t>
 8011d24:	6861      	ldr	r1, [r4, #4]
 8011d26:	4628      	mov	r0, r5
 8011d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d2c:	f000 bbb6 	b.w	801249c <ucdr_serialize_uint32_t>
 8011d30:	4b04      	ldr	r3, [pc, #16]	; (8011d44 <_Time__cdr_serialize+0x30>)
 8011d32:	4805      	ldr	r0, [pc, #20]	; (8011d48 <_Time__cdr_serialize+0x34>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	221b      	movs	r2, #27
 8011d38:	68db      	ldr	r3, [r3, #12]
 8011d3a:	2101      	movs	r1, #1
 8011d3c:	f008 f9f2 	bl	801a124 <fwrite>
 8011d40:	4620      	mov	r0, r4
 8011d42:	bd38      	pop	{r3, r4, r5, pc}
 8011d44:	200001b8 	.word	0x200001b8
 8011d48:	0801f928 	.word	0x0801f928

08011d4c <_Time__cdr_deserialize>:
 8011d4c:	b538      	push	{r3, r4, r5, lr}
 8011d4e:	460c      	mov	r4, r1
 8011d50:	b141      	cbz	r1, 8011d64 <_Time__cdr_deserialize+0x18>
 8011d52:	4605      	mov	r5, r0
 8011d54:	f000 fd30 	bl	80127b8 <ucdr_deserialize_int32_t>
 8011d58:	1d21      	adds	r1, r4, #4
 8011d5a:	4628      	mov	r0, r5
 8011d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d60:	f000 bbfc 	b.w	801255c <ucdr_deserialize_uint32_t>
 8011d64:	4b04      	ldr	r3, [pc, #16]	; (8011d78 <_Time__cdr_deserialize+0x2c>)
 8011d66:	4805      	ldr	r0, [pc, #20]	; (8011d7c <_Time__cdr_deserialize+0x30>)
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	221b      	movs	r2, #27
 8011d6c:	68db      	ldr	r3, [r3, #12]
 8011d6e:	2101      	movs	r1, #1
 8011d70:	f008 f9d8 	bl	801a124 <fwrite>
 8011d74:	4620      	mov	r0, r4
 8011d76:	bd38      	pop	{r3, r4, r5, pc}
 8011d78:	200001b8 	.word	0x200001b8
 8011d7c:	0801f928 	.word	0x0801f928

08011d80 <_Time__max_serialized_size>:
 8011d80:	b510      	push	{r4, lr}
 8011d82:	2104      	movs	r1, #4
 8011d84:	2000      	movs	r0, #0
 8011d86:	f000 ff0f 	bl	8012ba8 <ucdr_alignment>
 8011d8a:	1d04      	adds	r4, r0, #4
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	2104      	movs	r1, #4
 8011d90:	f000 ff0a 	bl	8012ba8 <ucdr_alignment>
 8011d94:	3004      	adds	r0, #4
 8011d96:	4420      	add	r0, r4
 8011d98:	bd10      	pop	{r4, pc}
 8011d9a:	bf00      	nop

08011d9c <_Time__get_serialized_size>:
 8011d9c:	b510      	push	{r4, lr}
 8011d9e:	b158      	cbz	r0, 8011db8 <_Time__get_serialized_size+0x1c>
 8011da0:	2104      	movs	r1, #4
 8011da2:	2000      	movs	r0, #0
 8011da4:	f000 ff00 	bl	8012ba8 <ucdr_alignment>
 8011da8:	1d04      	adds	r4, r0, #4
 8011daa:	4620      	mov	r0, r4
 8011dac:	2104      	movs	r1, #4
 8011dae:	f000 fefb 	bl	8012ba8 <ucdr_alignment>
 8011db2:	3004      	adds	r0, #4
 8011db4:	4420      	add	r0, r4
 8011db6:	bd10      	pop	{r4, pc}
 8011db8:	4b05      	ldr	r3, [pc, #20]	; (8011dd0 <_Time__get_serialized_size+0x34>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	4604      	mov	r4, r0
 8011dbe:	68db      	ldr	r3, [r3, #12]
 8011dc0:	4804      	ldr	r0, [pc, #16]	; (8011dd4 <_Time__get_serialized_size+0x38>)
 8011dc2:	221b      	movs	r2, #27
 8011dc4:	2101      	movs	r1, #1
 8011dc6:	f008 f9ad 	bl	801a124 <fwrite>
 8011dca:	4620      	mov	r0, r4
 8011dcc:	bd10      	pop	{r4, pc}
 8011dce:	bf00      	nop
 8011dd0:	200001b8 	.word	0x200001b8
 8011dd4:	0801f928 	.word	0x0801f928

08011dd8 <max_serialized_size_builtin_interfaces__msg__Time>:
 8011dd8:	b538      	push	{r3, r4, r5, lr}
 8011dda:	2301      	movs	r3, #1
 8011ddc:	7003      	strb	r3, [r0, #0]
 8011dde:	460c      	mov	r4, r1
 8011de0:	4608      	mov	r0, r1
 8011de2:	2104      	movs	r1, #4
 8011de4:	f000 fee0 	bl	8012ba8 <ucdr_alignment>
 8011de8:	1d25      	adds	r5, r4, #4
 8011dea:	4405      	add	r5, r0
 8011dec:	4628      	mov	r0, r5
 8011dee:	2104      	movs	r1, #4
 8011df0:	f000 feda 	bl	8012ba8 <ucdr_alignment>
 8011df4:	f1c4 0404 	rsb	r4, r4, #4
 8011df8:	4420      	add	r0, r4
 8011dfa:	4428      	add	r0, r5
 8011dfc:	bd38      	pop	{r3, r4, r5, pc}
 8011dfe:	bf00      	nop

08011e00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8011e00:	4800      	ldr	r0, [pc, #0]	; (8011e04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8011e02:	4770      	bx	lr
 8011e04:	20000134 	.word	0x20000134

08011e08 <ucdr_serialize_endian_array_char>:
 8011e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e0c:	4619      	mov	r1, r3
 8011e0e:	461e      	mov	r6, r3
 8011e10:	4690      	mov	r8, r2
 8011e12:	4604      	mov	r4, r0
 8011e14:	f000 fe72 	bl	8012afc <ucdr_check_buffer_available_for>
 8011e18:	b9e0      	cbnz	r0, 8011e54 <ucdr_serialize_endian_array_char+0x4c>
 8011e1a:	4637      	mov	r7, r6
 8011e1c:	e009      	b.n	8011e32 <ucdr_serialize_endian_array_char+0x2a>
 8011e1e:	68a0      	ldr	r0, [r4, #8]
 8011e20:	f008 fa0c 	bl	801a23c <memcpy>
 8011e24:	68a2      	ldr	r2, [r4, #8]
 8011e26:	6923      	ldr	r3, [r4, #16]
 8011e28:	442a      	add	r2, r5
 8011e2a:	442b      	add	r3, r5
 8011e2c:	1b7f      	subs	r7, r7, r5
 8011e2e:	60a2      	str	r2, [r4, #8]
 8011e30:	6123      	str	r3, [r4, #16]
 8011e32:	2201      	movs	r2, #1
 8011e34:	4639      	mov	r1, r7
 8011e36:	4620      	mov	r0, r4
 8011e38:	f000 fee8 	bl	8012c0c <ucdr_check_final_buffer_behavior_array>
 8011e3c:	1bf1      	subs	r1, r6, r7
 8011e3e:	4441      	add	r1, r8
 8011e40:	4605      	mov	r5, r0
 8011e42:	4602      	mov	r2, r0
 8011e44:	2800      	cmp	r0, #0
 8011e46:	d1ea      	bne.n	8011e1e <ucdr_serialize_endian_array_char+0x16>
 8011e48:	2301      	movs	r3, #1
 8011e4a:	7da0      	ldrb	r0, [r4, #22]
 8011e4c:	7563      	strb	r3, [r4, #21]
 8011e4e:	4058      	eors	r0, r3
 8011e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e54:	4632      	mov	r2, r6
 8011e56:	68a0      	ldr	r0, [r4, #8]
 8011e58:	4641      	mov	r1, r8
 8011e5a:	f008 f9ef 	bl	801a23c <memcpy>
 8011e5e:	68a2      	ldr	r2, [r4, #8]
 8011e60:	6923      	ldr	r3, [r4, #16]
 8011e62:	4432      	add	r2, r6
 8011e64:	4433      	add	r3, r6
 8011e66:	60a2      	str	r2, [r4, #8]
 8011e68:	6123      	str	r3, [r4, #16]
 8011e6a:	e7ed      	b.n	8011e48 <ucdr_serialize_endian_array_char+0x40>

08011e6c <ucdr_deserialize_endian_array_char>:
 8011e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e70:	4619      	mov	r1, r3
 8011e72:	461e      	mov	r6, r3
 8011e74:	4690      	mov	r8, r2
 8011e76:	4604      	mov	r4, r0
 8011e78:	f000 fe40 	bl	8012afc <ucdr_check_buffer_available_for>
 8011e7c:	b9e0      	cbnz	r0, 8011eb8 <ucdr_deserialize_endian_array_char+0x4c>
 8011e7e:	4637      	mov	r7, r6
 8011e80:	e009      	b.n	8011e96 <ucdr_deserialize_endian_array_char+0x2a>
 8011e82:	68a1      	ldr	r1, [r4, #8]
 8011e84:	f008 f9da 	bl	801a23c <memcpy>
 8011e88:	68a2      	ldr	r2, [r4, #8]
 8011e8a:	6923      	ldr	r3, [r4, #16]
 8011e8c:	442a      	add	r2, r5
 8011e8e:	442b      	add	r3, r5
 8011e90:	1b7f      	subs	r7, r7, r5
 8011e92:	60a2      	str	r2, [r4, #8]
 8011e94:	6123      	str	r3, [r4, #16]
 8011e96:	2201      	movs	r2, #1
 8011e98:	4639      	mov	r1, r7
 8011e9a:	4620      	mov	r0, r4
 8011e9c:	f000 feb6 	bl	8012c0c <ucdr_check_final_buffer_behavior_array>
 8011ea0:	4605      	mov	r5, r0
 8011ea2:	1bf0      	subs	r0, r6, r7
 8011ea4:	4440      	add	r0, r8
 8011ea6:	462a      	mov	r2, r5
 8011ea8:	2d00      	cmp	r5, #0
 8011eaa:	d1ea      	bne.n	8011e82 <ucdr_deserialize_endian_array_char+0x16>
 8011eac:	2301      	movs	r3, #1
 8011eae:	7da0      	ldrb	r0, [r4, #22]
 8011eb0:	7563      	strb	r3, [r4, #21]
 8011eb2:	4058      	eors	r0, r3
 8011eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eb8:	4632      	mov	r2, r6
 8011eba:	68a1      	ldr	r1, [r4, #8]
 8011ebc:	4640      	mov	r0, r8
 8011ebe:	f008 f9bd 	bl	801a23c <memcpy>
 8011ec2:	68a2      	ldr	r2, [r4, #8]
 8011ec4:	6923      	ldr	r3, [r4, #16]
 8011ec6:	4432      	add	r2, r6
 8011ec8:	4433      	add	r3, r6
 8011eca:	60a2      	str	r2, [r4, #8]
 8011ecc:	6123      	str	r3, [r4, #16]
 8011ece:	e7ed      	b.n	8011eac <ucdr_deserialize_endian_array_char+0x40>

08011ed0 <ucdr_serialize_array_uint8_t>:
 8011ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed4:	4688      	mov	r8, r1
 8011ed6:	4611      	mov	r1, r2
 8011ed8:	4616      	mov	r6, r2
 8011eda:	4604      	mov	r4, r0
 8011edc:	f000 fe0e 	bl	8012afc <ucdr_check_buffer_available_for>
 8011ee0:	b9e0      	cbnz	r0, 8011f1c <ucdr_serialize_array_uint8_t+0x4c>
 8011ee2:	4637      	mov	r7, r6
 8011ee4:	e009      	b.n	8011efa <ucdr_serialize_array_uint8_t+0x2a>
 8011ee6:	68a0      	ldr	r0, [r4, #8]
 8011ee8:	f008 f9a8 	bl	801a23c <memcpy>
 8011eec:	68a2      	ldr	r2, [r4, #8]
 8011eee:	6923      	ldr	r3, [r4, #16]
 8011ef0:	442a      	add	r2, r5
 8011ef2:	442b      	add	r3, r5
 8011ef4:	1b7f      	subs	r7, r7, r5
 8011ef6:	60a2      	str	r2, [r4, #8]
 8011ef8:	6123      	str	r3, [r4, #16]
 8011efa:	2201      	movs	r2, #1
 8011efc:	4639      	mov	r1, r7
 8011efe:	4620      	mov	r0, r4
 8011f00:	f000 fe84 	bl	8012c0c <ucdr_check_final_buffer_behavior_array>
 8011f04:	1bf1      	subs	r1, r6, r7
 8011f06:	4441      	add	r1, r8
 8011f08:	4605      	mov	r5, r0
 8011f0a:	4602      	mov	r2, r0
 8011f0c:	2800      	cmp	r0, #0
 8011f0e:	d1ea      	bne.n	8011ee6 <ucdr_serialize_array_uint8_t+0x16>
 8011f10:	2301      	movs	r3, #1
 8011f12:	7da0      	ldrb	r0, [r4, #22]
 8011f14:	7563      	strb	r3, [r4, #21]
 8011f16:	4058      	eors	r0, r3
 8011f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f1c:	4632      	mov	r2, r6
 8011f1e:	68a0      	ldr	r0, [r4, #8]
 8011f20:	4641      	mov	r1, r8
 8011f22:	f008 f98b 	bl	801a23c <memcpy>
 8011f26:	68a3      	ldr	r3, [r4, #8]
 8011f28:	6922      	ldr	r2, [r4, #16]
 8011f2a:	4433      	add	r3, r6
 8011f2c:	4432      	add	r2, r6
 8011f2e:	60a3      	str	r3, [r4, #8]
 8011f30:	6122      	str	r2, [r4, #16]
 8011f32:	e7ed      	b.n	8011f10 <ucdr_serialize_array_uint8_t+0x40>

08011f34 <ucdr_serialize_endian_array_uint8_t>:
 8011f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f38:	4619      	mov	r1, r3
 8011f3a:	461e      	mov	r6, r3
 8011f3c:	4690      	mov	r8, r2
 8011f3e:	4604      	mov	r4, r0
 8011f40:	f000 fddc 	bl	8012afc <ucdr_check_buffer_available_for>
 8011f44:	b9e0      	cbnz	r0, 8011f80 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8011f46:	4637      	mov	r7, r6
 8011f48:	e009      	b.n	8011f5e <ucdr_serialize_endian_array_uint8_t+0x2a>
 8011f4a:	68a0      	ldr	r0, [r4, #8]
 8011f4c:	f008 f976 	bl	801a23c <memcpy>
 8011f50:	68a2      	ldr	r2, [r4, #8]
 8011f52:	6923      	ldr	r3, [r4, #16]
 8011f54:	442a      	add	r2, r5
 8011f56:	442b      	add	r3, r5
 8011f58:	1b7f      	subs	r7, r7, r5
 8011f5a:	60a2      	str	r2, [r4, #8]
 8011f5c:	6123      	str	r3, [r4, #16]
 8011f5e:	2201      	movs	r2, #1
 8011f60:	4639      	mov	r1, r7
 8011f62:	4620      	mov	r0, r4
 8011f64:	f000 fe52 	bl	8012c0c <ucdr_check_final_buffer_behavior_array>
 8011f68:	1bf1      	subs	r1, r6, r7
 8011f6a:	4441      	add	r1, r8
 8011f6c:	4605      	mov	r5, r0
 8011f6e:	4602      	mov	r2, r0
 8011f70:	2800      	cmp	r0, #0
 8011f72:	d1ea      	bne.n	8011f4a <ucdr_serialize_endian_array_uint8_t+0x16>
 8011f74:	2301      	movs	r3, #1
 8011f76:	7da0      	ldrb	r0, [r4, #22]
 8011f78:	7563      	strb	r3, [r4, #21]
 8011f7a:	4058      	eors	r0, r3
 8011f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f80:	4632      	mov	r2, r6
 8011f82:	68a0      	ldr	r0, [r4, #8]
 8011f84:	4641      	mov	r1, r8
 8011f86:	f008 f959 	bl	801a23c <memcpy>
 8011f8a:	68a2      	ldr	r2, [r4, #8]
 8011f8c:	6923      	ldr	r3, [r4, #16]
 8011f8e:	4432      	add	r2, r6
 8011f90:	4433      	add	r3, r6
 8011f92:	60a2      	str	r2, [r4, #8]
 8011f94:	6123      	str	r3, [r4, #16]
 8011f96:	e7ed      	b.n	8011f74 <ucdr_serialize_endian_array_uint8_t+0x40>

08011f98 <ucdr_deserialize_array_uint8_t>:
 8011f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f9c:	4688      	mov	r8, r1
 8011f9e:	4611      	mov	r1, r2
 8011fa0:	4616      	mov	r6, r2
 8011fa2:	4604      	mov	r4, r0
 8011fa4:	f000 fdaa 	bl	8012afc <ucdr_check_buffer_available_for>
 8011fa8:	b9e0      	cbnz	r0, 8011fe4 <ucdr_deserialize_array_uint8_t+0x4c>
 8011faa:	4637      	mov	r7, r6
 8011fac:	e009      	b.n	8011fc2 <ucdr_deserialize_array_uint8_t+0x2a>
 8011fae:	68a1      	ldr	r1, [r4, #8]
 8011fb0:	f008 f944 	bl	801a23c <memcpy>
 8011fb4:	68a2      	ldr	r2, [r4, #8]
 8011fb6:	6923      	ldr	r3, [r4, #16]
 8011fb8:	442a      	add	r2, r5
 8011fba:	442b      	add	r3, r5
 8011fbc:	1b7f      	subs	r7, r7, r5
 8011fbe:	60a2      	str	r2, [r4, #8]
 8011fc0:	6123      	str	r3, [r4, #16]
 8011fc2:	2201      	movs	r2, #1
 8011fc4:	4639      	mov	r1, r7
 8011fc6:	4620      	mov	r0, r4
 8011fc8:	f000 fe20 	bl	8012c0c <ucdr_check_final_buffer_behavior_array>
 8011fcc:	4605      	mov	r5, r0
 8011fce:	1bf0      	subs	r0, r6, r7
 8011fd0:	4440      	add	r0, r8
 8011fd2:	462a      	mov	r2, r5
 8011fd4:	2d00      	cmp	r5, #0
 8011fd6:	d1ea      	bne.n	8011fae <ucdr_deserialize_array_uint8_t+0x16>
 8011fd8:	2301      	movs	r3, #1
 8011fda:	7da0      	ldrb	r0, [r4, #22]
 8011fdc:	7563      	strb	r3, [r4, #21]
 8011fde:	4058      	eors	r0, r3
 8011fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fe4:	4632      	mov	r2, r6
 8011fe6:	68a1      	ldr	r1, [r4, #8]
 8011fe8:	4640      	mov	r0, r8
 8011fea:	f008 f927 	bl	801a23c <memcpy>
 8011fee:	68a3      	ldr	r3, [r4, #8]
 8011ff0:	6922      	ldr	r2, [r4, #16]
 8011ff2:	4433      	add	r3, r6
 8011ff4:	4432      	add	r2, r6
 8011ff6:	60a3      	str	r3, [r4, #8]
 8011ff8:	6122      	str	r2, [r4, #16]
 8011ffa:	e7ed      	b.n	8011fd8 <ucdr_deserialize_array_uint8_t+0x40>

08011ffc <ucdr_serialize_endian_array_uint16_t>:
 8011ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012000:	4605      	mov	r5, r0
 8012002:	460f      	mov	r7, r1
 8012004:	2102      	movs	r1, #2
 8012006:	4614      	mov	r4, r2
 8012008:	461e      	mov	r6, r3
 801200a:	f000 fdd5 	bl	8012bb8 <ucdr_buffer_alignment>
 801200e:	68aa      	ldr	r2, [r5, #8]
 8012010:	692b      	ldr	r3, [r5, #16]
 8012012:	4402      	add	r2, r0
 8012014:	2f01      	cmp	r7, #1
 8012016:	4418      	add	r0, r3
 8012018:	60aa      	str	r2, [r5, #8]
 801201a:	6128      	str	r0, [r5, #16]
 801201c:	d010      	beq.n	8012040 <ucdr_serialize_endian_array_uint16_t+0x44>
 801201e:	b156      	cbz	r6, 8012036 <ucdr_serialize_endian_array_uint16_t+0x3a>
 8012020:	3c02      	subs	r4, #2
 8012022:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 8012026:	f834 2f02 	ldrh.w	r2, [r4, #2]!
 801202a:	4639      	mov	r1, r7
 801202c:	4628      	mov	r0, r5
 801202e:	f000 f9b9 	bl	80123a4 <ucdr_serialize_endian_uint16_t>
 8012032:	42b4      	cmp	r4, r6
 8012034:	d1f7      	bne.n	8012026 <ucdr_serialize_endian_array_uint16_t+0x2a>
 8012036:	7da8      	ldrb	r0, [r5, #22]
 8012038:	f080 0001 	eor.w	r0, r0, #1
 801203c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012040:	0076      	lsls	r6, r6, #1
 8012042:	4631      	mov	r1, r6
 8012044:	4628      	mov	r0, r5
 8012046:	f000 fd59 	bl	8012afc <ucdr_check_buffer_available_for>
 801204a:	b9f8      	cbnz	r0, 801208c <ucdr_serialize_endian_array_uint16_t+0x90>
 801204c:	46b0      	mov	r8, r6
 801204e:	e00a      	b.n	8012066 <ucdr_serialize_endian_array_uint16_t+0x6a>
 8012050:	68a8      	ldr	r0, [r5, #8]
 8012052:	f008 f8f3 	bl	801a23c <memcpy>
 8012056:	68aa      	ldr	r2, [r5, #8]
 8012058:	692b      	ldr	r3, [r5, #16]
 801205a:	443a      	add	r2, r7
 801205c:	443b      	add	r3, r7
 801205e:	eba8 0807 	sub.w	r8, r8, r7
 8012062:	60aa      	str	r2, [r5, #8]
 8012064:	612b      	str	r3, [r5, #16]
 8012066:	2202      	movs	r2, #2
 8012068:	4641      	mov	r1, r8
 801206a:	4628      	mov	r0, r5
 801206c:	f000 fdce 	bl	8012c0c <ucdr_check_final_buffer_behavior_array>
 8012070:	eba6 0108 	sub.w	r1, r6, r8
 8012074:	4421      	add	r1, r4
 8012076:	4607      	mov	r7, r0
 8012078:	4602      	mov	r2, r0
 801207a:	2800      	cmp	r0, #0
 801207c:	d1e8      	bne.n	8012050 <ucdr_serialize_endian_array_uint16_t+0x54>
 801207e:	7da8      	ldrb	r0, [r5, #22]
 8012080:	2302      	movs	r3, #2
 8012082:	756b      	strb	r3, [r5, #21]
 8012084:	f080 0001 	eor.w	r0, r0, #1
 8012088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801208c:	4632      	mov	r2, r6
 801208e:	68a8      	ldr	r0, [r5, #8]
 8012090:	4621      	mov	r1, r4
 8012092:	f008 f8d3 	bl	801a23c <memcpy>
 8012096:	68aa      	ldr	r2, [r5, #8]
 8012098:	692b      	ldr	r3, [r5, #16]
 801209a:	4432      	add	r2, r6
 801209c:	441e      	add	r6, r3
 801209e:	60aa      	str	r2, [r5, #8]
 80120a0:	612e      	str	r6, [r5, #16]
 80120a2:	e7ec      	b.n	801207e <ucdr_serialize_endian_array_uint16_t+0x82>

080120a4 <ucdr_deserialize_endian_array_uint16_t>:
 80120a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120a8:	4605      	mov	r5, r0
 80120aa:	460f      	mov	r7, r1
 80120ac:	2102      	movs	r1, #2
 80120ae:	4614      	mov	r4, r2
 80120b0:	461e      	mov	r6, r3
 80120b2:	f000 fd81 	bl	8012bb8 <ucdr_buffer_alignment>
 80120b6:	68aa      	ldr	r2, [r5, #8]
 80120b8:	692b      	ldr	r3, [r5, #16]
 80120ba:	4402      	add	r2, r0
 80120bc:	2f01      	cmp	r7, #1
 80120be:	4418      	add	r0, r3
 80120c0:	60aa      	str	r2, [r5, #8]
 80120c2:	6128      	str	r0, [r5, #16]
 80120c4:	d00f      	beq.n	80120e6 <ucdr_deserialize_endian_array_uint16_t+0x42>
 80120c6:	b14e      	cbz	r6, 80120dc <ucdr_deserialize_endian_array_uint16_t+0x38>
 80120c8:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 80120cc:	4622      	mov	r2, r4
 80120ce:	4639      	mov	r1, r7
 80120d0:	3402      	adds	r4, #2
 80120d2:	4628      	mov	r0, r5
 80120d4:	f000 f9b8 	bl	8012448 <ucdr_deserialize_endian_uint16_t>
 80120d8:	42a6      	cmp	r6, r4
 80120da:	d1f7      	bne.n	80120cc <ucdr_deserialize_endian_array_uint16_t+0x28>
 80120dc:	7da8      	ldrb	r0, [r5, #22]
 80120de:	f080 0001 	eor.w	r0, r0, #1
 80120e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120e6:	0076      	lsls	r6, r6, #1
 80120e8:	4631      	mov	r1, r6
 80120ea:	4628      	mov	r0, r5
 80120ec:	f000 fd06 	bl	8012afc <ucdr_check_buffer_available_for>
 80120f0:	b9f8      	cbnz	r0, 8012132 <ucdr_deserialize_endian_array_uint16_t+0x8e>
 80120f2:	46b0      	mov	r8, r6
 80120f4:	e00a      	b.n	801210c <ucdr_deserialize_endian_array_uint16_t+0x68>
 80120f6:	68a9      	ldr	r1, [r5, #8]
 80120f8:	f008 f8a0 	bl	801a23c <memcpy>
 80120fc:	68aa      	ldr	r2, [r5, #8]
 80120fe:	692b      	ldr	r3, [r5, #16]
 8012100:	443a      	add	r2, r7
 8012102:	443b      	add	r3, r7
 8012104:	eba8 0807 	sub.w	r8, r8, r7
 8012108:	60aa      	str	r2, [r5, #8]
 801210a:	612b      	str	r3, [r5, #16]
 801210c:	2202      	movs	r2, #2
 801210e:	4641      	mov	r1, r8
 8012110:	4628      	mov	r0, r5
 8012112:	f000 fd7b 	bl	8012c0c <ucdr_check_final_buffer_behavior_array>
 8012116:	4607      	mov	r7, r0
 8012118:	eba6 0008 	sub.w	r0, r6, r8
 801211c:	4420      	add	r0, r4
 801211e:	463a      	mov	r2, r7
 8012120:	2f00      	cmp	r7, #0
 8012122:	d1e8      	bne.n	80120f6 <ucdr_deserialize_endian_array_uint16_t+0x52>
 8012124:	7da8      	ldrb	r0, [r5, #22]
 8012126:	2302      	movs	r3, #2
 8012128:	756b      	strb	r3, [r5, #21]
 801212a:	f080 0001 	eor.w	r0, r0, #1
 801212e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012132:	4632      	mov	r2, r6
 8012134:	68a9      	ldr	r1, [r5, #8]
 8012136:	4620      	mov	r0, r4
 8012138:	f008 f880 	bl	801a23c <memcpy>
 801213c:	68aa      	ldr	r2, [r5, #8]
 801213e:	692b      	ldr	r3, [r5, #16]
 8012140:	4432      	add	r2, r6
 8012142:	441e      	add	r6, r3
 8012144:	60aa      	str	r2, [r5, #8]
 8012146:	612e      	str	r6, [r5, #16]
 8012148:	e7ec      	b.n	8012124 <ucdr_deserialize_endian_array_uint16_t+0x80>
 801214a:	bf00      	nop

0801214c <ucdr_serialize_array_double>:
 801214c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012150:	4604      	mov	r4, r0
 8012152:	460d      	mov	r5, r1
 8012154:	2108      	movs	r1, #8
 8012156:	4616      	mov	r6, r2
 8012158:	f000 fd2e 	bl	8012bb8 <ucdr_buffer_alignment>
 801215c:	68a2      	ldr	r2, [r4, #8]
 801215e:	6923      	ldr	r3, [r4, #16]
 8012160:	7d21      	ldrb	r1, [r4, #20]
 8012162:	4402      	add	r2, r0
 8012164:	2901      	cmp	r1, #1
 8012166:	4418      	add	r0, r3
 8012168:	60a2      	str	r2, [r4, #8]
 801216a:	6120      	str	r0, [r4, #16]
 801216c:	d010      	beq.n	8012190 <ucdr_serialize_array_double+0x44>
 801216e:	b156      	cbz	r6, 8012186 <ucdr_serialize_array_double+0x3a>
 8012170:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8012174:	e000      	b.n	8012178 <ucdr_serialize_array_double+0x2c>
 8012176:	7d21      	ldrb	r1, [r4, #20]
 8012178:	ecb5 0b02 	vldmia	r5!, {d0}
 801217c:	4620      	mov	r0, r4
 801217e:	f000 fbf7 	bl	8012970 <ucdr_serialize_endian_double>
 8012182:	42ae      	cmp	r6, r5
 8012184:	d1f7      	bne.n	8012176 <ucdr_serialize_array_double+0x2a>
 8012186:	7da0      	ldrb	r0, [r4, #22]
 8012188:	f080 0001 	eor.w	r0, r0, #1
 801218c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012190:	00f7      	lsls	r7, r6, #3
 8012192:	4639      	mov	r1, r7
 8012194:	4620      	mov	r0, r4
 8012196:	f000 fcb1 	bl	8012afc <ucdr_check_buffer_available_for>
 801219a:	b9f8      	cbnz	r0, 80121dc <ucdr_serialize_array_double+0x90>
 801219c:	46b8      	mov	r8, r7
 801219e:	e00a      	b.n	80121b6 <ucdr_serialize_array_double+0x6a>
 80121a0:	68a0      	ldr	r0, [r4, #8]
 80121a2:	f008 f84b 	bl	801a23c <memcpy>
 80121a6:	68a2      	ldr	r2, [r4, #8]
 80121a8:	6923      	ldr	r3, [r4, #16]
 80121aa:	4432      	add	r2, r6
 80121ac:	4433      	add	r3, r6
 80121ae:	eba8 0806 	sub.w	r8, r8, r6
 80121b2:	60a2      	str	r2, [r4, #8]
 80121b4:	6123      	str	r3, [r4, #16]
 80121b6:	2208      	movs	r2, #8
 80121b8:	4641      	mov	r1, r8
 80121ba:	4620      	mov	r0, r4
 80121bc:	f000 fd26 	bl	8012c0c <ucdr_check_final_buffer_behavior_array>
 80121c0:	eba7 0108 	sub.w	r1, r7, r8
 80121c4:	4429      	add	r1, r5
 80121c6:	4606      	mov	r6, r0
 80121c8:	4602      	mov	r2, r0
 80121ca:	2800      	cmp	r0, #0
 80121cc:	d1e8      	bne.n	80121a0 <ucdr_serialize_array_double+0x54>
 80121ce:	7da0      	ldrb	r0, [r4, #22]
 80121d0:	2308      	movs	r3, #8
 80121d2:	7563      	strb	r3, [r4, #21]
 80121d4:	f080 0001 	eor.w	r0, r0, #1
 80121d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121dc:	463a      	mov	r2, r7
 80121de:	68a0      	ldr	r0, [r4, #8]
 80121e0:	4629      	mov	r1, r5
 80121e2:	f008 f82b 	bl	801a23c <memcpy>
 80121e6:	68a2      	ldr	r2, [r4, #8]
 80121e8:	6923      	ldr	r3, [r4, #16]
 80121ea:	443a      	add	r2, r7
 80121ec:	443b      	add	r3, r7
 80121ee:	60a2      	str	r2, [r4, #8]
 80121f0:	6123      	str	r3, [r4, #16]
 80121f2:	e7ec      	b.n	80121ce <ucdr_serialize_array_double+0x82>

080121f4 <ucdr_deserialize_array_double>:
 80121f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121f8:	4605      	mov	r5, r0
 80121fa:	460c      	mov	r4, r1
 80121fc:	2108      	movs	r1, #8
 80121fe:	4616      	mov	r6, r2
 8012200:	f000 fcda 	bl	8012bb8 <ucdr_buffer_alignment>
 8012204:	68aa      	ldr	r2, [r5, #8]
 8012206:	692b      	ldr	r3, [r5, #16]
 8012208:	7d29      	ldrb	r1, [r5, #20]
 801220a:	4402      	add	r2, r0
 801220c:	2901      	cmp	r1, #1
 801220e:	4418      	add	r0, r3
 8012210:	60aa      	str	r2, [r5, #8]
 8012212:	6128      	str	r0, [r5, #16]
 8012214:	d010      	beq.n	8012238 <ucdr_deserialize_array_double+0x44>
 8012216:	b156      	cbz	r6, 801222e <ucdr_deserialize_array_double+0x3a>
 8012218:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 801221c:	e000      	b.n	8012220 <ucdr_deserialize_array_double+0x2c>
 801221e:	7d29      	ldrb	r1, [r5, #20]
 8012220:	4622      	mov	r2, r4
 8012222:	4628      	mov	r0, r5
 8012224:	3408      	adds	r4, #8
 8012226:	f000 fc2b 	bl	8012a80 <ucdr_deserialize_endian_double>
 801222a:	42a6      	cmp	r6, r4
 801222c:	d1f7      	bne.n	801221e <ucdr_deserialize_array_double+0x2a>
 801222e:	7da8      	ldrb	r0, [r5, #22]
 8012230:	f080 0001 	eor.w	r0, r0, #1
 8012234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012238:	00f7      	lsls	r7, r6, #3
 801223a:	4639      	mov	r1, r7
 801223c:	4628      	mov	r0, r5
 801223e:	f000 fc5d 	bl	8012afc <ucdr_check_buffer_available_for>
 8012242:	b9f8      	cbnz	r0, 8012284 <ucdr_deserialize_array_double+0x90>
 8012244:	46b8      	mov	r8, r7
 8012246:	e00a      	b.n	801225e <ucdr_deserialize_array_double+0x6a>
 8012248:	68a9      	ldr	r1, [r5, #8]
 801224a:	f007 fff7 	bl	801a23c <memcpy>
 801224e:	68aa      	ldr	r2, [r5, #8]
 8012250:	692b      	ldr	r3, [r5, #16]
 8012252:	4432      	add	r2, r6
 8012254:	4433      	add	r3, r6
 8012256:	eba8 0806 	sub.w	r8, r8, r6
 801225a:	60aa      	str	r2, [r5, #8]
 801225c:	612b      	str	r3, [r5, #16]
 801225e:	2208      	movs	r2, #8
 8012260:	4641      	mov	r1, r8
 8012262:	4628      	mov	r0, r5
 8012264:	f000 fcd2 	bl	8012c0c <ucdr_check_final_buffer_behavior_array>
 8012268:	4606      	mov	r6, r0
 801226a:	eba7 0008 	sub.w	r0, r7, r8
 801226e:	4420      	add	r0, r4
 8012270:	4632      	mov	r2, r6
 8012272:	2e00      	cmp	r6, #0
 8012274:	d1e8      	bne.n	8012248 <ucdr_deserialize_array_double+0x54>
 8012276:	7da8      	ldrb	r0, [r5, #22]
 8012278:	2308      	movs	r3, #8
 801227a:	756b      	strb	r3, [r5, #21]
 801227c:	f080 0001 	eor.w	r0, r0, #1
 8012280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012284:	463a      	mov	r2, r7
 8012286:	68a9      	ldr	r1, [r5, #8]
 8012288:	4620      	mov	r0, r4
 801228a:	f007 ffd7 	bl	801a23c <memcpy>
 801228e:	68aa      	ldr	r2, [r5, #8]
 8012290:	692b      	ldr	r3, [r5, #16]
 8012292:	443a      	add	r2, r7
 8012294:	443b      	add	r3, r7
 8012296:	60aa      	str	r2, [r5, #8]
 8012298:	612b      	str	r3, [r5, #16]
 801229a:	e7ec      	b.n	8012276 <ucdr_deserialize_array_double+0x82>

0801229c <ucdr_serialize_bool>:
 801229c:	b538      	push	{r3, r4, r5, lr}
 801229e:	460d      	mov	r5, r1
 80122a0:	2101      	movs	r1, #1
 80122a2:	4604      	mov	r4, r0
 80122a4:	f000 fc36 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 80122a8:	b148      	cbz	r0, 80122be <ucdr_serialize_bool+0x22>
 80122aa:	68a3      	ldr	r3, [r4, #8]
 80122ac:	701d      	strb	r5, [r3, #0]
 80122ae:	68a2      	ldr	r2, [r4, #8]
 80122b0:	6923      	ldr	r3, [r4, #16]
 80122b2:	3201      	adds	r2, #1
 80122b4:	3301      	adds	r3, #1
 80122b6:	2101      	movs	r1, #1
 80122b8:	60a2      	str	r2, [r4, #8]
 80122ba:	6123      	str	r3, [r4, #16]
 80122bc:	7561      	strb	r1, [r4, #21]
 80122be:	7da0      	ldrb	r0, [r4, #22]
 80122c0:	f080 0001 	eor.w	r0, r0, #1
 80122c4:	bd38      	pop	{r3, r4, r5, pc}
 80122c6:	bf00      	nop

080122c8 <ucdr_deserialize_bool>:
 80122c8:	b538      	push	{r3, r4, r5, lr}
 80122ca:	460d      	mov	r5, r1
 80122cc:	2101      	movs	r1, #1
 80122ce:	4604      	mov	r4, r0
 80122d0:	f000 fc20 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 80122d4:	b168      	cbz	r0, 80122f2 <ucdr_deserialize_bool+0x2a>
 80122d6:	68a2      	ldr	r2, [r4, #8]
 80122d8:	6923      	ldr	r3, [r4, #16]
 80122da:	f812 1b01 	ldrb.w	r1, [r2], #1
 80122de:	3900      	subs	r1, #0
 80122e0:	f103 0301 	add.w	r3, r3, #1
 80122e4:	bf18      	it	ne
 80122e6:	2101      	movne	r1, #1
 80122e8:	2001      	movs	r0, #1
 80122ea:	7029      	strb	r1, [r5, #0]
 80122ec:	60a2      	str	r2, [r4, #8]
 80122ee:	6123      	str	r3, [r4, #16]
 80122f0:	7560      	strb	r0, [r4, #21]
 80122f2:	7da0      	ldrb	r0, [r4, #22]
 80122f4:	f080 0001 	eor.w	r0, r0, #1
 80122f8:	bd38      	pop	{r3, r4, r5, pc}
 80122fa:	bf00      	nop

080122fc <ucdr_serialize_uint8_t>:
 80122fc:	b538      	push	{r3, r4, r5, lr}
 80122fe:	460d      	mov	r5, r1
 8012300:	2101      	movs	r1, #1
 8012302:	4604      	mov	r4, r0
 8012304:	f000 fc06 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 8012308:	b148      	cbz	r0, 801231e <ucdr_serialize_uint8_t+0x22>
 801230a:	68a3      	ldr	r3, [r4, #8]
 801230c:	701d      	strb	r5, [r3, #0]
 801230e:	68a2      	ldr	r2, [r4, #8]
 8012310:	6923      	ldr	r3, [r4, #16]
 8012312:	3201      	adds	r2, #1
 8012314:	3301      	adds	r3, #1
 8012316:	2101      	movs	r1, #1
 8012318:	60a2      	str	r2, [r4, #8]
 801231a:	6123      	str	r3, [r4, #16]
 801231c:	7561      	strb	r1, [r4, #21]
 801231e:	7da0      	ldrb	r0, [r4, #22]
 8012320:	f080 0001 	eor.w	r0, r0, #1
 8012324:	bd38      	pop	{r3, r4, r5, pc}
 8012326:	bf00      	nop

08012328 <ucdr_deserialize_uint8_t>:
 8012328:	b538      	push	{r3, r4, r5, lr}
 801232a:	460d      	mov	r5, r1
 801232c:	2101      	movs	r1, #1
 801232e:	4604      	mov	r4, r0
 8012330:	f000 fbf0 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 8012334:	b150      	cbz	r0, 801234c <ucdr_deserialize_uint8_t+0x24>
 8012336:	68a3      	ldr	r3, [r4, #8]
 8012338:	781b      	ldrb	r3, [r3, #0]
 801233a:	702b      	strb	r3, [r5, #0]
 801233c:	68a2      	ldr	r2, [r4, #8]
 801233e:	6923      	ldr	r3, [r4, #16]
 8012340:	3201      	adds	r2, #1
 8012342:	3301      	adds	r3, #1
 8012344:	2101      	movs	r1, #1
 8012346:	60a2      	str	r2, [r4, #8]
 8012348:	6123      	str	r3, [r4, #16]
 801234a:	7561      	strb	r1, [r4, #21]
 801234c:	7da0      	ldrb	r0, [r4, #22]
 801234e:	f080 0001 	eor.w	r0, r0, #1
 8012352:	bd38      	pop	{r3, r4, r5, pc}

08012354 <ucdr_serialize_uint16_t>:
 8012354:	b538      	push	{r3, r4, r5, lr}
 8012356:	4604      	mov	r4, r0
 8012358:	460d      	mov	r5, r1
 801235a:	2102      	movs	r1, #2
 801235c:	f000 fc2c 	bl	8012bb8 <ucdr_buffer_alignment>
 8012360:	68a2      	ldr	r2, [r4, #8]
 8012362:	6923      	ldr	r3, [r4, #16]
 8012364:	4402      	add	r2, r0
 8012366:	4418      	add	r0, r3
 8012368:	6120      	str	r0, [r4, #16]
 801236a:	60a2      	str	r2, [r4, #8]
 801236c:	4620      	mov	r0, r4
 801236e:	2102      	movs	r1, #2
 8012370:	f000 fbd0 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 8012374:	b180      	cbz	r0, 8012398 <ucdr_serialize_uint16_t+0x44>
 8012376:	7d23      	ldrb	r3, [r4, #20]
 8012378:	2b01      	cmp	r3, #1
 801237a:	68a3      	ldr	r3, [r4, #8]
 801237c:	d010      	beq.n	80123a0 <ucdr_serialize_uint16_t+0x4c>
 801237e:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8012382:	701a      	strb	r2, [r3, #0]
 8012384:	68a3      	ldr	r3, [r4, #8]
 8012386:	705d      	strb	r5, [r3, #1]
 8012388:	68a2      	ldr	r2, [r4, #8]
 801238a:	6923      	ldr	r3, [r4, #16]
 801238c:	3202      	adds	r2, #2
 801238e:	3302      	adds	r3, #2
 8012390:	2102      	movs	r1, #2
 8012392:	60a2      	str	r2, [r4, #8]
 8012394:	6123      	str	r3, [r4, #16]
 8012396:	7561      	strb	r1, [r4, #21]
 8012398:	7da0      	ldrb	r0, [r4, #22]
 801239a:	f080 0001 	eor.w	r0, r0, #1
 801239e:	bd38      	pop	{r3, r4, r5, pc}
 80123a0:	801d      	strh	r5, [r3, #0]
 80123a2:	e7f1      	b.n	8012388 <ucdr_serialize_uint16_t+0x34>

080123a4 <ucdr_serialize_endian_uint16_t>:
 80123a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123a6:	4604      	mov	r4, r0
 80123a8:	460f      	mov	r7, r1
 80123aa:	2102      	movs	r1, #2
 80123ac:	4616      	mov	r6, r2
 80123ae:	f000 fc03 	bl	8012bb8 <ucdr_buffer_alignment>
 80123b2:	68a5      	ldr	r5, [r4, #8]
 80123b4:	6923      	ldr	r3, [r4, #16]
 80123b6:	4405      	add	r5, r0
 80123b8:	4418      	add	r0, r3
 80123ba:	6120      	str	r0, [r4, #16]
 80123bc:	60a5      	str	r5, [r4, #8]
 80123be:	4620      	mov	r0, r4
 80123c0:	2102      	movs	r1, #2
 80123c2:	f000 fba7 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 80123c6:	b178      	cbz	r0, 80123e8 <ucdr_serialize_endian_uint16_t+0x44>
 80123c8:	2f01      	cmp	r7, #1
 80123ca:	68a3      	ldr	r3, [r4, #8]
 80123cc:	d010      	beq.n	80123f0 <ucdr_serialize_endian_uint16_t+0x4c>
 80123ce:	f3c6 2207 	ubfx	r2, r6, #8, #8
 80123d2:	701a      	strb	r2, [r3, #0]
 80123d4:	68a3      	ldr	r3, [r4, #8]
 80123d6:	705e      	strb	r6, [r3, #1]
 80123d8:	68a2      	ldr	r2, [r4, #8]
 80123da:	6923      	ldr	r3, [r4, #16]
 80123dc:	3202      	adds	r2, #2
 80123de:	3302      	adds	r3, #2
 80123e0:	2102      	movs	r1, #2
 80123e2:	60a2      	str	r2, [r4, #8]
 80123e4:	6123      	str	r3, [r4, #16]
 80123e6:	7561      	strb	r1, [r4, #21]
 80123e8:	7da0      	ldrb	r0, [r4, #22]
 80123ea:	f080 0001 	eor.w	r0, r0, #1
 80123ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123f0:	801e      	strh	r6, [r3, #0]
 80123f2:	e7f1      	b.n	80123d8 <ucdr_serialize_endian_uint16_t+0x34>

080123f4 <ucdr_deserialize_uint16_t>:
 80123f4:	b538      	push	{r3, r4, r5, lr}
 80123f6:	4604      	mov	r4, r0
 80123f8:	460d      	mov	r5, r1
 80123fa:	2102      	movs	r1, #2
 80123fc:	f000 fbdc 	bl	8012bb8 <ucdr_buffer_alignment>
 8012400:	68a2      	ldr	r2, [r4, #8]
 8012402:	6923      	ldr	r3, [r4, #16]
 8012404:	4402      	add	r2, r0
 8012406:	4418      	add	r0, r3
 8012408:	6120      	str	r0, [r4, #16]
 801240a:	60a2      	str	r2, [r4, #8]
 801240c:	4620      	mov	r0, r4
 801240e:	2102      	movs	r1, #2
 8012410:	f000 fb80 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 8012414:	b180      	cbz	r0, 8012438 <ucdr_deserialize_uint16_t+0x44>
 8012416:	7d23      	ldrb	r3, [r4, #20]
 8012418:	2b01      	cmp	r3, #1
 801241a:	68a3      	ldr	r3, [r4, #8]
 801241c:	d010      	beq.n	8012440 <ucdr_deserialize_uint16_t+0x4c>
 801241e:	785b      	ldrb	r3, [r3, #1]
 8012420:	702b      	strb	r3, [r5, #0]
 8012422:	68a3      	ldr	r3, [r4, #8]
 8012424:	781b      	ldrb	r3, [r3, #0]
 8012426:	706b      	strb	r3, [r5, #1]
 8012428:	68a2      	ldr	r2, [r4, #8]
 801242a:	6923      	ldr	r3, [r4, #16]
 801242c:	3202      	adds	r2, #2
 801242e:	3302      	adds	r3, #2
 8012430:	2102      	movs	r1, #2
 8012432:	60a2      	str	r2, [r4, #8]
 8012434:	6123      	str	r3, [r4, #16]
 8012436:	7561      	strb	r1, [r4, #21]
 8012438:	7da0      	ldrb	r0, [r4, #22]
 801243a:	f080 0001 	eor.w	r0, r0, #1
 801243e:	bd38      	pop	{r3, r4, r5, pc}
 8012440:	881b      	ldrh	r3, [r3, #0]
 8012442:	802b      	strh	r3, [r5, #0]
 8012444:	e7f0      	b.n	8012428 <ucdr_deserialize_uint16_t+0x34>
 8012446:	bf00      	nop

08012448 <ucdr_deserialize_endian_uint16_t>:
 8012448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801244a:	4604      	mov	r4, r0
 801244c:	460f      	mov	r7, r1
 801244e:	2102      	movs	r1, #2
 8012450:	4616      	mov	r6, r2
 8012452:	f000 fbb1 	bl	8012bb8 <ucdr_buffer_alignment>
 8012456:	68a5      	ldr	r5, [r4, #8]
 8012458:	6923      	ldr	r3, [r4, #16]
 801245a:	4405      	add	r5, r0
 801245c:	4418      	add	r0, r3
 801245e:	6120      	str	r0, [r4, #16]
 8012460:	60a5      	str	r5, [r4, #8]
 8012462:	4620      	mov	r0, r4
 8012464:	2102      	movs	r1, #2
 8012466:	f000 fb55 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 801246a:	b178      	cbz	r0, 801248c <ucdr_deserialize_endian_uint16_t+0x44>
 801246c:	2f01      	cmp	r7, #1
 801246e:	68a3      	ldr	r3, [r4, #8]
 8012470:	d010      	beq.n	8012494 <ucdr_deserialize_endian_uint16_t+0x4c>
 8012472:	785b      	ldrb	r3, [r3, #1]
 8012474:	7033      	strb	r3, [r6, #0]
 8012476:	68a3      	ldr	r3, [r4, #8]
 8012478:	781b      	ldrb	r3, [r3, #0]
 801247a:	7073      	strb	r3, [r6, #1]
 801247c:	68a2      	ldr	r2, [r4, #8]
 801247e:	6923      	ldr	r3, [r4, #16]
 8012480:	3202      	adds	r2, #2
 8012482:	3302      	adds	r3, #2
 8012484:	2102      	movs	r1, #2
 8012486:	60a2      	str	r2, [r4, #8]
 8012488:	6123      	str	r3, [r4, #16]
 801248a:	7561      	strb	r1, [r4, #21]
 801248c:	7da0      	ldrb	r0, [r4, #22]
 801248e:	f080 0001 	eor.w	r0, r0, #1
 8012492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012494:	881b      	ldrh	r3, [r3, #0]
 8012496:	8033      	strh	r3, [r6, #0]
 8012498:	e7f0      	b.n	801247c <ucdr_deserialize_endian_uint16_t+0x34>
 801249a:	bf00      	nop

0801249c <ucdr_serialize_uint32_t>:
 801249c:	b538      	push	{r3, r4, r5, lr}
 801249e:	4604      	mov	r4, r0
 80124a0:	460d      	mov	r5, r1
 80124a2:	2104      	movs	r1, #4
 80124a4:	f000 fb88 	bl	8012bb8 <ucdr_buffer_alignment>
 80124a8:	68a2      	ldr	r2, [r4, #8]
 80124aa:	6923      	ldr	r3, [r4, #16]
 80124ac:	4402      	add	r2, r0
 80124ae:	4418      	add	r0, r3
 80124b0:	6120      	str	r0, [r4, #16]
 80124b2:	60a2      	str	r2, [r4, #8]
 80124b4:	4620      	mov	r0, r4
 80124b6:	2104      	movs	r1, #4
 80124b8:	f000 fb2c 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 80124bc:	b1c0      	cbz	r0, 80124f0 <ucdr_serialize_uint32_t+0x54>
 80124be:	7d23      	ldrb	r3, [r4, #20]
 80124c0:	2b01      	cmp	r3, #1
 80124c2:	68a3      	ldr	r3, [r4, #8]
 80124c4:	d018      	beq.n	80124f8 <ucdr_serialize_uint32_t+0x5c>
 80124c6:	f3c5 6207 	ubfx	r2, r5, #24, #8
 80124ca:	701a      	strb	r2, [r3, #0]
 80124cc:	68a3      	ldr	r3, [r4, #8]
 80124ce:	f3c5 4207 	ubfx	r2, r5, #16, #8
 80124d2:	705a      	strb	r2, [r3, #1]
 80124d4:	68a3      	ldr	r3, [r4, #8]
 80124d6:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80124da:	709a      	strb	r2, [r3, #2]
 80124dc:	68a3      	ldr	r3, [r4, #8]
 80124de:	70dd      	strb	r5, [r3, #3]
 80124e0:	68a2      	ldr	r2, [r4, #8]
 80124e2:	6923      	ldr	r3, [r4, #16]
 80124e4:	3204      	adds	r2, #4
 80124e6:	3304      	adds	r3, #4
 80124e8:	2104      	movs	r1, #4
 80124ea:	60a2      	str	r2, [r4, #8]
 80124ec:	6123      	str	r3, [r4, #16]
 80124ee:	7561      	strb	r1, [r4, #21]
 80124f0:	7da0      	ldrb	r0, [r4, #22]
 80124f2:	f080 0001 	eor.w	r0, r0, #1
 80124f6:	bd38      	pop	{r3, r4, r5, pc}
 80124f8:	601d      	str	r5, [r3, #0]
 80124fa:	e7f1      	b.n	80124e0 <ucdr_serialize_uint32_t+0x44>

080124fc <ucdr_serialize_endian_uint32_t>:
 80124fc:	b570      	push	{r4, r5, r6, lr}
 80124fe:	4604      	mov	r4, r0
 8012500:	460e      	mov	r6, r1
 8012502:	2104      	movs	r1, #4
 8012504:	4615      	mov	r5, r2
 8012506:	f000 fb57 	bl	8012bb8 <ucdr_buffer_alignment>
 801250a:	68a2      	ldr	r2, [r4, #8]
 801250c:	6923      	ldr	r3, [r4, #16]
 801250e:	4402      	add	r2, r0
 8012510:	4418      	add	r0, r3
 8012512:	6120      	str	r0, [r4, #16]
 8012514:	60a2      	str	r2, [r4, #8]
 8012516:	4620      	mov	r0, r4
 8012518:	2104      	movs	r1, #4
 801251a:	f000 fafb 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 801251e:	b1b8      	cbz	r0, 8012550 <ucdr_serialize_endian_uint32_t+0x54>
 8012520:	2e01      	cmp	r6, #1
 8012522:	68a3      	ldr	r3, [r4, #8]
 8012524:	d018      	beq.n	8012558 <ucdr_serialize_endian_uint32_t+0x5c>
 8012526:	f3c5 6207 	ubfx	r2, r5, #24, #8
 801252a:	701a      	strb	r2, [r3, #0]
 801252c:	68a3      	ldr	r3, [r4, #8]
 801252e:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8012532:	705a      	strb	r2, [r3, #1]
 8012534:	68a3      	ldr	r3, [r4, #8]
 8012536:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801253a:	709a      	strb	r2, [r3, #2]
 801253c:	68a3      	ldr	r3, [r4, #8]
 801253e:	70dd      	strb	r5, [r3, #3]
 8012540:	68a2      	ldr	r2, [r4, #8]
 8012542:	6923      	ldr	r3, [r4, #16]
 8012544:	3204      	adds	r2, #4
 8012546:	3304      	adds	r3, #4
 8012548:	2104      	movs	r1, #4
 801254a:	60a2      	str	r2, [r4, #8]
 801254c:	6123      	str	r3, [r4, #16]
 801254e:	7561      	strb	r1, [r4, #21]
 8012550:	7da0      	ldrb	r0, [r4, #22]
 8012552:	f080 0001 	eor.w	r0, r0, #1
 8012556:	bd70      	pop	{r4, r5, r6, pc}
 8012558:	601d      	str	r5, [r3, #0]
 801255a:	e7f1      	b.n	8012540 <ucdr_serialize_endian_uint32_t+0x44>

0801255c <ucdr_deserialize_uint32_t>:
 801255c:	b538      	push	{r3, r4, r5, lr}
 801255e:	4604      	mov	r4, r0
 8012560:	460d      	mov	r5, r1
 8012562:	2104      	movs	r1, #4
 8012564:	f000 fb28 	bl	8012bb8 <ucdr_buffer_alignment>
 8012568:	68a2      	ldr	r2, [r4, #8]
 801256a:	6923      	ldr	r3, [r4, #16]
 801256c:	4402      	add	r2, r0
 801256e:	4418      	add	r0, r3
 8012570:	6120      	str	r0, [r4, #16]
 8012572:	60a2      	str	r2, [r4, #8]
 8012574:	4620      	mov	r0, r4
 8012576:	2104      	movs	r1, #4
 8012578:	f000 facc 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 801257c:	b1b0      	cbz	r0, 80125ac <ucdr_deserialize_uint32_t+0x50>
 801257e:	7d23      	ldrb	r3, [r4, #20]
 8012580:	2b01      	cmp	r3, #1
 8012582:	68a3      	ldr	r3, [r4, #8]
 8012584:	d016      	beq.n	80125b4 <ucdr_deserialize_uint32_t+0x58>
 8012586:	78db      	ldrb	r3, [r3, #3]
 8012588:	702b      	strb	r3, [r5, #0]
 801258a:	68a3      	ldr	r3, [r4, #8]
 801258c:	789b      	ldrb	r3, [r3, #2]
 801258e:	706b      	strb	r3, [r5, #1]
 8012590:	68a3      	ldr	r3, [r4, #8]
 8012592:	785b      	ldrb	r3, [r3, #1]
 8012594:	70ab      	strb	r3, [r5, #2]
 8012596:	68a3      	ldr	r3, [r4, #8]
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	70eb      	strb	r3, [r5, #3]
 801259c:	68a2      	ldr	r2, [r4, #8]
 801259e:	6923      	ldr	r3, [r4, #16]
 80125a0:	3204      	adds	r2, #4
 80125a2:	3304      	adds	r3, #4
 80125a4:	2104      	movs	r1, #4
 80125a6:	60a2      	str	r2, [r4, #8]
 80125a8:	6123      	str	r3, [r4, #16]
 80125aa:	7561      	strb	r1, [r4, #21]
 80125ac:	7da0      	ldrb	r0, [r4, #22]
 80125ae:	f080 0001 	eor.w	r0, r0, #1
 80125b2:	bd38      	pop	{r3, r4, r5, pc}
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	602b      	str	r3, [r5, #0]
 80125b8:	e7f0      	b.n	801259c <ucdr_deserialize_uint32_t+0x40>
 80125ba:	bf00      	nop

080125bc <ucdr_deserialize_endian_uint32_t>:
 80125bc:	b570      	push	{r4, r5, r6, lr}
 80125be:	4604      	mov	r4, r0
 80125c0:	460e      	mov	r6, r1
 80125c2:	2104      	movs	r1, #4
 80125c4:	4615      	mov	r5, r2
 80125c6:	f000 faf7 	bl	8012bb8 <ucdr_buffer_alignment>
 80125ca:	68a2      	ldr	r2, [r4, #8]
 80125cc:	6923      	ldr	r3, [r4, #16]
 80125ce:	4402      	add	r2, r0
 80125d0:	4418      	add	r0, r3
 80125d2:	6120      	str	r0, [r4, #16]
 80125d4:	60a2      	str	r2, [r4, #8]
 80125d6:	4620      	mov	r0, r4
 80125d8:	2104      	movs	r1, #4
 80125da:	f000 fa9b 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 80125de:	b1a8      	cbz	r0, 801260c <ucdr_deserialize_endian_uint32_t+0x50>
 80125e0:	2e01      	cmp	r6, #1
 80125e2:	68a3      	ldr	r3, [r4, #8]
 80125e4:	d016      	beq.n	8012614 <ucdr_deserialize_endian_uint32_t+0x58>
 80125e6:	78db      	ldrb	r3, [r3, #3]
 80125e8:	702b      	strb	r3, [r5, #0]
 80125ea:	68a3      	ldr	r3, [r4, #8]
 80125ec:	789b      	ldrb	r3, [r3, #2]
 80125ee:	706b      	strb	r3, [r5, #1]
 80125f0:	68a3      	ldr	r3, [r4, #8]
 80125f2:	785b      	ldrb	r3, [r3, #1]
 80125f4:	70ab      	strb	r3, [r5, #2]
 80125f6:	68a3      	ldr	r3, [r4, #8]
 80125f8:	781b      	ldrb	r3, [r3, #0]
 80125fa:	70eb      	strb	r3, [r5, #3]
 80125fc:	68a2      	ldr	r2, [r4, #8]
 80125fe:	6923      	ldr	r3, [r4, #16]
 8012600:	3204      	adds	r2, #4
 8012602:	3304      	adds	r3, #4
 8012604:	2104      	movs	r1, #4
 8012606:	60a2      	str	r2, [r4, #8]
 8012608:	6123      	str	r3, [r4, #16]
 801260a:	7561      	strb	r1, [r4, #21]
 801260c:	7da0      	ldrb	r0, [r4, #22]
 801260e:	f080 0001 	eor.w	r0, r0, #1
 8012612:	bd70      	pop	{r4, r5, r6, pc}
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	602b      	str	r3, [r5, #0]
 8012618:	e7f0      	b.n	80125fc <ucdr_deserialize_endian_uint32_t+0x40>
 801261a:	bf00      	nop

0801261c <ucdr_serialize_uint64_t>:
 801261c:	b510      	push	{r4, lr}
 801261e:	2108      	movs	r1, #8
 8012620:	4604      	mov	r4, r0
 8012622:	b082      	sub	sp, #8
 8012624:	e9cd 2300 	strd	r2, r3, [sp]
 8012628:	f000 fac6 	bl	8012bb8 <ucdr_buffer_alignment>
 801262c:	68a2      	ldr	r2, [r4, #8]
 801262e:	6923      	ldr	r3, [r4, #16]
 8012630:	4402      	add	r2, r0
 8012632:	4418      	add	r0, r3
 8012634:	6120      	str	r0, [r4, #16]
 8012636:	60a2      	str	r2, [r4, #8]
 8012638:	4620      	mov	r0, r4
 801263a:	2108      	movs	r1, #8
 801263c:	f000 fa6a 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 8012640:	b350      	cbz	r0, 8012698 <ucdr_serialize_uint64_t+0x7c>
 8012642:	7d23      	ldrb	r3, [r4, #20]
 8012644:	2b01      	cmp	r3, #1
 8012646:	d02c      	beq.n	80126a2 <ucdr_serialize_uint64_t+0x86>
 8012648:	68a3      	ldr	r3, [r4, #8]
 801264a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801264e:	701a      	strb	r2, [r3, #0]
 8012650:	68a3      	ldr	r3, [r4, #8]
 8012652:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012656:	705a      	strb	r2, [r3, #1]
 8012658:	68a3      	ldr	r3, [r4, #8]
 801265a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801265e:	709a      	strb	r2, [r3, #2]
 8012660:	68a3      	ldr	r3, [r4, #8]
 8012662:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012666:	70da      	strb	r2, [r3, #3]
 8012668:	68a3      	ldr	r3, [r4, #8]
 801266a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801266e:	711a      	strb	r2, [r3, #4]
 8012670:	68a3      	ldr	r3, [r4, #8]
 8012672:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012676:	715a      	strb	r2, [r3, #5]
 8012678:	68a3      	ldr	r3, [r4, #8]
 801267a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801267e:	719a      	strb	r2, [r3, #6]
 8012680:	68a3      	ldr	r3, [r4, #8]
 8012682:	f89d 2000 	ldrb.w	r2, [sp]
 8012686:	71da      	strb	r2, [r3, #7]
 8012688:	68a2      	ldr	r2, [r4, #8]
 801268a:	6923      	ldr	r3, [r4, #16]
 801268c:	3208      	adds	r2, #8
 801268e:	3308      	adds	r3, #8
 8012690:	2108      	movs	r1, #8
 8012692:	60a2      	str	r2, [r4, #8]
 8012694:	6123      	str	r3, [r4, #16]
 8012696:	7561      	strb	r1, [r4, #21]
 8012698:	7da0      	ldrb	r0, [r4, #22]
 801269a:	f080 0001 	eor.w	r0, r0, #1
 801269e:	b002      	add	sp, #8
 80126a0:	bd10      	pop	{r4, pc}
 80126a2:	466b      	mov	r3, sp
 80126a4:	cb03      	ldmia	r3!, {r0, r1}
 80126a6:	68a3      	ldr	r3, [r4, #8]
 80126a8:	6018      	str	r0, [r3, #0]
 80126aa:	6059      	str	r1, [r3, #4]
 80126ac:	e7ec      	b.n	8012688 <ucdr_serialize_uint64_t+0x6c>
 80126ae:	bf00      	nop

080126b0 <ucdr_serialize_int8_t>:
 80126b0:	b538      	push	{r3, r4, r5, lr}
 80126b2:	460d      	mov	r5, r1
 80126b4:	2101      	movs	r1, #1
 80126b6:	4604      	mov	r4, r0
 80126b8:	f000 fa2c 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 80126bc:	b148      	cbz	r0, 80126d2 <ucdr_serialize_int8_t+0x22>
 80126be:	68a3      	ldr	r3, [r4, #8]
 80126c0:	701d      	strb	r5, [r3, #0]
 80126c2:	68a2      	ldr	r2, [r4, #8]
 80126c4:	6923      	ldr	r3, [r4, #16]
 80126c6:	3201      	adds	r2, #1
 80126c8:	3301      	adds	r3, #1
 80126ca:	2101      	movs	r1, #1
 80126cc:	60a2      	str	r2, [r4, #8]
 80126ce:	6123      	str	r3, [r4, #16]
 80126d0:	7561      	strb	r1, [r4, #21]
 80126d2:	7da0      	ldrb	r0, [r4, #22]
 80126d4:	f080 0001 	eor.w	r0, r0, #1
 80126d8:	bd38      	pop	{r3, r4, r5, pc}
 80126da:	bf00      	nop

080126dc <ucdr_deserialize_int8_t>:
 80126dc:	b538      	push	{r3, r4, r5, lr}
 80126de:	460d      	mov	r5, r1
 80126e0:	2101      	movs	r1, #1
 80126e2:	4604      	mov	r4, r0
 80126e4:	f000 fa16 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 80126e8:	b150      	cbz	r0, 8012700 <ucdr_deserialize_int8_t+0x24>
 80126ea:	68a3      	ldr	r3, [r4, #8]
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	702b      	strb	r3, [r5, #0]
 80126f0:	68a2      	ldr	r2, [r4, #8]
 80126f2:	6923      	ldr	r3, [r4, #16]
 80126f4:	3201      	adds	r2, #1
 80126f6:	3301      	adds	r3, #1
 80126f8:	2101      	movs	r1, #1
 80126fa:	60a2      	str	r2, [r4, #8]
 80126fc:	6123      	str	r3, [r4, #16]
 80126fe:	7561      	strb	r1, [r4, #21]
 8012700:	7da0      	ldrb	r0, [r4, #22]
 8012702:	f080 0001 	eor.w	r0, r0, #1
 8012706:	bd38      	pop	{r3, r4, r5, pc}

08012708 <ucdr_serialize_int16_t>:
 8012708:	b538      	push	{r3, r4, r5, lr}
 801270a:	4604      	mov	r4, r0
 801270c:	460d      	mov	r5, r1
 801270e:	2102      	movs	r1, #2
 8012710:	f000 fa52 	bl	8012bb8 <ucdr_buffer_alignment>
 8012714:	68a2      	ldr	r2, [r4, #8]
 8012716:	6923      	ldr	r3, [r4, #16]
 8012718:	4402      	add	r2, r0
 801271a:	4418      	add	r0, r3
 801271c:	6120      	str	r0, [r4, #16]
 801271e:	60a2      	str	r2, [r4, #8]
 8012720:	4620      	mov	r0, r4
 8012722:	2102      	movs	r1, #2
 8012724:	f000 f9f6 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 8012728:	b180      	cbz	r0, 801274c <ucdr_serialize_int16_t+0x44>
 801272a:	7d23      	ldrb	r3, [r4, #20]
 801272c:	2b01      	cmp	r3, #1
 801272e:	68a3      	ldr	r3, [r4, #8]
 8012730:	d010      	beq.n	8012754 <ucdr_serialize_int16_t+0x4c>
 8012732:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8012736:	701a      	strb	r2, [r3, #0]
 8012738:	68a3      	ldr	r3, [r4, #8]
 801273a:	705d      	strb	r5, [r3, #1]
 801273c:	68a2      	ldr	r2, [r4, #8]
 801273e:	6923      	ldr	r3, [r4, #16]
 8012740:	3202      	adds	r2, #2
 8012742:	3302      	adds	r3, #2
 8012744:	2102      	movs	r1, #2
 8012746:	60a2      	str	r2, [r4, #8]
 8012748:	6123      	str	r3, [r4, #16]
 801274a:	7561      	strb	r1, [r4, #21]
 801274c:	7da0      	ldrb	r0, [r4, #22]
 801274e:	f080 0001 	eor.w	r0, r0, #1
 8012752:	bd38      	pop	{r3, r4, r5, pc}
 8012754:	801d      	strh	r5, [r3, #0]
 8012756:	e7f1      	b.n	801273c <ucdr_serialize_int16_t+0x34>

08012758 <ucdr_serialize_int32_t>:
 8012758:	b538      	push	{r3, r4, r5, lr}
 801275a:	4604      	mov	r4, r0
 801275c:	460d      	mov	r5, r1
 801275e:	2104      	movs	r1, #4
 8012760:	f000 fa2a 	bl	8012bb8 <ucdr_buffer_alignment>
 8012764:	68a2      	ldr	r2, [r4, #8]
 8012766:	6923      	ldr	r3, [r4, #16]
 8012768:	4402      	add	r2, r0
 801276a:	4418      	add	r0, r3
 801276c:	6120      	str	r0, [r4, #16]
 801276e:	60a2      	str	r2, [r4, #8]
 8012770:	4620      	mov	r0, r4
 8012772:	2104      	movs	r1, #4
 8012774:	f000 f9ce 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 8012778:	b1c0      	cbz	r0, 80127ac <ucdr_serialize_int32_t+0x54>
 801277a:	7d23      	ldrb	r3, [r4, #20]
 801277c:	2b01      	cmp	r3, #1
 801277e:	68a3      	ldr	r3, [r4, #8]
 8012780:	d018      	beq.n	80127b4 <ucdr_serialize_int32_t+0x5c>
 8012782:	f3c5 6207 	ubfx	r2, r5, #24, #8
 8012786:	701a      	strb	r2, [r3, #0]
 8012788:	68a3      	ldr	r3, [r4, #8]
 801278a:	f3c5 4207 	ubfx	r2, r5, #16, #8
 801278e:	705a      	strb	r2, [r3, #1]
 8012790:	68a3      	ldr	r3, [r4, #8]
 8012792:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8012796:	709a      	strb	r2, [r3, #2]
 8012798:	68a3      	ldr	r3, [r4, #8]
 801279a:	70dd      	strb	r5, [r3, #3]
 801279c:	68a2      	ldr	r2, [r4, #8]
 801279e:	6923      	ldr	r3, [r4, #16]
 80127a0:	3204      	adds	r2, #4
 80127a2:	3304      	adds	r3, #4
 80127a4:	2104      	movs	r1, #4
 80127a6:	60a2      	str	r2, [r4, #8]
 80127a8:	6123      	str	r3, [r4, #16]
 80127aa:	7561      	strb	r1, [r4, #21]
 80127ac:	7da0      	ldrb	r0, [r4, #22]
 80127ae:	f080 0001 	eor.w	r0, r0, #1
 80127b2:	bd38      	pop	{r3, r4, r5, pc}
 80127b4:	601d      	str	r5, [r3, #0]
 80127b6:	e7f1      	b.n	801279c <ucdr_serialize_int32_t+0x44>

080127b8 <ucdr_deserialize_int32_t>:
 80127b8:	b538      	push	{r3, r4, r5, lr}
 80127ba:	4604      	mov	r4, r0
 80127bc:	460d      	mov	r5, r1
 80127be:	2104      	movs	r1, #4
 80127c0:	f000 f9fa 	bl	8012bb8 <ucdr_buffer_alignment>
 80127c4:	68a2      	ldr	r2, [r4, #8]
 80127c6:	6923      	ldr	r3, [r4, #16]
 80127c8:	4402      	add	r2, r0
 80127ca:	4418      	add	r0, r3
 80127cc:	6120      	str	r0, [r4, #16]
 80127ce:	60a2      	str	r2, [r4, #8]
 80127d0:	4620      	mov	r0, r4
 80127d2:	2104      	movs	r1, #4
 80127d4:	f000 f99e 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 80127d8:	b1b0      	cbz	r0, 8012808 <ucdr_deserialize_int32_t+0x50>
 80127da:	7d23      	ldrb	r3, [r4, #20]
 80127dc:	2b01      	cmp	r3, #1
 80127de:	68a3      	ldr	r3, [r4, #8]
 80127e0:	d016      	beq.n	8012810 <ucdr_deserialize_int32_t+0x58>
 80127e2:	78db      	ldrb	r3, [r3, #3]
 80127e4:	702b      	strb	r3, [r5, #0]
 80127e6:	68a3      	ldr	r3, [r4, #8]
 80127e8:	789b      	ldrb	r3, [r3, #2]
 80127ea:	706b      	strb	r3, [r5, #1]
 80127ec:	68a3      	ldr	r3, [r4, #8]
 80127ee:	785b      	ldrb	r3, [r3, #1]
 80127f0:	70ab      	strb	r3, [r5, #2]
 80127f2:	68a3      	ldr	r3, [r4, #8]
 80127f4:	781b      	ldrb	r3, [r3, #0]
 80127f6:	70eb      	strb	r3, [r5, #3]
 80127f8:	68a2      	ldr	r2, [r4, #8]
 80127fa:	6923      	ldr	r3, [r4, #16]
 80127fc:	3204      	adds	r2, #4
 80127fe:	3304      	adds	r3, #4
 8012800:	2104      	movs	r1, #4
 8012802:	60a2      	str	r2, [r4, #8]
 8012804:	6123      	str	r3, [r4, #16]
 8012806:	7561      	strb	r1, [r4, #21]
 8012808:	7da0      	ldrb	r0, [r4, #22]
 801280a:	f080 0001 	eor.w	r0, r0, #1
 801280e:	bd38      	pop	{r3, r4, r5, pc}
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	602b      	str	r3, [r5, #0]
 8012814:	e7f0      	b.n	80127f8 <ucdr_deserialize_int32_t+0x40>
 8012816:	bf00      	nop

08012818 <ucdr_serialize_float>:
 8012818:	b538      	push	{r3, r4, r5, lr}
 801281a:	2104      	movs	r1, #4
 801281c:	4604      	mov	r4, r0
 801281e:	ee10 5a10 	vmov	r5, s0
 8012822:	f000 f9c9 	bl	8012bb8 <ucdr_buffer_alignment>
 8012826:	68a2      	ldr	r2, [r4, #8]
 8012828:	6923      	ldr	r3, [r4, #16]
 801282a:	4402      	add	r2, r0
 801282c:	4418      	add	r0, r3
 801282e:	6120      	str	r0, [r4, #16]
 8012830:	60a2      	str	r2, [r4, #8]
 8012832:	4620      	mov	r0, r4
 8012834:	2104      	movs	r1, #4
 8012836:	f000 f96d 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 801283a:	b1c0      	cbz	r0, 801286e <ucdr_serialize_float+0x56>
 801283c:	7d23      	ldrb	r3, [r4, #20]
 801283e:	2b01      	cmp	r3, #1
 8012840:	d019      	beq.n	8012876 <ucdr_serialize_float+0x5e>
 8012842:	68a2      	ldr	r2, [r4, #8]
 8012844:	f3c5 6107 	ubfx	r1, r5, #24, #8
 8012848:	7011      	strb	r1, [r2, #0]
 801284a:	68a2      	ldr	r2, [r4, #8]
 801284c:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8012850:	7051      	strb	r1, [r2, #1]
 8012852:	68a2      	ldr	r2, [r4, #8]
 8012854:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8012858:	7091      	strb	r1, [r2, #2]
 801285a:	68a2      	ldr	r2, [r4, #8]
 801285c:	70d5      	strb	r5, [r2, #3]
 801285e:	68a2      	ldr	r2, [r4, #8]
 8012860:	6923      	ldr	r3, [r4, #16]
 8012862:	3204      	adds	r2, #4
 8012864:	3304      	adds	r3, #4
 8012866:	2104      	movs	r1, #4
 8012868:	60a2      	str	r2, [r4, #8]
 801286a:	6123      	str	r3, [r4, #16]
 801286c:	7561      	strb	r1, [r4, #21]
 801286e:	7da0      	ldrb	r0, [r4, #22]
 8012870:	f080 0001 	eor.w	r0, r0, #1
 8012874:	bd38      	pop	{r3, r4, r5, pc}
 8012876:	68a3      	ldr	r3, [r4, #8]
 8012878:	601d      	str	r5, [r3, #0]
 801287a:	e7f0      	b.n	801285e <ucdr_serialize_float+0x46>

0801287c <ucdr_deserialize_float>:
 801287c:	b538      	push	{r3, r4, r5, lr}
 801287e:	4604      	mov	r4, r0
 8012880:	460d      	mov	r5, r1
 8012882:	2104      	movs	r1, #4
 8012884:	f000 f998 	bl	8012bb8 <ucdr_buffer_alignment>
 8012888:	68a2      	ldr	r2, [r4, #8]
 801288a:	6923      	ldr	r3, [r4, #16]
 801288c:	4402      	add	r2, r0
 801288e:	4418      	add	r0, r3
 8012890:	6120      	str	r0, [r4, #16]
 8012892:	60a2      	str	r2, [r4, #8]
 8012894:	4620      	mov	r0, r4
 8012896:	2104      	movs	r1, #4
 8012898:	f000 f93c 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 801289c:	b1b0      	cbz	r0, 80128cc <ucdr_deserialize_float+0x50>
 801289e:	7d23      	ldrb	r3, [r4, #20]
 80128a0:	2b01      	cmp	r3, #1
 80128a2:	68a3      	ldr	r3, [r4, #8]
 80128a4:	d016      	beq.n	80128d4 <ucdr_deserialize_float+0x58>
 80128a6:	78db      	ldrb	r3, [r3, #3]
 80128a8:	702b      	strb	r3, [r5, #0]
 80128aa:	68a3      	ldr	r3, [r4, #8]
 80128ac:	789b      	ldrb	r3, [r3, #2]
 80128ae:	706b      	strb	r3, [r5, #1]
 80128b0:	68a3      	ldr	r3, [r4, #8]
 80128b2:	785b      	ldrb	r3, [r3, #1]
 80128b4:	70ab      	strb	r3, [r5, #2]
 80128b6:	68a3      	ldr	r3, [r4, #8]
 80128b8:	781b      	ldrb	r3, [r3, #0]
 80128ba:	70eb      	strb	r3, [r5, #3]
 80128bc:	68a2      	ldr	r2, [r4, #8]
 80128be:	6923      	ldr	r3, [r4, #16]
 80128c0:	3204      	adds	r2, #4
 80128c2:	3304      	adds	r3, #4
 80128c4:	2104      	movs	r1, #4
 80128c6:	60a2      	str	r2, [r4, #8]
 80128c8:	6123      	str	r3, [r4, #16]
 80128ca:	7561      	strb	r1, [r4, #21]
 80128cc:	7da0      	ldrb	r0, [r4, #22]
 80128ce:	f080 0001 	eor.w	r0, r0, #1
 80128d2:	bd38      	pop	{r3, r4, r5, pc}
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	602b      	str	r3, [r5, #0]
 80128d8:	e7f0      	b.n	80128bc <ucdr_deserialize_float+0x40>
 80128da:	bf00      	nop

080128dc <ucdr_serialize_double>:
 80128dc:	b510      	push	{r4, lr}
 80128de:	2108      	movs	r1, #8
 80128e0:	4604      	mov	r4, r0
 80128e2:	b082      	sub	sp, #8
 80128e4:	ed8d 0b00 	vstr	d0, [sp]
 80128e8:	f000 f966 	bl	8012bb8 <ucdr_buffer_alignment>
 80128ec:	68a2      	ldr	r2, [r4, #8]
 80128ee:	6923      	ldr	r3, [r4, #16]
 80128f0:	4402      	add	r2, r0
 80128f2:	4418      	add	r0, r3
 80128f4:	6120      	str	r0, [r4, #16]
 80128f6:	60a2      	str	r2, [r4, #8]
 80128f8:	4620      	mov	r0, r4
 80128fa:	2108      	movs	r1, #8
 80128fc:	f000 f90a 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 8012900:	b350      	cbz	r0, 8012958 <ucdr_serialize_double+0x7c>
 8012902:	7d23      	ldrb	r3, [r4, #20]
 8012904:	2b01      	cmp	r3, #1
 8012906:	d02c      	beq.n	8012962 <ucdr_serialize_double+0x86>
 8012908:	68a3      	ldr	r3, [r4, #8]
 801290a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801290e:	701a      	strb	r2, [r3, #0]
 8012910:	68a3      	ldr	r3, [r4, #8]
 8012912:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012916:	705a      	strb	r2, [r3, #1]
 8012918:	68a3      	ldr	r3, [r4, #8]
 801291a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801291e:	709a      	strb	r2, [r3, #2]
 8012920:	68a3      	ldr	r3, [r4, #8]
 8012922:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012926:	70da      	strb	r2, [r3, #3]
 8012928:	68a3      	ldr	r3, [r4, #8]
 801292a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801292e:	711a      	strb	r2, [r3, #4]
 8012930:	68a3      	ldr	r3, [r4, #8]
 8012932:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012936:	715a      	strb	r2, [r3, #5]
 8012938:	68a3      	ldr	r3, [r4, #8]
 801293a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801293e:	719a      	strb	r2, [r3, #6]
 8012940:	68a3      	ldr	r3, [r4, #8]
 8012942:	f89d 2000 	ldrb.w	r2, [sp]
 8012946:	71da      	strb	r2, [r3, #7]
 8012948:	68a2      	ldr	r2, [r4, #8]
 801294a:	6923      	ldr	r3, [r4, #16]
 801294c:	3208      	adds	r2, #8
 801294e:	3308      	adds	r3, #8
 8012950:	2108      	movs	r1, #8
 8012952:	60a2      	str	r2, [r4, #8]
 8012954:	6123      	str	r3, [r4, #16]
 8012956:	7561      	strb	r1, [r4, #21]
 8012958:	7da0      	ldrb	r0, [r4, #22]
 801295a:	f080 0001 	eor.w	r0, r0, #1
 801295e:	b002      	add	sp, #8
 8012960:	bd10      	pop	{r4, pc}
 8012962:	466b      	mov	r3, sp
 8012964:	cb03      	ldmia	r3!, {r0, r1}
 8012966:	68a3      	ldr	r3, [r4, #8]
 8012968:	6018      	str	r0, [r3, #0]
 801296a:	6059      	str	r1, [r3, #4]
 801296c:	e7ec      	b.n	8012948 <ucdr_serialize_double+0x6c>
 801296e:	bf00      	nop

08012970 <ucdr_serialize_endian_double>:
 8012970:	b530      	push	{r4, r5, lr}
 8012972:	4604      	mov	r4, r0
 8012974:	b083      	sub	sp, #12
 8012976:	460d      	mov	r5, r1
 8012978:	2108      	movs	r1, #8
 801297a:	ed8d 0b00 	vstr	d0, [sp]
 801297e:	f000 f91b 	bl	8012bb8 <ucdr_buffer_alignment>
 8012982:	68a2      	ldr	r2, [r4, #8]
 8012984:	6923      	ldr	r3, [r4, #16]
 8012986:	4402      	add	r2, r0
 8012988:	4418      	add	r0, r3
 801298a:	6120      	str	r0, [r4, #16]
 801298c:	60a2      	str	r2, [r4, #8]
 801298e:	4620      	mov	r0, r4
 8012990:	2108      	movs	r1, #8
 8012992:	f000 f8bf 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 8012996:	b348      	cbz	r0, 80129ec <ucdr_serialize_endian_double+0x7c>
 8012998:	2d01      	cmp	r5, #1
 801299a:	d02c      	beq.n	80129f6 <ucdr_serialize_endian_double+0x86>
 801299c:	68a3      	ldr	r3, [r4, #8]
 801299e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80129a2:	701a      	strb	r2, [r3, #0]
 80129a4:	68a3      	ldr	r3, [r4, #8]
 80129a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80129aa:	705a      	strb	r2, [r3, #1]
 80129ac:	68a3      	ldr	r3, [r4, #8]
 80129ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80129b2:	709a      	strb	r2, [r3, #2]
 80129b4:	68a3      	ldr	r3, [r4, #8]
 80129b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80129ba:	70da      	strb	r2, [r3, #3]
 80129bc:	68a3      	ldr	r3, [r4, #8]
 80129be:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80129c2:	711a      	strb	r2, [r3, #4]
 80129c4:	68a3      	ldr	r3, [r4, #8]
 80129c6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80129ca:	715a      	strb	r2, [r3, #5]
 80129cc:	68a3      	ldr	r3, [r4, #8]
 80129ce:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80129d2:	719a      	strb	r2, [r3, #6]
 80129d4:	68a3      	ldr	r3, [r4, #8]
 80129d6:	f89d 2000 	ldrb.w	r2, [sp]
 80129da:	71da      	strb	r2, [r3, #7]
 80129dc:	68a2      	ldr	r2, [r4, #8]
 80129de:	6923      	ldr	r3, [r4, #16]
 80129e0:	3208      	adds	r2, #8
 80129e2:	3308      	adds	r3, #8
 80129e4:	2108      	movs	r1, #8
 80129e6:	60a2      	str	r2, [r4, #8]
 80129e8:	6123      	str	r3, [r4, #16]
 80129ea:	7561      	strb	r1, [r4, #21]
 80129ec:	7da0      	ldrb	r0, [r4, #22]
 80129ee:	f080 0001 	eor.w	r0, r0, #1
 80129f2:	b003      	add	sp, #12
 80129f4:	bd30      	pop	{r4, r5, pc}
 80129f6:	466b      	mov	r3, sp
 80129f8:	cb03      	ldmia	r3!, {r0, r1}
 80129fa:	68a3      	ldr	r3, [r4, #8]
 80129fc:	6018      	str	r0, [r3, #0]
 80129fe:	6059      	str	r1, [r3, #4]
 8012a00:	e7ec      	b.n	80129dc <ucdr_serialize_endian_double+0x6c>
 8012a02:	bf00      	nop

08012a04 <ucdr_deserialize_double>:
 8012a04:	b538      	push	{r3, r4, r5, lr}
 8012a06:	4604      	mov	r4, r0
 8012a08:	460d      	mov	r5, r1
 8012a0a:	2108      	movs	r1, #8
 8012a0c:	f000 f8d4 	bl	8012bb8 <ucdr_buffer_alignment>
 8012a10:	68a2      	ldr	r2, [r4, #8]
 8012a12:	6923      	ldr	r3, [r4, #16]
 8012a14:	4402      	add	r2, r0
 8012a16:	4418      	add	r0, r3
 8012a18:	6120      	str	r0, [r4, #16]
 8012a1a:	60a2      	str	r2, [r4, #8]
 8012a1c:	4620      	mov	r0, r4
 8012a1e:	2108      	movs	r1, #8
 8012a20:	f000 f878 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 8012a24:	b310      	cbz	r0, 8012a6c <ucdr_deserialize_double+0x68>
 8012a26:	7d23      	ldrb	r3, [r4, #20]
 8012a28:	2b01      	cmp	r3, #1
 8012a2a:	68a3      	ldr	r3, [r4, #8]
 8012a2c:	d022      	beq.n	8012a74 <ucdr_deserialize_double+0x70>
 8012a2e:	79db      	ldrb	r3, [r3, #7]
 8012a30:	702b      	strb	r3, [r5, #0]
 8012a32:	68a3      	ldr	r3, [r4, #8]
 8012a34:	799b      	ldrb	r3, [r3, #6]
 8012a36:	706b      	strb	r3, [r5, #1]
 8012a38:	68a3      	ldr	r3, [r4, #8]
 8012a3a:	795b      	ldrb	r3, [r3, #5]
 8012a3c:	70ab      	strb	r3, [r5, #2]
 8012a3e:	68a3      	ldr	r3, [r4, #8]
 8012a40:	791b      	ldrb	r3, [r3, #4]
 8012a42:	70eb      	strb	r3, [r5, #3]
 8012a44:	68a3      	ldr	r3, [r4, #8]
 8012a46:	78db      	ldrb	r3, [r3, #3]
 8012a48:	712b      	strb	r3, [r5, #4]
 8012a4a:	68a3      	ldr	r3, [r4, #8]
 8012a4c:	789b      	ldrb	r3, [r3, #2]
 8012a4e:	716b      	strb	r3, [r5, #5]
 8012a50:	68a3      	ldr	r3, [r4, #8]
 8012a52:	785b      	ldrb	r3, [r3, #1]
 8012a54:	71ab      	strb	r3, [r5, #6]
 8012a56:	68a3      	ldr	r3, [r4, #8]
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	71eb      	strb	r3, [r5, #7]
 8012a5c:	68a2      	ldr	r2, [r4, #8]
 8012a5e:	6923      	ldr	r3, [r4, #16]
 8012a60:	3208      	adds	r2, #8
 8012a62:	3308      	adds	r3, #8
 8012a64:	2108      	movs	r1, #8
 8012a66:	60a2      	str	r2, [r4, #8]
 8012a68:	6123      	str	r3, [r4, #16]
 8012a6a:	7561      	strb	r1, [r4, #21]
 8012a6c:	7da0      	ldrb	r0, [r4, #22]
 8012a6e:	f080 0001 	eor.w	r0, r0, #1
 8012a72:	bd38      	pop	{r3, r4, r5, pc}
 8012a74:	681a      	ldr	r2, [r3, #0]
 8012a76:	685b      	ldr	r3, [r3, #4]
 8012a78:	606b      	str	r3, [r5, #4]
 8012a7a:	602a      	str	r2, [r5, #0]
 8012a7c:	e7ee      	b.n	8012a5c <ucdr_deserialize_double+0x58>
 8012a7e:	bf00      	nop

08012a80 <ucdr_deserialize_endian_double>:
 8012a80:	b570      	push	{r4, r5, r6, lr}
 8012a82:	4604      	mov	r4, r0
 8012a84:	460e      	mov	r6, r1
 8012a86:	2108      	movs	r1, #8
 8012a88:	4615      	mov	r5, r2
 8012a8a:	f000 f895 	bl	8012bb8 <ucdr_buffer_alignment>
 8012a8e:	68a2      	ldr	r2, [r4, #8]
 8012a90:	6923      	ldr	r3, [r4, #16]
 8012a92:	4402      	add	r2, r0
 8012a94:	4418      	add	r0, r3
 8012a96:	6120      	str	r0, [r4, #16]
 8012a98:	60a2      	str	r2, [r4, #8]
 8012a9a:	4620      	mov	r0, r4
 8012a9c:	2108      	movs	r1, #8
 8012a9e:	f000 f839 	bl	8012b14 <ucdr_check_final_buffer_behavior>
 8012aa2:	b308      	cbz	r0, 8012ae8 <ucdr_deserialize_endian_double+0x68>
 8012aa4:	2e01      	cmp	r6, #1
 8012aa6:	68a3      	ldr	r3, [r4, #8]
 8012aa8:	d022      	beq.n	8012af0 <ucdr_deserialize_endian_double+0x70>
 8012aaa:	79db      	ldrb	r3, [r3, #7]
 8012aac:	702b      	strb	r3, [r5, #0]
 8012aae:	68a3      	ldr	r3, [r4, #8]
 8012ab0:	799b      	ldrb	r3, [r3, #6]
 8012ab2:	706b      	strb	r3, [r5, #1]
 8012ab4:	68a3      	ldr	r3, [r4, #8]
 8012ab6:	795b      	ldrb	r3, [r3, #5]
 8012ab8:	70ab      	strb	r3, [r5, #2]
 8012aba:	68a3      	ldr	r3, [r4, #8]
 8012abc:	791b      	ldrb	r3, [r3, #4]
 8012abe:	70eb      	strb	r3, [r5, #3]
 8012ac0:	68a3      	ldr	r3, [r4, #8]
 8012ac2:	78db      	ldrb	r3, [r3, #3]
 8012ac4:	712b      	strb	r3, [r5, #4]
 8012ac6:	68a3      	ldr	r3, [r4, #8]
 8012ac8:	789b      	ldrb	r3, [r3, #2]
 8012aca:	716b      	strb	r3, [r5, #5]
 8012acc:	68a3      	ldr	r3, [r4, #8]
 8012ace:	785b      	ldrb	r3, [r3, #1]
 8012ad0:	71ab      	strb	r3, [r5, #6]
 8012ad2:	68a3      	ldr	r3, [r4, #8]
 8012ad4:	781b      	ldrb	r3, [r3, #0]
 8012ad6:	71eb      	strb	r3, [r5, #7]
 8012ad8:	68a2      	ldr	r2, [r4, #8]
 8012ada:	6923      	ldr	r3, [r4, #16]
 8012adc:	3208      	adds	r2, #8
 8012ade:	3308      	adds	r3, #8
 8012ae0:	2108      	movs	r1, #8
 8012ae2:	60a2      	str	r2, [r4, #8]
 8012ae4:	6123      	str	r3, [r4, #16]
 8012ae6:	7561      	strb	r1, [r4, #21]
 8012ae8:	7da0      	ldrb	r0, [r4, #22]
 8012aea:	f080 0001 	eor.w	r0, r0, #1
 8012aee:	bd70      	pop	{r4, r5, r6, pc}
 8012af0:	681a      	ldr	r2, [r3, #0]
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	606b      	str	r3, [r5, #4]
 8012af6:	602a      	str	r2, [r5, #0]
 8012af8:	e7ee      	b.n	8012ad8 <ucdr_deserialize_endian_double+0x58>
 8012afa:	bf00      	nop

08012afc <ucdr_check_buffer_available_for>:
 8012afc:	7d83      	ldrb	r3, [r0, #22]
 8012afe:	b93b      	cbnz	r3, 8012b10 <ucdr_check_buffer_available_for+0x14>
 8012b00:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8012b04:	4419      	add	r1, r3
 8012b06:	4288      	cmp	r0, r1
 8012b08:	bf34      	ite	cc
 8012b0a:	2000      	movcc	r0, #0
 8012b0c:	2001      	movcs	r0, #1
 8012b0e:	4770      	bx	lr
 8012b10:	2000      	movs	r0, #0
 8012b12:	4770      	bx	lr

08012b14 <ucdr_check_final_buffer_behavior>:
 8012b14:	b538      	push	{r3, r4, r5, lr}
 8012b16:	7d83      	ldrb	r3, [r0, #22]
 8012b18:	b97b      	cbnz	r3, 8012b3a <ucdr_check_final_buffer_behavior+0x26>
 8012b1a:	e9d0 5201 	ldrd	r5, r2, [r0, #4]
 8012b1e:	4411      	add	r1, r2
 8012b20:	428d      	cmp	r5, r1
 8012b22:	4604      	mov	r4, r0
 8012b24:	d20c      	bcs.n	8012b40 <ucdr_check_final_buffer_behavior+0x2c>
 8012b26:	6982      	ldr	r2, [r0, #24]
 8012b28:	b16a      	cbz	r2, 8012b46 <ucdr_check_final_buffer_behavior+0x32>
 8012b2a:	69c1      	ldr	r1, [r0, #28]
 8012b2c:	4790      	blx	r2
 8012b2e:	f080 0301 	eor.w	r3, r0, #1
 8012b32:	b2db      	uxtb	r3, r3
 8012b34:	75a0      	strb	r0, [r4, #22]
 8012b36:	4618      	mov	r0, r3
 8012b38:	bd38      	pop	{r3, r4, r5, pc}
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	bd38      	pop	{r3, r4, r5, pc}
 8012b40:	2301      	movs	r3, #1
 8012b42:	4618      	mov	r0, r3
 8012b44:	bd38      	pop	{r3, r4, r5, pc}
 8012b46:	2001      	movs	r0, #1
 8012b48:	75a0      	strb	r0, [r4, #22]
 8012b4a:	e7f4      	b.n	8012b36 <ucdr_check_final_buffer_behavior+0x22>

08012b4c <ucdr_set_on_full_buffer_callback>:
 8012b4c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8012b50:	4770      	bx	lr
 8012b52:	bf00      	nop

08012b54 <ucdr_init_buffer_origin_offset_endian>:
 8012b54:	b430      	push	{r4, r5}
 8012b56:	9c02      	ldr	r4, [sp, #8]
 8012b58:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8012b5c:	6001      	str	r1, [r0, #0]
 8012b5e:	440a      	add	r2, r1
 8012b60:	60c3      	str	r3, [r0, #12]
 8012b62:	4421      	add	r1, r4
 8012b64:	441c      	add	r4, r3
 8012b66:	2300      	movs	r3, #0
 8012b68:	6104      	str	r4, [r0, #16]
 8012b6a:	7505      	strb	r5, [r0, #20]
 8012b6c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8012b70:	bc30      	pop	{r4, r5}
 8012b72:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8012b76:	7543      	strb	r3, [r0, #21]
 8012b78:	7583      	strb	r3, [r0, #22]
 8012b7a:	4770      	bx	lr

08012b7c <ucdr_init_buffer_origin_offset>:
 8012b7c:	b510      	push	{r4, lr}
 8012b7e:	b082      	sub	sp, #8
 8012b80:	9c04      	ldr	r4, [sp, #16]
 8012b82:	9400      	str	r4, [sp, #0]
 8012b84:	2401      	movs	r4, #1
 8012b86:	9401      	str	r4, [sp, #4]
 8012b88:	f7ff ffe4 	bl	8012b54 <ucdr_init_buffer_origin_offset_endian>
 8012b8c:	b002      	add	sp, #8
 8012b8e:	bd10      	pop	{r4, pc}

08012b90 <ucdr_init_buffer_origin>:
 8012b90:	b510      	push	{r4, lr}
 8012b92:	b082      	sub	sp, #8
 8012b94:	2400      	movs	r4, #0
 8012b96:	9400      	str	r4, [sp, #0]
 8012b98:	f7ff fff0 	bl	8012b7c <ucdr_init_buffer_origin_offset>
 8012b9c:	b002      	add	sp, #8
 8012b9e:	bd10      	pop	{r4, pc}

08012ba0 <ucdr_init_buffer>:
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	f7ff bff5 	b.w	8012b90 <ucdr_init_buffer_origin>
 8012ba6:	bf00      	nop

08012ba8 <ucdr_alignment>:
 8012ba8:	fbb0 f3f1 	udiv	r3, r0, r1
 8012bac:	fb03 0011 	mls	r0, r3, r1, r0
 8012bb0:	1a08      	subs	r0, r1, r0
 8012bb2:	3901      	subs	r1, #1
 8012bb4:	4008      	ands	r0, r1
 8012bb6:	4770      	bx	lr

08012bb8 <ucdr_buffer_alignment>:
 8012bb8:	7d43      	ldrb	r3, [r0, #21]
 8012bba:	428b      	cmp	r3, r1
 8012bbc:	d20a      	bcs.n	8012bd4 <ucdr_buffer_alignment+0x1c>
 8012bbe:	e9d0 0303 	ldrd	r0, r3, [r0, #12]
 8012bc2:	1a1b      	subs	r3, r3, r0
 8012bc4:	fbb3 f0f1 	udiv	r0, r3, r1
 8012bc8:	fb01 3010 	mls	r0, r1, r0, r3
 8012bcc:	1a08      	subs	r0, r1, r0
 8012bce:	3901      	subs	r1, #1
 8012bd0:	4008      	ands	r0, r1
 8012bd2:	4770      	bx	lr
 8012bd4:	2000      	movs	r0, #0
 8012bd6:	4770      	bx	lr

08012bd8 <ucdr_align_to>:
 8012bd8:	b570      	push	{r4, r5, r6, lr}
 8012bda:	4604      	mov	r4, r0
 8012bdc:	460e      	mov	r6, r1
 8012bde:	f7ff ffeb 	bl	8012bb8 <ucdr_buffer_alignment>
 8012be2:	68a5      	ldr	r5, [r4, #8]
 8012be4:	6863      	ldr	r3, [r4, #4]
 8012be6:	6922      	ldr	r2, [r4, #16]
 8012be8:	7566      	strb	r6, [r4, #21]
 8012bea:	4405      	add	r5, r0
 8012bec:	42ab      	cmp	r3, r5
 8012bee:	4410      	add	r0, r2
 8012bf0:	bf28      	it	cs
 8012bf2:	462b      	movcs	r3, r5
 8012bf4:	6120      	str	r0, [r4, #16]
 8012bf6:	60a3      	str	r3, [r4, #8]
 8012bf8:	bd70      	pop	{r4, r5, r6, pc}
 8012bfa:	bf00      	nop

08012bfc <ucdr_buffer_length>:
 8012bfc:	6882      	ldr	r2, [r0, #8]
 8012bfe:	6800      	ldr	r0, [r0, #0]
 8012c00:	1a10      	subs	r0, r2, r0
 8012c02:	4770      	bx	lr

08012c04 <ucdr_buffer_remaining>:
 8012c04:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8012c08:	1a10      	subs	r0, r2, r0
 8012c0a:	4770      	bx	lr

08012c0c <ucdr_check_final_buffer_behavior_array>:
 8012c0c:	b538      	push	{r3, r4, r5, lr}
 8012c0e:	7d83      	ldrb	r3, [r0, #22]
 8012c10:	b96b      	cbnz	r3, 8012c2e <ucdr_check_final_buffer_behavior_array+0x22>
 8012c12:	460d      	mov	r5, r1
 8012c14:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8012c18:	441a      	add	r2, r3
 8012c1a:	4291      	cmp	r1, r2
 8012c1c:	4604      	mov	r4, r0
 8012c1e:	d208      	bcs.n	8012c32 <ucdr_check_final_buffer_behavior_array+0x26>
 8012c20:	b13d      	cbz	r5, 8012c32 <ucdr_check_final_buffer_behavior_array+0x26>
 8012c22:	6983      	ldr	r3, [r0, #24]
 8012c24:	b163      	cbz	r3, 8012c40 <ucdr_check_final_buffer_behavior_array+0x34>
 8012c26:	69c1      	ldr	r1, [r0, #28]
 8012c28:	4798      	blx	r3
 8012c2a:	75a0      	strb	r0, [r4, #22]
 8012c2c:	b108      	cbz	r0, 8012c32 <ucdr_check_final_buffer_behavior_array+0x26>
 8012c2e:	2000      	movs	r0, #0
 8012c30:	bd38      	pop	{r3, r4, r5, pc}
 8012c32:	4620      	mov	r0, r4
 8012c34:	f7ff ffe6 	bl	8012c04 <ucdr_buffer_remaining>
 8012c38:	42a8      	cmp	r0, r5
 8012c3a:	bf28      	it	cs
 8012c3c:	4628      	movcs	r0, r5
 8012c3e:	bd38      	pop	{r3, r4, r5, pc}
 8012c40:	2301      	movs	r3, #1
 8012c42:	7583      	strb	r3, [r0, #22]
 8012c44:	e7f3      	b.n	8012c2e <ucdr_check_final_buffer_behavior_array+0x22>
 8012c46:	bf00      	nop

08012c48 <ucdr_advance_buffer>:
 8012c48:	b538      	push	{r3, r4, r5, lr}
 8012c4a:	4604      	mov	r4, r0
 8012c4c:	460d      	mov	r5, r1
 8012c4e:	f7ff ff55 	bl	8012afc <ucdr_check_buffer_available_for>
 8012c52:	b178      	cbz	r0, 8012c74 <ucdr_advance_buffer+0x2c>
 8012c54:	68a3      	ldr	r3, [r4, #8]
 8012c56:	6921      	ldr	r1, [r4, #16]
 8012c58:	442b      	add	r3, r5
 8012c5a:	60a3      	str	r3, [r4, #8]
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	4429      	add	r1, r5
 8012c60:	7563      	strb	r3, [r4, #21]
 8012c62:	6121      	str	r1, [r4, #16]
 8012c64:	bd38      	pop	{r3, r4, r5, pc}
 8012c66:	68a2      	ldr	r2, [r4, #8]
 8012c68:	6923      	ldr	r3, [r4, #16]
 8012c6a:	4402      	add	r2, r0
 8012c6c:	4403      	add	r3, r0
 8012c6e:	1a2d      	subs	r5, r5, r0
 8012c70:	60a2      	str	r2, [r4, #8]
 8012c72:	6123      	str	r3, [r4, #16]
 8012c74:	2201      	movs	r2, #1
 8012c76:	4629      	mov	r1, r5
 8012c78:	4620      	mov	r0, r4
 8012c7a:	f7ff ffc7 	bl	8012c0c <ucdr_check_final_buffer_behavior_array>
 8012c7e:	2800      	cmp	r0, #0
 8012c80:	d1f1      	bne.n	8012c66 <ucdr_advance_buffer+0x1e>
 8012c82:	2301      	movs	r3, #1
 8012c84:	7563      	strb	r3, [r4, #21]
 8012c86:	bd38      	pop	{r3, r4, r5, pc}

08012c88 <ucdr_serialize_sequence_char>:
 8012c88:	b570      	push	{r4, r5, r6, lr}
 8012c8a:	460e      	mov	r6, r1
 8012c8c:	4615      	mov	r5, r2
 8012c8e:	7d01      	ldrb	r1, [r0, #20]
 8012c90:	4604      	mov	r4, r0
 8012c92:	f7ff fc33 	bl	80124fc <ucdr_serialize_endian_uint32_t>
 8012c96:	b90d      	cbnz	r5, 8012c9c <ucdr_serialize_sequence_char+0x14>
 8012c98:	2001      	movs	r0, #1
 8012c9a:	bd70      	pop	{r4, r5, r6, pc}
 8012c9c:	7d21      	ldrb	r1, [r4, #20]
 8012c9e:	462b      	mov	r3, r5
 8012ca0:	4632      	mov	r2, r6
 8012ca2:	4620      	mov	r0, r4
 8012ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ca8:	f7ff b8ae 	b.w	8011e08 <ucdr_serialize_endian_array_char>

08012cac <ucdr_deserialize_sequence_char>:
 8012cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cb0:	461d      	mov	r5, r3
 8012cb2:	4616      	mov	r6, r2
 8012cb4:	460f      	mov	r7, r1
 8012cb6:	461a      	mov	r2, r3
 8012cb8:	7d01      	ldrb	r1, [r0, #20]
 8012cba:	4604      	mov	r4, r0
 8012cbc:	f7ff fc7e 	bl	80125bc <ucdr_deserialize_endian_uint32_t>
 8012cc0:	682b      	ldr	r3, [r5, #0]
 8012cc2:	429e      	cmp	r6, r3
 8012cc4:	bf3c      	itt	cc
 8012cc6:	2201      	movcc	r2, #1
 8012cc8:	75a2      	strbcc	r2, [r4, #22]
 8012cca:	b913      	cbnz	r3, 8012cd2 <ucdr_deserialize_sequence_char+0x26>
 8012ccc:	2001      	movs	r0, #1
 8012cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cd2:	7d21      	ldrb	r1, [r4, #20]
 8012cd4:	463a      	mov	r2, r7
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012cdc:	f7ff b8c6 	b.w	8011e6c <ucdr_deserialize_endian_array_char>

08012ce0 <ucdr_serialize_sequence_uint8_t>:
 8012ce0:	b570      	push	{r4, r5, r6, lr}
 8012ce2:	460e      	mov	r6, r1
 8012ce4:	4615      	mov	r5, r2
 8012ce6:	7d01      	ldrb	r1, [r0, #20]
 8012ce8:	4604      	mov	r4, r0
 8012cea:	f7ff fc07 	bl	80124fc <ucdr_serialize_endian_uint32_t>
 8012cee:	b90d      	cbnz	r5, 8012cf4 <ucdr_serialize_sequence_uint8_t+0x14>
 8012cf0:	2001      	movs	r0, #1
 8012cf2:	bd70      	pop	{r4, r5, r6, pc}
 8012cf4:	7d21      	ldrb	r1, [r4, #20]
 8012cf6:	462b      	mov	r3, r5
 8012cf8:	4632      	mov	r2, r6
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d00:	f7ff b918 	b.w	8011f34 <ucdr_serialize_endian_array_uint8_t>

08012d04 <ucdr_serialize_sequence_uint16_t>:
 8012d04:	b570      	push	{r4, r5, r6, lr}
 8012d06:	460e      	mov	r6, r1
 8012d08:	4615      	mov	r5, r2
 8012d0a:	7d01      	ldrb	r1, [r0, #20]
 8012d0c:	4604      	mov	r4, r0
 8012d0e:	f7ff fbf5 	bl	80124fc <ucdr_serialize_endian_uint32_t>
 8012d12:	b90d      	cbnz	r5, 8012d18 <ucdr_serialize_sequence_uint16_t+0x14>
 8012d14:	2001      	movs	r0, #1
 8012d16:	bd70      	pop	{r4, r5, r6, pc}
 8012d18:	7d21      	ldrb	r1, [r4, #20]
 8012d1a:	462b      	mov	r3, r5
 8012d1c:	4632      	mov	r2, r6
 8012d1e:	4620      	mov	r0, r4
 8012d20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d24:	f7ff b96a 	b.w	8011ffc <ucdr_serialize_endian_array_uint16_t>

08012d28 <ucdr_deserialize_sequence_uint16_t>:
 8012d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d2c:	461d      	mov	r5, r3
 8012d2e:	4616      	mov	r6, r2
 8012d30:	460f      	mov	r7, r1
 8012d32:	461a      	mov	r2, r3
 8012d34:	7d01      	ldrb	r1, [r0, #20]
 8012d36:	4604      	mov	r4, r0
 8012d38:	f7ff fc40 	bl	80125bc <ucdr_deserialize_endian_uint32_t>
 8012d3c:	682b      	ldr	r3, [r5, #0]
 8012d3e:	429e      	cmp	r6, r3
 8012d40:	bf3c      	itt	cc
 8012d42:	2201      	movcc	r2, #1
 8012d44:	75a2      	strbcc	r2, [r4, #22]
 8012d46:	b913      	cbnz	r3, 8012d4e <ucdr_deserialize_sequence_uint16_t+0x26>
 8012d48:	2001      	movs	r0, #1
 8012d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d4e:	7d21      	ldrb	r1, [r4, #20]
 8012d50:	463a      	mov	r2, r7
 8012d52:	4620      	mov	r0, r4
 8012d54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d58:	f7ff b9a4 	b.w	80120a4 <ucdr_deserialize_endian_array_uint16_t>

08012d5c <uxr_buffer_delete_entity>:
 8012d5c:	b530      	push	{r4, r5, lr}
 8012d5e:	b08f      	sub	sp, #60	; 0x3c
 8012d60:	2403      	movs	r4, #3
 8012d62:	2500      	movs	r5, #0
 8012d64:	e9cd 4500 	strd	r4, r5, [sp]
 8012d68:	9202      	str	r2, [sp, #8]
 8012d6a:	ab06      	add	r3, sp, #24
 8012d6c:	2204      	movs	r2, #4
 8012d6e:	9103      	str	r1, [sp, #12]
 8012d70:	4604      	mov	r4, r0
 8012d72:	f001 f959 	bl	8014028 <uxr_prepare_stream_to_write_submessage>
 8012d76:	b918      	cbnz	r0, 8012d80 <uxr_buffer_delete_entity+0x24>
 8012d78:	4604      	mov	r4, r0
 8012d7a:	4620      	mov	r0, r4
 8012d7c:	b00f      	add	sp, #60	; 0x3c
 8012d7e:	bd30      	pop	{r4, r5, pc}
 8012d80:	9902      	ldr	r1, [sp, #8]
 8012d82:	aa05      	add	r2, sp, #20
 8012d84:	4620      	mov	r0, r4
 8012d86:	f001 fa85 	bl	8014294 <uxr_init_base_object_request>
 8012d8a:	a905      	add	r1, sp, #20
 8012d8c:	4604      	mov	r4, r0
 8012d8e:	a806      	add	r0, sp, #24
 8012d90:	f002 fec0 	bl	8015b14 <uxr_serialize_DELETE_Payload>
 8012d94:	4620      	mov	r0, r4
 8012d96:	b00f      	add	sp, #60	; 0x3c
 8012d98:	bd30      	pop	{r4, r5, pc}
 8012d9a:	bf00      	nop

08012d9c <uxr_common_create_entity>:
 8012d9c:	b530      	push	{r4, r5, lr}
 8012d9e:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8012da2:	b08d      	sub	sp, #52	; 0x34
 8012da4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012da8:	2d01      	cmp	r5, #1
 8012daa:	bf0c      	ite	eq
 8012dac:	f003 0201 	andeq.w	r2, r3, #1
 8012db0:	2200      	movne	r2, #0
 8012db2:	330e      	adds	r3, #14
 8012db4:	4604      	mov	r4, r0
 8012db6:	441a      	add	r2, r3
 8012db8:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8012dbc:	9001      	str	r0, [sp, #4]
 8012dbe:	2101      	movs	r1, #1
 8012dc0:	9100      	str	r1, [sp, #0]
 8012dc2:	b292      	uxth	r2, r2
 8012dc4:	9903      	ldr	r1, [sp, #12]
 8012dc6:	ab04      	add	r3, sp, #16
 8012dc8:	4620      	mov	r0, r4
 8012dca:	f001 f92d 	bl	8014028 <uxr_prepare_stream_to_write_submessage>
 8012dce:	b918      	cbnz	r0, 8012dd8 <uxr_common_create_entity+0x3c>
 8012dd0:	4604      	mov	r4, r0
 8012dd2:	4620      	mov	r0, r4
 8012dd4:	b00d      	add	sp, #52	; 0x34
 8012dd6:	bd30      	pop	{r4, r5, pc}
 8012dd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012dda:	9902      	ldr	r1, [sp, #8]
 8012ddc:	4620      	mov	r0, r4
 8012dde:	f001 fa59 	bl	8014294 <uxr_init_base_object_request>
 8012de2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012de4:	4604      	mov	r4, r0
 8012de6:	a804      	add	r0, sp, #16
 8012de8:	f002 fdfc 	bl	80159e4 <uxr_serialize_CREATE_Payload>
 8012dec:	4620      	mov	r0, r4
 8012dee:	b00d      	add	sp, #52	; 0x34
 8012df0:	bd30      	pop	{r4, r5, pc}
 8012df2:	bf00      	nop

08012df4 <uxr_buffer_create_participant_bin>:
 8012df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012df6:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8012dfa:	ac11      	add	r4, sp, #68	; 0x44
 8012dfc:	9103      	str	r1, [sp, #12]
 8012dfe:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 8012e00:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 8012e04:	2103      	movs	r1, #3
 8012e06:	7221      	strb	r1, [r4, #8]
 8012e08:	2301      	movs	r3, #1
 8012e0a:	2100      	movs	r1, #0
 8012e0c:	7123      	strb	r3, [r4, #4]
 8012e0e:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 8012e12:	9202      	str	r2, [sp, #8]
 8012e14:	4605      	mov	r5, r0
 8012e16:	f88d 1014 	strb.w	r1, [sp, #20]
 8012e1a:	b1ce      	cbz	r6, 8012e50 <uxr_buffer_create_participant_bin+0x5c>
 8012e1c:	f88d 301c 	strb.w	r3, [sp, #28]
 8012e20:	9608      	str	r6, [sp, #32]
 8012e22:	a809      	add	r0, sp, #36	; 0x24
 8012e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012e28:	a915      	add	r1, sp, #84	; 0x54
 8012e2a:	f7ff feb9 	bl	8012ba0 <ucdr_init_buffer>
 8012e2e:	a905      	add	r1, sp, #20
 8012e30:	a809      	add	r0, sp, #36	; 0x24
 8012e32:	f002 fb1f 	bl	8015474 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8012e36:	980d      	ldr	r0, [sp, #52]	; 0x34
 8012e38:	9401      	str	r4, [sp, #4]
 8012e3a:	b283      	uxth	r3, r0
 8012e3c:	9700      	str	r7, [sp, #0]
 8012e3e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012e42:	60e0      	str	r0, [r4, #12]
 8012e44:	4628      	mov	r0, r5
 8012e46:	f7ff ffa9 	bl	8012d9c <uxr_common_create_entity>
 8012e4a:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 8012e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e50:	f88d 601c 	strb.w	r6, [sp, #28]
 8012e54:	e7e5      	b.n	8012e22 <uxr_buffer_create_participant_bin+0x2e>
 8012e56:	bf00      	nop

08012e58 <uxr_buffer_create_topic_bin>:
 8012e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e5a:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8012e5e:	ac13      	add	r4, sp, #76	; 0x4c
 8012e60:	4605      	mov	r5, r0
 8012e62:	9105      	str	r1, [sp, #20]
 8012e64:	4618      	mov	r0, r3
 8012e66:	a997      	add	r1, sp, #604	; 0x25c
 8012e68:	2602      	movs	r6, #2
 8012e6a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012e6e:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 8012e72:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 8012e76:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 8012e78:	f000 fa60 	bl	801333c <uxr_object_id_to_raw>
 8012e7c:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 8012e7e:	9206      	str	r2, [sp, #24]
 8012e80:	2303      	movs	r3, #3
 8012e82:	2101      	movs	r1, #1
 8012e84:	7223      	strb	r3, [r4, #8]
 8012e86:	a80b      	add	r0, sp, #44	; 0x2c
 8012e88:	2300      	movs	r3, #0
 8012e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012e8e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8012e92:	a917      	add	r1, sp, #92	; 0x5c
 8012e94:	f88d 301c 	strb.w	r3, [sp, #28]
 8012e98:	960a      	str	r6, [sp, #40]	; 0x28
 8012e9a:	f7ff fe81 	bl	8012ba0 <ucdr_init_buffer>
 8012e9e:	a906      	add	r1, sp, #24
 8012ea0:	a80b      	add	r0, sp, #44	; 0x2c
 8012ea2:	f002 fb09 	bl	80154b8 <uxr_serialize_OBJK_Topic_Binary>
 8012ea6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8012ea8:	9401      	str	r4, [sp, #4]
 8012eaa:	9700      	str	r7, [sp, #0]
 8012eac:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012eb0:	4628      	mov	r0, r5
 8012eb2:	b2b3      	uxth	r3, r6
 8012eb4:	60e6      	str	r6, [r4, #12]
 8012eb6:	f7ff ff71 	bl	8012d9c <uxr_common_create_entity>
 8012eba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8012ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012ec0 <uxr_buffer_create_publisher_bin>:
 8012ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ec2:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8012ec6:	ac0e      	add	r4, sp, #56	; 0x38
 8012ec8:	4605      	mov	r5, r0
 8012eca:	9105      	str	r1, [sp, #20]
 8012ecc:	4618      	mov	r0, r3
 8012ece:	2603      	movs	r6, #3
 8012ed0:	a992      	add	r1, sp, #584	; 0x248
 8012ed2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012ed6:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8012eda:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8012ede:	f000 fa2d 	bl	801333c <uxr_object_id_to_raw>
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	a806      	add	r0, sp, #24
 8012ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012eea:	a912      	add	r1, sp, #72	; 0x48
 8012eec:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8012ef0:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8012ef4:	7226      	strb	r6, [r4, #8]
 8012ef6:	f7ff fe53 	bl	8012ba0 <ucdr_init_buffer>
 8012efa:	a993      	add	r1, sp, #588	; 0x24c
 8012efc:	a806      	add	r0, sp, #24
 8012efe:	f002 fb8f 	bl	8015620 <uxr_serialize_OBJK_Publisher_Binary>
 8012f02:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012f04:	9700      	str	r7, [sp, #0]
 8012f06:	9401      	str	r4, [sp, #4]
 8012f08:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012f0c:	4628      	mov	r0, r5
 8012f0e:	b2b3      	uxth	r3, r6
 8012f10:	60e6      	str	r6, [r4, #12]
 8012f12:	f7ff ff43 	bl	8012d9c <uxr_common_create_entity>
 8012f16:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8012f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012f1c <uxr_buffer_create_subscriber_bin>:
 8012f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f1e:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8012f22:	ac0e      	add	r4, sp, #56	; 0x38
 8012f24:	4605      	mov	r5, r0
 8012f26:	9105      	str	r1, [sp, #20]
 8012f28:	4618      	mov	r0, r3
 8012f2a:	a992      	add	r1, sp, #584	; 0x248
 8012f2c:	2604      	movs	r6, #4
 8012f2e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012f32:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8012f36:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8012f3a:	f000 f9ff 	bl	801333c <uxr_object_id_to_raw>
 8012f3e:	2103      	movs	r1, #3
 8012f40:	2300      	movs	r3, #0
 8012f42:	a806      	add	r0, sp, #24
 8012f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f48:	7221      	strb	r1, [r4, #8]
 8012f4a:	a912      	add	r1, sp, #72	; 0x48
 8012f4c:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8012f50:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8012f54:	f7ff fe24 	bl	8012ba0 <ucdr_init_buffer>
 8012f58:	a993      	add	r1, sp, #588	; 0x24c
 8012f5a:	a806      	add	r0, sp, #24
 8012f5c:	f002 fc10 	bl	8015780 <uxr_serialize_OBJK_Subscriber_Binary>
 8012f60:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012f62:	9700      	str	r7, [sp, #0]
 8012f64:	9401      	str	r4, [sp, #4]
 8012f66:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012f6a:	4628      	mov	r0, r5
 8012f6c:	b2b3      	uxth	r3, r6
 8012f6e:	60e6      	str	r6, [r4, #12]
 8012f70:	f7ff ff14 	bl	8012d9c <uxr_common_create_entity>
 8012f74:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8012f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f7a:	bf00      	nop

08012f7c <uxr_buffer_create_datawriter_bin>:
 8012f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f80:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8012f84:	ac1d      	add	r4, sp, #116	; 0x74
 8012f86:	f8bd 92bc 	ldrh.w	r9, [sp, #700]	; 0x2bc
 8012f8a:	9105      	str	r1, [sp, #20]
 8012f8c:	2605      	movs	r6, #5
 8012f8e:	a9a1      	add	r1, sp, #644	; 0x284
 8012f90:	4605      	mov	r5, r0
 8012f92:	4618      	mov	r0, r3
 8012f94:	9204      	str	r2, [sp, #16]
 8012f96:	9303      	str	r3, [sp, #12]
 8012f98:	f89d b2b4 	ldrb.w	fp, [sp, #692]	; 0x2b4
 8012f9c:	7126      	strb	r6, [r4, #4]
 8012f9e:	f89d a2b8 	ldrb.w	sl, [sp, #696]	; 0x2b8
 8012fa2:	f89d 62c0 	ldrb.w	r6, [sp, #704]	; 0x2c0
 8012fa6:	f89d 82c4 	ldrb.w	r8, [sp, #708]	; 0x2c4
 8012faa:	2703      	movs	r7, #3
 8012fac:	f000 f9c6 	bl	801333c <uxr_object_id_to_raw>
 8012fb0:	a90e      	add	r1, sp, #56	; 0x38
 8012fb2:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
 8012fb4:	7227      	strb	r7, [r4, #8]
 8012fb6:	f000 f9c1 	bl	801333c <uxr_object_id_to_raw>
 8012fba:	f1b9 0100 	subs.w	r1, r9, #0
 8012fbe:	f04f 0300 	mov.w	r3, #0
 8012fc2:	bf18      	it	ne
 8012fc4:	2101      	movne	r1, #1
 8012fc6:	2201      	movs	r2, #1
 8012fc8:	f8ad 9044 	strh.w	r9, [sp, #68]	; 0x44
 8012fcc:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
 8012fd0:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8012fd4:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8012fd8:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8012fdc:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8012fe0:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8012fe4:	f1bb 0f00 	cmp.w	fp, #0
 8012fe8:	d131      	bne.n	801304e <uxr_buffer_create_datawriter_bin+0xd2>
 8012fea:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
 8012fee:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8012ff2:	f04f 0c12 	mov.w	ip, #18
 8012ff6:	200a      	movs	r0, #10
 8012ff8:	2320      	movs	r3, #32
 8012ffa:	2210      	movs	r2, #16
 8012ffc:	2108      	movs	r1, #8
 8012ffe:	2702      	movs	r7, #2
 8013000:	f1ba 0f00 	cmp.w	sl, #0
 8013004:	d004      	beq.n	8013010 <uxr_buffer_create_datawriter_bin+0x94>
 8013006:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 801300a:	4673      	mov	r3, lr
 801300c:	4662      	mov	r2, ip
 801300e:	4601      	mov	r1, r0
 8013010:	2e02      	cmp	r6, #2
 8013012:	d027      	beq.n	8013064 <uxr_buffer_create_datawriter_bin+0xe8>
 8013014:	2e03      	cmp	r6, #3
 8013016:	d02b      	beq.n	8013070 <uxr_buffer_create_datawriter_bin+0xf4>
 8013018:	2e01      	cmp	r6, #1
 801301a:	d026      	beq.n	801306a <uxr_buffer_create_datawriter_bin+0xee>
 801301c:	a806      	add	r0, sp, #24
 801301e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013022:	a921      	add	r1, sp, #132	; 0x84
 8013024:	f7ff fdbc 	bl	8012ba0 <ucdr_init_buffer>
 8013028:	a90e      	add	r1, sp, #56	; 0x38
 801302a:	a806      	add	r0, sp, #24
 801302c:	f002 fc5a 	bl	80158e4 <uxr_serialize_OBJK_DataWriter_Binary>
 8013030:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013032:	9401      	str	r4, [sp, #4]
 8013034:	b283      	uxth	r3, r0
 8013036:	f8cd 8000 	str.w	r8, [sp]
 801303a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801303e:	60e0      	str	r0, [r4, #12]
 8013040:	4628      	mov	r0, r5
 8013042:	f7ff feab 	bl	8012d9c <uxr_common_create_entity>
 8013046:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801304a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801304e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8013052:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8013056:	f04f 0c13 	mov.w	ip, #19
 801305a:	200b      	movs	r0, #11
 801305c:	2321      	movs	r3, #33	; 0x21
 801305e:	2211      	movs	r2, #17
 8013060:	2109      	movs	r1, #9
 8013062:	e7cd      	b.n	8013000 <uxr_buffer_create_datawriter_bin+0x84>
 8013064:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8013068:	e7d8      	b.n	801301c <uxr_buffer_create_datawriter_bin+0xa0>
 801306a:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 801306e:	e7d5      	b.n	801301c <uxr_buffer_create_datawriter_bin+0xa0>
 8013070:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8013074:	e7d2      	b.n	801301c <uxr_buffer_create_datawriter_bin+0xa0>
 8013076:	bf00      	nop

08013078 <uxr_buffer_create_datareader_bin>:
 8013078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801307c:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8013080:	ac1f      	add	r4, sp, #124	; 0x7c
 8013082:	f8bd 92c4 	ldrh.w	r9, [sp, #708]	; 0x2c4
 8013086:	9105      	str	r1, [sp, #20]
 8013088:	2606      	movs	r6, #6
 801308a:	a9a3      	add	r1, sp, #652	; 0x28c
 801308c:	4605      	mov	r5, r0
 801308e:	4618      	mov	r0, r3
 8013090:	9204      	str	r2, [sp, #16]
 8013092:	9303      	str	r3, [sp, #12]
 8013094:	f89d b2bc 	ldrb.w	fp, [sp, #700]	; 0x2bc
 8013098:	7126      	strb	r6, [r4, #4]
 801309a:	f89d a2c0 	ldrb.w	sl, [sp, #704]	; 0x2c0
 801309e:	f89d 62c8 	ldrb.w	r6, [sp, #712]	; 0x2c8
 80130a2:	f89d 82cc 	ldrb.w	r8, [sp, #716]	; 0x2cc
 80130a6:	2703      	movs	r7, #3
 80130a8:	f000 f948 	bl	801333c <uxr_object_id_to_raw>
 80130ac:	a90e      	add	r1, sp, #56	; 0x38
 80130ae:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
 80130b0:	7227      	strb	r7, [r4, #8]
 80130b2:	f000 f943 	bl	801333c <uxr_object_id_to_raw>
 80130b6:	f1b9 0100 	subs.w	r1, r9, #0
 80130ba:	f04f 0300 	mov.w	r3, #0
 80130be:	bf18      	it	ne
 80130c0:	2101      	movne	r1, #1
 80130c2:	2201      	movs	r2, #1
 80130c4:	f8ad 9044 	strh.w	r9, [sp, #68]	; 0x44
 80130c8:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
 80130cc:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 80130d0:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 80130d4:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 80130d8:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80130dc:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 80130e0:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80130e4:	f1bb 0f00 	cmp.w	fp, #0
 80130e8:	d131      	bne.n	801314e <uxr_buffer_create_datareader_bin+0xd6>
 80130ea:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
 80130ee:	f04f 0e22 	mov.w	lr, #34	; 0x22
 80130f2:	f04f 0c12 	mov.w	ip, #18
 80130f6:	200a      	movs	r0, #10
 80130f8:	2320      	movs	r3, #32
 80130fa:	2210      	movs	r2, #16
 80130fc:	2108      	movs	r1, #8
 80130fe:	2702      	movs	r7, #2
 8013100:	f1ba 0f00 	cmp.w	sl, #0
 8013104:	d004      	beq.n	8013110 <uxr_buffer_create_datareader_bin+0x98>
 8013106:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 801310a:	4673      	mov	r3, lr
 801310c:	4662      	mov	r2, ip
 801310e:	4601      	mov	r1, r0
 8013110:	2e02      	cmp	r6, #2
 8013112:	d027      	beq.n	8013164 <uxr_buffer_create_datareader_bin+0xec>
 8013114:	2e03      	cmp	r6, #3
 8013116:	d02b      	beq.n	8013170 <uxr_buffer_create_datareader_bin+0xf8>
 8013118:	2e01      	cmp	r6, #1
 801311a:	d026      	beq.n	801316a <uxr_buffer_create_datareader_bin+0xf2>
 801311c:	a806      	add	r0, sp, #24
 801311e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013122:	a923      	add	r1, sp, #140	; 0x8c
 8013124:	f7ff fd3c 	bl	8012ba0 <ucdr_init_buffer>
 8013128:	a90e      	add	r1, sp, #56	; 0x38
 801312a:	a806      	add	r0, sp, #24
 801312c:	f002 fb9e 	bl	801586c <uxr_serialize_OBJK_DataReader_Binary>
 8013130:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013132:	9401      	str	r4, [sp, #4]
 8013134:	b283      	uxth	r3, r0
 8013136:	f8cd 8000 	str.w	r8, [sp]
 801313a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801313e:	60e0      	str	r0, [r4, #12]
 8013140:	4628      	mov	r0, r5
 8013142:	f7ff fe2b 	bl	8012d9c <uxr_common_create_entity>
 8013146:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 801314a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801314e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8013152:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8013156:	f04f 0c13 	mov.w	ip, #19
 801315a:	200b      	movs	r0, #11
 801315c:	2321      	movs	r3, #33	; 0x21
 801315e:	2211      	movs	r2, #17
 8013160:	2109      	movs	r1, #9
 8013162:	e7cd      	b.n	8013100 <uxr_buffer_create_datareader_bin+0x88>
 8013164:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8013168:	e7d8      	b.n	801311c <uxr_buffer_create_datareader_bin+0xa4>
 801316a:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 801316e:	e7d5      	b.n	801311c <uxr_buffer_create_datareader_bin+0xa4>
 8013170:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8013174:	e7d2      	b.n	801311c <uxr_buffer_create_datareader_bin+0xa4>
 8013176:	bf00      	nop

08013178 <get_custom_error>:
 8013178:	4b01      	ldr	r3, [pc, #4]	; (8013180 <get_custom_error+0x8>)
 801317a:	7818      	ldrb	r0, [r3, #0]
 801317c:	4770      	bx	lr
 801317e:	bf00      	nop
 8013180:	2001046c 	.word	0x2001046c

08013184 <recv_custom_msg>:
 8013184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013188:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801318c:	b089      	sub	sp, #36	; 0x24
 801318e:	2600      	movs	r6, #0
 8013190:	4604      	mov	r4, r0
 8013192:	9305      	str	r3, [sp, #20]
 8013194:	468a      	mov	sl, r1
 8013196:	4693      	mov	fp, r2
 8013198:	f88d 601e 	strb.w	r6, [sp, #30]
 801319c:	b325      	cbz	r5, 80131e8 <recv_custom_msg+0x64>
 801319e:	f200 2902 	addw	r9, r0, #514	; 0x202
 80131a2:	f10d 081f 	add.w	r8, sp, #31
 80131a6:	af05      	add	r7, sp, #20
 80131a8:	f10d 061e 	add.w	r6, sp, #30
 80131ac:	f44f 7500 	mov.w	r5, #512	; 0x200
 80131b0:	e002      	b.n	80131b8 <recv_custom_msg+0x34>
 80131b2:	9b05      	ldr	r3, [sp, #20]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	dd0f      	ble.n	80131d8 <recv_custom_msg+0x54>
 80131b8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80131bc:	e9cd 5600 	strd	r5, r6, [sp]
 80131c0:	4623      	mov	r3, r4
 80131c2:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 80131c6:	4622      	mov	r2, r4
 80131c8:	4648      	mov	r0, r9
 80131ca:	f001 fa87 	bl	80146dc <uxr_read_framed_msg>
 80131ce:	2800      	cmp	r0, #0
 80131d0:	d0ef      	beq.n	80131b2 <recv_custom_msg+0x2e>
 80131d2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80131d6:	b1b3      	cbz	r3, 8013206 <recv_custom_msg+0x82>
 80131d8:	4b0f      	ldr	r3, [pc, #60]	; (8013218 <recv_custom_msg+0x94>)
 80131da:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80131de:	701a      	strb	r2, [r3, #0]
 80131e0:	2000      	movs	r0, #0
 80131e2:	b009      	add	sp, #36	; 0x24
 80131e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131e8:	f10d 021f 	add.w	r2, sp, #31
 80131ec:	9200      	str	r2, [sp, #0]
 80131ee:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 80131f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80131f6:	4601      	mov	r1, r0
 80131f8:	47a8      	blx	r5
 80131fa:	2800      	cmp	r0, #0
 80131fc:	d0ec      	beq.n	80131d8 <recv_custom_msg+0x54>
 80131fe:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d1e8      	bne.n	80131d8 <recv_custom_msg+0x54>
 8013206:	f8cb 0000 	str.w	r0, [fp]
 801320a:	2001      	movs	r0, #1
 801320c:	f8ca 4000 	str.w	r4, [sl]
 8013210:	b009      	add	sp, #36	; 0x24
 8013212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013216:	bf00      	nop
 8013218:	2001046c 	.word	0x2001046c

0801321c <send_custom_msg>:
 801321c:	b570      	push	{r4, r5, r6, lr}
 801321e:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8013222:	b086      	sub	sp, #24
 8013224:	4616      	mov	r6, r2
 8013226:	b975      	cbnz	r5, 8013246 <send_custom_msg+0x2a>
 8013228:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 801322c:	f10d 0317 	add.w	r3, sp, #23
 8013230:	47a0      	blx	r4
 8013232:	b108      	cbz	r0, 8013238 <send_custom_msg+0x1c>
 8013234:	42b0      	cmp	r0, r6
 8013236:	d015      	beq.n	8013264 <send_custom_msg+0x48>
 8013238:	4b0c      	ldr	r3, [pc, #48]	; (801326c <send_custom_msg+0x50>)
 801323a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801323e:	701a      	strb	r2, [r3, #0]
 8013240:	2000      	movs	r0, #0
 8013242:	b006      	add	sp, #24
 8013244:	bd70      	pop	{r4, r5, r6, pc}
 8013246:	460b      	mov	r3, r1
 8013248:	2200      	movs	r2, #0
 801324a:	f10d 0117 	add.w	r1, sp, #23
 801324e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8013252:	9600      	str	r6, [sp, #0]
 8013254:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8013258:	4602      	mov	r2, r0
 801325a:	f200 2002 	addw	r0, r0, #514	; 0x202
 801325e:	f001 f84f 	bl	8014300 <uxr_write_framed_msg>
 8013262:	e7e6      	b.n	8013232 <send_custom_msg+0x16>
 8013264:	2001      	movs	r0, #1
 8013266:	b006      	add	sp, #24
 8013268:	bd70      	pop	{r4, r5, r6, pc}
 801326a:	bf00      	nop
 801326c:	2001046c 	.word	0x2001046c

08013270 <uxr_set_custom_transport_callbacks>:
 8013270:	b430      	push	{r4, r5}
 8013272:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8013276:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 801327a:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 801327e:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8013282:	bc30      	pop	{r4, r5}
 8013284:	4770      	bx	lr
 8013286:	bf00      	nop

08013288 <uxr_init_custom_transport>:
 8013288:	b538      	push	{r3, r4, r5, lr}
 801328a:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801328e:	b303      	cbz	r3, 80132d2 <uxr_init_custom_transport+0x4a>
 8013290:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8013294:	4604      	mov	r4, r0
 8013296:	b1e2      	cbz	r2, 80132d2 <uxr_init_custom_transport+0x4a>
 8013298:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 801329c:	b1ca      	cbz	r2, 80132d2 <uxr_init_custom_transport+0x4a>
 801329e:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 80132a2:	b1b2      	cbz	r2, 80132d2 <uxr_init_custom_transport+0x4a>
 80132a4:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 80132a8:	4798      	blx	r3
 80132aa:	4605      	mov	r5, r0
 80132ac:	b188      	cbz	r0, 80132d2 <uxr_init_custom_transport+0x4a>
 80132ae:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80132b2:	b98b      	cbnz	r3, 80132d8 <uxr_init_custom_transport+0x50>
 80132b4:	480b      	ldr	r0, [pc, #44]	; (80132e4 <uxr_init_custom_transport+0x5c>)
 80132b6:	490c      	ldr	r1, [pc, #48]	; (80132e8 <uxr_init_custom_transport+0x60>)
 80132b8:	4a0c      	ldr	r2, [pc, #48]	; (80132ec <uxr_init_custom_transport+0x64>)
 80132ba:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 80132be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80132c2:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 80132c6:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 80132ca:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 80132ce:	4628      	mov	r0, r5
 80132d0:	bd38      	pop	{r3, r4, r5, pc}
 80132d2:	2500      	movs	r5, #0
 80132d4:	4628      	mov	r0, r5
 80132d6:	bd38      	pop	{r3, r4, r5, pc}
 80132d8:	2100      	movs	r1, #0
 80132da:	f204 2002 	addw	r0, r4, #514	; 0x202
 80132de:	f001 f809 	bl	80142f4 <uxr_init_framing_io>
 80132e2:	e7e7      	b.n	80132b4 <uxr_init_custom_transport+0x2c>
 80132e4:	0801321d 	.word	0x0801321d
 80132e8:	08013185 	.word	0x08013185
 80132ec:	08013179 	.word	0x08013179

080132f0 <uxr_close_custom_transport>:
 80132f0:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80132f4:	4718      	bx	r3
 80132f6:	bf00      	nop

080132f8 <uxr_object_id>:
 80132f8:	b082      	sub	sp, #8
 80132fa:	2300      	movs	r3, #0
 80132fc:	f88d 1006 	strb.w	r1, [sp, #6]
 8013300:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013304:	f360 030f 	bfi	r3, r0, #0, #16
 8013308:	f362 431f 	bfi	r3, r2, #16, #16
 801330c:	4618      	mov	r0, r3
 801330e:	b002      	add	sp, #8
 8013310:	4770      	bx	lr
 8013312:	bf00      	nop

08013314 <uxr_object_id_from_raw>:
 8013314:	7843      	ldrb	r3, [r0, #1]
 8013316:	7801      	ldrb	r1, [r0, #0]
 8013318:	b082      	sub	sp, #8
 801331a:	f003 000f 	and.w	r0, r3, #15
 801331e:	f88d 0006 	strb.w	r0, [sp, #6]
 8013322:	091b      	lsrs	r3, r3, #4
 8013324:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8013328:	2200      	movs	r2, #0
 801332a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801332e:	f363 020f 	bfi	r2, r3, #0, #16
 8013332:	f361 421f 	bfi	r2, r1, #16, #16
 8013336:	4610      	mov	r0, r2
 8013338:	b002      	add	sp, #8
 801333a:	4770      	bx	lr

0801333c <uxr_object_id_to_raw>:
 801333c:	4602      	mov	r2, r0
 801333e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8013342:	b082      	sub	sp, #8
 8013344:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8013348:	f3c2 120b 	ubfx	r2, r2, #4, #12
 801334c:	700a      	strb	r2, [r1, #0]
 801334e:	704b      	strb	r3, [r1, #1]
 8013350:	b002      	add	sp, #8
 8013352:	4770      	bx	lr

08013354 <uxr_buffer_request_data>:
 8013354:	b530      	push	{r4, r5, lr}
 8013356:	b095      	sub	sp, #84	; 0x54
 8013358:	4604      	mov	r4, r0
 801335a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801335c:	9105      	str	r1, [sp, #20]
 801335e:	2d00      	cmp	r5, #0
 8013360:	bf14      	ite	ne
 8013362:	2101      	movne	r1, #1
 8013364:	2100      	moveq	r1, #0
 8013366:	9204      	str	r2, [sp, #16]
 8013368:	f04f 0200 	mov.w	r2, #0
 801336c:	9303      	str	r3, [sp, #12]
 801336e:	f88d 301c 	strb.w	r3, [sp, #28]
 8013372:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8013376:	f88d 201d 	strb.w	r2, [sp, #29]
 801337a:	f88d 201e 	strb.w	r2, [sp, #30]
 801337e:	d021      	beq.n	80133c4 <uxr_buffer_request_data+0x70>
 8013380:	686a      	ldr	r2, [r5, #4]
 8013382:	682b      	ldr	r3, [r5, #0]
 8013384:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 8013388:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 801338c:	2210      	movs	r2, #16
 801338e:	2000      	movs	r0, #0
 8013390:	2108      	movs	r1, #8
 8013392:	e9cd 1000 	strd	r1, r0, [sp]
 8013396:	ab0c      	add	r3, sp, #48	; 0x30
 8013398:	9905      	ldr	r1, [sp, #20]
 801339a:	4620      	mov	r0, r4
 801339c:	f000 fe44 	bl	8014028 <uxr_prepare_stream_to_write_submessage>
 80133a0:	b918      	cbnz	r0, 80133aa <uxr_buffer_request_data+0x56>
 80133a2:	4604      	mov	r4, r0
 80133a4:	4620      	mov	r0, r4
 80133a6:	b015      	add	sp, #84	; 0x54
 80133a8:	bd30      	pop	{r4, r5, pc}
 80133aa:	9904      	ldr	r1, [sp, #16]
 80133ac:	aa06      	add	r2, sp, #24
 80133ae:	4620      	mov	r0, r4
 80133b0:	f000 ff70 	bl	8014294 <uxr_init_base_object_request>
 80133b4:	a906      	add	r1, sp, #24
 80133b6:	4604      	mov	r4, r0
 80133b8:	a80c      	add	r0, sp, #48	; 0x30
 80133ba:	f002 fc09 	bl	8015bd0 <uxr_serialize_READ_DATA_Payload>
 80133be:	4620      	mov	r0, r4
 80133c0:	b015      	add	sp, #84	; 0x54
 80133c2:	bd30      	pop	{r4, r5, pc}
 80133c4:	2208      	movs	r2, #8
 80133c6:	e7e2      	b.n	801338e <uxr_buffer_request_data+0x3a>

080133c8 <read_submessage_format>:
 80133c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133cc:	b095      	sub	sp, #84	; 0x54
 80133ce:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 80133d2:	b113      	cbz	r3, 80133da <read_submessage_format+0x12>
 80133d4:	b015      	add	sp, #84	; 0x54
 80133d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133da:	460c      	mov	r4, r1
 80133dc:	4616      	mov	r6, r2
 80133de:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80133e2:	461d      	mov	r5, r3
 80133e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80133e6:	9304      	str	r3, [sp, #16]
 80133e8:	1a52      	subs	r2, r2, r1
 80133ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80133ec:	9305      	str	r3, [sp, #20]
 80133ee:	4607      	mov	r7, r0
 80133f0:	a80c      	add	r0, sp, #48	; 0x30
 80133f2:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 80133f6:	f7ff fbd3 	bl	8012ba0 <ucdr_init_buffer>
 80133fa:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80133fe:	a80c      	add	r0, sp, #48	; 0x30
 8013400:	f7ff fba4 	bl	8012b4c <ucdr_set_on_full_buffer_callback>
 8013404:	69e3      	ldr	r3, [r4, #28]
 8013406:	b193      	cbz	r3, 801342e <read_submessage_format+0x66>
 8013408:	f1b8 0f07 	cmp.w	r8, #7
 801340c:	751d      	strb	r5, [r3, #20]
 801340e:	d03e      	beq.n	801348e <read_submessage_format+0xc6>
 8013410:	f1b8 0f08 	cmp.w	r8, #8
 8013414:	d02c      	beq.n	8013470 <read_submessage_format+0xa8>
 8013416:	f1b8 0f06 	cmp.w	r8, #6
 801341a:	d011      	beq.n	8013440 <read_submessage_format+0x78>
 801341c:	2201      	movs	r2, #1
 801341e:	751a      	strb	r2, [r3, #20]
 8013420:	4631      	mov	r1, r6
 8013422:	4620      	mov	r0, r4
 8013424:	f7ff fc10 	bl	8012c48 <ucdr_advance_buffer>
 8013428:	b015      	add	sp, #84	; 0x54
 801342a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801342e:	f1b8 0f07 	cmp.w	r8, #7
 8013432:	d02c      	beq.n	801348e <read_submessage_format+0xc6>
 8013434:	f1b8 0f08 	cmp.w	r8, #8
 8013438:	d01a      	beq.n	8013470 <read_submessage_format+0xa8>
 801343a:	f1b8 0f06 	cmp.w	r8, #6
 801343e:	d1ef      	bne.n	8013420 <read_submessage_format+0x58>
 8013440:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8013444:	b18d      	cbz	r5, 801346a <read_submessage_format+0xa2>
 8013446:	2306      	movs	r3, #6
 8013448:	f88d 3016 	strb.w	r3, [sp, #22]
 801344c:	aa0c      	add	r2, sp, #48	; 0x30
 801344e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013452:	9302      	str	r3, [sp, #8]
 8013454:	9200      	str	r2, [sp, #0]
 8013456:	9b04      	ldr	r3, [sp, #16]
 8013458:	9905      	ldr	r1, [sp, #20]
 801345a:	9601      	str	r6, [sp, #4]
 801345c:	464a      	mov	r2, r9
 801345e:	4638      	mov	r0, r7
 8013460:	47a8      	blx	r5
 8013462:	2301      	movs	r3, #1
 8013464:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8013468:	69e3      	ldr	r3, [r4, #28]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d1d6      	bne.n	801341c <read_submessage_format+0x54>
 801346e:	e7d7      	b.n	8013420 <read_submessage_format+0x58>
 8013470:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013474:	2a00      	cmp	r2, #0
 8013476:	d0f8      	beq.n	801346a <read_submessage_format+0xa2>
 8013478:	a906      	add	r1, sp, #24
 801347a:	a80c      	add	r0, sp, #48	; 0x30
 801347c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801347e:	f002 fc7b 	bl	8015d78 <uxr_deserialize_SampleIdentity>
 8013482:	2800      	cmp	r0, #0
 8013484:	d13c      	bne.n	8013500 <read_submessage_format+0x138>
 8013486:	69e3      	ldr	r3, [r4, #28]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d1c7      	bne.n	801341c <read_submessage_format+0x54>
 801348c:	e7c8      	b.n	8013420 <read_submessage_format+0x58>
 801348e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8013492:	b132      	cbz	r2, 80134a2 <read_submessage_format+0xda>
 8013494:	a906      	add	r1, sp, #24
 8013496:	a80c      	add	r0, sp, #48	; 0x30
 8013498:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801349a:	f002 fa4f 	bl	801593c <uxr_deserialize_BaseObjectRequest>
 801349e:	b930      	cbnz	r0, 80134ae <read_submessage_format+0xe6>
 80134a0:	69e3      	ldr	r3, [r4, #28]
 80134a2:	68a2      	ldr	r2, [r4, #8]
 80134a4:	4432      	add	r2, r6
 80134a6:	60a2      	str	r2, [r4, #8]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d1b7      	bne.n	801341c <read_submessage_format+0x54>
 80134ac:	e7b8      	b.n	8013420 <read_submessage_format+0x58>
 80134ae:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80134b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80134b4:	1a52      	subs	r2, r2, r1
 80134b6:	a80c      	add	r0, sp, #48	; 0x30
 80134b8:	1aed      	subs	r5, r5, r3
 80134ba:	f7ff fb71 	bl	8012ba0 <ucdr_init_buffer>
 80134be:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80134c2:	a80c      	add	r0, sp, #48	; 0x30
 80134c4:	f7ff fb42 	bl	8012b4c <ucdr_set_on_full_buffer_callback>
 80134c8:	4435      	add	r5, r6
 80134ca:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80134ce:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80134d2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80134d6:	9002      	str	r0, [sp, #8]
 80134d8:	2207      	movs	r2, #7
 80134da:	f88d 2016 	strb.w	r2, [sp, #22]
 80134de:	b2ad      	uxth	r5, r5
 80134e0:	aa0c      	add	r2, sp, #48	; 0x30
 80134e2:	9200      	str	r2, [sp, #0]
 80134e4:	9501      	str	r5, [sp, #4]
 80134e6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80134ea:	b29b      	uxth	r3, r3
 80134ec:	9905      	ldr	r1, [sp, #20]
 80134ee:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 80134f2:	464a      	mov	r2, r9
 80134f4:	4638      	mov	r0, r7
 80134f6:	47a8      	blx	r5
 80134f8:	2301      	movs	r3, #1
 80134fa:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80134fe:	e7cf      	b.n	80134a0 <read_submessage_format+0xd8>
 8013500:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8013504:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013506:	1a52      	subs	r2, r2, r1
 8013508:	a80c      	add	r0, sp, #48	; 0x30
 801350a:	1aed      	subs	r5, r5, r3
 801350c:	f7ff fb48 	bl	8012ba0 <ucdr_init_buffer>
 8013510:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013514:	a80c      	add	r0, sp, #48	; 0x30
 8013516:	f7ff fb19 	bl	8012b4c <ucdr_set_on_full_buffer_callback>
 801351a:	4435      	add	r5, r6
 801351c:	2308      	movs	r3, #8
 801351e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8013522:	f88d 3016 	strb.w	r3, [sp, #22]
 8013526:	b2ad      	uxth	r5, r5
 8013528:	ab0c      	add	r3, sp, #48	; 0x30
 801352a:	9300      	str	r3, [sp, #0]
 801352c:	9002      	str	r0, [sp, #8]
 801352e:	9501      	str	r5, [sp, #4]
 8013530:	ab06      	add	r3, sp, #24
 8013532:	9905      	ldr	r1, [sp, #20]
 8013534:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 8013538:	464a      	mov	r2, r9
 801353a:	4638      	mov	r0, r7
 801353c:	47a8      	blx	r5
 801353e:	2301      	movs	r3, #1
 8013540:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8013544:	e79f      	b.n	8013486 <read_submessage_format+0xbe>
 8013546:	bf00      	nop

08013548 <on_get_fragmentation_info>:
 8013548:	b500      	push	{lr}
 801354a:	b08b      	sub	sp, #44	; 0x2c
 801354c:	4601      	mov	r1, r0
 801354e:	2204      	movs	r2, #4
 8013550:	a802      	add	r0, sp, #8
 8013552:	f7ff fb25 	bl	8012ba0 <ucdr_init_buffer>
 8013556:	f10d 0305 	add.w	r3, sp, #5
 801355a:	a802      	add	r0, sp, #8
 801355c:	f10d 0206 	add.w	r2, sp, #6
 8013560:	a901      	add	r1, sp, #4
 8013562:	f001 fc9f 	bl	8014ea4 <uxr_read_submessage_header>
 8013566:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801356a:	2b0d      	cmp	r3, #13
 801356c:	d003      	beq.n	8013576 <on_get_fragmentation_info+0x2e>
 801356e:	2000      	movs	r0, #0
 8013570:	b00b      	add	sp, #44	; 0x2c
 8013572:	f85d fb04 	ldr.w	pc, [sp], #4
 8013576:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801357a:	f013 0f02 	tst.w	r3, #2
 801357e:	bf14      	ite	ne
 8013580:	2002      	movne	r0, #2
 8013582:	2001      	moveq	r0, #1
 8013584:	b00b      	add	sp, #44	; 0x2c
 8013586:	f85d fb04 	ldr.w	pc, [sp], #4
 801358a:	bf00      	nop

0801358c <write_submessage_acknack.isra.0>:
 801358c:	b570      	push	{r4, r5, r6, lr}
 801358e:	b092      	sub	sp, #72	; 0x48
 8013590:	4605      	mov	r5, r0
 8013592:	460e      	mov	r6, r1
 8013594:	4614      	mov	r4, r2
 8013596:	f000 fe75 	bl	8014284 <uxr_session_header_offset>
 801359a:	a905      	add	r1, sp, #20
 801359c:	9000      	str	r0, [sp, #0]
 801359e:	2300      	movs	r3, #0
 80135a0:	a80a      	add	r0, sp, #40	; 0x28
 80135a2:	2211      	movs	r2, #17
 80135a4:	f7ff faea 	bl	8012b7c <ucdr_init_buffer_origin_offset>
 80135a8:	2218      	movs	r2, #24
 80135aa:	fb02 5404 	mla	r4, r2, r4, r5
 80135ae:	2300      	movs	r3, #0
 80135b0:	2205      	movs	r2, #5
 80135b2:	3450      	adds	r4, #80	; 0x50
 80135b4:	a80a      	add	r0, sp, #40	; 0x28
 80135b6:	210a      	movs	r1, #10
 80135b8:	f001 fc5a 	bl	8014e70 <uxr_buffer_submessage_header>
 80135bc:	a903      	add	r1, sp, #12
 80135be:	4620      	mov	r0, r4
 80135c0:	f005 ff5c 	bl	801947c <uxr_compute_acknack>
 80135c4:	a903      	add	r1, sp, #12
 80135c6:	ba43      	rev16	r3, r0
 80135c8:	a80a      	add	r0, sp, #40	; 0x28
 80135ca:	f8ad 300e 	strh.w	r3, [sp, #14]
 80135ce:	f88d 6010 	strb.w	r6, [sp, #16]
 80135d2:	f002 fb21 	bl	8015c18 <uxr_serialize_ACKNACK_Payload>
 80135d6:	2200      	movs	r2, #0
 80135d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135da:	4611      	mov	r1, r2
 80135dc:	4628      	mov	r0, r5
 80135de:	f000 fdf9 	bl	80141d4 <uxr_stamp_session_header>
 80135e2:	a80a      	add	r0, sp, #40	; 0x28
 80135e4:	f7ff fb0a 	bl	8012bfc <ucdr_buffer_length>
 80135e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80135ea:	4602      	mov	r2, r0
 80135ec:	a905      	add	r1, sp, #20
 80135ee:	e9d3 0400 	ldrd	r0, r4, [r3]
 80135f2:	47a0      	blx	r4
 80135f4:	b012      	add	sp, #72	; 0x48
 80135f6:	bd70      	pop	{r4, r5, r6, pc}

080135f8 <read_submessage_list>:
 80135f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135fc:	b098      	sub	sp, #96	; 0x60
 80135fe:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 80138e4 <read_submessage_list+0x2ec>
 8013602:	920b      	str	r2, [sp, #44]	; 0x2c
 8013604:	4604      	mov	r4, r0
 8013606:	4688      	mov	r8, r1
 8013608:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 801360c:	aa0e      	add	r2, sp, #56	; 0x38
 801360e:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8013612:	4640      	mov	r0, r8
 8013614:	f001 fc46 	bl	8014ea4 <uxr_read_submessage_header>
 8013618:	2800      	cmp	r0, #0
 801361a:	f000 8107 	beq.w	801382c <read_submessage_list+0x234>
 801361e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8013622:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8013626:	3b04      	subs	r3, #4
 8013628:	2b0b      	cmp	r3, #11
 801362a:	d8ed      	bhi.n	8013608 <read_submessage_list+0x10>
 801362c:	a101      	add	r1, pc, #4	; (adr r1, 8013634 <read_submessage_list+0x3c>)
 801362e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013632:	bf00      	nop
 8013634:	0801381d 	.word	0x0801381d
 8013638:	08013811 	.word	0x08013811
 801363c:	08013609 	.word	0x08013609
 8013640:	08013609 	.word	0x08013609
 8013644:	08013609 	.word	0x08013609
 8013648:	08013773 	.word	0x08013773
 801364c:	08013705 	.word	0x08013705
 8013650:	080136c3 	.word	0x080136c3
 8013654:	08013609 	.word	0x08013609
 8013658:	08013609 	.word	0x08013609
 801365c:	08013609 	.word	0x08013609
 8013660:	08013665 	.word	0x08013665
 8013664:	a912      	add	r1, sp, #72	; 0x48
 8013666:	4640      	mov	r0, r8
 8013668:	f002 fb34 	bl	8015cd4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801366c:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8013670:	2d00      	cmp	r5, #0
 8013672:	f000 810a 	beq.w	801388a <read_submessage_list+0x292>
 8013676:	f001 fc5d 	bl	8014f34 <uxr_nanos>
 801367a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801367c:	460b      	mov	r3, r1
 801367e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013680:	2700      	movs	r7, #0
 8013682:	fbc9 6701 	smlal	r6, r7, r9, r1
 8013686:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801368a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801368c:	4602      	mov	r2, r0
 801368e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8013690:	460e      	mov	r6, r1
 8013692:	2700      	movs	r7, #0
 8013694:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8013698:	9106      	str	r1, [sp, #24]
 801369a:	fbc9 6700 	smlal	r6, r7, r9, r0
 801369e:	9915      	ldr	r1, [sp, #84]	; 0x54
 80136a0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80136a4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80136a6:	2700      	movs	r7, #0
 80136a8:	4608      	mov	r0, r1
 80136aa:	4639      	mov	r1, r7
 80136ac:	fbc9 0106 	smlal	r0, r1, r9, r6
 80136b0:	e9cd 0100 	strd	r0, r1, [sp]
 80136b4:	4620      	mov	r0, r4
 80136b6:	47a8      	blx	r5
 80136b8:	f04f 0301 	mov.w	r3, #1
 80136bc:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80136c0:	e7a2      	b.n	8013608 <read_submessage_list+0x10>
 80136c2:	a912      	add	r1, sp, #72	; 0x48
 80136c4:	4640      	mov	r0, r8
 80136c6:	f002 fae5 	bl	8015c94 <uxr_deserialize_HEARTBEAT_Payload>
 80136ca:	2100      	movs	r1, #0
 80136cc:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80136d0:	f001 fabe 	bl	8014c50 <uxr_stream_id_from_raw>
 80136d4:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80136d8:	4603      	mov	r3, r0
 80136da:	4629      	mov	r1, r5
 80136dc:	f104 0008 	add.w	r0, r4, #8
 80136e0:	9311      	str	r3, [sp, #68]	; 0x44
 80136e2:	f001 fba3 	bl	8014e2c <uxr_get_input_reliable_stream>
 80136e6:	2800      	cmp	r0, #0
 80136e8:	d08e      	beq.n	8013608 <read_submessage_list+0x10>
 80136ea:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 80136ee:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 80136f2:	f005 feb7 	bl	8019464 <uxr_process_heartbeat>
 80136f6:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 80136fa:	462a      	mov	r2, r5
 80136fc:	4620      	mov	r0, r4
 80136fe:	f7ff ff45 	bl	801358c <write_submessage_acknack.isra.0>
 8013702:	e781      	b.n	8013608 <read_submessage_list+0x10>
 8013704:	a912      	add	r1, sp, #72	; 0x48
 8013706:	4640      	mov	r0, r8
 8013708:	f002 fa9c 	bl	8015c44 <uxr_deserialize_ACKNACK_Payload>
 801370c:	2100      	movs	r1, #0
 801370e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8013712:	f001 fa9d 	bl	8014c50 <uxr_stream_id_from_raw>
 8013716:	4603      	mov	r3, r0
 8013718:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801371c:	f104 0008 	add.w	r0, r4, #8
 8013720:	930f      	str	r3, [sp, #60]	; 0x3c
 8013722:	f001 fb6d 	bl	8014e00 <uxr_get_output_reliable_stream>
 8013726:	4605      	mov	r5, r0
 8013728:	2800      	cmp	r0, #0
 801372a:	f43f af6d 	beq.w	8013608 <read_submessage_list+0x10>
 801372e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8013732:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 8013736:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 801373a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801373e:	b289      	uxth	r1, r1
 8013740:	f006 f9ca 	bl	8019ad8 <uxr_process_acknack>
 8013744:	4628      	mov	r0, r5
 8013746:	f006 f98d 	bl	8019a64 <uxr_begin_output_nack_buffer_it>
 801374a:	af10      	add	r7, sp, #64	; 0x40
 801374c:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8013750:	e005      	b.n	801375e <read_submessage_list+0x166>
 8013752:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013754:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013756:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013758:	e9d3 0600 	ldrd	r0, r6, [r3]
 801375c:	47b0      	blx	r6
 801375e:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 8013762:	aa11      	add	r2, sp, #68	; 0x44
 8013764:	4639      	mov	r1, r7
 8013766:	4628      	mov	r0, r5
 8013768:	f006 f97e 	bl	8019a68 <uxr_next_reliable_nack_buffer_to_send>
 801376c:	2800      	cmp	r0, #0
 801376e:	d1f0      	bne.n	8013752 <read_submessage_list+0x15a>
 8013770:	e74a      	b.n	8013608 <read_submessage_list+0x10>
 8013772:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8013776:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 801377a:	af10      	add	r7, sp, #64	; 0x40
 801377c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8013780:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 8013784:	4639      	mov	r1, r7
 8013786:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801378a:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 801378e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8013792:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 8013796:	4640      	mov	r0, r8
 8013798:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 801379c:	f002 f8ce 	bl	801593c <uxr_deserialize_BaseObjectRequest>
 80137a0:	4638      	mov	r0, r7
 80137a2:	a911      	add	r1, sp, #68	; 0x44
 80137a4:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 80137a8:	f000 fd92 	bl	80142d0 <uxr_parse_base_object_request>
 80137ac:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 80137b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80137b2:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 80137b6:	9112      	str	r1, [sp, #72]	; 0x48
 80137b8:	3d04      	subs	r5, #4
 80137ba:	f006 060e 	and.w	r6, r6, #14
 80137be:	b2ad      	uxth	r5, r5
 80137c0:	f1ba 0f00 	cmp.w	sl, #0
 80137c4:	d006      	beq.n	80137d4 <read_submessage_list+0x1dc>
 80137c6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80137ca:	9300      	str	r3, [sp, #0]
 80137cc:	463a      	mov	r2, r7
 80137ce:	2300      	movs	r3, #0
 80137d0:	4620      	mov	r0, r4
 80137d2:	47d0      	blx	sl
 80137d4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80137d6:	b168      	cbz	r0, 80137f4 <read_submessage_list+0x1fc>
 80137d8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80137da:	2300      	movs	r3, #0
 80137dc:	3902      	subs	r1, #2
 80137de:	e002      	b.n	80137e6 <read_submessage_list+0x1ee>
 80137e0:	3301      	adds	r3, #1
 80137e2:	4283      	cmp	r3, r0
 80137e4:	d006      	beq.n	80137f4 <read_submessage_list+0x1fc>
 80137e6:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 80137ea:	42ba      	cmp	r2, r7
 80137ec:	d1f8      	bne.n	80137e0 <read_submessage_list+0x1e8>
 80137ee:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80137f0:	2100      	movs	r1, #0
 80137f2:	54d1      	strb	r1, [r2, r3]
 80137f4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80137f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80137f8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80137fc:	9302      	str	r3, [sp, #8]
 80137fe:	e9cd 1000 	strd	r1, r0, [sp]
 8013802:	4633      	mov	r3, r6
 8013804:	462a      	mov	r2, r5
 8013806:	4641      	mov	r1, r8
 8013808:	4620      	mov	r0, r4
 801380a:	f7ff fddd 	bl	80133c8 <read_submessage_format>
 801380e:	e6fb      	b.n	8013608 <read_submessage_list+0x10>
 8013810:	b97a      	cbnz	r2, 8013832 <read_submessage_list+0x23a>
 8013812:	4641      	mov	r1, r8
 8013814:	4620      	mov	r0, r4
 8013816:	f000 fcab 	bl	8014170 <uxr_read_delete_session_status>
 801381a:	e6f5      	b.n	8013608 <read_submessage_list+0x10>
 801381c:	2a00      	cmp	r2, #0
 801381e:	f47f aef3 	bne.w	8013608 <read_submessage_list+0x10>
 8013822:	4641      	mov	r1, r8
 8013824:	4620      	mov	r0, r4
 8013826:	f000 fc97 	bl	8014158 <uxr_read_create_session_status>
 801382a:	e6ed      	b.n	8013608 <read_submessage_list+0x10>
 801382c:	b018      	add	sp, #96	; 0x60
 801382e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013832:	a912      	add	r1, sp, #72	; 0x48
 8013834:	4640      	mov	r0, r8
 8013836:	f002 f9ad 	bl	8015b94 <uxr_deserialize_STATUS_Payload>
 801383a:	a910      	add	r1, sp, #64	; 0x40
 801383c:	aa0f      	add	r2, sp, #60	; 0x3c
 801383e:	a812      	add	r0, sp, #72	; 0x48
 8013840:	f000 fd46 	bl	80142d0 <uxr_parse_base_object_request>
 8013844:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8013848:	9910      	ldr	r1, [sp, #64]	; 0x40
 801384a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801384e:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8013852:	9111      	str	r1, [sp, #68]	; 0x44
 8013854:	b135      	cbz	r5, 8013864 <read_submessage_list+0x26c>
 8013856:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801385a:	9300      	str	r3, [sp, #0]
 801385c:	4632      	mov	r2, r6
 801385e:	463b      	mov	r3, r7
 8013860:	4620      	mov	r0, r4
 8013862:	47a8      	blx	r5
 8013864:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8013866:	2b00      	cmp	r3, #0
 8013868:	f43f aece 	beq.w	8013608 <read_submessage_list+0x10>
 801386c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801386e:	2100      	movs	r1, #0
 8013870:	3802      	subs	r0, #2
 8013872:	e003      	b.n	801387c <read_submessage_list+0x284>
 8013874:	3101      	adds	r1, #1
 8013876:	4299      	cmp	r1, r3
 8013878:	f43f aec6 	beq.w	8013608 <read_submessage_list+0x10>
 801387c:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8013880:	42b2      	cmp	r2, r6
 8013882:	d1f7      	bne.n	8013874 <read_submessage_list+0x27c>
 8013884:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8013886:	545f      	strb	r7, [r3, r1]
 8013888:	e6be      	b.n	8013608 <read_submessage_list+0x10>
 801388a:	f001 fb53 	bl	8014f34 <uxr_nanos>
 801388e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013890:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013892:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013894:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8013896:	2700      	movs	r7, #0
 8013898:	fbc9 6703 	smlal	r6, r7, r9, r3
 801389c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801389e:	eb16 0c00 	adds.w	ip, r6, r0
 80138a2:	4618      	mov	r0, r3
 80138a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80138a6:	eb47 0e01 	adc.w	lr, r7, r1
 80138aa:	461e      	mov	r6, r3
 80138ac:	2100      	movs	r1, #0
 80138ae:	2700      	movs	r7, #0
 80138b0:	fbc9 0105 	smlal	r0, r1, r9, r5
 80138b4:	fbc9 6702 	smlal	r6, r7, r9, r2
 80138b8:	1983      	adds	r3, r0, r6
 80138ba:	eb41 0207 	adc.w	r2, r1, r7
 80138be:	ebbc 0303 	subs.w	r3, ip, r3
 80138c2:	9308      	str	r3, [sp, #32]
 80138c4:	eb6e 0302 	sbc.w	r3, lr, r2
 80138c8:	9309      	str	r3, [sp, #36]	; 0x24
 80138ca:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80138ce:	0fd3      	lsrs	r3, r2, #31
 80138d0:	18c9      	adds	r1, r1, r3
 80138d2:	f142 0200 	adc.w	r2, r2, #0
 80138d6:	084b      	lsrs	r3, r1, #1
 80138d8:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80138dc:	1052      	asrs	r2, r2, #1
 80138de:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 80138e2:	e6e9      	b.n	80136b8 <read_submessage_list+0xc0>
 80138e4:	3b9aca00 	.word	0x3b9aca00

080138e8 <listen_message>:
 80138e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138ec:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80138ee:	b09a      	sub	sp, #104	; 0x68
 80138f0:	6894      	ldr	r4, [r2, #8]
 80138f2:	460b      	mov	r3, r1
 80138f4:	4605      	mov	r5, r0
 80138f6:	a906      	add	r1, sp, #24
 80138f8:	6810      	ldr	r0, [r2, #0]
 80138fa:	aa07      	add	r2, sp, #28
 80138fc:	47a0      	blx	r4
 80138fe:	4604      	mov	r4, r0
 8013900:	b918      	cbnz	r0, 801390a <listen_message+0x22>
 8013902:	4620      	mov	r0, r4
 8013904:	b01a      	add	sp, #104	; 0x68
 8013906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801390a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801390e:	a80a      	add	r0, sp, #40	; 0x28
 8013910:	f7ff f946 	bl	8012ba0 <ucdr_init_buffer>
 8013914:	a90a      	add	r1, sp, #40	; 0x28
 8013916:	f10d 0316 	add.w	r3, sp, #22
 801391a:	aa05      	add	r2, sp, #20
 801391c:	4628      	mov	r0, r5
 801391e:	f000 fc6f 	bl	8014200 <uxr_read_session_header>
 8013922:	2800      	cmp	r0, #0
 8013924:	d0ed      	beq.n	8013902 <listen_message+0x1a>
 8013926:	f89d 0014 	ldrb.w	r0, [sp, #20]
 801392a:	2100      	movs	r1, #0
 801392c:	f001 f990 	bl	8014c50 <uxr_stream_id_from_raw>
 8013930:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8013934:	2f01      	cmp	r7, #1
 8013936:	f8bd a016 	ldrh.w	sl, [sp, #22]
 801393a:	9009      	str	r0, [sp, #36]	; 0x24
 801393c:	fa5f f880 	uxtb.w	r8, r0
 8013940:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8013944:	d041      	beq.n	80139ca <listen_message+0xe2>
 8013946:	2f02      	cmp	r7, #2
 8013948:	d00b      	beq.n	8013962 <listen_message+0x7a>
 801394a:	2f00      	cmp	r7, #0
 801394c:	d1d9      	bne.n	8013902 <listen_message+0x1a>
 801394e:	4639      	mov	r1, r7
 8013950:	4638      	mov	r0, r7
 8013952:	f001 f97d 	bl	8014c50 <uxr_stream_id_from_raw>
 8013956:	a90a      	add	r1, sp, #40	; 0x28
 8013958:	4602      	mov	r2, r0
 801395a:	4628      	mov	r0, r5
 801395c:	f7ff fe4c 	bl	80135f8 <read_submessage_list>
 8013960:	e7cf      	b.n	8013902 <listen_message+0x1a>
 8013962:	4631      	mov	r1, r6
 8013964:	f105 0008 	add.w	r0, r5, #8
 8013968:	f001 fa60 	bl	8014e2c <uxr_get_input_reliable_stream>
 801396c:	4681      	mov	r9, r0
 801396e:	b330      	cbz	r0, 80139be <listen_message+0xd6>
 8013970:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013972:	9203      	str	r2, [sp, #12]
 8013974:	a80a      	add	r0, sp, #40	; 0x28
 8013976:	f7ff f945 	bl	8012c04 <ucdr_buffer_remaining>
 801397a:	4603      	mov	r3, r0
 801397c:	f10d 0015 	add.w	r0, sp, #21
 8013980:	9000      	str	r0, [sp, #0]
 8013982:	9a03      	ldr	r2, [sp, #12]
 8013984:	4651      	mov	r1, sl
 8013986:	4648      	mov	r0, r9
 8013988:	f005 fc6e 	bl	8019268 <uxr_receive_reliable_message>
 801398c:	b1b8      	cbz	r0, 80139be <listen_message+0xd6>
 801398e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8013992:	b393      	cbz	r3, 80139fa <listen_message+0x112>
 8013994:	2702      	movs	r7, #2
 8013996:	e008      	b.n	80139aa <listen_message+0xc2>
 8013998:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
 801399c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80139a0:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 80139a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139a6:	f7ff fe27 	bl	80135f8 <read_submessage_list>
 80139aa:	a912      	add	r1, sp, #72	; 0x48
 80139ac:	2204      	movs	r2, #4
 80139ae:	4648      	mov	r0, r9
 80139b0:	f005 fcda 	bl	8019368 <uxr_next_input_reliable_buffer_available>
 80139b4:	4603      	mov	r3, r0
 80139b6:	a912      	add	r1, sp, #72	; 0x48
 80139b8:	4628      	mov	r0, r5
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d1ec      	bne.n	8013998 <listen_message+0xb0>
 80139be:	4632      	mov	r2, r6
 80139c0:	4641      	mov	r1, r8
 80139c2:	4628      	mov	r0, r5
 80139c4:	f7ff fde2 	bl	801358c <write_submessage_acknack.isra.0>
 80139c8:	e79b      	b.n	8013902 <listen_message+0x1a>
 80139ca:	4631      	mov	r1, r6
 80139cc:	f105 0008 	add.w	r0, r5, #8
 80139d0:	f001 fa22 	bl	8014e18 <uxr_get_input_best_effort_stream>
 80139d4:	2800      	cmp	r0, #0
 80139d6:	d094      	beq.n	8013902 <listen_message+0x1a>
 80139d8:	4651      	mov	r1, sl
 80139da:	f005 fbc1 	bl	8019160 <uxr_receive_best_effort_message>
 80139de:	2800      	cmp	r0, #0
 80139e0:	d08f      	beq.n	8013902 <listen_message+0x1a>
 80139e2:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
 80139e6:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80139ea:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 80139ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139f0:	a90a      	add	r1, sp, #40	; 0x28
 80139f2:	4628      	mov	r0, r5
 80139f4:	f7ff fe00 	bl	80135f8 <read_submessage_list>
 80139f8:	e783      	b.n	8013902 <listen_message+0x1a>
 80139fa:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
 80139fe:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8013a02:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8013a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a08:	a90a      	add	r1, sp, #40	; 0x28
 8013a0a:	4628      	mov	r0, r5
 8013a0c:	f7ff fdf4 	bl	80135f8 <read_submessage_list>
 8013a10:	e7c0      	b.n	8013994 <listen_message+0xac>
 8013a12:	bf00      	nop

08013a14 <listen_message_reliably>:
 8013a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a18:	1e0b      	subs	r3, r1, #0
 8013a1a:	b095      	sub	sp, #84	; 0x54
 8013a1c:	bfb8      	it	lt
 8013a1e:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8013a22:	4683      	mov	fp, r0
 8013a24:	9303      	str	r3, [sp, #12]
 8013a26:	f001 fa69 	bl	8014efc <uxr_millis>
 8013a2a:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8013a2e:	4688      	mov	r8, r1
 8013a30:	4607      	mov	r7, r0
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	f000 8093 	beq.w	8013b5e <listen_message_reliably+0x14a>
 8013a38:	2600      	movs	r6, #0
 8013a3a:	4630      	mov	r0, r6
 8013a3c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8013a40:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8013a44:	e00f      	b.n	8013a66 <listen_message_reliably+0x52>
 8013a46:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8013a4a:	454a      	cmp	r2, r9
 8013a4c:	eb73 010a 	sbcs.w	r1, r3, sl
 8013a50:	bfb8      	it	lt
 8013a52:	469a      	movlt	sl, r3
 8013a54:	f106 0601 	add.w	r6, r6, #1
 8013a58:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8013a5c:	b2f0      	uxtb	r0, r6
 8013a5e:	bfb8      	it	lt
 8013a60:	4691      	movlt	r9, r2
 8013a62:	4283      	cmp	r3, r0
 8013a64:	d953      	bls.n	8013b0e <listen_message_reliably+0xfa>
 8013a66:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8013a6a:	2201      	movs	r2, #1
 8013a6c:	2102      	movs	r1, #2
 8013a6e:	f001 f8c5 	bl	8014bfc <uxr_stream_id>
 8013a72:	00e4      	lsls	r4, r4, #3
 8013a74:	f104 0520 	add.w	r5, r4, #32
 8013a78:	445d      	add	r5, fp
 8013a7a:	4601      	mov	r1, r0
 8013a7c:	4643      	mov	r3, r8
 8013a7e:	463a      	mov	r2, r7
 8013a80:	4628      	mov	r0, r5
 8013a82:	9104      	str	r1, [sp, #16]
 8013a84:	f005 ffc2 	bl	8019a0c <uxr_update_output_stream_heartbeat_timestamp>
 8013a88:	eb0b 0304 	add.w	r3, fp, r4
 8013a8c:	2800      	cmp	r0, #0
 8013a8e:	d0da      	beq.n	8013a46 <listen_message_reliably+0x32>
 8013a90:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8013a94:	f89d 5011 	ldrb.w	r5, [sp, #17]
 8013a98:	9302      	str	r3, [sp, #8]
 8013a9a:	4658      	mov	r0, fp
 8013a9c:	f000 fbf2 	bl	8014284 <uxr_session_header_offset>
 8013aa0:	3501      	adds	r5, #1
 8013aa2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8013aa6:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8013aaa:	9000      	str	r0, [sp, #0]
 8013aac:	2300      	movs	r3, #0
 8013aae:	a80c      	add	r0, sp, #48	; 0x30
 8013ab0:	2211      	movs	r2, #17
 8013ab2:	a907      	add	r1, sp, #28
 8013ab4:	f7ff f862 	bl	8012b7c <ucdr_init_buffer_origin_offset>
 8013ab8:	2300      	movs	r3, #0
 8013aba:	2205      	movs	r2, #5
 8013abc:	210b      	movs	r1, #11
 8013abe:	a80c      	add	r0, sp, #48	; 0x30
 8013ac0:	f001 f9d6 	bl	8014e70 <uxr_buffer_submessage_header>
 8013ac4:	8968      	ldrh	r0, [r5, #10]
 8013ac6:	2101      	movs	r1, #1
 8013ac8:	f006 f85e 	bl	8019b88 <uxr_seq_num_add>
 8013acc:	9902      	ldr	r1, [sp, #8]
 8013ace:	892a      	ldrh	r2, [r5, #8]
 8013ad0:	f88d 1018 	strb.w	r1, [sp, #24]
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	a905      	add	r1, sp, #20
 8013ad8:	a80c      	add	r0, sp, #48	; 0x30
 8013ada:	f8ad 2016 	strh.w	r2, [sp, #22]
 8013ade:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013ae2:	f002 f8c3 	bl	8015c6c <uxr_serialize_HEARTBEAT_Payload>
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	4611      	mov	r1, r2
 8013aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013aec:	4658      	mov	r0, fp
 8013aee:	f000 fb71 	bl	80141d4 <uxr_stamp_session_header>
 8013af2:	a80c      	add	r0, sp, #48	; 0x30
 8013af4:	f7ff f882 	bl	8012bfc <ucdr_buffer_length>
 8013af8:	f8db 3070 	ldr.w	r3, [fp, #112]	; 0x70
 8013afc:	4602      	mov	r2, r0
 8013afe:	a907      	add	r1, sp, #28
 8013b00:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013b04:	445c      	add	r4, fp
 8013b06:	47a8      	blx	r5
 8013b08:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8013b0c:	e79d      	b.n	8013a4a <listen_message_reliably+0x36>
 8013b0e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8013b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b16:	45a2      	cmp	sl, r4
 8013b18:	bf08      	it	eq
 8013b1a:	4599      	cmpeq	r9, r3
 8013b1c:	d01f      	beq.n	8013b5e <listen_message_reliably+0x14a>
 8013b1e:	eba9 0107 	sub.w	r1, r9, r7
 8013b22:	2900      	cmp	r1, #0
 8013b24:	9c03      	ldr	r4, [sp, #12]
 8013b26:	bf08      	it	eq
 8013b28:	2101      	moveq	r1, #1
 8013b2a:	428c      	cmp	r4, r1
 8013b2c:	4623      	mov	r3, r4
 8013b2e:	bfa8      	it	ge
 8013b30:	460b      	movge	r3, r1
 8013b32:	4619      	mov	r1, r3
 8013b34:	4658      	mov	r0, fp
 8013b36:	461f      	mov	r7, r3
 8013b38:	f7ff fed6 	bl	80138e8 <listen_message>
 8013b3c:	b110      	cbz	r0, 8013b44 <listen_message_reliably+0x130>
 8013b3e:	b015      	add	sp, #84	; 0x54
 8013b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b44:	1be3      	subs	r3, r4, r7
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	9303      	str	r3, [sp, #12]
 8013b4a:	ddf8      	ble.n	8013b3e <listen_message_reliably+0x12a>
 8013b4c:	f001 f9d6 	bl	8014efc <uxr_millis>
 8013b50:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8013b54:	4688      	mov	r8, r1
 8013b56:	4607      	mov	r7, r0
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	f47f af6d 	bne.w	8013a38 <listen_message_reliably+0x24>
 8013b5e:	9903      	ldr	r1, [sp, #12]
 8013b60:	e7df      	b.n	8013b22 <listen_message_reliably+0x10e>
 8013b62:	bf00      	nop

08013b64 <uxr_init_session>:
 8013b64:	b5d0      	push	{r4, r6, r7, lr}
 8013b66:	2300      	movs	r3, #0
 8013b68:	2600      	movs	r6, #0
 8013b6a:	2700      	movs	r7, #0
 8013b6c:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 8013b70:	4604      	mov	r4, r0
 8013b72:	6701      	str	r1, [r0, #112]	; 0x70
 8013b74:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 8013b78:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 8013b7c:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 8013b80:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 8013b84:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 8013b88:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8013b8c:	2181      	movs	r1, #129	; 0x81
 8013b8e:	f000 fa8f 	bl	80140b0 <uxr_init_session_info>
 8013b92:	f104 0008 	add.w	r0, r4, #8
 8013b96:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 8013b9a:	f001 b885 	b.w	8014ca8 <uxr_init_stream_storage>
 8013b9e:	bf00      	nop

08013ba0 <uxr_set_status_callback>:
 8013ba0:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8013ba4:	4770      	bx	lr
 8013ba6:	bf00      	nop

08013ba8 <uxr_set_topic_callback>:
 8013ba8:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8013bac:	4770      	bx	lr
 8013bae:	bf00      	nop

08013bb0 <uxr_set_request_callback>:
 8013bb0:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8013bb4:	4770      	bx	lr
 8013bb6:	bf00      	nop

08013bb8 <uxr_set_reply_callback>:
 8013bb8:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8013bbc:	4770      	bx	lr
 8013bbe:	bf00      	nop

08013bc0 <uxr_create_session>:
 8013bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bc2:	4604      	mov	r4, r0
 8013bc4:	b093      	sub	sp, #76	; 0x4c
 8013bc6:	3008      	adds	r0, #8
 8013bc8:	f001 f878 	bl	8014cbc <uxr_reset_stream_storage>
 8013bcc:	4620      	mov	r0, r4
 8013bce:	f000 fb59 	bl	8014284 <uxr_session_header_offset>
 8013bd2:	a903      	add	r1, sp, #12
 8013bd4:	9000      	str	r0, [sp, #0]
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	a80a      	add	r0, sp, #40	; 0x28
 8013bda:	221c      	movs	r2, #28
 8013bdc:	f7fe ffce 	bl	8012b7c <ucdr_init_buffer_origin_offset>
 8013be0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013be2:	8a1a      	ldrh	r2, [r3, #16]
 8013be4:	3a04      	subs	r2, #4
 8013be6:	b292      	uxth	r2, r2
 8013be8:	4620      	mov	r0, r4
 8013bea:	a90a      	add	r1, sp, #40	; 0x28
 8013bec:	f000 fa72 	bl	80140d4 <uxr_buffer_create_session>
 8013bf0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013bf2:	4620      	mov	r0, r4
 8013bf4:	f000 fada 	bl	80141ac <uxr_stamp_create_session_header>
 8013bf8:	a80a      	add	r0, sp, #40	; 0x28
 8013bfa:	f7fe ffff 	bl	8012bfc <ucdr_buffer_length>
 8013bfe:	23ff      	movs	r3, #255	; 0xff
 8013c00:	4606      	mov	r6, r0
 8013c02:	7163      	strb	r3, [r4, #5]
 8013c04:	250a      	movs	r5, #10
 8013c06:	e001      	b.n	8013c0c <uxr_create_session+0x4c>
 8013c08:	28ff      	cmp	r0, #255	; 0xff
 8013c0a:	d10d      	bne.n	8013c28 <uxr_create_session+0x68>
 8013c0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013c0e:	4632      	mov	r2, r6
 8013c10:	e9d3 0700 	ldrd	r0, r7, [r3]
 8013c14:	a903      	add	r1, sp, #12
 8013c16:	47b8      	blx	r7
 8013c18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013c1c:	4620      	mov	r0, r4
 8013c1e:	f7ff fe63 	bl	80138e8 <listen_message>
 8013c22:	3d01      	subs	r5, #1
 8013c24:	7960      	ldrb	r0, [r4, #5]
 8013c26:	d1ef      	bne.n	8013c08 <uxr_create_session+0x48>
 8013c28:	fab0 f080 	clz	r0, r0
 8013c2c:	0940      	lsrs	r0, r0, #5
 8013c2e:	b013      	add	sp, #76	; 0x4c
 8013c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c32:	bf00      	nop

08013c34 <uxr_delete_session_retries>:
 8013c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c36:	b091      	sub	sp, #68	; 0x44
 8013c38:	4604      	mov	r4, r0
 8013c3a:	460d      	mov	r5, r1
 8013c3c:	f000 fb22 	bl	8014284 <uxr_session_header_offset>
 8013c40:	2300      	movs	r3, #0
 8013c42:	2210      	movs	r2, #16
 8013c44:	9000      	str	r0, [sp, #0]
 8013c46:	a904      	add	r1, sp, #16
 8013c48:	a808      	add	r0, sp, #32
 8013c4a:	f7fe ff97 	bl	8012b7c <ucdr_init_buffer_origin_offset>
 8013c4e:	a908      	add	r1, sp, #32
 8013c50:	4620      	mov	r0, r4
 8013c52:	f000 fa65 	bl	8014120 <uxr_buffer_delete_session>
 8013c56:	2200      	movs	r2, #0
 8013c58:	9b08      	ldr	r3, [sp, #32]
 8013c5a:	4611      	mov	r1, r2
 8013c5c:	4620      	mov	r0, r4
 8013c5e:	f000 fab9 	bl	80141d4 <uxr_stamp_session_header>
 8013c62:	a808      	add	r0, sp, #32
 8013c64:	f7fe ffca 	bl	8012bfc <ucdr_buffer_length>
 8013c68:	23ff      	movs	r3, #255	; 0xff
 8013c6a:	4602      	mov	r2, r0
 8013c6c:	7163      	strb	r3, [r4, #5]
 8013c6e:	b1ed      	cbz	r5, 8013cac <uxr_delete_session_retries+0x78>
 8013c70:	2600      	movs	r6, #0
 8013c72:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013c74:	9203      	str	r2, [sp, #12]
 8013c76:	e9d3 0700 	ldrd	r0, r7, [r3]
 8013c7a:	a904      	add	r1, sp, #16
 8013c7c:	47b8      	blx	r7
 8013c7e:	3601      	adds	r6, #1
 8013c80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013c84:	4620      	mov	r0, r4
 8013c86:	f7ff fe2f 	bl	80138e8 <listen_message>
 8013c8a:	42b5      	cmp	r5, r6
 8013c8c:	7963      	ldrb	r3, [r4, #5]
 8013c8e:	d007      	beq.n	8013ca0 <uxr_delete_session_retries+0x6c>
 8013c90:	2bff      	cmp	r3, #255	; 0xff
 8013c92:	9a03      	ldr	r2, [sp, #12]
 8013c94:	d0ed      	beq.n	8013c72 <uxr_delete_session_retries+0x3e>
 8013c96:	fab3 f083 	clz	r0, r3
 8013c9a:	0940      	lsrs	r0, r0, #5
 8013c9c:	b011      	add	sp, #68	; 0x44
 8013c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ca0:	2bff      	cmp	r3, #255	; 0xff
 8013ca2:	bf08      	it	eq
 8013ca4:	2000      	moveq	r0, #0
 8013ca6:	d1f6      	bne.n	8013c96 <uxr_delete_session_retries+0x62>
 8013ca8:	b011      	add	sp, #68	; 0x44
 8013caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013cae:	a904      	add	r1, sp, #16
 8013cb0:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013cb4:	47a8      	blx	r5
 8013cb6:	7963      	ldrb	r3, [r4, #5]
 8013cb8:	fab3 f083 	clz	r0, r3
 8013cbc:	0940      	lsrs	r0, r0, #5
 8013cbe:	e7ed      	b.n	8013c9c <uxr_delete_session_retries+0x68>

08013cc0 <uxr_create_output_best_effort_stream>:
 8013cc0:	b510      	push	{r4, lr}
 8013cc2:	b084      	sub	sp, #16
 8013cc4:	e9cd 2100 	strd	r2, r1, [sp]
 8013cc8:	4604      	mov	r4, r0
 8013cca:	f000 fadb 	bl	8014284 <uxr_session_header_offset>
 8013cce:	e9dd 2100 	ldrd	r2, r1, [sp]
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	f104 0008 	add.w	r0, r4, #8
 8013cd8:	b004      	add	sp, #16
 8013cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cde:	f001 b82d 	b.w	8014d3c <uxr_add_output_best_effort_buffer>
 8013ce2:	bf00      	nop

08013ce4 <uxr_create_output_reliable_stream>:
 8013ce4:	b530      	push	{r4, r5, lr}
 8013ce6:	b089      	sub	sp, #36	; 0x24
 8013ce8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013cec:	9303      	str	r3, [sp, #12]
 8013cee:	4604      	mov	r4, r0
 8013cf0:	f000 fac8 	bl	8014284 <uxr_session_header_offset>
 8013cf4:	4605      	mov	r5, r0
 8013cf6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8013cfa:	9905      	ldr	r1, [sp, #20]
 8013cfc:	9500      	str	r5, [sp, #0]
 8013cfe:	f104 0008 	add.w	r0, r4, #8
 8013d02:	f001 f82d 	bl	8014d60 <uxr_add_output_reliable_buffer>
 8013d06:	2200      	movs	r2, #0
 8013d08:	b2c3      	uxtb	r3, r0
 8013d0a:	f363 0207 	bfi	r2, r3, #0, #8
 8013d0e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013d12:	f363 220f 	bfi	r2, r3, #8, #8
 8013d16:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013d1a:	f363 4217 	bfi	r2, r3, #16, #8
 8013d1e:	0e03      	lsrs	r3, r0, #24
 8013d20:	f363 621f 	bfi	r2, r3, #24, #8
 8013d24:	4610      	mov	r0, r2
 8013d26:	b009      	add	sp, #36	; 0x24
 8013d28:	bd30      	pop	{r4, r5, pc}
 8013d2a:	bf00      	nop

08013d2c <uxr_create_input_best_effort_stream>:
 8013d2c:	b082      	sub	sp, #8
 8013d2e:	3008      	adds	r0, #8
 8013d30:	b002      	add	sp, #8
 8013d32:	f001 b82f 	b.w	8014d94 <uxr_add_input_best_effort_buffer>
 8013d36:	bf00      	nop

08013d38 <uxr_create_input_reliable_stream>:
 8013d38:	b510      	push	{r4, lr}
 8013d3a:	b084      	sub	sp, #16
 8013d3c:	4c0b      	ldr	r4, [pc, #44]	; (8013d6c <uxr_create_input_reliable_stream+0x34>)
 8013d3e:	9400      	str	r4, [sp, #0]
 8013d40:	3008      	adds	r0, #8
 8013d42:	f001 f83d 	bl	8014dc0 <uxr_add_input_reliable_buffer>
 8013d46:	2200      	movs	r2, #0
 8013d48:	b2c3      	uxtb	r3, r0
 8013d4a:	f363 0207 	bfi	r2, r3, #0, #8
 8013d4e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013d52:	f363 220f 	bfi	r2, r3, #8, #8
 8013d56:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013d5a:	f363 4217 	bfi	r2, r3, #16, #8
 8013d5e:	0e03      	lsrs	r3, r0, #24
 8013d60:	f363 621f 	bfi	r2, r3, #24, #8
 8013d64:	4610      	mov	r0, r2
 8013d66:	b004      	add	sp, #16
 8013d68:	bd10      	pop	{r4, pc}
 8013d6a:	bf00      	nop
 8013d6c:	08013549 	.word	0x08013549

08013d70 <uxr_sync_session>:
 8013d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d72:	b093      	sub	sp, #76	; 0x4c
 8013d74:	4604      	mov	r4, r0
 8013d76:	460d      	mov	r5, r1
 8013d78:	f000 fa84 	bl	8014284 <uxr_session_header_offset>
 8013d7c:	a905      	add	r1, sp, #20
 8013d7e:	9000      	str	r0, [sp, #0]
 8013d80:	2300      	movs	r3, #0
 8013d82:	a80a      	add	r0, sp, #40	; 0x28
 8013d84:	2214      	movs	r2, #20
 8013d86:	f7fe fef9 	bl	8012b7c <ucdr_init_buffer_origin_offset>
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	2208      	movs	r2, #8
 8013d8e:	210e      	movs	r1, #14
 8013d90:	a80a      	add	r0, sp, #40	; 0x28
 8013d92:	f001 f86d 	bl	8014e70 <uxr_buffer_submessage_header>
 8013d96:	f001 f8cd 	bl	8014f34 <uxr_nanos>
 8013d9a:	a31b      	add	r3, pc, #108	; (adr r3, 8013e08 <uxr_sync_session+0x98>)
 8013d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da0:	4606      	mov	r6, r0
 8013da2:	460f      	mov	r7, r1
 8013da4:	f7ec ff80 	bl	8000ca8 <__aeabi_ldivmod>
 8013da8:	a317      	add	r3, pc, #92	; (adr r3, 8013e08 <uxr_sync_session+0x98>)
 8013daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dae:	4684      	mov	ip, r0
 8013db0:	4639      	mov	r1, r7
 8013db2:	4630      	mov	r0, r6
 8013db4:	f8cd c00c 	str.w	ip, [sp, #12]
 8013db8:	f7ec ff76 	bl	8000ca8 <__aeabi_ldivmod>
 8013dbc:	a903      	add	r1, sp, #12
 8013dbe:	a80a      	add	r0, sp, #40	; 0x28
 8013dc0:	9204      	str	r2, [sp, #16]
 8013dc2:	f001 ff79 	bl	8015cb8 <uxr_serialize_TIMESTAMP_Payload>
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	4611      	mov	r1, r2
 8013dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013dcc:	4620      	mov	r0, r4
 8013dce:	f000 fa01 	bl	80141d4 <uxr_stamp_session_header>
 8013dd2:	a80a      	add	r0, sp, #40	; 0x28
 8013dd4:	f7fe ff12 	bl	8012bfc <ucdr_buffer_length>
 8013dd8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013dda:	4602      	mov	r2, r0
 8013ddc:	a905      	add	r1, sp, #20
 8013dde:	e9d3 0600 	ldrd	r0, r6, [r3]
 8013de2:	47b0      	blx	r6
 8013de4:	2300      	movs	r3, #0
 8013de6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8013dea:	e002      	b.n	8013df2 <uxr_sync_session+0x82>
 8013dec:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
 8013df0:	b938      	cbnz	r0, 8013e02 <uxr_sync_session+0x92>
 8013df2:	4629      	mov	r1, r5
 8013df4:	4620      	mov	r0, r4
 8013df6:	f7ff fe0d 	bl	8013a14 <listen_message_reliably>
 8013dfa:	2800      	cmp	r0, #0
 8013dfc:	d1f6      	bne.n	8013dec <uxr_sync_session+0x7c>
 8013dfe:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
 8013e02:	b013      	add	sp, #76	; 0x4c
 8013e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e06:	bf00      	nop
 8013e08:	3b9aca00 	.word	0x3b9aca00
 8013e0c:	00000000 	.word	0x00000000

08013e10 <uxr_epoch_nanos>:
 8013e10:	b510      	push	{r4, lr}
 8013e12:	4604      	mov	r4, r0
 8013e14:	f001 f88e 	bl	8014f34 <uxr_nanos>
 8013e18:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8013e1c:	1ac0      	subs	r0, r0, r3
 8013e1e:	eb61 0102 	sbc.w	r1, r1, r2
 8013e22:	bd10      	pop	{r4, pc}

08013e24 <uxr_flash_output_streams>:
 8013e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e28:	7e03      	ldrb	r3, [r0, #24]
 8013e2a:	b084      	sub	sp, #16
 8013e2c:	4604      	mov	r4, r0
 8013e2e:	b1fb      	cbz	r3, 8013e70 <uxr_flash_output_streams+0x4c>
 8013e30:	f04f 0900 	mov.w	r9, #0
 8013e34:	4648      	mov	r0, r9
 8013e36:	f10d 0802 	add.w	r8, sp, #2
 8013e3a:	af03      	add	r7, sp, #12
 8013e3c:	ae02      	add	r6, sp, #8
 8013e3e:	2201      	movs	r2, #1
 8013e40:	4611      	mov	r1, r2
 8013e42:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8013e46:	f000 fed9 	bl	8014bfc <uxr_stream_id>
 8013e4a:	3508      	adds	r5, #8
 8013e4c:	4684      	mov	ip, r0
 8013e4e:	4643      	mov	r3, r8
 8013e50:	4628      	mov	r0, r5
 8013e52:	463a      	mov	r2, r7
 8013e54:	4631      	mov	r1, r6
 8013e56:	f8cd c004 	str.w	ip, [sp, #4]
 8013e5a:	f005 fb97 	bl	801958c <uxr_prepare_best_effort_buffer_to_send>
 8013e5e:	2800      	cmp	r0, #0
 8013e60:	d13d      	bne.n	8013ede <uxr_flash_output_streams+0xba>
 8013e62:	7e23      	ldrb	r3, [r4, #24]
 8013e64:	f109 0901 	add.w	r9, r9, #1
 8013e68:	fa5f f089 	uxtb.w	r0, r9
 8013e6c:	4283      	cmp	r3, r0
 8013e6e:	d8e6      	bhi.n	8013e3e <uxr_flash_output_streams+0x1a>
 8013e70:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8013e74:	b383      	cbz	r3, 8013ed8 <uxr_flash_output_streams+0xb4>
 8013e76:	f04f 0900 	mov.w	r9, #0
 8013e7a:	4648      	mov	r0, r9
 8013e7c:	f10d 0802 	add.w	r8, sp, #2
 8013e80:	af03      	add	r7, sp, #12
 8013e82:	ae02      	add	r6, sp, #8
 8013e84:	2201      	movs	r2, #1
 8013e86:	2102      	movs	r1, #2
 8013e88:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8013e8c:	f000 feb6 	bl	8014bfc <uxr_stream_id>
 8013e90:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8013e94:	3520      	adds	r5, #32
 8013e96:	9001      	str	r0, [sp, #4]
 8013e98:	e00c      	b.n	8013eb4 <uxr_flash_output_streams+0x90>
 8013e9a:	9b02      	ldr	r3, [sp, #8]
 8013e9c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013ea0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013ea4:	f000 f996 	bl	80141d4 <uxr_stamp_session_header>
 8013ea8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013eaa:	9a03      	ldr	r2, [sp, #12]
 8013eac:	9902      	ldr	r1, [sp, #8]
 8013eae:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8013eb2:	47d0      	blx	sl
 8013eb4:	4643      	mov	r3, r8
 8013eb6:	463a      	mov	r2, r7
 8013eb8:	4631      	mov	r1, r6
 8013eba:	4628      	mov	r0, r5
 8013ebc:	f005 fd64 	bl	8019988 <uxr_prepare_next_reliable_buffer_to_send>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	4620      	mov	r0, r4
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d1e8      	bne.n	8013e9a <uxr_flash_output_streams+0x76>
 8013ec8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8013ecc:	f109 0901 	add.w	r9, r9, #1
 8013ed0:	fa5f f089 	uxtb.w	r0, r9
 8013ed4:	4283      	cmp	r3, r0
 8013ed6:	d8d5      	bhi.n	8013e84 <uxr_flash_output_streams+0x60>
 8013ed8:	b004      	add	sp, #16
 8013eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ede:	9b02      	ldr	r3, [sp, #8]
 8013ee0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013ee4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013ee8:	4620      	mov	r0, r4
 8013eea:	f000 f973 	bl	80141d4 <uxr_stamp_session_header>
 8013eee:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013ef0:	9a03      	ldr	r2, [sp, #12]
 8013ef2:	9902      	ldr	r1, [sp, #8]
 8013ef4:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013ef8:	47a8      	blx	r5
 8013efa:	f109 0901 	add.w	r9, r9, #1
 8013efe:	7e23      	ldrb	r3, [r4, #24]
 8013f00:	fa5f f089 	uxtb.w	r0, r9
 8013f04:	4283      	cmp	r3, r0
 8013f06:	d89a      	bhi.n	8013e3e <uxr_flash_output_streams+0x1a>
 8013f08:	e7b2      	b.n	8013e70 <uxr_flash_output_streams+0x4c>
 8013f0a:	bf00      	nop

08013f0c <uxr_run_session_until_data>:
 8013f0c:	b570      	push	{r4, r5, r6, lr}
 8013f0e:	4604      	mov	r4, r0
 8013f10:	460d      	mov	r5, r1
 8013f12:	f000 fff3 	bl	8014efc <uxr_millis>
 8013f16:	4606      	mov	r6, r0
 8013f18:	4620      	mov	r0, r4
 8013f1a:	f7ff ff83 	bl	8013e24 <uxr_flash_output_streams>
 8013f1e:	2300      	movs	r3, #0
 8013f20:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8013f24:	4629      	mov	r1, r5
 8013f26:	e005      	b.n	8013f34 <uxr_run_session_until_data+0x28>
 8013f28:	f000 ffe8 	bl	8014efc <uxr_millis>
 8013f2c:	1b83      	subs	r3, r0, r6
 8013f2e:	1ae9      	subs	r1, r5, r3
 8013f30:	2900      	cmp	r1, #0
 8013f32:	dd07      	ble.n	8013f44 <uxr_run_session_until_data+0x38>
 8013f34:	4620      	mov	r0, r4
 8013f36:	f7ff fd6d 	bl	8013a14 <listen_message_reliably>
 8013f3a:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8013f3e:	2800      	cmp	r0, #0
 8013f40:	d0f2      	beq.n	8013f28 <uxr_run_session_until_data+0x1c>
 8013f42:	bd70      	pop	{r4, r5, r6, pc}
 8013f44:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8013f48:	bd70      	pop	{r4, r5, r6, pc}
 8013f4a:	bf00      	nop

08013f4c <uxr_run_session_until_confirm_delivery>:
 8013f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f4e:	4605      	mov	r5, r0
 8013f50:	460e      	mov	r6, r1
 8013f52:	f100 0708 	add.w	r7, r0, #8
 8013f56:	2400      	movs	r4, #0
 8013f58:	f7ff ff64 	bl	8013e24 <uxr_flash_output_streams>
 8013f5c:	e005      	b.n	8013f6a <uxr_run_session_until_confirm_delivery+0x1e>
 8013f5e:	b964      	cbnz	r4, 8013f7a <uxr_run_session_until_confirm_delivery+0x2e>
 8013f60:	f7ff fd58 	bl	8013a14 <listen_message_reliably>
 8013f64:	f080 0001 	eor.w	r0, r0, #1
 8013f68:	b2c4      	uxtb	r4, r0
 8013f6a:	4638      	mov	r0, r7
 8013f6c:	f000 ff6a 	bl	8014e44 <uxr_output_streams_confirmed>
 8013f70:	4603      	mov	r3, r0
 8013f72:	4631      	mov	r1, r6
 8013f74:	4628      	mov	r0, r5
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d0f1      	beq.n	8013f5e <uxr_run_session_until_confirm_delivery+0x12>
 8013f7a:	4638      	mov	r0, r7
 8013f7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013f80:	f000 bf60 	b.w	8014e44 <uxr_output_streams_confirmed>

08013f84 <uxr_run_session_until_all_status>:
 8013f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f88:	9d08      	ldr	r5, [sp, #32]
 8013f8a:	460f      	mov	r7, r1
 8013f8c:	4692      	mov	sl, r2
 8013f8e:	461c      	mov	r4, r3
 8013f90:	4606      	mov	r6, r0
 8013f92:	f7ff ff47 	bl	8013e24 <uxr_flash_output_streams>
 8013f96:	b125      	cbz	r5, 8013fa2 <uxr_run_session_until_all_status+0x1e>
 8013f98:	462a      	mov	r2, r5
 8013f9a:	21ff      	movs	r1, #255	; 0xff
 8013f9c:	4620      	mov	r0, r4
 8013f9e:	f006 f975 	bl	801a28c <memset>
 8013fa2:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 8013fa6:	67f5      	str	r5, [r6, #124]	; 0x7c
 8013fa8:	f000 ffa8 	bl	8014efc <uxr_millis>
 8013fac:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8013fb0:	f1aa 0a02 	sub.w	sl, sl, #2
 8013fb4:	4680      	mov	r8, r0
 8013fb6:	4639      	mov	r1, r7
 8013fb8:	4630      	mov	r0, r6
 8013fba:	f7ff fd2b 	bl	8013a14 <listen_message_reliably>
 8013fbe:	f000 ff9d 	bl	8014efc <uxr_millis>
 8013fc2:	eba0 0008 	sub.w	r0, r0, r8
 8013fc6:	1a39      	subs	r1, r7, r0
 8013fc8:	b33d      	cbz	r5, 801401a <uxr_run_session_until_all_status+0x96>
 8013fca:	46cc      	mov	ip, r9
 8013fcc:	464a      	mov	r2, r9
 8013fce:	2301      	movs	r3, #1
 8013fd0:	e002      	b.n	8013fd8 <uxr_run_session_until_all_status+0x54>
 8013fd2:	42ab      	cmp	r3, r5
 8013fd4:	d20c      	bcs.n	8013ff0 <uxr_run_session_until_all_status+0x6c>
 8013fd6:	3301      	adds	r3, #1
 8013fd8:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8013fdc:	2cff      	cmp	r4, #255	; 0xff
 8013fde:	d1f8      	bne.n	8013fd2 <uxr_run_session_until_all_status+0x4e>
 8013fe0:	42ab      	cmp	r3, r5
 8013fe2:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 8013fe6:	d213      	bcs.n	8014010 <uxr_run_session_until_all_status+0x8c>
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	d0f4      	beq.n	8013fd6 <uxr_run_session_until_all_status+0x52>
 8013fec:	2900      	cmp	r1, #0
 8013fee:	dce3      	bgt.n	8013fb8 <uxr_run_session_until_all_status+0x34>
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	444d      	add	r5, r9
 8013ff4:	67f3      	str	r3, [r6, #124]	; 0x7c
 8013ff6:	e001      	b.n	8013ffc <uxr_run_session_until_all_status+0x78>
 8013ff8:	2b01      	cmp	r3, #1
 8013ffa:	d812      	bhi.n	8014022 <uxr_run_session_until_all_status+0x9e>
 8013ffc:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8014000:	4565      	cmp	r5, ip
 8014002:	d1f9      	bne.n	8013ff8 <uxr_run_session_until_all_status+0x74>
 8014004:	2b01      	cmp	r3, #1
 8014006:	bf8c      	ite	hi
 8014008:	2000      	movhi	r0, #0
 801400a:	2001      	movls	r0, #1
 801400c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014010:	2900      	cmp	r1, #0
 8014012:	dded      	ble.n	8013ff0 <uxr_run_session_until_all_status+0x6c>
 8014014:	2800      	cmp	r0, #0
 8014016:	d1cf      	bne.n	8013fb8 <uxr_run_session_until_all_status+0x34>
 8014018:	e7ea      	b.n	8013ff0 <uxr_run_session_until_all_status+0x6c>
 801401a:	67f5      	str	r5, [r6, #124]	; 0x7c
 801401c:	2001      	movs	r0, #1
 801401e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014022:	2000      	movs	r0, #0
 8014024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014028 <uxr_prepare_stream_to_write_submessage>:
 8014028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801402c:	b082      	sub	sp, #8
 801402e:	4682      	mov	sl, r0
 8014030:	4610      	mov	r0, r2
 8014032:	4615      	mov	r5, r2
 8014034:	461e      	mov	r6, r3
 8014036:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 801403a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 801403e:	9101      	str	r1, [sp, #4]
 8014040:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8014044:	f000 ff54 	bl	8014ef0 <uxr_submessage_padding>
 8014048:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801404c:	f105 0904 	add.w	r9, r5, #4
 8014050:	2b01      	cmp	r3, #1
 8014052:	4481      	add	r9, r0
 8014054:	d01d      	beq.n	8014092 <uxr_prepare_stream_to_write_submessage+0x6a>
 8014056:	2b02      	cmp	r3, #2
 8014058:	d116      	bne.n	8014088 <uxr_prepare_stream_to_write_submessage+0x60>
 801405a:	4621      	mov	r1, r4
 801405c:	f10a 0008 	add.w	r0, sl, #8
 8014060:	f000 fece 	bl	8014e00 <uxr_get_output_reliable_stream>
 8014064:	4604      	mov	r4, r0
 8014066:	b158      	cbz	r0, 8014080 <uxr_prepare_stream_to_write_submessage+0x58>
 8014068:	4649      	mov	r1, r9
 801406a:	4632      	mov	r2, r6
 801406c:	f005 fb32 	bl	80196d4 <uxr_prepare_reliable_buffer_to_write>
 8014070:	4604      	mov	r4, r0
 8014072:	b12c      	cbz	r4, 8014080 <uxr_prepare_stream_to_write_submessage+0x58>
 8014074:	4643      	mov	r3, r8
 8014076:	b2aa      	uxth	r2, r5
 8014078:	4639      	mov	r1, r7
 801407a:	4630      	mov	r0, r6
 801407c:	f000 fef8 	bl	8014e70 <uxr_buffer_submessage_header>
 8014080:	4620      	mov	r0, r4
 8014082:	b002      	add	sp, #8
 8014084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014088:	2400      	movs	r4, #0
 801408a:	4620      	mov	r0, r4
 801408c:	b002      	add	sp, #8
 801408e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014092:	4621      	mov	r1, r4
 8014094:	f10a 0008 	add.w	r0, sl, #8
 8014098:	f000 feaa 	bl	8014df0 <uxr_get_output_best_effort_stream>
 801409c:	4604      	mov	r4, r0
 801409e:	2800      	cmp	r0, #0
 80140a0:	d0ee      	beq.n	8014080 <uxr_prepare_stream_to_write_submessage+0x58>
 80140a2:	4649      	mov	r1, r9
 80140a4:	4632      	mov	r2, r6
 80140a6:	f005 fa51 	bl	801954c <uxr_prepare_best_effort_buffer_to_write>
 80140aa:	4604      	mov	r4, r0
 80140ac:	e7e1      	b.n	8014072 <uxr_prepare_stream_to_write_submessage+0x4a>
 80140ae:	bf00      	nop

080140b0 <uxr_init_session_info>:
 80140b0:	b470      	push	{r4, r5, r6}
 80140b2:	7102      	strb	r2, [r0, #4]
 80140b4:	0e16      	lsrs	r6, r2, #24
 80140b6:	f3c2 4507 	ubfx	r5, r2, #16, #8
 80140ba:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80140be:	23ff      	movs	r3, #255	; 0xff
 80140c0:	2209      	movs	r2, #9
 80140c2:	7046      	strb	r6, [r0, #1]
 80140c4:	7085      	strb	r5, [r0, #2]
 80140c6:	70c4      	strb	r4, [r0, #3]
 80140c8:	7001      	strb	r1, [r0, #0]
 80140ca:	bc70      	pop	{r4, r5, r6}
 80140cc:	80c2      	strh	r2, [r0, #6]
 80140ce:	7143      	strb	r3, [r0, #5]
 80140d0:	4770      	bx	lr
 80140d2:	bf00      	nop

080140d4 <uxr_buffer_create_session>:
 80140d4:	b570      	push	{r4, r5, r6, lr}
 80140d6:	4d11      	ldr	r5, [pc, #68]	; (801411c <uxr_buffer_create_session+0x48>)
 80140d8:	f8d0 3001 	ldr.w	r3, [r0, #1]
 80140dc:	7806      	ldrb	r6, [r0, #0]
 80140de:	b088      	sub	sp, #32
 80140e0:	460c      	mov	r4, r1
 80140e2:	9302      	str	r3, [sp, #8]
 80140e4:	2101      	movs	r1, #1
 80140e6:	2300      	movs	r3, #0
 80140e8:	f8ad 201c 	strh.w	r2, [sp, #28]
 80140ec:	88aa      	ldrh	r2, [r5, #4]
 80140ee:	80c1      	strh	r1, [r0, #6]
 80140f0:	f88d 600c 	strb.w	r6, [sp, #12]
 80140f4:	f8ad 1004 	strh.w	r1, [sp, #4]
 80140f8:	682e      	ldr	r6, [r5, #0]
 80140fa:	f8ad 2006 	strh.w	r2, [sp, #6]
 80140fe:	4619      	mov	r1, r3
 8014100:	2210      	movs	r2, #16
 8014102:	4620      	mov	r0, r4
 8014104:	f88d 300d 	strb.w	r3, [sp, #13]
 8014108:	9600      	str	r6, [sp, #0]
 801410a:	f000 feb1 	bl	8014e70 <uxr_buffer_submessage_header>
 801410e:	4620      	mov	r0, r4
 8014110:	4669      	mov	r1, sp
 8014112:	f001 fc65 	bl	80159e0 <uxr_serialize_CREATE_CLIENT_Payload>
 8014116:	b008      	add	sp, #32
 8014118:	bd70      	pop	{r4, r5, r6, pc}
 801411a:	bf00      	nop
 801411c:	0801f5f8 	.word	0x0801f5f8

08014120 <uxr_buffer_delete_session>:
 8014120:	b530      	push	{r4, r5, lr}
 8014122:	4b0c      	ldr	r3, [pc, #48]	; (8014154 <uxr_buffer_delete_session+0x34>)
 8014124:	b083      	sub	sp, #12
 8014126:	891b      	ldrh	r3, [r3, #8]
 8014128:	f8ad 3006 	strh.w	r3, [sp, #6]
 801412c:	2202      	movs	r2, #2
 801412e:	460c      	mov	r4, r1
 8014130:	80c2      	strh	r2, [r0, #6]
 8014132:	2300      	movs	r3, #0
 8014134:	2204      	movs	r2, #4
 8014136:	4608      	mov	r0, r1
 8014138:	f44f 7500 	mov.w	r5, #512	; 0x200
 801413c:	2103      	movs	r1, #3
 801413e:	f8ad 5004 	strh.w	r5, [sp, #4]
 8014142:	f000 fe95 	bl	8014e70 <uxr_buffer_submessage_header>
 8014146:	4620      	mov	r0, r4
 8014148:	a901      	add	r1, sp, #4
 801414a:	f001 fce3 	bl	8015b14 <uxr_serialize_DELETE_Payload>
 801414e:	b003      	add	sp, #12
 8014150:	bd30      	pop	{r4, r5, pc}
 8014152:	bf00      	nop
 8014154:	0801f5f8 	.word	0x0801f5f8

08014158 <uxr_read_create_session_status>:
 8014158:	b510      	push	{r4, lr}
 801415a:	b088      	sub	sp, #32
 801415c:	4604      	mov	r4, r0
 801415e:	4608      	mov	r0, r1
 8014160:	a901      	add	r1, sp, #4
 8014162:	f001 fce7 	bl	8015b34 <uxr_deserialize_STATUS_AGENT_Payload>
 8014166:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801416a:	7163      	strb	r3, [r4, #5]
 801416c:	b008      	add	sp, #32
 801416e:	bd10      	pop	{r4, pc}

08014170 <uxr_read_delete_session_status>:
 8014170:	b510      	push	{r4, lr}
 8014172:	4604      	mov	r4, r0
 8014174:	b084      	sub	sp, #16
 8014176:	4608      	mov	r0, r1
 8014178:	a902      	add	r1, sp, #8
 801417a:	f001 fd0b 	bl	8015b94 <uxr_deserialize_STATUS_Payload>
 801417e:	88e3      	ldrh	r3, [r4, #6]
 8014180:	2b02      	cmp	r3, #2
 8014182:	d001      	beq.n	8014188 <uxr_read_delete_session_status+0x18>
 8014184:	b004      	add	sp, #16
 8014186:	bd10      	pop	{r4, pc}
 8014188:	f10d 000a 	add.w	r0, sp, #10
 801418c:	f7ff f8c2 	bl	8013314 <uxr_object_id_from_raw>
 8014190:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8014194:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8014198:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801419c:	b29b      	uxth	r3, r3
 801419e:	2b02      	cmp	r3, #2
 80141a0:	bf04      	itt	eq
 80141a2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80141a6:	7163      	strbeq	r3, [r4, #5]
 80141a8:	b004      	add	sp, #16
 80141aa:	bd10      	pop	{r4, pc}

080141ac <uxr_stamp_create_session_header>:
 80141ac:	b510      	push	{r4, lr}
 80141ae:	4604      	mov	r4, r0
 80141b0:	b08a      	sub	sp, #40	; 0x28
 80141b2:	a802      	add	r0, sp, #8
 80141b4:	2208      	movs	r2, #8
 80141b6:	f7fe fcf3 	bl	8012ba0 <ucdr_init_buffer>
 80141ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141be:	9400      	str	r4, [sp, #0]
 80141c0:	2300      	movs	r3, #0
 80141c2:	a802      	add	r0, sp, #8
 80141c4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80141c8:	461a      	mov	r2, r3
 80141ca:	f001 f845 	bl	8015258 <uxr_serialize_message_header>
 80141ce:	b00a      	add	sp, #40	; 0x28
 80141d0:	bd10      	pop	{r4, pc}
 80141d2:	bf00      	nop

080141d4 <uxr_stamp_session_header>:
 80141d4:	b570      	push	{r4, r5, r6, lr}
 80141d6:	4604      	mov	r4, r0
 80141d8:	b08c      	sub	sp, #48	; 0x30
 80141da:	460d      	mov	r5, r1
 80141dc:	4616      	mov	r6, r2
 80141de:	4619      	mov	r1, r3
 80141e0:	a804      	add	r0, sp, #16
 80141e2:	2208      	movs	r2, #8
 80141e4:	9603      	str	r6, [sp, #12]
 80141e6:	f7fe fcdb 	bl	8012ba0 <ucdr_init_buffer>
 80141ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141ee:	9b03      	ldr	r3, [sp, #12]
 80141f0:	9400      	str	r4, [sp, #0]
 80141f2:	462a      	mov	r2, r5
 80141f4:	a804      	add	r0, sp, #16
 80141f6:	f001 f82f 	bl	8015258 <uxr_serialize_message_header>
 80141fa:	b00c      	add	sp, #48	; 0x30
 80141fc:	bd70      	pop	{r4, r5, r6, pc}
 80141fe:	bf00      	nop

08014200 <uxr_read_session_header>:
 8014200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014204:	4607      	mov	r7, r0
 8014206:	b084      	sub	sp, #16
 8014208:	4608      	mov	r0, r1
 801420a:	460c      	mov	r4, r1
 801420c:	4615      	mov	r5, r2
 801420e:	461e      	mov	r6, r3
 8014210:	f7fe fcf8 	bl	8012c04 <ucdr_buffer_remaining>
 8014214:	2808      	cmp	r0, #8
 8014216:	d803      	bhi.n	8014220 <uxr_read_session_header+0x20>
 8014218:	2000      	movs	r0, #0
 801421a:	b004      	add	sp, #16
 801421c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014220:	f10d 080c 	add.w	r8, sp, #12
 8014224:	4633      	mov	r3, r6
 8014226:	462a      	mov	r2, r5
 8014228:	4620      	mov	r0, r4
 801422a:	f8cd 8000 	str.w	r8, [sp]
 801422e:	f10d 010b 	add.w	r1, sp, #11
 8014232:	f001 f82f 	bl	8015294 <uxr_deserialize_message_header>
 8014236:	783a      	ldrb	r2, [r7, #0]
 8014238:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801423c:	4293      	cmp	r3, r2
 801423e:	d1eb      	bne.n	8014218 <uxr_read_session_header+0x18>
 8014240:	061b      	lsls	r3, r3, #24
 8014242:	d41c      	bmi.n	801427e <uxr_read_session_header+0x7e>
 8014244:	f898 2000 	ldrb.w	r2, [r8]
 8014248:	787b      	ldrb	r3, [r7, #1]
 801424a:	429a      	cmp	r2, r3
 801424c:	d003      	beq.n	8014256 <uxr_read_session_header+0x56>
 801424e:	2001      	movs	r0, #1
 8014250:	f080 0001 	eor.w	r0, r0, #1
 8014254:	e7e1      	b.n	801421a <uxr_read_session_header+0x1a>
 8014256:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801425a:	78bb      	ldrb	r3, [r7, #2]
 801425c:	429a      	cmp	r2, r3
 801425e:	f107 0102 	add.w	r1, r7, #2
 8014262:	d1f4      	bne.n	801424e <uxr_read_session_header+0x4e>
 8014264:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8014268:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801426c:	429a      	cmp	r2, r3
 801426e:	d1ee      	bne.n	801424e <uxr_read_session_header+0x4e>
 8014270:	784b      	ldrb	r3, [r1, #1]
 8014272:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8014276:	429a      	cmp	r2, r3
 8014278:	d1e9      	bne.n	801424e <uxr_read_session_header+0x4e>
 801427a:	2000      	movs	r0, #0
 801427c:	e7e8      	b.n	8014250 <uxr_read_session_header+0x50>
 801427e:	2001      	movs	r0, #1
 8014280:	e7cb      	b.n	801421a <uxr_read_session_header+0x1a>
 8014282:	bf00      	nop

08014284 <uxr_session_header_offset>:
 8014284:	f990 3000 	ldrsb.w	r3, [r0]
 8014288:	2b00      	cmp	r3, #0
 801428a:	bfac      	ite	ge
 801428c:	2008      	movge	r0, #8
 801428e:	2004      	movlt	r0, #4
 8014290:	4770      	bx	lr
 8014292:	bf00      	nop

08014294 <uxr_init_base_object_request>:
 8014294:	b530      	push	{r4, r5, lr}
 8014296:	88c3      	ldrh	r3, [r0, #6]
 8014298:	b083      	sub	sp, #12
 801429a:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 801429e:	9101      	str	r1, [sp, #4]
 80142a0:	f1a3 010a 	sub.w	r1, r3, #10
 80142a4:	b289      	uxth	r1, r1
 80142a6:	42a1      	cmp	r1, r4
 80142a8:	d80e      	bhi.n	80142c8 <uxr_init_base_object_request+0x34>
 80142aa:	3301      	adds	r3, #1
 80142ac:	b29c      	uxth	r4, r3
 80142ae:	f3c3 2507 	ubfx	r5, r3, #8, #8
 80142b2:	b2db      	uxtb	r3, r3
 80142b4:	80c4      	strh	r4, [r0, #6]
 80142b6:	1c91      	adds	r1, r2, #2
 80142b8:	9801      	ldr	r0, [sp, #4]
 80142ba:	7015      	strb	r5, [r2, #0]
 80142bc:	7053      	strb	r3, [r2, #1]
 80142be:	f7ff f83d 	bl	801333c <uxr_object_id_to_raw>
 80142c2:	4620      	mov	r0, r4
 80142c4:	b003      	add	sp, #12
 80142c6:	bd30      	pop	{r4, r5, pc}
 80142c8:	230a      	movs	r3, #10
 80142ca:	461c      	mov	r4, r3
 80142cc:	2500      	movs	r5, #0
 80142ce:	e7f1      	b.n	80142b4 <uxr_init_base_object_request+0x20>

080142d0 <uxr_parse_base_object_request>:
 80142d0:	b570      	push	{r4, r5, r6, lr}
 80142d2:	4604      	mov	r4, r0
 80142d4:	3002      	adds	r0, #2
 80142d6:	460d      	mov	r5, r1
 80142d8:	4616      	mov	r6, r2
 80142da:	f7ff f81b 	bl	8013314 <uxr_object_id_from_raw>
 80142de:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80142e2:	8028      	strh	r0, [r5, #0]
 80142e4:	806b      	strh	r3, [r5, #2]
 80142e6:	7822      	ldrb	r2, [r4, #0]
 80142e8:	7863      	ldrb	r3, [r4, #1]
 80142ea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80142ee:	8033      	strh	r3, [r6, #0]
 80142f0:	bd70      	pop	{r4, r5, r6, pc}
 80142f2:	bf00      	nop

080142f4 <uxr_init_framing_io>:
 80142f4:	2300      	movs	r3, #0
 80142f6:	7041      	strb	r1, [r0, #1]
 80142f8:	7003      	strb	r3, [r0, #0]
 80142fa:	8583      	strh	r3, [r0, #44]	; 0x2c
 80142fc:	4770      	bx	lr
 80142fe:	bf00      	nop

08014300 <uxr_write_framed_msg>:
 8014300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014304:	7845      	ldrb	r5, [r0, #1]
 8014306:	b085      	sub	sp, #20
 8014308:	4604      	mov	r4, r0
 801430a:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 801430e:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8014312:	f1bc 0f01 	cmp.w	ip, #1
 8014316:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801431a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801431e:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 8014322:	460e      	mov	r6, r1
 8014324:	4617      	mov	r7, r2
 8014326:	469b      	mov	fp, r3
 8014328:	f240 811c 	bls.w	8014564 <uxr_write_framed_msg+0x264>
 801432c:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8014330:	2302      	movs	r3, #2
 8014332:	2a01      	cmp	r2, #1
 8014334:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8014338:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801433c:	f240 8096 	bls.w	801446c <uxr_write_framed_msg+0x16c>
 8014340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014342:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8014346:	b2d9      	uxtb	r1, r3
 8014348:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801434c:	2203      	movs	r2, #3
 801434e:	2b01      	cmp	r3, #1
 8014350:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014354:	f240 809f 	bls.w	8014496 <uxr_write_framed_msg+0x196>
 8014358:	18a3      	adds	r3, r4, r2
 801435a:	3201      	adds	r2, #1
 801435c:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8014360:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014366:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801436a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 801436e:	2901      	cmp	r1, #1
 8014370:	eb04 0102 	add.w	r1, r4, r2
 8014374:	f240 8107 	bls.w	8014586 <uxr_write_framed_msg+0x286>
 8014378:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 801437c:	3201      	adds	r2, #1
 801437e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014380:	b2d2      	uxtb	r2, r2
 8014382:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014386:	2b00      	cmp	r3, #0
 8014388:	f000 810c 	beq.w	80145a4 <uxr_write_framed_msg+0x2a4>
 801438c:	f04f 0a00 	mov.w	sl, #0
 8014390:	46d1      	mov	r9, sl
 8014392:	4653      	mov	r3, sl
 8014394:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8014398:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 801439c:	2901      	cmp	r1, #1
 801439e:	f240 80a8 	bls.w	80144f2 <uxr_write_framed_msg+0x1f2>
 80143a2:	2a29      	cmp	r2, #41	; 0x29
 80143a4:	f200 8083 	bhi.w	80144ae <uxr_write_framed_msg+0x1ae>
 80143a8:	18a1      	adds	r1, r4, r2
 80143aa:	3201      	adds	r2, #1
 80143ac:	b2d2      	uxtb	r2, r2
 80143ae:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 80143b2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80143b6:	ea8a 0303 	eor.w	r3, sl, r3
 80143ba:	4986      	ldr	r1, [pc, #536]	; (80145d4 <uxr_write_framed_msg+0x2d4>)
 80143bc:	b2db      	uxtb	r3, r3
 80143be:	f109 0901 	add.w	r9, r9, #1
 80143c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80143c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80143c8:	fa1f f989 	uxth.w	r9, r9
 80143cc:	4549      	cmp	r1, r9
 80143ce:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 80143d2:	464b      	mov	r3, r9
 80143d4:	d8de      	bhi.n	8014394 <uxr_write_framed_msg+0x94>
 80143d6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80143da:	fa5f f98a 	uxtb.w	r9, sl
 80143de:	9301      	str	r3, [sp, #4]
 80143e0:	f04f 0b00 	mov.w	fp, #0
 80143e4:	f88d 900c 	strb.w	r9, [sp, #12]
 80143e8:	f88d 300d 	strb.w	r3, [sp, #13]
 80143ec:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 80143f0:	fa5f f18a 	uxtb.w	r1, sl
 80143f4:	2901      	cmp	r1, #1
 80143f6:	d920      	bls.n	801443a <uxr_write_framed_msg+0x13a>
 80143f8:	2a29      	cmp	r2, #41	; 0x29
 80143fa:	f240 808c 	bls.w	8014516 <uxr_write_framed_msg+0x216>
 80143fe:	2500      	movs	r5, #0
 8014400:	e000      	b.n	8014404 <uxr_write_framed_msg+0x104>
 8014402:	b160      	cbz	r0, 801441e <uxr_write_framed_msg+0x11e>
 8014404:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8014408:	1b52      	subs	r2, r2, r5
 801440a:	4421      	add	r1, r4
 801440c:	4643      	mov	r3, r8
 801440e:	4638      	mov	r0, r7
 8014410:	47b0      	blx	r6
 8014412:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8014416:	4405      	add	r5, r0
 8014418:	4295      	cmp	r5, r2
 801441a:	d3f2      	bcc.n	8014402 <uxr_write_framed_msg+0x102>
 801441c:	d003      	beq.n	8014426 <uxr_write_framed_msg+0x126>
 801441e:	2000      	movs	r0, #0
 8014420:	b005      	add	sp, #20
 8014422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014426:	fa5f f18a 	uxtb.w	r1, sl
 801442a:	f04f 0300 	mov.w	r3, #0
 801442e:	2901      	cmp	r1, #1
 8014430:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014434:	f04f 0200 	mov.w	r2, #0
 8014438:	d86d      	bhi.n	8014516 <uxr_write_framed_msg+0x216>
 801443a:	1c51      	adds	r1, r2, #1
 801443c:	b2c9      	uxtb	r1, r1
 801443e:	2929      	cmp	r1, #41	; 0x29
 8014440:	d8dd      	bhi.n	80143fe <uxr_write_framed_msg+0xfe>
 8014442:	18a0      	adds	r0, r4, r2
 8014444:	3202      	adds	r2, #2
 8014446:	f089 0920 	eor.w	r9, r9, #32
 801444a:	b2d2      	uxtb	r2, r2
 801444c:	4659      	mov	r1, fp
 801444e:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8014452:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8014456:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801445a:	f04f 0b01 	mov.w	fp, #1
 801445e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014462:	2900      	cmp	r1, #0
 8014464:	d163      	bne.n	801452e <uxr_write_framed_msg+0x22e>
 8014466:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801446a:	e7bf      	b.n	80143ec <uxr_write_framed_msg+0xec>
 801446c:	2204      	movs	r2, #4
 801446e:	2503      	movs	r5, #3
 8014470:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014472:	4423      	add	r3, r4
 8014474:	b2c9      	uxtb	r1, r1
 8014476:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 801447a:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 801447e:	4425      	add	r5, r4
 8014480:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8014484:	f080 0020 	eor.w	r0, r0, #32
 8014488:	2b01      	cmp	r3, #1
 801448a:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801448e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014492:	f63f af61 	bhi.w	8014358 <uxr_write_framed_msg+0x58>
 8014496:	18a3      	adds	r3, r4, r2
 8014498:	f081 0120 	eor.w	r1, r1, #32
 801449c:	3202      	adds	r2, #2
 801449e:	207d      	movs	r0, #125	; 0x7d
 80144a0:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 80144a4:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 80144a8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80144ac:	e75a      	b.n	8014364 <uxr_write_framed_msg+0x64>
 80144ae:	2500      	movs	r5, #0
 80144b0:	e001      	b.n	80144b6 <uxr_write_framed_msg+0x1b6>
 80144b2:	2800      	cmp	r0, #0
 80144b4:	d0b3      	beq.n	801441e <uxr_write_framed_msg+0x11e>
 80144b6:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80144ba:	1b52      	subs	r2, r2, r5
 80144bc:	4421      	add	r1, r4
 80144be:	4643      	mov	r3, r8
 80144c0:	4638      	mov	r0, r7
 80144c2:	47b0      	blx	r6
 80144c4:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80144c8:	4405      	add	r5, r0
 80144ca:	4295      	cmp	r5, r2
 80144cc:	d3f1      	bcc.n	80144b2 <uxr_write_framed_msg+0x1b2>
 80144ce:	d1a6      	bne.n	801441e <uxr_write_framed_msg+0x11e>
 80144d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80144d2:	f04f 0300 	mov.w	r3, #0
 80144d6:	454a      	cmp	r2, r9
 80144d8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80144dc:	464b      	mov	r3, r9
 80144de:	d971      	bls.n	80145c4 <uxr_write_framed_msg+0x2c4>
 80144e0:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80144e4:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80144e8:	2901      	cmp	r1, #1
 80144ea:	f04f 0200 	mov.w	r2, #0
 80144ee:	f63f af58 	bhi.w	80143a2 <uxr_write_framed_msg+0xa2>
 80144f2:	1c51      	adds	r1, r2, #1
 80144f4:	b2c9      	uxtb	r1, r1
 80144f6:	2929      	cmp	r1, #41	; 0x29
 80144f8:	d8d9      	bhi.n	80144ae <uxr_write_framed_msg+0x1ae>
 80144fa:	18a0      	adds	r0, r4, r2
 80144fc:	3202      	adds	r2, #2
 80144fe:	b2d2      	uxtb	r2, r2
 8014500:	f083 0120 	eor.w	r1, r3, #32
 8014504:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8014508:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 801450c:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8014510:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014514:	e74f      	b.n	80143b6 <uxr_write_framed_msg+0xb6>
 8014516:	18a0      	adds	r0, r4, r2
 8014518:	3201      	adds	r2, #1
 801451a:	b2d2      	uxtb	r2, r2
 801451c:	4659      	mov	r1, fp
 801451e:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 8014522:	f04f 0b01 	mov.w	fp, #1
 8014526:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801452a:	2900      	cmp	r1, #0
 801452c:	d09b      	beq.n	8014466 <uxr_write_framed_msg+0x166>
 801452e:	2500      	movs	r5, #0
 8014530:	e002      	b.n	8014538 <uxr_write_framed_msg+0x238>
 8014532:	2800      	cmp	r0, #0
 8014534:	f43f af73 	beq.w	801441e <uxr_write_framed_msg+0x11e>
 8014538:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801453c:	1b52      	subs	r2, r2, r5
 801453e:	4421      	add	r1, r4
 8014540:	4643      	mov	r3, r8
 8014542:	4638      	mov	r0, r7
 8014544:	47b0      	blx	r6
 8014546:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801454a:	4405      	add	r5, r0
 801454c:	4295      	cmp	r5, r2
 801454e:	d3f0      	bcc.n	8014532 <uxr_write_framed_msg+0x232>
 8014550:	f47f af65 	bne.w	801441e <uxr_write_framed_msg+0x11e>
 8014554:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014556:	2300      	movs	r3, #0
 8014558:	b290      	uxth	r0, r2
 801455a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801455e:	b005      	add	sp, #20
 8014560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014564:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8014568:	f085 0520 	eor.w	r5, r5, #32
 801456c:	2303      	movs	r3, #3
 801456e:	217d      	movs	r1, #125	; 0x7d
 8014570:	2a01      	cmp	r2, #1
 8014572:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 8014576:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801457a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801457e:	d814      	bhi.n	80145aa <uxr_write_framed_msg+0x2aa>
 8014580:	2205      	movs	r2, #5
 8014582:	2504      	movs	r5, #4
 8014584:	e774      	b.n	8014470 <uxr_write_framed_msg+0x170>
 8014586:	f083 0320 	eor.w	r3, r3, #32
 801458a:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 801458e:	3202      	adds	r2, #2
 8014590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014592:	b2d2      	uxtb	r2, r2
 8014594:	207d      	movs	r0, #125	; 0x7d
 8014596:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 801459a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801459e:	2b00      	cmp	r3, #0
 80145a0:	f47f aef4 	bne.w	801438c <uxr_write_framed_msg+0x8c>
 80145a4:	9301      	str	r3, [sp, #4]
 80145a6:	4699      	mov	r9, r3
 80145a8:	e71a      	b.n	80143e0 <uxr_write_framed_msg+0xe0>
 80145aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80145ac:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80145b0:	b2d9      	uxtb	r1, r3
 80145b2:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 80145b6:	2204      	movs	r2, #4
 80145b8:	2b01      	cmp	r3, #1
 80145ba:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80145be:	f63f aecb 	bhi.w	8014358 <uxr_write_framed_msg+0x58>
 80145c2:	e768      	b.n	8014496 <uxr_write_framed_msg+0x196>
 80145c4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80145c8:	fa5f f98a 	uxtb.w	r9, sl
 80145cc:	9301      	str	r3, [sp, #4]
 80145ce:	2200      	movs	r2, #0
 80145d0:	e706      	b.n	80143e0 <uxr_write_framed_msg+0xe0>
 80145d2:	bf00      	nop
 80145d4:	0801f9d0 	.word	0x0801f9d0

080145d8 <uxr_framing_read_transport>:
 80145d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145dc:	4604      	mov	r4, r0
 80145de:	b083      	sub	sp, #12
 80145e0:	461f      	mov	r7, r3
 80145e2:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80145e6:	4689      	mov	r9, r1
 80145e8:	4692      	mov	sl, r2
 80145ea:	f000 fc87 	bl	8014efc <uxr_millis>
 80145ee:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80145f2:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 80145f6:	42b3      	cmp	r3, r6
 80145f8:	4680      	mov	r8, r0
 80145fa:	d05f      	beq.n	80146bc <uxr_framing_read_transport+0xe4>
 80145fc:	d81b      	bhi.n	8014636 <uxr_framing_read_transport+0x5e>
 80145fe:	1e75      	subs	r5, r6, #1
 8014600:	1aed      	subs	r5, r5, r3
 8014602:	b2ed      	uxtb	r5, r5
 8014604:	2600      	movs	r6, #0
 8014606:	455d      	cmp	r5, fp
 8014608:	d81e      	bhi.n	8014648 <uxr_framing_read_transport+0x70>
 801460a:	19ab      	adds	r3, r5, r6
 801460c:	455b      	cmp	r3, fp
 801460e:	bf84      	itt	hi
 8014610:	ebab 0605 	subhi.w	r6, fp, r5
 8014614:	b2f6      	uxtbhi	r6, r6
 8014616:	b9e5      	cbnz	r5, 8014652 <uxr_framing_read_transport+0x7a>
 8014618:	f04f 0b00 	mov.w	fp, #0
 801461c:	f000 fc6e 	bl	8014efc <uxr_millis>
 8014620:	683b      	ldr	r3, [r7, #0]
 8014622:	eba0 0008 	sub.w	r0, r0, r8
 8014626:	1a1b      	subs	r3, r3, r0
 8014628:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801462c:	4658      	mov	r0, fp
 801462e:	603b      	str	r3, [r7, #0]
 8014630:	b003      	add	sp, #12
 8014632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014636:	2e00      	cmp	r6, #0
 8014638:	d048      	beq.n	80146cc <uxr_framing_read_transport+0xf4>
 801463a:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 801463e:	b2ed      	uxtb	r5, r5
 8014640:	3e01      	subs	r6, #1
 8014642:	455d      	cmp	r5, fp
 8014644:	b2f6      	uxtb	r6, r6
 8014646:	d9e0      	bls.n	801460a <uxr_framing_read_transport+0x32>
 8014648:	fa5f f58b 	uxtb.w	r5, fp
 801464c:	2600      	movs	r6, #0
 801464e:	2d00      	cmp	r5, #0
 8014650:	d0e2      	beq.n	8014618 <uxr_framing_read_transport+0x40>
 8014652:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014656:	3102      	adds	r1, #2
 8014658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801465a:	9300      	str	r3, [sp, #0]
 801465c:	683b      	ldr	r3, [r7, #0]
 801465e:	4421      	add	r1, r4
 8014660:	462a      	mov	r2, r5
 8014662:	4650      	mov	r0, sl
 8014664:	47c8      	blx	r9
 8014666:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801466a:	4a1b      	ldr	r2, [pc, #108]	; (80146d8 <uxr_framing_read_transport+0x100>)
 801466c:	4403      	add	r3, r0
 801466e:	0859      	lsrs	r1, r3, #1
 8014670:	fba2 2101 	umull	r2, r1, r2, r1
 8014674:	0889      	lsrs	r1, r1, #2
 8014676:	222a      	movs	r2, #42	; 0x2a
 8014678:	fb02 3111 	mls	r1, r2, r1, r3
 801467c:	4683      	mov	fp, r0
 801467e:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8014682:	2800      	cmp	r0, #0
 8014684:	d0c8      	beq.n	8014618 <uxr_framing_read_transport+0x40>
 8014686:	42a8      	cmp	r0, r5
 8014688:	d1c8      	bne.n	801461c <uxr_framing_read_transport+0x44>
 801468a:	b31e      	cbz	r6, 80146d4 <uxr_framing_read_transport+0xfc>
 801468c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801468e:	9300      	str	r3, [sp, #0]
 8014690:	3102      	adds	r1, #2
 8014692:	4421      	add	r1, r4
 8014694:	4632      	mov	r2, r6
 8014696:	2300      	movs	r3, #0
 8014698:	4650      	mov	r0, sl
 801469a:	47c8      	blx	r9
 801469c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80146a0:	490d      	ldr	r1, [pc, #52]	; (80146d8 <uxr_framing_read_transport+0x100>)
 80146a2:	181a      	adds	r2, r3, r0
 80146a4:	0853      	lsrs	r3, r2, #1
 80146a6:	fba1 1303 	umull	r1, r3, r1, r3
 80146aa:	089b      	lsrs	r3, r3, #2
 80146ac:	212a      	movs	r1, #42	; 0x2a
 80146ae:	fb01 2313 	mls	r3, r1, r3, r2
 80146b2:	eb00 0b05 	add.w	fp, r0, r5
 80146b6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80146ba:	e7af      	b.n	801461c <uxr_framing_read_transport+0x44>
 80146bc:	2600      	movs	r6, #0
 80146be:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 80146c2:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80146c4:	d9c0      	bls.n	8014648 <uxr_framing_read_transport+0x70>
 80146c6:	2102      	movs	r1, #2
 80146c8:	2529      	movs	r5, #41	; 0x29
 80146ca:	e7c5      	b.n	8014658 <uxr_framing_read_transport+0x80>
 80146cc:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 80146d0:	b2ed      	uxtb	r5, r5
 80146d2:	e798      	b.n	8014606 <uxr_framing_read_transport+0x2e>
 80146d4:	46ab      	mov	fp, r5
 80146d6:	e7a1      	b.n	801461c <uxr_framing_read_transport+0x44>
 80146d8:	30c30c31 	.word	0x30c30c31

080146dc <uxr_read_framed_msg>:
 80146dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146e0:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 80146e4:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 80146e8:	42ae      	cmp	r6, r5
 80146ea:	b083      	sub	sp, #12
 80146ec:	4604      	mov	r4, r0
 80146ee:	461f      	mov	r7, r3
 80146f0:	4689      	mov	r9, r1
 80146f2:	4692      	mov	sl, r2
 80146f4:	f000 817d 	beq.w	80149f2 <uxr_read_framed_msg+0x316>
 80146f8:	7823      	ldrb	r3, [r4, #0]
 80146fa:	4ecc      	ldr	r6, [pc, #816]	; (8014a2c <uxr_read_framed_msg+0x350>)
 80146fc:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8014a30 <uxr_read_framed_msg+0x354>
 8014700:	2b07      	cmp	r3, #7
 8014702:	d8fd      	bhi.n	8014700 <uxr_read_framed_msg+0x24>
 8014704:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014708:	00f40113 	.word	0x00f40113
 801470c:	00b700d4 	.word	0x00b700d4
 8014710:	004d008e 	.word	0x004d008e
 8014714:	00080030 	.word	0x00080030
 8014718:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801471c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014720:	4298      	cmp	r0, r3
 8014722:	f000 8141 	beq.w	80149a8 <uxr_read_framed_msg+0x2cc>
 8014726:	18e2      	adds	r2, r4, r3
 8014728:	7891      	ldrb	r1, [r2, #2]
 801472a:	297d      	cmp	r1, #125	; 0x7d
 801472c:	f000 81a2 	beq.w	8014a74 <uxr_read_framed_msg+0x398>
 8014730:	3301      	adds	r3, #1
 8014732:	085a      	lsrs	r2, r3, #1
 8014734:	fba6 0202 	umull	r0, r2, r6, r2
 8014738:	0892      	lsrs	r2, r2, #2
 801473a:	202a      	movs	r0, #42	; 0x2a
 801473c:	fb00 3312 	mls	r3, r0, r2, r3
 8014740:	297e      	cmp	r1, #126	; 0x7e
 8014742:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014746:	f000 8251 	beq.w	8014bec <uxr_read_framed_msg+0x510>
 801474a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801474c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801474e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014752:	b29b      	uxth	r3, r3
 8014754:	2100      	movs	r1, #0
 8014756:	429a      	cmp	r2, r3
 8014758:	86a3      	strh	r3, [r4, #52]	; 0x34
 801475a:	7021      	strb	r1, [r4, #0]
 801475c:	f000 8182 	beq.w	8014a64 <uxr_read_framed_msg+0x388>
 8014760:	2000      	movs	r0, #0
 8014762:	b003      	add	sp, #12
 8014764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014768:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801476c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014770:	4298      	cmp	r0, r3
 8014772:	f000 8128 	beq.w	80149c6 <uxr_read_framed_msg+0x2ea>
 8014776:	18e2      	adds	r2, r4, r3
 8014778:	7891      	ldrb	r1, [r2, #2]
 801477a:	297d      	cmp	r1, #125	; 0x7d
 801477c:	f000 8196 	beq.w	8014aac <uxr_read_framed_msg+0x3d0>
 8014780:	3301      	adds	r3, #1
 8014782:	085a      	lsrs	r2, r3, #1
 8014784:	fba6 0202 	umull	r0, r2, r6, r2
 8014788:	0892      	lsrs	r2, r2, #2
 801478a:	202a      	movs	r0, #42	; 0x2a
 801478c:	fb00 3312 	mls	r3, r0, r2, r3
 8014790:	297e      	cmp	r1, #126	; 0x7e
 8014792:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014796:	f000 8219 	beq.w	8014bcc <uxr_read_framed_msg+0x4f0>
 801479a:	2307      	movs	r3, #7
 801479c:	86a1      	strh	r1, [r4, #52]	; 0x34
 801479e:	7023      	strb	r3, [r4, #0]
 80147a0:	e7ae      	b.n	8014700 <uxr_read_framed_msg+0x24>
 80147a2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80147a4:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 80147a6:	429d      	cmp	r5, r3
 80147a8:	d937      	bls.n	801481a <uxr_read_framed_msg+0x13e>
 80147aa:	ee07 9a90 	vmov	s15, r9
 80147ae:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80147b2:	e01e      	b.n	80147f2 <uxr_read_framed_msg+0x116>
 80147b4:	f89e e002 	ldrb.w	lr, [lr, #2]
 80147b8:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 80147bc:	f000 80d2 	beq.w	8014964 <uxr_read_framed_msg+0x288>
 80147c0:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80147c4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80147c8:	f000 8214 	beq.w	8014bf4 <uxr_read_framed_msg+0x518>
 80147cc:	f807 e003 	strb.w	lr, [r7, r3]
 80147d0:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80147d2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80147d4:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 80147d6:	ea80 010e 	eor.w	r1, r0, lr
 80147da:	b2c9      	uxtb	r1, r1
 80147dc:	3301      	adds	r3, #1
 80147de:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 80147e2:	b29b      	uxth	r3, r3
 80147e4:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80147e8:	42ab      	cmp	r3, r5
 80147ea:	86e2      	strh	r2, [r4, #54]	; 0x36
 80147ec:	8663      	strh	r3, [r4, #50]	; 0x32
 80147ee:	f080 8121 	bcs.w	8014a34 <uxr_read_framed_msg+0x358>
 80147f2:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 80147f6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80147fa:	f101 0b01 	add.w	fp, r1, #1
 80147fe:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8014802:	fba6 9202 	umull	r9, r2, r6, r2
 8014806:	0892      	lsrs	r2, r2, #2
 8014808:	4288      	cmp	r0, r1
 801480a:	eb04 0e01 	add.w	lr, r4, r1
 801480e:	fb0c b212 	mls	r2, ip, r2, fp
 8014812:	d1cf      	bne.n	80147b4 <uxr_read_framed_msg+0xd8>
 8014814:	ee17 9a90 	vmov	r9, s15
 8014818:	429d      	cmp	r5, r3
 801481a:	f040 8112 	bne.w	8014a42 <uxr_read_framed_msg+0x366>
 801481e:	2306      	movs	r3, #6
 8014820:	7023      	strb	r3, [r4, #0]
 8014822:	e76d      	b.n	8014700 <uxr_read_framed_msg+0x24>
 8014824:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8014828:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801482c:	4298      	cmp	r0, r3
 801482e:	f000 80bb 	beq.w	80149a8 <uxr_read_framed_msg+0x2cc>
 8014832:	18e2      	adds	r2, r4, r3
 8014834:	7891      	ldrb	r1, [r2, #2]
 8014836:	297d      	cmp	r1, #125	; 0x7d
 8014838:	f000 8153 	beq.w	8014ae2 <uxr_read_framed_msg+0x406>
 801483c:	3301      	adds	r3, #1
 801483e:	085a      	lsrs	r2, r3, #1
 8014840:	fba6 0202 	umull	r0, r2, r6, r2
 8014844:	0892      	lsrs	r2, r2, #2
 8014846:	202a      	movs	r0, #42	; 0x2a
 8014848:	fb00 3212 	mls	r2, r0, r2, r3
 801484c:	297e      	cmp	r1, #126	; 0x7e
 801484e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014852:	f000 81cb 	beq.w	8014bec <uxr_read_framed_msg+0x510>
 8014856:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8014858:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801485c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801485e:	b29b      	uxth	r3, r3
 8014860:	2000      	movs	r0, #0
 8014862:	428b      	cmp	r3, r1
 8014864:	8623      	strh	r3, [r4, #48]	; 0x30
 8014866:	8660      	strh	r0, [r4, #50]	; 0x32
 8014868:	86e0      	strh	r0, [r4, #54]	; 0x36
 801486a:	f240 80db 	bls.w	8014a24 <uxr_read_framed_msg+0x348>
 801486e:	7020      	strb	r0, [r4, #0]
 8014870:	b003      	add	sp, #12
 8014872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014876:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801487a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801487e:	4298      	cmp	r0, r3
 8014880:	f000 80a1 	beq.w	80149c6 <uxr_read_framed_msg+0x2ea>
 8014884:	18e2      	adds	r2, r4, r3
 8014886:	7891      	ldrb	r1, [r2, #2]
 8014888:	297d      	cmp	r1, #125	; 0x7d
 801488a:	f000 8167 	beq.w	8014b5c <uxr_read_framed_msg+0x480>
 801488e:	3301      	adds	r3, #1
 8014890:	085a      	lsrs	r2, r3, #1
 8014892:	fba6 0202 	umull	r0, r2, r6, r2
 8014896:	0892      	lsrs	r2, r2, #2
 8014898:	202a      	movs	r0, #42	; 0x2a
 801489a:	fb00 3312 	mls	r3, r0, r2, r3
 801489e:	297e      	cmp	r1, #126	; 0x7e
 80148a0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80148a4:	f000 8192 	beq.w	8014bcc <uxr_read_framed_msg+0x4f0>
 80148a8:	2304      	movs	r3, #4
 80148aa:	8621      	strh	r1, [r4, #48]	; 0x30
 80148ac:	7023      	strb	r3, [r4, #0]
 80148ae:	e727      	b.n	8014700 <uxr_read_framed_msg+0x24>
 80148b0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80148b4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80148b8:	4290      	cmp	r0, r2
 80148ba:	f000 80b1 	beq.w	8014a20 <uxr_read_framed_msg+0x344>
 80148be:	18a3      	adds	r3, r4, r2
 80148c0:	7899      	ldrb	r1, [r3, #2]
 80148c2:	297d      	cmp	r1, #125	; 0x7d
 80148c4:	f000 8166 	beq.w	8014b94 <uxr_read_framed_msg+0x4b8>
 80148c8:	3201      	adds	r2, #1
 80148ca:	0850      	lsrs	r0, r2, #1
 80148cc:	fba6 3000 	umull	r3, r0, r6, r0
 80148d0:	0880      	lsrs	r0, r0, #2
 80148d2:	232a      	movs	r3, #42	; 0x2a
 80148d4:	fb03 2210 	mls	r2, r3, r0, r2
 80148d8:	297e      	cmp	r1, #126	; 0x7e
 80148da:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80148de:	f000 8187 	beq.w	8014bf0 <uxr_read_framed_msg+0x514>
 80148e2:	7863      	ldrb	r3, [r4, #1]
 80148e4:	428b      	cmp	r3, r1
 80148e6:	bf0c      	ite	eq
 80148e8:	2303      	moveq	r3, #3
 80148ea:	2300      	movne	r3, #0
 80148ec:	7023      	strb	r3, [r4, #0]
 80148ee:	e707      	b.n	8014700 <uxr_read_framed_msg+0x24>
 80148f0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80148f4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80148f8:	2200      	movs	r2, #0
 80148fa:	4299      	cmp	r1, r3
 80148fc:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8014900:	d063      	beq.n	80149ca <uxr_read_framed_msg+0x2ee>
 8014902:	18e2      	adds	r2, r4, r3
 8014904:	7892      	ldrb	r2, [r2, #2]
 8014906:	2a7d      	cmp	r2, #125	; 0x7d
 8014908:	f000 8107 	beq.w	8014b1a <uxr_read_framed_msg+0x43e>
 801490c:	1c59      	adds	r1, r3, #1
 801490e:	084b      	lsrs	r3, r1, #1
 8014910:	fba6 0303 	umull	r0, r3, r6, r3
 8014914:	089b      	lsrs	r3, r3, #2
 8014916:	202a      	movs	r0, #42	; 0x2a
 8014918:	fb00 1313 	mls	r3, r0, r3, r1
 801491c:	2a7e      	cmp	r2, #126	; 0x7e
 801491e:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8014922:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014926:	d050      	beq.n	80149ca <uxr_read_framed_msg+0x2ee>
 8014928:	2302      	movs	r3, #2
 801492a:	7023      	strb	r3, [r4, #0]
 801492c:	e6e8      	b.n	8014700 <uxr_read_framed_msg+0x24>
 801492e:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 8014932:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8014936:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801493a:	1c51      	adds	r1, r2, #1
 801493c:	084b      	lsrs	r3, r1, #1
 801493e:	fba6 5303 	umull	r5, r3, r6, r3
 8014942:	089b      	lsrs	r3, r3, #2
 8014944:	fb0c 1313 	mls	r3, ip, r3, r1
 8014948:	4596      	cmp	lr, r2
 801494a:	eb04 0002 	add.w	r0, r4, r2
 801494e:	b2da      	uxtb	r2, r3
 8014950:	f43f af06 	beq.w	8014760 <uxr_read_framed_msg+0x84>
 8014954:	7883      	ldrb	r3, [r0, #2]
 8014956:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801495a:	2b7e      	cmp	r3, #126	; 0x7e
 801495c:	d1ed      	bne.n	801493a <uxr_read_framed_msg+0x25e>
 801495e:	2301      	movs	r3, #1
 8014960:	7023      	strb	r3, [r4, #0]
 8014962:	e6cd      	b.n	8014700 <uxr_read_framed_msg+0x24>
 8014964:	f101 0b01 	add.w	fp, r1, #1
 8014968:	ea4f 025b 	mov.w	r2, fp, lsr #1
 801496c:	fba6 e202 	umull	lr, r2, r6, r2
 8014970:	3102      	adds	r1, #2
 8014972:	0892      	lsrs	r2, r2, #2
 8014974:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8014978:	fb0c b212 	mls	r2, ip, r2, fp
 801497c:	fba6 9e0e 	umull	r9, lr, r6, lr
 8014980:	eb04 0b02 	add.w	fp, r4, r2
 8014984:	b2d2      	uxtb	r2, r2
 8014986:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 801498a:	4290      	cmp	r0, r2
 801498c:	fb0c 111e 	mls	r1, ip, lr, r1
 8014990:	f43f af40 	beq.w	8014814 <uxr_read_framed_msg+0x138>
 8014994:	f89b e002 	ldrb.w	lr, [fp, #2]
 8014998:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 801499c:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80149a0:	d036      	beq.n	8014a10 <uxr_read_framed_msg+0x334>
 80149a2:	f08e 0e20 	eor.w	lr, lr, #32
 80149a6:	e711      	b.n	80147cc <uxr_read_framed_msg+0xf0>
 80149a8:	2301      	movs	r3, #1
 80149aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80149ac:	4649      	mov	r1, r9
 80149ae:	e9cd 2300 	strd	r2, r3, [sp]
 80149b2:	4620      	mov	r0, r4
 80149b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149b6:	4652      	mov	r2, sl
 80149b8:	f7ff fe0e 	bl	80145d8 <uxr_framing_read_transport>
 80149bc:	2800      	cmp	r0, #0
 80149be:	f43f aecf 	beq.w	8014760 <uxr_read_framed_msg+0x84>
 80149c2:	7823      	ldrb	r3, [r4, #0]
 80149c4:	e69c      	b.n	8014700 <uxr_read_framed_msg+0x24>
 80149c6:	2302      	movs	r3, #2
 80149c8:	e7ef      	b.n	80149aa <uxr_read_framed_msg+0x2ce>
 80149ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80149cc:	2304      	movs	r3, #4
 80149ce:	e9cd 2300 	strd	r2, r3, [sp]
 80149d2:	4649      	mov	r1, r9
 80149d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149d6:	4652      	mov	r2, sl
 80149d8:	4620      	mov	r0, r4
 80149da:	f7ff fdfd 	bl	80145d8 <uxr_framing_read_transport>
 80149de:	2800      	cmp	r0, #0
 80149e0:	d1ef      	bne.n	80149c2 <uxr_read_framed_msg+0x2e6>
 80149e2:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 80149e6:	387e      	subs	r0, #126	; 0x7e
 80149e8:	bf18      	it	ne
 80149ea:	2001      	movne	r0, #1
 80149ec:	2800      	cmp	r0, #0
 80149ee:	d0e8      	beq.n	80149c2 <uxr_read_framed_msg+0x2e6>
 80149f0:	e6b6      	b.n	8014760 <uxr_read_framed_msg+0x84>
 80149f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80149f4:	2305      	movs	r3, #5
 80149f6:	e9cd 5300 	strd	r5, r3, [sp]
 80149fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149fc:	f7ff fdec 	bl	80145d8 <uxr_framing_read_transport>
 8014a00:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8014a04:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	f43f aea9 	beq.w	8014760 <uxr_read_framed_msg+0x84>
 8014a0e:	e673      	b.n	80146f8 <uxr_read_framed_msg+0x1c>
 8014a10:	429d      	cmp	r5, r3
 8014a12:	ee17 9a90 	vmov	r9, s15
 8014a16:	f43f af02 	beq.w	801481e <uxr_read_framed_msg+0x142>
 8014a1a:	2301      	movs	r3, #1
 8014a1c:	7023      	strb	r3, [r4, #0]
 8014a1e:	e66f      	b.n	8014700 <uxr_read_framed_msg+0x24>
 8014a20:	2303      	movs	r3, #3
 8014a22:	e7c2      	b.n	80149aa <uxr_read_framed_msg+0x2ce>
 8014a24:	2305      	movs	r3, #5
 8014a26:	7023      	strb	r3, [r4, #0]
 8014a28:	e66a      	b.n	8014700 <uxr_read_framed_msg+0x24>
 8014a2a:	bf00      	nop
 8014a2c:	30c30c31 	.word	0x30c30c31
 8014a30:	0801f9d0 	.word	0x0801f9d0
 8014a34:	ee17 9a90 	vmov	r9, s15
 8014a38:	f43f aef1 	beq.w	801481e <uxr_read_framed_msg+0x142>
 8014a3c:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8014a40:	d08d      	beq.n	801495e <uxr_read_framed_msg+0x282>
 8014a42:	1aeb      	subs	r3, r5, r3
 8014a44:	3302      	adds	r3, #2
 8014a46:	9301      	str	r3, [sp, #4]
 8014a48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a4a:	9300      	str	r3, [sp, #0]
 8014a4c:	4652      	mov	r2, sl
 8014a4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a50:	4649      	mov	r1, r9
 8014a52:	4620      	mov	r0, r4
 8014a54:	f7ff fdc0 	bl	80145d8 <uxr_framing_read_transport>
 8014a58:	fab0 f080 	clz	r0, r0
 8014a5c:	0940      	lsrs	r0, r0, #5
 8014a5e:	2800      	cmp	r0, #0
 8014a60:	d0af      	beq.n	80149c2 <uxr_read_framed_msg+0x2e6>
 8014a62:	e67d      	b.n	8014760 <uxr_read_framed_msg+0x84>
 8014a64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014a66:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8014a6a:	7013      	strb	r3, [r2, #0]
 8014a6c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8014a6e:	b003      	add	sp, #12
 8014a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a74:	1c59      	adds	r1, r3, #1
 8014a76:	084a      	lsrs	r2, r1, #1
 8014a78:	fba6 5202 	umull	r5, r2, r6, r2
 8014a7c:	0892      	lsrs	r2, r2, #2
 8014a7e:	252a      	movs	r5, #42	; 0x2a
 8014a80:	fb05 1212 	mls	r2, r5, r2, r1
 8014a84:	b2d1      	uxtb	r1, r2
 8014a86:	4288      	cmp	r0, r1
 8014a88:	d08e      	beq.n	80149a8 <uxr_read_framed_msg+0x2cc>
 8014a8a:	3302      	adds	r3, #2
 8014a8c:	4422      	add	r2, r4
 8014a8e:	0858      	lsrs	r0, r3, #1
 8014a90:	fba6 1000 	umull	r1, r0, r6, r0
 8014a94:	7891      	ldrb	r1, [r2, #2]
 8014a96:	0882      	lsrs	r2, r0, #2
 8014a98:	fb05 3312 	mls	r3, r5, r2, r3
 8014a9c:	297e      	cmp	r1, #126	; 0x7e
 8014a9e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014aa2:	f000 80a3 	beq.w	8014bec <uxr_read_framed_msg+0x510>
 8014aa6:	f081 0120 	eor.w	r1, r1, #32
 8014aaa:	e64e      	b.n	801474a <uxr_read_framed_msg+0x6e>
 8014aac:	1c59      	adds	r1, r3, #1
 8014aae:	084a      	lsrs	r2, r1, #1
 8014ab0:	fba6 5202 	umull	r5, r2, r6, r2
 8014ab4:	0892      	lsrs	r2, r2, #2
 8014ab6:	252a      	movs	r5, #42	; 0x2a
 8014ab8:	fb05 1212 	mls	r2, r5, r2, r1
 8014abc:	b2d1      	uxtb	r1, r2
 8014abe:	4288      	cmp	r0, r1
 8014ac0:	d081      	beq.n	80149c6 <uxr_read_framed_msg+0x2ea>
 8014ac2:	3302      	adds	r3, #2
 8014ac4:	4422      	add	r2, r4
 8014ac6:	0858      	lsrs	r0, r3, #1
 8014ac8:	fba6 1000 	umull	r1, r0, r6, r0
 8014acc:	7891      	ldrb	r1, [r2, #2]
 8014ace:	0882      	lsrs	r2, r0, #2
 8014ad0:	fb05 3312 	mls	r3, r5, r2, r3
 8014ad4:	297e      	cmp	r1, #126	; 0x7e
 8014ad6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014ada:	d077      	beq.n	8014bcc <uxr_read_framed_msg+0x4f0>
 8014adc:	f081 0120 	eor.w	r1, r1, #32
 8014ae0:	e65b      	b.n	801479a <uxr_read_framed_msg+0xbe>
 8014ae2:	1c59      	adds	r1, r3, #1
 8014ae4:	084a      	lsrs	r2, r1, #1
 8014ae6:	fba6 5202 	umull	r5, r2, r6, r2
 8014aea:	0892      	lsrs	r2, r2, #2
 8014aec:	252a      	movs	r5, #42	; 0x2a
 8014aee:	fb05 1212 	mls	r2, r5, r2, r1
 8014af2:	b2d1      	uxtb	r1, r2
 8014af4:	4288      	cmp	r0, r1
 8014af6:	f43f af57 	beq.w	80149a8 <uxr_read_framed_msg+0x2cc>
 8014afa:	3302      	adds	r3, #2
 8014afc:	4422      	add	r2, r4
 8014afe:	0858      	lsrs	r0, r3, #1
 8014b00:	fba6 1000 	umull	r1, r0, r6, r0
 8014b04:	7891      	ldrb	r1, [r2, #2]
 8014b06:	0882      	lsrs	r2, r0, #2
 8014b08:	fb05 3312 	mls	r3, r5, r2, r3
 8014b0c:	297e      	cmp	r1, #126	; 0x7e
 8014b0e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014b12:	d06b      	beq.n	8014bec <uxr_read_framed_msg+0x510>
 8014b14:	f081 0120 	eor.w	r1, r1, #32
 8014b18:	e69d      	b.n	8014856 <uxr_read_framed_msg+0x17a>
 8014b1a:	1c5d      	adds	r5, r3, #1
 8014b1c:	086a      	lsrs	r2, r5, #1
 8014b1e:	fba6 0202 	umull	r0, r2, r6, r2
 8014b22:	0892      	lsrs	r2, r2, #2
 8014b24:	202a      	movs	r0, #42	; 0x2a
 8014b26:	fb00 5212 	mls	r2, r0, r2, r5
 8014b2a:	b2d5      	uxtb	r5, r2
 8014b2c:	42a9      	cmp	r1, r5
 8014b2e:	f43f af4c 	beq.w	80149ca <uxr_read_framed_msg+0x2ee>
 8014b32:	3302      	adds	r3, #2
 8014b34:	4422      	add	r2, r4
 8014b36:	0859      	lsrs	r1, r3, #1
 8014b38:	fba6 5101 	umull	r5, r1, r6, r1
 8014b3c:	7895      	ldrb	r5, [r2, #2]
 8014b3e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8014b42:	088a      	lsrs	r2, r1, #2
 8014b44:	fb00 3312 	mls	r3, r0, r2, r3
 8014b48:	2d7e      	cmp	r5, #126	; 0x7e
 8014b4a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014b4e:	f43f af3c 	beq.w	80149ca <uxr_read_framed_msg+0x2ee>
 8014b52:	f085 0520 	eor.w	r5, r5, #32
 8014b56:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8014b5a:	e6e5      	b.n	8014928 <uxr_read_framed_msg+0x24c>
 8014b5c:	1c59      	adds	r1, r3, #1
 8014b5e:	084a      	lsrs	r2, r1, #1
 8014b60:	fba6 5202 	umull	r5, r2, r6, r2
 8014b64:	0892      	lsrs	r2, r2, #2
 8014b66:	252a      	movs	r5, #42	; 0x2a
 8014b68:	fb05 1212 	mls	r2, r5, r2, r1
 8014b6c:	b2d1      	uxtb	r1, r2
 8014b6e:	4288      	cmp	r0, r1
 8014b70:	f43f af29 	beq.w	80149c6 <uxr_read_framed_msg+0x2ea>
 8014b74:	3302      	adds	r3, #2
 8014b76:	4422      	add	r2, r4
 8014b78:	0858      	lsrs	r0, r3, #1
 8014b7a:	fba6 1000 	umull	r1, r0, r6, r0
 8014b7e:	7891      	ldrb	r1, [r2, #2]
 8014b80:	0882      	lsrs	r2, r0, #2
 8014b82:	fb05 3312 	mls	r3, r5, r2, r3
 8014b86:	297e      	cmp	r1, #126	; 0x7e
 8014b88:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014b8c:	d01e      	beq.n	8014bcc <uxr_read_framed_msg+0x4f0>
 8014b8e:	f081 0120 	eor.w	r1, r1, #32
 8014b92:	e689      	b.n	80148a8 <uxr_read_framed_msg+0x1cc>
 8014b94:	1c51      	adds	r1, r2, #1
 8014b96:	084b      	lsrs	r3, r1, #1
 8014b98:	fba6 5303 	umull	r5, r3, r6, r3
 8014b9c:	089b      	lsrs	r3, r3, #2
 8014b9e:	252a      	movs	r5, #42	; 0x2a
 8014ba0:	fb05 1313 	mls	r3, r5, r3, r1
 8014ba4:	b2d9      	uxtb	r1, r3
 8014ba6:	4288      	cmp	r0, r1
 8014ba8:	f43f af3a 	beq.w	8014a20 <uxr_read_framed_msg+0x344>
 8014bac:	3202      	adds	r2, #2
 8014bae:	4423      	add	r3, r4
 8014bb0:	0850      	lsrs	r0, r2, #1
 8014bb2:	789b      	ldrb	r3, [r3, #2]
 8014bb4:	fba6 1000 	umull	r1, r0, r6, r0
 8014bb8:	0880      	lsrs	r0, r0, #2
 8014bba:	fb05 2210 	mls	r2, r5, r0, r2
 8014bbe:	2b7e      	cmp	r3, #126	; 0x7e
 8014bc0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014bc4:	d014      	beq.n	8014bf0 <uxr_read_framed_msg+0x514>
 8014bc6:	f083 0120 	eor.w	r1, r3, #32
 8014bca:	e68a      	b.n	80148e2 <uxr_read_framed_msg+0x206>
 8014bcc:	2302      	movs	r3, #2
 8014bce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014bd0:	4649      	mov	r1, r9
 8014bd2:	e9cd 2300 	strd	r2, r3, [sp]
 8014bd6:	4620      	mov	r0, r4
 8014bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014bda:	4652      	mov	r2, sl
 8014bdc:	f7ff fcfc 	bl	80145d8 <uxr_framing_read_transport>
 8014be0:	2800      	cmp	r0, #0
 8014be2:	f47f aeee 	bne.w	80149c2 <uxr_read_framed_msg+0x2e6>
 8014be6:	2301      	movs	r3, #1
 8014be8:	7023      	strb	r3, [r4, #0]
 8014bea:	e589      	b.n	8014700 <uxr_read_framed_msg+0x24>
 8014bec:	2301      	movs	r3, #1
 8014bee:	e7ee      	b.n	8014bce <uxr_read_framed_msg+0x4f2>
 8014bf0:	2303      	movs	r3, #3
 8014bf2:	e7ec      	b.n	8014bce <uxr_read_framed_msg+0x4f2>
 8014bf4:	ee17 9a90 	vmov	r9, s15
 8014bf8:	e6b1      	b.n	801495e <uxr_read_framed_msg+0x282>
 8014bfa:	bf00      	nop

08014bfc <uxr_stream_id>:
 8014bfc:	b410      	push	{r4}
 8014bfe:	2901      	cmp	r1, #1
 8014c00:	b083      	sub	sp, #12
 8014c02:	d01f      	beq.n	8014c44 <uxr_stream_id+0x48>
 8014c04:	2902      	cmp	r1, #2
 8014c06:	f04f 0400 	mov.w	r4, #0
 8014c0a:	d01e      	beq.n	8014c4a <uxr_stream_id+0x4e>
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	f364 0307 	bfi	r3, r4, #0, #8
 8014c12:	f360 230f 	bfi	r3, r0, #8, #8
 8014c16:	f361 4317 	bfi	r3, r1, #16, #8
 8014c1a:	f362 631f 	bfi	r3, r2, #24, #8
 8014c1e:	b2da      	uxtb	r2, r3
 8014c20:	2000      	movs	r0, #0
 8014c22:	f362 0007 	bfi	r0, r2, #0, #8
 8014c26:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014c2a:	f362 200f 	bfi	r0, r2, #8, #8
 8014c2e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014c32:	f362 4017 	bfi	r0, r2, #16, #8
 8014c36:	0e1b      	lsrs	r3, r3, #24
 8014c38:	f363 601f 	bfi	r0, r3, #24, #8
 8014c3c:	b003      	add	sp, #12
 8014c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c42:	4770      	bx	lr
 8014c44:	1c44      	adds	r4, r0, #1
 8014c46:	b2e4      	uxtb	r4, r4
 8014c48:	e7e0      	b.n	8014c0c <uxr_stream_id+0x10>
 8014c4a:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 8014c4e:	e7dd      	b.n	8014c0c <uxr_stream_id+0x10>

08014c50 <uxr_stream_id_from_raw>:
 8014c50:	b410      	push	{r4}
 8014c52:	b083      	sub	sp, #12
 8014c54:	b128      	cbz	r0, 8014c62 <uxr_stream_id_from_raw+0x12>
 8014c56:	0603      	lsls	r3, r0, #24
 8014c58:	d421      	bmi.n	8014c9e <uxr_stream_id_from_raw+0x4e>
 8014c5a:	1e42      	subs	r2, r0, #1
 8014c5c:	b2d2      	uxtb	r2, r2
 8014c5e:	2401      	movs	r4, #1
 8014c60:	e001      	b.n	8014c66 <uxr_stream_id_from_raw+0x16>
 8014c62:	4604      	mov	r4, r0
 8014c64:	4602      	mov	r2, r0
 8014c66:	2300      	movs	r3, #0
 8014c68:	f360 0307 	bfi	r3, r0, #0, #8
 8014c6c:	f362 230f 	bfi	r3, r2, #8, #8
 8014c70:	f364 4317 	bfi	r3, r4, #16, #8
 8014c74:	f361 631f 	bfi	r3, r1, #24, #8
 8014c78:	b2da      	uxtb	r2, r3
 8014c7a:	2000      	movs	r0, #0
 8014c7c:	f362 0007 	bfi	r0, r2, #0, #8
 8014c80:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014c84:	f362 200f 	bfi	r0, r2, #8, #8
 8014c88:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014c8c:	f362 4017 	bfi	r0, r2, #16, #8
 8014c90:	0e1b      	lsrs	r3, r3, #24
 8014c92:	f363 601f 	bfi	r0, r3, #24, #8
 8014c96:	b003      	add	sp, #12
 8014c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c9c:	4770      	bx	lr
 8014c9e:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8014ca2:	2402      	movs	r4, #2
 8014ca4:	e7df      	b.n	8014c66 <uxr_stream_id_from_raw+0x16>
 8014ca6:	bf00      	nop

08014ca8 <uxr_init_stream_storage>:
 8014ca8:	2300      	movs	r3, #0
 8014caa:	7403      	strb	r3, [r0, #16]
 8014cac:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8014cb0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8014cb4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8014cb8:	4770      	bx	lr
 8014cba:	bf00      	nop

08014cbc <uxr_reset_stream_storage>:
 8014cbc:	b570      	push	{r4, r5, r6, lr}
 8014cbe:	7c03      	ldrb	r3, [r0, #16]
 8014cc0:	4604      	mov	r4, r0
 8014cc2:	b153      	cbz	r3, 8014cda <uxr_reset_stream_storage+0x1e>
 8014cc4:	4606      	mov	r6, r0
 8014cc6:	2500      	movs	r5, #0
 8014cc8:	4630      	mov	r0, r6
 8014cca:	f004 fc39 	bl	8019540 <uxr_reset_output_best_effort_stream>
 8014cce:	7c23      	ldrb	r3, [r4, #16]
 8014cd0:	3501      	adds	r5, #1
 8014cd2:	42ab      	cmp	r3, r5
 8014cd4:	f106 0610 	add.w	r6, r6, #16
 8014cd8:	d8f6      	bhi.n	8014cc8 <uxr_reset_stream_storage+0xc>
 8014cda:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014cde:	b163      	cbz	r3, 8014cfa <uxr_reset_stream_storage+0x3e>
 8014ce0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014ce4:	2500      	movs	r5, #0
 8014ce6:	4630      	mov	r0, r6
 8014ce8:	f004 fa36 	bl	8019158 <uxr_reset_input_best_effort_stream>
 8014cec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014cf0:	3501      	adds	r5, #1
 8014cf2:	42ab      	cmp	r3, r5
 8014cf4:	f106 0602 	add.w	r6, r6, #2
 8014cf8:	d8f5      	bhi.n	8014ce6 <uxr_reset_stream_storage+0x2a>
 8014cfa:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8014cfe:	b163      	cbz	r3, 8014d1a <uxr_reset_stream_storage+0x5e>
 8014d00:	f104 0618 	add.w	r6, r4, #24
 8014d04:	2500      	movs	r5, #0
 8014d06:	4630      	mov	r0, r6
 8014d08:	f004 fcba 	bl	8019680 <uxr_reset_output_reliable_stream>
 8014d0c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8014d10:	3501      	adds	r5, #1
 8014d12:	42ab      	cmp	r3, r5
 8014d14:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8014d18:	d8f5      	bhi.n	8014d06 <uxr_reset_stream_storage+0x4a>
 8014d1a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8014d1e:	b163      	cbz	r3, 8014d3a <uxr_reset_stream_storage+0x7e>
 8014d20:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8014d24:	2500      	movs	r5, #0
 8014d26:	4630      	mov	r0, r6
 8014d28:	f004 fa7e 	bl	8019228 <uxr_reset_input_reliable_stream>
 8014d2c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8014d30:	3501      	adds	r5, #1
 8014d32:	42ab      	cmp	r3, r5
 8014d34:	f106 0618 	add.w	r6, r6, #24
 8014d38:	d8f5      	bhi.n	8014d26 <uxr_reset_stream_storage+0x6a>
 8014d3a:	bd70      	pop	{r4, r5, r6, pc}

08014d3c <uxr_add_output_best_effort_buffer>:
 8014d3c:	b530      	push	{r4, r5, lr}
 8014d3e:	7c04      	ldrb	r4, [r0, #16]
 8014d40:	1c65      	adds	r5, r4, #1
 8014d42:	b083      	sub	sp, #12
 8014d44:	7405      	strb	r5, [r0, #16]
 8014d46:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8014d4a:	f004 fbed 	bl	8019528 <uxr_init_output_best_effort_stream>
 8014d4e:	2201      	movs	r2, #1
 8014d50:	4620      	mov	r0, r4
 8014d52:	4611      	mov	r1, r2
 8014d54:	b003      	add	sp, #12
 8014d56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d5a:	f7ff bf4f 	b.w	8014bfc <uxr_stream_id>
 8014d5e:	bf00      	nop

08014d60 <uxr_add_output_reliable_buffer>:
 8014d60:	b570      	push	{r4, r5, r6, lr}
 8014d62:	b084      	sub	sp, #16
 8014d64:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8014d68:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8014d6c:	9600      	str	r6, [sp, #0]
 8014d6e:	2528      	movs	r5, #40	; 0x28
 8014d70:	1c66      	adds	r6, r4, #1
 8014d72:	fb05 0504 	mla	r5, r5, r4, r0
 8014d76:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 8014d7a:	f105 0018 	add.w	r0, r5, #24
 8014d7e:	f004 fc4d 	bl	801961c <uxr_init_output_reliable_stream>
 8014d82:	4620      	mov	r0, r4
 8014d84:	2201      	movs	r2, #1
 8014d86:	2102      	movs	r1, #2
 8014d88:	b004      	add	sp, #16
 8014d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d8e:	f7ff bf35 	b.w	8014bfc <uxr_stream_id>
 8014d92:	bf00      	nop

08014d94 <uxr_add_input_best_effort_buffer>:
 8014d94:	b510      	push	{r4, lr}
 8014d96:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8014d9a:	1c62      	adds	r2, r4, #1
 8014d9c:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8014da0:	b082      	sub	sp, #8
 8014da2:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8014da6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014daa:	f004 f9d1 	bl	8019150 <uxr_init_input_best_effort_stream>
 8014dae:	4620      	mov	r0, r4
 8014db0:	2200      	movs	r2, #0
 8014db2:	2101      	movs	r1, #1
 8014db4:	b002      	add	sp, #8
 8014db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014dba:	f7ff bf1f 	b.w	8014bfc <uxr_stream_id>
 8014dbe:	bf00      	nop

08014dc0 <uxr_add_input_reliable_buffer>:
 8014dc0:	b570      	push	{r4, r5, r6, lr}
 8014dc2:	b084      	sub	sp, #16
 8014dc4:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 8014dc8:	9e08      	ldr	r6, [sp, #32]
 8014dca:	9600      	str	r6, [sp, #0]
 8014dcc:	2518      	movs	r5, #24
 8014dce:	1c66      	adds	r6, r4, #1
 8014dd0:	fb05 0504 	mla	r5, r5, r4, r0
 8014dd4:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 8014dd8:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8014ddc:	f004 fa00 	bl	80191e0 <uxr_init_input_reliable_stream>
 8014de0:	4620      	mov	r0, r4
 8014de2:	2200      	movs	r2, #0
 8014de4:	2102      	movs	r1, #2
 8014de6:	b004      	add	sp, #16
 8014de8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014dec:	f7ff bf06 	b.w	8014bfc <uxr_stream_id>

08014df0 <uxr_get_output_best_effort_stream>:
 8014df0:	7c03      	ldrb	r3, [r0, #16]
 8014df2:	428b      	cmp	r3, r1
 8014df4:	bf8c      	ite	hi
 8014df6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8014dfa:	2000      	movls	r0, #0
 8014dfc:	4770      	bx	lr
 8014dfe:	bf00      	nop

08014e00 <uxr_get_output_reliable_stream>:
 8014e00:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8014e04:	428b      	cmp	r3, r1
 8014e06:	bf83      	ittte	hi
 8014e08:	2328      	movhi	r3, #40	; 0x28
 8014e0a:	fb03 0101 	mlahi	r1, r3, r1, r0
 8014e0e:	f101 0018 	addhi.w	r0, r1, #24
 8014e12:	2000      	movls	r0, #0
 8014e14:	4770      	bx	lr
 8014e16:	bf00      	nop

08014e18 <uxr_get_input_best_effort_stream>:
 8014e18:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8014e1c:	428b      	cmp	r3, r1
 8014e1e:	bf86      	itte	hi
 8014e20:	3121      	addhi	r1, #33	; 0x21
 8014e22:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8014e26:	2000      	movls	r0, #0
 8014e28:	4770      	bx	lr
 8014e2a:	bf00      	nop

08014e2c <uxr_get_input_reliable_stream>:
 8014e2c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8014e30:	428b      	cmp	r3, r1
 8014e32:	bf83      	ittte	hi
 8014e34:	2318      	movhi	r3, #24
 8014e36:	fb03 0101 	mlahi	r1, r3, r1, r0
 8014e3a:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 8014e3e:	2000      	movls	r0, #0
 8014e40:	4770      	bx	lr
 8014e42:	bf00      	nop

08014e44 <uxr_output_streams_confirmed>:
 8014e44:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8014e48:	b183      	cbz	r3, 8014e6c <uxr_output_streams_confirmed+0x28>
 8014e4a:	b570      	push	{r4, r5, r6, lr}
 8014e4c:	4606      	mov	r6, r0
 8014e4e:	f100 0518 	add.w	r5, r0, #24
 8014e52:	2400      	movs	r4, #0
 8014e54:	e001      	b.n	8014e5a <uxr_output_streams_confirmed+0x16>
 8014e56:	3528      	adds	r5, #40	; 0x28
 8014e58:	b138      	cbz	r0, 8014e6a <uxr_output_streams_confirmed+0x26>
 8014e5a:	4628      	mov	r0, r5
 8014e5c:	f004 fe6a 	bl	8019b34 <uxr_is_output_up_to_date>
 8014e60:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8014e64:	3401      	adds	r4, #1
 8014e66:	42a3      	cmp	r3, r4
 8014e68:	d8f5      	bhi.n	8014e56 <uxr_output_streams_confirmed+0x12>
 8014e6a:	bd70      	pop	{r4, r5, r6, pc}
 8014e6c:	2001      	movs	r0, #1
 8014e6e:	4770      	bx	lr

08014e70 <uxr_buffer_submessage_header>:
 8014e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e72:	4604      	mov	r4, r0
 8014e74:	460e      	mov	r6, r1
 8014e76:	2104      	movs	r1, #4
 8014e78:	4615      	mov	r5, r2
 8014e7a:	461f      	mov	r7, r3
 8014e7c:	f7fd feac 	bl	8012bd8 <ucdr_align_to>
 8014e80:	2301      	movs	r3, #1
 8014e82:	ea47 0203 	orr.w	r2, r7, r3
 8014e86:	4631      	mov	r1, r6
 8014e88:	7523      	strb	r3, [r4, #20]
 8014e8a:	4620      	mov	r0, r4
 8014e8c:	462b      	mov	r3, r5
 8014e8e:	f000 fa21 	bl	80152d4 <uxr_serialize_submessage_header>
 8014e92:	4620      	mov	r0, r4
 8014e94:	f7fd feb6 	bl	8012c04 <ucdr_buffer_remaining>
 8014e98:	42a8      	cmp	r0, r5
 8014e9a:	bf34      	ite	cc
 8014e9c:	2000      	movcc	r0, #0
 8014e9e:	2001      	movcs	r0, #1
 8014ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ea2:	bf00      	nop

08014ea4 <uxr_read_submessage_header>:
 8014ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ea8:	4604      	mov	r4, r0
 8014eaa:	460d      	mov	r5, r1
 8014eac:	2104      	movs	r1, #4
 8014eae:	4616      	mov	r6, r2
 8014eb0:	4698      	mov	r8, r3
 8014eb2:	f7fd fe91 	bl	8012bd8 <ucdr_align_to>
 8014eb6:	4620      	mov	r0, r4
 8014eb8:	f7fd fea4 	bl	8012c04 <ucdr_buffer_remaining>
 8014ebc:	2803      	cmp	r0, #3
 8014ebe:	bf8c      	ite	hi
 8014ec0:	2701      	movhi	r7, #1
 8014ec2:	2700      	movls	r7, #0
 8014ec4:	d802      	bhi.n	8014ecc <uxr_read_submessage_header+0x28>
 8014ec6:	4638      	mov	r0, r7
 8014ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ecc:	4633      	mov	r3, r6
 8014ece:	4642      	mov	r2, r8
 8014ed0:	4620      	mov	r0, r4
 8014ed2:	4629      	mov	r1, r5
 8014ed4:	f000 fa12 	bl	80152fc <uxr_deserialize_submessage_header>
 8014ed8:	f898 3000 	ldrb.w	r3, [r8]
 8014edc:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8014ee0:	f003 0301 	and.w	r3, r3, #1
 8014ee4:	f888 2000 	strb.w	r2, [r8]
 8014ee8:	7523      	strb	r3, [r4, #20]
 8014eea:	4638      	mov	r0, r7
 8014eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014ef0 <uxr_submessage_padding>:
 8014ef0:	f010 0003 	ands.w	r0, r0, #3
 8014ef4:	bf18      	it	ne
 8014ef6:	f1c0 0004 	rsbne	r0, r0, #4
 8014efa:	4770      	bx	lr

08014efc <uxr_millis>:
 8014efc:	b510      	push	{r4, lr}
 8014efe:	b084      	sub	sp, #16
 8014f00:	4669      	mov	r1, sp
 8014f02:	2001      	movs	r0, #1
 8014f04:	f7ed fe84 	bl	8002c10 <clock_gettime>
 8014f08:	e9dd 2400 	ldrd	r2, r4, [sp]
 8014f0c:	4907      	ldr	r1, [pc, #28]	; (8014f2c <uxr_millis+0x30>)
 8014f0e:	9802      	ldr	r0, [sp, #8]
 8014f10:	fba2 2301 	umull	r2, r3, r2, r1
 8014f14:	fb01 3304 	mla	r3, r1, r4, r3
 8014f18:	4604      	mov	r4, r0
 8014f1a:	1810      	adds	r0, r2, r0
 8014f1c:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8014f20:	4a03      	ldr	r2, [pc, #12]	; (8014f30 <uxr_millis+0x34>)
 8014f22:	2300      	movs	r3, #0
 8014f24:	f7eb fec0 	bl	8000ca8 <__aeabi_ldivmod>
 8014f28:	b004      	add	sp, #16
 8014f2a:	bd10      	pop	{r4, pc}
 8014f2c:	3b9aca00 	.word	0x3b9aca00
 8014f30:	000f4240 	.word	0x000f4240

08014f34 <uxr_nanos>:
 8014f34:	b510      	push	{r4, lr}
 8014f36:	b084      	sub	sp, #16
 8014f38:	4669      	mov	r1, sp
 8014f3a:	2001      	movs	r0, #1
 8014f3c:	f7ed fe68 	bl	8002c10 <clock_gettime>
 8014f40:	e9dd 2400 	ldrd	r2, r4, [sp]
 8014f44:	4905      	ldr	r1, [pc, #20]	; (8014f5c <uxr_nanos+0x28>)
 8014f46:	9802      	ldr	r0, [sp, #8]
 8014f48:	fba2 2301 	umull	r2, r3, r2, r1
 8014f4c:	fb01 3304 	mla	r3, r1, r4, r3
 8014f50:	4604      	mov	r4, r0
 8014f52:	1810      	adds	r0, r2, r0
 8014f54:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8014f58:	b004      	add	sp, #16
 8014f5a:	bd10      	pop	{r4, pc}
 8014f5c:	3b9aca00 	.word	0x3b9aca00

08014f60 <on_full_output_buffer_fragmented>:
 8014f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f64:	460c      	mov	r4, r1
 8014f66:	b08a      	sub	sp, #40	; 0x28
 8014f68:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8014f6c:	4606      	mov	r6, r0
 8014f6e:	f104 0008 	add.w	r0, r4, #8
 8014f72:	f7ff ff45 	bl	8014e00 <uxr_get_output_reliable_stream>
 8014f76:	4605      	mov	r5, r0
 8014f78:	f004 fde6 	bl	8019b48 <get_available_free_slots>
 8014f7c:	b968      	cbnz	r0, 8014f9a <on_full_output_buffer_fragmented+0x3a>
 8014f7e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8014f82:	4620      	mov	r0, r4
 8014f84:	4798      	blx	r3
 8014f86:	b918      	cbnz	r0, 8014f90 <on_full_output_buffer_fragmented+0x30>
 8014f88:	2001      	movs	r0, #1
 8014f8a:	b00a      	add	sp, #40	; 0x28
 8014f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f90:	4628      	mov	r0, r5
 8014f92:	f004 fdd9 	bl	8019b48 <get_available_free_slots>
 8014f96:	2800      	cmp	r0, #0
 8014f98:	d0f6      	beq.n	8014f88 <on_full_output_buffer_fragmented+0x28>
 8014f9a:	8928      	ldrh	r0, [r5, #8]
 8014f9c:	89eb      	ldrh	r3, [r5, #14]
 8014f9e:	7b2a      	ldrb	r2, [r5, #12]
 8014fa0:	fbb3 f1f0 	udiv	r1, r3, r0
 8014fa4:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 8014fa8:	fb00 3111 	mls	r1, r0, r1, r3
 8014fac:	b28b      	uxth	r3, r1
 8014fae:	32fc      	adds	r2, #252	; 0xfc
 8014fb0:	6869      	ldr	r1, [r5, #4]
 8014fb2:	fbb1 f1f0 	udiv	r1, r1, r0
 8014fb6:	1f0f      	subs	r7, r1, #4
 8014fb8:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8014fbc:	fb01 f103 	mul.w	r1, r1, r3
 8014fc0:	443a      	add	r2, r7
 8014fc2:	682b      	ldr	r3, [r5, #0]
 8014fc4:	fa1f f882 	uxth.w	r8, r2
 8014fc8:	3104      	adds	r1, #4
 8014fca:	4419      	add	r1, r3
 8014fcc:	eba0 0008 	sub.w	r0, r0, r8
 8014fd0:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8014fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014fd8:	9300      	str	r3, [sp, #0]
 8014fda:	463a      	mov	r2, r7
 8014fdc:	a802      	add	r0, sp, #8
 8014fde:	2300      	movs	r3, #0
 8014fe0:	f7fd fdcc 	bl	8012b7c <ucdr_init_buffer_origin_offset>
 8014fe4:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8014fe8:	42ba      	cmp	r2, r7
 8014fea:	d927      	bls.n	801503c <on_full_output_buffer_fragmented+0xdc>
 8014fec:	4642      	mov	r2, r8
 8014fee:	2300      	movs	r3, #0
 8014ff0:	210d      	movs	r1, #13
 8014ff2:	a802      	add	r0, sp, #8
 8014ff4:	f7ff ff3c 	bl	8014e70 <uxr_buffer_submessage_header>
 8014ff8:	8928      	ldrh	r0, [r5, #8]
 8014ffa:	89eb      	ldrh	r3, [r5, #14]
 8014ffc:	fbb3 f1f0 	udiv	r1, r3, r0
 8015000:	fb00 3111 	mls	r1, r0, r1, r3
 8015004:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015008:	b289      	uxth	r1, r1
 801500a:	fbb3 f3f0 	udiv	r3, r3, r0
 801500e:	fb03 f301 	mul.w	r3, r3, r1
 8015012:	50d7      	str	r7, [r2, r3]
 8015014:	89e8      	ldrh	r0, [r5, #14]
 8015016:	2101      	movs	r1, #1
 8015018:	f004 fdb6 	bl	8019b88 <uxr_seq_num_add>
 801501c:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8015020:	81e8      	strh	r0, [r5, #14]
 8015022:	1a52      	subs	r2, r2, r1
 8015024:	4630      	mov	r0, r6
 8015026:	f7fd fdbb 	bl	8012ba0 <ucdr_init_buffer>
 801502a:	4630      	mov	r0, r6
 801502c:	490f      	ldr	r1, [pc, #60]	; (801506c <on_full_output_buffer_fragmented+0x10c>)
 801502e:	4622      	mov	r2, r4
 8015030:	f7fd fd8c 	bl	8012b4c <ucdr_set_on_full_buffer_callback>
 8015034:	2000      	movs	r0, #0
 8015036:	b00a      	add	sp, #40	; 0x28
 8015038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801503c:	b292      	uxth	r2, r2
 801503e:	2302      	movs	r3, #2
 8015040:	210d      	movs	r1, #13
 8015042:	a802      	add	r0, sp, #8
 8015044:	f7ff ff14 	bl	8014e70 <uxr_buffer_submessage_header>
 8015048:	8928      	ldrh	r0, [r5, #8]
 801504a:	89eb      	ldrh	r3, [r5, #14]
 801504c:	fbb3 f2f0 	udiv	r2, r3, r0
 8015050:	fb00 3212 	mls	r2, r0, r2, r3
 8015054:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8015058:	686b      	ldr	r3, [r5, #4]
 801505a:	fbb3 f3f0 	udiv	r3, r3, r0
 801505e:	b292      	uxth	r2, r2
 8015060:	6828      	ldr	r0, [r5, #0]
 8015062:	fb03 f302 	mul.w	r3, r3, r2
 8015066:	3108      	adds	r1, #8
 8015068:	50c1      	str	r1, [r0, r3]
 801506a:	e7d3      	b.n	8015014 <on_full_output_buffer_fragmented+0xb4>
 801506c:	08014f61 	.word	0x08014f61

08015070 <uxr_prepare_output_stream>:
 8015070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015072:	b087      	sub	sp, #28
 8015074:	2407      	movs	r4, #7
 8015076:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015078:	9202      	str	r2, [sp, #8]
 801507a:	2500      	movs	r5, #0
 801507c:	1d32      	adds	r2, r6, #4
 801507e:	e9cd 4500 	strd	r4, r5, [sp]
 8015082:	9103      	str	r1, [sp, #12]
 8015084:	461c      	mov	r4, r3
 8015086:	4606      	mov	r6, r0
 8015088:	f7fe ffce 	bl	8014028 <uxr_prepare_stream_to_write_submessage>
 801508c:	f080 0201 	eor.w	r2, r0, #1
 8015090:	b2d2      	uxtb	r2, r2
 8015092:	75a2      	strb	r2, [r4, #22]
 8015094:	b112      	cbz	r2, 801509c <uxr_prepare_output_stream+0x2c>
 8015096:	4628      	mov	r0, r5
 8015098:	b007      	add	sp, #28
 801509a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801509c:	aa05      	add	r2, sp, #20
 801509e:	9902      	ldr	r1, [sp, #8]
 80150a0:	4630      	mov	r0, r6
 80150a2:	f7ff f8f7 	bl	8014294 <uxr_init_base_object_request>
 80150a6:	a905      	add	r1, sp, #20
 80150a8:	4605      	mov	r5, r0
 80150aa:	4620      	mov	r0, r4
 80150ac:	f000 fda4 	bl	8015bf8 <uxr_serialize_WRITE_DATA_Payload_Data>
 80150b0:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80150b4:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 80150b8:	1a52      	subs	r2, r2, r1
 80150ba:	4620      	mov	r0, r4
 80150bc:	f7fd fd70 	bl	8012ba0 <ucdr_init_buffer>
 80150c0:	4620      	mov	r0, r4
 80150c2:	463a      	mov	r2, r7
 80150c4:	4631      	mov	r1, r6
 80150c6:	f7fd fd41 	bl	8012b4c <ucdr_set_on_full_buffer_callback>
 80150ca:	4628      	mov	r0, r5
 80150cc:	b007      	add	sp, #28
 80150ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080150d0 <uxr_prepare_output_stream_fragmented>:
 80150d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150d4:	b091      	sub	sp, #68	; 0x44
 80150d6:	4605      	mov	r5, r0
 80150d8:	9105      	str	r1, [sp, #20]
 80150da:	3008      	adds	r0, #8
 80150dc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80150e0:	9302      	str	r3, [sp, #8]
 80150e2:	9204      	str	r2, [sp, #16]
 80150e4:	f7ff fe8c 	bl	8014e00 <uxr_get_output_reliable_stream>
 80150e8:	2800      	cmp	r0, #0
 80150ea:	f000 808d 	beq.w	8015208 <uxr_prepare_output_stream_fragmented+0x138>
 80150ee:	4604      	mov	r4, r0
 80150f0:	f004 fd2a 	bl	8019b48 <get_available_free_slots>
 80150f4:	2800      	cmp	r0, #0
 80150f6:	f000 8082 	beq.w	80151fe <uxr_prepare_output_stream_fragmented+0x12e>
 80150fa:	8922      	ldrh	r2, [r4, #8]
 80150fc:	89e7      	ldrh	r7, [r4, #14]
 80150fe:	fbb7 f8f2 	udiv	r8, r7, r2
 8015102:	e9d4 3100 	ldrd	r3, r1, [r4]
 8015106:	fb02 7818 	mls	r8, r2, r8, r7
 801510a:	fa1f f888 	uxth.w	r8, r8
 801510e:	fbb1 f2f2 	udiv	r2, r1, r2
 8015112:	fb02 f808 	mul.w	r8, r2, r8
 8015116:	f108 0804 	add.w	r8, r8, #4
 801511a:	4498      	add	r8, r3
 801511c:	7b23      	ldrb	r3, [r4, #12]
 801511e:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8015122:	9203      	str	r2, [sp, #12]
 8015124:	4553      	cmp	r3, sl
 8015126:	f1a2 0b04 	sub.w	fp, r2, #4
 801512a:	d379      	bcc.n	8015220 <uxr_prepare_output_stream_fragmented+0x150>
 801512c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801512e:	f8cd a000 	str.w	sl, [sp]
 8015132:	f1ab 0904 	sub.w	r9, fp, #4
 8015136:	eba9 0903 	sub.w	r9, r9, r3
 801513a:	a808      	add	r0, sp, #32
 801513c:	465a      	mov	r2, fp
 801513e:	4641      	mov	r1, r8
 8015140:	3608      	adds	r6, #8
 8015142:	fa1f f989 	uxth.w	r9, r9
 8015146:	2300      	movs	r3, #0
 8015148:	f7fd fd18 	bl	8012b7c <ucdr_init_buffer_origin_offset>
 801514c:	455e      	cmp	r6, fp
 801514e:	bf34      	ite	cc
 8015150:	2302      	movcc	r3, #2
 8015152:	2300      	movcs	r3, #0
 8015154:	464a      	mov	r2, r9
 8015156:	a808      	add	r0, sp, #32
 8015158:	210d      	movs	r1, #13
 801515a:	f7ff fe89 	bl	8014e70 <uxr_buffer_submessage_header>
 801515e:	8920      	ldrh	r0, [r4, #8]
 8015160:	fbb7 f3f0 	udiv	r3, r7, r0
 8015164:	e9d4 2100 	ldrd	r2, r1, [r4]
 8015168:	fb00 7313 	mls	r3, r0, r3, r7
 801516c:	b29b      	uxth	r3, r3
 801516e:	fbb1 f1f0 	udiv	r1, r1, r0
 8015172:	fb03 f301 	mul.w	r3, r3, r1
 8015176:	4638      	mov	r0, r7
 8015178:	f842 b003 	str.w	fp, [r2, r3]
 801517c:	2101      	movs	r1, #1
 801517e:	f004 fd03 	bl	8019b88 <uxr_seq_num_add>
 8015182:	9a03      	ldr	r2, [sp, #12]
 8015184:	f10a 0104 	add.w	r1, sl, #4
 8015188:	4441      	add	r1, r8
 801518a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801518e:	3a08      	subs	r2, #8
 8015190:	4607      	mov	r7, r0
 8015192:	eba2 020a 	sub.w	r2, r2, sl
 8015196:	4640      	mov	r0, r8
 8015198:	f7fd fd02 	bl	8012ba0 <ucdr_init_buffer>
 801519c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801519e:	81e7      	strh	r7, [r4, #14]
 80151a0:	3204      	adds	r2, #4
 80151a2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80151a6:	bf28      	it	cs
 80151a8:	2200      	movcs	r2, #0
 80151aa:	2300      	movs	r3, #0
 80151ac:	b292      	uxth	r2, r2
 80151ae:	2107      	movs	r1, #7
 80151b0:	4640      	mov	r0, r8
 80151b2:	f7ff fe5d 	bl	8014e70 <uxr_buffer_submessage_header>
 80151b6:	aa07      	add	r2, sp, #28
 80151b8:	9904      	ldr	r1, [sp, #16]
 80151ba:	4628      	mov	r0, r5
 80151bc:	f7ff f86a 	bl	8014294 <uxr_init_base_object_request>
 80151c0:	a907      	add	r1, sp, #28
 80151c2:	4604      	mov	r4, r0
 80151c4:	4640      	mov	r0, r8
 80151c6:	f000 fd17 	bl	8015bf8 <uxr_serialize_WRITE_DATA_Payload_Data>
 80151ca:	e9d8 2101 	ldrd	r2, r1, [r8, #4]
 80151ce:	4640      	mov	r0, r8
 80151d0:	1a52      	subs	r2, r2, r1
 80151d2:	f7fd fce5 	bl	8012ba0 <ucdr_init_buffer>
 80151d6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80151d8:	9b05      	ldr	r3, [sp, #20]
 80151da:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 80151de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80151e0:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 80151e4:	4640      	mov	r0, r8
 80151e6:	491b      	ldr	r1, [pc, #108]	; (8015254 <uxr_prepare_output_stream_fragmented+0x184>)
 80151e8:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
 80151ec:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 80151f0:	462a      	mov	r2, r5
 80151f2:	f7fd fcab 	bl	8012b4c <ucdr_set_on_full_buffer_callback>
 80151f6:	4620      	mov	r0, r4
 80151f8:	b011      	add	sp, #68	; 0x44
 80151fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015200:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015202:	4628      	mov	r0, r5
 8015204:	4798      	blx	r3
 8015206:	b920      	cbnz	r0, 8015212 <uxr_prepare_output_stream_fragmented+0x142>
 8015208:	2400      	movs	r4, #0
 801520a:	4620      	mov	r0, r4
 801520c:	b011      	add	sp, #68	; 0x44
 801520e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015212:	4620      	mov	r0, r4
 8015214:	f004 fc98 	bl	8019b48 <get_available_free_slots>
 8015218:	2800      	cmp	r0, #0
 801521a:	f47f af6e 	bne.w	80150fa <uxr_prepare_output_stream_fragmented+0x2a>
 801521e:	e7f3      	b.n	8015208 <uxr_prepare_output_stream_fragmented+0x138>
 8015220:	4638      	mov	r0, r7
 8015222:	2101      	movs	r1, #1
 8015224:	f004 fcb0 	bl	8019b88 <uxr_seq_num_add>
 8015228:	8922      	ldrh	r2, [r4, #8]
 801522a:	fbb0 f8f2 	udiv	r8, r0, r2
 801522e:	fb02 0818 	mls	r8, r2, r8, r0
 8015232:	fa1f f888 	uxth.w	r8, r8
 8015236:	6863      	ldr	r3, [r4, #4]
 8015238:	fbb3 f3f2 	udiv	r3, r3, r2
 801523c:	6822      	ldr	r2, [r4, #0]
 801523e:	fb08 f803 	mul.w	r8, r8, r3
 8015242:	f108 0804 	add.w	r8, r8, #4
 8015246:	4490      	add	r8, r2
 8015248:	7b23      	ldrb	r3, [r4, #12]
 801524a:	f858 ac04 	ldr.w	sl, [r8, #-4]
 801524e:	4607      	mov	r7, r0
 8015250:	e76c      	b.n	801512c <uxr_prepare_output_stream_fragmented+0x5c>
 8015252:	bf00      	nop
 8015254:	08014f61 	.word	0x08014f61

08015258 <uxr_serialize_message_header>:
 8015258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801525a:	b083      	sub	sp, #12
 801525c:	4616      	mov	r6, r2
 801525e:	4604      	mov	r4, r0
 8015260:	9301      	str	r3, [sp, #4]
 8015262:	460d      	mov	r5, r1
 8015264:	9f08      	ldr	r7, [sp, #32]
 8015266:	f7fd f849 	bl	80122fc <ucdr_serialize_uint8_t>
 801526a:	4631      	mov	r1, r6
 801526c:	4620      	mov	r0, r4
 801526e:	f7fd f845 	bl	80122fc <ucdr_serialize_uint8_t>
 8015272:	9a01      	ldr	r2, [sp, #4]
 8015274:	4620      	mov	r0, r4
 8015276:	2101      	movs	r1, #1
 8015278:	f7fd f894 	bl	80123a4 <ucdr_serialize_endian_uint16_t>
 801527c:	062b      	lsls	r3, r5, #24
 801527e:	d501      	bpl.n	8015284 <uxr_serialize_message_header+0x2c>
 8015280:	b003      	add	sp, #12
 8015282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015284:	4639      	mov	r1, r7
 8015286:	4620      	mov	r0, r4
 8015288:	2204      	movs	r2, #4
 801528a:	b003      	add	sp, #12
 801528c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015290:	f7fc be1e 	b.w	8011ed0 <ucdr_serialize_array_uint8_t>

08015294 <uxr_deserialize_message_header>:
 8015294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015296:	b083      	sub	sp, #12
 8015298:	4616      	mov	r6, r2
 801529a:	4604      	mov	r4, r0
 801529c:	9301      	str	r3, [sp, #4]
 801529e:	460d      	mov	r5, r1
 80152a0:	9f08      	ldr	r7, [sp, #32]
 80152a2:	f7fd f841 	bl	8012328 <ucdr_deserialize_uint8_t>
 80152a6:	4631      	mov	r1, r6
 80152a8:	4620      	mov	r0, r4
 80152aa:	f7fd f83d 	bl	8012328 <ucdr_deserialize_uint8_t>
 80152ae:	9a01      	ldr	r2, [sp, #4]
 80152b0:	4620      	mov	r0, r4
 80152b2:	2101      	movs	r1, #1
 80152b4:	f7fd f8c8 	bl	8012448 <ucdr_deserialize_endian_uint16_t>
 80152b8:	f995 3000 	ldrsb.w	r3, [r5]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	da01      	bge.n	80152c4 <uxr_deserialize_message_header+0x30>
 80152c0:	b003      	add	sp, #12
 80152c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152c4:	4639      	mov	r1, r7
 80152c6:	4620      	mov	r0, r4
 80152c8:	2204      	movs	r2, #4
 80152ca:	b003      	add	sp, #12
 80152cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80152d0:	f7fc be62 	b.w	8011f98 <ucdr_deserialize_array_uint8_t>

080152d4 <uxr_serialize_submessage_header>:
 80152d4:	b530      	push	{r4, r5, lr}
 80152d6:	b083      	sub	sp, #12
 80152d8:	4615      	mov	r5, r2
 80152da:	4604      	mov	r4, r0
 80152dc:	9301      	str	r3, [sp, #4]
 80152de:	f7fd f80d 	bl	80122fc <ucdr_serialize_uint8_t>
 80152e2:	4629      	mov	r1, r5
 80152e4:	4620      	mov	r0, r4
 80152e6:	f7fd f809 	bl	80122fc <ucdr_serialize_uint8_t>
 80152ea:	9a01      	ldr	r2, [sp, #4]
 80152ec:	4620      	mov	r0, r4
 80152ee:	2101      	movs	r1, #1
 80152f0:	b003      	add	sp, #12
 80152f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80152f6:	f7fd b855 	b.w	80123a4 <ucdr_serialize_endian_uint16_t>
 80152fa:	bf00      	nop

080152fc <uxr_deserialize_submessage_header>:
 80152fc:	b530      	push	{r4, r5, lr}
 80152fe:	b083      	sub	sp, #12
 8015300:	4615      	mov	r5, r2
 8015302:	4604      	mov	r4, r0
 8015304:	9301      	str	r3, [sp, #4]
 8015306:	f7fd f80f 	bl	8012328 <ucdr_deserialize_uint8_t>
 801530a:	4629      	mov	r1, r5
 801530c:	4620      	mov	r0, r4
 801530e:	f7fd f80b 	bl	8012328 <ucdr_deserialize_uint8_t>
 8015312:	9a01      	ldr	r2, [sp, #4]
 8015314:	4620      	mov	r0, r4
 8015316:	2101      	movs	r1, #1
 8015318:	b003      	add	sp, #12
 801531a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801531e:	f7fd b893 	b.w	8012448 <ucdr_deserialize_endian_uint16_t>
 8015322:	bf00      	nop

08015324 <uxr_serialize_CLIENT_Representation>:
 8015324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015328:	2204      	movs	r2, #4
 801532a:	460c      	mov	r4, r1
 801532c:	4605      	mov	r5, r0
 801532e:	f7fc fdcf 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 8015332:	1d21      	adds	r1, r4, #4
 8015334:	4607      	mov	r7, r0
 8015336:	2202      	movs	r2, #2
 8015338:	4628      	mov	r0, r5
 801533a:	f7fc fdc9 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 801533e:	1da1      	adds	r1, r4, #6
 8015340:	4007      	ands	r7, r0
 8015342:	2202      	movs	r2, #2
 8015344:	4628      	mov	r0, r5
 8015346:	f7fc fdc3 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 801534a:	fa5f f887 	uxtb.w	r8, r7
 801534e:	2204      	movs	r2, #4
 8015350:	4607      	mov	r7, r0
 8015352:	f104 0108 	add.w	r1, r4, #8
 8015356:	4628      	mov	r0, r5
 8015358:	f7fc fdba 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 801535c:	ea08 0707 	and.w	r7, r8, r7
 8015360:	7b21      	ldrb	r1, [r4, #12]
 8015362:	4680      	mov	r8, r0
 8015364:	4628      	mov	r0, r5
 8015366:	f7fc ffc9 	bl	80122fc <ucdr_serialize_uint8_t>
 801536a:	ea08 0807 	and.w	r8, r8, r7
 801536e:	7b61      	ldrb	r1, [r4, #13]
 8015370:	4607      	mov	r7, r0
 8015372:	4628      	mov	r0, r5
 8015374:	f7fc ff92 	bl	801229c <ucdr_serialize_bool>
 8015378:	7b63      	ldrb	r3, [r4, #13]
 801537a:	ea08 0707 	and.w	r7, r8, r7
 801537e:	ea07 0600 	and.w	r6, r7, r0
 8015382:	b933      	cbnz	r3, 8015392 <uxr_serialize_CLIENT_Representation+0x6e>
 8015384:	8ba1      	ldrh	r1, [r4, #28]
 8015386:	4628      	mov	r0, r5
 8015388:	f7fc ffe4 	bl	8012354 <ucdr_serialize_uint16_t>
 801538c:	4030      	ands	r0, r6
 801538e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015392:	6921      	ldr	r1, [r4, #16]
 8015394:	4628      	mov	r0, r5
 8015396:	f7fd f881 	bl	801249c <ucdr_serialize_uint32_t>
 801539a:	6923      	ldr	r3, [r4, #16]
 801539c:	b1cb      	cbz	r3, 80153d2 <uxr_serialize_CLIENT_Representation+0xae>
 801539e:	b1d0      	cbz	r0, 80153d6 <uxr_serialize_CLIENT_Representation+0xb2>
 80153a0:	46a0      	mov	r8, r4
 80153a2:	f04f 0900 	mov.w	r9, #0
 80153a6:	e002      	b.n	80153ae <uxr_serialize_CLIENT_Representation+0x8a>
 80153a8:	f108 0808 	add.w	r8, r8, #8
 80153ac:	b198      	cbz	r0, 80153d6 <uxr_serialize_CLIENT_Representation+0xb2>
 80153ae:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80153b2:	4628      	mov	r0, r5
 80153b4:	f003 febc 	bl	8019130 <ucdr_serialize_string>
 80153b8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80153bc:	4607      	mov	r7, r0
 80153be:	4628      	mov	r0, r5
 80153c0:	f003 feb6 	bl	8019130 <ucdr_serialize_string>
 80153c4:	6923      	ldr	r3, [r4, #16]
 80153c6:	f109 0901 	add.w	r9, r9, #1
 80153ca:	4038      	ands	r0, r7
 80153cc:	4599      	cmp	r9, r3
 80153ce:	b2c0      	uxtb	r0, r0
 80153d0:	d3ea      	bcc.n	80153a8 <uxr_serialize_CLIENT_Representation+0x84>
 80153d2:	4006      	ands	r6, r0
 80153d4:	e7d6      	b.n	8015384 <uxr_serialize_CLIENT_Representation+0x60>
 80153d6:	2600      	movs	r6, #0
 80153d8:	e7d4      	b.n	8015384 <uxr_serialize_CLIENT_Representation+0x60>
 80153da:	bf00      	nop

080153dc <uxr_serialize_AGENT_Representation>:
 80153dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80153e0:	2204      	movs	r2, #4
 80153e2:	460c      	mov	r4, r1
 80153e4:	4605      	mov	r5, r0
 80153e6:	f7fc fd73 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 80153ea:	1d21      	adds	r1, r4, #4
 80153ec:	4606      	mov	r6, r0
 80153ee:	2202      	movs	r2, #2
 80153f0:	4628      	mov	r0, r5
 80153f2:	f7fc fd6d 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 80153f6:	1da1      	adds	r1, r4, #6
 80153f8:	4006      	ands	r6, r0
 80153fa:	2202      	movs	r2, #2
 80153fc:	4628      	mov	r0, r5
 80153fe:	f7fc fd67 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 8015402:	b2f6      	uxtb	r6, r6
 8015404:	4603      	mov	r3, r0
 8015406:	7a21      	ldrb	r1, [r4, #8]
 8015408:	4628      	mov	r0, r5
 801540a:	401e      	ands	r6, r3
 801540c:	f7fc ff46 	bl	801229c <ucdr_serialize_bool>
 8015410:	7a23      	ldrb	r3, [r4, #8]
 8015412:	ea00 0706 	and.w	r7, r0, r6
 8015416:	b913      	cbnz	r3, 801541e <uxr_serialize_AGENT_Representation+0x42>
 8015418:	4638      	mov	r0, r7
 801541a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801541e:	68e1      	ldr	r1, [r4, #12]
 8015420:	4628      	mov	r0, r5
 8015422:	f7fd f83b 	bl	801249c <ucdr_serialize_uint32_t>
 8015426:	68e3      	ldr	r3, [r4, #12]
 8015428:	b313      	cbz	r3, 8015470 <uxr_serialize_AGENT_Representation+0x94>
 801542a:	b1e8      	cbz	r0, 8015468 <uxr_serialize_AGENT_Representation+0x8c>
 801542c:	46a0      	mov	r8, r4
 801542e:	f04f 0900 	mov.w	r9, #0
 8015432:	e002      	b.n	801543a <uxr_serialize_AGENT_Representation+0x5e>
 8015434:	f108 0808 	add.w	r8, r8, #8
 8015438:	b1b3      	cbz	r3, 8015468 <uxr_serialize_AGENT_Representation+0x8c>
 801543a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801543e:	4628      	mov	r0, r5
 8015440:	f003 fe76 	bl	8019130 <ucdr_serialize_string>
 8015444:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015448:	4606      	mov	r6, r0
 801544a:	4628      	mov	r0, r5
 801544c:	f003 fe70 	bl	8019130 <ucdr_serialize_string>
 8015450:	68e2      	ldr	r2, [r4, #12]
 8015452:	f109 0901 	add.w	r9, r9, #1
 8015456:	ea06 0300 	and.w	r3, r6, r0
 801545a:	4591      	cmp	r9, r2
 801545c:	b2db      	uxtb	r3, r3
 801545e:	d3e9      	bcc.n	8015434 <uxr_serialize_AGENT_Representation+0x58>
 8015460:	401f      	ands	r7, r3
 8015462:	4638      	mov	r0, r7
 8015464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015468:	2700      	movs	r7, #0
 801546a:	4638      	mov	r0, r7
 801546c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015470:	4007      	ands	r7, r0
 8015472:	e7d1      	b.n	8015418 <uxr_serialize_AGENT_Representation+0x3c>

08015474 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8015474:	b570      	push	{r4, r5, r6, lr}
 8015476:	460d      	mov	r5, r1
 8015478:	7809      	ldrb	r1, [r1, #0]
 801547a:	4606      	mov	r6, r0
 801547c:	f7fc ff0e 	bl	801229c <ucdr_serialize_bool>
 8015480:	782b      	ldrb	r3, [r5, #0]
 8015482:	4604      	mov	r4, r0
 8015484:	b94b      	cbnz	r3, 801549a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8015486:	7a29      	ldrb	r1, [r5, #8]
 8015488:	4630      	mov	r0, r6
 801548a:	f7fc ff07 	bl	801229c <ucdr_serialize_bool>
 801548e:	7a2b      	ldrb	r3, [r5, #8]
 8015490:	4004      	ands	r4, r0
 8015492:	b2e4      	uxtb	r4, r4
 8015494:	b943      	cbnz	r3, 80154a8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8015496:	4620      	mov	r0, r4
 8015498:	bd70      	pop	{r4, r5, r6, pc}
 801549a:	6869      	ldr	r1, [r5, #4]
 801549c:	4630      	mov	r0, r6
 801549e:	f003 fe47 	bl	8019130 <ucdr_serialize_string>
 80154a2:	4004      	ands	r4, r0
 80154a4:	b2e4      	uxtb	r4, r4
 80154a6:	e7ee      	b.n	8015486 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80154a8:	68e9      	ldr	r1, [r5, #12]
 80154aa:	4630      	mov	r0, r6
 80154ac:	f003 fe40 	bl	8019130 <ucdr_serialize_string>
 80154b0:	4004      	ands	r4, r0
 80154b2:	4620      	mov	r0, r4
 80154b4:	bd70      	pop	{r4, r5, r6, pc}
 80154b6:	bf00      	nop

080154b8 <uxr_serialize_OBJK_Topic_Binary>:
 80154b8:	b570      	push	{r4, r5, r6, lr}
 80154ba:	460d      	mov	r5, r1
 80154bc:	6809      	ldr	r1, [r1, #0]
 80154be:	4606      	mov	r6, r0
 80154c0:	f003 fe36 	bl	8019130 <ucdr_serialize_string>
 80154c4:	7929      	ldrb	r1, [r5, #4]
 80154c6:	4604      	mov	r4, r0
 80154c8:	4630      	mov	r0, r6
 80154ca:	f7fc fee7 	bl	801229c <ucdr_serialize_bool>
 80154ce:	792b      	ldrb	r3, [r5, #4]
 80154d0:	4004      	ands	r4, r0
 80154d2:	b2e4      	uxtb	r4, r4
 80154d4:	b943      	cbnz	r3, 80154e8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80154d6:	7b29      	ldrb	r1, [r5, #12]
 80154d8:	4630      	mov	r0, r6
 80154da:	f7fc fedf 	bl	801229c <ucdr_serialize_bool>
 80154de:	7b2b      	ldrb	r3, [r5, #12]
 80154e0:	4004      	ands	r4, r0
 80154e2:	b93b      	cbnz	r3, 80154f4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80154e4:	4620      	mov	r0, r4
 80154e6:	bd70      	pop	{r4, r5, r6, pc}
 80154e8:	68a9      	ldr	r1, [r5, #8]
 80154ea:	4630      	mov	r0, r6
 80154ec:	f003 fe20 	bl	8019130 <ucdr_serialize_string>
 80154f0:	4004      	ands	r4, r0
 80154f2:	e7f0      	b.n	80154d6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80154f4:	6929      	ldr	r1, [r5, #16]
 80154f6:	4630      	mov	r0, r6
 80154f8:	f003 fe1a 	bl	8019130 <ucdr_serialize_string>
 80154fc:	4004      	ands	r4, r0
 80154fe:	b2e4      	uxtb	r4, r4
 8015500:	4620      	mov	r0, r4
 8015502:	bd70      	pop	{r4, r5, r6, pc}

08015504 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8015504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015508:	460c      	mov	r4, r1
 801550a:	7809      	ldrb	r1, [r1, #0]
 801550c:	4606      	mov	r6, r0
 801550e:	f7fc fec5 	bl	801229c <ucdr_serialize_bool>
 8015512:	7823      	ldrb	r3, [r4, #0]
 8015514:	4605      	mov	r5, r0
 8015516:	b96b      	cbnz	r3, 8015534 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8015518:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801551c:	4630      	mov	r0, r6
 801551e:	f7fc febd 	bl	801229c <ucdr_serialize_bool>
 8015522:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8015526:	4005      	ands	r5, r0
 8015528:	b2ed      	uxtb	r5, r5
 801552a:	2b00      	cmp	r3, #0
 801552c:	d169      	bne.n	8015602 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801552e:	4628      	mov	r0, r5
 8015530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015534:	6861      	ldr	r1, [r4, #4]
 8015536:	4630      	mov	r0, r6
 8015538:	f7fc ffb0 	bl	801249c <ucdr_serialize_uint32_t>
 801553c:	6863      	ldr	r3, [r4, #4]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d06b      	beq.n	801561a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8015542:	2800      	cmp	r0, #0
 8015544:	d067      	beq.n	8015616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015546:	68a1      	ldr	r1, [r4, #8]
 8015548:	4630      	mov	r0, r6
 801554a:	f003 fdf1 	bl	8019130 <ucdr_serialize_string>
 801554e:	6863      	ldr	r3, [r4, #4]
 8015550:	2b01      	cmp	r3, #1
 8015552:	d953      	bls.n	80155fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015554:	2800      	cmp	r0, #0
 8015556:	d05e      	beq.n	8015616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015558:	68e1      	ldr	r1, [r4, #12]
 801555a:	4630      	mov	r0, r6
 801555c:	f003 fde8 	bl	8019130 <ucdr_serialize_string>
 8015560:	6863      	ldr	r3, [r4, #4]
 8015562:	2b02      	cmp	r3, #2
 8015564:	d94a      	bls.n	80155fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015566:	2800      	cmp	r0, #0
 8015568:	d055      	beq.n	8015616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801556a:	6921      	ldr	r1, [r4, #16]
 801556c:	4630      	mov	r0, r6
 801556e:	f003 fddf 	bl	8019130 <ucdr_serialize_string>
 8015572:	6863      	ldr	r3, [r4, #4]
 8015574:	2b03      	cmp	r3, #3
 8015576:	d941      	bls.n	80155fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015578:	2800      	cmp	r0, #0
 801557a:	d04c      	beq.n	8015616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801557c:	6961      	ldr	r1, [r4, #20]
 801557e:	4630      	mov	r0, r6
 8015580:	f003 fdd6 	bl	8019130 <ucdr_serialize_string>
 8015584:	6863      	ldr	r3, [r4, #4]
 8015586:	2b04      	cmp	r3, #4
 8015588:	d938      	bls.n	80155fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801558a:	2800      	cmp	r0, #0
 801558c:	d043      	beq.n	8015616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801558e:	69a1      	ldr	r1, [r4, #24]
 8015590:	4630      	mov	r0, r6
 8015592:	f003 fdcd 	bl	8019130 <ucdr_serialize_string>
 8015596:	6863      	ldr	r3, [r4, #4]
 8015598:	2b05      	cmp	r3, #5
 801559a:	d92f      	bls.n	80155fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801559c:	2800      	cmp	r0, #0
 801559e:	d03a      	beq.n	8015616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80155a0:	69e1      	ldr	r1, [r4, #28]
 80155a2:	4630      	mov	r0, r6
 80155a4:	f003 fdc4 	bl	8019130 <ucdr_serialize_string>
 80155a8:	6863      	ldr	r3, [r4, #4]
 80155aa:	2b06      	cmp	r3, #6
 80155ac:	d926      	bls.n	80155fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80155ae:	b390      	cbz	r0, 8015616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80155b0:	6a21      	ldr	r1, [r4, #32]
 80155b2:	4630      	mov	r0, r6
 80155b4:	f003 fdbc 	bl	8019130 <ucdr_serialize_string>
 80155b8:	6863      	ldr	r3, [r4, #4]
 80155ba:	2b07      	cmp	r3, #7
 80155bc:	d91e      	bls.n	80155fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80155be:	b350      	cbz	r0, 8015616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80155c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80155c2:	4630      	mov	r0, r6
 80155c4:	f003 fdb4 	bl	8019130 <ucdr_serialize_string>
 80155c8:	6863      	ldr	r3, [r4, #4]
 80155ca:	2b08      	cmp	r3, #8
 80155cc:	d916      	bls.n	80155fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80155ce:	b310      	cbz	r0, 8015616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80155d0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80155d2:	4630      	mov	r0, r6
 80155d4:	f003 fdac 	bl	8019130 <ucdr_serialize_string>
 80155d8:	6863      	ldr	r3, [r4, #4]
 80155da:	2b09      	cmp	r3, #9
 80155dc:	d90e      	bls.n	80155fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80155de:	b1d0      	cbz	r0, 8015616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80155e0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 80155e4:	2709      	movs	r7, #9
 80155e6:	e000      	b.n	80155ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80155e8:	b1a8      	cbz	r0, 8015616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80155ea:	f858 1b04 	ldr.w	r1, [r8], #4
 80155ee:	4630      	mov	r0, r6
 80155f0:	f003 fd9e 	bl	8019130 <ucdr_serialize_string>
 80155f4:	6862      	ldr	r2, [r4, #4]
 80155f6:	3701      	adds	r7, #1
 80155f8:	4297      	cmp	r7, r2
 80155fa:	d3f5      	bcc.n	80155e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80155fc:	4005      	ands	r5, r0
 80155fe:	b2ed      	uxtb	r5, r5
 8015600:	e78a      	b.n	8015518 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015602:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015604:	4630      	mov	r0, r6
 8015606:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801560a:	f7fd fb69 	bl	8012ce0 <ucdr_serialize_sequence_uint8_t>
 801560e:	4005      	ands	r5, r0
 8015610:	4628      	mov	r0, r5
 8015612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015616:	2500      	movs	r5, #0
 8015618:	e77e      	b.n	8015518 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801561a:	4028      	ands	r0, r5
 801561c:	b2c5      	uxtb	r5, r0
 801561e:	e77b      	b.n	8015518 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08015620 <uxr_serialize_OBJK_Publisher_Binary>:
 8015620:	b570      	push	{r4, r5, r6, lr}
 8015622:	460d      	mov	r5, r1
 8015624:	7809      	ldrb	r1, [r1, #0]
 8015626:	4606      	mov	r6, r0
 8015628:	f7fc fe38 	bl	801229c <ucdr_serialize_bool>
 801562c:	782b      	ldrb	r3, [r5, #0]
 801562e:	4604      	mov	r4, r0
 8015630:	b94b      	cbnz	r3, 8015646 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8015632:	7a29      	ldrb	r1, [r5, #8]
 8015634:	4630      	mov	r0, r6
 8015636:	f7fc fe31 	bl	801229c <ucdr_serialize_bool>
 801563a:	7a2b      	ldrb	r3, [r5, #8]
 801563c:	4004      	ands	r4, r0
 801563e:	b2e4      	uxtb	r4, r4
 8015640:	b943      	cbnz	r3, 8015654 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8015642:	4620      	mov	r0, r4
 8015644:	bd70      	pop	{r4, r5, r6, pc}
 8015646:	6869      	ldr	r1, [r5, #4]
 8015648:	4630      	mov	r0, r6
 801564a:	f003 fd71 	bl	8019130 <ucdr_serialize_string>
 801564e:	4004      	ands	r4, r0
 8015650:	b2e4      	uxtb	r4, r4
 8015652:	e7ee      	b.n	8015632 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8015654:	f105 010c 	add.w	r1, r5, #12
 8015658:	4630      	mov	r0, r6
 801565a:	f7ff ff53 	bl	8015504 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801565e:	4004      	ands	r4, r0
 8015660:	4620      	mov	r0, r4
 8015662:	bd70      	pop	{r4, r5, r6, pc}

08015664 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8015664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015668:	460c      	mov	r4, r1
 801566a:	7809      	ldrb	r1, [r1, #0]
 801566c:	4606      	mov	r6, r0
 801566e:	f7fc fe15 	bl	801229c <ucdr_serialize_bool>
 8015672:	7823      	ldrb	r3, [r4, #0]
 8015674:	4605      	mov	r5, r0
 8015676:	b96b      	cbnz	r3, 8015694 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8015678:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801567c:	4630      	mov	r0, r6
 801567e:	f7fc fe0d 	bl	801229c <ucdr_serialize_bool>
 8015682:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8015686:	4005      	ands	r5, r0
 8015688:	b2ed      	uxtb	r5, r5
 801568a:	2b00      	cmp	r3, #0
 801568c:	d169      	bne.n	8015762 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801568e:	4628      	mov	r0, r5
 8015690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015694:	6861      	ldr	r1, [r4, #4]
 8015696:	4630      	mov	r0, r6
 8015698:	f7fc ff00 	bl	801249c <ucdr_serialize_uint32_t>
 801569c:	6863      	ldr	r3, [r4, #4]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d06b      	beq.n	801577a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 80156a2:	2800      	cmp	r0, #0
 80156a4:	d067      	beq.n	8015776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80156a6:	68a1      	ldr	r1, [r4, #8]
 80156a8:	4630      	mov	r0, r6
 80156aa:	f003 fd41 	bl	8019130 <ucdr_serialize_string>
 80156ae:	6863      	ldr	r3, [r4, #4]
 80156b0:	2b01      	cmp	r3, #1
 80156b2:	d953      	bls.n	801575c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80156b4:	2800      	cmp	r0, #0
 80156b6:	d05e      	beq.n	8015776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80156b8:	68e1      	ldr	r1, [r4, #12]
 80156ba:	4630      	mov	r0, r6
 80156bc:	f003 fd38 	bl	8019130 <ucdr_serialize_string>
 80156c0:	6863      	ldr	r3, [r4, #4]
 80156c2:	2b02      	cmp	r3, #2
 80156c4:	d94a      	bls.n	801575c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80156c6:	2800      	cmp	r0, #0
 80156c8:	d055      	beq.n	8015776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80156ca:	6921      	ldr	r1, [r4, #16]
 80156cc:	4630      	mov	r0, r6
 80156ce:	f003 fd2f 	bl	8019130 <ucdr_serialize_string>
 80156d2:	6863      	ldr	r3, [r4, #4]
 80156d4:	2b03      	cmp	r3, #3
 80156d6:	d941      	bls.n	801575c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80156d8:	2800      	cmp	r0, #0
 80156da:	d04c      	beq.n	8015776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80156dc:	6961      	ldr	r1, [r4, #20]
 80156de:	4630      	mov	r0, r6
 80156e0:	f003 fd26 	bl	8019130 <ucdr_serialize_string>
 80156e4:	6863      	ldr	r3, [r4, #4]
 80156e6:	2b04      	cmp	r3, #4
 80156e8:	d938      	bls.n	801575c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80156ea:	2800      	cmp	r0, #0
 80156ec:	d043      	beq.n	8015776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80156ee:	69a1      	ldr	r1, [r4, #24]
 80156f0:	4630      	mov	r0, r6
 80156f2:	f003 fd1d 	bl	8019130 <ucdr_serialize_string>
 80156f6:	6863      	ldr	r3, [r4, #4]
 80156f8:	2b05      	cmp	r3, #5
 80156fa:	d92f      	bls.n	801575c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80156fc:	2800      	cmp	r0, #0
 80156fe:	d03a      	beq.n	8015776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015700:	69e1      	ldr	r1, [r4, #28]
 8015702:	4630      	mov	r0, r6
 8015704:	f003 fd14 	bl	8019130 <ucdr_serialize_string>
 8015708:	6863      	ldr	r3, [r4, #4]
 801570a:	2b06      	cmp	r3, #6
 801570c:	d926      	bls.n	801575c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801570e:	b390      	cbz	r0, 8015776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015710:	6a21      	ldr	r1, [r4, #32]
 8015712:	4630      	mov	r0, r6
 8015714:	f003 fd0c 	bl	8019130 <ucdr_serialize_string>
 8015718:	6863      	ldr	r3, [r4, #4]
 801571a:	2b07      	cmp	r3, #7
 801571c:	d91e      	bls.n	801575c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801571e:	b350      	cbz	r0, 8015776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015720:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015722:	4630      	mov	r0, r6
 8015724:	f003 fd04 	bl	8019130 <ucdr_serialize_string>
 8015728:	6863      	ldr	r3, [r4, #4]
 801572a:	2b08      	cmp	r3, #8
 801572c:	d916      	bls.n	801575c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801572e:	b310      	cbz	r0, 8015776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015730:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015732:	4630      	mov	r0, r6
 8015734:	f003 fcfc 	bl	8019130 <ucdr_serialize_string>
 8015738:	6863      	ldr	r3, [r4, #4]
 801573a:	2b09      	cmp	r3, #9
 801573c:	d90e      	bls.n	801575c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801573e:	b1d0      	cbz	r0, 8015776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015740:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8015744:	2709      	movs	r7, #9
 8015746:	e000      	b.n	801574a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8015748:	b1a8      	cbz	r0, 8015776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801574a:	f858 1b04 	ldr.w	r1, [r8], #4
 801574e:	4630      	mov	r0, r6
 8015750:	f003 fcee 	bl	8019130 <ucdr_serialize_string>
 8015754:	6862      	ldr	r2, [r4, #4]
 8015756:	3701      	adds	r7, #1
 8015758:	4297      	cmp	r7, r2
 801575a:	d3f5      	bcc.n	8015748 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801575c:	4005      	ands	r5, r0
 801575e:	b2ed      	uxtb	r5, r5
 8015760:	e78a      	b.n	8015678 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8015762:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015764:	4630      	mov	r0, r6
 8015766:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801576a:	f7fd fab9 	bl	8012ce0 <ucdr_serialize_sequence_uint8_t>
 801576e:	4005      	ands	r5, r0
 8015770:	4628      	mov	r0, r5
 8015772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015776:	2500      	movs	r5, #0
 8015778:	e77e      	b.n	8015678 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801577a:	4028      	ands	r0, r5
 801577c:	b2c5      	uxtb	r5, r0
 801577e:	e77b      	b.n	8015678 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08015780 <uxr_serialize_OBJK_Subscriber_Binary>:
 8015780:	b570      	push	{r4, r5, r6, lr}
 8015782:	460d      	mov	r5, r1
 8015784:	7809      	ldrb	r1, [r1, #0]
 8015786:	4606      	mov	r6, r0
 8015788:	f7fc fd88 	bl	801229c <ucdr_serialize_bool>
 801578c:	782b      	ldrb	r3, [r5, #0]
 801578e:	4604      	mov	r4, r0
 8015790:	b94b      	cbnz	r3, 80157a6 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8015792:	7a29      	ldrb	r1, [r5, #8]
 8015794:	4630      	mov	r0, r6
 8015796:	f7fc fd81 	bl	801229c <ucdr_serialize_bool>
 801579a:	7a2b      	ldrb	r3, [r5, #8]
 801579c:	4004      	ands	r4, r0
 801579e:	b2e4      	uxtb	r4, r4
 80157a0:	b943      	cbnz	r3, 80157b4 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80157a2:	4620      	mov	r0, r4
 80157a4:	bd70      	pop	{r4, r5, r6, pc}
 80157a6:	6869      	ldr	r1, [r5, #4]
 80157a8:	4630      	mov	r0, r6
 80157aa:	f003 fcc1 	bl	8019130 <ucdr_serialize_string>
 80157ae:	4004      	ands	r4, r0
 80157b0:	b2e4      	uxtb	r4, r4
 80157b2:	e7ee      	b.n	8015792 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80157b4:	f105 010c 	add.w	r1, r5, #12
 80157b8:	4630      	mov	r0, r6
 80157ba:	f7ff ff53 	bl	8015664 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80157be:	4004      	ands	r4, r0
 80157c0:	4620      	mov	r0, r4
 80157c2:	bd70      	pop	{r4, r5, r6, pc}

080157c4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80157c4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80157c8:	4688      	mov	r8, r1
 80157ca:	8809      	ldrh	r1, [r1, #0]
 80157cc:	4681      	mov	r9, r0
 80157ce:	f7fc fdc1 	bl	8012354 <ucdr_serialize_uint16_t>
 80157d2:	f898 1002 	ldrb.w	r1, [r8, #2]
 80157d6:	4606      	mov	r6, r0
 80157d8:	4648      	mov	r0, r9
 80157da:	f7fc fd5f 	bl	801229c <ucdr_serialize_bool>
 80157de:	f898 3002 	ldrb.w	r3, [r8, #2]
 80157e2:	4030      	ands	r0, r6
 80157e4:	b2c5      	uxtb	r5, r0
 80157e6:	b9eb      	cbnz	r3, 8015824 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80157e8:	f898 1006 	ldrb.w	r1, [r8, #6]
 80157ec:	4648      	mov	r0, r9
 80157ee:	f7fc fd55 	bl	801229c <ucdr_serialize_bool>
 80157f2:	f898 3006 	ldrb.w	r3, [r8, #6]
 80157f6:	4005      	ands	r5, r0
 80157f8:	bb7b      	cbnz	r3, 801585a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80157fa:	f898 100c 	ldrb.w	r1, [r8, #12]
 80157fe:	4648      	mov	r0, r9
 8015800:	f7fc fd4c 	bl	801229c <ucdr_serialize_bool>
 8015804:	f898 300c 	ldrb.w	r3, [r8, #12]
 8015808:	4005      	ands	r5, r0
 801580a:	b9f3      	cbnz	r3, 801584a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801580c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8015810:	4648      	mov	r0, r9
 8015812:	f7fc fd43 	bl	801229c <ucdr_serialize_bool>
 8015816:	f898 3014 	ldrb.w	r3, [r8, #20]
 801581a:	4005      	ands	r5, r0
 801581c:	b94b      	cbnz	r3, 8015832 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801581e:	4628      	mov	r0, r5
 8015820:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8015824:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8015828:	4648      	mov	r0, r9
 801582a:	f7fc fd93 	bl	8012354 <ucdr_serialize_uint16_t>
 801582e:	4005      	ands	r5, r0
 8015830:	e7da      	b.n	80157e8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8015832:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8015836:	4648      	mov	r0, r9
 8015838:	f108 011c 	add.w	r1, r8, #28
 801583c:	f7fd fa50 	bl	8012ce0 <ucdr_serialize_sequence_uint8_t>
 8015840:	4028      	ands	r0, r5
 8015842:	b2c5      	uxtb	r5, r0
 8015844:	4628      	mov	r0, r5
 8015846:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801584a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801584e:	4648      	mov	r0, r9
 8015850:	f7fc fe24 	bl	801249c <ucdr_serialize_uint32_t>
 8015854:	4028      	ands	r0, r5
 8015856:	b2c5      	uxtb	r5, r0
 8015858:	e7d8      	b.n	801580c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801585a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801585e:	4648      	mov	r0, r9
 8015860:	f7fc fe1c 	bl	801249c <ucdr_serialize_uint32_t>
 8015864:	4028      	ands	r0, r5
 8015866:	b2c5      	uxtb	r5, r0
 8015868:	e7c7      	b.n	80157fa <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801586a:	bf00      	nop

0801586c <uxr_serialize_OBJK_DataReader_Binary>:
 801586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801586e:	2202      	movs	r2, #2
 8015870:	460c      	mov	r4, r1
 8015872:	4606      	mov	r6, r0
 8015874:	f7fc fb2c 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 8015878:	78a1      	ldrb	r1, [r4, #2]
 801587a:	4605      	mov	r5, r0
 801587c:	4630      	mov	r0, r6
 801587e:	f7fc fd0d 	bl	801229c <ucdr_serialize_bool>
 8015882:	78a3      	ldrb	r3, [r4, #2]
 8015884:	4005      	ands	r5, r0
 8015886:	b2ed      	uxtb	r5, r5
 8015888:	b90b      	cbnz	r3, 801588e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801588a:	4628      	mov	r0, r5
 801588c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801588e:	f104 0108 	add.w	r1, r4, #8
 8015892:	4630      	mov	r0, r6
 8015894:	f7ff ff96 	bl	80157c4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8015898:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801589c:	4607      	mov	r7, r0
 801589e:	4630      	mov	r0, r6
 80158a0:	f7fc fcfc 	bl	801229c <ucdr_serialize_bool>
 80158a4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80158a8:	4038      	ands	r0, r7
 80158aa:	b2c7      	uxtb	r7, r0
 80158ac:	b95b      	cbnz	r3, 80158c6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80158ae:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 80158b2:	4630      	mov	r0, r6
 80158b4:	f7fc fcf2 	bl	801229c <ucdr_serialize_bool>
 80158b8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80158bc:	4007      	ands	r7, r0
 80158be:	b94b      	cbnz	r3, 80158d4 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80158c0:	403d      	ands	r5, r7
 80158c2:	4628      	mov	r0, r5
 80158c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158c6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 80158ca:	4630      	mov	r0, r6
 80158cc:	f7fc fea6 	bl	801261c <ucdr_serialize_uint64_t>
 80158d0:	4007      	ands	r7, r0
 80158d2:	e7ec      	b.n	80158ae <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80158d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80158d6:	4630      	mov	r0, r6
 80158d8:	f003 fc2a 	bl	8019130 <ucdr_serialize_string>
 80158dc:	4007      	ands	r7, r0
 80158de:	b2ff      	uxtb	r7, r7
 80158e0:	e7ee      	b.n	80158c0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80158e2:	bf00      	nop

080158e4 <uxr_serialize_OBJK_DataWriter_Binary>:
 80158e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158e6:	2202      	movs	r2, #2
 80158e8:	460d      	mov	r5, r1
 80158ea:	4606      	mov	r6, r0
 80158ec:	f7fc faf0 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 80158f0:	78a9      	ldrb	r1, [r5, #2]
 80158f2:	4604      	mov	r4, r0
 80158f4:	4630      	mov	r0, r6
 80158f6:	f7fc fcd1 	bl	801229c <ucdr_serialize_bool>
 80158fa:	78ab      	ldrb	r3, [r5, #2]
 80158fc:	4004      	ands	r4, r0
 80158fe:	b2e4      	uxtb	r4, r4
 8015900:	b90b      	cbnz	r3, 8015906 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8015902:	4620      	mov	r0, r4
 8015904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015906:	f105 0108 	add.w	r1, r5, #8
 801590a:	4630      	mov	r0, r6
 801590c:	f7ff ff5a 	bl	80157c4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8015910:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8015914:	4607      	mov	r7, r0
 8015916:	4630      	mov	r0, r6
 8015918:	f7fc fcc0 	bl	801229c <ucdr_serialize_bool>
 801591c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8015920:	4007      	ands	r7, r0
 8015922:	b2ff      	uxtb	r7, r7
 8015924:	b913      	cbnz	r3, 801592c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8015926:	403c      	ands	r4, r7
 8015928:	4620      	mov	r0, r4
 801592a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801592c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8015930:	4630      	mov	r0, r6
 8015932:	f7fc fe73 	bl	801261c <ucdr_serialize_uint64_t>
 8015936:	4007      	ands	r7, r0
 8015938:	e7f5      	b.n	8015926 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801593a:	bf00      	nop

0801593c <uxr_deserialize_BaseObjectRequest>:
 801593c:	b570      	push	{r4, r5, r6, lr}
 801593e:	2202      	movs	r2, #2
 8015940:	4605      	mov	r5, r0
 8015942:	460e      	mov	r6, r1
 8015944:	f7fc fb28 	bl	8011f98 <ucdr_deserialize_array_uint8_t>
 8015948:	1cb1      	adds	r1, r6, #2
 801594a:	4604      	mov	r4, r0
 801594c:	2202      	movs	r2, #2
 801594e:	4628      	mov	r0, r5
 8015950:	f7fc fb22 	bl	8011f98 <ucdr_deserialize_array_uint8_t>
 8015954:	4020      	ands	r0, r4
 8015956:	b2c0      	uxtb	r0, r0
 8015958:	bd70      	pop	{r4, r5, r6, pc}
 801595a:	bf00      	nop

0801595c <uxr_serialize_ReadSpecification>:
 801595c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015960:	460e      	mov	r6, r1
 8015962:	7809      	ldrb	r1, [r1, #0]
 8015964:	4607      	mov	r7, r0
 8015966:	f7fc fcc9 	bl	80122fc <ucdr_serialize_uint8_t>
 801596a:	7871      	ldrb	r1, [r6, #1]
 801596c:	4604      	mov	r4, r0
 801596e:	4638      	mov	r0, r7
 8015970:	f7fc fcc4 	bl	80122fc <ucdr_serialize_uint8_t>
 8015974:	78b1      	ldrb	r1, [r6, #2]
 8015976:	4004      	ands	r4, r0
 8015978:	4638      	mov	r0, r7
 801597a:	f7fc fc8f 	bl	801229c <ucdr_serialize_bool>
 801597e:	78b3      	ldrb	r3, [r6, #2]
 8015980:	b2e4      	uxtb	r4, r4
 8015982:	4004      	ands	r4, r0
 8015984:	b94b      	cbnz	r3, 801599a <uxr_serialize_ReadSpecification+0x3e>
 8015986:	7a31      	ldrb	r1, [r6, #8]
 8015988:	4638      	mov	r0, r7
 801598a:	f7fc fc87 	bl	801229c <ucdr_serialize_bool>
 801598e:	7a33      	ldrb	r3, [r6, #8]
 8015990:	4004      	ands	r4, r0
 8015992:	b943      	cbnz	r3, 80159a6 <uxr_serialize_ReadSpecification+0x4a>
 8015994:	4620      	mov	r0, r4
 8015996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801599a:	6871      	ldr	r1, [r6, #4]
 801599c:	4638      	mov	r0, r7
 801599e:	f003 fbc7 	bl	8019130 <ucdr_serialize_string>
 80159a2:	4004      	ands	r4, r0
 80159a4:	e7ef      	b.n	8015986 <uxr_serialize_ReadSpecification+0x2a>
 80159a6:	8971      	ldrh	r1, [r6, #10]
 80159a8:	4638      	mov	r0, r7
 80159aa:	f7fc fcd3 	bl	8012354 <ucdr_serialize_uint16_t>
 80159ae:	89b1      	ldrh	r1, [r6, #12]
 80159b0:	4605      	mov	r5, r0
 80159b2:	4638      	mov	r0, r7
 80159b4:	f7fc fcce 	bl	8012354 <ucdr_serialize_uint16_t>
 80159b8:	89f1      	ldrh	r1, [r6, #14]
 80159ba:	4005      	ands	r5, r0
 80159bc:	4638      	mov	r0, r7
 80159be:	f7fc fcc9 	bl	8012354 <ucdr_serialize_uint16_t>
 80159c2:	8a31      	ldrh	r1, [r6, #16]
 80159c4:	4680      	mov	r8, r0
 80159c6:	4638      	mov	r0, r7
 80159c8:	f7fc fcc4 	bl	8012354 <ucdr_serialize_uint16_t>
 80159cc:	b2ed      	uxtb	r5, r5
 80159ce:	4025      	ands	r5, r4
 80159d0:	ea08 0505 	and.w	r5, r8, r5
 80159d4:	ea00 0405 	and.w	r4, r0, r5
 80159d8:	4620      	mov	r0, r4
 80159da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159de:	bf00      	nop

080159e0 <uxr_serialize_CREATE_CLIENT_Payload>:
 80159e0:	f7ff bca0 	b.w	8015324 <uxr_serialize_CLIENT_Representation>

080159e4 <uxr_serialize_CREATE_Payload>:
 80159e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159e6:	2202      	movs	r2, #2
 80159e8:	4606      	mov	r6, r0
 80159ea:	460d      	mov	r5, r1
 80159ec:	f7fc fa70 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 80159f0:	1ca9      	adds	r1, r5, #2
 80159f2:	4604      	mov	r4, r0
 80159f4:	2202      	movs	r2, #2
 80159f6:	4630      	mov	r0, r6
 80159f8:	f7fc fa6a 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 80159fc:	7929      	ldrb	r1, [r5, #4]
 80159fe:	4607      	mov	r7, r0
 8015a00:	4630      	mov	r0, r6
 8015a02:	f7fc fc7b 	bl	80122fc <ucdr_serialize_uint8_t>
 8015a06:	b328      	cbz	r0, 8015a54 <uxr_serialize_CREATE_Payload+0x70>
 8015a08:	792b      	ldrb	r3, [r5, #4]
 8015a0a:	403c      	ands	r4, r7
 8015a0c:	3b01      	subs	r3, #1
 8015a0e:	b2e4      	uxtb	r4, r4
 8015a10:	2b0d      	cmp	r3, #13
 8015a12:	d81d      	bhi.n	8015a50 <uxr_serialize_CREATE_Payload+0x6c>
 8015a14:	e8df f003 	tbb	[pc, r3]
 8015a18:	32320753 	.word	0x32320753
 8015a1c:	07070707 	.word	0x07070707
 8015a20:	2121211c 	.word	0x2121211c
 8015a24:	684c      	.short	0x684c
 8015a26:	7a29      	ldrb	r1, [r5, #8]
 8015a28:	4630      	mov	r0, r6
 8015a2a:	f7fc fc67 	bl	80122fc <ucdr_serialize_uint8_t>
 8015a2e:	4607      	mov	r7, r0
 8015a30:	b130      	cbz	r0, 8015a40 <uxr_serialize_CREATE_Payload+0x5c>
 8015a32:	7a2b      	ldrb	r3, [r5, #8]
 8015a34:	2b02      	cmp	r3, #2
 8015a36:	d035      	beq.n	8015aa4 <uxr_serialize_CREATE_Payload+0xc0>
 8015a38:	2b03      	cmp	r3, #3
 8015a3a:	d02b      	beq.n	8015a94 <uxr_serialize_CREATE_Payload+0xb0>
 8015a3c:	2b01      	cmp	r3, #1
 8015a3e:	d031      	beq.n	8015aa4 <uxr_serialize_CREATE_Payload+0xc0>
 8015a40:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8015a44:	4630      	mov	r0, r6
 8015a46:	2202      	movs	r2, #2
 8015a48:	f7fc fa42 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 8015a4c:	4038      	ands	r0, r7
 8015a4e:	4004      	ands	r4, r0
 8015a50:	4620      	mov	r0, r4
 8015a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a54:	2400      	movs	r4, #0
 8015a56:	4620      	mov	r0, r4
 8015a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a5a:	7a29      	ldrb	r1, [r5, #8]
 8015a5c:	4630      	mov	r0, r6
 8015a5e:	f7fc fc4d 	bl	80122fc <ucdr_serialize_uint8_t>
 8015a62:	2800      	cmp	r0, #0
 8015a64:	d0f6      	beq.n	8015a54 <uxr_serialize_CREATE_Payload+0x70>
 8015a66:	7a2b      	ldrb	r3, [r5, #8]
 8015a68:	2b01      	cmp	r3, #1
 8015a6a:	d001      	beq.n	8015a70 <uxr_serialize_CREATE_Payload+0x8c>
 8015a6c:	2b02      	cmp	r3, #2
 8015a6e:	d1ef      	bne.n	8015a50 <uxr_serialize_CREATE_Payload+0x6c>
 8015a70:	68e9      	ldr	r1, [r5, #12]
 8015a72:	4630      	mov	r0, r6
 8015a74:	f003 fb5c 	bl	8019130 <ucdr_serialize_string>
 8015a78:	4004      	ands	r4, r0
 8015a7a:	e7e9      	b.n	8015a50 <uxr_serialize_CREATE_Payload+0x6c>
 8015a7c:	7a29      	ldrb	r1, [r5, #8]
 8015a7e:	4630      	mov	r0, r6
 8015a80:	f7fc fc3c 	bl	80122fc <ucdr_serialize_uint8_t>
 8015a84:	4607      	mov	r7, r0
 8015a86:	2800      	cmp	r0, #0
 8015a88:	d0da      	beq.n	8015a40 <uxr_serialize_CREATE_Payload+0x5c>
 8015a8a:	7a2b      	ldrb	r3, [r5, #8]
 8015a8c:	2b02      	cmp	r3, #2
 8015a8e:	d009      	beq.n	8015aa4 <uxr_serialize_CREATE_Payload+0xc0>
 8015a90:	2b03      	cmp	r3, #3
 8015a92:	d1d5      	bne.n	8015a40 <uxr_serialize_CREATE_Payload+0x5c>
 8015a94:	68ea      	ldr	r2, [r5, #12]
 8015a96:	f105 0110 	add.w	r1, r5, #16
 8015a9a:	4630      	mov	r0, r6
 8015a9c:	f7fd f920 	bl	8012ce0 <ucdr_serialize_sequence_uint8_t>
 8015aa0:	4607      	mov	r7, r0
 8015aa2:	e7cd      	b.n	8015a40 <uxr_serialize_CREATE_Payload+0x5c>
 8015aa4:	68e9      	ldr	r1, [r5, #12]
 8015aa6:	4630      	mov	r0, r6
 8015aa8:	f003 fb42 	bl	8019130 <ucdr_serialize_string>
 8015aac:	4607      	mov	r7, r0
 8015aae:	e7c7      	b.n	8015a40 <uxr_serialize_CREATE_Payload+0x5c>
 8015ab0:	f105 0108 	add.w	r1, r5, #8
 8015ab4:	4630      	mov	r0, r6
 8015ab6:	f7ff fc91 	bl	80153dc <uxr_serialize_AGENT_Representation>
 8015aba:	4004      	ands	r4, r0
 8015abc:	e7c8      	b.n	8015a50 <uxr_serialize_CREATE_Payload+0x6c>
 8015abe:	7a29      	ldrb	r1, [r5, #8]
 8015ac0:	4630      	mov	r0, r6
 8015ac2:	f7fc fc1b 	bl	80122fc <ucdr_serialize_uint8_t>
 8015ac6:	4607      	mov	r7, r0
 8015ac8:	b130      	cbz	r0, 8015ad8 <uxr_serialize_CREATE_Payload+0xf4>
 8015aca:	7a2b      	ldrb	r3, [r5, #8]
 8015acc:	2b02      	cmp	r3, #2
 8015ace:	d012      	beq.n	8015af6 <uxr_serialize_CREATE_Payload+0x112>
 8015ad0:	2b03      	cmp	r3, #3
 8015ad2:	d016      	beq.n	8015b02 <uxr_serialize_CREATE_Payload+0x11e>
 8015ad4:	2b01      	cmp	r3, #1
 8015ad6:	d00e      	beq.n	8015af6 <uxr_serialize_CREATE_Payload+0x112>
 8015ad8:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 8015adc:	4630      	mov	r0, r6
 8015ade:	f7fc fe13 	bl	8012708 <ucdr_serialize_int16_t>
 8015ae2:	4038      	ands	r0, r7
 8015ae4:	4004      	ands	r4, r0
 8015ae6:	e7b3      	b.n	8015a50 <uxr_serialize_CREATE_Payload+0x6c>
 8015ae8:	f105 0108 	add.w	r1, r5, #8
 8015aec:	4630      	mov	r0, r6
 8015aee:	f7ff fc19 	bl	8015324 <uxr_serialize_CLIENT_Representation>
 8015af2:	4004      	ands	r4, r0
 8015af4:	e7ac      	b.n	8015a50 <uxr_serialize_CREATE_Payload+0x6c>
 8015af6:	68e9      	ldr	r1, [r5, #12]
 8015af8:	4630      	mov	r0, r6
 8015afa:	f003 fb19 	bl	8019130 <ucdr_serialize_string>
 8015afe:	4607      	mov	r7, r0
 8015b00:	e7ea      	b.n	8015ad8 <uxr_serialize_CREATE_Payload+0xf4>
 8015b02:	68ea      	ldr	r2, [r5, #12]
 8015b04:	f105 0110 	add.w	r1, r5, #16
 8015b08:	4630      	mov	r0, r6
 8015b0a:	f7fd f8e9 	bl	8012ce0 <ucdr_serialize_sequence_uint8_t>
 8015b0e:	4607      	mov	r7, r0
 8015b10:	e7e2      	b.n	8015ad8 <uxr_serialize_CREATE_Payload+0xf4>
 8015b12:	bf00      	nop

08015b14 <uxr_serialize_DELETE_Payload>:
 8015b14:	b570      	push	{r4, r5, r6, lr}
 8015b16:	2202      	movs	r2, #2
 8015b18:	4605      	mov	r5, r0
 8015b1a:	460e      	mov	r6, r1
 8015b1c:	f7fc f9d8 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 8015b20:	1cb1      	adds	r1, r6, #2
 8015b22:	4604      	mov	r4, r0
 8015b24:	2202      	movs	r2, #2
 8015b26:	4628      	mov	r0, r5
 8015b28:	f7fc f9d2 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 8015b2c:	4020      	ands	r0, r4
 8015b2e:	b2c0      	uxtb	r0, r0
 8015b30:	bd70      	pop	{r4, r5, r6, pc}
 8015b32:	bf00      	nop

08015b34 <uxr_deserialize_STATUS_AGENT_Payload>:
 8015b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b38:	4606      	mov	r6, r0
 8015b3a:	460f      	mov	r7, r1
 8015b3c:	f7fc fbf4 	bl	8012328 <ucdr_deserialize_uint8_t>
 8015b40:	1c79      	adds	r1, r7, #1
 8015b42:	4605      	mov	r5, r0
 8015b44:	4630      	mov	r0, r6
 8015b46:	f7fc fbef 	bl	8012328 <ucdr_deserialize_uint8_t>
 8015b4a:	1d39      	adds	r1, r7, #4
 8015b4c:	4681      	mov	r9, r0
 8015b4e:	2204      	movs	r2, #4
 8015b50:	4630      	mov	r0, r6
 8015b52:	f7fc fa21 	bl	8011f98 <ucdr_deserialize_array_uint8_t>
 8015b56:	f107 0108 	add.w	r1, r7, #8
 8015b5a:	4604      	mov	r4, r0
 8015b5c:	2202      	movs	r2, #2
 8015b5e:	4630      	mov	r0, r6
 8015b60:	f7fc fa1a 	bl	8011f98 <ucdr_deserialize_array_uint8_t>
 8015b64:	f107 010a 	add.w	r1, r7, #10
 8015b68:	4680      	mov	r8, r0
 8015b6a:	2202      	movs	r2, #2
 8015b6c:	4630      	mov	r0, r6
 8015b6e:	f7fc fa13 	bl	8011f98 <ucdr_deserialize_array_uint8_t>
 8015b72:	ea05 0509 	and.w	r5, r5, r9
 8015b76:	b2ed      	uxtb	r5, r5
 8015b78:	402c      	ands	r4, r5
 8015b7a:	f107 010c 	add.w	r1, r7, #12
 8015b7e:	4605      	mov	r5, r0
 8015b80:	4630      	mov	r0, r6
 8015b82:	f7fc fba1 	bl	80122c8 <ucdr_deserialize_bool>
 8015b86:	ea08 0404 	and.w	r4, r8, r4
 8015b8a:	4025      	ands	r5, r4
 8015b8c:	4028      	ands	r0, r5
 8015b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b92:	bf00      	nop

08015b94 <uxr_deserialize_STATUS_Payload>:
 8015b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b98:	2202      	movs	r2, #2
 8015b9a:	4606      	mov	r6, r0
 8015b9c:	460f      	mov	r7, r1
 8015b9e:	f7fc f9fb 	bl	8011f98 <ucdr_deserialize_array_uint8_t>
 8015ba2:	2202      	movs	r2, #2
 8015ba4:	1cb9      	adds	r1, r7, #2
 8015ba6:	4605      	mov	r5, r0
 8015ba8:	4630      	mov	r0, r6
 8015baa:	f7fc f9f5 	bl	8011f98 <ucdr_deserialize_array_uint8_t>
 8015bae:	1d39      	adds	r1, r7, #4
 8015bb0:	4680      	mov	r8, r0
 8015bb2:	4630      	mov	r0, r6
 8015bb4:	f7fc fbb8 	bl	8012328 <ucdr_deserialize_uint8_t>
 8015bb8:	1d79      	adds	r1, r7, #5
 8015bba:	4604      	mov	r4, r0
 8015bbc:	4630      	mov	r0, r6
 8015bbe:	f7fc fbb3 	bl	8012328 <ucdr_deserialize_uint8_t>
 8015bc2:	ea05 0508 	and.w	r5, r5, r8
 8015bc6:	402c      	ands	r4, r5
 8015bc8:	4020      	ands	r0, r4
 8015bca:	b2c0      	uxtb	r0, r0
 8015bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015bd0 <uxr_serialize_READ_DATA_Payload>:
 8015bd0:	b570      	push	{r4, r5, r6, lr}
 8015bd2:	2202      	movs	r2, #2
 8015bd4:	4605      	mov	r5, r0
 8015bd6:	460e      	mov	r6, r1
 8015bd8:	f7fc f97a 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 8015bdc:	1cb1      	adds	r1, r6, #2
 8015bde:	2202      	movs	r2, #2
 8015be0:	4604      	mov	r4, r0
 8015be2:	4628      	mov	r0, r5
 8015be4:	f7fc f974 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 8015be8:	1d31      	adds	r1, r6, #4
 8015bea:	4004      	ands	r4, r0
 8015bec:	4628      	mov	r0, r5
 8015bee:	f7ff feb5 	bl	801595c <uxr_serialize_ReadSpecification>
 8015bf2:	b2e4      	uxtb	r4, r4
 8015bf4:	4020      	ands	r0, r4
 8015bf6:	bd70      	pop	{r4, r5, r6, pc}

08015bf8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8015bf8:	b570      	push	{r4, r5, r6, lr}
 8015bfa:	2202      	movs	r2, #2
 8015bfc:	4605      	mov	r5, r0
 8015bfe:	460e      	mov	r6, r1
 8015c00:	f7fc f966 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 8015c04:	1cb1      	adds	r1, r6, #2
 8015c06:	4604      	mov	r4, r0
 8015c08:	2202      	movs	r2, #2
 8015c0a:	4628      	mov	r0, r5
 8015c0c:	f7fc f960 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 8015c10:	4020      	ands	r0, r4
 8015c12:	b2c0      	uxtb	r0, r0
 8015c14:	bd70      	pop	{r4, r5, r6, pc}
 8015c16:	bf00      	nop

08015c18 <uxr_serialize_ACKNACK_Payload>:
 8015c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c1a:	460f      	mov	r7, r1
 8015c1c:	460e      	mov	r6, r1
 8015c1e:	f837 1b02 	ldrh.w	r1, [r7], #2
 8015c22:	4605      	mov	r5, r0
 8015c24:	f7fc fb96 	bl	8012354 <ucdr_serialize_uint16_t>
 8015c28:	4639      	mov	r1, r7
 8015c2a:	2202      	movs	r2, #2
 8015c2c:	4604      	mov	r4, r0
 8015c2e:	4628      	mov	r0, r5
 8015c30:	f7fc f94e 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 8015c34:	7931      	ldrb	r1, [r6, #4]
 8015c36:	4004      	ands	r4, r0
 8015c38:	4628      	mov	r0, r5
 8015c3a:	f7fc fb5f 	bl	80122fc <ucdr_serialize_uint8_t>
 8015c3e:	b2e4      	uxtb	r4, r4
 8015c40:	4020      	ands	r0, r4
 8015c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015c44 <uxr_deserialize_ACKNACK_Payload>:
 8015c44:	b570      	push	{r4, r5, r6, lr}
 8015c46:	4605      	mov	r5, r0
 8015c48:	460e      	mov	r6, r1
 8015c4a:	f7fc fbd3 	bl	80123f4 <ucdr_deserialize_uint16_t>
 8015c4e:	1cb1      	adds	r1, r6, #2
 8015c50:	2202      	movs	r2, #2
 8015c52:	4604      	mov	r4, r0
 8015c54:	4628      	mov	r0, r5
 8015c56:	f7fc f99f 	bl	8011f98 <ucdr_deserialize_array_uint8_t>
 8015c5a:	1d31      	adds	r1, r6, #4
 8015c5c:	4004      	ands	r4, r0
 8015c5e:	4628      	mov	r0, r5
 8015c60:	f7fc fb62 	bl	8012328 <ucdr_deserialize_uint8_t>
 8015c64:	b2e4      	uxtb	r4, r4
 8015c66:	4020      	ands	r0, r4
 8015c68:	bd70      	pop	{r4, r5, r6, pc}
 8015c6a:	bf00      	nop

08015c6c <uxr_serialize_HEARTBEAT_Payload>:
 8015c6c:	b570      	push	{r4, r5, r6, lr}
 8015c6e:	460d      	mov	r5, r1
 8015c70:	8809      	ldrh	r1, [r1, #0]
 8015c72:	4606      	mov	r6, r0
 8015c74:	f7fc fb6e 	bl	8012354 <ucdr_serialize_uint16_t>
 8015c78:	8869      	ldrh	r1, [r5, #2]
 8015c7a:	4604      	mov	r4, r0
 8015c7c:	4630      	mov	r0, r6
 8015c7e:	f7fc fb69 	bl	8012354 <ucdr_serialize_uint16_t>
 8015c82:	7929      	ldrb	r1, [r5, #4]
 8015c84:	4004      	ands	r4, r0
 8015c86:	4630      	mov	r0, r6
 8015c88:	f7fc fb38 	bl	80122fc <ucdr_serialize_uint8_t>
 8015c8c:	b2e4      	uxtb	r4, r4
 8015c8e:	4020      	ands	r0, r4
 8015c90:	bd70      	pop	{r4, r5, r6, pc}
 8015c92:	bf00      	nop

08015c94 <uxr_deserialize_HEARTBEAT_Payload>:
 8015c94:	b570      	push	{r4, r5, r6, lr}
 8015c96:	4605      	mov	r5, r0
 8015c98:	460e      	mov	r6, r1
 8015c9a:	f7fc fbab 	bl	80123f4 <ucdr_deserialize_uint16_t>
 8015c9e:	1cb1      	adds	r1, r6, #2
 8015ca0:	4604      	mov	r4, r0
 8015ca2:	4628      	mov	r0, r5
 8015ca4:	f7fc fba6 	bl	80123f4 <ucdr_deserialize_uint16_t>
 8015ca8:	1d31      	adds	r1, r6, #4
 8015caa:	4004      	ands	r4, r0
 8015cac:	4628      	mov	r0, r5
 8015cae:	f7fc fb3b 	bl	8012328 <ucdr_deserialize_uint8_t>
 8015cb2:	b2e4      	uxtb	r4, r4
 8015cb4:	4020      	ands	r0, r4
 8015cb6:	bd70      	pop	{r4, r5, r6, pc}

08015cb8 <uxr_serialize_TIMESTAMP_Payload>:
 8015cb8:	b570      	push	{r4, r5, r6, lr}
 8015cba:	460d      	mov	r5, r1
 8015cbc:	6809      	ldr	r1, [r1, #0]
 8015cbe:	4606      	mov	r6, r0
 8015cc0:	f7fc fd4a 	bl	8012758 <ucdr_serialize_int32_t>
 8015cc4:	6869      	ldr	r1, [r5, #4]
 8015cc6:	4604      	mov	r4, r0
 8015cc8:	4630      	mov	r0, r6
 8015cca:	f7fc fbe7 	bl	801249c <ucdr_serialize_uint32_t>
 8015cce:	4020      	ands	r0, r4
 8015cd0:	b2c0      	uxtb	r0, r0
 8015cd2:	bd70      	pop	{r4, r5, r6, pc}

08015cd4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8015cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cd8:	4605      	mov	r5, r0
 8015cda:	460e      	mov	r6, r1
 8015cdc:	f7fc fd6c 	bl	80127b8 <ucdr_deserialize_int32_t>
 8015ce0:	1d31      	adds	r1, r6, #4
 8015ce2:	4607      	mov	r7, r0
 8015ce4:	4628      	mov	r0, r5
 8015ce6:	f7fc fc39 	bl	801255c <ucdr_deserialize_uint32_t>
 8015cea:	f106 0108 	add.w	r1, r6, #8
 8015cee:	4680      	mov	r8, r0
 8015cf0:	4628      	mov	r0, r5
 8015cf2:	f7fc fd61 	bl	80127b8 <ucdr_deserialize_int32_t>
 8015cf6:	f106 010c 	add.w	r1, r6, #12
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	4628      	mov	r0, r5
 8015cfe:	f7fc fc2d 	bl	801255c <ucdr_deserialize_uint32_t>
 8015d02:	ea07 0708 	and.w	r7, r7, r8
 8015d06:	403c      	ands	r4, r7
 8015d08:	f106 0110 	add.w	r1, r6, #16
 8015d0c:	4004      	ands	r4, r0
 8015d0e:	4628      	mov	r0, r5
 8015d10:	f7fc fd52 	bl	80127b8 <ucdr_deserialize_int32_t>
 8015d14:	f106 0114 	add.w	r1, r6, #20
 8015d18:	4603      	mov	r3, r0
 8015d1a:	4628      	mov	r0, r5
 8015d1c:	461d      	mov	r5, r3
 8015d1e:	f7fc fc1d 	bl	801255c <ucdr_deserialize_uint32_t>
 8015d22:	b2e4      	uxtb	r4, r4
 8015d24:	402c      	ands	r4, r5
 8015d26:	4020      	ands	r0, r4
 8015d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015d2c <uxr_serialize_SampleIdentity>:
 8015d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d30:	220c      	movs	r2, #12
 8015d32:	4604      	mov	r4, r0
 8015d34:	460d      	mov	r5, r1
 8015d36:	f7fc f8cb 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 8015d3a:	2203      	movs	r2, #3
 8015d3c:	f105 010c 	add.w	r1, r5, #12
 8015d40:	4607      	mov	r7, r0
 8015d42:	4620      	mov	r0, r4
 8015d44:	f7fc f8c4 	bl	8011ed0 <ucdr_serialize_array_uint8_t>
 8015d48:	7be9      	ldrb	r1, [r5, #15]
 8015d4a:	4680      	mov	r8, r0
 8015d4c:	4620      	mov	r0, r4
 8015d4e:	f7fc fad5 	bl	80122fc <ucdr_serialize_uint8_t>
 8015d52:	6929      	ldr	r1, [r5, #16]
 8015d54:	4606      	mov	r6, r0
 8015d56:	4620      	mov	r0, r4
 8015d58:	f7fc fcfe 	bl	8012758 <ucdr_serialize_int32_t>
 8015d5c:	6969      	ldr	r1, [r5, #20]
 8015d5e:	4603      	mov	r3, r0
 8015d60:	4620      	mov	r0, r4
 8015d62:	ea07 0708 	and.w	r7, r7, r8
 8015d66:	461c      	mov	r4, r3
 8015d68:	f7fc fb98 	bl	801249c <ucdr_serialize_uint32_t>
 8015d6c:	403e      	ands	r6, r7
 8015d6e:	4034      	ands	r4, r6
 8015d70:	4020      	ands	r0, r4
 8015d72:	b2c0      	uxtb	r0, r0
 8015d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015d78 <uxr_deserialize_SampleIdentity>:
 8015d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d7c:	220c      	movs	r2, #12
 8015d7e:	4604      	mov	r4, r0
 8015d80:	460d      	mov	r5, r1
 8015d82:	f7fc f909 	bl	8011f98 <ucdr_deserialize_array_uint8_t>
 8015d86:	2203      	movs	r2, #3
 8015d88:	f105 010c 	add.w	r1, r5, #12
 8015d8c:	4607      	mov	r7, r0
 8015d8e:	4620      	mov	r0, r4
 8015d90:	f7fc f902 	bl	8011f98 <ucdr_deserialize_array_uint8_t>
 8015d94:	f105 010f 	add.w	r1, r5, #15
 8015d98:	4680      	mov	r8, r0
 8015d9a:	4620      	mov	r0, r4
 8015d9c:	f7fc fac4 	bl	8012328 <ucdr_deserialize_uint8_t>
 8015da0:	f105 0110 	add.w	r1, r5, #16
 8015da4:	4606      	mov	r6, r0
 8015da6:	4620      	mov	r0, r4
 8015da8:	f7fc fd06 	bl	80127b8 <ucdr_deserialize_int32_t>
 8015dac:	f105 0114 	add.w	r1, r5, #20
 8015db0:	4603      	mov	r3, r0
 8015db2:	4620      	mov	r0, r4
 8015db4:	ea07 0708 	and.w	r7, r7, r8
 8015db8:	461c      	mov	r4, r3
 8015dba:	f7fc fbcf 	bl	801255c <ucdr_deserialize_uint32_t>
 8015dbe:	403e      	ands	r6, r7
 8015dc0:	4034      	ands	r4, r6
 8015dc2:	4020      	ands	r0, r4
 8015dc4:	b2c0      	uxtb	r0, r0
 8015dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dca:	bf00      	nop

08015dcc <rcl_client_get_rmw_handle>:
 8015dcc:	b110      	cbz	r0, 8015dd4 <rcl_client_get_rmw_handle+0x8>
 8015dce:	6800      	ldr	r0, [r0, #0]
 8015dd0:	b100      	cbz	r0, 8015dd4 <rcl_client_get_rmw_handle+0x8>
 8015dd2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8015dd4:	4770      	bx	lr
 8015dd6:	bf00      	nop

08015dd8 <rcl_take_response>:
 8015dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015dda:	460e      	mov	r6, r1
 8015ddc:	460c      	mov	r4, r1
 8015dde:	4607      	mov	r7, r0
 8015de0:	4694      	mov	ip, r2
 8015de2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015de4:	b08d      	sub	sp, #52	; 0x34
 8015de6:	ad06      	add	r5, sp, #24
 8015de8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015dea:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015dee:	e885 0003 	stmia.w	r5, {r0, r1}
 8015df2:	b337      	cbz	r7, 8015e42 <rcl_take_response+0x6a>
 8015df4:	683b      	ldr	r3, [r7, #0]
 8015df6:	b323      	cbz	r3, 8015e42 <rcl_take_response+0x6a>
 8015df8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8015dfa:	b310      	cbz	r0, 8015e42 <rcl_take_response+0x6a>
 8015dfc:	4662      	mov	r2, ip
 8015dfe:	b31a      	cbz	r2, 8015e48 <rcl_take_response+0x70>
 8015e00:	2300      	movs	r3, #0
 8015e02:	2600      	movs	r6, #0
 8015e04:	2700      	movs	r7, #0
 8015e06:	f88d 3007 	strb.w	r3, [sp, #7]
 8015e0a:	a902      	add	r1, sp, #8
 8015e0c:	f10d 0307 	add.w	r3, sp, #7
 8015e10:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8015e14:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015e18:	f002 fee0 	bl	8018bdc <rmw_take_response>
 8015e1c:	4606      	mov	r6, r0
 8015e1e:	b9a8      	cbnz	r0, 8015e4c <rcl_take_response+0x74>
 8015e20:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8015e24:	f240 13f5 	movw	r3, #501	; 0x1f5
 8015e28:	2a00      	cmp	r2, #0
 8015e2a:	bf08      	it	eq
 8015e2c:	461e      	moveq	r6, r3
 8015e2e:	ad06      	add	r5, sp, #24
 8015e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015e34:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015e38:	e884 0003 	stmia.w	r4, {r0, r1}
 8015e3c:	4630      	mov	r0, r6
 8015e3e:	b00d      	add	sp, #52	; 0x34
 8015e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e42:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8015e46:	e7f2      	b.n	8015e2e <rcl_take_response+0x56>
 8015e48:	260b      	movs	r6, #11
 8015e4a:	e7f0      	b.n	8015e2e <rcl_take_response+0x56>
 8015e4c:	2601      	movs	r6, #1
 8015e4e:	e7ee      	b.n	8015e2e <rcl_take_response+0x56>

08015e50 <rcl_convert_rmw_ret_to_rcl_ret>:
 8015e50:	280b      	cmp	r0, #11
 8015e52:	dc0d      	bgt.n	8015e70 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8015e54:	2800      	cmp	r0, #0
 8015e56:	db09      	blt.n	8015e6c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015e58:	280b      	cmp	r0, #11
 8015e5a:	d807      	bhi.n	8015e6c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015e5c:	e8df f000 	tbb	[pc, r0]
 8015e60:	07060607 	.word	0x07060607
 8015e64:	06060606 	.word	0x06060606
 8015e68:	07070606 	.word	0x07070606
 8015e6c:	2001      	movs	r0, #1
 8015e6e:	4770      	bx	lr
 8015e70:	28cb      	cmp	r0, #203	; 0xcb
 8015e72:	bf18      	it	ne
 8015e74:	2001      	movne	r0, #1
 8015e76:	4770      	bx	lr

08015e78 <rcl_get_zero_initialized_context>:
 8015e78:	4b06      	ldr	r3, [pc, #24]	; (8015e94 <rcl_get_zero_initialized_context+0x1c>)
 8015e7a:	b430      	push	{r4, r5}
 8015e7c:	2400      	movs	r4, #0
 8015e7e:	2500      	movs	r5, #0
 8015e80:	e9c3 4502 	strd	r4, r5, [r3, #8]
 8015e84:	4604      	mov	r4, r0
 8015e86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015e88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015e8c:	4620      	mov	r0, r4
 8015e8e:	bc30      	pop	{r4, r5}
 8015e90:	4770      	bx	lr
 8015e92:	bf00      	nop
 8015e94:	20010470 	.word	0x20010470

08015e98 <rcl_context_is_valid>:
 8015e98:	b150      	cbz	r0, 8015eb0 <rcl_context_is_valid+0x18>
 8015e9a:	b508      	push	{r3, lr}
 8015e9c:	3008      	adds	r0, #8
 8015e9e:	2105      	movs	r1, #5
 8015ea0:	f002 f912 	bl	80180c8 <__atomic_load_8>
 8015ea4:	ea51 0300 	orrs.w	r3, r1, r0
 8015ea8:	bf14      	ite	ne
 8015eaa:	2001      	movne	r0, #1
 8015eac:	2000      	moveq	r0, #0
 8015eae:	bd08      	pop	{r3, pc}
 8015eb0:	4770      	bx	lr
 8015eb2:	bf00      	nop

08015eb4 <__cleanup_context>:
 8015eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015eb8:	b087      	sub	sp, #28
 8015eba:	4606      	mov	r6, r0
 8015ebc:	2305      	movs	r3, #5
 8015ebe:	3008      	adds	r0, #8
 8015ec0:	9300      	str	r3, [sp, #0]
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	f002 f933 	bl	8018130 <__atomic_store_8>
 8015eca:	6830      	ldr	r0, [r6, #0]
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	d056      	beq.n	8015f7e <__cleanup_context+0xca>
 8015ed0:	6947      	ldr	r7, [r0, #20]
 8015ed2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015ed6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8015eda:	b137      	cbz	r7, 8015eea <__cleanup_context+0x36>
 8015edc:	3014      	adds	r0, #20
 8015ede:	f7f8 fd39 	bl	800e954 <rcl_init_options_fini>
 8015ee2:	4607      	mov	r7, r0
 8015ee4:	2800      	cmp	r0, #0
 8015ee6:	d14c      	bne.n	8015f82 <__cleanup_context+0xce>
 8015ee8:	6830      	ldr	r0, [r6, #0]
 8015eea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015eec:	b143      	cbz	r3, 8015f00 <__cleanup_context+0x4c>
 8015eee:	3028      	adds	r0, #40	; 0x28
 8015ef0:	f7fa fb42 	bl	8010578 <rmw_context_fini>
 8015ef4:	b118      	cbz	r0, 8015efe <__cleanup_context+0x4a>
 8015ef6:	2f00      	cmp	r7, #0
 8015ef8:	d046      	beq.n	8015f88 <__cleanup_context+0xd4>
 8015efa:	f7f9 fed7 	bl	800fcac <rcutils_reset_error>
 8015efe:	6830      	ldr	r0, [r6, #0]
 8015f00:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8015f04:	f1bc 0f00 	cmp.w	ip, #0
 8015f08:	d01c      	beq.n	8015f44 <__cleanup_context+0x90>
 8015f0a:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8015f0e:	2a01      	cmp	r2, #1
 8015f10:	f173 0100 	sbcs.w	r1, r3, #0
 8015f14:	db12      	blt.n	8015f3c <__cleanup_context+0x88>
 8015f16:	2400      	movs	r4, #0
 8015f18:	2500      	movs	r5, #0
 8015f1a:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 8015f1e:	4649      	mov	r1, r9
 8015f20:	b308      	cbz	r0, 8015f66 <__cleanup_context+0xb2>
 8015f22:	47c0      	blx	r8
 8015f24:	6831      	ldr	r1, [r6, #0]
 8015f26:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8015f2a:	3401      	adds	r4, #1
 8015f2c:	f145 0500 	adc.w	r5, r5, #0
 8015f30:	4294      	cmp	r4, r2
 8015f32:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8015f36:	eb75 0103 	sbcs.w	r1, r5, r3
 8015f3a:	dbee      	blt.n	8015f1a <__cleanup_context+0x66>
 8015f3c:	4660      	mov	r0, ip
 8015f3e:	4649      	mov	r1, r9
 8015f40:	47c0      	blx	r8
 8015f42:	6830      	ldr	r0, [r6, #0]
 8015f44:	4649      	mov	r1, r9
 8015f46:	47c0      	blx	r8
 8015f48:	4b11      	ldr	r3, [pc, #68]	; (8015f90 <__cleanup_context+0xdc>)
 8015f4a:	2000      	movs	r0, #0
 8015f4c:	2100      	movs	r1, #0
 8015f4e:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8015f52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015f54:	ac02      	add	r4, sp, #8
 8015f56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015f5a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8015f5e:	4638      	mov	r0, r7
 8015f60:	b007      	add	sp, #28
 8015f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f66:	3401      	adds	r4, #1
 8015f68:	f145 0500 	adc.w	r5, r5, #0
 8015f6c:	4294      	cmp	r4, r2
 8015f6e:	eb75 0103 	sbcs.w	r1, r5, r3
 8015f72:	dbd2      	blt.n	8015f1a <__cleanup_context+0x66>
 8015f74:	4660      	mov	r0, ip
 8015f76:	4649      	mov	r1, r9
 8015f78:	47c0      	blx	r8
 8015f7a:	6830      	ldr	r0, [r6, #0]
 8015f7c:	e7e2      	b.n	8015f44 <__cleanup_context+0x90>
 8015f7e:	4607      	mov	r7, r0
 8015f80:	e7e2      	b.n	8015f48 <__cleanup_context+0x94>
 8015f82:	f7f9 fe93 	bl	800fcac <rcutils_reset_error>
 8015f86:	e7af      	b.n	8015ee8 <__cleanup_context+0x34>
 8015f88:	f7ff ff62 	bl	8015e50 <rcl_convert_rmw_ret_to_rcl_ret>
 8015f8c:	4607      	mov	r7, r0
 8015f8e:	e7b4      	b.n	8015efa <__cleanup_context+0x46>
 8015f90:	20010470 	.word	0x20010470

08015f94 <rcl_expand_topic_name>:
 8015f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f98:	b08b      	sub	sp, #44	; 0x2c
 8015f9a:	9306      	str	r3, [sp, #24]
 8015f9c:	2800      	cmp	r0, #0
 8015f9e:	f000 80d2 	beq.w	8016146 <rcl_expand_topic_name+0x1b2>
 8015fa2:	460e      	mov	r6, r1
 8015fa4:	2900      	cmp	r1, #0
 8015fa6:	f000 80ce 	beq.w	8016146 <rcl_expand_topic_name+0x1b2>
 8015faa:	4617      	mov	r7, r2
 8015fac:	2a00      	cmp	r2, #0
 8015fae:	f000 80ca 	beq.w	8016146 <rcl_expand_topic_name+0x1b2>
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	f000 80c7 	beq.w	8016146 <rcl_expand_topic_name+0x1b2>
 8015fb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	f000 80c3 	beq.w	8016146 <rcl_expand_topic_name+0x1b2>
 8015fc0:	a909      	add	r1, sp, #36	; 0x24
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	4680      	mov	r8, r0
 8015fc6:	f001 f9a1 	bl	801730c <rcl_validate_topic_name>
 8015fca:	4604      	mov	r4, r0
 8015fcc:	2800      	cmp	r0, #0
 8015fce:	f040 80b6 	bne.w	801613e <rcl_expand_topic_name+0x1aa>
 8015fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	f040 80bf 	bne.w	8016158 <rcl_expand_topic_name+0x1c4>
 8015fda:	4602      	mov	r2, r0
 8015fdc:	a909      	add	r1, sp, #36	; 0x24
 8015fde:	4630      	mov	r0, r6
 8015fe0:	f002 fb3a 	bl	8018658 <rmw_validate_node_name>
 8015fe4:	2800      	cmp	r0, #0
 8015fe6:	f040 80b3 	bne.w	8016150 <rcl_expand_topic_name+0x1bc>
 8015fea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015fec:	2a00      	cmp	r2, #0
 8015fee:	f040 80b8 	bne.w	8016162 <rcl_expand_topic_name+0x1ce>
 8015ff2:	a909      	add	r1, sp, #36	; 0x24
 8015ff4:	4638      	mov	r0, r7
 8015ff6:	f002 fb11 	bl	801861c <rmw_validate_namespace>
 8015ffa:	2800      	cmp	r0, #0
 8015ffc:	f040 80a8 	bne.w	8016150 <rcl_expand_topic_name+0x1bc>
 8016000:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016002:	2c00      	cmp	r4, #0
 8016004:	f040 80f6 	bne.w	80161f4 <rcl_expand_topic_name+0x260>
 8016008:	217b      	movs	r1, #123	; 0x7b
 801600a:	4640      	mov	r0, r8
 801600c:	f004 fd79 	bl	801ab02 <strchr>
 8016010:	f898 3000 	ldrb.w	r3, [r8]
 8016014:	2b2f      	cmp	r3, #47	; 0x2f
 8016016:	4605      	mov	r5, r0
 8016018:	f000 80c4 	beq.w	80161a4 <rcl_expand_topic_name+0x210>
 801601c:	2b7e      	cmp	r3, #126	; 0x7e
 801601e:	d16f      	bne.n	8016100 <rcl_expand_topic_name+0x16c>
 8016020:	4638      	mov	r0, r7
 8016022:	f7ea f8df 	bl	80001e4 <strlen>
 8016026:	4b87      	ldr	r3, [pc, #540]	; (8016244 <rcl_expand_topic_name+0x2b0>)
 8016028:	4987      	ldr	r1, [pc, #540]	; (8016248 <rcl_expand_topic_name+0x2b4>)
 801602a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801602c:	9604      	str	r6, [sp, #16]
 801602e:	2801      	cmp	r0, #1
 8016030:	bf0c      	ite	eq
 8016032:	4618      	moveq	r0, r3
 8016034:	4608      	movne	r0, r1
 8016036:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801603a:	e9cd 2300 	strd	r2, r3, [sp]
 801603e:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8016042:	f108 0101 	add.w	r1, r8, #1
 8016046:	9105      	str	r1, [sp, #20]
 8016048:	ab14      	add	r3, sp, #80	; 0x50
 801604a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801604c:	f002 f928 	bl	80182a0 <rcutils_format_string_limit>
 8016050:	4682      	mov	sl, r0
 8016052:	2800      	cmp	r0, #0
 8016054:	f000 80d0 	beq.w	80161f8 <rcl_expand_topic_name+0x264>
 8016058:	2d00      	cmp	r5, #0
 801605a:	f000 80aa 	beq.w	80161b2 <rcl_expand_topic_name+0x21e>
 801605e:	217b      	movs	r1, #123	; 0x7b
 8016060:	f004 fd4f 	bl	801ab02 <strchr>
 8016064:	46d1      	mov	r9, sl
 8016066:	4605      	mov	r5, r0
 8016068:	9407      	str	r4, [sp, #28]
 801606a:	46d3      	mov	fp, sl
 801606c:	464c      	mov	r4, r9
 801606e:	2d00      	cmp	r5, #0
 8016070:	f000 80c7 	beq.w	8016202 <rcl_expand_topic_name+0x26e>
 8016074:	217d      	movs	r1, #125	; 0x7d
 8016076:	4620      	mov	r0, r4
 8016078:	f004 fd43 	bl	801ab02 <strchr>
 801607c:	eba0 0905 	sub.w	r9, r0, r5
 8016080:	f109 0a01 	add.w	sl, r9, #1
 8016084:	4871      	ldr	r0, [pc, #452]	; (801624c <rcl_expand_topic_name+0x2b8>)
 8016086:	4652      	mov	r2, sl
 8016088:	4629      	mov	r1, r5
 801608a:	f004 fd4f 	bl	801ab2c <strncmp>
 801608e:	2800      	cmp	r0, #0
 8016090:	f000 808d 	beq.w	80161ae <rcl_expand_topic_name+0x21a>
 8016094:	486e      	ldr	r0, [pc, #440]	; (8016250 <rcl_expand_topic_name+0x2bc>)
 8016096:	4652      	mov	r2, sl
 8016098:	4629      	mov	r1, r5
 801609a:	f004 fd47 	bl	801ab2c <strncmp>
 801609e:	b130      	cbz	r0, 80160ae <rcl_expand_topic_name+0x11a>
 80160a0:	486c      	ldr	r0, [pc, #432]	; (8016254 <rcl_expand_topic_name+0x2c0>)
 80160a2:	4652      	mov	r2, sl
 80160a4:	4629      	mov	r1, r5
 80160a6:	f004 fd41 	bl	801ab2c <strncmp>
 80160aa:	2800      	cmp	r0, #0
 80160ac:	d15b      	bne.n	8016166 <rcl_expand_topic_name+0x1d2>
 80160ae:	46b9      	mov	r9, r7
 80160b0:	ab16      	add	r3, sp, #88	; 0x58
 80160b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80160b6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80160ba:	ab14      	add	r3, sp, #80	; 0x50
 80160bc:	4628      	mov	r0, r5
 80160be:	cb0c      	ldmia	r3, {r2, r3}
 80160c0:	4651      	mov	r1, sl
 80160c2:	f002 fa39 	bl	8018538 <rcutils_strndup>
 80160c6:	4605      	mov	r5, r0
 80160c8:	2800      	cmp	r0, #0
 80160ca:	f000 80a4 	beq.w	8016216 <rcl_expand_topic_name+0x282>
 80160ce:	464a      	mov	r2, r9
 80160d0:	4620      	mov	r0, r4
 80160d2:	ab14      	add	r3, sp, #80	; 0x50
 80160d4:	4629      	mov	r1, r5
 80160d6:	f002 f935 	bl	8018344 <rcutils_repl_str>
 80160da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80160dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80160de:	4604      	mov	r4, r0
 80160e0:	4628      	mov	r0, r5
 80160e2:	4798      	blx	r3
 80160e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80160e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80160e8:	4658      	mov	r0, fp
 80160ea:	4798      	blx	r3
 80160ec:	2c00      	cmp	r4, #0
 80160ee:	f000 8083 	beq.w	80161f8 <rcl_expand_topic_name+0x264>
 80160f2:	217b      	movs	r1, #123	; 0x7b
 80160f4:	4620      	mov	r0, r4
 80160f6:	f004 fd04 	bl	801ab02 <strchr>
 80160fa:	46a3      	mov	fp, r4
 80160fc:	4605      	mov	r5, r0
 80160fe:	e7b6      	b.n	801606e <rcl_expand_topic_name+0xda>
 8016100:	2800      	cmp	r0, #0
 8016102:	d151      	bne.n	80161a8 <rcl_expand_topic_name+0x214>
 8016104:	4638      	mov	r0, r7
 8016106:	f7ea f86d 	bl	80001e4 <strlen>
 801610a:	4b53      	ldr	r3, [pc, #332]	; (8016258 <rcl_expand_topic_name+0x2c4>)
 801610c:	4a53      	ldr	r2, [pc, #332]	; (801625c <rcl_expand_topic_name+0x2c8>)
 801610e:	f8cd 8010 	str.w	r8, [sp, #16]
 8016112:	2801      	cmp	r0, #1
 8016114:	bf0c      	ite	eq
 8016116:	4618      	moveq	r0, r3
 8016118:	4610      	movne	r0, r2
 801611a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801611c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016120:	e9cd 3200 	strd	r3, r2, [sp]
 8016124:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8016128:	ab14      	add	r3, sp, #80	; 0x50
 801612a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801612c:	f002 f8b8 	bl	80182a0 <rcutils_format_string_limit>
 8016130:	4682      	mov	sl, r0
 8016132:	4653      	mov	r3, sl
 8016134:	2b00      	cmp	r3, #0
 8016136:	d05f      	beq.n	80161f8 <rcl_expand_topic_name+0x264>
 8016138:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801613a:	f8c3 a000 	str.w	sl, [r3]
 801613e:	4620      	mov	r0, r4
 8016140:	b00b      	add	sp, #44	; 0x2c
 8016142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016146:	240b      	movs	r4, #11
 8016148:	4620      	mov	r0, r4
 801614a:	b00b      	add	sp, #44	; 0x2c
 801614c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016150:	f7ff fe7e 	bl	8015e50 <rcl_convert_rmw_ret_to_rcl_ret>
 8016154:	4604      	mov	r4, r0
 8016156:	e7f2      	b.n	801613e <rcl_expand_topic_name+0x1aa>
 8016158:	2467      	movs	r4, #103	; 0x67
 801615a:	4620      	mov	r0, r4
 801615c:	b00b      	add	sp, #44	; 0x2c
 801615e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016162:	24c9      	movs	r4, #201	; 0xc9
 8016164:	e7eb      	b.n	801613e <rcl_expand_topic_name+0x1aa>
 8016166:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801616a:	9806      	ldr	r0, [sp, #24]
 801616c:	1c69      	adds	r1, r5, #1
 801616e:	f7f9 feb9 	bl	800fee4 <rcutils_string_map_getn>
 8016172:	4681      	mov	r9, r0
 8016174:	2800      	cmp	r0, #0
 8016176:	d19b      	bne.n	80160b0 <rcl_expand_topic_name+0x11c>
 8016178:	aa16      	add	r2, sp, #88	; 0x58
 801617a:	ca07      	ldmia	r2, {r0, r1, r2}
 801617c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801617e:	f8c3 9000 	str.w	r9, [r3]
 8016182:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016186:	ab14      	add	r3, sp, #80	; 0x50
 8016188:	cb0c      	ldmia	r3, {r2, r3}
 801618a:	4651      	mov	r1, sl
 801618c:	4628      	mov	r0, r5
 801618e:	f002 f9d3 	bl	8018538 <rcutils_strndup>
 8016192:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016194:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016196:	4798      	blx	r3
 8016198:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801619a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801619c:	4658      	mov	r0, fp
 801619e:	4798      	blx	r3
 80161a0:	2469      	movs	r4, #105	; 0x69
 80161a2:	e7cc      	b.n	801613e <rcl_expand_topic_name+0x1aa>
 80161a4:	2800      	cmp	r0, #0
 80161a6:	d03e      	beq.n	8016226 <rcl_expand_topic_name+0x292>
 80161a8:	46c1      	mov	r9, r8
 80161aa:	46a2      	mov	sl, r4
 80161ac:	e75c      	b.n	8016068 <rcl_expand_topic_name+0xd4>
 80161ae:	46b1      	mov	r9, r6
 80161b0:	e77e      	b.n	80160b0 <rcl_expand_topic_name+0x11c>
 80161b2:	f89a 3000 	ldrb.w	r3, [sl]
 80161b6:	2b2f      	cmp	r3, #47	; 0x2f
 80161b8:	d0be      	beq.n	8016138 <rcl_expand_topic_name+0x1a4>
 80161ba:	4638      	mov	r0, r7
 80161bc:	f7ea f812 	bl	80001e4 <strlen>
 80161c0:	4b25      	ldr	r3, [pc, #148]	; (8016258 <rcl_expand_topic_name+0x2c4>)
 80161c2:	4926      	ldr	r1, [pc, #152]	; (801625c <rcl_expand_topic_name+0x2c8>)
 80161c4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80161c6:	f8cd a010 	str.w	sl, [sp, #16]
 80161ca:	2801      	cmp	r0, #1
 80161cc:	bf0c      	ite	eq
 80161ce:	4618      	moveq	r0, r3
 80161d0:	4608      	movne	r0, r1
 80161d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80161d6:	e9cd 2300 	strd	r2, r3, [sp]
 80161da:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80161de:	ab14      	add	r3, sp, #80	; 0x50
 80161e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80161e2:	f002 f85d 	bl	80182a0 <rcutils_format_string_limit>
 80161e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80161e8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80161ea:	4603      	mov	r3, r0
 80161ec:	4650      	mov	r0, sl
 80161ee:	469a      	mov	sl, r3
 80161f0:	4790      	blx	r2
 80161f2:	e79e      	b.n	8016132 <rcl_expand_topic_name+0x19e>
 80161f4:	24ca      	movs	r4, #202	; 0xca
 80161f6:	e7a2      	b.n	801613e <rcl_expand_topic_name+0x1aa>
 80161f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80161fa:	2300      	movs	r3, #0
 80161fc:	6013      	str	r3, [r2, #0]
 80161fe:	240a      	movs	r4, #10
 8016200:	e79d      	b.n	801613e <rcl_expand_topic_name+0x1aa>
 8016202:	465b      	mov	r3, fp
 8016204:	9c07      	ldr	r4, [sp, #28]
 8016206:	46da      	mov	sl, fp
 8016208:	2b00      	cmp	r3, #0
 801620a:	d1d2      	bne.n	80161b2 <rcl_expand_topic_name+0x21e>
 801620c:	f898 3000 	ldrb.w	r3, [r8]
 8016210:	2b2f      	cmp	r3, #47	; 0x2f
 8016212:	d091      	beq.n	8016138 <rcl_expand_topic_name+0x1a4>
 8016214:	e776      	b.n	8016104 <rcl_expand_topic_name+0x170>
 8016216:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016218:	9918      	ldr	r1, [sp, #96]	; 0x60
 801621a:	601d      	str	r5, [r3, #0]
 801621c:	4658      	mov	r0, fp
 801621e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016220:	4798      	blx	r3
 8016222:	240a      	movs	r4, #10
 8016224:	e78b      	b.n	801613e <rcl_expand_topic_name+0x1aa>
 8016226:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 801622a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801622e:	ab14      	add	r3, sp, #80	; 0x50
 8016230:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016232:	4640      	mov	r0, r8
 8016234:	f002 f95e 	bl	80184f4 <rcutils_strdup>
 8016238:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801623a:	2800      	cmp	r0, #0
 801623c:	bf08      	it	eq
 801623e:	240a      	moveq	r4, #10
 8016240:	6018      	str	r0, [r3, #0]
 8016242:	e77c      	b.n	801613e <rcl_expand_topic_name+0x1aa>
 8016244:	0801f90c 	.word	0x0801f90c
 8016248:	0801fbd0 	.word	0x0801fbd0
 801624c:	0801fbd8 	.word	0x0801fbd8
 8016250:	0801fbe0 	.word	0x0801fbe0
 8016254:	0801fbe8 	.word	0x0801fbe8
 8016258:	0801f91c 	.word	0x0801f91c
 801625c:	0801f8d4 	.word	0x0801f8d4

08016260 <rcl_get_default_topic_name_substitutions>:
 8016260:	2800      	cmp	r0, #0
 8016262:	bf0c      	ite	eq
 8016264:	200b      	moveq	r0, #11
 8016266:	2000      	movne	r0, #0
 8016268:	4770      	bx	lr
 801626a:	bf00      	nop

0801626c <rcl_init>:
 801626c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016270:	1e07      	subs	r7, r0, #0
 8016272:	b0a1      	sub	sp, #132	; 0x84
 8016274:	4688      	mov	r8, r1
 8016276:	4692      	mov	sl, r2
 8016278:	4699      	mov	r9, r3
 801627a:	f340 8096 	ble.w	80163aa <rcl_init+0x13e>
 801627e:	2900      	cmp	r1, #0
 8016280:	f000 8096 	beq.w	80163b0 <rcl_init+0x144>
 8016284:	1f0d      	subs	r5, r1, #4
 8016286:	2400      	movs	r4, #0
 8016288:	f855 6f04 	ldr.w	r6, [r5, #4]!
 801628c:	3401      	adds	r4, #1
 801628e:	2e00      	cmp	r6, #0
 8016290:	f000 808e 	beq.w	80163b0 <rcl_init+0x144>
 8016294:	42a7      	cmp	r7, r4
 8016296:	d1f7      	bne.n	8016288 <rcl_init+0x1c>
 8016298:	f1ba 0f00 	cmp.w	sl, #0
 801629c:	f000 8088 	beq.w	80163b0 <rcl_init+0x144>
 80162a0:	f8da 4000 	ldr.w	r4, [sl]
 80162a4:	2c00      	cmp	r4, #0
 80162a6:	f000 8083 	beq.w	80163b0 <rcl_init+0x144>
 80162aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80162ac:	ad1b      	add	r5, sp, #108	; 0x6c
 80162ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80162b0:	6823      	ldr	r3, [r4, #0]
 80162b2:	602b      	str	r3, [r5, #0]
 80162b4:	a81b      	add	r0, sp, #108	; 0x6c
 80162b6:	f7f9 fc07 	bl	800fac8 <rcutils_allocator_is_valid>
 80162ba:	2800      	cmp	r0, #0
 80162bc:	d078      	beq.n	80163b0 <rcl_init+0x144>
 80162be:	f1b9 0f00 	cmp.w	r9, #0
 80162c2:	d075      	beq.n	80163b0 <rcl_init+0x144>
 80162c4:	f8d9 3000 	ldr.w	r3, [r9]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d176      	bne.n	80163ba <rcl_init+0x14e>
 80162cc:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 80162d0:	2178      	movs	r1, #120	; 0x78
 80162d2:	2001      	movs	r0, #1
 80162d4:	4798      	blx	r3
 80162d6:	4604      	mov	r4, r0
 80162d8:	f8c9 0000 	str.w	r0, [r9]
 80162dc:	2800      	cmp	r0, #0
 80162de:	f000 80c6 	beq.w	801646e <rcl_init+0x202>
 80162e2:	a804      	add	r0, sp, #16
 80162e4:	f002 f944 	bl	8018570 <rmw_get_zero_initialized_context>
 80162e8:	a904      	add	r1, sp, #16
 80162ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80162ee:	2250      	movs	r2, #80	; 0x50
 80162f0:	ac1b      	add	r4, sp, #108	; 0x6c
 80162f2:	f003 ffa3 	bl	801a23c <memcpy>
 80162f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80162f8:	f8d9 5000 	ldr.w	r5, [r9]
 80162fc:	6826      	ldr	r6, [r4, #0]
 80162fe:	462c      	mov	r4, r5
 8016300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016302:	f105 0114 	add.w	r1, r5, #20
 8016306:	6026      	str	r6, [r4, #0]
 8016308:	4650      	mov	r0, sl
 801630a:	f7f8 fb47 	bl	800e99c <rcl_init_options_copy>
 801630e:	4606      	mov	r6, r0
 8016310:	2800      	cmp	r0, #0
 8016312:	d143      	bne.n	801639c <rcl_init+0x130>
 8016314:	f8d9 b000 	ldr.w	fp, [r9]
 8016318:	463c      	mov	r4, r7
 801631a:	17fd      	asrs	r5, r7, #31
 801631c:	e9cb 4506 	strd	r4, r5, [fp, #24]
 8016320:	f8cb 0020 	str.w	r0, [fp, #32]
 8016324:	2f00      	cmp	r7, #0
 8016326:	d04d      	beq.n	80163c4 <rcl_init+0x158>
 8016328:	f1b8 0f00 	cmp.w	r8, #0
 801632c:	d04a      	beq.n	80163c4 <rcl_init+0x158>
 801632e:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 8016332:	4638      	mov	r0, r7
 8016334:	2104      	movs	r1, #4
 8016336:	4798      	blx	r3
 8016338:	f8d9 a000 	ldr.w	sl, [r9]
 801633c:	f8cb 0020 	str.w	r0, [fp, #32]
 8016340:	f8da 3020 	ldr.w	r3, [sl, #32]
 8016344:	b34b      	cbz	r3, 801639a <rcl_init+0x12e>
 8016346:	2f01      	cmp	r7, #1
 8016348:	f175 0300 	sbcs.w	r3, r5, #0
 801634c:	db3a      	blt.n	80163c4 <rcl_init+0x158>
 801634e:	f1a8 0804 	sub.w	r8, r8, #4
 8016352:	2600      	movs	r6, #0
 8016354:	2700      	movs	r7, #0
 8016356:	e00c      	b.n	8016372 <rcl_init+0x106>
 8016358:	f8d8 1000 	ldr.w	r1, [r8]
 801635c:	f003 ff6e 	bl	801a23c <memcpy>
 8016360:	3601      	adds	r6, #1
 8016362:	f147 0700 	adc.w	r7, r7, #0
 8016366:	42bd      	cmp	r5, r7
 8016368:	bf08      	it	eq
 801636a:	42b4      	cmpeq	r4, r6
 801636c:	d02a      	beq.n	80163c4 <rcl_init+0x158>
 801636e:	f8d9 a000 	ldr.w	sl, [r9]
 8016372:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8016376:	f7e9 ff35 	bl	80001e4 <strlen>
 801637a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801637c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801637e:	f8da a020 	ldr.w	sl, [sl, #32]
 8016382:	9003      	str	r0, [sp, #12]
 8016384:	4798      	blx	r3
 8016386:	f8d9 1000 	ldr.w	r1, [r9]
 801638a:	9a03      	ldr	r2, [sp, #12]
 801638c:	6a09      	ldr	r1, [r1, #32]
 801638e:	00b3      	lsls	r3, r6, #2
 8016390:	f84a 0003 	str.w	r0, [sl, r3]
 8016394:	58c8      	ldr	r0, [r1, r3]
 8016396:	2800      	cmp	r0, #0
 8016398:	d1de      	bne.n	8016358 <rcl_init+0xec>
 801639a:	260a      	movs	r6, #10
 801639c:	4648      	mov	r0, r9
 801639e:	f7ff fd89 	bl	8015eb4 <__cleanup_context>
 80163a2:	4630      	mov	r0, r6
 80163a4:	b021      	add	sp, #132	; 0x84
 80163a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163aa:	2900      	cmp	r1, #0
 80163ac:	f43f af74 	beq.w	8016298 <rcl_init+0x2c>
 80163b0:	260b      	movs	r6, #11
 80163b2:	4630      	mov	r0, r6
 80163b4:	b021      	add	sp, #132	; 0x84
 80163b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163ba:	2664      	movs	r6, #100	; 0x64
 80163bc:	4630      	mov	r0, r6
 80163be:	b021      	add	sp, #132	; 0x84
 80163c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163c4:	2605      	movs	r6, #5
 80163c6:	2300      	movs	r3, #0
 80163c8:	4832      	ldr	r0, [pc, #200]	; (8016494 <rcl_init+0x228>)
 80163ca:	9600      	str	r6, [sp, #0]
 80163cc:	2201      	movs	r2, #1
 80163ce:	f001 ff1d 	bl	801820c <__atomic_fetch_add_8>
 80163d2:	4604      	mov	r4, r0
 80163d4:	460d      	mov	r5, r1
 80163d6:	ea54 0305 	orrs.w	r3, r4, r5
 80163da:	d03e      	beq.n	801645a <rcl_init+0x1ee>
 80163dc:	4602      	mov	r2, r0
 80163de:	460b      	mov	r3, r1
 80163e0:	9600      	str	r6, [sp, #0]
 80163e2:	f109 0008 	add.w	r0, r9, #8
 80163e6:	f001 fea3 	bl	8018130 <__atomic_store_8>
 80163ea:	f8d9 3000 	ldr.w	r3, [r9]
 80163ee:	695f      	ldr	r7, [r3, #20]
 80163f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163f2:	3301      	adds	r3, #1
 80163f4:	e9c7 4506 	strd	r4, r5, [r7, #24]
 80163f8:	d03d      	beq.n	8016476 <rcl_init+0x20a>
 80163fa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80163fe:	b94b      	cbnz	r3, 8016414 <rcl_init+0x1a8>
 8016400:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8016404:	f000 f848 	bl	8016498 <rcl_get_localhost_only>
 8016408:	4606      	mov	r6, r0
 801640a:	2800      	cmp	r0, #0
 801640c:	d1c6      	bne.n	801639c <rcl_init+0x130>
 801640e:	f8d9 3000 	ldr.w	r3, [r9]
 8016412:	695f      	ldr	r7, [r3, #20]
 8016414:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016416:	aa1a      	add	r2, sp, #104	; 0x68
 8016418:	a919      	add	r1, sp, #100	; 0x64
 801641a:	f000 ff65 	bl	80172e8 <rcl_validate_enclave_name>
 801641e:	4606      	mov	r6, r0
 8016420:	2800      	cmp	r0, #0
 8016422:	d1bb      	bne.n	801639c <rcl_init+0x130>
 8016424:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016426:	bb23      	cbnz	r3, 8016472 <rcl_init+0x206>
 8016428:	f8d9 1000 	ldr.w	r1, [r9]
 801642c:	694b      	ldr	r3, [r1, #20]
 801642e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016430:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8016434:	f000 fa9e 	bl	8016974 <rcl_get_security_options_from_environment>
 8016438:	4606      	mov	r6, r0
 801643a:	2800      	cmp	r0, #0
 801643c:	d1ae      	bne.n	801639c <rcl_init+0x130>
 801643e:	f8d9 1000 	ldr.w	r1, [r9]
 8016442:	6948      	ldr	r0, [r1, #20]
 8016444:	3128      	adds	r1, #40	; 0x28
 8016446:	3018      	adds	r0, #24
 8016448:	f7f9 ff70 	bl	801032c <rmw_init>
 801644c:	4606      	mov	r6, r0
 801644e:	2800      	cmp	r0, #0
 8016450:	d0af      	beq.n	80163b2 <rcl_init+0x146>
 8016452:	f7ff fcfd 	bl	8015e50 <rcl_convert_rmw_ret_to_rcl_ret>
 8016456:	4606      	mov	r6, r0
 8016458:	e7a0      	b.n	801639c <rcl_init+0x130>
 801645a:	9600      	str	r6, [sp, #0]
 801645c:	480d      	ldr	r0, [pc, #52]	; (8016494 <rcl_init+0x228>)
 801645e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016466:	f001 fe63 	bl	8018130 <__atomic_store_8>
 801646a:	2601      	movs	r6, #1
 801646c:	e796      	b.n	801639c <rcl_init+0x130>
 801646e:	260a      	movs	r6, #10
 8016470:	e79f      	b.n	80163b2 <rcl_init+0x146>
 8016472:	2601      	movs	r6, #1
 8016474:	e792      	b.n	801639c <rcl_init+0x130>
 8016476:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801647a:	f003 fba5 	bl	8019bc8 <rcl_get_default_domain_id>
 801647e:	4606      	mov	r6, r0
 8016480:	2800      	cmp	r0, #0
 8016482:	d18b      	bne.n	801639c <rcl_init+0x130>
 8016484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016486:	3301      	adds	r3, #1
 8016488:	f8d9 3000 	ldr.w	r3, [r9]
 801648c:	bf08      	it	eq
 801648e:	6278      	streq	r0, [r7, #36]	; 0x24
 8016490:	695f      	ldr	r7, [r3, #20]
 8016492:	e7b2      	b.n	80163fa <rcl_init+0x18e>
 8016494:	20000160 	.word	0x20000160

08016498 <rcl_get_localhost_only>:
 8016498:	b510      	push	{r4, lr}
 801649a:	b082      	sub	sp, #8
 801649c:	2300      	movs	r3, #0
 801649e:	9301      	str	r3, [sp, #4]
 80164a0:	b1b8      	cbz	r0, 80164d2 <rcl_get_localhost_only+0x3a>
 80164a2:	4604      	mov	r4, r0
 80164a4:	a901      	add	r1, sp, #4
 80164a6:	480c      	ldr	r0, [pc, #48]	; (80164d8 <rcl_get_localhost_only+0x40>)
 80164a8:	f001 ff34 	bl	8018314 <rcutils_get_env>
 80164ac:	b110      	cbz	r0, 80164b4 <rcl_get_localhost_only+0x1c>
 80164ae:	2001      	movs	r0, #1
 80164b0:	b002      	add	sp, #8
 80164b2:	bd10      	pop	{r4, pc}
 80164b4:	9b01      	ldr	r3, [sp, #4]
 80164b6:	b113      	cbz	r3, 80164be <rcl_get_localhost_only+0x26>
 80164b8:	781a      	ldrb	r2, [r3, #0]
 80164ba:	2a31      	cmp	r2, #49	; 0x31
 80164bc:	d004      	beq.n	80164c8 <rcl_get_localhost_only+0x30>
 80164be:	2302      	movs	r3, #2
 80164c0:	2000      	movs	r0, #0
 80164c2:	7023      	strb	r3, [r4, #0]
 80164c4:	b002      	add	sp, #8
 80164c6:	bd10      	pop	{r4, pc}
 80164c8:	785b      	ldrb	r3, [r3, #1]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d1f7      	bne.n	80164be <rcl_get_localhost_only+0x26>
 80164ce:	2301      	movs	r3, #1
 80164d0:	e7f6      	b.n	80164c0 <rcl_get_localhost_only+0x28>
 80164d2:	200b      	movs	r0, #11
 80164d4:	b002      	add	sp, #8
 80164d6:	bd10      	pop	{r4, pc}
 80164d8:	0801fbf4 	.word	0x0801fbf4

080164dc <rcl_get_zero_initialized_node>:
 80164dc:	4a03      	ldr	r2, [pc, #12]	; (80164ec <rcl_get_zero_initialized_node+0x10>)
 80164de:	4603      	mov	r3, r0
 80164e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80164e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80164e8:	4618      	mov	r0, r3
 80164ea:	4770      	bx	lr
 80164ec:	0801fc10 	.word	0x0801fc10

080164f0 <rcl_node_init>:
 80164f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164f4:	b09b      	sub	sp, #108	; 0x6c
 80164f6:	4604      	mov	r4, r0
 80164f8:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 80164fc:	f04f 0c00 	mov.w	ip, #0
 8016500:	a815      	add	r0, sp, #84	; 0x54
 8016502:	460e      	mov	r6, r1
 8016504:	4615      	mov	r5, r2
 8016506:	461f      	mov	r7, r3
 8016508:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 801650c:	f003 fc72 	bl	8019df4 <rcl_guard_condition_get_default_options>
 8016510:	f1b8 0f00 	cmp.w	r8, #0
 8016514:	f000 80fd 	beq.w	8016712 <rcl_node_init+0x222>
 8016518:	f108 0b04 	add.w	fp, r8, #4
 801651c:	4658      	mov	r0, fp
 801651e:	f7f9 fad3 	bl	800fac8 <rcutils_allocator_is_valid>
 8016522:	2800      	cmp	r0, #0
 8016524:	f000 80f5 	beq.w	8016712 <rcl_node_init+0x222>
 8016528:	2e00      	cmp	r6, #0
 801652a:	f000 80f2 	beq.w	8016712 <rcl_node_init+0x222>
 801652e:	2d00      	cmp	r5, #0
 8016530:	f000 80ef 	beq.w	8016712 <rcl_node_init+0x222>
 8016534:	2c00      	cmp	r4, #0
 8016536:	f000 80ec 	beq.w	8016712 <rcl_node_init+0x222>
 801653a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801653e:	f1b9 0f00 	cmp.w	r9, #0
 8016542:	f040 8112 	bne.w	801676a <rcl_node_init+0x27a>
 8016546:	2f00      	cmp	r7, #0
 8016548:	f000 80e3 	beq.w	8016712 <rcl_node_init+0x222>
 801654c:	4638      	mov	r0, r7
 801654e:	f7ff fca3 	bl	8015e98 <rcl_context_is_valid>
 8016552:	4682      	mov	sl, r0
 8016554:	2800      	cmp	r0, #0
 8016556:	f000 80e2 	beq.w	801671e <rcl_node_init+0x22e>
 801655a:	464a      	mov	r2, r9
 801655c:	a914      	add	r1, sp, #80	; 0x50
 801655e:	4630      	mov	r0, r6
 8016560:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8016564:	f002 f878 	bl	8018658 <rmw_validate_node_name>
 8016568:	4681      	mov	r9, r0
 801656a:	2800      	cmp	r0, #0
 801656c:	f040 80d3 	bne.w	8016716 <rcl_node_init+0x226>
 8016570:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016572:	2800      	cmp	r0, #0
 8016574:	f040 8105 	bne.w	8016782 <rcl_node_init+0x292>
 8016578:	4628      	mov	r0, r5
 801657a:	f7e9 fe33 	bl	80001e4 <strlen>
 801657e:	2800      	cmp	r0, #0
 8016580:	f040 80d0 	bne.w	8016724 <rcl_node_init+0x234>
 8016584:	4d8e      	ldr	r5, [pc, #568]	; (80167c0 <rcl_node_init+0x2d0>)
 8016586:	a914      	add	r1, sp, #80	; 0x50
 8016588:	2200      	movs	r2, #0
 801658a:	4628      	mov	r0, r5
 801658c:	f002 f846 	bl	801861c <rmw_validate_namespace>
 8016590:	4681      	mov	r9, r0
 8016592:	2800      	cmp	r0, #0
 8016594:	f040 80bf 	bne.w	8016716 <rcl_node_init+0x226>
 8016598:	4682      	mov	sl, r0
 801659a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801659c:	2b00      	cmp	r3, #0
 801659e:	f040 80f5 	bne.w	801678c <rcl_node_init+0x29c>
 80165a2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80165a6:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80165aa:	9307      	str	r3, [sp, #28]
 80165ac:	2030      	movs	r0, #48	; 0x30
 80165ae:	4790      	blx	r2
 80165b0:	4681      	mov	r9, r0
 80165b2:	6060      	str	r0, [r4, #4]
 80165b4:	2800      	cmp	r0, #0
 80165b6:	f000 80de 	beq.w	8016776 <rcl_node_init+0x286>
 80165ba:	9b07      	ldr	r3, [sp, #28]
 80165bc:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80165c0:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80165c4:	a80a      	add	r0, sp, #40	; 0x28
 80165c6:	f7f8 fa99 	bl	800eafc <rcl_node_get_default_options>
 80165ca:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80165ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80165d2:	46cc      	mov	ip, r9
 80165d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80165d8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80165dc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80165e0:	6861      	ldr	r1, [r4, #4]
 80165e2:	6027      	str	r7, [r4, #0]
 80165e4:	4640      	mov	r0, r8
 80165e6:	f7f8 faa5 	bl	800eb34 <rcl_node_options_copy>
 80165ea:	2800      	cmp	r0, #0
 80165ec:	d167      	bne.n	80166be <rcl_node_init+0x1ce>
 80165ee:	4628      	mov	r0, r5
 80165f0:	f7e9 fdf8 	bl	80001e4 <strlen>
 80165f4:	4428      	add	r0, r5
 80165f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80165fa:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80165fe:	2b2f      	cmp	r3, #47	; 0x2f
 8016600:	bf08      	it	eq
 8016602:	4970      	ldreq	r1, [pc, #448]	; (80167c4 <rcl_node_init+0x2d4>)
 8016604:	f8db 3010 	ldr.w	r3, [fp, #16]
 8016608:	bf18      	it	ne
 801660a:	496f      	ldrne	r1, [pc, #444]	; (80167c8 <rcl_node_init+0x2d8>)
 801660c:	9604      	str	r6, [sp, #16]
 801660e:	e9cd 1502 	strd	r1, r5, [sp, #8]
 8016612:	e9cd 3200 	strd	r3, r2, [sp]
 8016616:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 801661a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801661e:	f001 fe3f 	bl	80182a0 <rcutils_format_string_limit>
 8016622:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 8016626:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801662a:	f8d9 3000 	ldr.w	r3, [r9]
 801662e:	9313      	str	r3, [sp, #76]	; 0x4c
 8016630:	1c59      	adds	r1, r3, #1
 8016632:	f000 80b7 	beq.w	80167a4 <rcl_node_init+0x2b4>
 8016636:	683a      	ldr	r2, [r7, #0]
 8016638:	f8c9 301c 	str.w	r3, [r9, #28]
 801663c:	6952      	ldr	r2, [r2, #20]
 801663e:	6821      	ldr	r1, [r4, #0]
 8016640:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8016644:	6808      	ldr	r0, [r1, #0]
 8016646:	f1a2 0201 	sub.w	r2, r2, #1
 801664a:	fab2 f282 	clz	r2, r2
 801664e:	0952      	lsrs	r2, r2, #5
 8016650:	9200      	str	r2, [sp, #0]
 8016652:	4631      	mov	r1, r6
 8016654:	3028      	adds	r0, #40	; 0x28
 8016656:	462a      	mov	r2, r5
 8016658:	f7fa f83a 	bl	80106d0 <rmw_create_node>
 801665c:	6863      	ldr	r3, [r4, #4]
 801665e:	f8c9 0020 	str.w	r0, [r9, #32]
 8016662:	6a18      	ldr	r0, [r3, #32]
 8016664:	b368      	cbz	r0, 80166c2 <rcl_node_init+0x1d2>
 8016666:	f7fa f8bf 	bl	80107e8 <rmw_node_get_graph_guard_condition>
 801666a:	4681      	mov	r9, r0
 801666c:	b338      	cbz	r0, 80166be <rcl_node_init+0x1ce>
 801666e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016672:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8016676:	6866      	ldr	r6, [r4, #4]
 8016678:	2008      	movs	r0, #8
 801667a:	4798      	blx	r3
 801667c:	6863      	ldr	r3, [r4, #4]
 801667e:	6270      	str	r0, [r6, #36]	; 0x24
 8016680:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8016682:	b1f6      	cbz	r6, 80166c2 <rcl_node_init+0x1d2>
 8016684:	a808      	add	r0, sp, #32
 8016686:	f003 fad3 	bl	8019c30 <rcl_get_zero_initialized_guard_condition>
 801668a:	a808      	add	r0, sp, #32
 801668c:	c803      	ldmia	r0, {r0, r1}
 801668e:	e886 0003 	stmia.w	r6, {r0, r1}
 8016692:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8016696:	ae15      	add	r6, sp, #84	; 0x54
 8016698:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801669a:	f8db 3000 	ldr.w	r3, [fp]
 801669e:	6033      	str	r3, [r6, #0]
 80166a0:	ab1a      	add	r3, sp, #104	; 0x68
 80166a2:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80166a6:	6866      	ldr	r6, [r4, #4]
 80166a8:	6a76      	ldr	r6, [r6, #36]	; 0x24
 80166aa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80166ae:	4649      	mov	r1, r9
 80166b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80166b2:	4630      	mov	r0, r6
 80166b4:	463a      	mov	r2, r7
 80166b6:	f003 fb1f 	bl	8019cf8 <rcl_guard_condition_init_from_rmw>
 80166ba:	4681      	mov	r9, r0
 80166bc:	b328      	cbz	r0, 801670a <rcl_node_init+0x21a>
 80166be:	6863      	ldr	r3, [r4, #4]
 80166c0:	b1f3      	cbz	r3, 8016700 <rcl_node_init+0x210>
 80166c2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80166c4:	b128      	cbz	r0, 80166d2 <rcl_node_init+0x1e2>
 80166c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80166ca:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80166ce:	4798      	blx	r3
 80166d0:	6863      	ldr	r3, [r4, #4]
 80166d2:	6a18      	ldr	r0, [r3, #32]
 80166d4:	b110      	cbz	r0, 80166dc <rcl_node_init+0x1ec>
 80166d6:	f7fa f813 	bl	8010700 <rmw_destroy_node>
 80166da:	6863      	ldr	r3, [r4, #4]
 80166dc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80166de:	b148      	cbz	r0, 80166f4 <rcl_node_init+0x204>
 80166e0:	f003 fb62 	bl	8019da8 <rcl_guard_condition_fini>
 80166e4:	6862      	ldr	r2, [r4, #4]
 80166e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80166ea:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80166ec:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80166f0:	4798      	blx	r3
 80166f2:	6863      	ldr	r3, [r4, #4]
 80166f4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80166f8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80166fc:	4618      	mov	r0, r3
 80166fe:	4790      	blx	r2
 8016700:	2300      	movs	r3, #0
 8016702:	e9c4 3300 	strd	r3, r3, [r4]
 8016706:	f04f 0901 	mov.w	r9, #1
 801670a:	f1ba 0f00 	cmp.w	sl, #0
 801670e:	d125      	bne.n	801675c <rcl_node_init+0x26c>
 8016710:	e001      	b.n	8016716 <rcl_node_init+0x226>
 8016712:	f04f 090b 	mov.w	r9, #11
 8016716:	4648      	mov	r0, r9
 8016718:	b01b      	add	sp, #108	; 0x6c
 801671a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801671e:	f04f 0965 	mov.w	r9, #101	; 0x65
 8016722:	e7f8      	b.n	8016716 <rcl_node_init+0x226>
 8016724:	782b      	ldrb	r3, [r5, #0]
 8016726:	2b2f      	cmp	r3, #47	; 0x2f
 8016728:	f43f af2d 	beq.w	8016586 <rcl_node_init+0x96>
 801672c:	4927      	ldr	r1, [pc, #156]	; (80167cc <rcl_node_init+0x2dc>)
 801672e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8016732:	9300      	str	r3, [sp, #0]
 8016734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016738:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801673c:	9503      	str	r5, [sp, #12]
 801673e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8016742:	f001 fdad 	bl	80182a0 <rcutils_format_string_limit>
 8016746:	4605      	mov	r5, r0
 8016748:	b348      	cbz	r0, 801679e <rcl_node_init+0x2ae>
 801674a:	2200      	movs	r2, #0
 801674c:	a914      	add	r1, sp, #80	; 0x50
 801674e:	9214      	str	r2, [sp, #80]	; 0x50
 8016750:	f001 ff64 	bl	801861c <rmw_validate_namespace>
 8016754:	4681      	mov	r9, r0
 8016756:	2800      	cmp	r0, #0
 8016758:	f43f af1f 	beq.w	801659a <rcl_node_init+0xaa>
 801675c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016760:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8016764:	4628      	mov	r0, r5
 8016766:	4798      	blx	r3
 8016768:	e7d5      	b.n	8016716 <rcl_node_init+0x226>
 801676a:	f04f 0964 	mov.w	r9, #100	; 0x64
 801676e:	4648      	mov	r0, r9
 8016770:	b01b      	add	sp, #108	; 0x6c
 8016772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016776:	f04f 090a 	mov.w	r9, #10
 801677a:	f1ba 0f00 	cmp.w	sl, #0
 801677e:	d1ed      	bne.n	801675c <rcl_node_init+0x26c>
 8016780:	e7c9      	b.n	8016716 <rcl_node_init+0x226>
 8016782:	f001 ffbb 	bl	80186fc <rmw_node_name_validation_result_string>
 8016786:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 801678a:	e7c4      	b.n	8016716 <rcl_node_init+0x226>
 801678c:	4618      	mov	r0, r3
 801678e:	f001 ff57 	bl	8018640 <rmw_namespace_validation_result_string>
 8016792:	f04f 09ca 	mov.w	r9, #202	; 0xca
 8016796:	f1ba 0f00 	cmp.w	sl, #0
 801679a:	d1df      	bne.n	801675c <rcl_node_init+0x26c>
 801679c:	e7bb      	b.n	8016716 <rcl_node_init+0x226>
 801679e:	f04f 090a 	mov.w	r9, #10
 80167a2:	e7b8      	b.n	8016716 <rcl_node_init+0x226>
 80167a4:	a813      	add	r0, sp, #76	; 0x4c
 80167a6:	f003 fa0f 	bl	8019bc8 <rcl_get_default_domain_id>
 80167aa:	2800      	cmp	r0, #0
 80167ac:	d187      	bne.n	80166be <rcl_node_init+0x1ce>
 80167ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80167b0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80167b4:	1c5a      	adds	r2, r3, #1
 80167b6:	bf04      	itt	eq
 80167b8:	9013      	streq	r0, [sp, #76]	; 0x4c
 80167ba:	4603      	moveq	r3, r0
 80167bc:	e73b      	b.n	8016636 <rcl_node_init+0x146>
 80167be:	bf00      	nop
 80167c0:	0801f8d0 	.word	0x0801f8d0
 80167c4:	0801f91c 	.word	0x0801f91c
 80167c8:	0801f8d4 	.word	0x0801f8d4
 80167cc:	0801fc0c 	.word	0x0801fc0c

080167d0 <rcl_node_is_valid>:
 80167d0:	b130      	cbz	r0, 80167e0 <rcl_node_is_valid+0x10>
 80167d2:	6843      	ldr	r3, [r0, #4]
 80167d4:	b123      	cbz	r3, 80167e0 <rcl_node_is_valid+0x10>
 80167d6:	6a1b      	ldr	r3, [r3, #32]
 80167d8:	b113      	cbz	r3, 80167e0 <rcl_node_is_valid+0x10>
 80167da:	6800      	ldr	r0, [r0, #0]
 80167dc:	f7ff bb5c 	b.w	8015e98 <rcl_context_is_valid>
 80167e0:	2000      	movs	r0, #0
 80167e2:	4770      	bx	lr

080167e4 <rcl_node_get_name>:
 80167e4:	b120      	cbz	r0, 80167f0 <rcl_node_get_name+0xc>
 80167e6:	6840      	ldr	r0, [r0, #4]
 80167e8:	b110      	cbz	r0, 80167f0 <rcl_node_get_name+0xc>
 80167ea:	6a00      	ldr	r0, [r0, #32]
 80167ec:	b100      	cbz	r0, 80167f0 <rcl_node_get_name+0xc>
 80167ee:	6880      	ldr	r0, [r0, #8]
 80167f0:	4770      	bx	lr
 80167f2:	bf00      	nop

080167f4 <rcl_node_get_namespace>:
 80167f4:	b120      	cbz	r0, 8016800 <rcl_node_get_namespace+0xc>
 80167f6:	6840      	ldr	r0, [r0, #4]
 80167f8:	b110      	cbz	r0, 8016800 <rcl_node_get_namespace+0xc>
 80167fa:	6a00      	ldr	r0, [r0, #32]
 80167fc:	b100      	cbz	r0, 8016800 <rcl_node_get_namespace+0xc>
 80167fe:	68c0      	ldr	r0, [r0, #12]
 8016800:	4770      	bx	lr
 8016802:	bf00      	nop

08016804 <rcl_node_get_options>:
 8016804:	b128      	cbz	r0, 8016812 <rcl_node_get_options+0xe>
 8016806:	6840      	ldr	r0, [r0, #4]
 8016808:	b118      	cbz	r0, 8016812 <rcl_node_get_options+0xe>
 801680a:	6a03      	ldr	r3, [r0, #32]
 801680c:	2b00      	cmp	r3, #0
 801680e:	bf08      	it	eq
 8016810:	2000      	moveq	r0, #0
 8016812:	4770      	bx	lr

08016814 <rcl_node_get_rmw_handle>:
 8016814:	b110      	cbz	r0, 801681c <rcl_node_get_rmw_handle+0x8>
 8016816:	6840      	ldr	r0, [r0, #4]
 8016818:	b100      	cbz	r0, 801681c <rcl_node_get_rmw_handle+0x8>
 801681a:	6a00      	ldr	r0, [r0, #32]
 801681c:	4770      	bx	lr
 801681e:	bf00      	nop

08016820 <exact_match_lookup>:
 8016820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016822:	f102 0708 	add.w	r7, r2, #8
 8016826:	460b      	mov	r3, r1
 8016828:	4614      	mov	r4, r2
 801682a:	4606      	mov	r6, r0
 801682c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016830:	b085      	sub	sp, #20
 8016832:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016836:	4618      	mov	r0, r3
 8016838:	4918      	ldr	r1, [pc, #96]	; (801689c <exact_match_lookup+0x7c>)
 801683a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801683e:	f001 fd21 	bl	8018284 <rcutils_join_path>
 8016842:	7833      	ldrb	r3, [r6, #0]
 8016844:	2b2f      	cmp	r3, #47	; 0x2f
 8016846:	4605      	mov	r5, r0
 8016848:	d021      	beq.n	801688e <exact_match_lookup+0x6e>
 801684a:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 801684e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016852:	1c70      	adds	r0, r6, #1
 8016854:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016858:	f001 fd1a 	bl	8018290 <rcutils_to_native_path>
 801685c:	4606      	mov	r6, r0
 801685e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016862:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016866:	4631      	mov	r1, r6
 8016868:	e894 000c 	ldmia.w	r4, {r2, r3}
 801686c:	4628      	mov	r0, r5
 801686e:	f001 fd09 	bl	8018284 <rcutils_join_path>
 8016872:	6862      	ldr	r2, [r4, #4]
 8016874:	6921      	ldr	r1, [r4, #16]
 8016876:	4603      	mov	r3, r0
 8016878:	4630      	mov	r0, r6
 801687a:	461e      	mov	r6, r3
 801687c:	4790      	blx	r2
 801687e:	4628      	mov	r0, r5
 8016880:	6863      	ldr	r3, [r4, #4]
 8016882:	6921      	ldr	r1, [r4, #16]
 8016884:	4798      	blx	r3
 8016886:	4635      	mov	r5, r6
 8016888:	4628      	mov	r0, r5
 801688a:	b005      	add	sp, #20
 801688c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801688e:	7873      	ldrb	r3, [r6, #1]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d1da      	bne.n	801684a <exact_match_lookup+0x2a>
 8016894:	4628      	mov	r0, r5
 8016896:	b005      	add	sp, #20
 8016898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801689a:	bf00      	nop
 801689c:	0801fc54 	.word	0x0801fc54

080168a0 <rcl_get_secure_root>:
 80168a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80168a4:	b085      	sub	sp, #20
 80168a6:	b168      	cbz	r0, 80168c4 <rcl_get_secure_root+0x24>
 80168a8:	4607      	mov	r7, r0
 80168aa:	4608      	mov	r0, r1
 80168ac:	460c      	mov	r4, r1
 80168ae:	f7f9 f90b 	bl	800fac8 <rcutils_allocator_is_valid>
 80168b2:	b138      	cbz	r0, 80168c4 <rcl_get_secure_root+0x24>
 80168b4:	2300      	movs	r3, #0
 80168b6:	482d      	ldr	r0, [pc, #180]	; (801696c <rcl_get_secure_root+0xcc>)
 80168b8:	9303      	str	r3, [sp, #12]
 80168ba:	a903      	add	r1, sp, #12
 80168bc:	f001 fd2a 	bl	8018314 <rcutils_get_env>
 80168c0:	4605      	mov	r5, r0
 80168c2:	b120      	cbz	r0, 80168ce <rcl_get_secure_root+0x2e>
 80168c4:	2500      	movs	r5, #0
 80168c6:	4628      	mov	r0, r5
 80168c8:	b005      	add	sp, #20
 80168ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168ce:	9b03      	ldr	r3, [sp, #12]
 80168d0:	781a      	ldrb	r2, [r3, #0]
 80168d2:	2a00      	cmp	r2, #0
 80168d4:	d0f6      	beq.n	80168c4 <rcl_get_secure_root+0x24>
 80168d6:	f104 090c 	add.w	r9, r4, #12
 80168da:	e899 0003 	ldmia.w	r9, {r0, r1}
 80168de:	e88d 0003 	stmia.w	sp, {r0, r1}
 80168e2:	4618      	mov	r0, r3
 80168e4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80168e8:	f001 fe04 	bl	80184f4 <rcutils_strdup>
 80168ec:	4680      	mov	r8, r0
 80168ee:	2800      	cmp	r0, #0
 80168f0:	d0e8      	beq.n	80168c4 <rcl_get_secure_root+0x24>
 80168f2:	481f      	ldr	r0, [pc, #124]	; (8016970 <rcl_get_secure_root+0xd0>)
 80168f4:	9503      	str	r5, [sp, #12]
 80168f6:	a903      	add	r1, sp, #12
 80168f8:	f001 fd0c 	bl	8018314 <rcutils_get_env>
 80168fc:	b160      	cbz	r0, 8016918 <rcl_get_secure_root+0x78>
 80168fe:	2600      	movs	r6, #0
 8016900:	6863      	ldr	r3, [r4, #4]
 8016902:	6921      	ldr	r1, [r4, #16]
 8016904:	4630      	mov	r0, r6
 8016906:	4798      	blx	r3
 8016908:	4640      	mov	r0, r8
 801690a:	6863      	ldr	r3, [r4, #4]
 801690c:	6921      	ldr	r1, [r4, #16]
 801690e:	4798      	blx	r3
 8016910:	4628      	mov	r0, r5
 8016912:	b005      	add	sp, #20
 8016914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016918:	9b03      	ldr	r3, [sp, #12]
 801691a:	781e      	ldrb	r6, [r3, #0]
 801691c:	b1f6      	cbz	r6, 801695c <rcl_get_secure_root+0xbc>
 801691e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016922:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016926:	4618      	mov	r0, r3
 8016928:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801692c:	f001 fde2 	bl	80184f4 <rcutils_strdup>
 8016930:	4606      	mov	r6, r0
 8016932:	2800      	cmp	r0, #0
 8016934:	d0e3      	beq.n	80168fe <rcl_get_secure_root+0x5e>
 8016936:	4622      	mov	r2, r4
 8016938:	4641      	mov	r1, r8
 801693a:	f7ff ff71 	bl	8016820 <exact_match_lookup>
 801693e:	4605      	mov	r5, r0
 8016940:	2d00      	cmp	r5, #0
 8016942:	d0dd      	beq.n	8016900 <rcl_get_secure_root+0x60>
 8016944:	4628      	mov	r0, r5
 8016946:	f001 fc9b 	bl	8018280 <rcutils_is_directory>
 801694a:	4607      	mov	r7, r0
 801694c:	2800      	cmp	r0, #0
 801694e:	d1d7      	bne.n	8016900 <rcl_get_secure_root+0x60>
 8016950:	4628      	mov	r0, r5
 8016952:	6863      	ldr	r3, [r4, #4]
 8016954:	6921      	ldr	r1, [r4, #16]
 8016956:	4798      	blx	r3
 8016958:	463d      	mov	r5, r7
 801695a:	e7d1      	b.n	8016900 <rcl_get_secure_root+0x60>
 801695c:	4638      	mov	r0, r7
 801695e:	4622      	mov	r2, r4
 8016960:	4641      	mov	r1, r8
 8016962:	f7ff ff5d 	bl	8016820 <exact_match_lookup>
 8016966:	4605      	mov	r5, r0
 8016968:	e7ea      	b.n	8016940 <rcl_get_secure_root+0xa0>
 801696a:	bf00      	nop
 801696c:	0801fc60 	.word	0x0801fc60
 8016970:	0801fc78 	.word	0x0801fc78

08016974 <rcl_get_security_options_from_environment>:
 8016974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016978:	b082      	sub	sp, #8
 801697a:	4607      	mov	r7, r0
 801697c:	4688      	mov	r8, r1
 801697e:	2400      	movs	r4, #0
 8016980:	481d      	ldr	r0, [pc, #116]	; (80169f8 <rcl_get_security_options_from_environment+0x84>)
 8016982:	9401      	str	r4, [sp, #4]
 8016984:	a901      	add	r1, sp, #4
 8016986:	4616      	mov	r6, r2
 8016988:	f001 fcc4 	bl	8018314 <rcutils_get_env>
 801698c:	b120      	cbz	r0, 8016998 <rcl_get_security_options_from_environment+0x24>
 801698e:	2501      	movs	r5, #1
 8016990:	4628      	mov	r0, r5
 8016992:	b002      	add	sp, #8
 8016994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016998:	4918      	ldr	r1, [pc, #96]	; (80169fc <rcl_get_security_options_from_environment+0x88>)
 801699a:	4604      	mov	r4, r0
 801699c:	9801      	ldr	r0, [sp, #4]
 801699e:	f7e9 fc17 	bl	80001d0 <strcmp>
 80169a2:	4605      	mov	r5, r0
 80169a4:	b9c8      	cbnz	r0, 80169da <rcl_get_security_options_from_environment+0x66>
 80169a6:	9001      	str	r0, [sp, #4]
 80169a8:	b1ee      	cbz	r6, 80169e6 <rcl_get_security_options_from_environment+0x72>
 80169aa:	4815      	ldr	r0, [pc, #84]	; (8016a00 <rcl_get_security_options_from_environment+0x8c>)
 80169ac:	a901      	add	r1, sp, #4
 80169ae:	f001 fcb1 	bl	8018314 <rcutils_get_env>
 80169b2:	2800      	cmp	r0, #0
 80169b4:	d1eb      	bne.n	801698e <rcl_get_security_options_from_environment+0x1a>
 80169b6:	4913      	ldr	r1, [pc, #76]	; (8016a04 <rcl_get_security_options_from_environment+0x90>)
 80169b8:	9801      	ldr	r0, [sp, #4]
 80169ba:	f7e9 fc09 	bl	80001d0 <strcmp>
 80169be:	fab0 f080 	clz	r0, r0
 80169c2:	0940      	lsrs	r0, r0, #5
 80169c4:	7030      	strb	r0, [r6, #0]
 80169c6:	4641      	mov	r1, r8
 80169c8:	4638      	mov	r0, r7
 80169ca:	f7ff ff69 	bl	80168a0 <rcl_get_secure_root>
 80169ce:	b160      	cbz	r0, 80169ea <rcl_get_security_options_from_environment+0x76>
 80169d0:	6070      	str	r0, [r6, #4]
 80169d2:	4628      	mov	r0, r5
 80169d4:	b002      	add	sp, #8
 80169d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169da:	4625      	mov	r5, r4
 80169dc:	4628      	mov	r0, r5
 80169de:	7034      	strb	r4, [r6, #0]
 80169e0:	b002      	add	sp, #8
 80169e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169e6:	250b      	movs	r5, #11
 80169e8:	e7d2      	b.n	8016990 <rcl_get_security_options_from_environment+0x1c>
 80169ea:	7835      	ldrb	r5, [r6, #0]
 80169ec:	f1a5 0501 	sub.w	r5, r5, #1
 80169f0:	fab5 f585 	clz	r5, r5
 80169f4:	096d      	lsrs	r5, r5, #5
 80169f6:	e7cb      	b.n	8016990 <rcl_get_security_options_from_environment+0x1c>
 80169f8:	0801fc18 	.word	0x0801fc18
 80169fc:	0801fc2c 	.word	0x0801fc2c
 8016a00:	0801fc34 	.word	0x0801fc34
 8016a04:	0801fc4c 	.word	0x0801fc4c

08016a08 <rcl_service_get_rmw_handle>:
 8016a08:	b110      	cbz	r0, 8016a10 <rcl_service_get_rmw_handle+0x8>
 8016a0a:	6800      	ldr	r0, [r0, #0]
 8016a0c:	b100      	cbz	r0, 8016a10 <rcl_service_get_rmw_handle+0x8>
 8016a0e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8016a10:	4770      	bx	lr
 8016a12:	bf00      	nop

08016a14 <rcl_take_request>:
 8016a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a16:	460e      	mov	r6, r1
 8016a18:	460c      	mov	r4, r1
 8016a1a:	4607      	mov	r7, r0
 8016a1c:	4694      	mov	ip, r2
 8016a1e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016a20:	b08d      	sub	sp, #52	; 0x34
 8016a22:	ad06      	add	r5, sp, #24
 8016a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016a26:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016a2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8016a2e:	b1e7      	cbz	r7, 8016a6a <rcl_take_request+0x56>
 8016a30:	683b      	ldr	r3, [r7, #0]
 8016a32:	b1d3      	cbz	r3, 8016a6a <rcl_take_request+0x56>
 8016a34:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8016a36:	b1c0      	cbz	r0, 8016a6a <rcl_take_request+0x56>
 8016a38:	4662      	mov	r2, ip
 8016a3a:	b30a      	cbz	r2, 8016a80 <rcl_take_request+0x6c>
 8016a3c:	2500      	movs	r5, #0
 8016a3e:	f10d 0307 	add.w	r3, sp, #7
 8016a42:	a902      	add	r1, sp, #8
 8016a44:	f88d 5007 	strb.w	r5, [sp, #7]
 8016a48:	f002 f816 	bl	8018a78 <rmw_take_request>
 8016a4c:	4606      	mov	r6, r0
 8016a4e:	b178      	cbz	r0, 8016a70 <rcl_take_request+0x5c>
 8016a50:	280a      	cmp	r0, #10
 8016a52:	bf18      	it	ne
 8016a54:	2601      	movne	r6, #1
 8016a56:	ad06      	add	r5, sp, #24
 8016a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016a5c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016a60:	e884 0003 	stmia.w	r4, {r0, r1}
 8016a64:	4630      	mov	r0, r6
 8016a66:	b00d      	add	sp, #52	; 0x34
 8016a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a6a:	f44f 7616 	mov.w	r6, #600	; 0x258
 8016a6e:	e7f2      	b.n	8016a56 <rcl_take_request+0x42>
 8016a70:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016a74:	f240 2359 	movw	r3, #601	; 0x259
 8016a78:	2a00      	cmp	r2, #0
 8016a7a:	bf08      	it	eq
 8016a7c:	461e      	moveq	r6, r3
 8016a7e:	e7ea      	b.n	8016a56 <rcl_take_request+0x42>
 8016a80:	260b      	movs	r6, #11
 8016a82:	e7e8      	b.n	8016a56 <rcl_take_request+0x42>

08016a84 <rcl_send_response>:
 8016a84:	b160      	cbz	r0, 8016aa0 <rcl_send_response+0x1c>
 8016a86:	6800      	ldr	r0, [r0, #0]
 8016a88:	b150      	cbz	r0, 8016aa0 <rcl_send_response+0x1c>
 8016a8a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8016a8c:	b140      	cbz	r0, 8016aa0 <rcl_send_response+0x1c>
 8016a8e:	b151      	cbz	r1, 8016aa6 <rcl_send_response+0x22>
 8016a90:	b510      	push	{r4, lr}
 8016a92:	b152      	cbz	r2, 8016aaa <rcl_send_response+0x26>
 8016a94:	f002 f84a 	bl	8018b2c <rmw_send_response>
 8016a98:	3800      	subs	r0, #0
 8016a9a:	bf18      	it	ne
 8016a9c:	2001      	movne	r0, #1
 8016a9e:	bd10      	pop	{r4, pc}
 8016aa0:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016aa4:	4770      	bx	lr
 8016aa6:	200b      	movs	r0, #11
 8016aa8:	4770      	bx	lr
 8016aaa:	200b      	movs	r0, #11
 8016aac:	bd10      	pop	{r4, pc}
 8016aae:	bf00      	nop

08016ab0 <rcl_get_system_time>:
 8016ab0:	4608      	mov	r0, r1
 8016ab2:	f7f9 ba49 	b.w	800ff48 <rcutils_system_time_now>
 8016ab6:	bf00      	nop

08016ab8 <rcl_get_steady_time>:
 8016ab8:	4608      	mov	r0, r1
 8016aba:	f7f9 ba6d 	b.w	800ff98 <rcutils_steady_time_now>
 8016abe:	bf00      	nop

08016ac0 <rcl_get_ros_time>:
 8016ac0:	7a03      	ldrb	r3, [r0, #8]
 8016ac2:	b510      	push	{r4, lr}
 8016ac4:	460c      	mov	r4, r1
 8016ac6:	b133      	cbz	r3, 8016ad6 <rcl_get_ros_time+0x16>
 8016ac8:	2105      	movs	r1, #5
 8016aca:	f001 fafd 	bl	80180c8 <__atomic_load_8>
 8016ace:	e9c4 0100 	strd	r0, r1, [r4]
 8016ad2:	2000      	movs	r0, #0
 8016ad4:	bd10      	pop	{r4, pc}
 8016ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ada:	4608      	mov	r0, r1
 8016adc:	f7f9 ba34 	b.w	800ff48 <rcutils_system_time_now>

08016ae0 <rcl_clock_init>:
 8016ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ae4:	4606      	mov	r6, r0
 8016ae6:	4610      	mov	r0, r2
 8016ae8:	4614      	mov	r4, r2
 8016aea:	460d      	mov	r5, r1
 8016aec:	f7f8 ffec 	bl	800fac8 <rcutils_allocator_is_valid>
 8016af0:	b128      	cbz	r0, 8016afe <rcl_clock_init+0x1e>
 8016af2:	2e03      	cmp	r6, #3
 8016af4:	d803      	bhi.n	8016afe <rcl_clock_init+0x1e>
 8016af6:	e8df f006 	tbb	[pc, r6]
 8016afa:	2c1b      	.short	0x2c1b
 8016afc:	0554      	.short	0x0554
 8016afe:	200b      	movs	r0, #11
 8016b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b04:	2d00      	cmp	r5, #0
 8016b06:	d0fa      	beq.n	8016afe <rcl_clock_init+0x1e>
 8016b08:	2c00      	cmp	r4, #0
 8016b0a:	d0f8      	beq.n	8016afe <rcl_clock_init+0x1e>
 8016b0c:	2600      	movs	r6, #0
 8016b0e:	702e      	strb	r6, [r5, #0]
 8016b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016b12:	f105 0714 	add.w	r7, r5, #20
 8016b16:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8016b1a:	612e      	str	r6, [r5, #16]
 8016b1c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016b1e:	6823      	ldr	r3, [r4, #0]
 8016b20:	603b      	str	r3, [r7, #0]
 8016b22:	2303      	movs	r3, #3
 8016b24:	4a2b      	ldr	r2, [pc, #172]	; (8016bd4 <rcl_clock_init+0xf4>)
 8016b26:	702b      	strb	r3, [r5, #0]
 8016b28:	4630      	mov	r0, r6
 8016b2a:	60ea      	str	r2, [r5, #12]
 8016b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b30:	2d00      	cmp	r5, #0
 8016b32:	d0e4      	beq.n	8016afe <rcl_clock_init+0x1e>
 8016b34:	2600      	movs	r6, #0
 8016b36:	702e      	strb	r6, [r5, #0]
 8016b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016b3a:	f105 0714 	add.w	r7, r5, #20
 8016b3e:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8016b42:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8016b46:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016b48:	6823      	ldr	r3, [r4, #0]
 8016b4a:	603b      	str	r3, [r7, #0]
 8016b4c:	4630      	mov	r0, r6
 8016b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b52:	2d00      	cmp	r5, #0
 8016b54:	d0d3      	beq.n	8016afe <rcl_clock_init+0x1e>
 8016b56:	2c00      	cmp	r4, #0
 8016b58:	d0d1      	beq.n	8016afe <rcl_clock_init+0x1e>
 8016b5a:	2600      	movs	r6, #0
 8016b5c:	702e      	strb	r6, [r5, #0]
 8016b5e:	46a4      	mov	ip, r4
 8016b60:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016b64:	f105 0714 	add.w	r7, r5, #20
 8016b68:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8016b6c:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8016b70:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016b72:	f8dc 3000 	ldr.w	r3, [ip]
 8016b76:	603b      	str	r3, [r7, #0]
 8016b78:	6921      	ldr	r1, [r4, #16]
 8016b7a:	6823      	ldr	r3, [r4, #0]
 8016b7c:	2010      	movs	r0, #16
 8016b7e:	4798      	blx	r3
 8016b80:	4603      	mov	r3, r0
 8016b82:	6128      	str	r0, [r5, #16]
 8016b84:	b318      	cbz	r0, 8016bce <rcl_clock_init+0xee>
 8016b86:	f04f 0800 	mov.w	r8, #0
 8016b8a:	f04f 0900 	mov.w	r9, #0
 8016b8e:	7206      	strb	r6, [r0, #8]
 8016b90:	e9c3 8900 	strd	r8, r9, [r3]
 8016b94:	2301      	movs	r3, #1
 8016b96:	4a10      	ldr	r2, [pc, #64]	; (8016bd8 <rcl_clock_init+0xf8>)
 8016b98:	702b      	strb	r3, [r5, #0]
 8016b9a:	4630      	mov	r0, r6
 8016b9c:	60ea      	str	r2, [r5, #12]
 8016b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ba2:	2d00      	cmp	r5, #0
 8016ba4:	d0ab      	beq.n	8016afe <rcl_clock_init+0x1e>
 8016ba6:	2c00      	cmp	r4, #0
 8016ba8:	d0a9      	beq.n	8016afe <rcl_clock_init+0x1e>
 8016baa:	2600      	movs	r6, #0
 8016bac:	702e      	strb	r6, [r5, #0]
 8016bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016bb0:	f105 0714 	add.w	r7, r5, #20
 8016bb4:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8016bb8:	612e      	str	r6, [r5, #16]
 8016bba:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016bbc:	6823      	ldr	r3, [r4, #0]
 8016bbe:	603b      	str	r3, [r7, #0]
 8016bc0:	2302      	movs	r3, #2
 8016bc2:	4a06      	ldr	r2, [pc, #24]	; (8016bdc <rcl_clock_init+0xfc>)
 8016bc4:	702b      	strb	r3, [r5, #0]
 8016bc6:	4630      	mov	r0, r6
 8016bc8:	60ea      	str	r2, [r5, #12]
 8016bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bce:	200a      	movs	r0, #10
 8016bd0:	e796      	b.n	8016b00 <rcl_clock_init+0x20>
 8016bd2:	bf00      	nop
 8016bd4:	08016ab9 	.word	0x08016ab9
 8016bd8:	08016ac1 	.word	0x08016ac1
 8016bdc:	08016ab1 	.word	0x08016ab1

08016be0 <rcl_clock_get_now>:
 8016be0:	b140      	cbz	r0, 8016bf4 <rcl_clock_get_now+0x14>
 8016be2:	b139      	cbz	r1, 8016bf4 <rcl_clock_get_now+0x14>
 8016be4:	7803      	ldrb	r3, [r0, #0]
 8016be6:	b11b      	cbz	r3, 8016bf0 <rcl_clock_get_now+0x10>
 8016be8:	68c3      	ldr	r3, [r0, #12]
 8016bea:	b10b      	cbz	r3, 8016bf0 <rcl_clock_get_now+0x10>
 8016bec:	6900      	ldr	r0, [r0, #16]
 8016bee:	4718      	bx	r3
 8016bf0:	2001      	movs	r0, #1
 8016bf2:	4770      	bx	lr
 8016bf4:	200b      	movs	r0, #11
 8016bf6:	4770      	bx	lr

08016bf8 <rcl_clock_add_jump_callback>:
 8016bf8:	b082      	sub	sp, #8
 8016bfa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bfe:	a908      	add	r1, sp, #32
 8016c00:	e881 000c 	stmia.w	r1, {r2, r3}
 8016c04:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	; 0x38
 8016c08:	b340      	cbz	r0, 8016c5c <rcl_clock_add_jump_callback+0x64>
 8016c0a:	4604      	mov	r4, r0
 8016c0c:	3014      	adds	r0, #20
 8016c0e:	f7f8 ff5b 	bl	800fac8 <rcutils_allocator_is_valid>
 8016c12:	b318      	cbz	r0, 8016c5c <rcl_clock_add_jump_callback+0x64>
 8016c14:	b315      	cbz	r5, 8016c5c <rcl_clock_add_jump_callback+0x64>
 8016c16:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016c1a:	2a00      	cmp	r2, #0
 8016c1c:	f173 0300 	sbcs.w	r3, r3, #0
 8016c20:	db1c      	blt.n	8016c5c <rcl_clock_add_jump_callback+0x64>
 8016c22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016c26:	2a01      	cmp	r2, #1
 8016c28:	f173 0300 	sbcs.w	r3, r3, #0
 8016c2c:	da16      	bge.n	8016c5c <rcl_clock_add_jump_callback+0x64>
 8016c2e:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8016c32:	2f00      	cmp	r7, #0
 8016c34:	d03e      	beq.n	8016cb4 <rcl_clock_add_jump_callback+0xbc>
 8016c36:	2300      	movs	r3, #0
 8016c38:	f100 0220 	add.w	r2, r0, #32
 8016c3c:	e003      	b.n	8016c46 <rcl_clock_add_jump_callback+0x4e>
 8016c3e:	42bb      	cmp	r3, r7
 8016c40:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8016c44:	d00f      	beq.n	8016c66 <rcl_clock_add_jump_callback+0x6e>
 8016c46:	f852 1c20 	ldr.w	r1, [r2, #-32]
 8016c4a:	42a9      	cmp	r1, r5
 8016c4c:	f103 0301 	add.w	r3, r3, #1
 8016c50:	d1f5      	bne.n	8016c3e <rcl_clock_add_jump_callback+0x46>
 8016c52:	6811      	ldr	r1, [r2, #0]
 8016c54:	42b1      	cmp	r1, r6
 8016c56:	d1f2      	bne.n	8016c3e <rcl_clock_add_jump_callback+0x46>
 8016c58:	2001      	movs	r0, #1
 8016c5a:	e000      	b.n	8016c5e <rcl_clock_add_jump_callback+0x66>
 8016c5c:	200b      	movs	r0, #11
 8016c5e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c62:	b002      	add	sp, #8
 8016c64:	4770      	bx	lr
 8016c66:	3301      	adds	r3, #1
 8016c68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016c6c:	00d9      	lsls	r1, r3, #3
 8016c6e:	69e3      	ldr	r3, [r4, #28]
 8016c70:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016c72:	4798      	blx	r3
 8016c74:	4684      	mov	ip, r0
 8016c76:	b1d8      	cbz	r0, 8016cb0 <rcl_clock_add_jump_callback+0xb8>
 8016c78:	af08      	add	r7, sp, #32
 8016c7a:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8016c7e:	6060      	str	r0, [r4, #4]
 8016c80:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016c82:	eb0e 098e 	add.w	r9, lr, lr, lsl #2
 8016c86:	eb0c 08c9 	add.w	r8, ip, r9, lsl #3
 8016c8a:	f84c 5039 	str.w	r5, [ip, r9, lsl #3]
 8016c8e:	f108 0508 	add.w	r5, r8, #8
 8016c92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016c94:	e897 0003 	ldmia.w	r7, {r0, r1}
 8016c98:	f10e 0301 	add.w	r3, lr, #1
 8016c9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8016ca0:	f8c8 6020 	str.w	r6, [r8, #32]
 8016ca4:	60a3      	str	r3, [r4, #8]
 8016ca6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016caa:	2000      	movs	r0, #0
 8016cac:	b002      	add	sp, #8
 8016cae:	4770      	bx	lr
 8016cb0:	200a      	movs	r0, #10
 8016cb2:	e7d4      	b.n	8016c5e <rcl_clock_add_jump_callback+0x66>
 8016cb4:	2128      	movs	r1, #40	; 0x28
 8016cb6:	e7da      	b.n	8016c6e <rcl_clock_add_jump_callback+0x76>

08016cb8 <rcl_clock_remove_jump_callback>:
 8016cb8:	2800      	cmp	r0, #0
 8016cba:	d057      	beq.n	8016d6c <rcl_clock_remove_jump_callback+0xb4>
 8016cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cc0:	4607      	mov	r7, r0
 8016cc2:	3014      	adds	r0, #20
 8016cc4:	460c      	mov	r4, r1
 8016cc6:	4615      	mov	r5, r2
 8016cc8:	f7f8 fefe 	bl	800fac8 <rcutils_allocator_is_valid>
 8016ccc:	2800      	cmp	r0, #0
 8016cce:	d03a      	beq.n	8016d46 <rcl_clock_remove_jump_callback+0x8e>
 8016cd0:	2c00      	cmp	r4, #0
 8016cd2:	d038      	beq.n	8016d46 <rcl_clock_remove_jump_callback+0x8e>
 8016cd4:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8016cd8:	f1b8 0f00 	cmp.w	r8, #0
 8016cdc:	d00c      	beq.n	8016cf8 <rcl_clock_remove_jump_callback+0x40>
 8016cde:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8016ce2:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
 8016ce6:	4676      	mov	r6, lr
 8016ce8:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
 8016cec:	6833      	ldr	r3, [r6, #0]
 8016cee:	42a3      	cmp	r3, r4
 8016cf0:	d005      	beq.n	8016cfe <rcl_clock_remove_jump_callback+0x46>
 8016cf2:	3628      	adds	r6, #40	; 0x28
 8016cf4:	45b4      	cmp	ip, r6
 8016cf6:	d1f9      	bne.n	8016cec <rcl_clock_remove_jump_callback+0x34>
 8016cf8:	2001      	movs	r0, #1
 8016cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cfe:	6a33      	ldr	r3, [r6, #32]
 8016d00:	3628      	adds	r6, #40	; 0x28
 8016d02:	4566      	cmp	r6, ip
 8016d04:	d02a      	beq.n	8016d5c <rcl_clock_remove_jump_callback+0xa4>
 8016d06:	42ab      	cmp	r3, r5
 8016d08:	d1f0      	bne.n	8016cec <rcl_clock_remove_jump_callback+0x34>
 8016d0a:	4635      	mov	r5, r6
 8016d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d0e:	f1a6 0428 	sub.w	r4, r6, #40	; 0x28
 8016d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d18:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016d1c:	3628      	adds	r6, #40	; 0x28
 8016d1e:	4566      	cmp	r6, ip
 8016d20:	e884 0003 	stmia.w	r4, {r0, r1}
 8016d24:	d1f1      	bne.n	8016d0a <rcl_clock_remove_jump_callback+0x52>
 8016d26:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8016d2a:	60bc      	str	r4, [r7, #8]
 8016d2c:	b174      	cbz	r4, 8016d4c <rcl_clock_remove_jump_callback+0x94>
 8016d2e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8016d32:	69fb      	ldr	r3, [r7, #28]
 8016d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d36:	00e1      	lsls	r1, r4, #3
 8016d38:	4670      	mov	r0, lr
 8016d3a:	4798      	blx	r3
 8016d3c:	b1c0      	cbz	r0, 8016d70 <rcl_clock_remove_jump_callback+0xb8>
 8016d3e:	6078      	str	r0, [r7, #4]
 8016d40:	2000      	movs	r0, #0
 8016d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d46:	200b      	movs	r0, #11
 8016d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d4c:	4670      	mov	r0, lr
 8016d4e:	69bb      	ldr	r3, [r7, #24]
 8016d50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016d52:	4798      	blx	r3
 8016d54:	607c      	str	r4, [r7, #4]
 8016d56:	4620      	mov	r0, r4
 8016d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d5c:	42ab      	cmp	r3, r5
 8016d5e:	d1cb      	bne.n	8016cf8 <rcl_clock_remove_jump_callback+0x40>
 8016d60:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8016d64:	60bc      	str	r4, [r7, #8]
 8016d66:	2c00      	cmp	r4, #0
 8016d68:	d1e1      	bne.n	8016d2e <rcl_clock_remove_jump_callback+0x76>
 8016d6a:	e7ef      	b.n	8016d4c <rcl_clock_remove_jump_callback+0x94>
 8016d6c:	200b      	movs	r0, #11
 8016d6e:	4770      	bx	lr
 8016d70:	200a      	movs	r0, #10
 8016d72:	e7e9      	b.n	8016d48 <rcl_clock_remove_jump_callback+0x90>

08016d74 <_rcl_timer_time_jump>:
 8016d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d78:	4682      	mov	sl, r0
 8016d7a:	b087      	sub	sp, #28
 8016d7c:	4614      	mov	r4, r2
 8016d7e:	b131      	cbz	r1, 8016d8e <_rcl_timer_time_jump+0x1a>
 8016d80:	7803      	ldrb	r3, [r0, #0]
 8016d82:	3b02      	subs	r3, #2
 8016d84:	2b01      	cmp	r3, #1
 8016d86:	d944      	bls.n	8016e12 <_rcl_timer_time_jump+0x9e>
 8016d88:	b007      	add	sp, #28
 8016d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d8e:	6813      	ldr	r3, [r2, #0]
 8016d90:	a904      	add	r1, sp, #16
 8016d92:	6818      	ldr	r0, [r3, #0]
 8016d94:	f7ff ff24 	bl	8016be0 <rcl_clock_get_now>
 8016d98:	2800      	cmp	r0, #0
 8016d9a:	d1f5      	bne.n	8016d88 <_rcl_timer_time_jump+0x14>
 8016d9c:	6820      	ldr	r0, [r4, #0]
 8016d9e:	2105      	movs	r1, #5
 8016da0:	3020      	adds	r0, #32
 8016da2:	f001 f991 	bl	80180c8 <__atomic_load_8>
 8016da6:	4602      	mov	r2, r0
 8016da8:	6820      	ldr	r0, [r4, #0]
 8016daa:	460b      	mov	r3, r1
 8016dac:	3028      	adds	r0, #40	; 0x28
 8016dae:	2105      	movs	r1, #5
 8016db0:	4690      	mov	r8, r2
 8016db2:	4699      	mov	r9, r3
 8016db4:	f001 f988 	bl	80180c8 <__atomic_load_8>
 8016db8:	4602      	mov	r2, r0
 8016dba:	6820      	ldr	r0, [r4, #0]
 8016dbc:	460b      	mov	r3, r1
 8016dbe:	3018      	adds	r0, #24
 8016dc0:	2105      	movs	r1, #5
 8016dc2:	461f      	mov	r7, r3
 8016dc4:	4616      	mov	r6, r2
 8016dc6:	f001 f97f 	bl	80180c8 <__atomic_load_8>
 8016dca:	f89a 3000 	ldrb.w	r3, [sl]
 8016dce:	9103      	str	r1, [sp, #12]
 8016dd0:	3b02      	subs	r3, #2
 8016dd2:	2b01      	cmp	r3, #1
 8016dd4:	4605      	mov	r5, r0
 8016dd6:	d93a      	bls.n	8016e4e <_rcl_timer_time_jump+0xda>
 8016dd8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016ddc:	45b2      	cmp	sl, r6
 8016dde:	eb7b 0307 	sbcs.w	r3, fp, r7
 8016de2:	da64      	bge.n	8016eae <_rcl_timer_time_jump+0x13a>
 8016de4:	45c2      	cmp	sl, r8
 8016de6:	eb7b 0309 	sbcs.w	r3, fp, r9
 8016dea:	dacd      	bge.n	8016d88 <_rcl_timer_time_jump+0x14>
 8016dec:	6820      	ldr	r0, [r4, #0]
 8016dee:	eb15 020a 	adds.w	r2, r5, sl
 8016df2:	f04f 0505 	mov.w	r5, #5
 8016df6:	eb41 030b 	adc.w	r3, r1, fp
 8016dfa:	3028      	adds	r0, #40	; 0x28
 8016dfc:	9500      	str	r5, [sp, #0]
 8016dfe:	f001 f997 	bl	8018130 <__atomic_store_8>
 8016e02:	6820      	ldr	r0, [r4, #0]
 8016e04:	9500      	str	r5, [sp, #0]
 8016e06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016e0a:	3020      	adds	r0, #32
 8016e0c:	f001 f990 	bl	8018130 <__atomic_store_8>
 8016e10:	e7ba      	b.n	8016d88 <_rcl_timer_time_jump+0x14>
 8016e12:	6813      	ldr	r3, [r2, #0]
 8016e14:	a904      	add	r1, sp, #16
 8016e16:	6818      	ldr	r0, [r3, #0]
 8016e18:	f7ff fee2 	bl	8016be0 <rcl_clock_get_now>
 8016e1c:	2800      	cmp	r0, #0
 8016e1e:	d1b3      	bne.n	8016d88 <_rcl_timer_time_jump+0x14>
 8016e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016e24:	4313      	orrs	r3, r2
 8016e26:	d0af      	beq.n	8016d88 <_rcl_timer_time_jump+0x14>
 8016e28:	6820      	ldr	r0, [r4, #0]
 8016e2a:	2105      	movs	r1, #5
 8016e2c:	3028      	adds	r0, #40	; 0x28
 8016e2e:	f001 f94b 	bl	80180c8 <__atomic_load_8>
 8016e32:	9a04      	ldr	r2, [sp, #16]
 8016e34:	6823      	ldr	r3, [r4, #0]
 8016e36:	9e05      	ldr	r6, [sp, #20]
 8016e38:	1a82      	subs	r2, r0, r2
 8016e3a:	f04f 0405 	mov.w	r4, #5
 8016e3e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8016e42:	9400      	str	r4, [sp, #0]
 8016e44:	eb61 0306 	sbc.w	r3, r1, r6
 8016e48:	f001 f972 	bl	8018130 <__atomic_store_8>
 8016e4c:	e79c      	b.n	8016d88 <_rcl_timer_time_jump+0x14>
 8016e4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016e52:	4313      	orrs	r3, r2
 8016e54:	d098      	beq.n	8016d88 <_rcl_timer_time_jump+0x14>
 8016e56:	6820      	ldr	r0, [r4, #0]
 8016e58:	f04f 0805 	mov.w	r8, #5
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	3030      	adds	r0, #48	; 0x30
 8016e60:	f8cd 8000 	str.w	r8, [sp]
 8016e64:	2200      	movs	r2, #0
 8016e66:	f001 f997 	bl	8018198 <__atomic_exchange_8>
 8016e6a:	4606      	mov	r6, r0
 8016e6c:	460f      	mov	r7, r1
 8016e6e:	ea56 0307 	orrs.w	r3, r6, r7
 8016e72:	d089      	beq.n	8016d88 <_rcl_timer_time_jump+0x14>
 8016e74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016e78:	1b92      	subs	r2, r2, r6
 8016e7a:	eb63 0301 	sbc.w	r3, r3, r1
 8016e7e:	9903      	ldr	r1, [sp, #12]
 8016e80:	6820      	ldr	r0, [r4, #0]
 8016e82:	f8cd 8000 	str.w	r8, [sp]
 8016e86:	1952      	adds	r2, r2, r5
 8016e88:	eb43 0101 	adc.w	r1, r3, r1
 8016e8c:	460b      	mov	r3, r1
 8016e8e:	3028      	adds	r0, #40	; 0x28
 8016e90:	f001 f94e 	bl	8018130 <__atomic_store_8>
 8016e94:	9a04      	ldr	r2, [sp, #16]
 8016e96:	6820      	ldr	r0, [r4, #0]
 8016e98:	9b05      	ldr	r3, [sp, #20]
 8016e9a:	f8cd 8000 	str.w	r8, [sp]
 8016e9e:	1b92      	subs	r2, r2, r6
 8016ea0:	f100 0020 	add.w	r0, r0, #32
 8016ea4:	eb63 0307 	sbc.w	r3, r3, r7
 8016ea8:	f001 f942 	bl	8018130 <__atomic_store_8>
 8016eac:	e76c      	b.n	8016d88 <_rcl_timer_time_jump+0x14>
 8016eae:	6820      	ldr	r0, [r4, #0]
 8016eb0:	3008      	adds	r0, #8
 8016eb2:	f002 ffb9 	bl	8019e28 <rcl_trigger_guard_condition>
 8016eb6:	e767      	b.n	8016d88 <_rcl_timer_time_jump+0x14>

08016eb8 <rcl_get_zero_initialized_timer>:
 8016eb8:	4b01      	ldr	r3, [pc, #4]	; (8016ec0 <rcl_get_zero_initialized_timer+0x8>)
 8016eba:	6818      	ldr	r0, [r3, #0]
 8016ebc:	4770      	bx	lr
 8016ebe:	bf00      	nop
 8016ec0:	0801fc98 	.word	0x0801fc98

08016ec4 <rcl_timer_init>:
 8016ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ec8:	b0ad      	sub	sp, #180	; 0xb4
 8016eca:	4604      	mov	r4, r0
 8016ecc:	a839      	add	r0, sp, #228	; 0xe4
 8016ece:	460d      	mov	r5, r1
 8016ed0:	4690      	mov	r8, r2
 8016ed2:	f7f8 fdf9 	bl	800fac8 <rcutils_allocator_is_valid>
 8016ed6:	2800      	cmp	r0, #0
 8016ed8:	d072      	beq.n	8016fc0 <rcl_timer_init+0xfc>
 8016eda:	2c00      	cmp	r4, #0
 8016edc:	d070      	beq.n	8016fc0 <rcl_timer_init+0xfc>
 8016ede:	2d00      	cmp	r5, #0
 8016ee0:	d06e      	beq.n	8016fc0 <rcl_timer_init+0xfc>
 8016ee2:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8016ee6:	2a00      	cmp	r2, #0
 8016ee8:	f173 0300 	sbcs.w	r3, r3, #0
 8016eec:	db68      	blt.n	8016fc0 <rcl_timer_init+0xfc>
 8016eee:	6823      	ldr	r3, [r4, #0]
 8016ef0:	b12b      	cbz	r3, 8016efe <rcl_timer_init+0x3a>
 8016ef2:	f04f 0a64 	mov.w	sl, #100	; 0x64
 8016ef6:	4650      	mov	r0, sl
 8016ef8:	b02d      	add	sp, #180	; 0xb4
 8016efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016efe:	a90a      	add	r1, sp, #40	; 0x28
 8016f00:	4628      	mov	r0, r5
 8016f02:	f7ff fe6d 	bl	8016be0 <rcl_clock_get_now>
 8016f06:	4682      	mov	sl, r0
 8016f08:	2800      	cmp	r0, #0
 8016f0a:	d1f4      	bne.n	8016ef6 <rcl_timer_init+0x32>
 8016f0c:	f10d 0920 	add.w	r9, sp, #32
 8016f10:	4648      	mov	r0, r9
 8016f12:	e9cd 5818 	strd	r5, r8, [sp, #96]	; 0x60
 8016f16:	f002 fe8b 	bl	8019c30 <rcl_get_zero_initialized_guard_condition>
 8016f1a:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016f1e:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8016f22:	f10d 0934 	add.w	r9, sp, #52	; 0x34
 8016f26:	e88b 0003 	stmia.w	fp, {r0, r1}
 8016f2a:	4648      	mov	r0, r9
 8016f2c:	f002 ff62 	bl	8019df4 <rcl_guard_condition_get_default_options>
 8016f30:	ab0f      	add	r3, sp, #60	; 0x3c
 8016f32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016f36:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016f3a:	4641      	mov	r1, r8
 8016f3c:	e899 000c 	ldmia.w	r9, {r2, r3}
 8016f40:	4658      	mov	r0, fp
 8016f42:	f002 fe7f 	bl	8019c44 <rcl_guard_condition_init>
 8016f46:	4682      	mov	sl, r0
 8016f48:	2800      	cmp	r0, #0
 8016f4a:	d1d4      	bne.n	8016ef6 <rcl_timer_init+0x32>
 8016f4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016f4e:	f893 c000 	ldrb.w	ip, [r3]
 8016f52:	f1bc 0f01 	cmp.w	ip, #1
 8016f56:	d039      	beq.n	8016fcc <rcl_timer_init+0x108>
 8016f58:	f10d 0ce4 	add.w	ip, sp, #228	; 0xe4
 8016f5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016f60:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 8016f64:	9e36      	ldr	r6, [sp, #216]	; 0xd8
 8016f66:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 8016f6a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016f6e:	eb18 0606 	adds.w	r6, r8, r6
 8016f72:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8016f74:	9606      	str	r6, [sp, #24]
 8016f76:	e9dd 6736 	ldrd	r6, r7, [sp, #216]	; 0xd8
 8016f7a:	eb49 0303 	adc.w	r3, r9, r3
 8016f7e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8016f80:	9307      	str	r3, [sp, #28]
 8016f82:	921c      	str	r2, [sp, #112]	; 0x70
 8016f84:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
 8016f88:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8016f8c:	f8dc 3000 	ldr.w	r3, [ip]
 8016f90:	f8ce 3000 	str.w	r3, [lr]
 8016f94:	2000      	movs	r0, #0
 8016f96:	2100      	movs	r1, #0
 8016f98:	2200      	movs	r2, #0
 8016f9a:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
 8016f9e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8016fa0:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8016fa2:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
 8016fa6:	2050      	movs	r0, #80	; 0x50
 8016fa8:	e9cd 6722 	strd	r6, r7, [sp, #136]	; 0x88
 8016fac:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 8016fb0:	4798      	blx	r3
 8016fb2:	6020      	str	r0, [r4, #0]
 8016fb4:	b360      	cbz	r0, 8017010 <rcl_timer_init+0x14c>
 8016fb6:	2250      	movs	r2, #80	; 0x50
 8016fb8:	a918      	add	r1, sp, #96	; 0x60
 8016fba:	f003 f93f 	bl	801a23c <memcpy>
 8016fbe:	e79a      	b.n	8016ef6 <rcl_timer_init+0x32>
 8016fc0:	f04f 0a0b 	mov.w	sl, #11
 8016fc4:	4650      	mov	r0, sl
 8016fc6:	b02d      	add	sp, #180	; 0xb4
 8016fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fcc:	2201      	movs	r2, #1
 8016fce:	2300      	movs	r3, #0
 8016fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016fd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016fd8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016fdc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8016fe0:	ab14      	add	r3, sp, #80	; 0x50
 8016fe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016fe4:	f88d c048 	strb.w	ip, [sp, #72]	; 0x48
 8016fe8:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8017028 <rcl_timer_init+0x164>
 8016fec:	9405      	str	r4, [sp, #20]
 8016fee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016ff2:	f8cd c010 	str.w	ip, [sp, #16]
 8016ff6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016ffa:	4628      	mov	r0, r5
 8016ffc:	f7ff fdfc 	bl	8016bf8 <rcl_clock_add_jump_callback>
 8017000:	4680      	mov	r8, r0
 8017002:	2800      	cmp	r0, #0
 8017004:	d0a8      	beq.n	8016f58 <rcl_timer_init+0x94>
 8017006:	4658      	mov	r0, fp
 8017008:	f002 fece 	bl	8019da8 <rcl_guard_condition_fini>
 801700c:	46c2      	mov	sl, r8
 801700e:	e772      	b.n	8016ef6 <rcl_timer_init+0x32>
 8017010:	4658      	mov	r0, fp
 8017012:	f002 fec9 	bl	8019da8 <rcl_guard_condition_fini>
 8017016:	4904      	ldr	r1, [pc, #16]	; (8017028 <rcl_timer_init+0x164>)
 8017018:	4622      	mov	r2, r4
 801701a:	4628      	mov	r0, r5
 801701c:	f7ff fe4c 	bl	8016cb8 <rcl_clock_remove_jump_callback>
 8017020:	f04f 0a0a 	mov.w	sl, #10
 8017024:	e767      	b.n	8016ef6 <rcl_timer_init+0x32>
 8017026:	bf00      	nop
 8017028:	08016d75 	.word	0x08016d75

0801702c <rcl_timer_call>:
 801702c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017030:	b08b      	sub	sp, #44	; 0x2c
 8017032:	2800      	cmp	r0, #0
 8017034:	d06e      	beq.n	8017114 <rcl_timer_call+0xe8>
 8017036:	6803      	ldr	r3, [r0, #0]
 8017038:	f3bf 8f5b 	dmb	ish
 801703c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017040:	f3bf 8f5b 	dmb	ish
 8017044:	4604      	mov	r4, r0
 8017046:	2b00      	cmp	r3, #0
 8017048:	d159      	bne.n	80170fe <rcl_timer_call+0xd2>
 801704a:	6803      	ldr	r3, [r0, #0]
 801704c:	a908      	add	r1, sp, #32
 801704e:	6818      	ldr	r0, [r3, #0]
 8017050:	f7ff fdc6 	bl	8016be0 <rcl_clock_get_now>
 8017054:	4605      	mov	r5, r0
 8017056:	2800      	cmp	r0, #0
 8017058:	d14d      	bne.n	80170f6 <rcl_timer_call+0xca>
 801705a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801705e:	2a00      	cmp	r2, #0
 8017060:	f173 0100 	sbcs.w	r1, r3, #0
 8017064:	db51      	blt.n	801710a <rcl_timer_call+0xde>
 8017066:	6820      	ldr	r0, [r4, #0]
 8017068:	2605      	movs	r6, #5
 801706a:	9600      	str	r6, [sp, #0]
 801706c:	3020      	adds	r0, #32
 801706e:	f001 f893 	bl	8018198 <__atomic_exchange_8>
 8017072:	6822      	ldr	r2, [r4, #0]
 8017074:	f3bf 8f5b 	dmb	ish
 8017078:	4682      	mov	sl, r0
 801707a:	f8d2 b010 	ldr.w	fp, [r2, #16]
 801707e:	f3bf 8f5b 	dmb	ish
 8017082:	6820      	ldr	r0, [r4, #0]
 8017084:	460b      	mov	r3, r1
 8017086:	3028      	adds	r0, #40	; 0x28
 8017088:	4631      	mov	r1, r6
 801708a:	9305      	str	r3, [sp, #20]
 801708c:	f001 f81c 	bl	80180c8 <__atomic_load_8>
 8017090:	4603      	mov	r3, r0
 8017092:	6820      	ldr	r0, [r4, #0]
 8017094:	460a      	mov	r2, r1
 8017096:	3018      	adds	r0, #24
 8017098:	4631      	mov	r1, r6
 801709a:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801709e:	f001 f813 	bl	80180c8 <__atomic_load_8>
 80170a2:	9b04      	ldr	r3, [sp, #16]
 80170a4:	9a03      	ldr	r2, [sp, #12]
 80170a6:	4606      	mov	r6, r0
 80170a8:	460f      	mov	r7, r1
 80170aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80170ae:	eb13 0806 	adds.w	r8, r3, r6
 80170b2:	eb42 0907 	adc.w	r9, r2, r7
 80170b6:	4580      	cmp	r8, r0
 80170b8:	eb79 0301 	sbcs.w	r3, r9, r1
 80170bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80170c0:	460a      	mov	r2, r1
 80170c2:	da04      	bge.n	80170ce <rcl_timer_call+0xa2>
 80170c4:	ea56 0307 	orrs.w	r3, r6, r7
 80170c8:	d129      	bne.n	801711e <rcl_timer_call+0xf2>
 80170ca:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80170ce:	6820      	ldr	r0, [r4, #0]
 80170d0:	2105      	movs	r1, #5
 80170d2:	4642      	mov	r2, r8
 80170d4:	464b      	mov	r3, r9
 80170d6:	3028      	adds	r0, #40	; 0x28
 80170d8:	9100      	str	r1, [sp, #0]
 80170da:	f001 f829 	bl	8018130 <__atomic_store_8>
 80170de:	f1bb 0f00 	cmp.w	fp, #0
 80170e2:	d008      	beq.n	80170f6 <rcl_timer_call+0xca>
 80170e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80170e8:	9905      	ldr	r1, [sp, #20]
 80170ea:	ebb2 020a 	subs.w	r2, r2, sl
 80170ee:	4620      	mov	r0, r4
 80170f0:	eb63 0301 	sbc.w	r3, r3, r1
 80170f4:	47d8      	blx	fp
 80170f6:	4628      	mov	r0, r5
 80170f8:	b00b      	add	sp, #44	; 0x2c
 80170fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170fe:	f240 3521 	movw	r5, #801	; 0x321
 8017102:	4628      	mov	r0, r5
 8017104:	b00b      	add	sp, #44	; 0x2c
 8017106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801710a:	2501      	movs	r5, #1
 801710c:	4628      	mov	r0, r5
 801710e:	b00b      	add	sp, #44	; 0x2c
 8017110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017114:	250b      	movs	r5, #11
 8017116:	4628      	mov	r0, r5
 8017118:	b00b      	add	sp, #44	; 0x2c
 801711a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801711e:	ebb0 0008 	subs.w	r0, r0, r8
 8017122:	eb62 0109 	sbc.w	r1, r2, r9
 8017126:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 801712a:	463b      	mov	r3, r7
 801712c:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8017130:	4632      	mov	r2, r6
 8017132:	f7e9 fdb9 	bl	8000ca8 <__aeabi_ldivmod>
 8017136:	1c43      	adds	r3, r0, #1
 8017138:	f141 0100 	adc.w	r1, r1, #0
 801713c:	fb00 7007 	mla	r0, r0, r7, r7
 8017140:	fb06 0001 	mla	r0, r6, r1, r0
 8017144:	fba3 6706 	umull	r6, r7, r3, r6
 8017148:	4407      	add	r7, r0
 801714a:	eb18 0806 	adds.w	r8, r8, r6
 801714e:	eb49 0907 	adc.w	r9, r9, r7
 8017152:	e7bc      	b.n	80170ce <rcl_timer_call+0xa2>

08017154 <rcl_timer_is_ready>:
 8017154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017158:	b082      	sub	sp, #8
 801715a:	b310      	cbz	r0, 80171a2 <rcl_timer_is_ready+0x4e>
 801715c:	4688      	mov	r8, r1
 801715e:	b301      	cbz	r1, 80171a2 <rcl_timer_is_ready+0x4e>
 8017160:	6803      	ldr	r3, [r0, #0]
 8017162:	4604      	mov	r4, r0
 8017164:	4669      	mov	r1, sp
 8017166:	6818      	ldr	r0, [r3, #0]
 8017168:	f7ff fd3a 	bl	8016be0 <rcl_clock_get_now>
 801716c:	4605      	mov	r5, r0
 801716e:	b118      	cbz	r0, 8017178 <rcl_timer_is_ready+0x24>
 8017170:	4628      	mov	r0, r5
 8017172:	b002      	add	sp, #8
 8017174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017178:	6820      	ldr	r0, [r4, #0]
 801717a:	2105      	movs	r1, #5
 801717c:	3028      	adds	r0, #40	; 0x28
 801717e:	f000 ffa3 	bl	80180c8 <__atomic_load_8>
 8017182:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017186:	1ac6      	subs	r6, r0, r3
 8017188:	eb61 0702 	sbc.w	r7, r1, r2
 801718c:	2e01      	cmp	r6, #1
 801718e:	f177 0300 	sbcs.w	r3, r7, #0
 8017192:	db0b      	blt.n	80171ac <rcl_timer_is_ready+0x58>
 8017194:	462b      	mov	r3, r5
 8017196:	4628      	mov	r0, r5
 8017198:	f888 3000 	strb.w	r3, [r8]
 801719c:	b002      	add	sp, #8
 801719e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171a2:	250b      	movs	r5, #11
 80171a4:	4628      	mov	r0, r5
 80171a6:	b002      	add	sp, #8
 80171a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171ac:	6823      	ldr	r3, [r4, #0]
 80171ae:	f3bf 8f5b 	dmb	ish
 80171b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80171b6:	f3bf 8f5b 	dmb	ish
 80171ba:	fab3 f383 	clz	r3, r3
 80171be:	095b      	lsrs	r3, r3, #5
 80171c0:	e7e9      	b.n	8017196 <rcl_timer_is_ready+0x42>
 80171c2:	bf00      	nop

080171c4 <rcl_timer_get_time_until_next_call>:
 80171c4:	b570      	push	{r4, r5, r6, lr}
 80171c6:	b082      	sub	sp, #8
 80171c8:	b1d8      	cbz	r0, 8017202 <rcl_timer_get_time_until_next_call+0x3e>
 80171ca:	460d      	mov	r5, r1
 80171cc:	b1c9      	cbz	r1, 8017202 <rcl_timer_get_time_until_next_call+0x3e>
 80171ce:	6803      	ldr	r3, [r0, #0]
 80171d0:	4604      	mov	r4, r0
 80171d2:	4669      	mov	r1, sp
 80171d4:	6818      	ldr	r0, [r3, #0]
 80171d6:	f7ff fd03 	bl	8016be0 <rcl_clock_get_now>
 80171da:	4606      	mov	r6, r0
 80171dc:	b110      	cbz	r0, 80171e4 <rcl_timer_get_time_until_next_call+0x20>
 80171de:	4630      	mov	r0, r6
 80171e0:	b002      	add	sp, #8
 80171e2:	bd70      	pop	{r4, r5, r6, pc}
 80171e4:	6820      	ldr	r0, [r4, #0]
 80171e6:	2105      	movs	r1, #5
 80171e8:	3028      	adds	r0, #40	; 0x28
 80171ea:	f000 ff6d 	bl	80180c8 <__atomic_load_8>
 80171ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80171f2:	1ac0      	subs	r0, r0, r3
 80171f4:	eb61 0102 	sbc.w	r1, r1, r2
 80171f8:	e9c5 0100 	strd	r0, r1, [r5]
 80171fc:	4630      	mov	r0, r6
 80171fe:	b002      	add	sp, #8
 8017200:	bd70      	pop	{r4, r5, r6, pc}
 8017202:	260b      	movs	r6, #11
 8017204:	4630      	mov	r0, r6
 8017206:	b002      	add	sp, #8
 8017208:	bd70      	pop	{r4, r5, r6, pc}
 801720a:	bf00      	nop

0801720c <rcl_timer_is_canceled>:
 801720c:	b168      	cbz	r0, 801722a <rcl_timer_is_canceled+0x1e>
 801720e:	b161      	cbz	r1, 801722a <rcl_timer_is_canceled+0x1e>
 8017210:	6803      	ldr	r3, [r0, #0]
 8017212:	f3bf 8f5b 	dmb	ish
 8017216:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801721a:	f3bf 8f5b 	dmb	ish
 801721e:	3b00      	subs	r3, #0
 8017220:	bf18      	it	ne
 8017222:	2301      	movne	r3, #1
 8017224:	700b      	strb	r3, [r1, #0]
 8017226:	2000      	movs	r0, #0
 8017228:	4770      	bx	lr
 801722a:	200b      	movs	r0, #11
 801722c:	4770      	bx	lr
 801722e:	bf00      	nop

08017230 <rcl_timer_get_guard_condition>:
 8017230:	b130      	cbz	r0, 8017240 <rcl_timer_get_guard_condition+0x10>
 8017232:	6800      	ldr	r0, [r0, #0]
 8017234:	b120      	cbz	r0, 8017240 <rcl_timer_get_guard_condition+0x10>
 8017236:	68c3      	ldr	r3, [r0, #12]
 8017238:	b10b      	cbz	r3, 801723e <rcl_timer_get_guard_condition+0xe>
 801723a:	3008      	adds	r0, #8
 801723c:	4770      	bx	lr
 801723e:	4618      	mov	r0, r3
 8017240:	4770      	bx	lr
 8017242:	bf00      	nop

08017244 <rcl_validate_enclave_name_with_size>:
 8017244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017246:	b0c3      	sub	sp, #268	; 0x10c
 8017248:	b1d0      	cbz	r0, 8017280 <rcl_validate_enclave_name_with_size+0x3c>
 801724a:	4615      	mov	r5, r2
 801724c:	b1c2      	cbz	r2, 8017280 <rcl_validate_enclave_name_with_size+0x3c>
 801724e:	461f      	mov	r7, r3
 8017250:	466a      	mov	r2, sp
 8017252:	ab01      	add	r3, sp, #4
 8017254:	460e      	mov	r6, r1
 8017256:	f001 f993 	bl	8018580 <rmw_validate_namespace_with_size>
 801725a:	4604      	mov	r4, r0
 801725c:	b9e0      	cbnz	r0, 8017298 <rcl_validate_enclave_name_with_size+0x54>
 801725e:	9b00      	ldr	r3, [sp, #0]
 8017260:	b923      	cbnz	r3, 801726c <rcl_validate_enclave_name_with_size+0x28>
 8017262:	2300      	movs	r3, #0
 8017264:	602b      	str	r3, [r5, #0]
 8017266:	4620      	mov	r0, r4
 8017268:	b043      	add	sp, #268	; 0x10c
 801726a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801726c:	2b07      	cmp	r3, #7
 801726e:	d00b      	beq.n	8017288 <rcl_validate_enclave_name_with_size+0x44>
 8017270:	1e5a      	subs	r2, r3, #1
 8017272:	2a05      	cmp	r2, #5
 8017274:	d82e      	bhi.n	80172d4 <rcl_validate_enclave_name_with_size+0x90>
 8017276:	e8df f002 	tbb	[pc, r2]
 801727a:	211e      	.short	0x211e
 801727c:	152a2724 	.word	0x152a2724
 8017280:	240b      	movs	r4, #11
 8017282:	4620      	mov	r0, r4
 8017284:	b043      	add	sp, #268	; 0x10c
 8017286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017288:	2eff      	cmp	r6, #255	; 0xff
 801728a:	d9ea      	bls.n	8017262 <rcl_validate_enclave_name_with_size+0x1e>
 801728c:	602b      	str	r3, [r5, #0]
 801728e:	2f00      	cmp	r7, #0
 8017290:	d0e9      	beq.n	8017266 <rcl_validate_enclave_name_with_size+0x22>
 8017292:	23fe      	movs	r3, #254	; 0xfe
 8017294:	603b      	str	r3, [r7, #0]
 8017296:	e7e6      	b.n	8017266 <rcl_validate_enclave_name_with_size+0x22>
 8017298:	f7fe fdda 	bl	8015e50 <rcl_convert_rmw_ret_to_rcl_ret>
 801729c:	4604      	mov	r4, r0
 801729e:	4620      	mov	r0, r4
 80172a0:	b043      	add	sp, #268	; 0x10c
 80172a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172a4:	2306      	movs	r3, #6
 80172a6:	602b      	str	r3, [r5, #0]
 80172a8:	2f00      	cmp	r7, #0
 80172aa:	d0dc      	beq.n	8017266 <rcl_validate_enclave_name_with_size+0x22>
 80172ac:	9b01      	ldr	r3, [sp, #4]
 80172ae:	603b      	str	r3, [r7, #0]
 80172b0:	4620      	mov	r0, r4
 80172b2:	b043      	add	sp, #268	; 0x10c
 80172b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172b6:	2301      	movs	r3, #1
 80172b8:	602b      	str	r3, [r5, #0]
 80172ba:	e7f5      	b.n	80172a8 <rcl_validate_enclave_name_with_size+0x64>
 80172bc:	2302      	movs	r3, #2
 80172be:	602b      	str	r3, [r5, #0]
 80172c0:	e7f2      	b.n	80172a8 <rcl_validate_enclave_name_with_size+0x64>
 80172c2:	2303      	movs	r3, #3
 80172c4:	602b      	str	r3, [r5, #0]
 80172c6:	e7ef      	b.n	80172a8 <rcl_validate_enclave_name_with_size+0x64>
 80172c8:	2304      	movs	r3, #4
 80172ca:	602b      	str	r3, [r5, #0]
 80172cc:	e7ec      	b.n	80172a8 <rcl_validate_enclave_name_with_size+0x64>
 80172ce:	2305      	movs	r3, #5
 80172d0:	602b      	str	r3, [r5, #0]
 80172d2:	e7e9      	b.n	80172a8 <rcl_validate_enclave_name_with_size+0x64>
 80172d4:	4a03      	ldr	r2, [pc, #12]	; (80172e4 <rcl_validate_enclave_name_with_size+0xa0>)
 80172d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80172da:	a802      	add	r0, sp, #8
 80172dc:	f001 f8de 	bl	801849c <rcutils_snprintf>
 80172e0:	2401      	movs	r4, #1
 80172e2:	e7c0      	b.n	8017266 <rcl_validate_enclave_name_with_size+0x22>
 80172e4:	0801fc9c 	.word	0x0801fc9c

080172e8 <rcl_validate_enclave_name>:
 80172e8:	b168      	cbz	r0, 8017306 <rcl_validate_enclave_name+0x1e>
 80172ea:	b570      	push	{r4, r5, r6, lr}
 80172ec:	460d      	mov	r5, r1
 80172ee:	4616      	mov	r6, r2
 80172f0:	4604      	mov	r4, r0
 80172f2:	f7e8 ff77 	bl	80001e4 <strlen>
 80172f6:	4633      	mov	r3, r6
 80172f8:	4601      	mov	r1, r0
 80172fa:	462a      	mov	r2, r5
 80172fc:	4620      	mov	r0, r4
 80172fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017302:	f7ff bf9f 	b.w	8017244 <rcl_validate_enclave_name_with_size>
 8017306:	200b      	movs	r0, #11
 8017308:	4770      	bx	lr
 801730a:	bf00      	nop

0801730c <rcl_validate_topic_name>:
 801730c:	2800      	cmp	r0, #0
 801730e:	f000 808b 	beq.w	8017428 <rcl_validate_topic_name+0x11c>
 8017312:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017316:	460e      	mov	r6, r1
 8017318:	2900      	cmp	r1, #0
 801731a:	f000 808c 	beq.w	8017436 <rcl_validate_topic_name+0x12a>
 801731e:	4617      	mov	r7, r2
 8017320:	4605      	mov	r5, r0
 8017322:	f7e8 ff5f 	bl	80001e4 <strlen>
 8017326:	b1b0      	cbz	r0, 8017356 <rcl_validate_topic_name+0x4a>
 8017328:	f895 9000 	ldrb.w	r9, [r5]
 801732c:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 80174dc <rcl_validate_topic_name+0x1d0>
 8017330:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8017334:	f013 0304 	ands.w	r3, r3, #4
 8017338:	d178      	bne.n	801742c <rcl_validate_topic_name+0x120>
 801733a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801733e:	f815 2008 	ldrb.w	r2, [r5, r8]
 8017342:	2a2f      	cmp	r2, #47	; 0x2f
 8017344:	d10e      	bne.n	8017364 <rcl_validate_topic_name+0x58>
 8017346:	2202      	movs	r2, #2
 8017348:	6032      	str	r2, [r6, #0]
 801734a:	b36f      	cbz	r7, 80173a8 <rcl_validate_topic_name+0x9c>
 801734c:	f8c7 8000 	str.w	r8, [r7]
 8017350:	4618      	mov	r0, r3
 8017352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017356:	2301      	movs	r3, #1
 8017358:	6033      	str	r3, [r6, #0]
 801735a:	b32f      	cbz	r7, 80173a8 <rcl_validate_topic_name+0x9c>
 801735c:	2000      	movs	r0, #0
 801735e:	6038      	str	r0, [r7, #0]
 8017360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017364:	461c      	mov	r4, r3
 8017366:	4619      	mov	r1, r3
 8017368:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 801736c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017370:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8017374:	f1be 0f09 	cmp.w	lr, #9
 8017378:	d946      	bls.n	8017408 <rcl_validate_topic_name+0xfc>
 801737a:	f022 0e20 	bic.w	lr, r2, #32
 801737e:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8017382:	f1be 0f19 	cmp.w	lr, #25
 8017386:	d93f      	bls.n	8017408 <rcl_validate_topic_name+0xfc>
 8017388:	2a5f      	cmp	r2, #95	; 0x5f
 801738a:	d014      	beq.n	80173b6 <rcl_validate_topic_name+0xaa>
 801738c:	2a2f      	cmp	r2, #47	; 0x2f
 801738e:	d05b      	beq.n	8017448 <rcl_validate_topic_name+0x13c>
 8017390:	2a7e      	cmp	r2, #126	; 0x7e
 8017392:	d052      	beq.n	801743a <rcl_validate_topic_name+0x12e>
 8017394:	2a7b      	cmp	r2, #123	; 0x7b
 8017396:	d00a      	beq.n	80173ae <rcl_validate_topic_name+0xa2>
 8017398:	2a7d      	cmp	r2, #125	; 0x7d
 801739a:	d16f      	bne.n	801747c <rcl_validate_topic_name+0x170>
 801739c:	2c00      	cmp	r4, #0
 801739e:	d15e      	bne.n	801745e <rcl_validate_topic_name+0x152>
 80173a0:	2305      	movs	r3, #5
 80173a2:	6033      	str	r3, [r6, #0]
 80173a4:	b107      	cbz	r7, 80173a8 <rcl_validate_topic_name+0x9c>
 80173a6:	6039      	str	r1, [r7, #0]
 80173a8:	2000      	movs	r0, #0
 80173aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173ae:	2c00      	cmp	r4, #0
 80173b0:	d14c      	bne.n	801744c <rcl_validate_topic_name+0x140>
 80173b2:	460b      	mov	r3, r1
 80173b4:	2401      	movs	r4, #1
 80173b6:	3101      	adds	r1, #1
 80173b8:	4288      	cmp	r0, r1
 80173ba:	d1d7      	bne.n	801736c <rcl_validate_topic_name+0x60>
 80173bc:	2c00      	cmp	r4, #0
 80173be:	d156      	bne.n	801746e <rcl_validate_topic_name+0x162>
 80173c0:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 80173c4:	4620      	mov	r0, r4
 80173c6:	d061      	beq.n	801748c <rcl_validate_topic_name+0x180>
 80173c8:	f108 0e01 	add.w	lr, r8, #1
 80173cc:	e007      	b.n	80173de <rcl_validate_topic_name+0xd2>
 80173ce:	2801      	cmp	r0, #1
 80173d0:	d047      	beq.n	8017462 <rcl_validate_topic_name+0x156>
 80173d2:	461a      	mov	r2, r3
 80173d4:	4291      	cmp	r1, r2
 80173d6:	4618      	mov	r0, r3
 80173d8:	f105 0501 	add.w	r5, r5, #1
 80173dc:	d944      	bls.n	8017468 <rcl_validate_topic_name+0x15c>
 80173de:	4580      	cmp	r8, r0
 80173e0:	f100 0301 	add.w	r3, r0, #1
 80173e4:	d037      	beq.n	8017456 <rcl_validate_topic_name+0x14a>
 80173e6:	782a      	ldrb	r2, [r5, #0]
 80173e8:	2a2f      	cmp	r2, #47	; 0x2f
 80173ea:	d1f0      	bne.n	80173ce <rcl_validate_topic_name+0xc2>
 80173ec:	786b      	ldrb	r3, [r5, #1]
 80173ee:	f81c 4003 	ldrb.w	r4, [ip, r3]
 80173f2:	1c43      	adds	r3, r0, #1
 80173f4:	0760      	lsls	r0, r4, #29
 80173f6:	461a      	mov	r2, r3
 80173f8:	d5ec      	bpl.n	80173d4 <rcl_validate_topic_name+0xc8>
 80173fa:	2304      	movs	r3, #4
 80173fc:	6033      	str	r3, [r6, #0]
 80173fe:	2f00      	cmp	r7, #0
 8017400:	d0d2      	beq.n	80173a8 <rcl_validate_topic_name+0x9c>
 8017402:	603a      	str	r2, [r7, #0]
 8017404:	2000      	movs	r0, #0
 8017406:	e7ab      	b.n	8017360 <rcl_validate_topic_name+0x54>
 8017408:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801740c:	0752      	lsls	r2, r2, #29
 801740e:	d5d2      	bpl.n	80173b6 <rcl_validate_topic_name+0xaa>
 8017410:	2c00      	cmp	r4, #0
 8017412:	d0d0      	beq.n	80173b6 <rcl_validate_topic_name+0xaa>
 8017414:	2900      	cmp	r1, #0
 8017416:	d0ce      	beq.n	80173b6 <rcl_validate_topic_name+0xaa>
 8017418:	1e4a      	subs	r2, r1, #1
 801741a:	429a      	cmp	r2, r3
 801741c:	d1cb      	bne.n	80173b6 <rcl_validate_topic_name+0xaa>
 801741e:	2309      	movs	r3, #9
 8017420:	6033      	str	r3, [r6, #0]
 8017422:	2f00      	cmp	r7, #0
 8017424:	d1bf      	bne.n	80173a6 <rcl_validate_topic_name+0x9a>
 8017426:	e7bf      	b.n	80173a8 <rcl_validate_topic_name+0x9c>
 8017428:	200b      	movs	r0, #11
 801742a:	4770      	bx	lr
 801742c:	2304      	movs	r3, #4
 801742e:	6033      	str	r3, [r6, #0]
 8017430:	2f00      	cmp	r7, #0
 8017432:	d193      	bne.n	801735c <rcl_validate_topic_name+0x50>
 8017434:	e7b8      	b.n	80173a8 <rcl_validate_topic_name+0x9c>
 8017436:	200b      	movs	r0, #11
 8017438:	e792      	b.n	8017360 <rcl_validate_topic_name+0x54>
 801743a:	2900      	cmp	r1, #0
 801743c:	d0bb      	beq.n	80173b6 <rcl_validate_topic_name+0xaa>
 801743e:	2306      	movs	r3, #6
 8017440:	6033      	str	r3, [r6, #0]
 8017442:	2f00      	cmp	r7, #0
 8017444:	d1af      	bne.n	80173a6 <rcl_validate_topic_name+0x9a>
 8017446:	e7af      	b.n	80173a8 <rcl_validate_topic_name+0x9c>
 8017448:	2c00      	cmp	r4, #0
 801744a:	d0b4      	beq.n	80173b6 <rcl_validate_topic_name+0xaa>
 801744c:	2308      	movs	r3, #8
 801744e:	6033      	str	r3, [r6, #0]
 8017450:	2f00      	cmp	r7, #0
 8017452:	d1a8      	bne.n	80173a6 <rcl_validate_topic_name+0x9a>
 8017454:	e7a8      	b.n	80173a8 <rcl_validate_topic_name+0x9c>
 8017456:	4672      	mov	r2, lr
 8017458:	f108 0301 	add.w	r3, r8, #1
 801745c:	e7ba      	b.n	80173d4 <rcl_validate_topic_name+0xc8>
 801745e:	2400      	movs	r4, #0
 8017460:	e7a9      	b.n	80173b6 <rcl_validate_topic_name+0xaa>
 8017462:	2202      	movs	r2, #2
 8017464:	4613      	mov	r3, r2
 8017466:	e7b5      	b.n	80173d4 <rcl_validate_topic_name+0xc8>
 8017468:	2000      	movs	r0, #0
 801746a:	6030      	str	r0, [r6, #0]
 801746c:	e778      	b.n	8017360 <rcl_validate_topic_name+0x54>
 801746e:	2205      	movs	r2, #5
 8017470:	6032      	str	r2, [r6, #0]
 8017472:	2f00      	cmp	r7, #0
 8017474:	d098      	beq.n	80173a8 <rcl_validate_topic_name+0x9c>
 8017476:	603b      	str	r3, [r7, #0]
 8017478:	2000      	movs	r0, #0
 801747a:	e771      	b.n	8017360 <rcl_validate_topic_name+0x54>
 801747c:	2c00      	cmp	r4, #0
 801747e:	bf14      	ite	ne
 8017480:	2308      	movne	r3, #8
 8017482:	2303      	moveq	r3, #3
 8017484:	6033      	str	r3, [r6, #0]
 8017486:	2f00      	cmp	r7, #0
 8017488:	d18d      	bne.n	80173a6 <rcl_validate_topic_name+0x9a>
 801748a:	e78d      	b.n	80173a8 <rcl_validate_topic_name+0x9c>
 801748c:	f108 0401 	add.w	r4, r8, #1
 8017490:	e007      	b.n	80174a2 <rcl_validate_topic_name+0x196>
 8017492:	2801      	cmp	r0, #1
 8017494:	d019      	beq.n	80174ca <rcl_validate_topic_name+0x1be>
 8017496:	461a      	mov	r2, r3
 8017498:	4291      	cmp	r1, r2
 801749a:	4618      	mov	r0, r3
 801749c:	f105 0501 	add.w	r5, r5, #1
 80174a0:	d9e2      	bls.n	8017468 <rcl_validate_topic_name+0x15c>
 80174a2:	4580      	cmp	r8, r0
 80174a4:	f100 0301 	add.w	r3, r0, #1
 80174a8:	d00b      	beq.n	80174c2 <rcl_validate_topic_name+0x1b6>
 80174aa:	782a      	ldrb	r2, [r5, #0]
 80174ac:	2a2f      	cmp	r2, #47	; 0x2f
 80174ae:	d1f0      	bne.n	8017492 <rcl_validate_topic_name+0x186>
 80174b0:	786b      	ldrb	r3, [r5, #1]
 80174b2:	f81c e003 	ldrb.w	lr, [ip, r3]
 80174b6:	1c43      	adds	r3, r0, #1
 80174b8:	f01e 0f04 	tst.w	lr, #4
 80174bc:	461a      	mov	r2, r3
 80174be:	d0eb      	beq.n	8017498 <rcl_validate_topic_name+0x18c>
 80174c0:	e79b      	b.n	80173fa <rcl_validate_topic_name+0xee>
 80174c2:	4622      	mov	r2, r4
 80174c4:	f108 0301 	add.w	r3, r8, #1
 80174c8:	e7e6      	b.n	8017498 <rcl_validate_topic_name+0x18c>
 80174ca:	2307      	movs	r3, #7
 80174cc:	6033      	str	r3, [r6, #0]
 80174ce:	2f00      	cmp	r7, #0
 80174d0:	f43f af6a 	beq.w	80173a8 <rcl_validate_topic_name+0x9c>
 80174d4:	6038      	str	r0, [r7, #0]
 80174d6:	2000      	movs	r0, #0
 80174d8:	e742      	b.n	8017360 <rcl_validate_topic_name+0x54>
 80174da:	bf00      	nop
 80174dc:	08020111 	.word	0x08020111

080174e0 <rcl_get_zero_initialized_wait_set>:
 80174e0:	b470      	push	{r4, r5, r6}
 80174e2:	4d07      	ldr	r5, [pc, #28]	; (8017500 <rcl_get_zero_initialized_wait_set+0x20>)
 80174e4:	4606      	mov	r6, r0
 80174e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80174e8:	4634      	mov	r4, r6
 80174ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80174ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80174ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80174f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80174f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80174f4:	682b      	ldr	r3, [r5, #0]
 80174f6:	6023      	str	r3, [r4, #0]
 80174f8:	4630      	mov	r0, r6
 80174fa:	bc70      	pop	{r4, r5, r6}
 80174fc:	4770      	bx	lr
 80174fe:	bf00      	nop
 8017500:	0801fcfc 	.word	0x0801fcfc

08017504 <rcl_wait_set_is_valid>:
 8017504:	b118      	cbz	r0, 801750e <rcl_wait_set_is_valid+0xa>
 8017506:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017508:	3800      	subs	r0, #0
 801750a:	bf18      	it	ne
 801750c:	2001      	movne	r0, #1
 801750e:	4770      	bx	lr

08017510 <rcl_wait_set_fini>:
 8017510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017514:	b082      	sub	sp, #8
 8017516:	2800      	cmp	r0, #0
 8017518:	f000 8095 	beq.w	8017646 <rcl_wait_set_fini+0x136>
 801751c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801751e:	4604      	mov	r4, r0
 8017520:	2e00      	cmp	r6, #0
 8017522:	f000 808c 	beq.w	801763e <rcl_wait_set_fini+0x12e>
 8017526:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8017528:	f001 fd1a 	bl	8018f60 <rmw_destroy_wait_set>
 801752c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801752e:	1e06      	subs	r6, r0, #0
 8017530:	bf18      	it	ne
 8017532:	f44f 7661 	movne.w	r6, #900	; 0x384
 8017536:	2d00      	cmp	r5, #0
 8017538:	f000 8081 	beq.w	801763e <rcl_wait_set_fini+0x12e>
 801753c:	6820      	ldr	r0, [r4, #0]
 801753e:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8017542:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017544:	2700      	movs	r7, #0
 8017546:	6067      	str	r7, [r4, #4]
 8017548:	602f      	str	r7, [r5, #0]
 801754a:	b120      	cbz	r0, 8017556 <rcl_wait_set_fini+0x46>
 801754c:	9101      	str	r1, [sp, #4]
 801754e:	47c0      	blx	r8
 8017550:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017552:	9901      	ldr	r1, [sp, #4]
 8017554:	6027      	str	r7, [r4, #0]
 8017556:	68a8      	ldr	r0, [r5, #8]
 8017558:	b120      	cbz	r0, 8017564 <rcl_wait_set_fini+0x54>
 801755a:	47c0      	blx	r8
 801755c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801755e:	2300      	movs	r3, #0
 8017560:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8017564:	68a0      	ldr	r0, [r4, #8]
 8017566:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8017568:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801756a:	f04f 0800 	mov.w	r8, #0
 801756e:	f8c4 800c 	str.w	r8, [r4, #12]
 8017572:	f8c5 800c 	str.w	r8, [r5, #12]
 8017576:	b128      	cbz	r0, 8017584 <rcl_wait_set_fini+0x74>
 8017578:	47b8      	blx	r7
 801757a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801757c:	f8c4 8008 	str.w	r8, [r4, #8]
 8017580:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8017582:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017584:	6968      	ldr	r0, [r5, #20]
 8017586:	f04f 0800 	mov.w	r8, #0
 801758a:	f8c5 8010 	str.w	r8, [r5, #16]
 801758e:	b128      	cbz	r0, 801759c <rcl_wait_set_fini+0x8c>
 8017590:	47b8      	blx	r7
 8017592:	f8c5 8014 	str.w	r8, [r5, #20]
 8017596:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017598:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801759a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801759c:	6920      	ldr	r0, [r4, #16]
 801759e:	f04f 0800 	mov.w	r8, #0
 80175a2:	f8c4 8014 	str.w	r8, [r4, #20]
 80175a6:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 80175aa:	b128      	cbz	r0, 80175b8 <rcl_wait_set_fini+0xa8>
 80175ac:	47b8      	blx	r7
 80175ae:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80175b0:	f8c4 8010 	str.w	r8, [r4, #16]
 80175b4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80175b6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80175b8:	69a0      	ldr	r0, [r4, #24]
 80175ba:	f04f 0800 	mov.w	r8, #0
 80175be:	f8c4 801c 	str.w	r8, [r4, #28]
 80175c2:	f8c5 8018 	str.w	r8, [r5, #24]
 80175c6:	b128      	cbz	r0, 80175d4 <rcl_wait_set_fini+0xc4>
 80175c8:	9101      	str	r1, [sp, #4]
 80175ca:	47b8      	blx	r7
 80175cc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80175ce:	9901      	ldr	r1, [sp, #4]
 80175d0:	f8c4 8018 	str.w	r8, [r4, #24]
 80175d4:	6a28      	ldr	r0, [r5, #32]
 80175d6:	b120      	cbz	r0, 80175e2 <rcl_wait_set_fini+0xd2>
 80175d8:	47b8      	blx	r7
 80175da:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80175dc:	2300      	movs	r3, #0
 80175de:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80175e2:	6a20      	ldr	r0, [r4, #32]
 80175e4:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80175e8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80175ea:	2700      	movs	r7, #0
 80175ec:	6267      	str	r7, [r4, #36]	; 0x24
 80175ee:	626f      	str	r7, [r5, #36]	; 0x24
 80175f0:	b120      	cbz	r0, 80175fc <rcl_wait_set_fini+0xec>
 80175f2:	9101      	str	r1, [sp, #4]
 80175f4:	47c0      	blx	r8
 80175f6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80175f8:	9901      	ldr	r1, [sp, #4]
 80175fa:	6227      	str	r7, [r4, #32]
 80175fc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80175fe:	b120      	cbz	r0, 801760a <rcl_wait_set_fini+0xfa>
 8017600:	47c0      	blx	r8
 8017602:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017604:	2300      	movs	r3, #0
 8017606:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801760a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801760c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8017610:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017612:	2700      	movs	r7, #0
 8017614:	62e7      	str	r7, [r4, #44]	; 0x2c
 8017616:	632f      	str	r7, [r5, #48]	; 0x30
 8017618:	b120      	cbz	r0, 8017624 <rcl_wait_set_fini+0x114>
 801761a:	9101      	str	r1, [sp, #4]
 801761c:	47c0      	blx	r8
 801761e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017620:	9901      	ldr	r1, [sp, #4]
 8017622:	62a7      	str	r7, [r4, #40]	; 0x28
 8017624:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8017626:	b120      	cbz	r0, 8017632 <rcl_wait_set_fini+0x122>
 8017628:	47c0      	blx	r8
 801762a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801762c:	2300      	movs	r3, #0
 801762e:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8017632:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8017634:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017636:	4628      	mov	r0, r5
 8017638:	4798      	blx	r3
 801763a:	2300      	movs	r3, #0
 801763c:	6323      	str	r3, [r4, #48]	; 0x30
 801763e:	4630      	mov	r0, r6
 8017640:	b002      	add	sp, #8
 8017642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017646:	260b      	movs	r6, #11
 8017648:	4630      	mov	r0, r6
 801764a:	b002      	add	sp, #8
 801764c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017650 <rcl_wait_set_add_subscription>:
 8017650:	b320      	cbz	r0, 801769c <rcl_wait_set_add_subscription+0x4c>
 8017652:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017654:	b570      	push	{r4, r5, r6, lr}
 8017656:	4604      	mov	r4, r0
 8017658:	b1d3      	cbz	r3, 8017690 <rcl_wait_set_add_subscription+0x40>
 801765a:	b319      	cbz	r1, 80176a4 <rcl_wait_set_add_subscription+0x54>
 801765c:	681d      	ldr	r5, [r3, #0]
 801765e:	6860      	ldr	r0, [r4, #4]
 8017660:	4285      	cmp	r5, r0
 8017662:	d218      	bcs.n	8017696 <rcl_wait_set_add_subscription+0x46>
 8017664:	6820      	ldr	r0, [r4, #0]
 8017666:	1c6e      	adds	r6, r5, #1
 8017668:	601e      	str	r6, [r3, #0]
 801766a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801766e:	b102      	cbz	r2, 8017672 <rcl_wait_set_add_subscription+0x22>
 8017670:	6015      	str	r5, [r2, #0]
 8017672:	4608      	mov	r0, r1
 8017674:	f7f7 fd32 	bl	800f0dc <rcl_subscription_get_rmw_handle>
 8017678:	b190      	cbz	r0, 80176a0 <rcl_wait_set_add_subscription+0x50>
 801767a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801767c:	6842      	ldr	r2, [r0, #4]
 801767e:	689b      	ldr	r3, [r3, #8]
 8017680:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017684:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017686:	6853      	ldr	r3, [r2, #4]
 8017688:	3301      	adds	r3, #1
 801768a:	6053      	str	r3, [r2, #4]
 801768c:	2000      	movs	r0, #0
 801768e:	bd70      	pop	{r4, r5, r6, pc}
 8017690:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017694:	bd70      	pop	{r4, r5, r6, pc}
 8017696:	f240 3086 	movw	r0, #902	; 0x386
 801769a:	bd70      	pop	{r4, r5, r6, pc}
 801769c:	200b      	movs	r0, #11
 801769e:	4770      	bx	lr
 80176a0:	2001      	movs	r0, #1
 80176a2:	bd70      	pop	{r4, r5, r6, pc}
 80176a4:	200b      	movs	r0, #11
 80176a6:	bd70      	pop	{r4, r5, r6, pc}

080176a8 <rcl_wait_set_clear>:
 80176a8:	2800      	cmp	r0, #0
 80176aa:	d073      	beq.n	8017794 <rcl_wait_set_clear+0xec>
 80176ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80176ae:	b510      	push	{r4, lr}
 80176b0:	4604      	mov	r4, r0
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d070      	beq.n	8017798 <rcl_wait_set_clear+0xf0>
 80176b6:	6800      	ldr	r0, [r0, #0]
 80176b8:	b138      	cbz	r0, 80176ca <rcl_wait_set_clear+0x22>
 80176ba:	6862      	ldr	r2, [r4, #4]
 80176bc:	2100      	movs	r1, #0
 80176be:	0092      	lsls	r2, r2, #2
 80176c0:	f002 fde4 	bl	801a28c <memset>
 80176c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80176c6:	2200      	movs	r2, #0
 80176c8:	601a      	str	r2, [r3, #0]
 80176ca:	68a0      	ldr	r0, [r4, #8]
 80176cc:	b138      	cbz	r0, 80176de <rcl_wait_set_clear+0x36>
 80176ce:	68e2      	ldr	r2, [r4, #12]
 80176d0:	2100      	movs	r1, #0
 80176d2:	0092      	lsls	r2, r2, #2
 80176d4:	f002 fdda 	bl	801a28c <memset>
 80176d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80176da:	2200      	movs	r2, #0
 80176dc:	60da      	str	r2, [r3, #12]
 80176de:	69a0      	ldr	r0, [r4, #24]
 80176e0:	b138      	cbz	r0, 80176f2 <rcl_wait_set_clear+0x4a>
 80176e2:	69e2      	ldr	r2, [r4, #28]
 80176e4:	2100      	movs	r1, #0
 80176e6:	0092      	lsls	r2, r2, #2
 80176e8:	f002 fdd0 	bl	801a28c <memset>
 80176ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80176ee:	2200      	movs	r2, #0
 80176f0:	619a      	str	r2, [r3, #24]
 80176f2:	6a20      	ldr	r0, [r4, #32]
 80176f4:	b138      	cbz	r0, 8017706 <rcl_wait_set_clear+0x5e>
 80176f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80176f8:	2100      	movs	r1, #0
 80176fa:	0092      	lsls	r2, r2, #2
 80176fc:	f002 fdc6 	bl	801a28c <memset>
 8017700:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017702:	2200      	movs	r2, #0
 8017704:	625a      	str	r2, [r3, #36]	; 0x24
 8017706:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017708:	b138      	cbz	r0, 801771a <rcl_wait_set_clear+0x72>
 801770a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801770c:	2100      	movs	r1, #0
 801770e:	0092      	lsls	r2, r2, #2
 8017710:	f002 fdbc 	bl	801a28c <memset>
 8017714:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017716:	2200      	movs	r2, #0
 8017718:	631a      	str	r2, [r3, #48]	; 0x30
 801771a:	6920      	ldr	r0, [r4, #16]
 801771c:	b138      	cbz	r0, 801772e <rcl_wait_set_clear+0x86>
 801771e:	6962      	ldr	r2, [r4, #20]
 8017720:	2100      	movs	r1, #0
 8017722:	0092      	lsls	r2, r2, #2
 8017724:	f002 fdb2 	bl	801a28c <memset>
 8017728:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801772a:	2200      	movs	r2, #0
 801772c:	641a      	str	r2, [r3, #64]	; 0x40
 801772e:	6898      	ldr	r0, [r3, #8]
 8017730:	b138      	cbz	r0, 8017742 <rcl_wait_set_clear+0x9a>
 8017732:	685a      	ldr	r2, [r3, #4]
 8017734:	2100      	movs	r1, #0
 8017736:	0092      	lsls	r2, r2, #2
 8017738:	f002 fda8 	bl	801a28c <memset>
 801773c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801773e:	2200      	movs	r2, #0
 8017740:	605a      	str	r2, [r3, #4]
 8017742:	6958      	ldr	r0, [r3, #20]
 8017744:	b138      	cbz	r0, 8017756 <rcl_wait_set_clear+0xae>
 8017746:	691a      	ldr	r2, [r3, #16]
 8017748:	2100      	movs	r1, #0
 801774a:	0092      	lsls	r2, r2, #2
 801774c:	f002 fd9e 	bl	801a28c <memset>
 8017750:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017752:	2200      	movs	r2, #0
 8017754:	611a      	str	r2, [r3, #16]
 8017756:	6a18      	ldr	r0, [r3, #32]
 8017758:	b138      	cbz	r0, 801776a <rcl_wait_set_clear+0xc2>
 801775a:	69da      	ldr	r2, [r3, #28]
 801775c:	2100      	movs	r1, #0
 801775e:	0092      	lsls	r2, r2, #2
 8017760:	f002 fd94 	bl	801a28c <memset>
 8017764:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017766:	2200      	movs	r2, #0
 8017768:	61da      	str	r2, [r3, #28]
 801776a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801776c:	b138      	cbz	r0, 801777e <rcl_wait_set_clear+0xd6>
 801776e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017770:	2100      	movs	r1, #0
 8017772:	0092      	lsls	r2, r2, #2
 8017774:	f002 fd8a 	bl	801a28c <memset>
 8017778:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801777a:	2200      	movs	r2, #0
 801777c:	629a      	str	r2, [r3, #40]	; 0x28
 801777e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8017780:	b138      	cbz	r0, 8017792 <rcl_wait_set_clear+0xea>
 8017782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017784:	2100      	movs	r1, #0
 8017786:	0092      	lsls	r2, r2, #2
 8017788:	f002 fd80 	bl	801a28c <memset>
 801778c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801778e:	2000      	movs	r0, #0
 8017790:	6358      	str	r0, [r3, #52]	; 0x34
 8017792:	bd10      	pop	{r4, pc}
 8017794:	200b      	movs	r0, #11
 8017796:	4770      	bx	lr
 8017798:	f44f 7061 	mov.w	r0, #900	; 0x384
 801779c:	bd10      	pop	{r4, pc}
 801779e:	bf00      	nop

080177a0 <rcl_wait_set_resize>:
 80177a0:	2800      	cmp	r0, #0
 80177a2:	f000 81a6 	beq.w	8017af2 <rcl_wait_set_resize+0x352>
 80177a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177aa:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 80177ae:	b083      	sub	sp, #12
 80177b0:	4604      	mov	r4, r0
 80177b2:	f1ba 0f00 	cmp.w	sl, #0
 80177b6:	f000 819e 	beq.w	8017af6 <rcl_wait_set_resize+0x356>
 80177ba:	461e      	mov	r6, r3
 80177bc:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 80177c0:	f04f 0800 	mov.w	r8, #0
 80177c4:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 80177c8:	9300      	str	r3, [sp, #0]
 80177ca:	f8c0 8004 	str.w	r8, [r0, #4]
 80177ce:	460f      	mov	r7, r1
 80177d0:	4615      	mov	r5, r2
 80177d2:	f8ca 8000 	str.w	r8, [sl]
 80177d6:	2900      	cmp	r1, #0
 80177d8:	f000 80c9 	beq.w	801796e <rcl_wait_set_resize+0x1ce>
 80177dc:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 80177e0:	6800      	ldr	r0, [r0, #0]
 80177e2:	4651      	mov	r1, sl
 80177e4:	464a      	mov	r2, r9
 80177e6:	4798      	blx	r3
 80177e8:	6020      	str	r0, [r4, #0]
 80177ea:	2800      	cmp	r0, #0
 80177ec:	f000 80d8 	beq.w	80179a0 <rcl_wait_set_resize+0x200>
 80177f0:	4652      	mov	r2, sl
 80177f2:	4641      	mov	r1, r8
 80177f4:	f002 fd4a 	bl	801a28c <memset>
 80177f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80177fa:	6067      	str	r7, [r4, #4]
 80177fc:	6898      	ldr	r0, [r3, #8]
 80177fe:	f8c3 8004 	str.w	r8, [r3, #4]
 8017802:	9301      	str	r3, [sp, #4]
 8017804:	464a      	mov	r2, r9
 8017806:	9b00      	ldr	r3, [sp, #0]
 8017808:	4651      	mov	r1, sl
 801780a:	4798      	blx	r3
 801780c:	9b01      	ldr	r3, [sp, #4]
 801780e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017810:	6098      	str	r0, [r3, #8]
 8017812:	6897      	ldr	r7, [r2, #8]
 8017814:	2f00      	cmp	r7, #0
 8017816:	f000 80be 	beq.w	8017996 <rcl_wait_set_resize+0x1f6>
 801781a:	4652      	mov	r2, sl
 801781c:	4641      	mov	r1, r8
 801781e:	4638      	mov	r0, r7
 8017820:	f002 fd34 	bl	801a28c <memset>
 8017824:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017828:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801782c:	2700      	movs	r7, #0
 801782e:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 8017832:	60e7      	str	r7, [r4, #12]
 8017834:	f8ca 700c 	str.w	r7, [sl, #12]
 8017838:	2d00      	cmp	r5, #0
 801783a:	f040 80b5 	bne.w	80179a8 <rcl_wait_set_resize+0x208>
 801783e:	68a0      	ldr	r0, [r4, #8]
 8017840:	b130      	cbz	r0, 8017850 <rcl_wait_set_resize+0xb0>
 8017842:	4641      	mov	r1, r8
 8017844:	4790      	blx	r2
 8017846:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801784a:	60a5      	str	r5, [r4, #8]
 801784c:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8017850:	2700      	movs	r7, #0
 8017852:	19ad      	adds	r5, r5, r6
 8017854:	f8ca 7010 	str.w	r7, [sl, #16]
 8017858:	f040 80be 	bne.w	80179d8 <rcl_wait_set_resize+0x238>
 801785c:	f8da 0014 	ldr.w	r0, [sl, #20]
 8017860:	b148      	cbz	r0, 8017876 <rcl_wait_set_resize+0xd6>
 8017862:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8017866:	4641      	mov	r1, r8
 8017868:	4798      	blx	r3
 801786a:	f8ca 5014 	str.w	r5, [sl, #20]
 801786e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017872:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8017876:	2500      	movs	r5, #0
 8017878:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801787c:	6165      	str	r5, [r4, #20]
 801787e:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8017882:	2e00      	cmp	r6, #0
 8017884:	f040 80bf 	bne.w	8017a06 <rcl_wait_set_resize+0x266>
 8017888:	6920      	ldr	r0, [r4, #16]
 801788a:	b140      	cbz	r0, 801789e <rcl_wait_set_resize+0xfe>
 801788c:	4641      	mov	r1, r8
 801788e:	47c8      	blx	r9
 8017890:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017894:	6126      	str	r6, [r4, #16]
 8017896:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801789a:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801789e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178a0:	2500      	movs	r5, #0
 80178a2:	61e5      	str	r5, [r4, #28]
 80178a4:	f8ca 5018 	str.w	r5, [sl, #24]
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	f040 80c1 	bne.w	8017a30 <rcl_wait_set_resize+0x290>
 80178ae:	69a0      	ldr	r0, [r4, #24]
 80178b0:	b128      	cbz	r0, 80178be <rcl_wait_set_resize+0x11e>
 80178b2:	4641      	mov	r1, r8
 80178b4:	47c8      	blx	r9
 80178b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178b8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80178bc:	61a3      	str	r3, [r4, #24]
 80178be:	f8da 0020 	ldr.w	r0, [sl, #32]
 80178c2:	b130      	cbz	r0, 80178d2 <rcl_wait_set_resize+0x132>
 80178c4:	4641      	mov	r1, r8
 80178c6:	47c8      	blx	r9
 80178c8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80178cc:	2300      	movs	r3, #0
 80178ce:	e9ca 3307 	strd	r3, r3, [sl, #28]
 80178d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80178d4:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 80178d8:	2600      	movs	r6, #0
 80178da:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 80178de:	6266      	str	r6, [r4, #36]	; 0x24
 80178e0:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	f000 80c8 	beq.w	8017a7a <rcl_wait_set_resize+0x2da>
 80178ea:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80178ee:	6a20      	ldr	r0, [r4, #32]
 80178f0:	4651      	mov	r1, sl
 80178f2:	463a      	mov	r2, r7
 80178f4:	47c8      	blx	r9
 80178f6:	6220      	str	r0, [r4, #32]
 80178f8:	2800      	cmp	r0, #0
 80178fa:	d051      	beq.n	80179a0 <rcl_wait_set_resize+0x200>
 80178fc:	4652      	mov	r2, sl
 80178fe:	4631      	mov	r1, r6
 8017900:	f002 fcc4 	bl	801a28c <memset>
 8017904:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017908:	6263      	str	r3, [r4, #36]	; 0x24
 801790a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801790c:	62ae      	str	r6, [r5, #40]	; 0x28
 801790e:	463a      	mov	r2, r7
 8017910:	4651      	mov	r1, sl
 8017912:	47c8      	blx	r9
 8017914:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017916:	62e8      	str	r0, [r5, #44]	; 0x2c
 8017918:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801791a:	2d00      	cmp	r5, #0
 801791c:	f000 8105 	beq.w	8017b2a <rcl_wait_set_resize+0x38a>
 8017920:	4652      	mov	r2, sl
 8017922:	4631      	mov	r1, r6
 8017924:	4628      	mov	r0, r5
 8017926:	f002 fcb1 	bl	801a28c <memset>
 801792a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801792e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017930:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 8017934:	2500      	movs	r5, #0
 8017936:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 801793a:	62e5      	str	r5, [r4, #44]	; 0x2c
 801793c:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 8017940:	2b00      	cmp	r3, #0
 8017942:	f040 80af 	bne.w	8017aa4 <rcl_wait_set_resize+0x304>
 8017946:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017948:	b128      	cbz	r0, 8017956 <rcl_wait_set_resize+0x1b6>
 801794a:	4631      	mov	r1, r6
 801794c:	47b8      	blx	r7
 801794e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017950:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017954:	62a3      	str	r3, [r4, #40]	; 0x28
 8017956:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801795a:	b310      	cbz	r0, 80179a2 <rcl_wait_set_resize+0x202>
 801795c:	4631      	mov	r1, r6
 801795e:	47b8      	blx	r7
 8017960:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017962:	2000      	movs	r0, #0
 8017964:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 8017968:	b003      	add	sp, #12
 801796a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801796e:	6800      	ldr	r0, [r0, #0]
 8017970:	b120      	cbz	r0, 801797c <rcl_wait_set_resize+0x1dc>
 8017972:	4649      	mov	r1, r9
 8017974:	47d8      	blx	fp
 8017976:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801797a:	6027      	str	r7, [r4, #0]
 801797c:	f8da 0008 	ldr.w	r0, [sl, #8]
 8017980:	2800      	cmp	r0, #0
 8017982:	f43f af51 	beq.w	8017828 <rcl_wait_set_resize+0x88>
 8017986:	4649      	mov	r1, r9
 8017988:	47d8      	blx	fp
 801798a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801798e:	2300      	movs	r3, #0
 8017990:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8017994:	e748      	b.n	8017828 <rcl_wait_set_resize+0x88>
 8017996:	6820      	ldr	r0, [r4, #0]
 8017998:	4649      	mov	r1, r9
 801799a:	47d8      	blx	fp
 801799c:	e9c4 7700 	strd	r7, r7, [r4]
 80179a0:	200a      	movs	r0, #10
 80179a2:	b003      	add	sp, #12
 80179a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179a8:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80179ac:	68a0      	ldr	r0, [r4, #8]
 80179ae:	4642      	mov	r2, r8
 80179b0:	4649      	mov	r1, r9
 80179b2:	4798      	blx	r3
 80179b4:	60a0      	str	r0, [r4, #8]
 80179b6:	2800      	cmp	r0, #0
 80179b8:	d0f2      	beq.n	80179a0 <rcl_wait_set_resize+0x200>
 80179ba:	4639      	mov	r1, r7
 80179bc:	464a      	mov	r2, r9
 80179be:	f002 fc65 	bl	801a28c <memset>
 80179c2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80179c6:	60e5      	str	r5, [r4, #12]
 80179c8:	2700      	movs	r7, #0
 80179ca:	19ad      	adds	r5, r5, r6
 80179cc:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80179d0:	f8ca 7010 	str.w	r7, [sl, #16]
 80179d4:	f43f af42 	beq.w	801785c <rcl_wait_set_resize+0xbc>
 80179d8:	00ad      	lsls	r5, r5, #2
 80179da:	4642      	mov	r2, r8
 80179dc:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 80179e0:	f8da 0014 	ldr.w	r0, [sl, #20]
 80179e4:	4629      	mov	r1, r5
 80179e6:	4798      	blx	r3
 80179e8:	4680      	mov	r8, r0
 80179ea:	f8ca 0014 	str.w	r0, [sl, #20]
 80179ee:	2800      	cmp	r0, #0
 80179f0:	f000 8084 	beq.w	8017afc <rcl_wait_set_resize+0x35c>
 80179f4:	462a      	mov	r2, r5
 80179f6:	4639      	mov	r1, r7
 80179f8:	f002 fc48 	bl	801a28c <memset>
 80179fc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017a00:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8017a04:	e737      	b.n	8017876 <rcl_wait_set_resize+0xd6>
 8017a06:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8017a0a:	6920      	ldr	r0, [r4, #16]
 8017a0c:	4642      	mov	r2, r8
 8017a0e:	4649      	mov	r1, r9
 8017a10:	47b8      	blx	r7
 8017a12:	6120      	str	r0, [r4, #16]
 8017a14:	2800      	cmp	r0, #0
 8017a16:	d0c3      	beq.n	80179a0 <rcl_wait_set_resize+0x200>
 8017a18:	464a      	mov	r2, r9
 8017a1a:	4629      	mov	r1, r5
 8017a1c:	f002 fc36 	bl	801a28c <memset>
 8017a20:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017a24:	6166      	str	r6, [r4, #20]
 8017a26:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8017a2a:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8017a2e:	e736      	b.n	801789e <rcl_wait_set_resize+0xfe>
 8017a30:	009e      	lsls	r6, r3, #2
 8017a32:	69a0      	ldr	r0, [r4, #24]
 8017a34:	4631      	mov	r1, r6
 8017a36:	4642      	mov	r2, r8
 8017a38:	47b8      	blx	r7
 8017a3a:	61a0      	str	r0, [r4, #24]
 8017a3c:	2800      	cmp	r0, #0
 8017a3e:	d0af      	beq.n	80179a0 <rcl_wait_set_resize+0x200>
 8017a40:	4632      	mov	r2, r6
 8017a42:	4629      	mov	r1, r5
 8017a44:	f002 fc22 	bl	801a28c <memset>
 8017a48:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017a4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a4e:	61e3      	str	r3, [r4, #28]
 8017a50:	f8da 0020 	ldr.w	r0, [sl, #32]
 8017a54:	f8ca 501c 	str.w	r5, [sl, #28]
 8017a58:	4642      	mov	r2, r8
 8017a5a:	4631      	mov	r1, r6
 8017a5c:	47b8      	blx	r7
 8017a5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017a60:	f8ca 0020 	str.w	r0, [sl, #32]
 8017a64:	6a1f      	ldr	r7, [r3, #32]
 8017a66:	2f00      	cmp	r7, #0
 8017a68:	d058      	beq.n	8017b1c <rcl_wait_set_resize+0x37c>
 8017a6a:	4632      	mov	r2, r6
 8017a6c:	4629      	mov	r1, r5
 8017a6e:	4638      	mov	r0, r7
 8017a70:	f002 fc0c 	bl	801a28c <memset>
 8017a74:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017a78:	e72b      	b.n	80178d2 <rcl_wait_set_resize+0x132>
 8017a7a:	6a20      	ldr	r0, [r4, #32]
 8017a7c:	b128      	cbz	r0, 8017a8a <rcl_wait_set_resize+0x2ea>
 8017a7e:	4639      	mov	r1, r7
 8017a80:	47c0      	blx	r8
 8017a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a84:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017a88:	6223      	str	r3, [r4, #32]
 8017a8a:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 8017a8e:	2800      	cmp	r0, #0
 8017a90:	f43f af4d 	beq.w	801792e <rcl_wait_set_resize+0x18e>
 8017a94:	4639      	mov	r1, r7
 8017a96:	47c0      	blx	r8
 8017a98:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 8017aa2:	e744      	b.n	801792e <rcl_wait_set_resize+0x18e>
 8017aa4:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8017aa8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017aaa:	4641      	mov	r1, r8
 8017aac:	4632      	mov	r2, r6
 8017aae:	47c8      	blx	r9
 8017ab0:	62a0      	str	r0, [r4, #40]	; 0x28
 8017ab2:	2800      	cmp	r0, #0
 8017ab4:	f43f af74 	beq.w	80179a0 <rcl_wait_set_resize+0x200>
 8017ab8:	4642      	mov	r2, r8
 8017aba:	4629      	mov	r1, r5
 8017abc:	f002 fbe6 	bl	801a28c <memset>
 8017ac0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ac6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017ac8:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8017acc:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 8017ad0:	4632      	mov	r2, r6
 8017ad2:	4641      	mov	r1, r8
 8017ad4:	47c8      	blx	r9
 8017ad6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017ad8:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8017adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ade:	b35b      	cbz	r3, 8017b38 <rcl_wait_set_resize+0x398>
 8017ae0:	4642      	mov	r2, r8
 8017ae2:	4618      	mov	r0, r3
 8017ae4:	4629      	mov	r1, r5
 8017ae6:	f002 fbd1 	bl	801a28c <memset>
 8017aea:	4628      	mov	r0, r5
 8017aec:	b003      	add	sp, #12
 8017aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017af2:	200b      	movs	r0, #11
 8017af4:	4770      	bx	lr
 8017af6:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017afa:	e752      	b.n	80179a2 <rcl_wait_set_resize+0x202>
 8017afc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017afe:	68a0      	ldr	r0, [r4, #8]
 8017b00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017b02:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8017b04:	4790      	blx	r2
 8017b06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017b08:	6920      	ldr	r0, [r4, #16]
 8017b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017b0c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8017b0e:	e9c4 8802 	strd	r8, r8, [r4, #8]
 8017b12:	4790      	blx	r2
 8017b14:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8017b18:	200a      	movs	r0, #10
 8017b1a:	e742      	b.n	80179a2 <rcl_wait_set_resize+0x202>
 8017b1c:	69a0      	ldr	r0, [r4, #24]
 8017b1e:	4641      	mov	r1, r8
 8017b20:	47c8      	blx	r9
 8017b22:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8017b26:	200a      	movs	r0, #10
 8017b28:	e73b      	b.n	80179a2 <rcl_wait_set_resize+0x202>
 8017b2a:	6a20      	ldr	r0, [r4, #32]
 8017b2c:	4639      	mov	r1, r7
 8017b2e:	47c0      	blx	r8
 8017b30:	e9c4 5508 	strd	r5, r5, [r4, #32]
 8017b34:	200a      	movs	r0, #10
 8017b36:	e734      	b.n	80179a2 <rcl_wait_set_resize+0x202>
 8017b38:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017b3a:	9300      	str	r3, [sp, #0]
 8017b3c:	4631      	mov	r1, r6
 8017b3e:	47b8      	blx	r7
 8017b40:	9b00      	ldr	r3, [sp, #0]
 8017b42:	200a      	movs	r0, #10
 8017b44:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8017b48:	e72b      	b.n	80179a2 <rcl_wait_set_resize+0x202>
 8017b4a:	bf00      	nop

08017b4c <rcl_wait_set_init>:
 8017b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b50:	b084      	sub	sp, #16
 8017b52:	4604      	mov	r4, r0
 8017b54:	a810      	add	r0, sp, #64	; 0x40
 8017b56:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8017b5a:	460f      	mov	r7, r1
 8017b5c:	4690      	mov	r8, r2
 8017b5e:	4699      	mov	r9, r3
 8017b60:	f7f7 ffb2 	bl	800fac8 <rcutils_allocator_is_valid>
 8017b64:	2800      	cmp	r0, #0
 8017b66:	d06b      	beq.n	8017c40 <rcl_wait_set_init+0xf4>
 8017b68:	2c00      	cmp	r4, #0
 8017b6a:	d069      	beq.n	8017c40 <rcl_wait_set_init+0xf4>
 8017b6c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017b6e:	b125      	cbz	r5, 8017b7a <rcl_wait_set_init+0x2e>
 8017b70:	2564      	movs	r5, #100	; 0x64
 8017b72:	4628      	mov	r0, r5
 8017b74:	b004      	add	sp, #16
 8017b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b7a:	f1ba 0f00 	cmp.w	sl, #0
 8017b7e:	d05f      	beq.n	8017c40 <rcl_wait_set_init+0xf4>
 8017b80:	4650      	mov	r0, sl
 8017b82:	f7fe f989 	bl	8015e98 <rcl_context_is_valid>
 8017b86:	2800      	cmp	r0, #0
 8017b88:	d067      	beq.n	8017c5a <rcl_wait_set_init+0x10e>
 8017b8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017b8c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8017b8e:	205c      	movs	r0, #92	; 0x5c
 8017b90:	4798      	blx	r3
 8017b92:	6320      	str	r0, [r4, #48]	; 0x30
 8017b94:	2800      	cmp	r0, #0
 8017b96:	d062      	beq.n	8017c5e <rcl_wait_set_init+0x112>
 8017b98:	225c      	movs	r2, #92	; 0x5c
 8017b9a:	4629      	mov	r1, r5
 8017b9c:	f002 fb76 	bl	801a28c <memset>
 8017ba0:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8017ba4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017ba8:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8017baa:	f8dc e000 	ldr.w	lr, [ip]
 8017bae:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 8017bb2:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 8017bb6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8017bba:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8017bbe:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 8017bc2:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 8017bc6:	60b5      	str	r5, [r6, #8]
 8017bc8:	6075      	str	r5, [r6, #4]
 8017bca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017bce:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8017bd2:	1899      	adds	r1, r3, r2
 8017bd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017bd6:	f8da 0000 	ldr.w	r0, [sl]
 8017bda:	f8cc e000 	str.w	lr, [ip]
 8017bde:	4419      	add	r1, r3
 8017be0:	4441      	add	r1, r8
 8017be2:	3028      	adds	r0, #40	; 0x28
 8017be4:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8017be8:	f001 f9b0 	bl	8018f4c <rmw_create_wait_set>
 8017bec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017bee:	63f0      	str	r0, [r6, #60]	; 0x3c
 8017bf0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8017bf2:	b350      	cbz	r0, 8017c4a <rcl_wait_set_init+0xfe>
 8017bf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017bf6:	9302      	str	r3, [sp, #8]
 8017bf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017bfa:	9301      	str	r3, [sp, #4]
 8017bfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017bfe:	9300      	str	r3, [sp, #0]
 8017c00:	4642      	mov	r2, r8
 8017c02:	464b      	mov	r3, r9
 8017c04:	4639      	mov	r1, r7
 8017c06:	4620      	mov	r0, r4
 8017c08:	f7ff fdca 	bl	80177a0 <rcl_wait_set_resize>
 8017c0c:	4605      	mov	r5, r0
 8017c0e:	2800      	cmp	r0, #0
 8017c10:	d0af      	beq.n	8017b72 <rcl_wait_set_init+0x26>
 8017c12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017c14:	bb2b      	cbnz	r3, 8017c62 <rcl_wait_set_init+0x116>
 8017c16:	2600      	movs	r6, #0
 8017c18:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8017c1c:	9600      	str	r6, [sp, #0]
 8017c1e:	4633      	mov	r3, r6
 8017c20:	4632      	mov	r2, r6
 8017c22:	4631      	mov	r1, r6
 8017c24:	4620      	mov	r0, r4
 8017c26:	f7ff fdbb 	bl	80177a0 <rcl_wait_set_resize>
 8017c2a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8017c2c:	2800      	cmp	r0, #0
 8017c2e:	d0a0      	beq.n	8017b72 <rcl_wait_set_init+0x26>
 8017c30:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017c32:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8017c34:	4798      	blx	r3
 8017c36:	4628      	mov	r0, r5
 8017c38:	6326      	str	r6, [r4, #48]	; 0x30
 8017c3a:	b004      	add	sp, #16
 8017c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c40:	250b      	movs	r5, #11
 8017c42:	4628      	mov	r0, r5
 8017c44:	b004      	add	sp, #16
 8017c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c4a:	2501      	movs	r5, #1
 8017c4c:	f001 f988 	bl	8018f60 <rmw_destroy_wait_set>
 8017c50:	2800      	cmp	r0, #0
 8017c52:	bf18      	it	ne
 8017c54:	f44f 7561 	movne.w	r5, #900	; 0x384
 8017c58:	e7dd      	b.n	8017c16 <rcl_wait_set_init+0xca>
 8017c5a:	2565      	movs	r5, #101	; 0x65
 8017c5c:	e789      	b.n	8017b72 <rcl_wait_set_init+0x26>
 8017c5e:	250a      	movs	r5, #10
 8017c60:	e787      	b.n	8017b72 <rcl_wait_set_init+0x26>
 8017c62:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8017c64:	e7f2      	b.n	8017c4c <rcl_wait_set_init+0x100>
 8017c66:	bf00      	nop

08017c68 <rcl_wait_set_add_guard_condition>:
 8017c68:	b320      	cbz	r0, 8017cb4 <rcl_wait_set_add_guard_condition+0x4c>
 8017c6a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017c6c:	b570      	push	{r4, r5, r6, lr}
 8017c6e:	4604      	mov	r4, r0
 8017c70:	b1d3      	cbz	r3, 8017ca8 <rcl_wait_set_add_guard_condition+0x40>
 8017c72:	b319      	cbz	r1, 8017cbc <rcl_wait_set_add_guard_condition+0x54>
 8017c74:	68dd      	ldr	r5, [r3, #12]
 8017c76:	68e0      	ldr	r0, [r4, #12]
 8017c78:	4285      	cmp	r5, r0
 8017c7a:	d218      	bcs.n	8017cae <rcl_wait_set_add_guard_condition+0x46>
 8017c7c:	68a0      	ldr	r0, [r4, #8]
 8017c7e:	1c6e      	adds	r6, r5, #1
 8017c80:	60de      	str	r6, [r3, #12]
 8017c82:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017c86:	b102      	cbz	r2, 8017c8a <rcl_wait_set_add_guard_condition+0x22>
 8017c88:	6015      	str	r5, [r2, #0]
 8017c8a:	4608      	mov	r0, r1
 8017c8c:	f002 f8dc 	bl	8019e48 <rcl_guard_condition_get_rmw_handle>
 8017c90:	b190      	cbz	r0, 8017cb8 <rcl_wait_set_add_guard_condition+0x50>
 8017c92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017c94:	6842      	ldr	r2, [r0, #4]
 8017c96:	695b      	ldr	r3, [r3, #20]
 8017c98:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017c9c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017c9e:	6913      	ldr	r3, [r2, #16]
 8017ca0:	3301      	adds	r3, #1
 8017ca2:	6113      	str	r3, [r2, #16]
 8017ca4:	2000      	movs	r0, #0
 8017ca6:	bd70      	pop	{r4, r5, r6, pc}
 8017ca8:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017cac:	bd70      	pop	{r4, r5, r6, pc}
 8017cae:	f240 3086 	movw	r0, #902	; 0x386
 8017cb2:	bd70      	pop	{r4, r5, r6, pc}
 8017cb4:	200b      	movs	r0, #11
 8017cb6:	4770      	bx	lr
 8017cb8:	2001      	movs	r0, #1
 8017cba:	bd70      	pop	{r4, r5, r6, pc}
 8017cbc:	200b      	movs	r0, #11
 8017cbe:	bd70      	pop	{r4, r5, r6, pc}

08017cc0 <rcl_wait_set_add_timer>:
 8017cc0:	b340      	cbz	r0, 8017d14 <rcl_wait_set_add_timer+0x54>
 8017cc2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017cc4:	b570      	push	{r4, r5, r6, lr}
 8017cc6:	4604      	mov	r4, r0
 8017cc8:	b1f3      	cbz	r3, 8017d08 <rcl_wait_set_add_timer+0x48>
 8017cca:	b329      	cbz	r1, 8017d18 <rcl_wait_set_add_timer+0x58>
 8017ccc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8017cce:	6965      	ldr	r5, [r4, #20]
 8017cd0:	42a8      	cmp	r0, r5
 8017cd2:	d21c      	bcs.n	8017d0e <rcl_wait_set_add_timer+0x4e>
 8017cd4:	6925      	ldr	r5, [r4, #16]
 8017cd6:	1c46      	adds	r6, r0, #1
 8017cd8:	641e      	str	r6, [r3, #64]	; 0x40
 8017cda:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8017cde:	b102      	cbz	r2, 8017ce2 <rcl_wait_set_add_timer+0x22>
 8017ce0:	6010      	str	r0, [r2, #0]
 8017ce2:	4608      	mov	r0, r1
 8017ce4:	f7ff faa4 	bl	8017230 <rcl_timer_get_guard_condition>
 8017ce8:	b168      	cbz	r0, 8017d06 <rcl_wait_set_add_timer+0x46>
 8017cea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017cec:	68e3      	ldr	r3, [r4, #12]
 8017cee:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8017cf0:	3b01      	subs	r3, #1
 8017cf2:	441d      	add	r5, r3
 8017cf4:	f002 f8a8 	bl	8019e48 <rcl_guard_condition_get_rmw_handle>
 8017cf8:	b180      	cbz	r0, 8017d1c <rcl_wait_set_add_timer+0x5c>
 8017cfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017cfc:	6842      	ldr	r2, [r0, #4]
 8017cfe:	695b      	ldr	r3, [r3, #20]
 8017d00:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017d04:	2000      	movs	r0, #0
 8017d06:	bd70      	pop	{r4, r5, r6, pc}
 8017d08:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017d0c:	bd70      	pop	{r4, r5, r6, pc}
 8017d0e:	f240 3086 	movw	r0, #902	; 0x386
 8017d12:	bd70      	pop	{r4, r5, r6, pc}
 8017d14:	200b      	movs	r0, #11
 8017d16:	4770      	bx	lr
 8017d18:	200b      	movs	r0, #11
 8017d1a:	bd70      	pop	{r4, r5, r6, pc}
 8017d1c:	2001      	movs	r0, #1
 8017d1e:	bd70      	pop	{r4, r5, r6, pc}

08017d20 <rcl_wait_set_add_client>:
 8017d20:	b320      	cbz	r0, 8017d6c <rcl_wait_set_add_client+0x4c>
 8017d22:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017d24:	b570      	push	{r4, r5, r6, lr}
 8017d26:	4604      	mov	r4, r0
 8017d28:	b1d3      	cbz	r3, 8017d60 <rcl_wait_set_add_client+0x40>
 8017d2a:	b319      	cbz	r1, 8017d74 <rcl_wait_set_add_client+0x54>
 8017d2c:	699d      	ldr	r5, [r3, #24]
 8017d2e:	69e0      	ldr	r0, [r4, #28]
 8017d30:	4285      	cmp	r5, r0
 8017d32:	d218      	bcs.n	8017d66 <rcl_wait_set_add_client+0x46>
 8017d34:	69a0      	ldr	r0, [r4, #24]
 8017d36:	1c6e      	adds	r6, r5, #1
 8017d38:	619e      	str	r6, [r3, #24]
 8017d3a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017d3e:	b102      	cbz	r2, 8017d42 <rcl_wait_set_add_client+0x22>
 8017d40:	6015      	str	r5, [r2, #0]
 8017d42:	4608      	mov	r0, r1
 8017d44:	f7fe f842 	bl	8015dcc <rcl_client_get_rmw_handle>
 8017d48:	b190      	cbz	r0, 8017d70 <rcl_wait_set_add_client+0x50>
 8017d4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017d4c:	6842      	ldr	r2, [r0, #4]
 8017d4e:	6a1b      	ldr	r3, [r3, #32]
 8017d50:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017d54:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017d56:	69d3      	ldr	r3, [r2, #28]
 8017d58:	3301      	adds	r3, #1
 8017d5a:	61d3      	str	r3, [r2, #28]
 8017d5c:	2000      	movs	r0, #0
 8017d5e:	bd70      	pop	{r4, r5, r6, pc}
 8017d60:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017d64:	bd70      	pop	{r4, r5, r6, pc}
 8017d66:	f240 3086 	movw	r0, #902	; 0x386
 8017d6a:	bd70      	pop	{r4, r5, r6, pc}
 8017d6c:	200b      	movs	r0, #11
 8017d6e:	4770      	bx	lr
 8017d70:	2001      	movs	r0, #1
 8017d72:	bd70      	pop	{r4, r5, r6, pc}
 8017d74:	200b      	movs	r0, #11
 8017d76:	bd70      	pop	{r4, r5, r6, pc}

08017d78 <rcl_wait_set_add_service>:
 8017d78:	b320      	cbz	r0, 8017dc4 <rcl_wait_set_add_service+0x4c>
 8017d7a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017d7c:	b570      	push	{r4, r5, r6, lr}
 8017d7e:	4604      	mov	r4, r0
 8017d80:	b1d3      	cbz	r3, 8017db8 <rcl_wait_set_add_service+0x40>
 8017d82:	b319      	cbz	r1, 8017dcc <rcl_wait_set_add_service+0x54>
 8017d84:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8017d86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017d88:	4285      	cmp	r5, r0
 8017d8a:	d218      	bcs.n	8017dbe <rcl_wait_set_add_service+0x46>
 8017d8c:	6a20      	ldr	r0, [r4, #32]
 8017d8e:	1c6e      	adds	r6, r5, #1
 8017d90:	625e      	str	r6, [r3, #36]	; 0x24
 8017d92:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017d96:	b102      	cbz	r2, 8017d9a <rcl_wait_set_add_service+0x22>
 8017d98:	6015      	str	r5, [r2, #0]
 8017d9a:	4608      	mov	r0, r1
 8017d9c:	f7fe fe34 	bl	8016a08 <rcl_service_get_rmw_handle>
 8017da0:	b190      	cbz	r0, 8017dc8 <rcl_wait_set_add_service+0x50>
 8017da2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017da4:	6842      	ldr	r2, [r0, #4]
 8017da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017da8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017dac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017dae:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8017db0:	3301      	adds	r3, #1
 8017db2:	6293      	str	r3, [r2, #40]	; 0x28
 8017db4:	2000      	movs	r0, #0
 8017db6:	bd70      	pop	{r4, r5, r6, pc}
 8017db8:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017dbc:	bd70      	pop	{r4, r5, r6, pc}
 8017dbe:	f240 3086 	movw	r0, #902	; 0x386
 8017dc2:	bd70      	pop	{r4, r5, r6, pc}
 8017dc4:	200b      	movs	r0, #11
 8017dc6:	4770      	bx	lr
 8017dc8:	2001      	movs	r0, #1
 8017dca:	bd70      	pop	{r4, r5, r6, pc}
 8017dcc:	200b      	movs	r0, #11
 8017dce:	bd70      	pop	{r4, r5, r6, pc}

08017dd0 <rcl_wait>:
 8017dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dd4:	b08f      	sub	sp, #60	; 0x3c
 8017dd6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017dda:	2800      	cmp	r0, #0
 8017ddc:	f000 814c 	beq.w	8018078 <rcl_wait+0x2a8>
 8017de0:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8017de2:	4604      	mov	r4, r0
 8017de4:	2d00      	cmp	r5, #0
 8017de6:	f000 80bc 	beq.w	8017f62 <rcl_wait+0x192>
 8017dea:	6843      	ldr	r3, [r0, #4]
 8017dec:	b973      	cbnz	r3, 8017e0c <rcl_wait+0x3c>
 8017dee:	68e3      	ldr	r3, [r4, #12]
 8017df0:	b963      	cbnz	r3, 8017e0c <rcl_wait+0x3c>
 8017df2:	6963      	ldr	r3, [r4, #20]
 8017df4:	b953      	cbnz	r3, 8017e0c <rcl_wait+0x3c>
 8017df6:	69e3      	ldr	r3, [r4, #28]
 8017df8:	b943      	cbnz	r3, 8017e0c <rcl_wait+0x3c>
 8017dfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017dfc:	b933      	cbnz	r3, 8017e0c <rcl_wait+0x3c>
 8017dfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017e00:	b923      	cbnz	r3, 8017e0c <rcl_wait+0x3c>
 8017e02:	f240 3085 	movw	r0, #901	; 0x385
 8017e06:	b00f      	add	sp, #60	; 0x3c
 8017e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017e10:	2a01      	cmp	r2, #1
 8017e12:	f173 0300 	sbcs.w	r3, r3, #0
 8017e16:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8017e18:	db56      	blt.n	8017ec8 <rcl_wait+0xf8>
 8017e1a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8017e1e:	2900      	cmp	r1, #0
 8017e20:	f000 8149 	beq.w	80180b6 <rcl_wait+0x2e6>
 8017e24:	2300      	movs	r3, #0
 8017e26:	9307      	str	r3, [sp, #28]
 8017e28:	469b      	mov	fp, r3
 8017e2a:	f04f 0800 	mov.w	r8, #0
 8017e2e:	f04f 0900 	mov.w	r9, #0
 8017e32:	e00d      	b.n	8017e50 <rcl_wait+0x80>
 8017e34:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017e36:	6922      	ldr	r2, [r4, #16]
 8017e38:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8017e3a:	f842 000a 	str.w	r0, [r2, sl]
 8017e3e:	f118 0801 	adds.w	r8, r8, #1
 8017e42:	f149 0900 	adc.w	r9, r9, #0
 8017e46:	2300      	movs	r3, #0
 8017e48:	4599      	cmp	r9, r3
 8017e4a:	bf08      	it	eq
 8017e4c:	4588      	cmpeq	r8, r1
 8017e4e:	d243      	bcs.n	8017ed8 <rcl_wait+0x108>
 8017e50:	6922      	ldr	r2, [r4, #16]
 8017e52:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8017e56:	f852 000a 	ldr.w	r0, [r2, sl]
 8017e5a:	2800      	cmp	r0, #0
 8017e5c:	d0ef      	beq.n	8017e3e <rcl_wait+0x6e>
 8017e5e:	68e2      	ldr	r2, [r4, #12]
 8017e60:	6969      	ldr	r1, [r5, #20]
 8017e62:	4442      	add	r2, r8
 8017e64:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8017e68:	b13b      	cbz	r3, 8017e7a <rcl_wait+0xaa>
 8017e6a:	692a      	ldr	r2, [r5, #16]
 8017e6c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8017e70:	6921      	ldr	r1, [r4, #16]
 8017e72:	3201      	adds	r2, #1
 8017e74:	f851 000a 	ldr.w	r0, [r1, sl]
 8017e78:	612a      	str	r2, [r5, #16]
 8017e7a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8017e7e:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 8017e82:	f7ff f9c3 	bl	801720c <rcl_timer_is_canceled>
 8017e86:	2800      	cmp	r0, #0
 8017e88:	d1bd      	bne.n	8017e06 <rcl_wait+0x36>
 8017e8a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8017e8e:	2a00      	cmp	r2, #0
 8017e90:	d1d0      	bne.n	8017e34 <rcl_wait+0x64>
 8017e92:	6922      	ldr	r2, [r4, #16]
 8017e94:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017e98:	f852 000a 	ldr.w	r0, [r2, sl]
 8017e9c:	a90a      	add	r1, sp, #40	; 0x28
 8017e9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017ea2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017ea6:	f7ff f98d 	bl	80171c4 <rcl_timer_get_time_until_next_call>
 8017eaa:	2800      	cmp	r0, #0
 8017eac:	d1ab      	bne.n	8017e06 <rcl_wait+0x36>
 8017eae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017eb2:	42b2      	cmp	r2, r6
 8017eb4:	eb73 0107 	sbcs.w	r1, r3, r7
 8017eb8:	da03      	bge.n	8017ec2 <rcl_wait+0xf2>
 8017eba:	461f      	mov	r7, r3
 8017ebc:	2301      	movs	r3, #1
 8017ebe:	4616      	mov	r6, r2
 8017ec0:	9307      	str	r3, [sp, #28]
 8017ec2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017ec4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8017ec6:	e7ba      	b.n	8017e3e <rcl_wait+0x6e>
 8017ec8:	2900      	cmp	r1, #0
 8017eca:	f000 80de 	beq.w	801808a <rcl_wait+0x2ba>
 8017ece:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8017ed2:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8017ed6:	e7a5      	b.n	8017e24 <rcl_wait+0x54>
 8017ed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017edc:	4313      	orrs	r3, r2
 8017ede:	d145      	bne.n	8017f6c <rcl_wait+0x19c>
 8017ee0:	2300      	movs	r3, #0
 8017ee2:	2200      	movs	r2, #0
 8017ee4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017ee8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017eec:	ab0a      	add	r3, sp, #40	; 0x28
 8017eee:	9302      	str	r3, [sp, #8]
 8017ef0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8017ef2:	9301      	str	r3, [sp, #4]
 8017ef4:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8017ef8:	9300      	str	r3, [sp, #0]
 8017efa:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8017efe:	f105 031c 	add.w	r3, r5, #28
 8017f02:	f105 0110 	add.w	r1, r5, #16
 8017f06:	1d28      	adds	r0, r5, #4
 8017f08:	f000 feae 	bl	8018c68 <rmw_wait>
 8017f0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017f10:	4680      	mov	r8, r0
 8017f12:	b30a      	cbz	r2, 8017f58 <rcl_wait+0x188>
 8017f14:	2500      	movs	r5, #0
 8017f16:	462f      	mov	r7, r5
 8017f18:	e004      	b.n	8017f24 <rcl_wait+0x154>
 8017f1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017f1e:	3501      	adds	r5, #1
 8017f20:	42aa      	cmp	r2, r5
 8017f22:	d919      	bls.n	8017f58 <rcl_wait+0x188>
 8017f24:	6922      	ldr	r2, [r4, #16]
 8017f26:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017f2a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8017f2e:	00ae      	lsls	r6, r5, #2
 8017f30:	2800      	cmp	r0, #0
 8017f32:	d0f3      	beq.n	8017f1c <rcl_wait+0x14c>
 8017f34:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 8017f38:	f7ff f90c 	bl	8017154 <rcl_timer_is_ready>
 8017f3c:	2800      	cmp	r0, #0
 8017f3e:	f47f af62 	bne.w	8017e06 <rcl_wait+0x36>
 8017f42:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8017f46:	2a00      	cmp	r2, #0
 8017f48:	d1e7      	bne.n	8017f1a <rcl_wait+0x14a>
 8017f4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017f4c:	6921      	ldr	r1, [r4, #16]
 8017f4e:	518a      	str	r2, [r1, r6]
 8017f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017f52:	3501      	adds	r5, #1
 8017f54:	42aa      	cmp	r2, r5
 8017f56:	d8e5      	bhi.n	8017f24 <rcl_wait+0x154>
 8017f58:	f038 0002 	bics.w	r0, r8, #2
 8017f5c:	d029      	beq.n	8017fb2 <rcl_wait+0x1e2>
 8017f5e:	2001      	movs	r0, #1
 8017f60:	e751      	b.n	8017e06 <rcl_wait+0x36>
 8017f62:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017f66:	b00f      	add	sp, #60	; 0x3c
 8017f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017f70:	2a01      	cmp	r2, #1
 8017f72:	f173 0300 	sbcs.w	r3, r3, #0
 8017f76:	f2c0 8083 	blt.w	8018080 <rcl_wait+0x2b0>
 8017f7a:	2e00      	cmp	r6, #0
 8017f7c:	f177 0300 	sbcs.w	r3, r7, #0
 8017f80:	bfbc      	itt	lt
 8017f82:	2600      	movlt	r6, #0
 8017f84:	2700      	movlt	r7, #0
 8017f86:	a34e      	add	r3, pc, #312	; (adr r3, 80180c0 <rcl_wait+0x2f0>)
 8017f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f8c:	4630      	mov	r0, r6
 8017f8e:	4639      	mov	r1, r7
 8017f90:	f7e8 fe8a 	bl	8000ca8 <__aeabi_ldivmod>
 8017f94:	a34a      	add	r3, pc, #296	; (adr r3, 80180c0 <rcl_wait+0x2f0>)
 8017f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f9a:	4680      	mov	r8, r0
 8017f9c:	4689      	mov	r9, r1
 8017f9e:	4630      	mov	r0, r6
 8017fa0:	4639      	mov	r1, r7
 8017fa2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8017fa6:	f7e8 fe7f 	bl	8000ca8 <__aeabi_ldivmod>
 8017faa:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017fae:	ab0a      	add	r3, sp, #40	; 0x28
 8017fb0:	e79d      	b.n	8017eee <rcl_wait+0x11e>
 8017fb2:	6866      	ldr	r6, [r4, #4]
 8017fb4:	4602      	mov	r2, r0
 8017fb6:	b91e      	cbnz	r6, 8017fc0 <rcl_wait+0x1f0>
 8017fb8:	e00d      	b.n	8017fd6 <rcl_wait+0x206>
 8017fba:	3201      	adds	r2, #1
 8017fbc:	42b2      	cmp	r2, r6
 8017fbe:	d00a      	beq.n	8017fd6 <rcl_wait+0x206>
 8017fc0:	6899      	ldr	r1, [r3, #8]
 8017fc2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017fc6:	2900      	cmp	r1, #0
 8017fc8:	d1f7      	bne.n	8017fba <rcl_wait+0x1ea>
 8017fca:	6825      	ldr	r5, [r4, #0]
 8017fcc:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8017fd0:	3201      	adds	r2, #1
 8017fd2:	42b2      	cmp	r2, r6
 8017fd4:	d1f4      	bne.n	8017fc0 <rcl_wait+0x1f0>
 8017fd6:	68e6      	ldr	r6, [r4, #12]
 8017fd8:	2200      	movs	r2, #0
 8017fda:	b91e      	cbnz	r6, 8017fe4 <rcl_wait+0x214>
 8017fdc:	e00d      	b.n	8017ffa <rcl_wait+0x22a>
 8017fde:	3201      	adds	r2, #1
 8017fe0:	42b2      	cmp	r2, r6
 8017fe2:	d00a      	beq.n	8017ffa <rcl_wait+0x22a>
 8017fe4:	6959      	ldr	r1, [r3, #20]
 8017fe6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017fea:	2900      	cmp	r1, #0
 8017fec:	d1f7      	bne.n	8017fde <rcl_wait+0x20e>
 8017fee:	68a5      	ldr	r5, [r4, #8]
 8017ff0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8017ff4:	3201      	adds	r2, #1
 8017ff6:	42b2      	cmp	r2, r6
 8017ff8:	d1f4      	bne.n	8017fe4 <rcl_wait+0x214>
 8017ffa:	69e6      	ldr	r6, [r4, #28]
 8017ffc:	2200      	movs	r2, #0
 8017ffe:	b91e      	cbnz	r6, 8018008 <rcl_wait+0x238>
 8018000:	e00d      	b.n	801801e <rcl_wait+0x24e>
 8018002:	3201      	adds	r2, #1
 8018004:	42b2      	cmp	r2, r6
 8018006:	d00a      	beq.n	801801e <rcl_wait+0x24e>
 8018008:	6a19      	ldr	r1, [r3, #32]
 801800a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801800e:	2900      	cmp	r1, #0
 8018010:	d1f7      	bne.n	8018002 <rcl_wait+0x232>
 8018012:	69a5      	ldr	r5, [r4, #24]
 8018014:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8018018:	3201      	adds	r2, #1
 801801a:	42b2      	cmp	r2, r6
 801801c:	d1f4      	bne.n	8018008 <rcl_wait+0x238>
 801801e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018020:	2200      	movs	r2, #0
 8018022:	b91e      	cbnz	r6, 801802c <rcl_wait+0x25c>
 8018024:	e00d      	b.n	8018042 <rcl_wait+0x272>
 8018026:	3201      	adds	r2, #1
 8018028:	4296      	cmp	r6, r2
 801802a:	d00a      	beq.n	8018042 <rcl_wait+0x272>
 801802c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801802e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018032:	2900      	cmp	r1, #0
 8018034:	d1f7      	bne.n	8018026 <rcl_wait+0x256>
 8018036:	6a25      	ldr	r5, [r4, #32]
 8018038:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801803c:	3201      	adds	r2, #1
 801803e:	4296      	cmp	r6, r2
 8018040:	d1f4      	bne.n	801802c <rcl_wait+0x25c>
 8018042:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018044:	2200      	movs	r2, #0
 8018046:	b91e      	cbnz	r6, 8018050 <rcl_wait+0x280>
 8018048:	e00d      	b.n	8018066 <rcl_wait+0x296>
 801804a:	3201      	adds	r2, #1
 801804c:	42b2      	cmp	r2, r6
 801804e:	d00a      	beq.n	8018066 <rcl_wait+0x296>
 8018050:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8018052:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018056:	2900      	cmp	r1, #0
 8018058:	d1f7      	bne.n	801804a <rcl_wait+0x27a>
 801805a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801805c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8018060:	3201      	adds	r2, #1
 8018062:	42b2      	cmp	r2, r6
 8018064:	d1f4      	bne.n	8018050 <rcl_wait+0x280>
 8018066:	f1b8 0f02 	cmp.w	r8, #2
 801806a:	f47f aecc 	bne.w	8017e06 <rcl_wait+0x36>
 801806e:	9b07      	ldr	r3, [sp, #28]
 8018070:	2b00      	cmp	r3, #0
 8018072:	bf08      	it	eq
 8018074:	2002      	moveq	r0, #2
 8018076:	e6c6      	b.n	8017e06 <rcl_wait+0x36>
 8018078:	200b      	movs	r0, #11
 801807a:	b00f      	add	sp, #60	; 0x3c
 801807c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018080:	9b07      	ldr	r3, [sp, #28]
 8018082:	2b00      	cmp	r3, #0
 8018084:	f47f af79 	bne.w	8017f7a <rcl_wait+0x1aa>
 8018088:	e731      	b.n	8017eee <rcl_wait+0x11e>
 801808a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801808e:	4313      	orrs	r3, r2
 8018090:	bf08      	it	eq
 8018092:	9107      	streq	r1, [sp, #28]
 8018094:	f43f af24 	beq.w	8017ee0 <rcl_wait+0x110>
 8018098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801809c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80180a0:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80180a4:	2a01      	cmp	r2, #1
 80180a6:	f173 0300 	sbcs.w	r3, r3, #0
 80180aa:	f04f 0300 	mov.w	r3, #0
 80180ae:	9307      	str	r3, [sp, #28]
 80180b0:	f6bf af63 	bge.w	8017f7a <rcl_wait+0x1aa>
 80180b4:	e71b      	b.n	8017eee <rcl_wait+0x11e>
 80180b6:	4632      	mov	r2, r6
 80180b8:	463b      	mov	r3, r7
 80180ba:	e7f3      	b.n	80180a4 <rcl_wait+0x2d4>
 80180bc:	f3af 8000 	nop.w
 80180c0:	3b9aca00 	.word	0x3b9aca00
 80180c4:	00000000 	.word	0x00000000

080180c8 <__atomic_load_8>:
 80180c8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80180cc:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80180d0:	4b14      	ldr	r3, [pc, #80]	; (8018124 <__atomic_load_8+0x5c>)
 80180d2:	4a15      	ldr	r2, [pc, #84]	; (8018128 <__atomic_load_8+0x60>)
 80180d4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80180d8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80180dc:	fb03 f301 	mul.w	r3, r3, r1
 80180e0:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 80180e4:	fba2 1203 	umull	r1, r2, r2, r3
 80180e8:	0912      	lsrs	r2, r2, #4
 80180ea:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80180ee:	b430      	push	{r4, r5}
 80180f0:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 80180f4:	4c0d      	ldr	r4, [pc, #52]	; (801812c <__atomic_load_8+0x64>)
 80180f6:	1a9b      	subs	r3, r3, r2
 80180f8:	18e1      	adds	r1, r4, r3
 80180fa:	f04f 0501 	mov.w	r5, #1
 80180fe:	e8d1 2f4f 	ldrexb	r2, [r1]
 8018102:	e8c1 5f4c 	strexb	ip, r5, [r1]
 8018106:	f1bc 0f00 	cmp.w	ip, #0
 801810a:	d1f8      	bne.n	80180fe <__atomic_load_8+0x36>
 801810c:	f3bf 8f5b 	dmb	ish
 8018110:	b2d2      	uxtb	r2, r2
 8018112:	2a00      	cmp	r2, #0
 8018114:	d1f3      	bne.n	80180fe <__atomic_load_8+0x36>
 8018116:	e9d0 0100 	ldrd	r0, r1, [r0]
 801811a:	f3bf 8f5b 	dmb	ish
 801811e:	54e2      	strb	r2, [r4, r3]
 8018120:	bc30      	pop	{r4, r5}
 8018122:	4770      	bx	lr
 8018124:	27d4eb2d 	.word	0x27d4eb2d
 8018128:	b21642c9 	.word	0xb21642c9
 801812c:	20010480 	.word	0x20010480

08018130 <__atomic_store_8>:
 8018130:	b4f0      	push	{r4, r5, r6, r7}
 8018132:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8018136:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 801813a:	4914      	ldr	r1, [pc, #80]	; (801818c <__atomic_store_8+0x5c>)
 801813c:	4c14      	ldr	r4, [pc, #80]	; (8018190 <__atomic_store_8+0x60>)
 801813e:	4e15      	ldr	r6, [pc, #84]	; (8018194 <__atomic_store_8+0x64>)
 8018140:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8018144:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8018148:	fb01 f105 	mul.w	r1, r1, r5
 801814c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8018150:	fba4 5401 	umull	r5, r4, r4, r1
 8018154:	0924      	lsrs	r4, r4, #4
 8018156:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801815a:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 801815e:	1b09      	subs	r1, r1, r4
 8018160:	1875      	adds	r5, r6, r1
 8018162:	f04f 0701 	mov.w	r7, #1
 8018166:	e8d5 4f4f 	ldrexb	r4, [r5]
 801816a:	e8c5 7f4c 	strexb	ip, r7, [r5]
 801816e:	f1bc 0f00 	cmp.w	ip, #0
 8018172:	d1f8      	bne.n	8018166 <__atomic_store_8+0x36>
 8018174:	f3bf 8f5b 	dmb	ish
 8018178:	b2e4      	uxtb	r4, r4
 801817a:	2c00      	cmp	r4, #0
 801817c:	d1f3      	bne.n	8018166 <__atomic_store_8+0x36>
 801817e:	e9c0 2300 	strd	r2, r3, [r0]
 8018182:	f3bf 8f5b 	dmb	ish
 8018186:	5474      	strb	r4, [r6, r1]
 8018188:	bcf0      	pop	{r4, r5, r6, r7}
 801818a:	4770      	bx	lr
 801818c:	27d4eb2d 	.word	0x27d4eb2d
 8018190:	b21642c9 	.word	0xb21642c9
 8018194:	20010480 	.word	0x20010480

08018198 <__atomic_exchange_8>:
 8018198:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 801819c:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 80181a0:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 80181a4:	4c16      	ldr	r4, [pc, #88]	; (8018200 <__atomic_exchange_8+0x68>)
 80181a6:	4917      	ldr	r1, [pc, #92]	; (8018204 <__atomic_exchange_8+0x6c>)
 80181a8:	4e17      	ldr	r6, [pc, #92]	; (8018208 <__atomic_exchange_8+0x70>)
 80181aa:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 80181ae:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 80181b2:	fb04 f505 	mul.w	r5, r4, r5
 80181b6:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 80181ba:	fba1 4105 	umull	r4, r1, r1, r5
 80181be:	0909      	lsrs	r1, r1, #4
 80181c0:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80181c4:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 80181c8:	1a6c      	subs	r4, r5, r1
 80181ca:	1931      	adds	r1, r6, r4
 80181cc:	f04f 0701 	mov.w	r7, #1
 80181d0:	e8d1 5f4f 	ldrexb	r5, [r1]
 80181d4:	e8c1 7f4c 	strexb	ip, r7, [r1]
 80181d8:	f1bc 0f00 	cmp.w	ip, #0
 80181dc:	d1f8      	bne.n	80181d0 <__atomic_exchange_8+0x38>
 80181de:	f3bf 8f5b 	dmb	ish
 80181e2:	b2ed      	uxtb	r5, r5
 80181e4:	2d00      	cmp	r5, #0
 80181e6:	d1f3      	bne.n	80181d0 <__atomic_exchange_8+0x38>
 80181e8:	e9d0 8900 	ldrd	r8, r9, [r0]
 80181ec:	e9c0 2300 	strd	r2, r3, [r0]
 80181f0:	f3bf 8f5b 	dmb	ish
 80181f4:	5535      	strb	r5, [r6, r4]
 80181f6:	4640      	mov	r0, r8
 80181f8:	4649      	mov	r1, r9
 80181fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80181fe:	4770      	bx	lr
 8018200:	27d4eb2d 	.word	0x27d4eb2d
 8018204:	b21642c9 	.word	0xb21642c9
 8018208:	20010480 	.word	0x20010480

0801820c <__atomic_fetch_add_8>:
 801820c:	b4f0      	push	{r4, r5, r6, r7}
 801820e:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8018212:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8018216:	4c17      	ldr	r4, [pc, #92]	; (8018274 <__atomic_fetch_add_8+0x68>)
 8018218:	4917      	ldr	r1, [pc, #92]	; (8018278 <__atomic_fetch_add_8+0x6c>)
 801821a:	4e18      	ldr	r6, [pc, #96]	; (801827c <__atomic_fetch_add_8+0x70>)
 801821c:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8018220:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8018224:	fb04 f505 	mul.w	r5, r4, r5
 8018228:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 801822c:	fba1 4105 	umull	r4, r1, r1, r5
 8018230:	0909      	lsrs	r1, r1, #4
 8018232:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8018236:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801823a:	1a6c      	subs	r4, r5, r1
 801823c:	1931      	adds	r1, r6, r4
 801823e:	f04f 0701 	mov.w	r7, #1
 8018242:	e8d1 5f4f 	ldrexb	r5, [r1]
 8018246:	e8c1 7f4c 	strexb	ip, r7, [r1]
 801824a:	f1bc 0f00 	cmp.w	ip, #0
 801824e:	d1f8      	bne.n	8018242 <__atomic_fetch_add_8+0x36>
 8018250:	f3bf 8f5b 	dmb	ish
 8018254:	b2ed      	uxtb	r5, r5
 8018256:	2d00      	cmp	r5, #0
 8018258:	d1f3      	bne.n	8018242 <__atomic_fetch_add_8+0x36>
 801825a:	e9d0 7100 	ldrd	r7, r1, [r0]
 801825e:	18ba      	adds	r2, r7, r2
 8018260:	eb41 0303 	adc.w	r3, r1, r3
 8018264:	e9c0 2300 	strd	r2, r3, [r0]
 8018268:	f3bf 8f5b 	dmb	ish
 801826c:	5535      	strb	r5, [r6, r4]
 801826e:	4638      	mov	r0, r7
 8018270:	bcf0      	pop	{r4, r5, r6, r7}
 8018272:	4770      	bx	lr
 8018274:	27d4eb2d 	.word	0x27d4eb2d
 8018278:	b21642c9 	.word	0xb21642c9
 801827c:	20010480 	.word	0x20010480

08018280 <rcutils_is_directory>:
 8018280:	2000      	movs	r0, #0
 8018282:	4770      	bx	lr

08018284 <rcutils_join_path>:
 8018284:	b082      	sub	sp, #8
 8018286:	e88d 000c 	stmia.w	sp, {r2, r3}
 801828a:	2000      	movs	r0, #0
 801828c:	b002      	add	sp, #8
 801828e:	4770      	bx	lr

08018290 <rcutils_to_native_path>:
 8018290:	b084      	sub	sp, #16
 8018292:	a801      	add	r0, sp, #4
 8018294:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8018298:	b004      	add	sp, #16
 801829a:	2000      	movs	r0, #0
 801829c:	4770      	bx	lr
 801829e:	bf00      	nop

080182a0 <rcutils_format_string_limit>:
 80182a0:	b40f      	push	{r0, r1, r2, r3}
 80182a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182a4:	b083      	sub	sp, #12
 80182a6:	ac08      	add	r4, sp, #32
 80182a8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80182aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80182ae:	b34e      	cbz	r6, 8018304 <rcutils_format_string_limit+0x64>
 80182b0:	a808      	add	r0, sp, #32
 80182b2:	f7f7 fc09 	bl	800fac8 <rcutils_allocator_is_valid>
 80182b6:	b328      	cbz	r0, 8018304 <rcutils_format_string_limit+0x64>
 80182b8:	2100      	movs	r1, #0
 80182ba:	ab0f      	add	r3, sp, #60	; 0x3c
 80182bc:	4608      	mov	r0, r1
 80182be:	4632      	mov	r2, r6
 80182c0:	e9cd 3300 	strd	r3, r3, [sp]
 80182c4:	f000 f904 	bl	80184d0 <rcutils_vsnprintf>
 80182c8:	1c43      	adds	r3, r0, #1
 80182ca:	4605      	mov	r5, r0
 80182cc:	d01a      	beq.n	8018304 <rcutils_format_string_limit+0x64>
 80182ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80182d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80182d2:	1c47      	adds	r7, r0, #1
 80182d4:	429f      	cmp	r7, r3
 80182d6:	bf84      	itt	hi
 80182d8:	461f      	movhi	r7, r3
 80182da:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 80182de:	4638      	mov	r0, r7
 80182e0:	9b08      	ldr	r3, [sp, #32]
 80182e2:	4798      	blx	r3
 80182e4:	4604      	mov	r4, r0
 80182e6:	b168      	cbz	r0, 8018304 <rcutils_format_string_limit+0x64>
 80182e8:	9b01      	ldr	r3, [sp, #4]
 80182ea:	4632      	mov	r2, r6
 80182ec:	4639      	mov	r1, r7
 80182ee:	f000 f8ef 	bl	80184d0 <rcutils_vsnprintf>
 80182f2:	2800      	cmp	r0, #0
 80182f4:	db02      	blt.n	80182fc <rcutils_format_string_limit+0x5c>
 80182f6:	2300      	movs	r3, #0
 80182f8:	5563      	strb	r3, [r4, r5]
 80182fa:	e004      	b.n	8018306 <rcutils_format_string_limit+0x66>
 80182fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018300:	4620      	mov	r0, r4
 8018302:	4798      	blx	r3
 8018304:	2400      	movs	r4, #0
 8018306:	4620      	mov	r0, r4
 8018308:	b003      	add	sp, #12
 801830a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801830e:	b004      	add	sp, #16
 8018310:	4770      	bx	lr
 8018312:	bf00      	nop

08018314 <rcutils_get_env>:
 8018314:	b168      	cbz	r0, 8018332 <rcutils_get_env+0x1e>
 8018316:	b510      	push	{r4, lr}
 8018318:	460c      	mov	r4, r1
 801831a:	b129      	cbz	r1, 8018328 <rcutils_get_env+0x14>
 801831c:	f001 ff10 	bl	801a140 <getenv>
 8018320:	b120      	cbz	r0, 801832c <rcutils_get_env+0x18>
 8018322:	6020      	str	r0, [r4, #0]
 8018324:	2000      	movs	r0, #0
 8018326:	bd10      	pop	{r4, pc}
 8018328:	4803      	ldr	r0, [pc, #12]	; (8018338 <rcutils_get_env+0x24>)
 801832a:	bd10      	pop	{r4, pc}
 801832c:	4b03      	ldr	r3, [pc, #12]	; (801833c <rcutils_get_env+0x28>)
 801832e:	6023      	str	r3, [r4, #0]
 8018330:	bd10      	pop	{r4, pc}
 8018332:	4803      	ldr	r0, [pc, #12]	; (8018340 <rcutils_get_env+0x2c>)
 8018334:	4770      	bx	lr
 8018336:	bf00      	nop
 8018338:	0801fd4c 	.word	0x0801fd4c
 801833c:	0801fe70 	.word	0x0801fe70
 8018340:	0801fd30 	.word	0x0801fd30

08018344 <rcutils_repl_str>:
 8018344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018348:	ed2d 8b02 	vpush	{d8}
 801834c:	b087      	sub	sp, #28
 801834e:	4680      	mov	r8, r0
 8018350:	4608      	mov	r0, r1
 8018352:	f8cd 8000 	str.w	r8, [sp]
 8018356:	ee08 2a10 	vmov	s16, r2
 801835a:	468a      	mov	sl, r1
 801835c:	4699      	mov	r9, r3
 801835e:	f7e7 ff41 	bl	80001e4 <strlen>
 8018362:	2600      	movs	r6, #0
 8018364:	4647      	mov	r7, r8
 8018366:	9001      	str	r0, [sp, #4]
 8018368:	46b3      	mov	fp, r6
 801836a:	2510      	movs	r5, #16
 801836c:	46b0      	mov	r8, r6
 801836e:	e01d      	b.n	80183ac <rcutils_repl_str+0x68>
 8018370:	f10b 0b01 	add.w	fp, fp, #1
 8018374:	455e      	cmp	r6, fp
 8018376:	d211      	bcs.n	801839c <rcutils_repl_str+0x58>
 8018378:	442e      	add	r6, r5
 801837a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801837e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8018382:	00b1      	lsls	r1, r6, #2
 8018384:	4798      	blx	r3
 8018386:	2800      	cmp	r0, #0
 8018388:	f000 8084 	beq.w	8018494 <rcutils_repl_str+0x150>
 801838c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018390:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8018394:	bf28      	it	cs
 8018396:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 801839a:	4680      	mov	r8, r0
 801839c:	9a00      	ldr	r2, [sp, #0]
 801839e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80183a2:	1aa2      	subs	r2, r4, r2
 80183a4:	f843 2c04 	str.w	r2, [r3, #-4]
 80183a8:	9b01      	ldr	r3, [sp, #4]
 80183aa:	18e7      	adds	r7, r4, r3
 80183ac:	4651      	mov	r1, sl
 80183ae:	4638      	mov	r0, r7
 80183b0:	f002 fbdb 	bl	801ab6a <strstr>
 80183b4:	4604      	mov	r4, r0
 80183b6:	4640      	mov	r0, r8
 80183b8:	2c00      	cmp	r4, #0
 80183ba:	d1d9      	bne.n	8018370 <rcutils_repl_str+0x2c>
 80183bc:	46b8      	mov	r8, r7
 80183be:	4607      	mov	r7, r0
 80183c0:	4640      	mov	r0, r8
 80183c2:	f7e7 ff0f 	bl	80001e4 <strlen>
 80183c6:	9b00      	ldr	r3, [sp, #0]
 80183c8:	eba8 0303 	sub.w	r3, r8, r3
 80183cc:	181d      	adds	r5, r3, r0
 80183ce:	9504      	str	r5, [sp, #16]
 80183d0:	f1bb 0f00 	cmp.w	fp, #0
 80183d4:	d03d      	beq.n	8018452 <rcutils_repl_str+0x10e>
 80183d6:	ee18 0a10 	vmov	r0, s16
 80183da:	f7e7 ff03 	bl	80001e4 <strlen>
 80183de:	9b01      	ldr	r3, [sp, #4]
 80183e0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80183e4:	1ac3      	subs	r3, r0, r3
 80183e6:	fb0b 5303 	mla	r3, fp, r3, r5
 80183ea:	9305      	str	r3, [sp, #20]
 80183ec:	4606      	mov	r6, r0
 80183ee:	1c58      	adds	r0, r3, #1
 80183f0:	f8d9 3000 	ldr.w	r3, [r9]
 80183f4:	4798      	blx	r3
 80183f6:	9003      	str	r0, [sp, #12]
 80183f8:	2800      	cmp	r0, #0
 80183fa:	d04c      	beq.n	8018496 <rcutils_repl_str+0x152>
 80183fc:	683a      	ldr	r2, [r7, #0]
 80183fe:	9900      	ldr	r1, [sp, #0]
 8018400:	f001 ff1c 	bl	801a23c <memcpy>
 8018404:	9b03      	ldr	r3, [sp, #12]
 8018406:	683d      	ldr	r5, [r7, #0]
 8018408:	ee18 8a10 	vmov	r8, s16
 801840c:	441d      	add	r5, r3
 801840e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8018412:	9302      	str	r3, [sp, #8]
 8018414:	46ba      	mov	sl, r7
 8018416:	4632      	mov	r2, r6
 8018418:	4641      	mov	r1, r8
 801841a:	4628      	mov	r0, r5
 801841c:	f001 ff0e 	bl	801a23c <memcpy>
 8018420:	9b01      	ldr	r3, [sp, #4]
 8018422:	f85a 2b04 	ldr.w	r2, [sl], #4
 8018426:	441a      	add	r2, r3
 8018428:	9b00      	ldr	r3, [sp, #0]
 801842a:	1899      	adds	r1, r3, r2
 801842c:	9b02      	ldr	r3, [sp, #8]
 801842e:	4435      	add	r5, r6
 8018430:	429c      	cmp	r4, r3
 8018432:	4628      	mov	r0, r5
 8018434:	d025      	beq.n	8018482 <rcutils_repl_str+0x13e>
 8018436:	f8da 3000 	ldr.w	r3, [sl]
 801843a:	3401      	adds	r4, #1
 801843c:	1a9a      	subs	r2, r3, r2
 801843e:	4415      	add	r5, r2
 8018440:	f001 fefc 	bl	801a23c <memcpy>
 8018444:	455c      	cmp	r4, fp
 8018446:	d3e6      	bcc.n	8018416 <rcutils_repl_str+0xd2>
 8018448:	9a03      	ldr	r2, [sp, #12]
 801844a:	9905      	ldr	r1, [sp, #20]
 801844c:	2300      	movs	r3, #0
 801844e:	5453      	strb	r3, [r2, r1]
 8018450:	e00b      	b.n	801846a <rcutils_repl_str+0x126>
 8018452:	4628      	mov	r0, r5
 8018454:	f8d9 3000 	ldr.w	r3, [r9]
 8018458:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801845c:	3001      	adds	r0, #1
 801845e:	4798      	blx	r3
 8018460:	9003      	str	r0, [sp, #12]
 8018462:	b110      	cbz	r0, 801846a <rcutils_repl_str+0x126>
 8018464:	9900      	ldr	r1, [sp, #0]
 8018466:	f002 fb59 	bl	801ab1c <strcpy>
 801846a:	4638      	mov	r0, r7
 801846c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018470:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018474:	4798      	blx	r3
 8018476:	9803      	ldr	r0, [sp, #12]
 8018478:	b007      	add	sp, #28
 801847a:	ecbd 8b02 	vpop	{d8}
 801847e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018482:	9b04      	ldr	r3, [sp, #16]
 8018484:	3401      	adds	r4, #1
 8018486:	1a9a      	subs	r2, r3, r2
 8018488:	4415      	add	r5, r2
 801848a:	f001 fed7 	bl	801a23c <memcpy>
 801848e:	455c      	cmp	r4, fp
 8018490:	d3c1      	bcc.n	8018416 <rcutils_repl_str+0xd2>
 8018492:	e7d9      	b.n	8018448 <rcutils_repl_str+0x104>
 8018494:	4647      	mov	r7, r8
 8018496:	2300      	movs	r3, #0
 8018498:	9303      	str	r3, [sp, #12]
 801849a:	e7e6      	b.n	801846a <rcutils_repl_str+0x126>

0801849c <rcutils_snprintf>:
 801849c:	b40c      	push	{r2, r3}
 801849e:	b530      	push	{r4, r5, lr}
 80184a0:	b083      	sub	sp, #12
 80184a2:	ab06      	add	r3, sp, #24
 80184a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80184a8:	9301      	str	r3, [sp, #4]
 80184aa:	b152      	cbz	r2, 80184c2 <rcutils_snprintf+0x26>
 80184ac:	b138      	cbz	r0, 80184be <rcutils_snprintf+0x22>
 80184ae:	b141      	cbz	r1, 80184c2 <rcutils_snprintf+0x26>
 80184b0:	f003 fad8 	bl	801ba64 <vsniprintf>
 80184b4:	b003      	add	sp, #12
 80184b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80184ba:	b002      	add	sp, #8
 80184bc:	4770      	bx	lr
 80184be:	2900      	cmp	r1, #0
 80184c0:	d0f6      	beq.n	80184b0 <rcutils_snprintf+0x14>
 80184c2:	f001 fdc9 	bl	801a058 <__errno>
 80184c6:	2316      	movs	r3, #22
 80184c8:	6003      	str	r3, [r0, #0]
 80184ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80184ce:	e7f1      	b.n	80184b4 <rcutils_snprintf+0x18>

080184d0 <rcutils_vsnprintf>:
 80184d0:	b570      	push	{r4, r5, r6, lr}
 80184d2:	b13a      	cbz	r2, 80184e4 <rcutils_vsnprintf+0x14>
 80184d4:	b120      	cbz	r0, 80184e0 <rcutils_vsnprintf+0x10>
 80184d6:	b129      	cbz	r1, 80184e4 <rcutils_vsnprintf+0x14>
 80184d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80184dc:	f003 bac2 	b.w	801ba64 <vsniprintf>
 80184e0:	2900      	cmp	r1, #0
 80184e2:	d0f9      	beq.n	80184d8 <rcutils_vsnprintf+0x8>
 80184e4:	f001 fdb8 	bl	801a058 <__errno>
 80184e8:	2316      	movs	r3, #22
 80184ea:	6003      	str	r3, [r0, #0]
 80184ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80184f0:	bd70      	pop	{r4, r5, r6, pc}
 80184f2:	bf00      	nop

080184f4 <rcutils_strdup>:
 80184f4:	b084      	sub	sp, #16
 80184f6:	b570      	push	{r4, r5, r6, lr}
 80184f8:	b082      	sub	sp, #8
 80184fa:	ac07      	add	r4, sp, #28
 80184fc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8018500:	4605      	mov	r5, r0
 8018502:	b1b0      	cbz	r0, 8018532 <rcutils_strdup+0x3e>
 8018504:	f7e7 fe6e 	bl	80001e4 <strlen>
 8018508:	1c42      	adds	r2, r0, #1
 801850a:	9b07      	ldr	r3, [sp, #28]
 801850c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801850e:	9201      	str	r2, [sp, #4]
 8018510:	4606      	mov	r6, r0
 8018512:	4610      	mov	r0, r2
 8018514:	4798      	blx	r3
 8018516:	4604      	mov	r4, r0
 8018518:	b128      	cbz	r0, 8018526 <rcutils_strdup+0x32>
 801851a:	9a01      	ldr	r2, [sp, #4]
 801851c:	4629      	mov	r1, r5
 801851e:	f001 fe8d 	bl	801a23c <memcpy>
 8018522:	2300      	movs	r3, #0
 8018524:	55a3      	strb	r3, [r4, r6]
 8018526:	4620      	mov	r0, r4
 8018528:	b002      	add	sp, #8
 801852a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801852e:	b004      	add	sp, #16
 8018530:	4770      	bx	lr
 8018532:	4604      	mov	r4, r0
 8018534:	e7f7      	b.n	8018526 <rcutils_strdup+0x32>
 8018536:	bf00      	nop

08018538 <rcutils_strndup>:
 8018538:	b082      	sub	sp, #8
 801853a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801853c:	460e      	mov	r6, r1
 801853e:	a906      	add	r1, sp, #24
 8018540:	e881 000c 	stmia.w	r1, {r2, r3}
 8018544:	4605      	mov	r5, r0
 8018546:	b180      	cbz	r0, 801856a <rcutils_strndup+0x32>
 8018548:	1c77      	adds	r7, r6, #1
 801854a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801854c:	4638      	mov	r0, r7
 801854e:	4790      	blx	r2
 8018550:	4604      	mov	r4, r0
 8018552:	b128      	cbz	r0, 8018560 <rcutils_strndup+0x28>
 8018554:	463a      	mov	r2, r7
 8018556:	4629      	mov	r1, r5
 8018558:	f001 fe70 	bl	801a23c <memcpy>
 801855c:	2300      	movs	r3, #0
 801855e:	55a3      	strb	r3, [r4, r6]
 8018560:	4620      	mov	r0, r4
 8018562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018566:	b002      	add	sp, #8
 8018568:	4770      	bx	lr
 801856a:	4604      	mov	r4, r0
 801856c:	e7f8      	b.n	8018560 <rcutils_strndup+0x28>
 801856e:	bf00      	nop

08018570 <rmw_get_zero_initialized_context>:
 8018570:	b510      	push	{r4, lr}
 8018572:	2250      	movs	r2, #80	; 0x50
 8018574:	4604      	mov	r4, r0
 8018576:	2100      	movs	r1, #0
 8018578:	f001 fe88 	bl	801a28c <memset>
 801857c:	4620      	mov	r0, r4
 801857e:	bd10      	pop	{r4, pc}

08018580 <rmw_validate_namespace_with_size>:
 8018580:	b340      	cbz	r0, 80185d4 <rmw_validate_namespace_with_size+0x54>
 8018582:	b5d0      	push	{r4, r6, r7, lr}
 8018584:	4614      	mov	r4, r2
 8018586:	b0c2      	sub	sp, #264	; 0x108
 8018588:	b332      	cbz	r2, 80185d8 <rmw_validate_namespace_with_size+0x58>
 801858a:	2901      	cmp	r1, #1
 801858c:	460f      	mov	r7, r1
 801858e:	461e      	mov	r6, r3
 8018590:	d102      	bne.n	8018598 <rmw_validate_namespace_with_size+0x18>
 8018592:	7803      	ldrb	r3, [r0, #0]
 8018594:	2b2f      	cmp	r3, #47	; 0x2f
 8018596:	d019      	beq.n	80185cc <rmw_validate_namespace_with_size+0x4c>
 8018598:	aa01      	add	r2, sp, #4
 801859a:	4669      	mov	r1, sp
 801859c:	f7f7 fd50 	bl	8010040 <rmw_validate_full_topic_name>
 80185a0:	b990      	cbnz	r0, 80185c8 <rmw_validate_namespace_with_size+0x48>
 80185a2:	9b00      	ldr	r3, [sp, #0]
 80185a4:	b14b      	cbz	r3, 80185ba <rmw_validate_namespace_with_size+0x3a>
 80185a6:	2b07      	cmp	r3, #7
 80185a8:	d007      	beq.n	80185ba <rmw_validate_namespace_with_size+0x3a>
 80185aa:	1e5a      	subs	r2, r3, #1
 80185ac:	2a05      	cmp	r2, #5
 80185ae:	d82b      	bhi.n	8018608 <rmw_validate_namespace_with_size+0x88>
 80185b0:	e8df f002 	tbb	[pc, r2]
 80185b4:	24211e1b 	.word	0x24211e1b
 80185b8:	1427      	.short	0x1427
 80185ba:	2ff5      	cmp	r7, #245	; 0xf5
 80185bc:	d906      	bls.n	80185cc <rmw_validate_namespace_with_size+0x4c>
 80185be:	2307      	movs	r3, #7
 80185c0:	6023      	str	r3, [r4, #0]
 80185c2:	b10e      	cbz	r6, 80185c8 <rmw_validate_namespace_with_size+0x48>
 80185c4:	23f4      	movs	r3, #244	; 0xf4
 80185c6:	6033      	str	r3, [r6, #0]
 80185c8:	b042      	add	sp, #264	; 0x108
 80185ca:	bdd0      	pop	{r4, r6, r7, pc}
 80185cc:	2000      	movs	r0, #0
 80185ce:	6020      	str	r0, [r4, #0]
 80185d0:	b042      	add	sp, #264	; 0x108
 80185d2:	bdd0      	pop	{r4, r6, r7, pc}
 80185d4:	200b      	movs	r0, #11
 80185d6:	4770      	bx	lr
 80185d8:	200b      	movs	r0, #11
 80185da:	e7f5      	b.n	80185c8 <rmw_validate_namespace_with_size+0x48>
 80185dc:	2306      	movs	r3, #6
 80185de:	6023      	str	r3, [r4, #0]
 80185e0:	2e00      	cmp	r6, #0
 80185e2:	d0f1      	beq.n	80185c8 <rmw_validate_namespace_with_size+0x48>
 80185e4:	9b01      	ldr	r3, [sp, #4]
 80185e6:	6033      	str	r3, [r6, #0]
 80185e8:	e7ee      	b.n	80185c8 <rmw_validate_namespace_with_size+0x48>
 80185ea:	2301      	movs	r3, #1
 80185ec:	6023      	str	r3, [r4, #0]
 80185ee:	e7f7      	b.n	80185e0 <rmw_validate_namespace_with_size+0x60>
 80185f0:	2302      	movs	r3, #2
 80185f2:	6023      	str	r3, [r4, #0]
 80185f4:	e7f4      	b.n	80185e0 <rmw_validate_namespace_with_size+0x60>
 80185f6:	2303      	movs	r3, #3
 80185f8:	6023      	str	r3, [r4, #0]
 80185fa:	e7f1      	b.n	80185e0 <rmw_validate_namespace_with_size+0x60>
 80185fc:	2304      	movs	r3, #4
 80185fe:	6023      	str	r3, [r4, #0]
 8018600:	e7ee      	b.n	80185e0 <rmw_validate_namespace_with_size+0x60>
 8018602:	2305      	movs	r3, #5
 8018604:	6023      	str	r3, [r4, #0]
 8018606:	e7eb      	b.n	80185e0 <rmw_validate_namespace_with_size+0x60>
 8018608:	4a03      	ldr	r2, [pc, #12]	; (8018618 <rmw_validate_namespace_with_size+0x98>)
 801860a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801860e:	a802      	add	r0, sp, #8
 8018610:	f7ff ff44 	bl	801849c <rcutils_snprintf>
 8018614:	2001      	movs	r0, #1
 8018616:	e7d7      	b.n	80185c8 <rmw_validate_namespace_with_size+0x48>
 8018618:	0801fd68 	.word	0x0801fd68

0801861c <rmw_validate_namespace>:
 801861c:	b168      	cbz	r0, 801863a <rmw_validate_namespace+0x1e>
 801861e:	b570      	push	{r4, r5, r6, lr}
 8018620:	460d      	mov	r5, r1
 8018622:	4616      	mov	r6, r2
 8018624:	4604      	mov	r4, r0
 8018626:	f7e7 fddd 	bl	80001e4 <strlen>
 801862a:	4633      	mov	r3, r6
 801862c:	4601      	mov	r1, r0
 801862e:	462a      	mov	r2, r5
 8018630:	4620      	mov	r0, r4
 8018632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018636:	f7ff bfa3 	b.w	8018580 <rmw_validate_namespace_with_size>
 801863a:	200b      	movs	r0, #11
 801863c:	4770      	bx	lr
 801863e:	bf00      	nop

08018640 <rmw_namespace_validation_result_string>:
 8018640:	2807      	cmp	r0, #7
 8018642:	bf9a      	itte	ls
 8018644:	4b02      	ldrls	r3, [pc, #8]	; (8018650 <rmw_namespace_validation_result_string+0x10>)
 8018646:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801864a:	4802      	ldrhi	r0, [pc, #8]	; (8018654 <rmw_namespace_validation_result_string+0x14>)
 801864c:	4770      	bx	lr
 801864e:	bf00      	nop
 8018650:	0801ff60 	.word	0x0801ff60
 8018654:	0801fdb8 	.word	0x0801fdb8

08018658 <rmw_validate_node_name>:
 8018658:	2800      	cmp	r0, #0
 801865a:	d03b      	beq.n	80186d4 <rmw_validate_node_name+0x7c>
 801865c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018660:	460f      	mov	r7, r1
 8018662:	2900      	cmp	r1, #0
 8018664:	d038      	beq.n	80186d8 <rmw_validate_node_name+0x80>
 8018666:	4615      	mov	r5, r2
 8018668:	4604      	mov	r4, r0
 801866a:	f7e7 fdbb 	bl	80001e4 <strlen>
 801866e:	b1e0      	cbz	r0, 80186aa <rmw_validate_node_name+0x52>
 8018670:	1e63      	subs	r3, r4, #1
 8018672:	eb03 0e00 	add.w	lr, r3, r0
 8018676:	f1c4 0c01 	rsb	ip, r4, #1
 801867a:	eb0c 0803 	add.w	r8, ip, r3
 801867e:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8018682:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8018686:	f026 0220 	bic.w	r2, r6, #32
 801868a:	2909      	cmp	r1, #9
 801868c:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 8018690:	d913      	bls.n	80186ba <rmw_validate_node_name+0x62>
 8018692:	2a19      	cmp	r2, #25
 8018694:	d911      	bls.n	80186ba <rmw_validate_node_name+0x62>
 8018696:	2e5f      	cmp	r6, #95	; 0x5f
 8018698:	d00f      	beq.n	80186ba <rmw_validate_node_name+0x62>
 801869a:	2302      	movs	r3, #2
 801869c:	603b      	str	r3, [r7, #0]
 801869e:	b10d      	cbz	r5, 80186a4 <rmw_validate_node_name+0x4c>
 80186a0:	f8c5 8000 	str.w	r8, [r5]
 80186a4:	2000      	movs	r0, #0
 80186a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186aa:	2301      	movs	r3, #1
 80186ac:	603b      	str	r3, [r7, #0]
 80186ae:	2d00      	cmp	r5, #0
 80186b0:	d0f8      	beq.n	80186a4 <rmw_validate_node_name+0x4c>
 80186b2:	2000      	movs	r0, #0
 80186b4:	6028      	str	r0, [r5, #0]
 80186b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186ba:	4573      	cmp	r3, lr
 80186bc:	d1dd      	bne.n	801867a <rmw_validate_node_name+0x22>
 80186be:	7822      	ldrb	r2, [r4, #0]
 80186c0:	4b0d      	ldr	r3, [pc, #52]	; (80186f8 <rmw_validate_node_name+0xa0>)
 80186c2:	5cd3      	ldrb	r3, [r2, r3]
 80186c4:	f013 0304 	ands.w	r3, r3, #4
 80186c8:	d110      	bne.n	80186ec <rmw_validate_node_name+0x94>
 80186ca:	28ff      	cmp	r0, #255	; 0xff
 80186cc:	d806      	bhi.n	80186dc <rmw_validate_node_name+0x84>
 80186ce:	603b      	str	r3, [r7, #0]
 80186d0:	4618      	mov	r0, r3
 80186d2:	e7e8      	b.n	80186a6 <rmw_validate_node_name+0x4e>
 80186d4:	200b      	movs	r0, #11
 80186d6:	4770      	bx	lr
 80186d8:	200b      	movs	r0, #11
 80186da:	e7e4      	b.n	80186a6 <rmw_validate_node_name+0x4e>
 80186dc:	2204      	movs	r2, #4
 80186de:	603a      	str	r2, [r7, #0]
 80186e0:	2d00      	cmp	r5, #0
 80186e2:	d0df      	beq.n	80186a4 <rmw_validate_node_name+0x4c>
 80186e4:	22fe      	movs	r2, #254	; 0xfe
 80186e6:	4618      	mov	r0, r3
 80186e8:	602a      	str	r2, [r5, #0]
 80186ea:	e7dc      	b.n	80186a6 <rmw_validate_node_name+0x4e>
 80186ec:	2303      	movs	r3, #3
 80186ee:	603b      	str	r3, [r7, #0]
 80186f0:	2d00      	cmp	r5, #0
 80186f2:	d1de      	bne.n	80186b2 <rmw_validate_node_name+0x5a>
 80186f4:	e7d6      	b.n	80186a4 <rmw_validate_node_name+0x4c>
 80186f6:	bf00      	nop
 80186f8:	08020111 	.word	0x08020111

080186fc <rmw_node_name_validation_result_string>:
 80186fc:	2804      	cmp	r0, #4
 80186fe:	bf9a      	itte	ls
 8018700:	4b02      	ldrls	r3, [pc, #8]	; (801870c <rmw_node_name_validation_result_string+0x10>)
 8018702:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8018706:	4802      	ldrhi	r0, [pc, #8]	; (8018710 <rmw_node_name_validation_result_string+0x14>)
 8018708:	4770      	bx	lr
 801870a:	bf00      	nop
 801870c:	0802006c 	.word	0x0802006c
 8018710:	0801ff80 	.word	0x0801ff80

08018714 <on_status>:
 8018714:	b082      	sub	sp, #8
 8018716:	b002      	add	sp, #8
 8018718:	4770      	bx	lr
 801871a:	bf00      	nop

0801871c <on_topic>:
 801871c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018720:	4a21      	ldr	r2, [pc, #132]	; (80187a8 <on_topic+0x8c>)
 8018722:	b094      	sub	sp, #80	; 0x50
 8018724:	6812      	ldr	r2, [r2, #0]
 8018726:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8018728:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801872c:	9113      	str	r1, [sp, #76]	; 0x4c
 801872e:	9312      	str	r3, [sp, #72]	; 0x48
 8018730:	b3ba      	cbz	r2, 80187a2 <on_topic+0x86>
 8018732:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8018736:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801873a:	e001      	b.n	8018740 <on_topic+0x24>
 801873c:	6892      	ldr	r2, [r2, #8]
 801873e:	b382      	cbz	r2, 80187a2 <on_topic+0x86>
 8018740:	68d4      	ldr	r4, [r2, #12]
 8018742:	8aa3      	ldrh	r3, [r4, #20]
 8018744:	428b      	cmp	r3, r1
 8018746:	d1f9      	bne.n	801873c <on_topic+0x20>
 8018748:	7da3      	ldrb	r3, [r4, #22]
 801874a:	4283      	cmp	r3, r0
 801874c:	d1f6      	bne.n	801873c <on_topic+0x20>
 801874e:	2248      	movs	r2, #72	; 0x48
 8018750:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8018754:	4668      	mov	r0, sp
 8018756:	f001 fd71 	bl	801a23c <memcpy>
 801875a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 801875e:	4620      	mov	r0, r4
 8018760:	f7f8 fd5e 	bl	8011220 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018764:	4607      	mov	r7, r0
 8018766:	b1e0      	cbz	r0, 80187a2 <on_topic+0x86>
 8018768:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801876c:	462a      	mov	r2, r5
 801876e:	4630      	mov	r0, r6
 8018770:	f108 0110 	add.w	r1, r8, #16
 8018774:	f7f9 fc10 	bl	8011f98 <ucdr_deserialize_array_uint8_t>
 8018778:	b930      	cbnz	r0, 8018788 <on_topic+0x6c>
 801877a:	480c      	ldr	r0, [pc, #48]	; (80187ac <on_topic+0x90>)
 801877c:	4639      	mov	r1, r7
 801877e:	b014      	add	sp, #80	; 0x50
 8018780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018784:	f000 b8ba 	b.w	80188fc <put_memory>
 8018788:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801878c:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8018790:	f7f8 fb84 	bl	8010e9c <rmw_uros_epoch_nanos>
 8018794:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8018798:	2305      	movs	r3, #5
 801879a:	e9c2 0100 	strd	r0, r1, [r2]
 801879e:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 80187a2:	b014      	add	sp, #80	; 0x50
 80187a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187a8:	200148fc 	.word	0x200148fc
 80187ac:	20011690 	.word	0x20011690

080187b0 <on_request>:
 80187b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80187b4:	4822      	ldr	r0, [pc, #136]	; (8018840 <on_request+0x90>)
 80187b6:	b095      	sub	sp, #84	; 0x54
 80187b8:	9113      	str	r1, [sp, #76]	; 0x4c
 80187ba:	6801      	ldr	r1, [r0, #0]
 80187bc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80187be:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 80187c2:	2900      	cmp	r1, #0
 80187c4:	d039      	beq.n	801883a <on_request+0x8a>
 80187c6:	461d      	mov	r5, r3
 80187c8:	e001      	b.n	80187ce <on_request+0x1e>
 80187ca:	6889      	ldr	r1, [r1, #8]
 80187cc:	b3a9      	cbz	r1, 801883a <on_request+0x8a>
 80187ce:	68cc      	ldr	r4, [r1, #12]
 80187d0:	8b20      	ldrh	r0, [r4, #24]
 80187d2:	4290      	cmp	r0, r2
 80187d4:	d1f9      	bne.n	80187ca <on_request+0x1a>
 80187d6:	2248      	movs	r2, #72	; 0x48
 80187d8:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80187dc:	4668      	mov	r0, sp
 80187de:	f001 fd2d 	bl	801a23c <memcpy>
 80187e2:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80187e6:	4620      	mov	r0, r4
 80187e8:	f7f8 fd1a 	bl	8011220 <rmw_uxrce_get_static_input_buffer_for_entity>
 80187ec:	4680      	mov	r8, r0
 80187ee:	b320      	cbz	r0, 801883a <on_request+0x8a>
 80187f0:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80187f4:	4632      	mov	r2, r6
 80187f6:	4638      	mov	r0, r7
 80187f8:	f109 0110 	add.w	r1, r9, #16
 80187fc:	f7f9 fbcc 	bl	8011f98 <ucdr_deserialize_array_uint8_t>
 8018800:	b930      	cbnz	r0, 8018810 <on_request+0x60>
 8018802:	4810      	ldr	r0, [pc, #64]	; (8018844 <on_request+0x94>)
 8018804:	4641      	mov	r1, r8
 8018806:	b015      	add	sp, #84	; 0x54
 8018808:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801880c:	f000 b876 	b.w	80188fc <put_memory>
 8018810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018812:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8018816:	f609 0428 	addw	r4, r9, #2088	; 0x828
 801881a:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 801881e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018820:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018824:	e884 0003 	stmia.w	r4, {r0, r1}
 8018828:	f7f8 fb38 	bl	8010e9c <rmw_uros_epoch_nanos>
 801882c:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8018830:	2303      	movs	r3, #3
 8018832:	e9c2 0100 	strd	r0, r1, [r2]
 8018836:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 801883a:	b015      	add	sp, #84	; 0x54
 801883c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018840:	200148ec 	.word	0x200148ec
 8018844:	20011690 	.word	0x20011690

08018848 <on_reply>:
 8018848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801884c:	4821      	ldr	r0, [pc, #132]	; (80188d4 <on_reply+0x8c>)
 801884e:	b095      	sub	sp, #84	; 0x54
 8018850:	9113      	str	r1, [sp, #76]	; 0x4c
 8018852:	6801      	ldr	r1, [r0, #0]
 8018854:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8018856:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 801885a:	b3b9      	cbz	r1, 80188cc <on_reply+0x84>
 801885c:	461d      	mov	r5, r3
 801885e:	e001      	b.n	8018864 <on_reply+0x1c>
 8018860:	6889      	ldr	r1, [r1, #8]
 8018862:	b399      	cbz	r1, 80188cc <on_reply+0x84>
 8018864:	68cc      	ldr	r4, [r1, #12]
 8018866:	8b20      	ldrh	r0, [r4, #24]
 8018868:	4290      	cmp	r0, r2
 801886a:	d1f9      	bne.n	8018860 <on_reply+0x18>
 801886c:	2248      	movs	r2, #72	; 0x48
 801886e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8018872:	4668      	mov	r0, sp
 8018874:	f001 fce2 	bl	801a23c <memcpy>
 8018878:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 801887c:	4620      	mov	r0, r4
 801887e:	f7f8 fccf 	bl	8011220 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018882:	4680      	mov	r8, r0
 8018884:	b310      	cbz	r0, 80188cc <on_reply+0x84>
 8018886:	f8d0 900c 	ldr.w	r9, [r0, #12]
 801888a:	4632      	mov	r2, r6
 801888c:	4638      	mov	r0, r7
 801888e:	f109 0110 	add.w	r1, r9, #16
 8018892:	f7f9 fb81 	bl	8011f98 <ucdr_deserialize_array_uint8_t>
 8018896:	b930      	cbnz	r0, 80188a6 <on_reply+0x5e>
 8018898:	480f      	ldr	r0, [pc, #60]	; (80188d8 <on_reply+0x90>)
 801889a:	4641      	mov	r1, r8
 801889c:	b015      	add	sp, #84	; 0x54
 801889e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80188a2:	f000 b82b 	b.w	80188fc <put_memory>
 80188a6:	b2aa      	uxth	r2, r5
 80188a8:	2300      	movs	r3, #0
 80188aa:	f609 0128 	addw	r1, r9, #2088	; 0x828
 80188ae:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 80188b2:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 80188b6:	e9c1 2300 	strd	r2, r3, [r1]
 80188ba:	f7f8 faef 	bl	8010e9c <rmw_uros_epoch_nanos>
 80188be:	f609 0218 	addw	r2, r9, #2072	; 0x818
 80188c2:	2304      	movs	r3, #4
 80188c4:	e9c2 0100 	strd	r0, r1, [r2]
 80188c8:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80188cc:	b015      	add	sp, #84	; 0x54
 80188ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188d2:	bf00      	nop
 80188d4:	20011f20 	.word	0x20011f20
 80188d8:	20011690 	.word	0x20011690

080188dc <get_memory>:
 80188dc:	4603      	mov	r3, r0
 80188de:	6840      	ldr	r0, [r0, #4]
 80188e0:	b158      	cbz	r0, 80188fa <get_memory+0x1e>
 80188e2:	6882      	ldr	r2, [r0, #8]
 80188e4:	605a      	str	r2, [r3, #4]
 80188e6:	b10a      	cbz	r2, 80188ec <get_memory+0x10>
 80188e8:	2100      	movs	r1, #0
 80188ea:	6051      	str	r1, [r2, #4]
 80188ec:	681a      	ldr	r2, [r3, #0]
 80188ee:	6082      	str	r2, [r0, #8]
 80188f0:	b102      	cbz	r2, 80188f4 <get_memory+0x18>
 80188f2:	6050      	str	r0, [r2, #4]
 80188f4:	2200      	movs	r2, #0
 80188f6:	6042      	str	r2, [r0, #4]
 80188f8:	6018      	str	r0, [r3, #0]
 80188fa:	4770      	bx	lr

080188fc <put_memory>:
 80188fc:	684b      	ldr	r3, [r1, #4]
 80188fe:	b10b      	cbz	r3, 8018904 <put_memory+0x8>
 8018900:	688a      	ldr	r2, [r1, #8]
 8018902:	609a      	str	r2, [r3, #8]
 8018904:	688a      	ldr	r2, [r1, #8]
 8018906:	b102      	cbz	r2, 801890a <put_memory+0xe>
 8018908:	6053      	str	r3, [r2, #4]
 801890a:	6803      	ldr	r3, [r0, #0]
 801890c:	428b      	cmp	r3, r1
 801890e:	6843      	ldr	r3, [r0, #4]
 8018910:	bf08      	it	eq
 8018912:	6002      	streq	r2, [r0, #0]
 8018914:	608b      	str	r3, [r1, #8]
 8018916:	b103      	cbz	r3, 801891a <put_memory+0x1e>
 8018918:	6059      	str	r1, [r3, #4]
 801891a:	2300      	movs	r3, #0
 801891c:	604b      	str	r3, [r1, #4]
 801891e:	6041      	str	r1, [r0, #4]
 8018920:	4770      	bx	lr
 8018922:	bf00      	nop

08018924 <rmw_destroy_client>:
 8018924:	b538      	push	{r3, r4, r5, lr}
 8018926:	b128      	cbz	r0, 8018934 <rmw_destroy_client+0x10>
 8018928:	4604      	mov	r4, r0
 801892a:	6800      	ldr	r0, [r0, #0]
 801892c:	460d      	mov	r5, r1
 801892e:	f7f8 fdcd 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 8018932:	b910      	cbnz	r0, 801893a <rmw_destroy_client+0x16>
 8018934:	2401      	movs	r4, #1
 8018936:	4620      	mov	r0, r4
 8018938:	bd38      	pop	{r3, r4, r5, pc}
 801893a:	6863      	ldr	r3, [r4, #4]
 801893c:	2b00      	cmp	r3, #0
 801893e:	d0f9      	beq.n	8018934 <rmw_destroy_client+0x10>
 8018940:	2d00      	cmp	r5, #0
 8018942:	d0f7      	beq.n	8018934 <rmw_destroy_client+0x10>
 8018944:	6828      	ldr	r0, [r5, #0]
 8018946:	f7f8 fdc1 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 801894a:	2800      	cmp	r0, #0
 801894c:	d0f2      	beq.n	8018934 <rmw_destroy_client+0x10>
 801894e:	686b      	ldr	r3, [r5, #4]
 8018950:	2b00      	cmp	r3, #0
 8018952:	d0ef      	beq.n	8018934 <rmw_destroy_client+0x10>
 8018954:	6864      	ldr	r4, [r4, #4]
 8018956:	691a      	ldr	r2, [r3, #16]
 8018958:	6920      	ldr	r0, [r4, #16]
 801895a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801895e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018962:	6819      	ldr	r1, [r3, #0]
 8018964:	f7fa f9fa 	bl	8012d5c <uxr_buffer_delete_entity>
 8018968:	4602      	mov	r2, r0
 801896a:	6920      	ldr	r0, [r4, #16]
 801896c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8018970:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8018974:	f7f8 fd40 	bl	80113f8 <run_xrce_session>
 8018978:	2800      	cmp	r0, #0
 801897a:	4628      	mov	r0, r5
 801897c:	bf14      	ite	ne
 801897e:	2400      	movne	r4, #0
 8018980:	2402      	moveq	r4, #2
 8018982:	f7f8 fc2d 	bl	80111e0 <rmw_uxrce_fini_client_memory>
 8018986:	e7d6      	b.n	8018936 <rmw_destroy_client+0x12>

08018988 <rmw_get_implementation_identifier>:
 8018988:	4b01      	ldr	r3, [pc, #4]	; (8018990 <rmw_get_implementation_identifier+0x8>)
 801898a:	6818      	ldr	r0, [r3, #0]
 801898c:	4770      	bx	lr
 801898e:	bf00      	nop
 8018990:	08020098 	.word	0x08020098

08018994 <create_topic>:
 8018994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018998:	4605      	mov	r5, r0
 801899a:	b085      	sub	sp, #20
 801899c:	4822      	ldr	r0, [pc, #136]	; (8018a28 <create_topic+0x94>)
 801899e:	460f      	mov	r7, r1
 80189a0:	4616      	mov	r6, r2
 80189a2:	f7ff ff9b 	bl	80188dc <get_memory>
 80189a6:	4604      	mov	r4, r0
 80189a8:	b3a0      	cbz	r0, 8018a14 <create_topic+0x80>
 80189aa:	692a      	ldr	r2, [r5, #16]
 80189ac:	68c4      	ldr	r4, [r0, #12]
 80189ae:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8018a2c <create_topic+0x98>
 80189b2:	61a5      	str	r5, [r4, #24]
 80189b4:	f241 5396 	movw	r3, #5526	; 0x1596
 80189b8:	6166      	str	r6, [r4, #20]
 80189ba:	5ad0      	ldrh	r0, [r2, r3]
 80189bc:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8018a30 <create_topic+0x9c>
 80189c0:	1c41      	adds	r1, r0, #1
 80189c2:	52d1      	strh	r1, [r2, r3]
 80189c4:	2102      	movs	r1, #2
 80189c6:	f7fa fc97 	bl	80132f8 <uxr_object_id>
 80189ca:	4641      	mov	r1, r8
 80189cc:	6120      	str	r0, [r4, #16]
 80189ce:	223c      	movs	r2, #60	; 0x3c
 80189d0:	4638      	mov	r0, r7
 80189d2:	f7f8 fd65 	bl	80114a0 <generate_topic_name>
 80189d6:	4649      	mov	r1, r9
 80189d8:	2264      	movs	r2, #100	; 0x64
 80189da:	4630      	mov	r0, r6
 80189dc:	f7f8 fd28 	bl	8011430 <generate_type_name>
 80189e0:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 80189e4:	2106      	movs	r1, #6
 80189e6:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80189ea:	f8cd 9004 	str.w	r9, [sp, #4]
 80189ee:	f8cd 8000 	str.w	r8, [sp]
 80189f2:	9102      	str	r1, [sp, #8]
 80189f4:	6811      	ldr	r1, [r2, #0]
 80189f6:	6922      	ldr	r2, [r4, #16]
 80189f8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80189fc:	f7fa fa2c 	bl	8012e58 <uxr_buffer_create_topic_bin>
 8018a00:	4602      	mov	r2, r0
 8018a02:	6928      	ldr	r0, [r5, #16]
 8018a04:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8018a08:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8018a0c:	f7f8 fcf4 	bl	80113f8 <run_xrce_session>
 8018a10:	4605      	mov	r5, r0
 8018a12:	b118      	cbz	r0, 8018a1c <create_topic+0x88>
 8018a14:	4620      	mov	r0, r4
 8018a16:	b005      	add	sp, #20
 8018a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a1c:	4620      	mov	r0, r4
 8018a1e:	f7f8 fbf3 	bl	8011208 <rmw_uxrce_fini_topic_memory>
 8018a22:	462c      	mov	r4, r5
 8018a24:	e7f6      	b.n	8018a14 <create_topic+0x80>
 8018a26:	bf00      	nop
 8018a28:	20014828 	.word	0x20014828
 8018a2c:	20010498 	.word	0x20010498
 8018a30:	200104d4 	.word	0x200104d4

08018a34 <destroy_topic>:
 8018a34:	b538      	push	{r3, r4, r5, lr}
 8018a36:	6985      	ldr	r5, [r0, #24]
 8018a38:	b1d5      	cbz	r5, 8018a70 <destroy_topic+0x3c>
 8018a3a:	4604      	mov	r4, r0
 8018a3c:	6928      	ldr	r0, [r5, #16]
 8018a3e:	6922      	ldr	r2, [r4, #16]
 8018a40:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018a44:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018a48:	6819      	ldr	r1, [r3, #0]
 8018a4a:	f7fa f987 	bl	8012d5c <uxr_buffer_delete_entity>
 8018a4e:	4602      	mov	r2, r0
 8018a50:	6928      	ldr	r0, [r5, #16]
 8018a52:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8018a56:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8018a5a:	f7f8 fccd 	bl	80113f8 <run_xrce_session>
 8018a5e:	2800      	cmp	r0, #0
 8018a60:	4620      	mov	r0, r4
 8018a62:	bf14      	ite	ne
 8018a64:	2400      	movne	r4, #0
 8018a66:	2402      	moveq	r4, #2
 8018a68:	f7f8 fbce 	bl	8011208 <rmw_uxrce_fini_topic_memory>
 8018a6c:	4620      	mov	r0, r4
 8018a6e:	bd38      	pop	{r3, r4, r5, pc}
 8018a70:	2401      	movs	r4, #1
 8018a72:	4620      	mov	r0, r4
 8018a74:	bd38      	pop	{r3, r4, r5, pc}
 8018a76:	bf00      	nop

08018a78 <rmw_take_request>:
 8018a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018a7c:	4605      	mov	r5, r0
 8018a7e:	b089      	sub	sp, #36	; 0x24
 8018a80:	460c      	mov	r4, r1
 8018a82:	4690      	mov	r8, r2
 8018a84:	461f      	mov	r7, r3
 8018a86:	b10b      	cbz	r3, 8018a8c <rmw_take_request+0x14>
 8018a88:	2300      	movs	r3, #0
 8018a8a:	703b      	strb	r3, [r7, #0]
 8018a8c:	6828      	ldr	r0, [r5, #0]
 8018a8e:	f7f8 fd1d 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 8018a92:	2800      	cmp	r0, #0
 8018a94:	d040      	beq.n	8018b18 <rmw_take_request+0xa0>
 8018a96:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8018a9a:	f7f8 fc35 	bl	8011308 <rmw_uxrce_clean_expired_static_input_buffer>
 8018a9e:	4648      	mov	r0, r9
 8018aa0:	f7f8 fc0a 	bl	80112b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018aa4:	4606      	mov	r6, r0
 8018aa6:	2800      	cmp	r0, #0
 8018aa8:	d03a      	beq.n	8018b20 <rmw_take_request+0xa8>
 8018aaa:	68c5      	ldr	r5, [r0, #12]
 8018aac:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8018ab0:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 8018ab4:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8018ab8:	7423      	strb	r3, [r4, #16]
 8018aba:	e9c4 1208 	strd	r1, r2, [r4, #32]
 8018abe:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 8018ac2:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 8018ac6:	74e2      	strb	r2, [r4, #19]
 8018ac8:	f8a4 3011 	strh.w	r3, [r4, #17]
 8018acc:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 8018ad0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 8018ad4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 8018ad8:	61e1      	str	r1, [r4, #28]
 8018ada:	6162      	str	r2, [r4, #20]
 8018adc:	61a3      	str	r3, [r4, #24]
 8018ade:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8018ae2:	689b      	ldr	r3, [r3, #8]
 8018ae4:	4798      	blx	r3
 8018ae6:	6844      	ldr	r4, [r0, #4]
 8018ae8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8018aec:	f105 0110 	add.w	r1, r5, #16
 8018af0:	4668      	mov	r0, sp
 8018af2:	f7fa f855 	bl	8012ba0 <ucdr_init_buffer>
 8018af6:	68e3      	ldr	r3, [r4, #12]
 8018af8:	4641      	mov	r1, r8
 8018afa:	4668      	mov	r0, sp
 8018afc:	4798      	blx	r3
 8018afe:	4631      	mov	r1, r6
 8018b00:	4604      	mov	r4, r0
 8018b02:	4809      	ldr	r0, [pc, #36]	; (8018b28 <rmw_take_request+0xb0>)
 8018b04:	f7ff fefa 	bl	80188fc <put_memory>
 8018b08:	b107      	cbz	r7, 8018b0c <rmw_take_request+0x94>
 8018b0a:	703c      	strb	r4, [r7, #0]
 8018b0c:	f084 0001 	eor.w	r0, r4, #1
 8018b10:	b2c0      	uxtb	r0, r0
 8018b12:	b009      	add	sp, #36	; 0x24
 8018b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b18:	200c      	movs	r0, #12
 8018b1a:	b009      	add	sp, #36	; 0x24
 8018b1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b20:	2001      	movs	r0, #1
 8018b22:	b009      	add	sp, #36	; 0x24
 8018b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b28:	20011690 	.word	0x20011690

08018b2c <rmw_send_response>:
 8018b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b2e:	4605      	mov	r5, r0
 8018b30:	b091      	sub	sp, #68	; 0x44
 8018b32:	6800      	ldr	r0, [r0, #0]
 8018b34:	460c      	mov	r4, r1
 8018b36:	4616      	mov	r6, r2
 8018b38:	f7f8 fcc8 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 8018b3c:	2800      	cmp	r0, #0
 8018b3e:	d043      	beq.n	8018bc8 <rmw_send_response+0x9c>
 8018b40:	4623      	mov	r3, r4
 8018b42:	4627      	mov	r7, r4
 8018b44:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8018b48:	f837 ef01 	ldrh.w	lr, [r7, #1]!
 8018b4c:	6859      	ldr	r1, [r3, #4]
 8018b4e:	686d      	ldr	r5, [r5, #4]
 8018b50:	689a      	ldr	r2, [r3, #8]
 8018b52:	78bb      	ldrb	r3, [r7, #2]
 8018b54:	f894 c000 	ldrb.w	ip, [r4]
 8018b58:	6967      	ldr	r7, [r4, #20]
 8018b5a:	f88d 3016 	strb.w	r3, [sp, #22]
 8018b5e:	ab02      	add	r3, sp, #8
 8018b60:	f8ad e014 	strh.w	lr, [sp, #20]
 8018b64:	f88d c017 	strb.w	ip, [sp, #23]
 8018b68:	9706      	str	r7, [sp, #24]
 8018b6a:	c307      	stmia	r3!, {r0, r1, r2}
 8018b6c:	696b      	ldr	r3, [r5, #20]
 8018b6e:	6922      	ldr	r2, [r4, #16]
 8018b70:	9207      	str	r2, [sp, #28]
 8018b72:	68db      	ldr	r3, [r3, #12]
 8018b74:	6fac      	ldr	r4, [r5, #120]	; 0x78
 8018b76:	4798      	blx	r3
 8018b78:	4603      	mov	r3, r0
 8018b7a:	4630      	mov	r0, r6
 8018b7c:	685f      	ldr	r7, [r3, #4]
 8018b7e:	693b      	ldr	r3, [r7, #16]
 8018b80:	4798      	blx	r3
 8018b82:	6923      	ldr	r3, [r4, #16]
 8018b84:	3018      	adds	r0, #24
 8018b86:	9000      	str	r0, [sp, #0]
 8018b88:	692a      	ldr	r2, [r5, #16]
 8018b8a:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8018b8c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8018b90:	ab08      	add	r3, sp, #32
 8018b92:	f7fc fa6d 	bl	8015070 <uxr_prepare_output_stream>
 8018b96:	b910      	cbnz	r0, 8018b9e <rmw_send_response+0x72>
 8018b98:	2001      	movs	r0, #1
 8018b9a:	b011      	add	sp, #68	; 0x44
 8018b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b9e:	a902      	add	r1, sp, #8
 8018ba0:	a808      	add	r0, sp, #32
 8018ba2:	f7fd f8c3 	bl	8015d2c <uxr_serialize_SampleIdentity>
 8018ba6:	68bb      	ldr	r3, [r7, #8]
 8018ba8:	a908      	add	r1, sp, #32
 8018baa:	4630      	mov	r0, r6
 8018bac:	4798      	blx	r3
 8018bae:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8018bb2:	6920      	ldr	r0, [r4, #16]
 8018bb4:	2b01      	cmp	r3, #1
 8018bb6:	d00a      	beq.n	8018bce <rmw_send_response+0xa2>
 8018bb8:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8018bba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018bbe:	f7fb f9c5 	bl	8013f4c <uxr_run_session_until_confirm_delivery>
 8018bc2:	2000      	movs	r0, #0
 8018bc4:	b011      	add	sp, #68	; 0x44
 8018bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bc8:	200c      	movs	r0, #12
 8018bca:	b011      	add	sp, #68	; 0x44
 8018bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bce:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018bd2:	f7fb f927 	bl	8013e24 <uxr_flash_output_streams>
 8018bd6:	2000      	movs	r0, #0
 8018bd8:	b011      	add	sp, #68	; 0x44
 8018bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018bdc <rmw_take_response>:
 8018bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018be0:	4605      	mov	r5, r0
 8018be2:	b089      	sub	sp, #36	; 0x24
 8018be4:	460f      	mov	r7, r1
 8018be6:	4690      	mov	r8, r2
 8018be8:	461c      	mov	r4, r3
 8018bea:	b10b      	cbz	r3, 8018bf0 <rmw_take_response+0x14>
 8018bec:	2300      	movs	r3, #0
 8018bee:	7023      	strb	r3, [r4, #0]
 8018bf0:	6828      	ldr	r0, [r5, #0]
 8018bf2:	f7f8 fc6b 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 8018bf6:	b360      	cbz	r0, 8018c52 <rmw_take_response+0x76>
 8018bf8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8018bfc:	f7f8 fb84 	bl	8011308 <rmw_uxrce_clean_expired_static_input_buffer>
 8018c00:	4648      	mov	r0, r9
 8018c02:	f7f8 fb59 	bl	80112b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018c06:	4606      	mov	r6, r0
 8018c08:	b338      	cbz	r0, 8018c5a <rmw_take_response+0x7e>
 8018c0a:	68c5      	ldr	r5, [r0, #12]
 8018c0c:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8018c10:	f605 0328 	addw	r3, r5, #2088	; 0x828
 8018c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c18:	68c9      	ldr	r1, [r1, #12]
 8018c1a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8018c1e:	4788      	blx	r1
 8018c20:	6847      	ldr	r7, [r0, #4]
 8018c22:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8018c26:	f105 0110 	add.w	r1, r5, #16
 8018c2a:	4668      	mov	r0, sp
 8018c2c:	f7f9 ffb8 	bl	8012ba0 <ucdr_init_buffer>
 8018c30:	4641      	mov	r1, r8
 8018c32:	68fb      	ldr	r3, [r7, #12]
 8018c34:	4668      	mov	r0, sp
 8018c36:	4798      	blx	r3
 8018c38:	4631      	mov	r1, r6
 8018c3a:	4605      	mov	r5, r0
 8018c3c:	4809      	ldr	r0, [pc, #36]	; (8018c64 <rmw_take_response+0x88>)
 8018c3e:	f7ff fe5d 	bl	80188fc <put_memory>
 8018c42:	b104      	cbz	r4, 8018c46 <rmw_take_response+0x6a>
 8018c44:	7025      	strb	r5, [r4, #0]
 8018c46:	f085 0001 	eor.w	r0, r5, #1
 8018c4a:	b2c0      	uxtb	r0, r0
 8018c4c:	b009      	add	sp, #36	; 0x24
 8018c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c52:	200c      	movs	r0, #12
 8018c54:	b009      	add	sp, #36	; 0x24
 8018c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c5a:	2001      	movs	r0, #1
 8018c5c:	b009      	add	sp, #36	; 0x24
 8018c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c62:	bf00      	nop
 8018c64:	20011690 	.word	0x20011690

08018c68 <rmw_wait>:
 8018c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c6c:	4688      	mov	r8, r1
 8018c6e:	4606      	mov	r6, r0
 8018c70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018c72:	461d      	mov	r5, r3
 8018c74:	4691      	mov	r9, r2
 8018c76:	2a00      	cmp	r2, #0
 8018c78:	f000 811d 	beq.w	8018eb6 <rmw_wait+0x24e>
 8018c7c:	2900      	cmp	r1, #0
 8018c7e:	f000 8126 	beq.w	8018ece <rmw_wait+0x266>
 8018c82:	e9d1 2300 	ldrd	r2, r3, [r1]
 8018c86:	0157      	lsls	r7, r2, #5
 8018c88:	015c      	lsls	r4, r3, #5
 8018c8a:	1abf      	subs	r7, r7, r2
 8018c8c:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 8018c90:	eb64 0403 	sbc.w	r4, r4, r3
 8018c94:	00b8      	lsls	r0, r7, #2
 8018c96:	00a4      	lsls	r4, r4, #2
 8018c98:	ea44 7497 	orr.w	r4, r4, r7, lsr #30
 8018c9c:	1887      	adds	r7, r0, r2
 8018c9e:	eb43 0404 	adc.w	r4, r3, r4
 8018ca2:	4aa8      	ldr	r2, [pc, #672]	; (8018f44 <rmw_wait+0x2dc>)
 8018ca4:	2300      	movs	r3, #0
 8018ca6:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8018caa:	f7e8 f84d 	bl	8000d48 <__aeabi_uldivmod>
 8018cae:	00e4      	lsls	r4, r4, #3
 8018cb0:	ea44 7457 	orr.w	r4, r4, r7, lsr #29
 8018cb4:	00ff      	lsls	r7, r7, #3
 8018cb6:	eb17 0a00 	adds.w	sl, r7, r0
 8018cba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8018cbe:	eb44 0b01 	adc.w	fp, r4, r1
 8018cc2:	2300      	movs	r3, #0
 8018cc4:	4552      	cmp	r2, sl
 8018cc6:	eb73 010b 	sbcs.w	r1, r3, fp
 8018cca:	f2c0 80f2 	blt.w	8018eb2 <rmw_wait+0x24a>
 8018cce:	4f9e      	ldr	r7, [pc, #632]	; (8018f48 <rmw_wait+0x2e0>)
 8018cd0:	f7f8 fb1a 	bl	8011308 <rmw_uxrce_clean_expired_static_input_buffer>
 8018cd4:	683b      	ldr	r3, [r7, #0]
 8018cd6:	b143      	cbz	r3, 8018cea <rmw_wait+0x82>
 8018cd8:	461a      	mov	r2, r3
 8018cda:	f241 54a4 	movw	r4, #5540	; 0x15a4
 8018cde:	2000      	movs	r0, #0
 8018ce0:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8018ce4:	5508      	strb	r0, [r1, r4]
 8018ce6:	2a00      	cmp	r2, #0
 8018ce8:	d1fa      	bne.n	8018ce0 <rmw_wait+0x78>
 8018cea:	f1b9 0f00 	cmp.w	r9, #0
 8018cee:	d011      	beq.n	8018d14 <rmw_wait+0xac>
 8018cf0:	f8d9 0000 	ldr.w	r0, [r9]
 8018cf4:	b170      	cbz	r0, 8018d14 <rmw_wait+0xac>
 8018cf6:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8018cfa:	2200      	movs	r2, #0
 8018cfc:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8018d00:	2401      	movs	r4, #1
 8018d02:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8018d06:	6f89      	ldr	r1, [r1, #120]	; 0x78
 8018d08:	3201      	adds	r2, #1
 8018d0a:	6909      	ldr	r1, [r1, #16]
 8018d0c:	4290      	cmp	r0, r2
 8018d0e:	f801 400c 	strb.w	r4, [r1, ip]
 8018d12:	d1f6      	bne.n	8018d02 <rmw_wait+0x9a>
 8018d14:	b185      	cbz	r5, 8018d38 <rmw_wait+0xd0>
 8018d16:	6828      	ldr	r0, [r5, #0]
 8018d18:	b170      	cbz	r0, 8018d38 <rmw_wait+0xd0>
 8018d1a:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8018d1e:	2200      	movs	r2, #0
 8018d20:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8018d24:	2401      	movs	r4, #1
 8018d26:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8018d2a:	6f89      	ldr	r1, [r1, #120]	; 0x78
 8018d2c:	3201      	adds	r2, #1
 8018d2e:	6909      	ldr	r1, [r1, #16]
 8018d30:	4290      	cmp	r0, r2
 8018d32:	f801 400c 	strb.w	r4, [r1, ip]
 8018d36:	d1f6      	bne.n	8018d26 <rmw_wait+0xbe>
 8018d38:	b186      	cbz	r6, 8018d5c <rmw_wait+0xf4>
 8018d3a:	6830      	ldr	r0, [r6, #0]
 8018d3c:	b170      	cbz	r0, 8018d5c <rmw_wait+0xf4>
 8018d3e:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8018d42:	2200      	movs	r2, #0
 8018d44:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8018d48:	2401      	movs	r4, #1
 8018d4a:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8018d4e:	6a09      	ldr	r1, [r1, #32]
 8018d50:	3201      	adds	r2, #1
 8018d52:	6909      	ldr	r1, [r1, #16]
 8018d54:	4290      	cmp	r0, r2
 8018d56:	f801 400c 	strb.w	r4, [r1, ip]
 8018d5a:	d1f6      	bne.n	8018d4a <rmw_wait+0xe2>
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	f000 80ce 	beq.w	8018efe <rmw_wait+0x296>
 8018d62:	2400      	movs	r4, #0
 8018d64:	f241 51a4 	movw	r1, #5540	; 0x15a4
 8018d68:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8018d6c:	5c52      	ldrb	r2, [r2, r1]
 8018d6e:	4414      	add	r4, r2
 8018d70:	b2e4      	uxtb	r4, r4
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d1f8      	bne.n	8018d68 <rmw_wait+0x100>
 8018d76:	f7f8 fac7 	bl	8011308 <rmw_uxrce_clean_expired_static_input_buffer>
 8018d7a:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8018d7e:	d00d      	beq.n	8018d9c <rmw_wait+0x134>
 8018d80:	ee07 aa90 	vmov	s15, sl
 8018d84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8018d88:	ee07 4a90 	vmov	s15, r4
 8018d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018d90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018d94:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8018d98:	ee17 aa90 	vmov	sl, s15
 8018d9c:	683c      	ldr	r4, [r7, #0]
 8018d9e:	b144      	cbz	r4, 8018db2 <rmw_wait+0x14a>
 8018da0:	f241 57a4 	movw	r7, #5540	; 0x15a4
 8018da4:	68e0      	ldr	r0, [r4, #12]
 8018da6:	5dc3      	ldrb	r3, [r0, r7]
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d169      	bne.n	8018e80 <rmw_wait+0x218>
 8018dac:	68a4      	ldr	r4, [r4, #8]
 8018dae:	2c00      	cmp	r4, #0
 8018db0:	d1f8      	bne.n	8018da4 <rmw_wait+0x13c>
 8018db2:	f1b9 0f00 	cmp.w	r9, #0
 8018db6:	f000 80a4 	beq.w	8018f02 <rmw_wait+0x29a>
 8018dba:	f8d9 7000 	ldr.w	r7, [r9]
 8018dbe:	2f00      	cmp	r7, #0
 8018dc0:	f000 8088 	beq.w	8018ed4 <rmw_wait+0x26c>
 8018dc4:	2400      	movs	r4, #0
 8018dc6:	4627      	mov	r7, r4
 8018dc8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018dcc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018dd0:	f7f8 fa72 	bl	80112b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018dd4:	2800      	cmp	r0, #0
 8018dd6:	d064      	beq.n	8018ea2 <rmw_wait+0x23a>
 8018dd8:	f8d9 3000 	ldr.w	r3, [r9]
 8018ddc:	3401      	adds	r4, #1
 8018dde:	42a3      	cmp	r3, r4
 8018de0:	f04f 0701 	mov.w	r7, #1
 8018de4:	d8f0      	bhi.n	8018dc8 <rmw_wait+0x160>
 8018de6:	b17d      	cbz	r5, 8018e08 <rmw_wait+0x1a0>
 8018de8:	682b      	ldr	r3, [r5, #0]
 8018dea:	b16b      	cbz	r3, 8018e08 <rmw_wait+0x1a0>
 8018dec:	2400      	movs	r4, #0
 8018dee:	686b      	ldr	r3, [r5, #4]
 8018df0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018df4:	f7f8 fa60 	bl	80112b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018df8:	2800      	cmp	r0, #0
 8018dfa:	d04a      	beq.n	8018e92 <rmw_wait+0x22a>
 8018dfc:	682b      	ldr	r3, [r5, #0]
 8018dfe:	3401      	adds	r4, #1
 8018e00:	42a3      	cmp	r3, r4
 8018e02:	f04f 0701 	mov.w	r7, #1
 8018e06:	d8f2      	bhi.n	8018dee <rmw_wait+0x186>
 8018e08:	b1de      	cbz	r6, 8018e42 <rmw_wait+0x1da>
 8018e0a:	6833      	ldr	r3, [r6, #0]
 8018e0c:	b1cb      	cbz	r3, 8018e42 <rmw_wait+0x1da>
 8018e0e:	2400      	movs	r4, #0
 8018e10:	6873      	ldr	r3, [r6, #4]
 8018e12:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018e16:	f7f8 fa4f 	bl	80112b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018e1a:	b158      	cbz	r0, 8018e34 <rmw_wait+0x1cc>
 8018e1c:	6833      	ldr	r3, [r6, #0]
 8018e1e:	3401      	adds	r4, #1
 8018e20:	42a3      	cmp	r3, r4
 8018e22:	d963      	bls.n	8018eec <rmw_wait+0x284>
 8018e24:	6873      	ldr	r3, [r6, #4]
 8018e26:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018e2a:	2701      	movs	r7, #1
 8018e2c:	f7f8 fa44 	bl	80112b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018e30:	2800      	cmp	r0, #0
 8018e32:	d1f3      	bne.n	8018e1c <rmw_wait+0x1b4>
 8018e34:	e9d6 3200 	ldrd	r3, r2, [r6]
 8018e38:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018e3c:	3401      	adds	r4, #1
 8018e3e:	42a3      	cmp	r3, r4
 8018e40:	d8e6      	bhi.n	8018e10 <rmw_wait+0x1a8>
 8018e42:	f1b8 0f00 	cmp.w	r8, #0
 8018e46:	d016      	beq.n	8018e76 <rmw_wait+0x20e>
 8018e48:	f8d8 4000 	ldr.w	r4, [r8]
 8018e4c:	b19c      	cbz	r4, 8018e76 <rmw_wait+0x20e>
 8018e4e:	2300      	movs	r3, #0
 8018e50:	461d      	mov	r5, r3
 8018e52:	e004      	b.n	8018e5e <rmw_wait+0x1f6>
 8018e54:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8018e58:	3301      	adds	r3, #1
 8018e5a:	42a3      	cmp	r3, r4
 8018e5c:	d00b      	beq.n	8018e76 <rmw_wait+0x20e>
 8018e5e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018e62:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8018e66:	780a      	ldrb	r2, [r1, #0]
 8018e68:	2a00      	cmp	r2, #0
 8018e6a:	d0f3      	beq.n	8018e54 <rmw_wait+0x1ec>
 8018e6c:	3301      	adds	r3, #1
 8018e6e:	42a3      	cmp	r3, r4
 8018e70:	700d      	strb	r5, [r1, #0]
 8018e72:	4617      	mov	r7, r2
 8018e74:	d1f3      	bne.n	8018e5e <rmw_wait+0x1f6>
 8018e76:	2f00      	cmp	r7, #0
 8018e78:	d035      	beq.n	8018ee6 <rmw_wait+0x27e>
 8018e7a:	2000      	movs	r0, #0
 8018e7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e80:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018e84:	4651      	mov	r1, sl
 8018e86:	f7fb f841 	bl	8013f0c <uxr_run_session_until_data>
 8018e8a:	68a4      	ldr	r4, [r4, #8]
 8018e8c:	2c00      	cmp	r4, #0
 8018e8e:	d189      	bne.n	8018da4 <rmw_wait+0x13c>
 8018e90:	e78f      	b.n	8018db2 <rmw_wait+0x14a>
 8018e92:	e9d5 3200 	ldrd	r3, r2, [r5]
 8018e96:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018e9a:	3401      	adds	r4, #1
 8018e9c:	429c      	cmp	r4, r3
 8018e9e:	d3a6      	bcc.n	8018dee <rmw_wait+0x186>
 8018ea0:	e7b2      	b.n	8018e08 <rmw_wait+0x1a0>
 8018ea2:	e9d9 3200 	ldrd	r3, r2, [r9]
 8018ea6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018eaa:	3401      	adds	r4, #1
 8018eac:	42a3      	cmp	r3, r4
 8018eae:	d88b      	bhi.n	8018dc8 <rmw_wait+0x160>
 8018eb0:	e799      	b.n	8018de6 <rmw_wait+0x17e>
 8018eb2:	4692      	mov	sl, r2
 8018eb4:	e70b      	b.n	8018cce <rmw_wait+0x66>
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	f47f aee0 	bne.w	8018c7c <rmw_wait+0x14>
 8018ebc:	2800      	cmp	r0, #0
 8018ebe:	f47f aedd 	bne.w	8018c7c <rmw_wait+0x14>
 8018ec2:	f1b8 0f00 	cmp.w	r8, #0
 8018ec6:	d0d8      	beq.n	8018e7a <rmw_wait+0x212>
 8018ec8:	2900      	cmp	r1, #0
 8018eca:	f47f aeda 	bne.w	8018c82 <rmw_wait+0x1a>
 8018ece:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8018ed2:	e6fc      	b.n	8018cce <rmw_wait+0x66>
 8018ed4:	bb05      	cbnz	r5, 8018f18 <rmw_wait+0x2b0>
 8018ed6:	b366      	cbz	r6, 8018f32 <rmw_wait+0x2ca>
 8018ed8:	6833      	ldr	r3, [r6, #0]
 8018eda:	462f      	mov	r7, r5
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d196      	bne.n	8018e0e <rmw_wait+0x1a6>
 8018ee0:	f1b8 0f00 	cmp.w	r8, #0
 8018ee4:	d1b0      	bne.n	8018e48 <rmw_wait+0x1e0>
 8018ee6:	2002      	movs	r0, #2
 8018ee8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eec:	f1b8 0f00 	cmp.w	r8, #0
 8018ef0:	d0c3      	beq.n	8018e7a <rmw_wait+0x212>
 8018ef2:	f8d8 4000 	ldr.w	r4, [r8]
 8018ef6:	2701      	movs	r7, #1
 8018ef8:	2c00      	cmp	r4, #0
 8018efa:	d1a8      	bne.n	8018e4e <rmw_wait+0x1e6>
 8018efc:	e7bd      	b.n	8018e7a <rmw_wait+0x212>
 8018efe:	461c      	mov	r4, r3
 8018f00:	e739      	b.n	8018d76 <rmw_wait+0x10e>
 8018f02:	2d00      	cmp	r5, #0
 8018f04:	d0e7      	beq.n	8018ed6 <rmw_wait+0x26e>
 8018f06:	682b      	ldr	r3, [r5, #0]
 8018f08:	464f      	mov	r7, r9
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	f47f af6e 	bne.w	8018dec <rmw_wait+0x184>
 8018f10:	2e00      	cmp	r6, #0
 8018f12:	f47f af7a 	bne.w	8018e0a <rmw_wait+0x1a2>
 8018f16:	e007      	b.n	8018f28 <rmw_wait+0x2c0>
 8018f18:	682b      	ldr	r3, [r5, #0]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	f47f af66 	bne.w	8018dec <rmw_wait+0x184>
 8018f20:	461f      	mov	r7, r3
 8018f22:	2e00      	cmp	r6, #0
 8018f24:	f47f af71 	bne.w	8018e0a <rmw_wait+0x1a2>
 8018f28:	4637      	mov	r7, r6
 8018f2a:	f1b8 0f00 	cmp.w	r8, #0
 8018f2e:	d18b      	bne.n	8018e48 <rmw_wait+0x1e0>
 8018f30:	e7d9      	b.n	8018ee6 <rmw_wait+0x27e>
 8018f32:	f1b8 0f00 	cmp.w	r8, #0
 8018f36:	d0d6      	beq.n	8018ee6 <rmw_wait+0x27e>
 8018f38:	f8d8 4000 	ldr.w	r4, [r8]
 8018f3c:	4637      	mov	r7, r6
 8018f3e:	2c00      	cmp	r4, #0
 8018f40:	d185      	bne.n	8018e4e <rmw_wait+0x1e6>
 8018f42:	e7d0      	b.n	8018ee6 <rmw_wait+0x27e>
 8018f44:	000f4240 	.word	0x000f4240
 8018f48:	20014838 	.word	0x20014838

08018f4c <rmw_create_wait_set>:
 8018f4c:	b508      	push	{r3, lr}
 8018f4e:	4803      	ldr	r0, [pc, #12]	; (8018f5c <rmw_create_wait_set+0x10>)
 8018f50:	f7ff fcc4 	bl	80188dc <get_memory>
 8018f54:	b108      	cbz	r0, 8018f5a <rmw_create_wait_set+0xe>
 8018f56:	68c0      	ldr	r0, [r0, #12]
 8018f58:	3010      	adds	r0, #16
 8018f5a:	bd08      	pop	{r3, pc}
 8018f5c:	20016010 	.word	0x20016010

08018f60 <rmw_destroy_wait_set>:
 8018f60:	b508      	push	{r3, lr}
 8018f62:	4b08      	ldr	r3, [pc, #32]	; (8018f84 <rmw_destroy_wait_set+0x24>)
 8018f64:	6819      	ldr	r1, [r3, #0]
 8018f66:	b911      	cbnz	r1, 8018f6e <rmw_destroy_wait_set+0xe>
 8018f68:	e00a      	b.n	8018f80 <rmw_destroy_wait_set+0x20>
 8018f6a:	6889      	ldr	r1, [r1, #8]
 8018f6c:	b141      	cbz	r1, 8018f80 <rmw_destroy_wait_set+0x20>
 8018f6e:	68cb      	ldr	r3, [r1, #12]
 8018f70:	3310      	adds	r3, #16
 8018f72:	4298      	cmp	r0, r3
 8018f74:	d1f9      	bne.n	8018f6a <rmw_destroy_wait_set+0xa>
 8018f76:	4803      	ldr	r0, [pc, #12]	; (8018f84 <rmw_destroy_wait_set+0x24>)
 8018f78:	f7ff fcc0 	bl	80188fc <put_memory>
 8018f7c:	2000      	movs	r0, #0
 8018f7e:	bd08      	pop	{r3, pc}
 8018f80:	2001      	movs	r0, #1
 8018f82:	bd08      	pop	{r3, pc}
 8018f84:	20016010 	.word	0x20016010

08018f88 <_MultiArrayLayout__max_serialized_size>:
 8018f88:	b508      	push	{r3, lr}
 8018f8a:	2104      	movs	r1, #4
 8018f8c:	2000      	movs	r0, #0
 8018f8e:	f7f9 fe0b 	bl	8012ba8 <ucdr_alignment>
 8018f92:	3004      	adds	r0, #4
 8018f94:	bd08      	pop	{r3, pc}
 8018f96:	bf00      	nop

08018f98 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8018f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f9c:	4607      	mov	r7, r0
 8018f9e:	b378      	cbz	r0, 8019000 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x68>
 8018fa0:	4688      	mov	r8, r1
 8018fa2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8018fa6:	2104      	movs	r1, #4
 8018fa8:	4640      	mov	r0, r8
 8018faa:	f7f9 fdfd 	bl	8012ba8 <ucdr_alignment>
 8018fae:	f108 0304 	add.w	r3, r8, #4
 8018fb2:	18c6      	adds	r6, r0, r3
 8018fb4:	f1b9 0f00 	cmp.w	r9, #0
 8018fb8:	d018      	beq.n	8018fec <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x54>
 8018fba:	2400      	movs	r4, #0
 8018fbc:	f001 f840 	bl	801a040 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8018fc0:	683a      	ldr	r2, [r7, #0]
 8018fc2:	6843      	ldr	r3, [r0, #4]
 8018fc4:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8018fc8:	4631      	mov	r1, r6
 8018fca:	695b      	ldr	r3, [r3, #20]
 8018fcc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8018fd0:	4798      	blx	r3
 8018fd2:	2804      	cmp	r0, #4
 8018fd4:	4601      	mov	r1, r0
 8018fd6:	4605      	mov	r5, r0
 8018fd8:	bf28      	it	cs
 8018fda:	2104      	movcs	r1, #4
 8018fdc:	4630      	mov	r0, r6
 8018fde:	f7f9 fde3 	bl	8012ba8 <ucdr_alignment>
 8018fe2:	3401      	adds	r4, #1
 8018fe4:	4405      	add	r5, r0
 8018fe6:	45a1      	cmp	r9, r4
 8018fe8:	442e      	add	r6, r5
 8018fea:	d1e7      	bne.n	8018fbc <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x24>
 8018fec:	2104      	movs	r1, #4
 8018fee:	4630      	mov	r0, r6
 8018ff0:	f7f9 fdda 	bl	8012ba8 <ucdr_alignment>
 8018ff4:	f1c8 0804 	rsb	r8, r8, #4
 8018ff8:	4446      	add	r6, r8
 8018ffa:	4430      	add	r0, r6
 8018ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019000:	4b05      	ldr	r3, [pc, #20]	; (8019018 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x80>)
 8019002:	4806      	ldr	r0, [pc, #24]	; (801901c <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x84>)
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	221b      	movs	r2, #27
 8019008:	68db      	ldr	r3, [r3, #12]
 801900a:	2101      	movs	r1, #1
 801900c:	f001 f88a 	bl	801a124 <fwrite>
 8019010:	4638      	mov	r0, r7
 8019012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019016:	bf00      	nop
 8019018:	200001b8 	.word	0x200001b8
 801901c:	0801f928 	.word	0x0801f928

08019020 <_MultiArrayLayout__get_serialized_size>:
 8019020:	2100      	movs	r1, #0
 8019022:	f7ff bfb9 	b.w	8018f98 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 8019026:	bf00      	nop

08019028 <_MultiArrayLayout__cdr_deserialize>:
 8019028:	b5f0      	push	{r4, r5, r6, r7, lr}
 801902a:	460e      	mov	r6, r1
 801902c:	b083      	sub	sp, #12
 801902e:	b311      	cbz	r1, 8019076 <_MultiArrayLayout__cdr_deserialize+0x4e>
 8019030:	a901      	add	r1, sp, #4
 8019032:	4607      	mov	r7, r0
 8019034:	f7f9 fa92 	bl	801255c <ucdr_deserialize_uint32_t>
 8019038:	9b01      	ldr	r3, [sp, #4]
 801903a:	68b2      	ldr	r2, [r6, #8]
 801903c:	429a      	cmp	r2, r3
 801903e:	d325      	bcc.n	801908c <_MultiArrayLayout__cdr_deserialize+0x64>
 8019040:	6073      	str	r3, [r6, #4]
 8019042:	b18b      	cbz	r3, 8019068 <_MultiArrayLayout__cdr_deserialize+0x40>
 8019044:	2400      	movs	r4, #0
 8019046:	4625      	mov	r5, r4
 8019048:	e002      	b.n	8019050 <_MultiArrayLayout__cdr_deserialize+0x28>
 801904a:	9b01      	ldr	r3, [sp, #4]
 801904c:	42ab      	cmp	r3, r5
 801904e:	d90b      	bls.n	8019068 <_MultiArrayLayout__cdr_deserialize+0x40>
 8019050:	f000 fff6 	bl	801a040 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8019054:	6831      	ldr	r1, [r6, #0]
 8019056:	6843      	ldr	r3, [r0, #4]
 8019058:	4421      	add	r1, r4
 801905a:	68db      	ldr	r3, [r3, #12]
 801905c:	4638      	mov	r0, r7
 801905e:	4798      	blx	r3
 8019060:	3501      	adds	r5, #1
 8019062:	3414      	adds	r4, #20
 8019064:	2800      	cmp	r0, #0
 8019066:	d1f0      	bne.n	801904a <_MultiArrayLayout__cdr_deserialize+0x22>
 8019068:	f106 010c 	add.w	r1, r6, #12
 801906c:	4638      	mov	r0, r7
 801906e:	f7f9 fa75 	bl	801255c <ucdr_deserialize_uint32_t>
 8019072:	b003      	add	sp, #12
 8019074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019076:	4b0b      	ldr	r3, [pc, #44]	; (80190a4 <_MultiArrayLayout__cdr_deserialize+0x7c>)
 8019078:	480b      	ldr	r0, [pc, #44]	; (80190a8 <_MultiArrayLayout__cdr_deserialize+0x80>)
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	221b      	movs	r2, #27
 801907e:	68db      	ldr	r3, [r3, #12]
 8019080:	2101      	movs	r1, #1
 8019082:	f001 f84f 	bl	801a124 <fwrite>
 8019086:	4630      	mov	r0, r6
 8019088:	b003      	add	sp, #12
 801908a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801908c:	4b05      	ldr	r3, [pc, #20]	; (80190a4 <_MultiArrayLayout__cdr_deserialize+0x7c>)
 801908e:	4807      	ldr	r0, [pc, #28]	; (80190ac <_MultiArrayLayout__cdr_deserialize+0x84>)
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	2231      	movs	r2, #49	; 0x31
 8019094:	68db      	ldr	r3, [r3, #12]
 8019096:	2101      	movs	r1, #1
 8019098:	f001 f844 	bl	801a124 <fwrite>
 801909c:	2000      	movs	r0, #0
 801909e:	b003      	add	sp, #12
 80190a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190a2:	bf00      	nop
 80190a4:	200001b8 	.word	0x200001b8
 80190a8:	0801f928 	.word	0x0801f928
 80190ac:	0802009c 	.word	0x0802009c

080190b0 <_MultiArrayLayout__cdr_serialize>:
 80190b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190b2:	4605      	mov	r5, r0
 80190b4:	b1f8      	cbz	r0, 80190f6 <_MultiArrayLayout__cdr_serialize+0x46>
 80190b6:	6847      	ldr	r7, [r0, #4]
 80190b8:	460e      	mov	r6, r1
 80190ba:	4608      	mov	r0, r1
 80190bc:	4639      	mov	r1, r7
 80190be:	f7f9 f9ed 	bl	801249c <ucdr_serialize_uint32_t>
 80190c2:	b190      	cbz	r0, 80190ea <_MultiArrayLayout__cdr_serialize+0x3a>
 80190c4:	b18f      	cbz	r7, 80190ea <_MultiArrayLayout__cdr_serialize+0x3a>
 80190c6:	2400      	movs	r4, #0
 80190c8:	e001      	b.n	80190ce <_MultiArrayLayout__cdr_serialize+0x1e>
 80190ca:	42a7      	cmp	r7, r4
 80190cc:	d00d      	beq.n	80190ea <_MultiArrayLayout__cdr_serialize+0x3a>
 80190ce:	f000 ffb7 	bl	801a040 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 80190d2:	682a      	ldr	r2, [r5, #0]
 80190d4:	6843      	ldr	r3, [r0, #4]
 80190d6:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80190da:	689b      	ldr	r3, [r3, #8]
 80190dc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80190e0:	4631      	mov	r1, r6
 80190e2:	3401      	adds	r4, #1
 80190e4:	4798      	blx	r3
 80190e6:	2800      	cmp	r0, #0
 80190e8:	d1ef      	bne.n	80190ca <_MultiArrayLayout__cdr_serialize+0x1a>
 80190ea:	68e9      	ldr	r1, [r5, #12]
 80190ec:	4630      	mov	r0, r6
 80190ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80190f2:	f7f9 b9d3 	b.w	801249c <ucdr_serialize_uint32_t>
 80190f6:	4b05      	ldr	r3, [pc, #20]	; (801910c <_MultiArrayLayout__cdr_serialize+0x5c>)
 80190f8:	4805      	ldr	r0, [pc, #20]	; (8019110 <_MultiArrayLayout__cdr_serialize+0x60>)
 80190fa:	681b      	ldr	r3, [r3, #0]
 80190fc:	221b      	movs	r2, #27
 80190fe:	68db      	ldr	r3, [r3, #12]
 8019100:	2101      	movs	r1, #1
 8019102:	f001 f80f 	bl	801a124 <fwrite>
 8019106:	4628      	mov	r0, r5
 8019108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801910a:	bf00      	nop
 801910c:	200001b8 	.word	0x200001b8
 8019110:	0801f928 	.word	0x0801f928

08019114 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8019114:	b508      	push	{r3, lr}
 8019116:	4603      	mov	r3, r0
 8019118:	2200      	movs	r2, #0
 801911a:	4608      	mov	r0, r1
 801911c:	701a      	strb	r2, [r3, #0]
 801911e:	2104      	movs	r1, #4
 8019120:	f7f9 fd42 	bl	8012ba8 <ucdr_alignment>
 8019124:	3004      	adds	r0, #4
 8019126:	bd08      	pop	{r3, pc}

08019128 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8019128:	4800      	ldr	r0, [pc, #0]	; (801912c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 801912a:	4770      	bx	lr
 801912c:	20000168 	.word	0x20000168

08019130 <ucdr_serialize_string>:
 8019130:	b510      	push	{r4, lr}
 8019132:	b082      	sub	sp, #8
 8019134:	4604      	mov	r4, r0
 8019136:	4608      	mov	r0, r1
 8019138:	9101      	str	r1, [sp, #4]
 801913a:	f7e7 f853 	bl	80001e4 <strlen>
 801913e:	9901      	ldr	r1, [sp, #4]
 8019140:	4602      	mov	r2, r0
 8019142:	3201      	adds	r2, #1
 8019144:	4620      	mov	r0, r4
 8019146:	b002      	add	sp, #8
 8019148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801914c:	f7f9 bd9c 	b.w	8012c88 <ucdr_serialize_sequence_char>

08019150 <uxr_init_input_best_effort_stream>:
 8019150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019154:	8003      	strh	r3, [r0, #0]
 8019156:	4770      	bx	lr

08019158 <uxr_reset_input_best_effort_stream>:
 8019158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801915c:	8003      	strh	r3, [r0, #0]
 801915e:	4770      	bx	lr

08019160 <uxr_receive_best_effort_message>:
 8019160:	b538      	push	{r3, r4, r5, lr}
 8019162:	4604      	mov	r4, r0
 8019164:	8800      	ldrh	r0, [r0, #0]
 8019166:	460d      	mov	r5, r1
 8019168:	f000 fd16 	bl	8019b98 <uxr_seq_num_cmp>
 801916c:	4603      	mov	r3, r0
 801916e:	2b00      	cmp	r3, #0
 8019170:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8019174:	bfb8      	it	lt
 8019176:	8025      	strhlt	r5, [r4, #0]
 8019178:	bd38      	pop	{r3, r4, r5, pc}
 801917a:	bf00      	nop

0801917c <on_full_input_buffer>:
 801917c:	b570      	push	{r4, r5, r6, lr}
 801917e:	6802      	ldr	r2, [r0, #0]
 8019180:	460d      	mov	r5, r1
 8019182:	6809      	ldr	r1, [r1, #0]
 8019184:	686c      	ldr	r4, [r5, #4]
 8019186:	1a53      	subs	r3, r2, r1
 8019188:	4606      	mov	r6, r0
 801918a:	8928      	ldrh	r0, [r5, #8]
 801918c:	fbb4 f4f0 	udiv	r4, r4, r0
 8019190:	fbb3 f3f4 	udiv	r3, r3, r4
 8019194:	3301      	adds	r3, #1
 8019196:	b29b      	uxth	r3, r3
 8019198:	fbb3 f2f0 	udiv	r2, r3, r0
 801919c:	fb00 3312 	mls	r3, r0, r2, r3
 80191a0:	b29b      	uxth	r3, r3
 80191a2:	fb04 f403 	mul.w	r4, r4, r3
 80191a6:	1d23      	adds	r3, r4, #4
 80191a8:	440b      	add	r3, r1
 80191aa:	7d28      	ldrb	r0, [r5, #20]
 80191ac:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80191b0:	b110      	cbz	r0, 80191b8 <on_full_input_buffer+0x3c>
 80191b2:	2000      	movs	r0, #0
 80191b4:	f843 0c04 	str.w	r0, [r3, #-4]
 80191b8:	2a03      	cmp	r2, #3
 80191ba:	d801      	bhi.n	80191c0 <on_full_input_buffer+0x44>
 80191bc:	2001      	movs	r0, #1
 80191be:	bd70      	pop	{r4, r5, r6, pc}
 80191c0:	3408      	adds	r4, #8
 80191c2:	6933      	ldr	r3, [r6, #16]
 80191c4:	4421      	add	r1, r4
 80191c6:	4630      	mov	r0, r6
 80191c8:	3a04      	subs	r2, #4
 80191ca:	f7f9 fce1 	bl	8012b90 <ucdr_init_buffer_origin>
 80191ce:	4630      	mov	r0, r6
 80191d0:	4902      	ldr	r1, [pc, #8]	; (80191dc <on_full_input_buffer+0x60>)
 80191d2:	462a      	mov	r2, r5
 80191d4:	f7f9 fcba 	bl	8012b4c <ucdr_set_on_full_buffer_callback>
 80191d8:	2000      	movs	r0, #0
 80191da:	bd70      	pop	{r4, r5, r6, pc}
 80191dc:	0801917d 	.word	0x0801917d

080191e0 <uxr_init_input_reliable_stream>:
 80191e0:	b470      	push	{r4, r5, r6}
 80191e2:	9c03      	ldr	r4, [sp, #12]
 80191e4:	6001      	str	r1, [r0, #0]
 80191e6:	2600      	movs	r6, #0
 80191e8:	8103      	strh	r3, [r0, #8]
 80191ea:	6042      	str	r2, [r0, #4]
 80191ec:	6104      	str	r4, [r0, #16]
 80191ee:	7506      	strb	r6, [r0, #20]
 80191f0:	b1ab      	cbz	r3, 801921e <uxr_init_input_reliable_stream+0x3e>
 80191f2:	600e      	str	r6, [r1, #0]
 80191f4:	8901      	ldrh	r1, [r0, #8]
 80191f6:	2901      	cmp	r1, #1
 80191f8:	d911      	bls.n	801921e <uxr_init_input_reliable_stream+0x3e>
 80191fa:	2201      	movs	r2, #1
 80191fc:	e9d0 5400 	ldrd	r5, r4, [r0]
 8019200:	fbb2 f3f1 	udiv	r3, r2, r1
 8019204:	fb01 2313 	mls	r3, r1, r3, r2
 8019208:	b29b      	uxth	r3, r3
 801920a:	fbb4 f1f1 	udiv	r1, r4, r1
 801920e:	fb03 f301 	mul.w	r3, r3, r1
 8019212:	3201      	adds	r2, #1
 8019214:	50ee      	str	r6, [r5, r3]
 8019216:	8901      	ldrh	r1, [r0, #8]
 8019218:	b292      	uxth	r2, r2
 801921a:	4291      	cmp	r1, r2
 801921c:	d8ee      	bhi.n	80191fc <uxr_init_input_reliable_stream+0x1c>
 801921e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019222:	bc70      	pop	{r4, r5, r6}
 8019224:	60c3      	str	r3, [r0, #12]
 8019226:	4770      	bx	lr

08019228 <uxr_reset_input_reliable_stream>:
 8019228:	8902      	ldrh	r2, [r0, #8]
 801922a:	b1ca      	cbz	r2, 8019260 <uxr_reset_input_reliable_stream+0x38>
 801922c:	b470      	push	{r4, r5, r6}
 801922e:	2400      	movs	r4, #0
 8019230:	4621      	mov	r1, r4
 8019232:	4626      	mov	r6, r4
 8019234:	fbb1 f3f2 	udiv	r3, r1, r2
 8019238:	fb02 1313 	mls	r3, r2, r3, r1
 801923c:	e9d0 5100 	ldrd	r5, r1, [r0]
 8019240:	b29b      	uxth	r3, r3
 8019242:	fbb1 f2f2 	udiv	r2, r1, r2
 8019246:	fb03 f302 	mul.w	r3, r3, r2
 801924a:	3401      	adds	r4, #1
 801924c:	50ee      	str	r6, [r5, r3]
 801924e:	8902      	ldrh	r2, [r0, #8]
 8019250:	b2a1      	uxth	r1, r4
 8019252:	428a      	cmp	r2, r1
 8019254:	d8ee      	bhi.n	8019234 <uxr_reset_input_reliable_stream+0xc>
 8019256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801925a:	bc70      	pop	{r4, r5, r6}
 801925c:	60c3      	str	r3, [r0, #12]
 801925e:	4770      	bx	lr
 8019260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019264:	60c3      	str	r3, [r0, #12]
 8019266:	4770      	bx	lr

08019268 <uxr_receive_reliable_message>:
 8019268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801926c:	4604      	mov	r4, r0
 801926e:	460d      	mov	r5, r1
 8019270:	8901      	ldrh	r1, [r0, #8]
 8019272:	8980      	ldrh	r0, [r0, #12]
 8019274:	4690      	mov	r8, r2
 8019276:	461f      	mov	r7, r3
 8019278:	f000 fc86 	bl	8019b88 <uxr_seq_num_add>
 801927c:	4629      	mov	r1, r5
 801927e:	4606      	mov	r6, r0
 8019280:	89a0      	ldrh	r0, [r4, #12]
 8019282:	f000 fc89 	bl	8019b98 <uxr_seq_num_cmp>
 8019286:	2800      	cmp	r0, #0
 8019288:	db0a      	blt.n	80192a0 <uxr_receive_reliable_message+0x38>
 801928a:	2600      	movs	r6, #0
 801928c:	89e0      	ldrh	r0, [r4, #14]
 801928e:	4629      	mov	r1, r5
 8019290:	f000 fc82 	bl	8019b98 <uxr_seq_num_cmp>
 8019294:	2800      	cmp	r0, #0
 8019296:	bfb8      	it	lt
 8019298:	81e5      	strhlt	r5, [r4, #14]
 801929a:	4630      	mov	r0, r6
 801929c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80192a0:	4630      	mov	r0, r6
 80192a2:	4629      	mov	r1, r5
 80192a4:	f000 fc78 	bl	8019b98 <uxr_seq_num_cmp>
 80192a8:	2800      	cmp	r0, #0
 80192aa:	dbee      	blt.n	801928a <uxr_receive_reliable_message+0x22>
 80192ac:	6923      	ldr	r3, [r4, #16]
 80192ae:	4640      	mov	r0, r8
 80192b0:	4798      	blx	r3
 80192b2:	2101      	movs	r1, #1
 80192b4:	4681      	mov	r9, r0
 80192b6:	89a0      	ldrh	r0, [r4, #12]
 80192b8:	f000 fc66 	bl	8019b88 <uxr_seq_num_add>
 80192bc:	f1b9 0f00 	cmp.w	r9, #0
 80192c0:	d101      	bne.n	80192c6 <uxr_receive_reliable_message+0x5e>
 80192c2:	4285      	cmp	r5, r0
 80192c4:	d049      	beq.n	801935a <uxr_receive_reliable_message+0xf2>
 80192c6:	8921      	ldrh	r1, [r4, #8]
 80192c8:	fbb5 f3f1 	udiv	r3, r5, r1
 80192cc:	fb01 5313 	mls	r3, r1, r3, r5
 80192d0:	b29b      	uxth	r3, r3
 80192d2:	6862      	ldr	r2, [r4, #4]
 80192d4:	6820      	ldr	r0, [r4, #0]
 80192d6:	fbb2 f2f1 	udiv	r2, r2, r1
 80192da:	fb03 f302 	mul.w	r3, r3, r2
 80192de:	3304      	adds	r3, #4
 80192e0:	4418      	add	r0, r3
 80192e2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	d1cf      	bne.n	801928a <uxr_receive_reliable_message+0x22>
 80192ea:	4641      	mov	r1, r8
 80192ec:	463a      	mov	r2, r7
 80192ee:	f000 ffa5 	bl	801a23c <memcpy>
 80192f2:	8921      	ldrh	r1, [r4, #8]
 80192f4:	fbb5 f3f1 	udiv	r3, r5, r1
 80192f8:	fb01 5313 	mls	r3, r1, r3, r5
 80192fc:	b29b      	uxth	r3, r3
 80192fe:	6862      	ldr	r2, [r4, #4]
 8019300:	fbb2 f2f1 	udiv	r2, r2, r1
 8019304:	6821      	ldr	r1, [r4, #0]
 8019306:	fb03 f302 	mul.w	r3, r3, r2
 801930a:	2201      	movs	r2, #1
 801930c:	50cf      	str	r7, [r1, r3]
 801930e:	9b08      	ldr	r3, [sp, #32]
 8019310:	701a      	strb	r2, [r3, #0]
 8019312:	f1b9 0f00 	cmp.w	r9, #0
 8019316:	d0b8      	beq.n	801928a <uxr_receive_reliable_message+0x22>
 8019318:	89a6      	ldrh	r6, [r4, #12]
 801931a:	e001      	b.n	8019320 <uxr_receive_reliable_message+0xb8>
 801931c:	2801      	cmp	r0, #1
 801931e:	d1b4      	bne.n	801928a <uxr_receive_reliable_message+0x22>
 8019320:	4630      	mov	r0, r6
 8019322:	2101      	movs	r1, #1
 8019324:	f000 fc30 	bl	8019b88 <uxr_seq_num_add>
 8019328:	8921      	ldrh	r1, [r4, #8]
 801932a:	fbb0 f3f1 	udiv	r3, r0, r1
 801932e:	fb01 0313 	mls	r3, r1, r3, r0
 8019332:	b29b      	uxth	r3, r3
 8019334:	6862      	ldr	r2, [r4, #4]
 8019336:	fbb2 f2f1 	udiv	r2, r2, r1
 801933a:	4606      	mov	r6, r0
 801933c:	fb03 f302 	mul.w	r3, r3, r2
 8019340:	6820      	ldr	r0, [r4, #0]
 8019342:	3304      	adds	r3, #4
 8019344:	4418      	add	r0, r3
 8019346:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801934a:	2b00      	cmp	r3, #0
 801934c:	d09d      	beq.n	801928a <uxr_receive_reliable_message+0x22>
 801934e:	6923      	ldr	r3, [r4, #16]
 8019350:	4798      	blx	r3
 8019352:	2802      	cmp	r0, #2
 8019354:	d1e2      	bne.n	801931c <uxr_receive_reliable_message+0xb4>
 8019356:	2601      	movs	r6, #1
 8019358:	e798      	b.n	801928c <uxr_receive_reliable_message+0x24>
 801935a:	9b08      	ldr	r3, [sp, #32]
 801935c:	81a5      	strh	r5, [r4, #12]
 801935e:	2601      	movs	r6, #1
 8019360:	f883 9000 	strb.w	r9, [r3]
 8019364:	e792      	b.n	801928c <uxr_receive_reliable_message+0x24>
 8019366:	bf00      	nop

08019368 <uxr_next_input_reliable_buffer_available>:
 8019368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801936c:	4604      	mov	r4, r0
 801936e:	460e      	mov	r6, r1
 8019370:	8980      	ldrh	r0, [r0, #12]
 8019372:	2101      	movs	r1, #1
 8019374:	4617      	mov	r7, r2
 8019376:	f000 fc07 	bl	8019b88 <uxr_seq_num_add>
 801937a:	8921      	ldrh	r1, [r4, #8]
 801937c:	fbb0 f3f1 	udiv	r3, r0, r1
 8019380:	fb01 0313 	mls	r3, r1, r3, r0
 8019384:	b29b      	uxth	r3, r3
 8019386:	6862      	ldr	r2, [r4, #4]
 8019388:	fbb2 f2f1 	udiv	r2, r2, r1
 801938c:	fb03 f302 	mul.w	r3, r3, r2
 8019390:	6822      	ldr	r2, [r4, #0]
 8019392:	3304      	adds	r3, #4
 8019394:	eb02 0803 	add.w	r8, r2, r3
 8019398:	f858 9c04 	ldr.w	r9, [r8, #-4]
 801939c:	f1b9 0f00 	cmp.w	r9, #0
 80193a0:	d025      	beq.n	80193ee <uxr_next_input_reliable_buffer_available+0x86>
 80193a2:	6923      	ldr	r3, [r4, #16]
 80193a4:	4605      	mov	r5, r0
 80193a6:	4640      	mov	r0, r8
 80193a8:	4798      	blx	r3
 80193aa:	4682      	mov	sl, r0
 80193ac:	b310      	cbz	r0, 80193f4 <uxr_next_input_reliable_buffer_available+0x8c>
 80193ae:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80193b2:	e005      	b.n	80193c0 <uxr_next_input_reliable_buffer_available+0x58>
 80193b4:	6923      	ldr	r3, [r4, #16]
 80193b6:	4798      	blx	r3
 80193b8:	2802      	cmp	r0, #2
 80193ba:	d032      	beq.n	8019422 <uxr_next_input_reliable_buffer_available+0xba>
 80193bc:	2801      	cmp	r0, #1
 80193be:	d116      	bne.n	80193ee <uxr_next_input_reliable_buffer_available+0x86>
 80193c0:	4650      	mov	r0, sl
 80193c2:	2101      	movs	r1, #1
 80193c4:	f000 fbe0 	bl	8019b88 <uxr_seq_num_add>
 80193c8:	8921      	ldrh	r1, [r4, #8]
 80193ca:	fbb0 f3f1 	udiv	r3, r0, r1
 80193ce:	fb01 0313 	mls	r3, r1, r3, r0
 80193d2:	b29b      	uxth	r3, r3
 80193d4:	6862      	ldr	r2, [r4, #4]
 80193d6:	fbb2 f2f1 	udiv	r2, r2, r1
 80193da:	4682      	mov	sl, r0
 80193dc:	fb03 f302 	mul.w	r3, r3, r2
 80193e0:	6820      	ldr	r0, [r4, #0]
 80193e2:	3304      	adds	r3, #4
 80193e4:	4418      	add	r0, r3
 80193e6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	d1e2      	bne.n	80193b4 <uxr_next_input_reliable_buffer_available+0x4c>
 80193ee:	2000      	movs	r0, #0
 80193f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193f4:	464a      	mov	r2, r9
 80193f6:	4641      	mov	r1, r8
 80193f8:	4630      	mov	r0, r6
 80193fa:	f7f9 fbd1 	bl	8012ba0 <ucdr_init_buffer>
 80193fe:	8921      	ldrh	r1, [r4, #8]
 8019400:	fbb5 f3f1 	udiv	r3, r5, r1
 8019404:	fb01 5313 	mls	r3, r1, r3, r5
 8019408:	b29b      	uxth	r3, r3
 801940a:	6862      	ldr	r2, [r4, #4]
 801940c:	fbb2 f2f1 	udiv	r2, r2, r1
 8019410:	6821      	ldr	r1, [r4, #0]
 8019412:	fb03 f302 	mul.w	r3, r3, r2
 8019416:	2001      	movs	r0, #1
 8019418:	f841 a003 	str.w	sl, [r1, r3]
 801941c:	81a5      	strh	r5, [r4, #12]
 801941e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019422:	8922      	ldrh	r2, [r4, #8]
 8019424:	fbb5 f0f2 	udiv	r0, r5, r2
 8019428:	fb02 5510 	mls	r5, r2, r0, r5
 801942c:	b2ad      	uxth	r5, r5
 801942e:	6863      	ldr	r3, [r4, #4]
 8019430:	fbb3 f3f2 	udiv	r3, r3, r2
 8019434:	fb05 f503 	mul.w	r5, r5, r3
 8019438:	6823      	ldr	r3, [r4, #0]
 801943a:	2000      	movs	r0, #0
 801943c:	5158      	str	r0, [r3, r5]
 801943e:	eba9 0207 	sub.w	r2, r9, r7
 8019442:	eb08 0107 	add.w	r1, r8, r7
 8019446:	4630      	mov	r0, r6
 8019448:	f7f9 fbaa 	bl	8012ba0 <ucdr_init_buffer>
 801944c:	4630      	mov	r0, r6
 801944e:	4904      	ldr	r1, [pc, #16]	; (8019460 <uxr_next_input_reliable_buffer_available+0xf8>)
 8019450:	4622      	mov	r2, r4
 8019452:	f7f9 fb7b 	bl	8012b4c <ucdr_set_on_full_buffer_callback>
 8019456:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801945a:	2001      	movs	r0, #1
 801945c:	e7c8      	b.n	80193f0 <uxr_next_input_reliable_buffer_available+0x88>
 801945e:	bf00      	nop
 8019460:	0801917d 	.word	0x0801917d

08019464 <uxr_process_heartbeat>:
 8019464:	b538      	push	{r3, r4, r5, lr}
 8019466:	4611      	mov	r1, r2
 8019468:	4604      	mov	r4, r0
 801946a:	89c0      	ldrh	r0, [r0, #14]
 801946c:	4615      	mov	r5, r2
 801946e:	f000 fb93 	bl	8019b98 <uxr_seq_num_cmp>
 8019472:	2800      	cmp	r0, #0
 8019474:	bfb8      	it	lt
 8019476:	81e5      	strhlt	r5, [r4, #14]
 8019478:	bd38      	pop	{r3, r4, r5, pc}
 801947a:	bf00      	nop

0801947c <uxr_compute_acknack>:
 801947c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019480:	8903      	ldrh	r3, [r0, #8]
 8019482:	8986      	ldrh	r6, [r0, #12]
 8019484:	4604      	mov	r4, r0
 8019486:	460d      	mov	r5, r1
 8019488:	b1d3      	cbz	r3, 80194c0 <uxr_compute_acknack+0x44>
 801948a:	4630      	mov	r0, r6
 801948c:	2701      	movs	r7, #1
 801948e:	e003      	b.n	8019498 <uxr_compute_acknack+0x1c>
 8019490:	4567      	cmp	r7, ip
 8019492:	d215      	bcs.n	80194c0 <uxr_compute_acknack+0x44>
 8019494:	89a0      	ldrh	r0, [r4, #12]
 8019496:	3701      	adds	r7, #1
 8019498:	b2b9      	uxth	r1, r7
 801949a:	f000 fb75 	bl	8019b88 <uxr_seq_num_add>
 801949e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80194a2:	fbb0 f2fc 	udiv	r2, r0, ip
 80194a6:	e9d4 1300 	ldrd	r1, r3, [r4]
 80194aa:	fb0c 0212 	mls	r2, ip, r2, r0
 80194ae:	b292      	uxth	r2, r2
 80194b0:	fbb3 f3fc 	udiv	r3, r3, ip
 80194b4:	fb02 1303 	mla	r3, r2, r3, r1
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d1e8      	bne.n	8019490 <uxr_compute_acknack+0x14>
 80194be:	4606      	mov	r6, r0
 80194c0:	802e      	strh	r6, [r5, #0]
 80194c2:	4630      	mov	r0, r6
 80194c4:	2101      	movs	r1, #1
 80194c6:	89e6      	ldrh	r6, [r4, #14]
 80194c8:	f000 fb62 	bl	8019b90 <uxr_seq_num_sub>
 80194cc:	4601      	mov	r1, r0
 80194ce:	4630      	mov	r0, r6
 80194d0:	f000 fb5e 	bl	8019b90 <uxr_seq_num_sub>
 80194d4:	4606      	mov	r6, r0
 80194d6:	b318      	cbz	r0, 8019520 <uxr_compute_acknack+0xa4>
 80194d8:	f04f 0900 	mov.w	r9, #0
 80194dc:	464f      	mov	r7, r9
 80194de:	f04f 0801 	mov.w	r8, #1
 80194e2:	fa1f f189 	uxth.w	r1, r9
 80194e6:	8828      	ldrh	r0, [r5, #0]
 80194e8:	f000 fb4e 	bl	8019b88 <uxr_seq_num_add>
 80194ec:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80194f0:	6822      	ldr	r2, [r4, #0]
 80194f2:	fbb0 f1fc 	udiv	r1, r0, ip
 80194f6:	fb01 011c 	mls	r1, r1, ip, r0
 80194fa:	b289      	uxth	r1, r1
 80194fc:	6863      	ldr	r3, [r4, #4]
 80194fe:	fbb3 f3fc 	udiv	r3, r3, ip
 8019502:	fb01 2303 	mla	r3, r1, r3, r2
 8019506:	fa08 f209 	lsl.w	r2, r8, r9
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	f109 0901 	add.w	r9, r9, #1
 8019510:	b90b      	cbnz	r3, 8019516 <uxr_compute_acknack+0x9a>
 8019512:	4317      	orrs	r7, r2
 8019514:	b2bf      	uxth	r7, r7
 8019516:	454e      	cmp	r6, r9
 8019518:	d1e3      	bne.n	80194e2 <uxr_compute_acknack+0x66>
 801951a:	4638      	mov	r0, r7
 801951c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019520:	4607      	mov	r7, r0
 8019522:	4638      	mov	r0, r7
 8019524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08019528 <uxr_init_output_best_effort_stream>:
 8019528:	b410      	push	{r4}
 801952a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 801952e:	81c4      	strh	r4, [r0, #14]
 8019530:	e9c0 1300 	strd	r1, r3, [r0]
 8019534:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019538:	7303      	strb	r3, [r0, #12]
 801953a:	6082      	str	r2, [r0, #8]
 801953c:	4770      	bx	lr
 801953e:	bf00      	nop

08019540 <uxr_reset_output_best_effort_stream>:
 8019540:	7b02      	ldrb	r2, [r0, #12]
 8019542:	6042      	str	r2, [r0, #4]
 8019544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019548:	81c3      	strh	r3, [r0, #14]
 801954a:	4770      	bx	lr

0801954c <uxr_prepare_best_effort_buffer_to_write>:
 801954c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801954e:	4604      	mov	r4, r0
 8019550:	b083      	sub	sp, #12
 8019552:	6840      	ldr	r0, [r0, #4]
 8019554:	460d      	mov	r5, r1
 8019556:	4616      	mov	r6, r2
 8019558:	f7fb fcca 	bl	8014ef0 <uxr_submessage_padding>
 801955c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8019560:	4410      	add	r0, r2
 8019562:	1942      	adds	r2, r0, r5
 8019564:	4293      	cmp	r3, r2
 8019566:	bf2c      	ite	cs
 8019568:	2701      	movcs	r7, #1
 801956a:	2700      	movcc	r7, #0
 801956c:	d202      	bcs.n	8019574 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801956e:	4638      	mov	r0, r7
 8019570:	b003      	add	sp, #12
 8019572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019574:	9000      	str	r0, [sp, #0]
 8019576:	6821      	ldr	r1, [r4, #0]
 8019578:	4630      	mov	r0, r6
 801957a:	2300      	movs	r3, #0
 801957c:	f7f9 fafe 	bl	8012b7c <ucdr_init_buffer_origin_offset>
 8019580:	6861      	ldr	r1, [r4, #4]
 8019582:	4638      	mov	r0, r7
 8019584:	4429      	add	r1, r5
 8019586:	6061      	str	r1, [r4, #4]
 8019588:	b003      	add	sp, #12
 801958a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801958c <uxr_prepare_best_effort_buffer_to_send>:
 801958c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019590:	6845      	ldr	r5, [r0, #4]
 8019592:	4604      	mov	r4, r0
 8019594:	7b00      	ldrb	r0, [r0, #12]
 8019596:	4285      	cmp	r5, r0
 8019598:	bf8c      	ite	hi
 801959a:	2701      	movhi	r7, #1
 801959c:	2700      	movls	r7, #0
 801959e:	d802      	bhi.n	80195a6 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 80195a0:	4638      	mov	r0, r7
 80195a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195a6:	4688      	mov	r8, r1
 80195a8:	89e0      	ldrh	r0, [r4, #14]
 80195aa:	2101      	movs	r1, #1
 80195ac:	4615      	mov	r5, r2
 80195ae:	461e      	mov	r6, r3
 80195b0:	f000 faea 	bl	8019b88 <uxr_seq_num_add>
 80195b4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80195b8:	81e0      	strh	r0, [r4, #14]
 80195ba:	8030      	strh	r0, [r6, #0]
 80195bc:	f8c8 2000 	str.w	r2, [r8]
 80195c0:	602b      	str	r3, [r5, #0]
 80195c2:	7b23      	ldrb	r3, [r4, #12]
 80195c4:	6063      	str	r3, [r4, #4]
 80195c6:	4638      	mov	r0, r7
 80195c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080195cc <on_full_output_buffer>:
 80195cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195ce:	6802      	ldr	r2, [r0, #0]
 80195d0:	460d      	mov	r5, r1
 80195d2:	6809      	ldr	r1, [r1, #0]
 80195d4:	892f      	ldrh	r7, [r5, #8]
 80195d6:	686c      	ldr	r4, [r5, #4]
 80195d8:	fbb4 f4f7 	udiv	r4, r4, r7
 80195dc:	1a53      	subs	r3, r2, r1
 80195de:	fbb3 f3f4 	udiv	r3, r3, r4
 80195e2:	3301      	adds	r3, #1
 80195e4:	b29b      	uxth	r3, r3
 80195e6:	fbb3 f2f7 	udiv	r2, r3, r7
 80195ea:	fb07 3312 	mls	r3, r7, r2, r3
 80195ee:	b29b      	uxth	r3, r3
 80195f0:	fb04 f403 	mul.w	r4, r4, r3
 80195f4:	7b2f      	ldrb	r7, [r5, #12]
 80195f6:	590a      	ldr	r2, [r1, r4]
 80195f8:	6903      	ldr	r3, [r0, #16]
 80195fa:	443c      	add	r4, r7
 80195fc:	3408      	adds	r4, #8
 80195fe:	1bd2      	subs	r2, r2, r7
 8019600:	4606      	mov	r6, r0
 8019602:	4421      	add	r1, r4
 8019604:	3a04      	subs	r2, #4
 8019606:	f7f9 fac3 	bl	8012b90 <ucdr_init_buffer_origin>
 801960a:	4630      	mov	r0, r6
 801960c:	4902      	ldr	r1, [pc, #8]	; (8019618 <on_full_output_buffer+0x4c>)
 801960e:	462a      	mov	r2, r5
 8019610:	f7f9 fa9c 	bl	8012b4c <ucdr_set_on_full_buffer_callback>
 8019614:	2000      	movs	r0, #0
 8019616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019618:	080195cd 	.word	0x080195cd

0801961c <uxr_init_output_reliable_stream>:
 801961c:	b430      	push	{r4, r5}
 801961e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8019622:	6001      	str	r1, [r0, #0]
 8019624:	8103      	strh	r3, [r0, #8]
 8019626:	6042      	str	r2, [r0, #4]
 8019628:	7304      	strb	r4, [r0, #12]
 801962a:	b1b3      	cbz	r3, 801965a <uxr_init_output_reliable_stream+0x3e>
 801962c:	600c      	str	r4, [r1, #0]
 801962e:	8901      	ldrh	r1, [r0, #8]
 8019630:	2901      	cmp	r1, #1
 8019632:	d912      	bls.n	801965a <uxr_init_output_reliable_stream+0x3e>
 8019634:	2201      	movs	r2, #1
 8019636:	e9d0 5400 	ldrd	r5, r4, [r0]
 801963a:	fbb2 f3f1 	udiv	r3, r2, r1
 801963e:	fb01 2313 	mls	r3, r1, r3, r2
 8019642:	b29b      	uxth	r3, r3
 8019644:	fbb4 f1f1 	udiv	r1, r4, r1
 8019648:	fb03 f301 	mul.w	r3, r3, r1
 801964c:	7b01      	ldrb	r1, [r0, #12]
 801964e:	50e9      	str	r1, [r5, r3]
 8019650:	3201      	adds	r2, #1
 8019652:	8901      	ldrh	r1, [r0, #8]
 8019654:	b292      	uxth	r2, r2
 8019656:	4291      	cmp	r1, r2
 8019658:	d8ed      	bhi.n	8019636 <uxr_init_output_reliable_stream+0x1a>
 801965a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801965e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019662:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8019666:	4b05      	ldr	r3, [pc, #20]	; (801967c <uxr_init_output_reliable_stream+0x60>)
 8019668:	f8c0 300e 	str.w	r3, [r0, #14]
 801966c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019670:	2300      	movs	r3, #0
 8019672:	bc30      	pop	{r4, r5}
 8019674:	8242      	strh	r2, [r0, #18]
 8019676:	8403      	strh	r3, [r0, #32]
 8019678:	4770      	bx	lr
 801967a:	bf00      	nop
 801967c:	ffff0000 	.word	0xffff0000

08019680 <uxr_reset_output_reliable_stream>:
 8019680:	8902      	ldrh	r2, [r0, #8]
 8019682:	b430      	push	{r4, r5}
 8019684:	b19a      	cbz	r2, 80196ae <uxr_reset_output_reliable_stream+0x2e>
 8019686:	2400      	movs	r4, #0
 8019688:	4621      	mov	r1, r4
 801968a:	fbb1 f3f2 	udiv	r3, r1, r2
 801968e:	fb02 1313 	mls	r3, r2, r3, r1
 8019692:	e9d0 5100 	ldrd	r5, r1, [r0]
 8019696:	b29b      	uxth	r3, r3
 8019698:	fbb1 f2f2 	udiv	r2, r1, r2
 801969c:	fb03 f302 	mul.w	r3, r3, r2
 80196a0:	7b02      	ldrb	r2, [r0, #12]
 80196a2:	50ea      	str	r2, [r5, r3]
 80196a4:	3401      	adds	r4, #1
 80196a6:	8902      	ldrh	r2, [r0, #8]
 80196a8:	b2a1      	uxth	r1, r4
 80196aa:	428a      	cmp	r2, r1
 80196ac:	d8ed      	bhi.n	801968a <uxr_reset_output_reliable_stream+0xa>
 80196ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80196b2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80196b6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80196ba:	4b05      	ldr	r3, [pc, #20]	; (80196d0 <uxr_reset_output_reliable_stream+0x50>)
 80196bc:	f8c0 300e 	str.w	r3, [r0, #14]
 80196c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80196c4:	2300      	movs	r3, #0
 80196c6:	bc30      	pop	{r4, r5}
 80196c8:	8242      	strh	r2, [r0, #18]
 80196ca:	8403      	strh	r3, [r0, #32]
 80196cc:	4770      	bx	lr
 80196ce:	bf00      	nop
 80196d0:	ffff0000 	.word	0xffff0000

080196d4 <uxr_prepare_reliable_buffer_to_write>:
 80196d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196d8:	8903      	ldrh	r3, [r0, #8]
 80196da:	89c5      	ldrh	r5, [r0, #14]
 80196dc:	fbb5 fef3 	udiv	lr, r5, r3
 80196e0:	4604      	mov	r4, r0
 80196e2:	fb03 571e 	mls	r7, r3, lr, r5
 80196e6:	6800      	ldr	r0, [r0, #0]
 80196e8:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80196ec:	fbbc fcf3 	udiv	ip, ip, r3
 80196f0:	b2bf      	uxth	r7, r7
 80196f2:	fb0c 0707 	mla	r7, ip, r7, r0
 80196f6:	4688      	mov	r8, r1
 80196f8:	6839      	ldr	r1, [r7, #0]
 80196fa:	b091      	sub	sp, #68	; 0x44
 80196fc:	eb01 0908 	add.w	r9, r1, r8
 8019700:	f1ac 0604 	sub.w	r6, ip, #4
 8019704:	9204      	str	r2, [sp, #16]
 8019706:	45b1      	cmp	r9, r6
 8019708:	f107 0204 	add.w	r2, r7, #4
 801970c:	9102      	str	r1, [sp, #8]
 801970e:	9203      	str	r2, [sp, #12]
 8019710:	f8cd c014 	str.w	ip, [sp, #20]
 8019714:	f240 80d7 	bls.w	80198c6 <uxr_prepare_reliable_buffer_to_write+0x1f2>
 8019718:	f894 b00c 	ldrb.w	fp, [r4, #12]
 801971c:	eb0b 0208 	add.w	r2, fp, r8
 8019720:	42b2      	cmp	r2, r6
 8019722:	f240 80bd 	bls.w	80198a0 <uxr_prepare_reliable_buffer_to_write+0x1cc>
 8019726:	460a      	mov	r2, r1
 8019728:	3204      	adds	r2, #4
 801972a:	42b2      	cmp	r2, r6
 801972c:	f080 810e 	bcs.w	801994c <uxr_prepare_reliable_buffer_to_write+0x278>
 8019730:	f8cd c01c 	str.w	ip, [sp, #28]
 8019734:	2b00      	cmp	r3, #0
 8019736:	f000 8123 	beq.w	8019980 <uxr_prepare_reliable_buffer_to_write+0x2ac>
 801973a:	f04f 0a00 	mov.w	sl, #0
 801973e:	4652      	mov	r2, sl
 8019740:	4657      	mov	r7, sl
 8019742:	fbb7 f1f3 	udiv	r1, r7, r3
 8019746:	fb03 7111 	mls	r1, r3, r1, r7
 801974a:	b289      	uxth	r1, r1
 801974c:	fb0c 0101 	mla	r1, ip, r1, r0
 8019750:	f10a 0a01 	add.w	sl, sl, #1
 8019754:	6809      	ldr	r1, [r1, #0]
 8019756:	458b      	cmp	fp, r1
 8019758:	bf08      	it	eq
 801975a:	3201      	addeq	r2, #1
 801975c:	fa1f f78a 	uxth.w	r7, sl
 8019760:	bf08      	it	eq
 8019762:	b292      	uxtheq	r2, r2
 8019764:	429f      	cmp	r7, r3
 8019766:	d3ec      	bcc.n	8019742 <uxr_prepare_reliable_buffer_to_write+0x6e>
 8019768:	9902      	ldr	r1, [sp, #8]
 801976a:	1f37      	subs	r7, r6, #4
 801976c:	b2bf      	uxth	r7, r7
 801976e:	eba7 0901 	sub.w	r9, r7, r1
 8019772:	fa1f f989 	uxth.w	r9, r9
 8019776:	eba7 070b 	sub.w	r7, r7, fp
 801977a:	b2bf      	uxth	r7, r7
 801977c:	eba8 0109 	sub.w	r1, r8, r9
 8019780:	fbb1 faf7 	udiv	sl, r1, r7
 8019784:	fb07 111a 	mls	r1, r7, sl, r1
 8019788:	9706      	str	r7, [sp, #24]
 801978a:	2900      	cmp	r1, #0
 801978c:	f040 80bd 	bne.w	801990a <uxr_prepare_reliable_buffer_to_write+0x236>
 8019790:	fa1f fa8a 	uxth.w	sl, sl
 8019794:	4592      	cmp	sl, r2
 8019796:	f200 8092 	bhi.w	80198be <uxr_prepare_reliable_buffer_to_write+0x1ea>
 801979a:	f10d 0b20 	add.w	fp, sp, #32
 801979e:	f1ba 0f00 	cmp.w	sl, #0
 80197a2:	d03e      	beq.n	8019822 <uxr_prepare_reliable_buffer_to_write+0x14e>
 80197a4:	f04f 0800 	mov.w	r8, #0
 80197a8:	f10d 0b20 	add.w	fp, sp, #32
 80197ac:	e006      	b.n	80197bc <uxr_prepare_reliable_buffer_to_write+0xe8>
 80197ae:	6860      	ldr	r0, [r4, #4]
 80197b0:	fbb0 fcf3 	udiv	ip, r0, r3
 80197b4:	6820      	ldr	r0, [r4, #0]
 80197b6:	fbb5 fef3 	udiv	lr, r5, r3
 80197ba:	46b9      	mov	r9, r7
 80197bc:	fb03 531e 	mls	r3, r3, lr, r5
 80197c0:	b29b      	uxth	r3, r3
 80197c2:	fb0c 0003 	mla	r0, ip, r3, r0
 80197c6:	1d01      	adds	r1, r0, #4
 80197c8:	6803      	ldr	r3, [r0, #0]
 80197ca:	9300      	str	r3, [sp, #0]
 80197cc:	4632      	mov	r2, r6
 80197ce:	2300      	movs	r3, #0
 80197d0:	4658      	mov	r0, fp
 80197d2:	f7f9 f9d3 	bl	8012b7c <ucdr_init_buffer_origin_offset>
 80197d6:	464a      	mov	r2, r9
 80197d8:	2300      	movs	r3, #0
 80197da:	210d      	movs	r1, #13
 80197dc:	4658      	mov	r0, fp
 80197de:	f7fb fb47 	bl	8014e70 <uxr_buffer_submessage_header>
 80197e2:	8920      	ldrh	r0, [r4, #8]
 80197e4:	fbb5 f3f0 	udiv	r3, r5, r0
 80197e8:	e9d4 2100 	ldrd	r2, r1, [r4]
 80197ec:	fb00 5313 	mls	r3, r0, r3, r5
 80197f0:	b29b      	uxth	r3, r3
 80197f2:	fbb1 f1f0 	udiv	r1, r1, r0
 80197f6:	fb03 f301 	mul.w	r3, r3, r1
 80197fa:	4628      	mov	r0, r5
 80197fc:	50d6      	str	r6, [r2, r3]
 80197fe:	2101      	movs	r1, #1
 8019800:	f000 f9c2 	bl	8019b88 <uxr_seq_num_add>
 8019804:	f108 0801 	add.w	r8, r8, #1
 8019808:	fa1f f388 	uxth.w	r3, r8
 801980c:	459a      	cmp	sl, r3
 801980e:	4605      	mov	r5, r0
 8019810:	8923      	ldrh	r3, [r4, #8]
 8019812:	d8cc      	bhi.n	80197ae <uxr_prepare_reliable_buffer_to_write+0xda>
 8019814:	fbb0 fef3 	udiv	lr, r0, r3
 8019818:	6820      	ldr	r0, [r4, #0]
 801981a:	6861      	ldr	r1, [r4, #4]
 801981c:	fbb1 f2f3 	udiv	r2, r1, r3
 8019820:	9207      	str	r2, [sp, #28]
 8019822:	fb03 511e 	mls	r1, r3, lr, r5
 8019826:	9b07      	ldr	r3, [sp, #28]
 8019828:	b289      	uxth	r1, r1
 801982a:	fb03 0101 	mla	r1, r3, r1, r0
 801982e:	4632      	mov	r2, r6
 8019830:	680b      	ldr	r3, [r1, #0]
 8019832:	9300      	str	r3, [sp, #0]
 8019834:	4658      	mov	r0, fp
 8019836:	3104      	adds	r1, #4
 8019838:	2300      	movs	r3, #0
 801983a:	f7f9 f99f 	bl	8012b7c <ucdr_init_buffer_origin_offset>
 801983e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8019842:	4658      	mov	r0, fp
 8019844:	fa1f f288 	uxth.w	r2, r8
 8019848:	2302      	movs	r3, #2
 801984a:	210d      	movs	r1, #13
 801984c:	f7fb fb10 	bl	8014e70 <uxr_buffer_submessage_header>
 8019850:	e9d4 0200 	ldrd	r0, r2, [r4]
 8019854:	8921      	ldrh	r1, [r4, #8]
 8019856:	9f02      	ldr	r7, [sp, #8]
 8019858:	9006      	str	r0, [sp, #24]
 801985a:	9803      	ldr	r0, [sp, #12]
 801985c:	7b26      	ldrb	r6, [r4, #12]
 801985e:	fbb5 f3f1 	udiv	r3, r5, r1
 8019862:	fbb2 f2f1 	udiv	r2, r2, r1
 8019866:	fb01 5313 	mls	r3, r1, r3, r5
 801986a:	1d39      	adds	r1, r7, #4
 801986c:	4408      	add	r0, r1
 801986e:	b29b      	uxth	r3, r3
 8019870:	fb03 f302 	mul.w	r3, r3, r2
 8019874:	4601      	mov	r1, r0
 8019876:	3604      	adds	r6, #4
 8019878:	9806      	ldr	r0, [sp, #24]
 801987a:	9a05      	ldr	r2, [sp, #20]
 801987c:	4446      	add	r6, r8
 801987e:	50c6      	str	r6, [r0, r3]
 8019880:	9e04      	ldr	r6, [sp, #16]
 8019882:	3a08      	subs	r2, #8
 8019884:	1bd2      	subs	r2, r2, r7
 8019886:	4630      	mov	r0, r6
 8019888:	f7f9 f98a 	bl	8012ba0 <ucdr_init_buffer>
 801988c:	4630      	mov	r0, r6
 801988e:	493d      	ldr	r1, [pc, #244]	; (8019984 <uxr_prepare_reliable_buffer_to_write+0x2b0>)
 8019890:	4622      	mov	r2, r4
 8019892:	f7f9 f95b 	bl	8012b4c <ucdr_set_on_full_buffer_callback>
 8019896:	2001      	movs	r0, #1
 8019898:	81e5      	strh	r5, [r4, #14]
 801989a:	b011      	add	sp, #68	; 0x44
 801989c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198a0:	4628      	mov	r0, r5
 80198a2:	2101      	movs	r1, #1
 80198a4:	f000 f970 	bl	8019b88 <uxr_seq_num_add>
 80198a8:	8921      	ldrh	r1, [r4, #8]
 80198aa:	4605      	mov	r5, r0
 80198ac:	8a60      	ldrh	r0, [r4, #18]
 80198ae:	f000 f96b 	bl	8019b88 <uxr_seq_num_add>
 80198b2:	4601      	mov	r1, r0
 80198b4:	4628      	mov	r0, r5
 80198b6:	f000 f96f 	bl	8019b98 <uxr_seq_num_cmp>
 80198ba:	2800      	cmp	r0, #0
 80198bc:	dd2b      	ble.n	8019916 <uxr_prepare_reliable_buffer_to_write+0x242>
 80198be:	2000      	movs	r0, #0
 80198c0:	b011      	add	sp, #68	; 0x44
 80198c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198c6:	4619      	mov	r1, r3
 80198c8:	8a60      	ldrh	r0, [r4, #18]
 80198ca:	f000 f95d 	bl	8019b88 <uxr_seq_num_add>
 80198ce:	4601      	mov	r1, r0
 80198d0:	4628      	mov	r0, r5
 80198d2:	f000 f961 	bl	8019b98 <uxr_seq_num_cmp>
 80198d6:	2800      	cmp	r0, #0
 80198d8:	dcf1      	bgt.n	80198be <uxr_prepare_reliable_buffer_to_write+0x1ea>
 80198da:	8921      	ldrh	r1, [r4, #8]
 80198dc:	fbb5 f3f1 	udiv	r3, r5, r1
 80198e0:	e9d4 4200 	ldrd	r4, r2, [r4]
 80198e4:	fb01 5313 	mls	r3, r1, r3, r5
 80198e8:	b29b      	uxth	r3, r3
 80198ea:	fbb2 f2f1 	udiv	r2, r2, r1
 80198ee:	fb03 f302 	mul.w	r3, r3, r2
 80198f2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80198f6:	f844 9003 	str.w	r9, [r4, r3]
 80198fa:	9b02      	ldr	r3, [sp, #8]
 80198fc:	9300      	str	r3, [sp, #0]
 80198fe:	464a      	mov	r2, r9
 8019900:	2300      	movs	r3, #0
 8019902:	f7f9 f93b 	bl	8012b7c <ucdr_init_buffer_origin_offset>
 8019906:	2001      	movs	r0, #1
 8019908:	e7da      	b.n	80198c0 <uxr_prepare_reliable_buffer_to_write+0x1ec>
 801990a:	f10a 0a01 	add.w	sl, sl, #1
 801990e:	fa1f fa8a 	uxth.w	sl, sl
 8019912:	9106      	str	r1, [sp, #24]
 8019914:	e73e      	b.n	8019794 <uxr_prepare_reliable_buffer_to_write+0xc0>
 8019916:	8920      	ldrh	r0, [r4, #8]
 8019918:	fbb5 f3f0 	udiv	r3, r5, r0
 801991c:	fb00 5313 	mls	r3, r0, r3, r5
 8019920:	b29b      	uxth	r3, r3
 8019922:	6862      	ldr	r2, [r4, #4]
 8019924:	6821      	ldr	r1, [r4, #0]
 8019926:	fbb2 f0f0 	udiv	r0, r2, r0
 801992a:	fb03 f300 	mul.w	r3, r3, r0
 801992e:	7b22      	ldrb	r2, [r4, #12]
 8019930:	9804      	ldr	r0, [sp, #16]
 8019932:	3304      	adds	r3, #4
 8019934:	4419      	add	r1, r3
 8019936:	4442      	add	r2, r8
 8019938:	f841 2c04 	str.w	r2, [r1, #-4]
 801993c:	7b23      	ldrb	r3, [r4, #12]
 801993e:	9300      	str	r3, [sp, #0]
 8019940:	2300      	movs	r3, #0
 8019942:	f7f9 f91b 	bl	8012b7c <ucdr_init_buffer_origin_offset>
 8019946:	81e5      	strh	r5, [r4, #14]
 8019948:	2001      	movs	r0, #1
 801994a:	e7b9      	b.n	80198c0 <uxr_prepare_reliable_buffer_to_write+0x1ec>
 801994c:	4628      	mov	r0, r5
 801994e:	2101      	movs	r1, #1
 8019950:	f000 f91a 	bl	8019b88 <uxr_seq_num_add>
 8019954:	8923      	ldrh	r3, [r4, #8]
 8019956:	f894 b00c 	ldrb.w	fp, [r4, #12]
 801995a:	4605      	mov	r5, r0
 801995c:	e9d4 0c00 	ldrd	r0, ip, [r4]
 8019960:	fbb5 fef3 	udiv	lr, r5, r3
 8019964:	fb03 521e 	mls	r2, r3, lr, r5
 8019968:	b292      	uxth	r2, r2
 801996a:	fbbc fcf3 	udiv	ip, ip, r3
 801996e:	fb0c 0202 	mla	r2, ip, r2, r0
 8019972:	1d11      	adds	r1, r2, #4
 8019974:	6812      	ldr	r2, [r2, #0]
 8019976:	9103      	str	r1, [sp, #12]
 8019978:	9202      	str	r2, [sp, #8]
 801997a:	f8cd c01c 	str.w	ip, [sp, #28]
 801997e:	e6d9      	b.n	8019734 <uxr_prepare_reliable_buffer_to_write+0x60>
 8019980:	461a      	mov	r2, r3
 8019982:	e6f1      	b.n	8019768 <uxr_prepare_reliable_buffer_to_write+0x94>
 8019984:	080195cd 	.word	0x080195cd

08019988 <uxr_prepare_next_reliable_buffer_to_send>:
 8019988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801998c:	4605      	mov	r5, r0
 801998e:	4688      	mov	r8, r1
 8019990:	8a00      	ldrh	r0, [r0, #16]
 8019992:	2101      	movs	r1, #1
 8019994:	4617      	mov	r7, r2
 8019996:	461e      	mov	r6, r3
 8019998:	f000 f8f6 	bl	8019b88 <uxr_seq_num_add>
 801999c:	8030      	strh	r0, [r6, #0]
 801999e:	892a      	ldrh	r2, [r5, #8]
 80199a0:	fbb0 f3f2 	udiv	r3, r0, r2
 80199a4:	fb02 0413 	mls	r4, r2, r3, r0
 80199a8:	b2a4      	uxth	r4, r4
 80199aa:	686b      	ldr	r3, [r5, #4]
 80199ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80199b0:	682b      	ldr	r3, [r5, #0]
 80199b2:	89e9      	ldrh	r1, [r5, #14]
 80199b4:	fb04 f402 	mul.w	r4, r4, r2
 80199b8:	3404      	adds	r4, #4
 80199ba:	4423      	add	r3, r4
 80199bc:	f8c8 3000 	str.w	r3, [r8]
 80199c0:	682b      	ldr	r3, [r5, #0]
 80199c2:	441c      	add	r4, r3
 80199c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80199c8:	603b      	str	r3, [r7, #0]
 80199ca:	f000 f8e5 	bl	8019b98 <uxr_seq_num_cmp>
 80199ce:	2800      	cmp	r0, #0
 80199d0:	dd02      	ble.n	80199d8 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 80199d2:	2000      	movs	r0, #0
 80199d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199d8:	683a      	ldr	r2, [r7, #0]
 80199da:	7b2b      	ldrb	r3, [r5, #12]
 80199dc:	429a      	cmp	r2, r3
 80199de:	d9f8      	bls.n	80199d2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80199e0:	8a69      	ldrh	r1, [r5, #18]
 80199e2:	8a28      	ldrh	r0, [r5, #16]
 80199e4:	f000 f8d4 	bl	8019b90 <uxr_seq_num_sub>
 80199e8:	892b      	ldrh	r3, [r5, #8]
 80199ea:	4283      	cmp	r3, r0
 80199ec:	d0f1      	beq.n	80199d2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80199ee:	8830      	ldrh	r0, [r6, #0]
 80199f0:	89eb      	ldrh	r3, [r5, #14]
 80199f2:	8228      	strh	r0, [r5, #16]
 80199f4:	4298      	cmp	r0, r3
 80199f6:	d002      	beq.n	80199fe <uxr_prepare_next_reliable_buffer_to_send+0x76>
 80199f8:	2001      	movs	r0, #1
 80199fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199fe:	2101      	movs	r1, #1
 8019a00:	f000 f8c2 	bl	8019b88 <uxr_seq_num_add>
 8019a04:	81e8      	strh	r0, [r5, #14]
 8019a06:	2001      	movs	r0, #1
 8019a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019a0c <uxr_update_output_stream_heartbeat_timestamp>:
 8019a0c:	b5d0      	push	{r4, r6, r7, lr}
 8019a0e:	8a01      	ldrh	r1, [r0, #16]
 8019a10:	4604      	mov	r4, r0
 8019a12:	8a40      	ldrh	r0, [r0, #18]
 8019a14:	4616      	mov	r6, r2
 8019a16:	461f      	mov	r7, r3
 8019a18:	f000 f8be 	bl	8019b98 <uxr_seq_num_cmp>
 8019a1c:	2800      	cmp	r0, #0
 8019a1e:	db07      	blt.n	8019a30 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8019a20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019a24:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019a28:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8019a2c:	2000      	movs	r0, #0
 8019a2e:	bdd0      	pop	{r4, r6, r7, pc}
 8019a30:	f894 0020 	ldrb.w	r0, [r4, #32]
 8019a34:	b948      	cbnz	r0, 8019a4a <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8019a36:	2301      	movs	r3, #1
 8019a38:	f884 3020 	strb.w	r3, [r4, #32]
 8019a3c:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8019a40:	f147 0200 	adc.w	r2, r7, #0
 8019a44:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8019a48:	bdd0      	pop	{r4, r6, r7, pc}
 8019a4a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8019a4e:	4296      	cmp	r6, r2
 8019a50:	eb77 0303 	sbcs.w	r3, r7, r3
 8019a54:	bfa5      	ittet	ge
 8019a56:	3001      	addge	r0, #1
 8019a58:	f884 0020 	strbge.w	r0, [r4, #32]
 8019a5c:	2000      	movlt	r0, #0
 8019a5e:	2001      	movge	r0, #1
 8019a60:	e7ec      	b.n	8019a3c <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8019a62:	bf00      	nop

08019a64 <uxr_begin_output_nack_buffer_it>:
 8019a64:	8a40      	ldrh	r0, [r0, #18]
 8019a66:	4770      	bx	lr

08019a68 <uxr_next_reliable_nack_buffer_to_send>:
 8019a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a6c:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8019a70:	f1b9 0f00 	cmp.w	r9, #0
 8019a74:	d011      	beq.n	8019a9a <uxr_next_reliable_nack_buffer_to_send+0x32>
 8019a76:	4605      	mov	r5, r0
 8019a78:	8818      	ldrh	r0, [r3, #0]
 8019a7a:	460f      	mov	r7, r1
 8019a7c:	4690      	mov	r8, r2
 8019a7e:	461e      	mov	r6, r3
 8019a80:	2101      	movs	r1, #1
 8019a82:	f000 f881 	bl	8019b88 <uxr_seq_num_add>
 8019a86:	8030      	strh	r0, [r6, #0]
 8019a88:	8a29      	ldrh	r1, [r5, #16]
 8019a8a:	f000 f885 	bl	8019b98 <uxr_seq_num_cmp>
 8019a8e:	2800      	cmp	r0, #0
 8019a90:	dd06      	ble.n	8019aa0 <uxr_next_reliable_nack_buffer_to_send+0x38>
 8019a92:	f04f 0900 	mov.w	r9, #0
 8019a96:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 8019a9a:	4648      	mov	r0, r9
 8019a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019aa0:	892a      	ldrh	r2, [r5, #8]
 8019aa2:	8830      	ldrh	r0, [r6, #0]
 8019aa4:	fbb0 f4f2 	udiv	r4, r0, r2
 8019aa8:	fb02 0414 	mls	r4, r2, r4, r0
 8019aac:	b2a4      	uxth	r4, r4
 8019aae:	686b      	ldr	r3, [r5, #4]
 8019ab0:	fbb3 f2f2 	udiv	r2, r3, r2
 8019ab4:	682b      	ldr	r3, [r5, #0]
 8019ab6:	fb04 f402 	mul.w	r4, r4, r2
 8019aba:	3404      	adds	r4, #4
 8019abc:	4423      	add	r3, r4
 8019abe:	603b      	str	r3, [r7, #0]
 8019ac0:	682b      	ldr	r3, [r5, #0]
 8019ac2:	441c      	add	r4, r3
 8019ac4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019ac8:	f8c8 3000 	str.w	r3, [r8]
 8019acc:	7b2a      	ldrb	r2, [r5, #12]
 8019ace:	429a      	cmp	r2, r3
 8019ad0:	d0d6      	beq.n	8019a80 <uxr_next_reliable_nack_buffer_to_send+0x18>
 8019ad2:	4648      	mov	r0, r9
 8019ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08019ad8 <uxr_process_acknack>:
 8019ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ada:	4604      	mov	r4, r0
 8019adc:	460e      	mov	r6, r1
 8019ade:	4610      	mov	r0, r2
 8019ae0:	2101      	movs	r1, #1
 8019ae2:	f000 f855 	bl	8019b90 <uxr_seq_num_sub>
 8019ae6:	8a61      	ldrh	r1, [r4, #18]
 8019ae8:	f000 f852 	bl	8019b90 <uxr_seq_num_sub>
 8019aec:	b1c0      	cbz	r0, 8019b20 <uxr_process_acknack+0x48>
 8019aee:	4605      	mov	r5, r0
 8019af0:	2700      	movs	r7, #0
 8019af2:	2101      	movs	r1, #1
 8019af4:	8a60      	ldrh	r0, [r4, #18]
 8019af6:	f000 f847 	bl	8019b88 <uxr_seq_num_add>
 8019afa:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019afe:	fbb0 f3fc 	udiv	r3, r0, ip
 8019b02:	e9d4 2100 	ldrd	r2, r1, [r4]
 8019b06:	fb0c 0313 	mls	r3, ip, r3, r0
 8019b0a:	b29b      	uxth	r3, r3
 8019b0c:	fbb1 f1fc 	udiv	r1, r1, ip
 8019b10:	3701      	adds	r7, #1
 8019b12:	fb03 f301 	mul.w	r3, r3, r1
 8019b16:	42bd      	cmp	r5, r7
 8019b18:	7b21      	ldrb	r1, [r4, #12]
 8019b1a:	8260      	strh	r0, [r4, #18]
 8019b1c:	50d1      	str	r1, [r2, r3]
 8019b1e:	d1e8      	bne.n	8019af2 <uxr_process_acknack+0x1a>
 8019b20:	3e00      	subs	r6, #0
 8019b22:	f04f 0300 	mov.w	r3, #0
 8019b26:	bf18      	it	ne
 8019b28:	2601      	movne	r6, #1
 8019b2a:	f884 3020 	strb.w	r3, [r4, #32]
 8019b2e:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8019b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019b34 <uxr_is_output_up_to_date>:
 8019b34:	8a01      	ldrh	r1, [r0, #16]
 8019b36:	8a40      	ldrh	r0, [r0, #18]
 8019b38:	b508      	push	{r3, lr}
 8019b3a:	f000 f82d 	bl	8019b98 <uxr_seq_num_cmp>
 8019b3e:	fab0 f080 	clz	r0, r0
 8019b42:	0940      	lsrs	r0, r0, #5
 8019b44:	bd08      	pop	{r3, pc}
 8019b46:	bf00      	nop

08019b48 <get_available_free_slots>:
 8019b48:	8901      	ldrh	r1, [r0, #8]
 8019b4a:	b1d9      	cbz	r1, 8019b84 <get_available_free_slots+0x3c>
 8019b4c:	b4f0      	push	{r4, r5, r6, r7}
 8019b4e:	2400      	movs	r4, #0
 8019b50:	6845      	ldr	r5, [r0, #4]
 8019b52:	6807      	ldr	r7, [r0, #0]
 8019b54:	7b06      	ldrb	r6, [r0, #12]
 8019b56:	fbb5 f5f1 	udiv	r5, r5, r1
 8019b5a:	4620      	mov	r0, r4
 8019b5c:	4622      	mov	r2, r4
 8019b5e:	fbb2 f3f1 	udiv	r3, r2, r1
 8019b62:	fb01 2313 	mls	r3, r1, r3, r2
 8019b66:	b29b      	uxth	r3, r3
 8019b68:	fb05 7303 	mla	r3, r5, r3, r7
 8019b6c:	3401      	adds	r4, #1
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	429e      	cmp	r6, r3
 8019b72:	bf08      	it	eq
 8019b74:	3001      	addeq	r0, #1
 8019b76:	b2a2      	uxth	r2, r4
 8019b78:	bf08      	it	eq
 8019b7a:	b280      	uxtheq	r0, r0
 8019b7c:	428a      	cmp	r2, r1
 8019b7e:	d3ee      	bcc.n	8019b5e <get_available_free_slots+0x16>
 8019b80:	bcf0      	pop	{r4, r5, r6, r7}
 8019b82:	4770      	bx	lr
 8019b84:	4608      	mov	r0, r1
 8019b86:	4770      	bx	lr

08019b88 <uxr_seq_num_add>:
 8019b88:	4408      	add	r0, r1
 8019b8a:	b280      	uxth	r0, r0
 8019b8c:	4770      	bx	lr
 8019b8e:	bf00      	nop

08019b90 <uxr_seq_num_sub>:
 8019b90:	1a40      	subs	r0, r0, r1
 8019b92:	b280      	uxth	r0, r0
 8019b94:	4770      	bx	lr
 8019b96:	bf00      	nop

08019b98 <uxr_seq_num_cmp>:
 8019b98:	4288      	cmp	r0, r1
 8019b9a:	d011      	beq.n	8019bc0 <uxr_seq_num_cmp+0x28>
 8019b9c:	d309      	bcc.n	8019bb2 <uxr_seq_num_cmp+0x1a>
 8019b9e:	4288      	cmp	r0, r1
 8019ba0:	d910      	bls.n	8019bc4 <uxr_seq_num_cmp+0x2c>
 8019ba2:	1a40      	subs	r0, r0, r1
 8019ba4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8019ba8:	bfd4      	ite	le
 8019baa:	2001      	movle	r0, #1
 8019bac:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8019bb0:	4770      	bx	lr
 8019bb2:	1a0b      	subs	r3, r1, r0
 8019bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019bb8:	daf1      	bge.n	8019b9e <uxr_seq_num_cmp+0x6>
 8019bba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019bbe:	4770      	bx	lr
 8019bc0:	2000      	movs	r0, #0
 8019bc2:	4770      	bx	lr
 8019bc4:	2001      	movs	r0, #1
 8019bc6:	4770      	bx	lr

08019bc8 <rcl_get_default_domain_id>:
 8019bc8:	b530      	push	{r4, r5, lr}
 8019bca:	b083      	sub	sp, #12
 8019bcc:	2300      	movs	r3, #0
 8019bce:	9300      	str	r3, [sp, #0]
 8019bd0:	b1d0      	cbz	r0, 8019c08 <rcl_get_default_domain_id+0x40>
 8019bd2:	4604      	mov	r4, r0
 8019bd4:	4669      	mov	r1, sp
 8019bd6:	4815      	ldr	r0, [pc, #84]	; (8019c2c <rcl_get_default_domain_id+0x64>)
 8019bd8:	f7fe fb9c 	bl	8018314 <rcutils_get_env>
 8019bdc:	4602      	mov	r2, r0
 8019bde:	b110      	cbz	r0, 8019be6 <rcl_get_default_domain_id+0x1e>
 8019be0:	2001      	movs	r0, #1
 8019be2:	b003      	add	sp, #12
 8019be4:	bd30      	pop	{r4, r5, pc}
 8019be6:	9b00      	ldr	r3, [sp, #0]
 8019be8:	b18b      	cbz	r3, 8019c0e <rcl_get_default_domain_id+0x46>
 8019bea:	7818      	ldrb	r0, [r3, #0]
 8019bec:	2800      	cmp	r0, #0
 8019bee:	d0f8      	beq.n	8019be2 <rcl_get_default_domain_id+0x1a>
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	a901      	add	r1, sp, #4
 8019bf4:	9201      	str	r2, [sp, #4]
 8019bf6:	f001 feff 	bl	801b9f8 <strtoul>
 8019bfa:	4605      	mov	r5, r0
 8019bfc:	b150      	cbz	r0, 8019c14 <rcl_get_default_domain_id+0x4c>
 8019bfe:	1c43      	adds	r3, r0, #1
 8019c00:	d00d      	beq.n	8019c1e <rcl_get_default_domain_id+0x56>
 8019c02:	6025      	str	r5, [r4, #0]
 8019c04:	2000      	movs	r0, #0
 8019c06:	e7ec      	b.n	8019be2 <rcl_get_default_domain_id+0x1a>
 8019c08:	200b      	movs	r0, #11
 8019c0a:	b003      	add	sp, #12
 8019c0c:	bd30      	pop	{r4, r5, pc}
 8019c0e:	4618      	mov	r0, r3
 8019c10:	b003      	add	sp, #12
 8019c12:	bd30      	pop	{r4, r5, pc}
 8019c14:	9b01      	ldr	r3, [sp, #4]
 8019c16:	781b      	ldrb	r3, [r3, #0]
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d0f2      	beq.n	8019c02 <rcl_get_default_domain_id+0x3a>
 8019c1c:	e7e0      	b.n	8019be0 <rcl_get_default_domain_id+0x18>
 8019c1e:	f000 fa1b 	bl	801a058 <__errno>
 8019c22:	6803      	ldr	r3, [r0, #0]
 8019c24:	2b22      	cmp	r3, #34	; 0x22
 8019c26:	d1ec      	bne.n	8019c02 <rcl_get_default_domain_id+0x3a>
 8019c28:	e7da      	b.n	8019be0 <rcl_get_default_domain_id+0x18>
 8019c2a:	bf00      	nop
 8019c2c:	080200e4 	.word	0x080200e4

08019c30 <rcl_get_zero_initialized_guard_condition>:
 8019c30:	4a03      	ldr	r2, [pc, #12]	; (8019c40 <rcl_get_zero_initialized_guard_condition+0x10>)
 8019c32:	4603      	mov	r3, r0
 8019c34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019c38:	e883 0003 	stmia.w	r3, {r0, r1}
 8019c3c:	4618      	mov	r0, r3
 8019c3e:	4770      	bx	lr
 8019c40:	080200f4 	.word	0x080200f4

08019c44 <rcl_guard_condition_init>:
 8019c44:	b082      	sub	sp, #8
 8019c46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c48:	b087      	sub	sp, #28
 8019c4a:	ac0c      	add	r4, sp, #48	; 0x30
 8019c4c:	e884 000c 	stmia.w	r4, {r2, r3}
 8019c50:	4625      	mov	r5, r4
 8019c52:	4607      	mov	r7, r0
 8019c54:	460e      	mov	r6, r1
 8019c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019c58:	ac01      	add	r4, sp, #4
 8019c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019c5c:	682b      	ldr	r3, [r5, #0]
 8019c5e:	6023      	str	r3, [r4, #0]
 8019c60:	a801      	add	r0, sp, #4
 8019c62:	f7f5 ff31 	bl	800fac8 <rcutils_allocator_is_valid>
 8019c66:	2800      	cmp	r0, #0
 8019c68:	d034      	beq.n	8019cd4 <rcl_guard_condition_init+0x90>
 8019c6a:	463c      	mov	r4, r7
 8019c6c:	2f00      	cmp	r7, #0
 8019c6e:	d031      	beq.n	8019cd4 <rcl_guard_condition_init+0x90>
 8019c70:	4635      	mov	r5, r6
 8019c72:	687e      	ldr	r6, [r7, #4]
 8019c74:	bb46      	cbnz	r6, 8019cc8 <rcl_guard_condition_init+0x84>
 8019c76:	2d00      	cmp	r5, #0
 8019c78:	d02c      	beq.n	8019cd4 <rcl_guard_condition_init+0x90>
 8019c7a:	4628      	mov	r0, r5
 8019c7c:	f7fc f90c 	bl	8015e98 <rcl_context_is_valid>
 8019c80:	2800      	cmp	r0, #0
 8019c82:	d02d      	beq.n	8019ce0 <rcl_guard_condition_init+0x9c>
 8019c84:	9b01      	ldr	r3, [sp, #4]
 8019c86:	9905      	ldr	r1, [sp, #20]
 8019c88:	201c      	movs	r0, #28
 8019c8a:	4798      	blx	r3
 8019c8c:	4607      	mov	r7, r0
 8019c8e:	6060      	str	r0, [r4, #4]
 8019c90:	2800      	cmp	r0, #0
 8019c92:	d02e      	beq.n	8019cf2 <rcl_guard_condition_init+0xae>
 8019c94:	6828      	ldr	r0, [r5, #0]
 8019c96:	3028      	adds	r0, #40	; 0x28
 8019c98:	f000 f8dc 	bl	8019e54 <rmw_create_guard_condition>
 8019c9c:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8019ca0:	6038      	str	r0, [r7, #0]
 8019ca2:	f8dc 5000 	ldr.w	r5, [ip]
 8019ca6:	b1ed      	cbz	r5, 8019ce4 <rcl_guard_condition_init+0xa0>
 8019ca8:	ac01      	add	r4, sp, #4
 8019caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019cac:	2701      	movs	r7, #1
 8019cae:	f10c 0508 	add.w	r5, ip, #8
 8019cb2:	f88c 7004 	strb.w	r7, [ip, #4]
 8019cb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019cb8:	6823      	ldr	r3, [r4, #0]
 8019cba:	602b      	str	r3, [r5, #0]
 8019cbc:	4630      	mov	r0, r6
 8019cbe:	b007      	add	sp, #28
 8019cc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019cc4:	b002      	add	sp, #8
 8019cc6:	4770      	bx	lr
 8019cc8:	2064      	movs	r0, #100	; 0x64
 8019cca:	b007      	add	sp, #28
 8019ccc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019cd0:	b002      	add	sp, #8
 8019cd2:	4770      	bx	lr
 8019cd4:	200b      	movs	r0, #11
 8019cd6:	b007      	add	sp, #28
 8019cd8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019cdc:	b002      	add	sp, #8
 8019cde:	4770      	bx	lr
 8019ce0:	2065      	movs	r0, #101	; 0x65
 8019ce2:	e7f2      	b.n	8019cca <rcl_guard_condition_init+0x86>
 8019ce4:	4660      	mov	r0, ip
 8019ce6:	9b02      	ldr	r3, [sp, #8]
 8019ce8:	9905      	ldr	r1, [sp, #20]
 8019cea:	4798      	blx	r3
 8019cec:	6065      	str	r5, [r4, #4]
 8019cee:	2001      	movs	r0, #1
 8019cf0:	e7eb      	b.n	8019cca <rcl_guard_condition_init+0x86>
 8019cf2:	200a      	movs	r0, #10
 8019cf4:	e7e9      	b.n	8019cca <rcl_guard_condition_init+0x86>
 8019cf6:	bf00      	nop

08019cf8 <rcl_guard_condition_init_from_rmw>:
 8019cf8:	b082      	sub	sp, #8
 8019cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cfe:	b086      	sub	sp, #24
 8019d00:	ac0c      	add	r4, sp, #48	; 0x30
 8019d02:	4684      	mov	ip, r0
 8019d04:	f844 3f04 	str.w	r3, [r4, #4]!
 8019d08:	460f      	mov	r7, r1
 8019d0a:	4690      	mov	r8, r2
 8019d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d0e:	ad01      	add	r5, sp, #4
 8019d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019d12:	6823      	ldr	r3, [r4, #0]
 8019d14:	602b      	str	r3, [r5, #0]
 8019d16:	a801      	add	r0, sp, #4
 8019d18:	4664      	mov	r4, ip
 8019d1a:	f7f5 fed5 	bl	800fac8 <rcutils_allocator_is_valid>
 8019d1e:	b328      	cbz	r0, 8019d6c <rcl_guard_condition_init_from_rmw+0x74>
 8019d20:	b324      	cbz	r4, 8019d6c <rcl_guard_condition_init_from_rmw+0x74>
 8019d22:	6866      	ldr	r6, [r4, #4]
 8019d24:	b9e6      	cbnz	r6, 8019d60 <rcl_guard_condition_init_from_rmw+0x68>
 8019d26:	f1b8 0f00 	cmp.w	r8, #0
 8019d2a:	d01f      	beq.n	8019d6c <rcl_guard_condition_init_from_rmw+0x74>
 8019d2c:	4640      	mov	r0, r8
 8019d2e:	f7fc f8b3 	bl	8015e98 <rcl_context_is_valid>
 8019d32:	b308      	cbz	r0, 8019d78 <rcl_guard_condition_init_from_rmw+0x80>
 8019d34:	9b01      	ldr	r3, [sp, #4]
 8019d36:	9905      	ldr	r1, [sp, #20]
 8019d38:	201c      	movs	r0, #28
 8019d3a:	4798      	blx	r3
 8019d3c:	4605      	mov	r5, r0
 8019d3e:	6060      	str	r0, [r4, #4]
 8019d40:	b340      	cbz	r0, 8019d94 <rcl_guard_condition_init_from_rmw+0x9c>
 8019d42:	b1df      	cbz	r7, 8019d7c <rcl_guard_condition_init_from_rmw+0x84>
 8019d44:	6007      	str	r7, [r0, #0]
 8019d46:	7106      	strb	r6, [r0, #4]
 8019d48:	ac01      	add	r4, sp, #4
 8019d4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d4c:	3508      	adds	r5, #8
 8019d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019d50:	6823      	ldr	r3, [r4, #0]
 8019d52:	602b      	str	r3, [r5, #0]
 8019d54:	2000      	movs	r0, #0
 8019d56:	b006      	add	sp, #24
 8019d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019d5c:	b002      	add	sp, #8
 8019d5e:	4770      	bx	lr
 8019d60:	2064      	movs	r0, #100	; 0x64
 8019d62:	b006      	add	sp, #24
 8019d64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019d68:	b002      	add	sp, #8
 8019d6a:	4770      	bx	lr
 8019d6c:	200b      	movs	r0, #11
 8019d6e:	b006      	add	sp, #24
 8019d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019d74:	b002      	add	sp, #8
 8019d76:	4770      	bx	lr
 8019d78:	2065      	movs	r0, #101	; 0x65
 8019d7a:	e7f2      	b.n	8019d62 <rcl_guard_condition_init_from_rmw+0x6a>
 8019d7c:	f8d8 0000 	ldr.w	r0, [r8]
 8019d80:	3028      	adds	r0, #40	; 0x28
 8019d82:	f000 f867 	bl	8019e54 <rmw_create_guard_condition>
 8019d86:	6028      	str	r0, [r5, #0]
 8019d88:	6865      	ldr	r5, [r4, #4]
 8019d8a:	682e      	ldr	r6, [r5, #0]
 8019d8c:	b126      	cbz	r6, 8019d98 <rcl_guard_condition_init_from_rmw+0xa0>
 8019d8e:	2301      	movs	r3, #1
 8019d90:	712b      	strb	r3, [r5, #4]
 8019d92:	e7d9      	b.n	8019d48 <rcl_guard_condition_init_from_rmw+0x50>
 8019d94:	200a      	movs	r0, #10
 8019d96:	e7e4      	b.n	8019d62 <rcl_guard_condition_init_from_rmw+0x6a>
 8019d98:	4628      	mov	r0, r5
 8019d9a:	9b02      	ldr	r3, [sp, #8]
 8019d9c:	9905      	ldr	r1, [sp, #20]
 8019d9e:	4798      	blx	r3
 8019da0:	6066      	str	r6, [r4, #4]
 8019da2:	2001      	movs	r0, #1
 8019da4:	e7dd      	b.n	8019d62 <rcl_guard_condition_init_from_rmw+0x6a>
 8019da6:	bf00      	nop

08019da8 <rcl_guard_condition_fini>:
 8019da8:	b570      	push	{r4, r5, r6, lr}
 8019daa:	b082      	sub	sp, #8
 8019dac:	b1f0      	cbz	r0, 8019dec <rcl_guard_condition_fini+0x44>
 8019dae:	4604      	mov	r4, r0
 8019db0:	6840      	ldr	r0, [r0, #4]
 8019db2:	b158      	cbz	r0, 8019dcc <rcl_guard_condition_fini+0x24>
 8019db4:	6803      	ldr	r3, [r0, #0]
 8019db6:	68c6      	ldr	r6, [r0, #12]
 8019db8:	6981      	ldr	r1, [r0, #24]
 8019dba:	b15b      	cbz	r3, 8019dd4 <rcl_guard_condition_fini+0x2c>
 8019dbc:	7905      	ldrb	r5, [r0, #4]
 8019dbe:	b95d      	cbnz	r5, 8019dd8 <rcl_guard_condition_fini+0x30>
 8019dc0:	47b0      	blx	r6
 8019dc2:	2300      	movs	r3, #0
 8019dc4:	4628      	mov	r0, r5
 8019dc6:	6063      	str	r3, [r4, #4]
 8019dc8:	b002      	add	sp, #8
 8019dca:	bd70      	pop	{r4, r5, r6, pc}
 8019dcc:	4605      	mov	r5, r0
 8019dce:	4628      	mov	r0, r5
 8019dd0:	b002      	add	sp, #8
 8019dd2:	bd70      	pop	{r4, r5, r6, pc}
 8019dd4:	461d      	mov	r5, r3
 8019dd6:	e7f3      	b.n	8019dc0 <rcl_guard_condition_fini+0x18>
 8019dd8:	4618      	mov	r0, r3
 8019dda:	9101      	str	r1, [sp, #4]
 8019ddc:	f000 f84e 	bl	8019e7c <rmw_destroy_guard_condition>
 8019de0:	1e05      	subs	r5, r0, #0
 8019de2:	9901      	ldr	r1, [sp, #4]
 8019de4:	6860      	ldr	r0, [r4, #4]
 8019de6:	bf18      	it	ne
 8019de8:	2501      	movne	r5, #1
 8019dea:	e7e9      	b.n	8019dc0 <rcl_guard_condition_fini+0x18>
 8019dec:	250b      	movs	r5, #11
 8019dee:	4628      	mov	r0, r5
 8019df0:	b002      	add	sp, #8
 8019df2:	bd70      	pop	{r4, r5, r6, pc}

08019df4 <rcl_guard_condition_get_default_options>:
 8019df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019df6:	b087      	sub	sp, #28
 8019df8:	4607      	mov	r7, r0
 8019dfa:	466c      	mov	r4, sp
 8019dfc:	4668      	mov	r0, sp
 8019dfe:	f7f5 fe55 	bl	800faac <rcutils_get_default_allocator>
 8019e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019e04:	4d07      	ldr	r5, [pc, #28]	; (8019e24 <rcl_guard_condition_get_default_options+0x30>)
 8019e06:	f8d4 c000 	ldr.w	ip, [r4]
 8019e0a:	462e      	mov	r6, r5
 8019e0c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019e0e:	462c      	mov	r4, r5
 8019e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019e12:	463c      	mov	r4, r7
 8019e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019e16:	4638      	mov	r0, r7
 8019e18:	f8c6 c000 	str.w	ip, [r6]
 8019e1c:	f8c4 c000 	str.w	ip, [r4]
 8019e20:	b007      	add	sp, #28
 8019e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e24:	20010538 	.word	0x20010538

08019e28 <rcl_trigger_guard_condition>:
 8019e28:	b148      	cbz	r0, 8019e3e <rcl_trigger_guard_condition+0x16>
 8019e2a:	b508      	push	{r3, lr}
 8019e2c:	6843      	ldr	r3, [r0, #4]
 8019e2e:	b143      	cbz	r3, 8019e42 <rcl_trigger_guard_condition+0x1a>
 8019e30:	6818      	ldr	r0, [r3, #0]
 8019e32:	f000 f837 	bl	8019ea4 <rmw_trigger_guard_condition>
 8019e36:	3800      	subs	r0, #0
 8019e38:	bf18      	it	ne
 8019e3a:	2001      	movne	r0, #1
 8019e3c:	bd08      	pop	{r3, pc}
 8019e3e:	200b      	movs	r0, #11
 8019e40:	4770      	bx	lr
 8019e42:	200b      	movs	r0, #11
 8019e44:	bd08      	pop	{r3, pc}
 8019e46:	bf00      	nop

08019e48 <rcl_guard_condition_get_rmw_handle>:
 8019e48:	b110      	cbz	r0, 8019e50 <rcl_guard_condition_get_rmw_handle+0x8>
 8019e4a:	6840      	ldr	r0, [r0, #4]
 8019e4c:	b100      	cbz	r0, 8019e50 <rcl_guard_condition_get_rmw_handle+0x8>
 8019e4e:	6800      	ldr	r0, [r0, #0]
 8019e50:	4770      	bx	lr
 8019e52:	bf00      	nop

08019e54 <rmw_create_guard_condition>:
 8019e54:	b538      	push	{r3, r4, r5, lr}
 8019e56:	4605      	mov	r5, r0
 8019e58:	4807      	ldr	r0, [pc, #28]	; (8019e78 <rmw_create_guard_condition+0x24>)
 8019e5a:	f7fe fd3f 	bl	80188dc <get_memory>
 8019e5e:	4604      	mov	r4, r0
 8019e60:	b138      	cbz	r0, 8019e72 <rmw_create_guard_condition+0x1e>
 8019e62:	68c4      	ldr	r4, [r0, #12]
 8019e64:	2300      	movs	r3, #0
 8019e66:	61e5      	str	r5, [r4, #28]
 8019e68:	7423      	strb	r3, [r4, #16]
 8019e6a:	f7fe fd8d 	bl	8018988 <rmw_get_implementation_identifier>
 8019e6e:	f844 0f14 	str.w	r0, [r4, #20]!
 8019e72:	4620      	mov	r0, r4
 8019e74:	bd38      	pop	{r3, r4, r5, pc}
 8019e76:	bf00      	nop
 8019e78:	20014818 	.word	0x20014818

08019e7c <rmw_destroy_guard_condition>:
 8019e7c:	b508      	push	{r3, lr}
 8019e7e:	4b08      	ldr	r3, [pc, #32]	; (8019ea0 <rmw_destroy_guard_condition+0x24>)
 8019e80:	6819      	ldr	r1, [r3, #0]
 8019e82:	b911      	cbnz	r1, 8019e8a <rmw_destroy_guard_condition+0xe>
 8019e84:	e00a      	b.n	8019e9c <rmw_destroy_guard_condition+0x20>
 8019e86:	6889      	ldr	r1, [r1, #8]
 8019e88:	b141      	cbz	r1, 8019e9c <rmw_destroy_guard_condition+0x20>
 8019e8a:	68cb      	ldr	r3, [r1, #12]
 8019e8c:	3314      	adds	r3, #20
 8019e8e:	4298      	cmp	r0, r3
 8019e90:	d1f9      	bne.n	8019e86 <rmw_destroy_guard_condition+0xa>
 8019e92:	4803      	ldr	r0, [pc, #12]	; (8019ea0 <rmw_destroy_guard_condition+0x24>)
 8019e94:	f7fe fd32 	bl	80188fc <put_memory>
 8019e98:	2000      	movs	r0, #0
 8019e9a:	bd08      	pop	{r3, pc}
 8019e9c:	2001      	movs	r0, #1
 8019e9e:	bd08      	pop	{r3, pc}
 8019ea0:	20014818 	.word	0x20014818

08019ea4 <rmw_trigger_guard_condition>:
 8019ea4:	b160      	cbz	r0, 8019ec0 <rmw_trigger_guard_condition+0x1c>
 8019ea6:	b510      	push	{r4, lr}
 8019ea8:	4604      	mov	r4, r0
 8019eaa:	6800      	ldr	r0, [r0, #0]
 8019eac:	f7f7 fb0e 	bl	80114cc <is_uxrce_rmw_identifier_valid>
 8019eb0:	b908      	cbnz	r0, 8019eb6 <rmw_trigger_guard_condition+0x12>
 8019eb2:	2001      	movs	r0, #1
 8019eb4:	bd10      	pop	{r4, pc}
 8019eb6:	6863      	ldr	r3, [r4, #4]
 8019eb8:	2201      	movs	r2, #1
 8019eba:	701a      	strb	r2, [r3, #0]
 8019ebc:	2000      	movs	r0, #0
 8019ebe:	bd10      	pop	{r4, pc}
 8019ec0:	2001      	movs	r0, #1
 8019ec2:	4770      	bx	lr

08019ec4 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8019ec4:	b570      	push	{r4, r5, r6, lr}
 8019ec6:	4604      	mov	r4, r0
 8019ec8:	b1b8      	cbz	r0, 8019efa <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x36>
 8019eca:	460e      	mov	r6, r1
 8019ecc:	4630      	mov	r0, r6
 8019ece:	2104      	movs	r1, #4
 8019ed0:	f7f8 fe6a 	bl	8012ba8 <ucdr_alignment>
 8019ed4:	6864      	ldr	r4, [r4, #4]
 8019ed6:	1d75      	adds	r5, r6, #5
 8019ed8:	4425      	add	r5, r4
 8019eda:	4405      	add	r5, r0
 8019edc:	4628      	mov	r0, r5
 8019ede:	2104      	movs	r1, #4
 8019ee0:	f7f8 fe62 	bl	8012ba8 <ucdr_alignment>
 8019ee4:	3004      	adds	r0, #4
 8019ee6:	4405      	add	r5, r0
 8019ee8:	4628      	mov	r0, r5
 8019eea:	2104      	movs	r1, #4
 8019eec:	f7f8 fe5c 	bl	8012ba8 <ucdr_alignment>
 8019ef0:	f1c6 0604 	rsb	r6, r6, #4
 8019ef4:	4430      	add	r0, r6
 8019ef6:	4428      	add	r0, r5
 8019ef8:	bd70      	pop	{r4, r5, r6, pc}
 8019efa:	4b05      	ldr	r3, [pc, #20]	; (8019f10 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x4c>)
 8019efc:	4805      	ldr	r0, [pc, #20]	; (8019f14 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x50>)
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	221b      	movs	r2, #27
 8019f02:	68db      	ldr	r3, [r3, #12]
 8019f04:	2101      	movs	r1, #1
 8019f06:	f000 f90d 	bl	801a124 <fwrite>
 8019f0a:	4620      	mov	r0, r4
 8019f0c:	bd70      	pop	{r4, r5, r6, pc}
 8019f0e:	bf00      	nop
 8019f10:	200001b8 	.word	0x200001b8
 8019f14:	0801f928 	.word	0x0801f928

08019f18 <_MultiArrayDimension__cdr_serialize>:
 8019f18:	b570      	push	{r4, r5, r6, lr}
 8019f1a:	4604      	mov	r4, r0
 8019f1c:	b1c0      	cbz	r0, 8019f50 <_MultiArrayDimension__cdr_serialize+0x38>
 8019f1e:	6806      	ldr	r6, [r0, #0]
 8019f20:	460d      	mov	r5, r1
 8019f22:	b196      	cbz	r6, 8019f4a <_MultiArrayDimension__cdr_serialize+0x32>
 8019f24:	4630      	mov	r0, r6
 8019f26:	f7e6 f95d 	bl	80001e4 <strlen>
 8019f2a:	1c42      	adds	r2, r0, #1
 8019f2c:	6060      	str	r0, [r4, #4]
 8019f2e:	4631      	mov	r1, r6
 8019f30:	4628      	mov	r0, r5
 8019f32:	f7f8 fea9 	bl	8012c88 <ucdr_serialize_sequence_char>
 8019f36:	68e1      	ldr	r1, [r4, #12]
 8019f38:	4628      	mov	r0, r5
 8019f3a:	f7f8 faaf 	bl	801249c <ucdr_serialize_uint32_t>
 8019f3e:	6921      	ldr	r1, [r4, #16]
 8019f40:	4628      	mov	r0, r5
 8019f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f46:	f7f8 baa9 	b.w	801249c <ucdr_serialize_uint32_t>
 8019f4a:	4632      	mov	r2, r6
 8019f4c:	4630      	mov	r0, r6
 8019f4e:	e7ed      	b.n	8019f2c <_MultiArrayDimension__cdr_serialize+0x14>
 8019f50:	4b04      	ldr	r3, [pc, #16]	; (8019f64 <_MultiArrayDimension__cdr_serialize+0x4c>)
 8019f52:	4805      	ldr	r0, [pc, #20]	; (8019f68 <_MultiArrayDimension__cdr_serialize+0x50>)
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	221b      	movs	r2, #27
 8019f58:	68db      	ldr	r3, [r3, #12]
 8019f5a:	2101      	movs	r1, #1
 8019f5c:	f000 f8e2 	bl	801a124 <fwrite>
 8019f60:	4620      	mov	r0, r4
 8019f62:	bd70      	pop	{r4, r5, r6, pc}
 8019f64:	200001b8 	.word	0x200001b8
 8019f68:	0801f928 	.word	0x0801f928

08019f6c <_MultiArrayDimension__cdr_deserialize>:
 8019f6c:	b570      	push	{r4, r5, r6, lr}
 8019f6e:	460c      	mov	r4, r1
 8019f70:	b082      	sub	sp, #8
 8019f72:	b1d9      	cbz	r1, 8019fac <_MultiArrayDimension__cdr_deserialize+0x40>
 8019f74:	688e      	ldr	r6, [r1, #8]
 8019f76:	6809      	ldr	r1, [r1, #0]
 8019f78:	4632      	mov	r2, r6
 8019f7a:	ab01      	add	r3, sp, #4
 8019f7c:	4605      	mov	r5, r0
 8019f7e:	f7f8 fe95 	bl	8012cac <ucdr_deserialize_sequence_char>
 8019f82:	b120      	cbz	r0, 8019f8e <_MultiArrayDimension__cdr_deserialize+0x22>
 8019f84:	9b01      	ldr	r3, [sp, #4]
 8019f86:	b103      	cbz	r3, 8019f8a <_MultiArrayDimension__cdr_deserialize+0x1e>
 8019f88:	3b01      	subs	r3, #1
 8019f8a:	6063      	str	r3, [r4, #4]
 8019f8c:	e002      	b.n	8019f94 <_MultiArrayDimension__cdr_deserialize+0x28>
 8019f8e:	9901      	ldr	r1, [sp, #4]
 8019f90:	42b1      	cmp	r1, r6
 8019f92:	d816      	bhi.n	8019fc2 <_MultiArrayDimension__cdr_deserialize+0x56>
 8019f94:	f104 010c 	add.w	r1, r4, #12
 8019f98:	4628      	mov	r0, r5
 8019f9a:	f7f8 fadf 	bl	801255c <ucdr_deserialize_uint32_t>
 8019f9e:	f104 0110 	add.w	r1, r4, #16
 8019fa2:	4628      	mov	r0, r5
 8019fa4:	f7f8 fada 	bl	801255c <ucdr_deserialize_uint32_t>
 8019fa8:	b002      	add	sp, #8
 8019faa:	bd70      	pop	{r4, r5, r6, pc}
 8019fac:	4b08      	ldr	r3, [pc, #32]	; (8019fd0 <_MultiArrayDimension__cdr_deserialize+0x64>)
 8019fae:	4809      	ldr	r0, [pc, #36]	; (8019fd4 <_MultiArrayDimension__cdr_deserialize+0x68>)
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	221b      	movs	r2, #27
 8019fb4:	68db      	ldr	r3, [r3, #12]
 8019fb6:	2101      	movs	r1, #1
 8019fb8:	f000 f8b4 	bl	801a124 <fwrite>
 8019fbc:	4620      	mov	r0, r4
 8019fbe:	b002      	add	sp, #8
 8019fc0:	bd70      	pop	{r4, r5, r6, pc}
 8019fc2:	75a8      	strb	r0, [r5, #22]
 8019fc4:	6060      	str	r0, [r4, #4]
 8019fc6:	4628      	mov	r0, r5
 8019fc8:	f7f8 fe3e 	bl	8012c48 <ucdr_advance_buffer>
 8019fcc:	e7e2      	b.n	8019f94 <_MultiArrayDimension__cdr_deserialize+0x28>
 8019fce:	bf00      	nop
 8019fd0:	200001b8 	.word	0x200001b8
 8019fd4:	0801f928 	.word	0x0801f928

08019fd8 <_MultiArrayDimension__max_serialized_size>:
 8019fd8:	b510      	push	{r4, lr}
 8019fda:	2104      	movs	r1, #4
 8019fdc:	2000      	movs	r0, #0
 8019fde:	f7f8 fde3 	bl	8012ba8 <ucdr_alignment>
 8019fe2:	1d04      	adds	r4, r0, #4
 8019fe4:	4620      	mov	r0, r4
 8019fe6:	2104      	movs	r1, #4
 8019fe8:	f7f8 fdde 	bl	8012ba8 <ucdr_alignment>
 8019fec:	3004      	adds	r0, #4
 8019fee:	4420      	add	r0, r4
 8019ff0:	bd10      	pop	{r4, pc}
 8019ff2:	bf00      	nop

08019ff4 <_MultiArrayDimension__get_serialized_size>:
 8019ff4:	b510      	push	{r4, lr}
 8019ff6:	4604      	mov	r4, r0
 8019ff8:	b198      	cbz	r0, 801a022 <_MultiArrayDimension__get_serialized_size+0x2e>
 8019ffa:	2104      	movs	r1, #4
 8019ffc:	2000      	movs	r0, #0
 8019ffe:	f7f8 fdd3 	bl	8012ba8 <ucdr_alignment>
 801a002:	6863      	ldr	r3, [r4, #4]
 801a004:	3305      	adds	r3, #5
 801a006:	181c      	adds	r4, r3, r0
 801a008:	4620      	mov	r0, r4
 801a00a:	2104      	movs	r1, #4
 801a00c:	f7f8 fdcc 	bl	8012ba8 <ucdr_alignment>
 801a010:	3004      	adds	r0, #4
 801a012:	4404      	add	r4, r0
 801a014:	4620      	mov	r0, r4
 801a016:	2104      	movs	r1, #4
 801a018:	f7f8 fdc6 	bl	8012ba8 <ucdr_alignment>
 801a01c:	3004      	adds	r0, #4
 801a01e:	4420      	add	r0, r4
 801a020:	bd10      	pop	{r4, pc}
 801a022:	4b05      	ldr	r3, [pc, #20]	; (801a038 <_MultiArrayDimension__get_serialized_size+0x44>)
 801a024:	4805      	ldr	r0, [pc, #20]	; (801a03c <_MultiArrayDimension__get_serialized_size+0x48>)
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	221b      	movs	r2, #27
 801a02a:	68db      	ldr	r3, [r3, #12]
 801a02c:	2101      	movs	r1, #1
 801a02e:	f000 f879 	bl	801a124 <fwrite>
 801a032:	4620      	mov	r0, r4
 801a034:	bd10      	pop	{r4, pc}
 801a036:	bf00      	nop
 801a038:	200001b8 	.word	0x200001b8
 801a03c:	0801f928 	.word	0x0801f928

0801a040 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 801a040:	4800      	ldr	r0, [pc, #0]	; (801a044 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 801a042:	4770      	bx	lr
 801a044:	20000190 	.word	0x20000190

0801a048 <calloc>:
 801a048:	4b02      	ldr	r3, [pc, #8]	; (801a054 <calloc+0xc>)
 801a04a:	460a      	mov	r2, r1
 801a04c:	4601      	mov	r1, r0
 801a04e:	6818      	ldr	r0, [r3, #0]
 801a050:	f000 b924 	b.w	801a29c <_calloc_r>
 801a054:	200001b8 	.word	0x200001b8

0801a058 <__errno>:
 801a058:	4b01      	ldr	r3, [pc, #4]	; (801a060 <__errno+0x8>)
 801a05a:	6818      	ldr	r0, [r3, #0]
 801a05c:	4770      	bx	lr
 801a05e:	bf00      	nop
 801a060:	200001b8 	.word	0x200001b8

0801a064 <_fwrite_r>:
 801a064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a068:	9c08      	ldr	r4, [sp, #32]
 801a06a:	4689      	mov	r9, r1
 801a06c:	4617      	mov	r7, r2
 801a06e:	fb02 f803 	mul.w	r8, r2, r3
 801a072:	4605      	mov	r5, r0
 801a074:	b118      	cbz	r0, 801a07e <_fwrite_r+0x1a>
 801a076:	6983      	ldr	r3, [r0, #24]
 801a078:	b90b      	cbnz	r3, 801a07e <_fwrite_r+0x1a>
 801a07a:	f001 ff27 	bl	801becc <__sinit>
 801a07e:	4b26      	ldr	r3, [pc, #152]	; (801a118 <_fwrite_r+0xb4>)
 801a080:	429c      	cmp	r4, r3
 801a082:	d123      	bne.n	801a0cc <_fwrite_r+0x68>
 801a084:	686c      	ldr	r4, [r5, #4]
 801a086:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a088:	07de      	lsls	r6, r3, #31
 801a08a:	d405      	bmi.n	801a098 <_fwrite_r+0x34>
 801a08c:	89a3      	ldrh	r3, [r4, #12]
 801a08e:	0598      	lsls	r0, r3, #22
 801a090:	d402      	bmi.n	801a098 <_fwrite_r+0x34>
 801a092:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a094:	f000 f8bf 	bl	801a216 <__retarget_lock_acquire_recursive>
 801a098:	89a3      	ldrh	r3, [r4, #12]
 801a09a:	0719      	lsls	r1, r3, #28
 801a09c:	d520      	bpl.n	801a0e0 <_fwrite_r+0x7c>
 801a09e:	6923      	ldr	r3, [r4, #16]
 801a0a0:	b1f3      	cbz	r3, 801a0e0 <_fwrite_r+0x7c>
 801a0a2:	2600      	movs	r6, #0
 801a0a4:	4546      	cmp	r6, r8
 801a0a6:	d029      	beq.n	801a0fc <_fwrite_r+0x98>
 801a0a8:	68a0      	ldr	r0, [r4, #8]
 801a0aa:	f819 1006 	ldrb.w	r1, [r9, r6]
 801a0ae:	3801      	subs	r0, #1
 801a0b0:	2800      	cmp	r0, #0
 801a0b2:	60a0      	str	r0, [r4, #8]
 801a0b4:	da04      	bge.n	801a0c0 <_fwrite_r+0x5c>
 801a0b6:	69a3      	ldr	r3, [r4, #24]
 801a0b8:	4298      	cmp	r0, r3
 801a0ba:	db19      	blt.n	801a0f0 <_fwrite_r+0x8c>
 801a0bc:	290a      	cmp	r1, #10
 801a0be:	d017      	beq.n	801a0f0 <_fwrite_r+0x8c>
 801a0c0:	6823      	ldr	r3, [r4, #0]
 801a0c2:	1c5a      	adds	r2, r3, #1
 801a0c4:	6022      	str	r2, [r4, #0]
 801a0c6:	7019      	strb	r1, [r3, #0]
 801a0c8:	3601      	adds	r6, #1
 801a0ca:	e7eb      	b.n	801a0a4 <_fwrite_r+0x40>
 801a0cc:	4b13      	ldr	r3, [pc, #76]	; (801a11c <_fwrite_r+0xb8>)
 801a0ce:	429c      	cmp	r4, r3
 801a0d0:	d101      	bne.n	801a0d6 <_fwrite_r+0x72>
 801a0d2:	68ac      	ldr	r4, [r5, #8]
 801a0d4:	e7d7      	b.n	801a086 <_fwrite_r+0x22>
 801a0d6:	4b12      	ldr	r3, [pc, #72]	; (801a120 <_fwrite_r+0xbc>)
 801a0d8:	429c      	cmp	r4, r3
 801a0da:	bf08      	it	eq
 801a0dc:	68ec      	ldreq	r4, [r5, #12]
 801a0de:	e7d2      	b.n	801a086 <_fwrite_r+0x22>
 801a0e0:	4621      	mov	r1, r4
 801a0e2:	4628      	mov	r0, r5
 801a0e4:	f001 fd30 	bl	801bb48 <__swsetup_r>
 801a0e8:	2800      	cmp	r0, #0
 801a0ea:	d0da      	beq.n	801a0a2 <_fwrite_r+0x3e>
 801a0ec:	2600      	movs	r6, #0
 801a0ee:	e005      	b.n	801a0fc <_fwrite_r+0x98>
 801a0f0:	4622      	mov	r2, r4
 801a0f2:	4628      	mov	r0, r5
 801a0f4:	f001 fcc4 	bl	801ba80 <__swbuf_r>
 801a0f8:	3001      	adds	r0, #1
 801a0fa:	d1e5      	bne.n	801a0c8 <_fwrite_r+0x64>
 801a0fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a0fe:	07da      	lsls	r2, r3, #31
 801a100:	d405      	bmi.n	801a10e <_fwrite_r+0xaa>
 801a102:	89a3      	ldrh	r3, [r4, #12]
 801a104:	059b      	lsls	r3, r3, #22
 801a106:	d402      	bmi.n	801a10e <_fwrite_r+0xaa>
 801a108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a10a:	f000 f885 	bl	801a218 <__retarget_lock_release_recursive>
 801a10e:	fbb6 f0f7 	udiv	r0, r6, r7
 801a112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a116:	bf00      	nop
 801a118:	0802034c 	.word	0x0802034c
 801a11c:	0802036c 	.word	0x0802036c
 801a120:	0802032c 	.word	0x0802032c

0801a124 <fwrite>:
 801a124:	b507      	push	{r0, r1, r2, lr}
 801a126:	9300      	str	r3, [sp, #0]
 801a128:	4613      	mov	r3, r2
 801a12a:	460a      	mov	r2, r1
 801a12c:	4601      	mov	r1, r0
 801a12e:	4803      	ldr	r0, [pc, #12]	; (801a13c <fwrite+0x18>)
 801a130:	6800      	ldr	r0, [r0, #0]
 801a132:	f7ff ff97 	bl	801a064 <_fwrite_r>
 801a136:	b003      	add	sp, #12
 801a138:	f85d fb04 	ldr.w	pc, [sp], #4
 801a13c:	200001b8 	.word	0x200001b8

0801a140 <getenv>:
 801a140:	b507      	push	{r0, r1, r2, lr}
 801a142:	4b04      	ldr	r3, [pc, #16]	; (801a154 <getenv+0x14>)
 801a144:	4601      	mov	r1, r0
 801a146:	aa01      	add	r2, sp, #4
 801a148:	6818      	ldr	r0, [r3, #0]
 801a14a:	f000 f805 	bl	801a158 <_findenv_r>
 801a14e:	b003      	add	sp, #12
 801a150:	f85d fb04 	ldr.w	pc, [sp], #4
 801a154:	200001b8 	.word	0x200001b8

0801a158 <_findenv_r>:
 801a158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a15c:	4607      	mov	r7, r0
 801a15e:	4689      	mov	r9, r1
 801a160:	4616      	mov	r6, r2
 801a162:	f001 fd8d 	bl	801bc80 <__env_lock>
 801a166:	4b18      	ldr	r3, [pc, #96]	; (801a1c8 <_findenv_r+0x70>)
 801a168:	681c      	ldr	r4, [r3, #0]
 801a16a:	469a      	mov	sl, r3
 801a16c:	b134      	cbz	r4, 801a17c <_findenv_r+0x24>
 801a16e:	464b      	mov	r3, r9
 801a170:	4698      	mov	r8, r3
 801a172:	f813 1b01 	ldrb.w	r1, [r3], #1
 801a176:	b139      	cbz	r1, 801a188 <_findenv_r+0x30>
 801a178:	293d      	cmp	r1, #61	; 0x3d
 801a17a:	d1f9      	bne.n	801a170 <_findenv_r+0x18>
 801a17c:	4638      	mov	r0, r7
 801a17e:	f001 fd85 	bl	801bc8c <__env_unlock>
 801a182:	2000      	movs	r0, #0
 801a184:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a188:	eba8 0809 	sub.w	r8, r8, r9
 801a18c:	46a3      	mov	fp, r4
 801a18e:	f854 0b04 	ldr.w	r0, [r4], #4
 801a192:	2800      	cmp	r0, #0
 801a194:	d0f2      	beq.n	801a17c <_findenv_r+0x24>
 801a196:	4642      	mov	r2, r8
 801a198:	4649      	mov	r1, r9
 801a19a:	f000 fcc7 	bl	801ab2c <strncmp>
 801a19e:	2800      	cmp	r0, #0
 801a1a0:	d1f4      	bne.n	801a18c <_findenv_r+0x34>
 801a1a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801a1a6:	eb03 0508 	add.w	r5, r3, r8
 801a1aa:	f813 3008 	ldrb.w	r3, [r3, r8]
 801a1ae:	2b3d      	cmp	r3, #61	; 0x3d
 801a1b0:	d1ec      	bne.n	801a18c <_findenv_r+0x34>
 801a1b2:	f8da 3000 	ldr.w	r3, [sl]
 801a1b6:	ebab 0303 	sub.w	r3, fp, r3
 801a1ba:	109b      	asrs	r3, r3, #2
 801a1bc:	4638      	mov	r0, r7
 801a1be:	6033      	str	r3, [r6, #0]
 801a1c0:	f001 fd64 	bl	801bc8c <__env_unlock>
 801a1c4:	1c68      	adds	r0, r5, #1
 801a1c6:	e7dd      	b.n	801a184 <_findenv_r+0x2c>
 801a1c8:	20000000 	.word	0x20000000

0801a1cc <__libc_init_array>:
 801a1cc:	b570      	push	{r4, r5, r6, lr}
 801a1ce:	4d0d      	ldr	r5, [pc, #52]	; (801a204 <__libc_init_array+0x38>)
 801a1d0:	4c0d      	ldr	r4, [pc, #52]	; (801a208 <__libc_init_array+0x3c>)
 801a1d2:	1b64      	subs	r4, r4, r5
 801a1d4:	10a4      	asrs	r4, r4, #2
 801a1d6:	2600      	movs	r6, #0
 801a1d8:	42a6      	cmp	r6, r4
 801a1da:	d109      	bne.n	801a1f0 <__libc_init_array+0x24>
 801a1dc:	4d0b      	ldr	r5, [pc, #44]	; (801a20c <__libc_init_array+0x40>)
 801a1de:	4c0c      	ldr	r4, [pc, #48]	; (801a210 <__libc_init_array+0x44>)
 801a1e0:	f004 fab6 	bl	801e750 <_init>
 801a1e4:	1b64      	subs	r4, r4, r5
 801a1e6:	10a4      	asrs	r4, r4, #2
 801a1e8:	2600      	movs	r6, #0
 801a1ea:	42a6      	cmp	r6, r4
 801a1ec:	d105      	bne.n	801a1fa <__libc_init_array+0x2e>
 801a1ee:	bd70      	pop	{r4, r5, r6, pc}
 801a1f0:	f855 3b04 	ldr.w	r3, [r5], #4
 801a1f4:	4798      	blx	r3
 801a1f6:	3601      	adds	r6, #1
 801a1f8:	e7ee      	b.n	801a1d8 <__libc_init_array+0xc>
 801a1fa:	f855 3b04 	ldr.w	r3, [r5], #4
 801a1fe:	4798      	blx	r3
 801a200:	3601      	adds	r6, #1
 801a202:	e7f2      	b.n	801a1ea <__libc_init_array+0x1e>
 801a204:	080205e8 	.word	0x080205e8
 801a208:	080205e8 	.word	0x080205e8
 801a20c:	080205e8 	.word	0x080205e8
 801a210:	080205ec 	.word	0x080205ec

0801a214 <__retarget_lock_init_recursive>:
 801a214:	4770      	bx	lr

0801a216 <__retarget_lock_acquire_recursive>:
 801a216:	4770      	bx	lr

0801a218 <__retarget_lock_release_recursive>:
 801a218:	4770      	bx	lr
	...

0801a21c <malloc>:
 801a21c:	4b02      	ldr	r3, [pc, #8]	; (801a228 <malloc+0xc>)
 801a21e:	4601      	mov	r1, r0
 801a220:	6818      	ldr	r0, [r3, #0]
 801a222:	f000 b89b 	b.w	801a35c <_malloc_r>
 801a226:	bf00      	nop
 801a228:	200001b8 	.word	0x200001b8

0801a22c <free>:
 801a22c:	4b02      	ldr	r3, [pc, #8]	; (801a238 <free+0xc>)
 801a22e:	4601      	mov	r1, r0
 801a230:	6818      	ldr	r0, [r3, #0]
 801a232:	f000 b843 	b.w	801a2bc <_free_r>
 801a236:	bf00      	nop
 801a238:	200001b8 	.word	0x200001b8

0801a23c <memcpy>:
 801a23c:	440a      	add	r2, r1
 801a23e:	4291      	cmp	r1, r2
 801a240:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a244:	d100      	bne.n	801a248 <memcpy+0xc>
 801a246:	4770      	bx	lr
 801a248:	b510      	push	{r4, lr}
 801a24a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a24e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a252:	4291      	cmp	r1, r2
 801a254:	d1f9      	bne.n	801a24a <memcpy+0xe>
 801a256:	bd10      	pop	{r4, pc}

0801a258 <memmove>:
 801a258:	4288      	cmp	r0, r1
 801a25a:	b510      	push	{r4, lr}
 801a25c:	eb01 0402 	add.w	r4, r1, r2
 801a260:	d902      	bls.n	801a268 <memmove+0x10>
 801a262:	4284      	cmp	r4, r0
 801a264:	4623      	mov	r3, r4
 801a266:	d807      	bhi.n	801a278 <memmove+0x20>
 801a268:	1e43      	subs	r3, r0, #1
 801a26a:	42a1      	cmp	r1, r4
 801a26c:	d008      	beq.n	801a280 <memmove+0x28>
 801a26e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a272:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a276:	e7f8      	b.n	801a26a <memmove+0x12>
 801a278:	4402      	add	r2, r0
 801a27a:	4601      	mov	r1, r0
 801a27c:	428a      	cmp	r2, r1
 801a27e:	d100      	bne.n	801a282 <memmove+0x2a>
 801a280:	bd10      	pop	{r4, pc}
 801a282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a28a:	e7f7      	b.n	801a27c <memmove+0x24>

0801a28c <memset>:
 801a28c:	4402      	add	r2, r0
 801a28e:	4603      	mov	r3, r0
 801a290:	4293      	cmp	r3, r2
 801a292:	d100      	bne.n	801a296 <memset+0xa>
 801a294:	4770      	bx	lr
 801a296:	f803 1b01 	strb.w	r1, [r3], #1
 801a29a:	e7f9      	b.n	801a290 <memset+0x4>

0801a29c <_calloc_r>:
 801a29c:	b513      	push	{r0, r1, r4, lr}
 801a29e:	434a      	muls	r2, r1
 801a2a0:	4611      	mov	r1, r2
 801a2a2:	9201      	str	r2, [sp, #4]
 801a2a4:	f000 f85a 	bl	801a35c <_malloc_r>
 801a2a8:	4604      	mov	r4, r0
 801a2aa:	b118      	cbz	r0, 801a2b4 <_calloc_r+0x18>
 801a2ac:	9a01      	ldr	r2, [sp, #4]
 801a2ae:	2100      	movs	r1, #0
 801a2b0:	f7ff ffec 	bl	801a28c <memset>
 801a2b4:	4620      	mov	r0, r4
 801a2b6:	b002      	add	sp, #8
 801a2b8:	bd10      	pop	{r4, pc}
	...

0801a2bc <_free_r>:
 801a2bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a2be:	2900      	cmp	r1, #0
 801a2c0:	d048      	beq.n	801a354 <_free_r+0x98>
 801a2c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a2c6:	9001      	str	r0, [sp, #4]
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	f1a1 0404 	sub.w	r4, r1, #4
 801a2ce:	bfb8      	it	lt
 801a2d0:	18e4      	addlt	r4, r4, r3
 801a2d2:	f002 faa1 	bl	801c818 <__malloc_lock>
 801a2d6:	4a20      	ldr	r2, [pc, #128]	; (801a358 <_free_r+0x9c>)
 801a2d8:	9801      	ldr	r0, [sp, #4]
 801a2da:	6813      	ldr	r3, [r2, #0]
 801a2dc:	4615      	mov	r5, r2
 801a2de:	b933      	cbnz	r3, 801a2ee <_free_r+0x32>
 801a2e0:	6063      	str	r3, [r4, #4]
 801a2e2:	6014      	str	r4, [r2, #0]
 801a2e4:	b003      	add	sp, #12
 801a2e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a2ea:	f002 ba9b 	b.w	801c824 <__malloc_unlock>
 801a2ee:	42a3      	cmp	r3, r4
 801a2f0:	d90b      	bls.n	801a30a <_free_r+0x4e>
 801a2f2:	6821      	ldr	r1, [r4, #0]
 801a2f4:	1862      	adds	r2, r4, r1
 801a2f6:	4293      	cmp	r3, r2
 801a2f8:	bf04      	itt	eq
 801a2fa:	681a      	ldreq	r2, [r3, #0]
 801a2fc:	685b      	ldreq	r3, [r3, #4]
 801a2fe:	6063      	str	r3, [r4, #4]
 801a300:	bf04      	itt	eq
 801a302:	1852      	addeq	r2, r2, r1
 801a304:	6022      	streq	r2, [r4, #0]
 801a306:	602c      	str	r4, [r5, #0]
 801a308:	e7ec      	b.n	801a2e4 <_free_r+0x28>
 801a30a:	461a      	mov	r2, r3
 801a30c:	685b      	ldr	r3, [r3, #4]
 801a30e:	b10b      	cbz	r3, 801a314 <_free_r+0x58>
 801a310:	42a3      	cmp	r3, r4
 801a312:	d9fa      	bls.n	801a30a <_free_r+0x4e>
 801a314:	6811      	ldr	r1, [r2, #0]
 801a316:	1855      	adds	r5, r2, r1
 801a318:	42a5      	cmp	r5, r4
 801a31a:	d10b      	bne.n	801a334 <_free_r+0x78>
 801a31c:	6824      	ldr	r4, [r4, #0]
 801a31e:	4421      	add	r1, r4
 801a320:	1854      	adds	r4, r2, r1
 801a322:	42a3      	cmp	r3, r4
 801a324:	6011      	str	r1, [r2, #0]
 801a326:	d1dd      	bne.n	801a2e4 <_free_r+0x28>
 801a328:	681c      	ldr	r4, [r3, #0]
 801a32a:	685b      	ldr	r3, [r3, #4]
 801a32c:	6053      	str	r3, [r2, #4]
 801a32e:	4421      	add	r1, r4
 801a330:	6011      	str	r1, [r2, #0]
 801a332:	e7d7      	b.n	801a2e4 <_free_r+0x28>
 801a334:	d902      	bls.n	801a33c <_free_r+0x80>
 801a336:	230c      	movs	r3, #12
 801a338:	6003      	str	r3, [r0, #0]
 801a33a:	e7d3      	b.n	801a2e4 <_free_r+0x28>
 801a33c:	6825      	ldr	r5, [r4, #0]
 801a33e:	1961      	adds	r1, r4, r5
 801a340:	428b      	cmp	r3, r1
 801a342:	bf04      	itt	eq
 801a344:	6819      	ldreq	r1, [r3, #0]
 801a346:	685b      	ldreq	r3, [r3, #4]
 801a348:	6063      	str	r3, [r4, #4]
 801a34a:	bf04      	itt	eq
 801a34c:	1949      	addeq	r1, r1, r5
 801a34e:	6021      	streq	r1, [r4, #0]
 801a350:	6054      	str	r4, [r2, #4]
 801a352:	e7c7      	b.n	801a2e4 <_free_r+0x28>
 801a354:	b003      	add	sp, #12
 801a356:	bd30      	pop	{r4, r5, pc}
 801a358:	2001054c 	.word	0x2001054c

0801a35c <_malloc_r>:
 801a35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a35e:	1ccd      	adds	r5, r1, #3
 801a360:	f025 0503 	bic.w	r5, r5, #3
 801a364:	3508      	adds	r5, #8
 801a366:	2d0c      	cmp	r5, #12
 801a368:	bf38      	it	cc
 801a36a:	250c      	movcc	r5, #12
 801a36c:	2d00      	cmp	r5, #0
 801a36e:	4606      	mov	r6, r0
 801a370:	db01      	blt.n	801a376 <_malloc_r+0x1a>
 801a372:	42a9      	cmp	r1, r5
 801a374:	d903      	bls.n	801a37e <_malloc_r+0x22>
 801a376:	230c      	movs	r3, #12
 801a378:	6033      	str	r3, [r6, #0]
 801a37a:	2000      	movs	r0, #0
 801a37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a37e:	f002 fa4b 	bl	801c818 <__malloc_lock>
 801a382:	4921      	ldr	r1, [pc, #132]	; (801a408 <_malloc_r+0xac>)
 801a384:	680a      	ldr	r2, [r1, #0]
 801a386:	4614      	mov	r4, r2
 801a388:	b99c      	cbnz	r4, 801a3b2 <_malloc_r+0x56>
 801a38a:	4f20      	ldr	r7, [pc, #128]	; (801a40c <_malloc_r+0xb0>)
 801a38c:	683b      	ldr	r3, [r7, #0]
 801a38e:	b923      	cbnz	r3, 801a39a <_malloc_r+0x3e>
 801a390:	4621      	mov	r1, r4
 801a392:	4630      	mov	r0, r6
 801a394:	f000 fada 	bl	801a94c <_sbrk_r>
 801a398:	6038      	str	r0, [r7, #0]
 801a39a:	4629      	mov	r1, r5
 801a39c:	4630      	mov	r0, r6
 801a39e:	f000 fad5 	bl	801a94c <_sbrk_r>
 801a3a2:	1c43      	adds	r3, r0, #1
 801a3a4:	d123      	bne.n	801a3ee <_malloc_r+0x92>
 801a3a6:	230c      	movs	r3, #12
 801a3a8:	6033      	str	r3, [r6, #0]
 801a3aa:	4630      	mov	r0, r6
 801a3ac:	f002 fa3a 	bl	801c824 <__malloc_unlock>
 801a3b0:	e7e3      	b.n	801a37a <_malloc_r+0x1e>
 801a3b2:	6823      	ldr	r3, [r4, #0]
 801a3b4:	1b5b      	subs	r3, r3, r5
 801a3b6:	d417      	bmi.n	801a3e8 <_malloc_r+0x8c>
 801a3b8:	2b0b      	cmp	r3, #11
 801a3ba:	d903      	bls.n	801a3c4 <_malloc_r+0x68>
 801a3bc:	6023      	str	r3, [r4, #0]
 801a3be:	441c      	add	r4, r3
 801a3c0:	6025      	str	r5, [r4, #0]
 801a3c2:	e004      	b.n	801a3ce <_malloc_r+0x72>
 801a3c4:	6863      	ldr	r3, [r4, #4]
 801a3c6:	42a2      	cmp	r2, r4
 801a3c8:	bf0c      	ite	eq
 801a3ca:	600b      	streq	r3, [r1, #0]
 801a3cc:	6053      	strne	r3, [r2, #4]
 801a3ce:	4630      	mov	r0, r6
 801a3d0:	f002 fa28 	bl	801c824 <__malloc_unlock>
 801a3d4:	f104 000b 	add.w	r0, r4, #11
 801a3d8:	1d23      	adds	r3, r4, #4
 801a3da:	f020 0007 	bic.w	r0, r0, #7
 801a3de:	1ac2      	subs	r2, r0, r3
 801a3e0:	d0cc      	beq.n	801a37c <_malloc_r+0x20>
 801a3e2:	1a1b      	subs	r3, r3, r0
 801a3e4:	50a3      	str	r3, [r4, r2]
 801a3e6:	e7c9      	b.n	801a37c <_malloc_r+0x20>
 801a3e8:	4622      	mov	r2, r4
 801a3ea:	6864      	ldr	r4, [r4, #4]
 801a3ec:	e7cc      	b.n	801a388 <_malloc_r+0x2c>
 801a3ee:	1cc4      	adds	r4, r0, #3
 801a3f0:	f024 0403 	bic.w	r4, r4, #3
 801a3f4:	42a0      	cmp	r0, r4
 801a3f6:	d0e3      	beq.n	801a3c0 <_malloc_r+0x64>
 801a3f8:	1a21      	subs	r1, r4, r0
 801a3fa:	4630      	mov	r0, r6
 801a3fc:	f000 faa6 	bl	801a94c <_sbrk_r>
 801a400:	3001      	adds	r0, #1
 801a402:	d1dd      	bne.n	801a3c0 <_malloc_r+0x64>
 801a404:	e7cf      	b.n	801a3a6 <_malloc_r+0x4a>
 801a406:	bf00      	nop
 801a408:	2001054c 	.word	0x2001054c
 801a40c:	20010550 	.word	0x20010550

0801a410 <_scanf_float>:
 801a410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a414:	b087      	sub	sp, #28
 801a416:	4617      	mov	r7, r2
 801a418:	9303      	str	r3, [sp, #12]
 801a41a:	688b      	ldr	r3, [r1, #8]
 801a41c:	1e5a      	subs	r2, r3, #1
 801a41e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a422:	bf83      	ittte	hi
 801a424:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a428:	195b      	addhi	r3, r3, r5
 801a42a:	9302      	strhi	r3, [sp, #8]
 801a42c:	2300      	movls	r3, #0
 801a42e:	bf86      	itte	hi
 801a430:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a434:	608b      	strhi	r3, [r1, #8]
 801a436:	9302      	strls	r3, [sp, #8]
 801a438:	680b      	ldr	r3, [r1, #0]
 801a43a:	468b      	mov	fp, r1
 801a43c:	2500      	movs	r5, #0
 801a43e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a442:	f84b 3b1c 	str.w	r3, [fp], #28
 801a446:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a44a:	4680      	mov	r8, r0
 801a44c:	460c      	mov	r4, r1
 801a44e:	465e      	mov	r6, fp
 801a450:	46aa      	mov	sl, r5
 801a452:	46a9      	mov	r9, r5
 801a454:	9501      	str	r5, [sp, #4]
 801a456:	68a2      	ldr	r2, [r4, #8]
 801a458:	b152      	cbz	r2, 801a470 <_scanf_float+0x60>
 801a45a:	683b      	ldr	r3, [r7, #0]
 801a45c:	781b      	ldrb	r3, [r3, #0]
 801a45e:	2b4e      	cmp	r3, #78	; 0x4e
 801a460:	d864      	bhi.n	801a52c <_scanf_float+0x11c>
 801a462:	2b40      	cmp	r3, #64	; 0x40
 801a464:	d83c      	bhi.n	801a4e0 <_scanf_float+0xd0>
 801a466:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a46a:	b2c8      	uxtb	r0, r1
 801a46c:	280e      	cmp	r0, #14
 801a46e:	d93a      	bls.n	801a4e6 <_scanf_float+0xd6>
 801a470:	f1b9 0f00 	cmp.w	r9, #0
 801a474:	d003      	beq.n	801a47e <_scanf_float+0x6e>
 801a476:	6823      	ldr	r3, [r4, #0]
 801a478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a47c:	6023      	str	r3, [r4, #0]
 801a47e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801a482:	f1ba 0f01 	cmp.w	sl, #1
 801a486:	f200 8113 	bhi.w	801a6b0 <_scanf_float+0x2a0>
 801a48a:	455e      	cmp	r6, fp
 801a48c:	f200 8105 	bhi.w	801a69a <_scanf_float+0x28a>
 801a490:	2501      	movs	r5, #1
 801a492:	4628      	mov	r0, r5
 801a494:	b007      	add	sp, #28
 801a496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a49a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a49e:	2a0d      	cmp	r2, #13
 801a4a0:	d8e6      	bhi.n	801a470 <_scanf_float+0x60>
 801a4a2:	a101      	add	r1, pc, #4	; (adr r1, 801a4a8 <_scanf_float+0x98>)
 801a4a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a4a8:	0801a5e7 	.word	0x0801a5e7
 801a4ac:	0801a471 	.word	0x0801a471
 801a4b0:	0801a471 	.word	0x0801a471
 801a4b4:	0801a471 	.word	0x0801a471
 801a4b8:	0801a647 	.word	0x0801a647
 801a4bc:	0801a61f 	.word	0x0801a61f
 801a4c0:	0801a471 	.word	0x0801a471
 801a4c4:	0801a471 	.word	0x0801a471
 801a4c8:	0801a5f5 	.word	0x0801a5f5
 801a4cc:	0801a471 	.word	0x0801a471
 801a4d0:	0801a471 	.word	0x0801a471
 801a4d4:	0801a471 	.word	0x0801a471
 801a4d8:	0801a471 	.word	0x0801a471
 801a4dc:	0801a5ad 	.word	0x0801a5ad
 801a4e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a4e4:	e7db      	b.n	801a49e <_scanf_float+0x8e>
 801a4e6:	290e      	cmp	r1, #14
 801a4e8:	d8c2      	bhi.n	801a470 <_scanf_float+0x60>
 801a4ea:	a001      	add	r0, pc, #4	; (adr r0, 801a4f0 <_scanf_float+0xe0>)
 801a4ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a4f0:	0801a59f 	.word	0x0801a59f
 801a4f4:	0801a471 	.word	0x0801a471
 801a4f8:	0801a59f 	.word	0x0801a59f
 801a4fc:	0801a633 	.word	0x0801a633
 801a500:	0801a471 	.word	0x0801a471
 801a504:	0801a54d 	.word	0x0801a54d
 801a508:	0801a589 	.word	0x0801a589
 801a50c:	0801a589 	.word	0x0801a589
 801a510:	0801a589 	.word	0x0801a589
 801a514:	0801a589 	.word	0x0801a589
 801a518:	0801a589 	.word	0x0801a589
 801a51c:	0801a589 	.word	0x0801a589
 801a520:	0801a589 	.word	0x0801a589
 801a524:	0801a589 	.word	0x0801a589
 801a528:	0801a589 	.word	0x0801a589
 801a52c:	2b6e      	cmp	r3, #110	; 0x6e
 801a52e:	d809      	bhi.n	801a544 <_scanf_float+0x134>
 801a530:	2b60      	cmp	r3, #96	; 0x60
 801a532:	d8b2      	bhi.n	801a49a <_scanf_float+0x8a>
 801a534:	2b54      	cmp	r3, #84	; 0x54
 801a536:	d077      	beq.n	801a628 <_scanf_float+0x218>
 801a538:	2b59      	cmp	r3, #89	; 0x59
 801a53a:	d199      	bne.n	801a470 <_scanf_float+0x60>
 801a53c:	2d07      	cmp	r5, #7
 801a53e:	d197      	bne.n	801a470 <_scanf_float+0x60>
 801a540:	2508      	movs	r5, #8
 801a542:	e029      	b.n	801a598 <_scanf_float+0x188>
 801a544:	2b74      	cmp	r3, #116	; 0x74
 801a546:	d06f      	beq.n	801a628 <_scanf_float+0x218>
 801a548:	2b79      	cmp	r3, #121	; 0x79
 801a54a:	e7f6      	b.n	801a53a <_scanf_float+0x12a>
 801a54c:	6821      	ldr	r1, [r4, #0]
 801a54e:	05c8      	lsls	r0, r1, #23
 801a550:	d51a      	bpl.n	801a588 <_scanf_float+0x178>
 801a552:	9b02      	ldr	r3, [sp, #8]
 801a554:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a558:	6021      	str	r1, [r4, #0]
 801a55a:	f109 0901 	add.w	r9, r9, #1
 801a55e:	b11b      	cbz	r3, 801a568 <_scanf_float+0x158>
 801a560:	3b01      	subs	r3, #1
 801a562:	3201      	adds	r2, #1
 801a564:	9302      	str	r3, [sp, #8]
 801a566:	60a2      	str	r2, [r4, #8]
 801a568:	68a3      	ldr	r3, [r4, #8]
 801a56a:	3b01      	subs	r3, #1
 801a56c:	60a3      	str	r3, [r4, #8]
 801a56e:	6923      	ldr	r3, [r4, #16]
 801a570:	3301      	adds	r3, #1
 801a572:	6123      	str	r3, [r4, #16]
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	3b01      	subs	r3, #1
 801a578:	2b00      	cmp	r3, #0
 801a57a:	607b      	str	r3, [r7, #4]
 801a57c:	f340 8084 	ble.w	801a688 <_scanf_float+0x278>
 801a580:	683b      	ldr	r3, [r7, #0]
 801a582:	3301      	adds	r3, #1
 801a584:	603b      	str	r3, [r7, #0]
 801a586:	e766      	b.n	801a456 <_scanf_float+0x46>
 801a588:	eb1a 0f05 	cmn.w	sl, r5
 801a58c:	f47f af70 	bne.w	801a470 <_scanf_float+0x60>
 801a590:	6822      	ldr	r2, [r4, #0]
 801a592:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a596:	6022      	str	r2, [r4, #0]
 801a598:	f806 3b01 	strb.w	r3, [r6], #1
 801a59c:	e7e4      	b.n	801a568 <_scanf_float+0x158>
 801a59e:	6822      	ldr	r2, [r4, #0]
 801a5a0:	0610      	lsls	r0, r2, #24
 801a5a2:	f57f af65 	bpl.w	801a470 <_scanf_float+0x60>
 801a5a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a5aa:	e7f4      	b.n	801a596 <_scanf_float+0x186>
 801a5ac:	f1ba 0f00 	cmp.w	sl, #0
 801a5b0:	d10e      	bne.n	801a5d0 <_scanf_float+0x1c0>
 801a5b2:	f1b9 0f00 	cmp.w	r9, #0
 801a5b6:	d10e      	bne.n	801a5d6 <_scanf_float+0x1c6>
 801a5b8:	6822      	ldr	r2, [r4, #0]
 801a5ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a5be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a5c2:	d108      	bne.n	801a5d6 <_scanf_float+0x1c6>
 801a5c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a5c8:	6022      	str	r2, [r4, #0]
 801a5ca:	f04f 0a01 	mov.w	sl, #1
 801a5ce:	e7e3      	b.n	801a598 <_scanf_float+0x188>
 801a5d0:	f1ba 0f02 	cmp.w	sl, #2
 801a5d4:	d055      	beq.n	801a682 <_scanf_float+0x272>
 801a5d6:	2d01      	cmp	r5, #1
 801a5d8:	d002      	beq.n	801a5e0 <_scanf_float+0x1d0>
 801a5da:	2d04      	cmp	r5, #4
 801a5dc:	f47f af48 	bne.w	801a470 <_scanf_float+0x60>
 801a5e0:	3501      	adds	r5, #1
 801a5e2:	b2ed      	uxtb	r5, r5
 801a5e4:	e7d8      	b.n	801a598 <_scanf_float+0x188>
 801a5e6:	f1ba 0f01 	cmp.w	sl, #1
 801a5ea:	f47f af41 	bne.w	801a470 <_scanf_float+0x60>
 801a5ee:	f04f 0a02 	mov.w	sl, #2
 801a5f2:	e7d1      	b.n	801a598 <_scanf_float+0x188>
 801a5f4:	b97d      	cbnz	r5, 801a616 <_scanf_float+0x206>
 801a5f6:	f1b9 0f00 	cmp.w	r9, #0
 801a5fa:	f47f af3c 	bne.w	801a476 <_scanf_float+0x66>
 801a5fe:	6822      	ldr	r2, [r4, #0]
 801a600:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a604:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a608:	f47f af39 	bne.w	801a47e <_scanf_float+0x6e>
 801a60c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a610:	6022      	str	r2, [r4, #0]
 801a612:	2501      	movs	r5, #1
 801a614:	e7c0      	b.n	801a598 <_scanf_float+0x188>
 801a616:	2d03      	cmp	r5, #3
 801a618:	d0e2      	beq.n	801a5e0 <_scanf_float+0x1d0>
 801a61a:	2d05      	cmp	r5, #5
 801a61c:	e7de      	b.n	801a5dc <_scanf_float+0x1cc>
 801a61e:	2d02      	cmp	r5, #2
 801a620:	f47f af26 	bne.w	801a470 <_scanf_float+0x60>
 801a624:	2503      	movs	r5, #3
 801a626:	e7b7      	b.n	801a598 <_scanf_float+0x188>
 801a628:	2d06      	cmp	r5, #6
 801a62a:	f47f af21 	bne.w	801a470 <_scanf_float+0x60>
 801a62e:	2507      	movs	r5, #7
 801a630:	e7b2      	b.n	801a598 <_scanf_float+0x188>
 801a632:	6822      	ldr	r2, [r4, #0]
 801a634:	0591      	lsls	r1, r2, #22
 801a636:	f57f af1b 	bpl.w	801a470 <_scanf_float+0x60>
 801a63a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a63e:	6022      	str	r2, [r4, #0]
 801a640:	f8cd 9004 	str.w	r9, [sp, #4]
 801a644:	e7a8      	b.n	801a598 <_scanf_float+0x188>
 801a646:	6822      	ldr	r2, [r4, #0]
 801a648:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a64c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a650:	d006      	beq.n	801a660 <_scanf_float+0x250>
 801a652:	0550      	lsls	r0, r2, #21
 801a654:	f57f af0c 	bpl.w	801a470 <_scanf_float+0x60>
 801a658:	f1b9 0f00 	cmp.w	r9, #0
 801a65c:	f43f af0f 	beq.w	801a47e <_scanf_float+0x6e>
 801a660:	0591      	lsls	r1, r2, #22
 801a662:	bf58      	it	pl
 801a664:	9901      	ldrpl	r1, [sp, #4]
 801a666:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a66a:	bf58      	it	pl
 801a66c:	eba9 0101 	subpl.w	r1, r9, r1
 801a670:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a674:	bf58      	it	pl
 801a676:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a67a:	6022      	str	r2, [r4, #0]
 801a67c:	f04f 0900 	mov.w	r9, #0
 801a680:	e78a      	b.n	801a598 <_scanf_float+0x188>
 801a682:	f04f 0a03 	mov.w	sl, #3
 801a686:	e787      	b.n	801a598 <_scanf_float+0x188>
 801a688:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a68c:	4639      	mov	r1, r7
 801a68e:	4640      	mov	r0, r8
 801a690:	4798      	blx	r3
 801a692:	2800      	cmp	r0, #0
 801a694:	f43f aedf 	beq.w	801a456 <_scanf_float+0x46>
 801a698:	e6ea      	b.n	801a470 <_scanf_float+0x60>
 801a69a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a69e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a6a2:	463a      	mov	r2, r7
 801a6a4:	4640      	mov	r0, r8
 801a6a6:	4798      	blx	r3
 801a6a8:	6923      	ldr	r3, [r4, #16]
 801a6aa:	3b01      	subs	r3, #1
 801a6ac:	6123      	str	r3, [r4, #16]
 801a6ae:	e6ec      	b.n	801a48a <_scanf_float+0x7a>
 801a6b0:	1e6b      	subs	r3, r5, #1
 801a6b2:	2b06      	cmp	r3, #6
 801a6b4:	d825      	bhi.n	801a702 <_scanf_float+0x2f2>
 801a6b6:	2d02      	cmp	r5, #2
 801a6b8:	d836      	bhi.n	801a728 <_scanf_float+0x318>
 801a6ba:	455e      	cmp	r6, fp
 801a6bc:	f67f aee8 	bls.w	801a490 <_scanf_float+0x80>
 801a6c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a6c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a6c8:	463a      	mov	r2, r7
 801a6ca:	4640      	mov	r0, r8
 801a6cc:	4798      	blx	r3
 801a6ce:	6923      	ldr	r3, [r4, #16]
 801a6d0:	3b01      	subs	r3, #1
 801a6d2:	6123      	str	r3, [r4, #16]
 801a6d4:	e7f1      	b.n	801a6ba <_scanf_float+0x2aa>
 801a6d6:	9802      	ldr	r0, [sp, #8]
 801a6d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a6dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a6e0:	9002      	str	r0, [sp, #8]
 801a6e2:	463a      	mov	r2, r7
 801a6e4:	4640      	mov	r0, r8
 801a6e6:	4798      	blx	r3
 801a6e8:	6923      	ldr	r3, [r4, #16]
 801a6ea:	3b01      	subs	r3, #1
 801a6ec:	6123      	str	r3, [r4, #16]
 801a6ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801a6f2:	fa5f fa8a 	uxtb.w	sl, sl
 801a6f6:	f1ba 0f02 	cmp.w	sl, #2
 801a6fa:	d1ec      	bne.n	801a6d6 <_scanf_float+0x2c6>
 801a6fc:	3d03      	subs	r5, #3
 801a6fe:	b2ed      	uxtb	r5, r5
 801a700:	1b76      	subs	r6, r6, r5
 801a702:	6823      	ldr	r3, [r4, #0]
 801a704:	05da      	lsls	r2, r3, #23
 801a706:	d52f      	bpl.n	801a768 <_scanf_float+0x358>
 801a708:	055b      	lsls	r3, r3, #21
 801a70a:	d510      	bpl.n	801a72e <_scanf_float+0x31e>
 801a70c:	455e      	cmp	r6, fp
 801a70e:	f67f aebf 	bls.w	801a490 <_scanf_float+0x80>
 801a712:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a716:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a71a:	463a      	mov	r2, r7
 801a71c:	4640      	mov	r0, r8
 801a71e:	4798      	blx	r3
 801a720:	6923      	ldr	r3, [r4, #16]
 801a722:	3b01      	subs	r3, #1
 801a724:	6123      	str	r3, [r4, #16]
 801a726:	e7f1      	b.n	801a70c <_scanf_float+0x2fc>
 801a728:	46aa      	mov	sl, r5
 801a72a:	9602      	str	r6, [sp, #8]
 801a72c:	e7df      	b.n	801a6ee <_scanf_float+0x2de>
 801a72e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a732:	6923      	ldr	r3, [r4, #16]
 801a734:	2965      	cmp	r1, #101	; 0x65
 801a736:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801a73a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801a73e:	6123      	str	r3, [r4, #16]
 801a740:	d00c      	beq.n	801a75c <_scanf_float+0x34c>
 801a742:	2945      	cmp	r1, #69	; 0x45
 801a744:	d00a      	beq.n	801a75c <_scanf_float+0x34c>
 801a746:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a74a:	463a      	mov	r2, r7
 801a74c:	4640      	mov	r0, r8
 801a74e:	4798      	blx	r3
 801a750:	6923      	ldr	r3, [r4, #16]
 801a752:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a756:	3b01      	subs	r3, #1
 801a758:	1eb5      	subs	r5, r6, #2
 801a75a:	6123      	str	r3, [r4, #16]
 801a75c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a760:	463a      	mov	r2, r7
 801a762:	4640      	mov	r0, r8
 801a764:	4798      	blx	r3
 801a766:	462e      	mov	r6, r5
 801a768:	6825      	ldr	r5, [r4, #0]
 801a76a:	f015 0510 	ands.w	r5, r5, #16
 801a76e:	d158      	bne.n	801a822 <_scanf_float+0x412>
 801a770:	7035      	strb	r5, [r6, #0]
 801a772:	6823      	ldr	r3, [r4, #0]
 801a774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a77c:	d11c      	bne.n	801a7b8 <_scanf_float+0x3a8>
 801a77e:	9b01      	ldr	r3, [sp, #4]
 801a780:	454b      	cmp	r3, r9
 801a782:	eba3 0209 	sub.w	r2, r3, r9
 801a786:	d124      	bne.n	801a7d2 <_scanf_float+0x3c2>
 801a788:	2200      	movs	r2, #0
 801a78a:	4659      	mov	r1, fp
 801a78c:	4640      	mov	r0, r8
 801a78e:	f001 f829 	bl	801b7e4 <_strtod_r>
 801a792:	9b03      	ldr	r3, [sp, #12]
 801a794:	6821      	ldr	r1, [r4, #0]
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	f011 0f02 	tst.w	r1, #2
 801a79c:	ec57 6b10 	vmov	r6, r7, d0
 801a7a0:	f103 0204 	add.w	r2, r3, #4
 801a7a4:	d020      	beq.n	801a7e8 <_scanf_float+0x3d8>
 801a7a6:	9903      	ldr	r1, [sp, #12]
 801a7a8:	600a      	str	r2, [r1, #0]
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	e9c3 6700 	strd	r6, r7, [r3]
 801a7b0:	68e3      	ldr	r3, [r4, #12]
 801a7b2:	3301      	adds	r3, #1
 801a7b4:	60e3      	str	r3, [r4, #12]
 801a7b6:	e66c      	b.n	801a492 <_scanf_float+0x82>
 801a7b8:	9b04      	ldr	r3, [sp, #16]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d0e4      	beq.n	801a788 <_scanf_float+0x378>
 801a7be:	9905      	ldr	r1, [sp, #20]
 801a7c0:	230a      	movs	r3, #10
 801a7c2:	462a      	mov	r2, r5
 801a7c4:	3101      	adds	r1, #1
 801a7c6:	4640      	mov	r0, r8
 801a7c8:	f001 f896 	bl	801b8f8 <_strtol_r>
 801a7cc:	9b04      	ldr	r3, [sp, #16]
 801a7ce:	9e05      	ldr	r6, [sp, #20]
 801a7d0:	1ac2      	subs	r2, r0, r3
 801a7d2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a7d6:	429e      	cmp	r6, r3
 801a7d8:	bf28      	it	cs
 801a7da:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a7de:	4912      	ldr	r1, [pc, #72]	; (801a828 <_scanf_float+0x418>)
 801a7e0:	4630      	mov	r0, r6
 801a7e2:	f000 f8fd 	bl	801a9e0 <siprintf>
 801a7e6:	e7cf      	b.n	801a788 <_scanf_float+0x378>
 801a7e8:	f011 0f04 	tst.w	r1, #4
 801a7ec:	9903      	ldr	r1, [sp, #12]
 801a7ee:	600a      	str	r2, [r1, #0]
 801a7f0:	d1db      	bne.n	801a7aa <_scanf_float+0x39a>
 801a7f2:	f8d3 8000 	ldr.w	r8, [r3]
 801a7f6:	ee10 2a10 	vmov	r2, s0
 801a7fa:	ee10 0a10 	vmov	r0, s0
 801a7fe:	463b      	mov	r3, r7
 801a800:	4639      	mov	r1, r7
 801a802:	f7e6 f9a3 	bl	8000b4c <__aeabi_dcmpun>
 801a806:	b128      	cbz	r0, 801a814 <_scanf_float+0x404>
 801a808:	4808      	ldr	r0, [pc, #32]	; (801a82c <_scanf_float+0x41c>)
 801a80a:	f000 f8af 	bl	801a96c <nanf>
 801a80e:	ed88 0a00 	vstr	s0, [r8]
 801a812:	e7cd      	b.n	801a7b0 <_scanf_float+0x3a0>
 801a814:	4630      	mov	r0, r6
 801a816:	4639      	mov	r1, r7
 801a818:	f7e6 f9f6 	bl	8000c08 <__aeabi_d2f>
 801a81c:	f8c8 0000 	str.w	r0, [r8]
 801a820:	e7c6      	b.n	801a7b0 <_scanf_float+0x3a0>
 801a822:	2500      	movs	r5, #0
 801a824:	e635      	b.n	801a492 <_scanf_float+0x82>
 801a826:	bf00      	nop
 801a828:	08020218 	.word	0x08020218
 801a82c:	0802032b 	.word	0x0802032b

0801a830 <iprintf>:
 801a830:	b40f      	push	{r0, r1, r2, r3}
 801a832:	4b0a      	ldr	r3, [pc, #40]	; (801a85c <iprintf+0x2c>)
 801a834:	b513      	push	{r0, r1, r4, lr}
 801a836:	681c      	ldr	r4, [r3, #0]
 801a838:	b124      	cbz	r4, 801a844 <iprintf+0x14>
 801a83a:	69a3      	ldr	r3, [r4, #24]
 801a83c:	b913      	cbnz	r3, 801a844 <iprintf+0x14>
 801a83e:	4620      	mov	r0, r4
 801a840:	f001 fb44 	bl	801becc <__sinit>
 801a844:	ab05      	add	r3, sp, #20
 801a846:	9a04      	ldr	r2, [sp, #16]
 801a848:	68a1      	ldr	r1, [r4, #8]
 801a84a:	9301      	str	r3, [sp, #4]
 801a84c:	4620      	mov	r0, r4
 801a84e:	f003 f827 	bl	801d8a0 <_vfiprintf_r>
 801a852:	b002      	add	sp, #8
 801a854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a858:	b004      	add	sp, #16
 801a85a:	4770      	bx	lr
 801a85c:	200001b8 	.word	0x200001b8

0801a860 <srand>:
 801a860:	b538      	push	{r3, r4, r5, lr}
 801a862:	4b10      	ldr	r3, [pc, #64]	; (801a8a4 <srand+0x44>)
 801a864:	681d      	ldr	r5, [r3, #0]
 801a866:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801a868:	4604      	mov	r4, r0
 801a86a:	b9b3      	cbnz	r3, 801a89a <srand+0x3a>
 801a86c:	2018      	movs	r0, #24
 801a86e:	f7ff fcd5 	bl	801a21c <malloc>
 801a872:	4602      	mov	r2, r0
 801a874:	63a8      	str	r0, [r5, #56]	; 0x38
 801a876:	b920      	cbnz	r0, 801a882 <srand+0x22>
 801a878:	4b0b      	ldr	r3, [pc, #44]	; (801a8a8 <srand+0x48>)
 801a87a:	480c      	ldr	r0, [pc, #48]	; (801a8ac <srand+0x4c>)
 801a87c:	2142      	movs	r1, #66	; 0x42
 801a87e:	f001 f9d1 	bl	801bc24 <__assert_func>
 801a882:	490b      	ldr	r1, [pc, #44]	; (801a8b0 <srand+0x50>)
 801a884:	4b0b      	ldr	r3, [pc, #44]	; (801a8b4 <srand+0x54>)
 801a886:	e9c0 1300 	strd	r1, r3, [r0]
 801a88a:	4b0b      	ldr	r3, [pc, #44]	; (801a8b8 <srand+0x58>)
 801a88c:	6083      	str	r3, [r0, #8]
 801a88e:	230b      	movs	r3, #11
 801a890:	8183      	strh	r3, [r0, #12]
 801a892:	2100      	movs	r1, #0
 801a894:	2001      	movs	r0, #1
 801a896:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a89a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801a89c:	2200      	movs	r2, #0
 801a89e:	611c      	str	r4, [r3, #16]
 801a8a0:	615a      	str	r2, [r3, #20]
 801a8a2:	bd38      	pop	{r3, r4, r5, pc}
 801a8a4:	200001b8 	.word	0x200001b8
 801a8a8:	0802021d 	.word	0x0802021d
 801a8ac:	08020234 	.word	0x08020234
 801a8b0:	abcd330e 	.word	0xabcd330e
 801a8b4:	e66d1234 	.word	0xe66d1234
 801a8b8:	0005deec 	.word	0x0005deec

0801a8bc <rand>:
 801a8bc:	4b17      	ldr	r3, [pc, #92]	; (801a91c <rand+0x60>)
 801a8be:	b510      	push	{r4, lr}
 801a8c0:	681c      	ldr	r4, [r3, #0]
 801a8c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a8c4:	b9b3      	cbnz	r3, 801a8f4 <rand+0x38>
 801a8c6:	2018      	movs	r0, #24
 801a8c8:	f7ff fca8 	bl	801a21c <malloc>
 801a8cc:	63a0      	str	r0, [r4, #56]	; 0x38
 801a8ce:	b928      	cbnz	r0, 801a8dc <rand+0x20>
 801a8d0:	4602      	mov	r2, r0
 801a8d2:	4b13      	ldr	r3, [pc, #76]	; (801a920 <rand+0x64>)
 801a8d4:	4813      	ldr	r0, [pc, #76]	; (801a924 <rand+0x68>)
 801a8d6:	214e      	movs	r1, #78	; 0x4e
 801a8d8:	f001 f9a4 	bl	801bc24 <__assert_func>
 801a8dc:	4a12      	ldr	r2, [pc, #72]	; (801a928 <rand+0x6c>)
 801a8de:	4b13      	ldr	r3, [pc, #76]	; (801a92c <rand+0x70>)
 801a8e0:	e9c0 2300 	strd	r2, r3, [r0]
 801a8e4:	4b12      	ldr	r3, [pc, #72]	; (801a930 <rand+0x74>)
 801a8e6:	6083      	str	r3, [r0, #8]
 801a8e8:	230b      	movs	r3, #11
 801a8ea:	8183      	strh	r3, [r0, #12]
 801a8ec:	2201      	movs	r2, #1
 801a8ee:	2300      	movs	r3, #0
 801a8f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a8f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a8f6:	480f      	ldr	r0, [pc, #60]	; (801a934 <rand+0x78>)
 801a8f8:	690a      	ldr	r2, [r1, #16]
 801a8fa:	694b      	ldr	r3, [r1, #20]
 801a8fc:	4c0e      	ldr	r4, [pc, #56]	; (801a938 <rand+0x7c>)
 801a8fe:	4350      	muls	r0, r2
 801a900:	fb04 0003 	mla	r0, r4, r3, r0
 801a904:	fba2 3404 	umull	r3, r4, r2, r4
 801a908:	1c5a      	adds	r2, r3, #1
 801a90a:	4404      	add	r4, r0
 801a90c:	f144 0000 	adc.w	r0, r4, #0
 801a910:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801a914:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a918:	bd10      	pop	{r4, pc}
 801a91a:	bf00      	nop
 801a91c:	200001b8 	.word	0x200001b8
 801a920:	0802021d 	.word	0x0802021d
 801a924:	08020234 	.word	0x08020234
 801a928:	abcd330e 	.word	0xabcd330e
 801a92c:	e66d1234 	.word	0xe66d1234
 801a930:	0005deec 	.word	0x0005deec
 801a934:	5851f42d 	.word	0x5851f42d
 801a938:	4c957f2d 	.word	0x4c957f2d

0801a93c <realloc>:
 801a93c:	4b02      	ldr	r3, [pc, #8]	; (801a948 <realloc+0xc>)
 801a93e:	460a      	mov	r2, r1
 801a940:	4601      	mov	r1, r0
 801a942:	6818      	ldr	r0, [r3, #0]
 801a944:	f002 bc2f 	b.w	801d1a6 <_realloc_r>
 801a948:	200001b8 	.word	0x200001b8

0801a94c <_sbrk_r>:
 801a94c:	b538      	push	{r3, r4, r5, lr}
 801a94e:	4d06      	ldr	r5, [pc, #24]	; (801a968 <_sbrk_r+0x1c>)
 801a950:	2300      	movs	r3, #0
 801a952:	4604      	mov	r4, r0
 801a954:	4608      	mov	r0, r1
 801a956:	602b      	str	r3, [r5, #0]
 801a958:	f7e9 f96e 	bl	8003c38 <_sbrk>
 801a95c:	1c43      	adds	r3, r0, #1
 801a95e:	d102      	bne.n	801a966 <_sbrk_r+0x1a>
 801a960:	682b      	ldr	r3, [r5, #0]
 801a962:	b103      	cbz	r3, 801a966 <_sbrk_r+0x1a>
 801a964:	6023      	str	r3, [r4, #0]
 801a966:	bd38      	pop	{r3, r4, r5, pc}
 801a968:	2001602c 	.word	0x2001602c

0801a96c <nanf>:
 801a96c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a974 <nanf+0x8>
 801a970:	4770      	bx	lr
 801a972:	bf00      	nop
 801a974:	7fc00000 	.word	0x7fc00000

0801a978 <sniprintf>:
 801a978:	b40c      	push	{r2, r3}
 801a97a:	b530      	push	{r4, r5, lr}
 801a97c:	4b17      	ldr	r3, [pc, #92]	; (801a9dc <sniprintf+0x64>)
 801a97e:	1e0c      	subs	r4, r1, #0
 801a980:	681d      	ldr	r5, [r3, #0]
 801a982:	b09d      	sub	sp, #116	; 0x74
 801a984:	da08      	bge.n	801a998 <sniprintf+0x20>
 801a986:	238b      	movs	r3, #139	; 0x8b
 801a988:	602b      	str	r3, [r5, #0]
 801a98a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a98e:	b01d      	add	sp, #116	; 0x74
 801a990:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a994:	b002      	add	sp, #8
 801a996:	4770      	bx	lr
 801a998:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a99c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a9a0:	bf14      	ite	ne
 801a9a2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801a9a6:	4623      	moveq	r3, r4
 801a9a8:	9304      	str	r3, [sp, #16]
 801a9aa:	9307      	str	r3, [sp, #28]
 801a9ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a9b0:	9002      	str	r0, [sp, #8]
 801a9b2:	9006      	str	r0, [sp, #24]
 801a9b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a9b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a9ba:	ab21      	add	r3, sp, #132	; 0x84
 801a9bc:	a902      	add	r1, sp, #8
 801a9be:	4628      	mov	r0, r5
 801a9c0:	9301      	str	r3, [sp, #4]
 801a9c2:	f002 fc71 	bl	801d2a8 <_svfiprintf_r>
 801a9c6:	1c43      	adds	r3, r0, #1
 801a9c8:	bfbc      	itt	lt
 801a9ca:	238b      	movlt	r3, #139	; 0x8b
 801a9cc:	602b      	strlt	r3, [r5, #0]
 801a9ce:	2c00      	cmp	r4, #0
 801a9d0:	d0dd      	beq.n	801a98e <sniprintf+0x16>
 801a9d2:	9b02      	ldr	r3, [sp, #8]
 801a9d4:	2200      	movs	r2, #0
 801a9d6:	701a      	strb	r2, [r3, #0]
 801a9d8:	e7d9      	b.n	801a98e <sniprintf+0x16>
 801a9da:	bf00      	nop
 801a9dc:	200001b8 	.word	0x200001b8

0801a9e0 <siprintf>:
 801a9e0:	b40e      	push	{r1, r2, r3}
 801a9e2:	b500      	push	{lr}
 801a9e4:	b09c      	sub	sp, #112	; 0x70
 801a9e6:	ab1d      	add	r3, sp, #116	; 0x74
 801a9e8:	9002      	str	r0, [sp, #8]
 801a9ea:	9006      	str	r0, [sp, #24]
 801a9ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a9f0:	4809      	ldr	r0, [pc, #36]	; (801aa18 <siprintf+0x38>)
 801a9f2:	9107      	str	r1, [sp, #28]
 801a9f4:	9104      	str	r1, [sp, #16]
 801a9f6:	4909      	ldr	r1, [pc, #36]	; (801aa1c <siprintf+0x3c>)
 801a9f8:	f853 2b04 	ldr.w	r2, [r3], #4
 801a9fc:	9105      	str	r1, [sp, #20]
 801a9fe:	6800      	ldr	r0, [r0, #0]
 801aa00:	9301      	str	r3, [sp, #4]
 801aa02:	a902      	add	r1, sp, #8
 801aa04:	f002 fc50 	bl	801d2a8 <_svfiprintf_r>
 801aa08:	9b02      	ldr	r3, [sp, #8]
 801aa0a:	2200      	movs	r2, #0
 801aa0c:	701a      	strb	r2, [r3, #0]
 801aa0e:	b01c      	add	sp, #112	; 0x70
 801aa10:	f85d eb04 	ldr.w	lr, [sp], #4
 801aa14:	b003      	add	sp, #12
 801aa16:	4770      	bx	lr
 801aa18:	200001b8 	.word	0x200001b8
 801aa1c:	ffff0208 	.word	0xffff0208

0801aa20 <siscanf>:
 801aa20:	b40e      	push	{r1, r2, r3}
 801aa22:	b510      	push	{r4, lr}
 801aa24:	b09f      	sub	sp, #124	; 0x7c
 801aa26:	ac21      	add	r4, sp, #132	; 0x84
 801aa28:	f44f 7101 	mov.w	r1, #516	; 0x204
 801aa2c:	f854 2b04 	ldr.w	r2, [r4], #4
 801aa30:	9201      	str	r2, [sp, #4]
 801aa32:	f8ad 101c 	strh.w	r1, [sp, #28]
 801aa36:	9004      	str	r0, [sp, #16]
 801aa38:	9008      	str	r0, [sp, #32]
 801aa3a:	f7e5 fbd3 	bl	80001e4 <strlen>
 801aa3e:	4b0c      	ldr	r3, [pc, #48]	; (801aa70 <siscanf+0x50>)
 801aa40:	9005      	str	r0, [sp, #20]
 801aa42:	9009      	str	r0, [sp, #36]	; 0x24
 801aa44:	930d      	str	r3, [sp, #52]	; 0x34
 801aa46:	480b      	ldr	r0, [pc, #44]	; (801aa74 <siscanf+0x54>)
 801aa48:	9a01      	ldr	r2, [sp, #4]
 801aa4a:	6800      	ldr	r0, [r0, #0]
 801aa4c:	9403      	str	r4, [sp, #12]
 801aa4e:	2300      	movs	r3, #0
 801aa50:	9311      	str	r3, [sp, #68]	; 0x44
 801aa52:	9316      	str	r3, [sp, #88]	; 0x58
 801aa54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aa58:	f8ad 301e 	strh.w	r3, [sp, #30]
 801aa5c:	a904      	add	r1, sp, #16
 801aa5e:	4623      	mov	r3, r4
 801aa60:	f002 fd7c 	bl	801d55c <__ssvfiscanf_r>
 801aa64:	b01f      	add	sp, #124	; 0x7c
 801aa66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa6a:	b003      	add	sp, #12
 801aa6c:	4770      	bx	lr
 801aa6e:	bf00      	nop
 801aa70:	0801aa9b 	.word	0x0801aa9b
 801aa74:	200001b8 	.word	0x200001b8

0801aa78 <__sread>:
 801aa78:	b510      	push	{r4, lr}
 801aa7a:	460c      	mov	r4, r1
 801aa7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa80:	f003 fb1e 	bl	801e0c0 <_read_r>
 801aa84:	2800      	cmp	r0, #0
 801aa86:	bfab      	itete	ge
 801aa88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801aa8a:	89a3      	ldrhlt	r3, [r4, #12]
 801aa8c:	181b      	addge	r3, r3, r0
 801aa8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801aa92:	bfac      	ite	ge
 801aa94:	6563      	strge	r3, [r4, #84]	; 0x54
 801aa96:	81a3      	strhlt	r3, [r4, #12]
 801aa98:	bd10      	pop	{r4, pc}

0801aa9a <__seofread>:
 801aa9a:	2000      	movs	r0, #0
 801aa9c:	4770      	bx	lr

0801aa9e <__swrite>:
 801aa9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aaa2:	461f      	mov	r7, r3
 801aaa4:	898b      	ldrh	r3, [r1, #12]
 801aaa6:	05db      	lsls	r3, r3, #23
 801aaa8:	4605      	mov	r5, r0
 801aaaa:	460c      	mov	r4, r1
 801aaac:	4616      	mov	r6, r2
 801aaae:	d505      	bpl.n	801aabc <__swrite+0x1e>
 801aab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aab4:	2302      	movs	r3, #2
 801aab6:	2200      	movs	r2, #0
 801aab8:	f001 fe26 	bl	801c708 <_lseek_r>
 801aabc:	89a3      	ldrh	r3, [r4, #12]
 801aabe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801aac6:	81a3      	strh	r3, [r4, #12]
 801aac8:	4632      	mov	r2, r6
 801aaca:	463b      	mov	r3, r7
 801aacc:	4628      	mov	r0, r5
 801aace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aad2:	f001 b827 	b.w	801bb24 <_write_r>

0801aad6 <__sseek>:
 801aad6:	b510      	push	{r4, lr}
 801aad8:	460c      	mov	r4, r1
 801aada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aade:	f001 fe13 	bl	801c708 <_lseek_r>
 801aae2:	1c43      	adds	r3, r0, #1
 801aae4:	89a3      	ldrh	r3, [r4, #12]
 801aae6:	bf15      	itete	ne
 801aae8:	6560      	strne	r0, [r4, #84]	; 0x54
 801aaea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801aaee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801aaf2:	81a3      	strheq	r3, [r4, #12]
 801aaf4:	bf18      	it	ne
 801aaf6:	81a3      	strhne	r3, [r4, #12]
 801aaf8:	bd10      	pop	{r4, pc}

0801aafa <__sclose>:
 801aafa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aafe:	f001 b8af 	b.w	801bc60 <_close_r>

0801ab02 <strchr>:
 801ab02:	b2c9      	uxtb	r1, r1
 801ab04:	4603      	mov	r3, r0
 801ab06:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ab0a:	b11a      	cbz	r2, 801ab14 <strchr+0x12>
 801ab0c:	428a      	cmp	r2, r1
 801ab0e:	d1f9      	bne.n	801ab04 <strchr+0x2>
 801ab10:	4618      	mov	r0, r3
 801ab12:	4770      	bx	lr
 801ab14:	2900      	cmp	r1, #0
 801ab16:	bf18      	it	ne
 801ab18:	2300      	movne	r3, #0
 801ab1a:	e7f9      	b.n	801ab10 <strchr+0xe>

0801ab1c <strcpy>:
 801ab1c:	4603      	mov	r3, r0
 801ab1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ab22:	f803 2b01 	strb.w	r2, [r3], #1
 801ab26:	2a00      	cmp	r2, #0
 801ab28:	d1f9      	bne.n	801ab1e <strcpy+0x2>
 801ab2a:	4770      	bx	lr

0801ab2c <strncmp>:
 801ab2c:	b510      	push	{r4, lr}
 801ab2e:	b16a      	cbz	r2, 801ab4c <strncmp+0x20>
 801ab30:	3901      	subs	r1, #1
 801ab32:	1884      	adds	r4, r0, r2
 801ab34:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ab38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ab3c:	4293      	cmp	r3, r2
 801ab3e:	d103      	bne.n	801ab48 <strncmp+0x1c>
 801ab40:	42a0      	cmp	r0, r4
 801ab42:	d001      	beq.n	801ab48 <strncmp+0x1c>
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	d1f5      	bne.n	801ab34 <strncmp+0x8>
 801ab48:	1a98      	subs	r0, r3, r2
 801ab4a:	bd10      	pop	{r4, pc}
 801ab4c:	4610      	mov	r0, r2
 801ab4e:	e7fc      	b.n	801ab4a <strncmp+0x1e>

0801ab50 <strnlen>:
 801ab50:	b510      	push	{r4, lr}
 801ab52:	4602      	mov	r2, r0
 801ab54:	4401      	add	r1, r0
 801ab56:	428a      	cmp	r2, r1
 801ab58:	4613      	mov	r3, r2
 801ab5a:	d101      	bne.n	801ab60 <strnlen+0x10>
 801ab5c:	1a18      	subs	r0, r3, r0
 801ab5e:	bd10      	pop	{r4, pc}
 801ab60:	781c      	ldrb	r4, [r3, #0]
 801ab62:	3201      	adds	r2, #1
 801ab64:	2c00      	cmp	r4, #0
 801ab66:	d1f6      	bne.n	801ab56 <strnlen+0x6>
 801ab68:	e7f8      	b.n	801ab5c <strnlen+0xc>

0801ab6a <strstr>:
 801ab6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab6c:	780c      	ldrb	r4, [r1, #0]
 801ab6e:	b164      	cbz	r4, 801ab8a <strstr+0x20>
 801ab70:	4603      	mov	r3, r0
 801ab72:	781a      	ldrb	r2, [r3, #0]
 801ab74:	4618      	mov	r0, r3
 801ab76:	1c5e      	adds	r6, r3, #1
 801ab78:	b90a      	cbnz	r2, 801ab7e <strstr+0x14>
 801ab7a:	4610      	mov	r0, r2
 801ab7c:	e005      	b.n	801ab8a <strstr+0x20>
 801ab7e:	4294      	cmp	r4, r2
 801ab80:	d108      	bne.n	801ab94 <strstr+0x2a>
 801ab82:	460d      	mov	r5, r1
 801ab84:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801ab88:	b902      	cbnz	r2, 801ab8c <strstr+0x22>
 801ab8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab8c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801ab90:	4297      	cmp	r7, r2
 801ab92:	d0f7      	beq.n	801ab84 <strstr+0x1a>
 801ab94:	4633      	mov	r3, r6
 801ab96:	e7ec      	b.n	801ab72 <strstr+0x8>

0801ab98 <sulp>:
 801ab98:	b570      	push	{r4, r5, r6, lr}
 801ab9a:	4604      	mov	r4, r0
 801ab9c:	460d      	mov	r5, r1
 801ab9e:	ec45 4b10 	vmov	d0, r4, r5
 801aba2:	4616      	mov	r6, r2
 801aba4:	f002 f9b0 	bl	801cf08 <__ulp>
 801aba8:	ec51 0b10 	vmov	r0, r1, d0
 801abac:	b17e      	cbz	r6, 801abce <sulp+0x36>
 801abae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801abb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	dd09      	ble.n	801abce <sulp+0x36>
 801abba:	051b      	lsls	r3, r3, #20
 801abbc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801abc0:	2400      	movs	r4, #0
 801abc2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801abc6:	4622      	mov	r2, r4
 801abc8:	462b      	mov	r3, r5
 801abca:	f7e5 fd25 	bl	8000618 <__aeabi_dmul>
 801abce:	bd70      	pop	{r4, r5, r6, pc}

0801abd0 <_strtod_l>:
 801abd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abd4:	b0a3      	sub	sp, #140	; 0x8c
 801abd6:	461f      	mov	r7, r3
 801abd8:	2300      	movs	r3, #0
 801abda:	931e      	str	r3, [sp, #120]	; 0x78
 801abdc:	4ba4      	ldr	r3, [pc, #656]	; (801ae70 <_strtod_l+0x2a0>)
 801abde:	9219      	str	r2, [sp, #100]	; 0x64
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	9307      	str	r3, [sp, #28]
 801abe4:	4604      	mov	r4, r0
 801abe6:	4618      	mov	r0, r3
 801abe8:	4688      	mov	r8, r1
 801abea:	f7e5 fafb 	bl	80001e4 <strlen>
 801abee:	f04f 0a00 	mov.w	sl, #0
 801abf2:	4605      	mov	r5, r0
 801abf4:	f04f 0b00 	mov.w	fp, #0
 801abf8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801abfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801abfe:	781a      	ldrb	r2, [r3, #0]
 801ac00:	2a2b      	cmp	r2, #43	; 0x2b
 801ac02:	d04c      	beq.n	801ac9e <_strtod_l+0xce>
 801ac04:	d839      	bhi.n	801ac7a <_strtod_l+0xaa>
 801ac06:	2a0d      	cmp	r2, #13
 801ac08:	d832      	bhi.n	801ac70 <_strtod_l+0xa0>
 801ac0a:	2a08      	cmp	r2, #8
 801ac0c:	d832      	bhi.n	801ac74 <_strtod_l+0xa4>
 801ac0e:	2a00      	cmp	r2, #0
 801ac10:	d03c      	beq.n	801ac8c <_strtod_l+0xbc>
 801ac12:	2300      	movs	r3, #0
 801ac14:	930e      	str	r3, [sp, #56]	; 0x38
 801ac16:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ac18:	7833      	ldrb	r3, [r6, #0]
 801ac1a:	2b30      	cmp	r3, #48	; 0x30
 801ac1c:	f040 80b4 	bne.w	801ad88 <_strtod_l+0x1b8>
 801ac20:	7873      	ldrb	r3, [r6, #1]
 801ac22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ac26:	2b58      	cmp	r3, #88	; 0x58
 801ac28:	d16c      	bne.n	801ad04 <_strtod_l+0x134>
 801ac2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac2c:	9301      	str	r3, [sp, #4]
 801ac2e:	ab1e      	add	r3, sp, #120	; 0x78
 801ac30:	9702      	str	r7, [sp, #8]
 801ac32:	9300      	str	r3, [sp, #0]
 801ac34:	4a8f      	ldr	r2, [pc, #572]	; (801ae74 <_strtod_l+0x2a4>)
 801ac36:	ab1f      	add	r3, sp, #124	; 0x7c
 801ac38:	a91d      	add	r1, sp, #116	; 0x74
 801ac3a:	4620      	mov	r0, r4
 801ac3c:	f001 fa5c 	bl	801c0f8 <__gethex>
 801ac40:	f010 0707 	ands.w	r7, r0, #7
 801ac44:	4605      	mov	r5, r0
 801ac46:	d005      	beq.n	801ac54 <_strtod_l+0x84>
 801ac48:	2f06      	cmp	r7, #6
 801ac4a:	d12a      	bne.n	801aca2 <_strtod_l+0xd2>
 801ac4c:	3601      	adds	r6, #1
 801ac4e:	2300      	movs	r3, #0
 801ac50:	961d      	str	r6, [sp, #116]	; 0x74
 801ac52:	930e      	str	r3, [sp, #56]	; 0x38
 801ac54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	f040 8596 	bne.w	801b788 <_strtod_l+0xbb8>
 801ac5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac5e:	b1db      	cbz	r3, 801ac98 <_strtod_l+0xc8>
 801ac60:	4652      	mov	r2, sl
 801ac62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ac66:	ec43 2b10 	vmov	d0, r2, r3
 801ac6a:	b023      	add	sp, #140	; 0x8c
 801ac6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac70:	2a20      	cmp	r2, #32
 801ac72:	d1ce      	bne.n	801ac12 <_strtod_l+0x42>
 801ac74:	3301      	adds	r3, #1
 801ac76:	931d      	str	r3, [sp, #116]	; 0x74
 801ac78:	e7c0      	b.n	801abfc <_strtod_l+0x2c>
 801ac7a:	2a2d      	cmp	r2, #45	; 0x2d
 801ac7c:	d1c9      	bne.n	801ac12 <_strtod_l+0x42>
 801ac7e:	2201      	movs	r2, #1
 801ac80:	920e      	str	r2, [sp, #56]	; 0x38
 801ac82:	1c5a      	adds	r2, r3, #1
 801ac84:	921d      	str	r2, [sp, #116]	; 0x74
 801ac86:	785b      	ldrb	r3, [r3, #1]
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	d1c4      	bne.n	801ac16 <_strtod_l+0x46>
 801ac8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ac8e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	f040 8576 	bne.w	801b784 <_strtod_l+0xbb4>
 801ac98:	4652      	mov	r2, sl
 801ac9a:	465b      	mov	r3, fp
 801ac9c:	e7e3      	b.n	801ac66 <_strtod_l+0x96>
 801ac9e:	2200      	movs	r2, #0
 801aca0:	e7ee      	b.n	801ac80 <_strtod_l+0xb0>
 801aca2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801aca4:	b13a      	cbz	r2, 801acb6 <_strtod_l+0xe6>
 801aca6:	2135      	movs	r1, #53	; 0x35
 801aca8:	a820      	add	r0, sp, #128	; 0x80
 801acaa:	f002 fa38 	bl	801d11e <__copybits>
 801acae:	991e      	ldr	r1, [sp, #120]	; 0x78
 801acb0:	4620      	mov	r0, r4
 801acb2:	f001 fdfd 	bl	801c8b0 <_Bfree>
 801acb6:	3f01      	subs	r7, #1
 801acb8:	2f05      	cmp	r7, #5
 801acba:	d807      	bhi.n	801accc <_strtod_l+0xfc>
 801acbc:	e8df f007 	tbb	[pc, r7]
 801acc0:	1d180b0e 	.word	0x1d180b0e
 801acc4:	030e      	.short	0x030e
 801acc6:	f04f 0b00 	mov.w	fp, #0
 801acca:	46da      	mov	sl, fp
 801accc:	0728      	lsls	r0, r5, #28
 801acce:	d5c1      	bpl.n	801ac54 <_strtod_l+0x84>
 801acd0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801acd4:	e7be      	b.n	801ac54 <_strtod_l+0x84>
 801acd6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801acda:	e7f7      	b.n	801accc <_strtod_l+0xfc>
 801acdc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801ace0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ace2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801ace6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801acea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801acee:	e7ed      	b.n	801accc <_strtod_l+0xfc>
 801acf0:	f8df b184 	ldr.w	fp, [pc, #388]	; 801ae78 <_strtod_l+0x2a8>
 801acf4:	f04f 0a00 	mov.w	sl, #0
 801acf8:	e7e8      	b.n	801accc <_strtod_l+0xfc>
 801acfa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801acfe:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801ad02:	e7e3      	b.n	801accc <_strtod_l+0xfc>
 801ad04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ad06:	1c5a      	adds	r2, r3, #1
 801ad08:	921d      	str	r2, [sp, #116]	; 0x74
 801ad0a:	785b      	ldrb	r3, [r3, #1]
 801ad0c:	2b30      	cmp	r3, #48	; 0x30
 801ad0e:	d0f9      	beq.n	801ad04 <_strtod_l+0x134>
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d09f      	beq.n	801ac54 <_strtod_l+0x84>
 801ad14:	2301      	movs	r3, #1
 801ad16:	f04f 0900 	mov.w	r9, #0
 801ad1a:	9304      	str	r3, [sp, #16]
 801ad1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ad1e:	930a      	str	r3, [sp, #40]	; 0x28
 801ad20:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ad24:	464f      	mov	r7, r9
 801ad26:	220a      	movs	r2, #10
 801ad28:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ad2a:	7806      	ldrb	r6, [r0, #0]
 801ad2c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801ad30:	b2d9      	uxtb	r1, r3
 801ad32:	2909      	cmp	r1, #9
 801ad34:	d92a      	bls.n	801ad8c <_strtod_l+0x1bc>
 801ad36:	9907      	ldr	r1, [sp, #28]
 801ad38:	462a      	mov	r2, r5
 801ad3a:	f7ff fef7 	bl	801ab2c <strncmp>
 801ad3e:	b398      	cbz	r0, 801ada8 <_strtod_l+0x1d8>
 801ad40:	2000      	movs	r0, #0
 801ad42:	4633      	mov	r3, r6
 801ad44:	463d      	mov	r5, r7
 801ad46:	9007      	str	r0, [sp, #28]
 801ad48:	4602      	mov	r2, r0
 801ad4a:	2b65      	cmp	r3, #101	; 0x65
 801ad4c:	d001      	beq.n	801ad52 <_strtod_l+0x182>
 801ad4e:	2b45      	cmp	r3, #69	; 0x45
 801ad50:	d118      	bne.n	801ad84 <_strtod_l+0x1b4>
 801ad52:	b91d      	cbnz	r5, 801ad5c <_strtod_l+0x18c>
 801ad54:	9b04      	ldr	r3, [sp, #16]
 801ad56:	4303      	orrs	r3, r0
 801ad58:	d098      	beq.n	801ac8c <_strtod_l+0xbc>
 801ad5a:	2500      	movs	r5, #0
 801ad5c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801ad60:	f108 0301 	add.w	r3, r8, #1
 801ad64:	931d      	str	r3, [sp, #116]	; 0x74
 801ad66:	f898 3001 	ldrb.w	r3, [r8, #1]
 801ad6a:	2b2b      	cmp	r3, #43	; 0x2b
 801ad6c:	d075      	beq.n	801ae5a <_strtod_l+0x28a>
 801ad6e:	2b2d      	cmp	r3, #45	; 0x2d
 801ad70:	d07b      	beq.n	801ae6a <_strtod_l+0x29a>
 801ad72:	f04f 0c00 	mov.w	ip, #0
 801ad76:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801ad7a:	2909      	cmp	r1, #9
 801ad7c:	f240 8082 	bls.w	801ae84 <_strtod_l+0x2b4>
 801ad80:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ad84:	2600      	movs	r6, #0
 801ad86:	e09d      	b.n	801aec4 <_strtod_l+0x2f4>
 801ad88:	2300      	movs	r3, #0
 801ad8a:	e7c4      	b.n	801ad16 <_strtod_l+0x146>
 801ad8c:	2f08      	cmp	r7, #8
 801ad8e:	bfd8      	it	le
 801ad90:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801ad92:	f100 0001 	add.w	r0, r0, #1
 801ad96:	bfda      	itte	le
 801ad98:	fb02 3301 	mlale	r3, r2, r1, r3
 801ad9c:	9309      	strle	r3, [sp, #36]	; 0x24
 801ad9e:	fb02 3909 	mlagt	r9, r2, r9, r3
 801ada2:	3701      	adds	r7, #1
 801ada4:	901d      	str	r0, [sp, #116]	; 0x74
 801ada6:	e7bf      	b.n	801ad28 <_strtod_l+0x158>
 801ada8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801adaa:	195a      	adds	r2, r3, r5
 801adac:	921d      	str	r2, [sp, #116]	; 0x74
 801adae:	5d5b      	ldrb	r3, [r3, r5]
 801adb0:	2f00      	cmp	r7, #0
 801adb2:	d037      	beq.n	801ae24 <_strtod_l+0x254>
 801adb4:	9007      	str	r0, [sp, #28]
 801adb6:	463d      	mov	r5, r7
 801adb8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801adbc:	2a09      	cmp	r2, #9
 801adbe:	d912      	bls.n	801ade6 <_strtod_l+0x216>
 801adc0:	2201      	movs	r2, #1
 801adc2:	e7c2      	b.n	801ad4a <_strtod_l+0x17a>
 801adc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801adc6:	1c5a      	adds	r2, r3, #1
 801adc8:	921d      	str	r2, [sp, #116]	; 0x74
 801adca:	785b      	ldrb	r3, [r3, #1]
 801adcc:	3001      	adds	r0, #1
 801adce:	2b30      	cmp	r3, #48	; 0x30
 801add0:	d0f8      	beq.n	801adc4 <_strtod_l+0x1f4>
 801add2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801add6:	2a08      	cmp	r2, #8
 801add8:	f200 84db 	bhi.w	801b792 <_strtod_l+0xbc2>
 801addc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801adde:	9007      	str	r0, [sp, #28]
 801ade0:	2000      	movs	r0, #0
 801ade2:	920a      	str	r2, [sp, #40]	; 0x28
 801ade4:	4605      	mov	r5, r0
 801ade6:	3b30      	subs	r3, #48	; 0x30
 801ade8:	f100 0201 	add.w	r2, r0, #1
 801adec:	d014      	beq.n	801ae18 <_strtod_l+0x248>
 801adee:	9907      	ldr	r1, [sp, #28]
 801adf0:	4411      	add	r1, r2
 801adf2:	9107      	str	r1, [sp, #28]
 801adf4:	462a      	mov	r2, r5
 801adf6:	eb00 0e05 	add.w	lr, r0, r5
 801adfa:	210a      	movs	r1, #10
 801adfc:	4572      	cmp	r2, lr
 801adfe:	d113      	bne.n	801ae28 <_strtod_l+0x258>
 801ae00:	182a      	adds	r2, r5, r0
 801ae02:	2a08      	cmp	r2, #8
 801ae04:	f105 0501 	add.w	r5, r5, #1
 801ae08:	4405      	add	r5, r0
 801ae0a:	dc1c      	bgt.n	801ae46 <_strtod_l+0x276>
 801ae0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ae0e:	220a      	movs	r2, #10
 801ae10:	fb02 3301 	mla	r3, r2, r1, r3
 801ae14:	9309      	str	r3, [sp, #36]	; 0x24
 801ae16:	2200      	movs	r2, #0
 801ae18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ae1a:	1c59      	adds	r1, r3, #1
 801ae1c:	911d      	str	r1, [sp, #116]	; 0x74
 801ae1e:	785b      	ldrb	r3, [r3, #1]
 801ae20:	4610      	mov	r0, r2
 801ae22:	e7c9      	b.n	801adb8 <_strtod_l+0x1e8>
 801ae24:	4638      	mov	r0, r7
 801ae26:	e7d2      	b.n	801adce <_strtod_l+0x1fe>
 801ae28:	2a08      	cmp	r2, #8
 801ae2a:	dc04      	bgt.n	801ae36 <_strtod_l+0x266>
 801ae2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801ae2e:	434e      	muls	r6, r1
 801ae30:	9609      	str	r6, [sp, #36]	; 0x24
 801ae32:	3201      	adds	r2, #1
 801ae34:	e7e2      	b.n	801adfc <_strtod_l+0x22c>
 801ae36:	f102 0c01 	add.w	ip, r2, #1
 801ae3a:	f1bc 0f10 	cmp.w	ip, #16
 801ae3e:	bfd8      	it	le
 801ae40:	fb01 f909 	mulle.w	r9, r1, r9
 801ae44:	e7f5      	b.n	801ae32 <_strtod_l+0x262>
 801ae46:	2d10      	cmp	r5, #16
 801ae48:	bfdc      	itt	le
 801ae4a:	220a      	movle	r2, #10
 801ae4c:	fb02 3909 	mlale	r9, r2, r9, r3
 801ae50:	e7e1      	b.n	801ae16 <_strtod_l+0x246>
 801ae52:	2300      	movs	r3, #0
 801ae54:	9307      	str	r3, [sp, #28]
 801ae56:	2201      	movs	r2, #1
 801ae58:	e77c      	b.n	801ad54 <_strtod_l+0x184>
 801ae5a:	f04f 0c00 	mov.w	ip, #0
 801ae5e:	f108 0302 	add.w	r3, r8, #2
 801ae62:	931d      	str	r3, [sp, #116]	; 0x74
 801ae64:	f898 3002 	ldrb.w	r3, [r8, #2]
 801ae68:	e785      	b.n	801ad76 <_strtod_l+0x1a6>
 801ae6a:	f04f 0c01 	mov.w	ip, #1
 801ae6e:	e7f6      	b.n	801ae5e <_strtod_l+0x28e>
 801ae70:	08020408 	.word	0x08020408
 801ae74:	080202a0 	.word	0x080202a0
 801ae78:	7ff00000 	.word	0x7ff00000
 801ae7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ae7e:	1c59      	adds	r1, r3, #1
 801ae80:	911d      	str	r1, [sp, #116]	; 0x74
 801ae82:	785b      	ldrb	r3, [r3, #1]
 801ae84:	2b30      	cmp	r3, #48	; 0x30
 801ae86:	d0f9      	beq.n	801ae7c <_strtod_l+0x2ac>
 801ae88:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801ae8c:	2908      	cmp	r1, #8
 801ae8e:	f63f af79 	bhi.w	801ad84 <_strtod_l+0x1b4>
 801ae92:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801ae96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ae98:	9308      	str	r3, [sp, #32]
 801ae9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ae9c:	1c59      	adds	r1, r3, #1
 801ae9e:	911d      	str	r1, [sp, #116]	; 0x74
 801aea0:	785b      	ldrb	r3, [r3, #1]
 801aea2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801aea6:	2e09      	cmp	r6, #9
 801aea8:	d937      	bls.n	801af1a <_strtod_l+0x34a>
 801aeaa:	9e08      	ldr	r6, [sp, #32]
 801aeac:	1b89      	subs	r1, r1, r6
 801aeae:	2908      	cmp	r1, #8
 801aeb0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801aeb4:	dc02      	bgt.n	801aebc <_strtod_l+0x2ec>
 801aeb6:	4576      	cmp	r6, lr
 801aeb8:	bfa8      	it	ge
 801aeba:	4676      	movge	r6, lr
 801aebc:	f1bc 0f00 	cmp.w	ip, #0
 801aec0:	d000      	beq.n	801aec4 <_strtod_l+0x2f4>
 801aec2:	4276      	negs	r6, r6
 801aec4:	2d00      	cmp	r5, #0
 801aec6:	d14f      	bne.n	801af68 <_strtod_l+0x398>
 801aec8:	9904      	ldr	r1, [sp, #16]
 801aeca:	4301      	orrs	r1, r0
 801aecc:	f47f aec2 	bne.w	801ac54 <_strtod_l+0x84>
 801aed0:	2a00      	cmp	r2, #0
 801aed2:	f47f aedb 	bne.w	801ac8c <_strtod_l+0xbc>
 801aed6:	2b69      	cmp	r3, #105	; 0x69
 801aed8:	d027      	beq.n	801af2a <_strtod_l+0x35a>
 801aeda:	dc24      	bgt.n	801af26 <_strtod_l+0x356>
 801aedc:	2b49      	cmp	r3, #73	; 0x49
 801aede:	d024      	beq.n	801af2a <_strtod_l+0x35a>
 801aee0:	2b4e      	cmp	r3, #78	; 0x4e
 801aee2:	f47f aed3 	bne.w	801ac8c <_strtod_l+0xbc>
 801aee6:	499e      	ldr	r1, [pc, #632]	; (801b160 <_strtod_l+0x590>)
 801aee8:	a81d      	add	r0, sp, #116	; 0x74
 801aeea:	f001 fb5d 	bl	801c5a8 <__match>
 801aeee:	2800      	cmp	r0, #0
 801aef0:	f43f aecc 	beq.w	801ac8c <_strtod_l+0xbc>
 801aef4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aef6:	781b      	ldrb	r3, [r3, #0]
 801aef8:	2b28      	cmp	r3, #40	; 0x28
 801aefa:	d12d      	bne.n	801af58 <_strtod_l+0x388>
 801aefc:	4999      	ldr	r1, [pc, #612]	; (801b164 <_strtod_l+0x594>)
 801aefe:	aa20      	add	r2, sp, #128	; 0x80
 801af00:	a81d      	add	r0, sp, #116	; 0x74
 801af02:	f001 fb65 	bl	801c5d0 <__hexnan>
 801af06:	2805      	cmp	r0, #5
 801af08:	d126      	bne.n	801af58 <_strtod_l+0x388>
 801af0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801af0c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801af10:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801af14:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801af18:	e69c      	b.n	801ac54 <_strtod_l+0x84>
 801af1a:	210a      	movs	r1, #10
 801af1c:	fb01 3e0e 	mla	lr, r1, lr, r3
 801af20:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801af24:	e7b9      	b.n	801ae9a <_strtod_l+0x2ca>
 801af26:	2b6e      	cmp	r3, #110	; 0x6e
 801af28:	e7db      	b.n	801aee2 <_strtod_l+0x312>
 801af2a:	498f      	ldr	r1, [pc, #572]	; (801b168 <_strtod_l+0x598>)
 801af2c:	a81d      	add	r0, sp, #116	; 0x74
 801af2e:	f001 fb3b 	bl	801c5a8 <__match>
 801af32:	2800      	cmp	r0, #0
 801af34:	f43f aeaa 	beq.w	801ac8c <_strtod_l+0xbc>
 801af38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801af3a:	498c      	ldr	r1, [pc, #560]	; (801b16c <_strtod_l+0x59c>)
 801af3c:	3b01      	subs	r3, #1
 801af3e:	a81d      	add	r0, sp, #116	; 0x74
 801af40:	931d      	str	r3, [sp, #116]	; 0x74
 801af42:	f001 fb31 	bl	801c5a8 <__match>
 801af46:	b910      	cbnz	r0, 801af4e <_strtod_l+0x37e>
 801af48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801af4a:	3301      	adds	r3, #1
 801af4c:	931d      	str	r3, [sp, #116]	; 0x74
 801af4e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801b17c <_strtod_l+0x5ac>
 801af52:	f04f 0a00 	mov.w	sl, #0
 801af56:	e67d      	b.n	801ac54 <_strtod_l+0x84>
 801af58:	4885      	ldr	r0, [pc, #532]	; (801b170 <_strtod_l+0x5a0>)
 801af5a:	f003 f8c5 	bl	801e0e8 <nan>
 801af5e:	ed8d 0b04 	vstr	d0, [sp, #16]
 801af62:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801af66:	e675      	b.n	801ac54 <_strtod_l+0x84>
 801af68:	9b07      	ldr	r3, [sp, #28]
 801af6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801af6c:	1af3      	subs	r3, r6, r3
 801af6e:	2f00      	cmp	r7, #0
 801af70:	bf08      	it	eq
 801af72:	462f      	moveq	r7, r5
 801af74:	2d10      	cmp	r5, #16
 801af76:	9308      	str	r3, [sp, #32]
 801af78:	46a8      	mov	r8, r5
 801af7a:	bfa8      	it	ge
 801af7c:	f04f 0810 	movge.w	r8, #16
 801af80:	f7e5 fad0 	bl	8000524 <__aeabi_ui2d>
 801af84:	2d09      	cmp	r5, #9
 801af86:	4682      	mov	sl, r0
 801af88:	468b      	mov	fp, r1
 801af8a:	dd13      	ble.n	801afb4 <_strtod_l+0x3e4>
 801af8c:	4b79      	ldr	r3, [pc, #484]	; (801b174 <_strtod_l+0x5a4>)
 801af8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801af92:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801af96:	f7e5 fb3f 	bl	8000618 <__aeabi_dmul>
 801af9a:	4682      	mov	sl, r0
 801af9c:	4648      	mov	r0, r9
 801af9e:	468b      	mov	fp, r1
 801afa0:	f7e5 fac0 	bl	8000524 <__aeabi_ui2d>
 801afa4:	4602      	mov	r2, r0
 801afa6:	460b      	mov	r3, r1
 801afa8:	4650      	mov	r0, sl
 801afaa:	4659      	mov	r1, fp
 801afac:	f7e5 f97e 	bl	80002ac <__adddf3>
 801afb0:	4682      	mov	sl, r0
 801afb2:	468b      	mov	fp, r1
 801afb4:	2d0f      	cmp	r5, #15
 801afb6:	dc38      	bgt.n	801b02a <_strtod_l+0x45a>
 801afb8:	9b08      	ldr	r3, [sp, #32]
 801afba:	2b00      	cmp	r3, #0
 801afbc:	f43f ae4a 	beq.w	801ac54 <_strtod_l+0x84>
 801afc0:	dd24      	ble.n	801b00c <_strtod_l+0x43c>
 801afc2:	2b16      	cmp	r3, #22
 801afc4:	dc0b      	bgt.n	801afde <_strtod_l+0x40e>
 801afc6:	4d6b      	ldr	r5, [pc, #428]	; (801b174 <_strtod_l+0x5a4>)
 801afc8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801afcc:	e9d5 0100 	ldrd	r0, r1, [r5]
 801afd0:	4652      	mov	r2, sl
 801afd2:	465b      	mov	r3, fp
 801afd4:	f7e5 fb20 	bl	8000618 <__aeabi_dmul>
 801afd8:	4682      	mov	sl, r0
 801afda:	468b      	mov	fp, r1
 801afdc:	e63a      	b.n	801ac54 <_strtod_l+0x84>
 801afde:	9a08      	ldr	r2, [sp, #32]
 801afe0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801afe4:	4293      	cmp	r3, r2
 801afe6:	db20      	blt.n	801b02a <_strtod_l+0x45a>
 801afe8:	4c62      	ldr	r4, [pc, #392]	; (801b174 <_strtod_l+0x5a4>)
 801afea:	f1c5 050f 	rsb	r5, r5, #15
 801afee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801aff2:	4652      	mov	r2, sl
 801aff4:	465b      	mov	r3, fp
 801aff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801affa:	f7e5 fb0d 	bl	8000618 <__aeabi_dmul>
 801affe:	9b08      	ldr	r3, [sp, #32]
 801b000:	1b5d      	subs	r5, r3, r5
 801b002:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801b006:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b00a:	e7e3      	b.n	801afd4 <_strtod_l+0x404>
 801b00c:	9b08      	ldr	r3, [sp, #32]
 801b00e:	3316      	adds	r3, #22
 801b010:	db0b      	blt.n	801b02a <_strtod_l+0x45a>
 801b012:	9b07      	ldr	r3, [sp, #28]
 801b014:	4a57      	ldr	r2, [pc, #348]	; (801b174 <_strtod_l+0x5a4>)
 801b016:	1b9e      	subs	r6, r3, r6
 801b018:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801b01c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b020:	4650      	mov	r0, sl
 801b022:	4659      	mov	r1, fp
 801b024:	f7e5 fc22 	bl	800086c <__aeabi_ddiv>
 801b028:	e7d6      	b.n	801afd8 <_strtod_l+0x408>
 801b02a:	9b08      	ldr	r3, [sp, #32]
 801b02c:	eba5 0808 	sub.w	r8, r5, r8
 801b030:	4498      	add	r8, r3
 801b032:	f1b8 0f00 	cmp.w	r8, #0
 801b036:	dd71      	ble.n	801b11c <_strtod_l+0x54c>
 801b038:	f018 030f 	ands.w	r3, r8, #15
 801b03c:	d00a      	beq.n	801b054 <_strtod_l+0x484>
 801b03e:	494d      	ldr	r1, [pc, #308]	; (801b174 <_strtod_l+0x5a4>)
 801b040:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b044:	4652      	mov	r2, sl
 801b046:	465b      	mov	r3, fp
 801b048:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b04c:	f7e5 fae4 	bl	8000618 <__aeabi_dmul>
 801b050:	4682      	mov	sl, r0
 801b052:	468b      	mov	fp, r1
 801b054:	f038 080f 	bics.w	r8, r8, #15
 801b058:	d04d      	beq.n	801b0f6 <_strtod_l+0x526>
 801b05a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801b05e:	dd22      	ble.n	801b0a6 <_strtod_l+0x4d6>
 801b060:	2500      	movs	r5, #0
 801b062:	462e      	mov	r6, r5
 801b064:	9509      	str	r5, [sp, #36]	; 0x24
 801b066:	9507      	str	r5, [sp, #28]
 801b068:	2322      	movs	r3, #34	; 0x22
 801b06a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801b17c <_strtod_l+0x5ac>
 801b06e:	6023      	str	r3, [r4, #0]
 801b070:	f04f 0a00 	mov.w	sl, #0
 801b074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b076:	2b00      	cmp	r3, #0
 801b078:	f43f adec 	beq.w	801ac54 <_strtod_l+0x84>
 801b07c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b07e:	4620      	mov	r0, r4
 801b080:	f001 fc16 	bl	801c8b0 <_Bfree>
 801b084:	9907      	ldr	r1, [sp, #28]
 801b086:	4620      	mov	r0, r4
 801b088:	f001 fc12 	bl	801c8b0 <_Bfree>
 801b08c:	4631      	mov	r1, r6
 801b08e:	4620      	mov	r0, r4
 801b090:	f001 fc0e 	bl	801c8b0 <_Bfree>
 801b094:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b096:	4620      	mov	r0, r4
 801b098:	f001 fc0a 	bl	801c8b0 <_Bfree>
 801b09c:	4629      	mov	r1, r5
 801b09e:	4620      	mov	r0, r4
 801b0a0:	f001 fc06 	bl	801c8b0 <_Bfree>
 801b0a4:	e5d6      	b.n	801ac54 <_strtod_l+0x84>
 801b0a6:	2300      	movs	r3, #0
 801b0a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 801b0ac:	4650      	mov	r0, sl
 801b0ae:	4659      	mov	r1, fp
 801b0b0:	4699      	mov	r9, r3
 801b0b2:	f1b8 0f01 	cmp.w	r8, #1
 801b0b6:	dc21      	bgt.n	801b0fc <_strtod_l+0x52c>
 801b0b8:	b10b      	cbz	r3, 801b0be <_strtod_l+0x4ee>
 801b0ba:	4682      	mov	sl, r0
 801b0bc:	468b      	mov	fp, r1
 801b0be:	4b2e      	ldr	r3, [pc, #184]	; (801b178 <_strtod_l+0x5a8>)
 801b0c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801b0c4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801b0c8:	4652      	mov	r2, sl
 801b0ca:	465b      	mov	r3, fp
 801b0cc:	e9d9 0100 	ldrd	r0, r1, [r9]
 801b0d0:	f7e5 faa2 	bl	8000618 <__aeabi_dmul>
 801b0d4:	4b29      	ldr	r3, [pc, #164]	; (801b17c <_strtod_l+0x5ac>)
 801b0d6:	460a      	mov	r2, r1
 801b0d8:	400b      	ands	r3, r1
 801b0da:	4929      	ldr	r1, [pc, #164]	; (801b180 <_strtod_l+0x5b0>)
 801b0dc:	428b      	cmp	r3, r1
 801b0de:	4682      	mov	sl, r0
 801b0e0:	d8be      	bhi.n	801b060 <_strtod_l+0x490>
 801b0e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801b0e6:	428b      	cmp	r3, r1
 801b0e8:	bf86      	itte	hi
 801b0ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801b184 <_strtod_l+0x5b4>
 801b0ee:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801b0f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801b0f6:	2300      	movs	r3, #0
 801b0f8:	9304      	str	r3, [sp, #16]
 801b0fa:	e081      	b.n	801b200 <_strtod_l+0x630>
 801b0fc:	f018 0f01 	tst.w	r8, #1
 801b100:	d007      	beq.n	801b112 <_strtod_l+0x542>
 801b102:	4b1d      	ldr	r3, [pc, #116]	; (801b178 <_strtod_l+0x5a8>)
 801b104:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801b108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b10c:	f7e5 fa84 	bl	8000618 <__aeabi_dmul>
 801b110:	2301      	movs	r3, #1
 801b112:	f109 0901 	add.w	r9, r9, #1
 801b116:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b11a:	e7ca      	b.n	801b0b2 <_strtod_l+0x4e2>
 801b11c:	d0eb      	beq.n	801b0f6 <_strtod_l+0x526>
 801b11e:	f1c8 0800 	rsb	r8, r8, #0
 801b122:	f018 020f 	ands.w	r2, r8, #15
 801b126:	d00a      	beq.n	801b13e <_strtod_l+0x56e>
 801b128:	4b12      	ldr	r3, [pc, #72]	; (801b174 <_strtod_l+0x5a4>)
 801b12a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b12e:	4650      	mov	r0, sl
 801b130:	4659      	mov	r1, fp
 801b132:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b136:	f7e5 fb99 	bl	800086c <__aeabi_ddiv>
 801b13a:	4682      	mov	sl, r0
 801b13c:	468b      	mov	fp, r1
 801b13e:	ea5f 1828 	movs.w	r8, r8, asr #4
 801b142:	d0d8      	beq.n	801b0f6 <_strtod_l+0x526>
 801b144:	f1b8 0f1f 	cmp.w	r8, #31
 801b148:	dd1e      	ble.n	801b188 <_strtod_l+0x5b8>
 801b14a:	2500      	movs	r5, #0
 801b14c:	462e      	mov	r6, r5
 801b14e:	9509      	str	r5, [sp, #36]	; 0x24
 801b150:	9507      	str	r5, [sp, #28]
 801b152:	2322      	movs	r3, #34	; 0x22
 801b154:	f04f 0a00 	mov.w	sl, #0
 801b158:	f04f 0b00 	mov.w	fp, #0
 801b15c:	6023      	str	r3, [r4, #0]
 801b15e:	e789      	b.n	801b074 <_strtod_l+0x4a4>
 801b160:	0802029c 	.word	0x0802029c
 801b164:	080202b4 	.word	0x080202b4
 801b168:	08020293 	.word	0x08020293
 801b16c:	08020296 	.word	0x08020296
 801b170:	0802032b 	.word	0x0802032b
 801b174:	080204a8 	.word	0x080204a8
 801b178:	08020480 	.word	0x08020480
 801b17c:	7ff00000 	.word	0x7ff00000
 801b180:	7ca00000 	.word	0x7ca00000
 801b184:	7fefffff 	.word	0x7fefffff
 801b188:	f018 0310 	ands.w	r3, r8, #16
 801b18c:	bf18      	it	ne
 801b18e:	236a      	movne	r3, #106	; 0x6a
 801b190:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801b548 <_strtod_l+0x978>
 801b194:	9304      	str	r3, [sp, #16]
 801b196:	4650      	mov	r0, sl
 801b198:	4659      	mov	r1, fp
 801b19a:	2300      	movs	r3, #0
 801b19c:	f018 0f01 	tst.w	r8, #1
 801b1a0:	d004      	beq.n	801b1ac <_strtod_l+0x5dc>
 801b1a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b1a6:	f7e5 fa37 	bl	8000618 <__aeabi_dmul>
 801b1aa:	2301      	movs	r3, #1
 801b1ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 801b1b0:	f109 0908 	add.w	r9, r9, #8
 801b1b4:	d1f2      	bne.n	801b19c <_strtod_l+0x5cc>
 801b1b6:	b10b      	cbz	r3, 801b1bc <_strtod_l+0x5ec>
 801b1b8:	4682      	mov	sl, r0
 801b1ba:	468b      	mov	fp, r1
 801b1bc:	9b04      	ldr	r3, [sp, #16]
 801b1be:	b1bb      	cbz	r3, 801b1f0 <_strtod_l+0x620>
 801b1c0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801b1c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	4659      	mov	r1, fp
 801b1cc:	dd10      	ble.n	801b1f0 <_strtod_l+0x620>
 801b1ce:	2b1f      	cmp	r3, #31
 801b1d0:	f340 8128 	ble.w	801b424 <_strtod_l+0x854>
 801b1d4:	2b34      	cmp	r3, #52	; 0x34
 801b1d6:	bfde      	ittt	le
 801b1d8:	3b20      	suble	r3, #32
 801b1da:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 801b1de:	fa02 f303 	lslle.w	r3, r2, r3
 801b1e2:	f04f 0a00 	mov.w	sl, #0
 801b1e6:	bfcc      	ite	gt
 801b1e8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801b1ec:	ea03 0b01 	andle.w	fp, r3, r1
 801b1f0:	2200      	movs	r2, #0
 801b1f2:	2300      	movs	r3, #0
 801b1f4:	4650      	mov	r0, sl
 801b1f6:	4659      	mov	r1, fp
 801b1f8:	f7e5 fc76 	bl	8000ae8 <__aeabi_dcmpeq>
 801b1fc:	2800      	cmp	r0, #0
 801b1fe:	d1a4      	bne.n	801b14a <_strtod_l+0x57a>
 801b200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b202:	9300      	str	r3, [sp, #0]
 801b204:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b206:	462b      	mov	r3, r5
 801b208:	463a      	mov	r2, r7
 801b20a:	4620      	mov	r0, r4
 801b20c:	f001 fbbc 	bl	801c988 <__s2b>
 801b210:	9009      	str	r0, [sp, #36]	; 0x24
 801b212:	2800      	cmp	r0, #0
 801b214:	f43f af24 	beq.w	801b060 <_strtod_l+0x490>
 801b218:	9b07      	ldr	r3, [sp, #28]
 801b21a:	1b9e      	subs	r6, r3, r6
 801b21c:	9b08      	ldr	r3, [sp, #32]
 801b21e:	2b00      	cmp	r3, #0
 801b220:	bfb4      	ite	lt
 801b222:	4633      	movlt	r3, r6
 801b224:	2300      	movge	r3, #0
 801b226:	9310      	str	r3, [sp, #64]	; 0x40
 801b228:	9b08      	ldr	r3, [sp, #32]
 801b22a:	2500      	movs	r5, #0
 801b22c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b230:	9318      	str	r3, [sp, #96]	; 0x60
 801b232:	462e      	mov	r6, r5
 801b234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b236:	4620      	mov	r0, r4
 801b238:	6859      	ldr	r1, [r3, #4]
 801b23a:	f001 faf9 	bl	801c830 <_Balloc>
 801b23e:	9007      	str	r0, [sp, #28]
 801b240:	2800      	cmp	r0, #0
 801b242:	f43f af11 	beq.w	801b068 <_strtod_l+0x498>
 801b246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b248:	691a      	ldr	r2, [r3, #16]
 801b24a:	3202      	adds	r2, #2
 801b24c:	f103 010c 	add.w	r1, r3, #12
 801b250:	0092      	lsls	r2, r2, #2
 801b252:	300c      	adds	r0, #12
 801b254:	f7fe fff2 	bl	801a23c <memcpy>
 801b258:	ec4b ab10 	vmov	d0, sl, fp
 801b25c:	aa20      	add	r2, sp, #128	; 0x80
 801b25e:	a91f      	add	r1, sp, #124	; 0x7c
 801b260:	4620      	mov	r0, r4
 801b262:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801b266:	f001 fecb 	bl	801d000 <__d2b>
 801b26a:	901e      	str	r0, [sp, #120]	; 0x78
 801b26c:	2800      	cmp	r0, #0
 801b26e:	f43f aefb 	beq.w	801b068 <_strtod_l+0x498>
 801b272:	2101      	movs	r1, #1
 801b274:	4620      	mov	r0, r4
 801b276:	f001 fc21 	bl	801cabc <__i2b>
 801b27a:	4606      	mov	r6, r0
 801b27c:	2800      	cmp	r0, #0
 801b27e:	f43f aef3 	beq.w	801b068 <_strtod_l+0x498>
 801b282:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b284:	9904      	ldr	r1, [sp, #16]
 801b286:	2b00      	cmp	r3, #0
 801b288:	bfab      	itete	ge
 801b28a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801b28c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801b28e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801b290:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801b294:	bfac      	ite	ge
 801b296:	eb03 0902 	addge.w	r9, r3, r2
 801b29a:	1ad7      	sublt	r7, r2, r3
 801b29c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b29e:	eba3 0801 	sub.w	r8, r3, r1
 801b2a2:	4490      	add	r8, r2
 801b2a4:	4ba3      	ldr	r3, [pc, #652]	; (801b534 <_strtod_l+0x964>)
 801b2a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801b2aa:	4598      	cmp	r8, r3
 801b2ac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b2b0:	f280 80cc 	bge.w	801b44c <_strtod_l+0x87c>
 801b2b4:	eba3 0308 	sub.w	r3, r3, r8
 801b2b8:	2b1f      	cmp	r3, #31
 801b2ba:	eba2 0203 	sub.w	r2, r2, r3
 801b2be:	f04f 0101 	mov.w	r1, #1
 801b2c2:	f300 80b6 	bgt.w	801b432 <_strtod_l+0x862>
 801b2c6:	fa01 f303 	lsl.w	r3, r1, r3
 801b2ca:	9311      	str	r3, [sp, #68]	; 0x44
 801b2cc:	2300      	movs	r3, #0
 801b2ce:	930c      	str	r3, [sp, #48]	; 0x30
 801b2d0:	eb09 0802 	add.w	r8, r9, r2
 801b2d4:	9b04      	ldr	r3, [sp, #16]
 801b2d6:	45c1      	cmp	r9, r8
 801b2d8:	4417      	add	r7, r2
 801b2da:	441f      	add	r7, r3
 801b2dc:	464b      	mov	r3, r9
 801b2de:	bfa8      	it	ge
 801b2e0:	4643      	movge	r3, r8
 801b2e2:	42bb      	cmp	r3, r7
 801b2e4:	bfa8      	it	ge
 801b2e6:	463b      	movge	r3, r7
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	bfc2      	ittt	gt
 801b2ec:	eba8 0803 	subgt.w	r8, r8, r3
 801b2f0:	1aff      	subgt	r7, r7, r3
 801b2f2:	eba9 0903 	subgt.w	r9, r9, r3
 801b2f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	dd17      	ble.n	801b32c <_strtod_l+0x75c>
 801b2fc:	4631      	mov	r1, r6
 801b2fe:	461a      	mov	r2, r3
 801b300:	4620      	mov	r0, r4
 801b302:	f001 fc97 	bl	801cc34 <__pow5mult>
 801b306:	4606      	mov	r6, r0
 801b308:	2800      	cmp	r0, #0
 801b30a:	f43f aead 	beq.w	801b068 <_strtod_l+0x498>
 801b30e:	4601      	mov	r1, r0
 801b310:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b312:	4620      	mov	r0, r4
 801b314:	f001 fbe8 	bl	801cae8 <__multiply>
 801b318:	900f      	str	r0, [sp, #60]	; 0x3c
 801b31a:	2800      	cmp	r0, #0
 801b31c:	f43f aea4 	beq.w	801b068 <_strtod_l+0x498>
 801b320:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b322:	4620      	mov	r0, r4
 801b324:	f001 fac4 	bl	801c8b0 <_Bfree>
 801b328:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b32a:	931e      	str	r3, [sp, #120]	; 0x78
 801b32c:	f1b8 0f00 	cmp.w	r8, #0
 801b330:	f300 8091 	bgt.w	801b456 <_strtod_l+0x886>
 801b334:	9b08      	ldr	r3, [sp, #32]
 801b336:	2b00      	cmp	r3, #0
 801b338:	dd08      	ble.n	801b34c <_strtod_l+0x77c>
 801b33a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b33c:	9907      	ldr	r1, [sp, #28]
 801b33e:	4620      	mov	r0, r4
 801b340:	f001 fc78 	bl	801cc34 <__pow5mult>
 801b344:	9007      	str	r0, [sp, #28]
 801b346:	2800      	cmp	r0, #0
 801b348:	f43f ae8e 	beq.w	801b068 <_strtod_l+0x498>
 801b34c:	2f00      	cmp	r7, #0
 801b34e:	dd08      	ble.n	801b362 <_strtod_l+0x792>
 801b350:	9907      	ldr	r1, [sp, #28]
 801b352:	463a      	mov	r2, r7
 801b354:	4620      	mov	r0, r4
 801b356:	f001 fcc7 	bl	801cce8 <__lshift>
 801b35a:	9007      	str	r0, [sp, #28]
 801b35c:	2800      	cmp	r0, #0
 801b35e:	f43f ae83 	beq.w	801b068 <_strtod_l+0x498>
 801b362:	f1b9 0f00 	cmp.w	r9, #0
 801b366:	dd08      	ble.n	801b37a <_strtod_l+0x7aa>
 801b368:	4631      	mov	r1, r6
 801b36a:	464a      	mov	r2, r9
 801b36c:	4620      	mov	r0, r4
 801b36e:	f001 fcbb 	bl	801cce8 <__lshift>
 801b372:	4606      	mov	r6, r0
 801b374:	2800      	cmp	r0, #0
 801b376:	f43f ae77 	beq.w	801b068 <_strtod_l+0x498>
 801b37a:	9a07      	ldr	r2, [sp, #28]
 801b37c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b37e:	4620      	mov	r0, r4
 801b380:	f001 fd3a 	bl	801cdf8 <__mdiff>
 801b384:	4605      	mov	r5, r0
 801b386:	2800      	cmp	r0, #0
 801b388:	f43f ae6e 	beq.w	801b068 <_strtod_l+0x498>
 801b38c:	68c3      	ldr	r3, [r0, #12]
 801b38e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b390:	2300      	movs	r3, #0
 801b392:	60c3      	str	r3, [r0, #12]
 801b394:	4631      	mov	r1, r6
 801b396:	f001 fd13 	bl	801cdc0 <__mcmp>
 801b39a:	2800      	cmp	r0, #0
 801b39c:	da65      	bge.n	801b46a <_strtod_l+0x89a>
 801b39e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b3a0:	ea53 030a 	orrs.w	r3, r3, sl
 801b3a4:	f040 8087 	bne.w	801b4b6 <_strtod_l+0x8e6>
 801b3a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	f040 8082 	bne.w	801b4b6 <_strtod_l+0x8e6>
 801b3b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b3b6:	0d1b      	lsrs	r3, r3, #20
 801b3b8:	051b      	lsls	r3, r3, #20
 801b3ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801b3be:	d97a      	bls.n	801b4b6 <_strtod_l+0x8e6>
 801b3c0:	696b      	ldr	r3, [r5, #20]
 801b3c2:	b913      	cbnz	r3, 801b3ca <_strtod_l+0x7fa>
 801b3c4:	692b      	ldr	r3, [r5, #16]
 801b3c6:	2b01      	cmp	r3, #1
 801b3c8:	dd75      	ble.n	801b4b6 <_strtod_l+0x8e6>
 801b3ca:	4629      	mov	r1, r5
 801b3cc:	2201      	movs	r2, #1
 801b3ce:	4620      	mov	r0, r4
 801b3d0:	f001 fc8a 	bl	801cce8 <__lshift>
 801b3d4:	4631      	mov	r1, r6
 801b3d6:	4605      	mov	r5, r0
 801b3d8:	f001 fcf2 	bl	801cdc0 <__mcmp>
 801b3dc:	2800      	cmp	r0, #0
 801b3de:	dd6a      	ble.n	801b4b6 <_strtod_l+0x8e6>
 801b3e0:	9904      	ldr	r1, [sp, #16]
 801b3e2:	4a55      	ldr	r2, [pc, #340]	; (801b538 <_strtod_l+0x968>)
 801b3e4:	465b      	mov	r3, fp
 801b3e6:	2900      	cmp	r1, #0
 801b3e8:	f000 8085 	beq.w	801b4f6 <_strtod_l+0x926>
 801b3ec:	ea02 010b 	and.w	r1, r2, fp
 801b3f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801b3f4:	dc7f      	bgt.n	801b4f6 <_strtod_l+0x926>
 801b3f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801b3fa:	f77f aeaa 	ble.w	801b152 <_strtod_l+0x582>
 801b3fe:	4a4f      	ldr	r2, [pc, #316]	; (801b53c <_strtod_l+0x96c>)
 801b400:	2300      	movs	r3, #0
 801b402:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801b406:	4650      	mov	r0, sl
 801b408:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801b40c:	4659      	mov	r1, fp
 801b40e:	f7e5 f903 	bl	8000618 <__aeabi_dmul>
 801b412:	460b      	mov	r3, r1
 801b414:	4303      	orrs	r3, r0
 801b416:	bf08      	it	eq
 801b418:	2322      	moveq	r3, #34	; 0x22
 801b41a:	4682      	mov	sl, r0
 801b41c:	468b      	mov	fp, r1
 801b41e:	bf08      	it	eq
 801b420:	6023      	streq	r3, [r4, #0]
 801b422:	e62b      	b.n	801b07c <_strtod_l+0x4ac>
 801b424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b428:	fa02 f303 	lsl.w	r3, r2, r3
 801b42c:	ea03 0a0a 	and.w	sl, r3, sl
 801b430:	e6de      	b.n	801b1f0 <_strtod_l+0x620>
 801b432:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801b436:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801b43a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801b43e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801b442:	fa01 f308 	lsl.w	r3, r1, r8
 801b446:	930c      	str	r3, [sp, #48]	; 0x30
 801b448:	9111      	str	r1, [sp, #68]	; 0x44
 801b44a:	e741      	b.n	801b2d0 <_strtod_l+0x700>
 801b44c:	2300      	movs	r3, #0
 801b44e:	930c      	str	r3, [sp, #48]	; 0x30
 801b450:	2301      	movs	r3, #1
 801b452:	9311      	str	r3, [sp, #68]	; 0x44
 801b454:	e73c      	b.n	801b2d0 <_strtod_l+0x700>
 801b456:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b458:	4642      	mov	r2, r8
 801b45a:	4620      	mov	r0, r4
 801b45c:	f001 fc44 	bl	801cce8 <__lshift>
 801b460:	901e      	str	r0, [sp, #120]	; 0x78
 801b462:	2800      	cmp	r0, #0
 801b464:	f47f af66 	bne.w	801b334 <_strtod_l+0x764>
 801b468:	e5fe      	b.n	801b068 <_strtod_l+0x498>
 801b46a:	465f      	mov	r7, fp
 801b46c:	d16e      	bne.n	801b54c <_strtod_l+0x97c>
 801b46e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b470:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b474:	b342      	cbz	r2, 801b4c8 <_strtod_l+0x8f8>
 801b476:	4a32      	ldr	r2, [pc, #200]	; (801b540 <_strtod_l+0x970>)
 801b478:	4293      	cmp	r3, r2
 801b47a:	d128      	bne.n	801b4ce <_strtod_l+0x8fe>
 801b47c:	9b04      	ldr	r3, [sp, #16]
 801b47e:	4650      	mov	r0, sl
 801b480:	b1eb      	cbz	r3, 801b4be <_strtod_l+0x8ee>
 801b482:	4a2d      	ldr	r2, [pc, #180]	; (801b538 <_strtod_l+0x968>)
 801b484:	403a      	ands	r2, r7
 801b486:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801b48a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b48e:	d819      	bhi.n	801b4c4 <_strtod_l+0x8f4>
 801b490:	0d12      	lsrs	r2, r2, #20
 801b492:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801b496:	fa01 f303 	lsl.w	r3, r1, r3
 801b49a:	4298      	cmp	r0, r3
 801b49c:	d117      	bne.n	801b4ce <_strtod_l+0x8fe>
 801b49e:	4b29      	ldr	r3, [pc, #164]	; (801b544 <_strtod_l+0x974>)
 801b4a0:	429f      	cmp	r7, r3
 801b4a2:	d102      	bne.n	801b4aa <_strtod_l+0x8da>
 801b4a4:	3001      	adds	r0, #1
 801b4a6:	f43f addf 	beq.w	801b068 <_strtod_l+0x498>
 801b4aa:	4b23      	ldr	r3, [pc, #140]	; (801b538 <_strtod_l+0x968>)
 801b4ac:	403b      	ands	r3, r7
 801b4ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801b4b2:	f04f 0a00 	mov.w	sl, #0
 801b4b6:	9b04      	ldr	r3, [sp, #16]
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	d1a0      	bne.n	801b3fe <_strtod_l+0x82e>
 801b4bc:	e5de      	b.n	801b07c <_strtod_l+0x4ac>
 801b4be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b4c2:	e7ea      	b.n	801b49a <_strtod_l+0x8ca>
 801b4c4:	460b      	mov	r3, r1
 801b4c6:	e7e8      	b.n	801b49a <_strtod_l+0x8ca>
 801b4c8:	ea53 030a 	orrs.w	r3, r3, sl
 801b4cc:	d088      	beq.n	801b3e0 <_strtod_l+0x810>
 801b4ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b4d0:	b1db      	cbz	r3, 801b50a <_strtod_l+0x93a>
 801b4d2:	423b      	tst	r3, r7
 801b4d4:	d0ef      	beq.n	801b4b6 <_strtod_l+0x8e6>
 801b4d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b4d8:	9a04      	ldr	r2, [sp, #16]
 801b4da:	4650      	mov	r0, sl
 801b4dc:	4659      	mov	r1, fp
 801b4de:	b1c3      	cbz	r3, 801b512 <_strtod_l+0x942>
 801b4e0:	f7ff fb5a 	bl	801ab98 <sulp>
 801b4e4:	4602      	mov	r2, r0
 801b4e6:	460b      	mov	r3, r1
 801b4e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b4ec:	f7e4 fede 	bl	80002ac <__adddf3>
 801b4f0:	4682      	mov	sl, r0
 801b4f2:	468b      	mov	fp, r1
 801b4f4:	e7df      	b.n	801b4b6 <_strtod_l+0x8e6>
 801b4f6:	4013      	ands	r3, r2
 801b4f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b4fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801b500:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801b504:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b508:	e7d5      	b.n	801b4b6 <_strtod_l+0x8e6>
 801b50a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b50c:	ea13 0f0a 	tst.w	r3, sl
 801b510:	e7e0      	b.n	801b4d4 <_strtod_l+0x904>
 801b512:	f7ff fb41 	bl	801ab98 <sulp>
 801b516:	4602      	mov	r2, r0
 801b518:	460b      	mov	r3, r1
 801b51a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b51e:	f7e4 fec3 	bl	80002a8 <__aeabi_dsub>
 801b522:	2200      	movs	r2, #0
 801b524:	2300      	movs	r3, #0
 801b526:	4682      	mov	sl, r0
 801b528:	468b      	mov	fp, r1
 801b52a:	f7e5 fadd 	bl	8000ae8 <__aeabi_dcmpeq>
 801b52e:	2800      	cmp	r0, #0
 801b530:	d0c1      	beq.n	801b4b6 <_strtod_l+0x8e6>
 801b532:	e60e      	b.n	801b152 <_strtod_l+0x582>
 801b534:	fffffc02 	.word	0xfffffc02
 801b538:	7ff00000 	.word	0x7ff00000
 801b53c:	39500000 	.word	0x39500000
 801b540:	000fffff 	.word	0x000fffff
 801b544:	7fefffff 	.word	0x7fefffff
 801b548:	080202c8 	.word	0x080202c8
 801b54c:	4631      	mov	r1, r6
 801b54e:	4628      	mov	r0, r5
 801b550:	f001 fdb2 	bl	801d0b8 <__ratio>
 801b554:	ec59 8b10 	vmov	r8, r9, d0
 801b558:	ee10 0a10 	vmov	r0, s0
 801b55c:	2200      	movs	r2, #0
 801b55e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b562:	4649      	mov	r1, r9
 801b564:	f7e5 fad4 	bl	8000b10 <__aeabi_dcmple>
 801b568:	2800      	cmp	r0, #0
 801b56a:	d07c      	beq.n	801b666 <_strtod_l+0xa96>
 801b56c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d04c      	beq.n	801b60c <_strtod_l+0xa3c>
 801b572:	4b95      	ldr	r3, [pc, #596]	; (801b7c8 <_strtod_l+0xbf8>)
 801b574:	2200      	movs	r2, #0
 801b576:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b57a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b7c8 <_strtod_l+0xbf8>
 801b57e:	f04f 0800 	mov.w	r8, #0
 801b582:	4b92      	ldr	r3, [pc, #584]	; (801b7cc <_strtod_l+0xbfc>)
 801b584:	403b      	ands	r3, r7
 801b586:	9311      	str	r3, [sp, #68]	; 0x44
 801b588:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b58a:	4b91      	ldr	r3, [pc, #580]	; (801b7d0 <_strtod_l+0xc00>)
 801b58c:	429a      	cmp	r2, r3
 801b58e:	f040 80b2 	bne.w	801b6f6 <_strtod_l+0xb26>
 801b592:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b596:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b59a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b59e:	ec4b ab10 	vmov	d0, sl, fp
 801b5a2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801b5a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b5aa:	f001 fcad 	bl	801cf08 <__ulp>
 801b5ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b5b2:	ec53 2b10 	vmov	r2, r3, d0
 801b5b6:	f7e5 f82f 	bl	8000618 <__aeabi_dmul>
 801b5ba:	4652      	mov	r2, sl
 801b5bc:	465b      	mov	r3, fp
 801b5be:	f7e4 fe75 	bl	80002ac <__adddf3>
 801b5c2:	460b      	mov	r3, r1
 801b5c4:	4981      	ldr	r1, [pc, #516]	; (801b7cc <_strtod_l+0xbfc>)
 801b5c6:	4a83      	ldr	r2, [pc, #524]	; (801b7d4 <_strtod_l+0xc04>)
 801b5c8:	4019      	ands	r1, r3
 801b5ca:	4291      	cmp	r1, r2
 801b5cc:	4682      	mov	sl, r0
 801b5ce:	d95e      	bls.n	801b68e <_strtod_l+0xabe>
 801b5d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b5d2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b5d6:	4293      	cmp	r3, r2
 801b5d8:	d103      	bne.n	801b5e2 <_strtod_l+0xa12>
 801b5da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b5dc:	3301      	adds	r3, #1
 801b5de:	f43f ad43 	beq.w	801b068 <_strtod_l+0x498>
 801b5e2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801b7e0 <_strtod_l+0xc10>
 801b5e6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b5ea:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b5ec:	4620      	mov	r0, r4
 801b5ee:	f001 f95f 	bl	801c8b0 <_Bfree>
 801b5f2:	9907      	ldr	r1, [sp, #28]
 801b5f4:	4620      	mov	r0, r4
 801b5f6:	f001 f95b 	bl	801c8b0 <_Bfree>
 801b5fa:	4631      	mov	r1, r6
 801b5fc:	4620      	mov	r0, r4
 801b5fe:	f001 f957 	bl	801c8b0 <_Bfree>
 801b602:	4629      	mov	r1, r5
 801b604:	4620      	mov	r0, r4
 801b606:	f001 f953 	bl	801c8b0 <_Bfree>
 801b60a:	e613      	b.n	801b234 <_strtod_l+0x664>
 801b60c:	f1ba 0f00 	cmp.w	sl, #0
 801b610:	d11b      	bne.n	801b64a <_strtod_l+0xa7a>
 801b612:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b616:	b9f3      	cbnz	r3, 801b656 <_strtod_l+0xa86>
 801b618:	4b6b      	ldr	r3, [pc, #428]	; (801b7c8 <_strtod_l+0xbf8>)
 801b61a:	2200      	movs	r2, #0
 801b61c:	4640      	mov	r0, r8
 801b61e:	4649      	mov	r1, r9
 801b620:	f7e5 fa6c 	bl	8000afc <__aeabi_dcmplt>
 801b624:	b9d0      	cbnz	r0, 801b65c <_strtod_l+0xa8c>
 801b626:	4640      	mov	r0, r8
 801b628:	4649      	mov	r1, r9
 801b62a:	4b6b      	ldr	r3, [pc, #428]	; (801b7d8 <_strtod_l+0xc08>)
 801b62c:	2200      	movs	r2, #0
 801b62e:	f7e4 fff3 	bl	8000618 <__aeabi_dmul>
 801b632:	4680      	mov	r8, r0
 801b634:	4689      	mov	r9, r1
 801b636:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b63a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801b63e:	931b      	str	r3, [sp, #108]	; 0x6c
 801b640:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801b644:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b648:	e79b      	b.n	801b582 <_strtod_l+0x9b2>
 801b64a:	f1ba 0f01 	cmp.w	sl, #1
 801b64e:	d102      	bne.n	801b656 <_strtod_l+0xa86>
 801b650:	2f00      	cmp	r7, #0
 801b652:	f43f ad7e 	beq.w	801b152 <_strtod_l+0x582>
 801b656:	4b61      	ldr	r3, [pc, #388]	; (801b7dc <_strtod_l+0xc0c>)
 801b658:	2200      	movs	r2, #0
 801b65a:	e78c      	b.n	801b576 <_strtod_l+0x9a6>
 801b65c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801b7d8 <_strtod_l+0xc08>
 801b660:	f04f 0800 	mov.w	r8, #0
 801b664:	e7e7      	b.n	801b636 <_strtod_l+0xa66>
 801b666:	4b5c      	ldr	r3, [pc, #368]	; (801b7d8 <_strtod_l+0xc08>)
 801b668:	4640      	mov	r0, r8
 801b66a:	4649      	mov	r1, r9
 801b66c:	2200      	movs	r2, #0
 801b66e:	f7e4 ffd3 	bl	8000618 <__aeabi_dmul>
 801b672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b674:	4680      	mov	r8, r0
 801b676:	4689      	mov	r9, r1
 801b678:	b933      	cbnz	r3, 801b688 <_strtod_l+0xab8>
 801b67a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b67e:	9012      	str	r0, [sp, #72]	; 0x48
 801b680:	9313      	str	r3, [sp, #76]	; 0x4c
 801b682:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801b686:	e7dd      	b.n	801b644 <_strtod_l+0xa74>
 801b688:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801b68c:	e7f9      	b.n	801b682 <_strtod_l+0xab2>
 801b68e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b692:	9b04      	ldr	r3, [sp, #16]
 801b694:	2b00      	cmp	r3, #0
 801b696:	d1a8      	bne.n	801b5ea <_strtod_l+0xa1a>
 801b698:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b69c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b69e:	0d1b      	lsrs	r3, r3, #20
 801b6a0:	051b      	lsls	r3, r3, #20
 801b6a2:	429a      	cmp	r2, r3
 801b6a4:	d1a1      	bne.n	801b5ea <_strtod_l+0xa1a>
 801b6a6:	4640      	mov	r0, r8
 801b6a8:	4649      	mov	r1, r9
 801b6aa:	f7e5 fb65 	bl	8000d78 <__aeabi_d2lz>
 801b6ae:	f7e4 ff85 	bl	80005bc <__aeabi_l2d>
 801b6b2:	4602      	mov	r2, r0
 801b6b4:	460b      	mov	r3, r1
 801b6b6:	4640      	mov	r0, r8
 801b6b8:	4649      	mov	r1, r9
 801b6ba:	f7e4 fdf5 	bl	80002a8 <__aeabi_dsub>
 801b6be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b6c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b6c4:	ea43 030a 	orr.w	r3, r3, sl
 801b6c8:	4313      	orrs	r3, r2
 801b6ca:	4680      	mov	r8, r0
 801b6cc:	4689      	mov	r9, r1
 801b6ce:	d053      	beq.n	801b778 <_strtod_l+0xba8>
 801b6d0:	a335      	add	r3, pc, #212	; (adr r3, 801b7a8 <_strtod_l+0xbd8>)
 801b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6d6:	f7e5 fa11 	bl	8000afc <__aeabi_dcmplt>
 801b6da:	2800      	cmp	r0, #0
 801b6dc:	f47f acce 	bne.w	801b07c <_strtod_l+0x4ac>
 801b6e0:	a333      	add	r3, pc, #204	; (adr r3, 801b7b0 <_strtod_l+0xbe0>)
 801b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6e6:	4640      	mov	r0, r8
 801b6e8:	4649      	mov	r1, r9
 801b6ea:	f7e5 fa25 	bl	8000b38 <__aeabi_dcmpgt>
 801b6ee:	2800      	cmp	r0, #0
 801b6f0:	f43f af7b 	beq.w	801b5ea <_strtod_l+0xa1a>
 801b6f4:	e4c2      	b.n	801b07c <_strtod_l+0x4ac>
 801b6f6:	9b04      	ldr	r3, [sp, #16]
 801b6f8:	b333      	cbz	r3, 801b748 <_strtod_l+0xb78>
 801b6fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b6fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b700:	d822      	bhi.n	801b748 <_strtod_l+0xb78>
 801b702:	a32d      	add	r3, pc, #180	; (adr r3, 801b7b8 <_strtod_l+0xbe8>)
 801b704:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b708:	4640      	mov	r0, r8
 801b70a:	4649      	mov	r1, r9
 801b70c:	f7e5 fa00 	bl	8000b10 <__aeabi_dcmple>
 801b710:	b1a0      	cbz	r0, 801b73c <_strtod_l+0xb6c>
 801b712:	4649      	mov	r1, r9
 801b714:	4640      	mov	r0, r8
 801b716:	f7e5 fa57 	bl	8000bc8 <__aeabi_d2uiz>
 801b71a:	2801      	cmp	r0, #1
 801b71c:	bf38      	it	cc
 801b71e:	2001      	movcc	r0, #1
 801b720:	f7e4 ff00 	bl	8000524 <__aeabi_ui2d>
 801b724:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b726:	4680      	mov	r8, r0
 801b728:	4689      	mov	r9, r1
 801b72a:	bb13      	cbnz	r3, 801b772 <_strtod_l+0xba2>
 801b72c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b730:	9014      	str	r0, [sp, #80]	; 0x50
 801b732:	9315      	str	r3, [sp, #84]	; 0x54
 801b734:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b738:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b73c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b73e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b740:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b744:	1a9b      	subs	r3, r3, r2
 801b746:	930d      	str	r3, [sp, #52]	; 0x34
 801b748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b74c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801b750:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b754:	f001 fbd8 	bl	801cf08 <__ulp>
 801b758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b75c:	ec53 2b10 	vmov	r2, r3, d0
 801b760:	f7e4 ff5a 	bl	8000618 <__aeabi_dmul>
 801b764:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b768:	f7e4 fda0 	bl	80002ac <__adddf3>
 801b76c:	4682      	mov	sl, r0
 801b76e:	468b      	mov	fp, r1
 801b770:	e78f      	b.n	801b692 <_strtod_l+0xac2>
 801b772:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801b776:	e7dd      	b.n	801b734 <_strtod_l+0xb64>
 801b778:	a311      	add	r3, pc, #68	; (adr r3, 801b7c0 <_strtod_l+0xbf0>)
 801b77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b77e:	f7e5 f9bd 	bl	8000afc <__aeabi_dcmplt>
 801b782:	e7b4      	b.n	801b6ee <_strtod_l+0xb1e>
 801b784:	2300      	movs	r3, #0
 801b786:	930e      	str	r3, [sp, #56]	; 0x38
 801b788:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b78a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b78c:	6013      	str	r3, [r2, #0]
 801b78e:	f7ff ba65 	b.w	801ac5c <_strtod_l+0x8c>
 801b792:	2b65      	cmp	r3, #101	; 0x65
 801b794:	f43f ab5d 	beq.w	801ae52 <_strtod_l+0x282>
 801b798:	2b45      	cmp	r3, #69	; 0x45
 801b79a:	f43f ab5a 	beq.w	801ae52 <_strtod_l+0x282>
 801b79e:	2201      	movs	r2, #1
 801b7a0:	f7ff bb92 	b.w	801aec8 <_strtod_l+0x2f8>
 801b7a4:	f3af 8000 	nop.w
 801b7a8:	94a03595 	.word	0x94a03595
 801b7ac:	3fdfffff 	.word	0x3fdfffff
 801b7b0:	35afe535 	.word	0x35afe535
 801b7b4:	3fe00000 	.word	0x3fe00000
 801b7b8:	ffc00000 	.word	0xffc00000
 801b7bc:	41dfffff 	.word	0x41dfffff
 801b7c0:	94a03595 	.word	0x94a03595
 801b7c4:	3fcfffff 	.word	0x3fcfffff
 801b7c8:	3ff00000 	.word	0x3ff00000
 801b7cc:	7ff00000 	.word	0x7ff00000
 801b7d0:	7fe00000 	.word	0x7fe00000
 801b7d4:	7c9fffff 	.word	0x7c9fffff
 801b7d8:	3fe00000 	.word	0x3fe00000
 801b7dc:	bff00000 	.word	0xbff00000
 801b7e0:	7fefffff 	.word	0x7fefffff

0801b7e4 <_strtod_r>:
 801b7e4:	4b01      	ldr	r3, [pc, #4]	; (801b7ec <_strtod_r+0x8>)
 801b7e6:	f7ff b9f3 	b.w	801abd0 <_strtod_l>
 801b7ea:	bf00      	nop
 801b7ec:	20000220 	.word	0x20000220

0801b7f0 <_strtol_l.isra.0>:
 801b7f0:	2b01      	cmp	r3, #1
 801b7f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b7f6:	d001      	beq.n	801b7fc <_strtol_l.isra.0+0xc>
 801b7f8:	2b24      	cmp	r3, #36	; 0x24
 801b7fa:	d906      	bls.n	801b80a <_strtol_l.isra.0+0x1a>
 801b7fc:	f7fe fc2c 	bl	801a058 <__errno>
 801b800:	2316      	movs	r3, #22
 801b802:	6003      	str	r3, [r0, #0]
 801b804:	2000      	movs	r0, #0
 801b806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b80a:	4f3a      	ldr	r7, [pc, #232]	; (801b8f4 <_strtol_l.isra.0+0x104>)
 801b80c:	468e      	mov	lr, r1
 801b80e:	4676      	mov	r6, lr
 801b810:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b814:	5de5      	ldrb	r5, [r4, r7]
 801b816:	f015 0508 	ands.w	r5, r5, #8
 801b81a:	d1f8      	bne.n	801b80e <_strtol_l.isra.0+0x1e>
 801b81c:	2c2d      	cmp	r4, #45	; 0x2d
 801b81e:	d134      	bne.n	801b88a <_strtol_l.isra.0+0x9a>
 801b820:	f89e 4000 	ldrb.w	r4, [lr]
 801b824:	f04f 0801 	mov.w	r8, #1
 801b828:	f106 0e02 	add.w	lr, r6, #2
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d05c      	beq.n	801b8ea <_strtol_l.isra.0+0xfa>
 801b830:	2b10      	cmp	r3, #16
 801b832:	d10c      	bne.n	801b84e <_strtol_l.isra.0+0x5e>
 801b834:	2c30      	cmp	r4, #48	; 0x30
 801b836:	d10a      	bne.n	801b84e <_strtol_l.isra.0+0x5e>
 801b838:	f89e 4000 	ldrb.w	r4, [lr]
 801b83c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b840:	2c58      	cmp	r4, #88	; 0x58
 801b842:	d14d      	bne.n	801b8e0 <_strtol_l.isra.0+0xf0>
 801b844:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801b848:	2310      	movs	r3, #16
 801b84a:	f10e 0e02 	add.w	lr, lr, #2
 801b84e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801b852:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801b856:	2600      	movs	r6, #0
 801b858:	fbbc f9f3 	udiv	r9, ip, r3
 801b85c:	4635      	mov	r5, r6
 801b85e:	fb03 ca19 	mls	sl, r3, r9, ip
 801b862:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801b866:	2f09      	cmp	r7, #9
 801b868:	d818      	bhi.n	801b89c <_strtol_l.isra.0+0xac>
 801b86a:	463c      	mov	r4, r7
 801b86c:	42a3      	cmp	r3, r4
 801b86e:	dd24      	ble.n	801b8ba <_strtol_l.isra.0+0xca>
 801b870:	2e00      	cmp	r6, #0
 801b872:	db1f      	blt.n	801b8b4 <_strtol_l.isra.0+0xc4>
 801b874:	45a9      	cmp	r9, r5
 801b876:	d31d      	bcc.n	801b8b4 <_strtol_l.isra.0+0xc4>
 801b878:	d101      	bne.n	801b87e <_strtol_l.isra.0+0x8e>
 801b87a:	45a2      	cmp	sl, r4
 801b87c:	db1a      	blt.n	801b8b4 <_strtol_l.isra.0+0xc4>
 801b87e:	fb05 4503 	mla	r5, r5, r3, r4
 801b882:	2601      	movs	r6, #1
 801b884:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b888:	e7eb      	b.n	801b862 <_strtol_l.isra.0+0x72>
 801b88a:	2c2b      	cmp	r4, #43	; 0x2b
 801b88c:	bf08      	it	eq
 801b88e:	f89e 4000 	ldrbeq.w	r4, [lr]
 801b892:	46a8      	mov	r8, r5
 801b894:	bf08      	it	eq
 801b896:	f106 0e02 	addeq.w	lr, r6, #2
 801b89a:	e7c7      	b.n	801b82c <_strtol_l.isra.0+0x3c>
 801b89c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801b8a0:	2f19      	cmp	r7, #25
 801b8a2:	d801      	bhi.n	801b8a8 <_strtol_l.isra.0+0xb8>
 801b8a4:	3c37      	subs	r4, #55	; 0x37
 801b8a6:	e7e1      	b.n	801b86c <_strtol_l.isra.0+0x7c>
 801b8a8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801b8ac:	2f19      	cmp	r7, #25
 801b8ae:	d804      	bhi.n	801b8ba <_strtol_l.isra.0+0xca>
 801b8b0:	3c57      	subs	r4, #87	; 0x57
 801b8b2:	e7db      	b.n	801b86c <_strtol_l.isra.0+0x7c>
 801b8b4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801b8b8:	e7e4      	b.n	801b884 <_strtol_l.isra.0+0x94>
 801b8ba:	2e00      	cmp	r6, #0
 801b8bc:	da05      	bge.n	801b8ca <_strtol_l.isra.0+0xda>
 801b8be:	2322      	movs	r3, #34	; 0x22
 801b8c0:	6003      	str	r3, [r0, #0]
 801b8c2:	4665      	mov	r5, ip
 801b8c4:	b942      	cbnz	r2, 801b8d8 <_strtol_l.isra.0+0xe8>
 801b8c6:	4628      	mov	r0, r5
 801b8c8:	e79d      	b.n	801b806 <_strtol_l.isra.0+0x16>
 801b8ca:	f1b8 0f00 	cmp.w	r8, #0
 801b8ce:	d000      	beq.n	801b8d2 <_strtol_l.isra.0+0xe2>
 801b8d0:	426d      	negs	r5, r5
 801b8d2:	2a00      	cmp	r2, #0
 801b8d4:	d0f7      	beq.n	801b8c6 <_strtol_l.isra.0+0xd6>
 801b8d6:	b10e      	cbz	r6, 801b8dc <_strtol_l.isra.0+0xec>
 801b8d8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801b8dc:	6011      	str	r1, [r2, #0]
 801b8de:	e7f2      	b.n	801b8c6 <_strtol_l.isra.0+0xd6>
 801b8e0:	2430      	movs	r4, #48	; 0x30
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	d1b3      	bne.n	801b84e <_strtol_l.isra.0+0x5e>
 801b8e6:	2308      	movs	r3, #8
 801b8e8:	e7b1      	b.n	801b84e <_strtol_l.isra.0+0x5e>
 801b8ea:	2c30      	cmp	r4, #48	; 0x30
 801b8ec:	d0a4      	beq.n	801b838 <_strtol_l.isra.0+0x48>
 801b8ee:	230a      	movs	r3, #10
 801b8f0:	e7ad      	b.n	801b84e <_strtol_l.isra.0+0x5e>
 801b8f2:	bf00      	nop
 801b8f4:	08020111 	.word	0x08020111

0801b8f8 <_strtol_r>:
 801b8f8:	f7ff bf7a 	b.w	801b7f0 <_strtol_l.isra.0>

0801b8fc <_strtoul_l.isra.0>:
 801b8fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b900:	4e3b      	ldr	r6, [pc, #236]	; (801b9f0 <_strtoul_l.isra.0+0xf4>)
 801b902:	4686      	mov	lr, r0
 801b904:	468c      	mov	ip, r1
 801b906:	4660      	mov	r0, ip
 801b908:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801b90c:	5da5      	ldrb	r5, [r4, r6]
 801b90e:	f015 0508 	ands.w	r5, r5, #8
 801b912:	d1f8      	bne.n	801b906 <_strtoul_l.isra.0+0xa>
 801b914:	2c2d      	cmp	r4, #45	; 0x2d
 801b916:	d134      	bne.n	801b982 <_strtoul_l.isra.0+0x86>
 801b918:	f89c 4000 	ldrb.w	r4, [ip]
 801b91c:	f04f 0801 	mov.w	r8, #1
 801b920:	f100 0c02 	add.w	ip, r0, #2
 801b924:	2b00      	cmp	r3, #0
 801b926:	d05e      	beq.n	801b9e6 <_strtoul_l.isra.0+0xea>
 801b928:	2b10      	cmp	r3, #16
 801b92a:	d10c      	bne.n	801b946 <_strtoul_l.isra.0+0x4a>
 801b92c:	2c30      	cmp	r4, #48	; 0x30
 801b92e:	d10a      	bne.n	801b946 <_strtoul_l.isra.0+0x4a>
 801b930:	f89c 0000 	ldrb.w	r0, [ip]
 801b934:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801b938:	2858      	cmp	r0, #88	; 0x58
 801b93a:	d14f      	bne.n	801b9dc <_strtoul_l.isra.0+0xe0>
 801b93c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801b940:	2310      	movs	r3, #16
 801b942:	f10c 0c02 	add.w	ip, ip, #2
 801b946:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b94a:	2500      	movs	r5, #0
 801b94c:	fbb7 f7f3 	udiv	r7, r7, r3
 801b950:	fb03 f907 	mul.w	r9, r3, r7
 801b954:	ea6f 0909 	mvn.w	r9, r9
 801b958:	4628      	mov	r0, r5
 801b95a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801b95e:	2e09      	cmp	r6, #9
 801b960:	d818      	bhi.n	801b994 <_strtoul_l.isra.0+0x98>
 801b962:	4634      	mov	r4, r6
 801b964:	42a3      	cmp	r3, r4
 801b966:	dd24      	ble.n	801b9b2 <_strtoul_l.isra.0+0xb6>
 801b968:	2d00      	cmp	r5, #0
 801b96a:	db1f      	blt.n	801b9ac <_strtoul_l.isra.0+0xb0>
 801b96c:	4287      	cmp	r7, r0
 801b96e:	d31d      	bcc.n	801b9ac <_strtoul_l.isra.0+0xb0>
 801b970:	d101      	bne.n	801b976 <_strtoul_l.isra.0+0x7a>
 801b972:	45a1      	cmp	r9, r4
 801b974:	db1a      	blt.n	801b9ac <_strtoul_l.isra.0+0xb0>
 801b976:	fb00 4003 	mla	r0, r0, r3, r4
 801b97a:	2501      	movs	r5, #1
 801b97c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801b980:	e7eb      	b.n	801b95a <_strtoul_l.isra.0+0x5e>
 801b982:	2c2b      	cmp	r4, #43	; 0x2b
 801b984:	bf08      	it	eq
 801b986:	f89c 4000 	ldrbeq.w	r4, [ip]
 801b98a:	46a8      	mov	r8, r5
 801b98c:	bf08      	it	eq
 801b98e:	f100 0c02 	addeq.w	ip, r0, #2
 801b992:	e7c7      	b.n	801b924 <_strtoul_l.isra.0+0x28>
 801b994:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801b998:	2e19      	cmp	r6, #25
 801b99a:	d801      	bhi.n	801b9a0 <_strtoul_l.isra.0+0xa4>
 801b99c:	3c37      	subs	r4, #55	; 0x37
 801b99e:	e7e1      	b.n	801b964 <_strtoul_l.isra.0+0x68>
 801b9a0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801b9a4:	2e19      	cmp	r6, #25
 801b9a6:	d804      	bhi.n	801b9b2 <_strtoul_l.isra.0+0xb6>
 801b9a8:	3c57      	subs	r4, #87	; 0x57
 801b9aa:	e7db      	b.n	801b964 <_strtoul_l.isra.0+0x68>
 801b9ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801b9b0:	e7e4      	b.n	801b97c <_strtoul_l.isra.0+0x80>
 801b9b2:	2d00      	cmp	r5, #0
 801b9b4:	da07      	bge.n	801b9c6 <_strtoul_l.isra.0+0xca>
 801b9b6:	2322      	movs	r3, #34	; 0x22
 801b9b8:	f8ce 3000 	str.w	r3, [lr]
 801b9bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b9c0:	b942      	cbnz	r2, 801b9d4 <_strtoul_l.isra.0+0xd8>
 801b9c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b9c6:	f1b8 0f00 	cmp.w	r8, #0
 801b9ca:	d000      	beq.n	801b9ce <_strtoul_l.isra.0+0xd2>
 801b9cc:	4240      	negs	r0, r0
 801b9ce:	2a00      	cmp	r2, #0
 801b9d0:	d0f7      	beq.n	801b9c2 <_strtoul_l.isra.0+0xc6>
 801b9d2:	b10d      	cbz	r5, 801b9d8 <_strtoul_l.isra.0+0xdc>
 801b9d4:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 801b9d8:	6011      	str	r1, [r2, #0]
 801b9da:	e7f2      	b.n	801b9c2 <_strtoul_l.isra.0+0xc6>
 801b9dc:	2430      	movs	r4, #48	; 0x30
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	d1b1      	bne.n	801b946 <_strtoul_l.isra.0+0x4a>
 801b9e2:	2308      	movs	r3, #8
 801b9e4:	e7af      	b.n	801b946 <_strtoul_l.isra.0+0x4a>
 801b9e6:	2c30      	cmp	r4, #48	; 0x30
 801b9e8:	d0a2      	beq.n	801b930 <_strtoul_l.isra.0+0x34>
 801b9ea:	230a      	movs	r3, #10
 801b9ec:	e7ab      	b.n	801b946 <_strtoul_l.isra.0+0x4a>
 801b9ee:	bf00      	nop
 801b9f0:	08020111 	.word	0x08020111

0801b9f4 <_strtoul_r>:
 801b9f4:	f7ff bf82 	b.w	801b8fc <_strtoul_l.isra.0>

0801b9f8 <strtoul>:
 801b9f8:	4613      	mov	r3, r2
 801b9fa:	460a      	mov	r2, r1
 801b9fc:	4601      	mov	r1, r0
 801b9fe:	4802      	ldr	r0, [pc, #8]	; (801ba08 <strtoul+0x10>)
 801ba00:	6800      	ldr	r0, [r0, #0]
 801ba02:	f7ff bf7b 	b.w	801b8fc <_strtoul_l.isra.0>
 801ba06:	bf00      	nop
 801ba08:	200001b8 	.word	0x200001b8

0801ba0c <_vsniprintf_r>:
 801ba0c:	b530      	push	{r4, r5, lr}
 801ba0e:	1e14      	subs	r4, r2, #0
 801ba10:	4605      	mov	r5, r0
 801ba12:	b09b      	sub	sp, #108	; 0x6c
 801ba14:	4618      	mov	r0, r3
 801ba16:	da05      	bge.n	801ba24 <_vsniprintf_r+0x18>
 801ba18:	238b      	movs	r3, #139	; 0x8b
 801ba1a:	602b      	str	r3, [r5, #0]
 801ba1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ba20:	b01b      	add	sp, #108	; 0x6c
 801ba22:	bd30      	pop	{r4, r5, pc}
 801ba24:	f44f 7302 	mov.w	r3, #520	; 0x208
 801ba28:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ba2c:	bf14      	ite	ne
 801ba2e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801ba32:	4623      	moveq	r3, r4
 801ba34:	9302      	str	r3, [sp, #8]
 801ba36:	9305      	str	r3, [sp, #20]
 801ba38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ba3c:	9100      	str	r1, [sp, #0]
 801ba3e:	9104      	str	r1, [sp, #16]
 801ba40:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ba44:	4602      	mov	r2, r0
 801ba46:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ba48:	4669      	mov	r1, sp
 801ba4a:	4628      	mov	r0, r5
 801ba4c:	f001 fc2c 	bl	801d2a8 <_svfiprintf_r>
 801ba50:	1c43      	adds	r3, r0, #1
 801ba52:	bfbc      	itt	lt
 801ba54:	238b      	movlt	r3, #139	; 0x8b
 801ba56:	602b      	strlt	r3, [r5, #0]
 801ba58:	2c00      	cmp	r4, #0
 801ba5a:	d0e1      	beq.n	801ba20 <_vsniprintf_r+0x14>
 801ba5c:	9b00      	ldr	r3, [sp, #0]
 801ba5e:	2200      	movs	r2, #0
 801ba60:	701a      	strb	r2, [r3, #0]
 801ba62:	e7dd      	b.n	801ba20 <_vsniprintf_r+0x14>

0801ba64 <vsniprintf>:
 801ba64:	b507      	push	{r0, r1, r2, lr}
 801ba66:	9300      	str	r3, [sp, #0]
 801ba68:	4613      	mov	r3, r2
 801ba6a:	460a      	mov	r2, r1
 801ba6c:	4601      	mov	r1, r0
 801ba6e:	4803      	ldr	r0, [pc, #12]	; (801ba7c <vsniprintf+0x18>)
 801ba70:	6800      	ldr	r0, [r0, #0]
 801ba72:	f7ff ffcb 	bl	801ba0c <_vsniprintf_r>
 801ba76:	b003      	add	sp, #12
 801ba78:	f85d fb04 	ldr.w	pc, [sp], #4
 801ba7c:	200001b8 	.word	0x200001b8

0801ba80 <__swbuf_r>:
 801ba80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba82:	460e      	mov	r6, r1
 801ba84:	4614      	mov	r4, r2
 801ba86:	4605      	mov	r5, r0
 801ba88:	b118      	cbz	r0, 801ba92 <__swbuf_r+0x12>
 801ba8a:	6983      	ldr	r3, [r0, #24]
 801ba8c:	b90b      	cbnz	r3, 801ba92 <__swbuf_r+0x12>
 801ba8e:	f000 fa1d 	bl	801becc <__sinit>
 801ba92:	4b21      	ldr	r3, [pc, #132]	; (801bb18 <__swbuf_r+0x98>)
 801ba94:	429c      	cmp	r4, r3
 801ba96:	d12b      	bne.n	801baf0 <__swbuf_r+0x70>
 801ba98:	686c      	ldr	r4, [r5, #4]
 801ba9a:	69a3      	ldr	r3, [r4, #24]
 801ba9c:	60a3      	str	r3, [r4, #8]
 801ba9e:	89a3      	ldrh	r3, [r4, #12]
 801baa0:	071a      	lsls	r2, r3, #28
 801baa2:	d52f      	bpl.n	801bb04 <__swbuf_r+0x84>
 801baa4:	6923      	ldr	r3, [r4, #16]
 801baa6:	b36b      	cbz	r3, 801bb04 <__swbuf_r+0x84>
 801baa8:	6923      	ldr	r3, [r4, #16]
 801baaa:	6820      	ldr	r0, [r4, #0]
 801baac:	1ac0      	subs	r0, r0, r3
 801baae:	6963      	ldr	r3, [r4, #20]
 801bab0:	b2f6      	uxtb	r6, r6
 801bab2:	4283      	cmp	r3, r0
 801bab4:	4637      	mov	r7, r6
 801bab6:	dc04      	bgt.n	801bac2 <__swbuf_r+0x42>
 801bab8:	4621      	mov	r1, r4
 801baba:	4628      	mov	r0, r5
 801babc:	f000 f972 	bl	801bda4 <_fflush_r>
 801bac0:	bb30      	cbnz	r0, 801bb10 <__swbuf_r+0x90>
 801bac2:	68a3      	ldr	r3, [r4, #8]
 801bac4:	3b01      	subs	r3, #1
 801bac6:	60a3      	str	r3, [r4, #8]
 801bac8:	6823      	ldr	r3, [r4, #0]
 801baca:	1c5a      	adds	r2, r3, #1
 801bacc:	6022      	str	r2, [r4, #0]
 801bace:	701e      	strb	r6, [r3, #0]
 801bad0:	6963      	ldr	r3, [r4, #20]
 801bad2:	3001      	adds	r0, #1
 801bad4:	4283      	cmp	r3, r0
 801bad6:	d004      	beq.n	801bae2 <__swbuf_r+0x62>
 801bad8:	89a3      	ldrh	r3, [r4, #12]
 801bada:	07db      	lsls	r3, r3, #31
 801badc:	d506      	bpl.n	801baec <__swbuf_r+0x6c>
 801bade:	2e0a      	cmp	r6, #10
 801bae0:	d104      	bne.n	801baec <__swbuf_r+0x6c>
 801bae2:	4621      	mov	r1, r4
 801bae4:	4628      	mov	r0, r5
 801bae6:	f000 f95d 	bl	801bda4 <_fflush_r>
 801baea:	b988      	cbnz	r0, 801bb10 <__swbuf_r+0x90>
 801baec:	4638      	mov	r0, r7
 801baee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801baf0:	4b0a      	ldr	r3, [pc, #40]	; (801bb1c <__swbuf_r+0x9c>)
 801baf2:	429c      	cmp	r4, r3
 801baf4:	d101      	bne.n	801bafa <__swbuf_r+0x7a>
 801baf6:	68ac      	ldr	r4, [r5, #8]
 801baf8:	e7cf      	b.n	801ba9a <__swbuf_r+0x1a>
 801bafa:	4b09      	ldr	r3, [pc, #36]	; (801bb20 <__swbuf_r+0xa0>)
 801bafc:	429c      	cmp	r4, r3
 801bafe:	bf08      	it	eq
 801bb00:	68ec      	ldreq	r4, [r5, #12]
 801bb02:	e7ca      	b.n	801ba9a <__swbuf_r+0x1a>
 801bb04:	4621      	mov	r1, r4
 801bb06:	4628      	mov	r0, r5
 801bb08:	f000 f81e 	bl	801bb48 <__swsetup_r>
 801bb0c:	2800      	cmp	r0, #0
 801bb0e:	d0cb      	beq.n	801baa8 <__swbuf_r+0x28>
 801bb10:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801bb14:	e7ea      	b.n	801baec <__swbuf_r+0x6c>
 801bb16:	bf00      	nop
 801bb18:	0802034c 	.word	0x0802034c
 801bb1c:	0802036c 	.word	0x0802036c
 801bb20:	0802032c 	.word	0x0802032c

0801bb24 <_write_r>:
 801bb24:	b538      	push	{r3, r4, r5, lr}
 801bb26:	4d07      	ldr	r5, [pc, #28]	; (801bb44 <_write_r+0x20>)
 801bb28:	4604      	mov	r4, r0
 801bb2a:	4608      	mov	r0, r1
 801bb2c:	4611      	mov	r1, r2
 801bb2e:	2200      	movs	r2, #0
 801bb30:	602a      	str	r2, [r5, #0]
 801bb32:	461a      	mov	r2, r3
 801bb34:	f7e8 f82f 	bl	8003b96 <_write>
 801bb38:	1c43      	adds	r3, r0, #1
 801bb3a:	d102      	bne.n	801bb42 <_write_r+0x1e>
 801bb3c:	682b      	ldr	r3, [r5, #0]
 801bb3e:	b103      	cbz	r3, 801bb42 <_write_r+0x1e>
 801bb40:	6023      	str	r3, [r4, #0]
 801bb42:	bd38      	pop	{r3, r4, r5, pc}
 801bb44:	2001602c 	.word	0x2001602c

0801bb48 <__swsetup_r>:
 801bb48:	4b32      	ldr	r3, [pc, #200]	; (801bc14 <__swsetup_r+0xcc>)
 801bb4a:	b570      	push	{r4, r5, r6, lr}
 801bb4c:	681d      	ldr	r5, [r3, #0]
 801bb4e:	4606      	mov	r6, r0
 801bb50:	460c      	mov	r4, r1
 801bb52:	b125      	cbz	r5, 801bb5e <__swsetup_r+0x16>
 801bb54:	69ab      	ldr	r3, [r5, #24]
 801bb56:	b913      	cbnz	r3, 801bb5e <__swsetup_r+0x16>
 801bb58:	4628      	mov	r0, r5
 801bb5a:	f000 f9b7 	bl	801becc <__sinit>
 801bb5e:	4b2e      	ldr	r3, [pc, #184]	; (801bc18 <__swsetup_r+0xd0>)
 801bb60:	429c      	cmp	r4, r3
 801bb62:	d10f      	bne.n	801bb84 <__swsetup_r+0x3c>
 801bb64:	686c      	ldr	r4, [r5, #4]
 801bb66:	89a3      	ldrh	r3, [r4, #12]
 801bb68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bb6c:	0719      	lsls	r1, r3, #28
 801bb6e:	d42c      	bmi.n	801bbca <__swsetup_r+0x82>
 801bb70:	06dd      	lsls	r5, r3, #27
 801bb72:	d411      	bmi.n	801bb98 <__swsetup_r+0x50>
 801bb74:	2309      	movs	r3, #9
 801bb76:	6033      	str	r3, [r6, #0]
 801bb78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bb7c:	81a3      	strh	r3, [r4, #12]
 801bb7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bb82:	e03e      	b.n	801bc02 <__swsetup_r+0xba>
 801bb84:	4b25      	ldr	r3, [pc, #148]	; (801bc1c <__swsetup_r+0xd4>)
 801bb86:	429c      	cmp	r4, r3
 801bb88:	d101      	bne.n	801bb8e <__swsetup_r+0x46>
 801bb8a:	68ac      	ldr	r4, [r5, #8]
 801bb8c:	e7eb      	b.n	801bb66 <__swsetup_r+0x1e>
 801bb8e:	4b24      	ldr	r3, [pc, #144]	; (801bc20 <__swsetup_r+0xd8>)
 801bb90:	429c      	cmp	r4, r3
 801bb92:	bf08      	it	eq
 801bb94:	68ec      	ldreq	r4, [r5, #12]
 801bb96:	e7e6      	b.n	801bb66 <__swsetup_r+0x1e>
 801bb98:	0758      	lsls	r0, r3, #29
 801bb9a:	d512      	bpl.n	801bbc2 <__swsetup_r+0x7a>
 801bb9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bb9e:	b141      	cbz	r1, 801bbb2 <__swsetup_r+0x6a>
 801bba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bba4:	4299      	cmp	r1, r3
 801bba6:	d002      	beq.n	801bbae <__swsetup_r+0x66>
 801bba8:	4630      	mov	r0, r6
 801bbaa:	f7fe fb87 	bl	801a2bc <_free_r>
 801bbae:	2300      	movs	r3, #0
 801bbb0:	6363      	str	r3, [r4, #52]	; 0x34
 801bbb2:	89a3      	ldrh	r3, [r4, #12]
 801bbb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bbb8:	81a3      	strh	r3, [r4, #12]
 801bbba:	2300      	movs	r3, #0
 801bbbc:	6063      	str	r3, [r4, #4]
 801bbbe:	6923      	ldr	r3, [r4, #16]
 801bbc0:	6023      	str	r3, [r4, #0]
 801bbc2:	89a3      	ldrh	r3, [r4, #12]
 801bbc4:	f043 0308 	orr.w	r3, r3, #8
 801bbc8:	81a3      	strh	r3, [r4, #12]
 801bbca:	6923      	ldr	r3, [r4, #16]
 801bbcc:	b94b      	cbnz	r3, 801bbe2 <__swsetup_r+0x9a>
 801bbce:	89a3      	ldrh	r3, [r4, #12]
 801bbd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bbd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bbd8:	d003      	beq.n	801bbe2 <__swsetup_r+0x9a>
 801bbda:	4621      	mov	r1, r4
 801bbdc:	4630      	mov	r0, r6
 801bbde:	f000 fdc9 	bl	801c774 <__smakebuf_r>
 801bbe2:	89a0      	ldrh	r0, [r4, #12]
 801bbe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bbe8:	f010 0301 	ands.w	r3, r0, #1
 801bbec:	d00a      	beq.n	801bc04 <__swsetup_r+0xbc>
 801bbee:	2300      	movs	r3, #0
 801bbf0:	60a3      	str	r3, [r4, #8]
 801bbf2:	6963      	ldr	r3, [r4, #20]
 801bbf4:	425b      	negs	r3, r3
 801bbf6:	61a3      	str	r3, [r4, #24]
 801bbf8:	6923      	ldr	r3, [r4, #16]
 801bbfa:	b943      	cbnz	r3, 801bc0e <__swsetup_r+0xc6>
 801bbfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bc00:	d1ba      	bne.n	801bb78 <__swsetup_r+0x30>
 801bc02:	bd70      	pop	{r4, r5, r6, pc}
 801bc04:	0781      	lsls	r1, r0, #30
 801bc06:	bf58      	it	pl
 801bc08:	6963      	ldrpl	r3, [r4, #20]
 801bc0a:	60a3      	str	r3, [r4, #8]
 801bc0c:	e7f4      	b.n	801bbf8 <__swsetup_r+0xb0>
 801bc0e:	2000      	movs	r0, #0
 801bc10:	e7f7      	b.n	801bc02 <__swsetup_r+0xba>
 801bc12:	bf00      	nop
 801bc14:	200001b8 	.word	0x200001b8
 801bc18:	0802034c 	.word	0x0802034c
 801bc1c:	0802036c 	.word	0x0802036c
 801bc20:	0802032c 	.word	0x0802032c

0801bc24 <__assert_func>:
 801bc24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bc26:	4614      	mov	r4, r2
 801bc28:	461a      	mov	r2, r3
 801bc2a:	4b09      	ldr	r3, [pc, #36]	; (801bc50 <__assert_func+0x2c>)
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	4605      	mov	r5, r0
 801bc30:	68d8      	ldr	r0, [r3, #12]
 801bc32:	b14c      	cbz	r4, 801bc48 <__assert_func+0x24>
 801bc34:	4b07      	ldr	r3, [pc, #28]	; (801bc54 <__assert_func+0x30>)
 801bc36:	9100      	str	r1, [sp, #0]
 801bc38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bc3c:	4906      	ldr	r1, [pc, #24]	; (801bc58 <__assert_func+0x34>)
 801bc3e:	462b      	mov	r3, r5
 801bc40:	f000 f9c2 	bl	801bfc8 <fiprintf>
 801bc44:	f002 fad9 	bl	801e1fa <abort>
 801bc48:	4b04      	ldr	r3, [pc, #16]	; (801bc5c <__assert_func+0x38>)
 801bc4a:	461c      	mov	r4, r3
 801bc4c:	e7f3      	b.n	801bc36 <__assert_func+0x12>
 801bc4e:	bf00      	nop
 801bc50:	200001b8 	.word	0x200001b8
 801bc54:	080202f0 	.word	0x080202f0
 801bc58:	080202fd 	.word	0x080202fd
 801bc5c:	0802032b 	.word	0x0802032b

0801bc60 <_close_r>:
 801bc60:	b538      	push	{r3, r4, r5, lr}
 801bc62:	4d06      	ldr	r5, [pc, #24]	; (801bc7c <_close_r+0x1c>)
 801bc64:	2300      	movs	r3, #0
 801bc66:	4604      	mov	r4, r0
 801bc68:	4608      	mov	r0, r1
 801bc6a:	602b      	str	r3, [r5, #0]
 801bc6c:	f7e7 ffaf 	bl	8003bce <_close>
 801bc70:	1c43      	adds	r3, r0, #1
 801bc72:	d102      	bne.n	801bc7a <_close_r+0x1a>
 801bc74:	682b      	ldr	r3, [r5, #0]
 801bc76:	b103      	cbz	r3, 801bc7a <_close_r+0x1a>
 801bc78:	6023      	str	r3, [r4, #0]
 801bc7a:	bd38      	pop	{r3, r4, r5, pc}
 801bc7c:	2001602c 	.word	0x2001602c

0801bc80 <__env_lock>:
 801bc80:	4801      	ldr	r0, [pc, #4]	; (801bc88 <__env_lock+0x8>)
 801bc82:	f7fe bac8 	b.w	801a216 <__retarget_lock_acquire_recursive>
 801bc86:	bf00      	nop
 801bc88:	20016022 	.word	0x20016022

0801bc8c <__env_unlock>:
 801bc8c:	4801      	ldr	r0, [pc, #4]	; (801bc94 <__env_unlock+0x8>)
 801bc8e:	f7fe bac3 	b.w	801a218 <__retarget_lock_release_recursive>
 801bc92:	bf00      	nop
 801bc94:	20016022 	.word	0x20016022

0801bc98 <__sflush_r>:
 801bc98:	898a      	ldrh	r2, [r1, #12]
 801bc9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc9e:	4605      	mov	r5, r0
 801bca0:	0710      	lsls	r0, r2, #28
 801bca2:	460c      	mov	r4, r1
 801bca4:	d458      	bmi.n	801bd58 <__sflush_r+0xc0>
 801bca6:	684b      	ldr	r3, [r1, #4]
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	dc05      	bgt.n	801bcb8 <__sflush_r+0x20>
 801bcac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	dc02      	bgt.n	801bcb8 <__sflush_r+0x20>
 801bcb2:	2000      	movs	r0, #0
 801bcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bcb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bcba:	2e00      	cmp	r6, #0
 801bcbc:	d0f9      	beq.n	801bcb2 <__sflush_r+0x1a>
 801bcbe:	2300      	movs	r3, #0
 801bcc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bcc4:	682f      	ldr	r7, [r5, #0]
 801bcc6:	602b      	str	r3, [r5, #0]
 801bcc8:	d032      	beq.n	801bd30 <__sflush_r+0x98>
 801bcca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bccc:	89a3      	ldrh	r3, [r4, #12]
 801bcce:	075a      	lsls	r2, r3, #29
 801bcd0:	d505      	bpl.n	801bcde <__sflush_r+0x46>
 801bcd2:	6863      	ldr	r3, [r4, #4]
 801bcd4:	1ac0      	subs	r0, r0, r3
 801bcd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bcd8:	b10b      	cbz	r3, 801bcde <__sflush_r+0x46>
 801bcda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bcdc:	1ac0      	subs	r0, r0, r3
 801bcde:	2300      	movs	r3, #0
 801bce0:	4602      	mov	r2, r0
 801bce2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bce4:	6a21      	ldr	r1, [r4, #32]
 801bce6:	4628      	mov	r0, r5
 801bce8:	47b0      	blx	r6
 801bcea:	1c43      	adds	r3, r0, #1
 801bcec:	89a3      	ldrh	r3, [r4, #12]
 801bcee:	d106      	bne.n	801bcfe <__sflush_r+0x66>
 801bcf0:	6829      	ldr	r1, [r5, #0]
 801bcf2:	291d      	cmp	r1, #29
 801bcf4:	d82c      	bhi.n	801bd50 <__sflush_r+0xb8>
 801bcf6:	4a2a      	ldr	r2, [pc, #168]	; (801bda0 <__sflush_r+0x108>)
 801bcf8:	40ca      	lsrs	r2, r1
 801bcfa:	07d6      	lsls	r6, r2, #31
 801bcfc:	d528      	bpl.n	801bd50 <__sflush_r+0xb8>
 801bcfe:	2200      	movs	r2, #0
 801bd00:	6062      	str	r2, [r4, #4]
 801bd02:	04d9      	lsls	r1, r3, #19
 801bd04:	6922      	ldr	r2, [r4, #16]
 801bd06:	6022      	str	r2, [r4, #0]
 801bd08:	d504      	bpl.n	801bd14 <__sflush_r+0x7c>
 801bd0a:	1c42      	adds	r2, r0, #1
 801bd0c:	d101      	bne.n	801bd12 <__sflush_r+0x7a>
 801bd0e:	682b      	ldr	r3, [r5, #0]
 801bd10:	b903      	cbnz	r3, 801bd14 <__sflush_r+0x7c>
 801bd12:	6560      	str	r0, [r4, #84]	; 0x54
 801bd14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bd16:	602f      	str	r7, [r5, #0]
 801bd18:	2900      	cmp	r1, #0
 801bd1a:	d0ca      	beq.n	801bcb2 <__sflush_r+0x1a>
 801bd1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bd20:	4299      	cmp	r1, r3
 801bd22:	d002      	beq.n	801bd2a <__sflush_r+0x92>
 801bd24:	4628      	mov	r0, r5
 801bd26:	f7fe fac9 	bl	801a2bc <_free_r>
 801bd2a:	2000      	movs	r0, #0
 801bd2c:	6360      	str	r0, [r4, #52]	; 0x34
 801bd2e:	e7c1      	b.n	801bcb4 <__sflush_r+0x1c>
 801bd30:	6a21      	ldr	r1, [r4, #32]
 801bd32:	2301      	movs	r3, #1
 801bd34:	4628      	mov	r0, r5
 801bd36:	47b0      	blx	r6
 801bd38:	1c41      	adds	r1, r0, #1
 801bd3a:	d1c7      	bne.n	801bccc <__sflush_r+0x34>
 801bd3c:	682b      	ldr	r3, [r5, #0]
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	d0c4      	beq.n	801bccc <__sflush_r+0x34>
 801bd42:	2b1d      	cmp	r3, #29
 801bd44:	d001      	beq.n	801bd4a <__sflush_r+0xb2>
 801bd46:	2b16      	cmp	r3, #22
 801bd48:	d101      	bne.n	801bd4e <__sflush_r+0xb6>
 801bd4a:	602f      	str	r7, [r5, #0]
 801bd4c:	e7b1      	b.n	801bcb2 <__sflush_r+0x1a>
 801bd4e:	89a3      	ldrh	r3, [r4, #12]
 801bd50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bd54:	81a3      	strh	r3, [r4, #12]
 801bd56:	e7ad      	b.n	801bcb4 <__sflush_r+0x1c>
 801bd58:	690f      	ldr	r7, [r1, #16]
 801bd5a:	2f00      	cmp	r7, #0
 801bd5c:	d0a9      	beq.n	801bcb2 <__sflush_r+0x1a>
 801bd5e:	0793      	lsls	r3, r2, #30
 801bd60:	680e      	ldr	r6, [r1, #0]
 801bd62:	bf08      	it	eq
 801bd64:	694b      	ldreq	r3, [r1, #20]
 801bd66:	600f      	str	r7, [r1, #0]
 801bd68:	bf18      	it	ne
 801bd6a:	2300      	movne	r3, #0
 801bd6c:	eba6 0807 	sub.w	r8, r6, r7
 801bd70:	608b      	str	r3, [r1, #8]
 801bd72:	f1b8 0f00 	cmp.w	r8, #0
 801bd76:	dd9c      	ble.n	801bcb2 <__sflush_r+0x1a>
 801bd78:	6a21      	ldr	r1, [r4, #32]
 801bd7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bd7c:	4643      	mov	r3, r8
 801bd7e:	463a      	mov	r2, r7
 801bd80:	4628      	mov	r0, r5
 801bd82:	47b0      	blx	r6
 801bd84:	2800      	cmp	r0, #0
 801bd86:	dc06      	bgt.n	801bd96 <__sflush_r+0xfe>
 801bd88:	89a3      	ldrh	r3, [r4, #12]
 801bd8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bd8e:	81a3      	strh	r3, [r4, #12]
 801bd90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd94:	e78e      	b.n	801bcb4 <__sflush_r+0x1c>
 801bd96:	4407      	add	r7, r0
 801bd98:	eba8 0800 	sub.w	r8, r8, r0
 801bd9c:	e7e9      	b.n	801bd72 <__sflush_r+0xda>
 801bd9e:	bf00      	nop
 801bda0:	20400001 	.word	0x20400001

0801bda4 <_fflush_r>:
 801bda4:	b538      	push	{r3, r4, r5, lr}
 801bda6:	690b      	ldr	r3, [r1, #16]
 801bda8:	4605      	mov	r5, r0
 801bdaa:	460c      	mov	r4, r1
 801bdac:	b913      	cbnz	r3, 801bdb4 <_fflush_r+0x10>
 801bdae:	2500      	movs	r5, #0
 801bdb0:	4628      	mov	r0, r5
 801bdb2:	bd38      	pop	{r3, r4, r5, pc}
 801bdb4:	b118      	cbz	r0, 801bdbe <_fflush_r+0x1a>
 801bdb6:	6983      	ldr	r3, [r0, #24]
 801bdb8:	b90b      	cbnz	r3, 801bdbe <_fflush_r+0x1a>
 801bdba:	f000 f887 	bl	801becc <__sinit>
 801bdbe:	4b14      	ldr	r3, [pc, #80]	; (801be10 <_fflush_r+0x6c>)
 801bdc0:	429c      	cmp	r4, r3
 801bdc2:	d11b      	bne.n	801bdfc <_fflush_r+0x58>
 801bdc4:	686c      	ldr	r4, [r5, #4]
 801bdc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d0ef      	beq.n	801bdae <_fflush_r+0xa>
 801bdce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bdd0:	07d0      	lsls	r0, r2, #31
 801bdd2:	d404      	bmi.n	801bdde <_fflush_r+0x3a>
 801bdd4:	0599      	lsls	r1, r3, #22
 801bdd6:	d402      	bmi.n	801bdde <_fflush_r+0x3a>
 801bdd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bdda:	f7fe fa1c 	bl	801a216 <__retarget_lock_acquire_recursive>
 801bdde:	4628      	mov	r0, r5
 801bde0:	4621      	mov	r1, r4
 801bde2:	f7ff ff59 	bl	801bc98 <__sflush_r>
 801bde6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bde8:	07da      	lsls	r2, r3, #31
 801bdea:	4605      	mov	r5, r0
 801bdec:	d4e0      	bmi.n	801bdb0 <_fflush_r+0xc>
 801bdee:	89a3      	ldrh	r3, [r4, #12]
 801bdf0:	059b      	lsls	r3, r3, #22
 801bdf2:	d4dd      	bmi.n	801bdb0 <_fflush_r+0xc>
 801bdf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bdf6:	f7fe fa0f 	bl	801a218 <__retarget_lock_release_recursive>
 801bdfa:	e7d9      	b.n	801bdb0 <_fflush_r+0xc>
 801bdfc:	4b05      	ldr	r3, [pc, #20]	; (801be14 <_fflush_r+0x70>)
 801bdfe:	429c      	cmp	r4, r3
 801be00:	d101      	bne.n	801be06 <_fflush_r+0x62>
 801be02:	68ac      	ldr	r4, [r5, #8]
 801be04:	e7df      	b.n	801bdc6 <_fflush_r+0x22>
 801be06:	4b04      	ldr	r3, [pc, #16]	; (801be18 <_fflush_r+0x74>)
 801be08:	429c      	cmp	r4, r3
 801be0a:	bf08      	it	eq
 801be0c:	68ec      	ldreq	r4, [r5, #12]
 801be0e:	e7da      	b.n	801bdc6 <_fflush_r+0x22>
 801be10:	0802034c 	.word	0x0802034c
 801be14:	0802036c 	.word	0x0802036c
 801be18:	0802032c 	.word	0x0802032c

0801be1c <std>:
 801be1c:	2300      	movs	r3, #0
 801be1e:	b510      	push	{r4, lr}
 801be20:	4604      	mov	r4, r0
 801be22:	e9c0 3300 	strd	r3, r3, [r0]
 801be26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801be2a:	6083      	str	r3, [r0, #8]
 801be2c:	8181      	strh	r1, [r0, #12]
 801be2e:	6643      	str	r3, [r0, #100]	; 0x64
 801be30:	81c2      	strh	r2, [r0, #14]
 801be32:	6183      	str	r3, [r0, #24]
 801be34:	4619      	mov	r1, r3
 801be36:	2208      	movs	r2, #8
 801be38:	305c      	adds	r0, #92	; 0x5c
 801be3a:	f7fe fa27 	bl	801a28c <memset>
 801be3e:	4b05      	ldr	r3, [pc, #20]	; (801be54 <std+0x38>)
 801be40:	6263      	str	r3, [r4, #36]	; 0x24
 801be42:	4b05      	ldr	r3, [pc, #20]	; (801be58 <std+0x3c>)
 801be44:	62a3      	str	r3, [r4, #40]	; 0x28
 801be46:	4b05      	ldr	r3, [pc, #20]	; (801be5c <std+0x40>)
 801be48:	62e3      	str	r3, [r4, #44]	; 0x2c
 801be4a:	4b05      	ldr	r3, [pc, #20]	; (801be60 <std+0x44>)
 801be4c:	6224      	str	r4, [r4, #32]
 801be4e:	6323      	str	r3, [r4, #48]	; 0x30
 801be50:	bd10      	pop	{r4, pc}
 801be52:	bf00      	nop
 801be54:	0801aa79 	.word	0x0801aa79
 801be58:	0801aa9f 	.word	0x0801aa9f
 801be5c:	0801aad7 	.word	0x0801aad7
 801be60:	0801aafb 	.word	0x0801aafb

0801be64 <_cleanup_r>:
 801be64:	4901      	ldr	r1, [pc, #4]	; (801be6c <_cleanup_r+0x8>)
 801be66:	f000 b8c1 	b.w	801bfec <_fwalk_reent>
 801be6a:	bf00      	nop
 801be6c:	0801bda5 	.word	0x0801bda5

0801be70 <__sfmoreglue>:
 801be70:	b570      	push	{r4, r5, r6, lr}
 801be72:	1e4a      	subs	r2, r1, #1
 801be74:	2568      	movs	r5, #104	; 0x68
 801be76:	4355      	muls	r5, r2
 801be78:	460e      	mov	r6, r1
 801be7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801be7e:	f7fe fa6d 	bl	801a35c <_malloc_r>
 801be82:	4604      	mov	r4, r0
 801be84:	b140      	cbz	r0, 801be98 <__sfmoreglue+0x28>
 801be86:	2100      	movs	r1, #0
 801be88:	e9c0 1600 	strd	r1, r6, [r0]
 801be8c:	300c      	adds	r0, #12
 801be8e:	60a0      	str	r0, [r4, #8]
 801be90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801be94:	f7fe f9fa 	bl	801a28c <memset>
 801be98:	4620      	mov	r0, r4
 801be9a:	bd70      	pop	{r4, r5, r6, pc}

0801be9c <__sfp_lock_acquire>:
 801be9c:	4801      	ldr	r0, [pc, #4]	; (801bea4 <__sfp_lock_acquire+0x8>)
 801be9e:	f7fe b9ba 	b.w	801a216 <__retarget_lock_acquire_recursive>
 801bea2:	bf00      	nop
 801bea4:	20016028 	.word	0x20016028

0801bea8 <__sfp_lock_release>:
 801bea8:	4801      	ldr	r0, [pc, #4]	; (801beb0 <__sfp_lock_release+0x8>)
 801beaa:	f7fe b9b5 	b.w	801a218 <__retarget_lock_release_recursive>
 801beae:	bf00      	nop
 801beb0:	20016028 	.word	0x20016028

0801beb4 <__sinit_lock_acquire>:
 801beb4:	4801      	ldr	r0, [pc, #4]	; (801bebc <__sinit_lock_acquire+0x8>)
 801beb6:	f7fe b9ae 	b.w	801a216 <__retarget_lock_acquire_recursive>
 801beba:	bf00      	nop
 801bebc:	20016023 	.word	0x20016023

0801bec0 <__sinit_lock_release>:
 801bec0:	4801      	ldr	r0, [pc, #4]	; (801bec8 <__sinit_lock_release+0x8>)
 801bec2:	f7fe b9a9 	b.w	801a218 <__retarget_lock_release_recursive>
 801bec6:	bf00      	nop
 801bec8:	20016023 	.word	0x20016023

0801becc <__sinit>:
 801becc:	b510      	push	{r4, lr}
 801bece:	4604      	mov	r4, r0
 801bed0:	f7ff fff0 	bl	801beb4 <__sinit_lock_acquire>
 801bed4:	69a3      	ldr	r3, [r4, #24]
 801bed6:	b11b      	cbz	r3, 801bee0 <__sinit+0x14>
 801bed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bedc:	f7ff bff0 	b.w	801bec0 <__sinit_lock_release>
 801bee0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801bee4:	6523      	str	r3, [r4, #80]	; 0x50
 801bee6:	4b13      	ldr	r3, [pc, #76]	; (801bf34 <__sinit+0x68>)
 801bee8:	4a13      	ldr	r2, [pc, #76]	; (801bf38 <__sinit+0x6c>)
 801beea:	681b      	ldr	r3, [r3, #0]
 801beec:	62a2      	str	r2, [r4, #40]	; 0x28
 801beee:	42a3      	cmp	r3, r4
 801bef0:	bf04      	itt	eq
 801bef2:	2301      	moveq	r3, #1
 801bef4:	61a3      	streq	r3, [r4, #24]
 801bef6:	4620      	mov	r0, r4
 801bef8:	f000 f820 	bl	801bf3c <__sfp>
 801befc:	6060      	str	r0, [r4, #4]
 801befe:	4620      	mov	r0, r4
 801bf00:	f000 f81c 	bl	801bf3c <__sfp>
 801bf04:	60a0      	str	r0, [r4, #8]
 801bf06:	4620      	mov	r0, r4
 801bf08:	f000 f818 	bl	801bf3c <__sfp>
 801bf0c:	2200      	movs	r2, #0
 801bf0e:	60e0      	str	r0, [r4, #12]
 801bf10:	2104      	movs	r1, #4
 801bf12:	6860      	ldr	r0, [r4, #4]
 801bf14:	f7ff ff82 	bl	801be1c <std>
 801bf18:	68a0      	ldr	r0, [r4, #8]
 801bf1a:	2201      	movs	r2, #1
 801bf1c:	2109      	movs	r1, #9
 801bf1e:	f7ff ff7d 	bl	801be1c <std>
 801bf22:	68e0      	ldr	r0, [r4, #12]
 801bf24:	2202      	movs	r2, #2
 801bf26:	2112      	movs	r1, #18
 801bf28:	f7ff ff78 	bl	801be1c <std>
 801bf2c:	2301      	movs	r3, #1
 801bf2e:	61a3      	str	r3, [r4, #24]
 801bf30:	e7d2      	b.n	801bed8 <__sinit+0xc>
 801bf32:	bf00      	nop
 801bf34:	08020214 	.word	0x08020214
 801bf38:	0801be65 	.word	0x0801be65

0801bf3c <__sfp>:
 801bf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf3e:	4607      	mov	r7, r0
 801bf40:	f7ff ffac 	bl	801be9c <__sfp_lock_acquire>
 801bf44:	4b1e      	ldr	r3, [pc, #120]	; (801bfc0 <__sfp+0x84>)
 801bf46:	681e      	ldr	r6, [r3, #0]
 801bf48:	69b3      	ldr	r3, [r6, #24]
 801bf4a:	b913      	cbnz	r3, 801bf52 <__sfp+0x16>
 801bf4c:	4630      	mov	r0, r6
 801bf4e:	f7ff ffbd 	bl	801becc <__sinit>
 801bf52:	3648      	adds	r6, #72	; 0x48
 801bf54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801bf58:	3b01      	subs	r3, #1
 801bf5a:	d503      	bpl.n	801bf64 <__sfp+0x28>
 801bf5c:	6833      	ldr	r3, [r6, #0]
 801bf5e:	b30b      	cbz	r3, 801bfa4 <__sfp+0x68>
 801bf60:	6836      	ldr	r6, [r6, #0]
 801bf62:	e7f7      	b.n	801bf54 <__sfp+0x18>
 801bf64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bf68:	b9d5      	cbnz	r5, 801bfa0 <__sfp+0x64>
 801bf6a:	4b16      	ldr	r3, [pc, #88]	; (801bfc4 <__sfp+0x88>)
 801bf6c:	60e3      	str	r3, [r4, #12]
 801bf6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bf72:	6665      	str	r5, [r4, #100]	; 0x64
 801bf74:	f7fe f94e 	bl	801a214 <__retarget_lock_init_recursive>
 801bf78:	f7ff ff96 	bl	801bea8 <__sfp_lock_release>
 801bf7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801bf80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801bf84:	6025      	str	r5, [r4, #0]
 801bf86:	61a5      	str	r5, [r4, #24]
 801bf88:	2208      	movs	r2, #8
 801bf8a:	4629      	mov	r1, r5
 801bf8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801bf90:	f7fe f97c 	bl	801a28c <memset>
 801bf94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801bf98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801bf9c:	4620      	mov	r0, r4
 801bf9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bfa0:	3468      	adds	r4, #104	; 0x68
 801bfa2:	e7d9      	b.n	801bf58 <__sfp+0x1c>
 801bfa4:	2104      	movs	r1, #4
 801bfa6:	4638      	mov	r0, r7
 801bfa8:	f7ff ff62 	bl	801be70 <__sfmoreglue>
 801bfac:	4604      	mov	r4, r0
 801bfae:	6030      	str	r0, [r6, #0]
 801bfb0:	2800      	cmp	r0, #0
 801bfb2:	d1d5      	bne.n	801bf60 <__sfp+0x24>
 801bfb4:	f7ff ff78 	bl	801bea8 <__sfp_lock_release>
 801bfb8:	230c      	movs	r3, #12
 801bfba:	603b      	str	r3, [r7, #0]
 801bfbc:	e7ee      	b.n	801bf9c <__sfp+0x60>
 801bfbe:	bf00      	nop
 801bfc0:	08020214 	.word	0x08020214
 801bfc4:	ffff0001 	.word	0xffff0001

0801bfc8 <fiprintf>:
 801bfc8:	b40e      	push	{r1, r2, r3}
 801bfca:	b503      	push	{r0, r1, lr}
 801bfcc:	4601      	mov	r1, r0
 801bfce:	ab03      	add	r3, sp, #12
 801bfd0:	4805      	ldr	r0, [pc, #20]	; (801bfe8 <fiprintf+0x20>)
 801bfd2:	f853 2b04 	ldr.w	r2, [r3], #4
 801bfd6:	6800      	ldr	r0, [r0, #0]
 801bfd8:	9301      	str	r3, [sp, #4]
 801bfda:	f001 fc61 	bl	801d8a0 <_vfiprintf_r>
 801bfde:	b002      	add	sp, #8
 801bfe0:	f85d eb04 	ldr.w	lr, [sp], #4
 801bfe4:	b003      	add	sp, #12
 801bfe6:	4770      	bx	lr
 801bfe8:	200001b8 	.word	0x200001b8

0801bfec <_fwalk_reent>:
 801bfec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bff0:	4606      	mov	r6, r0
 801bff2:	4688      	mov	r8, r1
 801bff4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801bff8:	2700      	movs	r7, #0
 801bffa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bffe:	f1b9 0901 	subs.w	r9, r9, #1
 801c002:	d505      	bpl.n	801c010 <_fwalk_reent+0x24>
 801c004:	6824      	ldr	r4, [r4, #0]
 801c006:	2c00      	cmp	r4, #0
 801c008:	d1f7      	bne.n	801bffa <_fwalk_reent+0xe>
 801c00a:	4638      	mov	r0, r7
 801c00c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c010:	89ab      	ldrh	r3, [r5, #12]
 801c012:	2b01      	cmp	r3, #1
 801c014:	d907      	bls.n	801c026 <_fwalk_reent+0x3a>
 801c016:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c01a:	3301      	adds	r3, #1
 801c01c:	d003      	beq.n	801c026 <_fwalk_reent+0x3a>
 801c01e:	4629      	mov	r1, r5
 801c020:	4630      	mov	r0, r6
 801c022:	47c0      	blx	r8
 801c024:	4307      	orrs	r7, r0
 801c026:	3568      	adds	r5, #104	; 0x68
 801c028:	e7e9      	b.n	801bffe <_fwalk_reent+0x12>

0801c02a <rshift>:
 801c02a:	6903      	ldr	r3, [r0, #16]
 801c02c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c034:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c038:	f100 0414 	add.w	r4, r0, #20
 801c03c:	dd45      	ble.n	801c0ca <rshift+0xa0>
 801c03e:	f011 011f 	ands.w	r1, r1, #31
 801c042:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c046:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c04a:	d10c      	bne.n	801c066 <rshift+0x3c>
 801c04c:	f100 0710 	add.w	r7, r0, #16
 801c050:	4629      	mov	r1, r5
 801c052:	42b1      	cmp	r1, r6
 801c054:	d334      	bcc.n	801c0c0 <rshift+0x96>
 801c056:	1a9b      	subs	r3, r3, r2
 801c058:	009b      	lsls	r3, r3, #2
 801c05a:	1eea      	subs	r2, r5, #3
 801c05c:	4296      	cmp	r6, r2
 801c05e:	bf38      	it	cc
 801c060:	2300      	movcc	r3, #0
 801c062:	4423      	add	r3, r4
 801c064:	e015      	b.n	801c092 <rshift+0x68>
 801c066:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c06a:	f1c1 0820 	rsb	r8, r1, #32
 801c06e:	40cf      	lsrs	r7, r1
 801c070:	f105 0e04 	add.w	lr, r5, #4
 801c074:	46a1      	mov	r9, r4
 801c076:	4576      	cmp	r6, lr
 801c078:	46f4      	mov	ip, lr
 801c07a:	d815      	bhi.n	801c0a8 <rshift+0x7e>
 801c07c:	1a9b      	subs	r3, r3, r2
 801c07e:	009a      	lsls	r2, r3, #2
 801c080:	3a04      	subs	r2, #4
 801c082:	3501      	adds	r5, #1
 801c084:	42ae      	cmp	r6, r5
 801c086:	bf38      	it	cc
 801c088:	2200      	movcc	r2, #0
 801c08a:	18a3      	adds	r3, r4, r2
 801c08c:	50a7      	str	r7, [r4, r2]
 801c08e:	b107      	cbz	r7, 801c092 <rshift+0x68>
 801c090:	3304      	adds	r3, #4
 801c092:	1b1a      	subs	r2, r3, r4
 801c094:	42a3      	cmp	r3, r4
 801c096:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c09a:	bf08      	it	eq
 801c09c:	2300      	moveq	r3, #0
 801c09e:	6102      	str	r2, [r0, #16]
 801c0a0:	bf08      	it	eq
 801c0a2:	6143      	streq	r3, [r0, #20]
 801c0a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c0a8:	f8dc c000 	ldr.w	ip, [ip]
 801c0ac:	fa0c fc08 	lsl.w	ip, ip, r8
 801c0b0:	ea4c 0707 	orr.w	r7, ip, r7
 801c0b4:	f849 7b04 	str.w	r7, [r9], #4
 801c0b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c0bc:	40cf      	lsrs	r7, r1
 801c0be:	e7da      	b.n	801c076 <rshift+0x4c>
 801c0c0:	f851 cb04 	ldr.w	ip, [r1], #4
 801c0c4:	f847 cf04 	str.w	ip, [r7, #4]!
 801c0c8:	e7c3      	b.n	801c052 <rshift+0x28>
 801c0ca:	4623      	mov	r3, r4
 801c0cc:	e7e1      	b.n	801c092 <rshift+0x68>

0801c0ce <__hexdig_fun>:
 801c0ce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c0d2:	2b09      	cmp	r3, #9
 801c0d4:	d802      	bhi.n	801c0dc <__hexdig_fun+0xe>
 801c0d6:	3820      	subs	r0, #32
 801c0d8:	b2c0      	uxtb	r0, r0
 801c0da:	4770      	bx	lr
 801c0dc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c0e0:	2b05      	cmp	r3, #5
 801c0e2:	d801      	bhi.n	801c0e8 <__hexdig_fun+0x1a>
 801c0e4:	3847      	subs	r0, #71	; 0x47
 801c0e6:	e7f7      	b.n	801c0d8 <__hexdig_fun+0xa>
 801c0e8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c0ec:	2b05      	cmp	r3, #5
 801c0ee:	d801      	bhi.n	801c0f4 <__hexdig_fun+0x26>
 801c0f0:	3827      	subs	r0, #39	; 0x27
 801c0f2:	e7f1      	b.n	801c0d8 <__hexdig_fun+0xa>
 801c0f4:	2000      	movs	r0, #0
 801c0f6:	4770      	bx	lr

0801c0f8 <__gethex>:
 801c0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0fc:	ed2d 8b02 	vpush	{d8}
 801c100:	b089      	sub	sp, #36	; 0x24
 801c102:	ee08 0a10 	vmov	s16, r0
 801c106:	9304      	str	r3, [sp, #16]
 801c108:	4bbc      	ldr	r3, [pc, #752]	; (801c3fc <__gethex+0x304>)
 801c10a:	681b      	ldr	r3, [r3, #0]
 801c10c:	9301      	str	r3, [sp, #4]
 801c10e:	4618      	mov	r0, r3
 801c110:	468b      	mov	fp, r1
 801c112:	4690      	mov	r8, r2
 801c114:	f7e4 f866 	bl	80001e4 <strlen>
 801c118:	9b01      	ldr	r3, [sp, #4]
 801c11a:	f8db 2000 	ldr.w	r2, [fp]
 801c11e:	4403      	add	r3, r0
 801c120:	4682      	mov	sl, r0
 801c122:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c126:	9305      	str	r3, [sp, #20]
 801c128:	1c93      	adds	r3, r2, #2
 801c12a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c12e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c132:	32fe      	adds	r2, #254	; 0xfe
 801c134:	18d1      	adds	r1, r2, r3
 801c136:	461f      	mov	r7, r3
 801c138:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c13c:	9100      	str	r1, [sp, #0]
 801c13e:	2830      	cmp	r0, #48	; 0x30
 801c140:	d0f8      	beq.n	801c134 <__gethex+0x3c>
 801c142:	f7ff ffc4 	bl	801c0ce <__hexdig_fun>
 801c146:	4604      	mov	r4, r0
 801c148:	2800      	cmp	r0, #0
 801c14a:	d13a      	bne.n	801c1c2 <__gethex+0xca>
 801c14c:	9901      	ldr	r1, [sp, #4]
 801c14e:	4652      	mov	r2, sl
 801c150:	4638      	mov	r0, r7
 801c152:	f7fe fceb 	bl	801ab2c <strncmp>
 801c156:	4605      	mov	r5, r0
 801c158:	2800      	cmp	r0, #0
 801c15a:	d168      	bne.n	801c22e <__gethex+0x136>
 801c15c:	f817 000a 	ldrb.w	r0, [r7, sl]
 801c160:	eb07 060a 	add.w	r6, r7, sl
 801c164:	f7ff ffb3 	bl	801c0ce <__hexdig_fun>
 801c168:	2800      	cmp	r0, #0
 801c16a:	d062      	beq.n	801c232 <__gethex+0x13a>
 801c16c:	4633      	mov	r3, r6
 801c16e:	7818      	ldrb	r0, [r3, #0]
 801c170:	2830      	cmp	r0, #48	; 0x30
 801c172:	461f      	mov	r7, r3
 801c174:	f103 0301 	add.w	r3, r3, #1
 801c178:	d0f9      	beq.n	801c16e <__gethex+0x76>
 801c17a:	f7ff ffa8 	bl	801c0ce <__hexdig_fun>
 801c17e:	2301      	movs	r3, #1
 801c180:	fab0 f480 	clz	r4, r0
 801c184:	0964      	lsrs	r4, r4, #5
 801c186:	4635      	mov	r5, r6
 801c188:	9300      	str	r3, [sp, #0]
 801c18a:	463a      	mov	r2, r7
 801c18c:	4616      	mov	r6, r2
 801c18e:	3201      	adds	r2, #1
 801c190:	7830      	ldrb	r0, [r6, #0]
 801c192:	f7ff ff9c 	bl	801c0ce <__hexdig_fun>
 801c196:	2800      	cmp	r0, #0
 801c198:	d1f8      	bne.n	801c18c <__gethex+0x94>
 801c19a:	9901      	ldr	r1, [sp, #4]
 801c19c:	4652      	mov	r2, sl
 801c19e:	4630      	mov	r0, r6
 801c1a0:	f7fe fcc4 	bl	801ab2c <strncmp>
 801c1a4:	b980      	cbnz	r0, 801c1c8 <__gethex+0xd0>
 801c1a6:	b94d      	cbnz	r5, 801c1bc <__gethex+0xc4>
 801c1a8:	eb06 050a 	add.w	r5, r6, sl
 801c1ac:	462a      	mov	r2, r5
 801c1ae:	4616      	mov	r6, r2
 801c1b0:	3201      	adds	r2, #1
 801c1b2:	7830      	ldrb	r0, [r6, #0]
 801c1b4:	f7ff ff8b 	bl	801c0ce <__hexdig_fun>
 801c1b8:	2800      	cmp	r0, #0
 801c1ba:	d1f8      	bne.n	801c1ae <__gethex+0xb6>
 801c1bc:	1bad      	subs	r5, r5, r6
 801c1be:	00ad      	lsls	r5, r5, #2
 801c1c0:	e004      	b.n	801c1cc <__gethex+0xd4>
 801c1c2:	2400      	movs	r4, #0
 801c1c4:	4625      	mov	r5, r4
 801c1c6:	e7e0      	b.n	801c18a <__gethex+0x92>
 801c1c8:	2d00      	cmp	r5, #0
 801c1ca:	d1f7      	bne.n	801c1bc <__gethex+0xc4>
 801c1cc:	7833      	ldrb	r3, [r6, #0]
 801c1ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c1d2:	2b50      	cmp	r3, #80	; 0x50
 801c1d4:	d13b      	bne.n	801c24e <__gethex+0x156>
 801c1d6:	7873      	ldrb	r3, [r6, #1]
 801c1d8:	2b2b      	cmp	r3, #43	; 0x2b
 801c1da:	d02c      	beq.n	801c236 <__gethex+0x13e>
 801c1dc:	2b2d      	cmp	r3, #45	; 0x2d
 801c1de:	d02e      	beq.n	801c23e <__gethex+0x146>
 801c1e0:	1c71      	adds	r1, r6, #1
 801c1e2:	f04f 0900 	mov.w	r9, #0
 801c1e6:	7808      	ldrb	r0, [r1, #0]
 801c1e8:	f7ff ff71 	bl	801c0ce <__hexdig_fun>
 801c1ec:	1e43      	subs	r3, r0, #1
 801c1ee:	b2db      	uxtb	r3, r3
 801c1f0:	2b18      	cmp	r3, #24
 801c1f2:	d82c      	bhi.n	801c24e <__gethex+0x156>
 801c1f4:	f1a0 0210 	sub.w	r2, r0, #16
 801c1f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c1fc:	f7ff ff67 	bl	801c0ce <__hexdig_fun>
 801c200:	1e43      	subs	r3, r0, #1
 801c202:	b2db      	uxtb	r3, r3
 801c204:	2b18      	cmp	r3, #24
 801c206:	d91d      	bls.n	801c244 <__gethex+0x14c>
 801c208:	f1b9 0f00 	cmp.w	r9, #0
 801c20c:	d000      	beq.n	801c210 <__gethex+0x118>
 801c20e:	4252      	negs	r2, r2
 801c210:	4415      	add	r5, r2
 801c212:	f8cb 1000 	str.w	r1, [fp]
 801c216:	b1e4      	cbz	r4, 801c252 <__gethex+0x15a>
 801c218:	9b00      	ldr	r3, [sp, #0]
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	bf14      	ite	ne
 801c21e:	2700      	movne	r7, #0
 801c220:	2706      	moveq	r7, #6
 801c222:	4638      	mov	r0, r7
 801c224:	b009      	add	sp, #36	; 0x24
 801c226:	ecbd 8b02 	vpop	{d8}
 801c22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c22e:	463e      	mov	r6, r7
 801c230:	4625      	mov	r5, r4
 801c232:	2401      	movs	r4, #1
 801c234:	e7ca      	b.n	801c1cc <__gethex+0xd4>
 801c236:	f04f 0900 	mov.w	r9, #0
 801c23a:	1cb1      	adds	r1, r6, #2
 801c23c:	e7d3      	b.n	801c1e6 <__gethex+0xee>
 801c23e:	f04f 0901 	mov.w	r9, #1
 801c242:	e7fa      	b.n	801c23a <__gethex+0x142>
 801c244:	230a      	movs	r3, #10
 801c246:	fb03 0202 	mla	r2, r3, r2, r0
 801c24a:	3a10      	subs	r2, #16
 801c24c:	e7d4      	b.n	801c1f8 <__gethex+0x100>
 801c24e:	4631      	mov	r1, r6
 801c250:	e7df      	b.n	801c212 <__gethex+0x11a>
 801c252:	1bf3      	subs	r3, r6, r7
 801c254:	3b01      	subs	r3, #1
 801c256:	4621      	mov	r1, r4
 801c258:	2b07      	cmp	r3, #7
 801c25a:	dc0b      	bgt.n	801c274 <__gethex+0x17c>
 801c25c:	ee18 0a10 	vmov	r0, s16
 801c260:	f000 fae6 	bl	801c830 <_Balloc>
 801c264:	4604      	mov	r4, r0
 801c266:	b940      	cbnz	r0, 801c27a <__gethex+0x182>
 801c268:	4b65      	ldr	r3, [pc, #404]	; (801c400 <__gethex+0x308>)
 801c26a:	4602      	mov	r2, r0
 801c26c:	21de      	movs	r1, #222	; 0xde
 801c26e:	4865      	ldr	r0, [pc, #404]	; (801c404 <__gethex+0x30c>)
 801c270:	f7ff fcd8 	bl	801bc24 <__assert_func>
 801c274:	3101      	adds	r1, #1
 801c276:	105b      	asrs	r3, r3, #1
 801c278:	e7ee      	b.n	801c258 <__gethex+0x160>
 801c27a:	f100 0914 	add.w	r9, r0, #20
 801c27e:	f04f 0b00 	mov.w	fp, #0
 801c282:	f1ca 0301 	rsb	r3, sl, #1
 801c286:	f8cd 9008 	str.w	r9, [sp, #8]
 801c28a:	f8cd b000 	str.w	fp, [sp]
 801c28e:	9306      	str	r3, [sp, #24]
 801c290:	42b7      	cmp	r7, r6
 801c292:	d340      	bcc.n	801c316 <__gethex+0x21e>
 801c294:	9802      	ldr	r0, [sp, #8]
 801c296:	9b00      	ldr	r3, [sp, #0]
 801c298:	f840 3b04 	str.w	r3, [r0], #4
 801c29c:	eba0 0009 	sub.w	r0, r0, r9
 801c2a0:	1080      	asrs	r0, r0, #2
 801c2a2:	0146      	lsls	r6, r0, #5
 801c2a4:	6120      	str	r0, [r4, #16]
 801c2a6:	4618      	mov	r0, r3
 801c2a8:	f000 fbb8 	bl	801ca1c <__hi0bits>
 801c2ac:	1a30      	subs	r0, r6, r0
 801c2ae:	f8d8 6000 	ldr.w	r6, [r8]
 801c2b2:	42b0      	cmp	r0, r6
 801c2b4:	dd63      	ble.n	801c37e <__gethex+0x286>
 801c2b6:	1b87      	subs	r7, r0, r6
 801c2b8:	4639      	mov	r1, r7
 801c2ba:	4620      	mov	r0, r4
 801c2bc:	f000 ff52 	bl	801d164 <__any_on>
 801c2c0:	4682      	mov	sl, r0
 801c2c2:	b1a8      	cbz	r0, 801c2f0 <__gethex+0x1f8>
 801c2c4:	1e7b      	subs	r3, r7, #1
 801c2c6:	1159      	asrs	r1, r3, #5
 801c2c8:	f003 021f 	and.w	r2, r3, #31
 801c2cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c2d0:	f04f 0a01 	mov.w	sl, #1
 801c2d4:	fa0a f202 	lsl.w	r2, sl, r2
 801c2d8:	420a      	tst	r2, r1
 801c2da:	d009      	beq.n	801c2f0 <__gethex+0x1f8>
 801c2dc:	4553      	cmp	r3, sl
 801c2de:	dd05      	ble.n	801c2ec <__gethex+0x1f4>
 801c2e0:	1eb9      	subs	r1, r7, #2
 801c2e2:	4620      	mov	r0, r4
 801c2e4:	f000 ff3e 	bl	801d164 <__any_on>
 801c2e8:	2800      	cmp	r0, #0
 801c2ea:	d145      	bne.n	801c378 <__gethex+0x280>
 801c2ec:	f04f 0a02 	mov.w	sl, #2
 801c2f0:	4639      	mov	r1, r7
 801c2f2:	4620      	mov	r0, r4
 801c2f4:	f7ff fe99 	bl	801c02a <rshift>
 801c2f8:	443d      	add	r5, r7
 801c2fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c2fe:	42ab      	cmp	r3, r5
 801c300:	da4c      	bge.n	801c39c <__gethex+0x2a4>
 801c302:	ee18 0a10 	vmov	r0, s16
 801c306:	4621      	mov	r1, r4
 801c308:	f000 fad2 	bl	801c8b0 <_Bfree>
 801c30c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c30e:	2300      	movs	r3, #0
 801c310:	6013      	str	r3, [r2, #0]
 801c312:	27a3      	movs	r7, #163	; 0xa3
 801c314:	e785      	b.n	801c222 <__gethex+0x12a>
 801c316:	1e73      	subs	r3, r6, #1
 801c318:	9a05      	ldr	r2, [sp, #20]
 801c31a:	9303      	str	r3, [sp, #12]
 801c31c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c320:	4293      	cmp	r3, r2
 801c322:	d019      	beq.n	801c358 <__gethex+0x260>
 801c324:	f1bb 0f20 	cmp.w	fp, #32
 801c328:	d107      	bne.n	801c33a <__gethex+0x242>
 801c32a:	9b02      	ldr	r3, [sp, #8]
 801c32c:	9a00      	ldr	r2, [sp, #0]
 801c32e:	f843 2b04 	str.w	r2, [r3], #4
 801c332:	9302      	str	r3, [sp, #8]
 801c334:	2300      	movs	r3, #0
 801c336:	9300      	str	r3, [sp, #0]
 801c338:	469b      	mov	fp, r3
 801c33a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801c33e:	f7ff fec6 	bl	801c0ce <__hexdig_fun>
 801c342:	9b00      	ldr	r3, [sp, #0]
 801c344:	f000 000f 	and.w	r0, r0, #15
 801c348:	fa00 f00b 	lsl.w	r0, r0, fp
 801c34c:	4303      	orrs	r3, r0
 801c34e:	9300      	str	r3, [sp, #0]
 801c350:	f10b 0b04 	add.w	fp, fp, #4
 801c354:	9b03      	ldr	r3, [sp, #12]
 801c356:	e00d      	b.n	801c374 <__gethex+0x27c>
 801c358:	9b03      	ldr	r3, [sp, #12]
 801c35a:	9a06      	ldr	r2, [sp, #24]
 801c35c:	4413      	add	r3, r2
 801c35e:	42bb      	cmp	r3, r7
 801c360:	d3e0      	bcc.n	801c324 <__gethex+0x22c>
 801c362:	4618      	mov	r0, r3
 801c364:	9901      	ldr	r1, [sp, #4]
 801c366:	9307      	str	r3, [sp, #28]
 801c368:	4652      	mov	r2, sl
 801c36a:	f7fe fbdf 	bl	801ab2c <strncmp>
 801c36e:	9b07      	ldr	r3, [sp, #28]
 801c370:	2800      	cmp	r0, #0
 801c372:	d1d7      	bne.n	801c324 <__gethex+0x22c>
 801c374:	461e      	mov	r6, r3
 801c376:	e78b      	b.n	801c290 <__gethex+0x198>
 801c378:	f04f 0a03 	mov.w	sl, #3
 801c37c:	e7b8      	b.n	801c2f0 <__gethex+0x1f8>
 801c37e:	da0a      	bge.n	801c396 <__gethex+0x29e>
 801c380:	1a37      	subs	r7, r6, r0
 801c382:	4621      	mov	r1, r4
 801c384:	ee18 0a10 	vmov	r0, s16
 801c388:	463a      	mov	r2, r7
 801c38a:	f000 fcad 	bl	801cce8 <__lshift>
 801c38e:	1bed      	subs	r5, r5, r7
 801c390:	4604      	mov	r4, r0
 801c392:	f100 0914 	add.w	r9, r0, #20
 801c396:	f04f 0a00 	mov.w	sl, #0
 801c39a:	e7ae      	b.n	801c2fa <__gethex+0x202>
 801c39c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c3a0:	42a8      	cmp	r0, r5
 801c3a2:	dd72      	ble.n	801c48a <__gethex+0x392>
 801c3a4:	1b45      	subs	r5, r0, r5
 801c3a6:	42ae      	cmp	r6, r5
 801c3a8:	dc36      	bgt.n	801c418 <__gethex+0x320>
 801c3aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c3ae:	2b02      	cmp	r3, #2
 801c3b0:	d02a      	beq.n	801c408 <__gethex+0x310>
 801c3b2:	2b03      	cmp	r3, #3
 801c3b4:	d02c      	beq.n	801c410 <__gethex+0x318>
 801c3b6:	2b01      	cmp	r3, #1
 801c3b8:	d115      	bne.n	801c3e6 <__gethex+0x2ee>
 801c3ba:	42ae      	cmp	r6, r5
 801c3bc:	d113      	bne.n	801c3e6 <__gethex+0x2ee>
 801c3be:	2e01      	cmp	r6, #1
 801c3c0:	d10b      	bne.n	801c3da <__gethex+0x2e2>
 801c3c2:	9a04      	ldr	r2, [sp, #16]
 801c3c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c3c8:	6013      	str	r3, [r2, #0]
 801c3ca:	2301      	movs	r3, #1
 801c3cc:	6123      	str	r3, [r4, #16]
 801c3ce:	f8c9 3000 	str.w	r3, [r9]
 801c3d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c3d4:	2762      	movs	r7, #98	; 0x62
 801c3d6:	601c      	str	r4, [r3, #0]
 801c3d8:	e723      	b.n	801c222 <__gethex+0x12a>
 801c3da:	1e71      	subs	r1, r6, #1
 801c3dc:	4620      	mov	r0, r4
 801c3de:	f000 fec1 	bl	801d164 <__any_on>
 801c3e2:	2800      	cmp	r0, #0
 801c3e4:	d1ed      	bne.n	801c3c2 <__gethex+0x2ca>
 801c3e6:	ee18 0a10 	vmov	r0, s16
 801c3ea:	4621      	mov	r1, r4
 801c3ec:	f000 fa60 	bl	801c8b0 <_Bfree>
 801c3f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c3f2:	2300      	movs	r3, #0
 801c3f4:	6013      	str	r3, [r2, #0]
 801c3f6:	2750      	movs	r7, #80	; 0x50
 801c3f8:	e713      	b.n	801c222 <__gethex+0x12a>
 801c3fa:	bf00      	nop
 801c3fc:	08020408 	.word	0x08020408
 801c400:	0802038c 	.word	0x0802038c
 801c404:	0802039d 	.word	0x0802039d
 801c408:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	d1eb      	bne.n	801c3e6 <__gethex+0x2ee>
 801c40e:	e7d8      	b.n	801c3c2 <__gethex+0x2ca>
 801c410:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c412:	2b00      	cmp	r3, #0
 801c414:	d1d5      	bne.n	801c3c2 <__gethex+0x2ca>
 801c416:	e7e6      	b.n	801c3e6 <__gethex+0x2ee>
 801c418:	1e6f      	subs	r7, r5, #1
 801c41a:	f1ba 0f00 	cmp.w	sl, #0
 801c41e:	d131      	bne.n	801c484 <__gethex+0x38c>
 801c420:	b127      	cbz	r7, 801c42c <__gethex+0x334>
 801c422:	4639      	mov	r1, r7
 801c424:	4620      	mov	r0, r4
 801c426:	f000 fe9d 	bl	801d164 <__any_on>
 801c42a:	4682      	mov	sl, r0
 801c42c:	117b      	asrs	r3, r7, #5
 801c42e:	2101      	movs	r1, #1
 801c430:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c434:	f007 071f 	and.w	r7, r7, #31
 801c438:	fa01 f707 	lsl.w	r7, r1, r7
 801c43c:	421f      	tst	r7, r3
 801c43e:	4629      	mov	r1, r5
 801c440:	4620      	mov	r0, r4
 801c442:	bf18      	it	ne
 801c444:	f04a 0a02 	orrne.w	sl, sl, #2
 801c448:	1b76      	subs	r6, r6, r5
 801c44a:	f7ff fdee 	bl	801c02a <rshift>
 801c44e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c452:	2702      	movs	r7, #2
 801c454:	f1ba 0f00 	cmp.w	sl, #0
 801c458:	d048      	beq.n	801c4ec <__gethex+0x3f4>
 801c45a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c45e:	2b02      	cmp	r3, #2
 801c460:	d015      	beq.n	801c48e <__gethex+0x396>
 801c462:	2b03      	cmp	r3, #3
 801c464:	d017      	beq.n	801c496 <__gethex+0x39e>
 801c466:	2b01      	cmp	r3, #1
 801c468:	d109      	bne.n	801c47e <__gethex+0x386>
 801c46a:	f01a 0f02 	tst.w	sl, #2
 801c46e:	d006      	beq.n	801c47e <__gethex+0x386>
 801c470:	f8d9 0000 	ldr.w	r0, [r9]
 801c474:	ea4a 0a00 	orr.w	sl, sl, r0
 801c478:	f01a 0f01 	tst.w	sl, #1
 801c47c:	d10e      	bne.n	801c49c <__gethex+0x3a4>
 801c47e:	f047 0710 	orr.w	r7, r7, #16
 801c482:	e033      	b.n	801c4ec <__gethex+0x3f4>
 801c484:	f04f 0a01 	mov.w	sl, #1
 801c488:	e7d0      	b.n	801c42c <__gethex+0x334>
 801c48a:	2701      	movs	r7, #1
 801c48c:	e7e2      	b.n	801c454 <__gethex+0x35c>
 801c48e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c490:	f1c3 0301 	rsb	r3, r3, #1
 801c494:	9315      	str	r3, [sp, #84]	; 0x54
 801c496:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c498:	2b00      	cmp	r3, #0
 801c49a:	d0f0      	beq.n	801c47e <__gethex+0x386>
 801c49c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c4a0:	f104 0314 	add.w	r3, r4, #20
 801c4a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c4a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c4ac:	f04f 0c00 	mov.w	ip, #0
 801c4b0:	4618      	mov	r0, r3
 801c4b2:	f853 2b04 	ldr.w	r2, [r3], #4
 801c4b6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801c4ba:	d01c      	beq.n	801c4f6 <__gethex+0x3fe>
 801c4bc:	3201      	adds	r2, #1
 801c4be:	6002      	str	r2, [r0, #0]
 801c4c0:	2f02      	cmp	r7, #2
 801c4c2:	f104 0314 	add.w	r3, r4, #20
 801c4c6:	d13f      	bne.n	801c548 <__gethex+0x450>
 801c4c8:	f8d8 2000 	ldr.w	r2, [r8]
 801c4cc:	3a01      	subs	r2, #1
 801c4ce:	42b2      	cmp	r2, r6
 801c4d0:	d10a      	bne.n	801c4e8 <__gethex+0x3f0>
 801c4d2:	1171      	asrs	r1, r6, #5
 801c4d4:	2201      	movs	r2, #1
 801c4d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c4da:	f006 061f 	and.w	r6, r6, #31
 801c4de:	fa02 f606 	lsl.w	r6, r2, r6
 801c4e2:	421e      	tst	r6, r3
 801c4e4:	bf18      	it	ne
 801c4e6:	4617      	movne	r7, r2
 801c4e8:	f047 0720 	orr.w	r7, r7, #32
 801c4ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c4ee:	601c      	str	r4, [r3, #0]
 801c4f0:	9b04      	ldr	r3, [sp, #16]
 801c4f2:	601d      	str	r5, [r3, #0]
 801c4f4:	e695      	b.n	801c222 <__gethex+0x12a>
 801c4f6:	4299      	cmp	r1, r3
 801c4f8:	f843 cc04 	str.w	ip, [r3, #-4]
 801c4fc:	d8d8      	bhi.n	801c4b0 <__gethex+0x3b8>
 801c4fe:	68a3      	ldr	r3, [r4, #8]
 801c500:	459b      	cmp	fp, r3
 801c502:	db19      	blt.n	801c538 <__gethex+0x440>
 801c504:	6861      	ldr	r1, [r4, #4]
 801c506:	ee18 0a10 	vmov	r0, s16
 801c50a:	3101      	adds	r1, #1
 801c50c:	f000 f990 	bl	801c830 <_Balloc>
 801c510:	4681      	mov	r9, r0
 801c512:	b918      	cbnz	r0, 801c51c <__gethex+0x424>
 801c514:	4b1a      	ldr	r3, [pc, #104]	; (801c580 <__gethex+0x488>)
 801c516:	4602      	mov	r2, r0
 801c518:	2184      	movs	r1, #132	; 0x84
 801c51a:	e6a8      	b.n	801c26e <__gethex+0x176>
 801c51c:	6922      	ldr	r2, [r4, #16]
 801c51e:	3202      	adds	r2, #2
 801c520:	f104 010c 	add.w	r1, r4, #12
 801c524:	0092      	lsls	r2, r2, #2
 801c526:	300c      	adds	r0, #12
 801c528:	f7fd fe88 	bl	801a23c <memcpy>
 801c52c:	4621      	mov	r1, r4
 801c52e:	ee18 0a10 	vmov	r0, s16
 801c532:	f000 f9bd 	bl	801c8b0 <_Bfree>
 801c536:	464c      	mov	r4, r9
 801c538:	6923      	ldr	r3, [r4, #16]
 801c53a:	1c5a      	adds	r2, r3, #1
 801c53c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c540:	6122      	str	r2, [r4, #16]
 801c542:	2201      	movs	r2, #1
 801c544:	615a      	str	r2, [r3, #20]
 801c546:	e7bb      	b.n	801c4c0 <__gethex+0x3c8>
 801c548:	6922      	ldr	r2, [r4, #16]
 801c54a:	455a      	cmp	r2, fp
 801c54c:	dd0b      	ble.n	801c566 <__gethex+0x46e>
 801c54e:	2101      	movs	r1, #1
 801c550:	4620      	mov	r0, r4
 801c552:	f7ff fd6a 	bl	801c02a <rshift>
 801c556:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c55a:	3501      	adds	r5, #1
 801c55c:	42ab      	cmp	r3, r5
 801c55e:	f6ff aed0 	blt.w	801c302 <__gethex+0x20a>
 801c562:	2701      	movs	r7, #1
 801c564:	e7c0      	b.n	801c4e8 <__gethex+0x3f0>
 801c566:	f016 061f 	ands.w	r6, r6, #31
 801c56a:	d0fa      	beq.n	801c562 <__gethex+0x46a>
 801c56c:	449a      	add	sl, r3
 801c56e:	f1c6 0620 	rsb	r6, r6, #32
 801c572:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801c576:	f000 fa51 	bl	801ca1c <__hi0bits>
 801c57a:	42b0      	cmp	r0, r6
 801c57c:	dbe7      	blt.n	801c54e <__gethex+0x456>
 801c57e:	e7f0      	b.n	801c562 <__gethex+0x46a>
 801c580:	0802038c 	.word	0x0802038c

0801c584 <L_shift>:
 801c584:	f1c2 0208 	rsb	r2, r2, #8
 801c588:	0092      	lsls	r2, r2, #2
 801c58a:	b570      	push	{r4, r5, r6, lr}
 801c58c:	f1c2 0620 	rsb	r6, r2, #32
 801c590:	6843      	ldr	r3, [r0, #4]
 801c592:	6804      	ldr	r4, [r0, #0]
 801c594:	fa03 f506 	lsl.w	r5, r3, r6
 801c598:	432c      	orrs	r4, r5
 801c59a:	40d3      	lsrs	r3, r2
 801c59c:	6004      	str	r4, [r0, #0]
 801c59e:	f840 3f04 	str.w	r3, [r0, #4]!
 801c5a2:	4288      	cmp	r0, r1
 801c5a4:	d3f4      	bcc.n	801c590 <L_shift+0xc>
 801c5a6:	bd70      	pop	{r4, r5, r6, pc}

0801c5a8 <__match>:
 801c5a8:	b530      	push	{r4, r5, lr}
 801c5aa:	6803      	ldr	r3, [r0, #0]
 801c5ac:	3301      	adds	r3, #1
 801c5ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c5b2:	b914      	cbnz	r4, 801c5ba <__match+0x12>
 801c5b4:	6003      	str	r3, [r0, #0]
 801c5b6:	2001      	movs	r0, #1
 801c5b8:	bd30      	pop	{r4, r5, pc}
 801c5ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c5be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c5c2:	2d19      	cmp	r5, #25
 801c5c4:	bf98      	it	ls
 801c5c6:	3220      	addls	r2, #32
 801c5c8:	42a2      	cmp	r2, r4
 801c5ca:	d0f0      	beq.n	801c5ae <__match+0x6>
 801c5cc:	2000      	movs	r0, #0
 801c5ce:	e7f3      	b.n	801c5b8 <__match+0x10>

0801c5d0 <__hexnan>:
 801c5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5d4:	680b      	ldr	r3, [r1, #0]
 801c5d6:	6801      	ldr	r1, [r0, #0]
 801c5d8:	115e      	asrs	r6, r3, #5
 801c5da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c5de:	f013 031f 	ands.w	r3, r3, #31
 801c5e2:	b087      	sub	sp, #28
 801c5e4:	bf18      	it	ne
 801c5e6:	3604      	addne	r6, #4
 801c5e8:	2500      	movs	r5, #0
 801c5ea:	1f37      	subs	r7, r6, #4
 801c5ec:	4682      	mov	sl, r0
 801c5ee:	4690      	mov	r8, r2
 801c5f0:	9301      	str	r3, [sp, #4]
 801c5f2:	f846 5c04 	str.w	r5, [r6, #-4]
 801c5f6:	46b9      	mov	r9, r7
 801c5f8:	463c      	mov	r4, r7
 801c5fa:	9502      	str	r5, [sp, #8]
 801c5fc:	46ab      	mov	fp, r5
 801c5fe:	784a      	ldrb	r2, [r1, #1]
 801c600:	1c4b      	adds	r3, r1, #1
 801c602:	9303      	str	r3, [sp, #12]
 801c604:	b342      	cbz	r2, 801c658 <__hexnan+0x88>
 801c606:	4610      	mov	r0, r2
 801c608:	9105      	str	r1, [sp, #20]
 801c60a:	9204      	str	r2, [sp, #16]
 801c60c:	f7ff fd5f 	bl	801c0ce <__hexdig_fun>
 801c610:	2800      	cmp	r0, #0
 801c612:	d14f      	bne.n	801c6b4 <__hexnan+0xe4>
 801c614:	9a04      	ldr	r2, [sp, #16]
 801c616:	9905      	ldr	r1, [sp, #20]
 801c618:	2a20      	cmp	r2, #32
 801c61a:	d818      	bhi.n	801c64e <__hexnan+0x7e>
 801c61c:	9b02      	ldr	r3, [sp, #8]
 801c61e:	459b      	cmp	fp, r3
 801c620:	dd13      	ble.n	801c64a <__hexnan+0x7a>
 801c622:	454c      	cmp	r4, r9
 801c624:	d206      	bcs.n	801c634 <__hexnan+0x64>
 801c626:	2d07      	cmp	r5, #7
 801c628:	dc04      	bgt.n	801c634 <__hexnan+0x64>
 801c62a:	462a      	mov	r2, r5
 801c62c:	4649      	mov	r1, r9
 801c62e:	4620      	mov	r0, r4
 801c630:	f7ff ffa8 	bl	801c584 <L_shift>
 801c634:	4544      	cmp	r4, r8
 801c636:	d950      	bls.n	801c6da <__hexnan+0x10a>
 801c638:	2300      	movs	r3, #0
 801c63a:	f1a4 0904 	sub.w	r9, r4, #4
 801c63e:	f844 3c04 	str.w	r3, [r4, #-4]
 801c642:	f8cd b008 	str.w	fp, [sp, #8]
 801c646:	464c      	mov	r4, r9
 801c648:	461d      	mov	r5, r3
 801c64a:	9903      	ldr	r1, [sp, #12]
 801c64c:	e7d7      	b.n	801c5fe <__hexnan+0x2e>
 801c64e:	2a29      	cmp	r2, #41	; 0x29
 801c650:	d156      	bne.n	801c700 <__hexnan+0x130>
 801c652:	3102      	adds	r1, #2
 801c654:	f8ca 1000 	str.w	r1, [sl]
 801c658:	f1bb 0f00 	cmp.w	fp, #0
 801c65c:	d050      	beq.n	801c700 <__hexnan+0x130>
 801c65e:	454c      	cmp	r4, r9
 801c660:	d206      	bcs.n	801c670 <__hexnan+0xa0>
 801c662:	2d07      	cmp	r5, #7
 801c664:	dc04      	bgt.n	801c670 <__hexnan+0xa0>
 801c666:	462a      	mov	r2, r5
 801c668:	4649      	mov	r1, r9
 801c66a:	4620      	mov	r0, r4
 801c66c:	f7ff ff8a 	bl	801c584 <L_shift>
 801c670:	4544      	cmp	r4, r8
 801c672:	d934      	bls.n	801c6de <__hexnan+0x10e>
 801c674:	f1a8 0204 	sub.w	r2, r8, #4
 801c678:	4623      	mov	r3, r4
 801c67a:	f853 1b04 	ldr.w	r1, [r3], #4
 801c67e:	f842 1f04 	str.w	r1, [r2, #4]!
 801c682:	429f      	cmp	r7, r3
 801c684:	d2f9      	bcs.n	801c67a <__hexnan+0xaa>
 801c686:	1b3b      	subs	r3, r7, r4
 801c688:	f023 0303 	bic.w	r3, r3, #3
 801c68c:	3304      	adds	r3, #4
 801c68e:	3401      	adds	r4, #1
 801c690:	3e03      	subs	r6, #3
 801c692:	42b4      	cmp	r4, r6
 801c694:	bf88      	it	hi
 801c696:	2304      	movhi	r3, #4
 801c698:	4443      	add	r3, r8
 801c69a:	2200      	movs	r2, #0
 801c69c:	f843 2b04 	str.w	r2, [r3], #4
 801c6a0:	429f      	cmp	r7, r3
 801c6a2:	d2fb      	bcs.n	801c69c <__hexnan+0xcc>
 801c6a4:	683b      	ldr	r3, [r7, #0]
 801c6a6:	b91b      	cbnz	r3, 801c6b0 <__hexnan+0xe0>
 801c6a8:	4547      	cmp	r7, r8
 801c6aa:	d127      	bne.n	801c6fc <__hexnan+0x12c>
 801c6ac:	2301      	movs	r3, #1
 801c6ae:	603b      	str	r3, [r7, #0]
 801c6b0:	2005      	movs	r0, #5
 801c6b2:	e026      	b.n	801c702 <__hexnan+0x132>
 801c6b4:	3501      	adds	r5, #1
 801c6b6:	2d08      	cmp	r5, #8
 801c6b8:	f10b 0b01 	add.w	fp, fp, #1
 801c6bc:	dd06      	ble.n	801c6cc <__hexnan+0xfc>
 801c6be:	4544      	cmp	r4, r8
 801c6c0:	d9c3      	bls.n	801c64a <__hexnan+0x7a>
 801c6c2:	2300      	movs	r3, #0
 801c6c4:	f844 3c04 	str.w	r3, [r4, #-4]
 801c6c8:	2501      	movs	r5, #1
 801c6ca:	3c04      	subs	r4, #4
 801c6cc:	6822      	ldr	r2, [r4, #0]
 801c6ce:	f000 000f 	and.w	r0, r0, #15
 801c6d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801c6d6:	6022      	str	r2, [r4, #0]
 801c6d8:	e7b7      	b.n	801c64a <__hexnan+0x7a>
 801c6da:	2508      	movs	r5, #8
 801c6dc:	e7b5      	b.n	801c64a <__hexnan+0x7a>
 801c6de:	9b01      	ldr	r3, [sp, #4]
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	d0df      	beq.n	801c6a4 <__hexnan+0xd4>
 801c6e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c6e8:	f1c3 0320 	rsb	r3, r3, #32
 801c6ec:	fa22 f303 	lsr.w	r3, r2, r3
 801c6f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c6f4:	401a      	ands	r2, r3
 801c6f6:	f846 2c04 	str.w	r2, [r6, #-4]
 801c6fa:	e7d3      	b.n	801c6a4 <__hexnan+0xd4>
 801c6fc:	3f04      	subs	r7, #4
 801c6fe:	e7d1      	b.n	801c6a4 <__hexnan+0xd4>
 801c700:	2004      	movs	r0, #4
 801c702:	b007      	add	sp, #28
 801c704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c708 <_lseek_r>:
 801c708:	b538      	push	{r3, r4, r5, lr}
 801c70a:	4d07      	ldr	r5, [pc, #28]	; (801c728 <_lseek_r+0x20>)
 801c70c:	4604      	mov	r4, r0
 801c70e:	4608      	mov	r0, r1
 801c710:	4611      	mov	r1, r2
 801c712:	2200      	movs	r2, #0
 801c714:	602a      	str	r2, [r5, #0]
 801c716:	461a      	mov	r2, r3
 801c718:	f7e7 fa80 	bl	8003c1c <_lseek>
 801c71c:	1c43      	adds	r3, r0, #1
 801c71e:	d102      	bne.n	801c726 <_lseek_r+0x1e>
 801c720:	682b      	ldr	r3, [r5, #0]
 801c722:	b103      	cbz	r3, 801c726 <_lseek_r+0x1e>
 801c724:	6023      	str	r3, [r4, #0]
 801c726:	bd38      	pop	{r3, r4, r5, pc}
 801c728:	2001602c 	.word	0x2001602c

0801c72c <__swhatbuf_r>:
 801c72c:	b570      	push	{r4, r5, r6, lr}
 801c72e:	460e      	mov	r6, r1
 801c730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c734:	2900      	cmp	r1, #0
 801c736:	b096      	sub	sp, #88	; 0x58
 801c738:	4614      	mov	r4, r2
 801c73a:	461d      	mov	r5, r3
 801c73c:	da07      	bge.n	801c74e <__swhatbuf_r+0x22>
 801c73e:	2300      	movs	r3, #0
 801c740:	602b      	str	r3, [r5, #0]
 801c742:	89b3      	ldrh	r3, [r6, #12]
 801c744:	061a      	lsls	r2, r3, #24
 801c746:	d410      	bmi.n	801c76a <__swhatbuf_r+0x3e>
 801c748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c74c:	e00e      	b.n	801c76c <__swhatbuf_r+0x40>
 801c74e:	466a      	mov	r2, sp
 801c750:	f001 fd5a 	bl	801e208 <_fstat_r>
 801c754:	2800      	cmp	r0, #0
 801c756:	dbf2      	blt.n	801c73e <__swhatbuf_r+0x12>
 801c758:	9a01      	ldr	r2, [sp, #4]
 801c75a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c75e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c762:	425a      	negs	r2, r3
 801c764:	415a      	adcs	r2, r3
 801c766:	602a      	str	r2, [r5, #0]
 801c768:	e7ee      	b.n	801c748 <__swhatbuf_r+0x1c>
 801c76a:	2340      	movs	r3, #64	; 0x40
 801c76c:	2000      	movs	r0, #0
 801c76e:	6023      	str	r3, [r4, #0]
 801c770:	b016      	add	sp, #88	; 0x58
 801c772:	bd70      	pop	{r4, r5, r6, pc}

0801c774 <__smakebuf_r>:
 801c774:	898b      	ldrh	r3, [r1, #12]
 801c776:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c778:	079d      	lsls	r5, r3, #30
 801c77a:	4606      	mov	r6, r0
 801c77c:	460c      	mov	r4, r1
 801c77e:	d507      	bpl.n	801c790 <__smakebuf_r+0x1c>
 801c780:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c784:	6023      	str	r3, [r4, #0]
 801c786:	6123      	str	r3, [r4, #16]
 801c788:	2301      	movs	r3, #1
 801c78a:	6163      	str	r3, [r4, #20]
 801c78c:	b002      	add	sp, #8
 801c78e:	bd70      	pop	{r4, r5, r6, pc}
 801c790:	ab01      	add	r3, sp, #4
 801c792:	466a      	mov	r2, sp
 801c794:	f7ff ffca 	bl	801c72c <__swhatbuf_r>
 801c798:	9900      	ldr	r1, [sp, #0]
 801c79a:	4605      	mov	r5, r0
 801c79c:	4630      	mov	r0, r6
 801c79e:	f7fd fddd 	bl	801a35c <_malloc_r>
 801c7a2:	b948      	cbnz	r0, 801c7b8 <__smakebuf_r+0x44>
 801c7a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c7a8:	059a      	lsls	r2, r3, #22
 801c7aa:	d4ef      	bmi.n	801c78c <__smakebuf_r+0x18>
 801c7ac:	f023 0303 	bic.w	r3, r3, #3
 801c7b0:	f043 0302 	orr.w	r3, r3, #2
 801c7b4:	81a3      	strh	r3, [r4, #12]
 801c7b6:	e7e3      	b.n	801c780 <__smakebuf_r+0xc>
 801c7b8:	4b0d      	ldr	r3, [pc, #52]	; (801c7f0 <__smakebuf_r+0x7c>)
 801c7ba:	62b3      	str	r3, [r6, #40]	; 0x28
 801c7bc:	89a3      	ldrh	r3, [r4, #12]
 801c7be:	6020      	str	r0, [r4, #0]
 801c7c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c7c4:	81a3      	strh	r3, [r4, #12]
 801c7c6:	9b00      	ldr	r3, [sp, #0]
 801c7c8:	6163      	str	r3, [r4, #20]
 801c7ca:	9b01      	ldr	r3, [sp, #4]
 801c7cc:	6120      	str	r0, [r4, #16]
 801c7ce:	b15b      	cbz	r3, 801c7e8 <__smakebuf_r+0x74>
 801c7d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c7d4:	4630      	mov	r0, r6
 801c7d6:	f001 fd29 	bl	801e22c <_isatty_r>
 801c7da:	b128      	cbz	r0, 801c7e8 <__smakebuf_r+0x74>
 801c7dc:	89a3      	ldrh	r3, [r4, #12]
 801c7de:	f023 0303 	bic.w	r3, r3, #3
 801c7e2:	f043 0301 	orr.w	r3, r3, #1
 801c7e6:	81a3      	strh	r3, [r4, #12]
 801c7e8:	89a0      	ldrh	r0, [r4, #12]
 801c7ea:	4305      	orrs	r5, r0
 801c7ec:	81a5      	strh	r5, [r4, #12]
 801c7ee:	e7cd      	b.n	801c78c <__smakebuf_r+0x18>
 801c7f0:	0801be65 	.word	0x0801be65

0801c7f4 <__ascii_mbtowc>:
 801c7f4:	b082      	sub	sp, #8
 801c7f6:	b901      	cbnz	r1, 801c7fa <__ascii_mbtowc+0x6>
 801c7f8:	a901      	add	r1, sp, #4
 801c7fa:	b142      	cbz	r2, 801c80e <__ascii_mbtowc+0x1a>
 801c7fc:	b14b      	cbz	r3, 801c812 <__ascii_mbtowc+0x1e>
 801c7fe:	7813      	ldrb	r3, [r2, #0]
 801c800:	600b      	str	r3, [r1, #0]
 801c802:	7812      	ldrb	r2, [r2, #0]
 801c804:	1e10      	subs	r0, r2, #0
 801c806:	bf18      	it	ne
 801c808:	2001      	movne	r0, #1
 801c80a:	b002      	add	sp, #8
 801c80c:	4770      	bx	lr
 801c80e:	4610      	mov	r0, r2
 801c810:	e7fb      	b.n	801c80a <__ascii_mbtowc+0x16>
 801c812:	f06f 0001 	mvn.w	r0, #1
 801c816:	e7f8      	b.n	801c80a <__ascii_mbtowc+0x16>

0801c818 <__malloc_lock>:
 801c818:	4801      	ldr	r0, [pc, #4]	; (801c820 <__malloc_lock+0x8>)
 801c81a:	f7fd bcfc 	b.w	801a216 <__retarget_lock_acquire_recursive>
 801c81e:	bf00      	nop
 801c820:	20016024 	.word	0x20016024

0801c824 <__malloc_unlock>:
 801c824:	4801      	ldr	r0, [pc, #4]	; (801c82c <__malloc_unlock+0x8>)
 801c826:	f7fd bcf7 	b.w	801a218 <__retarget_lock_release_recursive>
 801c82a:	bf00      	nop
 801c82c:	20016024 	.word	0x20016024

0801c830 <_Balloc>:
 801c830:	b570      	push	{r4, r5, r6, lr}
 801c832:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c834:	4604      	mov	r4, r0
 801c836:	460d      	mov	r5, r1
 801c838:	b976      	cbnz	r6, 801c858 <_Balloc+0x28>
 801c83a:	2010      	movs	r0, #16
 801c83c:	f7fd fcee 	bl	801a21c <malloc>
 801c840:	4602      	mov	r2, r0
 801c842:	6260      	str	r0, [r4, #36]	; 0x24
 801c844:	b920      	cbnz	r0, 801c850 <_Balloc+0x20>
 801c846:	4b18      	ldr	r3, [pc, #96]	; (801c8a8 <_Balloc+0x78>)
 801c848:	4818      	ldr	r0, [pc, #96]	; (801c8ac <_Balloc+0x7c>)
 801c84a:	2166      	movs	r1, #102	; 0x66
 801c84c:	f7ff f9ea 	bl	801bc24 <__assert_func>
 801c850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c854:	6006      	str	r6, [r0, #0]
 801c856:	60c6      	str	r6, [r0, #12]
 801c858:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c85a:	68f3      	ldr	r3, [r6, #12]
 801c85c:	b183      	cbz	r3, 801c880 <_Balloc+0x50>
 801c85e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c860:	68db      	ldr	r3, [r3, #12]
 801c862:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c866:	b9b8      	cbnz	r0, 801c898 <_Balloc+0x68>
 801c868:	2101      	movs	r1, #1
 801c86a:	fa01 f605 	lsl.w	r6, r1, r5
 801c86e:	1d72      	adds	r2, r6, #5
 801c870:	0092      	lsls	r2, r2, #2
 801c872:	4620      	mov	r0, r4
 801c874:	f7fd fd12 	bl	801a29c <_calloc_r>
 801c878:	b160      	cbz	r0, 801c894 <_Balloc+0x64>
 801c87a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c87e:	e00e      	b.n	801c89e <_Balloc+0x6e>
 801c880:	2221      	movs	r2, #33	; 0x21
 801c882:	2104      	movs	r1, #4
 801c884:	4620      	mov	r0, r4
 801c886:	f7fd fd09 	bl	801a29c <_calloc_r>
 801c88a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c88c:	60f0      	str	r0, [r6, #12]
 801c88e:	68db      	ldr	r3, [r3, #12]
 801c890:	2b00      	cmp	r3, #0
 801c892:	d1e4      	bne.n	801c85e <_Balloc+0x2e>
 801c894:	2000      	movs	r0, #0
 801c896:	bd70      	pop	{r4, r5, r6, pc}
 801c898:	6802      	ldr	r2, [r0, #0]
 801c89a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c89e:	2300      	movs	r3, #0
 801c8a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c8a4:	e7f7      	b.n	801c896 <_Balloc+0x66>
 801c8a6:	bf00      	nop
 801c8a8:	0802021d 	.word	0x0802021d
 801c8ac:	0802041c 	.word	0x0802041c

0801c8b0 <_Bfree>:
 801c8b0:	b570      	push	{r4, r5, r6, lr}
 801c8b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c8b4:	4605      	mov	r5, r0
 801c8b6:	460c      	mov	r4, r1
 801c8b8:	b976      	cbnz	r6, 801c8d8 <_Bfree+0x28>
 801c8ba:	2010      	movs	r0, #16
 801c8bc:	f7fd fcae 	bl	801a21c <malloc>
 801c8c0:	4602      	mov	r2, r0
 801c8c2:	6268      	str	r0, [r5, #36]	; 0x24
 801c8c4:	b920      	cbnz	r0, 801c8d0 <_Bfree+0x20>
 801c8c6:	4b09      	ldr	r3, [pc, #36]	; (801c8ec <_Bfree+0x3c>)
 801c8c8:	4809      	ldr	r0, [pc, #36]	; (801c8f0 <_Bfree+0x40>)
 801c8ca:	218a      	movs	r1, #138	; 0x8a
 801c8cc:	f7ff f9aa 	bl	801bc24 <__assert_func>
 801c8d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c8d4:	6006      	str	r6, [r0, #0]
 801c8d6:	60c6      	str	r6, [r0, #12]
 801c8d8:	b13c      	cbz	r4, 801c8ea <_Bfree+0x3a>
 801c8da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c8dc:	6862      	ldr	r2, [r4, #4]
 801c8de:	68db      	ldr	r3, [r3, #12]
 801c8e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c8e4:	6021      	str	r1, [r4, #0]
 801c8e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c8ea:	bd70      	pop	{r4, r5, r6, pc}
 801c8ec:	0802021d 	.word	0x0802021d
 801c8f0:	0802041c 	.word	0x0802041c

0801c8f4 <__multadd>:
 801c8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8f8:	690e      	ldr	r6, [r1, #16]
 801c8fa:	4607      	mov	r7, r0
 801c8fc:	4698      	mov	r8, r3
 801c8fe:	460c      	mov	r4, r1
 801c900:	f101 0014 	add.w	r0, r1, #20
 801c904:	2300      	movs	r3, #0
 801c906:	6805      	ldr	r5, [r0, #0]
 801c908:	b2a9      	uxth	r1, r5
 801c90a:	fb02 8101 	mla	r1, r2, r1, r8
 801c90e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801c912:	0c2d      	lsrs	r5, r5, #16
 801c914:	fb02 c505 	mla	r5, r2, r5, ip
 801c918:	b289      	uxth	r1, r1
 801c91a:	3301      	adds	r3, #1
 801c91c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801c920:	429e      	cmp	r6, r3
 801c922:	f840 1b04 	str.w	r1, [r0], #4
 801c926:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801c92a:	dcec      	bgt.n	801c906 <__multadd+0x12>
 801c92c:	f1b8 0f00 	cmp.w	r8, #0
 801c930:	d022      	beq.n	801c978 <__multadd+0x84>
 801c932:	68a3      	ldr	r3, [r4, #8]
 801c934:	42b3      	cmp	r3, r6
 801c936:	dc19      	bgt.n	801c96c <__multadd+0x78>
 801c938:	6861      	ldr	r1, [r4, #4]
 801c93a:	4638      	mov	r0, r7
 801c93c:	3101      	adds	r1, #1
 801c93e:	f7ff ff77 	bl	801c830 <_Balloc>
 801c942:	4605      	mov	r5, r0
 801c944:	b928      	cbnz	r0, 801c952 <__multadd+0x5e>
 801c946:	4602      	mov	r2, r0
 801c948:	4b0d      	ldr	r3, [pc, #52]	; (801c980 <__multadd+0x8c>)
 801c94a:	480e      	ldr	r0, [pc, #56]	; (801c984 <__multadd+0x90>)
 801c94c:	21b5      	movs	r1, #181	; 0xb5
 801c94e:	f7ff f969 	bl	801bc24 <__assert_func>
 801c952:	6922      	ldr	r2, [r4, #16]
 801c954:	3202      	adds	r2, #2
 801c956:	f104 010c 	add.w	r1, r4, #12
 801c95a:	0092      	lsls	r2, r2, #2
 801c95c:	300c      	adds	r0, #12
 801c95e:	f7fd fc6d 	bl	801a23c <memcpy>
 801c962:	4621      	mov	r1, r4
 801c964:	4638      	mov	r0, r7
 801c966:	f7ff ffa3 	bl	801c8b0 <_Bfree>
 801c96a:	462c      	mov	r4, r5
 801c96c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801c970:	3601      	adds	r6, #1
 801c972:	f8c3 8014 	str.w	r8, [r3, #20]
 801c976:	6126      	str	r6, [r4, #16]
 801c978:	4620      	mov	r0, r4
 801c97a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c97e:	bf00      	nop
 801c980:	0802038c 	.word	0x0802038c
 801c984:	0802041c 	.word	0x0802041c

0801c988 <__s2b>:
 801c988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c98c:	460c      	mov	r4, r1
 801c98e:	4615      	mov	r5, r2
 801c990:	461f      	mov	r7, r3
 801c992:	2209      	movs	r2, #9
 801c994:	3308      	adds	r3, #8
 801c996:	4606      	mov	r6, r0
 801c998:	fb93 f3f2 	sdiv	r3, r3, r2
 801c99c:	2100      	movs	r1, #0
 801c99e:	2201      	movs	r2, #1
 801c9a0:	429a      	cmp	r2, r3
 801c9a2:	db09      	blt.n	801c9b8 <__s2b+0x30>
 801c9a4:	4630      	mov	r0, r6
 801c9a6:	f7ff ff43 	bl	801c830 <_Balloc>
 801c9aa:	b940      	cbnz	r0, 801c9be <__s2b+0x36>
 801c9ac:	4602      	mov	r2, r0
 801c9ae:	4b19      	ldr	r3, [pc, #100]	; (801ca14 <__s2b+0x8c>)
 801c9b0:	4819      	ldr	r0, [pc, #100]	; (801ca18 <__s2b+0x90>)
 801c9b2:	21ce      	movs	r1, #206	; 0xce
 801c9b4:	f7ff f936 	bl	801bc24 <__assert_func>
 801c9b8:	0052      	lsls	r2, r2, #1
 801c9ba:	3101      	adds	r1, #1
 801c9bc:	e7f0      	b.n	801c9a0 <__s2b+0x18>
 801c9be:	9b08      	ldr	r3, [sp, #32]
 801c9c0:	6143      	str	r3, [r0, #20]
 801c9c2:	2d09      	cmp	r5, #9
 801c9c4:	f04f 0301 	mov.w	r3, #1
 801c9c8:	6103      	str	r3, [r0, #16]
 801c9ca:	dd16      	ble.n	801c9fa <__s2b+0x72>
 801c9cc:	f104 0909 	add.w	r9, r4, #9
 801c9d0:	46c8      	mov	r8, r9
 801c9d2:	442c      	add	r4, r5
 801c9d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c9d8:	4601      	mov	r1, r0
 801c9da:	3b30      	subs	r3, #48	; 0x30
 801c9dc:	220a      	movs	r2, #10
 801c9de:	4630      	mov	r0, r6
 801c9e0:	f7ff ff88 	bl	801c8f4 <__multadd>
 801c9e4:	45a0      	cmp	r8, r4
 801c9e6:	d1f5      	bne.n	801c9d4 <__s2b+0x4c>
 801c9e8:	f1a5 0408 	sub.w	r4, r5, #8
 801c9ec:	444c      	add	r4, r9
 801c9ee:	1b2d      	subs	r5, r5, r4
 801c9f0:	1963      	adds	r3, r4, r5
 801c9f2:	42bb      	cmp	r3, r7
 801c9f4:	db04      	blt.n	801ca00 <__s2b+0x78>
 801c9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c9fa:	340a      	adds	r4, #10
 801c9fc:	2509      	movs	r5, #9
 801c9fe:	e7f6      	b.n	801c9ee <__s2b+0x66>
 801ca00:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ca04:	4601      	mov	r1, r0
 801ca06:	3b30      	subs	r3, #48	; 0x30
 801ca08:	220a      	movs	r2, #10
 801ca0a:	4630      	mov	r0, r6
 801ca0c:	f7ff ff72 	bl	801c8f4 <__multadd>
 801ca10:	e7ee      	b.n	801c9f0 <__s2b+0x68>
 801ca12:	bf00      	nop
 801ca14:	0802038c 	.word	0x0802038c
 801ca18:	0802041c 	.word	0x0802041c

0801ca1c <__hi0bits>:
 801ca1c:	0c03      	lsrs	r3, r0, #16
 801ca1e:	041b      	lsls	r3, r3, #16
 801ca20:	b9d3      	cbnz	r3, 801ca58 <__hi0bits+0x3c>
 801ca22:	0400      	lsls	r0, r0, #16
 801ca24:	2310      	movs	r3, #16
 801ca26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ca2a:	bf04      	itt	eq
 801ca2c:	0200      	lsleq	r0, r0, #8
 801ca2e:	3308      	addeq	r3, #8
 801ca30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ca34:	bf04      	itt	eq
 801ca36:	0100      	lsleq	r0, r0, #4
 801ca38:	3304      	addeq	r3, #4
 801ca3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ca3e:	bf04      	itt	eq
 801ca40:	0080      	lsleq	r0, r0, #2
 801ca42:	3302      	addeq	r3, #2
 801ca44:	2800      	cmp	r0, #0
 801ca46:	db05      	blt.n	801ca54 <__hi0bits+0x38>
 801ca48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ca4c:	f103 0301 	add.w	r3, r3, #1
 801ca50:	bf08      	it	eq
 801ca52:	2320      	moveq	r3, #32
 801ca54:	4618      	mov	r0, r3
 801ca56:	4770      	bx	lr
 801ca58:	2300      	movs	r3, #0
 801ca5a:	e7e4      	b.n	801ca26 <__hi0bits+0xa>

0801ca5c <__lo0bits>:
 801ca5c:	6803      	ldr	r3, [r0, #0]
 801ca5e:	f013 0207 	ands.w	r2, r3, #7
 801ca62:	4601      	mov	r1, r0
 801ca64:	d00b      	beq.n	801ca7e <__lo0bits+0x22>
 801ca66:	07da      	lsls	r2, r3, #31
 801ca68:	d424      	bmi.n	801cab4 <__lo0bits+0x58>
 801ca6a:	0798      	lsls	r0, r3, #30
 801ca6c:	bf49      	itett	mi
 801ca6e:	085b      	lsrmi	r3, r3, #1
 801ca70:	089b      	lsrpl	r3, r3, #2
 801ca72:	2001      	movmi	r0, #1
 801ca74:	600b      	strmi	r3, [r1, #0]
 801ca76:	bf5c      	itt	pl
 801ca78:	600b      	strpl	r3, [r1, #0]
 801ca7a:	2002      	movpl	r0, #2
 801ca7c:	4770      	bx	lr
 801ca7e:	b298      	uxth	r0, r3
 801ca80:	b9b0      	cbnz	r0, 801cab0 <__lo0bits+0x54>
 801ca82:	0c1b      	lsrs	r3, r3, #16
 801ca84:	2010      	movs	r0, #16
 801ca86:	f013 0fff 	tst.w	r3, #255	; 0xff
 801ca8a:	bf04      	itt	eq
 801ca8c:	0a1b      	lsreq	r3, r3, #8
 801ca8e:	3008      	addeq	r0, #8
 801ca90:	071a      	lsls	r2, r3, #28
 801ca92:	bf04      	itt	eq
 801ca94:	091b      	lsreq	r3, r3, #4
 801ca96:	3004      	addeq	r0, #4
 801ca98:	079a      	lsls	r2, r3, #30
 801ca9a:	bf04      	itt	eq
 801ca9c:	089b      	lsreq	r3, r3, #2
 801ca9e:	3002      	addeq	r0, #2
 801caa0:	07da      	lsls	r2, r3, #31
 801caa2:	d403      	bmi.n	801caac <__lo0bits+0x50>
 801caa4:	085b      	lsrs	r3, r3, #1
 801caa6:	f100 0001 	add.w	r0, r0, #1
 801caaa:	d005      	beq.n	801cab8 <__lo0bits+0x5c>
 801caac:	600b      	str	r3, [r1, #0]
 801caae:	4770      	bx	lr
 801cab0:	4610      	mov	r0, r2
 801cab2:	e7e8      	b.n	801ca86 <__lo0bits+0x2a>
 801cab4:	2000      	movs	r0, #0
 801cab6:	4770      	bx	lr
 801cab8:	2020      	movs	r0, #32
 801caba:	4770      	bx	lr

0801cabc <__i2b>:
 801cabc:	b510      	push	{r4, lr}
 801cabe:	460c      	mov	r4, r1
 801cac0:	2101      	movs	r1, #1
 801cac2:	f7ff feb5 	bl	801c830 <_Balloc>
 801cac6:	4602      	mov	r2, r0
 801cac8:	b928      	cbnz	r0, 801cad6 <__i2b+0x1a>
 801caca:	4b05      	ldr	r3, [pc, #20]	; (801cae0 <__i2b+0x24>)
 801cacc:	4805      	ldr	r0, [pc, #20]	; (801cae4 <__i2b+0x28>)
 801cace:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801cad2:	f7ff f8a7 	bl	801bc24 <__assert_func>
 801cad6:	2301      	movs	r3, #1
 801cad8:	6144      	str	r4, [r0, #20]
 801cada:	6103      	str	r3, [r0, #16]
 801cadc:	bd10      	pop	{r4, pc}
 801cade:	bf00      	nop
 801cae0:	0802038c 	.word	0x0802038c
 801cae4:	0802041c 	.word	0x0802041c

0801cae8 <__multiply>:
 801cae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801caec:	4614      	mov	r4, r2
 801caee:	690a      	ldr	r2, [r1, #16]
 801caf0:	6923      	ldr	r3, [r4, #16]
 801caf2:	429a      	cmp	r2, r3
 801caf4:	bfb8      	it	lt
 801caf6:	460b      	movlt	r3, r1
 801caf8:	460d      	mov	r5, r1
 801cafa:	bfbc      	itt	lt
 801cafc:	4625      	movlt	r5, r4
 801cafe:	461c      	movlt	r4, r3
 801cb00:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801cb04:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801cb08:	68ab      	ldr	r3, [r5, #8]
 801cb0a:	6869      	ldr	r1, [r5, #4]
 801cb0c:	eb0a 0709 	add.w	r7, sl, r9
 801cb10:	42bb      	cmp	r3, r7
 801cb12:	b085      	sub	sp, #20
 801cb14:	bfb8      	it	lt
 801cb16:	3101      	addlt	r1, #1
 801cb18:	f7ff fe8a 	bl	801c830 <_Balloc>
 801cb1c:	b930      	cbnz	r0, 801cb2c <__multiply+0x44>
 801cb1e:	4602      	mov	r2, r0
 801cb20:	4b42      	ldr	r3, [pc, #264]	; (801cc2c <__multiply+0x144>)
 801cb22:	4843      	ldr	r0, [pc, #268]	; (801cc30 <__multiply+0x148>)
 801cb24:	f240 115d 	movw	r1, #349	; 0x15d
 801cb28:	f7ff f87c 	bl	801bc24 <__assert_func>
 801cb2c:	f100 0614 	add.w	r6, r0, #20
 801cb30:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801cb34:	4633      	mov	r3, r6
 801cb36:	2200      	movs	r2, #0
 801cb38:	4543      	cmp	r3, r8
 801cb3a:	d31e      	bcc.n	801cb7a <__multiply+0x92>
 801cb3c:	f105 0c14 	add.w	ip, r5, #20
 801cb40:	f104 0314 	add.w	r3, r4, #20
 801cb44:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801cb48:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801cb4c:	9202      	str	r2, [sp, #8]
 801cb4e:	ebac 0205 	sub.w	r2, ip, r5
 801cb52:	3a15      	subs	r2, #21
 801cb54:	f022 0203 	bic.w	r2, r2, #3
 801cb58:	3204      	adds	r2, #4
 801cb5a:	f105 0115 	add.w	r1, r5, #21
 801cb5e:	458c      	cmp	ip, r1
 801cb60:	bf38      	it	cc
 801cb62:	2204      	movcc	r2, #4
 801cb64:	9201      	str	r2, [sp, #4]
 801cb66:	9a02      	ldr	r2, [sp, #8]
 801cb68:	9303      	str	r3, [sp, #12]
 801cb6a:	429a      	cmp	r2, r3
 801cb6c:	d808      	bhi.n	801cb80 <__multiply+0x98>
 801cb6e:	2f00      	cmp	r7, #0
 801cb70:	dc55      	bgt.n	801cc1e <__multiply+0x136>
 801cb72:	6107      	str	r7, [r0, #16]
 801cb74:	b005      	add	sp, #20
 801cb76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb7a:	f843 2b04 	str.w	r2, [r3], #4
 801cb7e:	e7db      	b.n	801cb38 <__multiply+0x50>
 801cb80:	f8b3 a000 	ldrh.w	sl, [r3]
 801cb84:	f1ba 0f00 	cmp.w	sl, #0
 801cb88:	d020      	beq.n	801cbcc <__multiply+0xe4>
 801cb8a:	f105 0e14 	add.w	lr, r5, #20
 801cb8e:	46b1      	mov	r9, r6
 801cb90:	2200      	movs	r2, #0
 801cb92:	f85e 4b04 	ldr.w	r4, [lr], #4
 801cb96:	f8d9 b000 	ldr.w	fp, [r9]
 801cb9a:	b2a1      	uxth	r1, r4
 801cb9c:	fa1f fb8b 	uxth.w	fp, fp
 801cba0:	fb0a b101 	mla	r1, sl, r1, fp
 801cba4:	4411      	add	r1, r2
 801cba6:	f8d9 2000 	ldr.w	r2, [r9]
 801cbaa:	0c24      	lsrs	r4, r4, #16
 801cbac:	0c12      	lsrs	r2, r2, #16
 801cbae:	fb0a 2404 	mla	r4, sl, r4, r2
 801cbb2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801cbb6:	b289      	uxth	r1, r1
 801cbb8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801cbbc:	45f4      	cmp	ip, lr
 801cbbe:	f849 1b04 	str.w	r1, [r9], #4
 801cbc2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801cbc6:	d8e4      	bhi.n	801cb92 <__multiply+0xaa>
 801cbc8:	9901      	ldr	r1, [sp, #4]
 801cbca:	5072      	str	r2, [r6, r1]
 801cbcc:	9a03      	ldr	r2, [sp, #12]
 801cbce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801cbd2:	3304      	adds	r3, #4
 801cbd4:	f1b9 0f00 	cmp.w	r9, #0
 801cbd8:	d01f      	beq.n	801cc1a <__multiply+0x132>
 801cbda:	6834      	ldr	r4, [r6, #0]
 801cbdc:	f105 0114 	add.w	r1, r5, #20
 801cbe0:	46b6      	mov	lr, r6
 801cbe2:	f04f 0a00 	mov.w	sl, #0
 801cbe6:	880a      	ldrh	r2, [r1, #0]
 801cbe8:	f8be b002 	ldrh.w	fp, [lr, #2]
 801cbec:	fb09 b202 	mla	r2, r9, r2, fp
 801cbf0:	4492      	add	sl, r2
 801cbf2:	b2a4      	uxth	r4, r4
 801cbf4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801cbf8:	f84e 4b04 	str.w	r4, [lr], #4
 801cbfc:	f851 4b04 	ldr.w	r4, [r1], #4
 801cc00:	f8be 2000 	ldrh.w	r2, [lr]
 801cc04:	0c24      	lsrs	r4, r4, #16
 801cc06:	fb09 2404 	mla	r4, r9, r4, r2
 801cc0a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801cc0e:	458c      	cmp	ip, r1
 801cc10:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801cc14:	d8e7      	bhi.n	801cbe6 <__multiply+0xfe>
 801cc16:	9a01      	ldr	r2, [sp, #4]
 801cc18:	50b4      	str	r4, [r6, r2]
 801cc1a:	3604      	adds	r6, #4
 801cc1c:	e7a3      	b.n	801cb66 <__multiply+0x7e>
 801cc1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	d1a5      	bne.n	801cb72 <__multiply+0x8a>
 801cc26:	3f01      	subs	r7, #1
 801cc28:	e7a1      	b.n	801cb6e <__multiply+0x86>
 801cc2a:	bf00      	nop
 801cc2c:	0802038c 	.word	0x0802038c
 801cc30:	0802041c 	.word	0x0802041c

0801cc34 <__pow5mult>:
 801cc34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc38:	4615      	mov	r5, r2
 801cc3a:	f012 0203 	ands.w	r2, r2, #3
 801cc3e:	4606      	mov	r6, r0
 801cc40:	460f      	mov	r7, r1
 801cc42:	d007      	beq.n	801cc54 <__pow5mult+0x20>
 801cc44:	4c25      	ldr	r4, [pc, #148]	; (801ccdc <__pow5mult+0xa8>)
 801cc46:	3a01      	subs	r2, #1
 801cc48:	2300      	movs	r3, #0
 801cc4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801cc4e:	f7ff fe51 	bl	801c8f4 <__multadd>
 801cc52:	4607      	mov	r7, r0
 801cc54:	10ad      	asrs	r5, r5, #2
 801cc56:	d03d      	beq.n	801ccd4 <__pow5mult+0xa0>
 801cc58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801cc5a:	b97c      	cbnz	r4, 801cc7c <__pow5mult+0x48>
 801cc5c:	2010      	movs	r0, #16
 801cc5e:	f7fd fadd 	bl	801a21c <malloc>
 801cc62:	4602      	mov	r2, r0
 801cc64:	6270      	str	r0, [r6, #36]	; 0x24
 801cc66:	b928      	cbnz	r0, 801cc74 <__pow5mult+0x40>
 801cc68:	4b1d      	ldr	r3, [pc, #116]	; (801cce0 <__pow5mult+0xac>)
 801cc6a:	481e      	ldr	r0, [pc, #120]	; (801cce4 <__pow5mult+0xb0>)
 801cc6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801cc70:	f7fe ffd8 	bl	801bc24 <__assert_func>
 801cc74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cc78:	6004      	str	r4, [r0, #0]
 801cc7a:	60c4      	str	r4, [r0, #12]
 801cc7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801cc80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cc84:	b94c      	cbnz	r4, 801cc9a <__pow5mult+0x66>
 801cc86:	f240 2171 	movw	r1, #625	; 0x271
 801cc8a:	4630      	mov	r0, r6
 801cc8c:	f7ff ff16 	bl	801cabc <__i2b>
 801cc90:	2300      	movs	r3, #0
 801cc92:	f8c8 0008 	str.w	r0, [r8, #8]
 801cc96:	4604      	mov	r4, r0
 801cc98:	6003      	str	r3, [r0, #0]
 801cc9a:	f04f 0900 	mov.w	r9, #0
 801cc9e:	07eb      	lsls	r3, r5, #31
 801cca0:	d50a      	bpl.n	801ccb8 <__pow5mult+0x84>
 801cca2:	4639      	mov	r1, r7
 801cca4:	4622      	mov	r2, r4
 801cca6:	4630      	mov	r0, r6
 801cca8:	f7ff ff1e 	bl	801cae8 <__multiply>
 801ccac:	4639      	mov	r1, r7
 801ccae:	4680      	mov	r8, r0
 801ccb0:	4630      	mov	r0, r6
 801ccb2:	f7ff fdfd 	bl	801c8b0 <_Bfree>
 801ccb6:	4647      	mov	r7, r8
 801ccb8:	106d      	asrs	r5, r5, #1
 801ccba:	d00b      	beq.n	801ccd4 <__pow5mult+0xa0>
 801ccbc:	6820      	ldr	r0, [r4, #0]
 801ccbe:	b938      	cbnz	r0, 801ccd0 <__pow5mult+0x9c>
 801ccc0:	4622      	mov	r2, r4
 801ccc2:	4621      	mov	r1, r4
 801ccc4:	4630      	mov	r0, r6
 801ccc6:	f7ff ff0f 	bl	801cae8 <__multiply>
 801ccca:	6020      	str	r0, [r4, #0]
 801cccc:	f8c0 9000 	str.w	r9, [r0]
 801ccd0:	4604      	mov	r4, r0
 801ccd2:	e7e4      	b.n	801cc9e <__pow5mult+0x6a>
 801ccd4:	4638      	mov	r0, r7
 801ccd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ccda:	bf00      	nop
 801ccdc:	08020570 	.word	0x08020570
 801cce0:	0802021d 	.word	0x0802021d
 801cce4:	0802041c 	.word	0x0802041c

0801cce8 <__lshift>:
 801cce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ccec:	460c      	mov	r4, r1
 801ccee:	6849      	ldr	r1, [r1, #4]
 801ccf0:	6923      	ldr	r3, [r4, #16]
 801ccf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ccf6:	68a3      	ldr	r3, [r4, #8]
 801ccf8:	4607      	mov	r7, r0
 801ccfa:	4691      	mov	r9, r2
 801ccfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cd00:	f108 0601 	add.w	r6, r8, #1
 801cd04:	42b3      	cmp	r3, r6
 801cd06:	db0b      	blt.n	801cd20 <__lshift+0x38>
 801cd08:	4638      	mov	r0, r7
 801cd0a:	f7ff fd91 	bl	801c830 <_Balloc>
 801cd0e:	4605      	mov	r5, r0
 801cd10:	b948      	cbnz	r0, 801cd26 <__lshift+0x3e>
 801cd12:	4602      	mov	r2, r0
 801cd14:	4b28      	ldr	r3, [pc, #160]	; (801cdb8 <__lshift+0xd0>)
 801cd16:	4829      	ldr	r0, [pc, #164]	; (801cdbc <__lshift+0xd4>)
 801cd18:	f240 11d9 	movw	r1, #473	; 0x1d9
 801cd1c:	f7fe ff82 	bl	801bc24 <__assert_func>
 801cd20:	3101      	adds	r1, #1
 801cd22:	005b      	lsls	r3, r3, #1
 801cd24:	e7ee      	b.n	801cd04 <__lshift+0x1c>
 801cd26:	2300      	movs	r3, #0
 801cd28:	f100 0114 	add.w	r1, r0, #20
 801cd2c:	f100 0210 	add.w	r2, r0, #16
 801cd30:	4618      	mov	r0, r3
 801cd32:	4553      	cmp	r3, sl
 801cd34:	db33      	blt.n	801cd9e <__lshift+0xb6>
 801cd36:	6920      	ldr	r0, [r4, #16]
 801cd38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cd3c:	f104 0314 	add.w	r3, r4, #20
 801cd40:	f019 091f 	ands.w	r9, r9, #31
 801cd44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cd48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801cd4c:	d02b      	beq.n	801cda6 <__lshift+0xbe>
 801cd4e:	f1c9 0e20 	rsb	lr, r9, #32
 801cd52:	468a      	mov	sl, r1
 801cd54:	2200      	movs	r2, #0
 801cd56:	6818      	ldr	r0, [r3, #0]
 801cd58:	fa00 f009 	lsl.w	r0, r0, r9
 801cd5c:	4302      	orrs	r2, r0
 801cd5e:	f84a 2b04 	str.w	r2, [sl], #4
 801cd62:	f853 2b04 	ldr.w	r2, [r3], #4
 801cd66:	459c      	cmp	ip, r3
 801cd68:	fa22 f20e 	lsr.w	r2, r2, lr
 801cd6c:	d8f3      	bhi.n	801cd56 <__lshift+0x6e>
 801cd6e:	ebac 0304 	sub.w	r3, ip, r4
 801cd72:	3b15      	subs	r3, #21
 801cd74:	f023 0303 	bic.w	r3, r3, #3
 801cd78:	3304      	adds	r3, #4
 801cd7a:	f104 0015 	add.w	r0, r4, #21
 801cd7e:	4584      	cmp	ip, r0
 801cd80:	bf38      	it	cc
 801cd82:	2304      	movcc	r3, #4
 801cd84:	50ca      	str	r2, [r1, r3]
 801cd86:	b10a      	cbz	r2, 801cd8c <__lshift+0xa4>
 801cd88:	f108 0602 	add.w	r6, r8, #2
 801cd8c:	3e01      	subs	r6, #1
 801cd8e:	4638      	mov	r0, r7
 801cd90:	612e      	str	r6, [r5, #16]
 801cd92:	4621      	mov	r1, r4
 801cd94:	f7ff fd8c 	bl	801c8b0 <_Bfree>
 801cd98:	4628      	mov	r0, r5
 801cd9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd9e:	f842 0f04 	str.w	r0, [r2, #4]!
 801cda2:	3301      	adds	r3, #1
 801cda4:	e7c5      	b.n	801cd32 <__lshift+0x4a>
 801cda6:	3904      	subs	r1, #4
 801cda8:	f853 2b04 	ldr.w	r2, [r3], #4
 801cdac:	f841 2f04 	str.w	r2, [r1, #4]!
 801cdb0:	459c      	cmp	ip, r3
 801cdb2:	d8f9      	bhi.n	801cda8 <__lshift+0xc0>
 801cdb4:	e7ea      	b.n	801cd8c <__lshift+0xa4>
 801cdb6:	bf00      	nop
 801cdb8:	0802038c 	.word	0x0802038c
 801cdbc:	0802041c 	.word	0x0802041c

0801cdc0 <__mcmp>:
 801cdc0:	b530      	push	{r4, r5, lr}
 801cdc2:	6902      	ldr	r2, [r0, #16]
 801cdc4:	690c      	ldr	r4, [r1, #16]
 801cdc6:	1b12      	subs	r2, r2, r4
 801cdc8:	d10e      	bne.n	801cde8 <__mcmp+0x28>
 801cdca:	f100 0314 	add.w	r3, r0, #20
 801cdce:	3114      	adds	r1, #20
 801cdd0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801cdd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801cdd8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801cddc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801cde0:	42a5      	cmp	r5, r4
 801cde2:	d003      	beq.n	801cdec <__mcmp+0x2c>
 801cde4:	d305      	bcc.n	801cdf2 <__mcmp+0x32>
 801cde6:	2201      	movs	r2, #1
 801cde8:	4610      	mov	r0, r2
 801cdea:	bd30      	pop	{r4, r5, pc}
 801cdec:	4283      	cmp	r3, r0
 801cdee:	d3f3      	bcc.n	801cdd8 <__mcmp+0x18>
 801cdf0:	e7fa      	b.n	801cde8 <__mcmp+0x28>
 801cdf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cdf6:	e7f7      	b.n	801cde8 <__mcmp+0x28>

0801cdf8 <__mdiff>:
 801cdf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdfc:	460c      	mov	r4, r1
 801cdfe:	4606      	mov	r6, r0
 801ce00:	4611      	mov	r1, r2
 801ce02:	4620      	mov	r0, r4
 801ce04:	4617      	mov	r7, r2
 801ce06:	f7ff ffdb 	bl	801cdc0 <__mcmp>
 801ce0a:	1e05      	subs	r5, r0, #0
 801ce0c:	d110      	bne.n	801ce30 <__mdiff+0x38>
 801ce0e:	4629      	mov	r1, r5
 801ce10:	4630      	mov	r0, r6
 801ce12:	f7ff fd0d 	bl	801c830 <_Balloc>
 801ce16:	b930      	cbnz	r0, 801ce26 <__mdiff+0x2e>
 801ce18:	4b39      	ldr	r3, [pc, #228]	; (801cf00 <__mdiff+0x108>)
 801ce1a:	4602      	mov	r2, r0
 801ce1c:	f240 2132 	movw	r1, #562	; 0x232
 801ce20:	4838      	ldr	r0, [pc, #224]	; (801cf04 <__mdiff+0x10c>)
 801ce22:	f7fe feff 	bl	801bc24 <__assert_func>
 801ce26:	2301      	movs	r3, #1
 801ce28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ce2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce30:	bfa4      	itt	ge
 801ce32:	463b      	movge	r3, r7
 801ce34:	4627      	movge	r7, r4
 801ce36:	4630      	mov	r0, r6
 801ce38:	6879      	ldr	r1, [r7, #4]
 801ce3a:	bfa6      	itte	ge
 801ce3c:	461c      	movge	r4, r3
 801ce3e:	2500      	movge	r5, #0
 801ce40:	2501      	movlt	r5, #1
 801ce42:	f7ff fcf5 	bl	801c830 <_Balloc>
 801ce46:	b920      	cbnz	r0, 801ce52 <__mdiff+0x5a>
 801ce48:	4b2d      	ldr	r3, [pc, #180]	; (801cf00 <__mdiff+0x108>)
 801ce4a:	4602      	mov	r2, r0
 801ce4c:	f44f 7110 	mov.w	r1, #576	; 0x240
 801ce50:	e7e6      	b.n	801ce20 <__mdiff+0x28>
 801ce52:	693e      	ldr	r6, [r7, #16]
 801ce54:	60c5      	str	r5, [r0, #12]
 801ce56:	6925      	ldr	r5, [r4, #16]
 801ce58:	f107 0114 	add.w	r1, r7, #20
 801ce5c:	f104 0914 	add.w	r9, r4, #20
 801ce60:	f100 0e14 	add.w	lr, r0, #20
 801ce64:	f107 0210 	add.w	r2, r7, #16
 801ce68:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801ce6c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801ce70:	46f2      	mov	sl, lr
 801ce72:	2700      	movs	r7, #0
 801ce74:	f859 3b04 	ldr.w	r3, [r9], #4
 801ce78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ce7c:	fa1f f883 	uxth.w	r8, r3
 801ce80:	fa17 f78b 	uxtah	r7, r7, fp
 801ce84:	0c1b      	lsrs	r3, r3, #16
 801ce86:	eba7 0808 	sub.w	r8, r7, r8
 801ce8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ce8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ce92:	fa1f f888 	uxth.w	r8, r8
 801ce96:	141f      	asrs	r7, r3, #16
 801ce98:	454d      	cmp	r5, r9
 801ce9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ce9e:	f84a 3b04 	str.w	r3, [sl], #4
 801cea2:	d8e7      	bhi.n	801ce74 <__mdiff+0x7c>
 801cea4:	1b2b      	subs	r3, r5, r4
 801cea6:	3b15      	subs	r3, #21
 801cea8:	f023 0303 	bic.w	r3, r3, #3
 801ceac:	3304      	adds	r3, #4
 801ceae:	3415      	adds	r4, #21
 801ceb0:	42a5      	cmp	r5, r4
 801ceb2:	bf38      	it	cc
 801ceb4:	2304      	movcc	r3, #4
 801ceb6:	4419      	add	r1, r3
 801ceb8:	4473      	add	r3, lr
 801ceba:	469e      	mov	lr, r3
 801cebc:	460d      	mov	r5, r1
 801cebe:	4565      	cmp	r5, ip
 801cec0:	d30e      	bcc.n	801cee0 <__mdiff+0xe8>
 801cec2:	f10c 0203 	add.w	r2, ip, #3
 801cec6:	1a52      	subs	r2, r2, r1
 801cec8:	f022 0203 	bic.w	r2, r2, #3
 801cecc:	3903      	subs	r1, #3
 801cece:	458c      	cmp	ip, r1
 801ced0:	bf38      	it	cc
 801ced2:	2200      	movcc	r2, #0
 801ced4:	441a      	add	r2, r3
 801ced6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ceda:	b17b      	cbz	r3, 801cefc <__mdiff+0x104>
 801cedc:	6106      	str	r6, [r0, #16]
 801cede:	e7a5      	b.n	801ce2c <__mdiff+0x34>
 801cee0:	f855 8b04 	ldr.w	r8, [r5], #4
 801cee4:	fa17 f488 	uxtah	r4, r7, r8
 801cee8:	1422      	asrs	r2, r4, #16
 801ceea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801ceee:	b2a4      	uxth	r4, r4
 801cef0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801cef4:	f84e 4b04 	str.w	r4, [lr], #4
 801cef8:	1417      	asrs	r7, r2, #16
 801cefa:	e7e0      	b.n	801cebe <__mdiff+0xc6>
 801cefc:	3e01      	subs	r6, #1
 801cefe:	e7ea      	b.n	801ced6 <__mdiff+0xde>
 801cf00:	0802038c 	.word	0x0802038c
 801cf04:	0802041c 	.word	0x0802041c

0801cf08 <__ulp>:
 801cf08:	b082      	sub	sp, #8
 801cf0a:	ed8d 0b00 	vstr	d0, [sp]
 801cf0e:	9b01      	ldr	r3, [sp, #4]
 801cf10:	4912      	ldr	r1, [pc, #72]	; (801cf5c <__ulp+0x54>)
 801cf12:	4019      	ands	r1, r3
 801cf14:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801cf18:	2900      	cmp	r1, #0
 801cf1a:	dd05      	ble.n	801cf28 <__ulp+0x20>
 801cf1c:	2200      	movs	r2, #0
 801cf1e:	460b      	mov	r3, r1
 801cf20:	ec43 2b10 	vmov	d0, r2, r3
 801cf24:	b002      	add	sp, #8
 801cf26:	4770      	bx	lr
 801cf28:	4249      	negs	r1, r1
 801cf2a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801cf2e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801cf32:	f04f 0200 	mov.w	r2, #0
 801cf36:	f04f 0300 	mov.w	r3, #0
 801cf3a:	da04      	bge.n	801cf46 <__ulp+0x3e>
 801cf3c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801cf40:	fa41 f300 	asr.w	r3, r1, r0
 801cf44:	e7ec      	b.n	801cf20 <__ulp+0x18>
 801cf46:	f1a0 0114 	sub.w	r1, r0, #20
 801cf4a:	291e      	cmp	r1, #30
 801cf4c:	bfda      	itte	le
 801cf4e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801cf52:	fa20 f101 	lsrle.w	r1, r0, r1
 801cf56:	2101      	movgt	r1, #1
 801cf58:	460a      	mov	r2, r1
 801cf5a:	e7e1      	b.n	801cf20 <__ulp+0x18>
 801cf5c:	7ff00000 	.word	0x7ff00000

0801cf60 <__b2d>:
 801cf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf62:	6905      	ldr	r5, [r0, #16]
 801cf64:	f100 0714 	add.w	r7, r0, #20
 801cf68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801cf6c:	1f2e      	subs	r6, r5, #4
 801cf6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801cf72:	4620      	mov	r0, r4
 801cf74:	f7ff fd52 	bl	801ca1c <__hi0bits>
 801cf78:	f1c0 0320 	rsb	r3, r0, #32
 801cf7c:	280a      	cmp	r0, #10
 801cf7e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801cffc <__b2d+0x9c>
 801cf82:	600b      	str	r3, [r1, #0]
 801cf84:	dc14      	bgt.n	801cfb0 <__b2d+0x50>
 801cf86:	f1c0 0e0b 	rsb	lr, r0, #11
 801cf8a:	fa24 f10e 	lsr.w	r1, r4, lr
 801cf8e:	42b7      	cmp	r7, r6
 801cf90:	ea41 030c 	orr.w	r3, r1, ip
 801cf94:	bf34      	ite	cc
 801cf96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801cf9a:	2100      	movcs	r1, #0
 801cf9c:	3015      	adds	r0, #21
 801cf9e:	fa04 f000 	lsl.w	r0, r4, r0
 801cfa2:	fa21 f10e 	lsr.w	r1, r1, lr
 801cfa6:	ea40 0201 	orr.w	r2, r0, r1
 801cfaa:	ec43 2b10 	vmov	d0, r2, r3
 801cfae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cfb0:	42b7      	cmp	r7, r6
 801cfb2:	bf3a      	itte	cc
 801cfb4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801cfb8:	f1a5 0608 	subcc.w	r6, r5, #8
 801cfbc:	2100      	movcs	r1, #0
 801cfbe:	380b      	subs	r0, #11
 801cfc0:	d017      	beq.n	801cff2 <__b2d+0x92>
 801cfc2:	f1c0 0c20 	rsb	ip, r0, #32
 801cfc6:	fa04 f500 	lsl.w	r5, r4, r0
 801cfca:	42be      	cmp	r6, r7
 801cfcc:	fa21 f40c 	lsr.w	r4, r1, ip
 801cfd0:	ea45 0504 	orr.w	r5, r5, r4
 801cfd4:	bf8c      	ite	hi
 801cfd6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801cfda:	2400      	movls	r4, #0
 801cfdc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801cfe0:	fa01 f000 	lsl.w	r0, r1, r0
 801cfe4:	fa24 f40c 	lsr.w	r4, r4, ip
 801cfe8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801cfec:	ea40 0204 	orr.w	r2, r0, r4
 801cff0:	e7db      	b.n	801cfaa <__b2d+0x4a>
 801cff2:	ea44 030c 	orr.w	r3, r4, ip
 801cff6:	460a      	mov	r2, r1
 801cff8:	e7d7      	b.n	801cfaa <__b2d+0x4a>
 801cffa:	bf00      	nop
 801cffc:	3ff00000 	.word	0x3ff00000

0801d000 <__d2b>:
 801d000:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d004:	4689      	mov	r9, r1
 801d006:	2101      	movs	r1, #1
 801d008:	ec57 6b10 	vmov	r6, r7, d0
 801d00c:	4690      	mov	r8, r2
 801d00e:	f7ff fc0f 	bl	801c830 <_Balloc>
 801d012:	4604      	mov	r4, r0
 801d014:	b930      	cbnz	r0, 801d024 <__d2b+0x24>
 801d016:	4602      	mov	r2, r0
 801d018:	4b25      	ldr	r3, [pc, #148]	; (801d0b0 <__d2b+0xb0>)
 801d01a:	4826      	ldr	r0, [pc, #152]	; (801d0b4 <__d2b+0xb4>)
 801d01c:	f240 310a 	movw	r1, #778	; 0x30a
 801d020:	f7fe fe00 	bl	801bc24 <__assert_func>
 801d024:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d028:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d02c:	bb35      	cbnz	r5, 801d07c <__d2b+0x7c>
 801d02e:	2e00      	cmp	r6, #0
 801d030:	9301      	str	r3, [sp, #4]
 801d032:	d028      	beq.n	801d086 <__d2b+0x86>
 801d034:	4668      	mov	r0, sp
 801d036:	9600      	str	r6, [sp, #0]
 801d038:	f7ff fd10 	bl	801ca5c <__lo0bits>
 801d03c:	9900      	ldr	r1, [sp, #0]
 801d03e:	b300      	cbz	r0, 801d082 <__d2b+0x82>
 801d040:	9a01      	ldr	r2, [sp, #4]
 801d042:	f1c0 0320 	rsb	r3, r0, #32
 801d046:	fa02 f303 	lsl.w	r3, r2, r3
 801d04a:	430b      	orrs	r3, r1
 801d04c:	40c2      	lsrs	r2, r0
 801d04e:	6163      	str	r3, [r4, #20]
 801d050:	9201      	str	r2, [sp, #4]
 801d052:	9b01      	ldr	r3, [sp, #4]
 801d054:	61a3      	str	r3, [r4, #24]
 801d056:	2b00      	cmp	r3, #0
 801d058:	bf14      	ite	ne
 801d05a:	2202      	movne	r2, #2
 801d05c:	2201      	moveq	r2, #1
 801d05e:	6122      	str	r2, [r4, #16]
 801d060:	b1d5      	cbz	r5, 801d098 <__d2b+0x98>
 801d062:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d066:	4405      	add	r5, r0
 801d068:	f8c9 5000 	str.w	r5, [r9]
 801d06c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d070:	f8c8 0000 	str.w	r0, [r8]
 801d074:	4620      	mov	r0, r4
 801d076:	b003      	add	sp, #12
 801d078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d07c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d080:	e7d5      	b.n	801d02e <__d2b+0x2e>
 801d082:	6161      	str	r1, [r4, #20]
 801d084:	e7e5      	b.n	801d052 <__d2b+0x52>
 801d086:	a801      	add	r0, sp, #4
 801d088:	f7ff fce8 	bl	801ca5c <__lo0bits>
 801d08c:	9b01      	ldr	r3, [sp, #4]
 801d08e:	6163      	str	r3, [r4, #20]
 801d090:	2201      	movs	r2, #1
 801d092:	6122      	str	r2, [r4, #16]
 801d094:	3020      	adds	r0, #32
 801d096:	e7e3      	b.n	801d060 <__d2b+0x60>
 801d098:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d09c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d0a0:	f8c9 0000 	str.w	r0, [r9]
 801d0a4:	6918      	ldr	r0, [r3, #16]
 801d0a6:	f7ff fcb9 	bl	801ca1c <__hi0bits>
 801d0aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d0ae:	e7df      	b.n	801d070 <__d2b+0x70>
 801d0b0:	0802038c 	.word	0x0802038c
 801d0b4:	0802041c 	.word	0x0802041c

0801d0b8 <__ratio>:
 801d0b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0bc:	4688      	mov	r8, r1
 801d0be:	4669      	mov	r1, sp
 801d0c0:	4681      	mov	r9, r0
 801d0c2:	f7ff ff4d 	bl	801cf60 <__b2d>
 801d0c6:	a901      	add	r1, sp, #4
 801d0c8:	4640      	mov	r0, r8
 801d0ca:	ec55 4b10 	vmov	r4, r5, d0
 801d0ce:	f7ff ff47 	bl	801cf60 <__b2d>
 801d0d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d0d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d0da:	eba3 0c02 	sub.w	ip, r3, r2
 801d0de:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d0e2:	1a9b      	subs	r3, r3, r2
 801d0e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d0e8:	ec51 0b10 	vmov	r0, r1, d0
 801d0ec:	2b00      	cmp	r3, #0
 801d0ee:	bfd6      	itet	le
 801d0f0:	460a      	movle	r2, r1
 801d0f2:	462a      	movgt	r2, r5
 801d0f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d0f8:	468b      	mov	fp, r1
 801d0fa:	462f      	mov	r7, r5
 801d0fc:	bfd4      	ite	le
 801d0fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d102:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d106:	4620      	mov	r0, r4
 801d108:	ee10 2a10 	vmov	r2, s0
 801d10c:	465b      	mov	r3, fp
 801d10e:	4639      	mov	r1, r7
 801d110:	f7e3 fbac 	bl	800086c <__aeabi_ddiv>
 801d114:	ec41 0b10 	vmov	d0, r0, r1
 801d118:	b003      	add	sp, #12
 801d11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d11e <__copybits>:
 801d11e:	3901      	subs	r1, #1
 801d120:	b570      	push	{r4, r5, r6, lr}
 801d122:	1149      	asrs	r1, r1, #5
 801d124:	6914      	ldr	r4, [r2, #16]
 801d126:	3101      	adds	r1, #1
 801d128:	f102 0314 	add.w	r3, r2, #20
 801d12c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d130:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d134:	1f05      	subs	r5, r0, #4
 801d136:	42a3      	cmp	r3, r4
 801d138:	d30c      	bcc.n	801d154 <__copybits+0x36>
 801d13a:	1aa3      	subs	r3, r4, r2
 801d13c:	3b11      	subs	r3, #17
 801d13e:	f023 0303 	bic.w	r3, r3, #3
 801d142:	3211      	adds	r2, #17
 801d144:	42a2      	cmp	r2, r4
 801d146:	bf88      	it	hi
 801d148:	2300      	movhi	r3, #0
 801d14a:	4418      	add	r0, r3
 801d14c:	2300      	movs	r3, #0
 801d14e:	4288      	cmp	r0, r1
 801d150:	d305      	bcc.n	801d15e <__copybits+0x40>
 801d152:	bd70      	pop	{r4, r5, r6, pc}
 801d154:	f853 6b04 	ldr.w	r6, [r3], #4
 801d158:	f845 6f04 	str.w	r6, [r5, #4]!
 801d15c:	e7eb      	b.n	801d136 <__copybits+0x18>
 801d15e:	f840 3b04 	str.w	r3, [r0], #4
 801d162:	e7f4      	b.n	801d14e <__copybits+0x30>

0801d164 <__any_on>:
 801d164:	f100 0214 	add.w	r2, r0, #20
 801d168:	6900      	ldr	r0, [r0, #16]
 801d16a:	114b      	asrs	r3, r1, #5
 801d16c:	4298      	cmp	r0, r3
 801d16e:	b510      	push	{r4, lr}
 801d170:	db11      	blt.n	801d196 <__any_on+0x32>
 801d172:	dd0a      	ble.n	801d18a <__any_on+0x26>
 801d174:	f011 011f 	ands.w	r1, r1, #31
 801d178:	d007      	beq.n	801d18a <__any_on+0x26>
 801d17a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d17e:	fa24 f001 	lsr.w	r0, r4, r1
 801d182:	fa00 f101 	lsl.w	r1, r0, r1
 801d186:	428c      	cmp	r4, r1
 801d188:	d10b      	bne.n	801d1a2 <__any_on+0x3e>
 801d18a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d18e:	4293      	cmp	r3, r2
 801d190:	d803      	bhi.n	801d19a <__any_on+0x36>
 801d192:	2000      	movs	r0, #0
 801d194:	bd10      	pop	{r4, pc}
 801d196:	4603      	mov	r3, r0
 801d198:	e7f7      	b.n	801d18a <__any_on+0x26>
 801d19a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d19e:	2900      	cmp	r1, #0
 801d1a0:	d0f5      	beq.n	801d18e <__any_on+0x2a>
 801d1a2:	2001      	movs	r0, #1
 801d1a4:	e7f6      	b.n	801d194 <__any_on+0x30>

0801d1a6 <_realloc_r>:
 801d1a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1a8:	4607      	mov	r7, r0
 801d1aa:	4614      	mov	r4, r2
 801d1ac:	460e      	mov	r6, r1
 801d1ae:	b921      	cbnz	r1, 801d1ba <_realloc_r+0x14>
 801d1b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801d1b4:	4611      	mov	r1, r2
 801d1b6:	f7fd b8d1 	b.w	801a35c <_malloc_r>
 801d1ba:	b922      	cbnz	r2, 801d1c6 <_realloc_r+0x20>
 801d1bc:	f7fd f87e 	bl	801a2bc <_free_r>
 801d1c0:	4625      	mov	r5, r4
 801d1c2:	4628      	mov	r0, r5
 801d1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d1c6:	f001 f841 	bl	801e24c <_malloc_usable_size_r>
 801d1ca:	42a0      	cmp	r0, r4
 801d1cc:	d20f      	bcs.n	801d1ee <_realloc_r+0x48>
 801d1ce:	4621      	mov	r1, r4
 801d1d0:	4638      	mov	r0, r7
 801d1d2:	f7fd f8c3 	bl	801a35c <_malloc_r>
 801d1d6:	4605      	mov	r5, r0
 801d1d8:	2800      	cmp	r0, #0
 801d1da:	d0f2      	beq.n	801d1c2 <_realloc_r+0x1c>
 801d1dc:	4631      	mov	r1, r6
 801d1de:	4622      	mov	r2, r4
 801d1e0:	f7fd f82c 	bl	801a23c <memcpy>
 801d1e4:	4631      	mov	r1, r6
 801d1e6:	4638      	mov	r0, r7
 801d1e8:	f7fd f868 	bl	801a2bc <_free_r>
 801d1ec:	e7e9      	b.n	801d1c2 <_realloc_r+0x1c>
 801d1ee:	4635      	mov	r5, r6
 801d1f0:	e7e7      	b.n	801d1c2 <_realloc_r+0x1c>

0801d1f2 <__ssputs_r>:
 801d1f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d1f6:	688e      	ldr	r6, [r1, #8]
 801d1f8:	429e      	cmp	r6, r3
 801d1fa:	4682      	mov	sl, r0
 801d1fc:	460c      	mov	r4, r1
 801d1fe:	4690      	mov	r8, r2
 801d200:	461f      	mov	r7, r3
 801d202:	d838      	bhi.n	801d276 <__ssputs_r+0x84>
 801d204:	898a      	ldrh	r2, [r1, #12]
 801d206:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d20a:	d032      	beq.n	801d272 <__ssputs_r+0x80>
 801d20c:	6825      	ldr	r5, [r4, #0]
 801d20e:	6909      	ldr	r1, [r1, #16]
 801d210:	eba5 0901 	sub.w	r9, r5, r1
 801d214:	6965      	ldr	r5, [r4, #20]
 801d216:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d21a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d21e:	3301      	adds	r3, #1
 801d220:	444b      	add	r3, r9
 801d222:	106d      	asrs	r5, r5, #1
 801d224:	429d      	cmp	r5, r3
 801d226:	bf38      	it	cc
 801d228:	461d      	movcc	r5, r3
 801d22a:	0553      	lsls	r3, r2, #21
 801d22c:	d531      	bpl.n	801d292 <__ssputs_r+0xa0>
 801d22e:	4629      	mov	r1, r5
 801d230:	f7fd f894 	bl	801a35c <_malloc_r>
 801d234:	4606      	mov	r6, r0
 801d236:	b950      	cbnz	r0, 801d24e <__ssputs_r+0x5c>
 801d238:	230c      	movs	r3, #12
 801d23a:	f8ca 3000 	str.w	r3, [sl]
 801d23e:	89a3      	ldrh	r3, [r4, #12]
 801d240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d244:	81a3      	strh	r3, [r4, #12]
 801d246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d24e:	6921      	ldr	r1, [r4, #16]
 801d250:	464a      	mov	r2, r9
 801d252:	f7fc fff3 	bl	801a23c <memcpy>
 801d256:	89a3      	ldrh	r3, [r4, #12]
 801d258:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d25c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d260:	81a3      	strh	r3, [r4, #12]
 801d262:	6126      	str	r6, [r4, #16]
 801d264:	6165      	str	r5, [r4, #20]
 801d266:	444e      	add	r6, r9
 801d268:	eba5 0509 	sub.w	r5, r5, r9
 801d26c:	6026      	str	r6, [r4, #0]
 801d26e:	60a5      	str	r5, [r4, #8]
 801d270:	463e      	mov	r6, r7
 801d272:	42be      	cmp	r6, r7
 801d274:	d900      	bls.n	801d278 <__ssputs_r+0x86>
 801d276:	463e      	mov	r6, r7
 801d278:	4632      	mov	r2, r6
 801d27a:	6820      	ldr	r0, [r4, #0]
 801d27c:	4641      	mov	r1, r8
 801d27e:	f7fc ffeb 	bl	801a258 <memmove>
 801d282:	68a3      	ldr	r3, [r4, #8]
 801d284:	6822      	ldr	r2, [r4, #0]
 801d286:	1b9b      	subs	r3, r3, r6
 801d288:	4432      	add	r2, r6
 801d28a:	60a3      	str	r3, [r4, #8]
 801d28c:	6022      	str	r2, [r4, #0]
 801d28e:	2000      	movs	r0, #0
 801d290:	e7db      	b.n	801d24a <__ssputs_r+0x58>
 801d292:	462a      	mov	r2, r5
 801d294:	f7ff ff87 	bl	801d1a6 <_realloc_r>
 801d298:	4606      	mov	r6, r0
 801d29a:	2800      	cmp	r0, #0
 801d29c:	d1e1      	bne.n	801d262 <__ssputs_r+0x70>
 801d29e:	6921      	ldr	r1, [r4, #16]
 801d2a0:	4650      	mov	r0, sl
 801d2a2:	f7fd f80b 	bl	801a2bc <_free_r>
 801d2a6:	e7c7      	b.n	801d238 <__ssputs_r+0x46>

0801d2a8 <_svfiprintf_r>:
 801d2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2ac:	4698      	mov	r8, r3
 801d2ae:	898b      	ldrh	r3, [r1, #12]
 801d2b0:	061b      	lsls	r3, r3, #24
 801d2b2:	b09d      	sub	sp, #116	; 0x74
 801d2b4:	4607      	mov	r7, r0
 801d2b6:	460d      	mov	r5, r1
 801d2b8:	4614      	mov	r4, r2
 801d2ba:	d50e      	bpl.n	801d2da <_svfiprintf_r+0x32>
 801d2bc:	690b      	ldr	r3, [r1, #16]
 801d2be:	b963      	cbnz	r3, 801d2da <_svfiprintf_r+0x32>
 801d2c0:	2140      	movs	r1, #64	; 0x40
 801d2c2:	f7fd f84b 	bl	801a35c <_malloc_r>
 801d2c6:	6028      	str	r0, [r5, #0]
 801d2c8:	6128      	str	r0, [r5, #16]
 801d2ca:	b920      	cbnz	r0, 801d2d6 <_svfiprintf_r+0x2e>
 801d2cc:	230c      	movs	r3, #12
 801d2ce:	603b      	str	r3, [r7, #0]
 801d2d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d2d4:	e0d1      	b.n	801d47a <_svfiprintf_r+0x1d2>
 801d2d6:	2340      	movs	r3, #64	; 0x40
 801d2d8:	616b      	str	r3, [r5, #20]
 801d2da:	2300      	movs	r3, #0
 801d2dc:	9309      	str	r3, [sp, #36]	; 0x24
 801d2de:	2320      	movs	r3, #32
 801d2e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d2e4:	f8cd 800c 	str.w	r8, [sp, #12]
 801d2e8:	2330      	movs	r3, #48	; 0x30
 801d2ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d494 <_svfiprintf_r+0x1ec>
 801d2ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d2f2:	f04f 0901 	mov.w	r9, #1
 801d2f6:	4623      	mov	r3, r4
 801d2f8:	469a      	mov	sl, r3
 801d2fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d2fe:	b10a      	cbz	r2, 801d304 <_svfiprintf_r+0x5c>
 801d300:	2a25      	cmp	r2, #37	; 0x25
 801d302:	d1f9      	bne.n	801d2f8 <_svfiprintf_r+0x50>
 801d304:	ebba 0b04 	subs.w	fp, sl, r4
 801d308:	d00b      	beq.n	801d322 <_svfiprintf_r+0x7a>
 801d30a:	465b      	mov	r3, fp
 801d30c:	4622      	mov	r2, r4
 801d30e:	4629      	mov	r1, r5
 801d310:	4638      	mov	r0, r7
 801d312:	f7ff ff6e 	bl	801d1f2 <__ssputs_r>
 801d316:	3001      	adds	r0, #1
 801d318:	f000 80aa 	beq.w	801d470 <_svfiprintf_r+0x1c8>
 801d31c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d31e:	445a      	add	r2, fp
 801d320:	9209      	str	r2, [sp, #36]	; 0x24
 801d322:	f89a 3000 	ldrb.w	r3, [sl]
 801d326:	2b00      	cmp	r3, #0
 801d328:	f000 80a2 	beq.w	801d470 <_svfiprintf_r+0x1c8>
 801d32c:	2300      	movs	r3, #0
 801d32e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d336:	f10a 0a01 	add.w	sl, sl, #1
 801d33a:	9304      	str	r3, [sp, #16]
 801d33c:	9307      	str	r3, [sp, #28]
 801d33e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d342:	931a      	str	r3, [sp, #104]	; 0x68
 801d344:	4654      	mov	r4, sl
 801d346:	2205      	movs	r2, #5
 801d348:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d34c:	4851      	ldr	r0, [pc, #324]	; (801d494 <_svfiprintf_r+0x1ec>)
 801d34e:	f7e2 ff57 	bl	8000200 <memchr>
 801d352:	9a04      	ldr	r2, [sp, #16]
 801d354:	b9d8      	cbnz	r0, 801d38e <_svfiprintf_r+0xe6>
 801d356:	06d0      	lsls	r0, r2, #27
 801d358:	bf44      	itt	mi
 801d35a:	2320      	movmi	r3, #32
 801d35c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d360:	0711      	lsls	r1, r2, #28
 801d362:	bf44      	itt	mi
 801d364:	232b      	movmi	r3, #43	; 0x2b
 801d366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d36a:	f89a 3000 	ldrb.w	r3, [sl]
 801d36e:	2b2a      	cmp	r3, #42	; 0x2a
 801d370:	d015      	beq.n	801d39e <_svfiprintf_r+0xf6>
 801d372:	9a07      	ldr	r2, [sp, #28]
 801d374:	4654      	mov	r4, sl
 801d376:	2000      	movs	r0, #0
 801d378:	f04f 0c0a 	mov.w	ip, #10
 801d37c:	4621      	mov	r1, r4
 801d37e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d382:	3b30      	subs	r3, #48	; 0x30
 801d384:	2b09      	cmp	r3, #9
 801d386:	d94e      	bls.n	801d426 <_svfiprintf_r+0x17e>
 801d388:	b1b0      	cbz	r0, 801d3b8 <_svfiprintf_r+0x110>
 801d38a:	9207      	str	r2, [sp, #28]
 801d38c:	e014      	b.n	801d3b8 <_svfiprintf_r+0x110>
 801d38e:	eba0 0308 	sub.w	r3, r0, r8
 801d392:	fa09 f303 	lsl.w	r3, r9, r3
 801d396:	4313      	orrs	r3, r2
 801d398:	9304      	str	r3, [sp, #16]
 801d39a:	46a2      	mov	sl, r4
 801d39c:	e7d2      	b.n	801d344 <_svfiprintf_r+0x9c>
 801d39e:	9b03      	ldr	r3, [sp, #12]
 801d3a0:	1d19      	adds	r1, r3, #4
 801d3a2:	681b      	ldr	r3, [r3, #0]
 801d3a4:	9103      	str	r1, [sp, #12]
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	bfbb      	ittet	lt
 801d3aa:	425b      	neglt	r3, r3
 801d3ac:	f042 0202 	orrlt.w	r2, r2, #2
 801d3b0:	9307      	strge	r3, [sp, #28]
 801d3b2:	9307      	strlt	r3, [sp, #28]
 801d3b4:	bfb8      	it	lt
 801d3b6:	9204      	strlt	r2, [sp, #16]
 801d3b8:	7823      	ldrb	r3, [r4, #0]
 801d3ba:	2b2e      	cmp	r3, #46	; 0x2e
 801d3bc:	d10c      	bne.n	801d3d8 <_svfiprintf_r+0x130>
 801d3be:	7863      	ldrb	r3, [r4, #1]
 801d3c0:	2b2a      	cmp	r3, #42	; 0x2a
 801d3c2:	d135      	bne.n	801d430 <_svfiprintf_r+0x188>
 801d3c4:	9b03      	ldr	r3, [sp, #12]
 801d3c6:	1d1a      	adds	r2, r3, #4
 801d3c8:	681b      	ldr	r3, [r3, #0]
 801d3ca:	9203      	str	r2, [sp, #12]
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	bfb8      	it	lt
 801d3d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d3d4:	3402      	adds	r4, #2
 801d3d6:	9305      	str	r3, [sp, #20]
 801d3d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d4a4 <_svfiprintf_r+0x1fc>
 801d3dc:	7821      	ldrb	r1, [r4, #0]
 801d3de:	2203      	movs	r2, #3
 801d3e0:	4650      	mov	r0, sl
 801d3e2:	f7e2 ff0d 	bl	8000200 <memchr>
 801d3e6:	b140      	cbz	r0, 801d3fa <_svfiprintf_r+0x152>
 801d3e8:	2340      	movs	r3, #64	; 0x40
 801d3ea:	eba0 000a 	sub.w	r0, r0, sl
 801d3ee:	fa03 f000 	lsl.w	r0, r3, r0
 801d3f2:	9b04      	ldr	r3, [sp, #16]
 801d3f4:	4303      	orrs	r3, r0
 801d3f6:	3401      	adds	r4, #1
 801d3f8:	9304      	str	r3, [sp, #16]
 801d3fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d3fe:	4826      	ldr	r0, [pc, #152]	; (801d498 <_svfiprintf_r+0x1f0>)
 801d400:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d404:	2206      	movs	r2, #6
 801d406:	f7e2 fefb 	bl	8000200 <memchr>
 801d40a:	2800      	cmp	r0, #0
 801d40c:	d038      	beq.n	801d480 <_svfiprintf_r+0x1d8>
 801d40e:	4b23      	ldr	r3, [pc, #140]	; (801d49c <_svfiprintf_r+0x1f4>)
 801d410:	bb1b      	cbnz	r3, 801d45a <_svfiprintf_r+0x1b2>
 801d412:	9b03      	ldr	r3, [sp, #12]
 801d414:	3307      	adds	r3, #7
 801d416:	f023 0307 	bic.w	r3, r3, #7
 801d41a:	3308      	adds	r3, #8
 801d41c:	9303      	str	r3, [sp, #12]
 801d41e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d420:	4433      	add	r3, r6
 801d422:	9309      	str	r3, [sp, #36]	; 0x24
 801d424:	e767      	b.n	801d2f6 <_svfiprintf_r+0x4e>
 801d426:	fb0c 3202 	mla	r2, ip, r2, r3
 801d42a:	460c      	mov	r4, r1
 801d42c:	2001      	movs	r0, #1
 801d42e:	e7a5      	b.n	801d37c <_svfiprintf_r+0xd4>
 801d430:	2300      	movs	r3, #0
 801d432:	3401      	adds	r4, #1
 801d434:	9305      	str	r3, [sp, #20]
 801d436:	4619      	mov	r1, r3
 801d438:	f04f 0c0a 	mov.w	ip, #10
 801d43c:	4620      	mov	r0, r4
 801d43e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d442:	3a30      	subs	r2, #48	; 0x30
 801d444:	2a09      	cmp	r2, #9
 801d446:	d903      	bls.n	801d450 <_svfiprintf_r+0x1a8>
 801d448:	2b00      	cmp	r3, #0
 801d44a:	d0c5      	beq.n	801d3d8 <_svfiprintf_r+0x130>
 801d44c:	9105      	str	r1, [sp, #20]
 801d44e:	e7c3      	b.n	801d3d8 <_svfiprintf_r+0x130>
 801d450:	fb0c 2101 	mla	r1, ip, r1, r2
 801d454:	4604      	mov	r4, r0
 801d456:	2301      	movs	r3, #1
 801d458:	e7f0      	b.n	801d43c <_svfiprintf_r+0x194>
 801d45a:	ab03      	add	r3, sp, #12
 801d45c:	9300      	str	r3, [sp, #0]
 801d45e:	462a      	mov	r2, r5
 801d460:	4b0f      	ldr	r3, [pc, #60]	; (801d4a0 <_svfiprintf_r+0x1f8>)
 801d462:	a904      	add	r1, sp, #16
 801d464:	4638      	mov	r0, r7
 801d466:	f3af 8000 	nop.w
 801d46a:	1c42      	adds	r2, r0, #1
 801d46c:	4606      	mov	r6, r0
 801d46e:	d1d6      	bne.n	801d41e <_svfiprintf_r+0x176>
 801d470:	89ab      	ldrh	r3, [r5, #12]
 801d472:	065b      	lsls	r3, r3, #25
 801d474:	f53f af2c 	bmi.w	801d2d0 <_svfiprintf_r+0x28>
 801d478:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d47a:	b01d      	add	sp, #116	; 0x74
 801d47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d480:	ab03      	add	r3, sp, #12
 801d482:	9300      	str	r3, [sp, #0]
 801d484:	462a      	mov	r2, r5
 801d486:	4b06      	ldr	r3, [pc, #24]	; (801d4a0 <_svfiprintf_r+0x1f8>)
 801d488:	a904      	add	r1, sp, #16
 801d48a:	4638      	mov	r0, r7
 801d48c:	f000 fba6 	bl	801dbdc <_printf_i>
 801d490:	e7eb      	b.n	801d46a <_svfiprintf_r+0x1c2>
 801d492:	bf00      	nop
 801d494:	0802057c 	.word	0x0802057c
 801d498:	08020586 	.word	0x08020586
 801d49c:	00000000 	.word	0x00000000
 801d4a0:	0801d1f3 	.word	0x0801d1f3
 801d4a4:	08020582 	.word	0x08020582

0801d4a8 <_sungetc_r>:
 801d4a8:	b538      	push	{r3, r4, r5, lr}
 801d4aa:	1c4b      	adds	r3, r1, #1
 801d4ac:	4614      	mov	r4, r2
 801d4ae:	d103      	bne.n	801d4b8 <_sungetc_r+0x10>
 801d4b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801d4b4:	4628      	mov	r0, r5
 801d4b6:	bd38      	pop	{r3, r4, r5, pc}
 801d4b8:	8993      	ldrh	r3, [r2, #12]
 801d4ba:	f023 0320 	bic.w	r3, r3, #32
 801d4be:	8193      	strh	r3, [r2, #12]
 801d4c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d4c2:	6852      	ldr	r2, [r2, #4]
 801d4c4:	b2cd      	uxtb	r5, r1
 801d4c6:	b18b      	cbz	r3, 801d4ec <_sungetc_r+0x44>
 801d4c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801d4ca:	4293      	cmp	r3, r2
 801d4cc:	dd08      	ble.n	801d4e0 <_sungetc_r+0x38>
 801d4ce:	6823      	ldr	r3, [r4, #0]
 801d4d0:	1e5a      	subs	r2, r3, #1
 801d4d2:	6022      	str	r2, [r4, #0]
 801d4d4:	f803 5c01 	strb.w	r5, [r3, #-1]
 801d4d8:	6863      	ldr	r3, [r4, #4]
 801d4da:	3301      	adds	r3, #1
 801d4dc:	6063      	str	r3, [r4, #4]
 801d4de:	e7e9      	b.n	801d4b4 <_sungetc_r+0xc>
 801d4e0:	4621      	mov	r1, r4
 801d4e2:	f000 fe43 	bl	801e16c <__submore>
 801d4e6:	2800      	cmp	r0, #0
 801d4e8:	d0f1      	beq.n	801d4ce <_sungetc_r+0x26>
 801d4ea:	e7e1      	b.n	801d4b0 <_sungetc_r+0x8>
 801d4ec:	6921      	ldr	r1, [r4, #16]
 801d4ee:	6823      	ldr	r3, [r4, #0]
 801d4f0:	b151      	cbz	r1, 801d508 <_sungetc_r+0x60>
 801d4f2:	4299      	cmp	r1, r3
 801d4f4:	d208      	bcs.n	801d508 <_sungetc_r+0x60>
 801d4f6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801d4fa:	42a9      	cmp	r1, r5
 801d4fc:	d104      	bne.n	801d508 <_sungetc_r+0x60>
 801d4fe:	3b01      	subs	r3, #1
 801d500:	3201      	adds	r2, #1
 801d502:	6023      	str	r3, [r4, #0]
 801d504:	6062      	str	r2, [r4, #4]
 801d506:	e7d5      	b.n	801d4b4 <_sungetc_r+0xc>
 801d508:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801d50c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d510:	6363      	str	r3, [r4, #52]	; 0x34
 801d512:	2303      	movs	r3, #3
 801d514:	63a3      	str	r3, [r4, #56]	; 0x38
 801d516:	4623      	mov	r3, r4
 801d518:	f803 5f46 	strb.w	r5, [r3, #70]!
 801d51c:	6023      	str	r3, [r4, #0]
 801d51e:	2301      	movs	r3, #1
 801d520:	e7dc      	b.n	801d4dc <_sungetc_r+0x34>

0801d522 <__ssrefill_r>:
 801d522:	b510      	push	{r4, lr}
 801d524:	460c      	mov	r4, r1
 801d526:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801d528:	b169      	cbz	r1, 801d546 <__ssrefill_r+0x24>
 801d52a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d52e:	4299      	cmp	r1, r3
 801d530:	d001      	beq.n	801d536 <__ssrefill_r+0x14>
 801d532:	f7fc fec3 	bl	801a2bc <_free_r>
 801d536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d538:	6063      	str	r3, [r4, #4]
 801d53a:	2000      	movs	r0, #0
 801d53c:	6360      	str	r0, [r4, #52]	; 0x34
 801d53e:	b113      	cbz	r3, 801d546 <__ssrefill_r+0x24>
 801d540:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d542:	6023      	str	r3, [r4, #0]
 801d544:	bd10      	pop	{r4, pc}
 801d546:	6923      	ldr	r3, [r4, #16]
 801d548:	6023      	str	r3, [r4, #0]
 801d54a:	2300      	movs	r3, #0
 801d54c:	6063      	str	r3, [r4, #4]
 801d54e:	89a3      	ldrh	r3, [r4, #12]
 801d550:	f043 0320 	orr.w	r3, r3, #32
 801d554:	81a3      	strh	r3, [r4, #12]
 801d556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d55a:	e7f3      	b.n	801d544 <__ssrefill_r+0x22>

0801d55c <__ssvfiscanf_r>:
 801d55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d560:	460c      	mov	r4, r1
 801d562:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801d566:	2100      	movs	r1, #0
 801d568:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801d56c:	49b2      	ldr	r1, [pc, #712]	; (801d838 <__ssvfiscanf_r+0x2dc>)
 801d56e:	91a0      	str	r1, [sp, #640]	; 0x280
 801d570:	f10d 0804 	add.w	r8, sp, #4
 801d574:	49b1      	ldr	r1, [pc, #708]	; (801d83c <__ssvfiscanf_r+0x2e0>)
 801d576:	4fb2      	ldr	r7, [pc, #712]	; (801d840 <__ssvfiscanf_r+0x2e4>)
 801d578:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801d844 <__ssvfiscanf_r+0x2e8>
 801d57c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801d580:	4606      	mov	r6, r0
 801d582:	91a1      	str	r1, [sp, #644]	; 0x284
 801d584:	9300      	str	r3, [sp, #0]
 801d586:	f892 a000 	ldrb.w	sl, [r2]
 801d58a:	f1ba 0f00 	cmp.w	sl, #0
 801d58e:	f000 8151 	beq.w	801d834 <__ssvfiscanf_r+0x2d8>
 801d592:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801d596:	f013 0308 	ands.w	r3, r3, #8
 801d59a:	f102 0501 	add.w	r5, r2, #1
 801d59e:	d019      	beq.n	801d5d4 <__ssvfiscanf_r+0x78>
 801d5a0:	6863      	ldr	r3, [r4, #4]
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	dd0f      	ble.n	801d5c6 <__ssvfiscanf_r+0x6a>
 801d5a6:	6823      	ldr	r3, [r4, #0]
 801d5a8:	781a      	ldrb	r2, [r3, #0]
 801d5aa:	5cba      	ldrb	r2, [r7, r2]
 801d5ac:	0712      	lsls	r2, r2, #28
 801d5ae:	d401      	bmi.n	801d5b4 <__ssvfiscanf_r+0x58>
 801d5b0:	462a      	mov	r2, r5
 801d5b2:	e7e8      	b.n	801d586 <__ssvfiscanf_r+0x2a>
 801d5b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801d5b6:	3201      	adds	r2, #1
 801d5b8:	9245      	str	r2, [sp, #276]	; 0x114
 801d5ba:	6862      	ldr	r2, [r4, #4]
 801d5bc:	3301      	adds	r3, #1
 801d5be:	3a01      	subs	r2, #1
 801d5c0:	6062      	str	r2, [r4, #4]
 801d5c2:	6023      	str	r3, [r4, #0]
 801d5c4:	e7ec      	b.n	801d5a0 <__ssvfiscanf_r+0x44>
 801d5c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801d5c8:	4621      	mov	r1, r4
 801d5ca:	4630      	mov	r0, r6
 801d5cc:	4798      	blx	r3
 801d5ce:	2800      	cmp	r0, #0
 801d5d0:	d0e9      	beq.n	801d5a6 <__ssvfiscanf_r+0x4a>
 801d5d2:	e7ed      	b.n	801d5b0 <__ssvfiscanf_r+0x54>
 801d5d4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801d5d8:	f040 8083 	bne.w	801d6e2 <__ssvfiscanf_r+0x186>
 801d5dc:	9341      	str	r3, [sp, #260]	; 0x104
 801d5de:	9343      	str	r3, [sp, #268]	; 0x10c
 801d5e0:	7853      	ldrb	r3, [r2, #1]
 801d5e2:	2b2a      	cmp	r3, #42	; 0x2a
 801d5e4:	bf02      	ittt	eq
 801d5e6:	2310      	moveq	r3, #16
 801d5e8:	1c95      	addeq	r5, r2, #2
 801d5ea:	9341      	streq	r3, [sp, #260]	; 0x104
 801d5ec:	220a      	movs	r2, #10
 801d5ee:	46ab      	mov	fp, r5
 801d5f0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801d5f4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801d5f8:	2b09      	cmp	r3, #9
 801d5fa:	d91d      	bls.n	801d638 <__ssvfiscanf_r+0xdc>
 801d5fc:	4891      	ldr	r0, [pc, #580]	; (801d844 <__ssvfiscanf_r+0x2e8>)
 801d5fe:	2203      	movs	r2, #3
 801d600:	f7e2 fdfe 	bl	8000200 <memchr>
 801d604:	b140      	cbz	r0, 801d618 <__ssvfiscanf_r+0xbc>
 801d606:	2301      	movs	r3, #1
 801d608:	eba0 0009 	sub.w	r0, r0, r9
 801d60c:	fa03 f000 	lsl.w	r0, r3, r0
 801d610:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801d612:	4318      	orrs	r0, r3
 801d614:	9041      	str	r0, [sp, #260]	; 0x104
 801d616:	465d      	mov	r5, fp
 801d618:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d61c:	2b78      	cmp	r3, #120	; 0x78
 801d61e:	d806      	bhi.n	801d62e <__ssvfiscanf_r+0xd2>
 801d620:	2b57      	cmp	r3, #87	; 0x57
 801d622:	d810      	bhi.n	801d646 <__ssvfiscanf_r+0xea>
 801d624:	2b25      	cmp	r3, #37	; 0x25
 801d626:	d05c      	beq.n	801d6e2 <__ssvfiscanf_r+0x186>
 801d628:	d856      	bhi.n	801d6d8 <__ssvfiscanf_r+0x17c>
 801d62a:	2b00      	cmp	r3, #0
 801d62c:	d074      	beq.n	801d718 <__ssvfiscanf_r+0x1bc>
 801d62e:	2303      	movs	r3, #3
 801d630:	9347      	str	r3, [sp, #284]	; 0x11c
 801d632:	230a      	movs	r3, #10
 801d634:	9342      	str	r3, [sp, #264]	; 0x108
 801d636:	e081      	b.n	801d73c <__ssvfiscanf_r+0x1e0>
 801d638:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801d63a:	fb02 1303 	mla	r3, r2, r3, r1
 801d63e:	3b30      	subs	r3, #48	; 0x30
 801d640:	9343      	str	r3, [sp, #268]	; 0x10c
 801d642:	465d      	mov	r5, fp
 801d644:	e7d3      	b.n	801d5ee <__ssvfiscanf_r+0x92>
 801d646:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801d64a:	2a20      	cmp	r2, #32
 801d64c:	d8ef      	bhi.n	801d62e <__ssvfiscanf_r+0xd2>
 801d64e:	a101      	add	r1, pc, #4	; (adr r1, 801d654 <__ssvfiscanf_r+0xf8>)
 801d650:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d654:	0801d727 	.word	0x0801d727
 801d658:	0801d62f 	.word	0x0801d62f
 801d65c:	0801d62f 	.word	0x0801d62f
 801d660:	0801d785 	.word	0x0801d785
 801d664:	0801d62f 	.word	0x0801d62f
 801d668:	0801d62f 	.word	0x0801d62f
 801d66c:	0801d62f 	.word	0x0801d62f
 801d670:	0801d62f 	.word	0x0801d62f
 801d674:	0801d62f 	.word	0x0801d62f
 801d678:	0801d62f 	.word	0x0801d62f
 801d67c:	0801d62f 	.word	0x0801d62f
 801d680:	0801d79b 	.word	0x0801d79b
 801d684:	0801d771 	.word	0x0801d771
 801d688:	0801d6df 	.word	0x0801d6df
 801d68c:	0801d6df 	.word	0x0801d6df
 801d690:	0801d6df 	.word	0x0801d6df
 801d694:	0801d62f 	.word	0x0801d62f
 801d698:	0801d775 	.word	0x0801d775
 801d69c:	0801d62f 	.word	0x0801d62f
 801d6a0:	0801d62f 	.word	0x0801d62f
 801d6a4:	0801d62f 	.word	0x0801d62f
 801d6a8:	0801d62f 	.word	0x0801d62f
 801d6ac:	0801d7ab 	.word	0x0801d7ab
 801d6b0:	0801d77d 	.word	0x0801d77d
 801d6b4:	0801d71f 	.word	0x0801d71f
 801d6b8:	0801d62f 	.word	0x0801d62f
 801d6bc:	0801d62f 	.word	0x0801d62f
 801d6c0:	0801d7a7 	.word	0x0801d7a7
 801d6c4:	0801d62f 	.word	0x0801d62f
 801d6c8:	0801d771 	.word	0x0801d771
 801d6cc:	0801d62f 	.word	0x0801d62f
 801d6d0:	0801d62f 	.word	0x0801d62f
 801d6d4:	0801d727 	.word	0x0801d727
 801d6d8:	3b45      	subs	r3, #69	; 0x45
 801d6da:	2b02      	cmp	r3, #2
 801d6dc:	d8a7      	bhi.n	801d62e <__ssvfiscanf_r+0xd2>
 801d6de:	2305      	movs	r3, #5
 801d6e0:	e02b      	b.n	801d73a <__ssvfiscanf_r+0x1de>
 801d6e2:	6863      	ldr	r3, [r4, #4]
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	dd0d      	ble.n	801d704 <__ssvfiscanf_r+0x1a8>
 801d6e8:	6823      	ldr	r3, [r4, #0]
 801d6ea:	781a      	ldrb	r2, [r3, #0]
 801d6ec:	4552      	cmp	r2, sl
 801d6ee:	f040 80a1 	bne.w	801d834 <__ssvfiscanf_r+0x2d8>
 801d6f2:	3301      	adds	r3, #1
 801d6f4:	6862      	ldr	r2, [r4, #4]
 801d6f6:	6023      	str	r3, [r4, #0]
 801d6f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801d6fa:	3a01      	subs	r2, #1
 801d6fc:	3301      	adds	r3, #1
 801d6fe:	6062      	str	r2, [r4, #4]
 801d700:	9345      	str	r3, [sp, #276]	; 0x114
 801d702:	e755      	b.n	801d5b0 <__ssvfiscanf_r+0x54>
 801d704:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801d706:	4621      	mov	r1, r4
 801d708:	4630      	mov	r0, r6
 801d70a:	4798      	blx	r3
 801d70c:	2800      	cmp	r0, #0
 801d70e:	d0eb      	beq.n	801d6e8 <__ssvfiscanf_r+0x18c>
 801d710:	9844      	ldr	r0, [sp, #272]	; 0x110
 801d712:	2800      	cmp	r0, #0
 801d714:	f040 8084 	bne.w	801d820 <__ssvfiscanf_r+0x2c4>
 801d718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d71c:	e086      	b.n	801d82c <__ssvfiscanf_r+0x2d0>
 801d71e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801d720:	f042 0220 	orr.w	r2, r2, #32
 801d724:	9241      	str	r2, [sp, #260]	; 0x104
 801d726:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801d728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d72c:	9241      	str	r2, [sp, #260]	; 0x104
 801d72e:	2210      	movs	r2, #16
 801d730:	2b6f      	cmp	r3, #111	; 0x6f
 801d732:	9242      	str	r2, [sp, #264]	; 0x108
 801d734:	bf34      	ite	cc
 801d736:	2303      	movcc	r3, #3
 801d738:	2304      	movcs	r3, #4
 801d73a:	9347      	str	r3, [sp, #284]	; 0x11c
 801d73c:	6863      	ldr	r3, [r4, #4]
 801d73e:	2b00      	cmp	r3, #0
 801d740:	dd41      	ble.n	801d7c6 <__ssvfiscanf_r+0x26a>
 801d742:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801d744:	0659      	lsls	r1, r3, #25
 801d746:	d404      	bmi.n	801d752 <__ssvfiscanf_r+0x1f6>
 801d748:	6823      	ldr	r3, [r4, #0]
 801d74a:	781a      	ldrb	r2, [r3, #0]
 801d74c:	5cba      	ldrb	r2, [r7, r2]
 801d74e:	0712      	lsls	r2, r2, #28
 801d750:	d440      	bmi.n	801d7d4 <__ssvfiscanf_r+0x278>
 801d752:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801d754:	2b02      	cmp	r3, #2
 801d756:	dc4f      	bgt.n	801d7f8 <__ssvfiscanf_r+0x29c>
 801d758:	466b      	mov	r3, sp
 801d75a:	4622      	mov	r2, r4
 801d75c:	a941      	add	r1, sp, #260	; 0x104
 801d75e:	4630      	mov	r0, r6
 801d760:	f000 fb62 	bl	801de28 <_scanf_chars>
 801d764:	2801      	cmp	r0, #1
 801d766:	d065      	beq.n	801d834 <__ssvfiscanf_r+0x2d8>
 801d768:	2802      	cmp	r0, #2
 801d76a:	f47f af21 	bne.w	801d5b0 <__ssvfiscanf_r+0x54>
 801d76e:	e7cf      	b.n	801d710 <__ssvfiscanf_r+0x1b4>
 801d770:	220a      	movs	r2, #10
 801d772:	e7dd      	b.n	801d730 <__ssvfiscanf_r+0x1d4>
 801d774:	2300      	movs	r3, #0
 801d776:	9342      	str	r3, [sp, #264]	; 0x108
 801d778:	2303      	movs	r3, #3
 801d77a:	e7de      	b.n	801d73a <__ssvfiscanf_r+0x1de>
 801d77c:	2308      	movs	r3, #8
 801d77e:	9342      	str	r3, [sp, #264]	; 0x108
 801d780:	2304      	movs	r3, #4
 801d782:	e7da      	b.n	801d73a <__ssvfiscanf_r+0x1de>
 801d784:	4629      	mov	r1, r5
 801d786:	4640      	mov	r0, r8
 801d788:	f000 fcb6 	bl	801e0f8 <__sccl>
 801d78c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801d78e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d792:	9341      	str	r3, [sp, #260]	; 0x104
 801d794:	4605      	mov	r5, r0
 801d796:	2301      	movs	r3, #1
 801d798:	e7cf      	b.n	801d73a <__ssvfiscanf_r+0x1de>
 801d79a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801d79c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d7a0:	9341      	str	r3, [sp, #260]	; 0x104
 801d7a2:	2300      	movs	r3, #0
 801d7a4:	e7c9      	b.n	801d73a <__ssvfiscanf_r+0x1de>
 801d7a6:	2302      	movs	r3, #2
 801d7a8:	e7c7      	b.n	801d73a <__ssvfiscanf_r+0x1de>
 801d7aa:	9841      	ldr	r0, [sp, #260]	; 0x104
 801d7ac:	06c3      	lsls	r3, r0, #27
 801d7ae:	f53f aeff 	bmi.w	801d5b0 <__ssvfiscanf_r+0x54>
 801d7b2:	9b00      	ldr	r3, [sp, #0]
 801d7b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801d7b6:	1d19      	adds	r1, r3, #4
 801d7b8:	9100      	str	r1, [sp, #0]
 801d7ba:	681b      	ldr	r3, [r3, #0]
 801d7bc:	07c0      	lsls	r0, r0, #31
 801d7be:	bf4c      	ite	mi
 801d7c0:	801a      	strhmi	r2, [r3, #0]
 801d7c2:	601a      	strpl	r2, [r3, #0]
 801d7c4:	e6f4      	b.n	801d5b0 <__ssvfiscanf_r+0x54>
 801d7c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801d7c8:	4621      	mov	r1, r4
 801d7ca:	4630      	mov	r0, r6
 801d7cc:	4798      	blx	r3
 801d7ce:	2800      	cmp	r0, #0
 801d7d0:	d0b7      	beq.n	801d742 <__ssvfiscanf_r+0x1e6>
 801d7d2:	e79d      	b.n	801d710 <__ssvfiscanf_r+0x1b4>
 801d7d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801d7d6:	3201      	adds	r2, #1
 801d7d8:	9245      	str	r2, [sp, #276]	; 0x114
 801d7da:	6862      	ldr	r2, [r4, #4]
 801d7dc:	3a01      	subs	r2, #1
 801d7de:	2a00      	cmp	r2, #0
 801d7e0:	6062      	str	r2, [r4, #4]
 801d7e2:	dd02      	ble.n	801d7ea <__ssvfiscanf_r+0x28e>
 801d7e4:	3301      	adds	r3, #1
 801d7e6:	6023      	str	r3, [r4, #0]
 801d7e8:	e7ae      	b.n	801d748 <__ssvfiscanf_r+0x1ec>
 801d7ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801d7ec:	4621      	mov	r1, r4
 801d7ee:	4630      	mov	r0, r6
 801d7f0:	4798      	blx	r3
 801d7f2:	2800      	cmp	r0, #0
 801d7f4:	d0a8      	beq.n	801d748 <__ssvfiscanf_r+0x1ec>
 801d7f6:	e78b      	b.n	801d710 <__ssvfiscanf_r+0x1b4>
 801d7f8:	2b04      	cmp	r3, #4
 801d7fa:	dc06      	bgt.n	801d80a <__ssvfiscanf_r+0x2ae>
 801d7fc:	466b      	mov	r3, sp
 801d7fe:	4622      	mov	r2, r4
 801d800:	a941      	add	r1, sp, #260	; 0x104
 801d802:	4630      	mov	r0, r6
 801d804:	f000 fb68 	bl	801ded8 <_scanf_i>
 801d808:	e7ac      	b.n	801d764 <__ssvfiscanf_r+0x208>
 801d80a:	4b0f      	ldr	r3, [pc, #60]	; (801d848 <__ssvfiscanf_r+0x2ec>)
 801d80c:	2b00      	cmp	r3, #0
 801d80e:	f43f aecf 	beq.w	801d5b0 <__ssvfiscanf_r+0x54>
 801d812:	466b      	mov	r3, sp
 801d814:	4622      	mov	r2, r4
 801d816:	a941      	add	r1, sp, #260	; 0x104
 801d818:	4630      	mov	r0, r6
 801d81a:	f7fc fdf9 	bl	801a410 <_scanf_float>
 801d81e:	e7a1      	b.n	801d764 <__ssvfiscanf_r+0x208>
 801d820:	89a3      	ldrh	r3, [r4, #12]
 801d822:	f013 0f40 	tst.w	r3, #64	; 0x40
 801d826:	bf18      	it	ne
 801d828:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801d82c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801d830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d834:	9844      	ldr	r0, [sp, #272]	; 0x110
 801d836:	e7f9      	b.n	801d82c <__ssvfiscanf_r+0x2d0>
 801d838:	0801d4a9 	.word	0x0801d4a9
 801d83c:	0801d523 	.word	0x0801d523
 801d840:	08020111 	.word	0x08020111
 801d844:	08020582 	.word	0x08020582
 801d848:	0801a411 	.word	0x0801a411

0801d84c <__sfputc_r>:
 801d84c:	6893      	ldr	r3, [r2, #8]
 801d84e:	3b01      	subs	r3, #1
 801d850:	2b00      	cmp	r3, #0
 801d852:	b410      	push	{r4}
 801d854:	6093      	str	r3, [r2, #8]
 801d856:	da08      	bge.n	801d86a <__sfputc_r+0x1e>
 801d858:	6994      	ldr	r4, [r2, #24]
 801d85a:	42a3      	cmp	r3, r4
 801d85c:	db01      	blt.n	801d862 <__sfputc_r+0x16>
 801d85e:	290a      	cmp	r1, #10
 801d860:	d103      	bne.n	801d86a <__sfputc_r+0x1e>
 801d862:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d866:	f7fe b90b 	b.w	801ba80 <__swbuf_r>
 801d86a:	6813      	ldr	r3, [r2, #0]
 801d86c:	1c58      	adds	r0, r3, #1
 801d86e:	6010      	str	r0, [r2, #0]
 801d870:	7019      	strb	r1, [r3, #0]
 801d872:	4608      	mov	r0, r1
 801d874:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d878:	4770      	bx	lr

0801d87a <__sfputs_r>:
 801d87a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d87c:	4606      	mov	r6, r0
 801d87e:	460f      	mov	r7, r1
 801d880:	4614      	mov	r4, r2
 801d882:	18d5      	adds	r5, r2, r3
 801d884:	42ac      	cmp	r4, r5
 801d886:	d101      	bne.n	801d88c <__sfputs_r+0x12>
 801d888:	2000      	movs	r0, #0
 801d88a:	e007      	b.n	801d89c <__sfputs_r+0x22>
 801d88c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d890:	463a      	mov	r2, r7
 801d892:	4630      	mov	r0, r6
 801d894:	f7ff ffda 	bl	801d84c <__sfputc_r>
 801d898:	1c43      	adds	r3, r0, #1
 801d89a:	d1f3      	bne.n	801d884 <__sfputs_r+0xa>
 801d89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d8a0 <_vfiprintf_r>:
 801d8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8a4:	460d      	mov	r5, r1
 801d8a6:	b09d      	sub	sp, #116	; 0x74
 801d8a8:	4614      	mov	r4, r2
 801d8aa:	4698      	mov	r8, r3
 801d8ac:	4606      	mov	r6, r0
 801d8ae:	b118      	cbz	r0, 801d8b8 <_vfiprintf_r+0x18>
 801d8b0:	6983      	ldr	r3, [r0, #24]
 801d8b2:	b90b      	cbnz	r3, 801d8b8 <_vfiprintf_r+0x18>
 801d8b4:	f7fe fb0a 	bl	801becc <__sinit>
 801d8b8:	4b89      	ldr	r3, [pc, #548]	; (801dae0 <_vfiprintf_r+0x240>)
 801d8ba:	429d      	cmp	r5, r3
 801d8bc:	d11b      	bne.n	801d8f6 <_vfiprintf_r+0x56>
 801d8be:	6875      	ldr	r5, [r6, #4]
 801d8c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d8c2:	07d9      	lsls	r1, r3, #31
 801d8c4:	d405      	bmi.n	801d8d2 <_vfiprintf_r+0x32>
 801d8c6:	89ab      	ldrh	r3, [r5, #12]
 801d8c8:	059a      	lsls	r2, r3, #22
 801d8ca:	d402      	bmi.n	801d8d2 <_vfiprintf_r+0x32>
 801d8cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d8ce:	f7fc fca2 	bl	801a216 <__retarget_lock_acquire_recursive>
 801d8d2:	89ab      	ldrh	r3, [r5, #12]
 801d8d4:	071b      	lsls	r3, r3, #28
 801d8d6:	d501      	bpl.n	801d8dc <_vfiprintf_r+0x3c>
 801d8d8:	692b      	ldr	r3, [r5, #16]
 801d8da:	b9eb      	cbnz	r3, 801d918 <_vfiprintf_r+0x78>
 801d8dc:	4629      	mov	r1, r5
 801d8de:	4630      	mov	r0, r6
 801d8e0:	f7fe f932 	bl	801bb48 <__swsetup_r>
 801d8e4:	b1c0      	cbz	r0, 801d918 <_vfiprintf_r+0x78>
 801d8e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d8e8:	07dc      	lsls	r4, r3, #31
 801d8ea:	d50e      	bpl.n	801d90a <_vfiprintf_r+0x6a>
 801d8ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d8f0:	b01d      	add	sp, #116	; 0x74
 801d8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8f6:	4b7b      	ldr	r3, [pc, #492]	; (801dae4 <_vfiprintf_r+0x244>)
 801d8f8:	429d      	cmp	r5, r3
 801d8fa:	d101      	bne.n	801d900 <_vfiprintf_r+0x60>
 801d8fc:	68b5      	ldr	r5, [r6, #8]
 801d8fe:	e7df      	b.n	801d8c0 <_vfiprintf_r+0x20>
 801d900:	4b79      	ldr	r3, [pc, #484]	; (801dae8 <_vfiprintf_r+0x248>)
 801d902:	429d      	cmp	r5, r3
 801d904:	bf08      	it	eq
 801d906:	68f5      	ldreq	r5, [r6, #12]
 801d908:	e7da      	b.n	801d8c0 <_vfiprintf_r+0x20>
 801d90a:	89ab      	ldrh	r3, [r5, #12]
 801d90c:	0598      	lsls	r0, r3, #22
 801d90e:	d4ed      	bmi.n	801d8ec <_vfiprintf_r+0x4c>
 801d910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d912:	f7fc fc81 	bl	801a218 <__retarget_lock_release_recursive>
 801d916:	e7e9      	b.n	801d8ec <_vfiprintf_r+0x4c>
 801d918:	2300      	movs	r3, #0
 801d91a:	9309      	str	r3, [sp, #36]	; 0x24
 801d91c:	2320      	movs	r3, #32
 801d91e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d922:	f8cd 800c 	str.w	r8, [sp, #12]
 801d926:	2330      	movs	r3, #48	; 0x30
 801d928:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801daec <_vfiprintf_r+0x24c>
 801d92c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d930:	f04f 0901 	mov.w	r9, #1
 801d934:	4623      	mov	r3, r4
 801d936:	469a      	mov	sl, r3
 801d938:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d93c:	b10a      	cbz	r2, 801d942 <_vfiprintf_r+0xa2>
 801d93e:	2a25      	cmp	r2, #37	; 0x25
 801d940:	d1f9      	bne.n	801d936 <_vfiprintf_r+0x96>
 801d942:	ebba 0b04 	subs.w	fp, sl, r4
 801d946:	d00b      	beq.n	801d960 <_vfiprintf_r+0xc0>
 801d948:	465b      	mov	r3, fp
 801d94a:	4622      	mov	r2, r4
 801d94c:	4629      	mov	r1, r5
 801d94e:	4630      	mov	r0, r6
 801d950:	f7ff ff93 	bl	801d87a <__sfputs_r>
 801d954:	3001      	adds	r0, #1
 801d956:	f000 80aa 	beq.w	801daae <_vfiprintf_r+0x20e>
 801d95a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d95c:	445a      	add	r2, fp
 801d95e:	9209      	str	r2, [sp, #36]	; 0x24
 801d960:	f89a 3000 	ldrb.w	r3, [sl]
 801d964:	2b00      	cmp	r3, #0
 801d966:	f000 80a2 	beq.w	801daae <_vfiprintf_r+0x20e>
 801d96a:	2300      	movs	r3, #0
 801d96c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d974:	f10a 0a01 	add.w	sl, sl, #1
 801d978:	9304      	str	r3, [sp, #16]
 801d97a:	9307      	str	r3, [sp, #28]
 801d97c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d980:	931a      	str	r3, [sp, #104]	; 0x68
 801d982:	4654      	mov	r4, sl
 801d984:	2205      	movs	r2, #5
 801d986:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d98a:	4858      	ldr	r0, [pc, #352]	; (801daec <_vfiprintf_r+0x24c>)
 801d98c:	f7e2 fc38 	bl	8000200 <memchr>
 801d990:	9a04      	ldr	r2, [sp, #16]
 801d992:	b9d8      	cbnz	r0, 801d9cc <_vfiprintf_r+0x12c>
 801d994:	06d1      	lsls	r1, r2, #27
 801d996:	bf44      	itt	mi
 801d998:	2320      	movmi	r3, #32
 801d99a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d99e:	0713      	lsls	r3, r2, #28
 801d9a0:	bf44      	itt	mi
 801d9a2:	232b      	movmi	r3, #43	; 0x2b
 801d9a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d9a8:	f89a 3000 	ldrb.w	r3, [sl]
 801d9ac:	2b2a      	cmp	r3, #42	; 0x2a
 801d9ae:	d015      	beq.n	801d9dc <_vfiprintf_r+0x13c>
 801d9b0:	9a07      	ldr	r2, [sp, #28]
 801d9b2:	4654      	mov	r4, sl
 801d9b4:	2000      	movs	r0, #0
 801d9b6:	f04f 0c0a 	mov.w	ip, #10
 801d9ba:	4621      	mov	r1, r4
 801d9bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d9c0:	3b30      	subs	r3, #48	; 0x30
 801d9c2:	2b09      	cmp	r3, #9
 801d9c4:	d94e      	bls.n	801da64 <_vfiprintf_r+0x1c4>
 801d9c6:	b1b0      	cbz	r0, 801d9f6 <_vfiprintf_r+0x156>
 801d9c8:	9207      	str	r2, [sp, #28]
 801d9ca:	e014      	b.n	801d9f6 <_vfiprintf_r+0x156>
 801d9cc:	eba0 0308 	sub.w	r3, r0, r8
 801d9d0:	fa09 f303 	lsl.w	r3, r9, r3
 801d9d4:	4313      	orrs	r3, r2
 801d9d6:	9304      	str	r3, [sp, #16]
 801d9d8:	46a2      	mov	sl, r4
 801d9da:	e7d2      	b.n	801d982 <_vfiprintf_r+0xe2>
 801d9dc:	9b03      	ldr	r3, [sp, #12]
 801d9de:	1d19      	adds	r1, r3, #4
 801d9e0:	681b      	ldr	r3, [r3, #0]
 801d9e2:	9103      	str	r1, [sp, #12]
 801d9e4:	2b00      	cmp	r3, #0
 801d9e6:	bfbb      	ittet	lt
 801d9e8:	425b      	neglt	r3, r3
 801d9ea:	f042 0202 	orrlt.w	r2, r2, #2
 801d9ee:	9307      	strge	r3, [sp, #28]
 801d9f0:	9307      	strlt	r3, [sp, #28]
 801d9f2:	bfb8      	it	lt
 801d9f4:	9204      	strlt	r2, [sp, #16]
 801d9f6:	7823      	ldrb	r3, [r4, #0]
 801d9f8:	2b2e      	cmp	r3, #46	; 0x2e
 801d9fa:	d10c      	bne.n	801da16 <_vfiprintf_r+0x176>
 801d9fc:	7863      	ldrb	r3, [r4, #1]
 801d9fe:	2b2a      	cmp	r3, #42	; 0x2a
 801da00:	d135      	bne.n	801da6e <_vfiprintf_r+0x1ce>
 801da02:	9b03      	ldr	r3, [sp, #12]
 801da04:	1d1a      	adds	r2, r3, #4
 801da06:	681b      	ldr	r3, [r3, #0]
 801da08:	9203      	str	r2, [sp, #12]
 801da0a:	2b00      	cmp	r3, #0
 801da0c:	bfb8      	it	lt
 801da0e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801da12:	3402      	adds	r4, #2
 801da14:	9305      	str	r3, [sp, #20]
 801da16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801dafc <_vfiprintf_r+0x25c>
 801da1a:	7821      	ldrb	r1, [r4, #0]
 801da1c:	2203      	movs	r2, #3
 801da1e:	4650      	mov	r0, sl
 801da20:	f7e2 fbee 	bl	8000200 <memchr>
 801da24:	b140      	cbz	r0, 801da38 <_vfiprintf_r+0x198>
 801da26:	2340      	movs	r3, #64	; 0x40
 801da28:	eba0 000a 	sub.w	r0, r0, sl
 801da2c:	fa03 f000 	lsl.w	r0, r3, r0
 801da30:	9b04      	ldr	r3, [sp, #16]
 801da32:	4303      	orrs	r3, r0
 801da34:	3401      	adds	r4, #1
 801da36:	9304      	str	r3, [sp, #16]
 801da38:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da3c:	482c      	ldr	r0, [pc, #176]	; (801daf0 <_vfiprintf_r+0x250>)
 801da3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801da42:	2206      	movs	r2, #6
 801da44:	f7e2 fbdc 	bl	8000200 <memchr>
 801da48:	2800      	cmp	r0, #0
 801da4a:	d03f      	beq.n	801dacc <_vfiprintf_r+0x22c>
 801da4c:	4b29      	ldr	r3, [pc, #164]	; (801daf4 <_vfiprintf_r+0x254>)
 801da4e:	bb1b      	cbnz	r3, 801da98 <_vfiprintf_r+0x1f8>
 801da50:	9b03      	ldr	r3, [sp, #12]
 801da52:	3307      	adds	r3, #7
 801da54:	f023 0307 	bic.w	r3, r3, #7
 801da58:	3308      	adds	r3, #8
 801da5a:	9303      	str	r3, [sp, #12]
 801da5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da5e:	443b      	add	r3, r7
 801da60:	9309      	str	r3, [sp, #36]	; 0x24
 801da62:	e767      	b.n	801d934 <_vfiprintf_r+0x94>
 801da64:	fb0c 3202 	mla	r2, ip, r2, r3
 801da68:	460c      	mov	r4, r1
 801da6a:	2001      	movs	r0, #1
 801da6c:	e7a5      	b.n	801d9ba <_vfiprintf_r+0x11a>
 801da6e:	2300      	movs	r3, #0
 801da70:	3401      	adds	r4, #1
 801da72:	9305      	str	r3, [sp, #20]
 801da74:	4619      	mov	r1, r3
 801da76:	f04f 0c0a 	mov.w	ip, #10
 801da7a:	4620      	mov	r0, r4
 801da7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801da80:	3a30      	subs	r2, #48	; 0x30
 801da82:	2a09      	cmp	r2, #9
 801da84:	d903      	bls.n	801da8e <_vfiprintf_r+0x1ee>
 801da86:	2b00      	cmp	r3, #0
 801da88:	d0c5      	beq.n	801da16 <_vfiprintf_r+0x176>
 801da8a:	9105      	str	r1, [sp, #20]
 801da8c:	e7c3      	b.n	801da16 <_vfiprintf_r+0x176>
 801da8e:	fb0c 2101 	mla	r1, ip, r1, r2
 801da92:	4604      	mov	r4, r0
 801da94:	2301      	movs	r3, #1
 801da96:	e7f0      	b.n	801da7a <_vfiprintf_r+0x1da>
 801da98:	ab03      	add	r3, sp, #12
 801da9a:	9300      	str	r3, [sp, #0]
 801da9c:	462a      	mov	r2, r5
 801da9e:	4b16      	ldr	r3, [pc, #88]	; (801daf8 <_vfiprintf_r+0x258>)
 801daa0:	a904      	add	r1, sp, #16
 801daa2:	4630      	mov	r0, r6
 801daa4:	f3af 8000 	nop.w
 801daa8:	4607      	mov	r7, r0
 801daaa:	1c78      	adds	r0, r7, #1
 801daac:	d1d6      	bne.n	801da5c <_vfiprintf_r+0x1bc>
 801daae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dab0:	07d9      	lsls	r1, r3, #31
 801dab2:	d405      	bmi.n	801dac0 <_vfiprintf_r+0x220>
 801dab4:	89ab      	ldrh	r3, [r5, #12]
 801dab6:	059a      	lsls	r2, r3, #22
 801dab8:	d402      	bmi.n	801dac0 <_vfiprintf_r+0x220>
 801daba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dabc:	f7fc fbac 	bl	801a218 <__retarget_lock_release_recursive>
 801dac0:	89ab      	ldrh	r3, [r5, #12]
 801dac2:	065b      	lsls	r3, r3, #25
 801dac4:	f53f af12 	bmi.w	801d8ec <_vfiprintf_r+0x4c>
 801dac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801daca:	e711      	b.n	801d8f0 <_vfiprintf_r+0x50>
 801dacc:	ab03      	add	r3, sp, #12
 801dace:	9300      	str	r3, [sp, #0]
 801dad0:	462a      	mov	r2, r5
 801dad2:	4b09      	ldr	r3, [pc, #36]	; (801daf8 <_vfiprintf_r+0x258>)
 801dad4:	a904      	add	r1, sp, #16
 801dad6:	4630      	mov	r0, r6
 801dad8:	f000 f880 	bl	801dbdc <_printf_i>
 801dadc:	e7e4      	b.n	801daa8 <_vfiprintf_r+0x208>
 801dade:	bf00      	nop
 801dae0:	0802034c 	.word	0x0802034c
 801dae4:	0802036c 	.word	0x0802036c
 801dae8:	0802032c 	.word	0x0802032c
 801daec:	0802057c 	.word	0x0802057c
 801daf0:	08020586 	.word	0x08020586
 801daf4:	00000000 	.word	0x00000000
 801daf8:	0801d87b 	.word	0x0801d87b
 801dafc:	08020582 	.word	0x08020582

0801db00 <_printf_common>:
 801db00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801db04:	4616      	mov	r6, r2
 801db06:	4699      	mov	r9, r3
 801db08:	688a      	ldr	r2, [r1, #8]
 801db0a:	690b      	ldr	r3, [r1, #16]
 801db0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801db10:	4293      	cmp	r3, r2
 801db12:	bfb8      	it	lt
 801db14:	4613      	movlt	r3, r2
 801db16:	6033      	str	r3, [r6, #0]
 801db18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801db1c:	4607      	mov	r7, r0
 801db1e:	460c      	mov	r4, r1
 801db20:	b10a      	cbz	r2, 801db26 <_printf_common+0x26>
 801db22:	3301      	adds	r3, #1
 801db24:	6033      	str	r3, [r6, #0]
 801db26:	6823      	ldr	r3, [r4, #0]
 801db28:	0699      	lsls	r1, r3, #26
 801db2a:	bf42      	ittt	mi
 801db2c:	6833      	ldrmi	r3, [r6, #0]
 801db2e:	3302      	addmi	r3, #2
 801db30:	6033      	strmi	r3, [r6, #0]
 801db32:	6825      	ldr	r5, [r4, #0]
 801db34:	f015 0506 	ands.w	r5, r5, #6
 801db38:	d106      	bne.n	801db48 <_printf_common+0x48>
 801db3a:	f104 0a19 	add.w	sl, r4, #25
 801db3e:	68e3      	ldr	r3, [r4, #12]
 801db40:	6832      	ldr	r2, [r6, #0]
 801db42:	1a9b      	subs	r3, r3, r2
 801db44:	42ab      	cmp	r3, r5
 801db46:	dc26      	bgt.n	801db96 <_printf_common+0x96>
 801db48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801db4c:	1e13      	subs	r3, r2, #0
 801db4e:	6822      	ldr	r2, [r4, #0]
 801db50:	bf18      	it	ne
 801db52:	2301      	movne	r3, #1
 801db54:	0692      	lsls	r2, r2, #26
 801db56:	d42b      	bmi.n	801dbb0 <_printf_common+0xb0>
 801db58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801db5c:	4649      	mov	r1, r9
 801db5e:	4638      	mov	r0, r7
 801db60:	47c0      	blx	r8
 801db62:	3001      	adds	r0, #1
 801db64:	d01e      	beq.n	801dba4 <_printf_common+0xa4>
 801db66:	6823      	ldr	r3, [r4, #0]
 801db68:	68e5      	ldr	r5, [r4, #12]
 801db6a:	6832      	ldr	r2, [r6, #0]
 801db6c:	f003 0306 	and.w	r3, r3, #6
 801db70:	2b04      	cmp	r3, #4
 801db72:	bf08      	it	eq
 801db74:	1aad      	subeq	r5, r5, r2
 801db76:	68a3      	ldr	r3, [r4, #8]
 801db78:	6922      	ldr	r2, [r4, #16]
 801db7a:	bf0c      	ite	eq
 801db7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801db80:	2500      	movne	r5, #0
 801db82:	4293      	cmp	r3, r2
 801db84:	bfc4      	itt	gt
 801db86:	1a9b      	subgt	r3, r3, r2
 801db88:	18ed      	addgt	r5, r5, r3
 801db8a:	2600      	movs	r6, #0
 801db8c:	341a      	adds	r4, #26
 801db8e:	42b5      	cmp	r5, r6
 801db90:	d11a      	bne.n	801dbc8 <_printf_common+0xc8>
 801db92:	2000      	movs	r0, #0
 801db94:	e008      	b.n	801dba8 <_printf_common+0xa8>
 801db96:	2301      	movs	r3, #1
 801db98:	4652      	mov	r2, sl
 801db9a:	4649      	mov	r1, r9
 801db9c:	4638      	mov	r0, r7
 801db9e:	47c0      	blx	r8
 801dba0:	3001      	adds	r0, #1
 801dba2:	d103      	bne.n	801dbac <_printf_common+0xac>
 801dba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dbac:	3501      	adds	r5, #1
 801dbae:	e7c6      	b.n	801db3e <_printf_common+0x3e>
 801dbb0:	18e1      	adds	r1, r4, r3
 801dbb2:	1c5a      	adds	r2, r3, #1
 801dbb4:	2030      	movs	r0, #48	; 0x30
 801dbb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801dbba:	4422      	add	r2, r4
 801dbbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801dbc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801dbc4:	3302      	adds	r3, #2
 801dbc6:	e7c7      	b.n	801db58 <_printf_common+0x58>
 801dbc8:	2301      	movs	r3, #1
 801dbca:	4622      	mov	r2, r4
 801dbcc:	4649      	mov	r1, r9
 801dbce:	4638      	mov	r0, r7
 801dbd0:	47c0      	blx	r8
 801dbd2:	3001      	adds	r0, #1
 801dbd4:	d0e6      	beq.n	801dba4 <_printf_common+0xa4>
 801dbd6:	3601      	adds	r6, #1
 801dbd8:	e7d9      	b.n	801db8e <_printf_common+0x8e>
	...

0801dbdc <_printf_i>:
 801dbdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dbe0:	460c      	mov	r4, r1
 801dbe2:	4691      	mov	r9, r2
 801dbe4:	7e27      	ldrb	r7, [r4, #24]
 801dbe6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801dbe8:	2f78      	cmp	r7, #120	; 0x78
 801dbea:	4680      	mov	r8, r0
 801dbec:	469a      	mov	sl, r3
 801dbee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801dbf2:	d807      	bhi.n	801dc04 <_printf_i+0x28>
 801dbf4:	2f62      	cmp	r7, #98	; 0x62
 801dbf6:	d80a      	bhi.n	801dc0e <_printf_i+0x32>
 801dbf8:	2f00      	cmp	r7, #0
 801dbfa:	f000 80d8 	beq.w	801ddae <_printf_i+0x1d2>
 801dbfe:	2f58      	cmp	r7, #88	; 0x58
 801dc00:	f000 80a3 	beq.w	801dd4a <_printf_i+0x16e>
 801dc04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801dc08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801dc0c:	e03a      	b.n	801dc84 <_printf_i+0xa8>
 801dc0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801dc12:	2b15      	cmp	r3, #21
 801dc14:	d8f6      	bhi.n	801dc04 <_printf_i+0x28>
 801dc16:	a001      	add	r0, pc, #4	; (adr r0, 801dc1c <_printf_i+0x40>)
 801dc18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801dc1c:	0801dc75 	.word	0x0801dc75
 801dc20:	0801dc89 	.word	0x0801dc89
 801dc24:	0801dc05 	.word	0x0801dc05
 801dc28:	0801dc05 	.word	0x0801dc05
 801dc2c:	0801dc05 	.word	0x0801dc05
 801dc30:	0801dc05 	.word	0x0801dc05
 801dc34:	0801dc89 	.word	0x0801dc89
 801dc38:	0801dc05 	.word	0x0801dc05
 801dc3c:	0801dc05 	.word	0x0801dc05
 801dc40:	0801dc05 	.word	0x0801dc05
 801dc44:	0801dc05 	.word	0x0801dc05
 801dc48:	0801dd95 	.word	0x0801dd95
 801dc4c:	0801dcb9 	.word	0x0801dcb9
 801dc50:	0801dd77 	.word	0x0801dd77
 801dc54:	0801dc05 	.word	0x0801dc05
 801dc58:	0801dc05 	.word	0x0801dc05
 801dc5c:	0801ddb7 	.word	0x0801ddb7
 801dc60:	0801dc05 	.word	0x0801dc05
 801dc64:	0801dcb9 	.word	0x0801dcb9
 801dc68:	0801dc05 	.word	0x0801dc05
 801dc6c:	0801dc05 	.word	0x0801dc05
 801dc70:	0801dd7f 	.word	0x0801dd7f
 801dc74:	680b      	ldr	r3, [r1, #0]
 801dc76:	1d1a      	adds	r2, r3, #4
 801dc78:	681b      	ldr	r3, [r3, #0]
 801dc7a:	600a      	str	r2, [r1, #0]
 801dc7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801dc80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801dc84:	2301      	movs	r3, #1
 801dc86:	e0a3      	b.n	801ddd0 <_printf_i+0x1f4>
 801dc88:	6825      	ldr	r5, [r4, #0]
 801dc8a:	6808      	ldr	r0, [r1, #0]
 801dc8c:	062e      	lsls	r6, r5, #24
 801dc8e:	f100 0304 	add.w	r3, r0, #4
 801dc92:	d50a      	bpl.n	801dcaa <_printf_i+0xce>
 801dc94:	6805      	ldr	r5, [r0, #0]
 801dc96:	600b      	str	r3, [r1, #0]
 801dc98:	2d00      	cmp	r5, #0
 801dc9a:	da03      	bge.n	801dca4 <_printf_i+0xc8>
 801dc9c:	232d      	movs	r3, #45	; 0x2d
 801dc9e:	426d      	negs	r5, r5
 801dca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dca4:	485e      	ldr	r0, [pc, #376]	; (801de20 <_printf_i+0x244>)
 801dca6:	230a      	movs	r3, #10
 801dca8:	e019      	b.n	801dcde <_printf_i+0x102>
 801dcaa:	f015 0f40 	tst.w	r5, #64	; 0x40
 801dcae:	6805      	ldr	r5, [r0, #0]
 801dcb0:	600b      	str	r3, [r1, #0]
 801dcb2:	bf18      	it	ne
 801dcb4:	b22d      	sxthne	r5, r5
 801dcb6:	e7ef      	b.n	801dc98 <_printf_i+0xbc>
 801dcb8:	680b      	ldr	r3, [r1, #0]
 801dcba:	6825      	ldr	r5, [r4, #0]
 801dcbc:	1d18      	adds	r0, r3, #4
 801dcbe:	6008      	str	r0, [r1, #0]
 801dcc0:	0628      	lsls	r0, r5, #24
 801dcc2:	d501      	bpl.n	801dcc8 <_printf_i+0xec>
 801dcc4:	681d      	ldr	r5, [r3, #0]
 801dcc6:	e002      	b.n	801dcce <_printf_i+0xf2>
 801dcc8:	0669      	lsls	r1, r5, #25
 801dcca:	d5fb      	bpl.n	801dcc4 <_printf_i+0xe8>
 801dccc:	881d      	ldrh	r5, [r3, #0]
 801dcce:	4854      	ldr	r0, [pc, #336]	; (801de20 <_printf_i+0x244>)
 801dcd0:	2f6f      	cmp	r7, #111	; 0x6f
 801dcd2:	bf0c      	ite	eq
 801dcd4:	2308      	moveq	r3, #8
 801dcd6:	230a      	movne	r3, #10
 801dcd8:	2100      	movs	r1, #0
 801dcda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801dcde:	6866      	ldr	r6, [r4, #4]
 801dce0:	60a6      	str	r6, [r4, #8]
 801dce2:	2e00      	cmp	r6, #0
 801dce4:	bfa2      	ittt	ge
 801dce6:	6821      	ldrge	r1, [r4, #0]
 801dce8:	f021 0104 	bicge.w	r1, r1, #4
 801dcec:	6021      	strge	r1, [r4, #0]
 801dcee:	b90d      	cbnz	r5, 801dcf4 <_printf_i+0x118>
 801dcf0:	2e00      	cmp	r6, #0
 801dcf2:	d04d      	beq.n	801dd90 <_printf_i+0x1b4>
 801dcf4:	4616      	mov	r6, r2
 801dcf6:	fbb5 f1f3 	udiv	r1, r5, r3
 801dcfa:	fb03 5711 	mls	r7, r3, r1, r5
 801dcfe:	5dc7      	ldrb	r7, [r0, r7]
 801dd00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801dd04:	462f      	mov	r7, r5
 801dd06:	42bb      	cmp	r3, r7
 801dd08:	460d      	mov	r5, r1
 801dd0a:	d9f4      	bls.n	801dcf6 <_printf_i+0x11a>
 801dd0c:	2b08      	cmp	r3, #8
 801dd0e:	d10b      	bne.n	801dd28 <_printf_i+0x14c>
 801dd10:	6823      	ldr	r3, [r4, #0]
 801dd12:	07df      	lsls	r7, r3, #31
 801dd14:	d508      	bpl.n	801dd28 <_printf_i+0x14c>
 801dd16:	6923      	ldr	r3, [r4, #16]
 801dd18:	6861      	ldr	r1, [r4, #4]
 801dd1a:	4299      	cmp	r1, r3
 801dd1c:	bfde      	ittt	le
 801dd1e:	2330      	movle	r3, #48	; 0x30
 801dd20:	f806 3c01 	strble.w	r3, [r6, #-1]
 801dd24:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801dd28:	1b92      	subs	r2, r2, r6
 801dd2a:	6122      	str	r2, [r4, #16]
 801dd2c:	f8cd a000 	str.w	sl, [sp]
 801dd30:	464b      	mov	r3, r9
 801dd32:	aa03      	add	r2, sp, #12
 801dd34:	4621      	mov	r1, r4
 801dd36:	4640      	mov	r0, r8
 801dd38:	f7ff fee2 	bl	801db00 <_printf_common>
 801dd3c:	3001      	adds	r0, #1
 801dd3e:	d14c      	bne.n	801ddda <_printf_i+0x1fe>
 801dd40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dd44:	b004      	add	sp, #16
 801dd46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dd4a:	4835      	ldr	r0, [pc, #212]	; (801de20 <_printf_i+0x244>)
 801dd4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801dd50:	6823      	ldr	r3, [r4, #0]
 801dd52:	680e      	ldr	r6, [r1, #0]
 801dd54:	061f      	lsls	r7, r3, #24
 801dd56:	f856 5b04 	ldr.w	r5, [r6], #4
 801dd5a:	600e      	str	r6, [r1, #0]
 801dd5c:	d514      	bpl.n	801dd88 <_printf_i+0x1ac>
 801dd5e:	07d9      	lsls	r1, r3, #31
 801dd60:	bf44      	itt	mi
 801dd62:	f043 0320 	orrmi.w	r3, r3, #32
 801dd66:	6023      	strmi	r3, [r4, #0]
 801dd68:	b91d      	cbnz	r5, 801dd72 <_printf_i+0x196>
 801dd6a:	6823      	ldr	r3, [r4, #0]
 801dd6c:	f023 0320 	bic.w	r3, r3, #32
 801dd70:	6023      	str	r3, [r4, #0]
 801dd72:	2310      	movs	r3, #16
 801dd74:	e7b0      	b.n	801dcd8 <_printf_i+0xfc>
 801dd76:	6823      	ldr	r3, [r4, #0]
 801dd78:	f043 0320 	orr.w	r3, r3, #32
 801dd7c:	6023      	str	r3, [r4, #0]
 801dd7e:	2378      	movs	r3, #120	; 0x78
 801dd80:	4828      	ldr	r0, [pc, #160]	; (801de24 <_printf_i+0x248>)
 801dd82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801dd86:	e7e3      	b.n	801dd50 <_printf_i+0x174>
 801dd88:	065e      	lsls	r6, r3, #25
 801dd8a:	bf48      	it	mi
 801dd8c:	b2ad      	uxthmi	r5, r5
 801dd8e:	e7e6      	b.n	801dd5e <_printf_i+0x182>
 801dd90:	4616      	mov	r6, r2
 801dd92:	e7bb      	b.n	801dd0c <_printf_i+0x130>
 801dd94:	680b      	ldr	r3, [r1, #0]
 801dd96:	6826      	ldr	r6, [r4, #0]
 801dd98:	6960      	ldr	r0, [r4, #20]
 801dd9a:	1d1d      	adds	r5, r3, #4
 801dd9c:	600d      	str	r5, [r1, #0]
 801dd9e:	0635      	lsls	r5, r6, #24
 801dda0:	681b      	ldr	r3, [r3, #0]
 801dda2:	d501      	bpl.n	801dda8 <_printf_i+0x1cc>
 801dda4:	6018      	str	r0, [r3, #0]
 801dda6:	e002      	b.n	801ddae <_printf_i+0x1d2>
 801dda8:	0671      	lsls	r1, r6, #25
 801ddaa:	d5fb      	bpl.n	801dda4 <_printf_i+0x1c8>
 801ddac:	8018      	strh	r0, [r3, #0]
 801ddae:	2300      	movs	r3, #0
 801ddb0:	6123      	str	r3, [r4, #16]
 801ddb2:	4616      	mov	r6, r2
 801ddb4:	e7ba      	b.n	801dd2c <_printf_i+0x150>
 801ddb6:	680b      	ldr	r3, [r1, #0]
 801ddb8:	1d1a      	adds	r2, r3, #4
 801ddba:	600a      	str	r2, [r1, #0]
 801ddbc:	681e      	ldr	r6, [r3, #0]
 801ddbe:	6862      	ldr	r2, [r4, #4]
 801ddc0:	2100      	movs	r1, #0
 801ddc2:	4630      	mov	r0, r6
 801ddc4:	f7e2 fa1c 	bl	8000200 <memchr>
 801ddc8:	b108      	cbz	r0, 801ddce <_printf_i+0x1f2>
 801ddca:	1b80      	subs	r0, r0, r6
 801ddcc:	6060      	str	r0, [r4, #4]
 801ddce:	6863      	ldr	r3, [r4, #4]
 801ddd0:	6123      	str	r3, [r4, #16]
 801ddd2:	2300      	movs	r3, #0
 801ddd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ddd8:	e7a8      	b.n	801dd2c <_printf_i+0x150>
 801ddda:	6923      	ldr	r3, [r4, #16]
 801dddc:	4632      	mov	r2, r6
 801ddde:	4649      	mov	r1, r9
 801dde0:	4640      	mov	r0, r8
 801dde2:	47d0      	blx	sl
 801dde4:	3001      	adds	r0, #1
 801dde6:	d0ab      	beq.n	801dd40 <_printf_i+0x164>
 801dde8:	6823      	ldr	r3, [r4, #0]
 801ddea:	079b      	lsls	r3, r3, #30
 801ddec:	d413      	bmi.n	801de16 <_printf_i+0x23a>
 801ddee:	68e0      	ldr	r0, [r4, #12]
 801ddf0:	9b03      	ldr	r3, [sp, #12]
 801ddf2:	4298      	cmp	r0, r3
 801ddf4:	bfb8      	it	lt
 801ddf6:	4618      	movlt	r0, r3
 801ddf8:	e7a4      	b.n	801dd44 <_printf_i+0x168>
 801ddfa:	2301      	movs	r3, #1
 801ddfc:	4632      	mov	r2, r6
 801ddfe:	4649      	mov	r1, r9
 801de00:	4640      	mov	r0, r8
 801de02:	47d0      	blx	sl
 801de04:	3001      	adds	r0, #1
 801de06:	d09b      	beq.n	801dd40 <_printf_i+0x164>
 801de08:	3501      	adds	r5, #1
 801de0a:	68e3      	ldr	r3, [r4, #12]
 801de0c:	9903      	ldr	r1, [sp, #12]
 801de0e:	1a5b      	subs	r3, r3, r1
 801de10:	42ab      	cmp	r3, r5
 801de12:	dcf2      	bgt.n	801ddfa <_printf_i+0x21e>
 801de14:	e7eb      	b.n	801ddee <_printf_i+0x212>
 801de16:	2500      	movs	r5, #0
 801de18:	f104 0619 	add.w	r6, r4, #25
 801de1c:	e7f5      	b.n	801de0a <_printf_i+0x22e>
 801de1e:	bf00      	nop
 801de20:	0802058d 	.word	0x0802058d
 801de24:	0802059e 	.word	0x0802059e

0801de28 <_scanf_chars>:
 801de28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801de2c:	4615      	mov	r5, r2
 801de2e:	688a      	ldr	r2, [r1, #8]
 801de30:	4680      	mov	r8, r0
 801de32:	460c      	mov	r4, r1
 801de34:	b932      	cbnz	r2, 801de44 <_scanf_chars+0x1c>
 801de36:	698a      	ldr	r2, [r1, #24]
 801de38:	2a00      	cmp	r2, #0
 801de3a:	bf0c      	ite	eq
 801de3c:	2201      	moveq	r2, #1
 801de3e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 801de42:	608a      	str	r2, [r1, #8]
 801de44:	6822      	ldr	r2, [r4, #0]
 801de46:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801ded4 <_scanf_chars+0xac>
 801de4a:	06d1      	lsls	r1, r2, #27
 801de4c:	bf5f      	itttt	pl
 801de4e:	681a      	ldrpl	r2, [r3, #0]
 801de50:	1d11      	addpl	r1, r2, #4
 801de52:	6019      	strpl	r1, [r3, #0]
 801de54:	6816      	ldrpl	r6, [r2, #0]
 801de56:	2700      	movs	r7, #0
 801de58:	69a0      	ldr	r0, [r4, #24]
 801de5a:	b188      	cbz	r0, 801de80 <_scanf_chars+0x58>
 801de5c:	2801      	cmp	r0, #1
 801de5e:	d107      	bne.n	801de70 <_scanf_chars+0x48>
 801de60:	682b      	ldr	r3, [r5, #0]
 801de62:	781a      	ldrb	r2, [r3, #0]
 801de64:	6963      	ldr	r3, [r4, #20]
 801de66:	5c9b      	ldrb	r3, [r3, r2]
 801de68:	b953      	cbnz	r3, 801de80 <_scanf_chars+0x58>
 801de6a:	bb27      	cbnz	r7, 801deb6 <_scanf_chars+0x8e>
 801de6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801de70:	2802      	cmp	r0, #2
 801de72:	d120      	bne.n	801deb6 <_scanf_chars+0x8e>
 801de74:	682b      	ldr	r3, [r5, #0]
 801de76:	781b      	ldrb	r3, [r3, #0]
 801de78:	f813 3009 	ldrb.w	r3, [r3, r9]
 801de7c:	071b      	lsls	r3, r3, #28
 801de7e:	d41a      	bmi.n	801deb6 <_scanf_chars+0x8e>
 801de80:	6823      	ldr	r3, [r4, #0]
 801de82:	06da      	lsls	r2, r3, #27
 801de84:	bf5e      	ittt	pl
 801de86:	682b      	ldrpl	r3, [r5, #0]
 801de88:	781b      	ldrbpl	r3, [r3, #0]
 801de8a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801de8e:	682a      	ldr	r2, [r5, #0]
 801de90:	686b      	ldr	r3, [r5, #4]
 801de92:	3201      	adds	r2, #1
 801de94:	602a      	str	r2, [r5, #0]
 801de96:	68a2      	ldr	r2, [r4, #8]
 801de98:	3b01      	subs	r3, #1
 801de9a:	3a01      	subs	r2, #1
 801de9c:	606b      	str	r3, [r5, #4]
 801de9e:	3701      	adds	r7, #1
 801dea0:	60a2      	str	r2, [r4, #8]
 801dea2:	b142      	cbz	r2, 801deb6 <_scanf_chars+0x8e>
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	dcd7      	bgt.n	801de58 <_scanf_chars+0x30>
 801dea8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801deac:	4629      	mov	r1, r5
 801deae:	4640      	mov	r0, r8
 801deb0:	4798      	blx	r3
 801deb2:	2800      	cmp	r0, #0
 801deb4:	d0d0      	beq.n	801de58 <_scanf_chars+0x30>
 801deb6:	6823      	ldr	r3, [r4, #0]
 801deb8:	f013 0310 	ands.w	r3, r3, #16
 801debc:	d105      	bne.n	801deca <_scanf_chars+0xa2>
 801debe:	68e2      	ldr	r2, [r4, #12]
 801dec0:	3201      	adds	r2, #1
 801dec2:	60e2      	str	r2, [r4, #12]
 801dec4:	69a2      	ldr	r2, [r4, #24]
 801dec6:	b102      	cbz	r2, 801deca <_scanf_chars+0xa2>
 801dec8:	7033      	strb	r3, [r6, #0]
 801deca:	6923      	ldr	r3, [r4, #16]
 801decc:	441f      	add	r7, r3
 801dece:	6127      	str	r7, [r4, #16]
 801ded0:	2000      	movs	r0, #0
 801ded2:	e7cb      	b.n	801de6c <_scanf_chars+0x44>
 801ded4:	08020111 	.word	0x08020111

0801ded8 <_scanf_i>:
 801ded8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dedc:	4698      	mov	r8, r3
 801dede:	4b74      	ldr	r3, [pc, #464]	; (801e0b0 <_scanf_i+0x1d8>)
 801dee0:	460c      	mov	r4, r1
 801dee2:	4682      	mov	sl, r0
 801dee4:	4616      	mov	r6, r2
 801dee6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801deea:	b087      	sub	sp, #28
 801deec:	ab03      	add	r3, sp, #12
 801deee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801def2:	4b70      	ldr	r3, [pc, #448]	; (801e0b4 <_scanf_i+0x1dc>)
 801def4:	69a1      	ldr	r1, [r4, #24]
 801def6:	4a70      	ldr	r2, [pc, #448]	; (801e0b8 <_scanf_i+0x1e0>)
 801def8:	2903      	cmp	r1, #3
 801defa:	bf18      	it	ne
 801defc:	461a      	movne	r2, r3
 801defe:	68a3      	ldr	r3, [r4, #8]
 801df00:	9201      	str	r2, [sp, #4]
 801df02:	1e5a      	subs	r2, r3, #1
 801df04:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801df08:	bf88      	it	hi
 801df0a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801df0e:	4627      	mov	r7, r4
 801df10:	bf82      	ittt	hi
 801df12:	eb03 0905 	addhi.w	r9, r3, r5
 801df16:	f240 135d 	movwhi	r3, #349	; 0x15d
 801df1a:	60a3      	strhi	r3, [r4, #8]
 801df1c:	f857 3b1c 	ldr.w	r3, [r7], #28
 801df20:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801df24:	bf98      	it	ls
 801df26:	f04f 0900 	movls.w	r9, #0
 801df2a:	6023      	str	r3, [r4, #0]
 801df2c:	463d      	mov	r5, r7
 801df2e:	f04f 0b00 	mov.w	fp, #0
 801df32:	6831      	ldr	r1, [r6, #0]
 801df34:	ab03      	add	r3, sp, #12
 801df36:	7809      	ldrb	r1, [r1, #0]
 801df38:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801df3c:	2202      	movs	r2, #2
 801df3e:	f7e2 f95f 	bl	8000200 <memchr>
 801df42:	b328      	cbz	r0, 801df90 <_scanf_i+0xb8>
 801df44:	f1bb 0f01 	cmp.w	fp, #1
 801df48:	d159      	bne.n	801dffe <_scanf_i+0x126>
 801df4a:	6862      	ldr	r2, [r4, #4]
 801df4c:	b92a      	cbnz	r2, 801df5a <_scanf_i+0x82>
 801df4e:	6822      	ldr	r2, [r4, #0]
 801df50:	2308      	movs	r3, #8
 801df52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801df56:	6063      	str	r3, [r4, #4]
 801df58:	6022      	str	r2, [r4, #0]
 801df5a:	6822      	ldr	r2, [r4, #0]
 801df5c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801df60:	6022      	str	r2, [r4, #0]
 801df62:	68a2      	ldr	r2, [r4, #8]
 801df64:	1e51      	subs	r1, r2, #1
 801df66:	60a1      	str	r1, [r4, #8]
 801df68:	b192      	cbz	r2, 801df90 <_scanf_i+0xb8>
 801df6a:	6832      	ldr	r2, [r6, #0]
 801df6c:	1c51      	adds	r1, r2, #1
 801df6e:	6031      	str	r1, [r6, #0]
 801df70:	7812      	ldrb	r2, [r2, #0]
 801df72:	f805 2b01 	strb.w	r2, [r5], #1
 801df76:	6872      	ldr	r2, [r6, #4]
 801df78:	3a01      	subs	r2, #1
 801df7a:	2a00      	cmp	r2, #0
 801df7c:	6072      	str	r2, [r6, #4]
 801df7e:	dc07      	bgt.n	801df90 <_scanf_i+0xb8>
 801df80:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801df84:	4631      	mov	r1, r6
 801df86:	4650      	mov	r0, sl
 801df88:	4790      	blx	r2
 801df8a:	2800      	cmp	r0, #0
 801df8c:	f040 8085 	bne.w	801e09a <_scanf_i+0x1c2>
 801df90:	f10b 0b01 	add.w	fp, fp, #1
 801df94:	f1bb 0f03 	cmp.w	fp, #3
 801df98:	d1cb      	bne.n	801df32 <_scanf_i+0x5a>
 801df9a:	6863      	ldr	r3, [r4, #4]
 801df9c:	b90b      	cbnz	r3, 801dfa2 <_scanf_i+0xca>
 801df9e:	230a      	movs	r3, #10
 801dfa0:	6063      	str	r3, [r4, #4]
 801dfa2:	6863      	ldr	r3, [r4, #4]
 801dfa4:	4945      	ldr	r1, [pc, #276]	; (801e0bc <_scanf_i+0x1e4>)
 801dfa6:	6960      	ldr	r0, [r4, #20]
 801dfa8:	1ac9      	subs	r1, r1, r3
 801dfaa:	f000 f8a5 	bl	801e0f8 <__sccl>
 801dfae:	f04f 0b00 	mov.w	fp, #0
 801dfb2:	68a3      	ldr	r3, [r4, #8]
 801dfb4:	6822      	ldr	r2, [r4, #0]
 801dfb6:	2b00      	cmp	r3, #0
 801dfb8:	d03d      	beq.n	801e036 <_scanf_i+0x15e>
 801dfba:	6831      	ldr	r1, [r6, #0]
 801dfbc:	6960      	ldr	r0, [r4, #20]
 801dfbe:	f891 c000 	ldrb.w	ip, [r1]
 801dfc2:	f810 000c 	ldrb.w	r0, [r0, ip]
 801dfc6:	2800      	cmp	r0, #0
 801dfc8:	d035      	beq.n	801e036 <_scanf_i+0x15e>
 801dfca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801dfce:	d124      	bne.n	801e01a <_scanf_i+0x142>
 801dfd0:	0510      	lsls	r0, r2, #20
 801dfd2:	d522      	bpl.n	801e01a <_scanf_i+0x142>
 801dfd4:	f10b 0b01 	add.w	fp, fp, #1
 801dfd8:	f1b9 0f00 	cmp.w	r9, #0
 801dfdc:	d003      	beq.n	801dfe6 <_scanf_i+0x10e>
 801dfde:	3301      	adds	r3, #1
 801dfe0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801dfe4:	60a3      	str	r3, [r4, #8]
 801dfe6:	6873      	ldr	r3, [r6, #4]
 801dfe8:	3b01      	subs	r3, #1
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	6073      	str	r3, [r6, #4]
 801dfee:	dd1b      	ble.n	801e028 <_scanf_i+0x150>
 801dff0:	6833      	ldr	r3, [r6, #0]
 801dff2:	3301      	adds	r3, #1
 801dff4:	6033      	str	r3, [r6, #0]
 801dff6:	68a3      	ldr	r3, [r4, #8]
 801dff8:	3b01      	subs	r3, #1
 801dffa:	60a3      	str	r3, [r4, #8]
 801dffc:	e7d9      	b.n	801dfb2 <_scanf_i+0xda>
 801dffe:	f1bb 0f02 	cmp.w	fp, #2
 801e002:	d1ae      	bne.n	801df62 <_scanf_i+0x8a>
 801e004:	6822      	ldr	r2, [r4, #0]
 801e006:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801e00a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801e00e:	d1bf      	bne.n	801df90 <_scanf_i+0xb8>
 801e010:	2310      	movs	r3, #16
 801e012:	6063      	str	r3, [r4, #4]
 801e014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e018:	e7a2      	b.n	801df60 <_scanf_i+0x88>
 801e01a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801e01e:	6022      	str	r2, [r4, #0]
 801e020:	780b      	ldrb	r3, [r1, #0]
 801e022:	f805 3b01 	strb.w	r3, [r5], #1
 801e026:	e7de      	b.n	801dfe6 <_scanf_i+0x10e>
 801e028:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801e02c:	4631      	mov	r1, r6
 801e02e:	4650      	mov	r0, sl
 801e030:	4798      	blx	r3
 801e032:	2800      	cmp	r0, #0
 801e034:	d0df      	beq.n	801dff6 <_scanf_i+0x11e>
 801e036:	6823      	ldr	r3, [r4, #0]
 801e038:	05d9      	lsls	r1, r3, #23
 801e03a:	d50d      	bpl.n	801e058 <_scanf_i+0x180>
 801e03c:	42bd      	cmp	r5, r7
 801e03e:	d909      	bls.n	801e054 <_scanf_i+0x17c>
 801e040:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801e044:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801e048:	4632      	mov	r2, r6
 801e04a:	4650      	mov	r0, sl
 801e04c:	4798      	blx	r3
 801e04e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 801e052:	464d      	mov	r5, r9
 801e054:	42bd      	cmp	r5, r7
 801e056:	d028      	beq.n	801e0aa <_scanf_i+0x1d2>
 801e058:	6822      	ldr	r2, [r4, #0]
 801e05a:	f012 0210 	ands.w	r2, r2, #16
 801e05e:	d113      	bne.n	801e088 <_scanf_i+0x1b0>
 801e060:	702a      	strb	r2, [r5, #0]
 801e062:	6863      	ldr	r3, [r4, #4]
 801e064:	9e01      	ldr	r6, [sp, #4]
 801e066:	4639      	mov	r1, r7
 801e068:	4650      	mov	r0, sl
 801e06a:	47b0      	blx	r6
 801e06c:	f8d8 3000 	ldr.w	r3, [r8]
 801e070:	6821      	ldr	r1, [r4, #0]
 801e072:	1d1a      	adds	r2, r3, #4
 801e074:	f8c8 2000 	str.w	r2, [r8]
 801e078:	f011 0f20 	tst.w	r1, #32
 801e07c:	681b      	ldr	r3, [r3, #0]
 801e07e:	d00f      	beq.n	801e0a0 <_scanf_i+0x1c8>
 801e080:	6018      	str	r0, [r3, #0]
 801e082:	68e3      	ldr	r3, [r4, #12]
 801e084:	3301      	adds	r3, #1
 801e086:	60e3      	str	r3, [r4, #12]
 801e088:	1bed      	subs	r5, r5, r7
 801e08a:	44ab      	add	fp, r5
 801e08c:	6925      	ldr	r5, [r4, #16]
 801e08e:	445d      	add	r5, fp
 801e090:	6125      	str	r5, [r4, #16]
 801e092:	2000      	movs	r0, #0
 801e094:	b007      	add	sp, #28
 801e096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e09a:	f04f 0b00 	mov.w	fp, #0
 801e09e:	e7ca      	b.n	801e036 <_scanf_i+0x15e>
 801e0a0:	07ca      	lsls	r2, r1, #31
 801e0a2:	bf4c      	ite	mi
 801e0a4:	8018      	strhmi	r0, [r3, #0]
 801e0a6:	6018      	strpl	r0, [r3, #0]
 801e0a8:	e7eb      	b.n	801e082 <_scanf_i+0x1aa>
 801e0aa:	2001      	movs	r0, #1
 801e0ac:	e7f2      	b.n	801e094 <_scanf_i+0x1bc>
 801e0ae:	bf00      	nop
 801e0b0:	0801f604 	.word	0x0801f604
 801e0b4:	0801b9f5 	.word	0x0801b9f5
 801e0b8:	0801b8f9 	.word	0x0801b8f9
 801e0bc:	080205c8 	.word	0x080205c8

0801e0c0 <_read_r>:
 801e0c0:	b538      	push	{r3, r4, r5, lr}
 801e0c2:	4d07      	ldr	r5, [pc, #28]	; (801e0e0 <_read_r+0x20>)
 801e0c4:	4604      	mov	r4, r0
 801e0c6:	4608      	mov	r0, r1
 801e0c8:	4611      	mov	r1, r2
 801e0ca:	2200      	movs	r2, #0
 801e0cc:	602a      	str	r2, [r5, #0]
 801e0ce:	461a      	mov	r2, r3
 801e0d0:	f7e5 fd44 	bl	8003b5c <_read>
 801e0d4:	1c43      	adds	r3, r0, #1
 801e0d6:	d102      	bne.n	801e0de <_read_r+0x1e>
 801e0d8:	682b      	ldr	r3, [r5, #0]
 801e0da:	b103      	cbz	r3, 801e0de <_read_r+0x1e>
 801e0dc:	6023      	str	r3, [r4, #0]
 801e0de:	bd38      	pop	{r3, r4, r5, pc}
 801e0e0:	2001602c 	.word	0x2001602c
 801e0e4:	00000000 	.word	0x00000000

0801e0e8 <nan>:
 801e0e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801e0f0 <nan+0x8>
 801e0ec:	4770      	bx	lr
 801e0ee:	bf00      	nop
 801e0f0:	00000000 	.word	0x00000000
 801e0f4:	7ff80000 	.word	0x7ff80000

0801e0f8 <__sccl>:
 801e0f8:	b570      	push	{r4, r5, r6, lr}
 801e0fa:	780b      	ldrb	r3, [r1, #0]
 801e0fc:	4604      	mov	r4, r0
 801e0fe:	2b5e      	cmp	r3, #94	; 0x5e
 801e100:	bf0b      	itete	eq
 801e102:	784b      	ldrbeq	r3, [r1, #1]
 801e104:	1c48      	addne	r0, r1, #1
 801e106:	1c88      	addeq	r0, r1, #2
 801e108:	2200      	movne	r2, #0
 801e10a:	bf08      	it	eq
 801e10c:	2201      	moveq	r2, #1
 801e10e:	1e61      	subs	r1, r4, #1
 801e110:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801e114:	f801 2f01 	strb.w	r2, [r1, #1]!
 801e118:	42a9      	cmp	r1, r5
 801e11a:	d1fb      	bne.n	801e114 <__sccl+0x1c>
 801e11c:	b90b      	cbnz	r3, 801e122 <__sccl+0x2a>
 801e11e:	3801      	subs	r0, #1
 801e120:	bd70      	pop	{r4, r5, r6, pc}
 801e122:	f082 0101 	eor.w	r1, r2, #1
 801e126:	54e1      	strb	r1, [r4, r3]
 801e128:	1c42      	adds	r2, r0, #1
 801e12a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801e12e:	2d2d      	cmp	r5, #45	; 0x2d
 801e130:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 801e134:	4610      	mov	r0, r2
 801e136:	d006      	beq.n	801e146 <__sccl+0x4e>
 801e138:	2d5d      	cmp	r5, #93	; 0x5d
 801e13a:	d0f1      	beq.n	801e120 <__sccl+0x28>
 801e13c:	b90d      	cbnz	r5, 801e142 <__sccl+0x4a>
 801e13e:	4630      	mov	r0, r6
 801e140:	e7ee      	b.n	801e120 <__sccl+0x28>
 801e142:	462b      	mov	r3, r5
 801e144:	e7ef      	b.n	801e126 <__sccl+0x2e>
 801e146:	7816      	ldrb	r6, [r2, #0]
 801e148:	2e5d      	cmp	r6, #93	; 0x5d
 801e14a:	d0fa      	beq.n	801e142 <__sccl+0x4a>
 801e14c:	42b3      	cmp	r3, r6
 801e14e:	dcf8      	bgt.n	801e142 <__sccl+0x4a>
 801e150:	4618      	mov	r0, r3
 801e152:	3001      	adds	r0, #1
 801e154:	4286      	cmp	r6, r0
 801e156:	5421      	strb	r1, [r4, r0]
 801e158:	dcfb      	bgt.n	801e152 <__sccl+0x5a>
 801e15a:	43d8      	mvns	r0, r3
 801e15c:	4430      	add	r0, r6
 801e15e:	1c5d      	adds	r5, r3, #1
 801e160:	42b3      	cmp	r3, r6
 801e162:	bfa8      	it	ge
 801e164:	2000      	movge	r0, #0
 801e166:	182b      	adds	r3, r5, r0
 801e168:	3202      	adds	r2, #2
 801e16a:	e7de      	b.n	801e12a <__sccl+0x32>

0801e16c <__submore>:
 801e16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e170:	460c      	mov	r4, r1
 801e172:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801e174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e178:	4299      	cmp	r1, r3
 801e17a:	d11d      	bne.n	801e1b8 <__submore+0x4c>
 801e17c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e180:	f7fc f8ec 	bl	801a35c <_malloc_r>
 801e184:	b918      	cbnz	r0, 801e18e <__submore+0x22>
 801e186:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e18e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e192:	63a3      	str	r3, [r4, #56]	; 0x38
 801e194:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801e198:	6360      	str	r0, [r4, #52]	; 0x34
 801e19a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801e19e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801e1a2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801e1a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801e1aa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801e1ae:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801e1b2:	6020      	str	r0, [r4, #0]
 801e1b4:	2000      	movs	r0, #0
 801e1b6:	e7e8      	b.n	801e18a <__submore+0x1e>
 801e1b8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801e1ba:	0077      	lsls	r7, r6, #1
 801e1bc:	463a      	mov	r2, r7
 801e1be:	f7fe fff2 	bl	801d1a6 <_realloc_r>
 801e1c2:	4605      	mov	r5, r0
 801e1c4:	2800      	cmp	r0, #0
 801e1c6:	d0de      	beq.n	801e186 <__submore+0x1a>
 801e1c8:	eb00 0806 	add.w	r8, r0, r6
 801e1cc:	4601      	mov	r1, r0
 801e1ce:	4632      	mov	r2, r6
 801e1d0:	4640      	mov	r0, r8
 801e1d2:	f7fc f833 	bl	801a23c <memcpy>
 801e1d6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801e1da:	f8c4 8000 	str.w	r8, [r4]
 801e1de:	e7e9      	b.n	801e1b4 <__submore+0x48>

0801e1e0 <__ascii_wctomb>:
 801e1e0:	b149      	cbz	r1, 801e1f6 <__ascii_wctomb+0x16>
 801e1e2:	2aff      	cmp	r2, #255	; 0xff
 801e1e4:	bf85      	ittet	hi
 801e1e6:	238a      	movhi	r3, #138	; 0x8a
 801e1e8:	6003      	strhi	r3, [r0, #0]
 801e1ea:	700a      	strbls	r2, [r1, #0]
 801e1ec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801e1f0:	bf98      	it	ls
 801e1f2:	2001      	movls	r0, #1
 801e1f4:	4770      	bx	lr
 801e1f6:	4608      	mov	r0, r1
 801e1f8:	4770      	bx	lr

0801e1fa <abort>:
 801e1fa:	b508      	push	{r3, lr}
 801e1fc:	2006      	movs	r0, #6
 801e1fe:	f000 f855 	bl	801e2ac <raise>
 801e202:	2001      	movs	r0, #1
 801e204:	f7e5 fca0 	bl	8003b48 <_exit>

0801e208 <_fstat_r>:
 801e208:	b538      	push	{r3, r4, r5, lr}
 801e20a:	4d07      	ldr	r5, [pc, #28]	; (801e228 <_fstat_r+0x20>)
 801e20c:	2300      	movs	r3, #0
 801e20e:	4604      	mov	r4, r0
 801e210:	4608      	mov	r0, r1
 801e212:	4611      	mov	r1, r2
 801e214:	602b      	str	r3, [r5, #0]
 801e216:	f7e5 fce6 	bl	8003be6 <_fstat>
 801e21a:	1c43      	adds	r3, r0, #1
 801e21c:	d102      	bne.n	801e224 <_fstat_r+0x1c>
 801e21e:	682b      	ldr	r3, [r5, #0]
 801e220:	b103      	cbz	r3, 801e224 <_fstat_r+0x1c>
 801e222:	6023      	str	r3, [r4, #0]
 801e224:	bd38      	pop	{r3, r4, r5, pc}
 801e226:	bf00      	nop
 801e228:	2001602c 	.word	0x2001602c

0801e22c <_isatty_r>:
 801e22c:	b538      	push	{r3, r4, r5, lr}
 801e22e:	4d06      	ldr	r5, [pc, #24]	; (801e248 <_isatty_r+0x1c>)
 801e230:	2300      	movs	r3, #0
 801e232:	4604      	mov	r4, r0
 801e234:	4608      	mov	r0, r1
 801e236:	602b      	str	r3, [r5, #0]
 801e238:	f7e5 fce5 	bl	8003c06 <_isatty>
 801e23c:	1c43      	adds	r3, r0, #1
 801e23e:	d102      	bne.n	801e246 <_isatty_r+0x1a>
 801e240:	682b      	ldr	r3, [r5, #0]
 801e242:	b103      	cbz	r3, 801e246 <_isatty_r+0x1a>
 801e244:	6023      	str	r3, [r4, #0]
 801e246:	bd38      	pop	{r3, r4, r5, pc}
 801e248:	2001602c 	.word	0x2001602c

0801e24c <_malloc_usable_size_r>:
 801e24c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e250:	1f18      	subs	r0, r3, #4
 801e252:	2b00      	cmp	r3, #0
 801e254:	bfbc      	itt	lt
 801e256:	580b      	ldrlt	r3, [r1, r0]
 801e258:	18c0      	addlt	r0, r0, r3
 801e25a:	4770      	bx	lr

0801e25c <_raise_r>:
 801e25c:	291f      	cmp	r1, #31
 801e25e:	b538      	push	{r3, r4, r5, lr}
 801e260:	4604      	mov	r4, r0
 801e262:	460d      	mov	r5, r1
 801e264:	d904      	bls.n	801e270 <_raise_r+0x14>
 801e266:	2316      	movs	r3, #22
 801e268:	6003      	str	r3, [r0, #0]
 801e26a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e26e:	bd38      	pop	{r3, r4, r5, pc}
 801e270:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e272:	b112      	cbz	r2, 801e27a <_raise_r+0x1e>
 801e274:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e278:	b94b      	cbnz	r3, 801e28e <_raise_r+0x32>
 801e27a:	4620      	mov	r0, r4
 801e27c:	f000 f830 	bl	801e2e0 <_getpid_r>
 801e280:	462a      	mov	r2, r5
 801e282:	4601      	mov	r1, r0
 801e284:	4620      	mov	r0, r4
 801e286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e28a:	f000 b817 	b.w	801e2bc <_kill_r>
 801e28e:	2b01      	cmp	r3, #1
 801e290:	d00a      	beq.n	801e2a8 <_raise_r+0x4c>
 801e292:	1c59      	adds	r1, r3, #1
 801e294:	d103      	bne.n	801e29e <_raise_r+0x42>
 801e296:	2316      	movs	r3, #22
 801e298:	6003      	str	r3, [r0, #0]
 801e29a:	2001      	movs	r0, #1
 801e29c:	e7e7      	b.n	801e26e <_raise_r+0x12>
 801e29e:	2400      	movs	r4, #0
 801e2a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e2a4:	4628      	mov	r0, r5
 801e2a6:	4798      	blx	r3
 801e2a8:	2000      	movs	r0, #0
 801e2aa:	e7e0      	b.n	801e26e <_raise_r+0x12>

0801e2ac <raise>:
 801e2ac:	4b02      	ldr	r3, [pc, #8]	; (801e2b8 <raise+0xc>)
 801e2ae:	4601      	mov	r1, r0
 801e2b0:	6818      	ldr	r0, [r3, #0]
 801e2b2:	f7ff bfd3 	b.w	801e25c <_raise_r>
 801e2b6:	bf00      	nop
 801e2b8:	200001b8 	.word	0x200001b8

0801e2bc <_kill_r>:
 801e2bc:	b538      	push	{r3, r4, r5, lr}
 801e2be:	4d07      	ldr	r5, [pc, #28]	; (801e2dc <_kill_r+0x20>)
 801e2c0:	2300      	movs	r3, #0
 801e2c2:	4604      	mov	r4, r0
 801e2c4:	4608      	mov	r0, r1
 801e2c6:	4611      	mov	r1, r2
 801e2c8:	602b      	str	r3, [r5, #0]
 801e2ca:	f7e5 fc2d 	bl	8003b28 <_kill>
 801e2ce:	1c43      	adds	r3, r0, #1
 801e2d0:	d102      	bne.n	801e2d8 <_kill_r+0x1c>
 801e2d2:	682b      	ldr	r3, [r5, #0]
 801e2d4:	b103      	cbz	r3, 801e2d8 <_kill_r+0x1c>
 801e2d6:	6023      	str	r3, [r4, #0]
 801e2d8:	bd38      	pop	{r3, r4, r5, pc}
 801e2da:	bf00      	nop
 801e2dc:	2001602c 	.word	0x2001602c

0801e2e0 <_getpid_r>:
 801e2e0:	f7e5 bc1a 	b.w	8003b18 <_getpid>

0801e2e4 <fmod>:
 801e2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2e6:	ed2d 8b02 	vpush	{d8}
 801e2ea:	ec57 6b10 	vmov	r6, r7, d0
 801e2ee:	ec55 4b11 	vmov	r4, r5, d1
 801e2f2:	f000 f867 	bl	801e3c4 <__ieee754_fmod>
 801e2f6:	4b18      	ldr	r3, [pc, #96]	; (801e358 <fmod+0x74>)
 801e2f8:	eeb0 8a40 	vmov.f32	s16, s0
 801e2fc:	eef0 8a60 	vmov.f32	s17, s1
 801e300:	f993 3000 	ldrsb.w	r3, [r3]
 801e304:	3301      	adds	r3, #1
 801e306:	d020      	beq.n	801e34a <fmod+0x66>
 801e308:	4622      	mov	r2, r4
 801e30a:	462b      	mov	r3, r5
 801e30c:	4620      	mov	r0, r4
 801e30e:	4629      	mov	r1, r5
 801e310:	f7e2 fc1c 	bl	8000b4c <__aeabi_dcmpun>
 801e314:	b9c8      	cbnz	r0, 801e34a <fmod+0x66>
 801e316:	4632      	mov	r2, r6
 801e318:	463b      	mov	r3, r7
 801e31a:	4630      	mov	r0, r6
 801e31c:	4639      	mov	r1, r7
 801e31e:	f7e2 fc15 	bl	8000b4c <__aeabi_dcmpun>
 801e322:	b990      	cbnz	r0, 801e34a <fmod+0x66>
 801e324:	2200      	movs	r2, #0
 801e326:	2300      	movs	r3, #0
 801e328:	4620      	mov	r0, r4
 801e32a:	4629      	mov	r1, r5
 801e32c:	f7e2 fbdc 	bl	8000ae8 <__aeabi_dcmpeq>
 801e330:	b158      	cbz	r0, 801e34a <fmod+0x66>
 801e332:	f7fb fe91 	bl	801a058 <__errno>
 801e336:	2321      	movs	r3, #33	; 0x21
 801e338:	6003      	str	r3, [r0, #0]
 801e33a:	2200      	movs	r2, #0
 801e33c:	2300      	movs	r3, #0
 801e33e:	4610      	mov	r0, r2
 801e340:	4619      	mov	r1, r3
 801e342:	f7e2 fa93 	bl	800086c <__aeabi_ddiv>
 801e346:	ec41 0b18 	vmov	d8, r0, r1
 801e34a:	eeb0 0a48 	vmov.f32	s0, s16
 801e34e:	eef0 0a68 	vmov.f32	s1, s17
 801e352:	ecbd 8b02 	vpop	{d8}
 801e356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e358:	2000038c 	.word	0x2000038c

0801e35c <sqrt>:
 801e35c:	b538      	push	{r3, r4, r5, lr}
 801e35e:	ed2d 8b02 	vpush	{d8}
 801e362:	ec55 4b10 	vmov	r4, r5, d0
 801e366:	f000 f93f 	bl	801e5e8 <__ieee754_sqrt>
 801e36a:	4b15      	ldr	r3, [pc, #84]	; (801e3c0 <sqrt+0x64>)
 801e36c:	eeb0 8a40 	vmov.f32	s16, s0
 801e370:	eef0 8a60 	vmov.f32	s17, s1
 801e374:	f993 3000 	ldrsb.w	r3, [r3]
 801e378:	3301      	adds	r3, #1
 801e37a:	d019      	beq.n	801e3b0 <sqrt+0x54>
 801e37c:	4622      	mov	r2, r4
 801e37e:	462b      	mov	r3, r5
 801e380:	4620      	mov	r0, r4
 801e382:	4629      	mov	r1, r5
 801e384:	f7e2 fbe2 	bl	8000b4c <__aeabi_dcmpun>
 801e388:	b990      	cbnz	r0, 801e3b0 <sqrt+0x54>
 801e38a:	2200      	movs	r2, #0
 801e38c:	2300      	movs	r3, #0
 801e38e:	4620      	mov	r0, r4
 801e390:	4629      	mov	r1, r5
 801e392:	f7e2 fbb3 	bl	8000afc <__aeabi_dcmplt>
 801e396:	b158      	cbz	r0, 801e3b0 <sqrt+0x54>
 801e398:	f7fb fe5e 	bl	801a058 <__errno>
 801e39c:	2321      	movs	r3, #33	; 0x21
 801e39e:	6003      	str	r3, [r0, #0]
 801e3a0:	2200      	movs	r2, #0
 801e3a2:	2300      	movs	r3, #0
 801e3a4:	4610      	mov	r0, r2
 801e3a6:	4619      	mov	r1, r3
 801e3a8:	f7e2 fa60 	bl	800086c <__aeabi_ddiv>
 801e3ac:	ec41 0b18 	vmov	d8, r0, r1
 801e3b0:	eeb0 0a48 	vmov.f32	s0, s16
 801e3b4:	eef0 0a68 	vmov.f32	s1, s17
 801e3b8:	ecbd 8b02 	vpop	{d8}
 801e3bc:	bd38      	pop	{r3, r4, r5, pc}
 801e3be:	bf00      	nop
 801e3c0:	2000038c 	.word	0x2000038c

0801e3c4 <__ieee754_fmod>:
 801e3c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3c8:	ec53 2b11 	vmov	r2, r3, d1
 801e3cc:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 801e3d0:	ea5e 0402 	orrs.w	r4, lr, r2
 801e3d4:	ec51 0b10 	vmov	r0, r1, d0
 801e3d8:	ee11 7a10 	vmov	r7, s2
 801e3dc:	ee11 ca10 	vmov	ip, s2
 801e3e0:	461e      	mov	r6, r3
 801e3e2:	d00d      	beq.n	801e400 <__ieee754_fmod+0x3c>
 801e3e4:	4c7a      	ldr	r4, [pc, #488]	; (801e5d0 <__ieee754_fmod+0x20c>)
 801e3e6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801e3ea:	45a0      	cmp	r8, r4
 801e3ec:	4689      	mov	r9, r1
 801e3ee:	dc07      	bgt.n	801e400 <__ieee754_fmod+0x3c>
 801e3f0:	4254      	negs	r4, r2
 801e3f2:	4d78      	ldr	r5, [pc, #480]	; (801e5d4 <__ieee754_fmod+0x210>)
 801e3f4:	4314      	orrs	r4, r2
 801e3f6:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 801e3fa:	42ac      	cmp	r4, r5
 801e3fc:	46ab      	mov	fp, r5
 801e3fe:	d909      	bls.n	801e414 <__ieee754_fmod+0x50>
 801e400:	f7e2 f90a 	bl	8000618 <__aeabi_dmul>
 801e404:	4602      	mov	r2, r0
 801e406:	460b      	mov	r3, r1
 801e408:	f7e2 fa30 	bl	800086c <__aeabi_ddiv>
 801e40c:	ec41 0b10 	vmov	d0, r0, r1
 801e410:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e414:	45f0      	cmp	r8, lr
 801e416:	ee10 aa10 	vmov	sl, s0
 801e41a:	ee10 4a10 	vmov	r4, s0
 801e41e:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801e422:	dc0a      	bgt.n	801e43a <__ieee754_fmod+0x76>
 801e424:	dbf2      	blt.n	801e40c <__ieee754_fmod+0x48>
 801e426:	4290      	cmp	r0, r2
 801e428:	d3f0      	bcc.n	801e40c <__ieee754_fmod+0x48>
 801e42a:	d106      	bne.n	801e43a <__ieee754_fmod+0x76>
 801e42c:	4a6a      	ldr	r2, [pc, #424]	; (801e5d8 <__ieee754_fmod+0x214>)
 801e42e:	0fed      	lsrs	r5, r5, #31
 801e430:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801e434:	e9d5 0100 	ldrd	r0, r1, [r5]
 801e438:	e7e8      	b.n	801e40c <__ieee754_fmod+0x48>
 801e43a:	ea19 0f0b 	tst.w	r9, fp
 801e43e:	d14a      	bne.n	801e4d6 <__ieee754_fmod+0x112>
 801e440:	f1b8 0f00 	cmp.w	r8, #0
 801e444:	d13f      	bne.n	801e4c6 <__ieee754_fmod+0x102>
 801e446:	4965      	ldr	r1, [pc, #404]	; (801e5dc <__ieee754_fmod+0x218>)
 801e448:	4653      	mov	r3, sl
 801e44a:	2b00      	cmp	r3, #0
 801e44c:	dc38      	bgt.n	801e4c0 <__ieee754_fmod+0xfc>
 801e44e:	4b61      	ldr	r3, [pc, #388]	; (801e5d4 <__ieee754_fmod+0x210>)
 801e450:	4033      	ands	r3, r6
 801e452:	2b00      	cmp	r3, #0
 801e454:	d14f      	bne.n	801e4f6 <__ieee754_fmod+0x132>
 801e456:	f1be 0f00 	cmp.w	lr, #0
 801e45a:	d144      	bne.n	801e4e6 <__ieee754_fmod+0x122>
 801e45c:	4a5f      	ldr	r2, [pc, #380]	; (801e5dc <__ieee754_fmod+0x218>)
 801e45e:	463b      	mov	r3, r7
 801e460:	2b00      	cmp	r3, #0
 801e462:	dc3d      	bgt.n	801e4e0 <__ieee754_fmod+0x11c>
 801e464:	4b5e      	ldr	r3, [pc, #376]	; (801e5e0 <__ieee754_fmod+0x21c>)
 801e466:	4299      	cmp	r1, r3
 801e468:	db4a      	blt.n	801e500 <__ieee754_fmod+0x13c>
 801e46a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e46e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e472:	485b      	ldr	r0, [pc, #364]	; (801e5e0 <__ieee754_fmod+0x21c>)
 801e474:	4282      	cmp	r2, r0
 801e476:	db57      	blt.n	801e528 <__ieee754_fmod+0x164>
 801e478:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801e47c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801e480:	1a89      	subs	r1, r1, r2
 801e482:	1b98      	subs	r0, r3, r6
 801e484:	eba4 070c 	sub.w	r7, r4, ip
 801e488:	2900      	cmp	r1, #0
 801e48a:	d164      	bne.n	801e556 <__ieee754_fmod+0x192>
 801e48c:	4564      	cmp	r4, ip
 801e48e:	bf38      	it	cc
 801e490:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 801e494:	2800      	cmp	r0, #0
 801e496:	bfa4      	itt	ge
 801e498:	463c      	movge	r4, r7
 801e49a:	4603      	movge	r3, r0
 801e49c:	ea53 0104 	orrs.w	r1, r3, r4
 801e4a0:	d0c4      	beq.n	801e42c <__ieee754_fmod+0x68>
 801e4a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e4a6:	db6b      	blt.n	801e580 <__ieee754_fmod+0x1bc>
 801e4a8:	494d      	ldr	r1, [pc, #308]	; (801e5e0 <__ieee754_fmod+0x21c>)
 801e4aa:	428a      	cmp	r2, r1
 801e4ac:	db6e      	blt.n	801e58c <__ieee754_fmod+0x1c8>
 801e4ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e4b2:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801e4b6:	431d      	orrs	r5, r3
 801e4b8:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 801e4bc:	4620      	mov	r0, r4
 801e4be:	e7a5      	b.n	801e40c <__ieee754_fmod+0x48>
 801e4c0:	3901      	subs	r1, #1
 801e4c2:	005b      	lsls	r3, r3, #1
 801e4c4:	e7c1      	b.n	801e44a <__ieee754_fmod+0x86>
 801e4c6:	4946      	ldr	r1, [pc, #280]	; (801e5e0 <__ieee754_fmod+0x21c>)
 801e4c8:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801e4cc:	2b00      	cmp	r3, #0
 801e4ce:	ddbe      	ble.n	801e44e <__ieee754_fmod+0x8a>
 801e4d0:	3901      	subs	r1, #1
 801e4d2:	005b      	lsls	r3, r3, #1
 801e4d4:	e7fa      	b.n	801e4cc <__ieee754_fmod+0x108>
 801e4d6:	ea4f 5128 	mov.w	r1, r8, asr #20
 801e4da:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801e4de:	e7b6      	b.n	801e44e <__ieee754_fmod+0x8a>
 801e4e0:	3a01      	subs	r2, #1
 801e4e2:	005b      	lsls	r3, r3, #1
 801e4e4:	e7bc      	b.n	801e460 <__ieee754_fmod+0x9c>
 801e4e6:	4a3e      	ldr	r2, [pc, #248]	; (801e5e0 <__ieee754_fmod+0x21c>)
 801e4e8:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 801e4ec:	2b00      	cmp	r3, #0
 801e4ee:	ddb9      	ble.n	801e464 <__ieee754_fmod+0xa0>
 801e4f0:	3a01      	subs	r2, #1
 801e4f2:	005b      	lsls	r3, r3, #1
 801e4f4:	e7fa      	b.n	801e4ec <__ieee754_fmod+0x128>
 801e4f6:	ea4f 522e 	mov.w	r2, lr, asr #20
 801e4fa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801e4fe:	e7b1      	b.n	801e464 <__ieee754_fmod+0xa0>
 801e500:	1a5c      	subs	r4, r3, r1
 801e502:	2c1f      	cmp	r4, #31
 801e504:	dc0a      	bgt.n	801e51c <__ieee754_fmod+0x158>
 801e506:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 801e50a:	fa08 f804 	lsl.w	r8, r8, r4
 801e50e:	fa2a f303 	lsr.w	r3, sl, r3
 801e512:	ea43 0308 	orr.w	r3, r3, r8
 801e516:	fa0a f404 	lsl.w	r4, sl, r4
 801e51a:	e7aa      	b.n	801e472 <__ieee754_fmod+0xae>
 801e51c:	4b31      	ldr	r3, [pc, #196]	; (801e5e4 <__ieee754_fmod+0x220>)
 801e51e:	1a5b      	subs	r3, r3, r1
 801e520:	fa0a f303 	lsl.w	r3, sl, r3
 801e524:	2400      	movs	r4, #0
 801e526:	e7a4      	b.n	801e472 <__ieee754_fmod+0xae>
 801e528:	eba0 0c02 	sub.w	ip, r0, r2
 801e52c:	f1bc 0f1f 	cmp.w	ip, #31
 801e530:	dc0a      	bgt.n	801e548 <__ieee754_fmod+0x184>
 801e532:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 801e536:	fa0e fe0c 	lsl.w	lr, lr, ip
 801e53a:	fa27 f606 	lsr.w	r6, r7, r6
 801e53e:	ea46 060e 	orr.w	r6, r6, lr
 801e542:	fa07 fc0c 	lsl.w	ip, r7, ip
 801e546:	e79b      	b.n	801e480 <__ieee754_fmod+0xbc>
 801e548:	4e26      	ldr	r6, [pc, #152]	; (801e5e4 <__ieee754_fmod+0x220>)
 801e54a:	1ab6      	subs	r6, r6, r2
 801e54c:	fa07 f606 	lsl.w	r6, r7, r6
 801e550:	f04f 0c00 	mov.w	ip, #0
 801e554:	e794      	b.n	801e480 <__ieee754_fmod+0xbc>
 801e556:	4564      	cmp	r4, ip
 801e558:	bf38      	it	cc
 801e55a:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 801e55e:	2800      	cmp	r0, #0
 801e560:	da05      	bge.n	801e56e <__ieee754_fmod+0x1aa>
 801e562:	0fe0      	lsrs	r0, r4, #31
 801e564:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e568:	0064      	lsls	r4, r4, #1
 801e56a:	3901      	subs	r1, #1
 801e56c:	e789      	b.n	801e482 <__ieee754_fmod+0xbe>
 801e56e:	ea50 0307 	orrs.w	r3, r0, r7
 801e572:	f43f af5b 	beq.w	801e42c <__ieee754_fmod+0x68>
 801e576:	0ffb      	lsrs	r3, r7, #31
 801e578:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801e57c:	007c      	lsls	r4, r7, #1
 801e57e:	e7f4      	b.n	801e56a <__ieee754_fmod+0x1a6>
 801e580:	0fe1      	lsrs	r1, r4, #31
 801e582:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801e586:	0064      	lsls	r4, r4, #1
 801e588:	3a01      	subs	r2, #1
 801e58a:	e78a      	b.n	801e4a2 <__ieee754_fmod+0xde>
 801e58c:	1a89      	subs	r1, r1, r2
 801e58e:	2914      	cmp	r1, #20
 801e590:	dc0a      	bgt.n	801e5a8 <__ieee754_fmod+0x1e4>
 801e592:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801e596:	fa03 f202 	lsl.w	r2, r3, r2
 801e59a:	40cc      	lsrs	r4, r1
 801e59c:	4322      	orrs	r2, r4
 801e59e:	410b      	asrs	r3, r1
 801e5a0:	ea43 0105 	orr.w	r1, r3, r5
 801e5a4:	4610      	mov	r0, r2
 801e5a6:	e731      	b.n	801e40c <__ieee754_fmod+0x48>
 801e5a8:	291f      	cmp	r1, #31
 801e5aa:	dc07      	bgt.n	801e5bc <__ieee754_fmod+0x1f8>
 801e5ac:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801e5b0:	40cc      	lsrs	r4, r1
 801e5b2:	fa03 f202 	lsl.w	r2, r3, r2
 801e5b6:	4322      	orrs	r2, r4
 801e5b8:	462b      	mov	r3, r5
 801e5ba:	e7f1      	b.n	801e5a0 <__ieee754_fmod+0x1dc>
 801e5bc:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801e5c0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801e5c4:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 801e5c8:	32e2      	adds	r2, #226	; 0xe2
 801e5ca:	fa43 f202 	asr.w	r2, r3, r2
 801e5ce:	e7f3      	b.n	801e5b8 <__ieee754_fmod+0x1f4>
 801e5d0:	7fefffff 	.word	0x7fefffff
 801e5d4:	7ff00000 	.word	0x7ff00000
 801e5d8:	080205d0 	.word	0x080205d0
 801e5dc:	fffffbed 	.word	0xfffffbed
 801e5e0:	fffffc02 	.word	0xfffffc02
 801e5e4:	fffffbe2 	.word	0xfffffbe2

0801e5e8 <__ieee754_sqrt>:
 801e5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5ec:	ec55 4b10 	vmov	r4, r5, d0
 801e5f0:	4e56      	ldr	r6, [pc, #344]	; (801e74c <__ieee754_sqrt+0x164>)
 801e5f2:	43ae      	bics	r6, r5
 801e5f4:	ee10 0a10 	vmov	r0, s0
 801e5f8:	ee10 3a10 	vmov	r3, s0
 801e5fc:	4629      	mov	r1, r5
 801e5fe:	462a      	mov	r2, r5
 801e600:	d110      	bne.n	801e624 <__ieee754_sqrt+0x3c>
 801e602:	ee10 2a10 	vmov	r2, s0
 801e606:	462b      	mov	r3, r5
 801e608:	f7e2 f806 	bl	8000618 <__aeabi_dmul>
 801e60c:	4602      	mov	r2, r0
 801e60e:	460b      	mov	r3, r1
 801e610:	4620      	mov	r0, r4
 801e612:	4629      	mov	r1, r5
 801e614:	f7e1 fe4a 	bl	80002ac <__adddf3>
 801e618:	4604      	mov	r4, r0
 801e61a:	460d      	mov	r5, r1
 801e61c:	ec45 4b10 	vmov	d0, r4, r5
 801e620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e624:	2d00      	cmp	r5, #0
 801e626:	dc10      	bgt.n	801e64a <__ieee754_sqrt+0x62>
 801e628:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801e62c:	4330      	orrs	r0, r6
 801e62e:	d0f5      	beq.n	801e61c <__ieee754_sqrt+0x34>
 801e630:	b15d      	cbz	r5, 801e64a <__ieee754_sqrt+0x62>
 801e632:	ee10 2a10 	vmov	r2, s0
 801e636:	462b      	mov	r3, r5
 801e638:	ee10 0a10 	vmov	r0, s0
 801e63c:	f7e1 fe34 	bl	80002a8 <__aeabi_dsub>
 801e640:	4602      	mov	r2, r0
 801e642:	460b      	mov	r3, r1
 801e644:	f7e2 f912 	bl	800086c <__aeabi_ddiv>
 801e648:	e7e6      	b.n	801e618 <__ieee754_sqrt+0x30>
 801e64a:	1509      	asrs	r1, r1, #20
 801e64c:	d076      	beq.n	801e73c <__ieee754_sqrt+0x154>
 801e64e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801e652:	07ce      	lsls	r6, r1, #31
 801e654:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801e658:	bf5e      	ittt	pl
 801e65a:	0fda      	lsrpl	r2, r3, #31
 801e65c:	005b      	lslpl	r3, r3, #1
 801e65e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801e662:	0fda      	lsrs	r2, r3, #31
 801e664:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801e668:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801e66c:	2000      	movs	r0, #0
 801e66e:	106d      	asrs	r5, r5, #1
 801e670:	005b      	lsls	r3, r3, #1
 801e672:	f04f 0e16 	mov.w	lr, #22
 801e676:	4684      	mov	ip, r0
 801e678:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801e67c:	eb0c 0401 	add.w	r4, ip, r1
 801e680:	4294      	cmp	r4, r2
 801e682:	bfde      	ittt	le
 801e684:	1b12      	suble	r2, r2, r4
 801e686:	eb04 0c01 	addle.w	ip, r4, r1
 801e68a:	1840      	addle	r0, r0, r1
 801e68c:	0052      	lsls	r2, r2, #1
 801e68e:	f1be 0e01 	subs.w	lr, lr, #1
 801e692:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801e696:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801e69a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801e69e:	d1ed      	bne.n	801e67c <__ieee754_sqrt+0x94>
 801e6a0:	4671      	mov	r1, lr
 801e6a2:	2720      	movs	r7, #32
 801e6a4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801e6a8:	4562      	cmp	r2, ip
 801e6aa:	eb04 060e 	add.w	r6, r4, lr
 801e6ae:	dc02      	bgt.n	801e6b6 <__ieee754_sqrt+0xce>
 801e6b0:	d113      	bne.n	801e6da <__ieee754_sqrt+0xf2>
 801e6b2:	429e      	cmp	r6, r3
 801e6b4:	d811      	bhi.n	801e6da <__ieee754_sqrt+0xf2>
 801e6b6:	2e00      	cmp	r6, #0
 801e6b8:	eb06 0e04 	add.w	lr, r6, r4
 801e6bc:	da43      	bge.n	801e746 <__ieee754_sqrt+0x15e>
 801e6be:	f1be 0f00 	cmp.w	lr, #0
 801e6c2:	db40      	blt.n	801e746 <__ieee754_sqrt+0x15e>
 801e6c4:	f10c 0801 	add.w	r8, ip, #1
 801e6c8:	eba2 020c 	sub.w	r2, r2, ip
 801e6cc:	429e      	cmp	r6, r3
 801e6ce:	bf88      	it	hi
 801e6d0:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 801e6d4:	1b9b      	subs	r3, r3, r6
 801e6d6:	4421      	add	r1, r4
 801e6d8:	46c4      	mov	ip, r8
 801e6da:	0052      	lsls	r2, r2, #1
 801e6dc:	3f01      	subs	r7, #1
 801e6de:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801e6e2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801e6e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801e6ea:	d1dd      	bne.n	801e6a8 <__ieee754_sqrt+0xc0>
 801e6ec:	4313      	orrs	r3, r2
 801e6ee:	d006      	beq.n	801e6fe <__ieee754_sqrt+0x116>
 801e6f0:	1c4c      	adds	r4, r1, #1
 801e6f2:	bf13      	iteet	ne
 801e6f4:	3101      	addne	r1, #1
 801e6f6:	3001      	addeq	r0, #1
 801e6f8:	4639      	moveq	r1, r7
 801e6fa:	f021 0101 	bicne.w	r1, r1, #1
 801e6fe:	1043      	asrs	r3, r0, #1
 801e700:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801e704:	0849      	lsrs	r1, r1, #1
 801e706:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801e70a:	07c2      	lsls	r2, r0, #31
 801e70c:	bf48      	it	mi
 801e70e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801e712:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801e716:	460c      	mov	r4, r1
 801e718:	463d      	mov	r5, r7
 801e71a:	e77f      	b.n	801e61c <__ieee754_sqrt+0x34>
 801e71c:	0ada      	lsrs	r2, r3, #11
 801e71e:	3815      	subs	r0, #21
 801e720:	055b      	lsls	r3, r3, #21
 801e722:	2a00      	cmp	r2, #0
 801e724:	d0fa      	beq.n	801e71c <__ieee754_sqrt+0x134>
 801e726:	02d7      	lsls	r7, r2, #11
 801e728:	d50a      	bpl.n	801e740 <__ieee754_sqrt+0x158>
 801e72a:	f1c1 0420 	rsb	r4, r1, #32
 801e72e:	fa23 f404 	lsr.w	r4, r3, r4
 801e732:	1e4d      	subs	r5, r1, #1
 801e734:	408b      	lsls	r3, r1
 801e736:	4322      	orrs	r2, r4
 801e738:	1b41      	subs	r1, r0, r5
 801e73a:	e788      	b.n	801e64e <__ieee754_sqrt+0x66>
 801e73c:	4608      	mov	r0, r1
 801e73e:	e7f0      	b.n	801e722 <__ieee754_sqrt+0x13a>
 801e740:	0052      	lsls	r2, r2, #1
 801e742:	3101      	adds	r1, #1
 801e744:	e7ef      	b.n	801e726 <__ieee754_sqrt+0x13e>
 801e746:	46e0      	mov	r8, ip
 801e748:	e7be      	b.n	801e6c8 <__ieee754_sqrt+0xe0>
 801e74a:	bf00      	nop
 801e74c:	7ff00000 	.word	0x7ff00000

0801e750 <_init>:
 801e750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e752:	bf00      	nop
 801e754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e756:	bc08      	pop	{r3}
 801e758:	469e      	mov	lr, r3
 801e75a:	4770      	bx	lr

0801e75c <_fini>:
 801e75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e75e:	bf00      	nop
 801e760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e762:	bc08      	pop	{r3}
 801e764:	469e      	mov	lr, r3
 801e766:	4770      	bx	lr
